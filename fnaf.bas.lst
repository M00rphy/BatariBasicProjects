------- FILE c:\xampp\htdocs\BatariBasicProjects\fnaf.bas.asm LEVEL 1 PASS 3
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"vcs.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; VCS.H
      4  8400 ????						; Version 1.05, 13/November/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_VCS =	105
      7  8400 ????
      8  8400 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines hardware registers and memory mapping for the
     13  8400 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  8400 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  8400 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  8400 ????						; with your views.  Please contribute, if you think you can improve this
     21  8400 ????						; file!
     22  8400 ????						;
     23  8400 ????						; Latest Revisions...
     24  8400 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  8400 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  8400 ????						;			    This will allow conditional code to verify VCS.H being
     27  8400 ????						;			    used for code assembly.
     28  8400 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  8400 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  8400 ????						;			 mirrored reading/writing differences.	This is more a 
     31  8400 ????						;			 readability issue, and binary compatibility with disassembled
     32  8400 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  8400 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  8400 ????						;			 which was broken by the use of segments in this file, as
     35  8400 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  8400 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  8400 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  8400 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  8400 ????						;						   it is safe to leave it undefined, and the base address will
     40  8400 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  8400 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  8400 ????						;			  - register definitions are now generated through assignment
     43  8400 ????						;			    in uninitialised segments.	This allows a changeable base
     44  8400 ????						;			    address architecture.
     45  8400 ????						; 1.0	22/MAR/2003		Initial release
     46  8400 ????
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????
     50  8400 ????						; TIA_BASE_ADDRESS
     51  8400 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  8400 ????						; Normally 0, the base address should (externally, before including this file)
     53  8400 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  8400 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  8400 ????						; < $40 as a bankswitch.
     56  8400 ????
     57  8400 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  8400 ????			  -TIA_BASE_ADDRESS =	0
     59  8400 ????				      ENDIF
     60  8400 ????
     61  8400 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  8400 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  8400 ????						; *OR* by declaring the label before including this file, eg:
     64  8400 ????						; TIA_BASE_ADDRESS = $40
     65  8400 ????						;   include "vcs.h"
     66  8400 ????
     67  8400 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  8400 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  8400 ????						; for the mirrored ROM hardware registers.
     70  8400 ????
     71  8400 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  8400 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  8400 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  8400 ????
     75  8400 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  8400 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  8400 ????				      ENDIF
     78  8400 ????
     79  8400 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  8400 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  8400 ????				      ENDIF
     82  8400 ????
     83  8400 ????						;-------------------------------------------------------------------------------
     84  8400 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  8400 ????				      SEG
    201  8400 ????
    202  8400 ????						; EOF
------- FILE c:\xampp\htdocs\BatariBasicProjects\fnaf.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  8400 ????				      include	"macro.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; MACRO.H
      4  8400 ????						; Version 1.05, 13/NOVEMBER/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_MACRO =	105
      7  8400 ????
      8  8400 ????						;
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  8400 ????						; It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  8400 ????						; contents, or would like to add something, please write to me
     19  8400 ????						; (atari2600@taswegian.com) with your contribution.
     20  8400 ????						;
     21  8400 ????						; Latest Revisions...
     22  8400 ????						;
     23  8400 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  8400 ????						;			    This will allow conditional code to verify MACRO.H being
     25  8400 ????						;			    used for code assembly.
     26  8400 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  8400 ????						;
     28  8400 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  8400 ????						;
     30  8400 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  8400 ????						;			   (standardised macro for vertical synch code)
     32  8400 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  8400 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  8400 ????						; 1.0	22/MAR/2003		Initial release
     35  8400 ????
     36  8400 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  8400 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  8400 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  8400 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  8400 ????						;   registers and require them to be defined first).
     41  8400 ????
     42  8400 ????						; Available macros...
     43  8400 ????						;   SLEEP n		 - sleep for n cycles
     44  8400 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  8400 ????						;   CLEAN_START	 - set machine to known state on startup
     46  8400 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????						; SLEEP duration
     50  8400 ????						; Original author: Thomas Jentzsch
     51  8400 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  8400 ????						; useful for code where precise timing is required.
     53  8400 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  8400 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  8400 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  8400 ????
     57  8400 ????				      MAC	sleep
     58  8400 ????			   .CYCLES    SET	{1}
     59  8400 ????
     60  8400 ????				      IF	.CYCLES < 2
     61  8400 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  8400 ????				      ERR
     63  8400 ????				      ENDIF
     64  8400 ????
     65  8400 ????				      IF	.CYCLES & 1
     66  8400 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  8400 ????				      nop	0
     68  8400 ????				      ELSE
     69  8400 ????				      bit	VSYNC
     70  8400 ????				      ENDIF
     71  8400 ????			   .CYCLES    SET	.CYCLES - 3
     72  8400 ????				      ENDIF
     73  8400 ????
     74  8400 ????				      REPEAT	.CYCLES / 2
     75  8400 ????				      nop
     76  8400 ????				      REPEND
     77  8400 ????				      ENDM		;usage: SLEEP n (n>1)
     78  8400 ????
     79  8400 ????						;-------------------------------------------------------------------------------
     80  8400 ????						; VERTICAL_SYNC
     81  8400 ????						; Original author: Manuel Polik
     82  8400 ????						; Inserts the code required for a proper 3 scannline 
     83  8400 ????						; vertical sync sequence
     84  8400 ????						;
     85  8400 ????						; Note: Alters the accumulator
     86  8400 ????						;
     87  8400 ????						; IN:
     88  8400 ????						; OUT: A = 1
     89  8400 ????
     90  8400 ????				      MAC	vertical_sync
     91  8400 ????				      LDA	#$02	; A = VSYNC enable
     92  8400 ????				      STA	WSYNC	; Finish current line
     93  8400 ????				      STA	VSYNC	; Start vertical sync
     94  8400 ????				      STA	WSYNC	; 1st line vertical sync
     95  8400 ????				      STA	WSYNC	; 2nd line vertical sync
     96  8400 ????				      LSR		; A = VSYNC disable
     97  8400 ????				      STA	WSYNC	; 3rd line vertical sync
     98  8400 ????				      STA	VSYNC	; Stop vertical sync
     99  8400 ????				      ENDM
    100  8400 ????
    101  8400 ????						;-------------------------------------------------------------------------------
    102  8400 ????						; CLEAN_START
    103  8400 ????						; Original author: Andrew Davie
    104  8400 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  8400 ????						; Sets stack pointer to $FF, and all registers to 0
    106  8400 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  8400 ????						; Use as very first section of code on boot (ie: at reset)
    108  8400 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  8400 ????
    110  8400 ????				      MAC	clean_start
    111  8400 ????				      sei
    112  8400 ????				      cld
    113  8400 ????
    114  8400 ????				      ldx	#0
    115  8400 ????				      txa
    116  8400 ????				      tay
    117  8400 ????			   .CLEAR_STACK dex
    118  8400 ????				      txs
    119  8400 ????				      pha
    120  8400 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  8400 ????
    122  8400 ????				      ENDM
    123  8400 ????
    124  8400 ????						;-------------------------------------------------------
    125  8400 ????						; SET_POINTER
    126  8400 ????						; Original author: Manuel Rotschkar
    127  8400 ????						;
    128  8400 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  8400 ????						;
    130  8400 ????						; Usage: SET_POINTER pointer, address
    131  8400 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  8400 ????						;
    133  8400 ????						; Note: Alters the accumulator, NZ flags
    134  8400 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  8400 ????						; IN 2: absolute address
    136  8400 ????
    137  8400 ????				      MAC	set_pointer
    138  8400 ????			   .POINTER   SET	{1}
    139  8400 ????			   .ADDRESS   SET	{2}
    140  8400 ????
    141  8400 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  8400 ????				      STA	.POINTER	; Store in pointer
    143  8400 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  8400 ????				      STA	.POINTER+1	; Store in pointer+1
    145  8400 ????
    146  8400 ????				      ENDM
    147  8400 ????
    148  8400 ????						; EOF
------- FILE c:\xampp\htdocs\BatariBasicProjects\fnaf.bas.asm
------- FILE DPCplus.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplus.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; DPCplus.H - Display Processor Chip Plus Definitions
      4  8400 ????						; Chris Walton, Fred Quimby, Darrell Spice 2010
      5  8400 ????						; Version 0.00
      6  8400 ????
      7  8400 ????						; DPC Base Address
      8  8400 ????			  -	      IFNCONST	DPC_BASE_ADDRESS
      9  8400 ????			  -DPC_BASE_ADDRESS =	$1000
     10  8400 ????				      ENDIF
     11  8400 ????
     12  8400 ????						; DPC Read Base
     13  8400 ????			  -	      IFNCONST	DPC_BASE_READ_ADDRESS
     14  8400 ????			  -DPC_BASE_READ_ADDRESS =	DPC_BASE_ADDRESS
     15  8400 ????				      ENDIF
     16  8400 ????
     17  8400 ????						; DPC Write Base
     18  8400 ????			  -	      IFNCONST	DPC_BASE_WRITE_ADDRESS
     19  8400 ????			  -DPC_BASE_WRITE_ADDRESS =	DPC_BASE_ADDRESS+$28
     20  8400 ????				      ENDIF
     21  8400 ????
     22 U1028 ????				      SEG.U	DPC_REGISTERS_READ
     23 U1000					      ORG	DPC_BASE_READ_ADDRESS
     24 U1000
     25 U1000							;****************************************
     26 U1000							; DPC+ Read Registers
     27 U1000							;****************************************
     28 U1000							;
     29 U1000							;----------------------------------------
     30 U1000							; Random Numbers
     31 U1000							;----------------------------------------
     32 U1000							; DPC+ provides a 32 bit LFSR (Linear feedback shift register)
     33 U1000							; which is used as a random number generator.	Each individual byte of the
     34 U1000							; random number will return values from 0-255.  The random numbers will follow
     35 U1000							; an exact sequence, so it's best to clock them at least once per frame even if 
     36 U1000							; you don't need the value (this allows the amount of time it takes the user to
     37 U1000							; start the game to select a random starting point in the sequence)
     38 U1000							;----------------------------------------
     39 U1000		       00	   RANDOM0NEXT DS	1	; $00 clock next 32 bit number and returns byte 0
     40 U1001		       00	   RANDOM0PRIOR DS	1	; $01 clock prior 32 bit number and returns byte 0
     41 U1002		       00	   RANDOM1    DS	1	; $02 returns byte 1 of random number w/out clock
     42 U1003		       00	   RANDOM2    DS	1	; $03 returns byte 2 of random number w/out clock
     43 U1004		       00	   RANDOM3    DS	1	; $04 returns byte 3 of random number w/out clock
     44 U1005
     45 U1005							;----------------------------------------
     46 U1005							; Music Fetcher
     47 U1005							;----------------------------------------
     48 U1005							; When generating music, this value must be read every single scanline and
     49 U1005							; stored into AUDV0.
     50 U1005							;----------------------------------------
     51 U1005		       00	   AMPLITUDE  DS	1	; $05
     52 U1006
     53 U1006							;----------------------------------------
     54 U1006							; Reserved
     55 U1006							;----------------------------------------
     56 U1006		       00		      DS	1	; $06
     57 U1007		       00		      DS	1	; $07
     58 U1008
     59 U1008							;----------------------------------------
     60 U1008							; Data Fetcher
     61 U1008							;----------------------------------------
     62 U1008							; There are 8 Data Fetchers which are used to access data stored in the Display
     63 U1008							; Data bank.  Before using, you must point the Data Fetcher at the data to read
     64 U1008							; via DFxLOW and DFxHI.  After each read the Data Fetcher will update to point
     65 U1008							; to the next byte of data to return.
     66 U1008							;
     67 U1008							; psuedo code* to point Data Fetcher 1 to the color data
     68 U1008							;	lda #<(ColorDataPosition - HowFarDownScreen)
     69 U1008							;	sta DF1LOW
     70 U1008							;	lda #>(ColorDataPosition - HowFarDownScreen)
     71 U1008							;	sta DF1HI 
     72 U1008							;	....
     73 U1008							; then in the kernel read the Data Fetcher and update the color, takes 7 cycles
     74 U1008							;	LDA DF1DATA
     75 U1008							;	STA COLUP0
     76 U1008							;
     77 U1008							; * see DPCplus.asm for actual code
     78 U1008							;----------------------------------------
     79 U1008		       00	   DF0DATA    DS	1	; $08
     80 U1009		       00	   DF1DATA    DS	1	; $09
     81 U100a		       00	   DF2DATA    DS	1	; $0A
     82 U100b		       00	   DF3DATA    DS	1	; $0B
     83 U100c		       00	   DF4DATA    DS	1	; $0C
     84 U100d		       00	   DF5DATA    DS	1	; $0D
     85 U100e		       00	   DF6DATA    DS	1	; $0E
     86 U100f		       00	   DF7DATA    DS	1	; $0F
     87 U1010
     88 U1010							;----------------------------------------
     89 U1010							; Data Fetcher, Windowed
     90 U1010							;----------------------------------------
     91 U1010							; The 8 Data Fetchers can also be read in a "windowed" mode, which is most
     92 U1010							; commonly used to update sprites.  To use windowed mode, point the Data
     93 U1010							; Fetcher the same as above, but then also set the Top and Bottom of the
     94 U1010							; Window using DFxTOP and DFxBOT.  When reading via the DFxDATAW registers, a 0
     95 U1010							; value will be returned for anything that's outside of the window.
     96 U1010							;
     97 U1010							; psuedo code to point Data Fetcher0 to the sprite data
     98 U1010							;	lda #<(SpriteDataPosition - HowFarDownScreen)
     99 U1010							;	sta DF0LOW
    100 U1010							;	lda #>(SpriteDataPosition - HowFarDownScreen)
    101 U1010							;	sta DF0HI
    102 U1010							;	
    103 U1010							; set the window for Data Fetcher 0
    104 U1010							;	lda #<(SpriteDataPosition - 1)
    105 U1010							;	sta DF0TOP
    106 U1010							;	lda #<(SpriteDataPosition + ImageHeight)
    107 U1010							;	sta DF0BOT
    108 U1010							;	....
    109 U1010							; then in the kernel read the Data Fetcher and update the sprite, takes 7 cycles
    110 U1010							;	LDA DF0DATAW
    111 U1010							;	STA GRP0
    112 U1010							;----------------------------------------
    113 U1010		       00	   DF0DATAW   DS	1	; $10
    114 U1011		       00	   DF1DATAW   DS	1	; $11
    115 U1012		       00	   DF2DATAW   DS	1	; $12
    116 U1013		       00	   DF3DATAW   DS	1	; $13
    117 U1014		       00	   DF4DATAW   DS	1	; $14
    118 U1015		       00	   DF5DATAW   DS	1	; $15
    119 U1016		       00	   DF6DATAW   DS	1	; $16
    120 U1017		       00	   DF7DATAW   DS	1	; $17
    121 U1018
    122 U1018							;----------------------------------------
    123 U1018							; Fractional Data Fetcher
    124 U1018							;----------------------------------------
    125 U1018							; Another 8 Data Fetchers exist which work differently than the first 8.
    126 U1018							; These allow you to fractionally increment the Data Fetcher so a single
    127 U1018							; value can be read a set number of times before advancing to the next value.
    128 U1018							; This is commonly used to draw asymmetrical playfields without needing to 
    129 U1018							; use 1200 bytes of data (200 scanlines * 6 playfield updates).
    130 U1018							; Before using, you must point the Fractional Data Fetcher at the data to read
    131 U1018							; via DFxFRACLOW and DFxFRACHI.  You must also set the increment value via
    132 U1018							; DFxFRACINC.
    133 U1018							;
    134 U1018							; Set pointer
    135 U1018							;	LDA #<PlayfieldPF0l
    136 U1018							;	STA DF0FRACLOW
    137 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    138 U1018							;	lda #>PlayFieldPF0l
    139 U1018							;	STA DF0FRACHI
    140 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    141 U1018							; Set the increment to repeat the value for x reads
    142 U1018							;	LDA #(256/x)
    143 U1018							;	STA DF0FRACINC
    144 U1018							;	 STA DF1FRACINC
    145 U1018							;	... repeat for 2-5
    146 U1018							;
    147 U1018							; Special Condition - IF you want to increment the pointer after every read 
    148 U1018							; (just like the normal Data Fetcher), then use the following to set the
    149 U1018							; increment AND prime the Fractional Data Fetcher
    150 U1018							;	LDA #255
    151 U1018							;	STA DF0FRACINC
    152 U1018							;	 STA DF1FRACINC
    153 U1018							;	... repeat for 2-5
    154 U1018							;	LDA DF0FRACDATA - priming read (first value will be read twice)
    155 U1018							;	LDA DF1FRACDATA - priming read (first value will be read twice)
    156 U1018							;	... repeat for 2-5
    157 U1018							;
    158 U1018							; then in the kernel read the Fractional Data Fetchers and update the playfield
    159 U1018							;	LDA DF0FRACDATA
    160 U1018							;	STA PF0
    161 U1018							;	LDA PF1FRACDATA
    162 U1018							;	STA PF1
    163 U1018							;	... repeat for Data Fetchers 2-5, putting them in PF2, PF0, PF1 and PF2
    164 U1018							;----------------------------------------
    165 U1018		       00	   DF0FRACDATA DS	1	; $18
    166 U1019		       00	   DF1FRACDATA DS	1	; $19
    167 U101a		       00	   DF2FRACDATA DS	1	; $1A
    168 U101b		       00	   DF3FRACDATA DS	1	; $1B
    169 U101c		       00	   DF4FRACDATA DS	1	; $1C
    170 U101d		       00	   DF5FRACDATA DS	1	; $1D
    171 U101e		       00	   DF6FRACDATA DS	1	; $1E
    172 U101f		       00	   DF7FRACDATA DS	1	; $1F
    173 U1020
    174 U1020							;----------------------------------------
    175 U1020							; Data Fetcher Window Flag
    176 U1020							;----------------------------------------
    177 U1020							; The Data Fetcher Window Flag allows you to dual-purpose the first four
    178 U1020							; Data Fetchers.  The Window is not required when a Data Fetcher is used to
    179 U1020							; update a sprite's color.  The Flag will return $FF if it's within the window,
    180 U1020							; or 0 if it's not - this value can be used to control the display of the ball
    181 U1020							; and missiles. The Data Fetcher will NOT increment when reading the flag.
    182 U1020							;
    183 U1020							; psuedo code to point Data Fetcher 1 to the color data
    184 U1020							;	lda #<(ColorDataPosition - HowFarDownScreen)
    185 U1020							;	sta DF1LOW
    186 U1020							;	lda #>(ColorDataPosition - HowFarDownScreen)
    187 U1020							;	sta DF1HI
    188 U1020							;
    189 U1020							; set the window based on the missile's Y position and height (number of
    190 U1020							; scanlines to draw missile on)
    191 U1020							;	lda #<(ColorDataPosition + MissileYposition - 1)
    192 U1020							;	sta DF1TOP
    193 U1020							;	lda #<(ColorDataPosition + MissileYposition + MissileHeight)
    194 U1020							;	sta DF1BOT
    195 U1020							;
    196 U1020							; then in the kernel read the Data Fetcher and update the color, then read the
    197 U1020							; flag and update the missile
    198 U1020							;	LDA DF1DATA
    199 U1020							;	STA COLUP0
    200 U1020							;	LDA DF1FLAG
    201 U1020							;	STA ENAM0
    202 U1020							;----------------------------------------
    203 U1020		       00	   DF0FLAG    DS	1	; $20
    204 U1021		       00	   DF1FLAG    DS	1	; $21
    205 U1022		       00	   DF2FLAG    DS	1	; $22
    206 U1023		       00	   DF3FLAG    DS	1	; $23
    207 U1024
    208 U1024							;----------------------------------------
    209 U1024							; Reserved
    210 U1024							;----------------------------------------
    211 U1024		       00		      DS	1	; $24
    212 U1025		       00		      DS	1	; $25
    213 U1026		       00		      DS	1	; $26
    214 U1027		       00		      DS	1	; $27
    215 U1028
    216 U1028
    217 U1080 ????				      SEG.U	DPC_REGISTERS_WRITE
    218 U1028					      ORG	DPC_BASE_WRITE_ADDRESS
    219 U1028
    220 U1028							;****************************************
    221 U1028							; SECTION 2 - DPC+ Write Registers
    222 U1028							;****************************************
    223 U1028							;
    224 U1028							;----------------------------------------
    225 U1028							; Fractional Data Fetcher, Low Pointer
    226 U1028							;----------------------------------------
    227 U1028							; These are used in conjunction with DFxFRACHI to point a Fractional Data
    228 U1028							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    229 U1028							; in SECTION 1.
    230 U1028							;----------------------------------------
    231 U1028		       00	   DF0FRACLOW DS	1	; $28
    232 U1029		       00	   DF1FRACLOW DS	1	; $29
    233 U102a		       00	   DF2FRACLOW DS	1	; $2A
    234 U102b		       00	   DF3FRACLOW DS	1	; $2B
    235 U102c		       00	   DF4FRACLOW DS	1	; $2C
    236 U102d		       00	   DF5FRACLOW DS	1	; $2D
    237 U102e		       00	   DF6FRACLOW DS	1	; $2E
    238 U102f		       00	   DF7FRACLOW DS	1	; $2F
    239 U1030
    240 U1030							;----------------------------------------
    241 U1030							; Fractional Data Fetcher, High Pointer
    242 U1030							;----------------------------------------
    243 U1030							; These are used in conjunction with DFxFRACLOW to point a Fractional Data
    244 U1030							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    245 U1030							; in SECTION 1.
    246 U1030							;
    247 U1030							; NOTE: for only the lower 4 bits are used.
    248 U1030							;----------------------------------------
    249 U1030		       00	   DF0FRACHI  DS	1	; $30
    250 U1031		       00	   DF1FRACHI  DS	1	; $31
    251 U1032		       00	   DF2FRACHI  DS	1	; $32
    252 U1033		       00	   DF3FRACHI  DS	1	; $33
    253 U1034		       00	   DF4FRACHI  DS	1	; $34
    254 U1035		       00	   DF5FRACHI  DS	1	; $35 
    255 U1036		       00	   DF6FRACHI  DS	1	; $36 
    256 U1037		       00	   DF7FRACHI  DS	1	; $37 
    257 U1038
    258 U1038							;----------------------------------------
    259 U1038							; Fractional Data Fetcher, Increment
    260 U1038							;----------------------------------------
    261 U1038							; These are used to set the increment amount for the Fractional Data Fetcher.
    262 U1038							; To increment pointer after every Xth read use int(256/X)
    263 U1038							; For usage, see "Fractional Data Fetcher" in SECTION 1.
    264 U1038							;----------------------------------------
    265 U1038		       00	   DF0FRACINC DS	1	; $38
    266 U1039		       00	   DF1FRACINC DS	1	; $39
    267 U103a		       00	   DF2FRACINC DS	1	; $3A
    268 U103b		       00	   DF3FRACINC DS	1	; $3B
    269 U103c		       00	   DF4FRACINC DS	1	; $3C
    270 U103d		       00	   DF5FRACINC DS	1	; $3D
    271 U103e		       00	   DF6FRACINC DS	1	; $3E
    272 U103f		       00	   DF7FRACINC DS	1	; $3F
    273 U1040
    274 U1040							;----------------------------------------
    275 U1040							; Data Fetcher, Window Top
    276 U1040							;----------------------------------------
    277 U1040							; These are used with DFxBOT to define the Data Fetcher Window
    278 U1040							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    279 U1040							;----------------------------------------
    280 U1040		       00	   DF0TOP     DS	1	; $40
    281 U1041		       00	   DF1TOP     DS	1	; $41
    282 U1042		       00	   DF2TOP     DS	1	; $42
    283 U1043		       00	   DF3TOP     DS	1	; $43
    284 U1044		       00	   DF4TOP     DS	1	; $44
    285 U1045		       00	   DF5TOP     DS	1	; $45
    286 U1046		       00	   DF6TOP     DS	1	; $46
    287 U1047		       00	   DF7TOP     DS	1	; $47
    288 U1048
    289 U1048							;----------------------------------------
    290 U1048							; Data Fetcher, Window Bottom
    291 U1048							;----------------------------------------
    292 U1048							; These are used with DFxTOP to define the Data Fetcher Window
    293 U1048							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    294 U1048							;----------------------------------------
    295 U1048		       00	   DF0BOT     DS	1	; $48
    296 U1049		       00	   DF1BOT     DS	1	; $49
    297 U104a		       00	   DF2BOT     DS	1	; $4A
    298 U104b		       00	   DF3BOT     DS	1	; $4B
    299 U104c		       00	   DF4BOT     DS	1	; $4C
    300 U104d		       00	   DF5BOT     DS	1	; $4D
    301 U104e		       00	   DF6BOT     DS	1	; $4E
    302 U104f		       00	   DF7BOT     DS	1	; $4F
    303 U1050
    304 U1050							;----------------------------------------
    305 U1050							; Data Fetcher, Low Pointer
    306 U1050							;----------------------------------------
    307 U1050							; These are used in conjunction with DFxHI to point a Data Fetcher to the data
    308 U1050							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    309 U1050							;----------------------------------------
    310 U1050		       00	   DF0LOW     DS	1	; $50
    311 U1051		       00	   DF1LOW     DS	1	; $51
    312 U1052		       00	   DF2LOW     DS	1	; $52
    313 U1053		       00	   DF3LOW     DS	1	; $53
    314 U1054		       00	   DF4LOW     DS	1	; $54
    315 U1055		       00	   DF5LOW     DS	1	; $55
    316 U1056		       00	   DF6LOW     DS	1	; $56
    317 U1057		       00	   DF7LOW     DS	1	; $57
    318 U1058
    319 U1058							;----------------------------------------
    320 U1058							; Fast Fetch Mode
    321 U1058							;----------------------------------------
    322 U1058							; Fast Fetch Mode enables the fastest way to read DPC+ registers.  Normal
    323 U1058							; reads use LDA Absolute addressing (LDA DF0DATA) which takes 4 cycles to
    324 U1058							; process.  Fast Fetch Mode intercepts LDA Immediate addressing (LDA #<DF0DATA)
    325 U1058							; which takes only 2 cycles!  Only immediate values < $28 are intercepted
    326 U1058							; 
    327 U1058							; set Fast Fetch Mode
    328 U1058							;	LDA #0
    329 U1058							;	STA FASTFETCH
    330 U1058							;
    331 U1058							; then use immediate mode to read the registers, takes just 5 cycles to update
    332 U1058							; any TIA register
    333 U1058							;
    334 U1058							;	LDA #<DF0DATA
    335 U1058							;	STA GRP0
    336 U1058							;
    337 U1058							; when done, turn off Fast Fetch Mode using any non-zero value
    338 U1058							;	LDA #$FF
    339 U1058							;	STA FASTFETCH
    340 U1058							;
    341 U1058							; NOTE: if you forget to turn off FASTFETCH mode, then code like this will not
    342 U1058							;	 work as you expect
    343 U1058							;	LDA #0	; returns a RANDOM NUMBER, not 0.
    344 U1058							;	STA COLUPF
    345 U1058							;----------------------------------------
    346 U1058		       00	   FASTFETCH  DS	1	; $58
    347 U1059
    348 U1059							;----------------------------------------
    349 U1059							; Function Support
    350 U1059							;----------------------------------------
    351 U1059							; Currently only Function 255 is defined, and it is used to call user
    352 U1059							; written ARM routines (or C code compiled for the ARM processor.)
    353 U1059							;
    354 U1059							; PARAMETER is not used by function 255, it may be used by future functions.
    355 U1059							; 
    356 U1059							; call custom ARM routine
    357 U1059							;	LDA #$FF
    358 U1059							;	STA CALLFUNCTION
    359 U1059							;
    360 U1059							; A custom ARM demo will be released in the near future
    361 U1059							;----------------------------------------
    362 U1059		       00	   PARAMETER  DS	1	; $59
    363 U105a		       00	   CALLFUNCTION DS	1	; $5A
    364 U105b
    365 U105b							;----------------------------------------
    366 U105b							; Reserved
    367 U105b							;----------------------------------------
    368 U105b		       00		      DS	1	; $5B	 ; reserved
    369 U105c		       00		      DS	1	; $5C	 ; reserved
    370 U105d
    371 U105d							;----------------------------------------
    372 U105d							; Waveforms
    373 U105d							;----------------------------------------
    374 U105d							; Waveforms are 32 byte tables that define a waveform.  Waveforms must be 32
    375 U105d							; byte aligned, and can only be stored in the 4K Display Data Bank. You MUST
    376 U105d							; define an "OFF" waveform,  comprised of all zeros.  The sum of all waveforms
    377 U105d							; being played should be <= 15, so typically you'll use a maximum of 5 for any
    378 U105d							; given value.
    379 U105d							;
    380 U105d							; Valid values are 0-127 and point to the 4K Display Data bank.  The formula
    381 U105d							; (* & $1fff)/32 as shown below will calculate the value for you
    382 U105d							;
    383 U105d							;
    384 U105d							; example waveforms
    385 U105d							;	align 32		; forces the waveform to a 32 byte boundary
    386 U105d							;SOUND_OFF = (* & $1fff)/32	; calculates waveform pointer
    387 U105d							;	.byte 0,0,0,0,0,0,0,0
    388 U105d							;	.byte 0,0,0,0,0,0,0,0
    389 U105d							;	.byte 0,0,0,0,0,0,0,0
    390 U105d							;	.byte 0,0,0,0,0,0,0,0 
    391 U105d							; 
    392 U105d							;	align 32
    393 U105d							;SINE_WAVE = (* & $1fff)/32
    394 U105d							;	.byte 3,3,3,4,4,5,5,5
    395 U105d							;	.byte 5,5,5,5,4,4,3,3
    396 U105d							;	.byte 3,2,2,1,1,0,0,0
    397 U105d							;	.byte 0,0,0,0,1,1,2,2 
    398 U105d							;
    399 U105d							; usage, set voice 0 to Sine Wave, set voice 1 & 2 off
    400 U105d							;	LDA #SINE_WAVE
    401 U105d							;	STA WAVEFORM0
    402 U105d							;	LDA #SOUND_OFF
    403 U105d							;	STA WAVEFORM1
    404 U105d							;	STA WAVEFORM2	
    405 U105d							;----------------------------------------
    406 U105d		       00	   WAVEFORM0  DS	1	; $5D
    407 U105e		       00	   WAVEFORM1  DS	1	; $5E
    408 U105f		       00	   WAVEFORM2  DS	1	; $5F
    409 U1060
    410 U1060							;----------------------------------------
    411 U1060							; Data Fetcher Push (stack)
    412 U1060							;----------------------------------------
    413 U1060							; The Data Fetchers can also be used to update the contents of the 4K
    414 U1060							; Display Data bank.  Point the Data Fetcher to the data to change,
    415 U1060							; then Push to it.  The Data Fetcher's pointer will be decremented BEFORE
    416 U1060							; the data is written.
    417 U1060							;
    418 U1060							; point Data Fetcher 1 to the sprite data
    419 U1060							;	lda #<DisplayData
    420 U1060							;	sta DF1LOW
    421 U1060							;	lda #>DisplayData
    422 U1060							;	sta DF1HI 
    423 U1060							;
    424 U1060							; then update it
    425 U1060							;	LDA #$FF
    426 U1060							;	STA DF1PUSH ; changes data at DisplayData - 1
    427 U1060							;	LDA #$81
    428 U1060							;	STA DF1OUSH ; changes data at DisplayData - 2
    429 U1060							;----------------------------------------
    430 U1060		       00	   DF0PUSH    DS	1	; $60
    431 U1061		       00	   DF1PUSH    DS	1	; $61
    432 U1062		       00	   DF2PUSH    DS	1	; $62
    433 U1063		       00	   DF3PUSH    DS	1	; $63
    434 U1064		       00	   DF4PUSH    DS	1	; $64
    435 U1065		       00	   DF5PUSH    DS	1	; $65
    436 U1066		       00	   DF6PUSH    DS	1	; $66
    437 U1067		       00	   DF7PUSH    DS	1	; $67
    438 U1068
    439 U1068							;----------------------------------------
    440 U1068							; Data Fetcher, High Pointer
    441 U1068							;----------------------------------------
    442 U1068							; These are used in conjunction with DFxLOW to point a Data Fetcher to the data
    443 U1068							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    444 U1068							;----------------------------------------
    445 U1068		       00	   DF0HI      DS	1	; $68
    446 U1069		       00	   DF1HI      DS	1	; $69
    447 U106a		       00	   DF2HI      DS	1	; $6A
    448 U106b		       00	   DF3HI      DS	1	; $6B
    449 U106c		       00	   DF4HI      DS	1	; $6C
    450 U106d		       00	   DF5HI      DS	1	; $6D 
    451 U106e		       00	   DF6HI      DS	1	; $6E 
    452 U106f		       00	   DF7HI      DS	1	; $6F 
    453 U1070
    454 U1070							;----------------------------------------
    455 U1070							; Random Number Initialization
    456 U1070							;----------------------------------------
    457 U1070							; The random number generate defaults to a value that spells out DPC+.
    458 U1070							; Store any value to RRESET to set the random number back to DPC+, or you
    459 U1070							; can use RWRITE0-3 to change the 32 bit value to anything you desire.
    460 U1070							;
    461 U1070							; reset random number
    462 U1070							;	LDA #0
    463 U1070							;	STA RRESET
    464 U1070							;
    465 U1070							; set a specific random number (spells out 2600)
    466 U1070							;	LDA #$32
    467 U1070							;	STA RWRITE0
    468 U1070							;	LDA #$36
    469 U1070							;	STA RWRITE1
    470 U1070							;	LDA #$30
    471 U1070							;	STA RWRITE2
    472 U1070							;	STA RWRITE3
    473 U1070							;
    474 U1070							; NOTE: do not set all 4 bytes to 0, as that will disable the generator.
    475 U1070							;----------------------------------------
    476 U1070		       00	   RRESET     DS	1	; $70
    477 U1071		       00	   RWRITE0    DS	1	; $71
    478 U1072		       00	   RWRITE1    DS	1	; $72
    479 U1073		       00	   RWRITE2    DS	1	; $73
    480 U1074		       00	   RWRITE3    DS	1	; $74
    481 U1075
    482 U1075							;----------------------------------------
    483 U1075							; Notes
    484 U1075							;----------------------------------------
    485 U1075							; These are used to select a value from the frequency table to play.
    486 U1075							; The default table, store in DPC_frequencies.h, only defines frequencies
    487 U1075							; for 1-88, which cover the keys of a piano.  You are free to add additional
    488 U1075							; frequencies from 88-255.  Piano keys are defined at the end of this file
    489 U1075							;
    490 U1075							; set voice 0 to middle C
    491 U1075							;	LDA #C4
    492 U1075							;	STA NOTE0
    493 U1075							;
    494 U1075							; Note: if you are using ARM USER CODE then you can only use notes to 128.
    495 U1075							;----------------------------------------
    496 U1075		       00	   NOTE0      DS	1	; $75
    497 U1076		       00	   NOTE1      DS	1	; $76
    498 U1077		       00	   NOTE2      DS	1	; $77
    499 U1078
    500 U1078							;----------------------------------------
    501 U1078							; Data Fetcher Write (queue)
    502 U1078							;----------------------------------------
    503 U1078							; The Data Fetchers can also be used to update the contents of the 4K
    504 U1078							; Display Data bank.  Point the Data Fetcher to the data to change,
    505 U1078							; then Write to it  The Data Fetcher's pointer will be incremented AFTER
    506 U1078							; the data is written.
    507 U1078							;
    508 U1078							; point Data Fetcher 1 to the sprite data
    509 U1078							;	lda #<SpriteData
    510 U1078							;	sta DF1LOW
    511 U1078							;	lda #>SpriteData
    512 U1078							;	sta DF1HI 
    513 U1078							;
    514 U1078							; then update it
    515 U1078							;	LDA #$FF
    516 U1078							;	STA DF1WRITE ; changes data at SpriteData
    517 U1078							;	LDA #$81
    518 U1078							;	STA DF1WRITE ; changes data at SpriteData + 1
    519 U1078							;----------------------------------------
    520 U1078		       00	   DF0WRITE   DS	1	; $78
    521 U1079		       00	   DF1WRITE   DS	1	; $79
    522 U107a		       00	   DF2WRITE   DS	1	; $7A
    523 U107b		       00	   DF3WRITE   DS	1	; $7B
    524 U107c		       00	   DF4WRITE   DS	1	; $7C
    525 U107d		       00	   DF5WRITE   DS	1	; $7D
    526 U107e		       00	   DF6WRITE   DS	1	; $7E
    527 U107f		       00	   DF7WRITE   DS	1	; $7F
    528 U1080
    529 U1080							;-------------------------------------------------------------------------------
    530 U1080							; The following required for back-compatibility with code which does not use
    531 U1080							; segments.
    532 U1080
    533  8400 ????				      SEG
------- FILE c:\xampp\htdocs\BatariBasicProjects\fnaf.bas.asm
------- FILE DPCplusbB.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplusbB.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3 U00f5 ????				      SEG.U	vars
      4 U0080					      org	$80
      5 U0080		       00	   player0x   ds	1
      6 U0081		       00	   topP1x     ds	1
      7 U0082		       00	   missile0x  ds	1
      8 U0083		       00	   missile1x  ds	1
      9 U0084		       00	   ballx      ds	1
     10 U0085
     11 U0085		       00 00 00 00*SpriteGfxIndex ds	9
     12 U008e
     13 U008e		       00	   spritedisplay ds	1
     14 U008f
     15 U008f		       00	   player0xcoll ds	1	; to detect p0x colls
     16 U0090		       00	   NewSpriteX ds	1	;		X position
     17 U0090		       00 90	   player1x   =	NewSpriteX
     18 U0091		       00	   player2x   ds	1
     19 U0092		       00	   player3x   ds	1
     20 U0093		       00	   player4x   ds	1
     21 U0094		       00	   player5x   ds	1
     22 U0095		       00	   player6x   ds	1
     23 U0096		       00	   player7x   ds	1
     24 U0097		       00	   player8x   ds	1
     25 U0098		       00	   player9x   ds	1
     26 U0099
     27 U0099		       00	   player0y   ds	1
     28 U009a		       00	   NewSpriteY ds	1	;		Y position
     29 U009a		       00 9a	   player1y   =	NewSpriteY
     30 U009b		       00	   player2y   ds	1
     31 U009c		       00	   player3y   ds	1
     32 U009d		       00	   player4y   ds	1
     33 U009e		       00	   player5y   ds	1
     34 U009f		       00	   player6y   ds	1
     35 U00a0		       00	   player7y   ds	1
     36 U00a1		       00	   player8y   ds	1
     37 U00a2		       00	   player9y   ds	1
     38 U00a3
     39 U00a3		       00 00	   player0color ds	2
     40 U00a5
     41 U00a5		       00	   player0height ds	1
     42 U00a6		       00	   player1height ds	1
     43 U00a7		       00	   player2height ds	1
     44 U00a8		       00	   player3height ds	1
     45 U00a9		       00	   player4height ds	1
     46 U00aa		       00	   player5height ds	1
     47 U00ab		       00	   player6height ds	1
     48 U00ac		       00	   player7height ds	1
     49 U00ad		       00	   player8height ds	1
     50 U00ae		       00	   player9height ds	1
     51 U00af
     52 U00af		       00	   _NUSIZ1    ds	1
     53 U00b0		       00	   NUSIZ2     ds	1
     54 U00b1		       00	   NUSIZ3     ds	1
     55 U00b2		       00	   NUSIZ4     ds	1
     56 U00b3		       00	   NUSIZ5     ds	1
     57 U00b4		       00	   NUSIZ6     ds	1
     58 U00b5		       00	   NUSIZ7     ds	1
     59 U00b6		       00	   NUSIZ8     ds	1
     60 U00b7		       00	   NUSIZ9     ds	1
     61 U00b8
     62 U00b8		       00 00 00    score      ds	3
     63 U00bb		       00	   COLUM0     ds	1
     64 U00bc		       00	   COLUM1     ds	1
     65 U00bd		       00	   player0pointerlo ds	1
     66 U00be		       00	   player0pointerhi ds	1
     67 U00bf
     68 U00bf		       00 85	   RAMcopybegin =	SpriteGfxIndex
     69 U00bf		       00 3a	   RAMcopylength =	*-RAMcopybegin
     70 U00bf
     71 U00bf		       00	   missile0y  ds	1
     72 U00c0		       00	   missile1y  ds	1
     73 U00c1		       00	   bally      ds	1
     74 U00c2
     75 U00c2		       00	   missile0height ds	1
     76 U00c3		       00	   missile1height ds	1
     77 U00c4		       00	   ballheight ds	1
     78 U00c5
     79 U00c5		       00	   statusbarlength ds	1	; needed?
     80 U00c5		       00 c5	   aux3       =	statusbarlength
     81 U00c6
     82 U00c6		       00	   lifecolor  ds	1
     83 U00c6		       00 c6	   pfscorecolor =	lifecolor
     84 U00c7		       00	   aux4       ds	1
     85 U00c8
     86 U00c8		       00	   lifepointer ds	1
     87 U00c9		       00	   lives      ds	1
     88 U00c9		       00 c8	   pfscore1   =	lifepointer
     89 U00c9		       00 c9	   pfscore2   =	lives
     90 U00c9		       00 c8	   aux5       =	pfscore1
     91 U00c9		       00 c9	   aux6       =	pfscore2
     92 U00ca
     93 U00ca		       00	   playfieldpos ds	1
     94 U00cb
     95 U00cb		       00	   temp1      ds	1	; used in sprite flickering
     96 U00cc		       00	   temp2      ds	1	;are obliterated when drawscreen is called.
     97 U00cd		       00	   temp3      ds	1
     98 U00ce		       00	   temp4      ds	1
     99 U00cf		       00	   temp5      ds	1
    100 U00d0		       00	   temp6      ds	1
    101 U00d0		       00 81	   temp7      =	topP1x	; This is used to aid in bankswitching
    102 U00d1
    103 U00d1		       00	   A	      ds	1
    104 U00d1		       00 d1	   a	      =	A
    105 U00d2		       00	   B	      ds	1
    106 U00d2		       00 d2	   b	      =	B
    107 U00d3		       00	   C	      ds	1
    108 U00d3		       00 d3	   c	      =	C
    109 U00d4		       00	   D	      ds	1
    110 U00d4		       00 d4	   d	      =	D
    111 U00d5		       00	   E	      ds	1
    112 U00d5		       00 d5	   e	      =	E
    113 U00d6		       00	   F	      ds	1
    114 U00d6		       00 d6	   f	      =	F
    115 U00d7		       00	   G	      ds	1
    116 U00d7		       00 d7	   g	      =	G
    117 U00d8		       00	   H	      ds	1
    118 U00d8		       00 d8	   h	      =	H
    119 U00d9		       00	   I	      ds	1
    120 U00d9		       00 d9	   i	      =	I
    121 U00da		       00	   J	      ds	1
    122 U00da		       00 da	   j	      =	J
    123 U00db		       00	   K	      ds	1
    124 U00db		       00 db	   k	      =	K
    125 U00dc		       00	   L	      ds	1
    126 U00dc		       00 dc	   l	      =	L
    127 U00dd		       00	   M	      ds	1
    128 U00dd		       00 dd	   m	      =	M
    129 U00de		       00	   N	      ds	1
    130 U00de		       00 de	   n	      =	N
    131 U00df		       00	   O	      ds	1
    132 U00df		       00 df	   o	      =	O
    133 U00e0		       00	   P	      ds	1
    134 U00e0		       00 e0	   p	      =	P
    135 U00e1		       00	   Q	      ds	1
    136 U00e1		       00 e1	   q	      =	Q
    137 U00e2		       00	   R	      ds	1
    138 U00e2		       00 e2	   r	      =	R
    139 U00e3		       00	   S	      ds	1
    140 U00e3		       00 e3	   s	      =	S
    141 U00e4		       00	   T	      ds	1
    142 U00e4		       00 e4	   t	      =	T
    143 U00e5		       00	   U	      ds	1
    144 U00e5		       00 e5	   u	      =	U
    145 U00e6		       00	   V	      ds	1
    146 U00e6		       00 e6	   v	      =	V
    147 U00e7		       00	   W	      ds	1
    148 U00e7		       00 e7	   w	      =	W
    149 U00e8		       00	   X	      ds	1
    150 U00e8		       00 e8	   x	      =	X
    151 U00e9		       00	   Y	      ds	1
    152 U00e9		       00 e9	   y	      =	Y
    153 U00ea		       00	   Z	      ds	1
    154 U00ea		       00 ea	   z	      =	Z
    155 U00eb		       00	   scorecolor ds	1
    156 U00ec
    157 U00ec		       00	   var0       ds	1
    158 U00ed		       00	   var1       ds	1
    159 U00ee		       00	   var2       ds	1
    160 U00ef		       00	   var3       ds	1
    161 U00f0		       00	   var4       ds	1
    162 U00f1		       00	   var5       ds	1
    163 U00f2		       00	   var6       ds	1
    164 U00f3		       00	   var7       ds	1
    165 U00f4		       00	   var8       ds	1
    166 U00f5
 free ram: 0
    167 U00f5					      echo	"free ram:",($f5-*)d
    168 U00f5
    169 U00f5		       00 f6	   stack1     =	$f6
    170 U00f5		       00 f7	   stack2     =	$f7
    171 U00f5		       00 f8	   stack3     =	$f8
    172 U00f5		       00 f9	   stack4     =	$f9
    173 U00f5							; the stack bytes above may be used in the kernel
    174 U00f5							; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    175 U00f5
    176 U00f5					      MAC	return
    177 U00f5					      ifnconst	bankswitch
    178 U00f5					      rts
    179 U00f5					      else
    180 U00f5					      jmp	BS_return
    181 U00f5					      endif
    182 U00f5					      ENDM		; auto-return from either a regular or bankswitched module
    183  8400 ????				      seg
    184  8400 ????	       10 00	   rand       =	RANDOM0NEXT
    185  8400 ????	       00 d3	   KERNEL_LINES =	178*76/64	; warning: not all values will work
    186  8400 ????	       00 a7	   OVERSCAN_LINES =	128+33*76/64	; again, not all values work
    187  8400 ????	       d1 a4	   C_function =	FETCHER_BEGIN
    188  8400 ????	       d1 a8	   CcodeData  =	C_function + 4
    189  8400 ????	       d1 e2	   playerpointers =	CcodeData + RAMcopylength
    190  8400 ????	       d2 08	   P1GFX      =	playerpointers + 38
    191  8400 ????	       d3 08	   P1COLOR    =	P1GFX + 256
    192  8400 ????	       d4 08	   P0GFX      =	P1COLOR + 256
    193  8400 ????	       d5 08	   P0COLOR    =	P0GFX + 256
    194  8400 ????	       d6 08	   PF1L       =	P0COLOR + 256
    195  8400 ????	       d7 08	   PF2L       =	PF1L + 256
    196  8400 ????	       d8 08	   PF1R       =	PF2L + 256
    197  8400 ????	       d9 08	   PF2R       =	PF1R + 256
    198  8400 ????	       da 08	   PFCOLS     =	PF2R + 256
    199  8400 ????	       db 08	   JUMPTABLELO =	PFCOLS + 256
    200  8400 ????	       db 14	   JUMPTABLEHI =	JUMPTABLELO + 12
    201  8400 ????	       db 20	   P1HMP      =	JUMPTABLEHI + 12
    202  8400 ????	       db 2d	   P1SKIP     =	P1HMP + 13
    203  8400 ????	       db 39	   NUSIZREFP  =	P1SKIP + 12
    204  8400 ????	       db 45	   scoredata  =	NUSIZREFP + 12
    205  8400 ????	       db a5	   BKCOLS     =	scoredata + 96
    206  8400 ????	       dc a5	   STACKbegin =	BKCOLS + 256
    207  8400 ????	       dd a5	   USERSTACK  =	STACKbegin + 256	; stack starts here and goes down!!!!
 DPC free RAM= 603
    208  8400 ????				      echo	"DPC free RAM=",($1000-(USERSTACK&$0FFF))d
------- FILE c:\xampp\htdocs\BatariBasicProjects\fnaf.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"2600basic_variable_redefs.h"
      1  8400 ????						; This file contains variable mapping and other information for the current project.
      2  8400 ????
      3  8400 ????	       00 e2	   bmp_48x1_1_color =	r
      4  8400 ????
      5  8400 ????	       00 e1	   framestyle =	q
      6  8400 ????
      7  8400 ????	       00 e0	   chica      =	p
      8  8400 ????
      9  8400 ????	       00 df	   bonnie     =	o
     10  8400 ????
     11  8400 ????	       00 de	   freddy     =	n
     12  8400 ????
     13  8400 ????	       00 dd	   time       =	m
     14  8400 ????
     15  8400 ????	       00 dc	   night      =	l
     16  8400 ????
     17  8400 ????	       00 db	   prop       =	k
     18  8400 ????
     19  8400 ????	       00 da	   cam	      =	j
     20  8400 ????
     21  8400 ????	       00 d9	   frame      =	i
     22  8400 ????
     23  8400 ????	       00 9c	   p3y	      =	player3y
     24  8400 ????	       00 92	   p3x	      =	player3x
     25  8400 ????	       00 9b	   p2y	      =	player2y
     26  8400 ????	       00 91	   p2x	      =	player2x
     27  8400 ????	       00 9a	   p1y	      =	player1y
     28  8400 ????	       00 90	   p1x	      =	player1x
     29  8400 ????	       00 99	   p0y	      =	player0y
     30  8400 ????	       00 80	   p0x	      =	player0x
     31  8400 ????	       00 20	   bscode_length =	32
     32  8400 ????	       00 07	   bs_mask    =	7
     33  8400 ????	       00 1c	   bankswitch =	28
     34  8400 ????	       1f f6	   bankswitch_hotspot =	$1FF6
     35  8400 ????	       00 02	   multisprite =	2
------- FILE c:\xampp\htdocs\BatariBasicProjects\fnaf.bas.asm
      9  0400					      ORG	$400
     10  0400					      RORG	$0
     11  0400					      incbin	DPCplus.arm
     12  1000					      ORG	$1000
     13  1000					      RORG	$1000
     14  1000					      incbin	custom/bin/custom2.bin
     15  1894							; assume custom2.bin > 128 bytes
     16  1894							; repeat $80
     17  1894							; .byte 0
     18  1894							; repend
     19  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
     20  1894
     21  1894							; feel free to modify the score graphics - just keep each digit 8 high
     22  1894							; and keep the conditional compilation stuff intact
     23  1894				  -	      ifconst	ROM2k
     24  1894				  -	      ORG	$F7AC-8
     25  1894					      else
     26  1894					      ifconst	bankswitch
     27  1894				  -	      if	bankswitch == 8
     28  1894				  -	      ORG	$2F94-bscode_length
     29  1894				  -	      RORG	$FF94-bscode_length
     30  1894					      endif
     31  1894				  -	      if	bankswitch == 16
     32  1894				  -	      ORG	$4F94-bscode_length
     33  1894				  -	      RORG	$FF94-bscode_length
     34  1894					      endif
     35  1894				  -	      if	bankswitch == 32
     36  1894				  -	      ORG	$8F94-bscode_length
     37  1894				  -	      RORG	$FF94-bscode_length
     38  1894					      endif
     39  1894				  -	      if	bankswitch == 64
     40  1894				  -	      ORG	$10F80-bscode_length
     41  1894				  -	      RORG	$1FF80-bscode_length
     42  1894					      endif
     43  1894				  -	      else
     44  1894				  -	      ORG	$FF9C
     45  1894					      endif
     46  1894					      endif
     47  1894
     48  1894							; font equates
     49  1894		       00 01	   .21stcentury =	1
     50  1894		       00 02	   alarmclock =	2
     51  1894		       00 03	   handwritten =	3
     52  1894		       00 04	   interrupted =	4
     53  1894		       00 05	   retroputer =	5
     54  1894		       00 06	   whimsey    =	6
     55  1894		       00 07	   tiny       =	7
     56  1894		       00 08	   hex	      =	8
     57  1894
     58  1894				  -	      ifconst	font
     59  1894				  -	      if	font == hex
     60  1894				  -	      ORG	. - 48
     61  1894				  -	      endif
     62  1894					      endif
     63  1894
     64  1894				   scoretable
     65  1894
     66  1894				  -	      ifconst	font
     67  1894				  -	      if	font == .21stcentury
     68  1894				  -	      include	"score_graphics.asm.21stcentury"
     69  1894				  -	      endif
     70  1894				  -	      if	font == alarmclock
     71  1894				  -	      include	"score_graphics.asm.alarmclock"
     72  1894				  -	      endif
     73  1894				  -	      if	font == handwritten
     74  1894				  -	      include	"score_graphics.asm.handwritten"
     75  1894				  -	      endif
     76  1894				  -	      if	font == interrupted
     77  1894				  -	      include	"score_graphics.asm.interrupted"
     78  1894				  -	      endif
     79  1894				  -	      if	font == retroputer
     80  1894				  -	      include	"score_graphics.asm.retroputer"
     81  1894				  -	      endif
     82  1894				  -	      if	font == whimsey
     83  1894				  -	      include	"score_graphics.asm.whimsey"
     84  1894				  -	      endif
     85  1894				  -	      if	font == tiny
     86  1894				  -	      include	"score_graphics.asm.tiny"
     87  1894				  -	      endif
     88  1894				  -	      if	font == hex
     89  1894				  -	      include	"score_graphics.asm.hex"
     90  1894				  -	      endif
     91  1894					      else		; default font
     92  1894
     93  1894		       3c		      .byte.b	%00111100
     94  1895		       66		      .byte.b	%01100110
     95  1896		       66		      .byte.b	%01100110
     96  1897		       66		      .byte.b	%01100110
     97  1898		       66		      .byte.b	%01100110
     98  1899		       66		      .byte.b	%01100110
     99  189a		       66		      .byte.b	%01100110
    100  189b		       3c		      .byte.b	%00111100
    101  189c
    102  189c		       7e		      .byte.b	%01111110
    103  189d		       18		      .byte.b	%00011000
    104  189e		       18		      .byte.b	%00011000
    105  189f		       18		      .byte.b	%00011000
    106  18a0		       18		      .byte.b	%00011000
    107  18a1		       38		      .byte.b	%00111000
    108  18a2		       18		      .byte.b	%00011000
    109  18a3		       08		      .byte.b	%00001000
    110  18a4
    111  18a4		       7e		      .byte.b	%01111110
    112  18a5		       60		      .byte.b	%01100000
    113  18a6		       60		      .byte.b	%01100000
    114  18a7		       3c		      .byte.b	%00111100
    115  18a8		       06		      .byte.b	%00000110
    116  18a9		       06		      .byte.b	%00000110
    117  18aa		       46		      .byte.b	%01000110
    118  18ab		       3c		      .byte.b	%00111100
    119  18ac
    120  18ac		       3c		      .byte.b	%00111100
    121  18ad		       46		      .byte.b	%01000110
    122  18ae		       06		      .byte.b	%00000110
    123  18af		       06		      .byte.b	%00000110
    124  18b0		       1c		      .byte.b	%00011100
    125  18b1		       06		      .byte.b	%00000110
    126  18b2		       46		      .byte.b	%01000110
    127  18b3		       3c		      .byte.b	%00111100
    128  18b4
    129  18b4		       0c		      .byte.b	%00001100
    130  18b5		       0c		      .byte.b	%00001100
    131  18b6		       7e		      .byte.b	%01111110
    132  18b7		       4c		      .byte.b	%01001100
    133  18b8		       4c		      .byte.b	%01001100
    134  18b9		       2c		      .byte.b	%00101100
    135  18ba		       1c		      .byte.b	%00011100
    136  18bb		       0c		      .byte.b	%00001100
    137  18bc
    138  18bc		       3c		      .byte.b	%00111100
    139  18bd		       46		      .byte.b	%01000110
    140  18be		       06		      .byte.b	%00000110
    141  18bf		       06		      .byte.b	%00000110
    142  18c0		       3c		      .byte.b	%00111100
    143  18c1		       60		      .byte.b	%01100000
    144  18c2		       60		      .byte.b	%01100000
    145  18c3		       7e		      .byte.b	%01111110
    146  18c4
    147  18c4		       3c		      .byte.b	%00111100
    148  18c5		       66		      .byte.b	%01100110
    149  18c6		       66		      .byte.b	%01100110
    150  18c7		       66		      .byte.b	%01100110
    151  18c8		       7c		      .byte.b	%01111100
    152  18c9		       60		      .byte.b	%01100000
    153  18ca		       62		      .byte.b	%01100010
    154  18cb		       3c		      .byte.b	%00111100
    155  18cc
    156  18cc		       30		      .byte.b	%00110000
    157  18cd		       30		      .byte.b	%00110000
    158  18ce		       30		      .byte.b	%00110000
    159  18cf		       18		      .byte.b	%00011000
    160  18d0		       0c		      .byte.b	%00001100
    161  18d1		       06		      .byte.b	%00000110
    162  18d2		       42		      .byte.b	%01000010
    163  18d3		       3e		      .byte.b	%00111110
    164  18d4
    165  18d4		       3c		      .byte.b	%00111100
    166  18d5		       66		      .byte.b	%01100110
    167  18d6		       66		      .byte.b	%01100110
    168  18d7		       66		      .byte.b	%01100110
    169  18d8		       3c		      .byte.b	%00111100
    170  18d9		       66		      .byte.b	%01100110
    171  18da		       66		      .byte.b	%01100110
    172  18db		       3c		      .byte.b	%00111100
    173  18dc
    174  18dc		       3c		      .byte.b	%00111100
    175  18dd		       46		      .byte.b	%01000110
    176  18de		       06		      .byte.b	%00000110
    177  18df		       3e		      .byte.b	%00111110
    178  18e0		       66		      .byte.b	%01100110
    179  18e1		       66		      .byte.b	%01100110
    180  18e2		       66		      .byte.b	%01100110
    181  18e3		       3c		      .byte.b	%00111100
    182  18e4
    183  18e4					      ifnconst	DPC_kernel_options
    184  18e4
    185  18e4		       00		      .byte.b	%00000000
    186  18e5		       00		      .byte.b	%00000000
    187  18e6		       00		      .byte.b	%00000000
    188  18e7		       00		      .byte.b	%00000000
    189  18e8		       00		      .byte.b	%00000000
    190  18e9		       00		      .byte.b	%00000000
    191  18ea		       00		      .byte.b	%00000000
    192  18eb		       00		      .byte.b	%00000000
    193  18ec
    194  18ec					      endif
    195  18ec
    196  18ec					      endif
    197  18ec
    198  18ec				  -	      ifconst	ROM2k
    199  18ec				  -	      ORG	$F7FC
    200  18ec					      else
    201  18ec					      ifconst	bankswitch
    202  18ec				  -	      if	bankswitch == 8
    203  18ec				  -	      ORG	$2FF4-bscode_length
    204  18ec				  -	      RORG	$FFF4-bscode_length
    205  18ec					      endif
    206  18ec				  -	      if	bankswitch == 16
    207  18ec				  -	      ORG	$4FF4-bscode_length
    208  18ec				  -	      RORG	$FFF4-bscode_length
    209  18ec					      endif
    210  18ec				  -	      if	bankswitch == 32
    211  18ec				  -	      ORG	$8FF4-bscode_length
    212  18ec				  -	      RORG	$FFF4-bscode_length
    213  18ec					      endif
    214  18ec				  -	      if	bankswitch == 64
    215  18ec				  -	      ORG	$10FE0-bscode_length
    216  18ec				  -	      RORG	$1FFE0-bscode_length
    217  18ec					      endif
    218  18ec				  -	      else
    219  18ec				  -	      ORG	$FFFC
    220  18ec					      endif
    221  18ec					      endif
    222  18ec							; Provided under the CC0 license. See the included LICENSE.txt for details.
    223  18ec
    224  18ec				   start
    225  18ec		       78		      sei
    226  18ed		       d8		      cld
    227  18ee		       a0 00		      ldy	#0
    228  18f0		       a5 d0		      lda	$D0
    229  18f2		       c9 2c		      cmp	#$2C	;check RAM location #1
    230  18f4		       d0 07		      bne	MachineIs2600
    231  18f6		       a5 d1		      lda	$D1
    232  18f8		       c9 a9		      cmp	#$A9	;check RAM location #2
    233  18fa		       d0 01		      bne	MachineIs2600
    234  18fc		       88		      dey
    235  18fd				   MachineIs2600
    236  18fd		       a2 00		      ldx	#0
    237  18ff		       8a		      txa
    238  1900				   clearmem
    239  1900		       e8		      inx
    240  1901		       9a		      txs
    241  1902		       48		      pha
    242  1903		       d0 fb		      bne	clearmem
    243  1905		       84 cb		      sty	temp1
    244  1907		       a2 08		      ldx	#8
    245  1909		       86 ca		      stx	playfieldpos
    246  190b		       8e 58 10 	      stx	FASTFETCH
    247  190e		       a2 08		      ldx	#8
    248  1910		       a9 e0		      lda	#224
    249  1912				   inityloop
    250  1912		       95 9a		      sta	player1y,x
    251  1914		       ca		      dex
    252  1915		       10 fb		      bpl	inityloop
    253  1917
    254  1917		       a9 01		      lda	#1
    255  1919		       85 0a		      sta	CTRLPF
    256  191b		       ad 84 02 	      lda	INTIM
    257  191e		       8d 71 10 	      sta	RWRITE0
    258  1921		       a9 00		      lda	#0
    259  1923		       8d 38 10 	      STA	DF0FRACINC
    260  1926		       8d 39 10 	      STA	DF1FRACINC
    261  1929		       8d 3a 10 	      STA	DF2FRACINC
    262  192c		       8d 3b 10 	      STA	DF3FRACINC
    263  192f		       8d 3c 10 	      STA	DF4FRACINC
    264  1932		       8d 3e 10 	      STA	DF6FRACINC
    265  1935		       a9 a5		      lda	#<USERSTACK
    266  1937		       8d 57 10 	      STA	DF7LOW
    267  193a		       a9 0d		      lda	#(>USERSTACK) & $0F
    268  193c		       8d 6f 10 	      STA	DF7HI
    269  193f		       a9 ff		      lda	#255
    270  1941		       8d 5a 10 	      sta	CALLFUNCTION	; zero-fill fetcher
    271  1944
    272  1944		       a9 1f		      lda	#>(game-1)
    273  1946		       48		      pha
    274  1947		       a9 8f		      lda	#<(game-1)
    275  1949		       48		      pha
    276  194a		       48		      pha
    277  194b		       48		      pha
    278  194c		       a2 01		      ldx	#1
    279  194e		       4c ee df 	      jmp	BS_jsr
    280  1951				   drawscreen
    281  1951		       a9 01		      lda	#1
    282  1953		       85 2c		      sta	CXCLR
    283  1955		       85 09		      sta	COLUBK	; REVENG - don't start with the lastline color
    284  1957
    285  1957				   fufu
    286  1957		       ad 84 02 	      lda	INTIM
    287  195a		       30 fb		      bmi	fufu
    288  195c
      0  195c					      VERTICAL_SYNC
      1  195c		       a9 02		      LDA	#$02
      2  195e		       85 02		      STA	WSYNC
      3  1960		       85 00		      STA	VSYNC
      4  1962		       85 02		      STA	WSYNC
      5  1964		       85 02		      STA	WSYNC
      6  1966		       4a		      LSR
      7  1967		       85 02		      STA	WSYNC
      8  1969		       85 00		      STA	VSYNC
    290  196b
    291  196b		       a9 a9		      lda	#41+128	;was 37 - do more w/c code
    292  196d		       8d 96 02 	      sta	TIM64T
    293  1970
    294  1970							; adjust for pfpos?
    295  1970
    296  1970							; set zero to properly enter C code
    297  1970		       a9 a4		      lda	#<C_function
    298  1972		       8d 50 10 	      sta	DF0LOW
    299  1975		       a9 01		      lda	#(>C_function) & $0F
    300  1977		       8d 68 10 	      sta	DF0HI
    301  197a		       a9 00		      lda	#0
    302  197c		       8d 78 10 	      sta	DF0WRITE
    303  197f
    304  197f							; REVENG - pass the number of vsprites we want...
    305  197f					      ifnconst	dpcspritemax
    306  197f				  -	      ifconst	readpaddle
    307  197f				  -	      lda	#8
    308  197f					      else
    309  197f		       a9 09		      lda	#9
    310  1981					      endif
    311  1981				  -	      else
    312  1981				  -	      lda	#dpcspritemax
    313  1981					      endif
    314  1981		       8d 78 10 	      sta	DF0WRITE
    315  1984
    316  1984		       a5 80		      lda	player0x
    317  1986		       85 8f		      sta	player0xcoll	; detect p0x colls
    318  1988
    319  1988							; copy RAM to fetcher for C-code
    320  1988		       a9 e2		      lda	#<(CcodeData + RAMcopylength)
    321  198a		       8d 50 10 	      sta	DF0LOW
    322  198d		       a9 01		      lda	#(>(CcodeData + RAMcopylength)) & $0F
    323  198f		       8d 68 10 	      sta	DF0HI
    324  1992		       a2 39		      ldx	#RAMcopylength-1
    325  1994				   copy2fetcherloop
    326  1994		       b5 85		      lda	RAMcopybegin,x
    327  1996		       8d 60 10 	      sta	DF0PUSH
    328  1999		       ca		      dex
    329  199a		       10 f8		      bpl	copy2fetcherloop
    330  199c
    331  199c		       a9 ff		      lda	#255
    332  199e		       8d 5a 10 	      sta	CALLFUNCTION
    333  19a1
    334  19a1							; copy modified data back (just need first 6 bytes, which is sprite sort data)
    335  19a1		       a2 ed		      ldx	#256-19
    336  19a3				   copyfromfetcherloop
    337  19a3		       ad 08 10 	      lda	DF0DATA
    338  19a6		       95 98		      sta	RAMcopybegin+19,x
    339  19a8		       e8		      inx
    340  19a9		       30 f8		      bmi	copyfromfetcherloop
    341  19ab
    342  19ab		       20 39 1e 	      jsr	kernel_setup
    343  19ae		       85 02		      sta	WSYNC
    344  19b0		       a0 80		      ldy	#$80
    345  19b2		       84 20		      sty	HMP0
    346  19b4		       84 21		      sty	HMP1
    347  19b6		       84 22		      sty	HMM0
    348  19b8		       84 23		      sty	HMM1
    349  19ba		       84 24		      sty	HMBL
    350  19bc
    351  19bc							; run possible vblank bB code
    352  19bc				  -	      ifconst	vblank_bB_code
    353  19bc				  -	      jsr	vblank_bB_code
    354  19bc					      endif
    355  19bc
    356  19bc		       20 01 1d 	      jsr	set_fetchers
    357  19bf
    358  19bf		       a2 07		      ldx	#7
    359  19c1				   setloopfrac
    360  19c1		       bd 7c 1d 	      lda	dffraclow,x
    361  19c4		       9d 28 10 	      sta	DF0FRACLOW,x
    362  19c7		       bd 84 1d 	      lda	dffrachi,x
    363  19ca		       9d 30 10 	      sta	DF0FRACHI,x
    364  19cd		       ca		      dex
    365  19ce		       10 f1		      bpl	setloopfrac
    366  19d0							; lda #255
    367  19d0		       8e 3d 10 	      STx	DF5FRACINC	; x=255 right now
    368  19d3		       8e 3f 10 	      STx	DF7FRACINC
    369  19d6		       ad 1d 10 	      lda	DF5FRACDATA	; priming read
    370  19d9		       ad 1f 10 	      lda	DF7FRACDATA	; priming read
    371  19dc
    372  19dc		       a6 85		      ldx	SpriteGfxIndex
    373  19de		       b5 af		      lda	_NUSIZ1,x	; top NUSIZ/REFP
    374  19e0		       85 05		      sta	NUSIZ1
    375  19e2		       85 0c		      sta	REFP1
    376  19e4
    377  19e4							;REVENG - allow P0 to wrap at the top
    378  19e4				   startwrapfix
    379  19e4		       a9 ff		      lda	#255
    380  19e6		       85 cc		      sta	temp2
    381  19e8		       18		      clc
    382  19e9		       a5 99		      lda	player0y
    383  19eb		       65 a5		      adc	player0height
    384  19ed		       38		      sec
    385  19ee		       c5 a5		      cmp	player0height
    386  19f0		       90 04		      bcc	skipwrapfix
    387  19f2		       a9 00		      lda	#0
    388  19f4		       85 cc		      sta	temp2
    389  19f6				   skipwrapfix
    390  19f6
    391  19f6		       38		      sec
    392  19f7		       a9 08		      lda	#<P0GFX
    393  19f9		       e5 99		      sbc	player0y
    394  19fb		       8d 52 10 	      sta	DF2LOW
    395  19fe		       a9 d4		      lda	#>P0GFX
    396  1a00							;sbc #0
    397  1a00		       e5 cc		      sbc	temp2
    398  1a02		       8d 6a 10 	      sta	DF2HI
    399  1a05		       a9 07		      lda	#<(P0GFX-1)
    400  1a07		       8d 42 10 	      sta	DF2TOP
    401  1a0a		       38		      sec
    402  1a0b		       65 a5		      adc	player0height
    403  1a0d		       8d 4a 10 	      sta	DF2BOT
    404  1a10
    405  1a10							;REVENG - 1/2 of the COLUM0 fix. the rest is in main.c
    406  1a10		       a9 08		      lda	#<(P0COLOR)
    407  1a12		       8d 50 10 	      sta	DF0LOW
    408  1a15		       85 cc		      sta	temp2
    409  1a17		       a9 d5		      lda	#>(P0COLOR)
    410  1a19		       8d 68 10 	      sta	DF0HI
    411  1a1c
    412  1a1c							; ball
    413  1a1c		       a9 07		      lda	#<(P1GFX-1)
    414  1a1e		       18		      clc
    415  1a1f		       65 c1		      adc	bally
    416  1a21		       8d 43 10 	      sta	DF3TOP
    417  1a24		       38		      sec
    418  1a25		       65 c4		      adc	ballheight
    419  1a27		       8d 4b 10 	      sta	DF3BOT
    420  1a2a
    421  1a2a							; missile0
    422  1a2a		       a5 cc		      lda	temp2
    423  1a2c		       18		      clc
    424  1a2d		       65 bf		      adc	missile0y
    425  1a2f		       8d 40 10 	      sta	DF0TOP
    426  1a32		       38		      sec
    427  1a33		       65 c2		      adc	missile0height
    428  1a35		       8d 48 10 	      sta	DF0BOT
    429  1a38
    430  1a38
    431  1a38				   fuu
    432  1a38		       ad 84 02 	      lda	INTIM
    433  1a3b		       30 fb		      bmi	fuu
    434  1a3d		       85 02		      sta	WSYNC
    435  1a3f							;     ldy #$80
    436  1a3f							;     sty HMP0
    437  1a3f							;     sty HMP1
    438  1a3f							;     sty HMM0 
    439  1a3f							;     sty HMM1
    440  1a3f							;     sty HMBL
    441  1a3f							; relocated code above prior to vblank, to allow for Cosmic Ark starfield
    442  1a3f							; and/or skewed players
      0  1a3f					      sleep	17
      1  1a3f				   .CYCLES    SET	17
      2  1a3f
      3  1a3f				  -	      IF	.CYCLES < 2
      4  1a3f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a3f				  -	      ERR
      6  1a3f					      ENDIF
      7  1a3f
      8  1a3f					      IF	.CYCLES & 1
      9  1a3f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a3f		       04 00		      nop	0
     11  1a41				  -	      ELSE
     12  1a41				  -	      bit	VSYNC
     13  1a41					      ENDIF
     14  1a41				   .CYCLES    SET	.CYCLES - 3
     15  1a41					      ENDIF
     16  1a41
     17  1a41					      REPEAT	.CYCLES / 2
     18  1a41		       ea		      nop
     17  1a41					      REPEND
     18  1a42		       ea		      nop
     17  1a42					      REPEND
     18  1a43		       ea		      nop
     17  1a43					      REPEND
     18  1a44		       ea		      nop
     17  1a44					      REPEND
     18  1a45		       ea		      nop
     17  1a45					      REPEND
     18  1a46		       ea		      nop
     17  1a46					      REPEND
     18  1a47		       ea		      nop
     19  1a48					      REPEND
    444  1a48
    445  1a48		       a9 d3		      lda	#KERNEL_LINES
    446  1a4a		       8d 96 02 	      sta	TIM64T
    447  1a4d		       a9 01		      lda	#1
    448  1a4f		       85 27		      sta	VDELBL
    449  1a51		       85 25		      sta	VDELP0
    450  1a53
    451  1a53							; missile1
    452  1a53		       a9 07		      lda	#<(P1COLOR-1)
    453  1a55		       18		      clc
    454  1a56		       65 c0		      adc	missile1y
    455  1a58		       8d 41 10 	      sta	DF1TOP
    456  1a5b		       38		      sec
    457  1a5c		       65 c3		      adc	missile1height
    458  1a5e		       8d 49 10 	      sta	DF1BOT
    459  1a61
    460  1a61		       a9 00		      lda	#0
    461  1a63		       85 01		      sta	VBLANK
    462  1a65		       8d 58 10 	      sta	FASTFETCH
    463  1a68							;sleep 7
    464  1a68		       a9 12		      lda	#<DF2DATAW	; REVENG - added so GRP0 is at TOP
    465  1a6a		       85 1b		      STA	GRP0	; 36 (VDEL)   ; ""
      0  1a6c					      sleep	2	; ""
      1  1a6c				   .CYCLES    SET	2
      2  1a6c
      3  1a6c				  -	      IF	.CYCLES < 2
      4  1a6c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a6c				  -	      ERR
      6  1a6c					      ENDIF
      7  1a6c
      8  1a6c				  -	      IF	.CYCLES & 1
      9  1a6c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a6c				  -	      nop	0
     11  1a6c				  -	      ELSE
     12  1a6c				  -	      bit	VSYNC
     13  1a6c				  -	      ENDIF
     14  1a6c				  -.CYCLES    SET	.CYCLES - 3
     15  1a6c					      ENDIF
     16  1a6c
     17  1a6c					      REPEAT	.CYCLES / 2
     18  1a6c		       ea		      nop
     19  1a6d					      REPEND
    467  1a6d
    468  1a6d		       a9 18		      lda	#<DF0FRACDATA
    469  1a6f		       85 0e		      sta	PF1	; (PF1L)
    470  1a71
    471  1a71							; enter at cycle ??
    472  1a71				   loop
    473  1a71		       a9 08		      lda	#<DF0DATA	;74
    474  1a73		       85 06		      STA	COLUP0	; 1
    475  1a75		       a9 09		      lda	#<DF1DATA	;3
    476  1a77				   loop2
    477  1a77		       85 07		      STA	COLUP1	; 6
    478  1a79		       a9 0b		      lda	#<DF3DATA
    479  1a7b		       85 1c		      STA	GRP1	; 11
    480  1a7d		       a9 20		      lda	#<DF0FLAG
    481  1a7f		       85 1d		      STA	ENAM0	; 16
    482  1a81
    483  1a81		       a9 1e		      lda	#<DF6FRACDATA
    484  1a83		       85 09		      sta	COLUBK	; 21
    485  1a85		       a9 1c		      lda	#<DF4FRACDATA
    486  1a87		       85 08		      sta	COLUPF	; 26
    487  1a89		       a9 19		      lda	#<DF1FRACDATA
    488  1a8b		       85 0f		      sta	PF2	; 31 (PF2L)
    489  1a8d				   loop3
    490  1a8d		       a9 12		      lda	#<DF2DATAW
    491  1a8f		       85 1b		      STA	GRP0	; 36 (VDEL)
    492  1a91		       a9 23		      lda	#<DF3FLAG
    493  1a93		       85 1f		      STA	ENABL	; 41 (VDEL)
    494  1a95		       a2 70		      ldx	#$70	;in case we get kernel 6
    495  1a97		       a9 1a		      lda	#<DF2FRACDATA	;45
    496  1a99		       85 0f		      sta	PF2	; 48
    497  1a9b		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    498  1a9d		       a9 1b		      lda	#<DF3FRACDATA	;53
    499  1a9f		       85 0e		      sta	PF1	; 56
    500  1aa1		       a9 0c		      lda	#<DF4DATA	; 58 this is the repos info
    501  1aa3		       f0 44		      beq	repo	;60/61
    502  1aa5				   norepo		; 60
    503  1aa5		       a8		      tay		; 62
    504  1aa6		       a9 08		      lda	#<DF0DATA	; 64
    505  1aa8
    506  1aa8		       ae 84 02 	      ldx	INTIM	; 68 timed for 192 lines
    507  1aab		       f0 57		      beq	exitkernel	; 70/71
    508  1aad		       85 2a		      sta	HMOVE	; 73
    509  1aaf
    510  1aaf		       85 06		      STA	COLUP0	; 0
    511  1ab1		       a9 09		      lda	#<DF1DATA	;2
    512  1ab3		       85 07		      STA	COLUP1	;5
    513  1ab5		       a9 0b		      lda	#<DF3DATA
    514  1ab7		       85 1c		      STA	GRP1	; 10
    515  1ab9		       a9 21		      lda	#<DF1FLAG
    516  1abb		       85 1e		      STA	ENAM1	; 15
    517  1abd		       a9 18		      lda	#<DF0FRACDATA
    518  1abf		       85 0e		      sta	PF1	; 20 (PF1L)
    519  1ac1		       a9 19		      lda	#<DF1FRACDATA
    520  1ac3		       85 0f		      sta	PF2	; 25 (PF2L)
    521  1ac5		       a9 12		      lda	#<DF2DATAW
    522  1ac7		       85 1b		      STA	GRP0	; 30 (VDEL)
    523  1ac9		       a9 23		      lda	#<DF3FLAG
    524  1acb		       85 1f		      STA	ENABL	; 35 (VDEL)
    525  1acd		       88		      dey		; 37
    526  1ace		       8c 64 10 	      STY	DF4PUSH	; 41
    527  1ad1		       a0 80		      ldy	#$80	; 43 no movement next line
    528  1ad3		       a9 1a		      lda	#<DF2FRACDATA	;45
    529  1ad5		       85 0f		      sta	PF2	; 48
    530  1ad7		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    531  1ad9		       a9 1b		      lda	#<DF3FRACDATA	;53
    532  1adb		       85 0e		      sta	PF1	; 56
    533  1add					      ifnconst	DPC_kernel_options
    534  1add							;sleep 8 ; REVENG - timing is off - results in a garbled screen
      0  1add					      sleep	5	; this is better
      1  1add				   .CYCLES    SET	5
      2  1add
      3  1add				  -	      IF	.CYCLES < 2
      4  1add				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1add				  -	      ERR
      6  1add					      ENDIF
      7  1add
      8  1add					      IF	.CYCLES & 1
      9  1add					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1add		       04 00		      nop	0
     11  1adf				  -	      ELSE
     12  1adf				  -	      bit	VSYNC
     13  1adf					      ENDIF
     14  1adf				   .CYCLES    SET	.CYCLES - 3
     15  1adf					      ENDIF
     16  1adf
     17  1adf					      REPEAT	.CYCLES / 2
     18  1adf		       ea		      nop
     19  1ae0					      REPEND
    536  1ae0				  -	      else
    537  1ae0				  -	      bit	DPC_kernel_options
    538  1ae0				  -	      if	(DPC_kernel_options > $3F)
    539  1ae0				  -	      bmi	COLfound
    540  1ae0				  -	      else
    541  1ae0				  -	      bpl	COLfound
    542  1ae0				  -	      endif
    543  1ae0					      endif
    544  1ae0		       86 ce		      stx	temp4	; +3
    545  1ae2
    546  1ae2				   getbackearly
    547  1ae2		       a9 18		      lda	#<DF0FRACDATA	; +2
    548  1ae4		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    549  1ae6		       4c 71 5a 	      JMP	loop+$4000	; 72
    550  1ae9
    551  1ae9				  -	      ifconst	DPC_kernel_options
    552  1ae9				  -COLfound
    553  1ae9				  -	      lda	DF0FRACDATA
    554  1ae9				  -	      sta	PF1	; 69 (PF1L) too early?
    555  1ae9				  -	      JMP	loop+$4000	; 72
    556  1ae9					      endif
    557  1ae9
    558  1ae9				   repo
    559  1ae9		       ac 1f 10 	      ldy	DF7FRACDATA	; 65
    560  1aec		       a9 18		      lda	#<DF0FRACDATA	; 67 preload PF1L for next line
    561  1aee				  -	      if	((>repo) > (>norepo))
    562  1aee				  -	      STA	PF1
    563  1aee					      else
    564  1aee		       8d 0e 00 	      STA.w	PF1	; 71 ; sta.w if page doesn't wrap
    565  1af1					      endif
    566  1af1		       a9 08		      lda	#<DF0DATA	;73
    567  1af3		       85 06		      STA	COLUP0	; 0
    568  1af5		       a9 09		      lda	#<DF1DATA
    569  1af7		       85 07		      STA	COLUP1	;5
    570  1af9		       a9 0b		      lda	#<DF3DATA
    571  1afb		       85 1c		      STA	GRP1	; 10
    572  1afd		       a9 21		      lda	#<DF1FLAG
    573  1aff		       85 1e		      STA	ENAM1	; 15
    574  1b01							; repos info holds HMMx
    575  1b01		       6c 0d 10 	      jmp	(DF5DATA)	; 20 grabs df6/df7=lo/hi
    576  1b04
    577  1b04				   exitkernel		; exit the kernel
    578  1b04		       20 c8 5e 	      jsr	scorekernel+$4000	; 1
    579  1b07				   exit
    580  1b07		       a2 ff		      ldx	#255
    581  1b09		       8e 58 10 	      stx	FASTFETCH
    582  1b0c		       85 02		      sta	WSYNC
    583  1b0e				  -	      ifconst	qtcontroller
    584  1b0e				  -	      lda	qtcontroller
    585  1b0e				  -	      lsr		; bit 0 in carry
    586  1b0e				  -	      lda	#4
    587  1b0e				  -	      ror		; carry into top of A
    588  1b0e					      else
    589  1b0e		       a9 02		      lda	#2
    590  1b10					      endif		; qtcontroller
    591  1b10		       85 01		      STA	VBLANK
    592  1b12		       a9 a7		      lda	#OVERSCAN_LINES
    593  1b14		       8d 96 02 	      sta	TIM64T
    594  1b17		       38		      sec
    595  1b18		       a9 d3		      lda	#KERNEL_LINES
    596  1b1a		       e5 ce		      sbc	temp4
    597  1b1c		       aa		      tax
    598  1b1d		       4a		      lsr
    599  1b1e		       4a		      lsr
    600  1b1f		       85 cd		      sta	temp3	; div4
    601  1b21		       4a		      lsr
    602  1b22		       4a		      lsr
    603  1b23		       85 cc		      sta	temp2	; div16
    604  1b25		       4a		      lsr
    605  1b26		       85 cb		      sta	temp1	; div32
    606  1b28		       18		      clc
    607  1b29		       8a		      txa
    608  1b2a		       65 cc		      adc	temp2
    609  1b2c		       65 cb		      adc	temp1
    610  1b2e		       38		      sec
    611  1b2f		       e5 cd		      sbc	temp3
    612  1b31		       85 ce		      sta	temp4	; approx line of first pf coll
      0  1b33					      RETURN
      1  1b33				  -	      ifnconst	bankswitch
      2  1b33				  -	      rts
      3  1b33					      else
      4  1b33		       4c e0 df 	      jmp	BS_return
      5  1b36					      endif
    614  1b36
    615  1b36							; jmp exit
    616  1b36
    617  1b36							; kernels resp1 23/28/33/38/43/48/53/58/63/68/73
    618  1b36
    619  1b36				   kernel1
    620  1b36		       85 11		      sta	RESP1	; 23
    621  1b38		       a9 12		      lda	#<DF2DATAW
    622  1b3a		       85 1b		      STA	GRP0	; 28 (VDEL)
    623  1b3c		       a9 19		      lda	#<DF1FRACDATA
    624  1b3e		       85 0f		      STA	PF2	; 33
    625  1b40		       a9 23		      lda	#<DF3FLAG
    626  1b42		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b44					      sleep	5
      1  1b44				   .CYCLES    SET	5
      2  1b44
      3  1b44				  -	      IF	.CYCLES < 2
      4  1b44				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b44				  -	      ERR
      6  1b44					      ENDIF
      7  1b44
      8  1b44					      IF	.CYCLES & 1
      9  1b44					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b44		       04 00		      nop	0
     11  1b46				  -	      ELSE
     12  1b46				  -	      bit	VSYNC
     13  1b46					      ENDIF
     14  1b46				   .CYCLES    SET	.CYCLES - 3
     15  1b46					      ENDIF
     16  1b46
     17  1b46					      REPEAT	.CYCLES / 2
     18  1b46		       ea		      nop
     19  1b47					      REPEND
    628  1b47		       a9 1a		      lda	#<DF2FRACDATA	;45
    629  1b49		       85 0f		      sta	PF2	; 48
    630  1b4b		       a9 1b		      lda	#<DF3FRACDATA	;50
    631  1b4d		       85 0e		      sta	PF1	; 53
    632  1b4f		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    633  1b51		       85 05		      STA	NUSIZ1	; 58
    634  1b53		       85 0c		      STA	REFP1	; 61
    635  1b55		       4c e2 1a 	      jmp	getbackearly	;64
    636  1b58
    637  1b58				   kernel2
    638  1b58		       a9 12		      lda	#<DF2DATAW
    639  1b5a		       85 1b		      STA	GRP0	; 25 (VDEL)
    640  1b5c		       85 11		      sta	RESP1	;28
    641  1b5e		       a9 19		      lda	#<DF1FRACDATA
    642  1b60		       85 0f		      STA	PF2	; 33
    643  1b62		       a9 23		      lda	#<DF3FLAG
    644  1b64		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b66					      sleep	5
      1  1b66				   .CYCLES    SET	5
      2  1b66
      3  1b66				  -	      IF	.CYCLES < 2
      4  1b66				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b66				  -	      ERR
      6  1b66					      ENDIF
      7  1b66
      8  1b66					      IF	.CYCLES & 1
      9  1b66					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b66		       04 00		      nop	0
     11  1b68				  -	      ELSE
     12  1b68				  -	      bit	VSYNC
     13  1b68					      ENDIF
     14  1b68				   .CYCLES    SET	.CYCLES - 3
     15  1b68					      ENDIF
     16  1b68
     17  1b68					      REPEAT	.CYCLES / 2
     18  1b68		       ea		      nop
     19  1b69					      REPEND
    646  1b69		       a9 1a		      lda	#<DF2FRACDATA	;45
    647  1b6b		       85 0f		      sta	PF2	; 48
    648  1b6d		       a9 1b		      lda	#<DF3FRACDATA	;50
    649  1b6f		       85 0e		      sta	PF1	; 53
    650  1b71		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    651  1b73		       85 05		      STA	NUSIZ1
    652  1b75		       85 0c		      STA	REFP1
    653  1b77		       4c e2 1a 	      jmp	getbackearly	;64
    654  1b7a
    655  1b7a				   kernel3
    656  1b7a		       a9 12		      lda	#<DF2DATAW
    657  1b7c		       85 1b		      STA	GRP0	; 25 (VDEL)
    658  1b7e		       a9 19		      lda	#<DF1FRACDATA
    659  1b80		       85 0f		      STA	PF2	; 30
    660  1b82		       85 11		      sta	RESP1	;33
    661  1b84		       a9 23		      lda	#<DF3FLAG
    662  1b86		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b88					      sleep	5
      1  1b88				   .CYCLES    SET	5
      2  1b88
      3  1b88				  -	      IF	.CYCLES < 2
      4  1b88				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b88				  -	      ERR
      6  1b88					      ENDIF
      7  1b88
      8  1b88					      IF	.CYCLES & 1
      9  1b88					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b88		       04 00		      nop	0
     11  1b8a				  -	      ELSE
     12  1b8a				  -	      bit	VSYNC
     13  1b8a					      ENDIF
     14  1b8a				   .CYCLES    SET	.CYCLES - 3
     15  1b8a					      ENDIF
     16  1b8a
     17  1b8a					      REPEAT	.CYCLES / 2
     18  1b8a		       ea		      nop
     19  1b8b					      REPEND
    664  1b8b		       a9 1a		      lda	#<DF2FRACDATA	;45
    665  1b8d		       85 0f		      sta	PF2	; 48
    666  1b8f		       a9 1b		      lda	#<DF3FRACDATA	;50
    667  1b91		       85 0e		      sta	PF1	; 53
    668  1b93		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    669  1b95		       85 05		      STA	NUSIZ1
    670  1b97		       85 0c		      STA	REFP1
    671  1b99		       4c e2 1a 	      JMP	getbackearly	; 64
    672  1b9c
    673  1b9c				   kernel4
    674  1b9c		       a9 12		      lda	#<DF2DATAW
    675  1b9e		       85 1b		      STA	GRP0	; 25 (VDEL)
    676  1ba0		       a9 23		      lda	#<DF3FLAG
    677  1ba2		       85 1f		      STA	ENABL	; 30(VDEL)
    678  1ba4		       a9 19		      lda	#<DF1FRACDATA
    679  1ba6		       85 0f		      STA	PF2	; 35
    680  1ba8		       85 11		      sta	RESP1	;38
      0  1baa					      sleep	5
      1  1baa				   .CYCLES    SET	5
      2  1baa
      3  1baa				  -	      IF	.CYCLES < 2
      4  1baa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1baa				  -	      ERR
      6  1baa					      ENDIF
      7  1baa
      8  1baa					      IF	.CYCLES & 1
      9  1baa					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1baa		       04 00		      nop	0
     11  1bac				  -	      ELSE
     12  1bac				  -	      bit	VSYNC
     13  1bac					      ENDIF
     14  1bac				   .CYCLES    SET	.CYCLES - 3
     15  1bac					      ENDIF
     16  1bac
     17  1bac					      REPEAT	.CYCLES / 2
     18  1bac		       ea		      nop
     19  1bad					      REPEND
    682  1bad		       a9 1a		      lda	#<DF2FRACDATA	;45
    683  1baf		       85 0f		      sta	PF2	; 48
    684  1bb1		       a9 1b		      lda	#<DF3FRACDATA	;50
    685  1bb3		       85 0e		      sta	PF1	; 53
    686  1bb5		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    687  1bb7		       85 05		      STA	NUSIZ1	; 58
    688  1bb9		       85 0c		      STA	REFP1	; 61
    689  1bbb		       4c e2 1a 	      JMP	getbackearly	; 64
    690  1bbe
    691  1bbe				   kernel5
    692  1bbe		       a9 12		      lda	#<DF2DATAW
    693  1bc0		       85 1b		      STA	GRP0	; (VDEL)
    694  1bc2		       a9 23		      lda	#<DF3FLAG
    695  1bc4		       85 1f		      STA	ENABL	; (VDEL)
    696  1bc6		       a9 19		      lda	#<DF1FRACDATA
    697  1bc8		       85 0f		      STA	PF2	; 35
      0  1bca					      sleep	5
      1  1bca				   .CYCLES    SET	5
      2  1bca
      3  1bca				  -	      IF	.CYCLES < 2
      4  1bca				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bca				  -	      ERR
      6  1bca					      ENDIF
      7  1bca
      8  1bca					      IF	.CYCLES & 1
      9  1bca					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bca		       04 00		      nop	0
     11  1bcc				  -	      ELSE
     12  1bcc				  -	      bit	VSYNC
     13  1bcc					      ENDIF
     14  1bcc				   .CYCLES    SET	.CYCLES - 3
     15  1bcc					      ENDIF
     16  1bcc
     17  1bcc					      REPEAT	.CYCLES / 2
     18  1bcc		       ea		      nop
     19  1bcd					      REPEND
    699  1bcd		       85 11		      sta	RESP1	;43
    700  1bcf		       a9 1a		      lda	#<DF2FRACDATA	;45
    701  1bd1		       85 0f		      sta	PF2	; 48
    702  1bd3		       a9 1b		      lda	#<DF3FRACDATA	;50
    703  1bd5		       85 0e		      sta	PF1	; 53
    704  1bd7		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    705  1bd9		       85 05		      STA	NUSIZ1
    706  1bdb		       85 0c		      STA	REFP1
    707  1bdd		       4c e2 1a 	      JMP	getbackearly	; 64
    708  1be0
    709  1be0				   kernel6
    710  1be0		       a9 12		      lda	#<DF2DATAW
    711  1be2		       85 1b		      STA	GRP0	; 25 (VDEL)
    712  1be4		       a9 23		      lda	#<DF3FLAG
    713  1be6		       85 1f		      STA	ENABL	; 30 (VDEL)
    714  1be8		       a9 19		      lda	#<DF1FRACDATA
    715  1bea		       85 0f		      STA	PF2	; 35
    716  1bec		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    717  1bee		       85 05		      STA	NUSIZ1	; 40
    718  1bf0		       85 0c		      STA	REFP1	; 43
    719  1bf2		       a9 1a		      lda	#<DF2FRACDATA	;45
    720  1bf4		       85 0f		      sta	PF2	; 48
    721  1bf6		       a9 1b		      lda	#<DF3FRACDATA	;50
    722  1bf8		       85 11		      sta	RESP1	;53
    723  1bfa							; do a move right by 15
    724  1bfa		       85 0e		      sta	PF1	; 56
    725  1bfc		       86 21		      stx	HMP1	; 59
    726  1bfe		       a9 19		      lda	#<DF1FRACDATA
    727  1c00		       85 0f		      sta	PF2	; 64 (PF2L)
    728  1c02		       a9 18		      lda	#<DF0FRACDATA
    729  1c04		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    730  1c06		       a9 08		      lda	#<DF0DATA	; 71
    731  1c08		       85 2a		      sta	HMOVE	; 74 adjust to +15 right
    732  1c0a
    733  1c0a		       85 06		      STA	COLUP0	; 1
    734  1c0c		       a9 09		      lda	#<DF1DATA
    735  1c0e		       85 07		      sta	COLUP1	; 6
    736  1c10		       a9 0b		      lda	#<DF3DATA
    737  1c12		       85 1c		      STA	GRP1	; 11
    738  1c14		       a9 20		      lda	#<DF0FLAG
    739  1c16		       85 1d		      STA	ENAM0	; 16
    740  1c18		       a9 1e		      lda	#<DF6FRACDATA
    741  1c1a		       85 09		      STA	COLUBK	; 21
    742  1c1c		       a9 1c		      lda	#<DF4FRACDATA
    743  1c1e		       85 08		      sta	COLUPF	; 26
      0  1c20					      sleep	2
      1  1c20				   .CYCLES    SET	2
      2  1c20
      3  1c20				  -	      IF	.CYCLES < 2
      4  1c20				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c20				  -	      ERR
      6  1c20					      ENDIF
      7  1c20
      8  1c20				  -	      IF	.CYCLES & 1
      9  1c20				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c20				  -	      nop	0
     11  1c20				  -	      ELSE
     12  1c20				  -	      bit	VSYNC
     13  1c20				  -	      ENDIF
     14  1c20				  -.CYCLES    SET	.CYCLES - 3
     15  1c20					      ENDIF
     16  1c20
     17  1c20					      REPEAT	.CYCLES / 2
     18  1c20		       ea		      nop
     19  1c21					      REPEND
    745  1c21		       4c 8d 1a 	      jmp	loop3	; 31
    746  1c24
    747  1c24				   kernel7
    748  1c24		       a9 12		      lda	#<DF2DATAW
    749  1c26		       85 1b		      STA	GRP0	; 25 (VDEL)
    750  1c28		       a9 23		      lda	#<DF3FLAG
    751  1c2a		       85 1f		      STA	ENABL	; 30 (VDEL)
    752  1c2c		       a9 19		      lda	#<DF1FRACDATA
    753  1c2e		       85 0f		      STA	PF2	; 35
    754  1c30		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    755  1c32		       85 05		      STA	NUSIZ1	; 40
    756  1c34		       85 0c		      STA	REFP1	; 43
    757  1c36		       a9 1a		      lda	#<DF2FRACDATA	;45
    758  1c38		       85 0f		      sta	PF2	; 48
      0  1c3a					      sleep	2
      1  1c3a				   .CYCLES    SET	2
      2  1c3a
      3  1c3a				  -	      IF	.CYCLES < 2
      4  1c3a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c3a				  -	      ERR
      6  1c3a					      ENDIF
      7  1c3a
      8  1c3a				  -	      IF	.CYCLES & 1
      9  1c3a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c3a				  -	      nop	0
     11  1c3a				  -	      ELSE
     12  1c3a				  -	      bit	VSYNC
     13  1c3a				  -	      ENDIF
     14  1c3a				  -.CYCLES    SET	.CYCLES - 3
     15  1c3a					      ENDIF
     16  1c3a
     17  1c3a					      REPEAT	.CYCLES / 2
     18  1c3a		       ea		      nop
     19  1c3b					      REPEND
    760  1c3b		       85 11		      sta	RESP1	;53
    761  1c3d		       a9 1b		      lda	#<DF3FRACDATA	;55
    762  1c3f		       85 0e		      sta	PF1	; 58
      0  1c41					      sleep	3
      1  1c41				   .CYCLES    SET	3
      2  1c41
      3  1c41				  -	      IF	.CYCLES < 2
      4  1c41				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c41				  -	      ERR
      6  1c41					      ENDIF
      7  1c41
      8  1c41					      IF	.CYCLES & 1
      9  1c41					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c41		       04 00		      nop	0
     11  1c43				  -	      ELSE
     12  1c43				  -	      bit	VSYNC
     13  1c43					      ENDIF
     14  1c43				   .CYCLES    SET	.CYCLES - 3
     15  1c43					      ENDIF
     16  1c43
     17  1c43				  -	      REPEAT	.CYCLES / 2
     18  1c43				  -	      nop
     19  1c43					      REPEND
    764  1c43		       4c e2 1a 	      JMP	getbackearly	; 64
    765  1c46
    766  1c46				   kernel8
    767  1c46		       a9 12		      lda	#<DF2DATAW
    768  1c48		       85 1b		      STA	GRP0	; (VDEL)
    769  1c4a		       a9 23		      lda	#<DF3FLAG
    770  1c4c		       85 1f		      STA	ENABL	; (VDEL)
    771  1c4e		       a9 19		      lda	#<DF1FRACDATA
    772  1c50		       85 0f		      STA	PF2	; 35
    773  1c52		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    774  1c54		       85 05		      STA	NUSIZ1	; 40
    775  1c56		       85 0c		      STA	REFP1	; 43
    776  1c58		       a9 1a		      lda	#<DF2FRACDATA	;45
    777  1c5a		       85 0f		      sta	PF2	; 48
    778  1c5c		       a9 1b		      lda	#<DF3FRACDATA	;50
    779  1c5e		       85 0e		      sta	PF1	; 53
      0  1c60					      sleep	2
      1  1c60				   .CYCLES    SET	2
      2  1c60
      3  1c60				  -	      IF	.CYCLES < 2
      4  1c60				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c60				  -	      ERR
      6  1c60					      ENDIF
      7  1c60
      8  1c60				  -	      IF	.CYCLES & 1
      9  1c60				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c60				  -	      nop	0
     11  1c60				  -	      ELSE
     12  1c60				  -	      bit	VSYNC
     13  1c60				  -	      ENDIF
     14  1c60				  -.CYCLES    SET	.CYCLES - 3
     15  1c60					      ENDIF
     16  1c60
     17  1c60					      REPEAT	.CYCLES / 2
     18  1c60		       ea		      nop
     19  1c61					      REPEND
    781  1c61		       85 11		      sta	RESP1	;58
      0  1c63					      sleep	3
      1  1c63				   .CYCLES    SET	3
      2  1c63
      3  1c63				  -	      IF	.CYCLES < 2
      4  1c63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c63				  -	      ERR
      6  1c63					      ENDIF
      7  1c63
      8  1c63					      IF	.CYCLES & 1
      9  1c63					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c63		       04 00		      nop	0
     11  1c65				  -	      ELSE
     12  1c65				  -	      bit	VSYNC
     13  1c65					      ENDIF
     14  1c65				   .CYCLES    SET	.CYCLES - 3
     15  1c65					      ENDIF
     16  1c65
     17  1c65				  -	      REPEAT	.CYCLES / 2
     18  1c65				  -	      nop
     19  1c65					      REPEND
    783  1c65		       4c e2 1a 	      JMP	getbackearly	; 64
    784  1c68
    785  1c68				   kernel9
    786  1c68		       a9 12		      lda	#<DF2DATAW
    787  1c6a		       85 1b		      STA	GRP0	; (VDEL)
    788  1c6c		       a9 23		      lda	#<DF3FLAG
    789  1c6e		       85 1f		      STA	ENABL	; (VDEL)
    790  1c70		       a9 19		      lda	#<DF1FRACDATA
    791  1c72		       85 0f		      STA	PF2	; 35
    792  1c74		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    793  1c76		       85 05		      STA	NUSIZ1	; 40
    794  1c78		       85 0c		      STA	REFP1	; 43
    795  1c7a		       a9 1a		      lda	#<DF2FRACDATA	;45
    796  1c7c		       85 0f		      sta	PF2	; 48
    797  1c7e		       a9 1b		      lda	#<DF3FRACDATA	;50
    798  1c80		       85 0e		      sta	PF1	; 53
      0  1c82					      sleep	5
      1  1c82				   .CYCLES    SET	5
      2  1c82
      3  1c82				  -	      IF	.CYCLES < 2
      4  1c82				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c82				  -	      ERR
      6  1c82					      ENDIF
      7  1c82
      8  1c82					      IF	.CYCLES & 1
      9  1c82					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c82		       04 00		      nop	0
     11  1c84				  -	      ELSE
     12  1c84				  -	      bit	VSYNC
     13  1c84					      ENDIF
     14  1c84				   .CYCLES    SET	.CYCLES - 3
     15  1c84					      ENDIF
     16  1c84
     17  1c84					      REPEAT	.CYCLES / 2
     18  1c84		       ea		      nop
     19  1c85					      REPEND
    800  1c85		       a9 18		      lda	#<DF0FRACDATA
    801  1c87		       85 11		      sta	RESP1	;63
      0  1c89					      sleep	3
      1  1c89				   .CYCLES    SET	3
      2  1c89
      3  1c89				  -	      IF	.CYCLES < 2
      4  1c89				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c89				  -	      ERR
      6  1c89					      ENDIF
      7  1c89
      8  1c89					      IF	.CYCLES & 1
      9  1c89					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c89		       04 00		      nop	0
     11  1c8b				  -	      ELSE
     12  1c8b				  -	      bit	VSYNC
     13  1c8b					      ENDIF
     14  1c8b				   .CYCLES    SET	.CYCLES - 3
     15  1c8b					      ENDIF
     16  1c8b
     17  1c8b				  -	      REPEAT	.CYCLES / 2
     18  1c8b				  -	      nop
     19  1c8b					      REPEND
    803  1c8b		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    804  1c8d		       4c 71 1a 	      jmp	loop	;72
    805  1c90
    806  1c90				   kernel10
    807  1c90		       a9 12		      lda	#<DF2DATAW
    808  1c92		       85 1b		      STA	GRP0	; 25 (VDEL)
    809  1c94		       a9 23		      lda	#<DF3FLAG
    810  1c96		       85 1f		      STA	ENABL	; 30 (VDEL)
    811  1c98		       a9 19		      lda	#<DF1FRACDATA
    812  1c9a		       85 0f		      STA	PF2	; 35
    813  1c9c		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    814  1c9e		       85 05		      STA	NUSIZ1	; 40
    815  1ca0		       85 0c		      STA	REFP1	; 43
    816  1ca2		       a9 1a		      lda	#<DF2FRACDATA	;45
    817  1ca4		       85 0f		      sta	PF2	; 48
    818  1ca6		       a9 1b		      lda	#<DF3FRACDATA	;50
    819  1ca8		       85 0e		      sta	PF1	; 53
      0  1caa					      sleep	6
      1  1caa				   .CYCLES    SET	6
      2  1caa
      3  1caa				  -	      IF	.CYCLES < 2
      4  1caa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1caa				  -	      ERR
      6  1caa					      ENDIF
      7  1caa
      8  1caa				  -	      IF	.CYCLES & 1
      9  1caa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1caa				  -	      nop	0
     11  1caa				  -	      ELSE
     12  1caa				  -	      bit	VSYNC
     13  1caa				  -	      ENDIF
     14  1caa				  -.CYCLES    SET	.CYCLES - 3
     15  1caa					      ENDIF
     16  1caa
     17  1caa					      REPEAT	.CYCLES / 2
     18  1caa		       ea		      nop
     17  1caa					      REPEND
     18  1cab		       ea		      nop
     17  1cab					      REPEND
     18  1cac		       ea		      nop
     19  1cad					      REPEND
    821  1cad		       a9 18		      lda	#<DF0FRACDATA
    822  1caf		       ae 08 10 	      LDX	DF0DATA	; 65
    823  1cb2		       85 11		      sta	RESP1	; 68
    824  1cb4		       85 0e		      STA	PF1	; 71
    825  1cb6		       a9 09		      lda	#<DF1DATA	; 74
    826  1cb8		       86 06		      STX	COLUP0	; 0
    827  1cba		       4c 77 1a 	      jmp	loop2	; 3
    828  1cbd
    829  1cbd				   kernel11
    830  1cbd		       a9 12		      lda	#<DF2DATAW
    831  1cbf		       85 1b		      STA	GRP0	; (VDEL)
    832  1cc1		       a9 23		      lda	#<DF3FLAG
    833  1cc3		       85 1f		      STA	ENABL	; (VDEL)
    834  1cc5		       a9 19		      lda	#<DF1FRACDATA
    835  1cc7		       85 0f		      STA	PF2	; 35
    836  1cc9		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    837  1ccb		       85 05		      STA	NUSIZ1
    838  1ccd		       85 0c		      STA	REFP1
    839  1ccf		       a9 1a		      lda	#<DF2FRACDATA	;45
    840  1cd1		       85 0f		      sta	PF2	; 48
    841  1cd3		       a9 1b		      lda	#<DF3FRACDATA	;50
    842  1cd5		       85 0e		      sta	PF1	; 53
      0  1cd7					      sleep	3
      1  1cd7				   .CYCLES    SET	3
      2  1cd7
      3  1cd7				  -	      IF	.CYCLES < 2
      4  1cd7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cd7				  -	      ERR
      6  1cd7					      ENDIF
      7  1cd7
      8  1cd7					      IF	.CYCLES & 1
      9  1cd7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cd7		       04 00		      nop	0
     11  1cd9				  -	      ELSE
     12  1cd9				  -	      bit	VSYNC
     13  1cd9					      ENDIF
     14  1cd9				   .CYCLES    SET	.CYCLES - 3
     15  1cd9					      ENDIF
     16  1cd9
     17  1cd9				  -	      REPEAT	.CYCLES / 2
     18  1cd9				  -	      nop
     19  1cd9					      REPEND
    844  1cd9		       a9 19		      lda	#<DF1FRACDATA	;45
    845  1cdb		       85 0f		      sta	PF2	; 61
    846  1cdd		       ae 08 10 	      LDX	DF0DATA	; 65
    847  1ce0
    848  1ce0		       a9 18		      lda	#<DF0FRACDATA	; 67
    849  1ce2		       85 0e		      sta	PF1	; 70
    850  1ce4		       85 11		      sta	RESP1	; 73
    851  1ce6		       86 06		      STX	COLUP0	; 0
    852  1ce8		       a9 09		      lda	#<DF1DATA	; 2
    853  1cea		       85 07		      sta	COLUP1	; 5
    854  1cec		       a9 0b		      lda	#<DF3DATA
    855  1cee		       85 1c		      STA	GRP1	; 10
    856  1cf0		       a9 20		      lda	#<DF0FLAG
    857  1cf2		       85 1d		      STA	ENAM0	; 25
    858  1cf4		       a9 1e		      lda	#<DF6FRACDATA
    859  1cf6		       85 09		      STA	COLUBK	; 20
    860  1cf8		       a9 1c		      lda	#<DF4FRACDATA
    861  1cfa		       85 08		      sta	COLUPF	; 25
      0  1cfc					      sleep	3
      1  1cfc				   .CYCLES    SET	3
      2  1cfc
      3  1cfc				  -	      IF	.CYCLES < 2
      4  1cfc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cfc				  -	      ERR
      6  1cfc					      ENDIF
      7  1cfc
      8  1cfc					      IF	.CYCLES & 1
      9  1cfc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cfc		       04 00		      nop	0
     11  1cfe				  -	      ELSE
     12  1cfe				  -	      bit	VSYNC
     13  1cfe					      ENDIF
     14  1cfe				   .CYCLES    SET	.CYCLES - 3
     15  1cfe					      ENDIF
     16  1cfe
     17  1cfe				  -	      REPEAT	.CYCLES / 2
     18  1cfe				  -	      nop
     19  1cfe					      REPEND
    863  1cfe		       4c 8d 1a 	      jmp	loop3	; 31
    864  1d01
    865  1d01				   set_fetchers
    866  1d01		       ad 6c 1d 	      lda	dflow
    867  1d04		       8d 50 10 	      sta	DF0LOW
    868  1d07		       ad 74 1d 	      lda	dfhigh
    869  1d0a		       8d 68 10 	      sta	DF0HI
    870  1d0d
    871  1d0d		       ad 6d 1d 	      lda	dflow+1
    872  1d10		       8d 51 10 	      sta	DF1LOW
    873  1d13		       ad 75 1d 	      lda	dfhigh+1
    874  1d16		       8d 69 10 	      sta	DF1HI
    875  1d19
    876  1d19		       ad 6e 1d 	      lda	dflow+2
    877  1d1c		       8d 52 10 	      sta	DF2LOW
    878  1d1f		       ad 76 1d 	      lda	dfhigh+2
    879  1d22		       8d 6a 10 	      sta	DF2HI
    880  1d25
    881  1d25				   set_fetchers36		; sets just 3-6
    882  1d25		       ad 6f 1d 	      lda	dflow+3
    883  1d28		       8d 53 10 	      sta	DF3LOW
    884  1d2b		       ad 77 1d 	      lda	dfhigh+3
    885  1d2e		       8d 6b 10 	      sta	DF3HI
    886  1d31
    887  1d31		       ad 70 1d 	      lda	dflow+4
    888  1d34		       8d 54 10 	      sta	DF4LOW
    889  1d37		       ad 78 1d 	      lda	dfhigh+4
    890  1d3a		       8d 6c 10 	      sta	DF4HI
    891  1d3d
    892  1d3d		       ad 71 1d 	      lda	dflow+5
    893  1d40		       8d 55 10 	      sta	DF5LOW
    894  1d43		       ad 79 1d 	      lda	dfhigh+5
    895  1d46		       8d 6d 10 	      sta	DF5HI
    896  1d49
    897  1d49		       ad 72 1d 	      lda	dflow+6
    898  1d4c		       8d 56 10 	      sta	DF6LOW
    899  1d4f		       ad 7a 1d 	      lda	dfhigh+6
    900  1d52		       8d 6e 10 	      sta	DF6HI
    901  1d55
    902  1d55		       60		      rts
    903  1d56
    904  1d56							;9d bad
    905  1d56							; the below isn't quite right
    906  1d56							;DF0DATA: COLUP0
    907  1d56							;DF1DATA: COLUP1
    908  1d56							;DF2DATAW: GRP0
    909  1d56							;DF3DATA: GRP1 
    910  1d56							;DF4DATA: 2lk lines until repos/HMP1
    911  1d56							;DF5DATA: low byte of repo kernels (xpos mod 15)
    912  1d56							;DF6DATA: High byte of repo kernels (x pos div 15)
    913  1d56							;DF7DATA: Programmer's stack
    914  1d56							;DF0FRACDATA: PF1L
    915  1d56							;DF1FRACDATA: PF2L
    916  1d56							;DF4FRACDATA: COLUPF
    917  1d56							;DF2FRACDATA: PF2R
    918  1d56							;DF3FRACDATA: PF2L
    919  1d56							;DF5FRACDATA: Sprite NUSIZ1/REFP1 (only during repos)
    920  1d56							;DF6FRACDATA: COLUBK
    921  1d56							;DF7FRACDATA: HMP1
    922  1d56							;DF3FLAG: kernel exit loop ?? (use flags instead?)
    923  1d56							;DF0FLAG: ENAM0
    924  1d56							;DF1FLAG: ENAM1 
    925  1d56							;DF3FLAG: ENABL 
    926  1d56
    927  1d56				   fetcher_address_table
    928  1d56				   kernello
    929  1d56		       36		      .byte.b	<kernel1
    930  1d57		       58		      .byte.b	<kernel2
    931  1d58		       7a		      .byte.b	<kernel3
    932  1d59		       9c		      .byte.b	<kernel4
    933  1d5a		       be		      .byte.b	<kernel5
    934  1d5b		       e0		      .byte.b	<kernel6
    935  1d5c		       24		      .byte.b	<kernel7
    936  1d5d		       46		      .byte.b	<kernel8
    937  1d5e		       68		      .byte.b	<kernel9
    938  1d5f		       90		      .byte.b	<kernel10
    939  1d60		       bd		      .byte.b	<kernel11
    940  1d61				   kernelhi
    941  1d61		       1b		      .byte.b	>kernel1
    942  1d62		       1b		      .byte.b	>kernel2
    943  1d63		       1b		      .byte.b	>kernel3
    944  1d64		       1b		      .byte.b	>kernel4
    945  1d65		       1b		      .byte.b	>kernel5
    946  1d66		       1b		      .byte.b	>kernel6
    947  1d67		       1c		      .byte.b	>kernel7
    948  1d68		       1c		      .byte.b	>kernel8
    949  1d69		       1c		      .byte.b	>kernel9
    950  1d6a		       1c		      .byte.b	>kernel10
    951  1d6b		       1c		      .byte.b	>kernel11
    952  1d6c				   dflow
    953  1d6c		       08		      .byte.b	<P0COLOR
    954  1d6d		       08		      .byte.b	<P1COLOR
    955  1d6e		       08		      .byte.b	<P0GFX
    956  1d6f		       08		      .byte.b	<P1GFX
    957  1d70		       2d		      .byte.b	<P1SKIP
    958  1d71		       08		      .byte.b	<JUMPTABLELO
    959  1d72		       14		      .byte.b	<JUMPTABLEHI
    960  1d73		       a5		      .byte.b	<USERSTACK
    961  1d74				   dfhigh
    962  1d74		       05		      .byte.b	(>P0COLOR) & $0F
    963  1d75		       03		      .byte.b	(>P1COLOR) & $0F
    964  1d76		       04		      .byte.b	(>P0GFX) & $0F
    965  1d77		       02		      .byte.b	(>P1GFX) & $0F
    966  1d78		       0b		      .byte.b	(>P1SKIP) & $0F
    967  1d79		       0b		      .byte.b	(>JUMPTABLELO) & $0F
    968  1d7a		       0b		      .byte.b	(>JUMPTABLEHI) & $0F
    969  1d7b		       0d		      .byte.b	(>USERSTACK) & $0F
    970  1d7c				   dffraclow
    971  1d7c		       08		      .byte.b	<PF1L
    972  1d7d		       08		      .byte.b	<PF2L
    973  1d7e		       08		      .byte.b	<PF1R
    974  1d7f		       08		      .byte.b	<PF2R
    975  1d80		       08		      .byte.b	<PFCOLS
    976  1d81		       39		      .byte.b	<NUSIZREFP
    977  1d82		       a5		      .byte.b	<BKCOLS
    978  1d83		       20		      .byte.b	<P1HMP
    979  1d84				   dffrachi
    980  1d84		       06		      .byte.b	(>PF1L) & $0F
    981  1d85		       07		      .byte.b	(>PF2L) & $0F
    982  1d86		       08		      .byte.b	(>PF1R) & $0F
    983  1d87		       09		      .byte.b	(>PF2R) & $0F
    984  1d88		       0a		      .byte.b	(>PFCOLS) & $0F
    985  1d89		       0b		      .byte.b	(>NUSIZREFP) & $0F
    986  1d8a		       0b		      .byte.b	(>BKCOLS) & $0F
    987  1d8b		       0b		      .byte.b	(>P1HMP) & $0F
    988  1d8c				   scorepointer
    989  1d8c		       94		      .byte.b	<scoretable
    990  1d8d		       08		      .byte.b	((>scoretable) & $0f) | (((>scoretable) / 2) & $70)
    991  1d8e				   scoresetup		; pointers to digit graphics
    992  1d8e		       45		      .byte.b	<scoredata
    993  1d8f		       0b		      .byte.b	(>scoredata) & $0F
    994  1d90				   Hmval		; 112 wuz first
    995  1d90		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240
    996  1d98				   Hmval74
    997  1d98		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128
    998  1d9f		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96
    999  1daf		       50 40 30 20*	      .byte.b	80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80
   1000  1dbf		       40 30 20 10*	      .byte.b	64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64
   1001  1dcf		       30 20 10 01*	      .byte.b	48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48
   1002  1ddf		       20 10 01 f0*	      .byte.b	32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32
   1003  1def		       10 01 f0 e0*	      .byte.b	16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16
   1004  1dff		       01 f0 e0 d0*	      .byte.b	1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1
   1005  1e0f		       f0 e0 d0 c0*	      .byte.b	240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240
   1006  1e1f		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192
   1007  1e31		       b0 a0 90 80*	      .byte.b	176,160,144,128,16,1,240,224
   1008  1e39
   1009  1e39
   1010  1e39				   kernel_setup
   1011  1e39							;--position P0, top P1, M0, M1, BL
   1012  1e39		       a2 00		      ldx	#0	; first sprite displayed
   1013  1e3b		       b5 85		      lda	SpriteGfxIndex,x
   1014  1e3d		       aa		      tax
   1015  1e3e		       b5 90		      lda	player1x,x
   1016  1e40		       c9 a0		      cmp	#160
   1017  1e42		       90 0a		      bcc	nostorep1
   1018  1e44		       c9 d0		      cmp	#208
   1019  1e46		       b0 02		      bcs	ksadjustdown
   1020  1e48							; 160-208: minus 160
   1021  1e48							;add 160 is like minus 96
   1022  1e48							; so minus 64
   1023  1e48		       e9 3f		      sbc	#63	;cc
   1024  1e4a				   ksadjustdown
   1025  1e4a							; 209-255: add 160 
   1026  1e4a		       69 9f		      adc	#159	; cs
   1027  1e4c		       95 90		      sta	player1x,x
   1028  1e4e				   nostorep1
   1029  1e4e		       85 02		      sta	WSYNC
   1030  1e50		       a2 04		      ldx	#4
   1031  1e52		       85 81		      sta	topP1x	; cache top p1
   1032  1e54				   HorPosLoop
   1033  1e54		       b5 80		      lda	player0x,X
   1034  1e56		       38		      sec
   1035  1e57				   DivideLoop
   1036  1e57		       e9 0f		      sbc	#15
   1037  1e59		       b0 fc		      bcs	DivideLoop
      0  1e5b					      sleep	4
      1  1e5b				   .CYCLES    SET	4
      2  1e5b
      3  1e5b				  -	      IF	.CYCLES < 2
      4  1e5b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1e5b				  -	      ERR
      6  1e5b					      ENDIF
      7  1e5b
      8  1e5b				  -	      IF	.CYCLES & 1
      9  1e5b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1e5b				  -	      nop	0
     11  1e5b				  -	      ELSE
     12  1e5b				  -	      bit	VSYNC
     13  1e5b				  -	      ENDIF
     14  1e5b				  -.CYCLES    SET	.CYCLES - 3
     15  1e5b					      ENDIF
     16  1e5b
     17  1e5b					      REPEAT	.CYCLES / 2
     18  1e5b		       ea		      nop
     17  1e5b					      REPEND
     18  1e5c		       ea		      nop
     19  1e5d					      REPEND
   1039  1e5d		       95 10		      sta	RESP0,X
   1040  1e5f		       85 02		      sta	WSYNC
   1041  1e61		       ca		      dex		;2
   1042  1e62		       10 f0		      bpl	HorPosLoop	;4/5
   1043  1e64
   1044  1e64		       a4 80		      ldy	player0x	; 7
   1045  1e66		       b9 90 1d 	      lda	Hmval,y	; 11
   1046  1e69		       85 20		      sta	HMP0	; 14
   1047  1e6b
   1048  1e6b		       a4 81		      ldy	player0x+1
   1049  1e6d		       b9 90 1d 	      lda	Hmval,y
   1050  1e70		       85 21		      sta	HMP0+1	; 24
   1051  1e72
   1052  1e72		       a4 82		      ldy	player0x+2
   1053  1e74		       b9 90 1d 	      lda	Hmval,y
   1054  1e77		       85 22		      sta	HMP0+2	; 34
   1055  1e79
   1056  1e79		       a4 83		      ldy	player0x+3
   1057  1e7b		       b9 90 1d 	      lda	Hmval,y
   1058  1e7e		       85 23		      sta	HMP0+3	; 44
   1059  1e80
   1060  1e80		       a4 84		      ldy	player0x+4
   1061  1e82		       b9 90 1d 	      lda	Hmval,y
   1062  1e85		       85 24		      sta	HMP0+4	; 54
   1063  1e87
   1064  1e87		       85 02		      sta	WSYNC
   1065  1e89		       85 2a		      sta	HMOVE
   1066  1e8b
   1067  1e8b				   myrts
   1068  1e8b		       60		      rts
   1069  1e8c
   1070  1e8c
   1071  1e8c				   pfsetup
   1072  1e8c
   1073  1e8c		       84 cb		      sty	temp1
   1074  1e8e		       85 cc		      sta	temp2
   1075  1e90		       86 cd		      stx	temp3
   1076  1e92		       a2 03		      ldx	#3
   1077  1e94				   pfsetupp
   1078  1e94		       bd 7c 1d 	      lda	dffraclow,x
   1079  1e97		       9d 50 10 	      sta	DF0LOW,x
   1080  1e9a		       bd 84 1d 	      lda	dffrachi,x
   1081  1e9d		       9d 68 10 	      sta	DF0HI,x
   1082  1ea0		       a5 cc		      lda	temp2
   1083  1ea2		       8d 59 10 	      sta	PARAMETER
   1084  1ea5		       a5 cd		      lda	temp3
   1085  1ea7		       8d 59 10 	      sta	PARAMETER
   1086  1eaa		       8e 59 10 	      stx	PARAMETER
   1087  1ead		       8c 59 10 	      sty	PARAMETER
   1088  1eb0		       a9 01		      LDA	#1
   1089  1eb2		       8d 5a 10 	      sta	CALLFUNCTION
   1090  1eb5		       18		      clc
   1091  1eb6		       a5 cc		      lda	temp2
   1092  1eb8		       65 cb		      adc	temp1
   1093  1eba		       85 cc		      sta	temp2
   1094  1ebc		       a5 cd		      lda	temp3
   1095  1ebe		       69 00		      adc	#0
   1096  1ec0		       85 cd		      sta	temp3
   1097  1ec2		       ca		      dex
   1098  1ec3		       10 cf		      bpl	pfsetupp
      0  1ec5					      RETURN
      1  1ec5				  -	      ifnconst	bankswitch
      2  1ec5				  -	      rts
      3  1ec5					      else
      4  1ec5		       4c e0 df 	      jmp	BS_return
      5  1ec8					      endif
   1100  1ec8
   1101  1ec8
   1102  1ec8				   scorekernel
   1103  1ec8				  -	      ifconst	minikernel
   1104  1ec8				  -			;; disable fast fetch, call the minikernel, and re-enable fast fetch
   1105  1ec8				  -	      lda	#255
   1106  1ec8				  -	      sta	FASTFETCH
   1107  1ec8				  -	      jsr	minikernel
   1108  1ec8				  -	      lda	#0
   1109  1ec8				  -	      sta.w	FASTFETCH
   1110  1ec8					      endif
   1111  1ec8		       a6 eb		      ldx	scorecolor
   1112  1eca		       86 06		      stx	COLUP0
   1113  1ecc		       86 07		      stx	COLUP1
   1114  1ece		       a2 00		      ldx	#0
   1115  1ed0		       86 0e		      STx	PF1
   1116  1ed2		       86 0b		      stx	REFP0
   1117  1ed4		       86 0c		      stx	REFP1
   1118  1ed6		       86 1b		      STx	GRP0
   1119  1ed8		       86 1c		      STx	GRP1
   1120  1eda		       86 0f		      STx	PF2
   1121  1edc		       86 2b		      stx	HMCLR
   1122  1ede		       86 1d		      stx	ENAM0
   1123  1ee0		       86 1e		      stx	ENAM1
   1124  1ee2		       86 1f		      stx	ENABL
   1125  1ee4
   1126  1ee4
   1127  1ee4				  -	      ifconst	pfscore
   1128  1ee4				  -	      lda	pfscorecolor
   1129  1ee4				  -	      sta	COLUPF
   1130  1ee4					      endif
   1131  1ee4
   1132  1ee4				  -	      ifconst	noscore
   1133  1ee4				  -	      ldx	#10
   1134  1ee4				  -noscoreloop
   1135  1ee4				  -	      sta	WSYNC
   1136  1ee4				  -	      dex
   1137  1ee4				  -	      bpl	noscoreloop
   1138  1ee4				  -	      rts
   1139  1ee4					      else
   1140  1ee4
   1141  1ee4		       85 2b		      sta	HMCLR
   1142  1ee6		       a2 f0		      ldx	#$f0
   1143  1ee8		       86 20		      stx	HMP0
   1144  1eea
   1145  1eea							; set up fetchers 0-5 to handle score digits
   1146  1eea		       a2 45		      ldx	#<(scoredata)
   1147  1eec		       8e 56 10 	      stx	DF6LOW
   1148  1eef		       a2 0b		      ldx	#(>(scoredata)) & $0F
   1149  1ef1		       8e 6e 10 	      stx	DF6HI
   1150  1ef4		       a2 4d		      ldx	#<(scoredata+8)
   1151  1ef6		       8e 50 10 	      stx	DF0LOW
   1152  1ef9		       a2 0b		      ldx	#(>(scoredata+8)) & $0F
   1153  1efb		       8e 68 10 	      stx	DF0HI
   1154  1efe		       a2 55		      ldx	#<(scoredata+16)
   1155  1f00		       8e 51 10 	      stx	DF1LOW
   1156  1f03							; cycle 0??
   1157  1f03		       a2 0b		      ldx	#(>(scoredata+16)) & $0F
   1158  1f05		       8e 69 10 	      stx	DF1HI
   1159  1f08		       a2 5d		      ldx	#<(scoredata+24)
   1160  1f0a		       8e 52 10 	      stx	DF2LOW
   1161  1f0d		       a2 0b		      ldx	#(>(scoredata+24)) & $0F
   1162  1f0f		       8e 6a 10 	      stx	DF2HI
   1163  1f12
   1164  1f12		       85 02		      sta	WSYNC
   1165  1f14		       a2 00		      ldx	#0
   1166  1f16		       86 1b		      STx	GRP0
   1167  1f18		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1168  1f1a
   1169  1f1a		       a2 65		      ldx	#<(scoredata+32)
   1170  1f1c		       8e 53 10 	      stx	DF3LOW
   1171  1f1f		       a2 0b		      ldx	#(>(scoredata+32)) & $0F
   1172  1f21		       8e 6b 10 	      stx	DF3HI
   1173  1f24		       a2 6d		      ldx	#<(scoredata+40)
   1174  1f26		       8e 54 10 	      stx	DF4LOW
   1175  1f29		       a2 0b		      ldx	#(>(scoredata+40)) & $0F
   1176  1f2b		       8e 6c 10 	      stx	DF4HI
   1177  1f2e
   1178  1f2e		       a0 07		      LDY	#7
   1179  1f30		       a2 03		      LDx	#$03
   1180  1f32		       84 25		      STY	VDELP0
   1181  1f34		       85 10		      STA	RESP0
   1182  1f36		       85 11		      STA	RESP1
   1183  1f38		       84 cb		      sty	temp1
   1184  1f3a
   1185  1f3a		       86 04		      STx	NUSIZ0
   1186  1f3c		       86 05		      STx	NUSIZ1
   1187  1f3e		       86 26		      STx	VDELP1
   1188  1f40		       a2 75		      ldx	#<(scoredata+48)
   1189  1f42		       8e 55 10 	      stx	DF5LOW
   1190  1f45		       a2 0b		      ldx	#(>(scoredata+48)) & $0F
   1191  1f47		       8e 6d 10 	      stx	DF5HI
   1192  1f4a		       8d 2a 00 	      STA.w	HMOVE	; cycle 73 ?
   1193  1f4d				   scoreloop
   1194  1f4d		       a9 0e		      lda	#<DF6DATA	;59
   1195  1f4f		       85 06		      sta	COLUP0	;62
   1196  1f51		       85 07		      sta	COLUP1	;65
   1197  1f53		       a9 09		      lda	#<DF1DATA	;75
   1198  1f55		       85 1b		      sta	GRP0	;2
   1199  1f57		       a9 08		      lda	#<DF0DATA	;4
   1200  1f59		       85 1c		      sta	GRP1	;7
   1201  1f5b		       a9 0b		      lda	#<DF3DATA	;9
   1202  1f5d		       85 1b		      sta	GRP0	;12
   1203  1f5f
   1204  1f5f							; REVENG - rearranged to correct pf write timing and A register overwrite
   1205  1f5f				  -	      ifconst	pfscore
   1206  1f5f				  -	      lda	pfscore1
   1207  1f5f				  -	      sta	PF1
   1208  1f5f					      else
      0  1f5f					      sleep	6
      1  1f5f				   .CYCLES    SET	6
      2  1f5f
      3  1f5f				  -	      IF	.CYCLES < 2
      4  1f5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f5f				  -	      ERR
      6  1f5f					      ENDIF
      7  1f5f
      8  1f5f				  -	      IF	.CYCLES & 1
      9  1f5f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f5f				  -	      nop	0
     11  1f5f				  -	      ELSE
     12  1f5f				  -	      bit	VSYNC
     13  1f5f				  -	      ENDIF
     14  1f5f				  -.CYCLES    SET	.CYCLES - 3
     15  1f5f					      ENDIF
     16  1f5f
     17  1f5f					      REPEAT	.CYCLES / 2
     18  1f5f		       ea		      nop
     17  1f5f					      REPEND
     18  1f60		       ea		      nop
     17  1f60					      REPEND
     18  1f61		       ea		      nop
     19  1f62					      REPEND
   1210  1f62					      endif
      0  1f62					      sleep	5
      1  1f62				   .CYCLES    SET	5
      2  1f62
      3  1f62				  -	      IF	.CYCLES < 2
      4  1f62				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f62				  -	      ERR
      6  1f62					      ENDIF
      7  1f62
      8  1f62					      IF	.CYCLES & 1
      9  1f62					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f62		       04 00		      nop	0
     11  1f64				  -	      ELSE
     12  1f64				  -	      bit	VSYNC
     13  1f64					      ENDIF
     14  1f64				   .CYCLES    SET	.CYCLES - 3
     15  1f64					      ENDIF
     16  1f64
     17  1f64					      REPEAT	.CYCLES / 2
     18  1f64		       ea		      nop
     19  1f65					      REPEND
   1212  1f65		       ae 0a 10 	      ldx	DF2DATA	;16
   1213  1f68		       ac 0d 10 	      ldy	DF5DATA	;20
   1214  1f6b		       a9 0c		      lda	#<DF4DATA	;22 
   1215  1f6d
   1216  1f6d		       86 1c		      stx	GRP1	;40
   1217  1f6f		       84 1b		      sty	GRP0	;43
   1218  1f71		       85 1c		      sta	GRP1	;46
   1219  1f73		       85 1b		      sta	GRP0	;49
   1220  1f75				  -	      ifconst	pfscore
   1221  1f75				  -	      lda	pfscore2
   1222  1f75				  -	      sta	PF1
   1223  1f75					      else
      0  1f75					      sleep	6
      1  1f75				   .CYCLES    SET	6
      2  1f75
      3  1f75				  -	      IF	.CYCLES < 2
      4  1f75				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f75				  -	      ERR
      6  1f75					      ENDIF
      7  1f75
      8  1f75				  -	      IF	.CYCLES & 1
      9  1f75				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f75				  -	      nop	0
     11  1f75				  -	      ELSE
     12  1f75				  -	      bit	VSYNC
     13  1f75				  -	      ENDIF
     14  1f75				  -.CYCLES    SET	.CYCLES - 3
     15  1f75					      ENDIF
     16  1f75
     17  1f75					      REPEAT	.CYCLES / 2
     18  1f75		       ea		      nop
     17  1f75					      REPEND
     18  1f76		       ea		      nop
     17  1f76					      REPEND
     18  1f77		       ea		      nop
     19  1f78					      REPEND
   1225  1f78					      endif
   1226  1f78							; sleep 2 ;57
      0  1f78					      sleep	6
      1  1f78				   .CYCLES    SET	6
      2  1f78
      3  1f78				  -	      IF	.CYCLES < 2
      4  1f78				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f78				  -	      ERR
      6  1f78					      ENDIF
      7  1f78
      8  1f78				  -	      IF	.CYCLES & 1
      9  1f78				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f78				  -	      nop	0
     11  1f78				  -	      ELSE
     12  1f78				  -	      bit	VSYNC
     13  1f78				  -	      ENDIF
     14  1f78				  -.CYCLES    SET	.CYCLES - 3
     15  1f78					      ENDIF
     16  1f78
     17  1f78					      REPEAT	.CYCLES / 2
     18  1f78		       ea		      nop
     17  1f78					      REPEND
     18  1f79		       ea		      nop
     17  1f79					      REPEND
     18  1f7a		       ea		      nop
     19  1f7b					      REPEND
   1228  1f7b		       c6 cb		      dec	temp1	;70
   1229  1f7d		       10 ce		      bpl	scoreloop	;72/73
   1230  1f7f		       a2 00		      LDx	#0
   1231  1f81		       86 0e		      stx	PF1
   1232  1f83		       86 1b		      STx	GRP0
   1233  1f85		       86 1c		      STx	GRP1
   1234  1f87		       86 25		      STx	VDELP0
   1235  1f89		       86 26		      STx	VDELP1	;do we need these
   1236  1f8b		       86 04		      STx	NUSIZ0
   1237  1f8d		       86 05		      STx	NUSIZ1
   1238  1f8f
   1239  1f8f		       60		      rts
   1240  1f90
   1241  1f90
   1242  1f90					      endif		; noscore
   1243  1f90				   game
   1244  1f90				   .L00 		;  set kernel DPC + 
   1245  1f90
   1246  1f90				   .L01 		;  goto Start bank2
   1247  1f90
   1248  1f90		       85 81		      sta	temp7
   1249  1f92		       a9 30		      lda	#>(.Start-1)
   1250  1f94		       48		      pha
   1251  1f95		       a9 9f		      lda	#<(.Start-1)
   1252  1f97		       48		      pha
   1253  1f98		       a5 81		      lda	temp7
   1254  1f9a		       48		      pha
   1255  1f9b		       8a		      txa
   1256  1f9c		       48		      pha
   1257  1f9d		       a2 02		      ldx	#2
   1258  1f9f		       4c ee df 	      jmp	BS_jsr
   1259  1fa2				   .L02 		;  bank 2
   1260  1fa2
   1261  1fa2					      if	ECHO1
      50 bytes of ROM space left in bank 1
   1262  1fa2					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1263  1fa2					      endif
   1264  1fa2		       00 01	   ECHO1      =	1
   1265  1fd4					      ORG	$1FF4-bscode_length
   1266  1fd4					      RORG	$1FF4-bscode_length
   1267  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1268  1fd6					      ifconst	FASTFETCH	; using DPC+
   1269  1fd6		       8e 58 10 	      stx	FASTFETCH
   1270  1fd9					      endif
   1271  1fd9		       9a		      txs
   1272  1fda				  -	      if	bankswitch == 64
   1273  1fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1274  1fda					      else
   1275  1fda		       a9 18		      lda	#>(start-1)
   1276  1fdc					      endif
   1277  1fdc		       48		      pha
   1278  1fdd		       a9 eb		      lda	#<(start-1)
   1279  1fdf		       48		      pha
   1280  1fe0		       48		      pha
   1281  1fe1		       8a		      txa
   1282  1fe2		       48		      pha
   1283  1fe3		       ba		      tsx
   1284  1fe4					      if	bankswitch != 64
   1285  1fe4		       b5 04		      lda	4,x	; get high byte of return address
   1286  1fe6		       2a		      rol
   1287  1fe7		       2a		      rol
   1288  1fe8		       2a		      rol
   1289  1fe9		       2a		      rol
   1290  1fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1291  1fec		       aa		      tax
   1292  1fed		       e8		      inx
   1293  1fee				  -	      else
   1294  1fee				  -	      lda	4,x	; get high byte of return address
   1295  1fee				  -	      tay
   1296  1fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1297  1fee				  -	      sta	4,x
   1298  1fee				  -	      tya
   1299  1fee				  -	      lsr
   1300  1fee				  -	      lsr
   1301  1fee				  -	      lsr
   1302  1fee				  -	      lsr
   1303  1fee				  -	      tax
   1304  1fee				  -	      inx
   1305  1fee					      endif
   1306  1fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1307  1ff1		       68		      pla
   1308  1ff2		       aa		      tax
   1309  1ff3		       68		      pla
   1310  1ff4		       60		      rts
   1311  1ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1312  1ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1313  1ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1314  1ff5					      endif
   1315  1ffc					      ORG	$1FFC
   1316  1ffc					      RORG	$1FFC
   1317  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1318  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1319  2000					      ORG	$2000
   1320  2000					      RORG	$3000
   1321  2000				   HMdiv
   1322  2000		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0
   1323  2007		       01 01 01 01*	      .byte.b	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
   1324  2017		       02 02 02 02*	      .byte.b	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3
   1325  2027		       03 03 03 03*	      .byte.b	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4
   1326  2037		       04 04 04 04*	      .byte.b	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5
   1327  2047		       05 05 05 05*	      .byte.b	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6
   1328  2057		       06 06 06 06*	      .byte.b	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7
   1329  2067		       07 07 07 07*	      .byte.b	7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8
   1330  2077		       08 08 08 08*	      .byte.b	8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9
   1331  2087		       09 09 09 09*	      .byte.b	9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
   1332  2097		       0a 0a 0a 0a*	      .byte.b	10,10,10,10,10,10,0,0,0
   1333  20a0				   .Start
   1334  20a0							; Start
   1335  20a0
   1336  20a0				   .
   1337  20a0							; 
   1338  20a0
   1339  20a0				   .L03 		;  scorecolors:
   1340  20a0
   1341  20a0		       a9 45		      lda	#<scoredata
   1342  20a2		       8d 50 10 	      STA	DF0LOW
   1343  20a5		       a9 0b		      lda	#((>scoredata) & $0f)
   1344  20a7		       8d 68 10 	      STA	DF0HI
   1345  20aa		       a9 0e		      lda	#$0E
   1346  20ac
   1347  20ac		       8d 78 10 	      sta	DF0WRITE
   1348  20af		       a9 0e		      lda	#$0E
   1349  20b1
   1350  20b1		       8d 78 10 	      sta	DF0WRITE
   1351  20b4		       a9 0e		      lda	#$0E
   1352  20b6
   1353  20b6		       8d 78 10 	      sta	DF0WRITE
   1354  20b9		       a9 0e		      lda	#$0E
   1355  20bb
   1356  20bb		       8d 78 10 	      sta	DF0WRITE
   1357  20be		       a9 0c		      lda	#$0C
   1358  20c0
   1359  20c0		       8d 78 10 	      sta	DF0WRITE
   1360  20c3		       a9 0a		      lda	#$0A
   1361  20c5
   1362  20c5		       8d 78 10 	      sta	DF0WRITE
   1363  20c8		       a9 0a		      lda	#$0A
   1364  20ca
   1365  20ca		       8d 78 10 	      sta	DF0WRITE
   1366  20cd		       a9 08		      lda	#$08
   1367  20cf
   1368  20cf		       8d 78 10 	      sta	DF0WRITE
   1369  20d2				   .
   1370  20d2							; 
   1371  20d2
   1372  20d2				   .L04 		;  dim p0x  =	player0x.a
   1373  20d2
   1374  20d2				   .L05 		;  dim p0y  =	player0y.b
   1375  20d2
   1376  20d2				   .L06 		;  dim p1x  =	player1x.c
   1377  20d2
   1378  20d2				   .L07 		;  dim p1y  =	player1y.d
   1379  20d2
   1380  20d2				   .L08 		;  dim p2x  =	player2x.e
   1381  20d2
   1382  20d2				   .L09 		;  dim p2y  =	player2y.f
   1383  20d2
   1384  20d2				   .L010		;  dim p3x  =	player3x.g
   1385  20d2
   1386  20d2				   .L011		;  dim p3y  =	player3y.h
   1387  20d2
   1388  20d2				   .L012		;  dim frame  =  i
   1389  20d2
   1390  20d2				   .L013		;  dim cam  =	j
   1391  20d2
   1392  20d2				   .L014		;  dim prop  =  k
   1393  20d2
   1394  20d2				   .L015		;  dim night  =  l
   1395  20d2
   1396  20d2				   .L016		;  dim time  =  m
   1397  20d2
   1398  20d2				   .L017		;  dim freddy	=  n
   1399  20d2
   1400  20d2				   .L018		;  dim bonnie	=  o
   1401  20d2
   1402  20d2				   .L019		;  dim chica  =  p
   1403  20d2
   1404  20d2				   .L020		;  dim framestyle  =  q
   1405  20d2
   1406  20d2				   .L021		;  dim bmp_48x1_1_color  =  r
   1407  20d2
   1408  20d2				   .
   1409  20d2							; 
   1410  20d2
   1411  20d2				   .L022		;  rem cam: {WestB}{WestA}{EastB}{EastA}{Restrooms}{PirateCove}{DiningHall}{ShowStage} (All off = map)
   1412  20d2
   1413  20d2				   .L023		;  cam  =  %00000011
   1414  20d2
   1415  20d2		       a9 03		      LDA	#%00000011
   1416  20d4		       85 da		      STA	cam
   1417  20d6				   .L024		;  rem animatronic locations align with camera positions, all off = in office, all on = attacking
   1418  20d6
   1419  20d6				   .L025		;  freddy  =  %00000001
   1420  20d6
   1421  20d6		       a9 01		      LDA	#%00000001
   1422  20d8		       85 de		      STA	freddy
   1423  20da				   .L026		;  bonnie  =  %00000001
   1424  20da
   1425  20da		       a9 01		      LDA	#%00000001
   1426  20dc		       85 df		      STA	bonnie
   1427  20de				   .L027		;  chica  =  %00000001
   1428  20de
   1429  20de		       a9 01		      LDA	#%00000001
   1430  20e0		       85 e0		      STA	chica
   1431  20e2				   .L028		;  rem prop: {rightDoor}{leftDoor}{lightOn/Off}{rightOffice}{leftOffice}{centerOffice}{camUp/Down}{Alive/Dead}
   1432  20e2
   1433  20e2				   .L029		;  prop  =  %00000101
   1434  20e2
   1435  20e2		       a9 05		      LDA	#%00000101
   1436  20e4		       85 db		      STA	prop
   1437  20e6				   .L030		;  rem night: {HardMode}{6}{5}{4}{3}{2}{1}{TestMode}
   1438  20e6
   1439  20e6				   .L031		;  night  =  %00000001
   1440  20e6
   1441  20e6		       a9 01		      LDA	#%00000001
   1442  20e8		       85 dc		      STA	night
   1443  20ea				   .L032		;  rem time: 7 hours, 0 to 7 is 12 to 6
   1444  20ea
   1445  20ea				   .L033		;  time  =  0
   1446  20ea
   1447  20ea		       a9 00		      LDA	#0
   1448  20ec		       85 dd		      STA	time
   1449  20ee				   .L034		;  rem framestyle: {}{}{}{}{showsThird}{showsSecond}{showsFirst}{}
   1450  20ee
   1451  20ee				   .
   1452  20ee							; 
   1453  20ee
   1454  20ee				   .L035		;  p3x  =  15	:  p3y	=  15
   1455  20ee
   1456  20ee		       a9 00		      LDA	#0
   1457  20f0		       85 d7		      STA	g
   1458  20f2		       a9 0f		      LDA	#15
   1459  20f4		       85 92		      STA	p3x
   1460  20f6		       a9 00		      LDA	#0
   1461  20f8		       85 d8		      STA	h
   1462  20fa		       a9 0f		      LDA	#15
   1463  20fc		       85 9c		      STA	p3y
   1464  20fe				   .L036		;  frame  =  2
   1465  20fe
   1466  20fe		       a9 02		      LDA	#2
   1467  2100		       85 d9		      STA	frame
   1468  2102				   .
   1469  2102							; 
   1470  2102
   1471  2102				   .titlescreen
   1472  2102							; titlescreen
   1473  2102
   1474  2102				   .L037		;  rem titlescreen call
   1475  2102
   1476  2102				   .L038		;  gosub titledrawscreen bank3
   1477  2102
   1478  2102		       85 81		      sta	temp7
   1479  2104		       a9 31		      lda	#>(ret_point1-1)
   1480  2106		       48		      pha
   1481  2107		       a9 19		      lda	#<(ret_point1-1)
   1482  2109		       48		      pha
   1483  210a		       a9 ff		      lda	#>(.titledrawscreen-1)
   1484  210c		       48		      pha
   1485  210d		       a9 ff		      lda	#<(.titledrawscreen-1)
   1486  210f		       48		      pha
   1487  2110		       a5 81		      lda	temp7
   1488  2112		       48		      pha
   1489  2113		       8a		      txa
   1490  2114		       48		      pha
   1491  2115		       a2 03		      ldx	#3
   1492  2117		       4c ee df 	      jmp	BS_jsr
   1493  211a				   ret_point1
   1494  211a				   .L039		;  bmp_48x1_1_color  =  bmp_48x1_1_color  +  1
   1495  211a
   1496  211a		       e6 e2		      INC	bmp_48x1_1_color
   1497  211c				   .L040		;  if joy0fire  ||  switchreset then goto mainloop
   1498  211c
   1499  211c		       24 0c		      bit	INPT4
   1500  211e		       30 03		      BMI	.skipL040
   1501  2120				   .condpart0
   1502  2120		       4c 2a 31 	      jmp	.condpart1
   1503  2123				   .skipL040
   1504  2123		       a9 01		      lda	#1
   1505  2125		       2c 82 02 	      bit	SWCHB
   1506  2128		       d0 03		      BNE	.skip0OR
   1507  212a				   .condpart1
   1508  212a		       4c 30 31 	      jmp	.mainloop
   1509  212d
   1510  212d				   .skip0OR
   1511  212d				   .L041		;  goto titlescreen
   1512  212d
   1513  212d		       4c 02 31 	      jmp	.titlescreen
   1514  2130
   1515  2130				   .
   1516  2130							; 
   1517  2130
   1518  2130				   .mainloop
   1519  2130							; mainloop
   1520  2130
   1521  2130				   .L042		;  DF0FRACINC	=  64
   1522  2130
   1523  2130		       a9 40		      LDA	#64
   1524  2132		       8d 38 10 	      STA	DF0FRACINC
   1525  2135				   .L043		;  DF1FRACINC	=  64
   1526  2135
   1527  2135		       a9 40		      LDA	#64
   1528  2137		       8d 39 10 	      STA	DF1FRACINC
   1529  213a				   .L044		;  DF2FRACINC	=  64
   1530  213a
   1531  213a		       a9 40		      LDA	#64
   1532  213c		       8d 3a 10 	      STA	DF2FRACINC
   1533  213f				   .L045		;  DF3FRACINC	=  64
   1534  213f
   1535  213f		       a9 40		      LDA	#64
   1536  2141		       8d 3b 10 	      STA	DF3FRACINC
   1537  2144				   .L046		;  DF4FRACINC	=  128
   1538  2144
   1539  2144		       a9 80		      LDA	#128
   1540  2146		       8d 3c 10 	      STA	DF4FRACINC
   1541  2149				   .L047		;  DF6FRACINC	=  128
   1542  2149
   1543  2149		       a9 80		      LDA	#128
   1544  214b		       8d 3e 10 	      STA	DF6FRACINC
   1545  214e				   .
   1546  214e							; 
   1547  214e
   1548  214e				   .L048		;  rem controls
   1549  214e
   1550  214e				   .L049		;  rem switch controls
   1551  214e
   1552  214e				   .L050		;  if switchreset then goto titlescreen
   1553  214e
   1554  214e		       a9 01		      lda	#1
   1555  2150		       2c 82 02 	      bit	SWCHB
   1556  2153		       d0 03		      BNE	.skipL050
   1557  2155				   .condpart2
   1558  2155		       4c 02 31 	      jmp	.titlescreen
   1559  2158
   1560  2158				   .skipL050
   1561  2158				   .L051		;  rem cam controls
   1562  2158
   1563  2158				   .L052		;  prop{1}  =	0
   1564  2158
   1565  2158		       a5 db		      LDA	prop
   1566  215a		       29 fd		      AND	#253
   1567  215c		       85 db		      STA	prop
   1568  215e				   .L053		;  if !prop{2} then goto skipjoy0fire
   1569  215e
   1570  215e		       a5 db		      LDA	prop
   1571  2160		       29 04		      AND	#4
   1572  2162		       d0 03		      BNE	.skipL053
   1573  2164				   .condpart3
   1574  2164		       4c 8a 31 	      jmp	.skipjoy0fire
   1575  2167
   1576  2167				   .skipL053
   1577  2167				   .L054		;  if !joy0fire then cam  =  0 :  goto skipjoy0fire
   1578  2167
   1579  2167		       24 0c		      bit	INPT4
   1580  2169		       10 07		      BPL	.skipL054
   1581  216b				   .condpart4
   1582  216b		       a9 00		      LDA	#0
   1583  216d		       85 da		      STA	cam
   1584  216f		       4c 8a 31 	      jmp	.skipjoy0fire
   1585  2172
   1586  2172				   .skipL054
   1587  2172				   .L055		;  prop{1}  =	1
   1588  2172
   1589  2172		       a5 db		      LDA	prop
   1590  2174		       09 02		      ORA	#2
   1591  2176		       85 db		      STA	prop
   1592  2178				   .L056		;  cam  =  0
   1593  2178
   1594  2178		       a9 00		      LDA	#0
   1595  217a		       85 da		      STA	cam
   1596  217c				   .L057		;  if !joy0up then goto skipcamup
   1597  217c
   1598  217c		       a9 10		      lda	#$10
   1599  217e		       2c 80 02 	      bit	SWCHA
   1600  2181		       f0 03		      BEQ	.skipL057
   1601  2183				   .condpart5
   1602  2183		       4c 8a 31 	      jmp	.skipcamup
   1603  2186
   1604  2186				   .skipL057
   1605  2186				   .L058		;  cam  =  %00000001
   1606  2186
   1607  2186		       a9 01		      LDA	#%00000001
   1608  2188		       85 da		      STA	cam
   1609  218a				   .skipcamup
   1610  218a							; skipcamup
   1611  218a
   1612  218a				   .skipjoy0fire
   1613  218a							; skipjoy0fire
   1614  218a
   1615  218a				   .L059		;  rem room controls
   1616  218a
   1617  218a				   .L060		;  if prop{1} then goto skiproom
   1618  218a
   1619  218a		       a5 db		      LDA	prop
   1620  218c		       29 02		      AND	#2
   1621  218e		       f0 03		      BEQ	.skipL060
   1622  2190				   .condpart6
   1623  2190		       4c 0a 32 	      jmp	.skiproom
   1624  2193
   1625  2193				   .skipL060
   1626  2193				   .
   1627  2193							; 
   1628  2193
   1629  2193				   .L061		;  prop{2}  =	1  :  prop{3}  =  0  :	prop{4}  =  0
   1630  2193
   1631  2193		       a5 db		      LDA	prop
   1632  2195		       09 04		      ORA	#4
   1633  2197		       85 db		      STA	prop
   1634  2199		       a5 db		      LDA	prop
   1635  219b		       29 f7		      AND	#247
   1636  219d		       85 db		      STA	prop
   1637  219f		       a5 db		      LDA	prop
   1638  21a1		       29 ef		      AND	#239
   1639  21a3		       85 db		      STA	prop
   1640  21a5				   .L062		;  if !joy0left then goto skiplookleft
   1641  21a5
   1642  21a5		       2c 80 02 	      bit	SWCHA
   1643  21a8		       50 03		      BVC	.skipL062
   1644  21aa				   .condpart7
   1645  21aa		       4c bf 31 	      jmp	.skiplookleft
   1646  21ad
   1647  21ad				   .skipL062
   1648  21ad				   .L063		;  rem look left to see left door
   1649  21ad
   1650  21ad				   .L064		;  prop{2}  =	0  :  prop{4}  =  0  :	prop{3}  =  1
   1651  21ad
   1652  21ad		       a5 db		      LDA	prop
   1653  21af		       29 fb		      AND	#251
   1654  21b1		       85 db		      STA	prop
   1655  21b3		       a5 db		      LDA	prop
   1656  21b5		       29 ef		      AND	#239
   1657  21b7		       85 db		      STA	prop
   1658  21b9		       a5 db		      LDA	prop
   1659  21bb		       09 08		      ORA	#8
   1660  21bd		       85 db		      STA	prop
   1661  21bf				   .skiplookleft
   1662  21bf							; skiplookleft
   1663  21bf
   1664  21bf				   .
   1665  21bf							; 
   1666  21bf
   1667  21bf				   .L065		;  if !joy0right then goto skiplookright
   1668  21bf
   1669  21bf		       2c 80 02 	      bit	SWCHA
   1670  21c2		       10 03		      BPL	.skipL065
   1671  21c4				   .condpart8
   1672  21c4		       4c d9 31 	      jmp	.skiplookright
   1673  21c7
   1674  21c7				   .skipL065
   1675  21c7				   .L066		;  rem look right to see right door
   1676  21c7
   1677  21c7				   .L067		;  prop{2}  =	0  :  prop{3}  =  0  :	prop{4}  =  1
   1678  21c7
   1679  21c7		       a5 db		      LDA	prop
   1680  21c9		       29 fb		      AND	#251
   1681  21cb		       85 db		      STA	prop
   1682  21cd		       a5 db		      LDA	prop
   1683  21cf		       29 f7		      AND	#247
   1684  21d1		       85 db		      STA	prop
   1685  21d3		       a5 db		      LDA	prop
   1686  21d5		       09 10		      ORA	#16
   1687  21d7		       85 db		      STA	prop
   1688  21d9				   .skiplookright
   1689  21d9							; skiplookright
   1690  21d9
   1691  21d9				   .
   1692  21d9							; 
   1693  21d9
   1694  21d9				   .L068		;  rem door lights
   1695  21d9
   1696  21d9				   .L069		;  prop{5}  =	0  :  prop{6}  =  0
   1697  21d9
   1698  21d9		       a5 db		      LDA	prop
   1699  21db		       29 df		      AND	#223
   1700  21dd		       85 db		      STA	prop
   1701  21df		       a5 db		      LDA	prop
   1702  21e1		       29 bf		      AND	#191
   1703  21e3		       85 db		      STA	prop
   1704  21e5				   .L070		;  if !joy0fire then goto skiplight
   1705  21e5
   1706  21e5		       24 0c		      bit	INPT4
   1707  21e7		       10 03		      BPL	.skipL070
   1708  21e9				   .condpart9
   1709  21e9		       4c 0a 32 	      jmp	.skiplight
   1710  21ec
   1711  21ec				   .skipL070
   1712  21ec				   .L071		;  if prop{2} then goto skiplight
   1713  21ec
   1714  21ec		       a5 db		      LDA	prop
   1715  21ee		       29 04		      AND	#4
   1716  21f0		       f0 03		      BEQ	.skipL071
   1717  21f2				   .condpart10
   1718  21f2		       4c 0a 32 	      jmp	.skiplight
   1719  21f5
   1720  21f5				   .skipL071
   1721  21f5				   .L072		;  if prop{3}	||  prop{4} then prop{5}  =  1
   1722  21f5
   1723  21f5		       a5 db		      LDA	prop
   1724  21f7		       29 08		      AND	#8
   1725  21f9		       f0 03		      BEQ	.skipL072
   1726  21fb				   .condpart11
   1727  21fb		       4c 04 32 	      jmp	.condpart12
   1728  21fe				   .skipL072
   1729  21fe		       a5 db		      LDA	prop
   1730  2200		       29 10		      AND	#16
   1731  2202		       f0 06		      BEQ	.skip1OR
   1732  2204				   .condpart12
   1733  2204		       a5 db		      LDA	prop
   1734  2206		       09 20		      ORA	#32
   1735  2208		       85 db		      STA	prop
   1736  220a				   .skip1OR
   1737  220a				   .skiplight
   1738  220a							; skiplight
   1739  220a
   1740  220a				   .
   1741  220a							; 
   1742  220a
   1743  220a				   .skiproom
   1744  220a							; skiproom
   1745  220a
   1746  220a				   .
   1747  220a							; 
   1748  220a
   1749  220a				   .L073		;  rem draw the frame
   1750  220a
   1751  220a				   .L074		;  goto screens
   1752  220a
   1753  220a		       4c 1c 32 	      jmp	.screens
   1754  220d
   1755  220d				   .screensreturn
   1756  220d							; screensreturn
   1757  220d
   1758  220d				   .
   1759  220d							; 
   1760  220d
   1761  220d				   .L075		;  rem Frame control
   1762  220d
   1763  220d				   .L076		;  frame  =  frame  +	1
   1764  220d
   1765  220d		       e6 d9		      INC	frame
   1766  220f				   .L077		;  if frame  >  3 then frame  =  1
   1767  220f
   1768  220f		       a9 03		      LDA	#3
   1769  2211		       c5 d9		      CMP	frame
   1770  2213		       b0 04		      BCS	.skipL077
   1771  2215				   .condpart13
   1772  2215		       a9 01		      LDA	#1
   1773  2217		       85 d9		      STA	frame
   1774  2219				   .skipL077
   1775  2219				   .L078		;  goto mainloop
   1776  2219
   1777  2219		       4c 30 31 	      jmp	.mainloop
   1778  221c
   1779  221c				   .
   1780  221c							; 
   1781  221c
   1782  221c				   .
   1783  221c							; 
   1784  221c
   1785  221c				   .
   1786  221c							; 
   1787  221c
   1788  221c				   .L079		;  rem ________________________________________________________________SCREENS
   1789  221c
   1790  221c				   .
   1791  221c							; 
   1792  221c
   1793  221c				   .
   1794  221c							; 
   1795  221c
   1796  221c				   .L080		;  rem displays the proper screen
   1797  221c
   1798  221c				   .screens
   1799  221c							; screens
   1800  221c
   1801  221c				   .L081		;  rem clear all players
   1802  221c
   1803  221c				   .L082		;  p0y  =  220  :  p1y  =  220  :  p2y  =  220  :  p3y  =  220
   1804  221c
   1805  221c		       a9 00		      LDA	#0
   1806  221e		       85 d2		      STA	b
   1807  2220		       a9 dc		      LDA	#220
   1808  2222		       85 99		      STA	p0y
   1809  2224		       a9 00		      LDA	#0
   1810  2226		       85 d4		      STA	d
   1811  2228		       a9 dc		      LDA	#220
   1812  222a		       85 9a		      STA	p1y
   1813  222c		       a9 00		      LDA	#0
   1814  222e		       85 d6		      STA	f
   1815  2230		       a9 dc		      LDA	#220
   1816  2232		       85 9b		      STA	p2y
   1817  2234		       a9 00		      LDA	#0
   1818  2236		       85 d8		      STA	h
   1819  2238		       a9 dc		      LDA	#220
   1820  223a		       85 9c		      STA	p3y
   1821  223c				   .
   1822  223c							; 
   1823  223c
   1824  223c				   .L083		;  rem office
   1825  223c
   1826  223c				   .L084		;  if !prop{1}  &&  prop{2} then goto office
   1827  223c
   1828  223c		       a5 db		      LDA	prop
   1829  223e		       29 02		      AND	#2
   1830  2240		       d0 09		      BNE	.skipL084
   1831  2242				   .condpart14
   1832  2242		       a5 db		      LDA	prop
   1833  2244		       29 04		      AND	#4
   1834  2246		       f0 03		      BEQ	.skip14then
   1835  2248				   .condpart15
   1836  2248		       4c c4 32 	      jmp	.office
   1837  224b
   1838  224b				   .skip14then
   1839  224b				   .skipL084
   1840  224b				   .L085		;  if !prop{1}  &&  prop{3} then goto officeleft
   1841  224b
   1842  224b		       a5 db		      LDA	prop
   1843  224d		       29 02		      AND	#2
   1844  224f		       d0 09		      BNE	.skipL085
   1845  2251				   .condpart16
   1846  2251		       a5 db		      LDA	prop
   1847  2253		       29 08		      AND	#8
   1848  2255		       f0 03		      BEQ	.skip16then
   1849  2257				   .condpart17
   1850  2257		       4c 81 34 	      jmp	.officeleft
   1851  225a
   1852  225a				   .skip16then
   1853  225a				   .skipL085
   1854  225a				   .L086		;  if !prop{1}  &&  prop{4} then goto officeright
   1855  225a
   1856  225a		       a5 db		      LDA	prop
   1857  225c		       29 02		      AND	#2
   1858  225e		       d0 09		      BNE	.skipL086
   1859  2260				   .condpart18
   1860  2260		       a5 db		      LDA	prop
   1861  2262		       29 10		      AND	#16
   1862  2264		       f0 03		      BEQ	.skip18then
   1863  2266				   .condpart19
   1864  2266		       4c f8 35 	      jmp	.officeright
   1865  2269
   1866  2269				   .skip18then
   1867  2269				   .skipL086
   1868  2269				   .L087		;  rem monitor
   1869  2269
   1870  2269				   .L088		;  if cam  =  0 then goto map
   1871  2269
   1872  2269		       a5 da		      LDA	cam
   1873  226b		       c9 00		      CMP	#0
   1874  226d		       d0 03		      BNE	.skipL088
   1875  226f				   .condpart20
   1876  226f		       4c 92 37 	      jmp	.map
   1877  2272
   1878  2272				   .skipL088
   1879  2272				   .L089		;  p3y  =  220
   1880  2272
   1881  2272		       a9 00		      LDA	#0
   1882  2274		       85 d8		      STA	h
   1883  2276		       a9 dc		      LDA	#220
   1884  2278		       85 9c		      STA	p3y
   1885  227a				   .L090		;  if frame  >  1 then p3x  =	15  :  p3y  =  15
   1886  227a
   1887  227a		       a9 01		      LDA	#1
   1888  227c		       c5 d9		      CMP	frame
   1889  227e		       b0 10		      BCS	.skipL090
   1890  2280				   .condpart21
   1891  2280		       a9 00		      LDA	#0
   1892  2282		       85 d7		      STA	g
   1893  2284		       a9 0f		      LDA	#15
   1894  2286		       85 92		      STA	p3x
   1895  2288		       a9 00		      LDA	#0
   1896  228a		       85 d8		      STA	h
   1897  228c		       a9 0f		      LDA	#15
   1898  228e		       85 9c		      STA	p3y
   1899  2290				   .skipL090
   1900  2290				   .L091		;  player3:
   1901  2290
   1902  2290		       a9 e6		      lda	#<(playerpointers+4)
   1903  2292		       8d 50 10 	      sta	DF0LOW
   1904  2295		       a9 01		      lda	#(>(playerpointers+4)) & $0F
   1905  2297		       8d 68 10 	      sta	DF0HI
   1906  229a		       a2 a8		      LDX	#<playerL091_3
   1907  229c		       8e 78 10 	      STX	DF0WRITE
   1908  229f		       a9 61		      LDA	#((>playerL091_3) & $0f) | (((>playerL091_3) / 2) & $70)
   1909  22a1		       8d 78 10 	      STA	DF0WRITE
   1910  22a4		       a9 10		      LDA	#16
   1911  22a6		       85 a8		      STA	player3height
   1912  22a8				   .L092		;  player3color:
   1913  22a8
   1914  22a8		       a9 f8		      lda	#<(playerpointers+22)
   1915  22aa		       8d 50 10 	      sta	DF0LOW
   1916  22ad		       a9 01		      lda	#(>(playerpointers+22)) & $0F
   1917  22af		       8d 68 10 	      sta	DF0HI
   1918  22b2		       a2 b8		      LDX	#<playercolorL092_3
   1919  22b4		       8e 78 10 	      STX	DF0WRITE
   1920  22b7		       a9 61		      LDA	#((>playercolorL092_3) & $0f) | (((>playercolorL092_3) / 2) & $70)
   1921  22b9		       8d 78 10 	      STA	DF0WRITE
   1922  22bc				   .L093		;  if cam{0} then goto showstage
   1923  22bc
   1924  22bc		       a5 da		      LDA	cam
   1925  22be		       4a		      LSR
   1926  22bf		       90 03		      BCC	.skipL093
   1927  22c1				   .condpart22
   1928  22c1		       4c fc 37 	      jmp	.showstage
   1929  22c4
   1930  22c4				   .skipL093
   1931  22c4				   .
   1932  22c4							; 
   1933  22c4
   1934  22c4				   .L094		;  rem ________________________________________________________________OFFICE
   1935  22c4
   1936  22c4				   .office
   1937  22c4							; office
   1938  22c4
   1939  22c4				   .L095		;  if frame  =  1 then goto officeframe1
   1940  22c4
   1941  22c4		       a5 d9		      LDA	frame
   1942  22c6		       c9 01		      CMP	#1
   1943  22c8		       d0 03		      BNE	.skipL095
   1944  22ca				   .condpart23
   1945  22ca		       4c e3 32 	      jmp	.officeframe1
   1946  22cd
   1947  22cd				   .skipL095
   1948  22cd				   .L096		;  if frame  =  2 then goto officeframe2
   1949  22cd
   1950  22cd		       a5 d9		      LDA	frame
   1951  22cf		       c9 02		      CMP	#2
   1952  22d1		       d0 03		      BNE	.skipL096
   1953  22d3				   .condpart24
   1954  22d3		       4c b1 33 	      jmp	.officeframe2
   1955  22d6
   1956  22d6				   .skipL096
   1957  22d6				   .L097		;  if frame  =  3 then frame  =  1  :	goto officeframe1
   1958  22d6
   1959  22d6		       a5 d9		      LDA	frame
   1960  22d8		       c9 03		      CMP	#3
   1961  22da		       d0 07		      BNE	.skipL097
   1962  22dc				   .condpart25
   1963  22dc		       a9 01		      LDA	#1
   1964  22de		       85 d9		      STA	frame
   1965  22e0		       4c e3 32 	      jmp	.officeframe1
   1966  22e3
   1967  22e3				   .skipL097
   1968  22e3				   .
   1969  22e3							; 
   1970  22e3
   1971  22e3				   .L098		;  rem ________________________________officeframe1
   1972  22e3
   1973  22e3				   .officeframe1
   1974  22e3							; officeframe1
   1975  22e3
   1976  22e3				   .L099		;  pfcolors:
   1977  22e3
   1978  22e3		       a9 08		      LDA	#<PFCOLS
   1979  22e5		       8d 50 10 	      STA	DF0LOW
   1980  22e8		       a9 0a		      LDA	#(>PFCOLS) & $0F
   1981  22ea		       8d 68 10 	      STA	DF0HI
   1982  22ed		       a9 c8		      LDA	#<playfieldcolorL099
   1983  22ef		       8d 59 10 	      STA	PARAMETER
   1984  22f2		       a9 61		      LDA	#((>playfieldcolorL099) & $0f) | (((>playfieldcolorL099) / 2) & $70)
   1985  22f4		       8d 59 10 	      STA	PARAMETER
   1986  22f7		       a9 00		      LDA	#0
   1987  22f9		       8d 59 10 	      STA	PARAMETER
   1988  22fc		       a9 2c		      LDA	#44
   1989  22fe		       8d 59 10 	      STA	PARAMETER
   1990  2301		       a9 01		      LDA	#1
   1991  2303		       8d 5a 10 	      STA	CALLFUNCTION
   1992  2306				   .L0100		;  bkcolors:
   1993  2306
   1994  2306		       a9 a5		      LDA	#<BKCOLS
   1995  2308		       8d 50 10 	      STA	DF0LOW
   1996  230b		       a9 0b		      LDA	#(>BKCOLS) & $0F
   1997  230d		       8d 68 10 	      STA	DF0HI
   1998  2310		       a9 f4		      LDA	#<backgroundcolorL0100
   1999  2312		       8d 59 10 	      STA	PARAMETER
   2000  2315		       a9 61		      LDA	#((>backgroundcolorL0100) & $0f) | (((>backgroundcolorL0100) / 2) & $70)
   2001  2317		       8d 59 10 	      STA	PARAMETER
   2002  231a		       a9 00		      LDA	#0
   2003  231c		       8d 59 10 	      STA	PARAMETER
   2004  231f		       a9 2c		      LDA	#44
   2005  2321		       8d 59 10 	      STA	PARAMETER
   2006  2324		       a9 01		      LDA	#1
   2007  2326		       8d 5a 10 	      STA	CALLFUNCTION
   2008  2329				   .L0101		;  playfield:
   2009  2329
   2010  2329		       a0 2c		      ldy	#44
   2011  232b		       a9 20		      LDA	#<PF_data1
   2012  232d		       a2 62		      LDX	#((>PF_data1) & $0f) | (((>PF_data1) / 2) & $70)
   2013  232f		       85 81		      sta	temp7
   2014  2331		       a9 33		      lda	#>(ret_point2-1)
   2015  2333		       48		      pha
   2016  2334		       a9 46		      lda	#<(ret_point2-1)
   2017  2336		       48		      pha
   2018  2337		       a9 1e		      lda	#>(pfsetup-1)
   2019  2339		       48		      pha
   2020  233a		       a9 8b		      lda	#<(pfsetup-1)
   2021  233c		       48		      pha
   2022  233d		       a5 81		      lda	temp7
   2023  233f		       48		      pha
   2024  2340		       8a		      txa
   2025  2341		       48		      pha
   2026  2342		       a2 01		      ldx	#1
   2027  2344		       4c ee df 	      jmp	BS_jsr
   2028  2347				   ret_point2
   2029  2347				   .L0102		;  NUSIZ0  =  $05
   2030  2347
   2031  2347		       a9 05		      LDA	#$05
   2032  2349		       85 04		      STA	NUSIZ0
   2033  234b				   .L0103		;  p0x  =  85	:  p0y	=  116	:  p1x	=  116	:  p1y	=  97
   2034  234b
   2035  234b		       a9 00		      LDA	#0
   2036  234d		       85 d1		      STA	a
   2037  234f		       a9 55		      LDA	#85
   2038  2351		       85 80		      STA	p0x
   2039  2353		       a9 00		      LDA	#0
   2040  2355		       85 d2		      STA	b
   2041  2357		       a9 74		      LDA	#116
   2042  2359		       85 99		      STA	p0y
   2043  235b		       a9 00		      LDA	#0
   2044  235d		       85 d3		      STA	c
   2045  235f		       a9 74		      LDA	#116
   2046  2361		       85 90		      STA	p1x
   2047  2363		       a9 00		      LDA	#0
   2048  2365		       85 d4		      STA	d
   2049  2367		       a9 61		      LDA	#97
   2050  2369		       85 9a		      STA	p1y
   2051  236b				   .L0104		;  player0color:
   2052  236b
   2053  236b		       a2 d0		      LDX	#<playercolorL0104_0
   2054  236d		       86 a3		      STX	player0color
   2055  236f		       a9 62		      LDA	#((>playercolorL0104_0) & $0f) | (((>playercolorL0104_0) / 2) & $70)
   2056  2371		       85 a4		      STA	player0color+1
   2057  2373				   .L0105		;  player0:
   2058  2373
   2059  2373		       a2 e4		      LDX	#<playerL0105_0
   2060  2375		       86 bd		      STX	player0pointerlo
   2061  2377		       a9 62		      LDA	#((>playerL0105_0) & $0f) | (((>playerL0105_0) / 2) & $70)
   2062  2379		       85 be		      STA	player0pointerhi
   2063  237b		       a9 10		      LDA	#16
   2064  237d		       85 a5		      STA	player0height
   2065  237f				   .L0106		;  player1color:
   2066  237f
   2067  237f		       a9 f4		      lda	#<(playerpointers+18)
   2068  2381		       8d 50 10 	      sta	DF0LOW
   2069  2384		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   2070  2386		       8d 68 10 	      sta	DF0HI
   2071  2389		       a2 f4		      LDX	#<playercolorL0106_1
   2072  238b		       8e 78 10 	      STX	DF0WRITE
   2073  238e		       a9 62		      LDA	#((>playercolorL0106_1) & $0f) | (((>playercolorL0106_1) / 2) & $70)
   2074  2390		       8d 78 10 	      STA	DF0WRITE
   2075  2393				   .L0107		;  player1:
   2076  2393
   2077  2393		       a9 e2		      lda	#<(playerpointers+0)
   2078  2395		       8d 50 10 	      sta	DF0LOW
   2079  2398		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   2080  239a		       8d 68 10 	      sta	DF0HI
   2081  239d		       a2 ff		      LDX	#<playerL0107_1
   2082  239f		       8e 78 10 	      STX	DF0WRITE
   2083  23a2		       a9 62		      LDA	#((>playerL0107_1) & $0f) | (((>playerL0107_1) / 2) & $70)
   2084  23a4		       8d 78 10 	      STA	DF0WRITE
   2085  23a7		       a9 0b		      LDA	#11
   2086  23a9		       85 a6		      STA	player1height
   2087  23ab				   .L0108		;  gosub draw
   2088  23ab
   2089  23ab		       20 20 3a 	      jsr	.draw
   2090  23ae
   2091  23ae				   .L0109		;  goto screensreturn
   2092  23ae
   2093  23ae		       4c 0d 32 	      jmp	.screensreturn
   2094  23b1
   2095  23b1				   .
   2096  23b1							; 
   2097  23b1
   2098  23b1				   .L0110		;  rem ________________________________officeframe2
   2099  23b1
   2100  23b1				   .officeframe2
   2101  23b1							; officeframe2
   2102  23b1
   2103  23b1				   .L0111		;  pfcolors:
   2104  23b1
   2105  23b1		       a9 08		      LDA	#<PFCOLS
   2106  23b3		       8d 50 10 	      STA	DF0LOW
   2107  23b6		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2108  23b8		       8d 68 10 	      STA	DF0HI
   2109  23bb		       a9 0a		      LDA	#<playfieldcolorL0111
   2110  23bd		       8d 59 10 	      STA	PARAMETER
   2111  23c0		       a9 63		      LDA	#((>playfieldcolorL0111) & $0f) | (((>playfieldcolorL0111) / 2) & $70)
   2112  23c2		       8d 59 10 	      STA	PARAMETER
   2113  23c5		       a9 00		      LDA	#0
   2114  23c7		       8d 59 10 	      STA	PARAMETER
   2115  23ca		       a9 2c		      LDA	#44
   2116  23cc		       8d 59 10 	      STA	PARAMETER
   2117  23cf		       a9 01		      LDA	#1
   2118  23d1		       8d 5a 10 	      STA	CALLFUNCTION
   2119  23d4				   .L0112		;  bkcolors:
   2120  23d4
   2121  23d4		       a9 a5		      LDA	#<BKCOLS
   2122  23d6		       8d 50 10 	      STA	DF0LOW
   2123  23d9		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2124  23db		       8d 68 10 	      STA	DF0HI
   2125  23de		       a9 36		      LDA	#<backgroundcolorL0112
   2126  23e0		       8d 59 10 	      STA	PARAMETER
   2127  23e3		       a9 63		      LDA	#((>backgroundcolorL0112) & $0f) | (((>backgroundcolorL0112) / 2) & $70)
   2128  23e5		       8d 59 10 	      STA	PARAMETER
   2129  23e8		       a9 00		      LDA	#0
   2130  23ea		       8d 59 10 	      STA	PARAMETER
   2131  23ed		       a9 2c		      LDA	#44
   2132  23ef		       8d 59 10 	      STA	PARAMETER
   2133  23f2		       a9 01		      LDA	#1
   2134  23f4		       8d 5a 10 	      STA	CALLFUNCTION
   2135  23f7				   .L0113		;  playfield:
   2136  23f7
   2137  23f7		       a0 2c		      ldy	#44
   2138  23f9		       a9 62		      LDA	#<PF_data2
   2139  23fb		       a2 63		      LDX	#((>PF_data2) & $0f) | (((>PF_data2) / 2) & $70)
   2140  23fd		       85 81		      sta	temp7
   2141  23ff		       a9 34		      lda	#>(ret_point3-1)
   2142  2401		       48		      pha
   2143  2402		       a9 14		      lda	#<(ret_point3-1)
   2144  2404		       48		      pha
   2145  2405		       a9 1e		      lda	#>(pfsetup-1)
   2146  2407		       48		      pha
   2147  2408		       a9 8b		      lda	#<(pfsetup-1)
   2148  240a		       48		      pha
   2149  240b		       a5 81		      lda	temp7
   2150  240d		       48		      pha
   2151  240e		       8a		      txa
   2152  240f		       48		      pha
   2153  2410		       a2 01		      ldx	#1
   2154  2412		       4c ee df 	      jmp	BS_jsr
   2155  2415				   ret_point3
   2156  2415				   .L0114		;  NUSIZ0  =  $05  :  _NUSIZ1	=  $05
   2157  2415
   2158  2415		       a9 05		      LDA	#$05
   2159  2417		       85 04		      STA	NUSIZ0
   2160  2419		       85 af		      STA	_NUSIZ1
   2161  241b				   .L0115		;  p0x  =  85	:  p0y	=  116	:  p1x	=  116	:  p1y	=  97
   2162  241b
   2163  241b		       a9 00		      LDA	#0
   2164  241d		       85 d1		      STA	a
   2165  241f		       a9 55		      LDA	#85
   2166  2421		       85 80		      STA	p0x
   2167  2423		       a9 00		      LDA	#0
   2168  2425		       85 d2		      STA	b
   2169  2427		       a9 74		      LDA	#116
   2170  2429		       85 99		      STA	p0y
   2171  242b		       a9 00		      LDA	#0
   2172  242d		       85 d3		      STA	c
   2173  242f		       a9 74		      LDA	#116
   2174  2431		       85 90		      STA	p1x
   2175  2433		       a9 00		      LDA	#0
   2176  2435		       85 d4		      STA	d
   2177  2437		       a9 61		      LDA	#97
   2178  2439		       85 9a		      STA	p1y
   2179  243b				   .L0116		;  player0color:
   2180  243b
   2181  243b		       a2 12		      LDX	#<playercolorL0116_0
   2182  243d		       86 a3		      STX	player0color
   2183  243f		       a9 64		      LDA	#((>playercolorL0116_0) & $0f) | (((>playercolorL0116_0) / 2) & $70)
   2184  2441		       85 a4		      STA	player0color+1
   2185  2443				   .L0117		;  player0:
   2186  2443
   2187  2443		       a2 26		      LDX	#<playerL0117_0
   2188  2445		       86 bd		      STX	player0pointerlo
   2189  2447		       a9 64		      LDA	#((>playerL0117_0) & $0f) | (((>playerL0117_0) / 2) & $70)
   2190  2449		       85 be		      STA	player0pointerhi
   2191  244b		       a9 10		      LDA	#16
   2192  244d		       85 a5		      STA	player0height
   2193  244f				   .L0118		;  player1color:
   2194  244f
   2195  244f		       a9 f4		      lda	#<(playerpointers+18)
   2196  2451		       8d 50 10 	      sta	DF0LOW
   2197  2454		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   2198  2456		       8d 68 10 	      sta	DF0HI
   2199  2459		       a2 36		      LDX	#<playercolorL0118_1
   2200  245b		       8e 78 10 	      STX	DF0WRITE
   2201  245e		       a9 64		      LDA	#((>playercolorL0118_1) & $0f) | (((>playercolorL0118_1) / 2) & $70)
   2202  2460		       8d 78 10 	      STA	DF0WRITE
   2203  2463				   .L0119		;  player1:
   2204  2463
   2205  2463		       a9 e2		      lda	#<(playerpointers+0)
   2206  2465		       8d 50 10 	      sta	DF0LOW
   2207  2468		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   2208  246a		       8d 68 10 	      sta	DF0HI
   2209  246d		       a2 41		      LDX	#<playerL0119_1
   2210  246f		       8e 78 10 	      STX	DF0WRITE
   2211  2472		       a9 64		      LDA	#((>playerL0119_1) & $0f) | (((>playerL0119_1) / 2) & $70)
   2212  2474		       8d 78 10 	      STA	DF0WRITE
   2213  2477		       a9 0b		      LDA	#11
   2214  2479		       85 a6		      STA	player1height
   2215  247b				   .L0120		;  gosub draw
   2216  247b
   2217  247b		       20 20 3a 	      jsr	.draw
   2218  247e
   2219  247e				   .L0121		;  goto screensreturn
   2220  247e
   2221  247e		       4c 0d 32 	      jmp	.screensreturn
   2222  2481
   2223  2481				   .L0122		;  rem ________________________________________________________________OFFICELEFT
   2224  2481
   2225  2481				   .L0123		;  rem add: alternate frame 2 for door closed and frame 3 for bonnie
   2226  2481
   2227  2481				   .officeleft
   2228  2481							; officeleft
   2229  2481
   2230  2481				   .L0124		;  if frame  =  1 then goto officeleftframe1
   2231  2481
   2232  2481		       a5 d9		      LDA	frame
   2233  2483		       c9 01		      CMP	#1
   2234  2485		       d0 03		      BNE	.skipL0124
   2235  2487				   .condpart26
   2236  2487		       4c b5 34 	      jmp	.officeleftframe1
   2237  248a
   2238  248a				   .skipL0124
   2239  248a				   .L0125		;  if frame  =  2 then goto officeleftframe2
   2240  248a
   2241  248a		       a5 d9		      LDA	frame
   2242  248c		       c9 02		      CMP	#2
   2243  248e		       d0 03		      BNE	.skipL0125
   2244  2490				   .condpart27
   2245  2490		       4c 1f 35 	      jmp	.officeleftframe2
   2246  2493
   2247  2493				   .skipL0125
   2248  2493				   .L0126		;  if frame  =  3  &&	!prop{5} then frame  =	1  :  goto officeleftframe1
   2249  2493
   2250  2493		       a5 d9		      LDA	frame
   2251  2495		       c9 03		      CMP	#3
   2252  2497		       d0 0d		      BNE	.skipL0126
   2253  2499				   .condpart28
   2254  2499		       a5 db		      LDA	prop
   2255  249b		       29 20		      AND	#32
   2256  249d		       d0 07		      BNE	.skip28then
   2257  249f				   .condpart29
   2258  249f		       a9 01		      LDA	#1
   2259  24a1		       85 d9		      STA	frame
   2260  24a3		       4c b5 34 	      jmp	.officeleftframe1
   2261  24a6
   2262  24a6				   .skip28then
   2263  24a6				   .skipL0126
   2264  24a6				   .L0127		;  if frame  =  3  &&	prop{5} then goto officeleftframe3
   2265  24a6
   2266  24a6		       a5 d9		      LDA	frame
   2267  24a8		       c9 03		      CMP	#3
   2268  24aa		       d0 09		      BNE	.skipL0127
   2269  24ac				   .condpart30
   2270  24ac		       a5 db		      LDA	prop
   2271  24ae		       29 20		      AND	#32
   2272  24b0		       f0 03		      BEQ	.skip30then
   2273  24b2				   .condpart31
   2274  24b2		       4c 89 35 	      jmp	.officeleftframe3
   2275  24b5
   2276  24b5				   .skip30then
   2277  24b5				   .skipL0127
   2278  24b5				   .
   2279  24b5							; 
   2280  24b5
   2281  24b5				   .officeleftframe1
   2282  24b5							; officeleftframe1
   2283  24b5
   2284  24b5				   .L0128		;  pfcolors:
   2285  24b5
   2286  24b5		       a9 08		      LDA	#<PFCOLS
   2287  24b7		       8d 50 10 	      STA	DF0LOW
   2288  24ba		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2289  24bc		       8d 68 10 	      STA	DF0HI
   2290  24bf		       a9 4c		      LDA	#<playfieldcolorL0128
   2291  24c1		       8d 59 10 	      STA	PARAMETER
   2292  24c4		       a9 64		      LDA	#((>playfieldcolorL0128) & $0f) | (((>playfieldcolorL0128) / 2) & $70)
   2293  24c6		       8d 59 10 	      STA	PARAMETER
   2294  24c9		       a9 00		      LDA	#0
   2295  24cb		       8d 59 10 	      STA	PARAMETER
   2296  24ce		       a9 2c		      LDA	#44
   2297  24d0		       8d 59 10 	      STA	PARAMETER
   2298  24d3		       a9 01		      LDA	#1
   2299  24d5		       8d 5a 10 	      STA	CALLFUNCTION
   2300  24d8				   .L0129		;  bkcolors:
   2301  24d8
   2302  24d8		       a9 a5		      LDA	#<BKCOLS
   2303  24da		       8d 50 10 	      STA	DF0LOW
   2304  24dd		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2305  24df		       8d 68 10 	      STA	DF0HI
   2306  24e2		       a9 78		      LDA	#<backgroundcolorL0129
   2307  24e4		       8d 59 10 	      STA	PARAMETER
   2308  24e7		       a9 64		      LDA	#((>backgroundcolorL0129) & $0f) | (((>backgroundcolorL0129) / 2) & $70)
   2309  24e9		       8d 59 10 	      STA	PARAMETER
   2310  24ec		       a9 00		      LDA	#0
   2311  24ee		       8d 59 10 	      STA	PARAMETER
   2312  24f1		       a9 2c		      LDA	#44
   2313  24f3		       8d 59 10 	      STA	PARAMETER
   2314  24f6		       a9 01		      LDA	#1
   2315  24f8		       8d 5a 10 	      STA	CALLFUNCTION
   2316  24fb				   .L0130		;  playfield:
   2317  24fb
   2318  24fb		       a0 2c		      ldy	#44
   2319  24fd		       a9 a4		      LDA	#<PF_data3
   2320  24ff		       a2 64		      LDX	#((>PF_data3) & $0f) | (((>PF_data3) / 2) & $70)
   2321  2501		       85 81		      sta	temp7
   2322  2503		       a9 35		      lda	#>(ret_point4-1)
   2323  2505		       48		      pha
   2324  2506		       a9 18		      lda	#<(ret_point4-1)
   2325  2508		       48		      pha
   2326  2509		       a9 1e		      lda	#>(pfsetup-1)
   2327  250b		       48		      pha
   2328  250c		       a9 8b		      lda	#<(pfsetup-1)
   2329  250e		       48		      pha
   2330  250f		       a5 81		      lda	temp7
   2331  2511		       48		      pha
   2332  2512		       8a		      txa
   2333  2513		       48		      pha
   2334  2514		       a2 01		      ldx	#1
   2335  2516		       4c ee df 	      jmp	BS_jsr
   2336  2519				   ret_point4
   2337  2519				   .L0131		;  gosub draw
   2338  2519
   2339  2519		       20 20 3a 	      jsr	.draw
   2340  251c
   2341  251c				   .L0132		;  goto screensreturn
   2342  251c
   2343  251c		       4c 0d 32 	      jmp	.screensreturn
   2344  251f
   2345  251f				   .
   2346  251f							; 
   2347  251f
   2348  251f				   .officeleftframe2
   2349  251f							; officeleftframe2
   2350  251f
   2351  251f				   .L0133		;  pfcolors:
   2352  251f
   2353  251f		       a9 08		      LDA	#<PFCOLS
   2354  2521		       8d 50 10 	      STA	DF0LOW
   2355  2524		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2356  2526		       8d 68 10 	      STA	DF0HI
   2357  2529		       a9 54		      LDA	#<playfieldcolorL0133
   2358  252b		       8d 59 10 	      STA	PARAMETER
   2359  252e		       a9 65		      LDA	#((>playfieldcolorL0133) & $0f) | (((>playfieldcolorL0133) / 2) & $70)
   2360  2530		       8d 59 10 	      STA	PARAMETER
   2361  2533		       a9 00		      LDA	#0
   2362  2535		       8d 59 10 	      STA	PARAMETER
   2363  2538		       a9 2c		      LDA	#44
   2364  253a		       8d 59 10 	      STA	PARAMETER
   2365  253d		       a9 01		      LDA	#1
   2366  253f		       8d 5a 10 	      STA	CALLFUNCTION
   2367  2542				   .L0134		;  bkcolors:
   2368  2542
   2369  2542		       a9 a5		      LDA	#<BKCOLS
   2370  2544		       8d 50 10 	      STA	DF0LOW
   2371  2547		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2372  2549		       8d 68 10 	      STA	DF0HI
   2373  254c		       a9 80		      LDA	#<backgroundcolorL0134
   2374  254e		       8d 59 10 	      STA	PARAMETER
   2375  2551		       a9 65		      LDA	#((>backgroundcolorL0134) & $0f) | (((>backgroundcolorL0134) / 2) & $70)
   2376  2553		       8d 59 10 	      STA	PARAMETER
   2377  2556		       a9 00		      LDA	#0
   2378  2558		       8d 59 10 	      STA	PARAMETER
   2379  255b		       a9 2c		      LDA	#44
   2380  255d		       8d 59 10 	      STA	PARAMETER
   2381  2560		       a9 01		      LDA	#1
   2382  2562		       8d 5a 10 	      STA	CALLFUNCTION
   2383  2565				   .L0135		;  playfield:
   2384  2565
   2385  2565		       a0 2c		      ldy	#44
   2386  2567		       a9 ac		      LDA	#<PF_data4
   2387  2569		       a2 65		      LDX	#((>PF_data4) & $0f) | (((>PF_data4) / 2) & $70)
   2388  256b		       85 81		      sta	temp7
   2389  256d		       a9 35		      lda	#>(ret_point5-1)
   2390  256f		       48		      pha
   2391  2570		       a9 82		      lda	#<(ret_point5-1)
   2392  2572		       48		      pha
   2393  2573		       a9 1e		      lda	#>(pfsetup-1)
   2394  2575		       48		      pha
   2395  2576		       a9 8b		      lda	#<(pfsetup-1)
   2396  2578		       48		      pha
   2397  2579		       a5 81		      lda	temp7
   2398  257b		       48		      pha
   2399  257c		       8a		      txa
   2400  257d		       48		      pha
   2401  257e		       a2 01		      ldx	#1
   2402  2580		       4c ee df 	      jmp	BS_jsr
   2403  2583				   ret_point5
   2404  2583				   .L0136		;  gosub draw
   2405  2583
   2406  2583		       20 20 3a 	      jsr	.draw
   2407  2586
   2408  2586				   .L0137		;  goto screensreturn
   2409  2586
   2410  2586		       4c 0d 32 	      jmp	.screensreturn
   2411  2589
   2412  2589				   .
   2413  2589							; 
   2414  2589
   2415  2589				   .officeleftframe3
   2416  2589							; officeleftframe3
   2417  2589
   2418  2589				   .L0138		;  pfcolors:
   2419  2589
   2420  2589		       a9 08		      LDA	#<PFCOLS
   2421  258b		       8d 50 10 	      STA	DF0LOW
   2422  258e		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2423  2590		       8d 68 10 	      STA	DF0HI
   2424  2593		       a9 5c		      LDA	#<playfieldcolorL0138
   2425  2595		       8d 59 10 	      STA	PARAMETER
   2426  2598		       a9 66		      LDA	#((>playfieldcolorL0138) & $0f) | (((>playfieldcolorL0138) / 2) & $70)
   2427  259a		       8d 59 10 	      STA	PARAMETER
   2428  259d		       a9 00		      LDA	#0
   2429  259f		       8d 59 10 	      STA	PARAMETER
   2430  25a2		       a9 2c		      LDA	#44
   2431  25a4		       8d 59 10 	      STA	PARAMETER
   2432  25a7		       a9 01		      LDA	#1
   2433  25a9		       8d 5a 10 	      STA	CALLFUNCTION
   2434  25ac				   .L0139		;  playfield:
   2435  25ac
   2436  25ac		       a0 2c		      ldy	#44
   2437  25ae		       a9 88		      LDA	#<PF_data5
   2438  25b0		       a2 66		      LDX	#((>PF_data5) & $0f) | (((>PF_data5) / 2) & $70)
   2439  25b2		       85 81		      sta	temp7
   2440  25b4		       a9 35		      lda	#>(ret_point6-1)
   2441  25b6		       48		      pha
   2442  25b7		       a9 c9		      lda	#<(ret_point6-1)
   2443  25b9		       48		      pha
   2444  25ba		       a9 1e		      lda	#>(pfsetup-1)
   2445  25bc		       48		      pha
   2446  25bd		       a9 8b		      lda	#<(pfsetup-1)
   2447  25bf		       48		      pha
   2448  25c0		       a5 81		      lda	temp7
   2449  25c2		       48		      pha
   2450  25c3		       8a		      txa
   2451  25c4		       48		      pha
   2452  25c5		       a2 01		      ldx	#1
   2453  25c7		       4c ee df 	      jmp	BS_jsr
   2454  25ca				   ret_point6
   2455  25ca				   .L0140		;  NUSIZ0  =  $07  :  p0x  =  35  :  p0y  =  76
   2456  25ca
   2457  25ca		       a9 07		      LDA	#$07
   2458  25cc		       85 04		      STA	NUSIZ0
   2459  25ce		       a9 00		      LDA	#0
   2460  25d0		       85 d1		      STA	a
   2461  25d2		       a9 23		      LDA	#35
   2462  25d4		       85 80		      STA	p0x
   2463  25d6		       a9 00		      LDA	#0
   2464  25d8		       85 d2		      STA	b
   2465  25da		       a9 4c		      LDA	#76
   2466  25dc		       85 99		      STA	p0y
   2467  25de				   .L0141		;  player0color:
   2468  25de
   2469  25de		       a2 38		      LDX	#<playercolorL0141_0
   2470  25e0		       86 a3		      STX	player0color
   2471  25e2		       a9 67		      LDA	#((>playercolorL0141_0) & $0f) | (((>playercolorL0141_0) / 2) & $70)
   2472  25e4		       85 a4		      STA	player0color+1
   2473  25e6				   .L0142		;  player0:
   2474  25e6
   2475  25e6		       a2 52		      LDX	#<playerL0142_0
   2476  25e8		       86 bd		      STX	player0pointerlo
   2477  25ea		       a9 67		      LDA	#((>playerL0142_0) & $0f) | (((>playerL0142_0) / 2) & $70)
   2478  25ec		       85 be		      STA	player0pointerhi
   2479  25ee		       a9 1a		      LDA	#26
   2480  25f0		       85 a5		      STA	player0height
   2481  25f2				   .L0143		;  gosub draw
   2482  25f2
   2483  25f2		       20 20 3a 	      jsr	.draw
   2484  25f5
   2485  25f5				   .L0144		;  goto screensreturn
   2486  25f5
   2487  25f5		       4c 0d 32 	      jmp	.screensreturn
   2488  25f8
   2489  25f8				   .
   2490  25f8							; 
   2491  25f8
   2492  25f8				   .L0145		;  rem ________________________________________________________________OFFICERIGHT
   2493  25f8
   2494  25f8				   .officeright
   2495  25f8							; officeright
   2496  25f8
   2497  25f8				   .L0146		;  if frame  =  1 then goto officerightframe1
   2498  25f8
   2499  25f8		       a5 d9		      LDA	frame
   2500  25fa		       c9 01		      CMP	#1
   2501  25fc		       d0 03		      BNE	.skipL0146
   2502  25fe				   .condpart32
   2503  25fe		       4c 2c 36 	      jmp	.officerightframe1
   2504  2601
   2505  2601				   .skipL0146
   2506  2601				   .L0147		;  if frame  =  2 then goto officerightframe2
   2507  2601
   2508  2601		       a5 d9		      LDA	frame
   2509  2603		       c9 02		      CMP	#2
   2510  2605		       d0 03		      BNE	.skipL0147
   2511  2607				   .condpart33
   2512  2607		       4c 96 36 	      jmp	.officerightframe2
   2513  260a
   2514  260a				   .skipL0147
   2515  260a				   .L0148		;  if frame  =  3  &&	!prop{5} then frame  =	1  :  goto officerightframe1
   2516  260a
   2517  260a		       a5 d9		      LDA	frame
   2518  260c		       c9 03		      CMP	#3
   2519  260e		       d0 0d		      BNE	.skipL0148
   2520  2610				   .condpart34
   2521  2610		       a5 db		      LDA	prop
   2522  2612		       29 20		      AND	#32
   2523  2614		       d0 07		      BNE	.skip34then
   2524  2616				   .condpart35
   2525  2616		       a9 01		      LDA	#1
   2526  2618		       85 d9		      STA	frame
   2527  261a		       4c 2c 36 	      jmp	.officerightframe1
   2528  261d
   2529  261d				   .skip34then
   2530  261d				   .skipL0148
   2531  261d				   .L0149		;  if frame  =  3  &&	prop{5} then goto officerightframe3
   2532  261d
   2533  261d		       a5 d9		      LDA	frame
   2534  261f		       c9 03		      CMP	#3
   2535  2621		       d0 09		      BNE	.skipL0149
   2536  2623				   .condpart36
   2537  2623		       a5 db		      LDA	prop
   2538  2625		       29 20		      AND	#32
   2539  2627		       f0 03		      BEQ	.skip36then
   2540  2629				   .condpart37
   2541  2629		       4c 00 37 	      jmp	.officerightframe3
   2542  262c
   2543  262c				   .skip36then
   2544  262c				   .skipL0149
   2545  262c				   .
   2546  262c							; 
   2547  262c
   2548  262c				   .officerightframe1
   2549  262c							; officerightframe1
   2550  262c
   2551  262c				   .L0150		;  pfcolors:
   2552  262c
   2553  262c		       a9 08		      LDA	#<PFCOLS
   2554  262e		       8d 50 10 	      STA	DF0LOW
   2555  2631		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2556  2633		       8d 68 10 	      STA	DF0HI
   2557  2636		       a9 6c		      LDA	#<playfieldcolorL0150
   2558  2638		       8d 59 10 	      STA	PARAMETER
   2559  263b		       a9 67		      LDA	#((>playfieldcolorL0150) & $0f) | (((>playfieldcolorL0150) / 2) & $70)
   2560  263d		       8d 59 10 	      STA	PARAMETER
   2561  2640		       a9 00		      LDA	#0
   2562  2642		       8d 59 10 	      STA	PARAMETER
   2563  2645		       a9 2c		      LDA	#44
   2564  2647		       8d 59 10 	      STA	PARAMETER
   2565  264a		       a9 01		      LDA	#1
   2566  264c		       8d 5a 10 	      STA	CALLFUNCTION
   2567  264f				   .L0151		;  bkcolors:
   2568  264f
   2569  264f		       a9 a5		      LDA	#<BKCOLS
   2570  2651		       8d 50 10 	      STA	DF0LOW
   2571  2654		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2572  2656		       8d 68 10 	      STA	DF0HI
   2573  2659		       a9 98		      LDA	#<backgroundcolorL0151
   2574  265b		       8d 59 10 	      STA	PARAMETER
   2575  265e		       a9 67		      LDA	#((>backgroundcolorL0151) & $0f) | (((>backgroundcolorL0151) / 2) & $70)
   2576  2660		       8d 59 10 	      STA	PARAMETER
   2577  2663		       a9 00		      LDA	#0
   2578  2665		       8d 59 10 	      STA	PARAMETER
   2579  2668		       a9 2c		      LDA	#44
   2580  266a		       8d 59 10 	      STA	PARAMETER
   2581  266d		       a9 01		      LDA	#1
   2582  266f		       8d 5a 10 	      STA	CALLFUNCTION
   2583  2672				   .L0152		;  playfield:
   2584  2672
   2585  2672		       a0 2c		      ldy	#44
   2586  2674		       a9 c4		      LDA	#<PF_data6
   2587  2676		       a2 67		      LDX	#((>PF_data6) & $0f) | (((>PF_data6) / 2) & $70)
   2588  2678		       85 81		      sta	temp7
   2589  267a		       a9 36		      lda	#>(ret_point7-1)
   2590  267c		       48		      pha
   2591  267d		       a9 8f		      lda	#<(ret_point7-1)
   2592  267f		       48		      pha
   2593  2680		       a9 1e		      lda	#>(pfsetup-1)
   2594  2682		       48		      pha
   2595  2683		       a9 8b		      lda	#<(pfsetup-1)
   2596  2685		       48		      pha
   2597  2686		       a5 81		      lda	temp7
   2598  2688		       48		      pha
   2599  2689		       8a		      txa
   2600  268a		       48		      pha
   2601  268b		       a2 01		      ldx	#1
   2602  268d		       4c ee df 	      jmp	BS_jsr
   2603  2690				   ret_point7
   2604  2690				   .L0153		;  gosub draw
   2605  2690
   2606  2690		       20 20 3a 	      jsr	.draw
   2607  2693
   2608  2693				   .L0154		;  goto screensreturn
   2609  2693
   2610  2693		       4c 0d 32 	      jmp	.screensreturn
   2611  2696
   2612  2696				   .
   2613  2696							; 
   2614  2696
   2615  2696				   .officerightframe2
   2616  2696							; officerightframe2
   2617  2696
   2618  2696				   .L0155		;  pfcolors:
   2619  2696
   2620  2696		       a9 08		      LDA	#<PFCOLS
   2621  2698		       8d 50 10 	      STA	DF0LOW
   2622  269b		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2623  269d		       8d 68 10 	      STA	DF0HI
   2624  26a0		       a9 74		      LDA	#<playfieldcolorL0155
   2625  26a2		       8d 59 10 	      STA	PARAMETER
   2626  26a5		       a9 68		      LDA	#((>playfieldcolorL0155) & $0f) | (((>playfieldcolorL0155) / 2) & $70)
   2627  26a7		       8d 59 10 	      STA	PARAMETER
   2628  26aa		       a9 00		      LDA	#0
   2629  26ac		       8d 59 10 	      STA	PARAMETER
   2630  26af		       a9 2c		      LDA	#44
   2631  26b1		       8d 59 10 	      STA	PARAMETER
   2632  26b4		       a9 01		      LDA	#1
   2633  26b6		       8d 5a 10 	      STA	CALLFUNCTION
   2634  26b9				   .L0156		;  bkcolors:
   2635  26b9
   2636  26b9		       a9 a5		      LDA	#<BKCOLS
   2637  26bb		       8d 50 10 	      STA	DF0LOW
   2638  26be		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2639  26c0		       8d 68 10 	      STA	DF0HI
   2640  26c3		       a9 a0		      LDA	#<backgroundcolorL0156
   2641  26c5		       8d 59 10 	      STA	PARAMETER
   2642  26c8		       a9 68		      LDA	#((>backgroundcolorL0156) & $0f) | (((>backgroundcolorL0156) / 2) & $70)
   2643  26ca		       8d 59 10 	      STA	PARAMETER
   2644  26cd		       a9 00		      LDA	#0
   2645  26cf		       8d 59 10 	      STA	PARAMETER
   2646  26d2		       a9 2c		      LDA	#44
   2647  26d4		       8d 59 10 	      STA	PARAMETER
   2648  26d7		       a9 01		      LDA	#1
   2649  26d9		       8d 5a 10 	      STA	CALLFUNCTION
   2650  26dc				   .L0157		;  playfield:
   2651  26dc
   2652  26dc		       a0 2c		      ldy	#44
   2653  26de		       a9 cc		      LDA	#<PF_data7
   2654  26e0		       a2 68		      LDX	#((>PF_data7) & $0f) | (((>PF_data7) / 2) & $70)
   2655  26e2		       85 81		      sta	temp7
   2656  26e4		       a9 36		      lda	#>(ret_point8-1)
   2657  26e6		       48		      pha
   2658  26e7		       a9 f9		      lda	#<(ret_point8-1)
   2659  26e9		       48		      pha
   2660  26ea		       a9 1e		      lda	#>(pfsetup-1)
   2661  26ec		       48		      pha
   2662  26ed		       a9 8b		      lda	#<(pfsetup-1)
   2663  26ef		       48		      pha
   2664  26f0		       a5 81		      lda	temp7
   2665  26f2		       48		      pha
   2666  26f3		       8a		      txa
   2667  26f4		       48		      pha
   2668  26f5		       a2 01		      ldx	#1
   2669  26f7		       4c ee df 	      jmp	BS_jsr
   2670  26fa				   ret_point8
   2671  26fa				   .L0158		;  gosub draw
   2672  26fa
   2673  26fa		       20 20 3a 	      jsr	.draw
   2674  26fd
   2675  26fd				   .L0159		;  goto screensreturn
   2676  26fd
   2677  26fd		       4c 0d 32 	      jmp	.screensreturn
   2678  2700
   2679  2700				   .
   2680  2700							; 
   2681  2700
   2682  2700				   .officerightframe3
   2683  2700							; officerightframe3
   2684  2700
   2685  2700				   .L0160		;  pfcolors:
   2686  2700
   2687  2700		       a9 08		      LDA	#<PFCOLS
   2688  2702		       8d 50 10 	      STA	DF0LOW
   2689  2705		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2690  2707		       8d 68 10 	      STA	DF0HI
   2691  270a		       a9 7c		      LDA	#<playfieldcolorL0160
   2692  270c		       8d 59 10 	      STA	PARAMETER
   2693  270f		       a9 69		      LDA	#((>playfieldcolorL0160) & $0f) | (((>playfieldcolorL0160) / 2) & $70)
   2694  2711		       8d 59 10 	      STA	PARAMETER
   2695  2714		       a9 00		      LDA	#0
   2696  2716		       8d 59 10 	      STA	PARAMETER
   2697  2719		       a9 2c		      LDA	#44
   2698  271b		       8d 59 10 	      STA	PARAMETER
   2699  271e		       a9 01		      LDA	#1
   2700  2720		       8d 5a 10 	      STA	CALLFUNCTION
   2701  2723				   .L0161		;  bkcolors:
   2702  2723
   2703  2723		       a9 a5		      LDA	#<BKCOLS
   2704  2725		       8d 50 10 	      STA	DF0LOW
   2705  2728		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2706  272a		       8d 68 10 	      STA	DF0HI
   2707  272d		       a9 a8		      LDA	#<backgroundcolorL0161
   2708  272f		       8d 59 10 	      STA	PARAMETER
   2709  2732		       a9 69		      LDA	#((>backgroundcolorL0161) & $0f) | (((>backgroundcolorL0161) / 2) & $70)
   2710  2734		       8d 59 10 	      STA	PARAMETER
   2711  2737		       a9 00		      LDA	#0
   2712  2739		       8d 59 10 	      STA	PARAMETER
   2713  273c		       a9 2c		      LDA	#44
   2714  273e		       8d 59 10 	      STA	PARAMETER
   2715  2741		       a9 01		      LDA	#1
   2716  2743		       8d 5a 10 	      STA	CALLFUNCTION
   2717  2746				   .L0162		;  playfield:
   2718  2746
   2719  2746		       a0 2c		      ldy	#44
   2720  2748		       a9 d4		      LDA	#<PF_data8
   2721  274a		       a2 69		      LDX	#((>PF_data8) & $0f) | (((>PF_data8) / 2) & $70)
   2722  274c		       85 81		      sta	temp7
   2723  274e		       a9 37		      lda	#>(ret_point9-1)
   2724  2750		       48		      pha
   2725  2751		       a9 63		      lda	#<(ret_point9-1)
   2726  2753		       48		      pha
   2727  2754		       a9 1e		      lda	#>(pfsetup-1)
   2728  2756		       48		      pha
   2729  2757		       a9 8b		      lda	#<(pfsetup-1)
   2730  2759		       48		      pha
   2731  275a		       a5 81		      lda	temp7
   2732  275c		       48		      pha
   2733  275d		       8a		      txa
   2734  275e		       48		      pha
   2735  275f		       a2 01		      ldx	#1
   2736  2761		       4c ee df 	      jmp	BS_jsr
   2737  2764				   ret_point9
   2738  2764				   .L0163		;  NUSIZ0  =  $07  :  p0x  =  39  :  p0y  =  45
   2739  2764
   2740  2764		       a9 07		      LDA	#$07
   2741  2766		       85 04		      STA	NUSIZ0
   2742  2768		       a9 00		      LDA	#0
   2743  276a		       85 d1		      STA	a
   2744  276c		       a9 27		      LDA	#39
   2745  276e		       85 80		      STA	p0x
   2746  2770		       a9 00		      LDA	#0
   2747  2772		       85 d2		      STA	b
   2748  2774		       a9 2d		      LDA	#45
   2749  2776		       85 99		      STA	p0y
   2750  2778				   .L0164		;  player0color:
   2751  2778
   2752  2778		       a2 84		      LDX	#<playercolorL0164_0
   2753  277a		       86 a3		      STX	player0color
   2754  277c		       a9 6a		      LDA	#((>playercolorL0164_0) & $0f) | (((>playercolorL0164_0) / 2) & $70)
   2755  277e		       85 a4		      STA	player0color+1
   2756  2780				   .L0165		;  player0:
   2757  2780
   2758  2780		       a2 9f		      LDX	#<playerL0165_0
   2759  2782		       86 bd		      STX	player0pointerlo
   2760  2784		       a9 6a		      LDA	#((>playerL0165_0) & $0f) | (((>playerL0165_0) / 2) & $70)
   2761  2786		       85 be		      STA	player0pointerhi
   2762  2788		       a9 1b		      LDA	#27
   2763  278a		       85 a5		      STA	player0height
   2764  278c				   .L0166		;  gosub draw
   2765  278c
   2766  278c		       20 20 3a 	      jsr	.draw
   2767  278f
   2768  278f				   .L0167		;  goto screensreturn
   2769  278f
   2770  278f		       4c 0d 32 	      jmp	.screensreturn
   2771  2792
   2772  2792				   .
   2773  2792							; 
   2774  2792
   2775  2792				   .L0168		;  rem ________________________________________________________________MAP
   2776  2792
   2777  2792				   .map
   2778  2792							; map
   2779  2792
   2780  2792				   .L0169		;  pfcolors:
   2781  2792
   2782  2792		       a9 08		      LDA	#<PFCOLS
   2783  2794		       8d 50 10 	      STA	DF0LOW
   2784  2797		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2785  2799		       8d 68 10 	      STA	DF0HI
   2786  279c		       a9 ba		      LDA	#<playfieldcolorL0169
   2787  279e		       8d 59 10 	      STA	PARAMETER
   2788  27a1		       a9 6a		      LDA	#((>playfieldcolorL0169) & $0f) | (((>playfieldcolorL0169) / 2) & $70)
   2789  27a3		       8d 59 10 	      STA	PARAMETER
   2790  27a6		       a9 00		      LDA	#0
   2791  27a8		       8d 59 10 	      STA	PARAMETER
   2792  27ab		       a9 2c		      LDA	#44
   2793  27ad		       8d 59 10 	      STA	PARAMETER
   2794  27b0		       a9 01		      LDA	#1
   2795  27b2		       8d 5a 10 	      STA	CALLFUNCTION
   2796  27b5				   .L0170		;  bkcolors:
   2797  27b5
   2798  27b5		       a9 a5		      LDA	#<BKCOLS
   2799  27b7		       8d 50 10 	      STA	DF0LOW
   2800  27ba		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2801  27bc		       8d 68 10 	      STA	DF0HI
   2802  27bf		       a9 e6		      LDA	#<backgroundcolorL0170
   2803  27c1		       8d 59 10 	      STA	PARAMETER
   2804  27c4		       a9 6a		      LDA	#((>backgroundcolorL0170) & $0f) | (((>backgroundcolorL0170) / 2) & $70)
   2805  27c6		       8d 59 10 	      STA	PARAMETER
   2806  27c9		       a9 00		      LDA	#0
   2807  27cb		       8d 59 10 	      STA	PARAMETER
   2808  27ce		       a9 2c		      LDA	#44
   2809  27d0		       8d 59 10 	      STA	PARAMETER
   2810  27d3		       a9 01		      LDA	#1
   2811  27d5		       8d 5a 10 	      STA	CALLFUNCTION
   2812  27d8				   .L0171		;  playfield:
   2813  27d8
   2814  27d8		       a0 2c		      ldy	#44
   2815  27da		       a9 12		      LDA	#<PF_data9
   2816  27dc		       a2 6b		      LDX	#((>PF_data9) & $0f) | (((>PF_data9) / 2) & $70)
   2817  27de		       85 81		      sta	temp7
   2818  27e0		       a9 37		      lda	#>(ret_point10-1)
   2819  27e2		       48		      pha
   2820  27e3		       a9 f5		      lda	#<(ret_point10-1)
   2821  27e5		       48		      pha
   2822  27e6		       a9 1e		      lda	#>(pfsetup-1)
   2823  27e8		       48		      pha
   2824  27e9		       a9 8b		      lda	#<(pfsetup-1)
   2825  27eb		       48		      pha
   2826  27ec		       a5 81		      lda	temp7
   2827  27ee		       48		      pha
   2828  27ef		       8a		      txa
   2829  27f0		       48		      pha
   2830  27f1		       a2 01		      ldx	#1
   2831  27f3		       4c ee df 	      jmp	BS_jsr
   2832  27f6				   ret_point10
   2833  27f6				   .L0172		;  gosub draw
   2834  27f6
   2835  27f6		       20 20 3a 	      jsr	.draw
   2836  27f9
   2837  27f9				   .L0173		;  goto screensreturn
   2838  27f9
   2839  27f9		       4c 0d 32 	      jmp	.screensreturn
   2840  27fc
   2841  27fc				   .
   2842  27fc							; 
   2843  27fc
   2844  27fc				   .L0174		;  rem ________________________________________________________________SHOWSTAGE
   2845  27fc
   2846  27fc				   .showstage
   2847  27fc							; showstage
   2848  27fc
   2849  27fc				   .L0175		;  NUSIZ0  =  $05  :  _NUSIZ1	=  $05	:  NUSIZ2  =  $07
   2850  27fc
   2851  27fc		       a9 05		      LDA	#$05
   2852  27fe		       85 04		      STA	NUSIZ0
   2853  2800		       85 af		      STA	_NUSIZ1
   2854  2802		       a9 07		      LDA	#$07
   2855  2804		       85 b0		      STA	NUSIZ2
   2856  2806				   .L0176		;  if frame  =  1 then goto showstageframe1
   2857  2806
   2858  2806		       a5 d9		      LDA	frame
   2859  2808		       c9 01		      CMP	#1
   2860  280a		       d0 03		      BNE	.skipL0176
   2861  280c				   .condpart38
   2862  280c		       4c 21 38 	      jmp	.showstageframe1
   2863  280f
   2864  280f				   .skipL0176
   2865  280f				   .L0177		;  if frame  =  2 then goto showstageframe2
   2866  280f
   2867  280f		       a5 d9		      LDA	frame
   2868  2811		       c9 02		      CMP	#2
   2869  2813		       d0 03		      BNE	.skipL0177
   2870  2815				   .condpart39
   2871  2815		       4c c7 38 	      jmp	.showstageframe2
   2872  2818
   2873  2818				   .skipL0177
   2874  2818				   .L0178		;  if frame  =  3 then goto showstageframe3
   2875  2818
   2876  2818		       a5 d9		      LDA	frame
   2877  281a		       c9 03		      CMP	#3
   2878  281c		       d0 03		      BNE	.skipL0178
   2879  281e				   .condpart40
   2880  281e		       4c 55 39 	      jmp	.showstageframe3
   2881  2821
   2882  2821				   .skipL0178
   2883  2821				   .
   2884  2821							; 
   2885  2821
   2886  2821				   .L0179		;  rem ________________________________showstageframe1
   2887  2821
   2888  2821				   .showstageframe1
   2889  2821							; showstageframe1
   2890  2821
   2891  2821				   .L0180		;  pfcolors:
   2892  2821
   2893  2821		       a9 08		      LDA	#<PFCOLS
   2894  2823		       8d 50 10 	      STA	DF0LOW
   2895  2826		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2896  2828		       8d 68 10 	      STA	DF0HI
   2897  282b		       a9 c2		      LDA	#<playfieldcolorL0180
   2898  282d		       8d 59 10 	      STA	PARAMETER
   2899  2830		       a9 6b		      LDA	#((>playfieldcolorL0180) & $0f) | (((>playfieldcolorL0180) / 2) & $70)
   2900  2832		       8d 59 10 	      STA	PARAMETER
   2901  2835		       a9 00		      LDA	#0
   2902  2837		       8d 59 10 	      STA	PARAMETER
   2903  283a		       a9 2c		      LDA	#44
   2904  283c		       8d 59 10 	      STA	PARAMETER
   2905  283f		       a9 01		      LDA	#1
   2906  2841		       8d 5a 10 	      STA	CALLFUNCTION
   2907  2844				   .L0181		;  bkcolors:
   2908  2844
   2909  2844		       a9 a5		      LDA	#<BKCOLS
   2910  2846		       8d 50 10 	      STA	DF0LOW
   2911  2849		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2912  284b		       8d 68 10 	      STA	DF0HI
   2913  284e		       a9 ee		      LDA	#<backgroundcolorL0181
   2914  2850		       8d 59 10 	      STA	PARAMETER
   2915  2853		       a9 6b		      LDA	#((>backgroundcolorL0181) & $0f) | (((>backgroundcolorL0181) / 2) & $70)
   2916  2855		       8d 59 10 	      STA	PARAMETER
   2917  2858		       a9 00		      LDA	#0
   2918  285a		       8d 59 10 	      STA	PARAMETER
   2919  285d		       a9 2d		      LDA	#45
   2920  285f		       8d 59 10 	      STA	PARAMETER
   2921  2862		       a9 01		      LDA	#1
   2922  2864		       8d 5a 10 	      STA	CALLFUNCTION
   2923  2867				   .L0182		;  playfield:
   2924  2867
   2925  2867		       a0 2c		      ldy	#44
   2926  2869		       a9 1b		      LDA	#<PF_data10
   2927  286b		       a2 6c		      LDX	#((>PF_data10) & $0f) | (((>PF_data10) / 2) & $70)
   2928  286d		       85 81		      sta	temp7
   2929  286f		       a9 38		      lda	#>(ret_point11-1)
   2930  2871		       48		      pha
   2931  2872		       a9 84		      lda	#<(ret_point11-1)
   2932  2874		       48		      pha
   2933  2875		       a9 1e		      lda	#>(pfsetup-1)
   2934  2877		       48		      pha
   2935  2878		       a9 8b		      lda	#<(pfsetup-1)
   2936  287a		       48		      pha
   2937  287b		       a5 81		      lda	temp7
   2938  287d		       48		      pha
   2939  287e		       8a		      txa
   2940  287f		       48		      pha
   2941  2880		       a2 01		      ldx	#1
   2942  2882		       4c ee df 	      jmp	BS_jsr
   2943  2885				   ret_point11
   2944  2885				   .L0183		;  p1x  =  109  :  p1y  =  84
   2945  2885
   2946  2885		       a9 00		      LDA	#0
   2947  2887		       85 d3		      STA	c
   2948  2889		       a9 6d		      LDA	#109
   2949  288b		       85 90		      STA	p1x
   2950  288d		       a9 00		      LDA	#0
   2951  288f		       85 d4		      STA	d
   2952  2891		       a9 54		      LDA	#84
   2953  2893		       85 9a		      STA	p1y
   2954  2895				   .L0184		;  player1color:
   2955  2895
   2956  2895		       a9 f4		      lda	#<(playerpointers+18)
   2957  2897		       8d 50 10 	      sta	DF0LOW
   2958  289a		       a9 01		      lda	#(>(playerpointers+18)) & $0F
   2959  289c		       8d 68 10 	      sta	DF0HI
   2960  289f		       a2 cb		      LDX	#<playercolorL0184_1
   2961  28a1		       8e 78 10 	      STX	DF0WRITE
   2962  28a4		       a9 6c		      LDA	#((>playercolorL0184_1) & $0f) | (((>playercolorL0184_1) / 2) & $70)
   2963  28a6		       8d 78 10 	      STA	DF0WRITE
   2964  28a9				   .L0185		;  player1:
   2965  28a9
   2966  28a9		       a9 e2		      lda	#<(playerpointers+0)
   2967  28ab		       8d 50 10 	      sta	DF0LOW
   2968  28ae		       a9 01		      lda	#(>(playerpointers+0)) & $0F
   2969  28b0		       8d 68 10 	      sta	DF0HI
   2970  28b3		       a2 e2		      LDX	#<playerL0185_1
   2971  28b5		       8e 78 10 	      STX	DF0WRITE
   2972  28b8		       a9 6c		      LDA	#((>playerL0185_1) & $0f) | (((>playerL0185_1) / 2) & $70)
   2973  28ba		       8d 78 10 	      STA	DF0WRITE
   2974  28bd		       a9 17		      LDA	#23
   2975  28bf		       85 a6		      STA	player1height
   2976  28c1				   .L0186		;  gosub draw
   2977  28c1
   2978  28c1		       20 20 3a 	      jsr	.draw
   2979  28c4
   2980  28c4				   .L0187		;  goto screensreturn
   2981  28c4
   2982  28c4		       4c 0d 32 	      jmp	.screensreturn
   2983  28c7
   2984  28c7				   .
   2985  28c7							; 
   2986  28c7
   2987  28c7				   .L0188		;  rem ________________________________showstageframe2
   2988  28c7
   2989  28c7				   .showstageframe2
   2990  28c7							; showstageframe2
   2991  28c7
   2992  28c7				   .L0189		;  pfcolors:
   2993  28c7
   2994  28c7		       a9 08		      LDA	#<PFCOLS
   2995  28c9		       8d 50 10 	      STA	DF0LOW
   2996  28cc		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2997  28ce		       8d 68 10 	      STA	DF0HI
   2998  28d1		       a9 f9		      LDA	#<playfieldcolorL0189
   2999  28d3		       8d 59 10 	      STA	PARAMETER
   3000  28d6		       a9 6c		      LDA	#((>playfieldcolorL0189) & $0f) | (((>playfieldcolorL0189) / 2) & $70)
   3001  28d8		       8d 59 10 	      STA	PARAMETER
   3002  28db		       a9 00		      LDA	#0
   3003  28dd		       8d 59 10 	      STA	PARAMETER
   3004  28e0		       a9 2c		      LDA	#44
   3005  28e2		       8d 59 10 	      STA	PARAMETER
   3006  28e5		       a9 01		      LDA	#1
   3007  28e7		       8d 5a 10 	      STA	CALLFUNCTION
   3008  28ea				   .L0190		;  bkcolors:
   3009  28ea
   3010  28ea		       a9 a5		      LDA	#<BKCOLS
   3011  28ec		       8d 50 10 	      STA	DF0LOW
   3012  28ef		       a9 0b		      LDA	#(>BKCOLS) & $0F
   3013  28f1		       8d 68 10 	      STA	DF0HI
   3014  28f4		       a9 25		      LDA	#<backgroundcolorL0190
   3015  28f6		       8d 59 10 	      STA	PARAMETER
   3016  28f9		       a9 6d		      LDA	#((>backgroundcolorL0190) & $0f) | (((>backgroundcolorL0190) / 2) & $70)
   3017  28fb		       8d 59 10 	      STA	PARAMETER
   3018  28fe		       a9 00		      LDA	#0
   3019  2900		       8d 59 10 	      STA	PARAMETER
   3020  2903		       a9 2c		      LDA	#44
   3021  2905		       8d 59 10 	      STA	PARAMETER
   3022  2908		       a9 01		      LDA	#1
   3023  290a		       8d 5a 10 	      STA	CALLFUNCTION
   3024  290d				   .L0191		;  playfield:
   3025  290d
   3026  290d		       a0 2c		      ldy	#44
   3027  290f		       a9 51		      LDA	#<PF_data11
   3028  2911		       a2 6d		      LDX	#((>PF_data11) & $0f) | (((>PF_data11) / 2) & $70)
   3029  2913		       85 81		      sta	temp7
   3030  2915		       a9 39		      lda	#>(ret_point12-1)
   3031  2917		       48		      pha
   3032  2918		       a9 2a		      lda	#<(ret_point12-1)
   3033  291a		       48		      pha
   3034  291b		       a9 1e		      lda	#>(pfsetup-1)
   3035  291d		       48		      pha
   3036  291e		       a9 8b		      lda	#<(pfsetup-1)
   3037  2920		       48		      pha
   3038  2921		       a5 81		      lda	temp7
   3039  2923		       48		      pha
   3040  2924		       8a		      txa
   3041  2925		       48		      pha
   3042  2926		       a2 01		      ldx	#1
   3043  2928		       4c ee df 	      jmp	BS_jsr
   3044  292b				   ret_point12
   3045  292b				   .L0192		;  p0x  =  71	:  p0y	=  81
   3046  292b
   3047  292b		       a9 00		      LDA	#0
   3048  292d		       85 d1		      STA	a
   3049  292f		       a9 47		      LDA	#71
   3050  2931		       85 80		      STA	p0x
   3051  2933		       a9 00		      LDA	#0
   3052  2935		       85 d2		      STA	b
   3053  2937		       a9 51		      LDA	#81
   3054  2939		       85 99		      STA	p0y
   3055  293b				   .L0193		;  player0color:
   3056  293b
   3057  293b		       a2 01		      LDX	#<playercolorL0193_0
   3058  293d		       86 a3		      STX	player0color
   3059  293f		       a9 6e		      LDA	#((>playercolorL0193_0) & $0f) | (((>playercolorL0193_0) / 2) & $70)
   3060  2941		       85 a4		      STA	player0color+1
   3061  2943				   .L0194		;  player0:
   3062  2943
   3063  2943		       a2 15		      LDX	#<playerL0194_0
   3064  2945		       86 bd		      STX	player0pointerlo
   3065  2947		       a9 6e		      LDA	#((>playerL0194_0) & $0f) | (((>playerL0194_0) / 2) & $70)
   3066  2949		       85 be		      STA	player0pointerhi
   3067  294b		       a9 14		      LDA	#20
   3068  294d		       85 a5		      STA	player0height
   3069  294f				   .L0195		;  gosub draw
   3070  294f
   3071  294f		       20 20 3a 	      jsr	.draw
   3072  2952
   3073  2952				   .L0196		;  goto screensreturn
   3074  2952
   3075  2952		       4c 0d 32 	      jmp	.screensreturn
   3076  2955
   3077  2955				   .
   3078  2955							; 
   3079  2955
   3080  2955				   .L0197		;  rem ________________________________showstageframe3
   3081  2955
   3082  2955				   .showstageframe3
   3083  2955							; showstageframe3
   3084  2955
   3085  2955				   .L0198		;  pfcolors:
   3086  2955
   3087  2955		       a9 08		      LDA	#<PFCOLS
   3088  2957		       8d 50 10 	      STA	DF0LOW
   3089  295a		       a9 0a		      LDA	#(>PFCOLS) & $0F
   3090  295c		       8d 68 10 	      STA	DF0HI
   3091  295f		       a9 29		      LDA	#<playfieldcolorL0198
   3092  2961		       8d 59 10 	      STA	PARAMETER
   3093  2964		       a9 6e		      LDA	#((>playfieldcolorL0198) & $0f) | (((>playfieldcolorL0198) / 2) & $70)
   3094  2966		       8d 59 10 	      STA	PARAMETER
   3095  2969		       a9 00		      LDA	#0
   3096  296b		       8d 59 10 	      STA	PARAMETER
   3097  296e		       a9 2b		      LDA	#43
   3098  2970		       8d 59 10 	      STA	PARAMETER
   3099  2973		       a9 01		      LDA	#1
   3100  2975		       8d 5a 10 	      STA	CALLFUNCTION
   3101  2978				   .L0199		;  bkcolors:
   3102  2978
   3103  2978		       a9 a5		      LDA	#<BKCOLS
   3104  297a		       8d 50 10 	      STA	DF0LOW
   3105  297d		       a9 0b		      LDA	#(>BKCOLS) & $0F
   3106  297f		       8d 68 10 	      STA	DF0HI
   3107  2982		       a9 54		      LDA	#<backgroundcolorL0199
   3108  2984		       8d 59 10 	      STA	PARAMETER
   3109  2987		       a9 6e		      LDA	#((>backgroundcolorL0199) & $0f) | (((>backgroundcolorL0199) / 2) & $70)
   3110  2989		       8d 59 10 	      STA	PARAMETER
   3111  298c		       a9 00		      LDA	#0
   3112  298e		       8d 59 10 	      STA	PARAMETER
   3113  2991		       a9 2d		      LDA	#45
   3114  2993		       8d 59 10 	      STA	PARAMETER
   3115  2996		       a9 01		      LDA	#1
   3116  2998		       8d 5a 10 	      STA	CALLFUNCTION
   3117  299b				   .L0200		;  playfield:
   3118  299b
   3119  299b		       a0 2c		      ldy	#44
   3120  299d		       a9 81		      LDA	#<PF_data12
   3121  299f		       a2 6e		      LDX	#((>PF_data12) & $0f) | (((>PF_data12) / 2) & $70)
   3122  29a1		       85 81		      sta	temp7
   3123  29a3		       a9 39		      lda	#>(ret_point13-1)
   3124  29a5		       48		      pha
   3125  29a6		       a9 b8		      lda	#<(ret_point13-1)
   3126  29a8		       48		      pha
   3127  29a9		       a9 1e		      lda	#>(pfsetup-1)
   3128  29ab		       48		      pha
   3129  29ac		       a9 8b		      lda	#<(pfsetup-1)
   3130  29ae		       48		      pha
   3131  29af		       a5 81		      lda	temp7
   3132  29b1		       48		      pha
   3133  29b2		       8a		      txa
   3134  29b3		       48		      pha
   3135  29b4		       a2 01		      ldx	#1
   3136  29b6		       4c ee df 	      jmp	BS_jsr
   3137  29b9				   ret_point13
   3138  29b9				   .L0201		;  p2x  =  25	:  p2y	=  92
   3139  29b9
   3140  29b9		       a9 00		      LDA	#0
   3141  29bb		       85 d5		      STA	e
   3142  29bd		       a9 19		      LDA	#25
   3143  29bf		       85 91		      STA	p2x
   3144  29c1		       a9 00		      LDA	#0
   3145  29c3		       85 d6		      STA	f
   3146  29c5		       a9 5c		      LDA	#92
   3147  29c7		       85 9b		      STA	p2y
   3148  29c9				   .L0202		;  player2color:
   3149  29c9
   3150  29c9		       a9 f6		      lda	#<(playerpointers+20)
   3151  29cb		       8d 50 10 	      sta	DF0LOW
   3152  29ce		       a9 01		      lda	#(>(playerpointers+20)) & $0F
   3153  29d0		       8d 68 10 	      sta	DF0HI
   3154  29d3		       a2 31		      LDX	#<playercolorL0202_2
   3155  29d5		       8e 78 10 	      STX	DF0WRITE
   3156  29d8		       a9 6f		      LDA	#((>playercolorL0202_2) & $0f) | (((>playercolorL0202_2) / 2) & $70)
   3157  29da		       8d 78 10 	      STA	DF0WRITE
   3158  29dd				   .L0203		;  player2:
   3159  29dd
   3160  29dd		       a9 e4		      lda	#<(playerpointers+2)
   3161  29df		       8d 50 10 	      sta	DF0LOW
   3162  29e2		       a9 01		      lda	#(>(playerpointers+2)) & $0F
   3163  29e4		       8d 68 10 	      sta	DF0HI
   3164  29e7		       a2 50		      LDX	#<playerL0203_2
   3165  29e9		       8e 78 10 	      STX	DF0WRITE
   3166  29ec		       a9 6f		      LDA	#((>playerL0203_2) & $0f) | (((>playerL0203_2) / 2) & $70)
   3167  29ee		       8d 78 10 	      STA	DF0WRITE
   3168  29f1		       a9 1f		      LDA	#31
   3169  29f3		       85 a7		      STA	player2height
   3170  29f5				   .L0204		;  gosub draw
   3171  29f5
   3172  29f5		       20 20 3a 	      jsr	.draw
   3173  29f8
   3174  29f8				   .L0205		;  goto screensreturn
   3175  29f8
   3176  29f8		       4c 0d 32 	      jmp	.screensreturn
   3177  29fb
   3178  29fb				   .L0206		;  rem ________________________________________________________________Cam02
   3179  29fb
   3180  29fb				   .
   3181  29fb							; 
   3182  29fb
   3183  29fb				   .L0207		;  drawscreen
   3184  29fb
   3185  29fb		       85 81		      sta	temp7
   3186  29fd		       a9 3a		      lda	#>(ret_point14-1)
   3187  29ff		       48		      pha
   3188  2a00		       a9 12		      lda	#<(ret_point14-1)
   3189  2a02		       48		      pha
   3190  2a03		       a9 19		      lda	#>(drawscreen-1)
   3191  2a05		       48		      pha
   3192  2a06		       a9 50		      lda	#<(drawscreen-1)
   3193  2a08		       48		      pha
   3194  2a09		       a5 81		      lda	temp7
   3195  2a0b		       48		      pha
   3196  2a0c		       8a		      txa
   3197  2a0d		       48		      pha
   3198  2a0e		       a2 01		      ldx	#1
   3199  2a10		       4c ee df 	      jmp	BS_jsr
   3200  2a13				   ret_point14
   3201  2a13				   .L0208		;  return
   3202  2a13
   3203  2a13		       ba		      tsx
   3204  2a14		       b5 02		      lda	2,x	; check return address
   3205  2a16		       49 3a		      eor	#(>*)	; vs. current PCH
   3206  2a18		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   3207  2a1a		       f0 03		      beq	*+5	; if equal, do normal return
   3208  2a1c		       4c e0 df 	      JMP	BS_return
   3209  2a1f		       60		      RTS
   3210  2a20				   .
   3211  2a20							; 
   3212  2a20
   3213  2a20				   .L0209		;  rem ________________________________________________________________DRAWSCREEN
   3214  2a20
   3215  2a20				   .draw
   3216  2a20							; draw
   3217  2a20
   3218  2a20				   .L0210		;  drawscreen
   3219  2a20
   3220  2a20		       85 81		      sta	temp7
   3221  2a22		       a9 3a		      lda	#>(ret_point15-1)
   3222  2a24		       48		      pha
   3223  2a25		       a9 37		      lda	#<(ret_point15-1)
   3224  2a27		       48		      pha
   3225  2a28		       a9 19		      lda	#>(drawscreen-1)
   3226  2a2a		       48		      pha
   3227  2a2b		       a9 50		      lda	#<(drawscreen-1)
   3228  2a2d		       48		      pha
   3229  2a2e		       a5 81		      lda	temp7
   3230  2a30		       48		      pha
   3231  2a31		       8a		      txa
   3232  2a32		       48		      pha
   3233  2a33		       a2 01		      ldx	#1
   3234  2a35		       4c ee df 	      jmp	BS_jsr
   3235  2a38				   ret_point15
   3236  2a38				   .L0211		;  return
   3237  2a38
   3238  2a38		       ba		      tsx
   3239  2a39		       b5 02		      lda	2,x	; check return address
   3240  2a3b		       49 3a		      eor	#(>*)	; vs. current PCH
   3241  2a3d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   3242  2a3f		       f0 03		      beq	*+5	; if equal, do normal return
   3243  2a41		       4c e0 df 	      JMP	BS_return
   3244  2a44		       60		      RTS
   3245  2a45				   .L0212		;  rem Titlescreen
   3246  2a45
   3247  2a45				   .L0213		;  bank 3
   3248  2a45
   3249  2a45					      if	ECHO2
      1423 bytes of ROM space left in bank 2
   3250  2a45					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   3251  2a45					      endif
   3252  2a45		       00 01	   ECHO2      =	1
   3253  2fd4					      ORG	$2FF4-bscode_length
   3254  2fd4					      RORG	$3FF4-bscode_length
   3255  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   3256  2fd6					      ifconst	FASTFETCH	; using DPC+
   3257  2fd6		       8e 58 10 	      stx	FASTFETCH
   3258  2fd9					      endif
   3259  2fd9		       9a		      txs
   3260  2fda				  -	      if	bankswitch == 64
   3261  2fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3262  2fda					      else
   3263  2fda		       a9 18		      lda	#>(start-1)
   3264  2fdc					      endif
   3265  2fdc		       48		      pha
   3266  2fdd		       a9 eb		      lda	#<(start-1)
   3267  2fdf		       48		      pha
   3268  2fe0		       48		      pha
   3269  2fe1		       8a		      txa
   3270  2fe2		       48		      pha
   3271  2fe3		       ba		      tsx
   3272  2fe4					      if	bankswitch != 64
   3273  2fe4		       b5 04		      lda	4,x	; get high byte of return address
   3274  2fe6		       2a		      rol
   3275  2fe7		       2a		      rol
   3276  2fe8		       2a		      rol
   3277  2fe9		       2a		      rol
   3278  2fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3279  2fec		       aa		      tax
   3280  2fed		       e8		      inx
   3281  2fee				  -	      else
   3282  2fee				  -	      lda	4,x	; get high byte of return address
   3283  2fee				  -	      tay
   3284  2fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3285  2fee				  -	      sta	4,x
   3286  2fee				  -	      tya
   3287  2fee				  -	      lsr
   3288  2fee				  -	      lsr
   3289  2fee				  -	      lsr
   3290  2fee				  -	      lsr
   3291  2fee				  -	      tax
   3292  2fee				  -	      inx
   3293  2fee					      endif
   3294  2fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3295  2ff1		       68		      pla
   3296  2ff2		       aa		      tax
   3297  2ff3		       68		      pla
   3298  2ff4		       60		      rts
   3299  2ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3300  2ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3301  2ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3302  2ff5					      endif
   3303  2ffc					      ORG	$2FFC
   3304  2ffc					      RORG	$3FFC
   3305  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   3306  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   3307  3000					      ORG	$3000
   3308  3000					      RORG	$5000
   3309  3000					      repeat	129
   3310  3000		       00		      .byte.b	0
   3309  3000					      repend
   3310  3001		       00		      .byte.b	0
   3309  3001					      repend
   3310  3002		       00		      .byte.b	0
   3309  3002					      repend
   3310  3003		       00		      .byte.b	0
   3309  3003					      repend
   3310  3004		       00		      .byte.b	0
   3309  3004					      repend
   3310  3005		       00		      .byte.b	0
   3309  3005					      repend
   3310  3006		       00		      .byte.b	0
   3309  3006					      repend
   3310  3007		       00		      .byte.b	0
   3309  3007					      repend
   3310  3008		       00		      .byte.b	0
   3309  3008					      repend
   3310  3009		       00		      .byte.b	0
   3309  3009					      repend
   3310  300a		       00		      .byte.b	0
   3309  300a					      repend
   3310  300b		       00		      .byte.b	0
   3309  300b					      repend
   3310  300c		       00		      .byte.b	0
   3309  300c					      repend
   3310  300d		       00		      .byte.b	0
   3309  300d					      repend
   3310  300e		       00		      .byte.b	0
   3309  300e					      repend
   3310  300f		       00		      .byte.b	0
   3309  300f					      repend
   3310  3010		       00		      .byte.b	0
   3309  3010					      repend
   3310  3011		       00		      .byte.b	0
   3309  3011					      repend
   3310  3012		       00		      .byte.b	0
   3309  3012					      repend
   3310  3013		       00		      .byte.b	0
   3309  3013					      repend
   3310  3014		       00		      .byte.b	0
   3309  3014					      repend
   3310  3015		       00		      .byte.b	0
   3309  3015					      repend
   3310  3016		       00		      .byte.b	0
   3309  3016					      repend
   3310  3017		       00		      .byte.b	0
   3309  3017					      repend
   3310  3018		       00		      .byte.b	0
   3309  3018					      repend
   3310  3019		       00		      .byte.b	0
   3309  3019					      repend
   3310  301a		       00		      .byte.b	0
   3309  301a					      repend
   3310  301b		       00		      .byte.b	0
   3309  301b					      repend
   3310  301c		       00		      .byte.b	0
   3309  301c					      repend
   3310  301d		       00		      .byte.b	0
   3309  301d					      repend
   3310  301e		       00		      .byte.b	0
   3309  301e					      repend
   3310  301f		       00		      .byte.b	0
   3309  301f					      repend
   3310  3020		       00		      .byte.b	0
   3309  3020					      repend
   3310  3021		       00		      .byte.b	0
   3309  3021					      repend
   3310  3022		       00		      .byte.b	0
   3309  3022					      repend
   3310  3023		       00		      .byte.b	0
   3309  3023					      repend
   3310  3024		       00		      .byte.b	0
   3309  3024					      repend
   3310  3025		       00		      .byte.b	0
   3309  3025					      repend
   3310  3026		       00		      .byte.b	0
   3309  3026					      repend
   3310  3027		       00		      .byte.b	0
   3309  3027					      repend
   3310  3028		       00		      .byte.b	0
   3309  3028					      repend
   3310  3029		       00		      .byte.b	0
   3309  3029					      repend
   3310  302a		       00		      .byte.b	0
   3309  302a					      repend
   3310  302b		       00		      .byte.b	0
   3309  302b					      repend
   3310  302c		       00		      .byte.b	0
   3309  302c					      repend
   3310  302d		       00		      .byte.b	0
   3309  302d					      repend
   3310  302e		       00		      .byte.b	0
   3309  302e					      repend
   3310  302f		       00		      .byte.b	0
   3309  302f					      repend
   3310  3030		       00		      .byte.b	0
   3309  3030					      repend
   3310  3031		       00		      .byte.b	0
   3309  3031					      repend
   3310  3032		       00		      .byte.b	0
   3309  3032					      repend
   3310  3033		       00		      .byte.b	0
   3309  3033					      repend
   3310  3034		       00		      .byte.b	0
   3309  3034					      repend
   3310  3035		       00		      .byte.b	0
   3309  3035					      repend
   3310  3036		       00		      .byte.b	0
   3309  3036					      repend
   3310  3037		       00		      .byte.b	0
   3309  3037					      repend
   3310  3038		       00		      .byte.b	0
   3309  3038					      repend
   3310  3039		       00		      .byte.b	0
   3309  3039					      repend
   3310  303a		       00		      .byte.b	0
   3309  303a					      repend
   3310  303b		       00		      .byte.b	0
   3309  303b					      repend
   3310  303c		       00		      .byte.b	0
   3309  303c					      repend
   3310  303d		       00		      .byte.b	0
   3309  303d					      repend
   3310  303e		       00		      .byte.b	0
   3309  303e					      repend
   3310  303f		       00		      .byte.b	0
   3309  303f					      repend
   3310  3040		       00		      .byte.b	0
   3309  3040					      repend
   3310  3041		       00		      .byte.b	0
   3309  3041					      repend
   3310  3042		       00		      .byte.b	0
   3309  3042					      repend
   3310  3043		       00		      .byte.b	0
   3309  3043					      repend
   3310  3044		       00		      .byte.b	0
   3309  3044					      repend
   3310  3045		       00		      .byte.b	0
   3309  3045					      repend
   3310  3046		       00		      .byte.b	0
   3309  3046					      repend
   3310  3047		       00		      .byte.b	0
   3309  3047					      repend
   3310  3048		       00		      .byte.b	0
   3309  3048					      repend
   3310  3049		       00		      .byte.b	0
   3309  3049					      repend
   3310  304a		       00		      .byte.b	0
   3309  304a					      repend
   3310  304b		       00		      .byte.b	0
   3309  304b					      repend
   3310  304c		       00		      .byte.b	0
   3309  304c					      repend
   3310  304d		       00		      .byte.b	0
   3309  304d					      repend
   3310  304e		       00		      .byte.b	0
   3309  304e					      repend
   3310  304f		       00		      .byte.b	0
   3309  304f					      repend
   3310  3050		       00		      .byte.b	0
   3309  3050					      repend
   3310  3051		       00		      .byte.b	0
   3309  3051					      repend
   3310  3052		       00		      .byte.b	0
   3309  3052					      repend
   3310  3053		       00		      .byte.b	0
   3309  3053					      repend
   3310  3054		       00		      .byte.b	0
   3309  3054					      repend
   3310  3055		       00		      .byte.b	0
   3309  3055					      repend
   3310  3056		       00		      .byte.b	0
   3309  3056					      repend
   3310  3057		       00		      .byte.b	0
   3309  3057					      repend
   3310  3058		       00		      .byte.b	0
   3309  3058					      repend
   3310  3059		       00		      .byte.b	0
   3309  3059					      repend
   3310  305a		       00		      .byte.b	0
   3309  305a					      repend
   3310  305b		       00		      .byte.b	0
   3309  305b					      repend
   3310  305c		       00		      .byte.b	0
   3309  305c					      repend
   3310  305d		       00		      .byte.b	0
   3309  305d					      repend
   3310  305e		       00		      .byte.b	0
   3309  305e					      repend
   3310  305f		       00		      .byte.b	0
   3309  305f					      repend
   3310  3060		       00		      .byte.b	0
   3309  3060					      repend
   3310  3061		       00		      .byte.b	0
   3309  3061					      repend
   3310  3062		       00		      .byte.b	0
   3309  3062					      repend
   3310  3063		       00		      .byte.b	0
   3309  3063					      repend
   3310  3064		       00		      .byte.b	0
   3309  3064					      repend
   3310  3065		       00		      .byte.b	0
   3309  3065					      repend
   3310  3066		       00		      .byte.b	0
   3309  3066					      repend
   3310  3067		       00		      .byte.b	0
   3309  3067					      repend
   3310  3068		       00		      .byte.b	0
   3309  3068					      repend
   3310  3069		       00		      .byte.b	0
   3309  3069					      repend
   3310  306a		       00		      .byte.b	0
   3309  306a					      repend
   3310  306b		       00		      .byte.b	0
   3309  306b					      repend
   3310  306c		       00		      .byte.b	0
   3309  306c					      repend
   3310  306d		       00		      .byte.b	0
   3309  306d					      repend
   3310  306e		       00		      .byte.b	0
   3309  306e					      repend
   3310  306f		       00		      .byte.b	0
   3309  306f					      repend
   3310  3070		       00		      .byte.b	0
   3309  3070					      repend
   3310  3071		       00		      .byte.b	0
   3309  3071					      repend
   3310  3072		       00		      .byte.b	0
   3309  3072					      repend
   3310  3073		       00		      .byte.b	0
   3309  3073					      repend
   3310  3074		       00		      .byte.b	0
   3309  3074					      repend
   3310  3075		       00		      .byte.b	0
   3309  3075					      repend
   3310  3076		       00		      .byte.b	0
   3309  3076					      repend
   3310  3077		       00		      .byte.b	0
   3309  3077					      repend
   3310  3078		       00		      .byte.b	0
   3309  3078					      repend
   3310  3079		       00		      .byte.b	0
   3309  3079					      repend
   3310  307a		       00		      .byte.b	0
   3309  307a					      repend
   3310  307b		       00		      .byte.b	0
   3309  307b					      repend
   3310  307c		       00		      .byte.b	0
   3309  307c					      repend
   3310  307d		       00		      .byte.b	0
   3309  307d					      repend
   3310  307e		       00		      .byte.b	0
   3309  307e					      repend
   3310  307f		       00		      .byte.b	0
   3309  307f					      repend
   3310  3080		       00		      .byte.b	0
   3311  3081					      repend
   3312  3081				   .L0214		;  temp1  =  temp1
   3313  3081
   3314  3081		       a5 cb		      LDA	temp1
   3315  3083		       85 cb		      STA	temp1
   3316  3085				   .L0215		;  asm
   3317  3085
   3318  3085					      include	"titlescreen/asm/titlescreen.asm"
   3319  3085
      0  3085					      return
      1  3085				  -	      ifnconst	bankswitch
      2  3085				  -	      rts
      3  3085					      else
      4  3085		       4c e0 df 	      jmp	BS_return
      5  3088					      endif
   3321  3088
   3322  3088					      if	ECHO3
      3916 bytes of ROM space left in bank 3
   3323  3088					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   3324  3088					      endif
   3325  3088		       00 01	   ECHO3      =	1
   3326  3fd4					      ORG	$3FF4-bscode_length
   3327  3fd4					      RORG	$5FF4-bscode_length
   3328  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   3329  3fd6					      ifconst	FASTFETCH	; using DPC+
   3330  3fd6		       8e 58 10 	      stx	FASTFETCH
   3331  3fd9					      endif
   3332  3fd9		       9a		      txs
   3333  3fda				  -	      if	bankswitch == 64
   3334  3fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3335  3fda					      else
   3336  3fda		       a9 18		      lda	#>(start-1)
   3337  3fdc					      endif
   3338  3fdc		       48		      pha
   3339  3fdd		       a9 eb		      lda	#<(start-1)
   3340  3fdf		       48		      pha
   3341  3fe0		       48		      pha
   3342  3fe1		       8a		      txa
   3343  3fe2		       48		      pha
   3344  3fe3		       ba		      tsx
   3345  3fe4					      if	bankswitch != 64
   3346  3fe4		       b5 04		      lda	4,x	; get high byte of return address
   3347  3fe6		       2a		      rol
   3348  3fe7		       2a		      rol
   3349  3fe8		       2a		      rol
   3350  3fe9		       2a		      rol
   3351  3fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3352  3fec		       aa		      tax
   3353  3fed		       e8		      inx
   3354  3fee				  -	      else
   3355  3fee				  -	      lda	4,x	; get high byte of return address
   3356  3fee				  -	      tay
   3357  3fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3358  3fee				  -	      sta	4,x
   3359  3fee				  -	      tya
   3360  3fee				  -	      lsr
   3361  3fee				  -	      lsr
   3362  3fee				  -	      lsr
   3363  3fee				  -	      lsr
   3364  3fee				  -	      tax
   3365  3fee				  -	      inx
   3366  3fee					      endif
   3367  3fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3368  3ff1		       68		      pla
   3369  3ff2		       aa		      tax
   3370  3ff3		       68		      pla
   3371  3ff4		       60		      rts
   3372  3ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3373  3ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3374  3ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3375  3ff5					      endif
   3376  3ffc					      ORG	$3FFC
   3377  3ffc					      RORG	$5FFC
   3378  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   3379  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   3380  4000					      ORG	$4000
   3381  4000					      RORG	$7000
   3382  4000					      repeat	129
   3383  4000		       00		      .byte.b	0
   3382  4000					      repend
   3383  4001		       00		      .byte.b	0
   3382  4001					      repend
   3383  4002		       00		      .byte.b	0
   3382  4002					      repend
   3383  4003		       00		      .byte.b	0
   3382  4003					      repend
   3383  4004		       00		      .byte.b	0
   3382  4004					      repend
   3383  4005		       00		      .byte.b	0
   3382  4005					      repend
   3383  4006		       00		      .byte.b	0
   3382  4006					      repend
   3383  4007		       00		      .byte.b	0
   3382  4007					      repend
   3383  4008		       00		      .byte.b	0
   3382  4008					      repend
   3383  4009		       00		      .byte.b	0
   3382  4009					      repend
   3383  400a		       00		      .byte.b	0
   3382  400a					      repend
   3383  400b		       00		      .byte.b	0
   3382  400b					      repend
   3383  400c		       00		      .byte.b	0
   3382  400c					      repend
   3383  400d		       00		      .byte.b	0
   3382  400d					      repend
   3383  400e		       00		      .byte.b	0
   3382  400e					      repend
   3383  400f		       00		      .byte.b	0
   3382  400f					      repend
   3383  4010		       00		      .byte.b	0
   3382  4010					      repend
   3383  4011		       00		      .byte.b	0
   3382  4011					      repend
   3383  4012		       00		      .byte.b	0
   3382  4012					      repend
   3383  4013		       00		      .byte.b	0
   3382  4013					      repend
   3383  4014		       00		      .byte.b	0
   3382  4014					      repend
   3383  4015		       00		      .byte.b	0
   3382  4015					      repend
   3383  4016		       00		      .byte.b	0
   3382  4016					      repend
   3383  4017		       00		      .byte.b	0
   3382  4017					      repend
   3383  4018		       00		      .byte.b	0
   3382  4018					      repend
   3383  4019		       00		      .byte.b	0
   3382  4019					      repend
   3383  401a		       00		      .byte.b	0
   3382  401a					      repend
   3383  401b		       00		      .byte.b	0
   3382  401b					      repend
   3383  401c		       00		      .byte.b	0
   3382  401c					      repend
   3383  401d		       00		      .byte.b	0
   3382  401d					      repend
   3383  401e		       00		      .byte.b	0
   3382  401e					      repend
   3383  401f		       00		      .byte.b	0
   3382  401f					      repend
   3383  4020		       00		      .byte.b	0
   3382  4020					      repend
   3383  4021		       00		      .byte.b	0
   3382  4021					      repend
   3383  4022		       00		      .byte.b	0
   3382  4022					      repend
   3383  4023		       00		      .byte.b	0
   3382  4023					      repend
   3383  4024		       00		      .byte.b	0
   3382  4024					      repend
   3383  4025		       00		      .byte.b	0
   3382  4025					      repend
   3383  4026		       00		      .byte.b	0
   3382  4026					      repend
   3383  4027		       00		      .byte.b	0
   3382  4027					      repend
   3383  4028		       00		      .byte.b	0
   3382  4028					      repend
   3383  4029		       00		      .byte.b	0
   3382  4029					      repend
   3383  402a		       00		      .byte.b	0
   3382  402a					      repend
   3383  402b		       00		      .byte.b	0
   3382  402b					      repend
   3383  402c		       00		      .byte.b	0
   3382  402c					      repend
   3383  402d		       00		      .byte.b	0
   3382  402d					      repend
   3383  402e		       00		      .byte.b	0
   3382  402e					      repend
   3383  402f		       00		      .byte.b	0
   3382  402f					      repend
   3383  4030		       00		      .byte.b	0
   3382  4030					      repend
   3383  4031		       00		      .byte.b	0
   3382  4031					      repend
   3383  4032		       00		      .byte.b	0
   3382  4032					      repend
   3383  4033		       00		      .byte.b	0
   3382  4033					      repend
   3383  4034		       00		      .byte.b	0
   3382  4034					      repend
   3383  4035		       00		      .byte.b	0
   3382  4035					      repend
   3383  4036		       00		      .byte.b	0
   3382  4036					      repend
   3383  4037		       00		      .byte.b	0
   3382  4037					      repend
   3383  4038		       00		      .byte.b	0
   3382  4038					      repend
   3383  4039		       00		      .byte.b	0
   3382  4039					      repend
   3383  403a		       00		      .byte.b	0
   3382  403a					      repend
   3383  403b		       00		      .byte.b	0
   3382  403b					      repend
   3383  403c		       00		      .byte.b	0
   3382  403c					      repend
   3383  403d		       00		      .byte.b	0
   3382  403d					      repend
   3383  403e		       00		      .byte.b	0
   3382  403e					      repend
   3383  403f		       00		      .byte.b	0
   3382  403f					      repend
   3383  4040		       00		      .byte.b	0
   3382  4040					      repend
   3383  4041		       00		      .byte.b	0
   3382  4041					      repend
   3383  4042		       00		      .byte.b	0
   3382  4042					      repend
   3383  4043		       00		      .byte.b	0
   3382  4043					      repend
   3383  4044		       00		      .byte.b	0
   3382  4044					      repend
   3383  4045		       00		      .byte.b	0
   3382  4045					      repend
   3383  4046		       00		      .byte.b	0
   3382  4046					      repend
   3383  4047		       00		      .byte.b	0
   3382  4047					      repend
   3383  4048		       00		      .byte.b	0
   3382  4048					      repend
   3383  4049		       00		      .byte.b	0
   3382  4049					      repend
   3383  404a		       00		      .byte.b	0
   3382  404a					      repend
   3383  404b		       00		      .byte.b	0
   3382  404b					      repend
   3383  404c		       00		      .byte.b	0
   3382  404c					      repend
   3383  404d		       00		      .byte.b	0
   3382  404d					      repend
   3383  404e		       00		      .byte.b	0
   3382  404e					      repend
   3383  404f		       00		      .byte.b	0
   3382  404f					      repend
   3383  4050		       00		      .byte.b	0
   3382  4050					      repend
   3383  4051		       00		      .byte.b	0
   3382  4051					      repend
   3383  4052		       00		      .byte.b	0
   3382  4052					      repend
   3383  4053		       00		      .byte.b	0
   3382  4053					      repend
   3383  4054		       00		      .byte.b	0
   3382  4054					      repend
   3383  4055		       00		      .byte.b	0
   3382  4055					      repend
   3383  4056		       00		      .byte.b	0
   3382  4056					      repend
   3383  4057		       00		      .byte.b	0
   3382  4057					      repend
   3383  4058		       00		      .byte.b	0
   3382  4058					      repend
   3383  4059		       00		      .byte.b	0
   3382  4059					      repend
   3383  405a		       00		      .byte.b	0
   3382  405a					      repend
   3383  405b		       00		      .byte.b	0
   3382  405b					      repend
   3383  405c		       00		      .byte.b	0
   3382  405c					      repend
   3383  405d		       00		      .byte.b	0
   3382  405d					      repend
   3383  405e		       00		      .byte.b	0
   3382  405e					      repend
   3383  405f		       00		      .byte.b	0
   3382  405f					      repend
   3383  4060		       00		      .byte.b	0
   3382  4060					      repend
   3383  4061		       00		      .byte.b	0
   3382  4061					      repend
   3383  4062		       00		      .byte.b	0
   3382  4062					      repend
   3383  4063		       00		      .byte.b	0
   3382  4063					      repend
   3383  4064		       00		      .byte.b	0
   3382  4064					      repend
   3383  4065		       00		      .byte.b	0
   3382  4065					      repend
   3383  4066		       00		      .byte.b	0
   3382  4066					      repend
   3383  4067		       00		      .byte.b	0
   3382  4067					      repend
   3383  4068		       00		      .byte.b	0
   3382  4068					      repend
   3383  4069		       00		      .byte.b	0
   3382  4069					      repend
   3383  406a		       00		      .byte.b	0
   3382  406a					      repend
   3383  406b		       00		      .byte.b	0
   3382  406b					      repend
   3383  406c		       00		      .byte.b	0
   3382  406c					      repend
   3383  406d		       00		      .byte.b	0
   3382  406d					      repend
   3383  406e		       00		      .byte.b	0
   3382  406e					      repend
   3383  406f		       00		      .byte.b	0
   3382  406f					      repend
   3383  4070		       00		      .byte.b	0
   3382  4070					      repend
   3383  4071		       00		      .byte.b	0
   3382  4071					      repend
   3383  4072		       00		      .byte.b	0
   3382  4072					      repend
   3383  4073		       00		      .byte.b	0
   3382  4073					      repend
   3383  4074		       00		      .byte.b	0
   3382  4074					      repend
   3383  4075		       00		      .byte.b	0
   3382  4075					      repend
   3383  4076		       00		      .byte.b	0
   3382  4076					      repend
   3383  4077		       00		      .byte.b	0
   3382  4077					      repend
   3383  4078		       00		      .byte.b	0
   3382  4078					      repend
   3383  4079		       00		      .byte.b	0
   3382  4079					      repend
   3383  407a		       00		      .byte.b	0
   3382  407a					      repend
   3383  407b		       00		      .byte.b	0
   3382  407b					      repend
   3383  407c		       00		      .byte.b	0
   3382  407c					      repend
   3383  407d		       00		      .byte.b	0
   3382  407d					      repend
   3383  407e		       00		      .byte.b	0
   3382  407e					      repend
   3383  407f		       00		      .byte.b	0
   3382  407f					      repend
   3383  4080		       00		      .byte.b	0
   3384  4081					      repend
   3385  4081					      if	ECHO4
      3923 bytes of ROM space left in bank 4
   3386  4081					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   3387  4081					      endif
   3388  4081		       00 01	   ECHO4      =	1
   3389  4fd4					      ORG	$4FF4-bscode_length
   3390  4fd4					      RORG	$7FF4-bscode_length
   3391  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   3392  4fd6					      ifconst	FASTFETCH	; using DPC+
   3393  4fd6		       8e 58 10 	      stx	FASTFETCH
   3394  4fd9					      endif
   3395  4fd9		       9a		      txs
   3396  4fda				  -	      if	bankswitch == 64
   3397  4fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3398  4fda					      else
   3399  4fda		       a9 18		      lda	#>(start-1)
   3400  4fdc					      endif
   3401  4fdc		       48		      pha
   3402  4fdd		       a9 eb		      lda	#<(start-1)
   3403  4fdf		       48		      pha
   3404  4fe0		       48		      pha
   3405  4fe1		       8a		      txa
   3406  4fe2		       48		      pha
   3407  4fe3		       ba		      tsx
   3408  4fe4					      if	bankswitch != 64
   3409  4fe4		       b5 04		      lda	4,x	; get high byte of return address
   3410  4fe6		       2a		      rol
   3411  4fe7		       2a		      rol
   3412  4fe8		       2a		      rol
   3413  4fe9		       2a		      rol
   3414  4fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3415  4fec		       aa		      tax
   3416  4fed		       e8		      inx
   3417  4fee				  -	      else
   3418  4fee				  -	      lda	4,x	; get high byte of return address
   3419  4fee				  -	      tay
   3420  4fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3421  4fee				  -	      sta	4,x
   3422  4fee				  -	      tya
   3423  4fee				  -	      lsr
   3424  4fee				  -	      lsr
   3425  4fee				  -	      lsr
   3426  4fee				  -	      lsr
   3427  4fee				  -	      tax
   3428  4fee				  -	      inx
   3429  4fee					      endif
   3430  4fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3431  4ff1		       68		      pla
   3432  4ff2		       aa		      tax
   3433  4ff3		       68		      pla
   3434  4ff4		       60		      rts
   3435  4ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3436  4ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3437  4ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3438  4ff5					      endif
   3439  4ffc					      ORG	$4FFC
   3440  4ffc					      RORG	$7FFC
   3441  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   3442  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   3443  5000					      ORG	$5000
   3444  5000					      RORG	$9000
   3445  5000					      repeat	129
   3446  5000		       00		      .byte.b	0
   3445  5000					      repend
   3446  5001		       00		      .byte.b	0
   3445  5001					      repend
   3446  5002		       00		      .byte.b	0
   3445  5002					      repend
   3446  5003		       00		      .byte.b	0
   3445  5003					      repend
   3446  5004		       00		      .byte.b	0
   3445  5004					      repend
   3446  5005		       00		      .byte.b	0
   3445  5005					      repend
   3446  5006		       00		      .byte.b	0
   3445  5006					      repend
   3446  5007		       00		      .byte.b	0
   3445  5007					      repend
   3446  5008		       00		      .byte.b	0
   3445  5008					      repend
   3446  5009		       00		      .byte.b	0
   3445  5009					      repend
   3446  500a		       00		      .byte.b	0
   3445  500a					      repend
   3446  500b		       00		      .byte.b	0
   3445  500b					      repend
   3446  500c		       00		      .byte.b	0
   3445  500c					      repend
   3446  500d		       00		      .byte.b	0
   3445  500d					      repend
   3446  500e		       00		      .byte.b	0
   3445  500e					      repend
   3446  500f		       00		      .byte.b	0
   3445  500f					      repend
   3446  5010		       00		      .byte.b	0
   3445  5010					      repend
   3446  5011		       00		      .byte.b	0
   3445  5011					      repend
   3446  5012		       00		      .byte.b	0
   3445  5012					      repend
   3446  5013		       00		      .byte.b	0
   3445  5013					      repend
   3446  5014		       00		      .byte.b	0
   3445  5014					      repend
   3446  5015		       00		      .byte.b	0
   3445  5015					      repend
   3446  5016		       00		      .byte.b	0
   3445  5016					      repend
   3446  5017		       00		      .byte.b	0
   3445  5017					      repend
   3446  5018		       00		      .byte.b	0
   3445  5018					      repend
   3446  5019		       00		      .byte.b	0
   3445  5019					      repend
   3446  501a		       00		      .byte.b	0
   3445  501a					      repend
   3446  501b		       00		      .byte.b	0
   3445  501b					      repend
   3446  501c		       00		      .byte.b	0
   3445  501c					      repend
   3446  501d		       00		      .byte.b	0
   3445  501d					      repend
   3446  501e		       00		      .byte.b	0
   3445  501e					      repend
   3446  501f		       00		      .byte.b	0
   3445  501f					      repend
   3446  5020		       00		      .byte.b	0
   3445  5020					      repend
   3446  5021		       00		      .byte.b	0
   3445  5021					      repend
   3446  5022		       00		      .byte.b	0
   3445  5022					      repend
   3446  5023		       00		      .byte.b	0
   3445  5023					      repend
   3446  5024		       00		      .byte.b	0
   3445  5024					      repend
   3446  5025		       00		      .byte.b	0
   3445  5025					      repend
   3446  5026		       00		      .byte.b	0
   3445  5026					      repend
   3446  5027		       00		      .byte.b	0
   3445  5027					      repend
   3446  5028		       00		      .byte.b	0
   3445  5028					      repend
   3446  5029		       00		      .byte.b	0
   3445  5029					      repend
   3446  502a		       00		      .byte.b	0
   3445  502a					      repend
   3446  502b		       00		      .byte.b	0
   3445  502b					      repend
   3446  502c		       00		      .byte.b	0
   3445  502c					      repend
   3446  502d		       00		      .byte.b	0
   3445  502d					      repend
   3446  502e		       00		      .byte.b	0
   3445  502e					      repend
   3446  502f		       00		      .byte.b	0
   3445  502f					      repend
   3446  5030		       00		      .byte.b	0
   3445  5030					      repend
   3446  5031		       00		      .byte.b	0
   3445  5031					      repend
   3446  5032		       00		      .byte.b	0
   3445  5032					      repend
   3446  5033		       00		      .byte.b	0
   3445  5033					      repend
   3446  5034		       00		      .byte.b	0
   3445  5034					      repend
   3446  5035		       00		      .byte.b	0
   3445  5035					      repend
   3446  5036		       00		      .byte.b	0
   3445  5036					      repend
   3446  5037		       00		      .byte.b	0
   3445  5037					      repend
   3446  5038		       00		      .byte.b	0
   3445  5038					      repend
   3446  5039		       00		      .byte.b	0
   3445  5039					      repend
   3446  503a		       00		      .byte.b	0
   3445  503a					      repend
   3446  503b		       00		      .byte.b	0
   3445  503b					      repend
   3446  503c		       00		      .byte.b	0
   3445  503c					      repend
   3446  503d		       00		      .byte.b	0
   3445  503d					      repend
   3446  503e		       00		      .byte.b	0
   3445  503e					      repend
   3446  503f		       00		      .byte.b	0
   3445  503f					      repend
   3446  5040		       00		      .byte.b	0
   3445  5040					      repend
   3446  5041		       00		      .byte.b	0
   3445  5041					      repend
   3446  5042		       00		      .byte.b	0
   3445  5042					      repend
   3446  5043		       00		      .byte.b	0
   3445  5043					      repend
   3446  5044		       00		      .byte.b	0
   3445  5044					      repend
   3446  5045		       00		      .byte.b	0
   3445  5045					      repend
   3446  5046		       00		      .byte.b	0
   3445  5046					      repend
   3446  5047		       00		      .byte.b	0
   3445  5047					      repend
   3446  5048		       00		      .byte.b	0
   3445  5048					      repend
   3446  5049		       00		      .byte.b	0
   3445  5049					      repend
   3446  504a		       00		      .byte.b	0
   3445  504a					      repend
   3446  504b		       00		      .byte.b	0
   3445  504b					      repend
   3446  504c		       00		      .byte.b	0
   3445  504c					      repend
   3446  504d		       00		      .byte.b	0
   3445  504d					      repend
   3446  504e		       00		      .byte.b	0
   3445  504e					      repend
   3446  504f		       00		      .byte.b	0
   3445  504f					      repend
   3446  5050		       00		      .byte.b	0
   3445  5050					      repend
   3446  5051		       00		      .byte.b	0
   3445  5051					      repend
   3446  5052		       00		      .byte.b	0
   3445  5052					      repend
   3446  5053		       00		      .byte.b	0
   3445  5053					      repend
   3446  5054		       00		      .byte.b	0
   3445  5054					      repend
   3446  5055		       00		      .byte.b	0
   3445  5055					      repend
   3446  5056		       00		      .byte.b	0
   3445  5056					      repend
   3446  5057		       00		      .byte.b	0
   3445  5057					      repend
   3446  5058		       00		      .byte.b	0
   3445  5058					      repend
   3446  5059		       00		      .byte.b	0
   3445  5059					      repend
   3446  505a		       00		      .byte.b	0
   3445  505a					      repend
   3446  505b		       00		      .byte.b	0
   3445  505b					      repend
   3446  505c		       00		      .byte.b	0
   3445  505c					      repend
   3446  505d		       00		      .byte.b	0
   3445  505d					      repend
   3446  505e		       00		      .byte.b	0
   3445  505e					      repend
   3446  505f		       00		      .byte.b	0
   3445  505f					      repend
   3446  5060		       00		      .byte.b	0
   3445  5060					      repend
   3446  5061		       00		      .byte.b	0
   3445  5061					      repend
   3446  5062		       00		      .byte.b	0
   3445  5062					      repend
   3446  5063		       00		      .byte.b	0
   3445  5063					      repend
   3446  5064		       00		      .byte.b	0
   3445  5064					      repend
   3446  5065		       00		      .byte.b	0
   3445  5065					      repend
   3446  5066		       00		      .byte.b	0
   3445  5066					      repend
   3446  5067		       00		      .byte.b	0
   3445  5067					      repend
   3446  5068		       00		      .byte.b	0
   3445  5068					      repend
   3446  5069		       00		      .byte.b	0
   3445  5069					      repend
   3446  506a		       00		      .byte.b	0
   3445  506a					      repend
   3446  506b		       00		      .byte.b	0
   3445  506b					      repend
   3446  506c		       00		      .byte.b	0
   3445  506c					      repend
   3446  506d		       00		      .byte.b	0
   3445  506d					      repend
   3446  506e		       00		      .byte.b	0
   3445  506e					      repend
   3446  506f		       00		      .byte.b	0
   3445  506f					      repend
   3446  5070		       00		      .byte.b	0
   3445  5070					      repend
   3446  5071		       00		      .byte.b	0
   3445  5071					      repend
   3446  5072		       00		      .byte.b	0
   3445  5072					      repend
   3446  5073		       00		      .byte.b	0
   3445  5073					      repend
   3446  5074		       00		      .byte.b	0
   3445  5074					      repend
   3446  5075		       00		      .byte.b	0
   3445  5075					      repend
   3446  5076		       00		      .byte.b	0
   3445  5076					      repend
   3446  5077		       00		      .byte.b	0
   3445  5077					      repend
   3446  5078		       00		      .byte.b	0
   3445  5078					      repend
   3446  5079		       00		      .byte.b	0
   3445  5079					      repend
   3446  507a		       00		      .byte.b	0
   3445  507a					      repend
   3446  507b		       00		      .byte.b	0
   3445  507b					      repend
   3446  507c		       00		      .byte.b	0
   3445  507c					      repend
   3446  507d		       00		      .byte.b	0
   3445  507d					      repend
   3446  507e		       00		      .byte.b	0
   3445  507e					      repend
   3446  507f		       00		      .byte.b	0
   3445  507f					      repend
   3446  5080		       00		      .byte.b	0
   3447  5081					      repend
   3448  5081					      if	ECHO5
      3923 bytes of ROM space left in bank 5
   3449  5081					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   3450  5081					      endif
   3451  5081		       00 01	   ECHO5      =	1
   3452  5fd4					      ORG	$5FF4-bscode_length
   3453  5fd4					      RORG	$9FF4-bscode_length
   3454  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   3455  5fd6					      ifconst	FASTFETCH	; using DPC+
   3456  5fd6		       8e 58 10 	      stx	FASTFETCH
   3457  5fd9					      endif
   3458  5fd9		       9a		      txs
   3459  5fda				  -	      if	bankswitch == 64
   3460  5fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3461  5fda					      else
   3462  5fda		       a9 18		      lda	#>(start-1)
   3463  5fdc					      endif
   3464  5fdc		       48		      pha
   3465  5fdd		       a9 eb		      lda	#<(start-1)
   3466  5fdf		       48		      pha
   3467  5fe0		       48		      pha
   3468  5fe1		       8a		      txa
   3469  5fe2		       48		      pha
   3470  5fe3		       ba		      tsx
   3471  5fe4					      if	bankswitch != 64
   3472  5fe4		       b5 04		      lda	4,x	; get high byte of return address
   3473  5fe6		       2a		      rol
   3474  5fe7		       2a		      rol
   3475  5fe8		       2a		      rol
   3476  5fe9		       2a		      rol
   3477  5fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3478  5fec		       aa		      tax
   3479  5fed		       e8		      inx
   3480  5fee				  -	      else
   3481  5fee				  -	      lda	4,x	; get high byte of return address
   3482  5fee				  -	      tay
   3483  5fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3484  5fee				  -	      sta	4,x
   3485  5fee				  -	      tya
   3486  5fee				  -	      lsr
   3487  5fee				  -	      lsr
   3488  5fee				  -	      lsr
   3489  5fee				  -	      lsr
   3490  5fee				  -	      tax
   3491  5fee				  -	      inx
   3492  5fee					      endif
   3493  5fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3494  5ff1		       68		      pla
   3495  5ff2		       aa		      tax
   3496  5ff3		       68		      pla
   3497  5ff4		       60		      rts
   3498  5ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3499  5ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3500  5ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3501  5ff5					      endif
   3502  5ffc					      ORG	$5FFC
   3503  5ffc					      RORG	$9FFC
   3504  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   3505  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   3506  6000					      ORG	$6000
   3507  6000					      RORG	$B000
   3508  6000					      repeat	129
   3509  6000		       00		      .byte.b	0
   3508  6000					      repend
   3509  6001		       00		      .byte.b	0
   3508  6001					      repend
   3509  6002		       00		      .byte.b	0
   3508  6002					      repend
   3509  6003		       00		      .byte.b	0
   3508  6003					      repend
   3509  6004		       00		      .byte.b	0
   3508  6004					      repend
   3509  6005		       00		      .byte.b	0
   3508  6005					      repend
   3509  6006		       00		      .byte.b	0
   3508  6006					      repend
   3509  6007		       00		      .byte.b	0
   3508  6007					      repend
   3509  6008		       00		      .byte.b	0
   3508  6008					      repend
   3509  6009		       00		      .byte.b	0
   3508  6009					      repend
   3509  600a		       00		      .byte.b	0
   3508  600a					      repend
   3509  600b		       00		      .byte.b	0
   3508  600b					      repend
   3509  600c		       00		      .byte.b	0
   3508  600c					      repend
   3509  600d		       00		      .byte.b	0
   3508  600d					      repend
   3509  600e		       00		      .byte.b	0
   3508  600e					      repend
   3509  600f		       00		      .byte.b	0
   3508  600f					      repend
   3509  6010		       00		      .byte.b	0
   3508  6010					      repend
   3509  6011		       00		      .byte.b	0
   3508  6011					      repend
   3509  6012		       00		      .byte.b	0
   3508  6012					      repend
   3509  6013		       00		      .byte.b	0
   3508  6013					      repend
   3509  6014		       00		      .byte.b	0
   3508  6014					      repend
   3509  6015		       00		      .byte.b	0
   3508  6015					      repend
   3509  6016		       00		      .byte.b	0
   3508  6016					      repend
   3509  6017		       00		      .byte.b	0
   3508  6017					      repend
   3509  6018		       00		      .byte.b	0
   3508  6018					      repend
   3509  6019		       00		      .byte.b	0
   3508  6019					      repend
   3509  601a		       00		      .byte.b	0
   3508  601a					      repend
   3509  601b		       00		      .byte.b	0
   3508  601b					      repend
   3509  601c		       00		      .byte.b	0
   3508  601c					      repend
   3509  601d		       00		      .byte.b	0
   3508  601d					      repend
   3509  601e		       00		      .byte.b	0
   3508  601e					      repend
   3509  601f		       00		      .byte.b	0
   3508  601f					      repend
   3509  6020		       00		      .byte.b	0
   3508  6020					      repend
   3509  6021		       00		      .byte.b	0
   3508  6021					      repend
   3509  6022		       00		      .byte.b	0
   3508  6022					      repend
   3509  6023		       00		      .byte.b	0
   3508  6023					      repend
   3509  6024		       00		      .byte.b	0
   3508  6024					      repend
   3509  6025		       00		      .byte.b	0
   3508  6025					      repend
   3509  6026		       00		      .byte.b	0
   3508  6026					      repend
   3509  6027		       00		      .byte.b	0
   3508  6027					      repend
   3509  6028		       00		      .byte.b	0
   3508  6028					      repend
   3509  6029		       00		      .byte.b	0
   3508  6029					      repend
   3509  602a		       00		      .byte.b	0
   3508  602a					      repend
   3509  602b		       00		      .byte.b	0
   3508  602b					      repend
   3509  602c		       00		      .byte.b	0
   3508  602c					      repend
   3509  602d		       00		      .byte.b	0
   3508  602d					      repend
   3509  602e		       00		      .byte.b	0
   3508  602e					      repend
   3509  602f		       00		      .byte.b	0
   3508  602f					      repend
   3509  6030		       00		      .byte.b	0
   3508  6030					      repend
   3509  6031		       00		      .byte.b	0
   3508  6031					      repend
   3509  6032		       00		      .byte.b	0
   3508  6032					      repend
   3509  6033		       00		      .byte.b	0
   3508  6033					      repend
   3509  6034		       00		      .byte.b	0
   3508  6034					      repend
   3509  6035		       00		      .byte.b	0
   3508  6035					      repend
   3509  6036		       00		      .byte.b	0
   3508  6036					      repend
   3509  6037		       00		      .byte.b	0
   3508  6037					      repend
   3509  6038		       00		      .byte.b	0
   3508  6038					      repend
   3509  6039		       00		      .byte.b	0
   3508  6039					      repend
   3509  603a		       00		      .byte.b	0
   3508  603a					      repend
   3509  603b		       00		      .byte.b	0
   3508  603b					      repend
   3509  603c		       00		      .byte.b	0
   3508  603c					      repend
   3509  603d		       00		      .byte.b	0
   3508  603d					      repend
   3509  603e		       00		      .byte.b	0
   3508  603e					      repend
   3509  603f		       00		      .byte.b	0
   3508  603f					      repend
   3509  6040		       00		      .byte.b	0
   3508  6040					      repend
   3509  6041		       00		      .byte.b	0
   3508  6041					      repend
   3509  6042		       00		      .byte.b	0
   3508  6042					      repend
   3509  6043		       00		      .byte.b	0
   3508  6043					      repend
   3509  6044		       00		      .byte.b	0
   3508  6044					      repend
   3509  6045		       00		      .byte.b	0
   3508  6045					      repend
   3509  6046		       00		      .byte.b	0
   3508  6046					      repend
   3509  6047		       00		      .byte.b	0
   3508  6047					      repend
   3509  6048		       00		      .byte.b	0
   3508  6048					      repend
   3509  6049		       00		      .byte.b	0
   3508  6049					      repend
   3509  604a		       00		      .byte.b	0
   3508  604a					      repend
   3509  604b		       00		      .byte.b	0
   3508  604b					      repend
   3509  604c		       00		      .byte.b	0
   3508  604c					      repend
   3509  604d		       00		      .byte.b	0
   3508  604d					      repend
   3509  604e		       00		      .byte.b	0
   3508  604e					      repend
   3509  604f		       00		      .byte.b	0
   3508  604f					      repend
   3509  6050		       00		      .byte.b	0
   3508  6050					      repend
   3509  6051		       00		      .byte.b	0
   3508  6051					      repend
   3509  6052		       00		      .byte.b	0
   3508  6052					      repend
   3509  6053		       00		      .byte.b	0
   3508  6053					      repend
   3509  6054		       00		      .byte.b	0
   3508  6054					      repend
   3509  6055		       00		      .byte.b	0
   3508  6055					      repend
   3509  6056		       00		      .byte.b	0
   3508  6056					      repend
   3509  6057		       00		      .byte.b	0
   3508  6057					      repend
   3509  6058		       00		      .byte.b	0
   3508  6058					      repend
   3509  6059		       00		      .byte.b	0
   3508  6059					      repend
   3509  605a		       00		      .byte.b	0
   3508  605a					      repend
   3509  605b		       00		      .byte.b	0
   3508  605b					      repend
   3509  605c		       00		      .byte.b	0
   3508  605c					      repend
   3509  605d		       00		      .byte.b	0
   3508  605d					      repend
   3509  605e		       00		      .byte.b	0
   3508  605e					      repend
   3509  605f		       00		      .byte.b	0
   3508  605f					      repend
   3509  6060		       00		      .byte.b	0
   3508  6060					      repend
   3509  6061		       00		      .byte.b	0
   3508  6061					      repend
   3509  6062		       00		      .byte.b	0
   3508  6062					      repend
   3509  6063		       00		      .byte.b	0
   3508  6063					      repend
   3509  6064		       00		      .byte.b	0
   3508  6064					      repend
   3509  6065		       00		      .byte.b	0
   3508  6065					      repend
   3509  6066		       00		      .byte.b	0
   3508  6066					      repend
   3509  6067		       00		      .byte.b	0
   3508  6067					      repend
   3509  6068		       00		      .byte.b	0
   3508  6068					      repend
   3509  6069		       00		      .byte.b	0
   3508  6069					      repend
   3509  606a		       00		      .byte.b	0
   3508  606a					      repend
   3509  606b		       00		      .byte.b	0
   3508  606b					      repend
   3509  606c		       00		      .byte.b	0
   3508  606c					      repend
   3509  606d		       00		      .byte.b	0
   3508  606d					      repend
   3509  606e		       00		      .byte.b	0
   3508  606e					      repend
   3509  606f		       00		      .byte.b	0
   3508  606f					      repend
   3509  6070		       00		      .byte.b	0
   3508  6070					      repend
   3509  6071		       00		      .byte.b	0
   3508  6071					      repend
   3509  6072		       00		      .byte.b	0
   3508  6072					      repend
   3509  6073		       00		      .byte.b	0
   3508  6073					      repend
   3509  6074		       00		      .byte.b	0
   3508  6074					      repend
   3509  6075		       00		      .byte.b	0
   3508  6075					      repend
   3509  6076		       00		      .byte.b	0
   3508  6076					      repend
   3509  6077		       00		      .byte.b	0
   3508  6077					      repend
   3509  6078		       00		      .byte.b	0
   3508  6078					      repend
   3509  6079		       00		      .byte.b	0
   3508  6079					      repend
   3509  607a		       00		      .byte.b	0
   3508  607a					      repend
   3509  607b		       00		      .byte.b	0
   3508  607b					      repend
   3509  607c		       00		      .byte.b	0
   3508  607c					      repend
   3509  607d		       00		      .byte.b	0
   3508  607d					      repend
   3509  607e		       00		      .byte.b	0
   3508  607e					      repend
   3509  607f		       00		      .byte.b	0
   3508  607f					      repend
   3509  6080		       00		      .byte.b	0
   3510  6081					      repend
   3511  6081					      if	ECHO6
      3923 bytes of ROM space left in bank 6
   3512  6081					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   3513  6081					      endif
   3514  6081		       00 01	   ECHO6      =	1
   3515  6fd4					      ORG	$6FF4-bscode_length
   3516  6fd4					      RORG	$BFF4-bscode_length
   3517  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   3518  6fd6					      ifconst	FASTFETCH	; using DPC+
   3519  6fd6		       8e 58 10 	      stx	FASTFETCH
   3520  6fd9					      endif
   3521  6fd9		       9a		      txs
   3522  6fda				  -	      if	bankswitch == 64
   3523  6fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3524  6fda					      else
   3525  6fda		       a9 18		      lda	#>(start-1)
   3526  6fdc					      endif
   3527  6fdc		       48		      pha
   3528  6fdd		       a9 eb		      lda	#<(start-1)
   3529  6fdf		       48		      pha
   3530  6fe0		       48		      pha
   3531  6fe1		       8a		      txa
   3532  6fe2		       48		      pha
   3533  6fe3		       ba		      tsx
   3534  6fe4					      if	bankswitch != 64
   3535  6fe4		       b5 04		      lda	4,x	; get high byte of return address
   3536  6fe6		       2a		      rol
   3537  6fe7		       2a		      rol
   3538  6fe8		       2a		      rol
   3539  6fe9		       2a		      rol
   3540  6fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3541  6fec		       aa		      tax
   3542  6fed		       e8		      inx
   3543  6fee				  -	      else
   3544  6fee				  -	      lda	4,x	; get high byte of return address
   3545  6fee				  -	      tay
   3546  6fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3547  6fee				  -	      sta	4,x
   3548  6fee				  -	      tya
   3549  6fee				  -	      lsr
   3550  6fee				  -	      lsr
   3551  6fee				  -	      lsr
   3552  6fee				  -	      lsr
   3553  6fee				  -	      tax
   3554  6fee				  -	      inx
   3555  6fee					      endif
   3556  6fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3557  6ff1		       68		      pla
   3558  6ff2		       aa		      tax
   3559  6ff3		       68		      pla
   3560  6ff4		       60		      rts
   3561  6ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3562  6ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3563  6ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3564  6ff5					      endif
   3565  6ffc					      ORG	$6FFC
   3566  6ffc					      RORG	$BFFC
   3567  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   3568  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   3569  7000					      ORG	$7000
   3570  7000					      RORG	$D000
   3571  7000					      repeat	129
   3572  7000		       00		      .byte.b	0
   3571  7000					      repend
   3572  7001		       00		      .byte.b	0
   3571  7001					      repend
   3572  7002		       00		      .byte.b	0
   3571  7002					      repend
   3572  7003		       00		      .byte.b	0
   3571  7003					      repend
   3572  7004		       00		      .byte.b	0
   3571  7004					      repend
   3572  7005		       00		      .byte.b	0
   3571  7005					      repend
   3572  7006		       00		      .byte.b	0
   3571  7006					      repend
   3572  7007		       00		      .byte.b	0
   3571  7007					      repend
   3572  7008		       00		      .byte.b	0
   3571  7008					      repend
   3572  7009		       00		      .byte.b	0
   3571  7009					      repend
   3572  700a		       00		      .byte.b	0
   3571  700a					      repend
   3572  700b		       00		      .byte.b	0
   3571  700b					      repend
   3572  700c		       00		      .byte.b	0
   3571  700c					      repend
   3572  700d		       00		      .byte.b	0
   3571  700d					      repend
   3572  700e		       00		      .byte.b	0
   3571  700e					      repend
   3572  700f		       00		      .byte.b	0
   3571  700f					      repend
   3572  7010		       00		      .byte.b	0
   3571  7010					      repend
   3572  7011		       00		      .byte.b	0
   3571  7011					      repend
   3572  7012		       00		      .byte.b	0
   3571  7012					      repend
   3572  7013		       00		      .byte.b	0
   3571  7013					      repend
   3572  7014		       00		      .byte.b	0
   3571  7014					      repend
   3572  7015		       00		      .byte.b	0
   3571  7015					      repend
   3572  7016		       00		      .byte.b	0
   3571  7016					      repend
   3572  7017		       00		      .byte.b	0
   3571  7017					      repend
   3572  7018		       00		      .byte.b	0
   3571  7018					      repend
   3572  7019		       00		      .byte.b	0
   3571  7019					      repend
   3572  701a		       00		      .byte.b	0
   3571  701a					      repend
   3572  701b		       00		      .byte.b	0
   3571  701b					      repend
   3572  701c		       00		      .byte.b	0
   3571  701c					      repend
   3572  701d		       00		      .byte.b	0
   3571  701d					      repend
   3572  701e		       00		      .byte.b	0
   3571  701e					      repend
   3572  701f		       00		      .byte.b	0
   3571  701f					      repend
   3572  7020		       00		      .byte.b	0
   3571  7020					      repend
   3572  7021		       00		      .byte.b	0
   3571  7021					      repend
   3572  7022		       00		      .byte.b	0
   3571  7022					      repend
   3572  7023		       00		      .byte.b	0
   3571  7023					      repend
   3572  7024		       00		      .byte.b	0
   3571  7024					      repend
   3572  7025		       00		      .byte.b	0
   3571  7025					      repend
   3572  7026		       00		      .byte.b	0
   3571  7026					      repend
   3572  7027		       00		      .byte.b	0
   3571  7027					      repend
   3572  7028		       00		      .byte.b	0
   3571  7028					      repend
   3572  7029		       00		      .byte.b	0
   3571  7029					      repend
   3572  702a		       00		      .byte.b	0
   3571  702a					      repend
   3572  702b		       00		      .byte.b	0
   3571  702b					      repend
   3572  702c		       00		      .byte.b	0
   3571  702c					      repend
   3572  702d		       00		      .byte.b	0
   3571  702d					      repend
   3572  702e		       00		      .byte.b	0
   3571  702e					      repend
   3572  702f		       00		      .byte.b	0
   3571  702f					      repend
   3572  7030		       00		      .byte.b	0
   3571  7030					      repend
   3572  7031		       00		      .byte.b	0
   3571  7031					      repend
   3572  7032		       00		      .byte.b	0
   3571  7032					      repend
   3572  7033		       00		      .byte.b	0
   3571  7033					      repend
   3572  7034		       00		      .byte.b	0
   3571  7034					      repend
   3572  7035		       00		      .byte.b	0
   3571  7035					      repend
   3572  7036		       00		      .byte.b	0
   3571  7036					      repend
   3572  7037		       00		      .byte.b	0
   3571  7037					      repend
   3572  7038		       00		      .byte.b	0
   3571  7038					      repend
   3572  7039		       00		      .byte.b	0
   3571  7039					      repend
   3572  703a		       00		      .byte.b	0
   3571  703a					      repend
   3572  703b		       00		      .byte.b	0
   3571  703b					      repend
   3572  703c		       00		      .byte.b	0
   3571  703c					      repend
   3572  703d		       00		      .byte.b	0
   3571  703d					      repend
   3572  703e		       00		      .byte.b	0
   3571  703e					      repend
   3572  703f		       00		      .byte.b	0
   3571  703f					      repend
   3572  7040		       00		      .byte.b	0
   3571  7040					      repend
   3572  7041		       00		      .byte.b	0
   3571  7041					      repend
   3572  7042		       00		      .byte.b	0
   3571  7042					      repend
   3572  7043		       00		      .byte.b	0
   3571  7043					      repend
   3572  7044		       00		      .byte.b	0
   3571  7044					      repend
   3572  7045		       00		      .byte.b	0
   3571  7045					      repend
   3572  7046		       00		      .byte.b	0
   3571  7046					      repend
   3572  7047		       00		      .byte.b	0
   3571  7047					      repend
   3572  7048		       00		      .byte.b	0
   3571  7048					      repend
   3572  7049		       00		      .byte.b	0
   3571  7049					      repend
   3572  704a		       00		      .byte.b	0
   3571  704a					      repend
   3572  704b		       00		      .byte.b	0
   3571  704b					      repend
   3572  704c		       00		      .byte.b	0
   3571  704c					      repend
   3572  704d		       00		      .byte.b	0
   3571  704d					      repend
   3572  704e		       00		      .byte.b	0
   3571  704e					      repend
   3572  704f		       00		      .byte.b	0
   3571  704f					      repend
   3572  7050		       00		      .byte.b	0
   3571  7050					      repend
   3572  7051		       00		      .byte.b	0
   3571  7051					      repend
   3572  7052		       00		      .byte.b	0
   3571  7052					      repend
   3572  7053		       00		      .byte.b	0
   3571  7053					      repend
   3572  7054		       00		      .byte.b	0
   3571  7054					      repend
   3572  7055		       00		      .byte.b	0
   3571  7055					      repend
   3572  7056		       00		      .byte.b	0
   3571  7056					      repend
   3572  7057		       00		      .byte.b	0
   3571  7057					      repend
   3572  7058		       00		      .byte.b	0
   3571  7058					      repend
   3572  7059		       00		      .byte.b	0
   3571  7059					      repend
   3572  705a		       00		      .byte.b	0
   3571  705a					      repend
   3572  705b		       00		      .byte.b	0
   3571  705b					      repend
   3572  705c		       00		      .byte.b	0
   3571  705c					      repend
   3572  705d		       00		      .byte.b	0
   3571  705d					      repend
   3572  705e		       00		      .byte.b	0
   3571  705e					      repend
   3572  705f		       00		      .byte.b	0
   3571  705f					      repend
   3572  7060		       00		      .byte.b	0
   3571  7060					      repend
   3572  7061		       00		      .byte.b	0
   3571  7061					      repend
   3572  7062		       00		      .byte.b	0
   3571  7062					      repend
   3572  7063		       00		      .byte.b	0
   3571  7063					      repend
   3572  7064		       00		      .byte.b	0
   3571  7064					      repend
   3572  7065		       00		      .byte.b	0
   3571  7065					      repend
   3572  7066		       00		      .byte.b	0
   3571  7066					      repend
   3572  7067		       00		      .byte.b	0
   3571  7067					      repend
   3572  7068		       00		      .byte.b	0
   3571  7068					      repend
   3572  7069		       00		      .byte.b	0
   3571  7069					      repend
   3572  706a		       00		      .byte.b	0
   3571  706a					      repend
   3572  706b		       00		      .byte.b	0
   3571  706b					      repend
   3572  706c		       00		      .byte.b	0
   3571  706c					      repend
   3572  706d		       00		      .byte.b	0
   3571  706d					      repend
   3572  706e		       00		      .byte.b	0
   3571  706e					      repend
   3572  706f		       00		      .byte.b	0
   3571  706f					      repend
   3572  7070		       00		      .byte.b	0
   3571  7070					      repend
   3572  7071		       00		      .byte.b	0
   3571  7071					      repend
   3572  7072		       00		      .byte.b	0
   3571  7072					      repend
   3572  7073		       00		      .byte.b	0
   3571  7073					      repend
   3572  7074		       00		      .byte.b	0
   3571  7074					      repend
   3572  7075		       00		      .byte.b	0
   3571  7075					      repend
   3572  7076		       00		      .byte.b	0
   3571  7076					      repend
   3572  7077		       00		      .byte.b	0
   3571  7077					      repend
   3572  7078		       00		      .byte.b	0
   3571  7078					      repend
   3572  7079		       00		      .byte.b	0
   3571  7079					      repend
   3572  707a		       00		      .byte.b	0
   3571  707a					      repend
   3572  707b		       00		      .byte.b	0
   3571  707b					      repend
   3572  707c		       00		      .byte.b	0
   3571  707c					      repend
   3572  707d		       00		      .byte.b	0
   3571  707d					      repend
   3572  707e		       00		      .byte.b	0
   3571  707e					      repend
   3572  707f		       00		      .byte.b	0
   3571  707f					      repend
   3572  7080		       00		      .byte.b	0
   3573  7081					      repend
   3574  7081							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3575  7081
   3576  7081							;----------------------------------------
   3577  7081							; Display Data
   3578  7081							;----------------------------------------
   3579  7081							; The Display Data bank is copied into RAM when DPC+ initializes the cartridge.
   3580  7081							; This allows us to manipulate the data during run-time, but have a known
   3581  7081							; starting state when the Atari is first turned on.
   3582  7081							;
   3583  7081							; Unlike normal Atari VCS/2600 sprite definitions, the sprite data in the
   3584  7081							; Display Data bank is stored right-side-up.
   3585  7081							;
   3586  7081							;----------------------------------------
   3587  7081
   3588  7081				   Zeros32
   3589  7081		       00 84	   SOUND_OFF  =	(* & $1fff)/32
   3590  7081				   DisplayDataDigitBlank
   3591  7081		       00		      .byte.b	0	;--
   3592  7082		       00		      .byte.b	0	;--
   3593  7083		       00		      .byte.b	0	;--
   3594  7084		       00		      .byte.b	0	;--
   3595  7085		       00		      .byte.b	0	;--
   3596  7086		       00		      .byte.b	0	;--
   3597  7087		       00		      .byte.b	0	;--
   3598  7088		       00		      .byte.b	0	;--
   3599  7089
   3600  7089							;	align 32
   3601  7089							;Zeros32:
   3602  7089							;SOUND_OFF = (* & $1fff)/32
   3603  7089							;	.byte 0,0,0,0,0,0,0,0
   3604  7089		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   3605  7091		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   3606  7099		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   3607  70a1
   3608  70a1		       00 85	   SINE_WAVE  =	(* & $1fff)/32
   3609  70a1		       03 03 03 04*	      .byte.b	3,3,3,4,4,5,5,5
   3610  70a9		       05 05 05 05*	      .byte.b	5,5,5,5,4,4,3,3
   3611  70b1		       03 02 02 01*	      .byte.b	3,2,2,1,1,0,0,0
   3612  70b9		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,2,2
   3613  70c1
   3614  70e0		       00 00 00 00*	      align	32
   3615  70e0		       00 87	   TRIANGLE_WAVE =	(* & $1fff)/32
   3616  70e0		       00 00 01 01*	      .byte.b	0,0,1,1,1,2,2,2
   3617  70e8		       03 03 03 04*	      .byte.b	3,3,3,4,4,4,5,5
   3618  70f0		       05 05 04 04*	      .byte.b	5,5,4,4,4,3,3,3
   3619  70f8		       02 02 02 01*	      .byte.b	2,2,2,1,1,1,0,0
   3620  7100
   3621  7100					      align	32
   3622  7100		       00 88	   SAWTOOTH_WAVE =	(* & $1fff)/32
   3623  7100		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,1,1
   3624  7108		       01 01 02 02*	      .byte.b	1,1,2,2,2,2,2,2
   3625  7110		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,4,4
   3626  7118		       04 04 04 04*	      .byte.b	4,4,4,4,5,5,5,5
   3627  7120
   3628  7120					      align	32
   3629  7120		       00 89	   SQUARE_WAVE_VOL5 =	(* & $1fff)/32
   3630  7120		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   3631  7128		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   3632  7130		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   3633  7138		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   3634  7140
   3635  7140					      align	32
   3636  7140		       00 8a	   SQUARE_WAVE_VOL4 =	(* & $1fff)/32
   3637  7140		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   3638  7148		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   3639  7150		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   3640  7158		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   3641  7160
   3642  7160					      align	32
   3643  7160		       00 8b	   SQUARE_WAVE_VOL3 =	(* & $1fff)/32
   3644  7160		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   3645  7168		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   3646  7170		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   3647  7178		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   3648  7180
   3649  7180					      align	32
   3650  7180		       00 8c	   NOISE_WAVE =	(* & $1fff)/32
   3651  7180		       07 01 09 0a*	      .byte.b	7, 1, 9,10, 2, 8, 8,14
   3652  7188		       03 0d 08 05*	      .byte.b	3,13, 8, 5,12, 2, 3, 7
   3653  7190		       07 01 08 04*	      .byte.b	7, 1, 8, 4,15, 1,13, 5
   3654  7198		       08 05 0b 06*	      .byte.b	8, 5,11, 6, 8, 7, 9, 2
   3655  71a0
   3656  71a0							; low and high byte of address table (for ROMdata array in C)
   3657  71a0		       56		      .byte.b	<fetcher_address_table
   3658  71a1		       0d		      .byte.b	((>fetcher_address_table) & $0f) | (((>fetcher_address_table) / 2) & $70)
   3659  71a2		       00		      .byte.b	0
   3660  71a3		       00		      .byte.b	0
   3661  71a4				   FETCHER_BEGIN
   3662  71a4		       10		      .byte.b	16
   3663  71a5		       10		      .byte.b	16
   3664  71a6		       10		      .byte.b	16
   3665  71a7		       10		      .byte.b	16	; to zero-fill on boot
   3666  71a8							;bB.asm
   3667  71a8							; bB.asm file is split here
   3668  71a8				   playerL091_3
   3669  71a8		       18		      .byte.b	%00011000
   3670  71a9		       18		      .byte.b	%00011000
   3671  71aa		       3c		      .byte.b	%00111100
   3672  71ab		       3c		      .byte.b	%00111100
   3673  71ac		       7e		      .byte.b	%01111110
   3674  71ad		       7e		      .byte.b	%01111110
   3675  71ae		       ff		      .byte.b	%11111111
   3676  71af		       ff		      .byte.b	%11111111
   3677  71b0		       ff		      .byte.b	%11111111
   3678  71b1		       ff		      .byte.b	%11111111
   3679  71b2		       7e		      .byte.b	%01111110
   3680  71b3		       7e		      .byte.b	%01111110
   3681  71b4		       3c		      .byte.b	%00111100
   3682  71b5		       3c		      .byte.b	%00111100
   3683  71b6		       18		      .byte.b	%00011000
   3684  71b7		       18		      .byte.b	%00011000
   3685  71b8				   playercolorL092_3
   3686  71b8		       40		      .byte.b	$40
   3687  71b9		       40		      .byte.b	$40
   3688  71ba		       40		      .byte.b	$40
   3689  71bb		       40		      .byte.b	$40
   3690  71bc		       40		      .byte.b	$40
   3691  71bd		       40		      .byte.b	$40
   3692  71be		       40		      .byte.b	$40
   3693  71bf		       40		      .byte.b	$40
   3694  71c0		       40		      .byte.b	$40
   3695  71c1		       40		      .byte.b	$40
   3696  71c2		       40		      .byte.b	$40
   3697  71c3		       40		      .byte.b	$40
   3698  71c4		       40		      .byte.b	$40
   3699  71c5		       40		      .byte.b	$40
   3700  71c6		       40		      .byte.b	$40
   3701  71c7		       40		      .byte.b	$40
   3702  71c8				   playfieldcolorL099
   3703  71c8		       2a		      .byte.b	$2A
   3704  71c9		       2a		      .byte.b	$2A
   3705  71ca		       2a		      .byte.b	$2A
   3706  71cb		       2a		      .byte.b	$2A
   3707  71cc		       02		      .byte.b	$02
   3708  71cd		       02		      .byte.b	$02
   3709  71ce		       02		      .byte.b	$02
   3710  71cf		       08		      .byte.b	$08
   3711  71d0		       08		      .byte.b	$08
   3712  71d1		       06		      .byte.b	$06
   3713  71d2		       06		      .byte.b	$06
   3714  71d3		       06		      .byte.b	$06
   3715  71d4		       06		      .byte.b	$06
   3716  71d5		       06		      .byte.b	$06
   3717  71d6		       04		      .byte.b	$04
   3718  71d7		       04		      .byte.b	$04
   3719  71d8		       04		      .byte.b	$04
   3720  71d9		       04		      .byte.b	$04
   3721  71da		       04		      .byte.b	$04
   3722  71db		       04		      .byte.b	$04
   3723  71dc		       04		      .byte.b	$04
   3724  71dd		       02		      .byte.b	$02
   3725  71de		       02		      .byte.b	$02
   3726  71df		       02		      .byte.b	$02
   3727  71e0		       02		      .byte.b	$02
   3728  71e1		       02		      .byte.b	$02
   3729  71e2		       02		      .byte.b	$02
   3730  71e3		       02		      .byte.b	$02
   3731  71e4		       02		      .byte.b	$02
   3732  71e5		       02		      .byte.b	$02
   3733  71e6		       02		      .byte.b	$02
   3734  71e7		       02		      .byte.b	$02
   3735  71e8		       02		      .byte.b	$02
   3736  71e9		       02		      .byte.b	$02
   3737  71ea		       02		      .byte.b	$02
   3738  71eb		       02		      .byte.b	$02
   3739  71ec		       02		      .byte.b	$02
   3740  71ed		       02		      .byte.b	$02
   3741  71ee		       02		      .byte.b	$02
   3742  71ef		       02		      .byte.b	$02
   3743  71f0		       02		      .byte.b	$02
   3744  71f1		       02		      .byte.b	$02
   3745  71f2		       02		      .byte.b	$02
   3746  71f3		       c8		      .byte.b	$C8
   3747  71f4				   backgroundcolorL0100
   3748  71f4		       00		      .byte.b	$00
   3749  71f5		       00		      .byte.b	$00
   3750  71f6		       00		      .byte.b	$00
   3751  71f7		       00		      .byte.b	$00
   3752  71f8		       00		      .byte.b	$00
   3753  71f9		       00		      .byte.b	$00
   3754  71fa		       00		      .byte.b	$00
   3755  71fb		       00		      .byte.b	$00
   3756  71fc		       00		      .byte.b	$00
   3757  71fd		       00		      .byte.b	$00
   3758  71fe		       00		      .byte.b	$00
   3759  71ff		       00		      .byte.b	$00
   3760  7200		       00		      .byte.b	$00
   3761  7201		       00		      .byte.b	$00
   3762  7202		       00		      .byte.b	$00
   3763  7203		       00		      .byte.b	$00
   3764  7204		       00		      .byte.b	$00
   3765  7205		       00		      .byte.b	$00
   3766  7206		       00		      .byte.b	$00
   3767  7207		       00		      .byte.b	$00
   3768  7208		       00		      .byte.b	$00
   3769  7209		       00		      .byte.b	$00
   3770  720a		       00		      .byte.b	$00
   3771  720b		       00		      .byte.b	$00
   3772  720c		       00		      .byte.b	$00
   3773  720d		       00		      .byte.b	$00
   3774  720e		       00		      .byte.b	$00
   3775  720f		       00		      .byte.b	$00
   3776  7210		       00		      .byte.b	$00
   3777  7211		       00		      .byte.b	$00
   3778  7212		       00		      .byte.b	$00
   3779  7213		       00		      .byte.b	$00
   3780  7214		       00		      .byte.b	$00
   3781  7215		       00		      .byte.b	$00
   3782  7216		       00		      .byte.b	$00
   3783  7217		       00		      .byte.b	$00
   3784  7218		       00		      .byte.b	$00
   3785  7219		       00		      .byte.b	$00
   3786  721a		       00		      .byte.b	$00
   3787  721b		       00		      .byte.b	$00
   3788  721c		       00		      .byte.b	$00
   3789  721d		       00		      .byte.b	$00
   3790  721e		       00		      .byte.b	$00
   3791  721f		       00		      .byte.b	$00
   3792  7220				   PF_data1
   3793  7220		       00		      .byte.b	%00000000
   3794  7221		       00		      .byte.b	%00000000
   3795  7222		       00		      .byte.b	%00000000
   3796  7223		       00		      .byte.b	%00000000
   3797  7224		       80		      .byte.b	%10000000
   3798  7225		       40		      .byte.b	%01000000
   3799  7226		       20		      .byte.b	%00100000
   3800  7227		       00		      .byte.b	%00000000
   3801  7228		       00		      .byte.b	%00000000
   3802  7229		       03		      .byte.b	%00000011
   3803  722a		       07		      .byte.b	%00000111
   3804  722b		       07		      .byte.b	%00000111
   3805  722c		       03		      .byte.b	%00000011
   3806  722d		       03		      .byte.b	%00000011
   3807  722e		       03		      .byte.b	%00000011
   3808  722f		       03		      .byte.b	%00000011
   3809  7230		       03		      .byte.b	%00000011
   3810  7231		       03		      .byte.b	%00000011
   3811  7232		       03		      .byte.b	%00000011
   3812  7233		       03		      .byte.b	%00000011
   3813  7234		       03		      .byte.b	%00000011
   3814  7235		       03		      .byte.b	%00000011
   3815  7236		       03		      .byte.b	%00000011
   3816  7237		       03		      .byte.b	%00000011
   3817  7238		       01		      .byte.b	%00000001
   3818  7239		       03		      .byte.b	%00000011
   3819  723a		       01		      .byte.b	%00000001
   3820  723b		       01		      .byte.b	%00000001
   3821  723c		       01		      .byte.b	%00000001
   3822  723d		       01		      .byte.b	%00000001
   3823  723e		       01		      .byte.b	%00000001
   3824  723f		       01		      .byte.b	%00000001
   3825  7240		       01		      .byte.b	%00000001
   3826  7241		       00		      .byte.b	%00000000
   3827  7242		       03		      .byte.b	%00000011
   3828  7243		       03		      .byte.b	%00000011
   3829  7244		       03		      .byte.b	%00000011
   3830  7245		       02		      .byte.b	%00000010
   3831  7246		       03		      .byte.b	%00000011
   3832  7247		       02		      .byte.b	%00000010
   3833  7248		       02		      .byte.b	%00000010
   3834  7249		       03		      .byte.b	%00000011
   3835  724a		       03		      .byte.b	%00000011
   3836  724b		       00		      .byte.b	%00000000
   3837  724c		       00		      .byte.b	%00000000
   3838  724d		       c0		      .byte.b	%11000000
   3839  724e		       10		      .byte.b	%00010000
   3840  724f		       e0		      .byte.b	%11100000
   3841  7250		       00		      .byte.b	%00000000
   3842  7251		       00		      .byte.b	%00000000
   3843  7252		       00		      .byte.b	%00000000
   3844  7253		       7c		      .byte.b	%01111100
   3845  7254		       7f		      .byte.b	%01111111
   3846  7255		       7f		      .byte.b	%01111111
   3847  7256		       7f		      .byte.b	%01111111
   3848  7257		       7f		      .byte.b	%01111111
   3849  7258		       ff		      .byte.b	%11111111
   3850  7259		       ff		      .byte.b	%11111111
   3851  725a		       ff		      .byte.b	%11111111
   3852  725b		       ff		      .byte.b	%11111111
   3853  725c		       ff		      .byte.b	%11111111
   3854  725d		       ff		      .byte.b	%11111111
   3855  725e		       ff		      .byte.b	%11111111
   3856  725f		       ff		      .byte.b	%11111111
   3857  7260		       ff		      .byte.b	%11111111
   3858  7261		       ff		      .byte.b	%11111111
   3859  7262		       ff		      .byte.b	%11111111
   3860  7263		       ff		      .byte.b	%11111111
   3861  7264		       ff		      .byte.b	%11111111
   3862  7265		       7f		      .byte.b	%01111111
   3863  7266		       f1		      .byte.b	%11110001
   3864  7267		       7a		      .byte.b	%01111010
   3865  7268		       78		      .byte.b	%01111000
   3866  7269		       fa		      .byte.b	%11111010
   3867  726a		       fa		      .byte.b	%11111010
   3868  726b		       f8		      .byte.b	%11111000
   3869  726c		       f8		      .byte.b	%11111000
   3870  726d		       00		      .byte.b	%00000000
   3871  726e		       ff		      .byte.b	%11111111
   3872  726f		       03		      .byte.b	%00000011
   3873  7270		       02		      .byte.b	%00000010
   3874  7271		       01		      .byte.b	%00000001
   3875  7272		       02		      .byte.b	%00000010
   3876  7273		       01		      .byte.b	%00000001
   3877  7274		       01		      .byte.b	%00000001
   3878  7275		       9a		      .byte.b	%10011010
   3879  7276		       67		      .byte.b	%01100111
   3880  7277		       00		      .byte.b	%00000000
   3881  7278		       00		      .byte.b	%00000000
   3882  7279		       00		      .byte.b	%00000000
   3883  727a		       40		      .byte.b	%01000000
   3884  727b		       80		      .byte.b	%10000000
   3885  727c		       00		      .byte.b	%00000000
   3886  727d		       00		      .byte.b	%00000000
   3887  727e		       00		      .byte.b	%00000000
   3888  727f		       00		      .byte.b	%00000000
   3889  7280		       00		      .byte.b	%00000000
   3890  7281		       00		      .byte.b	%00000000
   3891  7282		       00		      .byte.b	%00000000
   3892  7283		       00		      .byte.b	%00000000
   3893  7284		       1e		      .byte.b	%00011110
   3894  7285		       3f		      .byte.b	%00111111
   3895  7286		       4c		      .byte.b	%01001100
   3896  7287		       6d		      .byte.b	%01101101
   3897  7288		       6d		      .byte.b	%01101101
   3898  7289		       6d		      .byte.b	%01101101
   3899  728a		       73		      .byte.b	%01110011
   3900  728b		       3f		      .byte.b	%00111111
   3901  728c		       33		      .byte.b	%00110011
   3902  728d		       1e		      .byte.b	%00011110
   3903  728e		       0c		      .byte.b	%00001100
   3904  728f		       00		      .byte.b	%00000000
   3905  7290		       0c		      .byte.b	%00001100
   3906  7291		       00		      .byte.b	%00000000
   3907  7292		       00		      .byte.b	%00000000
   3908  7293		       00		      .byte.b	%00000000
   3909  7294		       00		      .byte.b	%00000000
   3910  7295		       50		      .byte.b	%01010000
   3911  7296		       14		      .byte.b	%00010100
   3912  7297		       34		      .byte.b	%00110100
   3913  7298		       16		      .byte.b	%00010110
   3914  7299		       00		      .byte.b	%00000000
   3915  729a		       ff		      .byte.b	%11111111
   3916  729b		       20		      .byte.b	%00100000
   3917  729c		       20		      .byte.b	%00100000
   3918  729d		       3f		      .byte.b	%00111111
   3919  729e		       20		      .byte.b	%00100000
   3920  729f		       20		      .byte.b	%00100000
   3921  72a0		       3f		      .byte.b	%00111111
   3922  72a1		       99		      .byte.b	%10011001
   3923  72a2		       66		      .byte.b	%01100110
   3924  72a3		       00		      .byte.b	%00000000
   3925  72a4		       00		      .byte.b	%00000000
   3926  72a5		       00		      .byte.b	%00000000
   3927  72a6		       00		      .byte.b	%00000000
   3928  72a7		       00		      .byte.b	%00000000
   3929  72a8		       00		      .byte.b	%00000000
   3930  72a9		       00		      .byte.b	%00000000
   3931  72aa		       00		      .byte.b	%00000000
   3932  72ab		       00		      .byte.b	%00000000
   3933  72ac		       00		      .byte.b	%00000000
   3934  72ad		       00		      .byte.b	%00000000
   3935  72ae		       04		      .byte.b	%00000100
   3936  72af		       04		      .byte.b	%00000100
   3937  72b0		       04		      .byte.b	%00000100
   3938  72b1		       04		      .byte.b	%00000100
   3939  72b2		       0d		      .byte.b	%00001101
   3940  72b3		       0d		      .byte.b	%00001101
   3941  72b4		       0d		      .byte.b	%00001101
   3942  72b5		       0d		      .byte.b	%00001101
   3943  72b6		       0d		      .byte.b	%00001101
   3944  72b7		       8c		      .byte.b	%10001100
   3945  72b8		       cc		      .byte.b	%11001100
   3946  72b9		       cc		      .byte.b	%11001100
   3947  72ba		       ec		      .byte.b	%11101100
   3948  72bb		       ec		      .byte.b	%11101100
   3949  72bc		       ec		      .byte.b	%11101100
   3950  72bd		       ec		      .byte.b	%11101100
   3951  72be		       ec		      .byte.b	%11101100
   3952  72bf		       ec		      .byte.b	%11101100
   3953  72c0		       88		      .byte.b	%10001000
   3954  72c1		       0b		      .byte.b	%00001011
   3955  72c2		       8b		      .byte.b	%10001011
   3956  72c3		       ab		      .byte.b	%10101011
   3957  72c4		       68		      .byte.b	%01101000
   3958  72c5		       00		      .byte.b	%00000000
   3959  72c6		       6f		      .byte.b	%01101111
   3960  72c7		       e8		      .byte.b	%11101000
   3961  72c8		       e8		      .byte.b	%11101000
   3962  72c9		       ef		      .byte.b	%11101111
   3963  72ca		       e8		      .byte.b	%11101000
   3964  72cb		       e8		      .byte.b	%11101000
   3965  72cc		       ef		      .byte.b	%11101111
   3966  72cd		       c9		      .byte.b	%11001001
   3967  72ce		       8e		      .byte.b	%10001110
   3968  72cf		       50		      .byte.b	%01010000
   3969  72d0				   playercolorL0104_0
   3970  72d0		       0c		      .byte.b	$0C
   3971  72d1		       0c		      .byte.b	$0C
   3972  72d2		       0c		      .byte.b	$0C
   3973  72d3		       0c		      .byte.b	$0C
   3974  72d4		       0a		      .byte.b	$0A
   3975  72d5		       0a		      .byte.b	$0A
   3976  72d6		       0a		      .byte.b	$0A
   3977  72d7		       0a		      .byte.b	$0A
   3978  72d8		       08		      .byte.b	$08
   3979  72d9		       08		      .byte.b	$08
   3980  72da		       08		      .byte.b	$08
   3981  72db		       08		      .byte.b	$08
   3982  72dc		       06		      .byte.b	$06
   3983  72dd		       06		      .byte.b	$06
   3984  72de		       06		      .byte.b	$06
   3985  72df		       04		      .byte.b	$04
   3986  72e0		       04		      .byte.b	$04
   3987  72e1		       04		      .byte.b	$04
   3988  72e2		       02		      .byte.b	$02
   3989  72e3		       02		      .byte.b	$02
   3990  72e4				   playerL0105_0
   3991  72e4		       1c		      .byte.b	%00011100
   3992  72e5		       26		      .byte.b	%00100110
   3993  72e6		       4f		      .byte.b	%01001111
   3994  72e7		       d1		      .byte.b	%11010001
   3995  72e8		       dd		      .byte.b	%11011101
   3996  72e9		       bb		      .byte.b	%10111011
   3997  72ea		       8b		      .byte.b	%10001011
   3998  72eb		       73		      .byte.b	%01110011
   3999  72ec		       26		      .byte.b	%00100110
   4000  72ed		       1c		      .byte.b	%00011100
   4001  72ee		       04		      .byte.b	%00000100
   4002  72ef		       04		      .byte.b	%00000100
   4003  72f0		       04		      .byte.b	%00000100
   4004  72f1		       0e		      .byte.b	%00001110
   4005  72f2		       1f		      .byte.b	%00011111
   4006  72f3		       1f		      .byte.b	%00011111
   4007  72f4				   playercolorL0106_1
   4008  72f4		       3a		      .byte.b	$3A
   4009  72f5		       06		      .byte.b	$06
   4010  72f6		       06		      .byte.b	$06
   4011  72f7		       06		      .byte.b	$06
   4012  72f8		       46		      .byte.b	$46
   4013  72f9		       44		      .byte.b	$44
   4014  72fa		       44		      .byte.b	$44
   4015  72fb		       42		      .byte.b	$42
   4016  72fc		       28		      .byte.b	$28
   4017  72fd		       2a		      .byte.b	$2A
   4018  72fe		       2c		      .byte.b	$2C
   4019  72ff				   playerL0107_1
   4020  72ff		       20		      .byte.b	%00100000
   4021  7300		       00		      .byte.b	%00000000
   4022  7301		       20		      .byte.b	%00100000
   4023  7302		       20		      .byte.b	%00100000
   4024  7303		       70		      .byte.b	%01110000
   4025  7304		       a0		      .byte.b	%10100000
   4026  7305		       e0		      .byte.b	%11100000
   4027  7306		       a0		      .byte.b	%10100000
   4028  7307		       40		      .byte.b	%01000000
   4029  7308		       40		      .byte.b	%01000000
   4030  7309		       40		      .byte.b	%01000000
   4031  730a				   playfieldcolorL0111
   4032  730a		       0e		      .byte.b	$0E
   4033  730b		       0e		      .byte.b	$0E
   4034  730c		       0e		      .byte.b	$0E
   4035  730d		       0e		      .byte.b	$0E
   4036  730e		       02		      .byte.b	$02
   4037  730f		       02		      .byte.b	$02
   4038  7310		       02		      .byte.b	$02
   4039  7311		       0e		      .byte.b	$0E
   4040  7312		       0e		      .byte.b	$0E
   4041  7313		       0e		      .byte.b	$0E
   4042  7314		       0e		      .byte.b	$0E
   4043  7315		       0e		      .byte.b	$0E
   4044  7316		       0e		      .byte.b	$0E
   4045  7317		       0e		      .byte.b	$0E
   4046  7318		       0e		      .byte.b	$0E
   4047  7319		       0e		      .byte.b	$0E
   4048  731a		       0e		      .byte.b	$0E
   4049  731b		       0e		      .byte.b	$0E
   4050  731c		       0e		      .byte.b	$0E
   4051  731d		       0e		      .byte.b	$0E
   4052  731e		       0e		      .byte.b	$0E
   4053  731f		       0e		      .byte.b	$0E
   4054  7320		       0e		      .byte.b	$0E
   4055  7321		       0e		      .byte.b	$0E
   4056  7322		       0e		      .byte.b	$0E
   4057  7323		       0e		      .byte.b	$0E
   4058  7324		       0e		      .byte.b	$0E
   4059  7325		       0e		      .byte.b	$0E
   4060  7326		       02		      .byte.b	$02
   4061  7327		       02		      .byte.b	$02
   4062  7328		       02		      .byte.b	$02
   4063  7329		       02		      .byte.b	$02
   4064  732a		       02		      .byte.b	$02
   4065  732b		       02		      .byte.b	$02
   4066  732c		       02		      .byte.b	$02
   4067  732d		       02		      .byte.b	$02
   4068  732e		       02		      .byte.b	$02
   4069  732f		       02		      .byte.b	$02
   4070  7330		       02		      .byte.b	$02
   4071  7331		       02		      .byte.b	$02
   4072  7332		       02		      .byte.b	$02
   4073  7333		       02		      .byte.b	$02
   4074  7334		       02		      .byte.b	$02
   4075  7335		       c8		      .byte.b	$C8
   4076  7336				   backgroundcolorL0112
   4077  7336		       00		      .byte.b	$00
   4078  7337		       00		      .byte.b	$00
   4079  7338		       00		      .byte.b	$00
   4080  7339		       00		      .byte.b	$00
   4081  733a		       00		      .byte.b	$00
   4082  733b		       00		      .byte.b	$00
   4083  733c		       00		      .byte.b	$00
   4084  733d		       00		      .byte.b	$00
   4085  733e		       00		      .byte.b	$00
   4086  733f		       00		      .byte.b	$00
   4087  7340		       00		      .byte.b	$00
   4088  7341		       00		      .byte.b	$00
   4089  7342		       00		      .byte.b	$00
   4090  7343		       00		      .byte.b	$00
   4091  7344		       00		      .byte.b	$00
   4092  7345		       00		      .byte.b	$00
   4093  7346		       00		      .byte.b	$00
   4094  7347		       00		      .byte.b	$00
   4095  7348		       00		      .byte.b	$00
   4096  7349		       00		      .byte.b	$00
   4097  734a		       00		      .byte.b	$00
   4098  734b		       00		      .byte.b	$00
   4099  734c		       00		      .byte.b	$00
   4100  734d		       00		      .byte.b	$00
   4101  734e		       00		      .byte.b	$00
   4102  734f		       00		      .byte.b	$00
   4103  7350		       00		      .byte.b	$00
   4104  7351		       00		      .byte.b	$00
   4105  7352		       00		      .byte.b	$00
   4106  7353		       00		      .byte.b	$00
   4107  7354		       00		      .byte.b	$00
   4108  7355		       00		      .byte.b	$00
   4109  7356		       00		      .byte.b	$00
   4110  7357		       00		      .byte.b	$00
   4111  7358		       00		      .byte.b	$00
   4112  7359		       00		      .byte.b	$00
   4113  735a		       00		      .byte.b	$00
   4114  735b		       00		      .byte.b	$00
   4115  735c		       00		      .byte.b	$00
   4116  735d		       00		      .byte.b	$00
   4117  735e		       00		      .byte.b	$00
   4118  735f		       00		      .byte.b	$00
   4119  7360		       00		      .byte.b	$00
   4120  7361		       00		      .byte.b	$00
   4121  7362				   PF_data2
   4122  7362		       00		      .byte.b	%00000000
   4123  7363		       00		      .byte.b	%00000000
   4124  7364		       00		      .byte.b	%00000000
   4125  7365		       00		      .byte.b	%00000000
   4126  7366		       00		      .byte.b	%00000000
   4127  7367		       00		      .byte.b	%00000000
   4128  7368		       00		      .byte.b	%00000000
   4129  7369		       00		      .byte.b	%00000000
   4130  736a		       00		      .byte.b	%00000000
   4131  736b		       00		      .byte.b	%00000000
   4132  736c		       00		      .byte.b	%00000000
   4133  736d		       00		      .byte.b	%00000000
   4134  736e		       00		      .byte.b	%00000000
   4135  736f		       00		      .byte.b	%00000000
   4136  7370		       00		      .byte.b	%00000000
   4137  7371		       00		      .byte.b	%00000000
   4138  7372		       01		      .byte.b	%00000001
   4139  7373		       00		      .byte.b	%00000000
   4140  7374		       03		      .byte.b	%00000011
   4141  7375		       03		      .byte.b	%00000011
   4142  7376		       03		      .byte.b	%00000011
   4143  7377		       03		      .byte.b	%00000011
   4144  7378		       03		      .byte.b	%00000011
   4145  7379		       07		      .byte.b	%00000111
   4146  737a		       00		      .byte.b	%00000000
   4147  737b		       00		      .byte.b	%00000000
   4148  737c		       00		      .byte.b	%00000000
   4149  737d		       00		      .byte.b	%00000000
   4150  737e		       00		      .byte.b	%00000000
   4151  737f		       00		      .byte.b	%00000000
   4152  7380		       00		      .byte.b	%00000000
   4153  7381		       00		      .byte.b	%00000000
   4154  7382		       00		      .byte.b	%00000000
   4155  7383		       00		      .byte.b	%00000000
   4156  7384		       00		      .byte.b	%00000000
   4157  7385		       00		      .byte.b	%00000000
   4158  7386		       00		      .byte.b	%00000000
   4159  7387		       00		      .byte.b	%00000000
   4160  7388		       00		      .byte.b	%00000000
   4161  7389		       00		      .byte.b	%00000000
   4162  738a		       00		      .byte.b	%00000000
   4163  738b		       00		      .byte.b	%00000000
   4164  738c		       00		      .byte.b	%00000000
   4165  738d		       00		      .byte.b	%00000000
   4166  738e		       00		      .byte.b	%00000000
   4167  738f		       c0		      .byte.b	%11000000
   4168  7390		       00		      .byte.b	%00000000
   4169  7391		       00		      .byte.b	%00000000
   4170  7392		       00		      .byte.b	%00000000
   4171  7393		       00		      .byte.b	%00000000
   4172  7394		       00		      .byte.b	%00000000
   4173  7395		       00		      .byte.b	%00000000
   4174  7396		       00		      .byte.b	%00000000
   4175  7397		       00		      .byte.b	%00000000
   4176  7398		       00		      .byte.b	%00000000
   4177  7399		       07		      .byte.b	%00000111
   4178  739a		       07		      .byte.b	%00000111
   4179  739b		       07		      .byte.b	%00000111
   4180  739c		       07		      .byte.b	%00000111
   4181  739d		       3f		      .byte.b	%00111111
   4182  739e		       3b		      .byte.b	%00111011
   4183  739f		       38		      .byte.b	%00111000
   4184  73a0		       39		      .byte.b	%00111001
   4185  73a1		       39		      .byte.b	%00111001
   4186  73a2		       1d		      .byte.b	%00011101
   4187  73a3		       01		      .byte.b	%00000001
   4188  73a4		       01		      .byte.b	%00000001
   4189  73a5		       00		      .byte.b	%00000000
   4190  73a6		       00		      .byte.b	%00000000
   4191  73a7		       00		      .byte.b	%00000000
   4192  73a8		       00		      .byte.b	%00000000
   4193  73a9		       00		      .byte.b	%00000000
   4194  73aa		       00		      .byte.b	%00000000
   4195  73ab		       00		      .byte.b	%00000000
   4196  73ac		       00		      .byte.b	%00000000
   4197  73ad		       00		      .byte.b	%00000000
   4198  73ae		       00		      .byte.b	%00000000
   4199  73af		       00		      .byte.b	%00000000
   4200  73b0		       00		      .byte.b	%00000000
   4201  73b1		       00		      .byte.b	%00000000
   4202  73b2		       00		      .byte.b	%00000000
   4203  73b3		       00		      .byte.b	%00000000
   4204  73b4		       00		      .byte.b	%00000000
   4205  73b5		       00		      .byte.b	%00000000
   4206  73b6		       00		      .byte.b	%00000000
   4207  73b7		       00		      .byte.b	%00000000
   4208  73b8		       00		      .byte.b	%00000000
   4209  73b9		       00		      .byte.b	%00000000
   4210  73ba		       00		      .byte.b	%00000000
   4211  73bb		       00		      .byte.b	%00000000
   4212  73bc		       00		      .byte.b	%00000000
   4213  73bd		       00		      .byte.b	%00000000
   4214  73be		       00		      .byte.b	%00000000
   4215  73bf		       00		      .byte.b	%00000000
   4216  73c0		       00		      .byte.b	%00000000
   4217  73c1		       db		      .byte.b	%11011011
   4218  73c2		       6e		      .byte.b	%01101110
   4219  73c3		       6a		      .byte.b	%01101010
   4220  73c4		       00		      .byte.b	%00000000
   4221  73c5		       00		      .byte.b	%00000000
   4222  73c6		       1e		      .byte.b	%00011110
   4223  73c7		       3f		      .byte.b	%00111111
   4224  73c8		       4c		      .byte.b	%01001100
   4225  73c9		       6d		      .byte.b	%01101101
   4226  73ca		       6d		      .byte.b	%01101101
   4227  73cb		       6d		      .byte.b	%01101101
   4228  73cc		       73		      .byte.b	%01110011
   4229  73cd		       3f		      .byte.b	%00111111
   4230  73ce		       33		      .byte.b	%00110011
   4231  73cf		       1e		      .byte.b	%00011110
   4232  73d0		       0c		      .byte.b	%00001100
   4233  73d1		       00		      .byte.b	%00000000
   4234  73d2		       0c		      .byte.b	%00001100
   4235  73d3		       00		      .byte.b	%00000000
   4236  73d4		       f1		      .byte.b	%11110001
   4237  73d5		       01		      .byte.b	%00000001
   4238  73d6		       00		      .byte.b	%00000000
   4239  73d7		       00		      .byte.b	%00000000
   4240  73d8		       00		      .byte.b	%00000000
   4241  73d9		       00		      .byte.b	%00000000
   4242  73da		       00		      .byte.b	%00000000
   4243  73db		       00		      .byte.b	%00000000
   4244  73dc		       00		      .byte.b	%00000000
   4245  73dd		       00		      .byte.b	%00000000
   4246  73de		       00		      .byte.b	%00000000
   4247  73df		       00		      .byte.b	%00000000
   4248  73e0		       00		      .byte.b	%00000000
   4249  73e1		       00		      .byte.b	%00000000
   4250  73e2		       00		      .byte.b	%00000000
   4251  73e3		       00		      .byte.b	%00000000
   4252  73e4		       00		      .byte.b	%00000000
   4253  73e5		       00		      .byte.b	%00000000
   4254  73e6		       00		      .byte.b	%00000000
   4255  73e7		       00		      .byte.b	%00000000
   4256  73e8		       00		      .byte.b	%00000000
   4257  73e9		       00		      .byte.b	%00000000
   4258  73ea		       00		      .byte.b	%00000000
   4259  73eb		       00		      .byte.b	%00000000
   4260  73ec		       00		      .byte.b	%00000000
   4261  73ed		       01		      .byte.b	%00000001
   4262  73ee		       01		      .byte.b	%00000001
   4263  73ef		       01		      .byte.b	%00000001
   4264  73f0		       00		      .byte.b	%00000000
   4265  73f1		       00		      .byte.b	%00000000
   4266  73f2		       00		      .byte.b	%00000000
   4267  73f3		       00		      .byte.b	%00000000
   4268  73f4		       01		      .byte.b	%00000001
   4269  73f5		       01		      .byte.b	%00000001
   4270  73f6		       01		      .byte.b	%00000001
   4271  73f7		       01		      .byte.b	%00000001
   4272  73f8		       01		      .byte.b	%00000001
   4273  73f9		       00		      .byte.b	%00000000
   4274  73fa		       00		      .byte.b	%00000000
   4275  73fb		       00		      .byte.b	%00000000
   4276  73fc		       00		      .byte.b	%00000000
   4277  73fd		       00		      .byte.b	%00000000
   4278  73fe		       00		      .byte.b	%00000000
   4279  73ff		       00		      .byte.b	%00000000
   4280  7400		       01		      .byte.b	%00000001
   4281  7401		       01		      .byte.b	%00000001
   4282  7402		       00		      .byte.b	%00000000
   4283  7403		       00		      .byte.b	%00000000
   4284  7404		       00		      .byte.b	%00000000
   4285  7405		       00		      .byte.b	%00000000
   4286  7406		       00		      .byte.b	%00000000
   4287  7407		       00		      .byte.b	%00000000
   4288  7408		       00		      .byte.b	%00000000
   4289  7409		       00		      .byte.b	%00000000
   4290  740a		       00		      .byte.b	%00000000
   4291  740b		       00		      .byte.b	%00000000
   4292  740c		       00		      .byte.b	%00000000
   4293  740d		       00		      .byte.b	%00000000
   4294  740e		       00		      .byte.b	%00000000
   4295  740f		       00		      .byte.b	%00000000
   4296  7410		       00		      .byte.b	%00000000
   4297  7411		       50		      .byte.b	%01010000
   4298  7412				   playercolorL0116_0
   4299  7412		       0c		      .byte.b	$0C
   4300  7413		       0c		      .byte.b	$0C
   4301  7414		       0c		      .byte.b	$0C
   4302  7415		       0c		      .byte.b	$0C
   4303  7416		       0a		      .byte.b	$0A
   4304  7417		       0a		      .byte.b	$0A
   4305  7418		       0a		      .byte.b	$0A
   4306  7419		       0a		      .byte.b	$0A
   4307  741a		       08		      .byte.b	$08
   4308  741b		       08		      .byte.b	$08
   4309  741c		       08		      .byte.b	$08
   4310  741d		       08		      .byte.b	$08
   4311  741e		       06		      .byte.b	$06
   4312  741f		       06		      .byte.b	$06
   4313  7420		       06		      .byte.b	$06
   4314  7421		       04		      .byte.b	$04
   4315  7422		       04		      .byte.b	$04
   4316  7423		       04		      .byte.b	$04
   4317  7424		       02		      .byte.b	$02
   4318  7425		       02		      .byte.b	$02
   4319  7426				   playerL0117_0
   4320  7426		       1c		      .byte.b	%00011100
   4321  7427		       22		      .byte.b	%00100010
   4322  7428		       41		      .byte.b	%01000001
   4323  7429		       81		      .byte.b	%10000001
   4324  742a		       81		      .byte.b	%10000001
   4325  742b		       81		      .byte.b	%10000001
   4326  742c		       81		      .byte.b	%10000001
   4327  742d		       41		      .byte.b	%01000001
   4328  742e		       22		      .byte.b	%00100010
   4329  742f		       1c		      .byte.b	%00011100
   4330  7430		       04		      .byte.b	%00000100
   4331  7431		       04		      .byte.b	%00000100
   4332  7432		       04		      .byte.b	%00000100
   4333  7433		       0e		      .byte.b	%00001110
   4334  7434		       1f		      .byte.b	%00011111
   4335  7435		       1f		      .byte.b	%00011111
   4336  7436				   playercolorL0118_1
   4337  7436		       3a		      .byte.b	$3A
   4338  7437		       06		      .byte.b	$06
   4339  7438		       06		      .byte.b	$06
   4340  7439		       06		      .byte.b	$06
   4341  743a		       46		      .byte.b	$46
   4342  743b		       44		      .byte.b	$44
   4343  743c		       44		      .byte.b	$44
   4344  743d		       42		      .byte.b	$42
   4345  743e		       28		      .byte.b	$28
   4346  743f		       2a		      .byte.b	$2A
   4347  7440		       2c		      .byte.b	$2C
   4348  7441				   playerL0119_1
   4349  7441		       20		      .byte.b	%00100000
   4350  7442		       00		      .byte.b	%00000000
   4351  7443		       20		      .byte.b	%00100000
   4352  7444		       20		      .byte.b	%00100000
   4353  7445		       70		      .byte.b	%01110000
   4354  7446		       a0		      .byte.b	%10100000
   4355  7447		       e0		      .byte.b	%11100000
   4356  7448		       a0		      .byte.b	%10100000
   4357  7449		       40		      .byte.b	%01000000
   4358  744a		       40		      .byte.b	%01000000
   4359  744b		       40		      .byte.b	%01000000
   4360  744c				   playfieldcolorL0128
   4361  744c		       08		      .byte.b	$08
   4362  744d		       08		      .byte.b	$08
   4363  744e		       08		      .byte.b	$08
   4364  744f		       08		      .byte.b	$08
   4365  7450		       08		      .byte.b	$08
   4366  7451		       08		      .byte.b	$08
   4367  7452		       08		      .byte.b	$08
   4368  7453		       08		      .byte.b	$08
   4369  7454		       08		      .byte.b	$08
   4370  7455		       06		      .byte.b	$06
   4371  7456		       06		      .byte.b	$06
   4372  7457		       06		      .byte.b	$06
   4373  7458		       06		      .byte.b	$06
   4374  7459		       06		      .byte.b	$06
   4375  745a		       04		      .byte.b	$04
   4376  745b		       04		      .byte.b	$04
   4377  745c		       04		      .byte.b	$04
   4378  745d		       04		      .byte.b	$04
   4379  745e		       04		      .byte.b	$04
   4380  745f		       04		      .byte.b	$04
   4381  7460		       04		      .byte.b	$04
   4382  7461		       02		      .byte.b	$02
   4383  7462		       02		      .byte.b	$02
   4384  7463		       02		      .byte.b	$02
   4385  7464		       02		      .byte.b	$02
   4386  7465		       02		      .byte.b	$02
   4387  7466		       02		      .byte.b	$02
   4388  7467		       02		      .byte.b	$02
   4389  7468		       02		      .byte.b	$02
   4390  7469		       02		      .byte.b	$02
   4391  746a		       02		      .byte.b	$02
   4392  746b		       02		      .byte.b	$02
   4393  746c		       02		      .byte.b	$02
   4394  746d		       02		      .byte.b	$02
   4395  746e		       02		      .byte.b	$02
   4396  746f		       02		      .byte.b	$02
   4397  7470		       02		      .byte.b	$02
   4398  7471		       02		      .byte.b	$02
   4399  7472		       02		      .byte.b	$02
   4400  7473		       02		      .byte.b	$02
   4401  7474		       02		      .byte.b	$02
   4402  7475		       02		      .byte.b	$02
   4403  7476		       02		      .byte.b	$02
   4404  7477		       c8		      .byte.b	$C8
   4405  7478				   backgroundcolorL0129
   4406  7478		       00		      .byte.b	$00
   4407  7479		       00		      .byte.b	$00
   4408  747a		       00		      .byte.b	$00
   4409  747b		       00		      .byte.b	$00
   4410  747c		       00		      .byte.b	$00
   4411  747d		       00		      .byte.b	$00
   4412  747e		       00		      .byte.b	$00
   4413  747f		       00		      .byte.b	$00
   4414  7480		       00		      .byte.b	$00
   4415  7481		       00		      .byte.b	$00
   4416  7482		       00		      .byte.b	$00
   4417  7483		       00		      .byte.b	$00
   4418  7484		       00		      .byte.b	$00
   4419  7485		       00		      .byte.b	$00
   4420  7486		       00		      .byte.b	$00
   4421  7487		       00		      .byte.b	$00
   4422  7488		       00		      .byte.b	$00
   4423  7489		       00		      .byte.b	$00
   4424  748a		       00		      .byte.b	$00
   4425  748b		       00		      .byte.b	$00
   4426  748c		       00		      .byte.b	$00
   4427  748d		       00		      .byte.b	$00
   4428  748e		       00		      .byte.b	$00
   4429  748f		       00		      .byte.b	$00
   4430  7490		       00		      .byte.b	$00
   4431  7491		       00		      .byte.b	$00
   4432  7492		       00		      .byte.b	$00
   4433  7493		       00		      .byte.b	$00
   4434  7494		       00		      .byte.b	$00
   4435  7495		       00		      .byte.b	$00
   4436  7496		       00		      .byte.b	$00
   4437  7497		       00		      .byte.b	$00
   4438  7498		       00		      .byte.b	$00
   4439  7499		       00		      .byte.b	$00
   4440  749a		       00		      .byte.b	$00
   4441  749b		       00		      .byte.b	$00
   4442  749c		       00		      .byte.b	$00
   4443  749d		       00		      .byte.b	$00
   4444  749e		       00		      .byte.b	$00
   4445  749f		       00		      .byte.b	$00
   4446  74a0		       00		      .byte.b	$00
   4447  74a1		       00		      .byte.b	$00
   4448  74a2		       00		      .byte.b	$00
   4449  74a3		       00		      .byte.b	$00
   4450  74a4				   PF_data3
   4451  74a4		       00		      .byte.b	%00000000
   4452  74a5		       00		      .byte.b	%00000000
   4453  74a6		       00		      .byte.b	%00000000
   4454  74a7		       00		      .byte.b	%00000000
   4455  74a8		       00		      .byte.b	%00000000
   4456  74a9		       01		      .byte.b	%00000001
   4457  74aa		       07		      .byte.b	%00000111
   4458  74ab		       07		      .byte.b	%00000111
   4459  74ac		       00		      .byte.b	%00000000
   4460  74ad		       07		      .byte.b	%00000111
   4461  74ae		       07		      .byte.b	%00000111
   4462  74af		       07		      .byte.b	%00000111
   4463  74b0		       07		      .byte.b	%00000111
   4464  74b1		       17		      .byte.b	%00010111
   4465  74b2		       17		      .byte.b	%00010111
   4466  74b3		       17		      .byte.b	%00010111
   4467  74b4		       17		      .byte.b	%00010111
   4468  74b5		       57		      .byte.b	%01010111
   4469  74b6		       57		      .byte.b	%01010111
   4470  74b7		       57		      .byte.b	%01010111
   4471  74b8		       d7		      .byte.b	%11010111
   4472  74b9		       d7		      .byte.b	%11010111
   4473  74ba		       d0		      .byte.b	%11010000
   4474  74bb		       df		      .byte.b	%11011111
   4475  74bc		       df		      .byte.b	%11011111
   4476  74bd		       df		      .byte.b	%11011111
   4477  74be		       1f		      .byte.b	%00011111
   4478  74bf		       40		      .byte.b	%01000000
   4479  74c0		       46		      .byte.b	%01000110
   4480  74c1		       46		      .byte.b	%01000110
   4481  74c2		       59		      .byte.b	%01011001
   4482  74c3		       59		      .byte.b	%01011001
   4483  74c4		       40		      .byte.b	%01000000
   4484  74c5		       5f		      .byte.b	%01011111
   4485  74c6		       5f		      .byte.b	%01011111
   4486  74c7		       5f		      .byte.b	%01011111
   4487  74c8		       5f		      .byte.b	%01011111
   4488  74c9		       5f		      .byte.b	%01011111
   4489  74ca		       5f		      .byte.b	%01011111
   4490  74cb		       5f		      .byte.b	%01011111
   4491  74cc		       5f		      .byte.b	%01011111
   4492  74cd		       5f		      .byte.b	%01011111
   4493  74ce		       ff		      .byte.b	%11111111
   4494  74cf		       00		      .byte.b	%00000000
   4495  74d0		       00		      .byte.b	%00000000
   4496  74d1		       00		      .byte.b	%00000000
   4497  74d2		       00		      .byte.b	%00000000
   4498  74d3		       00		      .byte.b	%00000000
   4499  74d4		       f0		      .byte.b	%11110000
   4500  74d5		       ff		      .byte.b	%11111111
   4501  74d6		       ff		      .byte.b	%11111111
   4502  74d7		       81		      .byte.b	%10000001
   4503  74d8		       be		      .byte.b	%10111110
   4504  74d9		       bf		      .byte.b	%10111111
   4505  74da		       bf		      .byte.b	%10111111
   4506  74db		       bf		      .byte.b	%10111111
   4507  74dc		       bf		      .byte.b	%10111111
   4508  74dd		       bf		      .byte.b	%10111111
   4509  74de		       bf		      .byte.b	%10111111
   4510  74df		       bf		      .byte.b	%10111111
   4511  74e0		       bf		      .byte.b	%10111111
   4512  74e1		       bf		      .byte.b	%10111111
   4513  74e2		       bf		      .byte.b	%10111111
   4514  74e3		       bf		      .byte.b	%10111111
   4515  74e4		       bf		      .byte.b	%10111111
   4516  74e5		       bf		      .byte.b	%10111111
   4517  74e6		       be		      .byte.b	%10111110
   4518  74e7		       81		      .byte.b	%10000001
   4519  74e8		       ff		      .byte.b	%11111111
   4520  74e9		       ff		      .byte.b	%11111111
   4521  74ea		       ff		      .byte.b	%11111111
   4522  74eb		       fc		      .byte.b	%11111100
   4523  74ec		       02		      .byte.b	%00000010
   4524  74ed		       66		      .byte.b	%01100110
   4525  74ee		       65		      .byte.b	%01100101
   4526  74ef		       99		      .byte.b	%10011001
   4527  74f0		       98		      .byte.b	%10011000
   4528  74f1		       03		      .byte.b	%00000011
   4529  74f2		       ff		      .byte.b	%11111111
   4530  74f3		       ff		      .byte.b	%11111111
   4531  74f4		       ff		      .byte.b	%11111111
   4532  74f5		       ff		      .byte.b	%11111111
   4533  74f6		       ff		      .byte.b	%11111111
   4534  74f7		       ff		      .byte.b	%11111111
   4535  74f8		       ff		      .byte.b	%11111111
   4536  74f9		       ff		      .byte.b	%11111111
   4537  74fa		       ff		      .byte.b	%11111111
   4538  74fb		       00		      .byte.b	%00000000
   4539  74fc		       00		      .byte.b	%00000000
   4540  74fd		       00		      .byte.b	%00000000
   4541  74fe		       03		      .byte.b	%00000011
   4542  74ff		       7c		      .byte.b	%01111100
   4543  7500		       c0		      .byte.b	%11000000
   4544  7501		       a0		      .byte.b	%10100000
   4545  7502		       a0		      .byte.b	%10100000
   4546  7503		       a0		      .byte.b	%10100000
   4547  7504		       a0		      .byte.b	%10100000
   4548  7505		       a0		      .byte.b	%10100000
   4549  7506		       a0		      .byte.b	%10100000
   4550  7507		       a0		      .byte.b	%10100000
   4551  7508		       a0		      .byte.b	%10100000
   4552  7509		       a0		      .byte.b	%10100000
   4553  750a		       a0		      .byte.b	%10100000
   4554  750b		       a0		      .byte.b	%10100000
   4555  750c		       a0		      .byte.b	%10100000
   4556  750d		       a0		      .byte.b	%10100000
   4557  750e		       a0		      .byte.b	%10100000
   4558  750f		       a0		      .byte.b	%10100000
   4559  7510		       a0		      .byte.b	%10100000
   4560  7511		       a0		      .byte.b	%10100000
   4561  7512		       a0		      .byte.b	%10100000
   4562  7513		       a0		      .byte.b	%10100000
   4563  7514		       a0		      .byte.b	%10100000
   4564  7515		       a0		      .byte.b	%10100000
   4565  7516		       a0		      .byte.b	%10100000
   4566  7517		       a0		      .byte.b	%10100000
   4567  7518		       20		      .byte.b	%00100000
   4568  7519		       20		      .byte.b	%00100000
   4569  751a		       20		      .byte.b	%00100000
   4570  751b		       a0		      .byte.b	%10100000
   4571  751c		       a0		      .byte.b	%10100000
   4572  751d		       20		      .byte.b	%00100000
   4573  751e		       a0		      .byte.b	%10100000
   4574  751f		       a0		      .byte.b	%10100000
   4575  7520		       a0		      .byte.b	%10100000
   4576  7521		       a0		      .byte.b	%10100000
   4577  7522		       a0		      .byte.b	%10100000
   4578  7523		       a0		      .byte.b	%10100000
   4579  7524		       a0		      .byte.b	%10100000
   4580  7525		       a0		      .byte.b	%10100000
   4581  7526		       ff		      .byte.b	%11111111
   4582  7527		       00		      .byte.b	%00000000
   4583  7528		       00		      .byte.b	%00000000
   4584  7529		       f8		      .byte.b	%11111000
   4585  752a		       f7		      .byte.b	%11110111
   4586  752b		       f0		      .byte.b	%11110000
   4587  752c		       f0		      .byte.b	%11110000
   4588  752d		       f0		      .byte.b	%11110000
   4589  752e		       f0		      .byte.b	%11110000
   4590  752f		       f0		      .byte.b	%11110000
   4591  7530		       f0		      .byte.b	%11110000
   4592  7531		       f0		      .byte.b	%11110000
   4593  7532		       f0		      .byte.b	%11110000
   4594  7533		       e0		      .byte.b	%11100000
   4595  7534		       e0		      .byte.b	%11100000
   4596  7535		       e0		      .byte.b	%11100000
   4597  7536		       e0		      .byte.b	%11100000
   4598  7537		       e0		      .byte.b	%11100000
   4599  7538		       c0		      .byte.b	%11000000
   4600  7539		       c0		      .byte.b	%11000000
   4601  753a		       00		      .byte.b	%00000000
   4602  753b		       f0		      .byte.b	%11110000
   4603  753c		       90		      .byte.b	%10010000
   4604  753d		       00		      .byte.b	%00000000
   4605  753e		       f0		      .byte.b	%11110000
   4606  753f		       90		      .byte.b	%10010000
   4607  7540		       00		      .byte.b	%00000000
   4608  7541		       90		      .byte.b	%10010000
   4609  7542		       f0		      .byte.b	%11110000
   4610  7543		       00		      .byte.b	%00000000
   4611  7544		       90		      .byte.b	%10010000
   4612  7545		       f0		      .byte.b	%11110000
   4613  7546		       00		      .byte.b	%00000000
   4614  7547		       c0		      .byte.b	%11000000
   4615  7548		       c0		      .byte.b	%11000000
   4616  7549		       80		      .byte.b	%10000000
   4617  754a		       80		      .byte.b	%10000000
   4618  754b		       00		      .byte.b	%00000000
   4619  754c		       00		      .byte.b	%00000000
   4620  754d		       00		      .byte.b	%00000000
   4621  754e		       00		      .byte.b	%00000000
   4622  754f		       00		      .byte.b	%00000000
   4623  7550		       00		      .byte.b	%00000000
   4624  7551		       00		      .byte.b	%00000000
   4625  7552		       ff		      .byte.b	%11111111
   4626  7553		       50		      .byte.b	%01010000
   4627  7554				   playfieldcolorL0133
   4628  7554		       08		      .byte.b	$08
   4629  7555		       08		      .byte.b	$08
   4630  7556		       08		      .byte.b	$08
   4631  7557		       08		      .byte.b	$08
   4632  7558		       08		      .byte.b	$08
   4633  7559		       08		      .byte.b	$08
   4634  755a		       08		      .byte.b	$08
   4635  755b		       08		      .byte.b	$08
   4636  755c		       08		      .byte.b	$08
   4637  755d		       06		      .byte.b	$06
   4638  755e		       06		      .byte.b	$06
   4639  755f		       06		      .byte.b	$06
   4640  7560		       06		      .byte.b	$06
   4641  7561		       c8		      .byte.b	$C8
   4642  7562		       c8		      .byte.b	$C8
   4643  7563		       c8		      .byte.b	$C8
   4644  7564		       c8		      .byte.b	$C8
   4645  7565		       c8		      .byte.b	$C8
   4646  7566		       c8		      .byte.b	$C8
   4647  7567		       c8		      .byte.b	$C8
   4648  7568		       42		      .byte.b	$42
   4649  7569		       42		      .byte.b	$42
   4650  756a		       c8		      .byte.b	$C8
   4651  756b		       0e		      .byte.b	$0E
   4652  756c		       0e		      .byte.b	$0E
   4653  756d		       0e		      .byte.b	$0E
   4654  756e		       c8		      .byte.b	$C8
   4655  756f		       42		      .byte.b	$42
   4656  7570		       42		      .byte.b	$42
   4657  7571		       02		      .byte.b	$02
   4658  7572		       02		      .byte.b	$02
   4659  7573		       02		      .byte.b	$02
   4660  7574		       02		      .byte.b	$02
   4661  7575		       02		      .byte.b	$02
   4662  7576		       02		      .byte.b	$02
   4663  7577		       02		      .byte.b	$02
   4664  7578		       02		      .byte.b	$02
   4665  7579		       02		      .byte.b	$02
   4666  757a		       02		      .byte.b	$02
   4667  757b		       02		      .byte.b	$02
   4668  757c		       02		      .byte.b	$02
   4669  757d		       02		      .byte.b	$02
   4670  757e		       02		      .byte.b	$02
   4671  757f		       c8		      .byte.b	$C8
   4672  7580				   backgroundcolorL0134
   4673  7580		       00		      .byte.b	$00
   4674  7581		       00		      .byte.b	$00
   4675  7582		       00		      .byte.b	$00
   4676  7583		       00		      .byte.b	$00
   4677  7584		       00		      .byte.b	$00
   4678  7585		       00		      .byte.b	$00
   4679  7586		       00		      .byte.b	$00
   4680  7587		       00		      .byte.b	$00
   4681  7588		       00		      .byte.b	$00
   4682  7589		       00		      .byte.b	$00
   4683  758a		       00		      .byte.b	$00
   4684  758b		       00		      .byte.b	$00
   4685  758c		       00		      .byte.b	$00
   4686  758d		       00		      .byte.b	$00
   4687  758e		       00		      .byte.b	$00
   4688  758f		       00		      .byte.b	$00
   4689  7590		       00		      .byte.b	$00
   4690  7591		       00		      .byte.b	$00
   4691  7592		       00		      .byte.b	$00
   4692  7593		       00		      .byte.b	$00
   4693  7594		       00		      .byte.b	$00
   4694  7595		       00		      .byte.b	$00
   4695  7596		       00		      .byte.b	$00
   4696  7597		       00		      .byte.b	$00
   4697  7598		       00		      .byte.b	$00
   4698  7599		       00		      .byte.b	$00
   4699  759a		       00		      .byte.b	$00
   4700  759b		       00		      .byte.b	$00
   4701  759c		       00		      .byte.b	$00
   4702  759d		       00		      .byte.b	$00
   4703  759e		       00		      .byte.b	$00
   4704  759f		       00		      .byte.b	$00
   4705  75a0		       00		      .byte.b	$00
   4706  75a1		       00		      .byte.b	$00
   4707  75a2		       00		      .byte.b	$00
   4708  75a3		       00		      .byte.b	$00
   4709  75a4		       00		      .byte.b	$00
   4710  75a5		       00		      .byte.b	$00
   4711  75a6		       00		      .byte.b	$00
   4712  75a7		       00		      .byte.b	$00
   4713  75a8		       00		      .byte.b	$00
   4714  75a9		       00		      .byte.b	$00
   4715  75aa		       00		      .byte.b	$00
   4716  75ab		       00		      .byte.b	$00
   4717  75ac				   PF_data4
   4718  75ac		       00		      .byte.b	%00000000
   4719  75ad		       00		      .byte.b	%00000000
   4720  75ae		       00		      .byte.b	%00000000
   4721  75af		       00		      .byte.b	%00000000
   4722  75b0		       00		      .byte.b	%00000000
   4723  75b1		       00		      .byte.b	%00000000
   4724  75b2		       00		      .byte.b	%00000000
   4725  75b3		       00		      .byte.b	%00000000
   4726  75b4		       00		      .byte.b	%00000000
   4727  75b5		       00		      .byte.b	%00000000
   4728  75b6		       00		      .byte.b	%00000000
   4729  75b7		       00		      .byte.b	%00000000
   4730  75b8		       00		      .byte.b	%00000000
   4731  75b9		       00		      .byte.b	%00000000
   4732  75ba		       00		      .byte.b	%00000000
   4733  75bb		       00		      .byte.b	%00000000
   4734  75bc		       00		      .byte.b	%00000000
   4735  75bd		       00		      .byte.b	%00000000
   4736  75be		       00		      .byte.b	%00000000
   4737  75bf		       00		      .byte.b	%00000000
   4738  75c0		       00		      .byte.b	%00000000
   4739  75c1		       00		      .byte.b	%00000000
   4740  75c2		       00		      .byte.b	%00000000
   4741  75c3		       00		      .byte.b	%00000000
   4742  75c4		       00		      .byte.b	%00000000
   4743  75c5		       00		      .byte.b	%00000000
   4744  75c6		       00		      .byte.b	%00000000
   4745  75c7		       00		      .byte.b	%00000000
   4746  75c8		       00		      .byte.b	%00000000
   4747  75c9		       00		      .byte.b	%00000000
   4748  75ca		       00		      .byte.b	%00000000
   4749  75cb		       00		      .byte.b	%00000000
   4750  75cc		       00		      .byte.b	%00000000
   4751  75cd		       00		      .byte.b	%00000000
   4752  75ce		       00		      .byte.b	%00000000
   4753  75cf		       00		      .byte.b	%00000000
   4754  75d0		       00		      .byte.b	%00000000
   4755  75d1		       00		      .byte.b	%00000000
   4756  75d2		       00		      .byte.b	%00000000
   4757  75d3		       00		      .byte.b	%00000000
   4758  75d4		       00		      .byte.b	%00000000
   4759  75d5		       00		      .byte.b	%00000000
   4760  75d6		       00		      .byte.b	%00000000
   4761  75d7		       00		      .byte.b	%00000000
   4762  75d8		       00		      .byte.b	%00000000
   4763  75d9		       00		      .byte.b	%00000000
   4764  75da		       00		      .byte.b	%00000000
   4765  75db		       00		      .byte.b	%00000000
   4766  75dc		       00		      .byte.b	%00000000
   4767  75dd		       00		      .byte.b	%00000000
   4768  75de		       00		      .byte.b	%00000000
   4769  75df		       00		      .byte.b	%00000000
   4770  75e0		       00		      .byte.b	%00000000
   4771  75e1		       00		      .byte.b	%00000000
   4772  75e2		       00		      .byte.b	%00000000
   4773  75e3		       00		      .byte.b	%00000000
   4774  75e4		       00		      .byte.b	%00000000
   4775  75e5		       00		      .byte.b	%00000000
   4776  75e6		       00		      .byte.b	%00000000
   4777  75e7		       00		      .byte.b	%00000000
   4778  75e8		       00		      .byte.b	%00000000
   4779  75e9		       00		      .byte.b	%00000000
   4780  75ea		       00		      .byte.b	%00000000
   4781  75eb		       00		      .byte.b	%00000000
   4782  75ec		       00		      .byte.b	%00000000
   4783  75ed		       00		      .byte.b	%00000000
   4784  75ee		       00		      .byte.b	%00000000
   4785  75ef		       00		      .byte.b	%00000000
   4786  75f0		       00		      .byte.b	%00000000
   4787  75f1		       00		      .byte.b	%00000000
   4788  75f2		       00		      .byte.b	%00000000
   4789  75f3		       00		      .byte.b	%00000000
   4790  75f4		       00		      .byte.b	%00000000
   4791  75f5		       00		      .byte.b	%00000000
   4792  75f6		       00		      .byte.b	%00000000
   4793  75f7		       00		      .byte.b	%00000000
   4794  75f8		       00		      .byte.b	%00000000
   4795  75f9		       00		      .byte.b	%00000000
   4796  75fa		       00		      .byte.b	%00000000
   4797  75fb		       00		      .byte.b	%00000000
   4798  75fc		       00		      .byte.b	%00000000
   4799  75fd		       00		      .byte.b	%00000000
   4800  75fe		       00		      .byte.b	%00000000
   4801  75ff		       00		      .byte.b	%00000000
   4802  7600		       00		      .byte.b	%00000000
   4803  7601		       00		      .byte.b	%00000000
   4804  7602		       00		      .byte.b	%00000000
   4805  7603		       00		      .byte.b	%00000000
   4806  7604		       00		      .byte.b	%00000000
   4807  7605		       00		      .byte.b	%00000000
   4808  7606		       00		      .byte.b	%00000000
   4809  7607		       00		      .byte.b	%00000000
   4810  7608		       00		      .byte.b	%00000000
   4811  7609		       00		      .byte.b	%00000000
   4812  760a		       00		      .byte.b	%00000000
   4813  760b		       00		      .byte.b	%00000000
   4814  760c		       00		      .byte.b	%00000000
   4815  760d		       00		      .byte.b	%00000000
   4816  760e		       00		      .byte.b	%00000000
   4817  760f		       00		      .byte.b	%00000000
   4818  7610		       00		      .byte.b	%00000000
   4819  7611		       00		      .byte.b	%00000000
   4820  7612		       00		      .byte.b	%00000000
   4821  7613		       00		      .byte.b	%00000000
   4822  7614		       00		      .byte.b	%00000000
   4823  7615		       00		      .byte.b	%00000000
   4824  7616		       00		      .byte.b	%00000000
   4825  7617		       00		      .byte.b	%00000000
   4826  7618		       00		      .byte.b	%00000000
   4827  7619		       00		      .byte.b	%00000000
   4828  761a		       00		      .byte.b	%00000000
   4829  761b		       00		      .byte.b	%00000000
   4830  761c		       00		      .byte.b	%00000000
   4831  761d		       00		      .byte.b	%00000000
   4832  761e		       00		      .byte.b	%00000000
   4833  761f		       00		      .byte.b	%00000000
   4834  7620		       00		      .byte.b	%00000000
   4835  7621		       00		      .byte.b	%00000000
   4836  7622		       00		      .byte.b	%00000000
   4837  7623		       00		      .byte.b	%00000000
   4838  7624		       00		      .byte.b	%00000000
   4839  7625		       00		      .byte.b	%00000000
   4840  7626		       00		      .byte.b	%00000000
   4841  7627		       00		      .byte.b	%00000000
   4842  7628		       00		      .byte.b	%00000000
   4843  7629		       00		      .byte.b	%00000000
   4844  762a		       00		      .byte.b	%00000000
   4845  762b		       00		      .byte.b	%00000000
   4846  762c		       00		      .byte.b	%00000000
   4847  762d		       00		      .byte.b	%00000000
   4848  762e		       00		      .byte.b	%00000000
   4849  762f		       00		      .byte.b	%00000000
   4850  7630		       00		      .byte.b	%00000000
   4851  7631		       00		      .byte.b	%00000000
   4852  7632		       00		      .byte.b	%00000000
   4853  7633		       00		      .byte.b	%00000000
   4854  7634		       00		      .byte.b	%00000000
   4855  7635		       00		      .byte.b	%00000000
   4856  7636		       00		      .byte.b	%00000000
   4857  7637		       00		      .byte.b	%00000000
   4858  7638		       00		      .byte.b	%00000000
   4859  7639		       00		      .byte.b	%00000000
   4860  763a		       00		      .byte.b	%00000000
   4861  763b		       00		      .byte.b	%00000000
   4862  763c		       00		      .byte.b	%00000000
   4863  763d		       00		      .byte.b	%00000000
   4864  763e		       00		      .byte.b	%00000000
   4865  763f		       00		      .byte.b	%00000000
   4866  7640		       00		      .byte.b	%00000000
   4867  7641		       00		      .byte.b	%00000000
   4868  7642		       00		      .byte.b	%00000000
   4869  7643		       00		      .byte.b	%00000000
   4870  7644		       60		      .byte.b	%01100000
   4871  7645		       f0		      .byte.b	%11110000
   4872  7646		       00		      .byte.b	%00000000
   4873  7647		       60		      .byte.b	%01100000
   4874  7648		       f0		      .byte.b	%11110000
   4875  7649		       60		      .byte.b	%01100000
   4876  764a		       00		      .byte.b	%00000000
   4877  764b		       f0		      .byte.b	%11110000
   4878  764c		       60		      .byte.b	%01100000
   4879  764d		       00		      .byte.b	%00000000
   4880  764e		       00		      .byte.b	%00000000
   4881  764f		       00		      .byte.b	%00000000
   4882  7650		       00		      .byte.b	%00000000
   4883  7651		       00		      .byte.b	%00000000
   4884  7652		       00		      .byte.b	%00000000
   4885  7653		       00		      .byte.b	%00000000
   4886  7654		       00		      .byte.b	%00000000
   4887  7655		       00		      .byte.b	%00000000
   4888  7656		       00		      .byte.b	%00000000
   4889  7657		       00		      .byte.b	%00000000
   4890  7658		       00		      .byte.b	%00000000
   4891  7659		       00		      .byte.b	%00000000
   4892  765a		       00		      .byte.b	%00000000
   4893  765b		       50		      .byte.b	%01010000
   4894  765c				   playfieldcolorL0138
   4895  765c		       1a		      .byte.b	$1A
   4896  765d		       1a		      .byte.b	$1A
   4897  765e		       1a		      .byte.b	$1A
   4898  765f		       1a		      .byte.b	$1A
   4899  7660		       1a		      .byte.b	$1A
   4900  7661		       1a		      .byte.b	$1A
   4901  7662		       1a		      .byte.b	$1A
   4902  7663		       1a		      .byte.b	$1A
   4903  7664		       1a		      .byte.b	$1A
   4904  7665		       1a		      .byte.b	$1A
   4905  7666		       1a		      .byte.b	$1A
   4906  7667		       1a		      .byte.b	$1A
   4907  7668		       1a		      .byte.b	$1A
   4908  7669		       1a		      .byte.b	$1A
   4909  766a		       1a		      .byte.b	$1A
   4910  766b		       1a		      .byte.b	$1A
   4911  766c		       1a		      .byte.b	$1A
   4912  766d		       1a		      .byte.b	$1A
   4913  766e		       1a		      .byte.b	$1A
   4914  766f		       1a		      .byte.b	$1A
   4915  7670		       1a		      .byte.b	$1A
   4916  7671		       1a		      .byte.b	$1A
   4917  7672		       1a		      .byte.b	$1A
   4918  7673		       1a		      .byte.b	$1A
   4919  7674		       1a		      .byte.b	$1A
   4920  7675		       1a		      .byte.b	$1A
   4921  7676		       1a		      .byte.b	$1A
   4922  7677		       1a		      .byte.b	$1A
   4923  7678		       1a		      .byte.b	$1A
   4924  7679		       1a		      .byte.b	$1A
   4925  767a		       1a		      .byte.b	$1A
   4926  767b		       1a		      .byte.b	$1A
   4927  767c		       1a		      .byte.b	$1A
   4928  767d		       1a		      .byte.b	$1A
   4929  767e		       1a		      .byte.b	$1A
   4930  767f		       1a		      .byte.b	$1A
   4931  7680		       1a		      .byte.b	$1A
   4932  7681		       1a		      .byte.b	$1A
   4933  7682		       1a		      .byte.b	$1A
   4934  7683		       1a		      .byte.b	$1A
   4935  7684		       1a		      .byte.b	$1A
   4936  7685		       1a		      .byte.b	$1A
   4937  7686		       1a		      .byte.b	$1A
   4938  7687		       c8		      .byte.b	$C8
   4939  7688				   PF_data5
   4940  7688		       00		      .byte.b	%00000000
   4941  7689		       00		      .byte.b	%00000000
   4942  768a		       00		      .byte.b	%00000000
   4943  768b		       00		      .byte.b	%00000000
   4944  768c		       00		      .byte.b	%00000000
   4945  768d		       00		      .byte.b	%00000000
   4946  768e		       00		      .byte.b	%00000000
   4947  768f		       00		      .byte.b	%00000000
   4948  7690		       00		      .byte.b	%00000000
   4949  7691		       01		      .byte.b	%00000001
   4950  7692		       03		      .byte.b	%00000011
   4951  7693		       02		      .byte.b	%00000010
   4952  7694		       03		      .byte.b	%00000011
   4953  7695		       01		      .byte.b	%00000001
   4954  7696		       03		      .byte.b	%00000011
   4955  7697		       03		      .byte.b	%00000011
   4956  7698		       03		      .byte.b	%00000011
   4957  7699		       03		      .byte.b	%00000011
   4958  769a		       03		      .byte.b	%00000011
   4959  769b		       03		      .byte.b	%00000011
   4960  769c		       01		      .byte.b	%00000001
   4961  769d		       00		      .byte.b	%00000000
   4962  769e		       00		      .byte.b	%00000000
   4963  769f		       00		      .byte.b	%00000000
   4964  76a0		       00		      .byte.b	%00000000
   4965  76a1		       00		      .byte.b	%00000000
   4966  76a2		       00		      .byte.b	%00000000
   4967  76a3		       00		      .byte.b	%00000000
   4968  76a4		       00		      .byte.b	%00000000
   4969  76a5		       00		      .byte.b	%00000000
   4970  76a6		       00		      .byte.b	%00000000
   4971  76a7		       00		      .byte.b	%00000000
   4972  76a8		       00		      .byte.b	%00000000
   4973  76a9		       00		      .byte.b	%00000000
   4974  76aa		       00		      .byte.b	%00000000
   4975  76ab		       00		      .byte.b	%00000000
   4976  76ac		       00		      .byte.b	%00000000
   4977  76ad		       00		      .byte.b	%00000000
   4978  76ae		       00		      .byte.b	%00000000
   4979  76af		       00		      .byte.b	%00000000
   4980  76b0		       00		      .byte.b	%00000000
   4981  76b1		       00		      .byte.b	%00000000
   4982  76b2		       ff		      .byte.b	%11111111
   4983  76b3		       00		      .byte.b	%00000000
   4984  76b4		       00		      .byte.b	%00000000
   4985  76b5		       00		      .byte.b	%00000000
   4986  76b6		       00		      .byte.b	%00000000
   4987  76b7		       00		      .byte.b	%00000000
   4988  76b8		       00		      .byte.b	%00000000
   4989  76b9		       00		      .byte.b	%00000000
   4990  76ba		       00		      .byte.b	%00000000
   4991  76bb		       00		      .byte.b	%00000000
   4992  76bc		       00		      .byte.b	%00000000
   4993  76bd		       0d		      .byte.b	%00001101
   4994  76be		       1d		      .byte.b	%00011101
   4995  76bf		       30		      .byte.b	%00110000
   4996  76c0		       18		      .byte.b	%00011000
   4997  76c1		       0d		      .byte.b	%00001101
   4998  76c2		       18		      .byte.b	%00011000
   4999  76c3		       18		      .byte.b	%00011000
   5000  76c4		       18		      .byte.b	%00011000
   5001  76c5		       18		      .byte.b	%00011000
   5002  76c6		       18		      .byte.b	%00011000
   5003  76c7		       38		      .byte.b	%00111000
   5004  76c8		       01		      .byte.b	%00000001
   5005  76c9		       00		      .byte.b	%00000000
   5006  76ca		       00		      .byte.b	%00000000
   5007  76cb		       00		      .byte.b	%00000000
   5008  76cc		       00		      .byte.b	%00000000
   5009  76cd		       00		      .byte.b	%00000000
   5010  76ce		       00		      .byte.b	%00000000
   5011  76cf		       00		      .byte.b	%00000000
   5012  76d0		       00		      .byte.b	%00000000
   5013  76d1		       00		      .byte.b	%00000000
   5014  76d2		       00		      .byte.b	%00000000
   5015  76d3		       00		      .byte.b	%00000000
   5016  76d4		       00		      .byte.b	%00000000
   5017  76d5		       00		      .byte.b	%00000000
   5018  76d6		       00		      .byte.b	%00000000
   5019  76d7		       00		      .byte.b	%00000000
   5020  76d8		       00		      .byte.b	%00000000
   5021  76d9		       00		      .byte.b	%00000000
   5022  76da		       00		      .byte.b	%00000000
   5023  76db		       00		      .byte.b	%00000000
   5024  76dc		       00		      .byte.b	%00000000
   5025  76dd		       00		      .byte.b	%00000000
   5026  76de		       ff		      .byte.b	%11111111
   5027  76df		       00		      .byte.b	%00000000
   5028  76e0		       00		      .byte.b	%00000000
   5029  76e1		       00		      .byte.b	%00000000
   5030  76e2		       00		      .byte.b	%00000000
   5031  76e3		       00		      .byte.b	%00000000
   5032  76e4		       00		      .byte.b	%00000000
   5033  76e5		       00		      .byte.b	%00000000
   5034  76e6		       08		      .byte.b	%00001000
   5035  76e7		       19		      .byte.b	%00011001
   5036  76e8		       19		      .byte.b	%00011001
   5037  76e9		       19		      .byte.b	%00011001
   5038  76ea		       18		      .byte.b	%00011000
   5039  76eb		       01		      .byte.b	%00000001
   5040  76ec		       19		      .byte.b	%00011001
   5041  76ed		       19		      .byte.b	%00011001
   5042  76ee		       19		      .byte.b	%00011001
   5043  76ef		       08		      .byte.b	%00001000
   5044  76f0		       07		      .byte.b	%00000111
   5045  76f1		       0f		      .byte.b	%00001111
   5046  76f2		       12		      .byte.b	%00010010
   5047  76f3		       02		      .byte.b	%00000010
   5048  76f4		       10		      .byte.b	%00010000
   5049  76f5		       18		      .byte.b	%00011000
   5050  76f6		       00		      .byte.b	%00000000
   5051  76f7		       00		      .byte.b	%00000000
   5052  76f8		       00		      .byte.b	%00000000
   5053  76f9		       07		      .byte.b	%00000111
   5054  76fa		       03		      .byte.b	%00000011
   5055  76fb		       00		      .byte.b	%00000000
   5056  76fc		       00		      .byte.b	%00000000
   5057  76fd		       00		      .byte.b	%00000000
   5058  76fe		       02		      .byte.b	%00000010
   5059  76ff		       01		      .byte.b	%00000001
   5060  7700		       00		      .byte.b	%00000000
   5061  7701		       00		      .byte.b	%00000000
   5062  7702		       00		      .byte.b	%00000000
   5063  7703		       00		      .byte.b	%00000000
   5064  7704		       00		      .byte.b	%00000000
   5065  7705		       00		      .byte.b	%00000000
   5066  7706		       00		      .byte.b	%00000000
   5067  7707		       00		      .byte.b	%00000000
   5068  7708		       00		      .byte.b	%00000000
   5069  7709		       00		      .byte.b	%00000000
   5070  770a		       ff		      .byte.b	%11111111
   5071  770b		       00		      .byte.b	%00000000
   5072  770c		       00		      .byte.b	%00000000
   5073  770d		       00		      .byte.b	%00000000
   5074  770e		       00		      .byte.b	%00000000
   5075  770f		       00		      .byte.b	%00000000
   5076  7710		       00		      .byte.b	%00000000
   5077  7711		       00		      .byte.b	%00000000
   5078  7712		       01		      .byte.b	%00000001
   5079  7713		       01		      .byte.b	%00000001
   5080  7714		       03		      .byte.b	%00000011
   5081  7715		       03		      .byte.b	%00000011
   5082  7716		       00		      .byte.b	%00000000
   5083  7717		       03		      .byte.b	%00000011
   5084  7718		       03		      .byte.b	%00000011
   5085  7719		       03		      .byte.b	%00000011
   5086  771a		       03		      .byte.b	%00000011
   5087  771b		       03		      .byte.b	%00000011
   5088  771c		       01		      .byte.b	%00000001
   5089  771d		       03		      .byte.b	%00000011
   5090  771e		       06		      .byte.b	%00000110
   5091  771f		       04		      .byte.b	%00000100
   5092  7720		       0c		      .byte.b	%00001100
   5093  7721		       0c		      .byte.b	%00001100
   5094  7722		       08		      .byte.b	%00001000
   5095  7723		       0c		      .byte.b	%00001100
   5096  7724		       08		      .byte.b	%00001000
   5097  7725		       0f		      .byte.b	%00001111
   5098  7726		       07		      .byte.b	%00000111
   5099  7727		       00		      .byte.b	%00000000
   5100  7728		       04		      .byte.b	%00000100
   5101  7729		       0e		      .byte.b	%00001110
   5102  772a		       0e		      .byte.b	%00001110
   5103  772b		       0f		      .byte.b	%00001111
   5104  772c		       0f		      .byte.b	%00001111
   5105  772d		       0e		      .byte.b	%00001110
   5106  772e		       0e		      .byte.b	%00001110
   5107  772f		       0c		      .byte.b	%00001100
   5108  7730		       0c		      .byte.b	%00001100
   5109  7731		       0c		      .byte.b	%00001100
   5110  7732		       08		      .byte.b	%00001000
   5111  7733		       08		      .byte.b	%00001000
   5112  7734		       00		      .byte.b	%00000000
   5113  7735		       00		      .byte.b	%00000000
   5114  7736		       ff		      .byte.b	%11111111
   5115  7737		       50		      .byte.b	%01010000
   5116  7738				   playercolorL0141_0
   5117  7738		       0c		      .byte.b	$0C
   5118  7739		       0c		      .byte.b	$0C
   5119  773a		       0c		      .byte.b	$0C
   5120  773b		       0c		      .byte.b	$0C
   5121  773c		       0c		      .byte.b	$0C
   5122  773d		       02		      .byte.b	$02
   5123  773e		       02		      .byte.b	$02
   5124  773f		       02		      .byte.b	$02
   5125  7740		       08		      .byte.b	$08
   5126  7741		       08		      .byte.b	$08
   5127  7742		       08		      .byte.b	$08
   5128  7743		       06		      .byte.b	$06
   5129  7744		       06		      .byte.b	$06
   5130  7745		       06		      .byte.b	$06
   5131  7746		       04		      .byte.b	$04
   5132  7747		       04		      .byte.b	$04
   5133  7748		       04		      .byte.b	$04
   5134  7749		       02		      .byte.b	$02
   5135  774a		       02		      .byte.b	$02
   5136  774b		       02		      .byte.b	$02
   5137  774c		       5c		      .byte.b	$5C
   5138  774d		       5c		      .byte.b	$5C
   5139  774e		       0c		      .byte.b	$0C
   5140  774f		       0c		      .byte.b	$0C
   5141  7750		       0c		      .byte.b	$0C
   5142  7751		       0c		      .byte.b	$0C
   5143  7752				   playerL0142_0
   5144  7752		       20		      .byte.b	%00100000
   5145  7753		       52		      .byte.b	%01010010
   5146  7754		       55		      .byte.b	%01010101
   5147  7755		       25		      .byte.b	%00100101
   5148  7756		       22		      .byte.b	%00100010
   5149  7757		       18		      .byte.b	%00011000
   5150  7758		       0c		      .byte.b	%00001100
   5151  7759		       08		      .byte.b	%00001000
   5152  775a		       70		      .byte.b	%01110000
   5153  775b		       74		      .byte.b	%01110100
   5154  775c		       f4		      .byte.b	%11110100
   5155  775d		       f6		      .byte.b	%11110110
   5156  775e		       f6		      .byte.b	%11110110
   5157  775f		       f6		      .byte.b	%11110110
   5158  7760		       f6		      .byte.b	%11110110
   5159  7761		       f6		      .byte.b	%11110110
   5160  7762		       6e		      .byte.b	%01101110
   5161  7763		       6e		      .byte.b	%01101110
   5162  7764		       2c		      .byte.b	%00101100
   5163  7765		       2c		      .byte.b	%00101100
   5164  7766		       60		      .byte.b	%01100000
   5165  7767		       1c		      .byte.b	%00011100
   5166  7768		       82		      .byte.b	%10000010
   5167  7769		       82		      .byte.b	%10000010
   5168  776a		       28		      .byte.b	%00101000
   5169  776b		       28		      .byte.b	%00101000
   5170  776c				   playfieldcolorL0150
   5171  776c		       08		      .byte.b	$08
   5172  776d		       08		      .byte.b	$08
   5173  776e		       08		      .byte.b	$08
   5174  776f		       08		      .byte.b	$08
   5175  7770		       08		      .byte.b	$08
   5176  7771		       08		      .byte.b	$08
   5177  7772		       08		      .byte.b	$08
   5178  7773		       08		      .byte.b	$08
   5179  7774		       08		      .byte.b	$08
   5180  7775		       06		      .byte.b	$06
   5181  7776		       06		      .byte.b	$06
   5182  7777		       06		      .byte.b	$06
   5183  7778		       06		      .byte.b	$06
   5184  7779		       06		      .byte.b	$06
   5185  777a		       04		      .byte.b	$04
   5186  777b		       04		      .byte.b	$04
   5187  777c		       04		      .byte.b	$04
   5188  777d		       04		      .byte.b	$04
   5189  777e		       04		      .byte.b	$04
   5190  777f		       04		      .byte.b	$04
   5191  7780		       04		      .byte.b	$04
   5192  7781		       02		      .byte.b	$02
   5193  7782		       02		      .byte.b	$02
   5194  7783		       02		      .byte.b	$02
   5195  7784		       02		      .byte.b	$02
   5196  7785		       02		      .byte.b	$02
   5197  7786		       02		      .byte.b	$02
   5198  7787		       02		      .byte.b	$02
   5199  7788		       02		      .byte.b	$02
   5200  7789		       02		      .byte.b	$02
   5201  778a		       02		      .byte.b	$02
   5202  778b		       02		      .byte.b	$02
   5203  778c		       02		      .byte.b	$02
   5204  778d		       02		      .byte.b	$02
   5205  778e		       02		      .byte.b	$02
   5206  778f		       02		      .byte.b	$02
   5207  7790		       02		      .byte.b	$02
   5208  7791		       02		      .byte.b	$02
   5209  7792		       02		      .byte.b	$02
   5210  7793		       02		      .byte.b	$02
   5211  7794		       02		      .byte.b	$02
   5212  7795		       02		      .byte.b	$02
   5213  7796		       02		      .byte.b	$02
   5214  7797		       c8		      .byte.b	$C8
   5215  7798				   backgroundcolorL0151
   5216  7798		       00		      .byte.b	$00
   5217  7799		       00		      .byte.b	$00
   5218  779a		       00		      .byte.b	$00
   5219  779b		       00		      .byte.b	$00
   5220  779c		       00		      .byte.b	$00
   5221  779d		       00		      .byte.b	$00
   5222  779e		       00		      .byte.b	$00
   5223  779f		       00		      .byte.b	$00
   5224  77a0		       00		      .byte.b	$00
   5225  77a1		       00		      .byte.b	$00
   5226  77a2		       00		      .byte.b	$00
   5227  77a3		       00		      .byte.b	$00
   5228  77a4		       00		      .byte.b	$00
   5229  77a5		       00		      .byte.b	$00
   5230  77a6		       00		      .byte.b	$00
   5231  77a7		       00		      .byte.b	$00
   5232  77a8		       00		      .byte.b	$00
   5233  77a9		       00		      .byte.b	$00
   5234  77aa		       00		      .byte.b	$00
   5235  77ab		       00		      .byte.b	$00
   5236  77ac		       00		      .byte.b	$00
   5237  77ad		       00		      .byte.b	$00
   5238  77ae		       00		      .byte.b	$00
   5239  77af		       00		      .byte.b	$00
   5240  77b0		       00		      .byte.b	$00
   5241  77b1		       00		      .byte.b	$00
   5242  77b2		       00		      .byte.b	$00
   5243  77b3		       00		      .byte.b	$00
   5244  77b4		       00		      .byte.b	$00
   5245  77b5		       00		      .byte.b	$00
   5246  77b6		       00		      .byte.b	$00
   5247  77b7		       00		      .byte.b	$00
   5248  77b8		       00		      .byte.b	$00
   5249  77b9		       00		      .byte.b	$00
   5250  77ba		       00		      .byte.b	$00
   5251  77bb		       00		      .byte.b	$00
   5252  77bc		       00		      .byte.b	$00
   5253  77bd		       00		      .byte.b	$00
   5254  77be		       00		      .byte.b	$00
   5255  77bf		       00		      .byte.b	$00
   5256  77c0		       00		      .byte.b	$00
   5257  77c1		       00		      .byte.b	$00
   5258  77c2		       00		      .byte.b	$00
   5259  77c3		       00		      .byte.b	$00
   5260  77c4				   PF_data6
   5261  77c4		       00		      .byte.b	%00000000
   5262  77c5		       f8		      .byte.b	%11111000
   5263  77c6		       f7		      .byte.b	%11110111
   5264  77c7		       f0		      .byte.b	%11110000
   5265  77c8		       f0		      .byte.b	%11110000
   5266  77c9		       f0		      .byte.b	%11110000
   5267  77ca		       f0		      .byte.b	%11110000
   5268  77cb		       f0		      .byte.b	%11110000
   5269  77cc		       f0		      .byte.b	%11110000
   5270  77cd		       f0		      .byte.b	%11110000
   5271  77ce		       f0		      .byte.b	%11110000
   5272  77cf		       f0		      .byte.b	%11110000
   5273  77d0		       f0		      .byte.b	%11110000
   5274  77d1		       f0		      .byte.b	%11110000
   5275  77d2		       f0		      .byte.b	%11110000
   5276  77d3		       f0		      .byte.b	%11110000
   5277  77d4		       f0		      .byte.b	%11110000
   5278  77d5		       f0		      .byte.b	%11110000
   5279  77d6		       00		      .byte.b	%00000000
   5280  77d7		       f0		      .byte.b	%11110000
   5281  77d8		       90		      .byte.b	%10010000
   5282  77d9		       00		      .byte.b	%00000000
   5283  77da		       f0		      .byte.b	%11110000
   5284  77db		       90		      .byte.b	%10010000
   5285  77dc		       00		      .byte.b	%00000000
   5286  77dd		       90		      .byte.b	%10010000
   5287  77de		       f0		      .byte.b	%11110000
   5288  77df		       00		      .byte.b	%00000000
   5289  77e0		       90		      .byte.b	%10010000
   5290  77e1		       f0		      .byte.b	%11110000
   5291  77e2		       00		      .byte.b	%00000000
   5292  77e3		       f0		      .byte.b	%11110000
   5293  77e4		       e0		      .byte.b	%11100000
   5294  77e5		       d0		      .byte.b	%11010000
   5295  77e6		       90		      .byte.b	%10010000
   5296  77e7		       10		      .byte.b	%00010000
   5297  77e8		       10		      .byte.b	%00010000
   5298  77e9		       10		      .byte.b	%00010000
   5299  77ea		       10		      .byte.b	%00010000
   5300  77eb		       10		      .byte.b	%00010000
   5301  77ec		       10		      .byte.b	%00010000
   5302  77ed		       10		      .byte.b	%00010000
   5303  77ee		       ff		      .byte.b	%11111111
   5304  77ef		       00		      .byte.b	%00000000
   5305  77f0		       00		      .byte.b	%00000000
   5306  77f1		       00		      .byte.b	%00000000
   5307  77f2		       03		      .byte.b	%00000011
   5308  77f3		       7c		      .byte.b	%01111100
   5309  77f4		       e0		      .byte.b	%11100000
   5310  77f5		       20		      .byte.b	%00100000
   5311  77f6		       20		      .byte.b	%00100000
   5312  77f7		       20		      .byte.b	%00100000
   5313  77f8		       20		      .byte.b	%00100000
   5314  77f9		       20		      .byte.b	%00100000
   5315  77fa		       20		      .byte.b	%00100000
   5316  77fb		       20		      .byte.b	%00100000
   5317  77fc		       20		      .byte.b	%00100000
   5318  77fd		       20		      .byte.b	%00100000
   5319  77fe		       20		      .byte.b	%00100000
   5320  77ff		       20		      .byte.b	%00100000
   5321  7800		       20		      .byte.b	%00100000
   5322  7801		       20		      .byte.b	%00100000
   5323  7802		       20		      .byte.b	%00100000
   5324  7803		       20		      .byte.b	%00100000
   5325  7804		       20		      .byte.b	%00100000
   5326  7805		       20		      .byte.b	%00100000
   5327  7806		       20		      .byte.b	%00100000
   5328  7807		       20		      .byte.b	%00100000
   5329  7808		       20		      .byte.b	%00100000
   5330  7809		       20		      .byte.b	%00100000
   5331  780a		       20		      .byte.b	%00100000
   5332  780b		       20		      .byte.b	%00100000
   5333  780c		       20		      .byte.b	%00100000
   5334  780d		       20		      .byte.b	%00100000
   5335  780e		       20		      .byte.b	%00100000
   5336  780f		       20		      .byte.b	%00100000
   5337  7810		       20		      .byte.b	%00100000
   5338  7811		       20		      .byte.b	%00100000
   5339  7812		       20		      .byte.b	%00100000
   5340  7813		       20		      .byte.b	%00100000
   5341  7814		       20		      .byte.b	%00100000
   5342  7815		       20		      .byte.b	%00100000
   5343  7816		       20		      .byte.b	%00100000
   5344  7817		       20		      .byte.b	%00100000
   5345  7818		       20		      .byte.b	%00100000
   5346  7819		       20		      .byte.b	%00100000
   5347  781a		       ff		      .byte.b	%11111111
   5348  781b		       00		      .byte.b	%00000000
   5349  781c		       00		      .byte.b	%00000000
   5350  781d		       00		      .byte.b	%00000000
   5351  781e		       00		      .byte.b	%00000000
   5352  781f		       00		      .byte.b	%00000000
   5353  7820		       f0		      .byte.b	%11110000
   5354  7821		       ff		      .byte.b	%11111111
   5355  7822		       7f		      .byte.b	%01111111
   5356  7823		       01		      .byte.b	%00000001
   5357  7824		       3e		      .byte.b	%00111110
   5358  7825		       3f		      .byte.b	%00111111
   5359  7826		       3f		      .byte.b	%00111111
   5360  7827		       3f		      .byte.b	%00111111
   5361  7828		       3f		      .byte.b	%00111111
   5362  7829		       3f		      .byte.b	%00111111
   5363  782a		       3f		      .byte.b	%00111111
   5364  782b		       3f		      .byte.b	%00111111
   5365  782c		       3f		      .byte.b	%00111111
   5366  782d		       3f		      .byte.b	%00111111
   5367  782e		       3f		      .byte.b	%00111111
   5368  782f		       3f		      .byte.b	%00111111
   5369  7830		       3f		      .byte.b	%00111111
   5370  7831		       3f		      .byte.b	%00111111
   5371  7832		       3e		      .byte.b	%00111110
   5372  7833		       00		      .byte.b	%00000000
   5373  7834		       00		      .byte.b	%00000000
   5374  7835		       00		      .byte.b	%00000000
   5375  7836		       00		      .byte.b	%00000000
   5376  7837		       00		      .byte.b	%00000000
   5377  7838		       00		      .byte.b	%00000000
   5378  7839		       00		      .byte.b	%00000000
   5379  783a		       00		      .byte.b	%00000000
   5380  783b		       00		      .byte.b	%00000000
   5381  783c		       00		      .byte.b	%00000000
   5382  783d		       00		      .byte.b	%00000000
   5383  783e		       00		      .byte.b	%00000000
   5384  783f		       00		      .byte.b	%00000000
   5385  7840		       00		      .byte.b	%00000000
   5386  7841		       00		      .byte.b	%00000000
   5387  7842		       00		      .byte.b	%00000000
   5388  7843		       00		      .byte.b	%00000000
   5389  7844		       00		      .byte.b	%00000000
   5390  7845		       00		      .byte.b	%00000000
   5391  7846		       ff		      .byte.b	%11111111
   5392  7847		       00		      .byte.b	%00000000
   5393  7848		       00		      .byte.b	%00000000
   5394  7849		       00		      .byte.b	%00000000
   5395  784a		       00		      .byte.b	%00000000
   5396  784b		       00		      .byte.b	%00000000
   5397  784c		       00		      .byte.b	%00000000
   5398  784d		       01		      .byte.b	%00000001
   5399  784e		       0f		      .byte.b	%00001111
   5400  784f		       1f		      .byte.b	%00011111
   5401  7850		       10		      .byte.b	%00010000
   5402  7851		       07		      .byte.b	%00000111
   5403  7852		       07		      .byte.b	%00000111
   5404  7853		       07		      .byte.b	%00000111
   5405  7854		       07		      .byte.b	%00000111
   5406  7855		       07		      .byte.b	%00000111
   5407  7856		       07		      .byte.b	%00000111
   5408  7857		       07		      .byte.b	%00000111
   5409  7858		       07		      .byte.b	%00000111
   5410  7859		       07		      .byte.b	%00000111
   5411  785a		       07		      .byte.b	%00000111
   5412  785b		       07		      .byte.b	%00000111
   5413  785c		       07		      .byte.b	%00000111
   5414  785d		       07		      .byte.b	%00000111
   5415  785e		       00		      .byte.b	%00000000
   5416  785f		       00		      .byte.b	%00000000
   5417  7860		       00		      .byte.b	%00000000
   5418  7861		       00		      .byte.b	%00000000
   5419  7862		       00		      .byte.b	%00000000
   5420  7863		       00		      .byte.b	%00000000
   5421  7864		       00		      .byte.b	%00000000
   5422  7865		       00		      .byte.b	%00000000
   5423  7866		       00		      .byte.b	%00000000
   5424  7867		       00		      .byte.b	%00000000
   5425  7868		       00		      .byte.b	%00000000
   5426  7869		       00		      .byte.b	%00000000
   5427  786a		       00		      .byte.b	%00000000
   5428  786b		       00		      .byte.b	%00000000
   5429  786c		       00		      .byte.b	%00000000
   5430  786d		       00		      .byte.b	%00000000
   5431  786e		       00		      .byte.b	%00000000
   5432  786f		       00		      .byte.b	%00000000
   5433  7870		       00		      .byte.b	%00000000
   5434  7871		       00		      .byte.b	%00000000
   5435  7872		       ff		      .byte.b	%11111111
   5436  7873		       50		      .byte.b	%01010000
   5437  7874				   playfieldcolorL0155
   5438  7874		       2c		      .byte.b	$2C
   5439  7875		       2c		      .byte.b	$2C
   5440  7876		       2c		      .byte.b	$2C
   5441  7877		       2c		      .byte.b	$2C
   5442  7878		       2c		      .byte.b	$2C
   5443  7879		       2c		      .byte.b	$2C
   5444  787a		       2c		      .byte.b	$2C
   5445  787b		       2c		      .byte.b	$2C
   5446  787c		       2c		      .byte.b	$2C
   5447  787d		       06		      .byte.b	$06
   5448  787e		       06		      .byte.b	$06
   5449  787f		       06		      .byte.b	$06
   5450  7880		       06		      .byte.b	$06
   5451  7881		       c8		      .byte.b	$C8
   5452  7882		       c8		      .byte.b	$C8
   5453  7883		       c8		      .byte.b	$C8
   5454  7884		       c8		      .byte.b	$C8
   5455  7885		       c8		      .byte.b	$C8
   5456  7886		       c8		      .byte.b	$C8
   5457  7887		       c8		      .byte.b	$C8
   5458  7888		       42		      .byte.b	$42
   5459  7889		       42		      .byte.b	$42
   5460  788a		       c8		      .byte.b	$C8
   5461  788b		       0e		      .byte.b	$0E
   5462  788c		       0e		      .byte.b	$0E
   5463  788d		       0e		      .byte.b	$0E
   5464  788e		       c8		      .byte.b	$C8
   5465  788f		       42		      .byte.b	$42
   5466  7890		       42		      .byte.b	$42
   5467  7891		       02		      .byte.b	$02
   5468  7892		       02		      .byte.b	$02
   5469  7893		       02		      .byte.b	$02
   5470  7894		       02		      .byte.b	$02
   5471  7895		       02		      .byte.b	$02
   5472  7896		       02		      .byte.b	$02
   5473  7897		       02		      .byte.b	$02
   5474  7898		       02		      .byte.b	$02
   5475  7899		       02		      .byte.b	$02
   5476  789a		       02		      .byte.b	$02
   5477  789b		       02		      .byte.b	$02
   5478  789c		       02		      .byte.b	$02
   5479  789d		       02		      .byte.b	$02
   5480  789e		       02		      .byte.b	$02
   5481  789f		       c8		      .byte.b	$C8
   5482  78a0				   backgroundcolorL0156
   5483  78a0		       00		      .byte.b	$00
   5484  78a1		       00		      .byte.b	$00
   5485  78a2		       00		      .byte.b	$00
   5486  78a3		       00		      .byte.b	$00
   5487  78a4		       00		      .byte.b	$00
   5488  78a5		       00		      .byte.b	$00
   5489  78a6		       00		      .byte.b	$00
   5490  78a7		       00		      .byte.b	$00
   5491  78a8		       00		      .byte.b	$00
   5492  78a9		       00		      .byte.b	$00
   5493  78aa		       00		      .byte.b	$00
   5494  78ab		       00		      .byte.b	$00
   5495  78ac		       00		      .byte.b	$00
   5496  78ad		       00		      .byte.b	$00
   5497  78ae		       00		      .byte.b	$00
   5498  78af		       00		      .byte.b	$00
   5499  78b0		       00		      .byte.b	$00
   5500  78b1		       00		      .byte.b	$00
   5501  78b2		       00		      .byte.b	$00
   5502  78b3		       00		      .byte.b	$00
   5503  78b4		       00		      .byte.b	$00
   5504  78b5		       00		      .byte.b	$00
   5505  78b6		       00		      .byte.b	$00
   5506  78b7		       00		      .byte.b	$00
   5507  78b8		       00		      .byte.b	$00
   5508  78b9		       00		      .byte.b	$00
   5509  78ba		       00		      .byte.b	$00
   5510  78bb		       00		      .byte.b	$00
   5511  78bc		       00		      .byte.b	$00
   5512  78bd		       00		      .byte.b	$00
   5513  78be		       00		      .byte.b	$00
   5514  78bf		       00		      .byte.b	$00
   5515  78c0		       00		      .byte.b	$00
   5516  78c1		       00		      .byte.b	$00
   5517  78c2		       00		      .byte.b	$00
   5518  78c3		       00		      .byte.b	$00
   5519  78c4		       00		      .byte.b	$00
   5520  78c5		       00		      .byte.b	$00
   5521  78c6		       00		      .byte.b	$00
   5522  78c7		       00		      .byte.b	$00
   5523  78c8		       00		      .byte.b	$00
   5524  78c9		       00		      .byte.b	$00
   5525  78ca		       00		      .byte.b	$00
   5526  78cb		       00		      .byte.b	$00
   5527  78cc				   PF_data7
   5528  78cc		       00		      .byte.b	%00000000
   5529  78cd		       00		      .byte.b	%00000000
   5530  78ce		       00		      .byte.b	%00000000
   5531  78cf		       00		      .byte.b	%00000000
   5532  78d0		       00		      .byte.b	%00000000
   5533  78d1		       00		      .byte.b	%00000000
   5534  78d2		       00		      .byte.b	%00000000
   5535  78d3		       00		      .byte.b	%00000000
   5536  78d4		       00		      .byte.b	%00000000
   5537  78d5		       00		      .byte.b	%00000000
   5538  78d6		       00		      .byte.b	%00000000
   5539  78d7		       00		      .byte.b	%00000000
   5540  78d8		       00		      .byte.b	%00000000
   5541  78d9		       00		      .byte.b	%00000000
   5542  78da		       00		      .byte.b	%00000000
   5543  78db		       00		      .byte.b	%00000000
   5544  78dc		       00		      .byte.b	%00000000
   5545  78dd		       00		      .byte.b	%00000000
   5546  78de		       00		      .byte.b	%00000000
   5547  78df		       00		      .byte.b	%00000000
   5548  78e0		       60		      .byte.b	%01100000
   5549  78e1		       f0		      .byte.b	%11110000
   5550  78e2		       00		      .byte.b	%00000000
   5551  78e3		       60		      .byte.b	%01100000
   5552  78e4		       f0		      .byte.b	%11110000
   5553  78e5		       60		      .byte.b	%01100000
   5554  78e6		       00		      .byte.b	%00000000
   5555  78e7		       f0		      .byte.b	%11110000
   5556  78e8		       60		      .byte.b	%01100000
   5557  78e9		       00		      .byte.b	%00000000
   5558  78ea		       00		      .byte.b	%00000000
   5559  78eb		       00		      .byte.b	%00000000
   5560  78ec		       00		      .byte.b	%00000000
   5561  78ed		       00		      .byte.b	%00000000
   5562  78ee		       00		      .byte.b	%00000000
   5563  78ef		       00		      .byte.b	%00000000
   5564  78f0		       00		      .byte.b	%00000000
   5565  78f1		       00		      .byte.b	%00000000
   5566  78f2		       00		      .byte.b	%00000000
   5567  78f3		       00		      .byte.b	%00000000
   5568  78f4		       00		      .byte.b	%00000000
   5569  78f5		       00		      .byte.b	%00000000
   5570  78f6		       00		      .byte.b	%00000000
   5571  78f7		       00		      .byte.b	%00000000
   5572  78f8		       00		      .byte.b	%00000000
   5573  78f9		       00		      .byte.b	%00000000
   5574  78fa		       00		      .byte.b	%00000000
   5575  78fb		       00		      .byte.b	%00000000
   5576  78fc		       00		      .byte.b	%00000000
   5577  78fd		       00		      .byte.b	%00000000
   5578  78fe		       00		      .byte.b	%00000000
   5579  78ff		       00		      .byte.b	%00000000
   5580  7900		       00		      .byte.b	%00000000
   5581  7901		       00		      .byte.b	%00000000
   5582  7902		       00		      .byte.b	%00000000
   5583  7903		       00		      .byte.b	%00000000
   5584  7904		       00		      .byte.b	%00000000
   5585  7905		       00		      .byte.b	%00000000
   5586  7906		       00		      .byte.b	%00000000
   5587  7907		       00		      .byte.b	%00000000
   5588  7908		       00		      .byte.b	%00000000
   5589  7909		       00		      .byte.b	%00000000
   5590  790a		       00		      .byte.b	%00000000
   5591  790b		       00		      .byte.b	%00000000
   5592  790c		       00		      .byte.b	%00000000
   5593  790d		       00		      .byte.b	%00000000
   5594  790e		       00		      .byte.b	%00000000
   5595  790f		       00		      .byte.b	%00000000
   5596  7910		       00		      .byte.b	%00000000
   5597  7911		       00		      .byte.b	%00000000
   5598  7912		       00		      .byte.b	%00000000
   5599  7913		       00		      .byte.b	%00000000
   5600  7914		       00		      .byte.b	%00000000
   5601  7915		       00		      .byte.b	%00000000
   5602  7916		       00		      .byte.b	%00000000
   5603  7917		       00		      .byte.b	%00000000
   5604  7918		       00		      .byte.b	%00000000
   5605  7919		       00		      .byte.b	%00000000
   5606  791a		       00		      .byte.b	%00000000
   5607  791b		       00		      .byte.b	%00000000
   5608  791c		       00		      .byte.b	%00000000
   5609  791d		       00		      .byte.b	%00000000
   5610  791e		       00		      .byte.b	%00000000
   5611  791f		       00		      .byte.b	%00000000
   5612  7920		       00		      .byte.b	%00000000
   5613  7921		       00		      .byte.b	%00000000
   5614  7922		       00		      .byte.b	%00000000
   5615  7923		       00		      .byte.b	%00000000
   5616  7924		       00		      .byte.b	%00000000
   5617  7925		       00		      .byte.b	%00000000
   5618  7926		       00		      .byte.b	%00000000
   5619  7927		       00		      .byte.b	%00000000
   5620  7928		       00		      .byte.b	%00000000
   5621  7929		       00		      .byte.b	%00000000
   5622  792a		       00		      .byte.b	%00000000
   5623  792b		       00		      .byte.b	%00000000
   5624  792c		       00		      .byte.b	%00000000
   5625  792d		       00		      .byte.b	%00000000
   5626  792e		       00		      .byte.b	%00000000
   5627  792f		       00		      .byte.b	%00000000
   5628  7930		       00		      .byte.b	%00000000
   5629  7931		       00		      .byte.b	%00000000
   5630  7932		       00		      .byte.b	%00000000
   5631  7933		       00		      .byte.b	%00000000
   5632  7934		       00		      .byte.b	%00000000
   5633  7935		       00		      .byte.b	%00000000
   5634  7936		       00		      .byte.b	%00000000
   5635  7937		       00		      .byte.b	%00000000
   5636  7938		       00		      .byte.b	%00000000
   5637  7939		       00		      .byte.b	%00000000
   5638  793a		       00		      .byte.b	%00000000
   5639  793b		       00		      .byte.b	%00000000
   5640  793c		       00		      .byte.b	%00000000
   5641  793d		       00		      .byte.b	%00000000
   5642  793e		       00		      .byte.b	%00000000
   5643  793f		       00		      .byte.b	%00000000
   5644  7940		       00		      .byte.b	%00000000
   5645  7941		       00		      .byte.b	%00000000
   5646  7942		       00		      .byte.b	%00000000
   5647  7943		       00		      .byte.b	%00000000
   5648  7944		       00		      .byte.b	%00000000
   5649  7945		       00		      .byte.b	%00000000
   5650  7946		       00		      .byte.b	%00000000
   5651  7947		       00		      .byte.b	%00000000
   5652  7948		       00		      .byte.b	%00000000
   5653  7949		       00		      .byte.b	%00000000
   5654  794a		       00		      .byte.b	%00000000
   5655  794b		       00		      .byte.b	%00000000
   5656  794c		       00		      .byte.b	%00000000
   5657  794d		       00		      .byte.b	%00000000
   5658  794e		       00		      .byte.b	%00000000
   5659  794f		       00		      .byte.b	%00000000
   5660  7950		       00		      .byte.b	%00000000
   5661  7951		       00		      .byte.b	%00000000
   5662  7952		       00		      .byte.b	%00000000
   5663  7953		       00		      .byte.b	%00000000
   5664  7954		       00		      .byte.b	%00000000
   5665  7955		       00		      .byte.b	%00000000
   5666  7956		       00		      .byte.b	%00000000
   5667  7957		       00		      .byte.b	%00000000
   5668  7958		       00		      .byte.b	%00000000
   5669  7959		       00		      .byte.b	%00000000
   5670  795a		       00		      .byte.b	%00000000
   5671  795b		       00		      .byte.b	%00000000
   5672  795c		       00		      .byte.b	%00000000
   5673  795d		       00		      .byte.b	%00000000
   5674  795e		       00		      .byte.b	%00000000
   5675  795f		       00		      .byte.b	%00000000
   5676  7960		       00		      .byte.b	%00000000
   5677  7961		       00		      .byte.b	%00000000
   5678  7962		       00		      .byte.b	%00000000
   5679  7963		       00		      .byte.b	%00000000
   5680  7964		       00		      .byte.b	%00000000
   5681  7965		       00		      .byte.b	%00000000
   5682  7966		       00		      .byte.b	%00000000
   5683  7967		       00		      .byte.b	%00000000
   5684  7968		       00		      .byte.b	%00000000
   5685  7969		       00		      .byte.b	%00000000
   5686  796a		       00		      .byte.b	%00000000
   5687  796b		       00		      .byte.b	%00000000
   5688  796c		       00		      .byte.b	%00000000
   5689  796d		       00		      .byte.b	%00000000
   5690  796e		       00		      .byte.b	%00000000
   5691  796f		       00		      .byte.b	%00000000
   5692  7970		       00		      .byte.b	%00000000
   5693  7971		       00		      .byte.b	%00000000
   5694  7972		       00		      .byte.b	%00000000
   5695  7973		       00		      .byte.b	%00000000
   5696  7974		       00		      .byte.b	%00000000
   5697  7975		       00		      .byte.b	%00000000
   5698  7976		       00		      .byte.b	%00000000
   5699  7977		       00		      .byte.b	%00000000
   5700  7978		       00		      .byte.b	%00000000
   5701  7979		       00		      .byte.b	%00000000
   5702  797a		       00		      .byte.b	%00000000
   5703  797b		       50		      .byte.b	%01010000
   5704  797c				   playfieldcolorL0160
   5705  797c		       2a		      .byte.b	$2A
   5706  797d		       2a		      .byte.b	$2A
   5707  797e		       2a		      .byte.b	$2A
   5708  797f		       2a		      .byte.b	$2A
   5709  7980		       2a		      .byte.b	$2A
   5710  7981		       2a		      .byte.b	$2A
   5711  7982		       2a		      .byte.b	$2A
   5712  7983		       2a		      .byte.b	$2A
   5713  7984		       2a		      .byte.b	$2A
   5714  7985		       2a		      .byte.b	$2A
   5715  7986		       2a		      .byte.b	$2A
   5716  7987		       2a		      .byte.b	$2A
   5717  7988		       2a		      .byte.b	$2A
   5718  7989		       2a		      .byte.b	$2A
   5719  798a		       2a		      .byte.b	$2A
   5720  798b		       2a		      .byte.b	$2A
   5721  798c		       2a		      .byte.b	$2A
   5722  798d		       2a		      .byte.b	$2A
   5723  798e		       2a		      .byte.b	$2A
   5724  798f		       2a		      .byte.b	$2A
   5725  7990		       2a		      .byte.b	$2A
   5726  7991		       2a		      .byte.b	$2A
   5727  7992		       2a		      .byte.b	$2A
   5728  7993		       2a		      .byte.b	$2A
   5729  7994		       28		      .byte.b	$28
   5730  7995		       28		      .byte.b	$28
   5731  7996		       28		      .byte.b	$28
   5732  7997		       28		      .byte.b	$28
   5733  7998		       28		      .byte.b	$28
   5734  7999		       28		      .byte.b	$28
   5735  799a		       28		      .byte.b	$28
   5736  799b		       28		      .byte.b	$28
   5737  799c		       28		      .byte.b	$28
   5738  799d		       28		      .byte.b	$28
   5739  799e		       28		      .byte.b	$28
   5740  799f		       28		      .byte.b	$28
   5741  79a0		       28		      .byte.b	$28
   5742  79a1		       28		      .byte.b	$28
   5743  79a2		       28		      .byte.b	$28
   5744  79a3		       28		      .byte.b	$28
   5745  79a4		       26		      .byte.b	$26
   5746  79a5		       26		      .byte.b	$26
   5747  79a6		       24		      .byte.b	$24
   5748  79a7		       c8		      .byte.b	$C8
   5749  79a8				   backgroundcolorL0161
   5750  79a8		       00		      .byte.b	$00
   5751  79a9		       00		      .byte.b	$00
   5752  79aa		       00		      .byte.b	$00
   5753  79ab		       00		      .byte.b	$00
   5754  79ac		       00		      .byte.b	$00
   5755  79ad		       00		      .byte.b	$00
   5756  79ae		       00		      .byte.b	$00
   5757  79af		       00		      .byte.b	$00
   5758  79b0		       00		      .byte.b	$00
   5759  79b1		       00		      .byte.b	$00
   5760  79b2		       00		      .byte.b	$00
   5761  79b3		       00		      .byte.b	$00
   5762  79b4		       00		      .byte.b	$00
   5763  79b5		       00		      .byte.b	$00
   5764  79b6		       00		      .byte.b	$00
   5765  79b7		       00		      .byte.b	$00
   5766  79b8		       00		      .byte.b	$00
   5767  79b9		       00		      .byte.b	$00
   5768  79ba		       00		      .byte.b	$00
   5769  79bb		       00		      .byte.b	$00
   5770  79bc		       00		      .byte.b	$00
   5771  79bd		       00		      .byte.b	$00
   5772  79be		       00		      .byte.b	$00
   5773  79bf		       00		      .byte.b	$00
   5774  79c0		       00		      .byte.b	$00
   5775  79c1		       00		      .byte.b	$00
   5776  79c2		       00		      .byte.b	$00
   5777  79c3		       00		      .byte.b	$00
   5778  79c4		       00		      .byte.b	$00
   5779  79c5		       00		      .byte.b	$00
   5780  79c6		       00		      .byte.b	$00
   5781  79c7		       00		      .byte.b	$00
   5782  79c8		       00		      .byte.b	$00
   5783  79c9		       00		      .byte.b	$00
   5784  79ca		       00		      .byte.b	$00
   5785  79cb		       00		      .byte.b	$00
   5786  79cc		       00		      .byte.b	$00
   5787  79cd		       00		      .byte.b	$00
   5788  79ce		       00		      .byte.b	$00
   5789  79cf		       00		      .byte.b	$00
   5790  79d0		       00		      .byte.b	$00
   5791  79d1		       00		      .byte.b	$00
   5792  79d2		       00		      .byte.b	$00
   5793  79d3		       00		      .byte.b	$00
   5794  79d4				   PF_data8
   5795  79d4		       00		      .byte.b	%00000000
   5796  79d5		       00		      .byte.b	%00000000
   5797  79d6		       00		      .byte.b	%00000000
   5798  79d7		       00		      .byte.b	%00000000
   5799  79d8		       00		      .byte.b	%00000000
   5800  79d9		       00		      .byte.b	%00000000
   5801  79da		       00		      .byte.b	%00000000
   5802  79db		       00		      .byte.b	%00000000
   5803  79dc		       00		      .byte.b	%00000000
   5804  79dd		       00		      .byte.b	%00000000
   5805  79de		       00		      .byte.b	%00000000
   5806  79df		       00		      .byte.b	%00000000
   5807  79e0		       00		      .byte.b	%00000000
   5808  79e1		       00		      .byte.b	%00000000
   5809  79e2		       00		      .byte.b	%00000000
   5810  79e3		       00		      .byte.b	%00000000
   5811  79e4		       00		      .byte.b	%00000000
   5812  79e5		       00		      .byte.b	%00000000
   5813  79e6		       00		      .byte.b	%00000000
   5814  79e7		       00		      .byte.b	%00000000
   5815  79e8		       00		      .byte.b	%00000000
   5816  79e9		       00		      .byte.b	%00000000
   5817  79ea		       00		      .byte.b	%00000000
   5818  79eb		       00		      .byte.b	%00000000
   5819  79ec		       00		      .byte.b	%00000000
   5820  79ed		       00		      .byte.b	%00000000
   5821  79ee		       00		      .byte.b	%00000000
   5822  79ef		       00		      .byte.b	%00000000
   5823  79f0		       00		      .byte.b	%00000000
   5824  79f1		       00		      .byte.b	%00000000
   5825  79f2		       00		      .byte.b	%00000000
   5826  79f3		       00		      .byte.b	%00000000
   5827  79f4		       00		      .byte.b	%00000000
   5828  79f5		       00		      .byte.b	%00000000
   5829  79f6		       00		      .byte.b	%00000000
   5830  79f7		       00		      .byte.b	%00000000
   5831  79f8		       00		      .byte.b	%00000000
   5832  79f9		       00		      .byte.b	%00000000
   5833  79fa		       00		      .byte.b	%00000000
   5834  79fb		       00		      .byte.b	%00000000
   5835  79fc		       00		      .byte.b	%00000000
   5836  79fd		       00		      .byte.b	%00000000
   5837  79fe		       00		      .byte.b	%00000000
   5838  79ff		       00		      .byte.b	%00000000
   5839  7a00		       00		      .byte.b	%00000000
   5840  7a01		       00		      .byte.b	%00000000
   5841  7a02		       00		      .byte.b	%00000000
   5842  7a03		       00		      .byte.b	%00000000
   5843  7a04		       00		      .byte.b	%00000000
   5844  7a05		       00		      .byte.b	%00000000
   5845  7a06		       00		      .byte.b	%00000000
   5846  7a07		       00		      .byte.b	%00000000
   5847  7a08		       00		      .byte.b	%00000000
   5848  7a09		       00		      .byte.b	%00000000
   5849  7a0a		       00		      .byte.b	%00000000
   5850  7a0b		       00		      .byte.b	%00000000
   5851  7a0c		       00		      .byte.b	%00000000
   5852  7a0d		       00		      .byte.b	%00000000
   5853  7a0e		       00		      .byte.b	%00000000
   5854  7a0f		       00		      .byte.b	%00000000
   5855  7a10		       00		      .byte.b	%00000000
   5856  7a11		       00		      .byte.b	%00000000
   5857  7a12		       00		      .byte.b	%00000000
   5858  7a13		       00		      .byte.b	%00000000
   5859  7a14		       00		      .byte.b	%00000000
   5860  7a15		       00		      .byte.b	%00000000
   5861  7a16		       00		      .byte.b	%00000000
   5862  7a17		       00		      .byte.b	%00000000
   5863  7a18		       00		      .byte.b	%00000000
   5864  7a19		       00		      .byte.b	%00000000
   5865  7a1a		       00		      .byte.b	%00000000
   5866  7a1b		       00		      .byte.b	%00000000
   5867  7a1c		       00		      .byte.b	%00000000
   5868  7a1d		       00		      .byte.b	%00000000
   5869  7a1e		       00		      .byte.b	%00000000
   5870  7a1f		       00		      .byte.b	%00000000
   5871  7a20		       00		      .byte.b	%00000000
   5872  7a21		       00		      .byte.b	%00000000
   5873  7a22		       00		      .byte.b	%00000000
   5874  7a23		       00		      .byte.b	%00000000
   5875  7a24		       00		      .byte.b	%00000000
   5876  7a25		       00		      .byte.b	%00000000
   5877  7a26		       00		      .byte.b	%00000000
   5878  7a27		       00		      .byte.b	%00000000
   5879  7a28		       00		      .byte.b	%00000000
   5880  7a29		       00		      .byte.b	%00000000
   5881  7a2a		       00		      .byte.b	%00000000
   5882  7a2b		       00		      .byte.b	%00000000
   5883  7a2c		       00		      .byte.b	%00000000
   5884  7a2d		       00		      .byte.b	%00000000
   5885  7a2e		       00		      .byte.b	%00000000
   5886  7a2f		       00		      .byte.b	%00000000
   5887  7a30		       00		      .byte.b	%00000000
   5888  7a31		       00		      .byte.b	%00000000
   5889  7a32		       00		      .byte.b	%00000000
   5890  7a33		       00		      .byte.b	%00000000
   5891  7a34		       00		      .byte.b	%00000000
   5892  7a35		       0b		      .byte.b	%00001011
   5893  7a36		       06		      .byte.b	%00000110
   5894  7a37		       3f		      .byte.b	%00111111
   5895  7a38		       1d		      .byte.b	%00011101
   5896  7a39		       0c		      .byte.b	%00001100
   5897  7a3a		       01		      .byte.b	%00000001
   5898  7a3b		       00		      .byte.b	%00000000
   5899  7a3c		       01		      .byte.b	%00000001
   5900  7a3d		       03		      .byte.b	%00000011
   5901  7a3e		       20		      .byte.b	%00100000
   5902  7a3f		       2f		      .byte.b	%00101111
   5903  7a40		       37		      .byte.b	%00110111
   5904  7a41		       37		      .byte.b	%00110111
   5905  7a42		       2e		      .byte.b	%00101110
   5906  7a43		       00		      .byte.b	%00000000
   5907  7a44		       00		      .byte.b	%00000000
   5908  7a45		       00		      .byte.b	%00000000
   5909  7a46		       00		      .byte.b	%00000000
   5910  7a47		       00		      .byte.b	%00000000
   5911  7a48		       00		      .byte.b	%00000000
   5912  7a49		       00		      .byte.b	%00000000
   5913  7a4a		       00		      .byte.b	%00000000
   5914  7a4b		       00		      .byte.b	%00000000
   5915  7a4c		       00		      .byte.b	%00000000
   5916  7a4d		       00		      .byte.b	%00000000
   5917  7a4e		       00		      .byte.b	%00000000
   5918  7a4f		       00		      .byte.b	%00000000
   5919  7a50		       00		      .byte.b	%00000000
   5920  7a51		       00		      .byte.b	%00000000
   5921  7a52		       00		      .byte.b	%00000000
   5922  7a53		       00		      .byte.b	%00000000
   5923  7a54		       00		      .byte.b	%00000000
   5924  7a55		       00		      .byte.b	%00000000
   5925  7a56		       00		      .byte.b	%00000000
   5926  7a57		       00		      .byte.b	%00000000
   5927  7a58		       00		      .byte.b	%00000000
   5928  7a59		       00		      .byte.b	%00000000
   5929  7a5a		       00		      .byte.b	%00000000
   5930  7a5b		       00		      .byte.b	%00000000
   5931  7a5c		       00		      .byte.b	%00000000
   5932  7a5d		       00		      .byte.b	%00000000
   5933  7a5e		       00		      .byte.b	%00000000
   5934  7a5f		       00		      .byte.b	%00000000
   5935  7a60		       00		      .byte.b	%00000000
   5936  7a61		       00		      .byte.b	%00000000
   5937  7a62		       00		      .byte.b	%00000000
   5938  7a63		       20		      .byte.b	%00100000
   5939  7a64		       21		      .byte.b	%00100001
   5940  7a65		       61		      .byte.b	%01100001
   5941  7a66		       61		      .byte.b	%01100001
   5942  7a67		       61		      .byte.b	%01100001
   5943  7a68		       61		      .byte.b	%01100001
   5944  7a69		       60		      .byte.b	%01100000
   5945  7a6a		       60		      .byte.b	%01100000
   5946  7a6b		       61		      .byte.b	%01100001
   5947  7a6c		       63		      .byte.b	%01100011
   5948  7a6d		       63		      .byte.b	%01100011
   5949  7a6e		       60		      .byte.b	%01100000
   5950  7a6f		       60		      .byte.b	%01100000
   5951  7a70		       60		      .byte.b	%01100000
   5952  7a71		       40		      .byte.b	%01000000
   5953  7a72		       40		      .byte.b	%01000000
   5954  7a73		       00		      .byte.b	%00000000
   5955  7a74		       00		      .byte.b	%00000000
   5956  7a75		       00		      .byte.b	%00000000
   5957  7a76		       00		      .byte.b	%00000000
   5958  7a77		       00		      .byte.b	%00000000
   5959  7a78		       00		      .byte.b	%00000000
   5960  7a79		       00		      .byte.b	%00000000
   5961  7a7a		       00		      .byte.b	%00000000
   5962  7a7b		       00		      .byte.b	%00000000
   5963  7a7c		       00		      .byte.b	%00000000
   5964  7a7d		       00		      .byte.b	%00000000
   5965  7a7e		       00		      .byte.b	%00000000
   5966  7a7f		       00		      .byte.b	%00000000
   5967  7a80		       00		      .byte.b	%00000000
   5968  7a81		       00		      .byte.b	%00000000
   5969  7a82		       00		      .byte.b	%00000000
   5970  7a83		       50		      .byte.b	%01010000
   5971  7a84				   playercolorL0164_0
   5972  7a84		       00		      .byte.b	$00
   5973  7a85		       00		      .byte.b	$00
   5974  7a86		       00		      .byte.b	$00
   5975  7a87		       00		      .byte.b	$00
   5976  7a88		       00		      .byte.b	$00
   5977  7a89		       0e		      .byte.b	$0E
   5978  7a8a		       0e		      .byte.b	$0E
   5979  7a8b		       0c		      .byte.b	$0C
   5980  7a8c		       0c		      .byte.b	$0C
   5981  7a8d		       0a		      .byte.b	$0A
   5982  7a8e		       0a		      .byte.b	$0A
   5983  7a8f		       2e		      .byte.b	$2E
   5984  7a90		       2c		      .byte.b	$2C
   5985  7a91		       2c		      .byte.b	$2C
   5986  7a92		       2a		      .byte.b	$2A
   5987  7a93		       28		      .byte.b	$28
   5988  7a94		       28		      .byte.b	$28
   5989  7a95		       08		      .byte.b	$08
   5990  7a96		       42		      .byte.b	$42
   5991  7a97		       42		      .byte.b	$42
   5992  7a98		       08		      .byte.b	$08
   5993  7a99		       40		      .byte.b	$40
   5994  7a9a		       40		      .byte.b	$40
   5995  7a9b		       08		      .byte.b	$08
   5996  7a9c		       40		      .byte.b	$40
   5997  7a9d		       40		      .byte.b	$40
   5998  7a9e		       08		      .byte.b	$08
   5999  7a9f				   playerL0165_0
   6000  7a9f		       23		      .byte.b	%00100011
   6001  7aa0		       33		      .byte.b	%00110011
   6002  7aa1		       14		      .byte.b	%00010100
   6003  7aa2		       14		      .byte.b	%00010100
   6004  7aa3		       00		      .byte.b	%00000000
   6005  7aa4		       11		      .byte.b	%00010001
   6006  7aa5		       11		      .byte.b	%00010001
   6007  7aa6		       2a		      .byte.b	%00101010
   6008  7aa7		       2a		      .byte.b	%00101010
   6009  7aa8		       19		      .byte.b	%00011001
   6010  7aa9		       11		      .byte.b	%00010001
   6011  7aaa		       04		      .byte.b	%00000100
   6012  7aab		       04		      .byte.b	%00000100
   6013  7aac		       04		      .byte.b	%00000100
   6014  7aad		       0e		      .byte.b	%00001110
   6015  7aae		       1f		      .byte.b	%00011111
   6016  7aaf		       3f		      .byte.b	%00111111
   6017  7ab0		       11		      .byte.b	%00010001
   6018  7ab1		       0e		      .byte.b	%00001110
   6019  7ab2		       0e		      .byte.b	%00001110
   6020  7ab3		       11		      .byte.b	%00010001
   6021  7ab4		       0e		      .byte.b	%00001110
   6022  7ab5		       0e		      .byte.b	%00001110
   6023  7ab6		       12		      .byte.b	%00010010
   6024  7ab7		       0c		      .byte.b	%00001100
   6025  7ab8		       0c		      .byte.b	%00001100
   6026  7ab9		       0a		      .byte.b	%00001010
   6027  7aba				   playfieldcolorL0169
   6028  7aba		       0e		      .byte.b	$0E
   6029  7abb		       0e		      .byte.b	$0E
   6030  7abc		       0e		      .byte.b	$0E
   6031  7abd		       0c		      .byte.b	$0C
   6032  7abe		       0c		      .byte.b	$0C
   6033  7abf		       0c		      .byte.b	$0C
   6034  7ac0		       0c		      .byte.b	$0C
   6035  7ac1		       0c		      .byte.b	$0C
   6036  7ac2		       0c		      .byte.b	$0C
   6037  7ac3		       0c		      .byte.b	$0C
   6038  7ac4		       0c		      .byte.b	$0C
   6039  7ac5		       0c		      .byte.b	$0C
   6040  7ac6		       0c		      .byte.b	$0C
   6041  7ac7		       0a		      .byte.b	$0A
   6042  7ac8		       0a		      .byte.b	$0A
   6043  7ac9		       0a		      .byte.b	$0A
   6044  7aca		       0a		      .byte.b	$0A
   6045  7acb		       0a		      .byte.b	$0A
   6046  7acc		       0a		      .byte.b	$0A
   6047  7acd		       0a		      .byte.b	$0A
   6048  7ace		       08		      .byte.b	$08
   6049  7acf		       08		      .byte.b	$08
   6050  7ad0		       08		      .byte.b	$08
   6051  7ad1		       08		      .byte.b	$08
   6052  7ad2		       08		      .byte.b	$08
   6053  7ad3		       08		      .byte.b	$08
   6054  7ad4		       08		      .byte.b	$08
   6055  7ad5		       08		      .byte.b	$08
   6056  7ad6		       08		      .byte.b	$08
   6057  7ad7		       08		      .byte.b	$08
   6058  7ad8		       08		      .byte.b	$08
   6059  7ad9		       06		      .byte.b	$06
   6060  7ada		       06		      .byte.b	$06
   6061  7adb		       06		      .byte.b	$06
   6062  7adc		       06		      .byte.b	$06
   6063  7add		       06		      .byte.b	$06
   6064  7ade		       04		      .byte.b	$04
   6065  7adf		       04		      .byte.b	$04
   6066  7ae0		       04		      .byte.b	$04
   6067  7ae1		       04		      .byte.b	$04
   6068  7ae2		       04		      .byte.b	$04
   6069  7ae3		       02		      .byte.b	$02
   6070  7ae4		       02		      .byte.b	$02
   6071  7ae5		       c8		      .byte.b	$C8
   6072  7ae6				   backgroundcolorL0170
   6073  7ae6		       00		      .byte.b	$00
   6074  7ae7		       00		      .byte.b	$00
   6075  7ae8		       00		      .byte.b	$00
   6076  7ae9		       00		      .byte.b	$00
   6077  7aea		       00		      .byte.b	$00
   6078  7aeb		       00		      .byte.b	$00
   6079  7aec		       00		      .byte.b	$00
   6080  7aed		       00		      .byte.b	$00
   6081  7aee		       00		      .byte.b	$00
   6082  7aef		       00		      .byte.b	$00
   6083  7af0		       00		      .byte.b	$00
   6084  7af1		       00		      .byte.b	$00
   6085  7af2		       00		      .byte.b	$00
   6086  7af3		       00		      .byte.b	$00
   6087  7af4		       00		      .byte.b	$00
   6088  7af5		       00		      .byte.b	$00
   6089  7af6		       00		      .byte.b	$00
   6090  7af7		       00		      .byte.b	$00
   6091  7af8		       00		      .byte.b	$00
   6092  7af9		       00		      .byte.b	$00
   6093  7afa		       00		      .byte.b	$00
   6094  7afb		       00		      .byte.b	$00
   6095  7afc		       00		      .byte.b	$00
   6096  7afd		       00		      .byte.b	$00
   6097  7afe		       00		      .byte.b	$00
   6098  7aff		       00		      .byte.b	$00
   6099  7b00		       00		      .byte.b	$00
   6100  7b01		       00		      .byte.b	$00
   6101  7b02		       00		      .byte.b	$00
   6102  7b03		       00		      .byte.b	$00
   6103  7b04		       00		      .byte.b	$00
   6104  7b05		       00		      .byte.b	$00
   6105  7b06		       00		      .byte.b	$00
   6106  7b07		       00		      .byte.b	$00
   6107  7b08		       00		      .byte.b	$00
   6108  7b09		       00		      .byte.b	$00
   6109  7b0a		       00		      .byte.b	$00
   6110  7b0b		       00		      .byte.b	$00
   6111  7b0c		       00		      .byte.b	$00
   6112  7b0d		       00		      .byte.b	$00
   6113  7b0e		       00		      .byte.b	$00
   6114  7b0f		       00		      .byte.b	$00
   6115  7b10		       00		      .byte.b	$00
   6116  7b11		       00		      .byte.b	$00
   6117  7b12				   PF_data9
   6118  7b12		       ff		      .byte.b	%11111111
   6119  7b13		       80		      .byte.b	%10000000
   6120  7b14		       bc		      .byte.b	%10111100
   6121  7b15		       a1		      .byte.b	%10100001
   6122  7b16		       91		      .byte.b	%10010001
   6123  7b17		       89		      .byte.b	%10001001
   6124  7b18		       88		      .byte.b	%10001000
   6125  7b19		       80		      .byte.b	%10000000
   6126  7b1a		       ff		      .byte.b	%11111111
   6127  7b1b		       00		      .byte.b	%00000000
   6128  7b1c		       00		      .byte.b	%00000000
   6129  7b1d		       00		      .byte.b	%00000000
   6130  7b1e		       00		      .byte.b	%00000000
   6131  7b1f		       00		      .byte.b	%00000000
   6132  7b20		       00		      .byte.b	%00000000
   6133  7b21		       00		      .byte.b	%00000000
   6134  7b22		       00		      .byte.b	%00000000
   6135  7b23		       ff		      .byte.b	%11111111
   6136  7b24		       80		      .byte.b	%10000000
   6137  7b25		       91		      .byte.b	%10010001
   6138  7b26		       a9		      .byte.b	%10101001
   6139  7b27		       b9		      .byte.b	%10111001
   6140  7b28		       ab		      .byte.b	%10101011
   6141  7b29		       a9		      .byte.b	%10101001
   6142  7b2a		       80		      .byte.b	%10000000
   6143  7b2b		       ff		      .byte.b	%11111111
   6144  7b2c		       00		      .byte.b	%00000000
   6145  7b2d		       00		      .byte.b	%00000000
   6146  7b2e		       00		      .byte.b	%00000000
   6147  7b2f		       00		      .byte.b	%00000000
   6148  7b30		       00		      .byte.b	%00000000
   6149  7b31		       00		      .byte.b	%00000000
   6150  7b32		       00		      .byte.b	%00000000
   6151  7b33		       00		      .byte.b	%00000000
   6152  7b34		       ff		      .byte.b	%11111111
   6153  7b35		       80		      .byte.b	%10000000
   6154  7b36		       99		      .byte.b	%10011001
   6155  7b37		       a9		      .byte.b	%10101001
   6156  7b38		       99		      .byte.b	%10011001
   6157  7b39		       ab		      .byte.b	%10101011
   6158  7b3a		       99		      .byte.b	%10011001
   6159  7b3b		       80		      .byte.b	%10000000
   6160  7b3c		       ff		      .byte.b	%11111111
   6161  7b3d		       00		      .byte.b	%00000000
   6162  7b3e		       ff		      .byte.b	%11111111
   6163  7b3f		       08		      .byte.b	%00001000
   6164  7b40		       49		      .byte.b	%01001001
   6165  7b41		       aa		      .byte.b	%10101010
   6166  7b42		       ea		      .byte.b	%11101010
   6167  7b43		       aa		      .byte.b	%10101010
   6168  7b44		       a9		      .byte.b	%10101001
   6169  7b45		       08		      .byte.b	%00001000
   6170  7b46		       ff		      .byte.b	%11111111
   6171  7b47		       00		      .byte.b	%00000000
   6172  7b48		       00		      .byte.b	%00000000
   6173  7b49		       00		      .byte.b	%00000000
   6174  7b4a		       00		      .byte.b	%00000000
   6175  7b4b		       00		      .byte.b	%00000000
   6176  7b4c		       00		      .byte.b	%00000000
   6177  7b4d		       00		      .byte.b	%00000000
   6178  7b4e		       00		      .byte.b	%00000000
   6179  7b4f		       0f		      .byte.b	%00001111
   6180  7b50		       08		      .byte.b	%00001000
   6181  7b51		       08		      .byte.b	%00001000
   6182  7b52		       09		      .byte.b	%00001001
   6183  7b53		       0a		      .byte.b	%00001010
   6184  7b54		       0b		      .byte.b	%00001011
   6185  7b55		       08		      .byte.b	%00001000
   6186  7b56		       08		      .byte.b	%00001000
   6187  7b57		       0f		      .byte.b	%00001111
   6188  7b58		       00		      .byte.b	%00000000
   6189  7b59		       00		      .byte.b	%00000000
   6190  7b5a		       00		      .byte.b	%00000000
   6191  7b5b		       00		      .byte.b	%00000000
   6192  7b5c		       00		      .byte.b	%00000000
   6193  7b5d		       00		      .byte.b	%00000000
   6194  7b5e		       00		      .byte.b	%00000000
   6195  7b5f		       00		      .byte.b	%00000000
   6196  7b60		       ff		      .byte.b	%11111111
   6197  7b61		       08		      .byte.b	%00001000
   6198  7b62		       48		      .byte.b	%01001000
   6199  7b63		       a9		      .byte.b	%10101001
   6200  7b64		       8a		      .byte.b	%10001010
   6201  7b65		       ab		      .byte.b	%10101011
   6202  7b66		       48		      .byte.b	%01001000
   6203  7b67		       08		      .byte.b	%00001000
   6204  7b68		       ff		      .byte.b	%11111111
   6205  7b69		       00		      .byte.b	%00000000
   6206  7b6a		       ff		      .byte.b	%11111111
   6207  7b6b		       04		      .byte.b	%00000100
   6208  7b6c		       24		      .byte.b	%00100100
   6209  7b6d		       35		      .byte.b	%00110101
   6210  7b6e		       24		      .byte.b	%00100100
   6211  7b6f		       25		      .byte.b	%00100101
   6212  7b70		       74		      .byte.b	%01110100
   6213  7b71		       04		      .byte.b	%00000100
   6214  7b72		       ff		      .byte.b	%11111111
   6215  7b73		       00		      .byte.b	%00000000
   6216  7b74		       00		      .byte.b	%00000000
   6217  7b75		       00		      .byte.b	%00000000
   6218  7b76		       00		      .byte.b	%00000000
   6219  7b77		       00		      .byte.b	%00000000
   6220  7b78		       00		      .byte.b	%00000000
   6221  7b79		       00		      .byte.b	%00000000
   6222  7b7a		       00		      .byte.b	%00000000
   6223  7b7b		       07		      .byte.b	%00000111
   6224  7b7c		       04		      .byte.b	%00000100
   6225  7b7d		       04		      .byte.b	%00000100
   6226  7b7e		       05		      .byte.b	%00000101
   6227  7b7f		       05		      .byte.b	%00000101
   6228  7b80		       05		      .byte.b	%00000101
   6229  7b81		       05		      .byte.b	%00000101
   6230  7b82		       04		      .byte.b	%00000100
   6231  7b83		       07		      .byte.b	%00000111
   6232  7b84		       00		      .byte.b	%00000000
   6233  7b85		       00		      .byte.b	%00000000
   6234  7b86		       00		      .byte.b	%00000000
   6235  7b87		       00		      .byte.b	%00000000
   6236  7b88		       00		      .byte.b	%00000000
   6237  7b89		       00		      .byte.b	%00000000
   6238  7b8a		       00		      .byte.b	%00000000
   6239  7b8b		       00		      .byte.b	%00000000
   6240  7b8c		       ff		      .byte.b	%11111111
   6241  7b8d		       04		      .byte.b	%00000100
   6242  7b8e		       24		      .byte.b	%00100100
   6243  7b8f		       35		      .byte.b	%00110101
   6244  7b90		       24		      .byte.b	%00100100
   6245  7b91		       25		      .byte.b	%00100101
   6246  7b92		       74		      .byte.b	%01110100
   6247  7b93		       04		      .byte.b	%00000100
   6248  7b94		       ff		      .byte.b	%11111111
   6249  7b95		       00		      .byte.b	%00000000
   6250  7b96		       ff		      .byte.b	%11111111
   6251  7b97		       80		      .byte.b	%10000000
   6252  7b98		       93		      .byte.b	%10010011
   6253  7b99		       b2		      .byte.b	%10110010
   6254  7b9a		       93		      .byte.b	%10010011
   6255  7b9b		       92		      .byte.b	%10010010
   6256  7b9c		       bb		      .byte.b	%10111011
   6257  7b9d		       80		      .byte.b	%10000000
   6258  7b9e		       ff		      .byte.b	%11111111
   6259  7b9f		       00		      .byte.b	%00000000
   6260  7ba0		       00		      .byte.b	%00000000
   6261  7ba1		       00		      .byte.b	%00000000
   6262  7ba2		       00		      .byte.b	%00000000
   6263  7ba3		       00		      .byte.b	%00000000
   6264  7ba4		       00		      .byte.b	%00000000
   6265  7ba5		       00		      .byte.b	%00000000
   6266  7ba6		       00		      .byte.b	%00000000
   6267  7ba7		       ff		      .byte.b	%11111111
   6268  7ba8		       80		      .byte.b	%10000000
   6269  7ba9		       b1		      .byte.b	%10110001
   6270  7baa		       8a		      .byte.b	%10001010
   6271  7bab		       93		      .byte.b	%10010011
   6272  7bac		       a2		      .byte.b	%10100010
   6273  7bad		       ba		      .byte.b	%10111010
   6274  7bae		       80		      .byte.b	%10000000
   6275  7baf		       ff		      .byte.b	%11111111
   6276  7bb0		       00		      .byte.b	%00000000
   6277  7bb1		       00		      .byte.b	%00000000
   6278  7bb2		       00		      .byte.b	%00000000
   6279  7bb3		       00		      .byte.b	%00000000
   6280  7bb4		       00		      .byte.b	%00000000
   6281  7bb5		       00		      .byte.b	%00000000
   6282  7bb6		       00		      .byte.b	%00000000
   6283  7bb7		       00		      .byte.b	%00000000
   6284  7bb8		       ff		      .byte.b	%11111111
   6285  7bb9		       80		      .byte.b	%10000000
   6286  7bba		       b3		      .byte.b	%10110011
   6287  7bbb		       8a		      .byte.b	%10001010
   6288  7bbc		       93		      .byte.b	%10010011
   6289  7bbd		       a2		      .byte.b	%10100010
   6290  7bbe		       bb		      .byte.b	%10111011
   6291  7bbf		       80		      .byte.b	%10000000
   6292  7bc0		       ff		      .byte.b	%11111111
   6293  7bc1		       50		      .byte.b	%01010000
   6294  7bc2				   playfieldcolorL0180
   6295  7bc2		       16		      .byte.b	$16
   6296  7bc3		       16		      .byte.b	$16
   6297  7bc4		       16		      .byte.b	$16
   6298  7bc5		       16		      .byte.b	$16
   6299  7bc6		       16		      .byte.b	$16
   6300  7bc7		       16		      .byte.b	$16
   6301  7bc8		       16		      .byte.b	$16
   6302  7bc9		       16		      .byte.b	$16
   6303  7bca		       16		      .byte.b	$16
   6304  7bcb		       16		      .byte.b	$16
   6305  7bcc		       16		      .byte.b	$16
   6306  7bcd		       16		      .byte.b	$16
   6307  7bce		       16		      .byte.b	$16
   6308  7bcf		       00		      .byte.b	$00
   6309  7bd0		       00		      .byte.b	$00
   6310  7bd1		       00		      .byte.b	$00
   6311  7bd2		       00		      .byte.b	$00
   6312  7bd3		       00		      .byte.b	$00
   6313  7bd4		       16		      .byte.b	$16
   6314  7bd5		       16		      .byte.b	$16
   6315  7bd6		       16		      .byte.b	$16
   6316  7bd7		       16		      .byte.b	$16
   6317  7bd8		       16		      .byte.b	$16
   6318  7bd9		       16		      .byte.b	$16
   6319  7bda		       16		      .byte.b	$16
   6320  7bdb		       16		      .byte.b	$16
   6321  7bdc		       16		      .byte.b	$16
   6322  7bdd		       16		      .byte.b	$16
   6323  7bde		       16		      .byte.b	$16
   6324  7bdf		       16		      .byte.b	$16
   6325  7be0		       16		      .byte.b	$16
   6326  7be1		       16		      .byte.b	$16
   6327  7be2		       16		      .byte.b	$16
   6328  7be3		       16		      .byte.b	$16
   6329  7be4		       16		      .byte.b	$16
   6330  7be5		       16		      .byte.b	$16
   6331  7be6		       16		      .byte.b	$16
   6332  7be7		       16		      .byte.b	$16
   6333  7be8		       16		      .byte.b	$16
   6334  7be9		       16		      .byte.b	$16
   6335  7bea		       16		      .byte.b	$16
   6336  7beb		       16		      .byte.b	$16
   6337  7bec		       16		      .byte.b	$16
   6338  7bed		       c8		      .byte.b	$C8
   6339  7bee				   backgroundcolorL0181
   6340  7bee		       02		      .byte.b	$02
   6341  7bef		       02		      .byte.b	$02
   6342  7bf0		       02		      .byte.b	$02
   6343  7bf1		       02		      .byte.b	$02
   6344  7bf2		       02		      .byte.b	$02
   6345  7bf3		       02		      .byte.b	$02
   6346  7bf4		       02		      .byte.b	$02
   6347  7bf5		       02		      .byte.b	$02
   6348  7bf6		       02		      .byte.b	$02
   6349  7bf7		       02		      .byte.b	$02
   6350  7bf8		       02		      .byte.b	$02
   6351  7bf9		       02		      .byte.b	$02
   6352  7bfa		       02		      .byte.b	$02
   6353  7bfb		       02		      .byte.b	$02
   6354  7bfc		       02		      .byte.b	$02
   6355  7bfd		       02		      .byte.b	$02
   6356  7bfe		       02		      .byte.b	$02
   6357  7bff		       02		      .byte.b	$02
   6358  7c00		       02		      .byte.b	$02
   6359  7c01		       02		      .byte.b	$02
   6360  7c02		       02		      .byte.b	$02
   6361  7c03		       02		      .byte.b	$02
   6362  7c04		       02		      .byte.b	$02
   6363  7c05		       02		      .byte.b	$02
   6364  7c06		       02		      .byte.b	$02
   6365  7c07		       02		      .byte.b	$02
   6366  7c08		       02		      .byte.b	$02
   6367  7c09		       02		      .byte.b	$02
   6368  7c0a		       02		      .byte.b	$02
   6369  7c0b		       02		      .byte.b	$02
   6370  7c0c		       02		      .byte.b	$02
   6371  7c0d		       02		      .byte.b	$02
   6372  7c0e		       02		      .byte.b	$02
   6373  7c0f		       02		      .byte.b	$02
   6374  7c10		       02		      .byte.b	$02
   6375  7c11		       02		      .byte.b	$02
   6376  7c12		       02		      .byte.b	$02
   6377  7c13		       02		      .byte.b	$02
   6378  7c14		       02		      .byte.b	$02
   6379  7c15		       02		      .byte.b	$02
   6380  7c16		       02		      .byte.b	$02
   6381  7c17		       02		      .byte.b	$02
   6382  7c18		       02		      .byte.b	$02
   6383  7c19		       00		      .byte.b	$00
   6384  7c1a		       00		      .byte.b	$00
   6385  7c1b				   PF_data10
   6386  7c1b		       00		      .byte.b	%00000000
   6387  7c1c		       00		      .byte.b	%00000000
   6388  7c1d		       00		      .byte.b	%00000000
   6389  7c1e		       00		      .byte.b	%00000000
   6390  7c1f		       00		      .byte.b	%00000000
   6391  7c20		       00		      .byte.b	%00000000
   6392  7c21		       00		      .byte.b	%00000000
   6393  7c22		       00		      .byte.b	%00000000
   6394  7c23		       00		      .byte.b	%00000000
   6395  7c24		       00		      .byte.b	%00000000
   6396  7c25		       00		      .byte.b	%00000000
   6397  7c26		       00		      .byte.b	%00000000
   6398  7c27		       00		      .byte.b	%00000000
   6399  7c28		       07		      .byte.b	%00000111
   6400  7c29		       07		      .byte.b	%00000111
   6401  7c2a		       07		      .byte.b	%00000111
   6402  7c2b		       02		      .byte.b	%00000010
   6403  7c2c		       0f		      .byte.b	%00001111
   6404  7c2d		       07		      .byte.b	%00000111
   6405  7c2e		       0f		      .byte.b	%00001111
   6406  7c2f		       6f		      .byte.b	%01101111
   6407  7c30		       7a		      .byte.b	%01111010
   6408  7c31		       28		      .byte.b	%00101000
   6409  7c32		       1d		      .byte.b	%00011101
   6410  7c33		       1f		      .byte.b	%00011111
   6411  7c34		       0f		      .byte.b	%00001111
   6412  7c35		       08		      .byte.b	%00001000
   6413  7c36		       0f		      .byte.b	%00001111
   6414  7c37		       07		      .byte.b	%00000111
   6415  7c38		       08		      .byte.b	%00001000
   6416  7c39		       df		      .byte.b	%11011111
   6417  7c3a		       be		      .byte.b	%10111110
   6418  7c3b		       7e		      .byte.b	%01111110
   6419  7c3c		       7e		      .byte.b	%01111110
   6420  7c3d		       7e		      .byte.b	%01111110
   6421  7c3e		       13		      .byte.b	%00010011
   6422  7c3f		       6c		      .byte.b	%01101100
   6423  7c40		       75		      .byte.b	%01110101
   6424  7c41		       3b		      .byte.b	%00111011
   6425  7c42		       07		      .byte.b	%00000111
   6426  7c43		       38		      .byte.b	%00111000
   6427  7c44		       3f		      .byte.b	%00111111
   6428  7c45		       1f		      .byte.b	%00011111
   6429  7c46		       00		      .byte.b	%00000000
   6430  7c47		       00		      .byte.b	%00000000
   6431  7c48		       00		      .byte.b	%00000000
   6432  7c49		       00		      .byte.b	%00000000
   6433  7c4a		       00		      .byte.b	%00000000
   6434  7c4b		       00		      .byte.b	%00000000
   6435  7c4c		       00		      .byte.b	%00000000
   6436  7c4d		       00		      .byte.b	%00000000
   6437  7c4e		       00		      .byte.b	%00000000
   6438  7c4f		       00		      .byte.b	%00000000
   6439  7c50		       00		      .byte.b	%00000000
   6440  7c51		       00		      .byte.b	%00000000
   6441  7c52		       00		      .byte.b	%00000000
   6442  7c53		       00		      .byte.b	%00000000
   6443  7c54		       00		      .byte.b	%00000000
   6444  7c55		       00		      .byte.b	%00000000
   6445  7c56		       00		      .byte.b	%00000000
   6446  7c57		       00		      .byte.b	%00000000
   6447  7c58		       01		      .byte.b	%00000001
   6448  7c59		       00		      .byte.b	%00000000
   6449  7c5a		       01		      .byte.b	%00000001
   6450  7c5b		       0d		      .byte.b	%00001101
   6451  7c5c		       0f		      .byte.b	%00001111
   6452  7c5d		       05		      .byte.b	%00000101
   6453  7c5e		       03		      .byte.b	%00000011
   6454  7c5f		       03		      .byte.b	%00000011
   6455  7c60		       01		      .byte.b	%00000001
   6456  7c61		       01		      .byte.b	%00000001
   6457  7c62		       01		      .byte.b	%00000001
   6458  7c63		       00		      .byte.b	%00000000
   6459  7c64		       01		      .byte.b	%00000001
   6460  7c65		       02		      .byte.b	%00000010
   6461  7c66		       0f		      .byte.b	%00001111
   6462  7c67		       1f		      .byte.b	%00011111
   6463  7c68		       1f		      .byte.b	%00011111
   6464  7c69		       1f		      .byte.b	%00011111
   6465  7c6a		       1e		      .byte.b	%00011110
   6466  7c6b		       0f		      .byte.b	%00001111
   6467  7c6c		       07		      .byte.b	%00000111
   6468  7c6d		       03		      .byte.b	%00000011
   6469  7c6e		       01		      .byte.b	%00000001
   6470  7c6f		       06		      .byte.b	%00000110
   6471  7c70		       07		      .byte.b	%00000111
   6472  7c71		       03		      .byte.b	%00000011
   6473  7c72		       00		      .byte.b	%00000000
   6474  7c73		       00		      .byte.b	%00000000
   6475  7c74		       00		      .byte.b	%00000000
   6476  7c75		       00		      .byte.b	%00000000
   6477  7c76		       00		      .byte.b	%00000000
   6478  7c77		       00		      .byte.b	%00000000
   6479  7c78		       00		      .byte.b	%00000000
   6480  7c79		       00		      .byte.b	%00000000
   6481  7c7a		       00		      .byte.b	%00000000
   6482  7c7b		       00		      .byte.b	%00000000
   6483  7c7c		       00		      .byte.b	%00000000
   6484  7c7d		       00		      .byte.b	%00000000
   6485  7c7e		       00		      .byte.b	%00000000
   6486  7c7f		       00		      .byte.b	%00000000
   6487  7c80		       00		      .byte.b	%00000000
   6488  7c81		       00		      .byte.b	%00000000
   6489  7c82		       00		      .byte.b	%00000000
   6490  7c83		       00		      .byte.b	%00000000
   6491  7c84		       00		      .byte.b	%00000000
   6492  7c85		       00		      .byte.b	%00000000
   6493  7c86		       00		      .byte.b	%00000000
   6494  7c87		       00		      .byte.b	%00000000
   6495  7c88		       00		      .byte.b	%00000000
   6496  7c89		       00		      .byte.b	%00000000
   6497  7c8a		       00		      .byte.b	%00000000
   6498  7c8b		       00		      .byte.b	%00000000
   6499  7c8c		       00		      .byte.b	%00000000
   6500  7c8d		       00		      .byte.b	%00000000
   6501  7c8e		       00		      .byte.b	%00000000
   6502  7c8f		       00		      .byte.b	%00000000
   6503  7c90		       00		      .byte.b	%00000000
   6504  7c91		       00		      .byte.b	%00000000
   6505  7c92		       00		      .byte.b	%00000000
   6506  7c93		       00		      .byte.b	%00000000
   6507  7c94		       00		      .byte.b	%00000000
   6508  7c95		       00		      .byte.b	%00000000
   6509  7c96		       00		      .byte.b	%00000000
   6510  7c97		       00		      .byte.b	%00000000
   6511  7c98		       00		      .byte.b	%00000000
   6512  7c99		       00		      .byte.b	%00000000
   6513  7c9a		       00		      .byte.b	%00000000
   6514  7c9b		       00		      .byte.b	%00000000
   6515  7c9c		       00		      .byte.b	%00000000
   6516  7c9d		       00		      .byte.b	%00000000
   6517  7c9e		       00		      .byte.b	%00000000
   6518  7c9f		       00		      .byte.b	%00000000
   6519  7ca0		       00		      .byte.b	%00000000
   6520  7ca1		       00		      .byte.b	%00000000
   6521  7ca2		       00		      .byte.b	%00000000
   6522  7ca3		       00		      .byte.b	%00000000
   6523  7ca4		       00		      .byte.b	%00000000
   6524  7ca5		       00		      .byte.b	%00000000
   6525  7ca6		       00		      .byte.b	%00000000
   6526  7ca7		       00		      .byte.b	%00000000
   6527  7ca8		       00		      .byte.b	%00000000
   6528  7ca9		       00		      .byte.b	%00000000
   6529  7caa		       00		      .byte.b	%00000000
   6530  7cab		       00		      .byte.b	%00000000
   6531  7cac		       00		      .byte.b	%00000000
   6532  7cad		       00		      .byte.b	%00000000
   6533  7cae		       00		      .byte.b	%00000000
   6534  7caf		       00		      .byte.b	%00000000
   6535  7cb0		       00		      .byte.b	%00000000
   6536  7cb1		       00		      .byte.b	%00000000
   6537  7cb2		       00		      .byte.b	%00000000
   6538  7cb3		       00		      .byte.b	%00000000
   6539  7cb4		       00		      .byte.b	%00000000
   6540  7cb5		       00		      .byte.b	%00000000
   6541  7cb6		       00		      .byte.b	%00000000
   6542  7cb7		       00		      .byte.b	%00000000
   6543  7cb8		       00		      .byte.b	%00000000
   6544  7cb9		       00		      .byte.b	%00000000
   6545  7cba		       00		      .byte.b	%00000000
   6546  7cbb		       00		      .byte.b	%00000000
   6547  7cbc		       00		      .byte.b	%00000000
   6548  7cbd		       00		      .byte.b	%00000000
   6549  7cbe		       00		      .byte.b	%00000000
   6550  7cbf		       00		      .byte.b	%00000000
   6551  7cc0		       00		      .byte.b	%00000000
   6552  7cc1		       00		      .byte.b	%00000000
   6553  7cc2		       00		      .byte.b	%00000000
   6554  7cc3		       00		      .byte.b	%00000000
   6555  7cc4		       00		      .byte.b	%00000000
   6556  7cc5		       00		      .byte.b	%00000000
   6557  7cc6		       00		      .byte.b	%00000000
   6558  7cc7		       00		      .byte.b	%00000000
   6559  7cc8		       00		      .byte.b	%00000000
   6560  7cc9		       00		      .byte.b	%00000000
   6561  7cca		       50		      .byte.b	%01010000
   6562  7ccb				   playercolorL0184_1
   6563  7ccb		       00		      .byte.b	$00
   6564  7ccc		       00		      .byte.b	$00
   6565  7ccd		       00		      .byte.b	$00
   6566  7cce		       00		      .byte.b	$00
   6567  7ccf		       0e		      .byte.b	$0E
   6568  7cd0		       0e		      .byte.b	$0E
   6569  7cd1		       0e		      .byte.b	$0E
   6570  7cd2		       0e		      .byte.b	$0E
   6571  7cd3		       00		      .byte.b	$00
   6572  7cd4		       00		      .byte.b	$00
   6573  7cd5		       2a		      .byte.b	$2A
   6574  7cd6		       2a		      .byte.b	$2A
   6575  7cd7		       2a		      .byte.b	$2A
   6576  7cd8		       28		      .byte.b	$28
   6577  7cd9		       28		      .byte.b	$28
   6578  7cda		       26		      .byte.b	$26
   6579  7cdb		       26		      .byte.b	$26
   6580  7cdc		       24		      .byte.b	$24
   6581  7cdd		       24		      .byte.b	$24
   6582  7cde		       22		      .byte.b	$22
   6583  7cdf		       22		      .byte.b	$22
   6584  7ce0		       0c		      .byte.b	$0C
   6585  7ce1		       0c		      .byte.b	$0C
   6586  7ce2				   playerL0185_1
   6587  7ce2		       c3		      .byte.b	%11000011
   6588  7ce3		       e7		      .byte.b	%11100111
   6589  7ce4		       24		      .byte.b	%00100100
   6590  7ce5		       00		      .byte.b	%00000000
   6591  7ce6		       42		      .byte.b	%01000010
   6592  7ce7		       a5		      .byte.b	%10100101
   6593  7ce8		       a5		      .byte.b	%10100101
   6594  7ce9		       42		      .byte.b	%01000010
   6595  7cea		       3c		      .byte.b	%00111100
   6596  7ceb		       18		      .byte.b	%00011000
   6597  7cec		       76		      .byte.b	%01110110
   6598  7ced		       fb		      .byte.b	%11111011
   6599  7cee		       fb		      .byte.b	%11111011
   6600  7cef		       7a		      .byte.b	%01111010
   6601  7cf0		       7a		      .byte.b	%01111010
   6602  7cf1		       db		      .byte.b	%11011011
   6603  7cf2		       db		      .byte.b	%11011011
   6604  7cf3		       fb		      .byte.b	%11111011
   6605  7cf4		       fb		      .byte.b	%11111011
   6606  7cf5		       76		      .byte.b	%01110110
   6607  7cf6		       76		      .byte.b	%01110110
   6608  7cf7		       aa		      .byte.b	%10101010
   6609  7cf8		       55		      .byte.b	%01010101
   6610  7cf9				   playfieldcolorL0189
   6611  7cf9		       2c		      .byte.b	$2C
   6612  7cfa		       2c		      .byte.b	$2C
   6613  7cfb		       2c		      .byte.b	$2C
   6614  7cfc		       2c		      .byte.b	$2C
   6615  7cfd		       2c		      .byte.b	$2C
   6616  7cfe		       2c		      .byte.b	$2C
   6617  7cff		       2c		      .byte.b	$2C
   6618  7d00		       2c		      .byte.b	$2C
   6619  7d01		       2c		      .byte.b	$2C
   6620  7d02		       2c		      .byte.b	$2C
   6621  7d03		       2c		      .byte.b	$2C
   6622  7d04		       2c		      .byte.b	$2C
   6623  7d05		       2c		      .byte.b	$2C
   6624  7d06		       2c		      .byte.b	$2C
   6625  7d07		       2c		      .byte.b	$2C
   6626  7d08		       2c		      .byte.b	$2C
   6627  7d09		       2c		      .byte.b	$2C
   6628  7d0a		       2c		      .byte.b	$2C
   6629  7d0b		       2c		      .byte.b	$2C
   6630  7d0c		       2c		      .byte.b	$2C
   6631  7d0d		       2c		      .byte.b	$2C
   6632  7d0e		       2c		      .byte.b	$2C
   6633  7d0f		       2c		      .byte.b	$2C
   6634  7d10		       2c		      .byte.b	$2C
   6635  7d11		       2c		      .byte.b	$2C
   6636  7d12		       2c		      .byte.b	$2C
   6637  7d13		       2c		      .byte.b	$2C
   6638  7d14		       2c		      .byte.b	$2C
   6639  7d15		       2c		      .byte.b	$2C
   6640  7d16		       2c		      .byte.b	$2C
   6641  7d17		       2c		      .byte.b	$2C
   6642  7d18		       2c		      .byte.b	$2C
   6643  7d19		       2c		      .byte.b	$2C
   6644  7d1a		       2c		      .byte.b	$2C
   6645  7d1b		       2c		      .byte.b	$2C
   6646  7d1c		       2c		      .byte.b	$2C
   6647  7d1d		       2c		      .byte.b	$2C
   6648  7d1e		       2c		      .byte.b	$2C
   6649  7d1f		       2c		      .byte.b	$2C
   6650  7d20		       2c		      .byte.b	$2C
   6651  7d21		       28		      .byte.b	$28
   6652  7d22		       28		      .byte.b	$28
   6653  7d23		       26		      .byte.b	$26
   6654  7d24		       0e		      .byte.b	$0E
   6655  7d25				   backgroundcolorL0190
   6656  7d25		       02		      .byte.b	$02
   6657  7d26		       02		      .byte.b	$02
   6658  7d27		       02		      .byte.b	$02
   6659  7d28		       02		      .byte.b	$02
   6660  7d29		       02		      .byte.b	$02
   6661  7d2a		       02		      .byte.b	$02
   6662  7d2b		       02		      .byte.b	$02
   6663  7d2c		       02		      .byte.b	$02
   6664  7d2d		       02		      .byte.b	$02
   6665  7d2e		       02		      .byte.b	$02
   6666  7d2f		       02		      .byte.b	$02
   6667  7d30		       02		      .byte.b	$02
   6668  7d31		       02		      .byte.b	$02
   6669  7d32		       02		      .byte.b	$02
   6670  7d33		       02		      .byte.b	$02
   6671  7d34		       02		      .byte.b	$02
   6672  7d35		       02		      .byte.b	$02
   6673  7d36		       02		      .byte.b	$02
   6674  7d37		       02		      .byte.b	$02
   6675  7d38		       02		      .byte.b	$02
   6676  7d39		       02		      .byte.b	$02
   6677  7d3a		       02		      .byte.b	$02
   6678  7d3b		       02		      .byte.b	$02
   6679  7d3c		       02		      .byte.b	$02
   6680  7d3d		       02		      .byte.b	$02
   6681  7d3e		       02		      .byte.b	$02
   6682  7d3f		       02		      .byte.b	$02
   6683  7d40		       02		      .byte.b	$02
   6684  7d41		       02		      .byte.b	$02
   6685  7d42		       02		      .byte.b	$02
   6686  7d43		       02		      .byte.b	$02
   6687  7d44		       02		      .byte.b	$02
   6688  7d45		       02		      .byte.b	$02
   6689  7d46		       02		      .byte.b	$02
   6690  7d47		       02		      .byte.b	$02
   6691  7d48		       02		      .byte.b	$02
   6692  7d49		       02		      .byte.b	$02
   6693  7d4a		       02		      .byte.b	$02
   6694  7d4b		       02		      .byte.b	$02
   6695  7d4c		       02		      .byte.b	$02
   6696  7d4d		       02		      .byte.b	$02
   6697  7d4e		       02		      .byte.b	$02
   6698  7d4f		       02		      .byte.b	$02
   6699  7d50		       00		      .byte.b	$00
   6700  7d51				   PF_data11
   6701  7d51		       00		      .byte.b	%00000000
   6702  7d52		       00		      .byte.b	%00000000
   6703  7d53		       00		      .byte.b	%00000000
   6704  7d54		       00		      .byte.b	%00000000
   6705  7d55		       00		      .byte.b	%00000000
   6706  7d56		       00		      .byte.b	%00000000
   6707  7d57		       00		      .byte.b	%00000000
   6708  7d58		       00		      .byte.b	%00000000
   6709  7d59		       00		      .byte.b	%00000000
   6710  7d5a		       00		      .byte.b	%00000000
   6711  7d5b		       00		      .byte.b	%00000000
   6712  7d5c		       00		      .byte.b	%00000000
   6713  7d5d		       00		      .byte.b	%00000000
   6714  7d5e		       00		      .byte.b	%00000000
   6715  7d5f		       00		      .byte.b	%00000000
   6716  7d60		       00		      .byte.b	%00000000
   6717  7d61		       00		      .byte.b	%00000000
   6718  7d62		       00		      .byte.b	%00000000
   6719  7d63		       00		      .byte.b	%00000000
   6720  7d64		       00		      .byte.b	%00000000
   6721  7d65		       00		      .byte.b	%00000000
   6722  7d66		       00		      .byte.b	%00000000
   6723  7d67		       00		      .byte.b	%00000000
   6724  7d68		       00		      .byte.b	%00000000
   6725  7d69		       00		      .byte.b	%00000000
   6726  7d6a		       00		      .byte.b	%00000000
   6727  7d6b		       00		      .byte.b	%00000000
   6728  7d6c		       00		      .byte.b	%00000000
   6729  7d6d		       00		      .byte.b	%00000000
   6730  7d6e		       00		      .byte.b	%00000000
   6731  7d6f		       00		      .byte.b	%00000000
   6732  7d70		       00		      .byte.b	%00000000
   6733  7d71		       00		      .byte.b	%00000000
   6734  7d72		       00		      .byte.b	%00000000
   6735  7d73		       00		      .byte.b	%00000000
   6736  7d74		       00		      .byte.b	%00000000
   6737  7d75		       00		      .byte.b	%00000000
   6738  7d76		       00		      .byte.b	%00000000
   6739  7d77		       00		      .byte.b	%00000000
   6740  7d78		       00		      .byte.b	%00000000
   6741  7d79		       00		      .byte.b	%00000000
   6742  7d7a		       00		      .byte.b	%00000000
   6743  7d7b		       00		      .byte.b	%00000000
   6744  7d7c		       00		      .byte.b	%00000000
   6745  7d7d		       00		      .byte.b	%00000000
   6746  7d7e		       00		      .byte.b	%00000000
   6747  7d7f		       00		      .byte.b	%00000000
   6748  7d80		       00		      .byte.b	%00000000
   6749  7d81		       00		      .byte.b	%00000000
   6750  7d82		       00		      .byte.b	%00000000
   6751  7d83		       00		      .byte.b	%00000000
   6752  7d84		       00		      .byte.b	%00000000
   6753  7d85		       00		      .byte.b	%00000000
   6754  7d86		       00		      .byte.b	%00000000
   6755  7d87		       00		      .byte.b	%00000000
   6756  7d88		       00		      .byte.b	%00000000
   6757  7d89		       00		      .byte.b	%00000000
   6758  7d8a		       00		      .byte.b	%00000000
   6759  7d8b		       00		      .byte.b	%00000000
   6760  7d8c		       00		      .byte.b	%00000000
   6761  7d8d		       40		      .byte.b	%01000000
   6762  7d8e		       80		      .byte.b	%10000000
   6763  7d8f		       c0		      .byte.b	%11000000
   6764  7d90		       c0		      .byte.b	%11000000
   6765  7d91		       a0		      .byte.b	%10100000
   6766  7d92		       20		      .byte.b	%00100000
   6767  7d93		       60		      .byte.b	%01100000
   6768  7d94		       60		      .byte.b	%01100000
   6769  7d95		       c0		      .byte.b	%11000000
   6770  7d96		       00		      .byte.b	%00000000
   6771  7d97		       e0		      .byte.b	%11100000
   6772  7d98		       e0		      .byte.b	%11100000
   6773  7d99		       f0		      .byte.b	%11110000
   6774  7d9a		       ec		      .byte.b	%11101100
   6775  7d9b		       6c		      .byte.b	%01101100
   6776  7d9c		       70		      .byte.b	%01110000
   6777  7d9d		       a0		      .byte.b	%10100000
   6778  7d9e		       00		      .byte.b	%00000000
   6779  7d9f		       e0		      .byte.b	%11100000
   6780  7da0		       60		      .byte.b	%01100000
   6781  7da1		       00		      .byte.b	%00000000
   6782  7da2		       60		      .byte.b	%01100000
   6783  7da3		       b0		      .byte.b	%10110000
   6784  7da4		       b0		      .byte.b	%10110000
   6785  7da5		       b0		      .byte.b	%10110000
   6786  7da6		       b0		      .byte.b	%10110000
   6787  7da7		       60		      .byte.b	%01100000
   6788  7da8		       00		      .byte.b	%00000000
   6789  7da9		       00		      .byte.b	%00000000
   6790  7daa		       00		      .byte.b	%00000000
   6791  7dab		       00		      .byte.b	%00000000
   6792  7dac		       00		      .byte.b	%00000000
   6793  7dad		       00		      .byte.b	%00000000
   6794  7dae		       00		      .byte.b	%00000000
   6795  7daf		       00		      .byte.b	%00000000
   6796  7db0		       00		      .byte.b	%00000000
   6797  7db1		       00		      .byte.b	%00000000
   6798  7db2		       00		      .byte.b	%00000000
   6799  7db3		       00		      .byte.b	%00000000
   6800  7db4		       00		      .byte.b	%00000000
   6801  7db5		       00		      .byte.b	%00000000
   6802  7db6		       00		      .byte.b	%00000000
   6803  7db7		       00		      .byte.b	%00000000
   6804  7db8		       00		      .byte.b	%00000000
   6805  7db9		       c0		      .byte.b	%11000000
   6806  7dba		       80		      .byte.b	%10000000
   6807  7dbb		       c0		      .byte.b	%11000000
   6808  7dbc		       c0		      .byte.b	%11000000
   6809  7dbd		       a0		      .byte.b	%10100000
   6810  7dbe		       20		      .byte.b	%00100000
   6811  7dbf		       60		      .byte.b	%01100000
   6812  7dc0		       60		      .byte.b	%01100000
   6813  7dc1		       c0		      .byte.b	%11000000
   6814  7dc2		       00		      .byte.b	%00000000
   6815  7dc3		       c0		      .byte.b	%11000000
   6816  7dc4		       e0		      .byte.b	%11100000
   6817  7dc5		       70		      .byte.b	%01110000
   6818  7dc6		       70		      .byte.b	%01110000
   6819  7dc7		       e0		      .byte.b	%11100000
   6820  7dc8		       d0		      .byte.b	%11010000
   6821  7dc9		       b0		      .byte.b	%10110000
   6822  7dca		       00		      .byte.b	%00000000
   6823  7dcb		       60		      .byte.b	%01100000
   6824  7dcc		       c0		      .byte.b	%11000000
   6825  7dcd		       00		      .byte.b	%00000000
   6826  7dce		       c0		      .byte.b	%11000000
   6827  7dcf		       e0		      .byte.b	%11100000
   6828  7dd0		       e0		      .byte.b	%11100000
   6829  7dd1		       e0		      .byte.b	%11100000
   6830  7dd2		       e0		      .byte.b	%11100000
   6831  7dd3		       e0		      .byte.b	%11100000
   6832  7dd4		       00		      .byte.b	%00000000
   6833  7dd5		       00		      .byte.b	%00000000
   6834  7dd6		       00		      .byte.b	%00000000
   6835  7dd7		       00		      .byte.b	%00000000
   6836  7dd8		       00		      .byte.b	%00000000
   6837  7dd9		       00		      .byte.b	%00000000
   6838  7dda		       00		      .byte.b	%00000000
   6839  7ddb		       00		      .byte.b	%00000000
   6840  7ddc		       00		      .byte.b	%00000000
   6841  7ddd		       00		      .byte.b	%00000000
   6842  7dde		       00		      .byte.b	%00000000
   6843  7ddf		       00		      .byte.b	%00000000
   6844  7de0		       00		      .byte.b	%00000000
   6845  7de1		       00		      .byte.b	%00000000
   6846  7de2		       00		      .byte.b	%00000000
   6847  7de3		       00		      .byte.b	%00000000
   6848  7de4		       00		      .byte.b	%00000000
   6849  7de5		       00		      .byte.b	%00000000
   6850  7de6		       00		      .byte.b	%00000000
   6851  7de7		       00		      .byte.b	%00000000
   6852  7de8		       00		      .byte.b	%00000000
   6853  7de9		       00		      .byte.b	%00000000
   6854  7dea		       00		      .byte.b	%00000000
   6855  7deb		       00		      .byte.b	%00000000
   6856  7dec		       00		      .byte.b	%00000000
   6857  7ded		       00		      .byte.b	%00000000
   6858  7dee		       00		      .byte.b	%00000000
   6859  7def		       00		      .byte.b	%00000000
   6860  7df0		       00		      .byte.b	%00000000
   6861  7df1		       00		      .byte.b	%00000000
   6862  7df2		       00		      .byte.b	%00000000
   6863  7df3		       00		      .byte.b	%00000000
   6864  7df4		       00		      .byte.b	%00000000
   6865  7df5		       00		      .byte.b	%00000000
   6866  7df6		       00		      .byte.b	%00000000
   6867  7df7		       00		      .byte.b	%00000000
   6868  7df8		       00		      .byte.b	%00000000
   6869  7df9		       00		      .byte.b	%00000000
   6870  7dfa		       00		      .byte.b	%00000000
   6871  7dfb		       00		      .byte.b	%00000000
   6872  7dfc		       00		      .byte.b	%00000000
   6873  7dfd		       00		      .byte.b	%00000000
   6874  7dfe		       00		      .byte.b	%00000000
   6875  7dff		       00		      .byte.b	%00000000
   6876  7e00		       50		      .byte.b	%01010000
   6877  7e01				   playercolorL0193_0
   6878  7e01		       00		      .byte.b	$00
   6879  7e02		       00		      .byte.b	$00
   6880  7e03		       00		      .byte.b	$00
   6881  7e04		       0e		      .byte.b	$0E
   6882  7e05		       0e		      .byte.b	$0E
   6883  7e06		       0e		      .byte.b	$0E
   6884  7e07		       3c		      .byte.b	$3C
   6885  7e08		       3a		      .byte.b	$3A
   6886  7e09		       38		      .byte.b	$38
   6887  7e0a		       36		      .byte.b	$36
   6888  7e0b		       34		      .byte.b	$34
   6889  7e0c		       34		      .byte.b	$34
   6890  7e0d		       0e		      .byte.b	$0E
   6891  7e0e		       0e		      .byte.b	$0E
   6892  7e0f		       36		      .byte.b	$36
   6893  7e10		       34		      .byte.b	$34
   6894  7e11		       36		      .byte.b	$36
   6895  7e12		       3a		      .byte.b	$3A
   6896  7e13		       3c		      .byte.b	$3C
   6897  7e14		       3e		      .byte.b	$3E
   6898  7e15				   playerL0194_0
   6899  7e15		       c3		      .byte.b	%11000011
   6900  7e16		       e7		      .byte.b	%11100111
   6901  7e17		       24		      .byte.b	%00100100
   6902  7e18		       42		      .byte.b	%01000010
   6903  7e19		       a5		      .byte.b	%10100101
   6904  7e1a		       42		      .byte.b	%01000010
   6905  7e1b		       18		      .byte.b	%00011000
   6906  7e1c		       18		      .byte.b	%00011000
   6907  7e1d		       3c		      .byte.b	%00111100
   6908  7e1e		       3c		      .byte.b	%00111100
   6909  7e1f		       7e		      .byte.b	%01111110
   6910  7e20		       7e		      .byte.b	%01111110
   6911  7e21		       00		      .byte.b	%00000000
   6912  7e22		       54		      .byte.b	%01010100
   6913  7e23		       7e		      .byte.b	%01111110
   6914  7e24		       7e		      .byte.b	%01111110
   6915  7e25		       7e		      .byte.b	%01111110
   6916  7e26		       7e		      .byte.b	%01111110
   6917  7e27		       3c		      .byte.b	%00111100
   6918  7e28		       3c		      .byte.b	%00111100
   6919  7e29				   playfieldcolorL0198
   6920  7e29		       1a		      .byte.b	$1A
   6921  7e2a		       1a		      .byte.b	$1A
   6922  7e2b		       1a		      .byte.b	$1A
   6923  7e2c		       1a		      .byte.b	$1A
   6924  7e2d		       1a		      .byte.b	$1A
   6925  7e2e		       1a		      .byte.b	$1A
   6926  7e2f		       1a		      .byte.b	$1A
   6927  7e30		       1a		      .byte.b	$1A
   6928  7e31		       1a		      .byte.b	$1A
   6929  7e32		       1a		      .byte.b	$1A
   6930  7e33		       1a		      .byte.b	$1A
   6931  7e34		       1a		      .byte.b	$1A
   6932  7e35		       1a		      .byte.b	$1A
   6933  7e36		       1a		      .byte.b	$1A
   6934  7e37		       1a		      .byte.b	$1A
   6935  7e38		       1a		      .byte.b	$1A
   6936  7e39		       1a		      .byte.b	$1A
   6937  7e3a		       1a		      .byte.b	$1A
   6938  7e3b		       1a		      .byte.b	$1A
   6939  7e3c		       1a		      .byte.b	$1A
   6940  7e3d		       1a		      .byte.b	$1A
   6941  7e3e		       1a		      .byte.b	$1A
   6942  7e3f		       1a		      .byte.b	$1A
   6943  7e40		       1a		      .byte.b	$1A
   6944  7e41		       1a		      .byte.b	$1A
   6945  7e42		       1a		      .byte.b	$1A
   6946  7e43		       1a		      .byte.b	$1A
   6947  7e44		       1a		      .byte.b	$1A
   6948  7e45		       1a		      .byte.b	$1A
   6949  7e46		       1a		      .byte.b	$1A
   6950  7e47		       1a		      .byte.b	$1A
   6951  7e48		       1a		      .byte.b	$1A
   6952  7e49		       1a		      .byte.b	$1A
   6953  7e4a		       1a		      .byte.b	$1A
   6954  7e4b		       1a		      .byte.b	$1A
   6955  7e4c		       1a		      .byte.b	$1A
   6956  7e4d		       1a		      .byte.b	$1A
   6957  7e4e		       1a		      .byte.b	$1A
   6958  7e4f		       1a		      .byte.b	$1A
   6959  7e50		       1a		      .byte.b	$1A
   6960  7e51		       1a		      .byte.b	$1A
   6961  7e52		       1a		      .byte.b	$1A
   6962  7e53		       1a		      .byte.b	$1A
   6963  7e54				   backgroundcolorL0199
   6964  7e54		       02		      .byte.b	$02
   6965  7e55		       02		      .byte.b	$02
   6966  7e56		       02		      .byte.b	$02
   6967  7e57		       02		      .byte.b	$02
   6968  7e58		       02		      .byte.b	$02
   6969  7e59		       02		      .byte.b	$02
   6970  7e5a		       02		      .byte.b	$02
   6971  7e5b		       02		      .byte.b	$02
   6972  7e5c		       02		      .byte.b	$02
   6973  7e5d		       02		      .byte.b	$02
   6974  7e5e		       02		      .byte.b	$02
   6975  7e5f		       02		      .byte.b	$02
   6976  7e60		       02		      .byte.b	$02
   6977  7e61		       02		      .byte.b	$02
   6978  7e62		       02		      .byte.b	$02
   6979  7e63		       02		      .byte.b	$02
   6980  7e64		       02		      .byte.b	$02
   6981  7e65		       02		      .byte.b	$02
   6982  7e66		       02		      .byte.b	$02
   6983  7e67		       02		      .byte.b	$02
   6984  7e68		       02		      .byte.b	$02
   6985  7e69		       02		      .byte.b	$02
   6986  7e6a		       02		      .byte.b	$02
   6987  7e6b		       02		      .byte.b	$02
   6988  7e6c		       02		      .byte.b	$02
   6989  7e6d		       02		      .byte.b	$02
   6990  7e6e		       02		      .byte.b	$02
   6991  7e6f		       02		      .byte.b	$02
   6992  7e70		       02		      .byte.b	$02
   6993  7e71		       02		      .byte.b	$02
   6994  7e72		       02		      .byte.b	$02
   6995  7e73		       02		      .byte.b	$02
   6996  7e74		       02		      .byte.b	$02
   6997  7e75		       02		      .byte.b	$02
   6998  7e76		       02		      .byte.b	$02
   6999  7e77		       02		      .byte.b	$02
   7000  7e78		       02		      .byte.b	$02
   7001  7e79		       02		      .byte.b	$02
   7002  7e7a		       02		      .byte.b	$02
   7003  7e7b		       02		      .byte.b	$02
   7004  7e7c		       02		      .byte.b	$02
   7005  7e7d		       02		      .byte.b	$02
   7006  7e7e		       02		      .byte.b	$02
   7007  7e7f		       00		      .byte.b	$00
   7008  7e80		       00		      .byte.b	$00
   7009  7e81				   PF_data12
   7010  7e81		       00		      .byte.b	%00000000
   7011  7e82		       00		      .byte.b	%00000000
   7012  7e83		       00		      .byte.b	%00000000
   7013  7e84		       00		      .byte.b	%00000000
   7014  7e85		       00		      .byte.b	%00000000
   7015  7e86		       00		      .byte.b	%00000000
   7016  7e87		       00		      .byte.b	%00000000
   7017  7e88		       00		      .byte.b	%00000000
   7018  7e89		       00		      .byte.b	%00000000
   7019  7e8a		       00		      .byte.b	%00000000
   7020  7e8b		       00		      .byte.b	%00000000
   7021  7e8c		       00		      .byte.b	%00000000
   7022  7e8d		       00		      .byte.b	%00000000
   7023  7e8e		       00		      .byte.b	%00000000
   7024  7e8f		       00		      .byte.b	%00000000
   7025  7e90		       00		      .byte.b	%00000000
   7026  7e91		       00		      .byte.b	%00000000
   7027  7e92		       00		      .byte.b	%00000000
   7028  7e93		       00		      .byte.b	%00000000
   7029  7e94		       00		      .byte.b	%00000000
   7030  7e95		       00		      .byte.b	%00000000
   7031  7e96		       00		      .byte.b	%00000000
   7032  7e97		       00		      .byte.b	%00000000
   7033  7e98		       00		      .byte.b	%00000000
   7034  7e99		       00		      .byte.b	%00000000
   7035  7e9a		       00		      .byte.b	%00000000
   7036  7e9b		       00		      .byte.b	%00000000
   7037  7e9c		       00		      .byte.b	%00000000
   7038  7e9d		       00		      .byte.b	%00000000
   7039  7e9e		       00		      .byte.b	%00000000
   7040  7e9f		       00		      .byte.b	%00000000
   7041  7ea0		       00		      .byte.b	%00000000
   7042  7ea1		       00		      .byte.b	%00000000
   7043  7ea2		       00		      .byte.b	%00000000
   7044  7ea3		       00		      .byte.b	%00000000
   7045  7ea4		       00		      .byte.b	%00000000
   7046  7ea5		       00		      .byte.b	%00000000
   7047  7ea6		       00		      .byte.b	%00000000
   7048  7ea7		       00		      .byte.b	%00000000
   7049  7ea8		       00		      .byte.b	%00000000
   7050  7ea9		       00		      .byte.b	%00000000
   7051  7eaa		       00		      .byte.b	%00000000
   7052  7eab		       00		      .byte.b	%00000000
   7053  7eac		       00		      .byte.b	%00000000
   7054  7ead		       00		      .byte.b	%00000000
   7055  7eae		       00		      .byte.b	%00000000
   7056  7eaf		       00		      .byte.b	%00000000
   7057  7eb0		       00		      .byte.b	%00000000
   7058  7eb1		       00		      .byte.b	%00000000
   7059  7eb2		       00		      .byte.b	%00000000
   7060  7eb3		       00		      .byte.b	%00000000
   7061  7eb4		       00		      .byte.b	%00000000
   7062  7eb5		       00		      .byte.b	%00000000
   7063  7eb6		       00		      .byte.b	%00000000
   7064  7eb7		       00		      .byte.b	%00000000
   7065  7eb8		       00		      .byte.b	%00000000
   7066  7eb9		       00		      .byte.b	%00000000
   7067  7eba		       00		      .byte.b	%00000000
   7068  7ebb		       00		      .byte.b	%00000000
   7069  7ebc		       00		      .byte.b	%00000000
   7070  7ebd		       00		      .byte.b	%00000000
   7071  7ebe		       00		      .byte.b	%00000000
   7072  7ebf		       00		      .byte.b	%00000000
   7073  7ec0		       00		      .byte.b	%00000000
   7074  7ec1		       00		      .byte.b	%00000000
   7075  7ec2		       00		      .byte.b	%00000000
   7076  7ec3		       00		      .byte.b	%00000000
   7077  7ec4		       00		      .byte.b	%00000000
   7078  7ec5		       00		      .byte.b	%00000000
   7079  7ec6		       00		      .byte.b	%00000000
   7080  7ec7		       00		      .byte.b	%00000000
   7081  7ec8		       00		      .byte.b	%00000000
   7082  7ec9		       00		      .byte.b	%00000000
   7083  7eca		       00		      .byte.b	%00000000
   7084  7ecb		       00		      .byte.b	%00000000
   7085  7ecc		       00		      .byte.b	%00000000
   7086  7ecd		       00		      .byte.b	%00000000
   7087  7ece		       00		      .byte.b	%00000000
   7088  7ecf		       00		      .byte.b	%00000000
   7089  7ed0		       00		      .byte.b	%00000000
   7090  7ed1		       00		      .byte.b	%00000000
   7091  7ed2		       00		      .byte.b	%00000000
   7092  7ed3		       00		      .byte.b	%00000000
   7093  7ed4		       00		      .byte.b	%00000000
   7094  7ed5		       00		      .byte.b	%00000000
   7095  7ed6		       00		      .byte.b	%00000000
   7096  7ed7		       00		      .byte.b	%00000000
   7097  7ed8		       00		      .byte.b	%00000000
   7098  7ed9		       02		      .byte.b	%00000010
   7099  7eda		       07		      .byte.b	%00000111
   7100  7edb		       0f		      .byte.b	%00001111
   7101  7edc		       0f		      .byte.b	%00001111
   7102  7edd		       0f		      .byte.b	%00001111
   7103  7ede		       0f		      .byte.b	%00001111
   7104  7edf		       0f		      .byte.b	%00001111
   7105  7ee0		       0f		      .byte.b	%00001111
   7106  7ee1		       0f		      .byte.b	%00001111
   7107  7ee2		       0f		      .byte.b	%00001111
   7108  7ee3		       0f		      .byte.b	%00001111
   7109  7ee4		       0f		      .byte.b	%00001111
   7110  7ee5		       0f		      .byte.b	%00001111
   7111  7ee6		       0f		      .byte.b	%00001111
   7112  7ee7		       0f		      .byte.b	%00001111
   7113  7ee8		       0f		      .byte.b	%00001111
   7114  7ee9		       07		      .byte.b	%00000111
   7115  7eea		       02		      .byte.b	%00000010
   7116  7eeb		       02		      .byte.b	%00000010
   7117  7eec		       02		      .byte.b	%00000010
   7118  7eed		       03		      .byte.b	%00000011
   7119  7eee		       07		      .byte.b	%00000111
   7120  7eef		       04		      .byte.b	%00000100
   7121  7ef0		       04		      .byte.b	%00000100
   7122  7ef1		       04		      .byte.b	%00000100
   7123  7ef2		       0f		      .byte.b	%00001111
   7124  7ef3		       1c		      .byte.b	%00011100
   7125  7ef4		       18		      .byte.b	%00011000
   7126  7ef5		       08		      .byte.b	%00001000
   7127  7ef6		       08		      .byte.b	%00001000
   7128  7ef7		       04		      .byte.b	%00000100
   7129  7ef8		       07		      .byte.b	%00000111
   7130  7ef9		       03		      .byte.b	%00000011
   7131  7efa		       00		      .byte.b	%00000000
   7132  7efb		       05		      .byte.b	%00000101
   7133  7efc		       08		      .byte.b	%00001000
   7134  7efd		       0a		      .byte.b	%00001010
   7135  7efe		       05		      .byte.b	%00000101
   7136  7eff		       0e		      .byte.b	%00001110
   7137  7f00		       0e		      .byte.b	%00001110
   7138  7f01		       0e		      .byte.b	%00001110
   7139  7f02		       0e		      .byte.b	%00001110
   7140  7f03		       0e		      .byte.b	%00001110
   7141  7f04		       00		      .byte.b	%00000000
   7142  7f05		       10		      .byte.b	%00010000
   7143  7f06		       38		      .byte.b	%00111000
   7144  7f07		       7d		      .byte.b	%01111101
   7145  7f08		       7d		      .byte.b	%01111101
   7146  7f09		       7d		      .byte.b	%01111101
   7147  7f0a		       7d		      .byte.b	%01111101
   7148  7f0b		       7d		      .byte.b	%01111101
   7149  7f0c		       7d		      .byte.b	%01111101
   7150  7f0d		       7d		      .byte.b	%01111101
   7151  7f0e		       7d		      .byte.b	%01111101
   7152  7f0f		       7d		      .byte.b	%01111101
   7153  7f10		       7d		      .byte.b	%01111101
   7154  7f11		       7d		      .byte.b	%01111101
   7155  7f12		       7d		      .byte.b	%01111101
   7156  7f13		       7d		      .byte.b	%01111101
   7157  7f14		       7d		      .byte.b	%01111101
   7158  7f15		       38		      .byte.b	%00111000
   7159  7f16		       10		      .byte.b	%00010000
   7160  7f17		       10		      .byte.b	%00010000
   7161  7f18		       17		      .byte.b	%00010111
   7162  7f19		       1f		      .byte.b	%00011111
   7163  7f1a		       3f		      .byte.b	%00111111
   7164  7f1b		       27		      .byte.b	%00100111
   7165  7f1c		       27		      .byte.b	%00100111
   7166  7f1d		       22		      .byte.b	%00100010
   7167  7f1e		       78		      .byte.b	%01111000
   7168  7f1f		       e0		      .byte.b	%11100000
   7169  7f20		       c0		      .byte.b	%11000000
   7170  7f21		       40		      .byte.b	%01000000
   7171  7f22		       40		      .byte.b	%01000000
   7172  7f23		       20		      .byte.b	%00100000
   7173  7f24		       3f		      .byte.b	%00111111
   7174  7f25		       1f		      .byte.b	%00011111
   7175  7f26		       00		      .byte.b	%00000000
   7176  7f27		       16		      .byte.b	%00010110
   7177  7f28		       3b		      .byte.b	%00111011
   7178  7f29		       3d		      .byte.b	%00111101
   7179  7f2a		       7d		      .byte.b	%01111101
   7180  7f2b		       7d		      .byte.b	%01111101
   7181  7f2c		       7d		      .byte.b	%01111101
   7182  7f2d		       7d		      .byte.b	%01111101
   7183  7f2e		       7d		      .byte.b	%01111101
   7184  7f2f		       7d		      .byte.b	%01111101
   7185  7f30		       50		      .byte.b	%01010000
   7186  7f31				   playercolorL0202_2
   7187  7f31		       06		      .byte.b	$06
   7188  7f32		       06		      .byte.b	$06
   7189  7f33		       04		      .byte.b	$04
   7190  7f34		       0c		      .byte.b	$0C
   7191  7f35		       0c		      .byte.b	$0C
   7192  7f36		       0c		      .byte.b	$0C
   7193  7f37		       0c		      .byte.b	$0C
   7194  7f38		       0c		      .byte.b	$0C
   7195  7f39		       00		      .byte.b	$00
   7196  7f3a		       00		      .byte.b	$00
   7197  7f3b		       00		      .byte.b	$00
   7198  7f3c		       00		      .byte.b	$00
   7199  7f3d		       00		      .byte.b	$00
   7200  7f3e		       00		      .byte.b	$00
   7201  7f3f		       0e		      .byte.b	$0E
   7202  7f40		       0e		      .byte.b	$0E
   7203  7f41		       0c		      .byte.b	$0C
   7204  7f42		       0c		      .byte.b	$0C
   7205  7f43		       0a		      .byte.b	$0A
   7206  7f44		       0a		      .byte.b	$0A
   7207  7f45		       08		      .byte.b	$08
   7208  7f46		       08		      .byte.b	$08
   7209  7f47		       06		      .byte.b	$06
   7210  7f48		       06		      .byte.b	$06
   7211  7f49		       04		      .byte.b	$04
   7212  7f4a		       04		      .byte.b	$04
   7213  7f4b		       02		      .byte.b	$02
   7214  7f4c		       02		      .byte.b	$02
   7215  7f4d		       0e		      .byte.b	$0E
   7216  7f4e		       0e		      .byte.b	$0E
   7217  7f4f		       0e		      .byte.b	$0E
   7218  7f50				   playerL0203_2
   7219  7f50		       42		      .byte.b	%01000010
   7220  7f51		       42		      .byte.b	%01000010
   7221  7f52		       e7		      .byte.b	%11100111
   7222  7f53		       a5		      .byte.b	%10100101
   7223  7f54		       a5		      .byte.b	%10100101
   7224  7f55		       a5		      .byte.b	%10100101
   7225  7f56		       42		      .byte.b	%01000010
   7226  7f57		       42		      .byte.b	%01000010
   7227  7f58		       00		      .byte.b	%00000000
   7228  7f59		       00		      .byte.b	%00000000
   7229  7f5a		       3c		      .byte.b	%00111100
   7230  7f5b		       3c		      .byte.b	%00111100
   7231  7f5c		       18		      .byte.b	%00011000
   7232  7f5d		       18		      .byte.b	%00011000
   7233  7f5e		       76		      .byte.b	%01110110
   7234  7f5f		       76		      .byte.b	%01110110
   7235  7f60		       fb		      .byte.b	%11111011
   7236  7f61		       fb		      .byte.b	%11111011
   7237  7f62		       fb		      .byte.b	%11111011
   7238  7f63		       fb		      .byte.b	%11111011
   7239  7f64		       fb		      .byte.b	%11111011
   7240  7f65		       fb		      .byte.b	%11111011
   7241  7f66		       fb		      .byte.b	%11111011
   7242  7f67		       fb		      .byte.b	%11111011
   7243  7f68		       fb		      .byte.b	%11111011
   7244  7f69		       fb		      .byte.b	%11111011
   7245  7f6a		       76		      .byte.b	%01110110
   7246  7f6b		       76		      .byte.b	%01110110
   7247  7f6c		       1c		      .byte.b	%00011100
   7248  7f6d		       1c		      .byte.b	%00011100
   7249  7f6e		       00		      .byte.b	%00000000
   7250  7f6f					      if	ECHOFIRST
      101 bytes of ROM space left in graphics bank
   7251  7f6f					      echo	"    ",[(DPC_graphics_end - *)]d , "bytes of ROM space left in graphics bank")
   7252  7f6f					      endif
   7253  7f6f		       00 01	   ECHOFIRST  =	1
   7254  7f6f
   7255  7f6f
   7256  7f6f							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7257  7f6f
   7258  7fd4					      ORG	$7FF4-bscode_length
   7259  7fd4					      RORG	$DFF4-bscode_length
   7260  7fd4				   DPC_graphics_end
   7261  7fd4
   7262  7fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7263  7fd4
   7264  7fd4							; every bank has this stuff at the same place
   7265  7fd4							; this code can switch to/from any bank at any entry point
   7266  7fd4							; and can preserve register values
   7267  7fd4							; note: lines not starting with a space are not placed in all banks
   7268  7fd4							;
   7269  7fd4							; line below tells the compiler how long this is - do not remove
   7270  7fd4							;size=32
   7271  7fd4
   7272  7fd4				   begin_bscode
   7273  7fd4		       a2 ff		      ldx	#$ff
   7274  7fd6					      ifconst	FASTFETCH	; using DPC+
   7275  7fd6		       8e 58 10 	      stx	FASTFETCH
   7276  7fd9					      endif
   7277  7fd9		       9a		      txs
   7278  7fda				  -	      if	bankswitch == 64
   7279  7fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7280  7fda					      else
   7281  7fda		       a9 18		      lda	#>(start-1)
   7282  7fdc					      endif
   7283  7fdc		       48		      pha
   7284  7fdd		       a9 eb		      lda	#<(start-1)
   7285  7fdf		       48		      pha
   7286  7fe0
   7287  7fe0				   BS_return
   7288  7fe0		       48		      pha
   7289  7fe1		       8a		      txa
   7290  7fe2		       48		      pha
   7291  7fe3		       ba		      tsx
   7292  7fe4
   7293  7fe4					      if	bankswitch != 64
   7294  7fe4		       b5 04		      lda	4,x	; get high byte of return address
   7295  7fe6
   7296  7fe6		       2a		      rol
   7297  7fe7		       2a		      rol
   7298  7fe8		       2a		      rol
   7299  7fe9		       2a		      rol
   7300  7fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7301  7fec		       aa		      tax
   7302  7fed		       e8		      inx
   7303  7fee				  -	      else
   7304  7fee				  -	      lda	4,x	; get high byte of return address
   7305  7fee				  -	      tay
   7306  7fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7307  7fee				  -	      sta	4,x
   7308  7fee				  -	      tya
   7309  7fee				  -	      lsr
   7310  7fee				  -	      lsr
   7311  7fee				  -	      lsr
   7312  7fee				  -	      lsr
   7313  7fee				  -	      tax
   7314  7fee				  -	      inx
   7315  7fee					      endif
   7316  7fee
   7317  7fee				   BS_jsr
   7318  7fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7319  7ff1		       68		      pla
   7320  7ff2		       aa		      tax
   7321  7ff3		       68		      pla
   7322  7ff4		       60		      rts
   7323  7ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7324  7ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7325  7ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7326  7ff5					      endif
   7327  7ff5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7328  7ff5
   7329  8000					      org	$8000
   7330  8000					      rorg	$1000
   7331  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7332  8000
   7333  8000							; 1K Frequency Table.
   7334  8000							; Fred Quimby, Darrell Spice Jr, Chris Walton 2010
   7335  8000							;
   7336  8000							; The 1K Frequency Table can contain up to 256 frequency values
   7337  8000							;
   7338  8000							; Table entries are defined as 2^32*freq/20000
   7339  8000							;
   7340  8000							; If User ARM code is being used, then the last 512 bytes of the frequency
   7341  8000							; table will no longer be available, reducing the number of frequencies you can
   7342  8000							; use to 128.
   7343  8000
   7344  8000							; piano key frequencies (s = sharp)
   7345  8000
   7346  8000				   .freq_table_start
   7347  8000
   7348  8000		       00 00 00 00	      DC.L	0
   7349  8000		       00 01	   A0	      =	(* & $3ff)/4
   7350  8004		       ac 1c 5a 00	      DC.L	5905580
   7351  8008
   7352  8008		       00 02	   A0s	      =	(* & $3ff)/4
   7353  8008		       68 78 5f 00	      DC.L	6256744
   7354  800c
   7355  800c		       00 03	   B0	      =	(* & $3ff)/4
   7356  800c		       b5 25 65 00	      DC.L	6628789
   7357  8010
   7358  8010		       00 04	   C1	      =	(* & $3ff)/4
   7359  8010		       6e 29 6b 00	      DC.L	7022958
   7360  8014
   7361  8014		       00 05	   C1s	      =	(* & $3ff)/4
   7362  8014		       b5 88 71 00	      DC.L	7440565
   7363  8018
   7364  8018		       00 06	   D1	      =	(* & $3ff)/4
   7365  8018		       fc 48 78 00	      DC.L	7883004
   7366  801c
   7367  801c		       00 07	   D1s	      =	(* & $3ff)/4
   7368  801c		       07 70 7f 00	      DC.L	8351751
   7369  8020
   7370  8020		       00 08	   E1	      =	(* & $3ff)/4
   7371  8020		       f4 03 87 00	      DC.L	8848372
   7372  8024
   7373  8024		       00 09	   F1	      =	(* & $3ff)/4
   7374  8024		       3c 0b 8f 00	      DC.L	9374524
   7375  8028
   7376  8028		       00 0a	   F1s	      =	(* & $3ff)/4
   7377  8028		       ba 8c 97 00	      DC.L	9931962
   7378  802c
   7379  802c		       00 0b	   G1	      =	(* & $3ff)/4
   7380  802c		       b3 8f a0 00	      DC.L	10522547
   7381  8030
   7382  8030		       00 0c	   G1s	      =	(* & $3ff)/4
   7383  8030		       db 1b aa 00	      DC.L	11148251
   7384  8034
   7385  8034		       00 0d	   A1	      =	(* & $3ff)/4
   7386  8034		       58 39 b4 00	      DC.L	11811160
   7387  8038
   7388  8038		       00 0e	   A1s	      =	(* & $3ff)/4
   7389  8038		       d0 f0 be 00	      DC.L	12513488
   7390  803c
   7391  803c		       00 0f	   B1	      =	(* & $3ff)/4
   7392  803c		       6b 4b ca 00	      DC.L	13257579
   7393  8040
   7394  8040		       00 10	   C2	      =	(* & $3ff)/4
   7395  8040		       dc 52 d6 00	      DC.L	14045916
   7396  8044
   7397  8044		       00 11	   C2s	      =	(* & $3ff)/4
   7398  8044		       69 11 e3 00	      DC.L	14881129
   7399  8048
   7400  8048		       00 12	   D2	      =	(* & $3ff)/4
   7401  8048		       f7 91 f0 00	      DC.L	15766007
   7402  804c
   7403  804c		       00 13	   D2s	      =	(* & $3ff)/4
   7404  804c		       0f e0 fe 00	      DC.L	16703503
   7405  8050
   7406  8050		       00 14	   E2	      =	(* & $3ff)/4
   7407  8050		       e9 07 0e 01	      DC.L	17696745
   7408  8054
   7409  8054		       00 15	   F2	      =	(* & $3ff)/4
   7410  8054		       78 16 1e 01	      DC.L	18749048
   7411  8058
   7412  8058		       00 16	   F2s	      =	(* & $3ff)/4
   7413  8058		       74 19 2f 01	      DC.L	19863924
   7414  805c
   7415  805c		       00 17	   G2	      =	(* & $3ff)/4
   7416  805c		       67 1f 41 01	      DC.L	21045095
   7417  8060
   7418  8060		       00 18	   G2s	      =	(* & $3ff)/4
   7419  8060		       b5 37 54 01	      DC.L	22296501
   7420  8064
   7421  8064		       00 19	   A2	      =	(* & $3ff)/4
   7422  8064		       b0 72 68 01	      DC.L	23622320
   7423  8068
   7424  8068		       00 1a	   A2s	      =	(* & $3ff)/4
   7425  8068		       a0 e1 7d 01	      DC.L	25026976
   7426  806c
   7427  806c		       00 1b	   B2	      =	(* & $3ff)/4
   7428  806c		       d6 96 94 01	      DC.L	26515158
   7429  8070
   7430  8070		       00 1c	   C3	      =	(* & $3ff)/4
   7431  8070		       b7 a5 ac 01	      DC.L	28091831
   7432  8074
   7433  8074		       00 1d	   C3s	      =	(* & $3ff)/4
   7434  8074		       d2 22 c6 01	      DC.L	29762258
   7435  8078
   7436  8078		       00 1e	   D3	      =	(* & $3ff)/4
   7437  8078		       ee 23 e1 01	      DC.L	31532014
   7438  807c
   7439  807c		       00 1f	   D3s	      =	(* & $3ff)/4
   7440  807c		       1d c0 fd 01	      DC.L	33407005
   7441  8080
   7442  8080		       00 20	   E3	      =	(* & $3ff)/4
   7443  8080		       d1 0f 1c 02	      DC.L	35393489
   7444  8084
   7445  8084		       00 21	   F3	      =	(* & $3ff)/4
   7446  8084		       f0 2c 3c 02	      DC.L	37498096
   7447  8088
   7448  8088		       00 22	   F3s	      =	(* & $3ff)/4
   7449  8088		       e9 32 5e 02	      DC.L	39727849
   7450  808c
   7451  808c		       00 23	   G3	      =	(* & $3ff)/4
   7452  808c		       cd 3e 82 02	      DC.L	42090189
   7453  8090
   7454  8090		       00 24	   G3s	      =	(* & $3ff)/4
   7455  8090		       6a 6f a8 02	      DC.L	44593002
   7456  8094
   7457  8094		       00 25	   A3	      =	(* & $3ff)/4
   7458  8094		       60 e5 d0 02	      DC.L	47244640
   7459  8098
   7460  8098		       00 26	   A3s	      =	(* & $3ff)/4
   7461  8098		       41 c3 fb 02	      DC.L	50053953
   7462  809c
   7463  809c		       00 27	   B3	      =	(* & $3ff)/4
   7464  809c		       ac 2d 29 03	      DC.L	53030316
   7465  80a0
   7466  80a0		       00 28	   C4	      =	(* & $3ff)/4
   7467  80a0		       6e 4b 59 03	      DC.L	56183662
   7468  80a4
   7469  80a4		       00 29	   C4s	      =	(* & $3ff)/4
   7470  80a4		       a5 45 8c 03	      DC.L	59524517
   7471  80a8
   7472  80a8		       00 2a	   D4	      =	(* & $3ff)/4
   7473  80a8		       dd 47 c2 03	      DC.L	63064029
   7474  80ac
   7475  80ac		       00 2b	   D4s	      =	(* & $3ff)/4
   7476  80ac		       3b 80 fb 03	      DC.L	66814011
   7477  80b0
   7478  80b0		       00 2c	   E4	      =	(* & $3ff)/4
   7479  80b0		       a3 1f 38 04	      DC.L	70786979
   7480  80b4
   7481  80b4		       00 2d	   F4	      =	(* & $3ff)/4
   7482  80b4		       e0 59 78 04	      DC.L	74996192
   7483  80b8
   7484  80b8		       00 2e	   F4s	      =	(* & $3ff)/4
   7485  80b8		       d1 65 bc 04	      DC.L	79455697
   7486  80bc
   7487  80bc		       00 2f	   G4	      =	(* & $3ff)/4
   7488  80bc		       9b 7d 04 05	      DC.L	84180379
   7489  80c0
   7490  80c0		       00 30	   G4s	      =	(* & $3ff)/4
   7491  80c0		       d5 de 50 05	      DC.L	89186005
   7492  80c4
   7493  80c4		       00 31	   A4	      =	(* & $3ff)/4
   7494  80c4		       c1 ca a1 05	      DC.L	94489281
   7495  80c8
   7496  80c8		       00 32	   A4s	      =	(* & $3ff)/4
   7497  80c8		       82 86 f7 05	      DC.L	100107906
   7498  80cc
   7499  80cc		       00 33	   B4	      =	(* & $3ff)/4
   7500  80cc		       57 5b 52 06	      DC.L	106060631
   7501  80d0
   7502  80d0		       00 34	   C5	      =	(* & $3ff)/4
   7503  80d0		       dd 96 b2 06	      DC.L	112367325
   7504  80d4
   7505  80d4		       00 35	   C5s	      =	(* & $3ff)/4
   7506  80d4		       4a 8b 18 07	      DC.L	119049034
   7507  80d8
   7508  80d8		       00 36	   D5	      =	(* & $3ff)/4
   7509  80d8		       b9 8f 84 07	      DC.L	126128057
   7510  80dc
   7511  80dc		       00 37	   D5s	      =	(* & $3ff)/4
   7512  80dc		       76 00 f7 07	      DC.L	133628022
   7513  80e0
   7514  80e0		       00 38	   E5	      =	(* & $3ff)/4
   7515  80e0		       46 3f 70 08	      DC.L	141573958
   7516  80e4
   7517  80e4		       00 39	   F5	      =	(* & $3ff)/4
   7518  80e4		       bf b3 f0 08	      DC.L	149992383
   7519  80e8
   7520  80e8		       00 3a	   F5s	      =	(* & $3ff)/4
   7521  80e8		       a3 cb 78 09	      DC.L	158911395
   7522  80ec
   7523  80ec		       00 3b	   G5	      =	(* & $3ff)/4
   7524  80ec		       36 fb 08 0a	      DC.L	168360758
   7525  80f0
   7526  80f0		       00 3c	   G5s	      =	(* & $3ff)/4
   7527  80f0		       a9 bd a1 0a	      DC.L	178372009
   7528  80f4
   7529  80f4		       00 3d	   A5	      =	(* & $3ff)/4
   7530  80f4		       81 95 43 0b	      DC.L	188978561
   7531  80f8
   7532  80f8		       00 3e	   A5s	      =	(* & $3ff)/4
   7533  80f8		       03 0d ef 0b	      DC.L	200215811
   7534  80fc
   7535  80fc		       00 3f	   B5	      =	(* & $3ff)/4
   7536  80fc		       af b6 a4 0c	      DC.L	212121263
   7537  8100
   7538  8100		       00 40	   C6	      =	(* & $3ff)/4
   7539  8100		       b9 2d 65 0d	      DC.L	224734649
   7540  8104
   7541  8104		       00 41	   C6s	      =	(* & $3ff)/4
   7542  8104		       93 16 31 0e	      DC.L	238098067
   7543  8108
   7544  8108		       00 42	   D6	      =	(* & $3ff)/4
   7545  8108		       73 1f 09 0f	      DC.L	252256115
   7546  810c
   7547  810c		       00 43	   D6s	      =	(* & $3ff)/4
   7548  810c		       ec 00 ee 0f	      DC.L	267256044
   7549  8110
   7550  8110		       00 44	   E6	      =	(* & $3ff)/4
   7551  8110		       8b 7e e0 10	      DC.L	283147915
   7552  8114
   7553  8114		       00 45	   F6	      =	(* & $3ff)/4
   7554  8114		       7f 67 e1 11	      DC.L	299984767
   7555  8118
   7556  8118		       00 46	   F6s	      =	(* & $3ff)/4
   7557  8118		       45 97 f1 12	      DC.L	317822789
   7558  811c
   7559  811c		       00 47	   G6	      =	(* & $3ff)/4
   7560  811c		       6c f6 11 14	      DC.L	336721516
   7561  8120
   7562  8120		       00 48	   G6s	      =	(* & $3ff)/4
   7563  8120		       53 7b 43 15	      DC.L	356744019
   7564  8124
   7565  8124		       00 49	   A6	      =	(* & $3ff)/4
   7566  8124		       02 2b 87 16	      DC.L	377957122
   7567  8128
   7568  8128		       00 4a	   A6s	      =	(* & $3ff)/4
   7569  8128		       06 1a de 17	      DC.L	400431622
   7570  812c
   7571  812c		       00 4b	   B6	      =	(* & $3ff)/4
   7572  812c		       5d 6d 49 19	      DC.L	424242525
   7573  8130
   7574  8130		       00 4c	   C7	      =	(* & $3ff)/4
   7575  8130		       73 5b ca 1a	      DC.L	449469299
   7576  8134
   7577  8134		       00 4d	   C7s	      =	(* & $3ff)/4
   7578  8134		       26 2d 62 1c	      DC.L	476196134
   7579  8138
   7580  8138		       00 4e	   D7	      =	(* & $3ff)/4
   7581  8138		       e6 3e 12 1e	      DC.L	504512230
   7582  813c
   7583  813c		       00 4f	   D7s	      =	(* & $3ff)/4
   7584  813c		       d8 01 dc 1f	      DC.L	534512088
   7585  8140
   7586  8140		       00 50	   E7	      =	(* & $3ff)/4
   7587  8140		       17 fd c0 21	      DC.L	566295831
   7588  8144
   7589  8144		       00 51	   F7	      =	(* & $3ff)/4
   7590  8144		       fd ce c2 23	      DC.L	599969533
   7591  8148
   7592  8148		       00 52	   F7s	      =	(* & $3ff)/4
   7593  8148		       8a 2e e3 25	      DC.L	635645578
   7594  814c
   7595  814c		       00 53	   G7	      =	(* & $3ff)/4
   7596  814c		       d7 ec 23 28	      DC.L	673443031
   7597  8150
   7598  8150		       00 54	   G7s	      =	(* & $3ff)/4
   7599  8150		       a6 f6 86 2a	      DC.L	713488038
   7600  8154
   7601  8154		       00 55	   A7	      =	(* & $3ff)/4
   7602  8154		       04 56 0e 2d	      DC.L	755914244
   7603  8158
   7604  8158		       00 56	   A7s	      =	(* & $3ff)/4
   7605  8158		       0c 34 bc 2f	      DC.L	800863244
   7606  815c
   7607  815c		       00 57	   B7	      =	(* & $3ff)/4
   7608  815c		       bb da 92 32	      DC.L	848485051
   7609  8160
   7610  8160		       00 58	   C8	      =	(* & $3ff)/4
   7611  8160		       e5 b6 94 35	      DC.L	898938597
   7612  8164
   7613  8164							;values for 89-255 may go here 
   7614  8164
   7615  8164					      if	(* <= $1400)
   7616  8164		       00 00 00 00*	      ds	($1400-*)	; pad out remaining space in frequency table
   7617  8400				  -	      else
   7618  8400				  -	      echo	"FATAL ERROR - Frequency table exceeds 1K"
   7619  8400				  -	      err
   7620  8400					      endif

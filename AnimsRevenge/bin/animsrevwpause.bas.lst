------- FILE c:\Users\alexi\OneDrive\Documentos\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm LEVEL 1 PASS 2
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE c:\Users\alexi\OneDrive\Documentos\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE c:\Users\alexi\OneDrive\Documentos\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  9000 ????				      include	"2600basic.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 20	   bscode_length =	32
      4  9000 ????	       00 01	   pfscore    =	1
      5  9000 ????
      6  9000 ????	       00 9f	   _M_Edge_Right =	159
      7  9000 ????
      8  9000 ????	       00 02	   _M_Edge_Left =	2
      9  9000 ????
     10  9000 ????	       00 58	   _M_Edge_Bottom =	88
     11  9000 ????
     12  9000 ????	       00 02	   _M_Edge_Top =	2
     13  9000 ????
     14  9000 ????	       00 89	   _Lost_Soul_Y =	bally
     15  9000 ????
     16  9000 ????	       00 84	   _Lost_Soul_X =	ballx
     17  9000 ????
     18  9000 ????	       00 95	   _sc3       =	score + 2
     19  9000 ????
     20  9000 ????	       00 94	   _sc2       =	score + 1
     21  9000 ????
     22  9000 ????	       00 93	   _sc1       =	score
     23  9000 ????
     24  9000 ????	       00 ed	   rand16     =	z
     25  9000 ????
     26  9000 ????	       00 ec	   _Bit7_M1_Moving =	y
     27  9000 ????
     28  9000 ????	       00 ec	   _Bit6_Swap_Scores =	y
     29  9000 ????
     30  9000 ????	       00 ec	   _Bit3_Auto_Play =	y
     31  9000 ????
     32  9000 ????	       00 ec	   _Bit2_Game_Control =	y
     33  9000 ????
     34  9000 ????	       00 ec	   _Bit1_FireB_Restrainer =	y
     35  9000 ????
     36  9000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     37  9000 ????
     38  9000 ????	       00 ec	   _BitOp_01  =	y
     39  9000 ????
     40  9000 ????	       00 eb	   _High_Score3 =	x
     41  9000 ????
     42  9000 ????	       00 ea	   _High_Score2 =	w
     43  9000 ????
     44  9000 ????	       00 e9	   _High_Score1 =	v
     45  9000 ????
     46  9000 ????	       00 e8	   _Score3_Mem =	u
     47  9000 ????
     48  9000 ????	       00 e7	   _Score2_Mem =	t
     49  9000 ????
     50  9000 ????	       00 e6	   _Score1_Mem =	s
     51  9000 ????
     52  9000 ????	       00 e5	   _Bit2_Pause_Clr_Scheme =	r
     53  9000 ????
     54  9000 ????	       00 e5	   _Bit1_BW_Check =	r
     55  9000 ????
     56  9000 ????	       00 e5	   _Bit0_BW_Mem =	r
     57  9000 ????
     58  9000 ????	       00 e5	   _BitOp_02  =	r
     59  9000 ????
     60  9000 ????	       00 df	   _Pause_Color_Tmp =	l
     61  9000 ????
     62  9000 ????	       00 df	   _AP_Dir_Counter =	l
     63  9000 ????
     64  9000 ????	       00 de	   _Pause_Mem_Color_Tmp =	k
     65  9000 ????
     66  9000 ????	       00 de	   _AP_2_Sec_Score_Flip =	k
     67  9000 ????
     68  9000 ????	       00 dd	   _AP_Mem_P0y =	j
     69  9000 ????
     70  9000 ????	       00 dc	   _AP_Mem_P0x =	i
     71  9000 ????
     72  9000 ????	       00 db	   _Pause_Counter_Tmp =	h
     73  9000 ????
     74  9000 ????	       00 db	   _AP_Mem_Dir =	h
     75  9000 ????
     76  9000 ????	       00 a0	   _T5_AP_Dir =	temp5
     77  9000 ????
     78  9000 ????	       00 85	   _WillY     =	player0y
     79  9000 ????
     80  9000 ????	       00 80	   _WillX     =	player0x
     81  9000 ????
     82  9000 ????	       00 86	   _Main_CharY =	player1y
     83  9000 ????
     84  9000 ????	       00 81	   _Main_CharX =	player1x
     85  9000 ????
     86  9000 ????	       00 da	   _Bit7_M1_Dir_Right =	g
     87  9000 ????
     88  9000 ????	       00 da	   _Bit6_M1_Dir_Left =	g
     89  9000 ????
     90  9000 ????	       00 da	   _Bit5_M1_Dir_Down =	g
     91  9000 ????
     92  9000 ????	       00 da	   _Bit4_M1_Dir_Up =	g
     93  9000 ????
     94  9000 ????	       00 da	   _Bit3_P0_Dir_Right =	g
     95  9000 ????
     96  9000 ????	       00 da	   _Bit2_P0_Dir_Left =	g
     97  9000 ????
     98  9000 ????	       00 da	   _Bit1_P0_Dir_Down =	g
     99  9000 ????
    100  9000 ????	       00 da	   _Bit0_P0_Dir_Up =	g
    101  9000 ????
    102  9000 ????	       00 da	   _BitOp_P0_M1_Dir =	g
    103  9000 ????
    104  9000 ????	       00 e2	   _Kill_Count =	o
    105  9000 ????
    106  9000 ????	       00 00	   _Evade_Dir =	temp8
    107  9000 ????
    108  9000 ????	       00 ee	   _Will_AI_State =	temp7
    109  9000 ????
    110  9000 ????	       00 a1	   _Will_Stun_Timer =	temp6
    111  9000 ????
    112  9000 ????	       00 e1	   _Will_Aftn_AI =	n
    113  9000 ????
    114  9000 ????	       00 e0	   _Ch1_Duration =	m
    115  9000 ????
    116  9000 ????	       00 d7	   _Ch0_Counter =	d
    117  9000 ????
    118  9000 ????	       00 d6	   _Ch0_Duration =	c
    119  9000 ????
    120  9000 ????	       00 d5	   _Ch0_Sound =	b
    121  9000 ????
    122  9000 ????	       00 e4	   _Bitop_Coord_Counter =	q
    123  9000 ????
    124  9000 ????	       00 e3	   _Bitop_Screen_Counter =	p
    125  9000 ????
    126  9000 ????	       00 d9	   _Frame_Counter =	f
    127  9000 ????
    128  9000 ????	       00 d8	   _Master_Counter =	e
    129  9000 ????
    130  9000 ????	       00 d4	   genesispad =	a
    131  9000 ????
    132  9000 ????	       00 2b	   vblank_time =	43
    133  9000 ????	       00 25	   overscan_time =	37
    134  9000 ????	       00 07	   bs_mask    =	7
    135  9000 ????	       00 20	   bankswitch =	32
    136  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    137  9000 ????	       00 01	   PFcolors   =	1
    138  9000 ????	       00 01	   player1colors =	1
    139  9000 ????	       00 01	   playercolors =	1
    140  9000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  9000 ????
      8  9000 ????	       00 80	   player0x   =	$80
      9  9000 ????	       00 81	   player1x   =	$81
     10  9000 ????	       00 82	   missile0x  =	$82
     11  9000 ????	       00 83	   missile1x  =	$83
     12  9000 ????	       00 84	   ballx      =	$84
     13  9000 ????
     14  9000 ????	       00 85	   objecty    =	$85
     15  9000 ????	       00 85	   player0y   =	$85
     16  9000 ????	       00 86	   player1y   =	$86
     17  9000 ????	       00 87	   missile1height =	$87
     18  9000 ????	       00 88	   missile1y  =	$88
     19  9000 ????	       00 89	   bally      =	$89
     20  9000 ????
     21  9000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  9000 ????
     23  9000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  9000 ????	       00 8a	   player0pointerlo =	$8A
     25  9000 ????	       00 8b	   player0pointerhi =	$8B
     26  9000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  9000 ????	       00 8c	   player1pointerlo =	$8C
     28  9000 ????	       00 8d	   player1pointerhi =	$8D
     29  9000 ????
     30  9000 ????	       00 8e	   player0height =	$8E
     31  9000 ????	       00 8f	   player1height =	$8F
     32  9000 ????	       00 90	   missile0height =	$90
     33  9000 ????	       00 91	   missile0y  =	$91
     34  9000 ????	       00 92	   ballheight =	$92
     35  9000 ????
     36  9000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  9000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  9000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  9000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  9000 ????
     41  9000 ????	       00 93	   score      =	$93	; $93-$95
     42  9000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  9000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  9000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  9000 ????	       00 9e	   temp3      =	$9E
     46  9000 ????	       00 9f	   temp4      =	$9F
     47  9000 ????	       00 a0	   temp5      =	$A0
     48  9000 ????	       00 a1	   temp6      =	$A1
     49  9000 ????
     50  9000 ????	       00 a2	   rand       =	$A2
     51  9000 ????	       00 a3	   scorecolor =	$A3
     52  9000 ????
     53  9000 ????	       00 a4	   var0       =	$A4
     54  9000 ????	       00 a5	   var1       =	$A5
     55  9000 ????	       00 a6	   var2       =	$A6
     56  9000 ????	       00 a7	   var3       =	$A7
     57  9000 ????	       00 a8	   var4       =	$A8
     58  9000 ????	       00 a9	   var5       =	$A9
     59  9000 ????	       00 aa	   var6       =	$AA
     60  9000 ????	       00 ab	   var7       =	$AB
     61  9000 ????	       00 ac	   var8       =	$AC
     62  9000 ????	       00 ad	   var9       =	$AD
     63  9000 ????	       00 ae	   var10      =	$AE
     64  9000 ????	       00 af	   var11      =	$AF
     65  9000 ????	       00 b0	   var12      =	$B0
     66  9000 ????	       00 b1	   var13      =	$B1
     67  9000 ????	       00 b2	   var14      =	$B2
     68  9000 ????	       00 b3	   var15      =	$B3
     69  9000 ????	       00 b4	   var16      =	$B4
     70  9000 ????	       00 b5	   var17      =	$B5
     71  9000 ????	       00 b6	   var18      =	$B6
     72  9000 ????	       00 b7	   var19      =	$B7
     73  9000 ????	       00 b8	   var20      =	$B8
     74  9000 ????	       00 b9	   var21      =	$B9
     75  9000 ????	       00 ba	   var22      =	$BA
     76  9000 ????	       00 bb	   var23      =	$BB
     77  9000 ????	       00 bc	   var24      =	$BC
     78  9000 ????	       00 bd	   var25      =	$BD
     79  9000 ????	       00 be	   var26      =	$BE
     80  9000 ????	       00 bf	   var27      =	$BF
     81  9000 ????	       00 c0	   var28      =	$C0
     82  9000 ????	       00 c1	   var29      =	$C1
     83  9000 ????	       00 c2	   var30      =	$C2
     84  9000 ????	       00 c3	   var31      =	$C3
     85  9000 ????	       00 c4	   var32      =	$C4
     86  9000 ????	       00 c5	   var33      =	$C5
     87  9000 ????	       00 c6	   var34      =	$C6
     88  9000 ????	       00 c7	   var35      =	$C7
     89  9000 ????	       00 c8	   var36      =	$C8
     90  9000 ????	       00 c9	   var37      =	$C9
     91  9000 ????	       00 ca	   var38      =	$CA
     92  9000 ????	       00 cb	   var39      =	$CB
     93  9000 ????	       00 cc	   var40      =	$CC
     94  9000 ????	       00 cd	   var41      =	$CD
     95  9000 ????	       00 ce	   var42      =	$CE
     96  9000 ????	       00 cf	   var43      =	$CF
     97  9000 ????	       00 d0	   var44      =	$D0
     98  9000 ????	       00 d1	   var45      =	$D1
     99  9000 ????	       00 d2	   var46      =	$D2
    100  9000 ????	       00 d3	   var47      =	$D3
    101  9000 ????
    102  9000 ????	       00 d4	   A	      =	$d4
    103  9000 ????	       00 d4	   a	      =	$d4
    104  9000 ????	       00 d5	   B	      =	$d5
    105  9000 ????	       00 d5	   b	      =	$d5
    106  9000 ????	       00 d6	   C	      =	$d6
    107  9000 ????	       00 d6	   c	      =	$d6
    108  9000 ????	       00 d7	   D	      =	$d7
    109  9000 ????	       00 d7	   d	      =	$d7
    110  9000 ????	       00 d8	   E	      =	$d8
    111  9000 ????	       00 d8	   e	      =	$d8
    112  9000 ????	       00 d9	   F	      =	$d9
    113  9000 ????	       00 d9	   f	      =	$d9
    114  9000 ????	       00 da	   G	      =	$da
    115  9000 ????	       00 da	   g	      =	$da
    116  9000 ????	       00 db	   H	      =	$db
    117  9000 ????	       00 db	   h	      =	$db
    118  9000 ????	       00 dc	   I	      =	$dc
    119  9000 ????	       00 dc	   i	      =	$dc
    120  9000 ????	       00 dd	   J	      =	$dd
    121  9000 ????	       00 dd	   j	      =	$dd
    122  9000 ????	       00 de	   K	      =	$de
    123  9000 ????	       00 de	   k	      =	$de
    124  9000 ????	       00 df	   L	      =	$df
    125  9000 ????	       00 df	   l	      =	$df
    126  9000 ????	       00 e0	   M	      =	$e0
    127  9000 ????	       00 e0	   m	      =	$e0
    128  9000 ????	       00 e1	   N	      =	$e1
    129  9000 ????	       00 e1	   n	      =	$e1
    130  9000 ????	       00 e2	   O	      =	$e2
    131  9000 ????	       00 e2	   o	      =	$e2
    132  9000 ????	       00 e3	   P	      =	$e3
    133  9000 ????	       00 e3	   p	      =	$e3
    134  9000 ????	       00 e4	   Q	      =	$e4
    135  9000 ????	       00 e4	   q	      =	$e4
    136  9000 ????	       00 e5	   R	      =	$e5
    137  9000 ????	       00 e5	   r	      =	$e5
    138  9000 ????	       00 e6	   S	      =	$e6
    139  9000 ????	       00 e6	   s	      =	$e6
    140  9000 ????	       00 e7	   T	      =	$e7
    141  9000 ????	       00 e7	   t	      =	$e7
    142  9000 ????	       00 e8	   U	      =	$e8
    143  9000 ????	       00 e8	   u	      =	$e8
    144  9000 ????	       00 e9	   V	      =	$e9
    145  9000 ????	       00 e9	   v	      =	$e9
    146  9000 ????	       00 ea	   W	      =	$ea
    147  9000 ????	       00 ea	   w	      =	$ea
    148  9000 ????	       00 eb	   X	      =	$eb
    149  9000 ????	       00 eb	   x	      =	$eb
    150  9000 ????	       00 ec	   Y	      =	$ec
    151  9000 ????	       00 ec	   y	      =	$ec
    152  9000 ????	       00 ed	   Z	      =	$ed
    153  9000 ????	       00 ed	   z	      =	$ed
    154  9000 ????
    155  9000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  9000 ????	       00 ef	   playfieldpos =	$ef
    157  9000 ????
    158  9000 ????						; available for other uses, or if unused, provide more stack space
    159  9000 ????
    160  9000 ????	       00 f0	   aux1       =	$f0
    161  9000 ????	       00 f1	   aux2       =	$f1
    162  9000 ????	       00 f2	   aux3       =	$f2
    163  9000 ????	       00 f3	   aux4       =	$f3
    164  9000 ????	       00 f4	   aux5       =	$f4
    165  9000 ????	       00 f5	   aux6       =	$f5
    166  9000 ????
    167  9000 ????						; playfield color/height pointers
    168  9000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  9000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  9000 ????						; the above pointers are the same because if color and height are both used together,
    171  9000 ????						; they must used absolute indexed and cannot use pointers
    172  9000 ????
    173  9000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  9000 ????						; upper 3 bits of $f2 contain the number of lives
    175  9000 ????	       00 f4	   lifecolor  =	$f4
    176  9000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  9000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  9000 ????
    179  9000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  9000 ????	       00 f3	   pfscore2   =	$f3
    181  9000 ????	       00 f4	   pfscorecolor =	$f4
    182  9000 ????
    183  9000 ????	       00 f6	   stack1     =	$f6
    184  9000 ????	       00 f7	   stack2     =	$f7
    185  9000 ????	       00 f8	   stack3     =	$f8
    186  9000 ????	       00 f9	   stack4     =	$f9
    187  9000 ????						; the stack bytes above may be used in the kernel
    188  9000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  9000 ????
    190  9000 ????				      MAC	return
    191  9000 ????				      ifnconst	bankswitch
    192  9000 ????				      rts
    193  9000 ????				      else
    194  9000 ????				      jmp	BS_return
    195  9000 ????				      endif
    196  9000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  9000 ????
    198  9000 ????			  -	      ifconst	superchip
    199  9000 ????			  -playfieldbase =	$10D0
    200  9000 ????			  -	      include	superchip.h
    201  9000 ????				      else
    202  9000 ????	       00 a4	   playfieldbase =	$A4
    203  9000 ????				      endif
    204  9000 ????
    205  9000 ????				      ifnconst	pfhalfwidth
    206  9000 ????	       00 04	   pfwidth    =	4
    207  9000 ????	       00 0e	   PF1L       =	PF1
    208  9000 ????	       00 0f	   PF2L       =	PF2
    209  9000 ????	       00 0e	   PF1R       =	PF1
    210  9000 ????	       00 0f	   PF2R       =	PF2
    211  9000 ????	       00 00	   pfadjust   =	0
    212  9000 ????			  -	      else
    213  9000 ????			  -pfwidth    =	2
    214  9000 ????			  -	      ifconst	pfcenter
    215  9000 ????			  -PF1L       =	$3F	; no effect
    216  9000 ????			  -PF2L       =	PF2
    217  9000 ????			  -PF1R       =	$3F
    218  9000 ????			  -PF2R       =	PF2	; no effect
    219  9000 ????			  -pfadjust   =	1
    220  9000 ????			  -	      else
    221  9000 ????			  -PF1L       =	PF1
    222  9000 ????			  -PF2L       =	PF2
    223  9000 ????			  -PF1R       =	$3F	; no effect
    224  9000 ????			  -PF2R       =	$3F	; no effect
    225  9000 ????			  -pfadjust   =	0
    226  9000 ????			  -	      endif
    227  9000 ????				      endif
    228  9000 ????
    229  9000 ????						; define playfield start based on height
    230  9000 ????				      ifnconst	pfres
    231  9000 ????	       00 a4	   playfield  =	playfieldbase
    232  9000 ????			  -	      else
    233  9000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  9000 ????				      endif
------- FILE c:\Users\alexi\OneDrive\Documentos\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 20	   bscode_length =	32
      4  9000 ????	       00 01	   pfscore    =	1
      5  9000 ????
      6  9000 ????	       00 9f	   _M_Edge_Right =	159
      7  9000 ????
      8  9000 ????	       00 02	   _M_Edge_Left =	2
      9  9000 ????
     10  9000 ????	       00 58	   _M_Edge_Bottom =	88
     11  9000 ????
     12  9000 ????	       00 02	   _M_Edge_Top =	2
     13  9000 ????
     14  9000 ????	       00 89	   _Lost_Soul_Y =	bally
     15  9000 ????
     16  9000 ????	       00 84	   _Lost_Soul_X =	ballx
     17  9000 ????
     18  9000 ????	       00 95	   _sc3       =	score + 2
     19  9000 ????
     20  9000 ????	       00 94	   _sc2       =	score + 1
     21  9000 ????
     22  9000 ????	       00 93	   _sc1       =	score
     23  9000 ????
     24  9000 ????	       00 ed	   rand16     =	z
     25  9000 ????
     26  9000 ????	       00 ec	   _Bit7_M1_Moving =	y
     27  9000 ????
     28  9000 ????	       00 ec	   _Bit6_Swap_Scores =	y
     29  9000 ????
     30  9000 ????	       00 ec	   _Bit3_Auto_Play =	y
     31  9000 ????
     32  9000 ????	       00 ec	   _Bit2_Game_Control =	y
     33  9000 ????
     34  9000 ????	       00 ec	   _Bit1_FireB_Restrainer =	y
     35  9000 ????
     36  9000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     37  9000 ????
     38  9000 ????	       00 ec	   _BitOp_01  =	y
     39  9000 ????
     40  9000 ????	       00 eb	   _High_Score3 =	x
     41  9000 ????
     42  9000 ????	       00 ea	   _High_Score2 =	w
     43  9000 ????
     44  9000 ????	       00 e9	   _High_Score1 =	v
     45  9000 ????
     46  9000 ????	       00 e8	   _Score3_Mem =	u
     47  9000 ????
     48  9000 ????	       00 e7	   _Score2_Mem =	t
     49  9000 ????
     50  9000 ????	       00 e6	   _Score1_Mem =	s
     51  9000 ????
     52  9000 ????	       00 e5	   _Bit2_Pause_Clr_Scheme =	r
     53  9000 ????
     54  9000 ????	       00 e5	   _Bit1_BW_Check =	r
     55  9000 ????
     56  9000 ????	       00 e5	   _Bit0_BW_Mem =	r
     57  9000 ????
     58  9000 ????	       00 e5	   _BitOp_02  =	r
     59  9000 ????
     60  9000 ????	       00 df	   _Pause_Color_Tmp =	l
     61  9000 ????
     62  9000 ????	       00 df	   _AP_Dir_Counter =	l
     63  9000 ????
     64  9000 ????	       00 de	   _Pause_Mem_Color_Tmp =	k
     65  9000 ????
     66  9000 ????	       00 de	   _AP_2_Sec_Score_Flip =	k
     67  9000 ????
     68  9000 ????	       00 dd	   _AP_Mem_P0y =	j
     69  9000 ????
     70  9000 ????	       00 dc	   _AP_Mem_P0x =	i
     71  9000 ????
     72  9000 ????	       00 db	   _Pause_Counter_Tmp =	h
     73  9000 ????
     74  9000 ????	       00 db	   _AP_Mem_Dir =	h
     75  9000 ????
     76  9000 ????	       00 a0	   _T5_AP_Dir =	temp5
     77  9000 ????
     78  9000 ????	       00 85	   _WillY     =	player0y
     79  9000 ????
     80  9000 ????	       00 80	   _WillX     =	player0x
     81  9000 ????
     82  9000 ????	       00 86	   _Main_CharY =	player1y
     83  9000 ????
     84  9000 ????	       00 81	   _Main_CharX =	player1x
     85  9000 ????
     86  9000 ????	       00 da	   _Bit7_M1_Dir_Right =	g
     87  9000 ????
     88  9000 ????	       00 da	   _Bit6_M1_Dir_Left =	g
     89  9000 ????
     90  9000 ????	       00 da	   _Bit5_M1_Dir_Down =	g
     91  9000 ????
     92  9000 ????	       00 da	   _Bit4_M1_Dir_Up =	g
     93  9000 ????
     94  9000 ????	       00 da	   _Bit3_P0_Dir_Right =	g
     95  9000 ????
     96  9000 ????	       00 da	   _Bit2_P0_Dir_Left =	g
     97  9000 ????
     98  9000 ????	       00 da	   _Bit1_P0_Dir_Down =	g
     99  9000 ????
    100  9000 ????	       00 da	   _Bit0_P0_Dir_Up =	g
    101  9000 ????
    102  9000 ????	       00 da	   _BitOp_P0_M1_Dir =	g
    103  9000 ????
    104  9000 ????	       00 e2	   _Kill_Count =	o
    105  9000 ????
    106  9000 ????	       00 00	   _Evade_Dir =	temp8
    107  9000 ????
    108  9000 ????	       00 ee	   _Will_AI_State =	temp7
    109  9000 ????
    110  9000 ????	       00 a1	   _Will_Stun_Timer =	temp6
    111  9000 ????
    112  9000 ????	       00 e1	   _Will_Aftn_AI =	n
    113  9000 ????
    114  9000 ????	       00 e0	   _Ch1_Duration =	m
    115  9000 ????
    116  9000 ????	       00 d7	   _Ch0_Counter =	d
    117  9000 ????
    118  9000 ????	       00 d6	   _Ch0_Duration =	c
    119  9000 ????
    120  9000 ????	       00 d5	   _Ch0_Sound =	b
    121  9000 ????
    122  9000 ????	       00 e4	   _Bitop_Coord_Counter =	q
    123  9000 ????
    124  9000 ????	       00 e3	   _Bitop_Screen_Counter =	p
    125  9000 ????
    126  9000 ????	       00 d9	   _Frame_Counter =	f
    127  9000 ????
    128  9000 ????	       00 d8	   _Master_Counter =	e
    129  9000 ????
    130  9000 ????	       00 d4	   genesispad =	a
    131  9000 ????
    132  9000 ????	       00 2b	   vblank_time =	43
    133  9000 ????	       00 25	   overscan_time =	37
    134  9000 ????	       00 07	   bs_mask    =	7
    135  9000 ????	       00 20	   bankswitch =	32
    136  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    137  9000 ????	       00 01	   PFcolors   =	1
    138  9000 ????	       00 01	   player1colors =	1
    139  9000 ????	       00 01	   playercolors =	1
    140  9000 ????	       00 01	   player1colors =	1
------- FILE c:\Users\alexi\OneDrive\Documentos\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
      8  9000 ????				      ifconst	bankswitch
      9  9000 ????			  -	      if	bankswitch == 8
     10  9000 ????			  -	      ORG	$1000
     11  9000 ????			  -	      RORG	$D000
     12  9000 ????				      endif
     13  9000 ????			  -	      if	bankswitch == 16
     14  9000 ????			  -	      ORG	$1000
     15  9000 ????			  -	      RORG	$9000
     16  9000 ????				      endif
     17  9000 ????				      if	bankswitch == 32
     18  1000					      ORG	$1000
     19  1000					      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							;;line 1;; 
     37  1000
     38  1000				   .
     39  1000							;;line 2;; 
     40  1000
     41  1000				   .
     42  1000							;;line 3;; 
     43  1000
     44  1000				   .
     45  1000							;;line 4;; 
     46  1000
     47  1000				   .
     48  1000							;;line 5;; 
     49  1000
     50  1000				   .
     51  1000							;;line 6;; 
     52  1000
     53  1000				   .
     54  1000							;;line 7;; 
     55  1000
     56  1000				   .
     57  1000							;;line 8;; 
     58  1000
     59  1000				   .
     60  1000							;;line 9;; 
     61  1000
     62  1000				   .
     63  1000							;;line 10;; 
     64  1000
     65  1000				   .
     66  1000							;;line 11;; 
     67  1000
     68  1000				   .
     69  1000							;;line 12;; 
     70  1000
     71  1000				   .
     72  1000							;;line 13;; 
     73  1000
     74  1000				   .
     75  1000							;;line 14;; 
     76  1000
     77  1000				   .L00 		;;line 15;;  set kernel_options player1colors playercolors pfcolors
     78  1000
     79  1000				   .L01 		;;line 16;;  set romsize 32k
     80  1000
     81  1000				   .L02 		;;line 17;;  set tv ntsc
     82  1000
     83  1000				   .L03 		;;line 18;;  set optimization inlinerand
     84  1000
     85  1000				   .L04 		;;line 19;;  set smartbranching on
     86  1000
     87  1000				   .
     88  1000							;;line 20;; 
     89  1000
     90  1000				   .
     91  1000							;;line 21;; 
     92  1000
     93  1000				   .
     94  1000							;;line 22;; 
     95  1000
     96  1000				   .
     97  1000							;;line 23;; 
     98  1000
     99  1000				   .
    100  1000							;;line 24;; 
    101  1000
    102  1000				   .
    103  1000							;;line 25;; 
    104  1000
    105  1000				   .
    106  1000							;;line 26;; 
    107  1000
    108  1000				   .
    109  1000							;;line 27;; 
    110  1000
    111  1000				   .
    112  1000							;;line 28;; 
    113  1000
    114  1000				   .
    115  1000							;;line 29;; 
    116  1000
    117  1000				   .
    118  1000							;;line 30;; 
    119  1000
    120  1000				   .
    121  1000							;;line 31;; 
    122  1000
    123  1000				   .
    124  1000							;;line 32;; 
    125  1000
    126  1000				   .
    127  1000							;;line 33;; 
    128  1000
    129  1000				   .
    130  1000							;;line 34;; 
    131  1000
    132  1000				   .
    133  1000							;;line 35;; 
    134  1000
    135  1000				   .
    136  1000							;;line 36;; 
    137  1000
    138  1000				   .
    139  1000							;;line 37;; 
    140  1000
    141  1000				   .
    142  1000							;;line 38;; 
    143  1000
    144  1000				   .
    145  1000							;;line 39;; 
    146  1000
    147  1000				   .
    148  1000							;;line 40;; 
    149  1000
    150  1000				   .
    151  1000							;;line 41;; 
    152  1000
    153  1000				   .
    154  1000							;;line 42;; 
    155  1000
    156  1000				   .
    157  1000							;;line 43;; 
    158  1000
    159  1000				   .
    160  1000							;;line 44;; 
    161  1000
    162  1000				   .
    163  1000							;;line 45;; 
    164  1000
    165  1000				   .
    166  1000							;;line 46;; 
    167  1000
    168  1000				   .
    169  1000							;;line 47;; 
    170  1000
    171  1000				   .
    172  1000							;;line 48;; 
    173  1000
    174  1000				   .
    175  1000							;;line 49;; 
    176  1000
    177  1000				   .
    178  1000							;;line 50;; 
    179  1000
    180  1000				   .L05 		;;line 51;;  dim genesispad = a
    181  1000
    182  1000				   .L06 		;;line 52;;  dim _Master_Counter = e
    183  1000
    184  1000				   .L07 		;;line 53;;  dim _Frame_Counter = f
    185  1000
    186  1000				   .
    187  1000							;;line 54;; 
    188  1000
    189  1000				   .
    190  1000							;;line 55;; 
    191  1000
    192  1000				   .
    193  1000							;;line 56;; 
    194  1000
    195  1000				   .
    196  1000							;;line 57;; 
    197  1000
    198  1000				   .
    199  1000							;;line 58;; 
    200  1000
    201  1000				   .L08 		;;line 59;;  dim _Bitop_Screen_Counter = p
    202  1000
    203  1000				   .L09 		;;line 60;;  dim _Bitop_Coord_Counter = q
    204  1000
    205  1000				   .
    206  1000							;;line 61;; 
    207  1000
    208  1000				   .
    209  1000							;;line 62;; 
    210  1000
    211  1000				   .
    212  1000							;;line 63;; 
    213  1000
    214  1000				   .
    215  1000							;;line 64;; 
    216  1000
    217  1000				   .
    218  1000							;;line 65;; 
    219  1000
    220  1000				   .L010		;;line 66;;  dim _Ch0_Sound = b
    221  1000
    222  1000				   .L011		;;line 67;;  dim _Ch0_Duration = c
    223  1000
    224  1000				   .L012		;;line 68;;  dim _Ch0_Counter = d
    225  1000
    226  1000				   .
    227  1000							;;line 69;; 
    228  1000
    229  1000				   .
    230  1000							;;line 70;; 
    231  1000
    232  1000				   .
    233  1000							;;line 71;; 
    234  1000
    235  1000				   .
    236  1000							;;line 72;; 
    237  1000
    238  1000				   .L013		;;line 73;;  dim _Ch1_Duration = m
    239  1000
    240  1000				   .
    241  1000							;;line 74;; 
    242  1000
    243  1000				   .
    244  1000							;;line 75;; 
    245  1000
    246  1000				   .
    247  1000							;;line 76;; 
    248  1000
    249  1000				   .
    250  1000							;;line 77;; 
    251  1000
    252  1000				   .L014		;;line 78;;  dim _Will_Aftn_AI = n
    253  1000
    254  1000				   .L015		;;line 79;;  dim _Will_Stun_Timer = temp6
    255  1000
    256  1000				   .L016		;;line 80;;  dim _Will_AI_State = temp7
    257  1000
    258  1000				   .L017		;;line 81;;  dim _Evade_Dir = temp8
    259  1000
    260  1000				   .
    261  1000							;;line 82;; 
    262  1000
    263  1000				   .
    264  1000							;;line 83;; 
    265  1000
    266  1000				   .
    267  1000							;;line 84;; 
    268  1000
    269  1000				   .
    270  1000							;;line 85;; 
    271  1000
    272  1000				   .
    273  1000							;;line 86;; 
    274  1000
    275  1000				   .L018		;;line 87;;  dim _Kill_Count = o
    276  1000
    277  1000				   .
    278  1000							;;line 88;; 
    279  1000
    280  1000				   .
    281  1000							;;line 89;; 
    282  1000
    283  1000				   .
    284  1000							;;line 90;; 
    285  1000
    286  1000				   .
    287  1000							;;line 91;; 
    288  1000
    289  1000				   .L019		;;line 92;;  dim _BitOp_P0_M1_Dir = g
    290  1000
    291  1000				   .L020		;;line 93;;  dim _Bit0_P0_Dir_Up = g
    292  1000
    293  1000				   .L021		;;line 94;;  dim _Bit1_P0_Dir_Down = g
    294  1000
    295  1000				   .L022		;;line 95;;  dim _Bit2_P0_Dir_Left = g
    296  1000
    297  1000				   .L023		;;line 96;;  dim _Bit3_P0_Dir_Right = g
    298  1000
    299  1000				   .L024		;;line 97;;  dim _Bit4_M1_Dir_Up = g
    300  1000
    301  1000				   .L025		;;line 98;;  dim _Bit5_M1_Dir_Down = g
    302  1000
    303  1000				   .L026		;;line 99;;  dim _Bit6_M1_Dir_Left = g
    304  1000
    305  1000				   .L027		;;line 100;;  dim _Bit7_M1_Dir_Right = g
    306  1000
    307  1000				   .
    308  1000							;;line 101;; 
    309  1000
    310  1000				   .
    311  1000							;;line 102;; 
    312  1000
    313  1000				   .
    314  1000							;;line 103;; 
    315  1000
    316  1000				   .
    317  1000							;;line 104;; 
    318  1000
    319  1000				   .
    320  1000							;;line 105;; 
    321  1000
    322  1000				   .L028		;;line 106;;  dim _Main_CharX = player1x
    323  1000
    324  1000				   .L029		;;line 107;;  dim _Main_CharY = player1y
    325  1000
    326  1000				   .
    327  1000							;;line 108;; 
    328  1000
    329  1000				   .L030		;;line 109;;  dim _WillX = player0x
    330  1000
    331  1000				   .L031		;;line 110;;  dim _WillY = player0y
    332  1000
    333  1000				   .
    334  1000							;;line 111;; 
    335  1000
    336  1000				   .
    337  1000							;;line 112;; 
    338  1000
    339  1000				   .
    340  1000							;;line 113;; 
    341  1000
    342  1000				   .
    343  1000							;;line 114;; 
    344  1000
    345  1000				   .
    346  1000							;;line 115;; 
    347  1000
    348  1000				   .
    349  1000							;;line 116;; 
    350  1000
    351  1000				   .L032		;;line 117;;  dim _T5_AP_Dir = temp5
    352  1000
    353  1000				   .
    354  1000							;;line 118;; 
    355  1000
    356  1000				   .
    357  1000							;;line 119;; 
    358  1000
    359  1000				   .
    360  1000							;;line 120;; 
    361  1000
    362  1000				   .
    363  1000							;;line 121;; 
    364  1000
    365  1000				   .
    366  1000							;;line 122;; 
    367  1000
    368  1000				   .
    369  1000							;;line 123;; 
    370  1000
    371  1000				   .
    372  1000							;;line 124;; 
    373  1000
    374  1000				   .
    375  1000							;;line 125;; 
    376  1000
    377  1000				   .L033		;;line 126;;  dim _AP_Mem_Dir = h
    378  1000
    379  1000				   .
    380  1000							;;line 127;; 
    381  1000
    382  1000				   .
    383  1000							;;line 128;; 
    384  1000
    385  1000				   .
    386  1000							;;line 129;; 
    387  1000
    388  1000				   .
    389  1000							;;line 130;; 
    390  1000
    391  1000				   .
    392  1000							;;line 131;; 
    393  1000
    394  1000				   .
    395  1000							;;line 132;; 
    396  1000
    397  1000				   .L034		;;line 133;;  dim _Pause_Counter_Tmp = h
    398  1000
    399  1000				   .
    400  1000							;;line 134;; 
    401  1000
    402  1000				   .
    403  1000							;;line 135;; 
    404  1000
    405  1000				   .
    406  1000							;;line 136;; 
    407  1000
    408  1000				   .
    409  1000							;;line 137;; 
    410  1000
    411  1000				   .
    412  1000							;;line 138;; 
    413  1000
    414  1000				   .
    415  1000							;;line 139;; 
    416  1000
    417  1000				   .
    418  1000							;;line 140;; 
    419  1000
    420  1000				   .L035		;;line 141;;  dim _AP_Mem_P0x = i
    421  1000
    422  1000				   .L036		;;line 142;;  dim _AP_Mem_P0y = j
    423  1000
    424  1000				   .
    425  1000							;;line 143;; 
    426  1000
    427  1000				   .
    428  1000							;;line 144;; 
    429  1000
    430  1000				   .
    431  1000							;;line 145;; 
    432  1000
    433  1000				   .
    434  1000							;;line 146;; 
    435  1000
    436  1000				   .
    437  1000							;;line 147;; 
    438  1000
    439  1000				   .
    440  1000							;;line 148;; 
    441  1000
    442  1000				   .L037		;;line 149;;  dim _AP_2_Sec_Score_Flip = k
    443  1000
    444  1000				   .
    445  1000							;;line 150;; 
    446  1000
    447  1000				   .
    448  1000							;;line 151;; 
    449  1000
    450  1000				   .
    451  1000							;;line 152;; 
    452  1000
    453  1000				   .
    454  1000							;;line 153;; 
    455  1000
    456  1000				   .
    457  1000							;;line 154;; 
    458  1000
    459  1000				   .
    460  1000							;;line 155;; 
    461  1000
    462  1000				   .L038		;;line 156;;  dim _Pause_Mem_Color_Tmp = k
    463  1000
    464  1000				   .
    465  1000							;;line 157;; 
    466  1000
    467  1000				   .
    468  1000							;;line 158;; 
    469  1000
    470  1000				   .
    471  1000							;;line 159;; 
    472  1000
    473  1000				   .
    474  1000							;;line 160;; 
    475  1000
    476  1000				   .
    477  1000							;;line 161;; 
    478  1000
    479  1000				   .
    480  1000							;;line 162;; 
    481  1000
    482  1000				   .L039		;;line 163;;  dim _AP_Dir_Counter = l
    483  1000
    484  1000				   .
    485  1000							;;line 164;; 
    486  1000
    487  1000				   .
    488  1000							;;line 165;; 
    489  1000
    490  1000				   .
    491  1000							;;line 166;; 
    492  1000
    493  1000				   .
    494  1000							;;line 167;; 
    495  1000
    496  1000				   .
    497  1000							;;line 168;; 
    498  1000
    499  1000				   .
    500  1000							;;line 169;; 
    501  1000
    502  1000				   .L040		;;line 170;;  dim _Pause_Color_Tmp = l
    503  1000
    504  1000				   .
    505  1000							;;line 171;; 
    506  1000
    507  1000				   .
    508  1000							;;line 172;; 
    509  1000
    510  1000				   .
    511  1000							;;line 173;; 
    512  1000
    513  1000				   .
    514  1000							;;line 174;; 
    515  1000
    516  1000				   .
    517  1000							;;line 175;; 
    518  1000
    519  1000				   .L041		;;line 176;;  dim _BitOp_02 = r
    520  1000
    521  1000				   .
    522  1000							;;line 177;; 
    523  1000
    524  1000				   .
    525  1000							;;line 178;; 
    526  1000
    527  1000				   .
    528  1000							;;line 179;; 
    529  1000
    530  1000				   .
    531  1000							;;line 180;; 
    532  1000
    533  1000				   .L042		;;line 181;;  dim _Bit0_BW_Mem = r
    534  1000
    535  1000				   .
    536  1000							;;line 182;; 
    537  1000
    538  1000				   .
    539  1000							;;line 183;; 
    540  1000
    541  1000				   .
    542  1000							;;line 184;; 
    543  1000
    544  1000				   .
    545  1000							;;line 185;; 
    546  1000
    547  1000				   .L043		;;line 186;;  dim _Bit1_BW_Check = r
    548  1000
    549  1000				   .
    550  1000							;;line 187;; 
    551  1000
    552  1000				   .
    553  1000							;;line 188;; 
    554  1000
    555  1000				   .
    556  1000							;;line 189;; 
    557  1000
    558  1000				   .
    559  1000							;;line 190;; 
    560  1000
    561  1000				   .L044		;;line 191;;  dim _Bit2_Pause_Clr_Scheme = r
    562  1000
    563  1000				   .
    564  1000							;;line 192;; 
    565  1000
    566  1000				   .
    567  1000							;;line 193;; 
    568  1000
    569  1000				   .
    570  1000							;;line 194;; 
    571  1000
    572  1000				   .
    573  1000							;;line 195;; 
    574  1000
    575  1000				   .
    576  1000							;;line 196;; 
    577  1000
    578  1000				   .
    579  1000							;;line 197;; 
    580  1000
    581  1000				   .
    582  1000							;;line 198;; 
    583  1000
    584  1000				   .
    585  1000							;;line 199;; 
    586  1000
    587  1000				   .L045		;;line 200;;  dim _Score1_Mem = s
    588  1000
    589  1000				   .L046		;;line 201;;  dim _Score2_Mem = t
    590  1000
    591  1000				   .L047		;;line 202;;  dim _Score3_Mem = u
    592  1000
    593  1000				   .
    594  1000							;;line 203;; 
    595  1000
    596  1000				   .
    597  1000							;;line 204;; 
    598  1000
    599  1000				   .
    600  1000							;;line 205;; 
    601  1000
    602  1000				   .
    603  1000							;;line 206;; 
    604  1000
    605  1000				   .L048		;;line 207;;  dim _High_Score1 = v
    606  1000
    607  1000				   .L049		;;line 208;;  dim _High_Score2 = w
    608  1000
    609  1000				   .L050		;;line 209;;  dim _High_Score3 = x
    610  1000
    611  1000				   .
    612  1000							;;line 210;; 
    613  1000
    614  1000				   .
    615  1000							;;line 211;; 
    616  1000
    617  1000				   .
    618  1000							;;line 212;; 
    619  1000
    620  1000				   .
    621  1000							;;line 213;; 
    622  1000
    623  1000				   .
    624  1000							;;line 214;; 
    625  1000
    626  1000				   .L051		;;line 215;;  dim _BitOp_01 = y
    627  1000
    628  1000				   .L052		;;line 216;;  dim _Bit0_Reset_Restrainer = y
    629  1000
    630  1000				   .L053		;;line 217;;  dim _Bit1_FireB_Restrainer = y
    631  1000
    632  1000				   .L054		;;line 218;;  dim _Bit2_Game_Control = y
    633  1000
    634  1000				   .L055		;;line 219;;  dim _Bit3_Auto_Play = y
    635  1000
    636  1000				   .L056		;;line 220;;  dim _Bit6_Swap_Scores = y
    637  1000
    638  1000				   .L057		;;line 221;;  dim _Bit7_M1_Moving = y
    639  1000
    640  1000				   .
    641  1000							;;line 222;; 
    642  1000
    643  1000				   .
    644  1000							;;line 223;; 
    645  1000
    646  1000				   .
    647  1000							;;line 224;; 
    648  1000
    649  1000				   .
    650  1000							;;line 225;; 
    651  1000
    652  1000				   .L058		;;line 226;;  dim rand16 = z
    653  1000
    654  1000				   .
    655  1000							;;line 227;; 
    656  1000
    657  1000				   .
    658  1000							;;line 228;; 
    659  1000
    660  1000				   .
    661  1000							;;line 229;; 
    662  1000
    663  1000				   .
    664  1000							;;line 230;; 
    665  1000
    666  1000				   .
    667  1000							;;line 231;; 
    668  1000
    669  1000				   .
    670  1000							;;line 232;; 
    671  1000
    672  1000				   .
    673  1000							;;line 233;; 
    674  1000
    675  1000				   .
    676  1000							;;line 234;; 
    677  1000
    678  1000				   .L059		;;line 235;;  dim _sc1 = score
    679  1000
    680  1000				   .L060		;;line 236;;  dim _sc2 = score + 1
    681  1000
    682  1000				   .L061		;;line 237;;  dim _sc3 = score + 2
    683  1000
    684  1000				   .
    685  1000							;;line 238;; 
    686  1000
    687  1000				   .
    688  1000							;;line 239;; 
    689  1000
    690  1000				   .
    691  1000							;;line 240;; 
    692  1000
    693  1000				   .
    694  1000							;;line 241;; 
    695  1000
    696  1000				   .
    697  1000							;;line 242;; 
    698  1000
    699  1000				   .
    700  1000							;;line 243;; 
    701  1000
    702  1000				   .
    703  1000							;;line 244;; 
    704  1000
    705  1000				   .
    706  1000							;;line 245;; 
    707  1000
    708  1000				   .L062		;;line 246;;  dim _Lost_Soul_X = ballx
    709  1000
    710  1000				   .L063		;;line 247;;  dim _Lost_Soul_Y = bally
    711  1000
    712  1000				   .
    713  1000							;;line 248;; 
    714  1000
    715  1000				   .
    716  1000							;;line 249;; 
    717  1000
    718  1000				   .
    719  1000							;;line 250;; 
    720  1000
    721  1000				   .
    722  1000							;;line 251;; 
    723  1000
    724  1000				   .
    725  1000							;;line 252;; 
    726  1000
    727  1000				   .
    728  1000							;;line 253;; 
    729  1000
    730  1000				   .
    731  1000							;;line 254;; 
    732  1000
    733  1000				   .L064		;;line 255;;  const _M_Edge_Top = 2
    734  1000
    735  1000				   .L065		;;line 256;;  const _M_Edge_Bottom = 88
    736  1000
    737  1000				   .L066		;;line 257;;  const _M_Edge_Left = 2
    738  1000
    739  1000				   .L067		;;line 258;;  const _M_Edge_Right = 159
    740  1000
    741  1000				   .
    742  1000							;;line 259;; 
    743  1000
    744  1000				   .
    745  1000							;;line 260;; 
    746  1000
    747  1000				   .L068		;;line 261;;  const pfscore = 1
    748  1000
    749  1000				   .
    750  1000							;;line 262;; 
    751  1000
    752  1000				   .
    753  1000							;;line 263;; 
    754  1000
    755  1000				   .
    756  1000							;;line 264;; 
    757  1000
    758  1000				   .
    759  1000							;;line 265;; 
    760  1000
    761  1000				   .
    762  1000							;;line 266;; 
    763  1000
    764  1000				   .
    765  1000							;;line 267;; 
    766  1000
    767  1000				   .
    768  1000							;;line 268;; 
    769  1000
    770  1000				   .
    771  1000							;;line 269;; 
    772  1000
    773  1000				   .
    774  1000							;;line 270;; 
    775  1000
    776  1000				   .
    777  1000							;;line 271;; 
    778  1000
    779  1000				   .
    780  1000							;;line 272;; 
    781  1000
    782  1000				   .__Start_Restart
    783  1000							;;line 273;; __Start_Restart
    784  1000
    785  1000				   .
    786  1000							;;line 274;; 
    787  1000
    788  1000				   .
    789  1000							;;line 275;; 
    790  1000
    791  1000				   .
    792  1000							;;line 276;; 
    793  1000
    794  1000				   .
    795  1000							;;line 277;; 
    796  1000
    797  1000				   .
    798  1000							;;line 278;; 
    799  1000
    800  1000				   .
    801  1000							;;line 279;; 
    802  1000
    803  1000				   .L069		;;line 280;;  AUDV0 = 0  :  AUDV1 = 0
    804  1000
    805  1000		       a9 00		      LDA	#0
    806  1002		       85 19		      STA	AUDV0
    807  1004		       85 1a		      STA	AUDV1
    808  1006				   .
    809  1006							;;line 281;; 
    810  1006
    811  1006				   .
    812  1006							;;line 282;; 
    813  1006
    814  1006				   .
    815  1006							;;line 283;; 
    816  1006
    817  1006				   .
    818  1006							;;line 284;; 
    819  1006
    820  1006				   .
    821  1006							;;line 285;; 
    822  1006
    823  1006				   .
    824  1006							;;line 286;; 
    825  1006
    826  1006				   .
    827  1006							;;line 287;; 
    828  1006
    829  1006				   .
    830  1006							;;line 288;; 
    831  1006
    832  1006				   .
    833  1006							;;line 289;; 
    834  1006
    835  1006				   .
    836  1006							;;line 290;; 
    837  1006
    838  1006				   .
    839  1006							;;line 291;; 
    840  1006
    841  1006				   .L070		;;line 292;;  a = 0  :  b = 0	:  c = 0  :  d = 0  :  e = 0  :  f = 0	:  g = 0  :  h = 0  :  i = 0
    842  1006
    843  1006		       a9 00		      LDA	#0
    844  1008		       85 d4		      STA	a
    845  100a		       85 d5		      STA	b
    846  100c		       85 d6		      STA	c
    847  100e		       85 d7		      STA	d
    848  1010		       85 d8		      STA	e
    849  1012		       85 d9		      STA	f
    850  1014		       85 da		      STA	g
    851  1016		       85 db		      STA	h
    852  1018		       85 dc		      STA	i
    853  101a				   .L071		;;line 293;;  j = 0  :  k = 0	:  l = 0  :  m = 0  :  n = 0  :  o = 0	:  p = 0  :  q = 0  :  r = 0
    854  101a
    855  101a		       a9 00		      LDA	#0
    856  101c		       85 dd		      STA	j
    857  101e		       85 de		      STA	k
    858  1020		       85 df		      STA	l
    859  1022		       85 e0		      STA	m
    860  1024		       85 e1		      STA	n
    861  1026		       85 e2		      STA	o
    862  1028		       85 e3		      STA	p
    863  102a		       85 e4		      STA	q
    864  102c		       85 e5		      STA	r
    865  102e				   .L072		;;line 294;;  s = 0  :  t = 0	:  u = 0
    866  102e
    867  102e		       a9 00		      LDA	#0
    868  1030		       85 e6		      STA	s
    869  1032		       85 e7		      STA	t
    870  1034		       85 e8		      STA	u
    871  1036				   .
    872  1036							;;line 295;; 
    873  1036
    874  1036				   .
    875  1036							;;line 296;; 
    876  1036
    877  1036				   .
    878  1036							;;line 297;; 
    879  1036
    880  1036				   .
    881  1036							;;line 298;; 
    882  1036
    883  1036				   .
    884  1036							;;line 299;; 
    885  1036
    886  1036				   .
    887  1036							;;line 300;; 
    888  1036
    889  1036				   .
    890  1036							;;line 301;; 
    891  1036
    892  1036				   .
    893  1036							;;line 302;; 
    894  1036
    895  1036				   .
    896  1036							;;line 303;; 
    897  1036
    898  1036				   .L073		;;line 304;;  _BitOp_01 = _BitOp_01  &  %00000100
    899  1036
    900  1036		       a5 ec		      LDA	_BitOp_01
    901  1038		       29 04		      AND	#%00000100
    902  103a		       85 ec		      STA	_BitOp_01
    903  103c				   .
    904  103c							;;line 305;; 
    905  103c
    906  103c				   .
    907  103c							;;line 306;; 
    908  103c
    909  103c				   .
    910  103c							;;line 307;; 
    911  103c
    912  103c				   .
    913  103c							;;line 308;; 
    914  103c
    915  103c				   .
    916  103c							;;line 309;; 
    917  103c
    918  103c				   .
    919  103c							;;line 310;; 
    920  103c
    921  103c				   .L074		;;line 311;;  _Main_CharY = 200  :  _WillY = 200  :  _Lost_Soul_Y = 200
    922  103c
    923  103c		       a9 c8		      LDA	#200
    924  103e		       85 86		      STA	_Main_CharY
    925  1040		       85 85		      STA	_WillY
    926  1042		       85 89		      STA	_Lost_Soul_Y
    927  1044				   .
    928  1044							;;line 312;; 
    929  1044
    930  1044				   .
    931  1044							;;line 313;; 
    932  1044
    933  1044				   .
    934  1044							;;line 314;; 
    935  1044
    936  1044				   .
    937  1044							;;line 315;; 
    938  1044
    939  1044				   .
    940  1044							;;line 316;; 
    941  1044
    942  1044				   .genesisdetect
    943  1044							;;line 317;; genesisdetect
    944  1044
    945  1044				   .L075		;;line 318;;  genesispad = genesispad	&  $fe
    946  1044
    947  1044		       a5 d4		      LDA	genesispad
    948  1046		       29 fe		      AND	#$fe
    949  1048		       85 d4		      STA	genesispad
    950  104a				   .L076		;;line 319;;  if INPT1{7} then genesispad = genesispad  |  1
    951  104a
    952  104a		       24 09		      BIT	INPT1
    953  104c		       10 06		      BPL	.skipL076
    954  104e				   .condpart0
    955  104e		       a5 d4		      LDA	genesispad
    956  1050		       09 01		      ORA	#1
    957  1052		       85 d4		      STA	genesispad
    958  1054				   .skipL076
    959  1054				   .L077		;;line 320;;  if genesispad{0} then COLUBK = $8a
    960  1054
    961  1054		       a5 d4		      LDA	genesispad
    962  1056		       4a		      LSR
    963  1057		       90 04		      BCC	.skipL077
    964  1059				   .condpart1
    965  1059		       a9 8a		      LDA	#$8a
    966  105b		       85 09		      STA	COLUBK
    967  105d				   .skipL077
    968  105d				   .L078		;;line 321;;  if !genesispad{0} then COLUBK = $48
    969  105d
    970  105d		       a5 d4		      LDA	genesispad
    971  105f		       4a		      LSR
    972  1060		       b0 04		      BCS	.skipL078
    973  1062				   .condpart2
    974  1062		       a9 48		      LDA	#$48
    975  1064		       85 09		      STA	COLUBK
    976  1066				   .skipL078
    977  1066				   .
    978  1066							;;line 322;; 
    979  1066
    980  1066				   .
    981  1066							;;line 323;; 
    982  1066
    983  1066				   .
    984  1066							;;line 324;; 
    985  1066
    986  1066				   .
    987  1066							;;line 325;; 
    988  1066
    989  1066				   .
    990  1066							;;line 326;; 
    991  1066
    992  1066				   .
    993  1066							;;line 327;; 
    994  1066
    995  1066				   .
    996  1066							;;line 328;; 
    997  1066
    998  1066				   .
    999  1066							;;line 329;; 
   1000  1066
   1001  1066				   .
   1002  1066							;;line 330;; 
   1003  1066
   1004  1066				   .L079		;;line 331;;  if _Bit2_Game_Control{2} then goto __Main_Loop_Setup bank2
   1005  1066
   1006  1066		       a5 ec		      LDA	_Bit2_Game_Control
   1007  1068		       29 04		      AND	#4
   1008  106a		       f0 12		      BEQ	.skipL079
   1009  106c				   .condpart3
   1010  106c		       85 ee		      sta	temp7
   1011  106e		       a9 2f		      lda	#>(.__Main_Loop_Setup-1)
   1012  1070		       48		      pha
   1013  1071		       a9 ff		      lda	#<(.__Main_Loop_Setup-1)
   1014  1073		       48		      pha
   1015  1074		       a5 ee		      lda	temp7
   1016  1076		       48		      pha
   1017  1077		       8a		      txa
   1018  1078		       48		      pha
   1019  1079		       a2 02		      ldx	#2
   1020  107b		       4c eb ff 	      jmp	BS_jsr
   1021  107e				   .skipL079
   1022  107e				   .
   1023  107e							;;line 332;; 
   1024  107e
   1025  107e				   .
   1026  107e							;;line 333;; 
   1027  107e
   1028  107e				   .
   1029  107e							;;line 334;; 
   1030  107e
   1031  107e				   .
   1032  107e							;;line 335;; 
   1033  107e
   1034  107e				   .
   1035  107e							;;line 336;; 
   1036  107e
   1037  107e				   .
   1038  107e							;;line 337;; 
   1039  107e
   1040  107e				   .
   1041  107e							;;line 338;; 
   1042  107e
   1043  107e				   .
   1044  107e							;;line 339;; 
   1045  107e
   1046  107e				   .
   1047  107e							;;line 340;; 
   1048  107e
   1049  107e				   .
   1050  107e							;;line 341;; 
   1051  107e
   1052  107e				   .
   1053  107e							;;line 342;; 
   1054  107e
   1055  107e				   .__Title_Screen_Setup
   1056  107e							;;line 343;; __Title_Screen_Setup
   1057  107e
   1058  107e				   .
   1059  107e							;;line 344;; 
   1060  107e
   1061  107e				   .
   1062  107e							;;line 345;; 
   1063  107e
   1064  107e				   .
   1065  107e							;;line 346;; 
   1066  107e
   1067  107e				   .
   1068  107e							;;line 347;; 
   1069  107e
   1070  107e				   .L080		;;line 348;;  pfscore1 = 0  :	pfscore2 = 0  :  scorecolor = 0
   1071  107e
   1072  107e		       a9 00		      LDA	#0
   1073  1080		       85 f2		      STA	pfscore1
   1074  1082		       85 f3		      STA	pfscore2
   1075  1084		       85 a3		      STA	scorecolor
   1076  1086				   .
   1077  1086							;;line 349;; 
   1078  1086
   1079  1086				   .
   1080  1086							;;line 350;; 
   1081  1086
   1082  1086				   .
   1083  1086							;;line 351;; 
   1084  1086
   1085  1086				   .
   1086  1086							;;line 352;; 
   1087  1086
   1088  1086				   .
   1089  1086							;;line 353;; 
   1090  1086
   1091  1086				   .
   1092  1086							;;line 354;; 
   1093  1086
   1094  1086				   .L081		;;line 355;;  COLUBK = 0
   1095  1086
   1096  1086		       a9 00		      LDA	#0
   1097  1088		       85 09		      STA	COLUBK
   1098  108a				   .
   1099  108a							;;line 356;; 
   1100  108a
   1101  108a				   .
   1102  108a							;;line 357;; 
   1103  108a
   1104  108a				   .
   1105  108a							;;line 358;; 
   1106  108a
   1107  108a				   .
   1108  108a							;;line 359;; 
   1109  108a
   1110  108a				   .
   1111  108a							;;line 360;; 
   1112  108a
   1113  108a				   .
   1114  108a							;;line 361;; 
   1115  108a
   1116  108a				   .
   1117  108a							;;line 362;; 
   1118  108a
   1119  108a				   .
   1120  108a							;;line 363;; 
   1121  108a
   1122  108a				   .
   1123  108a							;;line 364;; 
   1124  108a
   1125  108a				   .
   1126  108a							;;line 365;; 
   1127  108a
   1128  108a				   .
   1129  108a							;;line 366;; 
   1130  108a
   1131  108a				   .L082		;;line 367;;  _Bit0_Reset_Restrainer{0} = 1
   1132  108a
   1133  108a		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1134  108c		       09 01		      ORA	#1
   1135  108e		       85 ec		      STA	_Bit0_Reset_Restrainer
   1136  1090				   .
   1137  1090							;;line 368;; 
   1138  1090
   1139  1090				   .
   1140  1090							;;line 369;; 
   1141  1090
   1142  1090				   .L083		;;line 370;;  playfieldpos = 8
   1143  1090
   1144  1090		       a9 08		      LDA	#8
   1145  1092		       85 ef		      STA	playfieldpos
   1146  1094				   .
   1147  1094							;;line 371;; 
   1148  1094
   1149  1094				   .
   1150  1094							;;line 372;; 
   1151  1094
   1152  1094				   .
   1153  1094							;;line 373;; 
   1154  1094
   1155  1094				   .
   1156  1094							;;line 374;; 
   1157  1094
   1158  1094				   .
   1159  1094							;;line 375;; 
   1160  1094
   1161  1094				   .
   1162  1094							;;line 376;; 
   1163  1094
   1164  1094				   .
   1165  1094							;;line 377;; 
   1166  1094
   1167  1094				   .
   1168  1094							;;line 378;; 
   1169  1094
   1170  1094				   .
   1171  1094							;;line 379;; 
   1172  1094
   1173  1094				   .
   1174  1094							;;line 380;; 
   1175  1094
   1176  1094				   .
   1177  1094							;;line 381;; 
   1178  1094
   1179  1094				   .__Title_Screen_Loop
   1180  1094							;;line 382;; __Title_Screen_Loop
   1181  1094
   1182  1094				   .
   1183  1094							;;line 383;; 
   1184  1094
   1185  1094				   .
   1186  1094							;;line 384;; 
   1187  1094
   1188  1094				   .
   1189  1094							;;line 385;; 
   1190  1094
   1191  1094				   .
   1192  1094							;;line 386;; 
   1193  1094
   1194  1094				   .
   1195  1094							;;line 387;; 
   1196  1094
   1197  1094				   .
   1198  1094							;;line 388;; 
   1199  1094
   1200  1094				   .
   1201  1094							;;line 389;; 
   1202  1094
   1203  1094				   .L084		;;line 390;;  gosub titledrawscreen bank4
   1204  1094
   1205  1094		       85 ee		      sta	temp7
   1206  1096		       a9 10		      lda	#>(ret_point1-1)
   1207  1098		       48		      pha
   1208  1099		       a9 ab		      lda	#<(ret_point1-1)
   1209  109b		       48		      pha
   1210  109c		       a9 6f		      lda	#>(.titledrawscreen-1)
   1211  109e		       48		      pha
   1212  109f		       a9 ff		      lda	#<(.titledrawscreen-1)
   1213  10a1		       48		      pha
   1214  10a2		       a5 ee		      lda	temp7
   1215  10a4		       48		      pha
   1216  10a5		       8a		      txa
   1217  10a6		       48		      pha
   1218  10a7		       a2 04		      ldx	#4
   1219  10a9		       4c eb ff 	      jmp	BS_jsr
   1220  10ac				   ret_point1
   1221  10ac				   .
   1222  10ac							;;line 391;; 
   1223  10ac
   1224  10ac				   .
   1225  10ac							;;line 392;; 
   1226  10ac
   1227  10ac				   .
   1228  10ac							;;line 393;; 
   1229  10ac
   1230  10ac				   .
   1231  10ac							;;line 394;; 
   1232  10ac
   1233  10ac				   .
   1234  10ac							;;line 395;; 
   1235  10ac
   1236  10ac				   .
   1237  10ac							;;line 396;; 
   1238  10ac
   1239  10ac				   .
   1240  10ac							;;line 397;; 
   1241  10ac
   1242  10ac				   .
   1243  10ac							;;line 398;; 
   1244  10ac
   1245  10ac				   .
   1246  10ac							;;line 399;; 
   1247  10ac
   1248  10ac				   .
   1249  10ac							;;line 400;; 
   1250  10ac
   1251  10ac				   .
   1252  10ac							;;line 401;; 
   1253  10ac
   1254  10ac				   .
   1255  10ac							;;line 402;; 
   1256  10ac
   1257  10ac				   .
   1258  10ac							;;line 403;; 
   1259  10ac
   1260  10ac				   .L085		;;line 404;;  _Master_Counter = _Master_Counter  +  1
   1261  10ac
   1262  10ac		       e6 d8		      INC	_Master_Counter
   1263  10ae				   .
   1264  10ae							;;line 405;; 
   1265  10ae
   1266  10ae				   .
   1267  10ae							;;line 406;; 
   1268  10ae
   1269  10ae				   .
   1270  10ae							;;line 407;; 
   1271  10ae
   1272  10ae				   .
   1273  10ae							;;line 408;; 
   1274  10ae
   1275  10ae				   .L086		;;line 409;;  if _Master_Counter  <  30 then goto __TS_AP_Skip
   1276  10ae
   1277  10ae		       a5 d8		      LDA	_Master_Counter
   1278  10b0		       c9 1e		      CMP	#30
   1279  10b2		       b0 03		      BCS	.skipL086
   1280  10b4				   .condpart4
   1281  10b4		       4c db 10 	      jmp	.__TS_AP_Skip
   1282  10b7
   1283  10b7				   .skipL086
   1284  10b7				   .
   1285  10b7							;;line 410;; 
   1286  10b7
   1287  10b7				   .
   1288  10b7							;;line 411;; 
   1289  10b7
   1290  10b7				   .
   1291  10b7							;;line 412;; 
   1292  10b7
   1293  10b7				   .
   1294  10b7							;;line 413;; 
   1295  10b7
   1296  10b7				   .L087		;;line 414;;  _Frame_Counter = _Frame_Counter	+  1  :  _Master_Counter = 0
   1297  10b7
   1298  10b7		       e6 d9		      INC	_Frame_Counter
   1299  10b9		       a9 00		      LDA	#0
   1300  10bb		       85 d8		      STA	_Master_Counter
   1301  10bd				   .
   1302  10bd							;;line 415;; 
   1303  10bd
   1304  10bd				   .
   1305  10bd							;;line 416;; 
   1306  10bd
   1307  10bd				   .
   1308  10bd							;;line 417;; 
   1309  10bd
   1310  10bd				   .
   1311  10bd							;;line 418;; 
   1312  10bd
   1313  10bd				   .
   1314  10bd							;;line 419;; 
   1315  10bd
   1316  10bd				   .
   1317  10bd							;;line 420;; 
   1318  10bd
   1319  10bd				   .
   1320  10bd							;;line 421;; 
   1321  10bd
   1322  10bd				   .L088		;;line 422;;  if _Frame_Counter  >  9 then _Bit3_Auto_Play{3} = 1  :  goto __Main_Loop_Setup bank2
   1323  10bd
   1324  10bd		       a9 09		      LDA	#9
   1325  10bf		       c5 d9		      CMP	_Frame_Counter
   1326  10c1		       b0 18		      BCS	.skipL088
   1327  10c3				   .condpart5
   1328  10c3		       a5 ec		      LDA	_Bit3_Auto_Play
   1329  10c5		       09 08		      ORA	#8
   1330  10c7		       85 ec		      STA	_Bit3_Auto_Play
   1331  10c9		       85 ee		      sta	temp7
   1332  10cb		       a9 2f		      lda	#>(.__Main_Loop_Setup-1)
   1333  10cd		       48		      pha
   1334  10ce		       a9 ff		      lda	#<(.__Main_Loop_Setup-1)
   1335  10d0		       48		      pha
   1336  10d1		       a5 ee		      lda	temp7
   1337  10d3		       48		      pha
   1338  10d4		       8a		      txa
   1339  10d5		       48		      pha
   1340  10d6		       a2 02		      ldx	#2
   1341  10d8		       4c eb ff 	      jmp	BS_jsr
   1342  10db				   .skipL088
   1343  10db				   .
   1344  10db							;;line 423;; 
   1345  10db
   1346  10db				   .__TS_AP_Skip
   1347  10db							;;line 424;; __TS_AP_Skip
   1348  10db
   1349  10db				   .
   1350  10db							;;line 425;; 
   1351  10db
   1352  10db				   .
   1353  10db							;;line 426;; 
   1354  10db
   1355  10db				   .
   1356  10db							;;line 427;; 
   1357  10db
   1358  10db				   .
   1359  10db							;;line 428;; 
   1360  10db
   1361  10db				   .
   1362  10db							;;line 429;; 
   1363  10db
   1364  10db				   .
   1365  10db							;;line 430;; 
   1366  10db
   1367  10db				   .
   1368  10db							;;line 431;; 
   1369  10db
   1370  10db				   .L089		;;line 432;;  drawscreen
   1371  10db
   1372  10db		       85 ee		      sta	temp7
   1373  10dd		       a9 10		      lda	#>(ret_point2-1)
   1374  10df		       48		      pha
   1375  10e0		       a9 f2		      lda	#<(ret_point2-1)
   1376  10e2		       48		      pha
   1377  10e3		       a9 f4		      lda	#>(drawscreen-1)
   1378  10e5		       48		      pha
   1379  10e6		       a9 3b		      lda	#<(drawscreen-1)
   1380  10e8		       48		      pha
   1381  10e9		       a5 ee		      lda	temp7
   1382  10eb		       48		      pha
   1383  10ec		       8a		      txa
   1384  10ed		       48		      pha
   1385  10ee		       a2 08		      ldx	#8
   1386  10f0		       4c eb ff 	      jmp	BS_jsr
   1387  10f3				   ret_point2
   1388  10f3				   .
   1389  10f3							;;line 433;; 
   1390  10f3
   1391  10f3				   .
   1392  10f3							;;line 434;; 
   1393  10f3
   1394  10f3				   .
   1395  10f3							;;line 435;; 
   1396  10f3
   1397  10f3				   .
   1398  10f3							;;line 436;; 
   1399  10f3
   1400  10f3				   .
   1401  10f3							;;line 437;; 
   1402  10f3
   1403  10f3				   .
   1404  10f3							;;line 438;; 
   1405  10f3
   1406  10f3				   .
   1407  10f3							;;line 439;; 
   1408  10f3
   1409  10f3				   .
   1410  10f3							;;line 440;; 
   1411  10f3
   1412  10f3				   .
   1413  10f3							;;line 441;; 
   1414  10f3
   1415  10f3				   .
   1416  10f3							;;line 442;; 
   1417  10f3
   1418  10f3				   .
   1419  10f3							;;line 443;; 
   1420  10f3
   1421  10f3				   .
   1422  10f3							;;line 444;; 
   1423  10f3
   1424  10f3				   .
   1425  10f3							;;line 445;; 
   1426  10f3
   1427  10f3				   .
   1428  10f3							;;line 446;; 
   1429  10f3
   1430  10f3				   .L090		;;line 447;;  if !switchreset	&&  !joy0fire then _Bit0_Reset_Restrainer{0} = 0  :  goto __Title_Screen_Loop
   1431  10f3
   1432  10f3		       a9 01		      lda	#1
   1433  10f5		       2c 82 02 	      bit	SWCHB
   1434  10f8		       f0 0d		      BEQ	.skipL090
   1435  10fa				   .condpart6
   1436  10fa		       24 0c		      bit	INPT4
   1437  10fc		       10 09		      BPL	.skip6then
   1438  10fe				   .condpart7
   1439  10fe		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1440  1100		       29 fe		      AND	#254
   1441  1102		       85 ec		      STA	_Bit0_Reset_Restrainer
   1442  1104		       4c 94 10 	      jmp	.__Title_Screen_Loop
   1443  1107
   1444  1107				   .skip6then
   1445  1107				   .skipL090
   1446  1107				   .
   1447  1107							;;line 448;; 
   1448  1107
   1449  1107				   .
   1450  1107							;;line 449;; 
   1451  1107
   1452  1107				   .
   1453  1107							;;line 450;; 
   1454  1107
   1455  1107				   .
   1456  1107							;;line 451;; 
   1457  1107
   1458  1107				   .
   1459  1107							;;line 452;; 
   1460  1107
   1461  1107				   .L091		;;line 453;;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   1462  1107
   1463  1107		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1464  1109		       4a		      LSR
   1465  110a		       90 03		      BCC	.skipL091
   1466  110c				   .condpart8
   1467  110c		       4c 94 10 	      jmp	.__Title_Screen_Loop
   1468  110f
   1469  110f				   .skipL091
   1470  110f				   .
   1471  110f							;;line 454;; 
   1472  110f
   1473  110f				   .
   1474  110f							;;line 455;; 
   1475  110f
   1476  110f				   .
   1477  110f							;;line 456;; 
   1478  110f
   1479  110f				   .
   1480  110f							;;line 457;; 
   1481  110f
   1482  110f				   .L092		;;line 458;;  _Bit2_Game_Control{2} = 1
   1483  110f
   1484  110f		       a5 ec		      LDA	_Bit2_Game_Control
   1485  1111		       09 04		      ORA	#4
   1486  1113		       85 ec		      STA	_Bit2_Game_Control
   1487  1115				   .
   1488  1115							;;line 459;; 
   1489  1115
   1490  1115				   .
   1491  1115							;;line 460;; 
   1492  1115
   1493  1115				   .
   1494  1115							;;line 461;; 
   1495  1115
   1496  1115				   .
   1497  1115							;;line 462;; 
   1498  1115
   1499  1115				   .L093		;;line 463;;  goto __Start_Restart
   1500  1115
   1501  1115		       4c 00 10 	      jmp	.__Start_Restart
   1502  1118
   1503  1118				   .
   1504  1118							;;line 464;; 
   1505  1118
   1506  1118				   .
   1507  1118							;;line 465;; 
   1508  1118
   1509  1118				   .L094		;;line 466;;  bank 2
   1510  1118
   1511  1118					      if	ECHO1
      3772 bytes of ROM space left in bank 1
   1512  1118					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1513  1118					      endif
   1514  1118		       00 01	   ECHO1      =	1
   1515  1fd4					      ORG	$1FF4-bscode_length
   1516  1fd4					      RORG	$1FF4-bscode_length
   1517  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1518  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   1519  1fd6				  -	      stx	FASTFETCH
   1520  1fd6					      endif
   1521  1fd6		       9a		      txs
   1522  1fd7				  -	      if	bankswitch == 64
   1523  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1524  1fd7					      else
   1525  1fd7		       a9 f2		      lda	#>(start-1)
   1526  1fd9					      endif
   1527  1fd9		       48		      pha
   1528  1fda		       a9 51		      lda	#<(start-1)
   1529  1fdc		       48		      pha
   1530  1fdd		       48		      pha
   1531  1fde		       8a		      txa
   1532  1fdf		       48		      pha
   1533  1fe0		       ba		      tsx
   1534  1fe1					      if	bankswitch != 64
   1535  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   1536  1fe3		       2a		      rol
   1537  1fe4		       2a		      rol
   1538  1fe5		       2a		      rol
   1539  1fe6		       2a		      rol
   1540  1fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1541  1fe9		       aa		      tax
   1542  1fea		       e8		      inx
   1543  1feb				  -	      else
   1544  1feb				  -	      lda	4,x	; get high byte of return address
   1545  1feb				  -	      tay
   1546  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1547  1feb				  -	      sta	4,x
   1548  1feb				  -	      tya
   1549  1feb				  -	      lsr
   1550  1feb				  -	      lsr
   1551  1feb				  -	      lsr
   1552  1feb				  -	      lsr
   1553  1feb				  -	      tax
   1554  1feb				  -	      inx
   1555  1feb					      endif
   1556  1feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   1557  1fee		       68		      pla
   1558  1fef		       aa		      tax
   1559  1ff0		       68		      pla
   1560  1ff1		       60		      rts
   1561  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1562  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1563  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1564  1ff2					      endif
   1565  1ffc					      ORG	$1FFC
   1566  1ffc					      RORG	$1FFC
   1567  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1568  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1569  2000					      ORG	$2000
   1570  2000					      RORG	$3000
   1571  2000				   .
   1572  2000							;;line 467;; 
   1573  2000
   1574  2000				   .
   1575  2000							;;line 468;; 
   1576  2000
   1577  2000				   .
   1578  2000							;;line 469;; 
   1579  2000
   1580  2000				   .
   1581  2000							;;line 470;; 
   1582  2000
   1583  2000				   .
   1584  2000							;;line 471;; 
   1585  2000
   1586  2000				   .
   1587  2000							;;line 472;; 
   1588  2000
   1589  2000				   .
   1590  2000							;;line 473;; 
   1591  2000
   1592  2000				   .
   1593  2000							;;line 474;; 
   1594  2000
   1595  2000				   .
   1596  2000							;;line 475;; 
   1597  2000
   1598  2000				   .
   1599  2000							;;line 476;; 
   1600  2000
   1601  2000				   .
   1602  2000							;;line 477;; 
   1603  2000
   1604  2000				   .__Main_Loop_Setup
   1605  2000							;;line 478;; __Main_Loop_Setup
   1606  2000
   1607  2000				   .
   1608  2000							;;line 479;; 
   1609  2000
   1610  2000				   .
   1611  2000							;;line 480;; 
   1612  2000
   1613  2000				   .
   1614  2000							;;line 481;; 
   1615  2000
   1616  2000				   .
   1617  2000							;;line 482;; 
   1618  2000
   1619  2000				   .
   1620  2000							;;line 483;; 
   1621  2000
   1622  2000				   .
   1623  2000							;;line 484;; 
   1624  2000
   1625  2000				   .
   1626  2000							;;line 485;; 
   1627  2000
   1628  2000				   .
   1629  2000							;;line 486;; 
   1630  2000
   1631  2000				   .
   1632  2000							;;line 487;; 
   1633  2000
   1634  2000				   .
   1635  2000							;;line 488;; 
   1636  2000
   1637  2000				   .L095		;;line 489;;  _Bit2_Game_Control{2} = 0
   1638  2000
   1639  2000		       a5 ec		      LDA	_Bit2_Game_Control
   1640  2002		       29 fb		      AND	#251
   1641  2004		       85 ec		      STA	_Bit2_Game_Control
   1642  2006				   .
   1643  2006							;;line 490;; 
   1644  2006
   1645  2006				   .
   1646  2006							;;line 491;; 
   1647  2006
   1648  2006				   .
   1649  2006							;;line 492;; 
   1650  2006
   1651  2006				   .
   1652  2006							;;line 493;; 
   1653  2006
   1654  2006				   .
   1655  2006							;;line 494;; 
   1656  2006
   1657  2006				   .
   1658  2006							;;line 495;; 
   1659  2006
   1660  2006				   .
   1661  2006							;;line 496;; 
   1662  2006
   1663  2006				   .
   1664  2006							;;line 497;; 
   1665  2006
   1666  2006				   .
   1667  2006							;;line 498;; 
   1668  2006
   1669  2006				   .
   1670  2006							;;line 499;; 
   1671  2006
   1672  2006				   .
   1673  2006							;;line 500;; 
   1674  2006
   1675  2006				   .
   1676  2006							;;line 501;; 
   1677  2006
   1678  2006				   .
   1679  2006							;;line 502;; 
   1680  2006
   1681  2006				   .L096		;;line 503;;  _Bit0_Reset_Restrainer{0} = 1
   1682  2006
   1683  2006		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1684  2008		       09 01		      ORA	#1
   1685  200a		       85 ec		      STA	_Bit0_Reset_Restrainer
   1686  200c				   .
   1687  200c							;;line 504;; 
   1688  200c
   1689  200c				   .
   1690  200c							;;line 505;; 
   1691  200c
   1692  200c				   .
   1693  200c							;;line 506;; 
   1694  200c
   1695  200c				   .
   1696  200c							;;line 507;; 
   1697  200c
   1698  200c				   .
   1699  200c							;;line 508;; 
   1700  200c
   1701  200c				   .
   1702  200c							;;line 509;; 
   1703  200c
   1704  200c				   .
   1705  200c							;;line 510;; 
   1706  200c
   1707  200c				   .
   1708  200c							;;line 511;; 
   1709  200c
   1710  200c				   .
   1711  200c							;;line 512;; 
   1712  200c
   1713  200c				   .
   1714  200c							;;line 513;; 
   1715  200c
   1716  200c				   .
   1717  200c							;;line 514;; 
   1718  200c
   1719  200c				   .
   1720  200c							;;line 515;; 
   1721  200c
   1722  200c				   .L097		;;line 516;;  _Bit1_FireB_Restrainer{1} = 1
   1723  200c
   1724  200c		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   1725  200e		       09 02		      ORA	#2
   1726  2010		       85 ec		      STA	_Bit1_FireB_Restrainer
   1727  2012				   .
   1728  2012							;;line 517;; 
   1729  2012
   1730  2012				   .
   1731  2012							;;line 518;; 
   1732  2012
   1733  2012				   .
   1734  2012							;;line 519;; 
   1735  2012
   1736  2012				   .
   1737  2012							;;line 520;; 
   1738  2012
   1739  2012				   .
   1740  2012							;;line 521;; 
   1741  2012
   1742  2012				   .
   1743  2012							;;line 522;; 
   1744  2012
   1745  2012				   .L098		;;line 523;;  _Main_CharX = 77  :  _Main_CharY = 53
   1746  2012
   1747  2012		       a9 4d		      LDA	#77
   1748  2014		       85 81		      STA	_Main_CharX
   1749  2016		       a9 35		      LDA	#53
   1750  2018		       85 86		      STA	_Main_CharY
   1751  201a				   .
   1752  201a							;;line 524;; 
   1753  201a
   1754  201a				   .
   1755  201a							;;line 525;; 
   1756  201a
   1757  201a				   .
   1758  201a							;;line 526;; 
   1759  201a
   1760  201a				   .
   1761  201a							;;line 527;; 
   1762  201a
   1763  201a				   .
   1764  201a							;;line 528;; 
   1765  201a
   1766  201a				   .
   1767  201a							;;line 529;; 
   1768  201a
   1769  201a				   .L099		;;line 530;;  scorecolor = $1C
   1770  201a
   1771  201a		       a9 1c		      LDA	#$1C
   1772  201c		       85 a3		      STA	scorecolor
   1773  201e				   .
   1774  201e							;;line 531;; 
   1775  201e
   1776  201e				   .
   1777  201e							;;line 532;; 
   1778  201e
   1779  201e				   .
   1780  201e							;;line 533;; 
   1781  201e
   1782  201e				   .
   1783  201e							;;line 534;; 
   1784  201e
   1785  201e				   .
   1786  201e							;;line 535;; 
   1787  201e
   1788  201e				   .L0100		;;line 536;;  pfscore1 = %10101010  :	pfscore2 = %11111111  :  pfscorecolor = $06
   1789  201e
   1790  201e		       a9 aa		      LDA	#%10101010
   1791  2020		       85 f2		      STA	pfscore1
   1792  2022		       a9 ff		      LDA	#%11111111
   1793  2024		       85 f3		      STA	pfscore2
   1794  2026		       a9 06		      LDA	#$06
   1795  2028		       85 f4		      STA	pfscorecolor
   1796  202a				   .
   1797  202a							;;line 537;; 
   1798  202a
   1799  202a				   .
   1800  202a							;;line 538;; 
   1801  202a
   1802  202a				   .
   1803  202a							;;line 539;; 
   1804  202a
   1805  202a				   .
   1806  202a							;;line 540;; 
   1807  202a
   1808  202a				   .
   1809  202a							;;line 541;; 
   1810  202a
   1811  202a				   .
   1812  202a							;;line 542;; 
   1813  202a
   1814  202a				   .
   1815  202a							;;line 543;; 
   1816  202a
   1817  202a				   .
   1818  202a							;;line 544;; 
   1819  202a
   1820  202a				   .
   1821  202a							;;line 545;; 
   1822  202a
   1823  202a				   .
   1824  202a							;;line 546;; 
   1825  202a
   1826  202a				   .
   1827  202a							;;line 547;; 
   1828  202a
   1829  202a				   .
   1830  202a							;;line 548;; 
   1831  202a
   1832  202a				   .
   1833  202a							;;line 549;; 
   1834  202a
   1835  202a				   .
   1836  202a							;;line 550;; 
   1837  202a
   1838  202a				   .
   1839  202a							;;line 551;; 
   1840  202a
   1841  202a				   .L0101		;;line 552;;  _Will_AI_State = 0
   1842  202a
   1843  202a		       a9 00		      LDA	#0
   1844  202c		       85 ee		      STA	_Will_AI_State
   1845  202e				   .L0102		;;line 553;;  _Will_Stun_Timer = 0
   1846  202e
   1847  202e		       a9 00		      LDA	#0
   1848  2030		       85 a1		      STA	_Will_Stun_Timer
   1849  2032				   .L0103		;;line 554;;  _Will_Aftn_AI = 0
   1850  2032
   1851  2032		       a9 00		      LDA	#0
   1852  2034		       85 e1		      STA	_Will_Aftn_AI
   1853  2036				   .L0104		;;line 555;;  _Kill_Count = 0
   1854  2036
   1855  2036		       a9 00		      LDA	#0
   1856  2038		       85 e2		      STA	_Kill_Count
   1857  203a				   .
   1858  203a							;;line 556;; 
   1859  203a
   1860  203a				   .
   1861  203a							;;line 557;; 
   1862  203a
   1863  203a				   .
   1864  203a							;;line 558;; 
   1865  203a
   1866  203a				   .
   1867  203a							;;line 559;; 
   1868  203a
   1869  203a				   .
   1870  203a							;;line 560;; 
   1871  203a
   1872  203a				   .L0105		;;line 561;;  missile1height = 1
   1873  203a
   1874  203a		       a9 01		      LDA	#1
   1875  203c		       85 87		      STA	missile1height
   1876  203e				   .
   1877  203e							;;line 562;; 
   1878  203e
   1879  203e				   .
   1880  203e							;;line 563;; 
   1881  203e
   1882  203e				   .
   1883  203e							;;line 564;; 
   1884  203e
   1885  203e				   .
   1886  203e							;;line 565;; 
   1887  203e
   1888  203e				   .
   1889  203e							;;line 566;; 
   1890  203e
   1891  203e				   .
   1892  203e							;;line 567;; 
   1893  203e
   1894  203e				   .
   1895  203e							;;line 568;; 
   1896  203e
   1897  203e				   .L0106		;;line 569;;  _Bit3_P0_Dir_Right{3} = 1
   1898  203e
   1899  203e		       a5 da		      LDA	_Bit3_P0_Dir_Right
   1900  2040		       09 08		      ORA	#8
   1901  2042		       85 da		      STA	_Bit3_P0_Dir_Right
   1902  2044				   .
   1903  2044							;;line 570;; 
   1904  2044
   1905  2044				   .
   1906  2044							;;line 571;; 
   1907  2044
   1908  2044				   .
   1909  2044							;;line 572;; 
   1910  2044
   1911  2044				   .
   1912  2044							;;line 573;; 
   1913  2044
   1914  2044				   .
   1915  2044							;;line 574;; 
   1916  2044
   1917  2044				   .
   1918  2044							;;line 575;; 
   1919  2044
   1920  2044				   .L0107		;;line 576;;  pfcolors:
   1921  2044
   1922  2044		       a9 00		      lda	# $00
   1923  2046		       85 08		      sta	COLUPF
   1924  2048				  -	      ifconst	pfres
   1925  2048				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   1926  2048					      else
   1927  2048		       a9 f5		      lda	#>(pfcolorlabel13-84)
   1928  204a					      endif
   1929  204a		       85 f1		      sta	pfcolortable+1
   1930  204c				  -	      ifconst	pfres
   1931  204c				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   1932  204c					      else
   1933  204c		       a9 04		      lda	#<(pfcolorlabel13-84)
   1934  204e					      endif
   1935  204e		       85 f0		      sta	pfcolortable
   1936  2050				   .
   1937  2050							;;line 591;; 
   1938  2050
   1939  2050				   .
   1940  2050							;;line 592;; 
   1941  2050
   1942  2050				   .
   1943  2050							;;line 593;; 
   1944  2050
   1945  2050				   .
   1946  2050							;;line 594;; 
   1947  2050
   1948  2050				   .
   1949  2050							;;line 595;; 
   1950  2050
   1951  2050				   .
   1952  2050							;;line 596;; 
   1953  2050
   1954  2050				   .
   1955  2050							;;line 597;; 
   1956  2050
   1957  2050				   .L0108		;;line 598;;  playfield:
   1958  2050
   1959  2050				  -	      ifconst	pfres
   1960  2050				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   1961  2050					      else
   1962  2050		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   1963  2052					      endif
   1964  2052		       4c 85 30 	      jmp	pflabel0
   1965  2055				   PF_data0
   1966  2055		       fc 00		      .byte.b	%11111100, %00000000
   1967  2057					      if	(pfwidth>2)
   1968  2057		       00 fc		      .byte.b	%00000000, %11111100
   1969  2059					      endif
   1970  2059		       fc 00		      .byte.b	%11111100, %00000000
   1971  205b					      if	(pfwidth>2)
   1972  205b		       00 fc		      .byte.b	%00000000, %11111100
   1973  205d					      endif
   1974  205d		       e0 00		      .byte.b	%11100000, %00000000
   1975  205f					      if	(pfwidth>2)
   1976  205f		       00 e0		      .byte.b	%00000000, %11100000
   1977  2061					      endif
   1978  2061		       00 00		      .byte.b	%00000000, %00000000
   1979  2063					      if	(pfwidth>2)
   1980  2063		       00 00		      .byte.b	%00000000, %00000000
   1981  2065					      endif
   1982  2065		       00 00		      .byte.b	%00000000, %00000000
   1983  2067					      if	(pfwidth>2)
   1984  2067		       00 00		      .byte.b	%00000000, %00000000
   1985  2069					      endif
   1986  2069		       00 00		      .byte.b	%00000000, %00000000
   1987  206b					      if	(pfwidth>2)
   1988  206b		       00 00		      .byte.b	%00000000, %00000000
   1989  206d					      endif
   1990  206d		       00 00		      .byte.b	%00000000, %00000000
   1991  206f					      if	(pfwidth>2)
   1992  206f		       00 00		      .byte.b	%00000000, %00000000
   1993  2071					      endif
   1994  2071		       00 00		      .byte.b	%00000000, %00000000
   1995  2073					      if	(pfwidth>2)
   1996  2073		       00 00		      .byte.b	%00000000, %00000000
   1997  2075					      endif
   1998  2075		       00 00		      .byte.b	%00000000, %00000000
   1999  2077					      if	(pfwidth>2)
   2000  2077		       00 00		      .byte.b	%00000000, %00000000
   2001  2079					      endif
   2002  2079		       e0 00		      .byte.b	%11100000, %00000000
   2003  207b					      if	(pfwidth>2)
   2004  207b		       00 e0		      .byte.b	%00000000, %11100000
   2005  207d					      endif
   2006  207d		       fc 00		      .byte.b	%11111100, %00000000
   2007  207f					      if	(pfwidth>2)
   2008  207f		       00 fc		      .byte.b	%00000000, %11111100
   2009  2081					      endif
   2010  2081		       fc 00		      .byte.b	%11111100, %00000000
   2011  2083					      if	(pfwidth>2)
   2012  2083		       00 fc		      .byte.b	%00000000, %11111100
   2013  2085					      endif
   2014  2085				   pflabel0
   2015  2085		       bd 55 30 	      lda	PF_data0,x
   2016  2088		       95 a4		      sta	playfield,x
   2017  208a		       ca		      dex
   2018  208b		       10 f8		      bpl	pflabel0
   2019  208d				   .
   2020  208d							;;line 612;; 
   2021  208d
   2022  208d				   .
   2023  208d							;;line 613;; 
   2024  208d
   2025  208d				   .
   2026  208d							;;line 614;; 
   2027  208d
   2028  208d				   .
   2029  208d							;;line 615;; 
   2030  208d
   2031  208d				   .
   2032  208d							;;line 616;; 
   2033  208d
   2034  208d				   .
   2035  208d							;;line 617;; 
   2036  208d
   2037  208d				   .
   2038  208d							;;line 618;; 
   2039  208d
   2040  208d				   .L0109		;;line 619;;  player1color:
   2041  208d
   2042  208d		       a2 88		      LDX	#<playercolorL0109_1
   2043  208f		       86 87		      STX	player1color
   2044  2091		       a9 f5		      LDA	#>playercolorL0109_1
   2045  2093		       85 88		      STA	player1color+1
   2046  2095				   .
   2047  2095							;;line 644;; 
   2048  2095
   2049  2095				   .L0110		;;line 645;;  player1:
   2050  2095
   2051  2095		       a2 9f		      LDX	#<playerL0110_1
   2052  2097		       86 8c		      STX	player1pointerlo
   2053  2099		       a9 f5		      LDA	#>playerL0110_1
   2054  209b		       85 8d		      STA	player1pointerhi
   2055  209d		       a9 16		      LDA	#22
   2056  209f		       85 8f		      STA	player1height
   2057  20a1				   .
   2058  20a1							;;line 670;; 
   2059  20a1
   2060  20a1				   .
   2061  20a1							;;line 671;; 
   2062  20a1
   2063  20a1				   .
   2064  20a1							;;line 672;; 
   2065  20a1
   2066  20a1				   .
   2067  20a1							;;line 673;; 
   2068  20a1
   2069  20a1				   .
   2070  20a1							;;line 674;; 
   2071  20a1
   2072  20a1				   .
   2073  20a1							;;line 675;; 
   2074  20a1
   2075  20a1				   .
   2076  20a1							;;line 676;; 
   2077  20a1
   2078  20a1				   .
   2079  20a1							;;line 677;; 
   2080  20a1
   2081  20a1				   .L0111		;;line 678;;  _WillX =  ( rand  &  150 )   +  5
   2082  20a1
   2083  20a1							; complex statement detected
   2084  20a1		       a5 a2		      lda	rand
   2085  20a3		       4a		      lsr
   2086  20a4					      ifconst	rand16
   2087  20a4		       26 ed		      rol	rand16
   2088  20a6					      endif
   2089  20a6		       90 02		      bcc	*+4
   2090  20a8		       49 b4		      eor	#$B4
   2091  20aa		       85 a2		      sta	rand
   2092  20ac					      ifconst	rand16
   2093  20ac		       45 ed		      eor	rand16
   2094  20ae					      endif
   2095  20ae		       29 96		      AND	#150
   2096  20b0		       18		      CLC
   2097  20b1		       69 05		      ADC	#5
   2098  20b3		       85 80		      STA	_WillX
   2099  20b5				   .L0112		;;line 679;;  _WillY =  ( rand  &  80 )   +  5
   2100  20b5
   2101  20b5							; complex statement detected
   2102  20b5		       a5 a2		      lda	rand
   2103  20b7		       4a		      lsr
   2104  20b8					      ifconst	rand16
   2105  20b8		       26 ed		      rol	rand16
   2106  20ba					      endif
   2107  20ba		       90 02		      bcc	*+4
   2108  20bc		       49 b4		      eor	#$B4
   2109  20be		       85 a2		      sta	rand
   2110  20c0					      ifconst	rand16
   2111  20c0		       45 ed		      eor	rand16
   2112  20c2					      endif
   2113  20c2		       29 50		      AND	#80
   2114  20c4		       18		      CLC
   2115  20c5		       69 05		      ADC	#5
   2116  20c7		       85 85		      STA	_WillY
   2117  20c9				   .
   2118  20c9							;;line 680;; 
   2119  20c9
   2120  20c9				   .__Skip_Enemy_Setup
   2121  20c9							;;line 681;; __Skip_Enemy_Setup
   2122  20c9
   2123  20c9				   .
   2124  20c9							;;line 682;; 
   2125  20c9
   2126  20c9				   .
   2127  20c9							;;line 683;; 
   2128  20c9
   2129  20c9				   .
   2130  20c9							;;line 684;; 
   2131  20c9
   2132  20c9				   .
   2133  20c9							;;line 685;; 
   2134  20c9
   2135  20c9				   .
   2136  20c9							;;line 686;; 
   2137  20c9
   2138  20c9				   .
   2139  20c9							;;line 687;; 
   2140  20c9
   2141  20c9				   .
   2142  20c9							;;line 688;; 
   2143  20c9
   2144  20c9				   .L0113		;;line 689;;  _Bit0_BW_Mem{0} = 0  :  if switchbw then _Bit0_BW_Mem{0} = 1
   2145  20c9
   2146  20c9		       a5 e5		      LDA	_Bit0_BW_Mem
   2147  20cb		       29 fe		      AND	#254
   2148  20cd		       85 e5		      STA	_Bit0_BW_Mem
   2149  20cf		       a9 08		      lda	#8
   2150  20d1		       2c 82 02 	      bit	SWCHB
   2151  20d4		       d0 06		      BNE	.skipL0113
   2152  20d6				   .condpart9
   2153  20d6		       a5 e5		      LDA	_Bit0_BW_Mem
   2154  20d8		       09 01		      ORA	#1
   2155  20da		       85 e5		      STA	_Bit0_BW_Mem
   2156  20dc				   .skipL0113
   2157  20dc				   .
   2158  20dc							;;line 690;; 
   2159  20dc
   2160  20dc				   .
   2161  20dc							;;line 691;; 
   2162  20dc
   2163  20dc				   .
   2164  20dc							;;line 692;; 
   2165  20dc
   2166  20dc				   .
   2167  20dc							;;line 693;; 
   2168  20dc
   2169  20dc				   .
   2170  20dc							;;line 694;; 
   2171  20dc
   2172  20dc				   .
   2173  20dc							;;line 695;; 
   2174  20dc
   2175  20dc				   .
   2176  20dc							;;line 696;; 
   2177  20dc
   2178  20dc				   .
   2179  20dc							;;line 697;; 
   2180  20dc
   2181  20dc				   .
   2182  20dc							;;line 698;; 
   2183  20dc
   2184  20dc				   .L0114		;;line 699;;  if !_Bit3_Auto_Play{3} then score = 0  :  goto __AP_Skip_AP_Setup
   2185  20dc
   2186  20dc		       a5 ec		      LDA	_Bit3_Auto_Play
   2187  20de		       29 08		      AND	#8
   2188  20e0		       d0 0f		      BNE	.skipL0114
   2189  20e2				   .condpart10
   2190  20e2		       a9 00		      LDA	#$00
   2191  20e4		       85 95		      STA	score+2
   2192  20e6		       a9 00		      LDA	#$00
   2193  20e8		       85 94		      STA	score+1
   2194  20ea		       a9 00		      LDA	#$00
   2195  20ec		       85 93		      STA	score
   2196  20ee		       4c 03 31 	      jmp	.__AP_Skip_AP_Setup
   2197  20f1
   2198  20f1				   .skipL0114
   2199  20f1				   .
   2200  20f1							;;line 700;; 
   2201  20f1
   2202  20f1				   .
   2203  20f1							;;line 701;; 
   2204  20f1
   2205  20f1				   .
   2206  20f1							;;line 702;; 
   2207  20f1
   2208  20f1				   .
   2209  20f1							;;line 703;; 
   2210  20f1
   2211  20f1				   .L0115		;;line 704;;  _Score1_Mem = _sc1  :  _Score2_Mem = _sc2  :  _Score3_Mem = _sc3
   2212  20f1
   2213  20f1		       a5 93		      LDA	_sc1
   2214  20f3		       85 e6		      STA	_Score1_Mem
   2215  20f5		       a5 94		      LDA	_sc2
   2216  20f7		       85 e7		      STA	_Score2_Mem
   2217  20f9		       a5 95		      LDA	_sc3
   2218  20fb		       85 e8		      STA	_Score3_Mem
   2219  20fd				   .
   2220  20fd							;;line 705;; 
   2221  20fd
   2222  20fd				   .L0116		;;line 706;;  _Bit6_Swap_Scores{6} = 0
   2223  20fd
   2224  20fd		       a5 ec		      LDA	_Bit6_Swap_Scores
   2225  20ff		       29 bf		      AND	#191
   2226  2101		       85 ec		      STA	_Bit6_Swap_Scores
   2227  2103				   .
   2228  2103							;;line 707;; 
   2229  2103
   2230  2103				   .__AP_Skip_AP_Setup
   2231  2103							;;line 708;; __AP_Skip_AP_Setup
   2232  2103
   2233  2103				   .
   2234  2103							;;line 709;; 
   2235  2103
   2236  2103				   .
   2237  2103							;;line 710;; 
   2238  2103
   2239  2103				   .
   2240  2103							;;line 711;; 
   2241  2103
   2242  2103				   .
   2243  2103							;;line 712;; 
   2244  2103
   2245  2103				   .
   2246  2103							;;line 713;; 
   2247  2103
   2248  2103				   .
   2249  2103							;;line 714;; 
   2250  2103
   2251  2103				   .
   2252  2103							;;line 715;; 
   2253  2103
   2254  2103				   .
   2255  2103							;;line 716;; 
   2256  2103
   2257  2103				   .
   2258  2103							;;line 717;; 
   2259  2103
   2260  2103				   .
   2261  2103							;;line 718;; 
   2262  2103
   2263  2103				   .
   2264  2103							;;line 719;; 
   2265  2103
   2266  2103				   .
   2267  2103							;;line 720;; 
   2268  2103
   2269  2103				   .
   2270  2103							;;line 721;; 
   2271  2103
   2272  2103				   .__Main_Loop
   2273  2103							;;line 722;; __Main_Loop
   2274  2103
   2275  2103				   .
   2276  2103							;;line 723;; 
   2277  2103
   2278  2103				   .
   2279  2103							;;line 724;; 
   2280  2103
   2281  2103				   .
   2282  2103							;;line 725;; 
   2283  2103
   2284  2103				   .
   2285  2103							;;line 726;; 
   2286  2103
   2287  2103				   .
   2288  2103							;;line 727;; 
   2289  2103
   2290  2103				   .
   2291  2103							;;line 728;; 
   2292  2103
   2293  2103				   .
   2294  2103							;;line 729;; 
   2295  2103
   2296  2103				   .
   2297  2103							;;line 730;; 
   2298  2103
   2299  2103				   .L0117		;;line 731;;  _Master_Counter = _Master_Counter  +  1
   2300  2103
   2301  2103		       e6 d8		      INC	_Master_Counter
   2302  2105				   .
   2303  2105							;;line 732;; 
   2304  2105
   2305  2105				   .
   2306  2105							;;line 733;; 
   2307  2105
   2308  2105				   .
   2309  2105							;;line 734;; 
   2310  2105
   2311  2105				   .
   2312  2105							;;line 735;; 
   2313  2105
   2314  2105				   .L0118		;;line 736;;  if _Master_Counter  <  7 then goto __Skip_Counters
   2315  2105
   2316  2105		       a5 d8		      LDA	_Master_Counter
   2317  2107		       c9 07		      CMP	#7
   2318  2109		       b0 03		      BCS	.skipL0118
   2319  210b				   .condpart11
   2320  210b		       4c 1e 31 	      jmp	.__Skip_Counters
   2321  210e
   2322  210e				   .skipL0118
   2323  210e				   .
   2324  210e							;;line 737;; 
   2325  210e
   2326  210e				   .
   2327  210e							;;line 738;; 
   2328  210e
   2329  210e				   .
   2330  210e							;;line 739;; 
   2331  210e
   2332  210e				   .
   2333  210e							;;line 740;; 
   2334  210e
   2335  210e				   .L0119		;;line 741;;  _Frame_Counter = _Frame_Counter	+  1  :  _Master_Counter = 0
   2336  210e
   2337  210e		       e6 d9		      INC	_Frame_Counter
   2338  2110		       a9 00		      LDA	#0
   2339  2112		       85 d8		      STA	_Master_Counter
   2340  2114				   .
   2341  2114							;;line 742;; 
   2342  2114
   2343  2114				   .
   2344  2114							;;line 743;; 
   2345  2114
   2346  2114				   .
   2347  2114							;;line 744;; 
   2348  2114
   2349  2114				   .
   2350  2114							;;line 745;; 
   2351  2114
   2352  2114				   .L0120		;;line 746;;  if _Frame_Counter  >  3 then _Frame_Counter = 0
   2353  2114
   2354  2114		       a9 03		      LDA	#3
   2355  2116		       c5 d9		      CMP	_Frame_Counter
   2356  2118		       b0 04		      BCS	.skipL0120
   2357  211a				   .condpart12
   2358  211a		       a9 00		      LDA	#0
   2359  211c		       85 d9		      STA	_Frame_Counter
   2360  211e				   .skipL0120
   2361  211e				   .
   2362  211e							;;line 747;; 
   2363  211e
   2364  211e				   .
   2365  211e							;;line 748;; 
   2366  211e
   2367  211e				   .__Skip_Counters
   2368  211e							;;line 749;; __Skip_Counters
   2369  211e
   2370  211e				   .
   2371  211e							;;line 750;; 
   2372  211e
   2373  211e				   .
   2374  211e							;;line 751;; 
   2375  211e
   2376  211e				   .
   2377  211e							;;line 752;; 
   2378  211e
   2379  211e				   .
   2380  211e							;;line 753;; 
   2381  211e
   2382  211e				   .
   2383  211e							;;line 754;; 
   2384  211e
   2385  211e				   .
   2386  211e							;;line 755;; 
   2387  211e
   2388  211e				   .L0121		;;line 756;;  _Bitop_Coord_Counter = 0  :  _Bitop_Screen_Counter = 0
   2389  211e
   2390  211e		       a9 00		      LDA	#0
   2391  2120		       85 e4		      STA	_Bitop_Coord_Counter
   2392  2122		       85 e3		      STA	_Bitop_Screen_Counter
   2393  2124				   .
   2394  2124							;;line 757;; 
   2395  2124
   2396  2124				   .
   2397  2124							;;line 758;; 
   2398  2124
   2399  2124				   .
   2400  2124							;;line 759;; 
   2401  2124
   2402  2124				   .
   2403  2124							;;line 760;; 
   2404  2124
   2405  2124				   .__Puppet
   2406  2124							;;line 761;; __Puppet
   2407  2124
   2408  2124				   .L0122		;;line 762;;  player1color:
   2409  2124
   2410  2124		       a2 b6		      LDX	#<playercolorL0122_1
   2411  2126		       86 87		      STX	player1color
   2412  2128		       a9 f5		      LDA	#>playercolorL0122_1
   2413  212a		       85 88		      STA	player1color+1
   2414  212c				   .
   2415  212c							;;line 787;; 
   2416  212c
   2417  212c				   .L0123		;;line 788;;  player1:
   2418  212c
   2419  212c		       a2 cd		      LDX	#<playerL0123_1
   2420  212e		       86 8c		      STX	player1pointerlo
   2421  2130		       a9 f5		      LDA	#>playerL0123_1
   2422  2132		       85 8d		      STA	player1pointerhi
   2423  2134		       a9 16		      LDA	#22
   2424  2136		       85 8f		      STA	player1height
   2425  2138				   .
   2426  2138							;;line 813;; 
   2427  2138
   2428  2138				   .
   2429  2138							;;line 814;; 
   2430  2138
   2431  2138				   .
   2432  2138							;;line 815;; 
   2433  2138
   2434  2138				   .
   2435  2138							;;line 816;; 
   2436  2138
   2437  2138				   .
   2438  2138							;;line 817;; 
   2439  2138
   2440  2138				   .
   2441  2138							;;line 818;; 
   2442  2138
   2443  2138				   .
   2444  2138							;;line 819;; 
   2445  2138
   2446  2138				   .
   2447  2138							;;line 820;; 
   2448  2138
   2449  2138				   .L0124		;;line 821;;  COLUBK = 0
   2450  2138
   2451  2138		       a9 00		      LDA	#0
   2452  213a		       85 09		      STA	COLUBK
   2453  213c				   .L0125		;;line 822;;  CTRLPF = $31
   2454  213c
   2455  213c		       a9 31		      LDA	#$31
   2456  213e		       85 0a		      STA	CTRLPF
   2457  2140				   .L0126		;;line 823;;  ballheight = 8
   2458  2140
   2459  2140		       a9 08		      LDA	#8
   2460  2142		       85 92		      STA	ballheight
   2461  2144				   .
   2462  2144							;;line 824;; 
   2463  2144
   2464  2144				   .
   2465  2144							;;line 825;; 
   2466  2144
   2467  2144				   .
   2468  2144							;;line 826;; 
   2469  2144
   2470  2144				   .
   2471  2144							;;line 827;; 
   2472  2144
   2473  2144				   .
   2474  2144							;;line 828;; 
   2475  2144
   2476  2144				   .
   2477  2144							;;line 829;; 
   2478  2144
   2479  2144				   .
   2480  2144							;;line 830;; 
   2481  2144
   2482  2144				   .L0127		;;line 831;;  pfcolors:
   2483  2144
   2484  2144		       a9 2c		      lda	# $2C
   2485  2146		       85 08		      sta	COLUPF
   2486  2148				  -	      ifconst	pfres
   2487  2148				  -	      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   2488  2148					      else
   2489  2148		       a9 f5		      lda	#>(pfcolorlabel13-83)
   2490  214a					      endif
   2491  214a		       85 f1		      sta	pfcolortable+1
   2492  214c				  -	      ifconst	pfres
   2493  214c				  -	      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   2494  214c					      else
   2495  214c		       a9 05		      lda	#<(pfcolorlabel13-83)
   2496  214e					      endif
   2497  214e		       85 f0		      sta	pfcolortable
   2498  2150				   .
   2499  2150							;;line 844;; 
   2500  2150
   2501  2150				   .
   2502  2150							;;line 845;; 
   2503  2150
   2504  2150				   .
   2505  2150							;;line 846;; 
   2506  2150
   2507  2150				   .
   2508  2150							;;line 847;; 
   2509  2150
   2510  2150				   .
   2511  2150							;;line 848;; 
   2512  2150
   2513  2150				   .
   2514  2150							;;line 849;; 
   2515  2150
   2516  2150				   .
   2517  2150							;;line 850;; 
   2518  2150
   2519  2150				   .L0128		;;line 851;;  COLUP0 = $9C  :	COLUP1 = $44
   2520  2150
   2521  2150		       a9 9c		      LDA	#$9C
   2522  2152		       85 06		      STA	COLUP0
   2523  2154		       a9 44		      LDA	#$44
   2524  2156		       85 07		      STA	COLUP1
   2525  2158				   .
   2526  2158							;;line 852;; 
   2527  2158
   2528  2158				   .
   2529  2158							;;line 853;; 
   2530  2158
   2531  2158				   .
   2532  2158							;;line 854;; 
   2533  2158
   2534  2158				   .
   2535  2158							;;line 855;; 
   2536  2158
   2537  2158				   .
   2538  2158							;;line 856;; 
   2539  2158
   2540  2158				   .
   2541  2158							;;line 857;; 
   2542  2158
   2543  2158				   .
   2544  2158							;;line 858;; 
   2545  2158
   2546  2158				   .L0129		;;line 859;;  NUSIZ1 = $10
   2547  2158
   2548  2158		       a9 10		      LDA	#$10
   2549  215a		       85 05		      STA	NUSIZ1
   2550  215c				   .
   2551  215c							;;line 860;; 
   2552  215c
   2553  215c				   .
   2554  215c							;;line 861;; 
   2555  215c
   2556  215c				   .
   2557  215c							;;line 862;; 
   2558  215c
   2559  215c				   .
   2560  215c							;;line 863;; 
   2561  215c
   2562  215c				   .
   2563  215c							;;line 864;; 
   2564  215c
   2565  215c				   .
   2566  215c							;;line 865;; 
   2567  215c
   2568  215c				   .
   2569  215c							;;line 866;; 
   2570  215c
   2571  215c				   .
   2572  215c							;;line 867;; 
   2573  215c
   2574  215c				   .
   2575  215c							;;line 868;; 
   2576  215c
   2577  215c				   .
   2578  215c							;;line 869;; 
   2579  215c
   2580  215c				   .L0130		;;line 870;;  if _Bit3_Auto_Play{3} then goto __Skip_Joystick_Precheck
   2581  215c
   2582  215c		       a5 ec		      LDA	_Bit3_Auto_Play
   2583  215e		       29 08		      AND	#8
   2584  2160		       f0 03		      BEQ	.skipL0130
   2585  2162				   .condpart13
   2586  2162		       4c 86 31 	      jmp	.__Skip_Joystick_Precheck
   2587  2165
   2588  2165				   .skipL0130
   2589  2165				   .
   2590  2165							;;line 871;; 
   2591  2165
   2592  2165				   .
   2593  2165							;;line 872;; 
   2594  2165
   2595  2165				   .
   2596  2165							;;line 873;; 
   2597  2165
   2598  2165				   .
   2599  2165							;;line 874;; 
   2600  2165
   2601  2165				   .L0131		;;line 875;;  if !joy0up  &&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   2602  2165
   2603  2165		       a9 10		      lda	#$10
   2604  2167		       2c 80 02 	      bit	SWCHA
   2605  216a		       f0 14		      BEQ	.skipL0131
   2606  216c				   .condpart14
   2607  216c		       a9 20		      lda	#$20
   2608  216e		       2c 80 02 	      bit	SWCHA
   2609  2171		       f0 0d		      BEQ	.skip14then
   2610  2173				   .condpart15
   2611  2173		       2c 80 02 	      bit	SWCHA
   2612  2176		       50 08		      BVC	.skip15then
   2613  2178				   .condpart16
   2614  2178		       2c 80 02 	      bit	SWCHA
   2615  217b		       10 03		      BPL	.skip16then
   2616  217d				   .condpart17
   2617  217d		       4c 86 31 	      jmp	.__Skip_Joystick_Precheck
   2618  2180
   2619  2180				   .skip16then
   2620  2180				   .skip15then
   2621  2180				   .skip14then
   2622  2180				   .skipL0131
   2623  2180				   .
   2624  2180							;;line 876;; 
   2625  2180
   2626  2180				   .
   2627  2180							;;line 877;; 
   2628  2180
   2629  2180				   .
   2630  2180							;;line 878;; 
   2631  2180
   2632  2180				   .
   2633  2180							;;line 879;; 
   2634  2180
   2635  2180				   .L0132		;;line 880;;  _BitOp_P0_M1_Dir = _BitOp_P0_M1_Dir  &  %11110000
   2636  2180
   2637  2180		       a5 da		      LDA	_BitOp_P0_M1_Dir
   2638  2182		       29 f0		      AND	#%11110000
   2639  2184		       85 da		      STA	_BitOp_P0_M1_Dir
   2640  2186				   .
   2641  2186							;;line 881;; 
   2642  2186
   2643  2186				   .__Skip_Joystick_Precheck
   2644  2186							;;line 882;; __Skip_Joystick_Precheck
   2645  2186
   2646  2186				   .
   2647  2186							;;line 883;; 
   2648  2186
   2649  2186				   .
   2650  2186							;;line 884;; 
   2651  2186
   2652  2186				   .
   2653  2186							;;line 885;; 
   2654  2186
   2655  2186				   .
   2656  2186							;;line 886;; 
   2657  2186
   2658  2186				   .
   2659  2186							;;line 887;; 
   2660  2186
   2661  2186				   .
   2662  2186							;;line 888;; 
   2663  2186
   2664  2186				   .
   2665  2186							;;line 889;; 
   2666  2186
   2667  2186				   .
   2668  2186							;;line 890;; 
   2669  2186
   2670  2186				   .
   2671  2186							;;line 891;; 
   2672  2186
   2673  2186				   .
   2674  2186							;;line 892;; 
   2675  2186
   2676  2186				   .
   2677  2186							;;line 893;; 
   2678  2186
   2679  2186				   .L0133		;;line 894;;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_New_Dir
   2680  2186
   2681  2186		       a5 ec		      LDA	_Bit3_Auto_Play
   2682  2188		       29 08		      AND	#8
   2683  218a		       d0 03		      BNE	.skipL0133
   2684  218c				   .condpart18
   2685  218c		       4c 48 33 	      jmp	.__AP_Skip_New_Dir
   2686  218f
   2687  218f				   .skipL0133
   2688  218f				   .
   2689  218f							;;line 895;; 
   2690  218f
   2691  218f				   .
   2692  218f							;;line 896;; 
   2693  218f
   2694  218f				   .
   2695  218f							;;line 897;; 
   2696  218f
   2697  218f				   .
   2698  218f							;;line 898;; 
   2699  218f
   2700  218f				   .L0134		;;line 899;;  _AP_Dir_Counter = _AP_Dir_Counter  +  1
   2701  218f
   2702  218f		       e6 df		      INC	_AP_Dir_Counter
   2703  2191				   .
   2704  2191							;;line 900;; 
   2705  2191
   2706  2191				   .
   2707  2191							;;line 901;; 
   2708  2191
   2709  2191				   .
   2710  2191							;;line 902;; 
   2711  2191
   2712  2191				   .
   2713  2191							;;line 903;; 
   2714  2191
   2715  2191				   .
   2716  2191							;;line 904;; 
   2717  2191
   2718  2191				   .L0135		;;line 905;;  if _AP_Dir_Counter  >  254 then goto __Get_New_AP_Direction
   2719  2191
   2720  2191		       a9 fe		      LDA	#254
   2721  2193		       c5 df		      CMP	_AP_Dir_Counter
   2722  2195		       b0 03		      BCS	.skipL0135
   2723  2197				   .condpart19
   2724  2197		       4c cf 31 	      jmp	.__Get_New_AP_Direction
   2725  219a
   2726  219a				   .skipL0135
   2727  219a				   .
   2728  219a							;;line 906;; 
   2729  219a
   2730  219a				   .
   2731  219a							;;line 907;; 
   2732  219a
   2733  219a				   .
   2734  219a							;;line 908;; 
   2735  219a
   2736  219a				   .
   2737  219a							;;line 909;; 
   2738  219a
   2739  219a				   .
   2740  219a							;;line 910;; 
   2741  219a
   2742  219a				   .
   2743  219a							;;line 911;; 
   2744  219a
   2745  219a				   .L0136		;;line 912;;  temp6 =	( rand & 63 )	+  50
   2746  219a
   2747  219a							; complex statement detected
   2748  219a		       a5 a2		      lda	rand
   2749  219c		       4a		      lsr
   2750  219d					      ifconst	rand16
   2751  219d		       26 ed		      rol	rand16
   2752  219f					      endif
   2753  219f		       90 02		      bcc	*+4
   2754  21a1		       49 b4		      eor	#$B4
   2755  21a3		       85 a2		      sta	rand
   2756  21a5					      ifconst	rand16
   2757  21a5		       45 ed		      eor	rand16
   2758  21a7					      endif
   2759  21a7		       29 3f		      AND	#63
   2760  21a9		       18		      CLC
   2761  21aa		       69 32		      ADC	#50
   2762  21ac		       85 a1		      STA	temp6
   2763  21ae				   .
   2764  21ae							;;line 913;; 
   2765  21ae
   2766  21ae				   .
   2767  21ae							;;line 914;; 
   2768  21ae
   2769  21ae				   .
   2770  21ae							;;line 915;; 
   2771  21ae
   2772  21ae				   .
   2773  21ae							;;line 916;; 
   2774  21ae
   2775  21ae				   .L0137		;;line 917;;  if _AP_Dir_Counter  <  temp6 then goto __AP_Skip_New_Dir
   2776  21ae
   2777  21ae		       a5 df		      LDA	_AP_Dir_Counter
   2778  21b0		       c5 a1		      CMP	temp6
   2779  21b2		       b0 03		      BCS	.skipL0137
   2780  21b4				   .condpart20
   2781  21b4		       4c 48 33 	      jmp	.__AP_Skip_New_Dir
   2782  21b7
   2783  21b7				   .skipL0137
   2784  21b7				   .
   2785  21b7							;;line 918;; 
   2786  21b7
   2787  21b7				   .
   2788  21b7							;;line 919;; 
   2789  21b7
   2790  21b7				   .
   2791  21b7							;;line 920;; 
   2792  21b7
   2793  21b7				   .
   2794  21b7							;;line 921;; 
   2795  21b7
   2796  21b7				   .L0138		;;line 922;;  temp5 = rand
   2797  21b7
   2798  21b7		       a5 a2		      lda	rand
   2799  21b9		       4a		      lsr
   2800  21ba					      ifconst	rand16
   2801  21ba		       26 ed		      rol	rand16
   2802  21bc					      endif
   2803  21bc		       90 02		      bcc	*+4
   2804  21be		       49 b4		      eor	#$B4
   2805  21c0		       85 a2		      sta	rand
   2806  21c2					      ifconst	rand16
   2807  21c2		       45 ed		      eor	rand16
   2808  21c4					      endif
   2809  21c4		       85 a0		      STA	temp5
   2810  21c6				   .
   2811  21c6							;;line 923;; 
   2812  21c6
   2813  21c6				   .
   2814  21c6							;;line 924;; 
   2815  21c6
   2816  21c6				   .
   2817  21c6							;;line 925;; 
   2818  21c6
   2819  21c6				   .
   2820  21c6							;;line 926;; 
   2821  21c6
   2822  21c6				   .L0139		;;line 927;;  if temp5  <  230 then goto __AP_Skip_New_Dir
   2823  21c6
   2824  21c6		       a5 a0		      LDA	temp5
   2825  21c8		       c9 e6		      CMP	#230
   2826  21ca		       b0 03		      BCS	.skipL0139
   2827  21cc				   .condpart21
   2828  21cc		       4c 48 33 	      jmp	.__AP_Skip_New_Dir
   2829  21cf
   2830  21cf				   .skipL0139
   2831  21cf				   .
   2832  21cf							;;line 928;; 
   2833  21cf
   2834  21cf				   .__Get_New_AP_Direction
   2835  21cf							;;line 929;; __Get_New_AP_Direction
   2836  21cf
   2837  21cf				   .
   2838  21cf							;;line 930;; 
   2839  21cf
   2840  21cf				   .
   2841  21cf							;;line 931;; 
   2842  21cf
   2843  21cf				   .
   2844  21cf							;;line 932;; 
   2845  21cf
   2846  21cf				   .
   2847  21cf							;;line 933;; 
   2848  21cf
   2849  21cf				   .
   2850  21cf							;;line 934;; 
   2851  21cf
   2852  21cf				   .
   2853  21cf							;;line 935;; 
   2854  21cf
   2855  21cf				   .
   2856  21cf							;;line 936;; 
   2857  21cf
   2858  21cf				   .
   2859  21cf							;;line 937;; 
   2860  21cf
   2861  21cf				   .
   2862  21cf							;;line 938;; 
   2863  21cf
   2864  21cf				   .
   2865  21cf							;;line 939;; 
   2866  21cf
   2867  21cf				   .
   2868  21cf							;;line 940;; 
   2869  21cf
   2870  21cf				   .
   2871  21cf							;;line 941;; 
   2872  21cf
   2873  21cf				   .
   2874  21cf							;;line 942;; 
   2875  21cf
   2876  21cf				   .L0140		;;line 943;;  _T5_AP_Dir =  ( rand & 7 ) 
   2877  21cf
   2878  21cf							; complex statement detected
   2879  21cf		       a5 a2		      lda	rand
   2880  21d1		       4a		      lsr
   2881  21d2					      ifconst	rand16
   2882  21d2		       26 ed		      rol	rand16
   2883  21d4					      endif
   2884  21d4		       90 02		      bcc	*+4
   2885  21d6		       49 b4		      eor	#$B4
   2886  21d8		       85 a2		      sta	rand
   2887  21da					      ifconst	rand16
   2888  21da		       45 ed		      eor	rand16
   2889  21dc					      endif
   2890  21dc		       29 07		      AND	#7
   2891  21de		       85 a0		      STA	_T5_AP_Dir
   2892  21e0				   .
   2893  21e0							;;line 944;; 
   2894  21e0
   2895  21e0				   .
   2896  21e0							;;line 945;; 
   2897  21e0
   2898  21e0				   .
   2899  21e0							;;line 946;; 
   2900  21e0
   2901  21e0				   .
   2902  21e0							;;line 947;; 
   2903  21e0
   2904  21e0				   .
   2905  21e0							;;line 948;; 
   2906  21e0
   2907  21e0				   .
   2908  21e0							;;line 949;; 
   2909  21e0
   2910  21e0				   .
   2911  21e0							;;line 950;; 
   2912  21e0
   2913  21e0				   .L0141		;;line 951;;  if _T5_AP_Dir = _AP_Mem_Dir then _T5_AP_Dir = _T5_AP_Dir  +   ( rand & 1 )   +	( rand & 3 )   +  2  :	if _T5_AP_Dir  >  7 then _T5_AP_Dir = _T5_AP_Dir  -  8
   2914  21e0
   2915  21e0		       a5 a0		      LDA	_T5_AP_Dir
   2916  21e2		       c5 db		      CMP	_AP_Mem_Dir
   2917  21e4		       d0 40		      BNE	.skipL0141
   2918  21e6				   .condpart22
   2919  21e6							; complex statement detected
   2920  21e6		       a5 a0		      LDA	_T5_AP_Dir
   2921  21e8		       48		      PHA
   2922  21e9		       a5 a2		      lda	rand
   2923  21eb		       4a		      lsr
   2924  21ec					      ifconst	rand16
   2925  21ec		       26 ed		      rol	rand16
   2926  21ee					      endif
   2927  21ee		       90 02		      bcc	*+4
   2928  21f0		       49 b4		      eor	#$B4
   2929  21f2		       85 a2		      sta	rand
   2930  21f4					      ifconst	rand16
   2931  21f4		       45 ed		      eor	rand16
   2932  21f6					      endif
   2933  21f6		       29 01		      AND	#1
   2934  21f8		       ba		      TSX
   2935  21f9		       e8		      INX
   2936  21fa		       9a		      TXS
   2937  21fb		       18		      CLC
   2938  21fc		       75 00		      ADC	$00,x
   2939  21fe		       48		      PHA
   2940  21ff		       a5 a2		      lda	rand
   2941  2201		       4a		      lsr
   2942  2202					      ifconst	rand16
   2943  2202		       26 ed		      rol	rand16
   2944  2204					      endif
   2945  2204		       90 02		      bcc	*+4
   2946  2206		       49 b4		      eor	#$B4
   2947  2208		       85 a2		      sta	rand
   2948  220a					      ifconst	rand16
   2949  220a		       45 ed		      eor	rand16
   2950  220c					      endif
   2951  220c		       29 03		      AND	#3
   2952  220e		       ba		      TSX
   2953  220f		       e8		      INX
   2954  2210		       9a		      TXS
   2955  2211		       18		      CLC
   2956  2212		       75 00		      ADC	$00,x
   2957  2214		       18		      CLC
   2958  2215		       69 02		      ADC	#2
   2959  2217		       85 a0		      STA	_T5_AP_Dir
   2960  2219		       a9 07		      LDA	#7
   2961  221b		       c5 a0		      CMP	_T5_AP_Dir
   2962  221d		       b0 07		      BCS	.skip22then
   2963  221f				   .condpart23
   2964  221f		       a5 a0		      LDA	_T5_AP_Dir
   2965  2221		       38		      SEC
   2966  2222		       e9 08		      SBC	#8
   2967  2224		       85 a0		      STA	_T5_AP_Dir
   2968  2226				   .skip22then
   2969  2226				   .skipL0141
   2970  2226				   .
   2971  2226							;;line 952;; 
   2972  2226
   2973  2226				   .
   2974  2226							;;line 953;; 
   2975  2226
   2976  2226				   .
   2977  2226							;;line 954;; 
   2978  2226
   2979  2226				   .
   2980  2226							;;line 955;; 
   2981  2226
   2982  2226				   .L0142		;;line 956;;  if _Main_CharY  >  85 then _T5_AP_Dir = 1  :  temp6 = rand  :  if temp6	>  128 then _T5_AP_Dir = 7
   2983  2226
   2984  2226		       a9 55		      LDA	#85
   2985  2228		       c5 86		      CMP	_Main_CharY
   2986  222a		       b0 1d		      BCS	.skipL0142
   2987  222c				   .condpart24
   2988  222c		       a9 01		      LDA	#1
   2989  222e		       85 a0		      STA	_T5_AP_Dir
   2990  2230		       a5 a2		      lda	rand
   2991  2232		       4a		      lsr
   2992  2233					      ifconst	rand16
   2993  2233		       26 ed		      rol	rand16
   2994  2235					      endif
   2995  2235		       90 02		      bcc	*+4
   2996  2237		       49 b4		      eor	#$B4
   2997  2239		       85 a2		      sta	rand
   2998  223b					      ifconst	rand16
   2999  223b		       45 ed		      eor	rand16
   3000  223d					      endif
   3001  223d		       85 a1		      STA	temp6
   3002  223f		       a9 80		      LDA	#128
   3003  2241		       c5 a1		      CMP	temp6
   3004  2243		       b0 04		      BCS	.skip24then
   3005  2245				   .condpart25
   3006  2245		       a9 07		      LDA	#7
   3007  2247		       85 a0		      STA	_T5_AP_Dir
   3008  2249				   .skip24then
   3009  2249				   .skipL0142
   3010  2249				   .
   3011  2249							;;line 957;; 
   3012  2249
   3013  2249				   .
   3014  2249							;;line 958;; 
   3015  2249
   3016  2249				   .
   3017  2249							;;line 959;; 
   3018  2249
   3019  2249				   .
   3020  2249							;;line 960;; 
   3021  2249
   3022  2249				   .L0143		;;line 961;;  if _Main_CharY  <  12 then _T5_AP_Dir = 3  :  temp6 = rand  :  if temp6	>  128 then _T5_AP_Dir = 5
   3023  2249
   3024  2249		       a5 86		      LDA	_Main_CharY
   3025  224b		       c9 0c		      CMP	#12
   3026  224d		       b0 1d		      BCS	.skipL0143
   3027  224f				   .condpart26
   3028  224f		       a9 03		      LDA	#3
   3029  2251		       85 a0		      STA	_T5_AP_Dir
   3030  2253		       a5 a2		      lda	rand
   3031  2255		       4a		      lsr
   3032  2256					      ifconst	rand16
   3033  2256		       26 ed		      rol	rand16
   3034  2258					      endif
   3035  2258		       90 02		      bcc	*+4
   3036  225a		       49 b4		      eor	#$B4
   3037  225c		       85 a2		      sta	rand
   3038  225e					      ifconst	rand16
   3039  225e		       45 ed		      eor	rand16
   3040  2260					      endif
   3041  2260		       85 a1		      STA	temp6
   3042  2262		       a9 80		      LDA	#128
   3043  2264		       c5 a1		      CMP	temp6
   3044  2266		       b0 04		      BCS	.skip26then
   3045  2268				   .condpart27
   3046  2268		       a9 05		      LDA	#5
   3047  226a		       85 a0		      STA	_T5_AP_Dir
   3048  226c				   .skip26then
   3049  226c				   .skipL0143
   3050  226c				   .
   3051  226c							;;line 962;; 
   3052  226c
   3053  226c				   .
   3054  226c							;;line 963;; 
   3055  226c
   3056  226c				   .
   3057  226c							;;line 964;; 
   3058  226c
   3059  226c				   .
   3060  226c							;;line 965;; 
   3061  226c
   3062  226c				   .L0144		;;line 966;;  if _Main_CharX  >  148 then _T5_AP_Dir = 7  :  temp6 = rand  :  if temp6  >  128 then _T5_AP_Dir = 5
   3063  226c
   3064  226c		       a9 94		      LDA	#148
   3065  226e		       c5 81		      CMP	_Main_CharX
   3066  2270		       b0 1d		      BCS	.skipL0144
   3067  2272				   .condpart28
   3068  2272		       a9 07		      LDA	#7
   3069  2274		       85 a0		      STA	_T5_AP_Dir
   3070  2276		       a5 a2		      lda	rand
   3071  2278		       4a		      lsr
   3072  2279					      ifconst	rand16
   3073  2279		       26 ed		      rol	rand16
   3074  227b					      endif
   3075  227b		       90 02		      bcc	*+4
   3076  227d		       49 b4		      eor	#$B4
   3077  227f		       85 a2		      sta	rand
   3078  2281					      ifconst	rand16
   3079  2281		       45 ed		      eor	rand16
   3080  2283					      endif
   3081  2283		       85 a1		      STA	temp6
   3082  2285		       a9 80		      LDA	#128
   3083  2287		       c5 a1		      CMP	temp6
   3084  2289		       b0 04		      BCS	.skip28then
   3085  228b				   .condpart29
   3086  228b		       a9 05		      LDA	#5
   3087  228d		       85 a0		      STA	_T5_AP_Dir
   3088  228f				   .skip28then
   3089  228f				   .skipL0144
   3090  228f				   .
   3091  228f							;;line 967;; 
   3092  228f
   3093  228f				   .
   3094  228f							;;line 968;; 
   3095  228f
   3096  228f				   .
   3097  228f							;;line 969;; 
   3098  228f
   3099  228f				   .
   3100  228f							;;line 970;; 
   3101  228f
   3102  228f				   .L0145		;;line 971;;  if _Main_CharX  <  4 then _T5_AP_Dir = 1  :  temp6 = rand  :  if temp6  >  128 then _T5_AP_Dir = 3
   3103  228f
   3104  228f		       a5 81		      LDA	_Main_CharX
   3105  2291		       c9 04		      CMP	#4
   3106  2293		       b0 1d		      BCS	.skipL0145
   3107  2295				   .condpart30
   3108  2295		       a9 01		      LDA	#1
   3109  2297		       85 a0		      STA	_T5_AP_Dir
   3110  2299		       a5 a2		      lda	rand
   3111  229b		       4a		      lsr
   3112  229c					      ifconst	rand16
   3113  229c		       26 ed		      rol	rand16
   3114  229e					      endif
   3115  229e		       90 02		      bcc	*+4
   3116  22a0		       49 b4		      eor	#$B4
   3117  22a2		       85 a2		      sta	rand
   3118  22a4					      ifconst	rand16
   3119  22a4		       45 ed		      eor	rand16
   3120  22a6					      endif
   3121  22a6		       85 a1		      STA	temp6
   3122  22a8		       a9 80		      LDA	#128
   3123  22aa		       c5 a1		      CMP	temp6
   3124  22ac		       b0 04		      BCS	.skip30then
   3125  22ae				   .condpart31
   3126  22ae		       a9 03		      LDA	#3
   3127  22b0		       85 a0		      STA	_T5_AP_Dir
   3128  22b2				   .skip30then
   3129  22b2				   .skipL0145
   3130  22b2				   .
   3131  22b2							;;line 972;; 
   3132  22b2
   3133  22b2				   .
   3134  22b2							;;line 973;; 
   3135  22b2
   3136  22b2				   .
   3137  22b2							;;line 974;; 
   3138  22b2
   3139  22b2				   .
   3140  22b2							;;line 975;; 
   3141  22b2
   3142  22b2				   .
   3143  22b2							;;line 976;; 
   3144  22b2
   3145  22b2				   .
   3146  22b2							;;line 977;; 
   3147  22b2
   3148  22b2				   .L0146		;;line 978;;  _AP_Mem_Dir = _T5_AP_Dir  +  4  :  if _AP_Mem_Dir  >  7 then _AP_Mem_Dir = _AP_Mem_Dir  -  8
   3149  22b2
   3150  22b2		       a5 a0		      LDA	_T5_AP_Dir
   3151  22b4		       18		      CLC
   3152  22b5		       69 04		      ADC	#4
   3153  22b7		       85 db		      STA	_AP_Mem_Dir
   3154  22b9		       a9 07		      LDA	#7
   3155  22bb		       c5 db		      CMP	_AP_Mem_Dir
   3156  22bd		       b0 07		      BCS	.skipL0146
   3157  22bf				   .condpart32
   3158  22bf		       a5 db		      LDA	_AP_Mem_Dir
   3159  22c1		       38		      SEC
   3160  22c2		       e9 08		      SBC	#8
   3161  22c4		       85 db		      STA	_AP_Mem_Dir
   3162  22c6				   .skipL0146
   3163  22c6				   .
   3164  22c6							;;line 979;; 
   3165  22c6
   3166  22c6				   .
   3167  22c6							;;line 980;; 
   3168  22c6
   3169  22c6				   .
   3170  22c6							;;line 981;; 
   3171  22c6
   3172  22c6				   .
   3173  22c6							;;line 982;; 
   3174  22c6
   3175  22c6				   .L0147		;;line 983;;  _AP_Dir_Counter = 0  :  _BitOp_P0_M1_Dir = _BitOp_P0_M1_Dir  &  %11110000
   3176  22c6
   3177  22c6		       a9 00		      LDA	#0
   3178  22c8		       85 df		      STA	_AP_Dir_Counter
   3179  22ca		       a5 da		      LDA	_BitOp_P0_M1_Dir
   3180  22cc		       29 f0		      AND	#%11110000
   3181  22ce		       85 da		      STA	_BitOp_P0_M1_Dir
   3182  22d0				   .
   3183  22d0							;;line 984;; 
   3184  22d0
   3185  22d0				   .
   3186  22d0							;;line 985;; 
   3187  22d0
   3188  22d0				   .
   3189  22d0							;;line 986;; 
   3190  22d0
   3191  22d0				   .
   3192  22d0							;;line 987;; 
   3193  22d0
   3194  22d0				   .L0148		;;line 988;;  if _T5_AP_Dir = 0 then _Bit0_P0_Dir_Up{0} = 1
   3195  22d0
   3196  22d0		       a5 a0		      LDA	_T5_AP_Dir
   3197  22d2		       c9 00		      CMP	#0
   3198  22d4		       d0 06		      BNE	.skipL0148
   3199  22d6				   .condpart33
   3200  22d6		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3201  22d8		       09 01		      ORA	#1
   3202  22da		       85 da		      STA	_Bit0_P0_Dir_Up
   3203  22dc				   .skipL0148
   3204  22dc				   .L0149		;;line 989;;  if _T5_AP_Dir = 1 then _Bit0_P0_Dir_Up{0} = 1  :  _Bit3_P0_Dir_Right{3} = 1
   3205  22dc
   3206  22dc		       a5 a0		      LDA	_T5_AP_Dir
   3207  22de		       c9 01		      CMP	#1
   3208  22e0		       d0 0c		      BNE	.skipL0149
   3209  22e2				   .condpart34
   3210  22e2		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3211  22e4		       09 01		      ORA	#1
   3212  22e6		       85 da		      STA	_Bit0_P0_Dir_Up
   3213  22e8		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3214  22ea		       09 08		      ORA	#8
   3215  22ec		       85 da		      STA	_Bit3_P0_Dir_Right
   3216  22ee				   .skipL0149
   3217  22ee				   .L0150		;;line 990;;  if _T5_AP_Dir = 2 then _Bit3_P0_Dir_Right{3} = 1
   3218  22ee
   3219  22ee		       a5 a0		      LDA	_T5_AP_Dir
   3220  22f0		       c9 02		      CMP	#2
   3221  22f2		       d0 06		      BNE	.skipL0150
   3222  22f4				   .condpart35
   3223  22f4		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3224  22f6		       09 08		      ORA	#8
   3225  22f8		       85 da		      STA	_Bit3_P0_Dir_Right
   3226  22fa				   .skipL0150
   3227  22fa				   .L0151		;;line 991;;  if _T5_AP_Dir = 3 then _Bit1_P0_Dir_Down{1} = 1	:  _Bit3_P0_Dir_Right{3} = 1
   3228  22fa
   3229  22fa		       a5 a0		      LDA	_T5_AP_Dir
   3230  22fc		       c9 03		      CMP	#3
   3231  22fe		       d0 0c		      BNE	.skipL0151
   3232  2300				   .condpart36
   3233  2300		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3234  2302		       09 02		      ORA	#2
   3235  2304		       85 da		      STA	_Bit1_P0_Dir_Down
   3236  2306		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3237  2308		       09 08		      ORA	#8
   3238  230a		       85 da		      STA	_Bit3_P0_Dir_Right
   3239  230c				   .skipL0151
   3240  230c				   .L0152		;;line 992;;  if _T5_AP_Dir = 4 then _Bit1_P0_Dir_Down{1} = 1
   3241  230c
   3242  230c		       a5 a0		      LDA	_T5_AP_Dir
   3243  230e		       c9 04		      CMP	#4
   3244  2310		       d0 06		      BNE	.skipL0152
   3245  2312				   .condpart37
   3246  2312		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3247  2314		       09 02		      ORA	#2
   3248  2316		       85 da		      STA	_Bit1_P0_Dir_Down
   3249  2318				   .skipL0152
   3250  2318				   .L0153		;;line 993;;  if _T5_AP_Dir = 5 then _Bit1_P0_Dir_Down{1} = 1	:  _Bit2_P0_Dir_Left{2} = 1
   3251  2318
   3252  2318		       a5 a0		      LDA	_T5_AP_Dir
   3253  231a		       c9 05		      CMP	#5
   3254  231c		       d0 0c		      BNE	.skipL0153
   3255  231e				   .condpart38
   3256  231e		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3257  2320		       09 02		      ORA	#2
   3258  2322		       85 da		      STA	_Bit1_P0_Dir_Down
   3259  2324		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3260  2326		       09 04		      ORA	#4
   3261  2328		       85 da		      STA	_Bit2_P0_Dir_Left
   3262  232a				   .skipL0153
   3263  232a				   .L0154		;;line 994;;  if _T5_AP_Dir = 6 then _Bit2_P0_Dir_Left{2} = 1
   3264  232a
   3265  232a		       a5 a0		      LDA	_T5_AP_Dir
   3266  232c		       c9 06		      CMP	#6
   3267  232e		       d0 06		      BNE	.skipL0154
   3268  2330				   .condpart39
   3269  2330		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3270  2332		       09 04		      ORA	#4
   3271  2334		       85 da		      STA	_Bit2_P0_Dir_Left
   3272  2336				   .skipL0154
   3273  2336				   .L0155		;;line 995;;  if _T5_AP_Dir = 7 then _Bit0_P0_Dir_Up{0} = 1  :  _Bit2_P0_Dir_Left{2} = 1
   3274  2336
   3275  2336		       a5 a0		      LDA	_T5_AP_Dir
   3276  2338		       c9 07		      CMP	#7
   3277  233a		       d0 0c		      BNE	.skipL0155
   3278  233c				   .condpart40
   3279  233c		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3280  233e		       09 01		      ORA	#1
   3281  2340		       85 da		      STA	_Bit0_P0_Dir_Up
   3282  2342		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3283  2344		       09 04		      ORA	#4
   3284  2346		       85 da		      STA	_Bit2_P0_Dir_Left
   3285  2348				   .skipL0155
   3286  2348				   .
   3287  2348							;;line 996;; 
   3288  2348
   3289  2348				   .__AP_Skip_New_Dir
   3290  2348							;;line 997;; __AP_Skip_New_Dir
   3291  2348
   3292  2348				   .
   3293  2348							;;line 998;; 
   3294  2348
   3295  2348				   .
   3296  2348							;;line 999;; 
   3297  2348
   3298  2348				   .
   3299  2348							;;line 1000;; 
   3300  2348
   3301  2348				   .
   3302  2348							;;line 1001;; 
   3303  2348
   3304  2348				   .
   3305  2348							;;line 1002;; 
   3306  2348
   3307  2348				   .
   3308  2348							;;line 1003;; 
   3309  2348
   3310  2348				   .
   3311  2348							;;line 1004;; 
   3312  2348
   3313  2348				   .
   3314  2348							;;line 1005;; 
   3315  2348
   3316  2348				   .
   3317  2348							;;line 1006;; 
   3318  2348
   3319  2348				   .
   3320  2348							;;line 1007;; 
   3321  2348
   3322  2348				   .
   3323  2348							;;line 1008;; 
   3324  2348
   3325  2348				   .L0156		;;line 1009;;	if _Bit3_Auto_Play{3}  &&  _Bit0_P0_Dir_Up{0} then goto __AP_Move_Up
   3326  2348
   3327  2348		       a5 ec		      LDA	_Bit3_Auto_Play
   3328  234a		       29 08		      AND	#8
   3329  234c		       f0 08		      BEQ	.skipL0156
   3330  234e				   .condpart41
   3331  234e		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3332  2350		       4a		      LSR
   3333  2351		       90 03		      BCC	.skip41then
   3334  2353				   .condpart42
   3335  2353		       4c 66 33 	      jmp	.__AP_Move_Up
   3336  2356
   3337  2356				   .skip41then
   3338  2356				   .skipL0156
   3339  2356				   .
   3340  2356							;;line 1010;; 
   3341  2356
   3342  2356				   .
   3343  2356							;;line 1011;; 
   3344  2356
   3345  2356				   .
   3346  2356							;;line 1012;; 
   3347  2356
   3348  2356				   .
   3349  2356							;;line 1013;; 
   3350  2356
   3351  2356				   .L0157		;;line 1014;;	if !joy0up then goto __Skip_Joy0_Up
   3352  2356
   3353  2356		       a9 10		      lda	#$10
   3354  2358		       2c 80 02 	      bit	SWCHA
   3355  235b		       f0 03		      BEQ	.skipL0157
   3356  235d				   .condpart43
   3357  235d		       4c 32 34 	      jmp	.__Skip_Joy0_Up
   3358  2360
   3359  2360				   .skipL0157
   3360  2360				   .
   3361  2360							;;line 1015;; 
   3362  2360
   3363  2360				   .
   3364  2360							;;line 1016;; 
   3365  2360
   3366  2360				   .
   3367  2360							;;line 1017;; 
   3368  2360
   3369  2360				   .
   3370  2360							;;line 1018;; 
   3371  2360
   3372  2360				   .L0158		;;line 1019;;	_Bit0_P0_Dir_Up{0} = 1
   3373  2360
   3374  2360		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3375  2362		       09 01		      ORA	#1
   3376  2364		       85 da		      STA	_Bit0_P0_Dir_Up
   3377  2366				   .
   3378  2366							;;line 1020;; 
   3379  2366
   3380  2366				   .__AP_Move_Up
   3381  2366							;;line 1021;; __AP_Move_Up
   3382  2366
   3383  2366				   .
   3384  2366							;;line 1022;; 
   3385  2366
   3386  2366				   .
   3387  2366							;;line 1023;; 
   3388  2366
   3389  2366				   .
   3390  2366							;;line 1024;; 
   3391  2366
   3392  2366				   .
   3393  2366							;;line 1025;; 
   3394  2366
   3395  2366				   .
   3396  2366							;;line 1026;; 
   3397  2366
   3398  2366				   .L0159		;;line 1027;;	temp5 =  ( _Main_CharX - 10 )  / 4
   3399  2366
   3400  2366							; complex statement detected
   3401  2366		       a5 81		      LDA	_Main_CharX
   3402  2368		       38		      SEC
   3403  2369		       e9 0a		      SBC	#10
   3404  236b		       4a		      lsr
   3405  236c		       4a		      lsr
   3406  236d		       85 a0		      STA	temp5
   3407  236f				   .
   3408  236f							;;line 1028;; 
   3409  236f
   3410  236f				   .L0160		;;line 1029;;	temp4 =  ( _Main_CharX - 17 )  / 4
   3411  236f
   3412  236f							; complex statement detected
   3413  236f		       a5 81		      LDA	_Main_CharX
   3414  2371		       38		      SEC
   3415  2372		       e9 11		      SBC	#17
   3416  2374		       4a		      lsr
   3417  2375		       4a		      lsr
   3418  2376		       85 9f		      STA	temp4
   3419  2378				   .
   3420  2378							;;line 1030;; 
   3421  2378
   3422  2378				   .L0161		;;line 1031;;	temp3 = temp5  -  1
   3423  2378
   3424  2378		       a5 a0		      LDA	temp5
   3425  237a		       38		      SEC
   3426  237b		       e9 01		      SBC	#1
   3427  237d		       85 9e		      STA	temp3
   3428  237f				   .
   3429  237f							;;line 1032;; 
   3430  237f
   3431  237f				   .L0162		;;line 1033;;	temp6 =  ( _Main_CharY - 9 )  / 8
   3432  237f
   3433  237f							; complex statement detected
   3434  237f		       a5 86		      LDA	_Main_CharY
   3435  2381		       38		      SEC
   3436  2382		       e9 09		      SBC	#9
   3437  2384		       4a		      lsr
   3438  2385		       4a		      lsr
   3439  2386		       4a		      lsr
   3440  2387		       85 a1		      STA	temp6
   3441  2389				   .
   3442  2389							;;line 1034;; 
   3443  2389
   3444  2389				   .L0163		;;line 1035;;	if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   3445  2389
   3446  2389		       a5 a0		      LDA	temp5
   3447  238b		       c9 22		      CMP	#34
   3448  238d		       b0 21		      BCS	.skipL0163
   3449  238f				   .condpart44
   3450  238f		       a5 a0		      LDA	temp5
   3451  2391		       a4 a1		      LDY	temp6
   3452  2393		       85 ee		      sta	temp7
   3453  2395		       a9 33		      lda	#>(ret_point3-1)
   3454  2397		       48		      pha
   3455  2398		       a9 aa		      lda	#<(ret_point3-1)
   3456  239a		       48		      pha
   3457  239b		       a9 f2		      lda	#>(pfread-1)
   3458  239d		       48		      pha
   3459  239e		       a9 ab		      lda	#<(pfread-1)
   3460  23a0		       48		      pha
   3461  23a1		       a5 ee		      lda	temp7
   3462  23a3		       48		      pha
   3463  23a4		       8a		      txa
   3464  23a5		       48		      pha
   3465  23a6		       a2 08		      ldx	#8
   3466  23a8		       4c eb ff 	      jmp	BS_jsr
   3467  23ab				   ret_point3
   3468  23ab		       d0 03		      BNE	.skip44then
   3469  23ad				   .condpart45
   3470  23ad		       4c 32 34 	      jmp	.__Skip_Joy0_Up
   3471  23b0
   3472  23b0				   .skip44then
   3473  23b0				   .skipL0163
   3474  23b0				   .
   3475  23b0							;;line 1036;; 
   3476  23b0
   3477  23b0				   .L0164		;;line 1037;;	if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   3478  23b0
   3479  23b0		       a5 9f		      LDA	temp4
   3480  23b2		       c9 22		      CMP	#34
   3481  23b4		       b0 21		      BCS	.skipL0164
   3482  23b6				   .condpart46
   3483  23b6		       a5 9f		      LDA	temp4
   3484  23b8		       a4 a1		      LDY	temp6
   3485  23ba		       85 ee		      sta	temp7
   3486  23bc		       a9 33		      lda	#>(ret_point4-1)
   3487  23be		       48		      pha
   3488  23bf		       a9 d1		      lda	#<(ret_point4-1)
   3489  23c1		       48		      pha
   3490  23c2		       a9 f2		      lda	#>(pfread-1)
   3491  23c4		       48		      pha
   3492  23c5		       a9 ab		      lda	#<(pfread-1)
   3493  23c7		       48		      pha
   3494  23c8		       a5 ee		      lda	temp7
   3495  23ca		       48		      pha
   3496  23cb		       8a		      txa
   3497  23cc		       48		      pha
   3498  23cd		       a2 08		      ldx	#8
   3499  23cf		       4c eb ff 	      jmp	BS_jsr
   3500  23d2				   ret_point4
   3501  23d2		       d0 03		      BNE	.skip46then
   3502  23d4				   .condpart47
   3503  23d4		       4c 32 34 	      jmp	.__Skip_Joy0_Up
   3504  23d7
   3505  23d7				   .skip46then
   3506  23d7				   .skipL0164
   3507  23d7				   .
   3508  23d7							;;line 1038;; 
   3509  23d7
   3510  23d7				   .L0165		;;line 1039;;	if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   3511  23d7
   3512  23d7		       a5 9e		      LDA	temp3
   3513  23d9		       c9 22		      CMP	#34
   3514  23db		       b0 21		      BCS	.skipL0165
   3515  23dd				   .condpart48
   3516  23dd		       a5 9e		      LDA	temp3
   3517  23df		       a4 a1		      LDY	temp6
   3518  23e1		       85 ee		      sta	temp7
   3519  23e3		       a9 33		      lda	#>(ret_point5-1)
   3520  23e5		       48		      pha
   3521  23e6		       a9 f8		      lda	#<(ret_point5-1)
   3522  23e8		       48		      pha
   3523  23e9		       a9 f2		      lda	#>(pfread-1)
   3524  23eb		       48		      pha
   3525  23ec		       a9 ab		      lda	#<(pfread-1)
   3526  23ee		       48		      pha
   3527  23ef		       a5 ee		      lda	temp7
   3528  23f1		       48		      pha
   3529  23f2		       8a		      txa
   3530  23f3		       48		      pha
   3531  23f4		       a2 08		      ldx	#8
   3532  23f6		       4c eb ff 	      jmp	BS_jsr
   3533  23f9				   ret_point5
   3534  23f9		       d0 03		      BNE	.skip48then
   3535  23fb				   .condpart49
   3536  23fb		       4c 32 34 	      jmp	.__Skip_Joy0_Up
   3537  23fe
   3538  23fe				   .skip48then
   3539  23fe				   .skipL0165
   3540  23fe				   .
   3541  23fe							;;line 1040;; 
   3542  23fe
   3543  23fe				   .
   3544  23fe							;;line 1041;; 
   3545  23fe
   3546  23fe				   .
   3547  23fe							;;line 1042;; 
   3548  23fe
   3549  23fe				   .
   3550  23fe							;;line 1043;; 
   3551  23fe
   3552  23fe				   .L0166		;;line 1044;;	_Main_CharY = _Main_CharY  -  1  :  pfscroll downdown
   3553  23fe
   3554  23fe		       c6 86		      DEC	_Main_CharY
   3555  2400		       a9 08		      LDA	#8
   3556  2402		       85 ee		      sta	temp7
   3557  2404		       a9 34		      lda	#>(ret_point6-1)
   3558  2406		       48		      pha
   3559  2407		       a9 19		      lda	#<(ret_point6-1)
   3560  2409		       48		      pha
   3561  240a		       a9 f3		      lda	#>(pfscroll-1)
   3562  240c		       48		      pha
   3563  240d		       a9 63		      lda	#<(pfscroll-1)
   3564  240f		       48		      pha
   3565  2410		       a5 ee		      lda	temp7
   3566  2412		       48		      pha
   3567  2413		       8a		      txa
   3568  2414		       48		      pha
   3569  2415		       a2 08		      ldx	#8
   3570  2417		       4c eb ff 	      jmp	BS_jsr
   3571  241a				   ret_point6
   3572  241a				   .L0167		;;line 1045;;	gosub _P_U bank5
   3573  241a
   3574  241a		       85 ee		      sta	temp7
   3575  241c		       a9 34		      lda	#>(ret_point7-1)
   3576  241e		       48		      pha
   3577  241f		       a9 31		      lda	#<(ret_point7-1)
   3578  2421		       48		      pha
   3579  2422		       a9 8f		      lda	#>(._P_U-1)
   3580  2424		       48		      pha
   3581  2425		       a9 ff		      lda	#<(._P_U-1)
   3582  2427		       48		      pha
   3583  2428		       a5 ee		      lda	temp7
   3584  242a		       48		      pha
   3585  242b		       8a		      txa
   3586  242c		       48		      pha
   3587  242d		       a2 05		      ldx	#5
   3588  242f		       4c eb ff 	      jmp	BS_jsr
   3589  2432				   ret_point7
   3590  2432				   .
   3591  2432							;;line 1046;; 
   3592  2432
   3593  2432				   .__Skip_Joy0_Up
   3594  2432							;;line 1047;; __Skip_Joy0_Up
   3595  2432
   3596  2432				   .
   3597  2432							;;line 1048;; 
   3598  2432
   3599  2432				   .
   3600  2432							;;line 1049;; 
   3601  2432
   3602  2432				   .
   3603  2432							;;line 1050;; 
   3604  2432
   3605  2432				   .
   3606  2432							;;line 1051;; 
   3607  2432
   3608  2432				   .
   3609  2432							;;line 1052;; 
   3610  2432
   3611  2432				   .
   3612  2432							;;line 1053;; 
   3613  2432
   3614  2432				   .
   3615  2432							;;line 1054;; 
   3616  2432
   3617  2432				   .
   3618  2432							;;line 1055;; 
   3619  2432
   3620  2432				   .
   3621  2432							;;line 1056;; 
   3622  2432
   3623  2432				   .
   3624  2432							;;line 1057;; 
   3625  2432
   3626  2432				   .L0168		;;line 1058;;	if _Bit3_Auto_Play{3}  &&  _Bit1_P0_Dir_Down{1} then goto __AP_Move_Down
   3627  2432
   3628  2432		       a5 ec		      LDA	_Bit3_Auto_Play
   3629  2434		       29 08		      AND	#8
   3630  2436		       f0 09		      BEQ	.skipL0168
   3631  2438				   .condpart50
   3632  2438		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3633  243a		       29 02		      AND	#2
   3634  243c		       f0 03		      BEQ	.skip50then
   3635  243e				   .condpart51
   3636  243e		       4c 51 34 	      jmp	.__AP_Move_Down
   3637  2441
   3638  2441				   .skip50then
   3639  2441				   .skipL0168
   3640  2441				   .
   3641  2441							;;line 1059;; 
   3642  2441
   3643  2441				   .
   3644  2441							;;line 1060;; 
   3645  2441
   3646  2441				   .
   3647  2441							;;line 1061;; 
   3648  2441
   3649  2441				   .
   3650  2441							;;line 1062;; 
   3651  2441
   3652  2441				   .L0169		;;line 1063;;	if !joy0down then goto __Skip_Joy0_Down
   3653  2441
   3654  2441		       a9 20		      lda	#$20
   3655  2443		       2c 80 02 	      bit	SWCHA
   3656  2446		       f0 03		      BEQ	.skipL0169
   3657  2448				   .condpart52
   3658  2448		       4c 1d 35 	      jmp	.__Skip_Joy0_Down
   3659  244b
   3660  244b				   .skipL0169
   3661  244b				   .
   3662  244b							;;line 1064;; 
   3663  244b
   3664  244b				   .
   3665  244b							;;line 1065;; 
   3666  244b
   3667  244b				   .
   3668  244b							;;line 1066;; 
   3669  244b
   3670  244b				   .
   3671  244b							;;line 1067;; 
   3672  244b
   3673  244b				   .L0170		;;line 1068;;	_Bit1_P0_Dir_Down{1} = 1
   3674  244b
   3675  244b		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3676  244d		       09 02		      ORA	#2
   3677  244f		       85 da		      STA	_Bit1_P0_Dir_Down
   3678  2451				   .
   3679  2451							;;line 1069;; 
   3680  2451
   3681  2451				   .__AP_Move_Down
   3682  2451							;;line 1070;; __AP_Move_Down
   3683  2451
   3684  2451				   .
   3685  2451							;;line 1071;; 
   3686  2451
   3687  2451				   .
   3688  2451							;;line 1072;; 
   3689  2451
   3690  2451				   .
   3691  2451							;;line 1073;; 
   3692  2451
   3693  2451				   .
   3694  2451							;;line 1074;; 
   3695  2451
   3696  2451				   .
   3697  2451							;;line 1075;; 
   3698  2451
   3699  2451				   .L0171		;;line 1076;;	temp5 =  ( _Main_CharX - 10 )  / 4
   3700  2451
   3701  2451							; complex statement detected
   3702  2451		       a5 81		      LDA	_Main_CharX
   3703  2453		       38		      SEC
   3704  2454		       e9 0a		      SBC	#10
   3705  2456		       4a		      lsr
   3706  2457		       4a		      lsr
   3707  2458		       85 a0		      STA	temp5
   3708  245a				   .
   3709  245a							;;line 1077;; 
   3710  245a
   3711  245a				   .L0172		;;line 1078;;	temp4 =  ( _Main_CharX - 17 )  / 4
   3712  245a
   3713  245a							; complex statement detected
   3714  245a		       a5 81		      LDA	_Main_CharX
   3715  245c		       38		      SEC
   3716  245d		       e9 11		      SBC	#17
   3717  245f		       4a		      lsr
   3718  2460		       4a		      lsr
   3719  2461		       85 9f		      STA	temp4
   3720  2463				   .
   3721  2463							;;line 1079;; 
   3722  2463
   3723  2463				   .L0173		;;line 1080;;	temp3 = temp5  -  1
   3724  2463
   3725  2463		       a5 a0		      LDA	temp5
   3726  2465		       38		      SEC
   3727  2466		       e9 01		      SBC	#1
   3728  2468		       85 9e		      STA	temp3
   3729  246a				   .
   3730  246a							;;line 1081;; 
   3731  246a
   3732  246a				   .L0174		;;line 1082;;	temp6 =  ( _Main_CharY + 1 )  / 8
   3733  246a
   3734  246a							; complex statement detected
   3735  246a		       a5 86		      LDA	_Main_CharY
   3736  246c		       18		      CLC
   3737  246d		       69 01		      ADC	#1
   3738  246f		       4a		      lsr
   3739  2470		       4a		      lsr
   3740  2471		       4a		      lsr
   3741  2472		       85 a1		      STA	temp6
   3742  2474				   .
   3743  2474							;;line 1083;; 
   3744  2474
   3745  2474				   .L0175		;;line 1084;;	if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   3746  2474
   3747  2474		       a5 a0		      LDA	temp5
   3748  2476		       c9 22		      CMP	#34
   3749  2478		       b0 21		      BCS	.skipL0175
   3750  247a				   .condpart53
   3751  247a		       a5 a0		      LDA	temp5
   3752  247c		       a4 a1		      LDY	temp6
   3753  247e		       85 ee		      sta	temp7
   3754  2480		       a9 34		      lda	#>(ret_point8-1)
   3755  2482		       48		      pha
   3756  2483		       a9 95		      lda	#<(ret_point8-1)
   3757  2485		       48		      pha
   3758  2486		       a9 f2		      lda	#>(pfread-1)
   3759  2488		       48		      pha
   3760  2489		       a9 ab		      lda	#<(pfread-1)
   3761  248b		       48		      pha
   3762  248c		       a5 ee		      lda	temp7
   3763  248e		       48		      pha
   3764  248f		       8a		      txa
   3765  2490		       48		      pha
   3766  2491		       a2 08		      ldx	#8
   3767  2493		       4c eb ff 	      jmp	BS_jsr
   3768  2496				   ret_point8
   3769  2496		       d0 03		      BNE	.skip53then
   3770  2498				   .condpart54
   3771  2498		       4c 1d 35 	      jmp	.__Skip_Joy0_Down
   3772  249b
   3773  249b				   .skip53then
   3774  249b				   .skipL0175
   3775  249b				   .
   3776  249b							;;line 1085;; 
   3777  249b
   3778  249b				   .L0176		;;line 1086;;	if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   3779  249b
   3780  249b		       a5 9f		      LDA	temp4
   3781  249d		       c9 22		      CMP	#34
   3782  249f		       b0 21		      BCS	.skipL0176
   3783  24a1				   .condpart55
   3784  24a1		       a5 9f		      LDA	temp4
   3785  24a3		       a4 a1		      LDY	temp6
   3786  24a5		       85 ee		      sta	temp7
   3787  24a7		       a9 34		      lda	#>(ret_point9-1)
   3788  24a9		       48		      pha
   3789  24aa		       a9 bc		      lda	#<(ret_point9-1)
   3790  24ac		       48		      pha
   3791  24ad		       a9 f2		      lda	#>(pfread-1)
   3792  24af		       48		      pha
   3793  24b0		       a9 ab		      lda	#<(pfread-1)
   3794  24b2		       48		      pha
   3795  24b3		       a5 ee		      lda	temp7
   3796  24b5		       48		      pha
   3797  24b6		       8a		      txa
   3798  24b7		       48		      pha
   3799  24b8		       a2 08		      ldx	#8
   3800  24ba		       4c eb ff 	      jmp	BS_jsr
   3801  24bd				   ret_point9
   3802  24bd		       d0 03		      BNE	.skip55then
   3803  24bf				   .condpart56
   3804  24bf		       4c 1d 35 	      jmp	.__Skip_Joy0_Down
   3805  24c2
   3806  24c2				   .skip55then
   3807  24c2				   .skipL0176
   3808  24c2				   .
   3809  24c2							;;line 1087;; 
   3810  24c2
   3811  24c2				   .L0177		;;line 1088;;	if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   3812  24c2
   3813  24c2		       a5 9e		      LDA	temp3
   3814  24c4		       c9 22		      CMP	#34
   3815  24c6		       b0 21		      BCS	.skipL0177
   3816  24c8				   .condpart57
   3817  24c8		       a5 9e		      LDA	temp3
   3818  24ca		       a4 a1		      LDY	temp6
   3819  24cc		       85 ee		      sta	temp7
   3820  24ce		       a9 34		      lda	#>(ret_point10-1)
   3821  24d0		       48		      pha
   3822  24d1		       a9 e3		      lda	#<(ret_point10-1)
   3823  24d3		       48		      pha
   3824  24d4		       a9 f2		      lda	#>(pfread-1)
   3825  24d6		       48		      pha
   3826  24d7		       a9 ab		      lda	#<(pfread-1)
   3827  24d9		       48		      pha
   3828  24da		       a5 ee		      lda	temp7
   3829  24dc		       48		      pha
   3830  24dd		       8a		      txa
   3831  24de		       48		      pha
   3832  24df		       a2 08		      ldx	#8
   3833  24e1		       4c eb ff 	      jmp	BS_jsr
   3834  24e4				   ret_point10
   3835  24e4		       d0 03		      BNE	.skip57then
   3836  24e6				   .condpart58
   3837  24e6		       4c 1d 35 	      jmp	.__Skip_Joy0_Down
   3838  24e9
   3839  24e9				   .skip57then
   3840  24e9				   .skipL0177
   3841  24e9				   .
   3842  24e9							;;line 1089;; 
   3843  24e9
   3844  24e9				   .
   3845  24e9							;;line 1090;; 
   3846  24e9
   3847  24e9				   .
   3848  24e9							;;line 1091;; 
   3849  24e9
   3850  24e9				   .
   3851  24e9							;;line 1092;; 
   3852  24e9
   3853  24e9				   .L0178		;;line 1093;;	_Main_CharY = _Main_CharY  +  1  :  pfscroll upup
   3854  24e9
   3855  24e9		       e6 86		      INC	_Main_CharY
   3856  24eb		       a9 06		      LDA	#6
   3857  24ed		       85 ee		      sta	temp7
   3858  24ef		       a9 35		      lda	#>(ret_point11-1)
   3859  24f1		       48		      pha
   3860  24f2		       a9 04		      lda	#<(ret_point11-1)
   3861  24f4		       48		      pha
   3862  24f5		       a9 f3		      lda	#>(pfscroll-1)
   3863  24f7		       48		      pha
   3864  24f8		       a9 63		      lda	#<(pfscroll-1)
   3865  24fa		       48		      pha
   3866  24fb		       a5 ee		      lda	temp7
   3867  24fd		       48		      pha
   3868  24fe		       8a		      txa
   3869  24ff		       48		      pha
   3870  2500		       a2 08		      ldx	#8
   3871  2502		       4c eb ff 	      jmp	BS_jsr
   3872  2505				   ret_point11
   3873  2505				   .L0179		;;line 1094;;	gosub _P_D bank5
   3874  2505
   3875  2505		       85 ee		      sta	temp7
   3876  2507		       a9 35		      lda	#>(ret_point12-1)
   3877  2509		       48		      pha
   3878  250a		       a9 1c		      lda	#<(ret_point12-1)
   3879  250c		       48		      pha
   3880  250d		       a9 90		      lda	#>(._P_D-1)
   3881  250f		       48		      pha
   3882  2510		       a9 70		      lda	#<(._P_D-1)
   3883  2512		       48		      pha
   3884  2513		       a5 ee		      lda	temp7
   3885  2515		       48		      pha
   3886  2516		       8a		      txa
   3887  2517		       48		      pha
   3888  2518		       a2 05		      ldx	#5
   3889  251a		       4c eb ff 	      jmp	BS_jsr
   3890  251d				   ret_point12
   3891  251d				   .
   3892  251d							;;line 1095;; 
   3893  251d
   3894  251d				   .__Skip_Joy0_Down
   3895  251d							;;line 1096;; __Skip_Joy0_Down
   3896  251d
   3897  251d				   .
   3898  251d							;;line 1097;; 
   3899  251d
   3900  251d				   .
   3901  251d							;;line 1098;; 
   3902  251d
   3903  251d				   .
   3904  251d							;;line 1099;; 
   3905  251d
   3906  251d				   .
   3907  251d							;;line 1100;; 
   3908  251d
   3909  251d				   .
   3910  251d							;;line 1101;; 
   3911  251d
   3912  251d				   .
   3913  251d							;;line 1102;; 
   3914  251d
   3915  251d				   .
   3916  251d							;;line 1103;; 
   3917  251d
   3918  251d				   .
   3919  251d							;;line 1104;; 
   3920  251d
   3921  251d				   .
   3922  251d							;;line 1105;; 
   3923  251d
   3924  251d				   .
   3925  251d							;;line 1106;; 
   3926  251d
   3927  251d				   .L0180		;;line 1107;;	if _Bit3_Auto_Play{3}  &&  _Bit2_P0_Dir_Left{2} then goto __AP_Move_Left
   3928  251d
   3929  251d		       a5 ec		      LDA	_Bit3_Auto_Play
   3930  251f		       29 08		      AND	#8
   3931  2521		       f0 09		      BEQ	.skipL0180
   3932  2523				   .condpart59
   3933  2523		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3934  2525		       29 04		      AND	#4
   3935  2527		       f0 03		      BEQ	.skip59then
   3936  2529				   .condpart60
   3937  2529		       4c 3a 35 	      jmp	.__AP_Move_Left
   3938  252c
   3939  252c				   .skip59then
   3940  252c				   .skipL0180
   3941  252c				   .
   3942  252c							;;line 1108;; 
   3943  252c
   3944  252c				   .
   3945  252c							;;line 1109;; 
   3946  252c
   3947  252c				   .
   3948  252c							;;line 1110;; 
   3949  252c
   3950  252c				   .
   3951  252c							;;line 1111;; 
   3952  252c
   3953  252c				   .L0181		;;line 1112;;	if !joy0left then goto __Skip_Joy0_Left
   3954  252c
   3955  252c		       2c 80 02 	      bit	SWCHA
   3956  252f		       50 03		      BVC	.skipL0181
   3957  2531				   .condpart61
   3958  2531		       4c d6 35 	      jmp	.__Skip_Joy0_Left
   3959  2534
   3960  2534				   .skipL0181
   3961  2534				   .
   3962  2534							;;line 1113;; 
   3963  2534
   3964  2534				   .
   3965  2534							;;line 1114;; 
   3966  2534
   3967  2534				   .
   3968  2534							;;line 1115;; 
   3969  2534
   3970  2534				   .
   3971  2534							;;line 1116;; 
   3972  2534
   3973  2534				   .L0182		;;line 1117;;	_Bit2_P0_Dir_Left{2} = 1
   3974  2534
   3975  2534		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3976  2536		       09 04		      ORA	#4
   3977  2538		       85 da		      STA	_Bit2_P0_Dir_Left
   3978  253a				   .
   3979  253a							;;line 1118;; 
   3980  253a
   3981  253a				   .__AP_Move_Left
   3982  253a							;;line 1119;; __AP_Move_Left
   3983  253a
   3984  253a				   .
   3985  253a							;;line 1120;; 
   3986  253a
   3987  253a				   .
   3988  253a							;;line 1121;; 
   3989  253a
   3990  253a				   .
   3991  253a							;;line 1122;; 
   3992  253a
   3993  253a				   .
   3994  253a							;;line 1123;; 
   3995  253a
   3996  253a				   .
   3997  253a							;;line 1124;; 
   3998  253a
   3999  253a				   .L0183		;;line 1125;;	temp5 =  ( _Main_CharY )  / 8
   4000  253a
   4001  253a							; complex statement detected
   4002  253a		       a5 86		      LDA	_Main_CharY
   4003  253c		       4a		      lsr
   4004  253d		       4a		      lsr
   4005  253e		       4a		      lsr
   4006  253f		       85 a0		      STA	temp5
   4007  2541				   .
   4008  2541							;;line 1126;; 
   4009  2541
   4010  2541				   .L0184		;;line 1127;;	temp3 =  ( _Main_CharY - 8 )  / 8
   4011  2541
   4012  2541							; complex statement detected
   4013  2541		       a5 86		      LDA	_Main_CharY
   4014  2543		       38		      SEC
   4015  2544		       e9 08		      SBC	#8
   4016  2546		       4a		      lsr
   4017  2547		       4a		      lsr
   4018  2548		       4a		      lsr
   4019  2549		       85 9e		      STA	temp3
   4020  254b				   .
   4021  254b							;;line 1128;; 
   4022  254b
   4023  254b				   .L0185		;;line 1129;;	temp6 =  ( _Main_CharX - 18 )  / 4
   4024  254b
   4025  254b							; complex statement detected
   4026  254b		       a5 81		      LDA	_Main_CharX
   4027  254d		       38		      SEC
   4028  254e		       e9 12		      SBC	#18
   4029  2550		       4a		      lsr
   4030  2551		       4a		      lsr
   4031  2552		       85 a1		      STA	temp6
   4032  2554				   .
   4033  2554							;;line 1130;; 
   4034  2554
   4035  2554				   .L0186		;;line 1131;;	if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   4036  2554
   4037  2554		       a5 a1		      LDA	temp6
   4038  2556		       c9 22		      CMP	#34
   4039  2558		       b0 21		      BCS	.skipL0186
   4040  255a				   .condpart62
   4041  255a		       a5 a1		      LDA	temp6
   4042  255c		       a4 a0		      LDY	temp5
   4043  255e		       85 ee		      sta	temp7
   4044  2560		       a9 35		      lda	#>(ret_point13-1)
   4045  2562		       48		      pha
   4046  2563		       a9 75		      lda	#<(ret_point13-1)
   4047  2565		       48		      pha
   4048  2566		       a9 f2		      lda	#>(pfread-1)
   4049  2568		       48		      pha
   4050  2569		       a9 ab		      lda	#<(pfread-1)
   4051  256b		       48		      pha
   4052  256c		       a5 ee		      lda	temp7
   4053  256e		       48		      pha
   4054  256f		       8a		      txa
   4055  2570		       48		      pha
   4056  2571		       a2 08		      ldx	#8
   4057  2573		       4c eb ff 	      jmp	BS_jsr
   4058  2576				   ret_point13
   4059  2576		       d0 03		      BNE	.skip62then
   4060  2578				   .condpart63
   4061  2578		       4c d6 35 	      jmp	.__Skip_Joy0_Left
   4062  257b
   4063  257b				   .skip62then
   4064  257b				   .skipL0186
   4065  257b				   .
   4066  257b							;;line 1132;; 
   4067  257b
   4068  257b				   .L0187		;;line 1133;;	if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   4069  257b
   4070  257b		       a5 a1		      LDA	temp6
   4071  257d		       c9 22		      CMP	#34
   4072  257f		       b0 21		      BCS	.skipL0187
   4073  2581				   .condpart64
   4074  2581		       a5 a1		      LDA	temp6
   4075  2583		       a4 9e		      LDY	temp3
   4076  2585		       85 ee		      sta	temp7
   4077  2587		       a9 35		      lda	#>(ret_point14-1)
   4078  2589		       48		      pha
   4079  258a		       a9 9c		      lda	#<(ret_point14-1)
   4080  258c		       48		      pha
   4081  258d		       a9 f2		      lda	#>(pfread-1)
   4082  258f		       48		      pha
   4083  2590		       a9 ab		      lda	#<(pfread-1)
   4084  2592		       48		      pha
   4085  2593		       a5 ee		      lda	temp7
   4086  2595		       48		      pha
   4087  2596		       8a		      txa
   4088  2597		       48		      pha
   4089  2598		       a2 08		      ldx	#8
   4090  259a		       4c eb ff 	      jmp	BS_jsr
   4091  259d				   ret_point14
   4092  259d		       d0 03		      BNE	.skip64then
   4093  259f				   .condpart65
   4094  259f		       4c d6 35 	      jmp	.__Skip_Joy0_Left
   4095  25a2
   4096  25a2				   .skip64then
   4097  25a2				   .skipL0187
   4098  25a2				   .
   4099  25a2							;;line 1134;; 
   4100  25a2
   4101  25a2				   .
   4102  25a2							;;line 1135;; 
   4103  25a2
   4104  25a2				   .
   4105  25a2							;;line 1136;; 
   4106  25a2
   4107  25a2				   .
   4108  25a2							;;line 1137;; 
   4109  25a2
   4110  25a2				   .L0188		;;line 1138;;	_Main_CharX = _Main_CharX  -  1  :  pfscroll right
   4111  25a2
   4112  25a2		       c6 81		      DEC	_Main_CharX
   4113  25a4		       a9 01		      LDA	#1
   4114  25a6		       85 ee		      sta	temp7
   4115  25a8		       a9 35		      lda	#>(ret_point15-1)
   4116  25aa		       48		      pha
   4117  25ab		       a9 bd		      lda	#<(ret_point15-1)
   4118  25ad		       48		      pha
   4119  25ae		       a9 f3		      lda	#>(pfscroll-1)
   4120  25b0		       48		      pha
   4121  25b1		       a9 63		      lda	#<(pfscroll-1)
   4122  25b3		       48		      pha
   4123  25b4		       a5 ee		      lda	temp7
   4124  25b6		       48		      pha
   4125  25b7		       8a		      txa
   4126  25b8		       48		      pha
   4127  25b9		       a2 08		      ldx	#8
   4128  25bb		       4c eb ff 	      jmp	BS_jsr
   4129  25be				   ret_point15
   4130  25be				   .L0189		;;line 1139;;	gosub _P_L bank5
   4131  25be
   4132  25be		       85 ee		      sta	temp7
   4133  25c0		       a9 35		      lda	#>(ret_point16-1)
   4134  25c2		       48		      pha
   4135  25c3		       a9 d5		      lda	#<(ret_point16-1)
   4136  25c5		       48		      pha
   4137  25c6		       a9 91		      lda	#>(._P_L-1)
   4138  25c8		       48		      pha
   4139  25c9		       a9 52		      lda	#<(._P_L-1)
   4140  25cb		       48		      pha
   4141  25cc		       a5 ee		      lda	temp7
   4142  25ce		       48		      pha
   4143  25cf		       8a		      txa
   4144  25d0		       48		      pha
   4145  25d1		       a2 05		      ldx	#5
   4146  25d3		       4c eb ff 	      jmp	BS_jsr
   4147  25d6				   ret_point16
   4148  25d6				   .
   4149  25d6							;;line 1140;; 
   4150  25d6
   4151  25d6				   .__Skip_Joy0_Left
   4152  25d6							;;line 1141;; __Skip_Joy0_Left
   4153  25d6
   4154  25d6				   .
   4155  25d6							;;line 1142;; 
   4156  25d6
   4157  25d6				   .
   4158  25d6							;;line 1143;; 
   4159  25d6
   4160  25d6				   .
   4161  25d6							;;line 1144;; 
   4162  25d6
   4163  25d6				   .
   4164  25d6							;;line 1145;; 
   4165  25d6
   4166  25d6				   .
   4167  25d6							;;line 1146;; 
   4168  25d6
   4169  25d6				   .
   4170  25d6							;;line 1147;; 
   4171  25d6
   4172  25d6				   .
   4173  25d6							;;line 1148;; 
   4174  25d6
   4175  25d6				   .
   4176  25d6							;;line 1149;; 
   4177  25d6
   4178  25d6				   .
   4179  25d6							;;line 1150;; 
   4180  25d6
   4181  25d6				   .
   4182  25d6							;;line 1151;; 
   4183  25d6
   4184  25d6				   .L0190		;;line 1152;;	if _Bit3_Auto_Play{3}  &&  _Bit3_P0_Dir_Right{3} then goto __AP_Move_Right
   4185  25d6
   4186  25d6		       a5 ec		      LDA	_Bit3_Auto_Play
   4187  25d8		       29 08		      AND	#8
   4188  25da		       f0 09		      BEQ	.skipL0190
   4189  25dc				   .condpart66
   4190  25dc		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4191  25de		       29 08		      AND	#8
   4192  25e0		       f0 03		      BEQ	.skip66then
   4193  25e2				   .condpart67
   4194  25e2		       4c f3 35 	      jmp	.__AP_Move_Right
   4195  25e5
   4196  25e5				   .skip66then
   4197  25e5				   .skipL0190
   4198  25e5				   .
   4199  25e5							;;line 1153;; 
   4200  25e5
   4201  25e5				   .
   4202  25e5							;;line 1154;; 
   4203  25e5
   4204  25e5				   .
   4205  25e5							;;line 1155;; 
   4206  25e5
   4207  25e5				   .
   4208  25e5							;;line 1156;; 
   4209  25e5
   4210  25e5				   .L0191		;;line 1157;;	if !joy0right then goto __Skip_Joy0_Right
   4211  25e5
   4212  25e5		       2c 80 02 	      bit	SWCHA
   4213  25e8		       10 03		      BPL	.skipL0191
   4214  25ea				   .condpart68
   4215  25ea		       4c 8f 36 	      jmp	.__Skip_Joy0_Right
   4216  25ed
   4217  25ed				   .skipL0191
   4218  25ed				   .
   4219  25ed							;;line 1158;; 
   4220  25ed
   4221  25ed				   .
   4222  25ed							;;line 1159;; 
   4223  25ed
   4224  25ed				   .
   4225  25ed							;;line 1160;; 
   4226  25ed
   4227  25ed				   .
   4228  25ed							;;line 1161;; 
   4229  25ed
   4230  25ed				   .L0192		;;line 1162;;	_Bit3_P0_Dir_Right{3} = 1
   4231  25ed
   4232  25ed		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4233  25ef		       09 08		      ORA	#8
   4234  25f1		       85 da		      STA	_Bit3_P0_Dir_Right
   4235  25f3				   .
   4236  25f3							;;line 1163;; 
   4237  25f3
   4238  25f3				   .__AP_Move_Right
   4239  25f3							;;line 1164;; __AP_Move_Right
   4240  25f3
   4241  25f3				   .
   4242  25f3							;;line 1165;; 
   4243  25f3
   4244  25f3				   .
   4245  25f3							;;line 1166;; 
   4246  25f3
   4247  25f3				   .
   4248  25f3							;;line 1167;; 
   4249  25f3
   4250  25f3				   .
   4251  25f3							;;line 1168;; 
   4252  25f3
   4253  25f3				   .
   4254  25f3							;;line 1169;; 
   4255  25f3
   4256  25f3				   .L0193		;;line 1170;;	temp5 =  ( _Main_CharY )  / 8
   4257  25f3
   4258  25f3							; complex statement detected
   4259  25f3		       a5 86		      LDA	_Main_CharY
   4260  25f5		       4a		      lsr
   4261  25f6		       4a		      lsr
   4262  25f7		       4a		      lsr
   4263  25f8		       85 a0		      STA	temp5
   4264  25fa				   .
   4265  25fa							;;line 1171;; 
   4266  25fa
   4267  25fa				   .L0194		;;line 1172;;	temp3 =  ( _Main_CharY - 8 )  / 8
   4268  25fa
   4269  25fa							; complex statement detected
   4270  25fa		       a5 86		      LDA	_Main_CharY
   4271  25fc		       38		      SEC
   4272  25fd		       e9 08		      SBC	#8
   4273  25ff		       4a		      lsr
   4274  2600		       4a		      lsr
   4275  2601		       4a		      lsr
   4276  2602		       85 9e		      STA	temp3
   4277  2604				   .
   4278  2604							;;line 1173;; 
   4279  2604
   4280  2604				   .L0195		;;line 1174;;	temp6 =  ( _Main_CharX - 9 )  / 4
   4281  2604
   4282  2604							; complex statement detected
   4283  2604		       a5 81		      LDA	_Main_CharX
   4284  2606		       38		      SEC
   4285  2607		       e9 09		      SBC	#9
   4286  2609		       4a		      lsr
   4287  260a		       4a		      lsr
   4288  260b		       85 a1		      STA	temp6
   4289  260d				   .
   4290  260d							;;line 1175;; 
   4291  260d
   4292  260d				   .L0196		;;line 1176;;	if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   4293  260d
   4294  260d		       a5 a1		      LDA	temp6
   4295  260f		       c9 22		      CMP	#34
   4296  2611		       b0 21		      BCS	.skipL0196
   4297  2613				   .condpart69
   4298  2613		       a5 a1		      LDA	temp6
   4299  2615		       a4 a0		      LDY	temp5
   4300  2617		       85 ee		      sta	temp7
   4301  2619		       a9 36		      lda	#>(ret_point17-1)
   4302  261b		       48		      pha
   4303  261c		       a9 2e		      lda	#<(ret_point17-1)
   4304  261e		       48		      pha
   4305  261f		       a9 f2		      lda	#>(pfread-1)
   4306  2621		       48		      pha
   4307  2622		       a9 ab		      lda	#<(pfread-1)
   4308  2624		       48		      pha
   4309  2625		       a5 ee		      lda	temp7
   4310  2627		       48		      pha
   4311  2628		       8a		      txa
   4312  2629		       48		      pha
   4313  262a		       a2 08		      ldx	#8
   4314  262c		       4c eb ff 	      jmp	BS_jsr
   4315  262f				   ret_point17
   4316  262f		       d0 03		      BNE	.skip69then
   4317  2631				   .condpart70
   4318  2631		       4c 8f 36 	      jmp	.__Skip_Joy0_Right
   4319  2634
   4320  2634				   .skip69then
   4321  2634				   .skipL0196
   4322  2634				   .
   4323  2634							;;line 1177;; 
   4324  2634
   4325  2634				   .L0197		;;line 1178;;	if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   4326  2634
   4327  2634		       a5 a1		      LDA	temp6
   4328  2636		       c9 22		      CMP	#34
   4329  2638		       b0 21		      BCS	.skipL0197
   4330  263a				   .condpart71
   4331  263a		       a5 a1		      LDA	temp6
   4332  263c		       a4 9e		      LDY	temp3
   4333  263e		       85 ee		      sta	temp7
   4334  2640		       a9 36		      lda	#>(ret_point18-1)
   4335  2642		       48		      pha
   4336  2643		       a9 55		      lda	#<(ret_point18-1)
   4337  2645		       48		      pha
   4338  2646		       a9 f2		      lda	#>(pfread-1)
   4339  2648		       48		      pha
   4340  2649		       a9 ab		      lda	#<(pfread-1)
   4341  264b		       48		      pha
   4342  264c		       a5 ee		      lda	temp7
   4343  264e		       48		      pha
   4344  264f		       8a		      txa
   4345  2650		       48		      pha
   4346  2651		       a2 08		      ldx	#8
   4347  2653		       4c eb ff 	      jmp	BS_jsr
   4348  2656				   ret_point18
   4349  2656		       d0 03		      BNE	.skip71then
   4350  2658				   .condpart72
   4351  2658		       4c 8f 36 	      jmp	.__Skip_Joy0_Right
   4352  265b
   4353  265b				   .skip71then
   4354  265b				   .skipL0197
   4355  265b				   .
   4356  265b							;;line 1179;; 
   4357  265b
   4358  265b				   .
   4359  265b							;;line 1180;; 
   4360  265b
   4361  265b				   .
   4362  265b							;;line 1181;; 
   4363  265b
   4364  265b				   .
   4365  265b							;;line 1182;; 
   4366  265b
   4367  265b				   .L0198		;;line 1183;;	_Main_CharX = _Main_CharX  +  1  :  pfscroll left
   4368  265b
   4369  265b		       e6 81		      INC	_Main_CharX
   4370  265d		       a9 00		      LDA	#0
   4371  265f		       85 ee		      sta	temp7
   4372  2661		       a9 36		      lda	#>(ret_point19-1)
   4373  2663		       48		      pha
   4374  2664		       a9 76		      lda	#<(ret_point19-1)
   4375  2666		       48		      pha
   4376  2667		       a9 f3		      lda	#>(pfscroll-1)
   4377  2669		       48		      pha
   4378  266a		       a9 63		      lda	#<(pfscroll-1)
   4379  266c		       48		      pha
   4380  266d		       a5 ee		      lda	temp7
   4381  266f		       48		      pha
   4382  2670		       8a		      txa
   4383  2671		       48		      pha
   4384  2672		       a2 08		      ldx	#8
   4385  2674		       4c eb ff 	      jmp	BS_jsr
   4386  2677				   ret_point19
   4387  2677				   .L0199		;;line 1184;;	gosub _P_R bank5
   4388  2677
   4389  2677		       85 ee		      sta	temp7
   4390  2679		       a9 36		      lda	#>(ret_point20-1)
   4391  267b		       48		      pha
   4392  267c		       a9 8e		      lda	#<(ret_point20-1)
   4393  267e		       48		      pha
   4394  267f		       a9 90		      lda	#>(._P_R-1)
   4395  2681		       48		      pha
   4396  2682		       a9 e1		      lda	#<(._P_R-1)
   4397  2684		       48		      pha
   4398  2685		       a5 ee		      lda	temp7
   4399  2687		       48		      pha
   4400  2688		       8a		      txa
   4401  2689		       48		      pha
   4402  268a		       a2 05		      ldx	#5
   4403  268c		       4c eb ff 	      jmp	BS_jsr
   4404  268f				   ret_point20
   4405  268f				   .
   4406  268f							;;line 1185;; 
   4407  268f
   4408  268f				   .__Skip_Joy0_Right
   4409  268f							;;line 1186;; __Skip_Joy0_Right
   4410  268f
   4411  268f				   .
   4412  268f							;;line 1187;; 
   4413  268f
   4414  268f				   .
   4415  268f							;;line 1188;; 
   4416  268f
   4417  268f				   .
   4418  268f							;;line 1189;; 
   4419  268f
   4420  268f				   .
   4421  268f							;;line 1190;; 
   4422  268f
   4423  268f				   .
   4424  268f							;;line 1191;; 
   4425  268f
   4426  268f				   .
   4427  268f							;;line 1192;; 
   4428  268f
   4429  268f				   .
   4430  268f							;;line 1193;; 
   4431  268f
   4432  268f				   .L0200		;;line 1194;;	if _WillY  <  _Main_CharY then _WillY = _WillY	+  1
   4433  268f
   4434  268f		       a5 85		      LDA	_WillY
   4435  2691		       c5 86		      CMP	_Main_CharY
   4436  2693		       b0 02		      BCS	.skipL0200
   4437  2695				   .condpart73
   4438  2695		       e6 85		      INC	_WillY
   4439  2697				   .skipL0200
   4440  2697				   .L0201		;;line 1195;;	if _WillY  >  _Main_CharY then _WillY = _WillY	-  1
   4441  2697
   4442  2697		       a5 86		      LDA	_Main_CharY
   4443  2699		       c5 85		      CMP	_WillY
   4444  269b		       b0 02		      BCS	.skipL0201
   4445  269d				   .condpart74
   4446  269d		       c6 85		      DEC	_WillY
   4447  269f				   .skipL0201
   4448  269f				   .L0202		;;line 1196;;	if _WillX  <  _Main_CharX then _WillX = _WillX	+  1
   4449  269f
   4450  269f		       a5 80		      LDA	_WillX
   4451  26a1		       c5 81		      CMP	_Main_CharX
   4452  26a3		       b0 02		      BCS	.skipL0202
   4453  26a5				   .condpart75
   4454  26a5		       e6 80		      INC	_WillX
   4455  26a7				   .skipL0202
   4456  26a7				   .L0203		;;line 1197;;	if _WillX  >  _Main_CharX then _WillX = _WillX	-  1
   4457  26a7
   4458  26a7		       a5 81		      LDA	_Main_CharX
   4459  26a9		       c5 80		      CMP	_WillX
   4460  26ab		       b0 02		      BCS	.skipL0203
   4461  26ad				   .condpart76
   4462  26ad		       c6 80		      DEC	_WillX
   4463  26af				   .skipL0203
   4464  26af				   .
   4465  26af							;;line 1198;; 
   4466  26af
   4467  26af				   .
   4468  26af							;;line 1199;; 
   4469  26af
   4470  26af				   .
   4471  26af							;;line 1200;; 
   4472  26af
   4473  26af				   .
   4474  26af							;;line 1201;; 
   4475  26af
   4476  26af				   .
   4477  26af							;;line 1202;; 
   4478  26af
   4479  26af				   .
   4480  26af							;;line 1203;; 
   4481  26af
   4482  26af				   .
   4483  26af							;;line 1204;; 
   4484  26af
   4485  26af				   .
   4486  26af							;;line 1205;; 
   4487  26af
   4488  26af				   .
   4489  26af							;;line 1206;; 
   4490  26af
   4491  26af				   .
   4492  26af							;;line 1207;; 
   4493  26af
   4494  26af				   .L0204		;;line 1208;;	if !_Bit3_Auto_Play{3} then goto __AP_Inactivity
   4495  26af
   4496  26af		       a5 ec		      LDA	_Bit3_Auto_Play
   4497  26b1		       29 08		      AND	#8
   4498  26b3		       d0 03		      BNE	.skipL0204
   4499  26b5				   .condpart77
   4500  26b5		       4c d0 36 	      jmp	.__AP_Inactivity
   4501  26b8
   4502  26b8				   .skipL0204
   4503  26b8				   .
   4504  26b8							;;line 1209;; 
   4505  26b8
   4506  26b8				   .
   4507  26b8							;;line 1210;; 
   4508  26b8
   4509  26b8				   .
   4510  26b8							;;line 1211;; 
   4511  26b8
   4512  26b8				   .
   4513  26b8							;;line 1212;; 
   4514  26b8
   4515  26b8				   .L0205		;;line 1213;;	if _AP_Mem_P0x = _Main_CharX  &&  _AP_Mem_P0y = _Main_CharY then _AP_Dir_Counter = 254
   4516  26b8
   4517  26b8		       a5 dc		      LDA	_AP_Mem_P0x
   4518  26ba		       c5 81		      CMP	_Main_CharX
   4519  26bc		       d0 0a		      BNE	.skipL0205
   4520  26be				   .condpart78
   4521  26be		       a5 dd		      LDA	_AP_Mem_P0y
   4522  26c0		       c5 86		      CMP	_Main_CharY
   4523  26c2		       d0 04		      BNE	.skip78then
   4524  26c4				   .condpart79
   4525  26c4		       a9 fe		      LDA	#254
   4526  26c6		       85 df		      STA	_AP_Dir_Counter
   4527  26c8				   .skip78then
   4528  26c8				   .skipL0205
   4529  26c8				   .
   4530  26c8							;;line 1214;; 
   4531  26c8
   4532  26c8				   .
   4533  26c8							;;line 1215;; 
   4534  26c8
   4535  26c8				   .
   4536  26c8							;;line 1216;; 
   4537  26c8
   4538  26c8				   .
   4539  26c8							;;line 1217;; 
   4540  26c8
   4541  26c8				   .L0206		;;line 1218;;	_AP_Mem_P0x = _Main_CharX  :  _AP_Mem_P0y = _Main_CharY
   4542  26c8
   4543  26c8		       a5 81		      LDA	_Main_CharX
   4544  26ca		       85 dc		      STA	_AP_Mem_P0x
   4545  26cc		       a5 86		      LDA	_Main_CharY
   4546  26ce		       85 dd		      STA	_AP_Mem_P0y
   4547  26d0				   .
   4548  26d0							;;line 1219;; 
   4549  26d0
   4550  26d0				   .__AP_Inactivity
   4551  26d0							;;line 1220;; __AP_Inactivity
   4552  26d0
   4553  26d0				   .
   4554  26d0							;;line 1221;; 
   4555  26d0
   4556  26d0				   .
   4557  26d0							;;line 1222;; 
   4558  26d0
   4559  26d0				   .
   4560  26d0							;;line 1223;; 
   4561  26d0
   4562  26d0				   .
   4563  26d0							;;line 1224;; 
   4564  26d0
   4565  26d0				   .
   4566  26d0							;;line 1225;; 
   4567  26d0
   4568  26d0				   .
   4569  26d0							;;line 1226;; 
   4570  26d0
   4571  26d0				   .
   4572  26d0							;;line 1227;; 
   4573  26d0
   4574  26d0				   .
   4575  26d0							;;line 1228;; 
   4576  26d0
   4577  26d0				   .
   4578  26d0							;;line 1229;; 
   4579  26d0
   4580  26d0				   .
   4581  26d0							;;line 1230;; 
   4582  26d0
   4583  26d0				   .
   4584  26d0							;;line 1231;; 
   4585  26d0
   4586  26d0				   .
   4587  26d0							;;line 1232;; 
   4588  26d0
   4589  26d0				   .
   4590  26d0							;;line 1233;; 
   4591  26d0
   4592  26d0				   .L0207		;;line 1234;;	if !_Bit3_Auto_Play{3} then goto __AP_Skip_Fire_Missile
   4593  26d0
   4594  26d0		       a5 ec		      LDA	_Bit3_Auto_Play
   4595  26d2		       29 08		      AND	#8
   4596  26d4		       d0 03		      BNE	.skipL0207
   4597  26d6				   .condpart80
   4598  26d6		       4c f4 36 	      jmp	.__AP_Skip_Fire_Missile
   4599  26d9
   4600  26d9				   .skipL0207
   4601  26d9				   .
   4602  26d9							;;line 1235;; 
   4603  26d9
   4604  26d9				   .
   4605  26d9							;;line 1236;; 
   4606  26d9
   4607  26d9				   .
   4608  26d9							;;line 1237;; 
   4609  26d9
   4610  26d9				   .
   4611  26d9							;;line 1238;; 
   4612  26d9
   4613  26d9				   .
   4614  26d9							;;line 1239;; 
   4615  26d9
   4616  26d9				   .L0208		;;line 1240;;	temp5 = rand  :  if temp5  <  230 then goto __Skip_Fire
   4617  26d9
   4618  26d9		       a5 a2		      lda	rand
   4619  26db		       4a		      lsr
   4620  26dc					      ifconst	rand16
   4621  26dc		       26 ed		      rol	rand16
   4622  26de					      endif
   4623  26de		       90 02		      bcc	*+4
   4624  26e0		       49 b4		      eor	#$B4
   4625  26e2		       85 a2		      sta	rand
   4626  26e4					      ifconst	rand16
   4627  26e4		       45 ed		      eor	rand16
   4628  26e6					      endif
   4629  26e6		       85 a0		      STA	temp5
   4630  26e8		       a5 a0		      LDA	temp5
   4631  26ea		       c9 e6		      CMP	#230
   4632  26ec		       b0 03		      BCS	.skipL0208
   4633  26ee				   .condpart81
   4634  26ee		       4c a3 37 	      jmp	.__Skip_Fire
   4635  26f1
   4636  26f1				   .skipL0208
   4637  26f1				   .
   4638  26f1							;;line 1241;; 
   4639  26f1
   4640  26f1				   .L0209		;;line 1242;;	goto __AP_Fire
   4641  26f1
   4642  26f1		       4c 0a 37 	      jmp	.__AP_Fire
   4643  26f4
   4644  26f4				   .
   4645  26f4							;;line 1243;; 
   4646  26f4
   4647  26f4				   .__AP_Skip_Fire_Missile
   4648  26f4							;;line 1244;; __AP_Skip_Fire_Missile
   4649  26f4
   4650  26f4				   .
   4651  26f4							;;line 1245;; 
   4652  26f4
   4653  26f4				   .
   4654  26f4							;;line 1246;; 
   4655  26f4
   4656  26f4				   .
   4657  26f4							;;line 1247;; 
   4658  26f4
   4659  26f4				   .
   4660  26f4							;;line 1248;; 
   4661  26f4
   4662  26f4				   .
   4663  26f4							;;line 1249;; 
   4664  26f4
   4665  26f4				   .L0210		;;line 1250;;	if !joy0fire then _Bit1_FireB_Restrainer{1} = 0  :  goto __Skip_Fire
   4666  26f4
   4667  26f4		       24 0c		      bit	INPT4
   4668  26f6		       10 09		      BPL	.skipL0210
   4669  26f8				   .condpart82
   4670  26f8		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   4671  26fa		       29 fd		      AND	#253
   4672  26fc		       85 ec		      STA	_Bit1_FireB_Restrainer
   4673  26fe		       4c a3 37 	      jmp	.__Skip_Fire
   4674  2701
   4675  2701				   .skipL0210
   4676  2701				   .
   4677  2701							;;line 1251;; 
   4678  2701
   4679  2701				   .
   4680  2701							;;line 1252;; 
   4681  2701
   4682  2701				   .
   4683  2701							;;line 1253;; 
   4684  2701
   4685  2701				   .
   4686  2701							;;line 1254;; 
   4687  2701
   4688  2701				   .
   4689  2701							;;line 1255;; 
   4690  2701
   4691  2701				   .L0211		;;line 1256;;	if _Bit1_FireB_Restrainer{1} then goto __Skip_Fire
   4692  2701
   4693  2701		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   4694  2703		       29 02		      AND	#2
   4695  2705		       f0 03		      BEQ	.skipL0211
   4696  2707				   .condpart83
   4697  2707		       4c a3 37 	      jmp	.__Skip_Fire
   4698  270a
   4699  270a				   .skipL0211
   4700  270a				   .
   4701  270a							;;line 1257;; 
   4702  270a
   4703  270a				   .__AP_Fire
   4704  270a							;;line 1258;; __AP_Fire
   4705  270a
   4706  270a				   .
   4707  270a							;;line 1259;; 
   4708  270a
   4709  270a				   .
   4710  270a							;;line 1260;; 
   4711  270a
   4712  270a				   .
   4713  270a							;;line 1261;; 
   4714  270a
   4715  270a				   .
   4716  270a							;;line 1262;; 
   4717  270a
   4718  270a				   .L0212		;;line 1263;;	if _Bit7_M1_Moving{7} then goto __Skip_Fire
   4719  270a
   4720  270a		       24 ec		      BIT	_Bit7_M1_Moving
   4721  270c		       10 03		      BPL	.skipL0212
   4722  270e				   .condpart84
   4723  270e		       4c a3 37 	      jmp	.__Skip_Fire
   4724  2711
   4725  2711				   .skipL0212
   4726  2711				   .
   4727  2711							;;line 1264;; 
   4728  2711
   4729  2711				   .
   4730  2711							;;line 1265;; 
   4731  2711
   4732  2711				   .
   4733  2711							;;line 1266;; 
   4734  2711
   4735  2711				   .
   4736  2711							;;line 1267;; 
   4737  2711
   4738  2711				   .L0213		;;line 1268;;	_Bit7_M1_Moving{7} = 1
   4739  2711
   4740  2711		       a5 ec		      LDA	_Bit7_M1_Moving
   4741  2713		       09 80		      ORA	#128
   4742  2715		       85 ec		      STA	_Bit7_M1_Moving
   4743  2717				   .
   4744  2717							;;line 1269;; 
   4745  2717
   4746  2717				   .
   4747  2717							;;line 1270;; 
   4748  2717
   4749  2717				   .
   4750  2717							;;line 1271;; 
   4751  2717
   4752  2717				   .
   4753  2717							;;line 1272;; 
   4754  2717
   4755  2717				   .
   4756  2717							;;line 1273;; 
   4757  2717
   4758  2717				   .L0214		;;line 1274;;	_Bit4_M1_Dir_Up{4} = _Bit0_P0_Dir_Up{0}
   4759  2717
   4760  2717		       a5 da		      LDA	_Bit0_P0_Dir_Up
   4761  2719		       29 01		      AND	#1
   4762  271b		       08		      PHP
   4763  271c		       a5 da		      LDA	_Bit4_M1_Dir_Up
   4764  271e		       29 ef		      AND	#239
   4765  2720		       28		      PLP
   4766  2721		       f0 02		      .byte.b	$F0, $02
   4767  2723		       09 10		      ORA	#16
   4768  2725		       85 da		      STA	_Bit4_M1_Dir_Up
   4769  2727				   .L0215		;;line 1275;;	_Bit5_M1_Dir_Down{5} = _Bit1_P0_Dir_Down{1}
   4770  2727
   4771  2727		       a5 da		      LDA	_Bit1_P0_Dir_Down
   4772  2729		       29 02		      AND	#2
   4773  272b		       08		      PHP
   4774  272c		       a5 da		      LDA	_Bit5_M1_Dir_Down
   4775  272e		       29 df		      AND	#223
   4776  2730		       28		      PLP
   4777  2731		       f0 02		      .byte.b	$F0, $02
   4778  2733		       09 20		      ORA	#32
   4779  2735		       85 da		      STA	_Bit5_M1_Dir_Down
   4780  2737				   .L0216		;;line 1276;;	_Bit6_M1_Dir_Left{6} = _Bit2_P0_Dir_Left{2}
   4781  2737
   4782  2737		       a5 da		      LDA	_Bit2_P0_Dir_Left
   4783  2739		       29 04		      AND	#4
   4784  273b		       08		      PHP
   4785  273c		       a5 da		      LDA	_Bit6_M1_Dir_Left
   4786  273e		       29 bf		      AND	#191
   4787  2740		       28		      PLP
   4788  2741		       f0 02		      .byte.b	$F0, $02
   4789  2743		       09 40		      ORA	#64
   4790  2745		       85 da		      STA	_Bit6_M1_Dir_Left
   4791  2747				   .L0217		;;line 1277;;	_Bit7_M1_Dir_Right{7} = _Bit3_P0_Dir_Right{3}
   4792  2747
   4793  2747		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4794  2749		       29 08		      AND	#8
   4795  274b		       08		      PHP
   4796  274c		       a5 da		      LDA	_Bit7_M1_Dir_Right
   4797  274e		       29 7f		      AND	#127
   4798  2750		       28		      PLP
   4799  2751		       f0 02		      .byte.b	$F0, $02
   4800  2753		       09 80		      ORA	#128
   4801  2755		       85 da		      STA	_Bit7_M1_Dir_Right
   4802  2757				   .
   4803  2757							;;line 1278;; 
   4804  2757
   4805  2757				   .
   4806  2757							;;line 1279;; 
   4807  2757
   4808  2757				   .
   4809  2757							;;line 1280;; 
   4810  2757
   4811  2757				   .
   4812  2757							;;line 1281;; 
   4813  2757
   4814  2757				   .L0218		;;line 1282;;	if _Bit4_M1_Dir_Up{4} then _Lost_Soul_X = _Main_CharX  +  4  :	_Lost_Soul_Y = _Main_CharY  -  5
   4815  2757
   4816  2757		       a5 da		      LDA	_Bit4_M1_Dir_Up
   4817  2759		       29 10		      AND	#16
   4818  275b		       f0 0e		      BEQ	.skipL0218
   4819  275d				   .condpart85
   4820  275d		       a5 81		      LDA	_Main_CharX
   4821  275f		       18		      CLC
   4822  2760		       69 04		      ADC	#4
   4823  2762		       85 84		      STA	_Lost_Soul_X
   4824  2764		       a5 86		      LDA	_Main_CharY
   4825  2766		       38		      SEC
   4826  2767		       e9 05		      SBC	#5
   4827  2769		       85 89		      STA	_Lost_Soul_Y
   4828  276b				   .skipL0218
   4829  276b				   .L0219		;;line 1283;;	if _Bit5_M1_Dir_Down{5} then _Lost_Soul_X = _Main_CharX  +  4  :  _Lost_Soul_Y = _Main_CharY  -  1
   4830  276b
   4831  276b		       a5 da		      LDA	_Bit5_M1_Dir_Down
   4832  276d		       29 20		      AND	#32
   4833  276f		       f0 0e		      BEQ	.skipL0219
   4834  2771				   .condpart86
   4835  2771		       a5 81		      LDA	_Main_CharX
   4836  2773		       18		      CLC
   4837  2774		       69 04		      ADC	#4
   4838  2776		       85 84		      STA	_Lost_Soul_X
   4839  2778		       a5 86		      LDA	_Main_CharY
   4840  277a		       38		      SEC
   4841  277b		       e9 01		      SBC	#1
   4842  277d		       85 89		      STA	_Lost_Soul_Y
   4843  277f				   .skipL0219
   4844  277f				   .L0220		;;line 1284;;	if _Bit6_M1_Dir_Left{6} then _Lost_Soul_X = _Main_CharX  +  2  :  _Lost_Soul_Y = _Main_CharY  -  3
   4845  277f
   4846  277f		       24 da		      BIT	_Bit6_M1_Dir_Left
   4847  2781		       50 0e		      BVC	.skipL0220
   4848  2783				   .condpart87
   4849  2783		       a5 81		      LDA	_Main_CharX
   4850  2785		       18		      CLC
   4851  2786		       69 02		      ADC	#2
   4852  2788		       85 84		      STA	_Lost_Soul_X
   4853  278a		       a5 86		      LDA	_Main_CharY
   4854  278c		       38		      SEC
   4855  278d		       e9 03		      SBC	#3
   4856  278f		       85 89		      STA	_Lost_Soul_Y
   4857  2791				   .skipL0220
   4858  2791				   .L0221		;;line 1285;;	if _Bit7_M1_Dir_Right{7} then _Lost_Soul_X = _Main_CharX  +  6	:  _Lost_Soul_Y = _Main_CharY  -  3
   4859  2791
   4860  2791		       24 da		      BIT	_Bit7_M1_Dir_Right
   4861  2793		       10 0e		      BPL	.skipL0221
   4862  2795				   .condpart88
   4863  2795		       a5 81		      LDA	_Main_CharX
   4864  2797		       18		      CLC
   4865  2798		       69 06		      ADC	#6
   4866  279a		       85 84		      STA	_Lost_Soul_X
   4867  279c		       a5 86		      LDA	_Main_CharY
   4868  279e		       38		      SEC
   4869  279f		       e9 03		      SBC	#3
   4870  27a1		       85 89		      STA	_Lost_Soul_Y
   4871  27a3				   .skipL0221
   4872  27a3				   .
   4873  27a3							;;line 1286;; 
   4874  27a3
   4875  27a3				   .
   4876  27a3							;;line 1287;; 
   4877  27a3
   4878  27a3				   .__Skip_Fire
   4879  27a3							;;line 1288;; __Skip_Fire
   4880  27a3
   4881  27a3				   .
   4882  27a3							;;line 1289;; 
   4883  27a3
   4884  27a3				   .
   4885  27a3							;;line 1290;; 
   4886  27a3
   4887  27a3				   .
   4888  27a3							;;line 1291;; 
   4889  27a3
   4890  27a3				   .
   4891  27a3							;;line 1292;; 
   4892  27a3
   4893  27a3				   .
   4894  27a3							;;line 1293;; 
   4895  27a3
   4896  27a3				   .
   4897  27a3							;;line 1294;; 
   4898  27a3
   4899  27a3				   .
   4900  27a3							;;line 1295;; 
   4901  27a3
   4902  27a3				   .
   4903  27a3							;;line 1296;; 
   4904  27a3
   4905  27a3				   .
   4906  27a3							;;line 1297;; 
   4907  27a3
   4908  27a3				   .
   4909  27a3							;;line 1298;; 
   4910  27a3
   4911  27a3				   .L0222		;;line 1299;;	if !_Bit7_M1_Moving{7} then goto __Skip_Missile
   4912  27a3
   4913  27a3		       24 ec		      BIT	_Bit7_M1_Moving
   4914  27a5		       30 03		      BMI	.skipL0222
   4915  27a7				   .condpart89
   4916  27a7		       4c 1a 38 	      jmp	.__Skip_Missile
   4917  27aa
   4918  27aa				   .skipL0222
   4919  27aa				   .
   4920  27aa							;;line 1300;; 
   4921  27aa
   4922  27aa				   .
   4923  27aa							;;line 1301;; 
   4924  27aa
   4925  27aa				   .
   4926  27aa							;;line 1302;; 
   4927  27aa
   4928  27aa				   .
   4929  27aa							;;line 1303;; 
   4930  27aa
   4931  27aa				   .L0223		;;line 1304;;	if _Bit4_M1_Dir_Up{4} then _Lost_Soul_Y = _Lost_Soul_Y	-  6
   4932  27aa
   4933  27aa		       a5 da		      LDA	_Bit4_M1_Dir_Up
   4934  27ac		       29 10		      AND	#16
   4935  27ae		       f0 07		      BEQ	.skipL0223
   4936  27b0				   .condpart90
   4937  27b0		       a5 89		      LDA	_Lost_Soul_Y
   4938  27b2		       38		      SEC
   4939  27b3		       e9 06		      SBC	#6
   4940  27b5		       85 89		      STA	_Lost_Soul_Y
   4941  27b7				   .skipL0223
   4942  27b7				   .L0224		;;line 1305;;	if _Bit5_M1_Dir_Down{5} then _Lost_Soul_Y = _Lost_Soul_Y  +  6
   4943  27b7
   4944  27b7		       a5 da		      LDA	_Bit5_M1_Dir_Down
   4945  27b9		       29 20		      AND	#32
   4946  27bb		       f0 07		      BEQ	.skipL0224
   4947  27bd				   .condpart91
   4948  27bd		       a5 89		      LDA	_Lost_Soul_Y
   4949  27bf		       18		      CLC
   4950  27c0		       69 06		      ADC	#6
   4951  27c2		       85 89		      STA	_Lost_Soul_Y
   4952  27c4				   .skipL0224
   4953  27c4				   .L0225		;;line 1306;;	if _Bit6_M1_Dir_Left{6} then _Lost_Soul_X = _Lost_Soul_X  -  6
   4954  27c4
   4955  27c4		       24 da		      BIT	_Bit6_M1_Dir_Left
   4956  27c6		       50 07		      BVC	.skipL0225
   4957  27c8				   .condpart92
   4958  27c8		       a5 84		      LDA	_Lost_Soul_X
   4959  27ca		       38		      SEC
   4960  27cb		       e9 06		      SBC	#6
   4961  27cd		       85 84		      STA	_Lost_Soul_X
   4962  27cf				   .skipL0225
   4963  27cf				   .L0226		;;line 1307;;	if _Bit7_M1_Dir_Right{7} then _Lost_Soul_X = _Lost_Soul_X  +  6
   4964  27cf
   4965  27cf		       24 da		      BIT	_Bit7_M1_Dir_Right
   4966  27d1		       10 07		      BPL	.skipL0226
   4967  27d3				   .condpart93
   4968  27d3		       a5 84		      LDA	_Lost_Soul_X
   4969  27d5		       18		      CLC
   4970  27d6		       69 06		      ADC	#6
   4971  27d8		       85 84		      STA	_Lost_Soul_X
   4972  27da				   .skipL0226
   4973  27da				   .
   4974  27da							;;line 1308;; 
   4975  27da
   4976  27da				   .
   4977  27da							;;line 1309;; 
   4978  27da
   4979  27da				   .
   4980  27da							;;line 1310;; 
   4981  27da
   4982  27da				   .
   4983  27da							;;line 1311;; 
   4984  27da
   4985  27da				   .L0227		;;line 1312;;	if _Lost_Soul_Y  <  _M_Edge_Top then goto __Delete_Missile
   4986  27da
   4987  27da		       a5 89		      LDA	_Lost_Soul_Y
   4988  27dc		       c9 02		      CMP	#_M_Edge_Top
   4989  27de		       b0 03		      BCS	.skipL0227
   4990  27e0				   .condpart94
   4991  27e0		       4c 0e 38 	      jmp	.__Delete_Missile
   4992  27e3
   4993  27e3				   .skipL0227
   4994  27e3				   .L0228		;;line 1313;;	if _Lost_Soul_Y  >  _M_Edge_Bottom then goto __Delete_Missile
   4995  27e3
   4996  27e3		       a9 58		      LDA	#_M_Edge_Bottom
   4997  27e5		       c5 89		      CMP	_Lost_Soul_Y
   4998  27e7		       b0 03		      BCS	.skipL0228
   4999  27e9				   .condpart95
   5000  27e9		       4c 0e 38 	      jmp	.__Delete_Missile
   5001  27ec
   5002  27ec				   .skipL0228
   5003  27ec				   .L0229		;;line 1314;;	if _Lost_Soul_X  <  _M_Edge_Left then goto __Delete_Missile
   5004  27ec
   5005  27ec		       a5 84		      LDA	_Lost_Soul_X
   5006  27ee		       c9 02		      CMP	#_M_Edge_Left
   5007  27f0		       b0 03		      BCS	.skipL0229
   5008  27f2				   .condpart96
   5009  27f2		       4c 0e 38 	      jmp	.__Delete_Missile
   5010  27f5
   5011  27f5				   .skipL0229
   5012  27f5				   .L0230		;;line 1315;;	if _Lost_Soul_X  >  _M_Edge_Right then goto __Delete_Missile
   5013  27f5
   5014  27f5		       a9 9f		      LDA	#_M_Edge_Right
   5015  27f7		       c5 84		      CMP	_Lost_Soul_X
   5016  27f9		       b0 03		      BCS	.skipL0230
   5017  27fb				   .condpart97
   5018  27fb		       4c 0e 38 	      jmp	.__Delete_Missile
   5019  27fe
   5020  27fe				   .skipL0230
   5021  27fe				   .
   5022  27fe							;;line 1316;; 
   5023  27fe
   5024  27fe				   .
   5025  27fe							;;line 1317;; 
   5026  27fe
   5027  27fe				   .
   5028  27fe							;;line 1318;; 
   5029  27fe
   5030  27fe				   .
   5031  27fe							;;line 1319;; 
   5032  27fe
   5033  27fe				   .L0231		;;line 1320;;	if !collision(playfield,ball) then goto __Skip_Missile
   5034  27fe
   5035  27fe		       24 06		      bit	CXBLPF
   5036  2800		       30 03		      BMI	.skipL0231
   5037  2802				   .condpart98
   5038  2802		       4c 1a 38 	      jmp	.__Skip_Missile
   5039  2805
   5040  2805				   .skipL0231
   5041  2805				   .
   5042  2805							;;line 1321;; 
   5043  2805
   5044  2805				   .
   5045  2805							;;line 1322;; 
   5046  2805
   5047  2805				   .
   5048  2805							;;line 1323;; 
   5049  2805
   5050  2805				   .
   5051  2805							;;line 1324;; 
   5052  2805
   5053  2805				   .L0232		;;line 1325;;	if _Bit3_Auto_Play{3} then goto __Delete_Missile
   5054  2805
   5055  2805		       a5 ec		      LDA	_Bit3_Auto_Play
   5056  2807		       29 08		      AND	#8
   5057  2809		       f0 03		      BEQ	.skipL0232
   5058  280b				   .condpart99
   5059  280b		       4c 0e 38 	      jmp	.__Delete_Missile
   5060  280e
   5061  280e				   .skipL0232
   5062  280e				   .
   5063  280e							;;line 1326;; 
   5064  280e
   5065  280e				   .
   5066  280e							;;line 1327;; 
   5067  280e
   5068  280e				   .
   5069  280e							;;line 1328;; 
   5070  280e
   5071  280e				   .
   5072  280e							;;line 1329;; 
   5073  280e
   5074  280e				   .
   5075  280e							;;line 1330;; 
   5076  280e
   5077  280e				   .
   5078  280e							;;line 1331;; 
   5079  280e
   5080  280e				   .
   5081  280e							;;line 1332;; 
   5082  280e
   5083  280e				   .__Delete_Missile
   5084  280e							;;line 1333;; __Delete_Missile
   5085  280e
   5086  280e				   .
   5087  280e							;;line 1334;; 
   5088  280e
   5089  280e				   .
   5090  280e							;;line 1335;; 
   5091  280e
   5092  280e				   .
   5093  280e							;;line 1336;; 
   5094  280e
   5095  280e				   .
   5096  280e							;;line 1337;; 
   5097  280e
   5098  280e				   .L0233		;;line 1338;;	_Bit7_M1_Moving{7} = 0	:  _Lost_Soul_X = 200  :  _Lost_Soul_Y = 200
   5099  280e
   5100  280e		       a5 ec		      LDA	_Bit7_M1_Moving
   5101  2810		       29 7f		      AND	#127
   5102  2812		       85 ec		      STA	_Bit7_M1_Moving
   5103  2814		       a9 c8		      LDA	#200
   5104  2816		       85 84		      STA	_Lost_Soul_X
   5105  2818		       85 89		      STA	_Lost_Soul_Y
   5106  281a				   .
   5107  281a							;;line 1339;; 
   5108  281a
   5109  281a				   .__Skip_Missile
   5110  281a							;;line 1340;; __Skip_Missile
   5111  281a
   5112  281a				   .
   5113  281a							;;line 1341;; 
   5114  281a
   5115  281a				   .
   5116  281a							;;line 1342;; 
   5117  281a
   5118  281a				   .
   5119  281a							;;line 1343;; 
   5120  281a
   5121  281a				   .
   5122  281a							;;line 1344;; 
   5123  281a
   5124  281a				   .
   5125  281a							;;line 1345;; 
   5126  281a
   5127  281a				   .
   5128  281a							;;line 1346;; 
   5129  281a
   5130  281a				   .
   5131  281a							;;line 1347;; 
   5132  281a
   5133  281a				   .L0234		;;line 1348;;	if !collision(player1,player0) then goto _Skip_touch
   5134  281a
   5135  281a		       24 07		      bit	CXPPMM
   5136  281c		       30 03		      BMI	.skipL0234
   5137  281e				   .condpart100
   5138  281e		       4c bf 38 	      jmp	._Skip_touch
   5139  2821
   5140  2821				   .skipL0234
   5141  2821				   .L0235		;;line 1349;;	if _sc3  >  0 then score = score  -  1
   5142  2821
   5143  2821		       a9 00		      LDA	#0
   5144  2823		       c5 95		      CMP	_sc3
   5145  2825		       b0 15		      BCS	.skipL0235
   5146  2827				   .condpart101
   5147  2827		       f8		      SED
   5148  2828		       38		      SEC
   5149  2829		       a5 95		      LDA	score+2
   5150  282b		       e9 01		      SBC	#$01
   5151  282d		       85 95		      STA	score+2
   5152  282f		       a5 94		      LDA	score+1
   5153  2831		       e9 00		      SBC	#$00
   5154  2833		       85 94		      STA	score+1
   5155  2835		       a5 93		      LDA	score
   5156  2837		       e9 00		      SBC	#$00
   5157  2839		       85 93		      STA	score
   5158  283b		       d8		      CLD
   5159  283c				   .skipL0235
   5160  283c				   .
   5161  283c							;;line 1350;; 
   5162  283c
   5163  283c				   .
   5164  283c							;;line 1351;; 
   5165  283c
   5166  283c				   .
   5167  283c							;;line 1352;; 
   5168  283c
   5169  283c				   .
   5170  283c							;;line 1353;; 
   5171  283c
   5172  283c				   .
   5173  283c							;;line 1354;; 
   5174  283c
   5175  283c				   .L0236		;;line 1355;;	if !pfscore2 then pfscore1 = pfscore1 / 4
   5176  283c
   5177  283c		       a5 f3		      LDA	pfscore2
   5178  283e		       d0 06		      BNE	.skipL0236
   5179  2840				   .condpart102
   5180  2840		       a5 f2		      LDA	pfscore1
   5181  2842		       4a		      lsr
   5182  2843		       4a		      lsr
   5183  2844		       85 f2		      STA	pfscore1
   5184  2846				   .skipL0236
   5185  2846				   .
   5186  2846							;;line 1356;; 
   5187  2846
   5188  2846				   .
   5189  2846							;;line 1357;; 
   5190  2846
   5191  2846				   .
   5192  2846							;;line 1358;; 
   5193  2846
   5194  2846				   .
   5195  2846							;;line 1359;; 
   5196  2846
   5197  2846				   .L0237		;;line 1360;;	if pfscore1 = 168 then pfscore2 = 255
   5198  2846
   5199  2846		       a5 f2		      LDA	pfscore1
   5200  2848		       c9 a8		      CMP	#168
   5201  284a		       d0 04		      BNE	.skipL0237
   5202  284c				   .condpart103
   5203  284c		       a9 ff		      LDA	#255
   5204  284e		       85 f3		      STA	pfscore2
   5205  2850				   .skipL0237
   5206  2850				   .L0238		;;line 1361;;	if !pfscore1 then _Bit2_Game_Control{2} = 1
   5207  2850
   5208  2850		       a5 f2		      LDA	pfscore1
   5209  2852		       d0 06		      BNE	.skipL0238
   5210  2854				   .condpart104
   5211  2854		       a5 ec		      LDA	_Bit2_Game_Control
   5212  2856		       09 04		      ORA	#4
   5213  2858		       85 ec		      STA	_Bit2_Game_Control
   5214  285a				   .skipL0238
   5215  285a				   .L0239		;;line 1362;;	_WillX = _Main_CharX  +   ( rand & 127 )   +   ( rand / 16 )   :  _WillY = _Main_CharY	+   ( rand / 4 )   +   ( rand & 63 )   -  1
   5216  285a
   5217  285a							; complex statement detected
   5218  285a		       a5 81		      LDA	_Main_CharX
   5219  285c		       48		      PHA
   5220  285d		       a5 a2		      lda	rand
   5221  285f		       4a		      lsr
   5222  2860					      ifconst	rand16
   5223  2860		       26 ed		      rol	rand16
   5224  2862					      endif
   5225  2862		       90 02		      bcc	*+4
   5226  2864		       49 b4		      eor	#$B4
   5227  2866		       85 a2		      sta	rand
   5228  2868					      ifconst	rand16
   5229  2868		       45 ed		      eor	rand16
   5230  286a					      endif
   5231  286a		       29 7f		      AND	#127
   5232  286c		       ba		      TSX
   5233  286d		       e8		      INX
   5234  286e		       9a		      TXS
   5235  286f		       18		      CLC
   5236  2870		       75 00		      ADC	$00,x
   5237  2872		       48		      PHA
   5238  2873		       a5 a2		      lda	rand
   5239  2875		       4a		      lsr
   5240  2876					      ifconst	rand16
   5241  2876		       26 ed		      rol	rand16
   5242  2878					      endif
   5243  2878		       90 02		      bcc	*+4
   5244  287a		       49 b4		      eor	#$B4
   5245  287c		       85 a2		      sta	rand
   5246  287e					      ifconst	rand16
   5247  287e		       45 ed		      eor	rand16
   5248  2880					      endif
   5249  2880		       4a		      lsr
   5250  2881		       4a		      lsr
   5251  2882		       4a		      lsr
   5252  2883		       4a		      lsr
   5253  2884		       ba		      TSX
   5254  2885		       e8		      INX
   5255  2886		       9a		      TXS
   5256  2887		       18		      CLC
   5257  2888		       75 00		      ADC	$00,x
   5258  288a		       85 80		      STA	_WillX
   5259  288c							; complex statement detected
   5260  288c		       a5 86		      LDA	_Main_CharY
   5261  288e		       48		      PHA
   5262  288f		       a5 a2		      lda	rand
   5263  2891		       4a		      lsr
   5264  2892					      ifconst	rand16
   5265  2892		       26 ed		      rol	rand16
   5266  2894					      endif
   5267  2894		       90 02		      bcc	*+4
   5268  2896		       49 b4		      eor	#$B4
   5269  2898		       85 a2		      sta	rand
   5270  289a					      ifconst	rand16
   5271  289a		       45 ed		      eor	rand16
   5272  289c					      endif
   5273  289c		       4a		      lsr
   5274  289d		       4a		      lsr
   5275  289e		       ba		      TSX
   5276  289f		       e8		      INX
   5277  28a0		       9a		      TXS
   5278  28a1		       18		      CLC
   5279  28a2		       75 00		      ADC	$00,x
   5280  28a4		       48		      PHA
   5281  28a5		       a5 a2		      lda	rand
   5282  28a7		       4a		      lsr
   5283  28a8					      ifconst	rand16
   5284  28a8		       26 ed		      rol	rand16
   5285  28aa					      endif
   5286  28aa		       90 02		      bcc	*+4
   5287  28ac		       49 b4		      eor	#$B4
   5288  28ae		       85 a2		      sta	rand
   5289  28b0					      ifconst	rand16
   5290  28b0		       45 ed		      eor	rand16
   5291  28b2					      endif
   5292  28b2		       29 3f		      AND	#63
   5293  28b4		       ba		      TSX
   5294  28b5		       e8		      INX
   5295  28b6		       9a		      TXS
   5296  28b7		       18		      CLC
   5297  28b8		       75 00		      ADC	$00,x
   5298  28ba		       38		      SEC
   5299  28bb		       e9 01		      SBC	#1
   5300  28bd		       85 85		      STA	_WillY
   5301  28bf				   .
   5302  28bf							;;line 1363;; 
   5303  28bf
   5304  28bf				   ._Skip_touch
   5305  28bf							;;line 1364;; _Skip_touch
   5306  28bf
   5307  28bf				   .
   5308  28bf							;;line 1365;; 
   5309  28bf
   5310  28bf				   .
   5311  28bf							;;line 1366;; 
   5312  28bf
   5313  28bf				   .
   5314  28bf							;;line 1367;; 
   5315  28bf
   5316  28bf				   .
   5317  28bf							;;line 1368;; 
   5318  28bf
   5319  28bf				   .
   5320  28bf							;;line 1369;; 
   5321  28bf
   5322  28bf				   .
   5323  28bf							;;line 1370;; 
   5324  28bf
   5325  28bf				   .
   5326  28bf							;;line 1371;; 
   5327  28bf
   5328  28bf				   .
   5329  28bf							;;line 1372;; 
   5330  28bf
   5331  28bf				   .
   5332  28bf							;;line 1373;; 
   5333  28bf
   5334  28bf				   .
   5335  28bf							;;line 1374;; 
   5336  28bf
   5337  28bf				   .
   5338  28bf							;;line 1375;; 
   5339  28bf
   5340  28bf				   .
   5341  28bf							;;line 1376;; 
   5342  28bf
   5343  28bf				   .
   5344  28bf							;;line 1377;; 
   5345  28bf
   5346  28bf				   .L0240		;;line 1378;;	if !collision(player0,ball) then goto __Skip_Shot_Enemy
   5347  28bf
   5348  28bf		       24 02		      bit	CXP0FB
   5349  28c1		       70 03		      BVS	.skipL0240
   5350  28c3				   .condpart105
   5351  28c3		       4c 5a 39 	      jmp	.__Skip_Shot_Enemy
   5352  28c6
   5353  28c6				   .skipL0240
   5354  28c6				   .
   5355  28c6							;;line 1379;; 
   5356  28c6
   5357  28c6				   .
   5358  28c6							;;line 1380;; 
   5359  28c6
   5360  28c6				   .
   5361  28c6							;;line 1381;; 
   5362  28c6
   5363  28c6				   .
   5364  28c6							;;line 1382;; 
   5365  28c6
   5366  28c6				   .L0241		;;line 1383;;	_Bit7_M1_Moving{7} = 0	:  _Lost_Soul_X = 200  :  _Lost_Soul_Y = 200
   5367  28c6
   5368  28c6		       a5 ec		      LDA	_Bit7_M1_Moving
   5369  28c8		       29 7f		      AND	#127
   5370  28ca		       85 ec		      STA	_Bit7_M1_Moving
   5371  28cc		       a9 c8		      LDA	#200
   5372  28ce		       85 84		      STA	_Lost_Soul_X
   5373  28d0		       85 89		      STA	_Lost_Soul_Y
   5374  28d2				   .
   5375  28d2							;;line 1384;; 
   5376  28d2
   5377  28d2				   .
   5378  28d2							;;line 1385;; 
   5379  28d2
   5380  28d2				   .
   5381  28d2							;;line 1386;; 
   5382  28d2
   5383  28d2				   .
   5384  28d2							;;line 1387;; 
   5385  28d2
   5386  28d2				   .L0242		;;line 1388;;	if _Bit3_Auto_Play{3} then goto __AP_Skip_Enemy_Points_And_Difficulty
   5387  28d2
   5388  28d2		       a5 ec		      LDA	_Bit3_Auto_Play
   5389  28d4		       29 08		      AND	#8
   5390  28d6		       f0 03		      BEQ	.skipL0242
   5391  28d8				   .condpart106
   5392  28d8		       4c 03 3b 	      jmp	.__AP_Skip_Enemy_Points_And_Difficulty
   5393  28db
   5394  28db				   .skipL0242
   5395  28db				   .
   5396  28db							;;line 1389;; 
   5397  28db
   5398  28db				   .
   5399  28db							;;line 1390;; 
   5400  28db
   5401  28db				   .
   5402  28db							;;line 1391;; 
   5403  28db
   5404  28db				   .
   5405  28db							;;line 1392;; 
   5406  28db
   5407  28db				   .L0243		;;line 1393;;	score = score  +  1
   5408  28db
   5409  28db		       f8		      SED
   5410  28dc		       18		      CLC
   5411  28dd		       a5 95		      LDA	score+2
   5412  28df		       69 01		      ADC	#$01
   5413  28e1		       85 95		      STA	score+2
   5414  28e3		       a5 94		      LDA	score+1
   5415  28e5		       69 00		      ADC	#$00
   5416  28e7		       85 94		      STA	score+1
   5417  28e9		       a5 93		      LDA	score
   5418  28eb		       69 00		      ADC	#$00
   5419  28ed		       85 93		      STA	score
   5420  28ef		       d8		      CLD
   5421  28f0				   .
   5422  28f0							;;line 1394;; 
   5423  28f0
   5424  28f0				   .L0244		;;line 1395;;	if pfscore2  <	%11111111 then pfscore2 = pfscore2  |  1
   5425  28f0
   5426  28f0		       a5 f3		      LDA	pfscore2
   5427  28f2		       c9 ff		      CMP	#%11111111
   5428  28f4		       b0 06		      BCS	.skipL0244
   5429  28f6				   .condpart107
   5430  28f6		       a5 f3		      LDA	pfscore2
   5431  28f8		       09 01		      ORA	#1
   5432  28fa		       85 f3		      STA	pfscore2
   5433  28fc				   .skipL0244
   5434  28fc				   .
   5435  28fc							;;line 1396;; 
   5436  28fc
   5437  28fc				   .
   5438  28fc							;;line 1397;; 
   5439  28fc
   5440  28fc				   .L0245		;;line 1398;;	AUDC1 = %01010000
   5441  28fc
   5442  28fc		       a9 50		      LDA	#%01010000
   5443  28fe		       85 16		      STA	AUDC1
   5444  2900				   .L0246		;;line 1399;;	AUDF1 = 10
   5445  2900
   5446  2900		       a9 0a		      LDA	#10
   5447  2902		       85 18		      STA	AUDF1
   5448  2904				   .L0247		;;line 1400;;	AUDV1 = 10
   5449  2904
   5450  2904		       a9 0a		      LDA	#10
   5451  2906		       85 1a		      STA	AUDV1
   5452  2908				   .
   5453  2908							;;line 1401;; 
   5454  2908
   5455  2908				   .
   5456  2908							;;line 1402;; 
   5457  2908
   5458  2908				   .
   5459  2908							;;line 1403;; 
   5460  2908
   5461  2908				   .
   5462  2908							;;line 1404;; 
   5463  2908
   5464  2908				   .L0248		;;line 1405;;	_Kill_Count = _Kill_Count  +  1
   5465  2908
   5466  2908		       e6 e2		      INC	_Kill_Count
   5467  290a				   .
   5468  290a							;;line 1406;; 
   5469  290a
   5470  290a				   .
   5471  290a							;;line 1407;; 
   5472  290a
   5473  290a				   .
   5474  290a							;;line 1408;; 
   5475  290a
   5476  290a				   .
   5477  290a							;;line 1409;; 
   5478  290a
   5479  290a				   .
   5480  290a							;;line 1410;; 
   5481  290a
   5482  290a				   .L0249		;;line 1411;;	if _Kill_Count	>=  3 then _Kill_Count = 0
   5483  290a
   5484  290a		       a5 e2		      LDA	_Kill_Count
   5485  290c		       c9 03		      CMP	#3
   5486  290e		       90 04		      BCC	.skipL0249
   5487  2910				   .condpart108
   5488  2910		       a9 00		      LDA	#0
   5489  2912		       85 e2		      STA	_Kill_Count
   5490  2914				   .skipL0249
   5491  2914				   .
   5492  2914							;;line 1412;; 
   5493  2914
   5494  2914				   .
   5495  2914							;;line 1413;; 
   5496  2914
   5497  2914				   .__AP_Skip_Enemy_Points
   5498  2914							;;line 1414;; __AP_Skip_Enemy_Points
   5499  2914
   5500  2914				   .
   5501  2914							;;line 1415;; 
   5502  2914
   5503  2914				   .
   5504  2914							;;line 1416;; 
   5505  2914
   5506  2914				   .
   5507  2914							;;line 1417;; 
   5508  2914
   5509  2914				   .
   5510  2914							;;line 1418;; 
   5511  2914
   5512  2914				   .L0250		;;line 1419;;	if _Kill_Count = 1 then _Will_Aftn_AI = 1
   5513  2914
   5514  2914		       a5 e2		      LDA	_Kill_Count
   5515  2916		       c9 01		      CMP	#1
   5516  2918		       d0 04		      BNE	.skipL0250
   5517  291a				   .condpart109
   5518  291a		       a9 01		      LDA	#1
   5519  291c		       85 e1		      STA	_Will_Aftn_AI
   5520  291e				   .skipL0250
   5521  291e				   .L0251		;;line 1420;;	if _Kill_Count = 2 then _Will_Aftn_AI = 2
   5522  291e
   5523  291e		       a5 e2		      LDA	_Kill_Count
   5524  2920		       c9 02		      CMP	#2
   5525  2922		       d0 04		      BNE	.skipL0251
   5526  2924				   .condpart110
   5527  2924		       a9 02		      LDA	#2
   5528  2926		       85 e1		      STA	_Will_Aftn_AI
   5529  2928				   .skipL0251
   5530  2928				   .L0252		;;line 1421;;	if _Kill_Count = 0 then _Will_Aftn_AI = 0
   5531  2928
   5532  2928		       a5 e2		      LDA	_Kill_Count
   5533  292a		       c9 00		      CMP	#0
   5534  292c		       d0 04		      BNE	.skipL0252
   5535  292e				   .condpart111
   5536  292e		       a9 00		      LDA	#0
   5537  2930		       85 e1		      STA	_Will_Aftn_AI
   5538  2932				   .skipL0252
   5539  2932				   .
   5540  2932							;;line 1422;; 
   5541  2932
   5542  2932				   .
   5543  2932							;;line 1423;; 
   5544  2932
   5545  2932				   .
   5546  2932							;;line 1424;; 
   5547  2932
   5548  2932				   .
   5549  2932							;;line 1425;; 
   5550  2932
   5551  2932				   .L0253		;;line 1426;;	_WillX =  ( rand  &  150 )   +	5
   5552  2932
   5553  2932							; complex statement detected
   5554  2932		       a5 a2		      lda	rand
   5555  2934		       4a		      lsr
   5556  2935					      ifconst	rand16
   5557  2935		       26 ed		      rol	rand16
   5558  2937					      endif
   5559  2937		       90 02		      bcc	*+4
   5560  2939		       49 b4		      eor	#$B4
   5561  293b		       85 a2		      sta	rand
   5562  293d					      ifconst	rand16
   5563  293d		       45 ed		      eor	rand16
   5564  293f					      endif
   5565  293f		       29 96		      AND	#150
   5566  2941		       18		      CLC
   5567  2942		       69 05		      ADC	#5
   5568  2944		       85 80		      STA	_WillX
   5569  2946				   .L0254		;;line 1427;;	_WillY =  ( rand  &  80 )   +  5
   5570  2946
   5571  2946							; complex statement detected
   5572  2946		       a5 a2		      lda	rand
   5573  2948		       4a		      lsr
   5574  2949					      ifconst	rand16
   5575  2949		       26 ed		      rol	rand16
   5576  294b					      endif
   5577  294b		       90 02		      bcc	*+4
   5578  294d		       49 b4		      eor	#$B4
   5579  294f		       85 a2		      sta	rand
   5580  2951					      ifconst	rand16
   5581  2951		       45 ed		      eor	rand16
   5582  2953					      endif
   5583  2953		       29 50		      AND	#80
   5584  2955		       18		      CLC
   5585  2956		       69 05		      ADC	#5
   5586  2958		       85 85		      STA	_WillY
   5587  295a				   .
   5588  295a							;;line 1428;; 
   5589  295a
   5590  295a				   .__Skip_Shot_Enemy
   5591  295a							;;line 1429;; __Skip_Shot_Enemy
   5592  295a
   5593  295a				   .
   5594  295a							;;line 1430;; 
   5595  295a
   5596  295a				   .
   5597  295a							;;line 1431;; 
   5598  295a
   5599  295a				   .
   5600  295a							;;line 1432;; 
   5601  295a
   5602  295a				   .
   5603  295a							;;line 1433;; 
   5604  295a
   5605  295a				   .
   5606  295a							;;line 1434;; 
   5607  295a
   5608  295a				   .
   5609  295a							;;line 1435;; 
   5610  295a
   5611  295a				   .
   5612  295a							;;line 1436;; 
   5613  295a
   5614  295a				   .
   5615  295a							;;line 1437;; 
   5616  295a
   5617  295a				   .
   5618  295a							;;line 1438;; 
   5619  295a
   5620  295a				   .
   5621  295a							;;line 1439;; 
   5622  295a
   5623  295a				   .
   5624  295a							;;line 1440;; 
   5625  295a
   5626  295a				   .
   5627  295a							;;line 1441;; 
   5628  295a
   5629  295a				   .L0255		;;line 1442;;	if !_Bit3_Auto_Play{3} then goto __AP_Skip_Flip
   5630  295a
   5631  295a		       a5 ec		      LDA	_Bit3_Auto_Play
   5632  295c		       29 08		      AND	#8
   5633  295e		       d0 03		      BNE	.skipL0255
   5634  2960				   .condpart112
   5635  2960		       4c ac 39 	      jmp	.__AP_Skip_Flip
   5636  2963
   5637  2963				   .skipL0255
   5638  2963				   .
   5639  2963							;;line 1443;; 
   5640  2963
   5641  2963				   .
   5642  2963							;;line 1444;; 
   5643  2963
   5644  2963				   .
   5645  2963							;;line 1445;; 
   5646  2963
   5647  2963				   .
   5648  2963							;;line 1446;; 
   5649  2963
   5650  2963				   .L0256		;;line 1447;;	_AP_2_Sec_Score_Flip = _AP_2_Sec_Score_Flip  +	1
   5651  2963
   5652  2963		       e6 de		      INC	_AP_2_Sec_Score_Flip
   5653  2965				   .
   5654  2965							;;line 1448;; 
   5655  2965
   5656  2965				   .
   5657  2965							;;line 1449;; 
   5658  2965
   5659  2965				   .
   5660  2965							;;line 1450;; 
   5661  2965
   5662  2965				   .
   5663  2965							;;line 1451;; 
   5664  2965
   5665  2965				   .
   5666  2965							;;line 1452;; 
   5667  2965
   5668  2965				   .L0257		;;line 1453;;	if _AP_2_Sec_Score_Flip  <  120 then goto __AP_Skip_Flip
   5669  2965
   5670  2965		       a5 de		      LDA	_AP_2_Sec_Score_Flip
   5671  2967		       c9 78		      CMP	#120
   5672  2969		       b0 03		      BCS	.skipL0257
   5673  296b				   .condpart113
   5674  296b		       4c ac 39 	      jmp	.__AP_Skip_Flip
   5675  296e
   5676  296e				   .skipL0257
   5677  296e				   .
   5678  296e							;;line 1454;; 
   5679  296e
   5680  296e				   .
   5681  296e							;;line 1455;; 
   5682  296e
   5683  296e				   .
   5684  296e							;;line 1456;; 
   5685  296e
   5686  296e				   .
   5687  296e							;;line 1457;; 
   5688  296e
   5689  296e				   .L0258		;;line 1458;;	_AP_2_Sec_Score_Flip = 0  :  _Bit6_Swap_Scores{6} = !_Bit6_Swap_Scores{6}
   5690  296e
   5691  296e		       a9 00		      LDA	#0
   5692  2970		       85 de		      STA	_AP_2_Sec_Score_Flip
   5693  2972		       a5 ec		      LDA	_Bit6_Swap_Scores
   5694  2974		       29 40		      AND	#64
   5695  2976		       08		      PHP
   5696  2977		       a5 ec		      LDA	_Bit6_Swap_Scores
   5697  2979		       29 bf		      AND	#191
   5698  297b		       28		      PLP
   5699  297c		       d0 02		      .byte.b	$D0, $02
   5700  297e		       09 40		      ORA	#64
   5701  2980		       85 ec		      STA	_Bit6_Swap_Scores
   5702  2982				   .
   5703  2982							;;line 1459;; 
   5704  2982
   5705  2982				   .
   5706  2982							;;line 1460;; 
   5707  2982
   5708  2982				   .
   5709  2982							;;line 1461;; 
   5710  2982
   5711  2982				   .
   5712  2982							;;line 1462;; 
   5713  2982
   5714  2982				   .L0259		;;line 1463;;	if !_Bit6_Swap_Scores{6} then goto __AP_Skip_HiScore_Swap
   5715  2982
   5716  2982		       24 ec		      BIT	_Bit6_Swap_Scores
   5717  2984		       70 03		      BVS	.skipL0259
   5718  2986				   .condpart114
   5719  2986		       4c 9c 39 	      jmp	.__AP_Skip_HiScore_Swap
   5720  2989
   5721  2989				   .skipL0259
   5722  2989				   .
   5723  2989							;;line 1464;; 
   5724  2989
   5725  2989				   .
   5726  2989							;;line 1465;; 
   5727  2989
   5728  2989				   .
   5729  2989							;;line 1466;; 
   5730  2989
   5731  2989				   .
   5732  2989							;;line 1467;; 
   5733  2989
   5734  2989				   .L0260		;;line 1468;;	scorecolor = $AE
   5735  2989
   5736  2989		       a9 ae		      LDA	#$AE
   5737  298b		       85 a3		      STA	scorecolor
   5738  298d				   .
   5739  298d							;;line 1469;; 
   5740  298d
   5741  298d				   .L0261		;;line 1470;;	_sc1 = _High_Score1  :	_sc2 = _High_Score2  :	_sc3 = _High_Score3
   5742  298d
   5743  298d		       a5 e9		      LDA	_High_Score1
   5744  298f		       85 93		      STA	_sc1
   5745  2991		       a5 ea		      LDA	_High_Score2
   5746  2993		       85 94		      STA	_sc2
   5747  2995		       a5 eb		      LDA	_High_Score3
   5748  2997		       85 95		      STA	_sc3
   5749  2999				   .
   5750  2999							;;line 1471;; 
   5751  2999
   5752  2999				   .L0262		;;line 1472;;	goto __AP_Skip_Flip
   5753  2999
   5754  2999		       4c ac 39 	      jmp	.__AP_Skip_Flip
   5755  299c
   5756  299c				   .
   5757  299c							;;line 1473;; 
   5758  299c
   5759  299c				   .__AP_Skip_HiScore_Swap
   5760  299c							;;line 1474;; __AP_Skip_HiScore_Swap
   5761  299c
   5762  299c				   .
   5763  299c							;;line 1475;; 
   5764  299c
   5765  299c				   .
   5766  299c							;;line 1476;; 
   5767  299c
   5768  299c				   .
   5769  299c							;;line 1477;; 
   5770  299c
   5771  299c				   .
   5772  299c							;;line 1478;; 
   5773  299c
   5774  299c				   .L0263		;;line 1479;;	scorecolor = $1C
   5775  299c
   5776  299c		       a9 1c		      LDA	#$1C
   5777  299e		       85 a3		      STA	scorecolor
   5778  29a0				   .
   5779  29a0							;;line 1480;; 
   5780  29a0
   5781  29a0				   .L0264		;;line 1481;;	_sc1 = _Score1_Mem  :  _sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem
   5782  29a0
   5783  29a0		       a5 e6		      LDA	_Score1_Mem
   5784  29a2		       85 93		      STA	_sc1
   5785  29a4		       a5 e7		      LDA	_Score2_Mem
   5786  29a6		       85 94		      STA	_sc2
   5787  29a8		       a5 e8		      LDA	_Score3_Mem
   5788  29aa		       85 95		      STA	_sc3
   5789  29ac				   .
   5790  29ac							;;line 1482;; 
   5791  29ac
   5792  29ac				   .__AP_Skip_Flip
   5793  29ac							;;line 1483;; __AP_Skip_Flip
   5794  29ac
   5795  29ac				   .
   5796  29ac							;;line 1484;; 
   5797  29ac
   5798  29ac				   .
   5799  29ac							;;line 1485;; 
   5800  29ac
   5801  29ac				   .
   5802  29ac							;;line 1486;; 
   5803  29ac
   5804  29ac				   .
   5805  29ac							;;line 1487;; 
   5806  29ac
   5807  29ac				   .
   5808  29ac							;;line 1488;; 
   5809  29ac
   5810  29ac				   .
   5811  29ac							;;line 1489;; 
   5812  29ac
   5813  29ac				   .
   5814  29ac							;;line 1490;; 
   5815  29ac
   5816  29ac				   .
   5817  29ac							;;line 1491;; 
   5818  29ac
   5819  29ac				   .
   5820  29ac							;;line 1492;; 
   5821  29ac
   5822  29ac				   .
   5823  29ac							;;line 1493;; 
   5824  29ac
   5825  29ac				   .
   5826  29ac							;;line 1494;; 
   5827  29ac
   5828  29ac				   .L0265		;;line 1495;;	if _Bit3_Auto_Play{3} then goto __AP_Skip_Pause
   5829  29ac
   5830  29ac		       a5 ec		      LDA	_Bit3_Auto_Play
   5831  29ae		       29 08		      AND	#8
   5832  29b0		       f0 03		      BEQ	.skipL0265
   5833  29b2				   .condpart115
   5834  29b2		       4c 2d 3a 	      jmp	.__AP_Skip_Pause
   5835  29b5
   5836  29b5				   .skipL0265
   5837  29b5				   .
   5838  29b5							;;line 1496;; 
   5839  29b5
   5840  29b5				   .
   5841  29b5							;;line 1497;; 
   5842  29b5
   5843  29b5				   .
   5844  29b5							;;line 1498;; 
   5845  29b5
   5846  29b5				   .
   5847  29b5							;;line 1499;; 
   5848  29b5
   5849  29b5				   .L0266		;;line 1500;;	_Bit1_BW_Check{1} = 0
   5850  29b5
   5851  29b5		       a5 e5		      LDA	_Bit1_BW_Check
   5852  29b7		       29 fd		      AND	#253
   5853  29b9		       85 e5		      STA	_Bit1_BW_Check
   5854  29bb				   .
   5855  29bb							;;line 1501;; 
   5856  29bb
   5857  29bb				   .L0267		;;line 1502;;	if switchbw then _Bit1_BW_Check{1} = 1
   5858  29bb
   5859  29bb		       a9 08		      lda	#8
   5860  29bd		       2c 82 02 	      bit	SWCHB
   5861  29c0		       d0 06		      BNE	.skipL0267
   5862  29c2				   .condpart116
   5863  29c2		       a5 e5		      LDA	_Bit1_BW_Check
   5864  29c4		       09 02		      ORA	#2
   5865  29c6		       85 e5		      STA	_Bit1_BW_Check
   5866  29c8				   .skipL0267
   5867  29c8				   .
   5868  29c8							;;line 1503;; 
   5869  29c8
   5870  29c8				   .
   5871  29c8							;;line 1504;; 
   5872  29c8
   5873  29c8				   .
   5874  29c8							;;line 1505;; 
   5875  29c8
   5876  29c8				   .
   5877  29c8							;;line 1506;; 
   5878  29c8
   5879  29c8				   .
   5880  29c8							;;line 1507;; 
   5881  29c8
   5882  29c8				   .L0268		;;line 1508;;	if genesispad{0}  &&  !INPT1{7} then _Bit1_BW_Check{1} = 1
   5883  29c8
   5884  29c8		       a5 d4		      LDA	genesispad
   5885  29ca		       4a		      LSR
   5886  29cb		       90 0a		      BCC	.skipL0268
   5887  29cd				   .condpart117
   5888  29cd		       24 09		      BIT	INPT1
   5889  29cf		       30 06		      BMI	.skip117then
   5890  29d1				   .condpart118
   5891  29d1		       a5 e5		      LDA	_Bit1_BW_Check
   5892  29d3		       09 02		      ORA	#2
   5893  29d5		       85 e5		      STA	_Bit1_BW_Check
   5894  29d7				   .skip117then
   5895  29d7				   .skipL0268
   5896  29d7				   .
   5897  29d7							;;line 1509;; 
   5898  29d7
   5899  29d7				   .
   5900  29d7							;;line 1510;; 
   5901  29d7
   5902  29d7				   .
   5903  29d7							;;line 1511;; 
   5904  29d7
   5905  29d7				   .
   5906  29d7							;;line 1512;; 
   5907  29d7
   5908  29d7				   .
   5909  29d7							;;line 1513;; 
   5910  29d7
   5911  29d7				   .L0269		;;line 1514;;	if _Bit0_BW_Mem{0} then if !_Bit1_BW_Check{1} then goto __Pause_Setup bank3
   5912  29d7
   5913  29d7		       a5 e5		      LDA	_Bit0_BW_Mem
   5914  29d9		       4a		      LSR
   5915  29da		       90 18		      BCC	.skipL0269
   5916  29dc				   .condpart119
   5917  29dc		       a5 e5		      LDA	_Bit1_BW_Check
   5918  29de		       29 02		      AND	#2
   5919  29e0		       d0 12		      BNE	.skip119then
   5920  29e2				   .condpart120
   5921  29e2		       85 ee		      sta	temp7
   5922  29e4		       a9 51		      lda	#>(.__Pause_Setup-1)
   5923  29e6		       48		      pha
   5924  29e7		       a9 a7		      lda	#<(.__Pause_Setup-1)
   5925  29e9		       48		      pha
   5926  29ea		       a5 ee		      lda	temp7
   5927  29ec		       48		      pha
   5928  29ed		       8a		      txa
   5929  29ee		       48		      pha
   5930  29ef		       a2 03		      ldx	#3
   5931  29f1		       4c eb ff 	      jmp	BS_jsr
   5932  29f4				   .skip119then
   5933  29f4				   .skipL0269
   5934  29f4				   .
   5935  29f4							;;line 1515;; 
   5936  29f4
   5937  29f4				   .L0270		;;line 1516;;	if !_Bit0_BW_Mem{0} then if _Bit1_BW_Check{1} then goto __Pause_Setup bank3
   5938  29f4
   5939  29f4		       a5 e5		      LDA	_Bit0_BW_Mem
   5940  29f6		       4a		      LSR
   5941  29f7		       b0 18		      BCS	.skipL0270
   5942  29f9				   .condpart121
   5943  29f9		       a5 e5		      LDA	_Bit1_BW_Check
   5944  29fb		       29 02		      AND	#2
   5945  29fd		       f0 12		      BEQ	.skip121then
   5946  29ff				   .condpart122
   5947  29ff		       85 ee		      sta	temp7
   5948  2a01		       a9 51		      lda	#>(.__Pause_Setup-1)
   5949  2a03		       48		      pha
   5950  2a04		       a9 a7		      lda	#<(.__Pause_Setup-1)
   5951  2a06		       48		      pha
   5952  2a07		       a5 ee		      lda	temp7
   5953  2a09		       48		      pha
   5954  2a0a		       8a		      txa
   5955  2a0b		       48		      pha
   5956  2a0c		       a2 03		      ldx	#3
   5957  2a0e		       4c eb ff 	      jmp	BS_jsr
   5958  2a11				   .skip121then
   5959  2a11				   .skipL0270
   5960  2a11				   .
   5961  2a11							;;line 1517;; 
   5962  2a11
   5963  2a11				   .
   5964  2a11							;;line 1518;; 
   5965  2a11
   5966  2a11				   .
   5967  2a11							;;line 1519;; 
   5968  2a11
   5969  2a11				   .
   5970  2a11							;;line 1520;; 
   5971  2a11
   5972  2a11				   .L0271		;;line 1521;;	if joy1fire  &&  !_Bit1_FireB_Restrainer{1} then goto __Pause_Setup bank3
   5973  2a11
   5974  2a11		       24 0d		      bit	INPT5
   5975  2a13		       30 18		      BMI	.skipL0271
   5976  2a15				   .condpart123
   5977  2a15		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   5978  2a17		       29 02		      AND	#2
   5979  2a19		       d0 12		      BNE	.skip123then
   5980  2a1b				   .condpart124
   5981  2a1b		       85 ee		      sta	temp7
   5982  2a1d		       a9 51		      lda	#>(.__Pause_Setup-1)
   5983  2a1f		       48		      pha
   5984  2a20		       a9 a7		      lda	#<(.__Pause_Setup-1)
   5985  2a22		       48		      pha
   5986  2a23		       a5 ee		      lda	temp7
   5987  2a25		       48		      pha
   5988  2a26		       8a		      txa
   5989  2a27		       48		      pha
   5990  2a28		       a2 03		      ldx	#3
   5991  2a2a		       4c eb ff 	      jmp	BS_jsr
   5992  2a2d				   .skip123then
   5993  2a2d				   .skipL0271
   5994  2a2d				   .
   5995  2a2d							;;line 1522;; 
   5996  2a2d
   5997  2a2d				   .__AP_Skip_Pause
   5998  2a2d							;;line 1523;; __AP_Skip_Pause
   5999  2a2d
   6000  2a2d				   .
   6001  2a2d							;;line 1524;; 
   6002  2a2d
   6003  2a2d				   .
   6004  2a2d							;;line 1525;; 
   6005  2a2d
   6006  2a2d				   .
   6007  2a2d							;;line 1526;; 
   6008  2a2d
   6009  2a2d				   .
   6010  2a2d							;;line 1527;; 
   6011  2a2d
   6012  2a2d				   .
   6013  2a2d							;;line 1528;; 
   6014  2a2d
   6015  2a2d				   .
   6016  2a2d							;;line 1529;; 
   6017  2a2d
   6018  2a2d				   .L0272		;;line 1530;;	player0color:
   6019  2a2d
   6020  2a2d		       a2 e4		      LDX	#<playercolorL0272_0
   6021  2a2f		       86 90		      STX	player0color
   6022  2a31		       a9 f5		      LDA	#>playercolorL0272_0
   6023  2a33		       85 91		      STA	player0color+1
   6024  2a35				   .L0273		;;line 1552;;	player0:
   6025  2a35
   6026  2a35		       a2 00		      LDX	#<playerL0273_0
   6027  2a37		       86 8a		      STX	player0pointerlo
   6028  2a39		       a9 f6		      LDA	#>playerL0273_0
   6029  2a3b		       85 8b		      STA	player0pointerhi
   6030  2a3d		       a9 13		      LDA	#19
   6031  2a3f		       85 8e		      STA	player0height
   6032  2a41				   .
   6033  2a41							;;line 1574;; 
   6034  2a41
   6035  2a41				   .
   6036  2a41							;;line 1575;; 
   6037  2a41
   6038  2a41				   .
   6039  2a41							;;line 1576;; 
   6040  2a41
   6041  2a41				   .
   6042  2a41							;;line 1577;; 
   6043  2a41
   6044  2a41				   .
   6045  2a41							;;line 1578;; 
   6046  2a41
   6047  2a41				   .
   6048  2a41							;;line 1579;; 
   6049  2a41
   6050  2a41				   .L0274		;;line 1580;;	drawscreen
   6051  2a41
   6052  2a41		       85 ee		      sta	temp7
   6053  2a43		       a9 3a		      lda	#>(ret_point21-1)
   6054  2a45		       48		      pha
   6055  2a46		       a9 58		      lda	#<(ret_point21-1)
   6056  2a48		       48		      pha
   6057  2a49		       a9 f4		      lda	#>(drawscreen-1)
   6058  2a4b		       48		      pha
   6059  2a4c		       a9 3b		      lda	#<(drawscreen-1)
   6060  2a4e		       48		      pha
   6061  2a4f		       a5 ee		      lda	temp7
   6062  2a51		       48		      pha
   6063  2a52		       8a		      txa
   6064  2a53		       48		      pha
   6065  2a54		       a2 08		      ldx	#8
   6066  2a56		       4c eb ff 	      jmp	BS_jsr
   6067  2a59				   ret_point21
   6068  2a59				   .
   6069  2a59							;;line 1581;; 
   6070  2a59
   6071  2a59				   .
   6072  2a59							;;line 1582;; 
   6073  2a59
   6074  2a59				   .
   6075  2a59							;;line 1583;; 
   6076  2a59
   6077  2a59				   .
   6078  2a59							;;line 1584;; 
   6079  2a59
   6080  2a59				   .
   6081  2a59							;;line 1585;; 
   6082  2a59
   6083  2a59				   .
   6084  2a59							;;line 1586;; 
   6085  2a59
   6086  2a59				   .
   6087  2a59							;;line 1587;; 
   6088  2a59
   6089  2a59				   .
   6090  2a59							;;line 1588;; 
   6091  2a59
   6092  2a59				   .
   6093  2a59							;;line 1589;; 
   6094  2a59
   6095  2a59				   .
   6096  2a59							;;line 1590;; 
   6097  2a59
   6098  2a59				   .
   6099  2a59							;;line 1591;; 
   6100  2a59
   6101  2a59				   .
   6102  2a59							;;line 1592;; 
   6103  2a59
   6104  2a59				   .
   6105  2a59							;;line 1593;; 
   6106  2a59
   6107  2a59				   .
   6108  2a59							;;line 1594;; 
   6109  2a59
   6110  2a59				   .
   6111  2a59							;;line 1595;; 
   6112  2a59
   6113  2a59				   .L0275		;;line 1596;;	if !_Bit2_Game_Control{2} then goto __Skip_Check_G_Over
   6114  2a59
   6115  2a59		       a5 ec		      LDA	_Bit2_Game_Control
   6116  2a5b		       29 04		      AND	#4
   6117  2a5d		       d0 03		      BNE	.skipL0275
   6118  2a5f				   .condpart125
   6119  2a5f		       4c 9e 3a 	      jmp	.__Skip_Check_G_Over
   6120  2a62
   6121  2a62				   .skipL0275
   6122  2a62				   .
   6123  2a62							;;line 1597;; 
   6124  2a62
   6125  2a62				   .
   6126  2a62							;;line 1598;; 
   6127  2a62
   6128  2a62				   .
   6129  2a62							;;line 1599;; 
   6130  2a62
   6131  2a62				   .
   6132  2a62							;;line 1600;; 
   6133  2a62
   6134  2a62				   .
   6135  2a62							;;line 1601;; 
   6136  2a62
   6137  2a62				   .L0276		;;line 1602;;	if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2} = 0  :  _sc1 = _Score1_Mem  :	_sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem  :  goto __Start_Restart bank1
   6138  2a62
   6139  2a62		       a5 ec		      LDA	_Bit3_Auto_Play
   6140  2a64		       29 08		      AND	#8
   6141  2a66		       f0 24		      BEQ	.skipL0276
   6142  2a68				   .condpart126
   6143  2a68		       a5 ec		      LDA	_Bit2_Game_Control
   6144  2a6a		       29 fb		      AND	#251
   6145  2a6c		       85 ec		      STA	_Bit2_Game_Control
   6146  2a6e		       a5 e6		      LDA	_Score1_Mem
   6147  2a70		       85 93		      STA	_sc1
   6148  2a72		       a5 e7		      LDA	_Score2_Mem
   6149  2a74		       85 94		      STA	_sc2
   6150  2a76		       a5 e8		      LDA	_Score3_Mem
   6151  2a78		       85 95		      STA	_sc3
   6152  2a7a		       85 ee		      sta	temp7
   6153  2a7c		       a9 0f		      lda	#>(.__Start_Restart-1)
   6154  2a7e		       48		      pha
   6155  2a7f		       a9 ff		      lda	#<(.__Start_Restart-1)
   6156  2a81		       48		      pha
   6157  2a82		       a5 ee		      lda	temp7
   6158  2a84		       48		      pha
   6159  2a85		       8a		      txa
   6160  2a86		       48		      pha
   6161  2a87		       a2 01		      ldx	#1
   6162  2a89		       4c eb ff 	      jmp	BS_jsr
   6163  2a8c				   .skipL0276
   6164  2a8c				   .
   6165  2a8c							;;line 1603;; 
   6166  2a8c
   6167  2a8c				   .
   6168  2a8c							;;line 1604;; 
   6169  2a8c
   6170  2a8c				   .
   6171  2a8c							;;line 1605;; 
   6172  2a8c
   6173  2a8c				   .
   6174  2a8c							;;line 1606;; 
   6175  2a8c
   6176  2a8c				   .L0277		;;line 1607;;	goto __Game_Over_Setup bank3
   6177  2a8c
   6178  2a8c		       85 ee		      sta	temp7
   6179  2a8e		       a9 4f		      lda	#>(.__Game_Over_Setup-1)
   6180  2a90		       48		      pha
   6181  2a91		       a9 ff		      lda	#<(.__Game_Over_Setup-1)
   6182  2a93		       48		      pha
   6183  2a94		       a5 ee		      lda	temp7
   6184  2a96		       48		      pha
   6185  2a97		       8a		      txa
   6186  2a98		       48		      pha
   6187  2a99		       a2 03		      ldx	#3
   6188  2a9b		       4c eb ff 	      jmp	BS_jsr
   6189  2a9e				   .
   6190  2a9e							;;line 1608;; 
   6191  2a9e
   6192  2a9e				   .__Skip_Check_G_Over
   6193  2a9e							;;line 1609;; __Skip_Check_G_Over
   6194  2a9e
   6195  2a9e				   .
   6196  2a9e							;;line 1610;; 
   6197  2a9e
   6198  2a9e				   .
   6199  2a9e							;;line 1611;; 
   6200  2a9e
   6201  2a9e				   .
   6202  2a9e							;;line 1612;; 
   6203  2a9e
   6204  2a9e				   .
   6205  2a9e							;;line 1613;; 
   6206  2a9e
   6207  2a9e				   .
   6208  2a9e							;;line 1614;; 
   6209  2a9e
   6210  2a9e				   .
   6211  2a9e							;;line 1615;; 
   6212  2a9e
   6213  2a9e				   .
   6214  2a9e							;;line 1616;; 
   6215  2a9e
   6216  2a9e				   .
   6217  2a9e							;;line 1617;; 
   6218  2a9e
   6219  2a9e				   .
   6220  2a9e							;;line 1618;; 
   6221  2a9e
   6222  2a9e				   .
   6223  2a9e							;;line 1619;; 
   6224  2a9e
   6225  2a9e				   .
   6226  2a9e							;;line 1620;; 
   6227  2a9e
   6228  2a9e				   .
   6229  2a9e							;;line 1621;; 
   6230  2a9e
   6231  2a9e				   .
   6232  2a9e							;;line 1622;; 
   6233  2a9e
   6234  2a9e				   .
   6235  2a9e							;;line 1623;; 
   6236  2a9e
   6237  2a9e				   .L0278		;;line 1624;;	if !_Bit3_Auto_Play{3} then goto __AP_Skip_Reset
   6238  2a9e
   6239  2a9e		       a5 ec		      LDA	_Bit3_Auto_Play
   6240  2aa0		       29 08		      AND	#8
   6241  2aa2		       d0 03		      BNE	.skipL0278
   6242  2aa4				   .condpart127
   6243  2aa4		       4c d3 3a 	      jmp	.__AP_Skip_Reset
   6244  2aa7
   6245  2aa7				   .skipL0278
   6246  2aa7				   .
   6247  2aa7							;;line 1625;; 
   6248  2aa7
   6249  2aa7				   .
   6250  2aa7							;;line 1626;; 
   6251  2aa7
   6252  2aa7				   .
   6253  2aa7							;;line 1627;; 
   6254  2aa7
   6255  2aa7				   .
   6256  2aa7							;;line 1628;; 
   6257  2aa7
   6258  2aa7				   .
   6259  2aa7							;;line 1629;; 
   6260  2aa7
   6261  2aa7				   .
   6262  2aa7							;;line 1630;; 
   6263  2aa7
   6264  2aa7				   .L0279		;;line 1631;;	if switchreset	||  joy0fire then _Bit3_Auto_Play{3} = 0  :  _Bit2_Game_Control{2} = 1	:  goto __Start_Restart bank1
   6265  2aa7
   6266  2aa7		       a9 01		      lda	#1
   6267  2aa9		       2c 82 02 	      bit	SWCHB
   6268  2aac		       d0 03		      BNE	.skipL0279
   6269  2aae				   .condpart128
   6270  2aae		       4c b5 3a 	      jmp	.condpart129
   6271  2ab1				   .skipL0279
   6272  2ab1		       24 0c		      bit	INPT4
   6273  2ab3		       30 1e		      BMI	.skip11OR
   6274  2ab5				   .condpart129
   6275  2ab5		       a5 ec		      LDA	_Bit3_Auto_Play
   6276  2ab7		       29 f7		      AND	#247
   6277  2ab9		       85 ec		      STA	_Bit3_Auto_Play
   6278  2abb		       a5 ec		      LDA	_Bit2_Game_Control
   6279  2abd		       09 04		      ORA	#4
   6280  2abf		       85 ec		      STA	_Bit2_Game_Control
   6281  2ac1		       85 ee		      sta	temp7
   6282  2ac3		       a9 0f		      lda	#>(.__Start_Restart-1)
   6283  2ac5		       48		      pha
   6284  2ac6		       a9 ff		      lda	#<(.__Start_Restart-1)
   6285  2ac8		       48		      pha
   6286  2ac9		       a5 ee		      lda	temp7
   6287  2acb		       48		      pha
   6288  2acc		       8a		      txa
   6289  2acd		       48		      pha
   6290  2ace		       a2 01		      ldx	#1
   6291  2ad0		       4c eb ff 	      jmp	BS_jsr
   6292  2ad3				   .skip11OR
   6293  2ad3				   .
   6294  2ad3							;;line 1632;; 
   6295  2ad3
   6296  2ad3				   .__AP_Skip_Reset
   6297  2ad3							;;line 1633;; __AP_Skip_Reset
   6298  2ad3
   6299  2ad3				   .
   6300  2ad3							;;line 1634;; 
   6301  2ad3
   6302  2ad3				   .
   6303  2ad3							;;line 1635;; 
   6304  2ad3
   6305  2ad3				   .
   6306  2ad3							;;line 1636;; 
   6307  2ad3
   6308  2ad3				   .
   6309  2ad3							;;line 1637;; 
   6310  2ad3
   6311  2ad3				   .
   6312  2ad3							;;line 1638;; 
   6313  2ad3
   6314  2ad3				   .L0280		;;line 1639;;	if !switchreset then _Bit0_Reset_Restrainer{0} = 0  :  goto __Main_Loop
   6315  2ad3
   6316  2ad3		       a9 01		      lda	#1
   6317  2ad5		       2c 82 02 	      bit	SWCHB
   6318  2ad8		       f0 09		      BEQ	.skipL0280
   6319  2ada				   .condpart130
   6320  2ada		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6321  2adc		       29 fe		      AND	#254
   6322  2ade		       85 ec		      STA	_Bit0_Reset_Restrainer
   6323  2ae0		       4c 03 31 	      jmp	.__Main_Loop
   6324  2ae3
   6325  2ae3				   .skipL0280
   6326  2ae3				   .
   6327  2ae3							;;line 1640;; 
   6328  2ae3
   6329  2ae3				   .
   6330  2ae3							;;line 1641;; 
   6331  2ae3
   6332  2ae3				   .
   6333  2ae3							;;line 1642;; 
   6334  2ae3
   6335  2ae3				   .
   6336  2ae3							;;line 1643;; 
   6337  2ae3
   6338  2ae3				   .
   6339  2ae3							;;line 1644;; 
   6340  2ae3
   6341  2ae3				   .L0281		;;line 1645;;	if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   6342  2ae3
   6343  2ae3		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6344  2ae5		       4a		      LSR
   6345  2ae6		       90 03		      BCC	.skipL0281
   6346  2ae8				   .condpart131
   6347  2ae8		       4c 03 31 	      jmp	.__Main_Loop
   6348  2aeb
   6349  2aeb				   .skipL0281
   6350  2aeb				   .
   6351  2aeb							;;line 1646;; 
   6352  2aeb
   6353  2aeb				   .
   6354  2aeb							;;line 1647;; 
   6355  2aeb
   6356  2aeb				   .
   6357  2aeb							;;line 1648;; 
   6358  2aeb
   6359  2aeb				   .
   6360  2aeb							;;line 1649;; 
   6361  2aeb
   6362  2aeb				   .L0282		;;line 1650;;	_Bit2_Game_Control{2} = 0
   6363  2aeb
   6364  2aeb		       a5 ec		      LDA	_Bit2_Game_Control
   6365  2aed		       29 fb		      AND	#251
   6366  2aef		       85 ec		      STA	_Bit2_Game_Control
   6367  2af1				   .
   6368  2af1							;;line 1651;; 
   6369  2af1
   6370  2af1				   .
   6371  2af1							;;line 1652;; 
   6372  2af1
   6373  2af1				   .
   6374  2af1							;;line 1653;; 
   6375  2af1
   6376  2af1				   .
   6377  2af1							;;line 1654;; 
   6378  2af1
   6379  2af1				   .
   6380  2af1							;;line 1655;; 
   6381  2af1
   6382  2af1				   .L0283		;;line 1656;;	goto __Game_Over_Setup bank3
   6383  2af1
   6384  2af1		       85 ee		      sta	temp7
   6385  2af3		       a9 4f		      lda	#>(.__Game_Over_Setup-1)
   6386  2af5		       48		      pha
   6387  2af6		       a9 ff		      lda	#<(.__Game_Over_Setup-1)
   6388  2af8		       48		      pha
   6389  2af9		       a5 ee		      lda	temp7
   6390  2afb		       48		      pha
   6391  2afc		       8a		      txa
   6392  2afd		       48		      pha
   6393  2afe		       a2 03		      ldx	#3
   6394  2b00		       4c eb ff 	      jmp	BS_jsr
   6395  2b03				   .
   6396  2b03							;;line 1657;; 
   6397  2b03
   6398  2b03				   .
   6399  2b03							;;line 1658;; 
   6400  2b03
   6401  2b03				   .
   6402  2b03							;;line 1659;; 
   6403  2b03
   6404  2b03				   .
   6405  2b03							;;line 1660;; 
   6406  2b03
   6407  2b03				   .
   6408  2b03							;;line 1661;; 
   6409  2b03
   6410  2b03				   .
   6411  2b03							;;line 1662;; 
   6412  2b03
   6413  2b03				   .
   6414  2b03							;;line 1663;; 
   6415  2b03
   6416  2b03				   .
   6417  2b03							;;line 1664;; 
   6418  2b03
   6419  2b03				   .
   6420  2b03							;;line 1665;; 
   6421  2b03
   6422  2b03				   .
   6423  2b03							;;line 1666;; 
   6424  2b03
   6425  2b03				   .
   6426  2b03							;;line 1667;; 
   6427  2b03
   6428  2b03				   .
   6429  2b03							;;line 1668;; 
   6430  2b03
   6431  2b03				   .
   6432  2b03							;;line 1669;; 
   6433  2b03
   6434  2b03				   .
   6435  2b03							;;line 1670;; 
   6436  2b03
   6437  2b03				   .__AP_Skip_Enemy_Points_And_Difficulty
   6438  2b03							;;line 1671;; __AP_Skip_Enemy_Points_And_Difficulty
   6439  2b03
   6440  2b03				   .
   6441  2b03							;;line 1672;; 
   6442  2b03
   6443  2b03				   .
   6444  2b03							;;line 1673;; 
   6445  2b03
   6446  2b03				   .L0284		;;line 1674;;	bank 3
   6447  2b03
   6448  2b03					      if	ECHO2
      1233 bytes of ROM space left in bank 2
   6449  2b03					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   6450  2b03					      endif
   6451  2b03		       00 01	   ECHO2      =	1
   6452  2fd4					      ORG	$2FF4-bscode_length
   6453  2fd4					      RORG	$3FF4-bscode_length
   6454  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   6455  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   6456  2fd6				  -	      stx	FASTFETCH
   6457  2fd6					      endif
   6458  2fd6		       9a		      txs
   6459  2fd7				  -	      if	bankswitch == 64
   6460  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6461  2fd7					      else
   6462  2fd7		       a9 f2		      lda	#>(start-1)
   6463  2fd9					      endif
   6464  2fd9		       48		      pha
   6465  2fda		       a9 51		      lda	#<(start-1)
   6466  2fdc		       48		      pha
   6467  2fdd		       48		      pha
   6468  2fde		       8a		      txa
   6469  2fdf		       48		      pha
   6470  2fe0		       ba		      tsx
   6471  2fe1					      if	bankswitch != 64
   6472  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   6473  2fe3		       2a		      rol
   6474  2fe4		       2a		      rol
   6475  2fe5		       2a		      rol
   6476  2fe6		       2a		      rol
   6477  2fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6478  2fe9		       aa		      tax
   6479  2fea		       e8		      inx
   6480  2feb				  -	      else
   6481  2feb				  -	      lda	4,x	; get high byte of return address
   6482  2feb				  -	      tay
   6483  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6484  2feb				  -	      sta	4,x
   6485  2feb				  -	      tya
   6486  2feb				  -	      lsr
   6487  2feb				  -	      lsr
   6488  2feb				  -	      lsr
   6489  2feb				  -	      lsr
   6490  2feb				  -	      tax
   6491  2feb				  -	      inx
   6492  2feb					      endif
   6493  2feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   6494  2fee		       68		      pla
   6495  2fef		       aa		      tax
   6496  2ff0		       68		      pla
   6497  2ff1		       60		      rts
   6498  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6499  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6500  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6501  2ff2					      endif
   6502  2ffc					      ORG	$2FFC
   6503  2ffc					      RORG	$3FFC
   6504  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   6505  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   6506  3000					      ORG	$3000
   6507  3000					      RORG	$5000
   6508  3000				   .
   6509  3000							;;line 1675;; 
   6510  3000
   6511  3000				   .
   6512  3000							;;line 1676;; 
   6513  3000
   6514  3000				   .
   6515  3000							;;line 1677;; 
   6516  3000
   6517  3000				   .
   6518  3000							;;line 1678;; 
   6519  3000
   6520  3000				   .
   6521  3000							;;line 1679;; 
   6522  3000
   6523  3000				   .
   6524  3000							;;line 1680;; 
   6525  3000
   6526  3000				   .
   6527  3000							;;line 1681;; 
   6528  3000
   6529  3000				   .
   6530  3000							;;line 1682;; 
   6531  3000
   6532  3000				   .
   6533  3000							;;line 1683;; 
   6534  3000
   6535  3000				   .
   6536  3000							;;line 1684;; 
   6537  3000
   6538  3000				   .
   6539  3000							;;line 1685;; 
   6540  3000
   6541  3000				   .__Game_Over_Setup
   6542  3000							;;line 1686;; __Game_Over_Setup
   6543  3000
   6544  3000				   .
   6545  3000							;;line 1687;; 
   6546  3000
   6547  3000				   .
   6548  3000							;;line 1688;; 
   6549  3000
   6550  3000				   .
   6551  3000							;;line 1689;; 
   6552  3000
   6553  3000				   .
   6554  3000							;;line 1690;; 
   6555  3000
   6556  3000				   .
   6557  3000							;;line 1691;; 
   6558  3000
   6559  3000				   .
   6560  3000							;;line 1692;; 
   6561  3000
   6562  3000				   .
   6563  3000							;;line 1693;; 
   6564  3000
   6565  3000				   .
   6566  3000							;;line 1694;; 
   6567  3000
   6568  3000				   .
   6569  3000							;;line 1695;; 
   6570  3000
   6571  3000				   .
   6572  3000							;;line 1696;; 
   6573  3000
   6574  3000				   .
   6575  3000							;;line 1697;; 
   6576  3000
   6577  3000				   .L0285		;;line 1698;;	if _sc1  >  _High_Score1 then goto __New_High_Score
   6578  3000
   6579  3000		       a5 e9		      LDA	_High_Score1
   6580  3002		       c5 93		      CMP	_sc1
   6581  3004		       b0 03		      BCS	.skipL0285
   6582  3006				   .condpart132
   6583  3006		       4c 39 50 	      jmp	.__New_High_Score
   6584  3009
   6585  3009				   .skipL0285
   6586  3009				   .L0286		;;line 1699;;	if _sc1  <  _High_Score1 then goto __Skip_High_Score
   6587  3009
   6588  3009		       a5 93		      LDA	_sc1
   6589  300b		       c5 e9		      CMP	_High_Score1
   6590  300d		       b0 03		      BCS	.skipL0286
   6591  300f				   .condpart133
   6592  300f		       4c 45 50 	      jmp	.__Skip_High_Score
   6593  3012
   6594  3012				   .skipL0286
   6595  3012				   .
   6596  3012							;;line 1700;; 
   6597  3012
   6598  3012				   .
   6599  3012							;;line 1701;; 
   6600  3012
   6601  3012				   .
   6602  3012							;;line 1702;; 
   6603  3012
   6604  3012				   .
   6605  3012							;;line 1703;; 
   6606  3012
   6607  3012				   .L0287		;;line 1704;;	if _sc2  >  _High_Score2 then goto __New_High_Score
   6608  3012
   6609  3012		       a5 ea		      LDA	_High_Score2
   6610  3014		       c5 94		      CMP	_sc2
   6611  3016		       b0 03		      BCS	.skipL0287
   6612  3018				   .condpart134
   6613  3018		       4c 39 50 	      jmp	.__New_High_Score
   6614  301b
   6615  301b				   .skipL0287
   6616  301b				   .L0288		;;line 1705;;	if _sc2  <  _High_Score2 then goto __Skip_High_Score
   6617  301b
   6618  301b		       a5 94		      LDA	_sc2
   6619  301d		       c5 ea		      CMP	_High_Score2
   6620  301f		       b0 03		      BCS	.skipL0288
   6621  3021				   .condpart135
   6622  3021		       4c 45 50 	      jmp	.__Skip_High_Score
   6623  3024
   6624  3024				   .skipL0288
   6625  3024				   .
   6626  3024							;;line 1706;; 
   6627  3024
   6628  3024				   .
   6629  3024							;;line 1707;; 
   6630  3024
   6631  3024				   .
   6632  3024							;;line 1708;; 
   6633  3024
   6634  3024				   .
   6635  3024							;;line 1709;; 
   6636  3024
   6637  3024				   .L0289		;;line 1710;;	if _sc3  >  _High_Score3 then goto __New_High_Score
   6638  3024
   6639  3024		       a5 eb		      LDA	_High_Score3
   6640  3026		       c5 95		      CMP	_sc3
   6641  3028		       b0 03		      BCS	.skipL0289
   6642  302a				   .condpart136
   6643  302a		       4c 39 50 	      jmp	.__New_High_Score
   6644  302d
   6645  302d				   .skipL0289
   6646  302d				   .L0290		;;line 1711;;	if _sc3  <  _High_Score3 then goto __Skip_High_Score
   6647  302d
   6648  302d		       a5 95		      LDA	_sc3
   6649  302f		       c5 eb		      CMP	_High_Score3
   6650  3031		       b0 03		      BCS	.skipL0290
   6651  3033				   .condpart137
   6652  3033		       4c 45 50 	      jmp	.__Skip_High_Score
   6653  3036
   6654  3036				   .skipL0290
   6655  3036				   .
   6656  3036							;;line 1712;; 
   6657  3036
   6658  3036				   .
   6659  3036							;;line 1713;; 
   6660  3036
   6661  3036				   .
   6662  3036							;;line 1714;; 
   6663  3036
   6664  3036				   .
   6665  3036							;;line 1715;; 
   6666  3036
   6667  3036				   .L0291		;;line 1716;;	goto __Skip_High_Score
   6668  3036
   6669  3036		       4c 45 50 	      jmp	.__Skip_High_Score
   6670  3039
   6671  3039				   .
   6672  3039							;;line 1717;; 
   6673  3039
   6674  3039				   .
   6675  3039							;;line 1718;; 
   6676  3039
   6677  3039				   .
   6678  3039							;;line 1719;; 
   6679  3039
   6680  3039				   .
   6681  3039							;;line 1720;; 
   6682  3039
   6683  3039				   .__New_High_Score
   6684  3039							;;line 1721;; __New_High_Score
   6685  3039
   6686  3039				   .
   6687  3039							;;line 1722;; 
   6688  3039
   6689  3039				   .L0292		;;line 1723;;	_High_Score1 = _sc1  :	_High_Score2 = _sc2  :	_High_Score3 = _sc3
   6690  3039
   6691  3039		       a5 93		      LDA	_sc1
   6692  303b		       85 e9		      STA	_High_Score1
   6693  303d		       a5 94		      LDA	_sc2
   6694  303f		       85 ea		      STA	_High_Score2
   6695  3041		       a5 95		      LDA	_sc3
   6696  3043		       85 eb		      STA	_High_Score3
   6697  3045				   .
   6698  3045							;;line 1724;; 
   6699  3045
   6700  3045				   .__Skip_High_Score
   6701  3045							;;line 1725;; __Skip_High_Score
   6702  3045
   6703  3045				   .
   6704  3045							;;line 1726;; 
   6705  3045
   6706  3045				   .
   6707  3045							;;line 1727;; 
   6708  3045
   6709  3045				   .
   6710  3045							;;line 1728;; 
   6711  3045
   6712  3045				   .
   6713  3045							;;line 1729;; 
   6714  3045
   6715  3045				   .
   6716  3045							;;line 1730;; 
   6717  3045
   6718  3045				   .L0293		;;line 1731;;	if !_Bit2_Game_Control{2} then goto __Start_Restart bank1
   6719  3045
   6720  3045		       a5 ec		      LDA	_Bit2_Game_Control
   6721  3047		       29 04		      AND	#4
   6722  3049		       d0 12		      BNE	.skipL0293
   6723  304b				   .condpart138
   6724  304b		       85 ee		      sta	temp7
   6725  304d		       a9 0f		      lda	#>(.__Start_Restart-1)
   6726  304f		       48		      pha
   6727  3050		       a9 ff		      lda	#<(.__Start_Restart-1)
   6728  3052		       48		      pha
   6729  3053		       a5 ee		      lda	temp7
   6730  3055		       48		      pha
   6731  3056		       8a		      txa
   6732  3057		       48		      pha
   6733  3058		       a2 01		      ldx	#1
   6734  305a		       4c eb ff 	      jmp	BS_jsr
   6735  305d				   .skipL0293
   6736  305d				   .
   6737  305d							;;line 1732;; 
   6738  305d
   6739  305d				   .
   6740  305d							;;line 1733;; 
   6741  305d
   6742  305d				   .
   6743  305d							;;line 1734;; 
   6744  305d
   6745  305d				   .
   6746  305d							;;line 1735;; 
   6747  305d
   6748  305d				   .
   6749  305d							;;line 1736;; 
   6750  305d
   6751  305d				   .
   6752  305d							;;line 1737;; 
   6753  305d
   6754  305d				   .L0294		;;line 1738;;	_Score1_Mem = _sc1  :  _Score2_Mem = _sc2  :  _Score3_Mem = _sc3
   6755  305d
   6756  305d		       a5 93		      LDA	_sc1
   6757  305f		       85 e6		      STA	_Score1_Mem
   6758  3061		       a5 94		      LDA	_sc2
   6759  3063		       85 e7		      STA	_Score2_Mem
   6760  3065		       a5 95		      LDA	_sc3
   6761  3067		       85 e8		      STA	_Score3_Mem
   6762  3069				   .
   6763  3069							;;line 1739;; 
   6764  3069
   6765  3069				   .
   6766  3069							;;line 1740;; 
   6767  3069
   6768  3069				   .
   6769  3069							;;line 1741;; 
   6770  3069
   6771  3069				   .
   6772  3069							;;line 1742;; 
   6773  3069
   6774  3069				   .
   6775  3069							;;line 1743;; 
   6776  3069
   6777  3069				   .
   6778  3069							;;line 1744;; 
   6779  3069
   6780  3069				   .L0295		;;line 1745;;	_Master_Counter = 0  :	_Frame_Counter = 0
   6781  3069
   6782  3069		       a9 00		      LDA	#0
   6783  306b		       85 d8		      STA	_Master_Counter
   6784  306d		       85 d9		      STA	_Frame_Counter
   6785  306f				   .
   6786  306f							;;line 1746;; 
   6787  306f
   6788  306f				   .
   6789  306f							;;line 1747;; 
   6790  306f
   6791  306f				   .
   6792  306f							;;line 1748;; 
   6793  306f
   6794  306f				   .
   6795  306f							;;line 1749;; 
   6796  306f
   6797  306f				   .
   6798  306f							;;line 1750;; 
   6799  306f
   6800  306f				   .
   6801  306f							;;line 1751;; 
   6802  306f
   6803  306f				   .L0296		;;line 1752;;	_Main_CharY = 200  :  _WillY = 200  :  _Lost_Soul_Y = 200
   6804  306f
   6805  306f		       a9 c8		      LDA	#200
   6806  3071		       85 86		      STA	_Main_CharY
   6807  3073		       85 85		      STA	_WillY
   6808  3075		       85 89		      STA	_Lost_Soul_Y
   6809  3077				   .
   6810  3077							;;line 1753;; 
   6811  3077
   6812  3077				   .
   6813  3077							;;line 1754;; 
   6814  3077
   6815  3077				   .
   6816  3077							;;line 1755;; 
   6817  3077
   6818  3077				   .
   6819  3077							;;line 1756;; 
   6820  3077
   6821  3077				   .
   6822  3077							;;line 1757;; 
   6823  3077
   6824  3077				   .
   6825  3077							;;line 1758;; 
   6826  3077
   6827  3077				   .
   6828  3077							;;line 1759;; 
   6829  3077
   6830  3077				   .
   6831  3077							;;line 1760;; 
   6832  3077
   6833  3077				   .
   6834  3077							;;line 1761;; 
   6835  3077
   6836  3077				   .
   6837  3077							;;line 1762;; 
   6838  3077
   6839  3077				   .
   6840  3077							;;line 1763;; 
   6841  3077
   6842  3077				   .L0297		;;line 1764;;	_Bit0_Reset_Restrainer{0} = 1
   6843  3077
   6844  3077		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6845  3079		       09 01		      ORA	#1
   6846  307b		       85 ec		      STA	_Bit0_Reset_Restrainer
   6847  307d				   .
   6848  307d							;;line 1765;; 
   6849  307d
   6850  307d				   .
   6851  307d							;;line 1766;; 
   6852  307d
   6853  307d				   .
   6854  307d							;;line 1767;; 
   6855  307d
   6856  307d				   .
   6857  307d							;;line 1768;; 
   6858  307d
   6859  307d				   .
   6860  307d							;;line 1769;; 
   6861  307d
   6862  307d				   .
   6863  307d							;;line 1770;; 
   6864  307d
   6865  307d				   .L0298		;;line 1771;;	playfieldpos = 8
   6866  307d
   6867  307d		       a9 08		      LDA	#8
   6868  307f		       85 ef		      STA	playfieldpos
   6869  3081				   .L0299		;;line 1772;;	playfield:
   6870  3081
   6871  3081				  -	      ifconst	pfres
   6872  3081				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6873  3081					      else
   6874  3081		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6875  3083					      endif
   6876  3083		       4c b2 50 	      jmp	pflabel1
   6877  3086				   PF_data1
   6878  3086		       49 e4		      .byte.b	%01001001, %11100100
   6879  3088					      if	(pfwidth>2)
   6880  3088		       57 06		      .byte.b	%01010111, %00000110
   6881  308a					      endif
   6882  308a		       ad 4a		      .byte.b	%10101101, %01001010
   6883  308c					      if	(pfwidth>2)
   6884  308c		       54 0a		      .byte.b	%01010100, %00001010
   6885  308e					      endif
   6886  308e		       eb 4a		      .byte.b	%11101011, %01001010
   6887  3090					      if	(pfwidth>2)
   6888  3090		       76 06		      .byte.b	%01110110, %00000110
   6889  3092					      endif
   6890  3092		       a9 4a		      .byte.b	%10101001, %01001010
   6891  3094					      if	(pfwidth>2)
   6892  3094		       54 0a		      .byte.b	%01010100, %00001010
   6893  3096					      endif
   6894  3096		       a9 44		      .byte.b	%10101001, %01000100
   6895  3098					      if	(pfwidth>2)
   6896  3098		       57 0a		      .byte.b	%01010111, %00001010
   6897  309a					      endif
   6898  309a		       00 00		      .byte.b	%00000000, %00000000
   6899  309c					      if	(pfwidth>2)
   6900  309c		       00 00		      .byte.b	%00000000, %00000000
   6901  309e					      endif
   6902  309e		       97 06		      .byte.b	%10010111, %00000110
   6903  30a0					      if	(pfwidth>2)
   6904  30a0		       67 6e		      .byte.b	%01100111, %01101110
   6905  30a2					      endif
   6906  30a2		       a2 0a		      .byte.b	%10100010, %00001010
   6907  30a4					      if	(pfwidth>2)
   6908  30a4		       52 a2		      .byte.b	%01010010, %10100010
   6909  30a6					      endif
   6910  30a6		       c2 0a		      .byte.b	%11000010, %00001010
   6911  30a8					      if	(pfwidth>2)
   6912  30a8		       52 a6		      .byte.b	%01010010, %10100110
   6913  30aa					      endif
   6914  30aa		       a2 0a		      .byte.b	%10100010, %00001010
   6915  30ac					      if	(pfwidth>2)
   6916  30ac		       52 a2		      .byte.b	%01010010, %10100010
   6917  30ae					      endif
   6918  30ae		       97 06		      .byte.b	%10010111, %00000110
   6919  30b0					      if	(pfwidth>2)
   6920  30b0		       67 6e		      .byte.b	%01100111, %01101110
   6921  30b2					      endif
   6922  30b2				   pflabel1
   6923  30b2		       bd 86 50 	      lda	PF_data1,x
   6924  30b5		       95 a4		      sta	playfield,x
   6925  30b7		       ca		      dex
   6926  30b8		       10 f8		      bpl	pflabel1
   6927  30ba				   .
   6928  30ba							;;line 1785;; 
   6929  30ba
   6930  30ba				   .
   6931  30ba							;;line 1786;; 
   6932  30ba
   6933  30ba				   .
   6934  30ba							;;line 1787;; 
   6935  30ba
   6936  30ba				   .
   6937  30ba							;;line 1788;; 
   6938  30ba
   6939  30ba				   .
   6940  30ba							;;line 1789;; 
   6941  30ba
   6942  30ba				   .
   6943  30ba							;;line 1790;; 
   6944  30ba
   6945  30ba				   .
   6946  30ba							;;line 1791;; 
   6947  30ba
   6948  30ba				   .
   6949  30ba							;;line 1792;; 
   6950  30ba
   6951  30ba				   .
   6952  30ba							;;line 1793;; 
   6953  30ba
   6954  30ba				   .
   6955  30ba							;;line 1794;; 
   6956  30ba
   6957  30ba				   .
   6958  30ba							;;line 1795;; 
   6959  30ba
   6960  30ba				   .__Game_Over_Loop
   6961  30ba							;;line 1796;; __Game_Over_Loop
   6962  30ba
   6963  30ba				   .
   6964  30ba							;;line 1797;; 
   6965  30ba
   6966  30ba				   .
   6967  30ba							;;line 1798;; 
   6968  30ba
   6969  30ba				   .
   6970  30ba							;;line 1799;; 
   6971  30ba
   6972  30ba				   .
   6973  30ba							;;line 1800;; 
   6974  30ba
   6975  30ba				   .
   6976  30ba							;;line 1801;; 
   6977  30ba
   6978  30ba				   .
   6979  30ba							;;line 1802;; 
   6980  30ba
   6981  30ba				   .
   6982  30ba							;;line 1803;; 
   6983  30ba
   6984  30ba				   .
   6985  30ba							;;line 1804;; 
   6986  30ba
   6987  30ba				   .
   6988  30ba							;;line 1805;; 
   6989  30ba
   6990  30ba				   .
   6991  30ba							;;line 1806;; 
   6992  30ba
   6993  30ba				   .
   6994  30ba							;;line 1807;; 
   6995  30ba
   6996  30ba				   .
   6997  30ba							;;line 1808;; 
   6998  30ba
   6999  30ba				   .
   7000  30ba							;;line 1809;; 
   7001  30ba
   7002  30ba				   .
   7003  30ba							;;line 1810;; 
   7004  30ba
   7005  30ba				   .
   7006  30ba							;;line 1811;; 
   7007  30ba
   7008  30ba				   .
   7009  30ba							;;line 1812;; 
   7010  30ba
   7011  30ba				   .
   7012  30ba							;;line 1813;; 
   7013  30ba
   7014  30ba				   .
   7015  30ba							;;line 1814;; 
   7016  30ba
   7017  30ba				   .
   7018  30ba							;;line 1815;; 
   7019  30ba
   7020  30ba				   .L0300		;;line 1816;;	_Master_Counter = _Master_Counter  +  1
   7021  30ba
   7022  30ba		       e6 d8		      INC	_Master_Counter
   7023  30bc				   .
   7024  30bc							;;line 1817;; 
   7025  30bc
   7026  30bc				   .
   7027  30bc							;;line 1818;; 
   7028  30bc
   7029  30bc				   .
   7030  30bc							;;line 1819;; 
   7031  30bc
   7032  30bc				   .
   7033  30bc							;;line 1820;; 
   7034  30bc
   7035  30bc				   .
   7036  30bc							;;line 1821;; 
   7037  30bc
   7038  30bc				   .L0301		;;line 1822;;	if _Master_Counter  <  120 then goto __Skip_20_Second_Counter
   7039  30bc
   7040  30bc		       a5 d8		      LDA	_Master_Counter
   7041  30be		       c9 78		      CMP	#120
   7042  30c0		       b0 03		      BCS	.skipL0301
   7043  30c2				   .condpart139
   7044  30c2		       4c 2f 51 	      jmp	.__Skip_20_Second_Counter
   7045  30c5
   7046  30c5				   .skipL0301
   7047  30c5				   .
   7048  30c5							;;line 1823;; 
   7049  30c5
   7050  30c5				   .
   7051  30c5							;;line 1824;; 
   7052  30c5
   7053  30c5				   .
   7054  30c5							;;line 1825;; 
   7055  30c5
   7056  30c5				   .
   7057  30c5							;;line 1826;; 
   7058  30c5
   7059  30c5				   .
   7060  30c5							;;line 1827;; 
   7061  30c5
   7062  30c5				   .L0302		;;line 1828;;	_Frame_Counter = _Frame_Counter  +  1  :  _Master_Counter = 0
   7063  30c5
   7064  30c5		       e6 d9		      INC	_Frame_Counter
   7065  30c7		       a9 00		      LDA	#0
   7066  30c9		       85 d8		      STA	_Master_Counter
   7067  30cb				   .
   7068  30cb							;;line 1829;; 
   7069  30cb
   7070  30cb				   .
   7071  30cb							;;line 1830;; 
   7072  30cb
   7073  30cb				   .
   7074  30cb							;;line 1831;; 
   7075  30cb
   7076  30cb				   .
   7077  30cb							;;line 1832;; 
   7078  30cb
   7079  30cb				   .
   7080  30cb							;;line 1833;; 
   7081  30cb
   7082  30cb				   .
   7083  30cb							;;line 1834;; 
   7084  30cb
   7085  30cb				   .
   7086  30cb							;;line 1835;; 
   7087  30cb
   7088  30cb				   .
   7089  30cb							;;line 1836;; 
   7090  30cb
   7091  30cb				   .L0303		;;line 1837;;	if _Frame_Counter  >  9 then _Bit2_Game_Control{2} = 0	:  _sc1 = _Score1_Mem  :  _sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem :  goto __Start_Restart bank1
   7092  30cb
   7093  30cb		       a9 09		      LDA	#9
   7094  30cd		       c5 d9		      CMP	_Frame_Counter
   7095  30cf		       b0 24		      BCS	.skipL0303
   7096  30d1				   .condpart140
   7097  30d1		       a5 ec		      LDA	_Bit2_Game_Control
   7098  30d3		       29 fb		      AND	#251
   7099  30d5		       85 ec		      STA	_Bit2_Game_Control
   7100  30d7		       a5 e6		      LDA	_Score1_Mem
   7101  30d9		       85 93		      STA	_sc1
   7102  30db		       a5 e7		      LDA	_Score2_Mem
   7103  30dd		       85 94		      STA	_sc2
   7104  30df		       a5 e8		      LDA	_Score3_Mem
   7105  30e1		       85 95		      STA	_sc3
   7106  30e3		       85 ee		      sta	temp7
   7107  30e5		       a9 0f		      lda	#>(.__Start_Restart-1)
   7108  30e7		       48		      pha
   7109  30e8		       a9 ff		      lda	#<(.__Start_Restart-1)
   7110  30ea		       48		      pha
   7111  30eb		       a5 ee		      lda	temp7
   7112  30ed		       48		      pha
   7113  30ee		       8a		      txa
   7114  30ef		       48		      pha
   7115  30f0		       a2 01		      ldx	#1
   7116  30f2		       4c eb ff 	      jmp	BS_jsr
   7117  30f5				   .skipL0303
   7118  30f5				   .
   7119  30f5							;;line 1838;; 
   7120  30f5
   7121  30f5				   .
   7122  30f5							;;line 1839;; 
   7123  30f5
   7124  30f5				   .
   7125  30f5							;;line 1840;; 
   7126  30f5
   7127  30f5				   .
   7128  30f5							;;line 1841;; 
   7129  30f5
   7130  30f5				   .L0304		;;line 1842;;	_Bit6_Swap_Scores{6} = !_Bit6_Swap_Scores{6}
   7131  30f5
   7132  30f5		       a5 ec		      LDA	_Bit6_Swap_Scores
   7133  30f7		       29 40		      AND	#64
   7134  30f9		       08		      PHP
   7135  30fa		       a5 ec		      LDA	_Bit6_Swap_Scores
   7136  30fc		       29 bf		      AND	#191
   7137  30fe		       28		      PLP
   7138  30ff		       d0 02		      .byte.b	$D0, $02
   7139  3101		       09 40		      ORA	#64
   7140  3103		       85 ec		      STA	_Bit6_Swap_Scores
   7141  3105				   .
   7142  3105							;;line 1843;; 
   7143  3105
   7144  3105				   .
   7145  3105							;;line 1844;; 
   7146  3105
   7147  3105				   .
   7148  3105							;;line 1845;; 
   7149  3105
   7150  3105				   .
   7151  3105							;;line 1846;; 
   7152  3105
   7153  3105				   .L0305		;;line 1847;;	if !_Bit6_Swap_Scores{6} then goto __GO_Current_Score
   7154  3105
   7155  3105		       24 ec		      BIT	_Bit6_Swap_Scores
   7156  3107		       70 03		      BVS	.skipL0305
   7157  3109				   .condpart141
   7158  3109		       4c 1f 51 	      jmp	.__GO_Current_Score
   7159  310c
   7160  310c				   .skipL0305
   7161  310c				   .
   7162  310c							;;line 1848;; 
   7163  310c
   7164  310c				   .
   7165  310c							;;line 1849;; 
   7166  310c
   7167  310c				   .
   7168  310c							;;line 1850;; 
   7169  310c
   7170  310c				   .
   7171  310c							;;line 1851;; 
   7172  310c
   7173  310c				   .L0306		;;line 1852;;	scorecolor = $AE
   7174  310c
   7175  310c		       a9 ae		      LDA	#$AE
   7176  310e		       85 a3		      STA	scorecolor
   7177  3110				   .
   7178  3110							;;line 1853;; 
   7179  3110
   7180  3110				   .L0307		;;line 1854;;	_sc1 = _High_Score1  :	_sc2 = _High_Score2  :	_sc3 = _High_Score3
   7181  3110
   7182  3110		       a5 e9		      LDA	_High_Score1
   7183  3112		       85 93		      STA	_sc1
   7184  3114		       a5 ea		      LDA	_High_Score2
   7185  3116		       85 94		      STA	_sc2
   7186  3118		       a5 eb		      LDA	_High_Score3
   7187  311a		       85 95		      STA	_sc3
   7188  311c				   .
   7189  311c							;;line 1855;; 
   7190  311c
   7191  311c				   .L0308		;;line 1856;;	goto __Skip_20_Second_Counter
   7192  311c
   7193  311c		       4c 2f 51 	      jmp	.__Skip_20_Second_Counter
   7194  311f
   7195  311f				   .
   7196  311f							;;line 1857;; 
   7197  311f
   7198  311f				   .
   7199  311f							;;line 1858;; 
   7200  311f
   7201  311f				   .
   7202  311f							;;line 1859;; 
   7203  311f
   7204  311f				   .
   7205  311f							;;line 1860;; 
   7206  311f
   7207  311f				   .__GO_Current_Score
   7208  311f							;;line 1861;; __GO_Current_Score
   7209  311f
   7210  311f				   .
   7211  311f							;;line 1862;; 
   7212  311f
   7213  311f				   .L0309		;;line 1863;;	scorecolor = $1C
   7214  311f
   7215  311f		       a9 1c		      LDA	#$1C
   7216  3121		       85 a3		      STA	scorecolor
   7217  3123				   .
   7218  3123							;;line 1864;; 
   7219  3123
   7220  3123				   .L0310		;;line 1865;;	_sc1 = _Score1_Mem  :  _sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem
   7221  3123
   7222  3123		       a5 e6		      LDA	_Score1_Mem
   7223  3125		       85 93		      STA	_sc1
   7224  3127		       a5 e7		      LDA	_Score2_Mem
   7225  3129		       85 94		      STA	_sc2
   7226  312b		       a5 e8		      LDA	_Score3_Mem
   7227  312d		       85 95		      STA	_sc3
   7228  312f				   .
   7229  312f							;;line 1866;; 
   7230  312f
   7231  312f				   .__Skip_20_Second_Counter
   7232  312f							;;line 1867;; __Skip_20_Second_Counter
   7233  312f
   7234  312f				   .
   7235  312f							;;line 1868;; 
   7236  312f
   7237  312f				   .
   7238  312f							;;line 1869;; 
   7239  312f
   7240  312f				   .
   7241  312f							;;line 1870;; 
   7242  312f
   7243  312f				   .
   7244  312f							;;line 1871;; 
   7245  312f
   7246  312f				   .
   7247  312f							;;line 1872;; 
   7248  312f
   7249  312f				   .
   7250  312f							;;line 1873;; 
   7251  312f
   7252  312f				   .
   7253  312f							;;line 1874;; 
   7254  312f
   7255  312f				   .
   7256  312f							;;line 1875;; 
   7257  312f
   7258  312f				   .
   7259  312f							;;line 1876;; 
   7260  312f
   7261  312f				   .
   7262  312f							;;line 1877;; 
   7263  312f
   7264  312f				   .
   7265  312f							;;line 1878;; 
   7266  312f
   7267  312f				   .
   7268  312f							;;line 1879;; 
   7269  312f
   7270  312f				   .
   7271  312f							;;line 1880;; 
   7272  312f
   7273  312f				   .
   7274  312f							;;line 1881;; 
   7275  312f
   7276  312f				   .L0311		;;line 1882;;	if _Frame_Counter then goto __Skip_First_Colors
   7277  312f
   7278  312f		       a5 d9		      LDA	_Frame_Counter
   7279  3131		       f0 03		      BEQ	.skipL0311
   7280  3133				   .condpart142
   7281  3133		       4c 49 51 	      jmp	.__Skip_First_Colors
   7282  3136
   7283  3136				   .skipL0311
   7284  3136				   .
   7285  3136							;;line 1883;; 
   7286  3136
   7287  3136				   .
   7288  3136							;;line 1884;; 
   7289  3136
   7290  3136				   .
   7291  3136							;;line 1885;; 
   7292  3136
   7293  3136				   .
   7294  3136							;;line 1886;; 
   7295  3136
   7296  3136				   .L0312		;;line 1887;;	COLUBK = $44
   7297  3136
   7298  3136		       a9 44		      LDA	#$44
   7299  3138		       85 09		      STA	COLUBK
   7300  313a				   .
   7301  313a							;;line 1888;; 
   7302  313a
   7303  313a				   .
   7304  313a							;;line 1889;; 
   7305  313a
   7306  313a				   .
   7307  313a							;;line 1890;; 
   7308  313a
   7309  313a				   .
   7310  313a							;;line 1891;; 
   7311  313a
   7312  313a				   .L0313		;;line 1892;;	pfcolors:
   7313  313a
   7314  313a		       a9 2e		      lda	# $2E
   7315  313c		       85 08		      sta	COLUPF
   7316  313e				  -	      ifconst	pfres
   7317  313e				  -	      lda	#>(pfcolorlabel13-130+pfres*pfwidth)
   7318  313e					      else
   7319  313e		       a9 f5		      lda	#>(pfcolorlabel13-82)
   7320  3140					      endif
   7321  3140		       85 f1		      sta	pfcolortable+1
   7322  3142				  -	      ifconst	pfres
   7323  3142				  -	      lda	#<(pfcolorlabel13-130+pfres*pfwidth)
   7324  3142					      else
   7325  3142		       a9 06		      lda	#<(pfcolorlabel13-82)
   7326  3144					      endif
   7327  3144		       85 f0		      sta	pfcolortable
   7328  3146				   .
   7329  3146							;;line 1906;; 
   7330  3146
   7331  3146				   .L0314		;;line 1907;;	goto __Skip_Second_Colors
   7332  3146
   7333  3146		       4c 59 51 	      jmp	.__Skip_Second_Colors
   7334  3149
   7335  3149				   .
   7336  3149							;;line 1908;; 
   7337  3149
   7338  3149				   .__Skip_First_Colors
   7339  3149							;;line 1909;; __Skip_First_Colors
   7340  3149
   7341  3149				   .
   7342  3149							;;line 1910;; 
   7343  3149
   7344  3149				   .
   7345  3149							;;line 1911;; 
   7346  3149
   7347  3149				   .
   7348  3149							;;line 1912;; 
   7349  3149
   7350  3149				   .
   7351  3149							;;line 1913;; 
   7352  3149
   7353  3149				   .L0315		;;line 1914;;	COLUBK = $D2
   7354  3149
   7355  3149		       a9 d2		      LDA	#$D2
   7356  314b		       85 09		      STA	COLUBK
   7357  314d				   .
   7358  314d							;;line 1915;; 
   7359  314d
   7360  314d				   .
   7361  314d							;;line 1916;; 
   7362  314d
   7363  314d				   .
   7364  314d							;;line 1917;; 
   7365  314d
   7366  314d				   .
   7367  314d							;;line 1918;; 
   7368  314d
   7369  314d				   .L0316		;;line 1919;;	pfcolors:
   7370  314d
   7371  314d		       a9 de		      lda	# $DE
   7372  314f		       85 08		      sta	COLUPF
   7373  3151				  -	      ifconst	pfres
   7374  3151				  -	      lda	#>(pfcolorlabel13-129+pfres*pfwidth)
   7375  3151					      else
   7376  3151		       a9 f5		      lda	#>(pfcolorlabel13-81)
   7377  3153					      endif
   7378  3153		       85 f1		      sta	pfcolortable+1
   7379  3155				  -	      ifconst	pfres
   7380  3155				  -	      lda	#<(pfcolorlabel13-129+pfres*pfwidth)
   7381  3155					      else
   7382  3155		       a9 07		      lda	#<(pfcolorlabel13-81)
   7383  3157					      endif
   7384  3157		       85 f0		      sta	pfcolortable
   7385  3159				   .
   7386  3159							;;line 1933;; 
   7387  3159
   7388  3159				   .__Skip_Second_Colors
   7389  3159							;;line 1934;; __Skip_Second_Colors
   7390  3159
   7391  3159				   .
   7392  3159							;;line 1935;; 
   7393  3159
   7394  3159				   .
   7395  3159							;;line 1936;; 
   7396  3159
   7397  3159				   .
   7398  3159							;;line 1937;; 
   7399  3159
   7400  3159				   .
   7401  3159							;;line 1938;; 
   7402  3159
   7403  3159				   .
   7404  3159							;;line 1939;; 
   7405  3159
   7406  3159				   .
   7407  3159							;;line 1940;; 
   7408  3159
   7409  3159				   .
   7410  3159							;;line 1941;; 
   7411  3159
   7412  3159				   .L0317		;;line 1942;;	drawscreen
   7413  3159
   7414  3159		       85 ee		      sta	temp7
   7415  315b		       a9 51		      lda	#>(ret_point22-1)
   7416  315d		       48		      pha
   7417  315e		       a9 70		      lda	#<(ret_point22-1)
   7418  3160		       48		      pha
   7419  3161		       a9 f4		      lda	#>(drawscreen-1)
   7420  3163		       48		      pha
   7421  3164		       a9 3b		      lda	#<(drawscreen-1)
   7422  3166		       48		      pha
   7423  3167		       a5 ee		      lda	temp7
   7424  3169		       48		      pha
   7425  316a		       8a		      txa
   7426  316b		       48		      pha
   7427  316c		       a2 08		      ldx	#8
   7428  316e		       4c eb ff 	      jmp	BS_jsr
   7429  3171				   ret_point22
   7430  3171				   .
   7431  3171							;;line 1943;; 
   7432  3171
   7433  3171				   .
   7434  3171							;;line 1944;; 
   7435  3171
   7436  3171				   .
   7437  3171							;;line 1945;; 
   7438  3171
   7439  3171				   .
   7440  3171							;;line 1946;; 
   7441  3171
   7442  3171				   .
   7443  3171							;;line 1947;; 
   7444  3171
   7445  3171				   .
   7446  3171							;;line 1948;; 
   7447  3171
   7448  3171				   .
   7449  3171							;;line 1949;; 
   7450  3171
   7451  3171				   .
   7452  3171							;;line 1950;; 
   7453  3171
   7454  3171				   .
   7455  3171							;;line 1951;; 
   7456  3171
   7457  3171				   .
   7458  3171							;;line 1952;; 
   7459  3171
   7460  3171				   .
   7461  3171							;;line 1953;; 
   7462  3171
   7463  3171				   .
   7464  3171							;;line 1954;; 
   7465  3171
   7466  3171				   .
   7467  3171							;;line 1955;; 
   7468  3171
   7469  3171				   .
   7470  3171							;;line 1956;; 
   7471  3171
   7472  3171				   .L0318		;;line 1957;;	if _Frame_Counter = 0 then goto __Game_Over_Loop
   7473  3171
   7474  3171		       a5 d9		      LDA	_Frame_Counter
   7475  3173		       c9 00		      CMP	#0
   7476  3175		       d0 03		      BNE	.skipL0318
   7477  3177				   .condpart143
   7478  3177		       4c ba 50 	      jmp	.__Game_Over_Loop
   7479  317a
   7480  317a				   .skipL0318
   7481  317a				   .
   7482  317a							;;line 1958;; 
   7483  317a
   7484  317a				   .
   7485  317a							;;line 1959;; 
   7486  317a
   7487  317a				   .
   7488  317a							;;line 1960;; 
   7489  317a
   7490  317a				   .
   7491  317a							;;line 1961;; 
   7492  317a
   7493  317a				   .
   7494  317a							;;line 1962;; 
   7495  317a
   7496  317a				   .L0319		;;line 1963;;	if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0} = 0  :  goto __Game_Over_Loop
   7497  317a
   7498  317a		       a9 01		      lda	#1
   7499  317c		       2c 82 02 	      bit	SWCHB
   7500  317f		       f0 0d		      BEQ	.skipL0319
   7501  3181				   .condpart144
   7502  3181		       24 0c		      bit	INPT4
   7503  3183		       10 09		      BPL	.skip144then
   7504  3185				   .condpart145
   7505  3185		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7506  3187		       29 fe		      AND	#254
   7507  3189		       85 ec		      STA	_Bit0_Reset_Restrainer
   7508  318b		       4c ba 50 	      jmp	.__Game_Over_Loop
   7509  318e
   7510  318e				   .skip144then
   7511  318e				   .skipL0319
   7512  318e				   .
   7513  318e							;;line 1964;; 
   7514  318e
   7515  318e				   .
   7516  318e							;;line 1965;; 
   7517  318e
   7518  318e				   .
   7519  318e							;;line 1966;; 
   7520  318e
   7521  318e				   .
   7522  318e							;;line 1967;; 
   7523  318e
   7524  318e				   .
   7525  318e							;;line 1968;; 
   7526  318e
   7527  318e				   .L0320		;;line 1969;;	if _Bit0_Reset_Restrainer{0} then goto __Game_Over_Loop
   7528  318e
   7529  318e		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7530  3190		       4a		      LSR
   7531  3191		       90 03		      BCC	.skipL0320
   7532  3193				   .condpart146
   7533  3193		       4c ba 50 	      jmp	.__Game_Over_Loop
   7534  3196
   7535  3196				   .skipL0320
   7536  3196				   .
   7537  3196							;;line 1970;; 
   7538  3196
   7539  3196				   .
   7540  3196							;;line 1971;; 
   7541  3196
   7542  3196				   .
   7543  3196							;;line 1972;; 
   7544  3196
   7545  3196				   .
   7546  3196							;;line 1973;; 
   7547  3196
   7548  3196				   .L0321		;;line 1974;;	goto __Start_Restart bank1
   7549  3196
   7550  3196		       85 ee		      sta	temp7
   7551  3198		       a9 0f		      lda	#>(.__Start_Restart-1)
   7552  319a		       48		      pha
   7553  319b		       a9 ff		      lda	#<(.__Start_Restart-1)
   7554  319d		       48		      pha
   7555  319e		       a5 ee		      lda	temp7
   7556  31a0		       48		      pha
   7557  31a1		       8a		      txa
   7558  31a2		       48		      pha
   7559  31a3		       a2 01		      ldx	#1
   7560  31a5		       4c eb ff 	      jmp	BS_jsr
   7561  31a8				   .
   7562  31a8							;;line 1975;; 
   7563  31a8
   7564  31a8				   .
   7565  31a8							;;line 1976;; 
   7566  31a8
   7567  31a8				   .
   7568  31a8							;;line 1977;; 
   7569  31a8
   7570  31a8				   .
   7571  31a8							;;line 1978;; 
   7572  31a8
   7573  31a8				   .
   7574  31a8							;;line 1979;; 
   7575  31a8
   7576  31a8				   .
   7577  31a8							;;line 1980;; 
   7578  31a8
   7579  31a8				   .
   7580  31a8							;;line 1981;; 
   7581  31a8
   7582  31a8				   .
   7583  31a8							;;line 1982;; 
   7584  31a8
   7585  31a8				   .
   7586  31a8							;;line 1983;; 
   7587  31a8
   7588  31a8				   .
   7589  31a8							;;line 1984;; 
   7590  31a8
   7591  31a8				   .
   7592  31a8							;;line 1985;; 
   7593  31a8
   7594  31a8				   .
   7595  31a8							;;line 1986;; 
   7596  31a8
   7597  31a8				   .
   7598  31a8							;;line 1987;; 
   7599  31a8
   7600  31a8				   .
   7601  31a8							;;line 1988;; 
   7602  31a8
   7603  31a8				   .
   7604  31a8							;;line 1989;; 
   7605  31a8
   7606  31a8				   .
   7607  31a8							;;line 1990;; 
   7608  31a8
   7609  31a8				   .
   7610  31a8							;;line 1991;; 
   7611  31a8
   7612  31a8				   .
   7613  31a8							;;line 1992;; 
   7614  31a8
   7615  31a8				   .
   7616  31a8							;;line 1993;; 
   7617  31a8
   7618  31a8				   .__Pause_Setup
   7619  31a8							;;line 1994;; __Pause_Setup
   7620  31a8
   7621  31a8				   .
   7622  31a8							;;line 1995;; 
   7623  31a8
   7624  31a8				   .
   7625  31a8							;;line 1996;; 
   7626  31a8
   7627  31a8				   .
   7628  31a8							;;line 1997;; 
   7629  31a8
   7630  31a8				   .
   7631  31a8							;;line 1998;; 
   7632  31a8
   7633  31a8				   .
   7634  31a8							;;line 1999;; 
   7635  31a8
   7636  31a8				   .
   7637  31a8							;;line 2000;; 
   7638  31a8
   7639  31a8				   .L0322		;;line 2001;;	AUDV0 = 0  :  AUDV1 = 0
   7640  31a8
   7641  31a8		       a9 00		      LDA	#0
   7642  31aa		       85 19		      STA	AUDV0
   7643  31ac		       85 1a		      STA	AUDV1
   7644  31ae				   .
   7645  31ae							;;line 2002;; 
   7646  31ae
   7647  31ae				   .
   7648  31ae							;;line 2003;; 
   7649  31ae
   7650  31ae				   .
   7651  31ae							;;line 2004;; 
   7652  31ae
   7653  31ae				   .
   7654  31ae							;;line 2005;; 
   7655  31ae
   7656  31ae				   .
   7657  31ae							;;line 2006;; 
   7658  31ae
   7659  31ae				   .
   7660  31ae							;;line 2007;; 
   7661  31ae
   7662  31ae				   .L0323		;;line 2008;;	_Bit1_FireB_Restrainer{1} = 1
   7663  31ae
   7664  31ae		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7665  31b0		       09 02		      ORA	#2
   7666  31b2		       85 ec		      STA	_Bit1_FireB_Restrainer
   7667  31b4				   .
   7668  31b4							;;line 2009;; 
   7669  31b4
   7670  31b4				   .
   7671  31b4							;;line 2010;; 
   7672  31b4
   7673  31b4				   .
   7674  31b4							;;line 2011;; 
   7675  31b4
   7676  31b4				   .
   7677  31b4							;;line 2012;; 
   7678  31b4
   7679  31b4				   .
   7680  31b4							;;line 2013;; 
   7681  31b4
   7682  31b4				   .
   7683  31b4							;;line 2014;; 
   7684  31b4
   7685  31b4				   .L0324		;;line 2015;;	_Pause_Counter_Tmp = 0
   7686  31b4
   7687  31b4		       a9 00		      LDA	#0
   7688  31b6		       85 db		      STA	_Pause_Counter_Tmp
   7689  31b8				   .
   7690  31b8							;;line 2016;; 
   7691  31b8
   7692  31b8				   .
   7693  31b8							;;line 2017;; 
   7694  31b8
   7695  31b8				   .
   7696  31b8							;;line 2018;; 
   7697  31b8
   7698  31b8				   .
   7699  31b8							;;line 2019;; 
   7700  31b8
   7701  31b8				   .
   7702  31b8							;;line 2020;; 
   7703  31b8
   7704  31b8				   .
   7705  31b8							;;line 2021;; 
   7706  31b8
   7707  31b8				   .L0325		;;line 2022;;	_Pause_Color_Tmp =  ( rand & 7 ) 
   7708  31b8
   7709  31b8							; complex statement detected
   7710  31b8		       a5 a2		      lda	rand
   7711  31ba		       4a		      lsr
   7712  31bb					      ifconst	rand16
   7713  31bb		       26 ed		      rol	rand16
   7714  31bd					      endif
   7715  31bd		       90 02		      bcc	*+4
   7716  31bf		       49 b4		      eor	#$B4
   7717  31c1		       85 a2		      sta	rand
   7718  31c3					      ifconst	rand16
   7719  31c3		       45 ed		      eor	rand16
   7720  31c5					      endif
   7721  31c5		       29 07		      AND	#7
   7722  31c7		       85 df		      STA	_Pause_Color_Tmp
   7723  31c9				   .
   7724  31c9							;;line 2023;; 
   7725  31c9
   7726  31c9				   .L0326		;;line 2024;;	_Pause_Mem_Color_Tmp = _Pause_Color_Tmp
   7727  31c9
   7728  31c9		       a5 df		      LDA	_Pause_Color_Tmp
   7729  31cb		       85 de		      STA	_Pause_Mem_Color_Tmp
   7730  31cd				   .
   7731  31cd							;;line 2025;; 
   7732  31cd
   7733  31cd				   .
   7734  31cd							;;line 2026;; 
   7735  31cd
   7736  31cd				   .
   7737  31cd							;;line 2027;; 
   7738  31cd
   7739  31cd				   .
   7740  31cd							;;line 2028;; 
   7741  31cd
   7742  31cd				   .
   7743  31cd							;;line 2029;; 
   7744  31cd
   7745  31cd				   .
   7746  31cd							;;line 2030;; 
   7747  31cd
   7748  31cd				   .
   7749  31cd							;;line 2031;; 
   7750  31cd
   7751  31cd				   .
   7752  31cd							;;line 2032;; 
   7753  31cd
   7754  31cd				   .
   7755  31cd							;;line 2033;; 
   7756  31cd
   7757  31cd				   .
   7758  31cd							;;line 2034;; 
   7759  31cd
   7760  31cd				   .__Pause_Game
   7761  31cd							;;line 2035;; __Pause_Game
   7762  31cd
   7763  31cd				   .
   7764  31cd							;;line 2036;; 
   7765  31cd
   7766  31cd				   .
   7767  31cd							;;line 2037;; 
   7768  31cd
   7769  31cd				   .
   7770  31cd							;;line 2038;; 
   7771  31cd
   7772  31cd				   .
   7773  31cd							;;line 2039;; 
   7774  31cd
   7775  31cd				   .
   7776  31cd							;;line 2040;; 
   7777  31cd
   7778  31cd				   .
   7779  31cd							;;line 2041;; 
   7780  31cd
   7781  31cd				   .
   7782  31cd							;;line 2042;; 
   7783  31cd
   7784  31cd				   .L0327		;;line 2043;;	NUSIZ1 = $10
   7785  31cd
   7786  31cd		       a9 10		      LDA	#$10
   7787  31cf		       85 05		      STA	NUSIZ1
   7788  31d1				   .
   7789  31d1							;;line 2044;; 
   7790  31d1
   7791  31d1				   .
   7792  31d1							;;line 2045;; 
   7793  31d1
   7794  31d1				   .
   7795  31d1							;;line 2046;; 
   7796  31d1
   7797  31d1				   .
   7798  31d1							;;line 2047;; 
   7799  31d1
   7800  31d1				   .
   7801  31d1							;;line 2048;; 
   7802  31d1
   7803  31d1				   .
   7804  31d1							;;line 2049;; 
   7805  31d1
   7806  31d1				   .
   7807  31d1							;;line 2050;; 
   7808  31d1
   7809  31d1				   .
   7810  31d1							;;line 2051;; 
   7811  31d1
   7812  31d1				   .
   7813  31d1							;;line 2052;; 
   7814  31d1
   7815  31d1				   .
   7816  31d1							;;line 2053;; 
   7817  31d1
   7818  31d1				   .L0328		;;line 2054;;	_Pause_Counter_Tmp = _Pause_Counter_Tmp  +  1
   7819  31d1
   7820  31d1		       e6 db		      INC	_Pause_Counter_Tmp
   7821  31d3				   .
   7822  31d3							;;line 2055;; 
   7823  31d3
   7824  31d3				   .
   7825  31d3							;;line 2056;; 
   7826  31d3
   7827  31d3				   .
   7828  31d3							;;line 2057;; 
   7829  31d3
   7830  31d3				   .
   7831  31d3							;;line 2058;; 
   7832  31d3
   7833  31d3				   .L0329		;;line 2059;;	if _Pause_Counter_Tmp  <  240 then goto __Skip_Pause_Counter
   7834  31d3
   7835  31d3		       a5 db		      LDA	_Pause_Counter_Tmp
   7836  31d5		       c9 f0		      CMP	#240
   7837  31d7		       b0 03		      BCS	.skipL0329
   7838  31d9				   .condpart147
   7839  31d9		       4c 46 52 	      jmp	.__Skip_Pause_Counter
   7840  31dc
   7841  31dc				   .skipL0329
   7842  31dc				   .
   7843  31dc							;;line 2060;; 
   7844  31dc
   7845  31dc				   .
   7846  31dc							;;line 2061;; 
   7847  31dc
   7848  31dc				   .
   7849  31dc							;;line 2062;; 
   7850  31dc
   7851  31dc				   .
   7852  31dc							;;line 2063;; 
   7853  31dc
   7854  31dc				   .L0330		;;line 2064;;	_Pause_Counter_Tmp = 0
   7855  31dc
   7856  31dc		       a9 00		      LDA	#0
   7857  31de		       85 db		      STA	_Pause_Counter_Tmp
   7858  31e0				   .
   7859  31e0							;;line 2065;; 
   7860  31e0
   7861  31e0				   .
   7862  31e0							;;line 2066;; 
   7863  31e0
   7864  31e0				   .
   7865  31e0							;;line 2067;; 
   7866  31e0
   7867  31e0				   .
   7868  31e0							;;line 2068;; 
   7869  31e0
   7870  31e0				   .L0331		;;line 2069;;	_Pause_Color_Tmp =  ( rand & 7 ) 
   7871  31e0
   7872  31e0							; complex statement detected
   7873  31e0		       a5 a2		      lda	rand
   7874  31e2		       4a		      lsr
   7875  31e3					      ifconst	rand16
   7876  31e3		       26 ed		      rol	rand16
   7877  31e5					      endif
   7878  31e5		       90 02		      bcc	*+4
   7879  31e7		       49 b4		      eor	#$B4
   7880  31e9		       85 a2		      sta	rand
   7881  31eb					      ifconst	rand16
   7882  31eb		       45 ed		      eor	rand16
   7883  31ed					      endif
   7884  31ed		       29 07		      AND	#7
   7885  31ef		       85 df		      STA	_Pause_Color_Tmp
   7886  31f1				   .
   7887  31f1							;;line 2070;; 
   7888  31f1
   7889  31f1				   .
   7890  31f1							;;line 2071;; 
   7891  31f1
   7892  31f1				   .
   7893  31f1							;;line 2072;; 
   7894  31f1
   7895  31f1				   .
   7896  31f1							;;line 2073;; 
   7897  31f1
   7898  31f1				   .
   7899  31f1							;;line 2074;; 
   7900  31f1
   7901  31f1				   .L0332		;;line 2075;;	if _Pause_Color_Tmp = _Pause_Mem_Color_Tmp then _Pause_Color_Tmp = _Pause_Color_Tmp  +	 ( rand & 3 )	+  1  :  if _Pause_Color_Tmp  >  7 then _Pause_Color_Tmp = _Pause_Color_Tmp  -	8
   7902  31f1
   7903  31f1		       a5 df		      LDA	_Pause_Color_Tmp
   7904  31f3		       c5 de		      CMP	_Pause_Mem_Color_Tmp
   7905  31f5		       d0 2a		      BNE	.skipL0332
   7906  31f7				   .condpart148
   7907  31f7							; complex statement detected
   7908  31f7		       a5 df		      LDA	_Pause_Color_Tmp
   7909  31f9		       48		      PHA
   7910  31fa		       a5 a2		      lda	rand
   7911  31fc		       4a		      lsr
   7912  31fd					      ifconst	rand16
   7913  31fd		       26 ed		      rol	rand16
   7914  31ff					      endif
   7915  31ff		       90 02		      bcc	*+4
   7916  3201		       49 b4		      eor	#$B4
   7917  3203		       85 a2		      sta	rand
   7918  3205					      ifconst	rand16
   7919  3205		       45 ed		      eor	rand16
   7920  3207					      endif
   7921  3207		       29 03		      AND	#3
   7922  3209		       ba		      TSX
   7923  320a		       e8		      INX
   7924  320b		       9a		      TXS
   7925  320c		       18		      CLC
   7926  320d		       75 00		      ADC	$00,x
   7927  320f		       18		      CLC
   7928  3210		       69 01		      ADC	#1
   7929  3212		       85 df		      STA	_Pause_Color_Tmp
   7930  3214		       a9 07		      LDA	#7
   7931  3216		       c5 df		      CMP	_Pause_Color_Tmp
   7932  3218		       b0 07		      BCS	.skip148then
   7933  321a				   .condpart149
   7934  321a		       a5 df		      LDA	_Pause_Color_Tmp
   7935  321c		       38		      SEC
   7936  321d		       e9 08		      SBC	#8
   7937  321f		       85 df		      STA	_Pause_Color_Tmp
   7938  3221				   .skip148then
   7939  3221				   .skipL0332
   7940  3221				   .
   7941  3221							;;line 2076;; 
   7942  3221
   7943  3221				   .
   7944  3221							;;line 2077;; 
   7945  3221
   7946  3221				   .
   7947  3221							;;line 2078;; 
   7948  3221
   7949  3221				   .
   7950  3221							;;line 2079;; 
   7951  3221
   7952  3221				   .L0333		;;line 2080;;	_Pause_Mem_Color_Tmp = _Pause_Color_Tmp
   7953  3221
   7954  3221		       a5 df		      LDA	_Pause_Color_Tmp
   7955  3223		       85 de		      STA	_Pause_Mem_Color_Tmp
   7956  3225				   .
   7957  3225							;;line 2081;; 
   7958  3225
   7959  3225				   .
   7960  3225							;;line 2082;; 
   7961  3225
   7962  3225				   .
   7963  3225							;;line 2083;; 
   7964  3225
   7965  3225				   .
   7966  3225							;;line 2084;; 
   7967  3225
   7968  3225				   .L0334		;;line 2085;;	_Bit2_Pause_Clr_Scheme{2} = 0
   7969  3225
   7970  3225		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7971  3227		       29 fb		      AND	#251
   7972  3229		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7973  322b				   .
   7974  322b							;;line 2086;; 
   7975  322b
   7976  322b				   .L0335		;;line 2087;;	temp5 = rand  :  if temp5  <  128 then _Bit2_Pause_Clr_Scheme{2} = 1
   7977  322b
   7978  322b		       a5 a2		      lda	rand
   7979  322d		       4a		      lsr
   7980  322e					      ifconst	rand16
   7981  322e		       26 ed		      rol	rand16
   7982  3230					      endif
   7983  3230		       90 02		      bcc	*+4
   7984  3232		       49 b4		      eor	#$B4
   7985  3234		       85 a2		      sta	rand
   7986  3236					      ifconst	rand16
   7987  3236		       45 ed		      eor	rand16
   7988  3238					      endif
   7989  3238		       85 a0		      STA	temp5
   7990  323a		       a5 a0		      LDA	temp5
   7991  323c		       c9 80		      CMP	#128
   7992  323e		       b0 06		      BCS	.skipL0335
   7993  3240				   .condpart150
   7994  3240		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7995  3242		       09 04		      ORA	#4
   7996  3244		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7997  3246				   .skipL0335
   7998  3246				   .
   7999  3246							;;line 2088;; 
   8000  3246
   8001  3246				   .__Skip_Pause_Counter
   8002  3246							;;line 2089;; __Skip_Pause_Counter
   8003  3246
   8004  3246				   .
   8005  3246							;;line 2090;; 
   8006  3246
   8007  3246				   .
   8008  3246							;;line 2091;; 
   8009  3246
   8010  3246				   .
   8011  3246							;;line 2092;; 
   8012  3246
   8013  3246				   .
   8014  3246							;;line 2093;; 
   8015  3246
   8016  3246				   .
   8017  3246							;;line 2094;; 
   8018  3246
   8019  3246				   .
   8020  3246							;;line 2095;; 
   8021  3246
   8022  3246				   .
   8023  3246							;;line 2096;; 
   8024  3246
   8025  3246				   .L0336		;;line 2097;;	on _Pause_Color_Tmp goto __Ps0 __Ps1 __Ps2 __Ps3 __Ps4 __Ps5 __Ps6 __Ps7
   8026  3246
   8027  3246		       a6 df		      LDX	_Pause_Color_Tmp
   8028  3248		       bd 51 52 	      LDA	.L0336jumptablehi,x
   8029  324b		       48		      PHA
   8030  324c		       bd 59 52 	      LDA	.L0336jumptablelo,x
   8031  324f		       48		      PHA
   8032  3250		       60		      RTS
   8033  3251				   .L0336jumptablehi
   8034  3251		       52		      .byte.b	>(.__Ps0-1)
   8035  3252		       53		      .byte.b	>(.__Ps1-1)
   8036  3253		       53		      .byte.b	>(.__Ps2-1)
   8037  3254		       53		      .byte.b	>(.__Ps3-1)
   8038  3255		       53		      .byte.b	>(.__Ps4-1)
   8039  3256		       54		      .byte.b	>(.__Ps5-1)
   8040  3257		       54		      .byte.b	>(.__Ps6-1)
   8041  3258		       54		      .byte.b	>(.__Ps7-1)
   8042  3259				   .L0336jumptablelo
   8043  3259		       bd		      .byte.b	<(.__Ps0-1)
   8044  325a		       00		      .byte.b	<(.__Ps1-1)
   8045  325b		       43		      .byte.b	<(.__Ps2-1)
   8046  325c		       86		      .byte.b	<(.__Ps3-1)
   8047  325d		       c9		      .byte.b	<(.__Ps4-1)
   8048  325e		       0c		      .byte.b	<(.__Ps5-1)
   8049  325f		       4f		      .byte.b	<(.__Ps6-1)
   8050  3260		       92		      .byte.b	<(.__Ps7-1)
   8051  3261				   .
   8052  3261							;;line 2098;; 
   8053  3261
   8054  3261				   .__Got_Pause_Colors
   8055  3261							;;line 2099;; __Got_Pause_Colors
   8056  3261
   8057  3261				   .
   8058  3261							;;line 2100;; 
   8059  3261
   8060  3261				   .
   8061  3261							;;line 2101;; 
   8062  3261
   8063  3261				   .
   8064  3261							;;line 2102;; 
   8065  3261
   8066  3261				   .
   8067  3261							;;line 2103;; 
   8068  3261
   8069  3261				   .
   8070  3261							;;line 2104;; 
   8071  3261
   8072  3261				   .
   8073  3261							;;line 2105;; 
   8074  3261
   8075  3261				   .
   8076  3261							;;line 2106;; 
   8077  3261
   8078  3261				   .L0337		;;line 2107;;	drawscreen
   8079  3261
   8080  3261		       85 ee		      sta	temp7
   8081  3263		       a9 52		      lda	#>(ret_point23-1)
   8082  3265		       48		      pha
   8083  3266		       a9 78		      lda	#<(ret_point23-1)
   8084  3268		       48		      pha
   8085  3269		       a9 f4		      lda	#>(drawscreen-1)
   8086  326b		       48		      pha
   8087  326c		       a9 3b		      lda	#<(drawscreen-1)
   8088  326e		       48		      pha
   8089  326f		       a5 ee		      lda	temp7
   8090  3271		       48		      pha
   8091  3272		       8a		      txa
   8092  3273		       48		      pha
   8093  3274		       a2 08		      ldx	#8
   8094  3276		       4c eb ff 	      jmp	BS_jsr
   8095  3279				   ret_point23
   8096  3279				   .
   8097  3279							;;line 2108;; 
   8098  3279
   8099  3279				   .
   8100  3279							;;line 2109;; 
   8101  3279
   8102  3279				   .
   8103  3279							;;line 2110;; 
   8104  3279
   8105  3279				   .
   8106  3279							;;line 2111;; 
   8107  3279
   8108  3279				   .
   8109  3279							;;line 2112;; 
   8110  3279
   8111  3279				   .
   8112  3279							;;line 2113;; 
   8113  3279
   8114  3279				   .
   8115  3279							;;line 2114;; 
   8116  3279
   8117  3279				   .
   8118  3279							;;line 2115;; 
   8119  3279
   8120  3279				   .
   8121  3279							;;line 2116;; 
   8122  3279
   8123  3279				   .
   8124  3279							;;line 2117;; 
   8125  3279
   8126  3279				   .
   8127  3279							;;line 2118;; 
   8128  3279
   8129  3279				   .L0338		;;line 2119;;	if !joy0fire then _Bit1_FireB_Restrainer{1} = 0  :  goto __Pause_Game
   8130  3279
   8131  3279		       24 0c		      bit	INPT4
   8132  327b		       10 09		      BPL	.skipL0338
   8133  327d				   .condpart151
   8134  327d		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   8135  327f		       29 fd		      AND	#253
   8136  3281		       85 ec		      STA	_Bit1_FireB_Restrainer
   8137  3283		       4c cd 51 	      jmp	.__Pause_Game
   8138  3286
   8139  3286				   .skipL0338
   8140  3286				   .
   8141  3286							;;line 2120;; 
   8142  3286
   8143  3286				   .
   8144  3286							;;line 2121;; 
   8145  3286
   8146  3286				   .
   8147  3286							;;line 2122;; 
   8148  3286
   8149  3286				   .
   8150  3286							;;line 2123;; 
   8151  3286
   8152  3286				   .
   8153  3286							;;line 2124;; 
   8154  3286
   8155  3286				   .L0339		;;line 2125;;	if _Bit1_FireB_Restrainer{1} then goto __Pause_Game
   8156  3286
   8157  3286		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   8158  3288		       29 02		      AND	#2
   8159  328a		       f0 03		      BEQ	.skipL0339
   8160  328c				   .condpart152
   8161  328c		       4c cd 51 	      jmp	.__Pause_Game
   8162  328f
   8163  328f				   .skipL0339
   8164  328f				   .
   8165  328f							;;line 2126;; 
   8166  328f
   8167  328f				   .
   8168  328f							;;line 2127;; 
   8169  328f
   8170  328f				   .
   8171  328f							;;line 2128;; 
   8172  328f
   8173  328f				   .
   8174  328f							;;line 2129;; 
   8175  328f
   8176  328f				   .L0340		;;line 2130;;	_Bit0_BW_Mem{0} = 0  :	if switchbw then _Bit0_BW_Mem{0} = 1
   8177  328f
   8178  328f		       a5 e5		      LDA	_Bit0_BW_Mem
   8179  3291		       29 fe		      AND	#254
   8180  3293		       85 e5		      STA	_Bit0_BW_Mem
   8181  3295		       a9 08		      lda	#8
   8182  3297		       2c 82 02 	      bit	SWCHB
   8183  329a		       d0 06		      BNE	.skipL0340
   8184  329c				   .condpart153
   8185  329c		       a5 e5		      LDA	_Bit0_BW_Mem
   8186  329e		       09 01		      ORA	#1
   8187  32a0		       85 e5		      STA	_Bit0_BW_Mem
   8188  32a2				   .skipL0340
   8189  32a2				   .
   8190  32a2							;;line 2131;; 
   8191  32a2
   8192  32a2				   .
   8193  32a2							;;line 2132;; 
   8194  32a2
   8195  32a2				   .
   8196  32a2							;;line 2133;; 
   8197  32a2
   8198  32a2				   .
   8199  32a2							;;line 2134;; 
   8200  32a2
   8201  32a2				   .
   8202  32a2							;;line 2135;; 
   8203  32a2
   8204  32a2				   .
   8205  32a2							;;line 2136;; 
   8206  32a2
   8207  32a2				   .
   8208  32a2							;;line 2137;; 
   8209  32a2
   8210  32a2				   .
   8211  32a2							;;line 2138;; 
   8212  32a2
   8213  32a2				   .
   8214  32a2							;;line 2139;; 
   8215  32a2
   8216  32a2				   .
   8217  32a2							;;line 2140;; 
   8218  32a2
   8219  32a2				   .
   8220  32a2							;;line 2141;; 
   8221  32a2
   8222  32a2				   .
   8223  32a2							;;line 2142;; 
   8224  32a2
   8225  32a2				   .
   8226  32a2							;;line 2143;; 
   8227  32a2
   8228  32a2				   .
   8229  32a2							;;line 2144;; 
   8230  32a2
   8231  32a2				   .
   8232  32a2							;;line 2145;; 
   8233  32a2
   8234  32a2				   .
   8235  32a2							;;line 2146;; 
   8236  32a2
   8237  32a2				   .
   8238  32a2							;;line 2147;; 
   8239  32a2
   8240  32a2				   .
   8241  32a2							;;line 2148;; 
   8242  32a2
   8243  32a2				   .
   8244  32a2							;;line 2149;; 
   8245  32a2
   8246  32a2				   .
   8247  32a2							;;line 2150;; 
   8248  32a2
   8249  32a2				   .
   8250  32a2							;;line 2151;; 
   8251  32a2
   8252  32a2				   .
   8253  32a2							;;line 2152;; 
   8254  32a2
   8255  32a2				   .
   8256  32a2							;;line 2153;; 
   8257  32a2
   8258  32a2				   .
   8259  32a2							;;line 2154;; 
   8260  32a2
   8261  32a2				   .__Restore_Game_from_Pause
   8262  32a2							;;line 2155;; __Restore_Game_from_Pause
   8263  32a2
   8264  32a2				   .
   8265  32a2							;;line 2156;; 
   8266  32a2
   8267  32a2				   .
   8268  32a2							;;line 2157;; 
   8269  32a2
   8270  32a2				   .
   8271  32a2							;;line 2158;; 
   8272  32a2
   8273  32a2				   .
   8274  32a2							;;line 2159;; 
   8275  32a2
   8276  32a2				   .
   8277  32a2							;;line 2160;; 
   8278  32a2
   8279  32a2				   .
   8280  32a2							;;line 2161;; 
   8281  32a2
   8282  32a2				   .L0341		;;line 2162;;	_Bit1_FireB_Restrainer{1} = 1
   8283  32a2
   8284  32a2		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   8285  32a4		       09 02		      ORA	#2
   8286  32a6		       85 ec		      STA	_Bit1_FireB_Restrainer
   8287  32a8				   .
   8288  32a8							;;line 2163;; 
   8289  32a8
   8290  32a8				   .
   8291  32a8							;;line 2164;; 
   8292  32a8
   8293  32a8				   .
   8294  32a8							;;line 2165;; 
   8295  32a8
   8296  32a8				   .
   8297  32a8							;;line 2166;; 
   8298  32a8
   8299  32a8				   .
   8300  32a8							;;line 2167;; 
   8301  32a8
   8302  32a8				   .
   8303  32a8							;;line 2168;; 
   8304  32a8
   8305  32a8				   .L0342		;;line 2169;;	scorecolor = $1C
   8306  32a8
   8307  32a8		       a9 1c		      LDA	#$1C
   8308  32aa		       85 a3		      STA	scorecolor
   8309  32ac				   .
   8310  32ac							;;line 2170;; 
   8311  32ac
   8312  32ac				   .
   8313  32ac							;;line 2171;; 
   8314  32ac
   8315  32ac				   .L0343		;;line 2172;;	goto __Main_Loop bank2
   8316  32ac
   8317  32ac		       85 ee		      sta	temp7
   8318  32ae		       a9 31		      lda	#>(.__Main_Loop-1)
   8319  32b0		       48		      pha
   8320  32b1		       a9 02		      lda	#<(.__Main_Loop-1)
   8321  32b3		       48		      pha
   8322  32b4		       a5 ee		      lda	temp7
   8323  32b6		       48		      pha
   8324  32b7		       8a		      txa
   8325  32b8		       48		      pha
   8326  32b9		       a2 02		      ldx	#2
   8327  32bb		       4c eb ff 	      jmp	BS_jsr
   8328  32be				   .
   8329  32be							;;line 2173;; 
   8330  32be
   8331  32be				   .
   8332  32be							;;line 2174;; 
   8333  32be
   8334  32be				   .
   8335  32be							;;line 2175;; 
   8336  32be
   8337  32be				   .
   8338  32be							;;line 2176;; 
   8339  32be
   8340  32be				   .
   8341  32be							;;line 2177;; 
   8342  32be
   8343  32be				   .
   8344  32be							;;line 2178;; 
   8345  32be
   8346  32be				   .
   8347  32be							;;line 2179;; 
   8348  32be
   8349  32be				   .
   8350  32be							;;line 2180;; 
   8351  32be
   8352  32be				   .
   8353  32be							;;line 2181;; 
   8354  32be
   8355  32be				   .__Ps0
   8356  32be							;;line 2182;; __Ps0
   8357  32be
   8358  32be				   .
   8359  32be							;;line 2183;; 
   8360  32be
   8361  32be				   .L0344		;;line 2184;;	if _Bit2_Pause_Clr_Scheme{2} then goto __Ps0B
   8362  32be
   8363  32be		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8364  32c0		       29 04		      AND	#4
   8365  32c2		       f0 03		      BEQ	.skipL0344
   8366  32c4				   .condpart154
   8367  32c4		       4c e4 52 	      jmp	.__Ps0B
   8368  32c7
   8369  32c7				   .skipL0344
   8370  32c7				   .
   8371  32c7							;;line 2185;; 
   8372  32c7
   8373  32c7				   .L0345		;;line 2186;;	pfcolors:
   8374  32c7
   8375  32c7		       a9 0c		      lda	# $0C
   8376  32c9		       85 08		      sta	COLUPF
   8377  32cb				  -	      ifconst	pfres
   8378  32cb				  -	      lda	#>(pfcolorlabel195-132+pfres*pfwidth)
   8379  32cb					      else
   8380  32cb		       a9 f6		      lda	#>(pfcolorlabel195-84)
   8381  32cd					      endif
   8382  32cd		       85 f1		      sta	pfcolortable+1
   8383  32cf				  -	      ifconst	pfres
   8384  32cf				  -	      lda	#<(pfcolorlabel195-132+pfres*pfwidth)
   8385  32cf					      else
   8386  32cf		       a9 04		      lda	#<(pfcolorlabel195-84)
   8387  32d1					      endif
   8388  32d1		       85 f0		      sta	pfcolortable
   8389  32d3				   .
   8390  32d3							;;line 2200;; 
   8391  32d3
   8392  32d3				   .L0346		;;line 2201;;	COLUP0 = $0C  :  COLUP1 = $0C
   8393  32d3
   8394  32d3		       a9 0c		      LDA	#$0C
   8395  32d5		       85 06		      STA	COLUP0
   8396  32d7		       85 07		      STA	COLUP1
   8397  32d9				   .
   8398  32d9							;;line 2202;; 
   8399  32d9
   8400  32d9				   .L0347		;;line 2203;;	COLUBK = $0A
   8401  32d9
   8402  32d9		       a9 0a		      LDA	#$0A
   8403  32db		       85 09		      STA	COLUBK
   8404  32dd				   .
   8405  32dd							;;line 2204;; 
   8406  32dd
   8407  32dd				   .L0348		;;line 2205;;	scorecolor = $0C
   8408  32dd
   8409  32dd		       a9 0c		      LDA	#$0C
   8410  32df		       85 a3		      STA	scorecolor
   8411  32e1				   .
   8412  32e1							;;line 2206;; 
   8413  32e1
   8414  32e1				   .L0349		;;line 2207;;	goto __Got_Pause_Colors
   8415  32e1
   8416  32e1		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8417  32e4
   8418  32e4				   .
   8419  32e4							;;line 2208;; 
   8420  32e4
   8421  32e4				   .
   8422  32e4							;;line 2209;; 
   8423  32e4
   8424  32e4				   .
   8425  32e4							;;line 2210;; 
   8426  32e4
   8427  32e4				   .
   8428  32e4							;;line 2211;; 
   8429  32e4
   8430  32e4				   .
   8431  32e4							;;line 2212;; 
   8432  32e4
   8433  32e4				   .
   8434  32e4							;;line 2213;; 
   8435  32e4
   8436  32e4				   .
   8437  32e4							;;line 2214;; 
   8438  32e4
   8439  32e4				   .__Ps0B
   8440  32e4							;;line 2215;; __Ps0B
   8441  32e4
   8442  32e4				   .
   8443  32e4							;;line 2216;; 
   8444  32e4
   8445  32e4				   .L0350		;;line 2217;;	pfcolors:
   8446  32e4
   8447  32e4		       a9 0a		      lda	# $0A
   8448  32e6		       85 08		      sta	COLUPF
   8449  32e8				  -	      ifconst	pfres
   8450  32e8				  -	      lda	#>(pfcolorlabel195-131+pfres*pfwidth)
   8451  32e8					      else
   8452  32e8		       a9 f6		      lda	#>(pfcolorlabel195-83)
   8453  32ea					      endif
   8454  32ea		       85 f1		      sta	pfcolortable+1
   8455  32ec				  -	      ifconst	pfres
   8456  32ec				  -	      lda	#<(pfcolorlabel195-131+pfres*pfwidth)
   8457  32ec					      else
   8458  32ec		       a9 05		      lda	#<(pfcolorlabel195-83)
   8459  32ee					      endif
   8460  32ee		       85 f0		      sta	pfcolortable
   8461  32f0				   .
   8462  32f0							;;line 2231;; 
   8463  32f0
   8464  32f0				   .L0351		;;line 2232;;	COLUP0 = $0A  :  COLUP1 = $0A
   8465  32f0
   8466  32f0		       a9 0a		      LDA	#$0A
   8467  32f2		       85 06		      STA	COLUP0
   8468  32f4		       85 07		      STA	COLUP1
   8469  32f6				   .
   8470  32f6							;;line 2233;; 
   8471  32f6
   8472  32f6				   .L0352		;;line 2234;;	COLUBK = $0C
   8473  32f6
   8474  32f6		       a9 0c		      LDA	#$0C
   8475  32f8		       85 09		      STA	COLUBK
   8476  32fa				   .
   8477  32fa							;;line 2235;; 
   8478  32fa
   8479  32fa				   .L0353		;;line 2236;;	scorecolor = $0A
   8480  32fa
   8481  32fa		       a9 0a		      LDA	#$0A
   8482  32fc		       85 a3		      STA	scorecolor
   8483  32fe				   .
   8484  32fe							;;line 2237;; 
   8485  32fe
   8486  32fe				   .L0354		;;line 2238;;	goto __Got_Pause_Colors
   8487  32fe
   8488  32fe		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8489  3301
   8490  3301				   .
   8491  3301							;;line 2239;; 
   8492  3301
   8493  3301				   .
   8494  3301							;;line 2240;; 
   8495  3301
   8496  3301				   .
   8497  3301							;;line 2241;; 
   8498  3301
   8499  3301				   .
   8500  3301							;;line 2242;; 
   8501  3301
   8502  3301				   .
   8503  3301							;;line 2243;; 
   8504  3301
   8505  3301				   .
   8506  3301							;;line 2244;; 
   8507  3301
   8508  3301				   .
   8509  3301							;;line 2245;; 
   8510  3301
   8511  3301				   .__Ps1
   8512  3301							;;line 2246;; __Ps1
   8513  3301
   8514  3301				   .
   8515  3301							;;line 2247;; 
   8516  3301
   8517  3301				   .L0355		;;line 2248;;	if _Bit2_Pause_Clr_Scheme{2} then goto __Ps1B
   8518  3301
   8519  3301		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8520  3303		       29 04		      AND	#4
   8521  3305		       f0 03		      BEQ	.skipL0355
   8522  3307				   .condpart155
   8523  3307		       4c 27 53 	      jmp	.__Ps1B
   8524  330a
   8525  330a				   .skipL0355
   8526  330a				   .
   8527  330a							;;line 2249;; 
   8528  330a
   8529  330a				   .L0356		;;line 2250;;	pfcolors:
   8530  330a
   8531  330a		       a9 3c		      lda	# $3C
   8532  330c		       85 08		      sta	COLUPF
   8533  330e				  -	      ifconst	pfres
   8534  330e				  -	      lda	#>(pfcolorlabel195-130+pfres*pfwidth)
   8535  330e					      else
   8536  330e		       a9 f6		      lda	#>(pfcolorlabel195-82)
   8537  3310					      endif
   8538  3310		       85 f1		      sta	pfcolortable+1
   8539  3312				  -	      ifconst	pfres
   8540  3312				  -	      lda	#<(pfcolorlabel195-130+pfres*pfwidth)
   8541  3312					      else
   8542  3312		       a9 06		      lda	#<(pfcolorlabel195-82)
   8543  3314					      endif
   8544  3314		       85 f0		      sta	pfcolortable
   8545  3316				   .
   8546  3316							;;line 2264;; 
   8547  3316
   8548  3316				   .L0357		;;line 2265;;	COLUP0 = $3C  :  COLUP1 = $3C
   8549  3316
   8550  3316		       a9 3c		      LDA	#$3C
   8551  3318		       85 06		      STA	COLUP0
   8552  331a		       85 07		      STA	COLUP1
   8553  331c				   .
   8554  331c							;;line 2266;; 
   8555  331c
   8556  331c				   .L0358		;;line 2267;;	COLUBK = $3A
   8557  331c
   8558  331c		       a9 3a		      LDA	#$3A
   8559  331e		       85 09		      STA	COLUBK
   8560  3320				   .
   8561  3320							;;line 2268;; 
   8562  3320
   8563  3320				   .L0359		;;line 2269;;	scorecolor = $3C
   8564  3320
   8565  3320		       a9 3c		      LDA	#$3C
   8566  3322		       85 a3		      STA	scorecolor
   8567  3324				   .
   8568  3324							;;line 2270;; 
   8569  3324
   8570  3324				   .L0360		;;line 2271;;	goto __Got_Pause_Colors
   8571  3324
   8572  3324		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8573  3327
   8574  3327				   .
   8575  3327							;;line 2272;; 
   8576  3327
   8577  3327				   .
   8578  3327							;;line 2273;; 
   8579  3327
   8580  3327				   .
   8581  3327							;;line 2274;; 
   8582  3327
   8583  3327				   .
   8584  3327							;;line 2275;; 
   8585  3327
   8586  3327				   .
   8587  3327							;;line 2276;; 
   8588  3327
   8589  3327				   .
   8590  3327							;;line 2277;; 
   8591  3327
   8592  3327				   .
   8593  3327							;;line 2278;; 
   8594  3327
   8595  3327				   .__Ps1B
   8596  3327							;;line 2279;; __Ps1B
   8597  3327
   8598  3327				   .
   8599  3327							;;line 2280;; 
   8600  3327
   8601  3327				   .L0361		;;line 2281;;	pfcolors:
   8602  3327
   8603  3327		       a9 3a		      lda	# $3A
   8604  3329		       85 08		      sta	COLUPF
   8605  332b				  -	      ifconst	pfres
   8606  332b				  -	      lda	#>(pfcolorlabel195-129+pfres*pfwidth)
   8607  332b					      else
   8608  332b		       a9 f6		      lda	#>(pfcolorlabel195-81)
   8609  332d					      endif
   8610  332d		       85 f1		      sta	pfcolortable+1
   8611  332f				  -	      ifconst	pfres
   8612  332f				  -	      lda	#<(pfcolorlabel195-129+pfres*pfwidth)
   8613  332f					      else
   8614  332f		       a9 07		      lda	#<(pfcolorlabel195-81)
   8615  3331					      endif
   8616  3331		       85 f0		      sta	pfcolortable
   8617  3333				   .
   8618  3333							;;line 2295;; 
   8619  3333
   8620  3333				   .L0362		;;line 2296;;	COLUP0 = $3A  :  COLUP1 = $3A
   8621  3333
   8622  3333		       a9 3a		      LDA	#$3A
   8623  3335		       85 06		      STA	COLUP0
   8624  3337		       85 07		      STA	COLUP1
   8625  3339				   .
   8626  3339							;;line 2297;; 
   8627  3339
   8628  3339				   .L0363		;;line 2298;;	COLUBK = $3C
   8629  3339
   8630  3339		       a9 3c		      LDA	#$3C
   8631  333b		       85 09		      STA	COLUBK
   8632  333d				   .
   8633  333d							;;line 2299;; 
   8634  333d
   8635  333d				   .L0364		;;line 2300;;	scorecolor = $3A
   8636  333d
   8637  333d		       a9 3a		      LDA	#$3A
   8638  333f		       85 a3		      STA	scorecolor
   8639  3341				   .
   8640  3341							;;line 2301;; 
   8641  3341
   8642  3341				   .L0365		;;line 2302;;	goto __Got_Pause_Colors
   8643  3341
   8644  3341		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8645  3344
   8646  3344				   .
   8647  3344							;;line 2303;; 
   8648  3344
   8649  3344				   .
   8650  3344							;;line 2304;; 
   8651  3344
   8652  3344				   .
   8653  3344							;;line 2305;; 
   8654  3344
   8655  3344				   .
   8656  3344							;;line 2306;; 
   8657  3344
   8658  3344				   .
   8659  3344							;;line 2307;; 
   8660  3344
   8661  3344				   .
   8662  3344							;;line 2308;; 
   8663  3344
   8664  3344				   .
   8665  3344							;;line 2309;; 
   8666  3344
   8667  3344				   .__Ps2
   8668  3344							;;line 2310;; __Ps2
   8669  3344
   8670  3344				   .
   8671  3344							;;line 2311;; 
   8672  3344
   8673  3344				   .L0366		;;line 2312;;	if _Bit2_Pause_Clr_Scheme{2} then goto __Ps2B
   8674  3344
   8675  3344		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8676  3346		       29 04		      AND	#4
   8677  3348		       f0 03		      BEQ	.skipL0366
   8678  334a				   .condpart156
   8679  334a		       4c 6a 53 	      jmp	.__Ps2B
   8680  334d
   8681  334d				   .skipL0366
   8682  334d				   .
   8683  334d							;;line 2313;; 
   8684  334d
   8685  334d				   .L0367		;;line 2314;;	pfcolors:
   8686  334d
   8687  334d		       a9 6c		      lda	# $6C
   8688  334f		       85 08		      sta	COLUPF
   8689  3351				  -	      ifconst	pfres
   8690  3351				  -	      lda	#>(pfcolorlabel220-132+pfres*pfwidth)
   8691  3351					      else
   8692  3351		       a9 f6		      lda	#>(pfcolorlabel220-84)
   8693  3353					      endif
   8694  3353		       85 f1		      sta	pfcolortable+1
   8695  3355				  -	      ifconst	pfres
   8696  3355				  -	      lda	#<(pfcolorlabel220-132+pfres*pfwidth)
   8697  3355					      else
   8698  3355		       a9 30		      lda	#<(pfcolorlabel220-84)
   8699  3357					      endif
   8700  3357		       85 f0		      sta	pfcolortable
   8701  3359				   .
   8702  3359							;;line 2328;; 
   8703  3359
   8704  3359				   .L0368		;;line 2329;;	COLUP0 = $6C  :  COLUP1 = $6C
   8705  3359
   8706  3359		       a9 6c		      LDA	#$6C
   8707  335b		       85 06		      STA	COLUP0
   8708  335d		       85 07		      STA	COLUP1
   8709  335f				   .
   8710  335f							;;line 2330;; 
   8711  335f
   8712  335f				   .L0369		;;line 2331;;	COLUBK = $6A
   8713  335f
   8714  335f		       a9 6a		      LDA	#$6A
   8715  3361		       85 09		      STA	COLUBK
   8716  3363				   .
   8717  3363							;;line 2332;; 
   8718  3363
   8719  3363				   .L0370		;;line 2333;;	scorecolor = $6C
   8720  3363
   8721  3363		       a9 6c		      LDA	#$6C
   8722  3365		       85 a3		      STA	scorecolor
   8723  3367				   .
   8724  3367							;;line 2334;; 
   8725  3367
   8726  3367				   .L0371		;;line 2335;;	goto __Got_Pause_Colors
   8727  3367
   8728  3367		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8729  336a
   8730  336a				   .
   8731  336a							;;line 2336;; 
   8732  336a
   8733  336a				   .
   8734  336a							;;line 2337;; 
   8735  336a
   8736  336a				   .
   8737  336a							;;line 2338;; 
   8738  336a
   8739  336a				   .
   8740  336a							;;line 2339;; 
   8741  336a
   8742  336a				   .
   8743  336a							;;line 2340;; 
   8744  336a
   8745  336a				   .
   8746  336a							;;line 2341;; 
   8747  336a
   8748  336a				   .
   8749  336a							;;line 2342;; 
   8750  336a
   8751  336a				   .__Ps2B
   8752  336a							;;line 2343;; __Ps2B
   8753  336a
   8754  336a				   .
   8755  336a							;;line 2344;; 
   8756  336a
   8757  336a				   .L0372		;;line 2345;;	pfcolors:
   8758  336a
   8759  336a		       a9 6a		      lda	# $6A
   8760  336c		       85 08		      sta	COLUPF
   8761  336e				  -	      ifconst	pfres
   8762  336e				  -	      lda	#>(pfcolorlabel220-131+pfres*pfwidth)
   8763  336e					      else
   8764  336e		       a9 f6		      lda	#>(pfcolorlabel220-83)
   8765  3370					      endif
   8766  3370		       85 f1		      sta	pfcolortable+1
   8767  3372				  -	      ifconst	pfres
   8768  3372				  -	      lda	#<(pfcolorlabel220-131+pfres*pfwidth)
   8769  3372					      else
   8770  3372		       a9 31		      lda	#<(pfcolorlabel220-83)
   8771  3374					      endif
   8772  3374		       85 f0		      sta	pfcolortable
   8773  3376				   .
   8774  3376							;;line 2359;; 
   8775  3376
   8776  3376				   .L0373		;;line 2360;;	COLUP0 = $6A  :  COLUP1 = $6A
   8777  3376
   8778  3376		       a9 6a		      LDA	#$6A
   8779  3378		       85 06		      STA	COLUP0
   8780  337a		       85 07		      STA	COLUP1
   8781  337c				   .
   8782  337c							;;line 2361;; 
   8783  337c
   8784  337c				   .L0374		;;line 2362;;	COLUBK = $6C
   8785  337c
   8786  337c		       a9 6c		      LDA	#$6C
   8787  337e		       85 09		      STA	COLUBK
   8788  3380				   .
   8789  3380							;;line 2363;; 
   8790  3380
   8791  3380				   .L0375		;;line 2364;;	scorecolor = $6A
   8792  3380
   8793  3380		       a9 6a		      LDA	#$6A
   8794  3382		       85 a3		      STA	scorecolor
   8795  3384				   .
   8796  3384							;;line 2365;; 
   8797  3384
   8798  3384				   .L0376		;;line 2366;;	goto __Got_Pause_Colors
   8799  3384
   8800  3384		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8801  3387
   8802  3387				   .
   8803  3387							;;line 2367;; 
   8804  3387
   8805  3387				   .
   8806  3387							;;line 2368;; 
   8807  3387
   8808  3387				   .
   8809  3387							;;line 2369;; 
   8810  3387
   8811  3387				   .
   8812  3387							;;line 2370;; 
   8813  3387
   8814  3387				   .
   8815  3387							;;line 2371;; 
   8816  3387
   8817  3387				   .
   8818  3387							;;line 2372;; 
   8819  3387
   8820  3387				   .
   8821  3387							;;line 2373;; 
   8822  3387
   8823  3387				   .__Ps3
   8824  3387							;;line 2374;; __Ps3
   8825  3387
   8826  3387				   .
   8827  3387							;;line 2375;; 
   8828  3387
   8829  3387				   .L0377		;;line 2376;;	if _Bit2_Pause_Clr_Scheme{2} then goto __Ps3B
   8830  3387
   8831  3387		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8832  3389		       29 04		      AND	#4
   8833  338b		       f0 03		      BEQ	.skipL0377
   8834  338d				   .condpart157
   8835  338d		       4c ad 53 	      jmp	.__Ps3B
   8836  3390
   8837  3390				   .skipL0377
   8838  3390				   .
   8839  3390							;;line 2377;; 
   8840  3390
   8841  3390				   .L0378		;;line 2378;;	pfcolors:
   8842  3390
   8843  3390		       a9 9c		      lda	# $9C
   8844  3392		       85 08		      sta	COLUPF
   8845  3394				  -	      ifconst	pfres
   8846  3394				  -	      lda	#>(pfcolorlabel220-130+pfres*pfwidth)
   8847  3394					      else
   8848  3394		       a9 f6		      lda	#>(pfcolorlabel220-82)
   8849  3396					      endif
   8850  3396		       85 f1		      sta	pfcolortable+1
   8851  3398				  -	      ifconst	pfres
   8852  3398				  -	      lda	#<(pfcolorlabel220-130+pfres*pfwidth)
   8853  3398					      else
   8854  3398		       a9 32		      lda	#<(pfcolorlabel220-82)
   8855  339a					      endif
   8856  339a		       85 f0		      sta	pfcolortable
   8857  339c				   .
   8858  339c							;;line 2392;; 
   8859  339c
   8860  339c				   .L0379		;;line 2393;;	COLUP0 = $9C  :  COLUP1 = $9C
   8861  339c
   8862  339c		       a9 9c		      LDA	#$9C
   8863  339e		       85 06		      STA	COLUP0
   8864  33a0		       85 07		      STA	COLUP1
   8865  33a2				   .
   8866  33a2							;;line 2394;; 
   8867  33a2
   8868  33a2				   .L0380		;;line 2395;;	COLUBK = $9A
   8869  33a2
   8870  33a2		       a9 9a		      LDA	#$9A
   8871  33a4		       85 09		      STA	COLUBK
   8872  33a6				   .
   8873  33a6							;;line 2396;; 
   8874  33a6
   8875  33a6				   .L0381		;;line 2397;;	scorecolor = $9C
   8876  33a6
   8877  33a6		       a9 9c		      LDA	#$9C
   8878  33a8		       85 a3		      STA	scorecolor
   8879  33aa				   .
   8880  33aa							;;line 2398;; 
   8881  33aa
   8882  33aa				   .L0382		;;line 2399;;	goto __Got_Pause_Colors
   8883  33aa
   8884  33aa		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8885  33ad
   8886  33ad				   .
   8887  33ad							;;line 2400;; 
   8888  33ad
   8889  33ad				   .
   8890  33ad							;;line 2401;; 
   8891  33ad
   8892  33ad				   .
   8893  33ad							;;line 2402;; 
   8894  33ad
   8895  33ad				   .
   8896  33ad							;;line 2403;; 
   8897  33ad
   8898  33ad				   .
   8899  33ad							;;line 2404;; 
   8900  33ad
   8901  33ad				   .
   8902  33ad							;;line 2405;; 
   8903  33ad
   8904  33ad				   .
   8905  33ad							;;line 2406;; 
   8906  33ad
   8907  33ad				   .__Ps3B
   8908  33ad							;;line 2407;; __Ps3B
   8909  33ad
   8910  33ad				   .
   8911  33ad							;;line 2408;; 
   8912  33ad
   8913  33ad				   .L0383		;;line 2409;;	pfcolors:
   8914  33ad
   8915  33ad		       a9 9a		      lda	# $9A
   8916  33af		       85 08		      sta	COLUPF
   8917  33b1				  -	      ifconst	pfres
   8918  33b1				  -	      lda	#>(pfcolorlabel220-129+pfres*pfwidth)
   8919  33b1					      else
   8920  33b1		       a9 f6		      lda	#>(pfcolorlabel220-81)
   8921  33b3					      endif
   8922  33b3		       85 f1		      sta	pfcolortable+1
   8923  33b5				  -	      ifconst	pfres
   8924  33b5				  -	      lda	#<(pfcolorlabel220-129+pfres*pfwidth)
   8925  33b5					      else
   8926  33b5		       a9 33		      lda	#<(pfcolorlabel220-81)
   8927  33b7					      endif
   8928  33b7		       85 f0		      sta	pfcolortable
   8929  33b9				   .
   8930  33b9							;;line 2423;; 
   8931  33b9
   8932  33b9				   .L0384		;;line 2424;;	COLUP0 = $9A  :  COLUP1 = $9A
   8933  33b9
   8934  33b9		       a9 9a		      LDA	#$9A
   8935  33bb		       85 06		      STA	COLUP0
   8936  33bd		       85 07		      STA	COLUP1
   8937  33bf				   .
   8938  33bf							;;line 2425;; 
   8939  33bf
   8940  33bf				   .L0385		;;line 2426;;	COLUBK = $9C
   8941  33bf
   8942  33bf		       a9 9c		      LDA	#$9C
   8943  33c1		       85 09		      STA	COLUBK
   8944  33c3				   .
   8945  33c3							;;line 2427;; 
   8946  33c3
   8947  33c3				   .L0386		;;line 2428;;	scorecolor = $9A
   8948  33c3
   8949  33c3		       a9 9a		      LDA	#$9A
   8950  33c5		       85 a3		      STA	scorecolor
   8951  33c7				   .
   8952  33c7							;;line 2429;; 
   8953  33c7
   8954  33c7				   .L0387		;;line 2430;;	goto __Got_Pause_Colors
   8955  33c7
   8956  33c7		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8957  33ca
   8958  33ca				   .
   8959  33ca							;;line 2431;; 
   8960  33ca
   8961  33ca				   .
   8962  33ca							;;line 2432;; 
   8963  33ca
   8964  33ca				   .
   8965  33ca							;;line 2433;; 
   8966  33ca
   8967  33ca				   .
   8968  33ca							;;line 2434;; 
   8969  33ca
   8970  33ca				   .
   8971  33ca							;;line 2435;; 
   8972  33ca
   8973  33ca				   .
   8974  33ca							;;line 2436;; 
   8975  33ca
   8976  33ca				   .
   8977  33ca							;;line 2437;; 
   8978  33ca
   8979  33ca				   .__Ps4
   8980  33ca							;;line 2438;; __Ps4
   8981  33ca
   8982  33ca				   .
   8983  33ca							;;line 2439;; 
   8984  33ca
   8985  33ca				   .L0388		;;line 2440;;	if _Bit2_Pause_Clr_Scheme{2} then goto __Ps4B
   8986  33ca
   8987  33ca		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8988  33cc		       29 04		      AND	#4
   8989  33ce		       f0 03		      BEQ	.skipL0388
   8990  33d0				   .condpart158
   8991  33d0		       4c f0 53 	      jmp	.__Ps4B
   8992  33d3
   8993  33d3				   .skipL0388
   8994  33d3				   .
   8995  33d3							;;line 2441;; 
   8996  33d3
   8997  33d3				   .L0389		;;line 2442;;	pfcolors:
   8998  33d3
   8999  33d3		       a9 cc		      lda	# $CC
   9000  33d5		       85 08		      sta	COLUPF
   9001  33d7				  -	      ifconst	pfres
   9002  33d7				  -	      lda	#>(pfcolorlabel245-132+pfres*pfwidth)
   9003  33d7					      else
   9004  33d7		       a9 f6		      lda	#>(pfcolorlabel245-84)
   9005  33d9					      endif
   9006  33d9		       85 f1		      sta	pfcolortable+1
   9007  33db				  -	      ifconst	pfres
   9008  33db				  -	      lda	#<(pfcolorlabel245-132+pfres*pfwidth)
   9009  33db					      else
   9010  33db		       a9 5c		      lda	#<(pfcolorlabel245-84)
   9011  33dd					      endif
   9012  33dd		       85 f0		      sta	pfcolortable
   9013  33df				   .
   9014  33df							;;line 2456;; 
   9015  33df
   9016  33df				   .L0390		;;line 2457;;	COLUP0 = $CC  :  COLUP1 = $CC
   9017  33df
   9018  33df		       a9 cc		      LDA	#$CC
   9019  33e1		       85 06		      STA	COLUP0
   9020  33e3		       85 07		      STA	COLUP1
   9021  33e5				   .
   9022  33e5							;;line 2458;; 
   9023  33e5
   9024  33e5				   .L0391		;;line 2459;;	COLUBK = $CA
   9025  33e5
   9026  33e5		       a9 ca		      LDA	#$CA
   9027  33e7		       85 09		      STA	COLUBK
   9028  33e9				   .
   9029  33e9							;;line 2460;; 
   9030  33e9
   9031  33e9				   .L0392		;;line 2461;;	scorecolor = $CC
   9032  33e9
   9033  33e9		       a9 cc		      LDA	#$CC
   9034  33eb		       85 a3		      STA	scorecolor
   9035  33ed				   .
   9036  33ed							;;line 2462;; 
   9037  33ed
   9038  33ed				   .L0393		;;line 2463;;	goto __Got_Pause_Colors
   9039  33ed
   9040  33ed		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9041  33f0
   9042  33f0				   .
   9043  33f0							;;line 2464;; 
   9044  33f0
   9045  33f0				   .
   9046  33f0							;;line 2465;; 
   9047  33f0
   9048  33f0				   .
   9049  33f0							;;line 2466;; 
   9050  33f0
   9051  33f0				   .
   9052  33f0							;;line 2467;; 
   9053  33f0
   9054  33f0				   .
   9055  33f0							;;line 2468;; 
   9056  33f0
   9057  33f0				   .
   9058  33f0							;;line 2469;; 
   9059  33f0
   9060  33f0				   .
   9061  33f0							;;line 2470;; 
   9062  33f0
   9063  33f0				   .__Ps4B
   9064  33f0							;;line 2471;; __Ps4B
   9065  33f0
   9066  33f0				   .
   9067  33f0							;;line 2472;; 
   9068  33f0
   9069  33f0				   .L0394		;;line 2473;;	pfcolors:
   9070  33f0
   9071  33f0		       a9 ca		      lda	# $CA
   9072  33f2		       85 08		      sta	COLUPF
   9073  33f4				  -	      ifconst	pfres
   9074  33f4				  -	      lda	#>(pfcolorlabel245-131+pfres*pfwidth)
   9075  33f4					      else
   9076  33f4		       a9 f6		      lda	#>(pfcolorlabel245-83)
   9077  33f6					      endif
   9078  33f6		       85 f1		      sta	pfcolortable+1
   9079  33f8				  -	      ifconst	pfres
   9080  33f8				  -	      lda	#<(pfcolorlabel245-131+pfres*pfwidth)
   9081  33f8					      else
   9082  33f8		       a9 5d		      lda	#<(pfcolorlabel245-83)
   9083  33fa					      endif
   9084  33fa		       85 f0		      sta	pfcolortable
   9085  33fc				   .
   9086  33fc							;;line 2487;; 
   9087  33fc
   9088  33fc				   .L0395		;;line 2488;;	COLUP0 = $CA  :  COLUP1 = $CA
   9089  33fc
   9090  33fc		       a9 ca		      LDA	#$CA
   9091  33fe		       85 06		      STA	COLUP0
   9092  3400		       85 07		      STA	COLUP1
   9093  3402				   .
   9094  3402							;;line 2489;; 
   9095  3402
   9096  3402				   .L0396		;;line 2490;;	COLUBK = $CC
   9097  3402
   9098  3402		       a9 cc		      LDA	#$CC
   9099  3404		       85 09		      STA	COLUBK
   9100  3406				   .
   9101  3406							;;line 2491;; 
   9102  3406
   9103  3406				   .L0397		;;line 2492;;	scorecolor = $CA
   9104  3406
   9105  3406		       a9 ca		      LDA	#$CA
   9106  3408		       85 a3		      STA	scorecolor
   9107  340a				   .
   9108  340a							;;line 2493;; 
   9109  340a
   9110  340a				   .L0398		;;line 2494;;	goto __Got_Pause_Colors
   9111  340a
   9112  340a		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9113  340d
   9114  340d				   .
   9115  340d							;;line 2495;; 
   9116  340d
   9117  340d				   .
   9118  340d							;;line 2496;; 
   9119  340d
   9120  340d				   .
   9121  340d							;;line 2497;; 
   9122  340d
   9123  340d				   .
   9124  340d							;;line 2498;; 
   9125  340d
   9126  340d				   .
   9127  340d							;;line 2499;; 
   9128  340d
   9129  340d				   .
   9130  340d							;;line 2500;; 
   9131  340d
   9132  340d				   .
   9133  340d							;;line 2501;; 
   9134  340d
   9135  340d				   .__Ps5
   9136  340d							;;line 2502;; __Ps5
   9137  340d
   9138  340d				   .
   9139  340d							;;line 2503;; 
   9140  340d
   9141  340d				   .L0399		;;line 2504;;	if _Bit2_Pause_Clr_Scheme{2} then goto __Ps5B
   9142  340d
   9143  340d		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   9144  340f		       29 04		      AND	#4
   9145  3411		       f0 03		      BEQ	.skipL0399
   9146  3413				   .condpart159
   9147  3413		       4c 33 54 	      jmp	.__Ps5B
   9148  3416
   9149  3416				   .skipL0399
   9150  3416				   .
   9151  3416							;;line 2505;; 
   9152  3416
   9153  3416				   .L0400		;;line 2506;;	pfcolors:
   9154  3416
   9155  3416		       a9 fc		      lda	# $FC
   9156  3418		       85 08		      sta	COLUPF
   9157  341a				  -	      ifconst	pfres
   9158  341a				  -	      lda	#>(pfcolorlabel245-130+pfres*pfwidth)
   9159  341a					      else
   9160  341a		       a9 f6		      lda	#>(pfcolorlabel245-82)
   9161  341c					      endif
   9162  341c		       85 f1		      sta	pfcolortable+1
   9163  341e				  -	      ifconst	pfres
   9164  341e				  -	      lda	#<(pfcolorlabel245-130+pfres*pfwidth)
   9165  341e					      else
   9166  341e		       a9 5e		      lda	#<(pfcolorlabel245-82)
   9167  3420					      endif
   9168  3420		       85 f0		      sta	pfcolortable
   9169  3422				   .
   9170  3422							;;line 2520;; 
   9171  3422
   9172  3422				   .L0401		;;line 2521;;	COLUP0 = $FC  :  COLUP1 = $FC
   9173  3422
   9174  3422		       a9 fc		      LDA	#$FC
   9175  3424		       85 06		      STA	COLUP0
   9176  3426		       85 07		      STA	COLUP1
   9177  3428				   .
   9178  3428							;;line 2522;; 
   9179  3428
   9180  3428				   .L0402		;;line 2523;;	COLUBK = $FA
   9181  3428
   9182  3428		       a9 fa		      LDA	#$FA
   9183  342a		       85 09		      STA	COLUBK
   9184  342c				   .
   9185  342c							;;line 2524;; 
   9186  342c
   9187  342c				   .L0403		;;line 2525;;	scorecolor = $FC
   9188  342c
   9189  342c		       a9 fc		      LDA	#$FC
   9190  342e		       85 a3		      STA	scorecolor
   9191  3430				   .
   9192  3430							;;line 2526;; 
   9193  3430
   9194  3430				   .L0404		;;line 2527;;	goto __Got_Pause_Colors
   9195  3430
   9196  3430		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9197  3433
   9198  3433				   .
   9199  3433							;;line 2528;; 
   9200  3433
   9201  3433				   .
   9202  3433							;;line 2529;; 
   9203  3433
   9204  3433				   .
   9205  3433							;;line 2530;; 
   9206  3433
   9207  3433				   .
   9208  3433							;;line 2531;; 
   9209  3433
   9210  3433				   .
   9211  3433							;;line 2532;; 
   9212  3433
   9213  3433				   .
   9214  3433							;;line 2533;; 
   9215  3433
   9216  3433				   .
   9217  3433							;;line 2534;; 
   9218  3433
   9219  3433				   .__Ps5B
   9220  3433							;;line 2535;; __Ps5B
   9221  3433
   9222  3433				   .
   9223  3433							;;line 2536;; 
   9224  3433
   9225  3433				   .L0405		;;line 2537;;	pfcolors:
   9226  3433
   9227  3433		       a9 fa		      lda	# $FA
   9228  3435		       85 08		      sta	COLUPF
   9229  3437				  -	      ifconst	pfres
   9230  3437				  -	      lda	#>(pfcolorlabel245-129+pfres*pfwidth)
   9231  3437					      else
   9232  3437		       a9 f6		      lda	#>(pfcolorlabel245-81)
   9233  3439					      endif
   9234  3439		       85 f1		      sta	pfcolortable+1
   9235  343b				  -	      ifconst	pfres
   9236  343b				  -	      lda	#<(pfcolorlabel245-129+pfres*pfwidth)
   9237  343b					      else
   9238  343b		       a9 5f		      lda	#<(pfcolorlabel245-81)
   9239  343d					      endif
   9240  343d		       85 f0		      sta	pfcolortable
   9241  343f				   .
   9242  343f							;;line 2551;; 
   9243  343f
   9244  343f				   .L0406		;;line 2552;;	COLUP0 = $FA  :  COLUP1 = $FA
   9245  343f
   9246  343f		       a9 fa		      LDA	#$FA
   9247  3441		       85 06		      STA	COLUP0
   9248  3443		       85 07		      STA	COLUP1
   9249  3445				   .
   9250  3445							;;line 2553;; 
   9251  3445
   9252  3445				   .L0407		;;line 2554;;	COLUBK = $FC
   9253  3445
   9254  3445		       a9 fc		      LDA	#$FC
   9255  3447		       85 09		      STA	COLUBK
   9256  3449				   .
   9257  3449							;;line 2555;; 
   9258  3449
   9259  3449				   .L0408		;;line 2556;;	scorecolor = $FA
   9260  3449
   9261  3449		       a9 fa		      LDA	#$FA
   9262  344b		       85 a3		      STA	scorecolor
   9263  344d				   .
   9264  344d							;;line 2557;; 
   9265  344d
   9266  344d				   .L0409		;;line 2558;;	goto __Got_Pause_Colors
   9267  344d
   9268  344d		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9269  3450
   9270  3450				   .
   9271  3450							;;line 2559;; 
   9272  3450
   9273  3450				   .
   9274  3450							;;line 2560;; 
   9275  3450
   9276  3450				   .
   9277  3450							;;line 2561;; 
   9278  3450
   9279  3450				   .
   9280  3450							;;line 2562;; 
   9281  3450
   9282  3450				   .
   9283  3450							;;line 2563;; 
   9284  3450
   9285  3450				   .
   9286  3450							;;line 2564;; 
   9287  3450
   9288  3450				   .
   9289  3450							;;line 2565;; 
   9290  3450
   9291  3450				   .__Ps6
   9292  3450							;;line 2566;; __Ps6
   9293  3450
   9294  3450				   .
   9295  3450							;;line 2567;; 
   9296  3450
   9297  3450				   .L0410		;;line 2568;;	if _Bit2_Pause_Clr_Scheme{2} then goto __Ps6B
   9298  3450
   9299  3450		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   9300  3452		       29 04		      AND	#4
   9301  3454		       f0 03		      BEQ	.skipL0410
   9302  3456				   .condpart160
   9303  3456		       4c 76 54 	      jmp	.__Ps6B
   9304  3459
   9305  3459				   .skipL0410
   9306  3459				   .
   9307  3459							;;line 2569;; 
   9308  3459
   9309  3459				   .L0411		;;line 2570;;	pfcolors:
   9310  3459
   9311  3459		       a9 8c		      lda	# $8C
   9312  345b		       85 08		      sta	COLUPF
   9313  345d				  -	      ifconst	pfres
   9314  345d				  -	      lda	#>(pfcolorlabel270-132+pfres*pfwidth)
   9315  345d					      else
   9316  345d		       a9 f7		      lda	#>(pfcolorlabel270-84)
   9317  345f					      endif
   9318  345f		       85 f1		      sta	pfcolortable+1
   9319  3461				  -	      ifconst	pfres
   9320  3461				  -	      lda	#<(pfcolorlabel270-132+pfres*pfwidth)
   9321  3461					      else
   9322  3461		       a9 04		      lda	#<(pfcolorlabel270-84)
   9323  3463					      endif
   9324  3463		       85 f0		      sta	pfcolortable
   9325  3465				   .
   9326  3465							;;line 2584;; 
   9327  3465
   9328  3465				   .L0412		;;line 2585;;	COLUP0 = $8C  :  COLUP1 = $8C
   9329  3465
   9330  3465		       a9 8c		      LDA	#$8C
   9331  3467		       85 06		      STA	COLUP0
   9332  3469		       85 07		      STA	COLUP1
   9333  346b				   .
   9334  346b							;;line 2586;; 
   9335  346b
   9336  346b				   .L0413		;;line 2587;;	COLUBK = $8A
   9337  346b
   9338  346b		       a9 8a		      LDA	#$8A
   9339  346d		       85 09		      STA	COLUBK
   9340  346f				   .
   9341  346f							;;line 2588;; 
   9342  346f
   9343  346f				   .L0414		;;line 2589;;	scorecolor = $8C
   9344  346f
   9345  346f		       a9 8c		      LDA	#$8C
   9346  3471		       85 a3		      STA	scorecolor
   9347  3473				   .
   9348  3473							;;line 2590;; 
   9349  3473
   9350  3473				   .L0415		;;line 2591;;	goto __Got_Pause_Colors
   9351  3473
   9352  3473		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9353  3476
   9354  3476				   .
   9355  3476							;;line 2592;; 
   9356  3476
   9357  3476				   .
   9358  3476							;;line 2593;; 
   9359  3476
   9360  3476				   .
   9361  3476							;;line 2594;; 
   9362  3476
   9363  3476				   .
   9364  3476							;;line 2595;; 
   9365  3476
   9366  3476				   .
   9367  3476							;;line 2596;; 
   9368  3476
   9369  3476				   .
   9370  3476							;;line 2597;; 
   9371  3476
   9372  3476				   .
   9373  3476							;;line 2598;; 
   9374  3476
   9375  3476				   .__Ps6B
   9376  3476							;;line 2599;; __Ps6B
   9377  3476
   9378  3476				   .
   9379  3476							;;line 2600;; 
   9380  3476
   9381  3476				   .L0416		;;line 2601;;	pfcolors:
   9382  3476
   9383  3476		       a9 8a		      lda	# $8A
   9384  3478		       85 08		      sta	COLUPF
   9385  347a				  -	      ifconst	pfres
   9386  347a				  -	      lda	#>(pfcolorlabel270-131+pfres*pfwidth)
   9387  347a					      else
   9388  347a		       a9 f7		      lda	#>(pfcolorlabel270-83)
   9389  347c					      endif
   9390  347c		       85 f1		      sta	pfcolortable+1
   9391  347e				  -	      ifconst	pfres
   9392  347e				  -	      lda	#<(pfcolorlabel270-131+pfres*pfwidth)
   9393  347e					      else
   9394  347e		       a9 05		      lda	#<(pfcolorlabel270-83)
   9395  3480					      endif
   9396  3480		       85 f0		      sta	pfcolortable
   9397  3482				   .
   9398  3482							;;line 2615;; 
   9399  3482
   9400  3482				   .L0417		;;line 2616;;	COLUP0 = $8A  :  COLUP1 = $8A
   9401  3482
   9402  3482		       a9 8a		      LDA	#$8A
   9403  3484		       85 06		      STA	COLUP0
   9404  3486		       85 07		      STA	COLUP1
   9405  3488				   .
   9406  3488							;;line 2617;; 
   9407  3488
   9408  3488				   .L0418		;;line 2618;;	COLUBK = $8C
   9409  3488
   9410  3488		       a9 8c		      LDA	#$8C
   9411  348a		       85 09		      STA	COLUBK
   9412  348c				   .
   9413  348c							;;line 2619;; 
   9414  348c
   9415  348c				   .L0419		;;line 2620;;	scorecolor = $8A
   9416  348c
   9417  348c		       a9 8a		      LDA	#$8A
   9418  348e		       85 a3		      STA	scorecolor
   9419  3490				   .
   9420  3490							;;line 2621;; 
   9421  3490
   9422  3490				   .L0420		;;line 2622;;	goto __Got_Pause_Colors
   9423  3490
   9424  3490		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9425  3493
   9426  3493				   .
   9427  3493							;;line 2623;; 
   9428  3493
   9429  3493				   .
   9430  3493							;;line 2624;; 
   9431  3493
   9432  3493				   .
   9433  3493							;;line 2625;; 
   9434  3493
   9435  3493				   .
   9436  3493							;;line 2626;; 
   9437  3493
   9438  3493				   .
   9439  3493							;;line 2627;; 
   9440  3493
   9441  3493				   .
   9442  3493							;;line 2628;; 
   9443  3493
   9444  3493				   .
   9445  3493							;;line 2629;; 
   9446  3493
   9447  3493				   .__Ps7
   9448  3493							;;line 2630;; __Ps7
   9449  3493
   9450  3493				   .
   9451  3493							;;line 2631;; 
   9452  3493
   9453  3493				   .L0421		;;line 2632;;	if _Bit2_Pause_Clr_Scheme{2} then goto __Ps7B
   9454  3493
   9455  3493		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   9456  3495		       29 04		      AND	#4
   9457  3497		       f0 03		      BEQ	.skipL0421
   9458  3499				   .condpart161
   9459  3499		       4c b9 54 	      jmp	.__Ps7B
   9460  349c
   9461  349c				   .skipL0421
   9462  349c				   .
   9463  349c							;;line 2633;; 
   9464  349c
   9465  349c				   .L0422		;;line 2634;;	pfcolors:
   9466  349c
   9467  349c		       a9 2c		      lda	# $2C
   9468  349e		       85 08		      sta	COLUPF
   9469  34a0				  -	      ifconst	pfres
   9470  34a0				  -	      lda	#>(pfcolorlabel270-130+pfres*pfwidth)
   9471  34a0					      else
   9472  34a0		       a9 f7		      lda	#>(pfcolorlabel270-82)
   9473  34a2					      endif
   9474  34a2		       85 f1		      sta	pfcolortable+1
   9475  34a4				  -	      ifconst	pfres
   9476  34a4				  -	      lda	#<(pfcolorlabel270-130+pfres*pfwidth)
   9477  34a4					      else
   9478  34a4		       a9 06		      lda	#<(pfcolorlabel270-82)
   9479  34a6					      endif
   9480  34a6		       85 f0		      sta	pfcolortable
   9481  34a8				   .
   9482  34a8							;;line 2648;; 
   9483  34a8
   9484  34a8				   .L0423		;;line 2649;;	COLUP0 = $2C  :  COLUP1 = $2C
   9485  34a8
   9486  34a8		       a9 2c		      LDA	#$2C
   9487  34aa		       85 06		      STA	COLUP0
   9488  34ac		       85 07		      STA	COLUP1
   9489  34ae				   .
   9490  34ae							;;line 2650;; 
   9491  34ae
   9492  34ae				   .L0424		;;line 2651;;	COLUBK = $2A
   9493  34ae
   9494  34ae		       a9 2a		      LDA	#$2A
   9495  34b0		       85 09		      STA	COLUBK
   9496  34b2				   .
   9497  34b2							;;line 2652;; 
   9498  34b2
   9499  34b2				   .L0425		;;line 2653;;	scorecolor = $2C
   9500  34b2
   9501  34b2		       a9 2c		      LDA	#$2C
   9502  34b4		       85 a3		      STA	scorecolor
   9503  34b6				   .
   9504  34b6							;;line 2654;; 
   9505  34b6
   9506  34b6				   .L0426		;;line 2655;;	goto __Got_Pause_Colors
   9507  34b6
   9508  34b6		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9509  34b9
   9510  34b9				   .
   9511  34b9							;;line 2656;; 
   9512  34b9
   9513  34b9				   .
   9514  34b9							;;line 2657;; 
   9515  34b9
   9516  34b9				   .
   9517  34b9							;;line 2658;; 
   9518  34b9
   9519  34b9				   .
   9520  34b9							;;line 2659;; 
   9521  34b9
   9522  34b9				   .
   9523  34b9							;;line 2660;; 
   9524  34b9
   9525  34b9				   .
   9526  34b9							;;line 2661;; 
   9527  34b9
   9528  34b9				   .
   9529  34b9							;;line 2662;; 
   9530  34b9
   9531  34b9				   .__Ps7B
   9532  34b9							;;line 2663;; __Ps7B
   9533  34b9
   9534  34b9				   .
   9535  34b9							;;line 2664;; 
   9536  34b9
   9537  34b9				   .L0427		;;line 2665;;	pfcolors:
   9538  34b9
   9539  34b9		       a9 2a		      lda	# $2A
   9540  34bb		       85 08		      sta	COLUPF
   9541  34bd				  -	      ifconst	pfres
   9542  34bd				  -	      lda	#>(pfcolorlabel270-129+pfres*pfwidth)
   9543  34bd					      else
   9544  34bd		       a9 f7		      lda	#>(pfcolorlabel270-81)
   9545  34bf					      endif
   9546  34bf		       85 f1		      sta	pfcolortable+1
   9547  34c1				  -	      ifconst	pfres
   9548  34c1				  -	      lda	#<(pfcolorlabel270-129+pfres*pfwidth)
   9549  34c1					      else
   9550  34c1		       a9 07		      lda	#<(pfcolorlabel270-81)
   9551  34c3					      endif
   9552  34c3		       85 f0		      sta	pfcolortable
   9553  34c5				   .
   9554  34c5							;;line 2679;; 
   9555  34c5
   9556  34c5				   .L0428		;;line 2680;;	COLUP0 = $2A  :  COLUP1 = $2A
   9557  34c5
   9558  34c5		       a9 2a		      LDA	#$2A
   9559  34c7		       85 06		      STA	COLUP0
   9560  34c9		       85 07		      STA	COLUP1
   9561  34cb				   .
   9562  34cb							;;line 2681;; 
   9563  34cb
   9564  34cb				   .L0429		;;line 2682;;	COLUBK = $2C
   9565  34cb
   9566  34cb		       a9 2c		      LDA	#$2C
   9567  34cd		       85 09		      STA	COLUBK
   9568  34cf				   .
   9569  34cf							;;line 2683;; 
   9570  34cf
   9571  34cf				   .L0430		;;line 2684;;	scorecolor = $2A
   9572  34cf
   9573  34cf		       a9 2a		      LDA	#$2A
   9574  34d1		       85 a3		      STA	scorecolor
   9575  34d3				   .
   9576  34d3							;;line 2685;; 
   9577  34d3
   9578  34d3				   .L0431		;;line 2686;;	goto __Got_Pause_Colors
   9579  34d3
   9580  34d3		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9581  34d6
   9582  34d6				   .
   9583  34d6							;;line 2687;; 
   9584  34d6
   9585  34d6				   .
   9586  34d6							;;line 2688;; 
   9587  34d6
   9588  34d6				   .
   9589  34d6							;;line 2689;; 
   9590  34d6
   9591  34d6				   .L0432		;;line 2690;;	bank 4
   9592  34d6
   9593  34d6					      if	ECHO3
      2814 bytes of ROM space left in bank 3
   9594  34d6					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   9595  34d6					      endif
   9596  34d6		       00 01	   ECHO3      =	1
   9597  3fd4					      ORG	$3FF4-bscode_length
   9598  3fd4					      RORG	$5FF4-bscode_length
   9599  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   9600  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9601  3fd6				  -	      stx	FASTFETCH
   9602  3fd6					      endif
   9603  3fd6		       9a		      txs
   9604  3fd7				  -	      if	bankswitch == 64
   9605  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9606  3fd7					      else
   9607  3fd7		       a9 f2		      lda	#>(start-1)
   9608  3fd9					      endif
   9609  3fd9		       48		      pha
   9610  3fda		       a9 51		      lda	#<(start-1)
   9611  3fdc		       48		      pha
   9612  3fdd		       48		      pha
   9613  3fde		       8a		      txa
   9614  3fdf		       48		      pha
   9615  3fe0		       ba		      tsx
   9616  3fe1					      if	bankswitch != 64
   9617  3fe1		       b5 04		      lda	4,x	; get high byte of return address
   9618  3fe3		       2a		      rol
   9619  3fe4		       2a		      rol
   9620  3fe5		       2a		      rol
   9621  3fe6		       2a		      rol
   9622  3fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9623  3fe9		       aa		      tax
   9624  3fea		       e8		      inx
   9625  3feb				  -	      else
   9626  3feb				  -	      lda	4,x	; get high byte of return address
   9627  3feb				  -	      tay
   9628  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9629  3feb				  -	      sta	4,x
   9630  3feb				  -	      tya
   9631  3feb				  -	      lsr
   9632  3feb				  -	      lsr
   9633  3feb				  -	      lsr
   9634  3feb				  -	      lsr
   9635  3feb				  -	      tax
   9636  3feb				  -	      inx
   9637  3feb					      endif
   9638  3feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   9639  3fee		       68		      pla
   9640  3fef		       aa		      tax
   9641  3ff0		       68		      pla
   9642  3ff1		       60		      rts
   9643  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9644  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9645  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9646  3ff2					      endif
   9647  3ffc					      ORG	$3FFC
   9648  3ffc					      RORG	$5FFC
   9649  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   9650  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   9651  4000					      ORG	$4000
   9652  4000					      RORG	$7000
   9653  4000				   .
   9654  4000							;;line 2691;; 
   9655  4000
   9656  4000				   .L0433		;;line 2692;;	asm
   9657  4000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  4000					      include	"titlescreen/asm/titlescreen.asm"
      1  4000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  4000					      include	"titlescreen/asm/layoutmacros.asm"
      1  4000
      2  4000							; the macro's used in the "titlescreen_layout.asm" file
      3  4000
      4  4000					      MAC	draw_96x2_1
      5  4000				   mk_96x2_1_on =	1
      6  4000					      jsr	draw_bmp_96x2_1
      7  4000					      ENDM
      8  4000
      9  4000					      MAC	draw_96x2_2
     10  4000				   mk_96x2_2_on =	1
     11  4000					      jsr	draw_bmp_96x2_2
     12  4000					      ENDM
     13  4000
     14  4000					      MAC	draw_96x2_3
     15  4000				   mk_96x2_3_on =	1
     16  4000					      jsr	draw_bmp_96x2_3
     17  4000					      ENDM
     18  4000
     19  4000					      MAC	draw_96x2_4
     20  4000				   mk_96x2_4_on =	1
     21  4000					      jsr	draw_bmp_96x2_4
     22  4000					      ENDM
     23  4000
     24  4000					      MAC	draw_96x2_5
     25  4000				   mk_96x2_5_on =	1
     26  4000					      jsr	draw_bmp_96x2_5
     27  4000					      ENDM
     28  4000
     29  4000					      MAC	draw_96x2_6
     30  4000				   mk_96x2_6_on =	1
     31  4000					      jsr	draw_bmp_96x2_6
     32  4000					      ENDM
     33  4000
     34  4000					      MAC	draw_96x2_7
     35  4000				   mk_96x2_7_on =	1
     36  4000					      jsr	draw_bmp_96x2_7
     37  4000					      ENDM
     38  4000
     39  4000					      MAC	draw_96x2_8
     40  4000				   mk_96x2_8_on =	1
     41  4000					      jsr	draw_bmp_96x2_8
     42  4000					      ENDM
     43  4000
     44  4000					      MAC	draw_48x1_1
     45  4000				   mk_48x1_X_on =	1
     46  4000				   mk_48x1_1_on =	1
     47  4000					      jsr	draw_bmp_48x1_1
     48  4000					      ENDM
     49  4000
     50  4000					      MAC	draw_48x1_2
     51  4000				   mk_48x1_X_on =	1
     52  4000				   mk_48x1_2_on =	1
     53  4000					      jsr	draw_bmp_48x1_2
     54  4000					      ENDM
     55  4000
     56  4000					      MAC	draw_48x1_3
     57  4000				   mk_48x1_X_on =	1
     58  4000				   mk_48x1_3_on =	1
     59  4000					      jsr	draw_bmp_48x1_3
     60  4000					      ENDM
     61  4000
     62  4000					      MAC	draw_48x1_4
     63  4000				   mk_48x1_X_on =	1
     64  4000				   mk_48x1_4_on =	1
     65  4000					      jsr	draw_bmp_48x1_4
     66  4000					      ENDM
     67  4000
     68  4000					      MAC	draw_48x1_5
     69  4000				   mk_48x1_X_on =	1
     70  4000				   mk_48x1_5_on =	1
     71  4000					      jsr	draw_bmp_48x1_5
     72  4000					      ENDM
     73  4000
     74  4000					      MAC	draw_48x1_6
     75  4000				   mk_48x1_X_on =	1
     76  4000				   mk_48x1_6_on =	1
     77  4000					      jsr	draw_bmp_48x1_6
     78  4000					      ENDM
     79  4000
     80  4000					      MAC	draw_48x1_7
     81  4000				   mk_48x1_X_on =	1
     82  4000				   mk_48x1_7_on =	1
     83  4000					      jsr	draw_bmp_48x1_7
     84  4000					      ENDM
     85  4000
     86  4000					      MAC	draw_48x1_8
     87  4000				   mk_48x1_X_on =	1
     88  4000				   mk_48x1_8_on =	1
     89  4000					      jsr	draw_bmp_48x1_8
     90  4000					      ENDM
     91  4000
     92  4000
     93  4000					      MAC	draw_48x2_1
     94  4000				   mk_48x2_X_on =	1
     95  4000				   mk_48x2_1_on =	1
     96  4000					      jsr	draw_bmp_48x2_1
     97  4000					      ENDM
     98  4000
     99  4000					      MAC	draw_48x2_2
    100  4000				   mk_48x2_X_on =	1
    101  4000				   mk_48x2_2_on =	1
    102  4000					      jsr	draw_bmp_48x2_2
    103  4000					      ENDM
    104  4000
    105  4000					      MAC	draw_48x2_3
    106  4000				   mk_48x2_X_on =	1
    107  4000				   mk_48x2_3_on =	1
    108  4000					      jsr	draw_bmp_48x2_3
    109  4000					      ENDM
    110  4000
    111  4000					      MAC	draw_48x2_4
    112  4000				   mk_48x2_X_on =	1
    113  4000				   mk_48x2_4_on =	1
    114  4000					      jsr	draw_bmp_48x2_4
    115  4000					      ENDM
    116  4000
    117  4000					      MAC	draw_48x2_5
    118  4000				   mk_48x2_X_on =	1
    119  4000				   mk_48x2_5_on =	1
    120  4000					      jsr	draw_bmp_48x2_5
    121  4000					      ENDM
    122  4000
    123  4000					      MAC	draw_48x2_6
    124  4000				   mk_48x2_X_on =	1
    125  4000				   mk_48x2_6_on =	1
    126  4000					      jsr	draw_bmp_48x2_6
    127  4000					      ENDM
    128  4000
    129  4000					      MAC	draw_48x2_7
    130  4000				   mk_48x2_X_on =	1
    131  4000				   mk_48x2_7_on =	1
    132  4000					      jsr	draw_bmp_48x2_7
    133  4000					      ENDM
    134  4000
    135  4000					      MAC	draw_48x2_8
    136  4000				   mk_48x2_X_on =	1
    137  4000				   mk_48x2_8_on =	1
    138  4000					      jsr	draw_bmp_48x2_8
    139  4000					      ENDM
    140  4000
    141  4000					      MAC	draw_player
    142  4000				   mk_player_on =	1
    143  4000					      jsr	draw_player_display
    144  4000					      ENDM
    145  4000
    146  4000					      MAC	draw_score
    147  4000				   mk_score_on =	1
    148  4000				   mk_48x1_X_on =	1
    149  4000					      jsr	draw_score_display
    150  4000					      ENDM
    151  4000
    152  4000					      MAC	draw_gameselect
    153  4000				   mk_gameselect_on =	1
    154  4000				   mk_48x1_X_on =	1
    155  4000					      jsr	draw_gameselect_display
    156  4000					      ENDM
    157  4000
    158  4000					      MAC	draw_space
    159  4000					      ldy	#{1}
    160  4000				   .loop
    161  4000					      sta	WSYNC
    162  4000					      dey
    163  4000					      bne	.loop
    164  4000					      ENDM
    165  4000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  4000					      include	"titlescreen/asm/dpcfix.asm"
      1  4000							; reassign variables that DPC+ doesn't have
      2  4000
      3  4000				  -	      ifnconst	aux2
      4  4000				  -aux2       =	player2x
      5  4000					      endif
      6  4000				  -	      ifnconst	aux4
      7  4000				  -aux4       =	player4x
      8  4000					      endif
      9  4000				  -	      ifnconst	aux5
     10  4000				  -aux5       =	player5x
     11  4000					      endif
     12  4000				  -	      ifnconst	aux6
     13  4000				  -aux6       =	player6x
     14  4000					      endif
     15  4000
     16  4000				  -	      ifnconst	player0pointer
     17  4000				  -player0pointer =	player2y
     18  4000					      endif
     19  4000				  -	      ifnconst	player1pointer
     20  4000				  -player1pointer =	player2height	; to player3height
     21  4000					      endif
     22  4000				  -	      ifnconst	player1color
     23  4000				  -player1color =	player4height	; to player5height
     24  4000					      endif
     25  4000				  -	      ifnconst	scorepointers
     26  4000				  -scorepointers =	player6height	; to NUSIZ8
     27  4000					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  4000					      include	"titlescreen/titlescreen_layout.asm"
      1  4000
      2  4000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  4000							; in the order they were listed.
      4  4000							;
      5  4000							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  4000							; it won't use any rom space.
      7  4000
      8  4000					      MAC	titlescreenlayout
      9  4000					      draw_48x1_1
     10  4000					      draw_48x2_1
     11  4000					      draw_48x1_2
     12  4000					      ENDM
     13  4000
     14  4000							; minikernel choices are:
     15  4000							; 
     16  4000							; draw_48x1_1, draw_48x1_2, draw_48x1_3 
     17  4000							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  4000							;
     19  4000							; draw_48x2_1, draw_48x2_2, draw_48x2_3 
     20  4000							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  4000							;
     22  4000							; draw_96x2_1, draw_96x2_2, draw_96x2_3 
     23  4000							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  4000							;
     25  4000							; draw_gameselect
     26  4000							;	The game selection display minikernel
     27  4000							;
     28  4000							; draw_score
     29  4000							;	A minikernel that draws the score
     30  4000							;
     31  4000							; draw_space 10
     32  4000							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  4000
      6  4000				   .titledrawscreen
      7  4000				   title_eat_overscan
      8  4000							;bB runs in overscan. Wait for the overscan to run out...
      9  4000		       18		      clc
     10  4001		       ad 84 02 	      lda	INTIM
     11  4004		       30 fa		      bmi	title_eat_overscan
     12  4006		       4c 09 70 	      jmp	title_do_vertical_sync
     13  4009
     14  4009				   title_do_vertical_sync
     15  4009		       a9 02		      lda	#2
     16  400b		       85 02		      sta	WSYNC	;one line with VSYNC
     17  400d		       85 00		      sta	VSYNC	;enable VSYNC
     18  400f		       85 02		      sta	WSYNC	;one line with VSYNC
     19  4011		       85 02		      sta	WSYNC	;one line with VSYNC
     20  4013		       a9 00		      lda	#0
     21  4015		       85 02		      sta	WSYNC	;one line with VSYNC
     22  4017		       85 00		      sta	VSYNC	;turn off VSYNC
     23  4019
     24  4019							;lda #42+128
     25  4019				  -	      ifnconst	vblank_time
     26  4019				  -	      lda	#42+128
     27  4019					      else
     28  4019		       a9 ab		      lda	#vblank_time+128
     29  401b					      endif
     30  401b
     31  401b		       8d 96 02 	      sta	TIM64T
     32  401e
     33  401e		       00 82	   titleframe =	missile0x
     34  401e		       e6 82		      inc	titleframe	; increment the frame counter
     35  4020
     36  4020				  -	      ifconst	.title_vblank
     37  4020				  -	      jsr	.title_vblank
     38  4020					      endif
     39  4020
     40  4020				   title_vblank_loop
     41  4020		       ad 84 02 	      lda	INTIM
     42  4023		       30 fb		      bmi	title_vblank_loop
     43  4025		       a9 00		      lda	#0
     44  4027		       85 02		      sta	WSYNC
     45  4029		       85 01		      sta	VBLANK
     46  402b		       85 1d		      sta	ENAM0
     47  402d		       85 1f		      sta	ENABL
     48  402f
     49  402f				   title_playfield
     50  402f
     51  402f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  402f
     53  402f		       a9 e6		      lda	#230
     54  4031		       8d 96 02 	      sta	TIM64T
     55  4034
     56  4034		       a9 01		      lda	#1
     57  4036		       85 0a		      sta	CTRLPF
     58  4038		       18		      clc
     59  4039
     60  4039		       a9 00		      lda	#0
     61  403b		       85 0b		      sta	REFP0
     62  403d		       85 0c		      sta	REFP1
     63  403f		       85 02		      sta	WSYNC
     64  4041		       ad 7a 70 	      lda	titlescreencolor
     65  4044		       85 09		      sta	COLUBK
     66  4046
      0  4046					      titlescreenlayout
      0  4046					      draw_48x1_1
      1  4046		       00 01	   mk_48x1_X_on =	1
      2  4046		       00 01	   mk_48x1_1_on =	1
      3  4046		       20 7b 70 	      jsr	draw_bmp_48x1_1
      0  4049					      draw_48x2_1
      1  4049		       00 01	   mk_48x2_X_on =	1
      2  4049		       00 01	   mk_48x2_1_on =	1
      3  4049		       20 0b 71 	      jsr	draw_bmp_48x2_1
      0  404c					      draw_48x1_2
      1  404c		       00 01	   mk_48x1_X_on =	1
      2  404c		       00 01	   mk_48x1_2_on =	1
      3  404c		       20 c3 70 	      jsr	draw_bmp_48x1_2
     68  404f
     69  404f		       4c 7c 72 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  4052
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  4052					      include	"titlescreen/asm/position48.asm"
      1  4052
      2  4052				   position48
      3  4052
      4  4052							;postion P0 and P1
      5  4052
      6  4052		       85 02		      sta	WSYNC
      7  4054
      8  4054		       a9 90		      lda	#$90	;2
      9  4056		       85 20		      sta	HMP0	;3
     10  4058		       a9 a0		      lda	#$A0	;2
     11  405a		       85 21		      sta	HMP1	;3
     12  405c
     13  405c		       e6 9c		      inc	temp1
     14  405e		       c6 9c		      dec	temp1
     15  4060		       e6 9c		      inc	temp1
     16  4062		       c6 9c		      dec	temp1
     17  4064		       e6 9c		      inc	temp1
      0  4066					      sleep	2
      1  4066				   .CYCLES    SET	2
      2  4066
      3  4066				  -	      IF	.CYCLES < 2
      4  4066				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4066				  -	      ERR
      6  4066					      ENDIF
      7  4066
      8  4066				  -	      IF	.CYCLES & 1
      9  4066				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4066				  -	      nop	0
     11  4066				  -	      ELSE
     12  4066				  -	      bit	VSYNC
     13  4066				  -	      ENDIF
     14  4066				  -.CYCLES    SET	.CYCLES - 3
     15  4066					      ENDIF
     16  4066
     17  4066					      REPEAT	.CYCLES / 2
     18  4066		       ea		      nop
     19  4067					      REPEND
     19  4067		       85 10		      sta	RESP0	;  +3
     20  4069		       85 11		      sta	RESP1	;  +3
     21  406b		       c6 9c		      dec	temp1	;  +5
     22  406d		       e6 9c		      inc	temp1	;  +5
     23  406f		       c6 9c		      dec	temp1	;  +5
     24  4071		       e6 9c		      inc	temp1	;  +5
     25  4073		       c6 9c		      dec	temp1	;  +5
      0  4075					      sleep	3
      1  4075				   .CYCLES    SET	3
      2  4075
      3  4075				  -	      IF	.CYCLES < 2
      4  4075				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4075				  -	      ERR
      6  4075					      ENDIF
      7  4075
      8  4075					      IF	.CYCLES & 1
      9  4075					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4075		       04 00		      nop	0
     11  4077				  -	      ELSE
     12  4077				  -	      bit	VSYNC
     13  4077					      ENDIF
     14  4077				   .CYCLES    SET	.CYCLES - 3
     15  4077					      ENDIF
     16  4077
     17  4077				  -	      REPEAT	.CYCLES / 2
     18  4077				  -	      nop
     19  4077					      REPEND
     27  4077		       85 2a		      sta	HMOVE	; +76
     28  4079		       60		      RTS
     29  407a
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  407a					      include	"titlescreen/titlescreen_color.asm"
      1  407a
      2  407a							; This is where the titlescreen background color gets set. 
      3  407a							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  407a							; if you want to change the color on the fly.
      5  407a
      6  407a				  -	      ifnconst	titlescreencolor
      7  407a				  -titlescreencolor
      8  407a					      endif
      9  407a		       00		      .byte.b	$00
     10  407b
------- FILE titlescreen/asm/titlescreen.asm
     73  407b
     74  407b					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 2
      0  407b					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  407b
      2  407b				   draw_bmp_48x1_1
      3  407b
      4  407b		       a9 00		      lda	#0
      5  407d		       85 1b		      sta	GRP0
      6  407f		       85 1c		      sta	GRP1
      7  4081
      8  4081		       a0 0b		      ldy	#11
      9  4083				   bmp_48x1_1_pointersetup
     10  4083		       b9 b7 70 	      lda	bmp_48x1_1_values,y
     11  4086		       99 96 00 	      sta	scorepointers,y
     12  4089		       88		      dey
     13  408a		       b9 b7 70 	      lda	bmp_48x1_1_values,y
     14  408d				  -	      ifconst	bmp_48x1_1_index
     15  408d				  -	      sec
     16  408d				  -	      sbc	bmp_48x1_1_index
     17  408d					      endif
     18  408d		       99 96 00 	      sta	scorepointers,y
     19  4090		       88		      dey
     20  4091		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  4093
     22  4093		       a0 1f		      ldy	(#bmp_48x1_1_window-1)
     23  4095		       84 f1		      sty	aux2
     24  4097
     25  4097					      ifconst	bmp_48x1_1_background
     26  4097		       ad 91 72 	      lda	bmp_48x1_1_background
     27  409a				  -	      else
     28  409a				  -	      lda	titlescreencolor
     29  409a					      endif
     30  409a		       85 f3		      sta	aux4
     31  409c
     32  409c		       ad 92 72 	      lda	bmp_48x1_1_color
     33  409f		       85 06		      sta	COLUP0	;3
     34  40a1		       85 07		      sta	COLUP1	;3
     35  40a3		       85 2b		      sta	HMCLR	;3
     36  40a5
     37  40a5		       ad 7a 70 	      lda	titlescreencolor
     38  40a8		       85 08		      sta	COLUPF
     39  40aa
     40  40aa					      ifconst	bmp_48x1_1_PF1
     41  40aa		       ad 8f 72 	      lda	bmp_48x1_1_PF1
     42  40ad				  -	      else
     43  40ad				  -	      lda	#0
     44  40ad				  -	      nop
     45  40ad					      endif
     46  40ad		       85 0e		      sta	PF1
     47  40af
     48  40af					      ifconst	bmp_48x1_1_PF2
     49  40af		       ad 90 72 	      lda	bmp_48x1_1_PF2
     50  40b2				  -	      else
     51  40b2				  -	      lda	#0
     52  40b2				  -	      nop
     53  40b2					      endif
     54  40b2		       85 0f		      sta	PF2
     55  40b4
     56  40b4		       4c 56 71 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  40b7
     58  40b7				   bmp_48x1_1_values
     59  40b7		       93 72		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  40b9		       b3 72		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  40bb		       d3 72		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  40bd		       00 73		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  40bf		       20 73		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  40c1		       40 73		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  40c3
------- FILE titlescreen/asm/titlescreen.asm
     76  40c3					      endif		;mk_48x1_1_on
     77  40c3
     78  40c3					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 2
      0  40c3					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  40c3
      2  40c3				   draw_bmp_48x1_2
      3  40c3
      4  40c3		       a9 00		      lda	#0
      5  40c5		       85 1b		      sta	GRP0
      6  40c7		       85 1c		      sta	GRP1
      7  40c9
      8  40c9		       a0 0b		      ldy	#11
      9  40cb				   bmp_48x1_2_pointersetup
     10  40cb		       b9 ff 70 	      lda	bmp_48x1_2_values,y
     11  40ce		       99 96 00 	      sta	scorepointers,y
     12  40d1		       88		      dey
     13  40d2		       b9 ff 70 	      lda	bmp_48x1_2_values,y
     14  40d5				  -	      ifconst	bmp_48x1_2_index
     15  40d5				  -	      sec
     16  40d5				  -	      sbc	bmp_48x1_2_index
     17  40d5					      endif
     18  40d5		       99 96 00 	      sta	scorepointers,y
     19  40d8		       88		      dey
     20  40d9		       10 f0		      bpl	bmp_48x1_2_pointersetup
     21  40db
     22  40db		       a0 13		      ldy	(#bmp_48x1_2_window-1)
     23  40dd		       84 f1		      sty	aux2
     24  40df
     25  40df				  -	      ifconst	bmp_48x1_2_background
     26  40df				  -	      lda	bmp_48x1_2_background
     27  40df					      else
     28  40df		       ad 7a 70 	      lda	titlescreencolor
     29  40e2					      endif
     30  40e2		       85 f3		      sta	aux4
     31  40e4
     32  40e4		       ad 61 73 	      lda	bmp_48x1_2_color
     33  40e7		       85 06		      sta	COLUP0	;3
     34  40e9		       85 07		      sta	COLUP1	;3
     35  40eb		       85 2b		      sta	HMCLR	;3
     36  40ed
     37  40ed		       ad 7a 70 	      lda	titlescreencolor
     38  40f0		       85 08		      sta	COLUPF
     39  40f2
     40  40f2				  -	      ifconst	bmp_48x1_2_PF1
     41  40f2				  -	      lda	bmp_48x1_2_PF1
     42  40f2					      else
     43  40f2		       a9 00		      lda	#0
     44  40f4		       ea		      nop
     45  40f5					      endif
     46  40f5		       85 0e		      sta	PF1
     47  40f7
     48  40f7				  -	      ifconst	bmp_48x1_2_PF2
     49  40f7				  -	      lda	bmp_48x1_2_PF2
     50  40f7					      else
     51  40f7		       a9 00		      lda	#0
     52  40f9		       ea		      nop
     53  40fa					      endif
     54  40fa		       85 0f		      sta	PF2
     55  40fc
     56  40fc		       4c 56 71 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  40ff
     58  40ff				   bmp_48x1_2_values
     59  40ff		       62 73		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  4101		       79 73		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  4103		       90 73		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  4105		       a7 73		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  4107		       be 73		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  4109		       d5 73		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  410b
------- FILE titlescreen/asm/titlescreen.asm
     80  410b					      endif		;mk_48x1_2_on
     81  410b
     82  410b				  -	      ifconst	mk_48x1_3_on
     83  410b				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  410b					      endif		;mk_48x1_3_on
     85  410b
     86  410b				  -	      ifconst	mk_48x1_4_on
     87  410b				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  410b					      endif		;mk_48x1_4_on
     89  410b
     90  410b				  -	      ifconst	mk_48x1_5_on
     91  410b				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  410b					      endif		;mk_48x1_5_on
     93  410b
     94  410b				  -	      ifconst	mk_48x1_6_on
     95  410b				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  410b					      endif		;mk_48x1_6_on
     97  410b
     98  410b				  -	      ifconst	mk_48x1_7_on
     99  410b				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  410b					      endif		;mk_48x1_7_on
    101  410b
    102  410b				  -	      ifconst	mk_48x1_8_on
    103  410b				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  410b					      endif		;mk_48x1_8_on
    105  410b
    106  410b					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 2
      0  410b					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  410b
      2  410b				   draw_bmp_48x2_1
      3  410b
      4  410b		       a9 00		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  410d				  -	      ifconst	bmp_48x2_1_index
      6  410d				  -	      sec
      7  410d				  -	      sbc	bmp_48x2_1_index
      8  410d					      endif
      9  410d		       85 f4		      sta	aux5+0
     10  410f		       a9 74		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  4111		       85 f5		      sta	aux5+1
     12  4113
     13  4113		       a0 0b		      ldy	#11
     14  4115				   bmp_48x2_1_pointersetup
     15  4115		       b9 4a 71 	      lda	bmp_48x2_1_values,y
     16  4118		       99 96 00 	      sta	scorepointers,y
     17  411b		       88		      dey
     18  411c		       b9 4a 71 	      lda	bmp_48x2_1_values,y
     19  411f				  -	      ifconst	bmp_48x2_1_index
     20  411f				  -	      sec
     21  411f				  -	      sbc	bmp_48x2_1_index
     22  411f					      endif
     23  411f		       99 96 00 	      sta	scorepointers,y
     24  4122		       88		      dey
     25  4123		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  4125
     27  4125
     28  4125		       a0 3f		      ldy	#(bmp_48x2_1_window-1)
     29  4127		       84 f1		      sty	aux2
     30  4129
     31  4129		       c8		      iny
     32  412a		       b1 f4		      lda	(aux5),y
     33  412c		       88		      dey
     34  412d
     35  412d		       85 06		      sta	COLUP0	;3
     36  412f		       85 07		      sta	COLUP1	;3
     37  4131		       85 2b		      sta	HMCLR	;3
     38  4133
     39  4133		       ad 7a 70 	      lda	titlescreencolor
     40  4136		       85 08		      sta	COLUPF
     41  4138
     42  4138					      ifconst	bmp_48x2_1_background
     43  4138		       ad 43 74 	      lda	bmp_48x2_1_background
     44  413b				  -	      else
     45  413b				  -	      lda	titlescreencolor
     46  413b					      endif
     47  413b		       85 f3		      sta	aux4
     48  413d					      ifconst	bmp_48x2_1_PF1
     49  413d		       ad 41 74 	      lda	bmp_48x2_1_PF1
     50  4140				  -	      else
     51  4140				  -	      lda	#0
     52  4140				  -	      nop
     53  4140					      endif
     54  4140		       85 0e		      sta	PF1
     55  4142
     56  4142					      ifconst	bmp_48x2_1_PF2
     57  4142		       ad 42 74 	      lda	bmp_48x2_1_PF2
     58  4145				  -	      else
     59  4145				  -	      lda	#0
     60  4145				  -	      nop
     61  4145					      endif
     62  4145		       85 0f		      sta	PF2
     63  4147
     64  4147		       4c d1 71 	      jmp	draw_bmp_48x2_X
     65  414a
     66  414a				   bmp_48x2_1_values
     67  414a		       44 74		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  414c		       84 74		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  414e		       00 75		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  4150		       40 75		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  4152		       80 75		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  4154		       00 76		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  4156
------- FILE titlescreen/asm/titlescreen.asm
    108  4156					      endif		;mk_48x2_1_on
    109  4156
    110  4156				  -	      ifconst	mk_48x2_2_on
    111  4156				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  4156					      endif		;mk_48x2_2_on
    113  4156
    114  4156				  -	      ifconst	mk_48x2_3_on
    115  4156				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  4156					      endif		;mk_48x2_3_on
    117  4156
    118  4156				  -	      ifconst	mk_48x2_4_on
    119  4156				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  4156					      endif		;mk_48x2_4_on
    121  4156
    122  4156				  -	      ifconst	mk_48x2_5_on
    123  4156				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  4156					      endif		;mk_48x2_5_on
    125  4156
    126  4156				  -	      ifconst	mk_48x2_6_on
    127  4156				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  4156					      endif		;mk_48x2_6_on
    129  4156
    130  4156				  -	      ifconst	mk_48x2_7_on
    131  4156				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  4156					      endif		;mk_48x2_7_on
    133  4156
    134  4156				  -	      ifconst	mk_48x2_8_on
    135  4156				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  4156					      endif		;mk_48x2_8_on
    137  4156
    138  4156					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 2
      0  4156					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  4156				   draw_bmp_48x1_X
      2  4156
      3  4156		       a9 03		      lda	#3
      4  4158		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      5  415a		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
      6  415c
      7  415c		       ba		      tsx
      8  415d		       86 f6		      stx	stack1	;save the stack pointer
      9  415f
     10  415f		       20 52 70 	      jsr	position48
     11  4162
     12  4162		       a9 03		      lda	#3	;2
     13  4164		       85 25		      sta	VDELP0	;3
     14  4166		       85 26		      sta	VDELP1	;3
     15  4168
     16  4168		       a9 01		      lda	#1	;2
     17  416a		       85 0a		      sta	CTRLPF	;3
     18  416c
     19  416c							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  416c		       85 2b		      sta	HMCLR
     21  416e
     22  416e		       85 02		      sta	WSYNC
     23  4170
     24  4170		       e6 9c		      inc	temp1	;5
     25  4172		       c6 9c		      dec	temp1	;5
     26  4174		       e6 9c		      inc	temp1	;5
     27  4176		       c6 9c		      dec	temp1	;5
     28  4178		       e6 9c		      inc	temp1	;5
     29  417a		       c6 9c		      dec	temp1	;5
     30  417c		       e6 9c		      inc	temp1	;5
     31  417e		       c6 9c		      dec	temp1	;5
     32  4180		       e6 9c		      inc	temp1	;5
     33  4182		       c6 9c		      dec	temp1	;5
     34  4184
      0  4184					      sleep	5
      1  4184				   .CYCLES    SET	5
      2  4184
      3  4184				  -	      IF	.CYCLES < 2
      4  4184				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4184				  -	      ERR
      6  4184					      ENDIF
      7  4184
      8  4184					      IF	.CYCLES & 1
      9  4184					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4184		       04 00		      nop	0
     11  4186				  -	      ELSE
     12  4186				  -	      bit	VSYNC
     13  4186					      ENDIF
     14  4186				   .CYCLES    SET	.CYCLES - 3
     15  4186					      ENDIF
     16  4186
     17  4186					      REPEAT	.CYCLES / 2
     18  4186		       ea		      nop
     19  4187					      REPEND
     36  4187
     37  4187		       c8		      iny
     38  4188
     39  4188		       4c 8b 71 	      jmp	pf48x1_X_loop_entry
     40  418b
     41  418b				  -	      if	>. != >[.+$2a]
     42  418b				  -	      align	256
     43  418b					      endif
     44  418b
     45  418b				   pf48x1_X_loop_entry
     46  418b				   pf48x1_X_loop
     47  418b		       88		      dey		;2
     48  418c		       84 f1		      sty	aux2	;3
     49  418e		       b1 96		      lda	(scorepointers+0),y	;5
     50  4190		       85 1b		      sta	GRP0	;3
     51  4192
     52  4192		       b1 98		      lda	(scorepointers+2),y	;5
     53  4194		       85 1c		      sta	GRP1	;3
     54  4196		       b1 9a		      lda	(scorepointers+4),y	;5
     55  4198		       85 1b		      sta	GRP0	;3
     56  419a
      0  419a					      sleep	2	; I could make this indirect, if we want to burn more rom 
      1  419a				   .CYCLES    SET	2
      2  419a
      3  419a				  -	      IF	.CYCLES < 2
      4  419a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  419a				  -	      ERR
      6  419a					      ENDIF
      7  419a
      8  419a				  -	      IF	.CYCLES & 1
      9  419a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  419a				  -	      nop	0
     11  419a				  -	      ELSE
     12  419a				  -	      bit	VSYNC
     13  419a				  -	      ENDIF
     14  419a				  -.CYCLES    SET	.CYCLES - 3
     15  419a					      ENDIF
     16  419a
     17  419a					      REPEAT	.CYCLES / 2
     18  419a		       ea		      nop
     19  419b					      REPEND
     58  419b		       a5 f3		      lda	aux4	;3
     59  419d		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  419f
     61  419f		       b3 a0		      lax	(scorepointers+10),y	;5
     62  41a1		       b1 9e		      lda	(scorepointers+8),y	;5
     63  41a3		       85 f7		      sta	stack2	;3
     64  41a5		       b1 9c		      lda	(scorepointers+6),y	;5
     65  41a7		       a4 f7		      ldy	stack2	;3
     66  41a9
     67  41a9		       85 1c		      sta	GRP1	;3
     68  41ab		       84 1b		      sty	GRP0	;3
     69  41ad		       86 1c		      stx	GRP1	;3
     70  41af		       84 1b		      sty	GRP0	;3
     71  41b1
     72  41b1		       a4 f1		      ldy	aux2	;3
     73  41b3		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  41b5
     75  41b5				   pf48x1_X_codeend
     76  41b5							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  41b5
     78  41b5		       a9 00		      lda	#0
     79  41b7		       85 1b		      sta	GRP0
     80  41b9		       85 1c		      sta	GRP1
     81  41bb		       85 1b		      sta	GRP0
     82  41bd		       85 1c		      sta	GRP1
     83  41bf		       85 1f		      sta	ENABL
     84  41c1		       85 1d		      sta	ENAM0
     85  41c3		       85 25		      sta	VDELP0
     86  41c5		       85 26		      sta	VDELP1
     87  41c7		       85 0d		      sta	PF0
     88  41c9		       85 0e		      sta	PF1
     89  41cb		       85 0f		      sta	PF2
     90  41cd
     91  41cd		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  41cf		       9a		      txs
     93  41d0		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  41d1					      endif		;mk_48x1_X_on
    141  41d1
    142  41d1					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 2
      0  41d1					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  41d1				   draw_bmp_48x2_X
      2  41d1
      3  41d1		       a9 00		      lda	#0
      4  41d3		       85 1b		      sta	GRP0
      5  41d5		       85 1c		      sta	GRP1
      6  41d7
      7  41d7		       a9 03		      lda	#3
      8  41d9		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  41db		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  41dd
     11  41dd		       ba		      tsx
     12  41de		       86 f6		      stx	stack1	;save the stack pointer
     13  41e0
     14  41e0		       20 52 70 	      jsr	position48
     15  41e3
     16  41e3		       a9 03		      lda	#3	;2
     17  41e5		       85 25		      sta	VDELP0	;3
     18  41e7		       85 26		      sta	VDELP1	;3
     19  41e9
     20  41e9		       a9 01		      lda	#1	;2
     21  41eb		       85 0a		      sta	CTRLPF	;3
     22  41ed
     23  41ed							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  41ed		       85 2b		      sta	HMCLR
     25  41ef		       85 02		      sta	WSYNC
     26  41f1
     27  41f1
     28  41f1							;sleep (63)		;63
     29  41f1		       e6 9c		      inc	temp1
     30  41f3		       c6 9c		      dec	temp1
     31  41f5		       e6 9c		      inc	temp1
     32  41f7		       c6 9c		      dec	temp1
     33  41f9		       e6 9c		      inc	temp1
     34  41fb		       c6 9c		      dec	temp1
     35  41fd		       e6 9c		      inc	temp1
     36  41ff		       c6 9c		      dec	temp1
     37  4201		       e6 9c		      inc	temp1
     38  4203		       c6 9c		      dec	temp1
     39  4205		       e6 9c		      inc	temp1
     40  4207		       c6 9c		      dec	temp1
      0  4209					      sleep	3
      1  4209				   .CYCLES    SET	3
      2  4209
      3  4209				  -	      IF	.CYCLES < 2
      4  4209				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4209				  -	      ERR
      6  4209					      ENDIF
      7  4209
      8  4209					      IF	.CYCLES & 1
      9  4209					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4209		       04 00		      nop	0
     11  420b				  -	      ELSE
     12  420b				  -	      bit	VSYNC
     13  420b					      ENDIF
     14  420b				   .CYCLES    SET	.CYCLES - 3
     15  420b					      ENDIF
     16  420b
     17  420b				  -	      REPEAT	.CYCLES / 2
     18  420b				  -	      nop
     19  420b					      REPEND
     42  420b
     43  420b		       a5 f3		      lda	aux4	;3
     44  420d		       85 08		      sta	COLUPF	;3
     45  420f
     46  420f		       4c 12 72 	      jmp	pf48x2_X_loop	;3
     47  4212
     48  4212				  -	      if	>. != >[.+$52]
     49  4212				  -	      align	256
     50  4212					      endif
     51  4212
     52  4212				   pf48x2_X_loop
     53  4212
     54  4212		       b1 96		      lda	(scorepointers+0),y	;5
     55  4214		       85 1b		      sta	GRP0	;3
     56  4216		       b1 98		      lda	(scorepointers+2),y	;5
     57  4218		       85 1c		      sta	GRP1	;3
     58  421a		       b1 9a		      lda	(scorepointers+4),y	;5
     59  421c		       85 1b		      sta	GRP0	;3
     60  421e
     61  421e		       b3 a0		      lax	(scorepointers+10),y	;5
     62  4220		       b1 9e		      lda	(scorepointers+8),y	;5
     63  4222		       85 f7		      sta	stack2	;3
     64  4224		       b1 9c		      lda	(scorepointers+6),y	;5
     65  4226		       a4 f7		      ldy	stack2	;3
     66  4228
     67  4228		       85 1c		      sta	GRP1	;3
     68  422a		       84 1b		      sty	GRP0	;3
     69  422c		       86 1c		      stx	GRP1	;3
     70  422e		       84 1b		      sty	GRP0	;3
     71  4230
     72  4230		       a4 f1		      ldy	aux2	;3
     73  4232
     74  4232		       b1 f4		      lda	(aux5),y	;5
     75  4234		       85 91		      sta	missile0y	;3
     76  4236
      0  4236					      sleep	3
      1  4236				   .CYCLES    SET	3
      2  4236
      3  4236				  -	      IF	.CYCLES < 2
      4  4236				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4236				  -	      ERR
      6  4236					      ENDIF
      7  4236
      8  4236					      IF	.CYCLES & 1
      9  4236					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4236		       04 00		      nop	0
     11  4238				  -	      ELSE
     12  4238				  -	      bit	VSYNC
     13  4238					      ENDIF
     14  4238				   .CYCLES    SET	.CYCLES - 3
     15  4238					      ENDIF
     16  4238
     17  4238				  -	      REPEAT	.CYCLES / 2
     18  4238				  -	      nop
     19  4238					      REPEND
     78  4238
     79  4238		       c6 f1		      dec	aux2	;5
     80  423a
     81  423a
     82  423a		       b1 96		      lda	(scorepointers+0),y	;5
     83  423c		       85 1b		      sta	GRP0	;3
     84  423e		       b1 98		      lda	(scorepointers+2),y	;5
     85  4240		       85 1c		      sta	GRP1	;3
     86  4242		       b1 9a		      lda	(scorepointers+4),y	;5
     87  4244		       85 1b		      sta	GRP0	;3
     88  4246
     89  4246		       b3 a0		      lax	(scorepointers+10),y	;5
     90  4248		       b1 9e		      lda	(scorepointers+8),y	;5
     91  424a		       85 f7		      sta	stack2	;3
     92  424c		       b1 9c		      lda	(scorepointers+6),y	;5
     93  424e		       a4 f7		      ldy	stack2	;3
     94  4250
     95  4250		       85 1c		      sta	GRP1	;3
     96  4252		       84 1b		      sty	GRP0	;3
     97  4254		       86 1c		      stx	GRP1	;3
     98  4256		       84 1b		      sty	GRP0	;3
     99  4258
      0  4258					      sleep	4
      1  4258				   .CYCLES    SET	4
      2  4258
      3  4258				  -	      IF	.CYCLES < 2
      4  4258				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4258				  -	      ERR
      6  4258					      ENDIF
      7  4258
      8  4258				  -	      IF	.CYCLES & 1
      9  4258				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4258				  -	      nop	0
     11  4258				  -	      ELSE
     12  4258				  -	      bit	VSYNC
     13  4258				  -	      ENDIF
     14  4258				  -.CYCLES    SET	.CYCLES - 3
     15  4258					      ENDIF
     16  4258
     17  4258					      REPEAT	.CYCLES / 2
     18  4258		       ea		      nop
     17  4258					      REPEND
     18  4259		       ea		      nop
     19  425a					      REPEND
    101  425a
    102  425a		       a5 91		      lda	missile0y
    103  425c		       85 07		      sta	COLUP1
    104  425e		       85 06		      sta	COLUP0
    105  4260
    106  4260		       a4 f1		      ldy	aux2	;3
    107  4262		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  4264
    109  4264
    110  4264				   pf48x2_X_codeend
    111  4264							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  4264
    113  4264		       a9 00		      lda	#0
    114  4266		       85 1b		      sta	GRP0
    115  4268		       85 1c		      sta	GRP1
    116  426a		       85 1b		      sta	GRP0
    117  426c		       85 1c		      sta	GRP1
    118  426e		       85 25		      sta	VDELP0
    119  4270		       85 26		      sta	VDELP1
    120  4272		       85 0d		      sta	PF0
    121  4274		       85 0e		      sta	PF1
    122  4276		       85 0f		      sta	PF2
    123  4278
    124  4278		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  427a		       9a		      txs
    126  427b		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  427c					      endif		;mk_48x2_X_on
    145  427c
    146  427c
    147  427c				  -	      ifconst	mk_96x2_1_on
    148  427c				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    149  427c					      endif		;mk_96x2_1_on
    150  427c
    151  427c				  -	      ifconst	mk_96x2_2_on
    152  427c				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  427c					      endif		;mk_96x2_2_on
    154  427c
    155  427c				  -	      ifconst	mk_96x2_3_on
    156  427c				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  427c					      endif		;mk_96x2_3_on
    158  427c
    159  427c				  -	      ifconst	mk_96x2_4_on
    160  427c				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  427c					      endif		;mk_96x2_4_on
    162  427c
    163  427c				  -	      ifconst	mk_96x2_5_on
    164  427c				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  427c					      endif		;mk_96x2_5_on
    166  427c
    167  427c				  -	      ifconst	mk_96x2_6_on
    168  427c				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  427c					      endif		;mk_96x2_6_on
    170  427c
    171  427c				  -	      ifconst	mk_96x2_7_on
    172  427c				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  427c					      endif		;mk_96x2_7_on
    174  427c
    175  427c				  -	      ifconst	mk_96x2_8_on
    176  427c				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  427c					      endif		;mk_96x2_8_on
    178  427c
    179  427c				  -	      ifconst	mk_score_on
    180  427c				  -	      include	"titlescreen/asm/score_kernel.asm"
    181  427c					      endif		;mk_score_on
    182  427c
    183  427c				  -	      ifconst	mk_gameselect_on
    184  427c				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  427c					      endif		;mk_gameselect_on
    186  427c
    187  427c				   PFWAIT
    188  427c		       ad 84 02 	      lda	INTIM
    189  427f		       d0 fb		      bne	PFWAIT
    190  4281
    191  4281				   OVERSCAN
    192  4281							;lda #35+128 
    193  4281
    194  4281				  -	      ifnconst	overscan_time
    195  4281				  -	      lda	#35+128
    196  4281					      else
    197  4281		       a9 a0		      lda	#overscan_time+128-5
    198  4283					      endif
    199  4283		       8d 96 02 	      sta	TIM64T
    200  4286
    201  4286							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    202  4286				  -	      ifconst	player9height
    203  4286				  -	      ldy	#8
    204  4286				  -	      lda	#0
    205  4286				  -	      sta	player0height
    206  4286				  -.playerheightfixloop
    207  4286				  -	      sta	player1height,y
    208  4286				  -	      ifconst	_NUSIZ1
    209  4286				  -	      sta	_NUSIZ1,y
    210  4286				  -	      endif
    211  4286				  -	      dey
    212  4286				  -	      bpl	.playerheightfixloop
    213  4286					      endif
    214  4286
    215  4286		       a9 c2		      lda	#%11000010
    216  4288		       85 02		      sta	WSYNC
    217  428a		       85 01		      sta	VBLANK
      0  428c					      RETURN
      1  428c				  -	      ifnconst	bankswitch
      2  428c				  -	      rts
      3  428c					      else
      4  428c		       4c dd ff 	      jmp	BS_return
      5  428f					      endif
    219  428f
    220  428f					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 2
      0  428f					      include	"titlescreen/48x1_1_image.asm"
      1  428f
      2  428f							;*** The height of the displayed data...
      3  428f		       00 20	   bmp_48x1_1_window =	32
      4  428f
      5  428f							;*** The height of the bitmap data. This can be larger than 
      6  428f							;*** the displayed data height, if you're scrolling or animating 
      7  428f							;*** the data...
      8  428f		       00 20	   bmp_48x1_1_height =	32
      9  428f
     10  428f				  -	      ifnconst	bmp_48x1_1_PF1
     11  428f				  -bmp_48x1_1_PF1
     12  428f					      endif
     13  428f		       00		      BYTE.b	%00000000
     14  4290				  -	      ifnconst	bmp_48x1_1_PF2
     15  4290				  -bmp_48x1_1_PF2
     16  4290					      endif
     17  4290		       00		      BYTE.b	%00000000
     18  4291				  -	      ifnconst	bmp_48x1_1_background
     19  4291				  -bmp_48x1_1_background
     20  4291					      endif
     21  4291		       c2		      BYTE.b	$c2
     22  4292
     23  4292				  -	      ifnconst	bmp_48x1_1_color
     24  4292				  -bmp_48x1_1_color
     25  4292					      endif
     26  4292							; *** this is the bitmap color. If you want to change it in a 
     27  4292							; *** variable instead, dim one in bB called "bmp_48x1_1_color"
     28  4292		       54		      .byte.b	$54
     29  4293
     30  4293
     31  4293				  -	      if	>. != >[.+bmp_48x1_1_height]
     32  4293				  -	      align	256
     33  4293					      endif
     34  4293
     35  4293				   bmp_48x1_1_00
     36  4293		       00		      BYTE.b	%00000000
     37  4294		       00		      BYTE.b	%00000000
     38  4295		       00		      BYTE.b	%00000000
     39  4296		       00		      BYTE.b	%00000000
     40  4297		       00		      BYTE.b	%00000000
     41  4298		       00		      BYTE.b	%00000000
     42  4299		       00		      BYTE.b	%00000000
     43  429a		       00		      BYTE.b	%00000000
     44  429b		       00		      BYTE.b	%00000000
     45  429c		       00		      BYTE.b	%00000000
     46  429d		       00		      BYTE.b	%00000000
     47  429e		       00		      BYTE.b	%00000000
     48  429f		       00		      BYTE.b	%00000000
     49  42a0		       00		      BYTE.b	%00000000
     50  42a1		       00		      BYTE.b	%00000000
     51  42a2		       00		      BYTE.b	%00000000
     52  42a3		       00		      BYTE.b	%00000000
     53  42a4		       00		      BYTE.b	%00000000
     54  42a5		       00		      BYTE.b	%00000000
     55  42a6		       00		      BYTE.b	%00000000
     56  42a7		       00		      BYTE.b	%00000000
     57  42a8		       00		      BYTE.b	%00000000
     58  42a9		       73		      BYTE.b	%01110011
     59  42aa		       4a		      BYTE.b	%01001010
     60  42ab		       4a		      BYTE.b	%01001010
     61  42ac		       4a		      BYTE.b	%01001010
     62  42ad		       4a		      BYTE.b	%01001010
     63  42ae		       73		      BYTE.b	%01110011
     64  42af		       4a		      BYTE.b	%01001010
     65  42b0		       4a		      BYTE.b	%01001010
     66  42b1		       4a		      BYTE.b	%01001010
     67  42b2		       73		      BYTE.b	%01110011
     68  42b3
     69  42b3				  -	      if	>. != >[.+(bmp_48x1_1_height)]
     70  42b3				  -	      align	256
     71  42b3					      endif
     72  42b3
     73  42b3				   bmp_48x1_1_01
     74  42b3		       87		      BYTE.b	%10000111
     75  42b4		       81		      BYTE.b	%10000001
     76  42b5		       81		      BYTE.b	%10000001
     77  42b6		       81		      BYTE.b	%10000001
     78  42b7		       81		      BYTE.b	%10000001
     79  42b8		       e1		      BYTE.b	%11100001
     80  42b9		       91		      BYTE.b	%10010001
     81  42ba		       91		      BYTE.b	%10010001
     82  42bb		       e7		      BYTE.b	%11100111
     83  42bc		       00		      BYTE.b	%00000000
     84  42bd		       84		      BYTE.b	%10000100
     85  42be		       84		      BYTE.b	%10000100
     86  42bf		       84		      BYTE.b	%10000100
     87  42c0		       84		      BYTE.b	%10000100
     88  42c1		       84		      BYTE.b	%10000100
     89  42c2		       e7		      BYTE.b	%11100111
     90  42c3		       84		      BYTE.b	%10000100
     91  42c4		       84		      BYTE.b	%10000100
     92  42c5		       84		      BYTE.b	%10000100
     93  42c6		       f3		      BYTE.b	%11110011
     94  42c7		       00		      BYTE.b	%00000000
     95  42c8		       00		      BYTE.b	%00000000
     96  42c9		       d0		      BYTE.b	%11010000
     97  42ca		       10		      BYTE.b	%00010000
     98  42cb		       10		      BYTE.b	%00010000
     99  42cc		       10		      BYTE.b	%00010000
    100  42cd		       10		      BYTE.b	%00010000
    101  42ce		       90		      BYTE.b	%10010000
    102  42cf		       11		      BYTE.b	%00010001
    103  42d0		       12		      BYTE.b	%00010010
    104  42d1		       14		      BYTE.b	%00010100
    105  42d2		       d8		      BYTE.b	%11011000
    106  42d3
    107  42d3				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    108  42d3				  -	      align	256
    109  42d3					      endif
    110  42d3
    111  42d3				   bmp_48x1_1_02
    112  42d3		       df		      BYTE.b	%11011111
    113  42d4		       08		      BYTE.b	%00001000
    114  42d5		       08		      BYTE.b	%00001000
    115  42d6		       04		      BYTE.b	%00000100
    116  42d7		       04		      BYTE.b	%00000100
    117  42d8		       02		      BYTE.b	%00000010
    118  42d9		       02		      BYTE.b	%00000010
    119  42da		       01		      BYTE.b	%00000001
    120  42db		       df		      BYTE.b	%11011111
    121  42dc		       00		      BYTE.b	%00000000
    122  42dd		       a0		      BYTE.b	%10100000
    123  42de		       a0		      BYTE.b	%10100000
    124  42df		       a0		      BYTE.b	%10100000
    125  42e0		       a0		      BYTE.b	%10100000
    126  42e1		       a0		      BYTE.b	%10100000
    127  42e2		       a0		      BYTE.b	%10100000
    128  42e3		       a0		      BYTE.b	%10100000
    129  42e4		       a4		      BYTE.b	%10100100
    130  42e5		       aa		      BYTE.b	%10101010
    131  42e6		       31		      BYTE.b	%00110001
    132  42e7		       00		      BYTE.b	%00000000
    133  42e8		       00		      BYTE.b	%00000000
    134  42e9		       88		      BYTE.b	%10001000
    135  42ea		       88		      BYTE.b	%10001000
    136  42eb		       88		      BYTE.b	%10001000
    137  42ec		       88		      BYTE.b	%10001000
    138  42ed		       88		      BYTE.b	%10001000
    139  42ee		       88		      BYTE.b	%10001000
    140  42ef		       88		      BYTE.b	%10001000
    141  42f0		       88		      BYTE.b	%10001000
    142  42f1		       88		      BYTE.b	%10001000
    143  42f2		       be		      BYTE.b	%10111110
    144  42f3
    145  42f3					      if	>. != >[.+(bmp_48x1_1_height)]
    146  4300		       00 00 00 00*	      align	256
    147  4300					      endif
    148  4300
    149  4300				   bmp_48x1_1_03
    150  4300		       7e		      BYTE.b	%01111110
    151  4301		       20		      BYTE.b	%00100000
    152  4302		       20		      BYTE.b	%00100000
    153  4303		       10		      BYTE.b	%00010000
    154  4304		       08		      BYTE.b	%00001000
    155  4305		       08		      BYTE.b	%00001000
    156  4306		       04		      BYTE.b	%00000100
    157  4307		       04		      BYTE.b	%00000100
    158  4308		       7e		      BYTE.b	%01111110
    159  4309		       00		      BYTE.b	%00000000
    160  430a		       be		      BYTE.b	%10111110
    161  430b		       88		      BYTE.b	%10001000
    162  430c		       88		      BYTE.b	%10001000
    163  430d		       88		      BYTE.b	%10001000
    164  430e		       88		      BYTE.b	%10001000
    165  430f		       88		      BYTE.b	%10001000
    166  4310		       88		      BYTE.b	%10001000
    167  4311		       88		      BYTE.b	%10001000
    168  4312		       88		      BYTE.b	%10001000
    169  4313		       be		      BYTE.b	%10111110
    170  4314		       00		      BYTE.b	%00000000
    171  4315		       00		      BYTE.b	%00000000
    172  4316		       f7		      BYTE.b	%11110111
    173  4317		       84		      BYTE.b	%10000100
    174  4318		       84		      BYTE.b	%10000100
    175  4319		       84		      BYTE.b	%10000100
    176  431a		       84		      BYTE.b	%10000100
    177  431b		       87		      BYTE.b	%10000111
    178  431c		       84		      BYTE.b	%10000100
    179  431d		       84		      BYTE.b	%10000100
    180  431e		       84		      BYTE.b	%10000100
    181  431f		       07		      BYTE.b	%00000111
    182  4320
    183  4320				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    184  4320				  -	      align	256
    185  4320					      endif
    186  4320
    187  4320				   bmp_48x1_1_04
    188  4320		       90		      BYTE.b	%10010000
    189  4321		       90		      BYTE.b	%10010000
    190  4322		       90		      BYTE.b	%10010000
    191  4323		       90		      BYTE.b	%10010000
    192  4324		       f0		      BYTE.b	%11110000
    193  4325		       90		      BYTE.b	%10010000
    194  4326		       90		      BYTE.b	%10010000
    195  4327		       90		      BYTE.b	%10010000
    196  4328		       60		      BYTE.b	%01100000
    197  4329		       00		      BYTE.b	%00000000
    198  432a		       f4		      BYTE.b	%11110100
    199  432b		       84		      BYTE.b	%10000100
    200  432c		       84		      BYTE.b	%10000100
    201  432d		       84		      BYTE.b	%10000100
    202  432e		       84		      BYTE.b	%10000100
    203  432f		       84		      BYTE.b	%10000100
    204  4330		       84		      BYTE.b	%10000100
    205  4331		       84		      BYTE.b	%10000100
    206  4332		       8a		      BYTE.b	%10001010
    207  4333		       91		      BYTE.b	%10010001
    208  4334		       00		      BYTE.b	%00000000
    209  4335		       00		      BYTE.b	%00000000
    210  4336		       c4		      BYTE.b	%11000100
    211  4337		       04		      BYTE.b	%00000100
    212  4338		       04		      BYTE.b	%00000100
    213  4339		       04		      BYTE.b	%00000100
    214  433a		       04		      BYTE.b	%00000100
    215  433b		       84		      BYTE.b	%10000100
    216  433c		       04		      BYTE.b	%00000100
    217  433d		       04		      BYTE.b	%00000100
    218  433e		       0a		      BYTE.b	%00001010
    219  433f		       d1		      BYTE.b	%11010001
    220  4340
    221  4340				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    222  4340				  -	      align	256
    223  4340					      endif
    224  4340
    225  4340				   bmp_48x1_1_05
    226  4340		       00		      BYTE.b	%00000000
    227  4341		       00		      BYTE.b	%00000000
    228  4342		       00		      BYTE.b	%00000000
    229  4343		       00		      BYTE.b	%00000000
    230  4344		       00		      BYTE.b	%00000000
    231  4345		       00		      BYTE.b	%00000000
    232  4346		       00		      BYTE.b	%00000000
    233  4347		       00		      BYTE.b	%00000000
    234  4348		       00		      BYTE.b	%00000000
    235  4349		       00		      BYTE.b	%00000000
    236  434a		       00		      BYTE.b	%00000000
    237  434b		       00		      BYTE.b	%00000000
    238  434c		       00		      BYTE.b	%00000000
    239  434d		       00		      BYTE.b	%00000000
    240  434e		       00		      BYTE.b	%00000000
    241  434f		       00		      BYTE.b	%00000000
    242  4350		       00		      BYTE.b	%00000000
    243  4351		       00		      BYTE.b	%00000000
    244  4352		       00		      BYTE.b	%00000000
    245  4353		       00		      BYTE.b	%00000000
    246  4354		       00		      BYTE.b	%00000000
    247  4355		       00		      BYTE.b	%00000000
    248  4356		       1e		      BYTE.b	%00011110
    249  4357		       01		      BYTE.b	%00000001
    250  4358		       01		      BYTE.b	%00000001
    251  4359		       01		      BYTE.b	%00000001
    252  435a		       01		      BYTE.b	%00000001
    253  435b		       0e		      BYTE.b	%00001110
    254  435c		       10		      BYTE.b	%00010000
    255  435d		       10		      BYTE.b	%00010000
    256  435e		       10		      BYTE.b	%00010000
    257  435f		       4f		      BYTE.b	%01001111
    258  4360		       40		      BYTE.b	%01000000
    259  4361
------- FILE titlescreen/asm/titlescreen.asm
    222  4361					      endif
    223  4361					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 2
      0  4361					      include	"titlescreen/48x1_2_image.asm"
      1  4361
      2  4361							; *** if you want to modify the bitmap color on the fly, just dim a
      3  4361							; *** variable in bB called 'bmp_48x1_2_color' , and use it to set the
      4  4361							; *** color.
      5  4361
      6  4361							;*** The height of the displayed data...
      7  4361		       00 14	   bmp_48x1_2_window =	20
      8  4361
      9  4361							;*** The height of the bitmap data. This can be larger than
     10  4361							;*** the displayed data height, if you are scrolling or animating
     11  4361							;*** the data...
     12  4361		       00 14	   bmp_48x1_2_height =	20
     13  4361
     14  4361				  -	      ifnconst	bmp_48x1_2_color
     15  4361				  -bmp_48x1_2_color
     16  4361					      endif
     17  4361							; *** this is the bitmap color. If you want to change it in a 
     18  4361							; *** variable instead, dim one in bB called bmp_48x1_2_color
     19  4361		       40		      .byte.b	$40
     20  4362
     21  4362
     22  4362				  -	      if	>. != >[.+bmp_48x1_2_height]
     23  4362				  -	      align	256
     24  4362					      endif
     25  4362
     26  4362				   bmp_48x1_2_00
     27  4362
     28  4362		       00		      BYTE.b	%00000000
     29  4363		       00		      BYTE.b	%00000000
     30  4364		       00		      BYTE.b	%00000000
     31  4365		       00		      BYTE.b	%00000000
     32  4366		       00		      BYTE.b	%00000000
     33  4367		       00		      BYTE.b	%00000000
     34  4368		       00		      BYTE.b	%00000000
     35  4369		       00		      BYTE.b	%00000000
     36  436a		       00		      BYTE.b	%00000000
     37  436b		       00		      BYTE.b	%00000000
     38  436c		       00		      BYTE.b	%00000000
     39  436d		       00		      BYTE.b	%00000000
     40  436e		       00		      BYTE.b	%00000000
     41  436f		       00		      BYTE.b	%00000000
     42  4370		       00		      BYTE.b	%00000000
     43  4371		       00		      BYTE.b	%00000000
     44  4372		       00		      BYTE.b	%00000000
     45  4373		       00		      BYTE.b	%00000000
     46  4374		       00		      BYTE.b	%00000000
     47  4375		       00		      BYTE.b	%00000000
     48  4376		       00		      BYTE.b	%00000000
     49  4377		       00		      BYTE.b	%00000000
     50  4378		       00		      BYTE.b	%00000000
     51  4379
     52  4379				  -	      if	>. != >[.+(bmp_48x1_2_height)]
     53  4379				  -	      align	256
     54  4379					      endif
     55  4379
     56  4379				   bmp_48x1_2_01
     57  4379
     58  4379		       00		      BYTE.b	%00000000
     59  437a		       00		      BYTE.b	%00000000
     60  437b		       00		      BYTE.b	%00000000
     61  437c		       00		      BYTE.b	%00000000
     62  437d		       00		      BYTE.b	%00000000
     63  437e		       00		      BYTE.b	%00000000
     64  437f		       00		      BYTE.b	%00000000
     65  4380		       00		      BYTE.b	%00000000
     66  4381		       00		      BYTE.b	%00000000
     67  4382		       c4		      BYTE.b	%11000100
     68  4383		       24		      BYTE.b	%00100100
     69  4384		       e4		      BYTE.b	%11100100
     70  4385		       84		      BYTE.b	%10000100
     71  4386		       6e		      BYTE.b	%01101110
     72  4387		       00		      BYTE.b	%00000000
     73  4388		       46		      BYTE.b	%01000110
     74  4389		       88		      BYTE.b	%10001000
     75  438a		       88		      BYTE.b	%10001000
     76  438b		       88		      BYTE.b	%10001000
     77  438c		       46		      BYTE.b	%01000110
     78  438d		       00		      BYTE.b	%00000000
     79  438e		       00		      BYTE.b	%00000000
     80  438f		       88		      BYTE.b	%10001000
     81  4390
     82  4390				  -	      if	>. != >[.+(bmp_48x1_2_height)]
     83  4390				  -	      align	256
     84  4390					      endif
     85  4390
     86  4390				   bmp_48x1_2_02
     87  4390
     88  4390		       00		      BYTE.b	%00000000
     89  4391		       00		      BYTE.b	%00000000
     90  4392		       00		      BYTE.b	%00000000
     91  4393		       ea		      BYTE.b	%11101010
     92  4394		       4a		      BYTE.b	%01001010
     93  4395		       4a		      BYTE.b	%01001010
     94  4396		       4e		      BYTE.b	%01001110
     95  4397		       ea		      BYTE.b	%11101010
     96  4398		       00		      BYTE.b	%00000000
     97  4399		       68		      BYTE.b	%01101000
     98  439a		       a8		      BYTE.b	%10101000
     99  439b		       ac		      BYTE.b	%10101100
    100  439c		       80		      BYTE.b	%10000000
    101  439d		       60		      BYTE.b	%01100000
    102  439e		       00		      BYTE.b	%00000000
    103  439f		       80		      BYTE.b	%10000000
    104  43a0		       40		      BYTE.b	%01000000
    105  43a1		       40		      BYTE.b	%01000000
    106  43a2		       40		      BYTE.b	%01000000
    107  43a3		       80		      BYTE.b	%10000000
    108  43a4		       00		      BYTE.b	%00000000
    109  43a5		       00		      BYTE.b	%00000000
    110  43a6		       40		      BYTE.b	%01000000
    111  43a7
    112  43a7				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    113  43a7				  -	      align	256
    114  43a7					      endif
    115  43a7
    116  43a7				   bmp_48x1_2_03
    117  43a7
    118  43a7		       00		      BYTE.b	%00000000
    119  43a8		       00		      BYTE.b	%00000000
    120  43a9		       00		      BYTE.b	%00000000
    121  43aa		       60		      BYTE.b	%01100000
    122  43ab		       80		      BYTE.b	%10000000
    123  43ac		       80		      BYTE.b	%10000000
    124  43ad		       80		      BYTE.b	%10000000
    125  43ae		       60		      BYTE.b	%01100000
    126  43af		       00		      BYTE.b	%00000000
    127  43b0		       e4		      BYTE.b	%11100100
    128  43b1		       aa		      BYTE.b	%10101010
    129  43b2		       6a		      BYTE.b	%01101010
    130  43b3		       00		      BYTE.b	%00000000
    131  43b4		       00		      BYTE.b	%00000000
    132  43b5		       00		      BYTE.b	%00000000
    133  43b6		       ec		      BYTE.b	%11101100
    134  43b7		       8a		      BYTE.b	%10001010
    135  43b8		       4a		      BYTE.b	%01001010
    136  43b9		       2a		      BYTE.b	%00101010
    137  43ba		       c6		      BYTE.b	%11000110
    138  43bb		       00		      BYTE.b	%00000000
    139  43bc		       00		      BYTE.b	%00000000
    140  43bd		       2a		      BYTE.b	%00101010
    141  43be
    142  43be				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    143  43be				  -	      align	256
    144  43be					      endif
    145  43be
    146  43be				   bmp_48x1_2_04
    147  43be
    148  43be		       00		      BYTE.b	%00000000
    149  43bf		       00		      BYTE.b	%00000000
    150  43c0		       00		      BYTE.b	%00000000
    151  43c1		       00		      BYTE.b	%00000000
    152  43c2		       00		      BYTE.b	%00000000
    153  43c3		       00		      BYTE.b	%00000000
    154  43c4		       00		      BYTE.b	%00000000
    155  43c5		       00		      BYTE.b	%00000000
    156  43c6		       00		      BYTE.b	%00000000
    157  43c7		       6c		      BYTE.b	%01101100
    158  43c8		       c4		      BYTE.b	%11000100
    159  43c9		       e6		      BYTE.b	%11100110
    160  43ca		       00		      BYTE.b	%00000000
    161  43cb		       00		      BYTE.b	%00000000
    162  43cc		       00		      BYTE.b	%00000000
    163  43cd		       ec		      BYTE.b	%11101100
    164  43ce		       42		      BYTE.b	%01000010
    165  43cf		       4c		      BYTE.b	%01001100
    166  43d0		       c8		      BYTE.b	%11001000
    167  43d1		       4e		      BYTE.b	%01001110
    168  43d2		       00		      BYTE.b	%00000000
    169  43d3		       00		      BYTE.b	%00000000
    170  43d4		       c8		      BYTE.b	%11001000
    171  43d5
    172  43d5				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    173  43d5				  -	      align	256
    174  43d5					      endif
    175  43d5
    176  43d5				   bmp_48x1_2_05
    177  43d5
    178  43d5		       00		      BYTE.b	%00000000
    179  43d6		       00		      BYTE.b	%00000000
    180  43d7		       00		      BYTE.b	%00000000
    181  43d8		       00		      BYTE.b	%00000000
    182  43d9		       00		      BYTE.b	%00000000
    183  43da		       00		      BYTE.b	%00000000
    184  43db		       00		      BYTE.b	%00000000
    185  43dc		       00		      BYTE.b	%00000000
    186  43dd		       00		      BYTE.b	%00000000
    187  43de		       00		      BYTE.b	%00000000
    188  43df		       00		      BYTE.b	%00000000
    189  43e0		       00		      BYTE.b	%00000000
    190  43e1		       00		      BYTE.b	%00000000
    191  43e2		       00		      BYTE.b	%00000000
    192  43e3		       00		      BYTE.b	%00000000
    193  43e4		       00		      BYTE.b	%00000000
    194  43e5		       00		      BYTE.b	%00000000
    195  43e6		       00		      BYTE.b	%00000000
    196  43e7		       00		      BYTE.b	%00000000
    197  43e8		       00		      BYTE.b	%00000000
    198  43e9		       00		      BYTE.b	%00000000
    199  43ea		       00		      BYTE.b	%00000000
    200  43eb		       00		      BYTE.b	%00000000
    201  43ec
------- FILE titlescreen/asm/titlescreen.asm
    225  43ec					      endif
    226  43ec				  -	      ifconst	mk_48x1_3_on
    227  43ec				  -	      include	"titlescreen/48x1_3_image.asm"
    228  43ec					      endif
    229  43ec				  -	      ifconst	mk_48x1_4_on
    230  43ec				  -	      include	"titlescreen/48x1_4_image.asm"
    231  43ec					      endif
    232  43ec				  -	      ifconst	mk_48x1_5_on
    233  43ec				  -	      include	"titlescreen/48x1_5_image.asm"
    234  43ec					      endif
    235  43ec				  -	      ifconst	mk_48x1_6_on
    236  43ec				  -	      include	"titlescreen/48x1_6_image.asm"
    237  43ec					      endif
    238  43ec				  -	      ifconst	mk_48x1_7_on
    239  43ec				  -	      include	"titlescreen/48x1_7_image.asm"
    240  43ec					      endif
    241  43ec				  -	      ifconst	mk_48x1_8_on
    242  43ec				  -	      include	"titlescreen/48x1_8_image.asm"
    243  43ec					      endif
    244  43ec
    245  43ec
    246  43ec					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 2
      0  43ec					      include	"titlescreen/48x2_1_image.asm"
      1  43ec
      2  43ec							;*** The height of the displayed data...
      3  43ec		       00 40	   bmp_48x2_1_window =	64
      4  43ec
      5  43ec							;*** The height of the bitmap data. This can be larger than 
      6  43ec							;*** the displayed data height, if you're scrolling or animating 
      7  43ec							;*** the data...
      8  43ec		       00 40	   bmp_48x2_1_height =	64
      9  43ec
     10  43ec					      if	>. != >[.+(bmp_48x2_1_height)]
     11  4400		       00 00 00 00*	      align	256
     12  4400					      endif
     13  4400		       00		      BYTE.b	0	; leave this here!
     14  4401
     15  4401
     16  4401							;*** The color of each line in the bitmap, in reverse order...
     17  4401				   bmp_48x2_1_colors
     18  4401		       0e		      BYTE.b	$0e
     19  4402		       0e		      BYTE.b	$0e
     20  4403		       0e		      BYTE.b	$0e
     21  4404		       0e		      BYTE.b	$0e
     22  4405		       0e		      BYTE.b	$0e
     23  4406		       0e		      BYTE.b	$0e
     24  4407		       0e		      BYTE.b	$0e
     25  4408		       0e		      BYTE.b	$0e
     26  4409		       0e		      BYTE.b	$0e
     27  440a		       0e		      BYTE.b	$0e
     28  440b		       0e		      BYTE.b	$0e
     29  440c		       0e		      BYTE.b	$0e
     30  440d		       0e		      BYTE.b	$0e
     31  440e		       0e		      BYTE.b	$0e
     32  440f		       0e		      BYTE.b	$0e
     33  4410		       0e		      BYTE.b	$0e
     34  4411		       0e		      BYTE.b	$0e
     35  4412		       0e		      BYTE.b	$0e
     36  4413		       0e		      BYTE.b	$0e
     37  4414		       0e		      BYTE.b	$0e
     38  4415		       0e		      BYTE.b	$0e
     39  4416		       0e		      BYTE.b	$0e
     40  4417		       0e		      BYTE.b	$0e
     41  4418		       0e		      BYTE.b	$0e
     42  4419		       0e		      BYTE.b	$0e
     43  441a		       0e		      BYTE.b	$0e
     44  441b		       0e		      BYTE.b	$0e
     45  441c		       0e		      BYTE.b	$0e
     46  441d		       0e		      BYTE.b	$0e
     47  441e		       0e		      BYTE.b	$0e
     48  441f		       0e		      BYTE.b	$0e
     49  4420		       0e		      BYTE.b	$0e
     50  4421		       0e		      BYTE.b	$0e
     51  4422		       0e		      BYTE.b	$0e
     52  4423		       0e		      BYTE.b	$0e
     53  4424		       0e		      BYTE.b	$0e
     54  4425		       0e		      BYTE.b	$0e
     55  4426		       0e		      BYTE.b	$0e
     56  4427		       0e		      BYTE.b	$0e
     57  4428		       0e		      BYTE.b	$0e
     58  4429		       0e		      BYTE.b	$0e
     59  442a		       0e		      BYTE.b	$0e
     60  442b		       0e		      BYTE.b	$0e
     61  442c		       0e		      BYTE.b	$0e
     62  442d		       0e		      BYTE.b	$0e
     63  442e		       0e		      BYTE.b	$0e
     64  442f		       0e		      BYTE.b	$0e
     65  4430		       0e		      BYTE.b	$0e
     66  4431		       0e		      BYTE.b	$0e
     67  4432		       0e		      BYTE.b	$0e
     68  4433		       0e		      BYTE.b	$0e
     69  4434		       0e		      BYTE.b	$0e
     70  4435		       0e		      BYTE.b	$0e
     71  4436		       0e		      BYTE.b	$0e
     72  4437		       0e		      BYTE.b	$0e
     73  4438		       0e		      BYTE.b	$0e
     74  4439		       0e		      BYTE.b	$0e
     75  443a		       0e		      BYTE.b	$0e
     76  443b		       0e		      BYTE.b	$0e
     77  443c		       0e		      BYTE.b	$0e
     78  443d		       0e		      BYTE.b	$0e
     79  443e		       0e		      BYTE.b	$0e
     80  443f		       0e		      BYTE.b	$0e
     81  4440		       0e		      BYTE.b	$0e
     82  4441
     83  4441				  -	      ifnconst	bmp_48x2_1_PF1
     84  4441				  -bmp_48x2_1_PF1
     85  4441					      endif
     86  4441		       00		      BYTE.b	%00000000
     87  4442				  -	      ifnconst	bmp_48x2_1_PF2
     88  4442				  -bmp_48x2_1_PF2
     89  4442					      endif
     90  4442		       ff		      BYTE.b	%11111111
     91  4443				  -	      ifnconst	bmp_48x2_1_background
     92  4443				  -bmp_48x2_1_background
     93  4443					      endif
     94  4443		       00		      BYTE.b	$00
     95  4444
     96  4444				  -	      if	>. != >[.+bmp_48x2_1_height]
     97  4444				  -	      align	256
     98  4444					      endif
     99  4444
    100  4444
    101  4444				   bmp_48x2_1_00
    102  4444		       f8		      BYTE.b	%11111000
    103  4445		       f8		      BYTE.b	%11111000
    104  4446		       00		      BYTE.b	%00000000
    105  4447		       00		      BYTE.b	%00000000
    106  4448		       00		      BYTE.b	%00000000
    107  4449		       3c		      BYTE.b	%00111100
    108  444a		       18		      BYTE.b	%00011000
    109  444b		       00		      BYTE.b	%00000000
    110  444c		       00		      BYTE.b	%00000000
    111  444d		       07		      BYTE.b	%00000111
    112  444e		       07		      BYTE.b	%00000111
    113  444f		       00		      BYTE.b	%00000000
    114  4450		       00		      BYTE.b	%00000000
    115  4451		       00		      BYTE.b	%00000000
    116  4452		       00		      BYTE.b	%00000000
    117  4453		       00		      BYTE.b	%00000000
    118  4454		       00		      BYTE.b	%00000000
    119  4455		       00		      BYTE.b	%00000000
    120  4456		       00		      BYTE.b	%00000000
    121  4457		       00		      BYTE.b	%00000000
    122  4458		       00		      BYTE.b	%00000000
    123  4459		       00		      BYTE.b	%00000000
    124  445a		       00		      BYTE.b	%00000000
    125  445b		       00		      BYTE.b	%00000000
    126  445c		       00		      BYTE.b	%00000000
    127  445d		       00		      BYTE.b	%00000000
    128  445e		       00		      BYTE.b	%00000000
    129  445f		       00		      BYTE.b	%00000000
    130  4460		       00		      BYTE.b	%00000000
    131  4461		       00		      BYTE.b	%00000000
    132  4462		       00		      BYTE.b	%00000000
    133  4463		       00		      BYTE.b	%00000000
    134  4464		       00		      BYTE.b	%00000000
    135  4465		       00		      BYTE.b	%00000000
    136  4466		       00		      BYTE.b	%00000000
    137  4467		       00		      BYTE.b	%00000000
    138  4468		       00		      BYTE.b	%00000000
    139  4469		       00		      BYTE.b	%00000000
    140  446a		       00		      BYTE.b	%00000000
    141  446b		       00		      BYTE.b	%00000000
    142  446c		       00		      BYTE.b	%00000000
    143  446d		       00		      BYTE.b	%00000000
    144  446e		       00		      BYTE.b	%00000000
    145  446f		       00		      BYTE.b	%00000000
    146  4470		       00		      BYTE.b	%00000000
    147  4471		       00		      BYTE.b	%00000000
    148  4472		       00		      BYTE.b	%00000000
    149  4473		       00		      BYTE.b	%00000000
    150  4474		       00		      BYTE.b	%00000000
    151  4475		       00		      BYTE.b	%00000000
    152  4476		       00		      BYTE.b	%00000000
    153  4477		       00		      BYTE.b	%00000000
    154  4478		       00		      BYTE.b	%00000000
    155  4479		       00		      BYTE.b	%00000000
    156  447a		       00		      BYTE.b	%00000000
    157  447b		       00		      BYTE.b	%00000000
    158  447c		       00		      BYTE.b	%00000000
    159  447d		       00		      BYTE.b	%00000000
    160  447e		       00		      BYTE.b	%00000000
    161  447f		       00		      BYTE.b	%00000000
    162  4480		       00		      BYTE.b	%00000000
    163  4481		       00		      BYTE.b	%00000000
    164  4482		       00		      BYTE.b	%00000000
    165  4483		       00		      BYTE.b	%00000000
    166  4484
    167  4484				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    168  4484				  -	      align	256
    169  4484					      endif
    170  4484
    171  4484				   bmp_48x2_1_01
    172  4484		       00		      BYTE.b	%00000000
    173  4485		       00		      BYTE.b	%00000000
    174  4486		       f8		      BYTE.b	%11111000
    175  4487		       f8		      BYTE.b	%11111000
    176  4488		       f0		      BYTE.b	%11110000
    177  4489		       00		      BYTE.b	%00000000
    178  448a		       00		      BYTE.b	%00000000
    179  448b		       07		      BYTE.b	%00000111
    180  448c		       c7		      BYTE.b	%11000111
    181  448d		       e0		      BYTE.b	%11100000
    182  448e		       e0		      BYTE.b	%11100000
    183  448f		       01		      BYTE.b	%00000001
    184  4490		       01		      BYTE.b	%00000001
    185  4491		       fc		      BYTE.b	%11111100
    186  4492		       fc		      BYTE.b	%11111100
    187  4493		       60		      BYTE.b	%01100000
    188  4494		       00		      BYTE.b	%00000000
    189  4495		       07		      BYTE.b	%00000111
    190  4496		       07		      BYTE.b	%00000111
    191  4497		       03		      BYTE.b	%00000011
    192  4498		       00		      BYTE.b	%00000000
    193  4499		       00		      BYTE.b	%00000000
    194  449a		       00		      BYTE.b	%00000000
    195  449b		       00		      BYTE.b	%00000000
    196  449c		       00		      BYTE.b	%00000000
    197  449d		       00		      BYTE.b	%00000000
    198  449e		       00		      BYTE.b	%00000000
    199  449f		       00		      BYTE.b	%00000000
    200  44a0		       00		      BYTE.b	%00000000
    201  44a1		       00		      BYTE.b	%00000000
    202  44a2		       00		      BYTE.b	%00000000
    203  44a3		       00		      BYTE.b	%00000000
    204  44a4		       00		      BYTE.b	%00000000
    205  44a5		       00		      BYTE.b	%00000000
    206  44a6		       00		      BYTE.b	%00000000
    207  44a7		       00		      BYTE.b	%00000000
    208  44a8		       00		      BYTE.b	%00000000
    209  44a9		       00		      BYTE.b	%00000000
    210  44aa		       00		      BYTE.b	%00000000
    211  44ab		       00		      BYTE.b	%00000000
    212  44ac		       00		      BYTE.b	%00000000
    213  44ad		       00		      BYTE.b	%00000000
    214  44ae		       00		      BYTE.b	%00000000
    215  44af		       00		      BYTE.b	%00000000
    216  44b0		       00		      BYTE.b	%00000000
    217  44b1		       00		      BYTE.b	%00000000
    218  44b2		       00		      BYTE.b	%00000000
    219  44b3		       00		      BYTE.b	%00000000
    220  44b4		       00		      BYTE.b	%00000000
    221  44b5		       00		      BYTE.b	%00000000
    222  44b6		       00		      BYTE.b	%00000000
    223  44b7		       00		      BYTE.b	%00000000
    224  44b8		       00		      BYTE.b	%00000000
    225  44b9		       00		      BYTE.b	%00000000
    226  44ba		       00		      BYTE.b	%00000000
    227  44bb		       00		      BYTE.b	%00000000
    228  44bc		       00		      BYTE.b	%00000000
    229  44bd		       00		      BYTE.b	%00000000
    230  44be		       00		      BYTE.b	%00000000
    231  44bf		       00		      BYTE.b	%00000000
    232  44c0		       00		      BYTE.b	%00000000
    233  44c1		       00		      BYTE.b	%00000000
    234  44c2		       00		      BYTE.b	%00000000
    235  44c3		       00		      BYTE.b	%00000000
    236  44c4
    237  44c4					      if	>. != >[.+(bmp_48x2_1_height)]
    238  4500		       00 00 00 00*	      align	256
    239  4500					      endif
    240  4500
    241  4500				   bmp_48x2_1_02
    242  4500		       00		      BYTE.b	%00000000
    243  4501		       00		      BYTE.b	%00000000
    244  4502		       00		      BYTE.b	%00000000
    245  4503		       00		      BYTE.b	%00000000
    246  4504		       00		      BYTE.b	%00000000
    247  4505		       00		      BYTE.b	%00000000
    248  4506		       00		      BYTE.b	%00000000
    249  4507		       00		      BYTE.b	%00000000
    250  4508		       00		      BYTE.b	%00000000
    251  4509		       00		      BYTE.b	%00000000
    252  450a		       00		      BYTE.b	%00000000
    253  450b		       f8		      BYTE.b	%11111000
    254  450c		       f8		      BYTE.b	%11111000
    255  450d		       60		      BYTE.b	%01100000
    256  450e		       00		      BYTE.b	%00000000
    257  450f		       07		      BYTE.b	%00000111
    258  4510		       07		      BYTE.b	%00000111
    259  4511		       f0		      BYTE.b	%11110000
    260  4512		       f0		      BYTE.b	%11110000
    261  4513		       f0		      BYTE.b	%11110000
    262  4514		       00		      BYTE.b	%00000000
    263  4515		       00		      BYTE.b	%00000000
    264  4516		       00		      BYTE.b	%00000000
    265  4517		       00		      BYTE.b	%00000000
    266  4518		       00		      BYTE.b	%00000000
    267  4519		       00		      BYTE.b	%00000000
    268  451a		       00		      BYTE.b	%00000000
    269  451b		       00		      BYTE.b	%00000000
    270  451c		       00		      BYTE.b	%00000000
    271  451d		       00		      BYTE.b	%00000000
    272  451e		       00		      BYTE.b	%00000000
    273  451f		       00		      BYTE.b	%00000000
    274  4520		       00		      BYTE.b	%00000000
    275  4521		       00		      BYTE.b	%00000000
    276  4522		       00		      BYTE.b	%00000000
    277  4523		       00		      BYTE.b	%00000000
    278  4524		       00		      BYTE.b	%00000000
    279  4525		       00		      BYTE.b	%00000000
    280  4526		       00		      BYTE.b	%00000000
    281  4527		       00		      BYTE.b	%00000000
    282  4528		       00		      BYTE.b	%00000000
    283  4529		       00		      BYTE.b	%00000000
    284  452a		       00		      BYTE.b	%00000000
    285  452b		       00		      BYTE.b	%00000000
    286  452c		       00		      BYTE.b	%00000000
    287  452d		       00		      BYTE.b	%00000000
    288  452e		       00		      BYTE.b	%00000000
    289  452f		       ff		      BYTE.b	%11111111
    290  4530		       ff		      BYTE.b	%11111111
    291  4531		       ff		      BYTE.b	%11111111
    292  4532		       ff		      BYTE.b	%11111111
    293  4533		       f8		      BYTE.b	%11111000
    294  4534		       f8		      BYTE.b	%11111000
    295  4535		       f8		      BYTE.b	%11111000
    296  4536		       f8		      BYTE.b	%11111000
    297  4537		       f8		      BYTE.b	%11111000
    298  4538		       f8		      BYTE.b	%11111000
    299  4539		       e0		      BYTE.b	%11100000
    300  453a		       e0		      BYTE.b	%11100000
    301  453b		       e0		      BYTE.b	%11100000
    302  453c		       e0		      BYTE.b	%11100000
    303  453d		       e0		      BYTE.b	%11100000
    304  453e		       7f		      BYTE.b	%01111111
    305  453f		       1f		      BYTE.b	%00011111
    306  4540
    307  4540				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    308  4540				  -	      align	256
    309  4540					      endif
    310  4540
    311  4540				   bmp_48x2_1_03
    312  4540		       00		      BYTE.b	%00000000
    313  4541		       00		      BYTE.b	%00000000
    314  4542		       00		      BYTE.b	%00000000
    315  4543		       00		      BYTE.b	%00000000
    316  4544		       00		      BYTE.b	%00000000
    317  4545		       00		      BYTE.b	%00000000
    318  4546		       00		      BYTE.b	%00000000
    319  4547		       00		      BYTE.b	%00000000
    320  4548		       00		      BYTE.b	%00000000
    321  4549		       00		      BYTE.b	%00000000
    322  454a		       00		      BYTE.b	%00000000
    323  454b		       00		      BYTE.b	%00000000
    324  454c		       00		      BYTE.b	%00000000
    325  454d		       00		      BYTE.b	%00000000
    326  454e		       00		      BYTE.b	%00000000
    327  454f		       f8		      BYTE.b	%11111000
    328  4550		       f8		      BYTE.b	%11111000
    329  4551		       00		      BYTE.b	%00000000
    330  4552		       00		      BYTE.b	%00000000
    331  4553		       00		      BYTE.b	%00000000
    332  4554		       00		      BYTE.b	%00000000
    333  4555		       00		      BYTE.b	%00000000
    334  4556		       00		      BYTE.b	%00000000
    335  4557		       00		      BYTE.b	%00000000
    336  4558		       00		      BYTE.b	%00000000
    337  4559		       00		      BYTE.b	%00000000
    338  455a		       00		      BYTE.b	%00000000
    339  455b		       00		      BYTE.b	%00000000
    340  455c		       00		      BYTE.b	%00000000
    341  455d		       00		      BYTE.b	%00000000
    342  455e		       00		      BYTE.b	%00000000
    343  455f		       00		      BYTE.b	%00000000
    344  4560		       00		      BYTE.b	%00000000
    345  4561		       00		      BYTE.b	%00000000
    346  4562		       00		      BYTE.b	%00000000
    347  4563		       00		      BYTE.b	%00000000
    348  4564		       00		      BYTE.b	%00000000
    349  4565		       00		      BYTE.b	%00000000
    350  4566		       00		      BYTE.b	%00000000
    351  4567		       00		      BYTE.b	%00000000
    352  4568		       00		      BYTE.b	%00000000
    353  4569		       00		      BYTE.b	%00000000
    354  456a		       00		      BYTE.b	%00000000
    355  456b		       00		      BYTE.b	%00000000
    356  456c		       00		      BYTE.b	%00000000
    357  456d		       00		      BYTE.b	%00000000
    358  456e		       1f		      BYTE.b	%00011111
    359  456f		       ff		      BYTE.b	%11111111
    360  4570		       ff		      BYTE.b	%11111111
    361  4571		       e0		      BYTE.b	%11100000
    362  4572		       e0		      BYTE.b	%11100000
    363  4573		       e0		      BYTE.b	%11100000
    364  4574		       e0		      BYTE.b	%11100000
    365  4575		       ff		      BYTE.b	%11111111
    366  4576		       ff		      BYTE.b	%11111111
    367  4577		       ff		      BYTE.b	%11111111
    368  4578		       ff		      BYTE.b	%11111111
    369  4579		       3f		      BYTE.b	%00111111
    370  457a		       1f		      BYTE.b	%00011111
    371  457b		       1f		      BYTE.b	%00011111
    372  457c		       1f		      BYTE.b	%00011111
    373  457d		       3f		      BYTE.b	%00111111
    374  457e		       ff		      BYTE.b	%11111111
    375  457f		       ff		      BYTE.b	%11111111
    376  4580
    377  4580				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    378  4580				  -	      align	256
    379  4580					      endif
    380  4580
    381  4580				   bmp_48x2_1_04
    382  4580		       00		      BYTE.b	%00000000
    383  4581		       00		      BYTE.b	%00000000
    384  4582		       00		      BYTE.b	%00000000
    385  4583		       00		      BYTE.b	%00000000
    386  4584		       00		      BYTE.b	%00000000
    387  4585		       00		      BYTE.b	%00000000
    388  4586		       00		      BYTE.b	%00000000
    389  4587		       00		      BYTE.b	%00000000
    390  4588		       00		      BYTE.b	%00000000
    391  4589		       00		      BYTE.b	%00000000
    392  458a		       00		      BYTE.b	%00000000
    393  458b		       00		      BYTE.b	%00000000
    394  458c		       00		      BYTE.b	%00000000
    395  458d		       00		      BYTE.b	%00000000
    396  458e		       00		      BYTE.b	%00000000
    397  458f		       00		      BYTE.b	%00000000
    398  4590		       00		      BYTE.b	%00000000
    399  4591		       00		      BYTE.b	%00000000
    400  4592		       00		      BYTE.b	%00000000
    401  4593		       00		      BYTE.b	%00000000
    402  4594		       00		      BYTE.b	%00000000
    403  4595		       00		      BYTE.b	%00000000
    404  4596		       00		      BYTE.b	%00000000
    405  4597		       00		      BYTE.b	%00000000
    406  4598		       1f		      BYTE.b	%00011111
    407  4599		       3f		      BYTE.b	%00111111
    408  459a		       3f		      BYTE.b	%00111111
    409  459b		       1f		      BYTE.b	%00011111
    410  459c		       1f		      BYTE.b	%00011111
    411  459d		       1f		      BYTE.b	%00011111
    412  459e		       1f		      BYTE.b	%00011111
    413  459f		       00		      BYTE.b	%00000000
    414  45a0		       00		      BYTE.b	%00000000
    415  45a1		       00		      BYTE.b	%00000000
    416  45a2		       00		      BYTE.b	%00000000
    417  45a3		       00		      BYTE.b	%00000000
    418  45a4		       00		      BYTE.b	%00000000
    419  45a5		       00		      BYTE.b	%00000000
    420  45a6		       00		      BYTE.b	%00000000
    421  45a7		       00		      BYTE.b	%00000000
    422  45a8		       00		      BYTE.b	%00000000
    423  45a9		       00		      BYTE.b	%00000000
    424  45aa		       00		      BYTE.b	%00000000
    425  45ab		       00		      BYTE.b	%00000000
    426  45ac		       00		      BYTE.b	%00000000
    427  45ad		       00		      BYTE.b	%00000000
    428  45ae		       ff		      BYTE.b	%11111111
    429  45af		       ff		      BYTE.b	%11111111
    430  45b0		       ff		      BYTE.b	%11111111
    431  45b1		       ff		      BYTE.b	%11111111
    432  45b2		       ff		      BYTE.b	%11111111
    433  45b3		       c3		      BYTE.b	%11000011
    434  45b4		       c3		      BYTE.b	%11000011
    435  45b5		       c3		      BYTE.b	%11000011
    436  45b6		       c3		      BYTE.b	%11000011
    437  45b7		       c3		      BYTE.b	%11000011
    438  45b8		       c3		      BYTE.b	%11000011
    439  45b9		       01		      BYTE.b	%00000001
    440  45ba		       00		      BYTE.b	%00000000
    441  45bb		       00		      BYTE.b	%00000000
    442  45bc		       00		      BYTE.b	%00000000
    443  45bd		       80		      BYTE.b	%10000000
    444  45be		       ff		      BYTE.b	%11111111
    445  45bf		       ff		      BYTE.b	%11111111
    446  45c0
    447  45c0					      if	>. != >[.+(bmp_48x2_1_height)]
    448  4600		       00 00 00 00*	      align	256
    449  4600					      endif
    450  4600
    451  4600				   bmp_48x2_1_05
    452  4600		       00		      BYTE.b	%00000000
    453  4601		       00		      BYTE.b	%00000000
    454  4602		       00		      BYTE.b	%00000000
    455  4603		       00		      BYTE.b	%00000000
    456  4604		       00		      BYTE.b	%00000000
    457  4605		       00		      BYTE.b	%00000000
    458  4606		       00		      BYTE.b	%00000000
    459  4607		       00		      BYTE.b	%00000000
    460  4608		       00		      BYTE.b	%00000000
    461  4609		       00		      BYTE.b	%00000000
    462  460a		       00		      BYTE.b	%00000000
    463  460b		       00		      BYTE.b	%00000000
    464  460c		       00		      BYTE.b	%00000000
    465  460d		       00		      BYTE.b	%00000000
    466  460e		       00		      BYTE.b	%00000000
    467  460f		       00		      BYTE.b	%00000000
    468  4610		       00		      BYTE.b	%00000000
    469  4611		       00		      BYTE.b	%00000000
    470  4612		       00		      BYTE.b	%00000000
    471  4613		       00		      BYTE.b	%00000000
    472  4614		       00		      BYTE.b	%00000000
    473  4615		       00		      BYTE.b	%00000000
    474  4616		       00		      BYTE.b	%00000000
    475  4617		       00		      BYTE.b	%00000000
    476  4618		       07		      BYTE.b	%00000111
    477  4619		       07		      BYTE.b	%00000111
    478  461a		       07		      BYTE.b	%00000111
    479  461b		       07		      BYTE.b	%00000111
    480  461c		       07		      BYTE.b	%00000111
    481  461d		       00		      BYTE.b	%00000000
    482  461e		       00		      BYTE.b	%00000000
    483  461f		       00		      BYTE.b	%00000000
    484  4620		       00		      BYTE.b	%00000000
    485  4621		       00		      BYTE.b	%00000000
    486  4622		       00		      BYTE.b	%00000000
    487  4623		       00		      BYTE.b	%00000000
    488  4624		       00		      BYTE.b	%00000000
    489  4625		       00		      BYTE.b	%00000000
    490  4626		       00		      BYTE.b	%00000000
    491  4627		       00		      BYTE.b	%00000000
    492  4628		       00		      BYTE.b	%00000000
    493  4629		       00		      BYTE.b	%00000000
    494  462a		       00		      BYTE.b	%00000000
    495  462b		       00		      BYTE.b	%00000000
    496  462c		       00		      BYTE.b	%00000000
    497  462d		       00		      BYTE.b	%00000000
    498  462e		       c0		      BYTE.b	%11000000
    499  462f		       e0		      BYTE.b	%11100000
    500  4630		       e0		      BYTE.b	%11100000
    501  4631		       e0		      BYTE.b	%11100000
    502  4632		       e0		      BYTE.b	%11100000
    503  4633		       e0		      BYTE.b	%11100000
    504  4634		       e0		      BYTE.b	%11100000
    505  4635		       e0		      BYTE.b	%11100000
    506  4636		       e0		      BYTE.b	%11100000
    507  4637		       e0		      BYTE.b	%11100000
    508  4638		       e0		      BYTE.b	%11100000
    509  4639		       e0		      BYTE.b	%11100000
    510  463a		       e0		      BYTE.b	%11100000
    511  463b		       e0		      BYTE.b	%11100000
    512  463c		       e0		      BYTE.b	%11100000
    513  463d		       c0		      BYTE.b	%11000000
    514  463e		       80		      BYTE.b	%10000000
    515  463f		       00		      BYTE.b	%00000000
------- FILE titlescreen/asm/titlescreen.asm
    248  4640					      endif
    249  4640				  -	      ifconst	mk_48x2_2_on
    250  4640				  -	      include	"titlescreen/48x2_2_image.asm"
    251  4640					      endif
    252  4640				  -	      ifconst	mk_48x2_3_on
    253  4640				  -	      include	"titlescreen/48x2_3_image.asm"
    254  4640					      endif
    255  4640				  -	      ifconst	mk_48x2_4_on
    256  4640				  -	      include	"titlescreen/48x2_4_image.asm"
    257  4640					      endif
    258  4640				  -	      ifconst	mk_48x2_5_on
    259  4640				  -	      include	"titlescreen/48x2_5_image.asm"
    260  4640					      endif
    261  4640				  -	      ifconst	mk_48x2_6_on
    262  4640				  -	      include	"titlescreen/48x2_6_image.asm"
    263  4640					      endif
    264  4640				  -	      ifconst	mk_48x2_7_on
    265  4640				  -	      include	"titlescreen/48x2_7_image.asm"
    266  4640					      endif
    267  4640
    268  4640				  -	      ifconst	mk_48x2_8_on
    269  4640				  -	      include	"titlescreen/48x2_8_image.asm"
    270  4640					      endif
    271  4640
    272  4640
    273  4640				  -	      ifconst	mk_96x2_1_on
    274  4640				  -	      include	"titlescreen/96x2_1_image.asm"
    275  4640					      endif
    276  4640				  -	      ifconst	mk_96x2_2_on
    277  4640				  -	      include	"titlescreen/96x2_2_image.asm"
    278  4640					      endif
    279  4640				  -	      ifconst	mk_96x2_3_on
    280  4640				  -	      include	"titlescreen/96x2_3_image.asm"
    281  4640					      endif
    282  4640				  -	      ifconst	mk_96x2_4_on
    283  4640				  -	      include	"titlescreen/96x2_4_image.asm"
    284  4640					      endif
    285  4640				  -	      ifconst	mk_96x2_5_on
    286  4640				  -	      include	"titlescreen/96x2_5_image.asm"
    287  4640					      endif
    288  4640				  -	      ifconst	mk_96x2_6_on
    289  4640				  -	      include	"titlescreen/96x2_6_image.asm"
    290  4640					      endif
    291  4640				  -	      ifconst	mk_96x2_7_on
    292  4640				  -	      include	"titlescreen/96x2_7_image.asm"
    293  4640					      endif
    294  4640				  -	      ifconst	mk_96x2_8_on
    295  4640				  -	      include	"titlescreen/96x2_8_image.asm"
    296  4640					      endif
    297  4640
    298  4640				  -	      ifconst	mk_player_on
    299  4640				  -	      include	"titlescreen/player_image.asm"
    300  4640					      endif
    301  4640
    302  4640				  -	      ifconst	mk_score_on
    303  4640				  -	      include	"titlescreen/score_image.asm"
    304  4640					      endif
    305  4640
    306  4640				  -	      ifconst	mk_gameselect_on
    307  4640				  -	      include	"titlescreen/gameselect_image.asm"
    308  4640					      endif
    309  4640
    310  4640				  -	      ifconst	mk_player_on
    311  4640				  -	      include	"titlescreen/asm/player_kernel.asm"
    312  4640					      endif		;mk_player_on
    313  4640
    314  4640
------- FILE c:\Users\alexi\OneDrive\Documentos\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
   9659  4640
   9660  4640				   .
   9661  4640							;;line 2695;; 
   9662  4640
   9663  4640				   .
   9664  4640							;;line 2696;; 
   9665  4640
   9666  4640				   .
   9667  4640							;;line 2697;; 
   9668  4640
   9669  4640				   .
   9670  4640							;;line 2698;; 
   9671  4640
   9672  4640				   .L0434		;;line 2699;;	bank 5
   9673  4640
   9674  4640					      if	ECHO4
      2452 bytes of ROM space left in bank 4
   9675  4640					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   9676  4640					      endif
   9677  4640		       00 01	   ECHO4      =	1
   9678  4fd4					      ORG	$4FF4-bscode_length
   9679  4fd4					      RORG	$7FF4-bscode_length
   9680  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   9681  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9682  4fd6				  -	      stx	FASTFETCH
   9683  4fd6					      endif
   9684  4fd6		       9a		      txs
   9685  4fd7				  -	      if	bankswitch == 64
   9686  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9687  4fd7					      else
   9688  4fd7		       a9 f2		      lda	#>(start-1)
   9689  4fd9					      endif
   9690  4fd9		       48		      pha
   9691  4fda		       a9 51		      lda	#<(start-1)
   9692  4fdc		       48		      pha
   9693  4fdd		       48		      pha
   9694  4fde		       8a		      txa
   9695  4fdf		       48		      pha
   9696  4fe0		       ba		      tsx
   9697  4fe1					      if	bankswitch != 64
   9698  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   9699  4fe3		       2a		      rol
   9700  4fe4		       2a		      rol
   9701  4fe5		       2a		      rol
   9702  4fe6		       2a		      rol
   9703  4fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9704  4fe9		       aa		      tax
   9705  4fea		       e8		      inx
   9706  4feb				  -	      else
   9707  4feb				  -	      lda	4,x	; get high byte of return address
   9708  4feb				  -	      tay
   9709  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9710  4feb				  -	      sta	4,x
   9711  4feb				  -	      tya
   9712  4feb				  -	      lsr
   9713  4feb				  -	      lsr
   9714  4feb				  -	      lsr
   9715  4feb				  -	      lsr
   9716  4feb				  -	      tax
   9717  4feb				  -	      inx
   9718  4feb					      endif
   9719  4feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   9720  4fee		       68		      pla
   9721  4fef		       aa		      tax
   9722  4ff0		       68		      pla
   9723  4ff1		       60		      rts
   9724  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9725  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9726  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9727  4ff2					      endif
   9728  4ffc					      ORG	$4FFC
   9729  4ffc					      RORG	$7FFC
   9730  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   9731  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   9732  5000					      ORG	$5000
   9733  5000					      RORG	$9000
   9734  5000				   ._P_U
   9735  5000							;;line 2700;; _P_U
   9736  5000
   9737  5000				   .
   9738  5000							;;line 2701;; 
   9739  5000
   9740  5000				   .
   9741  5000							;;line 2702;; 
   9742  5000
   9743  5000				   .
   9744  5000							;;line 2703;; 
   9745  5000
   9746  5000				   .
   9747  5000							;;line 2704;; 
   9748  5000
   9749  5000				   .L0435		;;line 2705;;	player1color:
   9750  5000
   9751  5000		       a2 84		      LDX	#<playercolorL0435_1
   9752  5002		       86 87		      STX	player1color
   9753  5004		       a9 f7		      LDA	#>playercolorL0435_1
   9754  5006		       85 88		      STA	player1color+1
   9755  5008				   .
   9756  5008							;;line 2731;; 
   9757  5008
   9758  5008				   .L0436		;;line 2732;;	on _Frame_Counter goto __Pu00 __Pu01 __Pu02 __Pu03
   9759  5008
   9760  5008		       a6 d9		      LDX	_Frame_Counter
   9761  500a		       bd 13 90 	      LDA	.L0436jumptablehi,x
   9762  500d		       48		      PHA
   9763  500e		       bd 17 90 	      LDA	.L0436jumptablelo,x
   9764  5011		       48		      PHA
   9765  5012		       60		      RTS
   9766  5013				   .L0436jumptablehi
   9767  5013		       90		      .byte.b	>(.__Pu00-1)
   9768  5014		       90		      .byte.b	>(.__Pu01-1)
   9769  5015		       90		      .byte.b	>(.__Pu02-1)
   9770  5016		       90		      .byte.b	>(.__Pu03-1)
   9771  5017				   .L0436jumptablelo
   9772  5017		       27		      .byte.b	<(.__Pu00-1)
   9773  5018		       36		      .byte.b	<(.__Pu01-1)
   9774  5019		       45		      .byte.b	<(.__Pu02-1)
   9775  501a		       54		      .byte.b	<(.__Pu03-1)
   9776  501b				   .
   9777  501b							;;line 2733;; 
   9778  501b
   9779  501b				   .__Pu_Frame_Done
   9780  501b							;;line 2734;; __Pu_Frame_Done
   9781  501b
   9782  501b				   .L0437		;;line 2735;;	return
   9783  501b
   9784  501b		       ba		      tsx
   9785  501c		       b5 02		      lda	2,x	; check return address
   9786  501e		       49 90		      eor	#(>*)	; vs. current PCH
   9787  5020		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9788  5022		       f0 03		      beq	*+5	; if equal, do normal return
   9789  5024		       4c dd ff 	      JMP	BS_return
   9790  5027		       60		      RTS
   9791  5028				   .
   9792  5028							;;line 2736;; 
   9793  5028
   9794  5028				   .__Pu00
   9795  5028							;;line 2737;; __Pu00
   9796  5028
   9797  5028				   .L0438		;;line 2738;;	player1:
   9798  5028
   9799  5028		       a2 9c		      LDX	#<playerL0438_1
   9800  502a		       86 8c		      STX	player1pointerlo
   9801  502c		       a9 f7		      LDA	#>playerL0438_1
   9802  502e		       85 8d		      STA	player1pointerhi
   9803  5030		       a9 16		      LDA	#22
   9804  5032		       85 8f		      STA	player1height
   9805  5034				   .
   9806  5034							;;line 2763;; 
   9807  5034
   9808  5034				   .L0439		;;line 2764;;	goto __Pu_Frame_Done
   9809  5034
   9810  5034		       4c 1b 90 	      jmp	.__Pu_Frame_Done
   9811  5037
   9812  5037				   .
   9813  5037							;;line 2765;; 
   9814  5037
   9815  5037				   .__Pu01
   9816  5037							;;line 2766;; __Pu01
   9817  5037
   9818  5037				   .L0440		;;line 2767;;	player1:
   9819  5037
   9820  5037		       a2 b3		      LDX	#<playerL0440_1
   9821  5039		       86 8c		      STX	player1pointerlo
   9822  503b		       a9 f7		      LDA	#>playerL0440_1
   9823  503d		       85 8d		      STA	player1pointerhi
   9824  503f		       a9 16		      LDA	#22
   9825  5041		       85 8f		      STA	player1height
   9826  5043				   .
   9827  5043							;;line 2792;; 
   9828  5043
   9829  5043				   .L0441		;;line 2793;;	goto __Pu_Frame_Done
   9830  5043
   9831  5043		       4c 1b 90 	      jmp	.__Pu_Frame_Done
   9832  5046
   9833  5046				   .
   9834  5046							;;line 2794;; 
   9835  5046
   9836  5046				   .__Pu02
   9837  5046							;;line 2795;; __Pu02
   9838  5046
   9839  5046				   .
   9840  5046							;;line 2796;; 
   9841  5046
   9842  5046				   .L0442		;;line 2797;;	player1:
   9843  5046
   9844  5046		       a2 ca		      LDX	#<playerL0442_1
   9845  5048		       86 8c		      STX	player1pointerlo
   9846  504a		       a9 f7		      LDA	#>playerL0442_1
   9847  504c		       85 8d		      STA	player1pointerhi
   9848  504e		       a9 17		      LDA	#23
   9849  5050		       85 8f		      STA	player1height
   9850  5052				   .
   9851  5052							;;line 2823;; 
   9852  5052
   9853  5052				   .L0443		;;line 2824;;	goto __Pu_Frame_Done
   9854  5052
   9855  5052		       4c 1b 90 	      jmp	.__Pu_Frame_Done
   9856  5055
   9857  5055				   .
   9858  5055							;;line 2825;; 
   9859  5055
   9860  5055				   .__Pu03
   9861  5055							;;line 2826;; __Pu03
   9862  5055
   9863  5055				   .L0444		;;line 2827;;	player1:
   9864  5055
   9865  5055		       a2 e2		      LDX	#<playerL0444_1
   9866  5057		       86 8c		      STX	player1pointerlo
   9867  5059		       a9 f7		      LDA	#>playerL0444_1
   9868  505b		       85 8d		      STA	player1pointerhi
   9869  505d		       a9 17		      LDA	#23
   9870  505f		       85 8f		      STA	player1height
   9871  5061				   .
   9872  5061							;;line 2853;; 
   9873  5061
   9874  5061				   .L0445		;;line 2854;;	goto __Pu_Frame_Done
   9875  5061
   9876  5061		       4c 1b 90 	      jmp	.__Pu_Frame_Done
   9877  5064
   9878  5064				   .
   9879  5064							;;line 2855;; 
   9880  5064
   9881  5064				   .L0446		;;line 2856;;	return
   9882  5064
   9883  5064		       ba		      tsx
   9884  5065		       b5 02		      lda	2,x	; check return address
   9885  5067		       49 90		      eor	#(>*)	; vs. current PCH
   9886  5069		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9887  506b		       f0 03		      beq	*+5	; if equal, do normal return
   9888  506d		       4c dd ff 	      JMP	BS_return
   9889  5070		       60		      RTS
   9890  5071				   .
   9891  5071							;;line 2857;; 
   9892  5071
   9893  5071				   ._P_D
   9894  5071							;;line 2858;; _P_D
   9895  5071
   9896  5071				   .
   9897  5071							;;line 2859;; 
   9898  5071
   9899  5071				   .
   9900  5071							;;line 2860;; 
   9901  5071
   9902  5071				   .
   9903  5071							;;line 2861;; 
   9904  5071
   9905  5071				   .
   9906  5071							;;line 2862;; 
   9907  5071
   9908  5071				   .L0447		;;line 2863;;	player1color:
   9909  5071
   9910  5071		       a2 00		      LDX	#<playercolorL0447_1
   9911  5073		       86 87		      STX	player1color
   9912  5075		       a9 f8		      LDA	#>playercolorL0447_1
   9913  5077		       85 88		      STA	player1color+1
   9914  5079				   .
   9915  5079							;;line 2889;; 
   9916  5079
   9917  5079				   .L0448		;;line 2890;;	on _Frame_Counter goto __Pd00 __Pd01 __Pd02 __Pd03
   9918  5079
   9919  5079		       a6 d9		      LDX	_Frame_Counter
   9920  507b		       bd 84 90 	      LDA	.L0448jumptablehi,x
   9921  507e		       48		      PHA
   9922  507f		       bd 88 90 	      LDA	.L0448jumptablelo,x
   9923  5082		       48		      PHA
   9924  5083		       60		      RTS
   9925  5084				   .L0448jumptablehi
   9926  5084		       90		      .byte.b	>(.__Pd00-1)
   9927  5085		       90		      .byte.b	>(.__Pd01-1)
   9928  5086		       90		      .byte.b	>(.__Pd02-1)
   9929  5087		       90		      .byte.b	>(.__Pd03-1)
   9930  5088				   .L0448jumptablelo
   9931  5088		       98		      .byte.b	<(.__Pd00-1)
   9932  5089		       a7		      .byte.b	<(.__Pd01-1)
   9933  508a		       b6		      .byte.b	<(.__Pd02-1)
   9934  508b		       c5		      .byte.b	<(.__Pd03-1)
   9935  508c				   .
   9936  508c							;;line 2891;; 
   9937  508c
   9938  508c				   .__Pd_Frame_Done
   9939  508c							;;line 2892;; __Pd_Frame_Done
   9940  508c
   9941  508c				   .L0449		;;line 2893;;	return
   9942  508c
   9943  508c		       ba		      tsx
   9944  508d		       b5 02		      lda	2,x	; check return address
   9945  508f		       49 90		      eor	#(>*)	; vs. current PCH
   9946  5091		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9947  5093		       f0 03		      beq	*+5	; if equal, do normal return
   9948  5095		       4c dd ff 	      JMP	BS_return
   9949  5098		       60		      RTS
   9950  5099				   .
   9951  5099							;;line 2894;; 
   9952  5099
   9953  5099				   .__Pd00
   9954  5099							;;line 2895;; __Pd00
   9955  5099
   9956  5099				   .
   9957  5099							;;line 2896;; 
   9958  5099
   9959  5099				   .L0450		;;line 2897;;	player1:
   9960  5099
   9961  5099		       a2 18		      LDX	#<playerL0450_1
   9962  509b		       86 8c		      STX	player1pointerlo
   9963  509d		       a9 f8		      LDA	#>playerL0450_1
   9964  509f		       85 8d		      STA	player1pointerhi
   9965  50a1		       a9 16		      LDA	#22
   9966  50a3		       85 8f		      STA	player1height
   9967  50a5				   .
   9968  50a5							;;line 2922;; 
   9969  50a5
   9970  50a5				   .L0451		;;line 2923;;	goto __Pd_Frame_Done
   9971  50a5
   9972  50a5		       4c 8c 90 	      jmp	.__Pd_Frame_Done
   9973  50a8
   9974  50a8				   .
   9975  50a8							;;line 2924;; 
   9976  50a8
   9977  50a8				   .__Pd01
   9978  50a8							;;line 2925;; __Pd01
   9979  50a8
   9980  50a8				   .L0452		;;line 2926;;	player1:
   9981  50a8
   9982  50a8		       a2 2f		      LDX	#<playerL0452_1
   9983  50aa		       86 8c		      STX	player1pointerlo
   9984  50ac		       a9 f8		      LDA	#>playerL0452_1
   9985  50ae		       85 8d		      STA	player1pointerhi
   9986  50b0		       a9 16		      LDA	#22
   9987  50b2		       85 8f		      STA	player1height
   9988  50b4				   .L0453		;;line 2951;;	goto __Pd_Frame_Done
   9989  50b4
   9990  50b4		       4c 8c 90 	      jmp	.__Pd_Frame_Done
   9991  50b7
   9992  50b7				   .
   9993  50b7							;;line 2952;; 
   9994  50b7
   9995  50b7				   .__Pd02
   9996  50b7							;;line 2953;; __Pd02
   9997  50b7
   9998  50b7				   .
   9999  50b7							;;line 2954;; 
  10000  50b7
  10001  50b7				   .L0454		;;line 2955;;	player1:
  10002  50b7
  10003  50b7		       a2 46		      LDX	#<playerL0454_1
  10004  50b9		       86 8c		      STX	player1pointerlo
  10005  50bb		       a9 f8		      LDA	#>playerL0454_1
  10006  50bd		       85 8d		      STA	player1pointerhi
  10007  50bf		       a9 17		      LDA	#23
  10008  50c1		       85 8f		      STA	player1height
  10009  50c3				   .L0455		;;line 2981;;	goto __Pd_Frame_Done
  10010  50c3
  10011  50c3		       4c 8c 90 	      jmp	.__Pd_Frame_Done
  10012  50c6
  10013  50c6				   .
  10014  50c6							;;line 2982;; 
  10015  50c6
  10016  50c6				   .__Pd03
  10017  50c6							;;line 2983;; __Pd03
  10018  50c6
  10019  50c6				   .
  10020  50c6							;;line 2984;; 
  10021  50c6
  10022  50c6				   .L0456		;;line 2985;;	player1:
  10023  50c6
  10024  50c6		       a2 5e		      LDX	#<playerL0456_1
  10025  50c8		       86 8c		      STX	player1pointerlo
  10026  50ca		       a9 f8		      LDA	#>playerL0456_1
  10027  50cc		       85 8d		      STA	player1pointerhi
  10028  50ce		       a9 17		      LDA	#23
  10029  50d0		       85 8f		      STA	player1height
  10030  50d2				   .L0457		;;line 3011;;	goto __Pd_Frame_Done
  10031  50d2
  10032  50d2		       4c 8c 90 	      jmp	.__Pd_Frame_Done
  10033  50d5
  10034  50d5				   .L0458		;;line 3012;;	return
  10035  50d5
  10036  50d5		       ba		      tsx
  10037  50d6		       b5 02		      lda	2,x	; check return address
  10038  50d8		       49 90		      eor	#(>*)	; vs. current PCH
  10039  50da		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10040  50dc		       f0 03		      beq	*+5	; if equal, do normal return
  10041  50de		       4c dd ff 	      JMP	BS_return
  10042  50e1		       60		      RTS
  10043  50e2				   ._P_R
  10044  50e2							;;line 3013;; _P_R
  10045  50e2
  10046  50e2				   .
  10047  50e2							;;line 3014;; 
  10048  50e2
  10049  50e2				   .
  10050  50e2							;;line 3015;; 
  10051  50e2
  10052  50e2				   .
  10053  50e2							;;line 3016;; 
  10054  50e2
  10055  50e2				   .L0459		;;line 3017;;	player1color:
  10056  50e2
  10057  50e2		       a2 76		      LDX	#<playercolorL0459_1
  10058  50e4		       86 87		      STX	player1color
  10059  50e6		       a9 f8		      LDA	#>playercolorL0459_1
  10060  50e8		       85 88		      STA	player1color+1
  10061  50ea				   .L0460		;;line 3043;;	on _Frame_Counter goto __Pr00 __Pr01 __Pr02 __Pr03
  10062  50ea
  10063  50ea		       a6 d9		      LDX	_Frame_Counter
  10064  50ec		       bd f5 90 	      LDA	.L0460jumptablehi,x
  10065  50ef		       48		      PHA
  10066  50f0		       bd f9 90 	      LDA	.L0460jumptablelo,x
  10067  50f3		       48		      PHA
  10068  50f4		       60		      RTS
  10069  50f5				   .L0460jumptablehi
  10070  50f5		       91		      .byte.b	>(.__Pr00-1)
  10071  50f6		       91		      .byte.b	>(.__Pr01-1)
  10072  50f7		       91		      .byte.b	>(.__Pr02-1)
  10073  50f8		       91		      .byte.b	>(.__Pr03-1)
  10074  50f9				   .L0460jumptablelo
  10075  50f9		       09		      .byte.b	<(.__Pr00-1)
  10076  50fa		       18		      .byte.b	<(.__Pr01-1)
  10077  50fb		       27		      .byte.b	<(.__Pr02-1)
  10078  50fc		       36		      .byte.b	<(.__Pr03-1)
  10079  50fd				   .
  10080  50fd							;;line 3044;; 
  10081  50fd
  10082  50fd				   .__Pr_Frame_Done
  10083  50fd							;;line 3045;; __Pr_Frame_Done
  10084  50fd
  10085  50fd				   .L0461		;;line 3046;;	return
  10086  50fd
  10087  50fd		       ba		      tsx
  10088  50fe		       b5 02		      lda	2,x	; check return address
  10089  5100		       49 91		      eor	#(>*)	; vs. current PCH
  10090  5102		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10091  5104		       f0 03		      beq	*+5	; if equal, do normal return
  10092  5106		       4c dd ff 	      JMP	BS_return
  10093  5109		       60		      RTS
  10094  510a				   .
  10095  510a							;;line 3047;; 
  10096  510a
  10097  510a				   .__Pr00
  10098  510a							;;line 3048;; __Pr00
  10099  510a
  10100  510a				   .L0462		;;line 3049;;	player1:
  10101  510a
  10102  510a		       a2 8e		      LDX	#<playerL0462_1
  10103  510c		       86 8c		      STX	player1pointerlo
  10104  510e		       a9 f8		      LDA	#>playerL0462_1
  10105  5110		       85 8d		      STA	player1pointerhi
  10106  5112		       a9 16		      LDA	#22
  10107  5114		       85 8f		      STA	player1height
  10108  5116				   .L0463		;;line 3074;;	goto __Pr_Frame_Done
  10109  5116
  10110  5116		       4c fd 90 	      jmp	.__Pr_Frame_Done
  10111  5119
  10112  5119				   .
  10113  5119							;;line 3075;; 
  10114  5119
  10115  5119				   .__Pr01
  10116  5119							;;line 3076;; __Pr01
  10117  5119
  10118  5119				   .L0464		;;line 3077;;	player1:
  10119  5119
  10120  5119		       a2 a5		      LDX	#<playerL0464_1
  10121  511b		       86 8c		      STX	player1pointerlo
  10122  511d		       a9 f8		      LDA	#>playerL0464_1
  10123  511f		       85 8d		      STA	player1pointerhi
  10124  5121		       a9 16		      LDA	#22
  10125  5123		       85 8f		      STA	player1height
  10126  5125				   .L0465		;;line 3102;;	goto __Pr_Frame_Done
  10127  5125
  10128  5125		       4c fd 90 	      jmp	.__Pr_Frame_Done
  10129  5128
  10130  5128				   .
  10131  5128							;;line 3103;; 
  10132  5128
  10133  5128				   .__Pr02
  10134  5128							;;line 3104;; __Pr02
  10135  5128
  10136  5128				   .L0466		;;line 3105;;	player1:
  10137  5128
  10138  5128		       a2 bc		      LDX	#<playerL0466_1
  10139  512a		       86 8c		      STX	player1pointerlo
  10140  512c		       a9 f8		      LDA	#>playerL0466_1
  10141  512e		       85 8d		      STA	player1pointerhi
  10142  5130		       a9 17		      LDA	#23
  10143  5132		       85 8f		      STA	player1height
  10144  5134				   .L0467		;;line 3131;;	goto __Pr_Frame_Done
  10145  5134
  10146  5134		       4c fd 90 	      jmp	.__Pr_Frame_Done
  10147  5137
  10148  5137				   .
  10149  5137							;;line 3132;; 
  10150  5137
  10151  5137				   .__Pr03
  10152  5137							;;line 3133;; __Pr03
  10153  5137
  10154  5137				   .L0468		;;line 3134;;	player1:
  10155  5137
  10156  5137		       a2 d4		      LDX	#<playerL0468_1
  10157  5139		       86 8c		      STX	player1pointerlo
  10158  513b		       a9 f8		      LDA	#>playerL0468_1
  10159  513d		       85 8d		      STA	player1pointerhi
  10160  513f		       a9 17		      LDA	#23
  10161  5141		       85 8f		      STA	player1height
  10162  5143				   .L0469		;;line 3160;;	goto __Pr_Frame_Done
  10163  5143
  10164  5143		       4c fd 90 	      jmp	.__Pr_Frame_Done
  10165  5146
  10166  5146				   .
  10167  5146							;;line 3161;; 
  10168  5146
  10169  5146				   .L0470		;;line 3162;;	return
  10170  5146
  10171  5146		       ba		      tsx
  10172  5147		       b5 02		      lda	2,x	; check return address
  10173  5149		       49 91		      eor	#(>*)	; vs. current PCH
  10174  514b		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10175  514d		       f0 03		      beq	*+5	; if equal, do normal return
  10176  514f		       4c dd ff 	      JMP	BS_return
  10177  5152		       60		      RTS
  10178  5153				   ._P_L
  10179  5153							;;line 3163;; _P_L
  10180  5153
  10181  5153				   .
  10182  5153							;;line 3164;; 
  10183  5153
  10184  5153				   .
  10185  5153							;;line 3165;; 
  10186  5153
  10187  5153				   .
  10188  5153							;;line 3166;; 
  10189  5153
  10190  5153				   .
  10191  5153							;;line 3167;; 
  10192  5153
  10193  5153				   .
  10194  5153							;;line 3168;; 
  10195  5153
  10196  5153				   .L0471		;;line 3169;;	player1color:
  10197  5153
  10198  5153		       a2 00		      LDX	#<playercolorL0471_1
  10199  5155		       86 87		      STX	player1color
  10200  5157		       a9 f9		      LDA	#>playercolorL0471_1
  10201  5159		       85 88		      STA	player1color+1
  10202  515b				   .
  10203  515b							;;line 3195;; 
  10204  515b
  10205  515b				   .L0472		;;line 3196;;	on _Frame_Counter goto __Pl00 __Pl01 __Pl02 __Pl03
  10206  515b
  10207  515b		       a6 d9		      LDX	_Frame_Counter
  10208  515d		       bd 66 91 	      LDA	.L0472jumptablehi,x
  10209  5160		       48		      PHA
  10210  5161		       bd 6a 91 	      LDA	.L0472jumptablelo,x
  10211  5164		       48		      PHA
  10212  5165		       60		      RTS
  10213  5166				   .L0472jumptablehi
  10214  5166		       91		      .byte.b	>(.__Pl00-1)
  10215  5167		       91		      .byte.b	>(.__Pl01-1)
  10216  5168		       91		      .byte.b	>(.__Pl02-1)
  10217  5169		       91		      .byte.b	>(.__Pl03-1)
  10218  516a				   .L0472jumptablelo
  10219  516a		       7a		      .byte.b	<(.__Pl00-1)
  10220  516b		       89		      .byte.b	<(.__Pl01-1)
  10221  516c		       98		      .byte.b	<(.__Pl02-1)
  10222  516d		       a7		      .byte.b	<(.__Pl03-1)
  10223  516e				   .
  10224  516e							;;line 3197;; 
  10225  516e
  10226  516e				   .__Pl_Frame_Done
  10227  516e							;;line 3198;; __Pl_Frame_Done
  10228  516e
  10229  516e				   .L0473		;;line 3199;;	return
  10230  516e
  10231  516e		       ba		      tsx
  10232  516f		       b5 02		      lda	2,x	; check return address
  10233  5171		       49 91		      eor	#(>*)	; vs. current PCH
  10234  5173		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10235  5175		       f0 03		      beq	*+5	; if equal, do normal return
  10236  5177		       4c dd ff 	      JMP	BS_return
  10237  517a		       60		      RTS
  10238  517b				   .
  10239  517b							;;line 3200;; 
  10240  517b
  10241  517b				   .__Pl00
  10242  517b							;;line 3201;; __Pl00
  10243  517b
  10244  517b				   .L0474		;;line 3202;;	player1:
  10245  517b
  10246  517b		       a2 18		      LDX	#<playerL0474_1
  10247  517d		       86 8c		      STX	player1pointerlo
  10248  517f		       a9 f9		      LDA	#>playerL0474_1
  10249  5181		       85 8d		      STA	player1pointerhi
  10250  5183		       a9 16		      LDA	#22
  10251  5185		       85 8f		      STA	player1height
  10252  5187				   .L0475		;;line 3227;;	goto __Pl_Frame_Done
  10253  5187
  10254  5187		       4c 6e 91 	      jmp	.__Pl_Frame_Done
  10255  518a
  10256  518a				   .
  10257  518a							;;line 3228;; 
  10258  518a
  10259  518a				   .__Pl01
  10260  518a							;;line 3229;; __Pl01
  10261  518a
  10262  518a				   .L0476		;;line 3230;;	player1:
  10263  518a
  10264  518a		       a2 2f		      LDX	#<playerL0476_1
  10265  518c		       86 8c		      STX	player1pointerlo
  10266  518e		       a9 f9		      LDA	#>playerL0476_1
  10267  5190		       85 8d		      STA	player1pointerhi
  10268  5192		       a9 16		      LDA	#22
  10269  5194		       85 8f		      STA	player1height
  10270  5196				   .L0477		;;line 3255;;	goto __Pl_Frame_Done
  10271  5196
  10272  5196		       4c 6e 91 	      jmp	.__Pl_Frame_Done
  10273  5199
  10274  5199				   .
  10275  5199							;;line 3256;; 
  10276  5199
  10277  5199				   .__Pl02
  10278  5199							;;line 3257;; __Pl02
  10279  5199
  10280  5199				   .L0478		;;line 3258;;	player1:
  10281  5199
  10282  5199		       a2 46		      LDX	#<playerL0478_1
  10283  519b		       86 8c		      STX	player1pointerlo
  10284  519d		       a9 f9		      LDA	#>playerL0478_1
  10285  519f		       85 8d		      STA	player1pointerhi
  10286  51a1		       a9 17		      LDA	#23
  10287  51a3		       85 8f		      STA	player1height
  10288  51a5				   .L0479		;;line 3284;;	goto __Pl_Frame_Done
  10289  51a5
  10290  51a5		       4c 6e 91 	      jmp	.__Pl_Frame_Done
  10291  51a8
  10292  51a8				   .
  10293  51a8							;;line 3285;; 
  10294  51a8
  10295  51a8				   .__Pl03
  10296  51a8							;;line 3286;; __Pl03
  10297  51a8
  10298  51a8				   .L0480		;;line 3287;;	player1:
  10299  51a8
  10300  51a8		       a2 5e		      LDX	#<playerL0480_1
  10301  51aa		       86 8c		      STX	player1pointerlo
  10302  51ac		       a9 f9		      LDA	#>playerL0480_1
  10303  51ae		       85 8d		      STA	player1pointerhi
  10304  51b0		       a9 17		      LDA	#23
  10305  51b2		       85 8f		      STA	player1height
  10306  51b4				   .L0481		;;line 3313;;	goto __Pl_Frame_Done
  10307  51b4
  10308  51b4		       4c 6e 91 	      jmp	.__Pl_Frame_Done
  10309  51b7
  10310  51b7				   .
  10311  51b7							;;line 3314;; 
  10312  51b7
  10313  51b7				   .L0482		;;line 3315;;	return
  10314  51b7
  10315  51b7		       ba		      tsx
  10316  51b8		       b5 02		      lda	2,x	; check return address
  10317  51ba		       49 91		      eor	#(>*)	; vs. current PCH
  10318  51bc		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10319  51be		       f0 03		      beq	*+5	; if equal, do normal return
  10320  51c0		       4c dd ff 	      JMP	BS_return
  10321  51c3		       60		      RTS
  10322  51c4				   .
  10323  51c4							;;line 3316;; 
  10324  51c4
  10325  51c4				   .
  10326  51c4							;;line 3317;; 
  10327  51c4
  10328  51c4				   .
  10329  51c4							;;line 3318;; 
  10330  51c4
  10331  51c4				   .L0483		;;line 3319;;	bank 6
  10332  51c4
  10333  51c4					      if	ECHO5
      3600 bytes of ROM space left in bank 5
  10334  51c4					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
  10335  51c4					      endif
  10336  51c4		       00 01	   ECHO5      =	1
  10337  5fd4					      ORG	$5FF4-bscode_length
  10338  5fd4					      RORG	$9FF4-bscode_length
  10339  5fd4		       a2 ff	   start_bank5 ldx	#$ff
  10340  5fd6				  -	      ifconst	FASTFETCH	; using DPC+
  10341  5fd6				  -	      stx	FASTFETCH
  10342  5fd6					      endif
  10343  5fd6		       9a		      txs
  10344  5fd7				  -	      if	bankswitch == 64
  10345  5fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10346  5fd7					      else
  10347  5fd7		       a9 f2		      lda	#>(start-1)
  10348  5fd9					      endif
  10349  5fd9		       48		      pha
  10350  5fda		       a9 51		      lda	#<(start-1)
  10351  5fdc		       48		      pha
  10352  5fdd		       48		      pha
  10353  5fde		       8a		      txa
  10354  5fdf		       48		      pha
  10355  5fe0		       ba		      tsx
  10356  5fe1					      if	bankswitch != 64
  10357  5fe1		       b5 04		      lda	4,x	; get high byte of return address
  10358  5fe3		       2a		      rol
  10359  5fe4		       2a		      rol
  10360  5fe5		       2a		      rol
  10361  5fe6		       2a		      rol
  10362  5fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10363  5fe9		       aa		      tax
  10364  5fea		       e8		      inx
  10365  5feb				  -	      else
  10366  5feb				  -	      lda	4,x	; get high byte of return address
  10367  5feb				  -	      tay
  10368  5feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10369  5feb				  -	      sta	4,x
  10370  5feb				  -	      tya
  10371  5feb				  -	      lsr
  10372  5feb				  -	      lsr
  10373  5feb				  -	      lsr
  10374  5feb				  -	      lsr
  10375  5feb				  -	      tax
  10376  5feb				  -	      inx
  10377  5feb					      endif
  10378  5feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  10379  5fee		       68		      pla
  10380  5fef		       aa		      tax
  10381  5ff0		       68		      pla
  10382  5ff1		       60		      rts
  10383  5ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10384  5ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10385  5ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10386  5ff2					      endif
  10387  5ffc					      ORG	$5FFC
  10388  5ffc					      RORG	$9FFC
  10389  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
  10390  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
  10391  6000					      ORG	$6000
  10392  6000					      RORG	$B000
  10393  6000				   .
  10394  6000							;;line 3320;; 
  10395  6000
  10396  6000				   .
  10397  6000							;;line 3321;; 
  10398  6000
  10399  6000				   .
  10400  6000							;;line 3322;; 
  10401  6000
  10402  6000				   .L0484		;;line 3323;;	bank 7
  10403  6000
  10404  6000					      if	ECHO6
      4052 bytes of ROM space left in bank 6
  10405  6000					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
  10406  6000					      endif
  10407  6000		       00 01	   ECHO6      =	1
  10408  6fd4					      ORG	$6FF4-bscode_length
  10409  6fd4					      RORG	$BFF4-bscode_length
  10410  6fd4		       a2 ff	   start_bank6 ldx	#$ff
  10411  6fd6				  -	      ifconst	FASTFETCH	; using DPC+
  10412  6fd6				  -	      stx	FASTFETCH
  10413  6fd6					      endif
  10414  6fd6		       9a		      txs
  10415  6fd7				  -	      if	bankswitch == 64
  10416  6fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10417  6fd7					      else
  10418  6fd7		       a9 f2		      lda	#>(start-1)
  10419  6fd9					      endif
  10420  6fd9		       48		      pha
  10421  6fda		       a9 51		      lda	#<(start-1)
  10422  6fdc		       48		      pha
  10423  6fdd		       48		      pha
  10424  6fde		       8a		      txa
  10425  6fdf		       48		      pha
  10426  6fe0		       ba		      tsx
  10427  6fe1					      if	bankswitch != 64
  10428  6fe1		       b5 04		      lda	4,x	; get high byte of return address
  10429  6fe3		       2a		      rol
  10430  6fe4		       2a		      rol
  10431  6fe5		       2a		      rol
  10432  6fe6		       2a		      rol
  10433  6fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10434  6fe9		       aa		      tax
  10435  6fea		       e8		      inx
  10436  6feb				  -	      else
  10437  6feb				  -	      lda	4,x	; get high byte of return address
  10438  6feb				  -	      tay
  10439  6feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10440  6feb				  -	      sta	4,x
  10441  6feb				  -	      tya
  10442  6feb				  -	      lsr
  10443  6feb				  -	      lsr
  10444  6feb				  -	      lsr
  10445  6feb				  -	      lsr
  10446  6feb				  -	      tax
  10447  6feb				  -	      inx
  10448  6feb					      endif
  10449  6feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  10450  6fee		       68		      pla
  10451  6fef		       aa		      tax
  10452  6ff0		       68		      pla
  10453  6ff1		       60		      rts
  10454  6ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10455  6ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10456  6ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10457  6ff2					      endif
  10458  6ffc					      ORG	$6FFC
  10459  6ffc					      RORG	$BFFC
  10460  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
  10461  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
  10462  7000					      ORG	$7000
  10463  7000					      RORG	$D000
  10464  7000				   .
  10465  7000							;;line 3324;; 
  10466  7000
  10467  7000				   .
  10468  7000							;;line 3325;; 
  10469  7000
  10470  7000				   .
  10471  7000							;;line 3326;; 
  10472  7000
  10473  7000				   .L0485		;;line 3327;;	bank 8
  10474  7000
  10475  7000					      if	ECHO7
      4052 bytes of ROM space left in bank 7
  10476  7000					      echo	"    ",[(start_bank7 - *)]d , "bytes of ROM space left in bank 7")
  10477  7000					      endif
  10478  7000		       00 01	   ECHO7      =	1
  10479  7fd4					      ORG	$7FF4-bscode_length
  10480  7fd4					      RORG	$DFF4-bscode_length
  10481  7fd4		       a2 ff	   start_bank7 ldx	#$ff
  10482  7fd6				  -	      ifconst	FASTFETCH	; using DPC+
  10483  7fd6				  -	      stx	FASTFETCH
  10484  7fd6					      endif
  10485  7fd6		       9a		      txs
  10486  7fd7				  -	      if	bankswitch == 64
  10487  7fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10488  7fd7					      else
  10489  7fd7		       a9 f2		      lda	#>(start-1)
  10490  7fd9					      endif
  10491  7fd9		       48		      pha
  10492  7fda		       a9 51		      lda	#<(start-1)
  10493  7fdc		       48		      pha
  10494  7fdd		       48		      pha
  10495  7fde		       8a		      txa
  10496  7fdf		       48		      pha
  10497  7fe0		       ba		      tsx
  10498  7fe1					      if	bankswitch != 64
  10499  7fe1		       b5 04		      lda	4,x	; get high byte of return address
  10500  7fe3		       2a		      rol
  10501  7fe4		       2a		      rol
  10502  7fe5		       2a		      rol
  10503  7fe6		       2a		      rol
  10504  7fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10505  7fe9		       aa		      tax
  10506  7fea		       e8		      inx
  10507  7feb				  -	      else
  10508  7feb				  -	      lda	4,x	; get high byte of return address
  10509  7feb				  -	      tay
  10510  7feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10511  7feb				  -	      sta	4,x
  10512  7feb				  -	      tya
  10513  7feb				  -	      lsr
  10514  7feb				  -	      lsr
  10515  7feb				  -	      lsr
  10516  7feb				  -	      lsr
  10517  7feb				  -	      tax
  10518  7feb				  -	      inx
  10519  7feb					      endif
  10520  7feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  10521  7fee		       68		      pla
  10522  7fef		       aa		      tax
  10523  7ff0		       68		      pla
  10524  7ff1		       60		      rts
  10525  7ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10526  7ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10527  7ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10528  7ff2					      endif
  10529  7ffc					      ORG	$7FFC
  10530  7ffc					      RORG	$DFFC
  10531  7ffc		       d4 df		      .word.w	(start_bank7 & $ffff)
  10532  7ffe		       d4 df		      .word.w	(start_bank7 & $ffff)
  10533  8000					      ORG	$8000
  10534  8000					      RORG	$F000
  10535  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10536  8000
  10537  8000							; This is a 2-line kernel!
  10538  8000					      ifnconst	vertical_reflect
  10539  8000				   kernel
  10540  8000					      endif
  10541  8000		       85 02		      sta	WSYNC
  10542  8002		       a9 ff		      lda	#255
  10543  8004		       8d 96 02 	      sta	TIM64T
  10544  8007
  10545  8007		       a9 01		      lda	#1
  10546  8009		       85 27		      sta	VDELBL
  10547  800b		       85 25		      sta	VDELP0
  10548  800d		       a6 92		      ldx	ballheight
  10549  800f		       e8		      inx
  10550  8010		       e8		      inx
  10551  8011		       86 9f		      stx	temp4
  10552  8013		       a5 86		      lda	player1y
  10553  8015		       85 9e		      sta	temp3
  10554  8017
  10555  8017				  -	      ifconst	shakescreen
  10556  8017				  -	      jsr	doshakescreen
  10557  8017					      else
  10558  8017		       a6 90		      ldx	missile0height
  10559  8019		       e8		      inx
  10560  801a					      endif
  10561  801a
  10562  801a		       e8		      inx
  10563  801b		       86 f6		      stx	stack1
  10564  801d
  10565  801d		       a5 89		      lda	bally
  10566  801f		       85 f7		      sta	stack2
  10567  8021
  10568  8021		       a5 85		      lda	player0y
  10569  8023		       a2 00		      ldx	#0
  10570  8025		       85 02		      sta	WSYNC
  10571  8027		       86 1b		      stx	GRP0
  10572  8029		       86 1c		      stx	GRP1
  10573  802b		       86 0e		      stx	PF1L
  10574  802d		       86 0f		      stx	PF2
  10575  802f		       86 2c		      stx	CXCLR
  10576  8031				  -	      ifconst	readpaddle
  10577  8031				  -	      stx	paddle
  10578  8031					      else
      0  8031					      sleep	3
      1  8031				   .CYCLES    SET	3
      2  8031
      3  8031				  -	      IF	.CYCLES < 2
      4  8031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8031				  -	      ERR
      6  8031					      ENDIF
      7  8031
      8  8031					      IF	.CYCLES & 1
      9  8031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8031		       04 00		      nop	0
     11  8033				  -	      ELSE
     12  8033				  -	      bit	VSYNC
     13  8033					      ENDIF
     14  8033				   .CYCLES    SET	.CYCLES - 3
     15  8033					      ENDIF
     16  8033
     17  8033				  -	      REPEAT	.CYCLES / 2
     18  8033				  -	      nop
     19  8033					      REPEND
  10580  8033					      endif
  10581  8033
  10582  8033		       95 9d		      sta	temp2,x
  10583  8035
  10584  8035							;store these so they can be retrieved later
  10585  8035					      ifnconst	pfres
  10586  8035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
  10587  8037				  -	      else
  10588  8037				  -	      ldx	#132-pfres*pfwidth
  10589  8037					      endif
  10590  8037
  10591  8037		       c6 85		      dec	player0y
  10592  8039
  10593  8039		       a5 91		      lda	missile0y
  10594  803b		       85 a0		      sta	temp5
  10595  803d		       a5 88		      lda	missile1y
  10596  803f		       85 a1		      sta	temp6
  10597  8041
  10598  8041		       a5 ef		      lda	playfieldpos
  10599  8043		       85 9c		      sta	temp1
  10600  8045
  10601  8045				  -	      ifconst	pfrowheight
  10602  8045				  -	      lda	#pfrowheight+2
  10603  8045					      else
  10604  8045					      ifnconst	pfres
  10605  8045		       a9 0a		      lda	#10
  10606  8047				  -	      else
  10607  8047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  10608  8047					      endif
  10609  8047					      endif
  10610  8047		       18		      clc
  10611  8048		       e5 ef		      sbc	playfieldpos
  10612  804a		       85 ef		      sta	playfieldpos
  10613  804c		       4c 74 f0 	      jmp	.startkernel
  10614  804f
  10615  804f				   .skipDrawP0
  10616  804f		       a9 00		      lda	#0
  10617  8051		       a8		      tay
  10618  8052		       4c a3 f0 	      jmp	.continueP0
  10619  8055
  10620  8055				   .skipDrawP1
  10621  8055		       a9 00		      lda	#0
  10622  8057		       a8		      tay
  10623  8058		       4c 7e f0 	      jmp	.continueP1
  10624  805b
  10625  805b				   .kerloop		; enter at cycle 59??
  10626  805b
  10627  805b				   continuekernel
      0  805b					      sleep	2
      1  805b				   .CYCLES    SET	2
      2  805b
      3  805b				  -	      IF	.CYCLES < 2
      4  805b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  805b				  -	      ERR
      6  805b					      ENDIF
      7  805b
      8  805b				  -	      IF	.CYCLES & 1
      9  805b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  805b				  -	      nop	0
     11  805b				  -	      ELSE
     12  805b				  -	      bit	VSYNC
     13  805b				  -	      ENDIF
     14  805b				  -.CYCLES    SET	.CYCLES - 3
     15  805b					      ENDIF
     16  805b
     17  805b					      REPEAT	.CYCLES / 2
     18  805b		       ea		      nop
     19  805c					      REPEND
  10629  805c				   continuekernel2
  10630  805c		       a5 92		      lda	ballheight
  10631  805e
  10632  805e				  -	      ifconst	pfres
  10633  805e				  -	      ldy	playfield+pfres*pfwidth-132,x
  10634  805e				  -	      sty	PF1L	;3
  10635  805e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
  10636  805e				  -	      sty	PF2L	;3
  10637  805e				  -	      ldy	playfield+pfres*pfwidth-129,x
  10638  805e				  -	      sty	PF1R	; 3 too early?
  10639  805e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
  10640  805e				  -	      sty	PF2R	;3
  10641  805e					      else
  10642  805e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
  10643  8060		       84 0e		      sty	PF1L	;3
  10644  8062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  10645  8064		       84 0f		      sty	PF2L	;3
  10646  8066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
  10647  8068		       84 0e		      sty	PF1R	; 3 too early?
  10648  806a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  10649  806c		       84 0f		      sty	PF2R	;3
  10650  806e					      endif
  10651  806e
  10652  806e							; should be playfield+$38 for width=2
  10653  806e
  10654  806e		       c7 89		      dcp	bally
  10655  8070		       2a		      rol
  10656  8071		       2a		      rol
  10657  8072							; rol
  10658  8072							; rol
  10659  8072				   goback
  10660  8072		       85 1f		      sta	ENABL
  10661  8074				   .startkernel
  10662  8074		       a5 8f		      lda	player1height	;3
  10663  8076		       c7 86		      dcp	player1y	;5
  10664  8078		       90 db		      bcc	.skipDrawP1	;2
  10665  807a		       a4 86		      ldy	player1y	;3
  10666  807c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  10667  807e							; so it doesn't cross a page boundary!
  10668  807e
  10669  807e				   .continueP1
  10670  807e		       85 1c		      sta	GRP1	;3
  10671  8080
  10672  8080				  -	      ifnconst	player1colors
  10673  8080				  -	      lda	missile1height	;3
  10674  8080				  -	      dcp	missile1y	;5
  10675  8080				  -	      rol		;2
  10676  8080				  -	      rol		;2
  10677  8080				  -	      sta	ENAM1	;3
  10678  8080					      else
  10679  8080		       b1 87		      lda	(player1color),y
  10680  8082		       85 07		      sta	COLUP1
  10681  8084				  -	      ifnconst	playercolors
  10682  8084				  -	      sleep	7
  10683  8084					      else
  10684  8084		       ad 82 00 	      lda.w	player0colorstore
  10685  8087		       85 06		      sta	COLUP0
  10686  8089					      endif
  10687  8089					      endif
  10688  8089
  10689  8089				  -	      ifconst	pfres
  10690  8089				  -	      lda	playfield+pfres*pfwidth-132,x
  10691  8089				  -	      sta	PF1L	;3
  10692  8089				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
  10693  8089				  -	      sta	PF2L	;3
  10694  8089				  -	      lda	playfield+pfres*pfwidth-129,x
  10695  8089				  -	      sta	PF1R	; 3 too early?
  10696  8089				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
  10697  8089				  -	      sta	PF2R	;3
  10698  8089					      else
  10699  8089		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
  10700  808b		       85 0e		      sta	PF1L	;3
  10701  808d		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  10702  808f		       85 0f		      sta	PF2L	;3
  10703  8091		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
  10704  8093		       85 0e		      sta	PF1R	; 3 too early?
  10705  8095		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  10706  8097		       85 0f		      sta	PF2R	;3
  10707  8099					      endif
  10708  8099							; sleep 3
  10709  8099
  10710  8099		       a5 8e		      lda	player0height
  10711  809b		       c7 85		      dcp	player0y
  10712  809d		       90 b0		      bcc	.skipDrawP0
  10713  809f		       a4 85		      ldy	player0y
  10714  80a1		       b1 8a		      lda	(player0pointer),y
  10715  80a3				   .continueP0
  10716  80a3		       85 1b		      sta	GRP0
  10717  80a5
  10718  80a5					      ifnconst	no_blank_lines
  10719  80a5				  -	      ifnconst	playercolors
  10720  80a5				  -	      lda	missile0height	;3
  10721  80a5				  -	      dcp	missile0y	;5
  10722  80a5				  -	      sbc	stack1
  10723  80a5				  -	      sta	ENAM0	;3
  10724  80a5					      else
  10725  80a5		       b1 90		      lda	(player0color),y
  10726  80a7		       85 82		      sta	player0colorstore
      0  80a9					      sleep	6
      1  80a9				   .CYCLES    SET	6
      2  80a9
      3  80a9				  -	      IF	.CYCLES < 2
      4  80a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  80a9				  -	      ERR
      6  80a9					      ENDIF
      7  80a9
      8  80a9				  -	      IF	.CYCLES & 1
      9  80a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  80a9				  -	      nop	0
     11  80a9				  -	      ELSE
     12  80a9				  -	      bit	VSYNC
     13  80a9				  -	      ENDIF
     14  80a9				  -.CYCLES    SET	.CYCLES - 3
     15  80a9					      ENDIF
     16  80a9
     17  80a9					      REPEAT	.CYCLES / 2
     18  80a9		       ea		      nop
     17  80a9					      REPEND
     18  80aa		       ea		      nop
     17  80aa					      REPEND
     18  80ab		       ea		      nop
     19  80ac					      REPEND
  10728  80ac					      endif
  10729  80ac		       c6 9c		      dec	temp1
  10730  80ae		       d0 ab		      bne	continuekernel
  10731  80b0				  -	      else
  10732  80b0				  -	      dec	temp1
  10733  80b0				  -	      beq	altkernel2
  10734  80b0				  -	      ifconst	readpaddle
  10735  80b0				  -	      ldy	currentpaddle
  10736  80b0				  -	      lda	INPT0,y
  10737  80b0				  -	      bpl	noreadpaddle
  10738  80b0				  -	      inc	paddle
  10739  80b0				  -	      jmp	continuekernel2
  10740  80b0				  -noreadpaddle
  10741  80b0				  -	      sleep	2
  10742  80b0				  -	      jmp	continuekernel
  10743  80b0				  -	      else
  10744  80b0				  -	      ifnconst	playercolors
  10745  80b0				  -	      ifconst	PFcolors
  10746  80b0				  -	      txa
  10747  80b0				  -	      tay
  10748  80b0				  -	      lda	(pfcolortable),y
  10749  80b0				  -	      ifnconst	backgroundchange
  10750  80b0				  -	      sta	COLUPF
  10751  80b0				  -	      else
  10752  80b0				  -	      sta	COLUBK
  10753  80b0				  -	      endif
  10754  80b0				  -	      jmp	continuekernel
  10755  80b0				  -	      else
  10756  80b0				  -	      ifconst	kernelmacrodef
  10757  80b0				  -	      kernelmacro
  10758  80b0				  -	      else
  10759  80b0				  -	      sleep	12
  10760  80b0				  -	      endif
  10761  80b0				  -	      endif
  10762  80b0				  -	      else
  10763  80b0				  -	      lda	(player0color),y
  10764  80b0				  -	      sta	player0colorstore
  10765  80b0				  -	      sleep	4
  10766  80b0				  -	      endif
  10767  80b0				  -	      jmp	continuekernel
  10768  80b0				  -	      endif
  10769  80b0				  -altkernel2
  10770  80b0				  -	      txa
  10771  80b0				  -	      ifnconst	vertical_reflect
  10772  80b0				  -	      sbx	#256-pfwidth
  10773  80b0				  -	      else
  10774  80b0				  -	      sbx	#256-pfwidth/2
  10775  80b0				  -	      endif
  10776  80b0				  -	      bmi	lastkernelline
  10777  80b0				  -	      ifconst	pfrowheight
  10778  80b0				  -	      lda	#pfrowheight
  10779  80b0				  -	      else
  10780  80b0				  -	      ifnconst	pfres
  10781  80b0				  -	      lda	#8
  10782  80b0				  -	      else
  10783  80b0				  -	      lda	#(96/pfres)	; try to come close to the real size
  10784  80b0				  -	      endif
  10785  80b0				  -	      endif
  10786  80b0				  -	      sta	temp1
  10787  80b0				  -	      jmp	continuekernel
  10788  80b0					      endif
  10789  80b0
  10790  80b0				   altkernel
  10791  80b0
  10792  80b0				  -	      ifconst	PFmaskvalue
  10793  80b0				  -	      lda	#PFmaskvalue
  10794  80b0					      else
  10795  80b0		       a9 00		      lda	#0
  10796  80b2					      endif
  10797  80b2		       85 0e		      sta	PF1L
  10798  80b4		       85 0f		      sta	PF2
  10799  80b6
  10800  80b6
  10801  80b6							;sleep 3
  10802  80b6
  10803  80b6							;28 cycles to fix things
  10804  80b6							;minus 11=17
  10805  80b6
  10806  80b6							; lax temp4
  10807  80b6							; clc
  10808  80b6		       8a		      txa
  10809  80b7					      ifnconst	vertical_reflect
  10810  80b7		       cb fc		      sbx	#256-pfwidth
  10811  80b9				  -	      else
  10812  80b9				  -	      sbx	#256-pfwidth/2
  10813  80b9					      endif
  10814  80b9
  10815  80b9		       30 12		      bmi	lastkernelline
  10816  80bb
  10817  80bb				  -	      ifconst	PFcolorandheight
  10818  80bb				  -	      ifconst	pfres
  10819  80bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
  10820  80bb				  -	      else
  10821  80bb				  -	      ldy	playfieldcolorandheight-87,x
  10822  80bb				  -	      endif
  10823  80bb				  -	      ifnconst	backgroundchange
  10824  80bb				  -	      sty	COLUPF
  10825  80bb				  -	      else
  10826  80bb				  -	      sty	COLUBK
  10827  80bb				  -	      endif
  10828  80bb				  -	      ifconst	pfres
  10829  80bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
  10830  80bb				  -	      else
  10831  80bb				  -	      lda	playfieldcolorandheight-88,x
  10832  80bb				  -	      endif
  10833  80bb				  -	      sta.w	temp1
  10834  80bb					      endif
  10835  80bb				  -	      ifconst	PFheights
  10836  80bb				  -	      lsr
  10837  80bb				  -	      lsr
  10838  80bb				  -	      tay
  10839  80bb				  -	      lda	(pfheighttable),y
  10840  80bb				  -	      sta.w	temp1
  10841  80bb					      endif
  10842  80bb					      ifconst	PFcolors
  10843  80bb		       a8		      tay
  10844  80bc		       b1 f0		      lda	(pfcolortable),y
  10845  80be					      ifnconst	backgroundchange
  10846  80be		       85 08		      sta	COLUPF
  10847  80c0				  -	      else
  10848  80c0				  -	      sta	COLUBK
  10849  80c0					      endif
  10850  80c0				  -	      ifconst	pfrowheight
  10851  80c0				  -	      lda	#pfrowheight
  10852  80c0					      else
  10853  80c0					      ifnconst	pfres
  10854  80c0		       a9 08		      lda	#8
  10855  80c2				  -	      else
  10856  80c2				  -	      lda	#(96/pfres)	; try to come close to the real size
  10857  80c2					      endif
  10858  80c2					      endif
  10859  80c2		       85 9c		      sta	temp1
  10860  80c4					      endif
  10861  80c4					      ifnconst	PFcolorandheight
  10862  80c4				  -	      ifnconst	PFcolors
  10863  80c4				  -	      ifnconst	PFheights
  10864  80c4				  -	      ifnconst	no_blank_lines
  10865  80c4				  -			; read paddle 0
  10866  80c4				  -			; lo-res paddle read
  10867  80c4				  -			; bit INPT0
  10868  80c4				  -			; bmi paddleskipread
  10869  80c4				  -			; inc paddle0
  10870  80c4				  -			;donepaddleskip
  10871  80c4				  -	      sleep	10
  10872  80c4				  -	      ifconst	pfrowheight
  10873  80c4				  -	      lda	#pfrowheight
  10874  80c4				  -	      else
  10875  80c4				  -	      ifnconst	pfres
  10876  80c4				  -	      lda	#8
  10877  80c4				  -	      else
  10878  80c4				  -	      lda	#(96/pfres)	; try to come close to the real size
  10879  80c4				  -	      endif
  10880  80c4				  -	      endif
  10881  80c4				  -	      sta	temp1
  10882  80c4				  -	      endif
  10883  80c4				  -	      endif
  10884  80c4					      endif
  10885  80c4					      endif
  10886  80c4
  10887  80c4
  10888  80c4		       a5 92		      lda	ballheight
  10889  80c6		       c7 89		      dcp	bally
  10890  80c8		       e5 9f		      sbc	temp4
  10891  80ca
  10892  80ca
  10893  80ca		       4c 72 f0 	      jmp	goback
  10894  80cd
  10895  80cd
  10896  80cd					      ifnconst	no_blank_lines
  10897  80cd				   lastkernelline
  10898  80cd				  -	      ifnconst	PFcolors
  10899  80cd				  -	      sleep	10
  10900  80cd					      else
  10901  80cd		       a0 7c		      ldy	#124
  10902  80cf		       b1 f0		      lda	(pfcolortable),y
  10903  80d1		       85 08		      sta	COLUPF
  10904  80d3					      endif
  10905  80d3
  10906  80d3				  -	      ifconst	PFheights
  10907  80d3				  -	      ldx	#1
  10908  80d3				  -			;sleep 4
  10909  80d3				  -	      sleep	3	; this was over 1 cycle
  10910  80d3					      else
  10911  80d3		       a6 ef		      ldx	playfieldpos
  10912  80d5							;sleep 3
      0  80d5					      sleep	2	; this was over 1 cycle
      1  80d5				   .CYCLES    SET	2
      2  80d5
      3  80d5				  -	      IF	.CYCLES < 2
      4  80d5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  80d5				  -	      ERR
      6  80d5					      ENDIF
      7  80d5
      8  80d5				  -	      IF	.CYCLES & 1
      9  80d5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  80d5				  -	      nop	0
     11  80d5				  -	      ELSE
     12  80d5				  -	      bit	VSYNC
     13  80d5				  -	      ENDIF
     14  80d5				  -.CYCLES    SET	.CYCLES - 3
     15  80d5					      ENDIF
     16  80d5
     17  80d5					      REPEAT	.CYCLES / 2
     18  80d5		       ea		      nop
     19  80d6					      REPEND
  10914  80d6					      endif
  10915  80d6
  10916  80d6		       4c 1b f1 	      jmp	enterlastkernel
  10917  80d9
  10918  80d9				  -	      else
  10919  80d9				  -lastkernelline
  10920  80d9				  -
  10921  80d9				  -	      ifconst	PFheights
  10922  80d9				  -	      ldx	#1
  10923  80d9				  -			;sleep 5
  10924  80d9				  -	      sleep	4	; this was over 1 cycle
  10925  80d9				  -	      else
  10926  80d9				  -	      ldx	playfieldpos
  10927  80d9				  -			;sleep 4
  10928  80d9				  -	      sleep	3	; this was over 1 cycle
  10929  80d9				  -	      endif
  10930  80d9				  -
  10931  80d9				  -	      cpx	#0
  10932  80d9				  -	      bne	.enterfromNBL
  10933  80d9				  -	      jmp	no_blank_lines_bailout
  10934  80d9					      endif
  10935  80d9
  10936  80d9					      if	((<*)>$d5)
  10937  8100		       00 00 00 00*	      align	256
  10938  8100					      endif
  10939  8100							; this is a kludge to prevent page wrapping - fix!!!
  10940  8100
  10941  8100				   .skipDrawlastP1
  10942  8100		       a9 00		      lda	#0
  10943  8102		       a8		      tay		; added so we don't cross a page
  10944  8103		       4c 2d f1 	      jmp	.continuelastP1
  10945  8106
  10946  8106				   .endkerloop		; enter at cycle 59??
  10947  8106
  10948  8106		       ea		      nop
  10949  8107
  10950  8107				   .enterfromNBL
  10951  8107				  -	      ifconst	pfres
  10952  8107				  -	      ldy.w	playfield+pfres*pfwidth-4
  10953  8107				  -	      sty	PF1L	;3
  10954  8107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  10955  8107				  -	      sty	PF2L	;3
  10956  8107				  -	      ldy.w	playfield+pfres*pfwidth-1
  10957  8107				  -	      sty	PF1R	; possibly too early?
  10958  8107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  10959  8107				  -	      sty	PF2R	;3
  10960  8107					      else
  10961  8107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  10962  810a		       84 0e		      sty	PF1L	;3
  10963  810c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  10964  810f		       84 0f		      sty	PF2L	;3
  10965  8111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  10966  8114		       84 0e		      sty	PF1R	; possibly too early?
  10967  8116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  10968  8119		       84 0f		      sty	PF2R	;3
  10969  811b					      endif
  10970  811b
  10971  811b				   enterlastkernel
  10972  811b		       a5 92		      lda	ballheight
  10973  811d
  10974  811d							; tya
  10975  811d		       c7 89		      dcp	bally
  10976  811f							; sleep 4
  10977  811f
  10978  811f							; sbc stack3
  10979  811f		       2a		      rol
  10980  8120		       2a		      rol
  10981  8121		       85 1f		      sta	ENABL
  10982  8123
  10983  8123		       a5 8f		      lda	player1height	;3
  10984  8125		       c7 86		      dcp	player1y	;5
  10985  8127		       90 d7		      bcc	.skipDrawlastP1
  10986  8129		       a4 86		      ldy	player1y	;3
  10987  812b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  10988  812d							; so it doesn't cross a page boundary!
  10989  812d
  10990  812d				   .continuelastP1
  10991  812d		       85 1c		      sta	GRP1	;3
  10992  812f
  10993  812f				  -	      ifnconst	player1colors
  10994  812f				  -	      lda	missile1height	;3
  10995  812f				  -	      dcp	missile1y	;5
  10996  812f					      else
  10997  812f		       b1 87		      lda	(player1color),y
  10998  8131		       85 07		      sta	COLUP1
  10999  8133					      endif
  11000  8133
  11001  8133		       ca		      dex
  11002  8134							;dec temp4 ; might try putting this above PF writes
  11003  8134		       f0 37		      beq	endkernel
  11004  8136
  11005  8136
  11006  8136				  -	      ifconst	pfres
  11007  8136				  -	      ldy.w	playfield+pfres*pfwidth-4
  11008  8136				  -	      sty	PF1L	;3
  11009  8136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  11010  8136				  -	      sty	PF2L	;3
  11011  8136				  -	      ldy.w	playfield+pfres*pfwidth-1
  11012  8136				  -	      sty	PF1R	; possibly too early?
  11013  8136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  11014  8136				  -	      sty	PF2R	;3
  11015  8136					      else
  11016  8136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  11017  8139		       84 0e		      sty	PF1L	;3
  11018  813b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  11019  813e		       84 0f		      sty	PF2L	;3
  11020  8140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  11021  8143		       84 0e		      sty	PF1R	; possibly too early?
  11022  8145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  11023  8148		       84 0f		      sty	PF2R	;3
  11024  814a					      endif
  11025  814a
  11026  814a				  -	      ifnconst	player1colors
  11027  814a				  -	      rol		;2
  11028  814a				  -	      rol		;2
  11029  814a				  -	      sta	ENAM1	;3
  11030  814a					      else
  11031  814a				  -	      ifnconst	playercolors
  11032  814a				  -	      sleep	7
  11033  814a					      else
  11034  814a		       ad 82 00 	      lda.w	player0colorstore
  11035  814d		       85 06		      sta	COLUP0
  11036  814f					      endif
  11037  814f					      endif
  11038  814f
  11039  814f		       ad 8e 00 	      lda.w	player0height
  11040  8152		       c7 85		      dcp	player0y
  11041  8154		       90 11		      bcc	.skipDrawlastP0
  11042  8156		       a4 85		      ldy	player0y
  11043  8158		       b1 8a		      lda	(player0pointer),y
  11044  815a				   .continuelastP0
  11045  815a		       85 1b		      sta	GRP0
  11046  815c
  11047  815c
  11048  815c
  11049  815c					      ifnconst	no_blank_lines
  11050  815c		       a5 90		      lda	missile0height	;3
  11051  815e		       c7 91		      dcp	missile0y	;5
  11052  8160		       e5 f6		      sbc	stack1
  11053  8162		       85 1d		      sta	ENAM0	;3
  11054  8164		       4c 06 f1 	      jmp	.endkerloop
  11055  8167				  -	      else
  11056  8167				  -	      ifconst	readpaddle
  11057  8167				  -	      ldy	currentpaddle
  11058  8167				  -	      lda	INPT0,y
  11059  8167				  -	      bpl	noreadpaddle2
  11060  8167				  -	      inc	paddle
  11061  8167				  -	      jmp	.endkerloop
  11062  8167				  -noreadpaddle2
  11063  8167				  -	      sleep	4
  11064  8167				  -	      jmp	.endkerloop
  11065  8167				  -	      else		; no_blank_lines and no paddle reading
  11066  8167				  -	      pla
  11067  8167				  -	      pha		; 14 cycles in 4 bytes
  11068  8167				  -	      pla
  11069  8167				  -	      pha
  11070  8167				  -			; sleep 14
  11071  8167				  -	      jmp	.endkerloop
  11072  8167				  -	      endif
  11073  8167					      endif
  11074  8167
  11075  8167
  11076  8167							; ifconst donepaddleskip
  11077  8167							;paddleskipread
  11078  8167							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
  11079  8167							; plus we get a lo-res paddle read
  11080  8167							; bmi donepaddleskip
  11081  8167							; endif
  11082  8167
  11083  8167				   .skipDrawlastP0
  11084  8167		       a9 00		      lda	#0
  11085  8169		       a8		      tay
  11086  816a		       4c 5a f1 	      jmp	.continuelastP0
  11087  816d
  11088  816d				  -	      ifconst	no_blank_lines
  11089  816d				  -no_blank_lines_bailout
  11090  816d				  -	      ldx	#0
  11091  816d					      endif
  11092  816d
  11093  816d				   endkernel
  11094  816d							; 6 digit score routine
  11095  816d		       86 0e		      stx	PF1
  11096  816f		       86 0f		      stx	PF2
  11097  8171		       86 0d		      stx	PF0
  11098  8173		       18		      clc
  11099  8174
  11100  8174				  -	      ifconst	pfrowheight
  11101  8174				  -	      lda	#pfrowheight+2
  11102  8174					      else
  11103  8174					      ifnconst	pfres
  11104  8174		       a9 0a		      lda	#10
  11105  8176				  -	      else
  11106  8176				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  11107  8176					      endif
  11108  8176					      endif
  11109  8176
  11110  8176		       e5 ef		      sbc	playfieldpos
  11111  8178		       85 ef		      sta	playfieldpos
  11112  817a		       8a		      txa
  11113  817b
  11114  817b				  -	      ifconst	shakescreen
  11115  817b				  -	      bit	shakescreen
  11116  817b				  -	      bmi	noshakescreen2
  11117  817b				  -	      ldx	#$3D
  11118  817b				  -noshakescreen2
  11119  817b					      endif
  11120  817b
  11121  817b		       95 02		      sta	WSYNC,x
  11122  817d
  11123  817d							; STA WSYNC ;first one, need one more
  11124  817d		       85 0b		      sta	REFP0
  11125  817f		       85 0c		      sta	REFP1
  11126  8181		       85 1b		      STA	GRP0
  11127  8183		       85 1c		      STA	GRP1
  11128  8185							; STA PF1
  11129  8185							; STA PF2
  11130  8185		       85 2b		      sta	HMCLR
  11131  8187		       85 1d		      sta	ENAM0
  11132  8189		       85 1e		      sta	ENAM1
  11133  818b		       85 1f		      sta	ENABL
  11134  818d
  11135  818d		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
  11136  818f		       85 85		      sta	player0y
  11137  8191		       a5 9e		      lda	temp3
  11138  8193		       85 86		      sta	player1y
  11139  8195				  -	      ifnconst	player1colors
  11140  8195				  -	      lda	temp6
  11141  8195				  -	      sta	missile1y
  11142  8195					      endif
  11143  8195				  -	      ifnconst	playercolors
  11144  8195				  -	      ifnconst	readpaddle
  11145  8195				  -	      lda	temp5
  11146  8195				  -	      sta	missile0y
  11147  8195				  -	      endif
  11148  8195					      endif
  11149  8195		       a5 f7		      lda	stack2
  11150  8197		       85 89		      sta	bally
  11151  8199
  11152  8199							; strangely, this isn't required any more. might have
  11153  8199							; resulted from the no_blank_lines score bounce fix
  11154  8199							;ifconst no_blank_lines
  11155  8199							;sta WSYNC
  11156  8199							;endif
  11157  8199
  11158  8199		       ad 84 02 	      lda	INTIM
  11159  819c		       18		      clc
  11160  819d				  -	      ifnconst	vblank_time
  11161  819d				  -	      adc	#43+12+87
  11162  819d					      else
  11163  819d		       69 8e		      adc	#vblank_time+12+87
  11164  819f
  11165  819f					      endif
  11166  819f							; sta WSYNC
  11167  819f		       8d 96 02 	      sta	TIM64T
  11168  81a2
  11169  81a2				  -	      ifconst	minikernel
  11170  81a2				  -	      jsr	minikernel
  11171  81a2					      endif
  11172  81a2
  11173  81a2							; now reassign temp vars for score pointers
  11174  81a2
  11175  81a2							; score pointers contain:
  11176  81a2							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
  11177  81a2							; swap lo2->temp1
  11178  81a2							; swap lo4->temp3
  11179  81a2							; swap lo6->temp5
  11180  81a2					      ifnconst	noscore
  11181  81a2		       a5 97		      lda	scorepointers+1
  11182  81a4							; ldy temp1
  11183  81a4		       85 9c		      sta	temp1
  11184  81a6							; sty scorepointers+1
  11185  81a6
  11186  81a6		       a5 99		      lda	scorepointers+3
  11187  81a8							; ldy temp3
  11188  81a8		       85 9e		      sta	temp3
  11189  81aa							; sty scorepointers+3
  11190  81aa
  11191  81aa
  11192  81aa		       85 2b		      sta	HMCLR
  11193  81ac		       ba		      tsx
  11194  81ad		       86 f6		      stx	stack1
  11195  81af		       a2 e0		      ldx	#$E0
  11196  81b1		       86 20		      stx	HMP0
  11197  81b3
  11198  81b3		       a5 a3		      LDA	scorecolor
  11199  81b5		       85 06		      STA	COLUP0
  11200  81b7		       85 07		      STA	COLUP1
  11201  81b9				  -	      ifconst	scorefade
  11202  81b9				  -	      STA	stack2
  11203  81b9					      endif
  11204  81b9					      ifconst	pfscore
  11205  81b9		       a5 f4		      lda	pfscorecolor
  11206  81bb		       85 08		      sta	COLUPF
  11207  81bd					      endif
  11208  81bd		       85 02		      sta	WSYNC
  11209  81bf		       a2 00		      ldx	#0
  11210  81c1		       86 1b		      STx	GRP0
  11211  81c3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
  11212  81c5
  11213  81c5		       a5 9b		      lda	scorepointers+5
  11214  81c7							; ldy temp5
  11215  81c7		       95 a0		      sta	temp5,x
  11216  81c9							; sty scorepointers+5
  11217  81c9		       a9 ff		      lda	#>scoretable
  11218  81cb		       85 97		      sta	scorepointers+1
  11219  81cd		       85 99		      sta	scorepointers+3
  11220  81cf		       85 9b		      sta	scorepointers+5
  11221  81d1		       85 9d		      sta	temp2
  11222  81d3		       85 9f		      sta	temp4
  11223  81d5		       85 a1		      sta	temp6
  11224  81d7		       a0 07		      LDY	#7
  11225  81d9		       84 25		      STY	VDELP0
  11226  81db		       85 10		      STA	RESP0
  11227  81dd		       85 11		      STA	RESP1
  11228  81df
  11229  81df
  11230  81df		       a9 03		      LDA	#$03
  11231  81e1		       85 04		      STA	NUSIZ0
  11232  81e3		       85 05		      STA	NUSIZ1
  11233  81e5		       85 26		      STA	VDELP1
  11234  81e7		       a9 f0		      LDA	#$F0
  11235  81e9		       85 21		      STA	HMP1
  11236  81eb		       b1 96		      lda	(scorepointers),y
  11237  81ed		       85 1b		      sta	GRP0
  11238  81ef		       85 2a		      STA	HMOVE	; cycle 73 ?
  11239  81f1		       4c 09 f2 	      jmp	beginscore
  11240  81f4
  11241  81f4
  11242  81f4					      if	((<*)>$d4)
  11243  8200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
  11244  8200					      endif
  11245  8200
  11246  8200				   loop2
  11247  8200		       b1 96		      lda	(scorepointers),y	;+5 68 204
  11248  8202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
  11249  8204					      ifconst	pfscore
  11250  8204		       ad f2 00 	      lda.w	pfscore1
  11251  8207		       85 0e		      sta	PF1
  11252  8209				  -	      else
  11253  8209				  -	      ifconst	scorefade
  11254  8209				  -	      sleep	2
  11255  8209				  -	      dec	stack2	; decrement the temporary scorecolor
  11256  8209				  -	      else
  11257  8209				  -	      sleep	7
  11258  8209				  -	      endif
  11259  8209					      endif
  11260  8209							; cycle 0
  11261  8209				   beginscore
  11262  8209		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
  11263  820b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
  11264  820d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
  11265  820f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
  11266  8211		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
  11267  8213		       9a		      txs
  11268  8214		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
  11269  8216				  -	      ifconst	scorefade
  11270  8216				  -	      lda	stack2
  11271  8216					      else
      0  8216					      sleep	3
      1  8216				   .CYCLES    SET	3
      2  8216
      3  8216				  -	      IF	.CYCLES < 2
      4  8216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8216				  -	      ERR
      6  8216					      ENDIF
      7  8216
      8  8216					      IF	.CYCLES & 1
      9  8216					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8216		       04 00		      nop	0
     11  8218				  -	      ELSE
     12  8218				  -	      bit	VSYNC
     13  8218					      ENDIF
     14  8218				   .CYCLES    SET	.CYCLES - 3
     15  8218					      ENDIF
     16  8218
     17  8218				  -	      REPEAT	.CYCLES / 2
     18  8218				  -	      nop
     19  8218					      REPEND
  11273  8218					      endif
  11274  8218
  11275  8218					      ifconst	pfscore
  11276  8218		       a5 f3		      lda	pfscore2
  11277  821a		       85 0e		      sta	PF1
  11278  821c				  -	      else
  11279  821c				  -	      ifconst	scorefade
  11280  821c				  -	      sta	COLUP0
  11281  821c				  -	      sta	COLUP1
  11282  821c				  -	      else
  11283  821c				  -	      sleep	6
  11284  821c				  -	      endif
  11285  821c					      endif
  11286  821c
  11287  821c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
  11288  821e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
  11289  8220		       ba		      tsx
  11290  8221		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
  11291  8223		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
  11292  8225		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
  11293  8227		       88		      dey
  11294  8228		       10 d6		      bpl	loop2	;+2 60 180
  11295  822a
  11296  822a		       a6 f6		      ldx	stack1
  11297  822c		       9a		      txs
  11298  822d							; lda scorepointers+1
  11299  822d		       a4 9c		      ldy	temp1
  11300  822f							; sta temp1
  11301  822f		       84 97		      sty	scorepointers+1
  11302  8231
  11303  8231		       a9 00		      LDA	#0
  11304  8233		       85 0e		      sta	PF1
  11305  8235		       85 1b		      STA	GRP0
  11306  8237		       85 1c		      STA	GRP1
  11307  8239		       85 25		      STA	VDELP0
  11308  823b		       85 26		      STA	VDELP1	;do we need these
  11309  823d		       85 04		      STA	NUSIZ0
  11310  823f		       85 05		      STA	NUSIZ1
  11311  8241
  11312  8241							; lda scorepointers+3
  11313  8241		       a4 9e		      ldy	temp3
  11314  8243							; sta temp3
  11315  8243		       84 99		      sty	scorepointers+3
  11316  8245
  11317  8245							; lda scorepointers+5
  11318  8245		       a4 a0		      ldy	temp5
  11319  8247							; sta temp5
  11320  8247		       84 9b		      sty	scorepointers+5
  11321  8249					      endif		;noscore
  11322  8249				  -	      ifconst	readpaddle
  11323  8249				  -	      lda	#%11000010
  11324  8249					      else
  11325  8249				  -	      ifconst	qtcontroller
  11326  8249				  -	      lda	qtcontroller
  11327  8249				  -	      lsr		; bit 0 in carry
  11328  8249				  -	      lda	#4
  11329  8249				  -	      ror		; carry into top of A
  11330  8249					      else
  11331  8249		       a9 02		      lda	#2
  11332  824b					      endif		; qtcontroller
  11333  824b					      endif		; readpaddle
  11334  824b		       85 02		      sta	WSYNC
  11335  824d		       85 01		      sta	VBLANK
      0  824f					      RETURN
      1  824f				  -	      ifnconst	bankswitch
      2  824f				  -	      rts
      3  824f					      else
      4  824f		       4c dd ff 	      jmp	BS_return
      5  8252					      endif
  11337  8252				  -	      ifconst	shakescreen
  11338  8252				  -doshakescreen
  11339  8252				  -	      bit	shakescreen
  11340  8252				  -	      bmi	noshakescreen
  11341  8252				  -	      sta	WSYNC
  11342  8252				  -noshakescreen
  11343  8252				  -	      ldx	missile0height
  11344  8252				  -	      inx
  11345  8252				  -	      rts
  11346  8252					      endif
  11347  8252
  11348  8252							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11349  8252
  11350  8252				   start
  11351  8252		       78		      sei
  11352  8253		       d8		      cld
  11353  8254		       a0 00		      ldy	#0
  11354  8256		       a5 d0		      lda	$D0
  11355  8258		       c9 2c		      cmp	#$2C	;check RAM location #1
  11356  825a		       d0 07		      bne	MachineIs2600
  11357  825c		       a5 d1		      lda	$D1
  11358  825e		       c9 a9		      cmp	#$A9	;check RAM location #2
  11359  8260		       d0 01		      bne	MachineIs2600
  11360  8262		       88		      dey
  11361  8263				   MachineIs2600
  11362  8263		       a2 00		      ldx	#0
  11363  8265		       8a		      txa
  11364  8266				   clearmem
  11365  8266		       e8		      inx
  11366  8267		       9a		      txs
  11367  8268		       48		      pha
  11368  8269		       d0 fb		      bne	clearmem
  11369  826b		       84 9c		      sty	temp1
  11370  826d					      ifnconst	multisprite
  11371  826d				  -	      ifconst	pfrowheight
  11372  826d				  -	      lda	#pfrowheight
  11373  826d					      else
  11374  826d				  -	      ifconst	pfres
  11375  826d				  -	      lda	#(96/pfres)
  11376  826d					      else
  11377  826d		       a9 08		      lda	#8
  11378  826f					      endif
  11379  826f					      endif
  11380  826f		       85 ef		      sta	playfieldpos
  11381  8271					      endif
  11382  8271		       a2 05		      ldx	#5
  11383  8273				   initscore
  11384  8273		       a9 74		      lda	#<scoretable
  11385  8275		       95 96		      sta	scorepointers,x
  11386  8277		       ca		      dex
  11387  8278		       10 f9		      bpl	initscore
  11388  827a		       a9 01		      lda	#1
  11389  827c		       85 0a		      sta	CTRLPF
  11390  827e		       0d 84 02 	      ora	INTIM
  11391  8281		       85 a2		      sta	rand
  11392  8283
  11393  8283				  -	      ifconst	multisprite
  11394  8283				  -	      jsr	multisprite_setup
  11395  8283					      endif
  11396  8283
  11397  8283				  -	      ifnconst	bankswitch
  11398  8283				  -	      jmp	game
  11399  8283					      else
  11400  8283		       a9 0f		      lda	#>(game-1)
  11401  8285		       48		      pha
  11402  8286		       a9 ff		      lda	#<(game-1)
  11403  8288		       48		      pha
  11404  8289		       48		      pha
  11405  828a		       48		      pha
  11406  828b		       a2 01		      ldx	#1
  11407  828d		       4c eb ff 	      jmp	BS_jsr
  11408  8290					      endif
  11409  8290							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11410  8290
  11411  8290							; playfield drawing routines
  11412  8290							; you get a 32x12 bitmapped display in a single color :)
  11413  8290							; 0-31 and 0-11
  11414  8290
  11415  8290				   pfclear		; clears playfield - or fill with pattern
  11416  8290				  -	      ifconst	pfres
  11417  8290				  -	      ldx	#pfres*pfwidth-1
  11418  8290					      else
  11419  8290		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
  11420  8292					      endif
  11421  8292				   pfclear_loop
  11422  8292					      ifnconst	superchip
  11423  8292		       95 a4		      sta	playfield,x
  11424  8294				  -	      else
  11425  8294				  -	      sta	playfield-128,x
  11426  8294					      endif
  11427  8294		       ca		      dex
  11428  8295		       10 fb		      bpl	pfclear_loop
      0  8297					      RETURN
      1  8297				  -	      ifnconst	bankswitch
      2  8297				  -	      rts
      3  8297					      else
      4  8297		       4c dd ff 	      jmp	BS_return
      5  829a					      endif
  11430  829a
  11431  829a				   setuppointers
  11432  829a		       86 9d		      stx	temp2	; store on.off.flip value
  11433  829c		       aa		      tax		; put x-value in x 
  11434  829d		       4a		      lsr
  11435  829e		       4a		      lsr
  11436  829f		       4a		      lsr		; divide x pos by 8 
  11437  82a0		       85 9c		      sta	temp1
  11438  82a2		       98		      tya
  11439  82a3		       0a		      asl
  11440  82a4					      if	pfwidth=4
  11441  82a4		       0a		      asl		; multiply y pos by 4
  11442  82a5					      endif		; else multiply by 2
  11443  82a5		       18		      clc
  11444  82a6		       65 9c		      adc	temp1	; add them together to get actual memory location offset
  11445  82a8		       a8		      tay		; put the value in y
  11446  82a9		       a5 9d		      lda	temp2	; restore on.off.flip value
  11447  82ab		       60		      rts
  11448  82ac
  11449  82ac				   pfread
  11450  82ac							;x=xvalue, y=yvalue
  11451  82ac		       20 9a f2 	      jsr	setuppointers
  11452  82af		       bd 44 f3 	      lda	setbyte,x
  11453  82b2		       39 a4 00 	      and	playfield,y
  11454  82b5		       5d 44 f3 	      eor	setbyte,x
  11455  82b8							; beq readzero
  11456  82b8							; lda #1
  11457  82b8							; readzero
      0  82b8					      RETURN
      1  82b8				  -	      ifnconst	bankswitch
      2  82b8				  -	      rts
      3  82b8					      else
      4  82b8		       4c dd ff 	      jmp	BS_return
      5  82bb					      endif
  11459  82bb
  11460  82bb				   pfpixel
  11461  82bb							;x=xvalue, y=yvalue, a=0,1,2
  11462  82bb		       20 9a f2 	      jsr	setuppointers
  11463  82be
  11464  82be					      ifconst	bankswitch
  11465  82be		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  11466  82c0		       f0 0f		      beq	pixelon_r	; if "on" go to on
  11467  82c2		       4a		      lsr
  11468  82c3		       b0 18		      bcs	pixeloff_r	; value is 1 if true
  11469  82c5		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  11470  82c8		       5d 44 f3 	      eor	setbyte,x
  11471  82cb				  -	      ifconst	superchip
  11472  82cb				  -	      sta	playfield-128,y
  11473  82cb					      else
  11474  82cb		       99 a4 00 	      sta	playfield,y
  11475  82ce					      endif
      0  82ce					      RETURN
      1  82ce				  -	      ifnconst	bankswitch
      2  82ce				  -	      rts
      3  82ce					      else
      4  82ce		       4c dd ff 	      jmp	BS_return
      5  82d1					      endif
  11477  82d1				   pixelon_r
  11478  82d1		       b9 a4 00 	      lda	playfield,y
  11479  82d4		       1d 44 f3 	      ora	setbyte,x
  11480  82d7				  -	      ifconst	superchip
  11481  82d7				  -	      sta	playfield-128,y
  11482  82d7					      else
  11483  82d7		       99 a4 00 	      sta	playfield,y
  11484  82da					      endif
      0  82da					      RETURN
      1  82da				  -	      ifnconst	bankswitch
      2  82da				  -	      rts
      3  82da					      else
      4  82da		       4c dd ff 	      jmp	BS_return
      5  82dd					      endif
  11486  82dd				   pixeloff_r
  11487  82dd		       bd 44 f3 	      lda	setbyte,x
  11488  82e0		       49 ff		      eor	#$ff
  11489  82e2		       39 a4 00 	      and	playfield,y
  11490  82e5				  -	      ifconst	superchip
  11491  82e5				  -	      sta	playfield-128,y
  11492  82e5					      else
  11493  82e5		       99 a4 00 	      sta	playfield,y
  11494  82e8					      endif
      0  82e8					      RETURN
      1  82e8				  -	      ifnconst	bankswitch
      2  82e8				  -	      rts
      3  82e8					      else
      4  82e8		       4c dd ff 	      jmp	BS_return
      5  82eb					      endif
  11496  82eb
  11497  82eb				  -	      else
  11498  82eb				  -	      jmp	plotpoint
  11499  82eb					      endif
  11500  82eb
  11501  82eb				   pfhline
  11502  82eb							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  11503  82eb		       20 9a f2 	      jsr	setuppointers
  11504  82ee		       4c f8 f2 	      jmp	noinc
  11505  82f1				   keepgoing
  11506  82f1		       e8		      inx
  11507  82f2		       8a		      txa
  11508  82f3		       29 07		      and	#7
  11509  82f5		       d0 01		      bne	noinc
  11510  82f7		       c8		      iny
  11511  82f8				   noinc
  11512  82f8		       20 1d f3 	      jsr	plotpoint
  11513  82fb		       e4 9e		      cpx	temp3
  11514  82fd		       30 f2		      bmi	keepgoing
      0  82ff					      RETURN
      1  82ff				  -	      ifnconst	bankswitch
      2  82ff				  -	      rts
      3  82ff					      else
      4  82ff		       4c dd ff 	      jmp	BS_return
      5  8302					      endif
  11516  8302
  11517  8302				   pfvline
  11518  8302							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  11519  8302		       20 9a f2 	      jsr	setuppointers
  11520  8305		       84 9c		      sty	temp1	; store memory location offset
  11521  8307		       e6 9e		      inc	temp3	; increase final x by 1 
  11522  8309		       a5 9e		      lda	temp3
  11523  830b		       0a		      asl
  11524  830c					      if	pfwidth=4
  11525  830c		       0a		      asl		; multiply by 4
  11526  830d					      endif		; else multiply by 2
  11527  830d		       85 9e		      sta	temp3	; store it
  11528  830f							; Thanks to Michael Rideout for fixing a bug in this code
  11529  830f							; right now, temp1=y=starting memory location, temp3=final
  11530  830f							; x should equal original x value
  11531  830f				   keepgoingy
  11532  830f		       20 1d f3 	      jsr	plotpoint
  11533  8312		       c8		      iny
  11534  8313		       c8		      iny
  11535  8314					      if	pfwidth=4
  11536  8314		       c8		      iny
  11537  8315		       c8		      iny
  11538  8316					      endif
  11539  8316		       c4 9e		      cpy	temp3
  11540  8318		       30 f5		      bmi	keepgoingy
      0  831a					      RETURN
      1  831a				  -	      ifnconst	bankswitch
      2  831a				  -	      rts
      3  831a					      else
      4  831a		       4c dd ff 	      jmp	BS_return
      5  831d					      endif
  11542  831d
  11543  831d				   plotpoint
  11544  831d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  11545  831f		       f0 0d		      beq	pixelon	; if "on" go to on
  11546  8321		       4a		      lsr
  11547  8322		       b0 14		      bcs	pixeloff	; value is 1 if true
  11548  8324		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  11549  8327		       5d 44 f3 	      eor	setbyte,x
  11550  832a				  -	      ifconst	superchip
  11551  832a				  -	      sta	playfield-128,y
  11552  832a					      else
  11553  832a		       99 a4 00 	      sta	playfield,y
  11554  832d					      endif
  11555  832d		       60		      rts
  11556  832e				   pixelon
  11557  832e		       b9 a4 00 	      lda	playfield,y
  11558  8331		       1d 44 f3 	      ora	setbyte,x
  11559  8334				  -	      ifconst	superchip
  11560  8334				  -	      sta	playfield-128,y
  11561  8334					      else
  11562  8334		       99 a4 00 	      sta	playfield,y
  11563  8337					      endif
  11564  8337		       60		      rts
  11565  8338				   pixeloff
  11566  8338		       bd 44 f3 	      lda	setbyte,x
  11567  833b		       49 ff		      eor	#$ff
  11568  833d		       39 a4 00 	      and	playfield,y
  11569  8340				  -	      ifconst	superchip
  11570  8340				  -	      sta	playfield-128,y
  11571  8340					      else
  11572  8340		       99 a4 00 	      sta	playfield,y
  11573  8343					      endif
  11574  8343		       60		      rts
  11575  8344
  11576  8344				   setbyte
  11577  8344					      ifnconst	pfcenter
  11578  8344		       80		      .byte.b	$80
  11579  8345		       40		      .byte.b	$40
  11580  8346		       20		      .byte.b	$20
  11581  8347		       10		      .byte.b	$10
  11582  8348		       08		      .byte.b	$08
  11583  8349		       04		      .byte.b	$04
  11584  834a		       02		      .byte.b	$02
  11585  834b		       01		      .byte.b	$01
  11586  834c					      endif
  11587  834c		       01		      .byte.b	$01
  11588  834d		       02		      .byte.b	$02
  11589  834e		       04		      .byte.b	$04
  11590  834f		       08		      .byte.b	$08
  11591  8350		       10		      .byte.b	$10
  11592  8351		       20		      .byte.b	$20
  11593  8352		       40		      .byte.b	$40
  11594  8353		       80		      .byte.b	$80
  11595  8354		       80		      .byte.b	$80
  11596  8355		       40		      .byte.b	$40
  11597  8356		       20		      .byte.b	$20
  11598  8357		       10		      .byte.b	$10
  11599  8358		       08		      .byte.b	$08
  11600  8359		       04		      .byte.b	$04
  11601  835a		       02		      .byte.b	$02
  11602  835b		       01		      .byte.b	$01
  11603  835c		       01		      .byte.b	$01
  11604  835d		       02		      .byte.b	$02
  11605  835e		       04		      .byte.b	$04
  11606  835f		       08		      .byte.b	$08
  11607  8360		       10		      .byte.b	$10
  11608  8361		       20		      .byte.b	$20
  11609  8362		       40		      .byte.b	$40
  11610  8363		       80		      .byte.b	$80
  11611  8364							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11612  8364
  11613  8364				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
  11614  8364		       d0 15		      bne	notleft
  11615  8366							;left
  11616  8366				  -	      ifconst	pfres
  11617  8366				  -	      ldx	#pfres*4
  11618  8366					      else
  11619  8366		       a2 30		      ldx	#48
  11620  8368					      endif
  11621  8368				   leftloop
  11622  8368		       b5 a3		      lda	playfield-1,x
  11623  836a		       4a		      lsr
  11624  836b
  11625  836b				  -	      ifconst	superchip
  11626  836b				  -	      lda	playfield-2,x
  11627  836b				  -	      rol
  11628  836b				  -	      sta	playfield-130,x
  11629  836b				  -	      lda	playfield-3,x
  11630  836b				  -	      ror
  11631  836b				  -	      sta	playfield-131,x
  11632  836b				  -	      lda	playfield-4,x
  11633  836b				  -	      rol
  11634  836b				  -	      sta	playfield-132,x
  11635  836b				  -	      lda	playfield-1,x
  11636  836b				  -	      ror
  11637  836b				  -	      sta	playfield-129,x
  11638  836b					      else
  11639  836b		       36 a2		      rol	playfield-2,x
  11640  836d		       76 a1		      ror	playfield-3,x
  11641  836f		       36 a0		      rol	playfield-4,x
  11642  8371		       76 a3		      ror	playfield-1,x
  11643  8373					      endif
  11644  8373
  11645  8373		       8a		      txa
  11646  8374		       cb 04		      sbx	#4
  11647  8376		       d0 f0		      bne	leftloop
      0  8378					      RETURN
      1  8378				  -	      ifnconst	bankswitch
      2  8378				  -	      rts
      3  8378					      else
      4  8378		       4c dd ff 	      jmp	BS_return
      5  837b					      endif
  11649  837b
  11650  837b				   notleft
  11651  837b		       4a		      lsr
  11652  837c		       90 15		      bcc	notright
  11653  837e							;right
  11654  837e
  11655  837e				  -	      ifconst	pfres
  11656  837e				  -	      ldx	#pfres*4
  11657  837e					      else
  11658  837e		       a2 30		      ldx	#48
  11659  8380					      endif
  11660  8380				   rightloop
  11661  8380		       b5 a0		      lda	playfield-4,x
  11662  8382		       4a		      lsr
  11663  8383				  -	      ifconst	superchip
  11664  8383				  -	      lda	playfield-3,x
  11665  8383				  -	      rol
  11666  8383				  -	      sta	playfield-131,x
  11667  8383				  -	      lda	playfield-2,x
  11668  8383				  -	      ror
  11669  8383				  -	      sta	playfield-130,x
  11670  8383				  -	      lda	playfield-1,x
  11671  8383				  -	      rol
  11672  8383				  -	      sta	playfield-129,x
  11673  8383				  -	      lda	playfield-4,x
  11674  8383				  -	      ror
  11675  8383				  -	      sta	playfield-132,x
  11676  8383					      else
  11677  8383		       36 a1		      rol	playfield-3,x
  11678  8385		       76 a2		      ror	playfield-2,x
  11679  8387		       36 a3		      rol	playfield-1,x
  11680  8389		       76 a0		      ror	playfield-4,x
  11681  838b					      endif
  11682  838b		       8a		      txa
  11683  838c		       cb 04		      sbx	#4
  11684  838e		       d0 f0		      bne	rightloop
      0  8390					      RETURN
      1  8390				  -	      ifnconst	bankswitch
      2  8390				  -	      rts
      3  8390					      else
      4  8390		       4c dd ff 	      jmp	BS_return
      5  8393					      endif
  11686  8393
  11687  8393				   notright
  11688  8393		       4a		      lsr
  11689  8394		       90 4b		      bcc	notup
  11690  8396							;up
  11691  8396		       4a		      lsr
  11692  8397		       90 02		      bcc	onedecup
  11693  8399		       c6 ef		      dec	playfieldpos
  11694  839b				   onedecup
  11695  839b		       c6 ef		      dec	playfieldpos
  11696  839d		       f0 02		      beq	shiftdown
  11697  839f		       10 3d		      bpl	noshiftdown2
  11698  83a1				   shiftdown
  11699  83a1				  -	      ifconst	pfrowheight
  11700  83a1				  -	      lda	#pfrowheight
  11701  83a1					      else
  11702  83a1					      ifnconst	pfres
  11703  83a1		       a9 08		      lda	#8
  11704  83a3				  -	      else
  11705  83a3				  -	      lda	#(96/pfres)	; try to come close to the real size
  11706  83a3					      endif
  11707  83a3					      endif
  11708  83a3
  11709  83a3		       85 ef		      sta	playfieldpos
  11710  83a5		       a5 a7		      lda	playfield+3
  11711  83a7		       85 9f		      sta	temp4
  11712  83a9		       a5 a6		      lda	playfield+2
  11713  83ab		       85 9e		      sta	temp3
  11714  83ad		       a5 a5		      lda	playfield+1
  11715  83af		       85 9d		      sta	temp2
  11716  83b1		       a5 a4		      lda	playfield
  11717  83b3		       85 9c		      sta	temp1
  11718  83b5		       a2 00		      ldx	#0
  11719  83b7				   up2
  11720  83b7		       b5 a8		      lda	playfield+4,x
  11721  83b9				  -	      ifconst	superchip
  11722  83b9				  -	      sta	playfield-128,x
  11723  83b9				  -	      lda	playfield+5,x
  11724  83b9				  -	      sta	playfield-127,x
  11725  83b9				  -	      lda	playfield+6,x
  11726  83b9				  -	      sta	playfield-126,x
  11727  83b9				  -	      lda	playfield+7,x
  11728  83b9				  -	      sta	playfield-125,x
  11729  83b9					      else
  11730  83b9		       95 a4		      sta	playfield,x
  11731  83bb		       b5 a9		      lda	playfield+5,x
  11732  83bd		       95 a5		      sta	playfield+1,x
  11733  83bf		       b5 aa		      lda	playfield+6,x
  11734  83c1		       95 a6		      sta	playfield+2,x
  11735  83c3		       b5 ab		      lda	playfield+7,x
  11736  83c5		       95 a7		      sta	playfield+3,x
  11737  83c7					      endif
  11738  83c7		       8a		      txa
  11739  83c8		       cb fc		      sbx	#252
  11740  83ca				  -	      ifconst	pfres
  11741  83ca				  -	      cpx	#(pfres-1)*4
  11742  83ca					      else
  11743  83ca		       e0 2c		      cpx	#44
  11744  83cc					      endif
  11745  83cc		       d0 e9		      bne	up2
  11746  83ce
  11747  83ce		       a5 9f		      lda	temp4
  11748  83d0
  11749  83d0				  -	      ifconst	superchip
  11750  83d0				  -	      ifconst	pfres
  11751  83d0				  -	      sta	playfield+pfres*4-129
  11752  83d0				  -	      lda	temp3
  11753  83d0				  -	      sta	playfield+pfres*4-130
  11754  83d0				  -	      lda	temp2
  11755  83d0				  -	      sta	playfield+pfres*4-131
  11756  83d0				  -	      lda	temp1
  11757  83d0				  -	      sta	playfield+pfres*4-132
  11758  83d0				  -	      else
  11759  83d0				  -	      sta	playfield+47-128
  11760  83d0				  -	      lda	temp3
  11761  83d0				  -	      sta	playfield+46-128
  11762  83d0				  -	      lda	temp2
  11763  83d0				  -	      sta	playfield+45-128
  11764  83d0				  -	      lda	temp1
  11765  83d0				  -	      sta	playfield+44-128
  11766  83d0				  -	      endif
  11767  83d0					      else
  11768  83d0				  -	      ifconst	pfres
  11769  83d0				  -	      sta	playfield+pfres*4-1
  11770  83d0				  -	      lda	temp3
  11771  83d0				  -	      sta	playfield+pfres*4-2
  11772  83d0				  -	      lda	temp2
  11773  83d0				  -	      sta	playfield+pfres*4-3
  11774  83d0				  -	      lda	temp1
  11775  83d0				  -	      sta	playfield+pfres*4-4
  11776  83d0					      else
  11777  83d0		       85 d3		      sta	playfield+47
  11778  83d2		       a5 9e		      lda	temp3
  11779  83d4		       85 d2		      sta	playfield+46
  11780  83d6		       a5 9d		      lda	temp2
  11781  83d8		       85 d1		      sta	playfield+45
  11782  83da		       a5 9c		      lda	temp1
  11783  83dc		       85 d0		      sta	playfield+44
  11784  83de					      endif
  11785  83de					      endif
  11786  83de				   noshiftdown2
      0  83de					      RETURN
      1  83de				  -	      ifnconst	bankswitch
      2  83de				  -	      rts
      3  83de					      else
      4  83de		       4c dd ff 	      jmp	BS_return
      5  83e1					      endif
  11788  83e1
  11789  83e1
  11790  83e1				   notup
  11791  83e1							;down
  11792  83e1		       4a		      lsr
  11793  83e2		       b0 02		      bcs	oneincup
  11794  83e4		       e6 ef		      inc	playfieldpos
  11795  83e6				   oneincup
  11796  83e6		       e6 ef		      inc	playfieldpos
  11797  83e8		       a5 ef		      lda	playfieldpos
  11798  83ea
  11799  83ea				  -	      ifconst	pfrowheight
  11800  83ea				  -	      cmp	#pfrowheight+1
  11801  83ea					      else
  11802  83ea					      ifnconst	pfres
  11803  83ea		       c9 09		      cmp	#9
  11804  83ec				  -	      else
  11805  83ec				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
  11806  83ec					      endif
  11807  83ec					      endif
  11808  83ec
  11809  83ec		       90 3b		      bcc	noshiftdown
  11810  83ee		       a9 01		      lda	#1
  11811  83f0		       85 ef		      sta	playfieldpos
  11812  83f2
  11813  83f2				  -	      ifconst	pfres
  11814  83f2				  -	      lda	playfield+pfres*4-1
  11815  83f2				  -	      sta	temp4
  11816  83f2				  -	      lda	playfield+pfres*4-2
  11817  83f2				  -	      sta	temp3
  11818  83f2				  -	      lda	playfield+pfres*4-3
  11819  83f2				  -	      sta	temp2
  11820  83f2				  -	      lda	playfield+pfres*4-4
  11821  83f2					      else
  11822  83f2		       a5 d3		      lda	playfield+47
  11823  83f4		       85 9f		      sta	temp4
  11824  83f6		       a5 d2		      lda	playfield+46
  11825  83f8		       85 9e		      sta	temp3
  11826  83fa		       a5 d1		      lda	playfield+45
  11827  83fc		       85 9d		      sta	temp2
  11828  83fe		       a5 d0		      lda	playfield+44
  11829  8400					      endif
  11830  8400
  11831  8400		       85 9c		      sta	temp1
  11832  8402
  11833  8402				  -	      ifconst	pfres
  11834  8402				  -	      ldx	#(pfres-1)*4
  11835  8402					      else
  11836  8402		       a2 2c		      ldx	#44
  11837  8404					      endif
  11838  8404				   down2
  11839  8404		       b5 a3		      lda	playfield-1,x
  11840  8406				  -	      ifconst	superchip
  11841  8406				  -	      sta	playfield-125,x
  11842  8406				  -	      lda	playfield-2,x
  11843  8406				  -	      sta	playfield-126,x
  11844  8406				  -	      lda	playfield-3,x
  11845  8406				  -	      sta	playfield-127,x
  11846  8406				  -	      lda	playfield-4,x
  11847  8406				  -	      sta	playfield-128,x
  11848  8406					      else
  11849  8406		       95 a7		      sta	playfield+3,x
  11850  8408		       b5 a2		      lda	playfield-2,x
  11851  840a		       95 a6		      sta	playfield+2,x
  11852  840c		       b5 a1		      lda	playfield-3,x
  11853  840e		       95 a5		      sta	playfield+1,x
  11854  8410		       b5 a0		      lda	playfield-4,x
  11855  8412		       95 a4		      sta	playfield,x
  11856  8414					      endif
  11857  8414		       8a		      txa
  11858  8415		       cb 04		      sbx	#4
  11859  8417		       d0 eb		      bne	down2
  11860  8419
  11861  8419		       a5 9f		      lda	temp4
  11862  841b				  -	      ifconst	superchip
  11863  841b				  -	      sta	playfield-125
  11864  841b				  -	      lda	temp3
  11865  841b				  -	      sta	playfield-126
  11866  841b				  -	      lda	temp2
  11867  841b				  -	      sta	playfield-127
  11868  841b				  -	      lda	temp1
  11869  841b				  -	      sta	playfield-128
  11870  841b					      else
  11871  841b		       85 a7		      sta	playfield+3
  11872  841d		       a5 9e		      lda	temp3
  11873  841f		       85 a6		      sta	playfield+2
  11874  8421		       a5 9d		      lda	temp2
  11875  8423		       85 a5		      sta	playfield+1
  11876  8425		       a5 9c		      lda	temp1
  11877  8427		       85 a4		      sta	playfield
  11878  8429					      endif
  11879  8429				   noshiftdown
      0  8429					      RETURN
      1  8429				  -	      ifnconst	bankswitch
      2  8429				  -	      rts
      3  8429					      else
      4  8429		       4c dd ff 	      jmp	BS_return
      5  842c					      endif
  11881  842c							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11882  842c
  11883  842c							;standard routines needed for pretty much all games
  11884  842c							; just the random number generator is left - maybe we should remove this asm file altogether?
  11885  842c							; repositioning code and score pointer setup moved to overscan
  11886  842c							; read switches, joysticks now compiler generated (more efficient)
  11887  842c
  11888  842c				   randomize
  11889  842c		       a5 a2		      lda	rand
  11890  842e		       4a		      lsr
  11891  842f					      ifconst	rand16
  11892  842f		       26 ed		      rol	rand16
  11893  8431					      endif
  11894  8431		       90 02		      bcc	noeor
  11895  8433		       49 b4		      eor	#$B4
  11896  8435				   noeor
  11897  8435		       85 a2		      sta	rand
  11898  8437					      ifconst	rand16
  11899  8437		       45 ed		      eor	rand16
  11900  8439					      endif
      0  8439					      RETURN
      1  8439				  -	      ifnconst	bankswitch
      2  8439				  -	      rts
      3  8439					      else
      4  8439		       4c dd ff 	      jmp	BS_return
      5  843c					      endif
  11902  843c							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11903  843c
  11904  843c				   drawscreen
  11905  843c				  -	      ifconst	debugscore
  11906  843c				  -	      ldx	#14
  11907  843c				  -	      lda	INTIM	; display # cycles left in the score
  11908  843c				  -
  11909  843c				  -	      ifconst	mincycles
  11910  843c				  -	      lda	mincycles
  11911  843c				  -	      cmp	INTIM
  11912  843c				  -	      lda	mincycles
  11913  843c				  -	      bcc	nochange
  11914  843c				  -	      lda	INTIM
  11915  843c				  -	      sta	mincycles
  11916  843c				  -nochange
  11917  843c				  -	      endif
  11918  843c				  -
  11919  843c				  -			; cmp #$2B
  11920  843c				  -			; bcs no_cycles_left
  11921  843c				  -	      bmi	cycles_left
  11922  843c				  -	      ldx	#64
  11923  843c				  -	      eor	#$ff	;make negative
  11924  843c				  -cycles_left
  11925  843c				  -	      stx	scorecolor
  11926  843c				  -	      and	#$7f	; clear sign bit
  11927  843c				  -	      tax
  11928  843c				  -	      lda	scorebcd,x
  11929  843c				  -	      sta	score+2
  11930  843c				  -	      lda	scorebcd1,x
  11931  843c				  -	      sta	score+1
  11932  843c				  -	      jmp	done_debugscore
  11933  843c				  -scorebcd
  11934  843c				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
  11935  843c				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
  11936  843c				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
  11937  843c				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
  11938  843c				  -scorebcd1
  11939  843c				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
  11940  843c				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
  11941  843c				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
  11942  843c				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
  11943  843c				  -done_debugscore
  11944  843c					      endif
  11945  843c
  11946  843c				  -	      ifconst	debugcycles
  11947  843c				  -	      lda	INTIM	; if we go over, it mucks up the background color
  11948  843c				  -			; cmp #$2B
  11949  843c				  -			; BCC overscan
  11950  843c				  -	      bmi	overscan
  11951  843c				  -	      sta	COLUBK
  11952  843c				  -	      bcs	doneoverscan
  11953  843c					      endif
  11954  843c
  11955  843c				   overscan
  11956  843c				  -	      ifconst	interlaced
  11957  843c				  -	      PHP
  11958  843c				  -	      PLA
  11959  843c				  -	      EOR	#4	; flip interrupt bit
  11960  843c				  -	      PHA
  11961  843c				  -	      PLP
  11962  843c				  -	      AND	#4	; isolate the interrupt bit
  11963  843c				  -	      TAX		; save it for later
  11964  843c					      endif
  11965  843c
  11966  843c				   overscanloop
  11967  843c		       ad 84 02 	      lda	INTIM	;wait for sync
  11968  843f		       30 fb		      bmi	overscanloop
  11969  8441				   doneoverscan
  11970  8441
  11971  8441							;do VSYNC
  11972  8441
  11973  8441				  -	      ifconst	interlaced
  11974  8441				  -	      CPX	#4
  11975  8441				  -	      BNE	oddframevsync
  11976  8441					      endif
  11977  8441
  11978  8441		       a9 02		      lda	#2
  11979  8443		       85 02		      sta	WSYNC
  11980  8445		       85 00		      sta	VSYNC
  11981  8447		       85 02		      STA	WSYNC
  11982  8449		       85 02		      STA	WSYNC
  11983  844b		       4a		      lsr
  11984  844c		       85 02		      STA	WSYNC
  11985  844e		       85 00		      STA	VSYNC
  11986  8450		       85 01		      sta	VBLANK
  11987  8452				  -	      ifnconst	overscan_time
  11988  8452				  -	      lda	#37+128
  11989  8452					      else
  11990  8452		       a9 a5		      lda	#overscan_time+128
  11991  8454					      endif
  11992  8454		       8d 96 02 	      sta	TIM64T
  11993  8457
  11994  8457				  -	      ifconst	interlaced
  11995  8457				  -	      jmp	postsync
  11996  8457				  -
  11997  8457				  -oddframevsync
  11998  8457				  -	      sta	WSYNC
  11999  8457				  -
  12000  8457				  -	      LDA	($80,X)	; 11 waste
  12001  8457				  -	      LDA	($80,X)	; 11 waste
  12002  8457				  -	      LDA	($80,X)	; 11 waste
  12003  8457				  -
  12004  8457				  -	      lda	#2
  12005  8457				  -	      sta	VSYNC
  12006  8457				  -	      sta	WSYNC
  12007  8457				  -	      sta	WSYNC
  12008  8457				  -	      sta	WSYNC
  12009  8457				  -
  12010  8457				  -	      LDA	($80,X)	; 11 waste
  12011  8457				  -	      LDA	($80,X)	; 11 waste
  12012  8457				  -	      LDA	($80,X)	; 11 waste
  12013  8457				  -
  12014  8457				  -	      lda	#0
  12015  8457				  -	      sta	VSYNC
  12016  8457				  -	      sta	VBLANK
  12017  8457				  -	      ifnconst	overscan_time
  12018  8457				  -	      lda	#37+128
  12019  8457				  -	      else
  12020  8457				  -	      lda	#overscan_time+128
  12021  8457				  -	      endif
  12022  8457				  -	      sta	TIM64T
  12023  8457				  -
  12024  8457				  -postsync
  12025  8457					      endif
  12026  8457
  12027  8457				  -	      ifconst	legacy
  12028  8457				  -	      if	legacy < 100
  12029  8457				  -	      ldx	#4
  12030  8457				  -adjustloop
  12031  8457				  -	      lda	player0x,x
  12032  8457				  -	      sec
  12033  8457				  -	      sbc	#14	;?
  12034  8457				  -	      sta	player0x,x
  12035  8457				  -	      dex
  12036  8457				  -	      bpl	adjustloop
  12037  8457				  -	      endif
  12038  8457					      endif
  12039  8457				  -	      if	((<*)>$e9)&&((<*)<$fa)
  12040  8457				  -	      repeat	($fa-(<*))
  12041  8457				  -	      nop
  12042  8457				  -	      repend
  12043  8457					      endif
  12044  8457		       85 02		      sta	WSYNC
  12045  8459		       a2 04		      ldx	#4
      0  845b					      SLEEP	3
      1  845b				   .CYCLES    SET	3
      2  845b
      3  845b				  -	      IF	.CYCLES < 2
      4  845b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  845b				  -	      ERR
      6  845b					      ENDIF
      7  845b
      8  845b					      IF	.CYCLES & 1
      9  845b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  845b		       04 00		      nop	0
     11  845d				  -	      ELSE
     12  845d				  -	      bit	VSYNC
     13  845d					      ENDIF
     14  845d				   .CYCLES    SET	.CYCLES - 3
     15  845d					      ENDIF
     16  845d
     17  845d				  -	      REPEAT	.CYCLES / 2
     18  845d				  -	      nop
     19  845d					      REPEND
  12047  845d				   HorPosLoop		; 5
  12048  845d		       b5 80		      lda	player0x,X	;+4 9
  12049  845f		       38		      sec		;+2 11
  12050  8460				   DivideLoop
  12051  8460		       e9 0f		      sbc	#15
  12052  8462		       b0 fc		      bcs	DivideLoop	;+4 15
  12053  8464		       95 9c		      sta	temp1,X	;+4 19
  12054  8466		       95 10		      sta	RESP0,X	;+4 23
  12055  8468		       85 02		      sta	WSYNC
  12056  846a		       ca		      dex
  12057  846b		       10 f0		      bpl	HorPosLoop	;+5 5
  12058  846d							; 4
  12059  846d
  12060  846d		       a2 04		      ldx	#4
  12061  846f		       b4 9c		      ldy	temp1,X
  12062  8471		       b9 cd f3 	      lda	repostable-256,Y
  12063  8474		       95 20		      sta	HMP0,X	;+14 18
  12064  8476
  12065  8476		       ca		      dex
  12066  8477		       b4 9c		      ldy	temp1,X
  12067  8479		       b9 cd f3 	      lda	repostable-256,Y
  12068  847c		       95 20		      sta	HMP0,X	;+14 32
  12069  847e
  12070  847e		       ca		      dex
  12071  847f		       b4 9c		      ldy	temp1,X
  12072  8481		       b9 cd f3 	      lda	repostable-256,Y
  12073  8484		       95 20		      sta	HMP0,X	;+14 46
  12074  8486
  12075  8486		       ca		      dex
  12076  8487		       b4 9c		      ldy	temp1,X
  12077  8489		       b9 cd f3 	      lda	repostable-256,Y
  12078  848c		       95 20		      sta	HMP0,X	;+14 60
  12079  848e
  12080  848e		       ca		      dex
  12081  848f		       b4 9c		      ldy	temp1,X
  12082  8491		       b9 cd f3 	      lda	repostable-256,Y
  12083  8494		       95 20		      sta	HMP0,X	;+14 74
  12084  8496
  12085  8496		       85 02		      sta	WSYNC
  12086  8498
  12087  8498		       85 2a		      sta	HMOVE	;+3 3
  12088  849a
  12089  849a
  12090  849a				  -	      ifconst	legacy
  12091  849a				  -	      if	legacy < 100
  12092  849a				  -	      ldx	#4
  12093  849a				  -adjustloop2
  12094  849a				  -	      lda	player0x,x
  12095  849a				  -	      clc
  12096  849a				  -	      adc	#14	;?
  12097  849a				  -	      sta	player0x,x
  12098  849a				  -	      dex
  12099  849a				  -	      bpl	adjustloop2
  12100  849a				  -	      endif
  12101  849a					      endif
  12102  849a
  12103  849a
  12104  849a
  12105  849a
  12106  849a							;set score pointers
  12107  849a		       a7 95		      lax	score+2
  12108  849c		       20 cd f4 	      jsr	scorepointerset
  12109  849f		       84 9b		      sty	scorepointers+5
  12110  84a1		       86 98		      stx	scorepointers+2
  12111  84a3		       a7 94		      lax	score+1
  12112  84a5		       20 cd f4 	      jsr	scorepointerset
  12113  84a8		       84 9a		      sty	scorepointers+4
  12114  84aa		       86 97		      stx	scorepointers+1
  12115  84ac		       a7 93		      lax	score
  12116  84ae		       20 cd f4 	      jsr	scorepointerset
  12117  84b1		       84 99		      sty	scorepointers+3
  12118  84b3		       86 96		      stx	scorepointers
  12119  84b5
  12120  84b5				   vblk
  12121  84b5							; run possible vblank bB code
  12122  84b5				  -	      ifconst	vblank_bB_code
  12123  84b5				  -	      jsr	vblank_bB_code
  12124  84b5					      endif
  12125  84b5				   vblk2
  12126  84b5		       ad 84 02 	      LDA	INTIM
  12127  84b8		       30 fb		      bmi	vblk2
  12128  84ba		       4c 00 f0 	      jmp	kernel
  12129  84bd
  12130  84bd
  12131  84bd		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
  12132  84c6		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
  12133  84cd				   repostable
  12134  84cd
  12135  84cd				   scorepointerset
  12136  84cd		       29 0f		      and	#$0F
  12137  84cf		       0a		      asl
  12138  84d0		       0a		      asl
  12139  84d1		       0a		      asl
  12140  84d2		       69 74		      adc	#<scoretable
  12141  84d4		       a8		      tay
  12142  84d5		       8a		      txa
  12143  84d6							; and #$F0
  12144  84d6							; lsr
  12145  84d6		       4b f0		      asr	#$F0
  12146  84d8		       69 74		      adc	#<scoretable
  12147  84da		       aa		      tax
  12148  84db		       60		      rts
  12149  84dc							;bB.asm
  12150  84dc							; bB.asm file is split here
  12151  84dc				   .
  12152  84dc							;;line 3328;; 
  12153  84dc
  12154  84dc				   .
  12155  84dc							;;line 3329;; 
  12156  84dc
  12157  84dc				   .
  12158  84dc							;;line 3330;; 
  12159  84dc
  12160  84dc				   .
  12161  84dc							;;line 3331;; 
  12162  84dc
  12163  84dc				   .
  12164  84dc							;;line 3332;; 
  12165  84dc
  12166  84dc				   .
  12167  84dc							;;line 3333;; 
  12168  84dc
  12169  84dc				   .
  12170  84dc							;;line 3334;; 
  12171  84dc
  12172  84dc				   .
  12173  84dc							;;line 3335;; 
  12174  84dc
  12175  84dc				   .
  12176  84dc							;;line 3336;; 
  12177  84dc
  12178  84dc				   .
  12179  84dc							;;line 3337;; 
  12180  84dc
  12181  84dc				   .
  12182  84dc							;;line 3338;; 
  12183  84dc
  12184  84dc				   .
  12185  84dc							;;line 3339;; 
  12186  84dc
  12187  84dc				  -	      ifconst	pfres
  12188  84dc				  -	      if	(<*) > (254-pfres*pfwidth)
  12189  84dc				  -	      align	256
  12190  84dc				  -	      endif
  12191  84dc				  -	      if	(<*) < (136-pfres*pfwidth)
  12192  84dc				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12193  84dc				  -	      .byte	0
  12194  84dc				  -	      repend
  12195  84dc				  -	      endif
  12196  84dc					      else
  12197  84dc					      if	(<*) > 206
  12198  8500		       00 00 00 00*	      align	256
  12199  8500					      endif
  12200  8500					      if	(<*) < 88
  12201  8500					      repeat	(88-(<*))
  12202  8500		       00		      .byte.b	0
  12201  8500					      repend
  12202  8501		       00		      .byte.b	0
  12201  8501					      repend
  12202  8502		       00		      .byte.b	0
  12201  8502					      repend
  12202  8503		       00		      .byte.b	0
  12201  8503					      repend
  12202  8504		       00		      .byte.b	0
  12201  8504					      repend
  12202  8505		       00		      .byte.b	0
  12201  8505					      repend
  12202  8506		       00		      .byte.b	0
  12201  8506					      repend
  12202  8507		       00		      .byte.b	0
  12201  8507					      repend
  12202  8508		       00		      .byte.b	0
  12201  8508					      repend
  12202  8509		       00		      .byte.b	0
  12201  8509					      repend
  12202  850a		       00		      .byte.b	0
  12201  850a					      repend
  12202  850b		       00		      .byte.b	0
  12201  850b					      repend
  12202  850c		       00		      .byte.b	0
  12201  850c					      repend
  12202  850d		       00		      .byte.b	0
  12201  850d					      repend
  12202  850e		       00		      .byte.b	0
  12201  850e					      repend
  12202  850f		       00		      .byte.b	0
  12201  850f					      repend
  12202  8510		       00		      .byte.b	0
  12201  8510					      repend
  12202  8511		       00		      .byte.b	0
  12201  8511					      repend
  12202  8512		       00		      .byte.b	0
  12201  8512					      repend
  12202  8513		       00		      .byte.b	0
  12201  8513					      repend
  12202  8514		       00		      .byte.b	0
  12201  8514					      repend
  12202  8515		       00		      .byte.b	0
  12201  8515					      repend
  12202  8516		       00		      .byte.b	0
  12201  8516					      repend
  12202  8517		       00		      .byte.b	0
  12201  8517					      repend
  12202  8518		       00		      .byte.b	0
  12201  8518					      repend
  12202  8519		       00		      .byte.b	0
  12201  8519					      repend
  12202  851a		       00		      .byte.b	0
  12201  851a					      repend
  12202  851b		       00		      .byte.b	0
  12201  851b					      repend
  12202  851c		       00		      .byte.b	0
  12201  851c					      repend
  12202  851d		       00		      .byte.b	0
  12201  851d					      repend
  12202  851e		       00		      .byte.b	0
  12201  851e					      repend
  12202  851f		       00		      .byte.b	0
  12201  851f					      repend
  12202  8520		       00		      .byte.b	0
  12201  8520					      repend
  12202  8521		       00		      .byte.b	0
  12201  8521					      repend
  12202  8522		       00		      .byte.b	0
  12201  8522					      repend
  12202  8523		       00		      .byte.b	0
  12201  8523					      repend
  12202  8524		       00		      .byte.b	0
  12201  8524					      repend
  12202  8525		       00		      .byte.b	0
  12201  8525					      repend
  12202  8526		       00		      .byte.b	0
  12201  8526					      repend
  12202  8527		       00		      .byte.b	0
  12201  8527					      repend
  12202  8528		       00		      .byte.b	0
  12201  8528					      repend
  12202  8529		       00		      .byte.b	0
  12201  8529					      repend
  12202  852a		       00		      .byte.b	0
  12201  852a					      repend
  12202  852b		       00		      .byte.b	0
  12201  852b					      repend
  12202  852c		       00		      .byte.b	0
  12201  852c					      repend
  12202  852d		       00		      .byte.b	0
  12201  852d					      repend
  12202  852e		       00		      .byte.b	0
  12201  852e					      repend
  12202  852f		       00		      .byte.b	0
  12201  852f					      repend
  12202  8530		       00		      .byte.b	0
  12201  8530					      repend
  12202  8531		       00		      .byte.b	0
  12201  8531					      repend
  12202  8532		       00		      .byte.b	0
  12201  8532					      repend
  12202  8533		       00		      .byte.b	0
  12201  8533					      repend
  12202  8534		       00		      .byte.b	0
  12201  8534					      repend
  12202  8535		       00		      .byte.b	0
  12201  8535					      repend
  12202  8536		       00		      .byte.b	0
  12201  8536					      repend
  12202  8537		       00		      .byte.b	0
  12201  8537					      repend
  12202  8538		       00		      .byte.b	0
  12201  8538					      repend
  12202  8539		       00		      .byte.b	0
  12201  8539					      repend
  12202  853a		       00		      .byte.b	0
  12201  853a					      repend
  12202  853b		       00		      .byte.b	0
  12201  853b					      repend
  12202  853c		       00		      .byte.b	0
  12201  853c					      repend
  12202  853d		       00		      .byte.b	0
  12201  853d					      repend
  12202  853e		       00		      .byte.b	0
  12201  853e					      repend
  12202  853f		       00		      .byte.b	0
  12201  853f					      repend
  12202  8540		       00		      .byte.b	0
  12201  8540					      repend
  12202  8541		       00		      .byte.b	0
  12201  8541					      repend
  12202  8542		       00		      .byte.b	0
  12201  8542					      repend
  12202  8543		       00		      .byte.b	0
  12201  8543					      repend
  12202  8544		       00		      .byte.b	0
  12201  8544					      repend
  12202  8545		       00		      .byte.b	0
  12201  8545					      repend
  12202  8546		       00		      .byte.b	0
  12201  8546					      repend
  12202  8547		       00		      .byte.b	0
  12201  8547					      repend
  12202  8548		       00		      .byte.b	0
  12201  8548					      repend
  12202  8549		       00		      .byte.b	0
  12201  8549					      repend
  12202  854a		       00		      .byte.b	0
  12201  854a					      repend
  12202  854b		       00		      .byte.b	0
  12201  854b					      repend
  12202  854c		       00		      .byte.b	0
  12201  854c					      repend
  12202  854d		       00		      .byte.b	0
  12201  854d					      repend
  12202  854e		       00		      .byte.b	0
  12201  854e					      repend
  12202  854f		       00		      .byte.b	0
  12201  854f					      repend
  12202  8550		       00		      .byte.b	0
  12201  8550					      repend
  12202  8551		       00		      .byte.b	0
  12201  8551					      repend
  12202  8552		       00		      .byte.b	0
  12201  8552					      repend
  12202  8553		       00		      .byte.b	0
  12201  8553					      repend
  12202  8554		       00		      .byte.b	0
  12201  8554					      repend
  12202  8555		       00		      .byte.b	0
  12201  8555					      repend
  12202  8556		       00		      .byte.b	0
  12201  8556					      repend
  12202  8557		       00		      .byte.b	0
  12203  8558					      repend
  12204  8558					      endif
  12205  8558					      endif
  12206  8558				   pfcolorlabel13
  12207  8558		       04 2c 2e de	      .byte.b	$04, $2C, $2E, $DE
  12208  855c		       06 2c 2c dc	      .byte.b	$06, $2C, $2C, $DC
  12209  8560		       08 2c 2a da	      .byte.b	$08, $2C, $2A, $DA
  12210  8564		       0a 2a 28 d8	      .byte.b	$0A, $2A, $28, $D8
  12211  8568		       0c 28 26 d6	      .byte.b	$0C, $28, $26, $D6
  12212  856c		       0e 26 2e de	      .byte.b	$0E, $26, $2E, $DE
  12213  8570		       0c 2c 2e de	      .byte.b	$0C, $2C, $2E, $DE
  12214  8574		       0a 2c 2c dc	      .byte.b	$0A, $2C, $2C, $DC
  12215  8578		       08 2c 2a da	      .byte.b	$08, $2C, $2A, $DA
  12216  857c		       06 2c 28 d8	      .byte.b	$06, $2C, $28, $D8
  12217  8580		       04 00 26 d6	      .byte.b	$04,0, $26, $D6
  12218  8584		       00 00 00 00	      .byte.b	$00,0,0,0
  12219  8588				  -	      if	(<*) > (<(*+22))
  12220  8588				  -	      repeat	($100-<*)
  12221  8588				  -	      .byte	0
  12222  8588				  -	      repend
  12223  8588					      endif
  12224  8588				   playercolorL0109_1
  12225  8588		       00		      .byte.b	$00
  12226  8589		       0e		      .byte.b	$0e
  12227  858a		       00		      .byte.b	$00
  12228  858b		       0e		      .byte.b	$0e
  12229  858c		       00		      .byte.b	$00
  12230  858d		       0e		      .byte.b	$0e
  12231  858e		       00		      .byte.b	$00
  12232  858f		       00		      .byte.b	$00
  12233  8590		       00		      .byte.b	$00
  12234  8591		       00		      .byte.b	$00
  12235  8592		       00		      .byte.b	$00
  12236  8593		       0e		      .byte.b	$0e
  12237  8594		       00		      .byte.b	$00
  12238  8595		       0e		      .byte.b	$0e
  12239  8596		       00		      .byte.b	$00
  12240  8597		       00		      .byte.b	$00
  12241  8598		       0e		      .byte.b	$0e
  12242  8599		       0e		      .byte.b	$0e
  12243  859a		       0e		      .byte.b	$0e
  12244  859b		       0e		      .byte.b	$0e
  12245  859c		       0e		      .byte.b	$0e
  12246  859d		       0e		      .byte.b	$0e
  12247  859e		       0e		      .byte.b	$0e
  12248  859f				  -	      if	(<*) > (<(*+22))
  12249  859f				  -	      repeat	($100-<*)
  12250  859f				  -	      .byte	0
  12251  859f				  -	      repend
  12252  859f					      endif
  12253  859f				   playerL0110_1
  12254  859f		       42		      .byte.b	%01000010
  12255  85a0		       42		      .byte.b	%01000010
  12256  85a1		       42		      .byte.b	%01000010
  12257  85a2		       42		      .byte.b	%01000010
  12258  85a3		       42		      .byte.b	%01000010
  12259  85a4		       42		      .byte.b	%01000010
  12260  85a5		       42		      .byte.b	%01000010
  12261  85a6		       42		      .byte.b	%01000010
  12262  85a7		       24		      .byte.b	%00100100
  12263  85a8		       99		      .byte.b	%10011001
  12264  85a9		       99		      .byte.b	%10011001
  12265  85aa		       99		      .byte.b	%10011001
  12266  85ab		       99		      .byte.b	%10011001
  12267  85ac		       99		      .byte.b	%10011001
  12268  85ad		       5a		      .byte.b	%01011010
  12269  85ae		       3c		      .byte.b	%00111100
  12270  85af		       18		      .byte.b	%00011000
  12271  85b0		       3c		      .byte.b	%00111100
  12272  85b1		       66		      .byte.b	%01100110
  12273  85b2		       66		      .byte.b	%01100110
  12274  85b3		       5a		      .byte.b	%01011010
  12275  85b4		       18		      .byte.b	%00011000
  12276  85b5		       7e		      .byte.b	%01111110
  12277  85b6				  -	      if	(<*) > (<(*+22))
  12278  85b6				  -	      repeat	($100-<*)
  12279  85b6				  -	      .byte	0
  12280  85b6				  -	      repend
  12281  85b6					      endif
  12282  85b6				   playercolorL0122_1
  12283  85b6		       00		      .byte.b	$00
  12284  85b7		       0e		      .byte.b	$0e
  12285  85b8		       00		      .byte.b	$00
  12286  85b9		       0e		      .byte.b	$0e
  12287  85ba		       00		      .byte.b	$00
  12288  85bb		       0e		      .byte.b	$0e
  12289  85bc		       00		      .byte.b	$00
  12290  85bd		       00		      .byte.b	$00
  12291  85be		       00		      .byte.b	$00
  12292  85bf		       00		      .byte.b	$00
  12293  85c0		       00		      .byte.b	$00
  12294  85c1		       0e		      .byte.b	$0e
  12295  85c2		       00		      .byte.b	$00
  12296  85c3		       0e		      .byte.b	$0e
  12297  85c4		       00		      .byte.b	$00
  12298  85c5		       00		      .byte.b	$00
  12299  85c6		       0e		      .byte.b	$0e
  12300  85c7		       0e		      .byte.b	$0e
  12301  85c8		       0e		      .byte.b	$0e
  12302  85c9		       0e		      .byte.b	$0e
  12303  85ca		       0e		      .byte.b	$0e
  12304  85cb		       0e		      .byte.b	$0e
  12305  85cc		       0e		      .byte.b	$0e
  12306  85cd				  -	      if	(<*) > (<(*+22))
  12307  85cd				  -	      repeat	($100-<*)
  12308  85cd				  -	      .byte	0
  12309  85cd				  -	      repend
  12310  85cd					      endif
  12311  85cd				   playerL0123_1
  12312  85cd		       42		      .byte.b	%01000010
  12313  85ce		       42		      .byte.b	%01000010
  12314  85cf		       42		      .byte.b	%01000010
  12315  85d0		       42		      .byte.b	%01000010
  12316  85d1		       42		      .byte.b	%01000010
  12317  85d2		       42		      .byte.b	%01000010
  12318  85d3		       42		      .byte.b	%01000010
  12319  85d4		       42		      .byte.b	%01000010
  12320  85d5		       24		      .byte.b	%00100100
  12321  85d6		       99		      .byte.b	%10011001
  12322  85d7		       99		      .byte.b	%10011001
  12323  85d8		       99		      .byte.b	%10011001
  12324  85d9		       99		      .byte.b	%10011001
  12325  85da		       99		      .byte.b	%10011001
  12326  85db		       5a		      .byte.b	%01011010
  12327  85dc		       3c		      .byte.b	%00111100
  12328  85dd		       18		      .byte.b	%00011000
  12329  85de		       3c		      .byte.b	%00111100
  12330  85df		       66		      .byte.b	%01100110
  12331  85e0		       66		      .byte.b	%01100110
  12332  85e1		       5a		      .byte.b	%01011010
  12333  85e2		       18		      .byte.b	%00011000
  12334  85e3		       7e		      .byte.b	%01111110
  12335  85e4				  -	      if	(<*) > (<(*+19))
  12336  85e4				  -	      repeat	($100-<*)
  12337  85e4				  -	      .byte	0
  12338  85e4				  -	      repend
  12339  85e4					      endif
  12340  85e4				   playercolorL0272_0
  12341  85e4		       34		      .byte.b	$34
  12342  85e5		       54		      .byte.b	$54
  12343  85e6		       54		      .byte.b	$54
  12344  85e7		       54		      .byte.b	$54
  12345  85e8		       54		      .byte.b	$54
  12346  85e9		       54		      .byte.b	$54
  12347  85ea		       54		      .byte.b	$54
  12348  85eb		       54		      .byte.b	$54
  12349  85ec		       54		      .byte.b	$54
  12350  85ed		       54		      .byte.b	$54
  12351  85ee		       54		      .byte.b	$54
  12352  85ef		       54		      .byte.b	$54
  12353  85f0		       1c		      .byte.b	$1c
  12354  85f1		       54		      .byte.b	$54
  12355  85f2		       54		      .byte.b	$54
  12356  85f3		       54		      .byte.b	$54
  12357  85f4		       54		      .byte.b	$54
  12358  85f5		       54		      .byte.b	$54
  12359  85f6		       54		      .byte.b	$54
  12360  85f7		       54		      .byte.b	$54
  12361  85f8					      if	(<*) > (<(*+19))
  12362  85f8					      repeat	($100-<*)
  12363  85f8		       00		      .byte.b	0
  12362  85f8					      repend
  12363  85f9		       00		      .byte.b	0
  12362  85f9					      repend
  12363  85fa		       00		      .byte.b	0
  12362  85fa					      repend
  12363  85fb		       00		      .byte.b	0
  12362  85fb					      repend
  12363  85fc		       00		      .byte.b	0
  12362  85fc					      repend
  12363  85fd		       00		      .byte.b	0
  12362  85fd					      repend
  12363  85fe		       00		      .byte.b	0
  12362  85fe					      repend
  12363  85ff		       00		      .byte.b	0
  12364  8600					      repend
  12365  8600					      endif
  12366  8600				   playerL0273_0
  12367  8600		       e7		      .byte.b	%11100111
  12368  8601		       24		      .byte.b	%00100100
  12369  8602		       24		      .byte.b	%00100100
  12370  8603		       24		      .byte.b	%00100100
  12371  8604		       24		      .byte.b	%00100100
  12372  8605		       24		      .byte.b	%00100100
  12373  8606		       bd		      .byte.b	%10111101
  12374  8607		       3c		      .byte.b	%00111100
  12375  8608		       7e		      .byte.b	%01111110
  12376  8609		       bd		      .byte.b	%10111101
  12377  860a		       bd		      .byte.b	%10111101
  12378  860b		       bd		      .byte.b	%10111101
  12379  860c		       ff		      .byte.b	%11111111
  12380  860d		       7e		      .byte.b	%01111110
  12381  860e		       3c		      .byte.b	%00111100
  12382  860f		       42		      .byte.b	%01000010
  12383  8610		       5a		      .byte.b	%01011010
  12384  8611		       7e		      .byte.b	%01111110
  12385  8612		       5a		      .byte.b	%01011010
  12386  8613		       3c		      .byte.b	%00111100
  12387  8614				  -	      ifconst	pfres
  12388  8614				  -	      if	(<*) > (254-pfres*pfwidth)
  12389  8614				  -	      align	256
  12390  8614				  -	      endif
  12391  8614				  -	      if	(<*) < (136-pfres*pfwidth)
  12392  8614				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12393  8614				  -	      .byte	0
  12394  8614				  -	      repend
  12395  8614				  -	      endif
  12396  8614					      else
  12397  8614				  -	      if	(<*) > 206
  12398  8614				  -	      align	256
  12399  8614					      endif
  12400  8614					      if	(<*) < 88
  12401  8614					      repeat	(88-(<*))
  12402  8614		       00		      .byte.b	0
  12401  8614					      repend
  12402  8615		       00		      .byte.b	0
  12401  8615					      repend
  12402  8616		       00		      .byte.b	0
  12401  8616					      repend
  12402  8617		       00		      .byte.b	0
  12401  8617					      repend
  12402  8618		       00		      .byte.b	0
  12401  8618					      repend
  12402  8619		       00		      .byte.b	0
  12401  8619					      repend
  12402  861a		       00		      .byte.b	0
  12401  861a					      repend
  12402  861b		       00		      .byte.b	0
  12401  861b					      repend
  12402  861c		       00		      .byte.b	0
  12401  861c					      repend
  12402  861d		       00		      .byte.b	0
  12401  861d					      repend
  12402  861e		       00		      .byte.b	0
  12401  861e					      repend
  12402  861f		       00		      .byte.b	0
  12401  861f					      repend
  12402  8620		       00		      .byte.b	0
  12401  8620					      repend
  12402  8621		       00		      .byte.b	0
  12401  8621					      repend
  12402  8622		       00		      .byte.b	0
  12401  8622					      repend
  12402  8623		       00		      .byte.b	0
  12401  8623					      repend
  12402  8624		       00		      .byte.b	0
  12401  8624					      repend
  12402  8625		       00		      .byte.b	0
  12401  8625					      repend
  12402  8626		       00		      .byte.b	0
  12401  8626					      repend
  12402  8627		       00		      .byte.b	0
  12401  8627					      repend
  12402  8628		       00		      .byte.b	0
  12401  8628					      repend
  12402  8629		       00		      .byte.b	0
  12401  8629					      repend
  12402  862a		       00		      .byte.b	0
  12401  862a					      repend
  12402  862b		       00		      .byte.b	0
  12401  862b					      repend
  12402  862c		       00		      .byte.b	0
  12401  862c					      repend
  12402  862d		       00		      .byte.b	0
  12401  862d					      repend
  12402  862e		       00		      .byte.b	0
  12401  862e					      repend
  12402  862f		       00		      .byte.b	0
  12401  862f					      repend
  12402  8630		       00		      .byte.b	0
  12401  8630					      repend
  12402  8631		       00		      .byte.b	0
  12401  8631					      repend
  12402  8632		       00		      .byte.b	0
  12401  8632					      repend
  12402  8633		       00		      .byte.b	0
  12401  8633					      repend
  12402  8634		       00		      .byte.b	0
  12401  8634					      repend
  12402  8635		       00		      .byte.b	0
  12401  8635					      repend
  12402  8636		       00		      .byte.b	0
  12401  8636					      repend
  12402  8637		       00		      .byte.b	0
  12401  8637					      repend
  12402  8638		       00		      .byte.b	0
  12401  8638					      repend
  12402  8639		       00		      .byte.b	0
  12401  8639					      repend
  12402  863a		       00		      .byte.b	0
  12401  863a					      repend
  12402  863b		       00		      .byte.b	0
  12401  863b					      repend
  12402  863c		       00		      .byte.b	0
  12401  863c					      repend
  12402  863d		       00		      .byte.b	0
  12401  863d					      repend
  12402  863e		       00		      .byte.b	0
  12401  863e					      repend
  12402  863f		       00		      .byte.b	0
  12401  863f					      repend
  12402  8640		       00		      .byte.b	0
  12401  8640					      repend
  12402  8641		       00		      .byte.b	0
  12401  8641					      repend
  12402  8642		       00		      .byte.b	0
  12401  8642					      repend
  12402  8643		       00		      .byte.b	0
  12401  8643					      repend
  12402  8644		       00		      .byte.b	0
  12401  8644					      repend
  12402  8645		       00		      .byte.b	0
  12401  8645					      repend
  12402  8646		       00		      .byte.b	0
  12401  8646					      repend
  12402  8647		       00		      .byte.b	0
  12401  8647					      repend
  12402  8648		       00		      .byte.b	0
  12401  8648					      repend
  12402  8649		       00		      .byte.b	0
  12401  8649					      repend
  12402  864a		       00		      .byte.b	0
  12401  864a					      repend
  12402  864b		       00		      .byte.b	0
  12401  864b					      repend
  12402  864c		       00		      .byte.b	0
  12401  864c					      repend
  12402  864d		       00		      .byte.b	0
  12401  864d					      repend
  12402  864e		       00		      .byte.b	0
  12401  864e					      repend
  12402  864f		       00		      .byte.b	0
  12401  864f					      repend
  12402  8650		       00		      .byte.b	0
  12401  8650					      repend
  12402  8651		       00		      .byte.b	0
  12401  8651					      repend
  12402  8652		       00		      .byte.b	0
  12401  8652					      repend
  12402  8653		       00		      .byte.b	0
  12401  8653					      repend
  12402  8654		       00		      .byte.b	0
  12401  8654					      repend
  12402  8655		       00		      .byte.b	0
  12401  8655					      repend
  12402  8656		       00		      .byte.b	0
  12401  8656					      repend
  12402  8657		       00		      .byte.b	0
  12403  8658					      repend
  12404  8658					      endif
  12405  8658					      endif
  12406  8658				   pfcolorlabel195
  12407  8658		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12408  865c		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12409  8660		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12410  8664		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12411  8668		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12412  866c		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12413  8670		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12414  8674		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12415  8678		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12416  867c		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12417  8680		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12418  8684				  -	      ifconst	pfres
  12419  8684				  -	      if	(<*) > (254-pfres*pfwidth)
  12420  8684				  -	      align	256
  12421  8684				  -	      endif
  12422  8684				  -	      if	(<*) < (136-pfres*pfwidth)
  12423  8684				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12424  8684				  -	      .byte	0
  12425  8684				  -	      repend
  12426  8684				  -	      endif
  12427  8684					      else
  12428  8684				  -	      if	(<*) > 206
  12429  8684				  -	      align	256
  12430  8684					      endif
  12431  8684				  -	      if	(<*) < 88
  12432  8684				  -	      repeat	(88-(<*))
  12433  8684				  -	      .byte	0
  12434  8684				  -	      repend
  12435  8684					      endif
  12436  8684					      endif
  12437  8684				   pfcolorlabel220
  12438  8684		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12439  8688		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12440  868c		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12441  8690		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12442  8694		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12443  8698		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12444  869c		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12445  86a0		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12446  86a4		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12447  86a8		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12448  86ac		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12449  86b0				  -	      ifconst	pfres
  12450  86b0				  -	      if	(<*) > (254-pfres*pfwidth)
  12451  86b0				  -	      align	256
  12452  86b0				  -	      endif
  12453  86b0				  -	      if	(<*) < (136-pfres*pfwidth)
  12454  86b0				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12455  86b0				  -	      .byte	0
  12456  86b0				  -	      repend
  12457  86b0				  -	      endif
  12458  86b0					      else
  12459  86b0				  -	      if	(<*) > 206
  12460  86b0				  -	      align	256
  12461  86b0					      endif
  12462  86b0				  -	      if	(<*) < 88
  12463  86b0				  -	      repeat	(88-(<*))
  12464  86b0				  -	      .byte	0
  12465  86b0				  -	      repend
  12466  86b0					      endif
  12467  86b0					      endif
  12468  86b0				   pfcolorlabel245
  12469  86b0		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12470  86b4		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12471  86b8		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12472  86bc		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12473  86c0		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12474  86c4		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12475  86c8		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12476  86cc		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12477  86d0		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12478  86d4		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12479  86d8		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12480  86dc				  -	      ifconst	pfres
  12481  86dc				  -	      if	(<*) > (254-pfres*pfwidth)
  12482  86dc				  -	      align	256
  12483  86dc				  -	      endif
  12484  86dc				  -	      if	(<*) < (136-pfres*pfwidth)
  12485  86dc				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12486  86dc				  -	      .byte	0
  12487  86dc				  -	      repend
  12488  86dc				  -	      endif
  12489  86dc					      else
  12490  86dc					      if	(<*) > 206
  12491  8700		       00 00 00 00*	      align	256
  12492  8700					      endif
  12493  8700					      if	(<*) < 88
  12494  8700					      repeat	(88-(<*))
  12495  8700		       00		      .byte.b	0
  12494  8700					      repend
  12495  8701		       00		      .byte.b	0
  12494  8701					      repend
  12495  8702		       00		      .byte.b	0
  12494  8702					      repend
  12495  8703		       00		      .byte.b	0
  12494  8703					      repend
  12495  8704		       00		      .byte.b	0
  12494  8704					      repend
  12495  8705		       00		      .byte.b	0
  12494  8705					      repend
  12495  8706		       00		      .byte.b	0
  12494  8706					      repend
  12495  8707		       00		      .byte.b	0
  12494  8707					      repend
  12495  8708		       00		      .byte.b	0
  12494  8708					      repend
  12495  8709		       00		      .byte.b	0
  12494  8709					      repend
  12495  870a		       00		      .byte.b	0
  12494  870a					      repend
  12495  870b		       00		      .byte.b	0
  12494  870b					      repend
  12495  870c		       00		      .byte.b	0
  12494  870c					      repend
  12495  870d		       00		      .byte.b	0
  12494  870d					      repend
  12495  870e		       00		      .byte.b	0
  12494  870e					      repend
  12495  870f		       00		      .byte.b	0
  12494  870f					      repend
  12495  8710		       00		      .byte.b	0
  12494  8710					      repend
  12495  8711		       00		      .byte.b	0
  12494  8711					      repend
  12495  8712		       00		      .byte.b	0
  12494  8712					      repend
  12495  8713		       00		      .byte.b	0
  12494  8713					      repend
  12495  8714		       00		      .byte.b	0
  12494  8714					      repend
  12495  8715		       00		      .byte.b	0
  12494  8715					      repend
  12495  8716		       00		      .byte.b	0
  12494  8716					      repend
  12495  8717		       00		      .byte.b	0
  12494  8717					      repend
  12495  8718		       00		      .byte.b	0
  12494  8718					      repend
  12495  8719		       00		      .byte.b	0
  12494  8719					      repend
  12495  871a		       00		      .byte.b	0
  12494  871a					      repend
  12495  871b		       00		      .byte.b	0
  12494  871b					      repend
  12495  871c		       00		      .byte.b	0
  12494  871c					      repend
  12495  871d		       00		      .byte.b	0
  12494  871d					      repend
  12495  871e		       00		      .byte.b	0
  12494  871e					      repend
  12495  871f		       00		      .byte.b	0
  12494  871f					      repend
  12495  8720		       00		      .byte.b	0
  12494  8720					      repend
  12495  8721		       00		      .byte.b	0
  12494  8721					      repend
  12495  8722		       00		      .byte.b	0
  12494  8722					      repend
  12495  8723		       00		      .byte.b	0
  12494  8723					      repend
  12495  8724		       00		      .byte.b	0
  12494  8724					      repend
  12495  8725		       00		      .byte.b	0
  12494  8725					      repend
  12495  8726		       00		      .byte.b	0
  12494  8726					      repend
  12495  8727		       00		      .byte.b	0
  12494  8727					      repend
  12495  8728		       00		      .byte.b	0
  12494  8728					      repend
  12495  8729		       00		      .byte.b	0
  12494  8729					      repend
  12495  872a		       00		      .byte.b	0
  12494  872a					      repend
  12495  872b		       00		      .byte.b	0
  12494  872b					      repend
  12495  872c		       00		      .byte.b	0
  12494  872c					      repend
  12495  872d		       00		      .byte.b	0
  12494  872d					      repend
  12495  872e		       00		      .byte.b	0
  12494  872e					      repend
  12495  872f		       00		      .byte.b	0
  12494  872f					      repend
  12495  8730		       00		      .byte.b	0
  12494  8730					      repend
  12495  8731		       00		      .byte.b	0
  12494  8731					      repend
  12495  8732		       00		      .byte.b	0
  12494  8732					      repend
  12495  8733		       00		      .byte.b	0
  12494  8733					      repend
  12495  8734		       00		      .byte.b	0
  12494  8734					      repend
  12495  8735		       00		      .byte.b	0
  12494  8735					      repend
  12495  8736		       00		      .byte.b	0
  12494  8736					      repend
  12495  8737		       00		      .byte.b	0
  12494  8737					      repend
  12495  8738		       00		      .byte.b	0
  12494  8738					      repend
  12495  8739		       00		      .byte.b	0
  12494  8739					      repend
  12495  873a		       00		      .byte.b	0
  12494  873a					      repend
  12495  873b		       00		      .byte.b	0
  12494  873b					      repend
  12495  873c		       00		      .byte.b	0
  12494  873c					      repend
  12495  873d		       00		      .byte.b	0
  12494  873d					      repend
  12495  873e		       00		      .byte.b	0
  12494  873e					      repend
  12495  873f		       00		      .byte.b	0
  12494  873f					      repend
  12495  8740		       00		      .byte.b	0
  12494  8740					      repend
  12495  8741		       00		      .byte.b	0
  12494  8741					      repend
  12495  8742		       00		      .byte.b	0
  12494  8742					      repend
  12495  8743		       00		      .byte.b	0
  12494  8743					      repend
  12495  8744		       00		      .byte.b	0
  12494  8744					      repend
  12495  8745		       00		      .byte.b	0
  12494  8745					      repend
  12495  8746		       00		      .byte.b	0
  12494  8746					      repend
  12495  8747		       00		      .byte.b	0
  12494  8747					      repend
  12495  8748		       00		      .byte.b	0
  12494  8748					      repend
  12495  8749		       00		      .byte.b	0
  12494  8749					      repend
  12495  874a		       00		      .byte.b	0
  12494  874a					      repend
  12495  874b		       00		      .byte.b	0
  12494  874b					      repend
  12495  874c		       00		      .byte.b	0
  12494  874c					      repend
  12495  874d		       00		      .byte.b	0
  12494  874d					      repend
  12495  874e		       00		      .byte.b	0
  12494  874e					      repend
  12495  874f		       00		      .byte.b	0
  12494  874f					      repend
  12495  8750		       00		      .byte.b	0
  12494  8750					      repend
  12495  8751		       00		      .byte.b	0
  12494  8751					      repend
  12495  8752		       00		      .byte.b	0
  12494  8752					      repend
  12495  8753		       00		      .byte.b	0
  12494  8753					      repend
  12495  8754		       00		      .byte.b	0
  12494  8754					      repend
  12495  8755		       00		      .byte.b	0
  12494  8755					      repend
  12495  8756		       00		      .byte.b	0
  12494  8756					      repend
  12495  8757		       00		      .byte.b	0
  12496  8758					      repend
  12497  8758					      endif
  12498  8758					      endif
  12499  8758				   pfcolorlabel270
  12500  8758		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12501  875c		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12502  8760		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12503  8764		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12504  8768		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12505  876c		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12506  8770		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12507  8774		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12508  8778		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12509  877c		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12510  8780		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12511  8784				  -	      if	(<*) > (<(*+23))
  12512  8784				  -	      repeat	($100-<*)
  12513  8784				  -	      .byte	0
  12514  8784				  -	      repend
  12515  8784					      endif
  12516  8784				   playercolorL0435_1
  12517  8784		       00		      .byte.b	$00
  12518  8785		       00		      .byte.b	$00
  12519  8786		       0e		      .byte.b	$0e
  12520  8787		       00		      .byte.b	$00
  12521  8788		       0e		      .byte.b	$0e
  12522  8789		       00		      .byte.b	$00
  12523  878a		       0e		      .byte.b	$0e
  12524  878b		       00		      .byte.b	$00
  12525  878c		       00		      .byte.b	$00
  12526  878d		       00		      .byte.b	$00
  12527  878e		       00		      .byte.b	$00
  12528  878f		       00		      .byte.b	$00
  12529  8790		       00		      .byte.b	$00
  12530  8791		       00		      .byte.b	$00
  12531  8792		       00		      .byte.b	$00
  12532  8793		       00		      .byte.b	$00
  12533  8794		       00		      .byte.b	$00
  12534  8795		       0e		      .byte.b	$0e
  12535  8796		       0e		      .byte.b	$0e
  12536  8797		       0e		      .byte.b	$0e
  12537  8798		       0e		      .byte.b	$0e
  12538  8799		       0e		      .byte.b	$0e
  12539  879a		       0e		      .byte.b	$0e
  12540  879b		       0e		      .byte.b	$0e
  12541  879c				  -	      if	(<*) > (<(*+22))
  12542  879c				  -	      repeat	($100-<*)
  12543  879c				  -	      .byte	0
  12544  879c				  -	      repend
  12545  879c					      endif
  12546  879c				   playerL0438_1
  12547  879c		       42		      .byte.b	%01000010
  12548  879d		       42		      .byte.b	%01000010
  12549  879e		       42		      .byte.b	%01000010
  12550  879f		       42		      .byte.b	%01000010
  12551  87a0		       42		      .byte.b	%01000010
  12552  87a1		       42		      .byte.b	%01000010
  12553  87a2		       42		      .byte.b	%01000010
  12554  87a3		       42		      .byte.b	%01000010
  12555  87a4		       24		      .byte.b	%00100100
  12556  87a5		       99		      .byte.b	%10011001
  12557  87a6		       99		      .byte.b	%10011001
  12558  87a7		       99		      .byte.b	%10011001
  12559  87a8		       99		      .byte.b	%10011001
  12560  87a9		       99		      .byte.b	%10011001
  12561  87aa		       5a		      .byte.b	%01011010
  12562  87ab		       3c		      .byte.b	%00111100
  12563  87ac		       18		      .byte.b	%00011000
  12564  87ad		       3c		      .byte.b	%00111100
  12565  87ae		       7e		      .byte.b	%01111110
  12566  87af		       7e		      .byte.b	%01111110
  12567  87b0		       7e		      .byte.b	%01111110
  12568  87b1		       7e		      .byte.b	%01111110
  12569  87b2		       7e		      .byte.b	%01111110
  12570  87b3				  -	      if	(<*) > (<(*+22))
  12571  87b3				  -	      repeat	($100-<*)
  12572  87b3				  -	      .byte	0
  12573  87b3				  -	      repend
  12574  87b3					      endif
  12575  87b3				   playerL0440_1
  12576  87b3		       42		      .byte.b	%01000010
  12577  87b4		       42		      .byte.b	%01000010
  12578  87b5		       42		      .byte.b	%01000010
  12579  87b6		       42		      .byte.b	%01000010
  12580  87b7		       42		      .byte.b	%01000010
  12581  87b8		       42		      .byte.b	%01000010
  12582  87b9		       42		      .byte.b	%01000010
  12583  87ba		       42		      .byte.b	%01000010
  12584  87bb		       24		      .byte.b	%00100100
  12585  87bc		       99		      .byte.b	%10011001
  12586  87bd		       99		      .byte.b	%10011001
  12587  87be		       99		      .byte.b	%10011001
  12588  87bf		       99		      .byte.b	%10011001
  12589  87c0		       99		      .byte.b	%10011001
  12590  87c1		       5a		      .byte.b	%01011010
  12591  87c2		       3c		      .byte.b	%00111100
  12592  87c3		       18		      .byte.b	%00011000
  12593  87c4		       3c		      .byte.b	%00111100
  12594  87c5		       7e		      .byte.b	%01111110
  12595  87c6		       7e		      .byte.b	%01111110
  12596  87c7		       7e		      .byte.b	%01111110
  12597  87c8		       7e		      .byte.b	%01111110
  12598  87c9		       7e		      .byte.b	%01111110
  12599  87ca				  -	      if	(<*) > (<(*+23))
  12600  87ca				  -	      repeat	($100-<*)
  12601  87ca				  -	      .byte	0
  12602  87ca				  -	      repend
  12603  87ca					      endif
  12604  87ca				   playerL0442_1
  12605  87ca		       00		      .byte.b	%00000000
  12606  87cb		       42		      .byte.b	%01000010
  12607  87cc		       42		      .byte.b	%01000010
  12608  87cd		       42		      .byte.b	%01000010
  12609  87ce		       42		      .byte.b	%01000010
  12610  87cf		       42		      .byte.b	%01000010
  12611  87d0		       42		      .byte.b	%01000010
  12612  87d1		       42		      .byte.b	%01000010
  12613  87d2		       42		      .byte.b	%01000010
  12614  87d3		       24		      .byte.b	%00100100
  12615  87d4		       99		      .byte.b	%10011001
  12616  87d5		       99		      .byte.b	%10011001
  12617  87d6		       99		      .byte.b	%10011001
  12618  87d7		       99		      .byte.b	%10011001
  12619  87d8		       99		      .byte.b	%10011001
  12620  87d9		       5a		      .byte.b	%01011010
  12621  87da		       3c		      .byte.b	%00111100
  12622  87db		       18		      .byte.b	%00011000
  12623  87dc		       3c		      .byte.b	%00111100
  12624  87dd		       7e		      .byte.b	%01111110
  12625  87de		       7e		      .byte.b	%01111110
  12626  87df		       7e		      .byte.b	%01111110
  12627  87e0		       7e		      .byte.b	%01111110
  12628  87e1		       7e		      .byte.b	%01111110
  12629  87e2				  -	      if	(<*) > (<(*+23))
  12630  87e2				  -	      repeat	($100-<*)
  12631  87e2				  -	      .byte	0
  12632  87e2				  -	      repend
  12633  87e2					      endif
  12634  87e2				   playerL0444_1
  12635  87e2		       00		      .byte.b	%00000000
  12636  87e3		       42		      .byte.b	%01000010
  12637  87e4		       42		      .byte.b	%01000010
  12638  87e5		       42		      .byte.b	%01000010
  12639  87e6		       42		      .byte.b	%01000010
  12640  87e7		       42		      .byte.b	%01000010
  12641  87e8		       42		      .byte.b	%01000010
  12642  87e9		       42		      .byte.b	%01000010
  12643  87ea		       42		      .byte.b	%01000010
  12644  87eb		       24		      .byte.b	%00100100
  12645  87ec		       99		      .byte.b	%10011001
  12646  87ed		       99		      .byte.b	%10011001
  12647  87ee		       99		      .byte.b	%10011001
  12648  87ef		       99		      .byte.b	%10011001
  12649  87f0		       99		      .byte.b	%10011001
  12650  87f1		       5a		      .byte.b	%01011010
  12651  87f2		       3c		      .byte.b	%00111100
  12652  87f3		       18		      .byte.b	%00011000
  12653  87f4		       3c		      .byte.b	%00111100
  12654  87f5		       7e		      .byte.b	%01111110
  12655  87f6		       7e		      .byte.b	%01111110
  12656  87f7		       7e		      .byte.b	%01111110
  12657  87f8		       7e		      .byte.b	%01111110
  12658  87f9		       7e		      .byte.b	%01111110
  12659  87fa					      if	(<*) > (<(*+23))
  12660  87fa					      repeat	($100-<*)
  12661  87fa		       00		      .byte.b	0
  12660  87fa					      repend
  12661  87fb		       00		      .byte.b	0
  12660  87fb					      repend
  12661  87fc		       00		      .byte.b	0
  12660  87fc					      repend
  12661  87fd		       00		      .byte.b	0
  12660  87fd					      repend
  12661  87fe		       00		      .byte.b	0
  12660  87fe					      repend
  12661  87ff		       00		      .byte.b	0
  12662  8800					      repend
  12663  8800					      endif
  12664  8800				   playercolorL0447_1
  12665  8800		       00		      .byte.b	$00
  12666  8801		       00		      .byte.b	$00
  12667  8802		       0e		      .byte.b	$0e
  12668  8803		       00		      .byte.b	$00
  12669  8804		       0e		      .byte.b	$0e
  12670  8805		       00		      .byte.b	$00
  12671  8806		       0e		      .byte.b	$0e
  12672  8807		       00		      .byte.b	$00
  12673  8808		       00		      .byte.b	$00
  12674  8809		       00		      .byte.b	$00
  12675  880a		       00		      .byte.b	$00
  12676  880b		       0e		      .byte.b	$0e
  12677  880c		       00		      .byte.b	$00
  12678  880d		       0e		      .byte.b	$0e
  12679  880e		       00		      .byte.b	$00
  12680  880f		       00		      .byte.b	$00
  12681  8810		       00		      .byte.b	$00
  12682  8811		       0e		      .byte.b	$0e
  12683  8812		       0e		      .byte.b	$0e
  12684  8813		       0e		      .byte.b	$0e
  12685  8814		       0e		      .byte.b	$0e
  12686  8815		       0e		      .byte.b	$0e
  12687  8816		       0e		      .byte.b	$0e
  12688  8817		       0e		      .byte.b	$0e
  12689  8818				  -	      if	(<*) > (<(*+22))
  12690  8818				  -	      repeat	($100-<*)
  12691  8818				  -	      .byte	0
  12692  8818				  -	      repend
  12693  8818					      endif
  12694  8818				   playerL0450_1
  12695  8818		       42		      .byte.b	%01000010
  12696  8819		       42		      .byte.b	%01000010
  12697  881a		       42		      .byte.b	%01000010
  12698  881b		       42		      .byte.b	%01000010
  12699  881c		       42		      .byte.b	%01000010
  12700  881d		       42		      .byte.b	%01000010
  12701  881e		       42		      .byte.b	%01000010
  12702  881f		       42		      .byte.b	%01000010
  12703  8820		       24		      .byte.b	%00100100
  12704  8821		       99		      .byte.b	%10011001
  12705  8822		       99		      .byte.b	%10011001
  12706  8823		       99		      .byte.b	%10011001
  12707  8824		       99		      .byte.b	%10011001
  12708  8825		       99		      .byte.b	%10011001
  12709  8826		       5a		      .byte.b	%01011010
  12710  8827		       3c		      .byte.b	%00111100
  12711  8828		       18		      .byte.b	%00011000
  12712  8829		       3c		      .byte.b	%00111100
  12713  882a		       66		      .byte.b	%01100110
  12714  882b		       66		      .byte.b	%01100110
  12715  882c		       5a		      .byte.b	%01011010
  12716  882d		       18		      .byte.b	%00011000
  12717  882e		       7e		      .byte.b	%01111110
  12718  882f				  -	      if	(<*) > (<(*+22))
  12719  882f				  -	      repeat	($100-<*)
  12720  882f				  -	      .byte	0
  12721  882f				  -	      repend
  12722  882f					      endif
  12723  882f				   playerL0452_1
  12724  882f		       42		      .byte.b	%01000010
  12725  8830		       42		      .byte.b	%01000010
  12726  8831		       42		      .byte.b	%01000010
  12727  8832		       42		      .byte.b	%01000010
  12728  8833		       42		      .byte.b	%01000010
  12729  8834		       42		      .byte.b	%01000010
  12730  8835		       42		      .byte.b	%01000010
  12731  8836		       42		      .byte.b	%01000010
  12732  8837		       24		      .byte.b	%00100100
  12733  8838		       99		      .byte.b	%10011001
  12734  8839		       99		      .byte.b	%10011001
  12735  883a		       99		      .byte.b	%10011001
  12736  883b		       99		      .byte.b	%10011001
  12737  883c		       99		      .byte.b	%10011001
  12738  883d		       5a		      .byte.b	%01011010
  12739  883e		       3c		      .byte.b	%00111100
  12740  883f		       18		      .byte.b	%00011000
  12741  8840		       3c		      .byte.b	%00111100
  12742  8841		       66		      .byte.b	%01100110
  12743  8842		       66		      .byte.b	%01100110
  12744  8843		       5a		      .byte.b	%01011010
  12745  8844		       18		      .byte.b	%00011000
  12746  8845		       7e		      .byte.b	%01111110
  12747  8846				  -	      if	(<*) > (<(*+23))
  12748  8846				  -	      repeat	($100-<*)
  12749  8846				  -	      .byte	0
  12750  8846				  -	      repend
  12751  8846					      endif
  12752  8846				   playerL0454_1
  12753  8846		       00		      .byte.b	%00000000
  12754  8847		       42		      .byte.b	%01000010
  12755  8848		       42		      .byte.b	%01000010
  12756  8849		       42		      .byte.b	%01000010
  12757  884a		       42		      .byte.b	%01000010
  12758  884b		       42		      .byte.b	%01000010
  12759  884c		       42		      .byte.b	%01000010
  12760  884d		       42		      .byte.b	%01000010
  12761  884e		       42		      .byte.b	%01000010
  12762  884f		       24		      .byte.b	%00100100
  12763  8850		       99		      .byte.b	%10011001
  12764  8851		       99		      .byte.b	%10011001
  12765  8852		       99		      .byte.b	%10011001
  12766  8853		       99		      .byte.b	%10011001
  12767  8854		       99		      .byte.b	%10011001
  12768  8855		       5a		      .byte.b	%01011010
  12769  8856		       3c		      .byte.b	%00111100
  12770  8857		       18		      .byte.b	%00011000
  12771  8858		       3c		      .byte.b	%00111100
  12772  8859		       66		      .byte.b	%01100110
  12773  885a		       66		      .byte.b	%01100110
  12774  885b		       5a		      .byte.b	%01011010
  12775  885c		       18		      .byte.b	%00011000
  12776  885d		       7e		      .byte.b	%01111110
  12777  885e				  -	      if	(<*) > (<(*+23))
  12778  885e				  -	      repeat	($100-<*)
  12779  885e				  -	      .byte	0
  12780  885e				  -	      repend
  12781  885e					      endif
  12782  885e				   playerL0456_1
  12783  885e		       00		      .byte.b	%00000000
  12784  885f		       42		      .byte.b	%01000010
  12785  8860		       42		      .byte.b	%01000010
  12786  8861		       42		      .byte.b	%01000010
  12787  8862		       42		      .byte.b	%01000010
  12788  8863		       42		      .byte.b	%01000010
  12789  8864		       42		      .byte.b	%01000010
  12790  8865		       42		      .byte.b	%01000010
  12791  8866		       42		      .byte.b	%01000010
  12792  8867		       24		      .byte.b	%00100100
  12793  8868		       99		      .byte.b	%10011001
  12794  8869		       99		      .byte.b	%10011001
  12795  886a		       99		      .byte.b	%10011001
  12796  886b		       99		      .byte.b	%10011001
  12797  886c		       99		      .byte.b	%10011001
  12798  886d		       5a		      .byte.b	%01011010
  12799  886e		       3c		      .byte.b	%00111100
  12800  886f		       18		      .byte.b	%00011000
  12801  8870		       3c		      .byte.b	%00111100
  12802  8871		       66		      .byte.b	%01100110
  12803  8872		       66		      .byte.b	%01100110
  12804  8873		       5a		      .byte.b	%01011010
  12805  8874		       18		      .byte.b	%00011000
  12806  8875		       7e		      .byte.b	%01111110
  12807  8876				  -	      if	(<*) > (<(*+23))
  12808  8876				  -	      repeat	($100-<*)
  12809  8876				  -	      .byte	0
  12810  8876				  -	      repend
  12811  8876					      endif
  12812  8876				   playercolorL0459_1
  12813  8876		       00		      .byte.b	$00
  12814  8877		       00		      .byte.b	$00
  12815  8878		       0e		      .byte.b	$0e
  12816  8879		       00		      .byte.b	$00
  12817  887a		       0e		      .byte.b	$0e
  12818  887b		       00		      .byte.b	$00
  12819  887c		       0e		      .byte.b	$0e
  12820  887d		       00		      .byte.b	$00
  12821  887e		       00		      .byte.b	$00
  12822  887f		       00		      .byte.b	$00
  12823  8880		       00		      .byte.b	$00
  12824  8881		       00		      .byte.b	$00
  12825  8882		       00		      .byte.b	$00
  12826  8883		       00		      .byte.b	$00
  12827  8884		       00		      .byte.b	$00
  12828  8885		       00		      .byte.b	$00
  12829  8886		       00		      .byte.b	$00
  12830  8887		       0e		      .byte.b	$0e
  12831  8888		       0e		      .byte.b	$0e
  12832  8889		       0e		      .byte.b	$0e
  12833  888a		       0e		      .byte.b	$0e
  12834  888b		       0e		      .byte.b	$0e
  12835  888c		       0e		      .byte.b	$0e
  12836  888d		       0e		      .byte.b	$0e
  12837  888e				  -	      if	(<*) > (<(*+22))
  12838  888e				  -	      repeat	($100-<*)
  12839  888e				  -	      .byte	0
  12840  888e				  -	      repend
  12841  888e					      endif
  12842  888e				   playerL0462_1
  12843  888e		       a0		      .byte.b	%10100000
  12844  888f		       90		      .byte.b	%10010000
  12845  8890		       48		      .byte.b	%01001000
  12846  8891		       24		      .byte.b	%00100100
  12847  8892		       24		      .byte.b	%00100100
  12848  8893		       24		      .byte.b	%00100100
  12849  8894		       24		      .byte.b	%00100100
  12850  8895		       24		      .byte.b	%00100100
  12851  8896		       24		      .byte.b	%00100100
  12852  8897		       7c		      .byte.b	%01111100
  12853  8898		       74		      .byte.b	%01110100
  12854  8899		       7c		      .byte.b	%01111100
  12855  889a		       75		      .byte.b	%01110101
  12856  889b		       7e		      .byte.b	%01111110
  12857  889c		       74		      .byte.b	%01110100
  12858  889d		       3c		      .byte.b	%00111100
  12859  889e		       1c		      .byte.b	%00011100
  12860  889f		       3c		      .byte.b	%00111100
  12861  88a0		       72		      .byte.b	%01110010
  12862  88a1		       72		      .byte.b	%01110010
  12863  88a2		       6c		      .byte.b	%01101100
  12864  88a3		       48		      .byte.b	%01001000
  12865  88a4		       3e		      .byte.b	%00111110
  12866  88a5				  -	      if	(<*) > (<(*+22))
  12867  88a5				  -	      repeat	($100-<*)
  12868  88a5				  -	      .byte	0
  12869  88a5				  -	      repend
  12870  88a5					      endif
  12871  88a5				   playerL0464_1
  12872  88a5		       a0		      .byte.b	%10100000
  12873  88a6		       90		      .byte.b	%10010000
  12874  88a7		       48		      .byte.b	%01001000
  12875  88a8		       24		      .byte.b	%00100100
  12876  88a9		       24		      .byte.b	%00100100
  12877  88aa		       24		      .byte.b	%00100100
  12878  88ab		       24		      .byte.b	%00100100
  12879  88ac		       24		      .byte.b	%00100100
  12880  88ad		       24		      .byte.b	%00100100
  12881  88ae		       7c		      .byte.b	%01111100
  12882  88af		       74		      .byte.b	%01110100
  12883  88b0		       7c		      .byte.b	%01111100
  12884  88b1		       75		      .byte.b	%01110101
  12885  88b2		       7e		      .byte.b	%01111110
  12886  88b3		       74		      .byte.b	%01110100
  12887  88b4		       3c		      .byte.b	%00111100
  12888  88b5		       1c		      .byte.b	%00011100
  12889  88b6		       3c		      .byte.b	%00111100
  12890  88b7		       72		      .byte.b	%01110010
  12891  88b8		       72		      .byte.b	%01110010
  12892  88b9		       6c		      .byte.b	%01101100
  12893  88ba		       48		      .byte.b	%01001000
  12894  88bb		       3e		      .byte.b	%00111110
  12895  88bc				  -	      if	(<*) > (<(*+23))
  12896  88bc				  -	      repeat	($100-<*)
  12897  88bc				  -	      .byte	0
  12898  88bc				  -	      repend
  12899  88bc					      endif
  12900  88bc				   playerL0466_1
  12901  88bc		       00		      .byte.b	%00000000
  12902  88bd		       a0		      .byte.b	%10100000
  12903  88be		       90		      .byte.b	%10010000
  12904  88bf		       48		      .byte.b	%01001000
  12905  88c0		       24		      .byte.b	%00100100
  12906  88c1		       24		      .byte.b	%00100100
  12907  88c2		       24		      .byte.b	%00100100
  12908  88c3		       24		      .byte.b	%00100100
  12909  88c4		       24		      .byte.b	%00100100
  12910  88c5		       24		      .byte.b	%00100100
  12911  88c6		       7c		      .byte.b	%01111100
  12912  88c7		       74		      .byte.b	%01110100
  12913  88c8		       7c		      .byte.b	%01111100
  12914  88c9		       75		      .byte.b	%01110101
  12915  88ca		       7e		      .byte.b	%01111110
  12916  88cb		       74		      .byte.b	%01110100
  12917  88cc		       3c		      .byte.b	%00111100
  12918  88cd		       1c		      .byte.b	%00011100
  12919  88ce		       3c		      .byte.b	%00111100
  12920  88cf		       72		      .byte.b	%01110010
  12921  88d0		       72		      .byte.b	%01110010
  12922  88d1		       6c		      .byte.b	%01101100
  12923  88d2		       48		      .byte.b	%01001000
  12924  88d3		       3e		      .byte.b	%00111110
  12925  88d4				  -	      if	(<*) > (<(*+23))
  12926  88d4				  -	      repeat	($100-<*)
  12927  88d4				  -	      .byte	0
  12928  88d4				  -	      repend
  12929  88d4					      endif
  12930  88d4				   playerL0468_1
  12931  88d4		       00		      .byte.b	%00000000
  12932  88d5		       a0		      .byte.b	%10100000
  12933  88d6		       90		      .byte.b	%10010000
  12934  88d7		       48		      .byte.b	%01001000
  12935  88d8		       24		      .byte.b	%00100100
  12936  88d9		       24		      .byte.b	%00100100
  12937  88da		       24		      .byte.b	%00100100
  12938  88db		       24		      .byte.b	%00100100
  12939  88dc		       24		      .byte.b	%00100100
  12940  88dd		       24		      .byte.b	%00100100
  12941  88de		       7c		      .byte.b	%01111100
  12942  88df		       74		      .byte.b	%01110100
  12943  88e0		       7c		      .byte.b	%01111100
  12944  88e1		       75		      .byte.b	%01110101
  12945  88e2		       7e		      .byte.b	%01111110
  12946  88e3		       74		      .byte.b	%01110100
  12947  88e4		       3c		      .byte.b	%00111100
  12948  88e5		       1c		      .byte.b	%00011100
  12949  88e6		       3c		      .byte.b	%00111100
  12950  88e7		       72		      .byte.b	%01110010
  12951  88e8		       72		      .byte.b	%01110010
  12952  88e9		       6c		      .byte.b	%01101100
  12953  88ea		       48		      .byte.b	%01001000
  12954  88eb		       3e		      .byte.b	%00111110
  12955  88ec					      if	(<*) > (<(*+23))
  12956  88ec					      repeat	($100-<*)
  12957  88ec		       00		      .byte.b	0
  12956  88ec					      repend
  12957  88ed		       00		      .byte.b	0
  12956  88ed					      repend
  12957  88ee		       00		      .byte.b	0
  12956  88ee					      repend
  12957  88ef		       00		      .byte.b	0
  12956  88ef					      repend
  12957  88f0		       00		      .byte.b	0
  12956  88f0					      repend
  12957  88f1		       00		      .byte.b	0
  12956  88f1					      repend
  12957  88f2		       00		      .byte.b	0
  12956  88f2					      repend
  12957  88f3		       00		      .byte.b	0
  12956  88f3					      repend
  12957  88f4		       00		      .byte.b	0
  12956  88f4					      repend
  12957  88f5		       00		      .byte.b	0
  12956  88f5					      repend
  12957  88f6		       00		      .byte.b	0
  12956  88f6					      repend
  12957  88f7		       00		      .byte.b	0
  12956  88f7					      repend
  12957  88f8		       00		      .byte.b	0
  12956  88f8					      repend
  12957  88f9		       00		      .byte.b	0
  12956  88f9					      repend
  12957  88fa		       00		      .byte.b	0
  12956  88fa					      repend
  12957  88fb		       00		      .byte.b	0
  12956  88fb					      repend
  12957  88fc		       00		      .byte.b	0
  12956  88fc					      repend
  12957  88fd		       00		      .byte.b	0
  12956  88fd					      repend
  12957  88fe		       00		      .byte.b	0
  12956  88fe					      repend
  12957  88ff		       00		      .byte.b	0
  12958  8900					      repend
  12959  8900					      endif
  12960  8900				   playercolorL0471_1
  12961  8900		       00		      .byte.b	$00
  12962  8901		       00		      .byte.b	$00
  12963  8902		       0e		      .byte.b	$0e
  12964  8903		       00		      .byte.b	$00
  12965  8904		       0e		      .byte.b	$0e
  12966  8905		       00		      .byte.b	$00
  12967  8906		       0e		      .byte.b	$0e
  12968  8907		       00		      .byte.b	$00
  12969  8908		       00		      .byte.b	$00
  12970  8909		       00		      .byte.b	$00
  12971  890a		       00		      .byte.b	$00
  12972  890b		       00		      .byte.b	$00
  12973  890c		       00		      .byte.b	$00
  12974  890d		       00		      .byte.b	$00
  12975  890e		       00		      .byte.b	$00
  12976  890f		       00		      .byte.b	$00
  12977  8910		       00		      .byte.b	$00
  12978  8911		       0e		      .byte.b	$0e
  12979  8912		       0e		      .byte.b	$0e
  12980  8913		       0e		      .byte.b	$0e
  12981  8914		       0e		      .byte.b	$0e
  12982  8915		       0e		      .byte.b	$0e
  12983  8916		       0e		      .byte.b	$0e
  12984  8917		       0e		      .byte.b	$0e
  12985  8918				  -	      if	(<*) > (<(*+22))
  12986  8918				  -	      repeat	($100-<*)
  12987  8918				  -	      .byte	0
  12988  8918				  -	      repend
  12989  8918					      endif
  12990  8918				   playerL0474_1
  12991  8918		       05		      .byte.b	%00000101
  12992  8919		       09		      .byte.b	%00001001
  12993  891a		       12		      .byte.b	%00010010
  12994  891b		       24		      .byte.b	%00100100
  12995  891c		       24		      .byte.b	%00100100
  12996  891d		       24		      .byte.b	%00100100
  12997  891e		       24		      .byte.b	%00100100
  12998  891f		       24		      .byte.b	%00100100
  12999  8920		       24		      .byte.b	%00100100
  13000  8921		       3e		      .byte.b	%00111110
  13001  8922		       2e		      .byte.b	%00101110
  13002  8923		       3e		      .byte.b	%00111110
  13003  8924		       ae		      .byte.b	%10101110
  13004  8925		       7e		      .byte.b	%01111110
  13005  8926		       2e		      .byte.b	%00101110
  13006  8927		       3c		      .byte.b	%00111100
  13007  8928		       38		      .byte.b	%00111000
  13008  8929		       3c		      .byte.b	%00111100
  13009  892a		       4e		      .byte.b	%01001110
  13010  892b		       4e		      .byte.b	%01001110
  13011  892c		       36		      .byte.b	%00110110
  13012  892d		       12		      .byte.b	%00010010
  13013  892e		       7c		      .byte.b	%01111100
  13014  892f				  -	      if	(<*) > (<(*+22))
  13015  892f				  -	      repeat	($100-<*)
  13016  892f				  -	      .byte	0
  13017  892f				  -	      repend
  13018  892f					      endif
  13019  892f				   playerL0476_1
  13020  892f		       05		      .byte.b	%00000101
  13021  8930		       09		      .byte.b	%00001001
  13022  8931		       12		      .byte.b	%00010010
  13023  8932		       24		      .byte.b	%00100100
  13024  8933		       24		      .byte.b	%00100100
  13025  8934		       24		      .byte.b	%00100100
  13026  8935		       24		      .byte.b	%00100100
  13027  8936		       24		      .byte.b	%00100100
  13028  8937		       24		      .byte.b	%00100100
  13029  8938		       3e		      .byte.b	%00111110
  13030  8939		       2e		      .byte.b	%00101110
  13031  893a		       3e		      .byte.b	%00111110
  13032  893b		       ae		      .byte.b	%10101110
  13033  893c		       7e		      .byte.b	%01111110
  13034  893d		       2e		      .byte.b	%00101110
  13035  893e		       3c		      .byte.b	%00111100
  13036  893f		       38		      .byte.b	%00111000
  13037  8940		       3c		      .byte.b	%00111100
  13038  8941		       4e		      .byte.b	%01001110
  13039  8942		       4e		      .byte.b	%01001110
  13040  8943		       36		      .byte.b	%00110110
  13041  8944		       12		      .byte.b	%00010010
  13042  8945		       7c		      .byte.b	%01111100
  13043  8946				  -	      if	(<*) > (<(*+23))
  13044  8946				  -	      repeat	($100-<*)
  13045  8946				  -	      .byte	0
  13046  8946				  -	      repend
  13047  8946					      endif
  13048  8946				   playerL0478_1
  13049  8946		       00		      .byte.b	%00000000
  13050  8947		       05		      .byte.b	%00000101
  13051  8948		       09		      .byte.b	%00001001
  13052  8949		       12		      .byte.b	%00010010
  13053  894a		       24		      .byte.b	%00100100
  13054  894b		       24		      .byte.b	%00100100
  13055  894c		       24		      .byte.b	%00100100
  13056  894d		       24		      .byte.b	%00100100
  13057  894e		       24		      .byte.b	%00100100
  13058  894f		       24		      .byte.b	%00100100
  13059  8950		       3e		      .byte.b	%00111110
  13060  8951		       2e		      .byte.b	%00101110
  13061  8952		       3e		      .byte.b	%00111110
  13062  8953		       ae		      .byte.b	%10101110
  13063  8954		       7e		      .byte.b	%01111110
  13064  8955		       2e		      .byte.b	%00101110
  13065  8956		       3c		      .byte.b	%00111100
  13066  8957		       38		      .byte.b	%00111000
  13067  8958		       3c		      .byte.b	%00111100
  13068  8959		       4e		      .byte.b	%01001110
  13069  895a		       4e		      .byte.b	%01001110
  13070  895b		       36		      .byte.b	%00110110
  13071  895c		       12		      .byte.b	%00010010
  13072  895d		       7c		      .byte.b	%01111100
  13073  895e				  -	      if	(<*) > (<(*+23))
  13074  895e				  -	      repeat	($100-<*)
  13075  895e				  -	      .byte	0
  13076  895e				  -	      repend
  13077  895e					      endif
  13078  895e				   playerL0480_1
  13079  895e		       00		      .byte.b	%00000000
  13080  895f		       05		      .byte.b	%00000101
  13081  8960		       09		      .byte.b	%00001001
  13082  8961		       12		      .byte.b	%00010010
  13083  8962		       24		      .byte.b	%00100100
  13084  8963		       24		      .byte.b	%00100100
  13085  8964		       24		      .byte.b	%00100100
  13086  8965		       24		      .byte.b	%00100100
  13087  8966		       24		      .byte.b	%00100100
  13088  8967		       24		      .byte.b	%00100100
  13089  8968		       3e		      .byte.b	%00111110
  13090  8969		       2e		      .byte.b	%00101110
  13091  896a		       3e		      .byte.b	%00111110
  13092  896b		       ae		      .byte.b	%10101110
  13093  896c		       7e		      .byte.b	%01111110
  13094  896d		       2e		      .byte.b	%00101110
  13095  896e		       3c		      .byte.b	%00111100
  13096  896f		       38		      .byte.b	%00111000
  13097  8970		       3c		      .byte.b	%00111100
  13098  8971		       4e		      .byte.b	%01001110
  13099  8972		       4e		      .byte.b	%01001110
  13100  8973		       36		      .byte.b	%00110110
  13101  8974		       12		      .byte.b	%00010010
  13102  8975		       7c		      .byte.b	%01111100
  13103  8976					      if	ECHOFIRST
      1534 bytes of ROM space left in bank 8
  13104  8976					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 8")
  13105  8976					      endif
  13106  8976		       00 01	   ECHOFIRST  =	1
  13107  8976
  13108  8976
  13109  8976							; Provided under the CC0 license. See the included LICENSE.txt for details.
  13110  8976
  13111  8976							; feel free to modify the score graphics - just keep each digit 8 high
  13112  8976							; and keep the conditional compilation stuff intact
  13113  8976				  -	      ifconst	ROM2k
  13114  8976				  -	      ORG	$F7AC-8
  13115  8976					      else
  13116  8976					      ifconst	bankswitch
  13117  8976				  -	      if	bankswitch == 8
  13118  8976				  -	      ORG	$2F94-bscode_length
  13119  8976				  -	      RORG	$FF94-bscode_length
  13120  8976					      endif
  13121  8976				  -	      if	bankswitch == 16
  13122  8976				  -	      ORG	$4F94-bscode_length
  13123  8976				  -	      RORG	$FF94-bscode_length
  13124  8976					      endif
  13125  8976					      if	bankswitch == 32
  13126  8f74					      ORG	$8F94-bscode_length
  13127  8f74					      RORG	$FF94-bscode_length
  13128  8f74					      endif
  13129  8f74				  -	      if	bankswitch == 64
  13130  8f74				  -	      ORG	$10F80-bscode_length
  13131  8f74				  -	      RORG	$1FF80-bscode_length
  13132  8f74					      endif
  13133  8f74				  -	      else
  13134  8f74				  -	      ORG	$FF9C
  13135  8f74					      endif
  13136  8f74					      endif
  13137  8f74
  13138  8f74							; font equates
  13139  8f74		       00 01	   .21stcentury =	1
  13140  8f74		       00 02	   alarmclock =	2
  13141  8f74		       00 03	   handwritten =	3
  13142  8f74		       00 04	   interrupted =	4
  13143  8f74		       00 05	   retroputer =	5
  13144  8f74		       00 06	   whimsey    =	6
  13145  8f74		       00 07	   tiny       =	7
  13146  8f74		       00 08	   hex	      =	8
  13147  8f74
  13148  8f74				  -	      ifconst	font
  13149  8f74				  -	      if	font == hex
  13150  8f74				  -	      ORG	. - 48
  13151  8f74				  -	      endif
  13152  8f74					      endif
  13153  8f74
  13154  8f74				   scoretable
  13155  8f74
  13156  8f74				  -	      ifconst	font
  13157  8f74				  -	      if	font == .21stcentury
  13158  8f74				  -	      include	"score_graphics.asm.21stcentury"
  13159  8f74				  -	      endif
  13160  8f74				  -	      if	font == alarmclock
  13161  8f74				  -	      include	"score_graphics.asm.alarmclock"
  13162  8f74				  -	      endif
  13163  8f74				  -	      if	font == handwritten
  13164  8f74				  -	      include	"score_graphics.asm.handwritten"
  13165  8f74				  -	      endif
  13166  8f74				  -	      if	font == interrupted
  13167  8f74				  -	      include	"score_graphics.asm.interrupted"
  13168  8f74				  -	      endif
  13169  8f74				  -	      if	font == retroputer
  13170  8f74				  -	      include	"score_graphics.asm.retroputer"
  13171  8f74				  -	      endif
  13172  8f74				  -	      if	font == whimsey
  13173  8f74				  -	      include	"score_graphics.asm.whimsey"
  13174  8f74				  -	      endif
  13175  8f74				  -	      if	font == tiny
  13176  8f74				  -	      include	"score_graphics.asm.tiny"
  13177  8f74				  -	      endif
  13178  8f74				  -	      if	font == hex
  13179  8f74				  -	      include	"score_graphics.asm.hex"
  13180  8f74				  -	      endif
  13181  8f74					      else		; default font
  13182  8f74
  13183  8f74		       3c		      .byte.b	%00111100
  13184  8f75		       66		      .byte.b	%01100110
  13185  8f76		       66		      .byte.b	%01100110
  13186  8f77		       66		      .byte.b	%01100110
  13187  8f78		       66		      .byte.b	%01100110
  13188  8f79		       66		      .byte.b	%01100110
  13189  8f7a		       66		      .byte.b	%01100110
  13190  8f7b		       3c		      .byte.b	%00111100
  13191  8f7c
  13192  8f7c		       7e		      .byte.b	%01111110
  13193  8f7d		       18		      .byte.b	%00011000
  13194  8f7e		       18		      .byte.b	%00011000
  13195  8f7f		       18		      .byte.b	%00011000
  13196  8f80		       18		      .byte.b	%00011000
  13197  8f81		       38		      .byte.b	%00111000
  13198  8f82		       18		      .byte.b	%00011000
  13199  8f83		       08		      .byte.b	%00001000
  13200  8f84
  13201  8f84		       7e		      .byte.b	%01111110
  13202  8f85		       60		      .byte.b	%01100000
  13203  8f86		       60		      .byte.b	%01100000
  13204  8f87		       3c		      .byte.b	%00111100
  13205  8f88		       06		      .byte.b	%00000110
  13206  8f89		       06		      .byte.b	%00000110
  13207  8f8a		       46		      .byte.b	%01000110
  13208  8f8b		       3c		      .byte.b	%00111100
  13209  8f8c
  13210  8f8c		       3c		      .byte.b	%00111100
  13211  8f8d		       46		      .byte.b	%01000110
  13212  8f8e		       06		      .byte.b	%00000110
  13213  8f8f		       06		      .byte.b	%00000110
  13214  8f90		       1c		      .byte.b	%00011100
  13215  8f91		       06		      .byte.b	%00000110
  13216  8f92		       46		      .byte.b	%01000110
  13217  8f93		       3c		      .byte.b	%00111100
  13218  8f94
  13219  8f94		       0c		      .byte.b	%00001100
  13220  8f95		       0c		      .byte.b	%00001100
  13221  8f96		       7e		      .byte.b	%01111110
  13222  8f97		       4c		      .byte.b	%01001100
  13223  8f98		       4c		      .byte.b	%01001100
  13224  8f99		       2c		      .byte.b	%00101100
  13225  8f9a		       1c		      .byte.b	%00011100
  13226  8f9b		       0c		      .byte.b	%00001100
  13227  8f9c
  13228  8f9c		       3c		      .byte.b	%00111100
  13229  8f9d		       46		      .byte.b	%01000110
  13230  8f9e		       06		      .byte.b	%00000110
  13231  8f9f		       06		      .byte.b	%00000110
  13232  8fa0		       3c		      .byte.b	%00111100
  13233  8fa1		       60		      .byte.b	%01100000
  13234  8fa2		       60		      .byte.b	%01100000
  13235  8fa3		       7e		      .byte.b	%01111110
  13236  8fa4
  13237  8fa4		       3c		      .byte.b	%00111100
  13238  8fa5		       66		      .byte.b	%01100110
  13239  8fa6		       66		      .byte.b	%01100110
  13240  8fa7		       66		      .byte.b	%01100110
  13241  8fa8		       7c		      .byte.b	%01111100
  13242  8fa9		       60		      .byte.b	%01100000
  13243  8faa		       62		      .byte.b	%01100010
  13244  8fab		       3c		      .byte.b	%00111100
  13245  8fac
  13246  8fac		       30		      .byte.b	%00110000
  13247  8fad		       30		      .byte.b	%00110000
  13248  8fae		       30		      .byte.b	%00110000
  13249  8faf		       18		      .byte.b	%00011000
  13250  8fb0		       0c		      .byte.b	%00001100
  13251  8fb1		       06		      .byte.b	%00000110
  13252  8fb2		       42		      .byte.b	%01000010
  13253  8fb3		       3e		      .byte.b	%00111110
  13254  8fb4
  13255  8fb4		       3c		      .byte.b	%00111100
  13256  8fb5		       66		      .byte.b	%01100110
  13257  8fb6		       66		      .byte.b	%01100110
  13258  8fb7		       66		      .byte.b	%01100110
  13259  8fb8		       3c		      .byte.b	%00111100
  13260  8fb9		       66		      .byte.b	%01100110
  13261  8fba		       66		      .byte.b	%01100110
  13262  8fbb		       3c		      .byte.b	%00111100
  13263  8fbc
  13264  8fbc		       3c		      .byte.b	%00111100
  13265  8fbd		       46		      .byte.b	%01000110
  13266  8fbe		       06		      .byte.b	%00000110
  13267  8fbf		       3e		      .byte.b	%00111110
  13268  8fc0		       66		      .byte.b	%01100110
  13269  8fc1		       66		      .byte.b	%01100110
  13270  8fc2		       66		      .byte.b	%01100110
  13271  8fc3		       3c		      .byte.b	%00111100
  13272  8fc4
  13273  8fc4					      ifnconst	DPC_kernel_options
  13274  8fc4
  13275  8fc4		       00		      .byte.b	%00000000
  13276  8fc5		       00		      .byte.b	%00000000
  13277  8fc6		       00		      .byte.b	%00000000
  13278  8fc7		       00		      .byte.b	%00000000
  13279  8fc8		       00		      .byte.b	%00000000
  13280  8fc9		       00		      .byte.b	%00000000
  13281  8fca		       00		      .byte.b	%00000000
  13282  8fcb		       00		      .byte.b	%00000000
  13283  8fcc
  13284  8fcc					      endif
  13285  8fcc
  13286  8fcc					      endif
  13287  8fcc
  13288  8fcc				  -	      ifconst	ROM2k
  13289  8fcc				  -	      ORG	$F7FC
  13290  8fcc					      else
  13291  8fcc					      ifconst	bankswitch
  13292  8fcc				  -	      if	bankswitch == 8
  13293  8fcc				  -	      ORG	$2FF4-bscode_length
  13294  8fcc				  -	      RORG	$FFF4-bscode_length
  13295  8fcc					      endif
  13296  8fcc				  -	      if	bankswitch == 16
  13297  8fcc				  -	      ORG	$4FF4-bscode_length
  13298  8fcc				  -	      RORG	$FFF4-bscode_length
  13299  8fcc					      endif
  13300  8fcc					      if	bankswitch == 32
  13301  8fd4					      ORG	$8FF4-bscode_length
  13302  8fd4					      RORG	$FFF4-bscode_length
  13303  8fd4					      endif
  13304  8fd4				  -	      if	bankswitch == 64
  13305  8fd4				  -	      ORG	$10FE0-bscode_length
  13306  8fd4				  -	      RORG	$1FFE0-bscode_length
  13307  8fd4					      endif
  13308  8fd4				  -	      else
  13309  8fd4				  -	      ORG	$FFFC
  13310  8fd4					      endif
  13311  8fd4					      endif
  13312  8fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  13313  8fd4
  13314  8fd4							; every bank has this stuff at the same place
  13315  8fd4							; this code can switch to/from any bank at any entry point
  13316  8fd4							; and can preserve register values
  13317  8fd4							; note: lines not starting with a space are not placed in all banks
  13318  8fd4							;
  13319  8fd4							; line below tells the compiler how long this is - do not remove
  13320  8fd4							;size=32
  13321  8fd4
  13322  8fd4				   begin_bscode
  13323  8fd4		       a2 ff		      ldx	#$ff
  13324  8fd6				  -	      ifconst	FASTFETCH	; using DPC+
  13325  8fd6				  -	      stx	FASTFETCH
  13326  8fd6					      endif
  13327  8fd6		       9a		      txs
  13328  8fd7				  -	      if	bankswitch == 64
  13329  8fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  13330  8fd7					      else
  13331  8fd7		       a9 f2		      lda	#>(start-1)
  13332  8fd9					      endif
  13333  8fd9		       48		      pha
  13334  8fda		       a9 51		      lda	#<(start-1)
  13335  8fdc		       48		      pha
  13336  8fdd
  13337  8fdd				   BS_return
  13338  8fdd		       48		      pha
  13339  8fde		       8a		      txa
  13340  8fdf		       48		      pha
  13341  8fe0		       ba		      tsx
  13342  8fe1
  13343  8fe1					      if	bankswitch != 64
  13344  8fe1		       b5 04		      lda	4,x	; get high byte of return address
  13345  8fe3
  13346  8fe3		       2a		      rol
  13347  8fe4		       2a		      rol
  13348  8fe5		       2a		      rol
  13349  8fe6		       2a		      rol
  13350  8fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  13351  8fe9		       aa		      tax
  13352  8fea		       e8		      inx
  13353  8feb				  -	      else
  13354  8feb				  -	      lda	4,x	; get high byte of return address
  13355  8feb				  -	      tay
  13356  8feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  13357  8feb				  -	      sta	4,x
  13358  8feb				  -	      tya
  13359  8feb				  -	      lsr
  13360  8feb				  -	      lsr
  13361  8feb				  -	      lsr
  13362  8feb				  -	      lsr
  13363  8feb				  -	      tax
  13364  8feb				  -	      inx
  13365  8feb					      endif
  13366  8feb
  13367  8feb				   BS_jsr
  13368  8feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  13369  8fee		       68		      pla
  13370  8fef		       aa		      tax
  13371  8ff0		       68		      pla
  13372  8ff1		       60		      rts
  13373  8ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  13374  8ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  13375  8ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  13376  8ff2					      endif
  13377  8ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
  13378  8ff2
  13379  8ff2					      ifconst	bankswitch
  13380  8ff2				  -	      if	bankswitch == 8
  13381  8ff2				  -	      ORG	$2FFC
  13382  8ff2				  -	      RORG	$FFFC
  13383  8ff2					      endif
  13384  8ff2				  -	      if	bankswitch == 16
  13385  8ff2				  -	      ORG	$4FFC
  13386  8ff2				  -	      RORG	$FFFC
  13387  8ff2					      endif
  13388  8ff2					      if	bankswitch == 32
  13389  8ffc					      ORG	$8FFC
  13390  8ffc					      RORG	$FFFC
  13391  8ffc					      endif
  13392  8ffc				  -	      if	bankswitch == 64
  13393  8ffc				  -	      ORG	$10FF0
  13394  8ffc				  -	      RORG	$1FFF0
  13395  8ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
  13396  8ffc				  -	      ORG	$10FF8
  13397  8ffc				  -	      RORG	$1FFF8
  13398  8ffc				  -	      ifconst	superchip
  13399  8ffc				  -	      .byte	"E","F","S","C"
  13400  8ffc				  -	      else
  13401  8ffc				  -	      .byte	"E","F","E","F"
  13402  8ffc				  -	      endif
  13403  8ffc				  -	      ORG	$10FFC
  13404  8ffc				  -	      RORG	$1FFFC
  13405  8ffc					      endif
  13406  8ffc				  -	      else
  13407  8ffc				  -	      ifconst	ROM2k
  13408  8ffc				  -	      ORG	$F7FC
  13409  8ffc				  -	      else
  13410  8ffc				  -	      ORG	$FFFC
  13411  8ffc				  -	      endif
  13412  8ffc					      endif
  13413  8ffc		       52 f2		      .word.w	(start & $ffff)
  13414  8ffe		       52 f2		      .word.w	(start & $ffff)

------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm LEVEL 1 PASS 2
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  9000 ????				      include	"2600basic.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 20	   bscode_length =	32
      4  9000 ????	       00 01	   pfscore    =	1
      5  9000 ????
      6  9000 ????	       00 9f	   _M_Edge_Right =	159
      7  9000 ????
      8  9000 ????	       00 02	   _M_Edge_Left =	2
      9  9000 ????
     10  9000 ????	       00 58	   _M_Edge_Bottom =	88
     11  9000 ????
     12  9000 ????	       00 02	   _M_Edge_Top =	2
     13  9000 ????
     14  9000 ????	       00 89	   _Lost_Soul_Y =	bally
     15  9000 ????
     16  9000 ????	       00 84	   _Lost_Soul_X =	ballx
     17  9000 ????
     18  9000 ????	       00 95	   _sc3       =	score + 2
     19  9000 ????
     20  9000 ????	       00 94	   _sc2       =	score + 1
     21  9000 ????
     22  9000 ????	       00 93	   _sc1       =	score
     23  9000 ????
     24  9000 ????	       00 ed	   rand16     =	z
     25  9000 ????
     26  9000 ????	       00 ec	   _Bit7_M1_Moving =	y
     27  9000 ????
     28  9000 ????	       00 ec	   _Bit6_Swap_Scores =	y
     29  9000 ????
     30  9000 ????	       00 ec	   _Bit3_Auto_Play =	y
     31  9000 ????
     32  9000 ????	       00 ec	   _Bit2_Game_Control =	y
     33  9000 ????
     34  9000 ????	       00 ec	   _Bit1_FireB_Restrainer =	y
     35  9000 ????
     36  9000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     37  9000 ????
     38  9000 ????	       00 ec	   _BitOp_01  =	y
     39  9000 ????
     40  9000 ????	       00 eb	   _High_Score3 =	x
     41  9000 ????
     42  9000 ????	       00 ea	   _High_Score2 =	w
     43  9000 ????
     44  9000 ????	       00 e9	   _High_Score1 =	v
     45  9000 ????
     46  9000 ????	       00 e8	   _Score3_Mem =	u
     47  9000 ????
     48  9000 ????	       00 e7	   _Score2_Mem =	t
     49  9000 ????
     50  9000 ????	       00 e6	   _Score1_Mem =	s
     51  9000 ????
     52  9000 ????	       00 e5	   _Bit2_Pause_Clr_Scheme =	r
     53  9000 ????
     54  9000 ????	       00 e5	   _Bit1_BW_Check =	r
     55  9000 ????
     56  9000 ????	       00 e5	   _Bit0_BW_Mem =	r
     57  9000 ????
     58  9000 ????	       00 e5	   _BitOp_02  =	r
     59  9000 ????
     60  9000 ????	       00 df	   _Pause_Color_Tmp =	l
     61  9000 ????
     62  9000 ????	       00 df	   _AP_Dir_Counter =	l
     63  9000 ????
     64  9000 ????	       00 de	   _Pause_Mem_Color_Tmp =	k
     65  9000 ????
     66  9000 ????	       00 de	   _AP_2_Sec_Score_Flip =	k
     67  9000 ????
     68  9000 ????	       00 dd	   _AP_Mem_P0y =	j
     69  9000 ????
     70  9000 ????	       00 dc	   _AP_Mem_P0x =	i
     71  9000 ????
     72  9000 ????	       00 db	   _Pause_Counter_Tmp =	h
     73  9000 ????
     74  9000 ????	       00 db	   _AP_Mem_Dir =	h
     75  9000 ????
     76  9000 ????	       00 a0	   _T5_AP_Dir =	temp5
     77  9000 ????
     78  9000 ????	       00 85	   _WillY     =	player0y
     79  9000 ????
     80  9000 ????	       00 80	   _WillX     =	player0x
     81  9000 ????
     82  9000 ????	       00 86	   _Main_CharY =	player1y
     83  9000 ????
     84  9000 ????	       00 81	   _Main_CharX =	player1x
     85  9000 ????
     86  9000 ????	       00 da	   _Bit7_M1_Dir_Right =	g
     87  9000 ????
     88  9000 ????	       00 da	   _Bit6_M1_Dir_Left =	g
     89  9000 ????
     90  9000 ????	       00 da	   _Bit5_M1_Dir_Down =	g
     91  9000 ????
     92  9000 ????	       00 da	   _Bit4_M1_Dir_Up =	g
     93  9000 ????
     94  9000 ????	       00 da	   _Bit3_P0_Dir_Right =	g
     95  9000 ????
     96  9000 ????	       00 da	   _Bit2_P0_Dir_Left =	g
     97  9000 ????
     98  9000 ????	       00 da	   _Bit1_P0_Dir_Down =	g
     99  9000 ????
    100  9000 ????	       00 da	   _Bit0_P0_Dir_Up =	g
    101  9000 ????
    102  9000 ????	       00 da	   _BitOp_P0_M1_Dir =	g
    103  9000 ????
    104  9000 ????	       00 e2	   _Kill_Count =	o
    105  9000 ????
    106  9000 ????	       00 e1	   _Will_Aftn_AI =	n
    107  9000 ????
    108  9000 ????	       00 e0	   _Ch1_Duration =	m
    109  9000 ????
    110  9000 ????	       00 d7	   _Ch0_Counter =	d
    111  9000 ????
    112  9000 ????	       00 d6	   _Ch0_Duration =	c
    113  9000 ????
    114  9000 ????	       00 d5	   _Ch0_Sound =	b
    115  9000 ????
    116  9000 ????	       00 e4	   _Bitop_Coord_Counter =	q
    117  9000 ????
    118  9000 ????	       00 e3	   _Bitop_Screen_Counter =	p
    119  9000 ????
    120  9000 ????	       00 d9	   _Frame_Counter =	f
    121  9000 ????
    122  9000 ????	       00 d8	   _Master_Counter =	e
    123  9000 ????
    124  9000 ????	       00 d4	   genesispad =	a
    125  9000 ????
    126  9000 ????	       00 2b	   vblank_time =	43
    127  9000 ????	       00 25	   overscan_time =	37
    128  9000 ????	       00 07	   bs_mask    =	7
    129  9000 ????	       00 20	   bankswitch =	32
    130  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    131  9000 ????	       00 01	   PFcolors   =	1
    132  9000 ????	       00 01	   player1colors =	1
    133  9000 ????	       00 01	   playercolors =	1
    134  9000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  9000 ????
      8  9000 ????	       00 80	   player0x   =	$80
      9  9000 ????	       00 81	   player1x   =	$81
     10  9000 ????	       00 82	   missile0x  =	$82
     11  9000 ????	       00 83	   missile1x  =	$83
     12  9000 ????	       00 84	   ballx      =	$84
     13  9000 ????
     14  9000 ????	       00 85	   objecty    =	$85
     15  9000 ????	       00 85	   player0y   =	$85
     16  9000 ????	       00 86	   player1y   =	$86
     17  9000 ????	       00 87	   missile1height =	$87
     18  9000 ????	       00 88	   missile1y  =	$88
     19  9000 ????	       00 89	   bally      =	$89
     20  9000 ????
     21  9000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  9000 ????
     23  9000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  9000 ????	       00 8a	   player0pointerlo =	$8A
     25  9000 ????	       00 8b	   player0pointerhi =	$8B
     26  9000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  9000 ????	       00 8c	   player1pointerlo =	$8C
     28  9000 ????	       00 8d	   player1pointerhi =	$8D
     29  9000 ????
     30  9000 ????	       00 8e	   player0height =	$8E
     31  9000 ????	       00 8f	   player1height =	$8F
     32  9000 ????	       00 90	   missile0height =	$90
     33  9000 ????	       00 91	   missile0y  =	$91
     34  9000 ????	       00 92	   ballheight =	$92
     35  9000 ????
     36  9000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  9000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  9000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  9000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  9000 ????
     41  9000 ????	       00 93	   score      =	$93	; $93-$95
     42  9000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  9000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  9000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  9000 ????	       00 9e	   temp3      =	$9E
     46  9000 ????	       00 9f	   temp4      =	$9F
     47  9000 ????	       00 a0	   temp5      =	$A0
     48  9000 ????	       00 a1	   temp6      =	$A1
     49  9000 ????
     50  9000 ????	       00 a2	   rand       =	$A2
     51  9000 ????	       00 a3	   scorecolor =	$A3
     52  9000 ????
     53  9000 ????	       00 a4	   var0       =	$A4
     54  9000 ????	       00 a5	   var1       =	$A5
     55  9000 ????	       00 a6	   var2       =	$A6
     56  9000 ????	       00 a7	   var3       =	$A7
     57  9000 ????	       00 a8	   var4       =	$A8
     58  9000 ????	       00 a9	   var5       =	$A9
     59  9000 ????	       00 aa	   var6       =	$AA
     60  9000 ????	       00 ab	   var7       =	$AB
     61  9000 ????	       00 ac	   var8       =	$AC
     62  9000 ????	       00 ad	   var9       =	$AD
     63  9000 ????	       00 ae	   var10      =	$AE
     64  9000 ????	       00 af	   var11      =	$AF
     65  9000 ????	       00 b0	   var12      =	$B0
     66  9000 ????	       00 b1	   var13      =	$B1
     67  9000 ????	       00 b2	   var14      =	$B2
     68  9000 ????	       00 b3	   var15      =	$B3
     69  9000 ????	       00 b4	   var16      =	$B4
     70  9000 ????	       00 b5	   var17      =	$B5
     71  9000 ????	       00 b6	   var18      =	$B6
     72  9000 ????	       00 b7	   var19      =	$B7
     73  9000 ????	       00 b8	   var20      =	$B8
     74  9000 ????	       00 b9	   var21      =	$B9
     75  9000 ????	       00 ba	   var22      =	$BA
     76  9000 ????	       00 bb	   var23      =	$BB
     77  9000 ????	       00 bc	   var24      =	$BC
     78  9000 ????	       00 bd	   var25      =	$BD
     79  9000 ????	       00 be	   var26      =	$BE
     80  9000 ????	       00 bf	   var27      =	$BF
     81  9000 ????	       00 c0	   var28      =	$C0
     82  9000 ????	       00 c1	   var29      =	$C1
     83  9000 ????	       00 c2	   var30      =	$C2
     84  9000 ????	       00 c3	   var31      =	$C3
     85  9000 ????	       00 c4	   var32      =	$C4
     86  9000 ????	       00 c5	   var33      =	$C5
     87  9000 ????	       00 c6	   var34      =	$C6
     88  9000 ????	       00 c7	   var35      =	$C7
     89  9000 ????	       00 c8	   var36      =	$C8
     90  9000 ????	       00 c9	   var37      =	$C9
     91  9000 ????	       00 ca	   var38      =	$CA
     92  9000 ????	       00 cb	   var39      =	$CB
     93  9000 ????	       00 cc	   var40      =	$CC
     94  9000 ????	       00 cd	   var41      =	$CD
     95  9000 ????	       00 ce	   var42      =	$CE
     96  9000 ????	       00 cf	   var43      =	$CF
     97  9000 ????	       00 d0	   var44      =	$D0
     98  9000 ????	       00 d1	   var45      =	$D1
     99  9000 ????	       00 d2	   var46      =	$D2
    100  9000 ????	       00 d3	   var47      =	$D3
    101  9000 ????
    102  9000 ????	       00 d4	   A	      =	$d4
    103  9000 ????	       00 d4	   a	      =	$d4
    104  9000 ????	       00 d5	   B	      =	$d5
    105  9000 ????	       00 d5	   b	      =	$d5
    106  9000 ????	       00 d6	   C	      =	$d6
    107  9000 ????	       00 d6	   c	      =	$d6
    108  9000 ????	       00 d7	   D	      =	$d7
    109  9000 ????	       00 d7	   d	      =	$d7
    110  9000 ????	       00 d8	   E	      =	$d8
    111  9000 ????	       00 d8	   e	      =	$d8
    112  9000 ????	       00 d9	   F	      =	$d9
    113  9000 ????	       00 d9	   f	      =	$d9
    114  9000 ????	       00 da	   G	      =	$da
    115  9000 ????	       00 da	   g	      =	$da
    116  9000 ????	       00 db	   H	      =	$db
    117  9000 ????	       00 db	   h	      =	$db
    118  9000 ????	       00 dc	   I	      =	$dc
    119  9000 ????	       00 dc	   i	      =	$dc
    120  9000 ????	       00 dd	   J	      =	$dd
    121  9000 ????	       00 dd	   j	      =	$dd
    122  9000 ????	       00 de	   K	      =	$de
    123  9000 ????	       00 de	   k	      =	$de
    124  9000 ????	       00 df	   L	      =	$df
    125  9000 ????	       00 df	   l	      =	$df
    126  9000 ????	       00 e0	   M	      =	$e0
    127  9000 ????	       00 e0	   m	      =	$e0
    128  9000 ????	       00 e1	   N	      =	$e1
    129  9000 ????	       00 e1	   n	      =	$e1
    130  9000 ????	       00 e2	   O	      =	$e2
    131  9000 ????	       00 e2	   o	      =	$e2
    132  9000 ????	       00 e3	   P	      =	$e3
    133  9000 ????	       00 e3	   p	      =	$e3
    134  9000 ????	       00 e4	   Q	      =	$e4
    135  9000 ????	       00 e4	   q	      =	$e4
    136  9000 ????	       00 e5	   R	      =	$e5
    137  9000 ????	       00 e5	   r	      =	$e5
    138  9000 ????	       00 e6	   S	      =	$e6
    139  9000 ????	       00 e6	   s	      =	$e6
    140  9000 ????	       00 e7	   T	      =	$e7
    141  9000 ????	       00 e7	   t	      =	$e7
    142  9000 ????	       00 e8	   U	      =	$e8
    143  9000 ????	       00 e8	   u	      =	$e8
    144  9000 ????	       00 e9	   V	      =	$e9
    145  9000 ????	       00 e9	   v	      =	$e9
    146  9000 ????	       00 ea	   W	      =	$ea
    147  9000 ????	       00 ea	   w	      =	$ea
    148  9000 ????	       00 eb	   X	      =	$eb
    149  9000 ????	       00 eb	   x	      =	$eb
    150  9000 ????	       00 ec	   Y	      =	$ec
    151  9000 ????	       00 ec	   y	      =	$ec
    152  9000 ????	       00 ed	   Z	      =	$ed
    153  9000 ????	       00 ed	   z	      =	$ed
    154  9000 ????
    155  9000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  9000 ????	       00 ef	   playfieldpos =	$ef
    157  9000 ????
    158  9000 ????						; available for other uses, or if unused, provide more stack space
    159  9000 ????
    160  9000 ????	       00 f0	   aux1       =	$f0
    161  9000 ????	       00 f1	   aux2       =	$f1
    162  9000 ????	       00 f2	   aux3       =	$f2
    163  9000 ????	       00 f3	   aux4       =	$f3
    164  9000 ????	       00 f4	   aux5       =	$f4
    165  9000 ????	       00 f5	   aux6       =	$f5
    166  9000 ????
    167  9000 ????						; playfield color/height pointers
    168  9000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  9000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  9000 ????						; the above pointers are the same because if color and height are both used together,
    171  9000 ????						; they must used absolute indexed and cannot use pointers
    172  9000 ????
    173  9000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  9000 ????						; upper 3 bits of $f2 contain the number of lives
    175  9000 ????	       00 f4	   lifecolor  =	$f4
    176  9000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  9000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  9000 ????
    179  9000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  9000 ????	       00 f3	   pfscore2   =	$f3
    181  9000 ????	       00 f4	   pfscorecolor =	$f4
    182  9000 ????
    183  9000 ????	       00 f6	   stack1     =	$f6
    184  9000 ????	       00 f7	   stack2     =	$f7
    185  9000 ????	       00 f8	   stack3     =	$f8
    186  9000 ????	       00 f9	   stack4     =	$f9
    187  9000 ????						; the stack bytes above may be used in the kernel
    188  9000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  9000 ????
    190  9000 ????				      MAC	return
    191  9000 ????				      ifnconst	bankswitch
    192  9000 ????				      rts
    193  9000 ????				      else
    194  9000 ????				      jmp	BS_return
    195  9000 ????				      endif
    196  9000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  9000 ????
    198  9000 ????			  -	      ifconst	superchip
    199  9000 ????			  -playfieldbase =	$10D0
    200  9000 ????			  -	      include	superchip.h
    201  9000 ????				      else
    202  9000 ????	       00 a4	   playfieldbase =	$A4
    203  9000 ????				      endif
    204  9000 ????
    205  9000 ????				      ifnconst	pfhalfwidth
    206  9000 ????	       00 04	   pfwidth    =	4
    207  9000 ????	       00 0e	   PF1L       =	PF1
    208  9000 ????	       00 0f	   PF2L       =	PF2
    209  9000 ????	       00 0e	   PF1R       =	PF1
    210  9000 ????	       00 0f	   PF2R       =	PF2
    211  9000 ????	       00 00	   pfadjust   =	0
    212  9000 ????			  -	      else
    213  9000 ????			  -pfwidth    =	2
    214  9000 ????			  -	      ifconst	pfcenter
    215  9000 ????			  -PF1L       =	$3F	; no effect
    216  9000 ????			  -PF2L       =	PF2
    217  9000 ????			  -PF1R       =	$3F
    218  9000 ????			  -PF2R       =	PF2	; no effect
    219  9000 ????			  -pfadjust   =	1
    220  9000 ????			  -	      else
    221  9000 ????			  -PF1L       =	PF1
    222  9000 ????			  -PF2L       =	PF2
    223  9000 ????			  -PF1R       =	$3F	; no effect
    224  9000 ????			  -PF2R       =	$3F	; no effect
    225  9000 ????			  -pfadjust   =	0
    226  9000 ????			  -	      endif
    227  9000 ????				      endif
    228  9000 ????
    229  9000 ????						; define playfield start based on height
    230  9000 ????				      ifnconst	pfres
    231  9000 ????	       00 a4	   playfield  =	playfieldbase
    232  9000 ????			  -	      else
    233  9000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  9000 ????				      endif
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 20	   bscode_length =	32
      4  9000 ????	       00 01	   pfscore    =	1
      5  9000 ????
      6  9000 ????	       00 9f	   _M_Edge_Right =	159
      7  9000 ????
      8  9000 ????	       00 02	   _M_Edge_Left =	2
      9  9000 ????
     10  9000 ????	       00 58	   _M_Edge_Bottom =	88
     11  9000 ????
     12  9000 ????	       00 02	   _M_Edge_Top =	2
     13  9000 ????
     14  9000 ????	       00 89	   _Lost_Soul_Y =	bally
     15  9000 ????
     16  9000 ????	       00 84	   _Lost_Soul_X =	ballx
     17  9000 ????
     18  9000 ????	       00 95	   _sc3       =	score + 2
     19  9000 ????
     20  9000 ????	       00 94	   _sc2       =	score + 1
     21  9000 ????
     22  9000 ????	       00 93	   _sc1       =	score
     23  9000 ????
     24  9000 ????	       00 ed	   rand16     =	z
     25  9000 ????
     26  9000 ????	       00 ec	   _Bit7_M1_Moving =	y
     27  9000 ????
     28  9000 ????	       00 ec	   _Bit6_Swap_Scores =	y
     29  9000 ????
     30  9000 ????	       00 ec	   _Bit3_Auto_Play =	y
     31  9000 ????
     32  9000 ????	       00 ec	   _Bit2_Game_Control =	y
     33  9000 ????
     34  9000 ????	       00 ec	   _Bit1_FireB_Restrainer =	y
     35  9000 ????
     36  9000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     37  9000 ????
     38  9000 ????	       00 ec	   _BitOp_01  =	y
     39  9000 ????
     40  9000 ????	       00 eb	   _High_Score3 =	x
     41  9000 ????
     42  9000 ????	       00 ea	   _High_Score2 =	w
     43  9000 ????
     44  9000 ????	       00 e9	   _High_Score1 =	v
     45  9000 ????
     46  9000 ????	       00 e8	   _Score3_Mem =	u
     47  9000 ????
     48  9000 ????	       00 e7	   _Score2_Mem =	t
     49  9000 ????
     50  9000 ????	       00 e6	   _Score1_Mem =	s
     51  9000 ????
     52  9000 ????	       00 e5	   _Bit2_Pause_Clr_Scheme =	r
     53  9000 ????
     54  9000 ????	       00 e5	   _Bit1_BW_Check =	r
     55  9000 ????
     56  9000 ????	       00 e5	   _Bit0_BW_Mem =	r
     57  9000 ????
     58  9000 ????	       00 e5	   _BitOp_02  =	r
     59  9000 ????
     60  9000 ????	       00 df	   _Pause_Color_Tmp =	l
     61  9000 ????
     62  9000 ????	       00 df	   _AP_Dir_Counter =	l
     63  9000 ????
     64  9000 ????	       00 de	   _Pause_Mem_Color_Tmp =	k
     65  9000 ????
     66  9000 ????	       00 de	   _AP_2_Sec_Score_Flip =	k
     67  9000 ????
     68  9000 ????	       00 dd	   _AP_Mem_P0y =	j
     69  9000 ????
     70  9000 ????	       00 dc	   _AP_Mem_P0x =	i
     71  9000 ????
     72  9000 ????	       00 db	   _Pause_Counter_Tmp =	h
     73  9000 ????
     74  9000 ????	       00 db	   _AP_Mem_Dir =	h
     75  9000 ????
     76  9000 ????	       00 a0	   _T5_AP_Dir =	temp5
     77  9000 ????
     78  9000 ????	       00 85	   _WillY     =	player0y
     79  9000 ????
     80  9000 ????	       00 80	   _WillX     =	player0x
     81  9000 ????
     82  9000 ????	       00 86	   _Main_CharY =	player1y
     83  9000 ????
     84  9000 ????	       00 81	   _Main_CharX =	player1x
     85  9000 ????
     86  9000 ????	       00 da	   _Bit7_M1_Dir_Right =	g
     87  9000 ????
     88  9000 ????	       00 da	   _Bit6_M1_Dir_Left =	g
     89  9000 ????
     90  9000 ????	       00 da	   _Bit5_M1_Dir_Down =	g
     91  9000 ????
     92  9000 ????	       00 da	   _Bit4_M1_Dir_Up =	g
     93  9000 ????
     94  9000 ????	       00 da	   _Bit3_P0_Dir_Right =	g
     95  9000 ????
     96  9000 ????	       00 da	   _Bit2_P0_Dir_Left =	g
     97  9000 ????
     98  9000 ????	       00 da	   _Bit1_P0_Dir_Down =	g
     99  9000 ????
    100  9000 ????	       00 da	   _Bit0_P0_Dir_Up =	g
    101  9000 ????
    102  9000 ????	       00 da	   _BitOp_P0_M1_Dir =	g
    103  9000 ????
    104  9000 ????	       00 e2	   _Kill_Count =	o
    105  9000 ????
    106  9000 ????	       00 e1	   _Will_Aftn_AI =	n
    107  9000 ????
    108  9000 ????	       00 e0	   _Ch1_Duration =	m
    109  9000 ????
    110  9000 ????	       00 d7	   _Ch0_Counter =	d
    111  9000 ????
    112  9000 ????	       00 d6	   _Ch0_Duration =	c
    113  9000 ????
    114  9000 ????	       00 d5	   _Ch0_Sound =	b
    115  9000 ????
    116  9000 ????	       00 e4	   _Bitop_Coord_Counter =	q
    117  9000 ????
    118  9000 ????	       00 e3	   _Bitop_Screen_Counter =	p
    119  9000 ????
    120  9000 ????	       00 d9	   _Frame_Counter =	f
    121  9000 ????
    122  9000 ????	       00 d8	   _Master_Counter =	e
    123  9000 ????
    124  9000 ????	       00 d4	   genesispad =	a
    125  9000 ????
    126  9000 ????	       00 2b	   vblank_time =	43
    127  9000 ????	       00 25	   overscan_time =	37
    128  9000 ????	       00 07	   bs_mask    =	7
    129  9000 ????	       00 20	   bankswitch =	32
    130  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    131  9000 ????	       00 01	   PFcolors   =	1
    132  9000 ????	       00 01	   player1colors =	1
    133  9000 ????	       00 01	   playercolors =	1
    134  9000 ????	       00 01	   player1colors =	1
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
      8  9000 ????				      ifconst	bankswitch
      9  9000 ????			  -	      if	bankswitch == 8
     10  9000 ????			  -	      ORG	$1000
     11  9000 ????			  -	      RORG	$D000
     12  9000 ????				      endif
     13  9000 ????			  -	      if	bankswitch == 16
     14  9000 ????			  -	      ORG	$1000
     15  9000 ????			  -	      RORG	$9000
     16  9000 ????				      endif
     17  9000 ????				      if	bankswitch == 32
     18  1000					      ORG	$1000
     19  1000					      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .
     39  1000							; 
     40  1000
     41  1000				   .
     42  1000							; 
     43  1000
     44  1000				   .
     45  1000							; 
     46  1000
     47  1000				   .
     48  1000							; 
     49  1000
     50  1000				   .
     51  1000							; 
     52  1000
     53  1000				   .
     54  1000							; 
     55  1000
     56  1000				   .
     57  1000							; 
     58  1000
     59  1000				   .
     60  1000							; 
     61  1000
     62  1000				   .
     63  1000							; 
     64  1000
     65  1000				   .
     66  1000							; 
     67  1000
     68  1000				   .
     69  1000							; 
     70  1000
     71  1000				   .
     72  1000							; 
     73  1000
     74  1000				   .
     75  1000							; 
     76  1000
     77  1000				   .L00 		;  set kernel_options player1colors playercolors pfcolors
     78  1000
     79  1000				   .L01 		;  set romsize 32k
     80  1000
     81  1000				   .L02 		;  set tv ntsc
     82  1000
     83  1000				   .L03 		;  set optimization inlinerand
     84  1000
     85  1000				   .L04 		;  set smartbranching on
     86  1000
     87  1000				   .
     88  1000							; 
     89  1000
     90  1000				   .
     91  1000							; 
     92  1000
     93  1000				   .
     94  1000							; 
     95  1000
     96  1000				   .
     97  1000							; 
     98  1000
     99  1000				   .
    100  1000							; 
    101  1000
    102  1000				   .
    103  1000							; 
    104  1000
    105  1000				   .
    106  1000							; 
    107  1000
    108  1000				   .
    109  1000							; 
    110  1000
    111  1000				   .
    112  1000							; 
    113  1000
    114  1000				   .
    115  1000							; 
    116  1000
    117  1000				   .
    118  1000							; 
    119  1000
    120  1000				   .
    121  1000							; 
    122  1000
    123  1000				   .
    124  1000							; 
    125  1000
    126  1000				   .
    127  1000							; 
    128  1000
    129  1000				   .
    130  1000							; 
    131  1000
    132  1000				   .
    133  1000							; 
    134  1000
    135  1000				   .
    136  1000							; 
    137  1000
    138  1000				   .
    139  1000							; 
    140  1000
    141  1000				   .
    142  1000							; 
    143  1000
    144  1000				   .
    145  1000							; 
    146  1000
    147  1000				   .
    148  1000							; 
    149  1000
    150  1000				   .
    151  1000							; 
    152  1000
    153  1000				   .
    154  1000							; 
    155  1000
    156  1000				   .
    157  1000							; 
    158  1000
    159  1000				   .
    160  1000							; 
    161  1000
    162  1000				   .
    163  1000							; 
    164  1000
    165  1000				   .
    166  1000							; 
    167  1000
    168  1000				   .
    169  1000							; 
    170  1000
    171  1000				   .
    172  1000							; 
    173  1000
    174  1000				   .
    175  1000							; 
    176  1000
    177  1000				   .
    178  1000							; 
    179  1000
    180  1000				   .L05 		;  dim genesispad = a
    181  1000
    182  1000				   .L06 		;  dim _Master_Counter  =  e
    183  1000
    184  1000				   .L07 		;  dim _Frame_Counter	=  f
    185  1000
    186  1000				   .
    187  1000							; 
    188  1000
    189  1000				   .
    190  1000							; 
    191  1000
    192  1000				   .
    193  1000							; 
    194  1000
    195  1000				   .
    196  1000							; 
    197  1000
    198  1000				   .
    199  1000							; 
    200  1000
    201  1000				   .L08 		;  dim _Bitop_Screen_Counter  =  p
    202  1000
    203  1000				   .L09 		;  dim _Bitop_Coord_Counter  =  q
    204  1000
    205  1000				   .
    206  1000							; 
    207  1000
    208  1000				   .
    209  1000							; 
    210  1000
    211  1000				   .
    212  1000							; 
    213  1000
    214  1000				   .
    215  1000							; 
    216  1000
    217  1000				   .
    218  1000							; 
    219  1000
    220  1000				   .L010		;  dim _Ch0_Sound  =  b
    221  1000
    222  1000				   .L011		;  dim _Ch0_Duration  =  c
    223  1000
    224  1000				   .L012		;  dim _Ch0_Counter  =  d
    225  1000
    226  1000				   .
    227  1000							; 
    228  1000
    229  1000				   .
    230  1000							; 
    231  1000
    232  1000				   .
    233  1000							; 
    234  1000
    235  1000				   .
    236  1000							; 
    237  1000
    238  1000				   .L013		;  dim _Ch1_Duration  =  m
    239  1000
    240  1000				   .
    241  1000							; 
    242  1000
    243  1000				   .
    244  1000							; 
    245  1000
    246  1000				   .
    247  1000							; 
    248  1000
    249  1000				   .
    250  1000							; 
    251  1000
    252  1000				   .L014		;  dim _Will_Aftn_AI  =  n
    253  1000
    254  1000				   .
    255  1000							; 
    256  1000
    257  1000				   .
    258  1000							; 
    259  1000
    260  1000				   .
    261  1000							; 
    262  1000
    263  1000				   .
    264  1000							; 
    265  1000
    266  1000				   .
    267  1000							; 
    268  1000
    269  1000				   .L015		;  dim _Kill_Count  =	o
    270  1000
    271  1000				   .
    272  1000							; 
    273  1000
    274  1000				   .
    275  1000							; 
    276  1000
    277  1000				   .
    278  1000							; 
    279  1000
    280  1000				   .
    281  1000							; 
    282  1000
    283  1000				   .L016		;  dim _BitOp_P0_M1_Dir  =  g
    284  1000
    285  1000				   .L017		;  dim _Bit0_P0_Dir_Up  =  g
    286  1000
    287  1000				   .L018		;  dim _Bit1_P0_Dir_Down  =  g
    288  1000
    289  1000				   .L019		;  dim _Bit2_P0_Dir_Left  =  g
    290  1000
    291  1000				   .L020		;  dim _Bit3_P0_Dir_Right  =  g
    292  1000
    293  1000				   .L021		;  dim _Bit4_M1_Dir_Up  =  g
    294  1000
    295  1000				   .L022		;  dim _Bit5_M1_Dir_Down  =  g
    296  1000
    297  1000				   .L023		;  dim _Bit6_M1_Dir_Left  =  g
    298  1000
    299  1000				   .L024		;  dim _Bit7_M1_Dir_Right  =  g
    300  1000
    301  1000				   .
    302  1000							; 
    303  1000
    304  1000				   .
    305  1000							; 
    306  1000
    307  1000				   .
    308  1000							; 
    309  1000
    310  1000				   .
    311  1000							; 
    312  1000
    313  1000				   .
    314  1000							; 
    315  1000
    316  1000				   .L025		;  dim _Main_CharX  =	player1x
    317  1000
    318  1000				   .L026		;  dim _Main_CharY  =	player1y
    319  1000
    320  1000				   .
    321  1000							; 
    322  1000
    323  1000				   .L027		;  dim _WillX	=  player0x
    324  1000
    325  1000				   .L028		;  dim _WillY	=  player0y
    326  1000
    327  1000				   .
    328  1000							; 
    329  1000
    330  1000				   .
    331  1000							; 
    332  1000
    333  1000				   .
    334  1000							; 
    335  1000
    336  1000				   .
    337  1000							; 
    338  1000
    339  1000				   .
    340  1000							; 
    341  1000
    342  1000				   .
    343  1000							; 
    344  1000
    345  1000				   .L029		;  dim _T5_AP_Dir  =  temp5
    346  1000
    347  1000				   .
    348  1000							; 
    349  1000
    350  1000				   .
    351  1000							; 
    352  1000
    353  1000				   .
    354  1000							; 
    355  1000
    356  1000				   .
    357  1000							; 
    358  1000
    359  1000				   .
    360  1000							; 
    361  1000
    362  1000				   .
    363  1000							; 
    364  1000
    365  1000				   .
    366  1000							; 
    367  1000
    368  1000				   .
    369  1000							; 
    370  1000
    371  1000				   .L030		;  dim _AP_Mem_Dir  =	h
    372  1000
    373  1000				   .
    374  1000							; 
    375  1000
    376  1000				   .
    377  1000							; 
    378  1000
    379  1000				   .
    380  1000							; 
    381  1000
    382  1000				   .
    383  1000							; 
    384  1000
    385  1000				   .
    386  1000							; 
    387  1000
    388  1000				   .
    389  1000							; 
    390  1000
    391  1000				   .L031		;  dim _Pause_Counter_Tmp  =  h
    392  1000
    393  1000				   .
    394  1000							; 
    395  1000
    396  1000				   .
    397  1000							; 
    398  1000
    399  1000				   .
    400  1000							; 
    401  1000
    402  1000				   .
    403  1000							; 
    404  1000
    405  1000				   .
    406  1000							; 
    407  1000
    408  1000				   .
    409  1000							; 
    410  1000
    411  1000				   .
    412  1000							; 
    413  1000
    414  1000				   .L032		;  dim _AP_Mem_P0x  =	i
    415  1000
    416  1000				   .L033		;  dim _AP_Mem_P0y  =	j
    417  1000
    418  1000				   .
    419  1000							; 
    420  1000
    421  1000				   .
    422  1000							; 
    423  1000
    424  1000				   .
    425  1000							; 
    426  1000
    427  1000				   .
    428  1000							; 
    429  1000
    430  1000				   .
    431  1000							; 
    432  1000
    433  1000				   .
    434  1000							; 
    435  1000
    436  1000				   .L034		;  dim _AP_2_Sec_Score_Flip  =  k
    437  1000
    438  1000				   .
    439  1000							; 
    440  1000
    441  1000				   .
    442  1000							; 
    443  1000
    444  1000				   .
    445  1000							; 
    446  1000
    447  1000				   .
    448  1000							; 
    449  1000
    450  1000				   .
    451  1000							; 
    452  1000
    453  1000				   .
    454  1000							; 
    455  1000
    456  1000				   .L035		;  dim _Pause_Mem_Color_Tmp  =  k
    457  1000
    458  1000				   .
    459  1000							; 
    460  1000
    461  1000				   .
    462  1000							; 
    463  1000
    464  1000				   .
    465  1000							; 
    466  1000
    467  1000				   .
    468  1000							; 
    469  1000
    470  1000				   .
    471  1000							; 
    472  1000
    473  1000				   .
    474  1000							; 
    475  1000
    476  1000				   .L036		;  dim _AP_Dir_Counter  =  l
    477  1000
    478  1000				   .
    479  1000							; 
    480  1000
    481  1000				   .
    482  1000							; 
    483  1000
    484  1000				   .
    485  1000							; 
    486  1000
    487  1000				   .
    488  1000							; 
    489  1000
    490  1000				   .
    491  1000							; 
    492  1000
    493  1000				   .
    494  1000							; 
    495  1000
    496  1000				   .L037		;  dim _Pause_Color_Tmp  =  l
    497  1000
    498  1000				   .
    499  1000							; 
    500  1000
    501  1000				   .
    502  1000							; 
    503  1000
    504  1000				   .
    505  1000							; 
    506  1000
    507  1000				   .
    508  1000							; 
    509  1000
    510  1000				   .
    511  1000							; 
    512  1000
    513  1000				   .L038		;  dim _BitOp_02  =  r
    514  1000
    515  1000				   .
    516  1000							; 
    517  1000
    518  1000				   .
    519  1000							; 
    520  1000
    521  1000				   .
    522  1000							; 
    523  1000
    524  1000				   .
    525  1000							; 
    526  1000
    527  1000				   .L039		;  dim _Bit0_BW_Mem  =  r
    528  1000
    529  1000				   .
    530  1000							; 
    531  1000
    532  1000				   .
    533  1000							; 
    534  1000
    535  1000				   .
    536  1000							; 
    537  1000
    538  1000				   .
    539  1000							; 
    540  1000
    541  1000				   .L040		;  dim _Bit1_BW_Check	=  r
    542  1000
    543  1000				   .
    544  1000							; 
    545  1000
    546  1000				   .
    547  1000							; 
    548  1000
    549  1000				   .
    550  1000							; 
    551  1000
    552  1000				   .
    553  1000							; 
    554  1000
    555  1000				   .L041		;  dim _Bit2_Pause_Clr_Scheme	=  r
    556  1000
    557  1000				   .
    558  1000							; 
    559  1000
    560  1000				   .
    561  1000							; 
    562  1000
    563  1000				   .
    564  1000							; 
    565  1000
    566  1000				   .
    567  1000							; 
    568  1000
    569  1000				   .
    570  1000							; 
    571  1000
    572  1000				   .
    573  1000							; 
    574  1000
    575  1000				   .
    576  1000							; 
    577  1000
    578  1000				   .
    579  1000							; 
    580  1000
    581  1000				   .L042		;  dim _Score1_Mem  =	s
    582  1000
    583  1000				   .L043		;  dim _Score2_Mem  =	t
    584  1000
    585  1000				   .L044		;  dim _Score3_Mem  =	u
    586  1000
    587  1000				   .
    588  1000							; 
    589  1000
    590  1000				   .
    591  1000							; 
    592  1000
    593  1000				   .
    594  1000							; 
    595  1000
    596  1000				   .
    597  1000							; 
    598  1000
    599  1000				   .L045		;  dim _High_Score1  =  v
    600  1000
    601  1000				   .L046		;  dim _High_Score2  =  w
    602  1000
    603  1000				   .L047		;  dim _High_Score3  =  x
    604  1000
    605  1000				   .
    606  1000							; 
    607  1000
    608  1000				   .
    609  1000							; 
    610  1000
    611  1000				   .
    612  1000							; 
    613  1000
    614  1000				   .
    615  1000							; 
    616  1000
    617  1000				   .
    618  1000							; 
    619  1000
    620  1000				   .L048		;  dim _BitOp_01  =  y
    621  1000
    622  1000				   .L049		;  dim _Bit0_Reset_Restrainer	=  y
    623  1000
    624  1000				   .L050		;  dim _Bit1_FireB_Restrainer	=  y
    625  1000
    626  1000				   .L051		;  dim _Bit2_Game_Control  =  y
    627  1000
    628  1000				   .L052		;  dim _Bit3_Auto_Play  =  y
    629  1000
    630  1000				   .L053		;  dim _Bit6_Swap_Scores  =  y
    631  1000
    632  1000				   .L054		;  dim _Bit7_M1_Moving  =  y
    633  1000
    634  1000				   .
    635  1000							; 
    636  1000
    637  1000				   .
    638  1000							; 
    639  1000
    640  1000				   .
    641  1000							; 
    642  1000
    643  1000				   .
    644  1000							; 
    645  1000
    646  1000				   .L055		;  dim rand16	=  z
    647  1000
    648  1000				   .
    649  1000							; 
    650  1000
    651  1000				   .
    652  1000							; 
    653  1000
    654  1000				   .
    655  1000							; 
    656  1000
    657  1000				   .
    658  1000							; 
    659  1000
    660  1000				   .
    661  1000							; 
    662  1000
    663  1000				   .
    664  1000							; 
    665  1000
    666  1000				   .
    667  1000							; 
    668  1000
    669  1000				   .
    670  1000							; 
    671  1000
    672  1000				   .L056		;  dim _sc1  =  score
    673  1000
    674  1000				   .L057		;  dim _sc2  =  score + 1
    675  1000
    676  1000				   .L058		;  dim _sc3  =  score + 2
    677  1000
    678  1000				   .
    679  1000							; 
    680  1000
    681  1000				   .
    682  1000							; 
    683  1000
    684  1000				   .
    685  1000							; 
    686  1000
    687  1000				   .
    688  1000							; 
    689  1000
    690  1000				   .
    691  1000							; 
    692  1000
    693  1000				   .
    694  1000							; 
    695  1000
    696  1000				   .
    697  1000							; 
    698  1000
    699  1000				   .
    700  1000							; 
    701  1000
    702  1000				   .L059		;  dim _Lost_Soul_X  =  ballx
    703  1000
    704  1000				   .L060		;  dim _Lost_Soul_Y  =  bally
    705  1000
    706  1000				   .
    707  1000							; 
    708  1000
    709  1000				   .
    710  1000							; 
    711  1000
    712  1000				   .
    713  1000							; 
    714  1000
    715  1000				   .
    716  1000							; 
    717  1000
    718  1000				   .
    719  1000							; 
    720  1000
    721  1000				   .
    722  1000							; 
    723  1000
    724  1000				   .
    725  1000							; 
    726  1000
    727  1000				   .L061		;  const _M_Edge_Top  =  2
    728  1000
    729  1000				   .L062		;  const _M_Edge_Bottom  =  88
    730  1000
    731  1000				   .L063		;  const _M_Edge_Left	=  2
    732  1000
    733  1000				   .L064		;  const _M_Edge_Right  =  159
    734  1000
    735  1000				   .
    736  1000							; 
    737  1000
    738  1000				   .
    739  1000							; 
    740  1000
    741  1000				   .L065		;  const pfscore = 1
    742  1000
    743  1000				   .
    744  1000							; 
    745  1000
    746  1000				   .
    747  1000							; 
    748  1000
    749  1000				   .
    750  1000							; 
    751  1000
    752  1000				   .
    753  1000							; 
    754  1000
    755  1000				   .
    756  1000							; 
    757  1000
    758  1000				   .
    759  1000							; 
    760  1000
    761  1000				   .
    762  1000							; 
    763  1000
    764  1000				   .
    765  1000							; 
    766  1000
    767  1000				   .
    768  1000							; 
    769  1000
    770  1000				   .
    771  1000							; 
    772  1000
    773  1000				   .
    774  1000							; 
    775  1000
    776  1000				   .__Start_Restart
    777  1000							; __Start_Restart
    778  1000
    779  1000				   .
    780  1000							; 
    781  1000
    782  1000				   .
    783  1000							; 
    784  1000
    785  1000				   .
    786  1000							; 
    787  1000
    788  1000				   .
    789  1000							; 
    790  1000
    791  1000				   .
    792  1000							; 
    793  1000
    794  1000				   .
    795  1000							; 
    796  1000
    797  1000				   .L066		;  AUDV0  =  0  :  AUDV1  =  0
    798  1000
    799  1000		       a9 00		      LDA	#0
    800  1002		       85 19		      STA	AUDV0
    801  1004		       85 1a		      STA	AUDV1
    802  1006				   .
    803  1006							; 
    804  1006
    805  1006				   .
    806  1006							; 
    807  1006
    808  1006				   .
    809  1006							; 
    810  1006
    811  1006				   .
    812  1006							; 
    813  1006
    814  1006				   .
    815  1006							; 
    816  1006
    817  1006				   .
    818  1006							; 
    819  1006
    820  1006				   .
    821  1006							; 
    822  1006
    823  1006				   .
    824  1006							; 
    825  1006
    826  1006				   .
    827  1006							; 
    828  1006
    829  1006				   .
    830  1006							; 
    831  1006
    832  1006				   .
    833  1006							; 
    834  1006
    835  1006				   .L067		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
    836  1006
    837  1006		       a9 00		      LDA	#0
    838  1008		       85 d4		      STA	a
    839  100a		       85 d5		      STA	b
    840  100c		       85 d6		      STA	c
    841  100e		       85 d7		      STA	d
    842  1010		       85 d8		      STA	e
    843  1012		       85 d9		      STA	f
    844  1014		       85 da		      STA	g
    845  1016		       85 db		      STA	h
    846  1018		       85 dc		      STA	i
    847  101a				   .L068		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
    848  101a
    849  101a		       a9 00		      LDA	#0
    850  101c		       85 dd		      STA	j
    851  101e		       85 de		      STA	k
    852  1020		       85 df		      STA	l
    853  1022		       85 e0		      STA	m
    854  1024		       85 e1		      STA	n
    855  1026		       85 e2		      STA	o
    856  1028		       85 e3		      STA	p
    857  102a		       85 e4		      STA	q
    858  102c		       85 e5		      STA	r
    859  102e				   .L069		;  s  =  0  :	t  =  0  :  u  =  0
    860  102e
    861  102e		       a9 00		      LDA	#0
    862  1030		       85 e6		      STA	s
    863  1032		       85 e7		      STA	t
    864  1034		       85 e8		      STA	u
    865  1036				   .
    866  1036							; 
    867  1036
    868  1036				   .
    869  1036							; 
    870  1036
    871  1036				   .
    872  1036							; 
    873  1036
    874  1036				   .
    875  1036							; 
    876  1036
    877  1036				   .
    878  1036							; 
    879  1036
    880  1036				   .
    881  1036							; 
    882  1036
    883  1036				   .
    884  1036							; 
    885  1036
    886  1036				   .
    887  1036							; 
    888  1036
    889  1036				   .
    890  1036							; 
    891  1036
    892  1036				   .L070		;  _BitOp_01  =  _BitOp_01  &	%00000100
    893  1036
    894  1036		       a5 ec		      LDA	_BitOp_01
    895  1038		       29 04		      AND	#%00000100
    896  103a		       85 ec		      STA	_BitOp_01
    897  103c				   .
    898  103c							; 
    899  103c
    900  103c				   .
    901  103c							; 
    902  103c
    903  103c				   .
    904  103c							; 
    905  103c
    906  103c				   .
    907  103c							; 
    908  103c
    909  103c				   .
    910  103c							; 
    911  103c
    912  103c				   .
    913  103c							; 
    914  103c
    915  103c				   .L071		;  _Main_CharY  =  200  :  _WillY  =  200  :  _Lost_Soul_Y  =	200
    916  103c
    917  103c		       a9 c8		      LDA	#200
    918  103e		       85 86		      STA	_Main_CharY
    919  1040		       85 85		      STA	_WillY
    920  1042		       85 89		      STA	_Lost_Soul_Y
    921  1044				   .
    922  1044							; 
    923  1044
    924  1044				   .
    925  1044							; 
    926  1044
    927  1044				   .
    928  1044							; 
    929  1044
    930  1044				   .
    931  1044							; 
    932  1044
    933  1044				   .
    934  1044							; 
    935  1044
    936  1044				   .genesisdetect
    937  1044							; genesisdetect
    938  1044
    939  1044				   .L072		;  genesispad = genesispad  &	$fe
    940  1044
    941  1044		       a5 d4		      LDA	genesispad
    942  1046		       29 fe		      AND	#$fe
    943  1048		       85 d4		      STA	genesispad
    944  104a				   .L073		;  if INPT1{7} then genesispad = genesispad  |  1
    945  104a
    946  104a		       24 09		      BIT	INPT1
    947  104c		       10 06		      BPL	.skipL073
    948  104e				   .condpart0
    949  104e		       a5 d4		      LDA	genesispad
    950  1050		       09 01		      ORA	#1
    951  1052		       85 d4		      STA	genesispad
    952  1054				   .skipL073
    953  1054				   .L074		;  if genesispad{0} then COLUBK = $8a
    954  1054
    955  1054		       a5 d4		      LDA	genesispad
    956  1056		       4a		      LSR
    957  1057		       90 04		      BCC	.skipL074
    958  1059				   .condpart1
    959  1059		       a9 8a		      LDA	#$8a
    960  105b		       85 09		      STA	COLUBK
    961  105d				   .skipL074
    962  105d				   .L075		;  if !genesispad{0} then COLUBK = $48
    963  105d
    964  105d		       a5 d4		      LDA	genesispad
    965  105f		       4a		      LSR
    966  1060		       b0 04		      BCS	.skipL075
    967  1062				   .condpart2
    968  1062		       a9 48		      LDA	#$48
    969  1064		       85 09		      STA	COLUBK
    970  1066				   .skipL075
    971  1066				   .
    972  1066							; 
    973  1066
    974  1066				   .
    975  1066							; 
    976  1066
    977  1066				   .
    978  1066							; 
    979  1066
    980  1066				   .
    981  1066							; 
    982  1066
    983  1066				   .
    984  1066							; 
    985  1066
    986  1066				   .
    987  1066							; 
    988  1066
    989  1066				   .
    990  1066							; 
    991  1066
    992  1066				   .
    993  1066							; 
    994  1066
    995  1066				   .
    996  1066							; 
    997  1066
    998  1066				   .L076		;  if _Bit2_Game_Control{2} then goto __Main_Loop_Setup bank2
    999  1066
   1000  1066		       a5 ec		      LDA	_Bit2_Game_Control
   1001  1068		       29 04		      AND	#4
   1002  106a		       f0 12		      BEQ	.skipL076
   1003  106c				   .condpart3
   1004  106c		       85 ee		      sta	temp7
   1005  106e		       a9 2f		      lda	#>(.__Main_Loop_Setup-1)
   1006  1070		       48		      pha
   1007  1071		       a9 ff		      lda	#<(.__Main_Loop_Setup-1)
   1008  1073		       48		      pha
   1009  1074		       a5 ee		      lda	temp7
   1010  1076		       48		      pha
   1011  1077		       8a		      txa
   1012  1078		       48		      pha
   1013  1079		       a2 02		      ldx	#2
   1014  107b		       4c eb ff 	      jmp	BS_jsr
   1015  107e				   .skipL076
   1016  107e				   .
   1017  107e							; 
   1018  107e
   1019  107e				   .
   1020  107e							; 
   1021  107e
   1022  107e				   .
   1023  107e							; 
   1024  107e
   1025  107e				   .
   1026  107e							; 
   1027  107e
   1028  107e				   .
   1029  107e							; 
   1030  107e
   1031  107e				   .
   1032  107e							; 
   1033  107e
   1034  107e				   .
   1035  107e							; 
   1036  107e
   1037  107e				   .
   1038  107e							; 
   1039  107e
   1040  107e				   .
   1041  107e							; 
   1042  107e
   1043  107e				   .
   1044  107e							; 
   1045  107e
   1046  107e				   .
   1047  107e							; 
   1048  107e
   1049  107e				   .__Title_Screen_Setup
   1050  107e							; __Title_Screen_Setup
   1051  107e
   1052  107e				   .
   1053  107e							; 
   1054  107e
   1055  107e				   .
   1056  107e							; 
   1057  107e
   1058  107e				   .
   1059  107e							; 
   1060  107e
   1061  107e				   .
   1062  107e							; 
   1063  107e
   1064  107e				   .L077		;  pfscore1  =  0  :  pfscore2  =  0  :  scorecolor  =  0
   1065  107e
   1066  107e		       a9 00		      LDA	#0
   1067  1080		       85 f2		      STA	pfscore1
   1068  1082		       85 f3		      STA	pfscore2
   1069  1084		       85 a3		      STA	scorecolor
   1070  1086				   .
   1071  1086							; 
   1072  1086
   1073  1086				   .
   1074  1086							; 
   1075  1086
   1076  1086				   .
   1077  1086							; 
   1078  1086
   1079  1086				   .
   1080  1086							; 
   1081  1086
   1082  1086				   .
   1083  1086							; 
   1084  1086
   1085  1086				   .
   1086  1086							; 
   1087  1086
   1088  1086				   .L078		;  COLUBK  =  0
   1089  1086
   1090  1086		       a9 00		      LDA	#0
   1091  1088		       85 09		      STA	COLUBK
   1092  108a				   .
   1093  108a							; 
   1094  108a
   1095  108a				   .
   1096  108a							; 
   1097  108a
   1098  108a				   .
   1099  108a							; 
   1100  108a
   1101  108a				   .
   1102  108a							; 
   1103  108a
   1104  108a				   .
   1105  108a							; 
   1106  108a
   1107  108a				   .
   1108  108a							; 
   1109  108a
   1110  108a				   .
   1111  108a							; 
   1112  108a
   1113  108a				   .
   1114  108a							; 
   1115  108a
   1116  108a				   .
   1117  108a							; 
   1118  108a
   1119  108a				   .
   1120  108a							; 
   1121  108a
   1122  108a				   .
   1123  108a							; 
   1124  108a
   1125  108a				   .L079		;  _Bit0_Reset_Restrainer{0}  =  1
   1126  108a
   1127  108a		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1128  108c		       09 01		      ORA	#1
   1129  108e		       85 ec		      STA	_Bit0_Reset_Restrainer
   1130  1090				   .
   1131  1090							; 
   1132  1090
   1133  1090				   .
   1134  1090							; 
   1135  1090
   1136  1090				   .L080		;  playfieldpos  =  8
   1137  1090
   1138  1090		       a9 08		      LDA	#8
   1139  1092		       85 ef		      STA	playfieldpos
   1140  1094				   .
   1141  1094							; 
   1142  1094
   1143  1094				   .
   1144  1094							; 
   1145  1094
   1146  1094				   .
   1147  1094							; 
   1148  1094
   1149  1094				   .
   1150  1094							; 
   1151  1094
   1152  1094				   .
   1153  1094							; 
   1154  1094
   1155  1094				   .
   1156  1094							; 
   1157  1094
   1158  1094				   .
   1159  1094							; 
   1160  1094
   1161  1094				   .
   1162  1094							; 
   1163  1094
   1164  1094				   .
   1165  1094							; 
   1166  1094
   1167  1094				   .
   1168  1094							; 
   1169  1094
   1170  1094				   .
   1171  1094							; 
   1172  1094
   1173  1094				   .__Title_Screen_Loop
   1174  1094							; __Title_Screen_Loop
   1175  1094
   1176  1094				   .
   1177  1094							; 
   1178  1094
   1179  1094				   .
   1180  1094							; 
   1181  1094
   1182  1094				   .
   1183  1094							; 
   1184  1094
   1185  1094				   .
   1186  1094							; 
   1187  1094
   1188  1094				   .
   1189  1094							; 
   1190  1094
   1191  1094				   .
   1192  1094							; 
   1193  1094
   1194  1094				   .
   1195  1094							; 
   1196  1094
   1197  1094				   .L081		;  gosub titledrawscreen bank4
   1198  1094
   1199  1094		       85 ee		      sta	temp7
   1200  1096		       a9 10		      lda	#>(ret_point1-1)
   1201  1098		       48		      pha
   1202  1099		       a9 ab		      lda	#<(ret_point1-1)
   1203  109b		       48		      pha
   1204  109c		       a9 6f		      lda	#>(.titledrawscreen-1)
   1205  109e		       48		      pha
   1206  109f		       a9 ff		      lda	#<(.titledrawscreen-1)
   1207  10a1		       48		      pha
   1208  10a2		       a5 ee		      lda	temp7
   1209  10a4		       48		      pha
   1210  10a5		       8a		      txa
   1211  10a6		       48		      pha
   1212  10a7		       a2 04		      ldx	#4
   1213  10a9		       4c eb ff 	      jmp	BS_jsr
   1214  10ac				   ret_point1
   1215  10ac				   .
   1216  10ac							; 
   1217  10ac
   1218  10ac				   .
   1219  10ac							; 
   1220  10ac
   1221  10ac				   .
   1222  10ac							; 
   1223  10ac
   1224  10ac				   .
   1225  10ac							; 
   1226  10ac
   1227  10ac				   .
   1228  10ac							; 
   1229  10ac
   1230  10ac				   .
   1231  10ac							; 
   1232  10ac
   1233  10ac				   .
   1234  10ac							; 
   1235  10ac
   1236  10ac				   .
   1237  10ac							; 
   1238  10ac
   1239  10ac				   .
   1240  10ac							; 
   1241  10ac
   1242  10ac				   .
   1243  10ac							; 
   1244  10ac
   1245  10ac				   .
   1246  10ac							; 
   1247  10ac
   1248  10ac				   .
   1249  10ac							; 
   1250  10ac
   1251  10ac				   .
   1252  10ac							; 
   1253  10ac
   1254  10ac				   .L082		;  _Master_Counter  =	_Master_Counter  +  1
   1255  10ac
   1256  10ac		       e6 d8		      INC	_Master_Counter
   1257  10ae				   .
   1258  10ae							; 
   1259  10ae
   1260  10ae				   .
   1261  10ae							; 
   1262  10ae
   1263  10ae				   .
   1264  10ae							; 
   1265  10ae
   1266  10ae				   .
   1267  10ae							; 
   1268  10ae
   1269  10ae				   .L083		;  if _Master_Counter	<  30 then goto __TS_AP_Skip
   1270  10ae
   1271  10ae		       a5 d8		      LDA	_Master_Counter
   1272  10b0		       c9 1e		      CMP	#30
   1273  10b2		       b0 03		      BCS	.skipL083
   1274  10b4				   .condpart4
   1275  10b4		       4c db 10 	      jmp	.__TS_AP_Skip
   1276  10b7
   1277  10b7				   .skipL083
   1278  10b7				   .
   1279  10b7							; 
   1280  10b7
   1281  10b7				   .
   1282  10b7							; 
   1283  10b7
   1284  10b7				   .
   1285  10b7							; 
   1286  10b7
   1287  10b7				   .
   1288  10b7							; 
   1289  10b7
   1290  10b7				   .L084		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   1291  10b7
   1292  10b7		       e6 d9		      INC	_Frame_Counter
   1293  10b9		       a9 00		      LDA	#0
   1294  10bb		       85 d8		      STA	_Master_Counter
   1295  10bd				   .
   1296  10bd							; 
   1297  10bd
   1298  10bd				   .
   1299  10bd							; 
   1300  10bd
   1301  10bd				   .
   1302  10bd							; 
   1303  10bd
   1304  10bd				   .
   1305  10bd							; 
   1306  10bd
   1307  10bd				   .
   1308  10bd							; 
   1309  10bd
   1310  10bd				   .
   1311  10bd							; 
   1312  10bd
   1313  10bd				   .
   1314  10bd							; 
   1315  10bd
   1316  10bd				   .L085		;  if _Frame_Counter  >  9 then _Bit3_Auto_Play{3}  =	1  :  goto __Main_Loop_Setup bank2
   1317  10bd
   1318  10bd		       a9 09		      LDA	#9
   1319  10bf		       c5 d9		      CMP	_Frame_Counter
   1320  10c1		       b0 18		      BCS	.skipL085
   1321  10c3				   .condpart5
   1322  10c3		       a5 ec		      LDA	_Bit3_Auto_Play
   1323  10c5		       09 08		      ORA	#8
   1324  10c7		       85 ec		      STA	_Bit3_Auto_Play
   1325  10c9		       85 ee		      sta	temp7
   1326  10cb		       a9 2f		      lda	#>(.__Main_Loop_Setup-1)
   1327  10cd		       48		      pha
   1328  10ce		       a9 ff		      lda	#<(.__Main_Loop_Setup-1)
   1329  10d0		       48		      pha
   1330  10d1		       a5 ee		      lda	temp7
   1331  10d3		       48		      pha
   1332  10d4		       8a		      txa
   1333  10d5		       48		      pha
   1334  10d6		       a2 02		      ldx	#2
   1335  10d8		       4c eb ff 	      jmp	BS_jsr
   1336  10db				   .skipL085
   1337  10db				   .
   1338  10db							; 
   1339  10db
   1340  10db				   .__TS_AP_Skip
   1341  10db							; __TS_AP_Skip
   1342  10db
   1343  10db				   .
   1344  10db							; 
   1345  10db
   1346  10db				   .
   1347  10db							; 
   1348  10db
   1349  10db				   .
   1350  10db							; 
   1351  10db
   1352  10db				   .
   1353  10db							; 
   1354  10db
   1355  10db				   .
   1356  10db							; 
   1357  10db
   1358  10db				   .
   1359  10db							; 
   1360  10db
   1361  10db				   .
   1362  10db							; 
   1363  10db
   1364  10db				   .L086		;  drawscreen
   1365  10db
   1366  10db		       85 ee		      sta	temp7
   1367  10dd		       a9 10		      lda	#>(ret_point2-1)
   1368  10df		       48		      pha
   1369  10e0		       a9 f2		      lda	#<(ret_point2-1)
   1370  10e2		       48		      pha
   1371  10e3		       a9 f4		      lda	#>(drawscreen-1)
   1372  10e5		       48		      pha
   1373  10e6		       a9 3b		      lda	#<(drawscreen-1)
   1374  10e8		       48		      pha
   1375  10e9		       a5 ee		      lda	temp7
   1376  10eb		       48		      pha
   1377  10ec		       8a		      txa
   1378  10ed		       48		      pha
   1379  10ee		       a2 08		      ldx	#8
   1380  10f0		       4c eb ff 	      jmp	BS_jsr
   1381  10f3				   ret_point2
   1382  10f3				   .
   1383  10f3							; 
   1384  10f3
   1385  10f3				   .
   1386  10f3							; 
   1387  10f3
   1388  10f3				   .
   1389  10f3							; 
   1390  10f3
   1391  10f3				   .
   1392  10f3							; 
   1393  10f3
   1394  10f3				   .
   1395  10f3							; 
   1396  10f3
   1397  10f3				   .
   1398  10f3							; 
   1399  10f3
   1400  10f3				   .
   1401  10f3							; 
   1402  10f3
   1403  10f3				   .
   1404  10f3							; 
   1405  10f3
   1406  10f3				   .
   1407  10f3							; 
   1408  10f3
   1409  10f3				   .
   1410  10f3							; 
   1411  10f3
   1412  10f3				   .
   1413  10f3							; 
   1414  10f3
   1415  10f3				   .
   1416  10f3							; 
   1417  10f3
   1418  10f3				   .
   1419  10f3							; 
   1420  10f3
   1421  10f3				   .
   1422  10f3							; 
   1423  10f3
   1424  10f3				   .L087		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
   1425  10f3
   1426  10f3		       a9 01		      lda	#1
   1427  10f5		       2c 82 02 	      bit	SWCHB
   1428  10f8		       f0 0d		      BEQ	.skipL087
   1429  10fa				   .condpart6
   1430  10fa		       24 0c		      bit	INPT4
   1431  10fc		       10 09		      BPL	.skip6then
   1432  10fe				   .condpart7
   1433  10fe		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1434  1100		       29 fe		      AND	#254
   1435  1102		       85 ec		      STA	_Bit0_Reset_Restrainer
   1436  1104		       4c 94 10 	      jmp	.__Title_Screen_Loop
   1437  1107
   1438  1107				   .skip6then
   1439  1107				   .skipL087
   1440  1107				   .
   1441  1107							; 
   1442  1107
   1443  1107				   .
   1444  1107							; 
   1445  1107
   1446  1107				   .
   1447  1107							; 
   1448  1107
   1449  1107				   .
   1450  1107							; 
   1451  1107
   1452  1107				   .
   1453  1107							; 
   1454  1107
   1455  1107				   .L088		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   1456  1107
   1457  1107		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1458  1109		       4a		      LSR
   1459  110a		       90 03		      BCC	.skipL088
   1460  110c				   .condpart8
   1461  110c		       4c 94 10 	      jmp	.__Title_Screen_Loop
   1462  110f
   1463  110f				   .skipL088
   1464  110f				   .
   1465  110f							; 
   1466  110f
   1467  110f				   .
   1468  110f							; 
   1469  110f
   1470  110f				   .
   1471  110f							; 
   1472  110f
   1473  110f				   .
   1474  110f							; 
   1475  110f
   1476  110f				   .L089		;  _Bit2_Game_Control{2}  =  1
   1477  110f
   1478  110f		       a5 ec		      LDA	_Bit2_Game_Control
   1479  1111		       09 04		      ORA	#4
   1480  1113		       85 ec		      STA	_Bit2_Game_Control
   1481  1115				   .
   1482  1115							; 
   1483  1115
   1484  1115				   .
   1485  1115							; 
   1486  1115
   1487  1115				   .
   1488  1115							; 
   1489  1115
   1490  1115				   .
   1491  1115							; 
   1492  1115
   1493  1115				   .L090		;  goto __Start_Restart
   1494  1115
   1495  1115		       4c 00 10 	      jmp	.__Start_Restart
   1496  1118
   1497  1118				   .
   1498  1118							; 
   1499  1118
   1500  1118				   .
   1501  1118							; 
   1502  1118
   1503  1118				   .L091		;  bank 2
   1504  1118
   1505  1118					      if	ECHO1
      3772 bytes of ROM space left in bank 1
   1506  1118					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1507  1118					      endif
   1508  1118		       00 01	   ECHO1      =	1
   1509  1fd4					      ORG	$1FF4-bscode_length
   1510  1fd4					      RORG	$1FF4-bscode_length
   1511  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1512  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   1513  1fd6				  -	      stx	FASTFETCH
   1514  1fd6					      endif
   1515  1fd6		       9a		      txs
   1516  1fd7				  -	      if	bankswitch == 64
   1517  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1518  1fd7					      else
   1519  1fd7		       a9 f2		      lda	#>(start-1)
   1520  1fd9					      endif
   1521  1fd9		       48		      pha
   1522  1fda		       a9 51		      lda	#<(start-1)
   1523  1fdc		       48		      pha
   1524  1fdd		       48		      pha
   1525  1fde		       8a		      txa
   1526  1fdf		       48		      pha
   1527  1fe0		       ba		      tsx
   1528  1fe1					      if	bankswitch != 64
   1529  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   1530  1fe3		       2a		      rol
   1531  1fe4		       2a		      rol
   1532  1fe5		       2a		      rol
   1533  1fe6		       2a		      rol
   1534  1fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1535  1fe9		       aa		      tax
   1536  1fea		       e8		      inx
   1537  1feb				  -	      else
   1538  1feb				  -	      lda	4,x	; get high byte of return address
   1539  1feb				  -	      tay
   1540  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1541  1feb				  -	      sta	4,x
   1542  1feb				  -	      tya
   1543  1feb				  -	      lsr
   1544  1feb				  -	      lsr
   1545  1feb				  -	      lsr
   1546  1feb				  -	      lsr
   1547  1feb				  -	      tax
   1548  1feb				  -	      inx
   1549  1feb					      endif
   1550  1feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   1551  1fee		       68		      pla
   1552  1fef		       aa		      tax
   1553  1ff0		       68		      pla
   1554  1ff1		       60		      rts
   1555  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1556  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1557  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1558  1ff2					      endif
   1559  1ffc					      ORG	$1FFC
   1560  1ffc					      RORG	$1FFC
   1561  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1562  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1563  2000					      ORG	$2000
   1564  2000					      RORG	$3000
   1565  2000				   .
   1566  2000							; 
   1567  2000
   1568  2000				   .
   1569  2000							; 
   1570  2000
   1571  2000				   .
   1572  2000							; 
   1573  2000
   1574  2000				   .
   1575  2000							; 
   1576  2000
   1577  2000				   .
   1578  2000							; 
   1579  2000
   1580  2000				   .
   1581  2000							; 
   1582  2000
   1583  2000				   .
   1584  2000							; 
   1585  2000
   1586  2000				   .
   1587  2000							; 
   1588  2000
   1589  2000				   .
   1590  2000							; 
   1591  2000
   1592  2000				   .
   1593  2000							; 
   1594  2000
   1595  2000				   .
   1596  2000							; 
   1597  2000
   1598  2000				   .__Main_Loop_Setup
   1599  2000							; __Main_Loop_Setup
   1600  2000
   1601  2000				   .
   1602  2000							; 
   1603  2000
   1604  2000				   .
   1605  2000							; 
   1606  2000
   1607  2000				   .
   1608  2000							; 
   1609  2000
   1610  2000				   .
   1611  2000							; 
   1612  2000
   1613  2000				   .
   1614  2000							; 
   1615  2000
   1616  2000				   .
   1617  2000							; 
   1618  2000
   1619  2000				   .
   1620  2000							; 
   1621  2000
   1622  2000				   .
   1623  2000							; 
   1624  2000
   1625  2000				   .
   1626  2000							; 
   1627  2000
   1628  2000				   .
   1629  2000							; 
   1630  2000
   1631  2000				   .L092		;  _Bit2_Game_Control{2}  =  0
   1632  2000
   1633  2000		       a5 ec		      LDA	_Bit2_Game_Control
   1634  2002		       29 fb		      AND	#251
   1635  2004		       85 ec		      STA	_Bit2_Game_Control
   1636  2006				   .
   1637  2006							; 
   1638  2006
   1639  2006				   .
   1640  2006							; 
   1641  2006
   1642  2006				   .
   1643  2006							; 
   1644  2006
   1645  2006				   .
   1646  2006							; 
   1647  2006
   1648  2006				   .
   1649  2006							; 
   1650  2006
   1651  2006				   .
   1652  2006							; 
   1653  2006
   1654  2006				   .
   1655  2006							; 
   1656  2006
   1657  2006				   .
   1658  2006							; 
   1659  2006
   1660  2006				   .
   1661  2006							; 
   1662  2006
   1663  2006				   .
   1664  2006							; 
   1665  2006
   1666  2006				   .
   1667  2006							; 
   1668  2006
   1669  2006				   .
   1670  2006							; 
   1671  2006
   1672  2006				   .
   1673  2006							; 
   1674  2006
   1675  2006				   .L093		;  _Bit0_Reset_Restrainer{0}  =  1
   1676  2006
   1677  2006		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1678  2008		       09 01		      ORA	#1
   1679  200a		       85 ec		      STA	_Bit0_Reset_Restrainer
   1680  200c				   .
   1681  200c							; 
   1682  200c
   1683  200c				   .
   1684  200c							; 
   1685  200c
   1686  200c				   .
   1687  200c							; 
   1688  200c
   1689  200c				   .
   1690  200c							; 
   1691  200c
   1692  200c				   .
   1693  200c							; 
   1694  200c
   1695  200c				   .
   1696  200c							; 
   1697  200c
   1698  200c				   .
   1699  200c							; 
   1700  200c
   1701  200c				   .
   1702  200c							; 
   1703  200c
   1704  200c				   .
   1705  200c							; 
   1706  200c
   1707  200c				   .
   1708  200c							; 
   1709  200c
   1710  200c				   .
   1711  200c							; 
   1712  200c
   1713  200c				   .
   1714  200c							; 
   1715  200c
   1716  200c				   .L094		;  _Bit1_FireB_Restrainer{1}  =  1
   1717  200c
   1718  200c		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   1719  200e		       09 02		      ORA	#2
   1720  2010		       85 ec		      STA	_Bit1_FireB_Restrainer
   1721  2012				   .
   1722  2012							; 
   1723  2012
   1724  2012				   .
   1725  2012							; 
   1726  2012
   1727  2012				   .
   1728  2012							; 
   1729  2012
   1730  2012				   .
   1731  2012							; 
   1732  2012
   1733  2012				   .
   1734  2012							; 
   1735  2012
   1736  2012				   .
   1737  2012							; 
   1738  2012
   1739  2012				   .L095		;  _Main_CharX  =  77	:  _Main_CharY	=  53
   1740  2012
   1741  2012		       a9 4d		      LDA	#77
   1742  2014		       85 81		      STA	_Main_CharX
   1743  2016		       a9 35		      LDA	#53
   1744  2018		       85 86		      STA	_Main_CharY
   1745  201a				   .
   1746  201a							; 
   1747  201a
   1748  201a				   .
   1749  201a							; 
   1750  201a
   1751  201a				   .
   1752  201a							; 
   1753  201a
   1754  201a				   .
   1755  201a							; 
   1756  201a
   1757  201a				   .
   1758  201a							; 
   1759  201a
   1760  201a				   .
   1761  201a							; 
   1762  201a
   1763  201a				   .L096		;  scorecolor	=  $1C
   1764  201a
   1765  201a		       a9 1c		      LDA	#$1C
   1766  201c		       85 a3		      STA	scorecolor
   1767  201e				   .
   1768  201e							; 
   1769  201e
   1770  201e				   .
   1771  201e							; 
   1772  201e
   1773  201e				   .
   1774  201e							; 
   1775  201e
   1776  201e				   .
   1777  201e							; 
   1778  201e
   1779  201e				   .
   1780  201e							; 
   1781  201e
   1782  201e				   .L097		;  pfscore1  =  %10101010  :  pfscore2  =  %11111111  :  pfscorecolor	=  $06
   1783  201e
   1784  201e		       a9 aa		      LDA	#%10101010
   1785  2020		       85 f2		      STA	pfscore1
   1786  2022		       a9 ff		      LDA	#%11111111
   1787  2024		       85 f3		      STA	pfscore2
   1788  2026		       a9 06		      LDA	#$06
   1789  2028		       85 f4		      STA	pfscorecolor
   1790  202a				   .
   1791  202a							; 
   1792  202a
   1793  202a				   .
   1794  202a							; 
   1795  202a
   1796  202a				   .
   1797  202a							; 
   1798  202a
   1799  202a				   .
   1800  202a							; 
   1801  202a
   1802  202a				   .
   1803  202a							; 
   1804  202a
   1805  202a				   .
   1806  202a							; 
   1807  202a
   1808  202a				   .
   1809  202a							; 
   1810  202a
   1811  202a				   .
   1812  202a							; 
   1813  202a
   1814  202a				   .
   1815  202a							; 
   1816  202a
   1817  202a				   .
   1818  202a							; 
   1819  202a
   1820  202a				   .
   1821  202a							; 
   1822  202a
   1823  202a				   .
   1824  202a							; 
   1825  202a
   1826  202a				   .
   1827  202a							; 
   1828  202a
   1829  202a				   .
   1830  202a							; 
   1831  202a
   1832  202a				   .
   1833  202a							; 
   1834  202a
   1835  202a				   .
   1836  202a							; 
   1837  202a
   1838  202a				   .
   1839  202a							; 
   1840  202a
   1841  202a				   .
   1842  202a							; 
   1843  202a
   1844  202a				   .
   1845  202a							; 
   1846  202a
   1847  202a				   .
   1848  202a							; 
   1849  202a
   1850  202a				   .L098		;  missile1height  =  1
   1851  202a
   1852  202a		       a9 01		      LDA	#1
   1853  202c		       85 87		      STA	missile1height
   1854  202e				   .
   1855  202e							; 
   1856  202e
   1857  202e				   .
   1858  202e							; 
   1859  202e
   1860  202e				   .
   1861  202e							; 
   1862  202e
   1863  202e				   .
   1864  202e							; 
   1865  202e
   1866  202e				   .
   1867  202e							; 
   1868  202e
   1869  202e				   .
   1870  202e							; 
   1871  202e
   1872  202e				   .
   1873  202e							; 
   1874  202e
   1875  202e				   .L099		;  _Bit3_P0_Dir_Right{3}  =  1
   1876  202e
   1877  202e		       a5 da		      LDA	_Bit3_P0_Dir_Right
   1878  2030		       09 08		      ORA	#8
   1879  2032		       85 da		      STA	_Bit3_P0_Dir_Right
   1880  2034				   .
   1881  2034							; 
   1882  2034
   1883  2034				   .
   1884  2034							; 
   1885  2034
   1886  2034				   .
   1887  2034							; 
   1888  2034
   1889  2034				   .
   1890  2034							; 
   1891  2034
   1892  2034				   .
   1893  2034							; 
   1894  2034
   1895  2034				   .
   1896  2034							; 
   1897  2034
   1898  2034				   .L0100		;  pfcolors:
   1899  2034
   1900  2034		       a9 00		      lda	# $00
   1901  2036		       85 08		      sta	COLUPF
   1902  2038				  -	      ifconst	pfres
   1903  2038				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   1904  2038					      else
   1905  2038		       a9 f5		      lda	#>(pfcolorlabel13-84)
   1906  203a					      endif
   1907  203a		       85 f1		      sta	pfcolortable+1
   1908  203c				  -	      ifconst	pfres
   1909  203c				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   1910  203c					      else
   1911  203c		       a9 04		      lda	#<(pfcolorlabel13-84)
   1912  203e					      endif
   1913  203e		       85 f0		      sta	pfcolortable
   1914  2040				   .
   1915  2040							; 
   1916  2040
   1917  2040				   .
   1918  2040							; 
   1919  2040
   1920  2040				   .
   1921  2040							; 
   1922  2040
   1923  2040				   .
   1924  2040							; 
   1925  2040
   1926  2040				   .
   1927  2040							; 
   1928  2040
   1929  2040				   .
   1930  2040							; 
   1931  2040
   1932  2040				   .
   1933  2040							; 
   1934  2040
   1935  2040				   .L0101		;  playfield:
   1936  2040
   1937  2040				  -	      ifconst	pfres
   1938  2040				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   1939  2040					      else
   1940  2040		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   1941  2042					      endif
   1942  2042		       4c 75 30 	      jmp	pflabel0
   1943  2045				   PF_data0
   1944  2045		       fc 00		      .byte.b	%11111100, %00000000
   1945  2047					      if	(pfwidth>2)
   1946  2047		       00 fc		      .byte.b	%00000000, %11111100
   1947  2049					      endif
   1948  2049		       fc 00		      .byte.b	%11111100, %00000000
   1949  204b					      if	(pfwidth>2)
   1950  204b		       00 fc		      .byte.b	%00000000, %11111100
   1951  204d					      endif
   1952  204d		       e0 00		      .byte.b	%11100000, %00000000
   1953  204f					      if	(pfwidth>2)
   1954  204f		       00 e0		      .byte.b	%00000000, %11100000
   1955  2051					      endif
   1956  2051		       00 00		      .byte.b	%00000000, %00000000
   1957  2053					      if	(pfwidth>2)
   1958  2053		       00 00		      .byte.b	%00000000, %00000000
   1959  2055					      endif
   1960  2055		       00 00		      .byte.b	%00000000, %00000000
   1961  2057					      if	(pfwidth>2)
   1962  2057		       00 00		      .byte.b	%00000000, %00000000
   1963  2059					      endif
   1964  2059		       00 00		      .byte.b	%00000000, %00000000
   1965  205b					      if	(pfwidth>2)
   1966  205b		       00 00		      .byte.b	%00000000, %00000000
   1967  205d					      endif
   1968  205d		       00 00		      .byte.b	%00000000, %00000000
   1969  205f					      if	(pfwidth>2)
   1970  205f		       00 00		      .byte.b	%00000000, %00000000
   1971  2061					      endif
   1972  2061		       00 00		      .byte.b	%00000000, %00000000
   1973  2063					      if	(pfwidth>2)
   1974  2063		       00 00		      .byte.b	%00000000, %00000000
   1975  2065					      endif
   1976  2065		       00 00		      .byte.b	%00000000, %00000000
   1977  2067					      if	(pfwidth>2)
   1978  2067		       00 00		      .byte.b	%00000000, %00000000
   1979  2069					      endif
   1980  2069		       e0 00		      .byte.b	%11100000, %00000000
   1981  206b					      if	(pfwidth>2)
   1982  206b		       00 e0		      .byte.b	%00000000, %11100000
   1983  206d					      endif
   1984  206d		       fc 00		      .byte.b	%11111100, %00000000
   1985  206f					      if	(pfwidth>2)
   1986  206f		       00 fc		      .byte.b	%00000000, %11111100
   1987  2071					      endif
   1988  2071		       fc 00		      .byte.b	%11111100, %00000000
   1989  2073					      if	(pfwidth>2)
   1990  2073		       00 fc		      .byte.b	%00000000, %11111100
   1991  2075					      endif
   1992  2075				   pflabel0
   1993  2075		       bd 45 30 	      lda	PF_data0,x
   1994  2078		       95 a4		      sta	playfield,x
   1995  207a		       ca		      dex
   1996  207b		       10 f8		      bpl	pflabel0
   1997  207d				   .
   1998  207d							; 
   1999  207d
   2000  207d				   .
   2001  207d							; 
   2002  207d
   2003  207d				   .
   2004  207d							; 
   2005  207d
   2006  207d				   .
   2007  207d							; 
   2008  207d
   2009  207d				   .
   2010  207d							; 
   2011  207d
   2012  207d				   .
   2013  207d							; 
   2014  207d
   2015  207d				   .
   2016  207d							; 
   2017  207d
   2018  207d				   .L0102		;  player1color:
   2019  207d
   2020  207d		       a2 88		      LDX	#<playercolorL0102_1
   2021  207f		       86 87		      STX	player1color
   2022  2081		       a9 f5		      LDA	#>playercolorL0102_1
   2023  2083		       85 88		      STA	player1color+1
   2024  2085				   .
   2025  2085							; 
   2026  2085
   2027  2085				   .L0103		;  player1:
   2028  2085
   2029  2085		       a2 9f		      LDX	#<playerL0103_1
   2030  2087		       86 8c		      STX	player1pointerlo
   2031  2089		       a9 f5		      LDA	#>playerL0103_1
   2032  208b		       85 8d		      STA	player1pointerhi
   2033  208d		       a9 16		      LDA	#22
   2034  208f		       85 8f		      STA	player1height
   2035  2091				   .
   2036  2091							; 
   2037  2091
   2038  2091				   .
   2039  2091							; 
   2040  2091
   2041  2091				   .
   2042  2091							; 
   2043  2091
   2044  2091				   .
   2045  2091							; 
   2046  2091
   2047  2091				   .
   2048  2091							; 
   2049  2091
   2050  2091				   .
   2051  2091							; 
   2052  2091
   2053  2091				   .
   2054  2091							; 
   2055  2091
   2056  2091				   .
   2057  2091							; 
   2058  2091
   2059  2091				   .
   2060  2091							; 
   2061  2091
   2062  2091				   .L0104		;  _WillY  =	( rand & 63 )	+  15  :  temp5  =  rand
   2063  2091
   2064  2091							; complex statement detected
   2065  2091		       a5 a2		      lda	rand
   2066  2093		       4a		      lsr
   2067  2094					      ifconst	rand16
   2068  2094		       26 ed		      rol	rand16
   2069  2096					      endif
   2070  2096		       90 02		      bcc	*+4
   2071  2098		       49 b4		      eor	#$B4
   2072  209a		       85 a2		      sta	rand
   2073  209c					      ifconst	rand16
   2074  209c		       45 ed		      eor	rand16
   2075  209e					      endif
   2076  209e		       29 3f		      AND	#63
   2077  20a0		       18		      CLC
   2078  20a1		       69 0f		      ADC	#15
   2079  20a3		       85 85		      STA	_WillY
   2080  20a5		       a5 a2		      lda	rand
   2081  20a7		       4a		      lsr
   2082  20a8					      ifconst	rand16
   2083  20a8		       26 ed		      rol	rand16
   2084  20aa					      endif
   2085  20aa		       90 02		      bcc	*+4
   2086  20ac		       49 b4		      eor	#$B4
   2087  20ae		       85 a2		      sta	rand
   2088  20b0					      ifconst	rand16
   2089  20b0		       45 ed		      eor	rand16
   2090  20b2					      endif
   2091  20b2		       85 a0		      STA	temp5
   2092  20b4				   .
   2093  20b4							; 
   2094  20b4
   2095  20b4				   .L0105		;  if temp5  >  128 then _WillX  =   ( rand & 127 )   +   ( rand / 16 )   :  goto __Skip_Enemy_Setup
   2096  20b4
   2097  20b4		       a9 80		      LDA	#128
   2098  20b6		       c5 a0		      CMP	temp5
   2099  20b8		       b0 2c		      BCS	.skipL0105
   2100  20ba				   .condpart9
   2101  20ba							; complex statement detected
   2102  20ba		       a5 a2		      lda	rand
   2103  20bc		       4a		      lsr
   2104  20bd					      ifconst	rand16
   2105  20bd		       26 ed		      rol	rand16
   2106  20bf					      endif
   2107  20bf		       90 02		      bcc	*+4
   2108  20c1		       49 b4		      eor	#$B4
   2109  20c3		       85 a2		      sta	rand
   2110  20c5					      ifconst	rand16
   2111  20c5		       45 ed		      eor	rand16
   2112  20c7					      endif
   2113  20c7		       29 7f		      AND	#127
   2114  20c9		       48		      PHA
   2115  20ca		       a5 a2		      lda	rand
   2116  20cc		       4a		      lsr
   2117  20cd					      ifconst	rand16
   2118  20cd		       26 ed		      rol	rand16
   2119  20cf					      endif
   2120  20cf		       90 02		      bcc	*+4
   2121  20d1		       49 b4		      eor	#$B4
   2122  20d3		       85 a2		      sta	rand
   2123  20d5					      ifconst	rand16
   2124  20d5		       45 ed		      eor	rand16
   2125  20d7					      endif
   2126  20d7		       4a		      lsr
   2127  20d8		       4a		      lsr
   2128  20d9		       4a		      lsr
   2129  20da		       4a		      lsr
   2130  20db		       ba		      TSX
   2131  20dc		       e8		      INX
   2132  20dd		       9a		      TXS
   2133  20de		       18		      CLC
   2134  20df		       75 00		      ADC	$00,x
   2135  20e1		       85 80		      STA	_WillX
   2136  20e3		       4c 0f 31 	      jmp	.__Skip_Enemy_Setup
   2137  20e6
   2138  20e6				   .skipL0105
   2139  20e6				   .
   2140  20e6							; 
   2141  20e6
   2142  20e6				   .L0106		;  _WillX  =	( rand & 127 )	 +   ( rand / 16 ) 
   2143  20e6
   2144  20e6							; complex statement detected
   2145  20e6		       a5 a2		      lda	rand
   2146  20e8		       4a		      lsr
   2147  20e9					      ifconst	rand16
   2148  20e9		       26 ed		      rol	rand16
   2149  20eb					      endif
   2150  20eb		       90 02		      bcc	*+4
   2151  20ed		       49 b4		      eor	#$B4
   2152  20ef		       85 a2		      sta	rand
   2153  20f1					      ifconst	rand16
   2154  20f1		       45 ed		      eor	rand16
   2155  20f3					      endif
   2156  20f3		       29 7f		      AND	#127
   2157  20f5		       48		      PHA
   2158  20f6		       a5 a2		      lda	rand
   2159  20f8		       4a		      lsr
   2160  20f9					      ifconst	rand16
   2161  20f9		       26 ed		      rol	rand16
   2162  20fb					      endif
   2163  20fb		       90 02		      bcc	*+4
   2164  20fd		       49 b4		      eor	#$B4
   2165  20ff		       85 a2		      sta	rand
   2166  2101					      ifconst	rand16
   2167  2101		       45 ed		      eor	rand16
   2168  2103					      endif
   2169  2103		       4a		      lsr
   2170  2104		       4a		      lsr
   2171  2105		       4a		      lsr
   2172  2106		       4a		      lsr
   2173  2107		       ba		      TSX
   2174  2108		       e8		      INX
   2175  2109		       9a		      TXS
   2176  210a		       18		      CLC
   2177  210b		       75 00		      ADC	$00,x
   2178  210d		       85 80		      STA	_WillX
   2179  210f				   .
   2180  210f							; 
   2181  210f
   2182  210f				   .__Skip_Enemy_Setup
   2183  210f							; __Skip_Enemy_Setup
   2184  210f
   2185  210f				   .
   2186  210f							; 
   2187  210f
   2188  210f				   .
   2189  210f							; 
   2190  210f
   2191  210f				   .
   2192  210f							; 
   2193  210f
   2194  210f				   .
   2195  210f							; 
   2196  210f
   2197  210f				   .
   2198  210f							; 
   2199  210f
   2200  210f				   .
   2201  210f							; 
   2202  210f
   2203  210f				   .
   2204  210f							; 
   2205  210f
   2206  210f				   .L0107		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   2207  210f
   2208  210f		       a5 e5		      LDA	_Bit0_BW_Mem
   2209  2111		       29 fe		      AND	#254
   2210  2113		       85 e5		      STA	_Bit0_BW_Mem
   2211  2115		       a9 08		      lda	#8
   2212  2117		       2c 82 02 	      bit	SWCHB
   2213  211a		       d0 06		      BNE	.skipL0107
   2214  211c				   .condpart10
   2215  211c		       a5 e5		      LDA	_Bit0_BW_Mem
   2216  211e		       09 01		      ORA	#1
   2217  2120		       85 e5		      STA	_Bit0_BW_Mem
   2218  2122				   .skipL0107
   2219  2122				   .
   2220  2122							; 
   2221  2122
   2222  2122				   .
   2223  2122							; 
   2224  2122
   2225  2122				   .
   2226  2122							; 
   2227  2122
   2228  2122				   .
   2229  2122							; 
   2230  2122
   2231  2122				   .
   2232  2122							; 
   2233  2122
   2234  2122				   .
   2235  2122							; 
   2236  2122
   2237  2122				   .
   2238  2122							; 
   2239  2122
   2240  2122				   .
   2241  2122							; 
   2242  2122
   2243  2122				   .
   2244  2122							; 
   2245  2122
   2246  2122				   .L0108		;  if !_Bit3_Auto_Play{3} then score  =  0  :	goto __AP_Skip_AP_Setup
   2247  2122
   2248  2122		       a5 ec		      LDA	_Bit3_Auto_Play
   2249  2124		       29 08		      AND	#8
   2250  2126		       d0 0f		      BNE	.skipL0108
   2251  2128				   .condpart11
   2252  2128		       a9 00		      LDA	#$00
   2253  212a		       85 95		      STA	score+2
   2254  212c		       a9 00		      LDA	#$00
   2255  212e		       85 94		      STA	score+1
   2256  2130		       a9 00		      LDA	#$00
   2257  2132		       85 93		      STA	score
   2258  2134		       4c 49 31 	      jmp	.__AP_Skip_AP_Setup
   2259  2137
   2260  2137				   .skipL0108
   2261  2137				   .
   2262  2137							; 
   2263  2137
   2264  2137				   .
   2265  2137							; 
   2266  2137
   2267  2137				   .
   2268  2137							; 
   2269  2137
   2270  2137				   .
   2271  2137							; 
   2272  2137
   2273  2137				   .L0109		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   2274  2137
   2275  2137		       a5 93		      LDA	_sc1
   2276  2139		       85 e6		      STA	_Score1_Mem
   2277  213b		       a5 94		      LDA	_sc2
   2278  213d		       85 e7		      STA	_Score2_Mem
   2279  213f		       a5 95		      LDA	_sc3
   2280  2141		       85 e8		      STA	_Score3_Mem
   2281  2143				   .
   2282  2143							; 
   2283  2143
   2284  2143				   .L0110		;  _Bit6_Swap_Scores{6}  =  0
   2285  2143
   2286  2143		       a5 ec		      LDA	_Bit6_Swap_Scores
   2287  2145		       29 bf		      AND	#191
   2288  2147		       85 ec		      STA	_Bit6_Swap_Scores
   2289  2149				   .
   2290  2149							; 
   2291  2149
   2292  2149				   .__AP_Skip_AP_Setup
   2293  2149							; __AP_Skip_AP_Setup
   2294  2149
   2295  2149				   .
   2296  2149							; 
   2297  2149
   2298  2149				   .
   2299  2149							; 
   2300  2149
   2301  2149				   .
   2302  2149							; 
   2303  2149
   2304  2149				   .
   2305  2149							; 
   2306  2149
   2307  2149				   .
   2308  2149							; 
   2309  2149
   2310  2149				   .
   2311  2149							; 
   2312  2149
   2313  2149				   .
   2314  2149							; 
   2315  2149
   2316  2149				   .
   2317  2149							; 
   2318  2149
   2319  2149				   .
   2320  2149							; 
   2321  2149
   2322  2149				   .
   2323  2149							; 
   2324  2149
   2325  2149				   .
   2326  2149							; 
   2327  2149
   2328  2149				   .
   2329  2149							; 
   2330  2149
   2331  2149				   .
   2332  2149							; 
   2333  2149
   2334  2149				   .__Main_Loop
   2335  2149							; __Main_Loop
   2336  2149
   2337  2149				   .
   2338  2149							; 
   2339  2149
   2340  2149				   .
   2341  2149							; 
   2342  2149
   2343  2149				   .
   2344  2149							; 
   2345  2149
   2346  2149				   .
   2347  2149							; 
   2348  2149
   2349  2149				   .
   2350  2149							; 
   2351  2149
   2352  2149				   .
   2353  2149							; 
   2354  2149
   2355  2149				   .
   2356  2149							; 
   2357  2149
   2358  2149				   .
   2359  2149							; 
   2360  2149
   2361  2149				   .L0111		;  _Master_Counter  =	_Master_Counter  +  1
   2362  2149
   2363  2149		       e6 d8		      INC	_Master_Counter
   2364  214b				   .
   2365  214b							; 
   2366  214b
   2367  214b				   .
   2368  214b							; 
   2369  214b
   2370  214b				   .
   2371  214b							; 
   2372  214b
   2373  214b				   .
   2374  214b							; 
   2375  214b
   2376  214b				   .L0112		;  if _Master_Counter	<  7 then goto __Skip_Counters
   2377  214b
   2378  214b		       a5 d8		      LDA	_Master_Counter
   2379  214d		       c9 07		      CMP	#7
   2380  214f		       b0 03		      BCS	.skipL0112
   2381  2151				   .condpart12
   2382  2151		       4c 64 31 	      jmp	.__Skip_Counters
   2383  2154
   2384  2154				   .skipL0112
   2385  2154				   .
   2386  2154							; 
   2387  2154
   2388  2154				   .
   2389  2154							; 
   2390  2154
   2391  2154				   .
   2392  2154							; 
   2393  2154
   2394  2154				   .
   2395  2154							; 
   2396  2154
   2397  2154				   .L0113		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2398  2154
   2399  2154		       e6 d9		      INC	_Frame_Counter
   2400  2156		       a9 00		      LDA	#0
   2401  2158		       85 d8		      STA	_Master_Counter
   2402  215a				   .
   2403  215a							; 
   2404  215a
   2405  215a				   .
   2406  215a							; 
   2407  215a
   2408  215a				   .
   2409  215a							; 
   2410  215a
   2411  215a				   .
   2412  215a							; 
   2413  215a
   2414  215a				   .L0114		;  if _Frame_Counter  >  3 then _Frame_Counter  =  0
   2415  215a
   2416  215a		       a9 03		      LDA	#3
   2417  215c		       c5 d9		      CMP	_Frame_Counter
   2418  215e		       b0 04		      BCS	.skipL0114
   2419  2160				   .condpart13
   2420  2160		       a9 00		      LDA	#0
   2421  2162		       85 d9		      STA	_Frame_Counter
   2422  2164				   .skipL0114
   2423  2164				   .
   2424  2164							; 
   2425  2164
   2426  2164				   .
   2427  2164							; 
   2428  2164
   2429  2164				   .__Skip_Counters
   2430  2164							; __Skip_Counters
   2431  2164
   2432  2164				   .
   2433  2164							; 
   2434  2164
   2435  2164				   .
   2436  2164							; 
   2437  2164
   2438  2164				   .
   2439  2164							; 
   2440  2164
   2441  2164				   .
   2442  2164							; 
   2443  2164
   2444  2164				   .
   2445  2164							; 
   2446  2164
   2447  2164				   .
   2448  2164							; 
   2449  2164
   2450  2164				   .L0115		;  _Bitop_Coord_Counter  =  0	:  _Bitop_Screen_Counter  =  0
   2451  2164
   2452  2164		       a9 00		      LDA	#0
   2453  2166		       85 e4		      STA	_Bitop_Coord_Counter
   2454  2168		       85 e3		      STA	_Bitop_Screen_Counter
   2455  216a				   .
   2456  216a							; 
   2457  216a
   2458  216a				   .
   2459  216a							; 
   2460  216a
   2461  216a				   .
   2462  216a							; 
   2463  216a
   2464  216a				   .
   2465  216a							; 
   2466  216a
   2467  216a				   .__Puppet
   2468  216a							; __Puppet
   2469  216a
   2470  216a				   .L0116		;  player1color:
   2471  216a
   2472  216a		       a2 b6		      LDX	#<playercolorL0116_1
   2473  216c		       86 87		      STX	player1color
   2474  216e		       a9 f5		      LDA	#>playercolorL0116_1
   2475  2170		       85 88		      STA	player1color+1
   2476  2172				   .
   2477  2172							; 
   2478  2172
   2479  2172				   .L0117		;  player1:
   2480  2172
   2481  2172		       a2 cd		      LDX	#<playerL0117_1
   2482  2174		       86 8c		      STX	player1pointerlo
   2483  2176		       a9 f5		      LDA	#>playerL0117_1
   2484  2178		       85 8d		      STA	player1pointerhi
   2485  217a		       a9 16		      LDA	#22
   2486  217c		       85 8f		      STA	player1height
   2487  217e				   .
   2488  217e							; 
   2489  217e
   2490  217e				   .
   2491  217e							; 
   2492  217e
   2493  217e				   .
   2494  217e							; 
   2495  217e
   2496  217e				   .
   2497  217e							; 
   2498  217e
   2499  217e				   .
   2500  217e							; 
   2501  217e
   2502  217e				   .
   2503  217e							; 
   2504  217e
   2505  217e				   .
   2506  217e							; 
   2507  217e
   2508  217e				   .
   2509  217e							; 
   2510  217e
   2511  217e				   .L0118		;  COLUBK  =  0
   2512  217e
   2513  217e		       a9 00		      LDA	#0
   2514  2180		       85 09		      STA	COLUBK
   2515  2182				   .L0119		;  CTRLPF  =  $31
   2516  2182
   2517  2182		       a9 31		      LDA	#$31
   2518  2184		       85 0a		      STA	CTRLPF
   2519  2186				   .L0120		;  ballheight	=  8
   2520  2186
   2521  2186		       a9 08		      LDA	#8
   2522  2188		       85 92		      STA	ballheight
   2523  218a				   .
   2524  218a							; 
   2525  218a
   2526  218a				   .
   2527  218a							; 
   2528  218a
   2529  218a				   .
   2530  218a							; 
   2531  218a
   2532  218a				   .
   2533  218a							; 
   2534  218a
   2535  218a				   .
   2536  218a							; 
   2537  218a
   2538  218a				   .
   2539  218a							; 
   2540  218a
   2541  218a				   .
   2542  218a							; 
   2543  218a
   2544  218a				   .L0121		;  pfcolors:
   2545  218a
   2546  218a		       a9 2c		      lda	# $2C
   2547  218c		       85 08		      sta	COLUPF
   2548  218e				  -	      ifconst	pfres
   2549  218e				  -	      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   2550  218e					      else
   2551  218e		       a9 f5		      lda	#>(pfcolorlabel13-83)
   2552  2190					      endif
   2553  2190		       85 f1		      sta	pfcolortable+1
   2554  2192				  -	      ifconst	pfres
   2555  2192				  -	      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   2556  2192					      else
   2557  2192		       a9 05		      lda	#<(pfcolorlabel13-83)
   2558  2194					      endif
   2559  2194		       85 f0		      sta	pfcolortable
   2560  2196				   .
   2561  2196							; 
   2562  2196
   2563  2196				   .
   2564  2196							; 
   2565  2196
   2566  2196				   .
   2567  2196							; 
   2568  2196
   2569  2196				   .
   2570  2196							; 
   2571  2196
   2572  2196				   .
   2573  2196							; 
   2574  2196
   2575  2196				   .
   2576  2196							; 
   2577  2196
   2578  2196				   .
   2579  2196							; 
   2580  2196
   2581  2196				   .L0122		;  COLUP0  =  $9C  :  COLUP1  =  $44
   2582  2196
   2583  2196		       a9 9c		      LDA	#$9C
   2584  2198		       85 06		      STA	COLUP0
   2585  219a		       a9 44		      LDA	#$44
   2586  219c		       85 07		      STA	COLUP1
   2587  219e				   .
   2588  219e							; 
   2589  219e
   2590  219e				   .
   2591  219e							; 
   2592  219e
   2593  219e				   .
   2594  219e							; 
   2595  219e
   2596  219e				   .
   2597  219e							; 
   2598  219e
   2599  219e				   .
   2600  219e							; 
   2601  219e
   2602  219e				   .
   2603  219e							; 
   2604  219e
   2605  219e				   .
   2606  219e							; 
   2607  219e
   2608  219e				   .L0123		;  NUSIZ1  =  $10
   2609  219e
   2610  219e		       a9 10		      LDA	#$10
   2611  21a0		       85 05		      STA	NUSIZ1
   2612  21a2				   .
   2613  21a2							; 
   2614  21a2
   2615  21a2				   .
   2616  21a2							; 
   2617  21a2
   2618  21a2				   .
   2619  21a2							; 
   2620  21a2
   2621  21a2				   .
   2622  21a2							; 
   2623  21a2
   2624  21a2				   .
   2625  21a2							; 
   2626  21a2
   2627  21a2				   .
   2628  21a2							; 
   2629  21a2
   2630  21a2				   .
   2631  21a2							; 
   2632  21a2
   2633  21a2				   .
   2634  21a2							; 
   2635  21a2
   2636  21a2				   .
   2637  21a2							; 
   2638  21a2
   2639  21a2				   .
   2640  21a2							; 
   2641  21a2
   2642  21a2				   .L0124		;  if _Bit3_Auto_Play{3} then goto __Skip_Joystick_Precheck
   2643  21a2
   2644  21a2		       a5 ec		      LDA	_Bit3_Auto_Play
   2645  21a4		       29 08		      AND	#8
   2646  21a6		       f0 03		      BEQ	.skipL0124
   2647  21a8				   .condpart14
   2648  21a8		       4c cc 31 	      jmp	.__Skip_Joystick_Precheck
   2649  21ab
   2650  21ab				   .skipL0124
   2651  21ab				   .
   2652  21ab							; 
   2653  21ab
   2654  21ab				   .
   2655  21ab							; 
   2656  21ab
   2657  21ab				   .
   2658  21ab							; 
   2659  21ab
   2660  21ab				   .
   2661  21ab							; 
   2662  21ab
   2663  21ab				   .L0125		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   2664  21ab
   2665  21ab		       a9 10		      lda	#$10
   2666  21ad		       2c 80 02 	      bit	SWCHA
   2667  21b0		       f0 14		      BEQ	.skipL0125
   2668  21b2				   .condpart15
   2669  21b2		       a9 20		      lda	#$20
   2670  21b4		       2c 80 02 	      bit	SWCHA
   2671  21b7		       f0 0d		      BEQ	.skip15then
   2672  21b9				   .condpart16
   2673  21b9		       2c 80 02 	      bit	SWCHA
   2674  21bc		       50 08		      BVC	.skip16then
   2675  21be				   .condpart17
   2676  21be		       2c 80 02 	      bit	SWCHA
   2677  21c1		       10 03		      BPL	.skip17then
   2678  21c3				   .condpart18
   2679  21c3		       4c cc 31 	      jmp	.__Skip_Joystick_Precheck
   2680  21c6
   2681  21c6				   .skip17then
   2682  21c6				   .skip16then
   2683  21c6				   .skip15then
   2684  21c6				   .skipL0125
   2685  21c6				   .
   2686  21c6							; 
   2687  21c6
   2688  21c6				   .
   2689  21c6							; 
   2690  21c6
   2691  21c6				   .
   2692  21c6							; 
   2693  21c6
   2694  21c6				   .
   2695  21c6							; 
   2696  21c6
   2697  21c6				   .L0126		;  _BitOp_P0_M1_Dir  =  _BitOp_P0_M1_Dir  &  %11110000
   2698  21c6
   2699  21c6		       a5 da		      LDA	_BitOp_P0_M1_Dir
   2700  21c8		       29 f0		      AND	#%11110000
   2701  21ca		       85 da		      STA	_BitOp_P0_M1_Dir
   2702  21cc				   .
   2703  21cc							; 
   2704  21cc
   2705  21cc				   .__Skip_Joystick_Precheck
   2706  21cc							; __Skip_Joystick_Precheck
   2707  21cc
   2708  21cc				   .
   2709  21cc							; 
   2710  21cc
   2711  21cc				   .
   2712  21cc							; 
   2713  21cc
   2714  21cc				   .
   2715  21cc							; 
   2716  21cc
   2717  21cc				   .
   2718  21cc							; 
   2719  21cc
   2720  21cc				   .
   2721  21cc							; 
   2722  21cc
   2723  21cc				   .
   2724  21cc							; 
   2725  21cc
   2726  21cc				   .
   2727  21cc							; 
   2728  21cc
   2729  21cc				   .
   2730  21cc							; 
   2731  21cc
   2732  21cc				   .
   2733  21cc							; 
   2734  21cc
   2735  21cc				   .
   2736  21cc							; 
   2737  21cc
   2738  21cc				   .
   2739  21cc							; 
   2740  21cc
   2741  21cc				   .L0127		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_New_Dir
   2742  21cc
   2743  21cc		       a5 ec		      LDA	_Bit3_Auto_Play
   2744  21ce		       29 08		      AND	#8
   2745  21d0		       d0 03		      BNE	.skipL0127
   2746  21d2				   .condpart19
   2747  21d2		       4c 8e 33 	      jmp	.__AP_Skip_New_Dir
   2748  21d5
   2749  21d5				   .skipL0127
   2750  21d5				   .
   2751  21d5							; 
   2752  21d5
   2753  21d5				   .
   2754  21d5							; 
   2755  21d5
   2756  21d5				   .
   2757  21d5							; 
   2758  21d5
   2759  21d5				   .
   2760  21d5							; 
   2761  21d5
   2762  21d5				   .L0128		;  _AP_Dir_Counter  =	_AP_Dir_Counter  +  1
   2763  21d5
   2764  21d5		       e6 df		      INC	_AP_Dir_Counter
   2765  21d7				   .
   2766  21d7							; 
   2767  21d7
   2768  21d7				   .
   2769  21d7							; 
   2770  21d7
   2771  21d7				   .
   2772  21d7							; 
   2773  21d7
   2774  21d7				   .
   2775  21d7							; 
   2776  21d7
   2777  21d7				   .
   2778  21d7							; 
   2779  21d7
   2780  21d7				   .L0129		;  if _AP_Dir_Counter	>  254 then goto __Get_New_AP_Direction
   2781  21d7
   2782  21d7		       a9 fe		      LDA	#254
   2783  21d9		       c5 df		      CMP	_AP_Dir_Counter
   2784  21db		       b0 03		      BCS	.skipL0129
   2785  21dd				   .condpart20
   2786  21dd		       4c 15 32 	      jmp	.__Get_New_AP_Direction
   2787  21e0
   2788  21e0				   .skipL0129
   2789  21e0				   .
   2790  21e0							; 
   2791  21e0
   2792  21e0				   .
   2793  21e0							; 
   2794  21e0
   2795  21e0				   .
   2796  21e0							; 
   2797  21e0
   2798  21e0				   .
   2799  21e0							; 
   2800  21e0
   2801  21e0				   .
   2802  21e0							; 
   2803  21e0
   2804  21e0				   .
   2805  21e0							; 
   2806  21e0
   2807  21e0				   .L0130		;  temp6  =   ( rand & 63 )   +  50
   2808  21e0
   2809  21e0							; complex statement detected
   2810  21e0		       a5 a2		      lda	rand
   2811  21e2		       4a		      lsr
   2812  21e3					      ifconst	rand16
   2813  21e3		       26 ed		      rol	rand16
   2814  21e5					      endif
   2815  21e5		       90 02		      bcc	*+4
   2816  21e7		       49 b4		      eor	#$B4
   2817  21e9		       85 a2		      sta	rand
   2818  21eb					      ifconst	rand16
   2819  21eb		       45 ed		      eor	rand16
   2820  21ed					      endif
   2821  21ed		       29 3f		      AND	#63
   2822  21ef		       18		      CLC
   2823  21f0		       69 32		      ADC	#50
   2824  21f2		       85 a1		      STA	temp6
   2825  21f4				   .
   2826  21f4							; 
   2827  21f4
   2828  21f4				   .
   2829  21f4							; 
   2830  21f4
   2831  21f4				   .
   2832  21f4							; 
   2833  21f4
   2834  21f4				   .
   2835  21f4							; 
   2836  21f4
   2837  21f4				   .L0131		;  if _AP_Dir_Counter	<  temp6 then goto __AP_Skip_New_Dir
   2838  21f4
   2839  21f4		       a5 df		      LDA	_AP_Dir_Counter
   2840  21f6		       c5 a1		      CMP	temp6
   2841  21f8		       b0 03		      BCS	.skipL0131
   2842  21fa				   .condpart21
   2843  21fa		       4c 8e 33 	      jmp	.__AP_Skip_New_Dir
   2844  21fd
   2845  21fd				   .skipL0131
   2846  21fd				   .
   2847  21fd							; 
   2848  21fd
   2849  21fd				   .
   2850  21fd							; 
   2851  21fd
   2852  21fd				   .
   2853  21fd							; 
   2854  21fd
   2855  21fd				   .
   2856  21fd							; 
   2857  21fd
   2858  21fd				   .L0132		;  temp5  =  rand
   2859  21fd
   2860  21fd		       a5 a2		      lda	rand
   2861  21ff		       4a		      lsr
   2862  2200					      ifconst	rand16
   2863  2200		       26 ed		      rol	rand16
   2864  2202					      endif
   2865  2202		       90 02		      bcc	*+4
   2866  2204		       49 b4		      eor	#$B4
   2867  2206		       85 a2		      sta	rand
   2868  2208					      ifconst	rand16
   2869  2208		       45 ed		      eor	rand16
   2870  220a					      endif
   2871  220a		       85 a0		      STA	temp5
   2872  220c				   .
   2873  220c							; 
   2874  220c
   2875  220c				   .
   2876  220c							; 
   2877  220c
   2878  220c				   .
   2879  220c							; 
   2880  220c
   2881  220c				   .
   2882  220c							; 
   2883  220c
   2884  220c				   .L0133		;  if temp5  <  230 then goto __AP_Skip_New_Dir
   2885  220c
   2886  220c		       a5 a0		      LDA	temp5
   2887  220e		       c9 e6		      CMP	#230
   2888  2210		       b0 03		      BCS	.skipL0133
   2889  2212				   .condpart22
   2890  2212		       4c 8e 33 	      jmp	.__AP_Skip_New_Dir
   2891  2215
   2892  2215				   .skipL0133
   2893  2215				   .
   2894  2215							; 
   2895  2215
   2896  2215				   .__Get_New_AP_Direction
   2897  2215							; __Get_New_AP_Direction
   2898  2215
   2899  2215				   .
   2900  2215							; 
   2901  2215
   2902  2215				   .
   2903  2215							; 
   2904  2215
   2905  2215				   .
   2906  2215							; 
   2907  2215
   2908  2215				   .
   2909  2215							; 
   2910  2215
   2911  2215				   .
   2912  2215							; 
   2913  2215
   2914  2215				   .
   2915  2215							; 
   2916  2215
   2917  2215				   .
   2918  2215							; 
   2919  2215
   2920  2215				   .
   2921  2215							; 
   2922  2215
   2923  2215				   .
   2924  2215							; 
   2925  2215
   2926  2215				   .
   2927  2215							; 
   2928  2215
   2929  2215				   .
   2930  2215							; 
   2931  2215
   2932  2215				   .
   2933  2215							; 
   2934  2215
   2935  2215				   .
   2936  2215							; 
   2937  2215
   2938  2215				   .L0134		;  _T5_AP_Dir	=   ( rand & 7 ) 
   2939  2215
   2940  2215							; complex statement detected
   2941  2215		       a5 a2		      lda	rand
   2942  2217		       4a		      lsr
   2943  2218					      ifconst	rand16
   2944  2218		       26 ed		      rol	rand16
   2945  221a					      endif
   2946  221a		       90 02		      bcc	*+4
   2947  221c		       49 b4		      eor	#$B4
   2948  221e		       85 a2		      sta	rand
   2949  2220					      ifconst	rand16
   2950  2220		       45 ed		      eor	rand16
   2951  2222					      endif
   2952  2222		       29 07		      AND	#7
   2953  2224		       85 a0		      STA	_T5_AP_Dir
   2954  2226				   .
   2955  2226							; 
   2956  2226
   2957  2226				   .
   2958  2226							; 
   2959  2226
   2960  2226				   .
   2961  2226							; 
   2962  2226
   2963  2226				   .
   2964  2226							; 
   2965  2226
   2966  2226				   .
   2967  2226							; 
   2968  2226
   2969  2226				   .
   2970  2226							; 
   2971  2226
   2972  2226				   .
   2973  2226							; 
   2974  2226
   2975  2226				   .L0135		;  if _T5_AP_Dir  =  _AP_Mem_Dir then _T5_AP_Dir  =  _T5_AP_Dir  +   ( rand & 1 )   +	 ( rand & 3 )	+  2  :  if _T5_AP_Dir	>  7 then _T5_AP_Dir  =  _T5_AP_Dir  -	8
   2976  2226
   2977  2226		       a5 a0		      LDA	_T5_AP_Dir
   2978  2228		       c5 db		      CMP	_AP_Mem_Dir
   2979  222a		       d0 40		      BNE	.skipL0135
   2980  222c				   .condpart23
   2981  222c							; complex statement detected
   2982  222c		       a5 a0		      LDA	_T5_AP_Dir
   2983  222e		       48		      PHA
   2984  222f		       a5 a2		      lda	rand
   2985  2231		       4a		      lsr
   2986  2232					      ifconst	rand16
   2987  2232		       26 ed		      rol	rand16
   2988  2234					      endif
   2989  2234		       90 02		      bcc	*+4
   2990  2236		       49 b4		      eor	#$B4
   2991  2238		       85 a2		      sta	rand
   2992  223a					      ifconst	rand16
   2993  223a		       45 ed		      eor	rand16
   2994  223c					      endif
   2995  223c		       29 01		      AND	#1
   2996  223e		       ba		      TSX
   2997  223f		       e8		      INX
   2998  2240		       9a		      TXS
   2999  2241		       18		      CLC
   3000  2242		       75 00		      ADC	$00,x
   3001  2244		       48		      PHA
   3002  2245		       a5 a2		      lda	rand
   3003  2247		       4a		      lsr
   3004  2248					      ifconst	rand16
   3005  2248		       26 ed		      rol	rand16
   3006  224a					      endif
   3007  224a		       90 02		      bcc	*+4
   3008  224c		       49 b4		      eor	#$B4
   3009  224e		       85 a2		      sta	rand
   3010  2250					      ifconst	rand16
   3011  2250		       45 ed		      eor	rand16
   3012  2252					      endif
   3013  2252		       29 03		      AND	#3
   3014  2254		       ba		      TSX
   3015  2255		       e8		      INX
   3016  2256		       9a		      TXS
   3017  2257		       18		      CLC
   3018  2258		       75 00		      ADC	$00,x
   3019  225a		       18		      CLC
   3020  225b		       69 02		      ADC	#2
   3021  225d		       85 a0		      STA	_T5_AP_Dir
   3022  225f		       a9 07		      LDA	#7
   3023  2261		       c5 a0		      CMP	_T5_AP_Dir
   3024  2263		       b0 07		      BCS	.skip23then
   3025  2265				   .condpart24
   3026  2265		       a5 a0		      LDA	_T5_AP_Dir
   3027  2267		       38		      SEC
   3028  2268		       e9 08		      SBC	#8
   3029  226a		       85 a0		      STA	_T5_AP_Dir
   3030  226c				   .skip23then
   3031  226c				   .skipL0135
   3032  226c				   .
   3033  226c							; 
   3034  226c
   3035  226c				   .
   3036  226c							; 
   3037  226c
   3038  226c				   .
   3039  226c							; 
   3040  226c
   3041  226c				   .
   3042  226c							; 
   3043  226c
   3044  226c				   .L0136		;  if _Main_CharY  >  85 then _T5_AP_Dir  =  1  :  temp6  =  rand  :  if temp6  >  128 then _T5_AP_Dir  =  7
   3045  226c
   3046  226c		       a9 55		      LDA	#85
   3047  226e		       c5 86		      CMP	_Main_CharY
   3048  2270		       b0 1d		      BCS	.skipL0136
   3049  2272				   .condpart25
   3050  2272		       a9 01		      LDA	#1
   3051  2274		       85 a0		      STA	_T5_AP_Dir
   3052  2276		       a5 a2		      lda	rand
   3053  2278		       4a		      lsr
   3054  2279					      ifconst	rand16
   3055  2279		       26 ed		      rol	rand16
   3056  227b					      endif
   3057  227b		       90 02		      bcc	*+4
   3058  227d		       49 b4		      eor	#$B4
   3059  227f		       85 a2		      sta	rand
   3060  2281					      ifconst	rand16
   3061  2281		       45 ed		      eor	rand16
   3062  2283					      endif
   3063  2283		       85 a1		      STA	temp6
   3064  2285		       a9 80		      LDA	#128
   3065  2287		       c5 a1		      CMP	temp6
   3066  2289		       b0 04		      BCS	.skip25then
   3067  228b				   .condpart26
   3068  228b		       a9 07		      LDA	#7
   3069  228d		       85 a0		      STA	_T5_AP_Dir
   3070  228f				   .skip25then
   3071  228f				   .skipL0136
   3072  228f				   .
   3073  228f							; 
   3074  228f
   3075  228f				   .
   3076  228f							; 
   3077  228f
   3078  228f				   .
   3079  228f							; 
   3080  228f
   3081  228f				   .
   3082  228f							; 
   3083  228f
   3084  228f				   .L0137		;  if _Main_CharY  <  12 then _T5_AP_Dir  =  3  :  temp6  =  rand  :  if temp6  >  128 then _T5_AP_Dir  =  5
   3085  228f
   3086  228f		       a5 86		      LDA	_Main_CharY
   3087  2291		       c9 0c		      CMP	#12
   3088  2293		       b0 1d		      BCS	.skipL0137
   3089  2295				   .condpart27
   3090  2295		       a9 03		      LDA	#3
   3091  2297		       85 a0		      STA	_T5_AP_Dir
   3092  2299		       a5 a2		      lda	rand
   3093  229b		       4a		      lsr
   3094  229c					      ifconst	rand16
   3095  229c		       26 ed		      rol	rand16
   3096  229e					      endif
   3097  229e		       90 02		      bcc	*+4
   3098  22a0		       49 b4		      eor	#$B4
   3099  22a2		       85 a2		      sta	rand
   3100  22a4					      ifconst	rand16
   3101  22a4		       45 ed		      eor	rand16
   3102  22a6					      endif
   3103  22a6		       85 a1		      STA	temp6
   3104  22a8		       a9 80		      LDA	#128
   3105  22aa		       c5 a1		      CMP	temp6
   3106  22ac		       b0 04		      BCS	.skip27then
   3107  22ae				   .condpart28
   3108  22ae		       a9 05		      LDA	#5
   3109  22b0		       85 a0		      STA	_T5_AP_Dir
   3110  22b2				   .skip27then
   3111  22b2				   .skipL0137
   3112  22b2				   .
   3113  22b2							; 
   3114  22b2
   3115  22b2				   .
   3116  22b2							; 
   3117  22b2
   3118  22b2				   .
   3119  22b2							; 
   3120  22b2
   3121  22b2				   .
   3122  22b2							; 
   3123  22b2
   3124  22b2				   .L0138		;  if _Main_CharX  >  148 then _T5_AP_Dir  =  7  :  temp6  =  rand  :	if temp6  >  128 then _T5_AP_Dir  =  5
   3125  22b2
   3126  22b2		       a9 94		      LDA	#148
   3127  22b4		       c5 81		      CMP	_Main_CharX
   3128  22b6		       b0 1d		      BCS	.skipL0138
   3129  22b8				   .condpart29
   3130  22b8		       a9 07		      LDA	#7
   3131  22ba		       85 a0		      STA	_T5_AP_Dir
   3132  22bc		       a5 a2		      lda	rand
   3133  22be		       4a		      lsr
   3134  22bf					      ifconst	rand16
   3135  22bf		       26 ed		      rol	rand16
   3136  22c1					      endif
   3137  22c1		       90 02		      bcc	*+4
   3138  22c3		       49 b4		      eor	#$B4
   3139  22c5		       85 a2		      sta	rand
   3140  22c7					      ifconst	rand16
   3141  22c7		       45 ed		      eor	rand16
   3142  22c9					      endif
   3143  22c9		       85 a1		      STA	temp6
   3144  22cb		       a9 80		      LDA	#128
   3145  22cd		       c5 a1		      CMP	temp6
   3146  22cf		       b0 04		      BCS	.skip29then
   3147  22d1				   .condpart30
   3148  22d1		       a9 05		      LDA	#5
   3149  22d3		       85 a0		      STA	_T5_AP_Dir
   3150  22d5				   .skip29then
   3151  22d5				   .skipL0138
   3152  22d5				   .
   3153  22d5							; 
   3154  22d5
   3155  22d5				   .
   3156  22d5							; 
   3157  22d5
   3158  22d5				   .
   3159  22d5							; 
   3160  22d5
   3161  22d5				   .
   3162  22d5							; 
   3163  22d5
   3164  22d5				   .L0139		;  if _Main_CharX  <  4 then _T5_AP_Dir  =  1	:  temp6  =  rand  :  if temp6	>  128 then _T5_AP_Dir	=  3
   3165  22d5
   3166  22d5		       a5 81		      LDA	_Main_CharX
   3167  22d7		       c9 04		      CMP	#4
   3168  22d9		       b0 1d		      BCS	.skipL0139
   3169  22db				   .condpart31
   3170  22db		       a9 01		      LDA	#1
   3171  22dd		       85 a0		      STA	_T5_AP_Dir
   3172  22df		       a5 a2		      lda	rand
   3173  22e1		       4a		      lsr
   3174  22e2					      ifconst	rand16
   3175  22e2		       26 ed		      rol	rand16
   3176  22e4					      endif
   3177  22e4		       90 02		      bcc	*+4
   3178  22e6		       49 b4		      eor	#$B4
   3179  22e8		       85 a2		      sta	rand
   3180  22ea					      ifconst	rand16
   3181  22ea		       45 ed		      eor	rand16
   3182  22ec					      endif
   3183  22ec		       85 a1		      STA	temp6
   3184  22ee		       a9 80		      LDA	#128
   3185  22f0		       c5 a1		      CMP	temp6
   3186  22f2		       b0 04		      BCS	.skip31then
   3187  22f4				   .condpart32
   3188  22f4		       a9 03		      LDA	#3
   3189  22f6		       85 a0		      STA	_T5_AP_Dir
   3190  22f8				   .skip31then
   3191  22f8				   .skipL0139
   3192  22f8				   .
   3193  22f8							; 
   3194  22f8
   3195  22f8				   .
   3196  22f8							; 
   3197  22f8
   3198  22f8				   .
   3199  22f8							; 
   3200  22f8
   3201  22f8				   .
   3202  22f8							; 
   3203  22f8
   3204  22f8				   .
   3205  22f8							; 
   3206  22f8
   3207  22f8				   .
   3208  22f8							; 
   3209  22f8
   3210  22f8				   .L0140		;  _AP_Mem_Dir  =  _T5_AP_Dir	+  4  :  if _AP_Mem_Dir  >  7 then _AP_Mem_Dir	=  _AP_Mem_Dir	-  8
   3211  22f8
   3212  22f8		       a5 a0		      LDA	_T5_AP_Dir
   3213  22fa		       18		      CLC
   3214  22fb		       69 04		      ADC	#4
   3215  22fd		       85 db		      STA	_AP_Mem_Dir
   3216  22ff		       a9 07		      LDA	#7
   3217  2301		       c5 db		      CMP	_AP_Mem_Dir
   3218  2303		       b0 07		      BCS	.skipL0140
   3219  2305				   .condpart33
   3220  2305		       a5 db		      LDA	_AP_Mem_Dir
   3221  2307		       38		      SEC
   3222  2308		       e9 08		      SBC	#8
   3223  230a		       85 db		      STA	_AP_Mem_Dir
   3224  230c				   .skipL0140
   3225  230c				   .
   3226  230c							; 
   3227  230c
   3228  230c				   .
   3229  230c							; 
   3230  230c
   3231  230c				   .
   3232  230c							; 
   3233  230c
   3234  230c				   .
   3235  230c							; 
   3236  230c
   3237  230c				   .L0141		;  _AP_Dir_Counter  =	0  :  _BitOp_P0_M1_Dir	=  _BitOp_P0_M1_Dir  &	%11110000
   3238  230c
   3239  230c		       a9 00		      LDA	#0
   3240  230e		       85 df		      STA	_AP_Dir_Counter
   3241  2310		       a5 da		      LDA	_BitOp_P0_M1_Dir
   3242  2312		       29 f0		      AND	#%11110000
   3243  2314		       85 da		      STA	_BitOp_P0_M1_Dir
   3244  2316				   .
   3245  2316							; 
   3246  2316
   3247  2316				   .
   3248  2316							; 
   3249  2316
   3250  2316				   .
   3251  2316							; 
   3252  2316
   3253  2316				   .
   3254  2316							; 
   3255  2316
   3256  2316				   .L0142		;  if _T5_AP_Dir  =  0 then _Bit0_P0_Dir_Up{0}  =  1
   3257  2316
   3258  2316		       a5 a0		      LDA	_T5_AP_Dir
   3259  2318		       c9 00		      CMP	#0
   3260  231a		       d0 06		      BNE	.skipL0142
   3261  231c				   .condpart34
   3262  231c		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3263  231e		       09 01		      ORA	#1
   3264  2320		       85 da		      STA	_Bit0_P0_Dir_Up
   3265  2322				   .skipL0142
   3266  2322				   .L0143		;  if _T5_AP_Dir  =  1 then _Bit0_P0_Dir_Up{0}  =  1  :  _Bit3_P0_Dir_Right{3}  =  1
   3267  2322
   3268  2322		       a5 a0		      LDA	_T5_AP_Dir
   3269  2324		       c9 01		      CMP	#1
   3270  2326		       d0 0c		      BNE	.skipL0143
   3271  2328				   .condpart35
   3272  2328		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3273  232a		       09 01		      ORA	#1
   3274  232c		       85 da		      STA	_Bit0_P0_Dir_Up
   3275  232e		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3276  2330		       09 08		      ORA	#8
   3277  2332		       85 da		      STA	_Bit3_P0_Dir_Right
   3278  2334				   .skipL0143
   3279  2334				   .L0144		;  if _T5_AP_Dir  =  2 then _Bit3_P0_Dir_Right{3}  =  1
   3280  2334
   3281  2334		       a5 a0		      LDA	_T5_AP_Dir
   3282  2336		       c9 02		      CMP	#2
   3283  2338		       d0 06		      BNE	.skipL0144
   3284  233a				   .condpart36
   3285  233a		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3286  233c		       09 08		      ORA	#8
   3287  233e		       85 da		      STA	_Bit3_P0_Dir_Right
   3288  2340				   .skipL0144
   3289  2340				   .L0145		;  if _T5_AP_Dir  =  3 then _Bit1_P0_Dir_Down{1}  =  1  :  _Bit3_P0_Dir_Right{3}  =  1
   3290  2340
   3291  2340		       a5 a0		      LDA	_T5_AP_Dir
   3292  2342		       c9 03		      CMP	#3
   3293  2344		       d0 0c		      BNE	.skipL0145
   3294  2346				   .condpart37
   3295  2346		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3296  2348		       09 02		      ORA	#2
   3297  234a		       85 da		      STA	_Bit1_P0_Dir_Down
   3298  234c		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3299  234e		       09 08		      ORA	#8
   3300  2350		       85 da		      STA	_Bit3_P0_Dir_Right
   3301  2352				   .skipL0145
   3302  2352				   .L0146		;  if _T5_AP_Dir  =  4 then _Bit1_P0_Dir_Down{1}  =  1
   3303  2352
   3304  2352		       a5 a0		      LDA	_T5_AP_Dir
   3305  2354		       c9 04		      CMP	#4
   3306  2356		       d0 06		      BNE	.skipL0146
   3307  2358				   .condpart38
   3308  2358		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3309  235a		       09 02		      ORA	#2
   3310  235c		       85 da		      STA	_Bit1_P0_Dir_Down
   3311  235e				   .skipL0146
   3312  235e				   .L0147		;  if _T5_AP_Dir  =  5 then _Bit1_P0_Dir_Down{1}  =  1  :  _Bit2_P0_Dir_Left{2}  =  1
   3313  235e
   3314  235e		       a5 a0		      LDA	_T5_AP_Dir
   3315  2360		       c9 05		      CMP	#5
   3316  2362		       d0 0c		      BNE	.skipL0147
   3317  2364				   .condpart39
   3318  2364		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3319  2366		       09 02		      ORA	#2
   3320  2368		       85 da		      STA	_Bit1_P0_Dir_Down
   3321  236a		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3322  236c		       09 04		      ORA	#4
   3323  236e		       85 da		      STA	_Bit2_P0_Dir_Left
   3324  2370				   .skipL0147
   3325  2370				   .L0148		;  if _T5_AP_Dir  =  6 then _Bit2_P0_Dir_Left{2}  =  1
   3326  2370
   3327  2370		       a5 a0		      LDA	_T5_AP_Dir
   3328  2372		       c9 06		      CMP	#6
   3329  2374		       d0 06		      BNE	.skipL0148
   3330  2376				   .condpart40
   3331  2376		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3332  2378		       09 04		      ORA	#4
   3333  237a		       85 da		      STA	_Bit2_P0_Dir_Left
   3334  237c				   .skipL0148
   3335  237c				   .L0149		;  if _T5_AP_Dir  =  7 then _Bit0_P0_Dir_Up{0}  =  1  :  _Bit2_P0_Dir_Left{2}	=  1
   3336  237c
   3337  237c		       a5 a0		      LDA	_T5_AP_Dir
   3338  237e		       c9 07		      CMP	#7
   3339  2380		       d0 0c		      BNE	.skipL0149
   3340  2382				   .condpart41
   3341  2382		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3342  2384		       09 01		      ORA	#1
   3343  2386		       85 da		      STA	_Bit0_P0_Dir_Up
   3344  2388		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3345  238a		       09 04		      ORA	#4
   3346  238c		       85 da		      STA	_Bit2_P0_Dir_Left
   3347  238e				   .skipL0149
   3348  238e				   .
   3349  238e							; 
   3350  238e
   3351  238e				   .__AP_Skip_New_Dir
   3352  238e							; __AP_Skip_New_Dir
   3353  238e
   3354  238e				   .
   3355  238e							; 
   3356  238e
   3357  238e				   .
   3358  238e							; 
   3359  238e
   3360  238e				   .
   3361  238e							; 
   3362  238e
   3363  238e				   .
   3364  238e							; 
   3365  238e
   3366  238e				   .
   3367  238e							; 
   3368  238e
   3369  238e				   .
   3370  238e							; 
   3371  238e
   3372  238e				   .
   3373  238e							; 
   3374  238e
   3375  238e				   .
   3376  238e							; 
   3377  238e
   3378  238e				   .
   3379  238e							; 
   3380  238e
   3381  238e				   .
   3382  238e							; 
   3383  238e
   3384  238e				   .
   3385  238e							; 
   3386  238e
   3387  238e				   .L0150		;  if _Bit3_Auto_Play{3}  &&  _Bit0_P0_Dir_Up{0} then goto __AP_Move_Up
   3388  238e
   3389  238e		       a5 ec		      LDA	_Bit3_Auto_Play
   3390  2390		       29 08		      AND	#8
   3391  2392		       f0 08		      BEQ	.skipL0150
   3392  2394				   .condpart42
   3393  2394		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3394  2396		       4a		      LSR
   3395  2397		       90 03		      BCC	.skip42then
   3396  2399				   .condpart43
   3397  2399		       4c ac 33 	      jmp	.__AP_Move_Up
   3398  239c
   3399  239c				   .skip42then
   3400  239c				   .skipL0150
   3401  239c				   .
   3402  239c							; 
   3403  239c
   3404  239c				   .
   3405  239c							; 
   3406  239c
   3407  239c				   .
   3408  239c							; 
   3409  239c
   3410  239c				   .
   3411  239c							; 
   3412  239c
   3413  239c				   .L0151		;  if !joy0up then goto __Skip_Joy0_Up
   3414  239c
   3415  239c		       a9 10		      lda	#$10
   3416  239e		       2c 80 02 	      bit	SWCHA
   3417  23a1		       f0 03		      BEQ	.skipL0151
   3418  23a3				   .condpart44
   3419  23a3		       4c 78 34 	      jmp	.__Skip_Joy0_Up
   3420  23a6
   3421  23a6				   .skipL0151
   3422  23a6				   .
   3423  23a6							; 
   3424  23a6
   3425  23a6				   .
   3426  23a6							; 
   3427  23a6
   3428  23a6				   .
   3429  23a6							; 
   3430  23a6
   3431  23a6				   .
   3432  23a6							; 
   3433  23a6
   3434  23a6				   .L0152		;  _Bit0_P0_Dir_Up{0}	=  1
   3435  23a6
   3436  23a6		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3437  23a8		       09 01		      ORA	#1
   3438  23aa		       85 da		      STA	_Bit0_P0_Dir_Up
   3439  23ac				   .
   3440  23ac							; 
   3441  23ac
   3442  23ac				   .__AP_Move_Up
   3443  23ac							; __AP_Move_Up
   3444  23ac
   3445  23ac				   .
   3446  23ac							; 
   3447  23ac
   3448  23ac				   .
   3449  23ac							; 
   3450  23ac
   3451  23ac				   .
   3452  23ac							; 
   3453  23ac
   3454  23ac				   .
   3455  23ac							; 
   3456  23ac
   3457  23ac				   .
   3458  23ac							; 
   3459  23ac
   3460  23ac				   .L0153		;  temp5  =   ( _Main_CharX - 10 )  / 4
   3461  23ac
   3462  23ac							; complex statement detected
   3463  23ac		       a5 81		      LDA	_Main_CharX
   3464  23ae		       38		      SEC
   3465  23af		       e9 0a		      SBC	#10
   3466  23b1		       4a		      lsr
   3467  23b2		       4a		      lsr
   3468  23b3		       85 a0		      STA	temp5
   3469  23b5				   .
   3470  23b5							; 
   3471  23b5
   3472  23b5				   .L0154		;  temp4  =   ( _Main_CharX - 17 )  / 4
   3473  23b5
   3474  23b5							; complex statement detected
   3475  23b5		       a5 81		      LDA	_Main_CharX
   3476  23b7		       38		      SEC
   3477  23b8		       e9 11		      SBC	#17
   3478  23ba		       4a		      lsr
   3479  23bb		       4a		      lsr
   3480  23bc		       85 9f		      STA	temp4
   3481  23be				   .
   3482  23be							; 
   3483  23be
   3484  23be				   .L0155		;  temp3  =  temp5  -	1
   3485  23be
   3486  23be		       a5 a0		      LDA	temp5
   3487  23c0		       38		      SEC
   3488  23c1		       e9 01		      SBC	#1
   3489  23c3		       85 9e		      STA	temp3
   3490  23c5				   .
   3491  23c5							; 
   3492  23c5
   3493  23c5				   .L0156		;  temp6  =   ( _Main_CharY - 9 )  / 8
   3494  23c5
   3495  23c5							; complex statement detected
   3496  23c5		       a5 86		      LDA	_Main_CharY
   3497  23c7		       38		      SEC
   3498  23c8		       e9 09		      SBC	#9
   3499  23ca		       4a		      lsr
   3500  23cb		       4a		      lsr
   3501  23cc		       4a		      lsr
   3502  23cd		       85 a1		      STA	temp6
   3503  23cf				   .
   3504  23cf							; 
   3505  23cf
   3506  23cf				   .L0157		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   3507  23cf
   3508  23cf		       a5 a0		      LDA	temp5
   3509  23d1		       c9 22		      CMP	#34
   3510  23d3		       b0 21		      BCS	.skipL0157
   3511  23d5				   .condpart45
   3512  23d5		       a5 a0		      LDA	temp5
   3513  23d7		       a4 a1		      LDY	temp6
   3514  23d9		       85 ee		      sta	temp7
   3515  23db		       a9 33		      lda	#>(ret_point3-1)
   3516  23dd		       48		      pha
   3517  23de		       a9 f0		      lda	#<(ret_point3-1)
   3518  23e0		       48		      pha
   3519  23e1		       a9 f2		      lda	#>(pfread-1)
   3520  23e3		       48		      pha
   3521  23e4		       a9 ab		      lda	#<(pfread-1)
   3522  23e6		       48		      pha
   3523  23e7		       a5 ee		      lda	temp7
   3524  23e9		       48		      pha
   3525  23ea		       8a		      txa
   3526  23eb		       48		      pha
   3527  23ec		       a2 08		      ldx	#8
   3528  23ee		       4c eb ff 	      jmp	BS_jsr
   3529  23f1				   ret_point3
   3530  23f1		       d0 03		      BNE	.skip45then
   3531  23f3				   .condpart46
   3532  23f3		       4c 78 34 	      jmp	.__Skip_Joy0_Up
   3533  23f6
   3534  23f6				   .skip45then
   3535  23f6				   .skipL0157
   3536  23f6				   .
   3537  23f6							; 
   3538  23f6
   3539  23f6				   .L0158		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   3540  23f6
   3541  23f6		       a5 9f		      LDA	temp4
   3542  23f8		       c9 22		      CMP	#34
   3543  23fa		       b0 21		      BCS	.skipL0158
   3544  23fc				   .condpart47
   3545  23fc		       a5 9f		      LDA	temp4
   3546  23fe		       a4 a1		      LDY	temp6
   3547  2400		       85 ee		      sta	temp7
   3548  2402		       a9 34		      lda	#>(ret_point4-1)
   3549  2404		       48		      pha
   3550  2405		       a9 17		      lda	#<(ret_point4-1)
   3551  2407		       48		      pha
   3552  2408		       a9 f2		      lda	#>(pfread-1)
   3553  240a		       48		      pha
   3554  240b		       a9 ab		      lda	#<(pfread-1)
   3555  240d		       48		      pha
   3556  240e		       a5 ee		      lda	temp7
   3557  2410		       48		      pha
   3558  2411		       8a		      txa
   3559  2412		       48		      pha
   3560  2413		       a2 08		      ldx	#8
   3561  2415		       4c eb ff 	      jmp	BS_jsr
   3562  2418				   ret_point4
   3563  2418		       d0 03		      BNE	.skip47then
   3564  241a				   .condpart48
   3565  241a		       4c 78 34 	      jmp	.__Skip_Joy0_Up
   3566  241d
   3567  241d				   .skip47then
   3568  241d				   .skipL0158
   3569  241d				   .
   3570  241d							; 
   3571  241d
   3572  241d				   .L0159		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   3573  241d
   3574  241d		       a5 9e		      LDA	temp3
   3575  241f		       c9 22		      CMP	#34
   3576  2421		       b0 21		      BCS	.skipL0159
   3577  2423				   .condpart49
   3578  2423		       a5 9e		      LDA	temp3
   3579  2425		       a4 a1		      LDY	temp6
   3580  2427		       85 ee		      sta	temp7
   3581  2429		       a9 34		      lda	#>(ret_point5-1)
   3582  242b		       48		      pha
   3583  242c		       a9 3e		      lda	#<(ret_point5-1)
   3584  242e		       48		      pha
   3585  242f		       a9 f2		      lda	#>(pfread-1)
   3586  2431		       48		      pha
   3587  2432		       a9 ab		      lda	#<(pfread-1)
   3588  2434		       48		      pha
   3589  2435		       a5 ee		      lda	temp7
   3590  2437		       48		      pha
   3591  2438		       8a		      txa
   3592  2439		       48		      pha
   3593  243a		       a2 08		      ldx	#8
   3594  243c		       4c eb ff 	      jmp	BS_jsr
   3595  243f				   ret_point5
   3596  243f		       d0 03		      BNE	.skip49then
   3597  2441				   .condpart50
   3598  2441		       4c 78 34 	      jmp	.__Skip_Joy0_Up
   3599  2444
   3600  2444				   .skip49then
   3601  2444				   .skipL0159
   3602  2444				   .
   3603  2444							; 
   3604  2444
   3605  2444				   .
   3606  2444							; 
   3607  2444
   3608  2444				   .
   3609  2444							; 
   3610  2444
   3611  2444				   .
   3612  2444							; 
   3613  2444
   3614  2444				   .L0160		;  _Main_CharY  =  _Main_CharY  -  1  :  pfscroll downdown
   3615  2444
   3616  2444		       c6 86		      DEC	_Main_CharY
   3617  2446		       a9 08		      LDA	#8
   3618  2448		       85 ee		      sta	temp7
   3619  244a		       a9 34		      lda	#>(ret_point6-1)
   3620  244c		       48		      pha
   3621  244d		       a9 5f		      lda	#<(ret_point6-1)
   3622  244f		       48		      pha
   3623  2450		       a9 f3		      lda	#>(pfscroll-1)
   3624  2452		       48		      pha
   3625  2453		       a9 63		      lda	#<(pfscroll-1)
   3626  2455		       48		      pha
   3627  2456		       a5 ee		      lda	temp7
   3628  2458		       48		      pha
   3629  2459		       8a		      txa
   3630  245a		       48		      pha
   3631  245b		       a2 08		      ldx	#8
   3632  245d		       4c eb ff 	      jmp	BS_jsr
   3633  2460				   ret_point6
   3634  2460				   .L0161		;  gosub _P_U bank5
   3635  2460
   3636  2460		       85 ee		      sta	temp7
   3637  2462		       a9 34		      lda	#>(ret_point7-1)
   3638  2464		       48		      pha
   3639  2465		       a9 77		      lda	#<(ret_point7-1)
   3640  2467		       48		      pha
   3641  2468		       a9 8f		      lda	#>(._P_U-1)
   3642  246a		       48		      pha
   3643  246b		       a9 ff		      lda	#<(._P_U-1)
   3644  246d		       48		      pha
   3645  246e		       a5 ee		      lda	temp7
   3646  2470		       48		      pha
   3647  2471		       8a		      txa
   3648  2472		       48		      pha
   3649  2473		       a2 05		      ldx	#5
   3650  2475		       4c eb ff 	      jmp	BS_jsr
   3651  2478				   ret_point7
   3652  2478				   .
   3653  2478							; 
   3654  2478
   3655  2478				   .__Skip_Joy0_Up
   3656  2478							; __Skip_Joy0_Up
   3657  2478
   3658  2478				   .
   3659  2478							; 
   3660  2478
   3661  2478				   .
   3662  2478							; 
   3663  2478
   3664  2478				   .
   3665  2478							; 
   3666  2478
   3667  2478				   .
   3668  2478							; 
   3669  2478
   3670  2478				   .
   3671  2478							; 
   3672  2478
   3673  2478				   .
   3674  2478							; 
   3675  2478
   3676  2478				   .
   3677  2478							; 
   3678  2478
   3679  2478				   .
   3680  2478							; 
   3681  2478
   3682  2478				   .
   3683  2478							; 
   3684  2478
   3685  2478				   .
   3686  2478							; 
   3687  2478
   3688  2478				   .L0162		;  if _Bit3_Auto_Play{3}  &&  _Bit1_P0_Dir_Down{1} then goto __AP_Move_Down
   3689  2478
   3690  2478		       a5 ec		      LDA	_Bit3_Auto_Play
   3691  247a		       29 08		      AND	#8
   3692  247c		       f0 09		      BEQ	.skipL0162
   3693  247e				   .condpart51
   3694  247e		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3695  2480		       29 02		      AND	#2
   3696  2482		       f0 03		      BEQ	.skip51then
   3697  2484				   .condpart52
   3698  2484		       4c 97 34 	      jmp	.__AP_Move_Down
   3699  2487
   3700  2487				   .skip51then
   3701  2487				   .skipL0162
   3702  2487				   .
   3703  2487							; 
   3704  2487
   3705  2487				   .
   3706  2487							; 
   3707  2487
   3708  2487				   .
   3709  2487							; 
   3710  2487
   3711  2487				   .
   3712  2487							; 
   3713  2487
   3714  2487				   .L0163		;  if !joy0down then goto __Skip_Joy0_Down
   3715  2487
   3716  2487		       a9 20		      lda	#$20
   3717  2489		       2c 80 02 	      bit	SWCHA
   3718  248c		       f0 03		      BEQ	.skipL0163
   3719  248e				   .condpart53
   3720  248e		       4c 63 35 	      jmp	.__Skip_Joy0_Down
   3721  2491
   3722  2491				   .skipL0163
   3723  2491				   .
   3724  2491							; 
   3725  2491
   3726  2491				   .
   3727  2491							; 
   3728  2491
   3729  2491				   .
   3730  2491							; 
   3731  2491
   3732  2491				   .
   3733  2491							; 
   3734  2491
   3735  2491				   .L0164		;  _Bit1_P0_Dir_Down{1}  =  1
   3736  2491
   3737  2491		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3738  2493		       09 02		      ORA	#2
   3739  2495		       85 da		      STA	_Bit1_P0_Dir_Down
   3740  2497				   .
   3741  2497							; 
   3742  2497
   3743  2497				   .__AP_Move_Down
   3744  2497							; __AP_Move_Down
   3745  2497
   3746  2497				   .
   3747  2497							; 
   3748  2497
   3749  2497				   .
   3750  2497							; 
   3751  2497
   3752  2497				   .
   3753  2497							; 
   3754  2497
   3755  2497				   .
   3756  2497							; 
   3757  2497
   3758  2497				   .
   3759  2497							; 
   3760  2497
   3761  2497				   .L0165		;  temp5  =   ( _Main_CharX - 10 )  / 4
   3762  2497
   3763  2497							; complex statement detected
   3764  2497		       a5 81		      LDA	_Main_CharX
   3765  2499		       38		      SEC
   3766  249a		       e9 0a		      SBC	#10
   3767  249c		       4a		      lsr
   3768  249d		       4a		      lsr
   3769  249e		       85 a0		      STA	temp5
   3770  24a0				   .
   3771  24a0							; 
   3772  24a0
   3773  24a0				   .L0166		;  temp4  =   ( _Main_CharX - 17 )  / 4
   3774  24a0
   3775  24a0							; complex statement detected
   3776  24a0		       a5 81		      LDA	_Main_CharX
   3777  24a2		       38		      SEC
   3778  24a3		       e9 11		      SBC	#17
   3779  24a5		       4a		      lsr
   3780  24a6		       4a		      lsr
   3781  24a7		       85 9f		      STA	temp4
   3782  24a9				   .
   3783  24a9							; 
   3784  24a9
   3785  24a9				   .L0167		;  temp3  =  temp5  -	1
   3786  24a9
   3787  24a9		       a5 a0		      LDA	temp5
   3788  24ab		       38		      SEC
   3789  24ac		       e9 01		      SBC	#1
   3790  24ae		       85 9e		      STA	temp3
   3791  24b0				   .
   3792  24b0							; 
   3793  24b0
   3794  24b0				   .L0168		;  temp6  =   ( _Main_CharY + 1 )  / 8
   3795  24b0
   3796  24b0							; complex statement detected
   3797  24b0		       a5 86		      LDA	_Main_CharY
   3798  24b2		       18		      CLC
   3799  24b3		       69 01		      ADC	#1
   3800  24b5		       4a		      lsr
   3801  24b6		       4a		      lsr
   3802  24b7		       4a		      lsr
   3803  24b8		       85 a1		      STA	temp6
   3804  24ba				   .
   3805  24ba							; 
   3806  24ba
   3807  24ba				   .L0169		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   3808  24ba
   3809  24ba		       a5 a0		      LDA	temp5
   3810  24bc		       c9 22		      CMP	#34
   3811  24be		       b0 21		      BCS	.skipL0169
   3812  24c0				   .condpart54
   3813  24c0		       a5 a0		      LDA	temp5
   3814  24c2		       a4 a1		      LDY	temp6
   3815  24c4		       85 ee		      sta	temp7
   3816  24c6		       a9 34		      lda	#>(ret_point8-1)
   3817  24c8		       48		      pha
   3818  24c9		       a9 db		      lda	#<(ret_point8-1)
   3819  24cb		       48		      pha
   3820  24cc		       a9 f2		      lda	#>(pfread-1)
   3821  24ce		       48		      pha
   3822  24cf		       a9 ab		      lda	#<(pfread-1)
   3823  24d1		       48		      pha
   3824  24d2		       a5 ee		      lda	temp7
   3825  24d4		       48		      pha
   3826  24d5		       8a		      txa
   3827  24d6		       48		      pha
   3828  24d7		       a2 08		      ldx	#8
   3829  24d9		       4c eb ff 	      jmp	BS_jsr
   3830  24dc				   ret_point8
   3831  24dc		       d0 03		      BNE	.skip54then
   3832  24de				   .condpart55
   3833  24de		       4c 63 35 	      jmp	.__Skip_Joy0_Down
   3834  24e1
   3835  24e1				   .skip54then
   3836  24e1				   .skipL0169
   3837  24e1				   .
   3838  24e1							; 
   3839  24e1
   3840  24e1				   .L0170		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   3841  24e1
   3842  24e1		       a5 9f		      LDA	temp4
   3843  24e3		       c9 22		      CMP	#34
   3844  24e5		       b0 21		      BCS	.skipL0170
   3845  24e7				   .condpart56
   3846  24e7		       a5 9f		      LDA	temp4
   3847  24e9		       a4 a1		      LDY	temp6
   3848  24eb		       85 ee		      sta	temp7
   3849  24ed		       a9 35		      lda	#>(ret_point9-1)
   3850  24ef		       48		      pha
   3851  24f0		       a9 02		      lda	#<(ret_point9-1)
   3852  24f2		       48		      pha
   3853  24f3		       a9 f2		      lda	#>(pfread-1)
   3854  24f5		       48		      pha
   3855  24f6		       a9 ab		      lda	#<(pfread-1)
   3856  24f8		       48		      pha
   3857  24f9		       a5 ee		      lda	temp7
   3858  24fb		       48		      pha
   3859  24fc		       8a		      txa
   3860  24fd		       48		      pha
   3861  24fe		       a2 08		      ldx	#8
   3862  2500		       4c eb ff 	      jmp	BS_jsr
   3863  2503				   ret_point9
   3864  2503		       d0 03		      BNE	.skip56then
   3865  2505				   .condpart57
   3866  2505		       4c 63 35 	      jmp	.__Skip_Joy0_Down
   3867  2508
   3868  2508				   .skip56then
   3869  2508				   .skipL0170
   3870  2508				   .
   3871  2508							; 
   3872  2508
   3873  2508				   .L0171		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   3874  2508
   3875  2508		       a5 9e		      LDA	temp3
   3876  250a		       c9 22		      CMP	#34
   3877  250c		       b0 21		      BCS	.skipL0171
   3878  250e				   .condpart58
   3879  250e		       a5 9e		      LDA	temp3
   3880  2510		       a4 a1		      LDY	temp6
   3881  2512		       85 ee		      sta	temp7
   3882  2514		       a9 35		      lda	#>(ret_point10-1)
   3883  2516		       48		      pha
   3884  2517		       a9 29		      lda	#<(ret_point10-1)
   3885  2519		       48		      pha
   3886  251a		       a9 f2		      lda	#>(pfread-1)
   3887  251c		       48		      pha
   3888  251d		       a9 ab		      lda	#<(pfread-1)
   3889  251f		       48		      pha
   3890  2520		       a5 ee		      lda	temp7
   3891  2522		       48		      pha
   3892  2523		       8a		      txa
   3893  2524		       48		      pha
   3894  2525		       a2 08		      ldx	#8
   3895  2527		       4c eb ff 	      jmp	BS_jsr
   3896  252a				   ret_point10
   3897  252a		       d0 03		      BNE	.skip58then
   3898  252c				   .condpart59
   3899  252c		       4c 63 35 	      jmp	.__Skip_Joy0_Down
   3900  252f
   3901  252f				   .skip58then
   3902  252f				   .skipL0171
   3903  252f				   .
   3904  252f							; 
   3905  252f
   3906  252f				   .
   3907  252f							; 
   3908  252f
   3909  252f				   .
   3910  252f							; 
   3911  252f
   3912  252f				   .
   3913  252f							; 
   3914  252f
   3915  252f				   .L0172		;  _Main_CharY  =  _Main_CharY  +  1  :  pfscroll upup
   3916  252f
   3917  252f		       e6 86		      INC	_Main_CharY
   3918  2531		       a9 06		      LDA	#6
   3919  2533		       85 ee		      sta	temp7
   3920  2535		       a9 35		      lda	#>(ret_point11-1)
   3921  2537		       48		      pha
   3922  2538		       a9 4a		      lda	#<(ret_point11-1)
   3923  253a		       48		      pha
   3924  253b		       a9 f3		      lda	#>(pfscroll-1)
   3925  253d		       48		      pha
   3926  253e		       a9 63		      lda	#<(pfscroll-1)
   3927  2540		       48		      pha
   3928  2541		       a5 ee		      lda	temp7
   3929  2543		       48		      pha
   3930  2544		       8a		      txa
   3931  2545		       48		      pha
   3932  2546		       a2 08		      ldx	#8
   3933  2548		       4c eb ff 	      jmp	BS_jsr
   3934  254b				   ret_point11
   3935  254b				   .L0173		;  gosub _P_D bank5
   3936  254b
   3937  254b		       85 ee		      sta	temp7
   3938  254d		       a9 35		      lda	#>(ret_point12-1)
   3939  254f		       48		      pha
   3940  2550		       a9 62		      lda	#<(ret_point12-1)
   3941  2552		       48		      pha
   3942  2553		       a9 90		      lda	#>(._P_D-1)
   3943  2555		       48		      pha
   3944  2556		       a9 70		      lda	#<(._P_D-1)
   3945  2558		       48		      pha
   3946  2559		       a5 ee		      lda	temp7
   3947  255b		       48		      pha
   3948  255c		       8a		      txa
   3949  255d		       48		      pha
   3950  255e		       a2 05		      ldx	#5
   3951  2560		       4c eb ff 	      jmp	BS_jsr
   3952  2563				   ret_point12
   3953  2563				   .
   3954  2563							; 
   3955  2563
   3956  2563				   .__Skip_Joy0_Down
   3957  2563							; __Skip_Joy0_Down
   3958  2563
   3959  2563				   .
   3960  2563							; 
   3961  2563
   3962  2563				   .
   3963  2563							; 
   3964  2563
   3965  2563				   .
   3966  2563							; 
   3967  2563
   3968  2563				   .
   3969  2563							; 
   3970  2563
   3971  2563				   .
   3972  2563							; 
   3973  2563
   3974  2563				   .
   3975  2563							; 
   3976  2563
   3977  2563				   .
   3978  2563							; 
   3979  2563
   3980  2563				   .
   3981  2563							; 
   3982  2563
   3983  2563				   .
   3984  2563							; 
   3985  2563
   3986  2563				   .
   3987  2563							; 
   3988  2563
   3989  2563				   .L0174		;  if _Bit3_Auto_Play{3}  &&  _Bit2_P0_Dir_Left{2} then goto __AP_Move_Left
   3990  2563
   3991  2563		       a5 ec		      LDA	_Bit3_Auto_Play
   3992  2565		       29 08		      AND	#8
   3993  2567		       f0 09		      BEQ	.skipL0174
   3994  2569				   .condpart60
   3995  2569		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3996  256b		       29 04		      AND	#4
   3997  256d		       f0 03		      BEQ	.skip60then
   3998  256f				   .condpart61
   3999  256f		       4c 80 35 	      jmp	.__AP_Move_Left
   4000  2572
   4001  2572				   .skip60then
   4002  2572				   .skipL0174
   4003  2572				   .
   4004  2572							; 
   4005  2572
   4006  2572				   .
   4007  2572							; 
   4008  2572
   4009  2572				   .
   4010  2572							; 
   4011  2572
   4012  2572				   .
   4013  2572							; 
   4014  2572
   4015  2572				   .L0175		;  if !joy0left then goto __Skip_Joy0_Left
   4016  2572
   4017  2572		       2c 80 02 	      bit	SWCHA
   4018  2575		       50 03		      BVC	.skipL0175
   4019  2577				   .condpart62
   4020  2577		       4c 1c 36 	      jmp	.__Skip_Joy0_Left
   4021  257a
   4022  257a				   .skipL0175
   4023  257a				   .
   4024  257a							; 
   4025  257a
   4026  257a				   .
   4027  257a							; 
   4028  257a
   4029  257a				   .
   4030  257a							; 
   4031  257a
   4032  257a				   .
   4033  257a							; 
   4034  257a
   4035  257a				   .L0176		;  _Bit2_P0_Dir_Left{2}  =  1
   4036  257a
   4037  257a		       a5 da		      LDA	_Bit2_P0_Dir_Left
   4038  257c		       09 04		      ORA	#4
   4039  257e		       85 da		      STA	_Bit2_P0_Dir_Left
   4040  2580				   .
   4041  2580							; 
   4042  2580
   4043  2580				   .__AP_Move_Left
   4044  2580							; __AP_Move_Left
   4045  2580
   4046  2580				   .
   4047  2580							; 
   4048  2580
   4049  2580				   .
   4050  2580							; 
   4051  2580
   4052  2580				   .
   4053  2580							; 
   4054  2580
   4055  2580				   .
   4056  2580							; 
   4057  2580
   4058  2580				   .
   4059  2580							; 
   4060  2580
   4061  2580				   .L0177		;  temp5  =   ( _Main_CharY )	/ 8
   4062  2580
   4063  2580							; complex statement detected
   4064  2580		       a5 86		      LDA	_Main_CharY
   4065  2582		       4a		      lsr
   4066  2583		       4a		      lsr
   4067  2584		       4a		      lsr
   4068  2585		       85 a0		      STA	temp5
   4069  2587				   .
   4070  2587							; 
   4071  2587
   4072  2587				   .L0178		;  temp3  =   ( _Main_CharY - 8 )  / 8
   4073  2587
   4074  2587							; complex statement detected
   4075  2587		       a5 86		      LDA	_Main_CharY
   4076  2589		       38		      SEC
   4077  258a		       e9 08		      SBC	#8
   4078  258c		       4a		      lsr
   4079  258d		       4a		      lsr
   4080  258e		       4a		      lsr
   4081  258f		       85 9e		      STA	temp3
   4082  2591				   .
   4083  2591							; 
   4084  2591
   4085  2591				   .L0179		;  temp6  =   ( _Main_CharX - 18 )  / 4
   4086  2591
   4087  2591							; complex statement detected
   4088  2591		       a5 81		      LDA	_Main_CharX
   4089  2593		       38		      SEC
   4090  2594		       e9 12		      SBC	#18
   4091  2596		       4a		      lsr
   4092  2597		       4a		      lsr
   4093  2598		       85 a1		      STA	temp6
   4094  259a				   .
   4095  259a							; 
   4096  259a
   4097  259a				   .L0180		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   4098  259a
   4099  259a		       a5 a1		      LDA	temp6
   4100  259c		       c9 22		      CMP	#34
   4101  259e		       b0 21		      BCS	.skipL0180
   4102  25a0				   .condpart63
   4103  25a0		       a5 a1		      LDA	temp6
   4104  25a2		       a4 a0		      LDY	temp5
   4105  25a4		       85 ee		      sta	temp7
   4106  25a6		       a9 35		      lda	#>(ret_point13-1)
   4107  25a8		       48		      pha
   4108  25a9		       a9 bb		      lda	#<(ret_point13-1)
   4109  25ab		       48		      pha
   4110  25ac		       a9 f2		      lda	#>(pfread-1)
   4111  25ae		       48		      pha
   4112  25af		       a9 ab		      lda	#<(pfread-1)
   4113  25b1		       48		      pha
   4114  25b2		       a5 ee		      lda	temp7
   4115  25b4		       48		      pha
   4116  25b5		       8a		      txa
   4117  25b6		       48		      pha
   4118  25b7		       a2 08		      ldx	#8
   4119  25b9		       4c eb ff 	      jmp	BS_jsr
   4120  25bc				   ret_point13
   4121  25bc		       d0 03		      BNE	.skip63then
   4122  25be				   .condpart64
   4123  25be		       4c 1c 36 	      jmp	.__Skip_Joy0_Left
   4124  25c1
   4125  25c1				   .skip63then
   4126  25c1				   .skipL0180
   4127  25c1				   .
   4128  25c1							; 
   4129  25c1
   4130  25c1				   .L0181		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   4131  25c1
   4132  25c1		       a5 a1		      LDA	temp6
   4133  25c3		       c9 22		      CMP	#34
   4134  25c5		       b0 21		      BCS	.skipL0181
   4135  25c7				   .condpart65
   4136  25c7		       a5 a1		      LDA	temp6
   4137  25c9		       a4 9e		      LDY	temp3
   4138  25cb		       85 ee		      sta	temp7
   4139  25cd		       a9 35		      lda	#>(ret_point14-1)
   4140  25cf		       48		      pha
   4141  25d0		       a9 e2		      lda	#<(ret_point14-1)
   4142  25d2		       48		      pha
   4143  25d3		       a9 f2		      lda	#>(pfread-1)
   4144  25d5		       48		      pha
   4145  25d6		       a9 ab		      lda	#<(pfread-1)
   4146  25d8		       48		      pha
   4147  25d9		       a5 ee		      lda	temp7
   4148  25db		       48		      pha
   4149  25dc		       8a		      txa
   4150  25dd		       48		      pha
   4151  25de		       a2 08		      ldx	#8
   4152  25e0		       4c eb ff 	      jmp	BS_jsr
   4153  25e3				   ret_point14
   4154  25e3		       d0 03		      BNE	.skip65then
   4155  25e5				   .condpart66
   4156  25e5		       4c 1c 36 	      jmp	.__Skip_Joy0_Left
   4157  25e8
   4158  25e8				   .skip65then
   4159  25e8				   .skipL0181
   4160  25e8				   .
   4161  25e8							; 
   4162  25e8
   4163  25e8				   .
   4164  25e8							; 
   4165  25e8
   4166  25e8				   .
   4167  25e8							; 
   4168  25e8
   4169  25e8				   .
   4170  25e8							; 
   4171  25e8
   4172  25e8				   .L0182		;  _Main_CharX  =  _Main_CharX  -  1  :  pfscroll right
   4173  25e8
   4174  25e8		       c6 81		      DEC	_Main_CharX
   4175  25ea		       a9 01		      LDA	#1
   4176  25ec		       85 ee		      sta	temp7
   4177  25ee		       a9 36		      lda	#>(ret_point15-1)
   4178  25f0		       48		      pha
   4179  25f1		       a9 03		      lda	#<(ret_point15-1)
   4180  25f3		       48		      pha
   4181  25f4		       a9 f3		      lda	#>(pfscroll-1)
   4182  25f6		       48		      pha
   4183  25f7		       a9 63		      lda	#<(pfscroll-1)
   4184  25f9		       48		      pha
   4185  25fa		       a5 ee		      lda	temp7
   4186  25fc		       48		      pha
   4187  25fd		       8a		      txa
   4188  25fe		       48		      pha
   4189  25ff		       a2 08		      ldx	#8
   4190  2601		       4c eb ff 	      jmp	BS_jsr
   4191  2604				   ret_point15
   4192  2604				   .L0183		;  gosub _P_L bank5
   4193  2604
   4194  2604		       85 ee		      sta	temp7
   4195  2606		       a9 36		      lda	#>(ret_point16-1)
   4196  2608		       48		      pha
   4197  2609		       a9 1b		      lda	#<(ret_point16-1)
   4198  260b		       48		      pha
   4199  260c		       a9 91		      lda	#>(._P_L-1)
   4200  260e		       48		      pha
   4201  260f		       a9 52		      lda	#<(._P_L-1)
   4202  2611		       48		      pha
   4203  2612		       a5 ee		      lda	temp7
   4204  2614		       48		      pha
   4205  2615		       8a		      txa
   4206  2616		       48		      pha
   4207  2617		       a2 05		      ldx	#5
   4208  2619		       4c eb ff 	      jmp	BS_jsr
   4209  261c				   ret_point16
   4210  261c				   .
   4211  261c							; 
   4212  261c
   4213  261c				   .__Skip_Joy0_Left
   4214  261c							; __Skip_Joy0_Left
   4215  261c
   4216  261c				   .
   4217  261c							; 
   4218  261c
   4219  261c				   .
   4220  261c							; 
   4221  261c
   4222  261c				   .
   4223  261c							; 
   4224  261c
   4225  261c				   .
   4226  261c							; 
   4227  261c
   4228  261c				   .
   4229  261c							; 
   4230  261c
   4231  261c				   .
   4232  261c							; 
   4233  261c
   4234  261c				   .
   4235  261c							; 
   4236  261c
   4237  261c				   .
   4238  261c							; 
   4239  261c
   4240  261c				   .
   4241  261c							; 
   4242  261c
   4243  261c				   .
   4244  261c							; 
   4245  261c
   4246  261c				   .L0184		;  if _Bit3_Auto_Play{3}  &&  _Bit3_P0_Dir_Right{3} then goto __AP_Move_Right
   4247  261c
   4248  261c		       a5 ec		      LDA	_Bit3_Auto_Play
   4249  261e		       29 08		      AND	#8
   4250  2620		       f0 09		      BEQ	.skipL0184
   4251  2622				   .condpart67
   4252  2622		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4253  2624		       29 08		      AND	#8
   4254  2626		       f0 03		      BEQ	.skip67then
   4255  2628				   .condpart68
   4256  2628		       4c 39 36 	      jmp	.__AP_Move_Right
   4257  262b
   4258  262b				   .skip67then
   4259  262b				   .skipL0184
   4260  262b				   .
   4261  262b							; 
   4262  262b
   4263  262b				   .
   4264  262b							; 
   4265  262b
   4266  262b				   .
   4267  262b							; 
   4268  262b
   4269  262b				   .
   4270  262b							; 
   4271  262b
   4272  262b				   .L0185		;  if !joy0right then goto __Skip_Joy0_Right
   4273  262b
   4274  262b		       2c 80 02 	      bit	SWCHA
   4275  262e		       10 03		      BPL	.skipL0185
   4276  2630				   .condpart69
   4277  2630		       4c d5 36 	      jmp	.__Skip_Joy0_Right
   4278  2633
   4279  2633				   .skipL0185
   4280  2633				   .
   4281  2633							; 
   4282  2633
   4283  2633				   .
   4284  2633							; 
   4285  2633
   4286  2633				   .
   4287  2633							; 
   4288  2633
   4289  2633				   .
   4290  2633							; 
   4291  2633
   4292  2633				   .L0186		;  _Bit3_P0_Dir_Right{3}  =  1
   4293  2633
   4294  2633		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4295  2635		       09 08		      ORA	#8
   4296  2637		       85 da		      STA	_Bit3_P0_Dir_Right
   4297  2639				   .
   4298  2639							; 
   4299  2639
   4300  2639				   .__AP_Move_Right
   4301  2639							; __AP_Move_Right
   4302  2639
   4303  2639				   .
   4304  2639							; 
   4305  2639
   4306  2639				   .
   4307  2639							; 
   4308  2639
   4309  2639				   .
   4310  2639							; 
   4311  2639
   4312  2639				   .
   4313  2639							; 
   4314  2639
   4315  2639				   .
   4316  2639							; 
   4317  2639
   4318  2639				   .L0187		;  temp5  =   ( _Main_CharY )	/ 8
   4319  2639
   4320  2639							; complex statement detected
   4321  2639		       a5 86		      LDA	_Main_CharY
   4322  263b		       4a		      lsr
   4323  263c		       4a		      lsr
   4324  263d		       4a		      lsr
   4325  263e		       85 a0		      STA	temp5
   4326  2640				   .
   4327  2640							; 
   4328  2640
   4329  2640				   .L0188		;  temp3  =   ( _Main_CharY - 8 )  / 8
   4330  2640
   4331  2640							; complex statement detected
   4332  2640		       a5 86		      LDA	_Main_CharY
   4333  2642		       38		      SEC
   4334  2643		       e9 08		      SBC	#8
   4335  2645		       4a		      lsr
   4336  2646		       4a		      lsr
   4337  2647		       4a		      lsr
   4338  2648		       85 9e		      STA	temp3
   4339  264a				   .
   4340  264a							; 
   4341  264a
   4342  264a				   .L0189		;  temp6  =   ( _Main_CharX - 9 )  / 4
   4343  264a
   4344  264a							; complex statement detected
   4345  264a		       a5 81		      LDA	_Main_CharX
   4346  264c		       38		      SEC
   4347  264d		       e9 09		      SBC	#9
   4348  264f		       4a		      lsr
   4349  2650		       4a		      lsr
   4350  2651		       85 a1		      STA	temp6
   4351  2653				   .
   4352  2653							; 
   4353  2653
   4354  2653				   .L0190		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   4355  2653
   4356  2653		       a5 a1		      LDA	temp6
   4357  2655		       c9 22		      CMP	#34
   4358  2657		       b0 21		      BCS	.skipL0190
   4359  2659				   .condpart70
   4360  2659		       a5 a1		      LDA	temp6
   4361  265b		       a4 a0		      LDY	temp5
   4362  265d		       85 ee		      sta	temp7
   4363  265f		       a9 36		      lda	#>(ret_point17-1)
   4364  2661		       48		      pha
   4365  2662		       a9 74		      lda	#<(ret_point17-1)
   4366  2664		       48		      pha
   4367  2665		       a9 f2		      lda	#>(pfread-1)
   4368  2667		       48		      pha
   4369  2668		       a9 ab		      lda	#<(pfread-1)
   4370  266a		       48		      pha
   4371  266b		       a5 ee		      lda	temp7
   4372  266d		       48		      pha
   4373  266e		       8a		      txa
   4374  266f		       48		      pha
   4375  2670		       a2 08		      ldx	#8
   4376  2672		       4c eb ff 	      jmp	BS_jsr
   4377  2675				   ret_point17
   4378  2675		       d0 03		      BNE	.skip70then
   4379  2677				   .condpart71
   4380  2677		       4c d5 36 	      jmp	.__Skip_Joy0_Right
   4381  267a
   4382  267a				   .skip70then
   4383  267a				   .skipL0190
   4384  267a				   .
   4385  267a							; 
   4386  267a
   4387  267a				   .L0191		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   4388  267a
   4389  267a		       a5 a1		      LDA	temp6
   4390  267c		       c9 22		      CMP	#34
   4391  267e		       b0 21		      BCS	.skipL0191
   4392  2680				   .condpart72
   4393  2680		       a5 a1		      LDA	temp6
   4394  2682		       a4 9e		      LDY	temp3
   4395  2684		       85 ee		      sta	temp7
   4396  2686		       a9 36		      lda	#>(ret_point18-1)
   4397  2688		       48		      pha
   4398  2689		       a9 9b		      lda	#<(ret_point18-1)
   4399  268b		       48		      pha
   4400  268c		       a9 f2		      lda	#>(pfread-1)
   4401  268e		       48		      pha
   4402  268f		       a9 ab		      lda	#<(pfread-1)
   4403  2691		       48		      pha
   4404  2692		       a5 ee		      lda	temp7
   4405  2694		       48		      pha
   4406  2695		       8a		      txa
   4407  2696		       48		      pha
   4408  2697		       a2 08		      ldx	#8
   4409  2699		       4c eb ff 	      jmp	BS_jsr
   4410  269c				   ret_point18
   4411  269c		       d0 03		      BNE	.skip72then
   4412  269e				   .condpart73
   4413  269e		       4c d5 36 	      jmp	.__Skip_Joy0_Right
   4414  26a1
   4415  26a1				   .skip72then
   4416  26a1				   .skipL0191
   4417  26a1				   .
   4418  26a1							; 
   4419  26a1
   4420  26a1				   .
   4421  26a1							; 
   4422  26a1
   4423  26a1				   .
   4424  26a1							; 
   4425  26a1
   4426  26a1				   .
   4427  26a1							; 
   4428  26a1
   4429  26a1				   .L0192		;  _Main_CharX  =  _Main_CharX  +  1  :  pfscroll left
   4430  26a1
   4431  26a1		       e6 81		      INC	_Main_CharX
   4432  26a3		       a9 00		      LDA	#0
   4433  26a5		       85 ee		      sta	temp7
   4434  26a7		       a9 36		      lda	#>(ret_point19-1)
   4435  26a9		       48		      pha
   4436  26aa		       a9 bc		      lda	#<(ret_point19-1)
   4437  26ac		       48		      pha
   4438  26ad		       a9 f3		      lda	#>(pfscroll-1)
   4439  26af		       48		      pha
   4440  26b0		       a9 63		      lda	#<(pfscroll-1)
   4441  26b2		       48		      pha
   4442  26b3		       a5 ee		      lda	temp7
   4443  26b5		       48		      pha
   4444  26b6		       8a		      txa
   4445  26b7		       48		      pha
   4446  26b8		       a2 08		      ldx	#8
   4447  26ba		       4c eb ff 	      jmp	BS_jsr
   4448  26bd				   ret_point19
   4449  26bd				   .L0193		;  gosub _P_R bank5
   4450  26bd
   4451  26bd		       85 ee		      sta	temp7
   4452  26bf		       a9 36		      lda	#>(ret_point20-1)
   4453  26c1		       48		      pha
   4454  26c2		       a9 d4		      lda	#<(ret_point20-1)
   4455  26c4		       48		      pha
   4456  26c5		       a9 90		      lda	#>(._P_R-1)
   4457  26c7		       48		      pha
   4458  26c8		       a9 e1		      lda	#<(._P_R-1)
   4459  26ca		       48		      pha
   4460  26cb		       a5 ee		      lda	temp7
   4461  26cd		       48		      pha
   4462  26ce		       8a		      txa
   4463  26cf		       48		      pha
   4464  26d0		       a2 05		      ldx	#5
   4465  26d2		       4c eb ff 	      jmp	BS_jsr
   4466  26d5				   ret_point20
   4467  26d5				   .
   4468  26d5							; 
   4469  26d5
   4470  26d5				   .__Skip_Joy0_Right
   4471  26d5							; __Skip_Joy0_Right
   4472  26d5
   4473  26d5				   .
   4474  26d5							; 
   4475  26d5
   4476  26d5				   .
   4477  26d5							; 
   4478  26d5
   4479  26d5				   .
   4480  26d5							; 
   4481  26d5
   4482  26d5				   .
   4483  26d5							; 
   4484  26d5
   4485  26d5				   .
   4486  26d5							; 
   4487  26d5
   4488  26d5				   .
   4489  26d5							; 
   4490  26d5
   4491  26d5				   .
   4492  26d5							; 
   4493  26d5
   4494  26d5				   .L0194		;  if _WillY  <  _Main_CharY then _WillY  =  _WillY  +  1
   4495  26d5
   4496  26d5		       a5 85		      LDA	_WillY
   4497  26d7		       c5 86		      CMP	_Main_CharY
   4498  26d9		       b0 02		      BCS	.skipL0194
   4499  26db				   .condpart74
   4500  26db		       e6 85		      INC	_WillY
   4501  26dd				   .skipL0194
   4502  26dd				   .L0195		;  if _WillY  >  _Main_CharY then _WillY  =  _WillY  -  1
   4503  26dd
   4504  26dd		       a5 86		      LDA	_Main_CharY
   4505  26df		       c5 85		      CMP	_WillY
   4506  26e1		       b0 02		      BCS	.skipL0195
   4507  26e3				   .condpart75
   4508  26e3		       c6 85		      DEC	_WillY
   4509  26e5				   .skipL0195
   4510  26e5				   .L0196		;  if _WillX  <  _Main_CharX then _WillX  =  _WillX  +  1
   4511  26e5
   4512  26e5		       a5 80		      LDA	_WillX
   4513  26e7		       c5 81		      CMP	_Main_CharX
   4514  26e9		       b0 02		      BCS	.skipL0196
   4515  26eb				   .condpart76
   4516  26eb		       e6 80		      INC	_WillX
   4517  26ed				   .skipL0196
   4518  26ed				   .L0197		;  if _WillX  >  _Main_CharX then _WillX  =  _WillX  -  1
   4519  26ed
   4520  26ed		       a5 81		      LDA	_Main_CharX
   4521  26ef		       c5 80		      CMP	_WillX
   4522  26f1		       b0 02		      BCS	.skipL0197
   4523  26f3				   .condpart77
   4524  26f3		       c6 80		      DEC	_WillX
   4525  26f5				   .skipL0197
   4526  26f5				   .
   4527  26f5							; 
   4528  26f5
   4529  26f5				   .
   4530  26f5							; 
   4531  26f5
   4532  26f5				   .
   4533  26f5							; 
   4534  26f5
   4535  26f5				   .
   4536  26f5							; 
   4537  26f5
   4538  26f5				   .
   4539  26f5							; 
   4540  26f5
   4541  26f5				   .
   4542  26f5							; 
   4543  26f5
   4544  26f5				   .
   4545  26f5							; 
   4546  26f5
   4547  26f5				   .
   4548  26f5							; 
   4549  26f5
   4550  26f5				   .
   4551  26f5							; 
   4552  26f5
   4553  26f5				   .
   4554  26f5							; 
   4555  26f5
   4556  26f5				   .L0198		;  if !_Bit3_Auto_Play{3} then goto __AP_Inactivity
   4557  26f5
   4558  26f5		       a5 ec		      LDA	_Bit3_Auto_Play
   4559  26f7		       29 08		      AND	#8
   4560  26f9		       d0 03		      BNE	.skipL0198
   4561  26fb				   .condpart78
   4562  26fb		       4c 16 37 	      jmp	.__AP_Inactivity
   4563  26fe
   4564  26fe				   .skipL0198
   4565  26fe				   .
   4566  26fe							; 
   4567  26fe
   4568  26fe				   .
   4569  26fe							; 
   4570  26fe
   4571  26fe				   .
   4572  26fe							; 
   4573  26fe
   4574  26fe				   .
   4575  26fe							; 
   4576  26fe
   4577  26fe				   .L0199		;  if _AP_Mem_P0x  =  _Main_CharX  &&	_AP_Mem_P0y  =	_Main_CharY then _AP_Dir_Counter  =  254
   4578  26fe
   4579  26fe		       a5 dc		      LDA	_AP_Mem_P0x
   4580  2700		       c5 81		      CMP	_Main_CharX
   4581  2702		       d0 0a		      BNE	.skipL0199
   4582  2704				   .condpart79
   4583  2704		       a5 dd		      LDA	_AP_Mem_P0y
   4584  2706		       c5 86		      CMP	_Main_CharY
   4585  2708		       d0 04		      BNE	.skip79then
   4586  270a				   .condpart80
   4587  270a		       a9 fe		      LDA	#254
   4588  270c		       85 df		      STA	_AP_Dir_Counter
   4589  270e				   .skip79then
   4590  270e				   .skipL0199
   4591  270e				   .
   4592  270e							; 
   4593  270e
   4594  270e				   .
   4595  270e							; 
   4596  270e
   4597  270e				   .
   4598  270e							; 
   4599  270e
   4600  270e				   .
   4601  270e							; 
   4602  270e
   4603  270e				   .L0200		;  _AP_Mem_P0x  =  _Main_CharX  :  _AP_Mem_P0y  =  _Main_CharY
   4604  270e
   4605  270e		       a5 81		      LDA	_Main_CharX
   4606  2710		       85 dc		      STA	_AP_Mem_P0x
   4607  2712		       a5 86		      LDA	_Main_CharY
   4608  2714		       85 dd		      STA	_AP_Mem_P0y
   4609  2716				   .
   4610  2716							; 
   4611  2716
   4612  2716				   .__AP_Inactivity
   4613  2716							; __AP_Inactivity
   4614  2716
   4615  2716				   .
   4616  2716							; 
   4617  2716
   4618  2716				   .
   4619  2716							; 
   4620  2716
   4621  2716				   .
   4622  2716							; 
   4623  2716
   4624  2716				   .
   4625  2716							; 
   4626  2716
   4627  2716				   .
   4628  2716							; 
   4629  2716
   4630  2716				   .
   4631  2716							; 
   4632  2716
   4633  2716				   .
   4634  2716							; 
   4635  2716
   4636  2716				   .
   4637  2716							; 
   4638  2716
   4639  2716				   .
   4640  2716							; 
   4641  2716
   4642  2716				   .
   4643  2716							; 
   4644  2716
   4645  2716				   .
   4646  2716							; 
   4647  2716
   4648  2716				   .
   4649  2716							; 
   4650  2716
   4651  2716				   .
   4652  2716							; 
   4653  2716
   4654  2716				   .L0201		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Fire_Missile
   4655  2716
   4656  2716		       a5 ec		      LDA	_Bit3_Auto_Play
   4657  2718		       29 08		      AND	#8
   4658  271a		       d0 03		      BNE	.skipL0201
   4659  271c				   .condpart81
   4660  271c		       4c 3a 37 	      jmp	.__AP_Skip_Fire_Missile
   4661  271f
   4662  271f				   .skipL0201
   4663  271f				   .
   4664  271f							; 
   4665  271f
   4666  271f				   .
   4667  271f							; 
   4668  271f
   4669  271f				   .
   4670  271f							; 
   4671  271f
   4672  271f				   .
   4673  271f							; 
   4674  271f
   4675  271f				   .
   4676  271f							; 
   4677  271f
   4678  271f				   .L0202		;  temp5  =  rand  :  if temp5  <  230 then goto __Skip_Fire
   4679  271f
   4680  271f		       a5 a2		      lda	rand
   4681  2721		       4a		      lsr
   4682  2722					      ifconst	rand16
   4683  2722		       26 ed		      rol	rand16
   4684  2724					      endif
   4685  2724		       90 02		      bcc	*+4
   4686  2726		       49 b4		      eor	#$B4
   4687  2728		       85 a2		      sta	rand
   4688  272a					      ifconst	rand16
   4689  272a		       45 ed		      eor	rand16
   4690  272c					      endif
   4691  272c		       85 a0		      STA	temp5
   4692  272e		       a5 a0		      LDA	temp5
   4693  2730		       c9 e6		      CMP	#230
   4694  2732		       b0 03		      BCS	.skipL0202
   4695  2734				   .condpart82
   4696  2734		       4c e9 37 	      jmp	.__Skip_Fire
   4697  2737
   4698  2737				   .skipL0202
   4699  2737				   .
   4700  2737							; 
   4701  2737
   4702  2737				   .L0203		;  goto __AP_Fire
   4703  2737
   4704  2737		       4c 50 37 	      jmp	.__AP_Fire
   4705  273a
   4706  273a				   .
   4707  273a							; 
   4708  273a
   4709  273a				   .__AP_Skip_Fire_Missile
   4710  273a							; __AP_Skip_Fire_Missile
   4711  273a
   4712  273a				   .
   4713  273a							; 
   4714  273a
   4715  273a				   .
   4716  273a							; 
   4717  273a
   4718  273a				   .
   4719  273a							; 
   4720  273a
   4721  273a				   .
   4722  273a							; 
   4723  273a
   4724  273a				   .
   4725  273a							; 
   4726  273a
   4727  273a				   .L0204		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Skip_Fire
   4728  273a
   4729  273a		       24 0c		      bit	INPT4
   4730  273c		       10 09		      BPL	.skipL0204
   4731  273e				   .condpart83
   4732  273e		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   4733  2740		       29 fd		      AND	#253
   4734  2742		       85 ec		      STA	_Bit1_FireB_Restrainer
   4735  2744		       4c e9 37 	      jmp	.__Skip_Fire
   4736  2747
   4737  2747				   .skipL0204
   4738  2747				   .
   4739  2747							; 
   4740  2747
   4741  2747				   .
   4742  2747							; 
   4743  2747
   4744  2747				   .
   4745  2747							; 
   4746  2747
   4747  2747				   .
   4748  2747							; 
   4749  2747
   4750  2747				   .
   4751  2747							; 
   4752  2747
   4753  2747				   .L0205		;  if _Bit1_FireB_Restrainer{1} then goto __Skip_Fire
   4754  2747
   4755  2747		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   4756  2749		       29 02		      AND	#2
   4757  274b		       f0 03		      BEQ	.skipL0205
   4758  274d				   .condpart84
   4759  274d		       4c e9 37 	      jmp	.__Skip_Fire
   4760  2750
   4761  2750				   .skipL0205
   4762  2750				   .
   4763  2750							; 
   4764  2750
   4765  2750				   .__AP_Fire
   4766  2750							; __AP_Fire
   4767  2750
   4768  2750				   .
   4769  2750							; 
   4770  2750
   4771  2750				   .
   4772  2750							; 
   4773  2750
   4774  2750				   .
   4775  2750							; 
   4776  2750
   4777  2750				   .
   4778  2750							; 
   4779  2750
   4780  2750				   .L0206		;  if _Bit7_M1_Moving{7} then goto __Skip_Fire
   4781  2750
   4782  2750		       24 ec		      BIT	_Bit7_M1_Moving
   4783  2752		       10 03		      BPL	.skipL0206
   4784  2754				   .condpart85
   4785  2754		       4c e9 37 	      jmp	.__Skip_Fire
   4786  2757
   4787  2757				   .skipL0206
   4788  2757				   .
   4789  2757							; 
   4790  2757
   4791  2757				   .
   4792  2757							; 
   4793  2757
   4794  2757				   .
   4795  2757							; 
   4796  2757
   4797  2757				   .
   4798  2757							; 
   4799  2757
   4800  2757				   .L0207		;  _Bit7_M1_Moving{7}	=  1
   4801  2757
   4802  2757		       a5 ec		      LDA	_Bit7_M1_Moving
   4803  2759		       09 80		      ORA	#128
   4804  275b		       85 ec		      STA	_Bit7_M1_Moving
   4805  275d				   .
   4806  275d							; 
   4807  275d
   4808  275d				   .
   4809  275d							; 
   4810  275d
   4811  275d				   .
   4812  275d							; 
   4813  275d
   4814  275d				   .
   4815  275d							; 
   4816  275d
   4817  275d				   .
   4818  275d							; 
   4819  275d
   4820  275d				   .L0208		;  _Bit4_M1_Dir_Up{4}	=  _Bit0_P0_Dir_Up{0}
   4821  275d
   4822  275d		       a5 da		      LDA	_Bit0_P0_Dir_Up
   4823  275f		       29 01		      AND	#1
   4824  2761		       08		      PHP
   4825  2762		       a5 da		      LDA	_Bit4_M1_Dir_Up
   4826  2764		       29 ef		      AND	#239
   4827  2766		       28		      PLP
   4828  2767		       f0 02		      .byte.b	$F0, $02
   4829  2769		       09 10		      ORA	#16
   4830  276b		       85 da		      STA	_Bit4_M1_Dir_Up
   4831  276d				   .L0209		;  _Bit5_M1_Dir_Down{5}  =  _Bit1_P0_Dir_Down{1}
   4832  276d
   4833  276d		       a5 da		      LDA	_Bit1_P0_Dir_Down
   4834  276f		       29 02		      AND	#2
   4835  2771		       08		      PHP
   4836  2772		       a5 da		      LDA	_Bit5_M1_Dir_Down
   4837  2774		       29 df		      AND	#223
   4838  2776		       28		      PLP
   4839  2777		       f0 02		      .byte.b	$F0, $02
   4840  2779		       09 20		      ORA	#32
   4841  277b		       85 da		      STA	_Bit5_M1_Dir_Down
   4842  277d				   .L0210		;  _Bit6_M1_Dir_Left{6}  =  _Bit2_P0_Dir_Left{2}
   4843  277d
   4844  277d		       a5 da		      LDA	_Bit2_P0_Dir_Left
   4845  277f		       29 04		      AND	#4
   4846  2781		       08		      PHP
   4847  2782		       a5 da		      LDA	_Bit6_M1_Dir_Left
   4848  2784		       29 bf		      AND	#191
   4849  2786		       28		      PLP
   4850  2787		       f0 02		      .byte.b	$F0, $02
   4851  2789		       09 40		      ORA	#64
   4852  278b		       85 da		      STA	_Bit6_M1_Dir_Left
   4853  278d				   .L0211		;  _Bit7_M1_Dir_Right{7}  =  _Bit3_P0_Dir_Right{3}
   4854  278d
   4855  278d		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4856  278f		       29 08		      AND	#8
   4857  2791		       08		      PHP
   4858  2792		       a5 da		      LDA	_Bit7_M1_Dir_Right
   4859  2794		       29 7f		      AND	#127
   4860  2796		       28		      PLP
   4861  2797		       f0 02		      .byte.b	$F0, $02
   4862  2799		       09 80		      ORA	#128
   4863  279b		       85 da		      STA	_Bit7_M1_Dir_Right
   4864  279d				   .
   4865  279d							; 
   4866  279d
   4867  279d				   .
   4868  279d							; 
   4869  279d
   4870  279d				   .
   4871  279d							; 
   4872  279d
   4873  279d				   .
   4874  279d							; 
   4875  279d
   4876  279d				   .L0212		;  if _Bit4_M1_Dir_Up{4} then _Lost_Soul_X  =	_Main_CharX  +	4  :  _Lost_Soul_Y  =  _Main_CharY  -  5
   4877  279d
   4878  279d		       a5 da		      LDA	_Bit4_M1_Dir_Up
   4879  279f		       29 10		      AND	#16
   4880  27a1		       f0 0e		      BEQ	.skipL0212
   4881  27a3				   .condpart86
   4882  27a3		       a5 81		      LDA	_Main_CharX
   4883  27a5		       18		      CLC
   4884  27a6		       69 04		      ADC	#4
   4885  27a8		       85 84		      STA	_Lost_Soul_X
   4886  27aa		       a5 86		      LDA	_Main_CharY
   4887  27ac		       38		      SEC
   4888  27ad		       e9 05		      SBC	#5
   4889  27af		       85 89		      STA	_Lost_Soul_Y
   4890  27b1				   .skipL0212
   4891  27b1				   .L0213		;  if _Bit5_M1_Dir_Down{5} then _Lost_Soul_X  =  _Main_CharX  +  4  :	_Lost_Soul_Y  =  _Main_CharY  -  1
   4892  27b1
   4893  27b1		       a5 da		      LDA	_Bit5_M1_Dir_Down
   4894  27b3		       29 20		      AND	#32
   4895  27b5		       f0 0e		      BEQ	.skipL0213
   4896  27b7				   .condpart87
   4897  27b7		       a5 81		      LDA	_Main_CharX
   4898  27b9		       18		      CLC
   4899  27ba		       69 04		      ADC	#4
   4900  27bc		       85 84		      STA	_Lost_Soul_X
   4901  27be		       a5 86		      LDA	_Main_CharY
   4902  27c0		       38		      SEC
   4903  27c1		       e9 01		      SBC	#1
   4904  27c3		       85 89		      STA	_Lost_Soul_Y
   4905  27c5				   .skipL0213
   4906  27c5				   .L0214		;  if _Bit6_M1_Dir_Left{6} then _Lost_Soul_X  =  _Main_CharX  +  2  :	_Lost_Soul_Y  =  _Main_CharY  -  3
   4907  27c5
   4908  27c5		       24 da		      BIT	_Bit6_M1_Dir_Left
   4909  27c7		       50 0e		      BVC	.skipL0214
   4910  27c9				   .condpart88
   4911  27c9		       a5 81		      LDA	_Main_CharX
   4912  27cb		       18		      CLC
   4913  27cc		       69 02		      ADC	#2
   4914  27ce		       85 84		      STA	_Lost_Soul_X
   4915  27d0		       a5 86		      LDA	_Main_CharY
   4916  27d2		       38		      SEC
   4917  27d3		       e9 03		      SBC	#3
   4918  27d5		       85 89		      STA	_Lost_Soul_Y
   4919  27d7				   .skipL0214
   4920  27d7				   .L0215		;  if _Bit7_M1_Dir_Right{7} then _Lost_Soul_X	=  _Main_CharX	+  6  :  _Lost_Soul_Y  =  _Main_CharY  -  3
   4921  27d7
   4922  27d7		       24 da		      BIT	_Bit7_M1_Dir_Right
   4923  27d9		       10 0e		      BPL	.skipL0215
   4924  27db				   .condpart89
   4925  27db		       a5 81		      LDA	_Main_CharX
   4926  27dd		       18		      CLC
   4927  27de		       69 06		      ADC	#6
   4928  27e0		       85 84		      STA	_Lost_Soul_X
   4929  27e2		       a5 86		      LDA	_Main_CharY
   4930  27e4		       38		      SEC
   4931  27e5		       e9 03		      SBC	#3
   4932  27e7		       85 89		      STA	_Lost_Soul_Y
   4933  27e9				   .skipL0215
   4934  27e9				   .
   4935  27e9							; 
   4936  27e9
   4937  27e9				   .
   4938  27e9							; 
   4939  27e9
   4940  27e9				   .__Skip_Fire
   4941  27e9							; __Skip_Fire
   4942  27e9
   4943  27e9				   .
   4944  27e9							; 
   4945  27e9
   4946  27e9				   .
   4947  27e9							; 
   4948  27e9
   4949  27e9				   .
   4950  27e9							; 
   4951  27e9
   4952  27e9				   .
   4953  27e9							; 
   4954  27e9
   4955  27e9				   .
   4956  27e9							; 
   4957  27e9
   4958  27e9				   .
   4959  27e9							; 
   4960  27e9
   4961  27e9				   .
   4962  27e9							; 
   4963  27e9
   4964  27e9				   .
   4965  27e9							; 
   4966  27e9
   4967  27e9				   .
   4968  27e9							; 
   4969  27e9
   4970  27e9				   .
   4971  27e9							; 
   4972  27e9
   4973  27e9				   .L0216		;  if !_Bit7_M1_Moving{7} then goto __Skip_Missile
   4974  27e9
   4975  27e9		       24 ec		      BIT	_Bit7_M1_Moving
   4976  27eb		       30 03		      BMI	.skipL0216
   4977  27ed				   .condpart90
   4978  27ed		       4c 60 38 	      jmp	.__Skip_Missile
   4979  27f0
   4980  27f0				   .skipL0216
   4981  27f0				   .
   4982  27f0							; 
   4983  27f0
   4984  27f0				   .
   4985  27f0							; 
   4986  27f0
   4987  27f0				   .
   4988  27f0							; 
   4989  27f0
   4990  27f0				   .
   4991  27f0							; 
   4992  27f0
   4993  27f0				   .L0217		;  if _Bit4_M1_Dir_Up{4} then _Lost_Soul_Y  =	_Lost_Soul_Y  -  6
   4994  27f0
   4995  27f0		       a5 da		      LDA	_Bit4_M1_Dir_Up
   4996  27f2		       29 10		      AND	#16
   4997  27f4		       f0 07		      BEQ	.skipL0217
   4998  27f6				   .condpart91
   4999  27f6		       a5 89		      LDA	_Lost_Soul_Y
   5000  27f8		       38		      SEC
   5001  27f9		       e9 06		      SBC	#6
   5002  27fb		       85 89		      STA	_Lost_Soul_Y
   5003  27fd				   .skipL0217
   5004  27fd				   .L0218		;  if _Bit5_M1_Dir_Down{5} then _Lost_Soul_Y  =  _Lost_Soul_Y	+  6
   5005  27fd
   5006  27fd		       a5 da		      LDA	_Bit5_M1_Dir_Down
   5007  27ff		       29 20		      AND	#32
   5008  2801		       f0 07		      BEQ	.skipL0218
   5009  2803				   .condpart92
   5010  2803		       a5 89		      LDA	_Lost_Soul_Y
   5011  2805		       18		      CLC
   5012  2806		       69 06		      ADC	#6
   5013  2808		       85 89		      STA	_Lost_Soul_Y
   5014  280a				   .skipL0218
   5015  280a				   .L0219		;  if _Bit6_M1_Dir_Left{6} then _Lost_Soul_X  =  _Lost_Soul_X	-  6
   5016  280a
   5017  280a		       24 da		      BIT	_Bit6_M1_Dir_Left
   5018  280c		       50 07		      BVC	.skipL0219
   5019  280e				   .condpart93
   5020  280e		       a5 84		      LDA	_Lost_Soul_X
   5021  2810		       38		      SEC
   5022  2811		       e9 06		      SBC	#6
   5023  2813		       85 84		      STA	_Lost_Soul_X
   5024  2815				   .skipL0219
   5025  2815				   .L0220		;  if _Bit7_M1_Dir_Right{7} then _Lost_Soul_X	=  _Lost_Soul_X  +  6
   5026  2815
   5027  2815		       24 da		      BIT	_Bit7_M1_Dir_Right
   5028  2817		       10 07		      BPL	.skipL0220
   5029  2819				   .condpart94
   5030  2819		       a5 84		      LDA	_Lost_Soul_X
   5031  281b		       18		      CLC
   5032  281c		       69 06		      ADC	#6
   5033  281e		       85 84		      STA	_Lost_Soul_X
   5034  2820				   .skipL0220
   5035  2820				   .
   5036  2820							; 
   5037  2820
   5038  2820				   .
   5039  2820							; 
   5040  2820
   5041  2820				   .
   5042  2820							; 
   5043  2820
   5044  2820				   .
   5045  2820							; 
   5046  2820
   5047  2820				   .L0221		;  if _Lost_Soul_Y  <	_M_Edge_Top then goto __Delete_Missile
   5048  2820
   5049  2820		       a5 89		      LDA	_Lost_Soul_Y
   5050  2822		       c9 02		      CMP	#_M_Edge_Top
   5051  2824		       b0 03		      BCS	.skipL0221
   5052  2826				   .condpart95
   5053  2826		       4c 54 38 	      jmp	.__Delete_Missile
   5054  2829
   5055  2829				   .skipL0221
   5056  2829				   .L0222		;  if _Lost_Soul_Y  >	_M_Edge_Bottom then goto __Delete_Missile
   5057  2829
   5058  2829		       a9 58		      LDA	#_M_Edge_Bottom
   5059  282b		       c5 89		      CMP	_Lost_Soul_Y
   5060  282d		       b0 03		      BCS	.skipL0222
   5061  282f				   .condpart96
   5062  282f		       4c 54 38 	      jmp	.__Delete_Missile
   5063  2832
   5064  2832				   .skipL0222
   5065  2832				   .L0223		;  if _Lost_Soul_X  <	_M_Edge_Left then goto __Delete_Missile
   5066  2832
   5067  2832		       a5 84		      LDA	_Lost_Soul_X
   5068  2834		       c9 02		      CMP	#_M_Edge_Left
   5069  2836		       b0 03		      BCS	.skipL0223
   5070  2838				   .condpart97
   5071  2838		       4c 54 38 	      jmp	.__Delete_Missile
   5072  283b
   5073  283b				   .skipL0223
   5074  283b				   .L0224		;  if _Lost_Soul_X  >	_M_Edge_Right then goto __Delete_Missile
   5075  283b
   5076  283b		       a9 9f		      LDA	#_M_Edge_Right
   5077  283d		       c5 84		      CMP	_Lost_Soul_X
   5078  283f		       b0 03		      BCS	.skipL0224
   5079  2841				   .condpart98
   5080  2841		       4c 54 38 	      jmp	.__Delete_Missile
   5081  2844
   5082  2844				   .skipL0224
   5083  2844				   .
   5084  2844							; 
   5085  2844
   5086  2844				   .
   5087  2844							; 
   5088  2844
   5089  2844				   .
   5090  2844							; 
   5091  2844
   5092  2844				   .
   5093  2844							; 
   5094  2844
   5095  2844				   .L0225		;  if !collision(playfield,ball) then goto __Skip_Missile
   5096  2844
   5097  2844		       24 06		      bit	CXBLPF
   5098  2846		       30 03		      BMI	.skipL0225
   5099  2848				   .condpart99
   5100  2848		       4c 60 38 	      jmp	.__Skip_Missile
   5101  284b
   5102  284b				   .skipL0225
   5103  284b				   .
   5104  284b							; 
   5105  284b
   5106  284b				   .
   5107  284b							; 
   5108  284b
   5109  284b				   .
   5110  284b							; 
   5111  284b
   5112  284b				   .
   5113  284b							; 
   5114  284b
   5115  284b				   .L0226		;  if _Bit3_Auto_Play{3} then goto __Delete_Missile
   5116  284b
   5117  284b		       a5 ec		      LDA	_Bit3_Auto_Play
   5118  284d		       29 08		      AND	#8
   5119  284f		       f0 03		      BEQ	.skipL0226
   5120  2851				   .condpart100
   5121  2851		       4c 54 38 	      jmp	.__Delete_Missile
   5122  2854
   5123  2854				   .skipL0226
   5124  2854				   .
   5125  2854							; 
   5126  2854
   5127  2854				   .
   5128  2854							; 
   5129  2854
   5130  2854				   .
   5131  2854							; 
   5132  2854
   5133  2854				   .
   5134  2854							; 
   5135  2854
   5136  2854				   .
   5137  2854							; 
   5138  2854
   5139  2854				   .
   5140  2854							; 
   5141  2854
   5142  2854				   .
   5143  2854							; 
   5144  2854
   5145  2854				   .__Delete_Missile
   5146  2854							; __Delete_Missile
   5147  2854
   5148  2854				   .
   5149  2854							; 
   5150  2854
   5151  2854				   .
   5152  2854							; 
   5153  2854
   5154  2854				   .
   5155  2854							; 
   5156  2854
   5157  2854				   .
   5158  2854							; 
   5159  2854
   5160  2854				   .L0227		;  _Bit7_M1_Moving{7}	=  0  :  _Lost_Soul_X  =  200  :  _Lost_Soul_Y	=  200
   5161  2854
   5162  2854		       a5 ec		      LDA	_Bit7_M1_Moving
   5163  2856		       29 7f		      AND	#127
   5164  2858		       85 ec		      STA	_Bit7_M1_Moving
   5165  285a		       a9 c8		      LDA	#200
   5166  285c		       85 84		      STA	_Lost_Soul_X
   5167  285e		       85 89		      STA	_Lost_Soul_Y
   5168  2860				   .
   5169  2860							; 
   5170  2860
   5171  2860				   .__Skip_Missile
   5172  2860							; __Skip_Missile
   5173  2860
   5174  2860				   .
   5175  2860							; 
   5176  2860
   5177  2860				   .
   5178  2860							; 
   5179  2860
   5180  2860				   .
   5181  2860							; 
   5182  2860
   5183  2860				   .
   5184  2860							; 
   5185  2860
   5186  2860				   .
   5187  2860							; 
   5188  2860
   5189  2860				   .
   5190  2860							; 
   5191  2860
   5192  2860				   .
   5193  2860							; 
   5194  2860
   5195  2860				   .L0228		;  if !collision(player1,player0) then goto _Skip_touch
   5196  2860
   5197  2860		       24 07		      bit	CXPPMM
   5198  2862		       30 03		      BMI	.skipL0228
   5199  2864				   .condpart101
   5200  2864		       4c 05 39 	      jmp	._Skip_touch
   5201  2867
   5202  2867				   .skipL0228
   5203  2867				   .L0229		;  if _sc3  >	0 then score  =  score	-  1
   5204  2867
   5205  2867		       a9 00		      LDA	#0
   5206  2869		       c5 95		      CMP	_sc3
   5207  286b		       b0 15		      BCS	.skipL0229
   5208  286d				   .condpart102
   5209  286d		       f8		      SED
   5210  286e		       38		      SEC
   5211  286f		       a5 95		      LDA	score+2
   5212  2871		       e9 01		      SBC	#$01
   5213  2873		       85 95		      STA	score+2
   5214  2875		       a5 94		      LDA	score+1
   5215  2877		       e9 00		      SBC	#$00
   5216  2879		       85 94		      STA	score+1
   5217  287b		       a5 93		      LDA	score
   5218  287d		       e9 00		      SBC	#$00
   5219  287f		       85 93		      STA	score
   5220  2881		       d8		      CLD
   5221  2882				   .skipL0229
   5222  2882				   .
   5223  2882							; 
   5224  2882
   5225  2882				   .
   5226  2882							; 
   5227  2882
   5228  2882				   .
   5229  2882							; 
   5230  2882
   5231  2882				   .
   5232  2882							; 
   5233  2882
   5234  2882				   .
   5235  2882							; 
   5236  2882
   5237  2882				   .L0230		;  if !pfscore2 then pfscore1	=  pfscore1 / 4
   5238  2882
   5239  2882		       a5 f3		      LDA	pfscore2
   5240  2884		       d0 06		      BNE	.skipL0230
   5241  2886				   .condpart103
   5242  2886		       a5 f2		      LDA	pfscore1
   5243  2888		       4a		      lsr
   5244  2889		       4a		      lsr
   5245  288a		       85 f2		      STA	pfscore1
   5246  288c				   .skipL0230
   5247  288c				   .
   5248  288c							; 
   5249  288c
   5250  288c				   .
   5251  288c							; 
   5252  288c
   5253  288c				   .
   5254  288c							; 
   5255  288c
   5256  288c				   .
   5257  288c							; 
   5258  288c
   5259  288c				   .L0231		;  if pfscore1  =  168 then pfscore2  =  255
   5260  288c
   5261  288c		       a5 f2		      LDA	pfscore1
   5262  288e		       c9 a8		      CMP	#168
   5263  2890		       d0 04		      BNE	.skipL0231
   5264  2892				   .condpart104
   5265  2892		       a9 ff		      LDA	#255
   5266  2894		       85 f3		      STA	pfscore2
   5267  2896				   .skipL0231
   5268  2896				   .L0232		;  if !pfscore1 then _Bit2_Game_Control{2}  =	1
   5269  2896
   5270  2896		       a5 f2		      LDA	pfscore1
   5271  2898		       d0 06		      BNE	.skipL0232
   5272  289a				   .condpart105
   5273  289a		       a5 ec		      LDA	_Bit2_Game_Control
   5274  289c		       09 04		      ORA	#4
   5275  289e		       85 ec		      STA	_Bit2_Game_Control
   5276  28a0				   .skipL0232
   5277  28a0				   .L0233		;  _WillX  =  _Main_CharX  +	( rand & 127 )	 +   ( rand / 16 )   :	_WillY	=  _Main_CharY	+   ( rand / 4 )   +   ( rand & 63 )   -  1
   5278  28a0
   5279  28a0							; complex statement detected
   5280  28a0		       a5 81		      LDA	_Main_CharX
   5281  28a2		       48		      PHA
   5282  28a3		       a5 a2		      lda	rand
   5283  28a5		       4a		      lsr
   5284  28a6					      ifconst	rand16
   5285  28a6		       26 ed		      rol	rand16
   5286  28a8					      endif
   5287  28a8		       90 02		      bcc	*+4
   5288  28aa		       49 b4		      eor	#$B4
   5289  28ac		       85 a2		      sta	rand
   5290  28ae					      ifconst	rand16
   5291  28ae		       45 ed		      eor	rand16
   5292  28b0					      endif
   5293  28b0		       29 7f		      AND	#127
   5294  28b2		       ba		      TSX
   5295  28b3		       e8		      INX
   5296  28b4		       9a		      TXS
   5297  28b5		       18		      CLC
   5298  28b6		       75 00		      ADC	$00,x
   5299  28b8		       48		      PHA
   5300  28b9		       a5 a2		      lda	rand
   5301  28bb		       4a		      lsr
   5302  28bc					      ifconst	rand16
   5303  28bc		       26 ed		      rol	rand16
   5304  28be					      endif
   5305  28be		       90 02		      bcc	*+4
   5306  28c0		       49 b4		      eor	#$B4
   5307  28c2		       85 a2		      sta	rand
   5308  28c4					      ifconst	rand16
   5309  28c4		       45 ed		      eor	rand16
   5310  28c6					      endif
   5311  28c6		       4a		      lsr
   5312  28c7		       4a		      lsr
   5313  28c8		       4a		      lsr
   5314  28c9		       4a		      lsr
   5315  28ca		       ba		      TSX
   5316  28cb		       e8		      INX
   5317  28cc		       9a		      TXS
   5318  28cd		       18		      CLC
   5319  28ce		       75 00		      ADC	$00,x
   5320  28d0		       85 80		      STA	_WillX
   5321  28d2							; complex statement detected
   5322  28d2		       a5 86		      LDA	_Main_CharY
   5323  28d4		       48		      PHA
   5324  28d5		       a5 a2		      lda	rand
   5325  28d7		       4a		      lsr
   5326  28d8					      ifconst	rand16
   5327  28d8		       26 ed		      rol	rand16
   5328  28da					      endif
   5329  28da		       90 02		      bcc	*+4
   5330  28dc		       49 b4		      eor	#$B4
   5331  28de		       85 a2		      sta	rand
   5332  28e0					      ifconst	rand16
   5333  28e0		       45 ed		      eor	rand16
   5334  28e2					      endif
   5335  28e2		       4a		      lsr
   5336  28e3		       4a		      lsr
   5337  28e4		       ba		      TSX
   5338  28e5		       e8		      INX
   5339  28e6		       9a		      TXS
   5340  28e7		       18		      CLC
   5341  28e8		       75 00		      ADC	$00,x
   5342  28ea		       48		      PHA
   5343  28eb		       a5 a2		      lda	rand
   5344  28ed		       4a		      lsr
   5345  28ee					      ifconst	rand16
   5346  28ee		       26 ed		      rol	rand16
   5347  28f0					      endif
   5348  28f0		       90 02		      bcc	*+4
   5349  28f2		       49 b4		      eor	#$B4
   5350  28f4		       85 a2		      sta	rand
   5351  28f6					      ifconst	rand16
   5352  28f6		       45 ed		      eor	rand16
   5353  28f8					      endif
   5354  28f8		       29 3f		      AND	#63
   5355  28fa		       ba		      TSX
   5356  28fb		       e8		      INX
   5357  28fc		       9a		      TXS
   5358  28fd		       18		      CLC
   5359  28fe		       75 00		      ADC	$00,x
   5360  2900		       38		      SEC
   5361  2901		       e9 01		      SBC	#1
   5362  2903		       85 85		      STA	_WillY
   5363  2905				   .
   5364  2905							; 
   5365  2905
   5366  2905				   ._Skip_touch
   5367  2905							; _Skip_touch
   5368  2905
   5369  2905				   .
   5370  2905							; 
   5371  2905
   5372  2905				   .
   5373  2905							; 
   5374  2905
   5375  2905				   .
   5376  2905							; 
   5377  2905
   5378  2905				   .
   5379  2905							; 
   5380  2905
   5381  2905				   .
   5382  2905							; 
   5383  2905
   5384  2905				   .
   5385  2905							; 
   5386  2905
   5387  2905				   .
   5388  2905							; 
   5389  2905
   5390  2905				   .
   5391  2905							; 
   5392  2905
   5393  2905				   .
   5394  2905							; 
   5395  2905
   5396  2905				   .
   5397  2905							; 
   5398  2905
   5399  2905				   .
   5400  2905							; 
   5401  2905
   5402  2905				   .
   5403  2905							; 
   5404  2905
   5405  2905				   .
   5406  2905							; 
   5407  2905
   5408  2905				   .L0234		;  if !collision(player0,ball) then goto __Skip_Shot_Enemy
   5409  2905
   5410  2905		       24 02		      bit	CXP0FB
   5411  2907		       70 03		      BVS	.skipL0234
   5412  2909				   .condpart106
   5413  2909		       4c 01 3a 	      jmp	.__Skip_Shot_Enemy
   5414  290c
   5415  290c				   .skipL0234
   5416  290c				   .
   5417  290c							; 
   5418  290c
   5419  290c				   .
   5420  290c							; 
   5421  290c
   5422  290c				   .
   5423  290c							; 
   5424  290c
   5425  290c				   .
   5426  290c							; 
   5427  290c
   5428  290c				   .L0235		;  _Bit7_M1_Moving{7}	=  0  :  _Lost_Soul_X  =  200  :  _Lost_Soul_Y	=  200
   5429  290c
   5430  290c		       a5 ec		      LDA	_Bit7_M1_Moving
   5431  290e		       29 7f		      AND	#127
   5432  2910		       85 ec		      STA	_Bit7_M1_Moving
   5433  2912		       a9 c8		      LDA	#200
   5434  2914		       85 84		      STA	_Lost_Soul_X
   5435  2916		       85 89		      STA	_Lost_Soul_Y
   5436  2918				   .
   5437  2918							; 
   5438  2918
   5439  2918				   .
   5440  2918							; 
   5441  2918
   5442  2918				   .
   5443  2918							; 
   5444  2918
   5445  2918				   .
   5446  2918							; 
   5447  2918
   5448  2918				   .L0236		;  if _Bit3_Auto_Play{3} then goto __AP_Skip_Enemy_Points
   5449  2918
   5450  2918		       a5 ec		      LDA	_Bit3_Auto_Play
   5451  291a		       29 08		      AND	#8
   5452  291c		       f0 03		      BEQ	.skipL0236
   5453  291e				   .condpart107
   5454  291e		       4c 62 39 	      jmp	.__AP_Skip_Enemy_Points
   5455  2921
   5456  2921				   .skipL0236
   5457  2921				   .
   5458  2921							; 
   5459  2921
   5460  2921				   .
   5461  2921							; 
   5462  2921
   5463  2921				   .
   5464  2921							; 
   5465  2921
   5466  2921				   .
   5467  2921							; 
   5468  2921
   5469  2921				   .L0237		;  score  =  score  +	1
   5470  2921
   5471  2921		       f8		      SED
   5472  2922		       18		      CLC
   5473  2923		       a5 95		      LDA	score+2
   5474  2925		       69 01		      ADC	#$01
   5475  2927		       85 95		      STA	score+2
   5476  2929		       a5 94		      LDA	score+1
   5477  292b		       69 00		      ADC	#$00
   5478  292d		       85 94		      STA	score+1
   5479  292f		       a5 93		      LDA	score
   5480  2931		       69 00		      ADC	#$00
   5481  2933		       85 93		      STA	score
   5482  2935		       d8		      CLD
   5483  2936				   .L0238		;  if pfscore2  <  255 then pfscore2  =  pfscore2 * 2 | 1
   5484  2936
   5485  2936		       a5 f3		      LDA	pfscore2
   5486  2938		       c9 ff		      CMP	#255
   5487  293a		       b0 07		      BCS	.skipL0238
   5488  293c				   .condpart108
   5489  293c							; complex statement detected
   5490  293c		       a5 f3		      LDA	pfscore2
   5491  293e		       0a		      asl
   5492  293f		       09 01		      ORA	#1
   5493  2941		       85 f3		      STA	pfscore2
   5494  2943				   .skipL0238
   5495  2943				   .L0239		;  if pfscore1  >  255  &&  pfscore2  =  255 then pfscore1  =	pfscore1 * 2 | 1
   5496  2943
   5497  2943		       a9 ff		      LDA	#255
   5498  2945		       c5 f2		      CMP	pfscore1
   5499  2947		       b0 0d		      BCS	.skipL0239
   5500  2949				   .condpart109
   5501  2949		       a5 f3		      LDA	pfscore2
   5502  294b		       c9 ff		      CMP	#255
   5503  294d		       d0 07		      BNE	.skip109then
   5504  294f				   .condpart110
   5505  294f							; complex statement detected
   5506  294f		       a5 f2		      LDA	pfscore1
   5507  2951		       0a		      asl
   5508  2952		       09 01		      ORA	#1
   5509  2954		       85 f2		      STA	pfscore1
   5510  2956				   .skip109then
   5511  2956				   .skipL0239
   5512  2956				   .
   5513  2956							; 
   5514  2956
   5515  2956				   .
   5516  2956							; 
   5517  2956
   5518  2956				   .
   5519  2956							; 
   5520  2956
   5521  2956				   .
   5522  2956							; 
   5523  2956
   5524  2956				   .L0240		;  _Kill_Count  =  _Kill_Count  +  1
   5525  2956
   5526  2956		       e6 e2		      INC	_Kill_Count
   5527  2958				   .
   5528  2958							; 
   5529  2958
   5530  2958				   .
   5531  2958							; 
   5532  2958
   5533  2958				   .
   5534  2958							; 
   5535  2958
   5536  2958				   .
   5537  2958							; 
   5538  2958
   5539  2958				   .
   5540  2958							; 
   5541  2958
   5542  2958				   .L0241		;  if _Kill_Count  >=	3 then _Kill_Count  =  0
   5543  2958
   5544  2958		       a5 e2		      LDA	_Kill_Count
   5545  295a		       c9 03		      CMP	#3
   5546  295c		       90 04		      BCC	.skipL0241
   5547  295e				   .condpart111
   5548  295e		       a9 00		      LDA	#0
   5549  2960		       85 e2		      STA	_Kill_Count
   5550  2962				   .skipL0241
   5551  2962				   .
   5552  2962							; 
   5553  2962
   5554  2962				   .__AP_Skip_Enemy_Points
   5555  2962							; __AP_Skip_Enemy_Points
   5556  2962
   5557  2962				   .
   5558  2962							; 
   5559  2962
   5560  2962				   .
   5561  2962							; 
   5562  2962
   5563  2962				   .
   5564  2962							; 
   5565  2962
   5566  2962				   .
   5567  2962							; 
   5568  2962
   5569  2962				   .
   5570  2962							; 
   5571  2962
   5572  2962				   .
   5573  2962							; 
   5574  2962
   5575  2962				   .
   5576  2962							; 
   5577  2962
   5578  2962				   .
   5579  2962							; 
   5580  2962
   5581  2962				   .
   5582  2962							; 
   5583  2962
   5584  2962				   .
   5585  2962							; 
   5586  2962
   5587  2962				   .
   5588  2962							; 
   5589  2962
   5590  2962				   .L0242		;  if _Kill_Count  =  3 then _Will_Aftn_AI  =	1
   5591  2962
   5592  2962		       a5 e2		      LDA	_Kill_Count
   5593  2964		       c9 03		      CMP	#3
   5594  2966		       d0 04		      BNE	.skipL0242
   5595  2968				   .condpart112
   5596  2968		       a9 01		      LDA	#1
   5597  296a		       85 e1		      STA	_Will_Aftn_AI
   5598  296c				   .skipL0242
   5599  296c				   .
   5600  296c							; 
   5601  296c
   5602  296c				   .
   5603  296c							; 
   5604  296c
   5605  296c				   .
   5606  296c							; 
   5607  296c
   5608  296c				   .
   5609  296c							; 
   5610  296c
   5611  296c				   .L0243		;  if _Will_Aftn_AI  =  1 then _Lost_Soul_Y  =  250
   5612  296c
   5613  296c		       a5 e1		      LDA	_Will_Aftn_AI
   5614  296e		       c9 01		      CMP	#1
   5615  2970		       d0 04		      BNE	.skipL0243
   5616  2972				   .condpart113
   5617  2972		       a9 fa		      LDA	#250
   5618  2974		       85 89		      STA	_Lost_Soul_Y
   5619  2976				   .skipL0243
   5620  2976				   .
   5621  2976							; 
   5622  2976
   5623  2976				   .
   5624  2976							; 
   5625  2976
   5626  2976				   .
   5627  2976							; 
   5628  2976
   5629  2976				   .
   5630  2976							; 
   5631  2976
   5632  2976				   .
   5633  2976							; 
   5634  2976
   5635  2976				   .L0244		;  _WillY  =	( rand / 4 )   +   ( rand & 63 )   +  15
   5636  2976
   5637  2976							; complex statement detected
   5638  2976		       a5 a2		      lda	rand
   5639  2978		       4a		      lsr
   5640  2979					      ifconst	rand16
   5641  2979		       26 ed		      rol	rand16
   5642  297b					      endif
   5643  297b		       90 02		      bcc	*+4
   5644  297d		       49 b4		      eor	#$B4
   5645  297f		       85 a2		      sta	rand
   5646  2981					      ifconst	rand16
   5647  2981		       45 ed		      eor	rand16
   5648  2983					      endif
   5649  2983		       4a		      lsr
   5650  2984		       4a		      lsr
   5651  2985		       48		      PHA
   5652  2986		       a5 a2		      lda	rand
   5653  2988		       4a		      lsr
   5654  2989					      ifconst	rand16
   5655  2989		       26 ed		      rol	rand16
   5656  298b					      endif
   5657  298b		       90 02		      bcc	*+4
   5658  298d		       49 b4		      eor	#$B4
   5659  298f		       85 a2		      sta	rand
   5660  2991					      ifconst	rand16
   5661  2991		       45 ed		      eor	rand16
   5662  2993					      endif
   5663  2993		       29 3f		      AND	#63
   5664  2995		       ba		      TSX
   5665  2996		       e8		      INX
   5666  2997		       9a		      TXS
   5667  2998		       18		      CLC
   5668  2999		       75 00		      ADC	$00,x
   5669  299b		       18		      CLC
   5670  299c		       69 0f		      ADC	#15
   5671  299e		       85 85		      STA	_WillY
   5672  29a0				   .
   5673  29a0							; 
   5674  29a0
   5675  29a0				   .L0245		;  if _Main_CharX  >=	77 then _WillX	=   ( rand & 127 )   +	 ( rand / 16 )	 +  5  :  goto __Skip_Shot_Enemy
   5676  29a0
   5677  29a0		       a5 81		      LDA	_Main_CharX
   5678  29a2		       c9 4d		      CMP	#77
   5679  29a4		       90 2f		      BCC	.skipL0245
   5680  29a6				   .condpart114
   5681  29a6							; complex statement detected
   5682  29a6		       a5 a2		      lda	rand
   5683  29a8		       4a		      lsr
   5684  29a9					      ifconst	rand16
   5685  29a9		       26 ed		      rol	rand16
   5686  29ab					      endif
   5687  29ab		       90 02		      bcc	*+4
   5688  29ad		       49 b4		      eor	#$B4
   5689  29af		       85 a2		      sta	rand
   5690  29b1					      ifconst	rand16
   5691  29b1		       45 ed		      eor	rand16
   5692  29b3					      endif
   5693  29b3		       29 7f		      AND	#127
   5694  29b5		       48		      PHA
   5695  29b6		       a5 a2		      lda	rand
   5696  29b8		       4a		      lsr
   5697  29b9					      ifconst	rand16
   5698  29b9		       26 ed		      rol	rand16
   5699  29bb					      endif
   5700  29bb		       90 02		      bcc	*+4
   5701  29bd		       49 b4		      eor	#$B4
   5702  29bf		       85 a2		      sta	rand
   5703  29c1					      ifconst	rand16
   5704  29c1		       45 ed		      eor	rand16
   5705  29c3					      endif
   5706  29c3		       4a		      lsr
   5707  29c4		       4a		      lsr
   5708  29c5		       4a		      lsr
   5709  29c6		       4a		      lsr
   5710  29c7		       ba		      TSX
   5711  29c8		       e8		      INX
   5712  29c9		       9a		      TXS
   5713  29ca		       18		      CLC
   5714  29cb		       75 00		      ADC	$00,x
   5715  29cd		       18		      CLC
   5716  29ce		       69 05		      ADC	#5
   5717  29d0		       85 80		      STA	_WillX
   5718  29d2		       4c 01 3a 	      jmp	.__Skip_Shot_Enemy
   5719  29d5
   5720  29d5				   .skipL0245
   5721  29d5				   .
   5722  29d5							; 
   5723  29d5
   5724  29d5				   .L0246		;  _WillX  =	( rand & 127 )	 +   ( rand / 16 )   +	140
   5725  29d5
   5726  29d5							; complex statement detected
   5727  29d5		       a5 a2		      lda	rand
   5728  29d7		       4a		      lsr
   5729  29d8					      ifconst	rand16
   5730  29d8		       26 ed		      rol	rand16
   5731  29da					      endif
   5732  29da		       90 02		      bcc	*+4
   5733  29dc		       49 b4		      eor	#$B4
   5734  29de		       85 a2		      sta	rand
   5735  29e0					      ifconst	rand16
   5736  29e0		       45 ed		      eor	rand16
   5737  29e2					      endif
   5738  29e2		       29 7f		      AND	#127
   5739  29e4		       48		      PHA
   5740  29e5		       a5 a2		      lda	rand
   5741  29e7		       4a		      lsr
   5742  29e8					      ifconst	rand16
   5743  29e8		       26 ed		      rol	rand16
   5744  29ea					      endif
   5745  29ea		       90 02		      bcc	*+4
   5746  29ec		       49 b4		      eor	#$B4
   5747  29ee		       85 a2		      sta	rand
   5748  29f0					      ifconst	rand16
   5749  29f0		       45 ed		      eor	rand16
   5750  29f2					      endif
   5751  29f2		       4a		      lsr
   5752  29f3		       4a		      lsr
   5753  29f4		       4a		      lsr
   5754  29f5		       4a		      lsr
   5755  29f6		       ba		      TSX
   5756  29f7		       e8		      INX
   5757  29f8		       9a		      TXS
   5758  29f9		       18		      CLC
   5759  29fa		       75 00		      ADC	$00,x
   5760  29fc		       18		      CLC
   5761  29fd		       69 8c		      ADC	#140
   5762  29ff		       85 80		      STA	_WillX
   5763  2a01				   .
   5764  2a01							; 
   5765  2a01
   5766  2a01				   .
   5767  2a01							; 
   5768  2a01
   5769  2a01				   .__Skip_Shot_Enemy
   5770  2a01							; __Skip_Shot_Enemy
   5771  2a01
   5772  2a01				   .
   5773  2a01							; 
   5774  2a01
   5775  2a01				   .
   5776  2a01							; 
   5777  2a01
   5778  2a01				   .
   5779  2a01							; 
   5780  2a01
   5781  2a01				   .
   5782  2a01							; 
   5783  2a01
   5784  2a01				   .
   5785  2a01							; 
   5786  2a01
   5787  2a01				   .
   5788  2a01							; 
   5789  2a01
   5790  2a01				   .
   5791  2a01							; 
   5792  2a01
   5793  2a01				   .
   5794  2a01							; 
   5795  2a01
   5796  2a01				   .
   5797  2a01							; 
   5798  2a01
   5799  2a01				   .
   5800  2a01							; 
   5801  2a01
   5802  2a01				   .
   5803  2a01							; 
   5804  2a01
   5805  2a01				   .
   5806  2a01							; 
   5807  2a01
   5808  2a01				   .L0247		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Flip
   5809  2a01
   5810  2a01		       a5 ec		      LDA	_Bit3_Auto_Play
   5811  2a03		       29 08		      AND	#8
   5812  2a05		       d0 03		      BNE	.skipL0247
   5813  2a07				   .condpart115
   5814  2a07		       4c 53 3a 	      jmp	.__AP_Skip_Flip
   5815  2a0a
   5816  2a0a				   .skipL0247
   5817  2a0a				   .
   5818  2a0a							; 
   5819  2a0a
   5820  2a0a				   .
   5821  2a0a							; 
   5822  2a0a
   5823  2a0a				   .
   5824  2a0a							; 
   5825  2a0a
   5826  2a0a				   .
   5827  2a0a							; 
   5828  2a0a
   5829  2a0a				   .L0248		;  _AP_2_Sec_Score_Flip  =  _AP_2_Sec_Score_Flip  +  1
   5830  2a0a
   5831  2a0a		       e6 de		      INC	_AP_2_Sec_Score_Flip
   5832  2a0c				   .
   5833  2a0c							; 
   5834  2a0c
   5835  2a0c				   .
   5836  2a0c							; 
   5837  2a0c
   5838  2a0c				   .
   5839  2a0c							; 
   5840  2a0c
   5841  2a0c				   .
   5842  2a0c							; 
   5843  2a0c
   5844  2a0c				   .
   5845  2a0c							; 
   5846  2a0c
   5847  2a0c				   .L0249		;  if _AP_2_Sec_Score_Flip  <	120 then goto __AP_Skip_Flip
   5848  2a0c
   5849  2a0c		       a5 de		      LDA	_AP_2_Sec_Score_Flip
   5850  2a0e		       c9 78		      CMP	#120
   5851  2a10		       b0 03		      BCS	.skipL0249
   5852  2a12				   .condpart116
   5853  2a12		       4c 53 3a 	      jmp	.__AP_Skip_Flip
   5854  2a15
   5855  2a15				   .skipL0249
   5856  2a15				   .
   5857  2a15							; 
   5858  2a15
   5859  2a15				   .
   5860  2a15							; 
   5861  2a15
   5862  2a15				   .
   5863  2a15							; 
   5864  2a15
   5865  2a15				   .
   5866  2a15							; 
   5867  2a15
   5868  2a15				   .L0250		;  _AP_2_Sec_Score_Flip  =  0	:  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   5869  2a15
   5870  2a15		       a9 00		      LDA	#0
   5871  2a17		       85 de		      STA	_AP_2_Sec_Score_Flip
   5872  2a19		       a5 ec		      LDA	_Bit6_Swap_Scores
   5873  2a1b		       29 40		      AND	#64
   5874  2a1d		       08		      PHP
   5875  2a1e		       a5 ec		      LDA	_Bit6_Swap_Scores
   5876  2a20		       29 bf		      AND	#191
   5877  2a22		       28		      PLP
   5878  2a23		       d0 02		      .byte.b	$D0, $02
   5879  2a25		       09 40		      ORA	#64
   5880  2a27		       85 ec		      STA	_Bit6_Swap_Scores
   5881  2a29				   .
   5882  2a29							; 
   5883  2a29
   5884  2a29				   .
   5885  2a29							; 
   5886  2a29
   5887  2a29				   .
   5888  2a29							; 
   5889  2a29
   5890  2a29				   .
   5891  2a29							; 
   5892  2a29
   5893  2a29				   .L0251		;  if !_Bit6_Swap_Scores{6} then goto __AP_Skip_HiScore_Swap
   5894  2a29
   5895  2a29		       24 ec		      BIT	_Bit6_Swap_Scores
   5896  2a2b		       70 03		      BVS	.skipL0251
   5897  2a2d				   .condpart117
   5898  2a2d		       4c 43 3a 	      jmp	.__AP_Skip_HiScore_Swap
   5899  2a30
   5900  2a30				   .skipL0251
   5901  2a30				   .
   5902  2a30							; 
   5903  2a30
   5904  2a30				   .
   5905  2a30							; 
   5906  2a30
   5907  2a30				   .
   5908  2a30							; 
   5909  2a30
   5910  2a30				   .
   5911  2a30							; 
   5912  2a30
   5913  2a30				   .L0252		;  scorecolor	=  $AE
   5914  2a30
   5915  2a30		       a9 ae		      LDA	#$AE
   5916  2a32		       85 a3		      STA	scorecolor
   5917  2a34				   .
   5918  2a34							; 
   5919  2a34
   5920  2a34				   .L0253		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   5921  2a34
   5922  2a34		       a5 e9		      LDA	_High_Score1
   5923  2a36		       85 93		      STA	_sc1
   5924  2a38		       a5 ea		      LDA	_High_Score2
   5925  2a3a		       85 94		      STA	_sc2
   5926  2a3c		       a5 eb		      LDA	_High_Score3
   5927  2a3e		       85 95		      STA	_sc3
   5928  2a40				   .
   5929  2a40							; 
   5930  2a40
   5931  2a40				   .L0254		;  goto __AP_Skip_Flip
   5932  2a40
   5933  2a40		       4c 53 3a 	      jmp	.__AP_Skip_Flip
   5934  2a43
   5935  2a43				   .
   5936  2a43							; 
   5937  2a43
   5938  2a43				   .__AP_Skip_HiScore_Swap
   5939  2a43							; __AP_Skip_HiScore_Swap
   5940  2a43
   5941  2a43				   .
   5942  2a43							; 
   5943  2a43
   5944  2a43				   .
   5945  2a43							; 
   5946  2a43
   5947  2a43				   .
   5948  2a43							; 
   5949  2a43
   5950  2a43				   .
   5951  2a43							; 
   5952  2a43
   5953  2a43				   .L0255		;  scorecolor	=  $1C
   5954  2a43
   5955  2a43		       a9 1c		      LDA	#$1C
   5956  2a45		       85 a3		      STA	scorecolor
   5957  2a47				   .
   5958  2a47							; 
   5959  2a47
   5960  2a47				   .L0256		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   5961  2a47
   5962  2a47		       a5 e6		      LDA	_Score1_Mem
   5963  2a49		       85 93		      STA	_sc1
   5964  2a4b		       a5 e7		      LDA	_Score2_Mem
   5965  2a4d		       85 94		      STA	_sc2
   5966  2a4f		       a5 e8		      LDA	_Score3_Mem
   5967  2a51		       85 95		      STA	_sc3
   5968  2a53				   .
   5969  2a53							; 
   5970  2a53
   5971  2a53				   .__AP_Skip_Flip
   5972  2a53							; __AP_Skip_Flip
   5973  2a53
   5974  2a53				   .
   5975  2a53							; 
   5976  2a53
   5977  2a53				   .
   5978  2a53							; 
   5979  2a53
   5980  2a53				   .
   5981  2a53							; 
   5982  2a53
   5983  2a53				   .
   5984  2a53							; 
   5985  2a53
   5986  2a53				   .
   5987  2a53							; 
   5988  2a53
   5989  2a53				   .
   5990  2a53							; 
   5991  2a53
   5992  2a53				   .
   5993  2a53							; 
   5994  2a53
   5995  2a53				   .
   5996  2a53							; 
   5997  2a53
   5998  2a53				   .
   5999  2a53							; 
   6000  2a53
   6001  2a53				   .
   6002  2a53							; 
   6003  2a53
   6004  2a53				   .
   6005  2a53							; 
   6006  2a53
   6007  2a53				   .L0257		;  if _Bit3_Auto_Play{3} then goto __AP_Skip_Pause
   6008  2a53
   6009  2a53		       a5 ec		      LDA	_Bit3_Auto_Play
   6010  2a55		       29 08		      AND	#8
   6011  2a57		       f0 03		      BEQ	.skipL0257
   6012  2a59				   .condpart118
   6013  2a59		       4c d4 3a 	      jmp	.__AP_Skip_Pause
   6014  2a5c
   6015  2a5c				   .skipL0257
   6016  2a5c				   .
   6017  2a5c							; 
   6018  2a5c
   6019  2a5c				   .
   6020  2a5c							; 
   6021  2a5c
   6022  2a5c				   .
   6023  2a5c							; 
   6024  2a5c
   6025  2a5c				   .
   6026  2a5c							; 
   6027  2a5c
   6028  2a5c				   .L0258		;  _Bit1_BW_Check{1}  =  0
   6029  2a5c
   6030  2a5c		       a5 e5		      LDA	_Bit1_BW_Check
   6031  2a5e		       29 fd		      AND	#253
   6032  2a60		       85 e5		      STA	_Bit1_BW_Check
   6033  2a62				   .
   6034  2a62							; 
   6035  2a62
   6036  2a62				   .L0259		;  if switchbw then _Bit1_BW_Check{1}	=  1
   6037  2a62
   6038  2a62		       a9 08		      lda	#8
   6039  2a64		       2c 82 02 	      bit	SWCHB
   6040  2a67		       d0 06		      BNE	.skipL0259
   6041  2a69				   .condpart119
   6042  2a69		       a5 e5		      LDA	_Bit1_BW_Check
   6043  2a6b		       09 02		      ORA	#2
   6044  2a6d		       85 e5		      STA	_Bit1_BW_Check
   6045  2a6f				   .skipL0259
   6046  2a6f				   .
   6047  2a6f							; 
   6048  2a6f
   6049  2a6f				   .
   6050  2a6f							; 
   6051  2a6f
   6052  2a6f				   .
   6053  2a6f							; 
   6054  2a6f
   6055  2a6f				   .
   6056  2a6f							; 
   6057  2a6f
   6058  2a6f				   .
   6059  2a6f							; 
   6060  2a6f
   6061  2a6f				   .L0260		;  if genesispad{0}  &&  !INPT1{7} then _Bit1_BW_Check{1}  =  1
   6062  2a6f
   6063  2a6f		       a5 d4		      LDA	genesispad
   6064  2a71		       4a		      LSR
   6065  2a72		       90 0a		      BCC	.skipL0260
   6066  2a74				   .condpart120
   6067  2a74		       24 09		      BIT	INPT1
   6068  2a76		       30 06		      BMI	.skip120then
   6069  2a78				   .condpart121
   6070  2a78		       a5 e5		      LDA	_Bit1_BW_Check
   6071  2a7a		       09 02		      ORA	#2
   6072  2a7c		       85 e5		      STA	_Bit1_BW_Check
   6073  2a7e				   .skip120then
   6074  2a7e				   .skipL0260
   6075  2a7e				   .
   6076  2a7e							; 
   6077  2a7e
   6078  2a7e				   .
   6079  2a7e							; 
   6080  2a7e
   6081  2a7e				   .
   6082  2a7e							; 
   6083  2a7e
   6084  2a7e				   .
   6085  2a7e							; 
   6086  2a7e
   6087  2a7e				   .
   6088  2a7e							; 
   6089  2a7e
   6090  2a7e				   .L0261		;  if _Bit0_BW_Mem{0} then if !_Bit1_BW_Check{1} then goto __Pause_Setup bank3
   6091  2a7e
   6092  2a7e		       a5 e5		      LDA	_Bit0_BW_Mem
   6093  2a80		       4a		      LSR
   6094  2a81		       90 18		      BCC	.skipL0261
   6095  2a83				   .condpart122
   6096  2a83		       a5 e5		      LDA	_Bit1_BW_Check
   6097  2a85		       29 02		      AND	#2
   6098  2a87		       d0 12		      BNE	.skip122then
   6099  2a89				   .condpart123
   6100  2a89		       85 ee		      sta	temp7
   6101  2a8b		       a9 51		      lda	#>(.__Pause_Setup-1)
   6102  2a8d		       48		      pha
   6103  2a8e		       a9 a7		      lda	#<(.__Pause_Setup-1)
   6104  2a90		       48		      pha
   6105  2a91		       a5 ee		      lda	temp7
   6106  2a93		       48		      pha
   6107  2a94		       8a		      txa
   6108  2a95		       48		      pha
   6109  2a96		       a2 03		      ldx	#3
   6110  2a98		       4c eb ff 	      jmp	BS_jsr
   6111  2a9b				   .skip122then
   6112  2a9b				   .skipL0261
   6113  2a9b				   .
   6114  2a9b							; 
   6115  2a9b
   6116  2a9b				   .L0262		;  if !_Bit0_BW_Mem{0} then if _Bit1_BW_Check{1} then goto __Pause_Setup bank3
   6117  2a9b
   6118  2a9b		       a5 e5		      LDA	_Bit0_BW_Mem
   6119  2a9d		       4a		      LSR
   6120  2a9e		       b0 18		      BCS	.skipL0262
   6121  2aa0				   .condpart124
   6122  2aa0		       a5 e5		      LDA	_Bit1_BW_Check
   6123  2aa2		       29 02		      AND	#2
   6124  2aa4		       f0 12		      BEQ	.skip124then
   6125  2aa6				   .condpart125
   6126  2aa6		       85 ee		      sta	temp7
   6127  2aa8		       a9 51		      lda	#>(.__Pause_Setup-1)
   6128  2aaa		       48		      pha
   6129  2aab		       a9 a7		      lda	#<(.__Pause_Setup-1)
   6130  2aad		       48		      pha
   6131  2aae		       a5 ee		      lda	temp7
   6132  2ab0		       48		      pha
   6133  2ab1		       8a		      txa
   6134  2ab2		       48		      pha
   6135  2ab3		       a2 03		      ldx	#3
   6136  2ab5		       4c eb ff 	      jmp	BS_jsr
   6137  2ab8				   .skip124then
   6138  2ab8				   .skipL0262
   6139  2ab8				   .
   6140  2ab8							; 
   6141  2ab8
   6142  2ab8				   .
   6143  2ab8							; 
   6144  2ab8
   6145  2ab8				   .
   6146  2ab8							; 
   6147  2ab8
   6148  2ab8				   .
   6149  2ab8							; 
   6150  2ab8
   6151  2ab8				   .L0263		;  if joy1fire  &&  !_Bit1_FireB_Restrainer{1} then goto __Pause_Setup bank3
   6152  2ab8
   6153  2ab8		       24 0d		      bit	INPT5
   6154  2aba		       30 18		      BMI	.skipL0263
   6155  2abc				   .condpart126
   6156  2abc		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   6157  2abe		       29 02		      AND	#2
   6158  2ac0		       d0 12		      BNE	.skip126then
   6159  2ac2				   .condpart127
   6160  2ac2		       85 ee		      sta	temp7
   6161  2ac4		       a9 51		      lda	#>(.__Pause_Setup-1)
   6162  2ac6		       48		      pha
   6163  2ac7		       a9 a7		      lda	#<(.__Pause_Setup-1)
   6164  2ac9		       48		      pha
   6165  2aca		       a5 ee		      lda	temp7
   6166  2acc		       48		      pha
   6167  2acd		       8a		      txa
   6168  2ace		       48		      pha
   6169  2acf		       a2 03		      ldx	#3
   6170  2ad1		       4c eb ff 	      jmp	BS_jsr
   6171  2ad4				   .skip126then
   6172  2ad4				   .skipL0263
   6173  2ad4				   .
   6174  2ad4							; 
   6175  2ad4
   6176  2ad4				   .__AP_Skip_Pause
   6177  2ad4							; __AP_Skip_Pause
   6178  2ad4
   6179  2ad4				   .
   6180  2ad4							; 
   6181  2ad4
   6182  2ad4				   .
   6183  2ad4							; 
   6184  2ad4
   6185  2ad4				   .
   6186  2ad4							; 
   6187  2ad4
   6188  2ad4				   .
   6189  2ad4							; 
   6190  2ad4
   6191  2ad4				   .
   6192  2ad4							; 
   6193  2ad4
   6194  2ad4				   .
   6195  2ad4							; 
   6196  2ad4
   6197  2ad4				   .L0264		;  player0color:
   6198  2ad4
   6199  2ad4		       a2 e4		      LDX	#<playercolorL0264_0
   6200  2ad6		       86 90		      STX	player0color
   6201  2ad8		       a9 f5		      LDA	#>playercolorL0264_0
   6202  2ada		       85 91		      STA	player0color+1
   6203  2adc				   .L0265		;  player0:
   6204  2adc
   6205  2adc		       a2 00		      LDX	#<playerL0265_0
   6206  2ade		       86 8a		      STX	player0pointerlo
   6207  2ae0		       a9 f6		      LDA	#>playerL0265_0
   6208  2ae2		       85 8b		      STA	player0pointerhi
   6209  2ae4		       a9 13		      LDA	#19
   6210  2ae6		       85 8e		      STA	player0height
   6211  2ae8				   .
   6212  2ae8							; 
   6213  2ae8
   6214  2ae8				   .
   6215  2ae8							; 
   6216  2ae8
   6217  2ae8				   .
   6218  2ae8							; 
   6219  2ae8
   6220  2ae8				   .
   6221  2ae8							; 
   6222  2ae8
   6223  2ae8				   .
   6224  2ae8							; 
   6225  2ae8
   6226  2ae8				   .
   6227  2ae8							; 
   6228  2ae8
   6229  2ae8				   .L0266		;  drawscreen
   6230  2ae8
   6231  2ae8		       85 ee		      sta	temp7
   6232  2aea		       a9 3a		      lda	#>(ret_point21-1)
   6233  2aec		       48		      pha
   6234  2aed		       a9 ff		      lda	#<(ret_point21-1)
   6235  2aef		       48		      pha
   6236  2af0		       a9 f4		      lda	#>(drawscreen-1)
   6237  2af2		       48		      pha
   6238  2af3		       a9 3b		      lda	#<(drawscreen-1)
   6239  2af5		       48		      pha
   6240  2af6		       a5 ee		      lda	temp7
   6241  2af8		       48		      pha
   6242  2af9		       8a		      txa
   6243  2afa		       48		      pha
   6244  2afb		       a2 08		      ldx	#8
   6245  2afd		       4c eb ff 	      jmp	BS_jsr
   6246  2b00				   ret_point21
   6247  2b00				   .
   6248  2b00							; 
   6249  2b00
   6250  2b00				   .
   6251  2b00							; 
   6252  2b00
   6253  2b00				   .
   6254  2b00							; 
   6255  2b00
   6256  2b00				   .
   6257  2b00							; 
   6258  2b00
   6259  2b00				   .
   6260  2b00							; 
   6261  2b00
   6262  2b00				   .
   6263  2b00							; 
   6264  2b00
   6265  2b00				   .
   6266  2b00							; 
   6267  2b00
   6268  2b00				   .
   6269  2b00							; 
   6270  2b00
   6271  2b00				   .
   6272  2b00							; 
   6273  2b00
   6274  2b00				   .
   6275  2b00							; 
   6276  2b00
   6277  2b00				   .
   6278  2b00							; 
   6279  2b00
   6280  2b00				   .
   6281  2b00							; 
   6282  2b00
   6283  2b00				   .
   6284  2b00							; 
   6285  2b00
   6286  2b00				   .
   6287  2b00							; 
   6288  2b00
   6289  2b00				   .
   6290  2b00							; 
   6291  2b00
   6292  2b00				   .L0267		;  if !_Bit2_Game_Control{2} then goto __Skip_Check_G_Over
   6293  2b00
   6294  2b00		       a5 ec		      LDA	_Bit2_Game_Control
   6295  2b02		       29 04		      AND	#4
   6296  2b04		       d0 03		      BNE	.skipL0267
   6297  2b06				   .condpart128
   6298  2b06		       4c 45 3b 	      jmp	.__Skip_Check_G_Over
   6299  2b09
   6300  2b09				   .skipL0267
   6301  2b09				   .
   6302  2b09							; 
   6303  2b09
   6304  2b09				   .
   6305  2b09							; 
   6306  2b09
   6307  2b09				   .
   6308  2b09							; 
   6309  2b09
   6310  2b09				   .
   6311  2b09							; 
   6312  2b09
   6313  2b09				   .
   6314  2b09							; 
   6315  2b09
   6316  2b09				   .L0268		;  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =  0  :  _sc1  =	_Score1_Mem  :	_sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem  :  goto __Start_Restart bank1
   6317  2b09
   6318  2b09		       a5 ec		      LDA	_Bit3_Auto_Play
   6319  2b0b		       29 08		      AND	#8
   6320  2b0d		       f0 24		      BEQ	.skipL0268
   6321  2b0f				   .condpart129
   6322  2b0f		       a5 ec		      LDA	_Bit2_Game_Control
   6323  2b11		       29 fb		      AND	#251
   6324  2b13		       85 ec		      STA	_Bit2_Game_Control
   6325  2b15		       a5 e6		      LDA	_Score1_Mem
   6326  2b17		       85 93		      STA	_sc1
   6327  2b19		       a5 e7		      LDA	_Score2_Mem
   6328  2b1b		       85 94		      STA	_sc2
   6329  2b1d		       a5 e8		      LDA	_Score3_Mem
   6330  2b1f		       85 95		      STA	_sc3
   6331  2b21		       85 ee		      sta	temp7
   6332  2b23		       a9 0f		      lda	#>(.__Start_Restart-1)
   6333  2b25		       48		      pha
   6334  2b26		       a9 ff		      lda	#<(.__Start_Restart-1)
   6335  2b28		       48		      pha
   6336  2b29		       a5 ee		      lda	temp7
   6337  2b2b		       48		      pha
   6338  2b2c		       8a		      txa
   6339  2b2d		       48		      pha
   6340  2b2e		       a2 01		      ldx	#1
   6341  2b30		       4c eb ff 	      jmp	BS_jsr
   6342  2b33				   .skipL0268
   6343  2b33				   .
   6344  2b33							; 
   6345  2b33
   6346  2b33				   .
   6347  2b33							; 
   6348  2b33
   6349  2b33				   .
   6350  2b33							; 
   6351  2b33
   6352  2b33				   .
   6353  2b33							; 
   6354  2b33
   6355  2b33				   .L0269		;  goto __Game_Over_Setup bank3
   6356  2b33
   6357  2b33		       85 ee		      sta	temp7
   6358  2b35		       a9 4f		      lda	#>(.__Game_Over_Setup-1)
   6359  2b37		       48		      pha
   6360  2b38		       a9 ff		      lda	#<(.__Game_Over_Setup-1)
   6361  2b3a		       48		      pha
   6362  2b3b		       a5 ee		      lda	temp7
   6363  2b3d		       48		      pha
   6364  2b3e		       8a		      txa
   6365  2b3f		       48		      pha
   6366  2b40		       a2 03		      ldx	#3
   6367  2b42		       4c eb ff 	      jmp	BS_jsr
   6368  2b45				   .
   6369  2b45							; 
   6370  2b45
   6371  2b45				   .__Skip_Check_G_Over
   6372  2b45							; __Skip_Check_G_Over
   6373  2b45
   6374  2b45				   .
   6375  2b45							; 
   6376  2b45
   6377  2b45				   .
   6378  2b45							; 
   6379  2b45
   6380  2b45				   .
   6381  2b45							; 
   6382  2b45
   6383  2b45				   .
   6384  2b45							; 
   6385  2b45
   6386  2b45				   .
   6387  2b45							; 
   6388  2b45
   6389  2b45				   .
   6390  2b45							; 
   6391  2b45
   6392  2b45				   .
   6393  2b45							; 
   6394  2b45
   6395  2b45				   .
   6396  2b45							; 
   6397  2b45
   6398  2b45				   .
   6399  2b45							; 
   6400  2b45
   6401  2b45				   .
   6402  2b45							; 
   6403  2b45
   6404  2b45				   .
   6405  2b45							; 
   6406  2b45
   6407  2b45				   .
   6408  2b45							; 
   6409  2b45
   6410  2b45				   .
   6411  2b45							; 
   6412  2b45
   6413  2b45				   .
   6414  2b45							; 
   6415  2b45
   6416  2b45				   .L0270		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Reset
   6417  2b45
   6418  2b45		       a5 ec		      LDA	_Bit3_Auto_Play
   6419  2b47		       29 08		      AND	#8
   6420  2b49		       d0 03		      BNE	.skipL0270
   6421  2b4b				   .condpart130
   6422  2b4b		       4c 7a 3b 	      jmp	.__AP_Skip_Reset
   6423  2b4e
   6424  2b4e				   .skipL0270
   6425  2b4e				   .
   6426  2b4e							; 
   6427  2b4e
   6428  2b4e				   .
   6429  2b4e							; 
   6430  2b4e
   6431  2b4e				   .
   6432  2b4e							; 
   6433  2b4e
   6434  2b4e				   .
   6435  2b4e							; 
   6436  2b4e
   6437  2b4e				   .
   6438  2b4e							; 
   6439  2b4e
   6440  2b4e				   .
   6441  2b4e							; 
   6442  2b4e
   6443  2b4e				   .L0271		;  if switchreset  ||	joy0fire then _Bit3_Auto_Play{3}  =  0	:  _Bit2_Game_Control{2}  =  1	:  goto __Start_Restart bank1
   6444  2b4e
   6445  2b4e		       a9 01		      lda	#1
   6446  2b50		       2c 82 02 	      bit	SWCHB
   6447  2b53		       d0 03		      BNE	.skipL0271
   6448  2b55				   .condpart131
   6449  2b55		       4c 5c 3b 	      jmp	.condpart132
   6450  2b58				   .skipL0271
   6451  2b58		       24 0c		      bit	INPT4
   6452  2b5a		       30 1e		      BMI	.skip12OR
   6453  2b5c				   .condpart132
   6454  2b5c		       a5 ec		      LDA	_Bit3_Auto_Play
   6455  2b5e		       29 f7		      AND	#247
   6456  2b60		       85 ec		      STA	_Bit3_Auto_Play
   6457  2b62		       a5 ec		      LDA	_Bit2_Game_Control
   6458  2b64		       09 04		      ORA	#4
   6459  2b66		       85 ec		      STA	_Bit2_Game_Control
   6460  2b68		       85 ee		      sta	temp7
   6461  2b6a		       a9 0f		      lda	#>(.__Start_Restart-1)
   6462  2b6c		       48		      pha
   6463  2b6d		       a9 ff		      lda	#<(.__Start_Restart-1)
   6464  2b6f		       48		      pha
   6465  2b70		       a5 ee		      lda	temp7
   6466  2b72		       48		      pha
   6467  2b73		       8a		      txa
   6468  2b74		       48		      pha
   6469  2b75		       a2 01		      ldx	#1
   6470  2b77		       4c eb ff 	      jmp	BS_jsr
   6471  2b7a				   .skip12OR
   6472  2b7a				   .
   6473  2b7a							; 
   6474  2b7a
   6475  2b7a				   .__AP_Skip_Reset
   6476  2b7a							; __AP_Skip_Reset
   6477  2b7a
   6478  2b7a				   .
   6479  2b7a							; 
   6480  2b7a
   6481  2b7a				   .
   6482  2b7a							; 
   6483  2b7a
   6484  2b7a				   .
   6485  2b7a							; 
   6486  2b7a
   6487  2b7a				   .
   6488  2b7a							; 
   6489  2b7a
   6490  2b7a				   .
   6491  2b7a							; 
   6492  2b7a
   6493  2b7a				   .L0272		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   6494  2b7a
   6495  2b7a		       a9 01		      lda	#1
   6496  2b7c		       2c 82 02 	      bit	SWCHB
   6497  2b7f		       f0 09		      BEQ	.skipL0272
   6498  2b81				   .condpart133
   6499  2b81		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6500  2b83		       29 fe		      AND	#254
   6501  2b85		       85 ec		      STA	_Bit0_Reset_Restrainer
   6502  2b87		       4c 49 31 	      jmp	.__Main_Loop
   6503  2b8a
   6504  2b8a				   .skipL0272
   6505  2b8a				   .
   6506  2b8a							; 
   6507  2b8a
   6508  2b8a				   .
   6509  2b8a							; 
   6510  2b8a
   6511  2b8a				   .
   6512  2b8a							; 
   6513  2b8a
   6514  2b8a				   .
   6515  2b8a							; 
   6516  2b8a
   6517  2b8a				   .
   6518  2b8a							; 
   6519  2b8a
   6520  2b8a				   .L0273		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   6521  2b8a
   6522  2b8a		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6523  2b8c		       4a		      LSR
   6524  2b8d		       90 03		      BCC	.skipL0273
   6525  2b8f				   .condpart134
   6526  2b8f		       4c 49 31 	      jmp	.__Main_Loop
   6527  2b92
   6528  2b92				   .skipL0273
   6529  2b92				   .
   6530  2b92							; 
   6531  2b92
   6532  2b92				   .
   6533  2b92							; 
   6534  2b92
   6535  2b92				   .
   6536  2b92							; 
   6537  2b92
   6538  2b92				   .
   6539  2b92							; 
   6540  2b92
   6541  2b92				   .L0274		;  _Bit2_Game_Control{2}  =  0
   6542  2b92
   6543  2b92		       a5 ec		      LDA	_Bit2_Game_Control
   6544  2b94		       29 fb		      AND	#251
   6545  2b96		       85 ec		      STA	_Bit2_Game_Control
   6546  2b98				   .
   6547  2b98							; 
   6548  2b98
   6549  2b98				   .
   6550  2b98							; 
   6551  2b98
   6552  2b98				   .
   6553  2b98							; 
   6554  2b98
   6555  2b98				   .
   6556  2b98							; 
   6557  2b98
   6558  2b98				   .
   6559  2b98							; 
   6560  2b98
   6561  2b98				   .L0275		;  goto __Game_Over_Setup bank3
   6562  2b98
   6563  2b98		       85 ee		      sta	temp7
   6564  2b9a		       a9 4f		      lda	#>(.__Game_Over_Setup-1)
   6565  2b9c		       48		      pha
   6566  2b9d		       a9 ff		      lda	#<(.__Game_Over_Setup-1)
   6567  2b9f		       48		      pha
   6568  2ba0		       a5 ee		      lda	temp7
   6569  2ba2		       48		      pha
   6570  2ba3		       8a		      txa
   6571  2ba4		       48		      pha
   6572  2ba5		       a2 03		      ldx	#3
   6573  2ba7		       4c eb ff 	      jmp	BS_jsr
   6574  2baa				   .
   6575  2baa							; 
   6576  2baa
   6577  2baa				   .
   6578  2baa							; 
   6579  2baa
   6580  2baa				   .
   6581  2baa							; 
   6582  2baa
   6583  2baa				   .
   6584  2baa							; 
   6585  2baa
   6586  2baa				   .
   6587  2baa							; 
   6588  2baa
   6589  2baa				   .
   6590  2baa							; 
   6591  2baa
   6592  2baa				   .
   6593  2baa							; 
   6594  2baa
   6595  2baa				   .
   6596  2baa							; 
   6597  2baa
   6598  2baa				   .
   6599  2baa							; 
   6600  2baa
   6601  2baa				   .
   6602  2baa							; 
   6603  2baa
   6604  2baa				   .
   6605  2baa							; 
   6606  2baa
   6607  2baa				   .
   6608  2baa							; 
   6609  2baa
   6610  2baa				   .
   6611  2baa							; 
   6612  2baa
   6613  2baa				   .
   6614  2baa							; 
   6615  2baa
   6616  2baa				   .
   6617  2baa							; 
   6618  2baa
   6619  2baa				   .
   6620  2baa							; 
   6621  2baa
   6622  2baa				   .
   6623  2baa							; 
   6624  2baa
   6625  2baa				   .L0276		;  bank 3
   6626  2baa
   6627  2baa					      if	ECHO2
      1066 bytes of ROM space left in bank 2
   6628  2baa					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   6629  2baa					      endif
   6630  2baa		       00 01	   ECHO2      =	1
   6631  2fd4					      ORG	$2FF4-bscode_length
   6632  2fd4					      RORG	$3FF4-bscode_length
   6633  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   6634  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   6635  2fd6				  -	      stx	FASTFETCH
   6636  2fd6					      endif
   6637  2fd6		       9a		      txs
   6638  2fd7				  -	      if	bankswitch == 64
   6639  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6640  2fd7					      else
   6641  2fd7		       a9 f2		      lda	#>(start-1)
   6642  2fd9					      endif
   6643  2fd9		       48		      pha
   6644  2fda		       a9 51		      lda	#<(start-1)
   6645  2fdc		       48		      pha
   6646  2fdd		       48		      pha
   6647  2fde		       8a		      txa
   6648  2fdf		       48		      pha
   6649  2fe0		       ba		      tsx
   6650  2fe1					      if	bankswitch != 64
   6651  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   6652  2fe3		       2a		      rol
   6653  2fe4		       2a		      rol
   6654  2fe5		       2a		      rol
   6655  2fe6		       2a		      rol
   6656  2fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6657  2fe9		       aa		      tax
   6658  2fea		       e8		      inx
   6659  2feb				  -	      else
   6660  2feb				  -	      lda	4,x	; get high byte of return address
   6661  2feb				  -	      tay
   6662  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6663  2feb				  -	      sta	4,x
   6664  2feb				  -	      tya
   6665  2feb				  -	      lsr
   6666  2feb				  -	      lsr
   6667  2feb				  -	      lsr
   6668  2feb				  -	      lsr
   6669  2feb				  -	      tax
   6670  2feb				  -	      inx
   6671  2feb					      endif
   6672  2feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   6673  2fee		       68		      pla
   6674  2fef		       aa		      tax
   6675  2ff0		       68		      pla
   6676  2ff1		       60		      rts
   6677  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6678  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6679  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6680  2ff2					      endif
   6681  2ffc					      ORG	$2FFC
   6682  2ffc					      RORG	$3FFC
   6683  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   6684  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   6685  3000					      ORG	$3000
   6686  3000					      RORG	$5000
   6687  3000				   .
   6688  3000							; 
   6689  3000
   6690  3000				   .
   6691  3000							; 
   6692  3000
   6693  3000				   .
   6694  3000							; 
   6695  3000
   6696  3000				   .
   6697  3000							; 
   6698  3000
   6699  3000				   .
   6700  3000							; 
   6701  3000
   6702  3000				   .
   6703  3000							; 
   6704  3000
   6705  3000				   .
   6706  3000							; 
   6707  3000
   6708  3000				   .
   6709  3000							; 
   6710  3000
   6711  3000				   .
   6712  3000							; 
   6713  3000
   6714  3000				   .
   6715  3000							; 
   6716  3000
   6717  3000				   .
   6718  3000							; 
   6719  3000
   6720  3000				   .__Game_Over_Setup
   6721  3000							; __Game_Over_Setup
   6722  3000
   6723  3000				   .
   6724  3000							; 
   6725  3000
   6726  3000				   .
   6727  3000							; 
   6728  3000
   6729  3000				   .
   6730  3000							; 
   6731  3000
   6732  3000				   .
   6733  3000							; 
   6734  3000
   6735  3000				   .
   6736  3000							; 
   6737  3000
   6738  3000				   .
   6739  3000							; 
   6740  3000
   6741  3000				   .
   6742  3000							; 
   6743  3000
   6744  3000				   .
   6745  3000							; 
   6746  3000
   6747  3000				   .
   6748  3000							; 
   6749  3000
   6750  3000				   .
   6751  3000							; 
   6752  3000
   6753  3000				   .
   6754  3000							; 
   6755  3000
   6756  3000				   .L0277		;  if _sc1  >	_High_Score1 then goto __New_High_Score
   6757  3000
   6758  3000		       a5 e9		      LDA	_High_Score1
   6759  3002		       c5 93		      CMP	_sc1
   6760  3004		       b0 03		      BCS	.skipL0277
   6761  3006				   .condpart135
   6762  3006		       4c 39 50 	      jmp	.__New_High_Score
   6763  3009
   6764  3009				   .skipL0277
   6765  3009				   .L0278		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
   6766  3009
   6767  3009		       a5 93		      LDA	_sc1
   6768  300b		       c5 e9		      CMP	_High_Score1
   6769  300d		       b0 03		      BCS	.skipL0278
   6770  300f				   .condpart136
   6771  300f		       4c 45 50 	      jmp	.__Skip_High_Score
   6772  3012
   6773  3012				   .skipL0278
   6774  3012				   .
   6775  3012							; 
   6776  3012
   6777  3012				   .
   6778  3012							; 
   6779  3012
   6780  3012				   .
   6781  3012							; 
   6782  3012
   6783  3012				   .
   6784  3012							; 
   6785  3012
   6786  3012				   .L0279		;  if _sc2  >	_High_Score2 then goto __New_High_Score
   6787  3012
   6788  3012		       a5 ea		      LDA	_High_Score2
   6789  3014		       c5 94		      CMP	_sc2
   6790  3016		       b0 03		      BCS	.skipL0279
   6791  3018				   .condpart137
   6792  3018		       4c 39 50 	      jmp	.__New_High_Score
   6793  301b
   6794  301b				   .skipL0279
   6795  301b				   .L0280		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
   6796  301b
   6797  301b		       a5 94		      LDA	_sc2
   6798  301d		       c5 ea		      CMP	_High_Score2
   6799  301f		       b0 03		      BCS	.skipL0280
   6800  3021				   .condpart138
   6801  3021		       4c 45 50 	      jmp	.__Skip_High_Score
   6802  3024
   6803  3024				   .skipL0280
   6804  3024				   .
   6805  3024							; 
   6806  3024
   6807  3024				   .
   6808  3024							; 
   6809  3024
   6810  3024				   .
   6811  3024							; 
   6812  3024
   6813  3024				   .
   6814  3024							; 
   6815  3024
   6816  3024				   .L0281		;  if _sc3  >	_High_Score3 then goto __New_High_Score
   6817  3024
   6818  3024		       a5 eb		      LDA	_High_Score3
   6819  3026		       c5 95		      CMP	_sc3
   6820  3028		       b0 03		      BCS	.skipL0281
   6821  302a				   .condpart139
   6822  302a		       4c 39 50 	      jmp	.__New_High_Score
   6823  302d
   6824  302d				   .skipL0281
   6825  302d				   .L0282		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
   6826  302d
   6827  302d		       a5 95		      LDA	_sc3
   6828  302f		       c5 eb		      CMP	_High_Score3
   6829  3031		       b0 03		      BCS	.skipL0282
   6830  3033				   .condpart140
   6831  3033		       4c 45 50 	      jmp	.__Skip_High_Score
   6832  3036
   6833  3036				   .skipL0282
   6834  3036				   .
   6835  3036							; 
   6836  3036
   6837  3036				   .
   6838  3036							; 
   6839  3036
   6840  3036				   .
   6841  3036							; 
   6842  3036
   6843  3036				   .
   6844  3036							; 
   6845  3036
   6846  3036				   .L0283		;  goto __Skip_High_Score
   6847  3036
   6848  3036		       4c 45 50 	      jmp	.__Skip_High_Score
   6849  3039
   6850  3039				   .
   6851  3039							; 
   6852  3039
   6853  3039				   .
   6854  3039							; 
   6855  3039
   6856  3039				   .
   6857  3039							; 
   6858  3039
   6859  3039				   .
   6860  3039							; 
   6861  3039
   6862  3039				   .__New_High_Score
   6863  3039							; __New_High_Score
   6864  3039
   6865  3039				   .
   6866  3039							; 
   6867  3039
   6868  3039				   .L0284		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
   6869  3039
   6870  3039		       a5 93		      LDA	_sc1
   6871  303b		       85 e9		      STA	_High_Score1
   6872  303d		       a5 94		      LDA	_sc2
   6873  303f		       85 ea		      STA	_High_Score2
   6874  3041		       a5 95		      LDA	_sc3
   6875  3043		       85 eb		      STA	_High_Score3
   6876  3045				   .
   6877  3045							; 
   6878  3045
   6879  3045				   .__Skip_High_Score
   6880  3045							; __Skip_High_Score
   6881  3045
   6882  3045				   .
   6883  3045							; 
   6884  3045
   6885  3045				   .
   6886  3045							; 
   6887  3045
   6888  3045				   .
   6889  3045							; 
   6890  3045
   6891  3045				   .
   6892  3045							; 
   6893  3045
   6894  3045				   .
   6895  3045							; 
   6896  3045
   6897  3045				   .L0285		;  if !_Bit2_Game_Control{2} then goto __Start_Restart bank1
   6898  3045
   6899  3045		       a5 ec		      LDA	_Bit2_Game_Control
   6900  3047		       29 04		      AND	#4
   6901  3049		       d0 12		      BNE	.skipL0285
   6902  304b				   .condpart141
   6903  304b		       85 ee		      sta	temp7
   6904  304d		       a9 0f		      lda	#>(.__Start_Restart-1)
   6905  304f		       48		      pha
   6906  3050		       a9 ff		      lda	#<(.__Start_Restart-1)
   6907  3052		       48		      pha
   6908  3053		       a5 ee		      lda	temp7
   6909  3055		       48		      pha
   6910  3056		       8a		      txa
   6911  3057		       48		      pha
   6912  3058		       a2 01		      ldx	#1
   6913  305a		       4c eb ff 	      jmp	BS_jsr
   6914  305d				   .skipL0285
   6915  305d				   .
   6916  305d							; 
   6917  305d
   6918  305d				   .
   6919  305d							; 
   6920  305d
   6921  305d				   .
   6922  305d							; 
   6923  305d
   6924  305d				   .
   6925  305d							; 
   6926  305d
   6927  305d				   .
   6928  305d							; 
   6929  305d
   6930  305d				   .
   6931  305d							; 
   6932  305d
   6933  305d				   .L0286		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   6934  305d
   6935  305d		       a5 93		      LDA	_sc1
   6936  305f		       85 e6		      STA	_Score1_Mem
   6937  3061		       a5 94		      LDA	_sc2
   6938  3063		       85 e7		      STA	_Score2_Mem
   6939  3065		       a5 95		      LDA	_sc3
   6940  3067		       85 e8		      STA	_Score3_Mem
   6941  3069				   .
   6942  3069							; 
   6943  3069
   6944  3069				   .
   6945  3069							; 
   6946  3069
   6947  3069				   .
   6948  3069							; 
   6949  3069
   6950  3069				   .
   6951  3069							; 
   6952  3069
   6953  3069				   .
   6954  3069							; 
   6955  3069
   6956  3069				   .
   6957  3069							; 
   6958  3069
   6959  3069				   .L0287		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   6960  3069
   6961  3069		       a9 00		      LDA	#0
   6962  306b		       85 d8		      STA	_Master_Counter
   6963  306d		       85 d9		      STA	_Frame_Counter
   6964  306f				   .
   6965  306f							; 
   6966  306f
   6967  306f				   .
   6968  306f							; 
   6969  306f
   6970  306f				   .
   6971  306f							; 
   6972  306f
   6973  306f				   .
   6974  306f							; 
   6975  306f
   6976  306f				   .
   6977  306f							; 
   6978  306f
   6979  306f				   .
   6980  306f							; 
   6981  306f
   6982  306f				   .L0288		;  _Main_CharY  =  200  :  _WillY  =  200  :  _Lost_Soul_Y  =	200
   6983  306f
   6984  306f		       a9 c8		      LDA	#200
   6985  3071		       85 86		      STA	_Main_CharY
   6986  3073		       85 85		      STA	_WillY
   6987  3075		       85 89		      STA	_Lost_Soul_Y
   6988  3077				   .
   6989  3077							; 
   6990  3077
   6991  3077				   .
   6992  3077							; 
   6993  3077
   6994  3077				   .
   6995  3077							; 
   6996  3077
   6997  3077				   .
   6998  3077							; 
   6999  3077
   7000  3077				   .
   7001  3077							; 
   7002  3077
   7003  3077				   .
   7004  3077							; 
   7005  3077
   7006  3077				   .
   7007  3077							; 
   7008  3077
   7009  3077				   .
   7010  3077							; 
   7011  3077
   7012  3077				   .
   7013  3077							; 
   7014  3077
   7015  3077				   .
   7016  3077							; 
   7017  3077
   7018  3077				   .
   7019  3077							; 
   7020  3077
   7021  3077				   .L0289		;  _Bit0_Reset_Restrainer{0}  =  1
   7022  3077
   7023  3077		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7024  3079		       09 01		      ORA	#1
   7025  307b		       85 ec		      STA	_Bit0_Reset_Restrainer
   7026  307d				   .
   7027  307d							; 
   7028  307d
   7029  307d				   .
   7030  307d							; 
   7031  307d
   7032  307d				   .
   7033  307d							; 
   7034  307d
   7035  307d				   .
   7036  307d							; 
   7037  307d
   7038  307d				   .
   7039  307d							; 
   7040  307d
   7041  307d				   .
   7042  307d							; 
   7043  307d
   7044  307d				   .L0290		;  playfieldpos  =  8
   7045  307d
   7046  307d		       a9 08		      LDA	#8
   7047  307f		       85 ef		      STA	playfieldpos
   7048  3081				   .L0291		;  playfield:
   7049  3081
   7050  3081				  -	      ifconst	pfres
   7051  3081				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   7052  3081					      else
   7053  3081		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   7054  3083					      endif
   7055  3083		       4c b2 50 	      jmp	pflabel1
   7056  3086				   PF_data1
   7057  3086		       49 e4		      .byte.b	%01001001, %11100100
   7058  3088					      if	(pfwidth>2)
   7059  3088		       57 06		      .byte.b	%01010111, %00000110
   7060  308a					      endif
   7061  308a		       ad 4a		      .byte.b	%10101101, %01001010
   7062  308c					      if	(pfwidth>2)
   7063  308c		       54 0a		      .byte.b	%01010100, %00001010
   7064  308e					      endif
   7065  308e		       eb 4a		      .byte.b	%11101011, %01001010
   7066  3090					      if	(pfwidth>2)
   7067  3090		       76 06		      .byte.b	%01110110, %00000110
   7068  3092					      endif
   7069  3092		       a9 4a		      .byte.b	%10101001, %01001010
   7070  3094					      if	(pfwidth>2)
   7071  3094		       54 0a		      .byte.b	%01010100, %00001010
   7072  3096					      endif
   7073  3096		       a9 44		      .byte.b	%10101001, %01000100
   7074  3098					      if	(pfwidth>2)
   7075  3098		       57 0a		      .byte.b	%01010111, %00001010
   7076  309a					      endif
   7077  309a		       00 00		      .byte.b	%00000000, %00000000
   7078  309c					      if	(pfwidth>2)
   7079  309c		       00 00		      .byte.b	%00000000, %00000000
   7080  309e					      endif
   7081  309e		       97 06		      .byte.b	%10010111, %00000110
   7082  30a0					      if	(pfwidth>2)
   7083  30a0		       67 6e		      .byte.b	%01100111, %01101110
   7084  30a2					      endif
   7085  30a2		       a2 0a		      .byte.b	%10100010, %00001010
   7086  30a4					      if	(pfwidth>2)
   7087  30a4		       52 a2		      .byte.b	%01010010, %10100010
   7088  30a6					      endif
   7089  30a6		       c2 0a		      .byte.b	%11000010, %00001010
   7090  30a8					      if	(pfwidth>2)
   7091  30a8		       52 a6		      .byte.b	%01010010, %10100110
   7092  30aa					      endif
   7093  30aa		       a2 0a		      .byte.b	%10100010, %00001010
   7094  30ac					      if	(pfwidth>2)
   7095  30ac		       52 a2		      .byte.b	%01010010, %10100010
   7096  30ae					      endif
   7097  30ae		       97 06		      .byte.b	%10010111, %00000110
   7098  30b0					      if	(pfwidth>2)
   7099  30b0		       67 6e		      .byte.b	%01100111, %01101110
   7100  30b2					      endif
   7101  30b2				   pflabel1
   7102  30b2		       bd 86 50 	      lda	PF_data1,x
   7103  30b5		       95 a4		      sta	playfield,x
   7104  30b7		       ca		      dex
   7105  30b8		       10 f8		      bpl	pflabel1
   7106  30ba				   .
   7107  30ba							; 
   7108  30ba
   7109  30ba				   .
   7110  30ba							; 
   7111  30ba
   7112  30ba				   .
   7113  30ba							; 
   7114  30ba
   7115  30ba				   .
   7116  30ba							; 
   7117  30ba
   7118  30ba				   .
   7119  30ba							; 
   7120  30ba
   7121  30ba				   .
   7122  30ba							; 
   7123  30ba
   7124  30ba				   .
   7125  30ba							; 
   7126  30ba
   7127  30ba				   .
   7128  30ba							; 
   7129  30ba
   7130  30ba				   .
   7131  30ba							; 
   7132  30ba
   7133  30ba				   .
   7134  30ba							; 
   7135  30ba
   7136  30ba				   .
   7137  30ba							; 
   7138  30ba
   7139  30ba				   .__Game_Over_Loop
   7140  30ba							; __Game_Over_Loop
   7141  30ba
   7142  30ba				   .
   7143  30ba							; 
   7144  30ba
   7145  30ba				   .
   7146  30ba							; 
   7147  30ba
   7148  30ba				   .
   7149  30ba							; 
   7150  30ba
   7151  30ba				   .
   7152  30ba							; 
   7153  30ba
   7154  30ba				   .
   7155  30ba							; 
   7156  30ba
   7157  30ba				   .
   7158  30ba							; 
   7159  30ba
   7160  30ba				   .
   7161  30ba							; 
   7162  30ba
   7163  30ba				   .
   7164  30ba							; 
   7165  30ba
   7166  30ba				   .
   7167  30ba							; 
   7168  30ba
   7169  30ba				   .
   7170  30ba							; 
   7171  30ba
   7172  30ba				   .
   7173  30ba							; 
   7174  30ba
   7175  30ba				   .
   7176  30ba							; 
   7177  30ba
   7178  30ba				   .
   7179  30ba							; 
   7180  30ba
   7181  30ba				   .
   7182  30ba							; 
   7183  30ba
   7184  30ba				   .
   7185  30ba							; 
   7186  30ba
   7187  30ba				   .
   7188  30ba							; 
   7189  30ba
   7190  30ba				   .
   7191  30ba							; 
   7192  30ba
   7193  30ba				   .
   7194  30ba							; 
   7195  30ba
   7196  30ba				   .
   7197  30ba							; 
   7198  30ba
   7199  30ba				   .L0292		;  _Master_Counter  =	_Master_Counter  +  1
   7200  30ba
   7201  30ba		       e6 d8		      INC	_Master_Counter
   7202  30bc				   .
   7203  30bc							; 
   7204  30bc
   7205  30bc				   .
   7206  30bc							; 
   7207  30bc
   7208  30bc				   .
   7209  30bc							; 
   7210  30bc
   7211  30bc				   .
   7212  30bc							; 
   7213  30bc
   7214  30bc				   .
   7215  30bc							; 
   7216  30bc
   7217  30bc				   .L0293		;  if _Master_Counter	<  120 then goto __Skip_20_Second_Counter
   7218  30bc
   7219  30bc		       a5 d8		      LDA	_Master_Counter
   7220  30be		       c9 78		      CMP	#120
   7221  30c0		       b0 03		      BCS	.skipL0293
   7222  30c2				   .condpart142
   7223  30c2		       4c 2f 51 	      jmp	.__Skip_20_Second_Counter
   7224  30c5
   7225  30c5				   .skipL0293
   7226  30c5				   .
   7227  30c5							; 
   7228  30c5
   7229  30c5				   .
   7230  30c5							; 
   7231  30c5
   7232  30c5				   .
   7233  30c5							; 
   7234  30c5
   7235  30c5				   .
   7236  30c5							; 
   7237  30c5
   7238  30c5				   .
   7239  30c5							; 
   7240  30c5
   7241  30c5				   .L0294		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   7242  30c5
   7243  30c5		       e6 d9		      INC	_Frame_Counter
   7244  30c7		       a9 00		      LDA	#0
   7245  30c9		       85 d8		      STA	_Master_Counter
   7246  30cb				   .
   7247  30cb							; 
   7248  30cb
   7249  30cb				   .
   7250  30cb							; 
   7251  30cb
   7252  30cb				   .
   7253  30cb							; 
   7254  30cb
   7255  30cb				   .
   7256  30cb							; 
   7257  30cb
   7258  30cb				   .
   7259  30cb							; 
   7260  30cb
   7261  30cb				   .
   7262  30cb							; 
   7263  30cb
   7264  30cb				   .
   7265  30cb							; 
   7266  30cb
   7267  30cb				   .
   7268  30cb							; 
   7269  30cb
   7270  30cb				   .L0295		;  if _Frame_Counter  >  9 then _Bit2_Game_Control{2}	=  0  :  _sc1 = _Score1_Mem  :	_sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem :  goto __Start_Restart bank1
   7271  30cb
   7272  30cb		       a9 09		      LDA	#9
   7273  30cd		       c5 d9		      CMP	_Frame_Counter
   7274  30cf		       b0 24		      BCS	.skipL0295
   7275  30d1				   .condpart143
   7276  30d1		       a5 ec		      LDA	_Bit2_Game_Control
   7277  30d3		       29 fb		      AND	#251
   7278  30d5		       85 ec		      STA	_Bit2_Game_Control
   7279  30d7		       a5 e6		      LDA	_Score1_Mem
   7280  30d9		       85 93		      STA	_sc1
   7281  30db		       a5 e7		      LDA	_Score2_Mem
   7282  30dd		       85 94		      STA	_sc2
   7283  30df		       a5 e8		      LDA	_Score3_Mem
   7284  30e1		       85 95		      STA	_sc3
   7285  30e3		       85 ee		      sta	temp7
   7286  30e5		       a9 0f		      lda	#>(.__Start_Restart-1)
   7287  30e7		       48		      pha
   7288  30e8		       a9 ff		      lda	#<(.__Start_Restart-1)
   7289  30ea		       48		      pha
   7290  30eb		       a5 ee		      lda	temp7
   7291  30ed		       48		      pha
   7292  30ee		       8a		      txa
   7293  30ef		       48		      pha
   7294  30f0		       a2 01		      ldx	#1
   7295  30f2		       4c eb ff 	      jmp	BS_jsr
   7296  30f5				   .skipL0295
   7297  30f5				   .
   7298  30f5							; 
   7299  30f5
   7300  30f5				   .
   7301  30f5							; 
   7302  30f5
   7303  30f5				   .
   7304  30f5							; 
   7305  30f5
   7306  30f5				   .
   7307  30f5							; 
   7308  30f5
   7309  30f5				   .L0296		;  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   7310  30f5
   7311  30f5		       a5 ec		      LDA	_Bit6_Swap_Scores
   7312  30f7		       29 40		      AND	#64
   7313  30f9		       08		      PHP
   7314  30fa		       a5 ec		      LDA	_Bit6_Swap_Scores
   7315  30fc		       29 bf		      AND	#191
   7316  30fe		       28		      PLP
   7317  30ff		       d0 02		      .byte.b	$D0, $02
   7318  3101		       09 40		      ORA	#64
   7319  3103		       85 ec		      STA	_Bit6_Swap_Scores
   7320  3105				   .
   7321  3105							; 
   7322  3105
   7323  3105				   .
   7324  3105							; 
   7325  3105
   7326  3105				   .
   7327  3105							; 
   7328  3105
   7329  3105				   .
   7330  3105							; 
   7331  3105
   7332  3105				   .L0297		;  if !_Bit6_Swap_Scores{6} then goto __GO_Current_Score
   7333  3105
   7334  3105		       24 ec		      BIT	_Bit6_Swap_Scores
   7335  3107		       70 03		      BVS	.skipL0297
   7336  3109				   .condpart144
   7337  3109		       4c 1f 51 	      jmp	.__GO_Current_Score
   7338  310c
   7339  310c				   .skipL0297
   7340  310c				   .
   7341  310c							; 
   7342  310c
   7343  310c				   .
   7344  310c							; 
   7345  310c
   7346  310c				   .
   7347  310c							; 
   7348  310c
   7349  310c				   .
   7350  310c							; 
   7351  310c
   7352  310c				   .L0298		;  scorecolor	=  $AE
   7353  310c
   7354  310c		       a9 ae		      LDA	#$AE
   7355  310e		       85 a3		      STA	scorecolor
   7356  3110				   .
   7357  3110							; 
   7358  3110
   7359  3110				   .L0299		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   7360  3110
   7361  3110		       a5 e9		      LDA	_High_Score1
   7362  3112		       85 93		      STA	_sc1
   7363  3114		       a5 ea		      LDA	_High_Score2
   7364  3116		       85 94		      STA	_sc2
   7365  3118		       a5 eb		      LDA	_High_Score3
   7366  311a		       85 95		      STA	_sc3
   7367  311c				   .
   7368  311c							; 
   7369  311c
   7370  311c				   .L0300		;  goto __Skip_20_Second_Counter
   7371  311c
   7372  311c		       4c 2f 51 	      jmp	.__Skip_20_Second_Counter
   7373  311f
   7374  311f				   .
   7375  311f							; 
   7376  311f
   7377  311f				   .
   7378  311f							; 
   7379  311f
   7380  311f				   .
   7381  311f							; 
   7382  311f
   7383  311f				   .
   7384  311f							; 
   7385  311f
   7386  311f				   .__GO_Current_Score
   7387  311f							; __GO_Current_Score
   7388  311f
   7389  311f				   .
   7390  311f							; 
   7391  311f
   7392  311f				   .L0301		;  scorecolor	=  $1C
   7393  311f
   7394  311f		       a9 1c		      LDA	#$1C
   7395  3121		       85 a3		      STA	scorecolor
   7396  3123				   .
   7397  3123							; 
   7398  3123
   7399  3123				   .L0302		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   7400  3123
   7401  3123		       a5 e6		      LDA	_Score1_Mem
   7402  3125		       85 93		      STA	_sc1
   7403  3127		       a5 e7		      LDA	_Score2_Mem
   7404  3129		       85 94		      STA	_sc2
   7405  312b		       a5 e8		      LDA	_Score3_Mem
   7406  312d		       85 95		      STA	_sc3
   7407  312f				   .
   7408  312f							; 
   7409  312f
   7410  312f				   .__Skip_20_Second_Counter
   7411  312f							; __Skip_20_Second_Counter
   7412  312f
   7413  312f				   .
   7414  312f							; 
   7415  312f
   7416  312f				   .
   7417  312f							; 
   7418  312f
   7419  312f				   .
   7420  312f							; 
   7421  312f
   7422  312f				   .
   7423  312f							; 
   7424  312f
   7425  312f				   .
   7426  312f							; 
   7427  312f
   7428  312f				   .
   7429  312f							; 
   7430  312f
   7431  312f				   .
   7432  312f							; 
   7433  312f
   7434  312f				   .
   7435  312f							; 
   7436  312f
   7437  312f				   .
   7438  312f							; 
   7439  312f
   7440  312f				   .
   7441  312f							; 
   7442  312f
   7443  312f				   .
   7444  312f							; 
   7445  312f
   7446  312f				   .
   7447  312f							; 
   7448  312f
   7449  312f				   .
   7450  312f							; 
   7451  312f
   7452  312f				   .
   7453  312f							; 
   7454  312f
   7455  312f				   .L0303		;  if _Frame_Counter then goto __Skip_First_Colors
   7456  312f
   7457  312f		       a5 d9		      LDA	_Frame_Counter
   7458  3131		       f0 03		      BEQ	.skipL0303
   7459  3133				   .condpart145
   7460  3133		       4c 49 51 	      jmp	.__Skip_First_Colors
   7461  3136
   7462  3136				   .skipL0303
   7463  3136				   .
   7464  3136							; 
   7465  3136
   7466  3136				   .
   7467  3136							; 
   7468  3136
   7469  3136				   .
   7470  3136							; 
   7471  3136
   7472  3136				   .
   7473  3136							; 
   7474  3136
   7475  3136				   .L0304		;  COLUBK  =  $44
   7476  3136
   7477  3136		       a9 44		      LDA	#$44
   7478  3138		       85 09		      STA	COLUBK
   7479  313a				   .
   7480  313a							; 
   7481  313a
   7482  313a				   .
   7483  313a							; 
   7484  313a
   7485  313a				   .
   7486  313a							; 
   7487  313a
   7488  313a				   .
   7489  313a							; 
   7490  313a
   7491  313a				   .L0305		;  pfcolors:
   7492  313a
   7493  313a		       a9 2e		      lda	# $2E
   7494  313c		       85 08		      sta	COLUPF
   7495  313e				  -	      ifconst	pfres
   7496  313e				  -	      lda	#>(pfcolorlabel13-130+pfres*pfwidth)
   7497  313e					      else
   7498  313e		       a9 f5		      lda	#>(pfcolorlabel13-82)
   7499  3140					      endif
   7500  3140		       85 f1		      sta	pfcolortable+1
   7501  3142				  -	      ifconst	pfres
   7502  3142				  -	      lda	#<(pfcolorlabel13-130+pfres*pfwidth)
   7503  3142					      else
   7504  3142		       a9 06		      lda	#<(pfcolorlabel13-82)
   7505  3144					      endif
   7506  3144		       85 f0		      sta	pfcolortable
   7507  3146				   .
   7508  3146							; 
   7509  3146
   7510  3146				   .L0306		;  goto __Skip_Second_Colors
   7511  3146
   7512  3146		       4c 59 51 	      jmp	.__Skip_Second_Colors
   7513  3149
   7514  3149				   .
   7515  3149							; 
   7516  3149
   7517  3149				   .__Skip_First_Colors
   7518  3149							; __Skip_First_Colors
   7519  3149
   7520  3149				   .
   7521  3149							; 
   7522  3149
   7523  3149				   .
   7524  3149							; 
   7525  3149
   7526  3149				   .
   7527  3149							; 
   7528  3149
   7529  3149				   .
   7530  3149							; 
   7531  3149
   7532  3149				   .L0307		;  COLUBK  =  $D2
   7533  3149
   7534  3149		       a9 d2		      LDA	#$D2
   7535  314b		       85 09		      STA	COLUBK
   7536  314d				   .
   7537  314d							; 
   7538  314d
   7539  314d				   .
   7540  314d							; 
   7541  314d
   7542  314d				   .
   7543  314d							; 
   7544  314d
   7545  314d				   .
   7546  314d							; 
   7547  314d
   7548  314d				   .L0308		;  pfcolors:
   7549  314d
   7550  314d		       a9 de		      lda	# $DE
   7551  314f		       85 08		      sta	COLUPF
   7552  3151				  -	      ifconst	pfres
   7553  3151				  -	      lda	#>(pfcolorlabel13-129+pfres*pfwidth)
   7554  3151					      else
   7555  3151		       a9 f5		      lda	#>(pfcolorlabel13-81)
   7556  3153					      endif
   7557  3153		       85 f1		      sta	pfcolortable+1
   7558  3155				  -	      ifconst	pfres
   7559  3155				  -	      lda	#<(pfcolorlabel13-129+pfres*pfwidth)
   7560  3155					      else
   7561  3155		       a9 07		      lda	#<(pfcolorlabel13-81)
   7562  3157					      endif
   7563  3157		       85 f0		      sta	pfcolortable
   7564  3159				   .
   7565  3159							; 
   7566  3159
   7567  3159				   .__Skip_Second_Colors
   7568  3159							; __Skip_Second_Colors
   7569  3159
   7570  3159				   .
   7571  3159							; 
   7572  3159
   7573  3159				   .
   7574  3159							; 
   7575  3159
   7576  3159				   .
   7577  3159							; 
   7578  3159
   7579  3159				   .
   7580  3159							; 
   7581  3159
   7582  3159				   .
   7583  3159							; 
   7584  3159
   7585  3159				   .
   7586  3159							; 
   7587  3159
   7588  3159				   .
   7589  3159							; 
   7590  3159
   7591  3159				   .L0309		;  drawscreen
   7592  3159
   7593  3159		       85 ee		      sta	temp7
   7594  315b		       a9 51		      lda	#>(ret_point22-1)
   7595  315d		       48		      pha
   7596  315e		       a9 70		      lda	#<(ret_point22-1)
   7597  3160		       48		      pha
   7598  3161		       a9 f4		      lda	#>(drawscreen-1)
   7599  3163		       48		      pha
   7600  3164		       a9 3b		      lda	#<(drawscreen-1)
   7601  3166		       48		      pha
   7602  3167		       a5 ee		      lda	temp7
   7603  3169		       48		      pha
   7604  316a		       8a		      txa
   7605  316b		       48		      pha
   7606  316c		       a2 08		      ldx	#8
   7607  316e		       4c eb ff 	      jmp	BS_jsr
   7608  3171				   ret_point22
   7609  3171				   .
   7610  3171							; 
   7611  3171
   7612  3171				   .
   7613  3171							; 
   7614  3171
   7615  3171				   .
   7616  3171							; 
   7617  3171
   7618  3171				   .
   7619  3171							; 
   7620  3171
   7621  3171				   .
   7622  3171							; 
   7623  3171
   7624  3171				   .
   7625  3171							; 
   7626  3171
   7627  3171				   .
   7628  3171							; 
   7629  3171
   7630  3171				   .
   7631  3171							; 
   7632  3171
   7633  3171				   .
   7634  3171							; 
   7635  3171
   7636  3171				   .
   7637  3171							; 
   7638  3171
   7639  3171				   .
   7640  3171							; 
   7641  3171
   7642  3171				   .
   7643  3171							; 
   7644  3171
   7645  3171				   .
   7646  3171							; 
   7647  3171
   7648  3171				   .
   7649  3171							; 
   7650  3171
   7651  3171				   .L0310		;  if _Frame_Counter  =  0 then goto __Game_Over_Loop
   7652  3171
   7653  3171		       a5 d9		      LDA	_Frame_Counter
   7654  3173		       c9 00		      CMP	#0
   7655  3175		       d0 03		      BNE	.skipL0310
   7656  3177				   .condpart146
   7657  3177		       4c ba 50 	      jmp	.__Game_Over_Loop
   7658  317a
   7659  317a				   .skipL0310
   7660  317a				   .
   7661  317a							; 
   7662  317a
   7663  317a				   .
   7664  317a							; 
   7665  317a
   7666  317a				   .
   7667  317a							; 
   7668  317a
   7669  317a				   .
   7670  317a							; 
   7671  317a
   7672  317a				   .
   7673  317a							; 
   7674  317a
   7675  317a				   .L0311		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Game_Over_Loop
   7676  317a
   7677  317a		       a9 01		      lda	#1
   7678  317c		       2c 82 02 	      bit	SWCHB
   7679  317f		       f0 0d		      BEQ	.skipL0311
   7680  3181				   .condpart147
   7681  3181		       24 0c		      bit	INPT4
   7682  3183		       10 09		      BPL	.skip147then
   7683  3185				   .condpart148
   7684  3185		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7685  3187		       29 fe		      AND	#254
   7686  3189		       85 ec		      STA	_Bit0_Reset_Restrainer
   7687  318b		       4c ba 50 	      jmp	.__Game_Over_Loop
   7688  318e
   7689  318e				   .skip147then
   7690  318e				   .skipL0311
   7691  318e				   .
   7692  318e							; 
   7693  318e
   7694  318e				   .
   7695  318e							; 
   7696  318e
   7697  318e				   .
   7698  318e							; 
   7699  318e
   7700  318e				   .
   7701  318e							; 
   7702  318e
   7703  318e				   .
   7704  318e							; 
   7705  318e
   7706  318e				   .L0312		;  if _Bit0_Reset_Restrainer{0} then goto __Game_Over_Loop
   7707  318e
   7708  318e		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7709  3190		       4a		      LSR
   7710  3191		       90 03		      BCC	.skipL0312
   7711  3193				   .condpart149
   7712  3193		       4c ba 50 	      jmp	.__Game_Over_Loop
   7713  3196
   7714  3196				   .skipL0312
   7715  3196				   .
   7716  3196							; 
   7717  3196
   7718  3196				   .
   7719  3196							; 
   7720  3196
   7721  3196				   .
   7722  3196							; 
   7723  3196
   7724  3196				   .
   7725  3196							; 
   7726  3196
   7727  3196				   .L0313		;  goto __Start_Restart bank1
   7728  3196
   7729  3196		       85 ee		      sta	temp7
   7730  3198		       a9 0f		      lda	#>(.__Start_Restart-1)
   7731  319a		       48		      pha
   7732  319b		       a9 ff		      lda	#<(.__Start_Restart-1)
   7733  319d		       48		      pha
   7734  319e		       a5 ee		      lda	temp7
   7735  31a0		       48		      pha
   7736  31a1		       8a		      txa
   7737  31a2		       48		      pha
   7738  31a3		       a2 01		      ldx	#1
   7739  31a5		       4c eb ff 	      jmp	BS_jsr
   7740  31a8				   .
   7741  31a8							; 
   7742  31a8
   7743  31a8				   .
   7744  31a8							; 
   7745  31a8
   7746  31a8				   .
   7747  31a8							; 
   7748  31a8
   7749  31a8				   .
   7750  31a8							; 
   7751  31a8
   7752  31a8				   .
   7753  31a8							; 
   7754  31a8
   7755  31a8				   .
   7756  31a8							; 
   7757  31a8
   7758  31a8				   .
   7759  31a8							; 
   7760  31a8
   7761  31a8				   .
   7762  31a8							; 
   7763  31a8
   7764  31a8				   .
   7765  31a8							; 
   7766  31a8
   7767  31a8				   .
   7768  31a8							; 
   7769  31a8
   7770  31a8				   .
   7771  31a8							; 
   7772  31a8
   7773  31a8				   .
   7774  31a8							; 
   7775  31a8
   7776  31a8				   .
   7777  31a8							; 
   7778  31a8
   7779  31a8				   .
   7780  31a8							; 
   7781  31a8
   7782  31a8				   .
   7783  31a8							; 
   7784  31a8
   7785  31a8				   .
   7786  31a8							; 
   7787  31a8
   7788  31a8				   .
   7789  31a8							; 
   7790  31a8
   7791  31a8				   .
   7792  31a8							; 
   7793  31a8
   7794  31a8				   .
   7795  31a8							; 
   7796  31a8
   7797  31a8				   .__Pause_Setup
   7798  31a8							; __Pause_Setup
   7799  31a8
   7800  31a8				   .
   7801  31a8							; 
   7802  31a8
   7803  31a8				   .
   7804  31a8							; 
   7805  31a8
   7806  31a8				   .
   7807  31a8							; 
   7808  31a8
   7809  31a8				   .
   7810  31a8							; 
   7811  31a8
   7812  31a8				   .
   7813  31a8							; 
   7814  31a8
   7815  31a8				   .
   7816  31a8							; 
   7817  31a8
   7818  31a8				   .L0314		;  AUDV0  =  0  :  AUDV1  =  0
   7819  31a8
   7820  31a8		       a9 00		      LDA	#0
   7821  31aa		       85 19		      STA	AUDV0
   7822  31ac		       85 1a		      STA	AUDV1
   7823  31ae				   .
   7824  31ae							; 
   7825  31ae
   7826  31ae				   .
   7827  31ae							; 
   7828  31ae
   7829  31ae				   .
   7830  31ae							; 
   7831  31ae
   7832  31ae				   .
   7833  31ae							; 
   7834  31ae
   7835  31ae				   .
   7836  31ae							; 
   7837  31ae
   7838  31ae				   .
   7839  31ae							; 
   7840  31ae
   7841  31ae				   .L0315		;  _Bit1_FireB_Restrainer{1}  =  1
   7842  31ae
   7843  31ae		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7844  31b0		       09 02		      ORA	#2
   7845  31b2		       85 ec		      STA	_Bit1_FireB_Restrainer
   7846  31b4				   .
   7847  31b4							; 
   7848  31b4
   7849  31b4				   .
   7850  31b4							; 
   7851  31b4
   7852  31b4				   .
   7853  31b4							; 
   7854  31b4
   7855  31b4				   .
   7856  31b4							; 
   7857  31b4
   7858  31b4				   .
   7859  31b4							; 
   7860  31b4
   7861  31b4				   .
   7862  31b4							; 
   7863  31b4
   7864  31b4				   .L0316		;  _Pause_Counter_Tmp	=  0
   7865  31b4
   7866  31b4		       a9 00		      LDA	#0
   7867  31b6		       85 db		      STA	_Pause_Counter_Tmp
   7868  31b8				   .
   7869  31b8							; 
   7870  31b8
   7871  31b8				   .
   7872  31b8							; 
   7873  31b8
   7874  31b8				   .
   7875  31b8							; 
   7876  31b8
   7877  31b8				   .
   7878  31b8							; 
   7879  31b8
   7880  31b8				   .
   7881  31b8							; 
   7882  31b8
   7883  31b8				   .
   7884  31b8							; 
   7885  31b8
   7886  31b8				   .L0317		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   7887  31b8
   7888  31b8							; complex statement detected
   7889  31b8		       a5 a2		      lda	rand
   7890  31ba		       4a		      lsr
   7891  31bb					      ifconst	rand16
   7892  31bb		       26 ed		      rol	rand16
   7893  31bd					      endif
   7894  31bd		       90 02		      bcc	*+4
   7895  31bf		       49 b4		      eor	#$B4
   7896  31c1		       85 a2		      sta	rand
   7897  31c3					      ifconst	rand16
   7898  31c3		       45 ed		      eor	rand16
   7899  31c5					      endif
   7900  31c5		       29 07		      AND	#7
   7901  31c7		       85 df		      STA	_Pause_Color_Tmp
   7902  31c9				   .
   7903  31c9							; 
   7904  31c9
   7905  31c9				   .L0318		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   7906  31c9
   7907  31c9		       a5 df		      LDA	_Pause_Color_Tmp
   7908  31cb		       85 de		      STA	_Pause_Mem_Color_Tmp
   7909  31cd				   .
   7910  31cd							; 
   7911  31cd
   7912  31cd				   .
   7913  31cd							; 
   7914  31cd
   7915  31cd				   .
   7916  31cd							; 
   7917  31cd
   7918  31cd				   .
   7919  31cd							; 
   7920  31cd
   7921  31cd				   .
   7922  31cd							; 
   7923  31cd
   7924  31cd				   .
   7925  31cd							; 
   7926  31cd
   7927  31cd				   .
   7928  31cd							; 
   7929  31cd
   7930  31cd				   .
   7931  31cd							; 
   7932  31cd
   7933  31cd				   .
   7934  31cd							; 
   7935  31cd
   7936  31cd				   .
   7937  31cd							; 
   7938  31cd
   7939  31cd				   .__Pause_Game
   7940  31cd							; __Pause_Game
   7941  31cd
   7942  31cd				   .
   7943  31cd							; 
   7944  31cd
   7945  31cd				   .
   7946  31cd							; 
   7947  31cd
   7948  31cd				   .
   7949  31cd							; 
   7950  31cd
   7951  31cd				   .
   7952  31cd							; 
   7953  31cd
   7954  31cd				   .
   7955  31cd							; 
   7956  31cd
   7957  31cd				   .
   7958  31cd							; 
   7959  31cd
   7960  31cd				   .
   7961  31cd							; 
   7962  31cd
   7963  31cd				   .L0319		;  NUSIZ1  =  $10
   7964  31cd
   7965  31cd		       a9 10		      LDA	#$10
   7966  31cf		       85 05		      STA	NUSIZ1
   7967  31d1				   .
   7968  31d1							; 
   7969  31d1
   7970  31d1				   .
   7971  31d1							; 
   7972  31d1
   7973  31d1				   .
   7974  31d1							; 
   7975  31d1
   7976  31d1				   .
   7977  31d1							; 
   7978  31d1
   7979  31d1				   .
   7980  31d1							; 
   7981  31d1
   7982  31d1				   .
   7983  31d1							; 
   7984  31d1
   7985  31d1				   .
   7986  31d1							; 
   7987  31d1
   7988  31d1				   .
   7989  31d1							; 
   7990  31d1
   7991  31d1				   .
   7992  31d1							; 
   7993  31d1
   7994  31d1				   .
   7995  31d1							; 
   7996  31d1
   7997  31d1				   .L0320		;  _Pause_Counter_Tmp	=  _Pause_Counter_Tmp  +  1
   7998  31d1
   7999  31d1		       e6 db		      INC	_Pause_Counter_Tmp
   8000  31d3				   .
   8001  31d3							; 
   8002  31d3
   8003  31d3				   .
   8004  31d3							; 
   8005  31d3
   8006  31d3				   .
   8007  31d3							; 
   8008  31d3
   8009  31d3				   .
   8010  31d3							; 
   8011  31d3
   8012  31d3				   .L0321		;  if _Pause_Counter_Tmp  <  240 then goto __Skip_Pause_Counter
   8013  31d3
   8014  31d3		       a5 db		      LDA	_Pause_Counter_Tmp
   8015  31d5		       c9 f0		      CMP	#240
   8016  31d7		       b0 03		      BCS	.skipL0321
   8017  31d9				   .condpart150
   8018  31d9		       4c 46 52 	      jmp	.__Skip_Pause_Counter
   8019  31dc
   8020  31dc				   .skipL0321
   8021  31dc				   .
   8022  31dc							; 
   8023  31dc
   8024  31dc				   .
   8025  31dc							; 
   8026  31dc
   8027  31dc				   .
   8028  31dc							; 
   8029  31dc
   8030  31dc				   .
   8031  31dc							; 
   8032  31dc
   8033  31dc				   .L0322		;  _Pause_Counter_Tmp	=  0
   8034  31dc
   8035  31dc		       a9 00		      LDA	#0
   8036  31de		       85 db		      STA	_Pause_Counter_Tmp
   8037  31e0				   .
   8038  31e0							; 
   8039  31e0
   8040  31e0				   .
   8041  31e0							; 
   8042  31e0
   8043  31e0				   .
   8044  31e0							; 
   8045  31e0
   8046  31e0				   .
   8047  31e0							; 
   8048  31e0
   8049  31e0				   .L0323		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   8050  31e0
   8051  31e0							; complex statement detected
   8052  31e0		       a5 a2		      lda	rand
   8053  31e2		       4a		      lsr
   8054  31e3					      ifconst	rand16
   8055  31e3		       26 ed		      rol	rand16
   8056  31e5					      endif
   8057  31e5		       90 02		      bcc	*+4
   8058  31e7		       49 b4		      eor	#$B4
   8059  31e9		       85 a2		      sta	rand
   8060  31eb					      ifconst	rand16
   8061  31eb		       45 ed		      eor	rand16
   8062  31ed					      endif
   8063  31ed		       29 07		      AND	#7
   8064  31ef		       85 df		      STA	_Pause_Color_Tmp
   8065  31f1				   .
   8066  31f1							; 
   8067  31f1
   8068  31f1				   .
   8069  31f1							; 
   8070  31f1
   8071  31f1				   .
   8072  31f1							; 
   8073  31f1
   8074  31f1				   .
   8075  31f1							; 
   8076  31f1
   8077  31f1				   .
   8078  31f1							; 
   8079  31f1
   8080  31f1				   .L0324		;  if _Pause_Color_Tmp  =  _Pause_Mem_Color_Tmp then _Pause_Color_Tmp	=  _Pause_Color_Tmp  +	 ( rand & 3 )	+  1  :  if _Pause_Color_Tmp  >  7 then _Pause_Color_Tmp  =  _Pause_Color_Tmp  -  8
   8081  31f1
   8082  31f1		       a5 df		      LDA	_Pause_Color_Tmp
   8083  31f3		       c5 de		      CMP	_Pause_Mem_Color_Tmp
   8084  31f5		       d0 2a		      BNE	.skipL0324
   8085  31f7				   .condpart151
   8086  31f7							; complex statement detected
   8087  31f7		       a5 df		      LDA	_Pause_Color_Tmp
   8088  31f9		       48		      PHA
   8089  31fa		       a5 a2		      lda	rand
   8090  31fc		       4a		      lsr
   8091  31fd					      ifconst	rand16
   8092  31fd		       26 ed		      rol	rand16
   8093  31ff					      endif
   8094  31ff		       90 02		      bcc	*+4
   8095  3201		       49 b4		      eor	#$B4
   8096  3203		       85 a2		      sta	rand
   8097  3205					      ifconst	rand16
   8098  3205		       45 ed		      eor	rand16
   8099  3207					      endif
   8100  3207		       29 03		      AND	#3
   8101  3209		       ba		      TSX
   8102  320a		       e8		      INX
   8103  320b		       9a		      TXS
   8104  320c		       18		      CLC
   8105  320d		       75 00		      ADC	$00,x
   8106  320f		       18		      CLC
   8107  3210		       69 01		      ADC	#1
   8108  3212		       85 df		      STA	_Pause_Color_Tmp
   8109  3214		       a9 07		      LDA	#7
   8110  3216		       c5 df		      CMP	_Pause_Color_Tmp
   8111  3218		       b0 07		      BCS	.skip151then
   8112  321a				   .condpart152
   8113  321a		       a5 df		      LDA	_Pause_Color_Tmp
   8114  321c		       38		      SEC
   8115  321d		       e9 08		      SBC	#8
   8116  321f		       85 df		      STA	_Pause_Color_Tmp
   8117  3221				   .skip151then
   8118  3221				   .skipL0324
   8119  3221				   .
   8120  3221							; 
   8121  3221
   8122  3221				   .
   8123  3221							; 
   8124  3221
   8125  3221				   .
   8126  3221							; 
   8127  3221
   8128  3221				   .
   8129  3221							; 
   8130  3221
   8131  3221				   .L0325		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   8132  3221
   8133  3221		       a5 df		      LDA	_Pause_Color_Tmp
   8134  3223		       85 de		      STA	_Pause_Mem_Color_Tmp
   8135  3225				   .
   8136  3225							; 
   8137  3225
   8138  3225				   .
   8139  3225							; 
   8140  3225
   8141  3225				   .
   8142  3225							; 
   8143  3225
   8144  3225				   .
   8145  3225							; 
   8146  3225
   8147  3225				   .L0326		;  _Bit2_Pause_Clr_Scheme{2}  =  0
   8148  3225
   8149  3225		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8150  3227		       29 fb		      AND	#251
   8151  3229		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   8152  322b				   .
   8153  322b							; 
   8154  322b
   8155  322b				   .L0327		;  temp5  =  rand  :  if temp5  <  128 then _Bit2_Pause_Clr_Scheme{2}	=  1
   8156  322b
   8157  322b		       a5 a2		      lda	rand
   8158  322d		       4a		      lsr
   8159  322e					      ifconst	rand16
   8160  322e		       26 ed		      rol	rand16
   8161  3230					      endif
   8162  3230		       90 02		      bcc	*+4
   8163  3232		       49 b4		      eor	#$B4
   8164  3234		       85 a2		      sta	rand
   8165  3236					      ifconst	rand16
   8166  3236		       45 ed		      eor	rand16
   8167  3238					      endif
   8168  3238		       85 a0		      STA	temp5
   8169  323a		       a5 a0		      LDA	temp5
   8170  323c		       c9 80		      CMP	#128
   8171  323e		       b0 06		      BCS	.skipL0327
   8172  3240				   .condpart153
   8173  3240		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8174  3242		       09 04		      ORA	#4
   8175  3244		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   8176  3246				   .skipL0327
   8177  3246				   .
   8178  3246							; 
   8179  3246
   8180  3246				   .__Skip_Pause_Counter
   8181  3246							; __Skip_Pause_Counter
   8182  3246
   8183  3246				   .
   8184  3246							; 
   8185  3246
   8186  3246				   .
   8187  3246							; 
   8188  3246
   8189  3246				   .
   8190  3246							; 
   8191  3246
   8192  3246				   .
   8193  3246							; 
   8194  3246
   8195  3246				   .
   8196  3246							; 
   8197  3246
   8198  3246				   .
   8199  3246							; 
   8200  3246
   8201  3246				   .
   8202  3246							; 
   8203  3246
   8204  3246				   .L0328		;  on _Pause_Color_Tmp goto __Ps0 __Ps1 __Ps2 __Ps3 __Ps4 __Ps5 __Ps6 __Ps7
   8205  3246
   8206  3246		       a6 df		      LDX	_Pause_Color_Tmp
   8207  3248		       bd 51 52 	      LDA	.L0328jumptablehi,x
   8208  324b		       48		      PHA
   8209  324c		       bd 59 52 	      LDA	.L0328jumptablelo,x
   8210  324f		       48		      PHA
   8211  3250		       60		      RTS
   8212  3251				   .L0328jumptablehi
   8213  3251		       52		      .byte.b	>(.__Ps0-1)
   8214  3252		       53		      .byte.b	>(.__Ps1-1)
   8215  3253		       53		      .byte.b	>(.__Ps2-1)
   8216  3254		       53		      .byte.b	>(.__Ps3-1)
   8217  3255		       53		      .byte.b	>(.__Ps4-1)
   8218  3256		       54		      .byte.b	>(.__Ps5-1)
   8219  3257		       54		      .byte.b	>(.__Ps6-1)
   8220  3258		       54		      .byte.b	>(.__Ps7-1)
   8221  3259				   .L0328jumptablelo
   8222  3259		       bd		      .byte.b	<(.__Ps0-1)
   8223  325a		       00		      .byte.b	<(.__Ps1-1)
   8224  325b		       43		      .byte.b	<(.__Ps2-1)
   8225  325c		       86		      .byte.b	<(.__Ps3-1)
   8226  325d		       c9		      .byte.b	<(.__Ps4-1)
   8227  325e		       0c		      .byte.b	<(.__Ps5-1)
   8228  325f		       4f		      .byte.b	<(.__Ps6-1)
   8229  3260		       92		      .byte.b	<(.__Ps7-1)
   8230  3261				   .
   8231  3261							; 
   8232  3261
   8233  3261				   .__Got_Pause_Colors
   8234  3261							; __Got_Pause_Colors
   8235  3261
   8236  3261				   .
   8237  3261							; 
   8238  3261
   8239  3261				   .
   8240  3261							; 
   8241  3261
   8242  3261				   .
   8243  3261							; 
   8244  3261
   8245  3261				   .
   8246  3261							; 
   8247  3261
   8248  3261				   .
   8249  3261							; 
   8250  3261
   8251  3261				   .
   8252  3261							; 
   8253  3261
   8254  3261				   .
   8255  3261							; 
   8256  3261
   8257  3261				   .L0329		;  drawscreen
   8258  3261
   8259  3261		       85 ee		      sta	temp7
   8260  3263		       a9 52		      lda	#>(ret_point23-1)
   8261  3265		       48		      pha
   8262  3266		       a9 78		      lda	#<(ret_point23-1)
   8263  3268		       48		      pha
   8264  3269		       a9 f4		      lda	#>(drawscreen-1)
   8265  326b		       48		      pha
   8266  326c		       a9 3b		      lda	#<(drawscreen-1)
   8267  326e		       48		      pha
   8268  326f		       a5 ee		      lda	temp7
   8269  3271		       48		      pha
   8270  3272		       8a		      txa
   8271  3273		       48		      pha
   8272  3274		       a2 08		      ldx	#8
   8273  3276		       4c eb ff 	      jmp	BS_jsr
   8274  3279				   ret_point23
   8275  3279				   .
   8276  3279							; 
   8277  3279
   8278  3279				   .
   8279  3279							; 
   8280  3279
   8281  3279				   .
   8282  3279							; 
   8283  3279
   8284  3279				   .
   8285  3279							; 
   8286  3279
   8287  3279				   .
   8288  3279							; 
   8289  3279
   8290  3279				   .
   8291  3279							; 
   8292  3279
   8293  3279				   .
   8294  3279							; 
   8295  3279
   8296  3279				   .
   8297  3279							; 
   8298  3279
   8299  3279				   .
   8300  3279							; 
   8301  3279
   8302  3279				   .
   8303  3279							; 
   8304  3279
   8305  3279				   .
   8306  3279							; 
   8307  3279
   8308  3279				   .L0330		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Pause_Game
   8309  3279
   8310  3279		       24 0c		      bit	INPT4
   8311  327b		       10 09		      BPL	.skipL0330
   8312  327d				   .condpart154
   8313  327d		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   8314  327f		       29 fd		      AND	#253
   8315  3281		       85 ec		      STA	_Bit1_FireB_Restrainer
   8316  3283		       4c cd 51 	      jmp	.__Pause_Game
   8317  3286
   8318  3286				   .skipL0330
   8319  3286				   .
   8320  3286							; 
   8321  3286
   8322  3286				   .
   8323  3286							; 
   8324  3286
   8325  3286				   .
   8326  3286							; 
   8327  3286
   8328  3286				   .
   8329  3286							; 
   8330  3286
   8331  3286				   .
   8332  3286							; 
   8333  3286
   8334  3286				   .L0331		;  if _Bit1_FireB_Restrainer{1} then goto __Pause_Game
   8335  3286
   8336  3286		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   8337  3288		       29 02		      AND	#2
   8338  328a		       f0 03		      BEQ	.skipL0331
   8339  328c				   .condpart155
   8340  328c		       4c cd 51 	      jmp	.__Pause_Game
   8341  328f
   8342  328f				   .skipL0331
   8343  328f				   .
   8344  328f							; 
   8345  328f
   8346  328f				   .
   8347  328f							; 
   8348  328f
   8349  328f				   .
   8350  328f							; 
   8351  328f
   8352  328f				   .
   8353  328f							; 
   8354  328f
   8355  328f				   .L0332		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   8356  328f
   8357  328f		       a5 e5		      LDA	_Bit0_BW_Mem
   8358  3291		       29 fe		      AND	#254
   8359  3293		       85 e5		      STA	_Bit0_BW_Mem
   8360  3295		       a9 08		      lda	#8
   8361  3297		       2c 82 02 	      bit	SWCHB
   8362  329a		       d0 06		      BNE	.skipL0332
   8363  329c				   .condpart156
   8364  329c		       a5 e5		      LDA	_Bit0_BW_Mem
   8365  329e		       09 01		      ORA	#1
   8366  32a0		       85 e5		      STA	_Bit0_BW_Mem
   8367  32a2				   .skipL0332
   8368  32a2				   .
   8369  32a2							; 
   8370  32a2
   8371  32a2				   .
   8372  32a2							; 
   8373  32a2
   8374  32a2				   .
   8375  32a2							; 
   8376  32a2
   8377  32a2				   .
   8378  32a2							; 
   8379  32a2
   8380  32a2				   .
   8381  32a2							; 
   8382  32a2
   8383  32a2				   .
   8384  32a2							; 
   8385  32a2
   8386  32a2				   .
   8387  32a2							; 
   8388  32a2
   8389  32a2				   .
   8390  32a2							; 
   8391  32a2
   8392  32a2				   .
   8393  32a2							; 
   8394  32a2
   8395  32a2				   .
   8396  32a2							; 
   8397  32a2
   8398  32a2				   .
   8399  32a2							; 
   8400  32a2
   8401  32a2				   .
   8402  32a2							; 
   8403  32a2
   8404  32a2				   .
   8405  32a2							; 
   8406  32a2
   8407  32a2				   .
   8408  32a2							; 
   8409  32a2
   8410  32a2				   .
   8411  32a2							; 
   8412  32a2
   8413  32a2				   .
   8414  32a2							; 
   8415  32a2
   8416  32a2				   .
   8417  32a2							; 
   8418  32a2
   8419  32a2				   .
   8420  32a2							; 
   8421  32a2
   8422  32a2				   .
   8423  32a2							; 
   8424  32a2
   8425  32a2				   .
   8426  32a2							; 
   8427  32a2
   8428  32a2				   .
   8429  32a2							; 
   8430  32a2
   8431  32a2				   .
   8432  32a2							; 
   8433  32a2
   8434  32a2				   .
   8435  32a2							; 
   8436  32a2
   8437  32a2				   .
   8438  32a2							; 
   8439  32a2
   8440  32a2				   .__Restore_Game_from_Pause
   8441  32a2							; __Restore_Game_from_Pause
   8442  32a2
   8443  32a2				   .
   8444  32a2							; 
   8445  32a2
   8446  32a2				   .
   8447  32a2							; 
   8448  32a2
   8449  32a2				   .
   8450  32a2							; 
   8451  32a2
   8452  32a2				   .
   8453  32a2							; 
   8454  32a2
   8455  32a2				   .
   8456  32a2							; 
   8457  32a2
   8458  32a2				   .
   8459  32a2							; 
   8460  32a2
   8461  32a2				   .L0333		;  _Bit1_FireB_Restrainer{1}  =  1
   8462  32a2
   8463  32a2		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   8464  32a4		       09 02		      ORA	#2
   8465  32a6		       85 ec		      STA	_Bit1_FireB_Restrainer
   8466  32a8				   .
   8467  32a8							; 
   8468  32a8
   8469  32a8				   .
   8470  32a8							; 
   8471  32a8
   8472  32a8				   .
   8473  32a8							; 
   8474  32a8
   8475  32a8				   .
   8476  32a8							; 
   8477  32a8
   8478  32a8				   .
   8479  32a8							; 
   8480  32a8
   8481  32a8				   .
   8482  32a8							; 
   8483  32a8
   8484  32a8				   .L0334		;  scorecolor	=  $1C
   8485  32a8
   8486  32a8		       a9 1c		      LDA	#$1C
   8487  32aa		       85 a3		      STA	scorecolor
   8488  32ac				   .
   8489  32ac							; 
   8490  32ac
   8491  32ac				   .
   8492  32ac							; 
   8493  32ac
   8494  32ac				   .L0335		;  goto __Main_Loop bank2
   8495  32ac
   8496  32ac		       85 ee		      sta	temp7
   8497  32ae		       a9 31		      lda	#>(.__Main_Loop-1)
   8498  32b0		       48		      pha
   8499  32b1		       a9 48		      lda	#<(.__Main_Loop-1)
   8500  32b3		       48		      pha
   8501  32b4		       a5 ee		      lda	temp7
   8502  32b6		       48		      pha
   8503  32b7		       8a		      txa
   8504  32b8		       48		      pha
   8505  32b9		       a2 02		      ldx	#2
   8506  32bb		       4c eb ff 	      jmp	BS_jsr
   8507  32be				   .
   8508  32be							; 
   8509  32be
   8510  32be				   .
   8511  32be							; 
   8512  32be
   8513  32be				   .
   8514  32be							; 
   8515  32be
   8516  32be				   .
   8517  32be							; 
   8518  32be
   8519  32be				   .
   8520  32be							; 
   8521  32be
   8522  32be				   .
   8523  32be							; 
   8524  32be
   8525  32be				   .
   8526  32be							; 
   8527  32be
   8528  32be				   .
   8529  32be							; 
   8530  32be
   8531  32be				   .
   8532  32be							; 
   8533  32be
   8534  32be				   .__Ps0
   8535  32be							; __Ps0
   8536  32be
   8537  32be				   .
   8538  32be							; 
   8539  32be
   8540  32be				   .L0336		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps0B
   8541  32be
   8542  32be		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8543  32c0		       29 04		      AND	#4
   8544  32c2		       f0 03		      BEQ	.skipL0336
   8545  32c4				   .condpart157
   8546  32c4		       4c e4 52 	      jmp	.__Ps0B
   8547  32c7
   8548  32c7				   .skipL0336
   8549  32c7				   .
   8550  32c7							; 
   8551  32c7
   8552  32c7				   .L0337		;  pfcolors:
   8553  32c7
   8554  32c7		       a9 0c		      lda	# $0C
   8555  32c9		       85 08		      sta	COLUPF
   8556  32cb				  -	      ifconst	pfres
   8557  32cb				  -	      lda	#>(pfcolorlabel195-132+pfres*pfwidth)
   8558  32cb					      else
   8559  32cb		       a9 f6		      lda	#>(pfcolorlabel195-84)
   8560  32cd					      endif
   8561  32cd		       85 f1		      sta	pfcolortable+1
   8562  32cf				  -	      ifconst	pfres
   8563  32cf				  -	      lda	#<(pfcolorlabel195-132+pfres*pfwidth)
   8564  32cf					      else
   8565  32cf		       a9 04		      lda	#<(pfcolorlabel195-84)
   8566  32d1					      endif
   8567  32d1		       85 f0		      sta	pfcolortable
   8568  32d3				   .
   8569  32d3							; 
   8570  32d3
   8571  32d3				   .L0338		;  COLUP0  =  $0C  :  COLUP1  =  $0C
   8572  32d3
   8573  32d3		       a9 0c		      LDA	#$0C
   8574  32d5		       85 06		      STA	COLUP0
   8575  32d7		       85 07		      STA	COLUP1
   8576  32d9				   .
   8577  32d9							; 
   8578  32d9
   8579  32d9				   .L0339		;  COLUBK  =  $0A
   8580  32d9
   8581  32d9		       a9 0a		      LDA	#$0A
   8582  32db		       85 09		      STA	COLUBK
   8583  32dd				   .
   8584  32dd							; 
   8585  32dd
   8586  32dd				   .L0340		;  scorecolor	=  $0C
   8587  32dd
   8588  32dd		       a9 0c		      LDA	#$0C
   8589  32df		       85 a3		      STA	scorecolor
   8590  32e1				   .
   8591  32e1							; 
   8592  32e1
   8593  32e1				   .L0341		;  goto __Got_Pause_Colors
   8594  32e1
   8595  32e1		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8596  32e4
   8597  32e4				   .
   8598  32e4							; 
   8599  32e4
   8600  32e4				   .
   8601  32e4							; 
   8602  32e4
   8603  32e4				   .
   8604  32e4							; 
   8605  32e4
   8606  32e4				   .
   8607  32e4							; 
   8608  32e4
   8609  32e4				   .
   8610  32e4							; 
   8611  32e4
   8612  32e4				   .
   8613  32e4							; 
   8614  32e4
   8615  32e4				   .
   8616  32e4							; 
   8617  32e4
   8618  32e4				   .__Ps0B
   8619  32e4							; __Ps0B
   8620  32e4
   8621  32e4				   .
   8622  32e4							; 
   8623  32e4
   8624  32e4				   .L0342		;  pfcolors:
   8625  32e4
   8626  32e4		       a9 0a		      lda	# $0A
   8627  32e6		       85 08		      sta	COLUPF
   8628  32e8				  -	      ifconst	pfres
   8629  32e8				  -	      lda	#>(pfcolorlabel195-131+pfres*pfwidth)
   8630  32e8					      else
   8631  32e8		       a9 f6		      lda	#>(pfcolorlabel195-83)
   8632  32ea					      endif
   8633  32ea		       85 f1		      sta	pfcolortable+1
   8634  32ec				  -	      ifconst	pfres
   8635  32ec				  -	      lda	#<(pfcolorlabel195-131+pfres*pfwidth)
   8636  32ec					      else
   8637  32ec		       a9 05		      lda	#<(pfcolorlabel195-83)
   8638  32ee					      endif
   8639  32ee		       85 f0		      sta	pfcolortable
   8640  32f0				   .
   8641  32f0							; 
   8642  32f0
   8643  32f0				   .L0343		;  COLUP0  =  $0A  :  COLUP1  =  $0A
   8644  32f0
   8645  32f0		       a9 0a		      LDA	#$0A
   8646  32f2		       85 06		      STA	COLUP0
   8647  32f4		       85 07		      STA	COLUP1
   8648  32f6				   .
   8649  32f6							; 
   8650  32f6
   8651  32f6				   .L0344		;  COLUBK  =  $0C
   8652  32f6
   8653  32f6		       a9 0c		      LDA	#$0C
   8654  32f8		       85 09		      STA	COLUBK
   8655  32fa				   .
   8656  32fa							; 
   8657  32fa
   8658  32fa				   .L0345		;  scorecolor	=  $0A
   8659  32fa
   8660  32fa		       a9 0a		      LDA	#$0A
   8661  32fc		       85 a3		      STA	scorecolor
   8662  32fe				   .
   8663  32fe							; 
   8664  32fe
   8665  32fe				   .L0346		;  goto __Got_Pause_Colors
   8666  32fe
   8667  32fe		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8668  3301
   8669  3301				   .
   8670  3301							; 
   8671  3301
   8672  3301				   .
   8673  3301							; 
   8674  3301
   8675  3301				   .
   8676  3301							; 
   8677  3301
   8678  3301				   .
   8679  3301							; 
   8680  3301
   8681  3301				   .
   8682  3301							; 
   8683  3301
   8684  3301				   .
   8685  3301							; 
   8686  3301
   8687  3301				   .
   8688  3301							; 
   8689  3301
   8690  3301				   .__Ps1
   8691  3301							; __Ps1
   8692  3301
   8693  3301				   .
   8694  3301							; 
   8695  3301
   8696  3301				   .L0347		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps1B
   8697  3301
   8698  3301		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8699  3303		       29 04		      AND	#4
   8700  3305		       f0 03		      BEQ	.skipL0347
   8701  3307				   .condpart158
   8702  3307		       4c 27 53 	      jmp	.__Ps1B
   8703  330a
   8704  330a				   .skipL0347
   8705  330a				   .
   8706  330a							; 
   8707  330a
   8708  330a				   .L0348		;  pfcolors:
   8709  330a
   8710  330a		       a9 3c		      lda	# $3C
   8711  330c		       85 08		      sta	COLUPF
   8712  330e				  -	      ifconst	pfres
   8713  330e				  -	      lda	#>(pfcolorlabel195-130+pfres*pfwidth)
   8714  330e					      else
   8715  330e		       a9 f6		      lda	#>(pfcolorlabel195-82)
   8716  3310					      endif
   8717  3310		       85 f1		      sta	pfcolortable+1
   8718  3312				  -	      ifconst	pfres
   8719  3312				  -	      lda	#<(pfcolorlabel195-130+pfres*pfwidth)
   8720  3312					      else
   8721  3312		       a9 06		      lda	#<(pfcolorlabel195-82)
   8722  3314					      endif
   8723  3314		       85 f0		      sta	pfcolortable
   8724  3316				   .
   8725  3316							; 
   8726  3316
   8727  3316				   .L0349		;  COLUP0  =  $3C  :  COLUP1  =  $3C
   8728  3316
   8729  3316		       a9 3c		      LDA	#$3C
   8730  3318		       85 06		      STA	COLUP0
   8731  331a		       85 07		      STA	COLUP1
   8732  331c				   .
   8733  331c							; 
   8734  331c
   8735  331c				   .L0350		;  COLUBK  =  $3A
   8736  331c
   8737  331c		       a9 3a		      LDA	#$3A
   8738  331e		       85 09		      STA	COLUBK
   8739  3320				   .
   8740  3320							; 
   8741  3320
   8742  3320				   .L0351		;  scorecolor	=  $3C
   8743  3320
   8744  3320		       a9 3c		      LDA	#$3C
   8745  3322		       85 a3		      STA	scorecolor
   8746  3324				   .
   8747  3324							; 
   8748  3324
   8749  3324				   .L0352		;  goto __Got_Pause_Colors
   8750  3324
   8751  3324		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8752  3327
   8753  3327				   .
   8754  3327							; 
   8755  3327
   8756  3327				   .
   8757  3327							; 
   8758  3327
   8759  3327				   .
   8760  3327							; 
   8761  3327
   8762  3327				   .
   8763  3327							; 
   8764  3327
   8765  3327				   .
   8766  3327							; 
   8767  3327
   8768  3327				   .
   8769  3327							; 
   8770  3327
   8771  3327				   .
   8772  3327							; 
   8773  3327
   8774  3327				   .__Ps1B
   8775  3327							; __Ps1B
   8776  3327
   8777  3327				   .
   8778  3327							; 
   8779  3327
   8780  3327				   .L0353		;  pfcolors:
   8781  3327
   8782  3327		       a9 3a		      lda	# $3A
   8783  3329		       85 08		      sta	COLUPF
   8784  332b				  -	      ifconst	pfres
   8785  332b				  -	      lda	#>(pfcolorlabel195-129+pfres*pfwidth)
   8786  332b					      else
   8787  332b		       a9 f6		      lda	#>(pfcolorlabel195-81)
   8788  332d					      endif
   8789  332d		       85 f1		      sta	pfcolortable+1
   8790  332f				  -	      ifconst	pfres
   8791  332f				  -	      lda	#<(pfcolorlabel195-129+pfres*pfwidth)
   8792  332f					      else
   8793  332f		       a9 07		      lda	#<(pfcolorlabel195-81)
   8794  3331					      endif
   8795  3331		       85 f0		      sta	pfcolortable
   8796  3333				   .
   8797  3333							; 
   8798  3333
   8799  3333				   .L0354		;  COLUP0  =  $3A  :  COLUP1  =  $3A
   8800  3333
   8801  3333		       a9 3a		      LDA	#$3A
   8802  3335		       85 06		      STA	COLUP0
   8803  3337		       85 07		      STA	COLUP1
   8804  3339				   .
   8805  3339							; 
   8806  3339
   8807  3339				   .L0355		;  COLUBK  =  $3C
   8808  3339
   8809  3339		       a9 3c		      LDA	#$3C
   8810  333b		       85 09		      STA	COLUBK
   8811  333d				   .
   8812  333d							; 
   8813  333d
   8814  333d				   .L0356		;  scorecolor	=  $3A
   8815  333d
   8816  333d		       a9 3a		      LDA	#$3A
   8817  333f		       85 a3		      STA	scorecolor
   8818  3341				   .
   8819  3341							; 
   8820  3341
   8821  3341				   .L0357		;  goto __Got_Pause_Colors
   8822  3341
   8823  3341		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8824  3344
   8825  3344				   .
   8826  3344							; 
   8827  3344
   8828  3344				   .
   8829  3344							; 
   8830  3344
   8831  3344				   .
   8832  3344							; 
   8833  3344
   8834  3344				   .
   8835  3344							; 
   8836  3344
   8837  3344				   .
   8838  3344							; 
   8839  3344
   8840  3344				   .
   8841  3344							; 
   8842  3344
   8843  3344				   .
   8844  3344							; 
   8845  3344
   8846  3344				   .__Ps2
   8847  3344							; __Ps2
   8848  3344
   8849  3344				   .
   8850  3344							; 
   8851  3344
   8852  3344				   .L0358		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps2B
   8853  3344
   8854  3344		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8855  3346		       29 04		      AND	#4
   8856  3348		       f0 03		      BEQ	.skipL0358
   8857  334a				   .condpart159
   8858  334a		       4c 6a 53 	      jmp	.__Ps2B
   8859  334d
   8860  334d				   .skipL0358
   8861  334d				   .
   8862  334d							; 
   8863  334d
   8864  334d				   .L0359		;  pfcolors:
   8865  334d
   8866  334d		       a9 6c		      lda	# $6C
   8867  334f		       85 08		      sta	COLUPF
   8868  3351				  -	      ifconst	pfres
   8869  3351				  -	      lda	#>(pfcolorlabel220-132+pfres*pfwidth)
   8870  3351					      else
   8871  3351		       a9 f6		      lda	#>(pfcolorlabel220-84)
   8872  3353					      endif
   8873  3353		       85 f1		      sta	pfcolortable+1
   8874  3355				  -	      ifconst	pfres
   8875  3355				  -	      lda	#<(pfcolorlabel220-132+pfres*pfwidth)
   8876  3355					      else
   8877  3355		       a9 30		      lda	#<(pfcolorlabel220-84)
   8878  3357					      endif
   8879  3357		       85 f0		      sta	pfcolortable
   8880  3359				   .
   8881  3359							; 
   8882  3359
   8883  3359				   .L0360		;  COLUP0  =  $6C  :  COLUP1  =  $6C
   8884  3359
   8885  3359		       a9 6c		      LDA	#$6C
   8886  335b		       85 06		      STA	COLUP0
   8887  335d		       85 07		      STA	COLUP1
   8888  335f				   .
   8889  335f							; 
   8890  335f
   8891  335f				   .L0361		;  COLUBK  =  $6A
   8892  335f
   8893  335f		       a9 6a		      LDA	#$6A
   8894  3361		       85 09		      STA	COLUBK
   8895  3363				   .
   8896  3363							; 
   8897  3363
   8898  3363				   .L0362		;  scorecolor	=  $6C
   8899  3363
   8900  3363		       a9 6c		      LDA	#$6C
   8901  3365		       85 a3		      STA	scorecolor
   8902  3367				   .
   8903  3367							; 
   8904  3367
   8905  3367				   .L0363		;  goto __Got_Pause_Colors
   8906  3367
   8907  3367		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8908  336a
   8909  336a				   .
   8910  336a							; 
   8911  336a
   8912  336a				   .
   8913  336a							; 
   8914  336a
   8915  336a				   .
   8916  336a							; 
   8917  336a
   8918  336a				   .
   8919  336a							; 
   8920  336a
   8921  336a				   .
   8922  336a							; 
   8923  336a
   8924  336a				   .
   8925  336a							; 
   8926  336a
   8927  336a				   .
   8928  336a							; 
   8929  336a
   8930  336a				   .__Ps2B
   8931  336a							; __Ps2B
   8932  336a
   8933  336a				   .
   8934  336a							; 
   8935  336a
   8936  336a				   .L0364		;  pfcolors:
   8937  336a
   8938  336a		       a9 6a		      lda	# $6A
   8939  336c		       85 08		      sta	COLUPF
   8940  336e				  -	      ifconst	pfres
   8941  336e				  -	      lda	#>(pfcolorlabel220-131+pfres*pfwidth)
   8942  336e					      else
   8943  336e		       a9 f6		      lda	#>(pfcolorlabel220-83)
   8944  3370					      endif
   8945  3370		       85 f1		      sta	pfcolortable+1
   8946  3372				  -	      ifconst	pfres
   8947  3372				  -	      lda	#<(pfcolorlabel220-131+pfres*pfwidth)
   8948  3372					      else
   8949  3372		       a9 31		      lda	#<(pfcolorlabel220-83)
   8950  3374					      endif
   8951  3374		       85 f0		      sta	pfcolortable
   8952  3376				   .
   8953  3376							; 
   8954  3376
   8955  3376				   .L0365		;  COLUP0  =  $6A  :  COLUP1  =  $6A
   8956  3376
   8957  3376		       a9 6a		      LDA	#$6A
   8958  3378		       85 06		      STA	COLUP0
   8959  337a		       85 07		      STA	COLUP1
   8960  337c				   .
   8961  337c							; 
   8962  337c
   8963  337c				   .L0366		;  COLUBK  =  $6C
   8964  337c
   8965  337c		       a9 6c		      LDA	#$6C
   8966  337e		       85 09		      STA	COLUBK
   8967  3380				   .
   8968  3380							; 
   8969  3380
   8970  3380				   .L0367		;  scorecolor	=  $6A
   8971  3380
   8972  3380		       a9 6a		      LDA	#$6A
   8973  3382		       85 a3		      STA	scorecolor
   8974  3384				   .
   8975  3384							; 
   8976  3384
   8977  3384				   .L0368		;  goto __Got_Pause_Colors
   8978  3384
   8979  3384		       4c 61 52 	      jmp	.__Got_Pause_Colors
   8980  3387
   8981  3387				   .
   8982  3387							; 
   8983  3387
   8984  3387				   .
   8985  3387							; 
   8986  3387
   8987  3387				   .
   8988  3387							; 
   8989  3387
   8990  3387				   .
   8991  3387							; 
   8992  3387
   8993  3387				   .
   8994  3387							; 
   8995  3387
   8996  3387				   .
   8997  3387							; 
   8998  3387
   8999  3387				   .
   9000  3387							; 
   9001  3387
   9002  3387				   .__Ps3
   9003  3387							; __Ps3
   9004  3387
   9005  3387				   .
   9006  3387							; 
   9007  3387
   9008  3387				   .L0369		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps3B
   9009  3387
   9010  3387		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   9011  3389		       29 04		      AND	#4
   9012  338b		       f0 03		      BEQ	.skipL0369
   9013  338d				   .condpart160
   9014  338d		       4c ad 53 	      jmp	.__Ps3B
   9015  3390
   9016  3390				   .skipL0369
   9017  3390				   .
   9018  3390							; 
   9019  3390
   9020  3390				   .L0370		;  pfcolors:
   9021  3390
   9022  3390		       a9 9c		      lda	# $9C
   9023  3392		       85 08		      sta	COLUPF
   9024  3394				  -	      ifconst	pfres
   9025  3394				  -	      lda	#>(pfcolorlabel220-130+pfres*pfwidth)
   9026  3394					      else
   9027  3394		       a9 f6		      lda	#>(pfcolorlabel220-82)
   9028  3396					      endif
   9029  3396		       85 f1		      sta	pfcolortable+1
   9030  3398				  -	      ifconst	pfres
   9031  3398				  -	      lda	#<(pfcolorlabel220-130+pfres*pfwidth)
   9032  3398					      else
   9033  3398		       a9 32		      lda	#<(pfcolorlabel220-82)
   9034  339a					      endif
   9035  339a		       85 f0		      sta	pfcolortable
   9036  339c				   .
   9037  339c							; 
   9038  339c
   9039  339c				   .L0371		;  COLUP0  =  $9C  :  COLUP1  =  $9C
   9040  339c
   9041  339c		       a9 9c		      LDA	#$9C
   9042  339e		       85 06		      STA	COLUP0
   9043  33a0		       85 07		      STA	COLUP1
   9044  33a2				   .
   9045  33a2							; 
   9046  33a2
   9047  33a2				   .L0372		;  COLUBK  =  $9A
   9048  33a2
   9049  33a2		       a9 9a		      LDA	#$9A
   9050  33a4		       85 09		      STA	COLUBK
   9051  33a6				   .
   9052  33a6							; 
   9053  33a6
   9054  33a6				   .L0373		;  scorecolor	=  $9C
   9055  33a6
   9056  33a6		       a9 9c		      LDA	#$9C
   9057  33a8		       85 a3		      STA	scorecolor
   9058  33aa				   .
   9059  33aa							; 
   9060  33aa
   9061  33aa				   .L0374		;  goto __Got_Pause_Colors
   9062  33aa
   9063  33aa		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9064  33ad
   9065  33ad				   .
   9066  33ad							; 
   9067  33ad
   9068  33ad				   .
   9069  33ad							; 
   9070  33ad
   9071  33ad				   .
   9072  33ad							; 
   9073  33ad
   9074  33ad				   .
   9075  33ad							; 
   9076  33ad
   9077  33ad				   .
   9078  33ad							; 
   9079  33ad
   9080  33ad				   .
   9081  33ad							; 
   9082  33ad
   9083  33ad				   .
   9084  33ad							; 
   9085  33ad
   9086  33ad				   .__Ps3B
   9087  33ad							; __Ps3B
   9088  33ad
   9089  33ad				   .
   9090  33ad							; 
   9091  33ad
   9092  33ad				   .L0375		;  pfcolors:
   9093  33ad
   9094  33ad		       a9 9a		      lda	# $9A
   9095  33af		       85 08		      sta	COLUPF
   9096  33b1				  -	      ifconst	pfres
   9097  33b1				  -	      lda	#>(pfcolorlabel220-129+pfres*pfwidth)
   9098  33b1					      else
   9099  33b1		       a9 f6		      lda	#>(pfcolorlabel220-81)
   9100  33b3					      endif
   9101  33b3		       85 f1		      sta	pfcolortable+1
   9102  33b5				  -	      ifconst	pfres
   9103  33b5				  -	      lda	#<(pfcolorlabel220-129+pfres*pfwidth)
   9104  33b5					      else
   9105  33b5		       a9 33		      lda	#<(pfcolorlabel220-81)
   9106  33b7					      endif
   9107  33b7		       85 f0		      sta	pfcolortable
   9108  33b9				   .
   9109  33b9							; 
   9110  33b9
   9111  33b9				   .L0376		;  COLUP0  =  $9A  :  COLUP1  =  $9A
   9112  33b9
   9113  33b9		       a9 9a		      LDA	#$9A
   9114  33bb		       85 06		      STA	COLUP0
   9115  33bd		       85 07		      STA	COLUP1
   9116  33bf				   .
   9117  33bf							; 
   9118  33bf
   9119  33bf				   .L0377		;  COLUBK  =  $9C
   9120  33bf
   9121  33bf		       a9 9c		      LDA	#$9C
   9122  33c1		       85 09		      STA	COLUBK
   9123  33c3				   .
   9124  33c3							; 
   9125  33c3
   9126  33c3				   .L0378		;  scorecolor	=  $9A
   9127  33c3
   9128  33c3		       a9 9a		      LDA	#$9A
   9129  33c5		       85 a3		      STA	scorecolor
   9130  33c7				   .
   9131  33c7							; 
   9132  33c7
   9133  33c7				   .L0379		;  goto __Got_Pause_Colors
   9134  33c7
   9135  33c7		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9136  33ca
   9137  33ca				   .
   9138  33ca							; 
   9139  33ca
   9140  33ca				   .
   9141  33ca							; 
   9142  33ca
   9143  33ca				   .
   9144  33ca							; 
   9145  33ca
   9146  33ca				   .
   9147  33ca							; 
   9148  33ca
   9149  33ca				   .
   9150  33ca							; 
   9151  33ca
   9152  33ca				   .
   9153  33ca							; 
   9154  33ca
   9155  33ca				   .
   9156  33ca							; 
   9157  33ca
   9158  33ca				   .__Ps4
   9159  33ca							; __Ps4
   9160  33ca
   9161  33ca				   .
   9162  33ca							; 
   9163  33ca
   9164  33ca				   .L0380		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps4B
   9165  33ca
   9166  33ca		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   9167  33cc		       29 04		      AND	#4
   9168  33ce		       f0 03		      BEQ	.skipL0380
   9169  33d0				   .condpart161
   9170  33d0		       4c f0 53 	      jmp	.__Ps4B
   9171  33d3
   9172  33d3				   .skipL0380
   9173  33d3				   .
   9174  33d3							; 
   9175  33d3
   9176  33d3				   .L0381		;  pfcolors:
   9177  33d3
   9178  33d3		       a9 cc		      lda	# $CC
   9179  33d5		       85 08		      sta	COLUPF
   9180  33d7				  -	      ifconst	pfres
   9181  33d7				  -	      lda	#>(pfcolorlabel245-132+pfres*pfwidth)
   9182  33d7					      else
   9183  33d7		       a9 f6		      lda	#>(pfcolorlabel245-84)
   9184  33d9					      endif
   9185  33d9		       85 f1		      sta	pfcolortable+1
   9186  33db				  -	      ifconst	pfres
   9187  33db				  -	      lda	#<(pfcolorlabel245-132+pfres*pfwidth)
   9188  33db					      else
   9189  33db		       a9 5c		      lda	#<(pfcolorlabel245-84)
   9190  33dd					      endif
   9191  33dd		       85 f0		      sta	pfcolortable
   9192  33df				   .
   9193  33df							; 
   9194  33df
   9195  33df				   .L0382		;  COLUP0  =  $CC  :  COLUP1  =  $CC
   9196  33df
   9197  33df		       a9 cc		      LDA	#$CC
   9198  33e1		       85 06		      STA	COLUP0
   9199  33e3		       85 07		      STA	COLUP1
   9200  33e5				   .
   9201  33e5							; 
   9202  33e5
   9203  33e5				   .L0383		;  COLUBK  =  $CA
   9204  33e5
   9205  33e5		       a9 ca		      LDA	#$CA
   9206  33e7		       85 09		      STA	COLUBK
   9207  33e9				   .
   9208  33e9							; 
   9209  33e9
   9210  33e9				   .L0384		;  scorecolor	=  $CC
   9211  33e9
   9212  33e9		       a9 cc		      LDA	#$CC
   9213  33eb		       85 a3		      STA	scorecolor
   9214  33ed				   .
   9215  33ed							; 
   9216  33ed
   9217  33ed				   .L0385		;  goto __Got_Pause_Colors
   9218  33ed
   9219  33ed		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9220  33f0
   9221  33f0				   .
   9222  33f0							; 
   9223  33f0
   9224  33f0				   .
   9225  33f0							; 
   9226  33f0
   9227  33f0				   .
   9228  33f0							; 
   9229  33f0
   9230  33f0				   .
   9231  33f0							; 
   9232  33f0
   9233  33f0				   .
   9234  33f0							; 
   9235  33f0
   9236  33f0				   .
   9237  33f0							; 
   9238  33f0
   9239  33f0				   .
   9240  33f0							; 
   9241  33f0
   9242  33f0				   .__Ps4B
   9243  33f0							; __Ps4B
   9244  33f0
   9245  33f0				   .
   9246  33f0							; 
   9247  33f0
   9248  33f0				   .L0386		;  pfcolors:
   9249  33f0
   9250  33f0		       a9 ca		      lda	# $CA
   9251  33f2		       85 08		      sta	COLUPF
   9252  33f4				  -	      ifconst	pfres
   9253  33f4				  -	      lda	#>(pfcolorlabel245-131+pfres*pfwidth)
   9254  33f4					      else
   9255  33f4		       a9 f6		      lda	#>(pfcolorlabel245-83)
   9256  33f6					      endif
   9257  33f6		       85 f1		      sta	pfcolortable+1
   9258  33f8				  -	      ifconst	pfres
   9259  33f8				  -	      lda	#<(pfcolorlabel245-131+pfres*pfwidth)
   9260  33f8					      else
   9261  33f8		       a9 5d		      lda	#<(pfcolorlabel245-83)
   9262  33fa					      endif
   9263  33fa		       85 f0		      sta	pfcolortable
   9264  33fc				   .
   9265  33fc							; 
   9266  33fc
   9267  33fc				   .L0387		;  COLUP0  =  $CA  :  COLUP1  =  $CA
   9268  33fc
   9269  33fc		       a9 ca		      LDA	#$CA
   9270  33fe		       85 06		      STA	COLUP0
   9271  3400		       85 07		      STA	COLUP1
   9272  3402				   .
   9273  3402							; 
   9274  3402
   9275  3402				   .L0388		;  COLUBK  =  $CC
   9276  3402
   9277  3402		       a9 cc		      LDA	#$CC
   9278  3404		       85 09		      STA	COLUBK
   9279  3406				   .
   9280  3406							; 
   9281  3406
   9282  3406				   .L0389		;  scorecolor	=  $CA
   9283  3406
   9284  3406		       a9 ca		      LDA	#$CA
   9285  3408		       85 a3		      STA	scorecolor
   9286  340a				   .
   9287  340a							; 
   9288  340a
   9289  340a				   .L0390		;  goto __Got_Pause_Colors
   9290  340a
   9291  340a		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9292  340d
   9293  340d				   .
   9294  340d							; 
   9295  340d
   9296  340d				   .
   9297  340d							; 
   9298  340d
   9299  340d				   .
   9300  340d							; 
   9301  340d
   9302  340d				   .
   9303  340d							; 
   9304  340d
   9305  340d				   .
   9306  340d							; 
   9307  340d
   9308  340d				   .
   9309  340d							; 
   9310  340d
   9311  340d				   .
   9312  340d							; 
   9313  340d
   9314  340d				   .__Ps5
   9315  340d							; __Ps5
   9316  340d
   9317  340d				   .
   9318  340d							; 
   9319  340d
   9320  340d				   .L0391		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps5B
   9321  340d
   9322  340d		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   9323  340f		       29 04		      AND	#4
   9324  3411		       f0 03		      BEQ	.skipL0391
   9325  3413				   .condpart162
   9326  3413		       4c 33 54 	      jmp	.__Ps5B
   9327  3416
   9328  3416				   .skipL0391
   9329  3416				   .
   9330  3416							; 
   9331  3416
   9332  3416				   .L0392		;  pfcolors:
   9333  3416
   9334  3416		       a9 fc		      lda	# $FC
   9335  3418		       85 08		      sta	COLUPF
   9336  341a				  -	      ifconst	pfres
   9337  341a				  -	      lda	#>(pfcolorlabel245-130+pfres*pfwidth)
   9338  341a					      else
   9339  341a		       a9 f6		      lda	#>(pfcolorlabel245-82)
   9340  341c					      endif
   9341  341c		       85 f1		      sta	pfcolortable+1
   9342  341e				  -	      ifconst	pfres
   9343  341e				  -	      lda	#<(pfcolorlabel245-130+pfres*pfwidth)
   9344  341e					      else
   9345  341e		       a9 5e		      lda	#<(pfcolorlabel245-82)
   9346  3420					      endif
   9347  3420		       85 f0		      sta	pfcolortable
   9348  3422				   .
   9349  3422							; 
   9350  3422
   9351  3422				   .L0393		;  COLUP0  =  $FC  :  COLUP1  =  $FC
   9352  3422
   9353  3422		       a9 fc		      LDA	#$FC
   9354  3424		       85 06		      STA	COLUP0
   9355  3426		       85 07		      STA	COLUP1
   9356  3428				   .
   9357  3428							; 
   9358  3428
   9359  3428				   .L0394		;  COLUBK  =  $FA
   9360  3428
   9361  3428		       a9 fa		      LDA	#$FA
   9362  342a		       85 09		      STA	COLUBK
   9363  342c				   .
   9364  342c							; 
   9365  342c
   9366  342c				   .L0395		;  scorecolor	=  $FC
   9367  342c
   9368  342c		       a9 fc		      LDA	#$FC
   9369  342e		       85 a3		      STA	scorecolor
   9370  3430				   .
   9371  3430							; 
   9372  3430
   9373  3430				   .L0396		;  goto __Got_Pause_Colors
   9374  3430
   9375  3430		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9376  3433
   9377  3433				   .
   9378  3433							; 
   9379  3433
   9380  3433				   .
   9381  3433							; 
   9382  3433
   9383  3433				   .
   9384  3433							; 
   9385  3433
   9386  3433				   .
   9387  3433							; 
   9388  3433
   9389  3433				   .
   9390  3433							; 
   9391  3433
   9392  3433				   .
   9393  3433							; 
   9394  3433
   9395  3433				   .
   9396  3433							; 
   9397  3433
   9398  3433				   .__Ps5B
   9399  3433							; __Ps5B
   9400  3433
   9401  3433				   .
   9402  3433							; 
   9403  3433
   9404  3433				   .L0397		;  pfcolors:
   9405  3433
   9406  3433		       a9 fa		      lda	# $FA
   9407  3435		       85 08		      sta	COLUPF
   9408  3437				  -	      ifconst	pfres
   9409  3437				  -	      lda	#>(pfcolorlabel245-129+pfres*pfwidth)
   9410  3437					      else
   9411  3437		       a9 f6		      lda	#>(pfcolorlabel245-81)
   9412  3439					      endif
   9413  3439		       85 f1		      sta	pfcolortable+1
   9414  343b				  -	      ifconst	pfres
   9415  343b				  -	      lda	#<(pfcolorlabel245-129+pfres*pfwidth)
   9416  343b					      else
   9417  343b		       a9 5f		      lda	#<(pfcolorlabel245-81)
   9418  343d					      endif
   9419  343d		       85 f0		      sta	pfcolortable
   9420  343f				   .
   9421  343f							; 
   9422  343f
   9423  343f				   .L0398		;  COLUP0  =  $FA  :  COLUP1  =  $FA
   9424  343f
   9425  343f		       a9 fa		      LDA	#$FA
   9426  3441		       85 06		      STA	COLUP0
   9427  3443		       85 07		      STA	COLUP1
   9428  3445				   .
   9429  3445							; 
   9430  3445
   9431  3445				   .L0399		;  COLUBK  =  $FC
   9432  3445
   9433  3445		       a9 fc		      LDA	#$FC
   9434  3447		       85 09		      STA	COLUBK
   9435  3449				   .
   9436  3449							; 
   9437  3449
   9438  3449				   .L0400		;  scorecolor	=  $FA
   9439  3449
   9440  3449		       a9 fa		      LDA	#$FA
   9441  344b		       85 a3		      STA	scorecolor
   9442  344d				   .
   9443  344d							; 
   9444  344d
   9445  344d				   .L0401		;  goto __Got_Pause_Colors
   9446  344d
   9447  344d		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9448  3450
   9449  3450				   .
   9450  3450							; 
   9451  3450
   9452  3450				   .
   9453  3450							; 
   9454  3450
   9455  3450				   .
   9456  3450							; 
   9457  3450
   9458  3450				   .
   9459  3450							; 
   9460  3450
   9461  3450				   .
   9462  3450							; 
   9463  3450
   9464  3450				   .
   9465  3450							; 
   9466  3450
   9467  3450				   .
   9468  3450							; 
   9469  3450
   9470  3450				   .__Ps6
   9471  3450							; __Ps6
   9472  3450
   9473  3450				   .
   9474  3450							; 
   9475  3450
   9476  3450				   .L0402		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps6B
   9477  3450
   9478  3450		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   9479  3452		       29 04		      AND	#4
   9480  3454		       f0 03		      BEQ	.skipL0402
   9481  3456				   .condpart163
   9482  3456		       4c 76 54 	      jmp	.__Ps6B
   9483  3459
   9484  3459				   .skipL0402
   9485  3459				   .
   9486  3459							; 
   9487  3459
   9488  3459				   .L0403		;  pfcolors:
   9489  3459
   9490  3459		       a9 8c		      lda	# $8C
   9491  345b		       85 08		      sta	COLUPF
   9492  345d				  -	      ifconst	pfres
   9493  345d				  -	      lda	#>(pfcolorlabel270-132+pfres*pfwidth)
   9494  345d					      else
   9495  345d		       a9 f7		      lda	#>(pfcolorlabel270-84)
   9496  345f					      endif
   9497  345f		       85 f1		      sta	pfcolortable+1
   9498  3461				  -	      ifconst	pfres
   9499  3461				  -	      lda	#<(pfcolorlabel270-132+pfres*pfwidth)
   9500  3461					      else
   9501  3461		       a9 04		      lda	#<(pfcolorlabel270-84)
   9502  3463					      endif
   9503  3463		       85 f0		      sta	pfcolortable
   9504  3465				   .
   9505  3465							; 
   9506  3465
   9507  3465				   .L0404		;  COLUP0  =  $8C  :  COLUP1  =  $8C
   9508  3465
   9509  3465		       a9 8c		      LDA	#$8C
   9510  3467		       85 06		      STA	COLUP0
   9511  3469		       85 07		      STA	COLUP1
   9512  346b				   .
   9513  346b							; 
   9514  346b
   9515  346b				   .L0405		;  COLUBK  =  $8A
   9516  346b
   9517  346b		       a9 8a		      LDA	#$8A
   9518  346d		       85 09		      STA	COLUBK
   9519  346f				   .
   9520  346f							; 
   9521  346f
   9522  346f				   .L0406		;  scorecolor	=  $8C
   9523  346f
   9524  346f		       a9 8c		      LDA	#$8C
   9525  3471		       85 a3		      STA	scorecolor
   9526  3473				   .
   9527  3473							; 
   9528  3473
   9529  3473				   .L0407		;  goto __Got_Pause_Colors
   9530  3473
   9531  3473		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9532  3476
   9533  3476				   .
   9534  3476							; 
   9535  3476
   9536  3476				   .
   9537  3476							; 
   9538  3476
   9539  3476				   .
   9540  3476							; 
   9541  3476
   9542  3476				   .
   9543  3476							; 
   9544  3476
   9545  3476				   .
   9546  3476							; 
   9547  3476
   9548  3476				   .
   9549  3476							; 
   9550  3476
   9551  3476				   .
   9552  3476							; 
   9553  3476
   9554  3476				   .__Ps6B
   9555  3476							; __Ps6B
   9556  3476
   9557  3476				   .
   9558  3476							; 
   9559  3476
   9560  3476				   .L0408		;  pfcolors:
   9561  3476
   9562  3476		       a9 8a		      lda	# $8A
   9563  3478		       85 08		      sta	COLUPF
   9564  347a				  -	      ifconst	pfres
   9565  347a				  -	      lda	#>(pfcolorlabel270-131+pfres*pfwidth)
   9566  347a					      else
   9567  347a		       a9 f7		      lda	#>(pfcolorlabel270-83)
   9568  347c					      endif
   9569  347c		       85 f1		      sta	pfcolortable+1
   9570  347e				  -	      ifconst	pfres
   9571  347e				  -	      lda	#<(pfcolorlabel270-131+pfres*pfwidth)
   9572  347e					      else
   9573  347e		       a9 05		      lda	#<(pfcolorlabel270-83)
   9574  3480					      endif
   9575  3480		       85 f0		      sta	pfcolortable
   9576  3482				   .
   9577  3482							; 
   9578  3482
   9579  3482				   .L0409		;  COLUP0  =  $8A  :  COLUP1  =  $8A
   9580  3482
   9581  3482		       a9 8a		      LDA	#$8A
   9582  3484		       85 06		      STA	COLUP0
   9583  3486		       85 07		      STA	COLUP1
   9584  3488				   .
   9585  3488							; 
   9586  3488
   9587  3488				   .L0410		;  COLUBK  =  $8C
   9588  3488
   9589  3488		       a9 8c		      LDA	#$8C
   9590  348a		       85 09		      STA	COLUBK
   9591  348c				   .
   9592  348c							; 
   9593  348c
   9594  348c				   .L0411		;  scorecolor	=  $8A
   9595  348c
   9596  348c		       a9 8a		      LDA	#$8A
   9597  348e		       85 a3		      STA	scorecolor
   9598  3490				   .
   9599  3490							; 
   9600  3490
   9601  3490				   .L0412		;  goto __Got_Pause_Colors
   9602  3490
   9603  3490		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9604  3493
   9605  3493				   .
   9606  3493							; 
   9607  3493
   9608  3493				   .
   9609  3493							; 
   9610  3493
   9611  3493				   .
   9612  3493							; 
   9613  3493
   9614  3493				   .
   9615  3493							; 
   9616  3493
   9617  3493				   .
   9618  3493							; 
   9619  3493
   9620  3493				   .
   9621  3493							; 
   9622  3493
   9623  3493				   .
   9624  3493							; 
   9625  3493
   9626  3493				   .__Ps7
   9627  3493							; __Ps7
   9628  3493
   9629  3493				   .
   9630  3493							; 
   9631  3493
   9632  3493				   .L0413		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps7B
   9633  3493
   9634  3493		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   9635  3495		       29 04		      AND	#4
   9636  3497		       f0 03		      BEQ	.skipL0413
   9637  3499				   .condpart164
   9638  3499		       4c b9 54 	      jmp	.__Ps7B
   9639  349c
   9640  349c				   .skipL0413
   9641  349c				   .
   9642  349c							; 
   9643  349c
   9644  349c				   .L0414		;  pfcolors:
   9645  349c
   9646  349c		       a9 2c		      lda	# $2C
   9647  349e		       85 08		      sta	COLUPF
   9648  34a0				  -	      ifconst	pfres
   9649  34a0				  -	      lda	#>(pfcolorlabel270-130+pfres*pfwidth)
   9650  34a0					      else
   9651  34a0		       a9 f7		      lda	#>(pfcolorlabel270-82)
   9652  34a2					      endif
   9653  34a2		       85 f1		      sta	pfcolortable+1
   9654  34a4				  -	      ifconst	pfres
   9655  34a4				  -	      lda	#<(pfcolorlabel270-130+pfres*pfwidth)
   9656  34a4					      else
   9657  34a4		       a9 06		      lda	#<(pfcolorlabel270-82)
   9658  34a6					      endif
   9659  34a6		       85 f0		      sta	pfcolortable
   9660  34a8				   .
   9661  34a8							; 
   9662  34a8
   9663  34a8				   .L0415		;  COLUP0  =  $2C  :  COLUP1  =  $2C
   9664  34a8
   9665  34a8		       a9 2c		      LDA	#$2C
   9666  34aa		       85 06		      STA	COLUP0
   9667  34ac		       85 07		      STA	COLUP1
   9668  34ae				   .
   9669  34ae							; 
   9670  34ae
   9671  34ae				   .L0416		;  COLUBK  =  $2A
   9672  34ae
   9673  34ae		       a9 2a		      LDA	#$2A
   9674  34b0		       85 09		      STA	COLUBK
   9675  34b2				   .
   9676  34b2							; 
   9677  34b2
   9678  34b2				   .L0417		;  scorecolor	=  $2C
   9679  34b2
   9680  34b2		       a9 2c		      LDA	#$2C
   9681  34b4		       85 a3		      STA	scorecolor
   9682  34b6				   .
   9683  34b6							; 
   9684  34b6
   9685  34b6				   .L0418		;  goto __Got_Pause_Colors
   9686  34b6
   9687  34b6		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9688  34b9
   9689  34b9				   .
   9690  34b9							; 
   9691  34b9
   9692  34b9				   .
   9693  34b9							; 
   9694  34b9
   9695  34b9				   .
   9696  34b9							; 
   9697  34b9
   9698  34b9				   .
   9699  34b9							; 
   9700  34b9
   9701  34b9				   .
   9702  34b9							; 
   9703  34b9
   9704  34b9				   .
   9705  34b9							; 
   9706  34b9
   9707  34b9				   .
   9708  34b9							; 
   9709  34b9
   9710  34b9				   .__Ps7B
   9711  34b9							; __Ps7B
   9712  34b9
   9713  34b9				   .
   9714  34b9							; 
   9715  34b9
   9716  34b9				   .L0419		;  pfcolors:
   9717  34b9
   9718  34b9		       a9 2a		      lda	# $2A
   9719  34bb		       85 08		      sta	COLUPF
   9720  34bd				  -	      ifconst	pfres
   9721  34bd				  -	      lda	#>(pfcolorlabel270-129+pfres*pfwidth)
   9722  34bd					      else
   9723  34bd		       a9 f7		      lda	#>(pfcolorlabel270-81)
   9724  34bf					      endif
   9725  34bf		       85 f1		      sta	pfcolortable+1
   9726  34c1				  -	      ifconst	pfres
   9727  34c1				  -	      lda	#<(pfcolorlabel270-129+pfres*pfwidth)
   9728  34c1					      else
   9729  34c1		       a9 07		      lda	#<(pfcolorlabel270-81)
   9730  34c3					      endif
   9731  34c3		       85 f0		      sta	pfcolortable
   9732  34c5				   .
   9733  34c5							; 
   9734  34c5
   9735  34c5				   .L0420		;  COLUP0  =  $2A  :  COLUP1  =  $2A
   9736  34c5
   9737  34c5		       a9 2a		      LDA	#$2A
   9738  34c7		       85 06		      STA	COLUP0
   9739  34c9		       85 07		      STA	COLUP1
   9740  34cb				   .
   9741  34cb							; 
   9742  34cb
   9743  34cb				   .L0421		;  COLUBK  =  $2C
   9744  34cb
   9745  34cb		       a9 2c		      LDA	#$2C
   9746  34cd		       85 09		      STA	COLUBK
   9747  34cf				   .
   9748  34cf							; 
   9749  34cf
   9750  34cf				   .L0422		;  scorecolor	=  $2A
   9751  34cf
   9752  34cf		       a9 2a		      LDA	#$2A
   9753  34d1		       85 a3		      STA	scorecolor
   9754  34d3				   .
   9755  34d3							; 
   9756  34d3
   9757  34d3				   .L0423		;  goto __Got_Pause_Colors
   9758  34d3
   9759  34d3		       4c 61 52 	      jmp	.__Got_Pause_Colors
   9760  34d6
   9761  34d6				   .
   9762  34d6							; 
   9763  34d6
   9764  34d6				   .
   9765  34d6							; 
   9766  34d6
   9767  34d6				   .
   9768  34d6							; 
   9769  34d6
   9770  34d6				   .L0424		;  bank 4
   9771  34d6
   9772  34d6					      if	ECHO3
      2814 bytes of ROM space left in bank 3
   9773  34d6					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   9774  34d6					      endif
   9775  34d6		       00 01	   ECHO3      =	1
   9776  3fd4					      ORG	$3FF4-bscode_length
   9777  3fd4					      RORG	$5FF4-bscode_length
   9778  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   9779  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9780  3fd6				  -	      stx	FASTFETCH
   9781  3fd6					      endif
   9782  3fd6		       9a		      txs
   9783  3fd7				  -	      if	bankswitch == 64
   9784  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9785  3fd7					      else
   9786  3fd7		       a9 f2		      lda	#>(start-1)
   9787  3fd9					      endif
   9788  3fd9		       48		      pha
   9789  3fda		       a9 51		      lda	#<(start-1)
   9790  3fdc		       48		      pha
   9791  3fdd		       48		      pha
   9792  3fde		       8a		      txa
   9793  3fdf		       48		      pha
   9794  3fe0		       ba		      tsx
   9795  3fe1					      if	bankswitch != 64
   9796  3fe1		       b5 04		      lda	4,x	; get high byte of return address
   9797  3fe3		       2a		      rol
   9798  3fe4		       2a		      rol
   9799  3fe5		       2a		      rol
   9800  3fe6		       2a		      rol
   9801  3fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9802  3fe9		       aa		      tax
   9803  3fea		       e8		      inx
   9804  3feb				  -	      else
   9805  3feb				  -	      lda	4,x	; get high byte of return address
   9806  3feb				  -	      tay
   9807  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9808  3feb				  -	      sta	4,x
   9809  3feb				  -	      tya
   9810  3feb				  -	      lsr
   9811  3feb				  -	      lsr
   9812  3feb				  -	      lsr
   9813  3feb				  -	      lsr
   9814  3feb				  -	      tax
   9815  3feb				  -	      inx
   9816  3feb					      endif
   9817  3feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   9818  3fee		       68		      pla
   9819  3fef		       aa		      tax
   9820  3ff0		       68		      pla
   9821  3ff1		       60		      rts
   9822  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9823  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9824  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9825  3ff2					      endif
   9826  3ffc					      ORG	$3FFC
   9827  3ffc					      RORG	$5FFC
   9828  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   9829  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   9830  4000					      ORG	$4000
   9831  4000					      RORG	$7000
   9832  4000				   .
   9833  4000							; 
   9834  4000
   9835  4000				   .L0425		;  asm
   9836  4000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  4000					      include	"titlescreen/asm/titlescreen.asm"
      1  4000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  4000					      include	"titlescreen/asm/layoutmacros.asm"
      1  4000
      2  4000							; the macro's used in the "titlescreen_layout.asm" file
      3  4000
      4  4000					      MAC	draw_96x2_1
      5  4000				   mk_96x2_1_on =	1
      6  4000					      jsr	draw_bmp_96x2_1
      7  4000					      ENDM
      8  4000
      9  4000					      MAC	draw_96x2_2
     10  4000				   mk_96x2_2_on =	1
     11  4000					      jsr	draw_bmp_96x2_2
     12  4000					      ENDM
     13  4000
     14  4000					      MAC	draw_96x2_3
     15  4000				   mk_96x2_3_on =	1
     16  4000					      jsr	draw_bmp_96x2_3
     17  4000					      ENDM
     18  4000
     19  4000					      MAC	draw_96x2_4
     20  4000				   mk_96x2_4_on =	1
     21  4000					      jsr	draw_bmp_96x2_4
     22  4000					      ENDM
     23  4000
     24  4000					      MAC	draw_96x2_5
     25  4000				   mk_96x2_5_on =	1
     26  4000					      jsr	draw_bmp_96x2_5
     27  4000					      ENDM
     28  4000
     29  4000					      MAC	draw_96x2_6
     30  4000				   mk_96x2_6_on =	1
     31  4000					      jsr	draw_bmp_96x2_6
     32  4000					      ENDM
     33  4000
     34  4000					      MAC	draw_96x2_7
     35  4000				   mk_96x2_7_on =	1
     36  4000					      jsr	draw_bmp_96x2_7
     37  4000					      ENDM
     38  4000
     39  4000					      MAC	draw_96x2_8
     40  4000				   mk_96x2_8_on =	1
     41  4000					      jsr	draw_bmp_96x2_8
     42  4000					      ENDM
     43  4000
     44  4000					      MAC	draw_48x1_1
     45  4000				   mk_48x1_X_on =	1
     46  4000				   mk_48x1_1_on =	1
     47  4000					      jsr	draw_bmp_48x1_1
     48  4000					      ENDM
     49  4000
     50  4000					      MAC	draw_48x1_2
     51  4000				   mk_48x1_X_on =	1
     52  4000				   mk_48x1_2_on =	1
     53  4000					      jsr	draw_bmp_48x1_2
     54  4000					      ENDM
     55  4000
     56  4000					      MAC	draw_48x1_3
     57  4000				   mk_48x1_X_on =	1
     58  4000				   mk_48x1_3_on =	1
     59  4000					      jsr	draw_bmp_48x1_3
     60  4000					      ENDM
     61  4000
     62  4000					      MAC	draw_48x1_4
     63  4000				   mk_48x1_X_on =	1
     64  4000				   mk_48x1_4_on =	1
     65  4000					      jsr	draw_bmp_48x1_4
     66  4000					      ENDM
     67  4000
     68  4000					      MAC	draw_48x1_5
     69  4000				   mk_48x1_X_on =	1
     70  4000				   mk_48x1_5_on =	1
     71  4000					      jsr	draw_bmp_48x1_5
     72  4000					      ENDM
     73  4000
     74  4000					      MAC	draw_48x1_6
     75  4000				   mk_48x1_X_on =	1
     76  4000				   mk_48x1_6_on =	1
     77  4000					      jsr	draw_bmp_48x1_6
     78  4000					      ENDM
     79  4000
     80  4000					      MAC	draw_48x1_7
     81  4000				   mk_48x1_X_on =	1
     82  4000				   mk_48x1_7_on =	1
     83  4000					      jsr	draw_bmp_48x1_7
     84  4000					      ENDM
     85  4000
     86  4000					      MAC	draw_48x1_8
     87  4000				   mk_48x1_X_on =	1
     88  4000				   mk_48x1_8_on =	1
     89  4000					      jsr	draw_bmp_48x1_8
     90  4000					      ENDM
     91  4000
     92  4000
     93  4000					      MAC	draw_48x2_1
     94  4000				   mk_48x2_X_on =	1
     95  4000				   mk_48x2_1_on =	1
     96  4000					      jsr	draw_bmp_48x2_1
     97  4000					      ENDM
     98  4000
     99  4000					      MAC	draw_48x2_2
    100  4000				   mk_48x2_X_on =	1
    101  4000				   mk_48x2_2_on =	1
    102  4000					      jsr	draw_bmp_48x2_2
    103  4000					      ENDM
    104  4000
    105  4000					      MAC	draw_48x2_3
    106  4000				   mk_48x2_X_on =	1
    107  4000				   mk_48x2_3_on =	1
    108  4000					      jsr	draw_bmp_48x2_3
    109  4000					      ENDM
    110  4000
    111  4000					      MAC	draw_48x2_4
    112  4000				   mk_48x2_X_on =	1
    113  4000				   mk_48x2_4_on =	1
    114  4000					      jsr	draw_bmp_48x2_4
    115  4000					      ENDM
    116  4000
    117  4000					      MAC	draw_48x2_5
    118  4000				   mk_48x2_X_on =	1
    119  4000				   mk_48x2_5_on =	1
    120  4000					      jsr	draw_bmp_48x2_5
    121  4000					      ENDM
    122  4000
    123  4000					      MAC	draw_48x2_6
    124  4000				   mk_48x2_X_on =	1
    125  4000				   mk_48x2_6_on =	1
    126  4000					      jsr	draw_bmp_48x2_6
    127  4000					      ENDM
    128  4000
    129  4000					      MAC	draw_48x2_7
    130  4000				   mk_48x2_X_on =	1
    131  4000				   mk_48x2_7_on =	1
    132  4000					      jsr	draw_bmp_48x2_7
    133  4000					      ENDM
    134  4000
    135  4000					      MAC	draw_48x2_8
    136  4000				   mk_48x2_X_on =	1
    137  4000				   mk_48x2_8_on =	1
    138  4000					      jsr	draw_bmp_48x2_8
    139  4000					      ENDM
    140  4000
    141  4000					      MAC	draw_player
    142  4000				   mk_player_on =	1
    143  4000					      jsr	draw_player_display
    144  4000					      ENDM
    145  4000
    146  4000					      MAC	draw_score
    147  4000				   mk_score_on =	1
    148  4000				   mk_48x1_X_on =	1
    149  4000					      jsr	draw_score_display
    150  4000					      ENDM
    151  4000
    152  4000					      MAC	draw_gameselect
    153  4000				   mk_gameselect_on =	1
    154  4000				   mk_48x1_X_on =	1
    155  4000					      jsr	draw_gameselect_display
    156  4000					      ENDM
    157  4000
    158  4000					      MAC	draw_space
    159  4000					      ldy	#{1}
    160  4000				   .loop
    161  4000					      sta	WSYNC
    162  4000					      dey
    163  4000					      bne	.loop
    164  4000					      ENDM
    165  4000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  4000					      include	"titlescreen/asm/dpcfix.asm"
      1  4000							; reassign variables that DPC+ doesn't have
      2  4000
      3  4000				  -	      ifnconst	aux2
      4  4000				  -aux2       =	player2x
      5  4000					      endif
      6  4000				  -	      ifnconst	aux4
      7  4000				  -aux4       =	player4x
      8  4000					      endif
      9  4000				  -	      ifnconst	aux5
     10  4000				  -aux5       =	player5x
     11  4000					      endif
     12  4000				  -	      ifnconst	aux6
     13  4000				  -aux6       =	player6x
     14  4000					      endif
     15  4000
     16  4000				  -	      ifnconst	player0pointer
     17  4000				  -player0pointer =	player2y
     18  4000					      endif
     19  4000				  -	      ifnconst	player1pointer
     20  4000				  -player1pointer =	player2height	; to player3height
     21  4000					      endif
     22  4000				  -	      ifnconst	player1color
     23  4000				  -player1color =	player4height	; to player5height
     24  4000					      endif
     25  4000				  -	      ifnconst	scorepointers
     26  4000				  -scorepointers =	player6height	; to NUSIZ8
     27  4000					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  4000					      include	"titlescreen/titlescreen_layout.asm"
      1  4000
      2  4000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  4000							; in the order they were listed.
      4  4000							;
      5  4000							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  4000							; it won't use any rom space.
      7  4000
      8  4000					      MAC	titlescreenlayout
      9  4000					      draw_48x1_1
     10  4000					      draw_48x2_1
     11  4000					      draw_48x1_2
     12  4000					      ENDM
     13  4000
     14  4000							; minikernel choices are:
     15  4000							; 
     16  4000							; draw_48x1_1, draw_48x1_2, draw_48x1_3 
     17  4000							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  4000							;
     19  4000							; draw_48x2_1, draw_48x2_2, draw_48x2_3 
     20  4000							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  4000							;
     22  4000							; draw_96x2_1, draw_96x2_2, draw_96x2_3 
     23  4000							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  4000							;
     25  4000							; draw_gameselect
     26  4000							;	The game selection display minikernel
     27  4000							;
     28  4000							; draw_score
     29  4000							;	A minikernel that draws the score
     30  4000							;
     31  4000							; draw_space 10
     32  4000							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  4000
      6  4000				   .titledrawscreen
      7  4000				   title_eat_overscan
      8  4000							;bB runs in overscan. Wait for the overscan to run out...
      9  4000		       18		      clc
     10  4001		       ad 84 02 	      lda	INTIM
     11  4004		       30 fa		      bmi	title_eat_overscan
     12  4006		       4c 09 70 	      jmp	title_do_vertical_sync
     13  4009
     14  4009				   title_do_vertical_sync
     15  4009		       a9 02		      lda	#2
     16  400b		       85 02		      sta	WSYNC	;one line with VSYNC
     17  400d		       85 00		      sta	VSYNC	;enable VSYNC
     18  400f		       85 02		      sta	WSYNC	;one line with VSYNC
     19  4011		       85 02		      sta	WSYNC	;one line with VSYNC
     20  4013		       a9 00		      lda	#0
     21  4015		       85 02		      sta	WSYNC	;one line with VSYNC
     22  4017		       85 00		      sta	VSYNC	;turn off VSYNC
     23  4019
     24  4019							;lda #42+128
     25  4019				  -	      ifnconst	vblank_time
     26  4019				  -	      lda	#42+128
     27  4019					      else
     28  4019		       a9 ab		      lda	#vblank_time+128
     29  401b					      endif
     30  401b
     31  401b		       8d 96 02 	      sta	TIM64T
     32  401e
     33  401e		       00 82	   titleframe =	missile0x
     34  401e		       e6 82		      inc	titleframe	; increment the frame counter
     35  4020
     36  4020				  -	      ifconst	.title_vblank
     37  4020				  -	      jsr	.title_vblank
     38  4020					      endif
     39  4020
     40  4020				   title_vblank_loop
     41  4020		       ad 84 02 	      lda	INTIM
     42  4023		       30 fb		      bmi	title_vblank_loop
     43  4025		       a9 00		      lda	#0
     44  4027		       85 02		      sta	WSYNC
     45  4029		       85 01		      sta	VBLANK
     46  402b		       85 1d		      sta	ENAM0
     47  402d		       85 1f		      sta	ENABL
     48  402f
     49  402f				   title_playfield
     50  402f
     51  402f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  402f
     53  402f		       a9 e6		      lda	#230
     54  4031		       8d 96 02 	      sta	TIM64T
     55  4034
     56  4034		       a9 01		      lda	#1
     57  4036		       85 0a		      sta	CTRLPF
     58  4038		       18		      clc
     59  4039
     60  4039		       a9 00		      lda	#0
     61  403b		       85 0b		      sta	REFP0
     62  403d		       85 0c		      sta	REFP1
     63  403f		       85 02		      sta	WSYNC
     64  4041		       ad 7a 70 	      lda	titlescreencolor
     65  4044		       85 09		      sta	COLUBK
     66  4046
      0  4046					      titlescreenlayout
      0  4046					      draw_48x1_1
      1  4046		       00 01	   mk_48x1_X_on =	1
      2  4046		       00 01	   mk_48x1_1_on =	1
      3  4046		       20 7b 70 	      jsr	draw_bmp_48x1_1
      0  4049					      draw_48x2_1
      1  4049		       00 01	   mk_48x2_X_on =	1
      2  4049		       00 01	   mk_48x2_1_on =	1
      3  4049		       20 0b 71 	      jsr	draw_bmp_48x2_1
      0  404c					      draw_48x1_2
      1  404c		       00 01	   mk_48x1_X_on =	1
      2  404c		       00 01	   mk_48x1_2_on =	1
      3  404c		       20 c3 70 	      jsr	draw_bmp_48x1_2
     68  404f
     69  404f		       4c 7c 72 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  4052
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  4052					      include	"titlescreen/asm/position48.asm"
      1  4052
      2  4052				   position48
      3  4052
      4  4052							;postion P0 and P1
      5  4052
      6  4052		       85 02		      sta	WSYNC
      7  4054
      8  4054		       a9 90		      lda	#$90	;2
      9  4056		       85 20		      sta	HMP0	;3
     10  4058		       a9 a0		      lda	#$A0	;2
     11  405a		       85 21		      sta	HMP1	;3
     12  405c
     13  405c		       e6 9c		      inc	temp1
     14  405e		       c6 9c		      dec	temp1
     15  4060		       e6 9c		      inc	temp1
     16  4062		       c6 9c		      dec	temp1
     17  4064		       e6 9c		      inc	temp1
      0  4066					      sleep	2
      1  4066				   .CYCLES    SET	2
      2  4066
      3  4066				  -	      IF	.CYCLES < 2
      4  4066				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4066				  -	      ERR
      6  4066					      ENDIF
      7  4066
      8  4066				  -	      IF	.CYCLES & 1
      9  4066				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4066				  -	      nop	0
     11  4066				  -	      ELSE
     12  4066				  -	      bit	VSYNC
     13  4066				  -	      ENDIF
     14  4066				  -.CYCLES    SET	.CYCLES - 3
     15  4066					      ENDIF
     16  4066
     17  4066					      REPEAT	.CYCLES / 2
     18  4066		       ea		      nop
     19  4067					      REPEND
     19  4067		       85 10		      sta	RESP0	;  +3
     20  4069		       85 11		      sta	RESP1	;  +3
     21  406b		       c6 9c		      dec	temp1	;  +5
     22  406d		       e6 9c		      inc	temp1	;  +5
     23  406f		       c6 9c		      dec	temp1	;  +5
     24  4071		       e6 9c		      inc	temp1	;  +5
     25  4073		       c6 9c		      dec	temp1	;  +5
      0  4075					      sleep	3
      1  4075				   .CYCLES    SET	3
      2  4075
      3  4075				  -	      IF	.CYCLES < 2
      4  4075				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4075				  -	      ERR
      6  4075					      ENDIF
      7  4075
      8  4075					      IF	.CYCLES & 1
      9  4075					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4075		       04 00		      nop	0
     11  4077				  -	      ELSE
     12  4077				  -	      bit	VSYNC
     13  4077					      ENDIF
     14  4077				   .CYCLES    SET	.CYCLES - 3
     15  4077					      ENDIF
     16  4077
     17  4077				  -	      REPEAT	.CYCLES / 2
     18  4077				  -	      nop
     19  4077					      REPEND
     27  4077		       85 2a		      sta	HMOVE	; +76
     28  4079		       60		      RTS
     29  407a
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  407a					      include	"titlescreen/titlescreen_color.asm"
      1  407a
      2  407a							; This is where the titlescreen background color gets set. 
      3  407a							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  407a							; if you want to change the color on the fly.
      5  407a
      6  407a				  -	      ifnconst	titlescreencolor
      7  407a				  -titlescreencolor
      8  407a					      endif
      9  407a		       00		      .byte.b	$00
     10  407b
------- FILE titlescreen/asm/titlescreen.asm
     73  407b
     74  407b					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 2
      0  407b					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  407b
      2  407b				   draw_bmp_48x1_1
      3  407b
      4  407b		       a9 00		      lda	#0
      5  407d		       85 1b		      sta	GRP0
      6  407f		       85 1c		      sta	GRP1
      7  4081
      8  4081		       a0 0b		      ldy	#11
      9  4083				   bmp_48x1_1_pointersetup
     10  4083		       b9 b7 70 	      lda	bmp_48x1_1_values,y
     11  4086		       99 96 00 	      sta	scorepointers,y
     12  4089		       88		      dey
     13  408a		       b9 b7 70 	      lda	bmp_48x1_1_values,y
     14  408d				  -	      ifconst	bmp_48x1_1_index
     15  408d				  -	      sec
     16  408d				  -	      sbc	bmp_48x1_1_index
     17  408d					      endif
     18  408d		       99 96 00 	      sta	scorepointers,y
     19  4090		       88		      dey
     20  4091		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  4093
     22  4093		       a0 1f		      ldy	(#bmp_48x1_1_window-1)
     23  4095		       84 f1		      sty	aux2
     24  4097
     25  4097					      ifconst	bmp_48x1_1_background
     26  4097		       ad 91 72 	      lda	bmp_48x1_1_background
     27  409a				  -	      else
     28  409a				  -	      lda	titlescreencolor
     29  409a					      endif
     30  409a		       85 f3		      sta	aux4
     31  409c
     32  409c		       ad 92 72 	      lda	bmp_48x1_1_color
     33  409f		       85 06		      sta	COLUP0	;3
     34  40a1		       85 07		      sta	COLUP1	;3
     35  40a3		       85 2b		      sta	HMCLR	;3
     36  40a5
     37  40a5		       ad 7a 70 	      lda	titlescreencolor
     38  40a8		       85 08		      sta	COLUPF
     39  40aa
     40  40aa					      ifconst	bmp_48x1_1_PF1
     41  40aa		       ad 8f 72 	      lda	bmp_48x1_1_PF1
     42  40ad				  -	      else
     43  40ad				  -	      lda	#0
     44  40ad				  -	      nop
     45  40ad					      endif
     46  40ad		       85 0e		      sta	PF1
     47  40af
     48  40af					      ifconst	bmp_48x1_1_PF2
     49  40af		       ad 90 72 	      lda	bmp_48x1_1_PF2
     50  40b2				  -	      else
     51  40b2				  -	      lda	#0
     52  40b2				  -	      nop
     53  40b2					      endif
     54  40b2		       85 0f		      sta	PF2
     55  40b4
     56  40b4		       4c 56 71 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  40b7
     58  40b7				   bmp_48x1_1_values
     59  40b7		       93 72		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  40b9		       b3 72		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  40bb		       d3 72		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  40bd		       00 73		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  40bf		       20 73		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  40c1		       40 73		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  40c3
------- FILE titlescreen/asm/titlescreen.asm
     76  40c3					      endif		;mk_48x1_1_on
     77  40c3
     78  40c3					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 2
      0  40c3					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  40c3
      2  40c3				   draw_bmp_48x1_2
      3  40c3
      4  40c3		       a9 00		      lda	#0
      5  40c5		       85 1b		      sta	GRP0
      6  40c7		       85 1c		      sta	GRP1
      7  40c9
      8  40c9		       a0 0b		      ldy	#11
      9  40cb				   bmp_48x1_2_pointersetup
     10  40cb		       b9 ff 70 	      lda	bmp_48x1_2_values,y
     11  40ce		       99 96 00 	      sta	scorepointers,y
     12  40d1		       88		      dey
     13  40d2		       b9 ff 70 	      lda	bmp_48x1_2_values,y
     14  40d5				  -	      ifconst	bmp_48x1_2_index
     15  40d5				  -	      sec
     16  40d5				  -	      sbc	bmp_48x1_2_index
     17  40d5					      endif
     18  40d5		       99 96 00 	      sta	scorepointers,y
     19  40d8		       88		      dey
     20  40d9		       10 f0		      bpl	bmp_48x1_2_pointersetup
     21  40db
     22  40db		       a0 13		      ldy	(#bmp_48x1_2_window-1)
     23  40dd		       84 f1		      sty	aux2
     24  40df
     25  40df				  -	      ifconst	bmp_48x1_2_background
     26  40df				  -	      lda	bmp_48x1_2_background
     27  40df					      else
     28  40df		       ad 7a 70 	      lda	titlescreencolor
     29  40e2					      endif
     30  40e2		       85 f3		      sta	aux4
     31  40e4
     32  40e4		       ad 61 73 	      lda	bmp_48x1_2_color
     33  40e7		       85 06		      sta	COLUP0	;3
     34  40e9		       85 07		      sta	COLUP1	;3
     35  40eb		       85 2b		      sta	HMCLR	;3
     36  40ed
     37  40ed		       ad 7a 70 	      lda	titlescreencolor
     38  40f0		       85 08		      sta	COLUPF
     39  40f2
     40  40f2				  -	      ifconst	bmp_48x1_2_PF1
     41  40f2				  -	      lda	bmp_48x1_2_PF1
     42  40f2					      else
     43  40f2		       a9 00		      lda	#0
     44  40f4		       ea		      nop
     45  40f5					      endif
     46  40f5		       85 0e		      sta	PF1
     47  40f7
     48  40f7				  -	      ifconst	bmp_48x1_2_PF2
     49  40f7				  -	      lda	bmp_48x1_2_PF2
     50  40f7					      else
     51  40f7		       a9 00		      lda	#0
     52  40f9		       ea		      nop
     53  40fa					      endif
     54  40fa		       85 0f		      sta	PF2
     55  40fc
     56  40fc		       4c 56 71 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  40ff
     58  40ff				   bmp_48x1_2_values
     59  40ff		       62 73		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  4101		       79 73		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  4103		       90 73		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  4105		       a7 73		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  4107		       be 73		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  4109		       d5 73		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  410b
------- FILE titlescreen/asm/titlescreen.asm
     80  410b					      endif		;mk_48x1_2_on
     81  410b
     82  410b				  -	      ifconst	mk_48x1_3_on
     83  410b				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  410b					      endif		;mk_48x1_3_on
     85  410b
     86  410b				  -	      ifconst	mk_48x1_4_on
     87  410b				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  410b					      endif		;mk_48x1_4_on
     89  410b
     90  410b				  -	      ifconst	mk_48x1_5_on
     91  410b				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  410b					      endif		;mk_48x1_5_on
     93  410b
     94  410b				  -	      ifconst	mk_48x1_6_on
     95  410b				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  410b					      endif		;mk_48x1_6_on
     97  410b
     98  410b				  -	      ifconst	mk_48x1_7_on
     99  410b				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  410b					      endif		;mk_48x1_7_on
    101  410b
    102  410b				  -	      ifconst	mk_48x1_8_on
    103  410b				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  410b					      endif		;mk_48x1_8_on
    105  410b
    106  410b					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 2
      0  410b					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  410b
      2  410b				   draw_bmp_48x2_1
      3  410b
      4  410b		       a9 00		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  410d				  -	      ifconst	bmp_48x2_1_index
      6  410d				  -	      sec
      7  410d				  -	      sbc	bmp_48x2_1_index
      8  410d					      endif
      9  410d		       85 f4		      sta	aux5+0
     10  410f		       a9 74		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  4111		       85 f5		      sta	aux5+1
     12  4113
     13  4113		       a0 0b		      ldy	#11
     14  4115				   bmp_48x2_1_pointersetup
     15  4115		       b9 4a 71 	      lda	bmp_48x2_1_values,y
     16  4118		       99 96 00 	      sta	scorepointers,y
     17  411b		       88		      dey
     18  411c		       b9 4a 71 	      lda	bmp_48x2_1_values,y
     19  411f				  -	      ifconst	bmp_48x2_1_index
     20  411f				  -	      sec
     21  411f				  -	      sbc	bmp_48x2_1_index
     22  411f					      endif
     23  411f		       99 96 00 	      sta	scorepointers,y
     24  4122		       88		      dey
     25  4123		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  4125
     27  4125
     28  4125		       a0 3f		      ldy	#(bmp_48x2_1_window-1)
     29  4127		       84 f1		      sty	aux2
     30  4129
     31  4129		       c8		      iny
     32  412a		       b1 f4		      lda	(aux5),y
     33  412c		       88		      dey
     34  412d
     35  412d		       85 06		      sta	COLUP0	;3
     36  412f		       85 07		      sta	COLUP1	;3
     37  4131		       85 2b		      sta	HMCLR	;3
     38  4133
     39  4133		       ad 7a 70 	      lda	titlescreencolor
     40  4136		       85 08		      sta	COLUPF
     41  4138
     42  4138					      ifconst	bmp_48x2_1_background
     43  4138		       ad 43 74 	      lda	bmp_48x2_1_background
     44  413b				  -	      else
     45  413b				  -	      lda	titlescreencolor
     46  413b					      endif
     47  413b		       85 f3		      sta	aux4
     48  413d					      ifconst	bmp_48x2_1_PF1
     49  413d		       ad 41 74 	      lda	bmp_48x2_1_PF1
     50  4140				  -	      else
     51  4140				  -	      lda	#0
     52  4140				  -	      nop
     53  4140					      endif
     54  4140		       85 0e		      sta	PF1
     55  4142
     56  4142					      ifconst	bmp_48x2_1_PF2
     57  4142		       ad 42 74 	      lda	bmp_48x2_1_PF2
     58  4145				  -	      else
     59  4145				  -	      lda	#0
     60  4145				  -	      nop
     61  4145					      endif
     62  4145		       85 0f		      sta	PF2
     63  4147
     64  4147		       4c d1 71 	      jmp	draw_bmp_48x2_X
     65  414a
     66  414a				   bmp_48x2_1_values
     67  414a		       44 74		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  414c		       84 74		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  414e		       00 75		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  4150		       40 75		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  4152		       80 75		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  4154		       00 76		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  4156
------- FILE titlescreen/asm/titlescreen.asm
    108  4156					      endif		;mk_48x2_1_on
    109  4156
    110  4156				  -	      ifconst	mk_48x2_2_on
    111  4156				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  4156					      endif		;mk_48x2_2_on
    113  4156
    114  4156				  -	      ifconst	mk_48x2_3_on
    115  4156				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  4156					      endif		;mk_48x2_3_on
    117  4156
    118  4156				  -	      ifconst	mk_48x2_4_on
    119  4156				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  4156					      endif		;mk_48x2_4_on
    121  4156
    122  4156				  -	      ifconst	mk_48x2_5_on
    123  4156				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  4156					      endif		;mk_48x2_5_on
    125  4156
    126  4156				  -	      ifconst	mk_48x2_6_on
    127  4156				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  4156					      endif		;mk_48x2_6_on
    129  4156
    130  4156				  -	      ifconst	mk_48x2_7_on
    131  4156				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  4156					      endif		;mk_48x2_7_on
    133  4156
    134  4156				  -	      ifconst	mk_48x2_8_on
    135  4156				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  4156					      endif		;mk_48x2_8_on
    137  4156
    138  4156					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 2
      0  4156					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  4156				   draw_bmp_48x1_X
      2  4156
      3  4156		       a9 03		      lda	#3
      4  4158		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      5  415a		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
      6  415c
      7  415c		       ba		      tsx
      8  415d		       86 f6		      stx	stack1	;save the stack pointer
      9  415f
     10  415f		       20 52 70 	      jsr	position48
     11  4162
     12  4162		       a9 03		      lda	#3	;2
     13  4164		       85 25		      sta	VDELP0	;3
     14  4166		       85 26		      sta	VDELP1	;3
     15  4168
     16  4168		       a9 01		      lda	#1	;2
     17  416a		       85 0a		      sta	CTRLPF	;3
     18  416c
     19  416c							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  416c		       85 2b		      sta	HMCLR
     21  416e
     22  416e		       85 02		      sta	WSYNC
     23  4170
     24  4170		       e6 9c		      inc	temp1	;5
     25  4172		       c6 9c		      dec	temp1	;5
     26  4174		       e6 9c		      inc	temp1	;5
     27  4176		       c6 9c		      dec	temp1	;5
     28  4178		       e6 9c		      inc	temp1	;5
     29  417a		       c6 9c		      dec	temp1	;5
     30  417c		       e6 9c		      inc	temp1	;5
     31  417e		       c6 9c		      dec	temp1	;5
     32  4180		       e6 9c		      inc	temp1	;5
     33  4182		       c6 9c		      dec	temp1	;5
     34  4184
      0  4184					      sleep	5
      1  4184				   .CYCLES    SET	5
      2  4184
      3  4184				  -	      IF	.CYCLES < 2
      4  4184				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4184				  -	      ERR
      6  4184					      ENDIF
      7  4184
      8  4184					      IF	.CYCLES & 1
      9  4184					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4184		       04 00		      nop	0
     11  4186				  -	      ELSE
     12  4186				  -	      bit	VSYNC
     13  4186					      ENDIF
     14  4186				   .CYCLES    SET	.CYCLES - 3
     15  4186					      ENDIF
     16  4186
     17  4186					      REPEAT	.CYCLES / 2
     18  4186		       ea		      nop
     19  4187					      REPEND
     36  4187
     37  4187		       c8		      iny
     38  4188
     39  4188		       4c 8b 71 	      jmp	pf48x1_X_loop_entry
     40  418b
     41  418b				  -	      if	>. != >[.+$2a]
     42  418b				  -	      align	256
     43  418b					      endif
     44  418b
     45  418b				   pf48x1_X_loop_entry
     46  418b				   pf48x1_X_loop
     47  418b		       88		      dey		;2
     48  418c		       84 f1		      sty	aux2	;3
     49  418e		       b1 96		      lda	(scorepointers+0),y	;5
     50  4190		       85 1b		      sta	GRP0	;3
     51  4192
     52  4192		       b1 98		      lda	(scorepointers+2),y	;5
     53  4194		       85 1c		      sta	GRP1	;3
     54  4196		       b1 9a		      lda	(scorepointers+4),y	;5
     55  4198		       85 1b		      sta	GRP0	;3
     56  419a
      0  419a					      sleep	2	; I could make this indirect, if we want to burn more rom 
      1  419a				   .CYCLES    SET	2
      2  419a
      3  419a				  -	      IF	.CYCLES < 2
      4  419a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  419a				  -	      ERR
      6  419a					      ENDIF
      7  419a
      8  419a				  -	      IF	.CYCLES & 1
      9  419a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  419a				  -	      nop	0
     11  419a				  -	      ELSE
     12  419a				  -	      bit	VSYNC
     13  419a				  -	      ENDIF
     14  419a				  -.CYCLES    SET	.CYCLES - 3
     15  419a					      ENDIF
     16  419a
     17  419a					      REPEAT	.CYCLES / 2
     18  419a		       ea		      nop
     19  419b					      REPEND
     58  419b		       a5 f3		      lda	aux4	;3
     59  419d		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  419f
     61  419f		       b3 a0		      lax	(scorepointers+10),y	;5
     62  41a1		       b1 9e		      lda	(scorepointers+8),y	;5
     63  41a3		       85 f7		      sta	stack2	;3
     64  41a5		       b1 9c		      lda	(scorepointers+6),y	;5
     65  41a7		       a4 f7		      ldy	stack2	;3
     66  41a9
     67  41a9		       85 1c		      sta	GRP1	;3
     68  41ab		       84 1b		      sty	GRP0	;3
     69  41ad		       86 1c		      stx	GRP1	;3
     70  41af		       84 1b		      sty	GRP0	;3
     71  41b1
     72  41b1		       a4 f1		      ldy	aux2	;3
     73  41b3		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  41b5
     75  41b5				   pf48x1_X_codeend
     76  41b5							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  41b5
     78  41b5		       a9 00		      lda	#0
     79  41b7		       85 1b		      sta	GRP0
     80  41b9		       85 1c		      sta	GRP1
     81  41bb		       85 1b		      sta	GRP0
     82  41bd		       85 1c		      sta	GRP1
     83  41bf		       85 1f		      sta	ENABL
     84  41c1		       85 1d		      sta	ENAM0
     85  41c3		       85 25		      sta	VDELP0
     86  41c5		       85 26		      sta	VDELP1
     87  41c7		       85 0d		      sta	PF0
     88  41c9		       85 0e		      sta	PF1
     89  41cb		       85 0f		      sta	PF2
     90  41cd
     91  41cd		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  41cf		       9a		      txs
     93  41d0		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  41d1					      endif		;mk_48x1_X_on
    141  41d1
    142  41d1					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 2
      0  41d1					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  41d1				   draw_bmp_48x2_X
      2  41d1
      3  41d1		       a9 00		      lda	#0
      4  41d3		       85 1b		      sta	GRP0
      5  41d5		       85 1c		      sta	GRP1
      6  41d7
      7  41d7		       a9 03		      lda	#3
      8  41d9		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  41db		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  41dd
     11  41dd		       ba		      tsx
     12  41de		       86 f6		      stx	stack1	;save the stack pointer
     13  41e0
     14  41e0		       20 52 70 	      jsr	position48
     15  41e3
     16  41e3		       a9 03		      lda	#3	;2
     17  41e5		       85 25		      sta	VDELP0	;3
     18  41e7		       85 26		      sta	VDELP1	;3
     19  41e9
     20  41e9		       a9 01		      lda	#1	;2
     21  41eb		       85 0a		      sta	CTRLPF	;3
     22  41ed
     23  41ed							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  41ed		       85 2b		      sta	HMCLR
     25  41ef		       85 02		      sta	WSYNC
     26  41f1
     27  41f1
     28  41f1							;sleep (63)		;63
     29  41f1		       e6 9c		      inc	temp1
     30  41f3		       c6 9c		      dec	temp1
     31  41f5		       e6 9c		      inc	temp1
     32  41f7		       c6 9c		      dec	temp1
     33  41f9		       e6 9c		      inc	temp1
     34  41fb		       c6 9c		      dec	temp1
     35  41fd		       e6 9c		      inc	temp1
     36  41ff		       c6 9c		      dec	temp1
     37  4201		       e6 9c		      inc	temp1
     38  4203		       c6 9c		      dec	temp1
     39  4205		       e6 9c		      inc	temp1
     40  4207		       c6 9c		      dec	temp1
      0  4209					      sleep	3
      1  4209				   .CYCLES    SET	3
      2  4209
      3  4209				  -	      IF	.CYCLES < 2
      4  4209				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4209				  -	      ERR
      6  4209					      ENDIF
      7  4209
      8  4209					      IF	.CYCLES & 1
      9  4209					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4209		       04 00		      nop	0
     11  420b				  -	      ELSE
     12  420b				  -	      bit	VSYNC
     13  420b					      ENDIF
     14  420b				   .CYCLES    SET	.CYCLES - 3
     15  420b					      ENDIF
     16  420b
     17  420b				  -	      REPEAT	.CYCLES / 2
     18  420b				  -	      nop
     19  420b					      REPEND
     42  420b
     43  420b		       a5 f3		      lda	aux4	;3
     44  420d		       85 08		      sta	COLUPF	;3
     45  420f
     46  420f		       4c 12 72 	      jmp	pf48x2_X_loop	;3
     47  4212
     48  4212				  -	      if	>. != >[.+$52]
     49  4212				  -	      align	256
     50  4212					      endif
     51  4212
     52  4212				   pf48x2_X_loop
     53  4212
     54  4212		       b1 96		      lda	(scorepointers+0),y	;5
     55  4214		       85 1b		      sta	GRP0	;3
     56  4216		       b1 98		      lda	(scorepointers+2),y	;5
     57  4218		       85 1c		      sta	GRP1	;3
     58  421a		       b1 9a		      lda	(scorepointers+4),y	;5
     59  421c		       85 1b		      sta	GRP0	;3
     60  421e
     61  421e		       b3 a0		      lax	(scorepointers+10),y	;5
     62  4220		       b1 9e		      lda	(scorepointers+8),y	;5
     63  4222		       85 f7		      sta	stack2	;3
     64  4224		       b1 9c		      lda	(scorepointers+6),y	;5
     65  4226		       a4 f7		      ldy	stack2	;3
     66  4228
     67  4228		       85 1c		      sta	GRP1	;3
     68  422a		       84 1b		      sty	GRP0	;3
     69  422c		       86 1c		      stx	GRP1	;3
     70  422e		       84 1b		      sty	GRP0	;3
     71  4230
     72  4230		       a4 f1		      ldy	aux2	;3
     73  4232
     74  4232		       b1 f4		      lda	(aux5),y	;5
     75  4234		       85 91		      sta	missile0y	;3
     76  4236
      0  4236					      sleep	3
      1  4236				   .CYCLES    SET	3
      2  4236
      3  4236				  -	      IF	.CYCLES < 2
      4  4236				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4236				  -	      ERR
      6  4236					      ENDIF
      7  4236
      8  4236					      IF	.CYCLES & 1
      9  4236					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4236		       04 00		      nop	0
     11  4238				  -	      ELSE
     12  4238				  -	      bit	VSYNC
     13  4238					      ENDIF
     14  4238				   .CYCLES    SET	.CYCLES - 3
     15  4238					      ENDIF
     16  4238
     17  4238				  -	      REPEAT	.CYCLES / 2
     18  4238				  -	      nop
     19  4238					      REPEND
     78  4238
     79  4238		       c6 f1		      dec	aux2	;5
     80  423a
     81  423a
     82  423a		       b1 96		      lda	(scorepointers+0),y	;5
     83  423c		       85 1b		      sta	GRP0	;3
     84  423e		       b1 98		      lda	(scorepointers+2),y	;5
     85  4240		       85 1c		      sta	GRP1	;3
     86  4242		       b1 9a		      lda	(scorepointers+4),y	;5
     87  4244		       85 1b		      sta	GRP0	;3
     88  4246
     89  4246		       b3 a0		      lax	(scorepointers+10),y	;5
     90  4248		       b1 9e		      lda	(scorepointers+8),y	;5
     91  424a		       85 f7		      sta	stack2	;3
     92  424c		       b1 9c		      lda	(scorepointers+6),y	;5
     93  424e		       a4 f7		      ldy	stack2	;3
     94  4250
     95  4250		       85 1c		      sta	GRP1	;3
     96  4252		       84 1b		      sty	GRP0	;3
     97  4254		       86 1c		      stx	GRP1	;3
     98  4256		       84 1b		      sty	GRP0	;3
     99  4258
      0  4258					      sleep	4
      1  4258				   .CYCLES    SET	4
      2  4258
      3  4258				  -	      IF	.CYCLES < 2
      4  4258				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4258				  -	      ERR
      6  4258					      ENDIF
      7  4258
      8  4258				  -	      IF	.CYCLES & 1
      9  4258				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4258				  -	      nop	0
     11  4258				  -	      ELSE
     12  4258				  -	      bit	VSYNC
     13  4258				  -	      ENDIF
     14  4258				  -.CYCLES    SET	.CYCLES - 3
     15  4258					      ENDIF
     16  4258
     17  4258					      REPEAT	.CYCLES / 2
     18  4258		       ea		      nop
     17  4258					      REPEND
     18  4259		       ea		      nop
     19  425a					      REPEND
    101  425a
    102  425a		       a5 91		      lda	missile0y
    103  425c		       85 07		      sta	COLUP1
    104  425e		       85 06		      sta	COLUP0
    105  4260
    106  4260		       a4 f1		      ldy	aux2	;3
    107  4262		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  4264
    109  4264
    110  4264				   pf48x2_X_codeend
    111  4264							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  4264
    113  4264		       a9 00		      lda	#0
    114  4266		       85 1b		      sta	GRP0
    115  4268		       85 1c		      sta	GRP1
    116  426a		       85 1b		      sta	GRP0
    117  426c		       85 1c		      sta	GRP1
    118  426e		       85 25		      sta	VDELP0
    119  4270		       85 26		      sta	VDELP1
    120  4272		       85 0d		      sta	PF0
    121  4274		       85 0e		      sta	PF1
    122  4276		       85 0f		      sta	PF2
    123  4278
    124  4278		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  427a		       9a		      txs
    126  427b		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  427c					      endif		;mk_48x2_X_on
    145  427c
    146  427c
    147  427c				  -	      ifconst	mk_96x2_1_on
    148  427c				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    149  427c					      endif		;mk_96x2_1_on
    150  427c
    151  427c				  -	      ifconst	mk_96x2_2_on
    152  427c				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  427c					      endif		;mk_96x2_2_on
    154  427c
    155  427c				  -	      ifconst	mk_96x2_3_on
    156  427c				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  427c					      endif		;mk_96x2_3_on
    158  427c
    159  427c				  -	      ifconst	mk_96x2_4_on
    160  427c				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  427c					      endif		;mk_96x2_4_on
    162  427c
    163  427c				  -	      ifconst	mk_96x2_5_on
    164  427c				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  427c					      endif		;mk_96x2_5_on
    166  427c
    167  427c				  -	      ifconst	mk_96x2_6_on
    168  427c				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  427c					      endif		;mk_96x2_6_on
    170  427c
    171  427c				  -	      ifconst	mk_96x2_7_on
    172  427c				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  427c					      endif		;mk_96x2_7_on
    174  427c
    175  427c				  -	      ifconst	mk_96x2_8_on
    176  427c				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  427c					      endif		;mk_96x2_8_on
    178  427c
    179  427c				  -	      ifconst	mk_score_on
    180  427c				  -	      include	"titlescreen/asm/score_kernel.asm"
    181  427c					      endif		;mk_score_on
    182  427c
    183  427c				  -	      ifconst	mk_gameselect_on
    184  427c				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  427c					      endif		;mk_gameselect_on
    186  427c
    187  427c				   PFWAIT
    188  427c		       ad 84 02 	      lda	INTIM
    189  427f		       d0 fb		      bne	PFWAIT
    190  4281
    191  4281				   OVERSCAN
    192  4281							;lda #35+128 
    193  4281
    194  4281				  -	      ifnconst	overscan_time
    195  4281				  -	      lda	#35+128
    196  4281					      else
    197  4281		       a9 a0		      lda	#overscan_time+128-5
    198  4283					      endif
    199  4283		       8d 96 02 	      sta	TIM64T
    200  4286
    201  4286							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    202  4286				  -	      ifconst	player9height
    203  4286				  -	      ldy	#8
    204  4286				  -	      lda	#0
    205  4286				  -	      sta	player0height
    206  4286				  -.playerheightfixloop
    207  4286				  -	      sta	player1height,y
    208  4286				  -	      ifconst	_NUSIZ1
    209  4286				  -	      sta	_NUSIZ1,y
    210  4286				  -	      endif
    211  4286				  -	      dey
    212  4286				  -	      bpl	.playerheightfixloop
    213  4286					      endif
    214  4286
    215  4286		       a9 c2		      lda	#%11000010
    216  4288		       85 02		      sta	WSYNC
    217  428a		       85 01		      sta	VBLANK
      0  428c					      RETURN
      1  428c				  -	      ifnconst	bankswitch
      2  428c				  -	      rts
      3  428c					      else
      4  428c		       4c dd ff 	      jmp	BS_return
      5  428f					      endif
    219  428f
    220  428f					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 2
      0  428f					      include	"titlescreen/48x1_1_image.asm"
      1  428f
      2  428f							;*** The height of the displayed data...
      3  428f		       00 20	   bmp_48x1_1_window =	32
      4  428f
      5  428f							;*** The height of the bitmap data. This can be larger than 
      6  428f							;*** the displayed data height, if you're scrolling or animating 
      7  428f							;*** the data...
      8  428f		       00 20	   bmp_48x1_1_height =	32
      9  428f
     10  428f				  -	      ifnconst	bmp_48x1_1_PF1
     11  428f				  -bmp_48x1_1_PF1
     12  428f					      endif
     13  428f		       00		      BYTE.b	%00000000
     14  4290				  -	      ifnconst	bmp_48x1_1_PF2
     15  4290				  -bmp_48x1_1_PF2
     16  4290					      endif
     17  4290		       00		      BYTE.b	%00000000
     18  4291				  -	      ifnconst	bmp_48x1_1_background
     19  4291				  -bmp_48x1_1_background
     20  4291					      endif
     21  4291		       c2		      BYTE.b	$c2
     22  4292
     23  4292				  -	      ifnconst	bmp_48x1_1_color
     24  4292				  -bmp_48x1_1_color
     25  4292					      endif
     26  4292							; *** this is the bitmap color. If you want to change it in a 
     27  4292							; *** variable instead, dim one in bB called "bmp_48x1_1_color"
     28  4292		       54		      .byte.b	$54
     29  4293
     30  4293
     31  4293				  -	      if	>. != >[.+bmp_48x1_1_height]
     32  4293				  -	      align	256
     33  4293					      endif
     34  4293
     35  4293				   bmp_48x1_1_00
     36  4293		       00		      BYTE.b	%00000000
     37  4294		       00		      BYTE.b	%00000000
     38  4295		       00		      BYTE.b	%00000000
     39  4296		       00		      BYTE.b	%00000000
     40  4297		       00		      BYTE.b	%00000000
     41  4298		       00		      BYTE.b	%00000000
     42  4299		       00		      BYTE.b	%00000000
     43  429a		       00		      BYTE.b	%00000000
     44  429b		       00		      BYTE.b	%00000000
     45  429c		       00		      BYTE.b	%00000000
     46  429d		       00		      BYTE.b	%00000000
     47  429e		       00		      BYTE.b	%00000000
     48  429f		       00		      BYTE.b	%00000000
     49  42a0		       00		      BYTE.b	%00000000
     50  42a1		       00		      BYTE.b	%00000000
     51  42a2		       00		      BYTE.b	%00000000
     52  42a3		       00		      BYTE.b	%00000000
     53  42a4		       00		      BYTE.b	%00000000
     54  42a5		       00		      BYTE.b	%00000000
     55  42a6		       00		      BYTE.b	%00000000
     56  42a7		       00		      BYTE.b	%00000000
     57  42a8		       00		      BYTE.b	%00000000
     58  42a9		       73		      BYTE.b	%01110011
     59  42aa		       4a		      BYTE.b	%01001010
     60  42ab		       4a		      BYTE.b	%01001010
     61  42ac		       4a		      BYTE.b	%01001010
     62  42ad		       4a		      BYTE.b	%01001010
     63  42ae		       73		      BYTE.b	%01110011
     64  42af		       4a		      BYTE.b	%01001010
     65  42b0		       4a		      BYTE.b	%01001010
     66  42b1		       4a		      BYTE.b	%01001010
     67  42b2		       73		      BYTE.b	%01110011
     68  42b3
     69  42b3				  -	      if	>. != >[.+(bmp_48x1_1_height)]
     70  42b3				  -	      align	256
     71  42b3					      endif
     72  42b3
     73  42b3				   bmp_48x1_1_01
     74  42b3		       87		      BYTE.b	%10000111
     75  42b4		       81		      BYTE.b	%10000001
     76  42b5		       81		      BYTE.b	%10000001
     77  42b6		       81		      BYTE.b	%10000001
     78  42b7		       81		      BYTE.b	%10000001
     79  42b8		       e1		      BYTE.b	%11100001
     80  42b9		       91		      BYTE.b	%10010001
     81  42ba		       91		      BYTE.b	%10010001
     82  42bb		       e7		      BYTE.b	%11100111
     83  42bc		       00		      BYTE.b	%00000000
     84  42bd		       84		      BYTE.b	%10000100
     85  42be		       84		      BYTE.b	%10000100
     86  42bf		       84		      BYTE.b	%10000100
     87  42c0		       84		      BYTE.b	%10000100
     88  42c1		       84		      BYTE.b	%10000100
     89  42c2		       e7		      BYTE.b	%11100111
     90  42c3		       84		      BYTE.b	%10000100
     91  42c4		       84		      BYTE.b	%10000100
     92  42c5		       84		      BYTE.b	%10000100
     93  42c6		       f3		      BYTE.b	%11110011
     94  42c7		       00		      BYTE.b	%00000000
     95  42c8		       00		      BYTE.b	%00000000
     96  42c9		       d0		      BYTE.b	%11010000
     97  42ca		       10		      BYTE.b	%00010000
     98  42cb		       10		      BYTE.b	%00010000
     99  42cc		       10		      BYTE.b	%00010000
    100  42cd		       10		      BYTE.b	%00010000
    101  42ce		       90		      BYTE.b	%10010000
    102  42cf		       11		      BYTE.b	%00010001
    103  42d0		       12		      BYTE.b	%00010010
    104  42d1		       14		      BYTE.b	%00010100
    105  42d2		       d8		      BYTE.b	%11011000
    106  42d3
    107  42d3				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    108  42d3				  -	      align	256
    109  42d3					      endif
    110  42d3
    111  42d3				   bmp_48x1_1_02
    112  42d3		       df		      BYTE.b	%11011111
    113  42d4		       08		      BYTE.b	%00001000
    114  42d5		       08		      BYTE.b	%00001000
    115  42d6		       04		      BYTE.b	%00000100
    116  42d7		       04		      BYTE.b	%00000100
    117  42d8		       02		      BYTE.b	%00000010
    118  42d9		       02		      BYTE.b	%00000010
    119  42da		       01		      BYTE.b	%00000001
    120  42db		       df		      BYTE.b	%11011111
    121  42dc		       00		      BYTE.b	%00000000
    122  42dd		       a0		      BYTE.b	%10100000
    123  42de		       a0		      BYTE.b	%10100000
    124  42df		       a0		      BYTE.b	%10100000
    125  42e0		       a0		      BYTE.b	%10100000
    126  42e1		       a0		      BYTE.b	%10100000
    127  42e2		       a0		      BYTE.b	%10100000
    128  42e3		       a0		      BYTE.b	%10100000
    129  42e4		       a4		      BYTE.b	%10100100
    130  42e5		       aa		      BYTE.b	%10101010
    131  42e6		       31		      BYTE.b	%00110001
    132  42e7		       00		      BYTE.b	%00000000
    133  42e8		       00		      BYTE.b	%00000000
    134  42e9		       88		      BYTE.b	%10001000
    135  42ea		       88		      BYTE.b	%10001000
    136  42eb		       88		      BYTE.b	%10001000
    137  42ec		       88		      BYTE.b	%10001000
    138  42ed		       88		      BYTE.b	%10001000
    139  42ee		       88		      BYTE.b	%10001000
    140  42ef		       88		      BYTE.b	%10001000
    141  42f0		       88		      BYTE.b	%10001000
    142  42f1		       88		      BYTE.b	%10001000
    143  42f2		       be		      BYTE.b	%10111110
    144  42f3
    145  42f3					      if	>. != >[.+(bmp_48x1_1_height)]
    146  4300		       00 00 00 00*	      align	256
    147  4300					      endif
    148  4300
    149  4300				   bmp_48x1_1_03
    150  4300		       7e		      BYTE.b	%01111110
    151  4301		       20		      BYTE.b	%00100000
    152  4302		       20		      BYTE.b	%00100000
    153  4303		       10		      BYTE.b	%00010000
    154  4304		       08		      BYTE.b	%00001000
    155  4305		       08		      BYTE.b	%00001000
    156  4306		       04		      BYTE.b	%00000100
    157  4307		       04		      BYTE.b	%00000100
    158  4308		       7e		      BYTE.b	%01111110
    159  4309		       00		      BYTE.b	%00000000
    160  430a		       be		      BYTE.b	%10111110
    161  430b		       88		      BYTE.b	%10001000
    162  430c		       88		      BYTE.b	%10001000
    163  430d		       88		      BYTE.b	%10001000
    164  430e		       88		      BYTE.b	%10001000
    165  430f		       88		      BYTE.b	%10001000
    166  4310		       88		      BYTE.b	%10001000
    167  4311		       88		      BYTE.b	%10001000
    168  4312		       88		      BYTE.b	%10001000
    169  4313		       be		      BYTE.b	%10111110
    170  4314		       00		      BYTE.b	%00000000
    171  4315		       00		      BYTE.b	%00000000
    172  4316		       f7		      BYTE.b	%11110111
    173  4317		       84		      BYTE.b	%10000100
    174  4318		       84		      BYTE.b	%10000100
    175  4319		       84		      BYTE.b	%10000100
    176  431a		       84		      BYTE.b	%10000100
    177  431b		       87		      BYTE.b	%10000111
    178  431c		       84		      BYTE.b	%10000100
    179  431d		       84		      BYTE.b	%10000100
    180  431e		       84		      BYTE.b	%10000100
    181  431f		       07		      BYTE.b	%00000111
    182  4320
    183  4320				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    184  4320				  -	      align	256
    185  4320					      endif
    186  4320
    187  4320				   bmp_48x1_1_04
    188  4320		       90		      BYTE.b	%10010000
    189  4321		       90		      BYTE.b	%10010000
    190  4322		       90		      BYTE.b	%10010000
    191  4323		       90		      BYTE.b	%10010000
    192  4324		       f0		      BYTE.b	%11110000
    193  4325		       90		      BYTE.b	%10010000
    194  4326		       90		      BYTE.b	%10010000
    195  4327		       90		      BYTE.b	%10010000
    196  4328		       60		      BYTE.b	%01100000
    197  4329		       00		      BYTE.b	%00000000
    198  432a		       f4		      BYTE.b	%11110100
    199  432b		       84		      BYTE.b	%10000100
    200  432c		       84		      BYTE.b	%10000100
    201  432d		       84		      BYTE.b	%10000100
    202  432e		       84		      BYTE.b	%10000100
    203  432f		       84		      BYTE.b	%10000100
    204  4330		       84		      BYTE.b	%10000100
    205  4331		       84		      BYTE.b	%10000100
    206  4332		       8a		      BYTE.b	%10001010
    207  4333		       91		      BYTE.b	%10010001
    208  4334		       00		      BYTE.b	%00000000
    209  4335		       00		      BYTE.b	%00000000
    210  4336		       c4		      BYTE.b	%11000100
    211  4337		       04		      BYTE.b	%00000100
    212  4338		       04		      BYTE.b	%00000100
    213  4339		       04		      BYTE.b	%00000100
    214  433a		       04		      BYTE.b	%00000100
    215  433b		       84		      BYTE.b	%10000100
    216  433c		       04		      BYTE.b	%00000100
    217  433d		       04		      BYTE.b	%00000100
    218  433e		       0a		      BYTE.b	%00001010
    219  433f		       d1		      BYTE.b	%11010001
    220  4340
    221  4340				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    222  4340				  -	      align	256
    223  4340					      endif
    224  4340
    225  4340				   bmp_48x1_1_05
    226  4340		       00		      BYTE.b	%00000000
    227  4341		       00		      BYTE.b	%00000000
    228  4342		       00		      BYTE.b	%00000000
    229  4343		       00		      BYTE.b	%00000000
    230  4344		       00		      BYTE.b	%00000000
    231  4345		       00		      BYTE.b	%00000000
    232  4346		       00		      BYTE.b	%00000000
    233  4347		       00		      BYTE.b	%00000000
    234  4348		       00		      BYTE.b	%00000000
    235  4349		       00		      BYTE.b	%00000000
    236  434a		       00		      BYTE.b	%00000000
    237  434b		       00		      BYTE.b	%00000000
    238  434c		       00		      BYTE.b	%00000000
    239  434d		       00		      BYTE.b	%00000000
    240  434e		       00		      BYTE.b	%00000000
    241  434f		       00		      BYTE.b	%00000000
    242  4350		       00		      BYTE.b	%00000000
    243  4351		       00		      BYTE.b	%00000000
    244  4352		       00		      BYTE.b	%00000000
    245  4353		       00		      BYTE.b	%00000000
    246  4354		       00		      BYTE.b	%00000000
    247  4355		       00		      BYTE.b	%00000000
    248  4356		       1e		      BYTE.b	%00011110
    249  4357		       01		      BYTE.b	%00000001
    250  4358		       01		      BYTE.b	%00000001
    251  4359		       01		      BYTE.b	%00000001
    252  435a		       01		      BYTE.b	%00000001
    253  435b		       0e		      BYTE.b	%00001110
    254  435c		       10		      BYTE.b	%00010000
    255  435d		       10		      BYTE.b	%00010000
    256  435e		       10		      BYTE.b	%00010000
    257  435f		       4f		      BYTE.b	%01001111
    258  4360		       40		      BYTE.b	%01000000
    259  4361
------- FILE titlescreen/asm/titlescreen.asm
    222  4361					      endif
    223  4361					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 2
      0  4361					      include	"titlescreen/48x1_2_image.asm"
      1  4361
      2  4361							; *** if you want to modify the bitmap color on the fly, just dim a
      3  4361							; *** variable in bB called 'bmp_48x1_2_color' , and use it to set the
      4  4361							; *** color.
      5  4361
      6  4361							;*** The height of the displayed data...
      7  4361		       00 14	   bmp_48x1_2_window =	20
      8  4361
      9  4361							;*** The height of the bitmap data. This can be larger than
     10  4361							;*** the displayed data height, if you are scrolling or animating
     11  4361							;*** the data...
     12  4361		       00 14	   bmp_48x1_2_height =	20
     13  4361
     14  4361				  -	      ifnconst	bmp_48x1_2_color
     15  4361				  -bmp_48x1_2_color
     16  4361					      endif
     17  4361							; *** this is the bitmap color. If you want to change it in a 
     18  4361							; *** variable instead, dim one in bB called bmp_48x1_2_color
     19  4361		       40		      .byte.b	$40
     20  4362
     21  4362
     22  4362				  -	      if	>. != >[.+bmp_48x1_2_height]
     23  4362				  -	      align	256
     24  4362					      endif
     25  4362
     26  4362				   bmp_48x1_2_00
     27  4362
     28  4362		       00		      BYTE.b	%00000000
     29  4363		       00		      BYTE.b	%00000000
     30  4364		       00		      BYTE.b	%00000000
     31  4365		       00		      BYTE.b	%00000000
     32  4366		       00		      BYTE.b	%00000000
     33  4367		       00		      BYTE.b	%00000000
     34  4368		       00		      BYTE.b	%00000000
     35  4369		       00		      BYTE.b	%00000000
     36  436a		       00		      BYTE.b	%00000000
     37  436b		       00		      BYTE.b	%00000000
     38  436c		       00		      BYTE.b	%00000000
     39  436d		       00		      BYTE.b	%00000000
     40  436e		       00		      BYTE.b	%00000000
     41  436f		       00		      BYTE.b	%00000000
     42  4370		       00		      BYTE.b	%00000000
     43  4371		       00		      BYTE.b	%00000000
     44  4372		       00		      BYTE.b	%00000000
     45  4373		       00		      BYTE.b	%00000000
     46  4374		       00		      BYTE.b	%00000000
     47  4375		       00		      BYTE.b	%00000000
     48  4376		       00		      BYTE.b	%00000000
     49  4377		       00		      BYTE.b	%00000000
     50  4378		       00		      BYTE.b	%00000000
     51  4379
     52  4379				  -	      if	>. != >[.+(bmp_48x1_2_height)]
     53  4379				  -	      align	256
     54  4379					      endif
     55  4379
     56  4379				   bmp_48x1_2_01
     57  4379
     58  4379		       00		      BYTE.b	%00000000
     59  437a		       00		      BYTE.b	%00000000
     60  437b		       00		      BYTE.b	%00000000
     61  437c		       00		      BYTE.b	%00000000
     62  437d		       00		      BYTE.b	%00000000
     63  437e		       00		      BYTE.b	%00000000
     64  437f		       00		      BYTE.b	%00000000
     65  4380		       00		      BYTE.b	%00000000
     66  4381		       00		      BYTE.b	%00000000
     67  4382		       c4		      BYTE.b	%11000100
     68  4383		       24		      BYTE.b	%00100100
     69  4384		       e4		      BYTE.b	%11100100
     70  4385		       84		      BYTE.b	%10000100
     71  4386		       6e		      BYTE.b	%01101110
     72  4387		       00		      BYTE.b	%00000000
     73  4388		       46		      BYTE.b	%01000110
     74  4389		       88		      BYTE.b	%10001000
     75  438a		       88		      BYTE.b	%10001000
     76  438b		       88		      BYTE.b	%10001000
     77  438c		       46		      BYTE.b	%01000110
     78  438d		       00		      BYTE.b	%00000000
     79  438e		       00		      BYTE.b	%00000000
     80  438f		       88		      BYTE.b	%10001000
     81  4390
     82  4390				  -	      if	>. != >[.+(bmp_48x1_2_height)]
     83  4390				  -	      align	256
     84  4390					      endif
     85  4390
     86  4390				   bmp_48x1_2_02
     87  4390
     88  4390		       00		      BYTE.b	%00000000
     89  4391		       00		      BYTE.b	%00000000
     90  4392		       00		      BYTE.b	%00000000
     91  4393		       ea		      BYTE.b	%11101010
     92  4394		       4a		      BYTE.b	%01001010
     93  4395		       4a		      BYTE.b	%01001010
     94  4396		       4e		      BYTE.b	%01001110
     95  4397		       ea		      BYTE.b	%11101010
     96  4398		       00		      BYTE.b	%00000000
     97  4399		       68		      BYTE.b	%01101000
     98  439a		       a8		      BYTE.b	%10101000
     99  439b		       ac		      BYTE.b	%10101100
    100  439c		       80		      BYTE.b	%10000000
    101  439d		       60		      BYTE.b	%01100000
    102  439e		       00		      BYTE.b	%00000000
    103  439f		       80		      BYTE.b	%10000000
    104  43a0		       40		      BYTE.b	%01000000
    105  43a1		       40		      BYTE.b	%01000000
    106  43a2		       40		      BYTE.b	%01000000
    107  43a3		       80		      BYTE.b	%10000000
    108  43a4		       00		      BYTE.b	%00000000
    109  43a5		       00		      BYTE.b	%00000000
    110  43a6		       40		      BYTE.b	%01000000
    111  43a7
    112  43a7				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    113  43a7				  -	      align	256
    114  43a7					      endif
    115  43a7
    116  43a7				   bmp_48x1_2_03
    117  43a7
    118  43a7		       00		      BYTE.b	%00000000
    119  43a8		       00		      BYTE.b	%00000000
    120  43a9		       00		      BYTE.b	%00000000
    121  43aa		       60		      BYTE.b	%01100000
    122  43ab		       80		      BYTE.b	%10000000
    123  43ac		       80		      BYTE.b	%10000000
    124  43ad		       80		      BYTE.b	%10000000
    125  43ae		       60		      BYTE.b	%01100000
    126  43af		       00		      BYTE.b	%00000000
    127  43b0		       e4		      BYTE.b	%11100100
    128  43b1		       aa		      BYTE.b	%10101010
    129  43b2		       6a		      BYTE.b	%01101010
    130  43b3		       00		      BYTE.b	%00000000
    131  43b4		       00		      BYTE.b	%00000000
    132  43b5		       00		      BYTE.b	%00000000
    133  43b6		       ec		      BYTE.b	%11101100
    134  43b7		       8a		      BYTE.b	%10001010
    135  43b8		       4a		      BYTE.b	%01001010
    136  43b9		       2a		      BYTE.b	%00101010
    137  43ba		       c6		      BYTE.b	%11000110
    138  43bb		       00		      BYTE.b	%00000000
    139  43bc		       00		      BYTE.b	%00000000
    140  43bd		       2a		      BYTE.b	%00101010
    141  43be
    142  43be				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    143  43be				  -	      align	256
    144  43be					      endif
    145  43be
    146  43be				   bmp_48x1_2_04
    147  43be
    148  43be		       00		      BYTE.b	%00000000
    149  43bf		       00		      BYTE.b	%00000000
    150  43c0		       00		      BYTE.b	%00000000
    151  43c1		       00		      BYTE.b	%00000000
    152  43c2		       00		      BYTE.b	%00000000
    153  43c3		       00		      BYTE.b	%00000000
    154  43c4		       00		      BYTE.b	%00000000
    155  43c5		       00		      BYTE.b	%00000000
    156  43c6		       00		      BYTE.b	%00000000
    157  43c7		       6c		      BYTE.b	%01101100
    158  43c8		       c4		      BYTE.b	%11000100
    159  43c9		       e6		      BYTE.b	%11100110
    160  43ca		       00		      BYTE.b	%00000000
    161  43cb		       00		      BYTE.b	%00000000
    162  43cc		       00		      BYTE.b	%00000000
    163  43cd		       ec		      BYTE.b	%11101100
    164  43ce		       42		      BYTE.b	%01000010
    165  43cf		       4c		      BYTE.b	%01001100
    166  43d0		       c8		      BYTE.b	%11001000
    167  43d1		       4e		      BYTE.b	%01001110
    168  43d2		       00		      BYTE.b	%00000000
    169  43d3		       00		      BYTE.b	%00000000
    170  43d4		       c8		      BYTE.b	%11001000
    171  43d5
    172  43d5				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    173  43d5				  -	      align	256
    174  43d5					      endif
    175  43d5
    176  43d5				   bmp_48x1_2_05
    177  43d5
    178  43d5		       00		      BYTE.b	%00000000
    179  43d6		       00		      BYTE.b	%00000000
    180  43d7		       00		      BYTE.b	%00000000
    181  43d8		       00		      BYTE.b	%00000000
    182  43d9		       00		      BYTE.b	%00000000
    183  43da		       00		      BYTE.b	%00000000
    184  43db		       00		      BYTE.b	%00000000
    185  43dc		       00		      BYTE.b	%00000000
    186  43dd		       00		      BYTE.b	%00000000
    187  43de		       00		      BYTE.b	%00000000
    188  43df		       00		      BYTE.b	%00000000
    189  43e0		       00		      BYTE.b	%00000000
    190  43e1		       00		      BYTE.b	%00000000
    191  43e2		       00		      BYTE.b	%00000000
    192  43e3		       00		      BYTE.b	%00000000
    193  43e4		       00		      BYTE.b	%00000000
    194  43e5		       00		      BYTE.b	%00000000
    195  43e6		       00		      BYTE.b	%00000000
    196  43e7		       00		      BYTE.b	%00000000
    197  43e8		       00		      BYTE.b	%00000000
    198  43e9		       00		      BYTE.b	%00000000
    199  43ea		       00		      BYTE.b	%00000000
    200  43eb		       00		      BYTE.b	%00000000
    201  43ec
------- FILE titlescreen/asm/titlescreen.asm
    225  43ec					      endif
    226  43ec				  -	      ifconst	mk_48x1_3_on
    227  43ec				  -	      include	"titlescreen/48x1_3_image.asm"
    228  43ec					      endif
    229  43ec				  -	      ifconst	mk_48x1_4_on
    230  43ec				  -	      include	"titlescreen/48x1_4_image.asm"
    231  43ec					      endif
    232  43ec				  -	      ifconst	mk_48x1_5_on
    233  43ec				  -	      include	"titlescreen/48x1_5_image.asm"
    234  43ec					      endif
    235  43ec				  -	      ifconst	mk_48x1_6_on
    236  43ec				  -	      include	"titlescreen/48x1_6_image.asm"
    237  43ec					      endif
    238  43ec				  -	      ifconst	mk_48x1_7_on
    239  43ec				  -	      include	"titlescreen/48x1_7_image.asm"
    240  43ec					      endif
    241  43ec				  -	      ifconst	mk_48x1_8_on
    242  43ec				  -	      include	"titlescreen/48x1_8_image.asm"
    243  43ec					      endif
    244  43ec
    245  43ec
    246  43ec					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 2
      0  43ec					      include	"titlescreen/48x2_1_image.asm"
      1  43ec
      2  43ec							;*** The height of the displayed data...
      3  43ec		       00 40	   bmp_48x2_1_window =	64
      4  43ec
      5  43ec							;*** The height of the bitmap data. This can be larger than 
      6  43ec							;*** the displayed data height, if you're scrolling or animating 
      7  43ec							;*** the data...
      8  43ec		       00 40	   bmp_48x2_1_height =	64
      9  43ec
     10  43ec					      if	>. != >[.+(bmp_48x2_1_height)]
     11  4400		       00 00 00 00*	      align	256
     12  4400					      endif
     13  4400		       00		      BYTE.b	0	; leave this here!
     14  4401
     15  4401
     16  4401							;*** The color of each line in the bitmap, in reverse order...
     17  4401				   bmp_48x2_1_colors
     18  4401		       0e		      BYTE.b	$0e
     19  4402		       0e		      BYTE.b	$0e
     20  4403		       0e		      BYTE.b	$0e
     21  4404		       0e		      BYTE.b	$0e
     22  4405		       0e		      BYTE.b	$0e
     23  4406		       0e		      BYTE.b	$0e
     24  4407		       0e		      BYTE.b	$0e
     25  4408		       0e		      BYTE.b	$0e
     26  4409		       0e		      BYTE.b	$0e
     27  440a		       0e		      BYTE.b	$0e
     28  440b		       0e		      BYTE.b	$0e
     29  440c		       0e		      BYTE.b	$0e
     30  440d		       0e		      BYTE.b	$0e
     31  440e		       0e		      BYTE.b	$0e
     32  440f		       0e		      BYTE.b	$0e
     33  4410		       0e		      BYTE.b	$0e
     34  4411		       0e		      BYTE.b	$0e
     35  4412		       0e		      BYTE.b	$0e
     36  4413		       0e		      BYTE.b	$0e
     37  4414		       0e		      BYTE.b	$0e
     38  4415		       0e		      BYTE.b	$0e
     39  4416		       0e		      BYTE.b	$0e
     40  4417		       0e		      BYTE.b	$0e
     41  4418		       0e		      BYTE.b	$0e
     42  4419		       0e		      BYTE.b	$0e
     43  441a		       0e		      BYTE.b	$0e
     44  441b		       0e		      BYTE.b	$0e
     45  441c		       0e		      BYTE.b	$0e
     46  441d		       0e		      BYTE.b	$0e
     47  441e		       0e		      BYTE.b	$0e
     48  441f		       0e		      BYTE.b	$0e
     49  4420		       0e		      BYTE.b	$0e
     50  4421		       0e		      BYTE.b	$0e
     51  4422		       0e		      BYTE.b	$0e
     52  4423		       0e		      BYTE.b	$0e
     53  4424		       0e		      BYTE.b	$0e
     54  4425		       0e		      BYTE.b	$0e
     55  4426		       0e		      BYTE.b	$0e
     56  4427		       0e		      BYTE.b	$0e
     57  4428		       0e		      BYTE.b	$0e
     58  4429		       0e		      BYTE.b	$0e
     59  442a		       0e		      BYTE.b	$0e
     60  442b		       0e		      BYTE.b	$0e
     61  442c		       0e		      BYTE.b	$0e
     62  442d		       0e		      BYTE.b	$0e
     63  442e		       0e		      BYTE.b	$0e
     64  442f		       0e		      BYTE.b	$0e
     65  4430		       0e		      BYTE.b	$0e
     66  4431		       0e		      BYTE.b	$0e
     67  4432		       0e		      BYTE.b	$0e
     68  4433		       0e		      BYTE.b	$0e
     69  4434		       0e		      BYTE.b	$0e
     70  4435		       0e		      BYTE.b	$0e
     71  4436		       0e		      BYTE.b	$0e
     72  4437		       0e		      BYTE.b	$0e
     73  4438		       0e		      BYTE.b	$0e
     74  4439		       0e		      BYTE.b	$0e
     75  443a		       0e		      BYTE.b	$0e
     76  443b		       0e		      BYTE.b	$0e
     77  443c		       0e		      BYTE.b	$0e
     78  443d		       0e		      BYTE.b	$0e
     79  443e		       0e		      BYTE.b	$0e
     80  443f		       0e		      BYTE.b	$0e
     81  4440		       0e		      BYTE.b	$0e
     82  4441
     83  4441				  -	      ifnconst	bmp_48x2_1_PF1
     84  4441				  -bmp_48x2_1_PF1
     85  4441					      endif
     86  4441		       00		      BYTE.b	%00000000
     87  4442				  -	      ifnconst	bmp_48x2_1_PF2
     88  4442				  -bmp_48x2_1_PF2
     89  4442					      endif
     90  4442		       ff		      BYTE.b	%11111111
     91  4443				  -	      ifnconst	bmp_48x2_1_background
     92  4443				  -bmp_48x2_1_background
     93  4443					      endif
     94  4443		       00		      BYTE.b	$00
     95  4444
     96  4444				  -	      if	>. != >[.+bmp_48x2_1_height]
     97  4444				  -	      align	256
     98  4444					      endif
     99  4444
    100  4444
    101  4444				   bmp_48x2_1_00
    102  4444		       f8		      BYTE.b	%11111000
    103  4445		       f8		      BYTE.b	%11111000
    104  4446		       00		      BYTE.b	%00000000
    105  4447		       00		      BYTE.b	%00000000
    106  4448		       00		      BYTE.b	%00000000
    107  4449		       3c		      BYTE.b	%00111100
    108  444a		       18		      BYTE.b	%00011000
    109  444b		       00		      BYTE.b	%00000000
    110  444c		       00		      BYTE.b	%00000000
    111  444d		       07		      BYTE.b	%00000111
    112  444e		       07		      BYTE.b	%00000111
    113  444f		       00		      BYTE.b	%00000000
    114  4450		       00		      BYTE.b	%00000000
    115  4451		       00		      BYTE.b	%00000000
    116  4452		       00		      BYTE.b	%00000000
    117  4453		       00		      BYTE.b	%00000000
    118  4454		       00		      BYTE.b	%00000000
    119  4455		       00		      BYTE.b	%00000000
    120  4456		       00		      BYTE.b	%00000000
    121  4457		       00		      BYTE.b	%00000000
    122  4458		       00		      BYTE.b	%00000000
    123  4459		       00		      BYTE.b	%00000000
    124  445a		       00		      BYTE.b	%00000000
    125  445b		       00		      BYTE.b	%00000000
    126  445c		       00		      BYTE.b	%00000000
    127  445d		       00		      BYTE.b	%00000000
    128  445e		       00		      BYTE.b	%00000000
    129  445f		       00		      BYTE.b	%00000000
    130  4460		       00		      BYTE.b	%00000000
    131  4461		       00		      BYTE.b	%00000000
    132  4462		       00		      BYTE.b	%00000000
    133  4463		       00		      BYTE.b	%00000000
    134  4464		       00		      BYTE.b	%00000000
    135  4465		       00		      BYTE.b	%00000000
    136  4466		       00		      BYTE.b	%00000000
    137  4467		       00		      BYTE.b	%00000000
    138  4468		       00		      BYTE.b	%00000000
    139  4469		       00		      BYTE.b	%00000000
    140  446a		       00		      BYTE.b	%00000000
    141  446b		       00		      BYTE.b	%00000000
    142  446c		       00		      BYTE.b	%00000000
    143  446d		       00		      BYTE.b	%00000000
    144  446e		       00		      BYTE.b	%00000000
    145  446f		       00		      BYTE.b	%00000000
    146  4470		       00		      BYTE.b	%00000000
    147  4471		       00		      BYTE.b	%00000000
    148  4472		       00		      BYTE.b	%00000000
    149  4473		       00		      BYTE.b	%00000000
    150  4474		       00		      BYTE.b	%00000000
    151  4475		       00		      BYTE.b	%00000000
    152  4476		       00		      BYTE.b	%00000000
    153  4477		       00		      BYTE.b	%00000000
    154  4478		       00		      BYTE.b	%00000000
    155  4479		       00		      BYTE.b	%00000000
    156  447a		       00		      BYTE.b	%00000000
    157  447b		       00		      BYTE.b	%00000000
    158  447c		       00		      BYTE.b	%00000000
    159  447d		       00		      BYTE.b	%00000000
    160  447e		       00		      BYTE.b	%00000000
    161  447f		       00		      BYTE.b	%00000000
    162  4480		       00		      BYTE.b	%00000000
    163  4481		       00		      BYTE.b	%00000000
    164  4482		       00		      BYTE.b	%00000000
    165  4483		       00		      BYTE.b	%00000000
    166  4484
    167  4484				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    168  4484				  -	      align	256
    169  4484					      endif
    170  4484
    171  4484				   bmp_48x2_1_01
    172  4484		       00		      BYTE.b	%00000000
    173  4485		       00		      BYTE.b	%00000000
    174  4486		       f8		      BYTE.b	%11111000
    175  4487		       f8		      BYTE.b	%11111000
    176  4488		       f0		      BYTE.b	%11110000
    177  4489		       00		      BYTE.b	%00000000
    178  448a		       00		      BYTE.b	%00000000
    179  448b		       07		      BYTE.b	%00000111
    180  448c		       c7		      BYTE.b	%11000111
    181  448d		       e0		      BYTE.b	%11100000
    182  448e		       e0		      BYTE.b	%11100000
    183  448f		       01		      BYTE.b	%00000001
    184  4490		       01		      BYTE.b	%00000001
    185  4491		       fc		      BYTE.b	%11111100
    186  4492		       fc		      BYTE.b	%11111100
    187  4493		       60		      BYTE.b	%01100000
    188  4494		       00		      BYTE.b	%00000000
    189  4495		       07		      BYTE.b	%00000111
    190  4496		       07		      BYTE.b	%00000111
    191  4497		       03		      BYTE.b	%00000011
    192  4498		       00		      BYTE.b	%00000000
    193  4499		       00		      BYTE.b	%00000000
    194  449a		       00		      BYTE.b	%00000000
    195  449b		       00		      BYTE.b	%00000000
    196  449c		       00		      BYTE.b	%00000000
    197  449d		       00		      BYTE.b	%00000000
    198  449e		       00		      BYTE.b	%00000000
    199  449f		       00		      BYTE.b	%00000000
    200  44a0		       00		      BYTE.b	%00000000
    201  44a1		       00		      BYTE.b	%00000000
    202  44a2		       00		      BYTE.b	%00000000
    203  44a3		       00		      BYTE.b	%00000000
    204  44a4		       00		      BYTE.b	%00000000
    205  44a5		       00		      BYTE.b	%00000000
    206  44a6		       00		      BYTE.b	%00000000
    207  44a7		       00		      BYTE.b	%00000000
    208  44a8		       00		      BYTE.b	%00000000
    209  44a9		       00		      BYTE.b	%00000000
    210  44aa		       00		      BYTE.b	%00000000
    211  44ab		       00		      BYTE.b	%00000000
    212  44ac		       00		      BYTE.b	%00000000
    213  44ad		       00		      BYTE.b	%00000000
    214  44ae		       00		      BYTE.b	%00000000
    215  44af		       00		      BYTE.b	%00000000
    216  44b0		       00		      BYTE.b	%00000000
    217  44b1		       00		      BYTE.b	%00000000
    218  44b2		       00		      BYTE.b	%00000000
    219  44b3		       00		      BYTE.b	%00000000
    220  44b4		       00		      BYTE.b	%00000000
    221  44b5		       00		      BYTE.b	%00000000
    222  44b6		       00		      BYTE.b	%00000000
    223  44b7		       00		      BYTE.b	%00000000
    224  44b8		       00		      BYTE.b	%00000000
    225  44b9		       00		      BYTE.b	%00000000
    226  44ba		       00		      BYTE.b	%00000000
    227  44bb		       00		      BYTE.b	%00000000
    228  44bc		       00		      BYTE.b	%00000000
    229  44bd		       00		      BYTE.b	%00000000
    230  44be		       00		      BYTE.b	%00000000
    231  44bf		       00		      BYTE.b	%00000000
    232  44c0		       00		      BYTE.b	%00000000
    233  44c1		       00		      BYTE.b	%00000000
    234  44c2		       00		      BYTE.b	%00000000
    235  44c3		       00		      BYTE.b	%00000000
    236  44c4
    237  44c4					      if	>. != >[.+(bmp_48x2_1_height)]
    238  4500		       00 00 00 00*	      align	256
    239  4500					      endif
    240  4500
    241  4500				   bmp_48x2_1_02
    242  4500		       00		      BYTE.b	%00000000
    243  4501		       00		      BYTE.b	%00000000
    244  4502		       00		      BYTE.b	%00000000
    245  4503		       00		      BYTE.b	%00000000
    246  4504		       00		      BYTE.b	%00000000
    247  4505		       00		      BYTE.b	%00000000
    248  4506		       00		      BYTE.b	%00000000
    249  4507		       00		      BYTE.b	%00000000
    250  4508		       00		      BYTE.b	%00000000
    251  4509		       00		      BYTE.b	%00000000
    252  450a		       00		      BYTE.b	%00000000
    253  450b		       f8		      BYTE.b	%11111000
    254  450c		       f8		      BYTE.b	%11111000
    255  450d		       60		      BYTE.b	%01100000
    256  450e		       00		      BYTE.b	%00000000
    257  450f		       07		      BYTE.b	%00000111
    258  4510		       07		      BYTE.b	%00000111
    259  4511		       f0		      BYTE.b	%11110000
    260  4512		       f0		      BYTE.b	%11110000
    261  4513		       f0		      BYTE.b	%11110000
    262  4514		       00		      BYTE.b	%00000000
    263  4515		       00		      BYTE.b	%00000000
    264  4516		       00		      BYTE.b	%00000000
    265  4517		       00		      BYTE.b	%00000000
    266  4518		       00		      BYTE.b	%00000000
    267  4519		       00		      BYTE.b	%00000000
    268  451a		       00		      BYTE.b	%00000000
    269  451b		       00		      BYTE.b	%00000000
    270  451c		       00		      BYTE.b	%00000000
    271  451d		       00		      BYTE.b	%00000000
    272  451e		       00		      BYTE.b	%00000000
    273  451f		       00		      BYTE.b	%00000000
    274  4520		       00		      BYTE.b	%00000000
    275  4521		       00		      BYTE.b	%00000000
    276  4522		       00		      BYTE.b	%00000000
    277  4523		       00		      BYTE.b	%00000000
    278  4524		       00		      BYTE.b	%00000000
    279  4525		       00		      BYTE.b	%00000000
    280  4526		       00		      BYTE.b	%00000000
    281  4527		       00		      BYTE.b	%00000000
    282  4528		       00		      BYTE.b	%00000000
    283  4529		       00		      BYTE.b	%00000000
    284  452a		       00		      BYTE.b	%00000000
    285  452b		       00		      BYTE.b	%00000000
    286  452c		       00		      BYTE.b	%00000000
    287  452d		       00		      BYTE.b	%00000000
    288  452e		       00		      BYTE.b	%00000000
    289  452f		       ff		      BYTE.b	%11111111
    290  4530		       ff		      BYTE.b	%11111111
    291  4531		       ff		      BYTE.b	%11111111
    292  4532		       ff		      BYTE.b	%11111111
    293  4533		       f8		      BYTE.b	%11111000
    294  4534		       f8		      BYTE.b	%11111000
    295  4535		       f8		      BYTE.b	%11111000
    296  4536		       f8		      BYTE.b	%11111000
    297  4537		       f8		      BYTE.b	%11111000
    298  4538		       f8		      BYTE.b	%11111000
    299  4539		       e0		      BYTE.b	%11100000
    300  453a		       e0		      BYTE.b	%11100000
    301  453b		       e0		      BYTE.b	%11100000
    302  453c		       e0		      BYTE.b	%11100000
    303  453d		       e0		      BYTE.b	%11100000
    304  453e		       7f		      BYTE.b	%01111111
    305  453f		       1f		      BYTE.b	%00011111
    306  4540
    307  4540				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    308  4540				  -	      align	256
    309  4540					      endif
    310  4540
    311  4540				   bmp_48x2_1_03
    312  4540		       00		      BYTE.b	%00000000
    313  4541		       00		      BYTE.b	%00000000
    314  4542		       00		      BYTE.b	%00000000
    315  4543		       00		      BYTE.b	%00000000
    316  4544		       00		      BYTE.b	%00000000
    317  4545		       00		      BYTE.b	%00000000
    318  4546		       00		      BYTE.b	%00000000
    319  4547		       00		      BYTE.b	%00000000
    320  4548		       00		      BYTE.b	%00000000
    321  4549		       00		      BYTE.b	%00000000
    322  454a		       00		      BYTE.b	%00000000
    323  454b		       00		      BYTE.b	%00000000
    324  454c		       00		      BYTE.b	%00000000
    325  454d		       00		      BYTE.b	%00000000
    326  454e		       00		      BYTE.b	%00000000
    327  454f		       f8		      BYTE.b	%11111000
    328  4550		       f8		      BYTE.b	%11111000
    329  4551		       00		      BYTE.b	%00000000
    330  4552		       00		      BYTE.b	%00000000
    331  4553		       00		      BYTE.b	%00000000
    332  4554		       00		      BYTE.b	%00000000
    333  4555		       00		      BYTE.b	%00000000
    334  4556		       00		      BYTE.b	%00000000
    335  4557		       00		      BYTE.b	%00000000
    336  4558		       00		      BYTE.b	%00000000
    337  4559		       00		      BYTE.b	%00000000
    338  455a		       00		      BYTE.b	%00000000
    339  455b		       00		      BYTE.b	%00000000
    340  455c		       00		      BYTE.b	%00000000
    341  455d		       00		      BYTE.b	%00000000
    342  455e		       00		      BYTE.b	%00000000
    343  455f		       00		      BYTE.b	%00000000
    344  4560		       00		      BYTE.b	%00000000
    345  4561		       00		      BYTE.b	%00000000
    346  4562		       00		      BYTE.b	%00000000
    347  4563		       00		      BYTE.b	%00000000
    348  4564		       00		      BYTE.b	%00000000
    349  4565		       00		      BYTE.b	%00000000
    350  4566		       00		      BYTE.b	%00000000
    351  4567		       00		      BYTE.b	%00000000
    352  4568		       00		      BYTE.b	%00000000
    353  4569		       00		      BYTE.b	%00000000
    354  456a		       00		      BYTE.b	%00000000
    355  456b		       00		      BYTE.b	%00000000
    356  456c		       00		      BYTE.b	%00000000
    357  456d		       00		      BYTE.b	%00000000
    358  456e		       1f		      BYTE.b	%00011111
    359  456f		       ff		      BYTE.b	%11111111
    360  4570		       ff		      BYTE.b	%11111111
    361  4571		       e0		      BYTE.b	%11100000
    362  4572		       e0		      BYTE.b	%11100000
    363  4573		       e0		      BYTE.b	%11100000
    364  4574		       e0		      BYTE.b	%11100000
    365  4575		       ff		      BYTE.b	%11111111
    366  4576		       ff		      BYTE.b	%11111111
    367  4577		       ff		      BYTE.b	%11111111
    368  4578		       ff		      BYTE.b	%11111111
    369  4579		       3f		      BYTE.b	%00111111
    370  457a		       1f		      BYTE.b	%00011111
    371  457b		       1f		      BYTE.b	%00011111
    372  457c		       1f		      BYTE.b	%00011111
    373  457d		       3f		      BYTE.b	%00111111
    374  457e		       ff		      BYTE.b	%11111111
    375  457f		       ff		      BYTE.b	%11111111
    376  4580
    377  4580				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    378  4580				  -	      align	256
    379  4580					      endif
    380  4580
    381  4580				   bmp_48x2_1_04
    382  4580		       00		      BYTE.b	%00000000
    383  4581		       00		      BYTE.b	%00000000
    384  4582		       00		      BYTE.b	%00000000
    385  4583		       00		      BYTE.b	%00000000
    386  4584		       00		      BYTE.b	%00000000
    387  4585		       00		      BYTE.b	%00000000
    388  4586		       00		      BYTE.b	%00000000
    389  4587		       00		      BYTE.b	%00000000
    390  4588		       00		      BYTE.b	%00000000
    391  4589		       00		      BYTE.b	%00000000
    392  458a		       00		      BYTE.b	%00000000
    393  458b		       00		      BYTE.b	%00000000
    394  458c		       00		      BYTE.b	%00000000
    395  458d		       00		      BYTE.b	%00000000
    396  458e		       00		      BYTE.b	%00000000
    397  458f		       00		      BYTE.b	%00000000
    398  4590		       00		      BYTE.b	%00000000
    399  4591		       00		      BYTE.b	%00000000
    400  4592		       00		      BYTE.b	%00000000
    401  4593		       00		      BYTE.b	%00000000
    402  4594		       00		      BYTE.b	%00000000
    403  4595		       00		      BYTE.b	%00000000
    404  4596		       00		      BYTE.b	%00000000
    405  4597		       00		      BYTE.b	%00000000
    406  4598		       1f		      BYTE.b	%00011111
    407  4599		       3f		      BYTE.b	%00111111
    408  459a		       3f		      BYTE.b	%00111111
    409  459b		       1f		      BYTE.b	%00011111
    410  459c		       1f		      BYTE.b	%00011111
    411  459d		       1f		      BYTE.b	%00011111
    412  459e		       1f		      BYTE.b	%00011111
    413  459f		       00		      BYTE.b	%00000000
    414  45a0		       00		      BYTE.b	%00000000
    415  45a1		       00		      BYTE.b	%00000000
    416  45a2		       00		      BYTE.b	%00000000
    417  45a3		       00		      BYTE.b	%00000000
    418  45a4		       00		      BYTE.b	%00000000
    419  45a5		       00		      BYTE.b	%00000000
    420  45a6		       00		      BYTE.b	%00000000
    421  45a7		       00		      BYTE.b	%00000000
    422  45a8		       00		      BYTE.b	%00000000
    423  45a9		       00		      BYTE.b	%00000000
    424  45aa		       00		      BYTE.b	%00000000
    425  45ab		       00		      BYTE.b	%00000000
    426  45ac		       00		      BYTE.b	%00000000
    427  45ad		       00		      BYTE.b	%00000000
    428  45ae		       ff		      BYTE.b	%11111111
    429  45af		       ff		      BYTE.b	%11111111
    430  45b0		       ff		      BYTE.b	%11111111
    431  45b1		       ff		      BYTE.b	%11111111
    432  45b2		       ff		      BYTE.b	%11111111
    433  45b3		       c3		      BYTE.b	%11000011
    434  45b4		       c3		      BYTE.b	%11000011
    435  45b5		       c3		      BYTE.b	%11000011
    436  45b6		       c3		      BYTE.b	%11000011
    437  45b7		       c3		      BYTE.b	%11000011
    438  45b8		       c3		      BYTE.b	%11000011
    439  45b9		       01		      BYTE.b	%00000001
    440  45ba		       00		      BYTE.b	%00000000
    441  45bb		       00		      BYTE.b	%00000000
    442  45bc		       00		      BYTE.b	%00000000
    443  45bd		       80		      BYTE.b	%10000000
    444  45be		       ff		      BYTE.b	%11111111
    445  45bf		       ff		      BYTE.b	%11111111
    446  45c0
    447  45c0					      if	>. != >[.+(bmp_48x2_1_height)]
    448  4600		       00 00 00 00*	      align	256
    449  4600					      endif
    450  4600
    451  4600				   bmp_48x2_1_05
    452  4600		       00		      BYTE.b	%00000000
    453  4601		       00		      BYTE.b	%00000000
    454  4602		       00		      BYTE.b	%00000000
    455  4603		       00		      BYTE.b	%00000000
    456  4604		       00		      BYTE.b	%00000000
    457  4605		       00		      BYTE.b	%00000000
    458  4606		       00		      BYTE.b	%00000000
    459  4607		       00		      BYTE.b	%00000000
    460  4608		       00		      BYTE.b	%00000000
    461  4609		       00		      BYTE.b	%00000000
    462  460a		       00		      BYTE.b	%00000000
    463  460b		       00		      BYTE.b	%00000000
    464  460c		       00		      BYTE.b	%00000000
    465  460d		       00		      BYTE.b	%00000000
    466  460e		       00		      BYTE.b	%00000000
    467  460f		       00		      BYTE.b	%00000000
    468  4610		       00		      BYTE.b	%00000000
    469  4611		       00		      BYTE.b	%00000000
    470  4612		       00		      BYTE.b	%00000000
    471  4613		       00		      BYTE.b	%00000000
    472  4614		       00		      BYTE.b	%00000000
    473  4615		       00		      BYTE.b	%00000000
    474  4616		       00		      BYTE.b	%00000000
    475  4617		       00		      BYTE.b	%00000000
    476  4618		       07		      BYTE.b	%00000111
    477  4619		       07		      BYTE.b	%00000111
    478  461a		       07		      BYTE.b	%00000111
    479  461b		       07		      BYTE.b	%00000111
    480  461c		       07		      BYTE.b	%00000111
    481  461d		       00		      BYTE.b	%00000000
    482  461e		       00		      BYTE.b	%00000000
    483  461f		       00		      BYTE.b	%00000000
    484  4620		       00		      BYTE.b	%00000000
    485  4621		       00		      BYTE.b	%00000000
    486  4622		       00		      BYTE.b	%00000000
    487  4623		       00		      BYTE.b	%00000000
    488  4624		       00		      BYTE.b	%00000000
    489  4625		       00		      BYTE.b	%00000000
    490  4626		       00		      BYTE.b	%00000000
    491  4627		       00		      BYTE.b	%00000000
    492  4628		       00		      BYTE.b	%00000000
    493  4629		       00		      BYTE.b	%00000000
    494  462a		       00		      BYTE.b	%00000000
    495  462b		       00		      BYTE.b	%00000000
    496  462c		       00		      BYTE.b	%00000000
    497  462d		       00		      BYTE.b	%00000000
    498  462e		       c0		      BYTE.b	%11000000
    499  462f		       e0		      BYTE.b	%11100000
    500  4630		       e0		      BYTE.b	%11100000
    501  4631		       e0		      BYTE.b	%11100000
    502  4632		       e0		      BYTE.b	%11100000
    503  4633		       e0		      BYTE.b	%11100000
    504  4634		       e0		      BYTE.b	%11100000
    505  4635		       e0		      BYTE.b	%11100000
    506  4636		       e0		      BYTE.b	%11100000
    507  4637		       e0		      BYTE.b	%11100000
    508  4638		       e0		      BYTE.b	%11100000
    509  4639		       e0		      BYTE.b	%11100000
    510  463a		       e0		      BYTE.b	%11100000
    511  463b		       e0		      BYTE.b	%11100000
    512  463c		       e0		      BYTE.b	%11100000
    513  463d		       c0		      BYTE.b	%11000000
    514  463e		       80		      BYTE.b	%10000000
    515  463f		       00		      BYTE.b	%00000000
------- FILE titlescreen/asm/titlescreen.asm
    248  4640					      endif
    249  4640				  -	      ifconst	mk_48x2_2_on
    250  4640				  -	      include	"titlescreen/48x2_2_image.asm"
    251  4640					      endif
    252  4640				  -	      ifconst	mk_48x2_3_on
    253  4640				  -	      include	"titlescreen/48x2_3_image.asm"
    254  4640					      endif
    255  4640				  -	      ifconst	mk_48x2_4_on
    256  4640				  -	      include	"titlescreen/48x2_4_image.asm"
    257  4640					      endif
    258  4640				  -	      ifconst	mk_48x2_5_on
    259  4640				  -	      include	"titlescreen/48x2_5_image.asm"
    260  4640					      endif
    261  4640				  -	      ifconst	mk_48x2_6_on
    262  4640				  -	      include	"titlescreen/48x2_6_image.asm"
    263  4640					      endif
    264  4640				  -	      ifconst	mk_48x2_7_on
    265  4640				  -	      include	"titlescreen/48x2_7_image.asm"
    266  4640					      endif
    267  4640
    268  4640				  -	      ifconst	mk_48x2_8_on
    269  4640				  -	      include	"titlescreen/48x2_8_image.asm"
    270  4640					      endif
    271  4640
    272  4640
    273  4640				  -	      ifconst	mk_96x2_1_on
    274  4640				  -	      include	"titlescreen/96x2_1_image.asm"
    275  4640					      endif
    276  4640				  -	      ifconst	mk_96x2_2_on
    277  4640				  -	      include	"titlescreen/96x2_2_image.asm"
    278  4640					      endif
    279  4640				  -	      ifconst	mk_96x2_3_on
    280  4640				  -	      include	"titlescreen/96x2_3_image.asm"
    281  4640					      endif
    282  4640				  -	      ifconst	mk_96x2_4_on
    283  4640				  -	      include	"titlescreen/96x2_4_image.asm"
    284  4640					      endif
    285  4640				  -	      ifconst	mk_96x2_5_on
    286  4640				  -	      include	"titlescreen/96x2_5_image.asm"
    287  4640					      endif
    288  4640				  -	      ifconst	mk_96x2_6_on
    289  4640				  -	      include	"titlescreen/96x2_6_image.asm"
    290  4640					      endif
    291  4640				  -	      ifconst	mk_96x2_7_on
    292  4640				  -	      include	"titlescreen/96x2_7_image.asm"
    293  4640					      endif
    294  4640				  -	      ifconst	mk_96x2_8_on
    295  4640				  -	      include	"titlescreen/96x2_8_image.asm"
    296  4640					      endif
    297  4640
    298  4640				  -	      ifconst	mk_player_on
    299  4640				  -	      include	"titlescreen/player_image.asm"
    300  4640					      endif
    301  4640
    302  4640				  -	      ifconst	mk_score_on
    303  4640				  -	      include	"titlescreen/score_image.asm"
    304  4640					      endif
    305  4640
    306  4640				  -	      ifconst	mk_gameselect_on
    307  4640				  -	      include	"titlescreen/gameselect_image.asm"
    308  4640					      endif
    309  4640
    310  4640				  -	      ifconst	mk_player_on
    311  4640				  -	      include	"titlescreen/asm/player_kernel.asm"
    312  4640					      endif		;mk_player_on
    313  4640
    314  4640
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\animsrevwpause.bas.asm
   9838  4640
   9839  4640				   .
   9840  4640							; 
   9841  4640
   9842  4640				   .
   9843  4640							; 
   9844  4640
   9845  4640				   .
   9846  4640							; 
   9847  4640
   9848  4640				   .
   9849  4640							; 
   9850  4640
   9851  4640				   .L0426		;  bank 5
   9852  4640
   9853  4640					      if	ECHO4
      2452 bytes of ROM space left in bank 4
   9854  4640					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   9855  4640					      endif
   9856  4640		       00 01	   ECHO4      =	1
   9857  4fd4					      ORG	$4FF4-bscode_length
   9858  4fd4					      RORG	$7FF4-bscode_length
   9859  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   9860  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9861  4fd6				  -	      stx	FASTFETCH
   9862  4fd6					      endif
   9863  4fd6		       9a		      txs
   9864  4fd7				  -	      if	bankswitch == 64
   9865  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9866  4fd7					      else
   9867  4fd7		       a9 f2		      lda	#>(start-1)
   9868  4fd9					      endif
   9869  4fd9		       48		      pha
   9870  4fda		       a9 51		      lda	#<(start-1)
   9871  4fdc		       48		      pha
   9872  4fdd		       48		      pha
   9873  4fde		       8a		      txa
   9874  4fdf		       48		      pha
   9875  4fe0		       ba		      tsx
   9876  4fe1					      if	bankswitch != 64
   9877  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   9878  4fe3		       2a		      rol
   9879  4fe4		       2a		      rol
   9880  4fe5		       2a		      rol
   9881  4fe6		       2a		      rol
   9882  4fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9883  4fe9		       aa		      tax
   9884  4fea		       e8		      inx
   9885  4feb				  -	      else
   9886  4feb				  -	      lda	4,x	; get high byte of return address
   9887  4feb				  -	      tay
   9888  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9889  4feb				  -	      sta	4,x
   9890  4feb				  -	      tya
   9891  4feb				  -	      lsr
   9892  4feb				  -	      lsr
   9893  4feb				  -	      lsr
   9894  4feb				  -	      lsr
   9895  4feb				  -	      tax
   9896  4feb				  -	      inx
   9897  4feb					      endif
   9898  4feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   9899  4fee		       68		      pla
   9900  4fef		       aa		      tax
   9901  4ff0		       68		      pla
   9902  4ff1		       60		      rts
   9903  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9904  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9905  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9906  4ff2					      endif
   9907  4ffc					      ORG	$4FFC
   9908  4ffc					      RORG	$7FFC
   9909  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   9910  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   9911  5000					      ORG	$5000
   9912  5000					      RORG	$9000
   9913  5000				   ._P_U
   9914  5000							; _P_U
   9915  5000
   9916  5000				   .
   9917  5000							; 
   9918  5000
   9919  5000				   .
   9920  5000							; 
   9921  5000
   9922  5000				   .
   9923  5000							; 
   9924  5000
   9925  5000				   .
   9926  5000							; 
   9927  5000
   9928  5000				   .L0427		;  player1color:
   9929  5000
   9930  5000		       a2 84		      LDX	#<playercolorL0427_1
   9931  5002		       86 87		      STX	player1color
   9932  5004		       a9 f7		      LDA	#>playercolorL0427_1
   9933  5006		       85 88		      STA	player1color+1
   9934  5008				   .
   9935  5008							; 
   9936  5008
   9937  5008				   .L0428		;  on _Frame_Counter goto __Pu00 __Pu01 __Pu02 __Pu03
   9938  5008
   9939  5008		       a6 d9		      LDX	_Frame_Counter
   9940  500a		       bd 13 90 	      LDA	.L0428jumptablehi,x
   9941  500d		       48		      PHA
   9942  500e		       bd 17 90 	      LDA	.L0428jumptablelo,x
   9943  5011		       48		      PHA
   9944  5012		       60		      RTS
   9945  5013				   .L0428jumptablehi
   9946  5013		       90		      .byte.b	>(.__Pu00-1)
   9947  5014		       90		      .byte.b	>(.__Pu01-1)
   9948  5015		       90		      .byte.b	>(.__Pu02-1)
   9949  5016		       90		      .byte.b	>(.__Pu03-1)
   9950  5017				   .L0428jumptablelo
   9951  5017		       27		      .byte.b	<(.__Pu00-1)
   9952  5018		       36		      .byte.b	<(.__Pu01-1)
   9953  5019		       45		      .byte.b	<(.__Pu02-1)
   9954  501a		       54		      .byte.b	<(.__Pu03-1)
   9955  501b				   .
   9956  501b							; 
   9957  501b
   9958  501b				   .__Pu_Frame_Done
   9959  501b							; __Pu_Frame_Done
   9960  501b
   9961  501b				   .L0429		;  return
   9962  501b
   9963  501b		       ba		      tsx
   9964  501c		       b5 02		      lda	2,x	; check return address
   9965  501e		       49 90		      eor	#(>*)	; vs. current PCH
   9966  5020		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9967  5022		       f0 03		      beq	*+5	; if equal, do normal return
   9968  5024		       4c dd ff 	      JMP	BS_return
   9969  5027		       60		      RTS
   9970  5028				   .
   9971  5028							; 
   9972  5028
   9973  5028				   .__Pu00
   9974  5028							; __Pu00
   9975  5028
   9976  5028				   .L0430		;  player1:
   9977  5028
   9978  5028		       a2 9c		      LDX	#<playerL0430_1
   9979  502a		       86 8c		      STX	player1pointerlo
   9980  502c		       a9 f7		      LDA	#>playerL0430_1
   9981  502e		       85 8d		      STA	player1pointerhi
   9982  5030		       a9 16		      LDA	#22
   9983  5032		       85 8f		      STA	player1height
   9984  5034				   .
   9985  5034							; 
   9986  5034
   9987  5034				   .L0431		;  goto __Pu_Frame_Done
   9988  5034
   9989  5034		       4c 1b 90 	      jmp	.__Pu_Frame_Done
   9990  5037
   9991  5037				   .
   9992  5037							; 
   9993  5037
   9994  5037				   .__Pu01
   9995  5037							; __Pu01
   9996  5037
   9997  5037				   .L0432		;  player1:
   9998  5037
   9999  5037		       a2 b3		      LDX	#<playerL0432_1
  10000  5039		       86 8c		      STX	player1pointerlo
  10001  503b		       a9 f7		      LDA	#>playerL0432_1
  10002  503d		       85 8d		      STA	player1pointerhi
  10003  503f		       a9 16		      LDA	#22
  10004  5041		       85 8f		      STA	player1height
  10005  5043				   .
  10006  5043							; 
  10007  5043
  10008  5043				   .L0433		;  goto __Pu_Frame_Done
  10009  5043
  10010  5043		       4c 1b 90 	      jmp	.__Pu_Frame_Done
  10011  5046
  10012  5046				   .
  10013  5046							; 
  10014  5046
  10015  5046				   .__Pu02
  10016  5046							; __Pu02
  10017  5046
  10018  5046				   .
  10019  5046							; 
  10020  5046
  10021  5046				   .L0434		;  player1:
  10022  5046
  10023  5046		       a2 ca		      LDX	#<playerL0434_1
  10024  5048		       86 8c		      STX	player1pointerlo
  10025  504a		       a9 f7		      LDA	#>playerL0434_1
  10026  504c		       85 8d		      STA	player1pointerhi
  10027  504e		       a9 17		      LDA	#23
  10028  5050		       85 8f		      STA	player1height
  10029  5052				   .
  10030  5052							; 
  10031  5052
  10032  5052				   .L0435		;  goto __Pu_Frame_Done
  10033  5052
  10034  5052		       4c 1b 90 	      jmp	.__Pu_Frame_Done
  10035  5055
  10036  5055				   .
  10037  5055							; 
  10038  5055
  10039  5055				   .__Pu03
  10040  5055							; __Pu03
  10041  5055
  10042  5055				   .L0436		;  player1:
  10043  5055
  10044  5055		       a2 e2		      LDX	#<playerL0436_1
  10045  5057		       86 8c		      STX	player1pointerlo
  10046  5059		       a9 f7		      LDA	#>playerL0436_1
  10047  505b		       85 8d		      STA	player1pointerhi
  10048  505d		       a9 17		      LDA	#23
  10049  505f		       85 8f		      STA	player1height
  10050  5061				   .
  10051  5061							; 
  10052  5061
  10053  5061				   .L0437		;  goto __Pu_Frame_Done
  10054  5061
  10055  5061		       4c 1b 90 	      jmp	.__Pu_Frame_Done
  10056  5064
  10057  5064				   .
  10058  5064							; 
  10059  5064
  10060  5064				   .L0438		;  return
  10061  5064
  10062  5064		       ba		      tsx
  10063  5065		       b5 02		      lda	2,x	; check return address
  10064  5067		       49 90		      eor	#(>*)	; vs. current PCH
  10065  5069		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10066  506b		       f0 03		      beq	*+5	; if equal, do normal return
  10067  506d		       4c dd ff 	      JMP	BS_return
  10068  5070		       60		      RTS
  10069  5071				   .
  10070  5071							; 
  10071  5071
  10072  5071				   ._P_D
  10073  5071							; _P_D
  10074  5071
  10075  5071				   .
  10076  5071							; 
  10077  5071
  10078  5071				   .
  10079  5071							; 
  10080  5071
  10081  5071				   .
  10082  5071							; 
  10083  5071
  10084  5071				   .
  10085  5071							; 
  10086  5071
  10087  5071				   .L0439		;  player1color:
  10088  5071
  10089  5071		       a2 00		      LDX	#<playercolorL0439_1
  10090  5073		       86 87		      STX	player1color
  10091  5075		       a9 f8		      LDA	#>playercolorL0439_1
  10092  5077		       85 88		      STA	player1color+1
  10093  5079				   .
  10094  5079							; 
  10095  5079
  10096  5079				   .L0440		;  on _Frame_Counter goto __Pd00 __Pd01 __Pd02 __Pd03
  10097  5079
  10098  5079		       a6 d9		      LDX	_Frame_Counter
  10099  507b		       bd 84 90 	      LDA	.L0440jumptablehi,x
  10100  507e		       48		      PHA
  10101  507f		       bd 88 90 	      LDA	.L0440jumptablelo,x
  10102  5082		       48		      PHA
  10103  5083		       60		      RTS
  10104  5084				   .L0440jumptablehi
  10105  5084		       90		      .byte.b	>(.__Pd00-1)
  10106  5085		       90		      .byte.b	>(.__Pd01-1)
  10107  5086		       90		      .byte.b	>(.__Pd02-1)
  10108  5087		       90		      .byte.b	>(.__Pd03-1)
  10109  5088				   .L0440jumptablelo
  10110  5088		       98		      .byte.b	<(.__Pd00-1)
  10111  5089		       a7		      .byte.b	<(.__Pd01-1)
  10112  508a		       b6		      .byte.b	<(.__Pd02-1)
  10113  508b		       c5		      .byte.b	<(.__Pd03-1)
  10114  508c				   .
  10115  508c							; 
  10116  508c
  10117  508c				   .__Pd_Frame_Done
  10118  508c							; __Pd_Frame_Done
  10119  508c
  10120  508c				   .L0441		;  return
  10121  508c
  10122  508c		       ba		      tsx
  10123  508d		       b5 02		      lda	2,x	; check return address
  10124  508f		       49 90		      eor	#(>*)	; vs. current PCH
  10125  5091		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10126  5093		       f0 03		      beq	*+5	; if equal, do normal return
  10127  5095		       4c dd ff 	      JMP	BS_return
  10128  5098		       60		      RTS
  10129  5099				   .
  10130  5099							; 
  10131  5099
  10132  5099				   .__Pd00
  10133  5099							; __Pd00
  10134  5099
  10135  5099				   .
  10136  5099							; 
  10137  5099
  10138  5099				   .L0442		;  player1:
  10139  5099
  10140  5099		       a2 18		      LDX	#<playerL0442_1
  10141  509b		       86 8c		      STX	player1pointerlo
  10142  509d		       a9 f8		      LDA	#>playerL0442_1
  10143  509f		       85 8d		      STA	player1pointerhi
  10144  50a1		       a9 16		      LDA	#22
  10145  50a3		       85 8f		      STA	player1height
  10146  50a5				   .
  10147  50a5							; 
  10148  50a5
  10149  50a5				   .L0443		;  goto __Pd_Frame_Done
  10150  50a5
  10151  50a5		       4c 8c 90 	      jmp	.__Pd_Frame_Done
  10152  50a8
  10153  50a8				   .
  10154  50a8							; 
  10155  50a8
  10156  50a8				   .__Pd01
  10157  50a8							; __Pd01
  10158  50a8
  10159  50a8				   .L0444		;  player1:
  10160  50a8
  10161  50a8		       a2 2f		      LDX	#<playerL0444_1
  10162  50aa		       86 8c		      STX	player1pointerlo
  10163  50ac		       a9 f8		      LDA	#>playerL0444_1
  10164  50ae		       85 8d		      STA	player1pointerhi
  10165  50b0		       a9 16		      LDA	#22
  10166  50b2		       85 8f		      STA	player1height
  10167  50b4				   .L0445		;  goto __Pd_Frame_Done
  10168  50b4
  10169  50b4		       4c 8c 90 	      jmp	.__Pd_Frame_Done
  10170  50b7
  10171  50b7				   .
  10172  50b7							; 
  10173  50b7
  10174  50b7				   .__Pd02
  10175  50b7							; __Pd02
  10176  50b7
  10177  50b7				   .
  10178  50b7							; 
  10179  50b7
  10180  50b7				   .L0446		;  player1:
  10181  50b7
  10182  50b7		       a2 46		      LDX	#<playerL0446_1
  10183  50b9		       86 8c		      STX	player1pointerlo
  10184  50bb		       a9 f8		      LDA	#>playerL0446_1
  10185  50bd		       85 8d		      STA	player1pointerhi
  10186  50bf		       a9 17		      LDA	#23
  10187  50c1		       85 8f		      STA	player1height
  10188  50c3				   .L0447		;  goto __Pd_Frame_Done
  10189  50c3
  10190  50c3		       4c 8c 90 	      jmp	.__Pd_Frame_Done
  10191  50c6
  10192  50c6				   .
  10193  50c6							; 
  10194  50c6
  10195  50c6				   .__Pd03
  10196  50c6							; __Pd03
  10197  50c6
  10198  50c6				   .
  10199  50c6							; 
  10200  50c6
  10201  50c6				   .L0448		;  player1:
  10202  50c6
  10203  50c6		       a2 5e		      LDX	#<playerL0448_1
  10204  50c8		       86 8c		      STX	player1pointerlo
  10205  50ca		       a9 f8		      LDA	#>playerL0448_1
  10206  50cc		       85 8d		      STA	player1pointerhi
  10207  50ce		       a9 17		      LDA	#23
  10208  50d0		       85 8f		      STA	player1height
  10209  50d2				   .L0449		;  goto __Pd_Frame_Done
  10210  50d2
  10211  50d2		       4c 8c 90 	      jmp	.__Pd_Frame_Done
  10212  50d5
  10213  50d5				   .L0450		;  return
  10214  50d5
  10215  50d5		       ba		      tsx
  10216  50d6		       b5 02		      lda	2,x	; check return address
  10217  50d8		       49 90		      eor	#(>*)	; vs. current PCH
  10218  50da		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10219  50dc		       f0 03		      beq	*+5	; if equal, do normal return
  10220  50de		       4c dd ff 	      JMP	BS_return
  10221  50e1		       60		      RTS
  10222  50e2				   ._P_R
  10223  50e2							; _P_R
  10224  50e2
  10225  50e2				   .
  10226  50e2							; 
  10227  50e2
  10228  50e2				   .
  10229  50e2							; 
  10230  50e2
  10231  50e2				   .
  10232  50e2							; 
  10233  50e2
  10234  50e2				   .L0451		;  player1color:
  10235  50e2
  10236  50e2		       a2 76		      LDX	#<playercolorL0451_1
  10237  50e4		       86 87		      STX	player1color
  10238  50e6		       a9 f8		      LDA	#>playercolorL0451_1
  10239  50e8		       85 88		      STA	player1color+1
  10240  50ea				   .L0452		;  on _Frame_Counter goto __Pr00 __Pr01 __Pr02 __Pr03
  10241  50ea
  10242  50ea		       a6 d9		      LDX	_Frame_Counter
  10243  50ec		       bd f5 90 	      LDA	.L0452jumptablehi,x
  10244  50ef		       48		      PHA
  10245  50f0		       bd f9 90 	      LDA	.L0452jumptablelo,x
  10246  50f3		       48		      PHA
  10247  50f4		       60		      RTS
  10248  50f5				   .L0452jumptablehi
  10249  50f5		       91		      .byte.b	>(.__Pr00-1)
  10250  50f6		       91		      .byte.b	>(.__Pr01-1)
  10251  50f7		       91		      .byte.b	>(.__Pr02-1)
  10252  50f8		       91		      .byte.b	>(.__Pr03-1)
  10253  50f9				   .L0452jumptablelo
  10254  50f9		       09		      .byte.b	<(.__Pr00-1)
  10255  50fa		       18		      .byte.b	<(.__Pr01-1)
  10256  50fb		       27		      .byte.b	<(.__Pr02-1)
  10257  50fc		       36		      .byte.b	<(.__Pr03-1)
  10258  50fd				   .
  10259  50fd							; 
  10260  50fd
  10261  50fd				   .__Pr_Frame_Done
  10262  50fd							; __Pr_Frame_Done
  10263  50fd
  10264  50fd				   .L0453		;  return
  10265  50fd
  10266  50fd		       ba		      tsx
  10267  50fe		       b5 02		      lda	2,x	; check return address
  10268  5100		       49 91		      eor	#(>*)	; vs. current PCH
  10269  5102		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10270  5104		       f0 03		      beq	*+5	; if equal, do normal return
  10271  5106		       4c dd ff 	      JMP	BS_return
  10272  5109		       60		      RTS
  10273  510a				   .
  10274  510a							; 
  10275  510a
  10276  510a				   .__Pr00
  10277  510a							; __Pr00
  10278  510a
  10279  510a				   .L0454		;  player1:
  10280  510a
  10281  510a		       a2 8e		      LDX	#<playerL0454_1
  10282  510c		       86 8c		      STX	player1pointerlo
  10283  510e		       a9 f8		      LDA	#>playerL0454_1
  10284  5110		       85 8d		      STA	player1pointerhi
  10285  5112		       a9 16		      LDA	#22
  10286  5114		       85 8f		      STA	player1height
  10287  5116				   .L0455		;  goto __Pr_Frame_Done
  10288  5116
  10289  5116		       4c fd 90 	      jmp	.__Pr_Frame_Done
  10290  5119
  10291  5119				   .
  10292  5119							; 
  10293  5119
  10294  5119				   .__Pr01
  10295  5119							; __Pr01
  10296  5119
  10297  5119				   .L0456		;  player1:
  10298  5119
  10299  5119		       a2 a5		      LDX	#<playerL0456_1
  10300  511b		       86 8c		      STX	player1pointerlo
  10301  511d		       a9 f8		      LDA	#>playerL0456_1
  10302  511f		       85 8d		      STA	player1pointerhi
  10303  5121		       a9 16		      LDA	#22
  10304  5123		       85 8f		      STA	player1height
  10305  5125				   .L0457		;  goto __Pr_Frame_Done
  10306  5125
  10307  5125		       4c fd 90 	      jmp	.__Pr_Frame_Done
  10308  5128
  10309  5128				   .
  10310  5128							; 
  10311  5128
  10312  5128				   .__Pr02
  10313  5128							; __Pr02
  10314  5128
  10315  5128				   .L0458		;  player1:
  10316  5128
  10317  5128		       a2 bc		      LDX	#<playerL0458_1
  10318  512a		       86 8c		      STX	player1pointerlo
  10319  512c		       a9 f8		      LDA	#>playerL0458_1
  10320  512e		       85 8d		      STA	player1pointerhi
  10321  5130		       a9 17		      LDA	#23
  10322  5132		       85 8f		      STA	player1height
  10323  5134				   .L0459		;  goto __Pr_Frame_Done
  10324  5134
  10325  5134		       4c fd 90 	      jmp	.__Pr_Frame_Done
  10326  5137
  10327  5137				   .
  10328  5137							; 
  10329  5137
  10330  5137				   .__Pr03
  10331  5137							; __Pr03
  10332  5137
  10333  5137				   .L0460		;  player1:
  10334  5137
  10335  5137		       a2 d4		      LDX	#<playerL0460_1
  10336  5139		       86 8c		      STX	player1pointerlo
  10337  513b		       a9 f8		      LDA	#>playerL0460_1
  10338  513d		       85 8d		      STA	player1pointerhi
  10339  513f		       a9 17		      LDA	#23
  10340  5141		       85 8f		      STA	player1height
  10341  5143				   .L0461		;  goto __Pr_Frame_Done
  10342  5143
  10343  5143		       4c fd 90 	      jmp	.__Pr_Frame_Done
  10344  5146
  10345  5146				   .
  10346  5146							; 
  10347  5146
  10348  5146				   .L0462		;  return
  10349  5146
  10350  5146		       ba		      tsx
  10351  5147		       b5 02		      lda	2,x	; check return address
  10352  5149		       49 91		      eor	#(>*)	; vs. current PCH
  10353  514b		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10354  514d		       f0 03		      beq	*+5	; if equal, do normal return
  10355  514f		       4c dd ff 	      JMP	BS_return
  10356  5152		       60		      RTS
  10357  5153				   ._P_L
  10358  5153							; _P_L
  10359  5153
  10360  5153				   .
  10361  5153							; 
  10362  5153
  10363  5153				   .
  10364  5153							; 
  10365  5153
  10366  5153				   .
  10367  5153							; 
  10368  5153
  10369  5153				   .
  10370  5153							; 
  10371  5153
  10372  5153				   .
  10373  5153							; 
  10374  5153
  10375  5153				   .L0463		;  player1color:
  10376  5153
  10377  5153		       a2 00		      LDX	#<playercolorL0463_1
  10378  5155		       86 87		      STX	player1color
  10379  5157		       a9 f9		      LDA	#>playercolorL0463_1
  10380  5159		       85 88		      STA	player1color+1
  10381  515b				   .
  10382  515b							; 
  10383  515b
  10384  515b				   .L0464		;  on _Frame_Counter goto __Pl00 __Pl01 __Pl02 __Pl03
  10385  515b
  10386  515b		       a6 d9		      LDX	_Frame_Counter
  10387  515d		       bd 66 91 	      LDA	.L0464jumptablehi,x
  10388  5160		       48		      PHA
  10389  5161		       bd 6a 91 	      LDA	.L0464jumptablelo,x
  10390  5164		       48		      PHA
  10391  5165		       60		      RTS
  10392  5166				   .L0464jumptablehi
  10393  5166		       91		      .byte.b	>(.__Pl00-1)
  10394  5167		       91		      .byte.b	>(.__Pl01-1)
  10395  5168		       91		      .byte.b	>(.__Pl02-1)
  10396  5169		       91		      .byte.b	>(.__Pl03-1)
  10397  516a				   .L0464jumptablelo
  10398  516a		       7a		      .byte.b	<(.__Pl00-1)
  10399  516b		       89		      .byte.b	<(.__Pl01-1)
  10400  516c		       98		      .byte.b	<(.__Pl02-1)
  10401  516d		       a7		      .byte.b	<(.__Pl03-1)
  10402  516e				   .
  10403  516e							; 
  10404  516e
  10405  516e				   .__Pl_Frame_Done
  10406  516e							; __Pl_Frame_Done
  10407  516e
  10408  516e				   .L0465		;  return
  10409  516e
  10410  516e		       ba		      tsx
  10411  516f		       b5 02		      lda	2,x	; check return address
  10412  5171		       49 91		      eor	#(>*)	; vs. current PCH
  10413  5173		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10414  5175		       f0 03		      beq	*+5	; if equal, do normal return
  10415  5177		       4c dd ff 	      JMP	BS_return
  10416  517a		       60		      RTS
  10417  517b				   .
  10418  517b							; 
  10419  517b
  10420  517b				   .__Pl00
  10421  517b							; __Pl00
  10422  517b
  10423  517b				   .L0466		;  player1:
  10424  517b
  10425  517b		       a2 18		      LDX	#<playerL0466_1
  10426  517d		       86 8c		      STX	player1pointerlo
  10427  517f		       a9 f9		      LDA	#>playerL0466_1
  10428  5181		       85 8d		      STA	player1pointerhi
  10429  5183		       a9 16		      LDA	#22
  10430  5185		       85 8f		      STA	player1height
  10431  5187				   .L0467		;  goto __Pl_Frame_Done
  10432  5187
  10433  5187		       4c 6e 91 	      jmp	.__Pl_Frame_Done
  10434  518a
  10435  518a				   .
  10436  518a							; 
  10437  518a
  10438  518a				   .__Pl01
  10439  518a							; __Pl01
  10440  518a
  10441  518a				   .L0468		;  player1:
  10442  518a
  10443  518a		       a2 2f		      LDX	#<playerL0468_1
  10444  518c		       86 8c		      STX	player1pointerlo
  10445  518e		       a9 f9		      LDA	#>playerL0468_1
  10446  5190		       85 8d		      STA	player1pointerhi
  10447  5192		       a9 16		      LDA	#22
  10448  5194		       85 8f		      STA	player1height
  10449  5196				   .L0469		;  goto __Pl_Frame_Done
  10450  5196
  10451  5196		       4c 6e 91 	      jmp	.__Pl_Frame_Done
  10452  5199
  10453  5199				   .
  10454  5199							; 
  10455  5199
  10456  5199				   .__Pl02
  10457  5199							; __Pl02
  10458  5199
  10459  5199				   .L0470		;  player1:
  10460  5199
  10461  5199		       a2 46		      LDX	#<playerL0470_1
  10462  519b		       86 8c		      STX	player1pointerlo
  10463  519d		       a9 f9		      LDA	#>playerL0470_1
  10464  519f		       85 8d		      STA	player1pointerhi
  10465  51a1		       a9 17		      LDA	#23
  10466  51a3		       85 8f		      STA	player1height
  10467  51a5				   .L0471		;  goto __Pl_Frame_Done
  10468  51a5
  10469  51a5		       4c 6e 91 	      jmp	.__Pl_Frame_Done
  10470  51a8
  10471  51a8				   .
  10472  51a8							; 
  10473  51a8
  10474  51a8				   .__Pl03
  10475  51a8							; __Pl03
  10476  51a8
  10477  51a8				   .L0472		;  player1:
  10478  51a8
  10479  51a8		       a2 5e		      LDX	#<playerL0472_1
  10480  51aa		       86 8c		      STX	player1pointerlo
  10481  51ac		       a9 f9		      LDA	#>playerL0472_1
  10482  51ae		       85 8d		      STA	player1pointerhi
  10483  51b0		       a9 17		      LDA	#23
  10484  51b2		       85 8f		      STA	player1height
  10485  51b4				   .L0473		;  goto __Pl_Frame_Done
  10486  51b4
  10487  51b4		       4c 6e 91 	      jmp	.__Pl_Frame_Done
  10488  51b7
  10489  51b7				   .
  10490  51b7							; 
  10491  51b7
  10492  51b7				   .L0474		;  return
  10493  51b7
  10494  51b7		       ba		      tsx
  10495  51b8		       b5 02		      lda	2,x	; check return address
  10496  51ba		       49 91		      eor	#(>*)	; vs. current PCH
  10497  51bc		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  10498  51be		       f0 03		      beq	*+5	; if equal, do normal return
  10499  51c0		       4c dd ff 	      JMP	BS_return
  10500  51c3		       60		      RTS
  10501  51c4				   .
  10502  51c4							; 
  10503  51c4
  10504  51c4				   .
  10505  51c4							; 
  10506  51c4
  10507  51c4				   .
  10508  51c4							; 
  10509  51c4
  10510  51c4				   .L0475		;  bank 6
  10511  51c4
  10512  51c4					      if	ECHO5
      3600 bytes of ROM space left in bank 5
  10513  51c4					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
  10514  51c4					      endif
  10515  51c4		       00 01	   ECHO5      =	1
  10516  5fd4					      ORG	$5FF4-bscode_length
  10517  5fd4					      RORG	$9FF4-bscode_length
  10518  5fd4		       a2 ff	   start_bank5 ldx	#$ff
  10519  5fd6				  -	      ifconst	FASTFETCH	; using DPC+
  10520  5fd6				  -	      stx	FASTFETCH
  10521  5fd6					      endif
  10522  5fd6		       9a		      txs
  10523  5fd7				  -	      if	bankswitch == 64
  10524  5fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10525  5fd7					      else
  10526  5fd7		       a9 f2		      lda	#>(start-1)
  10527  5fd9					      endif
  10528  5fd9		       48		      pha
  10529  5fda		       a9 51		      lda	#<(start-1)
  10530  5fdc		       48		      pha
  10531  5fdd		       48		      pha
  10532  5fde		       8a		      txa
  10533  5fdf		       48		      pha
  10534  5fe0		       ba		      tsx
  10535  5fe1					      if	bankswitch != 64
  10536  5fe1		       b5 04		      lda	4,x	; get high byte of return address
  10537  5fe3		       2a		      rol
  10538  5fe4		       2a		      rol
  10539  5fe5		       2a		      rol
  10540  5fe6		       2a		      rol
  10541  5fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10542  5fe9		       aa		      tax
  10543  5fea		       e8		      inx
  10544  5feb				  -	      else
  10545  5feb				  -	      lda	4,x	; get high byte of return address
  10546  5feb				  -	      tay
  10547  5feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10548  5feb				  -	      sta	4,x
  10549  5feb				  -	      tya
  10550  5feb				  -	      lsr
  10551  5feb				  -	      lsr
  10552  5feb				  -	      lsr
  10553  5feb				  -	      lsr
  10554  5feb				  -	      tax
  10555  5feb				  -	      inx
  10556  5feb					      endif
  10557  5feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  10558  5fee		       68		      pla
  10559  5fef		       aa		      tax
  10560  5ff0		       68		      pla
  10561  5ff1		       60		      rts
  10562  5ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10563  5ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10564  5ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10565  5ff2					      endif
  10566  5ffc					      ORG	$5FFC
  10567  5ffc					      RORG	$9FFC
  10568  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
  10569  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
  10570  6000					      ORG	$6000
  10571  6000					      RORG	$B000
  10572  6000				   .
  10573  6000							; 
  10574  6000
  10575  6000				   .
  10576  6000							; 
  10577  6000
  10578  6000				   .
  10579  6000							; 
  10580  6000
  10581  6000				   .L0476		;  bank 7
  10582  6000
  10583  6000					      if	ECHO6
      4052 bytes of ROM space left in bank 6
  10584  6000					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
  10585  6000					      endif
  10586  6000		       00 01	   ECHO6      =	1
  10587  6fd4					      ORG	$6FF4-bscode_length
  10588  6fd4					      RORG	$BFF4-bscode_length
  10589  6fd4		       a2 ff	   start_bank6 ldx	#$ff
  10590  6fd6				  -	      ifconst	FASTFETCH	; using DPC+
  10591  6fd6				  -	      stx	FASTFETCH
  10592  6fd6					      endif
  10593  6fd6		       9a		      txs
  10594  6fd7				  -	      if	bankswitch == 64
  10595  6fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10596  6fd7					      else
  10597  6fd7		       a9 f2		      lda	#>(start-1)
  10598  6fd9					      endif
  10599  6fd9		       48		      pha
  10600  6fda		       a9 51		      lda	#<(start-1)
  10601  6fdc		       48		      pha
  10602  6fdd		       48		      pha
  10603  6fde		       8a		      txa
  10604  6fdf		       48		      pha
  10605  6fe0		       ba		      tsx
  10606  6fe1					      if	bankswitch != 64
  10607  6fe1		       b5 04		      lda	4,x	; get high byte of return address
  10608  6fe3		       2a		      rol
  10609  6fe4		       2a		      rol
  10610  6fe5		       2a		      rol
  10611  6fe6		       2a		      rol
  10612  6fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10613  6fe9		       aa		      tax
  10614  6fea		       e8		      inx
  10615  6feb				  -	      else
  10616  6feb				  -	      lda	4,x	; get high byte of return address
  10617  6feb				  -	      tay
  10618  6feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10619  6feb				  -	      sta	4,x
  10620  6feb				  -	      tya
  10621  6feb				  -	      lsr
  10622  6feb				  -	      lsr
  10623  6feb				  -	      lsr
  10624  6feb				  -	      lsr
  10625  6feb				  -	      tax
  10626  6feb				  -	      inx
  10627  6feb					      endif
  10628  6feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  10629  6fee		       68		      pla
  10630  6fef		       aa		      tax
  10631  6ff0		       68		      pla
  10632  6ff1		       60		      rts
  10633  6ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10634  6ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10635  6ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10636  6ff2					      endif
  10637  6ffc					      ORG	$6FFC
  10638  6ffc					      RORG	$BFFC
  10639  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
  10640  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
  10641  7000					      ORG	$7000
  10642  7000					      RORG	$D000
  10643  7000				   .
  10644  7000							; 
  10645  7000
  10646  7000				   .
  10647  7000							; 
  10648  7000
  10649  7000				   .
  10650  7000							; 
  10651  7000
  10652  7000				   .L0477		;  bank 8
  10653  7000
  10654  7000					      if	ECHO7
      4052 bytes of ROM space left in bank 7
  10655  7000					      echo	"    ",[(start_bank7 - *)]d , "bytes of ROM space left in bank 7")
  10656  7000					      endif
  10657  7000		       00 01	   ECHO7      =	1
  10658  7fd4					      ORG	$7FF4-bscode_length
  10659  7fd4					      RORG	$DFF4-bscode_length
  10660  7fd4		       a2 ff	   start_bank7 ldx	#$ff
  10661  7fd6				  -	      ifconst	FASTFETCH	; using DPC+
  10662  7fd6				  -	      stx	FASTFETCH
  10663  7fd6					      endif
  10664  7fd6		       9a		      txs
  10665  7fd7				  -	      if	bankswitch == 64
  10666  7fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10667  7fd7					      else
  10668  7fd7		       a9 f2		      lda	#>(start-1)
  10669  7fd9					      endif
  10670  7fd9		       48		      pha
  10671  7fda		       a9 51		      lda	#<(start-1)
  10672  7fdc		       48		      pha
  10673  7fdd		       48		      pha
  10674  7fde		       8a		      txa
  10675  7fdf		       48		      pha
  10676  7fe0		       ba		      tsx
  10677  7fe1					      if	bankswitch != 64
  10678  7fe1		       b5 04		      lda	4,x	; get high byte of return address
  10679  7fe3		       2a		      rol
  10680  7fe4		       2a		      rol
  10681  7fe5		       2a		      rol
  10682  7fe6		       2a		      rol
  10683  7fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10684  7fe9		       aa		      tax
  10685  7fea		       e8		      inx
  10686  7feb				  -	      else
  10687  7feb				  -	      lda	4,x	; get high byte of return address
  10688  7feb				  -	      tay
  10689  7feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10690  7feb				  -	      sta	4,x
  10691  7feb				  -	      tya
  10692  7feb				  -	      lsr
  10693  7feb				  -	      lsr
  10694  7feb				  -	      lsr
  10695  7feb				  -	      lsr
  10696  7feb				  -	      tax
  10697  7feb				  -	      inx
  10698  7feb					      endif
  10699  7feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  10700  7fee		       68		      pla
  10701  7fef		       aa		      tax
  10702  7ff0		       68		      pla
  10703  7ff1		       60		      rts
  10704  7ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10705  7ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10706  7ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10707  7ff2					      endif
  10708  7ffc					      ORG	$7FFC
  10709  7ffc					      RORG	$DFFC
  10710  7ffc		       d4 df		      .word.w	(start_bank7 & $ffff)
  10711  7ffe		       d4 df		      .word.w	(start_bank7 & $ffff)
  10712  8000					      ORG	$8000
  10713  8000					      RORG	$F000
  10714  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10715  8000
  10716  8000							; This is a 2-line kernel!
  10717  8000					      ifnconst	vertical_reflect
  10718  8000				   kernel
  10719  8000					      endif
  10720  8000		       85 02		      sta	WSYNC
  10721  8002		       a9 ff		      lda	#255
  10722  8004		       8d 96 02 	      sta	TIM64T
  10723  8007
  10724  8007		       a9 01		      lda	#1
  10725  8009		       85 27		      sta	VDELBL
  10726  800b		       85 25		      sta	VDELP0
  10727  800d		       a6 92		      ldx	ballheight
  10728  800f		       e8		      inx
  10729  8010		       e8		      inx
  10730  8011		       86 9f		      stx	temp4
  10731  8013		       a5 86		      lda	player1y
  10732  8015		       85 9e		      sta	temp3
  10733  8017
  10734  8017				  -	      ifconst	shakescreen
  10735  8017				  -	      jsr	doshakescreen
  10736  8017					      else
  10737  8017		       a6 90		      ldx	missile0height
  10738  8019		       e8		      inx
  10739  801a					      endif
  10740  801a
  10741  801a		       e8		      inx
  10742  801b		       86 f6		      stx	stack1
  10743  801d
  10744  801d		       a5 89		      lda	bally
  10745  801f		       85 f7		      sta	stack2
  10746  8021
  10747  8021		       a5 85		      lda	player0y
  10748  8023		       a2 00		      ldx	#0
  10749  8025		       85 02		      sta	WSYNC
  10750  8027		       86 1b		      stx	GRP0
  10751  8029		       86 1c		      stx	GRP1
  10752  802b		       86 0e		      stx	PF1L
  10753  802d		       86 0f		      stx	PF2
  10754  802f		       86 2c		      stx	CXCLR
  10755  8031				  -	      ifconst	readpaddle
  10756  8031				  -	      stx	paddle
  10757  8031					      else
      0  8031					      sleep	3
      1  8031				   .CYCLES    SET	3
      2  8031
      3  8031				  -	      IF	.CYCLES < 2
      4  8031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8031				  -	      ERR
      6  8031					      ENDIF
      7  8031
      8  8031					      IF	.CYCLES & 1
      9  8031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8031		       04 00		      nop	0
     11  8033				  -	      ELSE
     12  8033				  -	      bit	VSYNC
     13  8033					      ENDIF
     14  8033				   .CYCLES    SET	.CYCLES - 3
     15  8033					      ENDIF
     16  8033
     17  8033				  -	      REPEAT	.CYCLES / 2
     18  8033				  -	      nop
     19  8033					      REPEND
  10759  8033					      endif
  10760  8033
  10761  8033		       95 9d		      sta	temp2,x
  10762  8035
  10763  8035							;store these so they can be retrieved later
  10764  8035					      ifnconst	pfres
  10765  8035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
  10766  8037				  -	      else
  10767  8037				  -	      ldx	#132-pfres*pfwidth
  10768  8037					      endif
  10769  8037
  10770  8037		       c6 85		      dec	player0y
  10771  8039
  10772  8039		       a5 91		      lda	missile0y
  10773  803b		       85 a0		      sta	temp5
  10774  803d		       a5 88		      lda	missile1y
  10775  803f		       85 a1		      sta	temp6
  10776  8041
  10777  8041		       a5 ef		      lda	playfieldpos
  10778  8043		       85 9c		      sta	temp1
  10779  8045
  10780  8045				  -	      ifconst	pfrowheight
  10781  8045				  -	      lda	#pfrowheight+2
  10782  8045					      else
  10783  8045					      ifnconst	pfres
  10784  8045		       a9 0a		      lda	#10
  10785  8047				  -	      else
  10786  8047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  10787  8047					      endif
  10788  8047					      endif
  10789  8047		       18		      clc
  10790  8048		       e5 ef		      sbc	playfieldpos
  10791  804a		       85 ef		      sta	playfieldpos
  10792  804c		       4c 74 f0 	      jmp	.startkernel
  10793  804f
  10794  804f				   .skipDrawP0
  10795  804f		       a9 00		      lda	#0
  10796  8051		       a8		      tay
  10797  8052		       4c a3 f0 	      jmp	.continueP0
  10798  8055
  10799  8055				   .skipDrawP1
  10800  8055		       a9 00		      lda	#0
  10801  8057		       a8		      tay
  10802  8058		       4c 7e f0 	      jmp	.continueP1
  10803  805b
  10804  805b				   .kerloop		; enter at cycle 59??
  10805  805b
  10806  805b				   continuekernel
      0  805b					      sleep	2
      1  805b				   .CYCLES    SET	2
      2  805b
      3  805b				  -	      IF	.CYCLES < 2
      4  805b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  805b				  -	      ERR
      6  805b					      ENDIF
      7  805b
      8  805b				  -	      IF	.CYCLES & 1
      9  805b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  805b				  -	      nop	0
     11  805b				  -	      ELSE
     12  805b				  -	      bit	VSYNC
     13  805b				  -	      ENDIF
     14  805b				  -.CYCLES    SET	.CYCLES - 3
     15  805b					      ENDIF
     16  805b
     17  805b					      REPEAT	.CYCLES / 2
     18  805b		       ea		      nop
     19  805c					      REPEND
  10808  805c				   continuekernel2
  10809  805c		       a5 92		      lda	ballheight
  10810  805e
  10811  805e				  -	      ifconst	pfres
  10812  805e				  -	      ldy	playfield+pfres*pfwidth-132,x
  10813  805e				  -	      sty	PF1L	;3
  10814  805e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
  10815  805e				  -	      sty	PF2L	;3
  10816  805e				  -	      ldy	playfield+pfres*pfwidth-129,x
  10817  805e				  -	      sty	PF1R	; 3 too early?
  10818  805e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
  10819  805e				  -	      sty	PF2R	;3
  10820  805e					      else
  10821  805e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
  10822  8060		       84 0e		      sty	PF1L	;3
  10823  8062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  10824  8064		       84 0f		      sty	PF2L	;3
  10825  8066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
  10826  8068		       84 0e		      sty	PF1R	; 3 too early?
  10827  806a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  10828  806c		       84 0f		      sty	PF2R	;3
  10829  806e					      endif
  10830  806e
  10831  806e							; should be playfield+$38 for width=2
  10832  806e
  10833  806e		       c7 89		      dcp	bally
  10834  8070		       2a		      rol
  10835  8071		       2a		      rol
  10836  8072							; rol
  10837  8072							; rol
  10838  8072				   goback
  10839  8072		       85 1f		      sta	ENABL
  10840  8074				   .startkernel
  10841  8074		       a5 8f		      lda	player1height	;3
  10842  8076		       c7 86		      dcp	player1y	;5
  10843  8078		       90 db		      bcc	.skipDrawP1	;2
  10844  807a		       a4 86		      ldy	player1y	;3
  10845  807c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  10846  807e							; so it doesn't cross a page boundary!
  10847  807e
  10848  807e				   .continueP1
  10849  807e		       85 1c		      sta	GRP1	;3
  10850  8080
  10851  8080				  -	      ifnconst	player1colors
  10852  8080				  -	      lda	missile1height	;3
  10853  8080				  -	      dcp	missile1y	;5
  10854  8080				  -	      rol		;2
  10855  8080				  -	      rol		;2
  10856  8080				  -	      sta	ENAM1	;3
  10857  8080					      else
  10858  8080		       b1 87		      lda	(player1color),y
  10859  8082		       85 07		      sta	COLUP1
  10860  8084				  -	      ifnconst	playercolors
  10861  8084				  -	      sleep	7
  10862  8084					      else
  10863  8084		       ad 82 00 	      lda.w	player0colorstore
  10864  8087		       85 06		      sta	COLUP0
  10865  8089					      endif
  10866  8089					      endif
  10867  8089
  10868  8089				  -	      ifconst	pfres
  10869  8089				  -	      lda	playfield+pfres*pfwidth-132,x
  10870  8089				  -	      sta	PF1L	;3
  10871  8089				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
  10872  8089				  -	      sta	PF2L	;3
  10873  8089				  -	      lda	playfield+pfres*pfwidth-129,x
  10874  8089				  -	      sta	PF1R	; 3 too early?
  10875  8089				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
  10876  8089				  -	      sta	PF2R	;3
  10877  8089					      else
  10878  8089		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
  10879  808b		       85 0e		      sta	PF1L	;3
  10880  808d		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  10881  808f		       85 0f		      sta	PF2L	;3
  10882  8091		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
  10883  8093		       85 0e		      sta	PF1R	; 3 too early?
  10884  8095		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  10885  8097		       85 0f		      sta	PF2R	;3
  10886  8099					      endif
  10887  8099							; sleep 3
  10888  8099
  10889  8099		       a5 8e		      lda	player0height
  10890  809b		       c7 85		      dcp	player0y
  10891  809d		       90 b0		      bcc	.skipDrawP0
  10892  809f		       a4 85		      ldy	player0y
  10893  80a1		       b1 8a		      lda	(player0pointer),y
  10894  80a3				   .continueP0
  10895  80a3		       85 1b		      sta	GRP0
  10896  80a5
  10897  80a5					      ifnconst	no_blank_lines
  10898  80a5				  -	      ifnconst	playercolors
  10899  80a5				  -	      lda	missile0height	;3
  10900  80a5				  -	      dcp	missile0y	;5
  10901  80a5				  -	      sbc	stack1
  10902  80a5				  -	      sta	ENAM0	;3
  10903  80a5					      else
  10904  80a5		       b1 90		      lda	(player0color),y
  10905  80a7		       85 82		      sta	player0colorstore
      0  80a9					      sleep	6
      1  80a9				   .CYCLES    SET	6
      2  80a9
      3  80a9				  -	      IF	.CYCLES < 2
      4  80a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  80a9				  -	      ERR
      6  80a9					      ENDIF
      7  80a9
      8  80a9				  -	      IF	.CYCLES & 1
      9  80a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  80a9				  -	      nop	0
     11  80a9				  -	      ELSE
     12  80a9				  -	      bit	VSYNC
     13  80a9				  -	      ENDIF
     14  80a9				  -.CYCLES    SET	.CYCLES - 3
     15  80a9					      ENDIF
     16  80a9
     17  80a9					      REPEAT	.CYCLES / 2
     18  80a9		       ea		      nop
     17  80a9					      REPEND
     18  80aa		       ea		      nop
     17  80aa					      REPEND
     18  80ab		       ea		      nop
     19  80ac					      REPEND
  10907  80ac					      endif
  10908  80ac		       c6 9c		      dec	temp1
  10909  80ae		       d0 ab		      bne	continuekernel
  10910  80b0				  -	      else
  10911  80b0				  -	      dec	temp1
  10912  80b0				  -	      beq	altkernel2
  10913  80b0				  -	      ifconst	readpaddle
  10914  80b0				  -	      ldy	currentpaddle
  10915  80b0				  -	      lda	INPT0,y
  10916  80b0				  -	      bpl	noreadpaddle
  10917  80b0				  -	      inc	paddle
  10918  80b0				  -	      jmp	continuekernel2
  10919  80b0				  -noreadpaddle
  10920  80b0				  -	      sleep	2
  10921  80b0				  -	      jmp	continuekernel
  10922  80b0				  -	      else
  10923  80b0				  -	      ifnconst	playercolors
  10924  80b0				  -	      ifconst	PFcolors
  10925  80b0				  -	      txa
  10926  80b0				  -	      tay
  10927  80b0				  -	      lda	(pfcolortable),y
  10928  80b0				  -	      ifnconst	backgroundchange
  10929  80b0				  -	      sta	COLUPF
  10930  80b0				  -	      else
  10931  80b0				  -	      sta	COLUBK
  10932  80b0				  -	      endif
  10933  80b0				  -	      jmp	continuekernel
  10934  80b0				  -	      else
  10935  80b0				  -	      ifconst	kernelmacrodef
  10936  80b0				  -	      kernelmacro
  10937  80b0				  -	      else
  10938  80b0				  -	      sleep	12
  10939  80b0				  -	      endif
  10940  80b0				  -	      endif
  10941  80b0				  -	      else
  10942  80b0				  -	      lda	(player0color),y
  10943  80b0				  -	      sta	player0colorstore
  10944  80b0				  -	      sleep	4
  10945  80b0				  -	      endif
  10946  80b0				  -	      jmp	continuekernel
  10947  80b0				  -	      endif
  10948  80b0				  -altkernel2
  10949  80b0				  -	      txa
  10950  80b0				  -	      ifnconst	vertical_reflect
  10951  80b0				  -	      sbx	#256-pfwidth
  10952  80b0				  -	      else
  10953  80b0				  -	      sbx	#256-pfwidth/2
  10954  80b0				  -	      endif
  10955  80b0				  -	      bmi	lastkernelline
  10956  80b0				  -	      ifconst	pfrowheight
  10957  80b0				  -	      lda	#pfrowheight
  10958  80b0				  -	      else
  10959  80b0				  -	      ifnconst	pfres
  10960  80b0				  -	      lda	#8
  10961  80b0				  -	      else
  10962  80b0				  -	      lda	#(96/pfres)	; try to come close to the real size
  10963  80b0				  -	      endif
  10964  80b0				  -	      endif
  10965  80b0				  -	      sta	temp1
  10966  80b0				  -	      jmp	continuekernel
  10967  80b0					      endif
  10968  80b0
  10969  80b0				   altkernel
  10970  80b0
  10971  80b0				  -	      ifconst	PFmaskvalue
  10972  80b0				  -	      lda	#PFmaskvalue
  10973  80b0					      else
  10974  80b0		       a9 00		      lda	#0
  10975  80b2					      endif
  10976  80b2		       85 0e		      sta	PF1L
  10977  80b4		       85 0f		      sta	PF2
  10978  80b6
  10979  80b6
  10980  80b6							;sleep 3
  10981  80b6
  10982  80b6							;28 cycles to fix things
  10983  80b6							;minus 11=17
  10984  80b6
  10985  80b6							; lax temp4
  10986  80b6							; clc
  10987  80b6		       8a		      txa
  10988  80b7					      ifnconst	vertical_reflect
  10989  80b7		       cb fc		      sbx	#256-pfwidth
  10990  80b9				  -	      else
  10991  80b9				  -	      sbx	#256-pfwidth/2
  10992  80b9					      endif
  10993  80b9
  10994  80b9		       30 12		      bmi	lastkernelline
  10995  80bb
  10996  80bb				  -	      ifconst	PFcolorandheight
  10997  80bb				  -	      ifconst	pfres
  10998  80bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
  10999  80bb				  -	      else
  11000  80bb				  -	      ldy	playfieldcolorandheight-87,x
  11001  80bb				  -	      endif
  11002  80bb				  -	      ifnconst	backgroundchange
  11003  80bb				  -	      sty	COLUPF
  11004  80bb				  -	      else
  11005  80bb				  -	      sty	COLUBK
  11006  80bb				  -	      endif
  11007  80bb				  -	      ifconst	pfres
  11008  80bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
  11009  80bb				  -	      else
  11010  80bb				  -	      lda	playfieldcolorandheight-88,x
  11011  80bb				  -	      endif
  11012  80bb				  -	      sta.w	temp1
  11013  80bb					      endif
  11014  80bb				  -	      ifconst	PFheights
  11015  80bb				  -	      lsr
  11016  80bb				  -	      lsr
  11017  80bb				  -	      tay
  11018  80bb				  -	      lda	(pfheighttable),y
  11019  80bb				  -	      sta.w	temp1
  11020  80bb					      endif
  11021  80bb					      ifconst	PFcolors
  11022  80bb		       a8		      tay
  11023  80bc		       b1 f0		      lda	(pfcolortable),y
  11024  80be					      ifnconst	backgroundchange
  11025  80be		       85 08		      sta	COLUPF
  11026  80c0				  -	      else
  11027  80c0				  -	      sta	COLUBK
  11028  80c0					      endif
  11029  80c0				  -	      ifconst	pfrowheight
  11030  80c0				  -	      lda	#pfrowheight
  11031  80c0					      else
  11032  80c0					      ifnconst	pfres
  11033  80c0		       a9 08		      lda	#8
  11034  80c2				  -	      else
  11035  80c2				  -	      lda	#(96/pfres)	; try to come close to the real size
  11036  80c2					      endif
  11037  80c2					      endif
  11038  80c2		       85 9c		      sta	temp1
  11039  80c4					      endif
  11040  80c4					      ifnconst	PFcolorandheight
  11041  80c4				  -	      ifnconst	PFcolors
  11042  80c4				  -	      ifnconst	PFheights
  11043  80c4				  -	      ifnconst	no_blank_lines
  11044  80c4				  -			; read paddle 0
  11045  80c4				  -			; lo-res paddle read
  11046  80c4				  -			; bit INPT0
  11047  80c4				  -			; bmi paddleskipread
  11048  80c4				  -			; inc paddle0
  11049  80c4				  -			;donepaddleskip
  11050  80c4				  -	      sleep	10
  11051  80c4				  -	      ifconst	pfrowheight
  11052  80c4				  -	      lda	#pfrowheight
  11053  80c4				  -	      else
  11054  80c4				  -	      ifnconst	pfres
  11055  80c4				  -	      lda	#8
  11056  80c4				  -	      else
  11057  80c4				  -	      lda	#(96/pfres)	; try to come close to the real size
  11058  80c4				  -	      endif
  11059  80c4				  -	      endif
  11060  80c4				  -	      sta	temp1
  11061  80c4				  -	      endif
  11062  80c4				  -	      endif
  11063  80c4					      endif
  11064  80c4					      endif
  11065  80c4
  11066  80c4
  11067  80c4		       a5 92		      lda	ballheight
  11068  80c6		       c7 89		      dcp	bally
  11069  80c8		       e5 9f		      sbc	temp4
  11070  80ca
  11071  80ca
  11072  80ca		       4c 72 f0 	      jmp	goback
  11073  80cd
  11074  80cd
  11075  80cd					      ifnconst	no_blank_lines
  11076  80cd				   lastkernelline
  11077  80cd				  -	      ifnconst	PFcolors
  11078  80cd				  -	      sleep	10
  11079  80cd					      else
  11080  80cd		       a0 7c		      ldy	#124
  11081  80cf		       b1 f0		      lda	(pfcolortable),y
  11082  80d1		       85 08		      sta	COLUPF
  11083  80d3					      endif
  11084  80d3
  11085  80d3				  -	      ifconst	PFheights
  11086  80d3				  -	      ldx	#1
  11087  80d3				  -			;sleep 4
  11088  80d3				  -	      sleep	3	; this was over 1 cycle
  11089  80d3					      else
  11090  80d3		       a6 ef		      ldx	playfieldpos
  11091  80d5							;sleep 3
      0  80d5					      sleep	2	; this was over 1 cycle
      1  80d5				   .CYCLES    SET	2
      2  80d5
      3  80d5				  -	      IF	.CYCLES < 2
      4  80d5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  80d5				  -	      ERR
      6  80d5					      ENDIF
      7  80d5
      8  80d5				  -	      IF	.CYCLES & 1
      9  80d5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  80d5				  -	      nop	0
     11  80d5				  -	      ELSE
     12  80d5				  -	      bit	VSYNC
     13  80d5				  -	      ENDIF
     14  80d5				  -.CYCLES    SET	.CYCLES - 3
     15  80d5					      ENDIF
     16  80d5
     17  80d5					      REPEAT	.CYCLES / 2
     18  80d5		       ea		      nop
     19  80d6					      REPEND
  11093  80d6					      endif
  11094  80d6
  11095  80d6		       4c 1b f1 	      jmp	enterlastkernel
  11096  80d9
  11097  80d9				  -	      else
  11098  80d9				  -lastkernelline
  11099  80d9				  -
  11100  80d9				  -	      ifconst	PFheights
  11101  80d9				  -	      ldx	#1
  11102  80d9				  -			;sleep 5
  11103  80d9				  -	      sleep	4	; this was over 1 cycle
  11104  80d9				  -	      else
  11105  80d9				  -	      ldx	playfieldpos
  11106  80d9				  -			;sleep 4
  11107  80d9				  -	      sleep	3	; this was over 1 cycle
  11108  80d9				  -	      endif
  11109  80d9				  -
  11110  80d9				  -	      cpx	#0
  11111  80d9				  -	      bne	.enterfromNBL
  11112  80d9				  -	      jmp	no_blank_lines_bailout
  11113  80d9					      endif
  11114  80d9
  11115  80d9					      if	((<*)>$d5)
  11116  8100		       00 00 00 00*	      align	256
  11117  8100					      endif
  11118  8100							; this is a kludge to prevent page wrapping - fix!!!
  11119  8100
  11120  8100				   .skipDrawlastP1
  11121  8100		       a9 00		      lda	#0
  11122  8102		       a8		      tay		; added so we don't cross a page
  11123  8103		       4c 2d f1 	      jmp	.continuelastP1
  11124  8106
  11125  8106				   .endkerloop		; enter at cycle 59??
  11126  8106
  11127  8106		       ea		      nop
  11128  8107
  11129  8107				   .enterfromNBL
  11130  8107				  -	      ifconst	pfres
  11131  8107				  -	      ldy.w	playfield+pfres*pfwidth-4
  11132  8107				  -	      sty	PF1L	;3
  11133  8107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  11134  8107				  -	      sty	PF2L	;3
  11135  8107				  -	      ldy.w	playfield+pfres*pfwidth-1
  11136  8107				  -	      sty	PF1R	; possibly too early?
  11137  8107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  11138  8107				  -	      sty	PF2R	;3
  11139  8107					      else
  11140  8107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  11141  810a		       84 0e		      sty	PF1L	;3
  11142  810c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  11143  810f		       84 0f		      sty	PF2L	;3
  11144  8111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  11145  8114		       84 0e		      sty	PF1R	; possibly too early?
  11146  8116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  11147  8119		       84 0f		      sty	PF2R	;3
  11148  811b					      endif
  11149  811b
  11150  811b				   enterlastkernel
  11151  811b		       a5 92		      lda	ballheight
  11152  811d
  11153  811d							; tya
  11154  811d		       c7 89		      dcp	bally
  11155  811f							; sleep 4
  11156  811f
  11157  811f							; sbc stack3
  11158  811f		       2a		      rol
  11159  8120		       2a		      rol
  11160  8121		       85 1f		      sta	ENABL
  11161  8123
  11162  8123		       a5 8f		      lda	player1height	;3
  11163  8125		       c7 86		      dcp	player1y	;5
  11164  8127		       90 d7		      bcc	.skipDrawlastP1
  11165  8129		       a4 86		      ldy	player1y	;3
  11166  812b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  11167  812d							; so it doesn't cross a page boundary!
  11168  812d
  11169  812d				   .continuelastP1
  11170  812d		       85 1c		      sta	GRP1	;3
  11171  812f
  11172  812f				  -	      ifnconst	player1colors
  11173  812f				  -	      lda	missile1height	;3
  11174  812f				  -	      dcp	missile1y	;5
  11175  812f					      else
  11176  812f		       b1 87		      lda	(player1color),y
  11177  8131		       85 07		      sta	COLUP1
  11178  8133					      endif
  11179  8133
  11180  8133		       ca		      dex
  11181  8134							;dec temp4 ; might try putting this above PF writes
  11182  8134		       f0 37		      beq	endkernel
  11183  8136
  11184  8136
  11185  8136				  -	      ifconst	pfres
  11186  8136				  -	      ldy.w	playfield+pfres*pfwidth-4
  11187  8136				  -	      sty	PF1L	;3
  11188  8136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  11189  8136				  -	      sty	PF2L	;3
  11190  8136				  -	      ldy.w	playfield+pfres*pfwidth-1
  11191  8136				  -	      sty	PF1R	; possibly too early?
  11192  8136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  11193  8136				  -	      sty	PF2R	;3
  11194  8136					      else
  11195  8136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  11196  8139		       84 0e		      sty	PF1L	;3
  11197  813b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  11198  813e		       84 0f		      sty	PF2L	;3
  11199  8140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  11200  8143		       84 0e		      sty	PF1R	; possibly too early?
  11201  8145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  11202  8148		       84 0f		      sty	PF2R	;3
  11203  814a					      endif
  11204  814a
  11205  814a				  -	      ifnconst	player1colors
  11206  814a				  -	      rol		;2
  11207  814a				  -	      rol		;2
  11208  814a				  -	      sta	ENAM1	;3
  11209  814a					      else
  11210  814a				  -	      ifnconst	playercolors
  11211  814a				  -	      sleep	7
  11212  814a					      else
  11213  814a		       ad 82 00 	      lda.w	player0colorstore
  11214  814d		       85 06		      sta	COLUP0
  11215  814f					      endif
  11216  814f					      endif
  11217  814f
  11218  814f		       ad 8e 00 	      lda.w	player0height
  11219  8152		       c7 85		      dcp	player0y
  11220  8154		       90 11		      bcc	.skipDrawlastP0
  11221  8156		       a4 85		      ldy	player0y
  11222  8158		       b1 8a		      lda	(player0pointer),y
  11223  815a				   .continuelastP0
  11224  815a		       85 1b		      sta	GRP0
  11225  815c
  11226  815c
  11227  815c
  11228  815c					      ifnconst	no_blank_lines
  11229  815c		       a5 90		      lda	missile0height	;3
  11230  815e		       c7 91		      dcp	missile0y	;5
  11231  8160		       e5 f6		      sbc	stack1
  11232  8162		       85 1d		      sta	ENAM0	;3
  11233  8164		       4c 06 f1 	      jmp	.endkerloop
  11234  8167				  -	      else
  11235  8167				  -	      ifconst	readpaddle
  11236  8167				  -	      ldy	currentpaddle
  11237  8167				  -	      lda	INPT0,y
  11238  8167				  -	      bpl	noreadpaddle2
  11239  8167				  -	      inc	paddle
  11240  8167				  -	      jmp	.endkerloop
  11241  8167				  -noreadpaddle2
  11242  8167				  -	      sleep	4
  11243  8167				  -	      jmp	.endkerloop
  11244  8167				  -	      else		; no_blank_lines and no paddle reading
  11245  8167				  -	      pla
  11246  8167				  -	      pha		; 14 cycles in 4 bytes
  11247  8167				  -	      pla
  11248  8167				  -	      pha
  11249  8167				  -			; sleep 14
  11250  8167				  -	      jmp	.endkerloop
  11251  8167				  -	      endif
  11252  8167					      endif
  11253  8167
  11254  8167
  11255  8167							; ifconst donepaddleskip
  11256  8167							;paddleskipread
  11257  8167							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
  11258  8167							; plus we get a lo-res paddle read
  11259  8167							; bmi donepaddleskip
  11260  8167							; endif
  11261  8167
  11262  8167				   .skipDrawlastP0
  11263  8167		       a9 00		      lda	#0
  11264  8169		       a8		      tay
  11265  816a		       4c 5a f1 	      jmp	.continuelastP0
  11266  816d
  11267  816d				  -	      ifconst	no_blank_lines
  11268  816d				  -no_blank_lines_bailout
  11269  816d				  -	      ldx	#0
  11270  816d					      endif
  11271  816d
  11272  816d				   endkernel
  11273  816d							; 6 digit score routine
  11274  816d		       86 0e		      stx	PF1
  11275  816f		       86 0f		      stx	PF2
  11276  8171		       86 0d		      stx	PF0
  11277  8173		       18		      clc
  11278  8174
  11279  8174				  -	      ifconst	pfrowheight
  11280  8174				  -	      lda	#pfrowheight+2
  11281  8174					      else
  11282  8174					      ifnconst	pfres
  11283  8174		       a9 0a		      lda	#10
  11284  8176				  -	      else
  11285  8176				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  11286  8176					      endif
  11287  8176					      endif
  11288  8176
  11289  8176		       e5 ef		      sbc	playfieldpos
  11290  8178		       85 ef		      sta	playfieldpos
  11291  817a		       8a		      txa
  11292  817b
  11293  817b				  -	      ifconst	shakescreen
  11294  817b				  -	      bit	shakescreen
  11295  817b				  -	      bmi	noshakescreen2
  11296  817b				  -	      ldx	#$3D
  11297  817b				  -noshakescreen2
  11298  817b					      endif
  11299  817b
  11300  817b		       95 02		      sta	WSYNC,x
  11301  817d
  11302  817d							; STA WSYNC ;first one, need one more
  11303  817d		       85 0b		      sta	REFP0
  11304  817f		       85 0c		      sta	REFP1
  11305  8181		       85 1b		      STA	GRP0
  11306  8183		       85 1c		      STA	GRP1
  11307  8185							; STA PF1
  11308  8185							; STA PF2
  11309  8185		       85 2b		      sta	HMCLR
  11310  8187		       85 1d		      sta	ENAM0
  11311  8189		       85 1e		      sta	ENAM1
  11312  818b		       85 1f		      sta	ENABL
  11313  818d
  11314  818d		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
  11315  818f		       85 85		      sta	player0y
  11316  8191		       a5 9e		      lda	temp3
  11317  8193		       85 86		      sta	player1y
  11318  8195				  -	      ifnconst	player1colors
  11319  8195				  -	      lda	temp6
  11320  8195				  -	      sta	missile1y
  11321  8195					      endif
  11322  8195				  -	      ifnconst	playercolors
  11323  8195				  -	      ifnconst	readpaddle
  11324  8195				  -	      lda	temp5
  11325  8195				  -	      sta	missile0y
  11326  8195				  -	      endif
  11327  8195					      endif
  11328  8195		       a5 f7		      lda	stack2
  11329  8197		       85 89		      sta	bally
  11330  8199
  11331  8199							; strangely, this isn't required any more. might have
  11332  8199							; resulted from the no_blank_lines score bounce fix
  11333  8199							;ifconst no_blank_lines
  11334  8199							;sta WSYNC
  11335  8199							;endif
  11336  8199
  11337  8199		       ad 84 02 	      lda	INTIM
  11338  819c		       18		      clc
  11339  819d				  -	      ifnconst	vblank_time
  11340  819d				  -	      adc	#43+12+87
  11341  819d					      else
  11342  819d		       69 8e		      adc	#vblank_time+12+87
  11343  819f
  11344  819f					      endif
  11345  819f							; sta WSYNC
  11346  819f		       8d 96 02 	      sta	TIM64T
  11347  81a2
  11348  81a2				  -	      ifconst	minikernel
  11349  81a2				  -	      jsr	minikernel
  11350  81a2					      endif
  11351  81a2
  11352  81a2							; now reassign temp vars for score pointers
  11353  81a2
  11354  81a2							; score pointers contain:
  11355  81a2							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
  11356  81a2							; swap lo2->temp1
  11357  81a2							; swap lo4->temp3
  11358  81a2							; swap lo6->temp5
  11359  81a2					      ifnconst	noscore
  11360  81a2		       a5 97		      lda	scorepointers+1
  11361  81a4							; ldy temp1
  11362  81a4		       85 9c		      sta	temp1
  11363  81a6							; sty scorepointers+1
  11364  81a6
  11365  81a6		       a5 99		      lda	scorepointers+3
  11366  81a8							; ldy temp3
  11367  81a8		       85 9e		      sta	temp3
  11368  81aa							; sty scorepointers+3
  11369  81aa
  11370  81aa
  11371  81aa		       85 2b		      sta	HMCLR
  11372  81ac		       ba		      tsx
  11373  81ad		       86 f6		      stx	stack1
  11374  81af		       a2 e0		      ldx	#$E0
  11375  81b1		       86 20		      stx	HMP0
  11376  81b3
  11377  81b3		       a5 a3		      LDA	scorecolor
  11378  81b5		       85 06		      STA	COLUP0
  11379  81b7		       85 07		      STA	COLUP1
  11380  81b9				  -	      ifconst	scorefade
  11381  81b9				  -	      STA	stack2
  11382  81b9					      endif
  11383  81b9					      ifconst	pfscore
  11384  81b9		       a5 f4		      lda	pfscorecolor
  11385  81bb		       85 08		      sta	COLUPF
  11386  81bd					      endif
  11387  81bd		       85 02		      sta	WSYNC
  11388  81bf		       a2 00		      ldx	#0
  11389  81c1		       86 1b		      STx	GRP0
  11390  81c3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
  11391  81c5
  11392  81c5		       a5 9b		      lda	scorepointers+5
  11393  81c7							; ldy temp5
  11394  81c7		       95 a0		      sta	temp5,x
  11395  81c9							; sty scorepointers+5
  11396  81c9		       a9 ff		      lda	#>scoretable
  11397  81cb		       85 97		      sta	scorepointers+1
  11398  81cd		       85 99		      sta	scorepointers+3
  11399  81cf		       85 9b		      sta	scorepointers+5
  11400  81d1		       85 9d		      sta	temp2
  11401  81d3		       85 9f		      sta	temp4
  11402  81d5		       85 a1		      sta	temp6
  11403  81d7		       a0 07		      LDY	#7
  11404  81d9		       84 25		      STY	VDELP0
  11405  81db		       85 10		      STA	RESP0
  11406  81dd		       85 11		      STA	RESP1
  11407  81df
  11408  81df
  11409  81df		       a9 03		      LDA	#$03
  11410  81e1		       85 04		      STA	NUSIZ0
  11411  81e3		       85 05		      STA	NUSIZ1
  11412  81e5		       85 26		      STA	VDELP1
  11413  81e7		       a9 f0		      LDA	#$F0
  11414  81e9		       85 21		      STA	HMP1
  11415  81eb		       b1 96		      lda	(scorepointers),y
  11416  81ed		       85 1b		      sta	GRP0
  11417  81ef		       85 2a		      STA	HMOVE	; cycle 73 ?
  11418  81f1		       4c 09 f2 	      jmp	beginscore
  11419  81f4
  11420  81f4
  11421  81f4					      if	((<*)>$d4)
  11422  8200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
  11423  8200					      endif
  11424  8200
  11425  8200				   loop2
  11426  8200		       b1 96		      lda	(scorepointers),y	;+5 68 204
  11427  8202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
  11428  8204					      ifconst	pfscore
  11429  8204		       ad f2 00 	      lda.w	pfscore1
  11430  8207		       85 0e		      sta	PF1
  11431  8209				  -	      else
  11432  8209				  -	      ifconst	scorefade
  11433  8209				  -	      sleep	2
  11434  8209				  -	      dec	stack2	; decrement the temporary scorecolor
  11435  8209				  -	      else
  11436  8209				  -	      sleep	7
  11437  8209				  -	      endif
  11438  8209					      endif
  11439  8209							; cycle 0
  11440  8209				   beginscore
  11441  8209		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
  11442  820b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
  11443  820d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
  11444  820f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
  11445  8211		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
  11446  8213		       9a		      txs
  11447  8214		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
  11448  8216				  -	      ifconst	scorefade
  11449  8216				  -	      lda	stack2
  11450  8216					      else
      0  8216					      sleep	3
      1  8216				   .CYCLES    SET	3
      2  8216
      3  8216				  -	      IF	.CYCLES < 2
      4  8216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8216				  -	      ERR
      6  8216					      ENDIF
      7  8216
      8  8216					      IF	.CYCLES & 1
      9  8216					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8216		       04 00		      nop	0
     11  8218				  -	      ELSE
     12  8218				  -	      bit	VSYNC
     13  8218					      ENDIF
     14  8218				   .CYCLES    SET	.CYCLES - 3
     15  8218					      ENDIF
     16  8218
     17  8218				  -	      REPEAT	.CYCLES / 2
     18  8218				  -	      nop
     19  8218					      REPEND
  11452  8218					      endif
  11453  8218
  11454  8218					      ifconst	pfscore
  11455  8218		       a5 f3		      lda	pfscore2
  11456  821a		       85 0e		      sta	PF1
  11457  821c				  -	      else
  11458  821c				  -	      ifconst	scorefade
  11459  821c				  -	      sta	COLUP0
  11460  821c				  -	      sta	COLUP1
  11461  821c				  -	      else
  11462  821c				  -	      sleep	6
  11463  821c				  -	      endif
  11464  821c					      endif
  11465  821c
  11466  821c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
  11467  821e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
  11468  8220		       ba		      tsx
  11469  8221		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
  11470  8223		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
  11471  8225		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
  11472  8227		       88		      dey
  11473  8228		       10 d6		      bpl	loop2	;+2 60 180
  11474  822a
  11475  822a		       a6 f6		      ldx	stack1
  11476  822c		       9a		      txs
  11477  822d							; lda scorepointers+1
  11478  822d		       a4 9c		      ldy	temp1
  11479  822f							; sta temp1
  11480  822f		       84 97		      sty	scorepointers+1
  11481  8231
  11482  8231		       a9 00		      LDA	#0
  11483  8233		       85 0e		      sta	PF1
  11484  8235		       85 1b		      STA	GRP0
  11485  8237		       85 1c		      STA	GRP1
  11486  8239		       85 25		      STA	VDELP0
  11487  823b		       85 26		      STA	VDELP1	;do we need these
  11488  823d		       85 04		      STA	NUSIZ0
  11489  823f		       85 05		      STA	NUSIZ1
  11490  8241
  11491  8241							; lda scorepointers+3
  11492  8241		       a4 9e		      ldy	temp3
  11493  8243							; sta temp3
  11494  8243		       84 99		      sty	scorepointers+3
  11495  8245
  11496  8245							; lda scorepointers+5
  11497  8245		       a4 a0		      ldy	temp5
  11498  8247							; sta temp5
  11499  8247		       84 9b		      sty	scorepointers+5
  11500  8249					      endif		;noscore
  11501  8249				  -	      ifconst	readpaddle
  11502  8249				  -	      lda	#%11000010
  11503  8249					      else
  11504  8249				  -	      ifconst	qtcontroller
  11505  8249				  -	      lda	qtcontroller
  11506  8249				  -	      lsr		; bit 0 in carry
  11507  8249				  -	      lda	#4
  11508  8249				  -	      ror		; carry into top of A
  11509  8249					      else
  11510  8249		       a9 02		      lda	#2
  11511  824b					      endif		; qtcontroller
  11512  824b					      endif		; readpaddle
  11513  824b		       85 02		      sta	WSYNC
  11514  824d		       85 01		      sta	VBLANK
      0  824f					      RETURN
      1  824f				  -	      ifnconst	bankswitch
      2  824f				  -	      rts
      3  824f					      else
      4  824f		       4c dd ff 	      jmp	BS_return
      5  8252					      endif
  11516  8252				  -	      ifconst	shakescreen
  11517  8252				  -doshakescreen
  11518  8252				  -	      bit	shakescreen
  11519  8252				  -	      bmi	noshakescreen
  11520  8252				  -	      sta	WSYNC
  11521  8252				  -noshakescreen
  11522  8252				  -	      ldx	missile0height
  11523  8252				  -	      inx
  11524  8252				  -	      rts
  11525  8252					      endif
  11526  8252
  11527  8252							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11528  8252
  11529  8252				   start
  11530  8252		       78		      sei
  11531  8253		       d8		      cld
  11532  8254		       a0 00		      ldy	#0
  11533  8256		       a5 d0		      lda	$D0
  11534  8258		       c9 2c		      cmp	#$2C	;check RAM location #1
  11535  825a		       d0 07		      bne	MachineIs2600
  11536  825c		       a5 d1		      lda	$D1
  11537  825e		       c9 a9		      cmp	#$A9	;check RAM location #2
  11538  8260		       d0 01		      bne	MachineIs2600
  11539  8262		       88		      dey
  11540  8263				   MachineIs2600
  11541  8263		       a2 00		      ldx	#0
  11542  8265		       8a		      txa
  11543  8266				   clearmem
  11544  8266		       e8		      inx
  11545  8267		       9a		      txs
  11546  8268		       48		      pha
  11547  8269		       d0 fb		      bne	clearmem
  11548  826b		       84 9c		      sty	temp1
  11549  826d					      ifnconst	multisprite
  11550  826d				  -	      ifconst	pfrowheight
  11551  826d				  -	      lda	#pfrowheight
  11552  826d					      else
  11553  826d				  -	      ifconst	pfres
  11554  826d				  -	      lda	#(96/pfres)
  11555  826d					      else
  11556  826d		       a9 08		      lda	#8
  11557  826f					      endif
  11558  826f					      endif
  11559  826f		       85 ef		      sta	playfieldpos
  11560  8271					      endif
  11561  8271		       a2 05		      ldx	#5
  11562  8273				   initscore
  11563  8273		       a9 74		      lda	#<scoretable
  11564  8275		       95 96		      sta	scorepointers,x
  11565  8277		       ca		      dex
  11566  8278		       10 f9		      bpl	initscore
  11567  827a		       a9 01		      lda	#1
  11568  827c		       85 0a		      sta	CTRLPF
  11569  827e		       0d 84 02 	      ora	INTIM
  11570  8281		       85 a2		      sta	rand
  11571  8283
  11572  8283				  -	      ifconst	multisprite
  11573  8283				  -	      jsr	multisprite_setup
  11574  8283					      endif
  11575  8283
  11576  8283				  -	      ifnconst	bankswitch
  11577  8283				  -	      jmp	game
  11578  8283					      else
  11579  8283		       a9 0f		      lda	#>(game-1)
  11580  8285		       48		      pha
  11581  8286		       a9 ff		      lda	#<(game-1)
  11582  8288		       48		      pha
  11583  8289		       48		      pha
  11584  828a		       48		      pha
  11585  828b		       a2 01		      ldx	#1
  11586  828d		       4c eb ff 	      jmp	BS_jsr
  11587  8290					      endif
  11588  8290							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11589  8290
  11590  8290							; playfield drawing routines
  11591  8290							; you get a 32x12 bitmapped display in a single color :)
  11592  8290							; 0-31 and 0-11
  11593  8290
  11594  8290				   pfclear		; clears playfield - or fill with pattern
  11595  8290				  -	      ifconst	pfres
  11596  8290				  -	      ldx	#pfres*pfwidth-1
  11597  8290					      else
  11598  8290		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
  11599  8292					      endif
  11600  8292				   pfclear_loop
  11601  8292					      ifnconst	superchip
  11602  8292		       95 a4		      sta	playfield,x
  11603  8294				  -	      else
  11604  8294				  -	      sta	playfield-128,x
  11605  8294					      endif
  11606  8294		       ca		      dex
  11607  8295		       10 fb		      bpl	pfclear_loop
      0  8297					      RETURN
      1  8297				  -	      ifnconst	bankswitch
      2  8297				  -	      rts
      3  8297					      else
      4  8297		       4c dd ff 	      jmp	BS_return
      5  829a					      endif
  11609  829a
  11610  829a				   setuppointers
  11611  829a		       86 9d		      stx	temp2	; store on.off.flip value
  11612  829c		       aa		      tax		; put x-value in x 
  11613  829d		       4a		      lsr
  11614  829e		       4a		      lsr
  11615  829f		       4a		      lsr		; divide x pos by 8 
  11616  82a0		       85 9c		      sta	temp1
  11617  82a2		       98		      tya
  11618  82a3		       0a		      asl
  11619  82a4					      if	pfwidth=4
  11620  82a4		       0a		      asl		; multiply y pos by 4
  11621  82a5					      endif		; else multiply by 2
  11622  82a5		       18		      clc
  11623  82a6		       65 9c		      adc	temp1	; add them together to get actual memory location offset
  11624  82a8		       a8		      tay		; put the value in y
  11625  82a9		       a5 9d		      lda	temp2	; restore on.off.flip value
  11626  82ab		       60		      rts
  11627  82ac
  11628  82ac				   pfread
  11629  82ac							;x=xvalue, y=yvalue
  11630  82ac		       20 9a f2 	      jsr	setuppointers
  11631  82af		       bd 44 f3 	      lda	setbyte,x
  11632  82b2		       39 a4 00 	      and	playfield,y
  11633  82b5		       5d 44 f3 	      eor	setbyte,x
  11634  82b8							; beq readzero
  11635  82b8							; lda #1
  11636  82b8							; readzero
      0  82b8					      RETURN
      1  82b8				  -	      ifnconst	bankswitch
      2  82b8				  -	      rts
      3  82b8					      else
      4  82b8		       4c dd ff 	      jmp	BS_return
      5  82bb					      endif
  11638  82bb
  11639  82bb				   pfpixel
  11640  82bb							;x=xvalue, y=yvalue, a=0,1,2
  11641  82bb		       20 9a f2 	      jsr	setuppointers
  11642  82be
  11643  82be					      ifconst	bankswitch
  11644  82be		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  11645  82c0		       f0 0f		      beq	pixelon_r	; if "on" go to on
  11646  82c2		       4a		      lsr
  11647  82c3		       b0 18		      bcs	pixeloff_r	; value is 1 if true
  11648  82c5		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  11649  82c8		       5d 44 f3 	      eor	setbyte,x
  11650  82cb				  -	      ifconst	superchip
  11651  82cb				  -	      sta	playfield-128,y
  11652  82cb					      else
  11653  82cb		       99 a4 00 	      sta	playfield,y
  11654  82ce					      endif
      0  82ce					      RETURN
      1  82ce				  -	      ifnconst	bankswitch
      2  82ce				  -	      rts
      3  82ce					      else
      4  82ce		       4c dd ff 	      jmp	BS_return
      5  82d1					      endif
  11656  82d1				   pixelon_r
  11657  82d1		       b9 a4 00 	      lda	playfield,y
  11658  82d4		       1d 44 f3 	      ora	setbyte,x
  11659  82d7				  -	      ifconst	superchip
  11660  82d7				  -	      sta	playfield-128,y
  11661  82d7					      else
  11662  82d7		       99 a4 00 	      sta	playfield,y
  11663  82da					      endif
      0  82da					      RETURN
      1  82da				  -	      ifnconst	bankswitch
      2  82da				  -	      rts
      3  82da					      else
      4  82da		       4c dd ff 	      jmp	BS_return
      5  82dd					      endif
  11665  82dd				   pixeloff_r
  11666  82dd		       bd 44 f3 	      lda	setbyte,x
  11667  82e0		       49 ff		      eor	#$ff
  11668  82e2		       39 a4 00 	      and	playfield,y
  11669  82e5				  -	      ifconst	superchip
  11670  82e5				  -	      sta	playfield-128,y
  11671  82e5					      else
  11672  82e5		       99 a4 00 	      sta	playfield,y
  11673  82e8					      endif
      0  82e8					      RETURN
      1  82e8				  -	      ifnconst	bankswitch
      2  82e8				  -	      rts
      3  82e8					      else
      4  82e8		       4c dd ff 	      jmp	BS_return
      5  82eb					      endif
  11675  82eb
  11676  82eb				  -	      else
  11677  82eb				  -	      jmp	plotpoint
  11678  82eb					      endif
  11679  82eb
  11680  82eb				   pfhline
  11681  82eb							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  11682  82eb		       20 9a f2 	      jsr	setuppointers
  11683  82ee		       4c f8 f2 	      jmp	noinc
  11684  82f1				   keepgoing
  11685  82f1		       e8		      inx
  11686  82f2		       8a		      txa
  11687  82f3		       29 07		      and	#7
  11688  82f5		       d0 01		      bne	noinc
  11689  82f7		       c8		      iny
  11690  82f8				   noinc
  11691  82f8		       20 1d f3 	      jsr	plotpoint
  11692  82fb		       e4 9e		      cpx	temp3
  11693  82fd		       30 f2		      bmi	keepgoing
      0  82ff					      RETURN
      1  82ff				  -	      ifnconst	bankswitch
      2  82ff				  -	      rts
      3  82ff					      else
      4  82ff		       4c dd ff 	      jmp	BS_return
      5  8302					      endif
  11695  8302
  11696  8302				   pfvline
  11697  8302							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  11698  8302		       20 9a f2 	      jsr	setuppointers
  11699  8305		       84 9c		      sty	temp1	; store memory location offset
  11700  8307		       e6 9e		      inc	temp3	; increase final x by 1 
  11701  8309		       a5 9e		      lda	temp3
  11702  830b		       0a		      asl
  11703  830c					      if	pfwidth=4
  11704  830c		       0a		      asl		; multiply by 4
  11705  830d					      endif		; else multiply by 2
  11706  830d		       85 9e		      sta	temp3	; store it
  11707  830f							; Thanks to Michael Rideout for fixing a bug in this code
  11708  830f							; right now, temp1=y=starting memory location, temp3=final
  11709  830f							; x should equal original x value
  11710  830f				   keepgoingy
  11711  830f		       20 1d f3 	      jsr	plotpoint
  11712  8312		       c8		      iny
  11713  8313		       c8		      iny
  11714  8314					      if	pfwidth=4
  11715  8314		       c8		      iny
  11716  8315		       c8		      iny
  11717  8316					      endif
  11718  8316		       c4 9e		      cpy	temp3
  11719  8318		       30 f5		      bmi	keepgoingy
      0  831a					      RETURN
      1  831a				  -	      ifnconst	bankswitch
      2  831a				  -	      rts
      3  831a					      else
      4  831a		       4c dd ff 	      jmp	BS_return
      5  831d					      endif
  11721  831d
  11722  831d				   plotpoint
  11723  831d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  11724  831f		       f0 0d		      beq	pixelon	; if "on" go to on
  11725  8321		       4a		      lsr
  11726  8322		       b0 14		      bcs	pixeloff	; value is 1 if true
  11727  8324		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  11728  8327		       5d 44 f3 	      eor	setbyte,x
  11729  832a				  -	      ifconst	superchip
  11730  832a				  -	      sta	playfield-128,y
  11731  832a					      else
  11732  832a		       99 a4 00 	      sta	playfield,y
  11733  832d					      endif
  11734  832d		       60		      rts
  11735  832e				   pixelon
  11736  832e		       b9 a4 00 	      lda	playfield,y
  11737  8331		       1d 44 f3 	      ora	setbyte,x
  11738  8334				  -	      ifconst	superchip
  11739  8334				  -	      sta	playfield-128,y
  11740  8334					      else
  11741  8334		       99 a4 00 	      sta	playfield,y
  11742  8337					      endif
  11743  8337		       60		      rts
  11744  8338				   pixeloff
  11745  8338		       bd 44 f3 	      lda	setbyte,x
  11746  833b		       49 ff		      eor	#$ff
  11747  833d		       39 a4 00 	      and	playfield,y
  11748  8340				  -	      ifconst	superchip
  11749  8340				  -	      sta	playfield-128,y
  11750  8340					      else
  11751  8340		       99 a4 00 	      sta	playfield,y
  11752  8343					      endif
  11753  8343		       60		      rts
  11754  8344
  11755  8344				   setbyte
  11756  8344					      ifnconst	pfcenter
  11757  8344		       80		      .byte.b	$80
  11758  8345		       40		      .byte.b	$40
  11759  8346		       20		      .byte.b	$20
  11760  8347		       10		      .byte.b	$10
  11761  8348		       08		      .byte.b	$08
  11762  8349		       04		      .byte.b	$04
  11763  834a		       02		      .byte.b	$02
  11764  834b		       01		      .byte.b	$01
  11765  834c					      endif
  11766  834c		       01		      .byte.b	$01
  11767  834d		       02		      .byte.b	$02
  11768  834e		       04		      .byte.b	$04
  11769  834f		       08		      .byte.b	$08
  11770  8350		       10		      .byte.b	$10
  11771  8351		       20		      .byte.b	$20
  11772  8352		       40		      .byte.b	$40
  11773  8353		       80		      .byte.b	$80
  11774  8354		       80		      .byte.b	$80
  11775  8355		       40		      .byte.b	$40
  11776  8356		       20		      .byte.b	$20
  11777  8357		       10		      .byte.b	$10
  11778  8358		       08		      .byte.b	$08
  11779  8359		       04		      .byte.b	$04
  11780  835a		       02		      .byte.b	$02
  11781  835b		       01		      .byte.b	$01
  11782  835c		       01		      .byte.b	$01
  11783  835d		       02		      .byte.b	$02
  11784  835e		       04		      .byte.b	$04
  11785  835f		       08		      .byte.b	$08
  11786  8360		       10		      .byte.b	$10
  11787  8361		       20		      .byte.b	$20
  11788  8362		       40		      .byte.b	$40
  11789  8363		       80		      .byte.b	$80
  11790  8364							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11791  8364
  11792  8364				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
  11793  8364		       d0 15		      bne	notleft
  11794  8366							;left
  11795  8366				  -	      ifconst	pfres
  11796  8366				  -	      ldx	#pfres*4
  11797  8366					      else
  11798  8366		       a2 30		      ldx	#48
  11799  8368					      endif
  11800  8368				   leftloop
  11801  8368		       b5 a3		      lda	playfield-1,x
  11802  836a		       4a		      lsr
  11803  836b
  11804  836b				  -	      ifconst	superchip
  11805  836b				  -	      lda	playfield-2,x
  11806  836b				  -	      rol
  11807  836b				  -	      sta	playfield-130,x
  11808  836b				  -	      lda	playfield-3,x
  11809  836b				  -	      ror
  11810  836b				  -	      sta	playfield-131,x
  11811  836b				  -	      lda	playfield-4,x
  11812  836b				  -	      rol
  11813  836b				  -	      sta	playfield-132,x
  11814  836b				  -	      lda	playfield-1,x
  11815  836b				  -	      ror
  11816  836b				  -	      sta	playfield-129,x
  11817  836b					      else
  11818  836b		       36 a2		      rol	playfield-2,x
  11819  836d		       76 a1		      ror	playfield-3,x
  11820  836f		       36 a0		      rol	playfield-4,x
  11821  8371		       76 a3		      ror	playfield-1,x
  11822  8373					      endif
  11823  8373
  11824  8373		       8a		      txa
  11825  8374		       cb 04		      sbx	#4
  11826  8376		       d0 f0		      bne	leftloop
      0  8378					      RETURN
      1  8378				  -	      ifnconst	bankswitch
      2  8378				  -	      rts
      3  8378					      else
      4  8378		       4c dd ff 	      jmp	BS_return
      5  837b					      endif
  11828  837b
  11829  837b				   notleft
  11830  837b		       4a		      lsr
  11831  837c		       90 15		      bcc	notright
  11832  837e							;right
  11833  837e
  11834  837e				  -	      ifconst	pfres
  11835  837e				  -	      ldx	#pfres*4
  11836  837e					      else
  11837  837e		       a2 30		      ldx	#48
  11838  8380					      endif
  11839  8380				   rightloop
  11840  8380		       b5 a0		      lda	playfield-4,x
  11841  8382		       4a		      lsr
  11842  8383				  -	      ifconst	superchip
  11843  8383				  -	      lda	playfield-3,x
  11844  8383				  -	      rol
  11845  8383				  -	      sta	playfield-131,x
  11846  8383				  -	      lda	playfield-2,x
  11847  8383				  -	      ror
  11848  8383				  -	      sta	playfield-130,x
  11849  8383				  -	      lda	playfield-1,x
  11850  8383				  -	      rol
  11851  8383				  -	      sta	playfield-129,x
  11852  8383				  -	      lda	playfield-4,x
  11853  8383				  -	      ror
  11854  8383				  -	      sta	playfield-132,x
  11855  8383					      else
  11856  8383		       36 a1		      rol	playfield-3,x
  11857  8385		       76 a2		      ror	playfield-2,x
  11858  8387		       36 a3		      rol	playfield-1,x
  11859  8389		       76 a0		      ror	playfield-4,x
  11860  838b					      endif
  11861  838b		       8a		      txa
  11862  838c		       cb 04		      sbx	#4
  11863  838e		       d0 f0		      bne	rightloop
      0  8390					      RETURN
      1  8390				  -	      ifnconst	bankswitch
      2  8390				  -	      rts
      3  8390					      else
      4  8390		       4c dd ff 	      jmp	BS_return
      5  8393					      endif
  11865  8393
  11866  8393				   notright
  11867  8393		       4a		      lsr
  11868  8394		       90 4b		      bcc	notup
  11869  8396							;up
  11870  8396		       4a		      lsr
  11871  8397		       90 02		      bcc	onedecup
  11872  8399		       c6 ef		      dec	playfieldpos
  11873  839b				   onedecup
  11874  839b		       c6 ef		      dec	playfieldpos
  11875  839d		       f0 02		      beq	shiftdown
  11876  839f		       10 3d		      bpl	noshiftdown2
  11877  83a1				   shiftdown
  11878  83a1				  -	      ifconst	pfrowheight
  11879  83a1				  -	      lda	#pfrowheight
  11880  83a1					      else
  11881  83a1					      ifnconst	pfres
  11882  83a1		       a9 08		      lda	#8
  11883  83a3				  -	      else
  11884  83a3				  -	      lda	#(96/pfres)	; try to come close to the real size
  11885  83a3					      endif
  11886  83a3					      endif
  11887  83a3
  11888  83a3		       85 ef		      sta	playfieldpos
  11889  83a5		       a5 a7		      lda	playfield+3
  11890  83a7		       85 9f		      sta	temp4
  11891  83a9		       a5 a6		      lda	playfield+2
  11892  83ab		       85 9e		      sta	temp3
  11893  83ad		       a5 a5		      lda	playfield+1
  11894  83af		       85 9d		      sta	temp2
  11895  83b1		       a5 a4		      lda	playfield
  11896  83b3		       85 9c		      sta	temp1
  11897  83b5		       a2 00		      ldx	#0
  11898  83b7				   up2
  11899  83b7		       b5 a8		      lda	playfield+4,x
  11900  83b9				  -	      ifconst	superchip
  11901  83b9				  -	      sta	playfield-128,x
  11902  83b9				  -	      lda	playfield+5,x
  11903  83b9				  -	      sta	playfield-127,x
  11904  83b9				  -	      lda	playfield+6,x
  11905  83b9				  -	      sta	playfield-126,x
  11906  83b9				  -	      lda	playfield+7,x
  11907  83b9				  -	      sta	playfield-125,x
  11908  83b9					      else
  11909  83b9		       95 a4		      sta	playfield,x
  11910  83bb		       b5 a9		      lda	playfield+5,x
  11911  83bd		       95 a5		      sta	playfield+1,x
  11912  83bf		       b5 aa		      lda	playfield+6,x
  11913  83c1		       95 a6		      sta	playfield+2,x
  11914  83c3		       b5 ab		      lda	playfield+7,x
  11915  83c5		       95 a7		      sta	playfield+3,x
  11916  83c7					      endif
  11917  83c7		       8a		      txa
  11918  83c8		       cb fc		      sbx	#252
  11919  83ca				  -	      ifconst	pfres
  11920  83ca				  -	      cpx	#(pfres-1)*4
  11921  83ca					      else
  11922  83ca		       e0 2c		      cpx	#44
  11923  83cc					      endif
  11924  83cc		       d0 e9		      bne	up2
  11925  83ce
  11926  83ce		       a5 9f		      lda	temp4
  11927  83d0
  11928  83d0				  -	      ifconst	superchip
  11929  83d0				  -	      ifconst	pfres
  11930  83d0				  -	      sta	playfield+pfres*4-129
  11931  83d0				  -	      lda	temp3
  11932  83d0				  -	      sta	playfield+pfres*4-130
  11933  83d0				  -	      lda	temp2
  11934  83d0				  -	      sta	playfield+pfres*4-131
  11935  83d0				  -	      lda	temp1
  11936  83d0				  -	      sta	playfield+pfres*4-132
  11937  83d0				  -	      else
  11938  83d0				  -	      sta	playfield+47-128
  11939  83d0				  -	      lda	temp3
  11940  83d0				  -	      sta	playfield+46-128
  11941  83d0				  -	      lda	temp2
  11942  83d0				  -	      sta	playfield+45-128
  11943  83d0				  -	      lda	temp1
  11944  83d0				  -	      sta	playfield+44-128
  11945  83d0				  -	      endif
  11946  83d0					      else
  11947  83d0				  -	      ifconst	pfres
  11948  83d0				  -	      sta	playfield+pfres*4-1
  11949  83d0				  -	      lda	temp3
  11950  83d0				  -	      sta	playfield+pfres*4-2
  11951  83d0				  -	      lda	temp2
  11952  83d0				  -	      sta	playfield+pfres*4-3
  11953  83d0				  -	      lda	temp1
  11954  83d0				  -	      sta	playfield+pfres*4-4
  11955  83d0					      else
  11956  83d0		       85 d3		      sta	playfield+47
  11957  83d2		       a5 9e		      lda	temp3
  11958  83d4		       85 d2		      sta	playfield+46
  11959  83d6		       a5 9d		      lda	temp2
  11960  83d8		       85 d1		      sta	playfield+45
  11961  83da		       a5 9c		      lda	temp1
  11962  83dc		       85 d0		      sta	playfield+44
  11963  83de					      endif
  11964  83de					      endif
  11965  83de				   noshiftdown2
      0  83de					      RETURN
      1  83de				  -	      ifnconst	bankswitch
      2  83de				  -	      rts
      3  83de					      else
      4  83de		       4c dd ff 	      jmp	BS_return
      5  83e1					      endif
  11967  83e1
  11968  83e1
  11969  83e1				   notup
  11970  83e1							;down
  11971  83e1		       4a		      lsr
  11972  83e2		       b0 02		      bcs	oneincup
  11973  83e4		       e6 ef		      inc	playfieldpos
  11974  83e6				   oneincup
  11975  83e6		       e6 ef		      inc	playfieldpos
  11976  83e8		       a5 ef		      lda	playfieldpos
  11977  83ea
  11978  83ea				  -	      ifconst	pfrowheight
  11979  83ea				  -	      cmp	#pfrowheight+1
  11980  83ea					      else
  11981  83ea					      ifnconst	pfres
  11982  83ea		       c9 09		      cmp	#9
  11983  83ec				  -	      else
  11984  83ec				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
  11985  83ec					      endif
  11986  83ec					      endif
  11987  83ec
  11988  83ec		       90 3b		      bcc	noshiftdown
  11989  83ee		       a9 01		      lda	#1
  11990  83f0		       85 ef		      sta	playfieldpos
  11991  83f2
  11992  83f2				  -	      ifconst	pfres
  11993  83f2				  -	      lda	playfield+pfres*4-1
  11994  83f2				  -	      sta	temp4
  11995  83f2				  -	      lda	playfield+pfres*4-2
  11996  83f2				  -	      sta	temp3
  11997  83f2				  -	      lda	playfield+pfres*4-3
  11998  83f2				  -	      sta	temp2
  11999  83f2				  -	      lda	playfield+pfres*4-4
  12000  83f2					      else
  12001  83f2		       a5 d3		      lda	playfield+47
  12002  83f4		       85 9f		      sta	temp4
  12003  83f6		       a5 d2		      lda	playfield+46
  12004  83f8		       85 9e		      sta	temp3
  12005  83fa		       a5 d1		      lda	playfield+45
  12006  83fc		       85 9d		      sta	temp2
  12007  83fe		       a5 d0		      lda	playfield+44
  12008  8400					      endif
  12009  8400
  12010  8400		       85 9c		      sta	temp1
  12011  8402
  12012  8402				  -	      ifconst	pfres
  12013  8402				  -	      ldx	#(pfres-1)*4
  12014  8402					      else
  12015  8402		       a2 2c		      ldx	#44
  12016  8404					      endif
  12017  8404				   down2
  12018  8404		       b5 a3		      lda	playfield-1,x
  12019  8406				  -	      ifconst	superchip
  12020  8406				  -	      sta	playfield-125,x
  12021  8406				  -	      lda	playfield-2,x
  12022  8406				  -	      sta	playfield-126,x
  12023  8406				  -	      lda	playfield-3,x
  12024  8406				  -	      sta	playfield-127,x
  12025  8406				  -	      lda	playfield-4,x
  12026  8406				  -	      sta	playfield-128,x
  12027  8406					      else
  12028  8406		       95 a7		      sta	playfield+3,x
  12029  8408		       b5 a2		      lda	playfield-2,x
  12030  840a		       95 a6		      sta	playfield+2,x
  12031  840c		       b5 a1		      lda	playfield-3,x
  12032  840e		       95 a5		      sta	playfield+1,x
  12033  8410		       b5 a0		      lda	playfield-4,x
  12034  8412		       95 a4		      sta	playfield,x
  12035  8414					      endif
  12036  8414		       8a		      txa
  12037  8415		       cb 04		      sbx	#4
  12038  8417		       d0 eb		      bne	down2
  12039  8419
  12040  8419		       a5 9f		      lda	temp4
  12041  841b				  -	      ifconst	superchip
  12042  841b				  -	      sta	playfield-125
  12043  841b				  -	      lda	temp3
  12044  841b				  -	      sta	playfield-126
  12045  841b				  -	      lda	temp2
  12046  841b				  -	      sta	playfield-127
  12047  841b				  -	      lda	temp1
  12048  841b				  -	      sta	playfield-128
  12049  841b					      else
  12050  841b		       85 a7		      sta	playfield+3
  12051  841d		       a5 9e		      lda	temp3
  12052  841f		       85 a6		      sta	playfield+2
  12053  8421		       a5 9d		      lda	temp2
  12054  8423		       85 a5		      sta	playfield+1
  12055  8425		       a5 9c		      lda	temp1
  12056  8427		       85 a4		      sta	playfield
  12057  8429					      endif
  12058  8429				   noshiftdown
      0  8429					      RETURN
      1  8429				  -	      ifnconst	bankswitch
      2  8429				  -	      rts
      3  8429					      else
      4  8429		       4c dd ff 	      jmp	BS_return
      5  842c					      endif
  12060  842c							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12061  842c
  12062  842c							;standard routines needed for pretty much all games
  12063  842c							; just the random number generator is left - maybe we should remove this asm file altogether?
  12064  842c							; repositioning code and score pointer setup moved to overscan
  12065  842c							; read switches, joysticks now compiler generated (more efficient)
  12066  842c
  12067  842c				   randomize
  12068  842c		       a5 a2		      lda	rand
  12069  842e		       4a		      lsr
  12070  842f					      ifconst	rand16
  12071  842f		       26 ed		      rol	rand16
  12072  8431					      endif
  12073  8431		       90 02		      bcc	noeor
  12074  8433		       49 b4		      eor	#$B4
  12075  8435				   noeor
  12076  8435		       85 a2		      sta	rand
  12077  8437					      ifconst	rand16
  12078  8437		       45 ed		      eor	rand16
  12079  8439					      endif
      0  8439					      RETURN
      1  8439				  -	      ifnconst	bankswitch
      2  8439				  -	      rts
      3  8439					      else
      4  8439		       4c dd ff 	      jmp	BS_return
      5  843c					      endif
  12081  843c							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12082  843c
  12083  843c				   drawscreen
  12084  843c				  -	      ifconst	debugscore
  12085  843c				  -	      ldx	#14
  12086  843c				  -	      lda	INTIM	; display # cycles left in the score
  12087  843c				  -
  12088  843c				  -	      ifconst	mincycles
  12089  843c				  -	      lda	mincycles
  12090  843c				  -	      cmp	INTIM
  12091  843c				  -	      lda	mincycles
  12092  843c				  -	      bcc	nochange
  12093  843c				  -	      lda	INTIM
  12094  843c				  -	      sta	mincycles
  12095  843c				  -nochange
  12096  843c				  -	      endif
  12097  843c				  -
  12098  843c				  -			; cmp #$2B
  12099  843c				  -			; bcs no_cycles_left
  12100  843c				  -	      bmi	cycles_left
  12101  843c				  -	      ldx	#64
  12102  843c				  -	      eor	#$ff	;make negative
  12103  843c				  -cycles_left
  12104  843c				  -	      stx	scorecolor
  12105  843c				  -	      and	#$7f	; clear sign bit
  12106  843c				  -	      tax
  12107  843c				  -	      lda	scorebcd,x
  12108  843c				  -	      sta	score+2
  12109  843c				  -	      lda	scorebcd1,x
  12110  843c				  -	      sta	score+1
  12111  843c				  -	      jmp	done_debugscore
  12112  843c				  -scorebcd
  12113  843c				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
  12114  843c				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
  12115  843c				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
  12116  843c				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
  12117  843c				  -scorebcd1
  12118  843c				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
  12119  843c				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
  12120  843c				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
  12121  843c				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
  12122  843c				  -done_debugscore
  12123  843c					      endif
  12124  843c
  12125  843c				  -	      ifconst	debugcycles
  12126  843c				  -	      lda	INTIM	; if we go over, it mucks up the background color
  12127  843c				  -			; cmp #$2B
  12128  843c				  -			; BCC overscan
  12129  843c				  -	      bmi	overscan
  12130  843c				  -	      sta	COLUBK
  12131  843c				  -	      bcs	doneoverscan
  12132  843c					      endif
  12133  843c
  12134  843c				   overscan
  12135  843c				  -	      ifconst	interlaced
  12136  843c				  -	      PHP
  12137  843c				  -	      PLA
  12138  843c				  -	      EOR	#4	; flip interrupt bit
  12139  843c				  -	      PHA
  12140  843c				  -	      PLP
  12141  843c				  -	      AND	#4	; isolate the interrupt bit
  12142  843c				  -	      TAX		; save it for later
  12143  843c					      endif
  12144  843c
  12145  843c				   overscanloop
  12146  843c		       ad 84 02 	      lda	INTIM	;wait for sync
  12147  843f		       30 fb		      bmi	overscanloop
  12148  8441				   doneoverscan
  12149  8441
  12150  8441							;do VSYNC
  12151  8441
  12152  8441				  -	      ifconst	interlaced
  12153  8441				  -	      CPX	#4
  12154  8441				  -	      BNE	oddframevsync
  12155  8441					      endif
  12156  8441
  12157  8441		       a9 02		      lda	#2
  12158  8443		       85 02		      sta	WSYNC
  12159  8445		       85 00		      sta	VSYNC
  12160  8447		       85 02		      STA	WSYNC
  12161  8449		       85 02		      STA	WSYNC
  12162  844b		       4a		      lsr
  12163  844c		       85 02		      STA	WSYNC
  12164  844e		       85 00		      STA	VSYNC
  12165  8450		       85 01		      sta	VBLANK
  12166  8452				  -	      ifnconst	overscan_time
  12167  8452				  -	      lda	#37+128
  12168  8452					      else
  12169  8452		       a9 a5		      lda	#overscan_time+128
  12170  8454					      endif
  12171  8454		       8d 96 02 	      sta	TIM64T
  12172  8457
  12173  8457				  -	      ifconst	interlaced
  12174  8457				  -	      jmp	postsync
  12175  8457				  -
  12176  8457				  -oddframevsync
  12177  8457				  -	      sta	WSYNC
  12178  8457				  -
  12179  8457				  -	      LDA	($80,X)	; 11 waste
  12180  8457				  -	      LDA	($80,X)	; 11 waste
  12181  8457				  -	      LDA	($80,X)	; 11 waste
  12182  8457				  -
  12183  8457				  -	      lda	#2
  12184  8457				  -	      sta	VSYNC
  12185  8457				  -	      sta	WSYNC
  12186  8457				  -	      sta	WSYNC
  12187  8457				  -	      sta	WSYNC
  12188  8457				  -
  12189  8457				  -	      LDA	($80,X)	; 11 waste
  12190  8457				  -	      LDA	($80,X)	; 11 waste
  12191  8457				  -	      LDA	($80,X)	; 11 waste
  12192  8457				  -
  12193  8457				  -	      lda	#0
  12194  8457				  -	      sta	VSYNC
  12195  8457				  -	      sta	VBLANK
  12196  8457				  -	      ifnconst	overscan_time
  12197  8457				  -	      lda	#37+128
  12198  8457				  -	      else
  12199  8457				  -	      lda	#overscan_time+128
  12200  8457				  -	      endif
  12201  8457				  -	      sta	TIM64T
  12202  8457				  -
  12203  8457				  -postsync
  12204  8457					      endif
  12205  8457
  12206  8457				  -	      ifconst	legacy
  12207  8457				  -	      if	legacy < 100
  12208  8457				  -	      ldx	#4
  12209  8457				  -adjustloop
  12210  8457				  -	      lda	player0x,x
  12211  8457				  -	      sec
  12212  8457				  -	      sbc	#14	;?
  12213  8457				  -	      sta	player0x,x
  12214  8457				  -	      dex
  12215  8457				  -	      bpl	adjustloop
  12216  8457				  -	      endif
  12217  8457					      endif
  12218  8457				  -	      if	((<*)>$e9)&&((<*)<$fa)
  12219  8457				  -	      repeat	($fa-(<*))
  12220  8457				  -	      nop
  12221  8457				  -	      repend
  12222  8457					      endif
  12223  8457		       85 02		      sta	WSYNC
  12224  8459		       a2 04		      ldx	#4
      0  845b					      SLEEP	3
      1  845b				   .CYCLES    SET	3
      2  845b
      3  845b				  -	      IF	.CYCLES < 2
      4  845b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  845b				  -	      ERR
      6  845b					      ENDIF
      7  845b
      8  845b					      IF	.CYCLES & 1
      9  845b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  845b		       04 00		      nop	0
     11  845d				  -	      ELSE
     12  845d				  -	      bit	VSYNC
     13  845d					      ENDIF
     14  845d				   .CYCLES    SET	.CYCLES - 3
     15  845d					      ENDIF
     16  845d
     17  845d				  -	      REPEAT	.CYCLES / 2
     18  845d				  -	      nop
     19  845d					      REPEND
  12226  845d				   HorPosLoop		; 5
  12227  845d		       b5 80		      lda	player0x,X	;+4 9
  12228  845f		       38		      sec		;+2 11
  12229  8460				   DivideLoop
  12230  8460		       e9 0f		      sbc	#15
  12231  8462		       b0 fc		      bcs	DivideLoop	;+4 15
  12232  8464		       95 9c		      sta	temp1,X	;+4 19
  12233  8466		       95 10		      sta	RESP0,X	;+4 23
  12234  8468		       85 02		      sta	WSYNC
  12235  846a		       ca		      dex
  12236  846b		       10 f0		      bpl	HorPosLoop	;+5 5
  12237  846d							; 4
  12238  846d
  12239  846d		       a2 04		      ldx	#4
  12240  846f		       b4 9c		      ldy	temp1,X
  12241  8471		       b9 cd f3 	      lda	repostable-256,Y
  12242  8474		       95 20		      sta	HMP0,X	;+14 18
  12243  8476
  12244  8476		       ca		      dex
  12245  8477		       b4 9c		      ldy	temp1,X
  12246  8479		       b9 cd f3 	      lda	repostable-256,Y
  12247  847c		       95 20		      sta	HMP0,X	;+14 32
  12248  847e
  12249  847e		       ca		      dex
  12250  847f		       b4 9c		      ldy	temp1,X
  12251  8481		       b9 cd f3 	      lda	repostable-256,Y
  12252  8484		       95 20		      sta	HMP0,X	;+14 46
  12253  8486
  12254  8486		       ca		      dex
  12255  8487		       b4 9c		      ldy	temp1,X
  12256  8489		       b9 cd f3 	      lda	repostable-256,Y
  12257  848c		       95 20		      sta	HMP0,X	;+14 60
  12258  848e
  12259  848e		       ca		      dex
  12260  848f		       b4 9c		      ldy	temp1,X
  12261  8491		       b9 cd f3 	      lda	repostable-256,Y
  12262  8494		       95 20		      sta	HMP0,X	;+14 74
  12263  8496
  12264  8496		       85 02		      sta	WSYNC
  12265  8498
  12266  8498		       85 2a		      sta	HMOVE	;+3 3
  12267  849a
  12268  849a
  12269  849a				  -	      ifconst	legacy
  12270  849a				  -	      if	legacy < 100
  12271  849a				  -	      ldx	#4
  12272  849a				  -adjustloop2
  12273  849a				  -	      lda	player0x,x
  12274  849a				  -	      clc
  12275  849a				  -	      adc	#14	;?
  12276  849a				  -	      sta	player0x,x
  12277  849a				  -	      dex
  12278  849a				  -	      bpl	adjustloop2
  12279  849a				  -	      endif
  12280  849a					      endif
  12281  849a
  12282  849a
  12283  849a
  12284  849a
  12285  849a							;set score pointers
  12286  849a		       a7 95		      lax	score+2
  12287  849c		       20 cd f4 	      jsr	scorepointerset
  12288  849f		       84 9b		      sty	scorepointers+5
  12289  84a1		       86 98		      stx	scorepointers+2
  12290  84a3		       a7 94		      lax	score+1
  12291  84a5		       20 cd f4 	      jsr	scorepointerset
  12292  84a8		       84 9a		      sty	scorepointers+4
  12293  84aa		       86 97		      stx	scorepointers+1
  12294  84ac		       a7 93		      lax	score
  12295  84ae		       20 cd f4 	      jsr	scorepointerset
  12296  84b1		       84 99		      sty	scorepointers+3
  12297  84b3		       86 96		      stx	scorepointers
  12298  84b5
  12299  84b5				   vblk
  12300  84b5							; run possible vblank bB code
  12301  84b5				  -	      ifconst	vblank_bB_code
  12302  84b5				  -	      jsr	vblank_bB_code
  12303  84b5					      endif
  12304  84b5				   vblk2
  12305  84b5		       ad 84 02 	      LDA	INTIM
  12306  84b8		       30 fb		      bmi	vblk2
  12307  84ba		       4c 00 f0 	      jmp	kernel
  12308  84bd
  12309  84bd
  12310  84bd		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
  12311  84c6		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
  12312  84cd				   repostable
  12313  84cd
  12314  84cd				   scorepointerset
  12315  84cd		       29 0f		      and	#$0F
  12316  84cf		       0a		      asl
  12317  84d0		       0a		      asl
  12318  84d1		       0a		      asl
  12319  84d2		       69 74		      adc	#<scoretable
  12320  84d4		       a8		      tay
  12321  84d5		       8a		      txa
  12322  84d6							; and #$F0
  12323  84d6							; lsr
  12324  84d6		       4b f0		      asr	#$F0
  12325  84d8		       69 74		      adc	#<scoretable
  12326  84da		       aa		      tax
  12327  84db		       60		      rts
  12328  84dc							;bB.asm
  12329  84dc							; bB.asm file is split here
  12330  84dc				   .
  12331  84dc							; 
  12332  84dc
  12333  84dc				   .
  12334  84dc							; 
  12335  84dc
  12336  84dc				   .
  12337  84dc							; 
  12338  84dc
  12339  84dc				   .
  12340  84dc							; 
  12341  84dc
  12342  84dc				   .
  12343  84dc							; 
  12344  84dc
  12345  84dc				   .
  12346  84dc							; 
  12347  84dc
  12348  84dc				   .
  12349  84dc							; 
  12350  84dc
  12351  84dc				   .
  12352  84dc							; 
  12353  84dc
  12354  84dc				   .
  12355  84dc							; 
  12356  84dc
  12357  84dc				   .
  12358  84dc							; 
  12359  84dc
  12360  84dc				   .
  12361  84dc							; 
  12362  84dc
  12363  84dc				   .
  12364  84dc							; 
  12365  84dc
  12366  84dc				  -	      ifconst	pfres
  12367  84dc				  -	      if	(<*) > (254-pfres*pfwidth)
  12368  84dc				  -	      align	256
  12369  84dc				  -	      endif
  12370  84dc				  -	      if	(<*) < (136-pfres*pfwidth)
  12371  84dc				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12372  84dc				  -	      .byte	0
  12373  84dc				  -	      repend
  12374  84dc				  -	      endif
  12375  84dc					      else
  12376  84dc					      if	(<*) > 206
  12377  8500		       00 00 00 00*	      align	256
  12378  8500					      endif
  12379  8500					      if	(<*) < 88
  12380  8500					      repeat	(88-(<*))
  12381  8500		       00		      .byte.b	0
  12380  8500					      repend
  12381  8501		       00		      .byte.b	0
  12380  8501					      repend
  12381  8502		       00		      .byte.b	0
  12380  8502					      repend
  12381  8503		       00		      .byte.b	0
  12380  8503					      repend
  12381  8504		       00		      .byte.b	0
  12380  8504					      repend
  12381  8505		       00		      .byte.b	0
  12380  8505					      repend
  12381  8506		       00		      .byte.b	0
  12380  8506					      repend
  12381  8507		       00		      .byte.b	0
  12380  8507					      repend
  12381  8508		       00		      .byte.b	0
  12380  8508					      repend
  12381  8509		       00		      .byte.b	0
  12380  8509					      repend
  12381  850a		       00		      .byte.b	0
  12380  850a					      repend
  12381  850b		       00		      .byte.b	0
  12380  850b					      repend
  12381  850c		       00		      .byte.b	0
  12380  850c					      repend
  12381  850d		       00		      .byte.b	0
  12380  850d					      repend
  12381  850e		       00		      .byte.b	0
  12380  850e					      repend
  12381  850f		       00		      .byte.b	0
  12380  850f					      repend
  12381  8510		       00		      .byte.b	0
  12380  8510					      repend
  12381  8511		       00		      .byte.b	0
  12380  8511					      repend
  12381  8512		       00		      .byte.b	0
  12380  8512					      repend
  12381  8513		       00		      .byte.b	0
  12380  8513					      repend
  12381  8514		       00		      .byte.b	0
  12380  8514					      repend
  12381  8515		       00		      .byte.b	0
  12380  8515					      repend
  12381  8516		       00		      .byte.b	0
  12380  8516					      repend
  12381  8517		       00		      .byte.b	0
  12380  8517					      repend
  12381  8518		       00		      .byte.b	0
  12380  8518					      repend
  12381  8519		       00		      .byte.b	0
  12380  8519					      repend
  12381  851a		       00		      .byte.b	0
  12380  851a					      repend
  12381  851b		       00		      .byte.b	0
  12380  851b					      repend
  12381  851c		       00		      .byte.b	0
  12380  851c					      repend
  12381  851d		       00		      .byte.b	0
  12380  851d					      repend
  12381  851e		       00		      .byte.b	0
  12380  851e					      repend
  12381  851f		       00		      .byte.b	0
  12380  851f					      repend
  12381  8520		       00		      .byte.b	0
  12380  8520					      repend
  12381  8521		       00		      .byte.b	0
  12380  8521					      repend
  12381  8522		       00		      .byte.b	0
  12380  8522					      repend
  12381  8523		       00		      .byte.b	0
  12380  8523					      repend
  12381  8524		       00		      .byte.b	0
  12380  8524					      repend
  12381  8525		       00		      .byte.b	0
  12380  8525					      repend
  12381  8526		       00		      .byte.b	0
  12380  8526					      repend
  12381  8527		       00		      .byte.b	0
  12380  8527					      repend
  12381  8528		       00		      .byte.b	0
  12380  8528					      repend
  12381  8529		       00		      .byte.b	0
  12380  8529					      repend
  12381  852a		       00		      .byte.b	0
  12380  852a					      repend
  12381  852b		       00		      .byte.b	0
  12380  852b					      repend
  12381  852c		       00		      .byte.b	0
  12380  852c					      repend
  12381  852d		       00		      .byte.b	0
  12380  852d					      repend
  12381  852e		       00		      .byte.b	0
  12380  852e					      repend
  12381  852f		       00		      .byte.b	0
  12380  852f					      repend
  12381  8530		       00		      .byte.b	0
  12380  8530					      repend
  12381  8531		       00		      .byte.b	0
  12380  8531					      repend
  12381  8532		       00		      .byte.b	0
  12380  8532					      repend
  12381  8533		       00		      .byte.b	0
  12380  8533					      repend
  12381  8534		       00		      .byte.b	0
  12380  8534					      repend
  12381  8535		       00		      .byte.b	0
  12380  8535					      repend
  12381  8536		       00		      .byte.b	0
  12380  8536					      repend
  12381  8537		       00		      .byte.b	0
  12380  8537					      repend
  12381  8538		       00		      .byte.b	0
  12380  8538					      repend
  12381  8539		       00		      .byte.b	0
  12380  8539					      repend
  12381  853a		       00		      .byte.b	0
  12380  853a					      repend
  12381  853b		       00		      .byte.b	0
  12380  853b					      repend
  12381  853c		       00		      .byte.b	0
  12380  853c					      repend
  12381  853d		       00		      .byte.b	0
  12380  853d					      repend
  12381  853e		       00		      .byte.b	0
  12380  853e					      repend
  12381  853f		       00		      .byte.b	0
  12380  853f					      repend
  12381  8540		       00		      .byte.b	0
  12380  8540					      repend
  12381  8541		       00		      .byte.b	0
  12380  8541					      repend
  12381  8542		       00		      .byte.b	0
  12380  8542					      repend
  12381  8543		       00		      .byte.b	0
  12380  8543					      repend
  12381  8544		       00		      .byte.b	0
  12380  8544					      repend
  12381  8545		       00		      .byte.b	0
  12380  8545					      repend
  12381  8546		       00		      .byte.b	0
  12380  8546					      repend
  12381  8547		       00		      .byte.b	0
  12380  8547					      repend
  12381  8548		       00		      .byte.b	0
  12380  8548					      repend
  12381  8549		       00		      .byte.b	0
  12380  8549					      repend
  12381  854a		       00		      .byte.b	0
  12380  854a					      repend
  12381  854b		       00		      .byte.b	0
  12380  854b					      repend
  12381  854c		       00		      .byte.b	0
  12380  854c					      repend
  12381  854d		       00		      .byte.b	0
  12380  854d					      repend
  12381  854e		       00		      .byte.b	0
  12380  854e					      repend
  12381  854f		       00		      .byte.b	0
  12380  854f					      repend
  12381  8550		       00		      .byte.b	0
  12380  8550					      repend
  12381  8551		       00		      .byte.b	0
  12380  8551					      repend
  12381  8552		       00		      .byte.b	0
  12380  8552					      repend
  12381  8553		       00		      .byte.b	0
  12380  8553					      repend
  12381  8554		       00		      .byte.b	0
  12380  8554					      repend
  12381  8555		       00		      .byte.b	0
  12380  8555					      repend
  12381  8556		       00		      .byte.b	0
  12380  8556					      repend
  12381  8557		       00		      .byte.b	0
  12382  8558					      repend
  12383  8558					      endif
  12384  8558					      endif
  12385  8558				   pfcolorlabel13
  12386  8558		       04 2c 2e de	      .byte.b	$04, $2C, $2E, $DE
  12387  855c		       06 2c 2c dc	      .byte.b	$06, $2C, $2C, $DC
  12388  8560		       08 2c 2a da	      .byte.b	$08, $2C, $2A, $DA
  12389  8564		       0a 2a 28 d8	      .byte.b	$0A, $2A, $28, $D8
  12390  8568		       0c 28 26 d6	      .byte.b	$0C, $28, $26, $D6
  12391  856c		       0e 26 2e de	      .byte.b	$0E, $26, $2E, $DE
  12392  8570		       0c 2c 2e de	      .byte.b	$0C, $2C, $2E, $DE
  12393  8574		       0a 2c 2c dc	      .byte.b	$0A, $2C, $2C, $DC
  12394  8578		       08 2c 2a da	      .byte.b	$08, $2C, $2A, $DA
  12395  857c		       06 2c 28 d8	      .byte.b	$06, $2C, $28, $D8
  12396  8580		       04 00 26 d6	      .byte.b	$04,0, $26, $D6
  12397  8584		       00 00 00 00	      .byte.b	$00,0,0,0
  12398  8588				  -	      if	(<*) > (<(*+22))
  12399  8588				  -	      repeat	($100-<*)
  12400  8588				  -	      .byte	0
  12401  8588				  -	      repend
  12402  8588					      endif
  12403  8588				   playercolorL0102_1
  12404  8588		       00		      .byte.b	$00
  12405  8589		       0e		      .byte.b	$0e
  12406  858a		       00		      .byte.b	$00
  12407  858b		       0e		      .byte.b	$0e
  12408  858c		       00		      .byte.b	$00
  12409  858d		       0e		      .byte.b	$0e
  12410  858e		       00		      .byte.b	$00
  12411  858f		       00		      .byte.b	$00
  12412  8590		       00		      .byte.b	$00
  12413  8591		       00		      .byte.b	$00
  12414  8592		       00		      .byte.b	$00
  12415  8593		       0e		      .byte.b	$0e
  12416  8594		       00		      .byte.b	$00
  12417  8595		       0e		      .byte.b	$0e
  12418  8596		       00		      .byte.b	$00
  12419  8597		       00		      .byte.b	$00
  12420  8598		       0e		      .byte.b	$0e
  12421  8599		       0e		      .byte.b	$0e
  12422  859a		       0e		      .byte.b	$0e
  12423  859b		       0e		      .byte.b	$0e
  12424  859c		       0e		      .byte.b	$0e
  12425  859d		       0e		      .byte.b	$0e
  12426  859e		       0e		      .byte.b	$0e
  12427  859f				  -	      if	(<*) > (<(*+22))
  12428  859f				  -	      repeat	($100-<*)
  12429  859f				  -	      .byte	0
  12430  859f				  -	      repend
  12431  859f					      endif
  12432  859f				   playerL0103_1
  12433  859f		       42		      .byte.b	%01000010
  12434  85a0		       42		      .byte.b	%01000010
  12435  85a1		       42		      .byte.b	%01000010
  12436  85a2		       42		      .byte.b	%01000010
  12437  85a3		       42		      .byte.b	%01000010
  12438  85a4		       42		      .byte.b	%01000010
  12439  85a5		       42		      .byte.b	%01000010
  12440  85a6		       42		      .byte.b	%01000010
  12441  85a7		       24		      .byte.b	%00100100
  12442  85a8		       99		      .byte.b	%10011001
  12443  85a9		       99		      .byte.b	%10011001
  12444  85aa		       99		      .byte.b	%10011001
  12445  85ab		       99		      .byte.b	%10011001
  12446  85ac		       99		      .byte.b	%10011001
  12447  85ad		       5a		      .byte.b	%01011010
  12448  85ae		       3c		      .byte.b	%00111100
  12449  85af		       18		      .byte.b	%00011000
  12450  85b0		       3c		      .byte.b	%00111100
  12451  85b1		       66		      .byte.b	%01100110
  12452  85b2		       66		      .byte.b	%01100110
  12453  85b3		       5a		      .byte.b	%01011010
  12454  85b4		       18		      .byte.b	%00011000
  12455  85b5		       7e		      .byte.b	%01111110
  12456  85b6				  -	      if	(<*) > (<(*+22))
  12457  85b6				  -	      repeat	($100-<*)
  12458  85b6				  -	      .byte	0
  12459  85b6				  -	      repend
  12460  85b6					      endif
  12461  85b6				   playercolorL0116_1
  12462  85b6		       00		      .byte.b	$00
  12463  85b7		       0e		      .byte.b	$0e
  12464  85b8		       00		      .byte.b	$00
  12465  85b9		       0e		      .byte.b	$0e
  12466  85ba		       00		      .byte.b	$00
  12467  85bb		       0e		      .byte.b	$0e
  12468  85bc		       00		      .byte.b	$00
  12469  85bd		       00		      .byte.b	$00
  12470  85be		       00		      .byte.b	$00
  12471  85bf		       00		      .byte.b	$00
  12472  85c0		       00		      .byte.b	$00
  12473  85c1		       0e		      .byte.b	$0e
  12474  85c2		       00		      .byte.b	$00
  12475  85c3		       0e		      .byte.b	$0e
  12476  85c4		       00		      .byte.b	$00
  12477  85c5		       00		      .byte.b	$00
  12478  85c6		       0e		      .byte.b	$0e
  12479  85c7		       0e		      .byte.b	$0e
  12480  85c8		       0e		      .byte.b	$0e
  12481  85c9		       0e		      .byte.b	$0e
  12482  85ca		       0e		      .byte.b	$0e
  12483  85cb		       0e		      .byte.b	$0e
  12484  85cc		       0e		      .byte.b	$0e
  12485  85cd				  -	      if	(<*) > (<(*+22))
  12486  85cd				  -	      repeat	($100-<*)
  12487  85cd				  -	      .byte	0
  12488  85cd				  -	      repend
  12489  85cd					      endif
  12490  85cd				   playerL0117_1
  12491  85cd		       42		      .byte.b	%01000010
  12492  85ce		       42		      .byte.b	%01000010
  12493  85cf		       42		      .byte.b	%01000010
  12494  85d0		       42		      .byte.b	%01000010
  12495  85d1		       42		      .byte.b	%01000010
  12496  85d2		       42		      .byte.b	%01000010
  12497  85d3		       42		      .byte.b	%01000010
  12498  85d4		       42		      .byte.b	%01000010
  12499  85d5		       24		      .byte.b	%00100100
  12500  85d6		       99		      .byte.b	%10011001
  12501  85d7		       99		      .byte.b	%10011001
  12502  85d8		       99		      .byte.b	%10011001
  12503  85d9		       99		      .byte.b	%10011001
  12504  85da		       99		      .byte.b	%10011001
  12505  85db		       5a		      .byte.b	%01011010
  12506  85dc		       3c		      .byte.b	%00111100
  12507  85dd		       18		      .byte.b	%00011000
  12508  85de		       3c		      .byte.b	%00111100
  12509  85df		       66		      .byte.b	%01100110
  12510  85e0		       66		      .byte.b	%01100110
  12511  85e1		       5a		      .byte.b	%01011010
  12512  85e2		       18		      .byte.b	%00011000
  12513  85e3		       7e		      .byte.b	%01111110
  12514  85e4				  -	      if	(<*) > (<(*+19))
  12515  85e4				  -	      repeat	($100-<*)
  12516  85e4				  -	      .byte	0
  12517  85e4				  -	      repend
  12518  85e4					      endif
  12519  85e4				   playercolorL0264_0
  12520  85e4		       34		      .byte.b	$34
  12521  85e5		       54		      .byte.b	$54
  12522  85e6		       54		      .byte.b	$54
  12523  85e7		       54		      .byte.b	$54
  12524  85e8		       54		      .byte.b	$54
  12525  85e9		       54		      .byte.b	$54
  12526  85ea		       54		      .byte.b	$54
  12527  85eb		       54		      .byte.b	$54
  12528  85ec		       54		      .byte.b	$54
  12529  85ed		       54		      .byte.b	$54
  12530  85ee		       54		      .byte.b	$54
  12531  85ef		       54		      .byte.b	$54
  12532  85f0		       1c		      .byte.b	$1c
  12533  85f1		       54		      .byte.b	$54
  12534  85f2		       54		      .byte.b	$54
  12535  85f3		       54		      .byte.b	$54
  12536  85f4		       54		      .byte.b	$54
  12537  85f5		       54		      .byte.b	$54
  12538  85f6		       54		      .byte.b	$54
  12539  85f7		       54		      .byte.b	$54
  12540  85f8					      if	(<*) > (<(*+19))
  12541  85f8					      repeat	($100-<*)
  12542  85f8		       00		      .byte.b	0
  12541  85f8					      repend
  12542  85f9		       00		      .byte.b	0
  12541  85f9					      repend
  12542  85fa		       00		      .byte.b	0
  12541  85fa					      repend
  12542  85fb		       00		      .byte.b	0
  12541  85fb					      repend
  12542  85fc		       00		      .byte.b	0
  12541  85fc					      repend
  12542  85fd		       00		      .byte.b	0
  12541  85fd					      repend
  12542  85fe		       00		      .byte.b	0
  12541  85fe					      repend
  12542  85ff		       00		      .byte.b	0
  12543  8600					      repend
  12544  8600					      endif
  12545  8600				   playerL0265_0
  12546  8600		       e7		      .byte.b	%11100111
  12547  8601		       24		      .byte.b	%00100100
  12548  8602		       24		      .byte.b	%00100100
  12549  8603		       24		      .byte.b	%00100100
  12550  8604		       24		      .byte.b	%00100100
  12551  8605		       24		      .byte.b	%00100100
  12552  8606		       bd		      .byte.b	%10111101
  12553  8607		       3c		      .byte.b	%00111100
  12554  8608		       7e		      .byte.b	%01111110
  12555  8609		       bd		      .byte.b	%10111101
  12556  860a		       bd		      .byte.b	%10111101
  12557  860b		       bd		      .byte.b	%10111101
  12558  860c		       ff		      .byte.b	%11111111
  12559  860d		       7e		      .byte.b	%01111110
  12560  860e		       3c		      .byte.b	%00111100
  12561  860f		       42		      .byte.b	%01000010
  12562  8610		       5a		      .byte.b	%01011010
  12563  8611		       7e		      .byte.b	%01111110
  12564  8612		       5a		      .byte.b	%01011010
  12565  8613		       3c		      .byte.b	%00111100
  12566  8614				  -	      ifconst	pfres
  12567  8614				  -	      if	(<*) > (254-pfres*pfwidth)
  12568  8614				  -	      align	256
  12569  8614				  -	      endif
  12570  8614				  -	      if	(<*) < (136-pfres*pfwidth)
  12571  8614				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12572  8614				  -	      .byte	0
  12573  8614				  -	      repend
  12574  8614				  -	      endif
  12575  8614					      else
  12576  8614				  -	      if	(<*) > 206
  12577  8614				  -	      align	256
  12578  8614					      endif
  12579  8614					      if	(<*) < 88
  12580  8614					      repeat	(88-(<*))
  12581  8614		       00		      .byte.b	0
  12580  8614					      repend
  12581  8615		       00		      .byte.b	0
  12580  8615					      repend
  12581  8616		       00		      .byte.b	0
  12580  8616					      repend
  12581  8617		       00		      .byte.b	0
  12580  8617					      repend
  12581  8618		       00		      .byte.b	0
  12580  8618					      repend
  12581  8619		       00		      .byte.b	0
  12580  8619					      repend
  12581  861a		       00		      .byte.b	0
  12580  861a					      repend
  12581  861b		       00		      .byte.b	0
  12580  861b					      repend
  12581  861c		       00		      .byte.b	0
  12580  861c					      repend
  12581  861d		       00		      .byte.b	0
  12580  861d					      repend
  12581  861e		       00		      .byte.b	0
  12580  861e					      repend
  12581  861f		       00		      .byte.b	0
  12580  861f					      repend
  12581  8620		       00		      .byte.b	0
  12580  8620					      repend
  12581  8621		       00		      .byte.b	0
  12580  8621					      repend
  12581  8622		       00		      .byte.b	0
  12580  8622					      repend
  12581  8623		       00		      .byte.b	0
  12580  8623					      repend
  12581  8624		       00		      .byte.b	0
  12580  8624					      repend
  12581  8625		       00		      .byte.b	0
  12580  8625					      repend
  12581  8626		       00		      .byte.b	0
  12580  8626					      repend
  12581  8627		       00		      .byte.b	0
  12580  8627					      repend
  12581  8628		       00		      .byte.b	0
  12580  8628					      repend
  12581  8629		       00		      .byte.b	0
  12580  8629					      repend
  12581  862a		       00		      .byte.b	0
  12580  862a					      repend
  12581  862b		       00		      .byte.b	0
  12580  862b					      repend
  12581  862c		       00		      .byte.b	0
  12580  862c					      repend
  12581  862d		       00		      .byte.b	0
  12580  862d					      repend
  12581  862e		       00		      .byte.b	0
  12580  862e					      repend
  12581  862f		       00		      .byte.b	0
  12580  862f					      repend
  12581  8630		       00		      .byte.b	0
  12580  8630					      repend
  12581  8631		       00		      .byte.b	0
  12580  8631					      repend
  12581  8632		       00		      .byte.b	0
  12580  8632					      repend
  12581  8633		       00		      .byte.b	0
  12580  8633					      repend
  12581  8634		       00		      .byte.b	0
  12580  8634					      repend
  12581  8635		       00		      .byte.b	0
  12580  8635					      repend
  12581  8636		       00		      .byte.b	0
  12580  8636					      repend
  12581  8637		       00		      .byte.b	0
  12580  8637					      repend
  12581  8638		       00		      .byte.b	0
  12580  8638					      repend
  12581  8639		       00		      .byte.b	0
  12580  8639					      repend
  12581  863a		       00		      .byte.b	0
  12580  863a					      repend
  12581  863b		       00		      .byte.b	0
  12580  863b					      repend
  12581  863c		       00		      .byte.b	0
  12580  863c					      repend
  12581  863d		       00		      .byte.b	0
  12580  863d					      repend
  12581  863e		       00		      .byte.b	0
  12580  863e					      repend
  12581  863f		       00		      .byte.b	0
  12580  863f					      repend
  12581  8640		       00		      .byte.b	0
  12580  8640					      repend
  12581  8641		       00		      .byte.b	0
  12580  8641					      repend
  12581  8642		       00		      .byte.b	0
  12580  8642					      repend
  12581  8643		       00		      .byte.b	0
  12580  8643					      repend
  12581  8644		       00		      .byte.b	0
  12580  8644					      repend
  12581  8645		       00		      .byte.b	0
  12580  8645					      repend
  12581  8646		       00		      .byte.b	0
  12580  8646					      repend
  12581  8647		       00		      .byte.b	0
  12580  8647					      repend
  12581  8648		       00		      .byte.b	0
  12580  8648					      repend
  12581  8649		       00		      .byte.b	0
  12580  8649					      repend
  12581  864a		       00		      .byte.b	0
  12580  864a					      repend
  12581  864b		       00		      .byte.b	0
  12580  864b					      repend
  12581  864c		       00		      .byte.b	0
  12580  864c					      repend
  12581  864d		       00		      .byte.b	0
  12580  864d					      repend
  12581  864e		       00		      .byte.b	0
  12580  864e					      repend
  12581  864f		       00		      .byte.b	0
  12580  864f					      repend
  12581  8650		       00		      .byte.b	0
  12580  8650					      repend
  12581  8651		       00		      .byte.b	0
  12580  8651					      repend
  12581  8652		       00		      .byte.b	0
  12580  8652					      repend
  12581  8653		       00		      .byte.b	0
  12580  8653					      repend
  12581  8654		       00		      .byte.b	0
  12580  8654					      repend
  12581  8655		       00		      .byte.b	0
  12580  8655					      repend
  12581  8656		       00		      .byte.b	0
  12580  8656					      repend
  12581  8657		       00		      .byte.b	0
  12582  8658					      repend
  12583  8658					      endif
  12584  8658					      endif
  12585  8658				   pfcolorlabel195
  12586  8658		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12587  865c		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12588  8660		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12589  8664		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12590  8668		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12591  866c		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12592  8670		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12593  8674		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12594  8678		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12595  867c		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12596  8680		       0c 0a 3c 3a	      .byte.b	$0C, $0A, $3C, $3A
  12597  8684				  -	      ifconst	pfres
  12598  8684				  -	      if	(<*) > (254-pfres*pfwidth)
  12599  8684				  -	      align	256
  12600  8684				  -	      endif
  12601  8684				  -	      if	(<*) < (136-pfres*pfwidth)
  12602  8684				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12603  8684				  -	      .byte	0
  12604  8684				  -	      repend
  12605  8684				  -	      endif
  12606  8684					      else
  12607  8684				  -	      if	(<*) > 206
  12608  8684				  -	      align	256
  12609  8684					      endif
  12610  8684				  -	      if	(<*) < 88
  12611  8684				  -	      repeat	(88-(<*))
  12612  8684				  -	      .byte	0
  12613  8684				  -	      repend
  12614  8684					      endif
  12615  8684					      endif
  12616  8684				   pfcolorlabel220
  12617  8684		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12618  8688		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12619  868c		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12620  8690		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12621  8694		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12622  8698		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12623  869c		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12624  86a0		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12625  86a4		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12626  86a8		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12627  86ac		       6c 6a 9c 9a	      .byte.b	$6C, $6A, $9C, $9A
  12628  86b0				  -	      ifconst	pfres
  12629  86b0				  -	      if	(<*) > (254-pfres*pfwidth)
  12630  86b0				  -	      align	256
  12631  86b0				  -	      endif
  12632  86b0				  -	      if	(<*) < (136-pfres*pfwidth)
  12633  86b0				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12634  86b0				  -	      .byte	0
  12635  86b0				  -	      repend
  12636  86b0				  -	      endif
  12637  86b0					      else
  12638  86b0				  -	      if	(<*) > 206
  12639  86b0				  -	      align	256
  12640  86b0					      endif
  12641  86b0				  -	      if	(<*) < 88
  12642  86b0				  -	      repeat	(88-(<*))
  12643  86b0				  -	      .byte	0
  12644  86b0				  -	      repend
  12645  86b0					      endif
  12646  86b0					      endif
  12647  86b0				   pfcolorlabel245
  12648  86b0		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12649  86b4		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12650  86b8		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12651  86bc		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12652  86c0		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12653  86c4		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12654  86c8		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12655  86cc		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12656  86d0		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12657  86d4		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12658  86d8		       cc ca fc fa	      .byte.b	$CC, $CA, $FC, $FA
  12659  86dc				  -	      ifconst	pfres
  12660  86dc				  -	      if	(<*) > (254-pfres*pfwidth)
  12661  86dc				  -	      align	256
  12662  86dc				  -	      endif
  12663  86dc				  -	      if	(<*) < (136-pfres*pfwidth)
  12664  86dc				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12665  86dc				  -	      .byte	0
  12666  86dc				  -	      repend
  12667  86dc				  -	      endif
  12668  86dc					      else
  12669  86dc					      if	(<*) > 206
  12670  8700		       00 00 00 00*	      align	256
  12671  8700					      endif
  12672  8700					      if	(<*) < 88
  12673  8700					      repeat	(88-(<*))
  12674  8700		       00		      .byte.b	0
  12673  8700					      repend
  12674  8701		       00		      .byte.b	0
  12673  8701					      repend
  12674  8702		       00		      .byte.b	0
  12673  8702					      repend
  12674  8703		       00		      .byte.b	0
  12673  8703					      repend
  12674  8704		       00		      .byte.b	0
  12673  8704					      repend
  12674  8705		       00		      .byte.b	0
  12673  8705					      repend
  12674  8706		       00		      .byte.b	0
  12673  8706					      repend
  12674  8707		       00		      .byte.b	0
  12673  8707					      repend
  12674  8708		       00		      .byte.b	0
  12673  8708					      repend
  12674  8709		       00		      .byte.b	0
  12673  8709					      repend
  12674  870a		       00		      .byte.b	0
  12673  870a					      repend
  12674  870b		       00		      .byte.b	0
  12673  870b					      repend
  12674  870c		       00		      .byte.b	0
  12673  870c					      repend
  12674  870d		       00		      .byte.b	0
  12673  870d					      repend
  12674  870e		       00		      .byte.b	0
  12673  870e					      repend
  12674  870f		       00		      .byte.b	0
  12673  870f					      repend
  12674  8710		       00		      .byte.b	0
  12673  8710					      repend
  12674  8711		       00		      .byte.b	0
  12673  8711					      repend
  12674  8712		       00		      .byte.b	0
  12673  8712					      repend
  12674  8713		       00		      .byte.b	0
  12673  8713					      repend
  12674  8714		       00		      .byte.b	0
  12673  8714					      repend
  12674  8715		       00		      .byte.b	0
  12673  8715					      repend
  12674  8716		       00		      .byte.b	0
  12673  8716					      repend
  12674  8717		       00		      .byte.b	0
  12673  8717					      repend
  12674  8718		       00		      .byte.b	0
  12673  8718					      repend
  12674  8719		       00		      .byte.b	0
  12673  8719					      repend
  12674  871a		       00		      .byte.b	0
  12673  871a					      repend
  12674  871b		       00		      .byte.b	0
  12673  871b					      repend
  12674  871c		       00		      .byte.b	0
  12673  871c					      repend
  12674  871d		       00		      .byte.b	0
  12673  871d					      repend
  12674  871e		       00		      .byte.b	0
  12673  871e					      repend
  12674  871f		       00		      .byte.b	0
  12673  871f					      repend
  12674  8720		       00		      .byte.b	0
  12673  8720					      repend
  12674  8721		       00		      .byte.b	0
  12673  8721					      repend
  12674  8722		       00		      .byte.b	0
  12673  8722					      repend
  12674  8723		       00		      .byte.b	0
  12673  8723					      repend
  12674  8724		       00		      .byte.b	0
  12673  8724					      repend
  12674  8725		       00		      .byte.b	0
  12673  8725					      repend
  12674  8726		       00		      .byte.b	0
  12673  8726					      repend
  12674  8727		       00		      .byte.b	0
  12673  8727					      repend
  12674  8728		       00		      .byte.b	0
  12673  8728					      repend
  12674  8729		       00		      .byte.b	0
  12673  8729					      repend
  12674  872a		       00		      .byte.b	0
  12673  872a					      repend
  12674  872b		       00		      .byte.b	0
  12673  872b					      repend
  12674  872c		       00		      .byte.b	0
  12673  872c					      repend
  12674  872d		       00		      .byte.b	0
  12673  872d					      repend
  12674  872e		       00		      .byte.b	0
  12673  872e					      repend
  12674  872f		       00		      .byte.b	0
  12673  872f					      repend
  12674  8730		       00		      .byte.b	0
  12673  8730					      repend
  12674  8731		       00		      .byte.b	0
  12673  8731					      repend
  12674  8732		       00		      .byte.b	0
  12673  8732					      repend
  12674  8733		       00		      .byte.b	0
  12673  8733					      repend
  12674  8734		       00		      .byte.b	0
  12673  8734					      repend
  12674  8735		       00		      .byte.b	0
  12673  8735					      repend
  12674  8736		       00		      .byte.b	0
  12673  8736					      repend
  12674  8737		       00		      .byte.b	0
  12673  8737					      repend
  12674  8738		       00		      .byte.b	0
  12673  8738					      repend
  12674  8739		       00		      .byte.b	0
  12673  8739					      repend
  12674  873a		       00		      .byte.b	0
  12673  873a					      repend
  12674  873b		       00		      .byte.b	0
  12673  873b					      repend
  12674  873c		       00		      .byte.b	0
  12673  873c					      repend
  12674  873d		       00		      .byte.b	0
  12673  873d					      repend
  12674  873e		       00		      .byte.b	0
  12673  873e					      repend
  12674  873f		       00		      .byte.b	0
  12673  873f					      repend
  12674  8740		       00		      .byte.b	0
  12673  8740					      repend
  12674  8741		       00		      .byte.b	0
  12673  8741					      repend
  12674  8742		       00		      .byte.b	0
  12673  8742					      repend
  12674  8743		       00		      .byte.b	0
  12673  8743					      repend
  12674  8744		       00		      .byte.b	0
  12673  8744					      repend
  12674  8745		       00		      .byte.b	0
  12673  8745					      repend
  12674  8746		       00		      .byte.b	0
  12673  8746					      repend
  12674  8747		       00		      .byte.b	0
  12673  8747					      repend
  12674  8748		       00		      .byte.b	0
  12673  8748					      repend
  12674  8749		       00		      .byte.b	0
  12673  8749					      repend
  12674  874a		       00		      .byte.b	0
  12673  874a					      repend
  12674  874b		       00		      .byte.b	0
  12673  874b					      repend
  12674  874c		       00		      .byte.b	0
  12673  874c					      repend
  12674  874d		       00		      .byte.b	0
  12673  874d					      repend
  12674  874e		       00		      .byte.b	0
  12673  874e					      repend
  12674  874f		       00		      .byte.b	0
  12673  874f					      repend
  12674  8750		       00		      .byte.b	0
  12673  8750					      repend
  12674  8751		       00		      .byte.b	0
  12673  8751					      repend
  12674  8752		       00		      .byte.b	0
  12673  8752					      repend
  12674  8753		       00		      .byte.b	0
  12673  8753					      repend
  12674  8754		       00		      .byte.b	0
  12673  8754					      repend
  12674  8755		       00		      .byte.b	0
  12673  8755					      repend
  12674  8756		       00		      .byte.b	0
  12673  8756					      repend
  12674  8757		       00		      .byte.b	0
  12675  8758					      repend
  12676  8758					      endif
  12677  8758					      endif
  12678  8758				   pfcolorlabel270
  12679  8758		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12680  875c		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12681  8760		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12682  8764		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12683  8768		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12684  876c		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12685  8770		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12686  8774		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12687  8778		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12688  877c		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12689  8780		       8c 8a 2c 2a	      .byte.b	$8C, $8A, $2C, $2A
  12690  8784				  -	      if	(<*) > (<(*+23))
  12691  8784				  -	      repeat	($100-<*)
  12692  8784				  -	      .byte	0
  12693  8784				  -	      repend
  12694  8784					      endif
  12695  8784				   playercolorL0427_1
  12696  8784		       00		      .byte.b	$00
  12697  8785		       00		      .byte.b	$00
  12698  8786		       0e		      .byte.b	$0e
  12699  8787		       00		      .byte.b	$00
  12700  8788		       0e		      .byte.b	$0e
  12701  8789		       00		      .byte.b	$00
  12702  878a		       0e		      .byte.b	$0e
  12703  878b		       00		      .byte.b	$00
  12704  878c		       00		      .byte.b	$00
  12705  878d		       00		      .byte.b	$00
  12706  878e		       00		      .byte.b	$00
  12707  878f		       00		      .byte.b	$00
  12708  8790		       00		      .byte.b	$00
  12709  8791		       00		      .byte.b	$00
  12710  8792		       00		      .byte.b	$00
  12711  8793		       00		      .byte.b	$00
  12712  8794		       00		      .byte.b	$00
  12713  8795		       0e		      .byte.b	$0e
  12714  8796		       0e		      .byte.b	$0e
  12715  8797		       0e		      .byte.b	$0e
  12716  8798		       0e		      .byte.b	$0e
  12717  8799		       0e		      .byte.b	$0e
  12718  879a		       0e		      .byte.b	$0e
  12719  879b		       0e		      .byte.b	$0e
  12720  879c				  -	      if	(<*) > (<(*+22))
  12721  879c				  -	      repeat	($100-<*)
  12722  879c				  -	      .byte	0
  12723  879c				  -	      repend
  12724  879c					      endif
  12725  879c				   playerL0430_1
  12726  879c		       42		      .byte.b	%01000010
  12727  879d		       42		      .byte.b	%01000010
  12728  879e		       42		      .byte.b	%01000010
  12729  879f		       42		      .byte.b	%01000010
  12730  87a0		       42		      .byte.b	%01000010
  12731  87a1		       42		      .byte.b	%01000010
  12732  87a2		       42		      .byte.b	%01000010
  12733  87a3		       42		      .byte.b	%01000010
  12734  87a4		       24		      .byte.b	%00100100
  12735  87a5		       99		      .byte.b	%10011001
  12736  87a6		       99		      .byte.b	%10011001
  12737  87a7		       99		      .byte.b	%10011001
  12738  87a8		       99		      .byte.b	%10011001
  12739  87a9		       99		      .byte.b	%10011001
  12740  87aa		       5a		      .byte.b	%01011010
  12741  87ab		       3c		      .byte.b	%00111100
  12742  87ac		       18		      .byte.b	%00011000
  12743  87ad		       3c		      .byte.b	%00111100
  12744  87ae		       7e		      .byte.b	%01111110
  12745  87af		       7e		      .byte.b	%01111110
  12746  87b0		       7e		      .byte.b	%01111110
  12747  87b1		       7e		      .byte.b	%01111110
  12748  87b2		       7e		      .byte.b	%01111110
  12749  87b3				  -	      if	(<*) > (<(*+22))
  12750  87b3				  -	      repeat	($100-<*)
  12751  87b3				  -	      .byte	0
  12752  87b3				  -	      repend
  12753  87b3					      endif
  12754  87b3				   playerL0432_1
  12755  87b3		       42		      .byte.b	%01000010
  12756  87b4		       42		      .byte.b	%01000010
  12757  87b5		       42		      .byte.b	%01000010
  12758  87b6		       42		      .byte.b	%01000010
  12759  87b7		       42		      .byte.b	%01000010
  12760  87b8		       42		      .byte.b	%01000010
  12761  87b9		       42		      .byte.b	%01000010
  12762  87ba		       42		      .byte.b	%01000010
  12763  87bb		       24		      .byte.b	%00100100
  12764  87bc		       99		      .byte.b	%10011001
  12765  87bd		       99		      .byte.b	%10011001
  12766  87be		       99		      .byte.b	%10011001
  12767  87bf		       99		      .byte.b	%10011001
  12768  87c0		       99		      .byte.b	%10011001
  12769  87c1		       5a		      .byte.b	%01011010
  12770  87c2		       3c		      .byte.b	%00111100
  12771  87c3		       18		      .byte.b	%00011000
  12772  87c4		       3c		      .byte.b	%00111100
  12773  87c5		       7e		      .byte.b	%01111110
  12774  87c6		       7e		      .byte.b	%01111110
  12775  87c7		       7e		      .byte.b	%01111110
  12776  87c8		       7e		      .byte.b	%01111110
  12777  87c9		       7e		      .byte.b	%01111110
  12778  87ca				  -	      if	(<*) > (<(*+23))
  12779  87ca				  -	      repeat	($100-<*)
  12780  87ca				  -	      .byte	0
  12781  87ca				  -	      repend
  12782  87ca					      endif
  12783  87ca				   playerL0434_1
  12784  87ca		       00		      .byte.b	%00000000
  12785  87cb		       42		      .byte.b	%01000010
  12786  87cc		       42		      .byte.b	%01000010
  12787  87cd		       42		      .byte.b	%01000010
  12788  87ce		       42		      .byte.b	%01000010
  12789  87cf		       42		      .byte.b	%01000010
  12790  87d0		       42		      .byte.b	%01000010
  12791  87d1		       42		      .byte.b	%01000010
  12792  87d2		       42		      .byte.b	%01000010
  12793  87d3		       24		      .byte.b	%00100100
  12794  87d4		       99		      .byte.b	%10011001
  12795  87d5		       99		      .byte.b	%10011001
  12796  87d6		       99		      .byte.b	%10011001
  12797  87d7		       99		      .byte.b	%10011001
  12798  87d8		       99		      .byte.b	%10011001
  12799  87d9		       5a		      .byte.b	%01011010
  12800  87da		       3c		      .byte.b	%00111100
  12801  87db		       18		      .byte.b	%00011000
  12802  87dc		       3c		      .byte.b	%00111100
  12803  87dd		       7e		      .byte.b	%01111110
  12804  87de		       7e		      .byte.b	%01111110
  12805  87df		       7e		      .byte.b	%01111110
  12806  87e0		       7e		      .byte.b	%01111110
  12807  87e1		       7e		      .byte.b	%01111110
  12808  87e2				  -	      if	(<*) > (<(*+23))
  12809  87e2				  -	      repeat	($100-<*)
  12810  87e2				  -	      .byte	0
  12811  87e2				  -	      repend
  12812  87e2					      endif
  12813  87e2				   playerL0436_1
  12814  87e2		       00		      .byte.b	%00000000
  12815  87e3		       42		      .byte.b	%01000010
  12816  87e4		       42		      .byte.b	%01000010
  12817  87e5		       42		      .byte.b	%01000010
  12818  87e6		       42		      .byte.b	%01000010
  12819  87e7		       42		      .byte.b	%01000010
  12820  87e8		       42		      .byte.b	%01000010
  12821  87e9		       42		      .byte.b	%01000010
  12822  87ea		       42		      .byte.b	%01000010
  12823  87eb		       24		      .byte.b	%00100100
  12824  87ec		       99		      .byte.b	%10011001
  12825  87ed		       99		      .byte.b	%10011001
  12826  87ee		       99		      .byte.b	%10011001
  12827  87ef		       99		      .byte.b	%10011001
  12828  87f0		       99		      .byte.b	%10011001
  12829  87f1		       5a		      .byte.b	%01011010
  12830  87f2		       3c		      .byte.b	%00111100
  12831  87f3		       18		      .byte.b	%00011000
  12832  87f4		       3c		      .byte.b	%00111100
  12833  87f5		       7e		      .byte.b	%01111110
  12834  87f6		       7e		      .byte.b	%01111110
  12835  87f7		       7e		      .byte.b	%01111110
  12836  87f8		       7e		      .byte.b	%01111110
  12837  87f9		       7e		      .byte.b	%01111110
  12838  87fa					      if	(<*) > (<(*+23))
  12839  87fa					      repeat	($100-<*)
  12840  87fa		       00		      .byte.b	0
  12839  87fa					      repend
  12840  87fb		       00		      .byte.b	0
  12839  87fb					      repend
  12840  87fc		       00		      .byte.b	0
  12839  87fc					      repend
  12840  87fd		       00		      .byte.b	0
  12839  87fd					      repend
  12840  87fe		       00		      .byte.b	0
  12839  87fe					      repend
  12840  87ff		       00		      .byte.b	0
  12841  8800					      repend
  12842  8800					      endif
  12843  8800				   playercolorL0439_1
  12844  8800		       00		      .byte.b	$00
  12845  8801		       00		      .byte.b	$00
  12846  8802		       0e		      .byte.b	$0e
  12847  8803		       00		      .byte.b	$00
  12848  8804		       0e		      .byte.b	$0e
  12849  8805		       00		      .byte.b	$00
  12850  8806		       0e		      .byte.b	$0e
  12851  8807		       00		      .byte.b	$00
  12852  8808		       00		      .byte.b	$00
  12853  8809		       00		      .byte.b	$00
  12854  880a		       00		      .byte.b	$00
  12855  880b		       0e		      .byte.b	$0e
  12856  880c		       00		      .byte.b	$00
  12857  880d		       0e		      .byte.b	$0e
  12858  880e		       00		      .byte.b	$00
  12859  880f		       00		      .byte.b	$00
  12860  8810		       00		      .byte.b	$00
  12861  8811		       0e		      .byte.b	$0e
  12862  8812		       0e		      .byte.b	$0e
  12863  8813		       0e		      .byte.b	$0e
  12864  8814		       0e		      .byte.b	$0e
  12865  8815		       0e		      .byte.b	$0e
  12866  8816		       0e		      .byte.b	$0e
  12867  8817		       0e		      .byte.b	$0e
  12868  8818				  -	      if	(<*) > (<(*+22))
  12869  8818				  -	      repeat	($100-<*)
  12870  8818				  -	      .byte	0
  12871  8818				  -	      repend
  12872  8818					      endif
  12873  8818				   playerL0442_1
  12874  8818		       42		      .byte.b	%01000010
  12875  8819		       42		      .byte.b	%01000010
  12876  881a		       42		      .byte.b	%01000010
  12877  881b		       42		      .byte.b	%01000010
  12878  881c		       42		      .byte.b	%01000010
  12879  881d		       42		      .byte.b	%01000010
  12880  881e		       42		      .byte.b	%01000010
  12881  881f		       42		      .byte.b	%01000010
  12882  8820		       24		      .byte.b	%00100100
  12883  8821		       99		      .byte.b	%10011001
  12884  8822		       99		      .byte.b	%10011001
  12885  8823		       99		      .byte.b	%10011001
  12886  8824		       99		      .byte.b	%10011001
  12887  8825		       99		      .byte.b	%10011001
  12888  8826		       5a		      .byte.b	%01011010
  12889  8827		       3c		      .byte.b	%00111100
  12890  8828		       18		      .byte.b	%00011000
  12891  8829		       3c		      .byte.b	%00111100
  12892  882a		       66		      .byte.b	%01100110
  12893  882b		       66		      .byte.b	%01100110
  12894  882c		       5a		      .byte.b	%01011010
  12895  882d		       18		      .byte.b	%00011000
  12896  882e		       7e		      .byte.b	%01111110
  12897  882f				  -	      if	(<*) > (<(*+22))
  12898  882f				  -	      repeat	($100-<*)
  12899  882f				  -	      .byte	0
  12900  882f				  -	      repend
  12901  882f					      endif
  12902  882f				   playerL0444_1
  12903  882f		       42		      .byte.b	%01000010
  12904  8830		       42		      .byte.b	%01000010
  12905  8831		       42		      .byte.b	%01000010
  12906  8832		       42		      .byte.b	%01000010
  12907  8833		       42		      .byte.b	%01000010
  12908  8834		       42		      .byte.b	%01000010
  12909  8835		       42		      .byte.b	%01000010
  12910  8836		       42		      .byte.b	%01000010
  12911  8837		       24		      .byte.b	%00100100
  12912  8838		       99		      .byte.b	%10011001
  12913  8839		       99		      .byte.b	%10011001
  12914  883a		       99		      .byte.b	%10011001
  12915  883b		       99		      .byte.b	%10011001
  12916  883c		       99		      .byte.b	%10011001
  12917  883d		       5a		      .byte.b	%01011010
  12918  883e		       3c		      .byte.b	%00111100
  12919  883f		       18		      .byte.b	%00011000
  12920  8840		       3c		      .byte.b	%00111100
  12921  8841		       66		      .byte.b	%01100110
  12922  8842		       66		      .byte.b	%01100110
  12923  8843		       5a		      .byte.b	%01011010
  12924  8844		       18		      .byte.b	%00011000
  12925  8845		       7e		      .byte.b	%01111110
  12926  8846				  -	      if	(<*) > (<(*+23))
  12927  8846				  -	      repeat	($100-<*)
  12928  8846				  -	      .byte	0
  12929  8846				  -	      repend
  12930  8846					      endif
  12931  8846				   playerL0446_1
  12932  8846		       00		      .byte.b	%00000000
  12933  8847		       42		      .byte.b	%01000010
  12934  8848		       42		      .byte.b	%01000010
  12935  8849		       42		      .byte.b	%01000010
  12936  884a		       42		      .byte.b	%01000010
  12937  884b		       42		      .byte.b	%01000010
  12938  884c		       42		      .byte.b	%01000010
  12939  884d		       42		      .byte.b	%01000010
  12940  884e		       42		      .byte.b	%01000010
  12941  884f		       24		      .byte.b	%00100100
  12942  8850		       99		      .byte.b	%10011001
  12943  8851		       99		      .byte.b	%10011001
  12944  8852		       99		      .byte.b	%10011001
  12945  8853		       99		      .byte.b	%10011001
  12946  8854		       99		      .byte.b	%10011001
  12947  8855		       5a		      .byte.b	%01011010
  12948  8856		       3c		      .byte.b	%00111100
  12949  8857		       18		      .byte.b	%00011000
  12950  8858		       3c		      .byte.b	%00111100
  12951  8859		       66		      .byte.b	%01100110
  12952  885a		       66		      .byte.b	%01100110
  12953  885b		       5a		      .byte.b	%01011010
  12954  885c		       18		      .byte.b	%00011000
  12955  885d		       7e		      .byte.b	%01111110
  12956  885e				  -	      if	(<*) > (<(*+23))
  12957  885e				  -	      repeat	($100-<*)
  12958  885e				  -	      .byte	0
  12959  885e				  -	      repend
  12960  885e					      endif
  12961  885e				   playerL0448_1
  12962  885e		       00		      .byte.b	%00000000
  12963  885f		       42		      .byte.b	%01000010
  12964  8860		       42		      .byte.b	%01000010
  12965  8861		       42		      .byte.b	%01000010
  12966  8862		       42		      .byte.b	%01000010
  12967  8863		       42		      .byte.b	%01000010
  12968  8864		       42		      .byte.b	%01000010
  12969  8865		       42		      .byte.b	%01000010
  12970  8866		       42		      .byte.b	%01000010
  12971  8867		       24		      .byte.b	%00100100
  12972  8868		       99		      .byte.b	%10011001
  12973  8869		       99		      .byte.b	%10011001
  12974  886a		       99		      .byte.b	%10011001
  12975  886b		       99		      .byte.b	%10011001
  12976  886c		       99		      .byte.b	%10011001
  12977  886d		       5a		      .byte.b	%01011010
  12978  886e		       3c		      .byte.b	%00111100
  12979  886f		       18		      .byte.b	%00011000
  12980  8870		       3c		      .byte.b	%00111100
  12981  8871		       66		      .byte.b	%01100110
  12982  8872		       66		      .byte.b	%01100110
  12983  8873		       5a		      .byte.b	%01011010
  12984  8874		       18		      .byte.b	%00011000
  12985  8875		       7e		      .byte.b	%01111110
  12986  8876				  -	      if	(<*) > (<(*+23))
  12987  8876				  -	      repeat	($100-<*)
  12988  8876				  -	      .byte	0
  12989  8876				  -	      repend
  12990  8876					      endif
  12991  8876				   playercolorL0451_1
  12992  8876		       00		      .byte.b	$00
  12993  8877		       00		      .byte.b	$00
  12994  8878		       0e		      .byte.b	$0e
  12995  8879		       00		      .byte.b	$00
  12996  887a		       0e		      .byte.b	$0e
  12997  887b		       00		      .byte.b	$00
  12998  887c		       0e		      .byte.b	$0e
  12999  887d		       00		      .byte.b	$00
  13000  887e		       00		      .byte.b	$00
  13001  887f		       00		      .byte.b	$00
  13002  8880		       00		      .byte.b	$00
  13003  8881		       00		      .byte.b	$00
  13004  8882		       00		      .byte.b	$00
  13005  8883		       00		      .byte.b	$00
  13006  8884		       00		      .byte.b	$00
  13007  8885		       00		      .byte.b	$00
  13008  8886		       00		      .byte.b	$00
  13009  8887		       0e		      .byte.b	$0e
  13010  8888		       0e		      .byte.b	$0e
  13011  8889		       0e		      .byte.b	$0e
  13012  888a		       0e		      .byte.b	$0e
  13013  888b		       0e		      .byte.b	$0e
  13014  888c		       0e		      .byte.b	$0e
  13015  888d		       0e		      .byte.b	$0e
  13016  888e				  -	      if	(<*) > (<(*+22))
  13017  888e				  -	      repeat	($100-<*)
  13018  888e				  -	      .byte	0
  13019  888e				  -	      repend
  13020  888e					      endif
  13021  888e				   playerL0454_1
  13022  888e		       a0		      .byte.b	%10100000
  13023  888f		       90		      .byte.b	%10010000
  13024  8890		       48		      .byte.b	%01001000
  13025  8891		       24		      .byte.b	%00100100
  13026  8892		       24		      .byte.b	%00100100
  13027  8893		       24		      .byte.b	%00100100
  13028  8894		       24		      .byte.b	%00100100
  13029  8895		       24		      .byte.b	%00100100
  13030  8896		       24		      .byte.b	%00100100
  13031  8897		       7c		      .byte.b	%01111100
  13032  8898		       74		      .byte.b	%01110100
  13033  8899		       7c		      .byte.b	%01111100
  13034  889a		       75		      .byte.b	%01110101
  13035  889b		       7e		      .byte.b	%01111110
  13036  889c		       74		      .byte.b	%01110100
  13037  889d		       3c		      .byte.b	%00111100
  13038  889e		       1c		      .byte.b	%00011100
  13039  889f		       3c		      .byte.b	%00111100
  13040  88a0		       72		      .byte.b	%01110010
  13041  88a1		       72		      .byte.b	%01110010
  13042  88a2		       6c		      .byte.b	%01101100
  13043  88a3		       48		      .byte.b	%01001000
  13044  88a4		       3e		      .byte.b	%00111110
  13045  88a5				  -	      if	(<*) > (<(*+22))
  13046  88a5				  -	      repeat	($100-<*)
  13047  88a5				  -	      .byte	0
  13048  88a5				  -	      repend
  13049  88a5					      endif
  13050  88a5				   playerL0456_1
  13051  88a5		       a0		      .byte.b	%10100000
  13052  88a6		       90		      .byte.b	%10010000
  13053  88a7		       48		      .byte.b	%01001000
  13054  88a8		       24		      .byte.b	%00100100
  13055  88a9		       24		      .byte.b	%00100100
  13056  88aa		       24		      .byte.b	%00100100
  13057  88ab		       24		      .byte.b	%00100100
  13058  88ac		       24		      .byte.b	%00100100
  13059  88ad		       24		      .byte.b	%00100100
  13060  88ae		       7c		      .byte.b	%01111100
  13061  88af		       74		      .byte.b	%01110100
  13062  88b0		       7c		      .byte.b	%01111100
  13063  88b1		       75		      .byte.b	%01110101
  13064  88b2		       7e		      .byte.b	%01111110
  13065  88b3		       74		      .byte.b	%01110100
  13066  88b4		       3c		      .byte.b	%00111100
  13067  88b5		       1c		      .byte.b	%00011100
  13068  88b6		       3c		      .byte.b	%00111100
  13069  88b7		       72		      .byte.b	%01110010
  13070  88b8		       72		      .byte.b	%01110010
  13071  88b9		       6c		      .byte.b	%01101100
  13072  88ba		       48		      .byte.b	%01001000
  13073  88bb		       3e		      .byte.b	%00111110
  13074  88bc				  -	      if	(<*) > (<(*+23))
  13075  88bc				  -	      repeat	($100-<*)
  13076  88bc				  -	      .byte	0
  13077  88bc				  -	      repend
  13078  88bc					      endif
  13079  88bc				   playerL0458_1
  13080  88bc		       00		      .byte.b	%00000000
  13081  88bd		       a0		      .byte.b	%10100000
  13082  88be		       90		      .byte.b	%10010000
  13083  88bf		       48		      .byte.b	%01001000
  13084  88c0		       24		      .byte.b	%00100100
  13085  88c1		       24		      .byte.b	%00100100
  13086  88c2		       24		      .byte.b	%00100100
  13087  88c3		       24		      .byte.b	%00100100
  13088  88c4		       24		      .byte.b	%00100100
  13089  88c5		       24		      .byte.b	%00100100
  13090  88c6		       7c		      .byte.b	%01111100
  13091  88c7		       74		      .byte.b	%01110100
  13092  88c8		       7c		      .byte.b	%01111100
  13093  88c9		       75		      .byte.b	%01110101
  13094  88ca		       7e		      .byte.b	%01111110
  13095  88cb		       74		      .byte.b	%01110100
  13096  88cc		       3c		      .byte.b	%00111100
  13097  88cd		       1c		      .byte.b	%00011100
  13098  88ce		       3c		      .byte.b	%00111100
  13099  88cf		       72		      .byte.b	%01110010
  13100  88d0		       72		      .byte.b	%01110010
  13101  88d1		       6c		      .byte.b	%01101100
  13102  88d2		       48		      .byte.b	%01001000
  13103  88d3		       3e		      .byte.b	%00111110
  13104  88d4				  -	      if	(<*) > (<(*+23))
  13105  88d4				  -	      repeat	($100-<*)
  13106  88d4				  -	      .byte	0
  13107  88d4				  -	      repend
  13108  88d4					      endif
  13109  88d4				   playerL0460_1
  13110  88d4		       00		      .byte.b	%00000000
  13111  88d5		       a0		      .byte.b	%10100000
  13112  88d6		       90		      .byte.b	%10010000
  13113  88d7		       48		      .byte.b	%01001000
  13114  88d8		       24		      .byte.b	%00100100
  13115  88d9		       24		      .byte.b	%00100100
  13116  88da		       24		      .byte.b	%00100100
  13117  88db		       24		      .byte.b	%00100100
  13118  88dc		       24		      .byte.b	%00100100
  13119  88dd		       24		      .byte.b	%00100100
  13120  88de		       7c		      .byte.b	%01111100
  13121  88df		       74		      .byte.b	%01110100
  13122  88e0		       7c		      .byte.b	%01111100
  13123  88e1		       75		      .byte.b	%01110101
  13124  88e2		       7e		      .byte.b	%01111110
  13125  88e3		       74		      .byte.b	%01110100
  13126  88e4		       3c		      .byte.b	%00111100
  13127  88e5		       1c		      .byte.b	%00011100
  13128  88e6		       3c		      .byte.b	%00111100
  13129  88e7		       72		      .byte.b	%01110010
  13130  88e8		       72		      .byte.b	%01110010
  13131  88e9		       6c		      .byte.b	%01101100
  13132  88ea		       48		      .byte.b	%01001000
  13133  88eb		       3e		      .byte.b	%00111110
  13134  88ec					      if	(<*) > (<(*+23))
  13135  88ec					      repeat	($100-<*)
  13136  88ec		       00		      .byte.b	0
  13135  88ec					      repend
  13136  88ed		       00		      .byte.b	0
  13135  88ed					      repend
  13136  88ee		       00		      .byte.b	0
  13135  88ee					      repend
  13136  88ef		       00		      .byte.b	0
  13135  88ef					      repend
  13136  88f0		       00		      .byte.b	0
  13135  88f0					      repend
  13136  88f1		       00		      .byte.b	0
  13135  88f1					      repend
  13136  88f2		       00		      .byte.b	0
  13135  88f2					      repend
  13136  88f3		       00		      .byte.b	0
  13135  88f3					      repend
  13136  88f4		       00		      .byte.b	0
  13135  88f4					      repend
  13136  88f5		       00		      .byte.b	0
  13135  88f5					      repend
  13136  88f6		       00		      .byte.b	0
  13135  88f6					      repend
  13136  88f7		       00		      .byte.b	0
  13135  88f7					      repend
  13136  88f8		       00		      .byte.b	0
  13135  88f8					      repend
  13136  88f9		       00		      .byte.b	0
  13135  88f9					      repend
  13136  88fa		       00		      .byte.b	0
  13135  88fa					      repend
  13136  88fb		       00		      .byte.b	0
  13135  88fb					      repend
  13136  88fc		       00		      .byte.b	0
  13135  88fc					      repend
  13136  88fd		       00		      .byte.b	0
  13135  88fd					      repend
  13136  88fe		       00		      .byte.b	0
  13135  88fe					      repend
  13136  88ff		       00		      .byte.b	0
  13137  8900					      repend
  13138  8900					      endif
  13139  8900				   playercolorL0463_1
  13140  8900		       00		      .byte.b	$00
  13141  8901		       00		      .byte.b	$00
  13142  8902		       0e		      .byte.b	$0e
  13143  8903		       00		      .byte.b	$00
  13144  8904		       0e		      .byte.b	$0e
  13145  8905		       00		      .byte.b	$00
  13146  8906		       0e		      .byte.b	$0e
  13147  8907		       00		      .byte.b	$00
  13148  8908		       00		      .byte.b	$00
  13149  8909		       00		      .byte.b	$00
  13150  890a		       00		      .byte.b	$00
  13151  890b		       00		      .byte.b	$00
  13152  890c		       00		      .byte.b	$00
  13153  890d		       00		      .byte.b	$00
  13154  890e		       00		      .byte.b	$00
  13155  890f		       00		      .byte.b	$00
  13156  8910		       00		      .byte.b	$00
  13157  8911		       0e		      .byte.b	$0e
  13158  8912		       0e		      .byte.b	$0e
  13159  8913		       0e		      .byte.b	$0e
  13160  8914		       0e		      .byte.b	$0e
  13161  8915		       0e		      .byte.b	$0e
  13162  8916		       0e		      .byte.b	$0e
  13163  8917		       0e		      .byte.b	$0e
  13164  8918				  -	      if	(<*) > (<(*+22))
  13165  8918				  -	      repeat	($100-<*)
  13166  8918				  -	      .byte	0
  13167  8918				  -	      repend
  13168  8918					      endif
  13169  8918				   playerL0466_1
  13170  8918		       05		      .byte.b	%00000101
  13171  8919		       09		      .byte.b	%00001001
  13172  891a		       12		      .byte.b	%00010010
  13173  891b		       24		      .byte.b	%00100100
  13174  891c		       24		      .byte.b	%00100100
  13175  891d		       24		      .byte.b	%00100100
  13176  891e		       24		      .byte.b	%00100100
  13177  891f		       24		      .byte.b	%00100100
  13178  8920		       24		      .byte.b	%00100100
  13179  8921		       3e		      .byte.b	%00111110
  13180  8922		       2e		      .byte.b	%00101110
  13181  8923		       3e		      .byte.b	%00111110
  13182  8924		       ae		      .byte.b	%10101110
  13183  8925		       7e		      .byte.b	%01111110
  13184  8926		       2e		      .byte.b	%00101110
  13185  8927		       3c		      .byte.b	%00111100
  13186  8928		       38		      .byte.b	%00111000
  13187  8929		       3c		      .byte.b	%00111100
  13188  892a		       4e		      .byte.b	%01001110
  13189  892b		       4e		      .byte.b	%01001110
  13190  892c		       36		      .byte.b	%00110110
  13191  892d		       12		      .byte.b	%00010010
  13192  892e		       7c		      .byte.b	%01111100
  13193  892f				  -	      if	(<*) > (<(*+22))
  13194  892f				  -	      repeat	($100-<*)
  13195  892f				  -	      .byte	0
  13196  892f				  -	      repend
  13197  892f					      endif
  13198  892f				   playerL0468_1
  13199  892f		       05		      .byte.b	%00000101
  13200  8930		       09		      .byte.b	%00001001
  13201  8931		       12		      .byte.b	%00010010
  13202  8932		       24		      .byte.b	%00100100
  13203  8933		       24		      .byte.b	%00100100
  13204  8934		       24		      .byte.b	%00100100
  13205  8935		       24		      .byte.b	%00100100
  13206  8936		       24		      .byte.b	%00100100
  13207  8937		       24		      .byte.b	%00100100
  13208  8938		       3e		      .byte.b	%00111110
  13209  8939		       2e		      .byte.b	%00101110
  13210  893a		       3e		      .byte.b	%00111110
  13211  893b		       ae		      .byte.b	%10101110
  13212  893c		       7e		      .byte.b	%01111110
  13213  893d		       2e		      .byte.b	%00101110
  13214  893e		       3c		      .byte.b	%00111100
  13215  893f		       38		      .byte.b	%00111000
  13216  8940		       3c		      .byte.b	%00111100
  13217  8941		       4e		      .byte.b	%01001110
  13218  8942		       4e		      .byte.b	%01001110
  13219  8943		       36		      .byte.b	%00110110
  13220  8944		       12		      .byte.b	%00010010
  13221  8945		       7c		      .byte.b	%01111100
  13222  8946				  -	      if	(<*) > (<(*+23))
  13223  8946				  -	      repeat	($100-<*)
  13224  8946				  -	      .byte	0
  13225  8946				  -	      repend
  13226  8946					      endif
  13227  8946				   playerL0470_1
  13228  8946		       00		      .byte.b	%00000000
  13229  8947		       05		      .byte.b	%00000101
  13230  8948		       09		      .byte.b	%00001001
  13231  8949		       12		      .byte.b	%00010010
  13232  894a		       24		      .byte.b	%00100100
  13233  894b		       24		      .byte.b	%00100100
  13234  894c		       24		      .byte.b	%00100100
  13235  894d		       24		      .byte.b	%00100100
  13236  894e		       24		      .byte.b	%00100100
  13237  894f		       24		      .byte.b	%00100100
  13238  8950		       3e		      .byte.b	%00111110
  13239  8951		       2e		      .byte.b	%00101110
  13240  8952		       3e		      .byte.b	%00111110
  13241  8953		       ae		      .byte.b	%10101110
  13242  8954		       7e		      .byte.b	%01111110
  13243  8955		       2e		      .byte.b	%00101110
  13244  8956		       3c		      .byte.b	%00111100
  13245  8957		       38		      .byte.b	%00111000
  13246  8958		       3c		      .byte.b	%00111100
  13247  8959		       4e		      .byte.b	%01001110
  13248  895a		       4e		      .byte.b	%01001110
  13249  895b		       36		      .byte.b	%00110110
  13250  895c		       12		      .byte.b	%00010010
  13251  895d		       7c		      .byte.b	%01111100
  13252  895e				  -	      if	(<*) > (<(*+23))
  13253  895e				  -	      repeat	($100-<*)
  13254  895e				  -	      .byte	0
  13255  895e				  -	      repend
  13256  895e					      endif
  13257  895e				   playerL0472_1
  13258  895e		       00		      .byte.b	%00000000
  13259  895f		       05		      .byte.b	%00000101
  13260  8960		       09		      .byte.b	%00001001
  13261  8961		       12		      .byte.b	%00010010
  13262  8962		       24		      .byte.b	%00100100
  13263  8963		       24		      .byte.b	%00100100
  13264  8964		       24		      .byte.b	%00100100
  13265  8965		       24		      .byte.b	%00100100
  13266  8966		       24		      .byte.b	%00100100
  13267  8967		       24		      .byte.b	%00100100
  13268  8968		       3e		      .byte.b	%00111110
  13269  8969		       2e		      .byte.b	%00101110
  13270  896a		       3e		      .byte.b	%00111110
  13271  896b		       ae		      .byte.b	%10101110
  13272  896c		       7e		      .byte.b	%01111110
  13273  896d		       2e		      .byte.b	%00101110
  13274  896e		       3c		      .byte.b	%00111100
  13275  896f		       38		      .byte.b	%00111000
  13276  8970		       3c		      .byte.b	%00111100
  13277  8971		       4e		      .byte.b	%01001110
  13278  8972		       4e		      .byte.b	%01001110
  13279  8973		       36		      .byte.b	%00110110
  13280  8974		       12		      .byte.b	%00010010
  13281  8975		       7c		      .byte.b	%01111100
  13282  8976					      if	ECHOFIRST
      1534 bytes of ROM space left in bank 8
  13283  8976					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 8")
  13284  8976					      endif
  13285  8976		       00 01	   ECHOFIRST  =	1
  13286  8976
  13287  8976
  13288  8976							; Provided under the CC0 license. See the included LICENSE.txt for details.
  13289  8976
  13290  8976							; feel free to modify the score graphics - just keep each digit 8 high
  13291  8976							; and keep the conditional compilation stuff intact
  13292  8976				  -	      ifconst	ROM2k
  13293  8976				  -	      ORG	$F7AC-8
  13294  8976					      else
  13295  8976					      ifconst	bankswitch
  13296  8976				  -	      if	bankswitch == 8
  13297  8976				  -	      ORG	$2F94-bscode_length
  13298  8976				  -	      RORG	$FF94-bscode_length
  13299  8976					      endif
  13300  8976				  -	      if	bankswitch == 16
  13301  8976				  -	      ORG	$4F94-bscode_length
  13302  8976				  -	      RORG	$FF94-bscode_length
  13303  8976					      endif
  13304  8976					      if	bankswitch == 32
  13305  8f74					      ORG	$8F94-bscode_length
  13306  8f74					      RORG	$FF94-bscode_length
  13307  8f74					      endif
  13308  8f74				  -	      if	bankswitch == 64
  13309  8f74				  -	      ORG	$10F80-bscode_length
  13310  8f74				  -	      RORG	$1FF80-bscode_length
  13311  8f74					      endif
  13312  8f74				  -	      else
  13313  8f74				  -	      ORG	$FF9C
  13314  8f74					      endif
  13315  8f74					      endif
  13316  8f74
  13317  8f74							; font equates
  13318  8f74		       00 01	   .21stcentury =	1
  13319  8f74		       00 02	   alarmclock =	2
  13320  8f74		       00 03	   handwritten =	3
  13321  8f74		       00 04	   interrupted =	4
  13322  8f74		       00 05	   retroputer =	5
  13323  8f74		       00 06	   whimsey    =	6
  13324  8f74		       00 07	   tiny       =	7
  13325  8f74		       00 08	   hex	      =	8
  13326  8f74
  13327  8f74				  -	      ifconst	font
  13328  8f74				  -	      if	font == hex
  13329  8f74				  -	      ORG	. - 48
  13330  8f74				  -	      endif
  13331  8f74					      endif
  13332  8f74
  13333  8f74				   scoretable
  13334  8f74
  13335  8f74				  -	      ifconst	font
  13336  8f74				  -	      if	font == .21stcentury
  13337  8f74				  -	      include	"score_graphics.asm.21stcentury"
  13338  8f74				  -	      endif
  13339  8f74				  -	      if	font == alarmclock
  13340  8f74				  -	      include	"score_graphics.asm.alarmclock"
  13341  8f74				  -	      endif
  13342  8f74				  -	      if	font == handwritten
  13343  8f74				  -	      include	"score_graphics.asm.handwritten"
  13344  8f74				  -	      endif
  13345  8f74				  -	      if	font == interrupted
  13346  8f74				  -	      include	"score_graphics.asm.interrupted"
  13347  8f74				  -	      endif
  13348  8f74				  -	      if	font == retroputer
  13349  8f74				  -	      include	"score_graphics.asm.retroputer"
  13350  8f74				  -	      endif
  13351  8f74				  -	      if	font == whimsey
  13352  8f74				  -	      include	"score_graphics.asm.whimsey"
  13353  8f74				  -	      endif
  13354  8f74				  -	      if	font == tiny
  13355  8f74				  -	      include	"score_graphics.asm.tiny"
  13356  8f74				  -	      endif
  13357  8f74				  -	      if	font == hex
  13358  8f74				  -	      include	"score_graphics.asm.hex"
  13359  8f74				  -	      endif
  13360  8f74					      else		; default font
  13361  8f74
  13362  8f74		       3c		      .byte.b	%00111100
  13363  8f75		       66		      .byte.b	%01100110
  13364  8f76		       66		      .byte.b	%01100110
  13365  8f77		       66		      .byte.b	%01100110
  13366  8f78		       66		      .byte.b	%01100110
  13367  8f79		       66		      .byte.b	%01100110
  13368  8f7a		       66		      .byte.b	%01100110
  13369  8f7b		       3c		      .byte.b	%00111100
  13370  8f7c
  13371  8f7c		       7e		      .byte.b	%01111110
  13372  8f7d		       18		      .byte.b	%00011000
  13373  8f7e		       18		      .byte.b	%00011000
  13374  8f7f		       18		      .byte.b	%00011000
  13375  8f80		       18		      .byte.b	%00011000
  13376  8f81		       38		      .byte.b	%00111000
  13377  8f82		       18		      .byte.b	%00011000
  13378  8f83		       08		      .byte.b	%00001000
  13379  8f84
  13380  8f84		       7e		      .byte.b	%01111110
  13381  8f85		       60		      .byte.b	%01100000
  13382  8f86		       60		      .byte.b	%01100000
  13383  8f87		       3c		      .byte.b	%00111100
  13384  8f88		       06		      .byte.b	%00000110
  13385  8f89		       06		      .byte.b	%00000110
  13386  8f8a		       46		      .byte.b	%01000110
  13387  8f8b		       3c		      .byte.b	%00111100
  13388  8f8c
  13389  8f8c		       3c		      .byte.b	%00111100
  13390  8f8d		       46		      .byte.b	%01000110
  13391  8f8e		       06		      .byte.b	%00000110
  13392  8f8f		       06		      .byte.b	%00000110
  13393  8f90		       1c		      .byte.b	%00011100
  13394  8f91		       06		      .byte.b	%00000110
  13395  8f92		       46		      .byte.b	%01000110
  13396  8f93		       3c		      .byte.b	%00111100
  13397  8f94
  13398  8f94		       0c		      .byte.b	%00001100
  13399  8f95		       0c		      .byte.b	%00001100
  13400  8f96		       7e		      .byte.b	%01111110
  13401  8f97		       4c		      .byte.b	%01001100
  13402  8f98		       4c		      .byte.b	%01001100
  13403  8f99		       2c		      .byte.b	%00101100
  13404  8f9a		       1c		      .byte.b	%00011100
  13405  8f9b		       0c		      .byte.b	%00001100
  13406  8f9c
  13407  8f9c		       3c		      .byte.b	%00111100
  13408  8f9d		       46		      .byte.b	%01000110
  13409  8f9e		       06		      .byte.b	%00000110
  13410  8f9f		       06		      .byte.b	%00000110
  13411  8fa0		       3c		      .byte.b	%00111100
  13412  8fa1		       60		      .byte.b	%01100000
  13413  8fa2		       60		      .byte.b	%01100000
  13414  8fa3		       7e		      .byte.b	%01111110
  13415  8fa4
  13416  8fa4		       3c		      .byte.b	%00111100
  13417  8fa5		       66		      .byte.b	%01100110
  13418  8fa6		       66		      .byte.b	%01100110
  13419  8fa7		       66		      .byte.b	%01100110
  13420  8fa8		       7c		      .byte.b	%01111100
  13421  8fa9		       60		      .byte.b	%01100000
  13422  8faa		       62		      .byte.b	%01100010
  13423  8fab		       3c		      .byte.b	%00111100
  13424  8fac
  13425  8fac		       30		      .byte.b	%00110000
  13426  8fad		       30		      .byte.b	%00110000
  13427  8fae		       30		      .byte.b	%00110000
  13428  8faf		       18		      .byte.b	%00011000
  13429  8fb0		       0c		      .byte.b	%00001100
  13430  8fb1		       06		      .byte.b	%00000110
  13431  8fb2		       42		      .byte.b	%01000010
  13432  8fb3		       3e		      .byte.b	%00111110
  13433  8fb4
  13434  8fb4		       3c		      .byte.b	%00111100
  13435  8fb5		       66		      .byte.b	%01100110
  13436  8fb6		       66		      .byte.b	%01100110
  13437  8fb7		       66		      .byte.b	%01100110
  13438  8fb8		       3c		      .byte.b	%00111100
  13439  8fb9		       66		      .byte.b	%01100110
  13440  8fba		       66		      .byte.b	%01100110
  13441  8fbb		       3c		      .byte.b	%00111100
  13442  8fbc
  13443  8fbc		       3c		      .byte.b	%00111100
  13444  8fbd		       46		      .byte.b	%01000110
  13445  8fbe		       06		      .byte.b	%00000110
  13446  8fbf		       3e		      .byte.b	%00111110
  13447  8fc0		       66		      .byte.b	%01100110
  13448  8fc1		       66		      .byte.b	%01100110
  13449  8fc2		       66		      .byte.b	%01100110
  13450  8fc3		       3c		      .byte.b	%00111100
  13451  8fc4
  13452  8fc4					      ifnconst	DPC_kernel_options
  13453  8fc4
  13454  8fc4		       00		      .byte.b	%00000000
  13455  8fc5		       00		      .byte.b	%00000000
  13456  8fc6		       00		      .byte.b	%00000000
  13457  8fc7		       00		      .byte.b	%00000000
  13458  8fc8		       00		      .byte.b	%00000000
  13459  8fc9		       00		      .byte.b	%00000000
  13460  8fca		       00		      .byte.b	%00000000
  13461  8fcb		       00		      .byte.b	%00000000
  13462  8fcc
  13463  8fcc					      endif
  13464  8fcc
  13465  8fcc					      endif
  13466  8fcc
  13467  8fcc				  -	      ifconst	ROM2k
  13468  8fcc				  -	      ORG	$F7FC
  13469  8fcc					      else
  13470  8fcc					      ifconst	bankswitch
  13471  8fcc				  -	      if	bankswitch == 8
  13472  8fcc				  -	      ORG	$2FF4-bscode_length
  13473  8fcc				  -	      RORG	$FFF4-bscode_length
  13474  8fcc					      endif
  13475  8fcc				  -	      if	bankswitch == 16
  13476  8fcc				  -	      ORG	$4FF4-bscode_length
  13477  8fcc				  -	      RORG	$FFF4-bscode_length
  13478  8fcc					      endif
  13479  8fcc					      if	bankswitch == 32
  13480  8fd4					      ORG	$8FF4-bscode_length
  13481  8fd4					      RORG	$FFF4-bscode_length
  13482  8fd4					      endif
  13483  8fd4				  -	      if	bankswitch == 64
  13484  8fd4				  -	      ORG	$10FE0-bscode_length
  13485  8fd4				  -	      RORG	$1FFE0-bscode_length
  13486  8fd4					      endif
  13487  8fd4				  -	      else
  13488  8fd4				  -	      ORG	$FFFC
  13489  8fd4					      endif
  13490  8fd4					      endif
  13491  8fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  13492  8fd4
  13493  8fd4							; every bank has this stuff at the same place
  13494  8fd4							; this code can switch to/from any bank at any entry point
  13495  8fd4							; and can preserve register values
  13496  8fd4							; note: lines not starting with a space are not placed in all banks
  13497  8fd4							;
  13498  8fd4							; line below tells the compiler how long this is - do not remove
  13499  8fd4							;size=32
  13500  8fd4
  13501  8fd4				   begin_bscode
  13502  8fd4		       a2 ff		      ldx	#$ff
  13503  8fd6				  -	      ifconst	FASTFETCH	; using DPC+
  13504  8fd6				  -	      stx	FASTFETCH
  13505  8fd6					      endif
  13506  8fd6		       9a		      txs
  13507  8fd7				  -	      if	bankswitch == 64
  13508  8fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  13509  8fd7					      else
  13510  8fd7		       a9 f2		      lda	#>(start-1)
  13511  8fd9					      endif
  13512  8fd9		       48		      pha
  13513  8fda		       a9 51		      lda	#<(start-1)
  13514  8fdc		       48		      pha
  13515  8fdd
  13516  8fdd				   BS_return
  13517  8fdd		       48		      pha
  13518  8fde		       8a		      txa
  13519  8fdf		       48		      pha
  13520  8fe0		       ba		      tsx
  13521  8fe1
  13522  8fe1					      if	bankswitch != 64
  13523  8fe1		       b5 04		      lda	4,x	; get high byte of return address
  13524  8fe3
  13525  8fe3		       2a		      rol
  13526  8fe4		       2a		      rol
  13527  8fe5		       2a		      rol
  13528  8fe6		       2a		      rol
  13529  8fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  13530  8fe9		       aa		      tax
  13531  8fea		       e8		      inx
  13532  8feb				  -	      else
  13533  8feb				  -	      lda	4,x	; get high byte of return address
  13534  8feb				  -	      tay
  13535  8feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  13536  8feb				  -	      sta	4,x
  13537  8feb				  -	      tya
  13538  8feb				  -	      lsr
  13539  8feb				  -	      lsr
  13540  8feb				  -	      lsr
  13541  8feb				  -	      lsr
  13542  8feb				  -	      tax
  13543  8feb				  -	      inx
  13544  8feb					      endif
  13545  8feb
  13546  8feb				   BS_jsr
  13547  8feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  13548  8fee		       68		      pla
  13549  8fef		       aa		      tax
  13550  8ff0		       68		      pla
  13551  8ff1		       60		      rts
  13552  8ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  13553  8ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  13554  8ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  13555  8ff2					      endif
  13556  8ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
  13557  8ff2
  13558  8ff2					      ifconst	bankswitch
  13559  8ff2				  -	      if	bankswitch == 8
  13560  8ff2				  -	      ORG	$2FFC
  13561  8ff2				  -	      RORG	$FFFC
  13562  8ff2					      endif
  13563  8ff2				  -	      if	bankswitch == 16
  13564  8ff2				  -	      ORG	$4FFC
  13565  8ff2				  -	      RORG	$FFFC
  13566  8ff2					      endif
  13567  8ff2					      if	bankswitch == 32
  13568  8ffc					      ORG	$8FFC
  13569  8ffc					      RORG	$FFFC
  13570  8ffc					      endif
  13571  8ffc				  -	      if	bankswitch == 64
  13572  8ffc				  -	      ORG	$10FF0
  13573  8ffc				  -	      RORG	$1FFF0
  13574  8ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
  13575  8ffc				  -	      ORG	$10FF8
  13576  8ffc				  -	      RORG	$1FFF8
  13577  8ffc				  -	      ifconst	superchip
  13578  8ffc				  -	      .byte	"E","F","S","C"
  13579  8ffc				  -	      else
  13580  8ffc				  -	      .byte	"E","F","E","F"
  13581  8ffc				  -	      endif
  13582  8ffc				  -	      ORG	$10FFC
  13583  8ffc				  -	      RORG	$1FFFC
  13584  8ffc					      endif
  13585  8ffc				  -	      else
  13586  8ffc				  -	      ifconst	ROM2k
  13587  8ffc				  -	      ORG	$F7FC
  13588  8ffc				  -	      else
  13589  8ffc				  -	      ORG	$FFFC
  13590  8ffc				  -	      endif
  13591  8ffc					      endif
  13592  8ffc		       52 f2		      .word.w	(start & $ffff)
  13593  8ffe		       52 f2		      .word.w	(start & $ffff)

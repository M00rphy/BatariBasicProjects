------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\Animsrevenge.bas.asm LEVEL 1 PASS 2
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\Animsrevenge.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\Animsrevenge.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  9000 ????				      include	"2600basic.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 20	   bscode_length =	32
      4  9000 ????	       00 9f	   _M_Edge_Right =	159
      5  9000 ????
      6  9000 ????	       00 02	   _M_Edge_Left =	2
      7  9000 ????
      8  9000 ????	       00 58	   _M_Edge_Bottom =	88
      9  9000 ????
     10  9000 ????	       00 02	   _M_Edge_Top =	2
     11  9000 ????
     12  9000 ????	       00 01	   pfscore    =	1
     13  9000 ????
     14  9000 ????	       00 95	   s3	      =	score + 2
     15  9000 ????
     16  9000 ????	       00 94	   s2	      =	score + 1
     17  9000 ????
     18  9000 ????	       00 93	   s1	      =	score
     19  9000 ????
     20  9000 ????	       00 ed	   rand16     =	z
     21  9000 ????
     22  9000 ????	       00 ec	   _Bit7_Last_Life =	y
     23  9000 ????
     24  9000 ????	       00 ec	   _Bit4_Ball_Moving =	y
     25  9000 ????
     26  9000 ????	       00 ec	   _Bit3_Swap_Scores =	y
     27  9000 ????
     28  9000 ????	       00 ec	   _Bit2_Game_Over =	y
     29  9000 ????
     30  9000 ????	       00 ec	   _Bit1_FireB_Restrainer =	y
     31  9000 ????
     32  9000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     33  9000 ????
     34  9000 ????	       00 ec	   _BitOp_All_Purpose_01 =	y
     35  9000 ????
     36  9000 ????	       00 eb	   _High_Score03 =	x
     37  9000 ????
     38  9000 ????	       00 ea	   _High_Score02 =	w
     39  9000 ????
     40  9000 ????	       00 e9	   _High_Score01 =	v
     41  9000 ????
     42  9000 ????	       00 e8	   _Temp_Score03 =	u
     43  9000 ????
     44  9000 ????	       00 e7	   _Temp_Score02 =	t
     45  9000 ????
     46  9000 ????	       00 e6	   _Temp_Score01 =	s
     47  9000 ????
     48  9000 ????	       00 e5	   _MyTemp01  =	r
     49  9000 ????
     50  9000 ????	       00 e4	   _MyTemp02  =	q
     51  9000 ????
     52  9000 ????	       00 e3	   _Bit3_Coord_X_Left =	p
     53  9000 ????
     54  9000 ????	       00 e3	   _Bit2_Coord_X_Right =	p
     55  9000 ????
     56  9000 ????	       00 e3	   _Bit1_Coord_Y_Down =	p
     57  9000 ????
     58  9000 ????	       00 e3	   _Bit0_Coord_Y_Up =	p
     59  9000 ????
     60  9000 ????	       00 e3	   _Bitop_Coord_Counter =	p
     61  9000 ????
     62  9000 ????	       00 e1	   _Pause_Counter_Tmp =	n
     63  9000 ????
     64  9000 ????	       00 e2	   _MyTemp03  =	o
     65  9000 ????
     66  9000 ????	       00 df	   _Bit4_Right_Screen =	l
     67  9000 ????
     68  9000 ????	       00 df	   _Bit3_Left_Screen =	l
     69  9000 ????
     70  9000 ????	       00 df	   _Bit2_Down_Screen =	l
     71  9000 ????
     72  9000 ????	       00 df	   _Bit1_Up_Screen =	l
     73  9000 ????
     74  9000 ????	       00 df	   _Bit0_Main_Screen =	l
     75  9000 ????
     76  9000 ????	       00 df	   _Bitop_Screen_Counter =	l
     77  9000 ????
     78  9000 ????	       00 de	   _Bit7_Ball_Direction_Right =	k
     79  9000 ????
     80  9000 ????	       00 de	   _Bit6_Ball_Direction_Left =	k
     81  9000 ????
     82  9000 ????	       00 de	   _Bit5_Ball_Direction_Down =	k
     83  9000 ????
     84  9000 ????	       00 de	   _Bit4_Ball_Direction_Up =	k
     85  9000 ????
     86  9000 ????	       00 de	   _Bit3_Player1_Direction_Right =	k
     87  9000 ????
     88  9000 ????	       00 de	   _Bit2_Player1_Direction_Left =	k
     89  9000 ????
     90  9000 ????	       00 de	   _Bit1_Player1_Direction_Down =	k
     91  9000 ????
     92  9000 ????	       00 de	   _Bit0_Player1_Direction_Up =	k
     93  9000 ????
     94  9000 ????	       00 de	   _BitOp_P1_M0_Direction =	k
     95  9000 ????
     96  9000 ????	       00 e0	   _Bit1_BW_Check =	m
     97  9000 ????
     98  9000 ????	       00 e0	   _Bit0_BW_Mem =	m
     99  9000 ????
    100  9000 ????	       00 e0	   _Bit2_Pause_Clr_Scheme =	m
    101  9000 ????
    102  9000 ????	       00 e0	   _Pause_Color_Tmp =	m
    103  9000 ????
    104  9000 ????	       00 dd	   _Pause_Mem_Color_Tmp =	j
    105  9000 ????
    106  9000 ????	       00 81	   PuppetX    =	player1x
    107  9000 ????
    108  9000 ????	       00 86	   PuppetY    =	player1y
    109  9000 ????
    110  9000 ????	       00 85	   PGuyY      =	player0y
    111  9000 ????	       00 80	   PGuyX      =	player0x
    112  9000 ????	       00 da	   _F0	      =	g
    113  9000 ????
    114  9000 ????	       00 d9	   _V0	      =	f
    115  9000 ????
    116  9000 ????	       00 d8	   _C0	      =	e
    117  9000 ????
    118  9000 ????	       00 d7	   _SoundCounter0 =	d
    119  9000 ????
    120  9000 ????	       00 d6	   _Sound0    =	c
    121  9000 ????
    122  9000 ????	       00 d5	   _Frame_Counter =	b
    123  9000 ????
    124  9000 ????	       00 d4	   _Master_Counter =	a
    125  9000 ????
    126  9000 ????	       00 2b	   vblank_time =	43
    127  9000 ????	       00 25	   overscan_time =	37
    128  9000 ????	       00 07	   bs_mask    =	7
    129  9000 ????	       00 20	   bankswitch =	32
    130  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    131  9000 ????	       00 01	   PFcolors   =	1
    132  9000 ????	       00 01	   player1colors =	1
    133  9000 ????	       00 01	   playercolors =	1
    134  9000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  9000 ????
      8  9000 ????	       00 80	   player0x   =	$80
      9  9000 ????	       00 81	   player1x   =	$81
     10  9000 ????	       00 82	   missile0x  =	$82
     11  9000 ????	       00 83	   missile1x  =	$83
     12  9000 ????	       00 84	   ballx      =	$84
     13  9000 ????
     14  9000 ????	       00 85	   objecty    =	$85
     15  9000 ????	       00 85	   player0y   =	$85
     16  9000 ????	       00 86	   player1y   =	$86
     17  9000 ????	       00 87	   missile1height =	$87
     18  9000 ????	       00 88	   missile1y  =	$88
     19  9000 ????	       00 89	   bally      =	$89
     20  9000 ????
     21  9000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  9000 ????
     23  9000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  9000 ????	       00 8a	   player0pointerlo =	$8A
     25  9000 ????	       00 8b	   player0pointerhi =	$8B
     26  9000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  9000 ????	       00 8c	   player1pointerlo =	$8C
     28  9000 ????	       00 8d	   player1pointerhi =	$8D
     29  9000 ????
     30  9000 ????	       00 8e	   player0height =	$8E
     31  9000 ????	       00 8f	   player1height =	$8F
     32  9000 ????	       00 90	   missile0height =	$90
     33  9000 ????	       00 91	   missile0y  =	$91
     34  9000 ????	       00 92	   ballheight =	$92
     35  9000 ????
     36  9000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  9000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  9000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  9000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  9000 ????
     41  9000 ????	       00 93	   score      =	$93	; $93-$95
     42  9000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  9000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  9000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  9000 ????	       00 9e	   temp3      =	$9E
     46  9000 ????	       00 9f	   temp4      =	$9F
     47  9000 ????	       00 a0	   temp5      =	$A0
     48  9000 ????	       00 a1	   temp6      =	$A1
     49  9000 ????
     50  9000 ????	       00 a2	   rand       =	$A2
     51  9000 ????	       00 a3	   scorecolor =	$A3
     52  9000 ????
     53  9000 ????	       00 a4	   var0       =	$A4
     54  9000 ????	       00 a5	   var1       =	$A5
     55  9000 ????	       00 a6	   var2       =	$A6
     56  9000 ????	       00 a7	   var3       =	$A7
     57  9000 ????	       00 a8	   var4       =	$A8
     58  9000 ????	       00 a9	   var5       =	$A9
     59  9000 ????	       00 aa	   var6       =	$AA
     60  9000 ????	       00 ab	   var7       =	$AB
     61  9000 ????	       00 ac	   var8       =	$AC
     62  9000 ????	       00 ad	   var9       =	$AD
     63  9000 ????	       00 ae	   var10      =	$AE
     64  9000 ????	       00 af	   var11      =	$AF
     65  9000 ????	       00 b0	   var12      =	$B0
     66  9000 ????	       00 b1	   var13      =	$B1
     67  9000 ????	       00 b2	   var14      =	$B2
     68  9000 ????	       00 b3	   var15      =	$B3
     69  9000 ????	       00 b4	   var16      =	$B4
     70  9000 ????	       00 b5	   var17      =	$B5
     71  9000 ????	       00 b6	   var18      =	$B6
     72  9000 ????	       00 b7	   var19      =	$B7
     73  9000 ????	       00 b8	   var20      =	$B8
     74  9000 ????	       00 b9	   var21      =	$B9
     75  9000 ????	       00 ba	   var22      =	$BA
     76  9000 ????	       00 bb	   var23      =	$BB
     77  9000 ????	       00 bc	   var24      =	$BC
     78  9000 ????	       00 bd	   var25      =	$BD
     79  9000 ????	       00 be	   var26      =	$BE
     80  9000 ????	       00 bf	   var27      =	$BF
     81  9000 ????	       00 c0	   var28      =	$C0
     82  9000 ????	       00 c1	   var29      =	$C1
     83  9000 ????	       00 c2	   var30      =	$C2
     84  9000 ????	       00 c3	   var31      =	$C3
     85  9000 ????	       00 c4	   var32      =	$C4
     86  9000 ????	       00 c5	   var33      =	$C5
     87  9000 ????	       00 c6	   var34      =	$C6
     88  9000 ????	       00 c7	   var35      =	$C7
     89  9000 ????	       00 c8	   var36      =	$C8
     90  9000 ????	       00 c9	   var37      =	$C9
     91  9000 ????	       00 ca	   var38      =	$CA
     92  9000 ????	       00 cb	   var39      =	$CB
     93  9000 ????	       00 cc	   var40      =	$CC
     94  9000 ????	       00 cd	   var41      =	$CD
     95  9000 ????	       00 ce	   var42      =	$CE
     96  9000 ????	       00 cf	   var43      =	$CF
     97  9000 ????	       00 d0	   var44      =	$D0
     98  9000 ????	       00 d1	   var45      =	$D1
     99  9000 ????	       00 d2	   var46      =	$D2
    100  9000 ????	       00 d3	   var47      =	$D3
    101  9000 ????
    102  9000 ????	       00 d4	   A	      =	$d4
    103  9000 ????	       00 d4	   a	      =	$d4
    104  9000 ????	       00 d5	   B	      =	$d5
    105  9000 ????	       00 d5	   b	      =	$d5
    106  9000 ????	       00 d6	   C	      =	$d6
    107  9000 ????	       00 d6	   c	      =	$d6
    108  9000 ????	       00 d7	   D	      =	$d7
    109  9000 ????	       00 d7	   d	      =	$d7
    110  9000 ????	       00 d8	   E	      =	$d8
    111  9000 ????	       00 d8	   e	      =	$d8
    112  9000 ????	       00 d9	   F	      =	$d9
    113  9000 ????	       00 d9	   f	      =	$d9
    114  9000 ????	       00 da	   G	      =	$da
    115  9000 ????	       00 da	   g	      =	$da
    116  9000 ????	       00 db	   H	      =	$db
    117  9000 ????	       00 db	   h	      =	$db
    118  9000 ????	       00 dc	   I	      =	$dc
    119  9000 ????	       00 dc	   i	      =	$dc
    120  9000 ????	       00 dd	   J	      =	$dd
    121  9000 ????	       00 dd	   j	      =	$dd
    122  9000 ????	       00 de	   K	      =	$de
    123  9000 ????	       00 de	   k	      =	$de
    124  9000 ????	       00 df	   L	      =	$df
    125  9000 ????	       00 df	   l	      =	$df
    126  9000 ????	       00 e0	   M	      =	$e0
    127  9000 ????	       00 e0	   m	      =	$e0
    128  9000 ????	       00 e1	   N	      =	$e1
    129  9000 ????	       00 e1	   n	      =	$e1
    130  9000 ????	       00 e2	   O	      =	$e2
    131  9000 ????	       00 e2	   o	      =	$e2
    132  9000 ????	       00 e3	   P	      =	$e3
    133  9000 ????	       00 e3	   p	      =	$e3
    134  9000 ????	       00 e4	   Q	      =	$e4
    135  9000 ????	       00 e4	   q	      =	$e4
    136  9000 ????	       00 e5	   R	      =	$e5
    137  9000 ????	       00 e5	   r	      =	$e5
    138  9000 ????	       00 e6	   S	      =	$e6
    139  9000 ????	       00 e6	   s	      =	$e6
    140  9000 ????	       00 e7	   T	      =	$e7
    141  9000 ????	       00 e7	   t	      =	$e7
    142  9000 ????	       00 e8	   U	      =	$e8
    143  9000 ????	       00 e8	   u	      =	$e8
    144  9000 ????	       00 e9	   V	      =	$e9
    145  9000 ????	       00 e9	   v	      =	$e9
    146  9000 ????	       00 ea	   W	      =	$ea
    147  9000 ????	       00 ea	   w	      =	$ea
    148  9000 ????	       00 eb	   X	      =	$eb
    149  9000 ????	       00 eb	   x	      =	$eb
    150  9000 ????	       00 ec	   Y	      =	$ec
    151  9000 ????	       00 ec	   y	      =	$ec
    152  9000 ????	       00 ed	   Z	      =	$ed
    153  9000 ????	       00 ed	   z	      =	$ed
    154  9000 ????
    155  9000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  9000 ????	       00 ef	   playfieldpos =	$ef
    157  9000 ????
    158  9000 ????						; available for other uses, or if unused, provide more stack space
    159  9000 ????
    160  9000 ????	       00 f0	   aux1       =	$f0
    161  9000 ????	       00 f1	   aux2       =	$f1
    162  9000 ????	       00 f2	   aux3       =	$f2
    163  9000 ????	       00 f3	   aux4       =	$f3
    164  9000 ????	       00 f4	   aux5       =	$f4
    165  9000 ????	       00 f5	   aux6       =	$f5
    166  9000 ????
    167  9000 ????						; playfield color/height pointers
    168  9000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  9000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  9000 ????						; the above pointers are the same because if color and height are both used together,
    171  9000 ????						; they must used absolute indexed and cannot use pointers
    172  9000 ????
    173  9000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  9000 ????						; upper 3 bits of $f2 contain the number of lives
    175  9000 ????	       00 f4	   lifecolor  =	$f4
    176  9000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  9000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  9000 ????
    179  9000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  9000 ????	       00 f3	   pfscore2   =	$f3
    181  9000 ????	       00 f4	   pfscorecolor =	$f4
    182  9000 ????
    183  9000 ????	       00 f6	   stack1     =	$f6
    184  9000 ????	       00 f7	   stack2     =	$f7
    185  9000 ????	       00 f8	   stack3     =	$f8
    186  9000 ????	       00 f9	   stack4     =	$f9
    187  9000 ????						; the stack bytes above may be used in the kernel
    188  9000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  9000 ????
    190  9000 ????				      MAC	return
    191  9000 ????				      ifnconst	bankswitch
    192  9000 ????				      rts
    193  9000 ????				      else
    194  9000 ????				      jmp	BS_return
    195  9000 ????				      endif
    196  9000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  9000 ????
    198  9000 ????			  -	      ifconst	superchip
    199  9000 ????			  -playfieldbase =	$10D0
    200  9000 ????			  -	      include	superchip.h
    201  9000 ????				      else
    202  9000 ????	       00 a4	   playfieldbase =	$A4
    203  9000 ????				      endif
    204  9000 ????
    205  9000 ????				      ifnconst	pfhalfwidth
    206  9000 ????	       00 04	   pfwidth    =	4
    207  9000 ????	       00 0e	   PF1L       =	PF1
    208  9000 ????	       00 0f	   PF2L       =	PF2
    209  9000 ????	       00 0e	   PF1R       =	PF1
    210  9000 ????	       00 0f	   PF2R       =	PF2
    211  9000 ????	       00 00	   pfadjust   =	0
    212  9000 ????			  -	      else
    213  9000 ????			  -pfwidth    =	2
    214  9000 ????			  -	      ifconst	pfcenter
    215  9000 ????			  -PF1L       =	$3F	; no effect
    216  9000 ????			  -PF2L       =	PF2
    217  9000 ????			  -PF1R       =	$3F
    218  9000 ????			  -PF2R       =	PF2	; no effect
    219  9000 ????			  -pfadjust   =	1
    220  9000 ????			  -	      else
    221  9000 ????			  -PF1L       =	PF1
    222  9000 ????			  -PF2L       =	PF2
    223  9000 ????			  -PF1R       =	$3F	; no effect
    224  9000 ????			  -PF2R       =	$3F	; no effect
    225  9000 ????			  -pfadjust   =	0
    226  9000 ????			  -	      endif
    227  9000 ????				      endif
    228  9000 ????
    229  9000 ????						; define playfield start based on height
    230  9000 ????				      ifnconst	pfres
    231  9000 ????	       00 a4	   playfield  =	playfieldbase
    232  9000 ????			  -	      else
    233  9000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  9000 ????				      endif
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\Animsrevenge.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 20	   bscode_length =	32
      4  9000 ????	       00 9f	   _M_Edge_Right =	159
      5  9000 ????
      6  9000 ????	       00 02	   _M_Edge_Left =	2
      7  9000 ????
      8  9000 ????	       00 58	   _M_Edge_Bottom =	88
      9  9000 ????
     10  9000 ????	       00 02	   _M_Edge_Top =	2
     11  9000 ????
     12  9000 ????	       00 01	   pfscore    =	1
     13  9000 ????
     14  9000 ????	       00 95	   s3	      =	score + 2
     15  9000 ????
     16  9000 ????	       00 94	   s2	      =	score + 1
     17  9000 ????
     18  9000 ????	       00 93	   s1	      =	score
     19  9000 ????
     20  9000 ????	       00 ed	   rand16     =	z
     21  9000 ????
     22  9000 ????	       00 ec	   _Bit7_Last_Life =	y
     23  9000 ????
     24  9000 ????	       00 ec	   _Bit4_Ball_Moving =	y
     25  9000 ????
     26  9000 ????	       00 ec	   _Bit3_Swap_Scores =	y
     27  9000 ????
     28  9000 ????	       00 ec	   _Bit2_Game_Over =	y
     29  9000 ????
     30  9000 ????	       00 ec	   _Bit1_FireB_Restrainer =	y
     31  9000 ????
     32  9000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     33  9000 ????
     34  9000 ????	       00 ec	   _BitOp_All_Purpose_01 =	y
     35  9000 ????
     36  9000 ????	       00 eb	   _High_Score03 =	x
     37  9000 ????
     38  9000 ????	       00 ea	   _High_Score02 =	w
     39  9000 ????
     40  9000 ????	       00 e9	   _High_Score01 =	v
     41  9000 ????
     42  9000 ????	       00 e8	   _Temp_Score03 =	u
     43  9000 ????
     44  9000 ????	       00 e7	   _Temp_Score02 =	t
     45  9000 ????
     46  9000 ????	       00 e6	   _Temp_Score01 =	s
     47  9000 ????
     48  9000 ????	       00 e5	   _MyTemp01  =	r
     49  9000 ????
     50  9000 ????	       00 e4	   _MyTemp02  =	q
     51  9000 ????
     52  9000 ????	       00 e3	   _Bit3_Coord_X_Left =	p
     53  9000 ????
     54  9000 ????	       00 e3	   _Bit2_Coord_X_Right =	p
     55  9000 ????
     56  9000 ????	       00 e3	   _Bit1_Coord_Y_Down =	p
     57  9000 ????
     58  9000 ????	       00 e3	   _Bit0_Coord_Y_Up =	p
     59  9000 ????
     60  9000 ????	       00 e3	   _Bitop_Coord_Counter =	p
     61  9000 ????
     62  9000 ????	       00 e1	   _Pause_Counter_Tmp =	n
     63  9000 ????
     64  9000 ????	       00 e2	   _MyTemp03  =	o
     65  9000 ????
     66  9000 ????	       00 df	   _Bit4_Right_Screen =	l
     67  9000 ????
     68  9000 ????	       00 df	   _Bit3_Left_Screen =	l
     69  9000 ????
     70  9000 ????	       00 df	   _Bit2_Down_Screen =	l
     71  9000 ????
     72  9000 ????	       00 df	   _Bit1_Up_Screen =	l
     73  9000 ????
     74  9000 ????	       00 df	   _Bit0_Main_Screen =	l
     75  9000 ????
     76  9000 ????	       00 df	   _Bitop_Screen_Counter =	l
     77  9000 ????
     78  9000 ????	       00 de	   _Bit7_Ball_Direction_Right =	k
     79  9000 ????
     80  9000 ????	       00 de	   _Bit6_Ball_Direction_Left =	k
     81  9000 ????
     82  9000 ????	       00 de	   _Bit5_Ball_Direction_Down =	k
     83  9000 ????
     84  9000 ????	       00 de	   _Bit4_Ball_Direction_Up =	k
     85  9000 ????
     86  9000 ????	       00 de	   _Bit3_Player1_Direction_Right =	k
     87  9000 ????
     88  9000 ????	       00 de	   _Bit2_Player1_Direction_Left =	k
     89  9000 ????
     90  9000 ????	       00 de	   _Bit1_Player1_Direction_Down =	k
     91  9000 ????
     92  9000 ????	       00 de	   _Bit0_Player1_Direction_Up =	k
     93  9000 ????
     94  9000 ????	       00 de	   _BitOp_P1_M0_Direction =	k
     95  9000 ????
     96  9000 ????	       00 e0	   _Bit1_BW_Check =	m
     97  9000 ????
     98  9000 ????	       00 e0	   _Bit0_BW_Mem =	m
     99  9000 ????
    100  9000 ????	       00 e0	   _Bit2_Pause_Clr_Scheme =	m
    101  9000 ????
    102  9000 ????	       00 e0	   _Pause_Color_Tmp =	m
    103  9000 ????
    104  9000 ????	       00 dd	   _Pause_Mem_Color_Tmp =	j
    105  9000 ????
    106  9000 ????	       00 81	   PuppetX    =	player1x
    107  9000 ????
    108  9000 ????	       00 86	   PuppetY    =	player1y
    109  9000 ????
    110  9000 ????	       00 85	   PGuyY      =	player0y
    111  9000 ????	       00 80	   PGuyX      =	player0x
    112  9000 ????	       00 da	   _F0	      =	g
    113  9000 ????
    114  9000 ????	       00 d9	   _V0	      =	f
    115  9000 ????
    116  9000 ????	       00 d8	   _C0	      =	e
    117  9000 ????
    118  9000 ????	       00 d7	   _SoundCounter0 =	d
    119  9000 ????
    120  9000 ????	       00 d6	   _Sound0    =	c
    121  9000 ????
    122  9000 ????	       00 d5	   _Frame_Counter =	b
    123  9000 ????
    124  9000 ????	       00 d4	   _Master_Counter =	a
    125  9000 ????
    126  9000 ????	       00 2b	   vblank_time =	43
    127  9000 ????	       00 25	   overscan_time =	37
    128  9000 ????	       00 07	   bs_mask    =	7
    129  9000 ????	       00 20	   bankswitch =	32
    130  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    131  9000 ????	       00 01	   PFcolors   =	1
    132  9000 ????	       00 01	   player1colors =	1
    133  9000 ????	       00 01	   playercolors =	1
    134  9000 ????	       00 01	   player1colors =	1
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\Animsrevenge.bas.asm
      8  9000 ????				      ifconst	bankswitch
      9  9000 ????			  -	      if	bankswitch == 8
     10  9000 ????			  -	      ORG	$1000
     11  9000 ????			  -	      RORG	$D000
     12  9000 ????				      endif
     13  9000 ????			  -	      if	bankswitch == 16
     14  9000 ????			  -	      ORG	$1000
     15  9000 ????			  -	      RORG	$9000
     16  9000 ????				      endif
     17  9000 ????				      if	bankswitch == 32
     18  1000					      ORG	$1000
     19  1000					      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .
     39  1000							; 
     40  1000
     41  1000				   .
     42  1000							; 
     43  1000
     44  1000				   .
     45  1000							; 
     46  1000
     47  1000				   .
     48  1000							; 
     49  1000
     50  1000				   .
     51  1000							; 
     52  1000
     53  1000				   .
     54  1000							; 
     55  1000
     56  1000				   .
     57  1000							; 
     58  1000
     59  1000				   .
     60  1000							; 
     61  1000
     62  1000				   .
     63  1000							; 
     64  1000
     65  1000				   .
     66  1000							; 
     67  1000
     68  1000				   .
     69  1000							; 
     70  1000
     71  1000				   .
     72  1000							; 
     73  1000
     74  1000				   .
     75  1000							; 
     76  1000
     77  1000				   .L00 		;  set kernel_options player1colors playercolors pfcolors
     78  1000
     79  1000				   .L01 		;  set romsize 32k
     80  1000
     81  1000				   .L02 		;  set tv ntsc
     82  1000
     83  1000				   .L03 		;  set optimization inlinerand
     84  1000
     85  1000				   .L04 		;  set smartbranching on
     86  1000
     87  1000				   .
     88  1000							; 
     89  1000
     90  1000				   .
     91  1000							; 
     92  1000
     93  1000				   .
     94  1000							; 
     95  1000
     96  1000				   .
     97  1000							; 
     98  1000
     99  1000				   .
    100  1000							; 
    101  1000
    102  1000				   .
    103  1000							; 
    104  1000
    105  1000				   .
    106  1000							; 
    107  1000
    108  1000				   .
    109  1000							; 
    110  1000
    111  1000				   .
    112  1000							; 
    113  1000
    114  1000				   .
    115  1000							; 
    116  1000
    117  1000				   .
    118  1000							; 
    119  1000
    120  1000				   .
    121  1000							; 
    122  1000
    123  1000				   .
    124  1000							; 
    125  1000
    126  1000				   .
    127  1000							; 
    128  1000
    129  1000				   .
    130  1000							; 
    131  1000
    132  1000				   .L05 		;  dim _Master_Counter  =  a
    133  1000
    134  1000				   .L06 		;  dim _Frame_Counter	=  b
    135  1000
    136  1000				   .
    137  1000							; 
    138  1000
    139  1000				   .
    140  1000							; 
    141  1000
    142  1000				   .
    143  1000							; 
    144  1000
    145  1000				   .
    146  1000							; 
    147  1000
    148  1000				   .L07 		;  dim _Sound0  =  c
    149  1000
    150  1000				   .L08 		;  dim _SoundCounter0	=  d
    151  1000
    152  1000				   .L09 		;  dim _C0  =	e
    153  1000
    154  1000				   .L010		;  dim _V0  =	f
    155  1000
    156  1000				   .L011		;  dim _F0  =	g
    157  1000
    158  1000				   .
    159  1000							; 
    160  1000
    161  1000				   .
    162  1000							; 
    163  1000
    164  1000				   .
    165  1000							; 
    166  1000
    167  1000				   .
    168  1000							; 
    169  1000
    170  1000				   .L012		;  dim PGuyX  =  player0x.h
    171  1000
    172  1000				   .L013		;  dim PGuyY  =  player0y.i
    173  1000
    174  1000				   .
    175  1000							; 
    176  1000
    177  1000				   .L014		;  dim PuppetY  =  player1y
    178  1000
    179  1000				   .L015		;  dim PuppetX  =  player1x
    180  1000
    181  1000				   .
    182  1000							; 
    183  1000
    184  1000				   .
    185  1000							; 
    186  1000
    187  1000				   .
    188  1000							; 
    189  1000
    190  1000				   .
    191  1000							; 
    192  1000
    193  1000				   .L016		;  dim _Pause_Mem_Color_Tmp  =  j
    194  1000
    195  1000				   .L017		;  dim _Pause_Color_Tmp  =  m
    196  1000
    197  1000				   .L018		;  dim _Bit2_Pause_Clr_Scheme	=  m
    198  1000
    199  1000				   .L019		;  dim _Bit0_BW_Mem  =  m
    200  1000
    201  1000				   .L020		;  dim _Bit1_BW_Check	=  m
    202  1000
    203  1000				   .
    204  1000							; 
    205  1000
    206  1000				   .
    207  1000							; 
    208  1000
    209  1000				   .
    210  1000							; 
    211  1000
    212  1000				   .
    213  1000							; 
    214  1000
    215  1000				   .
    216  1000							; 
    217  1000
    218  1000				   .L021		;  dim _BitOp_P1_M0_Direction	=  k
    219  1000
    220  1000				   .L022		;  dim _Bit0_Player1_Direction_Up  =  k
    221  1000
    222  1000				   .L023		;  dim _Bit1_Player1_Direction_Down  =  k
    223  1000
    224  1000				   .L024		;  dim _Bit2_Player1_Direction_Left  =  k
    225  1000
    226  1000				   .L025		;  dim _Bit3_Player1_Direction_Right  =  k
    227  1000
    228  1000				   .L026		;  dim _Bit4_Ball_Direction_Up  =  k
    229  1000
    230  1000				   .L027		;  dim _Bit5_Ball_Direction_Down  =  k
    231  1000
    232  1000				   .L028		;  dim _Bit6_Ball_Direction_Left  =  k
    233  1000
    234  1000				   .L029		;  dim _Bit7_Ball_Direction_Right  =  k
    235  1000
    236  1000				   .
    237  1000							; 
    238  1000
    239  1000				   .
    240  1000							; 
    241  1000
    242  1000				   .
    243  1000							; 
    244  1000
    245  1000				   .
    246  1000							; 
    247  1000
    248  1000				   .L030		;  dim _Bitop_Screen_Counter  =  l
    249  1000
    250  1000				   .L031		;  dim _Bit0_Main_Screen  =  l
    251  1000
    252  1000				   .L032		;  dim _Bit1_Up_Screen  =  l
    253  1000
    254  1000				   .L033		;  dim _Bit2_Down_Screen  =  l
    255  1000
    256  1000				   .L034		;  dim _Bit3_Left_Screen  =  l
    257  1000
    258  1000				   .L035		;  dim _Bit4_Right_Screen  =  l
    259  1000
    260  1000				   .
    261  1000							; 
    262  1000
    263  1000				   .
    264  1000							; 
    265  1000
    266  1000				   .
    267  1000							; 
    268  1000
    269  1000				   .
    270  1000							; 
    271  1000
    272  1000				   .
    273  1000							; 
    274  1000
    275  1000				   .L036		;  dim _MyTemp03  =  o
    276  1000
    277  1000				   .
    278  1000							; 
    279  1000
    280  1000				   .
    281  1000							; 
    282  1000
    283  1000				   .
    284  1000							; 
    285  1000
    286  1000				   .
    287  1000							; 
    288  1000
    289  1000				   .
    290  1000							; 
    291  1000
    292  1000				   .L037		;  dim _Pause_Counter_Tmp  =  n
    293  1000
    294  1000				   .
    295  1000							; 
    296  1000
    297  1000				   .
    298  1000							; 
    299  1000
    300  1000				   .
    301  1000							; 
    302  1000
    303  1000				   .
    304  1000							; 
    305  1000
    306  1000				   .L038		;  dim _Bitop_Coord_Counter  =  p
    307  1000
    308  1000				   .L039		;  dim _Bit0_Coord_Y_Up  =  p
    309  1000
    310  1000				   .L040		;  dim _Bit1_Coord_Y_Down  =  p
    311  1000
    312  1000				   .L041		;  dim _Bit2_Coord_X_Right  =	p
    313  1000
    314  1000				   .L042		;  dim _Bit3_Coord_X_Left  =  p
    315  1000
    316  1000				   .
    317  1000							; 
    318  1000
    319  1000				   .
    320  1000							; 
    321  1000
    322  1000				   .
    323  1000							; 
    324  1000
    325  1000				   .
    326  1000							; 
    327  1000
    328  1000				   .L043		;  dim _MyTemp02  =  q
    329  1000
    330  1000				   .
    331  1000							; 
    332  1000
    333  1000				   .
    334  1000							; 
    335  1000
    336  1000				   .
    337  1000							; 
    338  1000
    339  1000				   .L044		;  dim _MyTemp01  =  r
    340  1000
    341  1000				   .
    342  1000							; 
    343  1000
    344  1000				   .
    345  1000							; 
    346  1000
    347  1000				   .
    348  1000							; 
    349  1000
    350  1000				   .
    351  1000							; 
    352  1000
    353  1000				   .
    354  1000							; 
    355  1000
    356  1000				   .L045		;  dim _Temp_Score01  =  s
    357  1000
    358  1000				   .L046		;  dim _Temp_Score02  =  t
    359  1000
    360  1000				   .L047		;  dim _Temp_Score03  =  u
    361  1000
    362  1000				   .
    363  1000							; 
    364  1000
    365  1000				   .
    366  1000							; 
    367  1000
    368  1000				   .
    369  1000							; 
    370  1000
    371  1000				   .
    372  1000							; 
    373  1000
    374  1000				   .L048		;  dim _High_Score01  =  v
    375  1000
    376  1000				   .L049		;  dim _High_Score02  =  w
    377  1000
    378  1000				   .L050		;  dim _High_Score03  =  x
    379  1000
    380  1000				   .
    381  1000							; 
    382  1000
    383  1000				   .
    384  1000							; 
    385  1000
    386  1000				   .
    387  1000							; 
    388  1000
    389  1000				   .
    390  1000							; 
    391  1000
    392  1000				   .L051		;  dim _BitOp_All_Purpose_01  =  y
    393  1000
    394  1000				   .L052		;  dim _Bit0_Reset_Restrainer	=  y
    395  1000
    396  1000				   .L053		;  dim _Bit1_FireB_Restrainer	=  y
    397  1000
    398  1000				   .L054		;  dim _Bit2_Game_Over  =  y
    399  1000
    400  1000				   .L055		;  dim _Bit3_Swap_Scores  =  y
    401  1000
    402  1000				   .L056		;  dim _Bit4_Ball_Moving  =  y
    403  1000
    404  1000				   .L057		;  dim _Bit7_Last_Life  =  y
    405  1000
    406  1000				   .
    407  1000							; 
    408  1000
    409  1000				   .
    410  1000							; 
    411  1000
    412  1000				   .
    413  1000							; 
    414  1000
    415  1000				   .
    416  1000							; 
    417  1000
    418  1000				   .
    419  1000							; 
    420  1000
    421  1000				   .
    422  1000							; 
    423  1000
    424  1000				   .L058		;  dim rand16	=  z
    425  1000
    426  1000				   .
    427  1000							; 
    428  1000
    429  1000				   .
    430  1000							; 
    431  1000
    432  1000				   .
    433  1000							; 
    434  1000
    435  1000				   .
    436  1000							; 
    437  1000
    438  1000				   .
    439  1000							; 
    440  1000
    441  1000				   .
    442  1000							; 
    443  1000
    444  1000				   .
    445  1000							; 
    446  1000
    447  1000				   .
    448  1000							; 
    449  1000
    450  1000				   .L059		;  dim s1  =  score
    451  1000
    452  1000				   .L060		;  dim s2  =  score + 1
    453  1000
    454  1000				   .L061		;  dim s3  =  score + 2
    455  1000
    456  1000				   .
    457  1000							; 
    458  1000
    459  1000				   .
    460  1000							; 
    461  1000
    462  1000				   .
    463  1000							; 
    464  1000
    465  1000				   .
    466  1000							; 
    467  1000
    468  1000				   .
    469  1000							; 
    470  1000
    471  1000				   .L062		;  const pfscore  =  1
    472  1000
    473  1000				   .
    474  1000							; 
    475  1000
    476  1000				   .
    477  1000							; 
    478  1000
    479  1000				   .
    480  1000							; 
    481  1000
    482  1000				   .
    483  1000							; 
    484  1000
    485  1000				   .
    486  1000							; 
    487  1000
    488  1000				   .
    489  1000							; 
    490  1000
    491  1000				   .L063		;  const _M_Edge_Top  =  2
    492  1000
    493  1000				   .L064		;  const _M_Edge_Bottom  =  88
    494  1000
    495  1000				   .L065		;  const _M_Edge_Left	=  2
    496  1000
    497  1000				   .L066		;  const _M_Edge_Right  =  159
    498  1000
    499  1000				   .
    500  1000							; 
    501  1000
    502  1000				   .
    503  1000							; 
    504  1000
    505  1000				   .
    506  1000							; 
    507  1000
    508  1000				   .
    509  1000							; 
    510  1000
    511  1000				   .
    512  1000							; 
    513  1000
    514  1000				   .
    515  1000							; 
    516  1000
    517  1000				   .
    518  1000							; 
    519  1000
    520  1000				   .
    521  1000							; 
    522  1000
    523  1000				   .
    524  1000							; 
    525  1000
    526  1000				   .
    527  1000							; 
    528  1000
    529  1000				   .__Start_Restart
    530  1000							; __Start_Restart
    531  1000
    532  1000				   .
    533  1000							; 
    534  1000
    535  1000				   .
    536  1000							; 
    537  1000
    538  1000				   .
    539  1000							; 
    540  1000
    541  1000				   .
    542  1000							; 
    543  1000
    544  1000				   .
    545  1000							; 
    546  1000
    547  1000				   .
    548  1000							; 
    549  1000
    550  1000				   .L067		;  pfclear
    551  1000
    552  1000		       a9 00		      LDA	#0
    553  1002		       85 ee		      sta	temp7
    554  1004		       a9 10		      lda	#>(ret_point1-1)
    555  1006		       48		      pha
    556  1007		       a9 19		      lda	#<(ret_point1-1)
    557  1009		       48		      pha
    558  100a		       a9 f2		      lda	#>(pfclear-1)
    559  100c		       48		      pha
    560  100d		       a9 8f		      lda	#<(pfclear-1)
    561  100f		       48		      pha
    562  1010		       a5 ee		      lda	temp7
    563  1012		       48		      pha
    564  1013		       8a		      txa
    565  1014		       48		      pha
    566  1015		       a2 08		      ldx	#8
    567  1017		       4c eb ff 	      jmp	BS_jsr
    568  101a				   ret_point1
    569  101a				   .
    570  101a							; 
    571  101a
    572  101a				   .
    573  101a							; 
    574  101a
    575  101a				   .
    576  101a							; 
    577  101a
    578  101a				   .
    579  101a							; 
    580  101a
    581  101a				   .
    582  101a							; 
    583  101a
    584  101a				   .
    585  101a							; 
    586  101a
    587  101a				   .L068		;  AUDV0  =  0  :  AUDV1  =  0
    588  101a
    589  101a		       a9 00		      LDA	#0
    590  101c		       85 19		      STA	AUDV0
    591  101e		       85 1a		      STA	AUDV1
    592  1020				   .
    593  1020							; 
    594  1020
    595  1020				   .
    596  1020							; 
    597  1020
    598  1020				   .
    599  1020							; 
    600  1020
    601  1020				   .
    602  1020							; 
    603  1020
    604  1020				   .
    605  1020							; 
    606  1020
    607  1020				   .
    608  1020							; 
    609  1020
    610  1020				   .
    611  1020							; 
    612  1020
    613  1020				   .
    614  1020							; 
    615  1020
    616  1020				   .
    617  1020							; 
    618  1020
    619  1020				   .
    620  1020							; 
    621  1020
    622  1020				   .
    623  1020							; 
    624  1020
    625  1020				   .L069		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
    626  1020
    627  1020		       a9 00		      LDA	#0
    628  1022		       85 d4		      STA	a
    629  1024		       85 d5		      STA	b
    630  1026		       85 d6		      STA	c
    631  1028		       85 d7		      STA	d
    632  102a		       85 d8		      STA	e
    633  102c		       85 d9		      STA	f
    634  102e		       85 da		      STA	g
    635  1030		       85 db		      STA	h
    636  1032		       85 dc		      STA	i
    637  1034				   .L070		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
    638  1034
    639  1034		       a9 00		      LDA	#0
    640  1036		       85 dd		      STA	j
    641  1038		       85 de		      STA	k
    642  103a		       85 df		      STA	l
    643  103c		       85 e0		      STA	m
    644  103e		       85 e1		      STA	n
    645  1040		       85 e2		      STA	o
    646  1042		       85 e3		      STA	p
    647  1044		       85 e4		      STA	q
    648  1046		       85 e5		      STA	r
    649  1048				   .L071		;  s  =  0  :	t  =  0  :  u  =  0
    650  1048
    651  1048		       a9 00		      LDA	#0
    652  104a		       85 e6		      STA	s
    653  104c		       85 e7		      STA	t
    654  104e		       85 e8		      STA	u
    655  1050				   .
    656  1050							; 
    657  1050
    658  1050				   .
    659  1050							; 
    660  1050
    661  1050				   .
    662  1050							; 
    663  1050
    664  1050				   .
    665  1050							; 
    666  1050
    667  1050				   .
    668  1050							; 
    669  1050
    670  1050				   .
    671  1050							; 
    672  1050
    673  1050				   .
    674  1050							; 
    675  1050
    676  1050				   .
    677  1050							; 
    678  1050
    679  1050				   .
    680  1050							; 
    681  1050
    682  1050				   .L072		;  _BitOp_All_Purpose_01  =  _BitOp_All_Purpose_01  &	%00000100
    683  1050
    684  1050		       a5 ec		      LDA	_BitOp_All_Purpose_01
    685  1052		       29 04		      AND	#%00000100
    686  1054		       85 ec		      STA	_BitOp_All_Purpose_01
    687  1056				   .
    688  1056							; 
    689  1056
    690  1056				   .
    691  1056							; 
    692  1056
    693  1056				   .
    694  1056							; 
    695  1056
    696  1056				   .
    697  1056							; 
    698  1056
    699  1056				   .
    700  1056							; 
    701  1056
    702  1056				   .
    703  1056							; 
    704  1056
    705  1056				   .L073		;  PuppetY  =	200  :	player0y  =  200  :  bally  =  250
    706  1056
    707  1056		       a9 c8		      LDA	#200
    708  1058		       85 86		      STA	PuppetY
    709  105a		       85 85		      STA	player0y
    710  105c		       a9 fa		      LDA	#250
    711  105e		       85 89		      STA	bally
    712  1060				   .
    713  1060							; 
    714  1060
    715  1060				   .
    716  1060							; 
    717  1060
    718  1060				   .
    719  1060							; 
    720  1060
    721  1060				   .
    722  1060							; 
    723  1060
    724  1060				   .
    725  1060							; 
    726  1060
    727  1060				   .
    728  1060							; 
    729  1060
    730  1060				   .
    731  1060							; 
    732  1060
    733  1060				   .L074		;  if _Bit2_Game_Over{2} then goto __Main_Loop_Setup
    734  1060
    735  1060		       a5 ec		      LDA	_Bit2_Game_Over
    736  1062		       29 04		      AND	#4
    737  1064		       f0 03		      BEQ	.skipL074
    738  1066				   .condpart0
    739  1066		       4c b6 10 	      jmp	.__Main_Loop_Setup
    740  1069
    741  1069				   .skipL074
    742  1069				   .
    743  1069							; 
    744  1069
    745  1069				   .
    746  1069							; 
    747  1069
    748  1069				   .
    749  1069							; 
    750  1069
    751  1069				   .
    752  1069							; 
    753  1069
    754  1069				   .
    755  1069							; 
    756  1069
    757  1069				   .
    758  1069							; 
    759  1069
    760  1069				   .
    761  1069							; 
    762  1069
    763  1069				   .
    764  1069							; 
    765  1069
    766  1069				   .
    767  1069							; 
    768  1069
    769  1069				   .
    770  1069							; 
    771  1069
    772  1069				   .__Setup_Title_Screen
    773  1069							; __Setup_Title_Screen
    774  1069
    775  1069				   .
    776  1069							; 
    777  1069
    778  1069				   .
    779  1069							; 
    780  1069
    781  1069				   .
    782  1069							; 
    783  1069
    784  1069				   .
    785  1069							; 
    786  1069
    787  1069				   .
    788  1069							; 
    789  1069
    790  1069				   .
    791  1069							; 
    792  1069
    793  1069				   .
    794  1069							; 
    795  1069
    796  1069				   .L075		;  pfscore1  =  0  :  scorecolor  =  $90
    797  1069
    798  1069		       a9 00		      LDA	#0
    799  106b		       85 f2		      STA	pfscore1
    800  106d		       a9 90		      LDA	#$90
    801  106f		       85 a3		      STA	scorecolor
    802  1071				   .
    803  1071							; 
    804  1071
    805  1071				   .
    806  1071							; 
    807  1071
    808  1071				   .
    809  1071							; 
    810  1071
    811  1071				   .
    812  1071							; 
    813  1071
    814  1071				   .
    815  1071							; 
    816  1071
    817  1071				   .
    818  1071							; 
    819  1071
    820  1071				   .
    821  1071							; 
    822  1071
    823  1071				   .L076		;  COLUBK  =  $60
    824  1071
    825  1071		       a9 60		      LDA	#$60
    826  1073		       85 09		      STA	COLUBK
    827  1075				   .
    828  1075							; 
    829  1075
    830  1075				   .
    831  1075							; 
    832  1075
    833  1075				   .
    834  1075							; 
    835  1075
    836  1075				   .
    837  1075							; 
    838  1075
    839  1075				   .
    840  1075							; 
    841  1075
    842  1075				   .
    843  1075							; 
    844  1075
    845  1075				   .
    846  1075							; 
    847  1075
    848  1075				   .
    849  1075							; 
    850  1075
    851  1075				   .
    852  1075							; 
    853  1075
    854  1075				   .
    855  1075							; 
    856  1075
    857  1075				   .
    858  1075							; 
    859  1075
    860  1075				   .L077		;  _Bit0_Reset_Restrainer{0}  =  1
    861  1075
    862  1075		       a5 ec		      LDA	_Bit0_Reset_Restrainer
    863  1077		       09 01		      ORA	#1
    864  1079		       85 ec		      STA	_Bit0_Reset_Restrainer
    865  107b				   .
    866  107b							; 
    867  107b
    868  107b				   .
    869  107b							; 
    870  107b
    871  107b				   .
    872  107b							; 
    873  107b
    874  107b				   .
    875  107b							; 
    876  107b
    877  107b				   .
    878  107b							; 
    879  107b
    880  107b				   .
    881  107b							; 
    882  107b
    883  107b				   .L078		;  playfieldpos  =  8
    884  107b
    885  107b		       a9 08		      LDA	#8
    886  107d		       85 ef		      STA	playfieldpos
    887  107f				   .
    888  107f							; 
    889  107f
    890  107f				   .
    891  107f							; 
    892  107f
    893  107f				   .
    894  107f							; 
    895  107f
    896  107f				   .
    897  107f							; 
    898  107f
    899  107f				   .
    900  107f							; 
    901  107f
    902  107f				   .
    903  107f							; 
    904  107f
    905  107f				   .
    906  107f							; 
    907  107f
    908  107f				   .
    909  107f							; 
    910  107f
    911  107f				   .
    912  107f							; 
    913  107f
    914  107f				   .__Title_Screen_Loop
    915  107f							; __Title_Screen_Loop
    916  107f
    917  107f				   .
    918  107f							; 
    919  107f
    920  107f				   .
    921  107f							; 
    922  107f
    923  107f				   .L079		;  gosub titledrawscreen bank2
    924  107f
    925  107f		       85 ee		      sta	temp7
    926  1081		       a9 10		      lda	#>(ret_point2-1)
    927  1083		       48		      pha
    928  1084		       a9 96		      lda	#<(ret_point2-1)
    929  1086		       48		      pha
    930  1087		       a9 2f		      lda	#>(.titledrawscreen-1)
    931  1089		       48		      pha
    932  108a		       a9 ff		      lda	#<(.titledrawscreen-1)
    933  108c		       48		      pha
    934  108d		       a5 ee		      lda	temp7
    935  108f		       48		      pha
    936  1090		       8a		      txa
    937  1091		       48		      pha
    938  1092		       a2 02		      ldx	#2
    939  1094		       4c eb ff 	      jmp	BS_jsr
    940  1097				   ret_point2
    941  1097				   .
    942  1097							; 
    943  1097
    944  1097				   .
    945  1097							; 
    946  1097
    947  1097				   .
    948  1097							; 
    949  1097
    950  1097				   .
    951  1097							; 
    952  1097
    953  1097				   .
    954  1097							; 
    955  1097
    956  1097				   .
    957  1097							; 
    958  1097
    959  1097				   .
    960  1097							; 
    961  1097
    962  1097				   .
    963  1097							; 
    964  1097
    965  1097				   .
    966  1097							; 
    967  1097
    968  1097				   .
    969  1097							; 
    970  1097
    971  1097				   .
    972  1097							; 
    973  1097
    974  1097				   .
    975  1097							; 
    976  1097
    977  1097				   .
    978  1097							; 
    979  1097
    980  1097				   .
    981  1097							; 
    982  1097
    983  1097				   .L080		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
    984  1097
    985  1097		       a9 01		      lda	#1
    986  1099		       2c 82 02 	      bit	SWCHB
    987  109c		       f0 0d		      BEQ	.skipL080
    988  109e				   .condpart1
    989  109e		       24 0c		      bit	INPT4
    990  10a0		       10 09		      BPL	.skip1then
    991  10a2				   .condpart2
    992  10a2		       a5 ec		      LDA	_Bit0_Reset_Restrainer
    993  10a4		       29 fe		      AND	#254
    994  10a6		       85 ec		      STA	_Bit0_Reset_Restrainer
    995  10a8		       4c 7f 10 	      jmp	.__Title_Screen_Loop
    996  10ab
    997  10ab				   .skip1then
    998  10ab				   .skipL080
    999  10ab				   .
   1000  10ab							; 
   1001  10ab
   1002  10ab				   .
   1003  10ab							; 
   1004  10ab
   1005  10ab				   .
   1006  10ab							; 
   1007  10ab
   1008  10ab				   .
   1009  10ab							; 
   1010  10ab
   1011  10ab				   .
   1012  10ab							; 
   1013  10ab
   1014  10ab				   .L081		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   1015  10ab
   1016  10ab		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1017  10ad		       4a		      LSR
   1018  10ae		       90 03		      BCC	.skipL081
   1019  10b0				   .condpart3
   1020  10b0		       4c 7f 10 	      jmp	.__Title_Screen_Loop
   1021  10b3
   1022  10b3				   .skipL081
   1023  10b3				   .
   1024  10b3							; 
   1025  10b3
   1026  10b3				   .
   1027  10b3							; 
   1028  10b3
   1029  10b3				   .
   1030  10b3							; 
   1031  10b3
   1032  10b3				   .
   1033  10b3							; 
   1034  10b3
   1035  10b3				   .L082		;  goto __Main_Loop_Setup
   1036  10b3
   1037  10b3		       4c b6 10 	      jmp	.__Main_Loop_Setup
   1038  10b6
   1039  10b6				   .
   1040  10b6							; 
   1041  10b6
   1042  10b6				   .
   1043  10b6							; 
   1044  10b6
   1045  10b6				   .
   1046  10b6							; 
   1047  10b6
   1048  10b6				   .
   1049  10b6							; 
   1050  10b6
   1051  10b6				   .
   1052  10b6							; 
   1053  10b6
   1054  10b6				   .
   1055  10b6							; 
   1056  10b6
   1057  10b6				   .
   1058  10b6							; 
   1059  10b6
   1060  10b6				   .
   1061  10b6							; 
   1062  10b6
   1063  10b6				   .
   1064  10b6							; 
   1065  10b6
   1066  10b6				   .
   1067  10b6							; 
   1068  10b6
   1069  10b6				   .
   1070  10b6							; 
   1071  10b6
   1072  10b6				   .
   1073  10b6							; 
   1074  10b6
   1075  10b6				   .
   1076  10b6							; 
   1077  10b6
   1078  10b6				   .__Main_Loop_Setup
   1079  10b6							; __Main_Loop_Setup
   1080  10b6
   1081  10b6				   .
   1082  10b6							; 
   1083  10b6
   1084  10b6				   .
   1085  10b6							; 
   1086  10b6
   1087  10b6				   .
   1088  10b6							; 
   1089  10b6
   1090  10b6				   .
   1091  10b6							; 
   1092  10b6
   1093  10b6				   .
   1094  10b6							; 
   1095  10b6
   1096  10b6				   .
   1097  10b6							; 
   1098  10b6
   1099  10b6				   .
   1100  10b6							; 
   1101  10b6
   1102  10b6				   .L083		;  _Bit2_Game_Over{2}	=  0
   1103  10b6
   1104  10b6		       a5 ec		      LDA	_Bit2_Game_Over
   1105  10b8		       29 fb		      AND	#251
   1106  10ba		       85 ec		      STA	_Bit2_Game_Over
   1107  10bc				   .
   1108  10bc							; 
   1109  10bc
   1110  10bc				   .
   1111  10bc							; 
   1112  10bc
   1113  10bc				   .
   1114  10bc							; 
   1115  10bc
   1116  10bc				   .
   1117  10bc							; 
   1118  10bc
   1119  10bc				   .
   1120  10bc							; 
   1121  10bc
   1122  10bc				   .
   1123  10bc							; 
   1124  10bc
   1125  10bc				   .
   1126  10bc							; 
   1127  10bc
   1128  10bc				   .
   1129  10bc							; 
   1130  10bc
   1131  10bc				   .
   1132  10bc							; 
   1133  10bc
   1134  10bc				   .
   1135  10bc							; 
   1136  10bc
   1137  10bc				   .
   1138  10bc							; 
   1139  10bc
   1140  10bc				   .
   1141  10bc							; 
   1142  10bc
   1143  10bc				   .L084		;  _Bit0_Reset_Restrainer{0}  =  1
   1144  10bc
   1145  10bc		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1146  10be		       09 01		      ORA	#1
   1147  10c0		       85 ec		      STA	_Bit0_Reset_Restrainer
   1148  10c2				   .
   1149  10c2							; 
   1150  10c2
   1151  10c2				   .
   1152  10c2							; 
   1153  10c2
   1154  10c2				   .
   1155  10c2							; 
   1156  10c2
   1157  10c2				   .
   1158  10c2							; 
   1159  10c2
   1160  10c2				   .
   1161  10c2							; 
   1162  10c2
   1163  10c2				   .
   1164  10c2							; 
   1165  10c2
   1166  10c2				   .
   1167  10c2							; 
   1168  10c2
   1169  10c2				   .
   1170  10c2							; 
   1171  10c2
   1172  10c2				   .
   1173  10c2							; 
   1174  10c2
   1175  10c2				   .
   1176  10c2							; 
   1177  10c2
   1178  10c2				   .
   1179  10c2							; 
   1180  10c2
   1181  10c2				   .
   1182  10c2							; 
   1183  10c2
   1184  10c2				   .L085		;  _Bit1_FireB_Restrainer{1}  =  1
   1185  10c2
   1186  10c2		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   1187  10c4		       09 02		      ORA	#2
   1188  10c6		       85 ec		      STA	_Bit1_FireB_Restrainer
   1189  10c8				   .
   1190  10c8							; 
   1191  10c8
   1192  10c8				   .
   1193  10c8							; 
   1194  10c8
   1195  10c8				   .
   1196  10c8							; 
   1197  10c8
   1198  10c8				   .
   1199  10c8							; 
   1200  10c8
   1201  10c8				   .
   1202  10c8							; 
   1203  10c8
   1204  10c8				   .
   1205  10c8							; 
   1206  10c8
   1207  10c8				   .L086		;  PuppetX  =	74  :  PuppetY	=  78
   1208  10c8
   1209  10c8		       a9 4a		      LDA	#74
   1210  10ca		       85 81		      STA	PuppetX
   1211  10cc		       a9 4e		      LDA	#78
   1212  10ce		       85 86		      STA	PuppetY
   1213  10d0				   .
   1214  10d0							; 
   1215  10d0
   1216  10d0				   .
   1217  10d0							; 
   1218  10d0
   1219  10d0				   .
   1220  10d0							; 
   1221  10d0
   1222  10d0				   .
   1223  10d0							; 
   1224  10d0
   1225  10d0				   .
   1226  10d0							; 
   1227  10d0
   1228  10d0				   .
   1229  10d0							; 
   1230  10d0
   1231  10d0				   .L087		;  player0x  =   ( rand / 4 )	 +   ( rand & 15 )   :	player0y  =  0
   1232  10d0
   1233  10d0							; complex statement detected
   1234  10d0		       a5 a2		      lda	rand
   1235  10d2		       4a		      lsr
   1236  10d3					      ifconst	rand16
   1237  10d3		       26 ed		      rol	rand16
   1238  10d5					      endif
   1239  10d5		       90 02		      bcc	*+4
   1240  10d7		       49 b4		      eor	#$B4
   1241  10d9		       85 a2		      sta	rand
   1242  10db					      ifconst	rand16
   1243  10db		       45 ed		      eor	rand16
   1244  10dd					      endif
   1245  10dd		       4a		      lsr
   1246  10de		       4a		      lsr
   1247  10df		       48		      PHA
   1248  10e0		       a5 a2		      lda	rand
   1249  10e2		       4a		      lsr
   1250  10e3					      ifconst	rand16
   1251  10e3		       26 ed		      rol	rand16
   1252  10e5					      endif
   1253  10e5		       90 02		      bcc	*+4
   1254  10e7		       49 b4		      eor	#$B4
   1255  10e9		       85 a2		      sta	rand
   1256  10eb					      ifconst	rand16
   1257  10eb		       45 ed		      eor	rand16
   1258  10ed					      endif
   1259  10ed		       29 0f		      AND	#15
   1260  10ef		       ba		      TSX
   1261  10f0		       e8		      INX
   1262  10f1		       9a		      TXS
   1263  10f2		       18		      CLC
   1264  10f3		       75 00		      ADC	$00,x
   1265  10f5		       85 80		      STA	player0x
   1266  10f7		       a9 00		      LDA	#0
   1267  10f9		       85 85		      STA	player0y
   1268  10fb				   .
   1269  10fb							; 
   1270  10fb
   1271  10fb				   .
   1272  10fb							; 
   1273  10fb
   1274  10fb				   .
   1275  10fb							; 
   1276  10fb
   1277  10fb				   .
   1278  10fb							; 
   1279  10fb
   1280  10fb				   .
   1281  10fb							; 
   1282  10fb
   1283  10fb				   .
   1284  10fb							; 
   1285  10fb
   1286  10fb				   .L088		;  ballheight	=  4  :  bally	=  78
   1287  10fb
   1288  10fb		       a9 04		      LDA	#4
   1289  10fd		       85 92		      STA	ballheight
   1290  10ff		       a9 4e		      LDA	#78
   1291  1101		       85 89		      STA	bally
   1292  1103				   .
   1293  1103							; 
   1294  1103
   1295  1103				   .
   1296  1103							; 
   1297  1103
   1298  1103				   .
   1299  1103							; 
   1300  1103
   1301  1103				   .
   1302  1103							; 
   1303  1103
   1304  1103				   .
   1305  1103							; 
   1306  1103
   1307  1103				   .
   1308  1103							; 
   1309  1103
   1310  1103				   .L089		;  COLUBK  =  $02
   1311  1103
   1312  1103		       a9 02		      LDA	#$02
   1313  1105		       85 09		      STA	COLUBK
   1314  1107				   .
   1315  1107							; 
   1316  1107
   1317  1107				   .
   1318  1107							; 
   1319  1107
   1320  1107				   .
   1321  1107							; 
   1322  1107
   1323  1107				   .
   1324  1107							; 
   1325  1107
   1326  1107				   .
   1327  1107							; 
   1328  1107
   1329  1107				   .
   1330  1107							; 
   1331  1107
   1332  1107				   .L090		;  score  =  0  :  scorecolor	=  $1E
   1333  1107
   1334  1107		       a9 00		      LDA	#$00
   1335  1109		       85 95		      STA	score+2
   1336  110b		       a9 00		      LDA	#$00
   1337  110d		       85 94		      STA	score+1
   1338  110f		       a9 00		      LDA	#$00
   1339  1111		       85 93		      STA	score
   1340  1113		       a9 1e		      LDA	#$1E
   1341  1115		       85 a3		      STA	scorecolor
   1342  1117				   .
   1343  1117							; 
   1344  1117
   1345  1117				   .
   1346  1117							; 
   1347  1117
   1348  1117				   .
   1349  1117							; 
   1350  1117
   1351  1117				   .
   1352  1117							; 
   1353  1117
   1354  1117				   .
   1355  1117							; 
   1356  1117
   1357  1117				   .
   1358  1117							; 
   1359  1117
   1360  1117				   .L091		;  pfscore1  =  %11111111  :  pfscorecolor  =	$06
   1361  1117
   1362  1117		       a9 ff		      LDA	#%11111111
   1363  1119		       85 f2		      STA	pfscore1
   1364  111b		       a9 06		      LDA	#$06
   1365  111d		       85 f4		      STA	pfscorecolor
   1366  111f				   .
   1367  111f							; 
   1368  111f
   1369  111f				   .__Main_Screen
   1370  111f							; __Main_Screen
   1371  111f
   1372  111f				   .
   1373  111f							; 
   1374  111f
   1375  111f				   .
   1376  111f							; 
   1377  111f
   1378  111f				   .
   1379  111f							; 
   1380  111f
   1381  111f				   .
   1382  111f							; 
   1383  111f
   1384  111f				   .L092		;  pfcolors:
   1385  111f
   1386  111f		       a9 00		      lda	# $00
   1387  1121		       85 08		      sta	COLUPF
   1388  1123				  -	      ifconst	pfres
   1389  1123				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   1390  1123					      else
   1391  1123		       a9 f5		      lda	#>(pfcolorlabel13-84)
   1392  1125					      endif
   1393  1125		       85 f1		      sta	pfcolortable+1
   1394  1127				  -	      ifconst	pfres
   1395  1127				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   1396  1127					      else
   1397  1127		       a9 04		      lda	#<(pfcolorlabel13-84)
   1398  1129					      endif
   1399  1129		       85 f0		      sta	pfcolortable
   1400  112b				   .
   1401  112b							; 
   1402  112b
   1403  112b				   .
   1404  112b							; 
   1405  112b
   1406  112b				   .
   1407  112b							; 
   1408  112b
   1409  112b				   .
   1410  112b							; 
   1411  112b
   1412  112b				   .
   1413  112b							; 
   1414  112b
   1415  112b				   .
   1416  112b							; 
   1417  112b
   1418  112b				   .
   1419  112b							; 
   1420  112b
   1421  112b				   .L093		;  playfield:
   1422  112b
   1423  112b				  -	      ifconst	pfres
   1424  112b				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   1425  112b					      else
   1426  112b		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   1427  112d					      endif
   1428  112d		       4c 60 11 	      jmp	pflabel0
   1429  1130				   PF_data0
   1430  1130		       fc 00		      .byte.b	%11111100, %00000000
   1431  1132					      if	(pfwidth>2)
   1432  1132		       00 fc		      .byte.b	%00000000, %11111100
   1433  1134					      endif
   1434  1134		       fc 00		      .byte.b	%11111100, %00000000
   1435  1136					      if	(pfwidth>2)
   1436  1136		       00 fc		      .byte.b	%00000000, %11111100
   1437  1138					      endif
   1438  1138		       e0 00		      .byte.b	%11100000, %00000000
   1439  113a					      if	(pfwidth>2)
   1440  113a		       00 e0		      .byte.b	%00000000, %11100000
   1441  113c					      endif
   1442  113c		       00 00		      .byte.b	%00000000, %00000000
   1443  113e					      if	(pfwidth>2)
   1444  113e		       00 00		      .byte.b	%00000000, %00000000
   1445  1140					      endif
   1446  1140		       00 00		      .byte.b	%00000000, %00000000
   1447  1142					      if	(pfwidth>2)
   1448  1142		       00 00		      .byte.b	%00000000, %00000000
   1449  1144					      endif
   1450  1144		       00 00		      .byte.b	%00000000, %00000000
   1451  1146					      if	(pfwidth>2)
   1452  1146		       00 00		      .byte.b	%00000000, %00000000
   1453  1148					      endif
   1454  1148		       00 00		      .byte.b	%00000000, %00000000
   1455  114a					      if	(pfwidth>2)
   1456  114a		       00 00		      .byte.b	%00000000, %00000000
   1457  114c					      endif
   1458  114c		       00 00		      .byte.b	%00000000, %00000000
   1459  114e					      if	(pfwidth>2)
   1460  114e		       00 00		      .byte.b	%00000000, %00000000
   1461  1150					      endif
   1462  1150		       00 00		      .byte.b	%00000000, %00000000
   1463  1152					      if	(pfwidth>2)
   1464  1152		       00 00		      .byte.b	%00000000, %00000000
   1465  1154					      endif
   1466  1154		       e0 00		      .byte.b	%11100000, %00000000
   1467  1156					      if	(pfwidth>2)
   1468  1156		       00 e0		      .byte.b	%00000000, %11100000
   1469  1158					      endif
   1470  1158		       fc 00		      .byte.b	%11111100, %00000000
   1471  115a					      if	(pfwidth>2)
   1472  115a		       00 fc		      .byte.b	%00000000, %11111100
   1473  115c					      endif
   1474  115c		       fc 00		      .byte.b	%11111100, %00000000
   1475  115e					      if	(pfwidth>2)
   1476  115e		       00 fc		      .byte.b	%00000000, %11111100
   1477  1160					      endif
   1478  1160				   pflabel0
   1479  1160		       bd 30 11 	      lda	PF_data0,x
   1480  1163		       95 a4		      sta	playfield,x
   1481  1165		       ca		      dex
   1482  1166		       10 f8		      bpl	pflabel0
   1483  1168				   .
   1484  1168							; 
   1485  1168
   1486  1168				   .
   1487  1168							; 
   1488  1168
   1489  1168				   .
   1490  1168							; 
   1491  1168
   1492  1168				   .
   1493  1168							; 
   1494  1168
   1495  1168				   .
   1496  1168							; 
   1497  1168
   1498  1168				   .
   1499  1168							; 
   1500  1168
   1501  1168				   .L094		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   1502  1168
   1503  1168		       a5 e0		      LDA	_Bit0_BW_Mem
   1504  116a		       29 fe		      AND	#254
   1505  116c		       85 e0		      STA	_Bit0_BW_Mem
   1506  116e		       a9 08		      lda	#8
   1507  1170		       2c 82 02 	      bit	SWCHB
   1508  1173		       d0 06		      BNE	.skipL094
   1509  1175				   .condpart4
   1510  1175		       a5 e0		      LDA	_Bit0_BW_Mem
   1511  1177		       09 01		      ORA	#1
   1512  1179		       85 e0		      STA	_Bit0_BW_Mem
   1513  117b				   .skipL094
   1514  117b				   .
   1515  117b							; 
   1516  117b
   1517  117b				   .
   1518  117b							; 
   1519  117b
   1520  117b				   .
   1521  117b							; 
   1522  117b
   1523  117b				   .
   1524  117b							; 
   1525  117b
   1526  117b				   .
   1527  117b							; 
   1528  117b
   1529  117b				   .
   1530  117b							; 
   1531  117b
   1532  117b				   .
   1533  117b							; 
   1534  117b
   1535  117b				   .
   1536  117b							; 
   1537  117b
   1538  117b				   .
   1539  117b							; 
   1540  117b
   1541  117b				   .L095		;  CTRLPF  =  $31
   1542  117b
   1543  117b		       a9 31		      LDA	#$31
   1544  117d		       85 0a		      STA	CTRLPF
   1545  117f				   .L096		;  ballheight	=  8
   1546  117f
   1547  117f		       a9 08		      LDA	#8
   1548  1181		       85 92		      STA	ballheight
   1549  1183				   .L097		;  _Bitop_Screen_Counter  =  0
   1550  1183
   1551  1183		       a9 00		      LDA	#0
   1552  1185		       85 df		      STA	_Bitop_Screen_Counter
   1553  1187				   .
   1554  1187							; 
   1555  1187
   1556  1187				   .__Main_Loop
   1557  1187							; __Main_Loop
   1558  1187
   1559  1187				   .
   1560  1187							; 
   1561  1187
   1562  1187				   .
   1563  1187							; 
   1564  1187
   1565  1187				   .
   1566  1187							; 
   1567  1187
   1568  1187				   .
   1569  1187							; 
   1570  1187
   1571  1187				   .
   1572  1187							; 
   1573  1187
   1574  1187				   .
   1575  1187							; 
   1576  1187
   1577  1187				   .
   1578  1187							; 
   1579  1187
   1580  1187				   .
   1581  1187							; 
   1582  1187
   1583  1187				   .
   1584  1187							; 
   1585  1187
   1586  1187				   .
   1587  1187							; 
   1588  1187
   1589  1187				   .
   1590  1187							; 
   1591  1187
   1592  1187				   .
   1593  1187							; 
   1594  1187
   1595  1187				   .L098		;  _Master_Counter  =	_Master_Counter  +  1
   1596  1187
   1597  1187		       e6 d4		      INC	_Master_Counter
   1598  1189				   .
   1599  1189							; 
   1600  1189
   1601  1189				   .
   1602  1189							; 
   1603  1189
   1604  1189				   .
   1605  1189							; 
   1606  1189
   1607  1189				   .
   1608  1189							; 
   1609  1189
   1610  1189				   .L099		;  if _Master_Counter	<  7 then goto __Skip_Counters
   1611  1189
   1612  1189		       a5 d4		      LDA	_Master_Counter
   1613  118b		       c9 07		      CMP	#7
   1614  118d		       b0 03		      BCS	.skipL099
   1615  118f				   .condpart5
   1616  118f		       4c a2 11 	      jmp	.__Skip_Counters
   1617  1192
   1618  1192				   .skipL099
   1619  1192				   .
   1620  1192							; 
   1621  1192
   1622  1192				   .
   1623  1192							; 
   1624  1192
   1625  1192				   .
   1626  1192							; 
   1627  1192
   1628  1192				   .
   1629  1192							; 
   1630  1192
   1631  1192				   .L0100		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   1632  1192
   1633  1192		       e6 d5		      INC	_Frame_Counter
   1634  1194		       a9 00		      LDA	#0
   1635  1196		       85 d4		      STA	_Master_Counter
   1636  1198				   .
   1637  1198							; 
   1638  1198
   1639  1198				   .
   1640  1198							; 
   1641  1198
   1642  1198				   .
   1643  1198							; 
   1644  1198
   1645  1198				   .
   1646  1198							; 
   1647  1198
   1648  1198				   .L0101		;  if _Frame_Counter  >  3 then _Frame_Counter  =  0
   1649  1198
   1650  1198		       a9 03		      LDA	#3
   1651  119a		       c5 d5		      CMP	_Frame_Counter
   1652  119c		       b0 04		      BCS	.skipL0101
   1653  119e				   .condpart6
   1654  119e		       a9 00		      LDA	#0
   1655  11a0		       85 d5		      STA	_Frame_Counter
   1656  11a2				   .skipL0101
   1657  11a2				   .
   1658  11a2							; 
   1659  11a2
   1660  11a2				   .
   1661  11a2							; 
   1662  11a2
   1663  11a2				   .__Skip_Counters
   1664  11a2							; __Skip_Counters
   1665  11a2
   1666  11a2				   .
   1667  11a2							; 
   1668  11a2
   1669  11a2				   .
   1670  11a2							; 
   1671  11a2
   1672  11a2				   .
   1673  11a2							; 
   1674  11a2
   1675  11a2				   .
   1676  11a2							; 
   1677  11a2
   1678  11a2				   .
   1679  11a2							; 
   1680  11a2
   1681  11a2				   .
   1682  11a2							; 
   1683  11a2
   1684  11a2				   .L0102		;  _Bitop_Coord_Counter  =  0	:  _Bitop_Screen_Counter  =  0
   1685  11a2
   1686  11a2		       a9 00		      LDA	#0
   1687  11a4		       85 e3		      STA	_Bitop_Coord_Counter
   1688  11a6		       85 df		      STA	_Bitop_Screen_Counter
   1689  11a8				   .
   1690  11a8							; 
   1691  11a8
   1692  11a8				   .
   1693  11a8							; 
   1694  11a8
   1695  11a8				   .
   1696  11a8							; 
   1697  11a8
   1698  11a8				   .
   1699  11a8							; 
   1700  11a8
   1701  11a8				   .
   1702  11a8							; 
   1703  11a8
   1704  11a8				   .
   1705  11a8							; 
   1706  11a8
   1707  11a8				   .__Puppet
   1708  11a8							; __Puppet
   1709  11a8
   1710  11a8				   .L0103		;  player1color:
   1711  11a8
   1712  11a8		       a2 88		      LDX	#<playercolorL0103_1
   1713  11aa		       86 87		      STX	player1color
   1714  11ac		       a9 f5		      LDA	#>playercolorL0103_1
   1715  11ae		       85 88		      STA	player1color+1
   1716  11b0				   .
   1717  11b0							; 
   1718  11b0
   1719  11b0				   .L0104		;  player1:
   1720  11b0
   1721  11b0		       a2 9f		      LDX	#<playerL0104_1
   1722  11b2		       86 8c		      STX	player1pointerlo
   1723  11b4		       a9 f5		      LDA	#>playerL0104_1
   1724  11b6		       85 8d		      STA	player1pointerhi
   1725  11b8		       a9 16		      LDA	#22
   1726  11ba		       85 8f		      STA	player1height
   1727  11bc				   .
   1728  11bc							; 
   1729  11bc
   1730  11bc				   .
   1731  11bc							; 
   1732  11bc
   1733  11bc				   .
   1734  11bc							; 
   1735  11bc
   1736  11bc				   .
   1737  11bc							; 
   1738  11bc
   1739  11bc				   .__Purple1
   1740  11bc							; __Purple1
   1741  11bc
   1742  11bc				   .L0105		;  player0color:
   1743  11bc
   1744  11bc		       a2 b6		      LDX	#<playercolorL0105_0
   1745  11be		       86 90		      STX	player0color
   1746  11c0		       a9 f5		      LDA	#>playercolorL0105_0
   1747  11c2		       85 91		      STA	player0color+1
   1748  11c4				   .L0106		;  on _Frame_Counter goto __PG00 __PG01 __PG02 __PG03
   1749  11c4
   1750  11c4		       a6 d5		      LDX	_Frame_Counter
   1751  11c6		       bd cf 11 	      LDA	.L0106jumptablehi,x
   1752  11c9		       48		      PHA
   1753  11ca		       bd d3 11 	      LDA	.L0106jumptablelo,x
   1754  11cd		       48		      PHA
   1755  11ce		       60		      RTS
   1756  11cf				   .L0106jumptablehi
   1757  11cf		       1a		      .byte.b	>(.__PG00-1)
   1758  11d0		       1a		      .byte.b	>(.__PG01-1)
   1759  11d1		       1a		      .byte.b	>(.__PG02-1)
   1760  11d2		       1a		      .byte.b	>(.__PG03-1)
   1761  11d3				   .L0106jumptablelo
   1762  11d3		       9e		      .byte.b	<(.__PG00-1)
   1763  11d4		       ad		      .byte.b	<(.__PG01-1)
   1764  11d5		       bc		      .byte.b	<(.__PG02-1)
   1765  11d6		       cf		      .byte.b	<(.__PG03-1)
   1766  11d7				   .
   1767  11d7							; 
   1768  11d7
   1769  11d7				   .__PG_Frame_Done
   1770  11d7							; __PG_Frame_Done
   1771  11d7
   1772  11d7				   .
   1773  11d7							; 
   1774  11d7
   1775  11d7				   .
   1776  11d7							; 
   1777  11d7
   1778  11d7				   .
   1779  11d7							; 
   1780  11d7
   1781  11d7				   .
   1782  11d7							; 
   1783  11d7
   1784  11d7				   .
   1785  11d7							; 
   1786  11d7
   1787  11d7				   .
   1788  11d7							; 
   1789  11d7
   1790  11d7				   .
   1791  11d7							; 
   1792  11d7
   1793  11d7				   .
   1794  11d7							; 
   1795  11d7
   1796  11d7				   .L0107		;  if _Bit4_Ball_Moving{4} then goto __Skip_FireB
   1797  11d7
   1798  11d7		       a5 ec		      LDA	_Bit4_Ball_Moving
   1799  11d9		       29 10		      AND	#16
   1800  11db		       f0 03		      BEQ	.skipL0107
   1801  11dd				   .condpart7
   1802  11dd		       4c 8e 12 	      jmp	.__Skip_FireB
   1803  11e0
   1804  11e0				   .skipL0107
   1805  11e0				   .
   1806  11e0							; 
   1807  11e0
   1808  11e0				   .
   1809  11e0							; 
   1810  11e0
   1811  11e0				   .
   1812  11e0							; 
   1813  11e0
   1814  11e0				   .
   1815  11e0							; 
   1816  11e0
   1817  11e0				   .L0108		;  _Bit4_Ball_Moving{4}  =  1
   1818  11e0
   1819  11e0		       a5 ec		      LDA	_Bit4_Ball_Moving
   1820  11e2		       09 10		      ORA	#16
   1821  11e4		       85 ec		      STA	_Bit4_Ball_Moving
   1822  11e6				   .
   1823  11e6							; 
   1824  11e6
   1825  11e6				   .
   1826  11e6							; 
   1827  11e6
   1828  11e6				   .
   1829  11e6							; 
   1830  11e6
   1831  11e6				   .
   1832  11e6							; 
   1833  11e6
   1834  11e6				   .
   1835  11e6							; 
   1836  11e6
   1837  11e6				   .L0109		;  _Bit4_Ball_Direction_Up{4}	=  _Bit0_Player1_Direction_Up{0}
   1838  11e6
   1839  11e6		       a5 de		      LDA	_Bit0_Player1_Direction_Up
   1840  11e8		       29 01		      AND	#1
   1841  11ea		       08		      PHP
   1842  11eb		       a5 de		      LDA	_Bit4_Ball_Direction_Up
   1843  11ed		       29 ef		      AND	#239
   1844  11ef		       28		      PLP
   1845  11f0		       f0 02		      .byte.b	$F0, $02
   1846  11f2		       09 10		      ORA	#16
   1847  11f4		       85 de		      STA	_Bit4_Ball_Direction_Up
   1848  11f6				   .L0110		;  _Bit5_Ball_Direction_Down{5}  =  _Bit1_Player1_Direction_Down{1}
   1849  11f6
   1850  11f6		       a5 de		      LDA	_Bit1_Player1_Direction_Down
   1851  11f8		       29 02		      AND	#2
   1852  11fa		       08		      PHP
   1853  11fb		       a5 de		      LDA	_Bit5_Ball_Direction_Down
   1854  11fd		       29 df		      AND	#223
   1855  11ff		       28		      PLP
   1856  1200		       f0 02		      .byte.b	$F0, $02
   1857  1202		       09 20		      ORA	#32
   1858  1204		       85 de		      STA	_Bit5_Ball_Direction_Down
   1859  1206				   .L0111		;  _Bit6_Ball_Direction_Left{6}  =  _Bit2_Player1_Direction_Left{2}
   1860  1206
   1861  1206		       a5 de		      LDA	_Bit2_Player1_Direction_Left
   1862  1208		       29 04		      AND	#4
   1863  120a		       08		      PHP
   1864  120b		       a5 de		      LDA	_Bit6_Ball_Direction_Left
   1865  120d		       29 bf		      AND	#191
   1866  120f		       28		      PLP
   1867  1210		       f0 02		      .byte.b	$F0, $02
   1868  1212		       09 40		      ORA	#64
   1869  1214		       85 de		      STA	_Bit6_Ball_Direction_Left
   1870  1216				   .L0112		;  _Bit7_Ball_Direction_Right{7}  =  _Bit3_Player1_Direction_Right{3}
   1871  1216
   1872  1216		       a5 de		      LDA	_Bit3_Player1_Direction_Right
   1873  1218		       29 08		      AND	#8
   1874  121a		       08		      PHP
   1875  121b		       a5 de		      LDA	_Bit7_Ball_Direction_Right
   1876  121d		       29 7f		      AND	#127
   1877  121f		       28		      PLP
   1878  1220		       f0 02		      .byte.b	$F0, $02
   1879  1222		       09 80		      ORA	#128
   1880  1224		       85 de		      STA	_Bit7_Ball_Direction_Right
   1881  1226				   .
   1882  1226							; 
   1883  1226
   1884  1226				   .
   1885  1226							; 
   1886  1226
   1887  1226				   .__FireB_Check
   1888  1226							; __FireB_Check
   1889  1226
   1890  1226				   .
   1891  1226							; 
   1892  1226
   1893  1226				   .
   1894  1226							; 
   1895  1226
   1896  1226				   .
   1897  1226							; 
   1898  1226
   1899  1226				   .
   1900  1226							; 
   1901  1226
   1902  1226				   .
   1903  1226							; 
   1904  1226
   1905  1226				   .L0113		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Skip_FireB
   1906  1226
   1907  1226		       24 0c		      bit	INPT4
   1908  1228		       10 09		      BPL	.skipL0113
   1909  122a				   .condpart8
   1910  122a		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   1911  122c		       29 fd		      AND	#253
   1912  122e		       85 ec		      STA	_Bit1_FireB_Restrainer
   1913  1230		       4c 8e 12 	      jmp	.__Skip_FireB
   1914  1233
   1915  1233				   .skipL0113
   1916  1233				   .
   1917  1233							; 
   1918  1233
   1919  1233				   .
   1920  1233							; 
   1921  1233
   1922  1233				   .
   1923  1233							; 
   1924  1233
   1925  1233				   .
   1926  1233							; 
   1927  1233
   1928  1233				   .
   1929  1233							; 
   1930  1233
   1931  1233				   .
   1932  1233							; 
   1933  1233
   1934  1233				   .L0114		;  if _Bit1_FireB_Restrainer{1} then goto __Skip_FireB
   1935  1233
   1936  1233		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   1937  1235		       29 02		      AND	#2
   1938  1237		       f0 03		      BEQ	.skipL0114
   1939  1239				   .condpart9
   1940  1239		       4c 8e 12 	      jmp	.__Skip_FireB
   1941  123c
   1942  123c				   .skipL0114
   1943  123c				   .
   1944  123c							; 
   1945  123c
   1946  123c				   .
   1947  123c							; 
   1948  123c
   1949  123c				   .
   1950  123c							; 
   1951  123c
   1952  123c				   .L0115		;  _Bit1_FireB_Restrainer{1}  =  1
   1953  123c
   1954  123c		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   1955  123e		       09 02		      ORA	#2
   1956  1240		       85 ec		      STA	_Bit1_FireB_Restrainer
   1957  1242				   .
   1958  1242							; 
   1959  1242
   1960  1242				   .
   1961  1242							; 
   1962  1242
   1963  1242				   .
   1964  1242							; 
   1965  1242
   1966  1242				   .
   1967  1242							; 
   1968  1242
   1969  1242				   .
   1970  1242							; 
   1971  1242
   1972  1242				   .L0116		;  if _Bit4_Ball_Direction_Up{4} then ballx  =  PuppetX  +  4	:  bally  =  PuppetY  -  5
   1973  1242
   1974  1242		       a5 de		      LDA	_Bit4_Ball_Direction_Up
   1975  1244		       29 10		      AND	#16
   1976  1246		       f0 0e		      BEQ	.skipL0116
   1977  1248				   .condpart10
   1978  1248		       a5 81		      LDA	PuppetX
   1979  124a		       18		      CLC
   1980  124b		       69 04		      ADC	#4
   1981  124d		       85 84		      STA	ballx
   1982  124f		       a5 86		      LDA	PuppetY
   1983  1251		       38		      SEC
   1984  1252		       e9 05		      SBC	#5
   1985  1254		       85 89		      STA	bally
   1986  1256				   .skipL0116
   1987  1256				   .L0117		;  if _Bit5_Ball_Direction_Down{5} then ballx	=  PuppetX  +  4  :  bally  =  PuppetY	-  1
   1988  1256
   1989  1256		       a5 de		      LDA	_Bit5_Ball_Direction_Down
   1990  1258		       29 20		      AND	#32
   1991  125a		       f0 0e		      BEQ	.skipL0117
   1992  125c				   .condpart11
   1993  125c		       a5 81		      LDA	PuppetX
   1994  125e		       18		      CLC
   1995  125f		       69 04		      ADC	#4
   1996  1261		       85 84		      STA	ballx
   1997  1263		       a5 86		      LDA	PuppetY
   1998  1265		       38		      SEC
   1999  1266		       e9 01		      SBC	#1
   2000  1268		       85 89		      STA	bally
   2001  126a				   .skipL0117
   2002  126a				   .L0118		;  if _Bit6_Ball_Direction_Left{6} then ballx	=  PuppetX  +  2  :  bally  =  PuppetY	-  3
   2003  126a
   2004  126a		       24 de		      BIT	_Bit6_Ball_Direction_Left
   2005  126c		       50 0e		      BVC	.skipL0118
   2006  126e				   .condpart12
   2007  126e		       a5 81		      LDA	PuppetX
   2008  1270		       18		      CLC
   2009  1271		       69 02		      ADC	#2
   2010  1273		       85 84		      STA	ballx
   2011  1275		       a5 86		      LDA	PuppetY
   2012  1277		       38		      SEC
   2013  1278		       e9 03		      SBC	#3
   2014  127a		       85 89		      STA	bally
   2015  127c				   .skipL0118
   2016  127c				   .L0119		;  if _Bit7_Ball_Direction_Right{7} then ballx  =  PuppetX  +	6  :  bally  =	PuppetY  -  3
   2017  127c
   2018  127c		       24 de		      BIT	_Bit7_Ball_Direction_Right
   2019  127e		       10 0e		      BPL	.skipL0119
   2020  1280				   .condpart13
   2021  1280		       a5 81		      LDA	PuppetX
   2022  1282		       18		      CLC
   2023  1283		       69 06		      ADC	#6
   2024  1285		       85 84		      STA	ballx
   2025  1287		       a5 86		      LDA	PuppetY
   2026  1289		       38		      SEC
   2027  128a		       e9 03		      SBC	#3
   2028  128c		       85 89		      STA	bally
   2029  128e				   .skipL0119
   2030  128e				   .
   2031  128e							; 
   2032  128e
   2033  128e				   .__Skip_FireB
   2034  128e							; __Skip_FireB
   2035  128e
   2036  128e				   .
   2037  128e							; 
   2038  128e
   2039  128e				   .
   2040  128e							; 
   2041  128e
   2042  128e				   .
   2043  128e							; 
   2044  128e
   2045  128e				   .
   2046  128e							; 
   2047  128e
   2048  128e				   .
   2049  128e							; 
   2050  128e
   2051  128e				   .
   2052  128e							; 
   2053  128e
   2054  128e				   .
   2055  128e							; 
   2056  128e
   2057  128e				   .
   2058  128e							; 
   2059  128e
   2060  128e				   .L0120		;  if !_Bit4_Ball_Moving{4} then goto __Skip_Ball
   2061  128e
   2062  128e		       a5 ec		      LDA	_Bit4_Ball_Moving
   2063  1290		       29 10		      AND	#16
   2064  1292		       d0 03		      BNE	.skipL0120
   2065  1294				   .condpart14
   2066  1294		       4c 01 13 	      jmp	.__Skip_Ball
   2067  1297
   2068  1297				   .skipL0120
   2069  1297				   .
   2070  1297							; 
   2071  1297
   2072  1297				   .
   2073  1297							; 
   2074  1297
   2075  1297				   .
   2076  1297							; 
   2077  1297
   2078  1297				   .
   2079  1297							; 
   2080  1297
   2081  1297				   .L0121		;  if _Bit4_Ball_Direction_Up{4} then bally  =  bally	-  8
   2082  1297
   2083  1297		       a5 de		      LDA	_Bit4_Ball_Direction_Up
   2084  1299		       29 10		      AND	#16
   2085  129b		       f0 07		      BEQ	.skipL0121
   2086  129d				   .condpart15
   2087  129d		       a5 89		      LDA	bally
   2088  129f		       38		      SEC
   2089  12a0		       e9 08		      SBC	#8
   2090  12a2		       85 89		      STA	bally
   2091  12a4				   .skipL0121
   2092  12a4				   .L0122		;  if _Bit5_Ball_Direction_Down{5} then bally	=  bally  +  8
   2093  12a4
   2094  12a4		       a5 de		      LDA	_Bit5_Ball_Direction_Down
   2095  12a6		       29 20		      AND	#32
   2096  12a8		       f0 07		      BEQ	.skipL0122
   2097  12aa				   .condpart16
   2098  12aa		       a5 89		      LDA	bally
   2099  12ac		       18		      CLC
   2100  12ad		       69 08		      ADC	#8
   2101  12af		       85 89		      STA	bally
   2102  12b1				   .skipL0122
   2103  12b1				   .L0123		;  if _Bit6_Ball_Direction_Left{6} then ballx	=  ballx  -  8
   2104  12b1
   2105  12b1		       24 de		      BIT	_Bit6_Ball_Direction_Left
   2106  12b3		       50 07		      BVC	.skipL0123
   2107  12b5				   .condpart17
   2108  12b5		       a5 84		      LDA	ballx
   2109  12b7		       38		      SEC
   2110  12b8		       e9 08		      SBC	#8
   2111  12ba		       85 84		      STA	ballx
   2112  12bc				   .skipL0123
   2113  12bc				   .L0124		;  if _Bit7_Ball_Direction_Right{7} then ballx  =  ballx  +  8
   2114  12bc
   2115  12bc		       24 de		      BIT	_Bit7_Ball_Direction_Right
   2116  12be		       10 07		      BPL	.skipL0124
   2117  12c0				   .condpart18
   2118  12c0		       a5 84		      LDA	ballx
   2119  12c2		       18		      CLC
   2120  12c3		       69 08		      ADC	#8
   2121  12c5		       85 84		      STA	ballx
   2122  12c7				   .skipL0124
   2123  12c7				   .
   2124  12c7							; 
   2125  12c7
   2126  12c7				   .
   2127  12c7							; 
   2128  12c7
   2129  12c7				   .
   2130  12c7							; 
   2131  12c7
   2132  12c7				   .
   2133  12c7							; 
   2134  12c7
   2135  12c7				   .L0125		;  if bally  <  _M_Edge_Top then goto __Delete_Ball
   2136  12c7
   2137  12c7		       a5 89		      LDA	bally
   2138  12c9		       c9 02		      CMP	#_M_Edge_Top
   2139  12cb		       b0 03		      BCS	.skipL0125
   2140  12cd				   .condpart19
   2141  12cd		       4c f5 12 	      jmp	.__Delete_Ball
   2142  12d0
   2143  12d0				   .skipL0125
   2144  12d0				   .L0126		;  if bally  >  _M_Edge_Bottom then goto __Delete_Ball
   2145  12d0
   2146  12d0		       a9 58		      LDA	#_M_Edge_Bottom
   2147  12d2		       c5 89		      CMP	bally
   2148  12d4		       b0 03		      BCS	.skipL0126
   2149  12d6				   .condpart20
   2150  12d6		       4c f5 12 	      jmp	.__Delete_Ball
   2151  12d9
   2152  12d9				   .skipL0126
   2153  12d9				   .L0127		;  if ballx  <  _M_Edge_Left then goto __Delete_Ball
   2154  12d9
   2155  12d9		       a5 84		      LDA	ballx
   2156  12db		       c9 02		      CMP	#_M_Edge_Left
   2157  12dd		       b0 03		      BCS	.skipL0127
   2158  12df				   .condpart21
   2159  12df		       4c f5 12 	      jmp	.__Delete_Ball
   2160  12e2
   2161  12e2				   .skipL0127
   2162  12e2				   .L0128		;  if ballx  >  _M_Edge_Right then goto __Delete_Ball
   2163  12e2
   2164  12e2		       a9 9f		      LDA	#_M_Edge_Right
   2165  12e4		       c5 84		      CMP	ballx
   2166  12e6		       b0 03		      BCS	.skipL0128
   2167  12e8				   .condpart22
   2168  12e8		       4c f5 12 	      jmp	.__Delete_Ball
   2169  12eb
   2170  12eb				   .skipL0128
   2171  12eb				   .
   2172  12eb							; 
   2173  12eb
   2174  12eb				   .
   2175  12eb							; 
   2176  12eb
   2177  12eb				   .
   2178  12eb							; 
   2179  12eb
   2180  12eb				   .
   2181  12eb							; 
   2182  12eb
   2183  12eb				   .L0129		;  if collision(playfield,ball) then goto __Delete_Ball
   2184  12eb
   2185  12eb		       24 06		      bit	CXBLPF
   2186  12ed		       10 03		      BPL	.skipL0129
   2187  12ef				   .condpart23
   2188  12ef		       4c f5 12 	      jmp	.__Delete_Ball
   2189  12f2
   2190  12f2				   .skipL0129
   2191  12f2				   .
   2192  12f2							; 
   2193  12f2
   2194  12f2				   .L0130		;  goto __Skip_Ball
   2195  12f2
   2196  12f2		       4c 01 13 	      jmp	.__Skip_Ball
   2197  12f5
   2198  12f5				   .
   2199  12f5							; 
   2200  12f5
   2201  12f5				   .__Delete_Ball
   2202  12f5							; __Delete_Ball
   2203  12f5
   2204  12f5				   .
   2205  12f5							; 
   2206  12f5
   2207  12f5				   .
   2208  12f5							; 
   2209  12f5
   2210  12f5				   .
   2211  12f5							; 
   2212  12f5
   2213  12f5				   .
   2214  12f5							; 
   2215  12f5
   2216  12f5				   .L0131		;  _Bit4_Ball_Moving{4}  =  0	:  ballx  =  200  :  bally  =  200
   2217  12f5
   2218  12f5		       a5 ec		      LDA	_Bit4_Ball_Moving
   2219  12f7		       29 ef		      AND	#239
   2220  12f9		       85 ec		      STA	_Bit4_Ball_Moving
   2221  12fb		       a9 c8		      LDA	#200
   2222  12fd		       85 84		      STA	ballx
   2223  12ff		       85 89		      STA	bally
   2224  1301				   .
   2225  1301							; 
   2226  1301
   2227  1301				   .__Skip_Ball
   2228  1301							; __Skip_Ball
   2229  1301
   2230  1301				   .
   2231  1301							; 
   2232  1301
   2233  1301				   .
   2234  1301							; 
   2235  1301
   2236  1301				   .
   2237  1301							; 
   2238  1301
   2239  1301				   .
   2240  1301							; 
   2241  1301
   2242  1301				   .
   2243  1301							; 
   2244  1301
   2245  1301				   .
   2246  1301							; 
   2247  1301
   2248  1301				   .
   2249  1301							; 
   2250  1301
   2251  1301				   .
   2252  1301							; 
   2253  1301
   2254  1301				   .L0132		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   2255  1301
   2256  1301		       a9 10		      lda	#$10
   2257  1303		       2c 80 02 	      bit	SWCHA
   2258  1306		       f0 14		      BEQ	.skipL0132
   2259  1308				   .condpart24
   2260  1308		       a9 20		      lda	#$20
   2261  130a		       2c 80 02 	      bit	SWCHA
   2262  130d		       f0 0d		      BEQ	.skip24then
   2263  130f				   .condpart25
   2264  130f		       2c 80 02 	      bit	SWCHA
   2265  1312		       50 08		      BVC	.skip25then
   2266  1314				   .condpart26
   2267  1314		       2c 80 02 	      bit	SWCHA
   2268  1317		       10 03		      BPL	.skip26then
   2269  1319				   .condpart27
   2270  1319		       4c 22 13 	      jmp	.__Skip_Joystick_Precheck
   2271  131c
   2272  131c				   .skip26then
   2273  131c				   .skip25then
   2274  131c				   .skip24then
   2275  131c				   .skipL0132
   2276  131c				   .
   2277  131c							; 
   2278  131c
   2279  131c				   .
   2280  131c							; 
   2281  131c
   2282  131c				   .
   2283  131c							; 
   2284  131c
   2285  131c				   .
   2286  131c							; 
   2287  131c
   2288  131c				   .L0133		;  _BitOp_P1_M0_Direction  =  _BitOp_P1_M0_Direction  &  %11110000
   2289  131c
   2290  131c		       a5 de		      LDA	_BitOp_P1_M0_Direction
   2291  131e		       29 f0		      AND	#%11110000
   2292  1320		       85 de		      STA	_BitOp_P1_M0_Direction
   2293  1322				   .
   2294  1322							; 
   2295  1322
   2296  1322				   .__Skip_Joystick_Precheck
   2297  1322							; __Skip_Joystick_Precheck
   2298  1322
   2299  1322				   .
   2300  1322							; 
   2301  1322
   2302  1322				   .
   2303  1322							; 
   2304  1322
   2305  1322				   .
   2306  1322							; 
   2307  1322
   2308  1322				   .
   2309  1322							; 
   2310  1322
   2311  1322				   .
   2312  1322							; 
   2313  1322
   2314  1322				   .
   2315  1322							; 
   2316  1322
   2317  1322				   .
   2318  1322							; 
   2319  1322
   2320  1322				   .
   2321  1322							; 
   2322  1322
   2323  1322				   .L0134		;  if !joy0up then goto __Skip_Joy0_Up
   2324  1322
   2325  1322		       a9 10		      lda	#$10
   2326  1324		       2c 80 02 	      bit	SWCHA
   2327  1327		       f0 03		      BEQ	.skipL0134
   2328  1329				   .condpart28
   2329  1329		       4c db 13 	      jmp	.__Skip_Joy0_Up
   2330  132c
   2331  132c				   .skipL0134
   2332  132c				   .L0135		;  gosub _P_U bank3
   2333  132c
   2334  132c		       85 ee		      sta	temp7
   2335  132e		       a9 13		      lda	#>(ret_point3-1)
   2336  1330		       48		      pha
   2337  1331		       a9 43		      lda	#<(ret_point3-1)
   2338  1333		       48		      pha
   2339  1334		       a9 4f		      lda	#>(._P_U-1)
   2340  1336		       48		      pha
   2341  1337		       a9 ff		      lda	#<(._P_U-1)
   2342  1339		       48		      pha
   2343  133a		       a5 ee		      lda	temp7
   2344  133c		       48		      pha
   2345  133d		       8a		      txa
   2346  133e		       48		      pha
   2347  133f		       a2 03		      ldx	#3
   2348  1341		       4c eb ff 	      jmp	BS_jsr
   2349  1344				   ret_point3
   2350  1344				   .
   2351  1344							; 
   2352  1344
   2353  1344				   .
   2354  1344							; 
   2355  1344
   2356  1344				   .
   2357  1344							; 
   2358  1344
   2359  1344				   .L0136		;  _Bit0_Player1_Direction_Up{0}  =  1
   2360  1344
   2361  1344		       a5 de		      LDA	_Bit0_Player1_Direction_Up
   2362  1346		       09 01		      ORA	#1
   2363  1348		       85 de		      STA	_Bit0_Player1_Direction_Up
   2364  134a				   .
   2365  134a							; 
   2366  134a
   2367  134a				   .
   2368  134a							; 
   2369  134a
   2370  134a				   .
   2371  134a							; 
   2372  134a
   2373  134a				   .L0137		;  _MyTemp01  =   (  ( PuppetX - 15 )	/ 4 ) 
   2374  134a
   2375  134a							; complex statement detected
   2376  134a		       a5 81		      LDA	PuppetX
   2377  134c		       38		      SEC
   2378  134d		       e9 0f		      SBC	#15
   2379  134f		       4a		      lsr
   2380  1350		       4a		      lsr
   2381  1351		       85 e5		      STA	_MyTemp01
   2382  1353				   .
   2383  1353							; 
   2384  1353
   2385  1353				   .
   2386  1353							; 
   2387  1353
   2388  1353				   .
   2389  1353							; 
   2390  1353
   2391  1353				   .
   2392  1353							; 
   2393  1353
   2394  1353				   .L0138		;  temp5  =   (  (  ( PuppetX )  - 15 )  / 4 )  + 1
   2395  1353
   2396  1353							; complex statement detected
   2397  1353		       a5 81		      LDA	PuppetX
   2398  1355		       38		      SEC
   2399  1356		       e9 0f		      SBC	#15
   2400  1358		       4a		      lsr
   2401  1359		       4a		      lsr
   2402  135a		       18		      CLC
   2403  135b		       69 01		      ADC	#1
   2404  135d		       85 a0		      STA	temp5
   2405  135f				   .
   2406  135f							; 
   2407  135f
   2408  135f				   .
   2409  135f							; 
   2410  135f
   2411  135f				   .
   2412  135f							; 
   2413  135f
   2414  135f				   .
   2415  135f							; 
   2416  135f
   2417  135f				   .L0139		;  temp6  =   (  (  ( PuppetY + 6 )  - player1height )  / 8 )	- 1
   2418  135f
   2419  135f							; complex statement detected
   2420  135f		       a5 86		      LDA	PuppetY
   2421  1361		       18		      CLC
   2422  1362		       69 06		      ADC	#6
   2423  1364		       38		      SEC
   2424  1365		       e5 8f		      SBC	player1height
   2425  1367		       4a		      lsr
   2426  1368		       4a		      lsr
   2427  1369		       4a		      lsr
   2428  136a		       38		      SEC
   2429  136b		       e9 01		      SBC	#1
   2430  136d		       85 a1		      STA	temp6
   2431  136f				   .
   2432  136f							; 
   2433  136f
   2434  136f				   .
   2435  136f							; 
   2436  136f
   2437  136f				   .
   2438  136f							; 
   2439  136f
   2440  136f				   .
   2441  136f							; 
   2442  136f
   2443  136f				   .L0140		;  _MyTemp02  =  temp5
   2444  136f
   2445  136f		       a5 a0		      LDA	temp5
   2446  1371		       85 e4		      STA	_MyTemp02
   2447  1373				   .
   2448  1373							; 
   2449  1373
   2450  1373				   .
   2451  1373							; 
   2452  1373
   2453  1373				   .
   2454  1373							; 
   2455  1373
   2456  1373				   .
   2457  1373							; 
   2458  1373
   2459  1373				   .
   2460  1373							; 
   2461  1373
   2462  1373				   .L0141		;  for _MyTemp03  =  _MyTemp01 to temp5
   2463  1373
   2464  1373		       a5 e5		      LDA	_MyTemp01
   2465  1375		       85 e2		      STA	_MyTemp03
   2466  1377				   .L0141for_MyTemp03
   2467  1377				   .
   2468  1377							; 
   2469  1377
   2470  1377				   .L0142		;  if pfread ( _MyTemp02 , temp6 )  then goto __Skip_Joy0_Up
   2471  1377
   2472  1377		       a5 e4		      LDA	_MyTemp02
   2473  1379		       a4 a1		      LDY	temp6
   2474  137b		       85 ee		      sta	temp7
   2475  137d		       a9 13		      lda	#>(ret_point4-1)
   2476  137f		       48		      pha
   2477  1380		       a9 92		      lda	#<(ret_point4-1)
   2478  1382		       48		      pha
   2479  1383		       a9 f2		      lda	#>(pfread-1)
   2480  1385		       48		      pha
   2481  1386		       a9 ab		      lda	#<(pfread-1)
   2482  1388		       48		      pha
   2483  1389		       a5 ee		      lda	temp7
   2484  138b		       48		      pha
   2485  138c		       8a		      txa
   2486  138d		       48		      pha
   2487  138e		       a2 08		      ldx	#8
   2488  1390		       4c eb ff 	      jmp	BS_jsr
   2489  1393				   ret_point4
   2490  1393		       d0 03		      BNE	.skipL0142
   2491  1395				   .condpart29
   2492  1395		       4c db 13 	      jmp	.__Skip_Joy0_Up
   2493  1398
   2494  1398				   .skipL0142
   2495  1398				   .
   2496  1398							; 
   2497  1398
   2498  1398				   .L0143		;  _MyTemp02  =  _MyTemp02  -	1
   2499  1398
   2500  1398		       c6 e4		      DEC	_MyTemp02
   2501  139a				   .
   2502  139a							; 
   2503  139a
   2504  139a				   .L0144		;  next
   2505  139a
   2506  139a		       a5 e2		      LDA	_MyTemp03
   2507  139c		       c5 a0		      CMP	temp5
   2508  139e
   2509  139e		       e6 e2		      INC	_MyTemp03
   2510  13a0					      if	((* - .L0141for_MyTemp03) < 127) && ((* - .L0141for_MyTemp03) > -128)
   2511  13a0		       90 d5		      bcc	.L0141for_MyTemp03
   2512  13a2				  -	      else
   2513  13a2				  -	      bcs	.0skipL0141for_MyTemp03
   2514  13a2				  -	      jmp	.L0141for_MyTemp03
   2515  13a2				  -.0skipL0141for_MyTemp03
   2516  13a2					      endif
   2517  13a2				   .
   2518  13a2							; 
   2519  13a2
   2520  13a2				   .
   2521  13a2							; 
   2522  13a2
   2523  13a2				   .
   2524  13a2							; 
   2525  13a2
   2526  13a2				   .L0145		;  PuppetY  =	PuppetY  -  1  :  pfscroll downdown
   2527  13a2
   2528  13a2		       c6 86		      DEC	PuppetY
   2529  13a4		       a9 08		      LDA	#8
   2530  13a6		       85 ee		      sta	temp7
   2531  13a8		       a9 13		      lda	#>(ret_point5-1)
   2532  13aa		       48		      pha
   2533  13ab		       a9 bd		      lda	#<(ret_point5-1)
   2534  13ad		       48		      pha
   2535  13ae		       a9 f3		      lda	#>(pfscroll-1)
   2536  13b0		       48		      pha
   2537  13b1		       a9 63		      lda	#<(pfscroll-1)
   2538  13b3		       48		      pha
   2539  13b4		       a5 ee		      lda	temp7
   2540  13b6		       48		      pha
   2541  13b7		       8a		      txa
   2542  13b8		       48		      pha
   2543  13b9		       a2 08		      ldx	#8
   2544  13bb		       4c eb ff 	      jmp	BS_jsr
   2545  13be				   ret_point5
   2546  13be				   .
   2547  13be							; 
   2548  13be
   2549  13be				   .
   2550  13be							; 
   2551  13be
   2552  13be				   .
   2553  13be							; 
   2554  13be
   2555  13be				   .L0146		;  if !collision(playfield,player1) then goto __Skip_Joy0_Up
   2556  13be
   2557  13be		       24 03		      bit	CXP1FB
   2558  13c0		       30 03		      BMI	.skipL0146
   2559  13c2				   .condpart30
   2560  13c2		       4c db 13 	      jmp	.__Skip_Joy0_Up
   2561  13c5
   2562  13c5				   .skipL0146
   2563  13c5				   .
   2564  13c5							; 
   2565  13c5
   2566  13c5				   .
   2567  13c5							; 
   2568  13c5
   2569  13c5				   .
   2570  13c5							; 
   2571  13c5
   2572  13c5				   .
   2573  13c5							; 
   2574  13c5
   2575  13c5				   .L0147		;  _MyTemp02  =   ( _MyTemp01 * 4 )  + 16
   2576  13c5
   2577  13c5							; complex statement detected
   2578  13c5		       a5 e5		      LDA	_MyTemp01
   2579  13c7		       0a		      asl
   2580  13c8		       0a		      asl
   2581  13c9		       18		      CLC
   2582  13ca		       69 10		      ADC	#16
   2583  13cc		       85 e4		      STA	_MyTemp02
   2584  13ce				   .
   2585  13ce							; 
   2586  13ce
   2587  13ce				   .
   2588  13ce							; 
   2589  13ce
   2590  13ce				   .
   2591  13ce							; 
   2592  13ce
   2593  13ce				   .
   2594  13ce							; 
   2595  13ce
   2596  13ce				   .
   2597  13ce							; 
   2598  13ce
   2599  13ce				   .L0148		;  if PuppetX	>  _MyTemp02 then PuppetX  =  PuppetX  -  1  :	goto __Skip_Joy0_Up
   2600  13ce
   2601  13ce		       a5 e4		      LDA	_MyTemp02
   2602  13d0		       c5 81		      CMP	PuppetX
   2603  13d2		       b0 05		      BCS	.skipL0148
   2604  13d4				   .condpart31
   2605  13d4		       c6 81		      DEC	PuppetX
   2606  13d6		       4c db 13 	      jmp	.__Skip_Joy0_Up
   2607  13d9
   2608  13d9				   .skipL0148
   2609  13d9				   .
   2610  13d9							; 
   2611  13d9
   2612  13d9				   .
   2613  13d9							; 
   2614  13d9
   2615  13d9				   .
   2616  13d9							; 
   2617  13d9
   2618  13d9				   .
   2619  13d9							; 
   2620  13d9
   2621  13d9				   .
   2622  13d9							; 
   2623  13d9
   2624  13d9				   .L0149		;  PuppetX  =	PuppetX  +  1
   2625  13d9
   2626  13d9		       e6 81		      INC	PuppetX
   2627  13db				   .
   2628  13db							; 
   2629  13db
   2630  13db				   .__Skip_Joy0_Up
   2631  13db							; __Skip_Joy0_Up
   2632  13db
   2633  13db				   .
   2634  13db							; 
   2635  13db
   2636  13db				   .
   2637  13db							; 
   2638  13db
   2639  13db				   .
   2640  13db							; 
   2641  13db
   2642  13db				   .
   2643  13db							; 
   2644  13db
   2645  13db				   .
   2646  13db							; 
   2647  13db
   2648  13db				   .
   2649  13db							; 
   2650  13db
   2651  13db				   .
   2652  13db							; 
   2653  13db
   2654  13db				   .
   2655  13db							; 
   2656  13db
   2657  13db				   .L0150		;  if !joy0down then goto __Skip_Joy0_Down
   2658  13db
   2659  13db		       a9 20		      lda	#$20
   2660  13dd		       2c 80 02 	      bit	SWCHA
   2661  13e0		       f0 03		      BEQ	.skipL0150
   2662  13e2				   .condpart32
   2663  13e2		       4c 91 14 	      jmp	.__Skip_Joy0_Down
   2664  13e5
   2665  13e5				   .skipL0150
   2666  13e5				   .L0151		;  gosub _P_D bank4
   2667  13e5
   2668  13e5		       85 ee		      sta	temp7
   2669  13e7		       a9 13		      lda	#>(ret_point6-1)
   2670  13e9		       48		      pha
   2671  13ea		       a9 fc		      lda	#<(ret_point6-1)
   2672  13ec		       48		      pha
   2673  13ed		       a9 6f		      lda	#>(._P_D-1)
   2674  13ef		       48		      pha
   2675  13f0		       a9 ff		      lda	#<(._P_D-1)
   2676  13f2		       48		      pha
   2677  13f3		       a5 ee		      lda	temp7
   2678  13f5		       48		      pha
   2679  13f6		       8a		      txa
   2680  13f7		       48		      pha
   2681  13f8		       a2 04		      ldx	#4
   2682  13fa		       4c eb ff 	      jmp	BS_jsr
   2683  13fd				   ret_point6
   2684  13fd				   .
   2685  13fd							; 
   2686  13fd
   2687  13fd				   .
   2688  13fd							; 
   2689  13fd
   2690  13fd				   .
   2691  13fd							; 
   2692  13fd
   2693  13fd				   .L0152		;  _Bit1_Player1_Direction_Down{1}  =	1
   2694  13fd
   2695  13fd		       a5 de		      LDA	_Bit1_Player1_Direction_Down
   2696  13ff		       09 02		      ORA	#2
   2697  1401		       85 de		      STA	_Bit1_Player1_Direction_Down
   2698  1403				   .
   2699  1403							; 
   2700  1403
   2701  1403				   .
   2702  1403							; 
   2703  1403
   2704  1403				   .
   2705  1403							; 
   2706  1403
   2707  1403				   .
   2708  1403							; 
   2709  1403
   2710  1403				   .L0153		;  _MyTemp01  =   (  ( PuppetX - 15 )	/ 4 ) 
   2711  1403
   2712  1403							; complex statement detected
   2713  1403		       a5 81		      LDA	PuppetX
   2714  1405		       38		      SEC
   2715  1406		       e9 0f		      SBC	#15
   2716  1408		       4a		      lsr
   2717  1409		       4a		      lsr
   2718  140a		       85 e5		      STA	_MyTemp01
   2719  140c				   .
   2720  140c							; 
   2721  140c
   2722  140c				   .
   2723  140c							; 
   2724  140c
   2725  140c				   .
   2726  140c							; 
   2727  140c
   2728  140c				   .
   2729  140c							; 
   2730  140c
   2731  140c				   .L0154		;  temp5  =   (  (  ( PuppetX )  - 15 )  / 4 )  + 1
   2732  140c
   2733  140c							; complex statement detected
   2734  140c		       a5 81		      LDA	PuppetX
   2735  140e		       38		      SEC
   2736  140f		       e9 0f		      SBC	#15
   2737  1411		       4a		      lsr
   2738  1412		       4a		      lsr
   2739  1413		       18		      CLC
   2740  1414		       69 01		      ADC	#1
   2741  1416		       85 a0		      STA	temp5
   2742  1418				   .
   2743  1418							; 
   2744  1418
   2745  1418				   .
   2746  1418							; 
   2747  1418
   2748  1418				   .
   2749  1418							; 
   2750  1418
   2751  1418				   .
   2752  1418							; 
   2753  1418
   2754  1418				   .L0155		;  temp6  =   (  ( PuppetY - 7 )  / 8 )  + 1
   2755  1418
   2756  1418							; complex statement detected
   2757  1418		       a5 86		      LDA	PuppetY
   2758  141a		       38		      SEC
   2759  141b		       e9 07		      SBC	#7
   2760  141d		       4a		      lsr
   2761  141e		       4a		      lsr
   2762  141f		       4a		      lsr
   2763  1420		       18		      CLC
   2764  1421		       69 01		      ADC	#1
   2765  1423		       85 a1		      STA	temp6
   2766  1425				   .
   2767  1425							; 
   2768  1425
   2769  1425				   .
   2770  1425							; 
   2771  1425
   2772  1425				   .
   2773  1425							; 
   2774  1425
   2775  1425				   .
   2776  1425							; 
   2777  1425
   2778  1425				   .L0156		;  _MyTemp02  =  temp5
   2779  1425
   2780  1425		       a5 a0		      LDA	temp5
   2781  1427		       85 e4		      STA	_MyTemp02
   2782  1429				   .
   2783  1429							; 
   2784  1429
   2785  1429				   .
   2786  1429							; 
   2787  1429
   2788  1429				   .
   2789  1429							; 
   2790  1429
   2791  1429				   .
   2792  1429							; 
   2793  1429
   2794  1429				   .
   2795  1429							; 
   2796  1429
   2797  1429				   .L0157		;  for _MyTemp03  =  _MyTemp01 to temp5
   2798  1429
   2799  1429		       a5 e5		      LDA	_MyTemp01
   2800  142b		       85 e2		      STA	_MyTemp03
   2801  142d				   .L0157for_MyTemp03
   2802  142d				   .
   2803  142d							; 
   2804  142d
   2805  142d				   .L0158		;  if pfread ( _MyTemp02 , temp6 )  then goto __Skip_Joy0_Down
   2806  142d
   2807  142d		       a5 e4		      LDA	_MyTemp02
   2808  142f		       a4 a1		      LDY	temp6
   2809  1431		       85 ee		      sta	temp7
   2810  1433		       a9 14		      lda	#>(ret_point7-1)
   2811  1435		       48		      pha
   2812  1436		       a9 48		      lda	#<(ret_point7-1)
   2813  1438		       48		      pha
   2814  1439		       a9 f2		      lda	#>(pfread-1)
   2815  143b		       48		      pha
   2816  143c		       a9 ab		      lda	#<(pfread-1)
   2817  143e		       48		      pha
   2818  143f		       a5 ee		      lda	temp7
   2819  1441		       48		      pha
   2820  1442		       8a		      txa
   2821  1443		       48		      pha
   2822  1444		       a2 08		      ldx	#8
   2823  1446		       4c eb ff 	      jmp	BS_jsr
   2824  1449				   ret_point7
   2825  1449		       d0 03		      BNE	.skipL0158
   2826  144b				   .condpart33
   2827  144b		       4c 91 14 	      jmp	.__Skip_Joy0_Down
   2828  144e
   2829  144e				   .skipL0158
   2830  144e				   .
   2831  144e							; 
   2832  144e
   2833  144e				   .L0159		;  _MyTemp02  =  _MyTemp02  -	1
   2834  144e
   2835  144e		       c6 e4		      DEC	_MyTemp02
   2836  1450				   .
   2837  1450							; 
   2838  1450
   2839  1450				   .L0160		;  next
   2840  1450
   2841  1450		       a5 e2		      LDA	_MyTemp03
   2842  1452		       c5 a0		      CMP	temp5
   2843  1454
   2844  1454		       e6 e2		      INC	_MyTemp03
   2845  1456					      if	((* - .L0157for_MyTemp03) < 127) && ((* - .L0157for_MyTemp03) > -128)
   2846  1456		       90 d5		      bcc	.L0157for_MyTemp03
   2847  1458				  -	      else
   2848  1458				  -	      bcs	.1skipL0157for_MyTemp03
   2849  1458				  -	      jmp	.L0157for_MyTemp03
   2850  1458				  -.1skipL0157for_MyTemp03
   2851  1458					      endif
   2852  1458				   .
   2853  1458							; 
   2854  1458
   2855  1458				   .
   2856  1458							; 
   2857  1458
   2858  1458				   .
   2859  1458							; 
   2860  1458
   2861  1458				   .
   2862  1458							; 
   2863  1458
   2864  1458				   .L0161		;  PuppetY  =	PuppetY  +  1  :  pfscroll upup
   2865  1458
   2866  1458		       e6 86		      INC	PuppetY
   2867  145a		       a9 06		      LDA	#6
   2868  145c		       85 ee		      sta	temp7
   2869  145e		       a9 14		      lda	#>(ret_point8-1)
   2870  1460		       48		      pha
   2871  1461		       a9 73		      lda	#<(ret_point8-1)
   2872  1463		       48		      pha
   2873  1464		       a9 f3		      lda	#>(pfscroll-1)
   2874  1466		       48		      pha
   2875  1467		       a9 63		      lda	#<(pfscroll-1)
   2876  1469		       48		      pha
   2877  146a		       a5 ee		      lda	temp7
   2878  146c		       48		      pha
   2879  146d		       8a		      txa
   2880  146e		       48		      pha
   2881  146f		       a2 08		      ldx	#8
   2882  1471		       4c eb ff 	      jmp	BS_jsr
   2883  1474				   ret_point8
   2884  1474				   .
   2885  1474							; 
   2886  1474
   2887  1474				   .
   2888  1474							; 
   2889  1474
   2890  1474				   .
   2891  1474							; 
   2892  1474
   2893  1474				   .
   2894  1474							; 
   2895  1474
   2896  1474				   .L0162		;  if !collision(playfield,player1) then goto __Skip_Joy0_Down
   2897  1474
   2898  1474		       24 03		      bit	CXP1FB
   2899  1476		       30 03		      BMI	.skipL0162
   2900  1478				   .condpart34
   2901  1478		       4c 91 14 	      jmp	.__Skip_Joy0_Down
   2902  147b
   2903  147b				   .skipL0162
   2904  147b				   .
   2905  147b							; 
   2906  147b
   2907  147b				   .
   2908  147b							; 
   2909  147b
   2910  147b				   .
   2911  147b							; 
   2912  147b
   2913  147b				   .
   2914  147b							; 
   2915  147b
   2916  147b				   .L0163		;  _MyTemp02  =   ( _MyTemp01 * 4 )  + 16
   2917  147b
   2918  147b							; complex statement detected
   2919  147b		       a5 e5		      LDA	_MyTemp01
   2920  147d		       0a		      asl
   2921  147e		       0a		      asl
   2922  147f		       18		      CLC
   2923  1480		       69 10		      ADC	#16
   2924  1482		       85 e4		      STA	_MyTemp02
   2925  1484				   .
   2926  1484							; 
   2927  1484
   2928  1484				   .
   2929  1484							; 
   2930  1484
   2931  1484				   .
   2932  1484							; 
   2933  1484
   2934  1484				   .
   2935  1484							; 
   2936  1484
   2937  1484				   .
   2938  1484							; 
   2939  1484
   2940  1484				   .L0164		;  if PuppetX	>  _MyTemp02 then PuppetX  =  PuppetX  -  1  :	goto __Skip_Joy0_Down
   2941  1484
   2942  1484		       a5 e4		      LDA	_MyTemp02
   2943  1486		       c5 81		      CMP	PuppetX
   2944  1488		       b0 05		      BCS	.skipL0164
   2945  148a				   .condpart35
   2946  148a		       c6 81		      DEC	PuppetX
   2947  148c		       4c 91 14 	      jmp	.__Skip_Joy0_Down
   2948  148f
   2949  148f				   .skipL0164
   2950  148f				   .
   2951  148f							; 
   2952  148f
   2953  148f				   .
   2954  148f							; 
   2955  148f
   2956  148f				   .
   2957  148f							; 
   2958  148f
   2959  148f				   .
   2960  148f							; 
   2961  148f
   2962  148f				   .
   2963  148f							; 
   2964  148f
   2965  148f				   .L0165		;  PuppetX  =	PuppetX  +  1
   2966  148f
   2967  148f		       e6 81		      INC	PuppetX
   2968  1491				   .
   2969  1491							; 
   2970  1491
   2971  1491				   .__Skip_Joy0_Down
   2972  1491							; __Skip_Joy0_Down
   2973  1491
   2974  1491				   .
   2975  1491							; 
   2976  1491
   2977  1491				   .
   2978  1491							; 
   2979  1491
   2980  1491				   .
   2981  1491							; 
   2982  1491
   2983  1491				   .
   2984  1491							; 
   2985  1491
   2986  1491				   .
   2987  1491							; 
   2988  1491
   2989  1491				   .
   2990  1491							; 
   2991  1491
   2992  1491				   .
   2993  1491							; 
   2994  1491
   2995  1491				   .
   2996  1491							; 
   2997  1491
   2998  1491				   .L0166		;  if !joy0left then goto __Skip_Joy0_Left
   2999  1491
   3000  1491		       2c 80 02 	      bit	SWCHA
   3001  1494		       50 03		      BVC	.skipL0166
   3002  1496				   .condpart36
   3003  1496		       4c 9b 15 	      jmp	.__Skip_Joy0_Left
   3004  1499
   3005  1499				   .skipL0166
   3006  1499				   .L0167		;  gosub _P_L bank6
   3007  1499
   3008  1499		       85 ee		      sta	temp7
   3009  149b		       a9 14		      lda	#>(ret_point9-1)
   3010  149d		       48		      pha
   3011  149e		       a9 b0		      lda	#<(ret_point9-1)
   3012  14a0		       48		      pha
   3013  14a1		       a9 af		      lda	#>(._P_L-1)
   3014  14a3		       48		      pha
   3015  14a4		       a9 ff		      lda	#<(._P_L-1)
   3016  14a6		       48		      pha
   3017  14a7		       a5 ee		      lda	temp7
   3018  14a9		       48		      pha
   3019  14aa		       8a		      txa
   3020  14ab		       48		      pha
   3021  14ac		       a2 06		      ldx	#6
   3022  14ae		       4c eb ff 	      jmp	BS_jsr
   3023  14b1				   ret_point9
   3024  14b1				   .
   3025  14b1							; 
   3026  14b1
   3027  14b1				   .
   3028  14b1							; 
   3029  14b1
   3030  14b1				   .
   3031  14b1							; 
   3032  14b1
   3033  14b1				   .L0168		;  _Bit2_Player1_Direction_Left{2}  =	1
   3034  14b1
   3035  14b1		       a5 de		      LDA	_Bit2_Player1_Direction_Left
   3036  14b3		       09 04		      ORA	#4
   3037  14b5		       85 de		      STA	_Bit2_Player1_Direction_Left
   3038  14b7				   .
   3039  14b7							; 
   3040  14b7
   3041  14b7				   .
   3042  14b7							; 
   3043  14b7
   3044  14b7				   .
   3045  14b7							; 
   3046  14b7
   3047  14b7				   .
   3048  14b7							; 
   3049  14b7
   3050  14b7				   .
   3051  14b7							; 
   3052  14b7
   3053  14b7				   .L0169		;  temp5  =   (  ( PuppetX - 14 )  / 4 )  - 1
   3054  14b7
   3055  14b7							; complex statement detected
   3056  14b7		       a5 81		      LDA	PuppetX
   3057  14b9		       38		      SEC
   3058  14ba		       e9 0e		      SBC	#14
   3059  14bc		       4a		      lsr
   3060  14bd		       4a		      lsr
   3061  14be		       38		      SEC
   3062  14bf		       e9 01		      SBC	#1
   3063  14c1		       85 a0		      STA	temp5
   3064  14c3				   .
   3065  14c3							; 
   3066  14c3
   3067  14c3				   .
   3068  14c3							; 
   3069  14c3
   3070  14c3				   .
   3071  14c3							; 
   3072  14c3
   3073  14c3				   .
   3074  14c3							; 
   3075  14c3
   3076  14c3				   .L0170		;  temp6  =   ( PuppetY - 1 )	/ 8
   3077  14c3
   3078  14c3							; complex statement detected
   3079  14c3		       a5 86		      LDA	PuppetY
   3080  14c5		       38		      SEC
   3081  14c6		       e9 01		      SBC	#1
   3082  14c8		       4a		      lsr
   3083  14c9		       4a		      lsr
   3084  14ca		       4a		      lsr
   3085  14cb		       85 a1		      STA	temp6
   3086  14cd				   .
   3087  14cd							; 
   3088  14cd
   3089  14cd				   .
   3090  14cd							; 
   3091  14cd
   3092  14cd				   .
   3093  14cd							; 
   3094  14cd
   3095  14cd				   .
   3096  14cd							; 
   3097  14cd
   3098  14cd				   .L0171		;  _MyTemp01  =   (  ( PuppetY -  ( player1height + 1 )  )  )	/ 8
   3099  14cd
   3100  14cd							; complex statement detected
   3101  14cd		       a5 86		      LDA	PuppetY
   3102  14cf		       48		      PHA
   3103  14d0		       a5 8f		      LDA	player1height
   3104  14d2		       18		      CLC
   3105  14d3		       69 01		      ADC	#1
   3106  14d5		       a8		      TAY
   3107  14d6		       68		      PLA
   3108  14d7		       ba		      TSX
   3109  14d8		       94 00		      STY	$00,x
   3110  14da		       38		      SEC
   3111  14db		       f5 00		      SBC	$00,x
   3112  14dd		       4a		      lsr
   3113  14de		       4a		      lsr
   3114  14df		       4a		      lsr
   3115  14e0		       85 e5		      STA	_MyTemp01
   3116  14e2				   .L0172		;  _MyTemp02  =  temp6
   3117  14e2
   3118  14e2		       a5 a1		      LDA	temp6
   3119  14e4		       85 e4		      STA	_MyTemp02
   3120  14e6				   .
   3121  14e6							; 
   3122  14e6
   3123  14e6				   .
   3124  14e6							; 
   3125  14e6
   3126  14e6				   .
   3127  14e6							; 
   3128  14e6
   3129  14e6				   .
   3130  14e6							; 
   3131  14e6
   3132  14e6				   .
   3133  14e6							; 
   3134  14e6
   3135  14e6				   .L0173		;  for _MyTemp03  =  _MyTemp01 to temp6
   3136  14e6
   3137  14e6		       a5 e5		      LDA	_MyTemp01
   3138  14e8		       85 e2		      STA	_MyTemp03
   3139  14ea				   .L0173for_MyTemp03
   3140  14ea				   .
   3141  14ea							; 
   3142  14ea
   3143  14ea				   .L0174		;  if pfread ( temp5 , _MyTemp02 )  then goto __Skip_Joy0_Left
   3144  14ea
   3145  14ea		       a5 a0		      LDA	temp5
   3146  14ec		       a4 e4		      LDY	_MyTemp02
   3147  14ee		       85 ee		      sta	temp7
   3148  14f0		       a9 15		      lda	#>(ret_point10-1)
   3149  14f2		       48		      pha
   3150  14f3		       a9 05		      lda	#<(ret_point10-1)
   3151  14f5		       48		      pha
   3152  14f6		       a9 f2		      lda	#>(pfread-1)
   3153  14f8		       48		      pha
   3154  14f9		       a9 ab		      lda	#<(pfread-1)
   3155  14fb		       48		      pha
   3156  14fc		       a5 ee		      lda	temp7
   3157  14fe		       48		      pha
   3158  14ff		       8a		      txa
   3159  1500		       48		      pha
   3160  1501		       a2 08		      ldx	#8
   3161  1503		       4c eb ff 	      jmp	BS_jsr
   3162  1506				   ret_point10
   3163  1506		       d0 03		      BNE	.skipL0174
   3164  1508				   .condpart37
   3165  1508		       4c 9b 15 	      jmp	.__Skip_Joy0_Left
   3166  150b
   3167  150b				   .skipL0174
   3168  150b				   .
   3169  150b							; 
   3170  150b
   3171  150b				   .L0175		;  _MyTemp02  =  _MyTemp02  -	1
   3172  150b
   3173  150b		       c6 e4		      DEC	_MyTemp02
   3174  150d				   .
   3175  150d							; 
   3176  150d
   3177  150d				   .L0176		;  next
   3178  150d
   3179  150d		       a5 e2		      LDA	_MyTemp03
   3180  150f		       c5 a1		      CMP	temp6
   3181  1511
   3182  1511		       e6 e2		      INC	_MyTemp03
   3183  1513					      if	((* - .L0173for_MyTemp03) < 127) && ((* - .L0173for_MyTemp03) > -128)
   3184  1513		       90 d5		      bcc	.L0173for_MyTemp03
   3185  1515				  -	      else
   3186  1515				  -	      bcs	.2skipL0173for_MyTemp03
   3187  1515				  -	      jmp	.L0173for_MyTemp03
   3188  1515				  -.2skipL0173for_MyTemp03
   3189  1515					      endif
   3190  1515				   .
   3191  1515							; 
   3192  1515
   3193  1515				   .
   3194  1515							; 
   3195  1515
   3196  1515				   .
   3197  1515							; 
   3198  1515
   3199  1515				   .
   3200  1515							; 
   3201  1515
   3202  1515				   .L0177		;  PuppetX  =	PuppetX  -  1  :  pfscroll right
   3203  1515
   3204  1515		       c6 81		      DEC	PuppetX
   3205  1517		       a9 01		      LDA	#1
   3206  1519		       85 ee		      sta	temp7
   3207  151b		       a9 15		      lda	#>(ret_point11-1)
   3208  151d		       48		      pha
   3209  151e		       a9 30		      lda	#<(ret_point11-1)
   3210  1520		       48		      pha
   3211  1521		       a9 f3		      lda	#>(pfscroll-1)
   3212  1523		       48		      pha
   3213  1524		       a9 63		      lda	#<(pfscroll-1)
   3214  1526		       48		      pha
   3215  1527		       a5 ee		      lda	temp7
   3216  1529		       48		      pha
   3217  152a		       8a		      txa
   3218  152b		       48		      pha
   3219  152c		       a2 08		      ldx	#8
   3220  152e		       4c eb ff 	      jmp	BS_jsr
   3221  1531				   ret_point11
   3222  1531				   .
   3223  1531							; 
   3224  1531
   3225  1531				   .
   3226  1531							; 
   3227  1531
   3228  1531				   .
   3229  1531							; 
   3230  1531
   3231  1531				   .
   3232  1531							; 
   3233  1531
   3234  1531				   .L0178		;  if joy0up  ||  joy0down then goto __Skip_Joy0_Left
   3235  1531
   3236  1531		       a9 10		      lda	#$10
   3237  1533		       2c 80 02 	      bit	SWCHA
   3238  1536		       d0 03		      BNE	.skipL0178
   3239  1538				   .condpart38
   3240  1538		       4c 42 15 	      jmp	.condpart39
   3241  153b				   .skipL0178
   3242  153b		       a9 20		      lda	#$20
   3243  153d		       2c 80 02 	      bit	SWCHA
   3244  1540		       d0 03		      BNE	.skip4OR
   3245  1542				   .condpart39
   3246  1542		       4c 9b 15 	      jmp	.__Skip_Joy0_Left
   3247  1545
   3248  1545				   .skip4OR
   3249  1545				   .
   3250  1545							; 
   3251  1545
   3252  1545				   .
   3253  1545							; 
   3254  1545
   3255  1545				   .
   3256  1545							; 
   3257  1545
   3258  1545				   .
   3259  1545							; 
   3260  1545
   3261  1545				   .L0179		;  if !collision(playfield,player1) then goto __Skip_Joy0_Left
   3262  1545
   3263  1545		       24 03		      bit	CXP1FB
   3264  1547		       30 03		      BMI	.skipL0179
   3265  1549				   .condpart40
   3266  1549		       4c 9b 15 	      jmp	.__Skip_Joy0_Left
   3267  154c
   3268  154c				   .skipL0179
   3269  154c				   .
   3270  154c							; 
   3271  154c
   3272  154c				   .
   3273  154c							; 
   3274  154c
   3275  154c				   .
   3276  154c							; 
   3277  154c
   3278  154c				   .L0180		;  _MyTemp02  =   ( temp6  *  8 )   +	8
   3279  154c
   3280  154c							; complex statement detected
   3281  154c		       a5 a1		      LDA	temp6
   3282  154e		       0a		      asl
   3283  154f		       0a		      asl
   3284  1550		       0a		      asl
   3285  1551		       18		      CLC
   3286  1552		       69 08		      ADC	#8
   3287  1554		       85 e4		      STA	_MyTemp02
   3288  1556				   .
   3289  1556							; 
   3290  1556
   3291  1556				   .
   3292  1556							; 
   3293  1556
   3294  1556				   .
   3295  1556							; 
   3296  1556
   3297  1556				   .
   3298  1556							; 
   3299  1556
   3300  1556				   .
   3301  1556							; 
   3302  1556
   3303  1556				   .L0181		;  if PuppetY	>  _MyTemp02 then goto __Left_Move_Down
   3304  1556
   3305  1556		       a5 e4		      LDA	_MyTemp02
   3306  1558		       c5 86		      CMP	PuppetY
   3307  155a		       b0 03		      BCS	.skipL0181
   3308  155c				   .condpart41
   3309  155c		       4c 99 15 	      jmp	.__Left_Move_Down
   3310  155f
   3311  155f				   .skipL0181
   3312  155f				   .
   3313  155f							; 
   3314  155f
   3315  155f				   .L0182		;  PuppetY  =	PuppetY  -  1
   3316  155f
   3317  155f		       c6 86		      DEC	PuppetY
   3318  1561				   .
   3319  1561							; 
   3320  1561
   3321  1561				   .L0183		;  _MyTemp02  =   (  ( PuppetY -  ( player1height + 1 )  )  )	/ 8
   3322  1561
   3323  1561							; complex statement detected
   3324  1561		       a5 86		      LDA	PuppetY
   3325  1563		       48		      PHA
   3326  1564		       a5 8f		      LDA	player1height
   3327  1566		       18		      CLC
   3328  1567		       69 01		      ADC	#1
   3329  1569		       a8		      TAY
   3330  156a		       68		      PLA
   3331  156b		       ba		      TSX
   3332  156c		       94 00		      STY	$00,x
   3333  156e		       38		      SEC
   3334  156f		       f5 00		      SBC	$00,x
   3335  1571		       4a		      lsr
   3336  1572		       4a		      lsr
   3337  1573		       4a		      lsr
   3338  1574		       85 e4		      STA	_MyTemp02
   3339  1576				   .
   3340  1576							; 
   3341  1576
   3342  1576				   .L0184		;  if pfread ( temp5 , _MyTemp02 )  then PuppetY  =  PuppetY  +  1
   3343  1576
   3344  1576		       a5 a0		      LDA	temp5
   3345  1578		       a4 e4		      LDY	_MyTemp02
   3346  157a		       85 ee		      sta	temp7
   3347  157c		       a9 15		      lda	#>(ret_point12-1)
   3348  157e		       48		      pha
   3349  157f		       a9 91		      lda	#<(ret_point12-1)
   3350  1581		       48		      pha
   3351  1582		       a9 f2		      lda	#>(pfread-1)
   3352  1584		       48		      pha
   3353  1585		       a9 ab		      lda	#<(pfread-1)
   3354  1587		       48		      pha
   3355  1588		       a5 ee		      lda	temp7
   3356  158a		       48		      pha
   3357  158b		       8a		      txa
   3358  158c		       48		      pha
   3359  158d		       a2 08		      ldx	#8
   3360  158f		       4c eb ff 	      jmp	BS_jsr
   3361  1592				   ret_point12
   3362  1592		       d0 02		      BNE	.skipL0184
   3363  1594				   .condpart42
   3364  1594		       e6 86		      INC	PuppetY
   3365  1596				   .skipL0184
   3366  1596				   .
   3367  1596							; 
   3368  1596
   3369  1596				   .L0185		;  goto __Skip_Joy0_Left
   3370  1596
   3371  1596		       4c 9b 15 	      jmp	.__Skip_Joy0_Left
   3372  1599
   3373  1599				   .
   3374  1599							; 
   3375  1599
   3376  1599				   .__Left_Move_Down
   3377  1599							; __Left_Move_Down
   3378  1599
   3379  1599				   .
   3380  1599							; 
   3381  1599
   3382  1599				   .
   3383  1599							; 
   3384  1599
   3385  1599				   .
   3386  1599							; 
   3387  1599
   3388  1599				   .
   3389  1599							; 
   3390  1599
   3391  1599				   .
   3392  1599							; 
   3393  1599
   3394  1599				   .L0186		;  PuppetY  =	PuppetY  +  1
   3395  1599
   3396  1599		       e6 86		      INC	PuppetY
   3397  159b				   .
   3398  159b							; 
   3399  159b
   3400  159b				   .__Skip_Joy0_Left
   3401  159b							; __Skip_Joy0_Left
   3402  159b
   3403  159b				   .
   3404  159b							; 
   3405  159b
   3406  159b				   .
   3407  159b							; 
   3408  159b
   3409  159b				   .
   3410  159b							; 
   3411  159b
   3412  159b				   .
   3413  159b							; 
   3414  159b
   3415  159b				   .
   3416  159b							; 
   3417  159b
   3418  159b				   .
   3419  159b							; 
   3420  159b
   3421  159b				   .
   3422  159b							; 
   3423  159b
   3424  159b				   .
   3425  159b							; 
   3426  159b
   3427  159b				   .L0187		;  if !joy0right then goto __Skip_Joy0_Right
   3428  159b
   3429  159b		       2c 80 02 	      bit	SWCHA
   3430  159e		       10 03		      BPL	.skipL0187
   3431  15a0				   .condpart43
   3432  15a0		       4c a5 16 	      jmp	.__Skip_Joy0_Right
   3433  15a3
   3434  15a3				   .skipL0187
   3435  15a3				   .L0188		;  gosub _P_R bank5
   3436  15a3
   3437  15a3		       85 ee		      sta	temp7
   3438  15a5		       a9 15		      lda	#>(ret_point13-1)
   3439  15a7		       48		      pha
   3440  15a8		       a9 ba		      lda	#<(ret_point13-1)
   3441  15aa		       48		      pha
   3442  15ab		       a9 8f		      lda	#>(._P_R-1)
   3443  15ad		       48		      pha
   3444  15ae		       a9 ff		      lda	#<(._P_R-1)
   3445  15b0		       48		      pha
   3446  15b1		       a5 ee		      lda	temp7
   3447  15b3		       48		      pha
   3448  15b4		       8a		      txa
   3449  15b5		       48		      pha
   3450  15b6		       a2 05		      ldx	#5
   3451  15b8		       4c eb ff 	      jmp	BS_jsr
   3452  15bb				   ret_point13
   3453  15bb				   .
   3454  15bb							; 
   3455  15bb
   3456  15bb				   .
   3457  15bb							; 
   3458  15bb
   3459  15bb				   .
   3460  15bb							; 
   3461  15bb
   3462  15bb				   .
   3463  15bb							; 
   3464  15bb
   3465  15bb				   .L0189		;  _Bit3_Player1_Direction_Right{3}  =  1
   3466  15bb
   3467  15bb		       a5 de		      LDA	_Bit3_Player1_Direction_Right
   3468  15bd		       09 08		      ORA	#8
   3469  15bf		       85 de		      STA	_Bit3_Player1_Direction_Right
   3470  15c1				   .
   3471  15c1							; 
   3472  15c1
   3473  15c1				   .
   3474  15c1							; 
   3475  15c1
   3476  15c1				   .
   3477  15c1							; 
   3478  15c1
   3479  15c1				   .
   3480  15c1							; 
   3481  15c1
   3482  15c1				   .L0190		;  temp5  =   (  (  ( PuppetX )  - 13 )  / 4 )  + 1
   3483  15c1
   3484  15c1							; complex statement detected
   3485  15c1		       a5 81		      LDA	PuppetX
   3486  15c3		       38		      SEC
   3487  15c4		       e9 0d		      SBC	#13
   3488  15c6		       4a		      lsr
   3489  15c7		       4a		      lsr
   3490  15c8		       18		      CLC
   3491  15c9		       69 01		      ADC	#1
   3492  15cb		       85 a0		      STA	temp5
   3493  15cd				   .
   3494  15cd							; 
   3495  15cd
   3496  15cd				   .
   3497  15cd							; 
   3498  15cd
   3499  15cd				   .
   3500  15cd							; 
   3501  15cd
   3502  15cd				   .
   3503  15cd							; 
   3504  15cd
   3505  15cd				   .L0191		;  temp6  =   ( PuppetY - 1 )	/ 8
   3506  15cd
   3507  15cd							; complex statement detected
   3508  15cd		       a5 86		      LDA	PuppetY
   3509  15cf		       38		      SEC
   3510  15d0		       e9 01		      SBC	#1
   3511  15d2		       4a		      lsr
   3512  15d3		       4a		      lsr
   3513  15d4		       4a		      lsr
   3514  15d5		       85 a1		      STA	temp6
   3515  15d7				   .
   3516  15d7							; 
   3517  15d7
   3518  15d7				   .
   3519  15d7							; 
   3520  15d7
   3521  15d7				   .
   3522  15d7							; 
   3523  15d7
   3524  15d7				   .
   3525  15d7							; 
   3526  15d7
   3527  15d7				   .L0192		;  _MyTemp01  =   (  ( PuppetY -  ( player1height + 1 )  )  )	/ 8
   3528  15d7
   3529  15d7							; complex statement detected
   3530  15d7		       a5 86		      LDA	PuppetY
   3531  15d9		       48		      PHA
   3532  15da		       a5 8f		      LDA	player1height
   3533  15dc		       18		      CLC
   3534  15dd		       69 01		      ADC	#1
   3535  15df		       a8		      TAY
   3536  15e0		       68		      PLA
   3537  15e1		       ba		      TSX
   3538  15e2		       94 00		      STY	$00,x
   3539  15e4		       38		      SEC
   3540  15e5		       f5 00		      SBC	$00,x
   3541  15e7		       4a		      lsr
   3542  15e8		       4a		      lsr
   3543  15e9		       4a		      lsr
   3544  15ea		       85 e5		      STA	_MyTemp01
   3545  15ec				   .L0193		;  _MyTemp02  =  temp6
   3546  15ec
   3547  15ec		       a5 a1		      LDA	temp6
   3548  15ee		       85 e4		      STA	_MyTemp02
   3549  15f0				   .
   3550  15f0							; 
   3551  15f0
   3552  15f0				   .
   3553  15f0							; 
   3554  15f0
   3555  15f0				   .
   3556  15f0							; 
   3557  15f0
   3558  15f0				   .
   3559  15f0							; 
   3560  15f0
   3561  15f0				   .
   3562  15f0							; 
   3563  15f0
   3564  15f0				   .L0194		;  for _MyTemp03  =  _MyTemp01 to temp6
   3565  15f0
   3566  15f0		       a5 e5		      LDA	_MyTemp01
   3567  15f2		       85 e2		      STA	_MyTemp03
   3568  15f4				   .L0194for_MyTemp03
   3569  15f4				   .
   3570  15f4							; 
   3571  15f4
   3572  15f4				   .L0195		;  if pfread ( temp5 , _MyTemp02 )  then goto __Skip_Joy0_Right
   3573  15f4
   3574  15f4		       a5 a0		      LDA	temp5
   3575  15f6		       a4 e4		      LDY	_MyTemp02
   3576  15f8		       85 ee		      sta	temp7
   3577  15fa		       a9 16		      lda	#>(ret_point14-1)
   3578  15fc		       48		      pha
   3579  15fd		       a9 0f		      lda	#<(ret_point14-1)
   3580  15ff		       48		      pha
   3581  1600		       a9 f2		      lda	#>(pfread-1)
   3582  1602		       48		      pha
   3583  1603		       a9 ab		      lda	#<(pfread-1)
   3584  1605		       48		      pha
   3585  1606		       a5 ee		      lda	temp7
   3586  1608		       48		      pha
   3587  1609		       8a		      txa
   3588  160a		       48		      pha
   3589  160b		       a2 08		      ldx	#8
   3590  160d		       4c eb ff 	      jmp	BS_jsr
   3591  1610				   ret_point14
   3592  1610		       d0 03		      BNE	.skipL0195
   3593  1612				   .condpart44
   3594  1612		       4c a5 16 	      jmp	.__Skip_Joy0_Right
   3595  1615
   3596  1615				   .skipL0195
   3597  1615				   .
   3598  1615							; 
   3599  1615
   3600  1615				   .L0196		;  _MyTemp02  =  _MyTemp02  -	1
   3601  1615
   3602  1615		       c6 e4		      DEC	_MyTemp02
   3603  1617				   .
   3604  1617							; 
   3605  1617
   3606  1617				   .L0197		;  next
   3607  1617
   3608  1617		       a5 e2		      LDA	_MyTemp03
   3609  1619		       c5 a1		      CMP	temp6
   3610  161b
   3611  161b		       e6 e2		      INC	_MyTemp03
   3612  161d					      if	((* - .L0194for_MyTemp03) < 127) && ((* - .L0194for_MyTemp03) > -128)
   3613  161d		       90 d5		      bcc	.L0194for_MyTemp03
   3614  161f				  -	      else
   3615  161f				  -	      bcs	.3skipL0194for_MyTemp03
   3616  161f				  -	      jmp	.L0194for_MyTemp03
   3617  161f				  -.3skipL0194for_MyTemp03
   3618  161f					      endif
   3619  161f				   .
   3620  161f							; 
   3621  161f
   3622  161f				   .
   3623  161f							; 
   3624  161f
   3625  161f				   .
   3626  161f							; 
   3627  161f
   3628  161f				   .
   3629  161f							; 
   3630  161f
   3631  161f				   .L0198		;  PuppetX  =	PuppetX  +  1  :  pfscroll left
   3632  161f
   3633  161f		       e6 81		      INC	PuppetX
   3634  1621		       a9 00		      LDA	#0
   3635  1623		       85 ee		      sta	temp7
   3636  1625		       a9 16		      lda	#>(ret_point15-1)
   3637  1627		       48		      pha
   3638  1628		       a9 3a		      lda	#<(ret_point15-1)
   3639  162a		       48		      pha
   3640  162b		       a9 f3		      lda	#>(pfscroll-1)
   3641  162d		       48		      pha
   3642  162e		       a9 63		      lda	#<(pfscroll-1)
   3643  1630		       48		      pha
   3644  1631		       a5 ee		      lda	temp7
   3645  1633		       48		      pha
   3646  1634		       8a		      txa
   3647  1635		       48		      pha
   3648  1636		       a2 08		      ldx	#8
   3649  1638		       4c eb ff 	      jmp	BS_jsr
   3650  163b				   ret_point15
   3651  163b				   .
   3652  163b							; 
   3653  163b
   3654  163b				   .
   3655  163b							; 
   3656  163b
   3657  163b				   .
   3658  163b							; 
   3659  163b
   3660  163b				   .
   3661  163b							; 
   3662  163b
   3663  163b				   .L0199		;  if joy0up  ||  joy0down then goto __Skip_Joy0_Right
   3664  163b
   3665  163b		       a9 10		      lda	#$10
   3666  163d		       2c 80 02 	      bit	SWCHA
   3667  1640		       d0 03		      BNE	.skipL0199
   3668  1642				   .condpart45
   3669  1642		       4c 4c 16 	      jmp	.condpart46
   3670  1645				   .skipL0199
   3671  1645		       a9 20		      lda	#$20
   3672  1647		       2c 80 02 	      bit	SWCHA
   3673  164a		       d0 03		      BNE	.skip5OR
   3674  164c				   .condpart46
   3675  164c		       4c a5 16 	      jmp	.__Skip_Joy0_Right
   3676  164f
   3677  164f				   .skip5OR
   3678  164f				   .
   3679  164f							; 
   3680  164f
   3681  164f				   .
   3682  164f							; 
   3683  164f
   3684  164f				   .
   3685  164f							; 
   3686  164f
   3687  164f				   .
   3688  164f							; 
   3689  164f
   3690  164f				   .L0200		;  if !collision(playfield,player1) then goto __Skip_Joy0_Right
   3691  164f
   3692  164f		       24 03		      bit	CXP1FB
   3693  1651		       30 03		      BMI	.skipL0200
   3694  1653				   .condpart47
   3695  1653		       4c a5 16 	      jmp	.__Skip_Joy0_Right
   3696  1656
   3697  1656				   .skipL0200
   3698  1656				   .
   3699  1656							; 
   3700  1656
   3701  1656				   .
   3702  1656							; 
   3703  1656
   3704  1656				   .
   3705  1656							; 
   3706  1656
   3707  1656				   .
   3708  1656							; 
   3709  1656
   3710  1656				   .L0201		;  _MyTemp02  =   ( temp6  *  8 )   +	8
   3711  1656
   3712  1656							; complex statement detected
   3713  1656		       a5 a1		      LDA	temp6
   3714  1658		       0a		      asl
   3715  1659		       0a		      asl
   3716  165a		       0a		      asl
   3717  165b		       18		      CLC
   3718  165c		       69 08		      ADC	#8
   3719  165e		       85 e4		      STA	_MyTemp02
   3720  1660				   .
   3721  1660							; 
   3722  1660
   3723  1660				   .
   3724  1660							; 
   3725  1660
   3726  1660				   .
   3727  1660							; 
   3728  1660
   3729  1660				   .
   3730  1660							; 
   3731  1660
   3732  1660				   .
   3733  1660							; 
   3734  1660
   3735  1660				   .L0202		;  if PuppetY	>  _MyTemp02 then goto __Right_Move_Down
   3736  1660
   3737  1660		       a5 e4		      LDA	_MyTemp02
   3738  1662		       c5 86		      CMP	PuppetY
   3739  1664		       b0 03		      BCS	.skipL0202
   3740  1666				   .condpart48
   3741  1666		       4c a3 16 	      jmp	.__Right_Move_Down
   3742  1669
   3743  1669				   .skipL0202
   3744  1669				   .
   3745  1669							; 
   3746  1669
   3747  1669				   .L0203		;  PuppetY  =	PuppetY  -  1
   3748  1669
   3749  1669		       c6 86		      DEC	PuppetY
   3750  166b				   .
   3751  166b							; 
   3752  166b
   3753  166b				   .L0204		;  _MyTemp02  =   (  ( PuppetY -  ( player1height + 1 )  )  )	/ 8
   3754  166b
   3755  166b							; complex statement detected
   3756  166b		       a5 86		      LDA	PuppetY
   3757  166d		       48		      PHA
   3758  166e		       a5 8f		      LDA	player1height
   3759  1670		       18		      CLC
   3760  1671		       69 01		      ADC	#1
   3761  1673		       a8		      TAY
   3762  1674		       68		      PLA
   3763  1675		       ba		      TSX
   3764  1676		       94 00		      STY	$00,x
   3765  1678		       38		      SEC
   3766  1679		       f5 00		      SBC	$00,x
   3767  167b		       4a		      lsr
   3768  167c		       4a		      lsr
   3769  167d		       4a		      lsr
   3770  167e		       85 e4		      STA	_MyTemp02
   3771  1680				   .
   3772  1680							; 
   3773  1680
   3774  1680				   .L0205		;  if pfread ( temp5 , _MyTemp02 )  then PuppetY  =  PuppetY  +  1
   3775  1680
   3776  1680		       a5 a0		      LDA	temp5
   3777  1682		       a4 e4		      LDY	_MyTemp02
   3778  1684		       85 ee		      sta	temp7
   3779  1686		       a9 16		      lda	#>(ret_point16-1)
   3780  1688		       48		      pha
   3781  1689		       a9 9b		      lda	#<(ret_point16-1)
   3782  168b		       48		      pha
   3783  168c		       a9 f2		      lda	#>(pfread-1)
   3784  168e		       48		      pha
   3785  168f		       a9 ab		      lda	#<(pfread-1)
   3786  1691		       48		      pha
   3787  1692		       a5 ee		      lda	temp7
   3788  1694		       48		      pha
   3789  1695		       8a		      txa
   3790  1696		       48		      pha
   3791  1697		       a2 08		      ldx	#8
   3792  1699		       4c eb ff 	      jmp	BS_jsr
   3793  169c				   ret_point16
   3794  169c		       d0 02		      BNE	.skipL0205
   3795  169e				   .condpart49
   3796  169e		       e6 86		      INC	PuppetY
   3797  16a0				   .skipL0205
   3798  16a0				   .
   3799  16a0							; 
   3800  16a0
   3801  16a0				   .L0206		;  goto __Skip_Joy0_Right
   3802  16a0
   3803  16a0		       4c a5 16 	      jmp	.__Skip_Joy0_Right
   3804  16a3
   3805  16a3				   .
   3806  16a3							; 
   3807  16a3
   3808  16a3				   .__Right_Move_Down
   3809  16a3							; __Right_Move_Down
   3810  16a3
   3811  16a3				   .
   3812  16a3							; 
   3813  16a3
   3814  16a3				   .
   3815  16a3							; 
   3816  16a3
   3817  16a3				   .
   3818  16a3							; 
   3819  16a3
   3820  16a3				   .
   3821  16a3							; 
   3822  16a3
   3823  16a3				   .
   3824  16a3							; 
   3825  16a3
   3826  16a3				   .L0207		;  PuppetY  =	PuppetY  +  1
   3827  16a3
   3828  16a3		       e6 86		      INC	PuppetY
   3829  16a5				   .
   3830  16a5							; 
   3831  16a5
   3832  16a5				   .
   3833  16a5							; 
   3834  16a5
   3835  16a5				   .__Skip_Joy0_Right
   3836  16a5							; __Skip_Joy0_Right
   3837  16a5
   3838  16a5				   .
   3839  16a5							; 
   3840  16a5
   3841  16a5				   .
   3842  16a5							; 
   3843  16a5
   3844  16a5				   .
   3845  16a5							; 
   3846  16a5
   3847  16a5				   .
   3848  16a5							; 
   3849  16a5
   3850  16a5				   .
   3851  16a5							; 
   3852  16a5
   3853  16a5				   .
   3854  16a5							; 
   3855  16a5
   3856  16a5				   .
   3857  16a5							; 
   3858  16a5
   3859  16a5				   .
   3860  16a5							; 
   3861  16a5
   3862  16a5				   .
   3863  16a5							; 
   3864  16a5
   3865  16a5				   .L0208		;  if PuppetX	<  17 then PuppetX  =  17
   3866  16a5
   3867  16a5		       a5 81		      LDA	PuppetX
   3868  16a7		       c9 11		      CMP	#17
   3869  16a9		       b0 04		      BCS	.skipL0208
   3870  16ab				   .condpart50
   3871  16ab		       a9 11		      LDA	#17
   3872  16ad		       85 81		      STA	PuppetX
   3873  16af				   .skipL0208
   3874  16af				   .L0209		;  if PuppetX	>  136 then PuppetX  =	136
   3875  16af
   3876  16af		       a9 88		      LDA	#136
   3877  16b1		       c5 81		      CMP	PuppetX
   3878  16b3		       b0 04		      BCS	.skipL0209
   3879  16b5				   .condpart51
   3880  16b5		       a9 88		      LDA	#136
   3881  16b7		       85 81		      STA	PuppetX
   3882  16b9				   .skipL0209
   3883  16b9				   .L0210		;  if PuppetY	<  24 then PuppetY  =  24
   3884  16b9
   3885  16b9		       a5 86		      LDA	PuppetY
   3886  16bb		       c9 18		      CMP	#24
   3887  16bd		       b0 04		      BCS	.skipL0210
   3888  16bf				   .condpart52
   3889  16bf		       a9 18		      LDA	#24
   3890  16c1		       85 86		      STA	PuppetY
   3891  16c3				   .skipL0210
   3892  16c3				   .L0211		;  if PuppetY	>  89 then PuppetY  =  89
   3893  16c3
   3894  16c3		       a9 59		      LDA	#89
   3895  16c5		       c5 86		      CMP	PuppetY
   3896  16c7		       b0 04		      BCS	.skipL0211
   3897  16c9				   .condpart53
   3898  16c9		       a9 59		      LDA	#89
   3899  16cb		       85 86		      STA	PuppetY
   3900  16cd				   .skipL0211
   3901  16cd				   .
   3902  16cd							; 
   3903  16cd
   3904  16cd				   .
   3905  16cd							; 
   3906  16cd
   3907  16cd				   .
   3908  16cd							; 
   3909  16cd
   3910  16cd				   .
   3911  16cd							; 
   3912  16cd
   3913  16cd				   .
   3914  16cd							; 
   3915  16cd
   3916  16cd				   .
   3917  16cd							; 
   3918  16cd
   3919  16cd				   .
   3920  16cd							; 
   3921  16cd
   3922  16cd				   .L0212		;  if PGuyY  <  PuppetY then PGuyY  =	PGuyY  +  0.85
   3923  16cd
   3924  16cd		       a5 85		      LDA	PGuyY
   3925  16cf		       c5 86		      CMP	PuppetY
   3926  16d1		       b0 0d		      BCS	.skipL0212
   3927  16d3				   .condpart54
   3928  16d3		       a5 dc		      LDA	i
   3929  16d5		       18		      CLC
   3930  16d6		       69 d9		      ADC	#217
   3931  16d8		       85 dc		      STA	i
   3932  16da		       a5 85		      LDA	PGuyY
   3933  16dc		       69 00		      ADC	#0
   3934  16de		       85 85		      STA	PGuyY
   3935  16e0				   .skipL0212
   3936  16e0				   .L0213		;  if PGuyY  >  PuppetY then PGuyY  =	PGuyY  -  0.85
   3937  16e0
   3938  16e0		       a5 86		      LDA	PuppetY
   3939  16e2		       c5 85		      CMP	PGuyY
   3940  16e4		       b0 0d		      BCS	.skipL0213
   3941  16e6				   .condpart55
   3942  16e6		       a5 dc		      LDA	i
   3943  16e8		       38		      SEC
   3944  16e9		       e9 d9		      SBC	#217
   3945  16eb		       85 dc		      STA	i
   3946  16ed		       a5 85		      LDA	PGuyY
   3947  16ef		       e9 00		      SBC	#0
   3948  16f1		       85 85		      STA	PGuyY
   3949  16f3				   .skipL0213
   3950  16f3				   .L0214		;  if PGuyX  <  PuppetX then PGuyX  =	PGuyX  +  0.85
   3951  16f3
   3952  16f3		       a5 80		      LDA	PGuyX
   3953  16f5		       c5 81		      CMP	PuppetX
   3954  16f7		       b0 0d		      BCS	.skipL0214
   3955  16f9				   .condpart56
   3956  16f9		       a5 db		      LDA	h
   3957  16fb		       18		      CLC
   3958  16fc		       69 d9		      ADC	#217
   3959  16fe		       85 db		      STA	h
   3960  1700		       a5 80		      LDA	PGuyX
   3961  1702		       69 00		      ADC	#0
   3962  1704		       85 80		      STA	PGuyX
   3963  1706				   .skipL0214
   3964  1706				   .L0215		;  if PGuyX  >  PuppetX then PGuyX  =	PGuyX  -  0.85
   3965  1706
   3966  1706		       a5 81		      LDA	PuppetX
   3967  1708		       c5 80		      CMP	PGuyX
   3968  170a		       b0 0d		      BCS	.skipL0215
   3969  170c				   .condpart57
   3970  170c		       a5 db		      LDA	h
   3971  170e		       38		      SEC
   3972  170f		       e9 d9		      SBC	#217
   3973  1711		       85 db		      STA	h
   3974  1713		       a5 80		      LDA	PGuyX
   3975  1715		       e9 00		      SBC	#0
   3976  1717		       85 80		      STA	PGuyX
   3977  1719				   .skipL0215
   3978  1719				   .__Screen_Logic
   3979  1719							; __Screen_Logic
   3980  1719
   3981  1719				   .
   3982  1719							; 
   3983  1719
   3984  1719				   .
   3985  1719							; 
   3986  1719
   3987  1719				   .
   3988  1719							; 
   3989  1719
   3990  1719				   .
   3991  1719							; 
   3992  1719
   3993  1719				   .
   3994  1719							; 
   3995  1719
   3996  1719				   .
   3997  1719							; 
   3998  1719
   3999  1719				   .
   4000  1719							; 
   4001  1719
   4002  1719				   .
   4003  1719							; 
   4004  1719
   4005  1719				   .
   4006  1719							; 
   4007  1719
   4008  1719				   .
   4009  1719							; 
   4010  1719
   4011  1719				   .
   4012  1719							; 
   4013  1719
   4014  1719				   .
   4015  1719							; 
   4016  1719
   4017  1719				   .
   4018  1719							; 
   4019  1719
   4020  1719				   .
   4021  1719							; 
   4022  1719
   4023  1719				   .
   4024  1719							; 
   4025  1719
   4026  1719				   .
   4027  1719							; 
   4028  1719
   4029  1719				   .
   4030  1719							; 
   4031  1719
   4032  1719				   .
   4033  1719							; 
   4034  1719
   4035  1719				   .
   4036  1719							; 
   4037  1719
   4038  1719				   .
   4039  1719							; 
   4040  1719
   4041  1719				   .
   4042  1719							; 
   4043  1719
   4044  1719				   .
   4045  1719							; 
   4046  1719
   4047  1719				   .
   4048  1719							; 
   4049  1719
   4050  1719				   .
   4051  1719							; 
   4052  1719
   4053  1719				   .
   4054  1719							; 
   4055  1719
   4056  1719				   .
   4057  1719							; 
   4058  1719
   4059  1719				   .
   4060  1719							; 
   4061  1719
   4062  1719				   .
   4063  1719							; 
   4064  1719
   4065  1719				   .
   4066  1719							; 
   4067  1719
   4068  1719				   .
   4069  1719							; 
   4070  1719
   4071  1719				   .
   4072  1719							; 
   4073  1719
   4074  1719				   .L0216		;  if !collision(ball,player0) then goto __Skip_PG_Kill
   4075  1719
   4076  1719		       24 02		      bit	CXP0FB
   4077  171b		       70 03		      BVS	.skipL0216
   4078  171d				   .condpart58
   4079  171d		       4c ea 17 	      jmp	.__Skip_PG_Kill
   4080  1720
   4081  1720				   .skipL0216
   4082  1720				   .
   4083  1720							; 
   4084  1720
   4085  1720				   .
   4086  1720							; 
   4087  1720
   4088  1720				   .
   4089  1720							; 
   4090  1720
   4091  1720				   .
   4092  1720							; 
   4093  1720
   4094  1720				   .L0217		;  score  =  score  +	1
   4095  1720
   4096  1720		       f8		      SED
   4097  1721		       18		      CLC
   4098  1722		       a5 95		      LDA	score+2
   4099  1724		       69 01		      ADC	#$01
   4100  1726		       85 95		      STA	score+2
   4101  1728		       a5 94		      LDA	score+1
   4102  172a		       69 00		      ADC	#$00
   4103  172c		       85 94		      STA	score+1
   4104  172e		       a5 93		      LDA	score
   4105  1730		       69 00		      ADC	#$00
   4106  1732		       85 93		      STA	score
   4107  1734		       d8		      CLD
   4108  1735				   .L0218		;  if pfscore1  <  255 then pfscore1  =  pfscore1 * 2 | 1
   4109  1735
   4110  1735		       a5 f2		      LDA	pfscore1
   4111  1737		       c9 ff		      CMP	#255
   4112  1739		       b0 07		      BCS	.skipL0218
   4113  173b				   .condpart59
   4114  173b							; complex statement detected
   4115  173b		       a5 f2		      LDA	pfscore1
   4116  173d		       0a		      asl
   4117  173e		       09 01		      ORA	#1
   4118  1740		       85 f2		      STA	pfscore1
   4119  1742				   .skipL0218
   4120  1742				   .
   4121  1742							; 
   4122  1742
   4123  1742				   .
   4124  1742							; 
   4125  1742
   4126  1742				   .
   4127  1742							; 
   4128  1742
   4129  1742				   .
   4130  1742							; 
   4131  1742
   4132  1742				   .
   4133  1742							; 
   4134  1742
   4135  1742				   .L0219		;  if s3  =  15 then goto __Lvl_2
   4136  1742
   4137  1742		       a5 95		      LDA	s3
   4138  1744		       c9 0f		      CMP	#15
   4139  1746		       d0 03		      BNE	.skipL0219
   4140  1748				   .condpart60
   4141  1748		       4c e3 1a 	      jmp	.__Lvl_2
   4142  174b
   4143  174b				   .skipL0219
   4144  174b				   .
   4145  174b							; 
   4146  174b
   4147  174b				   .
   4148  174b							; 
   4149  174b
   4150  174b				   .
   4151  174b							; 
   4152  174b
   4153  174b				   .
   4154  174b							; 
   4155  174b
   4156  174b				   .L0220		;  if _Sound0 then goto __Skip_Sound0_Setup
   4157  174b
   4158  174b		       a5 d6		      LDA	_Sound0
   4159  174d		       f0 03		      BEQ	.skipL0220
   4160  174f				   .condpart61
   4161  174f		       4c 81 17 	      jmp	.__Skip_Sound0_Setup
   4162  1752
   4163  1752				   .skipL0220
   4164  1752				   .
   4165  1752							; 
   4166  1752
   4167  1752				   .L0221		;  _Sound0  =	1  :  _SoundCounter0  =  10
   4168  1752
   4169  1752		       a9 01		      LDA	#1
   4170  1754		       85 d6		      STA	_Sound0
   4171  1756		       a9 0a		      LDA	#10
   4172  1758		       85 d7		      STA	_SoundCounter0
   4173  175a				   .
   4174  175a							; 
   4175  175a
   4176  175a				   .L0222		;  _C0  =  4  :  _V0  =  12  :  _F0  =  14
   4177  175a
   4178  175a		       a9 04		      LDA	#4
   4179  175c		       85 d8		      STA	_C0
   4180  175e		       a9 0c		      LDA	#12
   4181  1760		       85 d9		      STA	_V0
   4182  1762		       a9 0e		      LDA	#14
   4183  1764		       85 da		      STA	_F0
   4184  1766				   .
   4185  1766							; 
   4186  1766
   4187  1766				   .L0223		;  temp5  =  255  :  if PGuyY	<  PuppetY then temp5  =  PuppetY  -  PGuyY
   4188  1766
   4189  1766		       a9 ff		      LDA	#255
   4190  1768		       85 a0		      STA	temp5
   4191  176a		       a5 85		      LDA	PGuyY
   4192  176c		       c5 86		      CMP	PuppetY
   4193  176e		       b0 07		      BCS	.skipL0223
   4194  1770				   .condpart62
   4195  1770		       a5 86		      LDA	PuppetY
   4196  1772		       38		      SEC
   4197  1773		       e5 85		      SBC	PGuyY
   4198  1775		       85 a0		      STA	temp5
   4199  1777				   .skipL0223
   4200  1777				   .
   4201  1777							; 
   4202  1777
   4203  1777				   .L0224		;  if temp5  <  30 then _C0  =  12
   4204  1777
   4205  1777		       a5 a0		      LDA	temp5
   4206  1779		       c9 1e		      CMP	#30
   4207  177b		       b0 04		      BCS	.skipL0224
   4208  177d				   .condpart63
   4209  177d		       a9 0c		      LDA	#12
   4210  177f		       85 d8		      STA	_C0
   4211  1781				   .skipL0224
   4212  1781				   .
   4213  1781							; 
   4214  1781
   4215  1781				   .__Skip_Sound0_Setup
   4216  1781							; __Skip_Sound0_Setup
   4217  1781
   4218  1781				   .
   4219  1781							; 
   4220  1781
   4221  1781				   .
   4222  1781							; 
   4223  1781
   4224  1781				   .
   4225  1781							; 
   4226  1781
   4227  1781				   .
   4228  1781							; 
   4229  1781
   4230  1781				   .L0225		;  player0x  =  PuppetX  +   ( rand & 127 )   +   ( rand / 16 )   :  player0y	=  PuppetY  +	( rand / 4 )   +   ( rand & 63 )   -  1  :  bally  =  250
   4231  1781
   4232  1781							; complex statement detected
   4233  1781		       a5 81		      LDA	PuppetX
   4234  1783		       48		      PHA
   4235  1784		       a5 a2		      lda	rand
   4236  1786		       4a		      lsr
   4237  1787					      ifconst	rand16
   4238  1787		       26 ed		      rol	rand16
   4239  1789					      endif
   4240  1789		       90 02		      bcc	*+4
   4241  178b		       49 b4		      eor	#$B4
   4242  178d		       85 a2		      sta	rand
   4243  178f					      ifconst	rand16
   4244  178f		       45 ed		      eor	rand16
   4245  1791					      endif
   4246  1791		       29 7f		      AND	#127
   4247  1793		       ba		      TSX
   4248  1794		       e8		      INX
   4249  1795		       9a		      TXS
   4250  1796		       18		      CLC
   4251  1797		       75 00		      ADC	$00,x
   4252  1799		       48		      PHA
   4253  179a		       a5 a2		      lda	rand
   4254  179c		       4a		      lsr
   4255  179d					      ifconst	rand16
   4256  179d		       26 ed		      rol	rand16
   4257  179f					      endif
   4258  179f		       90 02		      bcc	*+4
   4259  17a1		       49 b4		      eor	#$B4
   4260  17a3		       85 a2		      sta	rand
   4261  17a5					      ifconst	rand16
   4262  17a5		       45 ed		      eor	rand16
   4263  17a7					      endif
   4264  17a7		       4a		      lsr
   4265  17a8		       4a		      lsr
   4266  17a9		       4a		      lsr
   4267  17aa		       4a		      lsr
   4268  17ab		       ba		      TSX
   4269  17ac		       e8		      INX
   4270  17ad		       9a		      TXS
   4271  17ae		       18		      CLC
   4272  17af		       75 00		      ADC	$00,x
   4273  17b1		       85 80		      STA	player0x
   4274  17b3							; complex statement detected
   4275  17b3		       a5 86		      LDA	PuppetY
   4276  17b5		       48		      PHA
   4277  17b6		       a5 a2		      lda	rand
   4278  17b8		       4a		      lsr
   4279  17b9					      ifconst	rand16
   4280  17b9		       26 ed		      rol	rand16
   4281  17bb					      endif
   4282  17bb		       90 02		      bcc	*+4
   4283  17bd		       49 b4		      eor	#$B4
   4284  17bf		       85 a2		      sta	rand
   4285  17c1					      ifconst	rand16
   4286  17c1		       45 ed		      eor	rand16
   4287  17c3					      endif
   4288  17c3		       4a		      lsr
   4289  17c4		       4a		      lsr
   4290  17c5		       ba		      TSX
   4291  17c6		       e8		      INX
   4292  17c7		       9a		      TXS
   4293  17c8		       18		      CLC
   4294  17c9		       75 00		      ADC	$00,x
   4295  17cb		       48		      PHA
   4296  17cc		       a5 a2		      lda	rand
   4297  17ce		       4a		      lsr
   4298  17cf					      ifconst	rand16
   4299  17cf		       26 ed		      rol	rand16
   4300  17d1					      endif
   4301  17d1		       90 02		      bcc	*+4
   4302  17d3		       49 b4		      eor	#$B4
   4303  17d5		       85 a2		      sta	rand
   4304  17d7					      ifconst	rand16
   4305  17d7		       45 ed		      eor	rand16
   4306  17d9					      endif
   4307  17d9		       29 3f		      AND	#63
   4308  17db		       ba		      TSX
   4309  17dc		       e8		      INX
   4310  17dd		       9a		      TXS
   4311  17de		       18		      CLC
   4312  17df		       75 00		      ADC	$00,x
   4313  17e1		       38		      SEC
   4314  17e2		       e9 01		      SBC	#1
   4315  17e4		       85 85		      STA	player0y
   4316  17e6		       a9 fa		      LDA	#250
   4317  17e8		       85 89		      STA	bally
   4318  17ea				   .
   4319  17ea							; 
   4320  17ea
   4321  17ea				   .__Skip_PG_Kill
   4322  17ea							; __Skip_PG_Kill
   4323  17ea
   4324  17ea				   .
   4325  17ea							; 
   4326  17ea
   4327  17ea				   .
   4328  17ea							; 
   4329  17ea
   4330  17ea				   .
   4331  17ea							; 
   4332  17ea
   4333  17ea				   .
   4334  17ea							; 
   4335  17ea
   4336  17ea				   .
   4337  17ea							; 
   4338  17ea
   4339  17ea				   .
   4340  17ea							; 
   4341  17ea
   4342  17ea				   .
   4343  17ea							; 
   4344  17ea
   4345  17ea				   .
   4346  17ea							; 
   4347  17ea
   4348  17ea				   .L0226		;  if !collision(player0,player1) then goto __Skip_Players_Touch
   4349  17ea
   4350  17ea		       24 07		      bit	CXPPMM
   4351  17ec		       30 03		      BMI	.skipL0226
   4352  17ee				   .condpart64
   4353  17ee		       4c cb 18 	      jmp	.__Skip_Players_Touch
   4354  17f1
   4355  17f1				   .skipL0226
   4356  17f1				   .
   4357  17f1							; 
   4358  17f1
   4359  17f1				   .
   4360  17f1							; 
   4361  17f1
   4362  17f1				   .
   4363  17f1							; 
   4364  17f1
   4365  17f1				   .
   4366  17f1							; 
   4367  17f1
   4368  17f1				   .
   4369  17f1							; 
   4370  17f1
   4371  17f1				   .L0227		;  if s3  >  0 then score  =  score  -  1
   4372  17f1
   4373  17f1		       a9 00		      LDA	#0
   4374  17f3		       c5 95		      CMP	s3
   4375  17f5		       b0 15		      BCS	.skipL0227
   4376  17f7				   .condpart65
   4377  17f7		       f8		      SED
   4378  17f8		       38		      SEC
   4379  17f9		       a5 95		      LDA	score+2
   4380  17fb		       e9 01		      SBC	#$01
   4381  17fd		       85 95		      STA	score+2
   4382  17ff		       a5 94		      LDA	score+1
   4383  1801		       e9 00		      SBC	#$00
   4384  1803		       85 94		      STA	score+1
   4385  1805		       a5 93		      LDA	score
   4386  1807		       e9 00		      SBC	#$00
   4387  1809		       85 93		      STA	score
   4388  180b		       d8		      CLD
   4389  180c				   .skipL0227
   4390  180c				   .
   4391  180c							; 
   4392  180c
   4393  180c				   .
   4394  180c							; 
   4395  180c
   4396  180c				   .
   4397  180c							; 
   4398  180c
   4399  180c				   .
   4400  180c							; 
   4401  180c
   4402  180c				   .
   4403  180c							; 
   4404  180c
   4405  180c				   .L0228		;  if !pfscore1 then _Bit7_Last_Life{7}  =  1
   4406  180c
   4407  180c		       a5 f2		      LDA	pfscore1
   4408  180e		       d0 06		      BNE	.skipL0228
   4409  1810				   .condpart66
   4410  1810		       a5 ec		      LDA	_Bit7_Last_Life
   4411  1812		       09 80		      ORA	#128
   4412  1814		       85 ec		      STA	_Bit7_Last_Life
   4413  1816				   .skipL0228
   4414  1816				   .
   4415  1816							; 
   4416  1816
   4417  1816				   .
   4418  1816							; 
   4419  1816
   4420  1816				   .
   4421  1816							; 
   4422  1816
   4423  1816				   .
   4424  1816							; 
   4425  1816
   4426  1816				   .L0229		;  if pfscore1 then pfscore1  =  pfscore1 / 2
   4427  1816
   4428  1816		       a5 f2		      LDA	pfscore1
   4429  1818		       f0 05		      BEQ	.skipL0229
   4430  181a				   .condpart67
   4431  181a		       a5 f2		      LDA	pfscore1
   4432  181c		       4a		      lsr
   4433  181d		       85 f2		      STA	pfscore1
   4434  181f				   .skipL0229
   4435  181f				   .
   4436  181f							; 
   4437  181f
   4438  181f				   .
   4439  181f							; 
   4440  181f
   4441  181f				   .
   4442  181f							; 
   4443  181f
   4444  181f				   .L0230		;  if !s1  =  $00  &&	!s2  =	$00  &&  !s3  =  $00 then goto _skip_death
   4445  181f
   4446  181f		       a5 93		      LDA	s1
   4447  1821		       c9 00		      CMP	#$00
   4448  1823		       d0 0f		      BNE	.skipL0230
   4449  1825				   .condpart68
   4450  1825		       a5 94		      LDA	s2
   4451  1827		       c9 00		      CMP	#$00
   4452  1829		       d0 09		      BNE	.skip68then
   4453  182b				   .condpart69
   4454  182b		       a5 95		      LDA	s3
   4455  182d		       c9 00		      CMP	#$00
   4456  182f		       d0 03		      BNE	.skip69then
   4457  1831				   .condpart70
   4458  1831		       4c 49 18 	      jmp	._skip_death
   4459  1834
   4460  1834				   .skip69then
   4461  1834				   .skip68then
   4462  1834				   .skipL0230
   4463  1834				   .L0231		;  if s1  =  $00  &&  s2  =  $00  &&  s3  =  $00 then goto __Game_Over_Loop
   4464  1834
   4465  1834		       a5 93		      LDA	s1
   4466  1836		       c9 00		      CMP	#$00
   4467  1838		       d0 0f		      BNE	.skipL0231
   4468  183a				   .condpart71
   4469  183a		       a5 94		      LDA	s2
   4470  183c		       c9 00		      CMP	#$00
   4471  183e		       d0 09		      BNE	.skip71then
   4472  1840				   .condpart72
   4473  1840		       a5 95		      LDA	s3
   4474  1842		       c9 00		      CMP	#$00
   4475  1844		       d0 03		      BNE	.skip72then
   4476  1846				   .condpart73
   4477  1846		       4c 6b 1e 	      jmp	.__Game_Over_Loop
   4478  1849
   4479  1849				   .skip72then
   4480  1849				   .skip71then
   4481  1849				   .skipL0231
   4482  1849				   ._skip_death
   4483  1849							; _skip_death
   4484  1849
   4485  1849				   .
   4486  1849							; 
   4487  1849
   4488  1849				   .
   4489  1849							; 
   4490  1849
   4491  1849				   .
   4492  1849							; 
   4493  1849
   4494  1849				   .
   4495  1849							; 
   4496  1849
   4497  1849				   .L0232		;  player0x  =  PuppetX  +   ( rand & 127 )   +   ( rand / 16 )   :  player0y	=  PuppetY  +	( rand / 4 )   +   ( rand & 63 )   -  1  :  bally  =  250
   4498  1849
   4499  1849							; complex statement detected
   4500  1849		       a5 81		      LDA	PuppetX
   4501  184b		       48		      PHA
   4502  184c		       a5 a2		      lda	rand
   4503  184e		       4a		      lsr
   4504  184f					      ifconst	rand16
   4505  184f		       26 ed		      rol	rand16
   4506  1851					      endif
   4507  1851		       90 02		      bcc	*+4
   4508  1853		       49 b4		      eor	#$B4
   4509  1855		       85 a2		      sta	rand
   4510  1857					      ifconst	rand16
   4511  1857		       45 ed		      eor	rand16
   4512  1859					      endif
   4513  1859		       29 7f		      AND	#127
   4514  185b		       ba		      TSX
   4515  185c		       e8		      INX
   4516  185d		       9a		      TXS
   4517  185e		       18		      CLC
   4518  185f		       75 00		      ADC	$00,x
   4519  1861		       48		      PHA
   4520  1862		       a5 a2		      lda	rand
   4521  1864		       4a		      lsr
   4522  1865					      ifconst	rand16
   4523  1865		       26 ed		      rol	rand16
   4524  1867					      endif
   4525  1867		       90 02		      bcc	*+4
   4526  1869		       49 b4		      eor	#$B4
   4527  186b		       85 a2		      sta	rand
   4528  186d					      ifconst	rand16
   4529  186d		       45 ed		      eor	rand16
   4530  186f					      endif
   4531  186f		       4a		      lsr
   4532  1870		       4a		      lsr
   4533  1871		       4a		      lsr
   4534  1872		       4a		      lsr
   4535  1873		       ba		      TSX
   4536  1874		       e8		      INX
   4537  1875		       9a		      TXS
   4538  1876		       18		      CLC
   4539  1877		       75 00		      ADC	$00,x
   4540  1879		       85 80		      STA	player0x
   4541  187b							; complex statement detected
   4542  187b		       a5 86		      LDA	PuppetY
   4543  187d		       48		      PHA
   4544  187e		       a5 a2		      lda	rand
   4545  1880		       4a		      lsr
   4546  1881					      ifconst	rand16
   4547  1881		       26 ed		      rol	rand16
   4548  1883					      endif
   4549  1883		       90 02		      bcc	*+4
   4550  1885		       49 b4		      eor	#$B4
   4551  1887		       85 a2		      sta	rand
   4552  1889					      ifconst	rand16
   4553  1889		       45 ed		      eor	rand16
   4554  188b					      endif
   4555  188b		       4a		      lsr
   4556  188c		       4a		      lsr
   4557  188d		       ba		      TSX
   4558  188e		       e8		      INX
   4559  188f		       9a		      TXS
   4560  1890		       18		      CLC
   4561  1891		       75 00		      ADC	$00,x
   4562  1893		       48		      PHA
   4563  1894		       a5 a2		      lda	rand
   4564  1896		       4a		      lsr
   4565  1897					      ifconst	rand16
   4566  1897		       26 ed		      rol	rand16
   4567  1899					      endif
   4568  1899		       90 02		      bcc	*+4
   4569  189b		       49 b4		      eor	#$B4
   4570  189d		       85 a2		      sta	rand
   4571  189f					      ifconst	rand16
   4572  189f		       45 ed		      eor	rand16
   4573  18a1					      endif
   4574  18a1		       29 3f		      AND	#63
   4575  18a3		       ba		      TSX
   4576  18a4		       e8		      INX
   4577  18a5		       9a		      TXS
   4578  18a6		       18		      CLC
   4579  18a7		       75 00		      ADC	$00,x
   4580  18a9		       38		      SEC
   4581  18aa		       e9 01		      SBC	#1
   4582  18ac		       85 85		      STA	player0y
   4583  18ae		       a9 fa		      LDA	#250
   4584  18b0		       85 89		      STA	bally
   4585  18b2				   .
   4586  18b2							; 
   4587  18b2
   4588  18b2				   .
   4589  18b2							; 
   4590  18b2
   4591  18b2				   .
   4592  18b2							; 
   4593  18b2
   4594  18b2				   .
   4595  18b2							; 
   4596  18b2
   4597  18b2				   .L0233		;  if _Sound0 then goto __Skip_Players_Touch
   4598  18b2
   4599  18b2		       a5 d6		      LDA	_Sound0
   4600  18b4		       f0 03		      BEQ	.skipL0233
   4601  18b6				   .condpart74
   4602  18b6		       4c cb 18 	      jmp	.__Skip_Players_Touch
   4603  18b9
   4604  18b9				   .skipL0233
   4605  18b9				   .
   4606  18b9							; 
   4607  18b9
   4608  18b9				   .L0234		;  _Sound0  =	2  :  _SoundCounter0  =  10
   4609  18b9
   4610  18b9		       a9 02		      LDA	#2
   4611  18bb		       85 d6		      STA	_Sound0
   4612  18bd		       a9 0a		      LDA	#10
   4613  18bf		       85 d7		      STA	_SoundCounter0
   4614  18c1				   .
   4615  18c1							; 
   4616  18c1
   4617  18c1				   .L0235		;  _C0  =  7  :  _V0  =  12  :  _F0  =  12
   4618  18c1
   4619  18c1		       a9 07		      LDA	#7
   4620  18c3		       85 d8		      STA	_C0
   4621  18c5		       a9 0c		      LDA	#12
   4622  18c7		       85 d9		      STA	_V0
   4623  18c9		       85 da		      STA	_F0
   4624  18cb				   .
   4625  18cb							; 
   4626  18cb
   4627  18cb				   .__Skip_Players_Touch
   4628  18cb							; __Skip_Players_Touch
   4629  18cb
   4630  18cb				   .
   4631  18cb							; 
   4632  18cb
   4633  18cb				   .
   4634  18cb							; 
   4635  18cb
   4636  18cb				   .
   4637  18cb							; 
   4638  18cb
   4639  18cb				   .
   4640  18cb							; 
   4641  18cb
   4642  18cb				   .
   4643  18cb							; 
   4644  18cb
   4645  18cb				   .
   4646  18cb							; 
   4647  18cb
   4648  18cb				   .
   4649  18cb							; 
   4650  18cb
   4651  18cb				   .
   4652  18cb							; 
   4653  18cb
   4654  18cb				   .
   4655  18cb							; 
   4656  18cb
   4657  18cb				   .L0236		;  if _Sound0	<>  1 then goto __Skip_Sound1
   4658  18cb
   4659  18cb		       a5 d6		      LDA	_Sound0
   4660  18cd		       c9 01		      CMP	#1
   4661  18cf		       f0 03		      BEQ	.skipL0236
   4662  18d1				   .condpart75
   4663  18d1		       4c fe 18 	      jmp	.__Skip_Sound1
   4664  18d4
   4665  18d4				   .skipL0236
   4666  18d4				   .
   4667  18d4							; 
   4668  18d4
   4669  18d4				   .
   4670  18d4							; 
   4671  18d4
   4672  18d4				   .
   4673  18d4							; 
   4674  18d4
   4675  18d4				   .
   4676  18d4							; 
   4677  18d4
   4678  18d4				   .L0237		;  _F0  =  _F0  ^  5
   4679  18d4
   4680  18d4		       a5 da		      LDA	_F0
   4681  18d6		       49 05		      EOR	#5
   4682  18d8		       85 da		      STA	_F0
   4683  18da				   .
   4684  18da							; 
   4685  18da
   4686  18da				   .
   4687  18da							; 
   4688  18da
   4689  18da				   .
   4690  18da							; 
   4691  18da
   4692  18da				   .
   4693  18da							; 
   4694  18da
   4695  18da				   .L0238		;  AUDC0  =  _C0  :  AUDV0  =	_V0  :	AUDF0  =  _F0
   4696  18da
   4697  18da		       a5 d8		      LDA	_C0
   4698  18dc		       85 15		      STA	AUDC0
   4699  18de		       a5 d9		      LDA	_V0
   4700  18e0		       85 19		      STA	AUDV0
   4701  18e2		       a5 da		      LDA	_F0
   4702  18e4		       85 17		      STA	AUDF0
   4703  18e6				   .
   4704  18e6							; 
   4705  18e6
   4706  18e6				   .
   4707  18e6							; 
   4708  18e6
   4709  18e6				   .
   4710  18e6							; 
   4711  18e6
   4712  18e6				   .
   4713  18e6							; 
   4714  18e6
   4715  18e6				   .L0239		;  _V0  =  _V0  -  1  :  if _V0  <  2 then _V0  =  2
   4716  18e6
   4717  18e6		       c6 d9		      DEC	_V0
   4718  18e8		       a5 d9		      LDA	_V0
   4719  18ea		       c9 02		      CMP	#2
   4720  18ec		       b0 04		      BCS	.skipL0239
   4721  18ee				   .condpart76
   4722  18ee		       a9 02		      LDA	#2
   4723  18f0		       85 d9		      STA	_V0
   4724  18f2				   .skipL0239
   4725  18f2				   .
   4726  18f2							; 
   4727  18f2
   4728  18f2				   .
   4729  18f2							; 
   4730  18f2
   4731  18f2				   .
   4732  18f2							; 
   4733  18f2
   4734  18f2				   .
   4735  18f2							; 
   4736  18f2
   4737  18f2				   .L0240		;  _SoundCounter0  =  _SoundCounter0  -  1
   4738  18f2
   4739  18f2		       c6 d7		      DEC	_SoundCounter0
   4740  18f4				   .
   4741  18f4							; 
   4742  18f4
   4743  18f4				   .
   4744  18f4							; 
   4745  18f4
   4746  18f4				   .
   4747  18f4							; 
   4748  18f4
   4749  18f4				   .
   4750  18f4							; 
   4751  18f4
   4752  18f4				   .L0241		;  if !_SoundCounter0 then _Sound0  =	0  :  AUDV0  =	0
   4753  18f4
   4754  18f4		       a5 d7		      LDA	_SoundCounter0
   4755  18f6		       d0 06		      BNE	.skipL0241
   4756  18f8				   .condpart77
   4757  18f8		       a9 00		      LDA	#0
   4758  18fa		       85 d6		      STA	_Sound0
   4759  18fc		       85 19		      STA	AUDV0
   4760  18fe				   .skipL0241
   4761  18fe				   .
   4762  18fe							; 
   4763  18fe
   4764  18fe				   .__Skip_Sound1
   4765  18fe							; __Skip_Sound1
   4766  18fe
   4767  18fe				   .
   4768  18fe							; 
   4769  18fe
   4770  18fe				   .
   4771  18fe							; 
   4772  18fe
   4773  18fe				   .
   4774  18fe							; 
   4775  18fe
   4776  18fe				   .
   4777  18fe							; 
   4778  18fe
   4779  18fe				   .
   4780  18fe							; 
   4781  18fe
   4782  18fe				   .
   4783  18fe							; 
   4784  18fe
   4785  18fe				   .
   4786  18fe							; 
   4787  18fe
   4788  18fe				   .
   4789  18fe							; 
   4790  18fe
   4791  18fe				   .
   4792  18fe							; 
   4793  18fe
   4794  18fe				   .
   4795  18fe							; 
   4796  18fe
   4797  18fe				   .
   4798  18fe							; 
   4799  18fe
   4800  18fe				   .L0242		;  if _Sound0	<>  2 then goto __Skip_Sound2
   4801  18fe
   4802  18fe		       a5 d6		      LDA	_Sound0
   4803  1900		       c9 02		      CMP	#2
   4804  1902		       f0 03		      BEQ	.skipL0242
   4805  1904				   .condpart78
   4806  1904		       4c 35 19 	      jmp	.__Skip_Sound2
   4807  1907
   4808  1907				   .skipL0242
   4809  1907				   .
   4810  1907							; 
   4811  1907
   4812  1907				   .
   4813  1907							; 
   4814  1907
   4815  1907				   .
   4816  1907							; 
   4817  1907
   4818  1907				   .
   4819  1907							; 
   4820  1907
   4821  1907				   .L0243		;  AUDC0  =  _C0  :  AUDV0  =	_V0  :	AUDF0  =  _F0
   4822  1907
   4823  1907		       a5 d8		      LDA	_C0
   4824  1909		       85 15		      STA	AUDC0
   4825  190b		       a5 d9		      LDA	_V0
   4826  190d		       85 19		      STA	AUDV0
   4827  190f		       a5 da		      LDA	_F0
   4828  1911		       85 17		      STA	AUDF0
   4829  1913				   .
   4830  1913							; 
   4831  1913
   4832  1913				   .
   4833  1913							; 
   4834  1913
   4835  1913				   .
   4836  1913							; 
   4837  1913
   4838  1913				   .
   4839  1913							; 
   4840  1913
   4841  1913				   .L0244		;  _V0  =  _V0  -  1  :  if _V0  <  2 then _V0  =  2
   4842  1913
   4843  1913		       c6 d9		      DEC	_V0
   4844  1915		       a5 d9		      LDA	_V0
   4845  1917		       c9 02		      CMP	#2
   4846  1919		       b0 04		      BCS	.skipL0244
   4847  191b				   .condpart79
   4848  191b		       a9 02		      LDA	#2
   4849  191d		       85 d9		      STA	_V0
   4850  191f				   .skipL0244
   4851  191f				   .
   4852  191f							; 
   4853  191f
   4854  191f				   .
   4855  191f							; 
   4856  191f
   4857  191f				   .
   4858  191f							; 
   4859  191f
   4860  191f				   .
   4861  191f							; 
   4862  191f
   4863  191f				   .L0245		;  _SoundCounter0  =  _SoundCounter0  -  1
   4864  191f
   4865  191f		       c6 d7		      DEC	_SoundCounter0
   4866  1921				   .
   4867  1921							; 
   4868  1921
   4869  1921				   .
   4870  1921							; 
   4871  1921
   4872  1921				   .
   4873  1921							; 
   4874  1921
   4875  1921				   .
   4876  1921							; 
   4877  1921
   4878  1921				   .
   4879  1921							; 
   4880  1921
   4881  1921				   .L0246		;  if !_SoundCounter0 then _Sound0  =	0  :  AUDV0  =	0  :  if _Bit7_Last_Life{7} then _Bit2_Game_Over{2}  =	1
   4882  1921
   4883  1921		       a5 d7		      LDA	_SoundCounter0
   4884  1923		       d0 10		      BNE	.skipL0246
   4885  1925				   .condpart80
   4886  1925		       a9 00		      LDA	#0
   4887  1927		       85 d6		      STA	_Sound0
   4888  1929		       85 19		      STA	AUDV0
   4889  192b		       24 ec		      BIT	_Bit7_Last_Life
   4890  192d		       10 06		      BPL	.skip80then
   4891  192f				   .condpart81
   4892  192f		       a5 ec		      LDA	_Bit2_Game_Over
   4893  1931		       09 04		      ORA	#4
   4894  1933		       85 ec		      STA	_Bit2_Game_Over
   4895  1935				   .skip80then
   4896  1935				   .skipL0246
   4897  1935				   .
   4898  1935							; 
   4899  1935
   4900  1935				   .__Skip_Sound2
   4901  1935							; __Skip_Sound2
   4902  1935
   4903  1935				   .
   4904  1935							; 
   4905  1935
   4906  1935				   .
   4907  1935							; 
   4908  1935
   4909  1935				   .
   4910  1935							; 
   4911  1935
   4912  1935				   .
   4913  1935							; 
   4914  1935
   4915  1935				   .
   4916  1935							; 
   4917  1935
   4918  1935				   .L0247		;  if switchselect then goto __AP_Skip_Pause
   4919  1935
   4920  1935		       a9 02		      lda	#2
   4921  1937		       2c 82 02 	      bit	SWCHB
   4922  193a		       d0 03		      BNE	.skipL0247
   4923  193c				   .condpart82
   4924  193c		       4c a8 19 	      jmp	.__AP_Skip_Pause
   4925  193f
   4926  193f				   .skipL0247
   4927  193f				   .
   4928  193f							; 
   4929  193f
   4930  193f				   .
   4931  193f							; 
   4932  193f
   4933  193f				   .
   4934  193f							; 
   4935  193f
   4936  193f				   .L0248		;  _Bit1_BW_Check{1}  =  0
   4937  193f
   4938  193f		       a5 e0		      LDA	_Bit1_BW_Check
   4939  1941		       29 fd		      AND	#253
   4940  1943		       85 e0		      STA	_Bit1_BW_Check
   4941  1945				   .
   4942  1945							; 
   4943  1945
   4944  1945				   .L0249		;  if switchbw then _Bit1_BW_Check{1}	=  1
   4945  1945
   4946  1945		       a9 08		      lda	#8
   4947  1947		       2c 82 02 	      bit	SWCHB
   4948  194a		       d0 06		      BNE	.skipL0249
   4949  194c				   .condpart83
   4950  194c		       a5 e0		      LDA	_Bit1_BW_Check
   4951  194e		       09 02		      ORA	#2
   4952  1950		       85 e0		      STA	_Bit1_BW_Check
   4953  1952				   .skipL0249
   4954  1952				   .
   4955  1952							; 
   4956  1952
   4957  1952				   .
   4958  1952							; 
   4959  1952
   4960  1952				   .
   4961  1952							; 
   4962  1952
   4963  1952				   .
   4964  1952							; 
   4965  1952
   4966  1952				   .
   4967  1952							; 
   4968  1952
   4969  1952				   .L0250		;  if _Bit0_BW_Mem{0} then if !_Bit1_BW_Check{1} then goto __Pause_Setup bank3
   4970  1952
   4971  1952		       a5 e0		      LDA	_Bit0_BW_Mem
   4972  1954		       4a		      LSR
   4973  1955		       90 18		      BCC	.skipL0250
   4974  1957				   .condpart84
   4975  1957		       a5 e0		      LDA	_Bit1_BW_Check
   4976  1959		       29 02		      AND	#2
   4977  195b		       d0 12		      BNE	.skip84then
   4978  195d				   .condpart85
   4979  195d		       85 ee		      sta	temp7
   4980  195f		       a9 19		      lda	#>(.__Pause_Setup-1)
   4981  1961		       48		      pha
   4982  1962		       a9 e9		      lda	#<(.__Pause_Setup-1)
   4983  1964		       48		      pha
   4984  1965		       a5 ee		      lda	temp7
   4985  1967		       48		      pha
   4986  1968		       8a		      txa
   4987  1969		       48		      pha
   4988  196a		       a2 03		      ldx	#3
   4989  196c		       4c eb ff 	      jmp	BS_jsr
   4990  196f				   .skip84then
   4991  196f				   .skipL0250
   4992  196f				   .
   4993  196f							; 
   4994  196f
   4995  196f				   .L0251		;  if !_Bit0_BW_Mem{0} then if _Bit1_BW_Check{1} then goto __Pause_Setup bank3
   4996  196f
   4997  196f		       a5 e0		      LDA	_Bit0_BW_Mem
   4998  1971		       4a		      LSR
   4999  1972		       b0 18		      BCS	.skipL0251
   5000  1974				   .condpart86
   5001  1974		       a5 e0		      LDA	_Bit1_BW_Check
   5002  1976		       29 02		      AND	#2
   5003  1978		       f0 12		      BEQ	.skip86then
   5004  197a				   .condpart87
   5005  197a		       85 ee		      sta	temp7
   5006  197c		       a9 19		      lda	#>(.__Pause_Setup-1)
   5007  197e		       48		      pha
   5008  197f		       a9 e9		      lda	#<(.__Pause_Setup-1)
   5009  1981		       48		      pha
   5010  1982		       a5 ee		      lda	temp7
   5011  1984		       48		      pha
   5012  1985		       8a		      txa
   5013  1986		       48		      pha
   5014  1987		       a2 03		      ldx	#3
   5015  1989		       4c eb ff 	      jmp	BS_jsr
   5016  198c				   .skip86then
   5017  198c				   .skipL0251
   5018  198c				   .
   5019  198c							; 
   5020  198c
   5021  198c				   .
   5022  198c							; 
   5023  198c
   5024  198c				   .
   5025  198c							; 
   5026  198c
   5027  198c				   .
   5028  198c							; 
   5029  198c
   5030  198c				   .L0252		;  if joy1fire  &&  !_Bit1_FireB_Restrainer{1} then goto __Pause_Setup bank3
   5031  198c
   5032  198c		       24 0d		      bit	INPT5
   5033  198e		       30 18		      BMI	.skipL0252
   5034  1990				   .condpart88
   5035  1990		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   5036  1992		       29 02		      AND	#2
   5037  1994		       d0 12		      BNE	.skip88then
   5038  1996				   .condpart89
   5039  1996		       85 ee		      sta	temp7
   5040  1998		       a9 19		      lda	#>(.__Pause_Setup-1)
   5041  199a		       48		      pha
   5042  199b		       a9 e9		      lda	#<(.__Pause_Setup-1)
   5043  199d		       48		      pha
   5044  199e		       a5 ee		      lda	temp7
   5045  19a0		       48		      pha
   5046  19a1		       8a		      txa
   5047  19a2		       48		      pha
   5048  19a3		       a2 03		      ldx	#3
   5049  19a5		       4c eb ff 	      jmp	BS_jsr
   5050  19a8				   .skip88then
   5051  19a8				   .skipL0252
   5052  19a8				   .
   5053  19a8							; 
   5054  19a8
   5055  19a8				   .__AP_Skip_Pause
   5056  19a8							; __AP_Skip_Pause
   5057  19a8
   5058  19a8				   .
   5059  19a8							; 
   5060  19a8
   5061  19a8				   .
   5062  19a8							; 
   5063  19a8
   5064  19a8				   .
   5065  19a8							; 
   5066  19a8
   5067  19a8				   .
   5068  19a8							; 
   5069  19a8
   5070  19a8				   .
   5071  19a8							; 
   5072  19a8
   5073  19a8				   .
   5074  19a8							; 
   5075  19a8
   5076  19a8				   .
   5077  19a8							; 
   5078  19a8
   5079  19a8				   .L0253		;  drawscreen
   5080  19a8
   5081  19a8		       85 ee		      sta	temp7
   5082  19aa		       a9 19		      lda	#>(ret_point17-1)
   5083  19ac		       48		      pha
   5084  19ad		       a9 bf		      lda	#<(ret_point17-1)
   5085  19af		       48		      pha
   5086  19b0		       a9 f4		      lda	#>(drawscreen-1)
   5087  19b2		       48		      pha
   5088  19b3		       a9 3b		      lda	#<(drawscreen-1)
   5089  19b5		       48		      pha
   5090  19b6		       a5 ee		      lda	temp7
   5091  19b8		       48		      pha
   5092  19b9		       8a		      txa
   5093  19ba		       48		      pha
   5094  19bb		       a2 08		      ldx	#8
   5095  19bd		       4c eb ff 	      jmp	BS_jsr
   5096  19c0				   ret_point17
   5097  19c0				   .
   5098  19c0							; 
   5099  19c0
   5100  19c0				   .
   5101  19c0							; 
   5102  19c0
   5103  19c0				   .
   5104  19c0							; 
   5105  19c0
   5106  19c0				   .
   5107  19c0							; 
   5108  19c0
   5109  19c0				   .
   5110  19c0							; 
   5111  19c0
   5112  19c0				   .
   5113  19c0							; 
   5114  19c0
   5115  19c0				   .
   5116  19c0							; 
   5117  19c0
   5118  19c0				   .L0254		;  if _Bit2_Game_Over{2} then goto __Game_Over_Setup
   5119  19c0
   5120  19c0		       a5 ec		      LDA	_Bit2_Game_Over
   5121  19c2		       29 04		      AND	#4
   5122  19c4		       f0 03		      BEQ	.skipL0254
   5123  19c6				   .condpart90
   5124  19c6		       4c ab 1d 	      jmp	.__Game_Over_Setup
   5125  19c9
   5126  19c9				   .skipL0254
   5127  19c9				   .
   5128  19c9							; 
   5129  19c9
   5130  19c9				   .
   5131  19c9							; 
   5132  19c9
   5133  19c9				   .
   5134  19c9							; 
   5135  19c9
   5136  19c9				   .
   5137  19c9							; 
   5138  19c9
   5139  19c9				   .
   5140  19c9							; 
   5141  19c9
   5142  19c9				   .
   5143  19c9							; 
   5144  19c9
   5145  19c9				   .
   5146  19c9							; 
   5147  19c9
   5148  19c9				   .
   5149  19c9							; 
   5150  19c9
   5151  19c9				   .
   5152  19c9							; 
   5153  19c9
   5154  19c9				   .
   5155  19c9							; 
   5156  19c9
   5157  19c9				   .
   5158  19c9							; 
   5159  19c9
   5160  19c9				   .
   5161  19c9							; 
   5162  19c9
   5163  19c9				   .
   5164  19c9							; 
   5165  19c9
   5166  19c9				   .
   5167  19c9							; 
   5168  19c9
   5169  19c9				   .
   5170  19c9							; 
   5171  19c9
   5172  19c9				   .L0255		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   5173  19c9
   5174  19c9		       a9 01		      lda	#1
   5175  19cb		       2c 82 02 	      bit	SWCHB
   5176  19ce		       f0 09		      BEQ	.skipL0255
   5177  19d0				   .condpart91
   5178  19d0		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5179  19d2		       29 fe		      AND	#254
   5180  19d4		       85 ec		      STA	_Bit0_Reset_Restrainer
   5181  19d6		       4c 87 11 	      jmp	.__Main_Loop
   5182  19d9
   5183  19d9				   .skipL0255
   5184  19d9				   .
   5185  19d9							; 
   5186  19d9
   5187  19d9				   .
   5188  19d9							; 
   5189  19d9
   5190  19d9				   .
   5191  19d9							; 
   5192  19d9
   5193  19d9				   .
   5194  19d9							; 
   5195  19d9
   5196  19d9				   .
   5197  19d9							; 
   5198  19d9
   5199  19d9				   .L0256		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   5200  19d9
   5201  19d9		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5202  19db		       4a		      LSR
   5203  19dc		       90 03		      BCC	.skipL0256
   5204  19de				   .condpart92
   5205  19de		       4c 87 11 	      jmp	.__Main_Loop
   5206  19e1
   5207  19e1				   .skipL0256
   5208  19e1				   .
   5209  19e1							; 
   5210  19e1
   5211  19e1				   .
   5212  19e1							; 
   5213  19e1
   5214  19e1				   .
   5215  19e1							; 
   5216  19e1
   5217  19e1				   .
   5218  19e1							; 
   5219  19e1
   5220  19e1				   .L0257		;  _Bit2_Game_Over{2}	=  0
   5221  19e1
   5222  19e1		       a5 ec		      LDA	_Bit2_Game_Over
   5223  19e3		       29 fb		      AND	#251
   5224  19e5		       85 ec		      STA	_Bit2_Game_Over
   5225  19e7				   .
   5226  19e7							; 
   5227  19e7
   5228  19e7				   .
   5229  19e7							; 
   5230  19e7
   5231  19e7				   .
   5232  19e7							; 
   5233  19e7
   5234  19e7				   .
   5235  19e7							; 
   5236  19e7
   5237  19e7				   .L0258		;  goto __Start_Restart
   5238  19e7
   5239  19e7		       4c 00 10 	      jmp	.__Start_Restart
   5240  19ea
   5241  19ea				   .
   5242  19ea							; 
   5243  19ea
   5244  19ea				   .
   5245  19ea							; 
   5246  19ea
   5247  19ea				   .
   5248  19ea							; 
   5249  19ea
   5250  19ea				   .
   5251  19ea							; 
   5252  19ea
   5253  19ea				   .
   5254  19ea							; 
   5255  19ea
   5256  19ea				   .
   5257  19ea							; 
   5258  19ea
   5259  19ea				   .
   5260  19ea							; 
   5261  19ea
   5262  19ea				   .
   5263  19ea							; 
   5264  19ea
   5265  19ea				   .
   5266  19ea							; 
   5267  19ea
   5268  19ea				   .
   5269  19ea							; 
   5270  19ea
   5271  19ea				   .
   5272  19ea							; 
   5273  19ea
   5274  19ea				   .__Pause_Setup
   5275  19ea							; __Pause_Setup
   5276  19ea
   5277  19ea				   .
   5278  19ea							; 
   5279  19ea
   5280  19ea				   .
   5281  19ea							; 
   5282  19ea
   5283  19ea				   .
   5284  19ea							; 
   5285  19ea
   5286  19ea				   .
   5287  19ea							; 
   5288  19ea
   5289  19ea				   .L0259		;  AUDV0  =  0  :  AUDV1  =  0
   5290  19ea
   5291  19ea		       a9 00		      LDA	#0
   5292  19ec		       85 19		      STA	AUDV0
   5293  19ee		       85 1a		      STA	AUDV1
   5294  19f0				   .
   5295  19f0							; 
   5296  19f0
   5297  19f0				   .
   5298  19f0							; 
   5299  19f0
   5300  19f0				   .
   5301  19f0							; 
   5302  19f0
   5303  19f0				   .
   5304  19f0							; 
   5305  19f0
   5306  19f0				   .L0260		;  _Bit1_FireB_Restrainer{1}  =  1
   5307  19f0
   5308  19f0		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   5309  19f2		       09 02		      ORA	#2
   5310  19f4		       85 ec		      STA	_Bit1_FireB_Restrainer
   5311  19f6				   .
   5312  19f6							; 
   5313  19f6
   5314  19f6				   .
   5315  19f6							; 
   5316  19f6
   5317  19f6				   .
   5318  19f6							; 
   5319  19f6
   5320  19f6				   .
   5321  19f6							; 
   5322  19f6
   5323  19f6				   .L0261		;  _Pause_Counter_Tmp	=  0
   5324  19f6
   5325  19f6		       a9 00		      LDA	#0
   5326  19f8		       85 e1		      STA	_Pause_Counter_Tmp
   5327  19fa				   .
   5328  19fa							; 
   5329  19fa
   5330  19fa				   .
   5331  19fa							; 
   5332  19fa
   5333  19fa				   .
   5334  19fa							; 
   5335  19fa
   5336  19fa				   .
   5337  19fa							; 
   5338  19fa
   5339  19fa				   .L0262		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   5340  19fa
   5341  19fa							; complex statement detected
   5342  19fa		       a5 a2		      lda	rand
   5343  19fc		       4a		      lsr
   5344  19fd					      ifconst	rand16
   5345  19fd		       26 ed		      rol	rand16
   5346  19ff					      endif
   5347  19ff		       90 02		      bcc	*+4
   5348  1a01		       49 b4		      eor	#$B4
   5349  1a03		       85 a2		      sta	rand
   5350  1a05					      ifconst	rand16
   5351  1a05		       45 ed		      eor	rand16
   5352  1a07					      endif
   5353  1a07		       29 07		      AND	#7
   5354  1a09		       85 e0		      STA	_Pause_Color_Tmp
   5355  1a0b				   .L0263		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   5356  1a0b
   5357  1a0b		       a5 e0		      LDA	_Pause_Color_Tmp
   5358  1a0d		       85 dd		      STA	_Pause_Mem_Color_Tmp
   5359  1a0f				   .
   5360  1a0f							; 
   5361  1a0f
   5362  1a0f				   .
   5363  1a0f							; 
   5364  1a0f
   5365  1a0f				   .
   5366  1a0f							; 
   5367  1a0f
   5368  1a0f				   .
   5369  1a0f							; 
   5370  1a0f
   5371  1a0f				   .__Pause_Game
   5372  1a0f							; __Pause_Game
   5373  1a0f
   5374  1a0f				   .
   5375  1a0f							; 
   5376  1a0f
   5377  1a0f				   .
   5378  1a0f							; 
   5379  1a0f
   5380  1a0f				   .
   5381  1a0f							; 
   5382  1a0f
   5383  1a0f				   .
   5384  1a0f							; 
   5385  1a0f
   5386  1a0f				   .
   5387  1a0f							; 
   5388  1a0f
   5389  1a0f				   .
   5390  1a0f							; 
   5391  1a0f
   5392  1a0f				   .
   5393  1a0f							; 
   5394  1a0f
   5395  1a0f				   .
   5396  1a0f							; 
   5397  1a0f
   5398  1a0f				   .L0264		;  _Pause_Counter_Tmp	=  _Pause_Counter_Tmp  +  1
   5399  1a0f
   5400  1a0f		       e6 e1		      INC	_Pause_Counter_Tmp
   5401  1a11				   .
   5402  1a11							; 
   5403  1a11
   5404  1a11				   .
   5405  1a11							; 
   5406  1a11
   5407  1a11				   .
   5408  1a11							; 
   5409  1a11
   5410  1a11				   .
   5411  1a11							; 
   5412  1a11
   5413  1a11				   .L0265		;  if _Pause_Counter_Tmp  <  240 then goto __Skip_Pause_Counter
   5414  1a11
   5415  1a11		       a5 e1		      LDA	_Pause_Counter_Tmp
   5416  1a13		       c9 f0		      CMP	#240
   5417  1a15		       b0 03		      BCS	.skipL0265
   5418  1a17				   .condpart93
   5419  1a17		       4c 84 1a 	      jmp	.__Skip_Pause_Counter
   5420  1a1a
   5421  1a1a				   .skipL0265
   5422  1a1a				   .
   5423  1a1a							; 
   5424  1a1a
   5425  1a1a				   .
   5426  1a1a							; 
   5427  1a1a
   5428  1a1a				   .
   5429  1a1a							; 
   5430  1a1a
   5431  1a1a				   .
   5432  1a1a							; 
   5433  1a1a
   5434  1a1a				   .L0266		;  _Pause_Counter_Tmp	=  0
   5435  1a1a
   5436  1a1a		       a9 00		      LDA	#0
   5437  1a1c		       85 e1		      STA	_Pause_Counter_Tmp
   5438  1a1e				   .
   5439  1a1e							; 
   5440  1a1e
   5441  1a1e				   .
   5442  1a1e							; 
   5443  1a1e
   5444  1a1e				   .
   5445  1a1e							; 
   5446  1a1e
   5447  1a1e				   .
   5448  1a1e							; 
   5449  1a1e
   5450  1a1e				   .L0267		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   5451  1a1e
   5452  1a1e							; complex statement detected
   5453  1a1e		       a5 a2		      lda	rand
   5454  1a20		       4a		      lsr
   5455  1a21					      ifconst	rand16
   5456  1a21		       26 ed		      rol	rand16
   5457  1a23					      endif
   5458  1a23		       90 02		      bcc	*+4
   5459  1a25		       49 b4		      eor	#$B4
   5460  1a27		       85 a2		      sta	rand
   5461  1a29					      ifconst	rand16
   5462  1a29		       45 ed		      eor	rand16
   5463  1a2b					      endif
   5464  1a2b		       29 07		      AND	#7
   5465  1a2d		       85 e0		      STA	_Pause_Color_Tmp
   5466  1a2f				   .
   5467  1a2f							; 
   5468  1a2f
   5469  1a2f				   .
   5470  1a2f							; 
   5471  1a2f
   5472  1a2f				   .
   5473  1a2f							; 
   5474  1a2f
   5475  1a2f				   .
   5476  1a2f							; 
   5477  1a2f
   5478  1a2f				   .
   5479  1a2f							; 
   5480  1a2f
   5481  1a2f				   .
   5482  1a2f							; 
   5483  1a2f
   5484  1a2f				   .L0268		;  if _Pause_Color_Tmp  =  _Pause_Mem_Color_Tmp then _Pause_Color_Tmp	=  _Pause_Color_Tmp  +	 ( rand & 3 )	+  1  :  if _Pause_Color_Tmp  >  7 then _Pause_Color_Tmp  =  _Pause_Color_Tmp  -  8
   5485  1a2f
   5486  1a2f		       a5 e0		      LDA	_Pause_Color_Tmp
   5487  1a31		       c5 dd		      CMP	_Pause_Mem_Color_Tmp
   5488  1a33		       d0 2a		      BNE	.skipL0268
   5489  1a35				   .condpart94
   5490  1a35							; complex statement detected
   5491  1a35		       a5 e0		      LDA	_Pause_Color_Tmp
   5492  1a37		       48		      PHA
   5493  1a38		       a5 a2		      lda	rand
   5494  1a3a		       4a		      lsr
   5495  1a3b					      ifconst	rand16
   5496  1a3b		       26 ed		      rol	rand16
   5497  1a3d					      endif
   5498  1a3d		       90 02		      bcc	*+4
   5499  1a3f		       49 b4		      eor	#$B4
   5500  1a41		       85 a2		      sta	rand
   5501  1a43					      ifconst	rand16
   5502  1a43		       45 ed		      eor	rand16
   5503  1a45					      endif
   5504  1a45		       29 03		      AND	#3
   5505  1a47		       ba		      TSX
   5506  1a48		       e8		      INX
   5507  1a49		       9a		      TXS
   5508  1a4a		       18		      CLC
   5509  1a4b		       75 00		      ADC	$00,x
   5510  1a4d		       18		      CLC
   5511  1a4e		       69 01		      ADC	#1
   5512  1a50		       85 e0		      STA	_Pause_Color_Tmp
   5513  1a52		       a9 07		      LDA	#7
   5514  1a54		       c5 e0		      CMP	_Pause_Color_Tmp
   5515  1a56		       b0 07		      BCS	.skip94then
   5516  1a58				   .condpart95
   5517  1a58		       a5 e0		      LDA	_Pause_Color_Tmp
   5518  1a5a		       38		      SEC
   5519  1a5b		       e9 08		      SBC	#8
   5520  1a5d		       85 e0		      STA	_Pause_Color_Tmp
   5521  1a5f				   .skip94then
   5522  1a5f				   .skipL0268
   5523  1a5f				   .
   5524  1a5f							; 
   5525  1a5f
   5526  1a5f				   .
   5527  1a5f							; 
   5528  1a5f
   5529  1a5f				   .
   5530  1a5f							; 
   5531  1a5f
   5532  1a5f				   .
   5533  1a5f							; 
   5534  1a5f
   5535  1a5f				   .
   5536  1a5f							; 
   5537  1a5f
   5538  1a5f				   .L0269		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   5539  1a5f
   5540  1a5f		       a5 e0		      LDA	_Pause_Color_Tmp
   5541  1a61		       85 dd		      STA	_Pause_Mem_Color_Tmp
   5542  1a63				   .
   5543  1a63							; 
   5544  1a63
   5545  1a63				   .
   5546  1a63							; 
   5547  1a63
   5548  1a63				   .
   5549  1a63							; 
   5550  1a63
   5551  1a63				   .
   5552  1a63							; 
   5553  1a63
   5554  1a63				   .L0270		;  _Bit2_Pause_Clr_Scheme{2}  =  0
   5555  1a63
   5556  1a63		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   5557  1a65		       29 fb		      AND	#251
   5558  1a67		       85 e0		      STA	_Bit2_Pause_Clr_Scheme
   5559  1a69				   .
   5560  1a69							; 
   5561  1a69
   5562  1a69				   .L0271		;  temp5  =  rand  :  if temp5  <  128 then _Bit2_Pause_Clr_Scheme{2}	=  1
   5563  1a69
   5564  1a69		       a5 a2		      lda	rand
   5565  1a6b		       4a		      lsr
   5566  1a6c					      ifconst	rand16
   5567  1a6c		       26 ed		      rol	rand16
   5568  1a6e					      endif
   5569  1a6e		       90 02		      bcc	*+4
   5570  1a70		       49 b4		      eor	#$B4
   5571  1a72		       85 a2		      sta	rand
   5572  1a74					      ifconst	rand16
   5573  1a74		       45 ed		      eor	rand16
   5574  1a76					      endif
   5575  1a76		       85 a0		      STA	temp5
   5576  1a78		       a5 a0		      LDA	temp5
   5577  1a7a		       c9 80		      CMP	#128
   5578  1a7c		       b0 06		      BCS	.skipL0271
   5579  1a7e				   .condpart96
   5580  1a7e		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   5581  1a80		       09 04		      ORA	#4
   5582  1a82		       85 e0		      STA	_Bit2_Pause_Clr_Scheme
   5583  1a84				   .skipL0271
   5584  1a84				   .
   5585  1a84							; 
   5586  1a84
   5587  1a84				   .__Skip_Pause_Counter
   5588  1a84							; __Skip_Pause_Counter
   5589  1a84
   5590  1a84				   .
   5591  1a84							; 
   5592  1a84
   5593  1a84				   .
   5594  1a84							; 
   5595  1a84
   5596  1a84				   .
   5597  1a84							; 
   5598  1a84
   5599  1a84				   .
   5600  1a84							; 
   5601  1a84
   5602  1a84				   .
   5603  1a84							; 
   5604  1a84
   5605  1a84				   .
   5606  1a84							; 
   5607  1a84
   5608  1a84				   .L0272		;  on _Pause_Color_Tmp goto __Ps0 __Ps1 __Ps2 __Ps3 __Ps4 __Ps5 __Ps6 __Ps7
   5609  1a84
   5610  1a84		       a6 e0		      LDX	_Pause_Color_Tmp
   5611  1a86		       bd 8f 1a 	      LDA	.L0272jumptablehi,x
   5612  1a89		       48		      PHA
   5613  1a8a		       bd 97 1a 	      LDA	.L0272jumptablelo,x
   5614  1a8d		       48		      PHA
   5615  1a8e		       60		      RTS
   5616  1a8f				   .L0272jumptablehi
   5617  1a8f		       1b		      .byte.b	>(.__Ps0-1)
   5618  1a90		       1b		      .byte.b	>(.__Ps1-1)
   5619  1a91		       1c		      .byte.b	>(.__Ps2-1)
   5620  1a92		       1c		      .byte.b	>(.__Ps3-1)
   5621  1a93		       1c		      .byte.b	>(.__Ps4-1)
   5622  1a94		       1c		      .byte.b	>(.__Ps5-1)
   5623  1a95		       1d		      .byte.b	>(.__Ps6-1)
   5624  1a96		       1d		      .byte.b	>(.__Ps7-1)
   5625  1a97				   .L0272jumptablelo
   5626  1a97		       b2		      .byte.b	<(.__Ps0-1)
   5627  1a98		       f1		      .byte.b	<(.__Ps1-1)
   5628  1a99		       30		      .byte.b	<(.__Ps2-1)
   5629  1a9a		       6f		      .byte.b	<(.__Ps3-1)
   5630  1a9b		       ae		      .byte.b	<(.__Ps4-1)
   5631  1a9c		       ed		      .byte.b	<(.__Ps5-1)
   5632  1a9d		       2c		      .byte.b	<(.__Ps6-1)
   5633  1a9e		       6b		      .byte.b	<(.__Ps7-1)
   5634  1a9f				   .
   5635  1a9f							; 
   5636  1a9f
   5637  1a9f				   .__Got_Pause_Colors
   5638  1a9f							; __Got_Pause_Colors
   5639  1a9f
   5640  1a9f				   .
   5641  1a9f							; 
   5642  1a9f
   5643  1a9f				   .
   5644  1a9f							; 
   5645  1a9f
   5646  1a9f				   .
   5647  1a9f							; 
   5648  1a9f
   5649  1a9f				   .
   5650  1a9f							; 
   5651  1a9f
   5652  1a9f				   .
   5653  1a9f							; 
   5654  1a9f
   5655  1a9f				   .
   5656  1a9f							; 
   5657  1a9f
   5658  1a9f				   .
   5659  1a9f							; 
   5660  1a9f
   5661  1a9f				   .__PG00
   5662  1a9f							; __PG00
   5663  1a9f
   5664  1a9f				   .L0273		;  player0:
   5665  1a9f
   5666  1a9f		       a2 ca		      LDX	#<playerL0273_0
   5667  1aa1		       86 8a		      STX	player0pointerlo
   5668  1aa3		       a9 f5		      LDA	#>playerL0273_0
   5669  1aa5		       85 8b		      STA	player0pointerhi
   5670  1aa7		       a9 13		      LDA	#19
   5671  1aa9		       85 8e		      STA	player0height
   5672  1aab				   .L0274		;  goto __PG_Frame_Done
   5673  1aab
   5674  1aab		       4c d7 11 	      jmp	.__PG_Frame_Done
   5675  1aae
   5676  1aae				   .
   5677  1aae							; 
   5678  1aae
   5679  1aae				   .
   5680  1aae							; 
   5681  1aae
   5682  1aae				   .__PG01
   5683  1aae							; __PG01
   5684  1aae
   5685  1aae				   .L0275		;  player0:
   5686  1aae
   5687  1aae		       a2 de		      LDX	#<playerL0275_0
   5688  1ab0		       86 8a		      STX	player0pointerlo
   5689  1ab2		       a9 f5		      LDA	#>playerL0275_0
   5690  1ab4		       85 8b		      STA	player0pointerhi
   5691  1ab6		       a9 13		      LDA	#19
   5692  1ab8		       85 8e		      STA	player0height
   5693  1aba				   .L0276		;  goto __PG_Frame_Done
   5694  1aba
   5695  1aba		       4c d7 11 	      jmp	.__PG_Frame_Done
   5696  1abd
   5697  1abd				   .
   5698  1abd							; 
   5699  1abd
   5700  1abd				   .
   5701  1abd							; 
   5702  1abd
   5703  1abd				   .__PG02
   5704  1abd							; __PG02
   5705  1abd
   5706  1abd				   .L0277		;  REFP0  =  8
   5707  1abd
   5708  1abd		       a9 08		      LDA	#8
   5709  1abf		       85 0b		      STA	REFP0
   5710  1ac1				   .L0278		;  player0:
   5711  1ac1
   5712  1ac1		       a2 00		      LDX	#<playerL0278_0
   5713  1ac3		       86 8a		      STX	player0pointerlo
   5714  1ac5		       a9 f6		      LDA	#>playerL0278_0
   5715  1ac7		       85 8b		      STA	player0pointerhi
   5716  1ac9		       a9 13		      LDA	#19
   5717  1acb		       85 8e		      STA	player0height
   5718  1acd				   .L0279		;  goto __PG_Frame_Done
   5719  1acd
   5720  1acd		       4c d7 11 	      jmp	.__PG_Frame_Done
   5721  1ad0
   5722  1ad0				   .
   5723  1ad0							; 
   5724  1ad0
   5725  1ad0				   .
   5726  1ad0							; 
   5727  1ad0
   5728  1ad0				   .
   5729  1ad0							; 
   5730  1ad0
   5731  1ad0				   .__PG03
   5732  1ad0							; __PG03
   5733  1ad0
   5734  1ad0				   .L0280		;  REFP0  =  8
   5735  1ad0
   5736  1ad0		       a9 08		      LDA	#8
   5737  1ad2		       85 0b		      STA	REFP0
   5738  1ad4				   .L0281		;  player0:
   5739  1ad4
   5740  1ad4		       a2 14		      LDX	#<playerL0281_0
   5741  1ad6		       86 8a		      STX	player0pointerlo
   5742  1ad8		       a9 f6		      LDA	#>playerL0281_0
   5743  1ada		       85 8b		      STA	player0pointerhi
   5744  1adc		       a9 13		      LDA	#19
   5745  1ade		       85 8e		      STA	player0height
   5746  1ae0				   .L0282		;  goto __PG_Frame_Done
   5747  1ae0
   5748  1ae0		       4c d7 11 	      jmp	.__PG_Frame_Done
   5749  1ae3
   5750  1ae3				   .
   5751  1ae3							; 
   5752  1ae3
   5753  1ae3				   .
   5754  1ae3							; 
   5755  1ae3
   5756  1ae3				   .__Lvl_2
   5757  1ae3							; __Lvl_2
   5758  1ae3
   5759  1ae3				   .L0283		;  PuppetY  =	30  :  PuppetX	=  80  :  player0x  =  200  :  player0y  =  200
   5760  1ae3
   5761  1ae3		       a9 1e		      LDA	#30
   5762  1ae5		       85 86		      STA	PuppetY
   5763  1ae7		       a9 50		      LDA	#80
   5764  1ae9		       85 81		      STA	PuppetX
   5765  1aeb		       a9 c8		      LDA	#200
   5766  1aed		       85 80		      STA	player0x
   5767  1aef		       85 85		      STA	player0y
   5768  1af1				   .L0284		;  pfclear
   5769  1af1
   5770  1af1		       a9 00		      LDA	#0
   5771  1af3		       85 ee		      sta	temp7
   5772  1af5		       a9 1b		      lda	#>(ret_point18-1)
   5773  1af7		       48		      pha
   5774  1af8		       a9 0a		      lda	#<(ret_point18-1)
   5775  1afa		       48		      pha
   5776  1afb		       a9 f2		      lda	#>(pfclear-1)
   5777  1afd		       48		      pha
   5778  1afe		       a9 8f		      lda	#<(pfclear-1)
   5779  1b00		       48		      pha
   5780  1b01		       a5 ee		      lda	temp7
   5781  1b03		       48		      pha
   5782  1b04		       8a		      txa
   5783  1b05		       48		      pha
   5784  1b06		       a2 08		      ldx	#8
   5785  1b08		       4c eb ff 	      jmp	BS_jsr
   5786  1b0b				   ret_point18
   5787  1b0b				   .L0285		;  playfieldpos  =  8
   5788  1b0b
   5789  1b0b		       a9 08		      LDA	#8
   5790  1b0d		       85 ef		      STA	playfieldpos
   5791  1b0f				   .L0286		;  COLUBK  =  $02
   5792  1b0f
   5793  1b0f		       a9 02		      LDA	#$02
   5794  1b11		       85 09		      STA	COLUBK
   5795  1b13				   .L0287		;  pfcolors:
   5796  1b13
   5797  1b13		       a9 00		      lda	# $00
   5798  1b15		       85 08		      sta	COLUPF
   5799  1b17				  -	      ifconst	pfres
   5800  1b17				  -	      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   5801  1b17					      else
   5802  1b17		       a9 f5		      lda	#>(pfcolorlabel13-83)
   5803  1b19					      endif
   5804  1b19		       85 f1		      sta	pfcolortable+1
   5805  1b1b				  -	      ifconst	pfres
   5806  1b1b				  -	      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   5807  1b1b					      else
   5808  1b1b		       a9 05		      lda	#<(pfcolorlabel13-83)
   5809  1b1d					      endif
   5810  1b1d		       85 f0		      sta	pfcolortable
   5811  1b1f				   .
   5812  1b1f							; 
   5813  1b1f
   5814  1b1f				   .
   5815  1b1f							; 
   5816  1b1f
   5817  1b1f				   .L0288		;  playfield:
   5818  1b1f
   5819  1b1f				  -	      ifconst	pfres
   5820  1b1f				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5821  1b1f					      else
   5822  1b1f		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5823  1b21					      endif
   5824  1b21		       4c 50 1b 	      jmp	pflabel1
   5825  1b24				   PF_data1
   5826  1b24		       00 1e		      .byte.b	%00000000, %00011110
   5827  1b26					      if	(pfwidth>2)
   5828  1b26		       1e 00		      .byte.b	%00011110, %00000000
   5829  1b28					      endif
   5830  1b28		       00 02		      .byte.b	%00000000, %00000010
   5831  1b2a					      if	(pfwidth>2)
   5832  1b2a		       02 00		      .byte.b	%00000010, %00000000
   5833  1b2c					      endif
   5834  1b2c		       00 02		      .byte.b	%00000000, %00000010
   5835  1b2e					      if	(pfwidth>2)
   5836  1b2e		       02 00		      .byte.b	%00000010, %00000000
   5837  1b30					      endif
   5838  1b30		       00 02		      .byte.b	%00000000, %00000010
   5839  1b32					      if	(pfwidth>2)
   5840  1b32		       02 00		      .byte.b	%00000010, %00000000
   5841  1b34					      endif
   5842  1b34		       ff 03		      .byte.b	%11111111, %00000011
   5843  1b36					      if	(pfwidth>2)
   5844  1b36		       03 ff		      .byte.b	%00000011, %11111111
   5845  1b38					      endif
   5846  1b38		       00 00		      .byte.b	%00000000, %00000000
   5847  1b3a					      if	(pfwidth>2)
   5848  1b3a		       00 00		      .byte.b	%00000000, %00000000
   5849  1b3c					      endif
   5850  1b3c		       00 00		      .byte.b	%00000000, %00000000
   5851  1b3e					      if	(pfwidth>2)
   5852  1b3e		       00 00		      .byte.b	%00000000, %00000000
   5853  1b40					      endif
   5854  1b40		       00 00		      .byte.b	%00000000, %00000000
   5855  1b42					      if	(pfwidth>2)
   5856  1b42		       00 00		      .byte.b	%00000000, %00000000
   5857  1b44					      endif
   5858  1b44		       00 00		      .byte.b	%00000000, %00000000
   5859  1b46					      if	(pfwidth>2)
   5860  1b46		       00 00		      .byte.b	%00000000, %00000000
   5861  1b48					      endif
   5862  1b48		       00 00		      .byte.b	%00000000, %00000000
   5863  1b4a					      if	(pfwidth>2)
   5864  1b4a		       00 00		      .byte.b	%00000000, %00000000
   5865  1b4c					      endif
   5866  1b4c		       ff ff		      .byte.b	%11111111, %11111111
   5867  1b4e					      if	(pfwidth>2)
   5868  1b4e		       ff ff		      .byte.b	%11111111, %11111111
   5869  1b50					      endif
   5870  1b50				   pflabel1
   5871  1b50		       bd 24 1b 	      lda	PF_data1,x
   5872  1b53		       95 a4		      sta	playfield,x
   5873  1b55		       ca		      dex
   5874  1b56		       10 f8		      bpl	pflabel1
   5875  1b58				   .L0289		;  drawscreen
   5876  1b58
   5877  1b58		       85 ee		      sta	temp7
   5878  1b5a		       a9 1b		      lda	#>(ret_point19-1)
   5879  1b5c		       48		      pha
   5880  1b5d		       a9 6f		      lda	#<(ret_point19-1)
   5881  1b5f		       48		      pha
   5882  1b60		       a9 f4		      lda	#>(drawscreen-1)
   5883  1b62		       48		      pha
   5884  1b63		       a9 3b		      lda	#<(drawscreen-1)
   5885  1b65		       48		      pha
   5886  1b66		       a5 ee		      lda	temp7
   5887  1b68		       48		      pha
   5888  1b69		       8a		      txa
   5889  1b6a		       48		      pha
   5890  1b6b		       a2 08		      ldx	#8
   5891  1b6d		       4c eb ff 	      jmp	BS_jsr
   5892  1b70				   ret_point19
   5893  1b70				   .
   5894  1b70							; 
   5895  1b70
   5896  1b70				   .L0290		;  return
   5897  1b70
   5898  1b70		       ba		      tsx
   5899  1b71		       b5 02		      lda	2,x	; check return address
   5900  1b73		       49 1b		      eor	#(>*)	; vs. current PCH
   5901  1b75		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5902  1b77		       f0 03		      beq	*+5	; if equal, do normal return
   5903  1b79		       4c dd ff 	      JMP	BS_return
   5904  1b7c		       60		      RTS
   5905  1b7d				   .
   5906  1b7d							; 
   5907  1b7d
   5908  1b7d				   .
   5909  1b7d							; 
   5910  1b7d
   5911  1b7d				   .
   5912  1b7d							; 
   5913  1b7d
   5914  1b7d				   .
   5915  1b7d							; 
   5916  1b7d
   5917  1b7d				   .
   5918  1b7d							; 
   5919  1b7d
   5920  1b7d				   .
   5921  1b7d							; 
   5922  1b7d
   5923  1b7d				   .
   5924  1b7d							; 
   5925  1b7d
   5926  1b7d				   .
   5927  1b7d							; 
   5928  1b7d
   5929  1b7d				   .
   5930  1b7d							; 
   5931  1b7d
   5932  1b7d				   .L0291		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Pause_Game
   5933  1b7d
   5934  1b7d		       24 0c		      bit	INPT4
   5935  1b7f		       10 09		      BPL	.skipL0291
   5936  1b81				   .condpart97
   5937  1b81		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   5938  1b83		       29 fd		      AND	#253
   5939  1b85		       85 ec		      STA	_Bit1_FireB_Restrainer
   5940  1b87		       4c 0f 1a 	      jmp	.__Pause_Game
   5941  1b8a
   5942  1b8a				   .skipL0291
   5943  1b8a				   .
   5944  1b8a							; 
   5945  1b8a
   5946  1b8a				   .
   5947  1b8a							; 
   5948  1b8a
   5949  1b8a				   .
   5950  1b8a							; 
   5951  1b8a
   5952  1b8a				   .
   5953  1b8a							; 
   5954  1b8a
   5955  1b8a				   .
   5956  1b8a							; 
   5957  1b8a
   5958  1b8a				   .L0292		;  if _Bit1_FireB_Restrainer{1} then goto __Pause_Game
   5959  1b8a
   5960  1b8a		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   5961  1b8c		       29 02		      AND	#2
   5962  1b8e		       f0 03		      BEQ	.skipL0292
   5963  1b90				   .condpart98
   5964  1b90		       4c 0f 1a 	      jmp	.__Pause_Game
   5965  1b93
   5966  1b93				   .skipL0292
   5967  1b93				   .
   5968  1b93							; 
   5969  1b93
   5970  1b93				   .
   5971  1b93							; 
   5972  1b93
   5973  1b93				   .
   5974  1b93							; 
   5975  1b93
   5976  1b93				   .
   5977  1b93							; 
   5978  1b93
   5979  1b93				   .L0293		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   5980  1b93
   5981  1b93		       a5 e0		      LDA	_Bit0_BW_Mem
   5982  1b95		       29 fe		      AND	#254
   5983  1b97		       85 e0		      STA	_Bit0_BW_Mem
   5984  1b99		       a9 08		      lda	#8
   5985  1b9b		       2c 82 02 	      bit	SWCHB
   5986  1b9e		       d0 06		      BNE	.skipL0293
   5987  1ba0				   .condpart99
   5988  1ba0		       a5 e0		      LDA	_Bit0_BW_Mem
   5989  1ba2		       09 01		      ORA	#1
   5990  1ba4		       85 e0		      STA	_Bit0_BW_Mem
   5991  1ba6				   .skipL0293
   5992  1ba6				   .
   5993  1ba6							; 
   5994  1ba6
   5995  1ba6				   .
   5996  1ba6							; 
   5997  1ba6
   5998  1ba6				   .
   5999  1ba6							; 
   6000  1ba6
   6001  1ba6				   .
   6002  1ba6							; 
   6003  1ba6
   6004  1ba6				   .
   6005  1ba6							; 
   6006  1ba6
   6007  1ba6				   .
   6008  1ba6							; 
   6009  1ba6
   6010  1ba6				   .
   6011  1ba6							; 
   6012  1ba6
   6013  1ba6				   .
   6014  1ba6							; 
   6015  1ba6
   6016  1ba6				   .
   6017  1ba6							; 
   6018  1ba6
   6019  1ba6				   .
   6020  1ba6							; 
   6021  1ba6
   6022  1ba6				   .
   6023  1ba6							; 
   6024  1ba6
   6025  1ba6				   .
   6026  1ba6							; 
   6027  1ba6
   6028  1ba6				   .
   6029  1ba6							; 
   6030  1ba6
   6031  1ba6				   .
   6032  1ba6							; 
   6033  1ba6
   6034  1ba6				   .
   6035  1ba6							; 
   6036  1ba6
   6037  1ba6				   .
   6038  1ba6							; 
   6039  1ba6
   6040  1ba6				   .__Restore_Game_from_Pause
   6041  1ba6							; __Restore_Game_from_Pause
   6042  1ba6
   6043  1ba6				   .
   6044  1ba6							; 
   6045  1ba6
   6046  1ba6				   .
   6047  1ba6							; 
   6048  1ba6
   6049  1ba6				   .
   6050  1ba6							; 
   6051  1ba6
   6052  1ba6				   .
   6053  1ba6							; 
   6054  1ba6
   6055  1ba6				   .
   6056  1ba6							; 
   6057  1ba6
   6058  1ba6				   .
   6059  1ba6							; 
   6060  1ba6
   6061  1ba6				   .L0294		;  _Bit1_FireB_Restrainer{1}  =  1
   6062  1ba6
   6063  1ba6		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   6064  1ba8		       09 02		      ORA	#2
   6065  1baa		       85 ec		      STA	_Bit1_FireB_Restrainer
   6066  1bac				   .
   6067  1bac							; 
   6068  1bac
   6069  1bac				   .
   6070  1bac							; 
   6071  1bac
   6072  1bac				   .
   6073  1bac							; 
   6074  1bac
   6075  1bac				   .
   6076  1bac							; 
   6077  1bac
   6078  1bac				   .
   6079  1bac							; 
   6080  1bac
   6081  1bac				   .
   6082  1bac							; 
   6083  1bac
   6084  1bac				   .L0295		;  scorecolor	=  $1C
   6085  1bac
   6086  1bac		       a9 1c		      LDA	#$1C
   6087  1bae		       85 a3		      STA	scorecolor
   6088  1bb0				   .
   6089  1bb0							; 
   6090  1bb0
   6091  1bb0				   .
   6092  1bb0							; 
   6093  1bb0
   6094  1bb0				   .L0296		;  goto __Main_Loop
   6095  1bb0
   6096  1bb0		       4c 87 11 	      jmp	.__Main_Loop
   6097  1bb3
   6098  1bb3				   .
   6099  1bb3							; 
   6100  1bb3
   6101  1bb3				   .
   6102  1bb3							; 
   6103  1bb3
   6104  1bb3				   .
   6105  1bb3							; 
   6106  1bb3
   6107  1bb3				   .
   6108  1bb3							; 
   6109  1bb3
   6110  1bb3				   .
   6111  1bb3							; 
   6112  1bb3
   6113  1bb3				   .
   6114  1bb3							; 
   6115  1bb3
   6116  1bb3				   .
   6117  1bb3							; 
   6118  1bb3
   6119  1bb3				   .
   6120  1bb3							; 
   6121  1bb3
   6122  1bb3				   .
   6123  1bb3							; 
   6124  1bb3
   6125  1bb3				   .
   6126  1bb3							; 
   6127  1bb3
   6128  1bb3				   .
   6129  1bb3							; 
   6130  1bb3
   6131  1bb3				   .__Ps0
   6132  1bb3							; __Ps0
   6133  1bb3
   6134  1bb3				   .
   6135  1bb3							; 
   6136  1bb3
   6137  1bb3				   .L0297		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps0B
   6138  1bb3
   6139  1bb3		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   6140  1bb5		       29 04		      AND	#4
   6141  1bb7		       f0 03		      BEQ	.skipL0297
   6142  1bb9				   .condpart100
   6143  1bb9		       4c d7 1b 	      jmp	.__Ps0B
   6144  1bbc
   6145  1bbc				   .skipL0297
   6146  1bbc				   .
   6147  1bbc							; 
   6148  1bbc
   6149  1bbc				   .L0298		;  pfcolors:
   6150  1bbc
   6151  1bbc		       a9 0c		      lda	# $0C
   6152  1bbe		       85 08		      sta	COLUPF
   6153  1bc0				  -	      ifconst	pfres
   6154  1bc0				  -	      lda	#>(pfcolorlabel13-130+pfres*pfwidth)
   6155  1bc0					      else
   6156  1bc0		       a9 f5		      lda	#>(pfcolorlabel13-82)
   6157  1bc2					      endif
   6158  1bc2		       85 f1		      sta	pfcolortable+1
   6159  1bc4				  -	      ifconst	pfres
   6160  1bc4				  -	      lda	#<(pfcolorlabel13-130+pfres*pfwidth)
   6161  1bc4					      else
   6162  1bc4		       a9 06		      lda	#<(pfcolorlabel13-82)
   6163  1bc6					      endif
   6164  1bc6		       85 f0		      sta	pfcolortable
   6165  1bc8				   .
   6166  1bc8							; 
   6167  1bc8
   6168  1bc8				   .L0299		;  COLUP0  =  $0C
   6169  1bc8
   6170  1bc8		       a9 0c		      LDA	#$0C
   6171  1bca		       85 06		      STA	COLUP0
   6172  1bcc				   .
   6173  1bcc							; 
   6174  1bcc
   6175  1bcc				   .L0300		;  COLUBK  =  $0A
   6176  1bcc
   6177  1bcc		       a9 0a		      LDA	#$0A
   6178  1bce		       85 09		      STA	COLUBK
   6179  1bd0				   .
   6180  1bd0							; 
   6181  1bd0
   6182  1bd0				   .L0301		;  scorecolor	=  $0C
   6183  1bd0
   6184  1bd0		       a9 0c		      LDA	#$0C
   6185  1bd2		       85 a3		      STA	scorecolor
   6186  1bd4				   .
   6187  1bd4							; 
   6188  1bd4
   6189  1bd4				   .L0302		;  goto __Got_Pause_Colors
   6190  1bd4
   6191  1bd4		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6192  1bd7
   6193  1bd7				   .
   6194  1bd7							; 
   6195  1bd7
   6196  1bd7				   .
   6197  1bd7							; 
   6198  1bd7
   6199  1bd7				   .
   6200  1bd7							; 
   6201  1bd7
   6202  1bd7				   .
   6203  1bd7							; 
   6204  1bd7
   6205  1bd7				   .
   6206  1bd7							; 
   6207  1bd7
   6208  1bd7				   .
   6209  1bd7							; 
   6210  1bd7
   6211  1bd7				   .
   6212  1bd7							; 
   6213  1bd7
   6214  1bd7				   .
   6215  1bd7							; 
   6216  1bd7
   6217  1bd7				   .__Ps0B
   6218  1bd7							; __Ps0B
   6219  1bd7
   6220  1bd7				   .
   6221  1bd7							; 
   6222  1bd7
   6223  1bd7				   .L0303		;  pfcolors:
   6224  1bd7
   6225  1bd7		       a9 0a		      lda	# $0A
   6226  1bd9		       85 08		      sta	COLUPF
   6227  1bdb				  -	      ifconst	pfres
   6228  1bdb				  -	      lda	#>(pfcolorlabel13-129+pfres*pfwidth)
   6229  1bdb					      else
   6230  1bdb		       a9 f5		      lda	#>(pfcolorlabel13-81)
   6231  1bdd					      endif
   6232  1bdd		       85 f1		      sta	pfcolortable+1
   6233  1bdf				  -	      ifconst	pfres
   6234  1bdf				  -	      lda	#<(pfcolorlabel13-129+pfres*pfwidth)
   6235  1bdf					      else
   6236  1bdf		       a9 07		      lda	#<(pfcolorlabel13-81)
   6237  1be1					      endif
   6238  1be1		       85 f0		      sta	pfcolortable
   6239  1be3				   .
   6240  1be3							; 
   6241  1be3
   6242  1be3				   .L0304		;  COLUP0  =  $0A
   6243  1be3
   6244  1be3		       a9 0a		      LDA	#$0A
   6245  1be5		       85 06		      STA	COLUP0
   6246  1be7				   .
   6247  1be7							; 
   6248  1be7
   6249  1be7				   .L0305		;  COLUBK  =  $0C
   6250  1be7
   6251  1be7		       a9 0c		      LDA	#$0C
   6252  1be9		       85 09		      STA	COLUBK
   6253  1beb				   .
   6254  1beb							; 
   6255  1beb
   6256  1beb				   .L0306		;  scorecolor	=  $0A
   6257  1beb
   6258  1beb		       a9 0a		      LDA	#$0A
   6259  1bed		       85 a3		      STA	scorecolor
   6260  1bef				   .
   6261  1bef							; 
   6262  1bef
   6263  1bef				   .L0307		;  goto __Got_Pause_Colors
   6264  1bef
   6265  1bef		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6266  1bf2
   6267  1bf2				   .
   6268  1bf2							; 
   6269  1bf2
   6270  1bf2				   .
   6271  1bf2							; 
   6272  1bf2
   6273  1bf2				   .
   6274  1bf2							; 
   6275  1bf2
   6276  1bf2				   .
   6277  1bf2							; 
   6278  1bf2
   6279  1bf2				   .
   6280  1bf2							; 
   6281  1bf2
   6282  1bf2				   .
   6283  1bf2							; 
   6284  1bf2
   6285  1bf2				   .
   6286  1bf2							; 
   6287  1bf2
   6288  1bf2				   .__Ps1
   6289  1bf2							; __Ps1
   6290  1bf2
   6291  1bf2				   .
   6292  1bf2							; 
   6293  1bf2
   6294  1bf2				   .L0308		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps1B
   6295  1bf2
   6296  1bf2		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   6297  1bf4		       29 04		      AND	#4
   6298  1bf6		       f0 03		      BEQ	.skipL0308
   6299  1bf8				   .condpart101
   6300  1bf8		       4c 16 1c 	      jmp	.__Ps1B
   6301  1bfb
   6302  1bfb				   .skipL0308
   6303  1bfb				   .
   6304  1bfb							; 
   6305  1bfb
   6306  1bfb				   .L0309		;  pfcolors:
   6307  1bfb
   6308  1bfb		       a9 3c		      lda	# $3C
   6309  1bfd		       85 08		      sta	COLUPF
   6310  1bff				  -	      ifconst	pfres
   6311  1bff				  -	      lda	#>(pfcolorlabel213-132+pfres*pfwidth)
   6312  1bff					      else
   6313  1bff		       a9 f6		      lda	#>(pfcolorlabel213-84)
   6314  1c01					      endif
   6315  1c01		       85 f1		      sta	pfcolortable+1
   6316  1c03				  -	      ifconst	pfres
   6317  1c03				  -	      lda	#<(pfcolorlabel213-132+pfres*pfwidth)
   6318  1c03					      else
   6319  1c03		       a9 04		      lda	#<(pfcolorlabel213-84)
   6320  1c05					      endif
   6321  1c05		       85 f0		      sta	pfcolortable
   6322  1c07				   .
   6323  1c07							; 
   6324  1c07
   6325  1c07				   .L0310		;  COLUP0  =  $3C
   6326  1c07
   6327  1c07		       a9 3c		      LDA	#$3C
   6328  1c09		       85 06		      STA	COLUP0
   6329  1c0b				   .
   6330  1c0b							; 
   6331  1c0b
   6332  1c0b				   .L0311		;  COLUBK  =  $3A
   6333  1c0b
   6334  1c0b		       a9 3a		      LDA	#$3A
   6335  1c0d		       85 09		      STA	COLUBK
   6336  1c0f				   .
   6337  1c0f							; 
   6338  1c0f
   6339  1c0f				   .L0312		;  scorecolor	=  $3C
   6340  1c0f
   6341  1c0f		       a9 3c		      LDA	#$3C
   6342  1c11		       85 a3		      STA	scorecolor
   6343  1c13				   .
   6344  1c13							; 
   6345  1c13
   6346  1c13				   .L0313		;  goto __Got_Pause_Colors
   6347  1c13
   6348  1c13		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6349  1c16
   6350  1c16				   .
   6351  1c16							; 
   6352  1c16
   6353  1c16				   .
   6354  1c16							; 
   6355  1c16
   6356  1c16				   .
   6357  1c16							; 
   6358  1c16
   6359  1c16				   .
   6360  1c16							; 
   6361  1c16
   6362  1c16				   .
   6363  1c16							; 
   6364  1c16
   6365  1c16				   .
   6366  1c16							; 
   6367  1c16
   6368  1c16				   .
   6369  1c16							; 
   6370  1c16
   6371  1c16				   .__Ps1B
   6372  1c16							; __Ps1B
   6373  1c16
   6374  1c16				   .
   6375  1c16							; 
   6376  1c16
   6377  1c16				   .L0314		;  pfcolors:
   6378  1c16
   6379  1c16		       a9 3a		      lda	# $3A
   6380  1c18		       85 08		      sta	COLUPF
   6381  1c1a				  -	      ifconst	pfres
   6382  1c1a				  -	      lda	#>(pfcolorlabel213-131+pfres*pfwidth)
   6383  1c1a					      else
   6384  1c1a		       a9 f6		      lda	#>(pfcolorlabel213-83)
   6385  1c1c					      endif
   6386  1c1c		       85 f1		      sta	pfcolortable+1
   6387  1c1e				  -	      ifconst	pfres
   6388  1c1e				  -	      lda	#<(pfcolorlabel213-131+pfres*pfwidth)
   6389  1c1e					      else
   6390  1c1e		       a9 05		      lda	#<(pfcolorlabel213-83)
   6391  1c20					      endif
   6392  1c20		       85 f0		      sta	pfcolortable
   6393  1c22				   .
   6394  1c22							; 
   6395  1c22
   6396  1c22				   .L0315		;  COLUP0  =  $3A
   6397  1c22
   6398  1c22		       a9 3a		      LDA	#$3A
   6399  1c24		       85 06		      STA	COLUP0
   6400  1c26				   .
   6401  1c26							; 
   6402  1c26
   6403  1c26				   .L0316		;  COLUBK  =  $3C
   6404  1c26
   6405  1c26		       a9 3c		      LDA	#$3C
   6406  1c28		       85 09		      STA	COLUBK
   6407  1c2a				   .
   6408  1c2a							; 
   6409  1c2a
   6410  1c2a				   .L0317		;  scorecolor	=  $3A
   6411  1c2a
   6412  1c2a		       a9 3a		      LDA	#$3A
   6413  1c2c		       85 a3		      STA	scorecolor
   6414  1c2e				   .
   6415  1c2e							; 
   6416  1c2e
   6417  1c2e				   .L0318		;  goto __Got_Pause_Colors
   6418  1c2e
   6419  1c2e		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6420  1c31
   6421  1c31				   .
   6422  1c31							; 
   6423  1c31
   6424  1c31				   .
   6425  1c31							; 
   6426  1c31
   6427  1c31				   .
   6428  1c31							; 
   6429  1c31
   6430  1c31				   .
   6431  1c31							; 
   6432  1c31
   6433  1c31				   .
   6434  1c31							; 
   6435  1c31
   6436  1c31				   .
   6437  1c31							; 
   6438  1c31
   6439  1c31				   .
   6440  1c31							; 
   6441  1c31
   6442  1c31				   .__Ps2
   6443  1c31							; __Ps2
   6444  1c31
   6445  1c31				   .
   6446  1c31							; 
   6447  1c31
   6448  1c31				   .L0319		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps2B
   6449  1c31
   6450  1c31		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   6451  1c33		       29 04		      AND	#4
   6452  1c35		       f0 03		      BEQ	.skipL0319
   6453  1c37				   .condpart102
   6454  1c37		       4c 55 1c 	      jmp	.__Ps2B
   6455  1c3a
   6456  1c3a				   .skipL0319
   6457  1c3a				   .
   6458  1c3a							; 
   6459  1c3a
   6460  1c3a				   .L0320		;  pfcolors:
   6461  1c3a
   6462  1c3a		       a9 6c		      lda	# $6C
   6463  1c3c		       85 08		      sta	COLUPF
   6464  1c3e				  -	      ifconst	pfres
   6465  1c3e				  -	      lda	#>(pfcolorlabel213-130+pfres*pfwidth)
   6466  1c3e					      else
   6467  1c3e		       a9 f6		      lda	#>(pfcolorlabel213-82)
   6468  1c40					      endif
   6469  1c40		       85 f1		      sta	pfcolortable+1
   6470  1c42				  -	      ifconst	pfres
   6471  1c42				  -	      lda	#<(pfcolorlabel213-130+pfres*pfwidth)
   6472  1c42					      else
   6473  1c42		       a9 06		      lda	#<(pfcolorlabel213-82)
   6474  1c44					      endif
   6475  1c44		       85 f0		      sta	pfcolortable
   6476  1c46				   .
   6477  1c46							; 
   6478  1c46
   6479  1c46				   .L0321		;  COLUP0  =  $6C
   6480  1c46
   6481  1c46		       a9 6c		      LDA	#$6C
   6482  1c48		       85 06		      STA	COLUP0
   6483  1c4a				   .
   6484  1c4a							; 
   6485  1c4a
   6486  1c4a				   .L0322		;  COLUBK  =  $6A
   6487  1c4a
   6488  1c4a		       a9 6a		      LDA	#$6A
   6489  1c4c		       85 09		      STA	COLUBK
   6490  1c4e				   .
   6491  1c4e							; 
   6492  1c4e
   6493  1c4e				   .L0323		;  scorecolor	=  $6C
   6494  1c4e
   6495  1c4e		       a9 6c		      LDA	#$6C
   6496  1c50		       85 a3		      STA	scorecolor
   6497  1c52				   .
   6498  1c52							; 
   6499  1c52
   6500  1c52				   .L0324		;  goto __Got_Pause_Colors
   6501  1c52
   6502  1c52		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6503  1c55
   6504  1c55				   .
   6505  1c55							; 
   6506  1c55
   6507  1c55				   .
   6508  1c55							; 
   6509  1c55
   6510  1c55				   .
   6511  1c55							; 
   6512  1c55
   6513  1c55				   .
   6514  1c55							; 
   6515  1c55
   6516  1c55				   .
   6517  1c55							; 
   6518  1c55
   6519  1c55				   .
   6520  1c55							; 
   6521  1c55
   6522  1c55				   .
   6523  1c55							; 
   6524  1c55
   6525  1c55				   .__Ps2B
   6526  1c55							; __Ps2B
   6527  1c55
   6528  1c55				   .
   6529  1c55							; 
   6530  1c55
   6531  1c55				   .L0325		;  pfcolors:
   6532  1c55
   6533  1c55		       a9 6a		      lda	# $6A
   6534  1c57		       85 08		      sta	COLUPF
   6535  1c59				  -	      ifconst	pfres
   6536  1c59				  -	      lda	#>(pfcolorlabel213-129+pfres*pfwidth)
   6537  1c59					      else
   6538  1c59		       a9 f6		      lda	#>(pfcolorlabel213-81)
   6539  1c5b					      endif
   6540  1c5b		       85 f1		      sta	pfcolortable+1
   6541  1c5d				  -	      ifconst	pfres
   6542  1c5d				  -	      lda	#<(pfcolorlabel213-129+pfres*pfwidth)
   6543  1c5d					      else
   6544  1c5d		       a9 07		      lda	#<(pfcolorlabel213-81)
   6545  1c5f					      endif
   6546  1c5f		       85 f0		      sta	pfcolortable
   6547  1c61				   .
   6548  1c61							; 
   6549  1c61
   6550  1c61				   .L0326		;  COLUP0  =  $6A
   6551  1c61
   6552  1c61		       a9 6a		      LDA	#$6A
   6553  1c63		       85 06		      STA	COLUP0
   6554  1c65				   .
   6555  1c65							; 
   6556  1c65
   6557  1c65				   .L0327		;  COLUBK  =  $6C
   6558  1c65
   6559  1c65		       a9 6c		      LDA	#$6C
   6560  1c67		       85 09		      STA	COLUBK
   6561  1c69				   .
   6562  1c69							; 
   6563  1c69
   6564  1c69				   .L0328		;  scorecolor	=  $6A
   6565  1c69
   6566  1c69		       a9 6a		      LDA	#$6A
   6567  1c6b		       85 a3		      STA	scorecolor
   6568  1c6d				   .
   6569  1c6d							; 
   6570  1c6d
   6571  1c6d				   .L0329		;  goto __Got_Pause_Colors
   6572  1c6d
   6573  1c6d		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6574  1c70
   6575  1c70				   .
   6576  1c70							; 
   6577  1c70
   6578  1c70				   .
   6579  1c70							; 
   6580  1c70
   6581  1c70				   .
   6582  1c70							; 
   6583  1c70
   6584  1c70				   .
   6585  1c70							; 
   6586  1c70
   6587  1c70				   .
   6588  1c70							; 
   6589  1c70
   6590  1c70				   .
   6591  1c70							; 
   6592  1c70
   6593  1c70				   .
   6594  1c70							; 
   6595  1c70
   6596  1c70				   .__Ps3
   6597  1c70							; __Ps3
   6598  1c70
   6599  1c70				   .
   6600  1c70							; 
   6601  1c70
   6602  1c70				   .L0330		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps3B
   6603  1c70
   6604  1c70		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   6605  1c72		       29 04		      AND	#4
   6606  1c74		       f0 03		      BEQ	.skipL0330
   6607  1c76				   .condpart103
   6608  1c76		       4c 94 1c 	      jmp	.__Ps3B
   6609  1c79
   6610  1c79				   .skipL0330
   6611  1c79				   .
   6612  1c79							; 
   6613  1c79
   6614  1c79				   .L0331		;  pfcolors:
   6615  1c79
   6616  1c79		       a9 9c		      lda	# $9C
   6617  1c7b		       85 08		      sta	COLUPF
   6618  1c7d				  -	      ifconst	pfres
   6619  1c7d				  -	      lda	#>(pfcolorlabel238-132+pfres*pfwidth)
   6620  1c7d					      else
   6621  1c7d		       a9 f6		      lda	#>(pfcolorlabel238-84)
   6622  1c7f					      endif
   6623  1c7f		       85 f1		      sta	pfcolortable+1
   6624  1c81				  -	      ifconst	pfres
   6625  1c81				  -	      lda	#<(pfcolorlabel238-132+pfres*pfwidth)
   6626  1c81					      else
   6627  1c81		       a9 30		      lda	#<(pfcolorlabel238-84)
   6628  1c83					      endif
   6629  1c83		       85 f0		      sta	pfcolortable
   6630  1c85				   .
   6631  1c85							; 
   6632  1c85
   6633  1c85				   .L0332		;  COLUP0  =  $9C
   6634  1c85
   6635  1c85		       a9 9c		      LDA	#$9C
   6636  1c87		       85 06		      STA	COLUP0
   6637  1c89				   .
   6638  1c89							; 
   6639  1c89
   6640  1c89				   .L0333		;  COLUBK  =  $9A
   6641  1c89
   6642  1c89		       a9 9a		      LDA	#$9A
   6643  1c8b		       85 09		      STA	COLUBK
   6644  1c8d				   .
   6645  1c8d							; 
   6646  1c8d
   6647  1c8d				   .L0334		;  scorecolor	=  $9C
   6648  1c8d
   6649  1c8d		       a9 9c		      LDA	#$9C
   6650  1c8f		       85 a3		      STA	scorecolor
   6651  1c91				   .
   6652  1c91							; 
   6653  1c91
   6654  1c91				   .L0335		;  goto __Got_Pause_Colors
   6655  1c91
   6656  1c91		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6657  1c94
   6658  1c94				   .
   6659  1c94							; 
   6660  1c94
   6661  1c94				   .
   6662  1c94							; 
   6663  1c94
   6664  1c94				   .
   6665  1c94							; 
   6666  1c94
   6667  1c94				   .
   6668  1c94							; 
   6669  1c94
   6670  1c94				   .
   6671  1c94							; 
   6672  1c94
   6673  1c94				   .
   6674  1c94							; 
   6675  1c94
   6676  1c94				   .
   6677  1c94							; 
   6678  1c94
   6679  1c94				   .__Ps3B
   6680  1c94							; __Ps3B
   6681  1c94
   6682  1c94				   .
   6683  1c94							; 
   6684  1c94
   6685  1c94				   .L0336		;  pfcolors:
   6686  1c94
   6687  1c94		       a9 9a		      lda	# $9A
   6688  1c96		       85 08		      sta	COLUPF
   6689  1c98				  -	      ifconst	pfres
   6690  1c98				  -	      lda	#>(pfcolorlabel238-131+pfres*pfwidth)
   6691  1c98					      else
   6692  1c98		       a9 f6		      lda	#>(pfcolorlabel238-83)
   6693  1c9a					      endif
   6694  1c9a		       85 f1		      sta	pfcolortable+1
   6695  1c9c				  -	      ifconst	pfres
   6696  1c9c				  -	      lda	#<(pfcolorlabel238-131+pfres*pfwidth)
   6697  1c9c					      else
   6698  1c9c		       a9 31		      lda	#<(pfcolorlabel238-83)
   6699  1c9e					      endif
   6700  1c9e		       85 f0		      sta	pfcolortable
   6701  1ca0				   .
   6702  1ca0							; 
   6703  1ca0
   6704  1ca0				   .L0337		;  COLUP0  =  $9A
   6705  1ca0
   6706  1ca0		       a9 9a		      LDA	#$9A
   6707  1ca2		       85 06		      STA	COLUP0
   6708  1ca4				   .
   6709  1ca4							; 
   6710  1ca4
   6711  1ca4				   .L0338		;  COLUBK  =  $9C
   6712  1ca4
   6713  1ca4		       a9 9c		      LDA	#$9C
   6714  1ca6		       85 09		      STA	COLUBK
   6715  1ca8				   .
   6716  1ca8							; 
   6717  1ca8
   6718  1ca8				   .L0339		;  scorecolor	=  $9A
   6719  1ca8
   6720  1ca8		       a9 9a		      LDA	#$9A
   6721  1caa		       85 a3		      STA	scorecolor
   6722  1cac				   .
   6723  1cac							; 
   6724  1cac
   6725  1cac				   .L0340		;  goto __Got_Pause_Colors
   6726  1cac
   6727  1cac		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6728  1caf
   6729  1caf				   .
   6730  1caf							; 
   6731  1caf
   6732  1caf				   .
   6733  1caf							; 
   6734  1caf
   6735  1caf				   .
   6736  1caf							; 
   6737  1caf
   6738  1caf				   .
   6739  1caf							; 
   6740  1caf
   6741  1caf				   .
   6742  1caf							; 
   6743  1caf
   6744  1caf				   .
   6745  1caf							; 
   6746  1caf
   6747  1caf				   .
   6748  1caf							; 
   6749  1caf
   6750  1caf				   .__Ps4
   6751  1caf							; __Ps4
   6752  1caf
   6753  1caf				   .
   6754  1caf							; 
   6755  1caf
   6756  1caf				   .L0341		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps4B
   6757  1caf
   6758  1caf		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   6759  1cb1		       29 04		      AND	#4
   6760  1cb3		       f0 03		      BEQ	.skipL0341
   6761  1cb5				   .condpart104
   6762  1cb5		       4c d3 1c 	      jmp	.__Ps4B
   6763  1cb8
   6764  1cb8				   .skipL0341
   6765  1cb8				   .
   6766  1cb8							; 
   6767  1cb8
   6768  1cb8				   .L0342		;  pfcolors:
   6769  1cb8
   6770  1cb8		       a9 cc		      lda	# $CC
   6771  1cba		       85 08		      sta	COLUPF
   6772  1cbc				  -	      ifconst	pfres
   6773  1cbc				  -	      lda	#>(pfcolorlabel238-130+pfres*pfwidth)
   6774  1cbc					      else
   6775  1cbc		       a9 f6		      lda	#>(pfcolorlabel238-82)
   6776  1cbe					      endif
   6777  1cbe		       85 f1		      sta	pfcolortable+1
   6778  1cc0				  -	      ifconst	pfres
   6779  1cc0				  -	      lda	#<(pfcolorlabel238-130+pfres*pfwidth)
   6780  1cc0					      else
   6781  1cc0		       a9 32		      lda	#<(pfcolorlabel238-82)
   6782  1cc2					      endif
   6783  1cc2		       85 f0		      sta	pfcolortable
   6784  1cc4				   .
   6785  1cc4							; 
   6786  1cc4
   6787  1cc4				   .L0343		;  COLUP0  =  $CC
   6788  1cc4
   6789  1cc4		       a9 cc		      LDA	#$CC
   6790  1cc6		       85 06		      STA	COLUP0
   6791  1cc8				   .
   6792  1cc8							; 
   6793  1cc8
   6794  1cc8				   .L0344		;  COLUBK  =  $CA
   6795  1cc8
   6796  1cc8		       a9 ca		      LDA	#$CA
   6797  1cca		       85 09		      STA	COLUBK
   6798  1ccc				   .
   6799  1ccc							; 
   6800  1ccc
   6801  1ccc				   .L0345		;  scorecolor	=  $CC
   6802  1ccc
   6803  1ccc		       a9 cc		      LDA	#$CC
   6804  1cce		       85 a3		      STA	scorecolor
   6805  1cd0				   .
   6806  1cd0							; 
   6807  1cd0
   6808  1cd0				   .L0346		;  goto __Got_Pause_Colors
   6809  1cd0
   6810  1cd0		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6811  1cd3
   6812  1cd3				   .
   6813  1cd3							; 
   6814  1cd3
   6815  1cd3				   .
   6816  1cd3							; 
   6817  1cd3
   6818  1cd3				   .
   6819  1cd3							; 
   6820  1cd3
   6821  1cd3				   .
   6822  1cd3							; 
   6823  1cd3
   6824  1cd3				   .
   6825  1cd3							; 
   6826  1cd3
   6827  1cd3				   .
   6828  1cd3							; 
   6829  1cd3
   6830  1cd3				   .
   6831  1cd3							; 
   6832  1cd3
   6833  1cd3				   .__Ps4B
   6834  1cd3							; __Ps4B
   6835  1cd3
   6836  1cd3				   .
   6837  1cd3							; 
   6838  1cd3
   6839  1cd3				   .L0347		;  pfcolors:
   6840  1cd3
   6841  1cd3		       a9 ca		      lda	# $CA
   6842  1cd5		       85 08		      sta	COLUPF
   6843  1cd7				  -	      ifconst	pfres
   6844  1cd7				  -	      lda	#>(pfcolorlabel238-129+pfres*pfwidth)
   6845  1cd7					      else
   6846  1cd7		       a9 f6		      lda	#>(pfcolorlabel238-81)
   6847  1cd9					      endif
   6848  1cd9		       85 f1		      sta	pfcolortable+1
   6849  1cdb				  -	      ifconst	pfres
   6850  1cdb				  -	      lda	#<(pfcolorlabel238-129+pfres*pfwidth)
   6851  1cdb					      else
   6852  1cdb		       a9 33		      lda	#<(pfcolorlabel238-81)
   6853  1cdd					      endif
   6854  1cdd		       85 f0		      sta	pfcolortable
   6855  1cdf				   .
   6856  1cdf							; 
   6857  1cdf
   6858  1cdf				   .L0348		;  COLUP0  =  $CA
   6859  1cdf
   6860  1cdf		       a9 ca		      LDA	#$CA
   6861  1ce1		       85 06		      STA	COLUP0
   6862  1ce3				   .
   6863  1ce3							; 
   6864  1ce3
   6865  1ce3				   .L0349		;  COLUBK  =  $CC
   6866  1ce3
   6867  1ce3		       a9 cc		      LDA	#$CC
   6868  1ce5		       85 09		      STA	COLUBK
   6869  1ce7				   .
   6870  1ce7							; 
   6871  1ce7
   6872  1ce7				   .L0350		;  scorecolor	=  $CA
   6873  1ce7
   6874  1ce7		       a9 ca		      LDA	#$CA
   6875  1ce9		       85 a3		      STA	scorecolor
   6876  1ceb				   .
   6877  1ceb							; 
   6878  1ceb
   6879  1ceb				   .L0351		;  goto __Got_Pause_Colors
   6880  1ceb
   6881  1ceb		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6882  1cee
   6883  1cee				   .
   6884  1cee							; 
   6885  1cee
   6886  1cee				   .
   6887  1cee							; 
   6888  1cee
   6889  1cee				   .
   6890  1cee							; 
   6891  1cee
   6892  1cee				   .
   6893  1cee							; 
   6894  1cee
   6895  1cee				   .
   6896  1cee							; 
   6897  1cee
   6898  1cee				   .
   6899  1cee							; 
   6900  1cee
   6901  1cee				   .
   6902  1cee							; 
   6903  1cee
   6904  1cee				   .__Ps5
   6905  1cee							; __Ps5
   6906  1cee
   6907  1cee				   .
   6908  1cee							; 
   6909  1cee
   6910  1cee				   .L0352		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps5B
   6911  1cee
   6912  1cee		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   6913  1cf0		       29 04		      AND	#4
   6914  1cf2		       f0 03		      BEQ	.skipL0352
   6915  1cf4				   .condpart105
   6916  1cf4		       4c 12 1d 	      jmp	.__Ps5B
   6917  1cf7
   6918  1cf7				   .skipL0352
   6919  1cf7				   .
   6920  1cf7							; 
   6921  1cf7
   6922  1cf7				   .L0353		;  pfcolors:
   6923  1cf7
   6924  1cf7		       a9 fc		      lda	# $FC
   6925  1cf9		       85 08		      sta	COLUPF
   6926  1cfb				  -	      ifconst	pfres
   6927  1cfb				  -	      lda	#>(pfcolorlabel263-132+pfres*pfwidth)
   6928  1cfb					      else
   6929  1cfb		       a9 f6		      lda	#>(pfcolorlabel263-84)
   6930  1cfd					      endif
   6931  1cfd		       85 f1		      sta	pfcolortable+1
   6932  1cff				  -	      ifconst	pfres
   6933  1cff				  -	      lda	#<(pfcolorlabel263-132+pfres*pfwidth)
   6934  1cff					      else
   6935  1cff		       a9 5c		      lda	#<(pfcolorlabel263-84)
   6936  1d01					      endif
   6937  1d01		       85 f0		      sta	pfcolortable
   6938  1d03				   .
   6939  1d03							; 
   6940  1d03
   6941  1d03				   .L0354		;  COLUP0  =  $FC
   6942  1d03
   6943  1d03		       a9 fc		      LDA	#$FC
   6944  1d05		       85 06		      STA	COLUP0
   6945  1d07				   .
   6946  1d07							; 
   6947  1d07
   6948  1d07				   .L0355		;  COLUBK  =  $FA
   6949  1d07
   6950  1d07		       a9 fa		      LDA	#$FA
   6951  1d09		       85 09		      STA	COLUBK
   6952  1d0b				   .
   6953  1d0b							; 
   6954  1d0b
   6955  1d0b				   .L0356		;  scorecolor	=  $FC
   6956  1d0b
   6957  1d0b		       a9 fc		      LDA	#$FC
   6958  1d0d		       85 a3		      STA	scorecolor
   6959  1d0f				   .
   6960  1d0f							; 
   6961  1d0f
   6962  1d0f				   .L0357		;  goto __Got_Pause_Colors
   6963  1d0f
   6964  1d0f		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   6965  1d12
   6966  1d12				   .
   6967  1d12							; 
   6968  1d12
   6969  1d12				   .
   6970  1d12							; 
   6971  1d12
   6972  1d12				   .
   6973  1d12							; 
   6974  1d12
   6975  1d12				   .
   6976  1d12							; 
   6977  1d12
   6978  1d12				   .
   6979  1d12							; 
   6980  1d12
   6981  1d12				   .
   6982  1d12							; 
   6983  1d12
   6984  1d12				   .
   6985  1d12							; 
   6986  1d12
   6987  1d12				   .__Ps5B
   6988  1d12							; __Ps5B
   6989  1d12
   6990  1d12				   .
   6991  1d12							; 
   6992  1d12
   6993  1d12				   .L0358		;  pfcolors:
   6994  1d12
   6995  1d12		       a9 fa		      lda	# $FA
   6996  1d14		       85 08		      sta	COLUPF
   6997  1d16				  -	      ifconst	pfres
   6998  1d16				  -	      lda	#>(pfcolorlabel263-131+pfres*pfwidth)
   6999  1d16					      else
   7000  1d16		       a9 f6		      lda	#>(pfcolorlabel263-83)
   7001  1d18					      endif
   7002  1d18		       85 f1		      sta	pfcolortable+1
   7003  1d1a				  -	      ifconst	pfres
   7004  1d1a				  -	      lda	#<(pfcolorlabel263-131+pfres*pfwidth)
   7005  1d1a					      else
   7006  1d1a		       a9 5d		      lda	#<(pfcolorlabel263-83)
   7007  1d1c					      endif
   7008  1d1c		       85 f0		      sta	pfcolortable
   7009  1d1e				   .
   7010  1d1e							; 
   7011  1d1e
   7012  1d1e				   .L0359		;  COLUP0  =  $FA
   7013  1d1e
   7014  1d1e		       a9 fa		      LDA	#$FA
   7015  1d20		       85 06		      STA	COLUP0
   7016  1d22				   .
   7017  1d22							; 
   7018  1d22
   7019  1d22				   .L0360		;  COLUBK  =  $FC
   7020  1d22
   7021  1d22		       a9 fc		      LDA	#$FC
   7022  1d24		       85 09		      STA	COLUBK
   7023  1d26				   .
   7024  1d26							; 
   7025  1d26
   7026  1d26				   .L0361		;  scorecolor	=  $FA
   7027  1d26
   7028  1d26		       a9 fa		      LDA	#$FA
   7029  1d28		       85 a3		      STA	scorecolor
   7030  1d2a				   .
   7031  1d2a							; 
   7032  1d2a
   7033  1d2a				   .L0362		;  goto __Got_Pause_Colors
   7034  1d2a
   7035  1d2a		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   7036  1d2d
   7037  1d2d				   .
   7038  1d2d							; 
   7039  1d2d
   7040  1d2d				   .
   7041  1d2d							; 
   7042  1d2d
   7043  1d2d				   .
   7044  1d2d							; 
   7045  1d2d
   7046  1d2d				   .
   7047  1d2d							; 
   7048  1d2d
   7049  1d2d				   .
   7050  1d2d							; 
   7051  1d2d
   7052  1d2d				   .
   7053  1d2d							; 
   7054  1d2d
   7055  1d2d				   .
   7056  1d2d							; 
   7057  1d2d
   7058  1d2d				   .__Ps6
   7059  1d2d							; __Ps6
   7060  1d2d
   7061  1d2d				   .
   7062  1d2d							; 
   7063  1d2d
   7064  1d2d				   .L0363		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps6B
   7065  1d2d
   7066  1d2d		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   7067  1d2f		       29 04		      AND	#4
   7068  1d31		       f0 03		      BEQ	.skipL0363
   7069  1d33				   .condpart106
   7070  1d33		       4c 51 1d 	      jmp	.__Ps6B
   7071  1d36
   7072  1d36				   .skipL0363
   7073  1d36				   .
   7074  1d36							; 
   7075  1d36
   7076  1d36				   .L0364		;  pfcolors:
   7077  1d36
   7078  1d36		       a9 8c		      lda	# $8C
   7079  1d38		       85 08		      sta	COLUPF
   7080  1d3a				  -	      ifconst	pfres
   7081  1d3a				  -	      lda	#>(pfcolorlabel263-130+pfres*pfwidth)
   7082  1d3a					      else
   7083  1d3a		       a9 f6		      lda	#>(pfcolorlabel263-82)
   7084  1d3c					      endif
   7085  1d3c		       85 f1		      sta	pfcolortable+1
   7086  1d3e				  -	      ifconst	pfres
   7087  1d3e				  -	      lda	#<(pfcolorlabel263-130+pfres*pfwidth)
   7088  1d3e					      else
   7089  1d3e		       a9 5e		      lda	#<(pfcolorlabel263-82)
   7090  1d40					      endif
   7091  1d40		       85 f0		      sta	pfcolortable
   7092  1d42				   .
   7093  1d42							; 
   7094  1d42
   7095  1d42				   .L0365		;  COLUP0  =  $8C
   7096  1d42
   7097  1d42		       a9 8c		      LDA	#$8C
   7098  1d44		       85 06		      STA	COLUP0
   7099  1d46				   .
   7100  1d46							; 
   7101  1d46
   7102  1d46				   .L0366		;  COLUBK  =  $8A
   7103  1d46
   7104  1d46		       a9 8a		      LDA	#$8A
   7105  1d48		       85 09		      STA	COLUBK
   7106  1d4a				   .
   7107  1d4a							; 
   7108  1d4a
   7109  1d4a				   .L0367		;  scorecolor	=  $8C
   7110  1d4a
   7111  1d4a		       a9 8c		      LDA	#$8C
   7112  1d4c		       85 a3		      STA	scorecolor
   7113  1d4e				   .
   7114  1d4e							; 
   7115  1d4e
   7116  1d4e				   .L0368		;  goto __Got_Pause_Colors
   7117  1d4e
   7118  1d4e		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   7119  1d51
   7120  1d51				   .
   7121  1d51							; 
   7122  1d51
   7123  1d51				   .
   7124  1d51							; 
   7125  1d51
   7126  1d51				   .
   7127  1d51							; 
   7128  1d51
   7129  1d51				   .
   7130  1d51							; 
   7131  1d51
   7132  1d51				   .
   7133  1d51							; 
   7134  1d51
   7135  1d51				   .
   7136  1d51							; 
   7137  1d51
   7138  1d51				   .
   7139  1d51							; 
   7140  1d51
   7141  1d51				   .__Ps6B
   7142  1d51							; __Ps6B
   7143  1d51
   7144  1d51				   .
   7145  1d51							; 
   7146  1d51
   7147  1d51				   .L0369		;  pfcolors:
   7148  1d51
   7149  1d51		       a9 8a		      lda	# $8A
   7150  1d53		       85 08		      sta	COLUPF
   7151  1d55				  -	      ifconst	pfres
   7152  1d55				  -	      lda	#>(pfcolorlabel263-129+pfres*pfwidth)
   7153  1d55					      else
   7154  1d55		       a9 f6		      lda	#>(pfcolorlabel263-81)
   7155  1d57					      endif
   7156  1d57		       85 f1		      sta	pfcolortable+1
   7157  1d59				  -	      ifconst	pfres
   7158  1d59				  -	      lda	#<(pfcolorlabel263-129+pfres*pfwidth)
   7159  1d59					      else
   7160  1d59		       a9 5f		      lda	#<(pfcolorlabel263-81)
   7161  1d5b					      endif
   7162  1d5b		       85 f0		      sta	pfcolortable
   7163  1d5d				   .
   7164  1d5d							; 
   7165  1d5d
   7166  1d5d				   .L0370		;  COLUP0  =  $8A
   7167  1d5d
   7168  1d5d		       a9 8a		      LDA	#$8A
   7169  1d5f		       85 06		      STA	COLUP0
   7170  1d61				   .
   7171  1d61							; 
   7172  1d61
   7173  1d61				   .L0371		;  COLUBK  =  $8C
   7174  1d61
   7175  1d61		       a9 8c		      LDA	#$8C
   7176  1d63		       85 09		      STA	COLUBK
   7177  1d65				   .
   7178  1d65							; 
   7179  1d65
   7180  1d65				   .L0372		;  scorecolor	=  $8A
   7181  1d65
   7182  1d65		       a9 8a		      LDA	#$8A
   7183  1d67		       85 a3		      STA	scorecolor
   7184  1d69				   .
   7185  1d69							; 
   7186  1d69
   7187  1d69				   .L0373		;  goto __Got_Pause_Colors
   7188  1d69
   7189  1d69		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   7190  1d6c
   7191  1d6c				   .
   7192  1d6c							; 
   7193  1d6c
   7194  1d6c				   .
   7195  1d6c							; 
   7196  1d6c
   7197  1d6c				   .
   7198  1d6c							; 
   7199  1d6c
   7200  1d6c				   .
   7201  1d6c							; 
   7202  1d6c
   7203  1d6c				   .
   7204  1d6c							; 
   7205  1d6c
   7206  1d6c				   .
   7207  1d6c							; 
   7208  1d6c
   7209  1d6c				   .
   7210  1d6c							; 
   7211  1d6c
   7212  1d6c				   .__Ps7
   7213  1d6c							; __Ps7
   7214  1d6c
   7215  1d6c				   .
   7216  1d6c							; 
   7217  1d6c
   7218  1d6c				   .L0374		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps7B
   7219  1d6c
   7220  1d6c		       a5 e0		      LDA	_Bit2_Pause_Clr_Scheme
   7221  1d6e		       29 04		      AND	#4
   7222  1d70		       f0 03		      BEQ	.skipL0374
   7223  1d72				   .condpart107
   7224  1d72		       4c 90 1d 	      jmp	.__Ps7B
   7225  1d75
   7226  1d75				   .skipL0374
   7227  1d75				   .
   7228  1d75							; 
   7229  1d75
   7230  1d75				   .L0375		;  pfcolors:
   7231  1d75
   7232  1d75		       a9 2c		      lda	# $2C
   7233  1d77		       85 08		      sta	COLUPF
   7234  1d79				  -	      ifconst	pfres
   7235  1d79				  -	      lda	#>(pfcolorlabel288-132+pfres*pfwidth)
   7236  1d79					      else
   7237  1d79		       a9 f7		      lda	#>(pfcolorlabel288-84)
   7238  1d7b					      endif
   7239  1d7b		       85 f1		      sta	pfcolortable+1
   7240  1d7d				  -	      ifconst	pfres
   7241  1d7d				  -	      lda	#<(pfcolorlabel288-132+pfres*pfwidth)
   7242  1d7d					      else
   7243  1d7d		       a9 04		      lda	#<(pfcolorlabel288-84)
   7244  1d7f					      endif
   7245  1d7f		       85 f0		      sta	pfcolortable
   7246  1d81				   .
   7247  1d81							; 
   7248  1d81
   7249  1d81				   .L0376		;  COLUP0  =  $2C
   7250  1d81
   7251  1d81		       a9 2c		      LDA	#$2C
   7252  1d83		       85 06		      STA	COLUP0
   7253  1d85				   .
   7254  1d85							; 
   7255  1d85
   7256  1d85				   .L0377		;  COLUBK  =  $2A
   7257  1d85
   7258  1d85		       a9 2a		      LDA	#$2A
   7259  1d87		       85 09		      STA	COLUBK
   7260  1d89				   .
   7261  1d89							; 
   7262  1d89
   7263  1d89				   .L0378		;  scorecolor	=  $2C
   7264  1d89
   7265  1d89		       a9 2c		      LDA	#$2C
   7266  1d8b		       85 a3		      STA	scorecolor
   7267  1d8d				   .
   7268  1d8d							; 
   7269  1d8d
   7270  1d8d				   .L0379		;  goto __Got_Pause_Colors
   7271  1d8d
   7272  1d8d		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   7273  1d90
   7274  1d90				   .
   7275  1d90							; 
   7276  1d90
   7277  1d90				   .
   7278  1d90							; 
   7279  1d90
   7280  1d90				   .
   7281  1d90							; 
   7282  1d90
   7283  1d90				   .
   7284  1d90							; 
   7285  1d90
   7286  1d90				   .
   7287  1d90							; 
   7288  1d90
   7289  1d90				   .
   7290  1d90							; 
   7291  1d90
   7292  1d90				   .
   7293  1d90							; 
   7294  1d90
   7295  1d90				   .__Ps7B
   7296  1d90							; __Ps7B
   7297  1d90
   7298  1d90				   .
   7299  1d90							; 
   7300  1d90
   7301  1d90				   .L0380		;  pfcolors:
   7302  1d90
   7303  1d90		       a9 2a		      lda	# $2A
   7304  1d92		       85 08		      sta	COLUPF
   7305  1d94				  -	      ifconst	pfres
   7306  1d94				  -	      lda	#>(pfcolorlabel288-131+pfres*pfwidth)
   7307  1d94					      else
   7308  1d94		       a9 f7		      lda	#>(pfcolorlabel288-83)
   7309  1d96					      endif
   7310  1d96		       85 f1		      sta	pfcolortable+1
   7311  1d98				  -	      ifconst	pfres
   7312  1d98				  -	      lda	#<(pfcolorlabel288-131+pfres*pfwidth)
   7313  1d98					      else
   7314  1d98		       a9 05		      lda	#<(pfcolorlabel288-83)
   7315  1d9a					      endif
   7316  1d9a		       85 f0		      sta	pfcolortable
   7317  1d9c				   .
   7318  1d9c							; 
   7319  1d9c
   7320  1d9c				   .L0381		;  COLUP0  =  $2A
   7321  1d9c
   7322  1d9c		       a9 2a		      LDA	#$2A
   7323  1d9e		       85 06		      STA	COLUP0
   7324  1da0				   .
   7325  1da0							; 
   7326  1da0
   7327  1da0				   .L0382		;  COLUBK  =  $2C
   7328  1da0
   7329  1da0		       a9 2c		      LDA	#$2C
   7330  1da2		       85 09		      STA	COLUBK
   7331  1da4				   .
   7332  1da4							; 
   7333  1da4
   7334  1da4				   .L0383		;  scorecolor	=  $2A
   7335  1da4
   7336  1da4		       a9 2a		      LDA	#$2A
   7337  1da6		       85 a3		      STA	scorecolor
   7338  1da8				   .
   7339  1da8							; 
   7340  1da8
   7341  1da8				   .L0384		;  goto __Got_Pause_Colors
   7342  1da8
   7343  1da8		       4c 9f 1a 	      jmp	.__Got_Pause_Colors
   7344  1dab
   7345  1dab				   .
   7346  1dab							; 
   7347  1dab
   7348  1dab				   .
   7349  1dab							; 
   7350  1dab
   7351  1dab				   .
   7352  1dab							; 
   7353  1dab
   7354  1dab				   .
   7355  1dab							; 
   7356  1dab
   7357  1dab				   .
   7358  1dab							; 
   7359  1dab
   7360  1dab				   .
   7361  1dab							; 
   7362  1dab
   7363  1dab				   .
   7364  1dab							; 
   7365  1dab
   7366  1dab				   .__Game_Over_Setup
   7367  1dab							; __Game_Over_Setup
   7368  1dab
   7369  1dab				   .
   7370  1dab							; 
   7371  1dab
   7372  1dab				   .
   7373  1dab							; 
   7374  1dab
   7375  1dab				   .
   7376  1dab							; 
   7377  1dab
   7378  1dab				   .
   7379  1dab							; 
   7380  1dab
   7381  1dab				   .
   7382  1dab							; 
   7383  1dab
   7384  1dab				   .
   7385  1dab							; 
   7386  1dab
   7387  1dab				   .L0385		;  if s1  >  _High_Score01 then goto __New_High_Score
   7388  1dab
   7389  1dab		       a5 e9		      LDA	_High_Score01
   7390  1dad		       c5 93		      CMP	s1
   7391  1daf		       b0 03		      BCS	.skipL0385
   7392  1db1				   .condpart108
   7393  1db1		       4c e4 1d 	      jmp	.__New_High_Score
   7394  1db4
   7395  1db4				   .skipL0385
   7396  1db4				   .L0386		;  if s1  <  _High_Score01 then goto __Skip_High_Score
   7397  1db4
   7398  1db4		       a5 93		      LDA	s1
   7399  1db6		       c5 e9		      CMP	_High_Score01
   7400  1db8		       b0 03		      BCS	.skipL0386
   7401  1dba				   .condpart109
   7402  1dba		       4c f0 1d 	      jmp	.__Skip_High_Score
   7403  1dbd
   7404  1dbd				   .skipL0386
   7405  1dbd				   .
   7406  1dbd							; 
   7407  1dbd
   7408  1dbd				   .
   7409  1dbd							; 
   7410  1dbd
   7411  1dbd				   .
   7412  1dbd							; 
   7413  1dbd
   7414  1dbd				   .
   7415  1dbd							; 
   7416  1dbd
   7417  1dbd				   .L0387		;  if s2  >  _High_Score02 then goto __New_High_Score
   7418  1dbd
   7419  1dbd		       a5 ea		      LDA	_High_Score02
   7420  1dbf		       c5 94		      CMP	s2
   7421  1dc1		       b0 03		      BCS	.skipL0387
   7422  1dc3				   .condpart110
   7423  1dc3		       4c e4 1d 	      jmp	.__New_High_Score
   7424  1dc6
   7425  1dc6				   .skipL0387
   7426  1dc6				   .L0388		;  if s2  <  _High_Score02 then goto __Skip_High_Score
   7427  1dc6
   7428  1dc6		       a5 94		      LDA	s2
   7429  1dc8		       c5 ea		      CMP	_High_Score02
   7430  1dca		       b0 03		      BCS	.skipL0388
   7431  1dcc				   .condpart111
   7432  1dcc		       4c f0 1d 	      jmp	.__Skip_High_Score
   7433  1dcf
   7434  1dcf				   .skipL0388
   7435  1dcf				   .
   7436  1dcf							; 
   7437  1dcf
   7438  1dcf				   .
   7439  1dcf							; 
   7440  1dcf
   7441  1dcf				   .
   7442  1dcf							; 
   7443  1dcf
   7444  1dcf				   .
   7445  1dcf							; 
   7446  1dcf
   7447  1dcf				   .L0389		;  if s3  >  _High_Score03 then goto __New_High_Score
   7448  1dcf
   7449  1dcf		       a5 eb		      LDA	_High_Score03
   7450  1dd1		       c5 95		      CMP	s3
   7451  1dd3		       b0 03		      BCS	.skipL0389
   7452  1dd5				   .condpart112
   7453  1dd5		       4c e4 1d 	      jmp	.__New_High_Score
   7454  1dd8
   7455  1dd8				   .skipL0389
   7456  1dd8				   .L0390		;  if s3  <  _High_Score03 then goto __Skip_High_Score
   7457  1dd8
   7458  1dd8		       a5 95		      LDA	s3
   7459  1dda		       c5 eb		      CMP	_High_Score03
   7460  1ddc		       b0 03		      BCS	.skipL0390
   7461  1dde				   .condpart113
   7462  1dde		       4c f0 1d 	      jmp	.__Skip_High_Score
   7463  1de1
   7464  1de1				   .skipL0390
   7465  1de1				   .
   7466  1de1							; 
   7467  1de1
   7468  1de1				   .
   7469  1de1							; 
   7470  1de1
   7471  1de1				   .
   7472  1de1							; 
   7473  1de1
   7474  1de1				   .
   7475  1de1							; 
   7476  1de1
   7477  1de1				   .L0391		;  goto __Skip_High_Score
   7478  1de1
   7479  1de1		       4c f0 1d 	      jmp	.__Skip_High_Score
   7480  1de4
   7481  1de4				   .
   7482  1de4							; 
   7483  1de4
   7484  1de4				   .__New_High_Score
   7485  1de4							; __New_High_Score
   7486  1de4
   7487  1de4				   .
   7488  1de4							; 
   7489  1de4
   7490  1de4				   .
   7491  1de4							; 
   7492  1de4
   7493  1de4				   .
   7494  1de4							; 
   7495  1de4
   7496  1de4				   .
   7497  1de4							; 
   7498  1de4
   7499  1de4				   .L0392		;  _High_Score01  =  s1  :  _High_Score02  =  s2  :  _High_Score03  =	s3
   7500  1de4
   7501  1de4		       a5 93		      LDA	s1
   7502  1de6		       85 e9		      STA	_High_Score01
   7503  1de8		       a5 94		      LDA	s2
   7504  1dea		       85 ea		      STA	_High_Score02
   7505  1dec		       a5 95		      LDA	s3
   7506  1dee		       85 eb		      STA	_High_Score03
   7507  1df0				   .
   7508  1df0							; 
   7509  1df0
   7510  1df0				   .__Skip_High_Score
   7511  1df0							; __Skip_High_Score
   7512  1df0
   7513  1df0				   .
   7514  1df0							; 
   7515  1df0
   7516  1df0				   .
   7517  1df0							; 
   7518  1df0
   7519  1df0				   .
   7520  1df0							; 
   7521  1df0
   7522  1df0				   .
   7523  1df0							; 
   7524  1df0
   7525  1df0				   .
   7526  1df0							; 
   7527  1df0
   7528  1df0				   .
   7529  1df0							; 
   7530  1df0
   7531  1df0				   .L0393		;  _Temp_Score01  =  s1  :  _Temp_Score02  =  s2  :  _Temp_Score03  =	s3
   7532  1df0
   7533  1df0		       a5 93		      LDA	s1
   7534  1df2		       85 e6		      STA	_Temp_Score01
   7535  1df4		       a5 94		      LDA	s2
   7536  1df6		       85 e7		      STA	_Temp_Score02
   7537  1df8		       a5 95		      LDA	s3
   7538  1dfa		       85 e8		      STA	_Temp_Score03
   7539  1dfc				   .
   7540  1dfc							; 
   7541  1dfc
   7542  1dfc				   .
   7543  1dfc							; 
   7544  1dfc
   7545  1dfc				   .
   7546  1dfc							; 
   7547  1dfc
   7548  1dfc				   .
   7549  1dfc							; 
   7550  1dfc
   7551  1dfc				   .
   7552  1dfc							; 
   7553  1dfc
   7554  1dfc				   .
   7555  1dfc							; 
   7556  1dfc
   7557  1dfc				   .L0394		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   7558  1dfc
   7559  1dfc		       a9 00		      LDA	#0
   7560  1dfe		       85 d4		      STA	_Master_Counter
   7561  1e00		       85 d5		      STA	_Frame_Counter
   7562  1e02				   .
   7563  1e02							; 
   7564  1e02
   7565  1e02				   .
   7566  1e02							; 
   7567  1e02
   7568  1e02				   .
   7569  1e02							; 
   7570  1e02
   7571  1e02				   .
   7572  1e02							; 
   7573  1e02
   7574  1e02				   .
   7575  1e02							; 
   7576  1e02
   7577  1e02				   .
   7578  1e02							; 
   7579  1e02
   7580  1e02				   .L0395		;  player0y  =  200  :  PuppetY  =  200  :  bally  =  200
   7581  1e02
   7582  1e02		       a9 c8		      LDA	#200
   7583  1e04		       85 85		      STA	player0y
   7584  1e06		       85 86		      STA	PuppetY
   7585  1e08		       85 89		      STA	bally
   7586  1e0a				   .
   7587  1e0a							; 
   7588  1e0a
   7589  1e0a				   .
   7590  1e0a							; 
   7591  1e0a
   7592  1e0a				   .
   7593  1e0a							; 
   7594  1e0a
   7595  1e0a				   .
   7596  1e0a							; 
   7597  1e0a
   7598  1e0a				   .
   7599  1e0a							; 
   7600  1e0a
   7601  1e0a				   .
   7602  1e0a							; 
   7603  1e0a
   7604  1e0a				   .
   7605  1e0a							; 
   7606  1e0a
   7607  1e0a				   .
   7608  1e0a							; 
   7609  1e0a
   7610  1e0a				   .
   7611  1e0a							; 
   7612  1e0a
   7613  1e0a				   .
   7614  1e0a							; 
   7615  1e0a
   7616  1e0a				   .
   7617  1e0a							; 
   7618  1e0a
   7619  1e0a				   .L0396		;  _Bit0_Reset_Restrainer{0}  =  1
   7620  1e0a
   7621  1e0a		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7622  1e0c		       09 01		      ORA	#1
   7623  1e0e		       85 ec		      STA	_Bit0_Reset_Restrainer
   7624  1e10				   .
   7625  1e10							; 
   7626  1e10
   7627  1e10				   .
   7628  1e10							; 
   7629  1e10
   7630  1e10				   .
   7631  1e10							; 
   7632  1e10
   7633  1e10				   .
   7634  1e10							; 
   7635  1e10
   7636  1e10				   .
   7637  1e10							; 
   7638  1e10
   7639  1e10				   .
   7640  1e10							; 
   7641  1e10
   7642  1e10				   .L0397		;  playfieldpos  =  8
   7643  1e10
   7644  1e10		       a9 08		      LDA	#8
   7645  1e12		       85 ef		      STA	playfieldpos
   7646  1e14				   .
   7647  1e14							; 
   7648  1e14
   7649  1e14				   .
   7650  1e14							; 
   7651  1e14
   7652  1e14				   .
   7653  1e14							; 
   7654  1e14
   7655  1e14				   .
   7656  1e14							; 
   7657  1e14
   7658  1e14				   .
   7659  1e14							; 
   7660  1e14
   7661  1e14				   .
   7662  1e14							; 
   7663  1e14
   7664  1e14				   .L0398		;  pfclear
   7665  1e14
   7666  1e14		       a9 00		      LDA	#0
   7667  1e16		       85 ee		      sta	temp7
   7668  1e18		       a9 1e		      lda	#>(ret_point20-1)
   7669  1e1a		       48		      pha
   7670  1e1b		       a9 2d		      lda	#<(ret_point20-1)
   7671  1e1d		       48		      pha
   7672  1e1e		       a9 f2		      lda	#>(pfclear-1)
   7673  1e20		       48		      pha
   7674  1e21		       a9 8f		      lda	#<(pfclear-1)
   7675  1e23		       48		      pha
   7676  1e24		       a5 ee		      lda	temp7
   7677  1e26		       48		      pha
   7678  1e27		       8a		      txa
   7679  1e28		       48		      pha
   7680  1e29		       a2 08		      ldx	#8
   7681  1e2b		       4c eb ff 	      jmp	BS_jsr
   7682  1e2e				   ret_point20
   7683  1e2e				   .
   7684  1e2e							; 
   7685  1e2e
   7686  1e2e				   .
   7687  1e2e							; 
   7688  1e2e
   7689  1e2e				   .
   7690  1e2e							; 
   7691  1e2e
   7692  1e2e				   .
   7693  1e2e							; 
   7694  1e2e
   7695  1e2e				   .
   7696  1e2e							; 
   7697  1e2e
   7698  1e2e				   .
   7699  1e2e							; 
   7700  1e2e
   7701  1e2e				   .L0399		;  COLUBK  =  $54
   7702  1e2e
   7703  1e2e		       a9 54		      LDA	#$54
   7704  1e30		       85 09		      STA	COLUBK
   7705  1e32				   .
   7706  1e32							; 
   7707  1e32
   7708  1e32				   .
   7709  1e32							; 
   7710  1e32
   7711  1e32				   .
   7712  1e32							; 
   7713  1e32
   7714  1e32				   .
   7715  1e32							; 
   7716  1e32
   7717  1e32				   .
   7718  1e32							; 
   7719  1e32
   7720  1e32				   .
   7721  1e32							; 
   7722  1e32
   7723  1e32				   .L0400		;  playfield:
   7724  1e32
   7725  1e32				  -	      ifconst	pfres
   7726  1e32				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   7727  1e32					      else
   7728  1e32		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   7729  1e34					      endif
   7730  1e34		       4c 63 1e 	      jmp	pflabel2
   7731  1e37				   PF_data2
   7732  1e37		       49 e4		      .byte.b	%01001001, %11100100
   7733  1e39					      if	(pfwidth>2)
   7734  1e39		       57 06		      .byte.b	%01010111, %00000110
   7735  1e3b					      endif
   7736  1e3b		       ad 4a		      .byte.b	%10101101, %01001010
   7737  1e3d					      if	(pfwidth>2)
   7738  1e3d		       54 0a		      .byte.b	%01010100, %00001010
   7739  1e3f					      endif
   7740  1e3f		       eb 4a		      .byte.b	%11101011, %01001010
   7741  1e41					      if	(pfwidth>2)
   7742  1e41		       76 06		      .byte.b	%01110110, %00000110
   7743  1e43					      endif
   7744  1e43		       a9 4a		      .byte.b	%10101001, %01001010
   7745  1e45					      if	(pfwidth>2)
   7746  1e45		       54 0a		      .byte.b	%01010100, %00001010
   7747  1e47					      endif
   7748  1e47		       a9 44		      .byte.b	%10101001, %01000100
   7749  1e49					      if	(pfwidth>2)
   7750  1e49		       57 0a		      .byte.b	%01010111, %00001010
   7751  1e4b					      endif
   7752  1e4b		       00 00		      .byte.b	%00000000, %00000000
   7753  1e4d					      if	(pfwidth>2)
   7754  1e4d		       00 00		      .byte.b	%00000000, %00000000
   7755  1e4f					      endif
   7756  1e4f		       97 06		      .byte.b	%10010111, %00000110
   7757  1e51					      if	(pfwidth>2)
   7758  1e51		       67 6e		      .byte.b	%01100111, %01101110
   7759  1e53					      endif
   7760  1e53		       a2 0a		      .byte.b	%10100010, %00001010
   7761  1e55					      if	(pfwidth>2)
   7762  1e55		       52 a2		      .byte.b	%01010010, %10100010
   7763  1e57					      endif
   7764  1e57		       c2 0a		      .byte.b	%11000010, %00001010
   7765  1e59					      if	(pfwidth>2)
   7766  1e59		       52 a6		      .byte.b	%01010010, %10100110
   7767  1e5b					      endif
   7768  1e5b		       a2 0a		      .byte.b	%10100010, %00001010
   7769  1e5d					      if	(pfwidth>2)
   7770  1e5d		       52 a2		      .byte.b	%01010010, %10100010
   7771  1e5f					      endif
   7772  1e5f		       97 06		      .byte.b	%10010111, %00000110
   7773  1e61					      if	(pfwidth>2)
   7774  1e61		       67 6e		      .byte.b	%01100111, %01101110
   7775  1e63					      endif
   7776  1e63				   pflabel2
   7777  1e63		       bd 37 1e 	      lda	PF_data2,x
   7778  1e66		       95 a4		      sta	playfield,x
   7779  1e68		       ca		      dex
   7780  1e69		       10 f8		      bpl	pflabel2
   7781  1e6b				   .
   7782  1e6b							; 
   7783  1e6b
   7784  1e6b				   .
   7785  1e6b							; 
   7786  1e6b
   7787  1e6b				   .
   7788  1e6b							; 
   7789  1e6b
   7790  1e6b				   .
   7791  1e6b							; 
   7792  1e6b
   7793  1e6b				   .
   7794  1e6b							; 
   7795  1e6b
   7796  1e6b				   .
   7797  1e6b							; 
   7798  1e6b
   7799  1e6b				   .
   7800  1e6b							; 
   7801  1e6b
   7802  1e6b				   .
   7803  1e6b							; 
   7804  1e6b
   7805  1e6b				   .
   7806  1e6b							; 
   7807  1e6b
   7808  1e6b				   .
   7809  1e6b							; 
   7810  1e6b
   7811  1e6b				   .__Game_Over_Loop
   7812  1e6b							; __Game_Over_Loop
   7813  1e6b
   7814  1e6b				   .
   7815  1e6b							; 
   7816  1e6b
   7817  1e6b				   .
   7818  1e6b							; 
   7819  1e6b
   7820  1e6b				   .
   7821  1e6b							; 
   7822  1e6b
   7823  1e6b				   .
   7824  1e6b							; 
   7825  1e6b
   7826  1e6b				   .
   7827  1e6b							; 
   7828  1e6b
   7829  1e6b				   .
   7830  1e6b							; 
   7831  1e6b
   7832  1e6b				   .
   7833  1e6b							; 
   7834  1e6b
   7835  1e6b				   .
   7836  1e6b							; 
   7837  1e6b
   7838  1e6b				   .
   7839  1e6b							; 
   7840  1e6b
   7841  1e6b				   .
   7842  1e6b							; 
   7843  1e6b
   7844  1e6b				   .
   7845  1e6b							; 
   7846  1e6b
   7847  1e6b				   .
   7848  1e6b							; 
   7849  1e6b
   7850  1e6b				   .
   7851  1e6b							; 
   7852  1e6b
   7853  1e6b				   .
   7854  1e6b							; 
   7855  1e6b
   7856  1e6b				   .L0401		;  _Master_Counter  =	_Master_Counter  +  1
   7857  1e6b
   7858  1e6b		       e6 d4		      INC	_Master_Counter
   7859  1e6d				   .
   7860  1e6d							; 
   7861  1e6d
   7862  1e6d				   .
   7863  1e6d							; 
   7864  1e6d
   7865  1e6d				   .
   7866  1e6d							; 
   7867  1e6d
   7868  1e6d				   .
   7869  1e6d							; 
   7870  1e6d
   7871  1e6d				   .L0402		;  if _Master_Counter	<  120 then goto __Skip_20_Counter
   7872  1e6d
   7873  1e6d		       a5 d4		      LDA	_Master_Counter
   7874  1e6f		       c9 78		      CMP	#120
   7875  1e71		       b0 03		      BCS	.skipL0402
   7876  1e73				   .condpart114
   7877  1e73		       4c c4 1e 	      jmp	.__Skip_20_Counter
   7878  1e76
   7879  1e76				   .skipL0402
   7880  1e76				   .
   7881  1e76							; 
   7882  1e76
   7883  1e76				   .
   7884  1e76							; 
   7885  1e76
   7886  1e76				   .
   7887  1e76							; 
   7888  1e76
   7889  1e76				   .
   7890  1e76							; 
   7891  1e76
   7892  1e76				   .
   7893  1e76							; 
   7894  1e76
   7895  1e76				   .L0403		;  _Master_Counter  =	0  :  _Bit3_Swap_Scores{3}  =  !_Bit3_Swap_Scores{3}
   7896  1e76
   7897  1e76		       a9 00		      LDA	#0
   7898  1e78		       85 d4		      STA	_Master_Counter
   7899  1e7a		       a5 ec		      LDA	_Bit3_Swap_Scores
   7900  1e7c		       29 08		      AND	#8
   7901  1e7e		       08		      PHP
   7902  1e7f		       a5 ec		      LDA	_Bit3_Swap_Scores
   7903  1e81		       29 f7		      AND	#247
   7904  1e83		       28		      PLP
   7905  1e84		       d0 02		      .byte.b	$D0, $02
   7906  1e86		       09 08		      ORA	#8
   7907  1e88		       85 ec		      STA	_Bit3_Swap_Scores
   7908  1e8a				   .
   7909  1e8a							; 
   7910  1e8a
   7911  1e8a				   .
   7912  1e8a							; 
   7913  1e8a
   7914  1e8a				   .
   7915  1e8a							; 
   7916  1e8a
   7917  1e8a				   .
   7918  1e8a							; 
   7919  1e8a
   7920  1e8a				   .L0404		;  if _Bit3_Swap_Scores{3} then scorecolor  =	$AE  :	s1 = _High_Score01  :  s2 = _High_Score02  :  s3 = _High_Score03  :  goto __Skip_Flip
   7921  1e8a
   7922  1e8a		       a5 ec		      LDA	_Bit3_Swap_Scores
   7923  1e8c		       29 08		      AND	#8
   7924  1e8e		       f0 13		      BEQ	.skipL0404
   7925  1e90				   .condpart115
   7926  1e90		       a9 ae		      LDA	#$AE
   7927  1e92		       85 a3		      STA	scorecolor
   7928  1e94		       a5 e9		      LDA	_High_Score01
   7929  1e96		       85 93		      STA	s1
   7930  1e98		       a5 ea		      LDA	_High_Score02
   7931  1e9a		       85 94		      STA	s2
   7932  1e9c		       a5 eb		      LDA	_High_Score03
   7933  1e9e		       85 95		      STA	s3
   7934  1ea0		       4c b3 1e 	      jmp	.__Skip_Flip
   7935  1ea3
   7936  1ea3				   .skipL0404
   7937  1ea3				   .
   7938  1ea3							; 
   7939  1ea3
   7940  1ea3				   .
   7941  1ea3							; 
   7942  1ea3
   7943  1ea3				   .
   7944  1ea3							; 
   7945  1ea3
   7946  1ea3				   .
   7947  1ea3							; 
   7948  1ea3
   7949  1ea3				   .L0405		;  scorecolor	=  $1C	:  s1 = _Temp_Score01  :  s2 = _Temp_Score02  :  s3 = _Temp_Score03
   7950  1ea3
   7951  1ea3		       a9 1c		      LDA	#$1C
   7952  1ea5		       85 a3		      STA	scorecolor
   7953  1ea7		       a5 e6		      LDA	_Temp_Score01
   7954  1ea9		       85 93		      STA	s1
   7955  1eab		       a5 e7		      LDA	_Temp_Score02
   7956  1ead		       85 94		      STA	s2
   7957  1eaf		       a5 e8		      LDA	_Temp_Score03
   7958  1eb1		       85 95		      STA	s3
   7959  1eb3				   .
   7960  1eb3							; 
   7961  1eb3
   7962  1eb3				   .__Skip_Flip
   7963  1eb3							; __Skip_Flip
   7964  1eb3
   7965  1eb3				   .
   7966  1eb3							; 
   7967  1eb3
   7968  1eb3				   .
   7969  1eb3							; 
   7970  1eb3
   7971  1eb3				   .
   7972  1eb3							; 
   7973  1eb3
   7974  1eb3				   .
   7975  1eb3							; 
   7976  1eb3
   7977  1eb3				   .L0406		;  _Frame_Counter  =  _Frame_Counter  +  1
   7978  1eb3
   7979  1eb3		       e6 d5		      INC	_Frame_Counter
   7980  1eb5				   .
   7981  1eb5							; 
   7982  1eb5
   7983  1eb5				   .
   7984  1eb5							; 
   7985  1eb5
   7986  1eb5				   .
   7987  1eb5							; 
   7988  1eb5
   7989  1eb5				   .
   7990  1eb5							; 
   7991  1eb5
   7992  1eb5				   .
   7993  1eb5							; 
   7994  1eb5
   7995  1eb5				   .
   7996  1eb5							; 
   7997  1eb5
   7998  1eb5				   .L0407		;  if _Frame_Counter  =  10 then _Bit2_Game_Over{2}  =  0  :  goto __Start_Restart
   7999  1eb5
   8000  1eb5		       a5 d5		      LDA	_Frame_Counter
   8001  1eb7		       c9 0a		      CMP	#10
   8002  1eb9		       d0 09		      BNE	.skipL0407
   8003  1ebb				   .condpart116
   8004  1ebb		       a5 ec		      LDA	_Bit2_Game_Over
   8005  1ebd		       29 fb		      AND	#251
   8006  1ebf		       85 ec		      STA	_Bit2_Game_Over
   8007  1ec1		       4c 00 10 	      jmp	.__Start_Restart
   8008  1ec4
   8009  1ec4				   .skipL0407
   8010  1ec4				   .
   8011  1ec4							; 
   8012  1ec4
   8013  1ec4				   .__Skip_20_Counter
   8014  1ec4							; __Skip_20_Counter
   8015  1ec4
   8016  1ec4				   .
   8017  1ec4							; 
   8018  1ec4
   8019  1ec4				   .
   8020  1ec4							; 
   8021  1ec4
   8022  1ec4				   .
   8023  1ec4							; 
   8024  1ec4
   8025  1ec4				   .
   8026  1ec4							; 
   8027  1ec4
   8028  1ec4				   .
   8029  1ec4							; 
   8030  1ec4
   8031  1ec4				   .
   8032  1ec4							; 
   8033  1ec4
   8034  1ec4				   .L0408		;  pfcolors:
   8035  1ec4
   8036  1ec4		       a9 0c		      lda	# $0C
   8037  1ec6		       85 08		      sta	COLUPF
   8038  1ec8				  -	      ifconst	pfres
   8039  1ec8				  -	      lda	#>(pfcolorlabel288-130+pfres*pfwidth)
   8040  1ec8					      else
   8041  1ec8		       a9 f7		      lda	#>(pfcolorlabel288-82)
   8042  1eca					      endif
   8043  1eca		       85 f1		      sta	pfcolortable+1
   8044  1ecc				  -	      ifconst	pfres
   8045  1ecc				  -	      lda	#<(pfcolorlabel288-130+pfres*pfwidth)
   8046  1ecc					      else
   8047  1ecc		       a9 06		      lda	#<(pfcolorlabel288-82)
   8048  1ece					      endif
   8049  1ece		       85 f0		      sta	pfcolortable
   8050  1ed0				   .
   8051  1ed0							; 
   8052  1ed0
   8053  1ed0				   .
   8054  1ed0							; 
   8055  1ed0
   8056  1ed0				   .
   8057  1ed0							; 
   8058  1ed0
   8059  1ed0				   .
   8060  1ed0							; 
   8061  1ed0
   8062  1ed0				   .
   8063  1ed0							; 
   8064  1ed0
   8065  1ed0				   .
   8066  1ed0							; 
   8067  1ed0
   8068  1ed0				   .L0409		;  drawscreen
   8069  1ed0
   8070  1ed0		       85 ee		      sta	temp7
   8071  1ed2		       a9 1e		      lda	#>(ret_point21-1)
   8072  1ed4		       48		      pha
   8073  1ed5		       a9 e7		      lda	#<(ret_point21-1)
   8074  1ed7		       48		      pha
   8075  1ed8		       a9 f4		      lda	#>(drawscreen-1)
   8076  1eda		       48		      pha
   8077  1edb		       a9 3b		      lda	#<(drawscreen-1)
   8078  1edd		       48		      pha
   8079  1ede		       a5 ee		      lda	temp7
   8080  1ee0		       48		      pha
   8081  1ee1		       8a		      txa
   8082  1ee2		       48		      pha
   8083  1ee3		       a2 08		      ldx	#8
   8084  1ee5		       4c eb ff 	      jmp	BS_jsr
   8085  1ee8				   ret_point21
   8086  1ee8				   .
   8087  1ee8							; 
   8088  1ee8
   8089  1ee8				   .
   8090  1ee8							; 
   8091  1ee8
   8092  1ee8				   .
   8093  1ee8							; 
   8094  1ee8
   8095  1ee8				   .
   8096  1ee8							; 
   8097  1ee8
   8098  1ee8				   .
   8099  1ee8							; 
   8100  1ee8
   8101  1ee8				   .
   8102  1ee8							; 
   8103  1ee8
   8104  1ee8				   .
   8105  1ee8							; 
   8106  1ee8
   8107  1ee8				   .
   8108  1ee8							; 
   8109  1ee8
   8110  1ee8				   .
   8111  1ee8							; 
   8112  1ee8
   8113  1ee8				   .
   8114  1ee8							; 
   8115  1ee8
   8116  1ee8				   .
   8117  1ee8							; 
   8118  1ee8
   8119  1ee8				   .
   8120  1ee8							; 
   8121  1ee8
   8122  1ee8				   .
   8123  1ee8							; 
   8124  1ee8
   8125  1ee8				   .
   8126  1ee8							; 
   8127  1ee8
   8128  1ee8				   .L0410		;  if _Frame_Counter  =  0 then goto __Game_Over_Loop
   8129  1ee8
   8130  1ee8		       a5 d5		      LDA	_Frame_Counter
   8131  1eea		       c9 00		      CMP	#0
   8132  1eec		       d0 03		      BNE	.skipL0410
   8133  1eee				   .condpart117
   8134  1eee		       4c 6b 1e 	      jmp	.__Game_Over_Loop
   8135  1ef1
   8136  1ef1				   .skipL0410
   8137  1ef1				   .
   8138  1ef1							; 
   8139  1ef1
   8140  1ef1				   .
   8141  1ef1							; 
   8142  1ef1
   8143  1ef1				   .
   8144  1ef1							; 
   8145  1ef1
   8146  1ef1				   .
   8147  1ef1							; 
   8148  1ef1
   8149  1ef1				   .
   8150  1ef1							; 
   8151  1ef1
   8152  1ef1				   .L0411		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Game_Over_Loop
   8153  1ef1
   8154  1ef1		       a9 01		      lda	#1
   8155  1ef3		       2c 82 02 	      bit	SWCHB
   8156  1ef6		       f0 0d		      BEQ	.skipL0411
   8157  1ef8				   .condpart118
   8158  1ef8		       24 0c		      bit	INPT4
   8159  1efa		       10 09		      BPL	.skip118then
   8160  1efc				   .condpart119
   8161  1efc		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   8162  1efe		       29 fe		      AND	#254
   8163  1f00		       85 ec		      STA	_Bit0_Reset_Restrainer
   8164  1f02		       4c 6b 1e 	      jmp	.__Game_Over_Loop
   8165  1f05
   8166  1f05				   .skip118then
   8167  1f05				   .skipL0411
   8168  1f05				   .
   8169  1f05							; 
   8170  1f05
   8171  1f05				   .
   8172  1f05							; 
   8173  1f05
   8174  1f05				   .
   8175  1f05							; 
   8176  1f05
   8177  1f05				   .
   8178  1f05							; 
   8179  1f05
   8180  1f05				   .
   8181  1f05							; 
   8182  1f05
   8183  1f05				   .L0412		;  if _Bit0_Reset_Restrainer{0} then goto __Game_Over_Loop
   8184  1f05
   8185  1f05		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   8186  1f07		       4a		      LSR
   8187  1f08		       90 03		      BCC	.skipL0412
   8188  1f0a				   .condpart120
   8189  1f0a		       4c 6b 1e 	      jmp	.__Game_Over_Loop
   8190  1f0d
   8191  1f0d				   .skipL0412
   8192  1f0d				   .
   8193  1f0d							; 
   8194  1f0d
   8195  1f0d				   .
   8196  1f0d							; 
   8197  1f0d
   8198  1f0d				   .
   8199  1f0d							; 
   8200  1f0d
   8201  1f0d				   .
   8202  1f0d							; 
   8203  1f0d
   8204  1f0d				   .L0413		;  goto __Start_Restart
   8205  1f0d
   8206  1f0d		       4c 00 10 	      jmp	.__Start_Restart
   8207  1f10
   8208  1f10				   .
   8209  1f10							; 
   8210  1f10
   8211  1f10				   .
   8212  1f10							; 
   8213  1f10
   8214  1f10				   .
   8215  1f10							; 
   8216  1f10
   8217  1f10				   .
   8218  1f10							; 
   8219  1f10
   8220  1f10				   .
   8221  1f10							; 
   8222  1f10
   8223  1f10				   .
   8224  1f10							; 
   8225  1f10
   8226  1f10				   .L0414		;  bank 2
   8227  1f10
   8228  1f10					      if	ECHO1
      196 bytes of ROM space left in bank 1
   8229  1f10					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   8230  1f10					      endif
   8231  1f10		       00 01	   ECHO1      =	1
   8232  1fd4					      ORG	$1FF4-bscode_length
   8233  1fd4					      RORG	$1FF4-bscode_length
   8234  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   8235  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   8236  1fd6				  -	      stx	FASTFETCH
   8237  1fd6					      endif
   8238  1fd6		       9a		      txs
   8239  1fd7				  -	      if	bankswitch == 64
   8240  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8241  1fd7					      else
   8242  1fd7		       a9 f2		      lda	#>(start-1)
   8243  1fd9					      endif
   8244  1fd9		       48		      pha
   8245  1fda		       a9 51		      lda	#<(start-1)
   8246  1fdc		       48		      pha
   8247  1fdd		       48		      pha
   8248  1fde		       8a		      txa
   8249  1fdf		       48		      pha
   8250  1fe0		       ba		      tsx
   8251  1fe1					      if	bankswitch != 64
   8252  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   8253  1fe3		       2a		      rol
   8254  1fe4		       2a		      rol
   8255  1fe5		       2a		      rol
   8256  1fe6		       2a		      rol
   8257  1fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8258  1fe9		       aa		      tax
   8259  1fea		       e8		      inx
   8260  1feb				  -	      else
   8261  1feb				  -	      lda	4,x	; get high byte of return address
   8262  1feb				  -	      tay
   8263  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8264  1feb				  -	      sta	4,x
   8265  1feb				  -	      tya
   8266  1feb				  -	      lsr
   8267  1feb				  -	      lsr
   8268  1feb				  -	      lsr
   8269  1feb				  -	      lsr
   8270  1feb				  -	      tax
   8271  1feb				  -	      inx
   8272  1feb					      endif
   8273  1feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   8274  1fee		       68		      pla
   8275  1fef		       aa		      tax
   8276  1ff0		       68		      pla
   8277  1ff1		       60		      rts
   8278  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8279  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8280  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8281  1ff2					      endif
   8282  1ffc					      ORG	$1FFC
   8283  1ffc					      RORG	$1FFC
   8284  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   8285  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   8286  2000					      ORG	$2000
   8287  2000					      RORG	$3000
   8288  2000				   .L0415		;  asm
   8289  2000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  2000					      include	"titlescreen/asm/titlescreen.asm"
      1  2000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/layoutmacros.asm"
      1  2000
      2  2000							; the macro's used in the "titlescreen_layout.asm" file
      3  2000
      4  2000					      MAC	draw_96x2_1
      5  2000				   mk_96x2_1_on =	1
      6  2000					      jsr	draw_bmp_96x2_1
      7  2000					      ENDM
      8  2000
      9  2000					      MAC	draw_96x2_2
     10  2000				   mk_96x2_2_on =	1
     11  2000					      jsr	draw_bmp_96x2_2
     12  2000					      ENDM
     13  2000
     14  2000					      MAC	draw_96x2_3
     15  2000				   mk_96x2_3_on =	1
     16  2000					      jsr	draw_bmp_96x2_3
     17  2000					      ENDM
     18  2000
     19  2000					      MAC	draw_96x2_4
     20  2000				   mk_96x2_4_on =	1
     21  2000					      jsr	draw_bmp_96x2_4
     22  2000					      ENDM
     23  2000
     24  2000					      MAC	draw_96x2_5
     25  2000				   mk_96x2_5_on =	1
     26  2000					      jsr	draw_bmp_96x2_5
     27  2000					      ENDM
     28  2000
     29  2000					      MAC	draw_96x2_6
     30  2000				   mk_96x2_6_on =	1
     31  2000					      jsr	draw_bmp_96x2_6
     32  2000					      ENDM
     33  2000
     34  2000					      MAC	draw_96x2_7
     35  2000				   mk_96x2_7_on =	1
     36  2000					      jsr	draw_bmp_96x2_7
     37  2000					      ENDM
     38  2000
     39  2000					      MAC	draw_96x2_8
     40  2000				   mk_96x2_8_on =	1
     41  2000					      jsr	draw_bmp_96x2_8
     42  2000					      ENDM
     43  2000
     44  2000					      MAC	draw_48x1_1
     45  2000				   mk_48x1_X_on =	1
     46  2000				   mk_48x1_1_on =	1
     47  2000					      jsr	draw_bmp_48x1_1
     48  2000					      ENDM
     49  2000
     50  2000					      MAC	draw_48x1_2
     51  2000				   mk_48x1_X_on =	1
     52  2000				   mk_48x1_2_on =	1
     53  2000					      jsr	draw_bmp_48x1_2
     54  2000					      ENDM
     55  2000
     56  2000					      MAC	draw_48x1_3
     57  2000				   mk_48x1_X_on =	1
     58  2000				   mk_48x1_3_on =	1
     59  2000					      jsr	draw_bmp_48x1_3
     60  2000					      ENDM
     61  2000
     62  2000					      MAC	draw_48x1_4
     63  2000				   mk_48x1_X_on =	1
     64  2000				   mk_48x1_4_on =	1
     65  2000					      jsr	draw_bmp_48x1_4
     66  2000					      ENDM
     67  2000
     68  2000					      MAC	draw_48x1_5
     69  2000				   mk_48x1_X_on =	1
     70  2000				   mk_48x1_5_on =	1
     71  2000					      jsr	draw_bmp_48x1_5
     72  2000					      ENDM
     73  2000
     74  2000					      MAC	draw_48x1_6
     75  2000				   mk_48x1_X_on =	1
     76  2000				   mk_48x1_6_on =	1
     77  2000					      jsr	draw_bmp_48x1_6
     78  2000					      ENDM
     79  2000
     80  2000					      MAC	draw_48x1_7
     81  2000				   mk_48x1_X_on =	1
     82  2000				   mk_48x1_7_on =	1
     83  2000					      jsr	draw_bmp_48x1_7
     84  2000					      ENDM
     85  2000
     86  2000					      MAC	draw_48x1_8
     87  2000				   mk_48x1_X_on =	1
     88  2000				   mk_48x1_8_on =	1
     89  2000					      jsr	draw_bmp_48x1_8
     90  2000					      ENDM
     91  2000
     92  2000
     93  2000					      MAC	draw_48x2_1
     94  2000				   mk_48x2_X_on =	1
     95  2000				   mk_48x2_1_on =	1
     96  2000					      jsr	draw_bmp_48x2_1
     97  2000					      ENDM
     98  2000
     99  2000					      MAC	draw_48x2_2
    100  2000				   mk_48x2_X_on =	1
    101  2000				   mk_48x2_2_on =	1
    102  2000					      jsr	draw_bmp_48x2_2
    103  2000					      ENDM
    104  2000
    105  2000					      MAC	draw_48x2_3
    106  2000				   mk_48x2_X_on =	1
    107  2000				   mk_48x2_3_on =	1
    108  2000					      jsr	draw_bmp_48x2_3
    109  2000					      ENDM
    110  2000
    111  2000					      MAC	draw_48x2_4
    112  2000				   mk_48x2_X_on =	1
    113  2000				   mk_48x2_4_on =	1
    114  2000					      jsr	draw_bmp_48x2_4
    115  2000					      ENDM
    116  2000
    117  2000					      MAC	draw_48x2_5
    118  2000				   mk_48x2_X_on =	1
    119  2000				   mk_48x2_5_on =	1
    120  2000					      jsr	draw_bmp_48x2_5
    121  2000					      ENDM
    122  2000
    123  2000					      MAC	draw_48x2_6
    124  2000				   mk_48x2_X_on =	1
    125  2000				   mk_48x2_6_on =	1
    126  2000					      jsr	draw_bmp_48x2_6
    127  2000					      ENDM
    128  2000
    129  2000					      MAC	draw_48x2_7
    130  2000				   mk_48x2_X_on =	1
    131  2000				   mk_48x2_7_on =	1
    132  2000					      jsr	draw_bmp_48x2_7
    133  2000					      ENDM
    134  2000
    135  2000					      MAC	draw_48x2_8
    136  2000				   mk_48x2_X_on =	1
    137  2000				   mk_48x2_8_on =	1
    138  2000					      jsr	draw_bmp_48x2_8
    139  2000					      ENDM
    140  2000
    141  2000					      MAC	draw_player
    142  2000				   mk_player_on =	1
    143  2000					      jsr	draw_player_display
    144  2000					      ENDM
    145  2000
    146  2000					      MAC	draw_score
    147  2000				   mk_score_on =	1
    148  2000				   mk_48x1_X_on =	1
    149  2000					      jsr	draw_score_display
    150  2000					      ENDM
    151  2000
    152  2000					      MAC	draw_gameselect
    153  2000				   mk_gameselect_on =	1
    154  2000				   mk_48x1_X_on =	1
    155  2000					      jsr	draw_gameselect_display
    156  2000					      ENDM
    157  2000
    158  2000					      MAC	draw_space
    159  2000					      ldy	#{1}
    160  2000				   .loop
    161  2000					      sta	WSYNC
    162  2000					      dey
    163  2000					      bne	.loop
    164  2000					      ENDM
    165  2000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/dpcfix.asm"
      1  2000							; reassign variables that DPC+ doesn't have
      2  2000
      3  2000				  -	      ifnconst	aux2
      4  2000				  -aux2       =	player2x
      5  2000					      endif
      6  2000				  -	      ifnconst	aux4
      7  2000				  -aux4       =	player4x
      8  2000					      endif
      9  2000				  -	      ifnconst	aux5
     10  2000				  -aux5       =	player5x
     11  2000					      endif
     12  2000				  -	      ifnconst	aux6
     13  2000				  -aux6       =	player6x
     14  2000					      endif
     15  2000
     16  2000				  -	      ifnconst	player0pointer
     17  2000				  -player0pointer =	player2y
     18  2000					      endif
     19  2000				  -	      ifnconst	player1pointer
     20  2000				  -player1pointer =	player2height	; to player3height
     21  2000					      endif
     22  2000				  -	      ifnconst	player1color
     23  2000				  -player1color =	player4height	; to player5height
     24  2000					      endif
     25  2000				  -	      ifnconst	scorepointers
     26  2000				  -scorepointers =	player6height	; to NUSIZ8
     27  2000					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/titlescreen_layout.asm"
      1  2000
      2  2000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2000							; in the order they were listed.
      4  2000							;
      5  2000							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2000							; it won't use any rom space.
      7  2000
      8  2000					      MAC	titlescreenlayout
      9  2000					      draw_48x1_1
     10  2000					      draw_48x2_1
     11  2000					      draw_48x1_2
     12  2000					      ENDM
     13  2000
     14  2000							; minikernel choices are:
     15  2000							; 
     16  2000							; draw_48x1_1, draw_48x1_2, draw_48x1_3 
     17  2000							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2000							;
     19  2000							; draw_48x2_1, draw_48x2_2, draw_48x2_3 
     20  2000							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2000							;
     22  2000							; draw_96x2_1, draw_96x2_2, draw_96x2_3 
     23  2000							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2000							;
     25  2000							; draw_gameselect
     26  2000							;	The game selection display minikernel
     27  2000							;
     28  2000							; draw_score
     29  2000							;	A minikernel that draws the score
     30  2000							;
     31  2000							; draw_space 10
     32  2000							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  2000
      6  2000				   .titledrawscreen
      7  2000				   title_eat_overscan
      8  2000							;bB runs in overscan. Wait for the overscan to run out...
      9  2000		       18		      clc
     10  2001		       ad 84 02 	      lda	INTIM
     11  2004		       30 fa		      bmi	title_eat_overscan
     12  2006		       4c 09 30 	      jmp	title_do_vertical_sync
     13  2009
     14  2009				   title_do_vertical_sync
     15  2009		       a9 02		      lda	#2
     16  200b		       85 02		      sta	WSYNC	;one line with VSYNC
     17  200d		       85 00		      sta	VSYNC	;enable VSYNC
     18  200f		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2013		       a9 00		      lda	#0
     21  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     22  2017		       85 00		      sta	VSYNC	;turn off VSYNC
     23  2019
     24  2019							;lda #42+128
     25  2019				  -	      ifnconst	vblank_time
     26  2019				  -	      lda	#42+128
     27  2019					      else
     28  2019		       a9 ab		      lda	#vblank_time+128
     29  201b					      endif
     30  201b
     31  201b		       8d 96 02 	      sta	TIM64T
     32  201e
     33  201e		       00 82	   titleframe =	missile0x
     34  201e		       e6 82		      inc	titleframe	; increment the frame counter
     35  2020
     36  2020				  -	      ifconst	.title_vblank
     37  2020				  -	      jsr	.title_vblank
     38  2020					      endif
     39  2020
     40  2020				   title_vblank_loop
     41  2020		       ad 84 02 	      lda	INTIM
     42  2023		       30 fb		      bmi	title_vblank_loop
     43  2025		       a9 00		      lda	#0
     44  2027		       85 02		      sta	WSYNC
     45  2029		       85 01		      sta	VBLANK
     46  202b		       85 1d		      sta	ENAM0
     47  202d		       85 1f		      sta	ENABL
     48  202f
     49  202f				   title_playfield
     50  202f
     51  202f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  202f
     53  202f		       a9 e6		      lda	#230
     54  2031		       8d 96 02 	      sta	TIM64T
     55  2034
     56  2034		       a9 01		      lda	#1
     57  2036		       85 0a		      sta	CTRLPF
     58  2038		       18		      clc
     59  2039
     60  2039		       a9 00		      lda	#0
     61  203b		       85 0b		      sta	REFP0
     62  203d		       85 0c		      sta	REFP1
     63  203f		       85 02		      sta	WSYNC
     64  2041		       ad 7a 30 	      lda	titlescreencolor
     65  2044		       85 09		      sta	COLUBK
     66  2046
      0  2046					      titlescreenlayout
      0  2046					      draw_48x1_1
      1  2046		       00 01	   mk_48x1_X_on =	1
      2  2046		       00 01	   mk_48x1_1_on =	1
      3  2046		       20 7b 30 	      jsr	draw_bmp_48x1_1
      0  2049					      draw_48x2_1
      1  2049		       00 01	   mk_48x2_X_on =	1
      2  2049		       00 01	   mk_48x2_1_on =	1
      3  2049		       20 0b 31 	      jsr	draw_bmp_48x2_1
      0  204c					      draw_48x1_2
      1  204c		       00 01	   mk_48x1_X_on =	1
      2  204c		       00 01	   mk_48x1_2_on =	1
      3  204c		       20 c3 30 	      jsr	draw_bmp_48x1_2
     68  204f
     69  204f		       4c 7c 32 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2052
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  2052					      include	"titlescreen/asm/position48.asm"
      1  2052
      2  2052				   position48
      3  2052
      4  2052							;postion P0 and P1
      5  2052
      6  2052		       85 02		      sta	WSYNC
      7  2054
      8  2054		       a9 90		      lda	#$90	;2
      9  2056		       85 20		      sta	HMP0	;3
     10  2058		       a9 a0		      lda	#$A0	;2
     11  205a		       85 21		      sta	HMP1	;3
     12  205c
     13  205c		       e6 9c		      inc	temp1
     14  205e		       c6 9c		      dec	temp1
     15  2060		       e6 9c		      inc	temp1
     16  2062		       c6 9c		      dec	temp1
     17  2064		       e6 9c		      inc	temp1
      0  2066					      sleep	2
      1  2066				   .CYCLES    SET	2
      2  2066
      3  2066				  -	      IF	.CYCLES < 2
      4  2066				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2066				  -	      ERR
      6  2066					      ENDIF
      7  2066
      8  2066				  -	      IF	.CYCLES & 1
      9  2066				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2066				  -	      nop	0
     11  2066				  -	      ELSE
     12  2066				  -	      bit	VSYNC
     13  2066				  -	      ENDIF
     14  2066				  -.CYCLES    SET	.CYCLES - 3
     15  2066					      ENDIF
     16  2066
     17  2066					      REPEAT	.CYCLES / 2
     18  2066		       ea		      nop
     19  2067					      REPEND
     19  2067		       85 10		      sta	RESP0	;  +3
     20  2069		       85 11		      sta	RESP1	;  +3
     21  206b		       c6 9c		      dec	temp1	;  +5
     22  206d		       e6 9c		      inc	temp1	;  +5
     23  206f		       c6 9c		      dec	temp1	;  +5
     24  2071		       e6 9c		      inc	temp1	;  +5
     25  2073		       c6 9c		      dec	temp1	;  +5
      0  2075					      sleep	3
      1  2075				   .CYCLES    SET	3
      2  2075
      3  2075				  -	      IF	.CYCLES < 2
      4  2075				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2075				  -	      ERR
      6  2075					      ENDIF
      7  2075
      8  2075					      IF	.CYCLES & 1
      9  2075					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2075		       04 00		      nop	0
     11  2077				  -	      ELSE
     12  2077				  -	      bit	VSYNC
     13  2077					      ENDIF
     14  2077				   .CYCLES    SET	.CYCLES - 3
     15  2077					      ENDIF
     16  2077
     17  2077				  -	      REPEAT	.CYCLES / 2
     18  2077				  -	      nop
     19  2077					      REPEND
     27  2077		       85 2a		      sta	HMOVE	; +76
     28  2079		       60		      RTS
     29  207a
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  207a					      include	"titlescreen/titlescreen_color.asm"
      1  207a
      2  207a							; This is where the titlescreen background color gets set. 
      3  207a							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  207a							; if you want to change the color on the fly.
      5  207a
      6  207a				  -	      ifnconst	titlescreencolor
      7  207a				  -titlescreencolor
      8  207a					      endif
      9  207a		       00		      .byte.b	$00
     10  207b
------- FILE titlescreen/asm/titlescreen.asm
     73  207b
     74  207b					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 2
      0  207b					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  207b
      2  207b				   draw_bmp_48x1_1
      3  207b
      4  207b		       a9 00		      lda	#0
      5  207d		       85 1b		      sta	GRP0
      6  207f		       85 1c		      sta	GRP1
      7  2081
      8  2081		       a0 0b		      ldy	#11
      9  2083				   bmp_48x1_1_pointersetup
     10  2083		       b9 b7 30 	      lda	bmp_48x1_1_values,y
     11  2086		       99 96 00 	      sta	scorepointers,y
     12  2089		       88		      dey
     13  208a		       b9 b7 30 	      lda	bmp_48x1_1_values,y
     14  208d				  -	      ifconst	bmp_48x1_1_index
     15  208d				  -	      sec
     16  208d				  -	      sbc	bmp_48x1_1_index
     17  208d					      endif
     18  208d		       99 96 00 	      sta	scorepointers,y
     19  2090		       88		      dey
     20  2091		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  2093
     22  2093		       a0 1f		      ldy	(#bmp_48x1_1_window-1)
     23  2095		       84 f1		      sty	aux2
     24  2097
     25  2097					      ifconst	bmp_48x1_1_background
     26  2097		       ad 91 32 	      lda	bmp_48x1_1_background
     27  209a				  -	      else
     28  209a				  -	      lda	titlescreencolor
     29  209a					      endif
     30  209a		       85 f3		      sta	aux4
     31  209c
     32  209c		       ad 92 32 	      lda	bmp_48x1_1_color
     33  209f		       85 06		      sta	COLUP0	;3
     34  20a1		       85 07		      sta	COLUP1	;3
     35  20a3		       85 2b		      sta	HMCLR	;3
     36  20a5
     37  20a5		       ad 7a 30 	      lda	titlescreencolor
     38  20a8		       85 08		      sta	COLUPF
     39  20aa
     40  20aa					      ifconst	bmp_48x1_1_PF1
     41  20aa		       ad 8f 32 	      lda	bmp_48x1_1_PF1
     42  20ad				  -	      else
     43  20ad				  -	      lda	#0
     44  20ad				  -	      nop
     45  20ad					      endif
     46  20ad		       85 0e		      sta	PF1
     47  20af
     48  20af					      ifconst	bmp_48x1_1_PF2
     49  20af		       ad 90 32 	      lda	bmp_48x1_1_PF2
     50  20b2				  -	      else
     51  20b2				  -	      lda	#0
     52  20b2				  -	      nop
     53  20b2					      endif
     54  20b2		       85 0f		      sta	PF2
     55  20b4
     56  20b4		       4c 56 31 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  20b7
     58  20b7				   bmp_48x1_1_values
     59  20b7		       93 32		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  20b9		       b3 32		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  20bb		       d3 32		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  20bd		       00 33		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  20bf		       20 33		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  20c1		       40 33		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  20c3
------- FILE titlescreen/asm/titlescreen.asm
     76  20c3					      endif		;mk_48x1_1_on
     77  20c3
     78  20c3					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 2
      0  20c3					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  20c3
      2  20c3				   draw_bmp_48x1_2
      3  20c3
      4  20c3		       a9 00		      lda	#0
      5  20c5		       85 1b		      sta	GRP0
      6  20c7		       85 1c		      sta	GRP1
      7  20c9
      8  20c9		       a0 0b		      ldy	#11
      9  20cb				   bmp_48x1_2_pointersetup
     10  20cb		       b9 ff 30 	      lda	bmp_48x1_2_values,y
     11  20ce		       99 96 00 	      sta	scorepointers,y
     12  20d1		       88		      dey
     13  20d2		       b9 ff 30 	      lda	bmp_48x1_2_values,y
     14  20d5				  -	      ifconst	bmp_48x1_2_index
     15  20d5				  -	      sec
     16  20d5				  -	      sbc	bmp_48x1_2_index
     17  20d5					      endif
     18  20d5		       99 96 00 	      sta	scorepointers,y
     19  20d8		       88		      dey
     20  20d9		       10 f0		      bpl	bmp_48x1_2_pointersetup
     21  20db
     22  20db		       a0 13		      ldy	(#bmp_48x1_2_window-1)
     23  20dd		       84 f1		      sty	aux2
     24  20df
     25  20df				  -	      ifconst	bmp_48x1_2_background
     26  20df				  -	      lda	bmp_48x1_2_background
     27  20df					      else
     28  20df		       ad 7a 30 	      lda	titlescreencolor
     29  20e2					      endif
     30  20e2		       85 f3		      sta	aux4
     31  20e4
     32  20e4		       ad 61 33 	      lda	bmp_48x1_2_color
     33  20e7		       85 06		      sta	COLUP0	;3
     34  20e9		       85 07		      sta	COLUP1	;3
     35  20eb		       85 2b		      sta	HMCLR	;3
     36  20ed
     37  20ed		       ad 7a 30 	      lda	titlescreencolor
     38  20f0		       85 08		      sta	COLUPF
     39  20f2
     40  20f2				  -	      ifconst	bmp_48x1_2_PF1
     41  20f2				  -	      lda	bmp_48x1_2_PF1
     42  20f2					      else
     43  20f2		       a9 00		      lda	#0
     44  20f4		       ea		      nop
     45  20f5					      endif
     46  20f5		       85 0e		      sta	PF1
     47  20f7
     48  20f7				  -	      ifconst	bmp_48x1_2_PF2
     49  20f7				  -	      lda	bmp_48x1_2_PF2
     50  20f7					      else
     51  20f7		       a9 00		      lda	#0
     52  20f9		       ea		      nop
     53  20fa					      endif
     54  20fa		       85 0f		      sta	PF2
     55  20fc
     56  20fc		       4c 56 31 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  20ff
     58  20ff				   bmp_48x1_2_values
     59  20ff		       62 33		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  2101		       79 33		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  2103		       90 33		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  2105		       a7 33		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  2107		       be 33		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  2109		       d5 33		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  210b
------- FILE titlescreen/asm/titlescreen.asm
     80  210b					      endif		;mk_48x1_2_on
     81  210b
     82  210b				  -	      ifconst	mk_48x1_3_on
     83  210b				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  210b					      endif		;mk_48x1_3_on
     85  210b
     86  210b				  -	      ifconst	mk_48x1_4_on
     87  210b				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  210b					      endif		;mk_48x1_4_on
     89  210b
     90  210b				  -	      ifconst	mk_48x1_5_on
     91  210b				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  210b					      endif		;mk_48x1_5_on
     93  210b
     94  210b				  -	      ifconst	mk_48x1_6_on
     95  210b				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  210b					      endif		;mk_48x1_6_on
     97  210b
     98  210b				  -	      ifconst	mk_48x1_7_on
     99  210b				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  210b					      endif		;mk_48x1_7_on
    101  210b
    102  210b				  -	      ifconst	mk_48x1_8_on
    103  210b				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  210b					      endif		;mk_48x1_8_on
    105  210b
    106  210b					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 2
      0  210b					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  210b
      2  210b				   draw_bmp_48x2_1
      3  210b
      4  210b		       a9 00		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  210d				  -	      ifconst	bmp_48x2_1_index
      6  210d				  -	      sec
      7  210d				  -	      sbc	bmp_48x2_1_index
      8  210d					      endif
      9  210d		       85 f4		      sta	aux5+0
     10  210f		       a9 34		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  2111		       85 f5		      sta	aux5+1
     12  2113
     13  2113		       a0 0b		      ldy	#11
     14  2115				   bmp_48x2_1_pointersetup
     15  2115		       b9 4a 31 	      lda	bmp_48x2_1_values,y
     16  2118		       99 96 00 	      sta	scorepointers,y
     17  211b		       88		      dey
     18  211c		       b9 4a 31 	      lda	bmp_48x2_1_values,y
     19  211f				  -	      ifconst	bmp_48x2_1_index
     20  211f				  -	      sec
     21  211f				  -	      sbc	bmp_48x2_1_index
     22  211f					      endif
     23  211f		       99 96 00 	      sta	scorepointers,y
     24  2122		       88		      dey
     25  2123		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  2125
     27  2125
     28  2125		       a0 3f		      ldy	#(bmp_48x2_1_window-1)
     29  2127		       84 f1		      sty	aux2
     30  2129
     31  2129		       c8		      iny
     32  212a		       b1 f4		      lda	(aux5),y
     33  212c		       88		      dey
     34  212d
     35  212d		       85 06		      sta	COLUP0	;3
     36  212f		       85 07		      sta	COLUP1	;3
     37  2131		       85 2b		      sta	HMCLR	;3
     38  2133
     39  2133		       ad 7a 30 	      lda	titlescreencolor
     40  2136		       85 08		      sta	COLUPF
     41  2138
     42  2138					      ifconst	bmp_48x2_1_background
     43  2138		       ad 43 34 	      lda	bmp_48x2_1_background
     44  213b				  -	      else
     45  213b				  -	      lda	titlescreencolor
     46  213b					      endif
     47  213b		       85 f3		      sta	aux4
     48  213d					      ifconst	bmp_48x2_1_PF1
     49  213d		       ad 41 34 	      lda	bmp_48x2_1_PF1
     50  2140				  -	      else
     51  2140				  -	      lda	#0
     52  2140				  -	      nop
     53  2140					      endif
     54  2140		       85 0e		      sta	PF1
     55  2142
     56  2142					      ifconst	bmp_48x2_1_PF2
     57  2142		       ad 42 34 	      lda	bmp_48x2_1_PF2
     58  2145				  -	      else
     59  2145				  -	      lda	#0
     60  2145				  -	      nop
     61  2145					      endif
     62  2145		       85 0f		      sta	PF2
     63  2147
     64  2147		       4c d1 31 	      jmp	draw_bmp_48x2_X
     65  214a
     66  214a				   bmp_48x2_1_values
     67  214a		       44 34		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  214c		       84 34		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  214e		       00 35		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  2150		       40 35		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  2152		       80 35		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  2154		       00 36		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  2156
------- FILE titlescreen/asm/titlescreen.asm
    108  2156					      endif		;mk_48x2_1_on
    109  2156
    110  2156				  -	      ifconst	mk_48x2_2_on
    111  2156				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  2156					      endif		;mk_48x2_2_on
    113  2156
    114  2156				  -	      ifconst	mk_48x2_3_on
    115  2156				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  2156					      endif		;mk_48x2_3_on
    117  2156
    118  2156				  -	      ifconst	mk_48x2_4_on
    119  2156				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  2156					      endif		;mk_48x2_4_on
    121  2156
    122  2156				  -	      ifconst	mk_48x2_5_on
    123  2156				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  2156					      endif		;mk_48x2_5_on
    125  2156
    126  2156				  -	      ifconst	mk_48x2_6_on
    127  2156				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  2156					      endif		;mk_48x2_6_on
    129  2156
    130  2156				  -	      ifconst	mk_48x2_7_on
    131  2156				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  2156					      endif		;mk_48x2_7_on
    133  2156
    134  2156				  -	      ifconst	mk_48x2_8_on
    135  2156				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  2156					      endif		;mk_48x2_8_on
    137  2156
    138  2156					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 2
      0  2156					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  2156				   draw_bmp_48x1_X
      2  2156
      3  2156		       a9 03		      lda	#3
      4  2158		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      5  215a		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
      6  215c
      7  215c		       ba		      tsx
      8  215d		       86 f6		      stx	stack1	;save the stack pointer
      9  215f
     10  215f		       20 52 30 	      jsr	position48
     11  2162
     12  2162		       a9 03		      lda	#3	;2
     13  2164		       85 25		      sta	VDELP0	;3
     14  2166		       85 26		      sta	VDELP1	;3
     15  2168
     16  2168		       a9 01		      lda	#1	;2
     17  216a		       85 0a		      sta	CTRLPF	;3
     18  216c
     19  216c							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  216c		       85 2b		      sta	HMCLR
     21  216e
     22  216e		       85 02		      sta	WSYNC
     23  2170
     24  2170		       e6 9c		      inc	temp1	;5
     25  2172		       c6 9c		      dec	temp1	;5
     26  2174		       e6 9c		      inc	temp1	;5
     27  2176		       c6 9c		      dec	temp1	;5
     28  2178		       e6 9c		      inc	temp1	;5
     29  217a		       c6 9c		      dec	temp1	;5
     30  217c		       e6 9c		      inc	temp1	;5
     31  217e		       c6 9c		      dec	temp1	;5
     32  2180		       e6 9c		      inc	temp1	;5
     33  2182		       c6 9c		      dec	temp1	;5
     34  2184
      0  2184					      sleep	5
      1  2184				   .CYCLES    SET	5
      2  2184
      3  2184				  -	      IF	.CYCLES < 2
      4  2184				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2184				  -	      ERR
      6  2184					      ENDIF
      7  2184
      8  2184					      IF	.CYCLES & 1
      9  2184					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2184		       04 00		      nop	0
     11  2186				  -	      ELSE
     12  2186				  -	      bit	VSYNC
     13  2186					      ENDIF
     14  2186				   .CYCLES    SET	.CYCLES - 3
     15  2186					      ENDIF
     16  2186
     17  2186					      REPEAT	.CYCLES / 2
     18  2186		       ea		      nop
     19  2187					      REPEND
     36  2187
     37  2187		       c8		      iny
     38  2188
     39  2188		       4c 8b 31 	      jmp	pf48x1_X_loop_entry
     40  218b
     41  218b				  -	      if	>. != >[.+$2a]
     42  218b				  -	      align	256
     43  218b					      endif
     44  218b
     45  218b				   pf48x1_X_loop_entry
     46  218b				   pf48x1_X_loop
     47  218b		       88		      dey		;2
     48  218c		       84 f1		      sty	aux2	;3
     49  218e		       b1 96		      lda	(scorepointers+0),y	;5
     50  2190		       85 1b		      sta	GRP0	;3
     51  2192
     52  2192		       b1 98		      lda	(scorepointers+2),y	;5
     53  2194		       85 1c		      sta	GRP1	;3
     54  2196		       b1 9a		      lda	(scorepointers+4),y	;5
     55  2198		       85 1b		      sta	GRP0	;3
     56  219a
      0  219a					      sleep	2	; I could make this indirect, if we want to burn more rom 
      1  219a				   .CYCLES    SET	2
      2  219a
      3  219a				  -	      IF	.CYCLES < 2
      4  219a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  219a				  -	      ERR
      6  219a					      ENDIF
      7  219a
      8  219a				  -	      IF	.CYCLES & 1
      9  219a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  219a				  -	      nop	0
     11  219a				  -	      ELSE
     12  219a				  -	      bit	VSYNC
     13  219a				  -	      ENDIF
     14  219a				  -.CYCLES    SET	.CYCLES - 3
     15  219a					      ENDIF
     16  219a
     17  219a					      REPEAT	.CYCLES / 2
     18  219a		       ea		      nop
     19  219b					      REPEND
     58  219b		       a5 f3		      lda	aux4	;3
     59  219d		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  219f
     61  219f		       b3 a0		      lax	(scorepointers+10),y	;5
     62  21a1		       b1 9e		      lda	(scorepointers+8),y	;5
     63  21a3		       85 f7		      sta	stack2	;3
     64  21a5		       b1 9c		      lda	(scorepointers+6),y	;5
     65  21a7		       a4 f7		      ldy	stack2	;3
     66  21a9
     67  21a9		       85 1c		      sta	GRP1	;3
     68  21ab		       84 1b		      sty	GRP0	;3
     69  21ad		       86 1c		      stx	GRP1	;3
     70  21af		       84 1b		      sty	GRP0	;3
     71  21b1
     72  21b1		       a4 f1		      ldy	aux2	;3
     73  21b3		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  21b5
     75  21b5				   pf48x1_X_codeend
     76  21b5							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  21b5
     78  21b5		       a9 00		      lda	#0
     79  21b7		       85 1b		      sta	GRP0
     80  21b9		       85 1c		      sta	GRP1
     81  21bb		       85 1b		      sta	GRP0
     82  21bd		       85 1c		      sta	GRP1
     83  21bf		       85 1f		      sta	ENABL
     84  21c1		       85 1d		      sta	ENAM0
     85  21c3		       85 25		      sta	VDELP0
     86  21c5		       85 26		      sta	VDELP1
     87  21c7		       85 0d		      sta	PF0
     88  21c9		       85 0e		      sta	PF1
     89  21cb		       85 0f		      sta	PF2
     90  21cd
     91  21cd		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  21cf		       9a		      txs
     93  21d0		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  21d1					      endif		;mk_48x1_X_on
    141  21d1
    142  21d1					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 2
      0  21d1					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  21d1				   draw_bmp_48x2_X
      2  21d1
      3  21d1		       a9 00		      lda	#0
      4  21d3		       85 1b		      sta	GRP0
      5  21d5		       85 1c		      sta	GRP1
      6  21d7
      7  21d7		       a9 03		      lda	#3
      8  21d9		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  21db		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  21dd
     11  21dd		       ba		      tsx
     12  21de		       86 f6		      stx	stack1	;save the stack pointer
     13  21e0
     14  21e0		       20 52 30 	      jsr	position48
     15  21e3
     16  21e3		       a9 03		      lda	#3	;2
     17  21e5		       85 25		      sta	VDELP0	;3
     18  21e7		       85 26		      sta	VDELP1	;3
     19  21e9
     20  21e9		       a9 01		      lda	#1	;2
     21  21eb		       85 0a		      sta	CTRLPF	;3
     22  21ed
     23  21ed							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  21ed		       85 2b		      sta	HMCLR
     25  21ef		       85 02		      sta	WSYNC
     26  21f1
     27  21f1
     28  21f1							;sleep (63)		;63
     29  21f1		       e6 9c		      inc	temp1
     30  21f3		       c6 9c		      dec	temp1
     31  21f5		       e6 9c		      inc	temp1
     32  21f7		       c6 9c		      dec	temp1
     33  21f9		       e6 9c		      inc	temp1
     34  21fb		       c6 9c		      dec	temp1
     35  21fd		       e6 9c		      inc	temp1
     36  21ff		       c6 9c		      dec	temp1
     37  2201		       e6 9c		      inc	temp1
     38  2203		       c6 9c		      dec	temp1
     39  2205		       e6 9c		      inc	temp1
     40  2207		       c6 9c		      dec	temp1
      0  2209					      sleep	3
      1  2209				   .CYCLES    SET	3
      2  2209
      3  2209				  -	      IF	.CYCLES < 2
      4  2209				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2209				  -	      ERR
      6  2209					      ENDIF
      7  2209
      8  2209					      IF	.CYCLES & 1
      9  2209					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2209		       04 00		      nop	0
     11  220b				  -	      ELSE
     12  220b				  -	      bit	VSYNC
     13  220b					      ENDIF
     14  220b				   .CYCLES    SET	.CYCLES - 3
     15  220b					      ENDIF
     16  220b
     17  220b				  -	      REPEAT	.CYCLES / 2
     18  220b				  -	      nop
     19  220b					      REPEND
     42  220b
     43  220b		       a5 f3		      lda	aux4	;3
     44  220d		       85 08		      sta	COLUPF	;3
     45  220f
     46  220f		       4c 12 32 	      jmp	pf48x2_X_loop	;3
     47  2212
     48  2212				  -	      if	>. != >[.+$52]
     49  2212				  -	      align	256
     50  2212					      endif
     51  2212
     52  2212				   pf48x2_X_loop
     53  2212
     54  2212		       b1 96		      lda	(scorepointers+0),y	;5
     55  2214		       85 1b		      sta	GRP0	;3
     56  2216		       b1 98		      lda	(scorepointers+2),y	;5
     57  2218		       85 1c		      sta	GRP1	;3
     58  221a		       b1 9a		      lda	(scorepointers+4),y	;5
     59  221c		       85 1b		      sta	GRP0	;3
     60  221e
     61  221e		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2220		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2222		       85 f7		      sta	stack2	;3
     64  2224		       b1 9c		      lda	(scorepointers+6),y	;5
     65  2226		       a4 f7		      ldy	stack2	;3
     66  2228
     67  2228		       85 1c		      sta	GRP1	;3
     68  222a		       84 1b		      sty	GRP0	;3
     69  222c		       86 1c		      stx	GRP1	;3
     70  222e		       84 1b		      sty	GRP0	;3
     71  2230
     72  2230		       a4 f1		      ldy	aux2	;3
     73  2232
     74  2232		       b1 f4		      lda	(aux5),y	;5
     75  2234		       85 91		      sta	missile0y	;3
     76  2236
      0  2236					      sleep	3
      1  2236				   .CYCLES    SET	3
      2  2236
      3  2236				  -	      IF	.CYCLES < 2
      4  2236				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2236				  -	      ERR
      6  2236					      ENDIF
      7  2236
      8  2236					      IF	.CYCLES & 1
      9  2236					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2236		       04 00		      nop	0
     11  2238				  -	      ELSE
     12  2238				  -	      bit	VSYNC
     13  2238					      ENDIF
     14  2238				   .CYCLES    SET	.CYCLES - 3
     15  2238					      ENDIF
     16  2238
     17  2238				  -	      REPEAT	.CYCLES / 2
     18  2238				  -	      nop
     19  2238					      REPEND
     78  2238
     79  2238		       c6 f1		      dec	aux2	;5
     80  223a
     81  223a
     82  223a		       b1 96		      lda	(scorepointers+0),y	;5
     83  223c		       85 1b		      sta	GRP0	;3
     84  223e		       b1 98		      lda	(scorepointers+2),y	;5
     85  2240		       85 1c		      sta	GRP1	;3
     86  2242		       b1 9a		      lda	(scorepointers+4),y	;5
     87  2244		       85 1b		      sta	GRP0	;3
     88  2246
     89  2246		       b3 a0		      lax	(scorepointers+10),y	;5
     90  2248		       b1 9e		      lda	(scorepointers+8),y	;5
     91  224a		       85 f7		      sta	stack2	;3
     92  224c		       b1 9c		      lda	(scorepointers+6),y	;5
     93  224e		       a4 f7		      ldy	stack2	;3
     94  2250
     95  2250		       85 1c		      sta	GRP1	;3
     96  2252		       84 1b		      sty	GRP0	;3
     97  2254		       86 1c		      stx	GRP1	;3
     98  2256		       84 1b		      sty	GRP0	;3
     99  2258
      0  2258					      sleep	4
      1  2258				   .CYCLES    SET	4
      2  2258
      3  2258				  -	      IF	.CYCLES < 2
      4  2258				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2258				  -	      ERR
      6  2258					      ENDIF
      7  2258
      8  2258				  -	      IF	.CYCLES & 1
      9  2258				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2258				  -	      nop	0
     11  2258				  -	      ELSE
     12  2258				  -	      bit	VSYNC
     13  2258				  -	      ENDIF
     14  2258				  -.CYCLES    SET	.CYCLES - 3
     15  2258					      ENDIF
     16  2258
     17  2258					      REPEAT	.CYCLES / 2
     18  2258		       ea		      nop
     17  2258					      REPEND
     18  2259		       ea		      nop
     19  225a					      REPEND
    101  225a
    102  225a		       a5 91		      lda	missile0y
    103  225c		       85 07		      sta	COLUP1
    104  225e		       85 06		      sta	COLUP0
    105  2260
    106  2260		       a4 f1		      ldy	aux2	;3
    107  2262		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  2264
    109  2264
    110  2264				   pf48x2_X_codeend
    111  2264							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  2264
    113  2264		       a9 00		      lda	#0
    114  2266		       85 1b		      sta	GRP0
    115  2268		       85 1c		      sta	GRP1
    116  226a		       85 1b		      sta	GRP0
    117  226c		       85 1c		      sta	GRP1
    118  226e		       85 25		      sta	VDELP0
    119  2270		       85 26		      sta	VDELP1
    120  2272		       85 0d		      sta	PF0
    121  2274		       85 0e		      sta	PF1
    122  2276		       85 0f		      sta	PF2
    123  2278
    124  2278		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  227a		       9a		      txs
    126  227b		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  227c					      endif		;mk_48x2_X_on
    145  227c
    146  227c
    147  227c				  -	      ifconst	mk_96x2_1_on
    148  227c				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    149  227c					      endif		;mk_96x2_1_on
    150  227c
    151  227c				  -	      ifconst	mk_96x2_2_on
    152  227c				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  227c					      endif		;mk_96x2_2_on
    154  227c
    155  227c				  -	      ifconst	mk_96x2_3_on
    156  227c				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  227c					      endif		;mk_96x2_3_on
    158  227c
    159  227c				  -	      ifconst	mk_96x2_4_on
    160  227c				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  227c					      endif		;mk_96x2_4_on
    162  227c
    163  227c				  -	      ifconst	mk_96x2_5_on
    164  227c				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  227c					      endif		;mk_96x2_5_on
    166  227c
    167  227c				  -	      ifconst	mk_96x2_6_on
    168  227c				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  227c					      endif		;mk_96x2_6_on
    170  227c
    171  227c				  -	      ifconst	mk_96x2_7_on
    172  227c				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  227c					      endif		;mk_96x2_7_on
    174  227c
    175  227c				  -	      ifconst	mk_96x2_8_on
    176  227c				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  227c					      endif		;mk_96x2_8_on
    178  227c
    179  227c				  -	      ifconst	mk_score_on
    180  227c				  -	      include	"titlescreen/asm/score_kernel.asm"
    181  227c					      endif		;mk_score_on
    182  227c
    183  227c				  -	      ifconst	mk_gameselect_on
    184  227c				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  227c					      endif		;mk_gameselect_on
    186  227c
    187  227c				   PFWAIT
    188  227c		       ad 84 02 	      lda	INTIM
    189  227f		       d0 fb		      bne	PFWAIT
    190  2281
    191  2281				   OVERSCAN
    192  2281							;lda #35+128 
    193  2281
    194  2281				  -	      ifnconst	overscan_time
    195  2281				  -	      lda	#35+128
    196  2281					      else
    197  2281		       a9 a0		      lda	#overscan_time+128-5
    198  2283					      endif
    199  2283		       8d 96 02 	      sta	TIM64T
    200  2286
    201  2286							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    202  2286				  -	      ifconst	player9height
    203  2286				  -	      ldy	#8
    204  2286				  -	      lda	#0
    205  2286				  -	      sta	player0height
    206  2286				  -.playerheightfixloop
    207  2286				  -	      sta	player1height,y
    208  2286				  -	      ifconst	_NUSIZ1
    209  2286				  -	      sta	_NUSIZ1,y
    210  2286				  -	      endif
    211  2286				  -	      dey
    212  2286				  -	      bpl	.playerheightfixloop
    213  2286					      endif
    214  2286
    215  2286		       a9 c2		      lda	#%11000010
    216  2288		       85 02		      sta	WSYNC
    217  228a		       85 01		      sta	VBLANK
      0  228c					      RETURN
      1  228c				  -	      ifnconst	bankswitch
      2  228c				  -	      rts
      3  228c					      else
      4  228c		       4c dd ff 	      jmp	BS_return
      5  228f					      endif
    219  228f
    220  228f					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 2
      0  228f					      include	"titlescreen/48x1_1_image.asm"
      1  228f
      2  228f							;*** The height of the displayed data...
      3  228f		       00 20	   bmp_48x1_1_window =	32
      4  228f
      5  228f							;*** The height of the bitmap data. This can be larger than 
      6  228f							;*** the displayed data height, if you're scrolling or animating 
      7  228f							;*** the data...
      8  228f		       00 20	   bmp_48x1_1_height =	32
      9  228f
     10  228f				  -	      ifnconst	bmp_48x1_1_PF1
     11  228f				  -bmp_48x1_1_PF1
     12  228f					      endif
     13  228f		       00		      BYTE.b	%00000000
     14  2290				  -	      ifnconst	bmp_48x1_1_PF2
     15  2290				  -bmp_48x1_1_PF2
     16  2290					      endif
     17  2290		       00		      BYTE.b	%00000000
     18  2291				  -	      ifnconst	bmp_48x1_1_background
     19  2291				  -bmp_48x1_1_background
     20  2291					      endif
     21  2291		       c2		      BYTE.b	$c2
     22  2292
     23  2292				  -	      ifnconst	bmp_48x1_1_color
     24  2292				  -bmp_48x1_1_color
     25  2292					      endif
     26  2292							; *** this is the bitmap color. If you want to change it in a 
     27  2292							; *** variable instead, dim one in bB called "bmp_48x1_1_color"
     28  2292		       54		      .byte.b	$54
     29  2293
     30  2293
     31  2293				  -	      if	>. != >[.+bmp_48x1_1_height]
     32  2293				  -	      align	256
     33  2293					      endif
     34  2293
     35  2293				   bmp_48x1_1_00
     36  2293		       00		      BYTE.b	%00000000
     37  2294		       00		      BYTE.b	%00000000
     38  2295		       00		      BYTE.b	%00000000
     39  2296		       00		      BYTE.b	%00000000
     40  2297		       00		      BYTE.b	%00000000
     41  2298		       00		      BYTE.b	%00000000
     42  2299		       00		      BYTE.b	%00000000
     43  229a		       00		      BYTE.b	%00000000
     44  229b		       00		      BYTE.b	%00000000
     45  229c		       00		      BYTE.b	%00000000
     46  229d		       00		      BYTE.b	%00000000
     47  229e		       00		      BYTE.b	%00000000
     48  229f		       00		      BYTE.b	%00000000
     49  22a0		       00		      BYTE.b	%00000000
     50  22a1		       00		      BYTE.b	%00000000
     51  22a2		       00		      BYTE.b	%00000000
     52  22a3		       00		      BYTE.b	%00000000
     53  22a4		       00		      BYTE.b	%00000000
     54  22a5		       00		      BYTE.b	%00000000
     55  22a6		       00		      BYTE.b	%00000000
     56  22a7		       00		      BYTE.b	%00000000
     57  22a8		       00		      BYTE.b	%00000000
     58  22a9		       73		      BYTE.b	%01110011
     59  22aa		       4a		      BYTE.b	%01001010
     60  22ab		       4a		      BYTE.b	%01001010
     61  22ac		       4a		      BYTE.b	%01001010
     62  22ad		       4a		      BYTE.b	%01001010
     63  22ae		       73		      BYTE.b	%01110011
     64  22af		       4a		      BYTE.b	%01001010
     65  22b0		       4a		      BYTE.b	%01001010
     66  22b1		       4a		      BYTE.b	%01001010
     67  22b2		       73		      BYTE.b	%01110011
     68  22b3
     69  22b3				  -	      if	>. != >[.+(bmp_48x1_1_height)]
     70  22b3				  -	      align	256
     71  22b3					      endif
     72  22b3
     73  22b3				   bmp_48x1_1_01
     74  22b3		       87		      BYTE.b	%10000111
     75  22b4		       81		      BYTE.b	%10000001
     76  22b5		       81		      BYTE.b	%10000001
     77  22b6		       81		      BYTE.b	%10000001
     78  22b7		       81		      BYTE.b	%10000001
     79  22b8		       e1		      BYTE.b	%11100001
     80  22b9		       91		      BYTE.b	%10010001
     81  22ba		       91		      BYTE.b	%10010001
     82  22bb		       e7		      BYTE.b	%11100111
     83  22bc		       00		      BYTE.b	%00000000
     84  22bd		       84		      BYTE.b	%10000100
     85  22be		       84		      BYTE.b	%10000100
     86  22bf		       84		      BYTE.b	%10000100
     87  22c0		       84		      BYTE.b	%10000100
     88  22c1		       84		      BYTE.b	%10000100
     89  22c2		       e7		      BYTE.b	%11100111
     90  22c3		       84		      BYTE.b	%10000100
     91  22c4		       84		      BYTE.b	%10000100
     92  22c5		       84		      BYTE.b	%10000100
     93  22c6		       f3		      BYTE.b	%11110011
     94  22c7		       00		      BYTE.b	%00000000
     95  22c8		       00		      BYTE.b	%00000000
     96  22c9		       d0		      BYTE.b	%11010000
     97  22ca		       10		      BYTE.b	%00010000
     98  22cb		       10		      BYTE.b	%00010000
     99  22cc		       10		      BYTE.b	%00010000
    100  22cd		       10		      BYTE.b	%00010000
    101  22ce		       90		      BYTE.b	%10010000
    102  22cf		       11		      BYTE.b	%00010001
    103  22d0		       12		      BYTE.b	%00010010
    104  22d1		       14		      BYTE.b	%00010100
    105  22d2		       d8		      BYTE.b	%11011000
    106  22d3
    107  22d3				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    108  22d3				  -	      align	256
    109  22d3					      endif
    110  22d3
    111  22d3				   bmp_48x1_1_02
    112  22d3		       df		      BYTE.b	%11011111
    113  22d4		       08		      BYTE.b	%00001000
    114  22d5		       08		      BYTE.b	%00001000
    115  22d6		       04		      BYTE.b	%00000100
    116  22d7		       04		      BYTE.b	%00000100
    117  22d8		       02		      BYTE.b	%00000010
    118  22d9		       02		      BYTE.b	%00000010
    119  22da		       01		      BYTE.b	%00000001
    120  22db		       df		      BYTE.b	%11011111
    121  22dc		       00		      BYTE.b	%00000000
    122  22dd		       a0		      BYTE.b	%10100000
    123  22de		       a0		      BYTE.b	%10100000
    124  22df		       a0		      BYTE.b	%10100000
    125  22e0		       a0		      BYTE.b	%10100000
    126  22e1		       a0		      BYTE.b	%10100000
    127  22e2		       a0		      BYTE.b	%10100000
    128  22e3		       a0		      BYTE.b	%10100000
    129  22e4		       a4		      BYTE.b	%10100100
    130  22e5		       aa		      BYTE.b	%10101010
    131  22e6		       31		      BYTE.b	%00110001
    132  22e7		       00		      BYTE.b	%00000000
    133  22e8		       00		      BYTE.b	%00000000
    134  22e9		       88		      BYTE.b	%10001000
    135  22ea		       88		      BYTE.b	%10001000
    136  22eb		       88		      BYTE.b	%10001000
    137  22ec		       88		      BYTE.b	%10001000
    138  22ed		       88		      BYTE.b	%10001000
    139  22ee		       88		      BYTE.b	%10001000
    140  22ef		       88		      BYTE.b	%10001000
    141  22f0		       88		      BYTE.b	%10001000
    142  22f1		       88		      BYTE.b	%10001000
    143  22f2		       be		      BYTE.b	%10111110
    144  22f3
    145  22f3					      if	>. != >[.+(bmp_48x1_1_height)]
    146  2300		       00 00 00 00*	      align	256
    147  2300					      endif
    148  2300
    149  2300				   bmp_48x1_1_03
    150  2300		       7e		      BYTE.b	%01111110
    151  2301		       20		      BYTE.b	%00100000
    152  2302		       20		      BYTE.b	%00100000
    153  2303		       10		      BYTE.b	%00010000
    154  2304		       08		      BYTE.b	%00001000
    155  2305		       08		      BYTE.b	%00001000
    156  2306		       04		      BYTE.b	%00000100
    157  2307		       04		      BYTE.b	%00000100
    158  2308		       7e		      BYTE.b	%01111110
    159  2309		       00		      BYTE.b	%00000000
    160  230a		       be		      BYTE.b	%10111110
    161  230b		       88		      BYTE.b	%10001000
    162  230c		       88		      BYTE.b	%10001000
    163  230d		       88		      BYTE.b	%10001000
    164  230e		       88		      BYTE.b	%10001000
    165  230f		       88		      BYTE.b	%10001000
    166  2310		       88		      BYTE.b	%10001000
    167  2311		       88		      BYTE.b	%10001000
    168  2312		       88		      BYTE.b	%10001000
    169  2313		       be		      BYTE.b	%10111110
    170  2314		       00		      BYTE.b	%00000000
    171  2315		       00		      BYTE.b	%00000000
    172  2316		       f7		      BYTE.b	%11110111
    173  2317		       84		      BYTE.b	%10000100
    174  2318		       84		      BYTE.b	%10000100
    175  2319		       84		      BYTE.b	%10000100
    176  231a		       84		      BYTE.b	%10000100
    177  231b		       87		      BYTE.b	%10000111
    178  231c		       84		      BYTE.b	%10000100
    179  231d		       84		      BYTE.b	%10000100
    180  231e		       84		      BYTE.b	%10000100
    181  231f		       07		      BYTE.b	%00000111
    182  2320
    183  2320				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    184  2320				  -	      align	256
    185  2320					      endif
    186  2320
    187  2320				   bmp_48x1_1_04
    188  2320		       90		      BYTE.b	%10010000
    189  2321		       90		      BYTE.b	%10010000
    190  2322		       90		      BYTE.b	%10010000
    191  2323		       90		      BYTE.b	%10010000
    192  2324		       f0		      BYTE.b	%11110000
    193  2325		       90		      BYTE.b	%10010000
    194  2326		       90		      BYTE.b	%10010000
    195  2327		       90		      BYTE.b	%10010000
    196  2328		       60		      BYTE.b	%01100000
    197  2329		       00		      BYTE.b	%00000000
    198  232a		       f4		      BYTE.b	%11110100
    199  232b		       84		      BYTE.b	%10000100
    200  232c		       84		      BYTE.b	%10000100
    201  232d		       84		      BYTE.b	%10000100
    202  232e		       84		      BYTE.b	%10000100
    203  232f		       84		      BYTE.b	%10000100
    204  2330		       84		      BYTE.b	%10000100
    205  2331		       84		      BYTE.b	%10000100
    206  2332		       8a		      BYTE.b	%10001010
    207  2333		       91		      BYTE.b	%10010001
    208  2334		       00		      BYTE.b	%00000000
    209  2335		       00		      BYTE.b	%00000000
    210  2336		       c4		      BYTE.b	%11000100
    211  2337		       04		      BYTE.b	%00000100
    212  2338		       04		      BYTE.b	%00000100
    213  2339		       04		      BYTE.b	%00000100
    214  233a		       04		      BYTE.b	%00000100
    215  233b		       84		      BYTE.b	%10000100
    216  233c		       04		      BYTE.b	%00000100
    217  233d		       04		      BYTE.b	%00000100
    218  233e		       0a		      BYTE.b	%00001010
    219  233f		       d1		      BYTE.b	%11010001
    220  2340
    221  2340				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    222  2340				  -	      align	256
    223  2340					      endif
    224  2340
    225  2340				   bmp_48x1_1_05
    226  2340		       00		      BYTE.b	%00000000
    227  2341		       00		      BYTE.b	%00000000
    228  2342		       00		      BYTE.b	%00000000
    229  2343		       00		      BYTE.b	%00000000
    230  2344		       00		      BYTE.b	%00000000
    231  2345		       00		      BYTE.b	%00000000
    232  2346		       00		      BYTE.b	%00000000
    233  2347		       00		      BYTE.b	%00000000
    234  2348		       00		      BYTE.b	%00000000
    235  2349		       00		      BYTE.b	%00000000
    236  234a		       00		      BYTE.b	%00000000
    237  234b		       00		      BYTE.b	%00000000
    238  234c		       00		      BYTE.b	%00000000
    239  234d		       00		      BYTE.b	%00000000
    240  234e		       00		      BYTE.b	%00000000
    241  234f		       00		      BYTE.b	%00000000
    242  2350		       00		      BYTE.b	%00000000
    243  2351		       00		      BYTE.b	%00000000
    244  2352		       00		      BYTE.b	%00000000
    245  2353		       00		      BYTE.b	%00000000
    246  2354		       00		      BYTE.b	%00000000
    247  2355		       00		      BYTE.b	%00000000
    248  2356		       1e		      BYTE.b	%00011110
    249  2357		       01		      BYTE.b	%00000001
    250  2358		       01		      BYTE.b	%00000001
    251  2359		       01		      BYTE.b	%00000001
    252  235a		       01		      BYTE.b	%00000001
    253  235b		       0e		      BYTE.b	%00001110
    254  235c		       10		      BYTE.b	%00010000
    255  235d		       10		      BYTE.b	%00010000
    256  235e		       10		      BYTE.b	%00010000
    257  235f		       4f		      BYTE.b	%01001111
    258  2360		       40		      BYTE.b	%01000000
    259  2361
------- FILE titlescreen/asm/titlescreen.asm
    222  2361					      endif
    223  2361					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 2
      0  2361					      include	"titlescreen/48x1_2_image.asm"
      1  2361
      2  2361							; *** if you want to modify the bitmap color on the fly, just dim a
      3  2361							; *** variable in bB called 'bmp_48x1_2_color' , and use it to set the
      4  2361							; *** color.
      5  2361
      6  2361							;*** The height of the displayed data...
      7  2361		       00 14	   bmp_48x1_2_window =	20
      8  2361
      9  2361							;*** The height of the bitmap data. This can be larger than
     10  2361							;*** the displayed data height, if you are scrolling or animating
     11  2361							;*** the data...
     12  2361		       00 14	   bmp_48x1_2_height =	20
     13  2361
     14  2361				  -	      ifnconst	bmp_48x1_2_color
     15  2361				  -bmp_48x1_2_color
     16  2361					      endif
     17  2361							; *** this is the bitmap color. If you want to change it in a 
     18  2361							; *** variable instead, dim one in bB called bmp_48x1_2_color
     19  2361		       40		      .byte.b	$40
     20  2362
     21  2362
     22  2362				  -	      if	>. != >[.+bmp_48x1_2_height]
     23  2362				  -	      align	256
     24  2362					      endif
     25  2362
     26  2362				   bmp_48x1_2_00
     27  2362
     28  2362		       00		      BYTE.b	%00000000
     29  2363		       00		      BYTE.b	%00000000
     30  2364		       00		      BYTE.b	%00000000
     31  2365		       00		      BYTE.b	%00000000
     32  2366		       00		      BYTE.b	%00000000
     33  2367		       00		      BYTE.b	%00000000
     34  2368		       00		      BYTE.b	%00000000
     35  2369		       00		      BYTE.b	%00000000
     36  236a		       00		      BYTE.b	%00000000
     37  236b		       00		      BYTE.b	%00000000
     38  236c		       00		      BYTE.b	%00000000
     39  236d		       00		      BYTE.b	%00000000
     40  236e		       00		      BYTE.b	%00000000
     41  236f		       00		      BYTE.b	%00000000
     42  2370		       00		      BYTE.b	%00000000
     43  2371		       00		      BYTE.b	%00000000
     44  2372		       00		      BYTE.b	%00000000
     45  2373		       00		      BYTE.b	%00000000
     46  2374		       00		      BYTE.b	%00000000
     47  2375		       00		      BYTE.b	%00000000
     48  2376		       00		      BYTE.b	%00000000
     49  2377		       00		      BYTE.b	%00000000
     50  2378		       00		      BYTE.b	%00000000
     51  2379
     52  2379				  -	      if	>. != >[.+(bmp_48x1_2_height)]
     53  2379				  -	      align	256
     54  2379					      endif
     55  2379
     56  2379				   bmp_48x1_2_01
     57  2379
     58  2379		       00		      BYTE.b	%00000000
     59  237a		       00		      BYTE.b	%00000000
     60  237b		       00		      BYTE.b	%00000000
     61  237c		       00		      BYTE.b	%00000000
     62  237d		       00		      BYTE.b	%00000000
     63  237e		       00		      BYTE.b	%00000000
     64  237f		       00		      BYTE.b	%00000000
     65  2380		       00		      BYTE.b	%00000000
     66  2381		       00		      BYTE.b	%00000000
     67  2382		       c4		      BYTE.b	%11000100
     68  2383		       24		      BYTE.b	%00100100
     69  2384		       e4		      BYTE.b	%11100100
     70  2385		       84		      BYTE.b	%10000100
     71  2386		       6e		      BYTE.b	%01101110
     72  2387		       00		      BYTE.b	%00000000
     73  2388		       46		      BYTE.b	%01000110
     74  2389		       88		      BYTE.b	%10001000
     75  238a		       88		      BYTE.b	%10001000
     76  238b		       88		      BYTE.b	%10001000
     77  238c		       46		      BYTE.b	%01000110
     78  238d		       00		      BYTE.b	%00000000
     79  238e		       00		      BYTE.b	%00000000
     80  238f		       88		      BYTE.b	%10001000
     81  2390
     82  2390				  -	      if	>. != >[.+(bmp_48x1_2_height)]
     83  2390				  -	      align	256
     84  2390					      endif
     85  2390
     86  2390				   bmp_48x1_2_02
     87  2390
     88  2390		       00		      BYTE.b	%00000000
     89  2391		       00		      BYTE.b	%00000000
     90  2392		       00		      BYTE.b	%00000000
     91  2393		       ea		      BYTE.b	%11101010
     92  2394		       4a		      BYTE.b	%01001010
     93  2395		       4a		      BYTE.b	%01001010
     94  2396		       4e		      BYTE.b	%01001110
     95  2397		       ea		      BYTE.b	%11101010
     96  2398		       00		      BYTE.b	%00000000
     97  2399		       68		      BYTE.b	%01101000
     98  239a		       a8		      BYTE.b	%10101000
     99  239b		       ac		      BYTE.b	%10101100
    100  239c		       80		      BYTE.b	%10000000
    101  239d		       60		      BYTE.b	%01100000
    102  239e		       00		      BYTE.b	%00000000
    103  239f		       80		      BYTE.b	%10000000
    104  23a0		       40		      BYTE.b	%01000000
    105  23a1		       40		      BYTE.b	%01000000
    106  23a2		       40		      BYTE.b	%01000000
    107  23a3		       80		      BYTE.b	%10000000
    108  23a4		       00		      BYTE.b	%00000000
    109  23a5		       00		      BYTE.b	%00000000
    110  23a6		       40		      BYTE.b	%01000000
    111  23a7
    112  23a7				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    113  23a7				  -	      align	256
    114  23a7					      endif
    115  23a7
    116  23a7				   bmp_48x1_2_03
    117  23a7
    118  23a7		       00		      BYTE.b	%00000000
    119  23a8		       00		      BYTE.b	%00000000
    120  23a9		       00		      BYTE.b	%00000000
    121  23aa		       60		      BYTE.b	%01100000
    122  23ab		       80		      BYTE.b	%10000000
    123  23ac		       80		      BYTE.b	%10000000
    124  23ad		       80		      BYTE.b	%10000000
    125  23ae		       60		      BYTE.b	%01100000
    126  23af		       00		      BYTE.b	%00000000
    127  23b0		       e4		      BYTE.b	%11100100
    128  23b1		       aa		      BYTE.b	%10101010
    129  23b2		       6a		      BYTE.b	%01101010
    130  23b3		       00		      BYTE.b	%00000000
    131  23b4		       00		      BYTE.b	%00000000
    132  23b5		       00		      BYTE.b	%00000000
    133  23b6		       ec		      BYTE.b	%11101100
    134  23b7		       8a		      BYTE.b	%10001010
    135  23b8		       4a		      BYTE.b	%01001010
    136  23b9		       2a		      BYTE.b	%00101010
    137  23ba		       c6		      BYTE.b	%11000110
    138  23bb		       00		      BYTE.b	%00000000
    139  23bc		       00		      BYTE.b	%00000000
    140  23bd		       2a		      BYTE.b	%00101010
    141  23be
    142  23be				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    143  23be				  -	      align	256
    144  23be					      endif
    145  23be
    146  23be				   bmp_48x1_2_04
    147  23be
    148  23be		       00		      BYTE.b	%00000000
    149  23bf		       00		      BYTE.b	%00000000
    150  23c0		       00		      BYTE.b	%00000000
    151  23c1		       00		      BYTE.b	%00000000
    152  23c2		       00		      BYTE.b	%00000000
    153  23c3		       00		      BYTE.b	%00000000
    154  23c4		       00		      BYTE.b	%00000000
    155  23c5		       00		      BYTE.b	%00000000
    156  23c6		       00		      BYTE.b	%00000000
    157  23c7		       6c		      BYTE.b	%01101100
    158  23c8		       c4		      BYTE.b	%11000100
    159  23c9		       e6		      BYTE.b	%11100110
    160  23ca		       00		      BYTE.b	%00000000
    161  23cb		       00		      BYTE.b	%00000000
    162  23cc		       00		      BYTE.b	%00000000
    163  23cd		       ec		      BYTE.b	%11101100
    164  23ce		       42		      BYTE.b	%01000010
    165  23cf		       4c		      BYTE.b	%01001100
    166  23d0		       c8		      BYTE.b	%11001000
    167  23d1		       4e		      BYTE.b	%01001110
    168  23d2		       00		      BYTE.b	%00000000
    169  23d3		       00		      BYTE.b	%00000000
    170  23d4		       c8		      BYTE.b	%11001000
    171  23d5
    172  23d5				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    173  23d5				  -	      align	256
    174  23d5					      endif
    175  23d5
    176  23d5				   bmp_48x1_2_05
    177  23d5
    178  23d5		       00		      BYTE.b	%00000000
    179  23d6		       00		      BYTE.b	%00000000
    180  23d7		       00		      BYTE.b	%00000000
    181  23d8		       00		      BYTE.b	%00000000
    182  23d9		       00		      BYTE.b	%00000000
    183  23da		       00		      BYTE.b	%00000000
    184  23db		       00		      BYTE.b	%00000000
    185  23dc		       00		      BYTE.b	%00000000
    186  23dd		       00		      BYTE.b	%00000000
    187  23de		       00		      BYTE.b	%00000000
    188  23df		       00		      BYTE.b	%00000000
    189  23e0		       00		      BYTE.b	%00000000
    190  23e1		       00		      BYTE.b	%00000000
    191  23e2		       00		      BYTE.b	%00000000
    192  23e3		       00		      BYTE.b	%00000000
    193  23e4		       00		      BYTE.b	%00000000
    194  23e5		       00		      BYTE.b	%00000000
    195  23e6		       00		      BYTE.b	%00000000
    196  23e7		       00		      BYTE.b	%00000000
    197  23e8		       00		      BYTE.b	%00000000
    198  23e9		       00		      BYTE.b	%00000000
    199  23ea		       00		      BYTE.b	%00000000
    200  23eb		       00		      BYTE.b	%00000000
    201  23ec
------- FILE titlescreen/asm/titlescreen.asm
    225  23ec					      endif
    226  23ec				  -	      ifconst	mk_48x1_3_on
    227  23ec				  -	      include	"titlescreen/48x1_3_image.asm"
    228  23ec					      endif
    229  23ec				  -	      ifconst	mk_48x1_4_on
    230  23ec				  -	      include	"titlescreen/48x1_4_image.asm"
    231  23ec					      endif
    232  23ec				  -	      ifconst	mk_48x1_5_on
    233  23ec				  -	      include	"titlescreen/48x1_5_image.asm"
    234  23ec					      endif
    235  23ec				  -	      ifconst	mk_48x1_6_on
    236  23ec				  -	      include	"titlescreen/48x1_6_image.asm"
    237  23ec					      endif
    238  23ec				  -	      ifconst	mk_48x1_7_on
    239  23ec				  -	      include	"titlescreen/48x1_7_image.asm"
    240  23ec					      endif
    241  23ec				  -	      ifconst	mk_48x1_8_on
    242  23ec				  -	      include	"titlescreen/48x1_8_image.asm"
    243  23ec					      endif
    244  23ec
    245  23ec
    246  23ec					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 2
      0  23ec					      include	"titlescreen/48x2_1_image.asm"
      1  23ec
      2  23ec							;*** The height of the displayed data...
      3  23ec		       00 40	   bmp_48x2_1_window =	64
      4  23ec
      5  23ec							;*** The height of the bitmap data. This can be larger than 
      6  23ec							;*** the displayed data height, if you're scrolling or animating 
      7  23ec							;*** the data...
      8  23ec		       00 40	   bmp_48x2_1_height =	64
      9  23ec
     10  23ec					      if	>. != >[.+(bmp_48x2_1_height)]
     11  2400		       00 00 00 00*	      align	256
     12  2400					      endif
     13  2400		       00		      BYTE.b	0	; leave this here!
     14  2401
     15  2401
     16  2401							;*** The color of each line in the bitmap, in reverse order...
     17  2401				   bmp_48x2_1_colors
     18  2401		       0e		      BYTE.b	$0e
     19  2402		       0e		      BYTE.b	$0e
     20  2403		       0e		      BYTE.b	$0e
     21  2404		       0e		      BYTE.b	$0e
     22  2405		       0e		      BYTE.b	$0e
     23  2406		       0e		      BYTE.b	$0e
     24  2407		       0e		      BYTE.b	$0e
     25  2408		       0e		      BYTE.b	$0e
     26  2409		       0e		      BYTE.b	$0e
     27  240a		       0e		      BYTE.b	$0e
     28  240b		       0e		      BYTE.b	$0e
     29  240c		       0e		      BYTE.b	$0e
     30  240d		       0e		      BYTE.b	$0e
     31  240e		       0e		      BYTE.b	$0e
     32  240f		       0e		      BYTE.b	$0e
     33  2410		       0e		      BYTE.b	$0e
     34  2411		       0e		      BYTE.b	$0e
     35  2412		       0e		      BYTE.b	$0e
     36  2413		       0e		      BYTE.b	$0e
     37  2414		       0e		      BYTE.b	$0e
     38  2415		       0e		      BYTE.b	$0e
     39  2416		       0e		      BYTE.b	$0e
     40  2417		       0e		      BYTE.b	$0e
     41  2418		       0e		      BYTE.b	$0e
     42  2419		       0e		      BYTE.b	$0e
     43  241a		       0e		      BYTE.b	$0e
     44  241b		       0e		      BYTE.b	$0e
     45  241c		       0e		      BYTE.b	$0e
     46  241d		       0e		      BYTE.b	$0e
     47  241e		       0e		      BYTE.b	$0e
     48  241f		       0e		      BYTE.b	$0e
     49  2420		       0e		      BYTE.b	$0e
     50  2421		       0e		      BYTE.b	$0e
     51  2422		       0e		      BYTE.b	$0e
     52  2423		       0e		      BYTE.b	$0e
     53  2424		       0e		      BYTE.b	$0e
     54  2425		       0e		      BYTE.b	$0e
     55  2426		       0e		      BYTE.b	$0e
     56  2427		       0e		      BYTE.b	$0e
     57  2428		       0e		      BYTE.b	$0e
     58  2429		       0e		      BYTE.b	$0e
     59  242a		       0e		      BYTE.b	$0e
     60  242b		       0e		      BYTE.b	$0e
     61  242c		       0e		      BYTE.b	$0e
     62  242d		       0e		      BYTE.b	$0e
     63  242e		       0e		      BYTE.b	$0e
     64  242f		       0e		      BYTE.b	$0e
     65  2430		       0e		      BYTE.b	$0e
     66  2431		       0e		      BYTE.b	$0e
     67  2432		       0e		      BYTE.b	$0e
     68  2433		       0e		      BYTE.b	$0e
     69  2434		       0e		      BYTE.b	$0e
     70  2435		       0e		      BYTE.b	$0e
     71  2436		       0e		      BYTE.b	$0e
     72  2437		       0e		      BYTE.b	$0e
     73  2438		       0e		      BYTE.b	$0e
     74  2439		       0e		      BYTE.b	$0e
     75  243a		       0e		      BYTE.b	$0e
     76  243b		       0e		      BYTE.b	$0e
     77  243c		       0e		      BYTE.b	$0e
     78  243d		       0e		      BYTE.b	$0e
     79  243e		       0e		      BYTE.b	$0e
     80  243f		       0e		      BYTE.b	$0e
     81  2440		       0e		      BYTE.b	$0e
     82  2441
     83  2441				  -	      ifnconst	bmp_48x2_1_PF1
     84  2441				  -bmp_48x2_1_PF1
     85  2441					      endif
     86  2441		       00		      BYTE.b	%00000000
     87  2442				  -	      ifnconst	bmp_48x2_1_PF2
     88  2442				  -bmp_48x2_1_PF2
     89  2442					      endif
     90  2442		       ff		      BYTE.b	%11111111
     91  2443				  -	      ifnconst	bmp_48x2_1_background
     92  2443				  -bmp_48x2_1_background
     93  2443					      endif
     94  2443		       00		      BYTE.b	$00
     95  2444
     96  2444				  -	      if	>. != >[.+bmp_48x2_1_height]
     97  2444				  -	      align	256
     98  2444					      endif
     99  2444
    100  2444
    101  2444				   bmp_48x2_1_00
    102  2444		       f8		      BYTE.b	%11111000
    103  2445		       f8		      BYTE.b	%11111000
    104  2446		       00		      BYTE.b	%00000000
    105  2447		       00		      BYTE.b	%00000000
    106  2448		       00		      BYTE.b	%00000000
    107  2449		       3c		      BYTE.b	%00111100
    108  244a		       18		      BYTE.b	%00011000
    109  244b		       00		      BYTE.b	%00000000
    110  244c		       00		      BYTE.b	%00000000
    111  244d		       07		      BYTE.b	%00000111
    112  244e		       07		      BYTE.b	%00000111
    113  244f		       00		      BYTE.b	%00000000
    114  2450		       00		      BYTE.b	%00000000
    115  2451		       00		      BYTE.b	%00000000
    116  2452		       00		      BYTE.b	%00000000
    117  2453		       00		      BYTE.b	%00000000
    118  2454		       00		      BYTE.b	%00000000
    119  2455		       00		      BYTE.b	%00000000
    120  2456		       00		      BYTE.b	%00000000
    121  2457		       00		      BYTE.b	%00000000
    122  2458		       00		      BYTE.b	%00000000
    123  2459		       00		      BYTE.b	%00000000
    124  245a		       00		      BYTE.b	%00000000
    125  245b		       00		      BYTE.b	%00000000
    126  245c		       00		      BYTE.b	%00000000
    127  245d		       00		      BYTE.b	%00000000
    128  245e		       00		      BYTE.b	%00000000
    129  245f		       00		      BYTE.b	%00000000
    130  2460		       00		      BYTE.b	%00000000
    131  2461		       00		      BYTE.b	%00000000
    132  2462		       00		      BYTE.b	%00000000
    133  2463		       00		      BYTE.b	%00000000
    134  2464		       00		      BYTE.b	%00000000
    135  2465		       00		      BYTE.b	%00000000
    136  2466		       00		      BYTE.b	%00000000
    137  2467		       00		      BYTE.b	%00000000
    138  2468		       00		      BYTE.b	%00000000
    139  2469		       00		      BYTE.b	%00000000
    140  246a		       00		      BYTE.b	%00000000
    141  246b		       00		      BYTE.b	%00000000
    142  246c		       00		      BYTE.b	%00000000
    143  246d		       00		      BYTE.b	%00000000
    144  246e		       00		      BYTE.b	%00000000
    145  246f		       00		      BYTE.b	%00000000
    146  2470		       00		      BYTE.b	%00000000
    147  2471		       00		      BYTE.b	%00000000
    148  2472		       00		      BYTE.b	%00000000
    149  2473		       00		      BYTE.b	%00000000
    150  2474		       00		      BYTE.b	%00000000
    151  2475		       00		      BYTE.b	%00000000
    152  2476		       00		      BYTE.b	%00000000
    153  2477		       00		      BYTE.b	%00000000
    154  2478		       00		      BYTE.b	%00000000
    155  2479		       00		      BYTE.b	%00000000
    156  247a		       00		      BYTE.b	%00000000
    157  247b		       00		      BYTE.b	%00000000
    158  247c		       00		      BYTE.b	%00000000
    159  247d		       00		      BYTE.b	%00000000
    160  247e		       00		      BYTE.b	%00000000
    161  247f		       00		      BYTE.b	%00000000
    162  2480		       00		      BYTE.b	%00000000
    163  2481		       00		      BYTE.b	%00000000
    164  2482		       00		      BYTE.b	%00000000
    165  2483		       00		      BYTE.b	%00000000
    166  2484
    167  2484				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    168  2484				  -	      align	256
    169  2484					      endif
    170  2484
    171  2484				   bmp_48x2_1_01
    172  2484		       00		      BYTE.b	%00000000
    173  2485		       00		      BYTE.b	%00000000
    174  2486		       f8		      BYTE.b	%11111000
    175  2487		       f8		      BYTE.b	%11111000
    176  2488		       f0		      BYTE.b	%11110000
    177  2489		       00		      BYTE.b	%00000000
    178  248a		       00		      BYTE.b	%00000000
    179  248b		       07		      BYTE.b	%00000111
    180  248c		       c7		      BYTE.b	%11000111
    181  248d		       e0		      BYTE.b	%11100000
    182  248e		       e0		      BYTE.b	%11100000
    183  248f		       01		      BYTE.b	%00000001
    184  2490		       01		      BYTE.b	%00000001
    185  2491		       fc		      BYTE.b	%11111100
    186  2492		       fc		      BYTE.b	%11111100
    187  2493		       60		      BYTE.b	%01100000
    188  2494		       00		      BYTE.b	%00000000
    189  2495		       07		      BYTE.b	%00000111
    190  2496		       07		      BYTE.b	%00000111
    191  2497		       03		      BYTE.b	%00000011
    192  2498		       00		      BYTE.b	%00000000
    193  2499		       00		      BYTE.b	%00000000
    194  249a		       00		      BYTE.b	%00000000
    195  249b		       00		      BYTE.b	%00000000
    196  249c		       00		      BYTE.b	%00000000
    197  249d		       00		      BYTE.b	%00000000
    198  249e		       00		      BYTE.b	%00000000
    199  249f		       00		      BYTE.b	%00000000
    200  24a0		       00		      BYTE.b	%00000000
    201  24a1		       00		      BYTE.b	%00000000
    202  24a2		       00		      BYTE.b	%00000000
    203  24a3		       00		      BYTE.b	%00000000
    204  24a4		       00		      BYTE.b	%00000000
    205  24a5		       00		      BYTE.b	%00000000
    206  24a6		       00		      BYTE.b	%00000000
    207  24a7		       00		      BYTE.b	%00000000
    208  24a8		       00		      BYTE.b	%00000000
    209  24a9		       00		      BYTE.b	%00000000
    210  24aa		       00		      BYTE.b	%00000000
    211  24ab		       00		      BYTE.b	%00000000
    212  24ac		       00		      BYTE.b	%00000000
    213  24ad		       00		      BYTE.b	%00000000
    214  24ae		       00		      BYTE.b	%00000000
    215  24af		       00		      BYTE.b	%00000000
    216  24b0		       00		      BYTE.b	%00000000
    217  24b1		       00		      BYTE.b	%00000000
    218  24b2		       00		      BYTE.b	%00000000
    219  24b3		       00		      BYTE.b	%00000000
    220  24b4		       00		      BYTE.b	%00000000
    221  24b5		       00		      BYTE.b	%00000000
    222  24b6		       00		      BYTE.b	%00000000
    223  24b7		       00		      BYTE.b	%00000000
    224  24b8		       00		      BYTE.b	%00000000
    225  24b9		       00		      BYTE.b	%00000000
    226  24ba		       00		      BYTE.b	%00000000
    227  24bb		       00		      BYTE.b	%00000000
    228  24bc		       00		      BYTE.b	%00000000
    229  24bd		       00		      BYTE.b	%00000000
    230  24be		       00		      BYTE.b	%00000000
    231  24bf		       00		      BYTE.b	%00000000
    232  24c0		       00		      BYTE.b	%00000000
    233  24c1		       00		      BYTE.b	%00000000
    234  24c2		       00		      BYTE.b	%00000000
    235  24c3		       00		      BYTE.b	%00000000
    236  24c4
    237  24c4					      if	>. != >[.+(bmp_48x2_1_height)]
    238  2500		       00 00 00 00*	      align	256
    239  2500					      endif
    240  2500
    241  2500				   bmp_48x2_1_02
    242  2500		       00		      BYTE.b	%00000000
    243  2501		       00		      BYTE.b	%00000000
    244  2502		       00		      BYTE.b	%00000000
    245  2503		       00		      BYTE.b	%00000000
    246  2504		       00		      BYTE.b	%00000000
    247  2505		       00		      BYTE.b	%00000000
    248  2506		       00		      BYTE.b	%00000000
    249  2507		       00		      BYTE.b	%00000000
    250  2508		       00		      BYTE.b	%00000000
    251  2509		       00		      BYTE.b	%00000000
    252  250a		       00		      BYTE.b	%00000000
    253  250b		       f8		      BYTE.b	%11111000
    254  250c		       f8		      BYTE.b	%11111000
    255  250d		       60		      BYTE.b	%01100000
    256  250e		       00		      BYTE.b	%00000000
    257  250f		       07		      BYTE.b	%00000111
    258  2510		       07		      BYTE.b	%00000111
    259  2511		       f0		      BYTE.b	%11110000
    260  2512		       f0		      BYTE.b	%11110000
    261  2513		       f0		      BYTE.b	%11110000
    262  2514		       00		      BYTE.b	%00000000
    263  2515		       00		      BYTE.b	%00000000
    264  2516		       00		      BYTE.b	%00000000
    265  2517		       00		      BYTE.b	%00000000
    266  2518		       00		      BYTE.b	%00000000
    267  2519		       00		      BYTE.b	%00000000
    268  251a		       00		      BYTE.b	%00000000
    269  251b		       00		      BYTE.b	%00000000
    270  251c		       00		      BYTE.b	%00000000
    271  251d		       00		      BYTE.b	%00000000
    272  251e		       00		      BYTE.b	%00000000
    273  251f		       00		      BYTE.b	%00000000
    274  2520		       00		      BYTE.b	%00000000
    275  2521		       00		      BYTE.b	%00000000
    276  2522		       00		      BYTE.b	%00000000
    277  2523		       00		      BYTE.b	%00000000
    278  2524		       00		      BYTE.b	%00000000
    279  2525		       00		      BYTE.b	%00000000
    280  2526		       00		      BYTE.b	%00000000
    281  2527		       00		      BYTE.b	%00000000
    282  2528		       00		      BYTE.b	%00000000
    283  2529		       00		      BYTE.b	%00000000
    284  252a		       00		      BYTE.b	%00000000
    285  252b		       00		      BYTE.b	%00000000
    286  252c		       00		      BYTE.b	%00000000
    287  252d		       00		      BYTE.b	%00000000
    288  252e		       00		      BYTE.b	%00000000
    289  252f		       ff		      BYTE.b	%11111111
    290  2530		       ff		      BYTE.b	%11111111
    291  2531		       ff		      BYTE.b	%11111111
    292  2532		       ff		      BYTE.b	%11111111
    293  2533		       f8		      BYTE.b	%11111000
    294  2534		       f8		      BYTE.b	%11111000
    295  2535		       f8		      BYTE.b	%11111000
    296  2536		       f8		      BYTE.b	%11111000
    297  2537		       f8		      BYTE.b	%11111000
    298  2538		       f8		      BYTE.b	%11111000
    299  2539		       e0		      BYTE.b	%11100000
    300  253a		       e0		      BYTE.b	%11100000
    301  253b		       e0		      BYTE.b	%11100000
    302  253c		       e0		      BYTE.b	%11100000
    303  253d		       e0		      BYTE.b	%11100000
    304  253e		       7f		      BYTE.b	%01111111
    305  253f		       1f		      BYTE.b	%00011111
    306  2540
    307  2540				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    308  2540				  -	      align	256
    309  2540					      endif
    310  2540
    311  2540				   bmp_48x2_1_03
    312  2540		       00		      BYTE.b	%00000000
    313  2541		       00		      BYTE.b	%00000000
    314  2542		       00		      BYTE.b	%00000000
    315  2543		       00		      BYTE.b	%00000000
    316  2544		       00		      BYTE.b	%00000000
    317  2545		       00		      BYTE.b	%00000000
    318  2546		       00		      BYTE.b	%00000000
    319  2547		       00		      BYTE.b	%00000000
    320  2548		       00		      BYTE.b	%00000000
    321  2549		       00		      BYTE.b	%00000000
    322  254a		       00		      BYTE.b	%00000000
    323  254b		       00		      BYTE.b	%00000000
    324  254c		       00		      BYTE.b	%00000000
    325  254d		       00		      BYTE.b	%00000000
    326  254e		       00		      BYTE.b	%00000000
    327  254f		       f8		      BYTE.b	%11111000
    328  2550		       f8		      BYTE.b	%11111000
    329  2551		       00		      BYTE.b	%00000000
    330  2552		       00		      BYTE.b	%00000000
    331  2553		       00		      BYTE.b	%00000000
    332  2554		       00		      BYTE.b	%00000000
    333  2555		       00		      BYTE.b	%00000000
    334  2556		       00		      BYTE.b	%00000000
    335  2557		       00		      BYTE.b	%00000000
    336  2558		       00		      BYTE.b	%00000000
    337  2559		       00		      BYTE.b	%00000000
    338  255a		       00		      BYTE.b	%00000000
    339  255b		       00		      BYTE.b	%00000000
    340  255c		       00		      BYTE.b	%00000000
    341  255d		       00		      BYTE.b	%00000000
    342  255e		       00		      BYTE.b	%00000000
    343  255f		       00		      BYTE.b	%00000000
    344  2560		       00		      BYTE.b	%00000000
    345  2561		       00		      BYTE.b	%00000000
    346  2562		       00		      BYTE.b	%00000000
    347  2563		       00		      BYTE.b	%00000000
    348  2564		       00		      BYTE.b	%00000000
    349  2565		       00		      BYTE.b	%00000000
    350  2566		       00		      BYTE.b	%00000000
    351  2567		       00		      BYTE.b	%00000000
    352  2568		       00		      BYTE.b	%00000000
    353  2569		       00		      BYTE.b	%00000000
    354  256a		       00		      BYTE.b	%00000000
    355  256b		       00		      BYTE.b	%00000000
    356  256c		       00		      BYTE.b	%00000000
    357  256d		       00		      BYTE.b	%00000000
    358  256e		       1f		      BYTE.b	%00011111
    359  256f		       ff		      BYTE.b	%11111111
    360  2570		       ff		      BYTE.b	%11111111
    361  2571		       e0		      BYTE.b	%11100000
    362  2572		       e0		      BYTE.b	%11100000
    363  2573		       e0		      BYTE.b	%11100000
    364  2574		       e0		      BYTE.b	%11100000
    365  2575		       ff		      BYTE.b	%11111111
    366  2576		       ff		      BYTE.b	%11111111
    367  2577		       ff		      BYTE.b	%11111111
    368  2578		       ff		      BYTE.b	%11111111
    369  2579		       3f		      BYTE.b	%00111111
    370  257a		       1f		      BYTE.b	%00011111
    371  257b		       1f		      BYTE.b	%00011111
    372  257c		       1f		      BYTE.b	%00011111
    373  257d		       3f		      BYTE.b	%00111111
    374  257e		       ff		      BYTE.b	%11111111
    375  257f		       ff		      BYTE.b	%11111111
    376  2580
    377  2580				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    378  2580				  -	      align	256
    379  2580					      endif
    380  2580
    381  2580				   bmp_48x2_1_04
    382  2580		       00		      BYTE.b	%00000000
    383  2581		       00		      BYTE.b	%00000000
    384  2582		       00		      BYTE.b	%00000000
    385  2583		       00		      BYTE.b	%00000000
    386  2584		       00		      BYTE.b	%00000000
    387  2585		       00		      BYTE.b	%00000000
    388  2586		       00		      BYTE.b	%00000000
    389  2587		       00		      BYTE.b	%00000000
    390  2588		       00		      BYTE.b	%00000000
    391  2589		       00		      BYTE.b	%00000000
    392  258a		       00		      BYTE.b	%00000000
    393  258b		       00		      BYTE.b	%00000000
    394  258c		       00		      BYTE.b	%00000000
    395  258d		       00		      BYTE.b	%00000000
    396  258e		       00		      BYTE.b	%00000000
    397  258f		       00		      BYTE.b	%00000000
    398  2590		       00		      BYTE.b	%00000000
    399  2591		       00		      BYTE.b	%00000000
    400  2592		       00		      BYTE.b	%00000000
    401  2593		       00		      BYTE.b	%00000000
    402  2594		       00		      BYTE.b	%00000000
    403  2595		       00		      BYTE.b	%00000000
    404  2596		       00		      BYTE.b	%00000000
    405  2597		       00		      BYTE.b	%00000000
    406  2598		       1f		      BYTE.b	%00011111
    407  2599		       3f		      BYTE.b	%00111111
    408  259a		       3f		      BYTE.b	%00111111
    409  259b		       1f		      BYTE.b	%00011111
    410  259c		       1f		      BYTE.b	%00011111
    411  259d		       1f		      BYTE.b	%00011111
    412  259e		       1f		      BYTE.b	%00011111
    413  259f		       00		      BYTE.b	%00000000
    414  25a0		       00		      BYTE.b	%00000000
    415  25a1		       00		      BYTE.b	%00000000
    416  25a2		       00		      BYTE.b	%00000000
    417  25a3		       00		      BYTE.b	%00000000
    418  25a4		       00		      BYTE.b	%00000000
    419  25a5		       00		      BYTE.b	%00000000
    420  25a6		       00		      BYTE.b	%00000000
    421  25a7		       00		      BYTE.b	%00000000
    422  25a8		       00		      BYTE.b	%00000000
    423  25a9		       00		      BYTE.b	%00000000
    424  25aa		       00		      BYTE.b	%00000000
    425  25ab		       00		      BYTE.b	%00000000
    426  25ac		       00		      BYTE.b	%00000000
    427  25ad		       00		      BYTE.b	%00000000
    428  25ae		       ff		      BYTE.b	%11111111
    429  25af		       ff		      BYTE.b	%11111111
    430  25b0		       ff		      BYTE.b	%11111111
    431  25b1		       ff		      BYTE.b	%11111111
    432  25b2		       ff		      BYTE.b	%11111111
    433  25b3		       c3		      BYTE.b	%11000011
    434  25b4		       c3		      BYTE.b	%11000011
    435  25b5		       c3		      BYTE.b	%11000011
    436  25b6		       c3		      BYTE.b	%11000011
    437  25b7		       c3		      BYTE.b	%11000011
    438  25b8		       c3		      BYTE.b	%11000011
    439  25b9		       01		      BYTE.b	%00000001
    440  25ba		       00		      BYTE.b	%00000000
    441  25bb		       00		      BYTE.b	%00000000
    442  25bc		       00		      BYTE.b	%00000000
    443  25bd		       80		      BYTE.b	%10000000
    444  25be		       ff		      BYTE.b	%11111111
    445  25bf		       ff		      BYTE.b	%11111111
    446  25c0
    447  25c0					      if	>. != >[.+(bmp_48x2_1_height)]
    448  2600		       00 00 00 00*	      align	256
    449  2600					      endif
    450  2600
    451  2600				   bmp_48x2_1_05
    452  2600		       00		      BYTE.b	%00000000
    453  2601		       00		      BYTE.b	%00000000
    454  2602		       00		      BYTE.b	%00000000
    455  2603		       00		      BYTE.b	%00000000
    456  2604		       00		      BYTE.b	%00000000
    457  2605		       00		      BYTE.b	%00000000
    458  2606		       00		      BYTE.b	%00000000
    459  2607		       00		      BYTE.b	%00000000
    460  2608		       00		      BYTE.b	%00000000
    461  2609		       00		      BYTE.b	%00000000
    462  260a		       00		      BYTE.b	%00000000
    463  260b		       00		      BYTE.b	%00000000
    464  260c		       00		      BYTE.b	%00000000
    465  260d		       00		      BYTE.b	%00000000
    466  260e		       00		      BYTE.b	%00000000
    467  260f		       00		      BYTE.b	%00000000
    468  2610		       00		      BYTE.b	%00000000
    469  2611		       00		      BYTE.b	%00000000
    470  2612		       00		      BYTE.b	%00000000
    471  2613		       00		      BYTE.b	%00000000
    472  2614		       00		      BYTE.b	%00000000
    473  2615		       00		      BYTE.b	%00000000
    474  2616		       00		      BYTE.b	%00000000
    475  2617		       00		      BYTE.b	%00000000
    476  2618		       07		      BYTE.b	%00000111
    477  2619		       07		      BYTE.b	%00000111
    478  261a		       07		      BYTE.b	%00000111
    479  261b		       07		      BYTE.b	%00000111
    480  261c		       07		      BYTE.b	%00000111
    481  261d		       00		      BYTE.b	%00000000
    482  261e		       00		      BYTE.b	%00000000
    483  261f		       00		      BYTE.b	%00000000
    484  2620		       00		      BYTE.b	%00000000
    485  2621		       00		      BYTE.b	%00000000
    486  2622		       00		      BYTE.b	%00000000
    487  2623		       00		      BYTE.b	%00000000
    488  2624		       00		      BYTE.b	%00000000
    489  2625		       00		      BYTE.b	%00000000
    490  2626		       00		      BYTE.b	%00000000
    491  2627		       00		      BYTE.b	%00000000
    492  2628		       00		      BYTE.b	%00000000
    493  2629		       00		      BYTE.b	%00000000
    494  262a		       00		      BYTE.b	%00000000
    495  262b		       00		      BYTE.b	%00000000
    496  262c		       00		      BYTE.b	%00000000
    497  262d		       00		      BYTE.b	%00000000
    498  262e		       c0		      BYTE.b	%11000000
    499  262f		       e0		      BYTE.b	%11100000
    500  2630		       e0		      BYTE.b	%11100000
    501  2631		       e0		      BYTE.b	%11100000
    502  2632		       e0		      BYTE.b	%11100000
    503  2633		       e0		      BYTE.b	%11100000
    504  2634		       e0		      BYTE.b	%11100000
    505  2635		       e0		      BYTE.b	%11100000
    506  2636		       e0		      BYTE.b	%11100000
    507  2637		       e0		      BYTE.b	%11100000
    508  2638		       e0		      BYTE.b	%11100000
    509  2639		       e0		      BYTE.b	%11100000
    510  263a		       e0		      BYTE.b	%11100000
    511  263b		       e0		      BYTE.b	%11100000
    512  263c		       e0		      BYTE.b	%11100000
    513  263d		       c0		      BYTE.b	%11000000
    514  263e		       80		      BYTE.b	%10000000
    515  263f		       00		      BYTE.b	%00000000
------- FILE titlescreen/asm/titlescreen.asm
    248  2640					      endif
    249  2640				  -	      ifconst	mk_48x2_2_on
    250  2640				  -	      include	"titlescreen/48x2_2_image.asm"
    251  2640					      endif
    252  2640				  -	      ifconst	mk_48x2_3_on
    253  2640				  -	      include	"titlescreen/48x2_3_image.asm"
    254  2640					      endif
    255  2640				  -	      ifconst	mk_48x2_4_on
    256  2640				  -	      include	"titlescreen/48x2_4_image.asm"
    257  2640					      endif
    258  2640				  -	      ifconst	mk_48x2_5_on
    259  2640				  -	      include	"titlescreen/48x2_5_image.asm"
    260  2640					      endif
    261  2640				  -	      ifconst	mk_48x2_6_on
    262  2640				  -	      include	"titlescreen/48x2_6_image.asm"
    263  2640					      endif
    264  2640				  -	      ifconst	mk_48x2_7_on
    265  2640				  -	      include	"titlescreen/48x2_7_image.asm"
    266  2640					      endif
    267  2640
    268  2640				  -	      ifconst	mk_48x2_8_on
    269  2640				  -	      include	"titlescreen/48x2_8_image.asm"
    270  2640					      endif
    271  2640
    272  2640
    273  2640				  -	      ifconst	mk_96x2_1_on
    274  2640				  -	      include	"titlescreen/96x2_1_image.asm"
    275  2640					      endif
    276  2640				  -	      ifconst	mk_96x2_2_on
    277  2640				  -	      include	"titlescreen/96x2_2_image.asm"
    278  2640					      endif
    279  2640				  -	      ifconst	mk_96x2_3_on
    280  2640				  -	      include	"titlescreen/96x2_3_image.asm"
    281  2640					      endif
    282  2640				  -	      ifconst	mk_96x2_4_on
    283  2640				  -	      include	"titlescreen/96x2_4_image.asm"
    284  2640					      endif
    285  2640				  -	      ifconst	mk_96x2_5_on
    286  2640				  -	      include	"titlescreen/96x2_5_image.asm"
    287  2640					      endif
    288  2640				  -	      ifconst	mk_96x2_6_on
    289  2640				  -	      include	"titlescreen/96x2_6_image.asm"
    290  2640					      endif
    291  2640				  -	      ifconst	mk_96x2_7_on
    292  2640				  -	      include	"titlescreen/96x2_7_image.asm"
    293  2640					      endif
    294  2640				  -	      ifconst	mk_96x2_8_on
    295  2640				  -	      include	"titlescreen/96x2_8_image.asm"
    296  2640					      endif
    297  2640
    298  2640				  -	      ifconst	mk_player_on
    299  2640				  -	      include	"titlescreen/player_image.asm"
    300  2640					      endif
    301  2640
    302  2640				  -	      ifconst	mk_score_on
    303  2640				  -	      include	"titlescreen/score_image.asm"
    304  2640					      endif
    305  2640
    306  2640				  -	      ifconst	mk_gameselect_on
    307  2640				  -	      include	"titlescreen/gameselect_image.asm"
    308  2640					      endif
    309  2640
    310  2640				  -	      ifconst	mk_player_on
    311  2640				  -	      include	"titlescreen/asm/player_kernel.asm"
    312  2640					      endif		;mk_player_on
    313  2640
    314  2640
------- FILE c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\Animsrevenge.bas.asm
   8291  2640
   8292  2640				   .
   8293  2640							; 
   8294  2640
   8295  2640				   .L0416		;  bank 3
   8296  2640
   8297  2640					      if	ECHO2
      2452 bytes of ROM space left in bank 2
   8298  2640					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   8299  2640					      endif
   8300  2640		       00 01	   ECHO2      =	1
   8301  2fd4					      ORG	$2FF4-bscode_length
   8302  2fd4					      RORG	$3FF4-bscode_length
   8303  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   8304  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   8305  2fd6				  -	      stx	FASTFETCH
   8306  2fd6					      endif
   8307  2fd6		       9a		      txs
   8308  2fd7				  -	      if	bankswitch == 64
   8309  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8310  2fd7					      else
   8311  2fd7		       a9 f2		      lda	#>(start-1)
   8312  2fd9					      endif
   8313  2fd9		       48		      pha
   8314  2fda		       a9 51		      lda	#<(start-1)
   8315  2fdc		       48		      pha
   8316  2fdd		       48		      pha
   8317  2fde		       8a		      txa
   8318  2fdf		       48		      pha
   8319  2fe0		       ba		      tsx
   8320  2fe1					      if	bankswitch != 64
   8321  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   8322  2fe3		       2a		      rol
   8323  2fe4		       2a		      rol
   8324  2fe5		       2a		      rol
   8325  2fe6		       2a		      rol
   8326  2fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8327  2fe9		       aa		      tax
   8328  2fea		       e8		      inx
   8329  2feb				  -	      else
   8330  2feb				  -	      lda	4,x	; get high byte of return address
   8331  2feb				  -	      tay
   8332  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8333  2feb				  -	      sta	4,x
   8334  2feb				  -	      tya
   8335  2feb				  -	      lsr
   8336  2feb				  -	      lsr
   8337  2feb				  -	      lsr
   8338  2feb				  -	      lsr
   8339  2feb				  -	      tax
   8340  2feb				  -	      inx
   8341  2feb					      endif
   8342  2feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   8343  2fee		       68		      pla
   8344  2fef		       aa		      tax
   8345  2ff0		       68		      pla
   8346  2ff1		       60		      rts
   8347  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8348  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8349  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8350  2ff2					      endif
   8351  2ffc					      ORG	$2FFC
   8352  2ffc					      RORG	$3FFC
   8353  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   8354  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   8355  3000					      ORG	$3000
   8356  3000					      RORG	$5000
   8357  3000				   ._P_U
   8358  3000							; _P_U
   8359  3000
   8360  3000				   .
   8361  3000							; 
   8362  3000
   8363  3000				   .
   8364  3000							; 
   8365  3000
   8366  3000				   .
   8367  3000							; 
   8368  3000
   8369  3000				   .
   8370  3000							; 
   8371  3000
   8372  3000				   .L0417		;  player1color:
   8373  3000
   8374  3000		       a2 84		      LDX	#<playercolorL0417_1
   8375  3002		       86 87		      STX	player1color
   8376  3004		       a9 f7		      LDA	#>playercolorL0417_1
   8377  3006		       85 88		      STA	player1color+1
   8378  3008				   .
   8379  3008							; 
   8380  3008
   8381  3008				   .L0418		;  on _Frame_Counter goto __Pu00 __Pu01 __Pu02 __Pu03
   8382  3008
   8383  3008		       a6 d5		      LDX	_Frame_Counter
   8384  300a		       bd 13 50 	      LDA	.L0418jumptablehi,x
   8385  300d		       48		      PHA
   8386  300e		       bd 17 50 	      LDA	.L0418jumptablelo,x
   8387  3011		       48		      PHA
   8388  3012		       60		      RTS
   8389  3013				   .L0418jumptablehi
   8390  3013		       50		      .byte.b	>(.__Pu00-1)
   8391  3014		       50		      .byte.b	>(.__Pu01-1)
   8392  3015		       50		      .byte.b	>(.__Pu02-1)
   8393  3016		       50		      .byte.b	>(.__Pu03-1)
   8394  3017				   .L0418jumptablelo
   8395  3017		       27		      .byte.b	<(.__Pu00-1)
   8396  3018		       36		      .byte.b	<(.__Pu01-1)
   8397  3019		       45		      .byte.b	<(.__Pu02-1)
   8398  301a		       54		      .byte.b	<(.__Pu03-1)
   8399  301b				   .
   8400  301b							; 
   8401  301b
   8402  301b				   .__Pu_Frame_Done
   8403  301b							; __Pu_Frame_Done
   8404  301b
   8405  301b				   .L0419		;  return
   8406  301b
   8407  301b		       ba		      tsx
   8408  301c		       b5 02		      lda	2,x	; check return address
   8409  301e		       49 50		      eor	#(>*)	; vs. current PCH
   8410  3020		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8411  3022		       f0 03		      beq	*+5	; if equal, do normal return
   8412  3024		       4c dd ff 	      JMP	BS_return
   8413  3027		       60		      RTS
   8414  3028				   .
   8415  3028							; 
   8416  3028
   8417  3028				   .__Pu00
   8418  3028							; __Pu00
   8419  3028
   8420  3028				   .L0420		;  player1:
   8421  3028
   8422  3028		       a2 9c		      LDX	#<playerL0420_1
   8423  302a		       86 8c		      STX	player1pointerlo
   8424  302c		       a9 f7		      LDA	#>playerL0420_1
   8425  302e		       85 8d		      STA	player1pointerhi
   8426  3030		       a9 16		      LDA	#22
   8427  3032		       85 8f		      STA	player1height
   8428  3034				   .
   8429  3034							; 
   8430  3034
   8431  3034				   .L0421		;  goto __Pu_Frame_Done
   8432  3034
   8433  3034		       4c 1b 50 	      jmp	.__Pu_Frame_Done
   8434  3037
   8435  3037				   .
   8436  3037							; 
   8437  3037
   8438  3037				   .__Pu01
   8439  3037							; __Pu01
   8440  3037
   8441  3037				   .L0422		;  player1:
   8442  3037
   8443  3037		       a2 b3		      LDX	#<playerL0422_1
   8444  3039		       86 8c		      STX	player1pointerlo
   8445  303b		       a9 f7		      LDA	#>playerL0422_1
   8446  303d		       85 8d		      STA	player1pointerhi
   8447  303f		       a9 16		      LDA	#22
   8448  3041		       85 8f		      STA	player1height
   8449  3043				   .
   8450  3043							; 
   8451  3043
   8452  3043				   .L0423		;  goto __Pu_Frame_Done
   8453  3043
   8454  3043		       4c 1b 50 	      jmp	.__Pu_Frame_Done
   8455  3046
   8456  3046				   .
   8457  3046							; 
   8458  3046
   8459  3046				   .__Pu02
   8460  3046							; __Pu02
   8461  3046
   8462  3046				   .
   8463  3046							; 
   8464  3046
   8465  3046				   .L0424		;  player1:
   8466  3046
   8467  3046		       a2 ca		      LDX	#<playerL0424_1
   8468  3048		       86 8c		      STX	player1pointerlo
   8469  304a		       a9 f7		      LDA	#>playerL0424_1
   8470  304c		       85 8d		      STA	player1pointerhi
   8471  304e		       a9 17		      LDA	#23
   8472  3050		       85 8f		      STA	player1height
   8473  3052				   .
   8474  3052							; 
   8475  3052
   8476  3052				   .L0425		;  goto __Pu_Frame_Done
   8477  3052
   8478  3052		       4c 1b 50 	      jmp	.__Pu_Frame_Done
   8479  3055
   8480  3055				   .
   8481  3055							; 
   8482  3055
   8483  3055				   .__Pu03
   8484  3055							; __Pu03
   8485  3055
   8486  3055				   .L0426		;  player1:
   8487  3055
   8488  3055		       a2 e2		      LDX	#<playerL0426_1
   8489  3057		       86 8c		      STX	player1pointerlo
   8490  3059		       a9 f7		      LDA	#>playerL0426_1
   8491  305b		       85 8d		      STA	player1pointerhi
   8492  305d		       a9 17		      LDA	#23
   8493  305f		       85 8f		      STA	player1height
   8494  3061				   .
   8495  3061							; 
   8496  3061
   8497  3061				   .L0427		;  goto __Pu_Frame_Done
   8498  3061
   8499  3061		       4c 1b 50 	      jmp	.__Pu_Frame_Done
   8500  3064
   8501  3064				   .
   8502  3064							; 
   8503  3064
   8504  3064				   .L0428		;  return
   8505  3064
   8506  3064		       ba		      tsx
   8507  3065		       b5 02		      lda	2,x	; check return address
   8508  3067		       49 50		      eor	#(>*)	; vs. current PCH
   8509  3069		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8510  306b		       f0 03		      beq	*+5	; if equal, do normal return
   8511  306d		       4c dd ff 	      JMP	BS_return
   8512  3070		       60		      RTS
   8513  3071				   .
   8514  3071							; 
   8515  3071
   8516  3071				   .
   8517  3071							; 
   8518  3071
   8519  3071				   .
   8520  3071							; 
   8521  3071
   8522  3071				   .__Lvl_3
   8523  3071							; __Lvl_3
   8524  3071
   8525  3071				   .L0429		;  PuppetY  =	57  :  PuppetX	=  18  :  player0x  =  200  :  player0y  =  200
   8526  3071
   8527  3071		       a9 39		      LDA	#57
   8528  3073		       85 86		      STA	PuppetY
   8529  3075		       a9 12		      LDA	#18
   8530  3077		       85 81		      STA	PuppetX
   8531  3079		       a9 c8		      LDA	#200
   8532  307b		       85 80		      STA	player0x
   8533  307d		       85 85		      STA	player0y
   8534  307f				   .L0430		;  pfclear
   8535  307f
   8536  307f		       a9 00		      LDA	#0
   8537  3081		       85 ee		      sta	temp7
   8538  3083		       a9 50		      lda	#>(ret_point22-1)
   8539  3085		       48		      pha
   8540  3086		       a9 98		      lda	#<(ret_point22-1)
   8541  3088		       48		      pha
   8542  3089		       a9 f2		      lda	#>(pfclear-1)
   8543  308b		       48		      pha
   8544  308c		       a9 8f		      lda	#<(pfclear-1)
   8545  308e		       48		      pha
   8546  308f		       a5 ee		      lda	temp7
   8547  3091		       48		      pha
   8548  3092		       8a		      txa
   8549  3093		       48		      pha
   8550  3094		       a2 08		      ldx	#8
   8551  3096		       4c eb ff 	      jmp	BS_jsr
   8552  3099				   ret_point22
   8553  3099				   .L0431		;  playfieldpos  =  8
   8554  3099
   8555  3099		       a9 08		      LDA	#8
   8556  309b		       85 ef		      STA	playfieldpos
   8557  309d				   .L0432		;  COLUBK  =  $02
   8558  309d
   8559  309d		       a9 02		      LDA	#$02
   8560  309f		       85 09		      STA	COLUBK
   8561  30a1				   .L0433		;  pfcolors:
   8562  30a1
   8563  30a1		       a9 00		      lda	# $00
   8564  30a3		       85 08		      sta	COLUPF
   8565  30a5				  -	      ifconst	pfres
   8566  30a5				  -	      lda	#>(pfcolorlabel288-129+pfres*pfwidth)
   8567  30a5					      else
   8568  30a5		       a9 f7		      lda	#>(pfcolorlabel288-81)
   8569  30a7					      endif
   8570  30a7		       85 f1		      sta	pfcolortable+1
   8571  30a9				  -	      ifconst	pfres
   8572  30a9				  -	      lda	#<(pfcolorlabel288-129+pfres*pfwidth)
   8573  30a9					      else
   8574  30a9		       a9 07		      lda	#<(pfcolorlabel288-81)
   8575  30ab					      endif
   8576  30ab		       85 f0		      sta	pfcolortable
   8577  30ad				   .
   8578  30ad							; 
   8579  30ad
   8580  30ad				   .
   8581  30ad							; 
   8582  30ad
   8583  30ad				   .L0434		;  playfield:
   8584  30ad
   8585  30ad				  -	      ifconst	pfres
   8586  30ad				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   8587  30ad					      else
   8588  30ad		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   8589  30af					      endif
   8590  30af		       4c e2 50 	      jmp	pflabel3
   8591  30b2				   PF_data3
   8592  30b2		       00 01		      .byte.b	%00000000, %00000001
   8593  30b4					      if	(pfwidth>2)
   8594  30b4		       00 f0		      .byte.b	%00000000, %11110000
   8595  30b6					      endif
   8596  30b6		       00 01		      .byte.b	%00000000, %00000001
   8597  30b8					      if	(pfwidth>2)
   8598  30b8		       00 f0		      .byte.b	%00000000, %11110000
   8599  30ba					      endif
   8600  30ba		       00 01		      .byte.b	%00000000, %00000001
   8601  30bc					      if	(pfwidth>2)
   8602  30bc		       00 f0		      .byte.b	%00000000, %11110000
   8603  30be					      endif
   8604  30be		       ff 01		      .byte.b	%11111111, %00000001
   8605  30c0					      if	(pfwidth>2)
   8606  30c0		       00 f0		      .byte.b	%00000000, %11110000
   8607  30c2					      endif
   8608  30c2		       00 00		      .byte.b	%00000000, %00000000
   8609  30c4					      if	(pfwidth>2)
   8610  30c4		       00 f0		      .byte.b	%00000000, %11110000
   8611  30c6					      endif
   8612  30c6		       00 00		      .byte.b	%00000000, %00000000
   8613  30c8					      if	(pfwidth>2)
   8614  30c8		       00 f0		      .byte.b	%00000000, %11110000
   8615  30ca					      endif
   8616  30ca		       00 00		      .byte.b	%00000000, %00000000
   8617  30cc					      if	(pfwidth>2)
   8618  30cc		       00 f0		      .byte.b	%00000000, %11110000
   8619  30ce					      endif
   8620  30ce		       00 00		      .byte.b	%00000000, %00000000
   8621  30d0					      if	(pfwidth>2)
   8622  30d0		       00 f0		      .byte.b	%00000000, %11110000
   8623  30d2					      endif
   8624  30d2		       ff 01		      .byte.b	%11111111, %00000001
   8625  30d4					      if	(pfwidth>2)
   8626  30d4		       00 f0		      .byte.b	%00000000, %11110000
   8627  30d6					      endif
   8628  30d6		       00 01		      .byte.b	%00000000, %00000001
   8629  30d8					      if	(pfwidth>2)
   8630  30d8		       00 f0		      .byte.b	%00000000, %11110000
   8631  30da					      endif
   8632  30da		       00 01		      .byte.b	%00000000, %00000001
   8633  30dc					      if	(pfwidth>2)
   8634  30dc		       00 f0		      .byte.b	%00000000, %11110000
   8635  30de					      endif
   8636  30de		       00 01		      .byte.b	%00000000, %00000001
   8637  30e0					      if	(pfwidth>2)
   8638  30e0		       00 f0		      .byte.b	%00000000, %11110000
   8639  30e2					      endif
   8640  30e2				   pflabel3
   8641  30e2		       bd b2 50 	      lda	PF_data3,x
   8642  30e5		       95 a4		      sta	playfield,x
   8643  30e7		       ca		      dex
   8644  30e8		       10 f8		      bpl	pflabel3
   8645  30ea				   .L0435		;  drawscreen
   8646  30ea
   8647  30ea		       85 ee		      sta	temp7
   8648  30ec		       a9 51		      lda	#>(ret_point23-1)
   8649  30ee		       48		      pha
   8650  30ef		       a9 01		      lda	#<(ret_point23-1)
   8651  30f1		       48		      pha
   8652  30f2		       a9 f4		      lda	#>(drawscreen-1)
   8653  30f4		       48		      pha
   8654  30f5		       a9 3b		      lda	#<(drawscreen-1)
   8655  30f7		       48		      pha
   8656  30f8		       a5 ee		      lda	temp7
   8657  30fa		       48		      pha
   8658  30fb		       8a		      txa
   8659  30fc		       48		      pha
   8660  30fd		       a2 08		      ldx	#8
   8661  30ff		       4c eb ff 	      jmp	BS_jsr
   8662  3102				   ret_point23
   8663  3102				   .L0436		;  return
   8664  3102
   8665  3102		       ba		      tsx
   8666  3103		       b5 02		      lda	2,x	; check return address
   8667  3105		       49 51		      eor	#(>*)	; vs. current PCH
   8668  3107		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8669  3109		       f0 03		      beq	*+5	; if equal, do normal return
   8670  310b		       4c dd ff 	      JMP	BS_return
   8671  310e		       60		      RTS
   8672  310f				   .
   8673  310f							; 
   8674  310f
   8675  310f				   .L0437		;  bank 4
   8676  310f
   8677  310f					      if	ECHO3
      3781 bytes of ROM space left in bank 3
   8678  310f					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   8679  310f					      endif
   8680  310f		       00 01	   ECHO3      =	1
   8681  3fd4					      ORG	$3FF4-bscode_length
   8682  3fd4					      RORG	$5FF4-bscode_length
   8683  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   8684  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
   8685  3fd6				  -	      stx	FASTFETCH
   8686  3fd6					      endif
   8687  3fd6		       9a		      txs
   8688  3fd7				  -	      if	bankswitch == 64
   8689  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8690  3fd7					      else
   8691  3fd7		       a9 f2		      lda	#>(start-1)
   8692  3fd9					      endif
   8693  3fd9		       48		      pha
   8694  3fda		       a9 51		      lda	#<(start-1)
   8695  3fdc		       48		      pha
   8696  3fdd		       48		      pha
   8697  3fde		       8a		      txa
   8698  3fdf		       48		      pha
   8699  3fe0		       ba		      tsx
   8700  3fe1					      if	bankswitch != 64
   8701  3fe1		       b5 04		      lda	4,x	; get high byte of return address
   8702  3fe3		       2a		      rol
   8703  3fe4		       2a		      rol
   8704  3fe5		       2a		      rol
   8705  3fe6		       2a		      rol
   8706  3fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8707  3fe9		       aa		      tax
   8708  3fea		       e8		      inx
   8709  3feb				  -	      else
   8710  3feb				  -	      lda	4,x	; get high byte of return address
   8711  3feb				  -	      tay
   8712  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8713  3feb				  -	      sta	4,x
   8714  3feb				  -	      tya
   8715  3feb				  -	      lsr
   8716  3feb				  -	      lsr
   8717  3feb				  -	      lsr
   8718  3feb				  -	      lsr
   8719  3feb				  -	      tax
   8720  3feb				  -	      inx
   8721  3feb					      endif
   8722  3feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   8723  3fee		       68		      pla
   8724  3fef		       aa		      tax
   8725  3ff0		       68		      pla
   8726  3ff1		       60		      rts
   8727  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8728  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8729  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8730  3ff2					      endif
   8731  3ffc					      ORG	$3FFC
   8732  3ffc					      RORG	$5FFC
   8733  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   8734  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   8735  4000					      ORG	$4000
   8736  4000					      RORG	$7000
   8737  4000				   ._P_D
   8738  4000							; _P_D
   8739  4000
   8740  4000				   .
   8741  4000							; 
   8742  4000
   8743  4000				   .
   8744  4000							; 
   8745  4000
   8746  4000				   .
   8747  4000							; 
   8748  4000
   8749  4000				   .
   8750  4000							; 
   8751  4000
   8752  4000				   .L0438		;  player1color:
   8753  4000
   8754  4000		       a2 00		      LDX	#<playercolorL0438_1
   8755  4002		       86 87		      STX	player1color
   8756  4004		       a9 f8		      LDA	#>playercolorL0438_1
   8757  4006		       85 88		      STA	player1color+1
   8758  4008				   .
   8759  4008							; 
   8760  4008
   8761  4008				   .L0439		;  on _Frame_Counter goto __Pd00 __Pd01 __Pd02 __Pd03
   8762  4008
   8763  4008		       a6 d5		      LDX	_Frame_Counter
   8764  400a		       bd 13 70 	      LDA	.L0439jumptablehi,x
   8765  400d		       48		      PHA
   8766  400e		       bd 17 70 	      LDA	.L0439jumptablelo,x
   8767  4011		       48		      PHA
   8768  4012		       60		      RTS
   8769  4013				   .L0439jumptablehi
   8770  4013		       70		      .byte.b	>(.__Pd00-1)
   8771  4014		       70		      .byte.b	>(.__Pd01-1)
   8772  4015		       70		      .byte.b	>(.__Pd02-1)
   8773  4016		       70		      .byte.b	>(.__Pd03-1)
   8774  4017				   .L0439jumptablelo
   8775  4017		       27		      .byte.b	<(.__Pd00-1)
   8776  4018		       36		      .byte.b	<(.__Pd01-1)
   8777  4019		       45		      .byte.b	<(.__Pd02-1)
   8778  401a		       54		      .byte.b	<(.__Pd03-1)
   8779  401b				   .
   8780  401b							; 
   8781  401b
   8782  401b				   .__Pd_Frame_Done
   8783  401b							; __Pd_Frame_Done
   8784  401b
   8785  401b				   .L0440		;  return
   8786  401b
   8787  401b		       ba		      tsx
   8788  401c		       b5 02		      lda	2,x	; check return address
   8789  401e		       49 70		      eor	#(>*)	; vs. current PCH
   8790  4020		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8791  4022		       f0 03		      beq	*+5	; if equal, do normal return
   8792  4024		       4c dd ff 	      JMP	BS_return
   8793  4027		       60		      RTS
   8794  4028				   .
   8795  4028							; 
   8796  4028
   8797  4028				   .__Pd00
   8798  4028							; __Pd00
   8799  4028
   8800  4028				   .
   8801  4028							; 
   8802  4028
   8803  4028				   .L0441		;  player1:
   8804  4028
   8805  4028		       a2 18		      LDX	#<playerL0441_1
   8806  402a		       86 8c		      STX	player1pointerlo
   8807  402c		       a9 f8		      LDA	#>playerL0441_1
   8808  402e		       85 8d		      STA	player1pointerhi
   8809  4030		       a9 16		      LDA	#22
   8810  4032		       85 8f		      STA	player1height
   8811  4034				   .
   8812  4034							; 
   8813  4034
   8814  4034				   .L0442		;  goto __Pd_Frame_Done
   8815  4034
   8816  4034		       4c 1b 70 	      jmp	.__Pd_Frame_Done
   8817  4037
   8818  4037				   .
   8819  4037							; 
   8820  4037
   8821  4037				   .__Pd01
   8822  4037							; __Pd01
   8823  4037
   8824  4037				   .L0443		;  player1:
   8825  4037
   8826  4037		       a2 2f		      LDX	#<playerL0443_1
   8827  4039		       86 8c		      STX	player1pointerlo
   8828  403b		       a9 f8		      LDA	#>playerL0443_1
   8829  403d		       85 8d		      STA	player1pointerhi
   8830  403f		       a9 16		      LDA	#22
   8831  4041		       85 8f		      STA	player1height
   8832  4043				   .L0444		;  goto __Pd_Frame_Done
   8833  4043
   8834  4043		       4c 1b 70 	      jmp	.__Pd_Frame_Done
   8835  4046
   8836  4046				   .
   8837  4046							; 
   8838  4046
   8839  4046				   .__Pd02
   8840  4046							; __Pd02
   8841  4046
   8842  4046				   .
   8843  4046							; 
   8844  4046
   8845  4046				   .L0445		;  player1:
   8846  4046
   8847  4046		       a2 46		      LDX	#<playerL0445_1
   8848  4048		       86 8c		      STX	player1pointerlo
   8849  404a		       a9 f8		      LDA	#>playerL0445_1
   8850  404c		       85 8d		      STA	player1pointerhi
   8851  404e		       a9 17		      LDA	#23
   8852  4050		       85 8f		      STA	player1height
   8853  4052				   .L0446		;  goto __Pd_Frame_Done
   8854  4052
   8855  4052		       4c 1b 70 	      jmp	.__Pd_Frame_Done
   8856  4055
   8857  4055				   .
   8858  4055							; 
   8859  4055
   8860  4055				   .__Pd03
   8861  4055							; __Pd03
   8862  4055
   8863  4055				   .
   8864  4055							; 
   8865  4055
   8866  4055				   .L0447		;  player1:
   8867  4055
   8868  4055		       a2 5e		      LDX	#<playerL0447_1
   8869  4057		       86 8c		      STX	player1pointerlo
   8870  4059		       a9 f8		      LDA	#>playerL0447_1
   8871  405b		       85 8d		      STA	player1pointerhi
   8872  405d		       a9 17		      LDA	#23
   8873  405f		       85 8f		      STA	player1height
   8874  4061				   .L0448		;  goto __Pd_Frame_Done
   8875  4061
   8876  4061		       4c 1b 70 	      jmp	.__Pd_Frame_Done
   8877  4064
   8878  4064				   .
   8879  4064							; 
   8880  4064
   8881  4064				   .__Lvl_4
   8882  4064							; __Lvl_4
   8883  4064
   8884  4064				   .L0449		;  PuppetY  =	60  :  PuppetX	=  136	:  player0x  =	200  :	player0y  =  200
   8885  4064
   8886  4064		       a9 3c		      LDA	#60
   8887  4066		       85 86		      STA	PuppetY
   8888  4068		       a9 88		      LDA	#136
   8889  406a		       85 81		      STA	PuppetX
   8890  406c		       a9 c8		      LDA	#200
   8891  406e		       85 80		      STA	player0x
   8892  4070		       85 85		      STA	player0y
   8893  4072				   .L0450		;  pfclear
   8894  4072
   8895  4072		       a9 00		      LDA	#0
   8896  4074		       85 ee		      sta	temp7
   8897  4076		       a9 70		      lda	#>(ret_point24-1)
   8898  4078		       48		      pha
   8899  4079		       a9 8b		      lda	#<(ret_point24-1)
   8900  407b		       48		      pha
   8901  407c		       a9 f2		      lda	#>(pfclear-1)
   8902  407e		       48		      pha
   8903  407f		       a9 8f		      lda	#<(pfclear-1)
   8904  4081		       48		      pha
   8905  4082		       a5 ee		      lda	temp7
   8906  4084		       48		      pha
   8907  4085		       8a		      txa
   8908  4086		       48		      pha
   8909  4087		       a2 08		      ldx	#8
   8910  4089		       4c eb ff 	      jmp	BS_jsr
   8911  408c				   ret_point24
   8912  408c				   .L0451		;  playfieldpos  =  8
   8913  408c
   8914  408c		       a9 08		      LDA	#8
   8915  408e		       85 ef		      STA	playfieldpos
   8916  4090				   .L0452		;  COLUBK  =  $02
   8917  4090
   8918  4090		       a9 02		      LDA	#$02
   8919  4092		       85 09		      STA	COLUBK
   8920  4094				   .L0453		;  pfcolors:
   8921  4094
   8922  4094		       a9 00		      lda	# $00
   8923  4096		       85 08		      sta	COLUPF
   8924  4098				  -	      ifconst	pfres
   8925  4098				  -	      lda	#>(pfcolorlabel589-132+pfres*pfwidth)
   8926  4098					      else
   8927  4098		       a9 f8		      lda	#>(pfcolorlabel589-84)
   8928  409a					      endif
   8929  409a		       85 f1		      sta	pfcolortable+1
   8930  409c				  -	      ifconst	pfres
   8931  409c				  -	      lda	#<(pfcolorlabel589-132+pfres*pfwidth)
   8932  409c					      else
   8933  409c		       a9 22		      lda	#<(pfcolorlabel589-84)
   8934  409e					      endif
   8935  409e		       85 f0		      sta	pfcolortable
   8936  40a0				   .
   8937  40a0							; 
   8938  40a0
   8939  40a0				   .
   8940  40a0							; 
   8941  40a0
   8942  40a0				   .L0454		;  playfield:
   8943  40a0
   8944  40a0				  -	      ifconst	pfres
   8945  40a0				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   8946  40a0					      else
   8947  40a0		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   8948  40a2					      endif
   8949  40a2		       4c d5 70 	      jmp	pflabel4
   8950  40a5				   PF_data4
   8951  40a5		       f0 00		      .byte.b	%11110000, %00000000
   8952  40a7					      if	(pfwidth>2)
   8953  40a7		       01 00		      .byte.b	%00000001, %00000000
   8954  40a9					      endif
   8955  40a9		       f0 00		      .byte.b	%11110000, %00000000
   8956  40ab					      if	(pfwidth>2)
   8957  40ab		       01 00		      .byte.b	%00000001, %00000000
   8958  40ad					      endif
   8959  40ad		       f0 00		      .byte.b	%11110000, %00000000
   8960  40af					      if	(pfwidth>2)
   8961  40af		       01 00		      .byte.b	%00000001, %00000000
   8962  40b1					      endif
   8963  40b1		       f0 00		      .byte.b	%11110000, %00000000
   8964  40b3					      if	(pfwidth>2)
   8965  40b3		       01 ff		      .byte.b	%00000001, %11111111
   8966  40b5					      endif
   8967  40b5		       f0 00		      .byte.b	%11110000, %00000000
   8968  40b7					      if	(pfwidth>2)
   8969  40b7		       00 00		      .byte.b	%00000000, %00000000
   8970  40b9					      endif
   8971  40b9		       f0 00		      .byte.b	%11110000, %00000000
   8972  40bb					      if	(pfwidth>2)
   8973  40bb		       00 00		      .byte.b	%00000000, %00000000
   8974  40bd					      endif
   8975  40bd		       f0 00		      .byte.b	%11110000, %00000000
   8976  40bf					      if	(pfwidth>2)
   8977  40bf		       00 00		      .byte.b	%00000000, %00000000
   8978  40c1					      endif
   8979  40c1		       f0 00		      .byte.b	%11110000, %00000000
   8980  40c3					      if	(pfwidth>2)
   8981  40c3		       00 00		      .byte.b	%00000000, %00000000
   8982  40c5					      endif
   8983  40c5		       f0 00		      .byte.b	%11110000, %00000000
   8984  40c7					      if	(pfwidth>2)
   8985  40c7		       01 ff		      .byte.b	%00000001, %11111111
   8986  40c9					      endif
   8987  40c9		       f0 00		      .byte.b	%11110000, %00000000
   8988  40cb					      if	(pfwidth>2)
   8989  40cb		       01 00		      .byte.b	%00000001, %00000000
   8990  40cd					      endif
   8991  40cd		       f0 00		      .byte.b	%11110000, %00000000
   8992  40cf					      if	(pfwidth>2)
   8993  40cf		       01 00		      .byte.b	%00000001, %00000000
   8994  40d1					      endif
   8995  40d1		       f0 00		      .byte.b	%11110000, %00000000
   8996  40d3					      if	(pfwidth>2)
   8997  40d3		       01 00		      .byte.b	%00000001, %00000000
   8998  40d5					      endif
   8999  40d5				   pflabel4
   9000  40d5		       bd a5 70 	      lda	PF_data4,x
   9001  40d8		       95 a4		      sta	playfield,x
   9002  40da		       ca		      dex
   9003  40db		       10 f8		      bpl	pflabel4
   9004  40dd				   .L0455		;  drawscreen
   9005  40dd
   9006  40dd		       85 ee		      sta	temp7
   9007  40df		       a9 70		      lda	#>(ret_point25-1)
   9008  40e1		       48		      pha
   9009  40e2		       a9 f4		      lda	#<(ret_point25-1)
   9010  40e4		       48		      pha
   9011  40e5		       a9 f4		      lda	#>(drawscreen-1)
   9012  40e7		       48		      pha
   9013  40e8		       a9 3b		      lda	#<(drawscreen-1)
   9014  40ea		       48		      pha
   9015  40eb		       a5 ee		      lda	temp7
   9016  40ed		       48		      pha
   9017  40ee		       8a		      txa
   9018  40ef		       48		      pha
   9019  40f0		       a2 08		      ldx	#8
   9020  40f2		       4c eb ff 	      jmp	BS_jsr
   9021  40f5				   ret_point25
   9022  40f5				   .L0456		;  return
   9023  40f5
   9024  40f5		       ba		      tsx
   9025  40f6		       b5 02		      lda	2,x	; check return address
   9026  40f8		       49 70		      eor	#(>*)	; vs. current PCH
   9027  40fa		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9028  40fc		       f0 03		      beq	*+5	; if equal, do normal return
   9029  40fe		       4c dd ff 	      JMP	BS_return
   9030  4101		       60		      RTS
   9031  4102				   .
   9032  4102							; 
   9033  4102
   9034  4102				   .
   9035  4102							; 
   9036  4102
   9037  4102				   .L0457		;  bank 5
   9038  4102
   9039  4102					      if	ECHO4
      3794 bytes of ROM space left in bank 4
   9040  4102					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   9041  4102					      endif
   9042  4102		       00 01	   ECHO4      =	1
   9043  4fd4					      ORG	$4FF4-bscode_length
   9044  4fd4					      RORG	$7FF4-bscode_length
   9045  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   9046  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9047  4fd6				  -	      stx	FASTFETCH
   9048  4fd6					      endif
   9049  4fd6		       9a		      txs
   9050  4fd7				  -	      if	bankswitch == 64
   9051  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9052  4fd7					      else
   9053  4fd7		       a9 f2		      lda	#>(start-1)
   9054  4fd9					      endif
   9055  4fd9		       48		      pha
   9056  4fda		       a9 51		      lda	#<(start-1)
   9057  4fdc		       48		      pha
   9058  4fdd		       48		      pha
   9059  4fde		       8a		      txa
   9060  4fdf		       48		      pha
   9061  4fe0		       ba		      tsx
   9062  4fe1					      if	bankswitch != 64
   9063  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   9064  4fe3		       2a		      rol
   9065  4fe4		       2a		      rol
   9066  4fe5		       2a		      rol
   9067  4fe6		       2a		      rol
   9068  4fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9069  4fe9		       aa		      tax
   9070  4fea		       e8		      inx
   9071  4feb				  -	      else
   9072  4feb				  -	      lda	4,x	; get high byte of return address
   9073  4feb				  -	      tay
   9074  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9075  4feb				  -	      sta	4,x
   9076  4feb				  -	      tya
   9077  4feb				  -	      lsr
   9078  4feb				  -	      lsr
   9079  4feb				  -	      lsr
   9080  4feb				  -	      lsr
   9081  4feb				  -	      tax
   9082  4feb				  -	      inx
   9083  4feb					      endif
   9084  4feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   9085  4fee		       68		      pla
   9086  4fef		       aa		      tax
   9087  4ff0		       68		      pla
   9088  4ff1		       60		      rts
   9089  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9090  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9091  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9092  4ff2					      endif
   9093  4ffc					      ORG	$4FFC
   9094  4ffc					      RORG	$7FFC
   9095  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   9096  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   9097  5000					      ORG	$5000
   9098  5000					      RORG	$9000
   9099  5000				   ._P_R
   9100  5000							; _P_R
   9101  5000
   9102  5000				   .
   9103  5000							; 
   9104  5000
   9105  5000				   .
   9106  5000							; 
   9107  5000
   9108  5000				   .
   9109  5000							; 
   9110  5000
   9111  5000				   .L0458		;  player1color:
   9112  5000
   9113  5000		       a2 a6		      LDX	#<playercolorL0458_1
   9114  5002		       86 87		      STX	player1color
   9115  5004		       a9 f8		      LDA	#>playercolorL0458_1
   9116  5006		       85 88		      STA	player1color+1
   9117  5008				   .L0459		;  on _Frame_Counter goto __Pr00 __Pr01 __Pr02 __Pr03
   9118  5008
   9119  5008		       a6 d5		      LDX	_Frame_Counter
   9120  500a		       bd 13 90 	      LDA	.L0459jumptablehi,x
   9121  500d		       48		      PHA
   9122  500e		       bd 17 90 	      LDA	.L0459jumptablelo,x
   9123  5011		       48		      PHA
   9124  5012		       60		      RTS
   9125  5013				   .L0459jumptablehi
   9126  5013		       90		      .byte.b	>(.__Pr00-1)
   9127  5014		       90		      .byte.b	>(.__Pr01-1)
   9128  5015		       90		      .byte.b	>(.__Pr02-1)
   9129  5016		       90		      .byte.b	>(.__Pr03-1)
   9130  5017				   .L0459jumptablelo
   9131  5017		       27		      .byte.b	<(.__Pr00-1)
   9132  5018		       36		      .byte.b	<(.__Pr01-1)
   9133  5019		       45		      .byte.b	<(.__Pr02-1)
   9134  501a		       54		      .byte.b	<(.__Pr03-1)
   9135  501b				   .
   9136  501b							; 
   9137  501b
   9138  501b				   .__Pr_Frame_Done
   9139  501b							; __Pr_Frame_Done
   9140  501b
   9141  501b				   .L0460		;  return
   9142  501b
   9143  501b		       ba		      tsx
   9144  501c		       b5 02		      lda	2,x	; check return address
   9145  501e		       49 90		      eor	#(>*)	; vs. current PCH
   9146  5020		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9147  5022		       f0 03		      beq	*+5	; if equal, do normal return
   9148  5024		       4c dd ff 	      JMP	BS_return
   9149  5027		       60		      RTS
   9150  5028				   .
   9151  5028							; 
   9152  5028
   9153  5028				   .__Pr00
   9154  5028							; __Pr00
   9155  5028
   9156  5028				   .L0461		;  player1:
   9157  5028
   9158  5028		       a2 be		      LDX	#<playerL0461_1
   9159  502a		       86 8c		      STX	player1pointerlo
   9160  502c		       a9 f8		      LDA	#>playerL0461_1
   9161  502e		       85 8d		      STA	player1pointerhi
   9162  5030		       a9 16		      LDA	#22
   9163  5032		       85 8f		      STA	player1height
   9164  5034				   .L0462		;  goto __Pr_Frame_Done
   9165  5034
   9166  5034		       4c 1b 90 	      jmp	.__Pr_Frame_Done
   9167  5037
   9168  5037				   .
   9169  5037							; 
   9170  5037
   9171  5037				   .__Pr01
   9172  5037							; __Pr01
   9173  5037
   9174  5037				   .L0463		;  player1:
   9175  5037
   9176  5037		       a2 d5		      LDX	#<playerL0463_1
   9177  5039		       86 8c		      STX	player1pointerlo
   9178  503b		       a9 f8		      LDA	#>playerL0463_1
   9179  503d		       85 8d		      STA	player1pointerhi
   9180  503f		       a9 16		      LDA	#22
   9181  5041		       85 8f		      STA	player1height
   9182  5043				   .L0464		;  goto __Pr_Frame_Done
   9183  5043
   9184  5043		       4c 1b 90 	      jmp	.__Pr_Frame_Done
   9185  5046
   9186  5046				   .
   9187  5046							; 
   9188  5046
   9189  5046				   .__Pr02
   9190  5046							; __Pr02
   9191  5046
   9192  5046				   .L0465		;  player1:
   9193  5046
   9194  5046		       a2 00		      LDX	#<playerL0465_1
   9195  5048		       86 8c		      STX	player1pointerlo
   9196  504a		       a9 f9		      LDA	#>playerL0465_1
   9197  504c		       85 8d		      STA	player1pointerhi
   9198  504e		       a9 17		      LDA	#23
   9199  5050		       85 8f		      STA	player1height
   9200  5052				   .L0466		;  goto __Pr_Frame_Done
   9201  5052
   9202  5052		       4c 1b 90 	      jmp	.__Pr_Frame_Done
   9203  5055
   9204  5055				   .
   9205  5055							; 
   9206  5055
   9207  5055				   .__Pr03
   9208  5055							; __Pr03
   9209  5055
   9210  5055				   .L0467		;  player1:
   9211  5055
   9212  5055		       a2 18		      LDX	#<playerL0467_1
   9213  5057		       86 8c		      STX	player1pointerlo
   9214  5059		       a9 f9		      LDA	#>playerL0467_1
   9215  505b		       85 8d		      STA	player1pointerhi
   9216  505d		       a9 17		      LDA	#23
   9217  505f		       85 8f		      STA	player1height
   9218  5061				   .L0468		;  goto __Pr_Frame_Done
   9219  5061
   9220  5061		       4c 1b 90 	      jmp	.__Pr_Frame_Done
   9221  5064
   9222  5064				   .
   9223  5064							; 
   9224  5064
   9225  5064				   .L0469		;  return
   9226  5064
   9227  5064		       ba		      tsx
   9228  5065		       b5 02		      lda	2,x	; check return address
   9229  5067		       49 90		      eor	#(>*)	; vs. current PCH
   9230  5069		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9231  506b		       f0 03		      beq	*+5	; if equal, do normal return
   9232  506d		       4c dd ff 	      JMP	BS_return
   9233  5070		       60		      RTS
   9234  5071				   .__Lvl_5
   9235  5071							; __Lvl_5
   9236  5071
   9237  5071				   .L0470		;  PuppetY  =	87  :  PuppetX	=  80  :  player0x  =  200  :  player0y  =  200  :  _Bit1_Up_Screen  =	0
   9238  5071
   9239  5071		       a9 57		      LDA	#87
   9240  5073		       85 86		      STA	PuppetY
   9241  5075		       a9 50		      LDA	#80
   9242  5077		       85 81		      STA	PuppetX
   9243  5079		       a9 c8		      LDA	#200
   9244  507b		       85 80		      STA	player0x
   9245  507d		       85 85		      STA	player0y
   9246  507f		       a9 00		      LDA	#0
   9247  5081		       85 df		      STA	_Bit1_Up_Screen
   9248  5083				   .L0471		;  pfclear
   9249  5083
   9250  5083		       a9 00		      LDA	#0
   9251  5085		       85 ee		      sta	temp7
   9252  5087		       a9 90		      lda	#>(ret_point26-1)
   9253  5089		       48		      pha
   9254  508a		       a9 9c		      lda	#<(ret_point26-1)
   9255  508c		       48		      pha
   9256  508d		       a9 f2		      lda	#>(pfclear-1)
   9257  508f		       48		      pha
   9258  5090		       a9 8f		      lda	#<(pfclear-1)
   9259  5092		       48		      pha
   9260  5093		       a5 ee		      lda	temp7
   9261  5095		       48		      pha
   9262  5096		       8a		      txa
   9263  5097		       48		      pha
   9264  5098		       a2 08		      ldx	#8
   9265  509a		       4c eb ff 	      jmp	BS_jsr
   9266  509d				   ret_point26
   9267  509d				   .L0472		;  playfieldpos  =  8
   9268  509d
   9269  509d		       a9 08		      LDA	#8
   9270  509f		       85 ef		      STA	playfieldpos
   9271  50a1				   .L0473		;  COLUBK  =  $02
   9272  50a1
   9273  50a1		       a9 02		      LDA	#$02
   9274  50a3		       85 09		      STA	COLUBK
   9275  50a5				   .L0474		;  pfcolors:
   9276  50a5
   9277  50a5		       a9 00		      lda	# $00
   9278  50a7		       85 08		      sta	COLUPF
   9279  50a9				  -	      ifconst	pfres
   9280  50a9				  -	      lda	#>(pfcolorlabel589-131+pfres*pfwidth)
   9281  50a9					      else
   9282  50a9		       a9 f8		      lda	#>(pfcolorlabel589-83)
   9283  50ab					      endif
   9284  50ab		       85 f1		      sta	pfcolortable+1
   9285  50ad				  -	      ifconst	pfres
   9286  50ad				  -	      lda	#<(pfcolorlabel589-131+pfres*pfwidth)
   9287  50ad					      else
   9288  50ad		       a9 23		      lda	#<(pfcolorlabel589-83)
   9289  50af					      endif
   9290  50af		       85 f0		      sta	pfcolortable
   9291  50b1				   .
   9292  50b1							; 
   9293  50b1
   9294  50b1				   .
   9295  50b1							; 
   9296  50b1
   9297  50b1				   .L0475		;  playfield:
   9298  50b1
   9299  50b1				  -	      ifconst	pfres
   9300  50b1				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   9301  50b1					      else
   9302  50b1		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   9303  50b3					      endif
   9304  50b3		       4c e6 90 	      jmp	pflabel5
   9305  50b6				   PF_data5
   9306  50b6		       ff ff		      .byte.b	%11111111, %11111111
   9307  50b8					      if	(pfwidth>2)
   9308  50b8		       ff ff		      .byte.b	%11111111, %11111111
   9309  50ba					      endif
   9310  50ba		       ff ff		      .byte.b	%11111111, %11111111
   9311  50bc					      if	(pfwidth>2)
   9312  50bc		       ff ff		      .byte.b	%11111111, %11111111
   9313  50be					      endif
   9314  50be		       ff ff		      .byte.b	%11111111, %11111111
   9315  50c0					      if	(pfwidth>2)
   9316  50c0		       ff ff		      .byte.b	%11111111, %11111111
   9317  50c2					      endif
   9318  50c2		       00 00		      .byte.b	%00000000, %00000000
   9319  50c4					      if	(pfwidth>2)
   9320  50c4		       00 00		      .byte.b	%00000000, %00000000
   9321  50c6					      endif
   9322  50c6		       00 00		      .byte.b	%00000000, %00000000
   9323  50c8					      if	(pfwidth>2)
   9324  50c8		       00 00		      .byte.b	%00000000, %00000000
   9325  50ca					      endif
   9326  50ca		       00 00		      .byte.b	%00000000, %00000000
   9327  50cc					      if	(pfwidth>2)
   9328  50cc		       00 00		      .byte.b	%00000000, %00000000
   9329  50ce					      endif
   9330  50ce		       00 00		      .byte.b	%00000000, %00000000
   9331  50d0					      if	(pfwidth>2)
   9332  50d0		       00 00		      .byte.b	%00000000, %00000000
   9333  50d2					      endif
   9334  50d2		       00 00		      .byte.b	%00000000, %00000000
   9335  50d4					      if	(pfwidth>2)
   9336  50d4		       00 00		      .byte.b	%00000000, %00000000
   9337  50d6					      endif
   9338  50d6		       ff 1f		      .byte.b	%11111111, %00011111
   9339  50d8					      if	(pfwidth>2)
   9340  50d8		       0f ff		      .byte.b	%00001111, %11111111
   9341  50da					      endif
   9342  50da		       00 10		      .byte.b	%00000000, %00010000
   9343  50dc					      if	(pfwidth>2)
   9344  50dc		       08 00		      .byte.b	%00001000, %00000000
   9345  50de					      endif
   9346  50de		       00 10		      .byte.b	%00000000, %00010000
   9347  50e0					      if	(pfwidth>2)
   9348  50e0		       08 00		      .byte.b	%00001000, %00000000
   9349  50e2					      endif
   9350  50e2		       00 10		      .byte.b	%00000000, %00010000
   9351  50e4					      if	(pfwidth>2)
   9352  50e4		       08 00		      .byte.b	%00001000, %00000000
   9353  50e6					      endif
   9354  50e6				   pflabel5
   9355  50e6		       bd b6 90 	      lda	PF_data5,x
   9356  50e9		       95 a4		      sta	playfield,x
   9357  50eb		       ca		      dex
   9358  50ec		       10 f8		      bpl	pflabel5
   9359  50ee				   .L0476		;  drawscreen
   9360  50ee
   9361  50ee		       85 ee		      sta	temp7
   9362  50f0		       a9 91		      lda	#>(ret_point27-1)
   9363  50f2		       48		      pha
   9364  50f3		       a9 05		      lda	#<(ret_point27-1)
   9365  50f5		       48		      pha
   9366  50f6		       a9 f4		      lda	#>(drawscreen-1)
   9367  50f8		       48		      pha
   9368  50f9		       a9 3b		      lda	#<(drawscreen-1)
   9369  50fb		       48		      pha
   9370  50fc		       a5 ee		      lda	temp7
   9371  50fe		       48		      pha
   9372  50ff		       8a		      txa
   9373  5100		       48		      pha
   9374  5101		       a2 08		      ldx	#8
   9375  5103		       4c eb ff 	      jmp	BS_jsr
   9376  5106				   ret_point27
   9377  5106				   .L0477		;  if _Bit1_Up_Screen	=  0  &&  PuppetY  =  87  :  PuppetX  =  82 then _Bit0_Main_Screen  =  1
   9378  5106
   9379  5106		       a5 df		      LDA	_Bit1_Up_Screen
   9380  5108		       c9 00		      CMP	#0
   9381  510a		       d0 0f		      BNE	.skipL0477
   9382  510c				   .condpart121
   9383  510c							; complex condition detected
   9384  510c		       a9 57		      LDA	#87
   9385  510e		       48		      PHA
   9386  510f		       ba		      TSX
   9387  5110		       68		      PLA
   9388  5111		       a5 86		      LDA	PuppetY
   9389  5113		       d5 01		      CMP	1,x
   9390  5115		       d0 04		      BNE	.skip121then
   9391  5117				   .condpart122
   9392  5117		       a9 01		      LDA	#1
   9393  5119		       85 df		      STA	_Bit0_Main_Screen
   9394  511b				   .skip121then
   9395  511b				   .skipL0477
   9396  511b				   .L0478		;  return
   9397  511b
   9398  511b		       ba		      tsx
   9399  511c		       b5 02		      lda	2,x	; check return address
   9400  511e		       49 91		      eor	#(>*)	; vs. current PCH
   9401  5120		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9402  5122		       f0 03		      beq	*+5	; if equal, do normal return
   9403  5124		       4c dd ff 	      JMP	BS_return
   9404  5127		       60		      RTS
   9405  5128				   .
   9406  5128							; 
   9407  5128
   9408  5128				   .
   9409  5128							; 
   9410  5128
   9411  5128				   .L0479		;  bank 6
   9412  5128
   9413  5128					      if	ECHO5
      3756 bytes of ROM space left in bank 5
   9414  5128					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   9415  5128					      endif
   9416  5128		       00 01	   ECHO5      =	1
   9417  5fd4					      ORG	$5FF4-bscode_length
   9418  5fd4					      RORG	$9FF4-bscode_length
   9419  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   9420  5fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9421  5fd6				  -	      stx	FASTFETCH
   9422  5fd6					      endif
   9423  5fd6		       9a		      txs
   9424  5fd7				  -	      if	bankswitch == 64
   9425  5fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9426  5fd7					      else
   9427  5fd7		       a9 f2		      lda	#>(start-1)
   9428  5fd9					      endif
   9429  5fd9		       48		      pha
   9430  5fda		       a9 51		      lda	#<(start-1)
   9431  5fdc		       48		      pha
   9432  5fdd		       48		      pha
   9433  5fde		       8a		      txa
   9434  5fdf		       48		      pha
   9435  5fe0		       ba		      tsx
   9436  5fe1					      if	bankswitch != 64
   9437  5fe1		       b5 04		      lda	4,x	; get high byte of return address
   9438  5fe3		       2a		      rol
   9439  5fe4		       2a		      rol
   9440  5fe5		       2a		      rol
   9441  5fe6		       2a		      rol
   9442  5fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9443  5fe9		       aa		      tax
   9444  5fea		       e8		      inx
   9445  5feb				  -	      else
   9446  5feb				  -	      lda	4,x	; get high byte of return address
   9447  5feb				  -	      tay
   9448  5feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9449  5feb				  -	      sta	4,x
   9450  5feb				  -	      tya
   9451  5feb				  -	      lsr
   9452  5feb				  -	      lsr
   9453  5feb				  -	      lsr
   9454  5feb				  -	      lsr
   9455  5feb				  -	      tax
   9456  5feb				  -	      inx
   9457  5feb					      endif
   9458  5feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   9459  5fee		       68		      pla
   9460  5fef		       aa		      tax
   9461  5ff0		       68		      pla
   9462  5ff1		       60		      rts
   9463  5ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9464  5ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9465  5ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9466  5ff2					      endif
   9467  5ffc					      ORG	$5FFC
   9468  5ffc					      RORG	$9FFC
   9469  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   9470  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   9471  6000					      ORG	$6000
   9472  6000					      RORG	$B000
   9473  6000				   ._P_L
   9474  6000							; _P_L
   9475  6000
   9476  6000				   .
   9477  6000							; 
   9478  6000
   9479  6000				   .
   9480  6000							; 
   9481  6000
   9482  6000				   .
   9483  6000							; 
   9484  6000
   9485  6000				   .
   9486  6000							; 
   9487  6000
   9488  6000				   .
   9489  6000							; 
   9490  6000
   9491  6000				   .L0480		;  player1color:
   9492  6000
   9493  6000		       a2 30		      LDX	#<playercolorL0480_1
   9494  6002		       86 87		      STX	player1color
   9495  6004		       a9 f9		      LDA	#>playercolorL0480_1
   9496  6006		       85 88		      STA	player1color+1
   9497  6008				   .
   9498  6008							; 
   9499  6008
   9500  6008				   .L0481		;  on _Frame_Counter goto __Pl00 __Pl01 __Pl02 __Pl03
   9501  6008
   9502  6008		       a6 d5		      LDX	_Frame_Counter
   9503  600a		       bd 13 b0 	      LDA	.L0481jumptablehi,x
   9504  600d		       48		      PHA
   9505  600e		       bd 17 b0 	      LDA	.L0481jumptablelo,x
   9506  6011		       48		      PHA
   9507  6012		       60		      RTS
   9508  6013				   .L0481jumptablehi
   9509  6013		       b0		      .byte.b	>(.__Pl00-1)
   9510  6014		       b0		      .byte.b	>(.__Pl01-1)
   9511  6015		       b0		      .byte.b	>(.__Pl02-1)
   9512  6016		       b0		      .byte.b	>(.__Pl03-1)
   9513  6017				   .L0481jumptablelo
   9514  6017		       27		      .byte.b	<(.__Pl00-1)
   9515  6018		       36		      .byte.b	<(.__Pl01-1)
   9516  6019		       45		      .byte.b	<(.__Pl02-1)
   9517  601a		       54		      .byte.b	<(.__Pl03-1)
   9518  601b				   .
   9519  601b							; 
   9520  601b
   9521  601b				   .__Pl_Frame_Done
   9522  601b							; __Pl_Frame_Done
   9523  601b
   9524  601b				   .L0482		;  return
   9525  601b
   9526  601b		       ba		      tsx
   9527  601c		       b5 02		      lda	2,x	; check return address
   9528  601e		       49 b0		      eor	#(>*)	; vs. current PCH
   9529  6020		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9530  6022		       f0 03		      beq	*+5	; if equal, do normal return
   9531  6024		       4c dd ff 	      JMP	BS_return
   9532  6027		       60		      RTS
   9533  6028				   .
   9534  6028							; 
   9535  6028
   9536  6028				   .__Pl00
   9537  6028							; __Pl00
   9538  6028
   9539  6028				   .L0483		;  player1:
   9540  6028
   9541  6028		       a2 48		      LDX	#<playerL0483_1
   9542  602a		       86 8c		      STX	player1pointerlo
   9543  602c		       a9 f9		      LDA	#>playerL0483_1
   9544  602e		       85 8d		      STA	player1pointerhi
   9545  6030		       a9 16		      LDA	#22
   9546  6032		       85 8f		      STA	player1height
   9547  6034				   .L0484		;  goto __Pl_Frame_Done
   9548  6034
   9549  6034		       4c 1b b0 	      jmp	.__Pl_Frame_Done
   9550  6037
   9551  6037				   .
   9552  6037							; 
   9553  6037
   9554  6037				   .__Pl01
   9555  6037							; __Pl01
   9556  6037
   9557  6037				   .L0485		;  player1:
   9558  6037
   9559  6037		       a2 5f		      LDX	#<playerL0485_1
   9560  6039		       86 8c		      STX	player1pointerlo
   9561  603b		       a9 f9		      LDA	#>playerL0485_1
   9562  603d		       85 8d		      STA	player1pointerhi
   9563  603f		       a9 16		      LDA	#22
   9564  6041		       85 8f		      STA	player1height
   9565  6043				   .L0486		;  goto __Pl_Frame_Done
   9566  6043
   9567  6043		       4c 1b b0 	      jmp	.__Pl_Frame_Done
   9568  6046
   9569  6046				   .
   9570  6046							; 
   9571  6046
   9572  6046				   .__Pl02
   9573  6046							; __Pl02
   9574  6046
   9575  6046				   .L0487		;  player1:
   9576  6046
   9577  6046		       a2 76		      LDX	#<playerL0487_1
   9578  6048		       86 8c		      STX	player1pointerlo
   9579  604a		       a9 f9		      LDA	#>playerL0487_1
   9580  604c		       85 8d		      STA	player1pointerhi
   9581  604e		       a9 17		      LDA	#23
   9582  6050		       85 8f		      STA	player1height
   9583  6052				   .L0488		;  goto __Pl_Frame_Done
   9584  6052
   9585  6052		       4c 1b b0 	      jmp	.__Pl_Frame_Done
   9586  6055
   9587  6055				   .
   9588  6055							; 
   9589  6055
   9590  6055				   .__Pl03
   9591  6055							; __Pl03
   9592  6055
   9593  6055				   .L0489		;  player1:
   9594  6055
   9595  6055		       a2 8e		      LDX	#<playerL0489_1
   9596  6057		       86 8c		      STX	player1pointerlo
   9597  6059		       a9 f9		      LDA	#>playerL0489_1
   9598  605b		       85 8d		      STA	player1pointerhi
   9599  605d		       a9 17		      LDA	#23
   9600  605f		       85 8f		      STA	player1height
   9601  6061				   .L0490		;  goto __Pl_Frame_Done
   9602  6061
   9603  6061		       4c 1b b0 	      jmp	.__Pl_Frame_Done
   9604  6064
   9605  6064				   .
   9606  6064							; 
   9607  6064
   9608  6064				   .L0491		;  return
   9609  6064
   9610  6064		       ba		      tsx
   9611  6065		       b5 02		      lda	2,x	; check return address
   9612  6067		       49 b0		      eor	#(>*)	; vs. current PCH
   9613  6069		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9614  606b		       f0 03		      beq	*+5	; if equal, do normal return
   9615  606d		       4c dd ff 	      JMP	BS_return
   9616  6070		       60		      RTS
   9617  6071				   .
   9618  6071							; 
   9619  6071
   9620  6071				   .L0492		;  bank 7
   9621  6071
   9622  6071					      if	ECHO6
      3939 bytes of ROM space left in bank 6
   9623  6071					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   9624  6071					      endif
   9625  6071		       00 01	   ECHO6      =	1
   9626  6fd4					      ORG	$6FF4-bscode_length
   9627  6fd4					      RORG	$BFF4-bscode_length
   9628  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   9629  6fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9630  6fd6				  -	      stx	FASTFETCH
   9631  6fd6					      endif
   9632  6fd6		       9a		      txs
   9633  6fd7				  -	      if	bankswitch == 64
   9634  6fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9635  6fd7					      else
   9636  6fd7		       a9 f2		      lda	#>(start-1)
   9637  6fd9					      endif
   9638  6fd9		       48		      pha
   9639  6fda		       a9 51		      lda	#<(start-1)
   9640  6fdc		       48		      pha
   9641  6fdd		       48		      pha
   9642  6fde		       8a		      txa
   9643  6fdf		       48		      pha
   9644  6fe0		       ba		      tsx
   9645  6fe1					      if	bankswitch != 64
   9646  6fe1		       b5 04		      lda	4,x	; get high byte of return address
   9647  6fe3		       2a		      rol
   9648  6fe4		       2a		      rol
   9649  6fe5		       2a		      rol
   9650  6fe6		       2a		      rol
   9651  6fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9652  6fe9		       aa		      tax
   9653  6fea		       e8		      inx
   9654  6feb				  -	      else
   9655  6feb				  -	      lda	4,x	; get high byte of return address
   9656  6feb				  -	      tay
   9657  6feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9658  6feb				  -	      sta	4,x
   9659  6feb				  -	      tya
   9660  6feb				  -	      lsr
   9661  6feb				  -	      lsr
   9662  6feb				  -	      lsr
   9663  6feb				  -	      lsr
   9664  6feb				  -	      tax
   9665  6feb				  -	      inx
   9666  6feb					      endif
   9667  6feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   9668  6fee		       68		      pla
   9669  6fef		       aa		      tax
   9670  6ff0		       68		      pla
   9671  6ff1		       60		      rts
   9672  6ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9673  6ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9674  6ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9675  6ff2					      endif
   9676  6ffc					      ORG	$6FFC
   9677  6ffc					      RORG	$BFFC
   9678  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   9679  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   9680  7000					      ORG	$7000
   9681  7000					      RORG	$D000
   9682  7000				   .__Semi_Main_Screen
   9683  7000							; __Semi_Main_Screen
   9684  7000
   9685  7000				   .
   9686  7000							; 
   9687  7000
   9688  7000				   .L0493		;  PuppetY  =	80  :  PuppetX	=  77  :  player0y  =  200  :  player0x  =  200
   9689  7000
   9690  7000		       a9 50		      LDA	#80
   9691  7002		       85 86		      STA	PuppetY
   9692  7004		       a9 4d		      LDA	#77
   9693  7006		       85 81		      STA	PuppetX
   9694  7008		       a9 c8		      LDA	#200
   9695  700a		       85 85		      STA	player0y
   9696  700c		       85 80		      STA	player0x
   9697  700e				   .L0494		;  pfcolors:
   9698  700e
   9699  700e		       a9 00		      lda	# $00
   9700  7010		       85 08		      sta	COLUPF
   9701  7012				  -	      ifconst	pfres
   9702  7012				  -	      lda	#>(pfcolorlabel589-130+pfres*pfwidth)
   9703  7012					      else
   9704  7012		       a9 f8		      lda	#>(pfcolorlabel589-82)
   9705  7014					      endif
   9706  7014		       85 f1		      sta	pfcolortable+1
   9707  7016				  -	      ifconst	pfres
   9708  7016				  -	      lda	#<(pfcolorlabel589-130+pfres*pfwidth)
   9709  7016					      else
   9710  7016		       a9 24		      lda	#<(pfcolorlabel589-82)
   9711  7018					      endif
   9712  7018		       85 f0		      sta	pfcolortable
   9713  701a				   .
   9714  701a							; 
   9715  701a
   9716  701a				   .
   9717  701a							; 
   9718  701a
   9719  701a				   .L0495		;  playfield:
   9720  701a
   9721  701a				  -	      ifconst	pfres
   9722  701a				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   9723  701a					      else
   9724  701a		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   9725  701c					      endif
   9726  701c		       4c 4f d0 	      jmp	pflabel6
   9727  701f				   PF_data6
   9728  701f		       fc 00		      .byte.b	%11111100, %00000000
   9729  7021					      if	(pfwidth>2)
   9730  7021		       00 fc		      .byte.b	%00000000, %11111100
   9731  7023					      endif
   9732  7023		       fc 00		      .byte.b	%11111100, %00000000
   9733  7025					      if	(pfwidth>2)
   9734  7025		       00 fc		      .byte.b	%00000000, %11111100
   9735  7027					      endif
   9736  7027		       e0 00		      .byte.b	%11100000, %00000000
   9737  7029					      if	(pfwidth>2)
   9738  7029		       00 e0		      .byte.b	%00000000, %11100000
   9739  702b					      endif
   9740  702b		       00 00		      .byte.b	%00000000, %00000000
   9741  702d					      if	(pfwidth>2)
   9742  702d		       00 00		      .byte.b	%00000000, %00000000
   9743  702f					      endif
   9744  702f		       00 00		      .byte.b	%00000000, %00000000
   9745  7031					      if	(pfwidth>2)
   9746  7031		       00 00		      .byte.b	%00000000, %00000000
   9747  7033					      endif
   9748  7033		       00 00		      .byte.b	%00000000, %00000000
   9749  7035					      if	(pfwidth>2)
   9750  7035		       00 00		      .byte.b	%00000000, %00000000
   9751  7037					      endif
   9752  7037		       00 00		      .byte.b	%00000000, %00000000
   9753  7039					      if	(pfwidth>2)
   9754  7039		       00 00		      .byte.b	%00000000, %00000000
   9755  703b					      endif
   9756  703b		       00 00		      .byte.b	%00000000, %00000000
   9757  703d					      if	(pfwidth>2)
   9758  703d		       00 00		      .byte.b	%00000000, %00000000
   9759  703f					      endif
   9760  703f		       00 00		      .byte.b	%00000000, %00000000
   9761  7041					      if	(pfwidth>2)
   9762  7041		       00 00		      .byte.b	%00000000, %00000000
   9763  7043					      endif
   9764  7043		       e0 00		      .byte.b	%11100000, %00000000
   9765  7045					      if	(pfwidth>2)
   9766  7045		       00 e0		      .byte.b	%00000000, %11100000
   9767  7047					      endif
   9768  7047		       fc 00		      .byte.b	%11111100, %00000000
   9769  7049					      if	(pfwidth>2)
   9770  7049		       00 fc		      .byte.b	%00000000, %11111100
   9771  704b					      endif
   9772  704b		       fc 00		      .byte.b	%11111100, %00000000
   9773  704d					      if	(pfwidth>2)
   9774  704d		       00 fc		      .byte.b	%00000000, %11111100
   9775  704f					      endif
   9776  704f				   pflabel6
   9777  704f		       bd 1f d0 	      lda	PF_data6,x
   9778  7052		       95 a4		      sta	playfield,x
   9779  7054		       ca		      dex
   9780  7055		       10 f8		      bpl	pflabel6
   9781  7057				   .L0496		;  drawscreen
   9782  7057
   9783  7057		       85 ee		      sta	temp7
   9784  7059		       a9 d0		      lda	#>(ret_point28-1)
   9785  705b		       48		      pha
   9786  705c		       a9 6e		      lda	#<(ret_point28-1)
   9787  705e		       48		      pha
   9788  705f		       a9 f4		      lda	#>(drawscreen-1)
   9789  7061		       48		      pha
   9790  7062		       a9 3b		      lda	#<(drawscreen-1)
   9791  7064		       48		      pha
   9792  7065		       a5 ee		      lda	temp7
   9793  7067		       48		      pha
   9794  7068		       8a		      txa
   9795  7069		       48		      pha
   9796  706a		       a2 08		      ldx	#8
   9797  706c		       4c eb ff 	      jmp	BS_jsr
   9798  706f				   ret_point28
   9799  706f				   .L0497		;  if PuppetY	=  25 then _Bit0_Coord_Y_Up  =	2  :  _Bit1_Up_Screen  =  1
   9800  706f
   9801  706f		       a5 86		      LDA	PuppetY
   9802  7071		       c9 19		      CMP	#25
   9803  7073		       d0 08		      BNE	.skipL0497
   9804  7075				   .condpart123
   9805  7075		       a9 02		      LDA	#2
   9806  7077		       85 e3		      STA	_Bit0_Coord_Y_Up
   9807  7079		       a9 01		      LDA	#1
   9808  707b		       85 df		      STA	_Bit1_Up_Screen
   9809  707d				   .skipL0497
   9810  707d				   .L0498		;  return
   9811  707d
   9812  707d		       ba		      tsx
   9813  707e		       b5 02		      lda	2,x	; check return address
   9814  7080		       49 d0		      eor	#(>*)	; vs. current PCH
   9815  7082		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   9816  7084		       f0 03		      beq	*+5	; if equal, do normal return
   9817  7086		       4c dd ff 	      JMP	BS_return
   9818  7089		       60		      RTS
   9819  708a				   .
   9820  708a							; 
   9821  708a
   9822  708a				   .
   9823  708a							; 
   9824  708a
   9825  708a					      if	ECHO7
      3914 bytes of ROM space left in bank 7
   9826  708a					      echo	"    ",[(start_bank7 - *)]d , "bytes of ROM space left in bank 7")
   9827  708a					      endif
   9828  708a		       00 01	   ECHO7      =	1
   9829  7fd4					      ORG	$7FF4-bscode_length
   9830  7fd4					      RORG	$DFF4-bscode_length
   9831  7fd4		       a2 ff	   start_bank7 ldx	#$ff
   9832  7fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9833  7fd6				  -	      stx	FASTFETCH
   9834  7fd6					      endif
   9835  7fd6		       9a		      txs
   9836  7fd7				  -	      if	bankswitch == 64
   9837  7fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9838  7fd7					      else
   9839  7fd7		       a9 f2		      lda	#>(start-1)
   9840  7fd9					      endif
   9841  7fd9		       48		      pha
   9842  7fda		       a9 51		      lda	#<(start-1)
   9843  7fdc		       48		      pha
   9844  7fdd		       48		      pha
   9845  7fde		       8a		      txa
   9846  7fdf		       48		      pha
   9847  7fe0		       ba		      tsx
   9848  7fe1					      if	bankswitch != 64
   9849  7fe1		       b5 04		      lda	4,x	; get high byte of return address
   9850  7fe3		       2a		      rol
   9851  7fe4		       2a		      rol
   9852  7fe5		       2a		      rol
   9853  7fe6		       2a		      rol
   9854  7fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9855  7fe9		       aa		      tax
   9856  7fea		       e8		      inx
   9857  7feb				  -	      else
   9858  7feb				  -	      lda	4,x	; get high byte of return address
   9859  7feb				  -	      tay
   9860  7feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9861  7feb				  -	      sta	4,x
   9862  7feb				  -	      tya
   9863  7feb				  -	      lsr
   9864  7feb				  -	      lsr
   9865  7feb				  -	      lsr
   9866  7feb				  -	      lsr
   9867  7feb				  -	      tax
   9868  7feb				  -	      inx
   9869  7feb					      endif
   9870  7feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   9871  7fee		       68		      pla
   9872  7fef		       aa		      tax
   9873  7ff0		       68		      pla
   9874  7ff1		       60		      rts
   9875  7ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9876  7ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9877  7ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9878  7ff2					      endif
   9879  7ffc					      ORG	$7FFC
   9880  7ffc					      RORG	$DFFC
   9881  7ffc		       d4 df		      .word.w	(start_bank7 & $ffff)
   9882  7ffe		       d4 df		      .word.w	(start_bank7 & $ffff)
   9883  8000					      ORG	$8000
   9884  8000					      RORG	$F000
   9885  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   9886  8000
   9887  8000							; This is a 2-line kernel!
   9888  8000					      ifnconst	vertical_reflect
   9889  8000				   kernel
   9890  8000					      endif
   9891  8000		       85 02		      sta	WSYNC
   9892  8002		       a9 ff		      lda	#255
   9893  8004		       8d 96 02 	      sta	TIM64T
   9894  8007
   9895  8007		       a9 01		      lda	#1
   9896  8009		       85 27		      sta	VDELBL
   9897  800b		       85 25		      sta	VDELP0
   9898  800d		       a6 92		      ldx	ballheight
   9899  800f		       e8		      inx
   9900  8010		       e8		      inx
   9901  8011		       86 9f		      stx	temp4
   9902  8013		       a5 86		      lda	player1y
   9903  8015		       85 9e		      sta	temp3
   9904  8017
   9905  8017				  -	      ifconst	shakescreen
   9906  8017				  -	      jsr	doshakescreen
   9907  8017					      else
   9908  8017		       a6 90		      ldx	missile0height
   9909  8019		       e8		      inx
   9910  801a					      endif
   9911  801a
   9912  801a		       e8		      inx
   9913  801b		       86 f6		      stx	stack1
   9914  801d
   9915  801d		       a5 89		      lda	bally
   9916  801f		       85 f7		      sta	stack2
   9917  8021
   9918  8021		       a5 85		      lda	player0y
   9919  8023		       a2 00		      ldx	#0
   9920  8025		       85 02		      sta	WSYNC
   9921  8027		       86 1b		      stx	GRP0
   9922  8029		       86 1c		      stx	GRP1
   9923  802b		       86 0e		      stx	PF1L
   9924  802d		       86 0f		      stx	PF2
   9925  802f		       86 2c		      stx	CXCLR
   9926  8031				  -	      ifconst	readpaddle
   9927  8031				  -	      stx	paddle
   9928  8031					      else
      0  8031					      sleep	3
      1  8031				   .CYCLES    SET	3
      2  8031
      3  8031				  -	      IF	.CYCLES < 2
      4  8031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8031				  -	      ERR
      6  8031					      ENDIF
      7  8031
      8  8031					      IF	.CYCLES & 1
      9  8031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8031		       04 00		      nop	0
     11  8033				  -	      ELSE
     12  8033				  -	      bit	VSYNC
     13  8033					      ENDIF
     14  8033				   .CYCLES    SET	.CYCLES - 3
     15  8033					      ENDIF
     16  8033
     17  8033				  -	      REPEAT	.CYCLES / 2
     18  8033				  -	      nop
     19  8033					      REPEND
   9930  8033					      endif
   9931  8033
   9932  8033		       95 9d		      sta	temp2,x
   9933  8035
   9934  8035							;store these so they can be retrieved later
   9935  8035					      ifnconst	pfres
   9936  8035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
   9937  8037				  -	      else
   9938  8037				  -	      ldx	#132-pfres*pfwidth
   9939  8037					      endif
   9940  8037
   9941  8037		       c6 85		      dec	player0y
   9942  8039
   9943  8039		       a5 91		      lda	missile0y
   9944  803b		       85 a0		      sta	temp5
   9945  803d		       a5 88		      lda	missile1y
   9946  803f		       85 a1		      sta	temp6
   9947  8041
   9948  8041		       a5 ef		      lda	playfieldpos
   9949  8043		       85 9c		      sta	temp1
   9950  8045
   9951  8045				  -	      ifconst	pfrowheight
   9952  8045				  -	      lda	#pfrowheight+2
   9953  8045					      else
   9954  8045					      ifnconst	pfres
   9955  8045		       a9 0a		      lda	#10
   9956  8047				  -	      else
   9957  8047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   9958  8047					      endif
   9959  8047					      endif
   9960  8047		       18		      clc
   9961  8048		       e5 ef		      sbc	playfieldpos
   9962  804a		       85 ef		      sta	playfieldpos
   9963  804c		       4c 74 f0 	      jmp	.startkernel
   9964  804f
   9965  804f				   .skipDrawP0
   9966  804f		       a9 00		      lda	#0
   9967  8051		       a8		      tay
   9968  8052		       4c a3 f0 	      jmp	.continueP0
   9969  8055
   9970  8055				   .skipDrawP1
   9971  8055		       a9 00		      lda	#0
   9972  8057		       a8		      tay
   9973  8058		       4c 7e f0 	      jmp	.continueP1
   9974  805b
   9975  805b				   .kerloop		; enter at cycle 59??
   9976  805b
   9977  805b				   continuekernel
      0  805b					      sleep	2
      1  805b				   .CYCLES    SET	2
      2  805b
      3  805b				  -	      IF	.CYCLES < 2
      4  805b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  805b				  -	      ERR
      6  805b					      ENDIF
      7  805b
      8  805b				  -	      IF	.CYCLES & 1
      9  805b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  805b				  -	      nop	0
     11  805b				  -	      ELSE
     12  805b				  -	      bit	VSYNC
     13  805b				  -	      ENDIF
     14  805b				  -.CYCLES    SET	.CYCLES - 3
     15  805b					      ENDIF
     16  805b
     17  805b					      REPEAT	.CYCLES / 2
     18  805b		       ea		      nop
     19  805c					      REPEND
   9979  805c				   continuekernel2
   9980  805c		       a5 92		      lda	ballheight
   9981  805e
   9982  805e				  -	      ifconst	pfres
   9983  805e				  -	      ldy	playfield+pfres*pfwidth-132,x
   9984  805e				  -	      sty	PF1L	;3
   9985  805e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   9986  805e				  -	      sty	PF2L	;3
   9987  805e				  -	      ldy	playfield+pfres*pfwidth-129,x
   9988  805e				  -	      sty	PF1R	; 3 too early?
   9989  805e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   9990  805e				  -	      sty	PF2R	;3
   9991  805e					      else
   9992  805e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
   9993  8060		       84 0e		      sty	PF1L	;3
   9994  8062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   9995  8064		       84 0f		      sty	PF2L	;3
   9996  8066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
   9997  8068		       84 0e		      sty	PF1R	; 3 too early?
   9998  806a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   9999  806c		       84 0f		      sty	PF2R	;3
  10000  806e					      endif
  10001  806e
  10002  806e							; should be playfield+$38 for width=2
  10003  806e
  10004  806e		       c7 89		      dcp	bally
  10005  8070		       2a		      rol
  10006  8071		       2a		      rol
  10007  8072							; rol
  10008  8072							; rol
  10009  8072				   goback
  10010  8072		       85 1f		      sta	ENABL
  10011  8074				   .startkernel
  10012  8074		       a5 8f		      lda	player1height	;3
  10013  8076		       c7 86		      dcp	player1y	;5
  10014  8078		       90 db		      bcc	.skipDrawP1	;2
  10015  807a		       a4 86		      ldy	player1y	;3
  10016  807c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  10017  807e							; so it doesn't cross a page boundary!
  10018  807e
  10019  807e				   .continueP1
  10020  807e		       85 1c		      sta	GRP1	;3
  10021  8080
  10022  8080				  -	      ifnconst	player1colors
  10023  8080				  -	      lda	missile1height	;3
  10024  8080				  -	      dcp	missile1y	;5
  10025  8080				  -	      rol		;2
  10026  8080				  -	      rol		;2
  10027  8080				  -	      sta	ENAM1	;3
  10028  8080					      else
  10029  8080		       b1 87		      lda	(player1color),y
  10030  8082		       85 07		      sta	COLUP1
  10031  8084				  -	      ifnconst	playercolors
  10032  8084				  -	      sleep	7
  10033  8084					      else
  10034  8084		       ad 82 00 	      lda.w	player0colorstore
  10035  8087		       85 06		      sta	COLUP0
  10036  8089					      endif
  10037  8089					      endif
  10038  8089
  10039  8089				  -	      ifconst	pfres
  10040  8089				  -	      lda	playfield+pfres*pfwidth-132,x
  10041  8089				  -	      sta	PF1L	;3
  10042  8089				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
  10043  8089				  -	      sta	PF2L	;3
  10044  8089				  -	      lda	playfield+pfres*pfwidth-129,x
  10045  8089				  -	      sta	PF1R	; 3 too early?
  10046  8089				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
  10047  8089				  -	      sta	PF2R	;3
  10048  8089					      else
  10049  8089		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
  10050  808b		       85 0e		      sta	PF1L	;3
  10051  808d		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  10052  808f		       85 0f		      sta	PF2L	;3
  10053  8091		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
  10054  8093		       85 0e		      sta	PF1R	; 3 too early?
  10055  8095		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  10056  8097		       85 0f		      sta	PF2R	;3
  10057  8099					      endif
  10058  8099							; sleep 3
  10059  8099
  10060  8099		       a5 8e		      lda	player0height
  10061  809b		       c7 85		      dcp	player0y
  10062  809d		       90 b0		      bcc	.skipDrawP0
  10063  809f		       a4 85		      ldy	player0y
  10064  80a1		       b1 8a		      lda	(player0pointer),y
  10065  80a3				   .continueP0
  10066  80a3		       85 1b		      sta	GRP0
  10067  80a5
  10068  80a5					      ifnconst	no_blank_lines
  10069  80a5				  -	      ifnconst	playercolors
  10070  80a5				  -	      lda	missile0height	;3
  10071  80a5				  -	      dcp	missile0y	;5
  10072  80a5				  -	      sbc	stack1
  10073  80a5				  -	      sta	ENAM0	;3
  10074  80a5					      else
  10075  80a5		       b1 90		      lda	(player0color),y
  10076  80a7		       85 82		      sta	player0colorstore
      0  80a9					      sleep	6
      1  80a9				   .CYCLES    SET	6
      2  80a9
      3  80a9				  -	      IF	.CYCLES < 2
      4  80a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  80a9				  -	      ERR
      6  80a9					      ENDIF
      7  80a9
      8  80a9				  -	      IF	.CYCLES & 1
      9  80a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  80a9				  -	      nop	0
     11  80a9				  -	      ELSE
     12  80a9				  -	      bit	VSYNC
     13  80a9				  -	      ENDIF
     14  80a9				  -.CYCLES    SET	.CYCLES - 3
     15  80a9					      ENDIF
     16  80a9
     17  80a9					      REPEAT	.CYCLES / 2
     18  80a9		       ea		      nop
     17  80a9					      REPEND
     18  80aa		       ea		      nop
     17  80aa					      REPEND
     18  80ab		       ea		      nop
     19  80ac					      REPEND
  10078  80ac					      endif
  10079  80ac		       c6 9c		      dec	temp1
  10080  80ae		       d0 ab		      bne	continuekernel
  10081  80b0				  -	      else
  10082  80b0				  -	      dec	temp1
  10083  80b0				  -	      beq	altkernel2
  10084  80b0				  -	      ifconst	readpaddle
  10085  80b0				  -	      ldy	currentpaddle
  10086  80b0				  -	      lda	INPT0,y
  10087  80b0				  -	      bpl	noreadpaddle
  10088  80b0				  -	      inc	paddle
  10089  80b0				  -	      jmp	continuekernel2
  10090  80b0				  -noreadpaddle
  10091  80b0				  -	      sleep	2
  10092  80b0				  -	      jmp	continuekernel
  10093  80b0				  -	      else
  10094  80b0				  -	      ifnconst	playercolors
  10095  80b0				  -	      ifconst	PFcolors
  10096  80b0				  -	      txa
  10097  80b0				  -	      tay
  10098  80b0				  -	      lda	(pfcolortable),y
  10099  80b0				  -	      ifnconst	backgroundchange
  10100  80b0				  -	      sta	COLUPF
  10101  80b0				  -	      else
  10102  80b0				  -	      sta	COLUBK
  10103  80b0				  -	      endif
  10104  80b0				  -	      jmp	continuekernel
  10105  80b0				  -	      else
  10106  80b0				  -	      ifconst	kernelmacrodef
  10107  80b0				  -	      kernelmacro
  10108  80b0				  -	      else
  10109  80b0				  -	      sleep	12
  10110  80b0				  -	      endif
  10111  80b0				  -	      endif
  10112  80b0				  -	      else
  10113  80b0				  -	      lda	(player0color),y
  10114  80b0				  -	      sta	player0colorstore
  10115  80b0				  -	      sleep	4
  10116  80b0				  -	      endif
  10117  80b0				  -	      jmp	continuekernel
  10118  80b0				  -	      endif
  10119  80b0				  -altkernel2
  10120  80b0				  -	      txa
  10121  80b0				  -	      ifnconst	vertical_reflect
  10122  80b0				  -	      sbx	#256-pfwidth
  10123  80b0				  -	      else
  10124  80b0				  -	      sbx	#256-pfwidth/2
  10125  80b0				  -	      endif
  10126  80b0				  -	      bmi	lastkernelline
  10127  80b0				  -	      ifconst	pfrowheight
  10128  80b0				  -	      lda	#pfrowheight
  10129  80b0				  -	      else
  10130  80b0				  -	      ifnconst	pfres
  10131  80b0				  -	      lda	#8
  10132  80b0				  -	      else
  10133  80b0				  -	      lda	#(96/pfres)	; try to come close to the real size
  10134  80b0				  -	      endif
  10135  80b0				  -	      endif
  10136  80b0				  -	      sta	temp1
  10137  80b0				  -	      jmp	continuekernel
  10138  80b0					      endif
  10139  80b0
  10140  80b0				   altkernel
  10141  80b0
  10142  80b0				  -	      ifconst	PFmaskvalue
  10143  80b0				  -	      lda	#PFmaskvalue
  10144  80b0					      else
  10145  80b0		       a9 00		      lda	#0
  10146  80b2					      endif
  10147  80b2		       85 0e		      sta	PF1L
  10148  80b4		       85 0f		      sta	PF2
  10149  80b6
  10150  80b6
  10151  80b6							;sleep 3
  10152  80b6
  10153  80b6							;28 cycles to fix things
  10154  80b6							;minus 11=17
  10155  80b6
  10156  80b6							; lax temp4
  10157  80b6							; clc
  10158  80b6		       8a		      txa
  10159  80b7					      ifnconst	vertical_reflect
  10160  80b7		       cb fc		      sbx	#256-pfwidth
  10161  80b9				  -	      else
  10162  80b9				  -	      sbx	#256-pfwidth/2
  10163  80b9					      endif
  10164  80b9
  10165  80b9		       30 12		      bmi	lastkernelline
  10166  80bb
  10167  80bb				  -	      ifconst	PFcolorandheight
  10168  80bb				  -	      ifconst	pfres
  10169  80bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
  10170  80bb				  -	      else
  10171  80bb				  -	      ldy	playfieldcolorandheight-87,x
  10172  80bb				  -	      endif
  10173  80bb				  -	      ifnconst	backgroundchange
  10174  80bb				  -	      sty	COLUPF
  10175  80bb				  -	      else
  10176  80bb				  -	      sty	COLUBK
  10177  80bb				  -	      endif
  10178  80bb				  -	      ifconst	pfres
  10179  80bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
  10180  80bb				  -	      else
  10181  80bb				  -	      lda	playfieldcolorandheight-88,x
  10182  80bb				  -	      endif
  10183  80bb				  -	      sta.w	temp1
  10184  80bb					      endif
  10185  80bb				  -	      ifconst	PFheights
  10186  80bb				  -	      lsr
  10187  80bb				  -	      lsr
  10188  80bb				  -	      tay
  10189  80bb				  -	      lda	(pfheighttable),y
  10190  80bb				  -	      sta.w	temp1
  10191  80bb					      endif
  10192  80bb					      ifconst	PFcolors
  10193  80bb		       a8		      tay
  10194  80bc		       b1 f0		      lda	(pfcolortable),y
  10195  80be					      ifnconst	backgroundchange
  10196  80be		       85 08		      sta	COLUPF
  10197  80c0				  -	      else
  10198  80c0				  -	      sta	COLUBK
  10199  80c0					      endif
  10200  80c0				  -	      ifconst	pfrowheight
  10201  80c0				  -	      lda	#pfrowheight
  10202  80c0					      else
  10203  80c0					      ifnconst	pfres
  10204  80c0		       a9 08		      lda	#8
  10205  80c2				  -	      else
  10206  80c2				  -	      lda	#(96/pfres)	; try to come close to the real size
  10207  80c2					      endif
  10208  80c2					      endif
  10209  80c2		       85 9c		      sta	temp1
  10210  80c4					      endif
  10211  80c4					      ifnconst	PFcolorandheight
  10212  80c4				  -	      ifnconst	PFcolors
  10213  80c4				  -	      ifnconst	PFheights
  10214  80c4				  -	      ifnconst	no_blank_lines
  10215  80c4				  -			; read paddle 0
  10216  80c4				  -			; lo-res paddle read
  10217  80c4				  -			; bit INPT0
  10218  80c4				  -			; bmi paddleskipread
  10219  80c4				  -			; inc paddle0
  10220  80c4				  -			;donepaddleskip
  10221  80c4				  -	      sleep	10
  10222  80c4				  -	      ifconst	pfrowheight
  10223  80c4				  -	      lda	#pfrowheight
  10224  80c4				  -	      else
  10225  80c4				  -	      ifnconst	pfres
  10226  80c4				  -	      lda	#8
  10227  80c4				  -	      else
  10228  80c4				  -	      lda	#(96/pfres)	; try to come close to the real size
  10229  80c4				  -	      endif
  10230  80c4				  -	      endif
  10231  80c4				  -	      sta	temp1
  10232  80c4				  -	      endif
  10233  80c4				  -	      endif
  10234  80c4					      endif
  10235  80c4					      endif
  10236  80c4
  10237  80c4
  10238  80c4		       a5 92		      lda	ballheight
  10239  80c6		       c7 89		      dcp	bally
  10240  80c8		       e5 9f		      sbc	temp4
  10241  80ca
  10242  80ca
  10243  80ca		       4c 72 f0 	      jmp	goback
  10244  80cd
  10245  80cd
  10246  80cd					      ifnconst	no_blank_lines
  10247  80cd				   lastkernelline
  10248  80cd				  -	      ifnconst	PFcolors
  10249  80cd				  -	      sleep	10
  10250  80cd					      else
  10251  80cd		       a0 7c		      ldy	#124
  10252  80cf		       b1 f0		      lda	(pfcolortable),y
  10253  80d1		       85 08		      sta	COLUPF
  10254  80d3					      endif
  10255  80d3
  10256  80d3				  -	      ifconst	PFheights
  10257  80d3				  -	      ldx	#1
  10258  80d3				  -			;sleep 4
  10259  80d3				  -	      sleep	3	; this was over 1 cycle
  10260  80d3					      else
  10261  80d3		       a6 ef		      ldx	playfieldpos
  10262  80d5							;sleep 3
      0  80d5					      sleep	2	; this was over 1 cycle
      1  80d5				   .CYCLES    SET	2
      2  80d5
      3  80d5				  -	      IF	.CYCLES < 2
      4  80d5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  80d5				  -	      ERR
      6  80d5					      ENDIF
      7  80d5
      8  80d5				  -	      IF	.CYCLES & 1
      9  80d5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  80d5				  -	      nop	0
     11  80d5				  -	      ELSE
     12  80d5				  -	      bit	VSYNC
     13  80d5				  -	      ENDIF
     14  80d5				  -.CYCLES    SET	.CYCLES - 3
     15  80d5					      ENDIF
     16  80d5
     17  80d5					      REPEAT	.CYCLES / 2
     18  80d5		       ea		      nop
     19  80d6					      REPEND
  10264  80d6					      endif
  10265  80d6
  10266  80d6		       4c 1b f1 	      jmp	enterlastkernel
  10267  80d9
  10268  80d9				  -	      else
  10269  80d9				  -lastkernelline
  10270  80d9				  -
  10271  80d9				  -	      ifconst	PFheights
  10272  80d9				  -	      ldx	#1
  10273  80d9				  -			;sleep 5
  10274  80d9				  -	      sleep	4	; this was over 1 cycle
  10275  80d9				  -	      else
  10276  80d9				  -	      ldx	playfieldpos
  10277  80d9				  -			;sleep 4
  10278  80d9				  -	      sleep	3	; this was over 1 cycle
  10279  80d9				  -	      endif
  10280  80d9				  -
  10281  80d9				  -	      cpx	#0
  10282  80d9				  -	      bne	.enterfromNBL
  10283  80d9				  -	      jmp	no_blank_lines_bailout
  10284  80d9					      endif
  10285  80d9
  10286  80d9					      if	((<*)>$d5)
  10287  8100		       00 00 00 00*	      align	256
  10288  8100					      endif
  10289  8100							; this is a kludge to prevent page wrapping - fix!!!
  10290  8100
  10291  8100				   .skipDrawlastP1
  10292  8100		       a9 00		      lda	#0
  10293  8102		       a8		      tay		; added so we don't cross a page
  10294  8103		       4c 2d f1 	      jmp	.continuelastP1
  10295  8106
  10296  8106				   .endkerloop		; enter at cycle 59??
  10297  8106
  10298  8106		       ea		      nop
  10299  8107
  10300  8107				   .enterfromNBL
  10301  8107				  -	      ifconst	pfres
  10302  8107				  -	      ldy.w	playfield+pfres*pfwidth-4
  10303  8107				  -	      sty	PF1L	;3
  10304  8107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  10305  8107				  -	      sty	PF2L	;3
  10306  8107				  -	      ldy.w	playfield+pfres*pfwidth-1
  10307  8107				  -	      sty	PF1R	; possibly too early?
  10308  8107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  10309  8107				  -	      sty	PF2R	;3
  10310  8107					      else
  10311  8107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  10312  810a		       84 0e		      sty	PF1L	;3
  10313  810c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  10314  810f		       84 0f		      sty	PF2L	;3
  10315  8111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  10316  8114		       84 0e		      sty	PF1R	; possibly too early?
  10317  8116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  10318  8119		       84 0f		      sty	PF2R	;3
  10319  811b					      endif
  10320  811b
  10321  811b				   enterlastkernel
  10322  811b		       a5 92		      lda	ballheight
  10323  811d
  10324  811d							; tya
  10325  811d		       c7 89		      dcp	bally
  10326  811f							; sleep 4
  10327  811f
  10328  811f							; sbc stack3
  10329  811f		       2a		      rol
  10330  8120		       2a		      rol
  10331  8121		       85 1f		      sta	ENABL
  10332  8123
  10333  8123		       a5 8f		      lda	player1height	;3
  10334  8125		       c7 86		      dcp	player1y	;5
  10335  8127		       90 d7		      bcc	.skipDrawlastP1
  10336  8129		       a4 86		      ldy	player1y	;3
  10337  812b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  10338  812d							; so it doesn't cross a page boundary!
  10339  812d
  10340  812d				   .continuelastP1
  10341  812d		       85 1c		      sta	GRP1	;3
  10342  812f
  10343  812f				  -	      ifnconst	player1colors
  10344  812f				  -	      lda	missile1height	;3
  10345  812f				  -	      dcp	missile1y	;5
  10346  812f					      else
  10347  812f		       b1 87		      lda	(player1color),y
  10348  8131		       85 07		      sta	COLUP1
  10349  8133					      endif
  10350  8133
  10351  8133		       ca		      dex
  10352  8134							;dec temp4 ; might try putting this above PF writes
  10353  8134		       f0 37		      beq	endkernel
  10354  8136
  10355  8136
  10356  8136				  -	      ifconst	pfres
  10357  8136				  -	      ldy.w	playfield+pfres*pfwidth-4
  10358  8136				  -	      sty	PF1L	;3
  10359  8136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  10360  8136				  -	      sty	PF2L	;3
  10361  8136				  -	      ldy.w	playfield+pfres*pfwidth-1
  10362  8136				  -	      sty	PF1R	; possibly too early?
  10363  8136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  10364  8136				  -	      sty	PF2R	;3
  10365  8136					      else
  10366  8136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  10367  8139		       84 0e		      sty	PF1L	;3
  10368  813b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  10369  813e		       84 0f		      sty	PF2L	;3
  10370  8140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  10371  8143		       84 0e		      sty	PF1R	; possibly too early?
  10372  8145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  10373  8148		       84 0f		      sty	PF2R	;3
  10374  814a					      endif
  10375  814a
  10376  814a				  -	      ifnconst	player1colors
  10377  814a				  -	      rol		;2
  10378  814a				  -	      rol		;2
  10379  814a				  -	      sta	ENAM1	;3
  10380  814a					      else
  10381  814a				  -	      ifnconst	playercolors
  10382  814a				  -	      sleep	7
  10383  814a					      else
  10384  814a		       ad 82 00 	      lda.w	player0colorstore
  10385  814d		       85 06		      sta	COLUP0
  10386  814f					      endif
  10387  814f					      endif
  10388  814f
  10389  814f		       ad 8e 00 	      lda.w	player0height
  10390  8152		       c7 85		      dcp	player0y
  10391  8154		       90 11		      bcc	.skipDrawlastP0
  10392  8156		       a4 85		      ldy	player0y
  10393  8158		       b1 8a		      lda	(player0pointer),y
  10394  815a				   .continuelastP0
  10395  815a		       85 1b		      sta	GRP0
  10396  815c
  10397  815c
  10398  815c
  10399  815c					      ifnconst	no_blank_lines
  10400  815c		       a5 90		      lda	missile0height	;3
  10401  815e		       c7 91		      dcp	missile0y	;5
  10402  8160		       e5 f6		      sbc	stack1
  10403  8162		       85 1d		      sta	ENAM0	;3
  10404  8164		       4c 06 f1 	      jmp	.endkerloop
  10405  8167				  -	      else
  10406  8167				  -	      ifconst	readpaddle
  10407  8167				  -	      ldy	currentpaddle
  10408  8167				  -	      lda	INPT0,y
  10409  8167				  -	      bpl	noreadpaddle2
  10410  8167				  -	      inc	paddle
  10411  8167				  -	      jmp	.endkerloop
  10412  8167				  -noreadpaddle2
  10413  8167				  -	      sleep	4
  10414  8167				  -	      jmp	.endkerloop
  10415  8167				  -	      else		; no_blank_lines and no paddle reading
  10416  8167				  -	      pla
  10417  8167				  -	      pha		; 14 cycles in 4 bytes
  10418  8167				  -	      pla
  10419  8167				  -	      pha
  10420  8167				  -			; sleep 14
  10421  8167				  -	      jmp	.endkerloop
  10422  8167				  -	      endif
  10423  8167					      endif
  10424  8167
  10425  8167
  10426  8167							; ifconst donepaddleskip
  10427  8167							;paddleskipread
  10428  8167							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
  10429  8167							; plus we get a lo-res paddle read
  10430  8167							; bmi donepaddleskip
  10431  8167							; endif
  10432  8167
  10433  8167				   .skipDrawlastP0
  10434  8167		       a9 00		      lda	#0
  10435  8169		       a8		      tay
  10436  816a		       4c 5a f1 	      jmp	.continuelastP0
  10437  816d
  10438  816d				  -	      ifconst	no_blank_lines
  10439  816d				  -no_blank_lines_bailout
  10440  816d				  -	      ldx	#0
  10441  816d					      endif
  10442  816d
  10443  816d				   endkernel
  10444  816d							; 6 digit score routine
  10445  816d		       86 0e		      stx	PF1
  10446  816f		       86 0f		      stx	PF2
  10447  8171		       86 0d		      stx	PF0
  10448  8173		       18		      clc
  10449  8174
  10450  8174				  -	      ifconst	pfrowheight
  10451  8174				  -	      lda	#pfrowheight+2
  10452  8174					      else
  10453  8174					      ifnconst	pfres
  10454  8174		       a9 0a		      lda	#10
  10455  8176				  -	      else
  10456  8176				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  10457  8176					      endif
  10458  8176					      endif
  10459  8176
  10460  8176		       e5 ef		      sbc	playfieldpos
  10461  8178		       85 ef		      sta	playfieldpos
  10462  817a		       8a		      txa
  10463  817b
  10464  817b				  -	      ifconst	shakescreen
  10465  817b				  -	      bit	shakescreen
  10466  817b				  -	      bmi	noshakescreen2
  10467  817b				  -	      ldx	#$3D
  10468  817b				  -noshakescreen2
  10469  817b					      endif
  10470  817b
  10471  817b		       95 02		      sta	WSYNC,x
  10472  817d
  10473  817d							; STA WSYNC ;first one, need one more
  10474  817d		       85 0b		      sta	REFP0
  10475  817f		       85 0c		      sta	REFP1
  10476  8181		       85 1b		      STA	GRP0
  10477  8183		       85 1c		      STA	GRP1
  10478  8185							; STA PF1
  10479  8185							; STA PF2
  10480  8185		       85 2b		      sta	HMCLR
  10481  8187		       85 1d		      sta	ENAM0
  10482  8189		       85 1e		      sta	ENAM1
  10483  818b		       85 1f		      sta	ENABL
  10484  818d
  10485  818d		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
  10486  818f		       85 85		      sta	player0y
  10487  8191		       a5 9e		      lda	temp3
  10488  8193		       85 86		      sta	player1y
  10489  8195				  -	      ifnconst	player1colors
  10490  8195				  -	      lda	temp6
  10491  8195				  -	      sta	missile1y
  10492  8195					      endif
  10493  8195				  -	      ifnconst	playercolors
  10494  8195				  -	      ifnconst	readpaddle
  10495  8195				  -	      lda	temp5
  10496  8195				  -	      sta	missile0y
  10497  8195				  -	      endif
  10498  8195					      endif
  10499  8195		       a5 f7		      lda	stack2
  10500  8197		       85 89		      sta	bally
  10501  8199
  10502  8199							; strangely, this isn't required any more. might have
  10503  8199							; resulted from the no_blank_lines score bounce fix
  10504  8199							;ifconst no_blank_lines
  10505  8199							;sta WSYNC
  10506  8199							;endif
  10507  8199
  10508  8199		       ad 84 02 	      lda	INTIM
  10509  819c		       18		      clc
  10510  819d				  -	      ifnconst	vblank_time
  10511  819d				  -	      adc	#43+12+87
  10512  819d					      else
  10513  819d		       69 8e		      adc	#vblank_time+12+87
  10514  819f
  10515  819f					      endif
  10516  819f							; sta WSYNC
  10517  819f		       8d 96 02 	      sta	TIM64T
  10518  81a2
  10519  81a2				  -	      ifconst	minikernel
  10520  81a2				  -	      jsr	minikernel
  10521  81a2					      endif
  10522  81a2
  10523  81a2							; now reassign temp vars for score pointers
  10524  81a2
  10525  81a2							; score pointers contain:
  10526  81a2							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
  10527  81a2							; swap lo2->temp1
  10528  81a2							; swap lo4->temp3
  10529  81a2							; swap lo6->temp5
  10530  81a2					      ifnconst	noscore
  10531  81a2		       a5 97		      lda	scorepointers+1
  10532  81a4							; ldy temp1
  10533  81a4		       85 9c		      sta	temp1
  10534  81a6							; sty scorepointers+1
  10535  81a6
  10536  81a6		       a5 99		      lda	scorepointers+3
  10537  81a8							; ldy temp3
  10538  81a8		       85 9e		      sta	temp3
  10539  81aa							; sty scorepointers+3
  10540  81aa
  10541  81aa
  10542  81aa		       85 2b		      sta	HMCLR
  10543  81ac		       ba		      tsx
  10544  81ad		       86 f6		      stx	stack1
  10545  81af		       a2 e0		      ldx	#$E0
  10546  81b1		       86 20		      stx	HMP0
  10547  81b3
  10548  81b3		       a5 a3		      LDA	scorecolor
  10549  81b5		       85 06		      STA	COLUP0
  10550  81b7		       85 07		      STA	COLUP1
  10551  81b9				  -	      ifconst	scorefade
  10552  81b9				  -	      STA	stack2
  10553  81b9					      endif
  10554  81b9					      ifconst	pfscore
  10555  81b9		       a5 f4		      lda	pfscorecolor
  10556  81bb		       85 08		      sta	COLUPF
  10557  81bd					      endif
  10558  81bd		       85 02		      sta	WSYNC
  10559  81bf		       a2 00		      ldx	#0
  10560  81c1		       86 1b		      STx	GRP0
  10561  81c3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
  10562  81c5
  10563  81c5		       a5 9b		      lda	scorepointers+5
  10564  81c7							; ldy temp5
  10565  81c7		       95 a0		      sta	temp5,x
  10566  81c9							; sty scorepointers+5
  10567  81c9		       a9 ff		      lda	#>scoretable
  10568  81cb		       85 97		      sta	scorepointers+1
  10569  81cd		       85 99		      sta	scorepointers+3
  10570  81cf		       85 9b		      sta	scorepointers+5
  10571  81d1		       85 9d		      sta	temp2
  10572  81d3		       85 9f		      sta	temp4
  10573  81d5		       85 a1		      sta	temp6
  10574  81d7		       a0 07		      LDY	#7
  10575  81d9		       84 25		      STY	VDELP0
  10576  81db		       85 10		      STA	RESP0
  10577  81dd		       85 11		      STA	RESP1
  10578  81df
  10579  81df
  10580  81df		       a9 03		      LDA	#$03
  10581  81e1		       85 04		      STA	NUSIZ0
  10582  81e3		       85 05		      STA	NUSIZ1
  10583  81e5		       85 26		      STA	VDELP1
  10584  81e7		       a9 f0		      LDA	#$F0
  10585  81e9		       85 21		      STA	HMP1
  10586  81eb		       b1 96		      lda	(scorepointers),y
  10587  81ed		       85 1b		      sta	GRP0
  10588  81ef		       85 2a		      STA	HMOVE	; cycle 73 ?
  10589  81f1		       4c 09 f2 	      jmp	beginscore
  10590  81f4
  10591  81f4
  10592  81f4					      if	((<*)>$d4)
  10593  8200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
  10594  8200					      endif
  10595  8200
  10596  8200				   loop2
  10597  8200		       b1 96		      lda	(scorepointers),y	;+5 68 204
  10598  8202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
  10599  8204					      ifconst	pfscore
  10600  8204		       ad f2 00 	      lda.w	pfscore1
  10601  8207		       85 0e		      sta	PF1
  10602  8209				  -	      else
  10603  8209				  -	      ifconst	scorefade
  10604  8209				  -	      sleep	2
  10605  8209				  -	      dec	stack2	; decrement the temporary scorecolor
  10606  8209				  -	      else
  10607  8209				  -	      sleep	7
  10608  8209				  -	      endif
  10609  8209					      endif
  10610  8209							; cycle 0
  10611  8209				   beginscore
  10612  8209		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
  10613  820b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
  10614  820d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
  10615  820f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
  10616  8211		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
  10617  8213		       9a		      txs
  10618  8214		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
  10619  8216				  -	      ifconst	scorefade
  10620  8216				  -	      lda	stack2
  10621  8216					      else
      0  8216					      sleep	3
      1  8216				   .CYCLES    SET	3
      2  8216
      3  8216				  -	      IF	.CYCLES < 2
      4  8216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8216				  -	      ERR
      6  8216					      ENDIF
      7  8216
      8  8216					      IF	.CYCLES & 1
      9  8216					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8216		       04 00		      nop	0
     11  8218				  -	      ELSE
     12  8218				  -	      bit	VSYNC
     13  8218					      ENDIF
     14  8218				   .CYCLES    SET	.CYCLES - 3
     15  8218					      ENDIF
     16  8218
     17  8218				  -	      REPEAT	.CYCLES / 2
     18  8218				  -	      nop
     19  8218					      REPEND
  10623  8218					      endif
  10624  8218
  10625  8218					      ifconst	pfscore
  10626  8218		       a5 f3		      lda	pfscore2
  10627  821a		       85 0e		      sta	PF1
  10628  821c				  -	      else
  10629  821c				  -	      ifconst	scorefade
  10630  821c				  -	      sta	COLUP0
  10631  821c				  -	      sta	COLUP1
  10632  821c				  -	      else
  10633  821c				  -	      sleep	6
  10634  821c				  -	      endif
  10635  821c					      endif
  10636  821c
  10637  821c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
  10638  821e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
  10639  8220		       ba		      tsx
  10640  8221		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
  10641  8223		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
  10642  8225		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
  10643  8227		       88		      dey
  10644  8228		       10 d6		      bpl	loop2	;+2 60 180
  10645  822a
  10646  822a		       a6 f6		      ldx	stack1
  10647  822c		       9a		      txs
  10648  822d							; lda scorepointers+1
  10649  822d		       a4 9c		      ldy	temp1
  10650  822f							; sta temp1
  10651  822f		       84 97		      sty	scorepointers+1
  10652  8231
  10653  8231		       a9 00		      LDA	#0
  10654  8233		       85 0e		      sta	PF1
  10655  8235		       85 1b		      STA	GRP0
  10656  8237		       85 1c		      STA	GRP1
  10657  8239		       85 25		      STA	VDELP0
  10658  823b		       85 26		      STA	VDELP1	;do we need these
  10659  823d		       85 04		      STA	NUSIZ0
  10660  823f		       85 05		      STA	NUSIZ1
  10661  8241
  10662  8241							; lda scorepointers+3
  10663  8241		       a4 9e		      ldy	temp3
  10664  8243							; sta temp3
  10665  8243		       84 99		      sty	scorepointers+3
  10666  8245
  10667  8245							; lda scorepointers+5
  10668  8245		       a4 a0		      ldy	temp5
  10669  8247							; sta temp5
  10670  8247		       84 9b		      sty	scorepointers+5
  10671  8249					      endif		;noscore
  10672  8249				  -	      ifconst	readpaddle
  10673  8249				  -	      lda	#%11000010
  10674  8249					      else
  10675  8249				  -	      ifconst	qtcontroller
  10676  8249				  -	      lda	qtcontroller
  10677  8249				  -	      lsr		; bit 0 in carry
  10678  8249				  -	      lda	#4
  10679  8249				  -	      ror		; carry into top of A
  10680  8249					      else
  10681  8249		       a9 02		      lda	#2
  10682  824b					      endif		; qtcontroller
  10683  824b					      endif		; readpaddle
  10684  824b		       85 02		      sta	WSYNC
  10685  824d		       85 01		      sta	VBLANK
      0  824f					      RETURN
      1  824f				  -	      ifnconst	bankswitch
      2  824f				  -	      rts
      3  824f					      else
      4  824f		       4c dd ff 	      jmp	BS_return
      5  8252					      endif
  10687  8252				  -	      ifconst	shakescreen
  10688  8252				  -doshakescreen
  10689  8252				  -	      bit	shakescreen
  10690  8252				  -	      bmi	noshakescreen
  10691  8252				  -	      sta	WSYNC
  10692  8252				  -noshakescreen
  10693  8252				  -	      ldx	missile0height
  10694  8252				  -	      inx
  10695  8252				  -	      rts
  10696  8252					      endif
  10697  8252
  10698  8252							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10699  8252
  10700  8252				   start
  10701  8252		       78		      sei
  10702  8253		       d8		      cld
  10703  8254		       a0 00		      ldy	#0
  10704  8256		       a5 d0		      lda	$D0
  10705  8258		       c9 2c		      cmp	#$2C	;check RAM location #1
  10706  825a		       d0 07		      bne	MachineIs2600
  10707  825c		       a5 d1		      lda	$D1
  10708  825e		       c9 a9		      cmp	#$A9	;check RAM location #2
  10709  8260		       d0 01		      bne	MachineIs2600
  10710  8262		       88		      dey
  10711  8263				   MachineIs2600
  10712  8263		       a2 00		      ldx	#0
  10713  8265		       8a		      txa
  10714  8266				   clearmem
  10715  8266		       e8		      inx
  10716  8267		       9a		      txs
  10717  8268		       48		      pha
  10718  8269		       d0 fb		      bne	clearmem
  10719  826b		       84 9c		      sty	temp1
  10720  826d					      ifnconst	multisprite
  10721  826d				  -	      ifconst	pfrowheight
  10722  826d				  -	      lda	#pfrowheight
  10723  826d					      else
  10724  826d				  -	      ifconst	pfres
  10725  826d				  -	      lda	#(96/pfres)
  10726  826d					      else
  10727  826d		       a9 08		      lda	#8
  10728  826f					      endif
  10729  826f					      endif
  10730  826f		       85 ef		      sta	playfieldpos
  10731  8271					      endif
  10732  8271		       a2 05		      ldx	#5
  10733  8273				   initscore
  10734  8273		       a9 74		      lda	#<scoretable
  10735  8275		       95 96		      sta	scorepointers,x
  10736  8277		       ca		      dex
  10737  8278		       10 f9		      bpl	initscore
  10738  827a		       a9 01		      lda	#1
  10739  827c		       85 0a		      sta	CTRLPF
  10740  827e		       0d 84 02 	      ora	INTIM
  10741  8281		       85 a2		      sta	rand
  10742  8283
  10743  8283				  -	      ifconst	multisprite
  10744  8283				  -	      jsr	multisprite_setup
  10745  8283					      endif
  10746  8283
  10747  8283				  -	      ifnconst	bankswitch
  10748  8283				  -	      jmp	game
  10749  8283					      else
  10750  8283		       a9 0f		      lda	#>(game-1)
  10751  8285		       48		      pha
  10752  8286		       a9 ff		      lda	#<(game-1)
  10753  8288		       48		      pha
  10754  8289		       48		      pha
  10755  828a		       48		      pha
  10756  828b		       a2 01		      ldx	#1
  10757  828d		       4c eb ff 	      jmp	BS_jsr
  10758  8290					      endif
  10759  8290							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10760  8290
  10761  8290							; playfield drawing routines
  10762  8290							; you get a 32x12 bitmapped display in a single color :)
  10763  8290							; 0-31 and 0-11
  10764  8290
  10765  8290				   pfclear		; clears playfield - or fill with pattern
  10766  8290				  -	      ifconst	pfres
  10767  8290				  -	      ldx	#pfres*pfwidth-1
  10768  8290					      else
  10769  8290		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
  10770  8292					      endif
  10771  8292				   pfclear_loop
  10772  8292					      ifnconst	superchip
  10773  8292		       95 a4		      sta	playfield,x
  10774  8294				  -	      else
  10775  8294				  -	      sta	playfield-128,x
  10776  8294					      endif
  10777  8294		       ca		      dex
  10778  8295		       10 fb		      bpl	pfclear_loop
      0  8297					      RETURN
      1  8297				  -	      ifnconst	bankswitch
      2  8297				  -	      rts
      3  8297					      else
      4  8297		       4c dd ff 	      jmp	BS_return
      5  829a					      endif
  10780  829a
  10781  829a				   setuppointers
  10782  829a		       86 9d		      stx	temp2	; store on.off.flip value
  10783  829c		       aa		      tax		; put x-value in x 
  10784  829d		       4a		      lsr
  10785  829e		       4a		      lsr
  10786  829f		       4a		      lsr		; divide x pos by 8 
  10787  82a0		       85 9c		      sta	temp1
  10788  82a2		       98		      tya
  10789  82a3		       0a		      asl
  10790  82a4					      if	pfwidth=4
  10791  82a4		       0a		      asl		; multiply y pos by 4
  10792  82a5					      endif		; else multiply by 2
  10793  82a5		       18		      clc
  10794  82a6		       65 9c		      adc	temp1	; add them together to get actual memory location offset
  10795  82a8		       a8		      tay		; put the value in y
  10796  82a9		       a5 9d		      lda	temp2	; restore on.off.flip value
  10797  82ab		       60		      rts
  10798  82ac
  10799  82ac				   pfread
  10800  82ac							;x=xvalue, y=yvalue
  10801  82ac		       20 9a f2 	      jsr	setuppointers
  10802  82af		       bd 44 f3 	      lda	setbyte,x
  10803  82b2		       39 a4 00 	      and	playfield,y
  10804  82b5		       5d 44 f3 	      eor	setbyte,x
  10805  82b8							; beq readzero
  10806  82b8							; lda #1
  10807  82b8							; readzero
      0  82b8					      RETURN
      1  82b8				  -	      ifnconst	bankswitch
      2  82b8				  -	      rts
      3  82b8					      else
      4  82b8		       4c dd ff 	      jmp	BS_return
      5  82bb					      endif
  10809  82bb
  10810  82bb				   pfpixel
  10811  82bb							;x=xvalue, y=yvalue, a=0,1,2
  10812  82bb		       20 9a f2 	      jsr	setuppointers
  10813  82be
  10814  82be					      ifconst	bankswitch
  10815  82be		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  10816  82c0		       f0 0f		      beq	pixelon_r	; if "on" go to on
  10817  82c2		       4a		      lsr
  10818  82c3		       b0 18		      bcs	pixeloff_r	; value is 1 if true
  10819  82c5		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  10820  82c8		       5d 44 f3 	      eor	setbyte,x
  10821  82cb				  -	      ifconst	superchip
  10822  82cb				  -	      sta	playfield-128,y
  10823  82cb					      else
  10824  82cb		       99 a4 00 	      sta	playfield,y
  10825  82ce					      endif
      0  82ce					      RETURN
      1  82ce				  -	      ifnconst	bankswitch
      2  82ce				  -	      rts
      3  82ce					      else
      4  82ce		       4c dd ff 	      jmp	BS_return
      5  82d1					      endif
  10827  82d1				   pixelon_r
  10828  82d1		       b9 a4 00 	      lda	playfield,y
  10829  82d4		       1d 44 f3 	      ora	setbyte,x
  10830  82d7				  -	      ifconst	superchip
  10831  82d7				  -	      sta	playfield-128,y
  10832  82d7					      else
  10833  82d7		       99 a4 00 	      sta	playfield,y
  10834  82da					      endif
      0  82da					      RETURN
      1  82da				  -	      ifnconst	bankswitch
      2  82da				  -	      rts
      3  82da					      else
      4  82da		       4c dd ff 	      jmp	BS_return
      5  82dd					      endif
  10836  82dd				   pixeloff_r
  10837  82dd		       bd 44 f3 	      lda	setbyte,x
  10838  82e0		       49 ff		      eor	#$ff
  10839  82e2		       39 a4 00 	      and	playfield,y
  10840  82e5				  -	      ifconst	superchip
  10841  82e5				  -	      sta	playfield-128,y
  10842  82e5					      else
  10843  82e5		       99 a4 00 	      sta	playfield,y
  10844  82e8					      endif
      0  82e8					      RETURN
      1  82e8				  -	      ifnconst	bankswitch
      2  82e8				  -	      rts
      3  82e8					      else
      4  82e8		       4c dd ff 	      jmp	BS_return
      5  82eb					      endif
  10846  82eb
  10847  82eb				  -	      else
  10848  82eb				  -	      jmp	plotpoint
  10849  82eb					      endif
  10850  82eb
  10851  82eb				   pfhline
  10852  82eb							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  10853  82eb		       20 9a f2 	      jsr	setuppointers
  10854  82ee		       4c f8 f2 	      jmp	noinc
  10855  82f1				   keepgoing
  10856  82f1		       e8		      inx
  10857  82f2		       8a		      txa
  10858  82f3		       29 07		      and	#7
  10859  82f5		       d0 01		      bne	noinc
  10860  82f7		       c8		      iny
  10861  82f8				   noinc
  10862  82f8		       20 1d f3 	      jsr	plotpoint
  10863  82fb		       e4 9e		      cpx	temp3
  10864  82fd		       30 f2		      bmi	keepgoing
      0  82ff					      RETURN
      1  82ff				  -	      ifnconst	bankswitch
      2  82ff				  -	      rts
      3  82ff					      else
      4  82ff		       4c dd ff 	      jmp	BS_return
      5  8302					      endif
  10866  8302
  10867  8302				   pfvline
  10868  8302							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  10869  8302		       20 9a f2 	      jsr	setuppointers
  10870  8305		       84 9c		      sty	temp1	; store memory location offset
  10871  8307		       e6 9e		      inc	temp3	; increase final x by 1 
  10872  8309		       a5 9e		      lda	temp3
  10873  830b		       0a		      asl
  10874  830c					      if	pfwidth=4
  10875  830c		       0a		      asl		; multiply by 4
  10876  830d					      endif		; else multiply by 2
  10877  830d		       85 9e		      sta	temp3	; store it
  10878  830f							; Thanks to Michael Rideout for fixing a bug in this code
  10879  830f							; right now, temp1=y=starting memory location, temp3=final
  10880  830f							; x should equal original x value
  10881  830f				   keepgoingy
  10882  830f		       20 1d f3 	      jsr	plotpoint
  10883  8312		       c8		      iny
  10884  8313		       c8		      iny
  10885  8314					      if	pfwidth=4
  10886  8314		       c8		      iny
  10887  8315		       c8		      iny
  10888  8316					      endif
  10889  8316		       c4 9e		      cpy	temp3
  10890  8318		       30 f5		      bmi	keepgoingy
      0  831a					      RETURN
      1  831a				  -	      ifnconst	bankswitch
      2  831a				  -	      rts
      3  831a					      else
      4  831a		       4c dd ff 	      jmp	BS_return
      5  831d					      endif
  10892  831d
  10893  831d				   plotpoint
  10894  831d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  10895  831f		       f0 0d		      beq	pixelon	; if "on" go to on
  10896  8321		       4a		      lsr
  10897  8322		       b0 14		      bcs	pixeloff	; value is 1 if true
  10898  8324		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  10899  8327		       5d 44 f3 	      eor	setbyte,x
  10900  832a				  -	      ifconst	superchip
  10901  832a				  -	      sta	playfield-128,y
  10902  832a					      else
  10903  832a		       99 a4 00 	      sta	playfield,y
  10904  832d					      endif
  10905  832d		       60		      rts
  10906  832e				   pixelon
  10907  832e		       b9 a4 00 	      lda	playfield,y
  10908  8331		       1d 44 f3 	      ora	setbyte,x
  10909  8334				  -	      ifconst	superchip
  10910  8334				  -	      sta	playfield-128,y
  10911  8334					      else
  10912  8334		       99 a4 00 	      sta	playfield,y
  10913  8337					      endif
  10914  8337		       60		      rts
  10915  8338				   pixeloff
  10916  8338		       bd 44 f3 	      lda	setbyte,x
  10917  833b		       49 ff		      eor	#$ff
  10918  833d		       39 a4 00 	      and	playfield,y
  10919  8340				  -	      ifconst	superchip
  10920  8340				  -	      sta	playfield-128,y
  10921  8340					      else
  10922  8340		       99 a4 00 	      sta	playfield,y
  10923  8343					      endif
  10924  8343		       60		      rts
  10925  8344
  10926  8344				   setbyte
  10927  8344					      ifnconst	pfcenter
  10928  8344		       80		      .byte.b	$80
  10929  8345		       40		      .byte.b	$40
  10930  8346		       20		      .byte.b	$20
  10931  8347		       10		      .byte.b	$10
  10932  8348		       08		      .byte.b	$08
  10933  8349		       04		      .byte.b	$04
  10934  834a		       02		      .byte.b	$02
  10935  834b		       01		      .byte.b	$01
  10936  834c					      endif
  10937  834c		       01		      .byte.b	$01
  10938  834d		       02		      .byte.b	$02
  10939  834e		       04		      .byte.b	$04
  10940  834f		       08		      .byte.b	$08
  10941  8350		       10		      .byte.b	$10
  10942  8351		       20		      .byte.b	$20
  10943  8352		       40		      .byte.b	$40
  10944  8353		       80		      .byte.b	$80
  10945  8354		       80		      .byte.b	$80
  10946  8355		       40		      .byte.b	$40
  10947  8356		       20		      .byte.b	$20
  10948  8357		       10		      .byte.b	$10
  10949  8358		       08		      .byte.b	$08
  10950  8359		       04		      .byte.b	$04
  10951  835a		       02		      .byte.b	$02
  10952  835b		       01		      .byte.b	$01
  10953  835c		       01		      .byte.b	$01
  10954  835d		       02		      .byte.b	$02
  10955  835e		       04		      .byte.b	$04
  10956  835f		       08		      .byte.b	$08
  10957  8360		       10		      .byte.b	$10
  10958  8361		       20		      .byte.b	$20
  10959  8362		       40		      .byte.b	$40
  10960  8363		       80		      .byte.b	$80
  10961  8364							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10962  8364
  10963  8364				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
  10964  8364		       d0 15		      bne	notleft
  10965  8366							;left
  10966  8366				  -	      ifconst	pfres
  10967  8366				  -	      ldx	#pfres*4
  10968  8366					      else
  10969  8366		       a2 30		      ldx	#48
  10970  8368					      endif
  10971  8368				   leftloop
  10972  8368		       b5 a3		      lda	playfield-1,x
  10973  836a		       4a		      lsr
  10974  836b
  10975  836b				  -	      ifconst	superchip
  10976  836b				  -	      lda	playfield-2,x
  10977  836b				  -	      rol
  10978  836b				  -	      sta	playfield-130,x
  10979  836b				  -	      lda	playfield-3,x
  10980  836b				  -	      ror
  10981  836b				  -	      sta	playfield-131,x
  10982  836b				  -	      lda	playfield-4,x
  10983  836b				  -	      rol
  10984  836b				  -	      sta	playfield-132,x
  10985  836b				  -	      lda	playfield-1,x
  10986  836b				  -	      ror
  10987  836b				  -	      sta	playfield-129,x
  10988  836b					      else
  10989  836b		       36 a2		      rol	playfield-2,x
  10990  836d		       76 a1		      ror	playfield-3,x
  10991  836f		       36 a0		      rol	playfield-4,x
  10992  8371		       76 a3		      ror	playfield-1,x
  10993  8373					      endif
  10994  8373
  10995  8373		       8a		      txa
  10996  8374		       cb 04		      sbx	#4
  10997  8376		       d0 f0		      bne	leftloop
      0  8378					      RETURN
      1  8378				  -	      ifnconst	bankswitch
      2  8378				  -	      rts
      3  8378					      else
      4  8378		       4c dd ff 	      jmp	BS_return
      5  837b					      endif
  10999  837b
  11000  837b				   notleft
  11001  837b		       4a		      lsr
  11002  837c		       90 15		      bcc	notright
  11003  837e							;right
  11004  837e
  11005  837e				  -	      ifconst	pfres
  11006  837e				  -	      ldx	#pfres*4
  11007  837e					      else
  11008  837e		       a2 30		      ldx	#48
  11009  8380					      endif
  11010  8380				   rightloop
  11011  8380		       b5 a0		      lda	playfield-4,x
  11012  8382		       4a		      lsr
  11013  8383				  -	      ifconst	superchip
  11014  8383				  -	      lda	playfield-3,x
  11015  8383				  -	      rol
  11016  8383				  -	      sta	playfield-131,x
  11017  8383				  -	      lda	playfield-2,x
  11018  8383				  -	      ror
  11019  8383				  -	      sta	playfield-130,x
  11020  8383				  -	      lda	playfield-1,x
  11021  8383				  -	      rol
  11022  8383				  -	      sta	playfield-129,x
  11023  8383				  -	      lda	playfield-4,x
  11024  8383				  -	      ror
  11025  8383				  -	      sta	playfield-132,x
  11026  8383					      else
  11027  8383		       36 a1		      rol	playfield-3,x
  11028  8385		       76 a2		      ror	playfield-2,x
  11029  8387		       36 a3		      rol	playfield-1,x
  11030  8389		       76 a0		      ror	playfield-4,x
  11031  838b					      endif
  11032  838b		       8a		      txa
  11033  838c		       cb 04		      sbx	#4
  11034  838e		       d0 f0		      bne	rightloop
      0  8390					      RETURN
      1  8390				  -	      ifnconst	bankswitch
      2  8390				  -	      rts
      3  8390					      else
      4  8390		       4c dd ff 	      jmp	BS_return
      5  8393					      endif
  11036  8393
  11037  8393				   notright
  11038  8393		       4a		      lsr
  11039  8394		       90 4b		      bcc	notup
  11040  8396							;up
  11041  8396		       4a		      lsr
  11042  8397		       90 02		      bcc	onedecup
  11043  8399		       c6 ef		      dec	playfieldpos
  11044  839b				   onedecup
  11045  839b		       c6 ef		      dec	playfieldpos
  11046  839d		       f0 02		      beq	shiftdown
  11047  839f		       10 3d		      bpl	noshiftdown2
  11048  83a1				   shiftdown
  11049  83a1				  -	      ifconst	pfrowheight
  11050  83a1				  -	      lda	#pfrowheight
  11051  83a1					      else
  11052  83a1					      ifnconst	pfres
  11053  83a1		       a9 08		      lda	#8
  11054  83a3				  -	      else
  11055  83a3				  -	      lda	#(96/pfres)	; try to come close to the real size
  11056  83a3					      endif
  11057  83a3					      endif
  11058  83a3
  11059  83a3		       85 ef		      sta	playfieldpos
  11060  83a5		       a5 a7		      lda	playfield+3
  11061  83a7		       85 9f		      sta	temp4
  11062  83a9		       a5 a6		      lda	playfield+2
  11063  83ab		       85 9e		      sta	temp3
  11064  83ad		       a5 a5		      lda	playfield+1
  11065  83af		       85 9d		      sta	temp2
  11066  83b1		       a5 a4		      lda	playfield
  11067  83b3		       85 9c		      sta	temp1
  11068  83b5		       a2 00		      ldx	#0
  11069  83b7				   up2
  11070  83b7		       b5 a8		      lda	playfield+4,x
  11071  83b9				  -	      ifconst	superchip
  11072  83b9				  -	      sta	playfield-128,x
  11073  83b9				  -	      lda	playfield+5,x
  11074  83b9				  -	      sta	playfield-127,x
  11075  83b9				  -	      lda	playfield+6,x
  11076  83b9				  -	      sta	playfield-126,x
  11077  83b9				  -	      lda	playfield+7,x
  11078  83b9				  -	      sta	playfield-125,x
  11079  83b9					      else
  11080  83b9		       95 a4		      sta	playfield,x
  11081  83bb		       b5 a9		      lda	playfield+5,x
  11082  83bd		       95 a5		      sta	playfield+1,x
  11083  83bf		       b5 aa		      lda	playfield+6,x
  11084  83c1		       95 a6		      sta	playfield+2,x
  11085  83c3		       b5 ab		      lda	playfield+7,x
  11086  83c5		       95 a7		      sta	playfield+3,x
  11087  83c7					      endif
  11088  83c7		       8a		      txa
  11089  83c8		       cb fc		      sbx	#252
  11090  83ca				  -	      ifconst	pfres
  11091  83ca				  -	      cpx	#(pfres-1)*4
  11092  83ca					      else
  11093  83ca		       e0 2c		      cpx	#44
  11094  83cc					      endif
  11095  83cc		       d0 e9		      bne	up2
  11096  83ce
  11097  83ce		       a5 9f		      lda	temp4
  11098  83d0
  11099  83d0				  -	      ifconst	superchip
  11100  83d0				  -	      ifconst	pfres
  11101  83d0				  -	      sta	playfield+pfres*4-129
  11102  83d0				  -	      lda	temp3
  11103  83d0				  -	      sta	playfield+pfres*4-130
  11104  83d0				  -	      lda	temp2
  11105  83d0				  -	      sta	playfield+pfres*4-131
  11106  83d0				  -	      lda	temp1
  11107  83d0				  -	      sta	playfield+pfres*4-132
  11108  83d0				  -	      else
  11109  83d0				  -	      sta	playfield+47-128
  11110  83d0				  -	      lda	temp3
  11111  83d0				  -	      sta	playfield+46-128
  11112  83d0				  -	      lda	temp2
  11113  83d0				  -	      sta	playfield+45-128
  11114  83d0				  -	      lda	temp1
  11115  83d0				  -	      sta	playfield+44-128
  11116  83d0				  -	      endif
  11117  83d0					      else
  11118  83d0				  -	      ifconst	pfres
  11119  83d0				  -	      sta	playfield+pfres*4-1
  11120  83d0				  -	      lda	temp3
  11121  83d0				  -	      sta	playfield+pfres*4-2
  11122  83d0				  -	      lda	temp2
  11123  83d0				  -	      sta	playfield+pfres*4-3
  11124  83d0				  -	      lda	temp1
  11125  83d0				  -	      sta	playfield+pfres*4-4
  11126  83d0					      else
  11127  83d0		       85 d3		      sta	playfield+47
  11128  83d2		       a5 9e		      lda	temp3
  11129  83d4		       85 d2		      sta	playfield+46
  11130  83d6		       a5 9d		      lda	temp2
  11131  83d8		       85 d1		      sta	playfield+45
  11132  83da		       a5 9c		      lda	temp1
  11133  83dc		       85 d0		      sta	playfield+44
  11134  83de					      endif
  11135  83de					      endif
  11136  83de				   noshiftdown2
      0  83de					      RETURN
      1  83de				  -	      ifnconst	bankswitch
      2  83de				  -	      rts
      3  83de					      else
      4  83de		       4c dd ff 	      jmp	BS_return
      5  83e1					      endif
  11138  83e1
  11139  83e1
  11140  83e1				   notup
  11141  83e1							;down
  11142  83e1		       4a		      lsr
  11143  83e2		       b0 02		      bcs	oneincup
  11144  83e4		       e6 ef		      inc	playfieldpos
  11145  83e6				   oneincup
  11146  83e6		       e6 ef		      inc	playfieldpos
  11147  83e8		       a5 ef		      lda	playfieldpos
  11148  83ea
  11149  83ea				  -	      ifconst	pfrowheight
  11150  83ea				  -	      cmp	#pfrowheight+1
  11151  83ea					      else
  11152  83ea					      ifnconst	pfres
  11153  83ea		       c9 09		      cmp	#9
  11154  83ec				  -	      else
  11155  83ec				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
  11156  83ec					      endif
  11157  83ec					      endif
  11158  83ec
  11159  83ec		       90 3b		      bcc	noshiftdown
  11160  83ee		       a9 01		      lda	#1
  11161  83f0		       85 ef		      sta	playfieldpos
  11162  83f2
  11163  83f2				  -	      ifconst	pfres
  11164  83f2				  -	      lda	playfield+pfres*4-1
  11165  83f2				  -	      sta	temp4
  11166  83f2				  -	      lda	playfield+pfres*4-2
  11167  83f2				  -	      sta	temp3
  11168  83f2				  -	      lda	playfield+pfres*4-3
  11169  83f2				  -	      sta	temp2
  11170  83f2				  -	      lda	playfield+pfres*4-4
  11171  83f2					      else
  11172  83f2		       a5 d3		      lda	playfield+47
  11173  83f4		       85 9f		      sta	temp4
  11174  83f6		       a5 d2		      lda	playfield+46
  11175  83f8		       85 9e		      sta	temp3
  11176  83fa		       a5 d1		      lda	playfield+45
  11177  83fc		       85 9d		      sta	temp2
  11178  83fe		       a5 d0		      lda	playfield+44
  11179  8400					      endif
  11180  8400
  11181  8400		       85 9c		      sta	temp1
  11182  8402
  11183  8402				  -	      ifconst	pfres
  11184  8402				  -	      ldx	#(pfres-1)*4
  11185  8402					      else
  11186  8402		       a2 2c		      ldx	#44
  11187  8404					      endif
  11188  8404				   down2
  11189  8404		       b5 a3		      lda	playfield-1,x
  11190  8406				  -	      ifconst	superchip
  11191  8406				  -	      sta	playfield-125,x
  11192  8406				  -	      lda	playfield-2,x
  11193  8406				  -	      sta	playfield-126,x
  11194  8406				  -	      lda	playfield-3,x
  11195  8406				  -	      sta	playfield-127,x
  11196  8406				  -	      lda	playfield-4,x
  11197  8406				  -	      sta	playfield-128,x
  11198  8406					      else
  11199  8406		       95 a7		      sta	playfield+3,x
  11200  8408		       b5 a2		      lda	playfield-2,x
  11201  840a		       95 a6		      sta	playfield+2,x
  11202  840c		       b5 a1		      lda	playfield-3,x
  11203  840e		       95 a5		      sta	playfield+1,x
  11204  8410		       b5 a0		      lda	playfield-4,x
  11205  8412		       95 a4		      sta	playfield,x
  11206  8414					      endif
  11207  8414		       8a		      txa
  11208  8415		       cb 04		      sbx	#4
  11209  8417		       d0 eb		      bne	down2
  11210  8419
  11211  8419		       a5 9f		      lda	temp4
  11212  841b				  -	      ifconst	superchip
  11213  841b				  -	      sta	playfield-125
  11214  841b				  -	      lda	temp3
  11215  841b				  -	      sta	playfield-126
  11216  841b				  -	      lda	temp2
  11217  841b				  -	      sta	playfield-127
  11218  841b				  -	      lda	temp1
  11219  841b				  -	      sta	playfield-128
  11220  841b					      else
  11221  841b		       85 a7		      sta	playfield+3
  11222  841d		       a5 9e		      lda	temp3
  11223  841f		       85 a6		      sta	playfield+2
  11224  8421		       a5 9d		      lda	temp2
  11225  8423		       85 a5		      sta	playfield+1
  11226  8425		       a5 9c		      lda	temp1
  11227  8427		       85 a4		      sta	playfield
  11228  8429					      endif
  11229  8429				   noshiftdown
      0  8429					      RETURN
      1  8429				  -	      ifnconst	bankswitch
      2  8429				  -	      rts
      3  8429					      else
      4  8429		       4c dd ff 	      jmp	BS_return
      5  842c					      endif
  11231  842c							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11232  842c
  11233  842c							;standard routines needed for pretty much all games
  11234  842c							; just the random number generator is left - maybe we should remove this asm file altogether?
  11235  842c							; repositioning code and score pointer setup moved to overscan
  11236  842c							; read switches, joysticks now compiler generated (more efficient)
  11237  842c
  11238  842c				   randomize
  11239  842c		       a5 a2		      lda	rand
  11240  842e		       4a		      lsr
  11241  842f					      ifconst	rand16
  11242  842f		       26 ed		      rol	rand16
  11243  8431					      endif
  11244  8431		       90 02		      bcc	noeor
  11245  8433		       49 b4		      eor	#$B4
  11246  8435				   noeor
  11247  8435		       85 a2		      sta	rand
  11248  8437					      ifconst	rand16
  11249  8437		       45 ed		      eor	rand16
  11250  8439					      endif
      0  8439					      RETURN
      1  8439				  -	      ifnconst	bankswitch
      2  8439				  -	      rts
      3  8439					      else
      4  8439		       4c dd ff 	      jmp	BS_return
      5  843c					      endif
  11252  843c							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11253  843c
  11254  843c				   drawscreen
  11255  843c				  -	      ifconst	debugscore
  11256  843c				  -	      ldx	#14
  11257  843c				  -	      lda	INTIM	; display # cycles left in the score
  11258  843c				  -
  11259  843c				  -	      ifconst	mincycles
  11260  843c				  -	      lda	mincycles
  11261  843c				  -	      cmp	INTIM
  11262  843c				  -	      lda	mincycles
  11263  843c				  -	      bcc	nochange
  11264  843c				  -	      lda	INTIM
  11265  843c				  -	      sta	mincycles
  11266  843c				  -nochange
  11267  843c				  -	      endif
  11268  843c				  -
  11269  843c				  -			; cmp #$2B
  11270  843c				  -			; bcs no_cycles_left
  11271  843c				  -	      bmi	cycles_left
  11272  843c				  -	      ldx	#64
  11273  843c				  -	      eor	#$ff	;make negative
  11274  843c				  -cycles_left
  11275  843c				  -	      stx	scorecolor
  11276  843c				  -	      and	#$7f	; clear sign bit
  11277  843c				  -	      tax
  11278  843c				  -	      lda	scorebcd,x
  11279  843c				  -	      sta	score+2
  11280  843c				  -	      lda	scorebcd1,x
  11281  843c				  -	      sta	score+1
  11282  843c				  -	      jmp	done_debugscore
  11283  843c				  -scorebcd
  11284  843c				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
  11285  843c				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
  11286  843c				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
  11287  843c				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
  11288  843c				  -scorebcd1
  11289  843c				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
  11290  843c				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
  11291  843c				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
  11292  843c				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
  11293  843c				  -done_debugscore
  11294  843c					      endif
  11295  843c
  11296  843c				  -	      ifconst	debugcycles
  11297  843c				  -	      lda	INTIM	; if we go over, it mucks up the background color
  11298  843c				  -			; cmp #$2B
  11299  843c				  -			; BCC overscan
  11300  843c				  -	      bmi	overscan
  11301  843c				  -	      sta	COLUBK
  11302  843c				  -	      bcs	doneoverscan
  11303  843c					      endif
  11304  843c
  11305  843c				   overscan
  11306  843c				  -	      ifconst	interlaced
  11307  843c				  -	      PHP
  11308  843c				  -	      PLA
  11309  843c				  -	      EOR	#4	; flip interrupt bit
  11310  843c				  -	      PHA
  11311  843c				  -	      PLP
  11312  843c				  -	      AND	#4	; isolate the interrupt bit
  11313  843c				  -	      TAX		; save it for later
  11314  843c					      endif
  11315  843c
  11316  843c				   overscanloop
  11317  843c		       ad 84 02 	      lda	INTIM	;wait for sync
  11318  843f		       30 fb		      bmi	overscanloop
  11319  8441				   doneoverscan
  11320  8441
  11321  8441							;do VSYNC
  11322  8441
  11323  8441				  -	      ifconst	interlaced
  11324  8441				  -	      CPX	#4
  11325  8441				  -	      BNE	oddframevsync
  11326  8441					      endif
  11327  8441
  11328  8441		       a9 02		      lda	#2
  11329  8443		       85 02		      sta	WSYNC
  11330  8445		       85 00		      sta	VSYNC
  11331  8447		       85 02		      STA	WSYNC
  11332  8449		       85 02		      STA	WSYNC
  11333  844b		       4a		      lsr
  11334  844c		       85 02		      STA	WSYNC
  11335  844e		       85 00		      STA	VSYNC
  11336  8450		       85 01		      sta	VBLANK
  11337  8452				  -	      ifnconst	overscan_time
  11338  8452				  -	      lda	#37+128
  11339  8452					      else
  11340  8452		       a9 a5		      lda	#overscan_time+128
  11341  8454					      endif
  11342  8454		       8d 96 02 	      sta	TIM64T
  11343  8457
  11344  8457				  -	      ifconst	interlaced
  11345  8457				  -	      jmp	postsync
  11346  8457				  -
  11347  8457				  -oddframevsync
  11348  8457				  -	      sta	WSYNC
  11349  8457				  -
  11350  8457				  -	      LDA	($80,X)	; 11 waste
  11351  8457				  -	      LDA	($80,X)	; 11 waste
  11352  8457				  -	      LDA	($80,X)	; 11 waste
  11353  8457				  -
  11354  8457				  -	      lda	#2
  11355  8457				  -	      sta	VSYNC
  11356  8457				  -	      sta	WSYNC
  11357  8457				  -	      sta	WSYNC
  11358  8457				  -	      sta	WSYNC
  11359  8457				  -
  11360  8457				  -	      LDA	($80,X)	; 11 waste
  11361  8457				  -	      LDA	($80,X)	; 11 waste
  11362  8457				  -	      LDA	($80,X)	; 11 waste
  11363  8457				  -
  11364  8457				  -	      lda	#0
  11365  8457				  -	      sta	VSYNC
  11366  8457				  -	      sta	VBLANK
  11367  8457				  -	      ifnconst	overscan_time
  11368  8457				  -	      lda	#37+128
  11369  8457				  -	      else
  11370  8457				  -	      lda	#overscan_time+128
  11371  8457				  -	      endif
  11372  8457				  -	      sta	TIM64T
  11373  8457				  -
  11374  8457				  -postsync
  11375  8457					      endif
  11376  8457
  11377  8457				  -	      ifconst	legacy
  11378  8457				  -	      if	legacy < 100
  11379  8457				  -	      ldx	#4
  11380  8457				  -adjustloop
  11381  8457				  -	      lda	player0x,x
  11382  8457				  -	      sec
  11383  8457				  -	      sbc	#14	;?
  11384  8457				  -	      sta	player0x,x
  11385  8457				  -	      dex
  11386  8457				  -	      bpl	adjustloop
  11387  8457				  -	      endif
  11388  8457					      endif
  11389  8457				  -	      if	((<*)>$e9)&&((<*)<$fa)
  11390  8457				  -	      repeat	($fa-(<*))
  11391  8457				  -	      nop
  11392  8457				  -	      repend
  11393  8457					      endif
  11394  8457		       85 02		      sta	WSYNC
  11395  8459		       a2 04		      ldx	#4
      0  845b					      SLEEP	3
      1  845b				   .CYCLES    SET	3
      2  845b
      3  845b				  -	      IF	.CYCLES < 2
      4  845b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  845b				  -	      ERR
      6  845b					      ENDIF
      7  845b
      8  845b					      IF	.CYCLES & 1
      9  845b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  845b		       04 00		      nop	0
     11  845d				  -	      ELSE
     12  845d				  -	      bit	VSYNC
     13  845d					      ENDIF
     14  845d				   .CYCLES    SET	.CYCLES - 3
     15  845d					      ENDIF
     16  845d
     17  845d				  -	      REPEAT	.CYCLES / 2
     18  845d				  -	      nop
     19  845d					      REPEND
  11397  845d				   HorPosLoop		; 5
  11398  845d		       b5 80		      lda	player0x,X	;+4 9
  11399  845f		       38		      sec		;+2 11
  11400  8460				   DivideLoop
  11401  8460		       e9 0f		      sbc	#15
  11402  8462		       b0 fc		      bcs	DivideLoop	;+4 15
  11403  8464		       95 9c		      sta	temp1,X	;+4 19
  11404  8466		       95 10		      sta	RESP0,X	;+4 23
  11405  8468		       85 02		      sta	WSYNC
  11406  846a		       ca		      dex
  11407  846b		       10 f0		      bpl	HorPosLoop	;+5 5
  11408  846d							; 4
  11409  846d
  11410  846d		       a2 04		      ldx	#4
  11411  846f		       b4 9c		      ldy	temp1,X
  11412  8471		       b9 cd f3 	      lda	repostable-256,Y
  11413  8474		       95 20		      sta	HMP0,X	;+14 18
  11414  8476
  11415  8476		       ca		      dex
  11416  8477		       b4 9c		      ldy	temp1,X
  11417  8479		       b9 cd f3 	      lda	repostable-256,Y
  11418  847c		       95 20		      sta	HMP0,X	;+14 32
  11419  847e
  11420  847e		       ca		      dex
  11421  847f		       b4 9c		      ldy	temp1,X
  11422  8481		       b9 cd f3 	      lda	repostable-256,Y
  11423  8484		       95 20		      sta	HMP0,X	;+14 46
  11424  8486
  11425  8486		       ca		      dex
  11426  8487		       b4 9c		      ldy	temp1,X
  11427  8489		       b9 cd f3 	      lda	repostable-256,Y
  11428  848c		       95 20		      sta	HMP0,X	;+14 60
  11429  848e
  11430  848e		       ca		      dex
  11431  848f		       b4 9c		      ldy	temp1,X
  11432  8491		       b9 cd f3 	      lda	repostable-256,Y
  11433  8494		       95 20		      sta	HMP0,X	;+14 74
  11434  8496
  11435  8496		       85 02		      sta	WSYNC
  11436  8498
  11437  8498		       85 2a		      sta	HMOVE	;+3 3
  11438  849a
  11439  849a
  11440  849a				  -	      ifconst	legacy
  11441  849a				  -	      if	legacy < 100
  11442  849a				  -	      ldx	#4
  11443  849a				  -adjustloop2
  11444  849a				  -	      lda	player0x,x
  11445  849a				  -	      clc
  11446  849a				  -	      adc	#14	;?
  11447  849a				  -	      sta	player0x,x
  11448  849a				  -	      dex
  11449  849a				  -	      bpl	adjustloop2
  11450  849a				  -	      endif
  11451  849a					      endif
  11452  849a
  11453  849a
  11454  849a
  11455  849a
  11456  849a							;set score pointers
  11457  849a		       a7 95		      lax	score+2
  11458  849c		       20 cd f4 	      jsr	scorepointerset
  11459  849f		       84 9b		      sty	scorepointers+5
  11460  84a1		       86 98		      stx	scorepointers+2
  11461  84a3		       a7 94		      lax	score+1
  11462  84a5		       20 cd f4 	      jsr	scorepointerset
  11463  84a8		       84 9a		      sty	scorepointers+4
  11464  84aa		       86 97		      stx	scorepointers+1
  11465  84ac		       a7 93		      lax	score
  11466  84ae		       20 cd f4 	      jsr	scorepointerset
  11467  84b1		       84 99		      sty	scorepointers+3
  11468  84b3		       86 96		      stx	scorepointers
  11469  84b5
  11470  84b5				   vblk
  11471  84b5							; run possible vblank bB code
  11472  84b5				  -	      ifconst	vblank_bB_code
  11473  84b5				  -	      jsr	vblank_bB_code
  11474  84b5					      endif
  11475  84b5				   vblk2
  11476  84b5		       ad 84 02 	      LDA	INTIM
  11477  84b8		       30 fb		      bmi	vblk2
  11478  84ba		       4c 00 f0 	      jmp	kernel
  11479  84bd
  11480  84bd
  11481  84bd		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
  11482  84c6		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
  11483  84cd				   repostable
  11484  84cd
  11485  84cd				   scorepointerset
  11486  84cd		       29 0f		      and	#$0F
  11487  84cf		       0a		      asl
  11488  84d0		       0a		      asl
  11489  84d1		       0a		      asl
  11490  84d2		       69 74		      adc	#<scoretable
  11491  84d4		       a8		      tay
  11492  84d5		       8a		      txa
  11493  84d6							; and #$F0
  11494  84d6							; lsr
  11495  84d6		       4b f0		      asr	#$F0
  11496  84d8		       69 74		      adc	#<scoretable
  11497  84da		       aa		      tax
  11498  84db		       60		      rts
  11499  84dc							;bB.asm
  11500  84dc							; bB.asm file is split here
  11501  84dc				  -	      ifconst	pfres
  11502  84dc				  -	      if	(<*) > (254-pfres*pfwidth)
  11503  84dc				  -	      align	256
  11504  84dc				  -	      endif
  11505  84dc				  -	      if	(<*) < (136-pfres*pfwidth)
  11506  84dc				  -	      repeat	((136-pfres*pfwidth)-(<*))
  11507  84dc				  -	      .byte	0
  11508  84dc				  -	      repend
  11509  84dc				  -	      endif
  11510  84dc					      else
  11511  84dc					      if	(<*) > 206
  11512  8500		       00 00 00 00*	      align	256
  11513  8500					      endif
  11514  8500					      if	(<*) < 88
  11515  8500					      repeat	(88-(<*))
  11516  8500		       00		      .byte.b	0
  11515  8500					      repend
  11516  8501		       00		      .byte.b	0
  11515  8501					      repend
  11516  8502		       00		      .byte.b	0
  11515  8502					      repend
  11516  8503		       00		      .byte.b	0
  11515  8503					      repend
  11516  8504		       00		      .byte.b	0
  11515  8504					      repend
  11516  8505		       00		      .byte.b	0
  11515  8505					      repend
  11516  8506		       00		      .byte.b	0
  11515  8506					      repend
  11516  8507		       00		      .byte.b	0
  11515  8507					      repend
  11516  8508		       00		      .byte.b	0
  11515  8508					      repend
  11516  8509		       00		      .byte.b	0
  11515  8509					      repend
  11516  850a		       00		      .byte.b	0
  11515  850a					      repend
  11516  850b		       00		      .byte.b	0
  11515  850b					      repend
  11516  850c		       00		      .byte.b	0
  11515  850c					      repend
  11516  850d		       00		      .byte.b	0
  11515  850d					      repend
  11516  850e		       00		      .byte.b	0
  11515  850e					      repend
  11516  850f		       00		      .byte.b	0
  11515  850f					      repend
  11516  8510		       00		      .byte.b	0
  11515  8510					      repend
  11516  8511		       00		      .byte.b	0
  11515  8511					      repend
  11516  8512		       00		      .byte.b	0
  11515  8512					      repend
  11516  8513		       00		      .byte.b	0
  11515  8513					      repend
  11516  8514		       00		      .byte.b	0
  11515  8514					      repend
  11516  8515		       00		      .byte.b	0
  11515  8515					      repend
  11516  8516		       00		      .byte.b	0
  11515  8516					      repend
  11516  8517		       00		      .byte.b	0
  11515  8517					      repend
  11516  8518		       00		      .byte.b	0
  11515  8518					      repend
  11516  8519		       00		      .byte.b	0
  11515  8519					      repend
  11516  851a		       00		      .byte.b	0
  11515  851a					      repend
  11516  851b		       00		      .byte.b	0
  11515  851b					      repend
  11516  851c		       00		      .byte.b	0
  11515  851c					      repend
  11516  851d		       00		      .byte.b	0
  11515  851d					      repend
  11516  851e		       00		      .byte.b	0
  11515  851e					      repend
  11516  851f		       00		      .byte.b	0
  11515  851f					      repend
  11516  8520		       00		      .byte.b	0
  11515  8520					      repend
  11516  8521		       00		      .byte.b	0
  11515  8521					      repend
  11516  8522		       00		      .byte.b	0
  11515  8522					      repend
  11516  8523		       00		      .byte.b	0
  11515  8523					      repend
  11516  8524		       00		      .byte.b	0
  11515  8524					      repend
  11516  8525		       00		      .byte.b	0
  11515  8525					      repend
  11516  8526		       00		      .byte.b	0
  11515  8526					      repend
  11516  8527		       00		      .byte.b	0
  11515  8527					      repend
  11516  8528		       00		      .byte.b	0
  11515  8528					      repend
  11516  8529		       00		      .byte.b	0
  11515  8529					      repend
  11516  852a		       00		      .byte.b	0
  11515  852a					      repend
  11516  852b		       00		      .byte.b	0
  11515  852b					      repend
  11516  852c		       00		      .byte.b	0
  11515  852c					      repend
  11516  852d		       00		      .byte.b	0
  11515  852d					      repend
  11516  852e		       00		      .byte.b	0
  11515  852e					      repend
  11516  852f		       00		      .byte.b	0
  11515  852f					      repend
  11516  8530		       00		      .byte.b	0
  11515  8530					      repend
  11516  8531		       00		      .byte.b	0
  11515  8531					      repend
  11516  8532		       00		      .byte.b	0
  11515  8532					      repend
  11516  8533		       00		      .byte.b	0
  11515  8533					      repend
  11516  8534		       00		      .byte.b	0
  11515  8534					      repend
  11516  8535		       00		      .byte.b	0
  11515  8535					      repend
  11516  8536		       00		      .byte.b	0
  11515  8536					      repend
  11516  8537		       00		      .byte.b	0
  11515  8537					      repend
  11516  8538		       00		      .byte.b	0
  11515  8538					      repend
  11516  8539		       00		      .byte.b	0
  11515  8539					      repend
  11516  853a		       00		      .byte.b	0
  11515  853a					      repend
  11516  853b		       00		      .byte.b	0
  11515  853b					      repend
  11516  853c		       00		      .byte.b	0
  11515  853c					      repend
  11516  853d		       00		      .byte.b	0
  11515  853d					      repend
  11516  853e		       00		      .byte.b	0
  11515  853e					      repend
  11516  853f		       00		      .byte.b	0
  11515  853f					      repend
  11516  8540		       00		      .byte.b	0
  11515  8540					      repend
  11516  8541		       00		      .byte.b	0
  11515  8541					      repend
  11516  8542		       00		      .byte.b	0
  11515  8542					      repend
  11516  8543		       00		      .byte.b	0
  11515  8543					      repend
  11516  8544		       00		      .byte.b	0
  11515  8544					      repend
  11516  8545		       00		      .byte.b	0
  11515  8545					      repend
  11516  8546		       00		      .byte.b	0
  11515  8546					      repend
  11516  8547		       00		      .byte.b	0
  11515  8547					      repend
  11516  8548		       00		      .byte.b	0
  11515  8548					      repend
  11516  8549		       00		      .byte.b	0
  11515  8549					      repend
  11516  854a		       00		      .byte.b	0
  11515  854a					      repend
  11516  854b		       00		      .byte.b	0
  11515  854b					      repend
  11516  854c		       00		      .byte.b	0
  11515  854c					      repend
  11516  854d		       00		      .byte.b	0
  11515  854d					      repend
  11516  854e		       00		      .byte.b	0
  11515  854e					      repend
  11516  854f		       00		      .byte.b	0
  11515  854f					      repend
  11516  8550		       00		      .byte.b	0
  11515  8550					      repend
  11516  8551		       00		      .byte.b	0
  11515  8551					      repend
  11516  8552		       00		      .byte.b	0
  11515  8552					      repend
  11516  8553		       00		      .byte.b	0
  11515  8553					      repend
  11516  8554		       00		      .byte.b	0
  11515  8554					      repend
  11516  8555		       00		      .byte.b	0
  11515  8555					      repend
  11516  8556		       00		      .byte.b	0
  11515  8556					      repend
  11516  8557		       00		      .byte.b	0
  11517  8558					      repend
  11518  8558					      endif
  11519  8558					      endif
  11520  8558				   pfcolorlabel13
  11521  8558		       04 04 0c 0a	      .byte.b	$04, $04, $0C, $0A
  11522  855c		       06 06 0c 0a	      .byte.b	$06, $06, $0C, $0A
  11523  8560		       08 08 0c 0a	      .byte.b	$08, $08, $0C, $0A
  11524  8564		       0a 0a 0c 0a	      .byte.b	$0A, $0A, $0C, $0A
  11525  8568		       0c 0c 0c 0a	      .byte.b	$0C, $0C, $0C, $0A
  11526  856c		       0e 0e 0c 0a	      .byte.b	$0E, $0E, $0C, $0A
  11527  8570		       0c 0c 0c 0a	      .byte.b	$0C, $0C, $0C, $0A
  11528  8574		       0a 0a 0c 0a	      .byte.b	$0A, $0A, $0C, $0A
  11529  8578		       08 08 0c 0a	      .byte.b	$08, $08, $0C, $0A
  11530  857c		       06 06 0c 0a	      .byte.b	$06, $06, $0C, $0A
  11531  8580		       04 04 0c 0a	      .byte.b	$04, $04, $0C, $0A
  11532  8584		       00 04 0c 00	      .byte.b	$00, $04, $0C,0
  11533  8588				  -	      if	(<*) > (<(*+22))
  11534  8588				  -	      repeat	($100-<*)
  11535  8588				  -	      .byte	0
  11536  8588				  -	      repend
  11537  8588					      endif
  11538  8588				   playercolorL0103_1
  11539  8588		       00		      .byte.b	$00
  11540  8589		       0e		      .byte.b	$0e
  11541  858a		       00		      .byte.b	$00
  11542  858b		       0e		      .byte.b	$0e
  11543  858c		       00		      .byte.b	$00
  11544  858d		       0e		      .byte.b	$0e
  11545  858e		       00		      .byte.b	$00
  11546  858f		       00		      .byte.b	$00
  11547  8590		       00		      .byte.b	$00
  11548  8591		       00		      .byte.b	$00
  11549  8592		       00		      .byte.b	$00
  11550  8593		       0e		      .byte.b	$0e
  11551  8594		       00		      .byte.b	$00
  11552  8595		       0e		      .byte.b	$0e
  11553  8596		       00		      .byte.b	$00
  11554  8597		       00		      .byte.b	$00
  11555  8598		       0e		      .byte.b	$0e
  11556  8599		       0e		      .byte.b	$0e
  11557  859a		       0e		      .byte.b	$0e
  11558  859b		       0e		      .byte.b	$0e
  11559  859c		       0e		      .byte.b	$0e
  11560  859d		       0e		      .byte.b	$0e
  11561  859e		       0e		      .byte.b	$0e
  11562  859f				  -	      if	(<*) > (<(*+22))
  11563  859f				  -	      repeat	($100-<*)
  11564  859f				  -	      .byte	0
  11565  859f				  -	      repend
  11566  859f					      endif
  11567  859f				   playerL0104_1
  11568  859f		       42		      .byte.b	%01000010
  11569  85a0		       42		      .byte.b	%01000010
  11570  85a1		       42		      .byte.b	%01000010
  11571  85a2		       42		      .byte.b	%01000010
  11572  85a3		       42		      .byte.b	%01000010
  11573  85a4		       42		      .byte.b	%01000010
  11574  85a5		       42		      .byte.b	%01000010
  11575  85a6		       42		      .byte.b	%01000010
  11576  85a7		       24		      .byte.b	%00100100
  11577  85a8		       99		      .byte.b	%10011001
  11578  85a9		       99		      .byte.b	%10011001
  11579  85aa		       99		      .byte.b	%10011001
  11580  85ab		       99		      .byte.b	%10011001
  11581  85ac		       99		      .byte.b	%10011001
  11582  85ad		       5a		      .byte.b	%01011010
  11583  85ae		       3c		      .byte.b	%00111100
  11584  85af		       18		      .byte.b	%00011000
  11585  85b0		       3c		      .byte.b	%00111100
  11586  85b1		       66		      .byte.b	%01100110
  11587  85b2		       66		      .byte.b	%01100110
  11588  85b3		       5a		      .byte.b	%01011010
  11589  85b4		       18		      .byte.b	%00011000
  11590  85b5		       7e		      .byte.b	%01111110
  11591  85b6				  -	      if	(<*) > (<(*+19))
  11592  85b6				  -	      repeat	($100-<*)
  11593  85b6				  -	      .byte	0
  11594  85b6				  -	      repend
  11595  85b6					      endif
  11596  85b6				   playercolorL0105_0
  11597  85b6		       34		      .byte.b	$34
  11598  85b7		       54		      .byte.b	$54
  11599  85b8		       54		      .byte.b	$54
  11600  85b9		       54		      .byte.b	$54
  11601  85ba		       54		      .byte.b	$54
  11602  85bb		       54		      .byte.b	$54
  11603  85bc		       54		      .byte.b	$54
  11604  85bd		       54		      .byte.b	$54
  11605  85be		       54		      .byte.b	$54
  11606  85bf		       54		      .byte.b	$54
  11607  85c0		       54		      .byte.b	$54
  11608  85c1		       54		      .byte.b	$54
  11609  85c2		       1c		      .byte.b	$1c
  11610  85c3		       54		      .byte.b	$54
  11611  85c4		       54		      .byte.b	$54
  11612  85c5		       54		      .byte.b	$54
  11613  85c6		       54		      .byte.b	$54
  11614  85c7		       54		      .byte.b	$54
  11615  85c8		       54		      .byte.b	$54
  11616  85c9		       54		      .byte.b	$54
  11617  85ca				  -	      if	(<*) > (<(*+19))
  11618  85ca				  -	      repeat	($100-<*)
  11619  85ca				  -	      .byte	0
  11620  85ca				  -	      repend
  11621  85ca					      endif
  11622  85ca				   playerL0273_0
  11623  85ca		       07		      .byte.b	%00000111
  11624  85cb		       e4		      .byte.b	%11100100
  11625  85cc		       24		      .byte.b	%00100100
  11626  85cd		       24		      .byte.b	%00100100
  11627  85ce		       24		      .byte.b	%00100100
  11628  85cf		       24		      .byte.b	%00100100
  11629  85d0		       bc		      .byte.b	%10111100
  11630  85d1		       3c		      .byte.b	%00111100
  11631  85d2		       7e		      .byte.b	%01111110
  11632  85d3		       bd		      .byte.b	%10111101
  11633  85d4		       bd		      .byte.b	%10111101
  11634  85d5		       bd		      .byte.b	%10111101
  11635  85d6		       ff		      .byte.b	%11111111
  11636  85d7		       7e		      .byte.b	%01111110
  11637  85d8		       3c		      .byte.b	%00111100
  11638  85d9		       42		      .byte.b	%01000010
  11639  85da		       5a		      .byte.b	%01011010
  11640  85db		       7e		      .byte.b	%01111110
  11641  85dc		       5a		      .byte.b	%01011010
  11642  85dd		       3c		      .byte.b	%00111100
  11643  85de				  -	      if	(<*) > (<(*+19))
  11644  85de				  -	      repeat	($100-<*)
  11645  85de				  -	      .byte	0
  11646  85de				  -	      repend
  11647  85de					      endif
  11648  85de				   playerL0275_0
  11649  85de		       07		      .byte.b	%00000111
  11650  85df		       e4		      .byte.b	%11100100
  11651  85e0		       24		      .byte.b	%00100100
  11652  85e1		       24		      .byte.b	%00100100
  11653  85e2		       24		      .byte.b	%00100100
  11654  85e3		       24		      .byte.b	%00100100
  11655  85e4		       bc		      .byte.b	%10111100
  11656  85e5		       3c		      .byte.b	%00111100
  11657  85e6		       7e		      .byte.b	%01111110
  11658  85e7		       bd		      .byte.b	%10111101
  11659  85e8		       bd		      .byte.b	%10111101
  11660  85e9		       bd		      .byte.b	%10111101
  11661  85ea		       ff		      .byte.b	%11111111
  11662  85eb		       7e		      .byte.b	%01111110
  11663  85ec		       3c		      .byte.b	%00111100
  11664  85ed		       42		      .byte.b	%01000010
  11665  85ee		       5a		      .byte.b	%01011010
  11666  85ef		       7e		      .byte.b	%01111110
  11667  85f0		       5a		      .byte.b	%01011010
  11668  85f1		       3c		      .byte.b	%00111100
  11669  85f2					      if	(<*) > (<(*+19))
  11670  85f2					      repeat	($100-<*)
  11671  85f2		       00		      .byte.b	0
  11670  85f2					      repend
  11671  85f3		       00		      .byte.b	0
  11670  85f3					      repend
  11671  85f4		       00		      .byte.b	0
  11670  85f4					      repend
  11671  85f5		       00		      .byte.b	0
  11670  85f5					      repend
  11671  85f6		       00		      .byte.b	0
  11670  85f6					      repend
  11671  85f7		       00		      .byte.b	0
  11670  85f7					      repend
  11671  85f8		       00		      .byte.b	0
  11670  85f8					      repend
  11671  85f9		       00		      .byte.b	0
  11670  85f9					      repend
  11671  85fa		       00		      .byte.b	0
  11670  85fa					      repend
  11671  85fb		       00		      .byte.b	0
  11670  85fb					      repend
  11671  85fc		       00		      .byte.b	0
  11670  85fc					      repend
  11671  85fd		       00		      .byte.b	0
  11670  85fd					      repend
  11671  85fe		       00		      .byte.b	0
  11670  85fe					      repend
  11671  85ff		       00		      .byte.b	0
  11672  8600					      repend
  11673  8600					      endif
  11674  8600				   playerL0278_0
  11675  8600		       07		      .byte.b	%00000111
  11676  8601		       e4		      .byte.b	%11100100
  11677  8602		       24		      .byte.b	%00100100
  11678  8603		       24		      .byte.b	%00100100
  11679  8604		       24		      .byte.b	%00100100
  11680  8605		       24		      .byte.b	%00100100
  11681  8606		       bc		      .byte.b	%10111100
  11682  8607		       3c		      .byte.b	%00111100
  11683  8608		       7e		      .byte.b	%01111110
  11684  8609		       bd		      .byte.b	%10111101
  11685  860a		       bd		      .byte.b	%10111101
  11686  860b		       bd		      .byte.b	%10111101
  11687  860c		       ff		      .byte.b	%11111111
  11688  860d		       7e		      .byte.b	%01111110
  11689  860e		       3c		      .byte.b	%00111100
  11690  860f		       42		      .byte.b	%01000010
  11691  8610		       5a		      .byte.b	%01011010
  11692  8611		       7e		      .byte.b	%01111110
  11693  8612		       5a		      .byte.b	%01011010
  11694  8613		       3c		      .byte.b	%00111100
  11695  8614				  -	      if	(<*) > (<(*+19))
  11696  8614				  -	      repeat	($100-<*)
  11697  8614				  -	      .byte	0
  11698  8614				  -	      repend
  11699  8614					      endif
  11700  8614				   playerL0281_0
  11701  8614		       07		      .byte.b	%00000111
  11702  8615		       e4		      .byte.b	%11100100
  11703  8616		       24		      .byte.b	%00100100
  11704  8617		       24		      .byte.b	%00100100
  11705  8618		       24		      .byte.b	%00100100
  11706  8619		       24		      .byte.b	%00100100
  11707  861a		       bc		      .byte.b	%10111100
  11708  861b		       3c		      .byte.b	%00111100
  11709  861c		       7e		      .byte.b	%01111110
  11710  861d		       bd		      .byte.b	%10111101
  11711  861e		       bd		      .byte.b	%10111101
  11712  861f		       bd		      .byte.b	%10111101
  11713  8620		       ff		      .byte.b	%11111111
  11714  8621		       7e		      .byte.b	%01111110
  11715  8622		       3c		      .byte.b	%00111100
  11716  8623		       42		      .byte.b	%01000010
  11717  8624		       5a		      .byte.b	%01011010
  11718  8625		       7e		      .byte.b	%01111110
  11719  8626		       5a		      .byte.b	%01011010
  11720  8627		       3c		      .byte.b	%00111100
  11721  8628				  -	      ifconst	pfres
  11722  8628				  -	      if	(<*) > (254-pfres*pfwidth)
  11723  8628				  -	      align	256
  11724  8628				  -	      endif
  11725  8628				  -	      if	(<*) < (136-pfres*pfwidth)
  11726  8628				  -	      repeat	((136-pfres*pfwidth)-(<*))
  11727  8628				  -	      .byte	0
  11728  8628				  -	      repend
  11729  8628				  -	      endif
  11730  8628					      else
  11731  8628				  -	      if	(<*) > 206
  11732  8628				  -	      align	256
  11733  8628					      endif
  11734  8628					      if	(<*) < 88
  11735  8628					      repeat	(88-(<*))
  11736  8628		       00		      .byte.b	0
  11735  8628					      repend
  11736  8629		       00		      .byte.b	0
  11735  8629					      repend
  11736  862a		       00		      .byte.b	0
  11735  862a					      repend
  11736  862b		       00		      .byte.b	0
  11735  862b					      repend
  11736  862c		       00		      .byte.b	0
  11735  862c					      repend
  11736  862d		       00		      .byte.b	0
  11735  862d					      repend
  11736  862e		       00		      .byte.b	0
  11735  862e					      repend
  11736  862f		       00		      .byte.b	0
  11735  862f					      repend
  11736  8630		       00		      .byte.b	0
  11735  8630					      repend
  11736  8631		       00		      .byte.b	0
  11735  8631					      repend
  11736  8632		       00		      .byte.b	0
  11735  8632					      repend
  11736  8633		       00		      .byte.b	0
  11735  8633					      repend
  11736  8634		       00		      .byte.b	0
  11735  8634					      repend
  11736  8635		       00		      .byte.b	0
  11735  8635					      repend
  11736  8636		       00		      .byte.b	0
  11735  8636					      repend
  11736  8637		       00		      .byte.b	0
  11735  8637					      repend
  11736  8638		       00		      .byte.b	0
  11735  8638					      repend
  11736  8639		       00		      .byte.b	0
  11735  8639					      repend
  11736  863a		       00		      .byte.b	0
  11735  863a					      repend
  11736  863b		       00		      .byte.b	0
  11735  863b					      repend
  11736  863c		       00		      .byte.b	0
  11735  863c					      repend
  11736  863d		       00		      .byte.b	0
  11735  863d					      repend
  11736  863e		       00		      .byte.b	0
  11735  863e					      repend
  11736  863f		       00		      .byte.b	0
  11735  863f					      repend
  11736  8640		       00		      .byte.b	0
  11735  8640					      repend
  11736  8641		       00		      .byte.b	0
  11735  8641					      repend
  11736  8642		       00		      .byte.b	0
  11735  8642					      repend
  11736  8643		       00		      .byte.b	0
  11735  8643					      repend
  11736  8644		       00		      .byte.b	0
  11735  8644					      repend
  11736  8645		       00		      .byte.b	0
  11735  8645					      repend
  11736  8646		       00		      .byte.b	0
  11735  8646					      repend
  11736  8647		       00		      .byte.b	0
  11735  8647					      repend
  11736  8648		       00		      .byte.b	0
  11735  8648					      repend
  11736  8649		       00		      .byte.b	0
  11735  8649					      repend
  11736  864a		       00		      .byte.b	0
  11735  864a					      repend
  11736  864b		       00		      .byte.b	0
  11735  864b					      repend
  11736  864c		       00		      .byte.b	0
  11735  864c					      repend
  11736  864d		       00		      .byte.b	0
  11735  864d					      repend
  11736  864e		       00		      .byte.b	0
  11735  864e					      repend
  11736  864f		       00		      .byte.b	0
  11735  864f					      repend
  11736  8650		       00		      .byte.b	0
  11735  8650					      repend
  11736  8651		       00		      .byte.b	0
  11735  8651					      repend
  11736  8652		       00		      .byte.b	0
  11735  8652					      repend
  11736  8653		       00		      .byte.b	0
  11735  8653					      repend
  11736  8654		       00		      .byte.b	0
  11735  8654					      repend
  11736  8655		       00		      .byte.b	0
  11735  8655					      repend
  11736  8656		       00		      .byte.b	0
  11735  8656					      repend
  11736  8657		       00		      .byte.b	0
  11737  8658					      repend
  11738  8658					      endif
  11739  8658					      endif
  11740  8658				   pfcolorlabel213
  11741  8658		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11742  865c		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11743  8660		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11744  8664		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11745  8668		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11746  866c		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11747  8670		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11748  8674		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11749  8678		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11750  867c		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11751  8680		       3c 3a 6c 6a	      .byte.b	$3C, $3A, $6C, $6A
  11752  8684				  -	      ifconst	pfres
  11753  8684				  -	      if	(<*) > (254-pfres*pfwidth)
  11754  8684				  -	      align	256
  11755  8684				  -	      endif
  11756  8684				  -	      if	(<*) < (136-pfres*pfwidth)
  11757  8684				  -	      repeat	((136-pfres*pfwidth)-(<*))
  11758  8684				  -	      .byte	0
  11759  8684				  -	      repend
  11760  8684				  -	      endif
  11761  8684					      else
  11762  8684				  -	      if	(<*) > 206
  11763  8684				  -	      align	256
  11764  8684					      endif
  11765  8684				  -	      if	(<*) < 88
  11766  8684				  -	      repeat	(88-(<*))
  11767  8684				  -	      .byte	0
  11768  8684				  -	      repend
  11769  8684					      endif
  11770  8684					      endif
  11771  8684				   pfcolorlabel238
  11772  8684		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11773  8688		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11774  868c		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11775  8690		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11776  8694		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11777  8698		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11778  869c		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11779  86a0		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11780  86a4		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11781  86a8		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11782  86ac		       9c 9a cc ca	      .byte.b	$9C, $9A, $CC, $CA
  11783  86b0				  -	      ifconst	pfres
  11784  86b0				  -	      if	(<*) > (254-pfres*pfwidth)
  11785  86b0				  -	      align	256
  11786  86b0				  -	      endif
  11787  86b0				  -	      if	(<*) < (136-pfres*pfwidth)
  11788  86b0				  -	      repeat	((136-pfres*pfwidth)-(<*))
  11789  86b0				  -	      .byte	0
  11790  86b0				  -	      repend
  11791  86b0				  -	      endif
  11792  86b0					      else
  11793  86b0				  -	      if	(<*) > 206
  11794  86b0				  -	      align	256
  11795  86b0					      endif
  11796  86b0				  -	      if	(<*) < 88
  11797  86b0				  -	      repeat	(88-(<*))
  11798  86b0				  -	      .byte	0
  11799  86b0				  -	      repend
  11800  86b0					      endif
  11801  86b0					      endif
  11802  86b0				   pfcolorlabel263
  11803  86b0		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11804  86b4		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11805  86b8		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11806  86bc		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11807  86c0		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11808  86c4		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11809  86c8		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11810  86cc		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11811  86d0		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11812  86d4		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11813  86d8		       fc fa 8c 8a	      .byte.b	$FC, $FA, $8C, $8A
  11814  86dc				  -	      ifconst	pfres
  11815  86dc				  -	      if	(<*) > (254-pfres*pfwidth)
  11816  86dc				  -	      align	256
  11817  86dc				  -	      endif
  11818  86dc				  -	      if	(<*) < (136-pfres*pfwidth)
  11819  86dc				  -	      repeat	((136-pfres*pfwidth)-(<*))
  11820  86dc				  -	      .byte	0
  11821  86dc				  -	      repend
  11822  86dc				  -	      endif
  11823  86dc					      else
  11824  86dc					      if	(<*) > 206
  11825  8700		       00 00 00 00*	      align	256
  11826  8700					      endif
  11827  8700					      if	(<*) < 88
  11828  8700					      repeat	(88-(<*))
  11829  8700		       00		      .byte.b	0
  11828  8700					      repend
  11829  8701		       00		      .byte.b	0
  11828  8701					      repend
  11829  8702		       00		      .byte.b	0
  11828  8702					      repend
  11829  8703		       00		      .byte.b	0
  11828  8703					      repend
  11829  8704		       00		      .byte.b	0
  11828  8704					      repend
  11829  8705		       00		      .byte.b	0
  11828  8705					      repend
  11829  8706		       00		      .byte.b	0
  11828  8706					      repend
  11829  8707		       00		      .byte.b	0
  11828  8707					      repend
  11829  8708		       00		      .byte.b	0
  11828  8708					      repend
  11829  8709		       00		      .byte.b	0
  11828  8709					      repend
  11829  870a		       00		      .byte.b	0
  11828  870a					      repend
  11829  870b		       00		      .byte.b	0
  11828  870b					      repend
  11829  870c		       00		      .byte.b	0
  11828  870c					      repend
  11829  870d		       00		      .byte.b	0
  11828  870d					      repend
  11829  870e		       00		      .byte.b	0
  11828  870e					      repend
  11829  870f		       00		      .byte.b	0
  11828  870f					      repend
  11829  8710		       00		      .byte.b	0
  11828  8710					      repend
  11829  8711		       00		      .byte.b	0
  11828  8711					      repend
  11829  8712		       00		      .byte.b	0
  11828  8712					      repend
  11829  8713		       00		      .byte.b	0
  11828  8713					      repend
  11829  8714		       00		      .byte.b	0
  11828  8714					      repend
  11829  8715		       00		      .byte.b	0
  11828  8715					      repend
  11829  8716		       00		      .byte.b	0
  11828  8716					      repend
  11829  8717		       00		      .byte.b	0
  11828  8717					      repend
  11829  8718		       00		      .byte.b	0
  11828  8718					      repend
  11829  8719		       00		      .byte.b	0
  11828  8719					      repend
  11829  871a		       00		      .byte.b	0
  11828  871a					      repend
  11829  871b		       00		      .byte.b	0
  11828  871b					      repend
  11829  871c		       00		      .byte.b	0
  11828  871c					      repend
  11829  871d		       00		      .byte.b	0
  11828  871d					      repend
  11829  871e		       00		      .byte.b	0
  11828  871e					      repend
  11829  871f		       00		      .byte.b	0
  11828  871f					      repend
  11829  8720		       00		      .byte.b	0
  11828  8720					      repend
  11829  8721		       00		      .byte.b	0
  11828  8721					      repend
  11829  8722		       00		      .byte.b	0
  11828  8722					      repend
  11829  8723		       00		      .byte.b	0
  11828  8723					      repend
  11829  8724		       00		      .byte.b	0
  11828  8724					      repend
  11829  8725		       00		      .byte.b	0
  11828  8725					      repend
  11829  8726		       00		      .byte.b	0
  11828  8726					      repend
  11829  8727		       00		      .byte.b	0
  11828  8727					      repend
  11829  8728		       00		      .byte.b	0
  11828  8728					      repend
  11829  8729		       00		      .byte.b	0
  11828  8729					      repend
  11829  872a		       00		      .byte.b	0
  11828  872a					      repend
  11829  872b		       00		      .byte.b	0
  11828  872b					      repend
  11829  872c		       00		      .byte.b	0
  11828  872c					      repend
  11829  872d		       00		      .byte.b	0
  11828  872d					      repend
  11829  872e		       00		      .byte.b	0
  11828  872e					      repend
  11829  872f		       00		      .byte.b	0
  11828  872f					      repend
  11829  8730		       00		      .byte.b	0
  11828  8730					      repend
  11829  8731		       00		      .byte.b	0
  11828  8731					      repend
  11829  8732		       00		      .byte.b	0
  11828  8732					      repend
  11829  8733		       00		      .byte.b	0
  11828  8733					      repend
  11829  8734		       00		      .byte.b	0
  11828  8734					      repend
  11829  8735		       00		      .byte.b	0
  11828  8735					      repend
  11829  8736		       00		      .byte.b	0
  11828  8736					      repend
  11829  8737		       00		      .byte.b	0
  11828  8737					      repend
  11829  8738		       00		      .byte.b	0
  11828  8738					      repend
  11829  8739		       00		      .byte.b	0
  11828  8739					      repend
  11829  873a		       00		      .byte.b	0
  11828  873a					      repend
  11829  873b		       00		      .byte.b	0
  11828  873b					      repend
  11829  873c		       00		      .byte.b	0
  11828  873c					      repend
  11829  873d		       00		      .byte.b	0
  11828  873d					      repend
  11829  873e		       00		      .byte.b	0
  11828  873e					      repend
  11829  873f		       00		      .byte.b	0
  11828  873f					      repend
  11829  8740		       00		      .byte.b	0
  11828  8740					      repend
  11829  8741		       00		      .byte.b	0
  11828  8741					      repend
  11829  8742		       00		      .byte.b	0
  11828  8742					      repend
  11829  8743		       00		      .byte.b	0
  11828  8743					      repend
  11829  8744		       00		      .byte.b	0
  11828  8744					      repend
  11829  8745		       00		      .byte.b	0
  11828  8745					      repend
  11829  8746		       00		      .byte.b	0
  11828  8746					      repend
  11829  8747		       00		      .byte.b	0
  11828  8747					      repend
  11829  8748		       00		      .byte.b	0
  11828  8748					      repend
  11829  8749		       00		      .byte.b	0
  11828  8749					      repend
  11829  874a		       00		      .byte.b	0
  11828  874a					      repend
  11829  874b		       00		      .byte.b	0
  11828  874b					      repend
  11829  874c		       00		      .byte.b	0
  11828  874c					      repend
  11829  874d		       00		      .byte.b	0
  11828  874d					      repend
  11829  874e		       00		      .byte.b	0
  11828  874e					      repend
  11829  874f		       00		      .byte.b	0
  11828  874f					      repend
  11829  8750		       00		      .byte.b	0
  11828  8750					      repend
  11829  8751		       00		      .byte.b	0
  11828  8751					      repend
  11829  8752		       00		      .byte.b	0
  11828  8752					      repend
  11829  8753		       00		      .byte.b	0
  11828  8753					      repend
  11829  8754		       00		      .byte.b	0
  11828  8754					      repend
  11829  8755		       00		      .byte.b	0
  11828  8755					      repend
  11829  8756		       00		      .byte.b	0
  11828  8756					      repend
  11829  8757		       00		      .byte.b	0
  11830  8758					      repend
  11831  8758					      endif
  11832  8758					      endif
  11833  8758				   pfcolorlabel288
  11834  8758		       2c 2a 0e 04	      .byte.b	$2C, $2A, $0E, $04
  11835  875c		       2c 2a 0c 06	      .byte.b	$2C, $2A, $0C, $06
  11836  8760		       2c 2a 0a 08	      .byte.b	$2C, $2A, $0A, $08
  11837  8764		       2c 2a 08 0a	      .byte.b	$2C, $2A, $08, $0A
  11838  8768		       2c 2a 0a 0c	      .byte.b	$2C, $2A, $0A, $0C
  11839  876c		       2c 2a 0c 0e	      .byte.b	$2C, $2A, $0C, $0E
  11840  8770		       2c 2a 0e 0c	      .byte.b	$2C, $2A, $0E, $0C
  11841  8774		       2c 2a 0c 0a	      .byte.b	$2C, $2A, $0C, $0A
  11842  8778		       2c 2a 0a 08	      .byte.b	$2C, $2A, $0A, $08
  11843  877c		       2c 2a 0c 06	      .byte.b	$2C, $2A, $0C, $06
  11844  8780		       2c 2a 0e 04	      .byte.b	$2C, $2A, $0E, $04
  11845  8784				  -	      if	(<*) > (<(*+23))
c:\xampp\htdocs\BatariBasicProjects\AnimsRevenge\Animsrevenge.bas.asm (11846): error: Syntax Error ' $04 repeat ($100-<*)'.
  11846  8784				  -124	      $04	repeat ($100-<*)
  11847  8784				  -	      .byte	0
  11848  8784					      repend
  11849  8784					      endif
  11850  8784				   playercolorL0417_1
  11851  8784		       00		      .byte.b	$00
  11852  8785		       00		      .byte.b	$00
  11853  8786		       0e		      .byte.b	$0e
  11854  8787		       00		      .byte.b	$00
  11855  8788		       0e		      .byte.b	$0e
  11856  8789		       00		      .byte.b	$00
  11857  878a		       0e		      .byte.b	$0e
  11858  878b		       00		      .byte.b	$00
  11859  878c		       00		      .byte.b	$00
  11860  878d		       00		      .byte.b	$00
  11861  878e		       00		      .byte.b	$00
  11862  878f		       00		      .byte.b	$00
  11863  8790		       00		      .byte.b	$00
  11864  8791		       00		      .byte.b	$00
  11865  8792		       00		      .byte.b	$00
  11866  8793		       00		      .byte.b	$00
  11867  8794		       00		      .byte.b	$00
  11868  8795		       0e		      .byte.b	$0e
  11869  8796		       0e		      .byte.b	$0e
  11870  8797		       0e		      .byte.b	$0e
  11871  8798		       0e		      .byte.b	$0e
  11872  8799		       0e		      .byte.b	$0e
  11873  879a		       0e		      .byte.b	$0e
  11874  879b		       0e		      .byte.b	$0e
  11875  879c				  -	      if	(<*) > (<(*+22))
  11876  879c				  -	      repeat	($100-<*)
  11877  879c				  -	      .byte	0
  11878  879c				  -	      repend
  11879  879c					      endif
  11880  879c				   playerL0420_1
  11881  879c		       42		      .byte.b	%01000010
  11882  879d		       42		      .byte.b	%01000010
  11883  879e		       42		      .byte.b	%01000010
  11884  879f		       42		      .byte.b	%01000010
  11885  87a0		       42		      .byte.b	%01000010
  11886  87a1		       42		      .byte.b	%01000010
  11887  87a2		       42		      .byte.b	%01000010
  11888  87a3		       42		      .byte.b	%01000010
  11889  87a4		       24		      .byte.b	%00100100
  11890  87a5		       99		      .byte.b	%10011001
  11891  87a6		       99		      .byte.b	%10011001
  11892  87a7		       99		      .byte.b	%10011001
  11893  87a8		       99		      .byte.b	%10011001
  11894  87a9		       99		      .byte.b	%10011001
  11895  87aa		       5a		      .byte.b	%01011010
  11896  87ab		       3c		      .byte.b	%00111100
  11897  87ac		       18		      .byte.b	%00011000
  11898  87ad		       3c		      .byte.b	%00111100
  11899  87ae		       7e		      .byte.b	%01111110
  11900  87af		       7e		      .byte.b	%01111110
  11901  87b0		       7e		      .byte.b	%01111110
  11902  87b1		       7e		      .byte.b	%01111110
  11903  87b2		       7e		      .byte.b	%01111110
  11904  87b3				  -	      if	(<*) > (<(*+22))
  11905  87b3				  -	      repeat	($100-<*)
  11906  87b3				  -	      .byte	0
  11907  87b3				  -	      repend
  11908  87b3					      endif
  11909  87b3				   playerL0422_1
  11910  87b3		       42		      .byte.b	%01000010
  11911  87b4		       42		      .byte.b	%01000010
  11912  87b5		       42		      .byte.b	%01000010
  11913  87b6		       42		      .byte.b	%01000010
  11914  87b7		       42		      .byte.b	%01000010
  11915  87b8		       42		      .byte.b	%01000010
  11916  87b9		       42		      .byte.b	%01000010
  11917  87ba		       42		      .byte.b	%01000010
  11918  87bb		       24		      .byte.b	%00100100
  11919  87bc		       99		      .byte.b	%10011001
  11920  87bd		       99		      .byte.b	%10011001
  11921  87be		       99		      .byte.b	%10011001
  11922  87bf		       99		      .byte.b	%10011001
  11923  87c0		       99		      .byte.b	%10011001
  11924  87c1		       5a		      .byte.b	%01011010
  11925  87c2		       3c		      .byte.b	%00111100
  11926  87c3		       18		      .byte.b	%00011000
  11927  87c4		       3c		      .byte.b	%00111100
  11928  87c5		       7e		      .byte.b	%01111110
  11929  87c6		       7e		      .byte.b	%01111110
  11930  87c7		       7e		      .byte.b	%01111110
  11931  87c8		       7e		      .byte.b	%01111110
  11932  87c9		       7e		      .byte.b	%01111110
  11933  87ca				  -	      if	(<*) > (<(*+23))
  11934  87ca				  -	      repeat	($100-<*)
  11935  87ca				  -	      .byte	0
  11936  87ca				  -	      repend
  11937  87ca					      endif
  11938  87ca				   playerL0424_1
  11939  87ca		       00		      .byte.b	%00000000
  11940  87cb		       42		      .byte.b	%01000010
  11941  87cc		       42		      .byte.b	%01000010
  11942  87cd		       42		      .byte.b	%01000010
  11943  87ce		       42		      .byte.b	%01000010
  11944  87cf		       42		      .byte.b	%01000010
  11945  87d0		       42		      .byte.b	%01000010
  11946  87d1		       42		      .byte.b	%01000010
  11947  87d2		       42		      .byte.b	%01000010
  11948  87d3		       24		      .byte.b	%00100100
  11949  87d4		       99		      .byte.b	%10011001
  11950  87d5		       99		      .byte.b	%10011001
  11951  87d6		       99		      .byte.b	%10011001
  11952  87d7		       99		      .byte.b	%10011001
  11953  87d8		       99		      .byte.b	%10011001
  11954  87d9		       5a		      .byte.b	%01011010
  11955  87da		       3c		      .byte.b	%00111100
  11956  87db		       18		      .byte.b	%00011000
  11957  87dc		       3c		      .byte.b	%00111100
  11958  87dd		       7e		      .byte.b	%01111110
  11959  87de		       7e		      .byte.b	%01111110
  11960  87df		       7e		      .byte.b	%01111110
  11961  87e0		       7e		      .byte.b	%01111110
  11962  87e1		       7e		      .byte.b	%01111110
  11963  87e2				  -	      if	(<*) > (<(*+23))
  11964  87e2				  -	      repeat	($100-<*)
  11965  87e2				  -	      .byte	0
  11966  87e2				  -	      repend
  11967  87e2					      endif
  11968  87e2				   playerL0426_1
  11969  87e2		       00		      .byte.b	%00000000
  11970  87e3		       42		      .byte.b	%01000010
  11971  87e4		       42		      .byte.b	%01000010
  11972  87e5		       42		      .byte.b	%01000010
  11973  87e6		       42		      .byte.b	%01000010
  11974  87e7		       42		      .byte.b	%01000010
  11975  87e8		       42		      .byte.b	%01000010
  11976  87e9		       42		      .byte.b	%01000010
  11977  87ea		       42		      .byte.b	%01000010
  11978  87eb		       24		      .byte.b	%00100100
  11979  87ec		       99		      .byte.b	%10011001
  11980  87ed		       99		      .byte.b	%10011001
  11981  87ee		       99		      .byte.b	%10011001
  11982  87ef		       99		      .byte.b	%10011001
  11983  87f0		       99		      .byte.b	%10011001
  11984  87f1		       5a		      .byte.b	%01011010
  11985  87f2		       3c		      .byte.b	%00111100
  11986  87f3		       18		      .byte.b	%00011000
  11987  87f4		       3c		      .byte.b	%00111100
  11988  87f5		       7e		      .byte.b	%01111110
  11989  87f6		       7e		      .byte.b	%01111110
  11990  87f7		       7e		      .byte.b	%01111110
  11991  87f8		       7e		      .byte.b	%01111110
  11992  87f9		       7e		      .byte.b	%01111110
  11993  87fa					      if	(<*) > (<(*+23))
  11994  87fa					      repeat	($100-<*)
  11995  87fa		       00		      .byte.b	0
  11994  87fa					      repend
  11995  87fb		       00		      .byte.b	0
  11994  87fb					      repend
  11995  87fc		       00		      .byte.b	0
  11994  87fc					      repend
  11995  87fd		       00		      .byte.b	0
  11994  87fd					      repend
  11995  87fe		       00		      .byte.b	0
  11994  87fe					      repend
  11995  87ff		       00		      .byte.b	0
  11996  8800					      repend
  11997  8800					      endif
  11998  8800				   playercolorL0438_1
  11999  8800		       00		      .byte.b	$00
  12000  8801		       00		      .byte.b	$00
  12001  8802		       0e		      .byte.b	$0e
  12002  8803		       00		      .byte.b	$00
  12003  8804		       0e		      .byte.b	$0e
  12004  8805		       00		      .byte.b	$00
  12005  8806		       0e		      .byte.b	$0e
  12006  8807		       00		      .byte.b	$00
  12007  8808		       00		      .byte.b	$00
  12008  8809		       00		      .byte.b	$00
  12009  880a		       00		      .byte.b	$00
  12010  880b		       0e		      .byte.b	$0e
  12011  880c		       00		      .byte.b	$00
  12012  880d		       0e		      .byte.b	$0e
  12013  880e		       00		      .byte.b	$00
  12014  880f		       00		      .byte.b	$00
  12015  8810		       00		      .byte.b	$00
  12016  8811		       0e		      .byte.b	$0e
  12017  8812		       0e		      .byte.b	$0e
  12018  8813		       0e		      .byte.b	$0e
  12019  8814		       0e		      .byte.b	$0e
  12020  8815		       0e		      .byte.b	$0e
  12021  8816		       0e		      .byte.b	$0e
  12022  8817		       0e		      .byte.b	$0e
  12023  8818				  -	      if	(<*) > (<(*+22))
  12024  8818				  -	      repeat	($100-<*)
  12025  8818				  -	      .byte	0
  12026  8818				  -	      repend
  12027  8818					      endif
  12028  8818				   playerL0441_1
  12029  8818		       42		      .byte.b	%01000010
  12030  8819		       42		      .byte.b	%01000010
  12031  881a		       42		      .byte.b	%01000010
  12032  881b		       42		      .byte.b	%01000010
  12033  881c		       42		      .byte.b	%01000010
  12034  881d		       42		      .byte.b	%01000010
  12035  881e		       42		      .byte.b	%01000010
  12036  881f		       42		      .byte.b	%01000010
  12037  8820		       24		      .byte.b	%00100100
  12038  8821		       99		      .byte.b	%10011001
  12039  8822		       99		      .byte.b	%10011001
  12040  8823		       99		      .byte.b	%10011001
  12041  8824		       99		      .byte.b	%10011001
  12042  8825		       99		      .byte.b	%10011001
  12043  8826		       5a		      .byte.b	%01011010
  12044  8827		       3c		      .byte.b	%00111100
  12045  8828		       18		      .byte.b	%00011000
  12046  8829		       3c		      .byte.b	%00111100
  12047  882a		       66		      .byte.b	%01100110
  12048  882b		       66		      .byte.b	%01100110
  12049  882c		       5a		      .byte.b	%01011010
  12050  882d		       18		      .byte.b	%00011000
  12051  882e		       7e		      .byte.b	%01111110
  12052  882f				  -	      if	(<*) > (<(*+22))
  12053  882f				  -	      repeat	($100-<*)
  12054  882f				  -	      .byte	0
  12055  882f				  -	      repend
  12056  882f					      endif
  12057  882f				   playerL0443_1
  12058  882f		       42		      .byte.b	%01000010
  12059  8830		       42		      .byte.b	%01000010
  12060  8831		       42		      .byte.b	%01000010
  12061  8832		       42		      .byte.b	%01000010
  12062  8833		       42		      .byte.b	%01000010
  12063  8834		       42		      .byte.b	%01000010
  12064  8835		       42		      .byte.b	%01000010
  12065  8836		       42		      .byte.b	%01000010
  12066  8837		       24		      .byte.b	%00100100
  12067  8838		       99		      .byte.b	%10011001
  12068  8839		       99		      .byte.b	%10011001
  12069  883a		       99		      .byte.b	%10011001
  12070  883b		       99		      .byte.b	%10011001
  12071  883c		       99		      .byte.b	%10011001
  12072  883d		       5a		      .byte.b	%01011010
  12073  883e		       3c		      .byte.b	%00111100
  12074  883f		       18		      .byte.b	%00011000
  12075  8840		       3c		      .byte.b	%00111100
  12076  8841		       66		      .byte.b	%01100110
  12077  8842		       66		      .byte.b	%01100110
  12078  8843		       5a		      .byte.b	%01011010
  12079  8844		       18		      .byte.b	%00011000
  12080  8845		       7e		      .byte.b	%01111110
  12081  8846				  -	      if	(<*) > (<(*+23))
  12082  8846				  -	      repeat	($100-<*)
  12083  8846				  -	      .byte	0
  12084  8846				  -	      repend
  12085  8846					      endif
  12086  8846				   playerL0445_1
  12087  8846		       00		      .byte.b	%00000000
  12088  8847		       42		      .byte.b	%01000010
  12089  8848		       42		      .byte.b	%01000010
  12090  8849		       42		      .byte.b	%01000010
  12091  884a		       42		      .byte.b	%01000010
  12092  884b		       42		      .byte.b	%01000010
  12093  884c		       42		      .byte.b	%01000010
  12094  884d		       42		      .byte.b	%01000010
  12095  884e		       42		      .byte.b	%01000010
  12096  884f		       24		      .byte.b	%00100100
  12097  8850		       99		      .byte.b	%10011001
  12098  8851		       99		      .byte.b	%10011001
  12099  8852		       99		      .byte.b	%10011001
  12100  8853		       99		      .byte.b	%10011001
  12101  8854		       99		      .byte.b	%10011001
  12102  8855		       5a		      .byte.b	%01011010
  12103  8856		       3c		      .byte.b	%00111100
  12104  8857		       18		      .byte.b	%00011000
  12105  8858		       3c		      .byte.b	%00111100
  12106  8859		       66		      .byte.b	%01100110
  12107  885a		       66		      .byte.b	%01100110
  12108  885b		       5a		      .byte.b	%01011010
  12109  885c		       18		      .byte.b	%00011000
  12110  885d		       7e		      .byte.b	%01111110
  12111  885e				  -	      if	(<*) > (<(*+23))
  12112  885e				  -	      repeat	($100-<*)
  12113  885e				  -	      .byte	0
  12114  885e				  -	      repend
  12115  885e					      endif
  12116  885e				   playerL0447_1
  12117  885e		       00		      .byte.b	%00000000
  12118  885f		       42		      .byte.b	%01000010
  12119  8860		       42		      .byte.b	%01000010
  12120  8861		       42		      .byte.b	%01000010
  12121  8862		       42		      .byte.b	%01000010
  12122  8863		       42		      .byte.b	%01000010
  12123  8864		       42		      .byte.b	%01000010
  12124  8865		       42		      .byte.b	%01000010
  12125  8866		       42		      .byte.b	%01000010
  12126  8867		       24		      .byte.b	%00100100
  12127  8868		       99		      .byte.b	%10011001
  12128  8869		       99		      .byte.b	%10011001
  12129  886a		       99		      .byte.b	%10011001
  12130  886b		       99		      .byte.b	%10011001
  12131  886c		       99		      .byte.b	%10011001
  12132  886d		       5a		      .byte.b	%01011010
  12133  886e		       3c		      .byte.b	%00111100
  12134  886f		       18		      .byte.b	%00011000
  12135  8870		       3c		      .byte.b	%00111100
  12136  8871		       66		      .byte.b	%01100110
  12137  8872		       66		      .byte.b	%01100110
  12138  8873		       5a		      .byte.b	%01011010
  12139  8874		       18		      .byte.b	%00011000
  12140  8875		       7e		      .byte.b	%01111110
  12141  8876				  -	      ifconst	pfres
  12142  8876				  -	      if	(<*) > (254-pfres*pfwidth)
  12143  8876				  -	      align	256
  12144  8876				  -	      endif
  12145  8876				  -	      if	(<*) < (136-pfres*pfwidth)
  12146  8876				  -	      repeat	((136-pfres*pfwidth)-(<*))
  12147  8876				  -	      .byte	0
  12148  8876				  -	      repend
  12149  8876				  -	      endif
  12150  8876					      else
  12151  8876				  -	      if	(<*) > 206
  12152  8876				  -	      align	256
  12153  8876					      endif
  12154  8876				  -	      if	(<*) < 88
  12155  8876				  -	      repeat	(88-(<*))
  12156  8876				  -	      .byte	0
  12157  8876				  -	      repend
  12158  8876					      endif
  12159  8876					      endif
  12160  8876				   pfcolorlabel589
  12161  8876		       04 04 04 00	      .byte.b	$04, $04, $04,0
  12162  887a		       06 06 06 00	      .byte.b	$06, $06, $06,0
  12163  887e		       08 08 08 00	      .byte.b	$08, $08, $08,0
  12164  8882		       0a 0a 0a 00	      .byte.b	$0A, $0A, $0A,0
  12165  8886		       0c 0c 0c 00	      .byte.b	$0C, $0C, $0C,0
  12166  888a		       0e 0e 0e 00	      .byte.b	$0E, $0E, $0E,0
  12167  888e		       0c 0c 0c 00	      .byte.b	$0C, $0C, $0C,0
  12168  8892		       0a 0a 0a 00	      .byte.b	$0A, $0A, $0A,0
  12169  8896		       08 08 08 00	      .byte.b	$08, $08, $08,0
  12170  889a		       06 06 06 00	      .byte.b	$06, $06, $06,0
  12171  889e		       04 04 04 00	      .byte.b	$04, $04, $04,0
  12172  88a2		       04 04 00 00	      .byte.b	$04, $04, $00,0
  12173  88a6				  -	      if	(<*) > (<(*+23))
  12174  88a6				  -	      repeat	($100-<*)
  12175  88a6				  -	      .byte	0
  12176  88a6				  -	      repend
  12177  88a6					      endif
  12178  88a6				   playercolorL0458_1
  12179  88a6		       00		      .byte.b	$00
  12180  88a7		       00		      .byte.b	$00
  12181  88a8		       0e		      .byte.b	$0e
  12182  88a9		       00		      .byte.b	$00
  12183  88aa		       0e		      .byte.b	$0e
  12184  88ab		       00		      .byte.b	$00
  12185  88ac		       0e		      .byte.b	$0e
  12186  88ad		       00		      .byte.b	$00
  12187  88ae		       00		      .byte.b	$00
  12188  88af		       00		      .byte.b	$00
  12189  88b0		       00		      .byte.b	$00
  12190  88b1		       00		      .byte.b	$00
  12191  88b2		       00		      .byte.b	$00
  12192  88b3		       00		      .byte.b	$00
  12193  88b4		       00		      .byte.b	$00
  12194  88b5		       00		      .byte.b	$00
  12195  88b6		       00		      .byte.b	$00
  12196  88b7		       0e		      .byte.b	$0e
  12197  88b8		       0e		      .byte.b	$0e
  12198  88b9		       0e		      .byte.b	$0e
  12199  88ba		       0e		      .byte.b	$0e
  12200  88bb		       0e		      .byte.b	$0e
  12201  88bc		       0e		      .byte.b	$0e
  12202  88bd		       0e		      .byte.b	$0e
  12203  88be				  -	      if	(<*) > (<(*+22))
  12204  88be				  -	      repeat	($100-<*)
  12205  88be				  -	      .byte	0
  12206  88be				  -	      repend
  12207  88be					      endif
  12208  88be				   playerL0461_1
  12209  88be		       a0		      .byte.b	%10100000
  12210  88bf		       90		      .byte.b	%10010000
  12211  88c0		       48		      .byte.b	%01001000
  12212  88c1		       24		      .byte.b	%00100100
  12213  88c2		       24		      .byte.b	%00100100
  12214  88c3		       24		      .byte.b	%00100100
  12215  88c4		       24		      .byte.b	%00100100
  12216  88c5		       24		      .byte.b	%00100100
  12217  88c6		       24		      .byte.b	%00100100
  12218  88c7		       7c		      .byte.b	%01111100
  12219  88c8		       74		      .byte.b	%01110100
  12220  88c9		       7c		      .byte.b	%01111100
  12221  88ca		       75		      .byte.b	%01110101
  12222  88cb		       7e		      .byte.b	%01111110
  12223  88cc		       74		      .byte.b	%01110100
  12224  88cd		       3c		      .byte.b	%00111100
  12225  88ce		       1c		      .byte.b	%00011100
  12226  88cf		       3c		      .byte.b	%00111100
  12227  88d0		       72		      .byte.b	%01110010
  12228  88d1		       72		      .byte.b	%01110010
  12229  88d2		       6c		      .byte.b	%01101100
  12230  88d3		       48		      .byte.b	%01001000
  12231  88d4		       3e		      .byte.b	%00111110
  12232  88d5				  -	      if	(<*) > (<(*+22))
  12233  88d5				  -	      repeat	($100-<*)
  12234  88d5				  -	      .byte	0
  12235  88d5				  -	      repend
  12236  88d5					      endif
  12237  88d5				   playerL0463_1
  12238  88d5		       a0		      .byte.b	%10100000
  12239  88d6		       90		      .byte.b	%10010000
  12240  88d7		       48		      .byte.b	%01001000
  12241  88d8		       24		      .byte.b	%00100100
  12242  88d9		       24		      .byte.b	%00100100
  12243  88da		       24		      .byte.b	%00100100
  12244  88db		       24		      .byte.b	%00100100
  12245  88dc		       24		      .byte.b	%00100100
  12246  88dd		       24		      .byte.b	%00100100
  12247  88de		       7c		      .byte.b	%01111100
  12248  88df		       74		      .byte.b	%01110100
  12249  88e0		       7c		      .byte.b	%01111100
  12250  88e1		       75		      .byte.b	%01110101
  12251  88e2		       7e		      .byte.b	%01111110
  12252  88e3		       74		      .byte.b	%01110100
  12253  88e4		       3c		      .byte.b	%00111100
  12254  88e5		       1c		      .byte.b	%00011100
  12255  88e6		       3c		      .byte.b	%00111100
  12256  88e7		       72		      .byte.b	%01110010
  12257  88e8		       72		      .byte.b	%01110010
  12258  88e9		       6c		      .byte.b	%01101100
  12259  88ea		       48		      .byte.b	%01001000
  12260  88eb		       3e		      .byte.b	%00111110
  12261  88ec					      if	(<*) > (<(*+23))
  12262  88ec					      repeat	($100-<*)
  12263  88ec		       00		      .byte.b	0
  12262  88ec					      repend
  12263  88ed		       00		      .byte.b	0
  12262  88ed					      repend
  12263  88ee		       00		      .byte.b	0
  12262  88ee					      repend
  12263  88ef		       00		      .byte.b	0
  12262  88ef					      repend
  12263  88f0		       00		      .byte.b	0
  12262  88f0					      repend
  12263  88f1		       00		      .byte.b	0
  12262  88f1					      repend
  12263  88f2		       00		      .byte.b	0
  12262  88f2					      repend
  12263  88f3		       00		      .byte.b	0
  12262  88f3					      repend
  12263  88f4		       00		      .byte.b	0
  12262  88f4					      repend
  12263  88f5		       00		      .byte.b	0
  12262  88f5					      repend
  12263  88f6		       00		      .byte.b	0
  12262  88f6					      repend
  12263  88f7		       00		      .byte.b	0
  12262  88f7					      repend
  12263  88f8		       00		      .byte.b	0
  12262  88f8					      repend
  12263  88f9		       00		      .byte.b	0
  12262  88f9					      repend
  12263  88fa		       00		      .byte.b	0
  12262  88fa					      repend
  12263  88fb		       00		      .byte.b	0
  12262  88fb					      repend
  12263  88fc		       00		      .byte.b	0
  12262  88fc					      repend
  12263  88fd		       00		      .byte.b	0
  12262  88fd					      repend
  12263  88fe		       00		      .byte.b	0
  12262  88fe					      repend
  12263  88ff		       00		      .byte.b	0
  12264  8900					      repend
  12265  8900					      endif
  12266  8900				   playerL0465_1
  12267  8900		       00		      .byte.b	%00000000
  12268  8901		       a0		      .byte.b	%10100000
  12269  8902		       90		      .byte.b	%10010000
  12270  8903		       48		      .byte.b	%01001000
  12271  8904		       24		      .byte.b	%00100100
  12272  8905		       24		      .byte.b	%00100100
  12273  8906		       24		      .byte.b	%00100100
  12274  8907		       24		      .byte.b	%00100100
  12275  8908		       24		      .byte.b	%00100100
  12276  8909		       24		      .byte.b	%00100100
  12277  890a		       7c		      .byte.b	%01111100
  12278  890b		       74		      .byte.b	%01110100
  12279  890c		       7c		      .byte.b	%01111100
  12280  890d		       75		      .byte.b	%01110101
  12281  890e		       7e		      .byte.b	%01111110
  12282  890f		       74		      .byte.b	%01110100
  12283  8910		       3c		      .byte.b	%00111100
  12284  8911		       1c		      .byte.b	%00011100
  12285  8912		       3c		      .byte.b	%00111100
  12286  8913		       72		      .byte.b	%01110010
  12287  8914		       72		      .byte.b	%01110010
  12288  8915		       6c		      .byte.b	%01101100
  12289  8916		       48		      .byte.b	%01001000
  12290  8917		       3e		      .byte.b	%00111110
  12291  8918				  -	      if	(<*) > (<(*+23))
  12292  8918				  -	      repeat	($100-<*)
  12293  8918				  -	      .byte	0
  12294  8918				  -	      repend
  12295  8918					      endif
  12296  8918				   playerL0467_1
  12297  8918		       00		      .byte.b	%00000000
  12298  8919		       a0		      .byte.b	%10100000
  12299  891a		       90		      .byte.b	%10010000
  12300  891b		       48		      .byte.b	%01001000
  12301  891c		       24		      .byte.b	%00100100
  12302  891d		       24		      .byte.b	%00100100
  12303  891e		       24		      .byte.b	%00100100
  12304  891f		       24		      .byte.b	%00100100
  12305  8920		       24		      .byte.b	%00100100
  12306  8921		       24		      .byte.b	%00100100
  12307  8922		       7c		      .byte.b	%01111100
  12308  8923		       74		      .byte.b	%01110100
  12309  8924		       7c		      .byte.b	%01111100
  12310  8925		       75		      .byte.b	%01110101
  12311  8926		       7e		      .byte.b	%01111110
  12312  8927		       74		      .byte.b	%01110100
  12313  8928		       3c		      .byte.b	%00111100
  12314  8929		       1c		      .byte.b	%00011100
  12315  892a		       3c		      .byte.b	%00111100
  12316  892b		       72		      .byte.b	%01110010
  12317  892c		       72		      .byte.b	%01110010
  12318  892d		       6c		      .byte.b	%01101100
  12319  892e		       48		      .byte.b	%01001000
  12320  892f		       3e		      .byte.b	%00111110
  12321  8930				  -	      if	(<*) > (<(*+23))
  12322  8930				  -	      repeat	($100-<*)
  12323  8930				  -	      .byte	0
  12324  8930				  -	      repend
  12325  8930					      endif
  12326  8930				   playercolorL0480_1
  12327  8930		       00		      .byte.b	$00
  12328  8931		       00		      .byte.b	$00
  12329  8932		       0e		      .byte.b	$0e
  12330  8933		       00		      .byte.b	$00
  12331  8934		       0e		      .byte.b	$0e
  12332  8935		       00		      .byte.b	$00
  12333  8936		       0e		      .byte.b	$0e
  12334  8937		       00		      .byte.b	$00
  12335  8938		       00		      .byte.b	$00
  12336  8939		       00		      .byte.b	$00
  12337  893a		       00		      .byte.b	$00
  12338  893b		       00		      .byte.b	$00
  12339  893c		       00		      .byte.b	$00
  12340  893d		       00		      .byte.b	$00
  12341  893e		       00		      .byte.b	$00
  12342  893f		       00		      .byte.b	$00
  12343  8940		       00		      .byte.b	$00
  12344  8941		       0e		      .byte.b	$0e
  12345  8942		       0e		      .byte.b	$0e
  12346  8943		       0e		      .byte.b	$0e
  12347  8944		       0e		      .byte.b	$0e
  12348  8945		       0e		      .byte.b	$0e
  12349  8946		       0e		      .byte.b	$0e
  12350  8947		       0e		      .byte.b	$0e
  12351  8948				  -	      if	(<*) > (<(*+22))
  12352  8948				  -	      repeat	($100-<*)
  12353  8948				  -	      .byte	0
  12354  8948				  -	      repend
  12355  8948					      endif
  12356  8948				   playerL0483_1
  12357  8948		       05		      .byte.b	%00000101
  12358  8949		       09		      .byte.b	%00001001
  12359  894a		       12		      .byte.b	%00010010
  12360  894b		       24		      .byte.b	%00100100
  12361  894c		       24		      .byte.b	%00100100
  12362  894d		       24		      .byte.b	%00100100
  12363  894e		       24		      .byte.b	%00100100
  12364  894f		       24		      .byte.b	%00100100
  12365  8950		       24		      .byte.b	%00100100
  12366  8951		       3e		      .byte.b	%00111110
  12367  8952		       2e		      .byte.b	%00101110
  12368  8953		       3e		      .byte.b	%00111110
  12369  8954		       ae		      .byte.b	%10101110
  12370  8955		       7e		      .byte.b	%01111110
  12371  8956		       2e		      .byte.b	%00101110
  12372  8957		       3c		      .byte.b	%00111100
  12373  8958		       38		      .byte.b	%00111000
  12374  8959		       3c		      .byte.b	%00111100
  12375  895a		       4e		      .byte.b	%01001110
  12376  895b		       4e		      .byte.b	%01001110
  12377  895c		       36		      .byte.b	%00110110
  12378  895d		       12		      .byte.b	%00010010
  12379  895e		       7c		      .byte.b	%01111100
  12380  895f				  -	      if	(<*) > (<(*+22))
  12381  895f				  -	      repeat	($100-<*)
  12382  895f				  -	      .byte	0
  12383  895f				  -	      repend
  12384  895f					      endif
  12385  895f				   playerL0485_1
  12386  895f		       05		      .byte.b	%00000101
  12387  8960		       09		      .byte.b	%00001001
  12388  8961		       12		      .byte.b	%00010010
  12389  8962		       24		      .byte.b	%00100100
  12390  8963		       24		      .byte.b	%00100100
  12391  8964		       24		      .byte.b	%00100100
  12392  8965		       24		      .byte.b	%00100100
  12393  8966		       24		      .byte.b	%00100100
  12394  8967		       24		      .byte.b	%00100100
  12395  8968		       3e		      .byte.b	%00111110
  12396  8969		       2e		      .byte.b	%00101110
  12397  896a		       3e		      .byte.b	%00111110
  12398  896b		       ae		      .byte.b	%10101110
  12399  896c		       7e		      .byte.b	%01111110
  12400  896d		       2e		      .byte.b	%00101110
  12401  896e		       3c		      .byte.b	%00111100
  12402  896f		       38		      .byte.b	%00111000
  12403  8970		       3c		      .byte.b	%00111100
  12404  8971		       4e		      .byte.b	%01001110
  12405  8972		       4e		      .byte.b	%01001110
  12406  8973		       36		      .byte.b	%00110110
  12407  8974		       12		      .byte.b	%00010010
  12408  8975		       7c		      .byte.b	%01111100
  12409  8976				  -	      if	(<*) > (<(*+23))
  12410  8976				  -	      repeat	($100-<*)
  12411  8976				  -	      .byte	0
  12412  8976				  -	      repend
  12413  8976					      endif
  12414  8976				   playerL0487_1
  12415  8976		       00		      .byte.b	%00000000
  12416  8977		       05		      .byte.b	%00000101
  12417  8978		       09		      .byte.b	%00001001
  12418  8979		       12		      .byte.b	%00010010
  12419  897a		       24		      .byte.b	%00100100
  12420  897b		       24		      .byte.b	%00100100
  12421  897c		       24		      .byte.b	%00100100
  12422  897d		       24		      .byte.b	%00100100
  12423  897e		       24		      .byte.b	%00100100
  12424  897f		       24		      .byte.b	%00100100
  12425  8980		       3e		      .byte.b	%00111110
  12426  8981		       2e		      .byte.b	%00101110
  12427  8982		       3e		      .byte.b	%00111110
  12428  8983		       ae		      .byte.b	%10101110
  12429  8984		       7e		      .byte.b	%01111110
  12430  8985		       2e		      .byte.b	%00101110
  12431  8986		       3c		      .byte.b	%00111100
  12432  8987		       38		      .byte.b	%00111000
  12433  8988		       3c		      .byte.b	%00111100
  12434  8989		       4e		      .byte.b	%01001110
  12435  898a		       4e		      .byte.b	%01001110
  12436  898b		       36		      .byte.b	%00110110
  12437  898c		       12		      .byte.b	%00010010
  12438  898d		       7c		      .byte.b	%01111100
  12439  898e				  -	      if	(<*) > (<(*+23))
  12440  898e				  -	      repeat	($100-<*)
  12441  898e				  -	      .byte	0
  12442  898e				  -	      repend
  12443  898e					      endif
  12444  898e				   playerL0489_1
  12445  898e		       00		      .byte.b	%00000000
  12446  898f		       05		      .byte.b	%00000101
  12447  8990		       09		      .byte.b	%00001001
  12448  8991		       12		      .byte.b	%00010010
  12449  8992		       24		      .byte.b	%00100100
  12450  8993		       24		      .byte.b	%00100100
  12451  8994		       24		      .byte.b	%00100100
  12452  8995		       24		      .byte.b	%00100100
  12453  8996		       24		      .byte.b	%00100100
  12454  8997		       24		      .byte.b	%00100100
  12455  8998		       3e		      .byte.b	%00111110
  12456  8999		       2e		      .byte.b	%00101110
  12457  899a		       3e		      .byte.b	%00111110
  12458  899b		       ae		      .byte.b	%10101110
  12459  899c		       7e		      .byte.b	%01111110
  12460  899d		       2e		      .byte.b	%00101110
  12461  899e		       3c		      .byte.b	%00111100
  12462  899f		       38		      .byte.b	%00111000
  12463  89a0		       3c		      .byte.b	%00111100
  12464  89a1		       4e		      .byte.b	%01001110
  12465  89a2		       4e		      .byte.b	%01001110
  12466  89a3		       36		      .byte.b	%00110110
  12467  89a4		       12		      .byte.b	%00010010
  12468  89a5		       7c		      .byte.b	%01111100
  12469  89a6					      if	ECHOFIRST
      1486 bytes of ROM space left in bank 8
  12470  89a6					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 8")
  12471  89a6					      endif
  12472  89a6		       00 01	   ECHOFIRST  =	1
  12473  89a6
  12474  89a6
  12475  89a6							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12476  89a6
  12477  89a6							; feel free to modify the score graphics - just keep each digit 8 high
  12478  89a6							; and keep the conditional compilation stuff intact
  12479  89a6				  -	      ifconst	ROM2k
  12480  89a6				  -	      ORG	$F7AC-8
  12481  89a6					      else
  12482  89a6					      ifconst	bankswitch
  12483  89a6				  -	      if	bankswitch == 8
  12484  89a6				  -	      ORG	$2F94-bscode_length
  12485  89a6				  -	      RORG	$FF94-bscode_length
  12486  89a6					      endif
  12487  89a6				  -	      if	bankswitch == 16
  12488  89a6				  -	      ORG	$4F94-bscode_length
  12489  89a6				  -	      RORG	$FF94-bscode_length
  12490  89a6					      endif
  12491  89a6					      if	bankswitch == 32
  12492  8f74					      ORG	$8F94-bscode_length
  12493  8f74					      RORG	$FF94-bscode_length
  12494  8f74					      endif
  12495  8f74				  -	      if	bankswitch == 64
  12496  8f74				  -	      ORG	$10F80-bscode_length
  12497  8f74				  -	      RORG	$1FF80-bscode_length
  12498  8f74					      endif
  12499  8f74				  -	      else
  12500  8f74				  -	      ORG	$FF9C
  12501  8f74					      endif
  12502  8f74					      endif
  12503  8f74
  12504  8f74							; font equates
  12505  8f74		       00 01	   .21stcentury =	1
  12506  8f74		       00 02	   alarmclock =	2
  12507  8f74		       00 03	   handwritten =	3
  12508  8f74		       00 04	   interrupted =	4
  12509  8f74		       00 05	   retroputer =	5
  12510  8f74		       00 06	   whimsey    =	6
  12511  8f74		       00 07	   tiny       =	7
  12512  8f74		       00 08	   hex	      =	8
  12513  8f74
  12514  8f74				  -	      ifconst	font
  12515  8f74				  -	      if	font == hex
  12516  8f74				  -	      ORG	. - 48
  12517  8f74				  -	      endif
  12518  8f74					      endif
  12519  8f74
  12520  8f74				   scoretable
  12521  8f74
  12522  8f74				  -	      ifconst	font
  12523  8f74				  -	      if	font == .21stcentury
  12524  8f74				  -	      include	"score_graphics.asm.21stcentury"
  12525  8f74				  -	      endif
  12526  8f74				  -	      if	font == alarmclock
  12527  8f74				  -	      include	"score_graphics.asm.alarmclock"
  12528  8f74				  -	      endif
  12529  8f74				  -	      if	font == handwritten
  12530  8f74				  -	      include	"score_graphics.asm.handwritten"
  12531  8f74				  -	      endif
  12532  8f74				  -	      if	font == interrupted
  12533  8f74				  -	      include	"score_graphics.asm.interrupted"
  12534  8f74				  -	      endif
  12535  8f74				  -	      if	font == retroputer
  12536  8f74				  -	      include	"score_graphics.asm.retroputer"
  12537  8f74				  -	      endif
  12538  8f74				  -	      if	font == whimsey
  12539  8f74				  -	      include	"score_graphics.asm.whimsey"
  12540  8f74				  -	      endif
  12541  8f74				  -	      if	font == tiny
  12542  8f74				  -	      include	"score_graphics.asm.tiny"
  12543  8f74				  -	      endif
  12544  8f74				  -	      if	font == hex
  12545  8f74				  -	      include	"score_graphics.asm.hex"
  12546  8f74				  -	      endif
  12547  8f74					      else		; default font
  12548  8f74
  12549  8f74		       3c		      .byte.b	%00111100
  12550  8f75		       66		      .byte.b	%01100110
  12551  8f76		       66		      .byte.b	%01100110
  12552  8f77		       66		      .byte.b	%01100110
  12553  8f78		       66		      .byte.b	%01100110
  12554  8f79		       66		      .byte.b	%01100110
  12555  8f7a		       66		      .byte.b	%01100110
  12556  8f7b		       3c		      .byte.b	%00111100
  12557  8f7c
  12558  8f7c		       7e		      .byte.b	%01111110
  12559  8f7d		       18		      .byte.b	%00011000
  12560  8f7e		       18		      .byte.b	%00011000
  12561  8f7f		       18		      .byte.b	%00011000
  12562  8f80		       18		      .byte.b	%00011000
  12563  8f81		       38		      .byte.b	%00111000
  12564  8f82		       18		      .byte.b	%00011000
  12565  8f83		       08		      .byte.b	%00001000
  12566  8f84
  12567  8f84		       7e		      .byte.b	%01111110
  12568  8f85		       60		      .byte.b	%01100000
  12569  8f86		       60		      .byte.b	%01100000
  12570  8f87		       3c		      .byte.b	%00111100
  12571  8f88		       06		      .byte.b	%00000110
  12572  8f89		       06		      .byte.b	%00000110
  12573  8f8a		       46		      .byte.b	%01000110
  12574  8f8b		       3c		      .byte.b	%00111100
  12575  8f8c
  12576  8f8c		       3c		      .byte.b	%00111100
  12577  8f8d		       46		      .byte.b	%01000110
  12578  8f8e		       06		      .byte.b	%00000110
  12579  8f8f		       06		      .byte.b	%00000110
  12580  8f90		       1c		      .byte.b	%00011100
  12581  8f91		       06		      .byte.b	%00000110
  12582  8f92		       46		      .byte.b	%01000110
  12583  8f93		       3c		      .byte.b	%00111100
  12584  8f94
  12585  8f94		       0c		      .byte.b	%00001100
  12586  8f95		       0c		      .byte.b	%00001100
  12587  8f96		       7e		      .byte.b	%01111110
  12588  8f97		       4c		      .byte.b	%01001100
  12589  8f98		       4c		      .byte.b	%01001100
  12590  8f99		       2c		      .byte.b	%00101100
  12591  8f9a		       1c		      .byte.b	%00011100
  12592  8f9b		       0c		      .byte.b	%00001100
  12593  8f9c
  12594  8f9c		       3c		      .byte.b	%00111100
  12595  8f9d		       46		      .byte.b	%01000110
  12596  8f9e		       06		      .byte.b	%00000110
  12597  8f9f		       06		      .byte.b	%00000110
  12598  8fa0		       3c		      .byte.b	%00111100
  12599  8fa1		       60		      .byte.b	%01100000
  12600  8fa2		       60		      .byte.b	%01100000
  12601  8fa3		       7e		      .byte.b	%01111110
  12602  8fa4
  12603  8fa4		       3c		      .byte.b	%00111100
  12604  8fa5		       66		      .byte.b	%01100110
  12605  8fa6		       66		      .byte.b	%01100110
  12606  8fa7		       66		      .byte.b	%01100110
  12607  8fa8		       7c		      .byte.b	%01111100
  12608  8fa9		       60		      .byte.b	%01100000
  12609  8faa		       62		      .byte.b	%01100010
  12610  8fab		       3c		      .byte.b	%00111100
  12611  8fac
  12612  8fac		       30		      .byte.b	%00110000
  12613  8fad		       30		      .byte.b	%00110000
  12614  8fae		       30		      .byte.b	%00110000
  12615  8faf		       18		      .byte.b	%00011000
  12616  8fb0		       0c		      .byte.b	%00001100
  12617  8fb1		       06		      .byte.b	%00000110
  12618  8fb2		       42		      .byte.b	%01000010
  12619  8fb3		       3e		      .byte.b	%00111110
  12620  8fb4
  12621  8fb4		       3c		      .byte.b	%00111100
  12622  8fb5		       66		      .byte.b	%01100110
  12623  8fb6		       66		      .byte.b	%01100110
  12624  8fb7		       66		      .byte.b	%01100110
  12625  8fb8		       3c		      .byte.b	%00111100
  12626  8fb9		       66		      .byte.b	%01100110
  12627  8fba		       66		      .byte.b	%01100110
  12628  8fbb		       3c		      .byte.b	%00111100
  12629  8fbc
  12630  8fbc		       3c		      .byte.b	%00111100
  12631  8fbd		       46		      .byte.b	%01000110
  12632  8fbe		       06		      .byte.b	%00000110
  12633  8fbf		       3e		      .byte.b	%00111110
  12634  8fc0		       66		      .byte.b	%01100110
  12635  8fc1		       66		      .byte.b	%01100110
  12636  8fc2		       66		      .byte.b	%01100110
  12637  8fc3		       3c		      .byte.b	%00111100
  12638  8fc4
  12639  8fc4					      ifnconst	DPC_kernel_options
  12640  8fc4
  12641  8fc4		       00		      .byte.b	%00000000
  12642  8fc5		       00		      .byte.b	%00000000
  12643  8fc6		       00		      .byte.b	%00000000
  12644  8fc7		       00		      .byte.b	%00000000
  12645  8fc8		       00		      .byte.b	%00000000
  12646  8fc9		       00		      .byte.b	%00000000
  12647  8fca		       00		      .byte.b	%00000000
  12648  8fcb		       00		      .byte.b	%00000000
  12649  8fcc
  12650  8fcc					      endif
  12651  8fcc
  12652  8fcc					      endif
  12653  8fcc
  12654  8fcc				  -	      ifconst	ROM2k
  12655  8fcc				  -	      ORG	$F7FC
  12656  8fcc					      else
  12657  8fcc					      ifconst	bankswitch
  12658  8fcc				  -	      if	bankswitch == 8
  12659  8fcc				  -	      ORG	$2FF4-bscode_length
  12660  8fcc				  -	      RORG	$FFF4-bscode_length
  12661  8fcc					      endif
  12662  8fcc				  -	      if	bankswitch == 16
  12663  8fcc				  -	      ORG	$4FF4-bscode_length
  12664  8fcc				  -	      RORG	$FFF4-bscode_length
  12665  8fcc					      endif
  12666  8fcc					      if	bankswitch == 32
  12667  8fd4					      ORG	$8FF4-bscode_length
  12668  8fd4					      RORG	$FFF4-bscode_length
  12669  8fd4					      endif
  12670  8fd4				  -	      if	bankswitch == 64
  12671  8fd4				  -	      ORG	$10FE0-bscode_length
  12672  8fd4				  -	      RORG	$1FFE0-bscode_length
  12673  8fd4					      endif
  12674  8fd4				  -	      else
  12675  8fd4				  -	      ORG	$FFFC
  12676  8fd4					      endif
  12677  8fd4					      endif
  12678  8fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12679  8fd4
  12680  8fd4							; every bank has this stuff at the same place
  12681  8fd4							; this code can switch to/from any bank at any entry point
  12682  8fd4							; and can preserve register values
  12683  8fd4							; note: lines not starting with a space are not placed in all banks
  12684  8fd4							;
  12685  8fd4							; line below tells the compiler how long this is - do not remove
  12686  8fd4							;size=32
  12687  8fd4
  12688  8fd4				   begin_bscode
  12689  8fd4		       a2 ff		      ldx	#$ff
  12690  8fd6				  -	      ifconst	FASTFETCH	; using DPC+
  12691  8fd6				  -	      stx	FASTFETCH
  12692  8fd6					      endif
  12693  8fd6		       9a		      txs
  12694  8fd7				  -	      if	bankswitch == 64
  12695  8fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  12696  8fd7					      else
  12697  8fd7		       a9 f2		      lda	#>(start-1)
  12698  8fd9					      endif
  12699  8fd9		       48		      pha
  12700  8fda		       a9 51		      lda	#<(start-1)
  12701  8fdc		       48		      pha
  12702  8fdd
  12703  8fdd				   BS_return
  12704  8fdd		       48		      pha
  12705  8fde		       8a		      txa
  12706  8fdf		       48		      pha
  12707  8fe0		       ba		      tsx
  12708  8fe1
  12709  8fe1					      if	bankswitch != 64
  12710  8fe1		       b5 04		      lda	4,x	; get high byte of return address
  12711  8fe3
  12712  8fe3		       2a		      rol
  12713  8fe4		       2a		      rol
  12714  8fe5		       2a		      rol
  12715  8fe6		       2a		      rol
  12716  8fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  12717  8fe9		       aa		      tax
  12718  8fea		       e8		      inx
  12719  8feb				  -	      else
  12720  8feb				  -	      lda	4,x	; get high byte of return address
  12721  8feb				  -	      tay
  12722  8feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  12723  8feb				  -	      sta	4,x
  12724  8feb				  -	      tya
  12725  8feb				  -	      lsr
  12726  8feb				  -	      lsr
  12727  8feb				  -	      lsr
  12728  8feb				  -	      lsr
  12729  8feb				  -	      tax
  12730  8feb				  -	      inx
  12731  8feb					      endif
  12732  8feb
  12733  8feb				   BS_jsr
  12734  8feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  12735  8fee		       68		      pla
  12736  8fef		       aa		      tax
  12737  8ff0		       68		      pla
  12738  8ff1		       60		      rts
  12739  8ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  12740  8ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  12741  8ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  12742  8ff2					      endif
  12743  8ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12744  8ff2
  12745  8ff2					      ifconst	bankswitch
  12746  8ff2				  -	      if	bankswitch == 8
  12747  8ff2				  -	      ORG	$2FFC
  12748  8ff2				  -	      RORG	$FFFC
  12749  8ff2					      endif
  12750  8ff2				  -	      if	bankswitch == 16
  12751  8ff2				  -	      ORG	$4FFC
  12752  8ff2				  -	      RORG	$FFFC
  12753  8ff2					      endif
  12754  8ff2					      if	bankswitch == 32
  12755  8ffc					      ORG	$8FFC
  12756  8ffc					      RORG	$FFFC
  12757  8ffc					      endif
  12758  8ffc				  -	      if	bankswitch == 64
  12759  8ffc				  -	      ORG	$10FF0
  12760  8ffc				  -	      RORG	$1FFF0
  12761  8ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
  12762  8ffc				  -	      ORG	$10FF8
  12763  8ffc				  -	      RORG	$1FFF8
  12764  8ffc				  -	      ifconst	superchip
  12765  8ffc				  -	      .byte	"E","F","S","C"
  12766  8ffc				  -	      else
  12767  8ffc				  -	      .byte	"E","F","E","F"
  12768  8ffc				  -	      endif
  12769  8ffc				  -	      ORG	$10FFC
  12770  8ffc				  -	      RORG	$1FFFC
  12771  8ffc					      endif
  12772  8ffc				  -	      else
  12773  8ffc				  -	      ifconst	ROM2k
  12774  8ffc				  -	      ORG	$F7FC
  12775  8ffc				  -	      else
  12776  8ffc				  -	      ORG	$FFFC
  12777  8ffc				  -	      endif
  12778  8ffc					      endif
  12779  8ffc		       52 f2		      .word.w	(start & $ffff)
  12780  8ffe		       52 f2		      .word.w	(start & $ffff)

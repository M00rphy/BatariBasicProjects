------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_double_animation.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_double_animation.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_double_animation.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 99	    _P_Edge_Right =	153
      4  10000 ????
      5  10000 ????		00 01	    _P_Edge_Left =	1
      6  10000 ????
      7  10000 ????		00 53	    _P_Edge_Bottom =	83
      8  10000 ????
      9  10000 ????		00 0a	    _P_Edge_Top =	10
     10  10000 ????
     11  10000 ????		00 01	    pfscore    =	1
     12  10000 ????
     13  10000 ????		00 ed	    rand16     =	z
     14  10000 ????
     15  10000 ????		00 ec	    _Bit7_Last_Life =	y
     16  10000 ????
     17  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     18  10000 ????
     19  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     20  10000 ????
     21  10000 ????		00 ec	    _Bit2_Game_Control =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     26  10000 ????
     27  10000 ????		00 ec	    _BitOp_01  =	y
     28  10000 ????
     29  10000 ????		00 eb	    _High_Score3 =	x
     30  10000 ????
     31  10000 ????		00 ea	    _High_Score2 =	w
     32  10000 ????
     33  10000 ????		00 e9	    _High_Score1 =	v
     34  10000 ????
     35  10000 ????		00 e8	    _Score3_Mem =	u
     36  10000 ????
     37  10000 ????		00 e7	    _Score2_Mem =	t
     38  10000 ????
     39  10000 ????		00 e6	    _Score1_Mem =	s
     40  10000 ????
     41  10000 ????		00 95	    _sc3       =	score + 2
     42  10000 ????
     43  10000 ????		00 94	    _sc2       =	score + 1
     44  10000 ????
     45  10000 ????		00 93	    _sc1       =	score
     46  10000 ????
     47  10000 ????		00 e5	    _Bit3_AP_P0_Dir =	r
     48  10000 ????
     49  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     50  10000 ????
     51  10000 ????		00 e5	    _Bit1_BW_Check =	r
     52  10000 ????
     53  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     54  10000 ????
     55  10000 ????		00 e5	    _BitOp_02  =	r
     56  10000 ????
     57  10000 ????		00 dd	    _Pause_Color_Tmp =	j
     58  10000 ????
     59  10000 ????		00 dd	    _AP_Dir_Counter =	j
     60  10000 ????
     61  10000 ????		00 dc	    _Pause_Mem_Color_Tmp =	i
     62  10000 ????
     63  10000 ????		00 dc	    _AP_2_Sec_Score_Flip =	i
     64  10000 ????
     65  10000 ????		00 db	    _Pause_Counter_Tmp =	h
     66  10000 ????
     67  10000 ????		00 da	    _F0        =	g
     68  10000 ????
     69  10000 ????		00 d9	    _V0        =	f
     70  10000 ????
     71  10000 ????		00 d8	    _C0        =	e
     72  10000 ????
     73  10000 ????		00 d7	    _Ch0_Counter =	d
     74  10000 ????
     75  10000 ????		00 d6	    _Ch0_Sound =	c
     76  10000 ????
     77  10000 ????		00 d5	    _Frame_Counter =	b
     78  10000 ????
     79  10000 ????		00 d4	    _Master_Counter =	a
     80  10000 ????
     81  10000 ????		00 2b	    vblank_time =	43
     82  10000 ????		00 25	    overscan_time =	37
     83  10000 ????		00 01	    PFcolors   =	1
     84  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_double_animation.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 99	    _P_Edge_Right =	153
      4  10000 ????
      5  10000 ????		00 01	    _P_Edge_Left =	1
      6  10000 ????
      7  10000 ????		00 53	    _P_Edge_Bottom =	83
      8  10000 ????
      9  10000 ????		00 0a	    _P_Edge_Top =	10
     10  10000 ????
     11  10000 ????		00 01	    pfscore    =	1
     12  10000 ????
     13  10000 ????		00 ed	    rand16     =	z
     14  10000 ????
     15  10000 ????		00 ec	    _Bit7_Last_Life =	y
     16  10000 ????
     17  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     18  10000 ????
     19  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     20  10000 ????
     21  10000 ????		00 ec	    _Bit2_Game_Control =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     26  10000 ????
     27  10000 ????		00 ec	    _BitOp_01  =	y
     28  10000 ????
     29  10000 ????		00 eb	    _High_Score3 =	x
     30  10000 ????
     31  10000 ????		00 ea	    _High_Score2 =	w
     32  10000 ????
     33  10000 ????		00 e9	    _High_Score1 =	v
     34  10000 ????
     35  10000 ????		00 e8	    _Score3_Mem =	u
     36  10000 ????
     37  10000 ????		00 e7	    _Score2_Mem =	t
     38  10000 ????
     39  10000 ????		00 e6	    _Score1_Mem =	s
     40  10000 ????
     41  10000 ????		00 95	    _sc3       =	score + 2
     42  10000 ????
     43  10000 ????		00 94	    _sc2       =	score + 1
     44  10000 ????
     45  10000 ????		00 93	    _sc1       =	score
     46  10000 ????
     47  10000 ????		00 e5	    _Bit3_AP_P0_Dir =	r
     48  10000 ????
     49  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     50  10000 ????
     51  10000 ????		00 e5	    _Bit1_BW_Check =	r
     52  10000 ????
     53  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     54  10000 ????
     55  10000 ????		00 e5	    _BitOp_02  =	r
     56  10000 ????
     57  10000 ????		00 dd	    _Pause_Color_Tmp =	j
     58  10000 ????
     59  10000 ????		00 dd	    _AP_Dir_Counter =	j
     60  10000 ????
     61  10000 ????		00 dc	    _Pause_Mem_Color_Tmp =	i
     62  10000 ????
     63  10000 ????		00 dc	    _AP_2_Sec_Score_Flip =	i
     64  10000 ????
     65  10000 ????		00 db	    _Pause_Counter_Tmp =	h
     66  10000 ????
     67  10000 ????		00 da	    _F0        =	g
     68  10000 ????
     69  10000 ????		00 d9	    _V0        =	f
     70  10000 ????
     71  10000 ????		00 d8	    _C0        =	e
     72  10000 ????
     73  10000 ????		00 d7	    _Ch0_Counter =	d
     74  10000 ????
     75  10000 ????		00 d6	    _Ch0_Sound =	c
     76  10000 ????
     77  10000 ????		00 d5	    _Frame_Counter =	b
     78  10000 ????
     79  10000 ????		00 d4	    _Master_Counter =	a
     80  10000 ????
     81  10000 ????		00 2b	    vblank_time =	43
     82  10000 ????		00 25	    overscan_time =	37
     83  10000 ????		00 01	    PFcolors   =	1
     84  10000 ????		00 01	    no_blank_lines =	1
------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_double_animation.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 7f f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 0c		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc					      ifconst	PFcolors
    306  f0dc		       8a		      txa
    307  f0dd		       a8		      tay
    308  f0de		       b1 f0		      lda	(pfcolortable),y
    309  f0e0					      ifnconst	backgroundchange
    310  f0e0		       85 08		      sta	COLUPF
    311  f0e2				  -	      else
    312  f0e2				  -	      sta	COLUBK
    313  f0e2					      endif
    314  f0e2		       4c 8f f0 	      jmp	continuekernel
    315  f0e5				  -	      else
    316  f0e5				  -	      ifconst	kernelmacrodef
    317  f0e5				  -	      kernelmacro
    318  f0e5				  -	      else
    319  f0e5				  -	      sleep	12
    320  f0e5				  -	      endif
    321  f0e5					      endif
    322  f0e5				  -	      else
    323  f0e5				  -	      lda	(player0color),y
    324  f0e5				  -	      sta	player0colorstore
    325  f0e5				  -	      sleep	4
    326  f0e5					      endif
    327  f0e5		       4c 8f f0 	      jmp	continuekernel
    328  f0e8					      endif
    329  f0e8				   altkernel2
    330  f0e8		       8a		      txa
    331  f0e9					      ifnconst	vertical_reflect
    332  f0e9		       cb fc		      sbx	#256-pfwidth
    333  f0eb				  -	      else
    334  f0eb				  -	      sbx	#256-pfwidth/2
    335  f0eb					      endif
    336  f0eb		       30 24		      bmi	lastkernelline
    337  f0ed				  -	      ifconst	pfrowheight
    338  f0ed				  -	      lda	#pfrowheight
    339  f0ed					      else
    340  f0ed					      ifnconst	pfres
    341  f0ed		       a9 08		      lda	#8
    342  f0ef				  -	      else
    343  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ef					      endif
    345  f0ef					      endif
    346  f0ef		       85 9c		      sta	temp1
    347  f0f1		       4c 8f f0 	      jmp	continuekernel
    348  f0f4					      endif
    349  f0f4
    350  f0f4				   altkernel
    351  f0f4
    352  f0f4				  -	      ifconst	PFmaskvalue
    353  f0f4				  -	      lda	#PFmaskvalue
    354  f0f4					      else
    355  f0f4		       a9 00		      lda	#0
    356  f0f6					      endif
    357  f0f6		       85 0e		      sta	PF1L
    358  f0f8		       85 0f		      sta	PF2
    359  f0fa
    360  f0fa
    361  f0fa							;sleep 3
    362  f0fa
    363  f0fa							;28 cycles to fix things
    364  f0fa							;minus 11=17
    365  f0fa
    366  f0fa							; lax temp4
    367  f0fa							; clc
    368  f0fa		       8a		      txa
    369  f0fb					      ifnconst	vertical_reflect
    370  f0fb		       cb fc		      sbx	#256-pfwidth
    371  f0fd				  -	      else
    372  f0fd				  -	      sbx	#256-pfwidth/2
    373  f0fd					      endif
    374  f0fd
    375  f0fd		       30 12		      bmi	lastkernelline
    376  f0ff
    377  f0ff				  -	      ifconst	PFcolorandheight
    378  f0ff				  -	      ifconst	pfres
    379  f0ff				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ff				  -	      else
    381  f0ff				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ff				  -	      endif
    383  f0ff				  -	      ifnconst	backgroundchange
    384  f0ff				  -	      sty	COLUPF
    385  f0ff				  -	      else
    386  f0ff				  -	      sty	COLUBK
    387  f0ff				  -	      endif
    388  f0ff				  -	      ifconst	pfres
    389  f0ff				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ff				  -	      else
    391  f0ff				  -	      lda	playfieldcolorandheight-88,x
    392  f0ff				  -	      endif
    393  f0ff				  -	      sta.w	temp1
    394  f0ff					      endif
    395  f0ff				  -	      ifconst	PFheights
    396  f0ff				  -	      lsr
    397  f0ff				  -	      lsr
    398  f0ff				  -	      tay
    399  f0ff				  -	      lda	(pfheighttable),y
    400  f0ff				  -	      sta.w	temp1
    401  f0ff					      endif
    402  f0ff					      ifconst	PFcolors
    403  f0ff		       a8		      tay
    404  f100		       b1 f0		      lda	(pfcolortable),y
    405  f102					      ifnconst	backgroundchange
    406  f102		       85 08		      sta	COLUPF
    407  f104				  -	      else
    408  f104				  -	      sta	COLUBK
    409  f104					      endif
    410  f104				  -	      ifconst	pfrowheight
    411  f104				  -	      lda	#pfrowheight
    412  f104					      else
    413  f104					      ifnconst	pfres
    414  f104		       a9 08		      lda	#8
    415  f106				  -	      else
    416  f106				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f106					      endif
    418  f106					      endif
    419  f106		       85 9c		      sta	temp1
    420  f108					      endif
    421  f108					      ifnconst	PFcolorandheight
    422  f108				  -	      ifnconst	PFcolors
    423  f108				  -	      ifnconst	PFheights
    424  f108				  -	      ifnconst	no_blank_lines
    425  f108				  -			; read paddle 0
    426  f108				  -			; lo-res paddle read
    427  f108				  -			; bit INPT0
    428  f108				  -			; bmi paddleskipread
    429  f108				  -			; inc paddle0
    430  f108				  -			;donepaddleskip
    431  f108				  -	      sleep	10
    432  f108				  -	      ifconst	pfrowheight
    433  f108				  -	      lda	#pfrowheight
    434  f108				  -	      else
    435  f108				  -	      ifnconst	pfres
    436  f108				  -	      lda	#8
    437  f108				  -	      else
    438  f108				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f108				  -	      endif
    440  f108				  -	      endif
    441  f108				  -	      sta	temp1
    442  f108				  -	      endif
    443  f108				  -	      endif
    444  f108					      endif
    445  f108					      endif
    446  f108
    447  f108
    448  f108		       a5 92		      lda	ballheight
    449  f10a		       c7 89		      dcp	bally
    450  f10c		       e5 9f		      sbc	temp4
    451  f10e
    452  f10e
    453  f10e		       4c a6 f0 	      jmp	goback
    454  f111
    455  f111
    456  f111				  -	      ifnconst	no_blank_lines
    457  f111				  -lastkernelline
    458  f111				  -	      ifnconst	PFcolors
    459  f111				  -	      sleep	10
    460  f111				  -	      else
    461  f111				  -	      ldy	#124
    462  f111				  -	      lda	(pfcolortable),y
    463  f111				  -	      sta	COLUPF
    464  f111				  -	      endif
    465  f111				  -
    466  f111				  -	      ifconst	PFheights
    467  f111				  -	      ldx	#1
    468  f111				  -			;sleep 4
    469  f111				  -	      sleep	3	; this was over 1 cycle
    470  f111				  -	      else
    471  f111				  -	      ldx	playfieldpos
    472  f111				  -			;sleep 3
    473  f111				  -	      sleep	2	; this was over 1 cycle
    474  f111				  -	      endif
    475  f111				  -
    476  f111				  -	      jmp	enterlastkernel
    477  f111				  -
    478  f111					      else
    479  f111				   lastkernelline
    480  f111
    481  f111				  -	      ifconst	PFheights
    482  f111				  -	      ldx	#1
    483  f111				  -			;sleep 5
    484  f111				  -	      sleep	4	; this was over 1 cycle
    485  f111					      else
    486  f111		       a6 ef		      ldx	playfieldpos
    487  f113							;sleep 4
      0  f113					      sleep	3	; this was over 1 cycle
      1  f113				   .CYCLES    SET	3
      2  f113
      3  f113				  -	      IF	.CYCLES < 2
      4  f113				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f113				  -	      ERR
      6  f113					      ENDIF
      7  f113
      8  f113					      IF	.CYCLES & 1
      9  f113					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f113		       04 00		      nop	0
     11  f115				  -	      ELSE
     12  f115				  -	      bit	VSYNC
     13  f115					      ENDIF
     14  f115				   .CYCLES    SET	.CYCLES - 3
     15  f115					      ENDIF
     16  f115
     17  f115				  -	      REPEAT	.CYCLES / 2
     18  f115				  -	      nop
     19  f115					      REPEND
    489  f115					      endif
    490  f115
    491  f115		       e0 00		      cpx	#0
    492  f117		       d0 0a		      bne	.enterfromNBL
    493  f119		       4c 84 f1 	      jmp	no_blank_lines_bailout
    494  f11c					      endif
    495  f11c
    496  f11c				  -	      if	((<*)>$d5)
    497  f11c				  -	      align	256
    498  f11c					      endif
    499  f11c							; this is a kludge to prevent page wrapping - fix!!!
    500  f11c
    501  f11c				   .skipDrawlastP1
    502  f11c		       a9 00		      lda	#0
    503  f11e		       a8		      tay		; added so we don't cross a page
    504  f11f		       4c 49 f1 	      jmp	.continuelastP1
    505  f122
    506  f122				   .endkerloop		; enter at cycle 59??
    507  f122
    508  f122		       ea		      nop
    509  f123
    510  f123				   .enterfromNBL
    511  f123				  -	      ifconst	pfres
    512  f123				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f123				  -	      sty	PF1L	;3
    514  f123				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f123				  -	      sty	PF2L	;3
    516  f123				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f123				  -	      sty	PF1R	; possibly too early?
    518  f123				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f123				  -	      sty	PF2R	;3
    520  f123					      else
    521  f123		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f126		       84 0e		      sty	PF1L	;3
    523  f128		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f12b		       84 0f		      sty	PF2L	;3
    525  f12d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f130		       84 0e		      sty	PF1R	; possibly too early?
    527  f132		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f135		       84 0f		      sty	PF2R	;3
    529  f137					      endif
    530  f137
    531  f137				   enterlastkernel
    532  f137		       a5 92		      lda	ballheight
    533  f139
    534  f139							; tya
    535  f139		       c7 89		      dcp	bally
    536  f13b							; sleep 4
    537  f13b
    538  f13b							; sbc stack3
    539  f13b		       2a		      rol
    540  f13c		       2a		      rol
    541  f13d		       85 1f		      sta	ENABL
    542  f13f
    543  f13f		       a5 8f		      lda	player1height	;3
    544  f141		       c7 86		      dcp	player1y	;5
    545  f143		       90 d7		      bcc	.skipDrawlastP1
    546  f145		       a4 86		      ldy	player1y	;3
    547  f147		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f149							; so it doesn't cross a page boundary!
    549  f149
    550  f149				   .continuelastP1
    551  f149		       85 1c		      sta	GRP1	;3
    552  f14b
    553  f14b					      ifnconst	player1colors
    554  f14b		       a5 87		      lda	missile1height	;3
    555  f14d		       c7 88		      dcp	missile1y	;5
    556  f14f				  -	      else
    557  f14f				  -	      lda	(player1color),y
    558  f14f				  -	      sta	COLUP1
    559  f14f					      endif
    560  f14f
    561  f14f		       ca		      dex
    562  f150							;dec temp4 ; might try putting this above PF writes
    563  f150		       f0 34		      beq	endkernel
    564  f152
    565  f152
    566  f152				  -	      ifconst	pfres
    567  f152				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f152				  -	      sty	PF1L	;3
    569  f152				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f152				  -	      sty	PF2L	;3
    571  f152				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f152				  -	      sty	PF1R	; possibly too early?
    573  f152				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f152				  -	      sty	PF2R	;3
    575  f152					      else
    576  f152		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f155		       84 0e		      sty	PF1L	;3
    578  f157		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f15a		       84 0f		      sty	PF2L	;3
    580  f15c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f15f		       84 0e		      sty	PF1R	; possibly too early?
    582  f161		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f164		       84 0f		      sty	PF2R	;3
    584  f166					      endif
    585  f166
    586  f166					      ifnconst	player1colors
    587  f166		       2a		      rol		;2
    588  f167		       2a		      rol		;2
    589  f168		       85 1e		      sta	ENAM1	;3
    590  f16a				  -	      else
    591  f16a				  -	      ifnconst	playercolors
    592  f16a				  -	      sleep	7
    593  f16a				  -	      else
    594  f16a				  -	      lda.w	player0colorstore
    595  f16a				  -	      sta	COLUP0
    596  f16a				  -	      endif
    597  f16a					      endif
    598  f16a
    599  f16a		       ad 8e 00 	      lda.w	player0height
    600  f16d		       c7 85		      dcp	player0y
    601  f16f		       90 0d		      bcc	.skipDrawlastP0
    602  f171		       a4 85		      ldy	player0y
    603  f173		       b1 8a		      lda	(player0pointer),y
    604  f175				   .continuelastP0
    605  f175		       85 1b		      sta	GRP0
    606  f177
    607  f177
    608  f177
    609  f177				  -	      ifnconst	no_blank_lines
    610  f177				  -	      lda	missile0height	;3
    611  f177				  -	      dcp	missile0y	;5
    612  f177				  -	      sbc	stack1
    613  f177				  -	      sta	ENAM0	;3
    614  f177				  -	      jmp	.endkerloop
    615  f177					      else
    616  f177				  -	      ifconst	readpaddle
    617  f177				  -	      ldy	currentpaddle
    618  f177				  -	      lda	INPT0,y
    619  f177				  -	      bpl	noreadpaddle2
    620  f177				  -	      inc	paddle
    621  f177				  -	      jmp	.endkerloop
    622  f177				  -noreadpaddle2
    623  f177				  -	      sleep	4
    624  f177				  -	      jmp	.endkerloop
    625  f177					      else		; no_blank_lines and no paddle reading
    626  f177		       68		      pla
    627  f178		       48		      pha		; 14 cycles in 4 bytes
    628  f179		       68		      pla
    629  f17a		       48		      pha
    630  f17b							; sleep 14
    631  f17b		       4c 22 f1 	      jmp	.endkerloop
    632  f17e					      endif
    633  f17e					      endif
    634  f17e
    635  f17e
    636  f17e							; ifconst donepaddleskip
    637  f17e							;paddleskipread
    638  f17e							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f17e							; plus we get a lo-res paddle read
    640  f17e							; bmi donepaddleskip
    641  f17e							; endif
    642  f17e
    643  f17e				   .skipDrawlastP0
    644  f17e		       a9 00		      lda	#0
    645  f180		       a8		      tay
    646  f181		       4c 75 f1 	      jmp	.continuelastP0
    647  f184
    648  f184					      ifconst	no_blank_lines
    649  f184				   no_blank_lines_bailout
    650  f184		       a2 00		      ldx	#0
    651  f186					      endif
    652  f186
    653  f186				   endkernel
    654  f186							; 6 digit score routine
    655  f186		       86 0e		      stx	PF1
    656  f188		       86 0f		      stx	PF2
    657  f18a		       86 0d		      stx	PF0
    658  f18c		       18		      clc
    659  f18d
    660  f18d				  -	      ifconst	pfrowheight
    661  f18d				  -	      lda	#pfrowheight+2
    662  f18d					      else
    663  f18d					      ifnconst	pfres
    664  f18d		       a9 0a		      lda	#10
    665  f18f				  -	      else
    666  f18f				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f18f					      endif
    668  f18f					      endif
    669  f18f
    670  f18f		       e5 ef		      sbc	playfieldpos
    671  f191		       85 ef		      sta	playfieldpos
    672  f193		       8a		      txa
    673  f194
    674  f194				  -	      ifconst	shakescreen
    675  f194				  -	      bit	shakescreen
    676  f194				  -	      bmi	noshakescreen2
    677  f194				  -	      ldx	#$3D
    678  f194				  -noshakescreen2
    679  f194					      endif
    680  f194
    681  f194		       95 02		      sta	WSYNC,x
    682  f196
    683  f196							; STA WSYNC ;first one, need one more
    684  f196		       85 0b		      sta	REFP0
    685  f198		       85 0c		      sta	REFP1
    686  f19a		       85 1b		      STA	GRP0
    687  f19c		       85 1c		      STA	GRP1
    688  f19e							; STA PF1
    689  f19e							; STA PF2
    690  f19e		       85 2b		      sta	HMCLR
    691  f1a0		       85 1d		      sta	ENAM0
    692  f1a2		       85 1e		      sta	ENAM1
    693  f1a4		       85 1f		      sta	ENABL
    694  f1a6
    695  f1a6		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f1a8		       85 85		      sta	player0y
    697  f1aa		       a5 9e		      lda	temp3
    698  f1ac		       85 86		      sta	player1y
    699  f1ae					      ifnconst	player1colors
    700  f1ae		       a5 a1		      lda	temp6
    701  f1b0		       85 88		      sta	missile1y
    702  f1b2					      endif
    703  f1b2					      ifnconst	playercolors
    704  f1b2					      ifnconst	readpaddle
    705  f1b2		       a5 a0		      lda	temp5
    706  f1b4		       85 91		      sta	missile0y
    707  f1b6					      endif
    708  f1b6					      endif
    709  f1b6		       a5 f7		      lda	stack2
    710  f1b8		       85 89		      sta	bally
    711  f1ba
    712  f1ba							; strangely, this isn't required any more. might have
    713  f1ba							; resulted from the no_blank_lines score bounce fix
    714  f1ba							;ifconst no_blank_lines
    715  f1ba							;sta WSYNC
    716  f1ba							;endif
    717  f1ba
    718  f1ba		       ad 84 02 	      lda	INTIM
    719  f1bd		       18		      clc
    720  f1be				  -	      ifnconst	vblank_time
    721  f1be				  -	      adc	#43+12+87
    722  f1be					      else
    723  f1be		       69 8e		      adc	#vblank_time+12+87
    724  f1c0
    725  f1c0					      endif
    726  f1c0							; sta WSYNC
    727  f1c0		       8d 96 02 	      sta	TIM64T
    728  f1c3
    729  f1c3				  -	      ifconst	minikernel
    730  f1c3				  -	      jsr	minikernel
    731  f1c3					      endif
    732  f1c3
    733  f1c3							; now reassign temp vars for score pointers
    734  f1c3
    735  f1c3							; score pointers contain:
    736  f1c3							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1c3							; swap lo2->temp1
    738  f1c3							; swap lo4->temp3
    739  f1c3							; swap lo6->temp5
    740  f1c3					      ifnconst	noscore
    741  f1c3		       a5 97		      lda	scorepointers+1
    742  f1c5							; ldy temp1
    743  f1c5		       85 9c		      sta	temp1
    744  f1c7							; sty scorepointers+1
    745  f1c7
    746  f1c7		       a5 99		      lda	scorepointers+3
    747  f1c9							; ldy temp3
    748  f1c9		       85 9e		      sta	temp3
    749  f1cb							; sty scorepointers+3
    750  f1cb
    751  f1cb
    752  f1cb		       85 2b		      sta	HMCLR
    753  f1cd		       ba		      tsx
    754  f1ce		       86 f6		      stx	stack1
    755  f1d0		       a2 e0		      ldx	#$E0
    756  f1d2		       86 20		      stx	HMP0
    757  f1d4
    758  f1d4		       a5 a3		      LDA	scorecolor
    759  f1d6		       85 06		      STA	COLUP0
    760  f1d8		       85 07		      STA	COLUP1
    761  f1da				  -	      ifconst	scorefade
    762  f1da				  -	      STA	stack2
    763  f1da					      endif
    764  f1da					      ifconst	pfscore
    765  f1da		       a5 f4		      lda	pfscorecolor
    766  f1dc		       85 08		      sta	COLUPF
    767  f1de					      endif
    768  f1de		       85 02		      sta	WSYNC
    769  f1e0		       a2 00		      ldx	#0
    770  f1e2		       86 1b		      STx	GRP0
    771  f1e4		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1e6
    773  f1e6		       a5 9b		      lda	scorepointers+5
    774  f1e8							; ldy temp5
    775  f1e8		       95 a0		      sta	temp5,x
    776  f1ea							; sty scorepointers+5
    777  f1ea		       a9 ff		      lda	#>scoretable
    778  f1ec		       85 97		      sta	scorepointers+1
    779  f1ee		       85 99		      sta	scorepointers+3
    780  f1f0		       85 9b		      sta	scorepointers+5
    781  f1f2		       85 9d		      sta	temp2
    782  f1f4		       85 9f		      sta	temp4
    783  f1f6		       85 a1		      sta	temp6
    784  f1f8		       a0 07		      LDY	#7
    785  f1fa		       84 25		      STY	VDELP0
    786  f1fc		       85 10		      STA	RESP0
    787  f1fe		       85 11		      STA	RESP1
    788  f200
    789  f200
    790  f200		       a9 03		      LDA	#$03
    791  f202		       85 04		      STA	NUSIZ0
    792  f204		       85 05		      STA	NUSIZ1
    793  f206		       85 26		      STA	VDELP1
    794  f208		       a9 f0		      LDA	#$F0
    795  f20a		       85 21		      STA	HMP1
    796  f20c		       b1 96		      lda	(scorepointers),y
    797  f20e		       85 1b		      sta	GRP0
    798  f210		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f212		       4c 1e f2 	      jmp	beginscore
    800  f215
    801  f215
    802  f215				  -	      if	((<*)>$d4)
    803  f215				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f215					      endif
    805  f215
    806  f215				   loop2
    807  f215		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f217		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f219					      ifconst	pfscore
    810  f219		       ad f2 00 	      lda.w	pfscore1
    811  f21c		       85 0e		      sta	PF1
    812  f21e				  -	      else
    813  f21e				  -	      ifconst	scorefade
    814  f21e				  -	      sleep	2
    815  f21e				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f21e				  -	      else
    817  f21e				  -	      sleep	7
    818  f21e				  -	      endif
    819  f21e					      endif
    820  f21e							; cycle 0
    821  f21e				   beginscore
    822  f21e		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f220		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f222		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f224		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f226		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f228		       9a		      txs
    828  f229		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f22b				  -	      ifconst	scorefade
    830  f22b				  -	      lda	stack2
    831  f22b					      else
      0  f22b					      sleep	3
      1  f22b				   .CYCLES    SET	3
      2  f22b
      3  f22b				  -	      IF	.CYCLES < 2
      4  f22b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f22b				  -	      ERR
      6  f22b					      ENDIF
      7  f22b
      8  f22b					      IF	.CYCLES & 1
      9  f22b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f22b		       04 00		      nop	0
     11  f22d				  -	      ELSE
     12  f22d				  -	      bit	VSYNC
     13  f22d					      ENDIF
     14  f22d				   .CYCLES    SET	.CYCLES - 3
     15  f22d					      ENDIF
     16  f22d
     17  f22d				  -	      REPEAT	.CYCLES / 2
     18  f22d				  -	      nop
     19  f22d					      REPEND
    833  f22d					      endif
    834  f22d
    835  f22d					      ifconst	pfscore
    836  f22d		       a5 f3		      lda	pfscore2
    837  f22f		       85 0e		      sta	PF1
    838  f231				  -	      else
    839  f231				  -	      ifconst	scorefade
    840  f231				  -	      sta	COLUP0
    841  f231				  -	      sta	COLUP1
    842  f231				  -	      else
    843  f231				  -	      sleep	6
    844  f231				  -	      endif
    845  f231					      endif
    846  f231
    847  f231		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f233		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f235		       ba		      tsx
    850  f236		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f238		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f23a		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f23c		       88		      dey
    854  f23d		       10 d6		      bpl	loop2	;+2 60 180
    855  f23f
    856  f23f		       a6 f6		      ldx	stack1
    857  f241		       9a		      txs
    858  f242							; lda scorepointers+1
    859  f242		       a4 9c		      ldy	temp1
    860  f244							; sta temp1
    861  f244		       84 97		      sty	scorepointers+1
    862  f246
    863  f246		       a9 00		      LDA	#0
    864  f248		       85 0e		      sta	PF1
    865  f24a		       85 1b		      STA	GRP0
    866  f24c		       85 1c		      STA	GRP1
    867  f24e		       85 25		      STA	VDELP0
    868  f250		       85 26		      STA	VDELP1	;do we need these
    869  f252		       85 04		      STA	NUSIZ0
    870  f254		       85 05		      STA	NUSIZ1
    871  f256
    872  f256							; lda scorepointers+3
    873  f256		       a4 9e		      ldy	temp3
    874  f258							; sta temp3
    875  f258		       84 99		      sty	scorepointers+3
    876  f25a
    877  f25a							; lda scorepointers+5
    878  f25a		       a4 a0		      ldy	temp5
    879  f25c							; sta temp5
    880  f25c		       84 9b		      sty	scorepointers+5
    881  f25e					      endif		;noscore
    882  f25e				  -	      ifconst	readpaddle
    883  f25e				  -	      lda	#%11000010
    884  f25e					      else
    885  f25e				  -	      ifconst	qtcontroller
    886  f25e				  -	      lda	qtcontroller
    887  f25e				  -	      lsr		; bit 0 in carry
    888  f25e				  -	      lda	#4
    889  f25e				  -	      ror		; carry into top of A
    890  f25e					      else
    891  f25e		       a9 02		      lda	#2
    892  f260					      endif		; qtcontroller
    893  f260					      endif		; readpaddle
    894  f260		       85 02		      sta	WSYNC
    895  f262		       85 01		      sta	VBLANK
      0  f264					      RETURN
      1  f264					      ifnconst	bankswitch
      2  f264		       60		      rts
      3  f265				  -	      else
      4  f265				  -	      jmp	BS_return
      5  f265					      endif
    897  f265				  -	      ifconst	shakescreen
    898  f265				  -doshakescreen
    899  f265				  -	      bit	shakescreen
    900  f265				  -	      bmi	noshakescreen
    901  f265				  -	      sta	WSYNC
    902  f265				  -noshakescreen
    903  f265				  -	      ldx	missile0height
    904  f265				  -	      inx
    905  f265				  -	      rts
    906  f265					      endif
    907  f265
    908  f265							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f265
    910  f265							; playfield drawing routines
    911  f265							; you get a 32x12 bitmapped display in a single color :)
    912  f265							; 0-31 and 0-11
    913  f265
    914  f265				   pfclear		; clears playfield - or fill with pattern
    915  f265				  -	      ifconst	pfres
    916  f265				  -	      ldx	#pfres*pfwidth-1
    917  f265					      else
    918  f265		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f267					      endif
    920  f267				   pfclear_loop
    921  f267					      ifnconst	superchip
    922  f267		       95 a4		      sta	playfield,x
    923  f269				  -	      else
    924  f269				  -	      sta	playfield-128,x
    925  f269					      endif
    926  f269		       ca		      dex
    927  f26a		       10 fb		      bpl	pfclear_loop
      0  f26c					      RETURN
      1  f26c					      ifnconst	bankswitch
      2  f26c		       60		      rts
      3  f26d				  -	      else
      4  f26d				  -	      jmp	BS_return
      5  f26d					      endif
    929  f26d
    930  f26d				   setuppointers
    931  f26d		       86 9d		      stx	temp2	; store on.off.flip value
    932  f26f		       aa		      tax		; put x-value in x 
    933  f270		       4a		      lsr
    934  f271		       4a		      lsr
    935  f272		       4a		      lsr		; divide x pos by 8 
    936  f273		       85 9c		      sta	temp1
    937  f275		       98		      tya
    938  f276		       0a		      asl
    939  f277					      if	pfwidth=4
    940  f277		       0a		      asl		; multiply y pos by 4
    941  f278					      endif		; else multiply by 2
    942  f278		       18		      clc
    943  f279		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f27b		       a8		      tay		; put the value in y
    945  f27c		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f27e		       60		      rts
    947  f27f
    948  f27f				   pfread
    949  f27f							;x=xvalue, y=yvalue
    950  f27f		       20 6d f2 	      jsr	setuppointers
    951  f282		       bd e7 f2 	      lda	setbyte,x
    952  f285		       39 a4 00 	      and	playfield,y
    953  f288		       5d e7 f2 	      eor	setbyte,x
    954  f28b							; beq readzero
    955  f28b							; lda #1
    956  f28b							; readzero
      0  f28b					      RETURN
      1  f28b					      ifnconst	bankswitch
      2  f28b		       60		      rts
      3  f28c				  -	      else
      4  f28c				  -	      jmp	BS_return
      5  f28c					      endif
    958  f28c
    959  f28c				   pfpixel
    960  f28c							;x=xvalue, y=yvalue, a=0,1,2
    961  f28c		       20 6d f2 	      jsr	setuppointers
    962  f28f
    963  f28f				  -	      ifconst	bankswitch
    964  f28f				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f28f				  -	      beq	pixelon_r	; if "on" go to on
    966  f28f				  -	      lsr
    967  f28f				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f28f				  -	      lda	playfield,y	; if here, it's "flip"
    969  f28f				  -	      eor	setbyte,x
    970  f28f				  -	      ifconst	superchip
    971  f28f				  -	      sta	playfield-128,y
    972  f28f				  -	      else
    973  f28f				  -	      sta	playfield,y
    974  f28f				  -	      endif
    975  f28f				  -	      RETURN
    976  f28f				  -pixelon_r
    977  f28f				  -	      lda	playfield,y
    978  f28f				  -	      ora	setbyte,x
    979  f28f				  -	      ifconst	superchip
    980  f28f				  -	      sta	playfield-128,y
    981  f28f				  -	      else
    982  f28f				  -	      sta	playfield,y
    983  f28f				  -	      endif
    984  f28f				  -	      RETURN
    985  f28f				  -pixeloff_r
    986  f28f				  -	      lda	setbyte,x
    987  f28f				  -	      eor	#$ff
    988  f28f				  -	      and	playfield,y
    989  f28f				  -	      ifconst	superchip
    990  f28f				  -	      sta	playfield-128,y
    991  f28f				  -	      else
    992  f28f				  -	      sta	playfield,y
    993  f28f				  -	      endif
    994  f28f				  -	      RETURN
    995  f28f				  -
    996  f28f					      else
    997  f28f		       4c c0 f2 	      jmp	plotpoint
    998  f292					      endif
    999  f292
   1000  f292				   pfhline
   1001  f292							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f292		       20 6d f2 	      jsr	setuppointers
   1003  f295		       4c 9f f2 	      jmp	noinc
   1004  f298				   keepgoing
   1005  f298		       e8		      inx
   1006  f299		       8a		      txa
   1007  f29a		       29 07		      and	#7
   1008  f29c		       d0 01		      bne	noinc
   1009  f29e		       c8		      iny
   1010  f29f				   noinc
   1011  f29f		       20 c0 f2 	      jsr	plotpoint
   1012  f2a2		       e4 9e		      cpx	temp3
   1013  f2a4		       30 f2		      bmi	keepgoing
      0  f2a6					      RETURN
      1  f2a6					      ifnconst	bankswitch
      2  f2a6		       60		      rts
      3  f2a7				  -	      else
      4  f2a7				  -	      jmp	BS_return
      5  f2a7					      endif
   1015  f2a7
   1016  f2a7				   pfvline
   1017  f2a7							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f2a7		       20 6d f2 	      jsr	setuppointers
   1019  f2aa		       84 9c		      sty	temp1	; store memory location offset
   1020  f2ac		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2ae		       a5 9e		      lda	temp3
   1022  f2b0		       0a		      asl
   1023  f2b1					      if	pfwidth=4
   1024  f2b1		       0a		      asl		; multiply by 4
   1025  f2b2					      endif		; else multiply by 2
   1026  f2b2		       85 9e		      sta	temp3	; store it
   1027  f2b4							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2b4							; right now, temp1=y=starting memory location, temp3=final
   1029  f2b4							; x should equal original x value
   1030  f2b4				   keepgoingy
   1031  f2b4		       20 c0 f2 	      jsr	plotpoint
   1032  f2b7		       c8		      iny
   1033  f2b8		       c8		      iny
   1034  f2b9					      if	pfwidth=4
   1035  f2b9		       c8		      iny
   1036  f2ba		       c8		      iny
   1037  f2bb					      endif
   1038  f2bb		       c4 9e		      cpy	temp3
   1039  f2bd		       30 f5		      bmi	keepgoingy
      0  f2bf					      RETURN
      1  f2bf					      ifnconst	bankswitch
      2  f2bf		       60		      rts
      3  f2c0				  -	      else
      4  f2c0				  -	      jmp	BS_return
      5  f2c0					      endif
   1041  f2c0
   1042  f2c0				   plotpoint
   1043  f2c0		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2c2		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2c4		       4a		      lsr
   1046  f2c5		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2c7		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2ca		       5d e7 f2 	      eor	setbyte,x
   1049  f2cd				  -	      ifconst	superchip
   1050  f2cd				  -	      sta	playfield-128,y
   1051  f2cd					      else
   1052  f2cd		       99 a4 00 	      sta	playfield,y
   1053  f2d0					      endif
   1054  f2d0		       60		      rts
   1055  f2d1				   pixelon
   1056  f2d1		       b9 a4 00 	      lda	playfield,y
   1057  f2d4		       1d e7 f2 	      ora	setbyte,x
   1058  f2d7				  -	      ifconst	superchip
   1059  f2d7				  -	      sta	playfield-128,y
   1060  f2d7					      else
   1061  f2d7		       99 a4 00 	      sta	playfield,y
   1062  f2da					      endif
   1063  f2da		       60		      rts
   1064  f2db				   pixeloff
   1065  f2db		       bd e7 f2 	      lda	setbyte,x
   1066  f2de		       49 ff		      eor	#$ff
   1067  f2e0		       39 a4 00 	      and	playfield,y
   1068  f2e3				  -	      ifconst	superchip
   1069  f2e3				  -	      sta	playfield-128,y
   1070  f2e3					      else
   1071  f2e3		       99 a4 00 	      sta	playfield,y
   1072  f2e6					      endif
   1073  f2e6		       60		      rts
   1074  f2e7
   1075  f2e7				   setbyte
   1076  f2e7					      ifnconst	pfcenter
   1077  f2e7		       80		      .byte.b	$80
   1078  f2e8		       40		      .byte.b	$40
   1079  f2e9		       20		      .byte.b	$20
   1080  f2ea		       10		      .byte.b	$10
   1081  f2eb		       08		      .byte.b	$08
   1082  f2ec		       04		      .byte.b	$04
   1083  f2ed		       02		      .byte.b	$02
   1084  f2ee		       01		      .byte.b	$01
   1085  f2ef					      endif
   1086  f2ef		       01		      .byte.b	$01
   1087  f2f0		       02		      .byte.b	$02
   1088  f2f1		       04		      .byte.b	$04
   1089  f2f2		       08		      .byte.b	$08
   1090  f2f3		       10		      .byte.b	$10
   1091  f2f4		       20		      .byte.b	$20
   1092  f2f5		       40		      .byte.b	$40
   1093  f2f6		       80		      .byte.b	$80
   1094  f2f7		       80		      .byte.b	$80
   1095  f2f8		       40		      .byte.b	$40
   1096  f2f9		       20		      .byte.b	$20
   1097  f2fa		       10		      .byte.b	$10
   1098  f2fb		       08		      .byte.b	$08
   1099  f2fc		       04		      .byte.b	$04
   1100  f2fd		       02		      .byte.b	$02
   1101  f2fe		       01		      .byte.b	$01
   1102  f2ff		       01		      .byte.b	$01
   1103  f300		       02		      .byte.b	$02
   1104  f301		       04		      .byte.b	$04
   1105  f302		       08		      .byte.b	$08
   1106  f303		       10		      .byte.b	$10
   1107  f304		       20		      .byte.b	$20
   1108  f305		       40		      .byte.b	$40
   1109  f306		       80		      .byte.b	$80
   1110  f307							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f307
   1112  f307				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f307		       d0 13		      bne	notleft
   1114  f309							;left
   1115  f309				  -	      ifconst	pfres
   1116  f309				  -	      ldx	#pfres*4
   1117  f309					      else
   1118  f309		       a2 30		      ldx	#48
   1119  f30b					      endif
   1120  f30b				   leftloop
   1121  f30b		       b5 a3		      lda	playfield-1,x
   1122  f30d		       4a		      lsr
   1123  f30e
   1124  f30e				  -	      ifconst	superchip
   1125  f30e				  -	      lda	playfield-2,x
   1126  f30e				  -	      rol
   1127  f30e				  -	      sta	playfield-130,x
   1128  f30e				  -	      lda	playfield-3,x
   1129  f30e				  -	      ror
   1130  f30e				  -	      sta	playfield-131,x
   1131  f30e				  -	      lda	playfield-4,x
   1132  f30e				  -	      rol
   1133  f30e				  -	      sta	playfield-132,x
   1134  f30e				  -	      lda	playfield-1,x
   1135  f30e				  -	      ror
   1136  f30e				  -	      sta	playfield-129,x
   1137  f30e					      else
   1138  f30e		       36 a2		      rol	playfield-2,x
   1139  f310		       76 a1		      ror	playfield-3,x
   1140  f312		       36 a0		      rol	playfield-4,x
   1141  f314		       76 a3		      ror	playfield-1,x
   1142  f316					      endif
   1143  f316
   1144  f316		       8a		      txa
   1145  f317		       cb 04		      sbx	#4
   1146  f319		       d0 f0		      bne	leftloop
      0  f31b					      RETURN
      1  f31b					      ifnconst	bankswitch
      2  f31b		       60		      rts
      3  f31c				  -	      else
      4  f31c				  -	      jmp	BS_return
      5  f31c					      endif
   1148  f31c
   1149  f31c				   notleft
   1150  f31c		       4a		      lsr
   1151  f31d		       90 13		      bcc	notright
   1152  f31f							;right
   1153  f31f
   1154  f31f				  -	      ifconst	pfres
   1155  f31f				  -	      ldx	#pfres*4
   1156  f31f					      else
   1157  f31f		       a2 30		      ldx	#48
   1158  f321					      endif
   1159  f321				   rightloop
   1160  f321		       b5 a0		      lda	playfield-4,x
   1161  f323		       4a		      lsr
   1162  f324				  -	      ifconst	superchip
   1163  f324				  -	      lda	playfield-3,x
   1164  f324				  -	      rol
   1165  f324				  -	      sta	playfield-131,x
   1166  f324				  -	      lda	playfield-2,x
   1167  f324				  -	      ror
   1168  f324				  -	      sta	playfield-130,x
   1169  f324				  -	      lda	playfield-1,x
   1170  f324				  -	      rol
   1171  f324				  -	      sta	playfield-129,x
   1172  f324				  -	      lda	playfield-4,x
   1173  f324				  -	      ror
   1174  f324				  -	      sta	playfield-132,x
   1175  f324					      else
   1176  f324		       36 a1		      rol	playfield-3,x
   1177  f326		       76 a2		      ror	playfield-2,x
   1178  f328		       36 a3		      rol	playfield-1,x
   1179  f32a		       76 a0		      ror	playfield-4,x
   1180  f32c					      endif
   1181  f32c		       8a		      txa
   1182  f32d		       cb 04		      sbx	#4
   1183  f32f		       d0 f0		      bne	rightloop
      0  f331					      RETURN
      1  f331					      ifnconst	bankswitch
      2  f331		       60		      rts
      3  f332				  -	      else
      4  f332				  -	      jmp	BS_return
      5  f332					      endif
   1185  f332
   1186  f332				   notright
   1187  f332		       4a		      lsr
   1188  f333		       90 49		      bcc	notup
   1189  f335							;up
   1190  f335		       4a		      lsr
   1191  f336		       90 02		      bcc	onedecup
   1192  f338		       c6 ef		      dec	playfieldpos
   1193  f33a				   onedecup
   1194  f33a		       c6 ef		      dec	playfieldpos
   1195  f33c		       f0 02		      beq	shiftdown
   1196  f33e		       10 3d		      bpl	noshiftdown2
   1197  f340				   shiftdown
   1198  f340				  -	      ifconst	pfrowheight
   1199  f340				  -	      lda	#pfrowheight
   1200  f340					      else
   1201  f340					      ifnconst	pfres
   1202  f340		       a9 08		      lda	#8
   1203  f342				  -	      else
   1204  f342				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f342					      endif
   1206  f342					      endif
   1207  f342
   1208  f342		       85 ef		      sta	playfieldpos
   1209  f344		       a5 a7		      lda	playfield+3
   1210  f346		       85 9f		      sta	temp4
   1211  f348		       a5 a6		      lda	playfield+2
   1212  f34a		       85 9e		      sta	temp3
   1213  f34c		       a5 a5		      lda	playfield+1
   1214  f34e		       85 9d		      sta	temp2
   1215  f350		       a5 a4		      lda	playfield
   1216  f352		       85 9c		      sta	temp1
   1217  f354		       a2 00		      ldx	#0
   1218  f356				   up2
   1219  f356		       b5 a8		      lda	playfield+4,x
   1220  f358				  -	      ifconst	superchip
   1221  f358				  -	      sta	playfield-128,x
   1222  f358				  -	      lda	playfield+5,x
   1223  f358				  -	      sta	playfield-127,x
   1224  f358				  -	      lda	playfield+6,x
   1225  f358				  -	      sta	playfield-126,x
   1226  f358				  -	      lda	playfield+7,x
   1227  f358				  -	      sta	playfield-125,x
   1228  f358					      else
   1229  f358		       95 a4		      sta	playfield,x
   1230  f35a		       b5 a9		      lda	playfield+5,x
   1231  f35c		       95 a5		      sta	playfield+1,x
   1232  f35e		       b5 aa		      lda	playfield+6,x
   1233  f360		       95 a6		      sta	playfield+2,x
   1234  f362		       b5 ab		      lda	playfield+7,x
   1235  f364		       95 a7		      sta	playfield+3,x
   1236  f366					      endif
   1237  f366		       8a		      txa
   1238  f367		       cb fc		      sbx	#252
   1239  f369				  -	      ifconst	pfres
   1240  f369				  -	      cpx	#(pfres-1)*4
   1241  f369					      else
   1242  f369		       e0 2c		      cpx	#44
   1243  f36b					      endif
   1244  f36b		       d0 e9		      bne	up2
   1245  f36d
   1246  f36d		       a5 9f		      lda	temp4
   1247  f36f
   1248  f36f				  -	      ifconst	superchip
   1249  f36f				  -	      ifconst	pfres
   1250  f36f				  -	      sta	playfield+pfres*4-129
   1251  f36f				  -	      lda	temp3
   1252  f36f				  -	      sta	playfield+pfres*4-130
   1253  f36f				  -	      lda	temp2
   1254  f36f				  -	      sta	playfield+pfres*4-131
   1255  f36f				  -	      lda	temp1
   1256  f36f				  -	      sta	playfield+pfres*4-132
   1257  f36f				  -	      else
   1258  f36f				  -	      sta	playfield+47-128
   1259  f36f				  -	      lda	temp3
   1260  f36f				  -	      sta	playfield+46-128
   1261  f36f				  -	      lda	temp2
   1262  f36f				  -	      sta	playfield+45-128
   1263  f36f				  -	      lda	temp1
   1264  f36f				  -	      sta	playfield+44-128
   1265  f36f				  -	      endif
   1266  f36f					      else
   1267  f36f				  -	      ifconst	pfres
   1268  f36f				  -	      sta	playfield+pfres*4-1
   1269  f36f				  -	      lda	temp3
   1270  f36f				  -	      sta	playfield+pfres*4-2
   1271  f36f				  -	      lda	temp2
   1272  f36f				  -	      sta	playfield+pfres*4-3
   1273  f36f				  -	      lda	temp1
   1274  f36f				  -	      sta	playfield+pfres*4-4
   1275  f36f					      else
   1276  f36f		       85 d3		      sta	playfield+47
   1277  f371		       a5 9e		      lda	temp3
   1278  f373		       85 d2		      sta	playfield+46
   1279  f375		       a5 9d		      lda	temp2
   1280  f377		       85 d1		      sta	playfield+45
   1281  f379		       a5 9c		      lda	temp1
   1282  f37b		       85 d0		      sta	playfield+44
   1283  f37d					      endif
   1284  f37d					      endif
   1285  f37d				   noshiftdown2
      0  f37d					      RETURN
      1  f37d					      ifnconst	bankswitch
      2  f37d		       60		      rts
      3  f37e				  -	      else
      4  f37e				  -	      jmp	BS_return
      5  f37e					      endif
   1287  f37e
   1288  f37e
   1289  f37e				   notup
   1290  f37e							;down
   1291  f37e		       4a		      lsr
   1292  f37f		       b0 02		      bcs	oneincup
   1293  f381		       e6 ef		      inc	playfieldpos
   1294  f383				   oneincup
   1295  f383		       e6 ef		      inc	playfieldpos
   1296  f385		       a5 ef		      lda	playfieldpos
   1297  f387
   1298  f387				  -	      ifconst	pfrowheight
   1299  f387				  -	      cmp	#pfrowheight+1
   1300  f387					      else
   1301  f387					      ifnconst	pfres
   1302  f387		       c9 09		      cmp	#9
   1303  f389				  -	      else
   1304  f389				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f389					      endif
   1306  f389					      endif
   1307  f389
   1308  f389		       90 3b		      bcc	noshiftdown
   1309  f38b		       a9 01		      lda	#1
   1310  f38d		       85 ef		      sta	playfieldpos
   1311  f38f
   1312  f38f				  -	      ifconst	pfres
   1313  f38f				  -	      lda	playfield+pfres*4-1
   1314  f38f				  -	      sta	temp4
   1315  f38f				  -	      lda	playfield+pfres*4-2
   1316  f38f				  -	      sta	temp3
   1317  f38f				  -	      lda	playfield+pfres*4-3
   1318  f38f				  -	      sta	temp2
   1319  f38f				  -	      lda	playfield+pfres*4-4
   1320  f38f					      else
   1321  f38f		       a5 d3		      lda	playfield+47
   1322  f391		       85 9f		      sta	temp4
   1323  f393		       a5 d2		      lda	playfield+46
   1324  f395		       85 9e		      sta	temp3
   1325  f397		       a5 d1		      lda	playfield+45
   1326  f399		       85 9d		      sta	temp2
   1327  f39b		       a5 d0		      lda	playfield+44
   1328  f39d					      endif
   1329  f39d
   1330  f39d		       85 9c		      sta	temp1
   1331  f39f
   1332  f39f				  -	      ifconst	pfres
   1333  f39f				  -	      ldx	#(pfres-1)*4
   1334  f39f					      else
   1335  f39f		       a2 2c		      ldx	#44
   1336  f3a1					      endif
   1337  f3a1				   down2
   1338  f3a1		       b5 a3		      lda	playfield-1,x
   1339  f3a3				  -	      ifconst	superchip
   1340  f3a3				  -	      sta	playfield-125,x
   1341  f3a3				  -	      lda	playfield-2,x
   1342  f3a3				  -	      sta	playfield-126,x
   1343  f3a3				  -	      lda	playfield-3,x
   1344  f3a3				  -	      sta	playfield-127,x
   1345  f3a3				  -	      lda	playfield-4,x
   1346  f3a3				  -	      sta	playfield-128,x
   1347  f3a3					      else
   1348  f3a3		       95 a7		      sta	playfield+3,x
   1349  f3a5		       b5 a2		      lda	playfield-2,x
   1350  f3a7		       95 a6		      sta	playfield+2,x
   1351  f3a9		       b5 a1		      lda	playfield-3,x
   1352  f3ab		       95 a5		      sta	playfield+1,x
   1353  f3ad		       b5 a0		      lda	playfield-4,x
   1354  f3af		       95 a4		      sta	playfield,x
   1355  f3b1					      endif
   1356  f3b1		       8a		      txa
   1357  f3b2		       cb 04		      sbx	#4
   1358  f3b4		       d0 eb		      bne	down2
   1359  f3b6
   1360  f3b6		       a5 9f		      lda	temp4
   1361  f3b8				  -	      ifconst	superchip
   1362  f3b8				  -	      sta	playfield-125
   1363  f3b8				  -	      lda	temp3
   1364  f3b8				  -	      sta	playfield-126
   1365  f3b8				  -	      lda	temp2
   1366  f3b8				  -	      sta	playfield-127
   1367  f3b8				  -	      lda	temp1
   1368  f3b8				  -	      sta	playfield-128
   1369  f3b8					      else
   1370  f3b8		       85 a7		      sta	playfield+3
   1371  f3ba		       a5 9e		      lda	temp3
   1372  f3bc		       85 a6		      sta	playfield+2
   1373  f3be		       a5 9d		      lda	temp2
   1374  f3c0		       85 a5		      sta	playfield+1
   1375  f3c2		       a5 9c		      lda	temp1
   1376  f3c4		       85 a4		      sta	playfield
   1377  f3c6					      endif
   1378  f3c6				   noshiftdown
      0  f3c6					      RETURN
      1  f3c6					      ifnconst	bankswitch
      2  f3c6		       60		      rts
      3  f3c7				  -	      else
      4  f3c7				  -	      jmp	BS_return
      5  f3c7					      endif
   1380  f3c7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3c7
   1382  f3c7							;standard routines needed for pretty much all games
   1383  f3c7							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3c7							; repositioning code and score pointer setup moved to overscan
   1385  f3c7							; read switches, joysticks now compiler generated (more efficient)
   1386  f3c7
   1387  f3c7				   randomize
   1388  f3c7		       a5 a2		      lda	rand
   1389  f3c9		       4a		      lsr
   1390  f3ca					      ifconst	rand16
   1391  f3ca		       26 ed		      rol	rand16
   1392  f3cc					      endif
   1393  f3cc		       90 02		      bcc	noeor
   1394  f3ce		       49 b4		      eor	#$B4
   1395  f3d0				   noeor
   1396  f3d0		       85 a2		      sta	rand
   1397  f3d2					      ifconst	rand16
   1398  f3d2		       45 ed		      eor	rand16
   1399  f3d4					      endif
      0  f3d4					      RETURN
      1  f3d4					      ifnconst	bankswitch
      2  f3d4		       60		      rts
      3  f3d5				  -	      else
      4  f3d5				  -	      jmp	BS_return
      5  f3d5					      endif
   1401  f3d5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3d5
   1403  f3d5				   drawscreen
   1404  f3d5				  -	      ifconst	debugscore
   1405  f3d5				  -	      ldx	#14
   1406  f3d5				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3d5				  -
   1408  f3d5				  -	      ifconst	mincycles
   1409  f3d5				  -	      lda	mincycles
   1410  f3d5				  -	      cmp	INTIM
   1411  f3d5				  -	      lda	mincycles
   1412  f3d5				  -	      bcc	nochange
   1413  f3d5				  -	      lda	INTIM
   1414  f3d5				  -	      sta	mincycles
   1415  f3d5				  -nochange
   1416  f3d5				  -	      endif
   1417  f3d5				  -
   1418  f3d5				  -			; cmp #$2B
   1419  f3d5				  -			; bcs no_cycles_left
   1420  f3d5				  -	      bmi	cycles_left
   1421  f3d5				  -	      ldx	#64
   1422  f3d5				  -	      eor	#$ff	;make negative
   1423  f3d5				  -cycles_left
   1424  f3d5				  -	      stx	scorecolor
   1425  f3d5				  -	      and	#$7f	; clear sign bit
   1426  f3d5				  -	      tax
   1427  f3d5				  -	      lda	scorebcd,x
   1428  f3d5				  -	      sta	score+2
   1429  f3d5				  -	      lda	scorebcd1,x
   1430  f3d5				  -	      sta	score+1
   1431  f3d5				  -	      jmp	done_debugscore
   1432  f3d5				  -scorebcd
   1433  f3d5				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3d5				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3d5				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3d5				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3d5				  -scorebcd1
   1438  f3d5				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3d5				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3d5				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3d5				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3d5				  -done_debugscore
   1443  f3d5					      endif
   1444  f3d5
   1445  f3d5				  -	      ifconst	debugcycles
   1446  f3d5				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3d5				  -			; cmp #$2B
   1448  f3d5				  -			; BCC overscan
   1449  f3d5				  -	      bmi	overscan
   1450  f3d5				  -	      sta	COLUBK
   1451  f3d5				  -	      bcs	doneoverscan
   1452  f3d5					      endif
   1453  f3d5
   1454  f3d5				   overscan
   1455  f3d5				  -	      ifconst	interlaced
   1456  f3d5				  -	      PHP
   1457  f3d5				  -	      PLA
   1458  f3d5				  -	      EOR	#4	; flip interrupt bit
   1459  f3d5				  -	      PHA
   1460  f3d5				  -	      PLP
   1461  f3d5				  -	      AND	#4	; isolate the interrupt bit
   1462  f3d5				  -	      TAX		; save it for later
   1463  f3d5					      endif
   1464  f3d5
   1465  f3d5				   overscanloop
   1466  f3d5		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3d8		       30 fb		      bmi	overscanloop
   1468  f3da				   doneoverscan
   1469  f3da
   1470  f3da							;do VSYNC
   1471  f3da
   1472  f3da				  -	      ifconst	interlaced
   1473  f3da				  -	      CPX	#4
   1474  f3da				  -	      BNE	oddframevsync
   1475  f3da					      endif
   1476  f3da
   1477  f3da		       a9 02		      lda	#2
   1478  f3dc		       85 02		      sta	WSYNC
   1479  f3de		       85 00		      sta	VSYNC
   1480  f3e0		       85 02		      STA	WSYNC
   1481  f3e2		       85 02		      STA	WSYNC
   1482  f3e4		       4a		      lsr
   1483  f3e5		       85 02		      STA	WSYNC
   1484  f3e7		       85 00		      STA	VSYNC
   1485  f3e9		       85 01		      sta	VBLANK
   1486  f3eb				  -	      ifnconst	overscan_time
   1487  f3eb				  -	      lda	#37+128
   1488  f3eb					      else
   1489  f3eb		       a9 a5		      lda	#overscan_time+128
   1490  f3ed					      endif
   1491  f3ed		       8d 96 02 	      sta	TIM64T
   1492  f3f0
   1493  f3f0				  -	      ifconst	interlaced
   1494  f3f0				  -	      jmp	postsync
   1495  f3f0				  -
   1496  f3f0				  -oddframevsync
   1497  f3f0				  -	      sta	WSYNC
   1498  f3f0				  -
   1499  f3f0				  -	      LDA	($80,X)	; 11 waste
   1500  f3f0				  -	      LDA	($80,X)	; 11 waste
   1501  f3f0				  -	      LDA	($80,X)	; 11 waste
   1502  f3f0				  -
   1503  f3f0				  -	      lda	#2
   1504  f3f0				  -	      sta	VSYNC
   1505  f3f0				  -	      sta	WSYNC
   1506  f3f0				  -	      sta	WSYNC
   1507  f3f0				  -	      sta	WSYNC
   1508  f3f0				  -
   1509  f3f0				  -	      LDA	($80,X)	; 11 waste
   1510  f3f0				  -	      LDA	($80,X)	; 11 waste
   1511  f3f0				  -	      LDA	($80,X)	; 11 waste
   1512  f3f0				  -
   1513  f3f0				  -	      lda	#0
   1514  f3f0				  -	      sta	VSYNC
   1515  f3f0				  -	      sta	VBLANK
   1516  f3f0				  -	      ifnconst	overscan_time
   1517  f3f0				  -	      lda	#37+128
   1518  f3f0				  -	      else
   1519  f3f0				  -	      lda	#overscan_time+128
   1520  f3f0				  -	      endif
   1521  f3f0				  -	      sta	TIM64T
   1522  f3f0				  -
   1523  f3f0				  -postsync
   1524  f3f0					      endif
   1525  f3f0
   1526  f3f0				  -	      ifconst	legacy
   1527  f3f0				  -	      if	legacy < 100
   1528  f3f0				  -	      ldx	#4
   1529  f3f0				  -adjustloop
   1530  f3f0				  -	      lda	player0x,x
   1531  f3f0				  -	      sec
   1532  f3f0				  -	      sbc	#14	;?
   1533  f3f0				  -	      sta	player0x,x
   1534  f3f0				  -	      dex
   1535  f3f0				  -	      bpl	adjustloop
   1536  f3f0				  -	      endif
   1537  f3f0					      endif
   1538  f3f0					      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3f0					      repeat	($fa-(<*))
   1540  f3f0		       ea		      nop
   1539  f3f0					      repend
   1540  f3f1		       ea		      nop
   1539  f3f1					      repend
   1540  f3f2		       ea		      nop
   1539  f3f2					      repend
   1540  f3f3		       ea		      nop
   1539  f3f3					      repend
   1540  f3f4		       ea		      nop
   1539  f3f4					      repend
   1540  f3f5		       ea		      nop
   1539  f3f5					      repend
   1540  f3f6		       ea		      nop
   1539  f3f6					      repend
   1540  f3f7		       ea		      nop
   1539  f3f7					      repend
   1540  f3f8		       ea		      nop
   1539  f3f8					      repend
   1540  f3f9		       ea		      nop
   1541  f3fa					      repend
   1542  f3fa					      endif
   1543  f3fa		       85 02		      sta	WSYNC
   1544  f3fc		       a2 04		      ldx	#4
      0  f3fe					      SLEEP	3
      1  f3fe				   .CYCLES    SET	3
      2  f3fe
      3  f3fe				  -	      IF	.CYCLES < 2
      4  f3fe				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3fe				  -	      ERR
      6  f3fe					      ENDIF
      7  f3fe
      8  f3fe					      IF	.CYCLES & 1
      9  f3fe					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3fe		       04 00		      nop	0
     11  f400				  -	      ELSE
     12  f400				  -	      bit	VSYNC
     13  f400					      ENDIF
     14  f400				   .CYCLES    SET	.CYCLES - 3
     15  f400					      ENDIF
     16  f400
     17  f400				  -	      REPEAT	.CYCLES / 2
     18  f400				  -	      nop
     19  f400					      REPEND
   1546  f400				   HorPosLoop		; 5
   1547  f400		       b5 80		      lda	player0x,X	;+4 9
   1548  f402		       38		      sec		;+2 11
   1549  f403				   DivideLoop
   1550  f403		       e9 0f		      sbc	#15
   1551  f405		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f407		       95 9c		      sta	temp1,X	;+4 19
   1553  f409		       95 10		      sta	RESP0,X	;+4 23
   1554  f40b		       85 02		      sta	WSYNC
   1555  f40d		       ca		      dex
   1556  f40e		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f410							; 4
   1558  f410
   1559  f410		       a2 04		      ldx	#4
   1560  f412		       b4 9c		      ldy	temp1,X
   1561  f414		       b9 70 f3 	      lda	repostable-256,Y
   1562  f417		       95 20		      sta	HMP0,X	;+14 18
   1563  f419
   1564  f419		       ca		      dex
   1565  f41a		       b4 9c		      ldy	temp1,X
   1566  f41c		       b9 70 f3 	      lda	repostable-256,Y
   1567  f41f		       95 20		      sta	HMP0,X	;+14 32
   1568  f421
   1569  f421		       ca		      dex
   1570  f422		       b4 9c		      ldy	temp1,X
   1571  f424		       b9 70 f3 	      lda	repostable-256,Y
   1572  f427		       95 20		      sta	HMP0,X	;+14 46
   1573  f429
   1574  f429		       ca		      dex
   1575  f42a		       b4 9c		      ldy	temp1,X
   1576  f42c		       b9 70 f3 	      lda	repostable-256,Y
   1577  f42f		       95 20		      sta	HMP0,X	;+14 60
   1578  f431
   1579  f431		       ca		      dex
   1580  f432		       b4 9c		      ldy	temp1,X
   1581  f434		       b9 70 f3 	      lda	repostable-256,Y
   1582  f437		       95 20		      sta	HMP0,X	;+14 74
   1583  f439
   1584  f439		       85 02		      sta	WSYNC
   1585  f43b
   1586  f43b		       85 2a		      sta	HMOVE	;+3 3
   1587  f43d
   1588  f43d
   1589  f43d				  -	      ifconst	legacy
   1590  f43d				  -	      if	legacy < 100
   1591  f43d				  -	      ldx	#4
   1592  f43d				  -adjustloop2
   1593  f43d				  -	      lda	player0x,x
   1594  f43d				  -	      clc
   1595  f43d				  -	      adc	#14	;?
   1596  f43d				  -	      sta	player0x,x
   1597  f43d				  -	      dex
   1598  f43d				  -	      bpl	adjustloop2
   1599  f43d				  -	      endif
   1600  f43d					      endif
   1601  f43d
   1602  f43d
   1603  f43d
   1604  f43d
   1605  f43d							;set score pointers
   1606  f43d		       a7 95		      lax	score+2
   1607  f43f		       20 70 f4 	      jsr	scorepointerset
   1608  f442		       84 9b		      sty	scorepointers+5
   1609  f444		       86 98		      stx	scorepointers+2
   1610  f446		       a7 94		      lax	score+1
   1611  f448		       20 70 f4 	      jsr	scorepointerset
   1612  f44b		       84 9a		      sty	scorepointers+4
   1613  f44d		       86 97		      stx	scorepointers+1
   1614  f44f		       a7 93		      lax	score
   1615  f451		       20 70 f4 	      jsr	scorepointerset
   1616  f454		       84 99		      sty	scorepointers+3
   1617  f456		       86 96		      stx	scorepointers
   1618  f458
   1619  f458				   vblk
   1620  f458							; run possible vblank bB code
   1621  f458				  -	      ifconst	vblank_bB_code
   1622  f458				  -	      jsr	vblank_bB_code
   1623  f458					      endif
   1624  f458				   vblk2
   1625  f458		       ad 84 02 	      LDA	INTIM
   1626  f45b		       30 fb		      bmi	vblk2
   1627  f45d		       4c 34 f0 	      jmp	kernel
   1628  f460
   1629  f460
   1630  f460		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f469		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f470				   repostable
   1633  f470
   1634  f470				   scorepointerset
   1635  f470		       29 0f		      and	#$0F
   1636  f472		       0a		      asl
   1637  f473		       0a		      asl
   1638  f474		       0a		      asl
   1639  f475		       69 9c		      adc	#<scoretable
   1640  f477		       a8		      tay
   1641  f478		       8a		      txa
   1642  f479							; and #$F0
   1643  f479							; lsr
   1644  f479		       4b f0		      asr	#$F0
   1645  f47b		       69 9c		      adc	#<scoretable
   1646  f47d		       aa		      tax
   1647  f47e		       60		      rts
   1648  f47f				   game
   1649  f47f				   .
   1650  f47f							; 
   1651  f47f
   1652  f47f				   .
   1653  f47f							; 
   1654  f47f
   1655  f47f				   .
   1656  f47f							; 
   1657  f47f
   1658  f47f				   .
   1659  f47f							; 
   1660  f47f
   1661  f47f				   .
   1662  f47f							; 
   1663  f47f
   1664  f47f				   .
   1665  f47f							; 
   1666  f47f
   1667  f47f				   .
   1668  f47f							; 
   1669  f47f
   1670  f47f				   .
   1671  f47f							; 
   1672  f47f
   1673  f47f				   .
   1674  f47f							; 
   1675  f47f
   1676  f47f				   .
   1677  f47f							; 
   1678  f47f
   1679  f47f				   .
   1680  f47f							; 
   1681  f47f
   1682  f47f				   .
   1683  f47f							; 
   1684  f47f
   1685  f47f				   .
   1686  f47f							; 
   1687  f47f
   1688  f47f				   .
   1689  f47f							; 
   1690  f47f
   1691  f47f				   .
   1692  f47f							; 
   1693  f47f
   1694  f47f				   .
   1695  f47f							; 
   1696  f47f
   1697  f47f				   .
   1698  f47f							; 
   1699  f47f
   1700  f47f				   .
   1701  f47f							; 
   1702  f47f
   1703  f47f				   .
   1704  f47f							; 
   1705  f47f
   1706  f47f				   .
   1707  f47f							; 
   1708  f47f
   1709  f47f				   .
   1710  f47f							; 
   1711  f47f
   1712  f47f				   .
   1713  f47f							; 
   1714  f47f
   1715  f47f				   .
   1716  f47f							; 
   1717  f47f
   1718  f47f				   .
   1719  f47f							; 
   1720  f47f
   1721  f47f				   .
   1722  f47f							; 
   1723  f47f
   1724  f47f				   .
   1725  f47f							; 
   1726  f47f
   1727  f47f				   .
   1728  f47f							; 
   1729  f47f
   1730  f47f				   .
   1731  f47f							; 
   1732  f47f
   1733  f47f				   .
   1734  f47f							; 
   1735  f47f
   1736  f47f				   .
   1737  f47f							; 
   1738  f47f
   1739  f47f				   .
   1740  f47f							; 
   1741  f47f
   1742  f47f				   .
   1743  f47f							; 
   1744  f47f
   1745  f47f				   .L00 		;  set kernel_options pfcolors no_blank_lines
   1746  f47f
   1747  f47f				   .
   1748  f47f							; 
   1749  f47f
   1750  f47f				   .
   1751  f47f							; 
   1752  f47f
   1753  f47f				   .
   1754  f47f							; 
   1755  f47f
   1756  f47f				   .
   1757  f47f							; 
   1758  f47f
   1759  f47f				   .
   1760  f47f							; 
   1761  f47f
   1762  f47f				   .
   1763  f47f							; 
   1764  f47f
   1765  f47f				   .L01 		;  set tv ntsc
   1766  f47f
   1767  f47f				   .
   1768  f47f							; 
   1769  f47f
   1770  f47f				   .
   1771  f47f							; 
   1772  f47f
   1773  f47f				   .
   1774  f47f							; 
   1775  f47f
   1776  f47f				   .
   1777  f47f							; 
   1778  f47f
   1779  f47f				   .
   1780  f47f							; 
   1781  f47f
   1782  f47f				   .
   1783  f47f							; 
   1784  f47f
   1785  f47f				   .
   1786  f47f							; 
   1787  f47f
   1788  f47f				   .
   1789  f47f							; 
   1790  f47f
   1791  f47f				   .
   1792  f47f							; 
   1793  f47f
   1794  f47f				   .
   1795  f47f							; 
   1796  f47f
   1797  f47f				   .
   1798  f47f							; 
   1799  f47f
   1800  f47f				   .
   1801  f47f							; 
   1802  f47f
   1803  f47f				   .
   1804  f47f							; 
   1805  f47f
   1806  f47f				   .
   1807  f47f							; 
   1808  f47f
   1809  f47f				   .
   1810  f47f							; 
   1811  f47f
   1812  f47f				   .
   1813  f47f							; 
   1814  f47f
   1815  f47f				   .
   1816  f47f							; 
   1817  f47f
   1818  f47f				   .
   1819  f47f							; 
   1820  f47f
   1821  f47f				   .
   1822  f47f							; 
   1823  f47f
   1824  f47f				   .
   1825  f47f							; 
   1826  f47f
   1827  f47f				   .
   1828  f47f							; 
   1829  f47f
   1830  f47f				   .
   1831  f47f							; 
   1832  f47f
   1833  f47f				   .
   1834  f47f							; 
   1835  f47f
   1836  f47f				   .
   1837  f47f							; 
   1838  f47f
   1839  f47f				   .
   1840  f47f							; 
   1841  f47f
   1842  f47f				   .
   1843  f47f							; 
   1844  f47f
   1845  f47f				   .
   1846  f47f							; 
   1847  f47f
   1848  f47f				   .
   1849  f47f							; 
   1850  f47f
   1851  f47f				   .
   1852  f47f							; 
   1853  f47f
   1854  f47f				   .
   1855  f47f							; 
   1856  f47f
   1857  f47f				   .L02 		;  dim _Master_Counter  =  a
   1858  f47f
   1859  f47f				   .L03 		;  dim _Frame_Counter	=  b
   1860  f47f
   1861  f47f				   .
   1862  f47f							; 
   1863  f47f
   1864  f47f				   .
   1865  f47f							; 
   1866  f47f
   1867  f47f				   .
   1868  f47f							; 
   1869  f47f
   1870  f47f				   .
   1871  f47f							; 
   1872  f47f
   1873  f47f				   .L04 		;  dim _Ch0_Sound  =  c
   1874  f47f
   1875  f47f				   .L05 		;  dim _Ch0_Counter  =  d
   1876  f47f
   1877  f47f				   .L06 		;  dim _C0  =	e
   1878  f47f
   1879  f47f				   .L07 		;  dim _V0  =	f
   1880  f47f
   1881  f47f				   .L08 		;  dim _F0  =	g
   1882  f47f
   1883  f47f				   .
   1884  f47f							; 
   1885  f47f
   1886  f47f				   .
   1887  f47f							; 
   1888  f47f
   1889  f47f				   .
   1890  f47f							; 
   1891  f47f
   1892  f47f				   .
   1893  f47f							; 
   1894  f47f
   1895  f47f				   .
   1896  f47f							; 
   1897  f47f
   1898  f47f				   .
   1899  f47f							; 
   1900  f47f
   1901  f47f				   .L09 		;  dim _Pause_Counter_Tmp  =  h
   1902  f47f
   1903  f47f				   .
   1904  f47f							; 
   1905  f47f
   1906  f47f				   .
   1907  f47f							; 
   1908  f47f
   1909  f47f				   .
   1910  f47f							; 
   1911  f47f
   1912  f47f				   .
   1913  f47f							; 
   1914  f47f
   1915  f47f				   .
   1916  f47f							; 
   1917  f47f
   1918  f47f				   .
   1919  f47f							; 
   1920  f47f
   1921  f47f				   .L010		;  dim _AP_2_Sec_Score_Flip  =  i
   1922  f47f
   1923  f47f				   .
   1924  f47f							; 
   1925  f47f
   1926  f47f				   .
   1927  f47f							; 
   1928  f47f
   1929  f47f				   .
   1930  f47f							; 
   1931  f47f
   1932  f47f				   .
   1933  f47f							; 
   1934  f47f
   1935  f47f				   .
   1936  f47f							; 
   1937  f47f
   1938  f47f				   .
   1939  f47f							; 
   1940  f47f
   1941  f47f				   .L011		;  dim _Pause_Mem_Color_Tmp  =  i
   1942  f47f
   1943  f47f				   .
   1944  f47f							; 
   1945  f47f
   1946  f47f				   .
   1947  f47f							; 
   1948  f47f
   1949  f47f				   .
   1950  f47f							; 
   1951  f47f
   1952  f47f				   .
   1953  f47f							; 
   1954  f47f
   1955  f47f				   .
   1956  f47f							; 
   1957  f47f
   1958  f47f				   .
   1959  f47f							; 
   1960  f47f
   1961  f47f				   .L012		;  dim _AP_Dir_Counter  =  j
   1962  f47f
   1963  f47f				   .
   1964  f47f							; 
   1965  f47f
   1966  f47f				   .
   1967  f47f							; 
   1968  f47f
   1969  f47f				   .
   1970  f47f							; 
   1971  f47f
   1972  f47f				   .
   1973  f47f							; 
   1974  f47f
   1975  f47f				   .
   1976  f47f							; 
   1977  f47f
   1978  f47f				   .
   1979  f47f							; 
   1980  f47f
   1981  f47f				   .L013		;  dim _Pause_Color_Tmp  =  j
   1982  f47f
   1983  f47f				   .
   1984  f47f							; 
   1985  f47f
   1986  f47f				   .
   1987  f47f							; 
   1988  f47f
   1989  f47f				   .
   1990  f47f							; 
   1991  f47f
   1992  f47f				   .
   1993  f47f							; 
   1994  f47f
   1995  f47f				   .
   1996  f47f							; 
   1997  f47f
   1998  f47f				   .L014		;  dim _BitOp_02  =  r
   1999  f47f
   2000  f47f				   .
   2001  f47f							; 
   2002  f47f
   2003  f47f				   .
   2004  f47f							; 
   2005  f47f
   2006  f47f				   .
   2007  f47f							; 
   2008  f47f
   2009  f47f				   .
   2010  f47f							; 
   2011  f47f
   2012  f47f				   .L015		;  dim _Bit0_BW_Mem  =  r
   2013  f47f
   2014  f47f				   .
   2015  f47f							; 
   2016  f47f
   2017  f47f				   .
   2018  f47f							; 
   2019  f47f
   2020  f47f				   .
   2021  f47f							; 
   2022  f47f
   2023  f47f				   .
   2024  f47f							; 
   2025  f47f
   2026  f47f				   .L016		;  dim _Bit1_BW_Check	=  r
   2027  f47f
   2028  f47f				   .
   2029  f47f							; 
   2030  f47f
   2031  f47f				   .
   2032  f47f							; 
   2033  f47f
   2034  f47f				   .
   2035  f47f							; 
   2036  f47f
   2037  f47f				   .
   2038  f47f							; 
   2039  f47f
   2040  f47f				   .L017		;  dim _Bit2_Pause_Clr_Scheme	=  r
   2041  f47f
   2042  f47f				   .
   2043  f47f							; 
   2044  f47f
   2045  f47f				   .
   2046  f47f							; 
   2047  f47f
   2048  f47f				   .
   2049  f47f							; 
   2050  f47f
   2051  f47f				   .
   2052  f47f							; 
   2053  f47f
   2054  f47f				   .L018		;  dim _Bit3_AP_P0_Dir  =  r
   2055  f47f
   2056  f47f				   .
   2057  f47f							; 
   2058  f47f
   2059  f47f				   .
   2060  f47f							; 
   2061  f47f
   2062  f47f				   .
   2063  f47f							; 
   2064  f47f
   2065  f47f				   .
   2066  f47f							; 
   2067  f47f
   2068  f47f				   .
   2069  f47f							; 
   2070  f47f
   2071  f47f				   .
   2072  f47f							; 
   2073  f47f
   2074  f47f				   .
   2075  f47f							; 
   2076  f47f
   2077  f47f				   .
   2078  f47f							; 
   2079  f47f
   2080  f47f				   .L019		;  dim _sc1  =  score
   2081  f47f
   2082  f47f				   .L020		;  dim _sc2  =  score + 1
   2083  f47f
   2084  f47f				   .L021		;  dim _sc3  =  score + 2
   2085  f47f
   2086  f47f				   .
   2087  f47f							; 
   2088  f47f
   2089  f47f				   .
   2090  f47f							; 
   2091  f47f
   2092  f47f				   .
   2093  f47f							; 
   2094  f47f
   2095  f47f				   .
   2096  f47f							; 
   2097  f47f
   2098  f47f				   .
   2099  f47f							; 
   2100  f47f
   2101  f47f				   .
   2102  f47f							; 
   2103  f47f
   2104  f47f				   .
   2105  f47f							; 
   2106  f47f
   2107  f47f				   .L022		;  dim _Score1_Mem  =	s
   2108  f47f
   2109  f47f				   .L023		;  dim _Score2_Mem  =	t
   2110  f47f
   2111  f47f				   .L024		;  dim _Score3_Mem  =	u
   2112  f47f
   2113  f47f				   .
   2114  f47f							; 
   2115  f47f
   2116  f47f				   .
   2117  f47f							; 
   2118  f47f
   2119  f47f				   .
   2120  f47f							; 
   2121  f47f
   2122  f47f				   .
   2123  f47f							; 
   2124  f47f
   2125  f47f				   .L025		;  dim _High_Score1  =  v
   2126  f47f
   2127  f47f				   .L026		;  dim _High_Score2  =  w
   2128  f47f
   2129  f47f				   .L027		;  dim _High_Score3  =  x
   2130  f47f
   2131  f47f				   .
   2132  f47f							; 
   2133  f47f
   2134  f47f				   .
   2135  f47f							; 
   2136  f47f
   2137  f47f				   .
   2138  f47f							; 
   2139  f47f
   2140  f47f				   .
   2141  f47f							; 
   2142  f47f
   2143  f47f				   .L028		;  dim _BitOp_01  =  y
   2144  f47f
   2145  f47f				   .L029		;  dim _Bit0_Reset_Restrainer	=  y
   2146  f47f
   2147  f47f				   .L030		;  dim _Bit1_FireB_Restrainer	=  y
   2148  f47f
   2149  f47f				   .L031		;  dim _Bit2_Game_Control  =  y
   2150  f47f
   2151  f47f				   .L032		;  dim _Bit3_Auto_Play  =  y
   2152  f47f
   2153  f47f				   .L033		;  dim _Bit6_Swap_Scores  =  y
   2154  f47f
   2155  f47f				   .L034		;  dim _Bit7_Last_Life  =  y
   2156  f47f
   2157  f47f				   .
   2158  f47f							; 
   2159  f47f
   2160  f47f				   .
   2161  f47f							; 
   2162  f47f
   2163  f47f				   .
   2164  f47f							; 
   2165  f47f
   2166  f47f				   .
   2167  f47f							; 
   2168  f47f
   2169  f47f				   .L035		;  dim rand16	=  z
   2170  f47f
   2171  f47f				   .
   2172  f47f							; 
   2173  f47f
   2174  f47f				   .
   2175  f47f							; 
   2176  f47f
   2177  f47f				   .
   2178  f47f							; 
   2179  f47f
   2180  f47f				   .
   2181  f47f							; 
   2182  f47f
   2183  f47f				   .
   2184  f47f							; 
   2185  f47f
   2186  f47f				   .
   2187  f47f							; 
   2188  f47f
   2189  f47f				   .
   2190  f47f							; 
   2191  f47f
   2192  f47f				   .L036		;  const pfscore  =  1
   2193  f47f
   2194  f47f				   .
   2195  f47f							; 
   2196  f47f
   2197  f47f				   .
   2198  f47f							; 
   2199  f47f
   2200  f47f				   .
   2201  f47f							; 
   2202  f47f
   2203  f47f				   .
   2204  f47f							; 
   2205  f47f
   2206  f47f				   .
   2207  f47f							; 
   2208  f47f
   2209  f47f				   .
   2210  f47f							; 
   2211  f47f
   2212  f47f				   .
   2213  f47f							; 
   2214  f47f
   2215  f47f				   .
   2216  f47f							; 
   2217  f47f
   2218  f47f				   .
   2219  f47f							; 
   2220  f47f
   2221  f47f				   .L037		;  const _P_Edge_Top  =  10
   2222  f47f
   2223  f47f				   .L038		;  const _P_Edge_Bottom  =  83
   2224  f47f
   2225  f47f				   .L039		;  const _P_Edge_Left	=  1
   2226  f47f
   2227  f47f				   .L040		;  const _P_Edge_Right  =  153
   2228  f47f
   2229  f47f				   .
   2230  f47f							; 
   2231  f47f
   2232  f47f				   .
   2233  f47f							; 
   2234  f47f
   2235  f47f				   .
   2236  f47f							; 
   2237  f47f
   2238  f47f				   .
   2239  f47f							; 
   2240  f47f
   2241  f47f				   .
   2242  f47f							; 
   2243  f47f
   2244  f47f				   .
   2245  f47f							; 
   2246  f47f
   2247  f47f				   .
   2248  f47f							; 
   2249  f47f
   2250  f47f				   .
   2251  f47f							; 
   2252  f47f
   2253  f47f				   .
   2254  f47f							; 
   2255  f47f
   2256  f47f				   .
   2257  f47f							; 
   2258  f47f
   2259  f47f				   .
   2260  f47f							; 
   2261  f47f
   2262  f47f				   .__Start_Restart
   2263  f47f							; __Start_Restart
   2264  f47f
   2265  f47f				   .
   2266  f47f							; 
   2267  f47f
   2268  f47f				   .
   2269  f47f							; 
   2270  f47f
   2271  f47f				   .
   2272  f47f							; 
   2273  f47f
   2274  f47f				   .
   2275  f47f							; 
   2276  f47f
   2277  f47f				   .
   2278  f47f							; 
   2279  f47f
   2280  f47f				   .
   2281  f47f							; 
   2282  f47f
   2283  f47f				   .L041		;  AUDV0  =  0  :  AUDV1  =  0
   2284  f47f
   2285  f47f		       a9 00		      LDA	#0
   2286  f481		       85 19		      STA	AUDV0
   2287  f483		       85 1a		      STA	AUDV1
   2288  f485				   .
   2289  f485							; 
   2290  f485
   2291  f485				   .
   2292  f485							; 
   2293  f485
   2294  f485				   .
   2295  f485							; 
   2296  f485
   2297  f485				   .
   2298  f485							; 
   2299  f485
   2300  f485				   .
   2301  f485							; 
   2302  f485
   2303  f485				   .
   2304  f485							; 
   2305  f485
   2306  f485				   .
   2307  f485							; 
   2308  f485
   2309  f485				   .
   2310  f485							; 
   2311  f485
   2312  f485				   .
   2313  f485							; 
   2314  f485
   2315  f485				   .
   2316  f485							; 
   2317  f485
   2318  f485				   .
   2319  f485							; 
   2320  f485
   2321  f485				   .L042		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2322  f485
   2323  f485		       a9 00		      LDA	#0
   2324  f487		       85 d4		      STA	a
   2325  f489		       85 d5		      STA	b
   2326  f48b		       85 d6		      STA	c
   2327  f48d		       85 d7		      STA	d
   2328  f48f		       85 d8		      STA	e
   2329  f491		       85 d9		      STA	f
   2330  f493		       85 da		      STA	g
   2331  f495		       85 db		      STA	h
   2332  f497		       85 dc		      STA	i
   2333  f499				   .L043		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2334  f499
   2335  f499		       a9 00		      LDA	#0
   2336  f49b		       85 dd		      STA	j
   2337  f49d		       85 de		      STA	k
   2338  f49f		       85 df		      STA	l
   2339  f4a1		       85 e0		      STA	m
   2340  f4a3		       85 e1		      STA	n
   2341  f4a5		       85 e2		      STA	o
   2342  f4a7		       85 e3		      STA	p
   2343  f4a9		       85 e4		      STA	q
   2344  f4ab		       85 e5		      STA	r
   2345  f4ad				   .L044		;  s  =  0  :	t  =  0  :  u  =  0
   2346  f4ad
   2347  f4ad		       a9 00		      LDA	#0
   2348  f4af		       85 e6		      STA	s
   2349  f4b1		       85 e7		      STA	t
   2350  f4b3		       85 e8		      STA	u
   2351  f4b5				   .
   2352  f4b5							; 
   2353  f4b5
   2354  f4b5				   .
   2355  f4b5							; 
   2356  f4b5
   2357  f4b5				   .
   2358  f4b5							; 
   2359  f4b5
   2360  f4b5				   .
   2361  f4b5							; 
   2362  f4b5
   2363  f4b5				   .
   2364  f4b5							; 
   2365  f4b5
   2366  f4b5				   .
   2367  f4b5							; 
   2368  f4b5
   2369  f4b5				   .
   2370  f4b5							; 
   2371  f4b5
   2372  f4b5				   .
   2373  f4b5							; 
   2374  f4b5
   2375  f4b5				   .
   2376  f4b5							; 
   2377  f4b5
   2378  f4b5				   .L045		;  _BitOp_01  =  _BitOp_01  &	%00000100
   2379  f4b5
   2380  f4b5		       a5 ec		      LDA	_BitOp_01
   2381  f4b7		       29 04		      AND	#%00000100
   2382  f4b9		       85 ec		      STA	_BitOp_01
   2383  f4bb				   .
   2384  f4bb							; 
   2385  f4bb
   2386  f4bb				   .
   2387  f4bb							; 
   2388  f4bb
   2389  f4bb				   .
   2390  f4bb							; 
   2391  f4bb
   2392  f4bb				   .
   2393  f4bb							; 
   2394  f4bb
   2395  f4bb				   .
   2396  f4bb							; 
   2397  f4bb
   2398  f4bb				   .
   2399  f4bb							; 
   2400  f4bb
   2401  f4bb				   .L046		;  player0y  =  200  :  player1y  =  200  :  bally  =	200
   2402  f4bb
   2403  f4bb		       a9 c8		      LDA	#200
   2404  f4bd		       85 85		      STA	player0y
   2405  f4bf		       85 86		      STA	player1y
   2406  f4c1		       85 89		      STA	bally
   2407  f4c3				   .
   2408  f4c3							; 
   2409  f4c3
   2410  f4c3				   .
   2411  f4c3							; 
   2412  f4c3
   2413  f4c3				   .
   2414  f4c3							; 
   2415  f4c3
   2416  f4c3				   .
   2417  f4c3							; 
   2418  f4c3
   2419  f4c3				   .
   2420  f4c3							; 
   2421  f4c3
   2422  f4c3				   .
   2423  f4c3							; 
   2424  f4c3
   2425  f4c3				   .
   2426  f4c3							; 
   2427  f4c3
   2428  f4c3				   .
   2429  f4c3							; 
   2430  f4c3
   2431  f4c3				   .
   2432  f4c3							; 
   2433  f4c3
   2434  f4c3				   .
   2435  f4c3							; 
   2436  f4c3
   2437  f4c3				   .L047		;  if _Bit2_Game_Control{2} then goto __Main_Loop_Setup
   2438  f4c3
   2439  f4c3		       a5 ec		      LDA	_Bit2_Game_Control
   2440  f4c5		       29 04		      AND	#4
   2441  f4c7		       f0 03		      BEQ	.skipL047
   2442  f4c9				   .condpart0
   2443  f4c9		       4c 63 f5 	      jmp	.__Main_Loop_Setup
   2444  f4cc
   2445  f4cc				   .skipL047
   2446  f4cc				   .
   2447  f4cc							; 
   2448  f4cc
   2449  f4cc				   .
   2450  f4cc							; 
   2451  f4cc
   2452  f4cc				   .
   2453  f4cc							; 
   2454  f4cc
   2455  f4cc				   .
   2456  f4cc							; 
   2457  f4cc
   2458  f4cc				   .
   2459  f4cc							; 
   2460  f4cc
   2461  f4cc				   .
   2462  f4cc							; 
   2463  f4cc
   2464  f4cc				   .
   2465  f4cc							; 
   2466  f4cc
   2467  f4cc				   .
   2468  f4cc							; 
   2469  f4cc
   2470  f4cc				   .
   2471  f4cc							; 
   2472  f4cc
   2473  f4cc				   .
   2474  f4cc							; 
   2475  f4cc
   2476  f4cc				   .
   2477  f4cc							; 
   2478  f4cc
   2479  f4cc				   .__Setup_Title_Screen
   2480  f4cc							; __Setup_Title_Screen
   2481  f4cc
   2482  f4cc				   .
   2483  f4cc							; 
   2484  f4cc
   2485  f4cc				   .
   2486  f4cc							; 
   2487  f4cc
   2488  f4cc				   .
   2489  f4cc							; 
   2490  f4cc
   2491  f4cc				   .
   2492  f4cc							; 
   2493  f4cc
   2494  f4cc				   .
   2495  f4cc							; 
   2496  f4cc
   2497  f4cc				   .
   2498  f4cc							; 
   2499  f4cc
   2500  f4cc				   .L048		;  pfscore1  =  0  :  scorecolor  =  $20
   2501  f4cc
   2502  f4cc		       a9 00		      LDA	#0
   2503  f4ce		       85 f2		      STA	pfscore1
   2504  f4d0		       a9 20		      LDA	#$20
   2505  f4d2		       85 a3		      STA	scorecolor
   2506  f4d4				   .
   2507  f4d4							; 
   2508  f4d4
   2509  f4d4				   .
   2510  f4d4							; 
   2511  f4d4
   2512  f4d4				   .
   2513  f4d4							; 
   2514  f4d4
   2515  f4d4				   .
   2516  f4d4							; 
   2517  f4d4
   2518  f4d4				   .
   2519  f4d4							; 
   2520  f4d4
   2521  f4d4				   .
   2522  f4d4							; 
   2523  f4d4
   2524  f4d4				   .L049		;  COLUBK  =  $20
   2525  f4d4
   2526  f4d4		       a9 20		      LDA	#$20
   2527  f4d6		       85 09		      STA	COLUBK
   2528  f4d8				   .
   2529  f4d8							; 
   2530  f4d8
   2531  f4d8				   .
   2532  f4d8							; 
   2533  f4d8
   2534  f4d8				   .
   2535  f4d8							; 
   2536  f4d8
   2537  f4d8				   .
   2538  f4d8							; 
   2539  f4d8
   2540  f4d8				   .
   2541  f4d8							; 
   2542  f4d8
   2543  f4d8				   .
   2544  f4d8							; 
   2545  f4d8
   2546  f4d8				   .
   2547  f4d8							; 
   2548  f4d8
   2549  f4d8				   .
   2550  f4d8							; 
   2551  f4d8
   2552  f4d8				   .
   2553  f4d8							; 
   2554  f4d8
   2555  f4d8				   .
   2556  f4d8							; 
   2557  f4d8
   2558  f4d8				   .
   2559  f4d8							; 
   2560  f4d8
   2561  f4d8				   .L050		;  _Bit0_Reset_Restrainer{0}  =  1
   2562  f4d8
   2563  f4d8		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2564  f4da		       09 01		      ORA	#1
   2565  f4dc		       85 ec		      STA	_Bit0_Reset_Restrainer
   2566  f4de				   .
   2567  f4de							; 
   2568  f4de
   2569  f4de				   .
   2570  f4de							; 
   2571  f4de
   2572  f4de				   .
   2573  f4de							; 
   2574  f4de
   2575  f4de				   .
   2576  f4de							; 
   2577  f4de
   2578  f4de				   .
   2579  f4de							; 
   2580  f4de
   2581  f4de				   .
   2582  f4de							; 
   2583  f4de
   2584  f4de				   .L051		;  playfield:
   2585  f4de
   2586  f4de				  -	      ifconst	pfres
   2587  f4de				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2588  f4de					      else
   2589  f4de		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2590  f4e0					      endif
   2591  f4e0		       4c 0f f5 	      jmp	pflabel0
   2592  f4e3				   PF_data0
   2593  f4e3		       e9 6a		      .byte.b	%11101001, %01101010
   2594  f4e5					      if	(pfwidth>2)
   2595  f4e5		       c9 ea		      .byte.b	%11001001, %11101010
   2596  f4e7					      endif
   2597  f4e7		       49 2a		      .byte.b	%01001001, %00101010
   2598  f4e9					      if	(pfwidth>2)
   2599  f4e9		       a9 4a		      .byte.b	%10101001, %01001010
   2600  f4eb					      endif
   2601  f4eb		       4d 66		      .byte.b	%01001101, %01100110
   2602  f4ed					      if	(pfwidth>2)
   2603  f4ed		       cd 4a		      .byte.b	%11001101, %01001010
   2604  f4ef					      endif
   2605  f4ef		       4b 2a		      .byte.b	%01001011, %00101010
   2606  f4f1					      if	(pfwidth>2)
   2607  f4f1		       ab 4a		      .byte.b	%10101011, %01001010
   2608  f4f3					      endif
   2609  f4f3		       49 6a		      .byte.b	%01001001, %01101010
   2610  f4f5					      if	(pfwidth>2)
   2611  f4f5		       a9 4e		      .byte.b	%10101001, %01001110
   2612  f4f7					      endif
   2613  f4f7		       00 00		      .byte.b	%00000000, %00000000
   2614  f4f9					      if	(pfwidth>2)
   2615  f4f9		       00 00		      .byte.b	%00000000, %00000000
   2616  f4fb					      endif
   2617  f4fb		       08 bd		      .byte.b	%00001000, %10111101
   2618  f4fd					      if	(pfwidth>2)
   2619  f4fd		       c8 07		      .byte.b	%11001000, %00000111
   2620  f4ff					      endif
   2621  f4ff		       08 a5		      .byte.b	%00001000, %10100101
   2622  f501					      if	(pfwidth>2)
   2623  f501		       28 09		      .byte.b	%00101000, %00001001
   2624  f503					      endif
   2625  f503		       08 a5		      .byte.b	%00001000, %10100101
   2626  f505					      if	(pfwidth>2)
   2627  f505		       88 09		      .byte.b	%10001000, %00001001
   2628  f507					      endif
   2629  f507		       0a a5		      .byte.b	%00001010, %10100101
   2630  f509					      if	(pfwidth>2)
   2631  f509		       48 09		      .byte.b	%01001000, %00001001
   2632  f50b					      endif
   2633  f50b		       0d bd		      .byte.b	%00001101, %10111101
   2634  f50d					      if	(pfwidth>2)
   2635  f50d		       2e 07		      .byte.b	%00101110, %00000111
   2636  f50f					      endif
   2637  f50f				   pflabel0
   2638  f50f		       bd e3 f4 	      lda	PF_data0,x
   2639  f512		       95 a4		      sta	playfield,x
   2640  f514		       ca		      dex
   2641  f515		       10 f8		      bpl	pflabel0
   2642  f517				   .
   2643  f517							; 
   2644  f517
   2645  f517				   .
   2646  f517							; 
   2647  f517
   2648  f517				   .
   2649  f517							; 
   2650  f517
   2651  f517				   .
   2652  f517							; 
   2653  f517
   2654  f517				   .
   2655  f517							; 
   2656  f517
   2657  f517				   .
   2658  f517							; 
   2659  f517
   2660  f517				   .
   2661  f517							; 
   2662  f517
   2663  f517				   .
   2664  f517							; 
   2665  f517
   2666  f517				   .
   2667  f517							; 
   2668  f517
   2669  f517				   .
   2670  f517							; 
   2671  f517
   2672  f517				   .
   2673  f517							; 
   2674  f517
   2675  f517				   .__Title_Screen_Loop
   2676  f517							; __Title_Screen_Loop
   2677  f517
   2678  f517				   .
   2679  f517							; 
   2680  f517
   2681  f517				   .
   2682  f517							; 
   2683  f517
   2684  f517				   .
   2685  f517							; 
   2686  f517
   2687  f517				   .
   2688  f517							; 
   2689  f517
   2690  f517				   .
   2691  f517							; 
   2692  f517
   2693  f517				   .
   2694  f517							; 
   2695  f517
   2696  f517				   .
   2697  f517							; 
   2698  f517
   2699  f517				   .L052		;  COLUPF  =  $D8
   2700  f517
   2701  f517		       a9 d8		      LDA	#$D8
   2702  f519		       85 08		      STA	COLUPF
   2703  f51b				   .
   2704  f51b							; 
   2705  f51b
   2706  f51b				   .
   2707  f51b							; 
   2708  f51b
   2709  f51b				   .
   2710  f51b							; 
   2711  f51b
   2712  f51b				   .
   2713  f51b							; 
   2714  f51b
   2715  f51b				   .
   2716  f51b							; 
   2717  f51b
   2718  f51b				   .
   2719  f51b							; 
   2720  f51b
   2721  f51b				   .
   2722  f51b							; 
   2723  f51b
   2724  f51b				   .
   2725  f51b							; 
   2726  f51b
   2727  f51b				   .
   2728  f51b							; 
   2729  f51b
   2730  f51b				   .
   2731  f51b							; 
   2732  f51b
   2733  f51b				   .
   2734  f51b							; 
   2735  f51b
   2736  f51b				   .
   2737  f51b							; 
   2738  f51b
   2739  f51b				   .
   2740  f51b							; 
   2741  f51b
   2742  f51b				   .L053		;  _Master_Counter  =	_Master_Counter  +  1
   2743  f51b
   2744  f51b		       e6 d4		      INC	_Master_Counter
   2745  f51d				   .
   2746  f51d							; 
   2747  f51d
   2748  f51d				   .
   2749  f51d							; 
   2750  f51d
   2751  f51d				   .
   2752  f51d							; 
   2753  f51d
   2754  f51d				   .
   2755  f51d							; 
   2756  f51d
   2757  f51d				   .L054		;  if _Master_Counter	<  60 then goto __TS_AP_Skip
   2758  f51d
   2759  f51d		       a5 d4		      LDA	_Master_Counter
   2760  f51f		       c9 3c		      CMP	#60
   2761  f521		       b0 03		      BCS	.skipL054
   2762  f523				   .condpart1
   2763  f523		       4c 3b f5 	      jmp	.__TS_AP_Skip
   2764  f526
   2765  f526				   .skipL054
   2766  f526				   .
   2767  f526							; 
   2768  f526
   2769  f526				   .
   2770  f526							; 
   2771  f526
   2772  f526				   .
   2773  f526							; 
   2774  f526
   2775  f526				   .
   2776  f526							; 
   2777  f526
   2778  f526				   .L055		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2779  f526
   2780  f526		       e6 d5		      INC	_Frame_Counter
   2781  f528		       a9 00		      LDA	#0
   2782  f52a		       85 d4		      STA	_Master_Counter
   2783  f52c				   .
   2784  f52c							; 
   2785  f52c
   2786  f52c				   .
   2787  f52c							; 
   2788  f52c
   2789  f52c				   .
   2790  f52c							; 
   2791  f52c
   2792  f52c				   .
   2793  f52c							; 
   2794  f52c
   2795  f52c				   .
   2796  f52c							; 
   2797  f52c
   2798  f52c				   .
   2799  f52c							; 
   2800  f52c
   2801  f52c				   .
   2802  f52c							; 
   2803  f52c
   2804  f52c				   .L056		;  if _Frame_Counter  >  9 then _Bit3_Auto_Play{3}  =	1  :  goto __Main_Loop_Setup
   2805  f52c
   2806  f52c		       a9 09		      LDA	#9
   2807  f52e		       c5 d5		      CMP	_Frame_Counter
   2808  f530		       b0 09		      BCS	.skipL056
   2809  f532				   .condpart2
   2810  f532		       a5 ec		      LDA	_Bit3_Auto_Play
   2811  f534		       09 08		      ORA	#8
   2812  f536		       85 ec		      STA	_Bit3_Auto_Play
   2813  f538		       4c 63 f5 	      jmp	.__Main_Loop_Setup
   2814  f53b
   2815  f53b				   .skipL056
   2816  f53b				   .
   2817  f53b							; 
   2818  f53b
   2819  f53b				   .__TS_AP_Skip
   2820  f53b							; __TS_AP_Skip
   2821  f53b
   2822  f53b				   .
   2823  f53b							; 
   2824  f53b
   2825  f53b				   .
   2826  f53b							; 
   2827  f53b
   2828  f53b				   .
   2829  f53b							; 
   2830  f53b
   2831  f53b				   .
   2832  f53b							; 
   2833  f53b
   2834  f53b				   .
   2835  f53b							; 
   2836  f53b
   2837  f53b				   .
   2838  f53b							; 
   2839  f53b
   2840  f53b				   .
   2841  f53b							; 
   2842  f53b
   2843  f53b				   .L057		;  drawscreen
   2844  f53b
   2845  f53b		       20 d5 f3 	      jsr	drawscreen
   2846  f53e				   .
   2847  f53e							; 
   2848  f53e
   2849  f53e				   .
   2850  f53e							; 
   2851  f53e
   2852  f53e				   .
   2853  f53e							; 
   2854  f53e
   2855  f53e				   .
   2856  f53e							; 
   2857  f53e
   2858  f53e				   .
   2859  f53e							; 
   2860  f53e
   2861  f53e				   .
   2862  f53e							; 
   2863  f53e
   2864  f53e				   .
   2865  f53e							; 
   2866  f53e
   2867  f53e				   .
   2868  f53e							; 
   2869  f53e
   2870  f53e				   .
   2871  f53e							; 
   2872  f53e
   2873  f53e				   .
   2874  f53e							; 
   2875  f53e
   2876  f53e				   .
   2877  f53e							; 
   2878  f53e
   2879  f53e				   .
   2880  f53e							; 
   2881  f53e
   2882  f53e				   .
   2883  f53e							; 
   2884  f53e
   2885  f53e				   .
   2886  f53e							; 
   2887  f53e
   2888  f53e				   .L058		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
   2889  f53e
   2890  f53e		       a9 01		      lda	#1
   2891  f540		       2c 82 02 	      bit	SWCHB
   2892  f543		       f0 0d		      BEQ	.skipL058
   2893  f545				   .condpart3
   2894  f545		       24 0c		      bit	INPT4
   2895  f547		       10 09		      BPL	.skip3then
   2896  f549				   .condpart4
   2897  f549		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2898  f54b		       29 fe		      AND	#254
   2899  f54d		       85 ec		      STA	_Bit0_Reset_Restrainer
   2900  f54f		       4c 17 f5 	      jmp	.__Title_Screen_Loop
   2901  f552
   2902  f552				   .skip3then
   2903  f552				   .skipL058
   2904  f552				   .
   2905  f552							; 
   2906  f552
   2907  f552				   .
   2908  f552							; 
   2909  f552
   2910  f552				   .
   2911  f552							; 
   2912  f552
   2913  f552				   .
   2914  f552							; 
   2915  f552
   2916  f552				   .
   2917  f552							; 
   2918  f552
   2919  f552				   .L059		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   2920  f552
   2921  f552		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2922  f554		       4a		      LSR
   2923  f555		       90 03		      BCC	.skipL059
   2924  f557				   .condpart5
   2925  f557		       4c 17 f5 	      jmp	.__Title_Screen_Loop
   2926  f55a
   2927  f55a				   .skipL059
   2928  f55a				   .
   2929  f55a							; 
   2930  f55a
   2931  f55a				   .
   2932  f55a							; 
   2933  f55a
   2934  f55a				   .
   2935  f55a							; 
   2936  f55a
   2937  f55a				   .
   2938  f55a							; 
   2939  f55a
   2940  f55a				   .L060		;  _Bit2_Game_Control{2}  =  1
   2941  f55a
   2942  f55a		       a5 ec		      LDA	_Bit2_Game_Control
   2943  f55c		       09 04		      ORA	#4
   2944  f55e		       85 ec		      STA	_Bit2_Game_Control
   2945  f560				   .
   2946  f560							; 
   2947  f560
   2948  f560				   .
   2949  f560							; 
   2950  f560
   2951  f560				   .
   2952  f560							; 
   2953  f560
   2954  f560				   .
   2955  f560							; 
   2956  f560
   2957  f560				   .L061		;  goto __Start_Restart
   2958  f560
   2959  f560		       4c 7f f4 	      jmp	.__Start_Restart
   2960  f563
   2961  f563				   .
   2962  f563							; 
   2963  f563
   2964  f563				   .
   2965  f563							; 
   2966  f563
   2967  f563				   .
   2968  f563							; 
   2969  f563
   2970  f563				   .
   2971  f563							; 
   2972  f563
   2973  f563				   .
   2974  f563							; 
   2975  f563
   2976  f563				   .
   2977  f563							; 
   2978  f563
   2979  f563				   .
   2980  f563							; 
   2981  f563
   2982  f563				   .
   2983  f563							; 
   2984  f563
   2985  f563				   .
   2986  f563							; 
   2987  f563
   2988  f563				   .
   2989  f563							; 
   2990  f563
   2991  f563				   .
   2992  f563							; 
   2993  f563
   2994  f563				   .__Main_Loop_Setup
   2995  f563							; __Main_Loop_Setup
   2996  f563
   2997  f563				   .
   2998  f563							; 
   2999  f563
   3000  f563				   .
   3001  f563							; 
   3002  f563
   3003  f563				   .
   3004  f563							; 
   3005  f563
   3006  f563				   .
   3007  f563							; 
   3008  f563
   3009  f563				   .
   3010  f563							; 
   3011  f563
   3012  f563				   .
   3013  f563							; 
   3014  f563
   3015  f563				   .
   3016  f563							; 
   3017  f563
   3018  f563				   .
   3019  f563							; 
   3020  f563
   3021  f563				   .
   3022  f563							; 
   3023  f563
   3024  f563				   .
   3025  f563							; 
   3026  f563
   3027  f563				   .L062		;  _Bit2_Game_Control{2}  =  0
   3028  f563
   3029  f563		       a5 ec		      LDA	_Bit2_Game_Control
   3030  f565		       29 fb		      AND	#251
   3031  f567		       85 ec		      STA	_Bit2_Game_Control
   3032  f569				   .
   3033  f569							; 
   3034  f569
   3035  f569				   .
   3036  f569							; 
   3037  f569
   3038  f569				   .
   3039  f569							; 
   3040  f569
   3041  f569				   .
   3042  f569							; 
   3043  f569
   3044  f569				   .
   3045  f569							; 
   3046  f569
   3047  f569				   .
   3048  f569							; 
   3049  f569
   3050  f569				   .
   3051  f569							; 
   3052  f569
   3053  f569				   .
   3054  f569							; 
   3055  f569
   3056  f569				   .
   3057  f569							; 
   3058  f569
   3059  f569				   .
   3060  f569							; 
   3061  f569
   3062  f569				   .
   3063  f569							; 
   3064  f569
   3065  f569				   .
   3066  f569							; 
   3067  f569
   3068  f569				   .L063		;  _Bit0_Reset_Restrainer{0}  =  1
   3069  f569
   3070  f569		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   3071  f56b		       09 01		      ORA	#1
   3072  f56d		       85 ec		      STA	_Bit0_Reset_Restrainer
   3073  f56f				   .
   3074  f56f							; 
   3075  f56f
   3076  f56f				   .
   3077  f56f							; 
   3078  f56f
   3079  f56f				   .
   3080  f56f							; 
   3081  f56f
   3082  f56f				   .
   3083  f56f							; 
   3084  f56f
   3085  f56f				   .
   3086  f56f							; 
   3087  f56f
   3088  f56f				   .
   3089  f56f							; 
   3090  f56f
   3091  f56f				   .
   3092  f56f							; 
   3093  f56f
   3094  f56f				   .
   3095  f56f							; 
   3096  f56f
   3097  f56f				   .
   3098  f56f							; 
   3099  f56f
   3100  f56f				   .
   3101  f56f							; 
   3102  f56f
   3103  f56f				   .
   3104  f56f							; 
   3105  f56f
   3106  f56f				   .
   3107  f56f							; 
   3108  f56f
   3109  f56f				   .L064		;  _Bit1_FireB_Restrainer{1}  =  1
   3110  f56f
   3111  f56f		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3112  f571		       09 02		      ORA	#2
   3113  f573		       85 ec		      STA	_Bit1_FireB_Restrainer
   3114  f575				   .
   3115  f575							; 
   3116  f575
   3117  f575				   .
   3118  f575							; 
   3119  f575
   3120  f575				   .
   3121  f575							; 
   3122  f575
   3123  f575				   .
   3124  f575							; 
   3125  f575
   3126  f575				   .
   3127  f575							; 
   3128  f575
   3129  f575				   .
   3130  f575							; 
   3131  f575
   3132  f575				   .L065		;  player0x  =  74  :	player0y  =  78
   3133  f575
   3134  f575		       a9 4a		      LDA	#74
   3135  f577		       85 80		      STA	player0x
   3136  f579		       a9 4e		      LDA	#78
   3137  f57b		       85 85		      STA	player0y
   3138  f57d				   .
   3139  f57d							; 
   3140  f57d
   3141  f57d				   .
   3142  f57d							; 
   3143  f57d
   3144  f57d				   .
   3145  f57d							; 
   3146  f57d
   3147  f57d				   .
   3148  f57d							; 
   3149  f57d
   3150  f57d				   .
   3151  f57d							; 
   3152  f57d
   3153  f57d				   .
   3154  f57d							; 
   3155  f57d
   3156  f57d				   .L066		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0
   3157  f57d
   3158  f57d							; complex statement detected
   3159  f57d		       20 c7 f3 	      jsr	randomize
   3160  f580		       4a		      lsr
   3161  f581		       48		      PHA
   3162  f582		       20 c7 f3 	      jsr	randomize
   3163  f585		       29 0f		      AND	#15
   3164  f587		       ba		      TSX
   3165  f588		       e8		      INX
   3166  f589		       9a		      TXS
   3167  f58a		       18		      CLC
   3168  f58b		       75 00		      ADC	$00,x
   3169  f58d		       85 81		      STA	player1x
   3170  f58f		       a9 00		      LDA	#0
   3171  f591		       85 86		      STA	player1y
   3172  f593				   .
   3173  f593							; 
   3174  f593
   3175  f593				   .
   3176  f593							; 
   3177  f593
   3178  f593				   .
   3179  f593							; 
   3180  f593
   3181  f593				   .
   3182  f593							; 
   3183  f593
   3184  f593				   .
   3185  f593							; 
   3186  f593
   3187  f593				   .
   3188  f593							; 
   3189  f593
   3190  f593				   .L067		;  ballheight	=  4  :  bally	=  250
   3191  f593
   3192  f593		       a9 04		      LDA	#4
   3193  f595		       85 92		      STA	ballheight
   3194  f597		       a9 fa		      LDA	#250
   3195  f599		       85 89		      STA	bally
   3196  f59b				   .
   3197  f59b							; 
   3198  f59b
   3199  f59b				   .
   3200  f59b							; 
   3201  f59b
   3202  f59b				   .
   3203  f59b							; 
   3204  f59b
   3205  f59b				   .
   3206  f59b							; 
   3207  f59b
   3208  f59b				   .
   3209  f59b							; 
   3210  f59b
   3211  f59b				   .
   3212  f59b							; 
   3213  f59b
   3214  f59b				   .L068		;  scorecolor	=  $1C
   3215  f59b
   3216  f59b		       a9 1c		      LDA	#$1C
   3217  f59d		       85 a3		      STA	scorecolor
   3218  f59f				   .
   3219  f59f							; 
   3220  f59f
   3221  f59f				   .
   3222  f59f							; 
   3223  f59f
   3224  f59f				   .
   3225  f59f							; 
   3226  f59f
   3227  f59f				   .
   3228  f59f							; 
   3229  f59f
   3230  f59f				   .
   3231  f59f							; 
   3232  f59f
   3233  f59f				   .
   3234  f59f							; 
   3235  f59f
   3236  f59f				   .L069		;  pfscore1  =  %01010101  :  pfscorecolor  =	$D2
   3237  f59f
   3238  f59f		       a9 55		      LDA	#%01010101
   3239  f5a1		       85 f2		      STA	pfscore1
   3240  f5a3		       a9 d2		      LDA	#$D2
   3241  f5a5		       85 f4		      STA	pfscorecolor
   3242  f5a7				   .
   3243  f5a7							; 
   3244  f5a7
   3245  f5a7				   .
   3246  f5a7							; 
   3247  f5a7
   3248  f5a7				   .
   3249  f5a7							; 
   3250  f5a7
   3251  f5a7				   .
   3252  f5a7							; 
   3253  f5a7
   3254  f5a7				   .
   3255  f5a7							; 
   3256  f5a7
   3257  f5a7				   .
   3258  f5a7							; 
   3259  f5a7
   3260  f5a7				   .L070		;  playfield:
   3261  f5a7
   3262  f5a7				  -	      ifconst	pfres
   3263  f5a7				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3264  f5a7					      else
   3265  f5a7		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3266  f5a9					      endif
   3267  f5a9		       4c d8 f5 	      jmp	pflabel1
   3268  f5ac				   PF_data1
   3269  f5ac		       ff ff		      .byte.b	%11111111, %11111111
   3270  f5ae					      if	(pfwidth>2)
   3271  f5ae		       ff 7f		      .byte.b	%11111111, %01111111
   3272  f5b0					      endif
   3273  f5b0		       00 00		      .byte.b	%00000000, %00000000
   3274  f5b2					      if	(pfwidth>2)
   3275  f5b2		       00 00		      .byte.b	%00000000, %00000000
   3276  f5b4					      endif
   3277  f5b4		       00 00		      .byte.b	%00000000, %00000000
   3278  f5b6					      if	(pfwidth>2)
   3279  f5b6		       00 00		      .byte.b	%00000000, %00000000
   3280  f5b8					      endif
   3281  f5b8		       00 00		      .byte.b	%00000000, %00000000
   3282  f5ba					      if	(pfwidth>2)
   3283  f5ba		       00 00		      .byte.b	%00000000, %00000000
   3284  f5bc					      endif
   3285  f5bc		       00 00		      .byte.b	%00000000, %00000000
   3286  f5be					      if	(pfwidth>2)
   3287  f5be		       00 00		      .byte.b	%00000000, %00000000
   3288  f5c0					      endif
   3289  f5c0		       00 00		      .byte.b	%00000000, %00000000
   3290  f5c2					      if	(pfwidth>2)
   3291  f5c2		       00 00		      .byte.b	%00000000, %00000000
   3292  f5c4					      endif
   3293  f5c4		       00 00		      .byte.b	%00000000, %00000000
   3294  f5c6					      if	(pfwidth>2)
   3295  f5c6		       00 00		      .byte.b	%00000000, %00000000
   3296  f5c8					      endif
   3297  f5c8		       00 00		      .byte.b	%00000000, %00000000
   3298  f5ca					      if	(pfwidth>2)
   3299  f5ca		       00 00		      .byte.b	%00000000, %00000000
   3300  f5cc					      endif
   3301  f5cc		       00 00		      .byte.b	%00000000, %00000000
   3302  f5ce					      if	(pfwidth>2)
   3303  f5ce		       00 00		      .byte.b	%00000000, %00000000
   3304  f5d0					      endif
   3305  f5d0		       00 00		      .byte.b	%00000000, %00000000
   3306  f5d2					      if	(pfwidth>2)
   3307  f5d2		       00 00		      .byte.b	%00000000, %00000000
   3308  f5d4					      endif
   3309  f5d4		       ff ff		      .byte.b	%11111111, %11111111
   3310  f5d6					      if	(pfwidth>2)
   3311  f5d6		       ff 7f		      .byte.b	%11111111, %01111111
   3312  f5d8					      endif
   3313  f5d8				   pflabel1
   3314  f5d8		       bd ac f5 	      lda	PF_data1,x
   3315  f5db		       95 a4		      sta	playfield,x
   3316  f5dd		       ca		      dex
   3317  f5de		       10 f8		      bpl	pflabel1
   3318  f5e0				   .
   3319  f5e0							; 
   3320  f5e0
   3321  f5e0				   .
   3322  f5e0							; 
   3323  f5e0
   3324  f5e0				   .
   3325  f5e0							; 
   3326  f5e0
   3327  f5e0				   .
   3328  f5e0							; 
   3329  f5e0
   3330  f5e0				   .
   3331  f5e0							; 
   3332  f5e0
   3333  f5e0				   .
   3334  f5e0							; 
   3335  f5e0
   3336  f5e0				   .L071		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   3337  f5e0
   3338  f5e0		       a5 e5		      LDA	_Bit0_BW_Mem
   3339  f5e2		       29 fe		      AND	#254
   3340  f5e4		       85 e5		      STA	_Bit0_BW_Mem
   3341  f5e6		       a9 08		      lda	#8
   3342  f5e8		       2c 82 02 	      bit	SWCHB
   3343  f5eb		       d0 06		      BNE	.skipL071
   3344  f5ed				   .condpart6
   3345  f5ed		       a5 e5		      LDA	_Bit0_BW_Mem
   3346  f5ef		       09 01		      ORA	#1
   3347  f5f1		       85 e5		      STA	_Bit0_BW_Mem
   3348  f5f3				   .skipL071
   3349  f5f3				   .
   3350  f5f3							; 
   3351  f5f3
   3352  f5f3				   .
   3353  f5f3							; 
   3354  f5f3
   3355  f5f3				   .
   3356  f5f3							; 
   3357  f5f3
   3358  f5f3				   .
   3359  f5f3							; 
   3360  f5f3
   3361  f5f3				   .
   3362  f5f3							; 
   3363  f5f3
   3364  f5f3				   .
   3365  f5f3							; 
   3366  f5f3
   3367  f5f3				   .
   3368  f5f3							; 
   3369  f5f3
   3370  f5f3				   .
   3371  f5f3							; 
   3372  f5f3
   3373  f5f3				   .
   3374  f5f3							; 
   3375  f5f3
   3376  f5f3				   .L072		;  if !_Bit3_Auto_Play{3} then score  =  0  :	goto __AP_Skip_AP_Setup
   3377  f5f3
   3378  f5f3		       a5 ec		      LDA	_Bit3_Auto_Play
   3379  f5f5		       29 08		      AND	#8
   3380  f5f7		       d0 0f		      BNE	.skipL072
   3381  f5f9				   .condpart7
   3382  f5f9		       a9 00		      LDA	#$00
   3383  f5fb		       85 95		      STA	score+2
   3384  f5fd		       a9 00		      LDA	#$00
   3385  f5ff		       85 94		      STA	score+1
   3386  f601		       a9 00		      LDA	#$00
   3387  f603		       85 93		      STA	score
   3388  f605		       4c 20 f6 	      jmp	.__AP_Skip_AP_Setup
   3389  f608
   3390  f608				   .skipL072
   3391  f608				   .
   3392  f608							; 
   3393  f608
   3394  f608				   .
   3395  f608							; 
   3396  f608
   3397  f608				   .
   3398  f608							; 
   3399  f608
   3400  f608				   .
   3401  f608							; 
   3402  f608
   3403  f608				   .L073		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   3404  f608
   3405  f608		       a9 00		      LDA	#0
   3406  f60a		       85 d4		      STA	_Master_Counter
   3407  f60c		       85 d5		      STA	_Frame_Counter
   3408  f60e				   .
   3409  f60e							; 
   3410  f60e
   3411  f60e				   .
   3412  f60e							; 
   3413  f60e
   3414  f60e				   .
   3415  f60e							; 
   3416  f60e
   3417  f60e				   .
   3418  f60e							; 
   3419  f60e
   3420  f60e				   .L074		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   3421  f60e
   3422  f60e		       a5 93		      LDA	_sc1
   3423  f610		       85 e6		      STA	_Score1_Mem
   3424  f612		       a5 94		      LDA	_sc2
   3425  f614		       85 e7		      STA	_Score2_Mem
   3426  f616		       a5 95		      LDA	_sc3
   3427  f618		       85 e8		      STA	_Score3_Mem
   3428  f61a				   .
   3429  f61a							; 
   3430  f61a
   3431  f61a				   .L075		;  _Bit6_Swap_Scores{6}  =  0
   3432  f61a
   3433  f61a		       a5 ec		      LDA	_Bit6_Swap_Scores
   3434  f61c		       29 bf		      AND	#191
   3435  f61e		       85 ec		      STA	_Bit6_Swap_Scores
   3436  f620				   .
   3437  f620							; 
   3438  f620
   3439  f620				   .__AP_Skip_AP_Setup
   3440  f620							; __AP_Skip_AP_Setup
   3441  f620
   3442  f620				   .
   3443  f620							; 
   3444  f620
   3445  f620				   .
   3446  f620							; 
   3447  f620
   3448  f620				   .
   3449  f620							; 
   3450  f620
   3451  f620				   .
   3452  f620							; 
   3453  f620
   3454  f620				   .
   3455  f620							; 
   3456  f620
   3457  f620				   .
   3458  f620							; 
   3459  f620
   3460  f620				   .
   3461  f620							; 
   3462  f620
   3463  f620				   .
   3464  f620							; 
   3465  f620
   3466  f620				   .
   3467  f620							; 
   3468  f620
   3469  f620				   .
   3470  f620							; 
   3471  f620
   3472  f620				   .
   3473  f620							; 
   3474  f620
   3475  f620				   .__Main_Loop
   3476  f620							; __Main_Loop
   3477  f620
   3478  f620				   .
   3479  f620							; 
   3480  f620
   3481  f620				   .
   3482  f620							; 
   3483  f620
   3484  f620				   .
   3485  f620							; 
   3486  f620
   3487  f620				   .
   3488  f620							; 
   3489  f620
   3490  f620				   .
   3491  f620							; 
   3492  f620
   3493  f620				   .
   3494  f620							; 
   3495  f620
   3496  f620				   .
   3497  f620							; 
   3498  f620
   3499  f620				   .L076		;  COLUBK  =  $D6
   3500  f620
   3501  f620		       a9 d6		      LDA	#$D6
   3502  f622		       85 09		      STA	COLUBK
   3503  f624				   .
   3504  f624							; 
   3505  f624
   3506  f624				   .
   3507  f624							; 
   3508  f624
   3509  f624				   .
   3510  f624							; 
   3511  f624
   3512  f624				   .
   3513  f624							; 
   3514  f624
   3515  f624				   .
   3516  f624							; 
   3517  f624
   3518  f624				   .
   3519  f624							; 
   3520  f624
   3521  f624				   .
   3522  f624							; 
   3523  f624
   3524  f624				   .L077		;  COLUPF  =  0
   3525  f624
   3526  f624		       a9 00		      LDA	#0
   3527  f626		       85 08		      STA	COLUPF
   3528  f628				   .
   3529  f628							; 
   3530  f628
   3531  f628				   .
   3532  f628							; 
   3533  f628
   3534  f628				   .
   3535  f628							; 
   3536  f628
   3537  f628				   .
   3538  f628							; 
   3539  f628
   3540  f628				   .
   3541  f628							; 
   3542  f628
   3543  f628				   .
   3544  f628							; 
   3545  f628
   3546  f628				   .
   3547  f628							; 
   3548  f628
   3549  f628				   .L078		;  COLUP0  =  $22  :  COLUP1  =  $20
   3550  f628
   3551  f628		       a9 22		      LDA	#$22
   3552  f62a		       85 06		      STA	COLUP0
   3553  f62c		       a9 20		      LDA	#$20
   3554  f62e		       85 07		      STA	COLUP1
   3555  f630				   .
   3556  f630							; 
   3557  f630
   3558  f630				   .
   3559  f630							; 
   3560  f630
   3561  f630				   .
   3562  f630							; 
   3563  f630
   3564  f630				   .
   3565  f630							; 
   3566  f630
   3567  f630				   .
   3568  f630							; 
   3569  f630
   3570  f630				   .
   3571  f630							; 
   3572  f630
   3573  f630				   .
   3574  f630							; 
   3575  f630
   3576  f630				   .L079		;  NUSIZ0  =  $10
   3577  f630
   3578  f630		       a9 10		      LDA	#$10
   3579  f632		       85 04		      STA	NUSIZ0
   3580  f634				   .
   3581  f634							; 
   3582  f634
   3583  f634				   .
   3584  f634							; 
   3585  f634
   3586  f634				   .
   3587  f634							; 
   3588  f634
   3589  f634				   .
   3590  f634							; 
   3591  f634
   3592  f634				   .
   3593  f634							; 
   3594  f634
   3595  f634				   .
   3596  f634							; 
   3597  f634
   3598  f634				   .
   3599  f634							; 
   3600  f634
   3601  f634				   .L080		;  NUSIZ1  =  $05
   3602  f634
   3603  f634		       a9 05		      LDA	#$05
   3604  f636		       85 05		      STA	NUSIZ1
   3605  f638				   .
   3606  f638							; 
   3607  f638
   3608  f638				   .
   3609  f638							; 
   3610  f638
   3611  f638				   .
   3612  f638							; 
   3613  f638
   3614  f638				   .
   3615  f638							; 
   3616  f638
   3617  f638				   .
   3618  f638							; 
   3619  f638
   3620  f638				   .
   3621  f638							; 
   3622  f638
   3623  f638				   .
   3624  f638							; 
   3625  f638
   3626  f638				   .
   3627  f638							; 
   3628  f638
   3629  f638				   .
   3630  f638							; 
   3631  f638
   3632  f638				   .
   3633  f638							; 
   3634  f638
   3635  f638				   .L081		;  _Master_Counter  =	_Master_Counter  +  1
   3636  f638
   3637  f638		       e6 d4		      INC	_Master_Counter
   3638  f63a				   .
   3639  f63a							; 
   3640  f63a
   3641  f63a				   .
   3642  f63a							; 
   3643  f63a
   3644  f63a				   .
   3645  f63a							; 
   3646  f63a
   3647  f63a				   .
   3648  f63a							; 
   3649  f63a
   3650  f63a				   .L082		;  if _Master_Counter	<  7 then goto __Skip_Counters
   3651  f63a
   3652  f63a		       a5 d4		      LDA	_Master_Counter
   3653  f63c		       c9 07		      CMP	#7
   3654  f63e		       b0 03		      BCS	.skipL082
   3655  f640				   .condpart8
   3656  f640		       4c 53 f6 	      jmp	.__Skip_Counters
   3657  f643
   3658  f643				   .skipL082
   3659  f643				   .
   3660  f643							; 
   3661  f643
   3662  f643				   .
   3663  f643							; 
   3664  f643
   3665  f643				   .
   3666  f643							; 
   3667  f643
   3668  f643				   .
   3669  f643							; 
   3670  f643
   3671  f643				   .L083		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   3672  f643
   3673  f643		       e6 d5		      INC	_Frame_Counter
   3674  f645		       a9 00		      LDA	#0
   3675  f647		       85 d4		      STA	_Master_Counter
   3676  f649				   .
   3677  f649							; 
   3678  f649
   3679  f649				   .
   3680  f649							; 
   3681  f649
   3682  f649				   .
   3683  f649							; 
   3684  f649
   3685  f649				   .
   3686  f649							; 
   3687  f649
   3688  f649				   .L084		;  if _Frame_Counter  >  3 then _Frame_Counter  =  0
   3689  f649
   3690  f649		       a9 03		      LDA	#3
   3691  f64b		       c5 d5		      CMP	_Frame_Counter
   3692  f64d		       b0 04		      BCS	.skipL084
   3693  f64f				   .condpart9
   3694  f64f		       a9 00		      LDA	#0
   3695  f651		       85 d5		      STA	_Frame_Counter
   3696  f653				   .skipL084
   3697  f653				   .
   3698  f653							; 
   3699  f653
   3700  f653				   .__Skip_Counters
   3701  f653							; __Skip_Counters
   3702  f653
   3703  f653				   .
   3704  f653							; 
   3705  f653
   3706  f653				   .
   3707  f653							; 
   3708  f653
   3709  f653				   .
   3710  f653							; 
   3711  f653
   3712  f653				   .
   3713  f653							; 
   3714  f653
   3715  f653				   .
   3716  f653							; 
   3717  f653
   3718  f653				   .
   3719  f653							; 
   3720  f653
   3721  f653				   .
   3722  f653							; 
   3723  f653
   3724  f653				   .L085		;  on _Frame_Counter goto __Sq00 __Sq01 __Sq02 __Sq03
   3725  f653
   3726  f653		       a6 d5		      LDX	_Frame_Counter
   3727  f655		       bd 5e f6 	      LDA	.L085jumptablehi,x
   3728  f658		       48		      PHA
   3729  f659		       bd 62 f6 	      LDA	.L085jumptablelo,x
   3730  f65c		       48		      PHA
   3731  f65d		       60		      RTS
   3732  f65e				   .L085jumptablehi
   3733  f65e		       fa		      .byte.b	>(.__Sq00-1)
   3734  f65f		       fa		      .byte.b	>(.__Sq01-1)
   3735  f660		       fa		      .byte.b	>(.__Sq02-1)
   3736  f661		       fa		      .byte.b	>(.__Sq03-1)
   3737  f662				   .L085jumptablelo
   3738  f662		       3f		      .byte.b	<(.__Sq00-1)
   3739  f663		       4e		      .byte.b	<(.__Sq01-1)
   3740  f664		       5d		      .byte.b	<(.__Sq02-1)
   3741  f665		       6c		      .byte.b	<(.__Sq03-1)
   3742  f666				   .
   3743  f666							; 
   3744  f666
   3745  f666				   .__Squirrel_Frame_Done
   3746  f666							; __Squirrel_Frame_Done
   3747  f666
   3748  f666				   .
   3749  f666							; 
   3750  f666
   3751  f666				   .
   3752  f666							; 
   3753  f666
   3754  f666				   .
   3755  f666							; 
   3756  f666
   3757  f666				   .
   3758  f666							; 
   3759  f666
   3760  f666				   .
   3761  f666							; 
   3762  f666
   3763  f666				   .
   3764  f666							; 
   3765  f666
   3766  f666				   .
   3767  f666							; 
   3768  f666
   3769  f666				   .L086		;  on _Frame_Counter goto __Ac00 __Ac01 __Ac02 __Ac03
   3770  f666
   3771  f666		       a6 d5		      LDX	_Frame_Counter
   3772  f668		       bd 71 f6 	      LDA	.L086jumptablehi,x
   3773  f66b		       48		      PHA
   3774  f66c		       bd 75 f6 	      LDA	.L086jumptablelo,x
   3775  f66f		       48		      PHA
   3776  f670		       60		      RTS
   3777  f671				   .L086jumptablehi
   3778  f671		       fa		      .byte.b	>(.__Ac00-1)
   3779  f672		       fa		      .byte.b	>(.__Ac01-1)
   3780  f673		       fa		      .byte.b	>(.__Ac02-1)
   3781  f674		       fa		      .byte.b	>(.__Ac03-1)
   3782  f675				   .L086jumptablelo
   3783  f675		       03		      .byte.b	<(.__Ac00-1)
   3784  f676		       12		      .byte.b	<(.__Ac01-1)
   3785  f677		       21		      .byte.b	<(.__Ac02-1)
   3786  f678		       30		      .byte.b	<(.__Ac03-1)
   3787  f679				   .
   3788  f679							; 
   3789  f679
   3790  f679				   .__Acorn_Frame_Done
   3791  f679							; __Acorn_Frame_Done
   3792  f679
   3793  f679				   .
   3794  f679							; 
   3795  f679
   3796  f679				   .
   3797  f679							; 
   3798  f679
   3799  f679				   .
   3800  f679							; 
   3801  f679
   3802  f679				   .
   3803  f679							; 
   3804  f679
   3805  f679				   .
   3806  f679							; 
   3807  f679
   3808  f679				   .
   3809  f679							; 
   3810  f679
   3811  f679				   .
   3812  f679							; 
   3813  f679
   3814  f679				   .
   3815  f679							; 
   3816  f679
   3817  f679				   .
   3818  f679							; 
   3819  f679
   3820  f679				   .
   3821  f679							; 
   3822  f679
   3823  f679				   .L087		;  if bally  >  240 then goto __FireB_Check
   3824  f679
   3825  f679		       a9 f0		      LDA	#240
   3826  f67b		       c5 89		      CMP	bally
   3827  f67d		       b0 03		      BCS	.skipL087
   3828  f67f				   .condpart10
   3829  f67f		       4c 8c f6 	      jmp	.__FireB_Check
   3830  f682
   3831  f682				   .skipL087
   3832  f682				   .
   3833  f682							; 
   3834  f682
   3835  f682				   .
   3836  f682							; 
   3837  f682
   3838  f682				   .
   3839  f682							; 
   3840  f682
   3841  f682				   .
   3842  f682							; 
   3843  f682
   3844  f682				   .L088		;  bally  =  bally  -	2  :  goto __Skip_FireB
   3845  f682
   3846  f682		       a5 89		      LDA	bally
   3847  f684		       38		      SEC
   3848  f685		       e9 02		      SBC	#2
   3849  f687		       85 89		      STA	bally
   3850  f689		       4c ca f6 	      jmp	.__Skip_FireB
   3851  f68c
   3852  f68c				   .
   3853  f68c							; 
   3854  f68c
   3855  f68c				   .__FireB_Check
   3856  f68c							; __FireB_Check
   3857  f68c
   3858  f68c				   .
   3859  f68c							; 
   3860  f68c
   3861  f68c				   .
   3862  f68c							; 
   3863  f68c
   3864  f68c				   .
   3865  f68c							; 
   3866  f68c
   3867  f68c				   .
   3868  f68c							; 
   3869  f68c
   3870  f68c				   .L089		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Fire_Missile
   3871  f68c
   3872  f68c		       a5 ec		      LDA	_Bit3_Auto_Play
   3873  f68e		       29 08		      AND	#8
   3874  f690		       d0 03		      BNE	.skipL089
   3875  f692				   .condpart11
   3876  f692		       4c a6 f6 	      jmp	.__AP_Skip_Fire_Missile
   3877  f695
   3878  f695				   .skipL089
   3879  f695				   .
   3880  f695							; 
   3881  f695
   3882  f695				   .
   3883  f695							; 
   3884  f695
   3885  f695				   .
   3886  f695							; 
   3887  f695
   3888  f695				   .
   3889  f695							; 
   3890  f695
   3891  f695				   .
   3892  f695							; 
   3893  f695
   3894  f695				   .L090		;  temp5  =  rand  :  if temp5  <  230 then goto __Skip_FireB
   3895  f695
   3896  f695		       20 c7 f3 	      jsr	randomize
   3897  f698		       85 a0		      STA	temp5
   3898  f69a		       a5 a0		      LDA	temp5
   3899  f69c		       c9 e6		      CMP	#230
   3900  f69e		       b0 03		      BCS	.skipL090
   3901  f6a0				   .condpart12
   3902  f6a0		       4c ca f6 	      jmp	.__Skip_FireB
   3903  f6a3
   3904  f6a3				   .skipL090
   3905  f6a3				   .
   3906  f6a3							; 
   3907  f6a3
   3908  f6a3				   .L091		;  goto __AP_Fire
   3909  f6a3
   3910  f6a3		       4c bc f6 	      jmp	.__AP_Fire
   3911  f6a6
   3912  f6a6				   .
   3913  f6a6							; 
   3914  f6a6
   3915  f6a6				   .__AP_Skip_Fire_Missile
   3916  f6a6							; __AP_Skip_Fire_Missile
   3917  f6a6
   3918  f6a6				   .
   3919  f6a6							; 
   3920  f6a6
   3921  f6a6				   .
   3922  f6a6							; 
   3923  f6a6
   3924  f6a6				   .
   3925  f6a6							; 
   3926  f6a6
   3927  f6a6				   .
   3928  f6a6							; 
   3929  f6a6
   3930  f6a6				   .
   3931  f6a6							; 
   3932  f6a6
   3933  f6a6				   .L092		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Skip_FireB
   3934  f6a6
   3935  f6a6		       24 0c		      bit	INPT4
   3936  f6a8		       10 09		      BPL	.skipL092
   3937  f6aa				   .condpart13
   3938  f6aa		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3939  f6ac		       29 fd		      AND	#253
   3940  f6ae		       85 ec		      STA	_Bit1_FireB_Restrainer
   3941  f6b0		       4c ca f6 	      jmp	.__Skip_FireB
   3942  f6b3
   3943  f6b3				   .skipL092
   3944  f6b3				   .
   3945  f6b3							; 
   3946  f6b3
   3947  f6b3				   .
   3948  f6b3							; 
   3949  f6b3
   3950  f6b3				   .
   3951  f6b3							; 
   3952  f6b3
   3953  f6b3				   .
   3954  f6b3							; 
   3955  f6b3
   3956  f6b3				   .
   3957  f6b3							; 
   3958  f6b3
   3959  f6b3				   .L093		;  if _Bit1_FireB_Restrainer{1} then goto __Skip_FireB
   3960  f6b3
   3961  f6b3		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3962  f6b5		       29 02		      AND	#2
   3963  f6b7		       f0 03		      BEQ	.skipL093
   3964  f6b9				   .condpart14
   3965  f6b9		       4c ca f6 	      jmp	.__Skip_FireB
   3966  f6bc
   3967  f6bc				   .skipL093
   3968  f6bc				   .
   3969  f6bc							; 
   3970  f6bc
   3971  f6bc				   .__AP_Fire
   3972  f6bc							; __AP_Fire
   3973  f6bc
   3974  f6bc				   .
   3975  f6bc							; 
   3976  f6bc
   3977  f6bc				   .
   3978  f6bc							; 
   3979  f6bc
   3980  f6bc				   .
   3981  f6bc							; 
   3982  f6bc
   3983  f6bc				   .
   3984  f6bc							; 
   3985  f6bc
   3986  f6bc				   .L094		;  bally  =  player0y	-  2  :  ballx	=  player0x  +	4
   3987  f6bc
   3988  f6bc		       a5 85		      LDA	player0y
   3989  f6be		       38		      SEC
   3990  f6bf		       e9 02		      SBC	#2
   3991  f6c1		       85 89		      STA	bally
   3992  f6c3		       a5 80		      LDA	player0x
   3993  f6c5		       18		      CLC
   3994  f6c6		       69 04		      ADC	#4
   3995  f6c8		       85 84		      STA	ballx
   3996  f6ca				   .
   3997  f6ca							; 
   3998  f6ca
   3999  f6ca				   .__Skip_FireB
   4000  f6ca							; __Skip_FireB
   4001  f6ca
   4002  f6ca				   .
   4003  f6ca							; 
   4004  f6ca
   4005  f6ca				   .
   4006  f6ca							; 
   4007  f6ca
   4008  f6ca				   .
   4009  f6ca							; 
   4010  f6ca
   4011  f6ca				   .
   4012  f6ca							; 
   4013  f6ca
   4014  f6ca				   .
   4015  f6ca							; 
   4016  f6ca
   4017  f6ca				   .
   4018  f6ca							; 
   4019  f6ca
   4020  f6ca				   .
   4021  f6ca							; 
   4022  f6ca
   4023  f6ca				   .
   4024  f6ca							; 
   4025  f6ca
   4026  f6ca				   .
   4027  f6ca							; 
   4028  f6ca
   4029  f6ca				   .
   4030  f6ca							; 
   4031  f6ca
   4032  f6ca				   .L095		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_New_Dir
   4033  f6ca
   4034  f6ca		       a5 ec		      LDA	_Bit3_Auto_Play
   4035  f6cc		       29 08		      AND	#8
   4036  f6ce		       d0 03		      BNE	.skipL095
   4037  f6d0				   .condpart15
   4038  f6d0		       4c 29 f7 	      jmp	.__AP_Skip_New_Dir
   4039  f6d3
   4040  f6d3				   .skipL095
   4041  f6d3				   .
   4042  f6d3							; 
   4043  f6d3
   4044  f6d3				   .
   4045  f6d3							; 
   4046  f6d3
   4047  f6d3				   .
   4048  f6d3							; 
   4049  f6d3
   4050  f6d3				   .
   4051  f6d3							; 
   4052  f6d3
   4053  f6d3				   .L096		;  _AP_Dir_Counter  =	_AP_Dir_Counter  +  1
   4054  f6d3
   4055  f6d3		       e6 dd		      INC	_AP_Dir_Counter
   4056  f6d5				   .
   4057  f6d5							; 
   4058  f6d5
   4059  f6d5				   .
   4060  f6d5							; 
   4061  f6d5
   4062  f6d5				   .
   4063  f6d5							; 
   4064  f6d5
   4065  f6d5				   .
   4066  f6d5							; 
   4067  f6d5
   4068  f6d5				   .
   4069  f6d5							; 
   4070  f6d5
   4071  f6d5				   .
   4072  f6d5							; 
   4073  f6d5
   4074  f6d5				   .L097		;  temp6  =   ( rand & 63 )   +  50
   4075  f6d5
   4076  f6d5							; complex statement detected
   4077  f6d5		       20 c7 f3 	      jsr	randomize
   4078  f6d8		       29 3f		      AND	#63
   4079  f6da		       18		      CLC
   4080  f6db		       69 32		      ADC	#50
   4081  f6dd		       85 a1		      STA	temp6
   4082  f6df				   .
   4083  f6df							; 
   4084  f6df
   4085  f6df				   .
   4086  f6df							; 
   4087  f6df
   4088  f6df				   .
   4089  f6df							; 
   4090  f6df
   4091  f6df				   .
   4092  f6df							; 
   4093  f6df
   4094  f6df				   .L098		;  if _AP_Dir_Counter	<  temp6 then goto __AP_Move_Acorn
   4095  f6df
   4096  f6df		       a5 dd		      LDA	_AP_Dir_Counter
   4097  f6e1		       c5 a1		      CMP	temp6
   4098  f6e3		       b0 03		      BCS	.skipL098
   4099  f6e5				   .condpart16
   4100  f6e5		       4c 0a f7 	      jmp	.__AP_Move_Acorn
   4101  f6e8
   4102  f6e8				   .skipL098
   4103  f6e8				   .
   4104  f6e8							; 
   4105  f6e8
   4106  f6e8				   .
   4107  f6e8							; 
   4108  f6e8
   4109  f6e8				   .
   4110  f6e8							; 
   4111  f6e8
   4112  f6e8				   .
   4113  f6e8							; 
   4114  f6e8
   4115  f6e8				   .L099		;  temp5  =  rand
   4116  f6e8
   4117  f6e8		       20 c7 f3 	      jsr	randomize
   4118  f6eb		       85 a0		      STA	temp5
   4119  f6ed				   .
   4120  f6ed							; 
   4121  f6ed
   4122  f6ed				   .
   4123  f6ed							; 
   4124  f6ed
   4125  f6ed				   .
   4126  f6ed							; 
   4127  f6ed
   4128  f6ed				   .
   4129  f6ed							; 
   4130  f6ed
   4131  f6ed				   .L0100		;  if temp5  <  230 then goto __AP_Move_Acorn
   4132  f6ed
   4133  f6ed		       a5 a0		      LDA	temp5
   4134  f6ef		       c9 e6		      CMP	#230
   4135  f6f1		       b0 03		      BCS	.skipL0100
   4136  f6f3				   .condpart17
   4137  f6f3		       4c 0a f7 	      jmp	.__AP_Move_Acorn
   4138  f6f6
   4139  f6f6				   .skipL0100
   4140  f6f6				   .
   4141  f6f6							; 
   4142  f6f6
   4143  f6f6				   .
   4144  f6f6							; 
   4145  f6f6
   4146  f6f6				   .
   4147  f6f6							; 
   4148  f6f6
   4149  f6f6				   .
   4150  f6f6							; 
   4151  f6f6
   4152  f6f6				   .L0101		;  _Bit3_AP_P0_Dir{3}	=  !_Bit3_AP_P0_Dir{3}
   4153  f6f6
   4154  f6f6		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4155  f6f8		       29 08		      AND	#8
   4156  f6fa		       08		      PHP
   4157  f6fb		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4158  f6fd		       29 f7		      AND	#247
   4159  f6ff		       28		      PLP
   4160  f700		       d0 02		      .byte.b	$D0, $02
   4161  f702		       09 08		      ORA	#8
   4162  f704		       85 e5		      STA	_Bit3_AP_P0_Dir
   4163  f706				   .
   4164  f706							; 
   4165  f706
   4166  f706				   .
   4167  f706							; 
   4168  f706
   4169  f706				   .
   4170  f706							; 
   4171  f706
   4172  f706				   .
   4173  f706							; 
   4174  f706
   4175  f706				   .L0102		;  _AP_Dir_Counter  =	0
   4176  f706
   4177  f706		       a9 00		      LDA	#0
   4178  f708		       85 dd		      STA	_AP_Dir_Counter
   4179  f70a				   .
   4180  f70a							; 
   4181  f70a
   4182  f70a				   .__AP_Move_Acorn
   4183  f70a							; __AP_Move_Acorn
   4184  f70a
   4185  f70a				   .
   4186  f70a							; 
   4187  f70a
   4188  f70a				   .
   4189  f70a							; 
   4190  f70a
   4191  f70a				   .
   4192  f70a							; 
   4193  f70a
   4194  f70a				   .
   4195  f70a							; 
   4196  f70a
   4197  f70a				   .L0103		;  if !_Bit3_AP_P0_Dir{3} then if player0x  >	_P_Edge_Left then player0x  =  player0x  -  1
   4198  f70a
   4199  f70a		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4200  f70c		       29 08		      AND	#8
   4201  f70e		       d0 08		      BNE	.skipL0103
   4202  f710				   .condpart18
   4203  f710		       a9 01		      LDA	#_P_Edge_Left
   4204  f712		       c5 80		      CMP	player0x
   4205  f714		       b0 02		      BCS	.skip18then
   4206  f716				   .condpart19
   4207  f716		       c6 80		      DEC	player0x
   4208  f718				   .skip18then
   4209  f718				   .skipL0103
   4210  f718				   .L0104		;  if _Bit3_AP_P0_Dir{3} then if player0x  <  _P_Edge_Right then player0x  =  player0x  +  1
   4211  f718
   4212  f718		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4213  f71a		       29 08		      AND	#8
   4214  f71c		       f0 08		      BEQ	.skipL0104
   4215  f71e				   .condpart20
   4216  f71e		       a5 80		      LDA	player0x
   4217  f720		       c9 99		      CMP	#_P_Edge_Right
   4218  f722		       b0 02		      BCS	.skip20then
   4219  f724				   .condpart21
   4220  f724		       e6 80		      INC	player0x
   4221  f726				   .skip20then
   4222  f726				   .skipL0104
   4223  f726				   .
   4224  f726							; 
   4225  f726
   4226  f726				   .L0105		;  goto __Skip_Joy_Movement
   4227  f726
   4228  f726		       4c 61 f7 	      jmp	.__Skip_Joy_Movement
   4229  f729
   4230  f729				   .
   4231  f729							; 
   4232  f729
   4233  f729				   .__AP_Skip_New_Dir
   4234  f729							; __AP_Skip_New_Dir
   4235  f729
   4236  f729				   .
   4237  f729							; 
   4238  f729
   4239  f729				   .
   4240  f729							; 
   4241  f729
   4242  f729				   .
   4243  f729							; 
   4244  f729
   4245  f729				   .
   4246  f729							; 
   4247  f729
   4248  f729				   .
   4249  f729							; 
   4250  f729
   4251  f729				   .
   4252  f729							; 
   4253  f729
   4254  f729				   .
   4255  f729							; 
   4256  f729
   4257  f729				   .
   4258  f729							; 
   4259  f729
   4260  f729				   .L0106		;  if joy0up then if player0y	>  _P_Edge_Top then player0y  =  player0y  -  1
   4261  f729
   4262  f729		       a9 10		      lda	#$10
   4263  f72b		       2c 80 02 	      bit	SWCHA
   4264  f72e		       d0 08		      BNE	.skipL0106
   4265  f730				   .condpart22
   4266  f730		       a9 0a		      LDA	#_P_Edge_Top
   4267  f732		       c5 85		      CMP	player0y
   4268  f734		       b0 02		      BCS	.skip22then
   4269  f736				   .condpart23
   4270  f736		       c6 85		      DEC	player0y
   4271  f738				   .skip22then
   4272  f738				   .skipL0106
   4273  f738				   .L0107		;  if joy0down then if player0y  <  _P_Edge_Bottom then player0y  =  player0y	+  1
   4274  f738
   4275  f738		       a9 20		      lda	#$20
   4276  f73a		       2c 80 02 	      bit	SWCHA
   4277  f73d		       d0 08		      BNE	.skipL0107
   4278  f73f				   .condpart24
   4279  f73f		       a5 85		      LDA	player0y
   4280  f741		       c9 53		      CMP	#_P_Edge_Bottom
   4281  f743		       b0 02		      BCS	.skip24then
   4282  f745				   .condpart25
   4283  f745		       e6 85		      INC	player0y
   4284  f747				   .skip24then
   4285  f747				   .skipL0107
   4286  f747				   .L0108		;  if joy0left then if player0x  >  _P_Edge_Left then player0x  =  player0x  -  1
   4287  f747
   4288  f747		       2c 80 02 	      bit	SWCHA
   4289  f74a		       70 08		      BVS	.skipL0108
   4290  f74c				   .condpart26
   4291  f74c		       a9 01		      LDA	#_P_Edge_Left
   4292  f74e		       c5 80		      CMP	player0x
   4293  f750		       b0 02		      BCS	.skip26then
   4294  f752				   .condpart27
   4295  f752		       c6 80		      DEC	player0x
   4296  f754				   .skip26then
   4297  f754				   .skipL0108
   4298  f754				   .L0109		;  if joy0right then if player0x  <  _P_Edge_Right then player0x  =  player0x	+  1
   4299  f754
   4300  f754		       2c 80 02 	      bit	SWCHA
   4301  f757		       30 08		      BMI	.skipL0109
   4302  f759				   .condpart28
   4303  f759		       a5 80		      LDA	player0x
   4304  f75b		       c9 99		      CMP	#_P_Edge_Right
   4305  f75d		       b0 02		      BCS	.skip28then
   4306  f75f				   .condpart29
   4307  f75f		       e6 80		      INC	player0x
   4308  f761				   .skip28then
   4309  f761				   .skipL0109
   4310  f761				   .
   4311  f761							; 
   4312  f761
   4313  f761				   .__Skip_Joy_Movement
   4314  f761							; __Skip_Joy_Movement
   4315  f761
   4316  f761				   .
   4317  f761							; 
   4318  f761
   4319  f761				   .
   4320  f761							; 
   4321  f761
   4322  f761				   .
   4323  f761							; 
   4324  f761
   4325  f761				   .
   4326  f761							; 
   4327  f761
   4328  f761				   .
   4329  f761							; 
   4330  f761
   4331  f761				   .
   4332  f761							; 
   4333  f761
   4334  f761				   .
   4335  f761							; 
   4336  f761
   4337  f761				   .L0110		;  if player1y  <  player0y then player1y  =  player1y  +  1
   4338  f761
   4339  f761		       a5 86		      LDA	player1y
   4340  f763		       c5 85		      CMP	player0y
   4341  f765		       b0 02		      BCS	.skipL0110
   4342  f767				   .condpart30
   4343  f767		       e6 86		      INC	player1y
   4344  f769				   .skipL0110
   4345  f769				   .L0111		;  if player1y  >  player0y then player1y  =  player1y  -  1
   4346  f769
   4347  f769		       a5 85		      LDA	player0y
   4348  f76b		       c5 86		      CMP	player1y
   4349  f76d		       b0 02		      BCS	.skipL0111
   4350  f76f				   .condpart31
   4351  f76f		       c6 86		      DEC	player1y
   4352  f771				   .skipL0111
   4353  f771				   .L0112		;  temp5  =  player1x	+  8  :  if temp5  <  player0x then if player1x  <  144 then player1x  =  player1x  +  1
   4354  f771
   4355  f771		       a5 81		      LDA	player1x
   4356  f773		       18		      CLC
   4357  f774		       69 08		      ADC	#8
   4358  f776		       85 a0		      STA	temp5
   4359  f778		       a5 a0		      LDA	temp5
   4360  f77a		       c5 80		      CMP	player0x
   4361  f77c		       b0 08		      BCS	.skipL0112
   4362  f77e				   .condpart32
   4363  f77e		       a5 81		      LDA	player1x
   4364  f780		       c9 90		      CMP	#144
   4365  f782		       b0 02		      BCS	.skip32then
   4366  f784				   .condpart33
   4367  f784		       e6 81		      INC	player1x
   4368  f786				   .skip32then
   4369  f786				   .skipL0112
   4370  f786				   .L0113		;  temp5  =  player1x	+  8  :  if temp5  >  player0x then if player1x  >  0 then player1x  =	player1x  -  1
   4371  f786
   4372  f786		       a5 81		      LDA	player1x
   4373  f788		       18		      CLC
   4374  f789		       69 08		      ADC	#8
   4375  f78b		       85 a0		      STA	temp5
   4376  f78d		       a5 80		      LDA	player0x
   4377  f78f		       c5 a0		      CMP	temp5
   4378  f791		       b0 08		      BCS	.skipL0113
   4379  f793				   .condpart34
   4380  f793		       a9 00		      LDA	#0
   4381  f795		       c5 81		      CMP	player1x
   4382  f797		       b0 02		      BCS	.skip34then
   4383  f799				   .condpart35
   4384  f799		       c6 81		      DEC	player1x
   4385  f79b				   .skip34then
   4386  f79b				   .skipL0113
   4387  f79b				   .
   4388  f79b							; 
   4389  f79b
   4390  f79b				   .
   4391  f79b							; 
   4392  f79b
   4393  f79b				   .
   4394  f79b							; 
   4395  f79b
   4396  f79b				   .
   4397  f79b							; 
   4398  f79b
   4399  f79b				   .
   4400  f79b							; 
   4401  f79b
   4402  f79b				   .
   4403  f79b							; 
   4404  f79b
   4405  f79b				   .
   4406  f79b							; 
   4407  f79b
   4408  f79b				   .
   4409  f79b							; 
   4410  f79b
   4411  f79b				   .
   4412  f79b							; 
   4413  f79b
   4414  f79b				   .
   4415  f79b							; 
   4416  f79b
   4417  f79b				   .L0114		;  if !collision(ball,player1) then goto __Skip_Squirrel_Kill
   4418  f79b
   4419  f79b		       24 03		      bit	CXP1FB
   4420  f79d		       70 03		      BVS	.skipL0114
   4421  f79f				   .condpart36
   4422  f79f		       4c 14 f8 	      jmp	.__Skip_Squirrel_Kill
   4423  f7a2
   4424  f7a2				   .skipL0114
   4425  f7a2				   .
   4426  f7a2							; 
   4427  f7a2
   4428  f7a2				   .
   4429  f7a2							; 
   4430  f7a2
   4431  f7a2				   .
   4432  f7a2							; 
   4433  f7a2
   4434  f7a2				   .
   4435  f7a2							; 
   4436  f7a2
   4437  f7a2				   .L0115		;  temp6  =  player1y
   4438  f7a2
   4439  f7a2		       a5 86		      LDA	player1y
   4440  f7a4		       85 a1		      STA	temp6
   4441  f7a6				   .
   4442  f7a6							; 
   4443  f7a6
   4444  f7a6				   .
   4445  f7a6							; 
   4446  f7a6
   4447  f7a6				   .
   4448  f7a6							; 
   4449  f7a6
   4450  f7a6				   .
   4451  f7a6							; 
   4452  f7a6
   4453  f7a6				   .L0116		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0	:  bally  =  250
   4454  f7a6
   4455  f7a6							; complex statement detected
   4456  f7a6		       20 c7 f3 	      jsr	randomize
   4457  f7a9		       4a		      lsr
   4458  f7aa		       48		      PHA
   4459  f7ab		       20 c7 f3 	      jsr	randomize
   4460  f7ae		       29 0f		      AND	#15
   4461  f7b0		       ba		      TSX
   4462  f7b1		       e8		      INX
   4463  f7b2		       9a		      TXS
   4464  f7b3		       18		      CLC
   4465  f7b4		       75 00		      ADC	$00,x
   4466  f7b6		       85 81		      STA	player1x
   4467  f7b8		       a9 00		      LDA	#0
   4468  f7ba		       85 86		      STA	player1y
   4469  f7bc		       a9 fa		      LDA	#250
   4470  f7be		       85 89		      STA	bally
   4471  f7c0				   .
   4472  f7c0							; 
   4473  f7c0
   4474  f7c0				   .
   4475  f7c0							; 
   4476  f7c0
   4477  f7c0				   .
   4478  f7c0							; 
   4479  f7c0
   4480  f7c0				   .
   4481  f7c0							; 
   4482  f7c0
   4483  f7c0				   .L0117		;  if _Bit3_Auto_Play{3} then goto __Skip_Squirrel_Kill
   4484  f7c0
   4485  f7c0		       a5 ec		      LDA	_Bit3_Auto_Play
   4486  f7c2		       29 08		      AND	#8
   4487  f7c4		       f0 03		      BEQ	.skipL0117
   4488  f7c6				   .condpart37
   4489  f7c6		       4c 14 f8 	      jmp	.__Skip_Squirrel_Kill
   4490  f7c9
   4491  f7c9				   .skipL0117
   4492  f7c9				   .
   4493  f7c9							; 
   4494  f7c9
   4495  f7c9				   .
   4496  f7c9							; 
   4497  f7c9
   4498  f7c9				   .
   4499  f7c9							; 
   4500  f7c9
   4501  f7c9				   .
   4502  f7c9							; 
   4503  f7c9
   4504  f7c9				   .L0118		;  score  =  score  +	1
   4505  f7c9
   4506  f7c9		       f8		      SED
   4507  f7ca		       18		      CLC
   4508  f7cb		       a5 95		      LDA	score+2
   4509  f7cd		       69 01		      ADC	#$01
   4510  f7cf		       85 95		      STA	score+2
   4511  f7d1		       a5 94		      LDA	score+1
   4512  f7d3		       69 00		      ADC	#$00
   4513  f7d5		       85 94		      STA	score+1
   4514  f7d7		       a5 93		      LDA	score
   4515  f7d9		       69 00		      ADC	#$00
   4516  f7db		       85 93		      STA	score
   4517  f7dd		       d8		      CLD
   4518  f7de				   .
   4519  f7de							; 
   4520  f7de
   4521  f7de				   .
   4522  f7de							; 
   4523  f7de
   4524  f7de				   .
   4525  f7de							; 
   4526  f7de
   4527  f7de				   .
   4528  f7de							; 
   4529  f7de
   4530  f7de				   .L0119		;  if _Ch0_Sound then goto __Skip_Squirrel_Kill
   4531  f7de
   4532  f7de		       a5 d6		      LDA	_Ch0_Sound
   4533  f7e0		       f0 03		      BEQ	.skipL0119
   4534  f7e2				   .condpart38
   4535  f7e2		       4c 14 f8 	      jmp	.__Skip_Squirrel_Kill
   4536  f7e5
   4537  f7e5				   .skipL0119
   4538  f7e5				   .
   4539  f7e5							; 
   4540  f7e5
   4541  f7e5				   .L0120		;  _Ch0_Sound	=  1  :  _Ch0_Counter  =  10
   4542  f7e5
   4543  f7e5		       a9 01		      LDA	#1
   4544  f7e7		       85 d6		      STA	_Ch0_Sound
   4545  f7e9		       a9 0a		      LDA	#10
   4546  f7eb		       85 d7		      STA	_Ch0_Counter
   4547  f7ed				   .
   4548  f7ed							; 
   4549  f7ed
   4550  f7ed				   .L0121		;  _C0  =  4  :  _V0  =  12  :  _F0  =  14
   4551  f7ed
   4552  f7ed		       a9 04		      LDA	#4
   4553  f7ef		       85 d8		      STA	_C0
   4554  f7f1		       a9 0c		      LDA	#12
   4555  f7f3		       85 d9		      STA	_V0
   4556  f7f5		       a9 0e		      LDA	#14
   4557  f7f7		       85 da		      STA	_F0
   4558  f7f9				   .
   4559  f7f9							; 
   4560  f7f9
   4561  f7f9				   .
   4562  f7f9							; 
   4563  f7f9
   4564  f7f9				   .
   4565  f7f9							; 
   4566  f7f9
   4567  f7f9				   .
   4568  f7f9							; 
   4569  f7f9
   4570  f7f9				   .L0122		;  temp5  =  255  :  if player0y  >  temp6 then temp5	=  player0y  -	temp6
   4571  f7f9
   4572  f7f9		       a9 ff		      LDA	#255
   4573  f7fb		       85 a0		      STA	temp5
   4574  f7fd		       a5 a1		      LDA	temp6
   4575  f7ff		       c5 85		      CMP	player0y
   4576  f801		       b0 07		      BCS	.skipL0122
   4577  f803				   .condpart39
   4578  f803		       a5 85		      LDA	player0y
   4579  f805		       38		      SEC
   4580  f806		       e5 a1		      SBC	temp6
   4581  f808		       85 a0		      STA	temp5
   4582  f80a				   .skipL0122
   4583  f80a				   .
   4584  f80a							; 
   4585  f80a
   4586  f80a				   .L0123		;  if temp5  <  30 then _C0  =  12
   4587  f80a
   4588  f80a		       a5 a0		      LDA	temp5
   4589  f80c		       c9 1e		      CMP	#30
   4590  f80e		       b0 04		      BCS	.skipL0123
   4591  f810				   .condpart40
   4592  f810		       a9 0c		      LDA	#12
   4593  f812		       85 d8		      STA	_C0
   4594  f814				   .skipL0123
   4595  f814				   .
   4596  f814							; 
   4597  f814
   4598  f814				   .__Skip_Squirrel_Kill
   4599  f814							; __Skip_Squirrel_Kill
   4600  f814
   4601  f814				   .
   4602  f814							; 
   4603  f814
   4604  f814				   .
   4605  f814							; 
   4606  f814
   4607  f814				   .
   4608  f814							; 
   4609  f814
   4610  f814				   .
   4611  f814							; 
   4612  f814
   4613  f814				   .
   4614  f814							; 
   4615  f814
   4616  f814				   .
   4617  f814							; 
   4618  f814
   4619  f814				   .
   4620  f814							; 
   4621  f814
   4622  f814				   .
   4623  f814							; 
   4624  f814
   4625  f814				   .
   4626  f814							; 
   4627  f814
   4628  f814				   .
   4629  f814							; 
   4630  f814
   4631  f814				   .L0124		;  if !collision(player0,player1) then goto __Skip_Acorn_Eaten
   4632  f814
   4633  f814		       24 07		      bit	CXPPMM
   4634  f816		       30 03		      BMI	.skipL0124
   4635  f818				   .condpart41
   4636  f818		       4c 92 f8 	      jmp	.__Skip_Acorn_Eaten
   4637  f81b
   4638  f81b				   .skipL0124
   4639  f81b				   .
   4640  f81b							; 
   4641  f81b
   4642  f81b				   .
   4643  f81b							; 
   4644  f81b
   4645  f81b				   .
   4646  f81b							; 
   4647  f81b
   4648  f81b				   .
   4649  f81b							; 
   4650  f81b
   4651  f81b				   .
   4652  f81b							; 
   4653  f81b
   4654  f81b				   .L0125		;  if !pfscore1 then _Bit7_Last_Life{7}  =  1	:  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =	1
   4655  f81b
   4656  f81b		       a5 f2		      LDA	pfscore1
   4657  f81d		       d0 12		      BNE	.skipL0125
   4658  f81f				   .condpart42
   4659  f81f		       a5 ec		      LDA	_Bit7_Last_Life
   4660  f821		       09 80		      ORA	#128
   4661  f823		       85 ec		      STA	_Bit7_Last_Life
   4662  f825		       a5 ec		      LDA	_Bit3_Auto_Play
   4663  f827		       29 08		      AND	#8
   4664  f829		       f0 06		      BEQ	.skip42then
   4665  f82b				   .condpart43
   4666  f82b		       a5 ec		      LDA	_Bit2_Game_Control
   4667  f82d		       09 04		      ORA	#4
   4668  f82f		       85 ec		      STA	_Bit2_Game_Control
   4669  f831				   .skip42then
   4670  f831				   .skipL0125
   4671  f831				   .
   4672  f831							; 
   4673  f831
   4674  f831				   .
   4675  f831							; 
   4676  f831
   4677  f831				   .
   4678  f831							; 
   4679  f831
   4680  f831				   .
   4681  f831							; 
   4682  f831
   4683  f831				   .L0126		;  if pfscore1 then pfscore1  =  pfscore1 / 4
   4684  f831
   4685  f831		       a5 f2		      LDA	pfscore1
   4686  f833		       f0 06		      BEQ	.skipL0126
   4687  f835				   .condpart44
   4688  f835		       a5 f2		      LDA	pfscore1
   4689  f837		       4a		      lsr
   4690  f838		       4a		      lsr
   4691  f839		       85 f2		      STA	pfscore1
   4692  f83b				   .skipL0126
   4693  f83b				   .
   4694  f83b							; 
   4695  f83b
   4696  f83b				   .
   4697  f83b							; 
   4698  f83b
   4699  f83b				   .
   4700  f83b							; 
   4701  f83b
   4702  f83b				   .
   4703  f83b							; 
   4704  f83b
   4705  f83b				   .L0127		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0	:  bally  =  250
   4706  f83b
   4707  f83b							; complex statement detected
   4708  f83b		       20 c7 f3 	      jsr	randomize
   4709  f83e		       4a		      lsr
   4710  f83f		       48		      PHA
   4711  f840		       20 c7 f3 	      jsr	randomize
   4712  f843		       29 0f		      AND	#15
   4713  f845		       ba		      TSX
   4714  f846		       e8		      INX
   4715  f847		       9a		      TXS
   4716  f848		       18		      CLC
   4717  f849		       75 00		      ADC	$00,x
   4718  f84b		       85 81		      STA	player1x
   4719  f84d		       a9 00		      LDA	#0
   4720  f84f		       85 86		      STA	player1y
   4721  f851		       a9 fa		      LDA	#250
   4722  f853		       85 89		      STA	bally
   4723  f855				   .
   4724  f855							; 
   4725  f855
   4726  f855				   .
   4727  f855							; 
   4728  f855
   4729  f855				   .
   4730  f855							; 
   4731  f855
   4732  f855				   .
   4733  f855							; 
   4734  f855
   4735  f855				   .L0128		;  if _Bit3_Auto_Play{3} then goto __Skip_Acorn_Eaten
   4736  f855
   4737  f855		       a5 ec		      LDA	_Bit3_Auto_Play
   4738  f857		       29 08		      AND	#8
   4739  f859		       f0 03		      BEQ	.skipL0128
   4740  f85b				   .condpart45
   4741  f85b		       4c 92 f8 	      jmp	.__Skip_Acorn_Eaten
   4742  f85e
   4743  f85e				   .skipL0128
   4744  f85e				   .
   4745  f85e							; 
   4746  f85e
   4747  f85e				   .
   4748  f85e							; 
   4749  f85e
   4750  f85e				   .
   4751  f85e							; 
   4752  f85e
   4753  f85e				   .
   4754  f85e							; 
   4755  f85e
   4756  f85e				   .L0129		;  if _sc3  >	0 then score  =  score	-  1
   4757  f85e
   4758  f85e		       a9 00		      LDA	#0
   4759  f860		       c5 95		      CMP	_sc3
   4760  f862		       b0 15		      BCS	.skipL0129
   4761  f864				   .condpart46
   4762  f864		       f8		      SED
   4763  f865		       38		      SEC
   4764  f866		       a5 95		      LDA	score+2
   4765  f868		       e9 01		      SBC	#$01
   4766  f86a		       85 95		      STA	score+2
   4767  f86c		       a5 94		      LDA	score+1
   4768  f86e		       e9 00		      SBC	#$00
   4769  f870		       85 94		      STA	score+1
   4770  f872		       a5 93		      LDA	score
   4771  f874		       e9 00		      SBC	#$00
   4772  f876		       85 93		      STA	score
   4773  f878		       d8		      CLD
   4774  f879				   .skipL0129
   4775  f879				   .
   4776  f879							; 
   4777  f879
   4778  f879				   .
   4779  f879							; 
   4780  f879
   4781  f879				   .
   4782  f879							; 
   4783  f879
   4784  f879				   .
   4785  f879							; 
   4786  f879
   4787  f879				   .L0130		;  if _Ch0_Sound then goto __Skip_Acorn_Eaten
   4788  f879
   4789  f879		       a5 d6		      LDA	_Ch0_Sound
   4790  f87b		       f0 03		      BEQ	.skipL0130
   4791  f87d				   .condpart47
   4792  f87d		       4c 92 f8 	      jmp	.__Skip_Acorn_Eaten
   4793  f880
   4794  f880				   .skipL0130
   4795  f880				   .
   4796  f880							; 
   4797  f880
   4798  f880				   .L0131		;  _Ch0_Sound	=  2  :  _Ch0_Counter  =  10
   4799  f880
   4800  f880		       a9 02		      LDA	#2
   4801  f882		       85 d6		      STA	_Ch0_Sound
   4802  f884		       a9 0a		      LDA	#10
   4803  f886		       85 d7		      STA	_Ch0_Counter
   4804  f888				   .
   4805  f888							; 
   4806  f888
   4807  f888				   .L0132		;  _C0  =  7  :  _V0  =  12  :  _F0  =  12
   4808  f888
   4809  f888		       a9 07		      LDA	#7
   4810  f88a		       85 d8		      STA	_C0
   4811  f88c		       a9 0c		      LDA	#12
   4812  f88e		       85 d9		      STA	_V0
   4813  f890		       85 da		      STA	_F0
   4814  f892				   .
   4815  f892							; 
   4816  f892
   4817  f892				   .__Skip_Acorn_Eaten
   4818  f892							; __Skip_Acorn_Eaten
   4819  f892
   4820  f892				   .
   4821  f892							; 
   4822  f892
   4823  f892				   .
   4824  f892							; 
   4825  f892
   4826  f892				   .
   4827  f892							; 
   4828  f892
   4829  f892				   .
   4830  f892							; 
   4831  f892
   4832  f892				   .
   4833  f892							; 
   4834  f892
   4835  f892				   .
   4836  f892							; 
   4837  f892
   4838  f892				   .
   4839  f892							; 
   4840  f892
   4841  f892				   .
   4842  f892							; 
   4843  f892
   4844  f892				   .
   4845  f892							; 
   4846  f892
   4847  f892				   .
   4848  f892							; 
   4849  f892
   4850  f892				   .L0133		;  if _Ch0_Sound  <>  1 then goto __Skip_Sound1
   4851  f892
   4852  f892		       a5 d6		      LDA	_Ch0_Sound
   4853  f894		       c9 01		      CMP	#1
   4854  f896		       f0 03		      BEQ	.skipL0133
   4855  f898				   .condpart48
   4856  f898		       4c c5 f8 	      jmp	.__Skip_Sound1
   4857  f89b
   4858  f89b				   .skipL0133
   4859  f89b				   .
   4860  f89b							; 
   4861  f89b
   4862  f89b				   .
   4863  f89b							; 
   4864  f89b
   4865  f89b				   .
   4866  f89b							; 
   4867  f89b
   4868  f89b				   .
   4869  f89b							; 
   4870  f89b
   4871  f89b				   .L0134		;  _F0  =  _F0  ^  5
   4872  f89b
   4873  f89b		       a5 da		      LDA	_F0
   4874  f89d		       49 05		      EOR	#5
   4875  f89f		       85 da		      STA	_F0
   4876  f8a1				   .
   4877  f8a1							; 
   4878  f8a1
   4879  f8a1				   .
   4880  f8a1							; 
   4881  f8a1
   4882  f8a1				   .
   4883  f8a1							; 
   4884  f8a1
   4885  f8a1				   .
   4886  f8a1							; 
   4887  f8a1
   4888  f8a1				   .L0135		;  AUDC0  =  _C0  :  AUDV0  =	_V0  :	AUDF0  =  _F0
   4889  f8a1
   4890  f8a1		       a5 d8		      LDA	_C0
   4891  f8a3		       85 15		      STA	AUDC0
   4892  f8a5		       a5 d9		      LDA	_V0
   4893  f8a7		       85 19		      STA	AUDV0
   4894  f8a9		       a5 da		      LDA	_F0
   4895  f8ab		       85 17		      STA	AUDF0
   4896  f8ad				   .
   4897  f8ad							; 
   4898  f8ad
   4899  f8ad				   .
   4900  f8ad							; 
   4901  f8ad
   4902  f8ad				   .
   4903  f8ad							; 
   4904  f8ad
   4905  f8ad				   .
   4906  f8ad							; 
   4907  f8ad
   4908  f8ad				   .L0136		;  _V0  =  _V0  -  1  :  if _V0  <  2 then _V0  =  2
   4909  f8ad
   4910  f8ad		       c6 d9		      DEC	_V0
   4911  f8af		       a5 d9		      LDA	_V0
   4912  f8b1		       c9 02		      CMP	#2
   4913  f8b3		       b0 04		      BCS	.skipL0136
   4914  f8b5				   .condpart49
   4915  f8b5		       a9 02		      LDA	#2
   4916  f8b7		       85 d9		      STA	_V0
   4917  f8b9				   .skipL0136
   4918  f8b9				   .
   4919  f8b9							; 
   4920  f8b9
   4921  f8b9				   .
   4922  f8b9							; 
   4923  f8b9
   4924  f8b9				   .
   4925  f8b9							; 
   4926  f8b9
   4927  f8b9				   .
   4928  f8b9							; 
   4929  f8b9
   4930  f8b9				   .L0137		;  _Ch0_Counter  =  _Ch0_Counter  -  1
   4931  f8b9
   4932  f8b9		       c6 d7		      DEC	_Ch0_Counter
   4933  f8bb				   .
   4934  f8bb							; 
   4935  f8bb
   4936  f8bb				   .
   4937  f8bb							; 
   4938  f8bb
   4939  f8bb				   .
   4940  f8bb							; 
   4941  f8bb
   4942  f8bb				   .
   4943  f8bb							; 
   4944  f8bb
   4945  f8bb				   .L0138		;  if !_Ch0_Counter then _Ch0_Sound  =  0  :  AUDV0  =  0
   4946  f8bb
   4947  f8bb		       a5 d7		      LDA	_Ch0_Counter
   4948  f8bd		       d0 06		      BNE	.skipL0138
   4949  f8bf				   .condpart50
   4950  f8bf		       a9 00		      LDA	#0
   4951  f8c1		       85 d6		      STA	_Ch0_Sound
   4952  f8c3		       85 19		      STA	AUDV0
   4953  f8c5				   .skipL0138
   4954  f8c5				   .
   4955  f8c5							; 
   4956  f8c5
   4957  f8c5				   .__Skip_Sound1
   4958  f8c5							; __Skip_Sound1
   4959  f8c5
   4960  f8c5				   .
   4961  f8c5							; 
   4962  f8c5
   4963  f8c5				   .
   4964  f8c5							; 
   4965  f8c5
   4966  f8c5				   .
   4967  f8c5							; 
   4968  f8c5
   4969  f8c5				   .
   4970  f8c5							; 
   4971  f8c5
   4972  f8c5				   .
   4973  f8c5							; 
   4974  f8c5
   4975  f8c5				   .
   4976  f8c5							; 
   4977  f8c5
   4978  f8c5				   .
   4979  f8c5							; 
   4980  f8c5
   4981  f8c5				   .
   4982  f8c5							; 
   4983  f8c5
   4984  f8c5				   .
   4985  f8c5							; 
   4986  f8c5
   4987  f8c5				   .
   4988  f8c5							; 
   4989  f8c5
   4990  f8c5				   .L0139		;  if _Ch0_Sound  <>  2 then goto __Skip_Sound2
   4991  f8c5
   4992  f8c5		       a5 d6		      LDA	_Ch0_Sound
   4993  f8c7		       c9 02		      CMP	#2
   4994  f8c9		       f0 03		      BEQ	.skipL0139
   4995  f8cb				   .condpart51
   4996  f8cb		       4c fc f8 	      jmp	.__Skip_Sound2
   4997  f8ce
   4998  f8ce				   .skipL0139
   4999  f8ce				   .
   5000  f8ce							; 
   5001  f8ce
   5002  f8ce				   .
   5003  f8ce							; 
   5004  f8ce
   5005  f8ce				   .
   5006  f8ce							; 
   5007  f8ce
   5008  f8ce				   .
   5009  f8ce							; 
   5010  f8ce
   5011  f8ce				   .L0140		;  AUDC0  =  _C0  :  AUDV0  =	_V0  :	AUDF0  =  _F0
   5012  f8ce
   5013  f8ce		       a5 d8		      LDA	_C0
   5014  f8d0		       85 15		      STA	AUDC0
   5015  f8d2		       a5 d9		      LDA	_V0
   5016  f8d4		       85 19		      STA	AUDV0
   5017  f8d6		       a5 da		      LDA	_F0
   5018  f8d8		       85 17		      STA	AUDF0
   5019  f8da				   .
   5020  f8da							; 
   5021  f8da
   5022  f8da				   .
   5023  f8da							; 
   5024  f8da
   5025  f8da				   .
   5026  f8da							; 
   5027  f8da
   5028  f8da				   .
   5029  f8da							; 
   5030  f8da
   5031  f8da				   .L0141		;  _V0  =  _V0  -  1  :  if _V0  <  2 then _V0  =  2
   5032  f8da
   5033  f8da		       c6 d9		      DEC	_V0
   5034  f8dc		       a5 d9		      LDA	_V0
   5035  f8de		       c9 02		      CMP	#2
   5036  f8e0		       b0 04		      BCS	.skipL0141
   5037  f8e2				   .condpart52
   5038  f8e2		       a9 02		      LDA	#2
   5039  f8e4		       85 d9		      STA	_V0
   5040  f8e6				   .skipL0141
   5041  f8e6				   .
   5042  f8e6							; 
   5043  f8e6
   5044  f8e6				   .
   5045  f8e6							; 
   5046  f8e6
   5047  f8e6				   .
   5048  f8e6							; 
   5049  f8e6
   5050  f8e6				   .
   5051  f8e6							; 
   5052  f8e6
   5053  f8e6				   .L0142		;  _Ch0_Counter  =  _Ch0_Counter  -  1
   5054  f8e6
   5055  f8e6		       c6 d7		      DEC	_Ch0_Counter
   5056  f8e8				   .
   5057  f8e8							; 
   5058  f8e8
   5059  f8e8				   .
   5060  f8e8							; 
   5061  f8e8
   5062  f8e8				   .
   5063  f8e8							; 
   5064  f8e8
   5065  f8e8				   .
   5066  f8e8							; 
   5067  f8e8
   5068  f8e8				   .
   5069  f8e8							; 
   5070  f8e8
   5071  f8e8				   .L0143		;  if !_Ch0_Counter then _Ch0_Sound  =  0  :  AUDV0  =  0  :  if _Bit7_Last_Life{7} then _Bit2_Game_Control{2}  =  1
   5072  f8e8
   5073  f8e8		       a5 d7		      LDA	_Ch0_Counter
   5074  f8ea		       d0 10		      BNE	.skipL0143
   5075  f8ec				   .condpart53
   5076  f8ec		       a9 00		      LDA	#0
   5077  f8ee		       85 d6		      STA	_Ch0_Sound
   5078  f8f0		       85 19		      STA	AUDV0
   5079  f8f2		       24 ec		      BIT	_Bit7_Last_Life
   5080  f8f4		       10 06		      BPL	.skip53then
   5081  f8f6				   .condpart54
   5082  f8f6		       a5 ec		      LDA	_Bit2_Game_Control
   5083  f8f8		       09 04		      ORA	#4
   5084  f8fa		       85 ec		      STA	_Bit2_Game_Control
   5085  f8fc				   .skip53then
   5086  f8fc				   .skipL0143
   5087  f8fc				   .
   5088  f8fc							; 
   5089  f8fc
   5090  f8fc				   .__Skip_Sound2
   5091  f8fc							; __Skip_Sound2
   5092  f8fc
   5093  f8fc				   .
   5094  f8fc							; 
   5095  f8fc
   5096  f8fc				   .
   5097  f8fc							; 
   5098  f8fc
   5099  f8fc				   .
   5100  f8fc							; 
   5101  f8fc
   5102  f8fc				   .
   5103  f8fc							; 
   5104  f8fc
   5105  f8fc				   .
   5106  f8fc							; 
   5107  f8fc
   5108  f8fc				   .
   5109  f8fc							; 
   5110  f8fc
   5111  f8fc				   .
   5112  f8fc							; 
   5113  f8fc
   5114  f8fc				   .
   5115  f8fc							; 
   5116  f8fc
   5117  f8fc				   .
   5118  f8fc							; 
   5119  f8fc
   5120  f8fc				   .
   5121  f8fc							; 
   5122  f8fc
   5123  f8fc				   .
   5124  f8fc							; 
   5125  f8fc
   5126  f8fc				   .
   5127  f8fc							; 
   5128  f8fc
   5129  f8fc				   .L0144		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Flip
   5130  f8fc
   5131  f8fc		       a5 ec		      LDA	_Bit3_Auto_Play
   5132  f8fe		       29 08		      AND	#8
   5133  f900		       d0 03		      BNE	.skipL0144
   5134  f902				   .condpart55
   5135  f902		       4c 4e f9 	      jmp	.__AP_Skip_Flip
   5136  f905
   5137  f905				   .skipL0144
   5138  f905				   .
   5139  f905							; 
   5140  f905
   5141  f905				   .
   5142  f905							; 
   5143  f905
   5144  f905				   .
   5145  f905							; 
   5146  f905
   5147  f905				   .
   5148  f905							; 
   5149  f905
   5150  f905				   .L0145		;  _AP_2_Sec_Score_Flip  =  _AP_2_Sec_Score_Flip  +  1
   5151  f905
   5152  f905		       e6 dc		      INC	_AP_2_Sec_Score_Flip
   5153  f907				   .
   5154  f907							; 
   5155  f907
   5156  f907				   .
   5157  f907							; 
   5158  f907
   5159  f907				   .
   5160  f907							; 
   5161  f907
   5162  f907				   .
   5163  f907							; 
   5164  f907
   5165  f907				   .
   5166  f907							; 
   5167  f907
   5168  f907				   .L0146		;  if _AP_2_Sec_Score_Flip  <	120 then goto __AP_Skip_Flip
   5169  f907
   5170  f907		       a5 dc		      LDA	_AP_2_Sec_Score_Flip
   5171  f909		       c9 78		      CMP	#120
   5172  f90b		       b0 03		      BCS	.skipL0146
   5173  f90d				   .condpart56
   5174  f90d		       4c 4e f9 	      jmp	.__AP_Skip_Flip
   5175  f910
   5176  f910				   .skipL0146
   5177  f910				   .
   5178  f910							; 
   5179  f910
   5180  f910				   .
   5181  f910							; 
   5182  f910
   5183  f910				   .
   5184  f910							; 
   5185  f910
   5186  f910				   .
   5187  f910							; 
   5188  f910
   5189  f910				   .L0147		;  _AP_2_Sec_Score_Flip  =  0	:  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   5190  f910
   5191  f910		       a9 00		      LDA	#0
   5192  f912		       85 dc		      STA	_AP_2_Sec_Score_Flip
   5193  f914		       a5 ec		      LDA	_Bit6_Swap_Scores
   5194  f916		       29 40		      AND	#64
   5195  f918		       08		      PHP
   5196  f919		       a5 ec		      LDA	_Bit6_Swap_Scores
   5197  f91b		       29 bf		      AND	#191
   5198  f91d		       28		      PLP
   5199  f91e		       d0 02		      .byte.b	$D0, $02
   5200  f920		       09 40		      ORA	#64
   5201  f922		       85 ec		      STA	_Bit6_Swap_Scores
   5202  f924				   .
   5203  f924							; 
   5204  f924
   5205  f924				   .
   5206  f924							; 
   5207  f924
   5208  f924				   .
   5209  f924							; 
   5210  f924
   5211  f924				   .
   5212  f924							; 
   5213  f924
   5214  f924				   .L0148		;  if !_Bit6_Swap_Scores{6} then goto __AP_Skip_HiScore_Swap
   5215  f924
   5216  f924		       24 ec		      BIT	_Bit6_Swap_Scores
   5217  f926		       70 03		      BVS	.skipL0148
   5218  f928				   .condpart57
   5219  f928		       4c 3e f9 	      jmp	.__AP_Skip_HiScore_Swap
   5220  f92b
   5221  f92b				   .skipL0148
   5222  f92b				   .
   5223  f92b							; 
   5224  f92b
   5225  f92b				   .
   5226  f92b							; 
   5227  f92b
   5228  f92b				   .
   5229  f92b							; 
   5230  f92b
   5231  f92b				   .
   5232  f92b							; 
   5233  f92b
   5234  f92b				   .L0149		;  scorecolor	=  $AE
   5235  f92b
   5236  f92b		       a9 ae		      LDA	#$AE
   5237  f92d		       85 a3		      STA	scorecolor
   5238  f92f				   .
   5239  f92f							; 
   5240  f92f
   5241  f92f				   .L0150		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   5242  f92f
   5243  f92f		       a5 e9		      LDA	_High_Score1
   5244  f931		       85 93		      STA	_sc1
   5245  f933		       a5 ea		      LDA	_High_Score2
   5246  f935		       85 94		      STA	_sc2
   5247  f937		       a5 eb		      LDA	_High_Score3
   5248  f939		       85 95		      STA	_sc3
   5249  f93b				   .
   5250  f93b							; 
   5251  f93b
   5252  f93b				   .L0151		;  goto __AP_Skip_Flip
   5253  f93b
   5254  f93b		       4c 4e f9 	      jmp	.__AP_Skip_Flip
   5255  f93e
   5256  f93e				   .
   5257  f93e							; 
   5258  f93e
   5259  f93e				   .__AP_Skip_HiScore_Swap
   5260  f93e							; __AP_Skip_HiScore_Swap
   5261  f93e
   5262  f93e				   .
   5263  f93e							; 
   5264  f93e
   5265  f93e				   .
   5266  f93e							; 
   5267  f93e
   5268  f93e				   .
   5269  f93e							; 
   5270  f93e
   5271  f93e				   .
   5272  f93e							; 
   5273  f93e
   5274  f93e				   .L0152		;  scorecolor	=  $1C
   5275  f93e
   5276  f93e		       a9 1c		      LDA	#$1C
   5277  f940		       85 a3		      STA	scorecolor
   5278  f942				   .
   5279  f942							; 
   5280  f942
   5281  f942				   .L0153		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   5282  f942
   5283  f942		       a5 e6		      LDA	_Score1_Mem
   5284  f944		       85 93		      STA	_sc1
   5285  f946		       a5 e7		      LDA	_Score2_Mem
   5286  f948		       85 94		      STA	_sc2
   5287  f94a		       a5 e8		      LDA	_Score3_Mem
   5288  f94c		       85 95		      STA	_sc3
   5289  f94e				   .
   5290  f94e							; 
   5291  f94e
   5292  f94e				   .__AP_Skip_Flip
   5293  f94e							; __AP_Skip_Flip
   5294  f94e
   5295  f94e				   .
   5296  f94e							; 
   5297  f94e
   5298  f94e				   .
   5299  f94e							; 
   5300  f94e
   5301  f94e				   .
   5302  f94e							; 
   5303  f94e
   5304  f94e				   .
   5305  f94e							; 
   5306  f94e
   5307  f94e				   .
   5308  f94e							; 
   5309  f94e
   5310  f94e				   .
   5311  f94e							; 
   5312  f94e
   5313  f94e				   .
   5314  f94e							; 
   5315  f94e
   5316  f94e				   .
   5317  f94e							; 
   5318  f94e
   5319  f94e				   .
   5320  f94e							; 
   5321  f94e
   5322  f94e				   .
   5323  f94e							; 
   5324  f94e
   5325  f94e				   .L0154		;  if _Bit3_Auto_Play{3} then goto __AP_Skip_Pause
   5326  f94e
   5327  f94e		       a5 ec		      LDA	_Bit3_Auto_Play
   5328  f950		       29 08		      AND	#8
   5329  f952		       f0 03		      BEQ	.skipL0154
   5330  f954				   .condpart58
   5331  f954		       4c 93 f9 	      jmp	.__AP_Skip_Pause
   5332  f957
   5333  f957				   .skipL0154
   5334  f957				   .
   5335  f957							; 
   5336  f957
   5337  f957				   .
   5338  f957							; 
   5339  f957
   5340  f957				   .
   5341  f957							; 
   5342  f957
   5343  f957				   .
   5344  f957							; 
   5345  f957
   5346  f957				   .L0155		;  _Bit1_BW_Check{1}  =  0
   5347  f957
   5348  f957		       a5 e5		      LDA	_Bit1_BW_Check
   5349  f959		       29 fd		      AND	#253
   5350  f95b		       85 e5		      STA	_Bit1_BW_Check
   5351  f95d				   .
   5352  f95d							; 
   5353  f95d
   5354  f95d				   .L0156		;  if switchbw then _Bit1_BW_Check{1}	=  1
   5355  f95d
   5356  f95d		       a9 08		      lda	#8
   5357  f95f		       2c 82 02 	      bit	SWCHB
   5358  f962		       d0 06		      BNE	.skipL0156
   5359  f964				   .condpart59
   5360  f964		       a5 e5		      LDA	_Bit1_BW_Check
   5361  f966		       09 02		      ORA	#2
   5362  f968		       85 e5		      STA	_Bit1_BW_Check
   5363  f96a				   .skipL0156
   5364  f96a				   .
   5365  f96a							; 
   5366  f96a
   5367  f96a				   .
   5368  f96a							; 
   5369  f96a
   5370  f96a				   .
   5371  f96a							; 
   5372  f96a
   5373  f96a				   .
   5374  f96a							; 
   5375  f96a
   5376  f96a				   .
   5377  f96a							; 
   5378  f96a
   5379  f96a				   .L0157		;  if _Bit0_BW_Mem{0} then if !_Bit1_BW_Check{1} then goto __Pause_Setup
   5380  f96a
   5381  f96a		       a5 e5		      LDA	_Bit0_BW_Mem
   5382  f96c		       4a		      LSR
   5383  f96d		       90 09		      BCC	.skipL0157
   5384  f96f				   .condpart60
   5385  f96f		       a5 e5		      LDA	_Bit1_BW_Check
   5386  f971		       29 02		      AND	#2
   5387  f973		       d0 03		      BNE	.skip60then
   5388  f975				   .condpart61
   5389  f975		       4c ca fb 	      jmp	.__Pause_Setup
   5390  f978
   5391  f978				   .skip60then
   5392  f978				   .skipL0157
   5393  f978				   .
   5394  f978							; 
   5395  f978
   5396  f978				   .L0158		;  if !_Bit0_BW_Mem{0} then if _Bit1_BW_Check{1} then goto __Pause_Setup
   5397  f978
   5398  f978		       a5 e5		      LDA	_Bit0_BW_Mem
   5399  f97a		       4a		      LSR
   5400  f97b		       b0 09		      BCS	.skipL0158
   5401  f97d				   .condpart62
   5402  f97d		       a5 e5		      LDA	_Bit1_BW_Check
   5403  f97f		       29 02		      AND	#2
   5404  f981		       f0 03		      BEQ	.skip62then
   5405  f983				   .condpart63
   5406  f983		       4c ca fb 	      jmp	.__Pause_Setup
   5407  f986
   5408  f986				   .skip62then
   5409  f986				   .skipL0158
   5410  f986				   .
   5411  f986							; 
   5412  f986
   5413  f986				   .
   5414  f986							; 
   5415  f986
   5416  f986				   .
   5417  f986							; 
   5418  f986
   5419  f986				   .
   5420  f986							; 
   5421  f986
   5422  f986				   .L0159		;  if joy1fire  &&  !_Bit1_FireB_Restrainer{1} then goto __Pause_Setup
   5423  f986
   5424  f986		       24 0d		      bit	INPT5
   5425  f988		       30 09		      BMI	.skipL0159
   5426  f98a				   .condpart64
   5427  f98a		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   5428  f98c		       29 02		      AND	#2
   5429  f98e		       d0 03		      BNE	.skip64then
   5430  f990				   .condpart65
   5431  f990		       4c ca fb 	      jmp	.__Pause_Setup
   5432  f993
   5433  f993				   .skip64then
   5434  f993				   .skipL0159
   5435  f993				   .
   5436  f993							; 
   5437  f993
   5438  f993				   .__AP_Skip_Pause
   5439  f993							; __AP_Skip_Pause
   5440  f993
   5441  f993				   .
   5442  f993							; 
   5443  f993
   5444  f993				   .
   5445  f993							; 
   5446  f993
   5447  f993				   .
   5448  f993							; 
   5449  f993
   5450  f993				   .
   5451  f993							; 
   5452  f993
   5453  f993				   .
   5454  f993							; 
   5455  f993
   5456  f993				   .
   5457  f993							; 
   5458  f993
   5459  f993				   .
   5460  f993							; 
   5461  f993
   5462  f993				   .L0160		;  drawscreen
   5463  f993
   5464  f993		       20 d5 f3 	      jsr	drawscreen
   5465  f996				   .
   5466  f996							; 
   5467  f996
   5468  f996				   .
   5469  f996							; 
   5470  f996
   5471  f996				   .
   5472  f996							; 
   5473  f996
   5474  f996				   .
   5475  f996							; 
   5476  f996
   5477  f996				   .
   5478  f996							; 
   5479  f996
   5480  f996				   .
   5481  f996							; 
   5482  f996
   5483  f996				   .
   5484  f996							; 
   5485  f996
   5486  f996				   .
   5487  f996							; 
   5488  f996
   5489  f996				   .
   5490  f996							; 
   5491  f996
   5492  f996				   .
   5493  f996							; 
   5494  f996
   5495  f996				   .
   5496  f996							; 
   5497  f996
   5498  f996				   .
   5499  f996							; 
   5500  f996
   5501  f996				   .
   5502  f996							; 
   5503  f996
   5504  f996				   .
   5505  f996							; 
   5506  f996
   5507  f996				   .
   5508  f996							; 
   5509  f996
   5510  f996				   .L0161		;  if !_Bit2_Game_Control{2} then goto __Skip_Check_G_Over
   5511  f996
   5512  f996		       a5 ec		      LDA	_Bit2_Game_Control
   5513  f998		       29 04		      AND	#4
   5514  f99a		       d0 03		      BNE	.skipL0161
   5515  f99c				   .condpart66
   5516  f99c		       4c bd f9 	      jmp	.__Skip_Check_G_Over
   5517  f99f
   5518  f99f				   .skipL0161
   5519  f99f				   .
   5520  f99f							; 
   5521  f99f
   5522  f99f				   .
   5523  f99f							; 
   5524  f99f
   5525  f99f				   .
   5526  f99f							; 
   5527  f99f
   5528  f99f				   .
   5529  f99f							; 
   5530  f99f
   5531  f99f				   .
   5532  f99f							; 
   5533  f99f
   5534  f99f				   .L0162		;  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =  0  :  _sc1  =	_Score1_Mem  :	_sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem  :  goto __Start_Restart
   5535  f99f
   5536  f99f		       a5 ec		      LDA	_Bit3_Auto_Play
   5537  f9a1		       29 08		      AND	#8
   5538  f9a3		       f0 15		      BEQ	.skipL0162
   5539  f9a5				   .condpart67
   5540  f9a5		       a5 ec		      LDA	_Bit2_Game_Control
   5541  f9a7		       29 fb		      AND	#251
   5542  f9a9		       85 ec		      STA	_Bit2_Game_Control
   5543  f9ab		       a5 e6		      LDA	_Score1_Mem
   5544  f9ad		       85 93		      STA	_sc1
   5545  f9af		       a5 e7		      LDA	_Score2_Mem
   5546  f9b1		       85 94		      STA	_sc2
   5547  f9b3		       a5 e8		      LDA	_Score3_Mem
   5548  f9b5		       85 95		      STA	_sc3
   5549  f9b7		       4c 7f f4 	      jmp	.__Start_Restart
   5550  f9ba
   5551  f9ba				   .skipL0162
   5552  f9ba				   .
   5553  f9ba							; 
   5554  f9ba
   5555  f9ba				   .
   5556  f9ba							; 
   5557  f9ba
   5558  f9ba				   .
   5559  f9ba							; 
   5560  f9ba
   5561  f9ba				   .
   5562  f9ba							; 
   5563  f9ba
   5564  f9ba				   .L0163		;  goto __Game_Over_Setup
   5565  f9ba
   5566  f9ba		       4c 7c fa 	      jmp	.__Game_Over_Setup
   5567  f9bd
   5568  f9bd				   .
   5569  f9bd							; 
   5570  f9bd
   5571  f9bd				   .__Skip_Check_G_Over
   5572  f9bd							; __Skip_Check_G_Over
   5573  f9bd
   5574  f9bd				   .
   5575  f9bd							; 
   5576  f9bd
   5577  f9bd				   .
   5578  f9bd							; 
   5579  f9bd
   5580  f9bd				   .
   5581  f9bd							; 
   5582  f9bd
   5583  f9bd				   .
   5584  f9bd							; 
   5585  f9bd
   5586  f9bd				   .
   5587  f9bd							; 
   5588  f9bd
   5589  f9bd				   .
   5590  f9bd							; 
   5591  f9bd
   5592  f9bd				   .
   5593  f9bd							; 
   5594  f9bd
   5595  f9bd				   .
   5596  f9bd							; 
   5597  f9bd
   5598  f9bd				   .
   5599  f9bd							; 
   5600  f9bd
   5601  f9bd				   .
   5602  f9bd							; 
   5603  f9bd
   5604  f9bd				   .
   5605  f9bd							; 
   5606  f9bd
   5607  f9bd				   .
   5608  f9bd							; 
   5609  f9bd
   5610  f9bd				   .
   5611  f9bd							; 
   5612  f9bd
   5613  f9bd				   .
   5614  f9bd							; 
   5615  f9bd
   5616  f9bd				   .L0164		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Reset
   5617  f9bd
   5618  f9bd		       a5 ec		      LDA	_Bit3_Auto_Play
   5619  f9bf		       29 08		      AND	#8
   5620  f9c1		       d0 03		      BNE	.skipL0164
   5621  f9c3				   .condpart68
   5622  f9c3		       4c e3 f9 	      jmp	.__AP_Skip_Reset
   5623  f9c6
   5624  f9c6				   .skipL0164
   5625  f9c6				   .
   5626  f9c6							; 
   5627  f9c6
   5628  f9c6				   .
   5629  f9c6							; 
   5630  f9c6
   5631  f9c6				   .
   5632  f9c6							; 
   5633  f9c6
   5634  f9c6				   .
   5635  f9c6							; 
   5636  f9c6
   5637  f9c6				   .
   5638  f9c6							; 
   5639  f9c6
   5640  f9c6				   .
   5641  f9c6							; 
   5642  f9c6
   5643  f9c6				   .L0165		;  if switchreset  ||	joy0fire then _Bit3_Auto_Play{3}  =  0	:  _Bit2_Game_Control{2}  =  1	:  goto __Start_Restart
   5644  f9c6
   5645  f9c6		       a9 01		      lda	#1
   5646  f9c8		       2c 82 02 	      bit	SWCHB
   5647  f9cb		       d0 03		      BNE	.skipL0165
   5648  f9cd				   .condpart69
   5649  f9cd		       4c d4 f9 	      jmp	.condpart70
   5650  f9d0				   .skipL0165
   5651  f9d0		       24 0c		      bit	INPT4
   5652  f9d2		       30 0f		      BMI	.skip2OR
   5653  f9d4				   .condpart70
   5654  f9d4		       a5 ec		      LDA	_Bit3_Auto_Play
   5655  f9d6		       29 f7		      AND	#247
   5656  f9d8		       85 ec		      STA	_Bit3_Auto_Play
   5657  f9da		       a5 ec		      LDA	_Bit2_Game_Control
   5658  f9dc		       09 04		      ORA	#4
   5659  f9de		       85 ec		      STA	_Bit2_Game_Control
   5660  f9e0		       4c 7f f4 	      jmp	.__Start_Restart
   5661  f9e3
   5662  f9e3				   .skip2OR
   5663  f9e3				   .
   5664  f9e3							; 
   5665  f9e3
   5666  f9e3				   .__AP_Skip_Reset
   5667  f9e3							; __AP_Skip_Reset
   5668  f9e3
   5669  f9e3				   .
   5670  f9e3							; 
   5671  f9e3
   5672  f9e3				   .
   5673  f9e3							; 
   5674  f9e3
   5675  f9e3				   .
   5676  f9e3							; 
   5677  f9e3
   5678  f9e3				   .
   5679  f9e3							; 
   5680  f9e3
   5681  f9e3				   .
   5682  f9e3							; 
   5683  f9e3
   5684  f9e3				   .L0166		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   5685  f9e3
   5686  f9e3		       a9 01		      lda	#1
   5687  f9e5		       2c 82 02 	      bit	SWCHB
   5688  f9e8		       f0 09		      BEQ	.skipL0166
   5689  f9ea				   .condpart71
   5690  f9ea		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5691  f9ec		       29 fe		      AND	#254
   5692  f9ee		       85 ec		      STA	_Bit0_Reset_Restrainer
   5693  f9f0		       4c 20 f6 	      jmp	.__Main_Loop
   5694  f9f3
   5695  f9f3				   .skipL0166
   5696  f9f3				   .
   5697  f9f3							; 
   5698  f9f3
   5699  f9f3				   .
   5700  f9f3							; 
   5701  f9f3
   5702  f9f3				   .
   5703  f9f3							; 
   5704  f9f3
   5705  f9f3				   .
   5706  f9f3							; 
   5707  f9f3
   5708  f9f3				   .
   5709  f9f3							; 
   5710  f9f3
   5711  f9f3				   .L0167		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   5712  f9f3
   5713  f9f3		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5714  f9f5		       4a		      LSR
   5715  f9f6		       90 03		      BCC	.skipL0167
   5716  f9f8				   .condpart72
   5717  f9f8		       4c 20 f6 	      jmp	.__Main_Loop
   5718  f9fb
   5719  f9fb				   .skipL0167
   5720  f9fb				   .
   5721  f9fb							; 
   5722  f9fb
   5723  f9fb				   .
   5724  f9fb							; 
   5725  f9fb
   5726  f9fb				   .
   5727  f9fb							; 
   5728  f9fb
   5729  f9fb				   .
   5730  f9fb							; 
   5731  f9fb
   5732  f9fb				   .L0168		;  _Bit2_Game_Control{2}  =  0
   5733  f9fb
   5734  f9fb		       a5 ec		      LDA	_Bit2_Game_Control
   5735  f9fd		       29 fb		      AND	#251
   5736  f9ff		       85 ec		      STA	_Bit2_Game_Control
   5737  fa01				   .
   5738  fa01							; 
   5739  fa01
   5740  fa01				   .
   5741  fa01							; 
   5742  fa01
   5743  fa01				   .
   5744  fa01							; 
   5745  fa01
   5746  fa01				   .
   5747  fa01							; 
   5748  fa01
   5749  fa01				   .
   5750  fa01							; 
   5751  fa01
   5752  fa01				   .L0169		;  goto __Game_Over_Setup
   5753  fa01
   5754  fa01		       4c 7c fa 	      jmp	.__Game_Over_Setup
   5755  fa04
   5756  fa04				   .
   5757  fa04							; 
   5758  fa04
   5759  fa04				   .
   5760  fa04							; 
   5761  fa04
   5762  fa04				   .
   5763  fa04							; 
   5764  fa04
   5765  fa04				   .
   5766  fa04							; 
   5767  fa04
   5768  fa04				   .
   5769  fa04							; 
   5770  fa04
   5771  fa04				   .
   5772  fa04							; 
   5773  fa04
   5774  fa04				   .
   5775  fa04							; 
   5776  fa04
   5777  fa04				   .
   5778  fa04							; 
   5779  fa04
   5780  fa04				   .
   5781  fa04							; 
   5782  fa04
   5783  fa04				   .
   5784  fa04							; 
   5785  fa04
   5786  fa04				   .
   5787  fa04							; 
   5788  fa04
   5789  fa04				   .
   5790  fa04							; 
   5791  fa04
   5792  fa04				   .
   5793  fa04							; 
   5794  fa04
   5795  fa04				   .
   5796  fa04							; 
   5797  fa04
   5798  fa04				   .
   5799  fa04							; 
   5800  fa04
   5801  fa04				   .
   5802  fa04							; 
   5803  fa04
   5804  fa04				   .
   5805  fa04							; 
   5806  fa04
   5807  fa04				   .
   5808  fa04							; 
   5809  fa04
   5810  fa04				   .
   5811  fa04							; 
   5812  fa04
   5813  fa04				   .
   5814  fa04							; 
   5815  fa04
   5816  fa04				   .__Ac00
   5817  fa04							; __Ac00
   5818  fa04
   5819  fa04				   .L0170		;  player0:
   5820  fa04
   5821  fa04		       a2 14		      LDX	#<playerL0170_0
   5822  fa06		       86 8a		      STX	player0pointerlo
   5823  fa08		       a9 fe		      LDA	#>playerL0170_0
   5824  fa0a		       85 8b		      STA	player0pointerhi
   5825  fa0c		       a9 07		      LDA	#7
   5826  fa0e		       85 8e		      STA	player0height
   5827  fa10				   .
   5828  fa10							; 
   5829  fa10
   5830  fa10				   .L0171		;  goto __Acorn_Frame_Done
   5831  fa10
   5832  fa10		       4c 79 f6 	      jmp	.__Acorn_Frame_Done
   5833  fa13
   5834  fa13				   .
   5835  fa13							; 
   5836  fa13
   5837  fa13				   .
   5838  fa13							; 
   5839  fa13
   5840  fa13				   .__Ac01
   5841  fa13							; __Ac01
   5842  fa13
   5843  fa13				   .L0172		;  player0:
   5844  fa13
   5845  fa13		       a2 1c		      LDX	#<playerL0172_0
   5846  fa15		       86 8a		      STX	player0pointerlo
   5847  fa17		       a9 fe		      LDA	#>playerL0172_0
   5848  fa19		       85 8b		      STA	player0pointerhi
   5849  fa1b		       a9 07		      LDA	#7
   5850  fa1d		       85 8e		      STA	player0height
   5851  fa1f				   .
   5852  fa1f							; 
   5853  fa1f
   5854  fa1f				   .L0173		;  goto __Acorn_Frame_Done
   5855  fa1f
   5856  fa1f		       4c 79 f6 	      jmp	.__Acorn_Frame_Done
   5857  fa22
   5858  fa22				   .
   5859  fa22							; 
   5860  fa22
   5861  fa22				   .
   5862  fa22							; 
   5863  fa22
   5864  fa22				   .__Ac02
   5865  fa22							; __Ac02
   5866  fa22
   5867  fa22				   .L0174		;  player0:
   5868  fa22
   5869  fa22		       a2 24		      LDX	#<playerL0174_0
   5870  fa24		       86 8a		      STX	player0pointerlo
   5871  fa26		       a9 fe		      LDA	#>playerL0174_0
   5872  fa28		       85 8b		      STA	player0pointerhi
   5873  fa2a		       a9 07		      LDA	#7
   5874  fa2c		       85 8e		      STA	player0height
   5875  fa2e				   .
   5876  fa2e							; 
   5877  fa2e
   5878  fa2e				   .L0175		;  goto __Acorn_Frame_Done
   5879  fa2e
   5880  fa2e		       4c 79 f6 	      jmp	.__Acorn_Frame_Done
   5881  fa31
   5882  fa31				   .
   5883  fa31							; 
   5884  fa31
   5885  fa31				   .
   5886  fa31							; 
   5887  fa31
   5888  fa31				   .__Ac03
   5889  fa31							; __Ac03
   5890  fa31
   5891  fa31				   .L0176		;  player0:
   5892  fa31
   5893  fa31		       a2 2c		      LDX	#<playerL0176_0
   5894  fa33		       86 8a		      STX	player0pointerlo
   5895  fa35		       a9 fe		      LDA	#>playerL0176_0
   5896  fa37		       85 8b		      STA	player0pointerhi
   5897  fa39		       a9 07		      LDA	#7
   5898  fa3b		       85 8e		      STA	player0height
   5899  fa3d				   .
   5900  fa3d							; 
   5901  fa3d
   5902  fa3d				   .L0177		;  goto __Acorn_Frame_Done
   5903  fa3d
   5904  fa3d		       4c 79 f6 	      jmp	.__Acorn_Frame_Done
   5905  fa40
   5906  fa40				   .
   5907  fa40							; 
   5908  fa40
   5909  fa40				   .
   5910  fa40							; 
   5911  fa40
   5912  fa40				   .
   5913  fa40							; 
   5914  fa40
   5915  fa40				   .
   5916  fa40							; 
   5917  fa40
   5918  fa40				   .
   5919  fa40							; 
   5920  fa40
   5921  fa40				   .
   5922  fa40							; 
   5923  fa40
   5924  fa40				   .
   5925  fa40							; 
   5926  fa40
   5927  fa40				   .
   5928  fa40							; 
   5929  fa40
   5930  fa40				   .
   5931  fa40							; 
   5932  fa40
   5933  fa40				   .__Sq00
   5934  fa40							; __Sq00
   5935  fa40
   5936  fa40				   .L0178		;  player1:
   5937  fa40
   5938  fa40		       a2 34		      LDX	#<playerL0178_1
   5939  fa42		       86 8c		      STX	player1pointerlo
   5940  fa44		       a9 fe		      LDA	#>playerL0178_1
   5941  fa46		       85 8d		      STA	player1pointerhi
   5942  fa48		       a9 03		      LDA	#3
   5943  fa4a		       85 8f		      STA	player1height
   5944  fa4c				   .
   5945  fa4c							; 
   5946  fa4c
   5947  fa4c				   .L0179		;  goto __Squirrel_Frame_Done
   5948  fa4c
   5949  fa4c		       4c 66 f6 	      jmp	.__Squirrel_Frame_Done
   5950  fa4f
   5951  fa4f				   .
   5952  fa4f							; 
   5953  fa4f
   5954  fa4f				   .
   5955  fa4f							; 
   5956  fa4f
   5957  fa4f				   .__Sq01
   5958  fa4f							; __Sq01
   5959  fa4f
   5960  fa4f				   .L0180		;  player1:
   5961  fa4f
   5962  fa4f		       a2 38		      LDX	#<playerL0180_1
   5963  fa51		       86 8c		      STX	player1pointerlo
   5964  fa53		       a9 fe		      LDA	#>playerL0180_1
   5965  fa55		       85 8d		      STA	player1pointerhi
   5966  fa57		       a9 03		      LDA	#3
   5967  fa59		       85 8f		      STA	player1height
   5968  fa5b				   .
   5969  fa5b							; 
   5970  fa5b
   5971  fa5b				   .L0181		;  goto __Squirrel_Frame_Done
   5972  fa5b
   5973  fa5b		       4c 66 f6 	      jmp	.__Squirrel_Frame_Done
   5974  fa5e
   5975  fa5e				   .
   5976  fa5e							; 
   5977  fa5e
   5978  fa5e				   .
   5979  fa5e							; 
   5980  fa5e
   5981  fa5e				   .__Sq02
   5982  fa5e							; __Sq02
   5983  fa5e
   5984  fa5e				   .L0182		;  player1:
   5985  fa5e
   5986  fa5e		       a2 3c		      LDX	#<playerL0182_1
   5987  fa60		       86 8c		      STX	player1pointerlo
   5988  fa62		       a9 fe		      LDA	#>playerL0182_1
   5989  fa64		       85 8d		      STA	player1pointerhi
   5990  fa66		       a9 03		      LDA	#3
   5991  fa68		       85 8f		      STA	player1height
   5992  fa6a				   .
   5993  fa6a							; 
   5994  fa6a
   5995  fa6a				   .L0183		;  goto __Squirrel_Frame_Done
   5996  fa6a
   5997  fa6a		       4c 66 f6 	      jmp	.__Squirrel_Frame_Done
   5998  fa6d
   5999  fa6d				   .
   6000  fa6d							; 
   6001  fa6d
   6002  fa6d				   .
   6003  fa6d							; 
   6004  fa6d
   6005  fa6d				   .__Sq03
   6006  fa6d							; __Sq03
   6007  fa6d
   6008  fa6d				   .L0184		;  player1:
   6009  fa6d
   6010  fa6d		       a2 40		      LDX	#<playerL0184_1
   6011  fa6f		       86 8c		      STX	player1pointerlo
   6012  fa71		       a9 fe		      LDA	#>playerL0184_1
   6013  fa73		       85 8d		      STA	player1pointerhi
   6014  fa75		       a9 03		      LDA	#3
   6015  fa77		       85 8f		      STA	player1height
   6016  fa79				   .
   6017  fa79							; 
   6018  fa79
   6019  fa79				   .L0185		;  goto __Squirrel_Frame_Done
   6020  fa79
   6021  fa79		       4c 66 f6 	      jmp	.__Squirrel_Frame_Done
   6022  fa7c
   6023  fa7c				   .
   6024  fa7c							; 
   6025  fa7c
   6026  fa7c				   .
   6027  fa7c							; 
   6028  fa7c
   6029  fa7c				   .
   6030  fa7c							; 
   6031  fa7c
   6032  fa7c				   .
   6033  fa7c							; 
   6034  fa7c
   6035  fa7c				   .
   6036  fa7c							; 
   6037  fa7c
   6038  fa7c				   .
   6039  fa7c							; 
   6040  fa7c
   6041  fa7c				   .
   6042  fa7c							; 
   6043  fa7c
   6044  fa7c				   .
   6045  fa7c							; 
   6046  fa7c
   6047  fa7c				   .
   6048  fa7c							; 
   6049  fa7c
   6050  fa7c				   .
   6051  fa7c							; 
   6052  fa7c
   6053  fa7c				   .
   6054  fa7c							; 
   6055  fa7c
   6056  fa7c				   .__Game_Over_Setup
   6057  fa7c							; __Game_Over_Setup
   6058  fa7c
   6059  fa7c				   .
   6060  fa7c							; 
   6061  fa7c
   6062  fa7c				   .
   6063  fa7c							; 
   6064  fa7c
   6065  fa7c				   .
   6066  fa7c							; 
   6067  fa7c
   6068  fa7c				   .
   6069  fa7c							; 
   6070  fa7c
   6071  fa7c				   .
   6072  fa7c							; 
   6073  fa7c
   6074  fa7c				   .
   6075  fa7c							; 
   6076  fa7c
   6077  fa7c				   .
   6078  fa7c							; 
   6079  fa7c
   6080  fa7c				   .
   6081  fa7c							; 
   6082  fa7c
   6083  fa7c				   .
   6084  fa7c							; 
   6085  fa7c
   6086  fa7c				   .
   6087  fa7c							; 
   6088  fa7c
   6089  fa7c				   .
   6090  fa7c							; 
   6091  fa7c
   6092  fa7c				   .L0186		;  if _sc1  >	_High_Score1 then goto __New_High_Score
   6093  fa7c
   6094  fa7c		       a5 e9		      LDA	_High_Score1
   6095  fa7e		       c5 93		      CMP	_sc1
   6096  fa80		       b0 03		      BCS	.skipL0186
   6097  fa82				   .condpart73
   6098  fa82		       4c b5 fa 	      jmp	.__New_High_Score
   6099  fa85
   6100  fa85				   .skipL0186
   6101  fa85				   .L0187		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
   6102  fa85
   6103  fa85		       a5 93		      LDA	_sc1
   6104  fa87		       c5 e9		      CMP	_High_Score1
   6105  fa89		       b0 03		      BCS	.skipL0187
   6106  fa8b				   .condpart74
   6107  fa8b		       4c c1 fa 	      jmp	.__Skip_High_Score
   6108  fa8e
   6109  fa8e				   .skipL0187
   6110  fa8e				   .
   6111  fa8e							; 
   6112  fa8e
   6113  fa8e				   .
   6114  fa8e							; 
   6115  fa8e
   6116  fa8e				   .
   6117  fa8e							; 
   6118  fa8e
   6119  fa8e				   .
   6120  fa8e							; 
   6121  fa8e
   6122  fa8e				   .L0188		;  if _sc2  >	_High_Score2 then goto __New_High_Score
   6123  fa8e
   6124  fa8e		       a5 ea		      LDA	_High_Score2
   6125  fa90		       c5 94		      CMP	_sc2
   6126  fa92		       b0 03		      BCS	.skipL0188
   6127  fa94				   .condpart75
   6128  fa94		       4c b5 fa 	      jmp	.__New_High_Score
   6129  fa97
   6130  fa97				   .skipL0188
   6131  fa97				   .L0189		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
   6132  fa97
   6133  fa97		       a5 94		      LDA	_sc2
   6134  fa99		       c5 ea		      CMP	_High_Score2
   6135  fa9b		       b0 03		      BCS	.skipL0189
   6136  fa9d				   .condpart76
   6137  fa9d		       4c c1 fa 	      jmp	.__Skip_High_Score
   6138  faa0
   6139  faa0				   .skipL0189
   6140  faa0				   .
   6141  faa0							; 
   6142  faa0
   6143  faa0				   .
   6144  faa0							; 
   6145  faa0
   6146  faa0				   .
   6147  faa0							; 
   6148  faa0
   6149  faa0				   .
   6150  faa0							; 
   6151  faa0
   6152  faa0				   .L0190		;  if _sc3  >	_High_Score3 then goto __New_High_Score
   6153  faa0
   6154  faa0		       a5 eb		      LDA	_High_Score3
   6155  faa2		       c5 95		      CMP	_sc3
   6156  faa4		       b0 03		      BCS	.skipL0190
   6157  faa6				   .condpart77
   6158  faa6		       4c b5 fa 	      jmp	.__New_High_Score
   6159  faa9
   6160  faa9				   .skipL0190
   6161  faa9				   .L0191		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
   6162  faa9
   6163  faa9		       a5 95		      LDA	_sc3
   6164  faab		       c5 eb		      CMP	_High_Score3
   6165  faad		       b0 03		      BCS	.skipL0191
   6166  faaf				   .condpart78
   6167  faaf		       4c c1 fa 	      jmp	.__Skip_High_Score
   6168  fab2
   6169  fab2				   .skipL0191
   6170  fab2				   .
   6171  fab2							; 
   6172  fab2
   6173  fab2				   .
   6174  fab2							; 
   6175  fab2
   6176  fab2				   .
   6177  fab2							; 
   6178  fab2
   6179  fab2				   .
   6180  fab2							; 
   6181  fab2
   6182  fab2				   .L0192		;  goto __Skip_High_Score
   6183  fab2
   6184  fab2		       4c c1 fa 	      jmp	.__Skip_High_Score
   6185  fab5
   6186  fab5				   .
   6187  fab5							; 
   6188  fab5
   6189  fab5				   .
   6190  fab5							; 
   6191  fab5
   6192  fab5				   .
   6193  fab5							; 
   6194  fab5
   6195  fab5				   .
   6196  fab5							; 
   6197  fab5
   6198  fab5				   .__New_High_Score
   6199  fab5							; __New_High_Score
   6200  fab5
   6201  fab5				   .
   6202  fab5							; 
   6203  fab5
   6204  fab5				   .L0193		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
   6205  fab5
   6206  fab5		       a5 93		      LDA	_sc1
   6207  fab7		       85 e9		      STA	_High_Score1
   6208  fab9		       a5 94		      LDA	_sc2
   6209  fabb		       85 ea		      STA	_High_Score2
   6210  fabd		       a5 95		      LDA	_sc3
   6211  fabf		       85 eb		      STA	_High_Score3
   6212  fac1				   .
   6213  fac1							; 
   6214  fac1
   6215  fac1				   .__Skip_High_Score
   6216  fac1							; __Skip_High_Score
   6217  fac1
   6218  fac1				   .
   6219  fac1							; 
   6220  fac1
   6221  fac1				   .
   6222  fac1							; 
   6223  fac1
   6224  fac1				   .
   6225  fac1							; 
   6226  fac1
   6227  fac1				   .
   6228  fac1							; 
   6229  fac1
   6230  fac1				   .
   6231  fac1							; 
   6232  fac1
   6233  fac1				   .L0194		;  if !_Bit2_Game_Control{2} then goto __Start_Restart
   6234  fac1
   6235  fac1		       a5 ec		      LDA	_Bit2_Game_Control
   6236  fac3		       29 04		      AND	#4
   6237  fac5		       d0 03		      BNE	.skipL0194
   6238  fac7				   .condpart79
   6239  fac7		       4c 7f f4 	      jmp	.__Start_Restart
   6240  faca
   6241  faca				   .skipL0194
   6242  faca				   .
   6243  faca							; 
   6244  faca
   6245  faca				   .
   6246  faca							; 
   6247  faca
   6248  faca				   .
   6249  faca							; 
   6250  faca
   6251  faca				   .
   6252  faca							; 
   6253  faca
   6254  faca				   .
   6255  faca							; 
   6256  faca
   6257  faca				   .
   6258  faca							; 
   6259  faca
   6260  faca				   .L0195		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   6261  faca
   6262  faca		       a5 93		      LDA	_sc1
   6263  facc		       85 e6		      STA	_Score1_Mem
   6264  face		       a5 94		      LDA	_sc2
   6265  fad0		       85 e7		      STA	_Score2_Mem
   6266  fad2		       a5 95		      LDA	_sc3
   6267  fad4		       85 e8		      STA	_Score3_Mem
   6268  fad6				   .
   6269  fad6							; 
   6270  fad6
   6271  fad6				   .
   6272  fad6							; 
   6273  fad6
   6274  fad6				   .
   6275  fad6							; 
   6276  fad6
   6277  fad6				   .
   6278  fad6							; 
   6279  fad6
   6280  fad6				   .
   6281  fad6							; 
   6282  fad6
   6283  fad6				   .
   6284  fad6							; 
   6285  fad6
   6286  fad6				   .L0196		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   6287  fad6
   6288  fad6		       a9 00		      LDA	#0
   6289  fad8		       85 d4		      STA	_Master_Counter
   6290  fada		       85 d5		      STA	_Frame_Counter
   6291  fadc				   .
   6292  fadc							; 
   6293  fadc
   6294  fadc				   .
   6295  fadc							; 
   6296  fadc
   6297  fadc				   .
   6298  fadc							; 
   6299  fadc
   6300  fadc				   .
   6301  fadc							; 
   6302  fadc
   6303  fadc				   .
   6304  fadc							; 
   6305  fadc
   6306  fadc				   .
   6307  fadc							; 
   6308  fadc
   6309  fadc				   .L0197		;  player0y  =  200  :  player1y  =  200  :  bally  =	200
   6310  fadc
   6311  fadc		       a9 c8		      LDA	#200
   6312  fade		       85 85		      STA	player0y
   6313  fae0		       85 86		      STA	player1y
   6314  fae2		       85 89		      STA	bally
   6315  fae4				   .
   6316  fae4							; 
   6317  fae4
   6318  fae4				   .
   6319  fae4							; 
   6320  fae4
   6321  fae4				   .
   6322  fae4							; 
   6323  fae4
   6324  fae4				   .
   6325  fae4							; 
   6326  fae4
   6327  fae4				   .
   6328  fae4							; 
   6329  fae4
   6330  fae4				   .
   6331  fae4							; 
   6332  fae4
   6333  fae4				   .
   6334  fae4							; 
   6335  fae4
   6336  fae4				   .
   6337  fae4							; 
   6338  fae4
   6339  fae4				   .
   6340  fae4							; 
   6341  fae4
   6342  fae4				   .
   6343  fae4							; 
   6344  fae4
   6345  fae4				   .
   6346  fae4							; 
   6347  fae4
   6348  fae4				   .L0198		;  _Bit0_Reset_Restrainer{0}  =  1
   6349  fae4
   6350  fae4		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6351  fae6		       09 01		      ORA	#1
   6352  fae8		       85 ec		      STA	_Bit0_Reset_Restrainer
   6353  faea				   .
   6354  faea							; 
   6355  faea
   6356  faea				   .
   6357  faea							; 
   6358  faea
   6359  faea				   .
   6360  faea							; 
   6361  faea
   6362  faea				   .
   6363  faea							; 
   6364  faea
   6365  faea				   .
   6366  faea							; 
   6367  faea
   6368  faea				   .
   6369  faea							; 
   6370  faea
   6371  faea				   .L0199		;  playfield:
   6372  faea
   6373  faea				  -	      ifconst	pfres
   6374  faea				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6375  faea					      else
   6376  faea		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6377  faec					      endif
   6378  faec		       4c 1b fb 	      jmp	pflabel2
   6379  faef				   PF_data2
   6380  faef		       7e bf		      .byte.b	%01111110, %10111111
   6381  faf1					      if	(pfwidth>2)
   6382  faf1		       ff 7d		      .byte.b	%11111111, %01111101
   6383  faf3					      endif
   6384  faf3		       60 b3		      .byte.b	%01100000, %10110011
   6385  faf5					      if	(pfwidth>2)
   6386  faf5		       99 0d		      .byte.b	%10011001, %00001101
   6387  faf7					      endif
   6388  faf7		       6e bf		      .byte.b	%01101110, %10111111
   6389  faf9					      if	(pfwidth>2)
   6390  faf9		       99 3d		      .byte.b	%10011001, %00111101
   6391  fafb					      endif
   6392  fafb		       66 b3		      .byte.b	%01100110, %10110011
   6393  fafd					      if	(pfwidth>2)
   6394  fafd		       99 0d		      .byte.b	%10011001, %00001101
   6395  faff					      endif
   6396  faff		       7e b3		      .byte.b	%01111110, %10110011
   6397  fb01					      if	(pfwidth>2)
   6398  fb01		       99 7d		      .byte.b	%10011001, %01111101
   6399  fb03					      endif
   6400  fb03		       00 00		      .byte.b	%00000000, %00000000
   6401  fb05					      if	(pfwidth>2)
   6402  fb05		       00 00		      .byte.b	%00000000, %00000000
   6403  fb07					      endif
   6404  fb07		       1f cd		      .byte.b	%00011111, %11001101
   6405  fb09					      if	(pfwidth>2)
   6406  fb09		       7d 1f		      .byte.b	%01111101, %00011111
   6407  fb0b					      endif
   6408  fb0b		       19 cd		      .byte.b	%00011001, %11001101
   6409  fb0d					      if	(pfwidth>2)
   6410  fb0d		       61 19		      .byte.b	%01100001, %00011001
   6411  fb0f					      endif
   6412  fb0f		       19 cd		      .byte.b	%00011001, %11001101
   6413  fb11					      if	(pfwidth>2)
   6414  fb11		       79 0f		      .byte.b	%01111001, %00001111
   6415  fb13					      endif
   6416  fb13		       19 cd		      .byte.b	%00011001, %11001101
   6417  fb15					      if	(pfwidth>2)
   6418  fb15		       61 19		      .byte.b	%01100001, %00011001
   6419  fb17					      endif
   6420  fb17		       1f 31		      .byte.b	%00011111, %00110001
   6421  fb19					      if	(pfwidth>2)
   6422  fb19		       7d 19		      .byte.b	%01111101, %00011001
   6423  fb1b					      endif
   6424  fb1b				   pflabel2
   6425  fb1b		       bd ef fa 	      lda	PF_data2,x
   6426  fb1e		       95 a4		      sta	playfield,x
   6427  fb20		       ca		      dex
   6428  fb21		       10 f8		      bpl	pflabel2
   6429  fb23				   .
   6430  fb23							; 
   6431  fb23
   6432  fb23				   .
   6433  fb23							; 
   6434  fb23
   6435  fb23				   .
   6436  fb23							; 
   6437  fb23
   6438  fb23				   .
   6439  fb23							; 
   6440  fb23
   6441  fb23				   .
   6442  fb23							; 
   6443  fb23
   6444  fb23				   .
   6445  fb23							; 
   6446  fb23
   6447  fb23				   .
   6448  fb23							; 
   6449  fb23
   6450  fb23				   .
   6451  fb23							; 
   6452  fb23
   6453  fb23				   .
   6454  fb23							; 
   6455  fb23
   6456  fb23				   .
   6457  fb23							; 
   6458  fb23
   6459  fb23				   .
   6460  fb23							; 
   6461  fb23
   6462  fb23				   .__Game_Over_Loop
   6463  fb23							; __Game_Over_Loop
   6464  fb23
   6465  fb23				   .
   6466  fb23							; 
   6467  fb23
   6468  fb23				   .
   6469  fb23							; 
   6470  fb23
   6471  fb23				   .
   6472  fb23							; 
   6473  fb23
   6474  fb23				   .
   6475  fb23							; 
   6476  fb23
   6477  fb23				   .
   6478  fb23							; 
   6479  fb23
   6480  fb23				   .
   6481  fb23							; 
   6482  fb23
   6483  fb23				   .
   6484  fb23							; 
   6485  fb23
   6486  fb23				   .
   6487  fb23							; 
   6488  fb23
   6489  fb23				   .
   6490  fb23							; 
   6491  fb23
   6492  fb23				   .
   6493  fb23							; 
   6494  fb23
   6495  fb23				   .
   6496  fb23							; 
   6497  fb23
   6498  fb23				   .
   6499  fb23							; 
   6500  fb23
   6501  fb23				   .
   6502  fb23							; 
   6503  fb23
   6504  fb23				   .
   6505  fb23							; 
   6506  fb23
   6507  fb23				   .
   6508  fb23							; 
   6509  fb23
   6510  fb23				   .
   6511  fb23							; 
   6512  fb23
   6513  fb23				   .
   6514  fb23							; 
   6515  fb23
   6516  fb23				   .
   6517  fb23							; 
   6518  fb23
   6519  fb23				   .
   6520  fb23							; 
   6521  fb23
   6522  fb23				   .L0200		;  _Master_Counter  =	_Master_Counter  +  1
   6523  fb23
   6524  fb23		       e6 d4		      INC	_Master_Counter
   6525  fb25				   .
   6526  fb25							; 
   6527  fb25
   6528  fb25				   .
   6529  fb25							; 
   6530  fb25
   6531  fb25				   .
   6532  fb25							; 
   6533  fb25
   6534  fb25				   .
   6535  fb25							; 
   6536  fb25
   6537  fb25				   .
   6538  fb25							; 
   6539  fb25
   6540  fb25				   .L0201		;  if _Master_Counter	<  120 then goto __Skip_20_Second_Counter
   6541  fb25
   6542  fb25		       a5 d4		      LDA	_Master_Counter
   6543  fb27		       c9 78		      CMP	#120
   6544  fb29		       b0 03		      BCS	.skipL0201
   6545  fb2b				   .condpart80
   6546  fb2b		       4c 89 fb 	      jmp	.__Skip_20_Second_Counter
   6547  fb2e
   6548  fb2e				   .skipL0201
   6549  fb2e				   .
   6550  fb2e							; 
   6551  fb2e
   6552  fb2e				   .
   6553  fb2e							; 
   6554  fb2e
   6555  fb2e				   .
   6556  fb2e							; 
   6557  fb2e
   6558  fb2e				   .
   6559  fb2e							; 
   6560  fb2e
   6561  fb2e				   .
   6562  fb2e							; 
   6563  fb2e
   6564  fb2e				   .L0202		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   6565  fb2e
   6566  fb2e		       e6 d5		      INC	_Frame_Counter
   6567  fb30		       a9 00		      LDA	#0
   6568  fb32		       85 d4		      STA	_Master_Counter
   6569  fb34				   .
   6570  fb34							; 
   6571  fb34
   6572  fb34				   .
   6573  fb34							; 
   6574  fb34
   6575  fb34				   .
   6576  fb34							; 
   6577  fb34
   6578  fb34				   .
   6579  fb34							; 
   6580  fb34
   6581  fb34				   .
   6582  fb34							; 
   6583  fb34
   6584  fb34				   .
   6585  fb34							; 
   6586  fb34
   6587  fb34				   .
   6588  fb34							; 
   6589  fb34
   6590  fb34				   .
   6591  fb34							; 
   6592  fb34
   6593  fb34				   .L0203		;  if _Frame_Counter  >  9 then _Bit2_Game_Control{2}	=  0  :  _sc1 = _Score1_Mem  :	_sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem :  goto __Start_Restart
   6594  fb34
   6595  fb34		       a9 09		      LDA	#9
   6596  fb36		       c5 d5		      CMP	_Frame_Counter
   6597  fb38		       b0 15		      BCS	.skipL0203
   6598  fb3a				   .condpart81
   6599  fb3a		       a5 ec		      LDA	_Bit2_Game_Control
   6600  fb3c		       29 fb		      AND	#251
   6601  fb3e		       85 ec		      STA	_Bit2_Game_Control
   6602  fb40		       a5 e6		      LDA	_Score1_Mem
   6603  fb42		       85 93		      STA	_sc1
   6604  fb44		       a5 e7		      LDA	_Score2_Mem
   6605  fb46		       85 94		      STA	_sc2
   6606  fb48		       a5 e8		      LDA	_Score3_Mem
   6607  fb4a		       85 95		      STA	_sc3
   6608  fb4c		       4c 7f f4 	      jmp	.__Start_Restart
   6609  fb4f
   6610  fb4f				   .skipL0203
   6611  fb4f				   .
   6612  fb4f							; 
   6613  fb4f
   6614  fb4f				   .
   6615  fb4f							; 
   6616  fb4f
   6617  fb4f				   .
   6618  fb4f							; 
   6619  fb4f
   6620  fb4f				   .
   6621  fb4f							; 
   6622  fb4f
   6623  fb4f				   .L0204		;  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   6624  fb4f
   6625  fb4f		       a5 ec		      LDA	_Bit6_Swap_Scores
   6626  fb51		       29 40		      AND	#64
   6627  fb53		       08		      PHP
   6628  fb54		       a5 ec		      LDA	_Bit6_Swap_Scores
   6629  fb56		       29 bf		      AND	#191
   6630  fb58		       28		      PLP
   6631  fb59		       d0 02		      .byte.b	$D0, $02
   6632  fb5b		       09 40		      ORA	#64
   6633  fb5d		       85 ec		      STA	_Bit6_Swap_Scores
   6634  fb5f				   .
   6635  fb5f							; 
   6636  fb5f
   6637  fb5f				   .
   6638  fb5f							; 
   6639  fb5f
   6640  fb5f				   .
   6641  fb5f							; 
   6642  fb5f
   6643  fb5f				   .
   6644  fb5f							; 
   6645  fb5f
   6646  fb5f				   .L0205		;  if !_Bit6_Swap_Scores{6} then goto __GO_Current_Score
   6647  fb5f
   6648  fb5f		       24 ec		      BIT	_Bit6_Swap_Scores
   6649  fb61		       70 03		      BVS	.skipL0205
   6650  fb63				   .condpart82
   6651  fb63		       4c 79 fb 	      jmp	.__GO_Current_Score
   6652  fb66
   6653  fb66				   .skipL0205
   6654  fb66				   .
   6655  fb66							; 
   6656  fb66
   6657  fb66				   .
   6658  fb66							; 
   6659  fb66
   6660  fb66				   .
   6661  fb66							; 
   6662  fb66
   6663  fb66				   .
   6664  fb66							; 
   6665  fb66
   6666  fb66				   .L0206		;  scorecolor	=  $AE
   6667  fb66
   6668  fb66		       a9 ae		      LDA	#$AE
   6669  fb68		       85 a3		      STA	scorecolor
   6670  fb6a				   .
   6671  fb6a							; 
   6672  fb6a
   6673  fb6a				   .L0207		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   6674  fb6a
   6675  fb6a		       a5 e9		      LDA	_High_Score1
   6676  fb6c		       85 93		      STA	_sc1
   6677  fb6e		       a5 ea		      LDA	_High_Score2
   6678  fb70		       85 94		      STA	_sc2
   6679  fb72		       a5 eb		      LDA	_High_Score3
   6680  fb74		       85 95		      STA	_sc3
   6681  fb76				   .
   6682  fb76							; 
   6683  fb76
   6684  fb76				   .L0208		;  goto __Skip_20_Second_Counter
   6685  fb76
   6686  fb76		       4c 89 fb 	      jmp	.__Skip_20_Second_Counter
   6687  fb79
   6688  fb79				   .
   6689  fb79							; 
   6690  fb79
   6691  fb79				   .
   6692  fb79							; 
   6693  fb79
   6694  fb79				   .
   6695  fb79							; 
   6696  fb79
   6697  fb79				   .
   6698  fb79							; 
   6699  fb79
   6700  fb79				   .__GO_Current_Score
   6701  fb79							; __GO_Current_Score
   6702  fb79
   6703  fb79				   .
   6704  fb79							; 
   6705  fb79
   6706  fb79				   .L0209		;  scorecolor	=  $1C
   6707  fb79
   6708  fb79		       a9 1c		      LDA	#$1C
   6709  fb7b		       85 a3		      STA	scorecolor
   6710  fb7d				   .
   6711  fb7d							; 
   6712  fb7d
   6713  fb7d				   .L0210		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   6714  fb7d
   6715  fb7d		       a5 e6		      LDA	_Score1_Mem
   6716  fb7f		       85 93		      STA	_sc1
   6717  fb81		       a5 e7		      LDA	_Score2_Mem
   6718  fb83		       85 94		      STA	_sc2
   6719  fb85		       a5 e8		      LDA	_Score3_Mem
   6720  fb87		       85 95		      STA	_sc3
   6721  fb89				   .
   6722  fb89							; 
   6723  fb89
   6724  fb89				   .__Skip_20_Second_Counter
   6725  fb89							; __Skip_20_Second_Counter
   6726  fb89
   6727  fb89				   .
   6728  fb89							; 
   6729  fb89
   6730  fb89				   .
   6731  fb89							; 
   6732  fb89
   6733  fb89				   .
   6734  fb89							; 
   6735  fb89
   6736  fb89				   .
   6737  fb89							; 
   6738  fb89
   6739  fb89				   .
   6740  fb89							; 
   6741  fb89
   6742  fb89				   .
   6743  fb89							; 
   6744  fb89
   6745  fb89				   .
   6746  fb89							; 
   6747  fb89
   6748  fb89				   .L0211		;  COLUBK  =  $44  :  COLUPF  =  $2C
   6749  fb89
   6750  fb89		       a9 44		      LDA	#$44
   6751  fb8b		       85 09		      STA	COLUBK
   6752  fb8d		       a9 2c		      LDA	#$2C
   6753  fb8f		       85 08		      STA	COLUPF
   6754  fb91				   .
   6755  fb91							; 
   6756  fb91
   6757  fb91				   .
   6758  fb91							; 
   6759  fb91
   6760  fb91				   .
   6761  fb91							; 
   6762  fb91
   6763  fb91				   .
   6764  fb91							; 
   6765  fb91
   6766  fb91				   .
   6767  fb91							; 
   6768  fb91
   6769  fb91				   .
   6770  fb91							; 
   6771  fb91
   6772  fb91				   .L0212		;  if _Frame_Counter  >  0 then COLUBK  =  $D2  :  COLUPF  =  $DA
   6773  fb91
   6774  fb91		       a9 00		      LDA	#0
   6775  fb93		       c5 d5		      CMP	_Frame_Counter
   6776  fb95		       b0 08		      BCS	.skipL0212
   6777  fb97				   .condpart83
   6778  fb97		       a9 d2		      LDA	#$D2
   6779  fb99		       85 09		      STA	COLUBK
   6780  fb9b		       a9 da		      LDA	#$DA
   6781  fb9d		       85 08		      STA	COLUPF
   6782  fb9f				   .skipL0212
   6783  fb9f				   .
   6784  fb9f							; 
   6785  fb9f
   6786  fb9f				   .
   6787  fb9f							; 
   6788  fb9f
   6789  fb9f				   .
   6790  fb9f							; 
   6791  fb9f
   6792  fb9f				   .
   6793  fb9f							; 
   6794  fb9f
   6795  fb9f				   .
   6796  fb9f							; 
   6797  fb9f
   6798  fb9f				   .
   6799  fb9f							; 
   6800  fb9f
   6801  fb9f				   .
   6802  fb9f							; 
   6803  fb9f
   6804  fb9f				   .L0213		;  drawscreen
   6805  fb9f
   6806  fb9f		       20 d5 f3 	      jsr	drawscreen
   6807  fba2				   .
   6808  fba2							; 
   6809  fba2
   6810  fba2				   .
   6811  fba2							; 
   6812  fba2
   6813  fba2				   .
   6814  fba2							; 
   6815  fba2
   6816  fba2				   .
   6817  fba2							; 
   6818  fba2
   6819  fba2				   .
   6820  fba2							; 
   6821  fba2
   6822  fba2				   .
   6823  fba2							; 
   6824  fba2
   6825  fba2				   .
   6826  fba2							; 
   6827  fba2
   6828  fba2				   .
   6829  fba2							; 
   6830  fba2
   6831  fba2				   .
   6832  fba2							; 
   6833  fba2
   6834  fba2				   .
   6835  fba2							; 
   6836  fba2
   6837  fba2				   .
   6838  fba2							; 
   6839  fba2
   6840  fba2				   .
   6841  fba2							; 
   6842  fba2
   6843  fba2				   .
   6844  fba2							; 
   6845  fba2
   6846  fba2				   .
   6847  fba2							; 
   6848  fba2
   6849  fba2				   .L0214		;  if _Frame_Counter  =  0 then goto __Game_Over_Loop
   6850  fba2
   6851  fba2		       a5 d5		      LDA	_Frame_Counter
   6852  fba4		       c9 00		      CMP	#0
   6853  fba6		       d0 03		      BNE	.skipL0214
   6854  fba8				   .condpart84
   6855  fba8		       4c 23 fb 	      jmp	.__Game_Over_Loop
   6856  fbab
   6857  fbab				   .skipL0214
   6858  fbab				   .
   6859  fbab							; 
   6860  fbab
   6861  fbab				   .
   6862  fbab							; 
   6863  fbab
   6864  fbab				   .
   6865  fbab							; 
   6866  fbab
   6867  fbab				   .
   6868  fbab							; 
   6869  fbab
   6870  fbab				   .
   6871  fbab							; 
   6872  fbab
   6873  fbab				   .L0215		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Game_Over_Loop
   6874  fbab
   6875  fbab		       a9 01		      lda	#1
   6876  fbad		       2c 82 02 	      bit	SWCHB
   6877  fbb0		       f0 0d		      BEQ	.skipL0215
   6878  fbb2				   .condpart85
   6879  fbb2		       24 0c		      bit	INPT4
   6880  fbb4		       10 09		      BPL	.skip85then
   6881  fbb6				   .condpart86
   6882  fbb6		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6883  fbb8		       29 fe		      AND	#254
   6884  fbba		       85 ec		      STA	_Bit0_Reset_Restrainer
   6885  fbbc		       4c 23 fb 	      jmp	.__Game_Over_Loop
   6886  fbbf
   6887  fbbf				   .skip85then
   6888  fbbf				   .skipL0215
   6889  fbbf				   .
   6890  fbbf							; 
   6891  fbbf
   6892  fbbf				   .
   6893  fbbf							; 
   6894  fbbf
   6895  fbbf				   .
   6896  fbbf							; 
   6897  fbbf
   6898  fbbf				   .
   6899  fbbf							; 
   6900  fbbf
   6901  fbbf				   .
   6902  fbbf							; 
   6903  fbbf
   6904  fbbf				   .L0216		;  if _Bit0_Reset_Restrainer{0} then goto __Game_Over_Loop
   6905  fbbf
   6906  fbbf		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6907  fbc1		       4a		      LSR
   6908  fbc2		       90 03		      BCC	.skipL0216
   6909  fbc4				   .condpart87
   6910  fbc4		       4c 23 fb 	      jmp	.__Game_Over_Loop
   6911  fbc7
   6912  fbc7				   .skipL0216
   6913  fbc7				   .
   6914  fbc7							; 
   6915  fbc7
   6916  fbc7				   .
   6917  fbc7							; 
   6918  fbc7
   6919  fbc7				   .
   6920  fbc7							; 
   6921  fbc7
   6922  fbc7				   .
   6923  fbc7							; 
   6924  fbc7
   6925  fbc7				   .L0217		;  goto __Start_Restart
   6926  fbc7
   6927  fbc7		       4c 7f f4 	      jmp	.__Start_Restart
   6928  fbca
   6929  fbca				   .
   6930  fbca							; 
   6931  fbca
   6932  fbca				   .
   6933  fbca							; 
   6934  fbca
   6935  fbca				   .
   6936  fbca							; 
   6937  fbca
   6938  fbca				   .
   6939  fbca							; 
   6940  fbca
   6941  fbca				   .
   6942  fbca							; 
   6943  fbca
   6944  fbca				   .
   6945  fbca							; 
   6946  fbca
   6947  fbca				   .
   6948  fbca							; 
   6949  fbca
   6950  fbca				   .
   6951  fbca							; 
   6952  fbca
   6953  fbca				   .
   6954  fbca							; 
   6955  fbca
   6956  fbca				   .
   6957  fbca							; 
   6958  fbca
   6959  fbca				   .
   6960  fbca							; 
   6961  fbca
   6962  fbca				   .
   6963  fbca							; 
   6964  fbca
   6965  fbca				   .
   6966  fbca							; 
   6967  fbca
   6968  fbca				   .
   6969  fbca							; 
   6970  fbca
   6971  fbca				   .
   6972  fbca							; 
   6973  fbca
   6974  fbca				   .
   6975  fbca							; 
   6976  fbca
   6977  fbca				   .
   6978  fbca							; 
   6979  fbca
   6980  fbca				   .
   6981  fbca							; 
   6982  fbca
   6983  fbca				   .
   6984  fbca							; 
   6985  fbca
   6986  fbca				   .
   6987  fbca							; 
   6988  fbca
   6989  fbca				   .
   6990  fbca							; 
   6991  fbca
   6992  fbca				   .
   6993  fbca							; 
   6994  fbca
   6995  fbca				   .__Pause_Setup
   6996  fbca							; __Pause_Setup
   6997  fbca
   6998  fbca				   .
   6999  fbca							; 
   7000  fbca
   7001  fbca				   .
   7002  fbca							; 
   7003  fbca
   7004  fbca				   .
   7005  fbca							; 
   7006  fbca
   7007  fbca				   .
   7008  fbca							; 
   7009  fbca
   7010  fbca				   .
   7011  fbca							; 
   7012  fbca
   7013  fbca				   .
   7014  fbca							; 
   7015  fbca
   7016  fbca				   .L0218		;  AUDV0  =  0  :  AUDV1  =  0
   7017  fbca
   7018  fbca		       a9 00		      LDA	#0
   7019  fbcc		       85 19		      STA	AUDV0
   7020  fbce		       85 1a		      STA	AUDV1
   7021  fbd0				   .
   7022  fbd0							; 
   7023  fbd0
   7024  fbd0				   .
   7025  fbd0							; 
   7026  fbd0
   7027  fbd0				   .
   7028  fbd0							; 
   7029  fbd0
   7030  fbd0				   .
   7031  fbd0							; 
   7032  fbd0
   7033  fbd0				   .
   7034  fbd0							; 
   7035  fbd0
   7036  fbd0				   .
   7037  fbd0							; 
   7038  fbd0
   7039  fbd0				   .L0219		;  _Bit1_FireB_Restrainer{1}  =  1
   7040  fbd0
   7041  fbd0		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7042  fbd2		       09 02		      ORA	#2
   7043  fbd4		       85 ec		      STA	_Bit1_FireB_Restrainer
   7044  fbd6				   .
   7045  fbd6							; 
   7046  fbd6
   7047  fbd6				   .
   7048  fbd6							; 
   7049  fbd6
   7050  fbd6				   .
   7051  fbd6							; 
   7052  fbd6
   7053  fbd6				   .
   7054  fbd6							; 
   7055  fbd6
   7056  fbd6				   .
   7057  fbd6							; 
   7058  fbd6
   7059  fbd6				   .
   7060  fbd6							; 
   7061  fbd6
   7062  fbd6				   .L0220		;  _Pause_Counter_Tmp	=  0
   7063  fbd6
   7064  fbd6		       a9 00		      LDA	#0
   7065  fbd8		       85 db		      STA	_Pause_Counter_Tmp
   7066  fbda				   .
   7067  fbda							; 
   7068  fbda
   7069  fbda				   .
   7070  fbda							; 
   7071  fbda
   7072  fbda				   .
   7073  fbda							; 
   7074  fbda
   7075  fbda				   .
   7076  fbda							; 
   7077  fbda
   7078  fbda				   .
   7079  fbda							; 
   7080  fbda
   7081  fbda				   .
   7082  fbda							; 
   7083  fbda
   7084  fbda				   .L0221		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   7085  fbda
   7086  fbda							; complex statement detected
   7087  fbda		       20 c7 f3 	      jsr	randomize
   7088  fbdd		       29 07		      AND	#7
   7089  fbdf		       85 dd		      STA	_Pause_Color_Tmp
   7090  fbe1				   .
   7091  fbe1							; 
   7092  fbe1
   7093  fbe1				   .L0222		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   7094  fbe1
   7095  fbe1		       a5 dd		      LDA	_Pause_Color_Tmp
   7096  fbe3		       85 dc		      STA	_Pause_Mem_Color_Tmp
   7097  fbe5				   .
   7098  fbe5							; 
   7099  fbe5
   7100  fbe5				   .
   7101  fbe5							; 
   7102  fbe5
   7103  fbe5				   .
   7104  fbe5							; 
   7105  fbe5
   7106  fbe5				   .
   7107  fbe5							; 
   7108  fbe5
   7109  fbe5				   .
   7110  fbe5							; 
   7111  fbe5
   7112  fbe5				   .
   7113  fbe5							; 
   7114  fbe5
   7115  fbe5				   .
   7116  fbe5							; 
   7117  fbe5
   7118  fbe5				   .
   7119  fbe5							; 
   7120  fbe5
   7121  fbe5				   .
   7122  fbe5							; 
   7123  fbe5
   7124  fbe5				   .
   7125  fbe5							; 
   7126  fbe5
   7127  fbe5				   .__Pause_Game
   7128  fbe5							; __Pause_Game
   7129  fbe5
   7130  fbe5				   .
   7131  fbe5							; 
   7132  fbe5
   7133  fbe5				   .
   7134  fbe5							; 
   7135  fbe5
   7136  fbe5				   .
   7137  fbe5							; 
   7138  fbe5
   7139  fbe5				   .
   7140  fbe5							; 
   7141  fbe5
   7142  fbe5				   .
   7143  fbe5							; 
   7144  fbe5
   7145  fbe5				   .
   7146  fbe5							; 
   7147  fbe5
   7148  fbe5				   .
   7149  fbe5							; 
   7150  fbe5
   7151  fbe5				   .L0223		;  NUSIZ0  =  $10
   7152  fbe5
   7153  fbe5		       a9 10		      LDA	#$10
   7154  fbe7		       85 04		      STA	NUSIZ0
   7155  fbe9				   .
   7156  fbe9							; 
   7157  fbe9
   7158  fbe9				   .
   7159  fbe9							; 
   7160  fbe9
   7161  fbe9				   .
   7162  fbe9							; 
   7163  fbe9
   7164  fbe9				   .
   7165  fbe9							; 
   7166  fbe9
   7167  fbe9				   .
   7168  fbe9							; 
   7169  fbe9
   7170  fbe9				   .
   7171  fbe9							; 
   7172  fbe9
   7173  fbe9				   .
   7174  fbe9							; 
   7175  fbe9
   7176  fbe9				   .L0224		;  NUSIZ1  =  $05
   7177  fbe9
   7178  fbe9		       a9 05		      LDA	#$05
   7179  fbeb		       85 05		      STA	NUSIZ1
   7180  fbed				   .
   7181  fbed							; 
   7182  fbed
   7183  fbed				   .
   7184  fbed							; 
   7185  fbed
   7186  fbed				   .
   7187  fbed							; 
   7188  fbed
   7189  fbed				   .
   7190  fbed							; 
   7191  fbed
   7192  fbed				   .
   7193  fbed							; 
   7194  fbed
   7195  fbed				   .
   7196  fbed							; 
   7197  fbed
   7198  fbed				   .
   7199  fbed							; 
   7200  fbed
   7201  fbed				   .
   7202  fbed							; 
   7203  fbed
   7204  fbed				   .
   7205  fbed							; 
   7206  fbed
   7207  fbed				   .
   7208  fbed							; 
   7209  fbed
   7210  fbed				   .L0225		;  _Pause_Counter_Tmp	=  _Pause_Counter_Tmp  +  1
   7211  fbed
   7212  fbed		       e6 db		      INC	_Pause_Counter_Tmp
   7213  fbef				   .
   7214  fbef							; 
   7215  fbef
   7216  fbef				   .
   7217  fbef							; 
   7218  fbef
   7219  fbef				   .
   7220  fbef							; 
   7221  fbef
   7222  fbef				   .
   7223  fbef							; 
   7224  fbef
   7225  fbef				   .L0226		;  if _Pause_Counter_Tmp  <  240 then goto __Skip_Pause_Counter
   7226  fbef
   7227  fbef		       a5 db		      LDA	_Pause_Counter_Tmp
   7228  fbf1		       c9 f0		      CMP	#240
   7229  fbf3		       b0 03		      BCS	.skipL0226
   7230  fbf5				   .condpart88
   7231  fbf5		       4c 44 fc 	      jmp	.__Skip_Pause_Counter
   7232  fbf8
   7233  fbf8				   .skipL0226
   7234  fbf8				   .
   7235  fbf8							; 
   7236  fbf8
   7237  fbf8				   .
   7238  fbf8							; 
   7239  fbf8
   7240  fbf8				   .
   7241  fbf8							; 
   7242  fbf8
   7243  fbf8				   .
   7244  fbf8							; 
   7245  fbf8
   7246  fbf8				   .L0227		;  _Pause_Counter_Tmp	=  0
   7247  fbf8
   7248  fbf8		       a9 00		      LDA	#0
   7249  fbfa		       85 db		      STA	_Pause_Counter_Tmp
   7250  fbfc				   .
   7251  fbfc							; 
   7252  fbfc
   7253  fbfc				   .
   7254  fbfc							; 
   7255  fbfc
   7256  fbfc				   .
   7257  fbfc							; 
   7258  fbfc
   7259  fbfc				   .
   7260  fbfc							; 
   7261  fbfc
   7262  fbfc				   .L0228		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   7263  fbfc
   7264  fbfc							; complex statement detected
   7265  fbfc		       20 c7 f3 	      jsr	randomize
   7266  fbff		       29 07		      AND	#7
   7267  fc01		       85 dd		      STA	_Pause_Color_Tmp
   7268  fc03				   .
   7269  fc03							; 
   7270  fc03
   7271  fc03				   .
   7272  fc03							; 
   7273  fc03
   7274  fc03				   .
   7275  fc03							; 
   7276  fc03
   7277  fc03				   .
   7278  fc03							; 
   7279  fc03
   7280  fc03				   .
   7281  fc03							; 
   7282  fc03
   7283  fc03				   .L0229		;  if _Pause_Color_Tmp  =  _Pause_Mem_Color_Tmp then _Pause_Color_Tmp	=  _Pause_Color_Tmp  +	 ( rand & 3 )	+  1  :  if _Pause_Color_Tmp  >  7 then _Pause_Color_Tmp  =  _Pause_Color_Tmp  -  8
   7284  fc03
   7285  fc03		       a5 dd		      LDA	_Pause_Color_Tmp
   7286  fc05		       c5 dc		      CMP	_Pause_Mem_Color_Tmp
   7287  fc07		       d0 20		      BNE	.skipL0229
   7288  fc09				   .condpart89
   7289  fc09							; complex statement detected
   7290  fc09		       a5 dd		      LDA	_Pause_Color_Tmp
   7291  fc0b		       48		      PHA
   7292  fc0c		       20 c7 f3 	      jsr	randomize
   7293  fc0f		       29 03		      AND	#3
   7294  fc11		       ba		      TSX
   7295  fc12		       e8		      INX
   7296  fc13		       9a		      TXS
   7297  fc14		       18		      CLC
   7298  fc15		       75 00		      ADC	$00,x
   7299  fc17		       18		      CLC
   7300  fc18		       69 01		      ADC	#1
   7301  fc1a		       85 dd		      STA	_Pause_Color_Tmp
   7302  fc1c		       a9 07		      LDA	#7
   7303  fc1e		       c5 dd		      CMP	_Pause_Color_Tmp
   7304  fc20		       b0 07		      BCS	.skip89then
   7305  fc22				   .condpart90
   7306  fc22		       a5 dd		      LDA	_Pause_Color_Tmp
   7307  fc24		       38		      SEC
   7308  fc25		       e9 08		      SBC	#8
   7309  fc27		       85 dd		      STA	_Pause_Color_Tmp
   7310  fc29				   .skip89then
   7311  fc29				   .skipL0229
   7312  fc29				   .
   7313  fc29							; 
   7314  fc29
   7315  fc29				   .
   7316  fc29							; 
   7317  fc29
   7318  fc29				   .
   7319  fc29							; 
   7320  fc29
   7321  fc29				   .
   7322  fc29							; 
   7323  fc29
   7324  fc29				   .L0230		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   7325  fc29
   7326  fc29		       a5 dd		      LDA	_Pause_Color_Tmp
   7327  fc2b		       85 dc		      STA	_Pause_Mem_Color_Tmp
   7328  fc2d				   .
   7329  fc2d							; 
   7330  fc2d
   7331  fc2d				   .
   7332  fc2d							; 
   7333  fc2d
   7334  fc2d				   .
   7335  fc2d							; 
   7336  fc2d
   7337  fc2d				   .
   7338  fc2d							; 
   7339  fc2d
   7340  fc2d				   .L0231		;  _Bit2_Pause_Clr_Scheme{2}  =  0
   7341  fc2d
   7342  fc2d		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7343  fc2f		       29 fb		      AND	#251
   7344  fc31		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7345  fc33				   .
   7346  fc33							; 
   7347  fc33
   7348  fc33				   .L0232		;  temp5  =  rand  :  if temp5  <  128 then _Bit2_Pause_Clr_Scheme{2}	=  1
   7349  fc33
   7350  fc33		       20 c7 f3 	      jsr	randomize
   7351  fc36		       85 a0		      STA	temp5
   7352  fc38		       a5 a0		      LDA	temp5
   7353  fc3a		       c9 80		      CMP	#128
   7354  fc3c		       b0 06		      BCS	.skipL0232
   7355  fc3e				   .condpart91
   7356  fc3e		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7357  fc40		       09 04		      ORA	#4
   7358  fc42		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7359  fc44				   .skipL0232
   7360  fc44				   .
   7361  fc44							; 
   7362  fc44
   7363  fc44				   .__Skip_Pause_Counter
   7364  fc44							; __Skip_Pause_Counter
   7365  fc44
   7366  fc44				   .
   7367  fc44							; 
   7368  fc44
   7369  fc44				   .
   7370  fc44							; 
   7371  fc44
   7372  fc44				   .
   7373  fc44							; 
   7374  fc44
   7375  fc44				   .
   7376  fc44							; 
   7377  fc44
   7378  fc44				   .
   7379  fc44							; 
   7380  fc44
   7381  fc44				   .
   7382  fc44							; 
   7383  fc44
   7384  fc44				   .
   7385  fc44							; 
   7386  fc44
   7387  fc44				   .L0233		;  on _Pause_Color_Tmp goto __Ps0 __Ps1 __Ps2 __Ps3 __Ps4 __Ps5 __Ps6 __Ps7
   7388  fc44
   7389  fc44		       a6 dd		      LDX	_Pause_Color_Tmp
   7390  fc46		       bd 4f fc 	      LDA	.L0233jumptablehi,x
   7391  fc49		       48		      PHA
   7392  fc4a		       bd 57 fc 	      LDA	.L0233jumptablelo,x
   7393  fc4d		       48		      PHA
   7394  fc4e		       60		      RTS
   7395  fc4f				   .L0233jumptablehi
   7396  fc4f		       fc		      .byte.b	>(.__Ps0-1)
   7397  fc50		       fc		      .byte.b	>(.__Ps1-1)
   7398  fc51		       fc		      .byte.b	>(.__Ps2-1)
   7399  fc52		       fd		      .byte.b	>(.__Ps3-1)
   7400  fc53		       fd		      .byte.b	>(.__Ps4-1)
   7401  fc54		       fd		      .byte.b	>(.__Ps5-1)
   7402  fc55		       fd		      .byte.b	>(.__Ps6-1)
   7403  fc56		       fd		      .byte.b	>(.__Ps7-1)
   7404  fc57				   .L0233jumptablelo
   7405  fc57		       9b		      .byte.b	<(.__Ps0-1)
   7406  fc58		       ca		      .byte.b	<(.__Ps1-1)
   7407  fc59		       f9		      .byte.b	<(.__Ps2-1)
   7408  fc5a		       28		      .byte.b	<(.__Ps3-1)
   7409  fc5b		       57		      .byte.b	<(.__Ps4-1)
   7410  fc5c		       86		      .byte.b	<(.__Ps5-1)
   7411  fc5d		       b5		      .byte.b	<(.__Ps6-1)
   7412  fc5e		       e4		      .byte.b	<(.__Ps7-1)
   7413  fc5f				   .
   7414  fc5f							; 
   7415  fc5f
   7416  fc5f				   .__Got_Pause_Colors
   7417  fc5f							; __Got_Pause_Colors
   7418  fc5f
   7419  fc5f				   .
   7420  fc5f							; 
   7421  fc5f
   7422  fc5f				   .
   7423  fc5f							; 
   7424  fc5f
   7425  fc5f				   .
   7426  fc5f							; 
   7427  fc5f
   7428  fc5f				   .
   7429  fc5f							; 
   7430  fc5f
   7431  fc5f				   .
   7432  fc5f							; 
   7433  fc5f
   7434  fc5f				   .
   7435  fc5f							; 
   7436  fc5f
   7437  fc5f				   .
   7438  fc5f							; 
   7439  fc5f
   7440  fc5f				   .L0234		;  drawscreen
   7441  fc5f
   7442  fc5f		       20 d5 f3 	      jsr	drawscreen
   7443  fc62				   .
   7444  fc62							; 
   7445  fc62
   7446  fc62				   .
   7447  fc62							; 
   7448  fc62
   7449  fc62				   .
   7450  fc62							; 
   7451  fc62
   7452  fc62				   .
   7453  fc62							; 
   7454  fc62
   7455  fc62				   .
   7456  fc62							; 
   7457  fc62
   7458  fc62				   .
   7459  fc62							; 
   7460  fc62
   7461  fc62				   .
   7462  fc62							; 
   7463  fc62
   7464  fc62				   .
   7465  fc62							; 
   7466  fc62
   7467  fc62				   .
   7468  fc62							; 
   7469  fc62
   7470  fc62				   .
   7471  fc62							; 
   7472  fc62
   7473  fc62				   .
   7474  fc62							; 
   7475  fc62
   7476  fc62				   .L0235		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Pause_Game
   7477  fc62
   7478  fc62		       24 0c		      bit	INPT4
   7479  fc64		       10 09		      BPL	.skipL0235
   7480  fc66				   .condpart92
   7481  fc66		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7482  fc68		       29 fd		      AND	#253
   7483  fc6a		       85 ec		      STA	_Bit1_FireB_Restrainer
   7484  fc6c		       4c e5 fb 	      jmp	.__Pause_Game
   7485  fc6f
   7486  fc6f				   .skipL0235
   7487  fc6f				   .
   7488  fc6f							; 
   7489  fc6f
   7490  fc6f				   .
   7491  fc6f							; 
   7492  fc6f
   7493  fc6f				   .
   7494  fc6f							; 
   7495  fc6f
   7496  fc6f				   .
   7497  fc6f							; 
   7498  fc6f
   7499  fc6f				   .
   7500  fc6f							; 
   7501  fc6f
   7502  fc6f				   .L0236		;  if _Bit1_FireB_Restrainer{1} then goto __Pause_Game
   7503  fc6f
   7504  fc6f		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7505  fc71		       29 02		      AND	#2
   7506  fc73		       f0 03		      BEQ	.skipL0236
   7507  fc75				   .condpart93
   7508  fc75		       4c e5 fb 	      jmp	.__Pause_Game
   7509  fc78
   7510  fc78				   .skipL0236
   7511  fc78				   .
   7512  fc78							; 
   7513  fc78
   7514  fc78				   .
   7515  fc78							; 
   7516  fc78
   7517  fc78				   .
   7518  fc78							; 
   7519  fc78
   7520  fc78				   .
   7521  fc78							; 
   7522  fc78
   7523  fc78				   .L0237		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   7524  fc78
   7525  fc78		       a5 e5		      LDA	_Bit0_BW_Mem
   7526  fc7a		       29 fe		      AND	#254
   7527  fc7c		       85 e5		      STA	_Bit0_BW_Mem
   7528  fc7e		       a9 08		      lda	#8
   7529  fc80		       2c 82 02 	      bit	SWCHB
   7530  fc83		       d0 06		      BNE	.skipL0237
   7531  fc85				   .condpart94
   7532  fc85		       a5 e5		      LDA	_Bit0_BW_Mem
   7533  fc87		       09 01		      ORA	#1
   7534  fc89		       85 e5		      STA	_Bit0_BW_Mem
   7535  fc8b				   .skipL0237
   7536  fc8b				   .
   7537  fc8b							; 
   7538  fc8b
   7539  fc8b				   .
   7540  fc8b							; 
   7541  fc8b
   7542  fc8b				   .
   7543  fc8b							; 
   7544  fc8b
   7545  fc8b				   .
   7546  fc8b							; 
   7547  fc8b
   7548  fc8b				   .
   7549  fc8b							; 
   7550  fc8b
   7551  fc8b				   .
   7552  fc8b							; 
   7553  fc8b
   7554  fc8b				   .
   7555  fc8b							; 
   7556  fc8b
   7557  fc8b				   .
   7558  fc8b							; 
   7559  fc8b
   7560  fc8b				   .
   7561  fc8b							; 
   7562  fc8b
   7563  fc8b				   .
   7564  fc8b							; 
   7565  fc8b
   7566  fc8b				   .
   7567  fc8b							; 
   7568  fc8b
   7569  fc8b				   .
   7570  fc8b							; 
   7571  fc8b
   7572  fc8b				   .
   7573  fc8b							; 
   7574  fc8b
   7575  fc8b				   .
   7576  fc8b							; 
   7577  fc8b
   7578  fc8b				   .
   7579  fc8b							; 
   7580  fc8b
   7581  fc8b				   .
   7582  fc8b							; 
   7583  fc8b
   7584  fc8b				   .
   7585  fc8b							; 
   7586  fc8b
   7587  fc8b				   .
   7588  fc8b							; 
   7589  fc8b
   7590  fc8b				   .
   7591  fc8b							; 
   7592  fc8b
   7593  fc8b				   .
   7594  fc8b							; 
   7595  fc8b
   7596  fc8b				   .
   7597  fc8b							; 
   7598  fc8b
   7599  fc8b				   .
   7600  fc8b							; 
   7601  fc8b
   7602  fc8b				   .
   7603  fc8b							; 
   7604  fc8b
   7605  fc8b				   .
   7606  fc8b							; 
   7607  fc8b
   7608  fc8b				   .__Restore_Game_from_Pause
   7609  fc8b							; __Restore_Game_from_Pause
   7610  fc8b
   7611  fc8b				   .
   7612  fc8b							; 
   7613  fc8b
   7614  fc8b				   .
   7615  fc8b							; 
   7616  fc8b
   7617  fc8b				   .
   7618  fc8b							; 
   7619  fc8b
   7620  fc8b				   .
   7621  fc8b							; 
   7622  fc8b
   7623  fc8b				   .
   7624  fc8b							; 
   7625  fc8b
   7626  fc8b				   .
   7627  fc8b							; 
   7628  fc8b
   7629  fc8b				   .L0238		;  _Bit1_FireB_Restrainer{1}  =  1
   7630  fc8b
   7631  fc8b		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7632  fc8d		       09 02		      ORA	#2
   7633  fc8f		       85 ec		      STA	_Bit1_FireB_Restrainer
   7634  fc91				   .
   7635  fc91							; 
   7636  fc91
   7637  fc91				   .
   7638  fc91							; 
   7639  fc91
   7640  fc91				   .
   7641  fc91							; 
   7642  fc91
   7643  fc91				   .
   7644  fc91							; 
   7645  fc91
   7646  fc91				   .
   7647  fc91							; 
   7648  fc91
   7649  fc91				   .
   7650  fc91							; 
   7651  fc91
   7652  fc91				   .L0239		;  scorecolor	=  $1C	:  pfscorecolor  =  $D2
   7653  fc91
   7654  fc91		       a9 1c		      LDA	#$1C
   7655  fc93		       85 a3		      STA	scorecolor
   7656  fc95		       a9 d2		      LDA	#$D2
   7657  fc97		       85 f4		      STA	pfscorecolor
   7658  fc99				   .
   7659  fc99							; 
   7660  fc99
   7661  fc99				   .
   7662  fc99							; 
   7663  fc99
   7664  fc99				   .L0240		;  goto __Main_Loop
   7665  fc99
   7666  fc99		       4c 20 f6 	      jmp	.__Main_Loop
   7667  fc9c
   7668  fc9c				   .
   7669  fc9c							; 
   7670  fc9c
   7671  fc9c				   .
   7672  fc9c							; 
   7673  fc9c
   7674  fc9c				   .
   7675  fc9c							; 
   7676  fc9c
   7677  fc9c				   .
   7678  fc9c							; 
   7679  fc9c
   7680  fc9c				   .
   7681  fc9c							; 
   7682  fc9c
   7683  fc9c				   .
   7684  fc9c							; 
   7685  fc9c
   7686  fc9c				   .
   7687  fc9c							; 
   7688  fc9c
   7689  fc9c				   .
   7690  fc9c							; 
   7691  fc9c
   7692  fc9c				   .
   7693  fc9c							; 
   7694  fc9c
   7695  fc9c				   .__Ps0
   7696  fc9c							; __Ps0
   7697  fc9c
   7698  fc9c				   .
   7699  fc9c							; 
   7700  fc9c
   7701  fc9c				   .L0241		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps0B
   7702  fc9c
   7703  fc9c		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7704  fc9e		       29 04		      AND	#4
   7705  fca0		       f0 03		      BEQ	.skipL0241
   7706  fca2				   .condpart95
   7707  fca2		       4c b8 fc 	      jmp	.__Ps0B
   7708  fca5
   7709  fca5				   .skipL0241
   7710  fca5				   .
   7711  fca5							; 
   7712  fca5
   7713  fca5				   .L0242		;  COLUPF  =  $0C  :  COLUP0  =  $0C  :  COLUP1  =  $0C  :  pfscorecolor  =  $0C  :  scorecolor  =  $0C
   7714  fca5
   7715  fca5		       a9 0c		      LDA	#$0C
   7716  fca7		       85 08		      STA	COLUPF
   7717  fca9		       85 06		      STA	COLUP0
   7718  fcab		       85 07		      STA	COLUP1
   7719  fcad		       85 f4		      STA	pfscorecolor
   7720  fcaf		       85 a3		      STA	scorecolor
   7721  fcb1				   .
   7722  fcb1							; 
   7723  fcb1
   7724  fcb1				   .L0243		;  COLUBK  =  $0A
   7725  fcb1
   7726  fcb1		       a9 0a		      LDA	#$0A
   7727  fcb3		       85 09		      STA	COLUBK
   7728  fcb5				   .
   7729  fcb5							; 
   7730  fcb5
   7731  fcb5				   .L0244		;  goto __Got_Pause_Colors
   7732  fcb5
   7733  fcb5		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   7734  fcb8
   7735  fcb8				   .
   7736  fcb8							; 
   7737  fcb8
   7738  fcb8				   .
   7739  fcb8							; 
   7740  fcb8
   7741  fcb8				   .
   7742  fcb8							; 
   7743  fcb8
   7744  fcb8				   .
   7745  fcb8							; 
   7746  fcb8
   7747  fcb8				   .
   7748  fcb8							; 
   7749  fcb8
   7750  fcb8				   .
   7751  fcb8							; 
   7752  fcb8
   7753  fcb8				   .
   7754  fcb8							; 
   7755  fcb8
   7756  fcb8				   .__Ps0B
   7757  fcb8							; __Ps0B
   7758  fcb8
   7759  fcb8				   .
   7760  fcb8							; 
   7761  fcb8
   7762  fcb8				   .L0245		;  COLUPF  =  $0A  :  COLUP0  =  $0A  :  COLUP1  =  $0A  :  pfscorecolor  =  $0A  :  scorecolor  =  $0A
   7763  fcb8
   7764  fcb8		       a9 0a		      LDA	#$0A
   7765  fcba		       85 08		      STA	COLUPF
   7766  fcbc		       85 06		      STA	COLUP0
   7767  fcbe		       85 07		      STA	COLUP1
   7768  fcc0		       85 f4		      STA	pfscorecolor
   7769  fcc2		       85 a3		      STA	scorecolor
   7770  fcc4				   .
   7771  fcc4							; 
   7772  fcc4
   7773  fcc4				   .L0246		;  COLUBK  =  $0C
   7774  fcc4
   7775  fcc4		       a9 0c		      LDA	#$0C
   7776  fcc6		       85 09		      STA	COLUBK
   7777  fcc8				   .
   7778  fcc8							; 
   7779  fcc8
   7780  fcc8				   .L0247		;  goto __Got_Pause_Colors
   7781  fcc8
   7782  fcc8		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   7783  fccb
   7784  fccb				   .
   7785  fccb							; 
   7786  fccb
   7787  fccb				   .
   7788  fccb							; 
   7789  fccb
   7790  fccb				   .
   7791  fccb							; 
   7792  fccb
   7793  fccb				   .
   7794  fccb							; 
   7795  fccb
   7796  fccb				   .
   7797  fccb							; 
   7798  fccb
   7799  fccb				   .
   7800  fccb							; 
   7801  fccb
   7802  fccb				   .
   7803  fccb							; 
   7804  fccb
   7805  fccb				   .__Ps1
   7806  fccb							; __Ps1
   7807  fccb
   7808  fccb				   .
   7809  fccb							; 
   7810  fccb
   7811  fccb				   .L0248		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps1B
   7812  fccb
   7813  fccb		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7814  fccd		       29 04		      AND	#4
   7815  fccf		       f0 03		      BEQ	.skipL0248
   7816  fcd1				   .condpart96
   7817  fcd1		       4c e7 fc 	      jmp	.__Ps1B
   7818  fcd4
   7819  fcd4				   .skipL0248
   7820  fcd4				   .
   7821  fcd4							; 
   7822  fcd4
   7823  fcd4				   .L0249		;  COLUPF  =  $3C  :  COLUP0  =  $3C  :  COLUP1  =  $3C  :  pfscorecolor  =  $3C  :  scorecolor  =  $3C
   7824  fcd4
   7825  fcd4		       a9 3c		      LDA	#$3C
   7826  fcd6		       85 08		      STA	COLUPF
   7827  fcd8		       85 06		      STA	COLUP0
   7828  fcda		       85 07		      STA	COLUP1
   7829  fcdc		       85 f4		      STA	pfscorecolor
   7830  fcde		       85 a3		      STA	scorecolor
   7831  fce0				   .
   7832  fce0							; 
   7833  fce0
   7834  fce0				   .L0250		;  COLUBK  =  $3A
   7835  fce0
   7836  fce0		       a9 3a		      LDA	#$3A
   7837  fce2		       85 09		      STA	COLUBK
   7838  fce4				   .
   7839  fce4							; 
   7840  fce4
   7841  fce4				   .L0251		;  goto __Got_Pause_Colors
   7842  fce4
   7843  fce4		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   7844  fce7
   7845  fce7				   .
   7846  fce7							; 
   7847  fce7
   7848  fce7				   .
   7849  fce7							; 
   7850  fce7
   7851  fce7				   .
   7852  fce7							; 
   7853  fce7
   7854  fce7				   .
   7855  fce7							; 
   7856  fce7
   7857  fce7				   .
   7858  fce7							; 
   7859  fce7
   7860  fce7				   .
   7861  fce7							; 
   7862  fce7
   7863  fce7				   .
   7864  fce7							; 
   7865  fce7
   7866  fce7				   .__Ps1B
   7867  fce7							; __Ps1B
   7868  fce7
   7869  fce7				   .
   7870  fce7							; 
   7871  fce7
   7872  fce7				   .L0252		;  COLUPF  =  $3A  :  COLUP0  =  $3A  :  COLUP1  =  $3A  :  pfscorecolor  =  $3A  :  scorecolor  =  $3A
   7873  fce7
   7874  fce7		       a9 3a		      LDA	#$3A
   7875  fce9		       85 08		      STA	COLUPF
   7876  fceb		       85 06		      STA	COLUP0
   7877  fced		       85 07		      STA	COLUP1
   7878  fcef		       85 f4		      STA	pfscorecolor
   7879  fcf1		       85 a3		      STA	scorecolor
   7880  fcf3				   .
   7881  fcf3							; 
   7882  fcf3
   7883  fcf3				   .L0253		;  COLUBK  =  $3C
   7884  fcf3
   7885  fcf3		       a9 3c		      LDA	#$3C
   7886  fcf5		       85 09		      STA	COLUBK
   7887  fcf7				   .
   7888  fcf7							; 
   7889  fcf7
   7890  fcf7				   .L0254		;  goto __Got_Pause_Colors
   7891  fcf7
   7892  fcf7		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   7893  fcfa
   7894  fcfa				   .
   7895  fcfa							; 
   7896  fcfa
   7897  fcfa				   .
   7898  fcfa							; 
   7899  fcfa
   7900  fcfa				   .
   7901  fcfa							; 
   7902  fcfa
   7903  fcfa				   .
   7904  fcfa							; 
   7905  fcfa
   7906  fcfa				   .
   7907  fcfa							; 
   7908  fcfa
   7909  fcfa				   .
   7910  fcfa							; 
   7911  fcfa
   7912  fcfa				   .
   7913  fcfa							; 
   7914  fcfa
   7915  fcfa				   .__Ps2
   7916  fcfa							; __Ps2
   7917  fcfa
   7918  fcfa				   .
   7919  fcfa							; 
   7920  fcfa
   7921  fcfa				   .L0255		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps2B
   7922  fcfa
   7923  fcfa		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7924  fcfc		       29 04		      AND	#4
   7925  fcfe		       f0 03		      BEQ	.skipL0255
   7926  fd00				   .condpart97
   7927  fd00		       4c 16 fd 	      jmp	.__Ps2B
   7928  fd03
   7929  fd03				   .skipL0255
   7930  fd03				   .
   7931  fd03							; 
   7932  fd03
   7933  fd03				   .L0256		;  COLUPF  =  $6C  :  COLUP0  =  $6C  :  COLUP1  =  $6C  :  pfscorecolor  =  $6C  :  scorecolor  =  $6C
   7934  fd03
   7935  fd03		       a9 6c		      LDA	#$6C
   7936  fd05		       85 08		      STA	COLUPF
   7937  fd07		       85 06		      STA	COLUP0
   7938  fd09		       85 07		      STA	COLUP1
   7939  fd0b		       85 f4		      STA	pfscorecolor
   7940  fd0d		       85 a3		      STA	scorecolor
   7941  fd0f				   .
   7942  fd0f							; 
   7943  fd0f
   7944  fd0f				   .L0257		;  COLUBK  =  $6A
   7945  fd0f
   7946  fd0f		       a9 6a		      LDA	#$6A
   7947  fd11		       85 09		      STA	COLUBK
   7948  fd13				   .
   7949  fd13							; 
   7950  fd13
   7951  fd13				   .L0258		;  goto __Got_Pause_Colors
   7952  fd13
   7953  fd13		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   7954  fd16
   7955  fd16				   .
   7956  fd16							; 
   7957  fd16
   7958  fd16				   .
   7959  fd16							; 
   7960  fd16
   7961  fd16				   .
   7962  fd16							; 
   7963  fd16
   7964  fd16				   .
   7965  fd16							; 
   7966  fd16
   7967  fd16				   .
   7968  fd16							; 
   7969  fd16
   7970  fd16				   .
   7971  fd16							; 
   7972  fd16
   7973  fd16				   .
   7974  fd16							; 
   7975  fd16
   7976  fd16				   .__Ps2B
   7977  fd16							; __Ps2B
   7978  fd16
   7979  fd16				   .
   7980  fd16							; 
   7981  fd16
   7982  fd16				   .L0259		;  COLUPF  =  $6A  :  COLUP0  =  $6A  :  COLUP1  =  $6A  :  pfscorecolor  =  $6A  :  scorecolor  =  $6A
   7983  fd16
   7984  fd16		       a9 6a		      LDA	#$6A
   7985  fd18		       85 08		      STA	COLUPF
   7986  fd1a		       85 06		      STA	COLUP0
   7987  fd1c		       85 07		      STA	COLUP1
   7988  fd1e		       85 f4		      STA	pfscorecolor
   7989  fd20		       85 a3		      STA	scorecolor
   7990  fd22				   .
   7991  fd22							; 
   7992  fd22
   7993  fd22				   .
   7994  fd22							; 
   7995  fd22
   7996  fd22				   .
   7997  fd22							; 
   7998  fd22
   7999  fd22				   .L0260		;  COLUBK  =  $6C
   8000  fd22
   8001  fd22		       a9 6c		      LDA	#$6C
   8002  fd24		       85 09		      STA	COLUBK
   8003  fd26				   .
   8004  fd26							; 
   8005  fd26
   8006  fd26				   .L0261		;  goto __Got_Pause_Colors
   8007  fd26
   8008  fd26		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8009  fd29
   8010  fd29				   .
   8011  fd29							; 
   8012  fd29
   8013  fd29				   .
   8014  fd29							; 
   8015  fd29
   8016  fd29				   .
   8017  fd29							; 
   8018  fd29
   8019  fd29				   .
   8020  fd29							; 
   8021  fd29
   8022  fd29				   .
   8023  fd29							; 
   8024  fd29
   8025  fd29				   .
   8026  fd29							; 
   8027  fd29
   8028  fd29				   .
   8029  fd29							; 
   8030  fd29
   8031  fd29				   .__Ps3
   8032  fd29							; __Ps3
   8033  fd29
   8034  fd29				   .
   8035  fd29							; 
   8036  fd29
   8037  fd29				   .L0262		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps3B
   8038  fd29
   8039  fd29		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8040  fd2b		       29 04		      AND	#4
   8041  fd2d		       f0 03		      BEQ	.skipL0262
   8042  fd2f				   .condpart98
   8043  fd2f		       4c 45 fd 	      jmp	.__Ps3B
   8044  fd32
   8045  fd32				   .skipL0262
   8046  fd32				   .
   8047  fd32							; 
   8048  fd32
   8049  fd32				   .L0263		;  COLUPF  =  $9C  :  COLUP0  =  $9C  :  COLUP1  =  $9C  :  pfscorecolor  =  $9C  :  scorecolor  =  $9C
   8050  fd32
   8051  fd32		       a9 9c		      LDA	#$9C
   8052  fd34		       85 08		      STA	COLUPF
   8053  fd36		       85 06		      STA	COLUP0
   8054  fd38		       85 07		      STA	COLUP1
   8055  fd3a		       85 f4		      STA	pfscorecolor
   8056  fd3c		       85 a3		      STA	scorecolor
   8057  fd3e				   .
   8058  fd3e							; 
   8059  fd3e
   8060  fd3e				   .L0264		;  COLUBK  =  $9A
   8061  fd3e
   8062  fd3e		       a9 9a		      LDA	#$9A
   8063  fd40		       85 09		      STA	COLUBK
   8064  fd42				   .
   8065  fd42							; 
   8066  fd42
   8067  fd42				   .L0265		;  goto __Got_Pause_Colors
   8068  fd42
   8069  fd42		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8070  fd45
   8071  fd45				   .
   8072  fd45							; 
   8073  fd45
   8074  fd45				   .
   8075  fd45							; 
   8076  fd45
   8077  fd45				   .
   8078  fd45							; 
   8079  fd45
   8080  fd45				   .
   8081  fd45							; 
   8082  fd45
   8083  fd45				   .
   8084  fd45							; 
   8085  fd45
   8086  fd45				   .
   8087  fd45							; 
   8088  fd45
   8089  fd45				   .
   8090  fd45							; 
   8091  fd45
   8092  fd45				   .__Ps3B
   8093  fd45							; __Ps3B
   8094  fd45
   8095  fd45				   .
   8096  fd45							; 
   8097  fd45
   8098  fd45				   .L0266		;  COLUPF  =  $9A  :  COLUP0  =  $9A  :  COLUP1  =  $9A  :  pfscorecolor  =  $9A  :  scorecolor  =  $9A
   8099  fd45
   8100  fd45		       a9 9a		      LDA	#$9A
   8101  fd47		       85 08		      STA	COLUPF
   8102  fd49		       85 06		      STA	COLUP0
   8103  fd4b		       85 07		      STA	COLUP1
   8104  fd4d		       85 f4		      STA	pfscorecolor
   8105  fd4f		       85 a3		      STA	scorecolor
   8106  fd51				   .
   8107  fd51							; 
   8108  fd51
   8109  fd51				   .L0267		;  COLUBK  =  $9C
   8110  fd51
   8111  fd51		       a9 9c		      LDA	#$9C
   8112  fd53		       85 09		      STA	COLUBK
   8113  fd55				   .
   8114  fd55							; 
   8115  fd55
   8116  fd55				   .L0268		;  goto __Got_Pause_Colors
   8117  fd55
   8118  fd55		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8119  fd58
   8120  fd58				   .
   8121  fd58							; 
   8122  fd58
   8123  fd58				   .
   8124  fd58							; 
   8125  fd58
   8126  fd58				   .
   8127  fd58							; 
   8128  fd58
   8129  fd58				   .
   8130  fd58							; 
   8131  fd58
   8132  fd58				   .
   8133  fd58							; 
   8134  fd58
   8135  fd58				   .
   8136  fd58							; 
   8137  fd58
   8138  fd58				   .
   8139  fd58							; 
   8140  fd58
   8141  fd58				   .__Ps4
   8142  fd58							; __Ps4
   8143  fd58
   8144  fd58				   .
   8145  fd58							; 
   8146  fd58
   8147  fd58				   .L0269		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps4B
   8148  fd58
   8149  fd58		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8150  fd5a		       29 04		      AND	#4
   8151  fd5c		       f0 03		      BEQ	.skipL0269
   8152  fd5e				   .condpart99
   8153  fd5e		       4c 74 fd 	      jmp	.__Ps4B
   8154  fd61
   8155  fd61				   .skipL0269
   8156  fd61				   .
   8157  fd61							; 
   8158  fd61
   8159  fd61				   .L0270		;  COLUPF  =  $CC  :  COLUP0  =  $CC  :  COLUP1  =  $CC  :  pfscorecolor  =  $CC  :  scorecolor  =  $CC
   8160  fd61
   8161  fd61		       a9 cc		      LDA	#$CC
   8162  fd63		       85 08		      STA	COLUPF
   8163  fd65		       85 06		      STA	COLUP0
   8164  fd67		       85 07		      STA	COLUP1
   8165  fd69		       85 f4		      STA	pfscorecolor
   8166  fd6b		       85 a3		      STA	scorecolor
   8167  fd6d				   .
   8168  fd6d							; 
   8169  fd6d
   8170  fd6d				   .L0271		;  COLUBK  =  $CA
   8171  fd6d
   8172  fd6d		       a9 ca		      LDA	#$CA
   8173  fd6f		       85 09		      STA	COLUBK
   8174  fd71				   .
   8175  fd71							; 
   8176  fd71
   8177  fd71				   .L0272		;  goto __Got_Pause_Colors
   8178  fd71
   8179  fd71		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8180  fd74
   8181  fd74				   .
   8182  fd74							; 
   8183  fd74
   8184  fd74				   .
   8185  fd74							; 
   8186  fd74
   8187  fd74				   .
   8188  fd74							; 
   8189  fd74
   8190  fd74				   .
   8191  fd74							; 
   8192  fd74
   8193  fd74				   .
   8194  fd74							; 
   8195  fd74
   8196  fd74				   .
   8197  fd74							; 
   8198  fd74
   8199  fd74				   .
   8200  fd74							; 
   8201  fd74
   8202  fd74				   .__Ps4B
   8203  fd74							; __Ps4B
   8204  fd74
   8205  fd74				   .
   8206  fd74							; 
   8207  fd74
   8208  fd74				   .L0273		;  COLUPF  =  $CA  :  COLUP0  =  $CA  :  COLUP1  =  $CA  :  pfscorecolor  =  $CA  :  scorecolor  =  $CA
   8209  fd74
   8210  fd74		       a9 ca		      LDA	#$CA
   8211  fd76		       85 08		      STA	COLUPF
   8212  fd78		       85 06		      STA	COLUP0
   8213  fd7a		       85 07		      STA	COLUP1
   8214  fd7c		       85 f4		      STA	pfscorecolor
   8215  fd7e		       85 a3		      STA	scorecolor
   8216  fd80				   .
   8217  fd80							; 
   8218  fd80
   8219  fd80				   .L0274		;  COLUBK  =  $CC
   8220  fd80
   8221  fd80		       a9 cc		      LDA	#$CC
   8222  fd82		       85 09		      STA	COLUBK
   8223  fd84				   .
   8224  fd84							; 
   8225  fd84
   8226  fd84				   .L0275		;  goto __Got_Pause_Colors
   8227  fd84
   8228  fd84		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8229  fd87
   8230  fd87				   .
   8231  fd87							; 
   8232  fd87
   8233  fd87				   .
   8234  fd87							; 
   8235  fd87
   8236  fd87				   .
   8237  fd87							; 
   8238  fd87
   8239  fd87				   .
   8240  fd87							; 
   8241  fd87
   8242  fd87				   .
   8243  fd87							; 
   8244  fd87
   8245  fd87				   .
   8246  fd87							; 
   8247  fd87
   8248  fd87				   .
   8249  fd87							; 
   8250  fd87
   8251  fd87				   .__Ps5
   8252  fd87							; __Ps5
   8253  fd87
   8254  fd87				   .
   8255  fd87							; 
   8256  fd87
   8257  fd87				   .L0276		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps5B
   8258  fd87
   8259  fd87		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8260  fd89		       29 04		      AND	#4
   8261  fd8b		       f0 03		      BEQ	.skipL0276
   8262  fd8d				   .condpart100
   8263  fd8d		       4c a3 fd 	      jmp	.__Ps5B
   8264  fd90
   8265  fd90				   .skipL0276
   8266  fd90				   .
   8267  fd90							; 
   8268  fd90
   8269  fd90				   .L0277		;  COLUPF  =  $FC  :  COLUP0  =  $FC  :  COLUP1  =  $FC  :  pfscorecolor  =  $FC  :  scorecolor  =  $FC
   8270  fd90
   8271  fd90		       a9 fc		      LDA	#$FC
   8272  fd92		       85 08		      STA	COLUPF
   8273  fd94		       85 06		      STA	COLUP0
   8274  fd96		       85 07		      STA	COLUP1
   8275  fd98		       85 f4		      STA	pfscorecolor
   8276  fd9a		       85 a3		      STA	scorecolor
   8277  fd9c				   .
   8278  fd9c							; 
   8279  fd9c
   8280  fd9c				   .L0278		;  COLUBK  =  $FA
   8281  fd9c
   8282  fd9c		       a9 fa		      LDA	#$FA
   8283  fd9e		       85 09		      STA	COLUBK
   8284  fda0				   .
   8285  fda0							; 
   8286  fda0
   8287  fda0				   .L0279		;  goto __Got_Pause_Colors
   8288  fda0
   8289  fda0		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8290  fda3
   8291  fda3				   .
   8292  fda3							; 
   8293  fda3
   8294  fda3				   .
   8295  fda3							; 
   8296  fda3
   8297  fda3				   .
   8298  fda3							; 
   8299  fda3
   8300  fda3				   .
   8301  fda3							; 
   8302  fda3
   8303  fda3				   .
   8304  fda3							; 
   8305  fda3
   8306  fda3				   .
   8307  fda3							; 
   8308  fda3
   8309  fda3				   .
   8310  fda3							; 
   8311  fda3
   8312  fda3				   .__Ps5B
   8313  fda3							; __Ps5B
   8314  fda3
   8315  fda3				   .
   8316  fda3							; 
   8317  fda3
   8318  fda3				   .L0280		;  COLUPF  =  $FA  :  COLUP0  =  $FA  :  COLUP1  =  $FA  :  pfscorecolor  =  $FA :  scorecolor  =  $FA
   8319  fda3
   8320  fda3		       a9 fa		      LDA	#$FA
   8321  fda5		       85 08		      STA	COLUPF
   8322  fda7		       85 06		      STA	COLUP0
   8323  fda9		       85 07		      STA	COLUP1
   8324  fdab		       85 f4		      STA	pfscorecolor
   8325  fdad		       85 a3		      STA	scorecolor
   8326  fdaf				   .
   8327  fdaf							; 
   8328  fdaf
   8329  fdaf				   .L0281		;  COLUBK  =  $FC
   8330  fdaf
   8331  fdaf		       a9 fc		      LDA	#$FC
   8332  fdb1		       85 09		      STA	COLUBK
   8333  fdb3				   .
   8334  fdb3							; 
   8335  fdb3
   8336  fdb3				   .L0282		;  goto __Got_Pause_Colors
   8337  fdb3
   8338  fdb3		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8339  fdb6
   8340  fdb6				   .
   8341  fdb6							; 
   8342  fdb6
   8343  fdb6				   .
   8344  fdb6							; 
   8345  fdb6
   8346  fdb6				   .
   8347  fdb6							; 
   8348  fdb6
   8349  fdb6				   .
   8350  fdb6							; 
   8351  fdb6
   8352  fdb6				   .
   8353  fdb6							; 
   8354  fdb6
   8355  fdb6				   .
   8356  fdb6							; 
   8357  fdb6
   8358  fdb6				   .
   8359  fdb6							; 
   8360  fdb6
   8361  fdb6				   .__Ps6
   8362  fdb6							; __Ps6
   8363  fdb6
   8364  fdb6				   .
   8365  fdb6							; 
   8366  fdb6
   8367  fdb6				   .L0283		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps6B
   8368  fdb6
   8369  fdb6		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8370  fdb8		       29 04		      AND	#4
   8371  fdba		       f0 03		      BEQ	.skipL0283
   8372  fdbc				   .condpart101
   8373  fdbc		       4c d2 fd 	      jmp	.__Ps6B
   8374  fdbf
   8375  fdbf				   .skipL0283
   8376  fdbf				   .
   8377  fdbf							; 
   8378  fdbf
   8379  fdbf				   .L0284		;  COLUPF  =  $8C  :  COLUP0  =  $8C  :  COLUP1  =  $8C  :  pfscorecolor  =  $8C  :  scorecolor  =  $8C
   8380  fdbf
   8381  fdbf		       a9 8c		      LDA	#$8C
   8382  fdc1		       85 08		      STA	COLUPF
   8383  fdc3		       85 06		      STA	COLUP0
   8384  fdc5		       85 07		      STA	COLUP1
   8385  fdc7		       85 f4		      STA	pfscorecolor
   8386  fdc9		       85 a3		      STA	scorecolor
   8387  fdcb				   .
   8388  fdcb							; 
   8389  fdcb
   8390  fdcb				   .L0285		;  COLUBK  =  $8A
   8391  fdcb
   8392  fdcb		       a9 8a		      LDA	#$8A
   8393  fdcd		       85 09		      STA	COLUBK
   8394  fdcf				   .
   8395  fdcf							; 
   8396  fdcf
   8397  fdcf				   .L0286		;  goto __Got_Pause_Colors
   8398  fdcf
   8399  fdcf		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8400  fdd2
   8401  fdd2				   .
   8402  fdd2							; 
   8403  fdd2
   8404  fdd2				   .
   8405  fdd2							; 
   8406  fdd2
   8407  fdd2				   .
   8408  fdd2							; 
   8409  fdd2
   8410  fdd2				   .
   8411  fdd2							; 
   8412  fdd2
   8413  fdd2				   .
   8414  fdd2							; 
   8415  fdd2
   8416  fdd2				   .
   8417  fdd2							; 
   8418  fdd2
   8419  fdd2				   .
   8420  fdd2							; 
   8421  fdd2
   8422  fdd2				   .__Ps6B
   8423  fdd2							; __Ps6B
   8424  fdd2
   8425  fdd2				   .
   8426  fdd2							; 
   8427  fdd2
   8428  fdd2				   .L0287		;  COLUPF  =  $8A  :  COLUP0  =  $8A  :  COLUP1  =  $8A  :  pfscorecolor  =  $8A  :  scorecolor  =  $8A
   8429  fdd2
   8430  fdd2		       a9 8a		      LDA	#$8A
   8431  fdd4		       85 08		      STA	COLUPF
   8432  fdd6		       85 06		      STA	COLUP0
   8433  fdd8		       85 07		      STA	COLUP1
   8434  fdda		       85 f4		      STA	pfscorecolor
   8435  fddc		       85 a3		      STA	scorecolor
   8436  fdde				   .
   8437  fdde							; 
   8438  fdde
   8439  fdde				   .L0288		;  COLUBK  =  $8C
   8440  fdde
   8441  fdde		       a9 8c		      LDA	#$8C
   8442  fde0		       85 09		      STA	COLUBK
   8443  fde2				   .
   8444  fde2							; 
   8445  fde2
   8446  fde2				   .L0289		;  goto __Got_Pause_Colors
   8447  fde2
   8448  fde2		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8449  fde5
   8450  fde5				   .
   8451  fde5							; 
   8452  fde5
   8453  fde5				   .
   8454  fde5							; 
   8455  fde5
   8456  fde5				   .
   8457  fde5							; 
   8458  fde5
   8459  fde5				   .
   8460  fde5							; 
   8461  fde5
   8462  fde5				   .
   8463  fde5							; 
   8464  fde5
   8465  fde5				   .
   8466  fde5							; 
   8467  fde5
   8468  fde5				   .
   8469  fde5							; 
   8470  fde5
   8471  fde5				   .__Ps7
   8472  fde5							; __Ps7
   8473  fde5
   8474  fde5				   .
   8475  fde5							; 
   8476  fde5
   8477  fde5				   .L0290		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps7B
   8478  fde5
   8479  fde5		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8480  fde7		       29 04		      AND	#4
   8481  fde9		       f0 03		      BEQ	.skipL0290
   8482  fdeb				   .condpart102
   8483  fdeb		       4c 01 fe 	      jmp	.__Ps7B
   8484  fdee
   8485  fdee				   .skipL0290
   8486  fdee				   .
   8487  fdee							; 
   8488  fdee
   8489  fdee				   .L0291		;  COLUPF  =  $2C  :  COLUP0  =  $2C  :  COLUP1  =  $2C  :  pfscorecolor  =  $2C  :  scorecolor  =  $2C
   8490  fdee
   8491  fdee		       a9 2c		      LDA	#$2C
   8492  fdf0		       85 08		      STA	COLUPF
   8493  fdf2		       85 06		      STA	COLUP0
   8494  fdf4		       85 07		      STA	COLUP1
   8495  fdf6		       85 f4		      STA	pfscorecolor
   8496  fdf8		       85 a3		      STA	scorecolor
   8497  fdfa				   .
   8498  fdfa							; 
   8499  fdfa
   8500  fdfa				   .L0292		;  COLUBK  =  $2A
   8501  fdfa
   8502  fdfa		       a9 2a		      LDA	#$2A
   8503  fdfc		       85 09		      STA	COLUBK
   8504  fdfe				   .
   8505  fdfe							; 
   8506  fdfe
   8507  fdfe				   .L0293		;  goto __Got_Pause_Colors
   8508  fdfe
   8509  fdfe		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8510  fe01
   8511  fe01				   .
   8512  fe01							; 
   8513  fe01
   8514  fe01				   .
   8515  fe01							; 
   8516  fe01
   8517  fe01				   .
   8518  fe01							; 
   8519  fe01
   8520  fe01				   .
   8521  fe01							; 
   8522  fe01
   8523  fe01				   .
   8524  fe01							; 
   8525  fe01
   8526  fe01				   .
   8527  fe01							; 
   8528  fe01
   8529  fe01				   .
   8530  fe01							; 
   8531  fe01
   8532  fe01				   .__Ps7B
   8533  fe01							; __Ps7B
   8534  fe01
   8535  fe01				   .
   8536  fe01							; 
   8537  fe01
   8538  fe01				   .L0294		;  COLUPF  =  $2A  :  COLUP0  =  $2A  :  COLUP1  =  $2A  :  pfscorecolor  =  $2A  :  scorecolor  =  $2A
   8539  fe01
   8540  fe01		       a9 2a		      LDA	#$2A
   8541  fe03		       85 08		      STA	COLUPF
   8542  fe05		       85 06		      STA	COLUP0
   8543  fe07		       85 07		      STA	COLUP1
   8544  fe09		       85 f4		      STA	pfscorecolor
   8545  fe0b		       85 a3		      STA	scorecolor
   8546  fe0d				   .
   8547  fe0d							; 
   8548  fe0d
   8549  fe0d				   .L0295		;  COLUBK  =  $2C
   8550  fe0d
   8551  fe0d		       a9 2c		      LDA	#$2C
   8552  fe0f		       85 09		      STA	COLUBK
   8553  fe11				   .
   8554  fe11							; 
   8555  fe11
   8556  fe11				   .L0296		;  goto __Got_Pause_Colors
   8557  fe11		       4c 5f fc 	      jmp	.__Got_Pause_Colors
   8558  fe14				  -	      if	(<*) > (<(*+7))
   8559  fe14				  -	      repeat	($100-<*)
   8560  fe14				  -	      .byte	0
   8561  fe14				  -	      repend
   8562  fe14					      endif
   8563  fe14				   playerL0170_0
   8564  fe14		       18		      .byte.b	%00011000
   8565  fe15		       38		      .byte.b	%00111000
   8566  fe16		       3c		      .byte.b	%00111100
   8567  fe17		       7e		      .byte.b	%01111110
   8568  fe18		       7e		      .byte.b	%01111110
   8569  fe19		       ff		      .byte.b	%11111111
   8570  fe1a		       7e		      .byte.b	%01111110
   8571  fe1b		       18		      .byte.b	%00011000
   8572  fe1c				  -	      if	(<*) > (<(*+7))
   8573  fe1c				  -	      repeat	($100-<*)
   8574  fe1c				  -	      .byte	0
   8575  fe1c				  -	      repend
   8576  fe1c					      endif
   8577  fe1c				   playerL0172_0
   8578  fe1c		       18		      .byte.b	%00011000
   8579  fe1d		       34		      .byte.b	%00110100
   8580  fe1e		       3c		      .byte.b	%00111100
   8581  fe1f		       7e		      .byte.b	%01111110
   8582  fe20		       7e		      .byte.b	%01111110
   8583  fe21		       ff		      .byte.b	%11111111
   8584  fe22		       7e		      .byte.b	%01111110
   8585  fe23		       18		      .byte.b	%00011000
   8586  fe24				  -	      if	(<*) > (<(*+7))
   8587  fe24				  -	      repeat	($100-<*)
   8588  fe24				  -	      .byte	0
   8589  fe24				  -	      repend
   8590  fe24					      endif
   8591  fe24				   playerL0174_0
   8592  fe24		       18		      .byte.b	%00011000
   8593  fe25		       2c		      .byte.b	%00101100
   8594  fe26		       3c		      .byte.b	%00111100
   8595  fe27		       7e		      .byte.b	%01111110
   8596  fe28		       7e		      .byte.b	%01111110
   8597  fe29		       ff		      .byte.b	%11111111
   8598  fe2a		       7e		      .byte.b	%01111110
   8599  fe2b		       18		      .byte.b	%00011000
   8600  fe2c				  -	      if	(<*) > (<(*+7))
   8601  fe2c				  -	      repeat	($100-<*)
   8602  fe2c				  -	      .byte	0
   8603  fe2c				  -	      repend
   8604  fe2c					      endif
   8605  fe2c				   playerL0176_0
   8606  fe2c		       18		      .byte.b	%00011000
   8607  fe2d		       1c		      .byte.b	%00011100
   8608  fe2e		       3c		      .byte.b	%00111100
   8609  fe2f		       7e		      .byte.b	%01111110
   8610  fe30		       7e		      .byte.b	%01111110
   8611  fe31		       ff		      .byte.b	%11111111
   8612  fe32		       7e		      .byte.b	%01111110
   8613  fe33		       18		      .byte.b	%00011000
   8614  fe34				  -	      if	(<*) > (<(*+3))
   8615  fe34				  -	      repeat	($100-<*)
   8616  fe34				  -	      .byte	0
   8617  fe34				  -	      repend
   8618  fe34					      endif
   8619  fe34				   playerL0178_1
   8620  fe34		       0a		      .byte.b	%00001010
   8621  fe35		       0e		      .byte.b	%00001110
   8622  fe36		       33		      .byte.b	%00110011
   8623  fe37		       74		      .byte.b	%01110100
   8624  fe38				  -	      if	(<*) > (<(*+3))
   8625  fe38				  -	      repeat	($100-<*)
   8626  fe38				  -	      .byte	0
   8627  fe38				  -	      repend
   8628  fe38					      endif
   8629  fe38				   playerL0180_1
   8630  fe38		       09		      .byte.b	%00001001
   8631  fe39		       0e		      .byte.b	%00001110
   8632  fe3a		       33		      .byte.b	%00110011
   8633  fe3b		       74		      .byte.b	%01110100
   8634  fe3c				  -	      if	(<*) > (<(*+3))
   8635  fe3c				  -	      repeat	($100-<*)
   8636  fe3c				  -	      .byte	0
   8637  fe3c				  -	      repend
   8638  fe3c					      endif
   8639  fe3c				   playerL0182_1
   8640  fe3c		       11		      .byte.b	%00010001
   8641  fe3d		       0e		      .byte.b	%00001110
   8642  fe3e		       33		      .byte.b	%00110011
   8643  fe3f		       74		      .byte.b	%01110100
   8644  fe40				  -	      if	(<*) > (<(*+3))
   8645  fe40				  -	      repeat	($100-<*)
   8646  fe40				  -	      .byte	0
   8647  fe40				  -	      repend
   8648  fe40					      endif
   8649  fe40				   playerL0184_1
   8650  fe40		       12		      .byte.b	%00010010
   8651  fe41		       0e		      .byte.b	%00001110
   8652  fe42		       33		      .byte.b	%00110011
   8653  fe43		       74		      .byte.b	%01110100
   8654  fe44					      if	ECHOFIRST
      344 bytes of ROM space left
   8655  fe44					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   8656  fe44					      endif
   8657  fe44		       00 01	   ECHOFIRST  =	1
   8658  fe44
   8659  fe44
   8660  fe44
   8661  fe44							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8662  fe44
   8663  fe44							; feel free to modify the score graphics - just keep each digit 8 high
   8664  fe44							; and keep the conditional compilation stuff intact
   8665  fe44				  -	      ifconst	ROM2k
   8666  fe44				  -	      ORG	$F7AC-8
   8667  fe44					      else
   8668  fe44				  -	      ifconst	bankswitch
   8669  fe44				  -	      if	bankswitch == 8
   8670  fe44				  -	      ORG	$2F94-bscode_length
   8671  fe44				  -	      RORG	$FF94-bscode_length
   8672  fe44				  -	      endif
   8673  fe44				  -	      if	bankswitch == 16
   8674  fe44				  -	      ORG	$4F94-bscode_length
   8675  fe44				  -	      RORG	$FF94-bscode_length
   8676  fe44				  -	      endif
   8677  fe44				  -	      if	bankswitch == 32
   8678  fe44				  -	      ORG	$8F94-bscode_length
   8679  fe44				  -	      RORG	$FF94-bscode_length
   8680  fe44				  -	      endif
   8681  fe44				  -	      if	bankswitch == 64
   8682  fe44				  -	      ORG	$10F80-bscode_length
   8683  fe44				  -	      RORG	$1FF80-bscode_length
   8684  fe44				  -	      endif
   8685  fe44					      else
   8686  ff9c					      ORG	$FF9C
   8687  ff9c					      endif
   8688  ff9c					      endif
   8689  ff9c
   8690  ff9c							; font equates
   8691  ff9c		       00 01	   .21stcentury =	1
   8692  ff9c		       00 02	   alarmclock =	2
   8693  ff9c		       00 03	   handwritten =	3
   8694  ff9c		       00 04	   interrupted =	4
   8695  ff9c		       00 05	   retroputer =	5
   8696  ff9c		       00 06	   whimsey    =	6
   8697  ff9c		       00 07	   tiny       =	7
   8698  ff9c		       00 08	   hex	      =	8
   8699  ff9c
   8700  ff9c				  -	      ifconst	font
   8701  ff9c				  -	      if	font == hex
   8702  ff9c				  -	      ORG	. - 48
   8703  ff9c				  -	      endif
   8704  ff9c					      endif
   8705  ff9c
   8706  ff9c				   scoretable
   8707  ff9c
   8708  ff9c				  -	      ifconst	font
   8709  ff9c				  -	      if	font == .21stcentury
   8710  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   8711  ff9c				  -	      endif
   8712  ff9c				  -	      if	font == alarmclock
   8713  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   8714  ff9c				  -	      endif
   8715  ff9c				  -	      if	font == handwritten
   8716  ff9c				  -	      include	"score_graphics.asm.handwritten"
   8717  ff9c				  -	      endif
   8718  ff9c				  -	      if	font == interrupted
   8719  ff9c				  -	      include	"score_graphics.asm.interrupted"
   8720  ff9c				  -	      endif
   8721  ff9c				  -	      if	font == retroputer
   8722  ff9c				  -	      include	"score_graphics.asm.retroputer"
   8723  ff9c				  -	      endif
   8724  ff9c				  -	      if	font == whimsey
   8725  ff9c				  -	      include	"score_graphics.asm.whimsey"
   8726  ff9c				  -	      endif
   8727  ff9c				  -	      if	font == tiny
   8728  ff9c				  -	      include	"score_graphics.asm.tiny"
   8729  ff9c				  -	      endif
   8730  ff9c				  -	      if	font == hex
   8731  ff9c				  -	      include	"score_graphics.asm.hex"
   8732  ff9c				  -	      endif
   8733  ff9c					      else		; default font
   8734  ff9c
   8735  ff9c		       3c		      .byte.b	%00111100
   8736  ff9d		       66		      .byte.b	%01100110
   8737  ff9e		       66		      .byte.b	%01100110
   8738  ff9f		       66		      .byte.b	%01100110
   8739  ffa0		       66		      .byte.b	%01100110
   8740  ffa1		       66		      .byte.b	%01100110
   8741  ffa2		       66		      .byte.b	%01100110
   8742  ffa3		       3c		      .byte.b	%00111100
   8743  ffa4
   8744  ffa4		       7e		      .byte.b	%01111110
   8745  ffa5		       18		      .byte.b	%00011000
   8746  ffa6		       18		      .byte.b	%00011000
   8747  ffa7		       18		      .byte.b	%00011000
   8748  ffa8		       18		      .byte.b	%00011000
   8749  ffa9		       38		      .byte.b	%00111000
   8750  ffaa		       18		      .byte.b	%00011000
   8751  ffab		       08		      .byte.b	%00001000
   8752  ffac
   8753  ffac		       7e		      .byte.b	%01111110
   8754  ffad		       60		      .byte.b	%01100000
   8755  ffae		       60		      .byte.b	%01100000
   8756  ffaf		       3c		      .byte.b	%00111100
   8757  ffb0		       06		      .byte.b	%00000110
   8758  ffb1		       06		      .byte.b	%00000110
   8759  ffb2		       46		      .byte.b	%01000110
   8760  ffb3		       3c		      .byte.b	%00111100
   8761  ffb4
   8762  ffb4		       3c		      .byte.b	%00111100
   8763  ffb5		       46		      .byte.b	%01000110
   8764  ffb6		       06		      .byte.b	%00000110
   8765  ffb7		       06		      .byte.b	%00000110
   8766  ffb8		       1c		      .byte.b	%00011100
   8767  ffb9		       06		      .byte.b	%00000110
   8768  ffba		       46		      .byte.b	%01000110
   8769  ffbb		       3c		      .byte.b	%00111100
   8770  ffbc
   8771  ffbc		       0c		      .byte.b	%00001100
   8772  ffbd		       0c		      .byte.b	%00001100
   8773  ffbe		       7e		      .byte.b	%01111110
   8774  ffbf		       4c		      .byte.b	%01001100
   8775  ffc0		       4c		      .byte.b	%01001100
   8776  ffc1		       2c		      .byte.b	%00101100
   8777  ffc2		       1c		      .byte.b	%00011100
   8778  ffc3		       0c		      .byte.b	%00001100
   8779  ffc4
   8780  ffc4		       3c		      .byte.b	%00111100
   8781  ffc5		       46		      .byte.b	%01000110
   8782  ffc6		       06		      .byte.b	%00000110
   8783  ffc7		       06		      .byte.b	%00000110
   8784  ffc8		       3c		      .byte.b	%00111100
   8785  ffc9		       60		      .byte.b	%01100000
   8786  ffca		       60		      .byte.b	%01100000
   8787  ffcb		       7e		      .byte.b	%01111110
   8788  ffcc
   8789  ffcc		       3c		      .byte.b	%00111100
   8790  ffcd		       66		      .byte.b	%01100110
   8791  ffce		       66		      .byte.b	%01100110
   8792  ffcf		       66		      .byte.b	%01100110
   8793  ffd0		       7c		      .byte.b	%01111100
   8794  ffd1		       60		      .byte.b	%01100000
   8795  ffd2		       62		      .byte.b	%01100010
   8796  ffd3		       3c		      .byte.b	%00111100
   8797  ffd4
   8798  ffd4		       30		      .byte.b	%00110000
   8799  ffd5		       30		      .byte.b	%00110000
   8800  ffd6		       30		      .byte.b	%00110000
   8801  ffd7		       18		      .byte.b	%00011000
   8802  ffd8		       0c		      .byte.b	%00001100
   8803  ffd9		       06		      .byte.b	%00000110
   8804  ffda		       42		      .byte.b	%01000010
   8805  ffdb		       3e		      .byte.b	%00111110
   8806  ffdc
   8807  ffdc		       3c		      .byte.b	%00111100
   8808  ffdd		       66		      .byte.b	%01100110
   8809  ffde		       66		      .byte.b	%01100110
   8810  ffdf		       66		      .byte.b	%01100110
   8811  ffe0		       3c		      .byte.b	%00111100
   8812  ffe1		       66		      .byte.b	%01100110
   8813  ffe2		       66		      .byte.b	%01100110
   8814  ffe3		       3c		      .byte.b	%00111100
   8815  ffe4
   8816  ffe4		       3c		      .byte.b	%00111100
   8817  ffe5		       46		      .byte.b	%01000110
   8818  ffe6		       06		      .byte.b	%00000110
   8819  ffe7		       3e		      .byte.b	%00111110
   8820  ffe8		       66		      .byte.b	%01100110
   8821  ffe9		       66		      .byte.b	%01100110
   8822  ffea		       66		      .byte.b	%01100110
   8823  ffeb		       3c		      .byte.b	%00111100
   8824  ffec
   8825  ffec					      ifnconst	DPC_kernel_options
   8826  ffec
   8827  ffec		       00		      .byte.b	%00000000
   8828  ffed		       00		      .byte.b	%00000000
   8829  ffee		       00		      .byte.b	%00000000
   8830  ffef		       00		      .byte.b	%00000000
   8831  fff0		       00		      .byte.b	%00000000
   8832  fff1		       00		      .byte.b	%00000000
   8833  fff2		       00		      .byte.b	%00000000
   8834  fff3		       00		      .byte.b	%00000000
   8835  fff4
   8836  fff4					      endif
   8837  fff4
   8838  fff4					      endif
   8839  fff4
   8840  fff4				  -	      ifconst	ROM2k
   8841  fff4				  -	      ORG	$F7FC
   8842  fff4					      else
   8843  fff4				  -	      ifconst	bankswitch
   8844  fff4				  -	      if	bankswitch == 8
   8845  fff4				  -	      ORG	$2FF4-bscode_length
   8846  fff4				  -	      RORG	$FFF4-bscode_length
   8847  fff4				  -	      endif
   8848  fff4				  -	      if	bankswitch == 16
   8849  fff4				  -	      ORG	$4FF4-bscode_length
   8850  fff4				  -	      RORG	$FFF4-bscode_length
   8851  fff4				  -	      endif
   8852  fff4				  -	      if	bankswitch == 32
   8853  fff4				  -	      ORG	$8FF4-bscode_length
   8854  fff4				  -	      RORG	$FFF4-bscode_length
   8855  fff4				  -	      endif
   8856  fff4				  -	      if	bankswitch == 64
   8857  fff4				  -	      ORG	$10FE0-bscode_length
   8858  fff4				  -	      RORG	$1FFE0-bscode_length
   8859  fff4				  -	      endif
   8860  fff4					      else
   8861  fffc					      ORG	$FFFC
   8862  fffc					      endif
   8863  fffc					      endif
   8864  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8865  fffc
   8866  fffc				  -	      ifconst	bankswitch
   8867  fffc				  -	      if	bankswitch == 8
   8868  fffc				  -	      ORG	$2FFC
   8869  fffc				  -	      RORG	$FFFC
   8870  fffc				  -	      endif
   8871  fffc				  -	      if	bankswitch == 16
   8872  fffc				  -	      ORG	$4FFC
   8873  fffc				  -	      RORG	$FFFC
   8874  fffc				  -	      endif
   8875  fffc				  -	      if	bankswitch == 32
   8876  fffc				  -	      ORG	$8FFC
   8877  fffc				  -	      RORG	$FFFC
   8878  fffc				  -	      endif
   8879  fffc				  -	      if	bankswitch == 64
   8880  fffc				  -	      ORG	$10FF0
   8881  fffc				  -	      RORG	$1FFF0
   8882  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   8883  fffc				  -	      ORG	$10FF8
   8884  fffc				  -	      RORG	$1FFF8
   8885  fffc				  -	      ifconst	superchip
   8886  fffc				  -	      .byte	"E","F","S","C"
   8887  fffc				  -	      else
   8888  fffc				  -	      .byte	"E","F","E","F"
   8889  fffc				  -	      endif
   8890  fffc				  -	      ORG	$10FFC
   8891  fffc				  -	      RORG	$1FFFC
   8892  fffc				  -	      endif
   8893  fffc					      else
   8894  fffc				  -	      ifconst	ROM2k
   8895  fffc				  -	      ORG	$F7FC
   8896  fffc					      else
   8897  fffc					      ORG	$FFFC
   8898  fffc					      endif
   8899  fffc					      endif
   8900  fffc		       00 f0		      .word.w	(start & $ffff)
   8901  fffe		       00 f0		      .word.w	(start & $ffff)

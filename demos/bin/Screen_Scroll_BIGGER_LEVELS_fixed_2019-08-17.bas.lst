------- FILE e:\Documents\bB\batariBasicGames\demos\Screen_Scroll_BIGGER_LEVELS_fixed_2019-08-17.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\Screen_Scroll_BIGGER_LEVELS_fixed_2019-08-17.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\Screen_Scroll_BIGGER_LEVELS_fixed_2019-08-17.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		05 00	    reallybigtable_length =	.skipL0105-reallybigtable
      4  10000 ????
      5  10000 ????		00 f8	    _before_first_page =	# ( > reallybigtable - 1 )
      6  10000 ????
      7  10000 ????		00 fe	    _after_last_page =	# ( > reallybigtable + 5 )
      8  10000 ????
      9  10000 ????		00 9c	    Index2     =	temp1
     10  10000 ????
     11  10000 ????		00 d8	    Page2      =	DataPtr2 + 1
     12  10000 ????
     13  10000 ????		00 d7	    DataPtr2   =	d
     14  10000 ????		00 d6	    Index      =	c
     15  10000 ????
     16  10000 ????		00 d5	    Page       =	DataPtr + 1
     17  10000 ????
     18  10000 ????		00 d4	    DataPtr    =	a
     19  10000 ????		00 95	    _sc3       =	score + 2
     20  10000 ????
     21  10000 ????		00 94	    _sc2       =	score + 1
     22  10000 ????
     23  10000 ????		00 93	    _sc1       =	score
     24  10000 ????
     25  10000 ????		00 01	    scorefade  =	1
     26  10000 ????
     27  10000 ????		00 01	    PFcolors   =	1
     28  10000 ????		00 01	    no_blank_lines =	1
     29  10000 ????		00 2b	    vblank_time =	43
     30  10000 ????		00 25	    overscan_time =	37
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE e:\Documents\bB\batariBasicGames\demos\Screen_Scroll_BIGGER_LEVELS_fixed_2019-08-17.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		05 00	    reallybigtable_length =	.skipL0105-reallybigtable
      4  10000 ????
      5  10000 ????		00 f8	    _before_first_page =	# ( > reallybigtable - 1 )
      6  10000 ????
      7  10000 ????		00 fe	    _after_last_page =	# ( > reallybigtable + 5 )
      8  10000 ????
      9  10000 ????		00 9c	    Index2     =	temp1
     10  10000 ????
     11  10000 ????		00 d8	    Page2      =	DataPtr2 + 1
     12  10000 ????
     13  10000 ????		00 d7	    DataPtr2   =	d
     14  10000 ????		00 d6	    Index      =	c
     15  10000 ????
     16  10000 ????		00 d5	    Page       =	DataPtr + 1
     17  10000 ????
     18  10000 ????		00 d4	    DataPtr    =	a
     19  10000 ????		00 95	    _sc3       =	score + 2
     20  10000 ????
     21  10000 ????		00 94	    _sc2       =	score + 1
     22  10000 ????
     23  10000 ????		00 93	    _sc1       =	score
     24  10000 ????
     25  10000 ????		00 01	    scorefade  =	1
     26  10000 ????
     27  10000 ????		00 01	    PFcolors   =	1
     28  10000 ????		00 01	    no_blank_lines =	1
     29  10000 ????		00 2b	    vblank_time =	43
     30  10000 ????		00 25	    overscan_time =	37
------- FILE e:\Documents\bB\batariBasicGames\demos\Screen_Scroll_BIGGER_LEVELS_fixed_2019-08-17.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 6d f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 0c		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc					      ifconst	PFcolors
    306  f0dc		       8a		      txa
    307  f0dd		       a8		      tay
    308  f0de		       b1 f0		      lda	(pfcolortable),y
    309  f0e0					      ifnconst	backgroundchange
    310  f0e0		       85 08		      sta	COLUPF
    311  f0e2				  -	      else
    312  f0e2				  -	      sta	COLUBK
    313  f0e2					      endif
    314  f0e2		       4c 8f f0 	      jmp	continuekernel
    315  f0e5				  -	      else
    316  f0e5				  -	      ifconst	kernelmacrodef
    317  f0e5				  -	      kernelmacro
    318  f0e5				  -	      else
    319  f0e5				  -	      sleep	12
    320  f0e5				  -	      endif
    321  f0e5					      endif
    322  f0e5				  -	      else
    323  f0e5				  -	      lda	(player0color),y
    324  f0e5				  -	      sta	player0colorstore
    325  f0e5				  -	      sleep	4
    326  f0e5					      endif
    327  f0e5		       4c 8f f0 	      jmp	continuekernel
    328  f0e8					      endif
    329  f0e8				   altkernel2
    330  f0e8		       8a		      txa
    331  f0e9					      ifnconst	vertical_reflect
    332  f0e9		       cb fc		      sbx	#256-pfwidth
    333  f0eb				  -	      else
    334  f0eb				  -	      sbx	#256-pfwidth/2
    335  f0eb					      endif
    336  f0eb		       30 24		      bmi	lastkernelline
    337  f0ed				  -	      ifconst	pfrowheight
    338  f0ed				  -	      lda	#pfrowheight
    339  f0ed					      else
    340  f0ed					      ifnconst	pfres
    341  f0ed		       a9 08		      lda	#8
    342  f0ef				  -	      else
    343  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ef					      endif
    345  f0ef					      endif
    346  f0ef		       85 9c		      sta	temp1
    347  f0f1		       4c 8f f0 	      jmp	continuekernel
    348  f0f4					      endif
    349  f0f4
    350  f0f4				   altkernel
    351  f0f4
    352  f0f4				  -	      ifconst	PFmaskvalue
    353  f0f4				  -	      lda	#PFmaskvalue
    354  f0f4					      else
    355  f0f4		       a9 00		      lda	#0
    356  f0f6					      endif
    357  f0f6		       85 0e		      sta	PF1L
    358  f0f8		       85 0f		      sta	PF2
    359  f0fa
    360  f0fa
    361  f0fa							;sleep 3
    362  f0fa
    363  f0fa							;28 cycles to fix things
    364  f0fa							;minus 11=17
    365  f0fa
    366  f0fa							; lax temp4
    367  f0fa							; clc
    368  f0fa		       8a		      txa
    369  f0fb					      ifnconst	vertical_reflect
    370  f0fb		       cb fc		      sbx	#256-pfwidth
    371  f0fd				  -	      else
    372  f0fd				  -	      sbx	#256-pfwidth/2
    373  f0fd					      endif
    374  f0fd
    375  f0fd		       30 12		      bmi	lastkernelline
    376  f0ff
    377  f0ff				  -	      ifconst	PFcolorandheight
    378  f0ff				  -	      ifconst	pfres
    379  f0ff				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ff				  -	      else
    381  f0ff				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ff				  -	      endif
    383  f0ff				  -	      ifnconst	backgroundchange
    384  f0ff				  -	      sty	COLUPF
    385  f0ff				  -	      else
    386  f0ff				  -	      sty	COLUBK
    387  f0ff				  -	      endif
    388  f0ff				  -	      ifconst	pfres
    389  f0ff				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ff				  -	      else
    391  f0ff				  -	      lda	playfieldcolorandheight-88,x
    392  f0ff				  -	      endif
    393  f0ff				  -	      sta.w	temp1
    394  f0ff					      endif
    395  f0ff				  -	      ifconst	PFheights
    396  f0ff				  -	      lsr
    397  f0ff				  -	      lsr
    398  f0ff				  -	      tay
    399  f0ff				  -	      lda	(pfheighttable),y
    400  f0ff				  -	      sta.w	temp1
    401  f0ff					      endif
    402  f0ff					      ifconst	PFcolors
    403  f0ff		       a8		      tay
    404  f100		       b1 f0		      lda	(pfcolortable),y
    405  f102					      ifnconst	backgroundchange
    406  f102		       85 08		      sta	COLUPF
    407  f104				  -	      else
    408  f104				  -	      sta	COLUBK
    409  f104					      endif
    410  f104				  -	      ifconst	pfrowheight
    411  f104				  -	      lda	#pfrowheight
    412  f104					      else
    413  f104					      ifnconst	pfres
    414  f104		       a9 08		      lda	#8
    415  f106				  -	      else
    416  f106				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f106					      endif
    418  f106					      endif
    419  f106		       85 9c		      sta	temp1
    420  f108					      endif
    421  f108					      ifnconst	PFcolorandheight
    422  f108				  -	      ifnconst	PFcolors
    423  f108				  -	      ifnconst	PFheights
    424  f108				  -	      ifnconst	no_blank_lines
    425  f108				  -			; read paddle 0
    426  f108				  -			; lo-res paddle read
    427  f108				  -			; bit INPT0
    428  f108				  -			; bmi paddleskipread
    429  f108				  -			; inc paddle0
    430  f108				  -			;donepaddleskip
    431  f108				  -	      sleep	10
    432  f108				  -	      ifconst	pfrowheight
    433  f108				  -	      lda	#pfrowheight
    434  f108				  -	      else
    435  f108				  -	      ifnconst	pfres
    436  f108				  -	      lda	#8
    437  f108				  -	      else
    438  f108				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f108				  -	      endif
    440  f108				  -	      endif
    441  f108				  -	      sta	temp1
    442  f108				  -	      endif
    443  f108				  -	      endif
    444  f108					      endif
    445  f108					      endif
    446  f108
    447  f108
    448  f108		       a5 92		      lda	ballheight
    449  f10a		       c7 89		      dcp	bally
    450  f10c		       e5 9f		      sbc	temp4
    451  f10e
    452  f10e
    453  f10e		       4c a6 f0 	      jmp	goback
    454  f111
    455  f111
    456  f111				  -	      ifnconst	no_blank_lines
    457  f111				  -lastkernelline
    458  f111				  -	      ifnconst	PFcolors
    459  f111				  -	      sleep	10
    460  f111				  -	      else
    461  f111				  -	      ldy	#124
    462  f111				  -	      lda	(pfcolortable),y
    463  f111				  -	      sta	COLUPF
    464  f111				  -	      endif
    465  f111				  -
    466  f111				  -	      ifconst	PFheights
    467  f111				  -	      ldx	#1
    468  f111				  -			;sleep 4
    469  f111				  -	      sleep	3	; this was over 1 cycle
    470  f111				  -	      else
    471  f111				  -	      ldx	playfieldpos
    472  f111				  -			;sleep 3
    473  f111				  -	      sleep	2	; this was over 1 cycle
    474  f111				  -	      endif
    475  f111				  -
    476  f111				  -	      jmp	enterlastkernel
    477  f111				  -
    478  f111					      else
    479  f111				   lastkernelline
    480  f111
    481  f111				  -	      ifconst	PFheights
    482  f111				  -	      ldx	#1
    483  f111				  -			;sleep 5
    484  f111				  -	      sleep	4	; this was over 1 cycle
    485  f111					      else
    486  f111		       a6 ef		      ldx	playfieldpos
    487  f113							;sleep 4
      0  f113					      sleep	3	; this was over 1 cycle
      1  f113				   .CYCLES    SET	3
      2  f113
      3  f113				  -	      IF	.CYCLES < 2
      4  f113				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f113				  -	      ERR
      6  f113					      ENDIF
      7  f113
      8  f113					      IF	.CYCLES & 1
      9  f113					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f113		       04 00		      nop	0
     11  f115				  -	      ELSE
     12  f115				  -	      bit	VSYNC
     13  f115					      ENDIF
     14  f115				   .CYCLES    SET	.CYCLES - 3
     15  f115					      ENDIF
     16  f115
     17  f115				  -	      REPEAT	.CYCLES / 2
     18  f115				  -	      nop
     19  f115					      REPEND
    489  f115					      endif
    490  f115
    491  f115		       e0 00		      cpx	#0
    492  f117		       d0 0a		      bne	.enterfromNBL
    493  f119		       4c 84 f1 	      jmp	no_blank_lines_bailout
    494  f11c					      endif
    495  f11c
    496  f11c				  -	      if	((<*)>$d5)
    497  f11c				  -	      align	256
    498  f11c					      endif
    499  f11c							; this is a kludge to prevent page wrapping - fix!!!
    500  f11c
    501  f11c				   .skipDrawlastP1
    502  f11c		       a9 00		      lda	#0
    503  f11e		       a8		      tay		; added so we don't cross a page
    504  f11f		       4c 49 f1 	      jmp	.continuelastP1
    505  f122
    506  f122				   .endkerloop		; enter at cycle 59??
    507  f122
    508  f122		       ea		      nop
    509  f123
    510  f123				   .enterfromNBL
    511  f123				  -	      ifconst	pfres
    512  f123				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f123				  -	      sty	PF1L	;3
    514  f123				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f123				  -	      sty	PF2L	;3
    516  f123				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f123				  -	      sty	PF1R	; possibly too early?
    518  f123				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f123				  -	      sty	PF2R	;3
    520  f123					      else
    521  f123		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f126		       84 0e		      sty	PF1L	;3
    523  f128		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f12b		       84 0f		      sty	PF2L	;3
    525  f12d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f130		       84 0e		      sty	PF1R	; possibly too early?
    527  f132		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f135		       84 0f		      sty	PF2R	;3
    529  f137					      endif
    530  f137
    531  f137				   enterlastkernel
    532  f137		       a5 92		      lda	ballheight
    533  f139
    534  f139							; tya
    535  f139		       c7 89		      dcp	bally
    536  f13b							; sleep 4
    537  f13b
    538  f13b							; sbc stack3
    539  f13b		       2a		      rol
    540  f13c		       2a		      rol
    541  f13d		       85 1f		      sta	ENABL
    542  f13f
    543  f13f		       a5 8f		      lda	player1height	;3
    544  f141		       c7 86		      dcp	player1y	;5
    545  f143		       90 d7		      bcc	.skipDrawlastP1
    546  f145		       a4 86		      ldy	player1y	;3
    547  f147		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f149							; so it doesn't cross a page boundary!
    549  f149
    550  f149				   .continuelastP1
    551  f149		       85 1c		      sta	GRP1	;3
    552  f14b
    553  f14b					      ifnconst	player1colors
    554  f14b		       a5 87		      lda	missile1height	;3
    555  f14d		       c7 88		      dcp	missile1y	;5
    556  f14f				  -	      else
    557  f14f				  -	      lda	(player1color),y
    558  f14f				  -	      sta	COLUP1
    559  f14f					      endif
    560  f14f
    561  f14f		       ca		      dex
    562  f150							;dec temp4 ; might try putting this above PF writes
    563  f150		       f0 34		      beq	endkernel
    564  f152
    565  f152
    566  f152				  -	      ifconst	pfres
    567  f152				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f152				  -	      sty	PF1L	;3
    569  f152				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f152				  -	      sty	PF2L	;3
    571  f152				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f152				  -	      sty	PF1R	; possibly too early?
    573  f152				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f152				  -	      sty	PF2R	;3
    575  f152					      else
    576  f152		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f155		       84 0e		      sty	PF1L	;3
    578  f157		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f15a		       84 0f		      sty	PF2L	;3
    580  f15c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f15f		       84 0e		      sty	PF1R	; possibly too early?
    582  f161		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f164		       84 0f		      sty	PF2R	;3
    584  f166					      endif
    585  f166
    586  f166					      ifnconst	player1colors
    587  f166		       2a		      rol		;2
    588  f167		       2a		      rol		;2
    589  f168		       85 1e		      sta	ENAM1	;3
    590  f16a				  -	      else
    591  f16a				  -	      ifnconst	playercolors
    592  f16a				  -	      sleep	7
    593  f16a				  -	      else
    594  f16a				  -	      lda.w	player0colorstore
    595  f16a				  -	      sta	COLUP0
    596  f16a				  -	      endif
    597  f16a					      endif
    598  f16a
    599  f16a		       ad 8e 00 	      lda.w	player0height
    600  f16d		       c7 85		      dcp	player0y
    601  f16f		       90 0d		      bcc	.skipDrawlastP0
    602  f171		       a4 85		      ldy	player0y
    603  f173		       b1 8a		      lda	(player0pointer),y
    604  f175				   .continuelastP0
    605  f175		       85 1b		      sta	GRP0
    606  f177
    607  f177
    608  f177
    609  f177				  -	      ifnconst	no_blank_lines
    610  f177				  -	      lda	missile0height	;3
    611  f177				  -	      dcp	missile0y	;5
    612  f177				  -	      sbc	stack1
    613  f177				  -	      sta	ENAM0	;3
    614  f177				  -	      jmp	.endkerloop
    615  f177					      else
    616  f177				  -	      ifconst	readpaddle
    617  f177				  -	      ldy	currentpaddle
    618  f177				  -	      lda	INPT0,y
    619  f177				  -	      bpl	noreadpaddle2
    620  f177				  -	      inc	paddle
    621  f177				  -	      jmp	.endkerloop
    622  f177				  -noreadpaddle2
    623  f177				  -	      sleep	4
    624  f177				  -	      jmp	.endkerloop
    625  f177					      else		; no_blank_lines and no paddle reading
    626  f177		       68		      pla
    627  f178		       48		      pha		; 14 cycles in 4 bytes
    628  f179		       68		      pla
    629  f17a		       48		      pha
    630  f17b							; sleep 14
    631  f17b		       4c 22 f1 	      jmp	.endkerloop
    632  f17e					      endif
    633  f17e					      endif
    634  f17e
    635  f17e
    636  f17e							; ifconst donepaddleskip
    637  f17e							;paddleskipread
    638  f17e							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f17e							; plus we get a lo-res paddle read
    640  f17e							; bmi donepaddleskip
    641  f17e							; endif
    642  f17e
    643  f17e				   .skipDrawlastP0
    644  f17e		       a9 00		      lda	#0
    645  f180		       a8		      tay
    646  f181		       4c 75 f1 	      jmp	.continuelastP0
    647  f184
    648  f184					      ifconst	no_blank_lines
    649  f184				   no_blank_lines_bailout
    650  f184		       a2 00		      ldx	#0
    651  f186					      endif
    652  f186
    653  f186				   endkernel
    654  f186							; 6 digit score routine
    655  f186		       86 0e		      stx	PF1
    656  f188		       86 0f		      stx	PF2
    657  f18a		       86 0d		      stx	PF0
    658  f18c		       18		      clc
    659  f18d
    660  f18d				  -	      ifconst	pfrowheight
    661  f18d				  -	      lda	#pfrowheight+2
    662  f18d					      else
    663  f18d					      ifnconst	pfres
    664  f18d		       a9 0a		      lda	#10
    665  f18f				  -	      else
    666  f18f				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f18f					      endif
    668  f18f					      endif
    669  f18f
    670  f18f		       e5 ef		      sbc	playfieldpos
    671  f191		       85 ef		      sta	playfieldpos
    672  f193		       8a		      txa
    673  f194
    674  f194				  -	      ifconst	shakescreen
    675  f194				  -	      bit	shakescreen
    676  f194				  -	      bmi	noshakescreen2
    677  f194				  -	      ldx	#$3D
    678  f194				  -noshakescreen2
    679  f194					      endif
    680  f194
    681  f194		       95 02		      sta	WSYNC,x
    682  f196
    683  f196							; STA WSYNC ;first one, need one more
    684  f196		       85 0b		      sta	REFP0
    685  f198		       85 0c		      sta	REFP1
    686  f19a		       85 1b		      STA	GRP0
    687  f19c		       85 1c		      STA	GRP1
    688  f19e							; STA PF1
    689  f19e							; STA PF2
    690  f19e		       85 2b		      sta	HMCLR
    691  f1a0		       85 1d		      sta	ENAM0
    692  f1a2		       85 1e		      sta	ENAM1
    693  f1a4		       85 1f		      sta	ENABL
    694  f1a6
    695  f1a6		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f1a8		       85 85		      sta	player0y
    697  f1aa		       a5 9e		      lda	temp3
    698  f1ac		       85 86		      sta	player1y
    699  f1ae					      ifnconst	player1colors
    700  f1ae		       a5 a1		      lda	temp6
    701  f1b0		       85 88		      sta	missile1y
    702  f1b2					      endif
    703  f1b2					      ifnconst	playercolors
    704  f1b2					      ifnconst	readpaddle
    705  f1b2		       a5 a0		      lda	temp5
    706  f1b4		       85 91		      sta	missile0y
    707  f1b6					      endif
    708  f1b6					      endif
    709  f1b6		       a5 f7		      lda	stack2
    710  f1b8		       85 89		      sta	bally
    711  f1ba
    712  f1ba							; strangely, this isn't required any more. might have
    713  f1ba							; resulted from the no_blank_lines score bounce fix
    714  f1ba							;ifconst no_blank_lines
    715  f1ba							;sta WSYNC
    716  f1ba							;endif
    717  f1ba
    718  f1ba		       ad 84 02 	      lda	INTIM
    719  f1bd		       18		      clc
    720  f1be				  -	      ifnconst	vblank_time
    721  f1be				  -	      adc	#43+12+87
    722  f1be					      else
    723  f1be		       69 8e		      adc	#vblank_time+12+87
    724  f1c0
    725  f1c0					      endif
    726  f1c0							; sta WSYNC
    727  f1c0		       8d 96 02 	      sta	TIM64T
    728  f1c3
    729  f1c3				  -	      ifconst	minikernel
    730  f1c3				  -	      jsr	minikernel
    731  f1c3					      endif
    732  f1c3
    733  f1c3							; now reassign temp vars for score pointers
    734  f1c3
    735  f1c3							; score pointers contain:
    736  f1c3							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1c3							; swap lo2->temp1
    738  f1c3							; swap lo4->temp3
    739  f1c3							; swap lo6->temp5
    740  f1c3					      ifnconst	noscore
    741  f1c3		       a5 97		      lda	scorepointers+1
    742  f1c5							; ldy temp1
    743  f1c5		       85 9c		      sta	temp1
    744  f1c7							; sty scorepointers+1
    745  f1c7
    746  f1c7		       a5 99		      lda	scorepointers+3
    747  f1c9							; ldy temp3
    748  f1c9		       85 9e		      sta	temp3
    749  f1cb							; sty scorepointers+3
    750  f1cb
    751  f1cb
    752  f1cb		       85 2b		      sta	HMCLR
    753  f1cd		       ba		      tsx
    754  f1ce		       86 f6		      stx	stack1
    755  f1d0		       a2 e0		      ldx	#$E0
    756  f1d2		       86 20		      stx	HMP0
    757  f1d4
    758  f1d4		       a5 a3		      LDA	scorecolor
    759  f1d6		       85 06		      STA	COLUP0
    760  f1d8		       85 07		      STA	COLUP1
    761  f1da					      ifconst	scorefade
    762  f1da		       85 f7		      STA	stack2
    763  f1dc					      endif
    764  f1dc				  -	      ifconst	pfscore
    765  f1dc				  -	      lda	pfscorecolor
    766  f1dc				  -	      sta	COLUPF
    767  f1dc					      endif
    768  f1dc		       85 02		      sta	WSYNC
    769  f1de		       a2 00		      ldx	#0
    770  f1e0		       86 1b		      STx	GRP0
    771  f1e2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1e4
    773  f1e4		       a5 9b		      lda	scorepointers+5
    774  f1e6							; ldy temp5
    775  f1e6		       95 a0		      sta	temp5,x
    776  f1e8							; sty scorepointers+5
    777  f1e8		       a9 ff		      lda	#>scoretable
    778  f1ea		       85 97		      sta	scorepointers+1
    779  f1ec		       85 99		      sta	scorepointers+3
    780  f1ee		       85 9b		      sta	scorepointers+5
    781  f1f0		       85 9d		      sta	temp2
    782  f1f2		       85 9f		      sta	temp4
    783  f1f4		       85 a1		      sta	temp6
    784  f1f6		       a0 07		      LDY	#7
    785  f1f8		       84 25		      STY	VDELP0
    786  f1fa		       85 10		      STA	RESP0
    787  f1fc		       85 11		      STA	RESP1
    788  f1fe
    789  f1fe
    790  f1fe		       a9 03		      LDA	#$03
    791  f200		       85 04		      STA	NUSIZ0
    792  f202		       85 05		      STA	NUSIZ1
    793  f204		       85 26		      STA	VDELP1
    794  f206		       a9 f0		      LDA	#$F0
    795  f208		       85 21		      STA	HMP1
    796  f20a		       b1 96		      lda	(scorepointers),y
    797  f20c		       85 1b		      sta	GRP0
    798  f20e		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f210		       4c 1a f2 	      jmp	beginscore
    800  f213
    801  f213
    802  f213				  -	      if	((<*)>$d4)
    803  f213				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f213					      endif
    805  f213
    806  f213				   loop2
    807  f213		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f215		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f217				  -	      ifconst	pfscore
    810  f217				  -	      lda.w	pfscore1
    811  f217				  -	      sta	PF1
    812  f217					      else
    813  f217					      ifconst	scorefade
      0  f217					      sleep	2
      1  f217				   .CYCLES    SET	2
      2  f217
      3  f217				  -	      IF	.CYCLES < 2
      4  f217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f217				  -	      ERR
      6  f217					      ENDIF
      7  f217
      8  f217				  -	      IF	.CYCLES & 1
      9  f217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f217				  -	      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217				  -	      ENDIF
     14  f217				  -.CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217					      REPEAT	.CYCLES / 2
     18  f217		       ea		      nop
     19  f218					      REPEND
    815  f218		       c6 f7		      dec	stack2	; decrement the temporary scorecolor
    816  f21a				  -	      else
    817  f21a				  -	      sleep	7
    818  f21a					      endif
    819  f21a					      endif
    820  f21a							; cycle 0
    821  f21a				   beginscore
    822  f21a		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f21c		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f21e		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f220		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f222		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f224		       9a		      txs
    828  f225		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f227					      ifconst	scorefade
    830  f227		       a5 f7		      lda	stack2
    831  f229				  -	      else
    832  f229				  -	      sleep	3
    833  f229					      endif
    834  f229
    835  f229				  -	      ifconst	pfscore
    836  f229				  -	      lda	pfscore2
    837  f229				  -	      sta	PF1
    838  f229					      else
    839  f229					      ifconst	scorefade
    840  f229		       85 06		      sta	COLUP0
    841  f22b		       85 07		      sta	COLUP1
    842  f22d				  -	      else
    843  f22d				  -	      sleep	6
    844  f22d					      endif
    845  f22d					      endif
    846  f22d
    847  f22d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f22f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f231		       ba		      tsx
    850  f232		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f234		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f236		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f238		       88		      dey
    854  f239		       10 d8		      bpl	loop2	;+2 60 180
    855  f23b
    856  f23b		       a6 f6		      ldx	stack1
    857  f23d		       9a		      txs
    858  f23e							; lda scorepointers+1
    859  f23e		       a4 9c		      ldy	temp1
    860  f240							; sta temp1
    861  f240		       84 97		      sty	scorepointers+1
    862  f242
    863  f242		       a9 00		      LDA	#0
    864  f244		       85 0e		      sta	PF1
    865  f246		       85 1b		      STA	GRP0
    866  f248		       85 1c		      STA	GRP1
    867  f24a		       85 25		      STA	VDELP0
    868  f24c		       85 26		      STA	VDELP1	;do we need these
    869  f24e		       85 04		      STA	NUSIZ0
    870  f250		       85 05		      STA	NUSIZ1
    871  f252
    872  f252							; lda scorepointers+3
    873  f252		       a4 9e		      ldy	temp3
    874  f254							; sta temp3
    875  f254		       84 99		      sty	scorepointers+3
    876  f256
    877  f256							; lda scorepointers+5
    878  f256		       a4 a0		      ldy	temp5
    879  f258							; sta temp5
    880  f258		       84 9b		      sty	scorepointers+5
    881  f25a					      endif		;noscore
    882  f25a				  -	      ifconst	readpaddle
    883  f25a				  -	      lda	#%11000010
    884  f25a					      else
    885  f25a				  -	      ifconst	qtcontroller
    886  f25a				  -	      lda	qtcontroller
    887  f25a				  -	      lsr		; bit 0 in carry
    888  f25a				  -	      lda	#4
    889  f25a				  -	      ror		; carry into top of A
    890  f25a					      else
    891  f25a		       a9 02		      lda	#2
    892  f25c					      endif		; qtcontroller
    893  f25c					      endif		; readpaddle
    894  f25c		       85 02		      sta	WSYNC
    895  f25e		       85 01		      sta	VBLANK
      0  f260					      RETURN
      1  f260					      ifnconst	bankswitch
      2  f260		       60		      rts
      3  f261				  -	      else
      4  f261				  -	      jmp	BS_return
      5  f261					      endif
    897  f261				  -	      ifconst	shakescreen
    898  f261				  -doshakescreen
    899  f261				  -	      bit	shakescreen
    900  f261				  -	      bmi	noshakescreen
    901  f261				  -	      sta	WSYNC
    902  f261				  -noshakescreen
    903  f261				  -	      ldx	missile0height
    904  f261				  -	      inx
    905  f261				  -	      rts
    906  f261					      endif
    907  f261
    908  f261							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f261
    910  f261							; playfield drawing routines
    911  f261							; you get a 32x12 bitmapped display in a single color :)
    912  f261							; 0-31 and 0-11
    913  f261
    914  f261				   pfclear		; clears playfield - or fill with pattern
    915  f261				  -	      ifconst	pfres
    916  f261				  -	      ldx	#pfres*pfwidth-1
    917  f261					      else
    918  f261		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f263					      endif
    920  f263				   pfclear_loop
    921  f263					      ifnconst	superchip
    922  f263		       95 a4		      sta	playfield,x
    923  f265				  -	      else
    924  f265				  -	      sta	playfield-128,x
    925  f265					      endif
    926  f265		       ca		      dex
    927  f266		       10 fb		      bpl	pfclear_loop
      0  f268					      RETURN
      1  f268					      ifnconst	bankswitch
      2  f268		       60		      rts
      3  f269				  -	      else
      4  f269				  -	      jmp	BS_return
      5  f269					      endif
    929  f269
    930  f269				   setuppointers
    931  f269		       86 9d		      stx	temp2	; store on.off.flip value
    932  f26b		       aa		      tax		; put x-value in x 
    933  f26c		       4a		      lsr
    934  f26d		       4a		      lsr
    935  f26e		       4a		      lsr		; divide x pos by 8 
    936  f26f		       85 9c		      sta	temp1
    937  f271		       98		      tya
    938  f272		       0a		      asl
    939  f273					      if	pfwidth=4
    940  f273		       0a		      asl		; multiply y pos by 4
    941  f274					      endif		; else multiply by 2
    942  f274		       18		      clc
    943  f275		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f277		       a8		      tay		; put the value in y
    945  f278		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f27a		       60		      rts
    947  f27b
    948  f27b				   pfread
    949  f27b							;x=xvalue, y=yvalue
    950  f27b		       20 69 f2 	      jsr	setuppointers
    951  f27e		       bd e3 f2 	      lda	setbyte,x
    952  f281		       39 a4 00 	      and	playfield,y
    953  f284		       5d e3 f2 	      eor	setbyte,x
    954  f287							; beq readzero
    955  f287							; lda #1
    956  f287							; readzero
      0  f287					      RETURN
      1  f287					      ifnconst	bankswitch
      2  f287		       60		      rts
      3  f288				  -	      else
      4  f288				  -	      jmp	BS_return
      5  f288					      endif
    958  f288
    959  f288				   pfpixel
    960  f288							;x=xvalue, y=yvalue, a=0,1,2
    961  f288		       20 69 f2 	      jsr	setuppointers
    962  f28b
    963  f28b				  -	      ifconst	bankswitch
    964  f28b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f28b				  -	      beq	pixelon_r	; if "on" go to on
    966  f28b				  -	      lsr
    967  f28b				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f28b				  -	      lda	playfield,y	; if here, it's "flip"
    969  f28b				  -	      eor	setbyte,x
    970  f28b				  -	      ifconst	superchip
    971  f28b				  -	      sta	playfield-128,y
    972  f28b				  -	      else
    973  f28b				  -	      sta	playfield,y
    974  f28b				  -	      endif
    975  f28b				  -	      RETURN
    976  f28b				  -pixelon_r
    977  f28b				  -	      lda	playfield,y
    978  f28b				  -	      ora	setbyte,x
    979  f28b				  -	      ifconst	superchip
    980  f28b				  -	      sta	playfield-128,y
    981  f28b				  -	      else
    982  f28b				  -	      sta	playfield,y
    983  f28b				  -	      endif
    984  f28b				  -	      RETURN
    985  f28b				  -pixeloff_r
    986  f28b				  -	      lda	setbyte,x
    987  f28b				  -	      eor	#$ff
    988  f28b				  -	      and	playfield,y
    989  f28b				  -	      ifconst	superchip
    990  f28b				  -	      sta	playfield-128,y
    991  f28b				  -	      else
    992  f28b				  -	      sta	playfield,y
    993  f28b				  -	      endif
    994  f28b				  -	      RETURN
    995  f28b				  -
    996  f28b					      else
    997  f28b		       4c bc f2 	      jmp	plotpoint
    998  f28e					      endif
    999  f28e
   1000  f28e				   pfhline
   1001  f28e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f28e		       20 69 f2 	      jsr	setuppointers
   1003  f291		       4c 9b f2 	      jmp	noinc
   1004  f294				   keepgoing
   1005  f294		       e8		      inx
   1006  f295		       8a		      txa
   1007  f296		       29 07		      and	#7
   1008  f298		       d0 01		      bne	noinc
   1009  f29a		       c8		      iny
   1010  f29b				   noinc
   1011  f29b		       20 bc f2 	      jsr	plotpoint
   1012  f29e		       e4 9e		      cpx	temp3
   1013  f2a0		       30 f2		      bmi	keepgoing
      0  f2a2					      RETURN
      1  f2a2					      ifnconst	bankswitch
      2  f2a2		       60		      rts
      3  f2a3				  -	      else
      4  f2a3				  -	      jmp	BS_return
      5  f2a3					      endif
   1015  f2a3
   1016  f2a3				   pfvline
   1017  f2a3							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f2a3		       20 69 f2 	      jsr	setuppointers
   1019  f2a6		       84 9c		      sty	temp1	; store memory location offset
   1020  f2a8		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2aa		       a5 9e		      lda	temp3
   1022  f2ac		       0a		      asl
   1023  f2ad					      if	pfwidth=4
   1024  f2ad		       0a		      asl		; multiply by 4
   1025  f2ae					      endif		; else multiply by 2
   1026  f2ae		       85 9e		      sta	temp3	; store it
   1027  f2b0							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2b0							; right now, temp1=y=starting memory location, temp3=final
   1029  f2b0							; x should equal original x value
   1030  f2b0				   keepgoingy
   1031  f2b0		       20 bc f2 	      jsr	plotpoint
   1032  f2b3		       c8		      iny
   1033  f2b4		       c8		      iny
   1034  f2b5					      if	pfwidth=4
   1035  f2b5		       c8		      iny
   1036  f2b6		       c8		      iny
   1037  f2b7					      endif
   1038  f2b7		       c4 9e		      cpy	temp3
   1039  f2b9		       30 f5		      bmi	keepgoingy
      0  f2bb					      RETURN
      1  f2bb					      ifnconst	bankswitch
      2  f2bb		       60		      rts
      3  f2bc				  -	      else
      4  f2bc				  -	      jmp	BS_return
      5  f2bc					      endif
   1041  f2bc
   1042  f2bc				   plotpoint
   1043  f2bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2be		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2c0		       4a		      lsr
   1046  f2c1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2c6		       5d e3 f2 	      eor	setbyte,x
   1049  f2c9				  -	      ifconst	superchip
   1050  f2c9				  -	      sta	playfield-128,y
   1051  f2c9					      else
   1052  f2c9		       99 a4 00 	      sta	playfield,y
   1053  f2cc					      endif
   1054  f2cc		       60		      rts
   1055  f2cd				   pixelon
   1056  f2cd		       b9 a4 00 	      lda	playfield,y
   1057  f2d0		       1d e3 f2 	      ora	setbyte,x
   1058  f2d3				  -	      ifconst	superchip
   1059  f2d3				  -	      sta	playfield-128,y
   1060  f2d3					      else
   1061  f2d3		       99 a4 00 	      sta	playfield,y
   1062  f2d6					      endif
   1063  f2d6		       60		      rts
   1064  f2d7				   pixeloff
   1065  f2d7		       bd e3 f2 	      lda	setbyte,x
   1066  f2da		       49 ff		      eor	#$ff
   1067  f2dc		       39 a4 00 	      and	playfield,y
   1068  f2df				  -	      ifconst	superchip
   1069  f2df				  -	      sta	playfield-128,y
   1070  f2df					      else
   1071  f2df		       99 a4 00 	      sta	playfield,y
   1072  f2e2					      endif
   1073  f2e2		       60		      rts
   1074  f2e3
   1075  f2e3				   setbyte
   1076  f2e3					      ifnconst	pfcenter
   1077  f2e3		       80		      .byte.b	$80
   1078  f2e4		       40		      .byte.b	$40
   1079  f2e5		       20		      .byte.b	$20
   1080  f2e6		       10		      .byte.b	$10
   1081  f2e7		       08		      .byte.b	$08
   1082  f2e8		       04		      .byte.b	$04
   1083  f2e9		       02		      .byte.b	$02
   1084  f2ea		       01		      .byte.b	$01
   1085  f2eb					      endif
   1086  f2eb		       01		      .byte.b	$01
   1087  f2ec		       02		      .byte.b	$02
   1088  f2ed		       04		      .byte.b	$04
   1089  f2ee		       08		      .byte.b	$08
   1090  f2ef		       10		      .byte.b	$10
   1091  f2f0		       20		      .byte.b	$20
   1092  f2f1		       40		      .byte.b	$40
   1093  f2f2		       80		      .byte.b	$80
   1094  f2f3		       80		      .byte.b	$80
   1095  f2f4		       40		      .byte.b	$40
   1096  f2f5		       20		      .byte.b	$20
   1097  f2f6		       10		      .byte.b	$10
   1098  f2f7		       08		      .byte.b	$08
   1099  f2f8		       04		      .byte.b	$04
   1100  f2f9		       02		      .byte.b	$02
   1101  f2fa		       01		      .byte.b	$01
   1102  f2fb		       01		      .byte.b	$01
   1103  f2fc		       02		      .byte.b	$02
   1104  f2fd		       04		      .byte.b	$04
   1105  f2fe		       08		      .byte.b	$08
   1106  f2ff		       10		      .byte.b	$10
   1107  f300		       20		      .byte.b	$20
   1108  f301		       40		      .byte.b	$40
   1109  f302		       80		      .byte.b	$80
   1110  f303							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f303
   1112  f303				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f303		       d0 13		      bne	notleft
   1114  f305							;left
   1115  f305				  -	      ifconst	pfres
   1116  f305				  -	      ldx	#pfres*4
   1117  f305					      else
   1118  f305		       a2 30		      ldx	#48
   1119  f307					      endif
   1120  f307				   leftloop
   1121  f307		       b5 a3		      lda	playfield-1,x
   1122  f309		       4a		      lsr
   1123  f30a
   1124  f30a				  -	      ifconst	superchip
   1125  f30a				  -	      lda	playfield-2,x
   1126  f30a				  -	      rol
   1127  f30a				  -	      sta	playfield-130,x
   1128  f30a				  -	      lda	playfield-3,x
   1129  f30a				  -	      ror
   1130  f30a				  -	      sta	playfield-131,x
   1131  f30a				  -	      lda	playfield-4,x
   1132  f30a				  -	      rol
   1133  f30a				  -	      sta	playfield-132,x
   1134  f30a				  -	      lda	playfield-1,x
   1135  f30a				  -	      ror
   1136  f30a				  -	      sta	playfield-129,x
   1137  f30a					      else
   1138  f30a		       36 a2		      rol	playfield-2,x
   1139  f30c		       76 a1		      ror	playfield-3,x
   1140  f30e		       36 a0		      rol	playfield-4,x
   1141  f310		       76 a3		      ror	playfield-1,x
   1142  f312					      endif
   1143  f312
   1144  f312		       8a		      txa
   1145  f313		       cb 04		      sbx	#4
   1146  f315		       d0 f0		      bne	leftloop
      0  f317					      RETURN
      1  f317					      ifnconst	bankswitch
      2  f317		       60		      rts
      3  f318				  -	      else
      4  f318				  -	      jmp	BS_return
      5  f318					      endif
   1148  f318
   1149  f318				   notleft
   1150  f318		       4a		      lsr
   1151  f319		       90 13		      bcc	notright
   1152  f31b							;right
   1153  f31b
   1154  f31b				  -	      ifconst	pfres
   1155  f31b				  -	      ldx	#pfres*4
   1156  f31b					      else
   1157  f31b		       a2 30		      ldx	#48
   1158  f31d					      endif
   1159  f31d				   rightloop
   1160  f31d		       b5 a0		      lda	playfield-4,x
   1161  f31f		       4a		      lsr
   1162  f320				  -	      ifconst	superchip
   1163  f320				  -	      lda	playfield-3,x
   1164  f320				  -	      rol
   1165  f320				  -	      sta	playfield-131,x
   1166  f320				  -	      lda	playfield-2,x
   1167  f320				  -	      ror
   1168  f320				  -	      sta	playfield-130,x
   1169  f320				  -	      lda	playfield-1,x
   1170  f320				  -	      rol
   1171  f320				  -	      sta	playfield-129,x
   1172  f320				  -	      lda	playfield-4,x
   1173  f320				  -	      ror
   1174  f320				  -	      sta	playfield-132,x
   1175  f320					      else
   1176  f320		       36 a1		      rol	playfield-3,x
   1177  f322		       76 a2		      ror	playfield-2,x
   1178  f324		       36 a3		      rol	playfield-1,x
   1179  f326		       76 a0		      ror	playfield-4,x
   1180  f328					      endif
   1181  f328		       8a		      txa
   1182  f329		       cb 04		      sbx	#4
   1183  f32b		       d0 f0		      bne	rightloop
      0  f32d					      RETURN
      1  f32d					      ifnconst	bankswitch
      2  f32d		       60		      rts
      3  f32e				  -	      else
      4  f32e				  -	      jmp	BS_return
      5  f32e					      endif
   1185  f32e
   1186  f32e				   notright
   1187  f32e		       4a		      lsr
   1188  f32f		       90 49		      bcc	notup
   1189  f331							;up
   1190  f331		       4a		      lsr
   1191  f332		       90 02		      bcc	onedecup
   1192  f334		       c6 ef		      dec	playfieldpos
   1193  f336				   onedecup
   1194  f336		       c6 ef		      dec	playfieldpos
   1195  f338		       f0 02		      beq	shiftdown
   1196  f33a		       10 3d		      bpl	noshiftdown2
   1197  f33c				   shiftdown
   1198  f33c				  -	      ifconst	pfrowheight
   1199  f33c				  -	      lda	#pfrowheight
   1200  f33c					      else
   1201  f33c					      ifnconst	pfres
   1202  f33c		       a9 08		      lda	#8
   1203  f33e				  -	      else
   1204  f33e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f33e					      endif
   1206  f33e					      endif
   1207  f33e
   1208  f33e		       85 ef		      sta	playfieldpos
   1209  f340		       a5 a7		      lda	playfield+3
   1210  f342		       85 9f		      sta	temp4
   1211  f344		       a5 a6		      lda	playfield+2
   1212  f346		       85 9e		      sta	temp3
   1213  f348		       a5 a5		      lda	playfield+1
   1214  f34a		       85 9d		      sta	temp2
   1215  f34c		       a5 a4		      lda	playfield
   1216  f34e		       85 9c		      sta	temp1
   1217  f350		       a2 00		      ldx	#0
   1218  f352				   up2
   1219  f352		       b5 a8		      lda	playfield+4,x
   1220  f354				  -	      ifconst	superchip
   1221  f354				  -	      sta	playfield-128,x
   1222  f354				  -	      lda	playfield+5,x
   1223  f354				  -	      sta	playfield-127,x
   1224  f354				  -	      lda	playfield+6,x
   1225  f354				  -	      sta	playfield-126,x
   1226  f354				  -	      lda	playfield+7,x
   1227  f354				  -	      sta	playfield-125,x
   1228  f354					      else
   1229  f354		       95 a4		      sta	playfield,x
   1230  f356		       b5 a9		      lda	playfield+5,x
   1231  f358		       95 a5		      sta	playfield+1,x
   1232  f35a		       b5 aa		      lda	playfield+6,x
   1233  f35c		       95 a6		      sta	playfield+2,x
   1234  f35e		       b5 ab		      lda	playfield+7,x
   1235  f360		       95 a7		      sta	playfield+3,x
   1236  f362					      endif
   1237  f362		       8a		      txa
   1238  f363		       cb fc		      sbx	#252
   1239  f365				  -	      ifconst	pfres
   1240  f365				  -	      cpx	#(pfres-1)*4
   1241  f365					      else
   1242  f365		       e0 2c		      cpx	#44
   1243  f367					      endif
   1244  f367		       d0 e9		      bne	up2
   1245  f369
   1246  f369		       a5 9f		      lda	temp4
   1247  f36b
   1248  f36b				  -	      ifconst	superchip
   1249  f36b				  -	      ifconst	pfres
   1250  f36b				  -	      sta	playfield+pfres*4-129
   1251  f36b				  -	      lda	temp3
   1252  f36b				  -	      sta	playfield+pfres*4-130
   1253  f36b				  -	      lda	temp2
   1254  f36b				  -	      sta	playfield+pfres*4-131
   1255  f36b				  -	      lda	temp1
   1256  f36b				  -	      sta	playfield+pfres*4-132
   1257  f36b				  -	      else
   1258  f36b				  -	      sta	playfield+47-128
   1259  f36b				  -	      lda	temp3
   1260  f36b				  -	      sta	playfield+46-128
   1261  f36b				  -	      lda	temp2
   1262  f36b				  -	      sta	playfield+45-128
   1263  f36b				  -	      lda	temp1
   1264  f36b				  -	      sta	playfield+44-128
   1265  f36b				  -	      endif
   1266  f36b					      else
   1267  f36b				  -	      ifconst	pfres
   1268  f36b				  -	      sta	playfield+pfres*4-1
   1269  f36b				  -	      lda	temp3
   1270  f36b				  -	      sta	playfield+pfres*4-2
   1271  f36b				  -	      lda	temp2
   1272  f36b				  -	      sta	playfield+pfres*4-3
   1273  f36b				  -	      lda	temp1
   1274  f36b				  -	      sta	playfield+pfres*4-4
   1275  f36b					      else
   1276  f36b		       85 d3		      sta	playfield+47
   1277  f36d		       a5 9e		      lda	temp3
   1278  f36f		       85 d2		      sta	playfield+46
   1279  f371		       a5 9d		      lda	temp2
   1280  f373		       85 d1		      sta	playfield+45
   1281  f375		       a5 9c		      lda	temp1
   1282  f377		       85 d0		      sta	playfield+44
   1283  f379					      endif
   1284  f379					      endif
   1285  f379				   noshiftdown2
      0  f379					      RETURN
      1  f379					      ifnconst	bankswitch
      2  f379		       60		      rts
      3  f37a				  -	      else
      4  f37a				  -	      jmp	BS_return
      5  f37a					      endif
   1287  f37a
   1288  f37a
   1289  f37a				   notup
   1290  f37a							;down
   1291  f37a		       4a		      lsr
   1292  f37b		       b0 02		      bcs	oneincup
   1293  f37d		       e6 ef		      inc	playfieldpos
   1294  f37f				   oneincup
   1295  f37f		       e6 ef		      inc	playfieldpos
   1296  f381		       a5 ef		      lda	playfieldpos
   1297  f383
   1298  f383				  -	      ifconst	pfrowheight
   1299  f383				  -	      cmp	#pfrowheight+1
   1300  f383					      else
   1301  f383					      ifnconst	pfres
   1302  f383		       c9 09		      cmp	#9
   1303  f385				  -	      else
   1304  f385				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f385					      endif
   1306  f385					      endif
   1307  f385
   1308  f385		       90 3b		      bcc	noshiftdown
   1309  f387		       a9 01		      lda	#1
   1310  f389		       85 ef		      sta	playfieldpos
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      lda	playfield+pfres*4-1
   1314  f38b				  -	      sta	temp4
   1315  f38b				  -	      lda	playfield+pfres*4-2
   1316  f38b				  -	      sta	temp3
   1317  f38b				  -	      lda	playfield+pfres*4-3
   1318  f38b				  -	      sta	temp2
   1319  f38b				  -	      lda	playfield+pfres*4-4
   1320  f38b					      else
   1321  f38b		       a5 d3		      lda	playfield+47
   1322  f38d		       85 9f		      sta	temp4
   1323  f38f		       a5 d2		      lda	playfield+46
   1324  f391		       85 9e		      sta	temp3
   1325  f393		       a5 d1		      lda	playfield+45
   1326  f395		       85 9d		      sta	temp2
   1327  f397		       a5 d0		      lda	playfield+44
   1328  f399					      endif
   1329  f399
   1330  f399		       85 9c		      sta	temp1
   1331  f39b
   1332  f39b				  -	      ifconst	pfres
   1333  f39b				  -	      ldx	#(pfres-1)*4
   1334  f39b					      else
   1335  f39b		       a2 2c		      ldx	#44
   1336  f39d					      endif
   1337  f39d				   down2
   1338  f39d		       b5 a3		      lda	playfield-1,x
   1339  f39f				  -	      ifconst	superchip
   1340  f39f				  -	      sta	playfield-125,x
   1341  f39f				  -	      lda	playfield-2,x
   1342  f39f				  -	      sta	playfield-126,x
   1343  f39f				  -	      lda	playfield-3,x
   1344  f39f				  -	      sta	playfield-127,x
   1345  f39f				  -	      lda	playfield-4,x
   1346  f39f				  -	      sta	playfield-128,x
   1347  f39f					      else
   1348  f39f		       95 a7		      sta	playfield+3,x
   1349  f3a1		       b5 a2		      lda	playfield-2,x
   1350  f3a3		       95 a6		      sta	playfield+2,x
   1351  f3a5		       b5 a1		      lda	playfield-3,x
   1352  f3a7		       95 a5		      sta	playfield+1,x
   1353  f3a9		       b5 a0		      lda	playfield-4,x
   1354  f3ab		       95 a4		      sta	playfield,x
   1355  f3ad					      endif
   1356  f3ad		       8a		      txa
   1357  f3ae		       cb 04		      sbx	#4
   1358  f3b0		       d0 eb		      bne	down2
   1359  f3b2
   1360  f3b2		       a5 9f		      lda	temp4
   1361  f3b4				  -	      ifconst	superchip
   1362  f3b4				  -	      sta	playfield-125
   1363  f3b4				  -	      lda	temp3
   1364  f3b4				  -	      sta	playfield-126
   1365  f3b4				  -	      lda	temp2
   1366  f3b4				  -	      sta	playfield-127
   1367  f3b4				  -	      lda	temp1
   1368  f3b4				  -	      sta	playfield-128
   1369  f3b4					      else
   1370  f3b4		       85 a7		      sta	playfield+3
   1371  f3b6		       a5 9e		      lda	temp3
   1372  f3b8		       85 a6		      sta	playfield+2
   1373  f3ba		       a5 9d		      lda	temp2
   1374  f3bc		       85 a5		      sta	playfield+1
   1375  f3be		       a5 9c		      lda	temp1
   1376  f3c0		       85 a4		      sta	playfield
   1377  f3c2					      endif
   1378  f3c2				   noshiftdown
      0  f3c2					      RETURN
      1  f3c2					      ifnconst	bankswitch
      2  f3c2		       60		      rts
      3  f3c3				  -	      else
      4  f3c3				  -	      jmp	BS_return
      5  f3c3					      endif
   1380  f3c3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3c3
   1382  f3c3							;standard routines needed for pretty much all games
   1383  f3c3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3c3							; repositioning code and score pointer setup moved to overscan
   1385  f3c3							; read switches, joysticks now compiler generated (more efficient)
   1386  f3c3
   1387  f3c3				   randomize
   1388  f3c3		       a5 a2		      lda	rand
   1389  f3c5		       4a		      lsr
   1390  f3c6				  -	      ifconst	rand16
   1391  f3c6				  -	      rol	rand16
   1392  f3c6					      endif
   1393  f3c6		       90 02		      bcc	noeor
   1394  f3c8		       49 b4		      eor	#$B4
   1395  f3ca				   noeor
   1396  f3ca		       85 a2		      sta	rand
   1397  f3cc				  -	      ifconst	rand16
   1398  f3cc				  -	      eor	rand16
   1399  f3cc					      endif
      0  f3cc					      RETURN
      1  f3cc					      ifnconst	bankswitch
      2  f3cc		       60		      rts
      3  f3cd				  -	      else
      4  f3cd				  -	      jmp	BS_return
      5  f3cd					      endif
   1401  f3cd							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3cd
   1403  f3cd				   drawscreen
   1404  f3cd				  -	      ifconst	debugscore
   1405  f3cd				  -	      ldx	#14
   1406  f3cd				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3cd				  -
   1408  f3cd				  -	      ifconst	mincycles
   1409  f3cd				  -	      lda	mincycles
   1410  f3cd				  -	      cmp	INTIM
   1411  f3cd				  -	      lda	mincycles
   1412  f3cd				  -	      bcc	nochange
   1413  f3cd				  -	      lda	INTIM
   1414  f3cd				  -	      sta	mincycles
   1415  f3cd				  -nochange
   1416  f3cd				  -	      endif
   1417  f3cd				  -
   1418  f3cd				  -			; cmp #$2B
   1419  f3cd				  -			; bcs no_cycles_left
   1420  f3cd				  -	      bmi	cycles_left
   1421  f3cd				  -	      ldx	#64
   1422  f3cd				  -	      eor	#$ff	;make negative
   1423  f3cd				  -cycles_left
   1424  f3cd				  -	      stx	scorecolor
   1425  f3cd				  -	      and	#$7f	; clear sign bit
   1426  f3cd				  -	      tax
   1427  f3cd				  -	      lda	scorebcd,x
   1428  f3cd				  -	      sta	score+2
   1429  f3cd				  -	      lda	scorebcd1,x
   1430  f3cd				  -	      sta	score+1
   1431  f3cd				  -	      jmp	done_debugscore
   1432  f3cd				  -scorebcd
   1433  f3cd				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3cd				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3cd				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3cd				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3cd				  -scorebcd1
   1438  f3cd				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3cd				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3cd				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3cd				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3cd				  -done_debugscore
   1443  f3cd					      endif
   1444  f3cd
   1445  f3cd				  -	      ifconst	debugcycles
   1446  f3cd				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3cd				  -			; cmp #$2B
   1448  f3cd				  -			; BCC overscan
   1449  f3cd				  -	      bmi	overscan
   1450  f3cd				  -	      sta	COLUBK
   1451  f3cd				  -	      bcs	doneoverscan
   1452  f3cd					      endif
   1453  f3cd
   1454  f3cd				   overscan
   1455  f3cd				  -	      ifconst	interlaced
   1456  f3cd				  -	      PHP
   1457  f3cd				  -	      PLA
   1458  f3cd				  -	      EOR	#4	; flip interrupt bit
   1459  f3cd				  -	      PHA
   1460  f3cd				  -	      PLP
   1461  f3cd				  -	      AND	#4	; isolate the interrupt bit
   1462  f3cd				  -	      TAX		; save it for later
   1463  f3cd					      endif
   1464  f3cd
   1465  f3cd				   overscanloop
   1466  f3cd		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3d0		       30 fb		      bmi	overscanloop
   1468  f3d2				   doneoverscan
   1469  f3d2
   1470  f3d2							;do VSYNC
   1471  f3d2
   1472  f3d2				  -	      ifconst	interlaced
   1473  f3d2				  -	      CPX	#4
   1474  f3d2				  -	      BNE	oddframevsync
   1475  f3d2					      endif
   1476  f3d2
   1477  f3d2		       a9 02		      lda	#2
   1478  f3d4		       85 02		      sta	WSYNC
   1479  f3d6		       85 00		      sta	VSYNC
   1480  f3d8		       85 02		      STA	WSYNC
   1481  f3da		       85 02		      STA	WSYNC
   1482  f3dc		       4a		      lsr
   1483  f3dd		       85 02		      STA	WSYNC
   1484  f3df		       85 00		      STA	VSYNC
   1485  f3e1		       85 01		      sta	VBLANK
   1486  f3e3				  -	      ifnconst	overscan_time
   1487  f3e3				  -	      lda	#37+128
   1488  f3e3					      else
   1489  f3e3		       a9 a5		      lda	#overscan_time+128
   1490  f3e5					      endif
   1491  f3e5		       8d 96 02 	      sta	TIM64T
   1492  f3e8
   1493  f3e8				  -	      ifconst	interlaced
   1494  f3e8				  -	      jmp	postsync
   1495  f3e8				  -
   1496  f3e8				  -oddframevsync
   1497  f3e8				  -	      sta	WSYNC
   1498  f3e8				  -
   1499  f3e8				  -	      LDA	($80,X)	; 11 waste
   1500  f3e8				  -	      LDA	($80,X)	; 11 waste
   1501  f3e8				  -	      LDA	($80,X)	; 11 waste
   1502  f3e8				  -
   1503  f3e8				  -	      lda	#2
   1504  f3e8				  -	      sta	VSYNC
   1505  f3e8				  -	      sta	WSYNC
   1506  f3e8				  -	      sta	WSYNC
   1507  f3e8				  -	      sta	WSYNC
   1508  f3e8				  -
   1509  f3e8				  -	      LDA	($80,X)	; 11 waste
   1510  f3e8				  -	      LDA	($80,X)	; 11 waste
   1511  f3e8				  -	      LDA	($80,X)	; 11 waste
   1512  f3e8				  -
   1513  f3e8				  -	      lda	#0
   1514  f3e8				  -	      sta	VSYNC
   1515  f3e8				  -	      sta	VBLANK
   1516  f3e8				  -	      ifnconst	overscan_time
   1517  f3e8				  -	      lda	#37+128
   1518  f3e8				  -	      else
   1519  f3e8				  -	      lda	#overscan_time+128
   1520  f3e8				  -	      endif
   1521  f3e8				  -	      sta	TIM64T
   1522  f3e8				  -
   1523  f3e8				  -postsync
   1524  f3e8					      endif
   1525  f3e8
   1526  f3e8				  -	      ifconst	legacy
   1527  f3e8				  -	      if	legacy < 100
   1528  f3e8				  -	      ldx	#4
   1529  f3e8				  -adjustloop
   1530  f3e8				  -	      lda	player0x,x
   1531  f3e8				  -	      sec
   1532  f3e8				  -	      sbc	#14	;?
   1533  f3e8				  -	      sta	player0x,x
   1534  f3e8				  -	      dex
   1535  f3e8				  -	      bpl	adjustloop
   1536  f3e8				  -	      endif
   1537  f3e8					      endif
   1538  f3e8				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3e8				  -	      repeat	($fa-(<*))
   1540  f3e8				  -	      nop
   1541  f3e8				  -	      repend
   1542  f3e8					      endif
   1543  f3e8		       85 02		      sta	WSYNC
   1544  f3ea		       a2 04		      ldx	#4
      0  f3ec					      SLEEP	3
      1  f3ec				   .CYCLES    SET	3
      2  f3ec
      3  f3ec				  -	      IF	.CYCLES < 2
      4  f3ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3ec				  -	      ERR
      6  f3ec					      ENDIF
      7  f3ec
      8  f3ec					      IF	.CYCLES & 1
      9  f3ec					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3ec		       04 00		      nop	0
     11  f3ee				  -	      ELSE
     12  f3ee				  -	      bit	VSYNC
     13  f3ee					      ENDIF
     14  f3ee				   .CYCLES    SET	.CYCLES - 3
     15  f3ee					      ENDIF
     16  f3ee
     17  f3ee				  -	      REPEAT	.CYCLES / 2
     18  f3ee				  -	      nop
     19  f3ee					      REPEND
   1546  f3ee				   HorPosLoop		; 5
   1547  f3ee		       b5 80		      lda	player0x,X	;+4 9
   1548  f3f0		       38		      sec		;+2 11
   1549  f3f1				   DivideLoop
   1550  f3f1		       e9 0f		      sbc	#15
   1551  f3f3		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3f5		       95 9c		      sta	temp1,X	;+4 19
   1553  f3f7		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f9		       85 02		      sta	WSYNC
   1555  f3fb		       ca		      dex
   1556  f3fc		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3fe							; 4
   1558  f3fe
   1559  f3fe		       a2 04		      ldx	#4
   1560  f400		       b4 9c		      ldy	temp1,X
   1561  f402		       b9 5e f3 	      lda	repostable-256,Y
   1562  f405		       95 20		      sta	HMP0,X	;+14 18
   1563  f407
   1564  f407		       ca		      dex
   1565  f408		       b4 9c		      ldy	temp1,X
   1566  f40a		       b9 5e f3 	      lda	repostable-256,Y
   1567  f40d		       95 20		      sta	HMP0,X	;+14 32
   1568  f40f
   1569  f40f		       ca		      dex
   1570  f410		       b4 9c		      ldy	temp1,X
   1571  f412		       b9 5e f3 	      lda	repostable-256,Y
   1572  f415		       95 20		      sta	HMP0,X	;+14 46
   1573  f417
   1574  f417		       ca		      dex
   1575  f418		       b4 9c		      ldy	temp1,X
   1576  f41a		       b9 5e f3 	      lda	repostable-256,Y
   1577  f41d		       95 20		      sta	HMP0,X	;+14 60
   1578  f41f
   1579  f41f		       ca		      dex
   1580  f420		       b4 9c		      ldy	temp1,X
   1581  f422		       b9 5e f3 	      lda	repostable-256,Y
   1582  f425		       95 20		      sta	HMP0,X	;+14 74
   1583  f427
   1584  f427		       85 02		      sta	WSYNC
   1585  f429
   1586  f429		       85 2a		      sta	HMOVE	;+3 3
   1587  f42b
   1588  f42b
   1589  f42b				  -	      ifconst	legacy
   1590  f42b				  -	      if	legacy < 100
   1591  f42b				  -	      ldx	#4
   1592  f42b				  -adjustloop2
   1593  f42b				  -	      lda	player0x,x
   1594  f42b				  -	      clc
   1595  f42b				  -	      adc	#14	;?
   1596  f42b				  -	      sta	player0x,x
   1597  f42b				  -	      dex
   1598  f42b				  -	      bpl	adjustloop2
   1599  f42b				  -	      endif
   1600  f42b					      endif
   1601  f42b
   1602  f42b
   1603  f42b
   1604  f42b
   1605  f42b							;set score pointers
   1606  f42b		       a7 95		      lax	score+2
   1607  f42d		       20 5e f4 	      jsr	scorepointerset
   1608  f430		       84 9b		      sty	scorepointers+5
   1609  f432		       86 98		      stx	scorepointers+2
   1610  f434		       a7 94		      lax	score+1
   1611  f436		       20 5e f4 	      jsr	scorepointerset
   1612  f439		       84 9a		      sty	scorepointers+4
   1613  f43b		       86 97		      stx	scorepointers+1
   1614  f43d		       a7 93		      lax	score
   1615  f43f		       20 5e f4 	      jsr	scorepointerset
   1616  f442		       84 99		      sty	scorepointers+3
   1617  f444		       86 96		      stx	scorepointers
   1618  f446
   1619  f446				   vblk
   1620  f446							; run possible vblank bB code
   1621  f446				  -	      ifconst	vblank_bB_code
   1622  f446				  -	      jsr	vblank_bB_code
   1623  f446					      endif
   1624  f446				   vblk2
   1625  f446		       ad 84 02 	      LDA	INTIM
   1626  f449		       30 fb		      bmi	vblk2
   1627  f44b		       4c 34 f0 	      jmp	kernel
   1628  f44e
   1629  f44e
   1630  f44e		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f457		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f45e				   repostable
   1633  f45e
   1634  f45e				   scorepointerset
   1635  f45e		       29 0f		      and	#$0F
   1636  f460		       0a		      asl
   1637  f461		       0a		      asl
   1638  f462		       0a		      asl
   1639  f463		       69 9c		      adc	#<scoretable
   1640  f465		       a8		      tay
   1641  f466		       8a		      txa
   1642  f467							; and #$F0
   1643  f467							; lsr
   1644  f467		       4b f0		      asr	#$F0
   1645  f469		       69 9c		      adc	#<scoretable
   1646  f46b		       aa		      tax
   1647  f46c		       60		      rts
   1648  f46d				   game
   1649  f46d				   .L00 		;  rem  example by lillapojkenpaon
   1650  f46d
   1651  f46d				   .
   1652  f46d							; 
   1653  f46d
   1654  f46d				   .L01 		;  set smartbranching on
   1655  f46d
   1656  f46d				   .L02 		;  set tv ntsc
   1657  f46d
   1658  f46d				   .L03 		;  set kernel_options pfcolors no_blank_lines
   1659  f46d
   1660  f46d				   .
   1661  f46d							; 
   1662  f46d
   1663  f46d				   .L04 		;  const scorefade = 1
   1664  f46d
   1665  f46d				   .L05 		;  dim _sc1  =  score
   1666  f46d
   1667  f46d				   .L06 		;  dim _sc2  =  score + 1
   1668  f46d
   1669  f46d				   .L07 		;  dim _sc3  =  score + 2
   1670  f46d
   1671  f46d				   .L08 		;  scorecolor = $0E
   1672  f46d
   1673  f46d		       a9 0e		      LDA	#$0E
   1674  f46f		       85 a3		      STA	scorecolor
   1675  f471				   .
   1676  f471							; 
   1677  f471
   1678  f471				   .
   1679  f471							; 
   1680  f471
   1681  f471				   .L09 		;  rem https://www.atariarchives.org/mlb/chapter4.php
   1682  f471
   1683  f471				   .L010		;  rem Chapter 4: Addressing, Indirect Y, page 49
   1684  f471
   1685  f471				   .L011		;  rem https://www.atariarchives.org/mlb/chapter5.php
   1686  f471
   1687  f471				   .L012		;  rem Chapter 5: Arithmetic, Adding Numbers Larger Than 255, page 57
   1688  f471
   1689  f471				   .
   1690  f471							; 
   1691  f471
   1692  f471				   .L013		;  rem http://atariage.com/forums/topic/263982-can-someone-explain-pointers-to-me/#entry3732833
   1693  f471
   1694  f471				   .
   1695  f471							; 
   1696  f471
   1697  f471				   .
   1698  f471							; 
   1699  f471
   1700  f471				   .
   1701  f471							; 
   1702  f471
   1703  f471				   .
   1704  f471							; 
   1705  f471
   1706  f471				   .L014		;  dim DataPtr  =  a.b
   1707  f471
   1708  f471				   .
   1709  f471							; 
   1710  f471
   1711  f471				   .
   1712  f471							; 
   1713  f471
   1714  f471				   .L015		;  rem  Pointers are easier than you think they are.  Memory addresses are 16-bit, and a pointer is two consecutive bytes that hold a memory address
   1715  f471
   1716  f471				   .
   1717  f471							; 
   1718  f471
   1719  f471				   .
   1720  f471							; 
   1721  f471
   1722  f471				   .L016		;  asm
   1723  f471
   1724  f471		       a9 03		      lda	#<reallybigtable	; low byte of reallybigtable, <exp take LSB byte of a 16 bit expression
   1725  f473
   1726  f473		       85 d4		      sta	DataPtr	; store in first byte of pointer (a)
   1727  f475
   1728  f475		       a9 f9		      lda	#>reallybigtable	; high byte of reallybigtable, >exp take MSB byte of an expression
   1729  f477
   1730  f477		       85 d5		      sta	DataPtr+1	; store in second byte of pointer (b)
   1731  f479
   1732  f479				   .
   1733  f479							; 
   1734  f479
   1735  f479				   .L017		;  dim Page  =  DataPtr + 1
   1736  f479
   1737  f479				   .L018		;  dim Index  =  c
   1738  f479
   1739  f479				   .L019		;  Index = 0
   1740  f479
   1741  f479		       a9 00		      LDA	#0
   1742  f47b		       85 d6		      STA	Index
   1743  f47d				   .
   1744  f47d							; 
   1745  f47d
   1746  f47d				   .
   1747  f47d							; 
   1748  f47d
   1749  f47d				   .
   1750  f47d							; 
   1751  f47d
   1752  f47d				   .
   1753  f47d							; 
   1754  f47d
   1755  f47d				   .L020		;  rem   since the data for the left side and right side of the screen will end up occasionally being on different pages, making different pointers for both sides is probably the easiest way
   1756  f47d
   1757  f47d				   .
   1758  f47d							; 
   1759  f47d
   1760  f47d				   .L021		;  dim DataPtr2  =  d.e
   1761  f47d
   1762  f47d				   .
   1763  f47d							; 
   1764  f47d
   1765  f47d				   .L022		;  asm
   1766  f47d
   1767  f47d		       a9 03		      lda	#<reallybigtable
   1768  f47f
   1769  f47f		       85 d7		      sta	DataPtr2
   1770  f481
   1771  f481		       a9 f9		      lda	#>reallybigtable
   1772  f483
   1773  f483		       85 d8		      sta	DataPtr2+1
   1774  f485
   1775  f485				   .
   1776  f485							; 
   1777  f485
   1778  f485				   .L023		;  dim Page2  =  DataPtr2 + 1
   1779  f485
   1780  f485				   .L024		;  dim Index2	=  temp1
   1781  f485
   1782  f485				   .
   1783  f485							; 
   1784  f485
   1785  f485				   .
   1786  f485							; 
   1787  f485
   1788  f485				   .
   1789  f485							; 
   1790  f485
   1791  f485				   .PopulateScreen
   1792  f485							; PopulateScreen
   1793  f485
   1794  f485				   .L025		;  rem make pfcolors black so we don't see the start of the level scroll in
   1795  f485
   1796  f485				   .L026		;  pfcolors:
   1797  f485
   1798  f485		       a9 00		      lda	# $00
   1799  f487		       85 08		      sta	COLUPF
   1800  f489				  -	      ifconst	pfres
   1801  f489				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   1802  f489					      else
   1803  f489		       a9 fe		      lda	#>(pfcolorlabel13-84)
   1804  f48b					      endif
   1805  f48b		       85 f1		      sta	pfcolortable+1
   1806  f48d				  -	      ifconst	pfres
   1807  f48d				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   1808  f48d					      else
   1809  f48d		       a9 04		      lda	#<(pfcolorlabel13-84)
   1810  f48f					      endif
   1811  f48f		       85 f0		      sta	pfcolortable
   1812  f491				   .L027		;  gosub scrollleft
   1813  f491
   1814  f491		       20 f2 f5 	      jsr	.scrollleft
   1815  f494
   1816  f494				   .L028		;  drawscreen
   1817  f494
   1818  f494		       20 cd f3 	      jsr	drawscreen
   1819  f497				   .L029		;  if Index < 64 then PopulateScreen
   1820  f497
   1821  f497		       a5 d6		      LDA	Index
   1822  f499		       c9 40		      CMP	#64
   1823  f49b					      if	((* - .PopulateScreen) < 127) && ((* - .PopulateScreen) > -128)
   1824  f49b		       90 e8		      bcc	.PopulateScreen
   1825  f49d				  -	      else
   1826  f49d				  -	      bcs	.0skipPopulateScreen
   1827  f49d				  -	      jmp	.PopulateScreen
   1828  f49d				  -.0skipPopulateScreen
   1829  f49d					      endif
   1830  f49d				   .
   1831  f49d							; 
   1832  f49d
   1833  f49d				   .
   1834  f49d							; 
   1835  f49d
   1836  f49d				   .L030		;  rem Now colorize and show
   1837  f49d
   1838  f49d				   .L031		;  pfcolors:
   1839  f49d
   1840  f49d		       a9 84		      lda	# $84
   1841  f49f		       85 08		      sta	COLUPF
   1842  f4a1				  -	      ifconst	pfres
   1843  f4a1				  -	      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   1844  f4a1					      else
   1845  f4a1		       a9 fe		      lda	#>(pfcolorlabel13-83)
   1846  f4a3					      endif
   1847  f4a3		       85 f1		      sta	pfcolortable+1
   1848  f4a5				  -	      ifconst	pfres
   1849  f4a5				  -	      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   1850  f4a5					      else
   1851  f4a5		       a9 05		      lda	#<(pfcolorlabel13-83)
   1852  f4a7					      endif
   1853  f4a7		       85 f0		      sta	pfcolortable
   1854  f4a9				   .
   1855  f4a9							; 
   1856  f4a9
   1857  f4a9				   .L032		;  rem  what pages the table ends up on changes depending where you put it or when adding or removing code, this saves you the trouble of updating the numbers
   1858  f4a9
   1859  f4a9				   .L033		;  const _after_last_page  =  # (  > reallybigtable + 5 ) 
   1860  f4a9
   1861  f4a9				   .L034		;  const _before_first_page  =  # (  > reallybigtable - 1 ) 
   1862  f4a9
   1863  f4a9				   .
   1864  f4a9							; 
   1865  f4a9
   1866  f4a9				   .
   1867  f4a9							; 
   1868  f4a9
   1869  f4a9				   .
   1870  f4a9							; 
   1871  f4a9
   1872  f4a9				   .
   1873  f4a9							; 
   1874  f4a9
   1875  f4a9				   .
   1876  f4a9							; 
   1877  f4a9
   1878  f4a9				   .L035		;  Page2 = Page - 1
   1879  f4a9
   1880  f4a9		       a5 d5		      LDA	Page
   1881  f4ab		       38		      SEC
   1882  f4ac		       e9 01		      SBC	#1
   1883  f4ae		       85 d8		      STA	Page2
   1884  f4b0				   .
   1885  f4b0							; 
   1886  f4b0
   1887  f4b0				   .GameLoop
   1888  f4b0							; GameLoop
   1889  f4b0
   1890  f4b0				   .
   1891  f4b0							; 
   1892  f4b0
   1893  f4b0				   .L036		;  Index2 = Index - 66
   1894  f4b0
   1895  f4b0		       a5 d6		      LDA	Index
   1896  f4b2		       38		      SEC
   1897  f4b3		       e9 42		      SBC	#66
   1898  f4b5		       85 9c		      STA	Index2
   1899  f4b7				   .
   1900  f4b7							; 
   1901  f4b7
   1902  f4b7				   .
   1903  f4b7							; 
   1904  f4b7
   1905  f4b7				   .
   1906  f4b7							; 
   1907  f4b7
   1908  f4b7				   .L037		;  if Page2 = _before_first_page  &&  Index2 = 254 then _skip
   1909  f4b7
   1910  f4b7		       a5 d8		      LDA	Page2
   1911  f4b9		       c9 f8		      CMP	#_before_first_page
   1912  f4bb		       d0 06		      BNE	.skipL037
   1913  f4bd				   .condpart0
   1914  f4bd		       a5 9c		      LDA	Index2
   1915  f4bf		       c9 fe		      CMP	#254
   1916  f4c1					      if	((* - ._skip) < 127) && ((* - ._skip) > -128)
   1917  f4c1		       f0 08		      BEQ	._skip
   1918  f4c3				  -	      else
   1919  f4c3				  -	      bne	.1skip_skip
   1920  f4c3				  -	      jmp	._skip
   1921  f4c3				  -.1skip_skip
   1922  f4c3					      endif
   1923  f4c3				   .skipL037
   1924  f4c3				   .L038		;  if joy0left then goto scrollright
   1925  f4c3
   1926  f4c3		       2c 80 02 	      bit	SWCHA
   1927  f4c6		       70 03		      BVS	.skipL038
   1928  f4c8				   .condpart1
   1929  f4c8		       4c f9 f6 	      jmp	.scrollright
   1930  f4cb
   1931  f4cb				   .skipL038
   1932  f4cb				   ._skip
   1933  f4cb							; _skip
   1934  f4cb
   1935  f4cb				   .
   1936  f4cb							; 
   1937  f4cb
   1938  f4cb				   .L039		;  if Page = _after_last_page	&&  Index = 0 then _skip2
   1939  f4cb
   1940  f4cb		       a5 d5		      LDA	Page
   1941  f4cd		       c9 fe		      CMP	#_after_last_page
   1942  f4cf		       d0 06		      BNE	.skipL039
   1943  f4d1				   .condpart2
   1944  f4d1		       a5 d6		      LDA	Index
   1945  f4d3		       c9 00		      CMP	#0
   1946  f4d5					      if	((* - ._skip2) < 127) && ((* - ._skip2) > -128)
   1947  f4d5		       f0 08		      BEQ	._skip2
   1948  f4d7				  -	      else
   1949  f4d7				  -	      bne	.2skip_skip2
   1950  f4d7				  -	      jmp	._skip2
   1951  f4d7				  -.2skip_skip2
   1952  f4d7					      endif
   1953  f4d7				   .skipL039
   1954  f4d7				   .L040		;  if joy0right then gosub scrollleft
   1955  f4d7
   1956  f4d7		       2c 80 02 	      bit	SWCHA
   1957  f4da		       30 03		      BMI	.skipL040
   1958  f4dc				   .condpart3
   1959  f4dc		       20 f2 f5 	      jsr	.scrollleft
   1960  f4df
   1961  f4df				   .skipL040
   1962  f4df				   ._skip2
   1963  f4df							; _skip2
   1964  f4df
   1965  f4df				   .
   1966  f4df							; 
   1967  f4df
   1968  f4df				   ._scrollright_return
   1969  f4df							; _scrollright_return
   1970  f4df
   1971  f4df				   .
   1972  f4df							; 
   1973  f4df
   1974  f4df				   .
   1975  f4df							; 
   1976  f4df
   1977  f4df				   .
   1978  f4df							; 
   1979  f4df
   1980  f4df				   .L041		;  temp4  =  Page2
   1981  f4df
   1982  f4df		       a5 d8		      LDA	Page2
   1983  f4e1		       85 9f		      STA	temp4
   1984  f4e3				   .
   1985  f4e3							; 
   1986  f4e3
   1987  f4e3				   .L042		;  _sc1  =  0	:  _sc2  =  _sc2  &  15
   1988  f4e3
   1989  f4e3		       a9 00		      LDA	#0
   1990  f4e5		       85 93		      STA	_sc1
   1991  f4e7		       a5 94		      LDA	_sc2
   1992  f4e9		       29 0f		      AND	#15
   1993  f4eb		       85 94		      STA	_sc2
   1994  f4ed				   .L043		;  if temp4  >=  100 then _sc1  =  _sc1  +  16  :  temp4  =  temp4  -	100
   1995  f4ed
   1996  f4ed		       a5 9f		      LDA	temp4
   1997  f4ef		       c9 64		      CMP	#100
   1998  f4f1		       90 0e		      BCC	.skipL043
   1999  f4f3				   .condpart4
   2000  f4f3		       a5 93		      LDA	_sc1
   2001  f4f5		       18		      CLC
   2002  f4f6		       69 10		      ADC	#16
   2003  f4f8		       85 93		      STA	_sc1
   2004  f4fa		       a5 9f		      LDA	temp4
   2005  f4fc		       38		      SEC
   2006  f4fd		       e9 64		      SBC	#100
   2007  f4ff		       85 9f		      STA	temp4
   2008  f501				   .skipL043
   2009  f501				   .L044		;  if temp4  >=  100 then _sc1  =  _sc1  +  16  :  temp4  =  temp4  -	100
   2010  f501
   2011  f501		       a5 9f		      LDA	temp4
   2012  f503		       c9 64		      CMP	#100
   2013  f505		       90 0e		      BCC	.skipL044
   2014  f507				   .condpart5
   2015  f507		       a5 93		      LDA	_sc1
   2016  f509		       18		      CLC
   2017  f50a		       69 10		      ADC	#16
   2018  f50c		       85 93		      STA	_sc1
   2019  f50e		       a5 9f		      LDA	temp4
   2020  f510		       38		      SEC
   2021  f511		       e9 64		      SBC	#100
   2022  f513		       85 9f		      STA	temp4
   2023  f515				   .skipL044
   2024  f515				   .L045		;  if temp4  >=  50 then _sc1	=  _sc1  +  5  :  temp4  =  temp4  -  50
   2025  f515
   2026  f515		       a5 9f		      LDA	temp4
   2027  f517		       c9 32		      CMP	#50
   2028  f519		       90 0e		      BCC	.skipL045
   2029  f51b				   .condpart6
   2030  f51b		       a5 93		      LDA	_sc1
   2031  f51d		       18		      CLC
   2032  f51e		       69 05		      ADC	#5
   2033  f520		       85 93		      STA	_sc1
   2034  f522		       a5 9f		      LDA	temp4
   2035  f524		       38		      SEC
   2036  f525		       e9 32		      SBC	#50
   2037  f527		       85 9f		      STA	temp4
   2038  f529				   .skipL045
   2039  f529				   .L046		;  if temp4  >=  30 then _sc1	=  _sc1  +  3  :  temp4  =  temp4  -  30
   2040  f529
   2041  f529		       a5 9f		      LDA	temp4
   2042  f52b		       c9 1e		      CMP	#30
   2043  f52d		       90 0e		      BCC	.skipL046
   2044  f52f				   .condpart7
   2045  f52f		       a5 93		      LDA	_sc1
   2046  f531		       18		      CLC
   2047  f532		       69 03		      ADC	#3
   2048  f534		       85 93		      STA	_sc1
   2049  f536		       a5 9f		      LDA	temp4
   2050  f538		       38		      SEC
   2051  f539		       e9 1e		      SBC	#30
   2052  f53b		       85 9f		      STA	temp4
   2053  f53d				   .skipL046
   2054  f53d				   .L047		;  if temp4  >=  20 then _sc1	=  _sc1  +  2  :  temp4  =  temp4  -  20
   2055  f53d
   2056  f53d		       a5 9f		      LDA	temp4
   2057  f53f		       c9 14		      CMP	#20
   2058  f541		       90 0e		      BCC	.skipL047
   2059  f543				   .condpart8
   2060  f543		       a5 93		      LDA	_sc1
   2061  f545		       18		      CLC
   2062  f546		       69 02		      ADC	#2
   2063  f548		       85 93		      STA	_sc1
   2064  f54a		       a5 9f		      LDA	temp4
   2065  f54c		       38		      SEC
   2066  f54d		       e9 14		      SBC	#20
   2067  f54f		       85 9f		      STA	temp4
   2068  f551				   .skipL047
   2069  f551				   .L048		;  if temp4  >=  10 then _sc1	=  _sc1  +  1  :  temp4  =  temp4  -  10
   2070  f551
   2071  f551		       a5 9f		      LDA	temp4
   2072  f553		       c9 0a		      CMP	#10
   2073  f555		       90 09		      BCC	.skipL048
   2074  f557				   .condpart9
   2075  f557		       e6 93		      INC	_sc1
   2076  f559		       a5 9f		      LDA	temp4
   2077  f55b		       38		      SEC
   2078  f55c		       e9 0a		      SBC	#10
   2079  f55e		       85 9f		      STA	temp4
   2080  f560				   .skipL048
   2081  f560				   .L049		;  _sc2  =   ( temp4  *  4  *	4 )   |  _sc2
   2082  f560
   2083  f560							; complex statement detected
   2084  f560		       a5 9f		      LDA	temp4
   2085  f562		       0a		      asl
   2086  f563		       0a		      asl
   2087  f564		       0a		      asl
   2088  f565		       0a		      asl
   2089  f566		       05 94		      ORA	_sc2
   2090  f568		       85 94		      STA	_sc2
   2091  f56a				   .
   2092  f56a							; 
   2093  f56a
   2094  f56a				   .L050		;  rem    temp4 = Index2
   2095  f56a
   2096  f56a				   .L051		;  rem    temp4 = Index
   2097  f56a
   2098  f56a				   .L052		;  temp4  =  Page
   2099  f56a
   2100  f56a		       a5 d5		      LDA	Page
   2101  f56c		       85 9f		      STA	temp4
   2102  f56e				   .
   2103  f56e							; 
   2104  f56e
   2105  f56e				   .L053		;  _sc2  =  _sc2  &  240  :  _sc3  =  0
   2106  f56e
   2107  f56e		       a5 94		      LDA	_sc2
   2108  f570		       29 f0		      AND	#240
   2109  f572		       85 94		      STA	_sc2
   2110  f574		       a9 00		      LDA	#0
   2111  f576		       85 95		      STA	_sc3
   2112  f578				   .L054		;  if temp4  >=  100 then _sc2  =  _sc2  +  1	:  temp4  =  temp4  -  100
   2113  f578
   2114  f578		       a5 9f		      LDA	temp4
   2115  f57a		       c9 64		      CMP	#100
   2116  f57c		       90 09		      BCC	.skipL054
   2117  f57e				   .condpart10
   2118  f57e		       e6 94		      INC	_sc2
   2119  f580		       a5 9f		      LDA	temp4
   2120  f582		       38		      SEC
   2121  f583		       e9 64		      SBC	#100
   2122  f585		       85 9f		      STA	temp4
   2123  f587				   .skipL054
   2124  f587				   .L055		;  if temp4  >=  100 then _sc2  =  _sc2  +  1	:  temp4  =  temp4  -  100
   2125  f587
   2126  f587		       a5 9f		      LDA	temp4
   2127  f589		       c9 64		      CMP	#100
   2128  f58b		       90 09		      BCC	.skipL055
   2129  f58d				   .condpart11
   2130  f58d		       e6 94		      INC	_sc2
   2131  f58f		       a5 9f		      LDA	temp4
   2132  f591		       38		      SEC
   2133  f592		       e9 64		      SBC	#100
   2134  f594		       85 9f		      STA	temp4
   2135  f596				   .skipL055
   2136  f596				   .L056		;  if temp4  >=  50 then _sc3	=  _sc3  +  80	:  temp4  =  temp4  -  50
   2137  f596
   2138  f596		       a5 9f		      LDA	temp4
   2139  f598		       c9 32		      CMP	#50
   2140  f59a		       90 0e		      BCC	.skipL056
   2141  f59c				   .condpart12
   2142  f59c		       a5 95		      LDA	_sc3
   2143  f59e		       18		      CLC
   2144  f59f		       69 50		      ADC	#80
   2145  f5a1		       85 95		      STA	_sc3
   2146  f5a3		       a5 9f		      LDA	temp4
   2147  f5a5		       38		      SEC
   2148  f5a6		       e9 32		      SBC	#50
   2149  f5a8		       85 9f		      STA	temp4
   2150  f5aa				   .skipL056
   2151  f5aa				   .L057		;  if temp4  >=  30 then _sc3	=  _sc3  +  48	:  temp4  =  temp4  -  30
   2152  f5aa
   2153  f5aa		       a5 9f		      LDA	temp4
   2154  f5ac		       c9 1e		      CMP	#30
   2155  f5ae		       90 0e		      BCC	.skipL057
   2156  f5b0				   .condpart13
   2157  f5b0		       a5 95		      LDA	_sc3
   2158  f5b2		       18		      CLC
   2159  f5b3		       69 30		      ADC	#48
   2160  f5b5		       85 95		      STA	_sc3
   2161  f5b7		       a5 9f		      LDA	temp4
   2162  f5b9		       38		      SEC
   2163  f5ba		       e9 1e		      SBC	#30
   2164  f5bc		       85 9f		      STA	temp4
   2165  f5be				   .skipL057
   2166  f5be				   .L058		;  if temp4  >=  20 then _sc3	=  _sc3  +  32	:  temp4  =  temp4  -  20
   2167  f5be
   2168  f5be		       a5 9f		      LDA	temp4
   2169  f5c0		       c9 14		      CMP	#20
   2170  f5c2		       90 0e		      BCC	.skipL058
   2171  f5c4				   .condpart14
   2172  f5c4		       a5 95		      LDA	_sc3
   2173  f5c6		       18		      CLC
   2174  f5c7		       69 20		      ADC	#32
   2175  f5c9		       85 95		      STA	_sc3
   2176  f5cb		       a5 9f		      LDA	temp4
   2177  f5cd		       38		      SEC
   2178  f5ce		       e9 14		      SBC	#20
   2179  f5d0		       85 9f		      STA	temp4
   2180  f5d2				   .skipL058
   2181  f5d2				   .L059		;  if temp4  >=  10 then _sc3	=  _sc3  +  16	:  temp4  =  temp4  -  10
   2182  f5d2
   2183  f5d2		       a5 9f		      LDA	temp4
   2184  f5d4		       c9 0a		      CMP	#10
   2185  f5d6		       90 0e		      BCC	.skipL059
   2186  f5d8				   .condpart15
   2187  f5d8		       a5 95		      LDA	_sc3
   2188  f5da		       18		      CLC
   2189  f5db		       69 10		      ADC	#16
   2190  f5dd		       85 95		      STA	_sc3
   2191  f5df		       a5 9f		      LDA	temp4
   2192  f5e1		       38		      SEC
   2193  f5e2		       e9 0a		      SBC	#10
   2194  f5e4		       85 9f		      STA	temp4
   2195  f5e6				   .skipL059
   2196  f5e6				   .L060		;  _sc3  =  _sc3  |  temp4
   2197  f5e6
   2198  f5e6		       a5 95		      LDA	_sc3
   2199  f5e8		       05 9f		      ORA	temp4
   2200  f5ea		       85 95		      STA	_sc3
   2201  f5ec				   .
   2202  f5ec							; 
   2203  f5ec
   2204  f5ec				   .L061		;  drawscreen
   2205  f5ec
   2206  f5ec		       20 cd f3 	      jsr	drawscreen
   2207  f5ef				   .L062		;  goto GameLoop
   2208  f5ef
   2209  f5ef		       4c b0 f4 	      jmp	.GameLoop
   2210  f5f2
   2211  f5f2				   .
   2212  f5f2							; 
   2213  f5f2
   2214  f5f2				   .
   2215  f5f2							; 
   2216  f5f2
   2217  f5f2				   .
   2218  f5f2							; 
   2219  f5f2
   2220  f5f2				   .
   2221  f5f2							; 
   2222  f5f2
   2223  f5f2				   .
   2224  f5f2							; 
   2225  f5f2
   2226  f5f2				   .
   2227  f5f2							; 
   2228  f5f2
   2229  f5f2				   .
   2230  f5f2							; 
   2231  f5f2
   2232  f5f2				   .scrollleft
   2233  f5f2							; scrollleft
   2234  f5f2
   2235  f5f2				   .L063		;  pfscroll left
   2236  f5f2
   2237  f5f2		       a9 00		      LDA	#0
   2238  f5f4		       20 03 f3 	      jsr	pfscroll
   2239  f5f7				   .
   2240  f5f7							; 
   2241  f5f7
   2242  f5f7				   .
   2243  f5f7							; 
   2244  f5f7
   2245  f5f7				   .L064		;  asm
   2246  f5f7
   2247  f5f7		       a4 d6		      ldy	Index
   2248  f5f9
   2249  f5f9		       b1 d4		      lda	(DataPtr),y
   2250  f5fb
   2251  f5fb		       85 9d		      sta	temp2
   2252  f5fd
   2253  f5fd				   .
   2254  f5fd							; 
   2255  f5fd
   2256  f5fd				   .
   2257  f5fd							; 
   2258  f5fd
   2259  f5fd				   .L065		;  asm
   2260  f5fd
   2261  f5fd		       c8		      iny
   2262  f5fe
   2263  f5fe				   .
   2264  f5fe							; 
   2265  f5fe
   2266  f5fe				   .
   2267  f5fe							; 
   2268  f5fe
   2269  f5fe				   .L066		;  asm
   2270  f5fe
   2271  f5fe		       b1 d4		      lda	(DataPtr),y
   2272  f600
   2273  f600		       85 9e		      sta	temp3
   2274  f602
   2275  f602				   .
   2276  f602							; 
   2277  f602
   2278  f602				   .L067		;  asm
   2279  f602
   2280  f602		       c0 ff		      cpy	#255	; compare y with 255 (Index=254)
   2281  f604
   2282  f604		       d0 02		      bne	_nope	; branch if not equal 
   2283  f606
   2284  f606		       e6 d5		      inc	Page	; increment Page if equal 
   2285  f608
   2286  f608				   _nope
   2287  f608
   2288  f608				   .
   2289  f608							; 
   2290  f608
   2291  f608				   .
   2292  f608							; 
   2293  f608
   2294  f608				   .L068		;  rem   if  Index=254   then Page = Page + 1 ; It's easy to multiply double-byte numbers by decimal 256 by just adding one to the MSB. This would be a quick way of moving through the "pages" in memory.
   2295  f608
   2296  f608				   .L069		;  if Index2 = 254 then Page2	=  Page2  +  1
   2297  f608
   2298  f608		       a5 9c		      LDA	Index2
   2299  f60a		       c9 fe		      CMP	#254
   2300  f60c		       d0 02		      BNE	.skipL069
   2301  f60e				   .condpart16
   2302  f60e		       e6 d8		      INC	Page2
   2303  f610				   .skipL069
   2304  f610				   .
   2305  f610							; 
   2306  f610
   2307  f610				   .
   2308  f610							; 
   2309  f610
   2310  f610				   .L070		;  if temp2{0} then var3  =  var3  |  128 else var3  =  var3  &  127
   2311  f610
   2312  f610		       a5 9d		      LDA	temp2
   2313  f612		       4a		      LSR
   2314  f613		       90 09		      BCC	.skipL070
   2315  f615				   .condpart17
   2316  f615		       a5 a7		      LDA	var3
   2317  f617		       09 80		      ORA	#128
   2318  f619		       85 a7		      STA	var3
   2319  f61b		       4c 24 f6 	      jmp	.skipelse0
   2320  f61e				   .skipL070
   2321  f61e		       a5 a7		      LDA	var3
   2322  f620		       29 7f		      AND	#127
   2323  f622		       85 a7		      STA	var3
   2324  f624				   .skipelse0
   2325  f624				   .L071		;  if temp2{1} then var7  =  var7  |  128 else var7  =  var7  &  127
   2326  f624
   2327  f624		       a5 9d		      LDA	temp2
   2328  f626		       29 02		      AND	#2
   2329  f628		       f0 09		      BEQ	.skipL071
   2330  f62a				   .condpart18
   2331  f62a		       a5 ab		      LDA	var7
   2332  f62c		       09 80		      ORA	#128
   2333  f62e		       85 ab		      STA	var7
   2334  f630		       4c 39 f6 	      jmp	.skipelse1
   2335  f633				   .skipL071
   2336  f633		       a5 ab		      LDA	var7
   2337  f635		       29 7f		      AND	#127
   2338  f637		       85 ab		      STA	var7
   2339  f639				   .skipelse1
   2340  f639				   .L072		;  if temp2{2} then var11  =  var11  |  128 else var11  =  var11  &  127
   2341  f639
   2342  f639		       a5 9d		      LDA	temp2
   2343  f63b		       29 04		      AND	#4
   2344  f63d		       f0 09		      BEQ	.skipL072
   2345  f63f				   .condpart19
   2346  f63f		       a5 af		      LDA	var11
   2347  f641		       09 80		      ORA	#128
   2348  f643		       85 af		      STA	var11
   2349  f645		       4c 4e f6 	      jmp	.skipelse2
   2350  f648				   .skipL072
   2351  f648		       a5 af		      LDA	var11
   2352  f64a		       29 7f		      AND	#127
   2353  f64c		       85 af		      STA	var11
   2354  f64e				   .skipelse2
   2355  f64e				   .L073		;  if temp2{3} then var15  =  var15  |  128 else var15  =  var15  &  127
   2356  f64e
   2357  f64e		       a5 9d		      LDA	temp2
   2358  f650		       29 08		      AND	#8
   2359  f652		       f0 09		      BEQ	.skipL073
   2360  f654				   .condpart20
   2361  f654		       a5 b3		      LDA	var15
   2362  f656		       09 80		      ORA	#128
   2363  f658		       85 b3		      STA	var15
   2364  f65a		       4c 63 f6 	      jmp	.skipelse3
   2365  f65d				   .skipL073
   2366  f65d		       a5 b3		      LDA	var15
   2367  f65f		       29 7f		      AND	#127
   2368  f661		       85 b3		      STA	var15
   2369  f663				   .skipelse3
   2370  f663				   .L074		;  if temp2{4} then var19  =  var19  |  128 else var19  =  var19  &  127
   2371  f663
   2372  f663		       a5 9d		      LDA	temp2
   2373  f665		       29 10		      AND	#16
   2374  f667		       f0 09		      BEQ	.skipL074
   2375  f669				   .condpart21
   2376  f669		       a5 b7		      LDA	var19
   2377  f66b		       09 80		      ORA	#128
   2378  f66d		       85 b7		      STA	var19
   2379  f66f		       4c 78 f6 	      jmp	.skipelse4
   2380  f672				   .skipL074
   2381  f672		       a5 b7		      LDA	var19
   2382  f674		       29 7f		      AND	#127
   2383  f676		       85 b7		      STA	var19
   2384  f678				   .skipelse4
   2385  f678				   .L075		;  if temp2{5} then var23  =  var23  |  128 else var23  =  var23  &  127
   2386  f678
   2387  f678		       a5 9d		      LDA	temp2
   2388  f67a		       29 20		      AND	#32
   2389  f67c		       f0 09		      BEQ	.skipL075
   2390  f67e				   .condpart22
   2391  f67e		       a5 bb		      LDA	var23
   2392  f680		       09 80		      ORA	#128
   2393  f682		       85 bb		      STA	var23
   2394  f684		       4c 8d f6 	      jmp	.skipelse5
   2395  f687				   .skipL075
   2396  f687		       a5 bb		      LDA	var23
   2397  f689		       29 7f		      AND	#127
   2398  f68b		       85 bb		      STA	var23
   2399  f68d				   .skipelse5
   2400  f68d				   .L076		;  if temp2{6} then var27  =  var27  |  128 else var27  =  var27  &  127
   2401  f68d
   2402  f68d		       24 9d		      BIT	temp2
   2403  f68f		       50 09		      BVC	.skipL076
   2404  f691				   .condpart23
   2405  f691		       a5 bf		      LDA	var27
   2406  f693		       09 80		      ORA	#128
   2407  f695		       85 bf		      STA	var27
   2408  f697		       4c a0 f6 	      jmp	.skipelse6
   2409  f69a				   .skipL076
   2410  f69a		       a5 bf		      LDA	var27
   2411  f69c		       29 7f		      AND	#127
   2412  f69e		       85 bf		      STA	var27
   2413  f6a0				   .skipelse6
   2414  f6a0				   .L077		;  if temp2{7} then var31  =  var31  |  128 else var31  =  var31  &  127
   2415  f6a0
   2416  f6a0		       24 9d		      BIT	temp2
   2417  f6a2		       10 09		      BPL	.skipL077
   2418  f6a4				   .condpart24
   2419  f6a4		       a5 c3		      LDA	var31
   2420  f6a6		       09 80		      ORA	#128
   2421  f6a8		       85 c3		      STA	var31
   2422  f6aa		       4c b3 f6 	      jmp	.skipelse7
   2423  f6ad				   .skipL077
   2424  f6ad		       a5 c3		      LDA	var31
   2425  f6af		       29 7f		      AND	#127
   2426  f6b1		       85 c3		      STA	var31
   2427  f6b3				   .skipelse7
   2428  f6b3				   .
   2429  f6b3							; 
   2430  f6b3
   2431  f6b3				   .L078		;  if temp3{0} then var35  =  var35  |  128 else var35  =  var35  &  127
   2432  f6b3
   2433  f6b3		       a5 9e		      LDA	temp3
   2434  f6b5		       4a		      LSR
   2435  f6b6		       90 09		      BCC	.skipL078
   2436  f6b8				   .condpart25
   2437  f6b8		       a5 c7		      LDA	var35
   2438  f6ba		       09 80		      ORA	#128
   2439  f6bc		       85 c7		      STA	var35
   2440  f6be		       4c c7 f6 	      jmp	.skipelse8
   2441  f6c1				   .skipL078
   2442  f6c1		       a5 c7		      LDA	var35
   2443  f6c3		       29 7f		      AND	#127
   2444  f6c5		       85 c7		      STA	var35
   2445  f6c7				   .skipelse8
   2446  f6c7				   .L079		;  if temp3{1} then var39  =  var39  |  128 else var39  =  var39  &  127
   2447  f6c7
   2448  f6c7		       a5 9e		      LDA	temp3
   2449  f6c9		       29 02		      AND	#2
   2450  f6cb		       f0 09		      BEQ	.skipL079
   2451  f6cd				   .condpart26
   2452  f6cd		       a5 cb		      LDA	var39
   2453  f6cf		       09 80		      ORA	#128
   2454  f6d1		       85 cb		      STA	var39
   2455  f6d3		       4c dc f6 	      jmp	.skipelse9
   2456  f6d6				   .skipL079
   2457  f6d6		       a5 cb		      LDA	var39
   2458  f6d8		       29 7f		      AND	#127
   2459  f6da		       85 cb		      STA	var39
   2460  f6dc				   .skipelse9
   2461  f6dc				   .L080		;  if temp3{2} then var43  =  var43  |  128 else var43  =  var43  &  127
   2462  f6dc
   2463  f6dc		       a5 9e		      LDA	temp3
   2464  f6de		       29 04		      AND	#4
   2465  f6e0		       f0 09		      BEQ	.skipL080
   2466  f6e2				   .condpart27
   2467  f6e2		       a5 cf		      LDA	var43
   2468  f6e4		       09 80		      ORA	#128
   2469  f6e6		       85 cf		      STA	var43
   2470  f6e8		       4c f1 f6 	      jmp	.skipelse10
   2471  f6eb				   .skipL080
   2472  f6eb		       a5 cf		      LDA	var43
   2473  f6ed		       29 7f		      AND	#127
   2474  f6ef		       85 cf		      STA	var43
   2475  f6f1				   .skipelse10
   2476  f6f1				   .
   2477  f6f1							; 
   2478  f6f1
   2479  f6f1				   .L081		;  Index = Index + 2
   2480  f6f1
   2481  f6f1		       a5 d6		      LDA	Index
   2482  f6f3		       18		      CLC
   2483  f6f4		       69 02		      ADC	#2
   2484  f6f6		       85 d6		      STA	Index
   2485  f6f8				   .L082		;  return
   2486  f6f8
   2487  f6f8		       60		      RTS
   2488  f6f9				   .
   2489  f6f9							; 
   2490  f6f9
   2491  f6f9				   .
   2492  f6f9							; 
   2493  f6f9
   2494  f6f9				   .
   2495  f6f9							; 
   2496  f6f9
   2497  f6f9				   .
   2498  f6f9							; 
   2499  f6f9
   2500  f6f9				   .
   2501  f6f9							; 
   2502  f6f9
   2503  f6f9				   .scrollright
   2504  f6f9							; scrollright
   2505  f6f9
   2506  f6f9				   .L083		;  pfscroll right
   2507  f6f9
   2508  f6f9		       a9 01		      LDA	#1
   2509  f6fb		       20 03 f3 	      jsr	pfscroll
   2510  f6fe				   .
   2511  f6fe							; 
   2512  f6fe
   2513  f6fe				   .
   2514  f6fe							; 
   2515  f6fe
   2516  f6fe				   .L084		;  asm
   2517  f6fe
   2518  f6fe		       a4 9c		      ldy	Index2
   2519  f700
   2520  f700		       b1 d7		      lda	(DataPtr2),y	; The value in the parentheses must be $00-$ff, which is known as zero page memory.
   2521  f702
   2522  f702		       85 9d		      sta	temp2
   2523  f704
   2524  f704				   .
   2525  f704							; 
   2526  f704
   2527  f704				   .
   2528  f704							; 
   2529  f704
   2530  f704				   .L085		;  asm
   2531  f704
   2532  f704		       c8		      iny
   2533  f705
   2534  f705				   .
   2535  f705							; 
   2536  f705
   2537  f705				   .
   2538  f705							; 
   2539  f705
   2540  f705				   .L086		;  asm
   2541  f705
   2542  f705		       b1 d7		      lda	(DataPtr2),y
   2543  f707
   2544  f707		       85 9e		      sta	temp3
   2545  f709
   2546  f709				   .
   2547  f709							; 
   2548  f709
   2549  f709				   .L087		;  asm
   2550  f709
   2551  f709		       c0 01		      cpy	#1	; compare y with 1 (Index2=0)
   2552  f70b
   2553  f70b		       d0 02		      bne	_nope2	; branch if not equal 
   2554  f70d
   2555  f70d		       c6 d8		      dec	Page2	; decrement Page2 if equal 
   2556  f70f
   2557  f70f				   _nope2
   2558  f70f
   2559  f70f				   .
   2560  f70f							; 
   2561  f70f
   2562  f70f				   .L088		;  rem   if  Index2=0	 then Page2 = Page2 - 1 ; It's easy to multiply double-byte numbers by decimal 256 by just adding one to the MSB. This would be a quick way of moving through the "pages" in memory.
   2563  f70f
   2564  f70f				   .L089		;  if Index = 0 then Page  =  Page  -	1
   2565  f70f
   2566  f70f		       a5 d6		      LDA	Index
   2567  f711		       c9 00		      CMP	#0
   2568  f713		       d0 02		      BNE	.skipL089
   2569  f715				   .condpart28
   2570  f715		       c6 d5		      DEC	Page
   2571  f717				   .skipL089
   2572  f717				   .
   2573  f717							; 
   2574  f717
   2575  f717				   .
   2576  f717							; 
   2577  f717
   2578  f717				   .L090		;  if temp2{0} then var0  =  var0  |  128 else var0  =  var0  &  127
   2579  f717
   2580  f717		       a5 9d		      LDA	temp2
   2581  f719		       4a		      LSR
   2582  f71a		       90 09		      BCC	.skipL090
   2583  f71c				   .condpart29
   2584  f71c		       a5 a4		      LDA	var0
   2585  f71e		       09 80		      ORA	#128
   2586  f720		       85 a4		      STA	var0
   2587  f722		       4c 2b f7 	      jmp	.skipelse11
   2588  f725				   .skipL090
   2589  f725		       a5 a4		      LDA	var0
   2590  f727		       29 7f		      AND	#127
   2591  f729		       85 a4		      STA	var0
   2592  f72b				   .skipelse11
   2593  f72b				   .L091		;  if temp2{1} then var4  =  var4  |  128 else var4  =  var4  &  127
   2594  f72b
   2595  f72b		       a5 9d		      LDA	temp2
   2596  f72d		       29 02		      AND	#2
   2597  f72f		       f0 09		      BEQ	.skipL091
   2598  f731				   .condpart30
   2599  f731		       a5 a8		      LDA	var4
   2600  f733		       09 80		      ORA	#128
   2601  f735		       85 a8		      STA	var4
   2602  f737		       4c 40 f7 	      jmp	.skipelse12
   2603  f73a				   .skipL091
   2604  f73a		       a5 a8		      LDA	var4
   2605  f73c		       29 7f		      AND	#127
   2606  f73e		       85 a8		      STA	var4
   2607  f740				   .skipelse12
   2608  f740				   .L092		;  if temp2{2} then var8  =  var8  |  128 else var8  =  var8  &  127
   2609  f740
   2610  f740		       a5 9d		      LDA	temp2
   2611  f742		       29 04		      AND	#4
   2612  f744		       f0 09		      BEQ	.skipL092
   2613  f746				   .condpart31
   2614  f746		       a5 ac		      LDA	var8
   2615  f748		       09 80		      ORA	#128
   2616  f74a		       85 ac		      STA	var8
   2617  f74c		       4c 55 f7 	      jmp	.skipelse13
   2618  f74f				   .skipL092
   2619  f74f		       a5 ac		      LDA	var8
   2620  f751		       29 7f		      AND	#127
   2621  f753		       85 ac		      STA	var8
   2622  f755				   .skipelse13
   2623  f755				   .L093		;  if temp2{3} then var12  =  var12  |  128 else var12  =  var12  &  127
   2624  f755
   2625  f755		       a5 9d		      LDA	temp2
   2626  f757		       29 08		      AND	#8
   2627  f759		       f0 09		      BEQ	.skipL093
   2628  f75b				   .condpart32
   2629  f75b		       a5 b0		      LDA	var12
   2630  f75d		       09 80		      ORA	#128
   2631  f75f		       85 b0		      STA	var12
   2632  f761		       4c 6a f7 	      jmp	.skipelse14
   2633  f764				   .skipL093
   2634  f764		       a5 b0		      LDA	var12
   2635  f766		       29 7f		      AND	#127
   2636  f768		       85 b0		      STA	var12
   2637  f76a				   .skipelse14
   2638  f76a				   .L094		;  if temp2{4} then var16  =  var16  |  128 else var16  =  var16  &  127
   2639  f76a
   2640  f76a		       a5 9d		      LDA	temp2
   2641  f76c		       29 10		      AND	#16
   2642  f76e		       f0 09		      BEQ	.skipL094
   2643  f770				   .condpart33
   2644  f770		       a5 b4		      LDA	var16
   2645  f772		       09 80		      ORA	#128
   2646  f774		       85 b4		      STA	var16
   2647  f776		       4c 7f f7 	      jmp	.skipelse15
   2648  f779				   .skipL094
   2649  f779		       a5 b4		      LDA	var16
   2650  f77b		       29 7f		      AND	#127
   2651  f77d		       85 b4		      STA	var16
   2652  f77f				   .skipelse15
   2653  f77f				   .L095		;  if temp2{5} then var20  =  var20  |  128 else var20  =  var20  &  127
   2654  f77f
   2655  f77f		       a5 9d		      LDA	temp2
   2656  f781		       29 20		      AND	#32
   2657  f783		       f0 09		      BEQ	.skipL095
   2658  f785				   .condpart34
   2659  f785		       a5 b8		      LDA	var20
   2660  f787		       09 80		      ORA	#128
   2661  f789		       85 b8		      STA	var20
   2662  f78b		       4c 94 f7 	      jmp	.skipelse16
   2663  f78e				   .skipL095
   2664  f78e		       a5 b8		      LDA	var20
   2665  f790		       29 7f		      AND	#127
   2666  f792		       85 b8		      STA	var20
   2667  f794				   .skipelse16
   2668  f794				   .L096		;  if temp2{6} then var24  =  var24  |  128 else var24  =  var24  &  127
   2669  f794
   2670  f794		       24 9d		      BIT	temp2
   2671  f796		       50 09		      BVC	.skipL096
   2672  f798				   .condpart35
   2673  f798		       a5 bc		      LDA	var24
   2674  f79a		       09 80		      ORA	#128
   2675  f79c		       85 bc		      STA	var24
   2676  f79e		       4c a7 f7 	      jmp	.skipelse17
   2677  f7a1				   .skipL096
   2678  f7a1		       a5 bc		      LDA	var24
   2679  f7a3		       29 7f		      AND	#127
   2680  f7a5		       85 bc		      STA	var24
   2681  f7a7				   .skipelse17
   2682  f7a7				   .L097		;  if temp2{7} then var28  =  var28  |  128 else var28  =  var28  &  127
   2683  f7a7
   2684  f7a7		       24 9d		      BIT	temp2
   2685  f7a9		       10 09		      BPL	.skipL097
   2686  f7ab				   .condpart36
   2687  f7ab		       a5 c0		      LDA	var28
   2688  f7ad		       09 80		      ORA	#128
   2689  f7af		       85 c0		      STA	var28
   2690  f7b1		       4c ba f7 	      jmp	.skipelse18
   2691  f7b4				   .skipL097
   2692  f7b4		       a5 c0		      LDA	var28
   2693  f7b6		       29 7f		      AND	#127
   2694  f7b8		       85 c0		      STA	var28
   2695  f7ba				   .skipelse18
   2696  f7ba				   .
   2697  f7ba							; 
   2698  f7ba
   2699  f7ba				   .L098		;  if temp3{0} then var32  =  var32  |  128 else var32  =  var32  &  127
   2700  f7ba
   2701  f7ba		       a5 9e		      LDA	temp3
   2702  f7bc		       4a		      LSR
   2703  f7bd		       90 09		      BCC	.skipL098
   2704  f7bf				   .condpart37
   2705  f7bf		       a5 c4		      LDA	var32
   2706  f7c1		       09 80		      ORA	#128
   2707  f7c3		       85 c4		      STA	var32
   2708  f7c5		       4c ce f7 	      jmp	.skipelse19
   2709  f7c8				   .skipL098
   2710  f7c8		       a5 c4		      LDA	var32
   2711  f7ca		       29 7f		      AND	#127
   2712  f7cc		       85 c4		      STA	var32
   2713  f7ce				   .skipelse19
   2714  f7ce				   .L099		;  if temp3{1} then var36  =  var36  |  128 else var36  =  var36  &  127
   2715  f7ce
   2716  f7ce		       a5 9e		      LDA	temp3
   2717  f7d0		       29 02		      AND	#2
   2718  f7d2		       f0 09		      BEQ	.skipL099
   2719  f7d4				   .condpart38
   2720  f7d4		       a5 c8		      LDA	var36
   2721  f7d6		       09 80		      ORA	#128
   2722  f7d8		       85 c8		      STA	var36
   2723  f7da		       4c e3 f7 	      jmp	.skipelse20
   2724  f7dd				   .skipL099
   2725  f7dd		       a5 c8		      LDA	var36
   2726  f7df		       29 7f		      AND	#127
   2727  f7e1		       85 c8		      STA	var36
   2728  f7e3				   .skipelse20
   2729  f7e3				   .L0100		;  if temp3{2} then var40  =  var40  |  128 else var40  =  var40  &  127
   2730  f7e3
   2731  f7e3		       a5 9e		      LDA	temp3
   2732  f7e5		       29 04		      AND	#4
   2733  f7e7		       f0 09		      BEQ	.skipL0100
   2734  f7e9				   .condpart39
   2735  f7e9		       a5 cc		      LDA	var40
   2736  f7eb		       09 80		      ORA	#128
   2737  f7ed		       85 cc		      STA	var40
   2738  f7ef		       4c f8 f7 	      jmp	.skipelse21
   2739  f7f2				   .skipL0100
   2740  f7f2		       a5 cc		      LDA	var40
   2741  f7f4		       29 7f		      AND	#127
   2742  f7f6		       85 cc		      STA	var40
   2743  f7f8				   .skipelse21
   2744  f7f8				   .
   2745  f7f8							; 
   2746  f7f8
   2747  f7f8				   .L0101		;  Index = Index - 2
   2748  f7f8
   2749  f7f8		       a5 d6		      LDA	Index
   2750  f7fa		       38		      SEC
   2751  f7fb		       e9 02		      SBC	#2
   2752  f7fd		       85 d6		      STA	Index
   2753  f7ff				   .L0102		;  goto _scrollright_return
   2754  f7ff
   2755  f7ff		       4c df f4 	      jmp	._scrollright_return
   2756  f802
   2757  f802				   .
   2758  f802							; 
   2759  f802
   2760  f802				   .
   2761  f802							; 
   2762  f802
   2763  f802				   .
   2764  f802							; 
   2765  f802
   2766  f802				   .
   2767  f802							; 
   2768  f802
   2769  f802				   .L0103		;  asm
   2770  f802
   2771  f900		       00 00 00 00*	      align	256
   2772  f900
   2773  f900				   .
   2774  f900							; 
   2775  f900
   2776  f900				   .L0104		;  rem level data table 
   2777  f900
   2778  f900				   .L0105		;  data reallybigtable ; 5 pages
   2779  f900
   2780  f900		       4c 03 fe 	      JMP	.skipL0105
   2781  f903				   reallybigtable
   2782  f903		       ff 07 00 04*	      .byte.b	255,7,0,4,0,4,0,4,0,12,0,12,0,12,0,12,0,4,0,12,0,12,0,12,0,12,0,4,0,12,0,12,0,12,0,12,0,4,0,12,0,12,0,12,0,12,0,12,0,12,0,4,0,4,0,4,0,4,0,12,0,12,0,12
   2783  f943
   2784  f943		       00 0c 00 04*	      .byte.b	0,12,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,28,0,28,0,28,0,28,0,28,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,12,0,12
   2785  f983
   2786  f983		       00 0c 00 0c*	      .byte.b	0,12,0,12,0,12,0,12,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,8,0,8,0,8,0,8,0,0,0,0,0,0,0,8,0,12,0,12,0,12,0,4,0,4
   2787  f9c3
   2788  f9c3		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4
   2789  fa03
   2790  fa03		       00 06 00 06*	      .byte.b	0,6,0,6,0,6,0,6,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14,0,14,0,14,0,14,0,6,0,6,0,6,0,6,0,14,0,14,0,14
   2791  fa43
   2792  fa43		       00 0e 00 06*	      .byte.b	0,14,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,30,0,30,0,30,0,30,0,30,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,14,0,14
   2793  fa83
   2794  fa83		       00 0e 00 0e*	      .byte.b	0,14,0,14,0,14,0,14,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,8,0,8,0,8,0,8,0,0,0,0,0,0,0,8,0,14,0,14,0,14,0,6,0,6
   2795  fac3
   2796  fac3		       00 06 00 06*	      .byte.b	0,6,0,6,0,6,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6
   2797  fb03
   2798  fb03		       00 07 00 07*	      .byte.b	0,7,0,7,0,7,0,7,0,15,0,15,0,15,0,15,0,7,0,15,0,15,0,15,0,15,0,7,0,15,0,15,0,15,0,15,0,7,0,15,0,15,0,15,0,15,0,15,0,15,0,7,0,7,0,7,0,7,0,15,0,15,0,15
   2799  fb43
   2800  fb43		       00 0f 00 07*	      .byte.b	0,15,0,7,0,7,0,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,7,0,7,0,7,0,31,0,31,0,31,0,31,0,31,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,15,0,15
   2801  fb83
   2802  fb83		       00 0f 00 0f*	      .byte.b	0,15,0,15,0,15,0,15,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,8,0,8,0,8,0,8,0,0,0,0,0,0,0,8,0,15,0,15,0,15,0,7,0,7
   2803  fbc3
   2804  fbc3		       00 07 00 07*	      .byte.b	0,7,0,7,0,7,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7
   2805  fc03
   2806  fc03		       00 06 00 06*	      .byte.b	0,6,0,6,0,6,0,6,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14,0,14,0,14,0,14,0,6,0,6,0,6,0,6,0,14,0,14,0,14
   2807  fc43
   2808  fc43		       00 0e 00 06*	      .byte.b	0,14,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,30,0,30,0,30,0,30,0,30,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,14,0,14
   2809  fc83
   2810  fc83		       00 0e 00 0e*	      .byte.b	0,14,0,14,0,14,0,14,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,8,0,8,0,8,0,8,0,0,0,0,0,0,0,8,0,14,0,14,0,14,0,6,0,6
   2811  fcc3
   2812  fcc3		       00 06 00 06*	      .byte.b	0,6,0,6,0,6,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6
   2813  fd03
   2814  fd03		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,12,0,12,0,12,0,12,0,4,0,12,0,12,0,12,0,12,0,4,0,12,0,12,0,12,0,12,0,4,0,12,0,12,0,12,0,12,0,12,0,12,0,4,0,4,0,4,0,4,0,12,0,12,0,12
   2815  fd43
   2816  fd43		       00 0c 00 04*	      .byte.b	0,12,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,28,0,28,0,28,0,28,0,28,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,12,0,12
   2817  fd83
   2818  fd83		       00 0c 00 0c*	      .byte.b	0,12,0,12,0,12,0,12,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,8,0,8,0,8,0,8,0,0,0,0,0,0,0,8,0,12,0,12,0,12,0,4,0,4
   2819  fdc3
   2820  fdc3		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,255,7
   2821  fe03
   2822  fe03				   .skipL0105
   2823  fe03				  -	      ifconst	pfres
   2824  fe03				  -	      if	(<*) > (254-pfres*pfwidth)
   2825  fe03				  -	      align	256
   2826  fe03				  -	      endif
   2827  fe03				  -	      if	(<*) < (136-pfres*pfwidth)
   2828  fe03				  -	      repeat	((136-pfres*pfwidth)-(<*))
   2829  fe03				  -	      .byte	0
   2830  fe03				  -	      repend
   2831  fe03				  -	      endif
   2832  fe03					      else
   2833  fe03				  -	      if	(<*) > 206
   2834  fe03				  -	      align	256
   2835  fe03					      endif
   2836  fe03					      if	(<*) < 88
   2837  fe03					      repeat	(88-(<*))
   2838  fe03		       00		      .byte.b	0
   2837  fe03					      repend
   2838  fe04		       00		      .byte.b	0
   2837  fe04					      repend
   2838  fe05		       00		      .byte.b	0
   2837  fe05					      repend
   2838  fe06		       00		      .byte.b	0
   2837  fe06					      repend
   2838  fe07		       00		      .byte.b	0
   2837  fe07					      repend
   2838  fe08		       00		      .byte.b	0
   2837  fe08					      repend
   2838  fe09		       00		      .byte.b	0
   2837  fe09					      repend
   2838  fe0a		       00		      .byte.b	0
   2837  fe0a					      repend
   2838  fe0b		       00		      .byte.b	0
   2837  fe0b					      repend
   2838  fe0c		       00		      .byte.b	0
   2837  fe0c					      repend
   2838  fe0d		       00		      .byte.b	0
   2837  fe0d					      repend
   2838  fe0e		       00		      .byte.b	0
   2837  fe0e					      repend
   2838  fe0f		       00		      .byte.b	0
   2837  fe0f					      repend
   2838  fe10		       00		      .byte.b	0
   2837  fe10					      repend
   2838  fe11		       00		      .byte.b	0
   2837  fe11					      repend
   2838  fe12		       00		      .byte.b	0
   2837  fe12					      repend
   2838  fe13		       00		      .byte.b	0
   2837  fe13					      repend
   2838  fe14		       00		      .byte.b	0
   2837  fe14					      repend
   2838  fe15		       00		      .byte.b	0
   2837  fe15					      repend
   2838  fe16		       00		      .byte.b	0
   2837  fe16					      repend
   2838  fe17		       00		      .byte.b	0
   2837  fe17					      repend
   2838  fe18		       00		      .byte.b	0
   2837  fe18					      repend
   2838  fe19		       00		      .byte.b	0
   2837  fe19					      repend
   2838  fe1a		       00		      .byte.b	0
   2837  fe1a					      repend
   2838  fe1b		       00		      .byte.b	0
   2837  fe1b					      repend
   2838  fe1c		       00		      .byte.b	0
   2837  fe1c					      repend
   2838  fe1d		       00		      .byte.b	0
   2837  fe1d					      repend
   2838  fe1e		       00		      .byte.b	0
   2837  fe1e					      repend
   2838  fe1f		       00		      .byte.b	0
   2837  fe1f					      repend
   2838  fe20		       00		      .byte.b	0
   2837  fe20					      repend
   2838  fe21		       00		      .byte.b	0
   2837  fe21					      repend
   2838  fe22		       00		      .byte.b	0
   2837  fe22					      repend
   2838  fe23		       00		      .byte.b	0
   2837  fe23					      repend
   2838  fe24		       00		      .byte.b	0
   2837  fe24					      repend
   2838  fe25		       00		      .byte.b	0
   2837  fe25					      repend
   2838  fe26		       00		      .byte.b	0
   2837  fe26					      repend
   2838  fe27		       00		      .byte.b	0
   2837  fe27					      repend
   2838  fe28		       00		      .byte.b	0
   2837  fe28					      repend
   2838  fe29		       00		      .byte.b	0
   2837  fe29					      repend
   2838  fe2a		       00		      .byte.b	0
   2837  fe2a					      repend
   2838  fe2b		       00		      .byte.b	0
   2837  fe2b					      repend
   2838  fe2c		       00		      .byte.b	0
   2837  fe2c					      repend
   2838  fe2d		       00		      .byte.b	0
   2837  fe2d					      repend
   2838  fe2e		       00		      .byte.b	0
   2837  fe2e					      repend
   2838  fe2f		       00		      .byte.b	0
   2837  fe2f					      repend
   2838  fe30		       00		      .byte.b	0
   2837  fe30					      repend
   2838  fe31		       00		      .byte.b	0
   2837  fe31					      repend
   2838  fe32		       00		      .byte.b	0
   2837  fe32					      repend
   2838  fe33		       00		      .byte.b	0
   2837  fe33					      repend
   2838  fe34		       00		      .byte.b	0
   2837  fe34					      repend
   2838  fe35		       00		      .byte.b	0
   2837  fe35					      repend
   2838  fe36		       00		      .byte.b	0
   2837  fe36					      repend
   2838  fe37		       00		      .byte.b	0
   2837  fe37					      repend
   2838  fe38		       00		      .byte.b	0
   2837  fe38					      repend
   2838  fe39		       00		      .byte.b	0
   2837  fe39					      repend
   2838  fe3a		       00		      .byte.b	0
   2837  fe3a					      repend
   2838  fe3b		       00		      .byte.b	0
   2837  fe3b					      repend
   2838  fe3c		       00		      .byte.b	0
   2837  fe3c					      repend
   2838  fe3d		       00		      .byte.b	0
   2837  fe3d					      repend
   2838  fe3e		       00		      .byte.b	0
   2837  fe3e					      repend
   2838  fe3f		       00		      .byte.b	0
   2837  fe3f					      repend
   2838  fe40		       00		      .byte.b	0
   2837  fe40					      repend
   2838  fe41		       00		      .byte.b	0
   2837  fe41					      repend
   2838  fe42		       00		      .byte.b	0
   2837  fe42					      repend
   2838  fe43		       00		      .byte.b	0
   2837  fe43					      repend
   2838  fe44		       00		      .byte.b	0
   2837  fe44					      repend
   2838  fe45		       00		      .byte.b	0
   2837  fe45					      repend
   2838  fe46		       00		      .byte.b	0
   2837  fe46					      repend
   2838  fe47		       00		      .byte.b	0
   2837  fe47					      repend
   2838  fe48		       00		      .byte.b	0
   2837  fe48					      repend
   2838  fe49		       00		      .byte.b	0
   2837  fe49					      repend
   2838  fe4a		       00		      .byte.b	0
   2837  fe4a					      repend
   2838  fe4b		       00		      .byte.b	0
   2837  fe4b					      repend
   2838  fe4c		       00		      .byte.b	0
   2837  fe4c					      repend
   2838  fe4d		       00		      .byte.b	0
   2837  fe4d					      repend
   2838  fe4e		       00		      .byte.b	0
   2837  fe4e					      repend
   2838  fe4f		       00		      .byte.b	0
   2837  fe4f					      repend
   2838  fe50		       00		      .byte.b	0
   2837  fe50					      repend
   2838  fe51		       00		      .byte.b	0
   2837  fe51					      repend
   2838  fe52		       00		      .byte.b	0
   2837  fe52					      repend
   2838  fe53		       00		      .byte.b	0
   2837  fe53					      repend
   2838  fe54		       00		      .byte.b	0
   2837  fe54					      repend
   2838  fe55		       00		      .byte.b	0
   2837  fe55					      repend
   2838  fe56		       00		      .byte.b	0
   2837  fe56					      repend
   2838  fe57		       00		      .byte.b	0
   2839  fe58					      repend
   2840  fe58					      endif
   2841  fe58					      endif
   2842  fe58				   pfcolorlabel13
   2843  fe58		       00 86 00 00	      .byte.b	$00, $86,0,0
   2844  fe5c		       00 86 00 00	      .byte.b	$00, $86,0,0
   2845  fe60		       00 88 00 00	      .byte.b	$00, $88,0,0
   2846  fe64		       00 88 00 00	      .byte.b	$00, $88,0,0
   2847  fe68		       00 8a 00 00	      .byte.b	$00, $8A,0,0
   2848  fe6c		       00 8a 00 00	      .byte.b	$00, $8A,0,0
   2849  fe70		       00 8c 00 00	      .byte.b	$00, $8C,0,0
   2850  fe74		       00 8c 00 00	      .byte.b	$00, $8C,0,0
   2851  fe78		       00 8e 00 00	      .byte.b	$00, $8E,0,0
   2852  fe7c		       00 8e 00 00	      .byte.b	$00, $8E,0,0
   2853  fe80					      if	ECHOFIRST
      284 bytes of ROM space left
   2854  fe80					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2855  fe80					      endif
   2856  fe80		       00 01	   ECHOFIRST  =	1
   2857  fe80
   2858  fe80
   2859  fe80
   2860  fe80							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2861  fe80
   2862  fe80							; feel free to modify the score graphics - just keep each digit 8 high
   2863  fe80							; and keep the conditional compilation stuff intact
   2864  fe80				  -	      ifconst	ROM2k
   2865  fe80				  -	      ORG	$F7AC-8
   2866  fe80					      else
   2867  fe80				  -	      ifconst	bankswitch
   2868  fe80				  -	      if	bankswitch == 8
   2869  fe80				  -	      ORG	$2F94-bscode_length
   2870  fe80				  -	      RORG	$FF94-bscode_length
   2871  fe80				  -	      endif
   2872  fe80				  -	      if	bankswitch == 16
   2873  fe80				  -	      ORG	$4F94-bscode_length
   2874  fe80				  -	      RORG	$FF94-bscode_length
   2875  fe80				  -	      endif
   2876  fe80				  -	      if	bankswitch == 32
   2877  fe80				  -	      ORG	$8F94-bscode_length
   2878  fe80				  -	      RORG	$FF94-bscode_length
   2879  fe80				  -	      endif
   2880  fe80				  -	      if	bankswitch == 64
   2881  fe80				  -	      ORG	$10F80-bscode_length
   2882  fe80				  -	      RORG	$1FF80-bscode_length
   2883  fe80				  -	      endif
   2884  fe80					      else
   2885  ff9c					      ORG	$FF9C
   2886  ff9c					      endif
   2887  ff9c					      endif
   2888  ff9c
   2889  ff9c							; font equates
   2890  ff9c		       00 01	   .21stcentury =	1
   2891  ff9c		       00 02	   alarmclock =	2
   2892  ff9c		       00 03	   handwritten =	3
   2893  ff9c		       00 04	   interrupted =	4
   2894  ff9c		       00 05	   retroputer =	5
   2895  ff9c		       00 06	   whimsey    =	6
   2896  ff9c		       00 07	   tiny       =	7
   2897  ff9c		       00 08	   hex	      =	8
   2898  ff9c
   2899  ff9c				  -	      ifconst	font
   2900  ff9c				  -	      if	font == hex
   2901  ff9c				  -	      ORG	. - 48
   2902  ff9c				  -	      endif
   2903  ff9c					      endif
   2904  ff9c
   2905  ff9c				   scoretable
   2906  ff9c
   2907  ff9c				  -	      ifconst	font
   2908  ff9c				  -	      if	font == .21stcentury
   2909  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2910  ff9c				  -	      endif
   2911  ff9c				  -	      if	font == alarmclock
   2912  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2913  ff9c				  -	      endif
   2914  ff9c				  -	      if	font == handwritten
   2915  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2916  ff9c				  -	      endif
   2917  ff9c				  -	      if	font == interrupted
   2918  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2919  ff9c				  -	      endif
   2920  ff9c				  -	      if	font == retroputer
   2921  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2922  ff9c				  -	      endif
   2923  ff9c				  -	      if	font == whimsey
   2924  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2925  ff9c				  -	      endif
   2926  ff9c				  -	      if	font == tiny
   2927  ff9c				  -	      include	"score_graphics.asm.tiny"
   2928  ff9c				  -	      endif
   2929  ff9c				  -	      if	font == hex
   2930  ff9c				  -	      include	"score_graphics.asm.hex"
   2931  ff9c				  -	      endif
   2932  ff9c					      else		; default font
   2933  ff9c
   2934  ff9c		       3c		      .byte.b	%00111100
   2935  ff9d		       66		      .byte.b	%01100110
   2936  ff9e		       66		      .byte.b	%01100110
   2937  ff9f		       66		      .byte.b	%01100110
   2938  ffa0		       66		      .byte.b	%01100110
   2939  ffa1		       66		      .byte.b	%01100110
   2940  ffa2		       66		      .byte.b	%01100110
   2941  ffa3		       3c		      .byte.b	%00111100
   2942  ffa4
   2943  ffa4		       7e		      .byte.b	%01111110
   2944  ffa5		       18		      .byte.b	%00011000
   2945  ffa6		       18		      .byte.b	%00011000
   2946  ffa7		       18		      .byte.b	%00011000
   2947  ffa8		       18		      .byte.b	%00011000
   2948  ffa9		       38		      .byte.b	%00111000
   2949  ffaa		       18		      .byte.b	%00011000
   2950  ffab		       08		      .byte.b	%00001000
   2951  ffac
   2952  ffac		       7e		      .byte.b	%01111110
   2953  ffad		       60		      .byte.b	%01100000
   2954  ffae		       60		      .byte.b	%01100000
   2955  ffaf		       3c		      .byte.b	%00111100
   2956  ffb0		       06		      .byte.b	%00000110
   2957  ffb1		       06		      .byte.b	%00000110
   2958  ffb2		       46		      .byte.b	%01000110
   2959  ffb3		       3c		      .byte.b	%00111100
   2960  ffb4
   2961  ffb4		       3c		      .byte.b	%00111100
   2962  ffb5		       46		      .byte.b	%01000110
   2963  ffb6		       06		      .byte.b	%00000110
   2964  ffb7		       06		      .byte.b	%00000110
   2965  ffb8		       1c		      .byte.b	%00011100
   2966  ffb9		       06		      .byte.b	%00000110
   2967  ffba		       46		      .byte.b	%01000110
   2968  ffbb		       3c		      .byte.b	%00111100
   2969  ffbc
   2970  ffbc		       0c		      .byte.b	%00001100
   2971  ffbd		       0c		      .byte.b	%00001100
   2972  ffbe		       7e		      .byte.b	%01111110
   2973  ffbf		       4c		      .byte.b	%01001100
   2974  ffc0		       4c		      .byte.b	%01001100
   2975  ffc1		       2c		      .byte.b	%00101100
   2976  ffc2		       1c		      .byte.b	%00011100
   2977  ffc3		       0c		      .byte.b	%00001100
   2978  ffc4
   2979  ffc4		       3c		      .byte.b	%00111100
   2980  ffc5		       46		      .byte.b	%01000110
   2981  ffc6		       06		      .byte.b	%00000110
   2982  ffc7		       06		      .byte.b	%00000110
   2983  ffc8		       3c		      .byte.b	%00111100
   2984  ffc9		       60		      .byte.b	%01100000
   2985  ffca		       60		      .byte.b	%01100000
   2986  ffcb		       7e		      .byte.b	%01111110
   2987  ffcc
   2988  ffcc		       3c		      .byte.b	%00111100
   2989  ffcd		       66		      .byte.b	%01100110
   2990  ffce		       66		      .byte.b	%01100110
   2991  ffcf		       66		      .byte.b	%01100110
   2992  ffd0		       7c		      .byte.b	%01111100
   2993  ffd1		       60		      .byte.b	%01100000
   2994  ffd2		       62		      .byte.b	%01100010
   2995  ffd3		       3c		      .byte.b	%00111100
   2996  ffd4
   2997  ffd4		       30		      .byte.b	%00110000
   2998  ffd5		       30		      .byte.b	%00110000
   2999  ffd6		       30		      .byte.b	%00110000
   3000  ffd7		       18		      .byte.b	%00011000
   3001  ffd8		       0c		      .byte.b	%00001100
   3002  ffd9		       06		      .byte.b	%00000110
   3003  ffda		       42		      .byte.b	%01000010
   3004  ffdb		       3e		      .byte.b	%00111110
   3005  ffdc
   3006  ffdc		       3c		      .byte.b	%00111100
   3007  ffdd		       66		      .byte.b	%01100110
   3008  ffde		       66		      .byte.b	%01100110
   3009  ffdf		       66		      .byte.b	%01100110
   3010  ffe0		       3c		      .byte.b	%00111100
   3011  ffe1		       66		      .byte.b	%01100110
   3012  ffe2		       66		      .byte.b	%01100110
   3013  ffe3		       3c		      .byte.b	%00111100
   3014  ffe4
   3015  ffe4		       3c		      .byte.b	%00111100
   3016  ffe5		       46		      .byte.b	%01000110
   3017  ffe6		       06		      .byte.b	%00000110
   3018  ffe7		       3e		      .byte.b	%00111110
   3019  ffe8		       66		      .byte.b	%01100110
   3020  ffe9		       66		      .byte.b	%01100110
   3021  ffea		       66		      .byte.b	%01100110
   3022  ffeb		       3c		      .byte.b	%00111100
   3023  ffec
   3024  ffec					      ifnconst	DPC_kernel_options
   3025  ffec
   3026  ffec		       00		      .byte.b	%00000000
   3027  ffed		       00		      .byte.b	%00000000
   3028  ffee		       00		      .byte.b	%00000000
   3029  ffef		       00		      .byte.b	%00000000
   3030  fff0		       00		      .byte.b	%00000000
   3031  fff1		       00		      .byte.b	%00000000
   3032  fff2		       00		      .byte.b	%00000000
   3033  fff3		       00		      .byte.b	%00000000
   3034  fff4
   3035  fff4					      endif
   3036  fff4
   3037  fff4					      endif
   3038  fff4
   3039  fff4				  -	      ifconst	ROM2k
   3040  fff4				  -	      ORG	$F7FC
   3041  fff4					      else
   3042  fff4				  -	      ifconst	bankswitch
   3043  fff4				  -	      if	bankswitch == 8
   3044  fff4				  -	      ORG	$2FF4-bscode_length
   3045  fff4				  -	      RORG	$FFF4-bscode_length
   3046  fff4				  -	      endif
   3047  fff4				  -	      if	bankswitch == 16
   3048  fff4				  -	      ORG	$4FF4-bscode_length
   3049  fff4				  -	      RORG	$FFF4-bscode_length
   3050  fff4				  -	      endif
   3051  fff4				  -	      if	bankswitch == 32
   3052  fff4				  -	      ORG	$8FF4-bscode_length
   3053  fff4				  -	      RORG	$FFF4-bscode_length
   3054  fff4				  -	      endif
   3055  fff4				  -	      if	bankswitch == 64
   3056  fff4				  -	      ORG	$10FE0-bscode_length
   3057  fff4				  -	      RORG	$1FFE0-bscode_length
   3058  fff4				  -	      endif
   3059  fff4					      else
   3060  fffc					      ORG	$FFFC
   3061  fffc					      endif
   3062  fffc					      endif
   3063  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3064  fffc
   3065  fffc				  -	      ifconst	bankswitch
   3066  fffc				  -	      if	bankswitch == 8
   3067  fffc				  -	      ORG	$2FFC
   3068  fffc				  -	      RORG	$FFFC
   3069  fffc				  -	      endif
   3070  fffc				  -	      if	bankswitch == 16
   3071  fffc				  -	      ORG	$4FFC
   3072  fffc				  -	      RORG	$FFFC
   3073  fffc				  -	      endif
   3074  fffc				  -	      if	bankswitch == 32
   3075  fffc				  -	      ORG	$8FFC
   3076  fffc				  -	      RORG	$FFFC
   3077  fffc				  -	      endif
   3078  fffc				  -	      if	bankswitch == 64
   3079  fffc				  -	      ORG	$10FF0
   3080  fffc				  -	      RORG	$1FFF0
   3081  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3082  fffc				  -	      ORG	$10FF8
   3083  fffc				  -	      RORG	$1FFF8
   3084  fffc				  -	      ifconst	superchip
   3085  fffc				  -	      .byte	"E","F","S","C"
   3086  fffc				  -	      else
   3087  fffc				  -	      .byte	"E","F","E","F"
   3088  fffc				  -	      endif
   3089  fffc				  -	      ORG	$10FFC
   3090  fffc				  -	      RORG	$1FFFC
   3091  fffc				  -	      endif
   3092  fffc					      else
   3093  fffc				  -	      ifconst	ROM2k
   3094  fffc				  -	      ORG	$F7FC
   3095  fffc					      else
   3096  fffc					      ORG	$FFFC
   3097  fffc					      endif
   3098  fffc					      endif
   3099  fffc		       00 f0		      .word.w	(start & $ffff)
   3100  fffe		       00 f0		      .word.w	(start & $ffff)

------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_plain_dpc_2020y_01m_08d_0544t.bas.asm LEVEL 1 PASS 3
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"vcs.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; VCS.H
      4  8400 ????						; Version 1.05, 13/November/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_VCS =	105
      7  8400 ????
      8  8400 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines hardware registers and memory mapping for the
     13  8400 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  8400 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  8400 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  8400 ????						; with your views.  Please contribute, if you think you can improve this
     21  8400 ????						; file!
     22  8400 ????						;
     23  8400 ????						; Latest Revisions...
     24  8400 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  8400 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  8400 ????						;			    This will allow conditional code to verify VCS.H being
     27  8400 ????						;			    used for code assembly.
     28  8400 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  8400 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  8400 ????						;			 mirrored reading/writing differences.	This is more a 
     31  8400 ????						;			 readability issue, and binary compatibility with disassembled
     32  8400 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  8400 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  8400 ????						;			 which was broken by the use of segments in this file, as
     35  8400 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  8400 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  8400 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  8400 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  8400 ????						;						   it is safe to leave it undefined, and the base address will
     40  8400 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  8400 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  8400 ????						;			  - register definitions are now generated through assignment
     43  8400 ????						;			    in uninitialised segments.	This allows a changeable base
     44  8400 ????						;			    address architecture.
     45  8400 ????						; 1.0	22/MAR/2003		Initial release
     46  8400 ????
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????
     50  8400 ????						; TIA_BASE_ADDRESS
     51  8400 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  8400 ????						; Normally 0, the base address should (externally, before including this file)
     53  8400 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  8400 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  8400 ????						; < $40 as a bankswitch.
     56  8400 ????
     57  8400 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  8400 ????			  -TIA_BASE_ADDRESS =	0
     59  8400 ????				      ENDIF
     60  8400 ????
     61  8400 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  8400 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  8400 ????						; *OR* by declaring the label before including this file, eg:
     64  8400 ????						; TIA_BASE_ADDRESS = $40
     65  8400 ????						;   include "vcs.h"
     66  8400 ????
     67  8400 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  8400 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  8400 ????						; for the mirrored ROM hardware registers.
     70  8400 ????
     71  8400 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  8400 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  8400 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  8400 ????
     75  8400 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  8400 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  8400 ????				      ENDIF
     78  8400 ????
     79  8400 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  8400 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  8400 ????				      ENDIF
     82  8400 ????
     83  8400 ????						;-------------------------------------------------------------------------------
     84  8400 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  8400 ????				      SEG
    201  8400 ????
    202  8400 ????						; EOF
------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_plain_dpc_2020y_01m_08d_0544t.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  8400 ????				      include	"macro.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; MACRO.H
      4  8400 ????						; Version 1.05, 13/NOVEMBER/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_MACRO =	105
      7  8400 ????
      8  8400 ????						;
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  8400 ????						; It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  8400 ????						; contents, or would like to add something, please write to me
     19  8400 ????						; (atari2600@taswegian.com) with your contribution.
     20  8400 ????						;
     21  8400 ????						; Latest Revisions...
     22  8400 ????						;
     23  8400 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  8400 ????						;			    This will allow conditional code to verify MACRO.H being
     25  8400 ????						;			    used for code assembly.
     26  8400 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  8400 ????						;
     28  8400 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  8400 ????						;
     30  8400 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  8400 ????						;			   (standardised macro for vertical synch code)
     32  8400 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  8400 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  8400 ????						; 1.0	22/MAR/2003		Initial release
     35  8400 ????
     36  8400 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  8400 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  8400 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  8400 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  8400 ????						;   registers and require them to be defined first).
     41  8400 ????
     42  8400 ????						; Available macros...
     43  8400 ????						;   SLEEP n		 - sleep for n cycles
     44  8400 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  8400 ????						;   CLEAN_START	 - set machine to known state on startup
     46  8400 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????						; SLEEP duration
     50  8400 ????						; Original author: Thomas Jentzsch
     51  8400 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  8400 ????						; useful for code where precise timing is required.
     53  8400 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  8400 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  8400 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  8400 ????
     57  8400 ????				      MAC	sleep
     58  8400 ????			   .CYCLES    SET	{1}
     59  8400 ????
     60  8400 ????				      IF	.CYCLES < 2
     61  8400 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  8400 ????				      ERR
     63  8400 ????				      ENDIF
     64  8400 ????
     65  8400 ????				      IF	.CYCLES & 1
     66  8400 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  8400 ????				      nop	0
     68  8400 ????				      ELSE
     69  8400 ????				      bit	VSYNC
     70  8400 ????				      ENDIF
     71  8400 ????			   .CYCLES    SET	.CYCLES - 3
     72  8400 ????				      ENDIF
     73  8400 ????
     74  8400 ????				      REPEAT	.CYCLES / 2
     75  8400 ????				      nop
     76  8400 ????				      REPEND
     77  8400 ????				      ENDM		;usage: SLEEP n (n>1)
     78  8400 ????
     79  8400 ????						;-------------------------------------------------------------------------------
     80  8400 ????						; VERTICAL_SYNC
     81  8400 ????						; Original author: Manuel Polik
     82  8400 ????						; Inserts the code required for a proper 3 scannline 
     83  8400 ????						; vertical sync sequence
     84  8400 ????						;
     85  8400 ????						; Note: Alters the accumulator
     86  8400 ????						;
     87  8400 ????						; IN:
     88  8400 ????						; OUT: A = 1
     89  8400 ????
     90  8400 ????				      MAC	vertical_sync
     91  8400 ????				      LDA	#$02	; A = VSYNC enable
     92  8400 ????				      STA	WSYNC	; Finish current line
     93  8400 ????				      STA	VSYNC	; Start vertical sync
     94  8400 ????				      STA	WSYNC	; 1st line vertical sync
     95  8400 ????				      STA	WSYNC	; 2nd line vertical sync
     96  8400 ????				      LSR		; A = VSYNC disable
     97  8400 ????				      STA	WSYNC	; 3rd line vertical sync
     98  8400 ????				      STA	VSYNC	; Stop vertical sync
     99  8400 ????				      ENDM
    100  8400 ????
    101  8400 ????						;-------------------------------------------------------------------------------
    102  8400 ????						; CLEAN_START
    103  8400 ????						; Original author: Andrew Davie
    104  8400 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  8400 ????						; Sets stack pointer to $FF, and all registers to 0
    106  8400 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  8400 ????						; Use as very first section of code on boot (ie: at reset)
    108  8400 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  8400 ????
    110  8400 ????				      MAC	clean_start
    111  8400 ????				      sei
    112  8400 ????				      cld
    113  8400 ????
    114  8400 ????				      ldx	#0
    115  8400 ????				      txa
    116  8400 ????				      tay
    117  8400 ????			   .CLEAR_STACK dex
    118  8400 ????				      txs
    119  8400 ????				      pha
    120  8400 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  8400 ????
    122  8400 ????				      ENDM
    123  8400 ????
    124  8400 ????						;-------------------------------------------------------
    125  8400 ????						; SET_POINTER
    126  8400 ????						; Original author: Manuel Rotschkar
    127  8400 ????						;
    128  8400 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  8400 ????						;
    130  8400 ????						; Usage: SET_POINTER pointer, address
    131  8400 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  8400 ????						;
    133  8400 ????						; Note: Alters the accumulator, NZ flags
    134  8400 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  8400 ????						; IN 2: absolute address
    136  8400 ????
    137  8400 ????				      MAC	set_pointer
    138  8400 ????			   .POINTER   SET	{1}
    139  8400 ????			   .ADDRESS   SET	{2}
    140  8400 ????
    141  8400 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  8400 ????				      STA	.POINTER	; Store in pointer
    143  8400 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  8400 ????				      STA	.POINTER+1	; Store in pointer+1
    145  8400 ????
    146  8400 ????				      ENDM
    147  8400 ????
    148  8400 ????						; EOF
------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_plain_dpc_2020y_01m_08d_0544t.bas.asm
------- FILE DPCplus.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplus.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; DPCplus.H - Display Processor Chip Plus Definitions
      4  8400 ????						; Chris Walton, Fred Quimby, Darrell Spice 2010
      5  8400 ????						; Version 0.00
      6  8400 ????
      7  8400 ????						; DPC Base Address
      8  8400 ????			  -	      IFNCONST	DPC_BASE_ADDRESS
      9  8400 ????			  -DPC_BASE_ADDRESS =	$1000
     10  8400 ????				      ENDIF
     11  8400 ????
     12  8400 ????						; DPC Read Base
     13  8400 ????			  -	      IFNCONST	DPC_BASE_READ_ADDRESS
     14  8400 ????			  -DPC_BASE_READ_ADDRESS =	DPC_BASE_ADDRESS
     15  8400 ????				      ENDIF
     16  8400 ????
     17  8400 ????						; DPC Write Base
     18  8400 ????			  -	      IFNCONST	DPC_BASE_WRITE_ADDRESS
     19  8400 ????			  -DPC_BASE_WRITE_ADDRESS =	DPC_BASE_ADDRESS+$28
     20  8400 ????				      ENDIF
     21  8400 ????
     22 U1028 ????				      SEG.U	DPC_REGISTERS_READ
     23 U1000					      ORG	DPC_BASE_READ_ADDRESS
     24 U1000
     25 U1000							;****************************************
     26 U1000							; DPC+ Read Registers
     27 U1000							;****************************************
     28 U1000							;
     29 U1000							;----------------------------------------
     30 U1000							; Random Numbers
     31 U1000							;----------------------------------------
     32 U1000							; DPC+ provides a 32 bit LFSR (Linear feedback shift register)
     33 U1000							; which is used as a random number generator.	Each individual byte of the
     34 U1000							; random number will return values from 0-255.  The random numbers will follow
     35 U1000							; an exact sequence, so it's best to clock them at least once per frame even if 
     36 U1000							; you don't need the value (this allows the amount of time it takes the user to
     37 U1000							; start the game to select a random starting point in the sequence)
     38 U1000							;----------------------------------------
     39 U1000		       00	   RANDOM0NEXT DS	1	; $00 clock next 32 bit number and returns byte 0
     40 U1001		       00	   RANDOM0PRIOR DS	1	; $01 clock prior 32 bit number and returns byte 0
     41 U1002		       00	   RANDOM1    DS	1	; $02 returns byte 1 of random number w/out clock
     42 U1003		       00	   RANDOM2    DS	1	; $03 returns byte 2 of random number w/out clock
     43 U1004		       00	   RANDOM3    DS	1	; $04 returns byte 3 of random number w/out clock
     44 U1005
     45 U1005							;----------------------------------------
     46 U1005							; Music Fetcher
     47 U1005							;----------------------------------------
     48 U1005							; When generating music, this value must be read every single scanline and
     49 U1005							; stored into AUDV0.
     50 U1005							;----------------------------------------
     51 U1005		       00	   AMPLITUDE  DS	1	; $05
     52 U1006
     53 U1006							;----------------------------------------
     54 U1006							; Reserved
     55 U1006							;----------------------------------------
     56 U1006		       00		      DS	1	; $06
     57 U1007		       00		      DS	1	; $07
     58 U1008
     59 U1008							;----------------------------------------
     60 U1008							; Data Fetcher
     61 U1008							;----------------------------------------
     62 U1008							; There are 8 Data Fetchers which are used to access data stored in the Display
     63 U1008							; Data bank.  Before using, you must point the Data Fetcher at the data to read
     64 U1008							; via DFxLOW and DFxHI.  After each read the Data Fetcher will update to point
     65 U1008							; to the next byte of data to return.
     66 U1008							;
     67 U1008							; psuedo code* to point Data Fetcher 1 to the color data
     68 U1008							;	lda #<(ColorDataPosition - HowFarDownScreen)
     69 U1008							;	sta DF1LOW
     70 U1008							;	lda #>(ColorDataPosition - HowFarDownScreen)
     71 U1008							;	sta DF1HI 
     72 U1008							;	....
     73 U1008							; then in the kernel read the Data Fetcher and update the color, takes 7 cycles
     74 U1008							;	LDA DF1DATA
     75 U1008							;	STA COLUP0
     76 U1008							;
     77 U1008							; * see DPCplus.asm for actual code
     78 U1008							;----------------------------------------
     79 U1008		       00	   DF0DATA    DS	1	; $08
     80 U1009		       00	   DF1DATA    DS	1	; $09
     81 U100a		       00	   DF2DATA    DS	1	; $0A
     82 U100b		       00	   DF3DATA    DS	1	; $0B
     83 U100c		       00	   DF4DATA    DS	1	; $0C
     84 U100d		       00	   DF5DATA    DS	1	; $0D
     85 U100e		       00	   DF6DATA    DS	1	; $0E
     86 U100f		       00	   DF7DATA    DS	1	; $0F
     87 U1010
     88 U1010							;----------------------------------------
     89 U1010							; Data Fetcher, Windowed
     90 U1010							;----------------------------------------
     91 U1010							; The 8 Data Fetchers can also be read in a "windowed" mode, which is most
     92 U1010							; commonly used to update sprites.  To use windowed mode, point the Data
     93 U1010							; Fetcher the same as above, but then also set the Top and Bottom of the
     94 U1010							; Window using DFxTOP and DFxBOT.  When reading via the DFxDATAW registers, a 0
     95 U1010							; value will be returned for anything that's outside of the window.
     96 U1010							;
     97 U1010							; psuedo code to point Data Fetcher0 to the sprite data
     98 U1010							;	lda #<(SpriteDataPosition - HowFarDownScreen)
     99 U1010							;	sta DF0LOW
    100 U1010							;	lda #>(SpriteDataPosition - HowFarDownScreen)
    101 U1010							;	sta DF0HI
    102 U1010							;	
    103 U1010							; set the window for Data Fetcher 0
    104 U1010							;	lda #<(SpriteDataPosition - 1)
    105 U1010							;	sta DF0TOP
    106 U1010							;	lda #<(SpriteDataPosition + ImageHeight)
    107 U1010							;	sta DF0BOT
    108 U1010							;	....
    109 U1010							; then in the kernel read the Data Fetcher and update the sprite, takes 7 cycles
    110 U1010							;	LDA DF0DATAW
    111 U1010							;	STA GRP0
    112 U1010							;----------------------------------------
    113 U1010		       00	   DF0DATAW   DS	1	; $10
    114 U1011		       00	   DF1DATAW   DS	1	; $11
    115 U1012		       00	   DF2DATAW   DS	1	; $12
    116 U1013		       00	   DF3DATAW   DS	1	; $13
    117 U1014		       00	   DF4DATAW   DS	1	; $14
    118 U1015		       00	   DF5DATAW   DS	1	; $15
    119 U1016		       00	   DF6DATAW   DS	1	; $16
    120 U1017		       00	   DF7DATAW   DS	1	; $17
    121 U1018
    122 U1018							;----------------------------------------
    123 U1018							; Fractional Data Fetcher
    124 U1018							;----------------------------------------
    125 U1018							; Another 8 Data Fetchers exist which work differently than the first 8.
    126 U1018							; These allow you to fractionally increment the Data Fetcher so a single
    127 U1018							; value can be read a set number of times before advancing to the next value.
    128 U1018							; This is commonly used to draw asymmetrical playfields without needing to 
    129 U1018							; use 1200 bytes of data (200 scanlines * 6 playfield updates).
    130 U1018							; Before using, you must point the Fractional Data Fetcher at the data to read
    131 U1018							; via DFxFRACLOW and DFxFRACHI.  You must also set the increment value via
    132 U1018							; DFxFRACINC.
    133 U1018							;
    134 U1018							; Set pointer
    135 U1018							;	LDA #<PlayfieldPF0l
    136 U1018							;	STA DF0FRACLOW
    137 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    138 U1018							;	lda #>PlayFieldPF0l
    139 U1018							;	STA DF0FRACHI
    140 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    141 U1018							; Set the increment to repeat the value for x reads
    142 U1018							;	LDA #(256/x)
    143 U1018							;	STA DF0FRACINC
    144 U1018							;	 STA DF1FRACINC
    145 U1018							;	... repeat for 2-5
    146 U1018							;
    147 U1018							; Special Condition - IF you want to increment the pointer after every read 
    148 U1018							; (just like the normal Data Fetcher), then use the following to set the
    149 U1018							; increment AND prime the Fractional Data Fetcher
    150 U1018							;	LDA #255
    151 U1018							;	STA DF0FRACINC
    152 U1018							;	 STA DF1FRACINC
    153 U1018							;	... repeat for 2-5
    154 U1018							;	LDA DF0FRACDATA - priming read (first value will be read twice)
    155 U1018							;	LDA DF1FRACDATA - priming read (first value will be read twice)
    156 U1018							;	... repeat for 2-5
    157 U1018							;
    158 U1018							; then in the kernel read the Fractional Data Fetchers and update the playfield
    159 U1018							;	LDA DF0FRACDATA
    160 U1018							;	STA PF0
    161 U1018							;	LDA PF1FRACDATA
    162 U1018							;	STA PF1
    163 U1018							;	... repeat for Data Fetchers 2-5, putting them in PF2, PF0, PF1 and PF2
    164 U1018							;----------------------------------------
    165 U1018		       00	   DF0FRACDATA DS	1	; $18
    166 U1019		       00	   DF1FRACDATA DS	1	; $19
    167 U101a		       00	   DF2FRACDATA DS	1	; $1A
    168 U101b		       00	   DF3FRACDATA DS	1	; $1B
    169 U101c		       00	   DF4FRACDATA DS	1	; $1C
    170 U101d		       00	   DF5FRACDATA DS	1	; $1D
    171 U101e		       00	   DF6FRACDATA DS	1	; $1E
    172 U101f		       00	   DF7FRACDATA DS	1	; $1F
    173 U1020
    174 U1020							;----------------------------------------
    175 U1020							; Data Fetcher Window Flag
    176 U1020							;----------------------------------------
    177 U1020							; The Data Fetcher Window Flag allows you to dual-purpose the first four
    178 U1020							; Data Fetchers.  The Window is not required when a Data Fetcher is used to
    179 U1020							; update a sprite's color.  The Flag will return $FF if it's within the window,
    180 U1020							; or 0 if it's not - this value can be used to control the display of the ball
    181 U1020							; and missiles. The Data Fetcher will NOT increment when reading the flag.
    182 U1020							;
    183 U1020							; psuedo code to point Data Fetcher 1 to the color data
    184 U1020							;	lda #<(ColorDataPosition - HowFarDownScreen)
    185 U1020							;	sta DF1LOW
    186 U1020							;	lda #>(ColorDataPosition - HowFarDownScreen)
    187 U1020							;	sta DF1HI
    188 U1020							;
    189 U1020							; set the window based on the missile's Y position and height (number of
    190 U1020							; scanlines to draw missile on)
    191 U1020							;	lda #<(ColorDataPosition + MissileYposition - 1)
    192 U1020							;	sta DF1TOP
    193 U1020							;	lda #<(ColorDataPosition + MissileYposition + MissileHeight)
    194 U1020							;	sta DF1BOT
    195 U1020							;
    196 U1020							; then in the kernel read the Data Fetcher and update the color, then read the
    197 U1020							; flag and update the missile
    198 U1020							;	LDA DF1DATA
    199 U1020							;	STA COLUP0
    200 U1020							;	LDA DF1FLAG
    201 U1020							;	STA ENAM0
    202 U1020							;----------------------------------------
    203 U1020		       00	   DF0FLAG    DS	1	; $20
    204 U1021		       00	   DF1FLAG    DS	1	; $21
    205 U1022		       00	   DF2FLAG    DS	1	; $22
    206 U1023		       00	   DF3FLAG    DS	1	; $23
    207 U1024
    208 U1024							;----------------------------------------
    209 U1024							; Reserved
    210 U1024							;----------------------------------------
    211 U1024		       00		      DS	1	; $24
    212 U1025		       00		      DS	1	; $25
    213 U1026		       00		      DS	1	; $26
    214 U1027		       00		      DS	1	; $27
    215 U1028
    216 U1028
    217 U1080 ????				      SEG.U	DPC_REGISTERS_WRITE
    218 U1028					      ORG	DPC_BASE_WRITE_ADDRESS
    219 U1028
    220 U1028							;****************************************
    221 U1028							; SECTION 2 - DPC+ Write Registers
    222 U1028							;****************************************
    223 U1028							;
    224 U1028							;----------------------------------------
    225 U1028							; Fractional Data Fetcher, Low Pointer
    226 U1028							;----------------------------------------
    227 U1028							; These are used in conjunction with DFxFRACHI to point a Fractional Data
    228 U1028							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    229 U1028							; in SECTION 1.
    230 U1028							;----------------------------------------
    231 U1028		       00	   DF0FRACLOW DS	1	; $28
    232 U1029		       00	   DF1FRACLOW DS	1	; $29
    233 U102a		       00	   DF2FRACLOW DS	1	; $2A
    234 U102b		       00	   DF3FRACLOW DS	1	; $2B
    235 U102c		       00	   DF4FRACLOW DS	1	; $2C
    236 U102d		       00	   DF5FRACLOW DS	1	; $2D
    237 U102e		       00	   DF6FRACLOW DS	1	; $2E
    238 U102f		       00	   DF7FRACLOW DS	1	; $2F
    239 U1030
    240 U1030							;----------------------------------------
    241 U1030							; Fractional Data Fetcher, High Pointer
    242 U1030							;----------------------------------------
    243 U1030							; These are used in conjunction with DFxFRACLOW to point a Fractional Data
    244 U1030							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    245 U1030							; in SECTION 1.
    246 U1030							;
    247 U1030							; NOTE: for only the lower 4 bits are used.
    248 U1030							;----------------------------------------
    249 U1030		       00	   DF0FRACHI  DS	1	; $30
    250 U1031		       00	   DF1FRACHI  DS	1	; $31
    251 U1032		       00	   DF2FRACHI  DS	1	; $32
    252 U1033		       00	   DF3FRACHI  DS	1	; $33
    253 U1034		       00	   DF4FRACHI  DS	1	; $34
    254 U1035		       00	   DF5FRACHI  DS	1	; $35 
    255 U1036		       00	   DF6FRACHI  DS	1	; $36 
    256 U1037		       00	   DF7FRACHI  DS	1	; $37 
    257 U1038
    258 U1038							;----------------------------------------
    259 U1038							; Fractional Data Fetcher, Increment
    260 U1038							;----------------------------------------
    261 U1038							; These are used to set the increment amount for the Fractional Data Fetcher.
    262 U1038							; To increment pointer after every Xth read use int(256/X)
    263 U1038							; For usage, see "Fractional Data Fetcher" in SECTION 1.
    264 U1038							;----------------------------------------
    265 U1038		       00	   DF0FRACINC DS	1	; $38
    266 U1039		       00	   DF1FRACINC DS	1	; $39
    267 U103a		       00	   DF2FRACINC DS	1	; $3A
    268 U103b		       00	   DF3FRACINC DS	1	; $3B
    269 U103c		       00	   DF4FRACINC DS	1	; $3C
    270 U103d		       00	   DF5FRACINC DS	1	; $3D
    271 U103e		       00	   DF6FRACINC DS	1	; $3E
    272 U103f		       00	   DF7FRACINC DS	1	; $3F
    273 U1040
    274 U1040							;----------------------------------------
    275 U1040							; Data Fetcher, Window Top
    276 U1040							;----------------------------------------
    277 U1040							; These are used with DFxBOT to define the Data Fetcher Window
    278 U1040							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    279 U1040							;----------------------------------------
    280 U1040		       00	   DF0TOP     DS	1	; $40
    281 U1041		       00	   DF1TOP     DS	1	; $41
    282 U1042		       00	   DF2TOP     DS	1	; $42
    283 U1043		       00	   DF3TOP     DS	1	; $43
    284 U1044		       00	   DF4TOP     DS	1	; $44
    285 U1045		       00	   DF5TOP     DS	1	; $45
    286 U1046		       00	   DF6TOP     DS	1	; $46
    287 U1047		       00	   DF7TOP     DS	1	; $47
    288 U1048
    289 U1048							;----------------------------------------
    290 U1048							; Data Fetcher, Window Bottom
    291 U1048							;----------------------------------------
    292 U1048							; These are used with DFxTOP to define the Data Fetcher Window
    293 U1048							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    294 U1048							;----------------------------------------
    295 U1048		       00	   DF0BOT     DS	1	; $48
    296 U1049		       00	   DF1BOT     DS	1	; $49
    297 U104a		       00	   DF2BOT     DS	1	; $4A
    298 U104b		       00	   DF3BOT     DS	1	; $4B
    299 U104c		       00	   DF4BOT     DS	1	; $4C
    300 U104d		       00	   DF5BOT     DS	1	; $4D
    301 U104e		       00	   DF6BOT     DS	1	; $4E
    302 U104f		       00	   DF7BOT     DS	1	; $4F
    303 U1050
    304 U1050							;----------------------------------------
    305 U1050							; Data Fetcher, Low Pointer
    306 U1050							;----------------------------------------
    307 U1050							; These are used in conjunction with DFxHI to point a Data Fetcher to the data
    308 U1050							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    309 U1050							;----------------------------------------
    310 U1050		       00	   DF0LOW     DS	1	; $50
    311 U1051		       00	   DF1LOW     DS	1	; $51
    312 U1052		       00	   DF2LOW     DS	1	; $52
    313 U1053		       00	   DF3LOW     DS	1	; $53
    314 U1054		       00	   DF4LOW     DS	1	; $54
    315 U1055		       00	   DF5LOW     DS	1	; $55
    316 U1056		       00	   DF6LOW     DS	1	; $56
    317 U1057		       00	   DF7LOW     DS	1	; $57
    318 U1058
    319 U1058							;----------------------------------------
    320 U1058							; Fast Fetch Mode
    321 U1058							;----------------------------------------
    322 U1058							; Fast Fetch Mode enables the fastest way to read DPC+ registers.  Normal
    323 U1058							; reads use LDA Absolute addressing (LDA DF0DATA) which takes 4 cycles to
    324 U1058							; process.  Fast Fetch Mode intercepts LDA Immediate addressing (LDA #<DF0DATA)
    325 U1058							; which takes only 2 cycles!  Only immediate values < $28 are intercepted
    326 U1058							; 
    327 U1058							; set Fast Fetch Mode
    328 U1058							;	LDA #0
    329 U1058							;	STA FASTFETCH
    330 U1058							;
    331 U1058							; then use immediate mode to read the registers, takes just 5 cycles to update
    332 U1058							; any TIA register
    333 U1058							;
    334 U1058							;	LDA #<DF0DATA
    335 U1058							;	STA GRP0
    336 U1058							;
    337 U1058							; when done, turn off Fast Fetch Mode using any non-zero value
    338 U1058							;	LDA #$FF
    339 U1058							;	STA FASTFETCH
    340 U1058							;
    341 U1058							; NOTE: if you forget to turn off FASTFETCH mode, then code like this will not
    342 U1058							;	 work as you expect
    343 U1058							;	LDA #0	; returns a RANDOM NUMBER, not 0.
    344 U1058							;	STA COLUPF
    345 U1058							;----------------------------------------
    346 U1058		       00	   FASTFETCH  DS	1	; $58
    347 U1059
    348 U1059							;----------------------------------------
    349 U1059							; Function Support
    350 U1059							;----------------------------------------
    351 U1059							; Currently only Function 255 is defined, and it is used to call user
    352 U1059							; written ARM routines (or C code compiled for the ARM processor.)
    353 U1059							;
    354 U1059							; PARAMETER is not used by function 255, it may be used by future functions.
    355 U1059							; 
    356 U1059							; call custom ARM routine
    357 U1059							;	LDA #$FF
    358 U1059							;	STA CALLFUNCTION
    359 U1059							;
    360 U1059							; A custom ARM demo will be released in the near future
    361 U1059							;----------------------------------------
    362 U1059		       00	   PARAMETER  DS	1	; $59
    363 U105a		       00	   CALLFUNCTION DS	1	; $5A
    364 U105b
    365 U105b							;----------------------------------------
    366 U105b							; Reserved
    367 U105b							;----------------------------------------
    368 U105b		       00		      DS	1	; $5B	 ; reserved
    369 U105c		       00		      DS	1	; $5C	 ; reserved
    370 U105d
    371 U105d							;----------------------------------------
    372 U105d							; Waveforms
    373 U105d							;----------------------------------------
    374 U105d							; Waveforms are 32 byte tables that define a waveform.  Waveforms must be 32
    375 U105d							; byte aligned, and can only be stored in the 4K Display Data Bank. You MUST
    376 U105d							; define an "OFF" waveform,  comprised of all zeros.  The sum of all waveforms
    377 U105d							; being played should be <= 15, so typically you'll use a maximum of 5 for any
    378 U105d							; given value.
    379 U105d							;
    380 U105d							; Valid values are 0-127 and point to the 4K Display Data bank.  The formula
    381 U105d							; (* & $1fff)/32 as shown below will calculate the value for you
    382 U105d							;
    383 U105d							;
    384 U105d							; example waveforms
    385 U105d							;	align 32		; forces the waveform to a 32 byte boundary
    386 U105d							;SOUND_OFF = (* & $1fff)/32	; calculates waveform pointer
    387 U105d							;	.byte 0,0,0,0,0,0,0,0
    388 U105d							;	.byte 0,0,0,0,0,0,0,0
    389 U105d							;	.byte 0,0,0,0,0,0,0,0
    390 U105d							;	.byte 0,0,0,0,0,0,0,0 
    391 U105d							; 
    392 U105d							;	align 32
    393 U105d							;SINE_WAVE = (* & $1fff)/32
    394 U105d							;	.byte 3,3,3,4,4,5,5,5
    395 U105d							;	.byte 5,5,5,5,4,4,3,3
    396 U105d							;	.byte 3,2,2,1,1,0,0,0
    397 U105d							;	.byte 0,0,0,0,1,1,2,2 
    398 U105d							;
    399 U105d							; usage, set voice 0 to Sine Wave, set voice 1 & 2 off
    400 U105d							;	LDA #SINE_WAVE
    401 U105d							;	STA WAVEFORM0
    402 U105d							;	LDA #SOUND_OFF
    403 U105d							;	STA WAVEFORM1
    404 U105d							;	STA WAVEFORM2	
    405 U105d							;----------------------------------------
    406 U105d		       00	   WAVEFORM0  DS	1	; $5D
    407 U105e		       00	   WAVEFORM1  DS	1	; $5E
    408 U105f		       00	   WAVEFORM2  DS	1	; $5F
    409 U1060
    410 U1060							;----------------------------------------
    411 U1060							; Data Fetcher Push (stack)
    412 U1060							;----------------------------------------
    413 U1060							; The Data Fetchers can also be used to update the contents of the 4K
    414 U1060							; Display Data bank.  Point the Data Fetcher to the data to change,
    415 U1060							; then Push to it.  The Data Fetcher's pointer will be decremented BEFORE
    416 U1060							; the data is written.
    417 U1060							;
    418 U1060							; point Data Fetcher 1 to the sprite data
    419 U1060							;	lda #<DisplayData
    420 U1060							;	sta DF1LOW
    421 U1060							;	lda #>DisplayData
    422 U1060							;	sta DF1HI 
    423 U1060							;
    424 U1060							; then update it
    425 U1060							;	LDA #$FF
    426 U1060							;	STA DF1PUSH ; changes data at DisplayData - 1
    427 U1060							;	LDA #$81
    428 U1060							;	STA DF1OUSH ; changes data at DisplayData - 2
    429 U1060							;----------------------------------------
    430 U1060		       00	   DF0PUSH    DS	1	; $60
    431 U1061		       00	   DF1PUSH    DS	1	; $61
    432 U1062		       00	   DF2PUSH    DS	1	; $62
    433 U1063		       00	   DF3PUSH    DS	1	; $63
    434 U1064		       00	   DF4PUSH    DS	1	; $64
    435 U1065		       00	   DF5PUSH    DS	1	; $65
    436 U1066		       00	   DF6PUSH    DS	1	; $66
    437 U1067		       00	   DF7PUSH    DS	1	; $67
    438 U1068
    439 U1068							;----------------------------------------
    440 U1068							; Data Fetcher, High Pointer
    441 U1068							;----------------------------------------
    442 U1068							; These are used in conjunction with DFxLOW to point a Data Fetcher to the data
    443 U1068							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    444 U1068							;----------------------------------------
    445 U1068		       00	   DF0HI      DS	1	; $68
    446 U1069		       00	   DF1HI      DS	1	; $69
    447 U106a		       00	   DF2HI      DS	1	; $6A
    448 U106b		       00	   DF3HI      DS	1	; $6B
    449 U106c		       00	   DF4HI      DS	1	; $6C
    450 U106d		       00	   DF5HI      DS	1	; $6D 
    451 U106e		       00	   DF6HI      DS	1	; $6E 
    452 U106f		       00	   DF7HI      DS	1	; $6F 
    453 U1070
    454 U1070							;----------------------------------------
    455 U1070							; Random Number Initialization
    456 U1070							;----------------------------------------
    457 U1070							; The random number generate defaults to a value that spells out DPC+.
    458 U1070							; Store any value to RRESET to set the random number back to DPC+, or you
    459 U1070							; can use RWRITE0-3 to change the 32 bit value to anything you desire.
    460 U1070							;
    461 U1070							; reset random number
    462 U1070							;	LDA #0
    463 U1070							;	STA RRESET
    464 U1070							;
    465 U1070							; set a specific random number (spells out 2600)
    466 U1070							;	LDA #$32
    467 U1070							;	STA RWRITE0
    468 U1070							;	LDA #$36
    469 U1070							;	STA RWRITE1
    470 U1070							;	LDA #$30
    471 U1070							;	STA RWRITE2
    472 U1070							;	STA RWRITE3
    473 U1070							;
    474 U1070							; NOTE: do not set all 4 bytes to 0, as that will disable the generator.
    475 U1070							;----------------------------------------
    476 U1070		       00	   RRESET     DS	1	; $70
    477 U1071		       00	   RWRITE0    DS	1	; $71
    478 U1072		       00	   RWRITE1    DS	1	; $72
    479 U1073		       00	   RWRITE2    DS	1	; $73
    480 U1074		       00	   RWRITE3    DS	1	; $74
    481 U1075
    482 U1075							;----------------------------------------
    483 U1075							; Notes
    484 U1075							;----------------------------------------
    485 U1075							; These are used to select a value from the frequency table to play.
    486 U1075							; The default table, store in DPC_frequencies.h, only defines frequencies
    487 U1075							; for 1-88, which cover the keys of a piano.  You are free to add additional
    488 U1075							; frequencies from 88-255.  Piano keys are defined at the end of this file
    489 U1075							;
    490 U1075							; set voice 0 to middle C
    491 U1075							;	LDA #C4
    492 U1075							;	STA NOTE0
    493 U1075							;
    494 U1075							; Note: if you are using ARM USER CODE then you can only use notes to 128.
    495 U1075							;----------------------------------------
    496 U1075		       00	   NOTE0      DS	1	; $75
    497 U1076		       00	   NOTE1      DS	1	; $76
    498 U1077		       00	   NOTE2      DS	1	; $77
    499 U1078
    500 U1078							;----------------------------------------
    501 U1078							; Data Fetcher Write (queue)
    502 U1078							;----------------------------------------
    503 U1078							; The Data Fetchers can also be used to update the contents of the 4K
    504 U1078							; Display Data bank.  Point the Data Fetcher to the data to change,
    505 U1078							; then Write to it  The Data Fetcher's pointer will be incremented AFTER
    506 U1078							; the data is written.
    507 U1078							;
    508 U1078							; point Data Fetcher 1 to the sprite data
    509 U1078							;	lda #<SpriteData
    510 U1078							;	sta DF1LOW
    511 U1078							;	lda #>SpriteData
    512 U1078							;	sta DF1HI 
    513 U1078							;
    514 U1078							; then update it
    515 U1078							;	LDA #$FF
    516 U1078							;	STA DF1WRITE ; changes data at SpriteData
    517 U1078							;	LDA #$81
    518 U1078							;	STA DF1WRITE ; changes data at SpriteData + 1
    519 U1078							;----------------------------------------
    520 U1078		       00	   DF0WRITE   DS	1	; $78
    521 U1079		       00	   DF1WRITE   DS	1	; $79
    522 U107a		       00	   DF2WRITE   DS	1	; $7A
    523 U107b		       00	   DF3WRITE   DS	1	; $7B
    524 U107c		       00	   DF4WRITE   DS	1	; $7C
    525 U107d		       00	   DF5WRITE   DS	1	; $7D
    526 U107e		       00	   DF6WRITE   DS	1	; $7E
    527 U107f		       00	   DF7WRITE   DS	1	; $7F
    528 U1080
    529 U1080							;-------------------------------------------------------------------------------
    530 U1080							; The following required for back-compatibility with code which does not use
    531 U1080							; segments.
    532 U1080
    533  8400 ????				      SEG
------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_plain_dpc_2020y_01m_08d_0544t.bas.asm
------- FILE DPCplusbB.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplusbB.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3 U00f5 ????				      SEG.U	vars
      4 U0080					      org	$80
      5 U0080		       00	   player0x   ds	1
      6 U0081		       00	   topP1x     ds	1
      7 U0082		       00	   missile0x  ds	1
      8 U0083		       00	   missile1x  ds	1
      9 U0084		       00	   ballx      ds	1
     10 U0085
     11 U0085		       00 00 00 00*SpriteGfxIndex ds	9
     12 U008e
     13 U008e		       00	   spritedisplay ds	1
     14 U008f
     15 U008f		       00	   player0xcoll ds	1	; to detect p0x colls
     16 U0090		       00	   NewSpriteX ds	1	;		X position
     17 U0090		       00 90	   player1x   =	NewSpriteX
     18 U0091		       00	   player2x   ds	1
     19 U0092		       00	   player3x   ds	1
     20 U0093		       00	   player4x   ds	1
     21 U0094		       00	   player5x   ds	1
     22 U0095		       00	   player6x   ds	1
     23 U0096		       00	   player7x   ds	1
     24 U0097		       00	   player8x   ds	1
     25 U0098		       00	   player9x   ds	1
     26 U0099
     27 U0099		       00	   player0y   ds	1
     28 U009a		       00	   NewSpriteY ds	1	;		Y position
     29 U009a		       00 9a	   player1y   =	NewSpriteY
     30 U009b		       00	   player2y   ds	1
     31 U009c		       00	   player3y   ds	1
     32 U009d		       00	   player4y   ds	1
     33 U009e		       00	   player5y   ds	1
     34 U009f		       00	   player6y   ds	1
     35 U00a0		       00	   player7y   ds	1
     36 U00a1		       00	   player8y   ds	1
     37 U00a2		       00	   player9y   ds	1
     38 U00a3
     39 U00a3		       00 00	   player0color ds	2
     40 U00a5
     41 U00a5		       00	   player0height ds	1
     42 U00a6		       00	   player1height ds	1
     43 U00a7		       00	   player2height ds	1
     44 U00a8		       00	   player3height ds	1
     45 U00a9		       00	   player4height ds	1
     46 U00aa		       00	   player5height ds	1
     47 U00ab		       00	   player6height ds	1
     48 U00ac		       00	   player7height ds	1
     49 U00ad		       00	   player8height ds	1
     50 U00ae		       00	   player9height ds	1
     51 U00af
     52 U00af		       00	   _NUSIZ1    ds	1
     53 U00b0		       00	   NUSIZ2     ds	1
     54 U00b1		       00	   NUSIZ3     ds	1
     55 U00b2		       00	   NUSIZ4     ds	1
     56 U00b3		       00	   NUSIZ5     ds	1
     57 U00b4		       00	   NUSIZ6     ds	1
     58 U00b5		       00	   NUSIZ7     ds	1
     59 U00b6		       00	   NUSIZ8     ds	1
     60 U00b7		       00	   NUSIZ9     ds	1
     61 U00b8
     62 U00b8		       00 00 00    score      ds	3
     63 U00bb		       00	   COLUM0     ds	1
     64 U00bc		       00	   COLUM1     ds	1
     65 U00bd		       00	   player0pointerlo ds	1
     66 U00be		       00	   player0pointerhi ds	1
     67 U00bf
     68 U00bf		       00 85	   RAMcopybegin =	SpriteGfxIndex
     69 U00bf		       00 3a	   RAMcopylength =	*-RAMcopybegin
     70 U00bf
     71 U00bf		       00	   missile0y  ds	1
     72 U00c0		       00	   missile1y  ds	1
     73 U00c1		       00	   bally      ds	1
     74 U00c2
     75 U00c2		       00	   missile0height ds	1
     76 U00c3		       00	   missile1height ds	1
     77 U00c4		       00	   ballheight ds	1
     78 U00c5
     79 U00c5		       00	   statusbarlength ds	1	; needed?
     80 U00c5		       00 c5	   aux3       =	statusbarlength
     81 U00c6
     82 U00c6		       00	   lifecolor  ds	1
     83 U00c6		       00 c6	   pfscorecolor =	lifecolor
     84 U00c7		       00	   aux4       ds	1
     85 U00c8
     86 U00c8		       00	   lifepointer ds	1
     87 U00c9		       00	   lives      ds	1
     88 U00c9		       00 c8	   pfscore1   =	lifepointer
     89 U00c9		       00 c9	   pfscore2   =	lives
     90 U00c9		       00 c8	   aux5       =	pfscore1
     91 U00c9		       00 c9	   aux6       =	pfscore2
     92 U00ca
     93 U00ca		       00	   playfieldpos ds	1
     94 U00cb
     95 U00cb		       00	   temp1      ds	1	; used in sprite flickering
     96 U00cc		       00	   temp2      ds	1	;are obliterated when drawscreen is called.
     97 U00cd		       00	   temp3      ds	1
     98 U00ce		       00	   temp4      ds	1
     99 U00cf		       00	   temp5      ds	1
    100 U00d0		       00	   temp6      ds	1
    101 U00d0		       00 81	   temp7      =	topP1x	; This is used to aid in bankswitching
    102 U00d1
    103 U00d1		       00	   A	      ds	1
    104 U00d1		       00 d1	   a	      =	A
    105 U00d2		       00	   B	      ds	1
    106 U00d2		       00 d2	   b	      =	B
    107 U00d3		       00	   C	      ds	1
    108 U00d3		       00 d3	   c	      =	C
    109 U00d4		       00	   D	      ds	1
    110 U00d4		       00 d4	   d	      =	D
    111 U00d5		       00	   E	      ds	1
    112 U00d5		       00 d5	   e	      =	E
    113 U00d6		       00	   F	      ds	1
    114 U00d6		       00 d6	   f	      =	F
    115 U00d7		       00	   G	      ds	1
    116 U00d7		       00 d7	   g	      =	G
    117 U00d8		       00	   H	      ds	1
    118 U00d8		       00 d8	   h	      =	H
    119 U00d9		       00	   I	      ds	1
    120 U00d9		       00 d9	   i	      =	I
    121 U00da		       00	   J	      ds	1
    122 U00da		       00 da	   j	      =	J
    123 U00db		       00	   K	      ds	1
    124 U00db		       00 db	   k	      =	K
    125 U00dc		       00	   L	      ds	1
    126 U00dc		       00 dc	   l	      =	L
    127 U00dd		       00	   M	      ds	1
    128 U00dd		       00 dd	   m	      =	M
    129 U00de		       00	   N	      ds	1
    130 U00de		       00 de	   n	      =	N
    131 U00df		       00	   O	      ds	1
    132 U00df		       00 df	   o	      =	O
    133 U00e0		       00	   P	      ds	1
    134 U00e0		       00 e0	   p	      =	P
    135 U00e1		       00	   Q	      ds	1
    136 U00e1		       00 e1	   q	      =	Q
    137 U00e2		       00	   R	      ds	1
    138 U00e2		       00 e2	   r	      =	R
    139 U00e3		       00	   S	      ds	1
    140 U00e3		       00 e3	   s	      =	S
    141 U00e4		       00	   T	      ds	1
    142 U00e4		       00 e4	   t	      =	T
    143 U00e5		       00	   U	      ds	1
    144 U00e5		       00 e5	   u	      =	U
    145 U00e6		       00	   V	      ds	1
    146 U00e6		       00 e6	   v	      =	V
    147 U00e7		       00	   W	      ds	1
    148 U00e7		       00 e7	   w	      =	W
    149 U00e8		       00	   X	      ds	1
    150 U00e8		       00 e8	   x	      =	X
    151 U00e9		       00	   Y	      ds	1
    152 U00e9		       00 e9	   y	      =	Y
    153 U00ea		       00	   Z	      ds	1
    154 U00ea		       00 ea	   z	      =	Z
    155 U00eb		       00	   scorecolor ds	1
    156 U00ec
    157 U00ec		       00	   var0       ds	1
    158 U00ed		       00	   var1       ds	1
    159 U00ee		       00	   var2       ds	1
    160 U00ef		       00	   var3       ds	1
    161 U00f0		       00	   var4       ds	1
    162 U00f1		       00	   var5       ds	1
    163 U00f2		       00	   var6       ds	1
    164 U00f3		       00	   var7       ds	1
    165 U00f4		       00	   var8       ds	1
    166 U00f5
 free ram: 0
    167 U00f5					      echo	"free ram:",($f5-*)d
    168 U00f5
    169 U00f5		       00 f6	   stack1     =	$f6
    170 U00f5		       00 f7	   stack2     =	$f7
    171 U00f5		       00 f8	   stack3     =	$f8
    172 U00f5		       00 f9	   stack4     =	$f9
    173 U00f5							; the stack bytes above may be used in the kernel
    174 U00f5							; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    175 U00f5
    176 U00f5					      MAC	return
    177 U00f5					      ifnconst	bankswitch
    178 U00f5					      rts
    179 U00f5					      else
    180 U00f5					      jmp	BS_return
    181 U00f5					      endif
    182 U00f5					      ENDM		; auto-return from either a regular or bankswitched module
    183  8400 ????				      seg
    184  8400 ????	       10 00	   rand       =	RANDOM0NEXT
    185  8400 ????	       00 d3	   KERNEL_LINES =	178*76/64	; warning: not all values will work
    186  8400 ????	       00 a7	   OVERSCAN_LINES =	128+33*76/64	; again, not all values work
    187  8400 ????	       d1 a4	   C_function =	FETCHER_BEGIN
    188  8400 ????	       d1 a8	   CcodeData  =	C_function + 4
    189  8400 ????	       d1 e2	   playerpointers =	CcodeData + RAMcopylength
    190  8400 ????	       d2 08	   P1GFX      =	playerpointers + 38
    191  8400 ????	       d3 08	   P1COLOR    =	P1GFX + 256
    192  8400 ????	       d4 08	   P0GFX      =	P1COLOR + 256
    193  8400 ????	       d5 08	   P0COLOR    =	P0GFX + 256
    194  8400 ????	       d6 08	   PF1L       =	P0COLOR + 256
    195  8400 ????	       d7 08	   PF2L       =	PF1L + 256
    196  8400 ????	       d8 08	   PF1R       =	PF2L + 256
    197  8400 ????	       d9 08	   PF2R       =	PF1R + 256
    198  8400 ????	       da 08	   PFCOLS     =	PF2R + 256
    199  8400 ????	       db 08	   JUMPTABLELO =	PFCOLS + 256
    200  8400 ????	       db 14	   JUMPTABLEHI =	JUMPTABLELO + 12
    201  8400 ????	       db 20	   P1HMP      =	JUMPTABLEHI + 12
    202  8400 ????	       db 2d	   P1SKIP     =	P1HMP + 13
    203  8400 ????	       db 39	   NUSIZREFP  =	P1SKIP + 12
    204  8400 ????	       db 45	   scoredata  =	NUSIZREFP + 12
    205  8400 ????	       db a5	   BKCOLS     =	scoredata + 96
    206  8400 ????	       dc a5	   STACKbegin =	BKCOLS + 256
    207  8400 ????	       dd a5	   USERSTACK  =	STACKbegin + 256	; stack starts here and goes down!!!!
 DPC free RAM= 603
    208  8400 ????				      echo	"DPC free RAM=",($1000-(USERSTACK&$0FFF))d
------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_plain_dpc_2020y_01m_08d_0544t.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"2600basic_variable_redefs.h"
      1  8400 ????						; This file contains variable mapping and other information for the current project.
      2  8400 ????
      3  8400 ????	       00 55	   _SD_Slide_length =	.skipL0191-_SD_Slide
      4  8400 ????
      5  8400 ????	       00 81	   _SD_Fall_length =	.skipL0190-_SD_Fall
      6  8400 ????
      7  8400 ????	       00 51	   _SD_Jump_length =	.skipL0189-_SD_Jump
      8  8400 ????
      9  8400 ????	       00 20	   bscode_length =	32
     10  8400 ????	       00 03	   _c_Slide_Sound =	3
     11  8400 ????
     12  8400 ????	       00 02	   _c_Fall_Sound =	2
     13  8400 ????
     14  8400 ????	       00 01	   _c_Jump_Sound =	1
     15  8400 ????
     16  8400 ????	       00 89	   _c_Edge_Right =	137
     17  8400 ????
     18  8400 ????	       00 0f	   _c_Edge_Left =	15
     19  8400 ????
     20  8400 ????	       00 02	   _c_Edge_Top =	2
     21  8400 ????
     22  8400 ????	       00 e9	   _Bit7_Reset_Restrainer =	y
     23  8400 ????
     24  8400 ????	       00 e9	   _Bit6_Duck_in_Progress =	y
     25  8400 ????
     26  8400 ????	       00 e9	   _Bit5_Ground_Slide_in_Progress =	y
     27  8400 ????
     28  8400 ????	       00 e9	   _Bit4_Flip_P1 =	y
     29  8400 ????
     30  8400 ????	       00 e9	   _Bit3_FireB_Restrainer =	y
     31  8400 ????
     32  8400 ????	       00 e9	   _Bit2_Slide_Right_in_Progress =	y
     33  8400 ????
     34  8400 ????	       00 e9	   _Bit1_Slide_Left_in_Progress =	y
     35  8400 ????
     36  8400 ????	       00 e9	   _Bit0_Fall_in_Progress =	y
     37  8400 ????
     38  8400 ????	       00 e9	   _BitOp_01  =	y
     39  8400 ????
     40  8400 ????	       00 e8	   _Bit6_LR_Joy_Movement =	x
     41  8400 ????
     42  8400 ????	       00 e8	   _BitOp_02  =	x
     43  8400 ????
     44  8400 ????	       00 dd	   _Ch0_Counter =	m
     45  8400 ????
     46  8400 ????	       00 dc	   _Ch0_Duration =	l
     47  8400 ????
     48  8400 ????	       00 db	   _Ch0_Sound =	k
     49  8400 ????
     50  8400 ????	       00 da	   _Frame_Counter =	j
     51  8400 ????
     52  8400 ????	       00 d9	   _Master_Counter =	i
     53  8400 ????
     54  8400 ????	       00 d8	   _Slide_Limit =	h
     55  8400 ????
     56  8400 ????	       00 d7	   _Slide_Speed =	g
     57  8400 ????
     58  8400 ????	       00 d6	   _Slide_Counter =	f
     59  8400 ????
     60  8400 ????	       00 d5	   _Fall_Gravity_Counter =	e
     61  8400 ????
     62  8400 ????	       00 d4	   _Jump_Gravity_Counter =	d
     63  8400 ????
     64  8400 ????	       00 d3	   _Convert_Y =	c
     65  8400 ????
     66  8400 ????	       00 d2	   _Convert_X =	b
     67  8400 ????
     68  8400 ????	       00 80	   _P0_Left_Right =	player0x
     69  8400 ????	       00 2b	   vblank_time =	43
     70  8400 ????	       00 25	   overscan_time =	37
     71  8400 ????	       00 07	   bs_mask    =	7
     72  8400 ????	       00 1c	   bankswitch =	28
     73  8400 ????	       1f f6	   bankswitch_hotspot =	$1FF6
     74  8400 ????	       00 02	   multisprite =	2
------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_plain_dpc_2020y_01m_08d_0544t.bas.asm
      9  0400					      ORG	$400
     10  0400					      RORG	$0
     11  0400					      incbin	DPCplus.arm
     12  1000					      ORG	$1000
     13  1000					      RORG	$1000
     14  1000					      incbin	custom/bin/custom2.bin
     15  1894							; assume custom2.bin > 128 bytes
     16  1894							; repeat $80
     17  1894							; .byte 0
     18  1894							; repend
     19  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
     20  1894
     21  1894							; feel free to modify the score graphics - just keep each digit 8 high
     22  1894							; and keep the conditional compilation stuff intact
     23  1894				  -	      ifconst	ROM2k
     24  1894				  -	      ORG	$F7AC-8
     25  1894					      else
     26  1894					      ifconst	bankswitch
     27  1894				  -	      if	bankswitch == 8
     28  1894				  -	      ORG	$2F94-bscode_length
     29  1894				  -	      RORG	$FF94-bscode_length
     30  1894					      endif
     31  1894				  -	      if	bankswitch == 16
     32  1894				  -	      ORG	$4F94-bscode_length
     33  1894				  -	      RORG	$FF94-bscode_length
     34  1894					      endif
     35  1894				  -	      if	bankswitch == 32
     36  1894				  -	      ORG	$8F94-bscode_length
     37  1894				  -	      RORG	$FF94-bscode_length
     38  1894					      endif
     39  1894				  -	      if	bankswitch == 64
     40  1894				  -	      ORG	$10F80-bscode_length
     41  1894				  -	      RORG	$1FF80-bscode_length
     42  1894					      endif
     43  1894				  -	      else
     44  1894				  -	      ORG	$FF9C
     45  1894					      endif
     46  1894					      endif
     47  1894
     48  1894							; font equates
     49  1894		       00 01	   .21stcentury =	1
     50  1894		       00 02	   alarmclock =	2
     51  1894		       00 03	   handwritten =	3
     52  1894		       00 04	   interrupted =	4
     53  1894		       00 05	   retroputer =	5
     54  1894		       00 06	   whimsey    =	6
     55  1894		       00 07	   tiny       =	7
     56  1894		       00 08	   hex	      =	8
     57  1894
     58  1894				  -	      ifconst	font
     59  1894				  -	      if	font == hex
     60  1894				  -	      ORG	. - 48
     61  1894				  -	      endif
     62  1894					      endif
     63  1894
     64  1894				   scoretable
     65  1894
     66  1894				  -	      ifconst	font
     67  1894				  -	      if	font == .21stcentury
     68  1894				  -	      include	"score_graphics.asm.21stcentury"
     69  1894				  -	      endif
     70  1894				  -	      if	font == alarmclock
     71  1894				  -	      include	"score_graphics.asm.alarmclock"
     72  1894				  -	      endif
     73  1894				  -	      if	font == handwritten
     74  1894				  -	      include	"score_graphics.asm.handwritten"
     75  1894				  -	      endif
     76  1894				  -	      if	font == interrupted
     77  1894				  -	      include	"score_graphics.asm.interrupted"
     78  1894				  -	      endif
     79  1894				  -	      if	font == retroputer
     80  1894				  -	      include	"score_graphics.asm.retroputer"
     81  1894				  -	      endif
     82  1894				  -	      if	font == whimsey
     83  1894				  -	      include	"score_graphics.asm.whimsey"
     84  1894				  -	      endif
     85  1894				  -	      if	font == tiny
     86  1894				  -	      include	"score_graphics.asm.tiny"
     87  1894				  -	      endif
     88  1894				  -	      if	font == hex
     89  1894				  -	      include	"score_graphics.asm.hex"
     90  1894				  -	      endif
     91  1894					      else		; default font
     92  1894
     93  1894		       3c		      .byte.b	%00111100
     94  1895		       66		      .byte.b	%01100110
     95  1896		       66		      .byte.b	%01100110
     96  1897		       66		      .byte.b	%01100110
     97  1898		       66		      .byte.b	%01100110
     98  1899		       66		      .byte.b	%01100110
     99  189a		       66		      .byte.b	%01100110
    100  189b		       3c		      .byte.b	%00111100
    101  189c
    102  189c		       7e		      .byte.b	%01111110
    103  189d		       18		      .byte.b	%00011000
    104  189e		       18		      .byte.b	%00011000
    105  189f		       18		      .byte.b	%00011000
    106  18a0		       18		      .byte.b	%00011000
    107  18a1		       38		      .byte.b	%00111000
    108  18a2		       18		      .byte.b	%00011000
    109  18a3		       08		      .byte.b	%00001000
    110  18a4
    111  18a4		       7e		      .byte.b	%01111110
    112  18a5		       60		      .byte.b	%01100000
    113  18a6		       60		      .byte.b	%01100000
    114  18a7		       3c		      .byte.b	%00111100
    115  18a8		       06		      .byte.b	%00000110
    116  18a9		       06		      .byte.b	%00000110
    117  18aa		       46		      .byte.b	%01000110
    118  18ab		       3c		      .byte.b	%00111100
    119  18ac
    120  18ac		       3c		      .byte.b	%00111100
    121  18ad		       46		      .byte.b	%01000110
    122  18ae		       06		      .byte.b	%00000110
    123  18af		       06		      .byte.b	%00000110
    124  18b0		       1c		      .byte.b	%00011100
    125  18b1		       06		      .byte.b	%00000110
    126  18b2		       46		      .byte.b	%01000110
    127  18b3		       3c		      .byte.b	%00111100
    128  18b4
    129  18b4		       0c		      .byte.b	%00001100
    130  18b5		       0c		      .byte.b	%00001100
    131  18b6		       7e		      .byte.b	%01111110
    132  18b7		       4c		      .byte.b	%01001100
    133  18b8		       4c		      .byte.b	%01001100
    134  18b9		       2c		      .byte.b	%00101100
    135  18ba		       1c		      .byte.b	%00011100
    136  18bb		       0c		      .byte.b	%00001100
    137  18bc
    138  18bc		       3c		      .byte.b	%00111100
    139  18bd		       46		      .byte.b	%01000110
    140  18be		       06		      .byte.b	%00000110
    141  18bf		       06		      .byte.b	%00000110
    142  18c0		       3c		      .byte.b	%00111100
    143  18c1		       60		      .byte.b	%01100000
    144  18c2		       60		      .byte.b	%01100000
    145  18c3		       7e		      .byte.b	%01111110
    146  18c4
    147  18c4		       3c		      .byte.b	%00111100
    148  18c5		       66		      .byte.b	%01100110
    149  18c6		       66		      .byte.b	%01100110
    150  18c7		       66		      .byte.b	%01100110
    151  18c8		       7c		      .byte.b	%01111100
    152  18c9		       60		      .byte.b	%01100000
    153  18ca		       62		      .byte.b	%01100010
    154  18cb		       3c		      .byte.b	%00111100
    155  18cc
    156  18cc		       30		      .byte.b	%00110000
    157  18cd		       30		      .byte.b	%00110000
    158  18ce		       30		      .byte.b	%00110000
    159  18cf		       18		      .byte.b	%00011000
    160  18d0		       0c		      .byte.b	%00001100
    161  18d1		       06		      .byte.b	%00000110
    162  18d2		       42		      .byte.b	%01000010
    163  18d3		       3e		      .byte.b	%00111110
    164  18d4
    165  18d4		       3c		      .byte.b	%00111100
    166  18d5		       66		      .byte.b	%01100110
    167  18d6		       66		      .byte.b	%01100110
    168  18d7		       66		      .byte.b	%01100110
    169  18d8		       3c		      .byte.b	%00111100
    170  18d9		       66		      .byte.b	%01100110
    171  18da		       66		      .byte.b	%01100110
    172  18db		       3c		      .byte.b	%00111100
    173  18dc
    174  18dc		       3c		      .byte.b	%00111100
    175  18dd		       46		      .byte.b	%01000110
    176  18de		       06		      .byte.b	%00000110
    177  18df		       3e		      .byte.b	%00111110
    178  18e0		       66		      .byte.b	%01100110
    179  18e1		       66		      .byte.b	%01100110
    180  18e2		       66		      .byte.b	%01100110
    181  18e3		       3c		      .byte.b	%00111100
    182  18e4
    183  18e4				  -	      ifnconst	DPC_kernel_options
    184  18e4				  -
    185  18e4				  -	      .byte	%00000000
    186  18e4				  -	      .byte	%00000000
    187  18e4				  -	      .byte	%00000000
    188  18e4				  -	      .byte	%00000000
    189  18e4				  -	      .byte	%00000000
    190  18e4				  -	      .byte	%00000000
    191  18e4				  -	      .byte	%00000000
    192  18e4				  -	      .byte	%00000000
    193  18e4				  -
    194  18e4					      endif
    195  18e4
    196  18e4					      endif
    197  18e4
    198  18e4				  -	      ifconst	ROM2k
    199  18e4				  -	      ORG	$F7FC
    200  18e4					      else
    201  18e4					      ifconst	bankswitch
    202  18e4				  -	      if	bankswitch == 8
    203  18e4				  -	      ORG	$2FF4-bscode_length
    204  18e4				  -	      RORG	$FFF4-bscode_length
    205  18e4					      endif
    206  18e4				  -	      if	bankswitch == 16
    207  18e4				  -	      ORG	$4FF4-bscode_length
    208  18e4				  -	      RORG	$FFF4-bscode_length
    209  18e4					      endif
    210  18e4				  -	      if	bankswitch == 32
    211  18e4				  -	      ORG	$8FF4-bscode_length
    212  18e4				  -	      RORG	$FFF4-bscode_length
    213  18e4					      endif
    214  18e4				  -	      if	bankswitch == 64
    215  18e4				  -	      ORG	$10FE0-bscode_length
    216  18e4				  -	      RORG	$1FFE0-bscode_length
    217  18e4					      endif
    218  18e4				  -	      else
    219  18e4				  -	      ORG	$FFFC
    220  18e4					      endif
    221  18e4					      endif
    222  18e4							; Provided under the CC0 license. See the included LICENSE.txt for details.
    223  18e4
    224  18e4				   start
    225  18e4		       78		      sei
    226  18e5		       d8		      cld
    227  18e6		       a0 00		      ldy	#0
    228  18e8		       a5 d0		      lda	$D0
    229  18ea		       c9 2c		      cmp	#$2C	;check RAM location #1
    230  18ec		       d0 07		      bne	MachineIs2600
    231  18ee		       a5 d1		      lda	$D1
    232  18f0		       c9 a9		      cmp	#$A9	;check RAM location #2
    233  18f2		       d0 01		      bne	MachineIs2600
    234  18f4		       88		      dey
    235  18f5				   MachineIs2600
    236  18f5		       a2 00		      ldx	#0
    237  18f7		       8a		      txa
    238  18f8				   clearmem
    239  18f8		       e8		      inx
    240  18f9		       9a		      txs
    241  18fa		       48		      pha
    242  18fb		       d0 fb		      bne	clearmem
    243  18fd		       84 cb		      sty	temp1
    244  18ff		       a2 08		      ldx	#8
    245  1901		       86 ca		      stx	playfieldpos
    246  1903		       8e 58 10 	      stx	FASTFETCH
    247  1906		       a2 08		      ldx	#8
    248  1908		       a9 e0		      lda	#224
    249  190a				   inityloop
    250  190a		       95 9a		      sta	player1y,x
    251  190c		       ca		      dex
    252  190d		       10 fb		      bpl	inityloop
    253  190f
    254  190f		       a9 01		      lda	#1
    255  1911		       85 0a		      sta	CTRLPF
    256  1913		       ad 84 02 	      lda	INTIM
    257  1916		       8d 71 10 	      sta	RWRITE0
    258  1919		       a9 00		      lda	#0
    259  191b		       8d 38 10 	      STA	DF0FRACINC
    260  191e		       8d 39 10 	      STA	DF1FRACINC
    261  1921		       8d 3a 10 	      STA	DF2FRACINC
    262  1924		       8d 3b 10 	      STA	DF3FRACINC
    263  1927		       8d 3c 10 	      STA	DF4FRACINC
    264  192a		       8d 3e 10 	      STA	DF6FRACINC
    265  192d		       a9 a5		      lda	#<USERSTACK
    266  192f		       8d 57 10 	      STA	DF7LOW
    267  1932		       a9 0d		      lda	#(>USERSTACK) & $0F
    268  1934		       8d 6f 10 	      STA	DF7HI
    269  1937		       a9 ff		      lda	#255
    270  1939		       8d 5a 10 	      sta	CALLFUNCTION	; zero-fill fetcher
    271  193c
    272  193c		       a9 1f		      lda	#>(game-1)
    273  193e		       48		      pha
    274  193f		       a9 90		      lda	#<(game-1)
    275  1941		       48		      pha
    276  1942		       48		      pha
    277  1943		       48		      pha
    278  1944		       a2 01		      ldx	#1
    279  1946		       4c ee df 	      jmp	BS_jsr
    280  1949				   drawscreen
    281  1949		       a9 01		      lda	#1
    282  194b		       85 2c		      sta	CXCLR
    283  194d		       85 09		      sta	COLUBK	; REVENG - don't start with the lastline color
    284  194f
    285  194f				   fufu
    286  194f		       ad 84 02 	      lda	INTIM
    287  1952		       30 fb		      bmi	fufu
    288  1954
      0  1954					      VERTICAL_SYNC
      1  1954		       a9 02		      LDA	#$02
      2  1956		       85 02		      STA	WSYNC
      3  1958		       85 00		      STA	VSYNC
      4  195a		       85 02		      STA	WSYNC
      5  195c		       85 02		      STA	WSYNC
      6  195e		       4a		      LSR
      7  195f		       85 02		      STA	WSYNC
      8  1961		       85 00		      STA	VSYNC
    290  1963
    291  1963		       a9 a9		      lda	#41+128	;was 37 - do more w/c code
    292  1965		       8d 96 02 	      sta	TIM64T
    293  1968
    294  1968							; adjust for pfpos?
    295  1968
    296  1968							; set zero to properly enter C code
    297  1968		       a9 a4		      lda	#<C_function
    298  196a		       8d 50 10 	      sta	DF0LOW
    299  196d		       a9 01		      lda	#(>C_function) & $0F
    300  196f		       8d 68 10 	      sta	DF0HI
    301  1972		       a9 00		      lda	#0
    302  1974		       8d 78 10 	      sta	DF0WRITE
    303  1977
    304  1977							; REVENG - pass the number of vsprites we want...
    305  1977					      ifnconst	dpcspritemax
    306  1977				  -	      ifconst	readpaddle
    307  1977				  -	      lda	#8
    308  1977					      else
    309  1977		       a9 09		      lda	#9
    310  1979					      endif
    311  1979				  -	      else
    312  1979				  -	      lda	#dpcspritemax
    313  1979					      endif
    314  1979		       8d 78 10 	      sta	DF0WRITE
    315  197c
    316  197c		       a5 80		      lda	player0x
    317  197e		       85 8f		      sta	player0xcoll	; detect p0x colls
    318  1980
    319  1980							; copy RAM to fetcher for C-code
    320  1980		       a9 e2		      lda	#<(CcodeData + RAMcopylength)
    321  1982		       8d 50 10 	      sta	DF0LOW
    322  1985		       a9 01		      lda	#(>(CcodeData + RAMcopylength)) & $0F
    323  1987		       8d 68 10 	      sta	DF0HI
    324  198a		       a2 39		      ldx	#RAMcopylength-1
    325  198c				   copy2fetcherloop
    326  198c		       b5 85		      lda	RAMcopybegin,x
    327  198e		       8d 60 10 	      sta	DF0PUSH
    328  1991		       ca		      dex
    329  1992		       10 f8		      bpl	copy2fetcherloop
    330  1994
    331  1994		       a9 ff		      lda	#255
    332  1996		       8d 5a 10 	      sta	CALLFUNCTION
    333  1999
    334  1999							; copy modified data back (just need first 6 bytes, which is sprite sort data)
    335  1999		       a2 ed		      ldx	#256-19
    336  199b				   copyfromfetcherloop
    337  199b		       ad 08 10 	      lda	DF0DATA
    338  199e		       95 98		      sta	RAMcopybegin+19,x
    339  19a0		       e8		      inx
    340  19a1		       30 f8		      bmi	copyfromfetcherloop
    341  19a3
    342  19a3		       20 3a 1e 	      jsr	kernel_setup
    343  19a6		       85 02		      sta	WSYNC
    344  19a8		       a0 80		      ldy	#$80
    345  19aa		       84 20		      sty	HMP0
    346  19ac		       84 21		      sty	HMP1
    347  19ae		       84 22		      sty	HMM0
    348  19b0		       84 23		      sty	HMM1
    349  19b2		       84 24		      sty	HMBL
    350  19b4
    351  19b4							; run possible vblank bB code
    352  19b4				  -	      ifconst	vblank_bB_code
    353  19b4				  -	      jsr	vblank_bB_code
    354  19b4					      endif
    355  19b4
    356  19b4		       20 02 1d 	      jsr	set_fetchers
    357  19b7
    358  19b7		       a2 07		      ldx	#7
    359  19b9				   setloopfrac
    360  19b9		       bd 7d 1d 	      lda	dffraclow,x
    361  19bc		       9d 28 10 	      sta	DF0FRACLOW,x
    362  19bf		       bd 85 1d 	      lda	dffrachi,x
    363  19c2		       9d 30 10 	      sta	DF0FRACHI,x
    364  19c5		       ca		      dex
    365  19c6		       10 f1		      bpl	setloopfrac
    366  19c8							; lda #255
    367  19c8		       8e 3d 10 	      STx	DF5FRACINC	; x=255 right now
    368  19cb		       8e 3f 10 	      STx	DF7FRACINC
    369  19ce		       ad 1d 10 	      lda	DF5FRACDATA	; priming read
    370  19d1		       ad 1f 10 	      lda	DF7FRACDATA	; priming read
    371  19d4
    372  19d4		       a6 85		      ldx	SpriteGfxIndex
    373  19d6		       b5 af		      lda	_NUSIZ1,x	; top NUSIZ/REFP
    374  19d8		       85 05		      sta	NUSIZ1
    375  19da		       85 0c		      sta	REFP1
    376  19dc
    377  19dc							;REVENG - allow P0 to wrap at the top
    378  19dc				   startwrapfix
    379  19dc		       a9 ff		      lda	#255
    380  19de		       85 cc		      sta	temp2
    381  19e0		       18		      clc
    382  19e1		       a5 99		      lda	player0y
    383  19e3		       65 a5		      adc	player0height
    384  19e5		       38		      sec
    385  19e6		       c5 a5		      cmp	player0height
    386  19e8		       90 04		      bcc	skipwrapfix
    387  19ea		       a9 00		      lda	#0
    388  19ec		       85 cc		      sta	temp2
    389  19ee				   skipwrapfix
    390  19ee
    391  19ee		       38		      sec
    392  19ef		       a9 08		      lda	#<P0GFX
    393  19f1		       e5 99		      sbc	player0y
    394  19f3		       8d 52 10 	      sta	DF2LOW
    395  19f6		       a9 d4		      lda	#>P0GFX
    396  19f8							;sbc #0
    397  19f8		       e5 cc		      sbc	temp2
    398  19fa		       8d 6a 10 	      sta	DF2HI
    399  19fd		       a9 07		      lda	#<(P0GFX-1)
    400  19ff		       8d 42 10 	      sta	DF2TOP
    401  1a02		       38		      sec
    402  1a03		       65 a5		      adc	player0height
    403  1a05		       8d 4a 10 	      sta	DF2BOT
    404  1a08
    405  1a08							;REVENG - 1/2 of the COLUM0 fix. the rest is in main.c
    406  1a08		       a9 08		      lda	#<(P0COLOR)
    407  1a0a		       8d 50 10 	      sta	DF0LOW
    408  1a0d		       85 cc		      sta	temp2
    409  1a0f		       a9 d5		      lda	#>(P0COLOR)
    410  1a11		       8d 68 10 	      sta	DF0HI
    411  1a14
    412  1a14							; ball
    413  1a14		       a9 07		      lda	#<(P1GFX-1)
    414  1a16		       18		      clc
    415  1a17		       65 c1		      adc	bally
    416  1a19		       8d 43 10 	      sta	DF3TOP
    417  1a1c		       38		      sec
    418  1a1d		       65 c4		      adc	ballheight
    419  1a1f		       8d 4b 10 	      sta	DF3BOT
    420  1a22
    421  1a22							; missile0
    422  1a22		       a5 cc		      lda	temp2
    423  1a24		       18		      clc
    424  1a25		       65 bf		      adc	missile0y
    425  1a27		       8d 40 10 	      sta	DF0TOP
    426  1a2a		       38		      sec
    427  1a2b		       65 c2		      adc	missile0height
    428  1a2d		       8d 48 10 	      sta	DF0BOT
    429  1a30
    430  1a30
    431  1a30				   fuu
    432  1a30		       ad 84 02 	      lda	INTIM
    433  1a33		       30 fb		      bmi	fuu
    434  1a35		       85 02		      sta	WSYNC
    435  1a37							;     ldy #$80
    436  1a37							;     sty HMP0
    437  1a37							;     sty HMP1
    438  1a37							;     sty HMM0 
    439  1a37							;     sty HMM1
    440  1a37							;     sty HMBL
    441  1a37							; relocated code above prior to vblank, to allow for Cosmic Ark starfield
    442  1a37							; and/or skewed players
      0  1a37					      sleep	17
      1  1a37				   .CYCLES    SET	17
      2  1a37
      3  1a37				  -	      IF	.CYCLES < 2
      4  1a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a37				  -	      ERR
      6  1a37					      ENDIF
      7  1a37
      8  1a37					      IF	.CYCLES & 1
      9  1a37					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a37		       04 00		      nop	0
     11  1a39				  -	      ELSE
     12  1a39				  -	      bit	VSYNC
     13  1a39					      ENDIF
     14  1a39				   .CYCLES    SET	.CYCLES - 3
     15  1a39					      ENDIF
     16  1a39
     17  1a39					      REPEAT	.CYCLES / 2
     18  1a39		       ea		      nop
     17  1a39					      REPEND
     18  1a3a		       ea		      nop
     17  1a3a					      REPEND
     18  1a3b		       ea		      nop
     17  1a3b					      REPEND
     18  1a3c		       ea		      nop
     17  1a3c					      REPEND
     18  1a3d		       ea		      nop
     17  1a3d					      REPEND
     18  1a3e		       ea		      nop
     17  1a3e					      REPEND
     18  1a3f		       ea		      nop
     19  1a40					      REPEND
    444  1a40
    445  1a40		       a9 d3		      lda	#KERNEL_LINES
    446  1a42		       8d 96 02 	      sta	TIM64T
    447  1a45		       a9 01		      lda	#1
    448  1a47		       85 27		      sta	VDELBL
    449  1a49		       85 25		      sta	VDELP0
    450  1a4b
    451  1a4b							; missile1
    452  1a4b		       a9 07		      lda	#<(P1COLOR-1)
    453  1a4d		       18		      clc
    454  1a4e		       65 c0		      adc	missile1y
    455  1a50		       8d 41 10 	      sta	DF1TOP
    456  1a53		       38		      sec
    457  1a54		       65 c3		      adc	missile1height
    458  1a56		       8d 49 10 	      sta	DF1BOT
    459  1a59
    460  1a59		       a9 00		      lda	#0
    461  1a5b		       85 01		      sta	VBLANK
    462  1a5d		       8d 58 10 	      sta	FASTFETCH
    463  1a60							;sleep 7
    464  1a60		       a9 12		      lda	#<DF2DATAW	; REVENG - added so GRP0 is at TOP
    465  1a62		       85 1b		      STA	GRP0	; 36 (VDEL)   ; ""
      0  1a64					      sleep	2	; ""
      1  1a64				   .CYCLES    SET	2
      2  1a64
      3  1a64				  -	      IF	.CYCLES < 2
      4  1a64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a64				  -	      ERR
      6  1a64					      ENDIF
      7  1a64
      8  1a64				  -	      IF	.CYCLES & 1
      9  1a64				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a64				  -	      nop	0
     11  1a64				  -	      ELSE
     12  1a64				  -	      bit	VSYNC
     13  1a64				  -	      ENDIF
     14  1a64				  -.CYCLES    SET	.CYCLES - 3
     15  1a64					      ENDIF
     16  1a64
     17  1a64					      REPEAT	.CYCLES / 2
     18  1a64		       ea		      nop
     19  1a65					      REPEND
    467  1a65
    468  1a65		       a9 18		      lda	#<DF0FRACDATA
    469  1a67		       85 0e		      sta	PF1	; (PF1L)
    470  1a69
    471  1a69							; enter at cycle ??
    472  1a69				   loop
    473  1a69		       a9 08		      lda	#<DF0DATA	;74
    474  1a6b		       85 06		      STA	COLUP0	; 1
    475  1a6d		       a9 09		      lda	#<DF1DATA	;3
    476  1a6f				   loop2
    477  1a6f		       85 07		      STA	COLUP1	; 6
    478  1a71		       a9 0b		      lda	#<DF3DATA
    479  1a73		       85 1c		      STA	GRP1	; 11
    480  1a75		       a9 20		      lda	#<DF0FLAG
    481  1a77		       85 1d		      STA	ENAM0	; 16
    482  1a79
    483  1a79		       a9 1e		      lda	#<DF6FRACDATA
    484  1a7b		       85 09		      sta	COLUBK	; 21
    485  1a7d		       a9 1c		      lda	#<DF4FRACDATA
    486  1a7f		       85 08		      sta	COLUPF	; 26
    487  1a81		       a9 19		      lda	#<DF1FRACDATA
    488  1a83		       85 0f		      sta	PF2	; 31 (PF2L)
    489  1a85				   loop3
    490  1a85		       a9 12		      lda	#<DF2DATAW
    491  1a87		       85 1b		      STA	GRP0	; 36 (VDEL)
    492  1a89		       a9 23		      lda	#<DF3FLAG
    493  1a8b		       85 1f		      STA	ENABL	; 41 (VDEL)
    494  1a8d		       a2 70		      ldx	#$70	;in case we get kernel 6
    495  1a8f		       a9 1a		      lda	#<DF2FRACDATA	;45
    496  1a91		       85 0f		      sta	PF2	; 48
    497  1a93		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    498  1a95		       a9 1b		      lda	#<DF3FRACDATA	;53
    499  1a97		       85 0e		      sta	PF1	; 56
    500  1a99		       a9 0c		      lda	#<DF4DATA	; 58 this is the repos info
    501  1a9b		       f0 4d		      beq	repo	;60/61
    502  1a9d				   norepo		; 60
    503  1a9d		       a8		      tay		; 62
    504  1a9e		       a9 08		      lda	#<DF0DATA	; 64
    505  1aa0
    506  1aa0		       ae 84 02 	      ldx	INTIM	; 68 timed for 192 lines
    507  1aa3		       f0 60		      beq	exitkernel	; 70/71
    508  1aa5		       85 2a		      sta	HMOVE	; 73
    509  1aa7
    510  1aa7		       85 06		      STA	COLUP0	; 0
    511  1aa9		       a9 09		      lda	#<DF1DATA	;2
    512  1aab		       85 07		      STA	COLUP1	;5
    513  1aad		       a9 0b		      lda	#<DF3DATA
    514  1aaf		       85 1c		      STA	GRP1	; 10
    515  1ab1		       a9 21		      lda	#<DF1FLAG
    516  1ab3		       85 1e		      STA	ENAM1	; 15
    517  1ab5		       a9 18		      lda	#<DF0FRACDATA
    518  1ab7		       85 0e		      sta	PF1	; 20 (PF1L)
    519  1ab9		       a9 19		      lda	#<DF1FRACDATA
    520  1abb		       85 0f		      sta	PF2	; 25 (PF2L)
    521  1abd		       a9 12		      lda	#<DF2DATAW
    522  1abf		       85 1b		      STA	GRP0	; 30 (VDEL)
    523  1ac1		       a9 23		      lda	#<DF3FLAG
    524  1ac3		       85 1f		      STA	ENABL	; 35 (VDEL)
    525  1ac5		       88		      dey		; 37
    526  1ac6		       8c 64 10 	      STY	DF4PUSH	; 41
    527  1ac9		       a0 80		      ldy	#$80	; 43 no movement next line
    528  1acb		       a9 1a		      lda	#<DF2FRACDATA	;45
    529  1acd		       85 0f		      sta	PF2	; 48
    530  1acf		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    531  1ad1		       a9 1b		      lda	#<DF3FRACDATA	;53
    532  1ad3		       85 0e		      sta	PF1	; 56
    533  1ad5				  -	      ifnconst	DPC_kernel_options
    534  1ad5				  -			;sleep 8 ; REVENG - timing is off - results in a garbled screen
    535  1ad5				  -	      sleep	5	; this is better
    536  1ad5					      else
    537  1ad5		       24 43		      bit	DPC_kernel_options
    538  1ad7					      if	(DPC_kernel_options > $3F)
    539  1ad7		       30 09		      bmi	COLfound
    540  1ad9				  -	      else
    541  1ad9				  -	      bpl	COLfound
    542  1ad9					      endif
    543  1ad9					      endif
    544  1ad9		       86 ce		      stx	temp4	; +3
    545  1adb
    546  1adb				   getbackearly
    547  1adb		       a9 18		      lda	#<DF0FRACDATA	; +2
    548  1add		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    549  1adf		       4c 69 5a 	      JMP	loop+$4000	; 72
    550  1ae2
    551  1ae2					      ifconst	DPC_kernel_options
    552  1ae2				   COLfound
    553  1ae2		       ad 18 10 	      lda	DF0FRACDATA
    554  1ae5		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    555  1ae7		       4c 69 5a 	      JMP	loop+$4000	; 72
    556  1aea					      endif
    557  1aea
    558  1aea				   repo
    559  1aea		       ac 1f 10 	      ldy	DF7FRACDATA	; 65
    560  1aed		       a9 18		      lda	#<DF0FRACDATA	; 67 preload PF1L for next line
    561  1aef				  -	      if	((>repo) > (>norepo))
    562  1aef				  -	      STA	PF1
    563  1aef					      else
    564  1aef		       8d 0e 00 	      STA.w	PF1	; 71 ; sta.w if page doesn't wrap
    565  1af2					      endif
    566  1af2		       a9 08		      lda	#<DF0DATA	;73
    567  1af4		       85 06		      STA	COLUP0	; 0
    568  1af6		       a9 09		      lda	#<DF1DATA
    569  1af8		       85 07		      STA	COLUP1	;5
    570  1afa		       a9 0b		      lda	#<DF3DATA
    571  1afc		       85 1c		      STA	GRP1	; 10
    572  1afe		       a9 21		      lda	#<DF1FLAG
    573  1b00		       85 1e		      STA	ENAM1	; 15
    574  1b02							; repos info holds HMMx
    575  1b02		       6c 0d 10 	      jmp	(DF5DATA)	; 20 grabs df6/df7=lo/hi
    576  1b05
    577  1b05				   exitkernel		; exit the kernel
    578  1b05		       20 c9 5e 	      jsr	scorekernel+$4000	; 1
    579  1b08				   exit
    580  1b08		       a2 ff		      ldx	#255
    581  1b0a		       8e 58 10 	      stx	FASTFETCH
    582  1b0d		       85 02		      sta	WSYNC
    583  1b0f				  -	      ifconst	qtcontroller
    584  1b0f				  -	      lda	qtcontroller
    585  1b0f				  -	      lsr		; bit 0 in carry
    586  1b0f				  -	      lda	#4
    587  1b0f				  -	      ror		; carry into top of A
    588  1b0f					      else
    589  1b0f		       a9 02		      lda	#2
    590  1b11					      endif		; qtcontroller
    591  1b11		       85 01		      STA	VBLANK
    592  1b13		       a9 a7		      lda	#OVERSCAN_LINES
    593  1b15		       8d 96 02 	      sta	TIM64T
    594  1b18		       38		      sec
    595  1b19		       a9 d3		      lda	#KERNEL_LINES
    596  1b1b		       e5 ce		      sbc	temp4
    597  1b1d		       aa		      tax
    598  1b1e		       4a		      lsr
    599  1b1f		       4a		      lsr
    600  1b20		       85 cd		      sta	temp3	; div4
    601  1b22		       4a		      lsr
    602  1b23		       4a		      lsr
    603  1b24		       85 cc		      sta	temp2	; div16
    604  1b26		       4a		      lsr
    605  1b27		       85 cb		      sta	temp1	; div32
    606  1b29		       18		      clc
    607  1b2a		       8a		      txa
    608  1b2b		       65 cc		      adc	temp2
    609  1b2d		       65 cb		      adc	temp1
    610  1b2f		       38		      sec
    611  1b30		       e5 cd		      sbc	temp3
    612  1b32		       85 ce		      sta	temp4	; approx line of first pf coll
      0  1b34					      RETURN
      1  1b34				  -	      ifnconst	bankswitch
      2  1b34				  -	      rts
      3  1b34					      else
      4  1b34		       4c e0 df 	      jmp	BS_return
      5  1b37					      endif
    614  1b37
    615  1b37							; jmp exit
    616  1b37
    617  1b37							; kernels resp1 23/28/33/38/43/48/53/58/63/68/73
    618  1b37
    619  1b37				   kernel1
    620  1b37		       85 11		      sta	RESP1	; 23
    621  1b39		       a9 12		      lda	#<DF2DATAW
    622  1b3b		       85 1b		      STA	GRP0	; 28 (VDEL)
    623  1b3d		       a9 19		      lda	#<DF1FRACDATA
    624  1b3f		       85 0f		      STA	PF2	; 33
    625  1b41		       a9 23		      lda	#<DF3FLAG
    626  1b43		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b45					      sleep	5
      1  1b45				   .CYCLES    SET	5
      2  1b45
      3  1b45				  -	      IF	.CYCLES < 2
      4  1b45				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b45				  -	      ERR
      6  1b45					      ENDIF
      7  1b45
      8  1b45					      IF	.CYCLES & 1
      9  1b45					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b45		       04 00		      nop	0
     11  1b47				  -	      ELSE
     12  1b47				  -	      bit	VSYNC
     13  1b47					      ENDIF
     14  1b47				   .CYCLES    SET	.CYCLES - 3
     15  1b47					      ENDIF
     16  1b47
     17  1b47					      REPEAT	.CYCLES / 2
     18  1b47		       ea		      nop
     19  1b48					      REPEND
    628  1b48		       a9 1a		      lda	#<DF2FRACDATA	;45
    629  1b4a		       85 0f		      sta	PF2	; 48
    630  1b4c		       a9 1b		      lda	#<DF3FRACDATA	;50
    631  1b4e		       85 0e		      sta	PF1	; 53
    632  1b50		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    633  1b52		       85 05		      STA	NUSIZ1	; 58
    634  1b54		       85 0c		      STA	REFP1	; 61
    635  1b56		       4c db 1a 	      jmp	getbackearly	;64
    636  1b59
    637  1b59				   kernel2
    638  1b59		       a9 12		      lda	#<DF2DATAW
    639  1b5b		       85 1b		      STA	GRP0	; 25 (VDEL)
    640  1b5d		       85 11		      sta	RESP1	;28
    641  1b5f		       a9 19		      lda	#<DF1FRACDATA
    642  1b61		       85 0f		      STA	PF2	; 33
    643  1b63		       a9 23		      lda	#<DF3FLAG
    644  1b65		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b67					      sleep	5
      1  1b67				   .CYCLES    SET	5
      2  1b67
      3  1b67				  -	      IF	.CYCLES < 2
      4  1b67				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b67				  -	      ERR
      6  1b67					      ENDIF
      7  1b67
      8  1b67					      IF	.CYCLES & 1
      9  1b67					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b67		       04 00		      nop	0
     11  1b69				  -	      ELSE
     12  1b69				  -	      bit	VSYNC
     13  1b69					      ENDIF
     14  1b69				   .CYCLES    SET	.CYCLES - 3
     15  1b69					      ENDIF
     16  1b69
     17  1b69					      REPEAT	.CYCLES / 2
     18  1b69		       ea		      nop
     19  1b6a					      REPEND
    646  1b6a		       a9 1a		      lda	#<DF2FRACDATA	;45
    647  1b6c		       85 0f		      sta	PF2	; 48
    648  1b6e		       a9 1b		      lda	#<DF3FRACDATA	;50
    649  1b70		       85 0e		      sta	PF1	; 53
    650  1b72		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    651  1b74		       85 05		      STA	NUSIZ1
    652  1b76		       85 0c		      STA	REFP1
    653  1b78		       4c db 1a 	      jmp	getbackearly	;64
    654  1b7b
    655  1b7b				   kernel3
    656  1b7b		       a9 12		      lda	#<DF2DATAW
    657  1b7d		       85 1b		      STA	GRP0	; 25 (VDEL)
    658  1b7f		       a9 19		      lda	#<DF1FRACDATA
    659  1b81		       85 0f		      STA	PF2	; 30
    660  1b83		       85 11		      sta	RESP1	;33
    661  1b85		       a9 23		      lda	#<DF3FLAG
    662  1b87		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b89					      sleep	5
      1  1b89				   .CYCLES    SET	5
      2  1b89
      3  1b89				  -	      IF	.CYCLES < 2
      4  1b89				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b89				  -	      ERR
      6  1b89					      ENDIF
      7  1b89
      8  1b89					      IF	.CYCLES & 1
      9  1b89					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b89		       04 00		      nop	0
     11  1b8b				  -	      ELSE
     12  1b8b				  -	      bit	VSYNC
     13  1b8b					      ENDIF
     14  1b8b				   .CYCLES    SET	.CYCLES - 3
     15  1b8b					      ENDIF
     16  1b8b
     17  1b8b					      REPEAT	.CYCLES / 2
     18  1b8b		       ea		      nop
     19  1b8c					      REPEND
    664  1b8c		       a9 1a		      lda	#<DF2FRACDATA	;45
    665  1b8e		       85 0f		      sta	PF2	; 48
    666  1b90		       a9 1b		      lda	#<DF3FRACDATA	;50
    667  1b92		       85 0e		      sta	PF1	; 53
    668  1b94		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    669  1b96		       85 05		      STA	NUSIZ1
    670  1b98		       85 0c		      STA	REFP1
    671  1b9a		       4c db 1a 	      JMP	getbackearly	; 64
    672  1b9d
    673  1b9d				   kernel4
    674  1b9d		       a9 12		      lda	#<DF2DATAW
    675  1b9f		       85 1b		      STA	GRP0	; 25 (VDEL)
    676  1ba1		       a9 23		      lda	#<DF3FLAG
    677  1ba3		       85 1f		      STA	ENABL	; 30(VDEL)
    678  1ba5		       a9 19		      lda	#<DF1FRACDATA
    679  1ba7		       85 0f		      STA	PF2	; 35
    680  1ba9		       85 11		      sta	RESP1	;38
      0  1bab					      sleep	5
      1  1bab				   .CYCLES    SET	5
      2  1bab
      3  1bab				  -	      IF	.CYCLES < 2
      4  1bab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bab				  -	      ERR
      6  1bab					      ENDIF
      7  1bab
      8  1bab					      IF	.CYCLES & 1
      9  1bab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bab		       04 00		      nop	0
     11  1bad				  -	      ELSE
     12  1bad				  -	      bit	VSYNC
     13  1bad					      ENDIF
     14  1bad				   .CYCLES    SET	.CYCLES - 3
     15  1bad					      ENDIF
     16  1bad
     17  1bad					      REPEAT	.CYCLES / 2
     18  1bad		       ea		      nop
     19  1bae					      REPEND
    682  1bae		       a9 1a		      lda	#<DF2FRACDATA	;45
    683  1bb0		       85 0f		      sta	PF2	; 48
    684  1bb2		       a9 1b		      lda	#<DF3FRACDATA	;50
    685  1bb4		       85 0e		      sta	PF1	; 53
    686  1bb6		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    687  1bb8		       85 05		      STA	NUSIZ1	; 58
    688  1bba		       85 0c		      STA	REFP1	; 61
    689  1bbc		       4c db 1a 	      JMP	getbackearly	; 64
    690  1bbf
    691  1bbf				   kernel5
    692  1bbf		       a9 12		      lda	#<DF2DATAW
    693  1bc1		       85 1b		      STA	GRP0	; (VDEL)
    694  1bc3		       a9 23		      lda	#<DF3FLAG
    695  1bc5		       85 1f		      STA	ENABL	; (VDEL)
    696  1bc7		       a9 19		      lda	#<DF1FRACDATA
    697  1bc9		       85 0f		      STA	PF2	; 35
      0  1bcb					      sleep	5
      1  1bcb				   .CYCLES    SET	5
      2  1bcb
      3  1bcb				  -	      IF	.CYCLES < 2
      4  1bcb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bcb				  -	      ERR
      6  1bcb					      ENDIF
      7  1bcb
      8  1bcb					      IF	.CYCLES & 1
      9  1bcb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bcb		       04 00		      nop	0
     11  1bcd				  -	      ELSE
     12  1bcd				  -	      bit	VSYNC
     13  1bcd					      ENDIF
     14  1bcd				   .CYCLES    SET	.CYCLES - 3
     15  1bcd					      ENDIF
     16  1bcd
     17  1bcd					      REPEAT	.CYCLES / 2
     18  1bcd		       ea		      nop
     19  1bce					      REPEND
    699  1bce		       85 11		      sta	RESP1	;43
    700  1bd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    701  1bd2		       85 0f		      sta	PF2	; 48
    702  1bd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    703  1bd6		       85 0e		      sta	PF1	; 53
    704  1bd8		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    705  1bda		       85 05		      STA	NUSIZ1
    706  1bdc		       85 0c		      STA	REFP1
    707  1bde		       4c db 1a 	      JMP	getbackearly	; 64
    708  1be1
    709  1be1				   kernel6
    710  1be1		       a9 12		      lda	#<DF2DATAW
    711  1be3		       85 1b		      STA	GRP0	; 25 (VDEL)
    712  1be5		       a9 23		      lda	#<DF3FLAG
    713  1be7		       85 1f		      STA	ENABL	; 30 (VDEL)
    714  1be9		       a9 19		      lda	#<DF1FRACDATA
    715  1beb		       85 0f		      STA	PF2	; 35
    716  1bed		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    717  1bef		       85 05		      STA	NUSIZ1	; 40
    718  1bf1		       85 0c		      STA	REFP1	; 43
    719  1bf3		       a9 1a		      lda	#<DF2FRACDATA	;45
    720  1bf5		       85 0f		      sta	PF2	; 48
    721  1bf7		       a9 1b		      lda	#<DF3FRACDATA	;50
    722  1bf9		       85 11		      sta	RESP1	;53
    723  1bfb							; do a move right by 15
    724  1bfb		       85 0e		      sta	PF1	; 56
    725  1bfd		       86 21		      stx	HMP1	; 59
    726  1bff		       a9 19		      lda	#<DF1FRACDATA
    727  1c01		       85 0f		      sta	PF2	; 64 (PF2L)
    728  1c03		       a9 18		      lda	#<DF0FRACDATA
    729  1c05		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    730  1c07		       a9 08		      lda	#<DF0DATA	; 71
    731  1c09		       85 2a		      sta	HMOVE	; 74 adjust to +15 right
    732  1c0b
    733  1c0b		       85 06		      STA	COLUP0	; 1
    734  1c0d		       a9 09		      lda	#<DF1DATA
    735  1c0f		       85 07		      sta	COLUP1	; 6
    736  1c11		       a9 0b		      lda	#<DF3DATA
    737  1c13		       85 1c		      STA	GRP1	; 11
    738  1c15		       a9 20		      lda	#<DF0FLAG
    739  1c17		       85 1d		      STA	ENAM0	; 16
    740  1c19		       a9 1e		      lda	#<DF6FRACDATA
    741  1c1b		       85 09		      STA	COLUBK	; 21
    742  1c1d		       a9 1c		      lda	#<DF4FRACDATA
    743  1c1f		       85 08		      sta	COLUPF	; 26
      0  1c21					      sleep	2
      1  1c21				   .CYCLES    SET	2
      2  1c21
      3  1c21				  -	      IF	.CYCLES < 2
      4  1c21				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c21				  -	      ERR
      6  1c21					      ENDIF
      7  1c21
      8  1c21				  -	      IF	.CYCLES & 1
      9  1c21				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c21				  -	      nop	0
     11  1c21				  -	      ELSE
     12  1c21				  -	      bit	VSYNC
     13  1c21				  -	      ENDIF
     14  1c21				  -.CYCLES    SET	.CYCLES - 3
     15  1c21					      ENDIF
     16  1c21
     17  1c21					      REPEAT	.CYCLES / 2
     18  1c21		       ea		      nop
     19  1c22					      REPEND
    745  1c22		       4c 85 1a 	      jmp	loop3	; 31
    746  1c25
    747  1c25				   kernel7
    748  1c25		       a9 12		      lda	#<DF2DATAW
    749  1c27		       85 1b		      STA	GRP0	; 25 (VDEL)
    750  1c29		       a9 23		      lda	#<DF3FLAG
    751  1c2b		       85 1f		      STA	ENABL	; 30 (VDEL)
    752  1c2d		       a9 19		      lda	#<DF1FRACDATA
    753  1c2f		       85 0f		      STA	PF2	; 35
    754  1c31		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    755  1c33		       85 05		      STA	NUSIZ1	; 40
    756  1c35		       85 0c		      STA	REFP1	; 43
    757  1c37		       a9 1a		      lda	#<DF2FRACDATA	;45
    758  1c39		       85 0f		      sta	PF2	; 48
      0  1c3b					      sleep	2
      1  1c3b				   .CYCLES    SET	2
      2  1c3b
      3  1c3b				  -	      IF	.CYCLES < 2
      4  1c3b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c3b				  -	      ERR
      6  1c3b					      ENDIF
      7  1c3b
      8  1c3b				  -	      IF	.CYCLES & 1
      9  1c3b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c3b				  -	      nop	0
     11  1c3b				  -	      ELSE
     12  1c3b				  -	      bit	VSYNC
     13  1c3b				  -	      ENDIF
     14  1c3b				  -.CYCLES    SET	.CYCLES - 3
     15  1c3b					      ENDIF
     16  1c3b
     17  1c3b					      REPEAT	.CYCLES / 2
     18  1c3b		       ea		      nop
     19  1c3c					      REPEND
    760  1c3c		       85 11		      sta	RESP1	;53
    761  1c3e		       a9 1b		      lda	#<DF3FRACDATA	;55
    762  1c40		       85 0e		      sta	PF1	; 58
      0  1c42					      sleep	3
      1  1c42				   .CYCLES    SET	3
      2  1c42
      3  1c42				  -	      IF	.CYCLES < 2
      4  1c42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c42				  -	      ERR
      6  1c42					      ENDIF
      7  1c42
      8  1c42					      IF	.CYCLES & 1
      9  1c42					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c42		       04 00		      nop	0
     11  1c44				  -	      ELSE
     12  1c44				  -	      bit	VSYNC
     13  1c44					      ENDIF
     14  1c44				   .CYCLES    SET	.CYCLES - 3
     15  1c44					      ENDIF
     16  1c44
     17  1c44				  -	      REPEAT	.CYCLES / 2
     18  1c44				  -	      nop
     19  1c44					      REPEND
    764  1c44		       4c db 1a 	      JMP	getbackearly	; 64
    765  1c47
    766  1c47				   kernel8
    767  1c47		       a9 12		      lda	#<DF2DATAW
    768  1c49		       85 1b		      STA	GRP0	; (VDEL)
    769  1c4b		       a9 23		      lda	#<DF3FLAG
    770  1c4d		       85 1f		      STA	ENABL	; (VDEL)
    771  1c4f		       a9 19		      lda	#<DF1FRACDATA
    772  1c51		       85 0f		      STA	PF2	; 35
    773  1c53		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    774  1c55		       85 05		      STA	NUSIZ1	; 40
    775  1c57		       85 0c		      STA	REFP1	; 43
    776  1c59		       a9 1a		      lda	#<DF2FRACDATA	;45
    777  1c5b		       85 0f		      sta	PF2	; 48
    778  1c5d		       a9 1b		      lda	#<DF3FRACDATA	;50
    779  1c5f		       85 0e		      sta	PF1	; 53
      0  1c61					      sleep	2
      1  1c61				   .CYCLES    SET	2
      2  1c61
      3  1c61				  -	      IF	.CYCLES < 2
      4  1c61				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c61				  -	      ERR
      6  1c61					      ENDIF
      7  1c61
      8  1c61				  -	      IF	.CYCLES & 1
      9  1c61				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c61				  -	      nop	0
     11  1c61				  -	      ELSE
     12  1c61				  -	      bit	VSYNC
     13  1c61				  -	      ENDIF
     14  1c61				  -.CYCLES    SET	.CYCLES - 3
     15  1c61					      ENDIF
     16  1c61
     17  1c61					      REPEAT	.CYCLES / 2
     18  1c61		       ea		      nop
     19  1c62					      REPEND
    781  1c62		       85 11		      sta	RESP1	;58
      0  1c64					      sleep	3
      1  1c64				   .CYCLES    SET	3
      2  1c64
      3  1c64				  -	      IF	.CYCLES < 2
      4  1c64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c64				  -	      ERR
      6  1c64					      ENDIF
      7  1c64
      8  1c64					      IF	.CYCLES & 1
      9  1c64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c64		       04 00		      nop	0
     11  1c66				  -	      ELSE
     12  1c66				  -	      bit	VSYNC
     13  1c66					      ENDIF
     14  1c66				   .CYCLES    SET	.CYCLES - 3
     15  1c66					      ENDIF
     16  1c66
     17  1c66				  -	      REPEAT	.CYCLES / 2
     18  1c66				  -	      nop
     19  1c66					      REPEND
    783  1c66		       4c db 1a 	      JMP	getbackearly	; 64
    784  1c69
    785  1c69				   kernel9
    786  1c69		       a9 12		      lda	#<DF2DATAW
    787  1c6b		       85 1b		      STA	GRP0	; (VDEL)
    788  1c6d		       a9 23		      lda	#<DF3FLAG
    789  1c6f		       85 1f		      STA	ENABL	; (VDEL)
    790  1c71		       a9 19		      lda	#<DF1FRACDATA
    791  1c73		       85 0f		      STA	PF2	; 35
    792  1c75		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    793  1c77		       85 05		      STA	NUSIZ1	; 40
    794  1c79		       85 0c		      STA	REFP1	; 43
    795  1c7b		       a9 1a		      lda	#<DF2FRACDATA	;45
    796  1c7d		       85 0f		      sta	PF2	; 48
    797  1c7f		       a9 1b		      lda	#<DF3FRACDATA	;50
    798  1c81		       85 0e		      sta	PF1	; 53
      0  1c83					      sleep	5
      1  1c83				   .CYCLES    SET	5
      2  1c83
      3  1c83				  -	      IF	.CYCLES < 2
      4  1c83				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c83				  -	      ERR
      6  1c83					      ENDIF
      7  1c83
      8  1c83					      IF	.CYCLES & 1
      9  1c83					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c83		       04 00		      nop	0
     11  1c85				  -	      ELSE
     12  1c85				  -	      bit	VSYNC
     13  1c85					      ENDIF
     14  1c85				   .CYCLES    SET	.CYCLES - 3
     15  1c85					      ENDIF
     16  1c85
     17  1c85					      REPEAT	.CYCLES / 2
     18  1c85		       ea		      nop
     19  1c86					      REPEND
    800  1c86		       a9 18		      lda	#<DF0FRACDATA
    801  1c88		       85 11		      sta	RESP1	;63
      0  1c8a					      sleep	3
      1  1c8a				   .CYCLES    SET	3
      2  1c8a
      3  1c8a				  -	      IF	.CYCLES < 2
      4  1c8a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c8a				  -	      ERR
      6  1c8a					      ENDIF
      7  1c8a
      8  1c8a					      IF	.CYCLES & 1
      9  1c8a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c8a		       04 00		      nop	0
     11  1c8c				  -	      ELSE
     12  1c8c				  -	      bit	VSYNC
     13  1c8c					      ENDIF
     14  1c8c				   .CYCLES    SET	.CYCLES - 3
     15  1c8c					      ENDIF
     16  1c8c
     17  1c8c				  -	      REPEAT	.CYCLES / 2
     18  1c8c				  -	      nop
     19  1c8c					      REPEND
    803  1c8c		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    804  1c8e		       4c 69 1a 	      jmp	loop	;72
    805  1c91
    806  1c91				   kernel10
    807  1c91		       a9 12		      lda	#<DF2DATAW
    808  1c93		       85 1b		      STA	GRP0	; 25 (VDEL)
    809  1c95		       a9 23		      lda	#<DF3FLAG
    810  1c97		       85 1f		      STA	ENABL	; 30 (VDEL)
    811  1c99		       a9 19		      lda	#<DF1FRACDATA
    812  1c9b		       85 0f		      STA	PF2	; 35
    813  1c9d		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    814  1c9f		       85 05		      STA	NUSIZ1	; 40
    815  1ca1		       85 0c		      STA	REFP1	; 43
    816  1ca3		       a9 1a		      lda	#<DF2FRACDATA	;45
    817  1ca5		       85 0f		      sta	PF2	; 48
    818  1ca7		       a9 1b		      lda	#<DF3FRACDATA	;50
    819  1ca9		       85 0e		      sta	PF1	; 53
      0  1cab					      sleep	6
      1  1cab				   .CYCLES    SET	6
      2  1cab
      3  1cab				  -	      IF	.CYCLES < 2
      4  1cab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cab				  -	      ERR
      6  1cab					      ENDIF
      7  1cab
      8  1cab				  -	      IF	.CYCLES & 1
      9  1cab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cab				  -	      nop	0
     11  1cab				  -	      ELSE
     12  1cab				  -	      bit	VSYNC
     13  1cab				  -	      ENDIF
     14  1cab				  -.CYCLES    SET	.CYCLES - 3
     15  1cab					      ENDIF
     16  1cab
     17  1cab					      REPEAT	.CYCLES / 2
     18  1cab		       ea		      nop
     17  1cab					      REPEND
     18  1cac		       ea		      nop
     17  1cac					      REPEND
     18  1cad		       ea		      nop
     19  1cae					      REPEND
    821  1cae		       a9 18		      lda	#<DF0FRACDATA
    822  1cb0		       ae 08 10 	      LDX	DF0DATA	; 65
    823  1cb3		       85 11		      sta	RESP1	; 68
    824  1cb5		       85 0e		      STA	PF1	; 71
    825  1cb7		       a9 09		      lda	#<DF1DATA	; 74
    826  1cb9		       86 06		      STX	COLUP0	; 0
    827  1cbb		       4c 6f 1a 	      jmp	loop2	; 3
    828  1cbe
    829  1cbe				   kernel11
    830  1cbe		       a9 12		      lda	#<DF2DATAW
    831  1cc0		       85 1b		      STA	GRP0	; (VDEL)
    832  1cc2		       a9 23		      lda	#<DF3FLAG
    833  1cc4		       85 1f		      STA	ENABL	; (VDEL)
    834  1cc6		       a9 19		      lda	#<DF1FRACDATA
    835  1cc8		       85 0f		      STA	PF2	; 35
    836  1cca		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    837  1ccc		       85 05		      STA	NUSIZ1
    838  1cce		       85 0c		      STA	REFP1
    839  1cd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    840  1cd2		       85 0f		      sta	PF2	; 48
    841  1cd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    842  1cd6		       85 0e		      sta	PF1	; 53
      0  1cd8					      sleep	3
      1  1cd8				   .CYCLES    SET	3
      2  1cd8
      3  1cd8				  -	      IF	.CYCLES < 2
      4  1cd8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cd8				  -	      ERR
      6  1cd8					      ENDIF
      7  1cd8
      8  1cd8					      IF	.CYCLES & 1
      9  1cd8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cd8		       04 00		      nop	0
     11  1cda				  -	      ELSE
     12  1cda				  -	      bit	VSYNC
     13  1cda					      ENDIF
     14  1cda				   .CYCLES    SET	.CYCLES - 3
     15  1cda					      ENDIF
     16  1cda
     17  1cda				  -	      REPEAT	.CYCLES / 2
     18  1cda				  -	      nop
     19  1cda					      REPEND
    844  1cda		       a9 19		      lda	#<DF1FRACDATA	;45
    845  1cdc		       85 0f		      sta	PF2	; 61
    846  1cde		       ae 08 10 	      LDX	DF0DATA	; 65
    847  1ce1
    848  1ce1		       a9 18		      lda	#<DF0FRACDATA	; 67
    849  1ce3		       85 0e		      sta	PF1	; 70
    850  1ce5		       85 11		      sta	RESP1	; 73
    851  1ce7		       86 06		      STX	COLUP0	; 0
    852  1ce9		       a9 09		      lda	#<DF1DATA	; 2
    853  1ceb		       85 07		      sta	COLUP1	; 5
    854  1ced		       a9 0b		      lda	#<DF3DATA
    855  1cef		       85 1c		      STA	GRP1	; 10
    856  1cf1		       a9 20		      lda	#<DF0FLAG
    857  1cf3		       85 1d		      STA	ENAM0	; 25
    858  1cf5		       a9 1e		      lda	#<DF6FRACDATA
    859  1cf7		       85 09		      STA	COLUBK	; 20
    860  1cf9		       a9 1c		      lda	#<DF4FRACDATA
    861  1cfb		       85 08		      sta	COLUPF	; 25
      0  1cfd					      sleep	3
      1  1cfd				   .CYCLES    SET	3
      2  1cfd
      3  1cfd				  -	      IF	.CYCLES < 2
      4  1cfd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cfd				  -	      ERR
      6  1cfd					      ENDIF
      7  1cfd
      8  1cfd					      IF	.CYCLES & 1
      9  1cfd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cfd		       04 00		      nop	0
     11  1cff				  -	      ELSE
     12  1cff				  -	      bit	VSYNC
     13  1cff					      ENDIF
     14  1cff				   .CYCLES    SET	.CYCLES - 3
     15  1cff					      ENDIF
     16  1cff
     17  1cff				  -	      REPEAT	.CYCLES / 2
     18  1cff				  -	      nop
     19  1cff					      REPEND
    863  1cff		       4c 85 1a 	      jmp	loop3	; 31
    864  1d02
    865  1d02				   set_fetchers
    866  1d02		       ad 6d 1d 	      lda	dflow
    867  1d05		       8d 50 10 	      sta	DF0LOW
    868  1d08		       ad 75 1d 	      lda	dfhigh
    869  1d0b		       8d 68 10 	      sta	DF0HI
    870  1d0e
    871  1d0e		       ad 6e 1d 	      lda	dflow+1
    872  1d11		       8d 51 10 	      sta	DF1LOW
    873  1d14		       ad 76 1d 	      lda	dfhigh+1
    874  1d17		       8d 69 10 	      sta	DF1HI
    875  1d1a
    876  1d1a		       ad 6f 1d 	      lda	dflow+2
    877  1d1d		       8d 52 10 	      sta	DF2LOW
    878  1d20		       ad 77 1d 	      lda	dfhigh+2
    879  1d23		       8d 6a 10 	      sta	DF2HI
    880  1d26
    881  1d26				   set_fetchers36		; sets just 3-6
    882  1d26		       ad 70 1d 	      lda	dflow+3
    883  1d29		       8d 53 10 	      sta	DF3LOW
    884  1d2c		       ad 78 1d 	      lda	dfhigh+3
    885  1d2f		       8d 6b 10 	      sta	DF3HI
    886  1d32
    887  1d32		       ad 71 1d 	      lda	dflow+4
    888  1d35		       8d 54 10 	      sta	DF4LOW
    889  1d38		       ad 79 1d 	      lda	dfhigh+4
    890  1d3b		       8d 6c 10 	      sta	DF4HI
    891  1d3e
    892  1d3e		       ad 72 1d 	      lda	dflow+5
    893  1d41		       8d 55 10 	      sta	DF5LOW
    894  1d44		       ad 7a 1d 	      lda	dfhigh+5
    895  1d47		       8d 6d 10 	      sta	DF5HI
    896  1d4a
    897  1d4a		       ad 73 1d 	      lda	dflow+6
    898  1d4d		       8d 56 10 	      sta	DF6LOW
    899  1d50		       ad 7b 1d 	      lda	dfhigh+6
    900  1d53		       8d 6e 10 	      sta	DF6HI
    901  1d56
    902  1d56		       60		      rts
    903  1d57
    904  1d57							;9d bad
    905  1d57							; the below isn't quite right
    906  1d57							;DF0DATA: COLUP0
    907  1d57							;DF1DATA: COLUP1
    908  1d57							;DF2DATAW: GRP0
    909  1d57							;DF3DATA: GRP1 
    910  1d57							;DF4DATA: 2lk lines until repos/HMP1
    911  1d57							;DF5DATA: low byte of repo kernels (xpos mod 15)
    912  1d57							;DF6DATA: High byte of repo kernels (x pos div 15)
    913  1d57							;DF7DATA: Programmer's stack
    914  1d57							;DF0FRACDATA: PF1L
    915  1d57							;DF1FRACDATA: PF2L
    916  1d57							;DF4FRACDATA: COLUPF
    917  1d57							;DF2FRACDATA: PF2R
    918  1d57							;DF3FRACDATA: PF2L
    919  1d57							;DF5FRACDATA: Sprite NUSIZ1/REFP1 (only during repos)
    920  1d57							;DF6FRACDATA: COLUBK
    921  1d57							;DF7FRACDATA: HMP1
    922  1d57							;DF3FLAG: kernel exit loop ?? (use flags instead?)
    923  1d57							;DF0FLAG: ENAM0
    924  1d57							;DF1FLAG: ENAM1 
    925  1d57							;DF3FLAG: ENABL 
    926  1d57
    927  1d57				   fetcher_address_table
    928  1d57				   kernello
    929  1d57		       37		      .byte.b	<kernel1
    930  1d58		       59		      .byte.b	<kernel2
    931  1d59		       7b		      .byte.b	<kernel3
    932  1d5a		       9d		      .byte.b	<kernel4
    933  1d5b		       bf		      .byte.b	<kernel5
    934  1d5c		       e1		      .byte.b	<kernel6
    935  1d5d		       25		      .byte.b	<kernel7
    936  1d5e		       47		      .byte.b	<kernel8
    937  1d5f		       69		      .byte.b	<kernel9
    938  1d60		       91		      .byte.b	<kernel10
    939  1d61		       be		      .byte.b	<kernel11
    940  1d62				   kernelhi
    941  1d62		       1b		      .byte.b	>kernel1
    942  1d63		       1b		      .byte.b	>kernel2
    943  1d64		       1b		      .byte.b	>kernel3
    944  1d65		       1b		      .byte.b	>kernel4
    945  1d66		       1b		      .byte.b	>kernel5
    946  1d67		       1b		      .byte.b	>kernel6
    947  1d68		       1c		      .byte.b	>kernel7
    948  1d69		       1c		      .byte.b	>kernel8
    949  1d6a		       1c		      .byte.b	>kernel9
    950  1d6b		       1c		      .byte.b	>kernel10
    951  1d6c		       1c		      .byte.b	>kernel11
    952  1d6d				   dflow
    953  1d6d		       08		      .byte.b	<P0COLOR
    954  1d6e		       08		      .byte.b	<P1COLOR
    955  1d6f		       08		      .byte.b	<P0GFX
    956  1d70		       08		      .byte.b	<P1GFX
    957  1d71		       2d		      .byte.b	<P1SKIP
    958  1d72		       08		      .byte.b	<JUMPTABLELO
    959  1d73		       14		      .byte.b	<JUMPTABLEHI
    960  1d74		       a5		      .byte.b	<USERSTACK
    961  1d75				   dfhigh
    962  1d75		       05		      .byte.b	(>P0COLOR) & $0F
    963  1d76		       03		      .byte.b	(>P1COLOR) & $0F
    964  1d77		       04		      .byte.b	(>P0GFX) & $0F
    965  1d78		       02		      .byte.b	(>P1GFX) & $0F
    966  1d79		       0b		      .byte.b	(>P1SKIP) & $0F
    967  1d7a		       0b		      .byte.b	(>JUMPTABLELO) & $0F
    968  1d7b		       0b		      .byte.b	(>JUMPTABLEHI) & $0F
    969  1d7c		       0d		      .byte.b	(>USERSTACK) & $0F
    970  1d7d				   dffraclow
    971  1d7d		       08		      .byte.b	<PF1L
    972  1d7e		       08		      .byte.b	<PF2L
    973  1d7f		       08		      .byte.b	<PF1R
    974  1d80		       08		      .byte.b	<PF2R
    975  1d81		       08		      .byte.b	<PFCOLS
    976  1d82		       39		      .byte.b	<NUSIZREFP
    977  1d83		       a5		      .byte.b	<BKCOLS
    978  1d84		       20		      .byte.b	<P1HMP
    979  1d85				   dffrachi
    980  1d85		       06		      .byte.b	(>PF1L) & $0F
    981  1d86		       07		      .byte.b	(>PF2L) & $0F
    982  1d87		       08		      .byte.b	(>PF1R) & $0F
    983  1d88		       09		      .byte.b	(>PF2R) & $0F
    984  1d89		       0a		      .byte.b	(>PFCOLS) & $0F
    985  1d8a		       0b		      .byte.b	(>NUSIZREFP) & $0F
    986  1d8b		       0b		      .byte.b	(>BKCOLS) & $0F
    987  1d8c		       0b		      .byte.b	(>P1HMP) & $0F
    988  1d8d				   scorepointer
    989  1d8d		       94		      .byte.b	<scoretable
    990  1d8e		       08		      .byte.b	((>scoretable) & $0f) | (((>scoretable) / 2) & $70)
    991  1d8f				   scoresetup		; pointers to digit graphics
    992  1d8f		       45		      .byte.b	<scoredata
    993  1d90		       0b		      .byte.b	(>scoredata) & $0F
    994  1d91				   Hmval		; 112 wuz first
    995  1d91		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240
    996  1d99				   Hmval74
    997  1d99		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128
    998  1da0		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96
    999  1db0		       50 40 30 20*	      .byte.b	80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80
   1000  1dc0		       40 30 20 10*	      .byte.b	64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64
   1001  1dd0		       30 20 10 01*	      .byte.b	48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48
   1002  1de0		       20 10 01 f0*	      .byte.b	32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32
   1003  1df0		       10 01 f0 e0*	      .byte.b	16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16
   1004  1e00		       01 f0 e0 d0*	      .byte.b	1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1
   1005  1e10		       f0 e0 d0 c0*	      .byte.b	240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240
   1006  1e20		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192
   1007  1e32		       b0 a0 90 80*	      .byte.b	176,160,144,128,16,1,240,224
   1008  1e3a
   1009  1e3a
   1010  1e3a				   kernel_setup
   1011  1e3a							;--position P0, top P1, M0, M1, BL
   1012  1e3a		       a2 00		      ldx	#0	; first sprite displayed
   1013  1e3c		       b5 85		      lda	SpriteGfxIndex,x
   1014  1e3e		       aa		      tax
   1015  1e3f		       b5 90		      lda	player1x,x
   1016  1e41		       c9 a0		      cmp	#160
   1017  1e43		       90 0a		      bcc	nostorep1
   1018  1e45		       c9 d0		      cmp	#208
   1019  1e47		       b0 02		      bcs	ksadjustdown
   1020  1e49							; 160-208: minus 160
   1021  1e49							;add 160 is like minus 96
   1022  1e49							; so minus 64
   1023  1e49		       e9 3f		      sbc	#63	;cc
   1024  1e4b				   ksadjustdown
   1025  1e4b							; 209-255: add 160 
   1026  1e4b		       69 9f		      adc	#159	; cs
   1027  1e4d		       95 90		      sta	player1x,x
   1028  1e4f				   nostorep1
   1029  1e4f		       85 02		      sta	WSYNC
   1030  1e51		       a2 04		      ldx	#4
   1031  1e53		       85 81		      sta	topP1x	; cache top p1
   1032  1e55				   HorPosLoop
   1033  1e55		       b5 80		      lda	player0x,X
   1034  1e57		       38		      sec
   1035  1e58				   DivideLoop
   1036  1e58		       e9 0f		      sbc	#15
   1037  1e5a		       b0 fc		      bcs	DivideLoop
      0  1e5c					      sleep	4
      1  1e5c				   .CYCLES    SET	4
      2  1e5c
      3  1e5c				  -	      IF	.CYCLES < 2
      4  1e5c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1e5c				  -	      ERR
      6  1e5c					      ENDIF
      7  1e5c
      8  1e5c				  -	      IF	.CYCLES & 1
      9  1e5c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1e5c				  -	      nop	0
     11  1e5c				  -	      ELSE
     12  1e5c				  -	      bit	VSYNC
     13  1e5c				  -	      ENDIF
     14  1e5c				  -.CYCLES    SET	.CYCLES - 3
     15  1e5c					      ENDIF
     16  1e5c
     17  1e5c					      REPEAT	.CYCLES / 2
     18  1e5c		       ea		      nop
     17  1e5c					      REPEND
     18  1e5d		       ea		      nop
     19  1e5e					      REPEND
   1039  1e5e		       95 10		      sta	RESP0,X
   1040  1e60		       85 02		      sta	WSYNC
   1041  1e62		       ca		      dex		;2
   1042  1e63		       10 f0		      bpl	HorPosLoop	;4/5
   1043  1e65
   1044  1e65		       a4 80		      ldy	player0x	; 7
   1045  1e67		       b9 91 1d 	      lda	Hmval,y	; 11
   1046  1e6a		       85 20		      sta	HMP0	; 14
   1047  1e6c
   1048  1e6c		       a4 81		      ldy	player0x+1
   1049  1e6e		       b9 91 1d 	      lda	Hmval,y
   1050  1e71		       85 21		      sta	HMP0+1	; 24
   1051  1e73
   1052  1e73		       a4 82		      ldy	player0x+2
   1053  1e75		       b9 91 1d 	      lda	Hmval,y
   1054  1e78		       85 22		      sta	HMP0+2	; 34
   1055  1e7a
   1056  1e7a		       a4 83		      ldy	player0x+3
   1057  1e7c		       b9 91 1d 	      lda	Hmval,y
   1058  1e7f		       85 23		      sta	HMP0+3	; 44
   1059  1e81
   1060  1e81		       a4 84		      ldy	player0x+4
   1061  1e83		       b9 91 1d 	      lda	Hmval,y
   1062  1e86		       85 24		      sta	HMP0+4	; 54
   1063  1e88
   1064  1e88		       85 02		      sta	WSYNC
   1065  1e8a		       85 2a		      sta	HMOVE
   1066  1e8c
   1067  1e8c				   myrts
   1068  1e8c		       60		      rts
   1069  1e8d
   1070  1e8d
   1071  1e8d				   pfsetup
   1072  1e8d
   1073  1e8d		       84 cb		      sty	temp1
   1074  1e8f		       85 cc		      sta	temp2
   1075  1e91		       86 cd		      stx	temp3
   1076  1e93		       a2 03		      ldx	#3
   1077  1e95				   pfsetupp
   1078  1e95		       bd 7d 1d 	      lda	dffraclow,x
   1079  1e98		       9d 50 10 	      sta	DF0LOW,x
   1080  1e9b		       bd 85 1d 	      lda	dffrachi,x
   1081  1e9e		       9d 68 10 	      sta	DF0HI,x
   1082  1ea1		       a5 cc		      lda	temp2
   1083  1ea3		       8d 59 10 	      sta	PARAMETER
   1084  1ea6		       a5 cd		      lda	temp3
   1085  1ea8		       8d 59 10 	      sta	PARAMETER
   1086  1eab		       8e 59 10 	      stx	PARAMETER
   1087  1eae		       8c 59 10 	      sty	PARAMETER
   1088  1eb1		       a9 01		      LDA	#1
   1089  1eb3		       8d 5a 10 	      sta	CALLFUNCTION
   1090  1eb6		       18		      clc
   1091  1eb7		       a5 cc		      lda	temp2
   1092  1eb9		       65 cb		      adc	temp1
   1093  1ebb		       85 cc		      sta	temp2
   1094  1ebd		       a5 cd		      lda	temp3
   1095  1ebf		       69 00		      adc	#0
   1096  1ec1		       85 cd		      sta	temp3
   1097  1ec3		       ca		      dex
   1098  1ec4		       10 cf		      bpl	pfsetupp
      0  1ec6					      RETURN
      1  1ec6				  -	      ifnconst	bankswitch
      2  1ec6				  -	      rts
      3  1ec6					      else
      4  1ec6		       4c e0 df 	      jmp	BS_return
      5  1ec9					      endif
   1100  1ec9
   1101  1ec9
   1102  1ec9				   scorekernel
   1103  1ec9				  -	      ifconst	minikernel
   1104  1ec9				  -			;; disable fast fetch, call the minikernel, and re-enable fast fetch
   1105  1ec9				  -	      lda	#255
   1106  1ec9				  -	      sta	FASTFETCH
   1107  1ec9				  -	      jsr	minikernel
   1108  1ec9				  -	      lda	#0
   1109  1ec9				  -	      sta.w	FASTFETCH
   1110  1ec9					      endif
   1111  1ec9		       a6 eb		      ldx	scorecolor
   1112  1ecb		       86 06		      stx	COLUP0
   1113  1ecd		       86 07		      stx	COLUP1
   1114  1ecf		       a2 00		      ldx	#0
   1115  1ed1		       86 0e		      STx	PF1
   1116  1ed3		       86 0b		      stx	REFP0
   1117  1ed5		       86 0c		      stx	REFP1
   1118  1ed7		       86 1b		      STx	GRP0
   1119  1ed9		       86 1c		      STx	GRP1
   1120  1edb		       86 0f		      STx	PF2
   1121  1edd		       86 2b		      stx	HMCLR
   1122  1edf		       86 1d		      stx	ENAM0
   1123  1ee1		       86 1e		      stx	ENAM1
   1124  1ee3		       86 1f		      stx	ENABL
   1125  1ee5
   1126  1ee5
   1127  1ee5				  -	      ifconst	pfscore
   1128  1ee5				  -	      lda	pfscorecolor
   1129  1ee5				  -	      sta	COLUPF
   1130  1ee5					      endif
   1131  1ee5
   1132  1ee5				  -	      ifconst	noscore
   1133  1ee5				  -	      ldx	#10
   1134  1ee5				  -noscoreloop
   1135  1ee5				  -	      sta	WSYNC
   1136  1ee5				  -	      dex
   1137  1ee5				  -	      bpl	noscoreloop
   1138  1ee5				  -	      rts
   1139  1ee5					      else
   1140  1ee5
   1141  1ee5		       85 2b		      sta	HMCLR
   1142  1ee7		       a2 f0		      ldx	#$f0
   1143  1ee9		       86 20		      stx	HMP0
   1144  1eeb
   1145  1eeb							; set up fetchers 0-5 to handle score digits
   1146  1eeb		       a2 45		      ldx	#<(scoredata)
   1147  1eed		       8e 56 10 	      stx	DF6LOW
   1148  1ef0		       a2 0b		      ldx	#(>(scoredata)) & $0F
   1149  1ef2		       8e 6e 10 	      stx	DF6HI
   1150  1ef5		       a2 4d		      ldx	#<(scoredata+8)
   1151  1ef7		       8e 50 10 	      stx	DF0LOW
   1152  1efa		       a2 0b		      ldx	#(>(scoredata+8)) & $0F
   1153  1efc		       8e 68 10 	      stx	DF0HI
   1154  1eff		       a2 55		      ldx	#<(scoredata+16)
   1155  1f01		       8e 51 10 	      stx	DF1LOW
   1156  1f04							; cycle 0??
   1157  1f04		       a2 0b		      ldx	#(>(scoredata+16)) & $0F
   1158  1f06		       8e 69 10 	      stx	DF1HI
   1159  1f09		       a2 5d		      ldx	#<(scoredata+24)
   1160  1f0b		       8e 52 10 	      stx	DF2LOW
   1161  1f0e		       a2 0b		      ldx	#(>(scoredata+24)) & $0F
   1162  1f10		       8e 6a 10 	      stx	DF2HI
   1163  1f13
   1164  1f13		       85 02		      sta	WSYNC
   1165  1f15		       a2 00		      ldx	#0
   1166  1f17		       86 1b		      STx	GRP0
   1167  1f19		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1168  1f1b
   1169  1f1b		       a2 65		      ldx	#<(scoredata+32)
   1170  1f1d		       8e 53 10 	      stx	DF3LOW
   1171  1f20		       a2 0b		      ldx	#(>(scoredata+32)) & $0F
   1172  1f22		       8e 6b 10 	      stx	DF3HI
   1173  1f25		       a2 6d		      ldx	#<(scoredata+40)
   1174  1f27		       8e 54 10 	      stx	DF4LOW
   1175  1f2a		       a2 0b		      ldx	#(>(scoredata+40)) & $0F
   1176  1f2c		       8e 6c 10 	      stx	DF4HI
   1177  1f2f
   1178  1f2f		       a0 07		      LDY	#7
   1179  1f31		       a2 03		      LDx	#$03
   1180  1f33		       84 25		      STY	VDELP0
   1181  1f35		       85 10		      STA	RESP0
   1182  1f37		       85 11		      STA	RESP1
   1183  1f39		       84 cb		      sty	temp1
   1184  1f3b
   1185  1f3b		       86 04		      STx	NUSIZ0
   1186  1f3d		       86 05		      STx	NUSIZ1
   1187  1f3f		       86 26		      STx	VDELP1
   1188  1f41		       a2 75		      ldx	#<(scoredata+48)
   1189  1f43		       8e 55 10 	      stx	DF5LOW
   1190  1f46		       a2 0b		      ldx	#(>(scoredata+48)) & $0F
   1191  1f48		       8e 6d 10 	      stx	DF5HI
   1192  1f4b		       8d 2a 00 	      STA.w	HMOVE	; cycle 73 ?
   1193  1f4e				   scoreloop
   1194  1f4e		       a9 0e		      lda	#<DF6DATA	;59
   1195  1f50		       85 06		      sta	COLUP0	;62
   1196  1f52		       85 07		      sta	COLUP1	;65
   1197  1f54		       a9 09		      lda	#<DF1DATA	;75
   1198  1f56		       85 1b		      sta	GRP0	;2
   1199  1f58		       a9 08		      lda	#<DF0DATA	;4
   1200  1f5a		       85 1c		      sta	GRP1	;7
   1201  1f5c		       a9 0b		      lda	#<DF3DATA	;9
   1202  1f5e		       85 1b		      sta	GRP0	;12
   1203  1f60
   1204  1f60							; REVENG - rearranged to correct pf write timing and A register overwrite
   1205  1f60				  -	      ifconst	pfscore
   1206  1f60				  -	      lda	pfscore1
   1207  1f60				  -	      sta	PF1
   1208  1f60					      else
      0  1f60					      sleep	6
      1  1f60				   .CYCLES    SET	6
      2  1f60
      3  1f60				  -	      IF	.CYCLES < 2
      4  1f60				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f60				  -	      ERR
      6  1f60					      ENDIF
      7  1f60
      8  1f60				  -	      IF	.CYCLES & 1
      9  1f60				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f60				  -	      nop	0
     11  1f60				  -	      ELSE
     12  1f60				  -	      bit	VSYNC
     13  1f60				  -	      ENDIF
     14  1f60				  -.CYCLES    SET	.CYCLES - 3
     15  1f60					      ENDIF
     16  1f60
     17  1f60					      REPEAT	.CYCLES / 2
     18  1f60		       ea		      nop
     17  1f60					      REPEND
     18  1f61		       ea		      nop
     17  1f61					      REPEND
     18  1f62		       ea		      nop
     19  1f63					      REPEND
   1210  1f63					      endif
      0  1f63					      sleep	5
      1  1f63				   .CYCLES    SET	5
      2  1f63
      3  1f63				  -	      IF	.CYCLES < 2
      4  1f63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f63				  -	      ERR
      6  1f63					      ENDIF
      7  1f63
      8  1f63					      IF	.CYCLES & 1
      9  1f63					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f63		       04 00		      nop	0
     11  1f65				  -	      ELSE
     12  1f65				  -	      bit	VSYNC
     13  1f65					      ENDIF
     14  1f65				   .CYCLES    SET	.CYCLES - 3
     15  1f65					      ENDIF
     16  1f65
     17  1f65					      REPEAT	.CYCLES / 2
     18  1f65		       ea		      nop
     19  1f66					      REPEND
   1212  1f66		       ae 0a 10 	      ldx	DF2DATA	;16
   1213  1f69		       ac 0d 10 	      ldy	DF5DATA	;20
   1214  1f6c		       a9 0c		      lda	#<DF4DATA	;22 
   1215  1f6e
   1216  1f6e		       86 1c		      stx	GRP1	;40
   1217  1f70		       84 1b		      sty	GRP0	;43
   1218  1f72		       85 1c		      sta	GRP1	;46
   1219  1f74		       85 1b		      sta	GRP0	;49
   1220  1f76				  -	      ifconst	pfscore
   1221  1f76				  -	      lda	pfscore2
   1222  1f76				  -	      sta	PF1
   1223  1f76					      else
      0  1f76					      sleep	6
      1  1f76				   .CYCLES    SET	6
      2  1f76
      3  1f76				  -	      IF	.CYCLES < 2
      4  1f76				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f76				  -	      ERR
      6  1f76					      ENDIF
      7  1f76
      8  1f76				  -	      IF	.CYCLES & 1
      9  1f76				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f76				  -	      nop	0
     11  1f76				  -	      ELSE
     12  1f76				  -	      bit	VSYNC
     13  1f76				  -	      ENDIF
     14  1f76				  -.CYCLES    SET	.CYCLES - 3
     15  1f76					      ENDIF
     16  1f76
     17  1f76					      REPEAT	.CYCLES / 2
     18  1f76		       ea		      nop
     17  1f76					      REPEND
     18  1f77		       ea		      nop
     17  1f77					      REPEND
     18  1f78		       ea		      nop
     19  1f79					      REPEND
   1225  1f79					      endif
   1226  1f79							; sleep 2 ;57
      0  1f79					      sleep	6
      1  1f79				   .CYCLES    SET	6
      2  1f79
      3  1f79				  -	      IF	.CYCLES < 2
      4  1f79				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f79				  -	      ERR
      6  1f79					      ENDIF
      7  1f79
      8  1f79				  -	      IF	.CYCLES & 1
      9  1f79				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f79				  -	      nop	0
     11  1f79				  -	      ELSE
     12  1f79				  -	      bit	VSYNC
     13  1f79				  -	      ENDIF
     14  1f79				  -.CYCLES    SET	.CYCLES - 3
     15  1f79					      ENDIF
     16  1f79
     17  1f79					      REPEAT	.CYCLES / 2
     18  1f79		       ea		      nop
     17  1f79					      REPEND
     18  1f7a		       ea		      nop
     17  1f7a					      REPEND
     18  1f7b		       ea		      nop
     19  1f7c					      REPEND
   1228  1f7c		       c6 cb		      dec	temp1	;70
   1229  1f7e		       10 ce		      bpl	scoreloop	;72/73
   1230  1f80		       a2 00		      LDx	#0
   1231  1f82		       86 0e		      stx	PF1
   1232  1f84		       86 1b		      STx	GRP0
   1233  1f86		       86 1c		      STx	GRP1
   1234  1f88		       86 25		      STx	VDELP0
   1235  1f8a		       86 26		      STx	VDELP1	;do we need these
   1236  1f8c		       86 04		      STx	NUSIZ0
   1237  1f8e		       86 05		      STx	NUSIZ1
   1238  1f90
   1239  1f90		       60		      rts
   1240  1f91
   1241  1f91
   1242  1f91					      endif		; noscore
   1243  1f91				   game
   1244  1f91				   .
   1245  1f91							; 
   1246  1f91
   1247  1f91				   .
   1248  1f91							; 
   1249  1f91
   1250  1f91				   .
   1251  1f91							; 
   1252  1f91
   1253  1f91				   .
   1254  1f91							; 
   1255  1f91
   1256  1f91				   .
   1257  1f91							; 
   1258  1f91
   1259  1f91				   .
   1260  1f91							; 
   1261  1f91
   1262  1f91				   .
   1263  1f91							; 
   1264  1f91
   1265  1f91				   .
   1266  1f91							; 
   1267  1f91
   1268  1f91				   .
   1269  1f91							; 
   1270  1f91
   1271  1f91				   .
   1272  1f91							; 
   1273  1f91
   1274  1f91				   .
   1275  1f91							; 
   1276  1f91
   1277  1f91				   .
   1278  1f91							; 
   1279  1f91
   1280  1f91				   .
   1281  1f91							; 
   1282  1f91
   1283  1f91				   .
   1284  1f91							; 
   1285  1f91
   1286  1f91				   .
   1287  1f91							; 
   1288  1f91
   1289  1f91				   .
   1290  1f91							; 
   1291  1f91
   1292  1f91				   .
   1293  1f91							; 
   1294  1f91
   1295  1f91				   .
   1296  1f91							; 
   1297  1f91
   1298  1f91				   .
   1299  1f91							; 
   1300  1f91
   1301  1f91				   .
   1302  1f91							; 
   1303  1f91
   1304  1f91				   .
   1305  1f91							; 
   1306  1f91
   1307  1f91				   .
   1308  1f91							; 
   1309  1f91
   1310  1f91				   .
   1311  1f91							; 
   1312  1f91
   1313  1f91				   .
   1314  1f91							; 
   1315  1f91
   1316  1f91				   .L00 		;  set kernel DPC + 
   1317  1f91
   1318  1f91				   .
   1319  1f91							; 
   1320  1f91
   1321  1f91				   .
   1322  1f91							; 
   1323  1f91
   1324  1f91				   .
   1325  1f91							; 
   1326  1f91
   1327  1f91				   .
   1328  1f91							; 
   1329  1f91
   1330  1f91				   .
   1331  1f91							; 
   1332  1f91
   1333  1f91				   .
   1334  1f91							; 
   1335  1f91
   1336  1f91				   .
   1337  1f91							; 
   1338  1f91
   1339  1f91				   .L01 		;  set tv ntsc
   1340  1f91
   1341  1f91				   .
   1342  1f91							; 
   1343  1f91
   1344  1f91				   .
   1345  1f91							; 
   1346  1f91
   1347  1f91				   .
   1348  1f91							; 
   1349  1f91
   1350  1f91				   .
   1351  1f91							; 
   1352  1f91
   1353  1f91				   .
   1354  1f91							; 
   1355  1f91
   1356  1f91				   .
   1357  1f91							; 
   1358  1f91
   1359  1f91				   .
   1360  1f91							; 
   1361  1f91
   1362  1f91				   .L02 		;  set kernel_options collision(player1,playfield)
   1363  1f91
   1364  1f91		       00 43	   DPC_kernel_options =	CXP1FB+$40
   1365  1f91				   .
   1366  1f91							; 
   1367  1f91
   1368  1f91				   .
   1369  1f91							; 
   1370  1f91
   1371  1f91				   .
   1372  1f91							; 
   1373  1f91
   1374  1f91				   .
   1375  1f91							; 
   1376  1f91
   1377  1f91				   .
   1378  1f91							; 
   1379  1f91
   1380  1f91				   .
   1381  1f91							; 
   1382  1f91
   1383  1f91				   .
   1384  1f91							; 
   1385  1f91
   1386  1f91				   .
   1387  1f91							; 
   1388  1f91
   1389  1f91				   .
   1390  1f91							; 
   1391  1f91
   1392  1f91				   .
   1393  1f91							; 
   1394  1f91
   1395  1f91				   .
   1396  1f91							; 
   1397  1f91
   1398  1f91				   .
   1399  1f91							; 
   1400  1f91
   1401  1f91				   .
   1402  1f91							; 
   1403  1f91
   1404  1f91				   .
   1405  1f91							; 
   1406  1f91
   1407  1f91				   .
   1408  1f91							; 
   1409  1f91
   1410  1f91				   .
   1411  1f91							; 
   1412  1f91
   1413  1f91				   .
   1414  1f91							; 
   1415  1f91
   1416  1f91				   .
   1417  1f91							; 
   1418  1f91
   1419  1f91				   .
   1420  1f91							; 
   1421  1f91
   1422  1f91				   .
   1423  1f91							; 
   1424  1f91
   1425  1f91				   .
   1426  1f91							; 
   1427  1f91
   1428  1f91				   .
   1429  1f91							; 
   1430  1f91
   1431  1f91				   .
   1432  1f91							; 
   1433  1f91
   1434  1f91				   .
   1435  1f91							; 
   1436  1f91
   1437  1f91				   .
   1438  1f91							; 
   1439  1f91
   1440  1f91				   .
   1441  1f91							; 
   1442  1f91
   1443  1f91				   .
   1444  1f91							; 
   1445  1f91
   1446  1f91				   .
   1447  1f91							; 
   1448  1f91
   1449  1f91				   .
   1450  1f91							; 
   1451  1f91
   1452  1f91				   .L03 		;  dim _P0_Left_Right	=  player0x.a
   1453  1f91
   1454  1f91				   .
   1455  1f91							; 
   1456  1f91
   1457  1f91				   .
   1458  1f91							; 
   1459  1f91
   1460  1f91				   .
   1461  1f91							; 
   1462  1f91
   1463  1f91				   .
   1464  1f91							; 
   1465  1f91
   1466  1f91				   .L04 		;  dim _Convert_X  =  b
   1467  1f91
   1468  1f91				   .
   1469  1f91							; 
   1470  1f91
   1471  1f91				   .
   1472  1f91							; 
   1473  1f91
   1474  1f91				   .
   1475  1f91							; 
   1476  1f91
   1477  1f91				   .
   1478  1f91							; 
   1479  1f91
   1480  1f91				   .L05 		;  dim _Convert_Y  =  c
   1481  1f91
   1482  1f91				   .
   1483  1f91							; 
   1484  1f91
   1485  1f91				   .
   1486  1f91							; 
   1487  1f91
   1488  1f91				   .
   1489  1f91							; 
   1490  1f91
   1491  1f91				   .
   1492  1f91							; 
   1493  1f91
   1494  1f91				   .L06 		;  dim _Jump_Gravity_Counter  =  d
   1495  1f91
   1496  1f91				   .
   1497  1f91							; 
   1498  1f91
   1499  1f91				   .
   1500  1f91							; 
   1501  1f91
   1502  1f91				   .
   1503  1f91							; 
   1504  1f91
   1505  1f91				   .
   1506  1f91							; 
   1507  1f91
   1508  1f91				   .L07 		;  dim _Fall_Gravity_Counter  =  e
   1509  1f91
   1510  1f91				   .
   1511  1f91							; 
   1512  1f91
   1513  1f91				   .
   1514  1f91							; 
   1515  1f91
   1516  1f91				   .
   1517  1f91							; 
   1518  1f91
   1519  1f91				   .
   1520  1f91							; 
   1521  1f91
   1522  1f91				   .L08 		;  dim _Slide_Counter	=  f
   1523  1f91
   1524  1f91				   .
   1525  1f91							; 
   1526  1f91
   1527  1f91				   .
   1528  1f91							; 
   1529  1f91
   1530  1f91				   .
   1531  1f91							; 
   1532  1f91
   1533  1f91				   .
   1534  1f91							; 
   1535  1f91
   1536  1f91				   .L09 		;  dim _Slide_Speed  =  g
   1537  1f91
   1538  1f91				   .
   1539  1f91							; 
   1540  1f91
   1541  1f91				   .
   1542  1f91							; 
   1543  1f91
   1544  1f91				   .
   1545  1f91							; 
   1546  1f91
   1547  1f91				   .
   1548  1f91							; 
   1549  1f91
   1550  1f91				   .L010		;  dim _Slide_Limit  =  h
   1551  1f91
   1552  1f91				   .
   1553  1f91							; 
   1554  1f91
   1555  1f91				   .
   1556  1f91							; 
   1557  1f91
   1558  1f91				   .
   1559  1f91							; 
   1560  1f91
   1561  1f91				   .
   1562  1f91							; 
   1563  1f91
   1564  1f91				   .L011		;  dim _Master_Counter  =  i
   1565  1f91
   1566  1f91				   .
   1567  1f91							; 
   1568  1f91
   1569  1f91				   .
   1570  1f91							; 
   1571  1f91
   1572  1f91				   .
   1573  1f91							; 
   1574  1f91
   1575  1f91				   .
   1576  1f91							; 
   1577  1f91
   1578  1f91				   .L012		;  dim _Frame_Counter	=  j
   1579  1f91
   1580  1f91				   .
   1581  1f91							; 
   1582  1f91
   1583  1f91				   .
   1584  1f91							; 
   1585  1f91
   1586  1f91				   .
   1587  1f91							; 
   1588  1f91
   1589  1f91				   .
   1590  1f91							; 
   1591  1f91
   1592  1f91				   .L013		;  dim _Ch0_Sound  =  k
   1593  1f91
   1594  1f91				   .L014		;  dim _Ch0_Duration  =  l
   1595  1f91
   1596  1f91				   .L015		;  dim _Ch0_Counter  =  m
   1597  1f91
   1598  1f91				   .
   1599  1f91							; 
   1600  1f91
   1601  1f91				   .
   1602  1f91							; 
   1603  1f91
   1604  1f91				   .
   1605  1f91							; 
   1606  1f91
   1607  1f91				   .
   1608  1f91							; 
   1609  1f91
   1610  1f91				   .
   1611  1f91							; 
   1612  1f91
   1613  1f91				   .L016		;  dim _BitOp_02  =  x
   1614  1f91
   1615  1f91				   .L017		;  dim _Bit6_LR_Joy_Movement  =  x
   1616  1f91
   1617  1f91				   .
   1618  1f91							; 
   1619  1f91
   1620  1f91				   .
   1621  1f91							; 
   1622  1f91
   1623  1f91				   .
   1624  1f91							; 
   1625  1f91
   1626  1f91				   .
   1627  1f91							; 
   1628  1f91
   1629  1f91				   .
   1630  1f91							; 
   1631  1f91
   1632  1f91				   .L018		;  dim _BitOp_01  =  y
   1633  1f91
   1634  1f91				   .L019		;  dim _Bit0_Fall_in_Progress	=  y
   1635  1f91
   1636  1f91				   .L020		;  dim _Bit1_Slide_Left_in_Progress  =  y
   1637  1f91
   1638  1f91				   .L021		;  dim _Bit2_Slide_Right_in_Progress  =  y
   1639  1f91
   1640  1f91				   .L022		;  dim _Bit3_FireB_Restrainer	=  y
   1641  1f91
   1642  1f91				   .L023		;  dim _Bit4_Flip_P1  =  y
   1643  1f91
   1644  1f91				   .L024		;  dim _Bit5_Ground_Slide_in_Progress	=  y
   1645  1f91
   1646  1f91				   .L025		;  dim _Bit6_Duck_in_Progress	=  y
   1647  1f91
   1648  1f91				   .L026		;  dim _Bit7_Reset_Restrainer	=  y
   1649  1f91
   1650  1f91				   .
   1651  1f91							; 
   1652  1f91
   1653  1f91				   .
   1654  1f91							; 
   1655  1f91
   1656  1f91				   .
   1657  1f91							; 
   1658  1f91
   1659  1f91				   .
   1660  1f91							; 
   1661  1f91
   1662  1f91				   .
   1663  1f91							; 
   1664  1f91
   1665  1f91				   .
   1666  1f91							; 
   1667  1f91
   1668  1f91				   .
   1669  1f91							; 
   1670  1f91
   1671  1f91				   .
   1672  1f91							; 
   1673  1f91
   1674  1f91				   .
   1675  1f91							; 
   1676  1f91
   1677  1f91				   .L027		;  const _c_Edge_Top  =  2
   1678  1f91
   1679  1f91				   .L028		;  const _c_Edge_Left	=  15
   1680  1f91
   1681  1f91				   .L029		;  const _c_Edge_Right  =  137
   1682  1f91
   1683  1f91				   .
   1684  1f91							; 
   1685  1f91
   1686  1f91				   .
   1687  1f91							; 
   1688  1f91
   1689  1f91				   .
   1690  1f91							; 
   1691  1f91
   1692  1f91				   .
   1693  1f91							; 
   1694  1f91
   1695  1f91				   .
   1696  1f91							; 
   1697  1f91
   1698  1f91				   .
   1699  1f91							; 
   1700  1f91
   1701  1f91				   .
   1702  1f91							; 
   1703  1f91
   1704  1f91				   .
   1705  1f91							; 
   1706  1f91
   1707  1f91				   .L030		;  const _c_Jump_Sound  =  1
   1708  1f91
   1709  1f91				   .L031		;  const _c_Fall_Sound  =  2
   1710  1f91
   1711  1f91				   .L032		;  const _c_Slide_Sound  =  3
   1712  1f91
   1713  1f91				   .
   1714  1f91							; 
   1715  1f91
   1716  1f91				   .
   1717  1f91							; 
   1718  1f91
   1719  1f91				   .
   1720  1f91							; 
   1721  1f91
   1722  1f91				   .L033		;  goto __Bank_2 bank2
   1723  1f91
   1724  1f91		       85 81		      sta	temp7
   1725  1f93		       a9 30		      lda	#>(.__Bank_2-1)
   1726  1f95		       48		      pha
   1727  1f96		       a9 a3		      lda	#<(.__Bank_2-1)
   1728  1f98		       48		      pha
   1729  1f99		       a5 81		      lda	temp7
   1730  1f9b		       48		      pha
   1731  1f9c		       8a		      txa
   1732  1f9d		       48		      pha
   1733  1f9e		       a2 02		      ldx	#2
   1734  1fa0		       4c ee df 	      jmp	BS_jsr
   1735  1fa3				   .
   1736  1fa3							; 
   1737  1fa3
   1738  1fa3				   .
   1739  1fa3							; 
   1740  1fa3
   1741  1fa3				   .
   1742  1fa3							; 
   1743  1fa3
   1744  1fa3				   .L034		;  bank 2
   1745  1fa3
   1746  1fa3					      if	ECHO1
      49 bytes of ROM space left in bank 1
   1747  1fa3					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1748  1fa3					      endif
   1749  1fa3		       00 01	   ECHO1      =	1
   1750  1fd4					      ORG	$1FF4-bscode_length
   1751  1fd4					      RORG	$1FF4-bscode_length
   1752  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1753  1fd6					      ifconst	FASTFETCH	; using DPC+
   1754  1fd6		       8e 58 10 	      stx	FASTFETCH
   1755  1fd9					      endif
   1756  1fd9		       9a		      txs
   1757  1fda				  -	      if	bankswitch == 64
   1758  1fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1759  1fda					      else
   1760  1fda		       a9 18		      lda	#>(start-1)
   1761  1fdc					      endif
   1762  1fdc		       48		      pha
   1763  1fdd		       a9 e3		      lda	#<(start-1)
   1764  1fdf		       48		      pha
   1765  1fe0		       48		      pha
   1766  1fe1		       8a		      txa
   1767  1fe2		       48		      pha
   1768  1fe3		       ba		      tsx
   1769  1fe4					      if	bankswitch != 64
   1770  1fe4		       b5 04		      lda	4,x	; get high byte of return address
   1771  1fe6		       2a		      rol
   1772  1fe7		       2a		      rol
   1773  1fe8		       2a		      rol
   1774  1fe9		       2a		      rol
   1775  1fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1776  1fec		       aa		      tax
   1777  1fed		       e8		      inx
   1778  1fee				  -	      else
   1779  1fee				  -	      lda	4,x	; get high byte of return address
   1780  1fee				  -	      tay
   1781  1fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1782  1fee				  -	      sta	4,x
   1783  1fee				  -	      tya
   1784  1fee				  -	      lsr
   1785  1fee				  -	      lsr
   1786  1fee				  -	      lsr
   1787  1fee				  -	      lsr
   1788  1fee				  -	      tax
   1789  1fee				  -	      inx
   1790  1fee					      endif
   1791  1fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1792  1ff1		       68		      pla
   1793  1ff2		       aa		      tax
   1794  1ff3		       68		      pla
   1795  1ff4		       60		      rts
   1796  1ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1797  1ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1798  1ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1799  1ff5					      endif
   1800  1ffc					      ORG	$1FFC
   1801  1ffc					      RORG	$1FFC
   1802  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1803  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1804  2000					      ORG	$2000
   1805  2000					      RORG	$3000
   1806  2000				   HMdiv
   1807  2000		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0
   1808  2007		       01 01 01 01*	      .byte.b	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
   1809  2017		       02 02 02 02*	      .byte.b	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3
   1810  2027		       03 03 03 03*	      .byte.b	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4
   1811  2037		       04 04 04 04*	      .byte.b	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5
   1812  2047		       05 05 05 05*	      .byte.b	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6
   1813  2057		       06 06 06 06*	      .byte.b	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7
   1814  2067		       07 07 07 07*	      .byte.b	7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8
   1815  2077		       08 08 08 08*	      .byte.b	8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9
   1816  2087		       09 09 09 09*	      .byte.b	9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
   1817  2097		       0a 0a 0a 0a*	      .byte.b	10,10,10,10,10,10,0,0,0
   1818  20a0				   .L035		;  temp1 = temp1
   1819  20a0
   1820  20a0		       a5 cb		      LDA	temp1
   1821  20a2		       85 cb		      STA	temp1
   1822  20a4				   .
   1823  20a4							; 
   1824  20a4
   1825  20a4				   .
   1826  20a4							; 
   1827  20a4
   1828  20a4				   .
   1829  20a4							; 
   1830  20a4
   1831  20a4				   .__Bank_2
   1832  20a4							; __Bank_2
   1833  20a4
   1834  20a4				   .
   1835  20a4							; 
   1836  20a4
   1837  20a4				   .
   1838  20a4							; 
   1839  20a4
   1840  20a4				   .
   1841  20a4							; 
   1842  20a4
   1843  20a4				   .
   1844  20a4							; 
   1845  20a4
   1846  20a4				   .
   1847  20a4							; 
   1848  20a4
   1849  20a4				   .
   1850  20a4							; 
   1851  20a4
   1852  20a4				   .
   1853  20a4							; 
   1854  20a4
   1855  20a4				   .
   1856  20a4							; 
   1857  20a4
   1858  20a4				   .
   1859  20a4							; 
   1860  20a4
   1861  20a4				   .
   1862  20a4							; 
   1863  20a4
   1864  20a4				   .__Start_Restart
   1865  20a4							; __Start_Restart
   1866  20a4
   1867  20a4				   .
   1868  20a4							; 
   1869  20a4
   1870  20a4				   .
   1871  20a4							; 
   1872  20a4
   1873  20a4				   .
   1874  20a4							; 
   1875  20a4
   1876  20a4				   .
   1877  20a4							; 
   1878  20a4
   1879  20a4				   .
   1880  20a4							; 
   1881  20a4
   1882  20a4				   .
   1883  20a4							; 
   1884  20a4
   1885  20a4				   .L036		;  AUDV0  =  0  :  AUDV1  =  0
   1886  20a4
   1887  20a4		       a9 00		      LDA	#0
   1888  20a6		       85 19		      STA	AUDV0
   1889  20a8		       85 1a		      STA	AUDV1
   1890  20aa				   .
   1891  20aa							; 
   1892  20aa
   1893  20aa				   .
   1894  20aa							; 
   1895  20aa
   1896  20aa				   .
   1897  20aa							; 
   1898  20aa
   1899  20aa				   .
   1900  20aa							; 
   1901  20aa
   1902  20aa				   .
   1903  20aa							; 
   1904  20aa
   1905  20aa				   .
   1906  20aa							; 
   1907  20aa
   1908  20aa				   .L037		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1909  20aa
   1910  20aa		       a9 00		      LDA	#0
   1911  20ac		       85 d1		      STA	a
   1912  20ae		       85 d2		      STA	b
   1913  20b0		       85 d3		      STA	c
   1914  20b2		       85 d4		      STA	d
   1915  20b4		       85 d5		      STA	e
   1916  20b6		       85 d6		      STA	f
   1917  20b8		       85 d7		      STA	g
   1918  20ba		       85 d8		      STA	h
   1919  20bc		       85 d9		      STA	i
   1920  20be				   .L038		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1921  20be
   1922  20be		       a9 00		      LDA	#0
   1923  20c0		       85 da		      STA	j
   1924  20c2		       85 db		      STA	k
   1925  20c4		       85 dc		      STA	l
   1926  20c6		       85 dd		      STA	m
   1927  20c8		       85 de		      STA	n
   1928  20ca		       85 df		      STA	o
   1929  20cc		       85 e0		      STA	p
   1930  20ce		       85 e1		      STA	q
   1931  20d0		       85 e2		      STA	r
   1932  20d2				   .L039		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0
   1933  20d2
   1934  20d2		       a9 00		      LDA	#0
   1935  20d4		       85 e3		      STA	s
   1936  20d6		       85 e4		      STA	t
   1937  20d8		       85 e5		      STA	u
   1938  20da		       85 e6		      STA	v
   1939  20dc		       85 e7		      STA	w
   1940  20de		       85 e8		      STA	x
   1941  20e0		       85 e9		      STA	y
   1942  20e2		       85 ea		      STA	z
   1943  20e4				   .L040		;  var0  =  0	:  var1  =  0  :  var2	=  0  :  var3  =  0  :	var4  =  0
   1944  20e4
   1945  20e4		       a9 00		      LDA	#0
   1946  20e6		       85 ec		      STA	var0
   1947  20e8		       85 ed		      STA	var1
   1948  20ea		       85 ee		      STA	var2
   1949  20ec		       85 ef		      STA	var3
   1950  20ee		       85 f0		      STA	var4
   1951  20f0				   .L041		;  var5  =  0	:  var6  =  0  :  var7	=  0  :  var8  =  0
   1952  20f0
   1953  20f0		       a9 00		      LDA	#0
   1954  20f2		       85 f1		      STA	var5
   1955  20f4		       85 f2		      STA	var6
   1956  20f6		       85 f3		      STA	var7
   1957  20f8		       85 f4		      STA	var8
   1958  20fa				   .
   1959  20fa							; 
   1960  20fa
   1961  20fa				   .
   1962  20fa							; 
   1963  20fa
   1964  20fa				   .
   1965  20fa							; 
   1966  20fa
   1967  20fa				   .
   1968  20fa							; 
   1969  20fa
   1970  20fa				   .
   1971  20fa							; 
   1972  20fa
   1973  20fa				   .
   1974  20fa							; 
   1975  20fa
   1976  20fa				   .L042		;  _Slide_Speed  =  1
   1977  20fa
   1978  20fa		       a9 01		      LDA	#1
   1979  20fc		       85 d7		      STA	_Slide_Speed
   1980  20fe				   .
   1981  20fe							; 
   1982  20fe
   1983  20fe				   .
   1984  20fe							; 
   1985  20fe
   1986  20fe				   .
   1987  20fe							; 
   1988  20fe
   1989  20fe				   .
   1990  20fe							; 
   1991  20fe
   1992  20fe				   .
   1993  20fe							; 
   1994  20fe
   1995  20fe				   .
   1996  20fe							; 
   1997  20fe
   1998  20fe				   .L043		;  player0x  =  79  :	player0y  =  147
   1999  20fe
   2000  20fe		       a9 4f		      LDA	#79
   2001  2100		       85 80		      STA	player0x
   2002  2102		       a9 93		      LDA	#147
   2003  2104		       85 99		      STA	player0y
   2004  2106				   .
   2005  2106							; 
   2006  2106
   2007  2106				   .
   2008  2106							; 
   2009  2106
   2010  2106				   .
   2011  2106							; 
   2012  2106
   2013  2106				   .
   2014  2106							; 
   2015  2106
   2016  2106				   .
   2017  2106							; 
   2018  2106
   2019  2106				   .
   2020  2106							; 
   2021  2106
   2022  2106				   .
   2023  2106							; 
   2024  2106
   2025  2106				   .
   2026  2106							; 
   2027  2106
   2028  2106				   .
   2029  2106							; 
   2030  2106
   2031  2106				   .L044		;  _Bit7_Reset_Restrainer{7}  =  1
   2032  2106
   2033  2106		       a5 e9		      LDA	_Bit7_Reset_Restrainer
   2034  2108		       09 80		      ORA	#128
   2035  210a		       85 e9		      STA	_Bit7_Reset_Restrainer
   2036  210c				   .
   2037  210c							; 
   2038  210c
   2039  210c				   .
   2040  210c							; 
   2041  210c
   2042  210c				   .
   2043  210c							; 
   2044  210c
   2045  210c				   .
   2046  210c							; 
   2047  210c
   2048  210c				   .
   2049  210c							; 
   2050  210c
   2051  210c				   .
   2052  210c							; 
   2053  210c
   2054  210c				   .L045		;  playfield:
   2055  210c
   2056  210c		       a0 17		      ldy	#23
   2057  210e		       a9 a8		      LDA	#<PF_data1
   2058  2110		       a2 61		      LDX	#((>PF_data1) & $0f) | (((>PF_data1) / 2) & $70)
   2059  2112		       85 81		      sta	temp7
   2060  2114		       a9 31		      lda	#>(ret_point1-1)
   2061  2116		       48		      pha
   2062  2117		       a9 29		      lda	#<(ret_point1-1)
   2063  2119		       48		      pha
   2064  211a		       a9 1e		      lda	#>(pfsetup-1)
   2065  211c		       48		      pha
   2066  211d		       a9 8c		      lda	#<(pfsetup-1)
   2067  211f		       48		      pha
   2068  2120		       a5 81		      lda	temp7
   2069  2122		       48		      pha
   2070  2123		       8a		      txa
   2071  2124		       48		      pha
   2072  2125		       a2 01		      ldx	#1
   2073  2127		       4c ee df 	      jmp	BS_jsr
   2074  212a				   ret_point1
   2075  212a				   .
   2076  212a							; 
   2077  212a
   2078  212a				   .
   2079  212a							; 
   2080  212a
   2081  212a				   .
   2082  212a							; 
   2083  212a
   2084  212a				   .
   2085  212a							; 
   2086  212a
   2087  212a				   .
   2088  212a							; 
   2089  212a
   2090  212a				   .
   2091  212a							; 
   2092  212a
   2093  212a				   .L046		;  pfcolors:
   2094  212a
   2095  212a		       a9 08		      LDA	#<PFCOLS
   2096  212c		       8d 50 10 	      STA	DF0LOW
   2097  212f		       a9 0a		      LDA	#(>PFCOLS) & $0F
   2098  2131		       8d 68 10 	      STA	DF0HI
   2099  2134		       a9 04		      LDA	#<playfieldcolorL046
   2100  2136		       8d 59 10 	      STA	PARAMETER
   2101  2139		       a9 62		      LDA	#((>playfieldcolorL046) & $0f) | (((>playfieldcolorL046) / 2) & $70)
   2102  213b		       8d 59 10 	      STA	PARAMETER
   2103  213e		       a9 00		      LDA	#0
   2104  2140		       8d 59 10 	      STA	PARAMETER
   2105  2143		       a9 58		      LDA	#88
   2106  2145		       8d 59 10 	      STA	PARAMETER
   2107  2148		       a9 01		      LDA	#1
   2108  214a		       8d 5a 10 	      STA	CALLFUNCTION
   2109  214d				   .
   2110  214d							; 
   2111  214d
   2112  214d				   .
   2113  214d							; 
   2114  214d
   2115  214d				   .
   2116  214d							; 
   2117  214d
   2118  214d				   .
   2119  214d							; 
   2120  214d
   2121  214d				   .
   2122  214d							; 
   2123  214d
   2124  214d				   .
   2125  214d							; 
   2126  214d
   2127  214d				   .L047		;  bkcolors:
   2128  214d
   2129  214d		       a9 a5		      LDA	#<BKCOLS
   2130  214f		       8d 50 10 	      STA	DF0LOW
   2131  2152		       a9 0b		      LDA	#(>BKCOLS) & $0F
   2132  2154		       8d 68 10 	      STA	DF0HI
   2133  2157		       a9 5c		      LDA	#<backgroundcolorL047
   2134  2159		       8d 59 10 	      STA	PARAMETER
   2135  215c		       a9 62		      LDA	#((>backgroundcolorL047) & $0f) | (((>backgroundcolorL047) / 2) & $70)
   2136  215e		       8d 59 10 	      STA	PARAMETER
   2137  2161		       a9 00		      LDA	#0
   2138  2163		       8d 59 10 	      STA	PARAMETER
   2139  2166		       a9 01		      LDA	#1
   2140  2168		       8d 59 10 	      STA	PARAMETER
   2141  216b		       a9 01		      LDA	#1
   2142  216d		       8d 5a 10 	      STA	CALLFUNCTION
   2143  2170				   .
   2144  2170							; 
   2145  2170
   2146  2170				   .
   2147  2170							; 
   2148  2170
   2149  2170				   .
   2150  2170							; 
   2151  2170
   2152  2170				   .
   2153  2170							; 
   2154  2170
   2155  2170				   .
   2156  2170							; 
   2157  2170
   2158  2170				   .
   2159  2170							; 
   2160  2170
   2161  2170				   .
   2162  2170							; 
   2163  2170
   2164  2170				   .
   2165  2170							; 
   2166  2170
   2167  2170				   .
   2168  2170							; 
   2169  2170
   2170  2170				   .
   2171  2170							; 
   2172  2170
   2173  2170				   .
   2174  2170							; 
   2175  2170
   2176  2170				   .__Main_Loop
   2177  2170							; __Main_Loop
   2178  2170
   2179  2170				   .
   2180  2170							; 
   2181  2170
   2182  2170				   .
   2183  2170							; 
   2184  2170
   2185  2170				   .
   2186  2170							; 
   2187  2170
   2188  2170				   .
   2189  2170							; 
   2190  2170
   2191  2170				   .
   2192  2170							; 
   2193  2170
   2194  2170				   .
   2195  2170							; 
   2196  2170
   2197  2170				   .
   2198  2170							; 
   2199  2170
   2200  2170				   .L048		;  _Convert_X	=   ( player0x - 13 )  / 4
   2201  2170
   2202  2170							; complex statement detected
   2203  2170		       a5 80		      LDA	player0x
   2204  2172		       38		      SEC
   2205  2173		       e9 0d		      SBC	#13
   2206  2175		       4a		      lsr
   2207  2176		       4a		      lsr
   2208  2177		       85 d2		      STA	_Convert_X
   2209  2179				   .L049		;  _Convert_Y	=   ( player0y + player0height )  / 8
   2210  2179
   2211  2179							; complex statement detected
   2212  2179		       a5 99		      LDA	player0y
   2213  217b		       18		      CLC
   2214  217c		       65 a5		      ADC	player0height
   2215  217e		       4a		      lsr
   2216  217f		       4a		      lsr
   2217  2180		       4a		      lsr
   2218  2181		       85 d3		      STA	_Convert_Y
   2219  2183				   .
   2220  2183							; 
   2221  2183
   2222  2183				   .
   2223  2183							; 
   2224  2183
   2225  2183				   .
   2226  2183							; 
   2227  2183
   2228  2183				   .
   2229  2183							; 
   2230  2183
   2231  2183				   .
   2232  2183							; 
   2233  2183
   2234  2183				   .
   2235  2183							; 
   2236  2183
   2237  2183				   .
   2238  2183							; 
   2239  2183
   2240  2183				   .L050		;  _Master_Counter  =	_Master_Counter  +  1
   2241  2183
   2242  2183		       e6 d9		      INC	_Master_Counter
   2243  2185				   .
   2244  2185							; 
   2245  2185
   2246  2185				   .L051		;  if _Master_Counter	<  4 then goto __Skip_Frame_Counter
   2247  2185
   2248  2185		       a5 d9		      LDA	_Master_Counter
   2249  2187		       c9 04		      CMP	#4
   2250  2189		       b0 03		      BCS	.skipL051
   2251  218b				   .condpart0
   2252  218b		       4c 9e 31 	      jmp	.__Skip_Frame_Counter
   2253  218e
   2254  218e				   .skipL051
   2255  218e				   .
   2256  218e							; 
   2257  218e
   2258  218e				   .L052		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2259  218e
   2260  218e		       e6 da		      INC	_Frame_Counter
   2261  2190		       a9 00		      LDA	#0
   2262  2192		       85 d9		      STA	_Master_Counter
   2263  2194				   .
   2264  2194							; 
   2265  2194
   2266  2194				   .L053		;  if _Frame_Counter  =  4 then _Frame_Counter  =  0
   2267  2194
   2268  2194		       a5 da		      LDA	_Frame_Counter
   2269  2196		       c9 04		      CMP	#4
   2270  2198		       d0 04		      BNE	.skipL053
   2271  219a				   .condpart1
   2272  219a		       a9 00		      LDA	#0
   2273  219c		       85 da		      STA	_Frame_Counter
   2274  219e				   .skipL053
   2275  219e				   .
   2276  219e							; 
   2277  219e
   2278  219e				   .__Skip_Frame_Counter
   2279  219e							; __Skip_Frame_Counter
   2280  219e
   2281  219e				   .
   2282  219e							; 
   2283  219e
   2284  219e				   .
   2285  219e							; 
   2286  219e
   2287  219e				   .
   2288  219e							; 
   2289  219e
   2290  219e				   .
   2291  219e							; 
   2292  219e
   2293  219e				   .
   2294  219e							; 
   2295  219e
   2296  219e				   .
   2297  219e							; 
   2298  219e
   2299  219e				   .
   2300  219e							; 
   2301  219e
   2302  219e				   .L054		;  player0color:
   2303  219e
   2304  219e		       a2 5d		      LDX	#<playercolorL054_0
   2305  21a0		       86 a3		      STX	player0color
   2306  21a2		       a9 62		      LDA	#((>playercolorL054_0) & $0f) | (((>playercolorL054_0) / 2) & $70)
   2307  21a4		       85 a4		      STA	player0color+1
   2308  21a6				   .
   2309  21a6							; 
   2310  21a6
   2311  21a6				   .
   2312  21a6							; 
   2313  21a6
   2314  21a6				   .L055		;  player0:
   2315  21a6
   2316  21a6		       a2 71		      LDX	#<playerL055_0
   2317  21a8		       86 bd		      STX	player0pointerlo
   2318  21aa		       a9 62		      LDA	#((>playerL055_0) & $0f) | (((>playerL055_0) / 2) & $70)
   2319  21ac		       85 be		      STA	player0pointerhi
   2320  21ae		       a9 14		      LDA	#20
   2321  21b0		       85 a5		      STA	player0height
   2322  21b2				   .
   2323  21b2							; 
   2324  21b2
   2325  21b2				   .
   2326  21b2							; 
   2327  21b2
   2328  21b2				   .
   2329  21b2							; 
   2330  21b2
   2331  21b2				   .
   2332  21b2							; 
   2333  21b2
   2334  21b2				   .
   2335  21b2							; 
   2336  21b2
   2337  21b2				   .
   2338  21b2							; 
   2339  21b2
   2340  21b2				   .
   2341  21b2							; 
   2342  21b2
   2343  21b2				   .
   2344  21b2							; 
   2345  21b2
   2346  21b2				   .
   2347  21b2							; 
   2348  21b2
   2349  21b2				   .
   2350  21b2							; 
   2351  21b2
   2352  21b2				   .
   2353  21b2							; 
   2354  21b2
   2355  21b2				   .L056		;  if !joy0fire then _Jump_Gravity_Counter  =	0  :  _Bit3_FireB_Restrainer{3}  =  0  :  goto __Skip_Jump
   2356  21b2
   2357  21b2		       24 0c		      bit	INPT4
   2358  21b4		       10 0d		      BPL	.skipL056
   2359  21b6				   .condpart2
   2360  21b6		       a9 00		      LDA	#0
   2361  21b8		       85 d4		      STA	_Jump_Gravity_Counter
   2362  21ba		       a5 e9		      LDA	_Bit3_FireB_Restrainer
   2363  21bc		       29 f7		      AND	#247
   2364  21be		       85 e9		      STA	_Bit3_FireB_Restrainer
   2365  21c0		       4c a7 32 	      jmp	.__Skip_Jump
   2366  21c3
   2367  21c3				   .skipL056
   2368  21c3				   .
   2369  21c3							; 
   2370  21c3
   2371  21c3				   .
   2372  21c3							; 
   2373  21c3
   2374  21c3				   .
   2375  21c3							; 
   2376  21c3
   2377  21c3				   .
   2378  21c3							; 
   2379  21c3
   2380  21c3				   .L057		;  _Bit5_Ground_Slide_in_Progress{5}  =  0
   2381  21c3
   2382  21c3		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   2383  21c5		       29 df		      AND	#223
   2384  21c7		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   2385  21c9				   .
   2386  21c9							; 
   2387  21c9
   2388  21c9				   .
   2389  21c9							; 
   2390  21c9
   2391  21c9				   .
   2392  21c9							; 
   2393  21c9
   2394  21c9				   .
   2395  21c9							; 
   2396  21c9
   2397  21c9				   .L058		;  if !_Bit3_FireB_Restrainer{3} then player0:
   2398  21c9
   2399  21c9		       a5 e9		      LDA	_Bit3_FireB_Restrainer
   2400  21cb		       29 08		      AND	#8
   2401  21cd		       d0 0c		      BNE	.skipL058
   2402  21cf				   .condpart3
   2403  21cf		       a2 85		      LDX	#<player3then_0
   2404  21d1		       86 bd		      STX	player0pointerlo
   2405  21d3		       a9 62		      LDA	#((>player3then_0) & $0f) | (((>player3then_0) / 2) & $70)
   2406  21d5		       85 be		      STA	player0pointerhi
   2407  21d7		       a9 14		      LDA	#20
   2408  21d9		       85 a5		      STA	player0height
   2409  21db				   .skipL058
   2410  21db				   .
   2411  21db							; 
   2412  21db
   2413  21db				   .
   2414  21db							; 
   2415  21db
   2416  21db				   .
   2417  21db							; 
   2418  21db
   2419  21db				   .
   2420  21db							; 
   2421  21db
   2422  21db				   .L059		;  if !joy0left  &&  !joy0right  &&  !_Bit3_FireB_Restrainer{3} then player0:
   2423  21db
   2424  21db		       2c 80 02 	      bit	SWCHA
   2425  21de		       50 17		      BVC	.skipL059
   2426  21e0				   .condpart4
   2427  21e0		       2c 80 02 	      bit	SWCHA
   2428  21e3		       10 12		      BPL	.skip4then
   2429  21e5				   .condpart5
   2430  21e5		       a5 e9		      LDA	_Bit3_FireB_Restrainer
   2431  21e7		       29 08		      AND	#8
   2432  21e9		       d0 0c		      BNE	.skip5then
   2433  21eb				   .condpart6
   2434  21eb		       a2 99		      LDX	#<player6then_0
   2435  21ed		       86 bd		      STX	player0pointerlo
   2436  21ef		       a9 62		      LDA	#((>player6then_0) & $0f) | (((>player6then_0) / 2) & $70)
   2437  21f1		       85 be		      STA	player0pointerhi
   2438  21f3		       a9 14		      LDA	#20
   2439  21f5		       85 a5		      STA	player0height
   2440  21f7				   .skip5then
   2441  21f7				   .skip4then
   2442  21f7				   .skipL059
   2443  21f7				   .
   2444  21f7							; 
   2445  21f7
   2446  21f7				   .
   2447  21f7							; 
   2448  21f7
   2449  21f7				   .
   2450  21f7							; 
   2451  21f7
   2452  21f7				   .
   2453  21f7							; 
   2454  21f7
   2455  21f7				   .L060		;  if _Bit0_Fall_in_Progress{0} then goto __Skip_Jump
   2456  21f7
   2457  21f7		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   2458  21f9		       4a		      LSR
   2459  21fa		       90 03		      BCC	.skipL060
   2460  21fc				   .condpart7
   2461  21fc		       4c a7 32 	      jmp	.__Skip_Jump
   2462  21ff
   2463  21ff				   .skipL060
   2464  21ff				   .
   2465  21ff							; 
   2466  21ff
   2467  21ff				   .
   2468  21ff							; 
   2469  21ff
   2470  21ff				   .
   2471  21ff							; 
   2472  21ff
   2473  21ff				   .
   2474  21ff							; 
   2475  21ff
   2476  21ff				   .
   2477  21ff							; 
   2478  21ff
   2479  21ff				   .
   2480  21ff							; 
   2481  21ff
   2482  21ff				   .L061		;  if _Bit3_FireB_Restrainer{3}  &&  !_Bit0_Fall_in_Progress{0}  &&  !_Jump_Gravity_Counter then goto __Skip_Jump
   2483  21ff
   2484  21ff		       a5 e9		      LDA	_Bit3_FireB_Restrainer
   2485  2201		       29 08		      AND	#8
   2486  2203		       f0 0c		      BEQ	.skipL061
   2487  2205				   .condpart8
   2488  2205		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   2489  2207		       4a		      LSR
   2490  2208		       b0 07		      BCS	.skip8then
   2491  220a				   .condpart9
   2492  220a		       a5 d4		      LDA	_Jump_Gravity_Counter
   2493  220c		       d0 03		      BNE	.skip9then
   2494  220e				   .condpart10
   2495  220e		       4c a7 32 	      jmp	.__Skip_Jump
   2496  2211
   2497  2211				   .skip9then
   2498  2211				   .skip8then
   2499  2211				   .skipL061
   2500  2211				   .
   2501  2211							; 
   2502  2211
   2503  2211				   .
   2504  2211							; 
   2505  2211
   2506  2211				   .
   2507  2211							; 
   2508  2211
   2509  2211				   .
   2510  2211							; 
   2511  2211
   2512  2211				   .L062		;  if !_Jump_Gravity_Counter then _Ch0_Sound  =  _c_Jump_Sound  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   2513  2211
   2514  2211		       a5 d4		      LDA	_Jump_Gravity_Counter
   2515  2213		       d0 0c		      BNE	.skipL062
   2516  2215				   .condpart11
   2517  2215		       a9 01		      LDA	#_c_Jump_Sound
   2518  2217		       85 db		      STA	_Ch0_Sound
   2519  2219		       a9 01		      LDA	#1
   2520  221b		       85 dc		      STA	_Ch0_Duration
   2521  221d		       a9 00		      LDA	#0
   2522  221f		       85 dd		      STA	_Ch0_Counter
   2523  2221				   .skipL062
   2524  2221				   .
   2525  2221							; 
   2526  2221
   2527  2221				   .
   2528  2221							; 
   2529  2221
   2530  2221				   .
   2531  2221							; 
   2532  2221
   2533  2221				   .
   2534  2221							; 
   2535  2221
   2536  2221				   .L063		;  _Bit3_FireB_Restrainer{3}  =  1
   2537  2221
   2538  2221		       a5 e9		      LDA	_Bit3_FireB_Restrainer
   2539  2223		       09 08		      ORA	#8
   2540  2225		       85 e9		      STA	_Bit3_FireB_Restrainer
   2541  2227				   .
   2542  2227							; 
   2543  2227
   2544  2227				   .
   2545  2227							; 
   2546  2227
   2547  2227				   .
   2548  2227							; 
   2549  2227
   2550  2227				   .
   2551  2227							; 
   2552  2227
   2553  2227				   .L064		;  _Jump_Gravity_Counter  =  _Jump_Gravity_Counter  +	1
   2554  2227
   2555  2227		       e6 d4		      INC	_Jump_Gravity_Counter
   2556  2229				   .
   2557  2229							; 
   2558  2229
   2559  2229				   .
   2560  2229							; 
   2561  2229
   2562  2229				   .
   2563  2229							; 
   2564  2229
   2565  2229				   .
   2566  2229							; 
   2567  2229
   2568  2229				   .L065		;  if _Jump_Gravity_Counter  >  12 then _Jump_Gravity_Counter	=  0  :  _Bit0_Fall_in_Progress{0}  =  1  :  goto __Skip_Jump
   2569  2229
   2570  2229		       a9 0c		      LDA	#12
   2571  222b		       c5 d4		      CMP	_Jump_Gravity_Counter
   2572  222d		       b0 0d		      BCS	.skipL065
   2573  222f				   .condpart12
   2574  222f		       a9 00		      LDA	#0
   2575  2231		       85 d4		      STA	_Jump_Gravity_Counter
   2576  2233		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   2577  2235		       09 01		      ORA	#1
   2578  2237		       85 e9		      STA	_Bit0_Fall_in_Progress
   2579  2239		       4c a7 32 	      jmp	.__Skip_Jump
   2580  223c
   2581  223c				   .skipL065
   2582  223c				   .
   2583  223c							; 
   2584  223c
   2585  223c				   .
   2586  223c							; 
   2587  223c
   2588  223c				   .
   2589  223c							; 
   2590  223c
   2591  223c				   .
   2592  223c							; 
   2593  223c
   2594  223c				   .
   2595  223c							; 
   2596  223c
   2597  223c				   .
   2598  223c							; 
   2599  223c
   2600  223c				   .L066		;  if player0y  <  _c_Edge_Top then goto __Skip_Jump
   2601  223c
   2602  223c		       a5 99		      LDA	player0y
   2603  223e		       c9 02		      CMP	#_c_Edge_Top
   2604  2240		       b0 03		      BCS	.skipL066
   2605  2242				   .condpart13
   2606  2242		       4c a7 32 	      jmp	.__Skip_Jump
   2607  2245
   2608  2245				   .skipL066
   2609  2245				   .
   2610  2245							; 
   2611  2245
   2612  2245				   .
   2613  2245							; 
   2614  2245
   2615  2245				   .
   2616  2245							; 
   2617  2245
   2618  2245				   .
   2619  2245							; 
   2620  2245
   2621  2245				   .
   2622  2245							; 
   2623  2245
   2624  2245				   .L067		;  if _Jump_Gravity_Counter  <=  7 then temp6	=  6
   2625  2245
   2626  2245		       a9 07		      LDA	#7
   2627  2247		       c5 d4		      CMP	_Jump_Gravity_Counter
   2628  2249		       90 04		      BCC	.skipL067
   2629  224b				   .condpart14
   2630  224b		       a9 06		      LDA	#6
   2631  224d		       85 d0		      STA	temp6
   2632  224f				   .skipL067
   2633  224f				   .L068		;  if _Jump_Gravity_Counter  >  7  &&	_Jump_Gravity_Counter  <=  10 then temp6  =  3
   2634  224f
   2635  224f		       a9 07		      LDA	#7
   2636  2251		       c5 d4		      CMP	_Jump_Gravity_Counter
   2637  2253		       b0 0a		      BCS	.skipL068
   2638  2255				   .condpart15
   2639  2255		       a9 0a		      LDA	#10
   2640  2257		       c5 d4		      CMP	_Jump_Gravity_Counter
   2641  2259		       90 04		      BCC	.skip15then
   2642  225b				   .condpart16
   2643  225b		       a9 03		      LDA	#3
   2644  225d		       85 d0		      STA	temp6
   2645  225f				   .skip15then
   2646  225f				   .skipL068
   2647  225f				   .L069		;  if _Jump_Gravity_Counter  >  10 then temp6	=  1
   2648  225f
   2649  225f		       a9 0a		      LDA	#10
   2650  2261		       c5 d4		      CMP	_Jump_Gravity_Counter
   2651  2263		       b0 04		      BCS	.skipL069
   2652  2265				   .condpart17
   2653  2265		       a9 01		      LDA	#1
   2654  2267		       85 d0		      STA	temp6
   2655  2269				   .skipL069
   2656  2269				   .
   2657  2269							; 
   2658  2269
   2659  2269				   .
   2660  2269							; 
   2661  2269
   2662  2269				   .
   2663  2269							; 
   2664  2269
   2665  2269				   .
   2666  2269							; 
   2667  2269
   2668  2269				   .L070		;  player0y  =  player0y  -  temp6
   2669  2269
   2670  2269		       a5 99		      LDA	player0y
   2671  226b		       38		      SEC
   2672  226c		       e5 d0		      SBC	temp6
   2673  226e		       85 99		      STA	player0y
   2674  2270				   .
   2675  2270							; 
   2676  2270
   2677  2270				   .
   2678  2270							; 
   2679  2270
   2680  2270				   .
   2681  2270							; 
   2682  2270
   2683  2270				   .
   2684  2270							; 
   2685  2270
   2686  2270				   .L071		;  temp5  =   ( player0y )  / 8
   2687  2270
   2688  2270							; complex statement detected
   2689  2270		       a5 99		      LDA	player0y
   2690  2272		       4a		      lsr
   2691  2273		       4a		      lsr
   2692  2274		       4a		      lsr
   2693  2275		       85 cf		      STA	temp5
   2694  2277				   .
   2695  2277							; 
   2696  2277
   2697  2277				   .
   2698  2277							; 
   2699  2277
   2700  2277				   .
   2701  2277							; 
   2702  2277
   2703  2277				   .
   2704  2277							; 
   2705  2277
   2706  2277				   .L072		;  if pfread ( _Convert_X , temp5 )  then _Jump_Gravity_Counter  =  0	:  _Bit0_Fall_in_Progress{0}  =  1  :  goto __Skip_Jump
   2707  2277
   2708  2277		       a9 a4		      lda	#<C_function
   2709  2279		       8d 50 10 	      sta	DF0LOW
   2710  227c		       a9 01		      lda	#(>C_function) & $0F
   2711  227e		       8d 68 10 	      sta	DF0HI
   2712  2281		       a9 18		      lda	#24
   2713  2283		       8d 78 10 	      sta	DF0WRITE
   2714  2286		       a5 d2		      LDA	_Convert_X
   2715  2288		       8d 78 10 	      STA	DF0WRITE
   2716  228b		       a4 cf		      LDY	temp5
   2717  228d		       8c 78 10 	      STY	DF0WRITE
   2718  2290		       a9 ff		      lda	#255
   2719  2292		       8d 5a 10 	      sta	CALLFUNCTION
   2720  2295		       ad 08 10 	      LDA	DF0DATA
   2721  2298		       d0 0d		      BNE	.skipL072
   2722  229a				   .condpart18
   2723  229a		       a9 00		      LDA	#0
   2724  229c		       85 d4		      STA	_Jump_Gravity_Counter
   2725  229e		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   2726  22a0		       09 01		      ORA	#1
   2727  22a2		       85 e9		      STA	_Bit0_Fall_in_Progress
   2728  22a4		       4c a7 32 	      jmp	.__Skip_Jump
   2729  22a7
   2730  22a7				   .skipL072
   2731  22a7				   .
   2732  22a7							; 
   2733  22a7
   2734  22a7				   .__Skip_Jump
   2735  22a7							; __Skip_Jump
   2736  22a7
   2737  22a7				   .
   2738  22a7							; 
   2739  22a7
   2740  22a7				   .
   2741  22a7							; 
   2742  22a7
   2743  22a7				   .
   2744  22a7							; 
   2745  22a7
   2746  22a7				   .
   2747  22a7							; 
   2748  22a7
   2749  22a7				   .
   2750  22a7							; 
   2751  22a7
   2752  22a7				   .
   2753  22a7							; 
   2754  22a7
   2755  22a7				   .
   2756  22a7							; 
   2757  22a7
   2758  22a7				   .
   2759  22a7							; 
   2760  22a7
   2761  22a7				   .
   2762  22a7							; 
   2763  22a7
   2764  22a7				   .
   2765  22a7							; 
   2766  22a7
   2767  22a7				   .L073		;  temp5  =   ( player0y + player0height + 1 )  / 8
   2768  22a7
   2769  22a7							; complex statement detected
   2770  22a7		       a5 99		      LDA	player0y
   2771  22a9		       18		      CLC
   2772  22aa		       65 a5		      ADC	player0height
   2773  22ac		       18		      CLC
   2774  22ad		       69 01		      ADC	#1
   2775  22af		       4a		      lsr
   2776  22b0		       4a		      lsr
   2777  22b1		       4a		      lsr
   2778  22b2		       85 cf		      STA	temp5
   2779  22b4				   .
   2780  22b4							; 
   2781  22b4
   2782  22b4				   .
   2783  22b4							; 
   2784  22b4
   2785  22b4				   .
   2786  22b4							; 
   2787  22b4
   2788  22b4				   .
   2789  22b4							; 
   2790  22b4
   2791  22b4				   .L074		;  if _Jump_Gravity_Counter  ||  pfread ( _Convert_X , temp5 )  then goto __Skip_Fall_01
   2792  22b4
   2793  22b4		       a5 d4		      LDA	_Jump_Gravity_Counter
   2794  22b6		       f0 03		      BEQ	.skipL074
   2795  22b8				   .condpart19
   2796  22b8		       4c de 32 	      jmp	.condpart20
   2797  22bb				   .skipL074
   2798  22bb		       a9 a4		      lda	#<C_function
   2799  22bd		       8d 50 10 	      sta	DF0LOW
   2800  22c0		       a9 01		      lda	#(>C_function) & $0F
   2801  22c2		       8d 68 10 	      sta	DF0HI
   2802  22c5		       a9 18		      lda	#24
   2803  22c7		       8d 78 10 	      sta	DF0WRITE
   2804  22ca		       a5 d2		      LDA	_Convert_X
   2805  22cc		       8d 78 10 	      STA	DF0WRITE
   2806  22cf		       a4 cf		      LDY	temp5
   2807  22d1		       8c 78 10 	      STY	DF0WRITE
   2808  22d4		       a9 ff		      lda	#255
   2809  22d6		       8d 5a 10 	      sta	CALLFUNCTION
   2810  22d9		       ad 08 10 	      LDA	DF0DATA
   2811  22dc		       d0 03		      BNE	.skip5OR
   2812  22de				   .condpart20
   2813  22de		       4c 86 33 	      jmp	.__Skip_Fall_01
   2814  22e1
   2815  22e1				   .skip5OR
   2816  22e1				   .
   2817  22e1							; 
   2818  22e1
   2819  22e1				   .
   2820  22e1							; 
   2821  22e1
   2822  22e1				   .
   2823  22e1							; 
   2824  22e1
   2825  22e1				   .
   2826  22e1							; 
   2827  22e1
   2828  22e1				   .L075		;  player0:
   2829  22e1
   2830  22e1		       a2 ad		      LDX	#<playerL075_0
   2831  22e3		       86 bd		      STX	player0pointerlo
   2832  22e5		       a9 62		      LDA	#((>playerL075_0) & $0f) | (((>playerL075_0) / 2) & $70)
   2833  22e7		       85 be		      STA	player0pointerhi
   2834  22e9		       a9 14		      LDA	#20
   2835  22eb		       85 a5		      STA	player0height
   2836  22ed				   .
   2837  22ed							; 
   2838  22ed
   2839  22ed				   .
   2840  22ed							; 
   2841  22ed
   2842  22ed				   .
   2843  22ed							; 
   2844  22ed
   2845  22ed				   .
   2846  22ed							; 
   2847  22ed
   2848  22ed				   .L076		;  if !joy0left  &&  !joy0right then player0:
   2849  22ed
   2850  22ed		       2c 80 02 	      bit	SWCHA
   2851  22f0		       50 11		      BVC	.skipL076
   2852  22f2				   .condpart21
   2853  22f2		       2c 80 02 	      bit	SWCHA
   2854  22f5		       10 0c		      BPL	.skip21then
   2855  22f7				   .condpart22
   2856  22f7		       a2 c1		      LDX	#<player22then_0
   2857  22f9		       86 bd		      STX	player0pointerlo
   2858  22fb		       a9 62		      LDA	#((>player22then_0) & $0f) | (((>player22then_0) / 2) & $70)
   2859  22fd		       85 be		      STA	player0pointerhi
   2860  22ff		       a9 14		      LDA	#20
   2861  2301		       85 a5		      STA	player0height
   2862  2303				   .skip21then
   2863  2303				   .skipL076
   2864  2303				   .
   2865  2303							; 
   2866  2303
   2867  2303				   .
   2868  2303							; 
   2869  2303
   2870  2303				   .
   2871  2303							; 
   2872  2303
   2873  2303				   .
   2874  2303							; 
   2875  2303
   2876  2303				   .L077		;  _Fall_Gravity_Counter  =  _Fall_Gravity_Counter  +	1
   2877  2303
   2878  2303		       e6 d5		      INC	_Fall_Gravity_Counter
   2879  2305				   .
   2880  2305							; 
   2881  2305
   2882  2305				   .
   2883  2305							; 
   2884  2305
   2885  2305				   .
   2886  2305							; 
   2887  2305
   2888  2305				   .
   2889  2305							; 
   2890  2305
   2891  2305				   .L078		;  temp6  =  0
   2892  2305
   2893  2305		       a9 00		      LDA	#0
   2894  2307		       85 d0		      STA	temp6
   2895  2309				   .L079		;  if _Fall_Gravity_Counter  >  8  &&	_Jump_Gravity_Counter  <=  16 then temp6  =  1
   2896  2309
   2897  2309		       a9 08		      LDA	#8
   2898  230b		       c5 d5		      CMP	_Fall_Gravity_Counter
   2899  230d		       b0 0a		      BCS	.skipL079
   2900  230f				   .condpart23
   2901  230f		       a9 10		      LDA	#16
   2902  2311		       c5 d4		      CMP	_Jump_Gravity_Counter
   2903  2313		       90 04		      BCC	.skip23then
   2904  2315				   .condpart24
   2905  2315		       a9 01		      LDA	#1
   2906  2317		       85 d0		      STA	temp6
   2907  2319				   .skip23then
   2908  2319				   .skipL079
   2909  2319				   .L080		;  if _Fall_Gravity_Counter  >  16  &&  _Jump_Gravity_Counter	<=  24 then temp6  =  3
   2910  2319
   2911  2319		       a9 10		      LDA	#16
   2912  231b		       c5 d5		      CMP	_Fall_Gravity_Counter
   2913  231d		       b0 0a		      BCS	.skipL080
   2914  231f				   .condpart25
   2915  231f		       a9 18		      LDA	#24
   2916  2321		       c5 d4		      CMP	_Jump_Gravity_Counter
   2917  2323		       90 04		      BCC	.skip25then
   2918  2325				   .condpart26
   2919  2325		       a9 03		      LDA	#3
   2920  2327		       85 d0		      STA	temp6
   2921  2329				   .skip25then
   2922  2329				   .skipL080
   2923  2329				   .L081		;  if _Fall_Gravity_Counter  >  24  &&  _Jump_Gravity_Counter	<=  32 then temp6  =  5
   2924  2329
   2925  2329		       a9 18		      LDA	#24
   2926  232b		       c5 d5		      CMP	_Fall_Gravity_Counter
   2927  232d		       b0 0a		      BCS	.skipL081
   2928  232f				   .condpart27
   2929  232f		       a9 20		      LDA	#32
   2930  2331		       c5 d4		      CMP	_Jump_Gravity_Counter
   2931  2333		       90 04		      BCC	.skip27then
   2932  2335				   .condpart28
   2933  2335		       a9 05		      LDA	#5
   2934  2337		       85 d0		      STA	temp6
   2935  2339				   .skip27then
   2936  2339				   .skipL081
   2937  2339				   .L082		;  if _Fall_Gravity_Counter  >  32 then temp6	=  7
   2938  2339
   2939  2339		       a9 20		      LDA	#32
   2940  233b		       c5 d5		      CMP	_Fall_Gravity_Counter
   2941  233d		       b0 04		      BCS	.skipL082
   2942  233f				   .condpart29
   2943  233f		       a9 07		      LDA	#7
   2944  2341		       85 d0		      STA	temp6
   2945  2343				   .skipL082
   2946  2343				   .
   2947  2343							; 
   2948  2343
   2949  2343				   .
   2950  2343							; 
   2951  2343
   2952  2343				   .
   2953  2343							; 
   2954  2343
   2955  2343				   .
   2956  2343							; 
   2957  2343
   2958  2343				   .L083		;  player0y  =  player0y  +  temp6
   2959  2343
   2960  2343		       a5 99		      LDA	player0y
   2961  2345		       18		      CLC
   2962  2346		       65 d0		      ADC	temp6
   2963  2348		       85 99		      STA	player0y
   2964  234a				   .
   2965  234a							; 
   2966  234a
   2967  234a				   .
   2968  234a							; 
   2969  234a
   2970  234a				   .
   2971  234a							; 
   2972  234a
   2973  234a				   .
   2974  234a							; 
   2975  234a
   2976  234a				   .L084		;  if _Ch0_Sound  =  _c_Jump_Sound  ||  _Ch0_Sound  =	_c_Fall_Sound then goto __Skip_Fall_Sound_Check
   2977  234a
   2978  234a		       a5 db		      LDA	_Ch0_Sound
   2979  234c		       c9 01		      CMP	#_c_Jump_Sound
   2980  234e		       d0 03		      BNE	.skipL084
   2981  2350				   .condpart30
   2982  2350		       4c 59 33 	      jmp	.condpart31
   2983  2353				   .skipL084
   2984  2353		       a5 db		      LDA	_Ch0_Sound
   2985  2355		       c9 02		      CMP	#_c_Fall_Sound
   2986  2357		       d0 03		      BNE	.skip10OR
   2987  2359				   .condpart31
   2988  2359		       4c 77 33 	      jmp	.__Skip_Fall_Sound_Check
   2989  235c
   2990  235c				   .skip10OR
   2991  235c				   .
   2992  235c							; 
   2993  235c
   2994  235c				   .
   2995  235c							; 
   2996  235c
   2997  235c				   .
   2998  235c							; 
   2999  235c
   3000  235c				   .
   3001  235c							; 
   3002  235c
   3003  235c				   .L085		;  if _Fall_Gravity_Counter  =  17  ||  _Fall_Gravity_Counter	=  33 then _Ch0_Sound  =  _c_Fall_Sound  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   3004  235c
   3005  235c		       a5 d5		      LDA	_Fall_Gravity_Counter
   3006  235e		       c9 11		      CMP	#17
   3007  2360		       d0 03		      BNE	.skipL085
   3008  2362				   .condpart32
   3009  2362		       4c 6b 33 	      jmp	.condpart33
   3010  2365				   .skipL085
   3011  2365		       a5 d5		      LDA	_Fall_Gravity_Counter
   3012  2367		       c9 21		      CMP	#33
   3013  2369		       d0 0c		      BNE	.skip11OR
   3014  236b				   .condpart33
   3015  236b		       a9 02		      LDA	#_c_Fall_Sound
   3016  236d		       85 db		      STA	_Ch0_Sound
   3017  236f		       a9 01		      LDA	#1
   3018  2371		       85 dc		      STA	_Ch0_Duration
   3019  2373		       a9 00		      LDA	#0
   3020  2375		       85 dd		      STA	_Ch0_Counter
   3021  2377				   .skip11OR
   3022  2377				   .
   3023  2377							; 
   3024  2377
   3025  2377				   .__Skip_Fall_Sound_Check
   3026  2377							; __Skip_Fall_Sound_Check
   3027  2377
   3028  2377				   .
   3029  2377							; 
   3030  2377
   3031  2377				   .
   3032  2377							; 
   3033  2377
   3034  2377				   .
   3035  2377							; 
   3036  2377
   3037  2377				   .
   3038  2377							; 
   3039  2377
   3040  2377				   .L086		;  _Bit0_Fall_in_Progress{0}  =  1
   3041  2377
   3042  2377		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   3043  2379		       09 01		      ORA	#1
   3044  237b		       85 e9		      STA	_Bit0_Fall_in_Progress
   3045  237d				   .
   3046  237d							; 
   3047  237d
   3048  237d				   .
   3049  237d							; 
   3050  237d
   3051  237d				   .
   3052  237d							; 
   3053  237d
   3054  237d				   .
   3055  237d							; 
   3056  237d
   3057  237d				   .L087		;  _Bit5_Ground_Slide_in_Progress{5}  =  0
   3058  237d
   3059  237d		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   3060  237f		       29 df		      AND	#223
   3061  2381		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   3062  2383				   .
   3063  2383							; 
   3064  2383
   3065  2383				   .L088		;  goto __Skip_Fall_02
   3066  2383
   3067  2383		       4c bf 33 	      jmp	.__Skip_Fall_02
   3068  2386
   3069  2386				   .
   3070  2386							; 
   3071  2386
   3072  2386				   .__Skip_Fall_01
   3073  2386							; __Skip_Fall_01
   3074  2386
   3075  2386				   .
   3076  2386							; 
   3077  2386
   3078  2386				   .
   3079  2386							; 
   3080  2386
   3081  2386				   .
   3082  2386							; 
   3083  2386
   3084  2386				   .
   3085  2386							; 
   3086  2386
   3087  2386				   .L089		;  _Bit0_Fall_in_Progress{0}  =  0  :	_Fall_Gravity_Counter  =  0
   3088  2386
   3089  2386		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   3090  2388		       29 fe		      AND	#254
   3091  238a		       85 e9		      STA	_Bit0_Fall_in_Progress
   3092  238c		       a9 00		      LDA	#0
   3093  238e		       85 d5		      STA	_Fall_Gravity_Counter
   3094  2390				   .
   3095  2390							; 
   3096  2390
   3097  2390				   .
   3098  2390							; 
   3099  2390
   3100  2390				   .
   3101  2390							; 
   3102  2390
   3103  2390				   .
   3104  2390							; 
   3105  2390
   3106  2390				   .L090		;  temp5  =   ( player0y + player0height )  / 8
   3107  2390
   3108  2390							; complex statement detected
   3109  2390		       a5 99		      LDA	player0y
   3110  2392		       18		      CLC
   3111  2393		       65 a5		      ADC	player0height
   3112  2395		       4a		      lsr
   3113  2396		       4a		      lsr
   3114  2397		       4a		      lsr
   3115  2398		       85 cf		      STA	temp5
   3116  239a				   .
   3117  239a							; 
   3118  239a
   3119  239a				   .
   3120  239a							; 
   3121  239a
   3122  239a				   .
   3123  239a							; 
   3124  239a
   3125  239a				   .
   3126  239a							; 
   3127  239a
   3128  239a				   .L091		;  if pfread ( _Convert_X , temp5 )  then player0y  =	player0y  -  1
   3129  239a
   3130  239a		       a9 a4		      lda	#<C_function
   3131  239c		       8d 50 10 	      sta	DF0LOW
   3132  239f		       a9 01		      lda	#(>C_function) & $0F
   3133  23a1		       8d 68 10 	      sta	DF0HI
   3134  23a4		       a9 18		      lda	#24
   3135  23a6		       8d 78 10 	      sta	DF0WRITE
   3136  23a9		       a5 d2		      LDA	_Convert_X
   3137  23ab		       8d 78 10 	      STA	DF0WRITE
   3138  23ae		       a4 cf		      LDY	temp5
   3139  23b0		       8c 78 10 	      STY	DF0WRITE
   3140  23b3		       a9 ff		      lda	#255
   3141  23b5		       8d 5a 10 	      sta	CALLFUNCTION
   3142  23b8		       ad 08 10 	      LDA	DF0DATA
   3143  23bb		       d0 02		      BNE	.skipL091
   3144  23bd				   .condpart34
   3145  23bd		       c6 99		      DEC	player0y
   3146  23bf				   .skipL091
   3147  23bf				   .
   3148  23bf							; 
   3149  23bf
   3150  23bf				   .__Skip_Fall_02
   3151  23bf							; __Skip_Fall_02
   3152  23bf
   3153  23bf				   .
   3154  23bf							; 
   3155  23bf
   3156  23bf				   .
   3157  23bf							; 
   3158  23bf
   3159  23bf				   .
   3160  23bf							; 
   3161  23bf
   3162  23bf				   .
   3163  23bf							; 
   3164  23bf
   3165  23bf				   .L092		;  _Bit6_Duck_in_Progress{6}  =  0
   3166  23bf
   3167  23bf		       a5 e9		      LDA	_Bit6_Duck_in_Progress
   3168  23c1		       29 bf		      AND	#191
   3169  23c3		       85 e9		      STA	_Bit6_Duck_in_Progress
   3170  23c5				   .
   3171  23c5							; 
   3172  23c5
   3173  23c5				   .
   3174  23c5							; 
   3175  23c5
   3176  23c5				   .
   3177  23c5							; 
   3178  23c5
   3179  23c5				   .
   3180  23c5							; 
   3181  23c5
   3182  23c5				   .
   3183  23c5							; 
   3184  23c5
   3185  23c5				   .
   3186  23c5							; 
   3187  23c5
   3188  23c5				   .
   3189  23c5							; 
   3190  23c5
   3191  23c5				   .
   3192  23c5							; 
   3193  23c5
   3194  23c5				   .
   3195  23c5							; 
   3196  23c5
   3197  23c5				   .
   3198  23c5							; 
   3199  23c5
   3200  23c5				   .L093		;  if !joy0down then goto __Skip_Duck
   3201  23c5
   3202  23c5		       a9 20		      lda	#$20
   3203  23c7		       2c 80 02 	      bit	SWCHA
   3204  23ca		       f0 03		      BEQ	.skipL093
   3205  23cc				   .condpart35
   3206  23cc		       4c f8 33 	      jmp	.__Skip_Duck
   3207  23cf
   3208  23cf				   .skipL093
   3209  23cf				   .
   3210  23cf							; 
   3211  23cf
   3212  23cf				   .
   3213  23cf							; 
   3214  23cf
   3215  23cf				   .
   3216  23cf							; 
   3217  23cf
   3218  23cf				   .
   3219  23cf							; 
   3220  23cf
   3221  23cf				   .L094		;  if _Bit0_Fall_in_Progress{0}  ||  _Jump_Gravity_Counter then goto __Skip_Duck
   3222  23cf
   3223  23cf		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   3224  23d1		       4a		      LSR
   3225  23d2		       90 03		      BCC	.skipL094
   3226  23d4				   .condpart36
   3227  23d4		       4c db 33 	      jmp	.condpart37
   3228  23d7				   .skipL094
   3229  23d7		       a5 d4		      LDA	_Jump_Gravity_Counter
   3230  23d9		       f0 03		      BEQ	.skip12OR
   3231  23db				   .condpart37
   3232  23db		       4c f8 33 	      jmp	.__Skip_Duck
   3233  23de
   3234  23de				   .skip12OR
   3235  23de				   .
   3236  23de							; 
   3237  23de
   3238  23de				   .
   3239  23de							; 
   3240  23de
   3241  23de				   .
   3242  23de							; 
   3243  23de
   3244  23de				   .
   3245  23de							; 
   3246  23de
   3247  23de				   .L095		;  _Bit6_Duck_in_Progress{6}  =  1
   3248  23de
   3249  23de		       a5 e9		      LDA	_Bit6_Duck_in_Progress
   3250  23e0		       09 40		      ORA	#64
   3251  23e2		       85 e9		      STA	_Bit6_Duck_in_Progress
   3252  23e4				   .
   3253  23e4							; 
   3254  23e4
   3255  23e4				   .
   3256  23e4							; 
   3257  23e4
   3258  23e4				   .
   3259  23e4							; 
   3260  23e4
   3261  23e4				   .
   3262  23e4							; 
   3263  23e4
   3264  23e4				   .L096		;  player0color:
   3265  23e4
   3266  23e4		       a2 d5		      LDX	#<playercolorL096_0
   3267  23e6		       86 a3		      STX	player0color
   3268  23e8		       a9 62		      LDA	#((>playercolorL096_0) & $0f) | (((>playercolorL096_0) / 2) & $70)
   3269  23ea		       85 a4		      STA	player0color+1
   3270  23ec				   .
   3271  23ec							; 
   3272  23ec
   3273  23ec				   .L097		;  player0:
   3274  23ec
   3275  23ec		       a2 e9		      LDX	#<playerL097_0
   3276  23ee		       86 bd		      STX	player0pointerlo
   3277  23f0		       a9 62		      LDA	#((>playerL097_0) & $0f) | (((>playerL097_0) / 2) & $70)
   3278  23f2		       85 be		      STA	player0pointerhi
   3279  23f4		       a9 14		      LDA	#20
   3280  23f6		       85 a5		      STA	player0height
   3281  23f8				   .
   3282  23f8							; 
   3283  23f8
   3284  23f8				   .
   3285  23f8							; 
   3286  23f8
   3287  23f8				   .__Skip_Duck
   3288  23f8							; __Skip_Duck
   3289  23f8
   3290  23f8				   .
   3291  23f8							; 
   3292  23f8
   3293  23f8				   .
   3294  23f8							; 
   3295  23f8
   3296  23f8				   .
   3297  23f8							; 
   3298  23f8
   3299  23f8				   .
   3300  23f8							; 
   3301  23f8
   3302  23f8				   .
   3303  23f8							; 
   3304  23f8
   3305  23f8				   .
   3306  23f8							; 
   3307  23f8
   3308  23f8				   .
   3309  23f8							; 
   3310  23f8
   3311  23f8				   .L098		;  _Bit6_LR_Joy_Movement{6}  =  0
   3312  23f8
   3313  23f8		       a5 e8		      LDA	_Bit6_LR_Joy_Movement
   3314  23fa		       29 bf		      AND	#191
   3315  23fc		       85 e8		      STA	_Bit6_LR_Joy_Movement
   3316  23fe				   .
   3317  23fe							; 
   3318  23fe
   3319  23fe				   .
   3320  23fe							; 
   3321  23fe
   3322  23fe				   .
   3323  23fe							; 
   3324  23fe
   3325  23fe				   .
   3326  23fe							; 
   3327  23fe
   3328  23fe				   .
   3329  23fe							; 
   3330  23fe
   3331  23fe				   .
   3332  23fe							; 
   3333  23fe
   3334  23fe				   .
   3335  23fe							; 
   3336  23fe
   3337  23fe				   .
   3338  23fe							; 
   3339  23fe
   3340  23fe				   .
   3341  23fe							; 
   3342  23fe
   3343  23fe				   .
   3344  23fe							; 
   3345  23fe
   3346  23fe				   .L099		;  if !joy0left then goto __Skip_Joy0Left
   3347  23fe
   3348  23fe		       2c 80 02 	      bit	SWCHA
   3349  2401		       50 03		      BVC	.skipL099
   3350  2403				   .condpart38
   3351  2403		       4c af 34 	      jmp	.__Skip_Joy0Left
   3352  2406
   3353  2406				   .skipL099
   3354  2406				   .
   3355  2406							; 
   3356  2406
   3357  2406				   .
   3358  2406							; 
   3359  2406
   3360  2406				   .
   3361  2406							; 
   3362  2406
   3363  2406				   .
   3364  2406							; 
   3365  2406
   3366  2406				   .
   3367  2406							; 
   3368  2406
   3369  2406				   .
   3370  2406							; 
   3371  2406
   3372  2406				   .L0100		;  if _Bit0_Fall_in_Progress{0}  ||  _Jump_Gravity_Counter then _Bit5_Ground_Slide_in_Progress{5}  =  0  :  _Bit1_Slide_Left_in_Progress{1}  =  1  :  _Bit2_Slide_Right_in_Progress{2}  =  0  :  goto __Skip_Slide_Check_Left
   3373  2406
   3374  2406		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   3375  2408		       4a		      LSR
   3376  2409		       90 03		      BCC	.skipL0100
   3377  240b				   .condpart39
   3378  240b		       4c 12 34 	      jmp	.condpart40
   3379  240e				   .skipL0100
   3380  240e		       a5 d4		      LDA	_Jump_Gravity_Counter
   3381  2410		       f0 15		      BEQ	.skip13OR
   3382  2412				   .condpart40
   3383  2412		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   3384  2414		       29 df		      AND	#223
   3385  2416		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   3386  2418		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   3387  241a		       09 02		      ORA	#2
   3388  241c		       85 e9		      STA	_Bit1_Slide_Left_in_Progress
   3389  241e		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   3390  2420		       29 fb		      AND	#251
   3391  2422		       85 e9		      STA	_Bit2_Slide_Right_in_Progress
   3392  2424		       4c 57 34 	      jmp	.__Skip_Slide_Check_Left
   3393  2427
   3394  2427				   .skip13OR
   3395  2427				   .
   3396  2427							; 
   3397  2427
   3398  2427				   .
   3399  2427							; 
   3400  2427
   3401  2427				   .
   3402  2427							; 
   3403  2427
   3404  2427				   .
   3405  2427							; 
   3406  2427
   3407  2427				   .
   3408  2427							; 
   3409  2427
   3410  2427				   .L0101		;  if _Bit5_Ground_Slide_in_Progress{5} then _Bit5_Ground_Slide_in_Progress{5}  =  1  :  _Bit1_Slide_Left_in_Progress{1}  =  0  :  _Bit2_Slide_Right_in_Progress{2}  =  1  :  goto __Skip_Joy0Left
   3411  2427
   3412  2427		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   3413  2429		       29 20		      AND	#32
   3414  242b		       f0 15		      BEQ	.skipL0101
   3415  242d				   .condpart41
   3416  242d		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   3417  242f		       09 20		      ORA	#32
   3418  2431		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   3419  2433		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   3420  2435		       29 fd		      AND	#253
   3421  2437		       85 e9		      STA	_Bit1_Slide_Left_in_Progress
   3422  2439		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   3423  243b		       09 04		      ORA	#4
   3424  243d		       85 e9		      STA	_Bit2_Slide_Right_in_Progress
   3425  243f		       4c af 34 	      jmp	.__Skip_Joy0Left
   3426  2442
   3427  2442				   .skipL0101
   3428  2442				   .
   3429  2442							; 
   3430  2442
   3431  2442				   .
   3432  2442							; 
   3433  2442
   3434  2442				   .
   3435  2442							; 
   3436  2442
   3437  2442				   .
   3438  2442							; 
   3439  2442
   3440  2442				   .
   3441  2442							; 
   3442  2442
   3443  2442				   .
   3444  2442							; 
   3445  2442
   3446  2442				   .L0102		;  if _Bit2_Slide_Right_in_Progress{2} then _Bit5_Ground_Slide_in_Progress{5}	=  1  :  _Bit1_Slide_Left_in_Progress{1}  =  0	:  goto __Skip_Joy0Left
   3447  2442
   3448  2442		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   3449  2444		       29 04		      AND	#4
   3450  2446		       f0 0f		      BEQ	.skipL0102
   3451  2448				   .condpart42
   3452  2448		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   3453  244a		       09 20		      ORA	#32
   3454  244c		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   3455  244e		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   3456  2450		       29 fd		      AND	#253
   3457  2452		       85 e9		      STA	_Bit1_Slide_Left_in_Progress
   3458  2454		       4c af 34 	      jmp	.__Skip_Joy0Left
   3459  2457
   3460  2457				   .skipL0102
   3461  2457				   .
   3462  2457							; 
   3463  2457
   3464  2457				   .__Skip_Slide_Check_Left
   3465  2457							; __Skip_Slide_Check_Left
   3466  2457
   3467  2457				   .
   3468  2457							; 
   3469  2457
   3470  2457				   .
   3471  2457							; 
   3472  2457
   3473  2457				   .
   3474  2457							; 
   3475  2457
   3476  2457				   .
   3477  2457							; 
   3478  2457
   3479  2457				   .L0103		;  temp5  =   ( player0x - 18 )  / 4
   3480  2457
   3481  2457							; complex statement detected
   3482  2457		       a5 80		      LDA	player0x
   3483  2459		       38		      SEC
   3484  245a		       e9 12		      SBC	#18
   3485  245c		       4a		      lsr
   3486  245d		       4a		      lsr
   3487  245e		       85 cf		      STA	temp5
   3488  2460				   .
   3489  2460							; 
   3490  2460
   3491  2460				   .
   3492  2460							; 
   3493  2460
   3494  2460				   .
   3495  2460							; 
   3496  2460
   3497  2460				   .
   3498  2460							; 
   3499  2460
   3500  2460				   .L0104		;  if pfread ( temp5 , _Convert_Y )  then goto __Skip_Joy0Left
   3501  2460
   3502  2460		       a9 a4		      lda	#<C_function
   3503  2462		       8d 50 10 	      sta	DF0LOW
   3504  2465		       a9 01		      lda	#(>C_function) & $0F
   3505  2467		       8d 68 10 	      sta	DF0HI
   3506  246a		       a9 18		      lda	#24
   3507  246c		       8d 78 10 	      sta	DF0WRITE
   3508  246f		       a5 cf		      LDA	temp5
   3509  2471		       8d 78 10 	      STA	DF0WRITE
   3510  2474		       a4 d3		      LDY	_Convert_Y
   3511  2476		       8c 78 10 	      STY	DF0WRITE
   3512  2479		       a9 ff		      lda	#255
   3513  247b		       8d 5a 10 	      sta	CALLFUNCTION
   3514  247e		       ad 08 10 	      LDA	DF0DATA
   3515  2481		       d0 03		      BNE	.skipL0104
   3516  2483				   .condpart43
   3517  2483		       4c af 34 	      jmp	.__Skip_Joy0Left
   3518  2486
   3519  2486				   .skipL0104
   3520  2486				   .
   3521  2486							; 
   3522  2486
   3523  2486				   .
   3524  2486							; 
   3525  2486
   3526  2486				   .
   3527  2486							; 
   3528  2486
   3529  2486				   .
   3530  2486							; 
   3531  2486
   3532  2486				   .L0105		;  _Bit1_Slide_Left_in_Progress{1}  =	1  :  _Bit6_LR_Joy_Movement{6}	=  1
   3533  2486
   3534  2486		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   3535  2488		       09 02		      ORA	#2
   3536  248a		       85 e9		      STA	_Bit1_Slide_Left_in_Progress
   3537  248c		       a5 e8		      LDA	_Bit6_LR_Joy_Movement
   3538  248e		       09 40		      ORA	#64
   3539  2490		       85 e8		      STA	_Bit6_LR_Joy_Movement
   3540  2492				   .
   3541  2492							; 
   3542  2492
   3543  2492				   .
   3544  2492							; 
   3545  2492
   3546  2492				   .
   3547  2492							; 
   3548  2492
   3549  2492				   .
   3550  2492							; 
   3551  2492
   3552  2492				   .L0106		;  _P0_Left_Right  =  _P0_Left_Right  -  1.38	:  if player0x	<=  _c_Edge_Left then player0x	=  _c_Edge_Left
   3553  2492
   3554  2492		       a5 d1		      LDA	a
   3555  2494		       38		      SEC
   3556  2495		       e9 61		      SBC	#97
   3557  2497		       85 d1		      STA	a
   3558  2499		       a5 80		      LDA	_P0_Left_Right
   3559  249b		       e9 01		      SBC	#1
   3560  249d		       85 80		      STA	_P0_Left_Right
   3561  249f		       a9 0f		      LDA	#_c_Edge_Left
   3562  24a1		       c5 80		      CMP	player0x
   3563  24a3		       90 04		      BCC	.skipL0106
   3564  24a5				   .condpart44
   3565  24a5		       a9 0f		      LDA	#_c_Edge_Left
   3566  24a7		       85 80		      STA	player0x
   3567  24a9				   .skipL0106
   3568  24a9				   .
   3569  24a9							; 
   3570  24a9
   3571  24a9				   .
   3572  24a9							; 
   3573  24a9
   3574  24a9				   .
   3575  24a9							; 
   3576  24a9
   3577  24a9				   .
   3578  24a9							; 
   3579  24a9
   3580  24a9				   .L0107		;  _Bit4_Flip_P1{4}  =  0
   3581  24a9
   3582  24a9		       a5 e9		      LDA	_Bit4_Flip_P1
   3583  24ab		       29 ef		      AND	#239
   3584  24ad		       85 e9		      STA	_Bit4_Flip_P1
   3585  24af				   .
   3586  24af							; 
   3587  24af
   3588  24af				   .__Skip_Joy0Left
   3589  24af							; __Skip_Joy0Left
   3590  24af
   3591  24af				   .
   3592  24af							; 
   3593  24af
   3594  24af				   .
   3595  24af							; 
   3596  24af
   3597  24af				   .
   3598  24af							; 
   3599  24af
   3600  24af				   .
   3601  24af							; 
   3602  24af
   3603  24af				   .
   3604  24af							; 
   3605  24af
   3606  24af				   .
   3607  24af							; 
   3608  24af
   3609  24af				   .
   3610  24af							; 
   3611  24af
   3612  24af				   .
   3613  24af							; 
   3614  24af
   3615  24af				   .
   3616  24af							; 
   3617  24af
   3618  24af				   .
   3619  24af							; 
   3620  24af
   3621  24af				   .L0108		;  if !joy0right then goto __Skip_Joy0Right
   3622  24af
   3623  24af		       2c 80 02 	      bit	SWCHA
   3624  24b2		       10 03		      BPL	.skipL0108
   3625  24b4				   .condpart45
   3626  24b4		       4c 60 35 	      jmp	.__Skip_Joy0Right
   3627  24b7
   3628  24b7				   .skipL0108
   3629  24b7				   .
   3630  24b7							; 
   3631  24b7
   3632  24b7				   .
   3633  24b7							; 
   3634  24b7
   3635  24b7				   .
   3636  24b7							; 
   3637  24b7
   3638  24b7				   .
   3639  24b7							; 
   3640  24b7
   3641  24b7				   .
   3642  24b7							; 
   3643  24b7
   3644  24b7				   .
   3645  24b7							; 
   3646  24b7
   3647  24b7				   .L0109		;  if _Bit0_Fall_in_Progress{0}  ||  _Jump_Gravity_Counter then _Bit5_Ground_Slide_in_Progress{5}  =  0  :  _Bit2_Slide_Right_in_Progress{2}  =  1  :	_Bit1_Slide_Left_in_Progress{1}  =  0  :  goto __Skip_Slide_Check_Right
   3648  24b7
   3649  24b7		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   3650  24b9		       4a		      LSR
   3651  24ba		       90 03		      BCC	.skipL0109
   3652  24bc				   .condpart46
   3653  24bc		       4c c3 34 	      jmp	.condpart47
   3654  24bf				   .skipL0109
   3655  24bf		       a5 d4		      LDA	_Jump_Gravity_Counter
   3656  24c1		       f0 15		      BEQ	.skip14OR
   3657  24c3				   .condpart47
   3658  24c3		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   3659  24c5		       29 df		      AND	#223
   3660  24c7		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   3661  24c9		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   3662  24cb		       09 04		      ORA	#4
   3663  24cd		       85 e9		      STA	_Bit2_Slide_Right_in_Progress
   3664  24cf		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   3665  24d1		       29 fd		      AND	#253
   3666  24d3		       85 e9		      STA	_Bit1_Slide_Left_in_Progress
   3667  24d5		       4c 08 35 	      jmp	.__Skip_Slide_Check_Right
   3668  24d8
   3669  24d8				   .skip14OR
   3670  24d8				   .
   3671  24d8							; 
   3672  24d8
   3673  24d8				   .
   3674  24d8							; 
   3675  24d8
   3676  24d8				   .
   3677  24d8							; 
   3678  24d8
   3679  24d8				   .
   3680  24d8							; 
   3681  24d8
   3682  24d8				   .
   3683  24d8							; 
   3684  24d8
   3685  24d8				   .L0110		;  if _Bit5_Ground_Slide_in_Progress{5} then _Bit5_Ground_Slide_in_Progress{5}  =  1  :  _Bit2_Slide_Right_in_Progress{2}  =  0  :  _Bit1_Slide_Left_in_Progress{1}  =  1  :  goto __Skip_Joy0Right
   3686  24d8
   3687  24d8		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   3688  24da		       29 20		      AND	#32
   3689  24dc		       f0 15		      BEQ	.skipL0110
   3690  24de				   .condpart48
   3691  24de		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   3692  24e0		       09 20		      ORA	#32
   3693  24e2		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   3694  24e4		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   3695  24e6		       29 fb		      AND	#251
   3696  24e8		       85 e9		      STA	_Bit2_Slide_Right_in_Progress
   3697  24ea		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   3698  24ec		       09 02		      ORA	#2
   3699  24ee		       85 e9		      STA	_Bit1_Slide_Left_in_Progress
   3700  24f0		       4c 60 35 	      jmp	.__Skip_Joy0Right
   3701  24f3
   3702  24f3				   .skipL0110
   3703  24f3				   .
   3704  24f3							; 
   3705  24f3
   3706  24f3				   .
   3707  24f3							; 
   3708  24f3
   3709  24f3				   .
   3710  24f3							; 
   3711  24f3
   3712  24f3				   .
   3713  24f3							; 
   3714  24f3
   3715  24f3				   .
   3716  24f3							; 
   3717  24f3
   3718  24f3				   .
   3719  24f3							; 
   3720  24f3
   3721  24f3				   .L0111		;  if _Bit1_Slide_Left_in_Progress{1} then _Bit5_Ground_Slide_in_Progress{5}  =  1  :	_Bit2_Slide_Right_in_Progress{2}  =  0	:  goto __Skip_Joy0Right
   3722  24f3
   3723  24f3		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   3724  24f5		       29 02		      AND	#2
   3725  24f7		       f0 0f		      BEQ	.skipL0111
   3726  24f9				   .condpart49
   3727  24f9		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   3728  24fb		       09 20		      ORA	#32
   3729  24fd		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   3730  24ff		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   3731  2501		       29 fb		      AND	#251
   3732  2503		       85 e9		      STA	_Bit2_Slide_Right_in_Progress
   3733  2505		       4c 60 35 	      jmp	.__Skip_Joy0Right
   3734  2508
   3735  2508				   .skipL0111
   3736  2508				   .
   3737  2508							; 
   3738  2508
   3739  2508				   .__Skip_Slide_Check_Right
   3740  2508							; __Skip_Slide_Check_Right
   3741  2508
   3742  2508				   .
   3743  2508							; 
   3744  2508
   3745  2508				   .
   3746  2508							; 
   3747  2508
   3748  2508				   .
   3749  2508							; 
   3750  2508
   3751  2508				   .
   3752  2508							; 
   3753  2508
   3754  2508				   .L0112		;  temp5  =   ( player0x - 8 )  / 4
   3755  2508
   3756  2508							; complex statement detected
   3757  2508		       a5 80		      LDA	player0x
   3758  250a		       38		      SEC
   3759  250b		       e9 08		      SBC	#8
   3760  250d		       4a		      lsr
   3761  250e		       4a		      lsr
   3762  250f		       85 cf		      STA	temp5
   3763  2511				   .
   3764  2511							; 
   3765  2511
   3766  2511				   .
   3767  2511							; 
   3768  2511
   3769  2511				   .
   3770  2511							; 
   3771  2511
   3772  2511				   .
   3773  2511							; 
   3774  2511
   3775  2511				   .L0113		;  if pfread ( temp5 , _Convert_Y )  then goto __Skip_Joy0Right
   3776  2511
   3777  2511		       a9 a4		      lda	#<C_function
   3778  2513		       8d 50 10 	      sta	DF0LOW
   3779  2516		       a9 01		      lda	#(>C_function) & $0F
   3780  2518		       8d 68 10 	      sta	DF0HI
   3781  251b		       a9 18		      lda	#24
   3782  251d		       8d 78 10 	      sta	DF0WRITE
   3783  2520		       a5 cf		      LDA	temp5
   3784  2522		       8d 78 10 	      STA	DF0WRITE
   3785  2525		       a4 d3		      LDY	_Convert_Y
   3786  2527		       8c 78 10 	      STY	DF0WRITE
   3787  252a		       a9 ff		      lda	#255
   3788  252c		       8d 5a 10 	      sta	CALLFUNCTION
   3789  252f		       ad 08 10 	      LDA	DF0DATA
   3790  2532		       d0 03		      BNE	.skipL0113
   3791  2534				   .condpart50
   3792  2534		       4c 60 35 	      jmp	.__Skip_Joy0Right
   3793  2537
   3794  2537				   .skipL0113
   3795  2537				   .
   3796  2537							; 
   3797  2537
   3798  2537				   .
   3799  2537							; 
   3800  2537
   3801  2537				   .
   3802  2537							; 
   3803  2537
   3804  2537				   .
   3805  2537							; 
   3806  2537
   3807  2537				   .L0114		;  _Bit2_Slide_Right_in_Progress{2}  =  1  :  _Bit6_LR_Joy_Movement{6}  =  1
   3808  2537
   3809  2537		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   3810  2539		       09 04		      ORA	#4
   3811  253b		       85 e9		      STA	_Bit2_Slide_Right_in_Progress
   3812  253d		       a5 e8		      LDA	_Bit6_LR_Joy_Movement
   3813  253f		       09 40		      ORA	#64
   3814  2541		       85 e8		      STA	_Bit6_LR_Joy_Movement
   3815  2543				   .
   3816  2543							; 
   3817  2543
   3818  2543				   .
   3819  2543							; 
   3820  2543
   3821  2543				   .
   3822  2543							; 
   3823  2543
   3824  2543				   .
   3825  2543							; 
   3826  2543
   3827  2543				   .L0115		;  _P0_Left_Right  =  _P0_Left_Right  +  1.38	:  if player0x	>=  _c_Edge_Right then player0x  =  _c_Edge_Right
   3828  2543
   3829  2543		       a5 d1		      LDA	a
   3830  2545		       18		      CLC
   3831  2546		       69 61		      ADC	#97
   3832  2548		       85 d1		      STA	a
   3833  254a		       a5 80		      LDA	_P0_Left_Right
   3834  254c		       69 01		      ADC	#1
   3835  254e		       85 80		      STA	_P0_Left_Right
   3836  2550		       a5 80		      LDA	player0x
   3837  2552		       c9 89		      CMP	#_c_Edge_Right
   3838  2554		       90 04		      BCC	.skipL0115
   3839  2556				   .condpart51
   3840  2556		       a9 89		      LDA	#_c_Edge_Right
   3841  2558		       85 80		      STA	player0x
   3842  255a				   .skipL0115
   3843  255a				   .
   3844  255a							; 
   3845  255a
   3846  255a				   .
   3847  255a							; 
   3848  255a
   3849  255a				   .
   3850  255a							; 
   3851  255a
   3852  255a				   .
   3853  255a							; 
   3854  255a
   3855  255a				   .L0116		;  _Bit4_Flip_P1{4}  =  1
   3856  255a
   3857  255a		       a5 e9		      LDA	_Bit4_Flip_P1
   3858  255c		       09 10		      ORA	#16
   3859  255e		       85 e9		      STA	_Bit4_Flip_P1
   3860  2560				   .
   3861  2560							; 
   3862  2560
   3863  2560				   .__Skip_Joy0Right
   3864  2560							; __Skip_Joy0Right
   3865  2560
   3866  2560				   .
   3867  2560							; 
   3868  2560
   3869  2560				   .
   3870  2560							; 
   3871  2560
   3872  2560				   .
   3873  2560							; 
   3874  2560
   3875  2560				   .
   3876  2560							; 
   3877  2560
   3878  2560				   .
   3879  2560							; 
   3880  2560
   3881  2560				   .
   3882  2560							; 
   3883  2560
   3884  2560				   .
   3885  2560							; 
   3886  2560
   3887  2560				   .
   3888  2560							; 
   3889  2560
   3890  2560				   .
   3891  2560							; 
   3892  2560
   3893  2560				   .
   3894  2560							; 
   3895  2560
   3896  2560				   .L0117		;  if !_Bit6_LR_Joy_Movement{6} then goto __Done_Anim_jump
   3897  2560
   3898  2560		       24 e8		      BIT	_Bit6_LR_Joy_Movement
   3899  2562		       70 03		      BVS	.skipL0117
   3900  2564				   .condpart52
   3901  2564		       4c a3 35 	      jmp	.__Done_Anim_jump
   3902  2567
   3903  2567				   .skipL0117
   3904  2567				   .
   3905  2567							; 
   3906  2567
   3907  2567				   .
   3908  2567							; 
   3909  2567
   3910  2567				   .
   3911  2567							; 
   3912  2567
   3913  2567				   .
   3914  2567							; 
   3915  2567
   3916  2567				   .L0118		;  if _Jump_Gravity_Counter  ||  _Bit0_Fall_in_Progress{0} then goto __Done_Anim_jump
   3917  2567
   3918  2567		       a5 d4		      LDA	_Jump_Gravity_Counter
   3919  2569		       f0 03		      BEQ	.skipL0118
   3920  256b				   .condpart53
   3921  256b		       4c 73 35 	      jmp	.condpart54
   3922  256e				   .skipL0118
   3923  256e		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   3924  2570		       4a		      LSR
   3925  2571		       90 03		      BCC	.skip15OR
   3926  2573				   .condpart54
   3927  2573		       4c a3 35 	      jmp	.__Done_Anim_jump
   3928  2576
   3929  2576				   .skip15OR
   3930  2576				   .
   3931  2576							; 
   3932  2576
   3933  2576				   .
   3934  2576							; 
   3935  2576
   3936  2576				   .
   3937  2576							; 
   3938  2576
   3939  2576				   .
   3940  2576							; 
   3941  2576
   3942  2576				   .L0119		;  if player0x  <=  _c_Edge_Left  ||  player0x  >=  _c_Edge_Right then goto __Done_Anim_jump
   3943  2576
   3944  2576		       a9 0f		      LDA	#_c_Edge_Left
   3945  2578		       c5 80		      CMP	player0x
   3946  257a		       90 03		      BCC	.skipL0119
   3947  257c				   .condpart55
   3948  257c		       4c 85 35 	      jmp	.condpart56
   3949  257f				   .skipL0119
   3950  257f		       a5 80		      LDA	player0x
   3951  2581		       c9 89		      CMP	#_c_Edge_Right
   3952  2583		       90 03		      BCC	.skip16OR
   3953  2585				   .condpart56
   3954  2585		       4c a3 35 	      jmp	.__Done_Anim_jump
   3955  2588
   3956  2588				   .skip16OR
   3957  2588				   .
   3958  2588							; 
   3959  2588
   3960  2588				   .
   3961  2588							; 
   3962  2588
   3963  2588				   .
   3964  2588							; 
   3965  2588
   3966  2588				   .
   3967  2588							; 
   3968  2588
   3969  2588				   .L0120		;  player0color:
   3970  2588
   3971  2588		       a2 fd		      LDX	#<playercolorL0120_0
   3972  258a		       86 a3		      STX	player0color
   3973  258c		       a9 62		      LDA	#((>playercolorL0120_0) & $0f) | (((>playercolorL0120_0) / 2) & $70)
   3974  258e		       85 a4		      STA	player0color+1
   3975  2590				   .
   3976  2590							; 
   3977  2590
   3978  2590				   .
   3979  2590							; 
   3980  2590
   3981  2590				   .
   3982  2590							; 
   3983  2590
   3984  2590				   .
   3985  2590							; 
   3986  2590
   3987  2590				   .L0121		;  on _Frame_Counter goto __Frame0 __Frame1 __Frame0 __Frame2
   3988  2590
   3989  2590		       a6 da		      LDX	_Frame_Counter
   3990  2592		       bd 9b 35 	      LDA	.L0121jumptablehi,x
   3991  2595		       48		      PHA
   3992  2596		       bd 9f 35 	      LDA	.L0121jumptablelo,x
   3993  2599		       48		      PHA
   3994  259a		       60		      RTS
   3995  259b				   .L0121jumptablehi
   3996  259b		       39		      .byte.b	>(.__Frame0-1)
   3997  259c		       39		      .byte.b	>(.__Frame1-1)
   3998  259d		       39		      .byte.b	>(.__Frame0-1)
   3999  259e		       39		      .byte.b	>(.__Frame2-1)
   4000  259f				   .L0121jumptablelo
   4001  259f		       4f		      .byte.b	<(.__Frame0-1)
   4002  25a0		       5e		      .byte.b	<(.__Frame1-1)
   4003  25a1		       4f		      .byte.b	<(.__Frame0-1)
   4004  25a2		       6d		      .byte.b	<(.__Frame2-1)
   4005  25a3				   .
   4006  25a3							; 
   4007  25a3
   4008  25a3				   .__Done_Anim_jump
   4009  25a3							; __Done_Anim_jump
   4010  25a3
   4011  25a3				   .
   4012  25a3							; 
   4013  25a3
   4014  25a3				   .
   4015  25a3							; 
   4016  25a3
   4017  25a3				   .
   4018  25a3							; 
   4019  25a3
   4020  25a3				   .
   4021  25a3							; 
   4022  25a3
   4023  25a3				   .
   4024  25a3							; 
   4025  25a3
   4026  25a3				   .
   4027  25a3							; 
   4028  25a3
   4029  25a3				   .
   4030  25a3							; 
   4031  25a3
   4032  25a3				   .
   4033  25a3							; 
   4034  25a3
   4035  25a3				   .
   4036  25a3							; 
   4037  25a3
   4038  25a3				   .
   4039  25a3							; 
   4040  25a3
   4041  25a3				   .L0122		;  if _Bit5_Ground_Slide_in_Progress{5} then goto __Skip_Joy0_Slide_Check
   4042  25a3
   4043  25a3		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   4044  25a5		       29 20		      AND	#32
   4045  25a7		       f0 03		      BEQ	.skipL0122
   4046  25a9				   .condpart57
   4047  25a9		       4c c4 35 	      jmp	.__Skip_Joy0_Slide_Check
   4048  25ac
   4049  25ac				   .skipL0122
   4050  25ac				   .
   4051  25ac							; 
   4052  25ac
   4053  25ac				   .
   4054  25ac							; 
   4055  25ac
   4056  25ac				   .
   4057  25ac							; 
   4058  25ac
   4059  25ac				   .
   4060  25ac							; 
   4061  25ac
   4062  25ac				   .L0123		;  if joy0right  ||  joy0left then _Slide_Counter  =  0  :  _Slide_Speed  =  1  :  goto __Skip_Slide
   4063  25ac
   4064  25ac		       2c 80 02 	      bit	SWCHA
   4065  25af		       30 03		      BMI	.skipL0123
   4066  25b1				   .condpart58
   4067  25b1		       4c b9 35 	      jmp	.condpart59
   4068  25b4				   .skipL0123
   4069  25b4		       2c 80 02 	      bit	SWCHA
   4070  25b7		       70 0b		      BVS	.skip17OR
   4071  25b9				   .condpart59
   4072  25b9		       a9 00		      LDA	#0
   4073  25bb		       85 d6		      STA	_Slide_Counter
   4074  25bd		       a9 01		      LDA	#1
   4075  25bf		       85 d7		      STA	_Slide_Speed
   4076  25c1		       4c de 36 	      jmp	.__Skip_Slide
   4077  25c4
   4078  25c4				   .skip17OR
   4079  25c4				   .
   4080  25c4							; 
   4081  25c4
   4082  25c4				   .__Skip_Joy0_Slide_Check
   4083  25c4							; __Skip_Joy0_Slide_Check
   4084  25c4
   4085  25c4				   .
   4086  25c4							; 
   4087  25c4
   4088  25c4				   .
   4089  25c4							; 
   4090  25c4
   4091  25c4				   .
   4092  25c4							; 
   4093  25c4
   4094  25c4				   .
   4095  25c4							; 
   4096  25c4
   4097  25c4				   .L0124		;  if player0x  <=  _c_Edge_Left then player0x  =  _c_Edge_Left  :  _Slide_Counter  =	0  :  _Bit5_Ground_Slide_in_Progress{5}  =  0  :  _Bit1_Slide_Left_in_Progress{1}  =  0  :  _Slide_Speed  =  1	:  _Bit2_Slide_Right_in_Progress{2}  =	1  :  goto __Skip_Slide
   4098  25c4
   4099  25c4		       a9 0f		      LDA	#_c_Edge_Left
   4100  25c6		       c5 80		      CMP	player0x
   4101  25c8		       90 21		      BCC	.skipL0124
   4102  25ca				   .condpart60
   4103  25ca		       a9 0f		      LDA	#_c_Edge_Left
   4104  25cc		       85 80		      STA	player0x
   4105  25ce		       a9 00		      LDA	#0
   4106  25d0		       85 d6		      STA	_Slide_Counter
   4107  25d2		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   4108  25d4		       29 df		      AND	#223
   4109  25d6		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   4110  25d8		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   4111  25da		       29 fd		      AND	#253
   4112  25dc		       85 e9		      STA	_Bit1_Slide_Left_in_Progress
   4113  25de		       a9 01		      LDA	#1
   4114  25e0		       85 d7		      STA	_Slide_Speed
   4115  25e2		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   4116  25e4		       09 04		      ORA	#4
   4117  25e6		       85 e9		      STA	_Bit2_Slide_Right_in_Progress
   4118  25e8		       4c de 36 	      jmp	.__Skip_Slide
   4119  25eb
   4120  25eb				   .skipL0124
   4121  25eb				   .L0125		;  if player0x  >=  _c_Edge_Right then player0x  =  _c_Edge_Right  :  _Slide_Counter  =  0  :	_Bit5_Ground_Slide_in_Progress{5}  =  0  :  _Bit2_Slide_Right_in_Progress{2}  =  0  :  _Slide_Speed  =	1  :  _Bit1_Slide_Left_in_Progress{1}  =  1  :	goto __Skip_Slide
   4122  25eb
   4123  25eb		       a5 80		      LDA	player0x
   4124  25ed		       c9 89		      CMP	#_c_Edge_Right
   4125  25ef		       90 21		      BCC	.skipL0125
   4126  25f1				   .condpart61
   4127  25f1		       a9 89		      LDA	#_c_Edge_Right
   4128  25f3		       85 80		      STA	player0x
   4129  25f5		       a9 00		      LDA	#0
   4130  25f7		       85 d6		      STA	_Slide_Counter
   4131  25f9		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   4132  25fb		       29 df		      AND	#223
   4133  25fd		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   4134  25ff		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   4135  2601		       29 fb		      AND	#251
   4136  2603		       85 e9		      STA	_Bit2_Slide_Right_in_Progress
   4137  2605		       a9 01		      LDA	#1
   4138  2607		       85 d7		      STA	_Slide_Speed
   4139  2609		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   4140  260b		       09 02		      ORA	#2
   4141  260d		       85 e9		      STA	_Bit1_Slide_Left_in_Progress
   4142  260f		       4c de 36 	      jmp	.__Skip_Slide
   4143  2612
   4144  2612				   .skipL0125
   4145  2612				   .
   4146  2612							; 
   4147  2612
   4148  2612				   .
   4149  2612							; 
   4150  2612
   4151  2612				   .
   4152  2612							; 
   4153  2612
   4154  2612				   .
   4155  2612							; 
   4156  2612
   4157  2612				   .L0126		;  if !_Bit1_Slide_Left_in_Progress{1}  &&  !_Bit2_Slide_Right_in_Progress{2} then goto __Skip_Slide
   4158  2612
   4159  2612		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   4160  2614		       29 02		      AND	#2
   4161  2616		       d0 09		      BNE	.skipL0126
   4162  2618				   .condpart62
   4163  2618		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   4164  261a		       29 04		      AND	#4
   4165  261c		       d0 03		      BNE	.skip62then
   4166  261e				   .condpart63
   4167  261e		       4c de 36 	      jmp	.__Skip_Slide
   4168  2621
   4169  2621				   .skip62then
   4170  2621				   .skipL0126
   4171  2621				   .
   4172  2621							; 
   4173  2621
   4174  2621				   .
   4175  2621							; 
   4176  2621
   4177  2621				   .
   4178  2621							; 
   4179  2621
   4180  2621				   .
   4181  2621							; 
   4182  2621
   4183  2621				   .L0127		;  _Slide_Limit  =  31  :  _Bit5_Ground_Slide_in_Progress{5}  =  1
   4184  2621
   4185  2621		       a9 1f		      LDA	#31
   4186  2623		       85 d8		      STA	_Slide_Limit
   4187  2625		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   4188  2627		       09 20		      ORA	#32
   4189  2629		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   4190  262b				   .
   4191  262b							; 
   4192  262b
   4193  262b				   .
   4194  262b							; 
   4195  262b
   4196  262b				   .
   4197  262b							; 
   4198  262b
   4199  262b				   .
   4200  262b							; 
   4201  262b
   4202  262b				   .
   4203  262b							; 
   4204  262b
   4205  262b				   .L0128		;  if _Bit0_Fall_in_Progress{0}  ||  _Jump_Gravity_Counter then _Slide_Limit  =  127  :  _Bit5_Ground_Slide_in_Progress{5}  =	0
   4206  262b
   4207  262b		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   4208  262d		       4a		      LSR
   4209  262e		       90 03		      BCC	.skipL0128
   4210  2630				   .condpart64
   4211  2630		       4c 37 36 	      jmp	.condpart65
   4212  2633				   .skipL0128
   4213  2633		       a5 d4		      LDA	_Jump_Gravity_Counter
   4214  2635		       f0 0a		      BEQ	.skip19OR
   4215  2637				   .condpart65
   4216  2637		       a9 7f		      LDA	#127
   4217  2639		       85 d8		      STA	_Slide_Limit
   4218  263b		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   4219  263d		       29 df		      AND	#223
   4220  263f		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   4221  2641				   .skip19OR
   4222  2641				   .
   4223  2641							; 
   4224  2641
   4225  2641				   .
   4226  2641							; 
   4227  2641
   4228  2641				   .
   4229  2641							; 
   4230  2641
   4231  2641				   .
   4232  2641							; 
   4233  2641
   4234  2641				   .L0129		;  if _Bit6_Duck_in_Progress{6} then goto __Skip_Slide_Sprite
   4235  2641
   4236  2641		       24 e9		      BIT	_Bit6_Duck_in_Progress
   4237  2643		       50 03		      BVC	.skipL0129
   4238  2645				   .condpart66
   4239  2645		       4c 6b 36 	      jmp	.__Skip_Slide_Sprite
   4240  2648
   4241  2648				   .skipL0129
   4242  2648				   .
   4243  2648							; 
   4244  2648
   4245  2648				   .
   4246  2648							; 
   4247  2648
   4248  2648				   .
   4249  2648							; 
   4250  2648
   4251  2648				   .
   4252  2648							; 
   4253  2648
   4254  2648				   .L0130		;  if _Jump_Gravity_Counter  ||  _Bit0_Fall_in_Progress{0} then goto __Skip_Slide_Sprite
   4255  2648
   4256  2648		       a5 d4		      LDA	_Jump_Gravity_Counter
   4257  264a		       f0 03		      BEQ	.skipL0130
   4258  264c				   .condpart67
   4259  264c		       4c 54 36 	      jmp	.condpart68
   4260  264f				   .skipL0130
   4261  264f		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   4262  2651		       4a		      LSR
   4263  2652		       90 03		      BCC	.skip20OR
   4264  2654				   .condpart68
   4265  2654		       4c 6b 36 	      jmp	.__Skip_Slide_Sprite
   4266  2657
   4267  2657				   .skip20OR
   4268  2657				   .
   4269  2657							; 
   4270  2657
   4271  2657				   .
   4272  2657							; 
   4273  2657
   4274  2657				   .
   4275  2657							; 
   4276  2657
   4277  2657				   .
   4278  2657							; 
   4279  2657
   4280  2657				   .L0131		;  player0:
   4281  2657
   4282  2657		       a2 11		      LDX	#<playerL0131_0
   4283  2659		       86 bd		      STX	player0pointerlo
   4284  265b		       a9 63		      LDA	#((>playerL0131_0) & $0f) | (((>playerL0131_0) / 2) & $70)
   4285  265d		       85 be		      STA	player0pointerhi
   4286  265f		       a9 14		      LDA	#20
   4287  2661		       85 a5		      STA	player0height
   4288  2663				   .
   4289  2663							; 
   4290  2663
   4291  2663				   .L0132		;  player0color:
   4292  2663
   4293  2663		       a2 25		      LDX	#<playercolorL0132_0
   4294  2665		       86 a3		      STX	player0color
   4295  2667		       a9 63		      LDA	#((>playercolorL0132_0) & $0f) | (((>playercolorL0132_0) / 2) & $70)
   4296  2669		       85 a4		      STA	player0color+1
   4297  266b				   .
   4298  266b							; 
   4299  266b
   4300  266b				   .__Skip_Slide_Sprite
   4301  266b							; __Skip_Slide_Sprite
   4302  266b
   4303  266b				   .
   4304  266b							; 
   4305  266b
   4306  266b				   .
   4307  266b							; 
   4308  266b
   4309  266b				   .
   4310  266b							; 
   4311  266b
   4312  266b				   .
   4313  266b							; 
   4314  266b
   4315  266b				   .
   4316  266b							; 
   4317  266b
   4318  266b				   .L0133		;  if _Slide_Counter  =  0  &&  _Ch0_Sound  =	0 then if !_Bit0_Fall_in_Progress{0} then _Ch0_Sound  =  _c_Slide_Sound  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   4319  266b
   4320  266b		       a5 d6		      LDA	_Slide_Counter
   4321  266d		       c9 00		      CMP	#0
   4322  266f		       d0 17		      BNE	.skipL0133
   4323  2671				   .condpart69
   4324  2671		       a5 db		      LDA	_Ch0_Sound
   4325  2673		       c9 00		      CMP	#0
   4326  2675		       d0 11		      BNE	.skip69then
   4327  2677				   .condpart70
   4328  2677		       a5 e9		      LDA	_Bit0_Fall_in_Progress
   4329  2679		       4a		      LSR
   4330  267a		       b0 0c		      BCS	.skip70then
   4331  267c				   .condpart71
   4332  267c		       a9 03		      LDA	#_c_Slide_Sound
   4333  267e		       85 db		      STA	_Ch0_Sound
   4334  2680		       a9 01		      LDA	#1
   4335  2682		       85 dc		      STA	_Ch0_Duration
   4336  2684		       a9 00		      LDA	#0
   4337  2686		       85 dd		      STA	_Ch0_Counter
   4338  2688				   .skip70then
   4339  2688				   .skip69then
   4340  2688				   .skipL0133
   4341  2688				   .
   4342  2688							; 
   4343  2688
   4344  2688				   .
   4345  2688							; 
   4346  2688
   4347  2688				   .
   4348  2688							; 
   4349  2688
   4350  2688				   .
   4351  2688							; 
   4352  2688
   4353  2688				   .L0134		;  _Slide_Counter  =  _Slide_Counter  +  1
   4354  2688
   4355  2688		       e6 d6		      INC	_Slide_Counter
   4356  268a				   .
   4357  268a							; 
   4358  268a
   4359  268a				   .
   4360  268a							; 
   4361  268a
   4362  268a				   .
   4363  268a							; 
   4364  268a
   4365  268a				   .
   4366  268a							; 
   4367  268a
   4368  268a				   .L0135		;  if _Slide_Counter  <  _Slide_Speed then goto __Skip_Slide
   4369  268a
   4370  268a		       a5 d6		      LDA	_Slide_Counter
   4371  268c		       c5 d7		      CMP	_Slide_Speed
   4372  268e		       b0 03		      BCS	.skipL0135
   4373  2690				   .condpart72
   4374  2690		       4c de 36 	      jmp	.__Skip_Slide
   4375  2693
   4376  2693				   .skipL0135
   4377  2693				   .
   4378  2693							; 
   4379  2693
   4380  2693				   .
   4381  2693							; 
   4382  2693
   4383  2693				   .
   4384  2693							; 
   4385  2693
   4386  2693				   .
   4387  2693							; 
   4388  2693
   4389  2693				   .L0136		;  _Slide_Speed  =  _Slide_Speed  *  2
   4390  2693
   4391  2693		       a5 d7		      LDA	_Slide_Speed
   4392  2695		       0a		      asl
   4393  2696		       85 d7		      STA	_Slide_Speed
   4394  2698				   .
   4395  2698							; 
   4396  2698
   4397  2698				   .
   4398  2698							; 
   4399  2698
   4400  2698				   .
   4401  2698							; 
   4402  2698
   4403  2698				   .
   4404  2698							; 
   4405  2698
   4406  2698				   .L0137		;  if _Bit1_Slide_Left_in_Progress{1} then _P0_Left_Right  =  _P0_Left_Right  -  1.04
   4407  2698
   4408  2698		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   4409  269a		       29 02		      AND	#2
   4410  269c		       f0 0d		      BEQ	.skipL0137
   4411  269e				   .condpart73
   4412  269e		       a5 d1		      LDA	a
   4413  26a0		       38		      SEC
   4414  26a1		       e9 0a		      SBC	#10
   4415  26a3		       85 d1		      STA	a
   4416  26a5		       a5 80		      LDA	_P0_Left_Right
   4417  26a7		       e9 01		      SBC	#1
   4418  26a9		       85 80		      STA	_P0_Left_Right
   4419  26ab				   .skipL0137
   4420  26ab				   .L0138		;  if _Bit2_Slide_Right_in_Progress{2} then _P0_Left_Right  =	_P0_Left_Right	+  1.04
   4421  26ab
   4422  26ab		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   4423  26ad		       29 04		      AND	#4
   4424  26af		       f0 0d		      BEQ	.skipL0138
   4425  26b1				   .condpart74
   4426  26b1		       a5 d1		      LDA	a
   4427  26b3		       18		      CLC
   4428  26b4		       69 0a		      ADC	#10
   4429  26b6		       85 d1		      STA	a
   4430  26b8		       a5 80		      LDA	_P0_Left_Right
   4431  26ba		       69 01		      ADC	#1
   4432  26bc		       85 80		      STA	_P0_Left_Right
   4433  26be				   .skipL0138
   4434  26be				   .
   4435  26be							; 
   4436  26be
   4437  26be				   .
   4438  26be							; 
   4439  26be
   4440  26be				   .
   4441  26be							; 
   4442  26be
   4443  26be				   .
   4444  26be							; 
   4445  26be
   4446  26be				   .L0139		;  if _Slide_Speed  >	_Slide_Limit then _Slide_Speed	=  1  :  _Slide_Counter  =  0  :  _Bit1_Slide_Left_in_Progress{1}  =  0  :  _Bit2_Slide_Right_in_Progress{2}  =  0  :  _Bit5_Ground_Slide_in_Progress{5}  =  0
   4447  26be
   4448  26be		       a5 d8		      LDA	_Slide_Limit
   4449  26c0		       c5 d7		      CMP	_Slide_Speed
   4450  26c2		       b0 1a		      BCS	.skipL0139
   4451  26c4				   .condpart75
   4452  26c4		       a9 01		      LDA	#1
   4453  26c6		       85 d7		      STA	_Slide_Speed
   4454  26c8		       a9 00		      LDA	#0
   4455  26ca		       85 d6		      STA	_Slide_Counter
   4456  26cc		       a5 e9		      LDA	_Bit1_Slide_Left_in_Progress
   4457  26ce		       29 fd		      AND	#253
   4458  26d0		       85 e9		      STA	_Bit1_Slide_Left_in_Progress
   4459  26d2		       a5 e9		      LDA	_Bit2_Slide_Right_in_Progress
   4460  26d4		       29 fb		      AND	#251
   4461  26d6		       85 e9		      STA	_Bit2_Slide_Right_in_Progress
   4462  26d8		       a5 e9		      LDA	_Bit5_Ground_Slide_in_Progress
   4463  26da		       29 df		      AND	#223
   4464  26dc		       85 e9		      STA	_Bit5_Ground_Slide_in_Progress
   4465  26de				   .skipL0139
   4466  26de				   .
   4467  26de							; 
   4468  26de
   4469  26de				   .__Skip_Slide
   4470  26de							; __Skip_Slide
   4471  26de
   4472  26de				   .
   4473  26de							; 
   4474  26de
   4475  26de				   .
   4476  26de							; 
   4477  26de
   4478  26de				   .
   4479  26de							; 
   4480  26de
   4481  26de				   .
   4482  26de							; 
   4483  26de
   4484  26de				   .
   4485  26de							; 
   4486  26de
   4487  26de				   .
   4488  26de							; 
   4489  26de
   4490  26de				   .
   4491  26de							; 
   4492  26de
   4493  26de				   .L0140		;  if _Bit4_Flip_P1{4} then REFP0  =  8
   4494  26de
   4495  26de		       a5 e9		      LDA	_Bit4_Flip_P1
   4496  26e0		       29 10		      AND	#16
   4497  26e2		       f0 04		      BEQ	.skipL0140
   4498  26e4				   .condpart76
   4499  26e4		       a9 08		      LDA	#8
   4500  26e6		       85 0b		      STA	REFP0
   4501  26e8				   .skipL0140
   4502  26e8				   .
   4503  26e8							; 
   4504  26e8
   4505  26e8				   .
   4506  26e8							; 
   4507  26e8
   4508  26e8				   .
   4509  26e8							; 
   4510  26e8
   4511  26e8				   .
   4512  26e8							; 
   4513  26e8
   4514  26e8				   .
   4515  26e8							; 
   4516  26e8
   4517  26e8				   .
   4518  26e8							; 
   4519  26e8
   4520  26e8				   .
   4521  26e8							; 
   4522  26e8
   4523  26e8				   .
   4524  26e8							; 
   4525  26e8
   4526  26e8				   .
   4527  26e8							; 
   4528  26e8
   4529  26e8				   .
   4530  26e8							; 
   4531  26e8
   4532  26e8				   .L0141		;  if !_Ch0_Sound then goto __Skip_Ch_0
   4533  26e8
   4534  26e8		       a5 db		      LDA	_Ch0_Sound
   4535  26ea		       d0 03		      BNE	.skipL0141
   4536  26ec				   .condpart77
   4537  26ec		       4c d0 37 	      jmp	.__Skip_Ch_0
   4538  26ef
   4539  26ef				   .skipL0141
   4540  26ef				   .
   4541  26ef							; 
   4542  26ef
   4543  26ef				   .
   4544  26ef							; 
   4545  26ef
   4546  26ef				   .
   4547  26ef							; 
   4548  26ef
   4549  26ef				   .
   4550  26ef							; 
   4551  26ef
   4552  26ef				   .L0142		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   4553  26ef
   4554  26ef		       c6 dc		      DEC	_Ch0_Duration
   4555  26f1				   .
   4556  26f1							; 
   4557  26f1
   4558  26f1				   .
   4559  26f1							; 
   4560  26f1
   4561  26f1				   .
   4562  26f1							; 
   4563  26f1
   4564  26f1				   .
   4565  26f1							; 
   4566  26f1
   4567  26f1				   .
   4568  26f1							; 
   4569  26f1
   4570  26f1				   .L0143		;  if _Ch0_Duration then goto __Skip_Ch_0
   4571  26f1
   4572  26f1		       a5 dc		      LDA	_Ch0_Duration
   4573  26f3		       f0 03		      BEQ	.skipL0143
   4574  26f5				   .condpart78
   4575  26f5		       4c d0 37 	      jmp	.__Skip_Ch_0
   4576  26f8
   4577  26f8				   .skipL0143
   4578  26f8				   .
   4579  26f8							; 
   4580  26f8
   4581  26f8				   .
   4582  26f8							; 
   4583  26f8
   4584  26f8				   .
   4585  26f8							; 
   4586  26f8
   4587  26f8				   .
   4588  26f8							; 
   4589  26f8
   4590  26f8				   .
   4591  26f8							; 
   4592  26f8
   4593  26f8				   .
   4594  26f8							; 
   4595  26f8
   4596  26f8				   .
   4597  26f8							; 
   4598  26f8
   4599  26f8				   .
   4600  26f8							; 
   4601  26f8
   4602  26f8				   .
   4603  26f8							; 
   4604  26f8
   4605  26f8				   .
   4606  26f8							; 
   4607  26f8
   4608  26f8				   .
   4609  26f8							; 
   4610  26f8
   4611  26f8				   .
   4612  26f8							; 
   4613  26f8
   4614  26f8				   .L0144		;  if _Ch0_Sound  <>  _c_Jump_Sound then goto __Skip_Ch0_Sound_001
   4615  26f8
   4616  26f8		       a5 db		      LDA	_Ch0_Sound
   4617  26fa		       c9 01		      CMP	#_c_Jump_Sound
   4618  26fc		       f0 03		      BEQ	.skipL0144
   4619  26fe				   .condpart79
   4620  26fe		       4c 3d 37 	      jmp	.__Skip_Ch0_Sound_001
   4621  2701
   4622  2701				   .skipL0144
   4623  2701				   .
   4624  2701							; 
   4625  2701
   4626  2701				   .
   4627  2701							; 
   4628  2701
   4629  2701				   .
   4630  2701							; 
   4631  2701
   4632  2701				   .
   4633  2701							; 
   4634  2701
   4635  2701				   .L0145		;  temp4  =  _SD_Jump[_Ch0_Counter]
   4636  2701
   4637  2701		       a6 dd		      LDX	_Ch0_Counter
   4638  2703		       bd 23 38 	      LDA	_SD_Jump,x
   4639  2706		       85 ce		      STA	temp4
   4640  2708				   .
   4641  2708							; 
   4642  2708
   4643  2708				   .
   4644  2708							; 
   4645  2708
   4646  2708				   .
   4647  2708							; 
   4648  2708
   4649  2708				   .
   4650  2708							; 
   4651  2708
   4652  2708				   .L0146		;  if temp4  =  255 then goto __Clear_Ch_0
   4653  2708
   4654  2708		       a5 ce		      LDA	temp4
   4655  270a		       c9 ff		      CMP	#255
   4656  270c		       d0 03		      BNE	.skipL0146
   4657  270e				   .condpart80
   4658  270e		       4c ca 37 	      jmp	.__Clear_Ch_0
   4659  2711
   4660  2711				   .skipL0146
   4661  2711				   .
   4662  2711							; 
   4663  2711
   4664  2711				   .
   4665  2711							; 
   4666  2711
   4667  2711				   .
   4668  2711							; 
   4669  2711
   4670  2711				   .
   4671  2711							; 
   4672  2711
   4673  2711				   .L0147		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4674  2711
   4675  2711		       e6 dd		      INC	_Ch0_Counter
   4676  2713				   .L0148		;  temp5  =  _SD_Jump[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   4677  2713
   4678  2713		       a6 dd		      LDX	_Ch0_Counter
   4679  2715		       bd 23 38 	      LDA	_SD_Jump,x
   4680  2718		       85 cf		      STA	temp5
   4681  271a		       e6 dd		      INC	_Ch0_Counter
   4682  271c				   .L0149		;  temp6  =  _SD_Jump[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   4683  271c
   4684  271c		       a6 dd		      LDX	_Ch0_Counter
   4685  271e		       bd 23 38 	      LDA	_SD_Jump,x
   4686  2721		       85 d0		      STA	temp6
   4687  2723		       e6 dd		      INC	_Ch0_Counter
   4688  2725				   .
   4689  2725							; 
   4690  2725
   4691  2725				   .
   4692  2725							; 
   4693  2725
   4694  2725				   .
   4695  2725							; 
   4696  2725
   4697  2725				   .
   4698  2725							; 
   4699  2725
   4700  2725				   .L0150		;  AUDV0  =  temp4
   4701  2725
   4702  2725		       a5 ce		      LDA	temp4
   4703  2727		       85 19		      STA	AUDV0
   4704  2729				   .L0151		;  AUDC0  =  temp5
   4705  2729
   4706  2729		       a5 cf		      LDA	temp5
   4707  272b		       85 15		      STA	AUDC0
   4708  272d				   .L0152		;  AUDF0  =  temp6
   4709  272d
   4710  272d		       a5 d0		      LDA	temp6
   4711  272f		       85 17		      STA	AUDF0
   4712  2731				   .
   4713  2731							; 
   4714  2731
   4715  2731				   .
   4716  2731							; 
   4717  2731
   4718  2731				   .
   4719  2731							; 
   4720  2731
   4721  2731				   .
   4722  2731							; 
   4723  2731
   4724  2731				   .L0153		;  _Ch0_Duration  =  _SD_Jump[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   4725  2731
   4726  2731		       a6 dd		      LDX	_Ch0_Counter
   4727  2733		       bd 23 38 	      LDA	_SD_Jump,x
   4728  2736		       85 dc		      STA	_Ch0_Duration
   4729  2738		       e6 dd		      INC	_Ch0_Counter
   4730  273a				   .
   4731  273a							; 
   4732  273a
   4733  273a				   .
   4734  273a							; 
   4735  273a
   4736  273a				   .
   4737  273a							; 
   4738  273a
   4739  273a				   .
   4740  273a							; 
   4741  273a
   4742  273a				   .L0154		;  goto __Skip_Ch_0
   4743  273a
   4744  273a		       4c d0 37 	      jmp	.__Skip_Ch_0
   4745  273d
   4746  273d				   .
   4747  273d							; 
   4748  273d
   4749  273d				   .__Skip_Ch0_Sound_001
   4750  273d							; __Skip_Ch0_Sound_001
   4751  273d
   4752  273d				   .
   4753  273d							; 
   4754  273d
   4755  273d				   .
   4756  273d							; 
   4757  273d
   4758  273d				   .
   4759  273d							; 
   4760  273d
   4761  273d				   .
   4762  273d							; 
   4763  273d
   4764  273d				   .
   4765  273d							; 
   4766  273d
   4767  273d				   .
   4768  273d							; 
   4769  273d
   4770  273d				   .
   4771  273d							; 
   4772  273d
   4773  273d				   .
   4774  273d							; 
   4775  273d
   4776  273d				   .
   4777  273d							; 
   4778  273d
   4779  273d				   .
   4780  273d							; 
   4781  273d
   4782  273d				   .
   4783  273d							; 
   4784  273d
   4785  273d				   .
   4786  273d							; 
   4787  273d
   4788  273d				   .L0155		;  if _Ch0_Sound  <>  _c_Fall_Sound then goto __Skip_Ch0_Sound_002
   4789  273d
   4790  273d		       a5 db		      LDA	_Ch0_Sound
   4791  273f		       c9 02		      CMP	#_c_Fall_Sound
   4792  2741		       f0 03		      BEQ	.skipL0155
   4793  2743				   .condpart81
   4794  2743		       4c 82 37 	      jmp	.__Skip_Ch0_Sound_002
   4795  2746
   4796  2746				   .skipL0155
   4797  2746				   .
   4798  2746							; 
   4799  2746
   4800  2746				   .
   4801  2746							; 
   4802  2746
   4803  2746				   .
   4804  2746							; 
   4805  2746
   4806  2746				   .
   4807  2746							; 
   4808  2746
   4809  2746				   .L0156		;  temp4  =  _SD_Fall[_Ch0_Counter]
   4810  2746
   4811  2746		       a6 dd		      LDX	_Ch0_Counter
   4812  2748		       bd 77 38 	      LDA	_SD_Fall,x
   4813  274b		       85 ce		      STA	temp4
   4814  274d				   .
   4815  274d							; 
   4816  274d
   4817  274d				   .
   4818  274d							; 
   4819  274d
   4820  274d				   .
   4821  274d							; 
   4822  274d
   4823  274d				   .
   4824  274d							; 
   4825  274d
   4826  274d				   .L0157		;  if temp4  =  255 then goto __Clear_Ch_0
   4827  274d
   4828  274d		       a5 ce		      LDA	temp4
   4829  274f		       c9 ff		      CMP	#255
   4830  2751		       d0 03		      BNE	.skipL0157
   4831  2753				   .condpart82
   4832  2753		       4c ca 37 	      jmp	.__Clear_Ch_0
   4833  2756
   4834  2756				   .skipL0157
   4835  2756				   .
   4836  2756							; 
   4837  2756
   4838  2756				   .
   4839  2756							; 
   4840  2756
   4841  2756				   .
   4842  2756							; 
   4843  2756
   4844  2756				   .
   4845  2756							; 
   4846  2756
   4847  2756				   .L0158		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4848  2756
   4849  2756		       e6 dd		      INC	_Ch0_Counter
   4850  2758				   .L0159		;  temp5  =  _SD_Fall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   4851  2758
   4852  2758		       a6 dd		      LDX	_Ch0_Counter
   4853  275a		       bd 77 38 	      LDA	_SD_Fall,x
   4854  275d		       85 cf		      STA	temp5
   4855  275f		       e6 dd		      INC	_Ch0_Counter
   4856  2761				   .L0160		;  temp6  =  _SD_Fall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   4857  2761
   4858  2761		       a6 dd		      LDX	_Ch0_Counter
   4859  2763		       bd 77 38 	      LDA	_SD_Fall,x
   4860  2766		       85 d0		      STA	temp6
   4861  2768		       e6 dd		      INC	_Ch0_Counter
   4862  276a				   .
   4863  276a							; 
   4864  276a
   4865  276a				   .
   4866  276a							; 
   4867  276a
   4868  276a				   .
   4869  276a							; 
   4870  276a
   4871  276a				   .
   4872  276a							; 
   4873  276a
   4874  276a				   .L0161		;  AUDV0  =  temp4
   4875  276a
   4876  276a		       a5 ce		      LDA	temp4
   4877  276c		       85 19		      STA	AUDV0
   4878  276e				   .L0162		;  AUDC0  =  temp5
   4879  276e
   4880  276e		       a5 cf		      LDA	temp5
   4881  2770		       85 15		      STA	AUDC0
   4882  2772				   .L0163		;  AUDF0  =  temp6
   4883  2772
   4884  2772		       a5 d0		      LDA	temp6
   4885  2774		       85 17		      STA	AUDF0
   4886  2776				   .
   4887  2776							; 
   4888  2776
   4889  2776				   .
   4890  2776							; 
   4891  2776
   4892  2776				   .
   4893  2776							; 
   4894  2776
   4895  2776				   .
   4896  2776							; 
   4897  2776
   4898  2776				   .L0164		;  _Ch0_Duration  =  _SD_Fall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   4899  2776
   4900  2776		       a6 dd		      LDX	_Ch0_Counter
   4901  2778		       bd 77 38 	      LDA	_SD_Fall,x
   4902  277b		       85 dc		      STA	_Ch0_Duration
   4903  277d		       e6 dd		      INC	_Ch0_Counter
   4904  277f				   .
   4905  277f							; 
   4906  277f
   4907  277f				   .
   4908  277f							; 
   4909  277f
   4910  277f				   .
   4911  277f							; 
   4912  277f
   4913  277f				   .
   4914  277f							; 
   4915  277f
   4916  277f				   .L0165		;  goto __Skip_Ch_0
   4917  277f
   4918  277f		       4c d0 37 	      jmp	.__Skip_Ch_0
   4919  2782
   4920  2782				   .
   4921  2782							; 
   4922  2782
   4923  2782				   .__Skip_Ch0_Sound_002
   4924  2782							; __Skip_Ch0_Sound_002
   4925  2782
   4926  2782				   .
   4927  2782							; 
   4928  2782
   4929  2782				   .
   4930  2782							; 
   4931  2782
   4932  2782				   .
   4933  2782							; 
   4934  2782
   4935  2782				   .
   4936  2782							; 
   4937  2782
   4938  2782				   .
   4939  2782							; 
   4940  2782
   4941  2782				   .
   4942  2782							; 
   4943  2782
   4944  2782				   .
   4945  2782							; 
   4946  2782
   4947  2782				   .
   4948  2782							; 
   4949  2782
   4950  2782				   .
   4951  2782							; 
   4952  2782
   4953  2782				   .
   4954  2782							; 
   4955  2782
   4956  2782				   .
   4957  2782							; 
   4958  2782
   4959  2782				   .
   4960  2782							; 
   4961  2782
   4962  2782				   .L0166		;  if _Ch0_Sound  <>  _c_Slide_Sound then goto __Skip_Ch0_Sound_003
   4963  2782
   4964  2782		       a5 db		      LDA	_Ch0_Sound
   4965  2784		       c9 03		      CMP	#_c_Slide_Sound
   4966  2786		       f0 03		      BEQ	.skipL0166
   4967  2788				   .condpart83
   4968  2788		       4c c7 37 	      jmp	.__Skip_Ch0_Sound_003
   4969  278b
   4970  278b				   .skipL0166
   4971  278b				   .
   4972  278b							; 
   4973  278b
   4974  278b				   .
   4975  278b							; 
   4976  278b
   4977  278b				   .
   4978  278b							; 
   4979  278b
   4980  278b				   .
   4981  278b							; 
   4982  278b
   4983  278b				   .L0167		;  temp4  =  _SD_Slide[_Ch0_Counter]
   4984  278b
   4985  278b		       a6 dd		      LDX	_Ch0_Counter
   4986  278d		       bd fb 38 	      LDA	_SD_Slide,x
   4987  2790		       85 ce		      STA	temp4
   4988  2792				   .
   4989  2792							; 
   4990  2792
   4991  2792				   .
   4992  2792							; 
   4993  2792
   4994  2792				   .
   4995  2792							; 
   4996  2792
   4997  2792				   .
   4998  2792							; 
   4999  2792
   5000  2792				   .L0168		;  if temp4  =  255 then goto __Clear_Ch_0
   5001  2792
   5002  2792		       a5 ce		      LDA	temp4
   5003  2794		       c9 ff		      CMP	#255
   5004  2796		       d0 03		      BNE	.skipL0168
   5005  2798				   .condpart84
   5006  2798		       4c ca 37 	      jmp	.__Clear_Ch_0
   5007  279b
   5008  279b				   .skipL0168
   5009  279b				   .
   5010  279b							; 
   5011  279b
   5012  279b				   .
   5013  279b							; 
   5014  279b
   5015  279b				   .
   5016  279b							; 
   5017  279b
   5018  279b				   .
   5019  279b							; 
   5020  279b
   5021  279b				   .L0169		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   5022  279b
   5023  279b		       e6 dd		      INC	_Ch0_Counter
   5024  279d				   .L0170		;  temp5  =  _SD_Slide[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   5025  279d
   5026  279d		       a6 dd		      LDX	_Ch0_Counter
   5027  279f		       bd fb 38 	      LDA	_SD_Slide,x
   5028  27a2		       85 cf		      STA	temp5
   5029  27a4		       e6 dd		      INC	_Ch0_Counter
   5030  27a6				   .L0171		;  temp6  =  _SD_Slide[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   5031  27a6
   5032  27a6		       a6 dd		      LDX	_Ch0_Counter
   5033  27a8		       bd fb 38 	      LDA	_SD_Slide,x
   5034  27ab		       85 d0		      STA	temp6
   5035  27ad		       e6 dd		      INC	_Ch0_Counter
   5036  27af				   .
   5037  27af							; 
   5038  27af
   5039  27af				   .
   5040  27af							; 
   5041  27af
   5042  27af				   .
   5043  27af							; 
   5044  27af
   5045  27af				   .
   5046  27af							; 
   5047  27af
   5048  27af				   .L0172		;  AUDV0  =  temp4
   5049  27af
   5050  27af		       a5 ce		      LDA	temp4
   5051  27b1		       85 19		      STA	AUDV0
   5052  27b3				   .L0173		;  AUDC0  =  temp5
   5053  27b3
   5054  27b3		       a5 cf		      LDA	temp5
   5055  27b5		       85 15		      STA	AUDC0
   5056  27b7				   .L0174		;  AUDF0  =  temp6
   5057  27b7
   5058  27b7		       a5 d0		      LDA	temp6
   5059  27b9		       85 17		      STA	AUDF0
   5060  27bb				   .
   5061  27bb							; 
   5062  27bb
   5063  27bb				   .
   5064  27bb							; 
   5065  27bb
   5066  27bb				   .
   5067  27bb							; 
   5068  27bb
   5069  27bb				   .
   5070  27bb							; 
   5071  27bb
   5072  27bb				   .L0175		;  _Ch0_Duration  =  _SD_Slide[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   5073  27bb
   5074  27bb		       a6 dd		      LDX	_Ch0_Counter
   5075  27bd		       bd fb 38 	      LDA	_SD_Slide,x
   5076  27c0		       85 dc		      STA	_Ch0_Duration
   5077  27c2		       e6 dd		      INC	_Ch0_Counter
   5078  27c4				   .
   5079  27c4							; 
   5080  27c4
   5081  27c4				   .
   5082  27c4							; 
   5083  27c4
   5084  27c4				   .
   5085  27c4							; 
   5086  27c4
   5087  27c4				   .
   5088  27c4							; 
   5089  27c4
   5090  27c4				   .L0176		;  goto __Skip_Ch_0
   5091  27c4
   5092  27c4		       4c d0 37 	      jmp	.__Skip_Ch_0
   5093  27c7
   5094  27c7				   .
   5095  27c7							; 
   5096  27c7
   5097  27c7				   .__Skip_Ch0_Sound_003
   5098  27c7							; __Skip_Ch0_Sound_003
   5099  27c7
   5100  27c7				   .
   5101  27c7							; 
   5102  27c7
   5103  27c7				   .
   5104  27c7							; 
   5105  27c7
   5106  27c7				   .
   5107  27c7							; 
   5108  27c7
   5109  27c7				   .
   5110  27c7							; 
   5111  27c7
   5112  27c7				   .
   5113  27c7							; 
   5114  27c7
   5115  27c7				   .
   5116  27c7							; 
   5117  27c7
   5118  27c7				   .
   5119  27c7							; 
   5120  27c7
   5121  27c7				   .
   5122  27c7							; 
   5123  27c7
   5124  27c7				   .
   5125  27c7							; 
   5126  27c7
   5127  27c7				   .
   5128  27c7							; 
   5129  27c7
   5130  27c7				   .
   5131  27c7							; 
   5132  27c7
   5133  27c7				   .
   5134  27c7							; 
   5135  27c7
   5136  27c7				   .
   5137  27c7							; 
   5138  27c7
   5139  27c7				   .
   5140  27c7							; 
   5141  27c7
   5142  27c7				   .
   5143  27c7							; 
   5144  27c7
   5145  27c7				   .
   5146  27c7							; 
   5147  27c7
   5148  27c7				   .
   5149  27c7							; 
   5150  27c7
   5151  27c7				   .L0177		;  goto __Skip_Ch_0
   5152  27c7
   5153  27c7		       4c d0 37 	      jmp	.__Skip_Ch_0
   5154  27ca
   5155  27ca				   .
   5156  27ca							; 
   5157  27ca
   5158  27ca				   .
   5159  27ca							; 
   5160  27ca
   5161  27ca				   .
   5162  27ca							; 
   5163  27ca
   5164  27ca				   .
   5165  27ca							; 
   5166  27ca
   5167  27ca				   .
   5168  27ca							; 
   5169  27ca
   5170  27ca				   .
   5171  27ca							; 
   5172  27ca
   5173  27ca				   .
   5174  27ca							; 
   5175  27ca
   5176  27ca				   .__Clear_Ch_0
   5177  27ca							; __Clear_Ch_0
   5178  27ca
   5179  27ca				   .
   5180  27ca							; 
   5181  27ca
   5182  27ca				   .L0178		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   5183  27ca
   5184  27ca		       a9 00		      LDA	#0
   5185  27cc		       85 db		      STA	_Ch0_Sound
   5186  27ce		       85 19		      STA	AUDV0
   5187  27d0				   .
   5188  27d0							; 
   5189  27d0
   5190  27d0				   .
   5191  27d0							; 
   5192  27d0
   5193  27d0				   .
   5194  27d0							; 
   5195  27d0
   5196  27d0				   .
   5197  27d0							; 
   5198  27d0
   5199  27d0				   .
   5200  27d0							; 
   5201  27d0
   5202  27d0				   .
   5203  27d0							; 
   5204  27d0
   5205  27d0				   .
   5206  27d0							; 
   5207  27d0
   5208  27d0				   .__Skip_Ch_0
   5209  27d0							; __Skip_Ch_0
   5210  27d0
   5211  27d0				   .
   5212  27d0							; 
   5213  27d0
   5214  27d0				   .
   5215  27d0							; 
   5216  27d0
   5217  27d0				   .
   5218  27d0							; 
   5219  27d0
   5220  27d0				   .
   5221  27d0							; 
   5222  27d0
   5223  27d0				   .
   5224  27d0							; 
   5225  27d0
   5226  27d0				   .
   5227  27d0							; 
   5228  27d0
   5229  27d0				   .
   5230  27d0							; 
   5231  27d0
   5232  27d0				   .L0179		;  DF6FRACINC	=  0
   5233  27d0
   5234  27d0		       a9 00		      LDA	#0
   5235  27d2		       8d 3e 10 	      STA	DF6FRACINC
   5236  27d5				   .L0180		;  DF4FRACINC	=  255
   5237  27d5
   5238  27d5		       a9 ff		      LDA	#255
   5239  27d7		       8d 3c 10 	      STA	DF4FRACINC
   5240  27da				   .
   5241  27da							; 
   5242  27da
   5243  27da				   .L0181		;  DF0FRACINC	=  32
   5244  27da
   5245  27da		       a9 20		      LDA	#32
   5246  27dc		       8d 38 10 	      STA	DF0FRACINC
   5247  27df				   .L0182		;  DF1FRACINC	=  32
   5248  27df
   5249  27df		       a9 20		      LDA	#32
   5250  27e1		       8d 39 10 	      STA	DF1FRACINC
   5251  27e4				   .L0183		;  DF2FRACINC	=  32
   5252  27e4
   5253  27e4		       a9 20		      LDA	#32
   5254  27e6		       8d 3a 10 	      STA	DF2FRACINC
   5255  27e9				   .L0184		;  DF3FRACINC	=  32
   5256  27e9
   5257  27e9		       a9 20		      LDA	#32
   5258  27eb		       8d 3b 10 	      STA	DF3FRACINC
   5259  27ee				   .
   5260  27ee							; 
   5261  27ee
   5262  27ee				   .
   5263  27ee							; 
   5264  27ee
   5265  27ee				   .
   5266  27ee							; 
   5267  27ee
   5268  27ee				   .
   5269  27ee							; 
   5270  27ee
   5271  27ee				   .
   5272  27ee							; 
   5273  27ee
   5274  27ee				   .
   5275  27ee							; 
   5276  27ee
   5277  27ee				   .
   5278  27ee							; 
   5279  27ee
   5280  27ee				   .L0185		;  drawscreen
   5281  27ee
   5282  27ee		       85 81		      sta	temp7
   5283  27f0		       a9 38		      lda	#>(ret_point2-1)
   5284  27f2		       48		      pha
   5285  27f3		       a9 05		      lda	#<(ret_point2-1)
   5286  27f5		       48		      pha
   5287  27f6		       a9 19		      lda	#>(drawscreen-1)
   5288  27f8		       48		      pha
   5289  27f9		       a9 48		      lda	#<(drawscreen-1)
   5290  27fb		       48		      pha
   5291  27fc		       a5 81		      lda	temp7
   5292  27fe		       48		      pha
   5293  27ff		       8a		      txa
   5294  2800		       48		      pha
   5295  2801		       a2 01		      ldx	#1
   5296  2803		       4c ee df 	      jmp	BS_jsr
   5297  2806				   ret_point2
   5298  2806				   .
   5299  2806							; 
   5300  2806
   5301  2806				   .
   5302  2806							; 
   5303  2806
   5304  2806				   .
   5305  2806							; 
   5306  2806
   5307  2806				   .
   5308  2806							; 
   5309  2806
   5310  2806				   .
   5311  2806							; 
   5312  2806
   5313  2806				   .
   5314  2806							; 
   5315  2806
   5316  2806				   .
   5317  2806							; 
   5318  2806
   5319  2806				   .
   5320  2806							; 
   5321  2806
   5322  2806				   .
   5323  2806							; 
   5324  2806
   5325  2806				   .
   5326  2806							; 
   5327  2806
   5328  2806				   .
   5329  2806							; 
   5330  2806
   5331  2806				   .
   5332  2806							; 
   5333  2806
   5334  2806				   .
   5335  2806							; 
   5336  2806
   5337  2806				   .
   5338  2806							; 
   5339  2806
   5340  2806				   .
   5341  2806							; 
   5342  2806
   5343  2806				   .L0186		;  if !switchreset then _Bit7_Reset_Restrainer{7}  =  0  :  goto __Main_Loop
   5344  2806
   5345  2806		       a9 01		      lda	#1
   5346  2808		       2c 82 02 	      bit	SWCHB
   5347  280b		       f0 09		      BEQ	.skipL0186
   5348  280d				   .condpart85
   5349  280d		       a5 e9		      LDA	_Bit7_Reset_Restrainer
   5350  280f		       29 7f		      AND	#127
   5351  2811		       85 e9		      STA	_Bit7_Reset_Restrainer
   5352  2813		       4c 70 31 	      jmp	.__Main_Loop
   5353  2816
   5354  2816				   .skipL0186
   5355  2816				   .
   5356  2816							; 
   5357  2816
   5358  2816				   .
   5359  2816							; 
   5360  2816
   5361  2816				   .
   5362  2816							; 
   5363  2816
   5364  2816				   .
   5365  2816							; 
   5366  2816
   5367  2816				   .
   5368  2816							; 
   5369  2816
   5370  2816				   .L0187		;  if _Bit7_Reset_Restrainer{7} then goto __Main_Loop
   5371  2816
   5372  2816		       24 e9		      BIT	_Bit7_Reset_Restrainer
   5373  2818		       10 03		      BPL	.skipL0187
   5374  281a				   .condpart86
   5375  281a		       4c 70 31 	      jmp	.__Main_Loop
   5376  281d
   5377  281d				   .skipL0187
   5378  281d				   .
   5379  281d							; 
   5380  281d
   5381  281d				   .
   5382  281d							; 
   5383  281d
   5384  281d				   .
   5385  281d							; 
   5386  281d
   5387  281d				   .
   5388  281d							; 
   5389  281d
   5390  281d				   .L0188		;  goto __Start_Restart
   5391  281d
   5392  281d		       4c a4 30 	      jmp	.__Start_Restart
   5393  2820
   5394  2820				   .
   5395  2820							; 
   5396  2820
   5397  2820				   .
   5398  2820							; 
   5399  2820
   5400  2820				   .
   5401  2820							; 
   5402  2820
   5403  2820				   .
   5404  2820							; 
   5405  2820
   5406  2820				   .
   5407  2820							; 
   5408  2820
   5409  2820				   .
   5410  2820							; 
   5411  2820
   5412  2820				   .
   5413  2820							; 
   5414  2820
   5415  2820				   .
   5416  2820							; 
   5417  2820
   5418  2820				   .
   5419  2820							; 
   5420  2820
   5421  2820				   .
   5422  2820							; 
   5423  2820
   5424  2820				   .
   5425  2820							; 
   5426  2820
   5427  2820				   .
   5428  2820							; 
   5429  2820
   5430  2820				   .
   5431  2820							; 
   5432  2820
   5433  2820				   .
   5434  2820							; 
   5435  2820
   5436  2820				   .
   5437  2820							; 
   5438  2820
   5439  2820				   .L0189		;  data _SD_Jump
   5440  2820
   5441  2820		       4c 74 38 	      JMP	.skipL0189
   5442  2823				   _SD_Jump
   5443  2823		       01 0c 1f 	      .byte.b	1,12,31
   5444  2826
   5445  2826		       01		      .byte.b	1
   5446  2827
   5447  2827		       08 0c 1f 	      .byte.b	8,12,31
   5448  282a
   5449  282a		       01		      .byte.b	1
   5450  282b
   5451  282b		       06 0c 1f 	      .byte.b	6,12,31
   5452  282e
   5453  282e		       01		      .byte.b	1
   5454  282f
   5455  282f		       08 0c 1f 	      .byte.b	8,12,31
   5456  2832
   5457  2832		       01		      .byte.b	1
   5458  2833
   5459  2833		       08 0c 1e 	      .byte.b	8,12,30
   5460  2836
   5461  2836		       01		      .byte.b	1
   5462  2837
   5463  2837		       08 0c 1d 	      .byte.b	8,12,29
   5464  283a
   5465  283a		       01		      .byte.b	1
   5466  283b
   5467  283b		       08 0c 1c 	      .byte.b	8,12,28
   5468  283e
   5469  283e		       01		      .byte.b	1
   5470  283f
   5471  283f		       08 0c 1b 	      .byte.b	8,12,27
   5472  2842
   5473  2842		       01		      .byte.b	1
   5474  2843
   5475  2843		       08 0c 1a 	      .byte.b	8,12,26
   5476  2846
   5477  2846		       01		      .byte.b	1
   5478  2847
   5479  2847		       08 0c 19 	      .byte.b	8,12,25
   5480  284a
   5481  284a		       01		      .byte.b	1
   5482  284b
   5483  284b		       08 0c 18 	      .byte.b	8,12,24
   5484  284e
   5485  284e		       01		      .byte.b	1
   5486  284f
   5487  284f		       08 0c 17 	      .byte.b	8,12,23
   5488  2852
   5489  2852		       01		      .byte.b	1
   5490  2853
   5491  2853		       08 0c 16 	      .byte.b	8,12,22
   5492  2856
   5493  2856		       01		      .byte.b	1
   5494  2857
   5495  2857		       08 0c 15 	      .byte.b	8,12,21
   5496  285a
   5497  285a		       01		      .byte.b	1
   5498  285b
   5499  285b		       08 0c 14 	      .byte.b	8,12,20
   5500  285e
   5501  285e		       01		      .byte.b	1
   5502  285f
   5503  285f		       08 0c 13 	      .byte.b	8,12,19
   5504  2862
   5505  2862		       01		      .byte.b	1
   5506  2863
   5507  2863		       06 0c 12 	      .byte.b	6,12,18
   5508  2866
   5509  2866		       01		      .byte.b	1
   5510  2867
   5511  2867		       04 0c 11 	      .byte.b	4,12,17
   5512  286a
   5513  286a		       01		      .byte.b	1
   5514  286b
   5515  286b		       02 0c 10 	      .byte.b	2,12,16
   5516  286e
   5517  286e		       02		      .byte.b	2
   5518  286f
   5519  286f		       00 00 00 	      .byte.b	0,0,0
   5520  2872
   5521  2872		       08		      .byte.b	8
   5522  2873
   5523  2873		       ff		      .byte.b	255
   5524  2874
   5525  2874				   .skipL0189
   5526  2874				   .
   5527  2874							; 
   5528  2874
   5529  2874				   .
   5530  2874							; 
   5531  2874
   5532  2874				   .
   5533  2874							; 
   5534  2874
   5535  2874				   .
   5536  2874							; 
   5537  2874
   5538  2874				   .
   5539  2874							; 
   5540  2874
   5541  2874				   .
   5542  2874							; 
   5543  2874
   5544  2874				   .
   5545  2874							; 
   5546  2874
   5547  2874				   .
   5548  2874							; 
   5549  2874
   5550  2874				   .L0190		;  data _SD_Fall
   5551  2874
   5552  2874		       4c f8 38 	      JMP	.skipL0190
   5553  2877				   _SD_Fall
   5554  2877		       06 0c 10 	      .byte.b	6,12,16
   5555  287a
   5556  287a		       01		      .byte.b	1
   5557  287b
   5558  287b		       08 0c 10 	      .byte.b	8,12,16
   5559  287e
   5560  287e		       01		      .byte.b	1
   5561  287f
   5562  287f		       06 0c 11 	      .byte.b	6,12,17
   5563  2882
   5564  2882		       01		      .byte.b	1
   5565  2883
   5566  2883		       08 0c 11 	      .byte.b	8,12,17
   5567  2886
   5568  2886		       01		      .byte.b	1
   5569  2887
   5570  2887		       06 0c 12 	      .byte.b	6,12,18
   5571  288a
   5572  288a		       01		      .byte.b	1
   5573  288b
   5574  288b		       08 0c 12 	      .byte.b	8,12,18
   5575  288e
   5576  288e		       01		      .byte.b	1
   5577  288f
   5578  288f		       06 0c 13 	      .byte.b	6,12,19
   5579  2892
   5580  2892		       01		      .byte.b	1
   5581  2893
   5582  2893		       08 0c 13 	      .byte.b	8,12,19
   5583  2896
   5584  2896		       01		      .byte.b	1
   5585  2897
   5586  2897		       06 0c 14 	      .byte.b	6,12,20
   5587  289a
   5588  289a		       01		      .byte.b	1
   5589  289b
   5590  289b		       08 0c 14 	      .byte.b	8,12,20
   5591  289e
   5592  289e		       01		      .byte.b	1
   5593  289f
   5594  289f		       06 0c 15 	      .byte.b	6,12,21
   5595  28a2
   5596  28a2		       01		      .byte.b	1
   5597  28a3
   5598  28a3		       08 0c 15 	      .byte.b	8,12,21
   5599  28a6
   5600  28a6		       01		      .byte.b	1
   5601  28a7
   5602  28a7		       06 0c 16 	      .byte.b	6,12,22
   5603  28aa
   5604  28aa		       01		      .byte.b	1
   5605  28ab
   5606  28ab		       08 0c 16 	      .byte.b	8,12,22
   5607  28ae
   5608  28ae		       01		      .byte.b	1
   5609  28af
   5610  28af		       06 0c 17 	      .byte.b	6,12,23
   5611  28b2
   5612  28b2		       01		      .byte.b	1
   5613  28b3
   5614  28b3		       08 0c 17 	      .byte.b	8,12,23
   5615  28b6
   5616  28b6		       01		      .byte.b	1
   5617  28b7
   5618  28b7		       06 0c 18 	      .byte.b	6,12,24
   5619  28ba
   5620  28ba		       01		      .byte.b	1
   5621  28bb
   5622  28bb		       08 0c 18 	      .byte.b	8,12,24
   5623  28be
   5624  28be		       01		      .byte.b	1
   5625  28bf
   5626  28bf		       06 0c 19 	      .byte.b	6,12,25
   5627  28c2
   5628  28c2		       01		      .byte.b	1
   5629  28c3
   5630  28c3		       08 0c 19 	      .byte.b	8,12,25
   5631  28c6
   5632  28c6		       01		      .byte.b	1
   5633  28c7
   5634  28c7		       06 0c 1a 	      .byte.b	6,12,26
   5635  28ca
   5636  28ca		       01		      .byte.b	1
   5637  28cb
   5638  28cb		       08 0c 1a 	      .byte.b	8,12,26
   5639  28ce
   5640  28ce		       01		      .byte.b	1
   5641  28cf
   5642  28cf		       06 0c 1b 	      .byte.b	6,12,27
   5643  28d2
   5644  28d2		       01		      .byte.b	1
   5645  28d3
   5646  28d3		       08 0c 1b 	      .byte.b	8,12,27
   5647  28d6
   5648  28d6		       01		      .byte.b	1
   5649  28d7
   5650  28d7		       06 0c 1c 	      .byte.b	6,12,28
   5651  28da
   5652  28da		       01		      .byte.b	1
   5653  28db
   5654  28db		       08 0c 1c 	      .byte.b	8,12,28
   5655  28de
   5656  28de		       01		      .byte.b	1
   5657  28df
   5658  28df		       06 0c 1d 	      .byte.b	6,12,29
   5659  28e2
   5660  28e2		       01		      .byte.b	1
   5661  28e3
   5662  28e3		       08 0c 1d 	      .byte.b	8,12,29
   5663  28e6
   5664  28e6		       01		      .byte.b	1
   5665  28e7
   5666  28e7		       06 0c 1e 	      .byte.b	6,12,30
   5667  28ea
   5668  28ea		       01		      .byte.b	1
   5669  28eb
   5670  28eb		       08 0c 1e 	      .byte.b	8,12,30
   5671  28ee
   5672  28ee		       01		      .byte.b	1
   5673  28ef
   5674  28ef		       06 0c 1f 	      .byte.b	6,12,31
   5675  28f2
   5676  28f2		       01		      .byte.b	1
   5677  28f3
   5678  28f3		       02 0c 1f 	      .byte.b	2,12,31
   5679  28f6
   5680  28f6		       02		      .byte.b	2
   5681  28f7
   5682  28f7		       ff		      .byte.b	255
   5683  28f8
   5684  28f8				   .skipL0190
   5685  28f8				   .
   5686  28f8							; 
   5687  28f8
   5688  28f8				   .
   5689  28f8							; 
   5690  28f8
   5691  28f8				   .
   5692  28f8							; 
   5693  28f8
   5694  28f8				   .
   5695  28f8							; 
   5696  28f8
   5697  28f8				   .
   5698  28f8							; 
   5699  28f8
   5700  28f8				   .
   5701  28f8							; 
   5702  28f8
   5703  28f8				   .
   5704  28f8							; 
   5705  28f8
   5706  28f8				   .
   5707  28f8							; 
   5708  28f8
   5709  28f8				   .L0191		;  data _SD_Slide
   5710  28f8
   5711  28f8		       4c 50 39 	      JMP	.skipL0191
   5712  28fb				   _SD_Slide
   5713  28fb		       02 04 16 	      .byte.b	2,4,22
   5714  28fe
   5715  28fe		       01		      .byte.b	1
   5716  28ff
   5717  28ff		       01 04 15 	      .byte.b	1,4,21
   5718  2902
   5719  2902		       01		      .byte.b	1
   5720  2903
   5721  2903		       02 04 18 	      .byte.b	2,4,24
   5722  2906
   5723  2906		       01		      .byte.b	1
   5724  2907
   5725  2907		       01 04 14 	      .byte.b	1,4,20
   5726  290a
   5727  290a		       01		      .byte.b	1
   5728  290b
   5729  290b		       02 04 17 	      .byte.b	2,4,23
   5730  290e
   5731  290e		       01		      .byte.b	1
   5732  290f
   5733  290f		       01 04 19 	      .byte.b	1,4,25
   5734  2912
   5735  2912		       01		      .byte.b	1
   5736  2913
   5737  2913		       02 04 16 	      .byte.b	2,4,22
   5738  2916
   5739  2916		       01		      .byte.b	1
   5740  2917
   5741  2917		       01 04 14 	      .byte.b	1,4,20
   5742  291a
   5743  291a		       01		      .byte.b	1
   5744  291b
   5745  291b		       02 04 19 	      .byte.b	2,4,25
   5746  291e
   5747  291e		       01		      .byte.b	1
   5748  291f
   5749  291f		       01 04 15 	      .byte.b	1,4,21
   5750  2922
   5751  2922		       01		      .byte.b	1
   5752  2923
   5753  2923		       02 04 19 	      .byte.b	2,4,25
   5754  2926
   5755  2926		       01		      .byte.b	1
   5756  2927
   5757  2927		       01 04 16 	      .byte.b	1,4,22
   5758  292a
   5759  292a		       01		      .byte.b	1
   5760  292b
   5761  292b		       02 04 17 	      .byte.b	2,4,23
   5762  292e
   5763  292e		       01		      .byte.b	1
   5764  292f
   5765  292f		       01 04 16 	      .byte.b	1,4,22
   5766  2932
   5767  2932		       01		      .byte.b	1
   5768  2933
   5769  2933		       02 04 14 	      .byte.b	2,4,20
   5770  2936
   5771  2936		       01		      .byte.b	1
   5772  2937
   5773  2937		       01 04 18 	      .byte.b	1,4,24
   5774  293a
   5775  293a		       01		      .byte.b	1
   5776  293b
   5777  293b		       02 04 15 	      .byte.b	2,4,21
   5778  293e
   5779  293e		       01		      .byte.b	1
   5780  293f
   5781  293f		       01 04 17 	      .byte.b	1,4,23
   5782  2942
   5783  2942		       01		      .byte.b	1
   5784  2943
   5785  2943		       02 04 19 	      .byte.b	2,4,25
   5786  2946
   5787  2946		       01		      .byte.b	1
   5788  2947
   5789  2947		       01 04 18 	      .byte.b	1,4,24
   5790  294a
   5791  294a		       01		      .byte.b	1
   5792  294b
   5793  294b		       02 04 16 	      .byte.b	2,4,22
   5794  294e
   5795  294e		       01		      .byte.b	1
   5796  294f
   5797  294f		       ff		      .byte.b	255
   5798  2950
   5799  2950				   .skipL0191
   5800  2950				   .
   5801  2950							; 
   5802  2950
   5803  2950				   .
   5804  2950							; 
   5805  2950
   5806  2950				   .
   5807  2950							; 
   5808  2950
   5809  2950				   .
   5810  2950							; 
   5811  2950
   5812  2950				   .
   5813  2950							; 
   5814  2950
   5815  2950				   .
   5816  2950							; 
   5817  2950
   5818  2950				   .
   5819  2950							; 
   5820  2950
   5821  2950				   .
   5822  2950							; 
   5823  2950
   5824  2950				   .
   5825  2950							; 
   5826  2950
   5827  2950				   .
   5828  2950							; 
   5829  2950
   5830  2950				   .__Frame0
   5831  2950							; __Frame0
   5832  2950
   5833  2950				   .L0192		;  player0:
   5834  2950
   5835  2950		       a2 39		      LDX	#<playerL0192_0
   5836  2952		       86 bd		      STX	player0pointerlo
   5837  2954		       a9 63		      LDA	#((>playerL0192_0) & $0f) | (((>playerL0192_0) / 2) & $70)
   5838  2956		       85 be		      STA	player0pointerhi
   5839  2958		       a9 14		      LDA	#20
   5840  295a		       85 a5		      STA	player0height
   5841  295c				   .
   5842  295c							; 
   5843  295c
   5844  295c				   .L0193		;  goto __Done_Anim_jump
   5845  295c
   5846  295c		       4c a3 35 	      jmp	.__Done_Anim_jump
   5847  295f
   5848  295f				   .
   5849  295f							; 
   5850  295f
   5851  295f				   .
   5852  295f							; 
   5853  295f
   5854  295f				   .__Frame1
   5855  295f							; __Frame1
   5856  295f
   5857  295f				   .L0194		;  player0:
   5858  295f
   5859  295f		       a2 4d		      LDX	#<playerL0194_0
   5860  2961		       86 bd		      STX	player0pointerlo
   5861  2963		       a9 63		      LDA	#((>playerL0194_0) & $0f) | (((>playerL0194_0) / 2) & $70)
   5862  2965		       85 be		      STA	player0pointerhi
   5863  2967		       a9 14		      LDA	#20
   5864  2969		       85 a5		      STA	player0height
   5865  296b				   .
   5866  296b							; 
   5867  296b
   5868  296b				   .L0195		;  goto __Done_Anim_jump
   5869  296b
   5870  296b		       4c a3 35 	      jmp	.__Done_Anim_jump
   5871  296e
   5872  296e				   .
   5873  296e							; 
   5874  296e
   5875  296e				   .
   5876  296e							; 
   5877  296e
   5878  296e				   .__Frame2
   5879  296e							; __Frame2
   5880  296e
   5881  296e				   .L0196		;  player0:
   5882  296e
   5883  296e		       a2 61		      LDX	#<playerL0196_0
   5884  2970		       86 bd		      STX	player0pointerlo
   5885  2972		       a9 63		      LDA	#((>playerL0196_0) & $0f) | (((>playerL0196_0) / 2) & $70)
   5886  2974		       85 be		      STA	player0pointerhi
   5887  2976		       a9 14		      LDA	#20
   5888  2978		       85 a5		      STA	player0height
   5889  297a				   .
   5890  297a							; 
   5891  297a
   5892  297a				   .L0197		;  goto __Done_Anim_jump
   5893  297a
   5894  297a		       4c a3 35 	      jmp	.__Done_Anim_jump
   5895  297d
   5896  297d				   .
   5897  297d							; 
   5898  297d
   5899  297d				   .
   5900  297d							; 
   5901  297d
   5902  297d				   .
   5903  297d							; 
   5904  297d
   5905  297d				   .
   5906  297d							; 
   5907  297d
   5908  297d				   .
   5909  297d							; 
   5910  297d
   5911  297d				   .L0198		;  bank 3
   5912  297d
   5913  297d					      if	ECHO2
      1623 bytes of ROM space left in bank 2
   5914  297d					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   5915  297d					      endif
   5916  297d		       00 01	   ECHO2      =	1
   5917  2fd4					      ORG	$2FF4-bscode_length
   5918  2fd4					      RORG	$3FF4-bscode_length
   5919  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   5920  2fd6					      ifconst	FASTFETCH	; using DPC+
   5921  2fd6		       8e 58 10 	      stx	FASTFETCH
   5922  2fd9					      endif
   5923  2fd9		       9a		      txs
   5924  2fda				  -	      if	bankswitch == 64
   5925  2fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5926  2fda					      else
   5927  2fda		       a9 18		      lda	#>(start-1)
   5928  2fdc					      endif
   5929  2fdc		       48		      pha
   5930  2fdd		       a9 e3		      lda	#<(start-1)
   5931  2fdf		       48		      pha
   5932  2fe0		       48		      pha
   5933  2fe1		       8a		      txa
   5934  2fe2		       48		      pha
   5935  2fe3		       ba		      tsx
   5936  2fe4					      if	bankswitch != 64
   5937  2fe4		       b5 04		      lda	4,x	; get high byte of return address
   5938  2fe6		       2a		      rol
   5939  2fe7		       2a		      rol
   5940  2fe8		       2a		      rol
   5941  2fe9		       2a		      rol
   5942  2fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5943  2fec		       aa		      tax
   5944  2fed		       e8		      inx
   5945  2fee				  -	      else
   5946  2fee				  -	      lda	4,x	; get high byte of return address
   5947  2fee				  -	      tay
   5948  2fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5949  2fee				  -	      sta	4,x
   5950  2fee				  -	      tya
   5951  2fee				  -	      lsr
   5952  2fee				  -	      lsr
   5953  2fee				  -	      lsr
   5954  2fee				  -	      lsr
   5955  2fee				  -	      tax
   5956  2fee				  -	      inx
   5957  2fee					      endif
   5958  2fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5959  2ff1		       68		      pla
   5960  2ff2		       aa		      tax
   5961  2ff3		       68		      pla
   5962  2ff4		       60		      rts
   5963  2ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5964  2ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5965  2ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5966  2ff5					      endif
   5967  2ffc					      ORG	$2FFC
   5968  2ffc					      RORG	$3FFC
   5969  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   5970  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   5971  3000					      ORG	$3000
   5972  3000					      RORG	$5000
   5973  3000					      repeat	129
   5974  3000		       00		      .byte.b	0
   5973  3000					      repend
   5974  3001		       00		      .byte.b	0
   5973  3001					      repend
   5974  3002		       00		      .byte.b	0
   5973  3002					      repend
   5974  3003		       00		      .byte.b	0
   5973  3003					      repend
   5974  3004		       00		      .byte.b	0
   5973  3004					      repend
   5974  3005		       00		      .byte.b	0
   5973  3005					      repend
   5974  3006		       00		      .byte.b	0
   5973  3006					      repend
   5974  3007		       00		      .byte.b	0
   5973  3007					      repend
   5974  3008		       00		      .byte.b	0
   5973  3008					      repend
   5974  3009		       00		      .byte.b	0
   5973  3009					      repend
   5974  300a		       00		      .byte.b	0
   5973  300a					      repend
   5974  300b		       00		      .byte.b	0
   5973  300b					      repend
   5974  300c		       00		      .byte.b	0
   5973  300c					      repend
   5974  300d		       00		      .byte.b	0
   5973  300d					      repend
   5974  300e		       00		      .byte.b	0
   5973  300e					      repend
   5974  300f		       00		      .byte.b	0
   5973  300f					      repend
   5974  3010		       00		      .byte.b	0
   5973  3010					      repend
   5974  3011		       00		      .byte.b	0
   5973  3011					      repend
   5974  3012		       00		      .byte.b	0
   5973  3012					      repend
   5974  3013		       00		      .byte.b	0
   5973  3013					      repend
   5974  3014		       00		      .byte.b	0
   5973  3014					      repend
   5974  3015		       00		      .byte.b	0
   5973  3015					      repend
   5974  3016		       00		      .byte.b	0
   5973  3016					      repend
   5974  3017		       00		      .byte.b	0
   5973  3017					      repend
   5974  3018		       00		      .byte.b	0
   5973  3018					      repend
   5974  3019		       00		      .byte.b	0
   5973  3019					      repend
   5974  301a		       00		      .byte.b	0
   5973  301a					      repend
   5974  301b		       00		      .byte.b	0
   5973  301b					      repend
   5974  301c		       00		      .byte.b	0
   5973  301c					      repend
   5974  301d		       00		      .byte.b	0
   5973  301d					      repend
   5974  301e		       00		      .byte.b	0
   5973  301e					      repend
   5974  301f		       00		      .byte.b	0
   5973  301f					      repend
   5974  3020		       00		      .byte.b	0
   5973  3020					      repend
   5974  3021		       00		      .byte.b	0
   5973  3021					      repend
   5974  3022		       00		      .byte.b	0
   5973  3022					      repend
   5974  3023		       00		      .byte.b	0
   5973  3023					      repend
   5974  3024		       00		      .byte.b	0
   5973  3024					      repend
   5974  3025		       00		      .byte.b	0
   5973  3025					      repend
   5974  3026		       00		      .byte.b	0
   5973  3026					      repend
   5974  3027		       00		      .byte.b	0
   5973  3027					      repend
   5974  3028		       00		      .byte.b	0
   5973  3028					      repend
   5974  3029		       00		      .byte.b	0
   5973  3029					      repend
   5974  302a		       00		      .byte.b	0
   5973  302a					      repend
   5974  302b		       00		      .byte.b	0
   5973  302b					      repend
   5974  302c		       00		      .byte.b	0
   5973  302c					      repend
   5974  302d		       00		      .byte.b	0
   5973  302d					      repend
   5974  302e		       00		      .byte.b	0
   5973  302e					      repend
   5974  302f		       00		      .byte.b	0
   5973  302f					      repend
   5974  3030		       00		      .byte.b	0
   5973  3030					      repend
   5974  3031		       00		      .byte.b	0
   5973  3031					      repend
   5974  3032		       00		      .byte.b	0
   5973  3032					      repend
   5974  3033		       00		      .byte.b	0
   5973  3033					      repend
   5974  3034		       00		      .byte.b	0
   5973  3034					      repend
   5974  3035		       00		      .byte.b	0
   5973  3035					      repend
   5974  3036		       00		      .byte.b	0
   5973  3036					      repend
   5974  3037		       00		      .byte.b	0
   5973  3037					      repend
   5974  3038		       00		      .byte.b	0
   5973  3038					      repend
   5974  3039		       00		      .byte.b	0
   5973  3039					      repend
   5974  303a		       00		      .byte.b	0
   5973  303a					      repend
   5974  303b		       00		      .byte.b	0
   5973  303b					      repend
   5974  303c		       00		      .byte.b	0
   5973  303c					      repend
   5974  303d		       00		      .byte.b	0
   5973  303d					      repend
   5974  303e		       00		      .byte.b	0
   5973  303e					      repend
   5974  303f		       00		      .byte.b	0
   5973  303f					      repend
   5974  3040		       00		      .byte.b	0
   5973  3040					      repend
   5974  3041		       00		      .byte.b	0
   5973  3041					      repend
   5974  3042		       00		      .byte.b	0
   5973  3042					      repend
   5974  3043		       00		      .byte.b	0
   5973  3043					      repend
   5974  3044		       00		      .byte.b	0
   5973  3044					      repend
   5974  3045		       00		      .byte.b	0
   5973  3045					      repend
   5974  3046		       00		      .byte.b	0
   5973  3046					      repend
   5974  3047		       00		      .byte.b	0
   5973  3047					      repend
   5974  3048		       00		      .byte.b	0
   5973  3048					      repend
   5974  3049		       00		      .byte.b	0
   5973  3049					      repend
   5974  304a		       00		      .byte.b	0
   5973  304a					      repend
   5974  304b		       00		      .byte.b	0
   5973  304b					      repend
   5974  304c		       00		      .byte.b	0
   5973  304c					      repend
   5974  304d		       00		      .byte.b	0
   5973  304d					      repend
   5974  304e		       00		      .byte.b	0
   5973  304e					      repend
   5974  304f		       00		      .byte.b	0
   5973  304f					      repend
   5974  3050		       00		      .byte.b	0
   5973  3050					      repend
   5974  3051		       00		      .byte.b	0
   5973  3051					      repend
   5974  3052		       00		      .byte.b	0
   5973  3052					      repend
   5974  3053		       00		      .byte.b	0
   5973  3053					      repend
   5974  3054		       00		      .byte.b	0
   5973  3054					      repend
   5974  3055		       00		      .byte.b	0
   5973  3055					      repend
   5974  3056		       00		      .byte.b	0
   5973  3056					      repend
   5974  3057		       00		      .byte.b	0
   5973  3057					      repend
   5974  3058		       00		      .byte.b	0
   5973  3058					      repend
   5974  3059		       00		      .byte.b	0
   5973  3059					      repend
   5974  305a		       00		      .byte.b	0
   5973  305a					      repend
   5974  305b		       00		      .byte.b	0
   5973  305b					      repend
   5974  305c		       00		      .byte.b	0
   5973  305c					      repend
   5974  305d		       00		      .byte.b	0
   5973  305d					      repend
   5974  305e		       00		      .byte.b	0
   5973  305e					      repend
   5974  305f		       00		      .byte.b	0
   5973  305f					      repend
   5974  3060		       00		      .byte.b	0
   5973  3060					      repend
   5974  3061		       00		      .byte.b	0
   5973  3061					      repend
   5974  3062		       00		      .byte.b	0
   5973  3062					      repend
   5974  3063		       00		      .byte.b	0
   5973  3063					      repend
   5974  3064		       00		      .byte.b	0
   5973  3064					      repend
   5974  3065		       00		      .byte.b	0
   5973  3065					      repend
   5974  3066		       00		      .byte.b	0
   5973  3066					      repend
   5974  3067		       00		      .byte.b	0
   5973  3067					      repend
   5974  3068		       00		      .byte.b	0
   5973  3068					      repend
   5974  3069		       00		      .byte.b	0
   5973  3069					      repend
   5974  306a		       00		      .byte.b	0
   5973  306a					      repend
   5974  306b		       00		      .byte.b	0
   5973  306b					      repend
   5974  306c		       00		      .byte.b	0
   5973  306c					      repend
   5974  306d		       00		      .byte.b	0
   5973  306d					      repend
   5974  306e		       00		      .byte.b	0
   5973  306e					      repend
   5974  306f		       00		      .byte.b	0
   5973  306f					      repend
   5974  3070		       00		      .byte.b	0
   5973  3070					      repend
   5974  3071		       00		      .byte.b	0
   5973  3071					      repend
   5974  3072		       00		      .byte.b	0
   5973  3072					      repend
   5974  3073		       00		      .byte.b	0
   5973  3073					      repend
   5974  3074		       00		      .byte.b	0
   5973  3074					      repend
   5974  3075		       00		      .byte.b	0
   5973  3075					      repend
   5974  3076		       00		      .byte.b	0
   5973  3076					      repend
   5974  3077		       00		      .byte.b	0
   5973  3077					      repend
   5974  3078		       00		      .byte.b	0
   5973  3078					      repend
   5974  3079		       00		      .byte.b	0
   5973  3079					      repend
   5974  307a		       00		      .byte.b	0
   5973  307a					      repend
   5974  307b		       00		      .byte.b	0
   5973  307b					      repend
   5974  307c		       00		      .byte.b	0
   5973  307c					      repend
   5974  307d		       00		      .byte.b	0
   5973  307d					      repend
   5974  307e		       00		      .byte.b	0
   5973  307e					      repend
   5974  307f		       00		      .byte.b	0
   5973  307f					      repend
   5974  3080		       00		      .byte.b	0
   5975  3081					      repend
   5976  3081				   .L0199		;  temp1 = temp1
   5977  3081
   5978  3081		       a5 cb		      LDA	temp1
   5979  3083		       85 cb		      STA	temp1
   5980  3085				   .
   5981  3085							; 
   5982  3085
   5983  3085				   .
   5984  3085							; 
   5985  3085
   5986  3085				   .
   5987  3085							; 
   5988  3085
   5989  3085				   .
   5990  3085							; 
   5991  3085
   5992  3085				   .
   5993  3085							; 
   5994  3085
   5995  3085				   .L0200		;  bank 4
   5996  3085
   5997  3085					      if	ECHO3
      3919 bytes of ROM space left in bank 3
   5998  3085					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   5999  3085					      endif
   6000  3085		       00 01	   ECHO3      =	1
   6001  3fd4					      ORG	$3FF4-bscode_length
   6002  3fd4					      RORG	$5FF4-bscode_length
   6003  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   6004  3fd6					      ifconst	FASTFETCH	; using DPC+
   6005  3fd6		       8e 58 10 	      stx	FASTFETCH
   6006  3fd9					      endif
   6007  3fd9		       9a		      txs
   6008  3fda				  -	      if	bankswitch == 64
   6009  3fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6010  3fda					      else
   6011  3fda		       a9 18		      lda	#>(start-1)
   6012  3fdc					      endif
   6013  3fdc		       48		      pha
   6014  3fdd		       a9 e3		      lda	#<(start-1)
   6015  3fdf		       48		      pha
   6016  3fe0		       48		      pha
   6017  3fe1		       8a		      txa
   6018  3fe2		       48		      pha
   6019  3fe3		       ba		      tsx
   6020  3fe4					      if	bankswitch != 64
   6021  3fe4		       b5 04		      lda	4,x	; get high byte of return address
   6022  3fe6		       2a		      rol
   6023  3fe7		       2a		      rol
   6024  3fe8		       2a		      rol
   6025  3fe9		       2a		      rol
   6026  3fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6027  3fec		       aa		      tax
   6028  3fed		       e8		      inx
   6029  3fee				  -	      else
   6030  3fee				  -	      lda	4,x	; get high byte of return address
   6031  3fee				  -	      tay
   6032  3fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6033  3fee				  -	      sta	4,x
   6034  3fee				  -	      tya
   6035  3fee				  -	      lsr
   6036  3fee				  -	      lsr
   6037  3fee				  -	      lsr
   6038  3fee				  -	      lsr
   6039  3fee				  -	      tax
   6040  3fee				  -	      inx
   6041  3fee					      endif
   6042  3fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6043  3ff1		       68		      pla
   6044  3ff2		       aa		      tax
   6045  3ff3		       68		      pla
   6046  3ff4		       60		      rts
   6047  3ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6048  3ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6049  3ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6050  3ff5					      endif
   6051  3ffc					      ORG	$3FFC
   6052  3ffc					      RORG	$5FFC
   6053  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   6054  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   6055  4000					      ORG	$4000
   6056  4000					      RORG	$7000
   6057  4000					      repeat	129
   6058  4000		       00		      .byte.b	0
   6057  4000					      repend
   6058  4001		       00		      .byte.b	0
   6057  4001					      repend
   6058  4002		       00		      .byte.b	0
   6057  4002					      repend
   6058  4003		       00		      .byte.b	0
   6057  4003					      repend
   6058  4004		       00		      .byte.b	0
   6057  4004					      repend
   6058  4005		       00		      .byte.b	0
   6057  4005					      repend
   6058  4006		       00		      .byte.b	0
   6057  4006					      repend
   6058  4007		       00		      .byte.b	0
   6057  4007					      repend
   6058  4008		       00		      .byte.b	0
   6057  4008					      repend
   6058  4009		       00		      .byte.b	0
   6057  4009					      repend
   6058  400a		       00		      .byte.b	0
   6057  400a					      repend
   6058  400b		       00		      .byte.b	0
   6057  400b					      repend
   6058  400c		       00		      .byte.b	0
   6057  400c					      repend
   6058  400d		       00		      .byte.b	0
   6057  400d					      repend
   6058  400e		       00		      .byte.b	0
   6057  400e					      repend
   6058  400f		       00		      .byte.b	0
   6057  400f					      repend
   6058  4010		       00		      .byte.b	0
   6057  4010					      repend
   6058  4011		       00		      .byte.b	0
   6057  4011					      repend
   6058  4012		       00		      .byte.b	0
   6057  4012					      repend
   6058  4013		       00		      .byte.b	0
   6057  4013					      repend
   6058  4014		       00		      .byte.b	0
   6057  4014					      repend
   6058  4015		       00		      .byte.b	0
   6057  4015					      repend
   6058  4016		       00		      .byte.b	0
   6057  4016					      repend
   6058  4017		       00		      .byte.b	0
   6057  4017					      repend
   6058  4018		       00		      .byte.b	0
   6057  4018					      repend
   6058  4019		       00		      .byte.b	0
   6057  4019					      repend
   6058  401a		       00		      .byte.b	0
   6057  401a					      repend
   6058  401b		       00		      .byte.b	0
   6057  401b					      repend
   6058  401c		       00		      .byte.b	0
   6057  401c					      repend
   6058  401d		       00		      .byte.b	0
   6057  401d					      repend
   6058  401e		       00		      .byte.b	0
   6057  401e					      repend
   6058  401f		       00		      .byte.b	0
   6057  401f					      repend
   6058  4020		       00		      .byte.b	0
   6057  4020					      repend
   6058  4021		       00		      .byte.b	0
   6057  4021					      repend
   6058  4022		       00		      .byte.b	0
   6057  4022					      repend
   6058  4023		       00		      .byte.b	0
   6057  4023					      repend
   6058  4024		       00		      .byte.b	0
   6057  4024					      repend
   6058  4025		       00		      .byte.b	0
   6057  4025					      repend
   6058  4026		       00		      .byte.b	0
   6057  4026					      repend
   6058  4027		       00		      .byte.b	0
   6057  4027					      repend
   6058  4028		       00		      .byte.b	0
   6057  4028					      repend
   6058  4029		       00		      .byte.b	0
   6057  4029					      repend
   6058  402a		       00		      .byte.b	0
   6057  402a					      repend
   6058  402b		       00		      .byte.b	0
   6057  402b					      repend
   6058  402c		       00		      .byte.b	0
   6057  402c					      repend
   6058  402d		       00		      .byte.b	0
   6057  402d					      repend
   6058  402e		       00		      .byte.b	0
   6057  402e					      repend
   6058  402f		       00		      .byte.b	0
   6057  402f					      repend
   6058  4030		       00		      .byte.b	0
   6057  4030					      repend
   6058  4031		       00		      .byte.b	0
   6057  4031					      repend
   6058  4032		       00		      .byte.b	0
   6057  4032					      repend
   6058  4033		       00		      .byte.b	0
   6057  4033					      repend
   6058  4034		       00		      .byte.b	0
   6057  4034					      repend
   6058  4035		       00		      .byte.b	0
   6057  4035					      repend
   6058  4036		       00		      .byte.b	0
   6057  4036					      repend
   6058  4037		       00		      .byte.b	0
   6057  4037					      repend
   6058  4038		       00		      .byte.b	0
   6057  4038					      repend
   6058  4039		       00		      .byte.b	0
   6057  4039					      repend
   6058  403a		       00		      .byte.b	0
   6057  403a					      repend
   6058  403b		       00		      .byte.b	0
   6057  403b					      repend
   6058  403c		       00		      .byte.b	0
   6057  403c					      repend
   6058  403d		       00		      .byte.b	0
   6057  403d					      repend
   6058  403e		       00		      .byte.b	0
   6057  403e					      repend
   6058  403f		       00		      .byte.b	0
   6057  403f					      repend
   6058  4040		       00		      .byte.b	0
   6057  4040					      repend
   6058  4041		       00		      .byte.b	0
   6057  4041					      repend
   6058  4042		       00		      .byte.b	0
   6057  4042					      repend
   6058  4043		       00		      .byte.b	0
   6057  4043					      repend
   6058  4044		       00		      .byte.b	0
   6057  4044					      repend
   6058  4045		       00		      .byte.b	0
   6057  4045					      repend
   6058  4046		       00		      .byte.b	0
   6057  4046					      repend
   6058  4047		       00		      .byte.b	0
   6057  4047					      repend
   6058  4048		       00		      .byte.b	0
   6057  4048					      repend
   6058  4049		       00		      .byte.b	0
   6057  4049					      repend
   6058  404a		       00		      .byte.b	0
   6057  404a					      repend
   6058  404b		       00		      .byte.b	0
   6057  404b					      repend
   6058  404c		       00		      .byte.b	0
   6057  404c					      repend
   6058  404d		       00		      .byte.b	0
   6057  404d					      repend
   6058  404e		       00		      .byte.b	0
   6057  404e					      repend
   6058  404f		       00		      .byte.b	0
   6057  404f					      repend
   6058  4050		       00		      .byte.b	0
   6057  4050					      repend
   6058  4051		       00		      .byte.b	0
   6057  4051					      repend
   6058  4052		       00		      .byte.b	0
   6057  4052					      repend
   6058  4053		       00		      .byte.b	0
   6057  4053					      repend
   6058  4054		       00		      .byte.b	0
   6057  4054					      repend
   6058  4055		       00		      .byte.b	0
   6057  4055					      repend
   6058  4056		       00		      .byte.b	0
   6057  4056					      repend
   6058  4057		       00		      .byte.b	0
   6057  4057					      repend
   6058  4058		       00		      .byte.b	0
   6057  4058					      repend
   6058  4059		       00		      .byte.b	0
   6057  4059					      repend
   6058  405a		       00		      .byte.b	0
   6057  405a					      repend
   6058  405b		       00		      .byte.b	0
   6057  405b					      repend
   6058  405c		       00		      .byte.b	0
   6057  405c					      repend
   6058  405d		       00		      .byte.b	0
   6057  405d					      repend
   6058  405e		       00		      .byte.b	0
   6057  405e					      repend
   6058  405f		       00		      .byte.b	0
   6057  405f					      repend
   6058  4060		       00		      .byte.b	0
   6057  4060					      repend
   6058  4061		       00		      .byte.b	0
   6057  4061					      repend
   6058  4062		       00		      .byte.b	0
   6057  4062					      repend
   6058  4063		       00		      .byte.b	0
   6057  4063					      repend
   6058  4064		       00		      .byte.b	0
   6057  4064					      repend
   6058  4065		       00		      .byte.b	0
   6057  4065					      repend
   6058  4066		       00		      .byte.b	0
   6057  4066					      repend
   6058  4067		       00		      .byte.b	0
   6057  4067					      repend
   6058  4068		       00		      .byte.b	0
   6057  4068					      repend
   6058  4069		       00		      .byte.b	0
   6057  4069					      repend
   6058  406a		       00		      .byte.b	0
   6057  406a					      repend
   6058  406b		       00		      .byte.b	0
   6057  406b					      repend
   6058  406c		       00		      .byte.b	0
   6057  406c					      repend
   6058  406d		       00		      .byte.b	0
   6057  406d					      repend
   6058  406e		       00		      .byte.b	0
   6057  406e					      repend
   6058  406f		       00		      .byte.b	0
   6057  406f					      repend
   6058  4070		       00		      .byte.b	0
   6057  4070					      repend
   6058  4071		       00		      .byte.b	0
   6057  4071					      repend
   6058  4072		       00		      .byte.b	0
   6057  4072					      repend
   6058  4073		       00		      .byte.b	0
   6057  4073					      repend
   6058  4074		       00		      .byte.b	0
   6057  4074					      repend
   6058  4075		       00		      .byte.b	0
   6057  4075					      repend
   6058  4076		       00		      .byte.b	0
   6057  4076					      repend
   6058  4077		       00		      .byte.b	0
   6057  4077					      repend
   6058  4078		       00		      .byte.b	0
   6057  4078					      repend
   6058  4079		       00		      .byte.b	0
   6057  4079					      repend
   6058  407a		       00		      .byte.b	0
   6057  407a					      repend
   6058  407b		       00		      .byte.b	0
   6057  407b					      repend
   6058  407c		       00		      .byte.b	0
   6057  407c					      repend
   6058  407d		       00		      .byte.b	0
   6057  407d					      repend
   6058  407e		       00		      .byte.b	0
   6057  407e					      repend
   6058  407f		       00		      .byte.b	0
   6057  407f					      repend
   6058  4080		       00		      .byte.b	0
   6059  4081					      repend
   6060  4081				   .L0201		;  temp1 = temp1
   6061  4081
   6062  4081		       a5 cb		      LDA	temp1
   6063  4083		       85 cb		      STA	temp1
   6064  4085				   .
   6065  4085							; 
   6066  4085
   6067  4085				   .
   6068  4085							; 
   6069  4085
   6070  4085				   .
   6071  4085							; 
   6072  4085
   6073  4085				   .
   6074  4085							; 
   6075  4085
   6076  4085				   .
   6077  4085							; 
   6078  4085
   6079  4085				   .L0202		;  bank 5
   6080  4085
   6081  4085					      if	ECHO4
      3919 bytes of ROM space left in bank 4
   6082  4085					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   6083  4085					      endif
   6084  4085		       00 01	   ECHO4      =	1
   6085  4fd4					      ORG	$4FF4-bscode_length
   6086  4fd4					      RORG	$7FF4-bscode_length
   6087  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   6088  4fd6					      ifconst	FASTFETCH	; using DPC+
   6089  4fd6		       8e 58 10 	      stx	FASTFETCH
   6090  4fd9					      endif
   6091  4fd9		       9a		      txs
   6092  4fda				  -	      if	bankswitch == 64
   6093  4fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6094  4fda					      else
   6095  4fda		       a9 18		      lda	#>(start-1)
   6096  4fdc					      endif
   6097  4fdc		       48		      pha
   6098  4fdd		       a9 e3		      lda	#<(start-1)
   6099  4fdf		       48		      pha
   6100  4fe0		       48		      pha
   6101  4fe1		       8a		      txa
   6102  4fe2		       48		      pha
   6103  4fe3		       ba		      tsx
   6104  4fe4					      if	bankswitch != 64
   6105  4fe4		       b5 04		      lda	4,x	; get high byte of return address
   6106  4fe6		       2a		      rol
   6107  4fe7		       2a		      rol
   6108  4fe8		       2a		      rol
   6109  4fe9		       2a		      rol
   6110  4fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6111  4fec		       aa		      tax
   6112  4fed		       e8		      inx
   6113  4fee				  -	      else
   6114  4fee				  -	      lda	4,x	; get high byte of return address
   6115  4fee				  -	      tay
   6116  4fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6117  4fee				  -	      sta	4,x
   6118  4fee				  -	      tya
   6119  4fee				  -	      lsr
   6120  4fee				  -	      lsr
   6121  4fee				  -	      lsr
   6122  4fee				  -	      lsr
   6123  4fee				  -	      tax
   6124  4fee				  -	      inx
   6125  4fee					      endif
   6126  4fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6127  4ff1		       68		      pla
   6128  4ff2		       aa		      tax
   6129  4ff3		       68		      pla
   6130  4ff4		       60		      rts
   6131  4ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6132  4ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6133  4ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6134  4ff5					      endif
   6135  4ffc					      ORG	$4FFC
   6136  4ffc					      RORG	$7FFC
   6137  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   6138  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   6139  5000					      ORG	$5000
   6140  5000					      RORG	$9000
   6141  5000					      repeat	129
   6142  5000		       00		      .byte.b	0
   6141  5000					      repend
   6142  5001		       00		      .byte.b	0
   6141  5001					      repend
   6142  5002		       00		      .byte.b	0
   6141  5002					      repend
   6142  5003		       00		      .byte.b	0
   6141  5003					      repend
   6142  5004		       00		      .byte.b	0
   6141  5004					      repend
   6142  5005		       00		      .byte.b	0
   6141  5005					      repend
   6142  5006		       00		      .byte.b	0
   6141  5006					      repend
   6142  5007		       00		      .byte.b	0
   6141  5007					      repend
   6142  5008		       00		      .byte.b	0
   6141  5008					      repend
   6142  5009		       00		      .byte.b	0
   6141  5009					      repend
   6142  500a		       00		      .byte.b	0
   6141  500a					      repend
   6142  500b		       00		      .byte.b	0
   6141  500b					      repend
   6142  500c		       00		      .byte.b	0
   6141  500c					      repend
   6142  500d		       00		      .byte.b	0
   6141  500d					      repend
   6142  500e		       00		      .byte.b	0
   6141  500e					      repend
   6142  500f		       00		      .byte.b	0
   6141  500f					      repend
   6142  5010		       00		      .byte.b	0
   6141  5010					      repend
   6142  5011		       00		      .byte.b	0
   6141  5011					      repend
   6142  5012		       00		      .byte.b	0
   6141  5012					      repend
   6142  5013		       00		      .byte.b	0
   6141  5013					      repend
   6142  5014		       00		      .byte.b	0
   6141  5014					      repend
   6142  5015		       00		      .byte.b	0
   6141  5015					      repend
   6142  5016		       00		      .byte.b	0
   6141  5016					      repend
   6142  5017		       00		      .byte.b	0
   6141  5017					      repend
   6142  5018		       00		      .byte.b	0
   6141  5018					      repend
   6142  5019		       00		      .byte.b	0
   6141  5019					      repend
   6142  501a		       00		      .byte.b	0
   6141  501a					      repend
   6142  501b		       00		      .byte.b	0
   6141  501b					      repend
   6142  501c		       00		      .byte.b	0
   6141  501c					      repend
   6142  501d		       00		      .byte.b	0
   6141  501d					      repend
   6142  501e		       00		      .byte.b	0
   6141  501e					      repend
   6142  501f		       00		      .byte.b	0
   6141  501f					      repend
   6142  5020		       00		      .byte.b	0
   6141  5020					      repend
   6142  5021		       00		      .byte.b	0
   6141  5021					      repend
   6142  5022		       00		      .byte.b	0
   6141  5022					      repend
   6142  5023		       00		      .byte.b	0
   6141  5023					      repend
   6142  5024		       00		      .byte.b	0
   6141  5024					      repend
   6142  5025		       00		      .byte.b	0
   6141  5025					      repend
   6142  5026		       00		      .byte.b	0
   6141  5026					      repend
   6142  5027		       00		      .byte.b	0
   6141  5027					      repend
   6142  5028		       00		      .byte.b	0
   6141  5028					      repend
   6142  5029		       00		      .byte.b	0
   6141  5029					      repend
   6142  502a		       00		      .byte.b	0
   6141  502a					      repend
   6142  502b		       00		      .byte.b	0
   6141  502b					      repend
   6142  502c		       00		      .byte.b	0
   6141  502c					      repend
   6142  502d		       00		      .byte.b	0
   6141  502d					      repend
   6142  502e		       00		      .byte.b	0
   6141  502e					      repend
   6142  502f		       00		      .byte.b	0
   6141  502f					      repend
   6142  5030		       00		      .byte.b	0
   6141  5030					      repend
   6142  5031		       00		      .byte.b	0
   6141  5031					      repend
   6142  5032		       00		      .byte.b	0
   6141  5032					      repend
   6142  5033		       00		      .byte.b	0
   6141  5033					      repend
   6142  5034		       00		      .byte.b	0
   6141  5034					      repend
   6142  5035		       00		      .byte.b	0
   6141  5035					      repend
   6142  5036		       00		      .byte.b	0
   6141  5036					      repend
   6142  5037		       00		      .byte.b	0
   6141  5037					      repend
   6142  5038		       00		      .byte.b	0
   6141  5038					      repend
   6142  5039		       00		      .byte.b	0
   6141  5039					      repend
   6142  503a		       00		      .byte.b	0
   6141  503a					      repend
   6142  503b		       00		      .byte.b	0
   6141  503b					      repend
   6142  503c		       00		      .byte.b	0
   6141  503c					      repend
   6142  503d		       00		      .byte.b	0
   6141  503d					      repend
   6142  503e		       00		      .byte.b	0
   6141  503e					      repend
   6142  503f		       00		      .byte.b	0
   6141  503f					      repend
   6142  5040		       00		      .byte.b	0
   6141  5040					      repend
   6142  5041		       00		      .byte.b	0
   6141  5041					      repend
   6142  5042		       00		      .byte.b	0
   6141  5042					      repend
   6142  5043		       00		      .byte.b	0
   6141  5043					      repend
   6142  5044		       00		      .byte.b	0
   6141  5044					      repend
   6142  5045		       00		      .byte.b	0
   6141  5045					      repend
   6142  5046		       00		      .byte.b	0
   6141  5046					      repend
   6142  5047		       00		      .byte.b	0
   6141  5047					      repend
   6142  5048		       00		      .byte.b	0
   6141  5048					      repend
   6142  5049		       00		      .byte.b	0
   6141  5049					      repend
   6142  504a		       00		      .byte.b	0
   6141  504a					      repend
   6142  504b		       00		      .byte.b	0
   6141  504b					      repend
   6142  504c		       00		      .byte.b	0
   6141  504c					      repend
   6142  504d		       00		      .byte.b	0
   6141  504d					      repend
   6142  504e		       00		      .byte.b	0
   6141  504e					      repend
   6142  504f		       00		      .byte.b	0
   6141  504f					      repend
   6142  5050		       00		      .byte.b	0
   6141  5050					      repend
   6142  5051		       00		      .byte.b	0
   6141  5051					      repend
   6142  5052		       00		      .byte.b	0
   6141  5052					      repend
   6142  5053		       00		      .byte.b	0
   6141  5053					      repend
   6142  5054		       00		      .byte.b	0
   6141  5054					      repend
   6142  5055		       00		      .byte.b	0
   6141  5055					      repend
   6142  5056		       00		      .byte.b	0
   6141  5056					      repend
   6142  5057		       00		      .byte.b	0
   6141  5057					      repend
   6142  5058		       00		      .byte.b	0
   6141  5058					      repend
   6142  5059		       00		      .byte.b	0
   6141  5059					      repend
   6142  505a		       00		      .byte.b	0
   6141  505a					      repend
   6142  505b		       00		      .byte.b	0
   6141  505b					      repend
   6142  505c		       00		      .byte.b	0
   6141  505c					      repend
   6142  505d		       00		      .byte.b	0
   6141  505d					      repend
   6142  505e		       00		      .byte.b	0
   6141  505e					      repend
   6142  505f		       00		      .byte.b	0
   6141  505f					      repend
   6142  5060		       00		      .byte.b	0
   6141  5060					      repend
   6142  5061		       00		      .byte.b	0
   6141  5061					      repend
   6142  5062		       00		      .byte.b	0
   6141  5062					      repend
   6142  5063		       00		      .byte.b	0
   6141  5063					      repend
   6142  5064		       00		      .byte.b	0
   6141  5064					      repend
   6142  5065		       00		      .byte.b	0
   6141  5065					      repend
   6142  5066		       00		      .byte.b	0
   6141  5066					      repend
   6142  5067		       00		      .byte.b	0
   6141  5067					      repend
   6142  5068		       00		      .byte.b	0
   6141  5068					      repend
   6142  5069		       00		      .byte.b	0
   6141  5069					      repend
   6142  506a		       00		      .byte.b	0
   6141  506a					      repend
   6142  506b		       00		      .byte.b	0
   6141  506b					      repend
   6142  506c		       00		      .byte.b	0
   6141  506c					      repend
   6142  506d		       00		      .byte.b	0
   6141  506d					      repend
   6142  506e		       00		      .byte.b	0
   6141  506e					      repend
   6142  506f		       00		      .byte.b	0
   6141  506f					      repend
   6142  5070		       00		      .byte.b	0
   6141  5070					      repend
   6142  5071		       00		      .byte.b	0
   6141  5071					      repend
   6142  5072		       00		      .byte.b	0
   6141  5072					      repend
   6142  5073		       00		      .byte.b	0
   6141  5073					      repend
   6142  5074		       00		      .byte.b	0
   6141  5074					      repend
   6142  5075		       00		      .byte.b	0
   6141  5075					      repend
   6142  5076		       00		      .byte.b	0
   6141  5076					      repend
   6142  5077		       00		      .byte.b	0
   6141  5077					      repend
   6142  5078		       00		      .byte.b	0
   6141  5078					      repend
   6142  5079		       00		      .byte.b	0
   6141  5079					      repend
   6142  507a		       00		      .byte.b	0
   6141  507a					      repend
   6142  507b		       00		      .byte.b	0
   6141  507b					      repend
   6142  507c		       00		      .byte.b	0
   6141  507c					      repend
   6142  507d		       00		      .byte.b	0
   6141  507d					      repend
   6142  507e		       00		      .byte.b	0
   6141  507e					      repend
   6142  507f		       00		      .byte.b	0
   6141  507f					      repend
   6142  5080		       00		      .byte.b	0
   6143  5081					      repend
   6144  5081				   .L0203		;  temp1 = temp1
   6145  5081
   6146  5081		       a5 cb		      LDA	temp1
   6147  5083		       85 cb		      STA	temp1
   6148  5085				   .
   6149  5085							; 
   6150  5085
   6151  5085				   .
   6152  5085							; 
   6153  5085
   6154  5085				   .
   6155  5085							; 
   6156  5085
   6157  5085				   .
   6158  5085							; 
   6159  5085
   6160  5085				   .
   6161  5085							; 
   6162  5085
   6163  5085				   .L0204		;  bank 6
   6164  5085
   6165  5085					      if	ECHO5
      3919 bytes of ROM space left in bank 5
   6166  5085					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   6167  5085					      endif
   6168  5085		       00 01	   ECHO5      =	1
   6169  5fd4					      ORG	$5FF4-bscode_length
   6170  5fd4					      RORG	$9FF4-bscode_length
   6171  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   6172  5fd6					      ifconst	FASTFETCH	; using DPC+
   6173  5fd6		       8e 58 10 	      stx	FASTFETCH
   6174  5fd9					      endif
   6175  5fd9		       9a		      txs
   6176  5fda				  -	      if	bankswitch == 64
   6177  5fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6178  5fda					      else
   6179  5fda		       a9 18		      lda	#>(start-1)
   6180  5fdc					      endif
   6181  5fdc		       48		      pha
   6182  5fdd		       a9 e3		      lda	#<(start-1)
   6183  5fdf		       48		      pha
   6184  5fe0		       48		      pha
   6185  5fe1		       8a		      txa
   6186  5fe2		       48		      pha
   6187  5fe3		       ba		      tsx
   6188  5fe4					      if	bankswitch != 64
   6189  5fe4		       b5 04		      lda	4,x	; get high byte of return address
   6190  5fe6		       2a		      rol
   6191  5fe7		       2a		      rol
   6192  5fe8		       2a		      rol
   6193  5fe9		       2a		      rol
   6194  5fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6195  5fec		       aa		      tax
   6196  5fed		       e8		      inx
   6197  5fee				  -	      else
   6198  5fee				  -	      lda	4,x	; get high byte of return address
   6199  5fee				  -	      tay
   6200  5fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6201  5fee				  -	      sta	4,x
   6202  5fee				  -	      tya
   6203  5fee				  -	      lsr
   6204  5fee				  -	      lsr
   6205  5fee				  -	      lsr
   6206  5fee				  -	      lsr
   6207  5fee				  -	      tax
   6208  5fee				  -	      inx
   6209  5fee					      endif
   6210  5fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6211  5ff1		       68		      pla
   6212  5ff2		       aa		      tax
   6213  5ff3		       68		      pla
   6214  5ff4		       60		      rts
   6215  5ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6216  5ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6217  5ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6218  5ff5					      endif
   6219  5ffc					      ORG	$5FFC
   6220  5ffc					      RORG	$9FFC
   6221  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   6222  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   6223  6000					      ORG	$6000
   6224  6000					      RORG	$B000
   6225  6000					      repeat	129
   6226  6000		       00		      .byte.b	0
   6225  6000					      repend
   6226  6001		       00		      .byte.b	0
   6225  6001					      repend
   6226  6002		       00		      .byte.b	0
   6225  6002					      repend
   6226  6003		       00		      .byte.b	0
   6225  6003					      repend
   6226  6004		       00		      .byte.b	0
   6225  6004					      repend
   6226  6005		       00		      .byte.b	0
   6225  6005					      repend
   6226  6006		       00		      .byte.b	0
   6225  6006					      repend
   6226  6007		       00		      .byte.b	0
   6225  6007					      repend
   6226  6008		       00		      .byte.b	0
   6225  6008					      repend
   6226  6009		       00		      .byte.b	0
   6225  6009					      repend
   6226  600a		       00		      .byte.b	0
   6225  600a					      repend
   6226  600b		       00		      .byte.b	0
   6225  600b					      repend
   6226  600c		       00		      .byte.b	0
   6225  600c					      repend
   6226  600d		       00		      .byte.b	0
   6225  600d					      repend
   6226  600e		       00		      .byte.b	0
   6225  600e					      repend
   6226  600f		       00		      .byte.b	0
   6225  600f					      repend
   6226  6010		       00		      .byte.b	0
   6225  6010					      repend
   6226  6011		       00		      .byte.b	0
   6225  6011					      repend
   6226  6012		       00		      .byte.b	0
   6225  6012					      repend
   6226  6013		       00		      .byte.b	0
   6225  6013					      repend
   6226  6014		       00		      .byte.b	0
   6225  6014					      repend
   6226  6015		       00		      .byte.b	0
   6225  6015					      repend
   6226  6016		       00		      .byte.b	0
   6225  6016					      repend
   6226  6017		       00		      .byte.b	0
   6225  6017					      repend
   6226  6018		       00		      .byte.b	0
   6225  6018					      repend
   6226  6019		       00		      .byte.b	0
   6225  6019					      repend
   6226  601a		       00		      .byte.b	0
   6225  601a					      repend
   6226  601b		       00		      .byte.b	0
   6225  601b					      repend
   6226  601c		       00		      .byte.b	0
   6225  601c					      repend
   6226  601d		       00		      .byte.b	0
   6225  601d					      repend
   6226  601e		       00		      .byte.b	0
   6225  601e					      repend
   6226  601f		       00		      .byte.b	0
   6225  601f					      repend
   6226  6020		       00		      .byte.b	0
   6225  6020					      repend
   6226  6021		       00		      .byte.b	0
   6225  6021					      repend
   6226  6022		       00		      .byte.b	0
   6225  6022					      repend
   6226  6023		       00		      .byte.b	0
   6225  6023					      repend
   6226  6024		       00		      .byte.b	0
   6225  6024					      repend
   6226  6025		       00		      .byte.b	0
   6225  6025					      repend
   6226  6026		       00		      .byte.b	0
   6225  6026					      repend
   6226  6027		       00		      .byte.b	0
   6225  6027					      repend
   6226  6028		       00		      .byte.b	0
   6225  6028					      repend
   6226  6029		       00		      .byte.b	0
   6225  6029					      repend
   6226  602a		       00		      .byte.b	0
   6225  602a					      repend
   6226  602b		       00		      .byte.b	0
   6225  602b					      repend
   6226  602c		       00		      .byte.b	0
   6225  602c					      repend
   6226  602d		       00		      .byte.b	0
   6225  602d					      repend
   6226  602e		       00		      .byte.b	0
   6225  602e					      repend
   6226  602f		       00		      .byte.b	0
   6225  602f					      repend
   6226  6030		       00		      .byte.b	0
   6225  6030					      repend
   6226  6031		       00		      .byte.b	0
   6225  6031					      repend
   6226  6032		       00		      .byte.b	0
   6225  6032					      repend
   6226  6033		       00		      .byte.b	0
   6225  6033					      repend
   6226  6034		       00		      .byte.b	0
   6225  6034					      repend
   6226  6035		       00		      .byte.b	0
   6225  6035					      repend
   6226  6036		       00		      .byte.b	0
   6225  6036					      repend
   6226  6037		       00		      .byte.b	0
   6225  6037					      repend
   6226  6038		       00		      .byte.b	0
   6225  6038					      repend
   6226  6039		       00		      .byte.b	0
   6225  6039					      repend
   6226  603a		       00		      .byte.b	0
   6225  603a					      repend
   6226  603b		       00		      .byte.b	0
   6225  603b					      repend
   6226  603c		       00		      .byte.b	0
   6225  603c					      repend
   6226  603d		       00		      .byte.b	0
   6225  603d					      repend
   6226  603e		       00		      .byte.b	0
   6225  603e					      repend
   6226  603f		       00		      .byte.b	0
   6225  603f					      repend
   6226  6040		       00		      .byte.b	0
   6225  6040					      repend
   6226  6041		       00		      .byte.b	0
   6225  6041					      repend
   6226  6042		       00		      .byte.b	0
   6225  6042					      repend
   6226  6043		       00		      .byte.b	0
   6225  6043					      repend
   6226  6044		       00		      .byte.b	0
   6225  6044					      repend
   6226  6045		       00		      .byte.b	0
   6225  6045					      repend
   6226  6046		       00		      .byte.b	0
   6225  6046					      repend
   6226  6047		       00		      .byte.b	0
   6225  6047					      repend
   6226  6048		       00		      .byte.b	0
   6225  6048					      repend
   6226  6049		       00		      .byte.b	0
   6225  6049					      repend
   6226  604a		       00		      .byte.b	0
   6225  604a					      repend
   6226  604b		       00		      .byte.b	0
   6225  604b					      repend
   6226  604c		       00		      .byte.b	0
   6225  604c					      repend
   6226  604d		       00		      .byte.b	0
   6225  604d					      repend
   6226  604e		       00		      .byte.b	0
   6225  604e					      repend
   6226  604f		       00		      .byte.b	0
   6225  604f					      repend
   6226  6050		       00		      .byte.b	0
   6225  6050					      repend
   6226  6051		       00		      .byte.b	0
   6225  6051					      repend
   6226  6052		       00		      .byte.b	0
   6225  6052					      repend
   6226  6053		       00		      .byte.b	0
   6225  6053					      repend
   6226  6054		       00		      .byte.b	0
   6225  6054					      repend
   6226  6055		       00		      .byte.b	0
   6225  6055					      repend
   6226  6056		       00		      .byte.b	0
   6225  6056					      repend
   6226  6057		       00		      .byte.b	0
   6225  6057					      repend
   6226  6058		       00		      .byte.b	0
   6225  6058					      repend
   6226  6059		       00		      .byte.b	0
   6225  6059					      repend
   6226  605a		       00		      .byte.b	0
   6225  605a					      repend
   6226  605b		       00		      .byte.b	0
   6225  605b					      repend
   6226  605c		       00		      .byte.b	0
   6225  605c					      repend
   6226  605d		       00		      .byte.b	0
   6225  605d					      repend
   6226  605e		       00		      .byte.b	0
   6225  605e					      repend
   6226  605f		       00		      .byte.b	0
   6225  605f					      repend
   6226  6060		       00		      .byte.b	0
   6225  6060					      repend
   6226  6061		       00		      .byte.b	0
   6225  6061					      repend
   6226  6062		       00		      .byte.b	0
   6225  6062					      repend
   6226  6063		       00		      .byte.b	0
   6225  6063					      repend
   6226  6064		       00		      .byte.b	0
   6225  6064					      repend
   6226  6065		       00		      .byte.b	0
   6225  6065					      repend
   6226  6066		       00		      .byte.b	0
   6225  6066					      repend
   6226  6067		       00		      .byte.b	0
   6225  6067					      repend
   6226  6068		       00		      .byte.b	0
   6225  6068					      repend
   6226  6069		       00		      .byte.b	0
   6225  6069					      repend
   6226  606a		       00		      .byte.b	0
   6225  606a					      repend
   6226  606b		       00		      .byte.b	0
   6225  606b					      repend
   6226  606c		       00		      .byte.b	0
   6225  606c					      repend
   6226  606d		       00		      .byte.b	0
   6225  606d					      repend
   6226  606e		       00		      .byte.b	0
   6225  606e					      repend
   6226  606f		       00		      .byte.b	0
   6225  606f					      repend
   6226  6070		       00		      .byte.b	0
   6225  6070					      repend
   6226  6071		       00		      .byte.b	0
   6225  6071					      repend
   6226  6072		       00		      .byte.b	0
   6225  6072					      repend
   6226  6073		       00		      .byte.b	0
   6225  6073					      repend
   6226  6074		       00		      .byte.b	0
   6225  6074					      repend
   6226  6075		       00		      .byte.b	0
   6225  6075					      repend
   6226  6076		       00		      .byte.b	0
   6225  6076					      repend
   6226  6077		       00		      .byte.b	0
   6225  6077					      repend
   6226  6078		       00		      .byte.b	0
   6225  6078					      repend
   6226  6079		       00		      .byte.b	0
   6225  6079					      repend
   6226  607a		       00		      .byte.b	0
   6225  607a					      repend
   6226  607b		       00		      .byte.b	0
   6225  607b					      repend
   6226  607c		       00		      .byte.b	0
   6225  607c					      repend
   6226  607d		       00		      .byte.b	0
   6225  607d					      repend
   6226  607e		       00		      .byte.b	0
   6225  607e					      repend
   6226  607f		       00		      .byte.b	0
   6225  607f					      repend
   6226  6080		       00		      .byte.b	0
   6227  6081					      repend
   6228  6081				   .L0205		;  temp1 = temp1
   6229  6081
   6230  6081		       a5 cb		      LDA	temp1
   6231  6083		       85 cb		      STA	temp1
   6232  6085				   .
   6233  6085							; 
   6234  6085
   6235  6085					      if	ECHO6
      3919 bytes of ROM space left in bank 6
   6236  6085					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   6237  6085					      endif
   6238  6085		       00 01	   ECHO6      =	1
   6239  6fd4					      ORG	$6FF4-bscode_length
   6240  6fd4					      RORG	$BFF4-bscode_length
   6241  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   6242  6fd6					      ifconst	FASTFETCH	; using DPC+
   6243  6fd6		       8e 58 10 	      stx	FASTFETCH
   6244  6fd9					      endif
   6245  6fd9		       9a		      txs
   6246  6fda				  -	      if	bankswitch == 64
   6247  6fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6248  6fda					      else
   6249  6fda		       a9 18		      lda	#>(start-1)
   6250  6fdc					      endif
   6251  6fdc		       48		      pha
   6252  6fdd		       a9 e3		      lda	#<(start-1)
   6253  6fdf		       48		      pha
   6254  6fe0		       48		      pha
   6255  6fe1		       8a		      txa
   6256  6fe2		       48		      pha
   6257  6fe3		       ba		      tsx
   6258  6fe4					      if	bankswitch != 64
   6259  6fe4		       b5 04		      lda	4,x	; get high byte of return address
   6260  6fe6		       2a		      rol
   6261  6fe7		       2a		      rol
   6262  6fe8		       2a		      rol
   6263  6fe9		       2a		      rol
   6264  6fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6265  6fec		       aa		      tax
   6266  6fed		       e8		      inx
   6267  6fee				  -	      else
   6268  6fee				  -	      lda	4,x	; get high byte of return address
   6269  6fee				  -	      tay
   6270  6fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6271  6fee				  -	      sta	4,x
   6272  6fee				  -	      tya
   6273  6fee				  -	      lsr
   6274  6fee				  -	      lsr
   6275  6fee				  -	      lsr
   6276  6fee				  -	      lsr
   6277  6fee				  -	      tax
   6278  6fee				  -	      inx
   6279  6fee					      endif
   6280  6fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6281  6ff1		       68		      pla
   6282  6ff2		       aa		      tax
   6283  6ff3		       68		      pla
   6284  6ff4		       60		      rts
   6285  6ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6286  6ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6287  6ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6288  6ff5					      endif
   6289  6ffc					      ORG	$6FFC
   6290  6ffc					      RORG	$BFFC
   6291  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   6292  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   6293  7000					      ORG	$7000
   6294  7000					      RORG	$D000
   6295  7000					      repeat	129
   6296  7000		       00		      .byte.b	0
   6295  7000					      repend
   6296  7001		       00		      .byte.b	0
   6295  7001					      repend
   6296  7002		       00		      .byte.b	0
   6295  7002					      repend
   6296  7003		       00		      .byte.b	0
   6295  7003					      repend
   6296  7004		       00		      .byte.b	0
   6295  7004					      repend
   6296  7005		       00		      .byte.b	0
   6295  7005					      repend
   6296  7006		       00		      .byte.b	0
   6295  7006					      repend
   6296  7007		       00		      .byte.b	0
   6295  7007					      repend
   6296  7008		       00		      .byte.b	0
   6295  7008					      repend
   6296  7009		       00		      .byte.b	0
   6295  7009					      repend
   6296  700a		       00		      .byte.b	0
   6295  700a					      repend
   6296  700b		       00		      .byte.b	0
   6295  700b					      repend
   6296  700c		       00		      .byte.b	0
   6295  700c					      repend
   6296  700d		       00		      .byte.b	0
   6295  700d					      repend
   6296  700e		       00		      .byte.b	0
   6295  700e					      repend
   6296  700f		       00		      .byte.b	0
   6295  700f					      repend
   6296  7010		       00		      .byte.b	0
   6295  7010					      repend
   6296  7011		       00		      .byte.b	0
   6295  7011					      repend
   6296  7012		       00		      .byte.b	0
   6295  7012					      repend
   6296  7013		       00		      .byte.b	0
   6295  7013					      repend
   6296  7014		       00		      .byte.b	0
   6295  7014					      repend
   6296  7015		       00		      .byte.b	0
   6295  7015					      repend
   6296  7016		       00		      .byte.b	0
   6295  7016					      repend
   6296  7017		       00		      .byte.b	0
   6295  7017					      repend
   6296  7018		       00		      .byte.b	0
   6295  7018					      repend
   6296  7019		       00		      .byte.b	0
   6295  7019					      repend
   6296  701a		       00		      .byte.b	0
   6295  701a					      repend
   6296  701b		       00		      .byte.b	0
   6295  701b					      repend
   6296  701c		       00		      .byte.b	0
   6295  701c					      repend
   6296  701d		       00		      .byte.b	0
   6295  701d					      repend
   6296  701e		       00		      .byte.b	0
   6295  701e					      repend
   6296  701f		       00		      .byte.b	0
   6295  701f					      repend
   6296  7020		       00		      .byte.b	0
   6295  7020					      repend
   6296  7021		       00		      .byte.b	0
   6295  7021					      repend
   6296  7022		       00		      .byte.b	0
   6295  7022					      repend
   6296  7023		       00		      .byte.b	0
   6295  7023					      repend
   6296  7024		       00		      .byte.b	0
   6295  7024					      repend
   6296  7025		       00		      .byte.b	0
   6295  7025					      repend
   6296  7026		       00		      .byte.b	0
   6295  7026					      repend
   6296  7027		       00		      .byte.b	0
   6295  7027					      repend
   6296  7028		       00		      .byte.b	0
   6295  7028					      repend
   6296  7029		       00		      .byte.b	0
   6295  7029					      repend
   6296  702a		       00		      .byte.b	0
   6295  702a					      repend
   6296  702b		       00		      .byte.b	0
   6295  702b					      repend
   6296  702c		       00		      .byte.b	0
   6295  702c					      repend
   6296  702d		       00		      .byte.b	0
   6295  702d					      repend
   6296  702e		       00		      .byte.b	0
   6295  702e					      repend
   6296  702f		       00		      .byte.b	0
   6295  702f					      repend
   6296  7030		       00		      .byte.b	0
   6295  7030					      repend
   6296  7031		       00		      .byte.b	0
   6295  7031					      repend
   6296  7032		       00		      .byte.b	0
   6295  7032					      repend
   6296  7033		       00		      .byte.b	0
   6295  7033					      repend
   6296  7034		       00		      .byte.b	0
   6295  7034					      repend
   6296  7035		       00		      .byte.b	0
   6295  7035					      repend
   6296  7036		       00		      .byte.b	0
   6295  7036					      repend
   6296  7037		       00		      .byte.b	0
   6295  7037					      repend
   6296  7038		       00		      .byte.b	0
   6295  7038					      repend
   6296  7039		       00		      .byte.b	0
   6295  7039					      repend
   6296  703a		       00		      .byte.b	0
   6295  703a					      repend
   6296  703b		       00		      .byte.b	0
   6295  703b					      repend
   6296  703c		       00		      .byte.b	0
   6295  703c					      repend
   6296  703d		       00		      .byte.b	0
   6295  703d					      repend
   6296  703e		       00		      .byte.b	0
   6295  703e					      repend
   6296  703f		       00		      .byte.b	0
   6295  703f					      repend
   6296  7040		       00		      .byte.b	0
   6295  7040					      repend
   6296  7041		       00		      .byte.b	0
   6295  7041					      repend
   6296  7042		       00		      .byte.b	0
   6295  7042					      repend
   6296  7043		       00		      .byte.b	0
   6295  7043					      repend
   6296  7044		       00		      .byte.b	0
   6295  7044					      repend
   6296  7045		       00		      .byte.b	0
   6295  7045					      repend
   6296  7046		       00		      .byte.b	0
   6295  7046					      repend
   6296  7047		       00		      .byte.b	0
   6295  7047					      repend
   6296  7048		       00		      .byte.b	0
   6295  7048					      repend
   6296  7049		       00		      .byte.b	0
   6295  7049					      repend
   6296  704a		       00		      .byte.b	0
   6295  704a					      repend
   6296  704b		       00		      .byte.b	0
   6295  704b					      repend
   6296  704c		       00		      .byte.b	0
   6295  704c					      repend
   6296  704d		       00		      .byte.b	0
   6295  704d					      repend
   6296  704e		       00		      .byte.b	0
   6295  704e					      repend
   6296  704f		       00		      .byte.b	0
   6295  704f					      repend
   6296  7050		       00		      .byte.b	0
   6295  7050					      repend
   6296  7051		       00		      .byte.b	0
   6295  7051					      repend
   6296  7052		       00		      .byte.b	0
   6295  7052					      repend
   6296  7053		       00		      .byte.b	0
   6295  7053					      repend
   6296  7054		       00		      .byte.b	0
   6295  7054					      repend
   6296  7055		       00		      .byte.b	0
   6295  7055					      repend
   6296  7056		       00		      .byte.b	0
   6295  7056					      repend
   6296  7057		       00		      .byte.b	0
   6295  7057					      repend
   6296  7058		       00		      .byte.b	0
   6295  7058					      repend
   6296  7059		       00		      .byte.b	0
   6295  7059					      repend
   6296  705a		       00		      .byte.b	0
   6295  705a					      repend
   6296  705b		       00		      .byte.b	0
   6295  705b					      repend
   6296  705c		       00		      .byte.b	0
   6295  705c					      repend
   6296  705d		       00		      .byte.b	0
   6295  705d					      repend
   6296  705e		       00		      .byte.b	0
   6295  705e					      repend
   6296  705f		       00		      .byte.b	0
   6295  705f					      repend
   6296  7060		       00		      .byte.b	0
   6295  7060					      repend
   6296  7061		       00		      .byte.b	0
   6295  7061					      repend
   6296  7062		       00		      .byte.b	0
   6295  7062					      repend
   6296  7063		       00		      .byte.b	0
   6295  7063					      repend
   6296  7064		       00		      .byte.b	0
   6295  7064					      repend
   6296  7065		       00		      .byte.b	0
   6295  7065					      repend
   6296  7066		       00		      .byte.b	0
   6295  7066					      repend
   6296  7067		       00		      .byte.b	0
   6295  7067					      repend
   6296  7068		       00		      .byte.b	0
   6295  7068					      repend
   6296  7069		       00		      .byte.b	0
   6295  7069					      repend
   6296  706a		       00		      .byte.b	0
   6295  706a					      repend
   6296  706b		       00		      .byte.b	0
   6295  706b					      repend
   6296  706c		       00		      .byte.b	0
   6295  706c					      repend
   6296  706d		       00		      .byte.b	0
   6295  706d					      repend
   6296  706e		       00		      .byte.b	0
   6295  706e					      repend
   6296  706f		       00		      .byte.b	0
   6295  706f					      repend
   6296  7070		       00		      .byte.b	0
   6295  7070					      repend
   6296  7071		       00		      .byte.b	0
   6295  7071					      repend
   6296  7072		       00		      .byte.b	0
   6295  7072					      repend
   6296  7073		       00		      .byte.b	0
   6295  7073					      repend
   6296  7074		       00		      .byte.b	0
   6295  7074					      repend
   6296  7075		       00		      .byte.b	0
   6295  7075					      repend
   6296  7076		       00		      .byte.b	0
   6295  7076					      repend
   6296  7077		       00		      .byte.b	0
   6295  7077					      repend
   6296  7078		       00		      .byte.b	0
   6295  7078					      repend
   6296  7079		       00		      .byte.b	0
   6295  7079					      repend
   6296  707a		       00		      .byte.b	0
   6295  707a					      repend
   6296  707b		       00		      .byte.b	0
   6295  707b					      repend
   6296  707c		       00		      .byte.b	0
   6295  707c					      repend
   6296  707d		       00		      .byte.b	0
   6295  707d					      repend
   6296  707e		       00		      .byte.b	0
   6295  707e					      repend
   6296  707f		       00		      .byte.b	0
   6295  707f					      repend
   6296  7080		       00		      .byte.b	0
   6297  7081					      repend
   6298  7081							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6299  7081
   6300  7081							;----------------------------------------
   6301  7081							; Display Data
   6302  7081							;----------------------------------------
   6303  7081							; The Display Data bank is copied into RAM when DPC+ initializes the cartridge.
   6304  7081							; This allows us to manipulate the data during run-time, but have a known
   6305  7081							; starting state when the Atari is first turned on.
   6306  7081							;
   6307  7081							; Unlike normal Atari VCS/2600 sprite definitions, the sprite data in the
   6308  7081							; Display Data bank is stored right-side-up.
   6309  7081							;
   6310  7081							;----------------------------------------
   6311  7081
   6312  7081				   Zeros32
   6313  7081		       00 84	   SOUND_OFF  =	(* & $1fff)/32
   6314  7081				   DisplayDataDigitBlank
   6315  7081		       00		      .byte.b	0	;--
   6316  7082		       00		      .byte.b	0	;--
   6317  7083		       00		      .byte.b	0	;--
   6318  7084		       00		      .byte.b	0	;--
   6319  7085		       00		      .byte.b	0	;--
   6320  7086		       00		      .byte.b	0	;--
   6321  7087		       00		      .byte.b	0	;--
   6322  7088		       00		      .byte.b	0	;--
   6323  7089
   6324  7089							;	align 32
   6325  7089							;Zeros32:
   6326  7089							;SOUND_OFF = (* & $1fff)/32
   6327  7089							;	.byte 0,0,0,0,0,0,0,0
   6328  7089		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   6329  7091		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   6330  7099		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   6331  70a1
   6332  70a1		       00 85	   SINE_WAVE  =	(* & $1fff)/32
   6333  70a1		       03 03 03 04*	      .byte.b	3,3,3,4,4,5,5,5
   6334  70a9		       05 05 05 05*	      .byte.b	5,5,5,5,4,4,3,3
   6335  70b1		       03 02 02 01*	      .byte.b	3,2,2,1,1,0,0,0
   6336  70b9		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,2,2
   6337  70c1
   6338  70e0		       00 00 00 00*	      align	32
   6339  70e0		       00 87	   TRIANGLE_WAVE =	(* & $1fff)/32
   6340  70e0		       00 00 01 01*	      .byte.b	0,0,1,1,1,2,2,2
   6341  70e8		       03 03 03 04*	      .byte.b	3,3,3,4,4,4,5,5
   6342  70f0		       05 05 04 04*	      .byte.b	5,5,4,4,4,3,3,3
   6343  70f8		       02 02 02 01*	      .byte.b	2,2,2,1,1,1,0,0
   6344  7100
   6345  7100					      align	32
   6346  7100		       00 88	   SAWTOOTH_WAVE =	(* & $1fff)/32
   6347  7100		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,1,1
   6348  7108		       01 01 02 02*	      .byte.b	1,1,2,2,2,2,2,2
   6349  7110		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,4,4
   6350  7118		       04 04 04 04*	      .byte.b	4,4,4,4,5,5,5,5
   6351  7120
   6352  7120					      align	32
   6353  7120		       00 89	   SQUARE_WAVE_VOL5 =	(* & $1fff)/32
   6354  7120		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   6355  7128		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   6356  7130		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   6357  7138		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   6358  7140
   6359  7140					      align	32
   6360  7140		       00 8a	   SQUARE_WAVE_VOL4 =	(* & $1fff)/32
   6361  7140		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   6362  7148		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   6363  7150		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   6364  7158		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   6365  7160
   6366  7160					      align	32
   6367  7160		       00 8b	   SQUARE_WAVE_VOL3 =	(* & $1fff)/32
   6368  7160		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   6369  7168		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   6370  7170		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   6371  7178		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   6372  7180
   6373  7180					      align	32
   6374  7180		       00 8c	   NOISE_WAVE =	(* & $1fff)/32
   6375  7180		       07 01 09 0a*	      .byte.b	7, 1, 9,10, 2, 8, 8,14
   6376  7188		       03 0d 08 05*	      .byte.b	3,13, 8, 5,12, 2, 3, 7
   6377  7190		       07 01 08 04*	      .byte.b	7, 1, 8, 4,15, 1,13, 5
   6378  7198		       08 05 0b 06*	      .byte.b	8, 5,11, 6, 8, 7, 9, 2
   6379  71a0
   6380  71a0							; low and high byte of address table (for ROMdata array in C)
   6381  71a0		       57		      .byte.b	<fetcher_address_table
   6382  71a1		       0d		      .byte.b	((>fetcher_address_table) & $0f) | (((>fetcher_address_table) / 2) & $70)
   6383  71a2		       00		      .byte.b	0
   6384  71a3		       00		      .byte.b	0
   6385  71a4				   FETCHER_BEGIN
   6386  71a4		       10		      .byte.b	16
   6387  71a5		       10		      .byte.b	16
   6388  71a6		       10		      .byte.b	16
   6389  71a7		       10		      .byte.b	16	; to zero-fill on boot
   6390  71a8							;bB.asm
   6391  71a8							; bB.asm file is split here
   6392  71a8				   PF_data1
   6393  71a8		       00		      .byte.b	%00000000
   6394  71a9		       00		      .byte.b	%00000000
   6395  71aa		       00		      .byte.b	%00000000
   6396  71ab		       00		      .byte.b	%00000000
   6397  71ac		       00		      .byte.b	%00000000
   6398  71ad		       00		      .byte.b	%00000000
   6399  71ae		       00		      .byte.b	%00000000
   6400  71af		       00		      .byte.b	%00000000
   6401  71b0		       00		      .byte.b	%00000000
   6402  71b1		       03		      .byte.b	%00000011
   6403  71b2		       00		      .byte.b	%00000000
   6404  71b3		       00		      .byte.b	%00000000
   6405  71b4		       00		      .byte.b	%00000000
   6406  71b5		       00		      .byte.b	%00000000
   6407  71b6		       00		      .byte.b	%00000000
   6408  71b7		       00		      .byte.b	%00000000
   6409  71b8		       00		      .byte.b	%00000000
   6410  71b9		       00		      .byte.b	%00000000
   6411  71ba		       00		      .byte.b	%00000000
   6412  71bb		       00		      .byte.b	%00000000
   6413  71bc		       00		      .byte.b	%00000000
   6414  71bd		       ff		      .byte.b	%11111111
   6415  71be		       ff		      .byte.b	%11111111
   6416  71bf		       00		      .byte.b	%00000000
   6417  71c0		       00		      .byte.b	%00000000
   6418  71c1		       00		      .byte.b	%00000000
   6419  71c2		       00		      .byte.b	%00000000
   6420  71c3		       00		      .byte.b	%00000000
   6421  71c4		       00		      .byte.b	%00000000
   6422  71c5		       00		      .byte.b	%00000000
   6423  71c6		       00		      .byte.b	%00000000
   6424  71c7		       00		      .byte.b	%00000000
   6425  71c8		       1f		      .byte.b	%00011111
   6426  71c9		       00		      .byte.b	%00000000
   6427  71ca		       00		      .byte.b	%00000000
   6428  71cb		       00		      .byte.b	%00000000
   6429  71cc		       00		      .byte.b	%00000000
   6430  71cd		       00		      .byte.b	%00000000
   6431  71ce		       fc		      .byte.b	%11111100
   6432  71cf		       00		      .byte.b	%00000000
   6433  71d0		       00		      .byte.b	%00000000
   6434  71d1		       00		      .byte.b	%00000000
   6435  71d2		       00		      .byte.b	%00000000
   6436  71d3		       00		      .byte.b	%00000000
   6437  71d4		       ff		      .byte.b	%11111111
   6438  71d5		       ff		      .byte.b	%11111111
   6439  71d6		       00		      .byte.b	%00000000
   6440  71d7		       00		      .byte.b	%00000000
   6441  71d8		       00		      .byte.b	%00000000
   6442  71d9		       00		      .byte.b	%00000000
   6443  71da		       00		      .byte.b	%00000000
   6444  71db		       00		      .byte.b	%00000000
   6445  71dc		       00		      .byte.b	%00000000
   6446  71dd		       00		      .byte.b	%00000000
   6447  71de		       00		      .byte.b	%00000000
   6448  71df		       1f		      .byte.b	%00011111
   6449  71e0		       00		      .byte.b	%00000000
   6450  71e1		       00		      .byte.b	%00000000
   6451  71e2		       00		      .byte.b	%00000000
   6452  71e3		       00		      .byte.b	%00000000
   6453  71e4		       00		      .byte.b	%00000000
   6454  71e5		       fc		      .byte.b	%11111100
   6455  71e6		       00		      .byte.b	%00000000
   6456  71e7		       00		      .byte.b	%00000000
   6457  71e8		       00		      .byte.b	%00000000
   6458  71e9		       00		      .byte.b	%00000000
   6459  71ea		       00		      .byte.b	%00000000
   6460  71eb		       ff		      .byte.b	%11111111
   6461  71ec		       ff		      .byte.b	%11111111
   6462  71ed		       00		      .byte.b	%00000000
   6463  71ee		       00		      .byte.b	%00000000
   6464  71ef		       00		      .byte.b	%00000000
   6465  71f0		       00		      .byte.b	%00000000
   6466  71f1		       00		      .byte.b	%00000000
   6467  71f2		       00		      .byte.b	%00000000
   6468  71f3		       00		      .byte.b	%00000000
   6469  71f4		       00		      .byte.b	%00000000
   6470  71f5		       00		      .byte.b	%00000000
   6471  71f6		       03		      .byte.b	%00000011
   6472  71f7		       00		      .byte.b	%00000000
   6473  71f8		       00		      .byte.b	%00000000
   6474  71f9		       00		      .byte.b	%00000000
   6475  71fa		       00		      .byte.b	%00000000
   6476  71fb		       00		      .byte.b	%00000000
   6477  71fc		       00		      .byte.b	%00000000
   6478  71fd		       00		      .byte.b	%00000000
   6479  71fe		       00		      .byte.b	%00000000
   6480  71ff		       00		      .byte.b	%00000000
   6481  7200		       00		      .byte.b	%00000000
   6482  7201		       00		      .byte.b	%00000000
   6483  7202		       ff		      .byte.b	%11111111
   6484  7203		       ff		      .byte.b	%11111111
   6485  7204				   playfieldcolorL046
   6486  7204		       0c		      .byte.b	$0C
   6487  7205		       0c		      .byte.b	$0C
   6488  7206		       0c		      .byte.b	$0C
   6489  7207		       0c		      .byte.b	$0C
   6490  7208		       0c		      .byte.b	$0C
   6491  7209		       0c		      .byte.b	$0C
   6492  720a		       0c		      .byte.b	$0C
   6493  720b		       0c		      .byte.b	$0C
   6494  720c		       0c		      .byte.b	$0C
   6495  720d		       0c		      .byte.b	$0C
   6496  720e		       0c		      .byte.b	$0C
   6497  720f		       0c		      .byte.b	$0C
   6498  7210		       0c		      .byte.b	$0C
   6499  7211		       0c		      .byte.b	$0C
   6500  7212		       0c		      .byte.b	$0C
   6501  7213		       0c		      .byte.b	$0C
   6502  7214		       0c		      .byte.b	$0C
   6503  7215		       0c		      .byte.b	$0C
   6504  7216		       0c		      .byte.b	$0C
   6505  7217		       0c		      .byte.b	$0C
   6506  7218		       0c		      .byte.b	$0C
   6507  7219		       0c		      .byte.b	$0C
   6508  721a		       0c		      .byte.b	$0C
   6509  721b		       0c		      .byte.b	$0C
   6510  721c		       0c		      .byte.b	$0C
   6511  721d		       0c		      .byte.b	$0C
   6512  721e		       0c		      .byte.b	$0C
   6513  721f		       0c		      .byte.b	$0C
   6514  7220		       0c		      .byte.b	$0C
   6515  7221		       0c		      .byte.b	$0C
   6516  7222		       0c		      .byte.b	$0C
   6517  7223		       0c		      .byte.b	$0C
   6518  7224		       0c		      .byte.b	$0C
   6519  7225		       0c		      .byte.b	$0C
   6520  7226		       0c		      .byte.b	$0C
   6521  7227		       1c		      .byte.b	$1C
   6522  7228		       00		      .byte.b	$00
   6523  7229		       00		      .byte.b	$00
   6524  722a		       00		      .byte.b	$00
   6525  722b		       0c		      .byte.b	$0C
   6526  722c		       0c		      .byte.b	$0C
   6527  722d		       0c		      .byte.b	$0C
   6528  722e		       0c		      .byte.b	$0C
   6529  722f		       0c		      .byte.b	$0C
   6530  7230		       0c		      .byte.b	$0C
   6531  7231		       0c		      .byte.b	$0C
   6532  7232		       0c		      .byte.b	$0C
   6533  7233		       0c		      .byte.b	$0C
   6534  7234		       0c		      .byte.b	$0C
   6535  7235		       0c		      .byte.b	$0C
   6536  7236		       0c		      .byte.b	$0C
   6537  7237		       0c		      .byte.b	$0C
   6538  7238		       0c		      .byte.b	$0C
   6539  7239		       0c		      .byte.b	$0C
   6540  723a		       0c		      .byte.b	$0C
   6541  723b		       0c		      .byte.b	$0C
   6542  723c		       0c		      .byte.b	$0C
   6543  723d		       0c		      .byte.b	$0C
   6544  723e		       0c		      .byte.b	$0C
   6545  723f		       3c		      .byte.b	$3C
   6546  7240		       00		      .byte.b	$00
   6547  7241		       00		      .byte.b	$00
   6548  7242		       00		      .byte.b	$00
   6549  7243		       0c		      .byte.b	$0C
   6550  7244		       0c		      .byte.b	$0C
   6551  7245		       0c		      .byte.b	$0C
   6552  7246		       0c		      .byte.b	$0C
   6553  7247		       0c		      .byte.b	$0C
   6554  7248		       0c		      .byte.b	$0C
   6555  7249		       0c		      .byte.b	$0C
   6556  724a		       0c		      .byte.b	$0C
   6557  724b		       0c		      .byte.b	$0C
   6558  724c		       0c		      .byte.b	$0C
   6559  724d		       0c		      .byte.b	$0C
   6560  724e		       0c		      .byte.b	$0C
   6561  724f		       0c		      .byte.b	$0C
   6562  7250		       0c		      .byte.b	$0C
   6563  7251		       0c		      .byte.b	$0C
   6564  7252		       0c		      .byte.b	$0C
   6565  7253		       0c		      .byte.b	$0C
   6566  7254		       0c		      .byte.b	$0C
   6567  7255		       0c		      .byte.b	$0C
   6568  7256		       0c		      .byte.b	$0C
   6569  7257		       cc		      .byte.b	$CC
   6570  7258		       c6		      .byte.b	$C6
   6571  7259		       c6		      .byte.b	$C6
   6572  725a		       c6		      .byte.b	$C6
   6573  725b		       c4		      .byte.b	$C4
   6574  725c				   backgroundcolorL047
   6575  725c		       00		      .byte.b	$00
   6576  725d				   playercolorL054_0
   6577  725d		       26		      .byte.b	$26
   6578  725e		       26		      .byte.b	$26
   6579  725f		       3c		      .byte.b	$3C
   6580  7260		       3c		      .byte.b	$3C
   6581  7261		       3c		      .byte.b	$3C
   6582  7262		       3c		      .byte.b	$3C
   6583  7263		       3c		      .byte.b	$3C
   6584  7264		       3c		      .byte.b	$3C
   6585  7265		       da		      .byte.b	$DA
   6586  7266		       da		      .byte.b	$DA
   6587  7267		       da		      .byte.b	$DA
   6588  7268		       da		      .byte.b	$DA
   6589  7269		       da		      .byte.b	$DA
   6590  726a		       9c		      .byte.b	$9C
   6591  726b		       9c		      .byte.b	$9C
   6592  726c		       9c		      .byte.b	$9C
   6593  726d		       9c		      .byte.b	$9C
   6594  726e		       9c		      .byte.b	$9C
   6595  726f		       26		      .byte.b	$26
   6596  7270		       26		      .byte.b	$26
   6597  7271				   playerL055_0
   6598  7271		       3c		      .byte.b	%00111100
   6599  7272		       7e		      .byte.b	%01111110
   6600  7273		       7e		      .byte.b	%01111110
   6601  7274		       5a		      .byte.b	%01011010
   6602  7275		       7e		      .byte.b	%01111110
   6603  7276		       5a		      .byte.b	%01011010
   6604  7277		       24		      .byte.b	%00100100
   6605  7278		       18		      .byte.b	%00011000
   6606  7279		       3c		      .byte.b	%00111100
   6607  727a		       7e		      .byte.b	%01111110
   6608  727b		       5a		      .byte.b	%01011010
   6609  727c		       5a		      .byte.b	%01011010
   6610  727d		       5a		      .byte.b	%01011010
   6611  727e		       18		      .byte.b	%00011000
   6612  727f		       3c		      .byte.b	%00111100
   6613  7280		       3c		      .byte.b	%00111100
   6614  7281		       24		      .byte.b	%00100100
   6615  7282		       24		      .byte.b	%00100100
   6616  7283		       66		      .byte.b	%01100110
   6617  7284		       66		      .byte.b	%01100110
   6618  7285				   player3then_0
   6619  7285		       1c		      .byte.b	%00011100
   6620  7286		       3e		      .byte.b	%00111110
   6621  7287		       3e		      .byte.b	%00111110
   6622  7288		       5e		      .byte.b	%01011110
   6623  7289		       7e		      .byte.b	%01111110
   6624  728a		       3e		      .byte.b	%00111110
   6625  728b		       3c		      .byte.b	%00111100
   6626  728c		       18		      .byte.b	%00011000
   6627  728d		       5e		      .byte.b	%01011110
   6628  728e		       5e		      .byte.b	%01011110
   6629  728f		       3d		      .byte.b	%00111101
   6630  7290		       3d		      .byte.b	%00111101
   6631  7291		       1c		      .byte.b	%00011100
   6632  7292		       1c		      .byte.b	%00011100
   6633  7293		       3e		      .byte.b	%00111110
   6634  7294		       3e		      .byte.b	%00111110
   6635  7295		       63		      .byte.b	%01100011
   6636  7296		       63		      .byte.b	%01100011
   6637  7297		       c3		      .byte.b	%11000011
   6638  7298		       c3		      .byte.b	%11000011
   6639  7299				   player6then_0
   6640  7299		       3c		      .byte.b	%00111100
   6641  729a		       7e		      .byte.b	%01111110
   6642  729b		       7e		      .byte.b	%01111110
   6643  729c		       5a		      .byte.b	%01011010
   6644  729d		       7e		      .byte.b	%01111110
   6645  729e		       5a		      .byte.b	%01011010
   6646  729f		       24		      .byte.b	%00100100
   6647  72a0		       99		      .byte.b	%10011001
   6648  72a1		       7e		      .byte.b	%01111110
   6649  72a2		       7e		      .byte.b	%01111110
   6650  72a3		       18		      .byte.b	%00011000
   6651  72a4		       18		      .byte.b	%00011000
   6652  72a5		       18		      .byte.b	%00011000
   6653  72a6		       18		      .byte.b	%00011000
   6654  72a7		       3c		      .byte.b	%00111100
   6655  72a8		       3c		      .byte.b	%00111100
   6656  72a9		       24		      .byte.b	%00100100
   6657  72aa		       24		      .byte.b	%00100100
   6658  72ab		       66		      .byte.b	%01100110
   6659  72ac		       66		      .byte.b	%01100110
   6660  72ad				   playerL075_0
   6661  72ad		       1c		      .byte.b	%00011100
   6662  72ae		       3e		      .byte.b	%00111110
   6663  72af		       3e		      .byte.b	%00111110
   6664  72b0		       5e		      .byte.b	%01011110
   6665  72b1		       7e		      .byte.b	%01111110
   6666  72b2		       3e		      .byte.b	%00111110
   6667  72b3		       3c		      .byte.b	%00111100
   6668  72b4		       18		      .byte.b	%00011000
   6669  72b5		       5e		      .byte.b	%01011110
   6670  72b6		       5e		      .byte.b	%01011110
   6671  72b7		       3d		      .byte.b	%00111101
   6672  72b8		       3d		      .byte.b	%00111101
   6673  72b9		       1c		      .byte.b	%00011100
   6674  72ba		       1c		      .byte.b	%00011100
   6675  72bb		       3e		      .byte.b	%00111110
   6676  72bc		       3e		      .byte.b	%00111110
   6677  72bd		       63		      .byte.b	%01100011
   6678  72be		       63		      .byte.b	%01100011
   6679  72bf		       c3		      .byte.b	%11000011
   6680  72c0		       c3		      .byte.b	%11000011
   6681  72c1				   player22then_0
   6682  72c1		       3c		      .byte.b	%00111100
   6683  72c2		       7e		      .byte.b	%01111110
   6684  72c3		       7e		      .byte.b	%01111110
   6685  72c4		       5a		      .byte.b	%01011010
   6686  72c5		       7e		      .byte.b	%01111110
   6687  72c6		       5a		      .byte.b	%01011010
   6688  72c7		       a5		      .byte.b	%10100101
   6689  72c8		       99		      .byte.b	%10011001
   6690  72c9		       7e		      .byte.b	%01111110
   6691  72ca		       7e		      .byte.b	%01111110
   6692  72cb		       18		      .byte.b	%00011000
   6693  72cc		       18		      .byte.b	%00011000
   6694  72cd		       18		      .byte.b	%00011000
   6695  72ce		       18		      .byte.b	%00011000
   6696  72cf		       3c		      .byte.b	%00111100
   6697  72d0		       3c		      .byte.b	%00111100
   6698  72d1		       24		      .byte.b	%00100100
   6699  72d2		       24		      .byte.b	%00100100
   6700  72d3		       66		      .byte.b	%01100110
   6701  72d4		       66		      .byte.b	%01100110
   6702  72d5				   playercolorL096_0
   6703  72d5		       00		      .byte.b	$00
   6704  72d6		       00		      .byte.b	$00
   6705  72d7		       00		      .byte.b	$00
   6706  72d8		       00		      .byte.b	$00
   6707  72d9		       26		      .byte.b	$26
   6708  72da		       26		      .byte.b	$26
   6709  72db		       3c		      .byte.b	$3C
   6710  72dc		       3c		      .byte.b	$3C
   6711  72dd		       3c		      .byte.b	$3C
   6712  72de		       3c		      .byte.b	$3C
   6713  72df		       3c		      .byte.b	$3C
   6714  72e0		       3c		      .byte.b	$3C
   6715  72e1		       da		      .byte.b	$DA
   6716  72e2		       da		      .byte.b	$DA
   6717  72e3		       da		      .byte.b	$DA
   6718  72e4		       da		      .byte.b	$DA
   6719  72e5		       9c		      .byte.b	$9C
   6720  72e6		       9c		      .byte.b	$9C
   6721  72e7		       26		      .byte.b	$26
   6722  72e8		       26		      .byte.b	$26
   6723  72e9				   playerL097_0
   6724  72e9		       00		      .byte.b	%00000000
   6725  72ea		       00		      .byte.b	%00000000
   6726  72eb		       00		      .byte.b	%00000000
   6727  72ec		       00		      .byte.b	%00000000
   6728  72ed		       3c		      .byte.b	%00111100
   6729  72ee		       7e		      .byte.b	%01111110
   6730  72ef		       7e		      .byte.b	%01111110
   6731  72f0		       5a		      .byte.b	%01011010
   6732  72f1		       7e		      .byte.b	%01111110
   6733  72f2		       5a		      .byte.b	%01011010
   6734  72f3		       24		      .byte.b	%00100100
   6735  72f4		       18		      .byte.b	%00011000
   6736  72f5		       3c		      .byte.b	%00111100
   6737  72f6		       7e		      .byte.b	%01111110
   6738  72f7		       db		      .byte.b	%11011011
   6739  72f8		       99		      .byte.b	%10011001
   6740  72f9		       7e		      .byte.b	%01111110
   6741  72fa		       7e		      .byte.b	%01111110
   6742  72fb		       66		      .byte.b	%01100110
   6743  72fc		       66		      .byte.b	%01100110
   6744  72fd				   playercolorL0120_0
   6745  72fd		       26		      .byte.b	$26
   6746  72fe		       26		      .byte.b	$26
   6747  72ff		       3c		      .byte.b	$3C
   6748  7300		       3c		      .byte.b	$3C
   6749  7301		       3c		      .byte.b	$3C
   6750  7302		       3c		      .byte.b	$3C
   6751  7303		       3c		      .byte.b	$3C
   6752  7304		       3c		      .byte.b	$3C
   6753  7305		       da		      .byte.b	$DA
   6754  7306		       da		      .byte.b	$DA
   6755  7307		       da		      .byte.b	$DA
   6756  7308		       da		      .byte.b	$DA
   6757  7309		       da		      .byte.b	$DA
   6758  730a		       9c		      .byte.b	$9C
   6759  730b		       9c		      .byte.b	$9C
   6760  730c		       9c		      .byte.b	$9C
   6761  730d		       9c		      .byte.b	$9C
   6762  730e		       9c		      .byte.b	$9C
   6763  730f		       26		      .byte.b	$26
   6764  7310		       26		      .byte.b	$26
   6765  7311				   playerL0131_0
   6766  7311		       70		      .byte.b	%01110000
   6767  7312		       f8		      .byte.b	%11111000
   6768  7313		       f8		      .byte.b	%11111000
   6769  7314		       f4		      .byte.b	%11110100
   6770  7315		       fc		      .byte.b	%11111100
   6771  7316		       f8		      .byte.b	%11111000
   6772  7317		       78		      .byte.b	%01111000
   6773  7318		       30		      .byte.b	%00110000
   6774  7319		       7c		      .byte.b	%01111100
   6775  731a		       7c		      .byte.b	%01111100
   6776  731b		       ba		      .byte.b	%10111010
   6777  731c		       ba		      .byte.b	%10111010
   6778  731d		       18		      .byte.b	%00011000
   6779  731e		       18		      .byte.b	%00011000
   6780  731f		       1c		      .byte.b	%00011100
   6781  7320		       1c		      .byte.b	%00011100
   6782  7321		       36		      .byte.b	%00110110
   6783  7322		       36		      .byte.b	%00110110
   6784  7323		       63		      .byte.b	%01100011
   6785  7324		       63		      .byte.b	%01100011
   6786  7325				   playercolorL0132_0
   6787  7325		       26		      .byte.b	$26
   6788  7326		       26		      .byte.b	$26
   6789  7327		       3c		      .byte.b	$3C
   6790  7328		       3c		      .byte.b	$3C
   6791  7329		       3c		      .byte.b	$3C
   6792  732a		       3c		      .byte.b	$3C
   6793  732b		       3c		      .byte.b	$3C
   6794  732c		       3c		      .byte.b	$3C
   6795  732d		       da		      .byte.b	$DA
   6796  732e		       da		      .byte.b	$DA
   6797  732f		       da		      .byte.b	$DA
   6798  7330		       da		      .byte.b	$DA
   6799  7331		       da		      .byte.b	$DA
   6800  7332		       9c		      .byte.b	$9C
   6801  7333		       9c		      .byte.b	$9C
   6802  7334		       9c		      .byte.b	$9C
   6803  7335		       9c		      .byte.b	$9C
   6804  7336		       9c		      .byte.b	$9C
   6805  7337		       26		      .byte.b	$26
   6806  7338		       26		      .byte.b	$26
   6807  7339				   playerL0192_0
   6808  7339		       1c		      .byte.b	%00011100
   6809  733a		       3e		      .byte.b	%00111110
   6810  733b		       3e		      .byte.b	%00111110
   6811  733c		       5e		      .byte.b	%01011110
   6812  733d		       7e		      .byte.b	%01111110
   6813  733e		       3e		      .byte.b	%00111110
   6814  733f		       3c		      .byte.b	%00111100
   6815  7340		       18		      .byte.b	%00011000
   6816  7341		       1c		      .byte.b	%00011100
   6817  7342		       1c		      .byte.b	%00011100
   6818  7343		       3c		      .byte.b	%00111100
   6819  7344		       3c		      .byte.b	%00111100
   6820  7345		       1c		      .byte.b	%00011100
   6821  7346		       1c		      .byte.b	%00011100
   6822  7347		       3c		      .byte.b	%00111100
   6823  7348		       3c		      .byte.b	%00111100
   6824  7349		       26		      .byte.b	%00100110
   6825  734a		       26		      .byte.b	%00100110
   6826  734b		       66		      .byte.b	%01100110
   6827  734c		       66		      .byte.b	%01100110
   6828  734d				   playerL0194_0
   6829  734d		       1c		      .byte.b	%00011100
   6830  734e		       3e		      .byte.b	%00111110
   6831  734f		       3e		      .byte.b	%00111110
   6832  7350		       5e		      .byte.b	%01011110
   6833  7351		       7e		      .byte.b	%01111110
   6834  7352		       3e		      .byte.b	%00111110
   6835  7353		       3c		      .byte.b	%00111100
   6836  7354		       18		      .byte.b	%00011000
   6837  7355		       5e		      .byte.b	%01011110
   6838  7356		       5e		      .byte.b	%01011110
   6839  7357		       3d		      .byte.b	%00111101
   6840  7358		       3d		      .byte.b	%00111101
   6841  7359		       1c		      .byte.b	%00011100
   6842  735a		       1c		      .byte.b	%00011100
   6843  735b		       3e		      .byte.b	%00111110
   6844  735c		       3e		      .byte.b	%00111110
   6845  735d		       63		      .byte.b	%01100011
   6846  735e		       63		      .byte.b	%01100011
   6847  735f		       c3		      .byte.b	%11000011
   6848  7360		       c3		      .byte.b	%11000011
   6849  7361				   playerL0196_0
   6850  7361		       1c		      .byte.b	%00011100
   6851  7362		       3e		      .byte.b	%00111110
   6852  7363		       3e		      .byte.b	%00111110
   6853  7364		       5e		      .byte.b	%01011110
   6854  7365		       7e		      .byte.b	%01111110
   6855  7366		       3e		      .byte.b	%00111110
   6856  7367		       3c		      .byte.b	%00111100
   6857  7368		       18		      .byte.b	%00011000
   6858  7369		       1c		      .byte.b	%00011100
   6859  736a		       1c		      .byte.b	%00011100
   6860  736b		       1c		      .byte.b	%00011100
   6861  736c		       1c		      .byte.b	%00011100
   6862  736d		       1c		      .byte.b	%00011100
   6863  736e		       1c		      .byte.b	%00011100
   6864  736f		       1c		      .byte.b	%00011100
   6865  7370		       1c		      .byte.b	%00011100
   6866  7371		       1c		      .byte.b	%00011100
   6867  7372		       1c		      .byte.b	%00011100
   6868  7373		       3c		      .byte.b	%00111100
   6869  7374		       3c		      .byte.b	%00111100
   6870  7375					      if	ECHOFIRST
      3167 bytes of ROM space left in graphics bank
   6871  7375					      echo	"    ",[(DPC_graphics_end - *)]d , "bytes of ROM space left in graphics bank")
   6872  7375					      endif
   6873  7375		       00 01	   ECHOFIRST  =	1
   6874  7375
   6875  7375
   6876  7375							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6877  7375
   6878  7fd4					      ORG	$7FF4-bscode_length
   6879  7fd4					      RORG	$DFF4-bscode_length
   6880  7fd4				   DPC_graphics_end
   6881  7fd4
   6882  7fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6883  7fd4
   6884  7fd4							; every bank has this stuff at the same place
   6885  7fd4							; this code can switch to/from any bank at any entry point
   6886  7fd4							; and can preserve register values
   6887  7fd4							; note: lines not starting with a space are not placed in all banks
   6888  7fd4							;
   6889  7fd4							; line below tells the compiler how long this is - do not remove
   6890  7fd4							;size=32
   6891  7fd4
   6892  7fd4				   begin_bscode
   6893  7fd4		       a2 ff		      ldx	#$ff
   6894  7fd6					      ifconst	FASTFETCH	; using DPC+
   6895  7fd6		       8e 58 10 	      stx	FASTFETCH
   6896  7fd9					      endif
   6897  7fd9		       9a		      txs
   6898  7fda				  -	      if	bankswitch == 64
   6899  7fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6900  7fda					      else
   6901  7fda		       a9 18		      lda	#>(start-1)
   6902  7fdc					      endif
   6903  7fdc		       48		      pha
   6904  7fdd		       a9 e3		      lda	#<(start-1)
   6905  7fdf		       48		      pha
   6906  7fe0
   6907  7fe0				   BS_return
   6908  7fe0		       48		      pha
   6909  7fe1		       8a		      txa
   6910  7fe2		       48		      pha
   6911  7fe3		       ba		      tsx
   6912  7fe4
   6913  7fe4					      if	bankswitch != 64
   6914  7fe4		       b5 04		      lda	4,x	; get high byte of return address
   6915  7fe6
   6916  7fe6		       2a		      rol
   6917  7fe7		       2a		      rol
   6918  7fe8		       2a		      rol
   6919  7fe9		       2a		      rol
   6920  7fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6921  7fec		       aa		      tax
   6922  7fed		       e8		      inx
   6923  7fee				  -	      else
   6924  7fee				  -	      lda	4,x	; get high byte of return address
   6925  7fee				  -	      tay
   6926  7fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6927  7fee				  -	      sta	4,x
   6928  7fee				  -	      tya
   6929  7fee				  -	      lsr
   6930  7fee				  -	      lsr
   6931  7fee				  -	      lsr
   6932  7fee				  -	      lsr
   6933  7fee				  -	      tax
   6934  7fee				  -	      inx
   6935  7fee					      endif
   6936  7fee
   6937  7fee				   BS_jsr
   6938  7fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6939  7ff1		       68		      pla
   6940  7ff2		       aa		      tax
   6941  7ff3		       68		      pla
   6942  7ff4		       60		      rts
   6943  7ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6944  7ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6945  7ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6946  7ff5					      endif
   6947  7ff5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6948  7ff5
   6949  8000					      org	$8000
   6950  8000					      rorg	$1000
   6951  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6952  8000
   6953  8000							; 1K Frequency Table.
   6954  8000							; Fred Quimby, Darrell Spice Jr, Chris Walton 2010
   6955  8000							;
   6956  8000							; The 1K Frequency Table can contain up to 256 frequency values
   6957  8000							;
   6958  8000							; Table entries are defined as 2^32*freq/20000
   6959  8000							;
   6960  8000							; If User ARM code is being used, then the last 512 bytes of the frequency
   6961  8000							; table will no longer be available, reducing the number of frequencies you can
   6962  8000							; use to 128.
   6963  8000
   6964  8000							; piano key frequencies (s = sharp)
   6965  8000
   6966  8000				   .freq_table_start
   6967  8000
   6968  8000		       00 00 00 00	      DC.L	0
   6969  8000		       00 01	   A0	      =	(* & $3ff)/4
   6970  8004		       ac 1c 5a 00	      DC.L	5905580
   6971  8008
   6972  8008		       00 02	   A0s	      =	(* & $3ff)/4
   6973  8008		       68 78 5f 00	      DC.L	6256744
   6974  800c
   6975  800c		       00 03	   B0	      =	(* & $3ff)/4
   6976  800c		       b5 25 65 00	      DC.L	6628789
   6977  8010
   6978  8010		       00 04	   C1	      =	(* & $3ff)/4
   6979  8010		       6e 29 6b 00	      DC.L	7022958
   6980  8014
   6981  8014		       00 05	   C1s	      =	(* & $3ff)/4
   6982  8014		       b5 88 71 00	      DC.L	7440565
   6983  8018
   6984  8018		       00 06	   D1	      =	(* & $3ff)/4
   6985  8018		       fc 48 78 00	      DC.L	7883004
   6986  801c
   6987  801c		       00 07	   D1s	      =	(* & $3ff)/4
   6988  801c		       07 70 7f 00	      DC.L	8351751
   6989  8020
   6990  8020		       00 08	   E1	      =	(* & $3ff)/4
   6991  8020		       f4 03 87 00	      DC.L	8848372
   6992  8024
   6993  8024		       00 09	   F1	      =	(* & $3ff)/4
   6994  8024		       3c 0b 8f 00	      DC.L	9374524
   6995  8028
   6996  8028		       00 0a	   F1s	      =	(* & $3ff)/4
   6997  8028		       ba 8c 97 00	      DC.L	9931962
   6998  802c
   6999  802c		       00 0b	   G1	      =	(* & $3ff)/4
   7000  802c		       b3 8f a0 00	      DC.L	10522547
   7001  8030
   7002  8030		       00 0c	   G1s	      =	(* & $3ff)/4
   7003  8030		       db 1b aa 00	      DC.L	11148251
   7004  8034
   7005  8034		       00 0d	   A1	      =	(* & $3ff)/4
   7006  8034		       58 39 b4 00	      DC.L	11811160
   7007  8038
   7008  8038		       00 0e	   A1s	      =	(* & $3ff)/4
   7009  8038		       d0 f0 be 00	      DC.L	12513488
   7010  803c
   7011  803c		       00 0f	   B1	      =	(* & $3ff)/4
   7012  803c		       6b 4b ca 00	      DC.L	13257579
   7013  8040
   7014  8040		       00 10	   C2	      =	(* & $3ff)/4
   7015  8040		       dc 52 d6 00	      DC.L	14045916
   7016  8044
   7017  8044		       00 11	   C2s	      =	(* & $3ff)/4
   7018  8044		       69 11 e3 00	      DC.L	14881129
   7019  8048
   7020  8048		       00 12	   D2	      =	(* & $3ff)/4
   7021  8048		       f7 91 f0 00	      DC.L	15766007
   7022  804c
   7023  804c		       00 13	   D2s	      =	(* & $3ff)/4
   7024  804c		       0f e0 fe 00	      DC.L	16703503
   7025  8050
   7026  8050		       00 14	   E2	      =	(* & $3ff)/4
   7027  8050		       e9 07 0e 01	      DC.L	17696745
   7028  8054
   7029  8054		       00 15	   F2	      =	(* & $3ff)/4
   7030  8054		       78 16 1e 01	      DC.L	18749048
   7031  8058
   7032  8058		       00 16	   F2s	      =	(* & $3ff)/4
   7033  8058		       74 19 2f 01	      DC.L	19863924
   7034  805c
   7035  805c		       00 17	   G2	      =	(* & $3ff)/4
   7036  805c		       67 1f 41 01	      DC.L	21045095
   7037  8060
   7038  8060		       00 18	   G2s	      =	(* & $3ff)/4
   7039  8060		       b5 37 54 01	      DC.L	22296501
   7040  8064
   7041  8064		       00 19	   A2	      =	(* & $3ff)/4
   7042  8064		       b0 72 68 01	      DC.L	23622320
   7043  8068
   7044  8068		       00 1a	   A2s	      =	(* & $3ff)/4
   7045  8068		       a0 e1 7d 01	      DC.L	25026976
   7046  806c
   7047  806c		       00 1b	   B2	      =	(* & $3ff)/4
   7048  806c		       d6 96 94 01	      DC.L	26515158
   7049  8070
   7050  8070		       00 1c	   C3	      =	(* & $3ff)/4
   7051  8070		       b7 a5 ac 01	      DC.L	28091831
   7052  8074
   7053  8074		       00 1d	   C3s	      =	(* & $3ff)/4
   7054  8074		       d2 22 c6 01	      DC.L	29762258
   7055  8078
   7056  8078		       00 1e	   D3	      =	(* & $3ff)/4
   7057  8078		       ee 23 e1 01	      DC.L	31532014
   7058  807c
   7059  807c		       00 1f	   D3s	      =	(* & $3ff)/4
   7060  807c		       1d c0 fd 01	      DC.L	33407005
   7061  8080
   7062  8080		       00 20	   E3	      =	(* & $3ff)/4
   7063  8080		       d1 0f 1c 02	      DC.L	35393489
   7064  8084
   7065  8084		       00 21	   F3	      =	(* & $3ff)/4
   7066  8084		       f0 2c 3c 02	      DC.L	37498096
   7067  8088
   7068  8088		       00 22	   F3s	      =	(* & $3ff)/4
   7069  8088		       e9 32 5e 02	      DC.L	39727849
   7070  808c
   7071  808c		       00 23	   G3	      =	(* & $3ff)/4
   7072  808c		       cd 3e 82 02	      DC.L	42090189
   7073  8090
   7074  8090		       00 24	   G3s	      =	(* & $3ff)/4
   7075  8090		       6a 6f a8 02	      DC.L	44593002
   7076  8094
   7077  8094		       00 25	   A3	      =	(* & $3ff)/4
   7078  8094		       60 e5 d0 02	      DC.L	47244640
   7079  8098
   7080  8098		       00 26	   A3s	      =	(* & $3ff)/4
   7081  8098		       41 c3 fb 02	      DC.L	50053953
   7082  809c
   7083  809c		       00 27	   B3	      =	(* & $3ff)/4
   7084  809c		       ac 2d 29 03	      DC.L	53030316
   7085  80a0
   7086  80a0		       00 28	   C4	      =	(* & $3ff)/4
   7087  80a0		       6e 4b 59 03	      DC.L	56183662
   7088  80a4
   7089  80a4		       00 29	   C4s	      =	(* & $3ff)/4
   7090  80a4		       a5 45 8c 03	      DC.L	59524517
   7091  80a8
   7092  80a8		       00 2a	   D4	      =	(* & $3ff)/4
   7093  80a8		       dd 47 c2 03	      DC.L	63064029
   7094  80ac
   7095  80ac		       00 2b	   D4s	      =	(* & $3ff)/4
   7096  80ac		       3b 80 fb 03	      DC.L	66814011
   7097  80b0
   7098  80b0		       00 2c	   E4	      =	(* & $3ff)/4
   7099  80b0		       a3 1f 38 04	      DC.L	70786979
   7100  80b4
   7101  80b4		       00 2d	   F4	      =	(* & $3ff)/4
   7102  80b4		       e0 59 78 04	      DC.L	74996192
   7103  80b8
   7104  80b8		       00 2e	   F4s	      =	(* & $3ff)/4
   7105  80b8		       d1 65 bc 04	      DC.L	79455697
   7106  80bc
   7107  80bc		       00 2f	   G4	      =	(* & $3ff)/4
   7108  80bc		       9b 7d 04 05	      DC.L	84180379
   7109  80c0
   7110  80c0		       00 30	   G4s	      =	(* & $3ff)/4
   7111  80c0		       d5 de 50 05	      DC.L	89186005
   7112  80c4
   7113  80c4		       00 31	   A4	      =	(* & $3ff)/4
   7114  80c4		       c1 ca a1 05	      DC.L	94489281
   7115  80c8
   7116  80c8		       00 32	   A4s	      =	(* & $3ff)/4
   7117  80c8		       82 86 f7 05	      DC.L	100107906
   7118  80cc
   7119  80cc		       00 33	   B4	      =	(* & $3ff)/4
   7120  80cc		       57 5b 52 06	      DC.L	106060631
   7121  80d0
   7122  80d0		       00 34	   C5	      =	(* & $3ff)/4
   7123  80d0		       dd 96 b2 06	      DC.L	112367325
   7124  80d4
   7125  80d4		       00 35	   C5s	      =	(* & $3ff)/4
   7126  80d4		       4a 8b 18 07	      DC.L	119049034
   7127  80d8
   7128  80d8		       00 36	   D5	      =	(* & $3ff)/4
   7129  80d8		       b9 8f 84 07	      DC.L	126128057
   7130  80dc
   7131  80dc		       00 37	   D5s	      =	(* & $3ff)/4
   7132  80dc		       76 00 f7 07	      DC.L	133628022
   7133  80e0
   7134  80e0		       00 38	   E5	      =	(* & $3ff)/4
   7135  80e0		       46 3f 70 08	      DC.L	141573958
   7136  80e4
   7137  80e4		       00 39	   F5	      =	(* & $3ff)/4
   7138  80e4		       bf b3 f0 08	      DC.L	149992383
   7139  80e8
   7140  80e8		       00 3a	   F5s	      =	(* & $3ff)/4
   7141  80e8		       a3 cb 78 09	      DC.L	158911395
   7142  80ec
   7143  80ec		       00 3b	   G5	      =	(* & $3ff)/4
   7144  80ec		       36 fb 08 0a	      DC.L	168360758
   7145  80f0
   7146  80f0		       00 3c	   G5s	      =	(* & $3ff)/4
   7147  80f0		       a9 bd a1 0a	      DC.L	178372009
   7148  80f4
   7149  80f4		       00 3d	   A5	      =	(* & $3ff)/4
   7150  80f4		       81 95 43 0b	      DC.L	188978561
   7151  80f8
   7152  80f8		       00 3e	   A5s	      =	(* & $3ff)/4
   7153  80f8		       03 0d ef 0b	      DC.L	200215811
   7154  80fc
   7155  80fc		       00 3f	   B5	      =	(* & $3ff)/4
   7156  80fc		       af b6 a4 0c	      DC.L	212121263
   7157  8100
   7158  8100		       00 40	   C6	      =	(* & $3ff)/4
   7159  8100		       b9 2d 65 0d	      DC.L	224734649
   7160  8104
   7161  8104		       00 41	   C6s	      =	(* & $3ff)/4
   7162  8104		       93 16 31 0e	      DC.L	238098067
   7163  8108
   7164  8108		       00 42	   D6	      =	(* & $3ff)/4
   7165  8108		       73 1f 09 0f	      DC.L	252256115
   7166  810c
   7167  810c		       00 43	   D6s	      =	(* & $3ff)/4
   7168  810c		       ec 00 ee 0f	      DC.L	267256044
   7169  8110
   7170  8110		       00 44	   E6	      =	(* & $3ff)/4
   7171  8110		       8b 7e e0 10	      DC.L	283147915
   7172  8114
   7173  8114		       00 45	   F6	      =	(* & $3ff)/4
   7174  8114		       7f 67 e1 11	      DC.L	299984767
   7175  8118
   7176  8118		       00 46	   F6s	      =	(* & $3ff)/4
   7177  8118		       45 97 f1 12	      DC.L	317822789
   7178  811c
   7179  811c		       00 47	   G6	      =	(* & $3ff)/4
   7180  811c		       6c f6 11 14	      DC.L	336721516
   7181  8120
   7182  8120		       00 48	   G6s	      =	(* & $3ff)/4
   7183  8120		       53 7b 43 15	      DC.L	356744019
   7184  8124
   7185  8124		       00 49	   A6	      =	(* & $3ff)/4
   7186  8124		       02 2b 87 16	      DC.L	377957122
   7187  8128
   7188  8128		       00 4a	   A6s	      =	(* & $3ff)/4
   7189  8128		       06 1a de 17	      DC.L	400431622
   7190  812c
   7191  812c		       00 4b	   B6	      =	(* & $3ff)/4
   7192  812c		       5d 6d 49 19	      DC.L	424242525
   7193  8130
   7194  8130		       00 4c	   C7	      =	(* & $3ff)/4
   7195  8130		       73 5b ca 1a	      DC.L	449469299
   7196  8134
   7197  8134		       00 4d	   C7s	      =	(* & $3ff)/4
   7198  8134		       26 2d 62 1c	      DC.L	476196134
   7199  8138
   7200  8138		       00 4e	   D7	      =	(* & $3ff)/4
   7201  8138		       e6 3e 12 1e	      DC.L	504512230
   7202  813c
   7203  813c		       00 4f	   D7s	      =	(* & $3ff)/4
   7204  813c		       d8 01 dc 1f	      DC.L	534512088
   7205  8140
   7206  8140		       00 50	   E7	      =	(* & $3ff)/4
   7207  8140		       17 fd c0 21	      DC.L	566295831
   7208  8144
   7209  8144		       00 51	   F7	      =	(* & $3ff)/4
   7210  8144		       fd ce c2 23	      DC.L	599969533
   7211  8148
   7212  8148		       00 52	   F7s	      =	(* & $3ff)/4
   7213  8148		       8a 2e e3 25	      DC.L	635645578
   7214  814c
   7215  814c		       00 53	   G7	      =	(* & $3ff)/4
   7216  814c		       d7 ec 23 28	      DC.L	673443031
   7217  8150
   7218  8150		       00 54	   G7s	      =	(* & $3ff)/4
   7219  8150		       a6 f6 86 2a	      DC.L	713488038
   7220  8154
   7221  8154		       00 55	   A7	      =	(* & $3ff)/4
   7222  8154		       04 56 0e 2d	      DC.L	755914244
   7223  8158
   7224  8158		       00 56	   A7s	      =	(* & $3ff)/4
   7225  8158		       0c 34 bc 2f	      DC.L	800863244
   7226  815c
   7227  815c		       00 57	   B7	      =	(* & $3ff)/4
   7228  815c		       bb da 92 32	      DC.L	848485051
   7229  8160
   7230  8160		       00 58	   C8	      =	(* & $3ff)/4
   7231  8160		       e5 b6 94 35	      DC.L	898938597
   7232  8164
   7233  8164							;values for 89-255 may go here 
   7234  8164
   7235  8164					      if	(* <= $1400)
   7236  8164		       00 00 00 00*	      ds	($1400-*)	; pad out remaining space in frequency table
   7237  8400				  -	      else
   7238  8400				  -	      echo	"FATAL ERROR - Frequency table exceeds 1K"
   7239  8400				  -	      err
   7240  8400					      endif

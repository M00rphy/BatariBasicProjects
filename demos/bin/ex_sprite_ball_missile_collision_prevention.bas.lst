------- FILE e:\Documents\bB\demos\ex_sprite_ball_missile_collision_prevention.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE e:\Documents\bB\demos\ex_sprite_ball_missile_collision_prevention.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE e:\Documents\bB\demos\ex_sprite_ball_missile_collision_prevention.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    noscore    =	1
      4  10000 ????
      5  10000 ????		00 9f	    _M_Edge_Right =	159
      6  10000 ????
      7  10000 ????		00 02	    _M_Edge_Left =	2
      8  10000 ????
      9  10000 ????		00 58	    _M_Edge_Bottom =	88
     10  10000 ????
     11  10000 ????		00 02	    _M_Edge_Top =	2
     12  10000 ????
     13  10000 ????		00 a0	    _B_Edge_Right =	160
     14  10000 ????
     15  10000 ????		00 02	    _B_Edge_Left =	2
     16  10000 ????
     17  10000 ????		00 58	    _B_Edge_Bottom =	88
     18  10000 ????
     19  10000 ????		00 02	    _B_Edge_Top =	2
     20  10000 ????
     21  10000 ????		00 99	    _P_Edge_Right =	153
     22  10000 ????
     23  10000 ????		00 01	    _P_Edge_Left =	1
     24  10000 ????
     25  10000 ????		00 58	    _P_Edge_Bottom =	88
     26  10000 ????
     27  10000 ????		00 09	    _P_Edge_Top =	9
     28  10000 ????
     29  10000 ????		00 ed	    rand16     =	z
     30  10000 ????
     31  10000 ????		00 ec	    _Bit7_M0_Moving =	y
     32  10000 ????
     33  10000 ????		00 ec	    _Bit4_Toggle_Screen =	y
     34  10000 ????
     35  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     36  10000 ????
     37  10000 ????		00 ec	    _BitOp_01  =	y
     38  10000 ????
     39  10000 ????		00 84	    _B_X       =	ballx
     40  10000 ????		00 89	    _B_Y       =	bally
     41  10000 ????		00 db	    _Bit4_Ball_Hit_UD =	h
     42  10000 ????
     43  10000 ????		00 db	    _Bit3_Ball_Dir_Right =	h
     44  10000 ????
     45  10000 ????		00 db	    _Bit2_Ball_Dir_Left =	h
     46  10000 ????
     47  10000 ????		00 db	    _Bit1_Ball_Dir_Down =	h
     48  10000 ????
     49  10000 ????		00 db	    _Bit0_Ball_Dir_Up =	h
     50  10000 ????
     51  10000 ????		00 db	    _BitOp_Ball_Dir =	h
     52  10000 ????
     53  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     54  10000 ????
     55  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     56  10000 ????
     57  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     58  10000 ????
     59  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     60  10000 ????
     61  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     62  10000 ????
     63  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     64  10000 ????
     65  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     66  10000 ????
     67  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     68  10000 ????
     69  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     70  10000 ????
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE e:\Documents\bB\demos\ex_sprite_ball_missile_collision_prevention.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    noscore    =	1
      4  10000 ????
      5  10000 ????		00 9f	    _M_Edge_Right =	159
      6  10000 ????
      7  10000 ????		00 02	    _M_Edge_Left =	2
      8  10000 ????
      9  10000 ????		00 58	    _M_Edge_Bottom =	88
     10  10000 ????
     11  10000 ????		00 02	    _M_Edge_Top =	2
     12  10000 ????
     13  10000 ????		00 a0	    _B_Edge_Right =	160
     14  10000 ????
     15  10000 ????		00 02	    _B_Edge_Left =	2
     16  10000 ????
     17  10000 ????		00 58	    _B_Edge_Bottom =	88
     18  10000 ????
     19  10000 ????		00 02	    _B_Edge_Top =	2
     20  10000 ????
     21  10000 ????		00 99	    _P_Edge_Right =	153
     22  10000 ????
     23  10000 ????		00 01	    _P_Edge_Left =	1
     24  10000 ????
     25  10000 ????		00 58	    _P_Edge_Bottom =	88
     26  10000 ????
     27  10000 ????		00 09	    _P_Edge_Top =	9
     28  10000 ????
     29  10000 ????		00 ed	    rand16     =	z
     30  10000 ????
     31  10000 ????		00 ec	    _Bit7_M0_Moving =	y
     32  10000 ????
     33  10000 ????		00 ec	    _Bit4_Toggle_Screen =	y
     34  10000 ????
     35  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     36  10000 ????
     37  10000 ????		00 ec	    _BitOp_01  =	y
     38  10000 ????
     39  10000 ????		00 84	    _B_X       =	ballx
     40  10000 ????		00 89	    _B_Y       =	bally
     41  10000 ????		00 db	    _Bit4_Ball_Hit_UD =	h
     42  10000 ????
     43  10000 ????		00 db	    _Bit3_Ball_Dir_Right =	h
     44  10000 ????
     45  10000 ????		00 db	    _Bit2_Ball_Dir_Left =	h
     46  10000 ????
     47  10000 ????		00 db	    _Bit1_Ball_Dir_Down =	h
     48  10000 ????
     49  10000 ????		00 db	    _Bit0_Ball_Dir_Up =	h
     50  10000 ????
     51  10000 ????		00 db	    _BitOp_Ball_Dir =	h
     52  10000 ????
     53  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     54  10000 ????
     55  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     56  10000 ????
     57  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     58  10000 ????
     59  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     60  10000 ????
     61  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     62  10000 ????
     63  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     64  10000 ????
     65  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     66  10000 ????
     67  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     68  10000 ????
     69  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     70  10000 ????
------- FILE e:\Documents\bB\demos\ex_sprite_ball_missile_collision_prevention.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c cc f3 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5				  -	      ifnconst	noscore
    741  f1b5				  -	      lda	scorepointers+1
    742  f1b5				  -			; ldy temp1
    743  f1b5				  -	      sta	temp1
    744  f1b5				  -			; sty scorepointers+1
    745  f1b5				  -
    746  f1b5				  -	      lda	scorepointers+3
    747  f1b5				  -			; ldy temp3
    748  f1b5				  -	      sta	temp3
    749  f1b5				  -			; sty scorepointers+3
    750  f1b5				  -
    751  f1b5				  -
    752  f1b5				  -	      sta	HMCLR
    753  f1b5				  -	      tsx
    754  f1b5				  -	      stx	stack1
    755  f1b5				  -	      ldx	#$E0
    756  f1b5				  -	      stx	HMP0
    757  f1b5				  -
    758  f1b5				  -	      LDA	scorecolor
    759  f1b5				  -	      STA	COLUP0
    760  f1b5				  -	      STA	COLUP1
    761  f1b5				  -	      ifconst	scorefade
    762  f1b5				  -	      STA	stack2
    763  f1b5				  -	      endif
    764  f1b5				  -	      ifconst	pfscore
    765  f1b5				  -	      lda	pfscorecolor
    766  f1b5				  -	      sta	COLUPF
    767  f1b5				  -	      endif
    768  f1b5				  -	      sta	WSYNC
    769  f1b5				  -	      ldx	#0
    770  f1b5				  -	      STx	GRP0
    771  f1b5				  -	      STx	GRP1	; seems to be needed because of vdel
    772  f1b5				  -
    773  f1b5				  -	      lda	scorepointers+5
    774  f1b5				  -			; ldy temp5
    775  f1b5				  -	      sta	temp5,x
    776  f1b5				  -			; sty scorepointers+5
    777  f1b5				  -	      lda	#>scoretable
    778  f1b5				  -	      sta	scorepointers+1
    779  f1b5				  -	      sta	scorepointers+3
    780  f1b5				  -	      sta	scorepointers+5
    781  f1b5				  -	      sta	temp2
    782  f1b5				  -	      sta	temp4
    783  f1b5				  -	      sta	temp6
    784  f1b5				  -	      LDY	#7
    785  f1b5				  -	      STY	VDELP0
    786  f1b5				  -	      STA	RESP0
    787  f1b5				  -	      STA	RESP1
    788  f1b5				  -
    789  f1b5				  -
    790  f1b5				  -	      LDA	#$03
    791  f1b5				  -	      STA	NUSIZ0
    792  f1b5				  -	      STA	NUSIZ1
    793  f1b5				  -	      STA	VDELP1
    794  f1b5				  -	      LDA	#$F0
    795  f1b5				  -	      STA	HMP1
    796  f1b5				  -	      lda	(scorepointers),y
    797  f1b5				  -	      sta	GRP0
    798  f1b5				  -	      STA	HMOVE	; cycle 73 ?
    799  f1b5				  -	      jmp	beginscore
    800  f1b5				  -
    801  f1b5				  -
    802  f1b5				  -	      if	((<*)>$d4)
    803  f1b5				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f1b5				  -	      endif
    805  f1b5				  -
    806  f1b5				  -loop2
    807  f1b5				  -	      lda	(scorepointers),y	;+5 68 204
    808  f1b5				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f1b5				  -	      ifconst	pfscore
    810  f1b5				  -	      lda.w	pfscore1
    811  f1b5				  -	      sta	PF1
    812  f1b5				  -	      else
    813  f1b5				  -	      ifconst	scorefade
    814  f1b5				  -	      sleep	2
    815  f1b5				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f1b5				  -	      else
    817  f1b5				  -	      sleep	7
    818  f1b5				  -	      endif
    819  f1b5				  -	      endif
    820  f1b5				  -			; cycle 0
    821  f1b5				  -beginscore
    822  f1b5				  -	      lda	(scorepointers+$8),y	;+5 5 15
    823  f1b5				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f1b5				  -	      lda	(scorepointers+$6),y	;+5 13 39
    825  f1b5				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f1b5				  -	      lax	(scorepointers+$2),y	;+5 29 87
    827  f1b5				  -	      txs
    828  f1b5				  -	      lax	(scorepointers+$4),y	;+5 36 108
    829  f1b5				  -	      ifconst	scorefade
    830  f1b5				  -	      lda	stack2
    831  f1b5				  -	      else
    832  f1b5				  -	      sleep	3
    833  f1b5				  -	      endif
    834  f1b5				  -
    835  f1b5				  -	      ifconst	pfscore
    836  f1b5				  -	      lda	pfscore2
    837  f1b5				  -	      sta	PF1
    838  f1b5				  -	      else
    839  f1b5				  -	      ifconst	scorefade
    840  f1b5				  -	      sta	COLUP0
    841  f1b5				  -	      sta	COLUP1
    842  f1b5				  -	      else
    843  f1b5				  -	      sleep	6
    844  f1b5				  -	      endif
    845  f1b5				  -	      endif
    846  f1b5				  -
    847  f1b5				  -	      lda	(scorepointers+$A),y	;+5 21 63
    848  f1b5				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f1b5				  -	      tsx
    850  f1b5				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f1b5				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f1b5				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f1b5				  -	      dey
    854  f1b5				  -	      bpl	loop2	;+2 60 180
    855  f1b5				  -
    856  f1b5				  -	      ldx	stack1
    857  f1b5				  -	      txs
    858  f1b5				  -			; lda scorepointers+1
    859  f1b5				  -	      ldy	temp1
    860  f1b5				  -			; sta temp1
    861  f1b5				  -	      sty	scorepointers+1
    862  f1b5				  -
    863  f1b5				  -	      LDA	#0
    864  f1b5				  -	      sta	PF1
    865  f1b5				  -	      STA	GRP0
    866  f1b5				  -	      STA	GRP1
    867  f1b5				  -	      STA	VDELP0
    868  f1b5				  -	      STA	VDELP1	;do we need these
    869  f1b5				  -	      STA	NUSIZ0
    870  f1b5				  -	      STA	NUSIZ1
    871  f1b5				  -
    872  f1b5				  -			; lda scorepointers+3
    873  f1b5				  -	      ldy	temp3
    874  f1b5				  -			; sta temp3
    875  f1b5				  -	      sty	scorepointers+3
    876  f1b5				  -
    877  f1b5				  -			; lda scorepointers+5
    878  f1b5				  -	      ldy	temp5
    879  f1b5				  -			; sta temp5
    880  f1b5				  -	      sty	scorepointers+5
    881  f1b5					      endif		;noscore
    882  f1b5				  -	      ifconst	readpaddle
    883  f1b5				  -	      lda	#%11000010
    884  f1b5					      else
    885  f1b5				  -	      ifconst	qtcontroller
    886  f1b5				  -	      lda	qtcontroller
    887  f1b5				  -	      lsr		; bit 0 in carry
    888  f1b5				  -	      lda	#4
    889  f1b5				  -	      ror		; carry into top of A
    890  f1b5					      else
    891  f1b5		       a9 02		      lda	#2
    892  f1b7					      endif		; qtcontroller
    893  f1b7					      endif		; readpaddle
    894  f1b7		       85 02		      sta	WSYNC
    895  f1b9		       85 01		      sta	VBLANK
      0  f1bb					      RETURN
      1  f1bb					      ifnconst	bankswitch
      2  f1bb		       60		      rts
      3  f1bc				  -	      else
      4  f1bc				  -	      jmp	BS_return
      5  f1bc					      endif
    897  f1bc				  -	      ifconst	shakescreen
    898  f1bc				  -doshakescreen
    899  f1bc				  -	      bit	shakescreen
    900  f1bc				  -	      bmi	noshakescreen
    901  f1bc				  -	      sta	WSYNC
    902  f1bc				  -noshakescreen
    903  f1bc				  -	      ldx	missile0height
    904  f1bc				  -	      inx
    905  f1bc				  -	      rts
    906  f1bc					      endif
    907  f1bc
    908  f1bc							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f1bc
    910  f1bc							; playfield drawing routines
    911  f1bc							; you get a 32x12 bitmapped display in a single color :)
    912  f1bc							; 0-31 and 0-11
    913  f1bc
    914  f1bc				   pfclear		; clears playfield - or fill with pattern
    915  f1bc				  -	      ifconst	pfres
    916  f1bc				  -	      ldx	#pfres*pfwidth-1
    917  f1bc					      else
    918  f1bc		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f1be					      endif
    920  f1be				   pfclear_loop
    921  f1be					      ifnconst	superchip
    922  f1be		       95 a4		      sta	playfield,x
    923  f1c0				  -	      else
    924  f1c0				  -	      sta	playfield-128,x
    925  f1c0					      endif
    926  f1c0		       ca		      dex
    927  f1c1		       10 fb		      bpl	pfclear_loop
      0  f1c3					      RETURN
      1  f1c3					      ifnconst	bankswitch
      2  f1c3		       60		      rts
      3  f1c4				  -	      else
      4  f1c4				  -	      jmp	BS_return
      5  f1c4					      endif
    929  f1c4
    930  f1c4				   setuppointers
    931  f1c4		       86 9d		      stx	temp2	; store on.off.flip value
    932  f1c6		       aa		      tax		; put x-value in x 
    933  f1c7		       4a		      lsr
    934  f1c8		       4a		      lsr
    935  f1c9		       4a		      lsr		; divide x pos by 8 
    936  f1ca		       85 9c		      sta	temp1
    937  f1cc		       98		      tya
    938  f1cd		       0a		      asl
    939  f1ce					      if	pfwidth=4
    940  f1ce		       0a		      asl		; multiply y pos by 4
    941  f1cf					      endif		; else multiply by 2
    942  f1cf		       18		      clc
    943  f1d0		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f1d2		       a8		      tay		; put the value in y
    945  f1d3		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f1d5		       60		      rts
    947  f1d6
    948  f1d6				   pfread
    949  f1d6							;x=xvalue, y=yvalue
    950  f1d6		       20 c4 f1 	      jsr	setuppointers
    951  f1d9		       bd 3e f2 	      lda	setbyte,x
    952  f1dc		       39 a4 00 	      and	playfield,y
    953  f1df		       5d 3e f2 	      eor	setbyte,x
    954  f1e2							; beq readzero
    955  f1e2							; lda #1
    956  f1e2							; readzero
      0  f1e2					      RETURN
      1  f1e2					      ifnconst	bankswitch
      2  f1e2		       60		      rts
      3  f1e3				  -	      else
      4  f1e3				  -	      jmp	BS_return
      5  f1e3					      endif
    958  f1e3
    959  f1e3				   pfpixel
    960  f1e3							;x=xvalue, y=yvalue, a=0,1,2
    961  f1e3		       20 c4 f1 	      jsr	setuppointers
    962  f1e6
    963  f1e6				  -	      ifconst	bankswitch
    964  f1e6				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f1e6				  -	      beq	pixelon_r	; if "on" go to on
    966  f1e6				  -	      lsr
    967  f1e6				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f1e6				  -	      lda	playfield,y	; if here, it's "flip"
    969  f1e6				  -	      eor	setbyte,x
    970  f1e6				  -	      ifconst	superchip
    971  f1e6				  -	      sta	playfield-128,y
    972  f1e6				  -	      else
    973  f1e6				  -	      sta	playfield,y
    974  f1e6				  -	      endif
    975  f1e6				  -	      RETURN
    976  f1e6				  -pixelon_r
    977  f1e6				  -	      lda	playfield,y
    978  f1e6				  -	      ora	setbyte,x
    979  f1e6				  -	      ifconst	superchip
    980  f1e6				  -	      sta	playfield-128,y
    981  f1e6				  -	      else
    982  f1e6				  -	      sta	playfield,y
    983  f1e6				  -	      endif
    984  f1e6				  -	      RETURN
    985  f1e6				  -pixeloff_r
    986  f1e6				  -	      lda	setbyte,x
    987  f1e6				  -	      eor	#$ff
    988  f1e6				  -	      and	playfield,y
    989  f1e6				  -	      ifconst	superchip
    990  f1e6				  -	      sta	playfield-128,y
    991  f1e6				  -	      else
    992  f1e6				  -	      sta	playfield,y
    993  f1e6				  -	      endif
    994  f1e6				  -	      RETURN
    995  f1e6				  -
    996  f1e6					      else
    997  f1e6		       4c 17 f2 	      jmp	plotpoint
    998  f1e9					      endif
    999  f1e9
   1000  f1e9				   pfhline
   1001  f1e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f1e9		       20 c4 f1 	      jsr	setuppointers
   1003  f1ec		       4c f6 f1 	      jmp	noinc
   1004  f1ef				   keepgoing
   1005  f1ef		       e8		      inx
   1006  f1f0		       8a		      txa
   1007  f1f1		       29 07		      and	#7
   1008  f1f3		       d0 01		      bne	noinc
   1009  f1f5		       c8		      iny
   1010  f1f6				   noinc
   1011  f1f6		       20 17 f2 	      jsr	plotpoint
   1012  f1f9		       e4 9e		      cpx	temp3
   1013  f1fb		       30 f2		      bmi	keepgoing
      0  f1fd					      RETURN
      1  f1fd					      ifnconst	bankswitch
      2  f1fd		       60		      rts
      3  f1fe				  -	      else
      4  f1fe				  -	      jmp	BS_return
      5  f1fe					      endif
   1015  f1fe
   1016  f1fe				   pfvline
   1017  f1fe							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f1fe		       20 c4 f1 	      jsr	setuppointers
   1019  f201		       84 9c		      sty	temp1	; store memory location offset
   1020  f203		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f205		       a5 9e		      lda	temp3
   1022  f207		       0a		      asl
   1023  f208					      if	pfwidth=4
   1024  f208		       0a		      asl		; multiply by 4
   1025  f209					      endif		; else multiply by 2
   1026  f209		       85 9e		      sta	temp3	; store it
   1027  f20b							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f20b							; right now, temp1=y=starting memory location, temp3=final
   1029  f20b							; x should equal original x value
   1030  f20b				   keepgoingy
   1031  f20b		       20 17 f2 	      jsr	plotpoint
   1032  f20e		       c8		      iny
   1033  f20f		       c8		      iny
   1034  f210					      if	pfwidth=4
   1035  f210		       c8		      iny
   1036  f211		       c8		      iny
   1037  f212					      endif
   1038  f212		       c4 9e		      cpy	temp3
   1039  f214		       30 f5		      bmi	keepgoingy
      0  f216					      RETURN
      1  f216					      ifnconst	bankswitch
      2  f216		       60		      rts
      3  f217				  -	      else
      4  f217				  -	      jmp	BS_return
      5  f217					      endif
   1041  f217
   1042  f217				   plotpoint
   1043  f217		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f219		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f21b		       4a		      lsr
   1046  f21c		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f21e		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f221		       5d 3e f2 	      eor	setbyte,x
   1049  f224				  -	      ifconst	superchip
   1050  f224				  -	      sta	playfield-128,y
   1051  f224					      else
   1052  f224		       99 a4 00 	      sta	playfield,y
   1053  f227					      endif
   1054  f227		       60		      rts
   1055  f228				   pixelon
   1056  f228		       b9 a4 00 	      lda	playfield,y
   1057  f22b		       1d 3e f2 	      ora	setbyte,x
   1058  f22e				  -	      ifconst	superchip
   1059  f22e				  -	      sta	playfield-128,y
   1060  f22e					      else
   1061  f22e		       99 a4 00 	      sta	playfield,y
   1062  f231					      endif
   1063  f231		       60		      rts
   1064  f232				   pixeloff
   1065  f232		       bd 3e f2 	      lda	setbyte,x
   1066  f235		       49 ff		      eor	#$ff
   1067  f237		       39 a4 00 	      and	playfield,y
   1068  f23a				  -	      ifconst	superchip
   1069  f23a				  -	      sta	playfield-128,y
   1070  f23a					      else
   1071  f23a		       99 a4 00 	      sta	playfield,y
   1072  f23d					      endif
   1073  f23d		       60		      rts
   1074  f23e
   1075  f23e				   setbyte
   1076  f23e					      ifnconst	pfcenter
   1077  f23e		       80		      .byte.b	$80
   1078  f23f		       40		      .byte.b	$40
   1079  f240		       20		      .byte.b	$20
   1080  f241		       10		      .byte.b	$10
   1081  f242		       08		      .byte.b	$08
   1082  f243		       04		      .byte.b	$04
   1083  f244		       02		      .byte.b	$02
   1084  f245		       01		      .byte.b	$01
   1085  f246					      endif
   1086  f246		       01		      .byte.b	$01
   1087  f247		       02		      .byte.b	$02
   1088  f248		       04		      .byte.b	$04
   1089  f249		       08		      .byte.b	$08
   1090  f24a		       10		      .byte.b	$10
   1091  f24b		       20		      .byte.b	$20
   1092  f24c		       40		      .byte.b	$40
   1093  f24d		       80		      .byte.b	$80
   1094  f24e		       80		      .byte.b	$80
   1095  f24f		       40		      .byte.b	$40
   1096  f250		       20		      .byte.b	$20
   1097  f251		       10		      .byte.b	$10
   1098  f252		       08		      .byte.b	$08
   1099  f253		       04		      .byte.b	$04
   1100  f254		       02		      .byte.b	$02
   1101  f255		       01		      .byte.b	$01
   1102  f256		       01		      .byte.b	$01
   1103  f257		       02		      .byte.b	$02
   1104  f258		       04		      .byte.b	$04
   1105  f259		       08		      .byte.b	$08
   1106  f25a		       10		      .byte.b	$10
   1107  f25b		       20		      .byte.b	$20
   1108  f25c		       40		      .byte.b	$40
   1109  f25d		       80		      .byte.b	$80
   1110  f25e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f25e
   1112  f25e				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f25e		       d0 13		      bne	notleft
   1114  f260							;left
   1115  f260				  -	      ifconst	pfres
   1116  f260				  -	      ldx	#pfres*4
   1117  f260					      else
   1118  f260		       a2 30		      ldx	#48
   1119  f262					      endif
   1120  f262				   leftloop
   1121  f262		       b5 a3		      lda	playfield-1,x
   1122  f264		       4a		      lsr
   1123  f265
   1124  f265				  -	      ifconst	superchip
   1125  f265				  -	      lda	playfield-2,x
   1126  f265				  -	      rol
   1127  f265				  -	      sta	playfield-130,x
   1128  f265				  -	      lda	playfield-3,x
   1129  f265				  -	      ror
   1130  f265				  -	      sta	playfield-131,x
   1131  f265				  -	      lda	playfield-4,x
   1132  f265				  -	      rol
   1133  f265				  -	      sta	playfield-132,x
   1134  f265				  -	      lda	playfield-1,x
   1135  f265				  -	      ror
   1136  f265				  -	      sta	playfield-129,x
   1137  f265					      else
   1138  f265		       36 a2		      rol	playfield-2,x
   1139  f267		       76 a1		      ror	playfield-3,x
   1140  f269		       36 a0		      rol	playfield-4,x
   1141  f26b		       76 a3		      ror	playfield-1,x
   1142  f26d					      endif
   1143  f26d
   1144  f26d		       8a		      txa
   1145  f26e		       cb 04		      sbx	#4
   1146  f270		       d0 f0		      bne	leftloop
      0  f272					      RETURN
      1  f272					      ifnconst	bankswitch
      2  f272		       60		      rts
      3  f273				  -	      else
      4  f273				  -	      jmp	BS_return
      5  f273					      endif
   1148  f273
   1149  f273				   notleft
   1150  f273		       4a		      lsr
   1151  f274		       90 13		      bcc	notright
   1152  f276							;right
   1153  f276
   1154  f276				  -	      ifconst	pfres
   1155  f276				  -	      ldx	#pfres*4
   1156  f276					      else
   1157  f276		       a2 30		      ldx	#48
   1158  f278					      endif
   1159  f278				   rightloop
   1160  f278		       b5 a0		      lda	playfield-4,x
   1161  f27a		       4a		      lsr
   1162  f27b				  -	      ifconst	superchip
   1163  f27b				  -	      lda	playfield-3,x
   1164  f27b				  -	      rol
   1165  f27b				  -	      sta	playfield-131,x
   1166  f27b				  -	      lda	playfield-2,x
   1167  f27b				  -	      ror
   1168  f27b				  -	      sta	playfield-130,x
   1169  f27b				  -	      lda	playfield-1,x
   1170  f27b				  -	      rol
   1171  f27b				  -	      sta	playfield-129,x
   1172  f27b				  -	      lda	playfield-4,x
   1173  f27b				  -	      ror
   1174  f27b				  -	      sta	playfield-132,x
   1175  f27b					      else
   1176  f27b		       36 a1		      rol	playfield-3,x
   1177  f27d		       76 a2		      ror	playfield-2,x
   1178  f27f		       36 a3		      rol	playfield-1,x
   1179  f281		       76 a0		      ror	playfield-4,x
   1180  f283					      endif
   1181  f283		       8a		      txa
   1182  f284		       cb 04		      sbx	#4
   1183  f286		       d0 f0		      bne	rightloop
      0  f288					      RETURN
      1  f288					      ifnconst	bankswitch
      2  f288		       60		      rts
      3  f289				  -	      else
      4  f289				  -	      jmp	BS_return
      5  f289					      endif
   1185  f289
   1186  f289				   notright
   1187  f289		       4a		      lsr
   1188  f28a		       90 49		      bcc	notup
   1189  f28c							;up
   1190  f28c		       4a		      lsr
   1191  f28d		       90 02		      bcc	onedecup
   1192  f28f		       c6 ef		      dec	playfieldpos
   1193  f291				   onedecup
   1194  f291		       c6 ef		      dec	playfieldpos
   1195  f293		       f0 02		      beq	shiftdown
   1196  f295		       10 3d		      bpl	noshiftdown2
   1197  f297				   shiftdown
   1198  f297				  -	      ifconst	pfrowheight
   1199  f297				  -	      lda	#pfrowheight
   1200  f297					      else
   1201  f297					      ifnconst	pfres
   1202  f297		       a9 08		      lda	#8
   1203  f299				  -	      else
   1204  f299				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f299					      endif
   1206  f299					      endif
   1207  f299
   1208  f299		       85 ef		      sta	playfieldpos
   1209  f29b		       a5 a7		      lda	playfield+3
   1210  f29d		       85 9f		      sta	temp4
   1211  f29f		       a5 a6		      lda	playfield+2
   1212  f2a1		       85 9e		      sta	temp3
   1213  f2a3		       a5 a5		      lda	playfield+1
   1214  f2a5		       85 9d		      sta	temp2
   1215  f2a7		       a5 a4		      lda	playfield
   1216  f2a9		       85 9c		      sta	temp1
   1217  f2ab		       a2 00		      ldx	#0
   1218  f2ad				   up2
   1219  f2ad		       b5 a8		      lda	playfield+4,x
   1220  f2af				  -	      ifconst	superchip
   1221  f2af				  -	      sta	playfield-128,x
   1222  f2af				  -	      lda	playfield+5,x
   1223  f2af				  -	      sta	playfield-127,x
   1224  f2af				  -	      lda	playfield+6,x
   1225  f2af				  -	      sta	playfield-126,x
   1226  f2af				  -	      lda	playfield+7,x
   1227  f2af				  -	      sta	playfield-125,x
   1228  f2af					      else
   1229  f2af		       95 a4		      sta	playfield,x
   1230  f2b1		       b5 a9		      lda	playfield+5,x
   1231  f2b3		       95 a5		      sta	playfield+1,x
   1232  f2b5		       b5 aa		      lda	playfield+6,x
   1233  f2b7		       95 a6		      sta	playfield+2,x
   1234  f2b9		       b5 ab		      lda	playfield+7,x
   1235  f2bb		       95 a7		      sta	playfield+3,x
   1236  f2bd					      endif
   1237  f2bd		       8a		      txa
   1238  f2be		       cb fc		      sbx	#252
   1239  f2c0				  -	      ifconst	pfres
   1240  f2c0				  -	      cpx	#(pfres-1)*4
   1241  f2c0					      else
   1242  f2c0		       e0 2c		      cpx	#44
   1243  f2c2					      endif
   1244  f2c2		       d0 e9		      bne	up2
   1245  f2c4
   1246  f2c4		       a5 9f		      lda	temp4
   1247  f2c6
   1248  f2c6				  -	      ifconst	superchip
   1249  f2c6				  -	      ifconst	pfres
   1250  f2c6				  -	      sta	playfield+pfres*4-129
   1251  f2c6				  -	      lda	temp3
   1252  f2c6				  -	      sta	playfield+pfres*4-130
   1253  f2c6				  -	      lda	temp2
   1254  f2c6				  -	      sta	playfield+pfres*4-131
   1255  f2c6				  -	      lda	temp1
   1256  f2c6				  -	      sta	playfield+pfres*4-132
   1257  f2c6				  -	      else
   1258  f2c6				  -	      sta	playfield+47-128
   1259  f2c6				  -	      lda	temp3
   1260  f2c6				  -	      sta	playfield+46-128
   1261  f2c6				  -	      lda	temp2
   1262  f2c6				  -	      sta	playfield+45-128
   1263  f2c6				  -	      lda	temp1
   1264  f2c6				  -	      sta	playfield+44-128
   1265  f2c6				  -	      endif
   1266  f2c6					      else
   1267  f2c6				  -	      ifconst	pfres
   1268  f2c6				  -	      sta	playfield+pfres*4-1
   1269  f2c6				  -	      lda	temp3
   1270  f2c6				  -	      sta	playfield+pfres*4-2
   1271  f2c6				  -	      lda	temp2
   1272  f2c6				  -	      sta	playfield+pfres*4-3
   1273  f2c6				  -	      lda	temp1
   1274  f2c6				  -	      sta	playfield+pfres*4-4
   1275  f2c6					      else
   1276  f2c6		       85 d3		      sta	playfield+47
   1277  f2c8		       a5 9e		      lda	temp3
   1278  f2ca		       85 d2		      sta	playfield+46
   1279  f2cc		       a5 9d		      lda	temp2
   1280  f2ce		       85 d1		      sta	playfield+45
   1281  f2d0		       a5 9c		      lda	temp1
   1282  f2d2		       85 d0		      sta	playfield+44
   1283  f2d4					      endif
   1284  f2d4					      endif
   1285  f2d4				   noshiftdown2
      0  f2d4					      RETURN
      1  f2d4					      ifnconst	bankswitch
      2  f2d4		       60		      rts
      3  f2d5				  -	      else
      4  f2d5				  -	      jmp	BS_return
      5  f2d5					      endif
   1287  f2d5
   1288  f2d5
   1289  f2d5				   notup
   1290  f2d5							;down
   1291  f2d5		       4a		      lsr
   1292  f2d6		       b0 02		      bcs	oneincup
   1293  f2d8		       e6 ef		      inc	playfieldpos
   1294  f2da				   oneincup
   1295  f2da		       e6 ef		      inc	playfieldpos
   1296  f2dc		       a5 ef		      lda	playfieldpos
   1297  f2de
   1298  f2de				  -	      ifconst	pfrowheight
   1299  f2de				  -	      cmp	#pfrowheight+1
   1300  f2de					      else
   1301  f2de					      ifnconst	pfres
   1302  f2de		       c9 09		      cmp	#9
   1303  f2e0				  -	      else
   1304  f2e0				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f2e0					      endif
   1306  f2e0					      endif
   1307  f2e0
   1308  f2e0		       90 3b		      bcc	noshiftdown
   1309  f2e2		       a9 01		      lda	#1
   1310  f2e4		       85 ef		      sta	playfieldpos
   1311  f2e6
   1312  f2e6				  -	      ifconst	pfres
   1313  f2e6				  -	      lda	playfield+pfres*4-1
   1314  f2e6				  -	      sta	temp4
   1315  f2e6				  -	      lda	playfield+pfres*4-2
   1316  f2e6				  -	      sta	temp3
   1317  f2e6				  -	      lda	playfield+pfres*4-3
   1318  f2e6				  -	      sta	temp2
   1319  f2e6				  -	      lda	playfield+pfres*4-4
   1320  f2e6					      else
   1321  f2e6		       a5 d3		      lda	playfield+47
   1322  f2e8		       85 9f		      sta	temp4
   1323  f2ea		       a5 d2		      lda	playfield+46
   1324  f2ec		       85 9e		      sta	temp3
   1325  f2ee		       a5 d1		      lda	playfield+45
   1326  f2f0		       85 9d		      sta	temp2
   1327  f2f2		       a5 d0		      lda	playfield+44
   1328  f2f4					      endif
   1329  f2f4
   1330  f2f4		       85 9c		      sta	temp1
   1331  f2f6
   1332  f2f6				  -	      ifconst	pfres
   1333  f2f6				  -	      ldx	#(pfres-1)*4
   1334  f2f6					      else
   1335  f2f6		       a2 2c		      ldx	#44
   1336  f2f8					      endif
   1337  f2f8				   down2
   1338  f2f8		       b5 a3		      lda	playfield-1,x
   1339  f2fa				  -	      ifconst	superchip
   1340  f2fa				  -	      sta	playfield-125,x
   1341  f2fa				  -	      lda	playfield-2,x
   1342  f2fa				  -	      sta	playfield-126,x
   1343  f2fa				  -	      lda	playfield-3,x
   1344  f2fa				  -	      sta	playfield-127,x
   1345  f2fa				  -	      lda	playfield-4,x
   1346  f2fa				  -	      sta	playfield-128,x
   1347  f2fa					      else
   1348  f2fa		       95 a7		      sta	playfield+3,x
   1349  f2fc		       b5 a2		      lda	playfield-2,x
   1350  f2fe		       95 a6		      sta	playfield+2,x
   1351  f300		       b5 a1		      lda	playfield-3,x
   1352  f302		       95 a5		      sta	playfield+1,x
   1353  f304		       b5 a0		      lda	playfield-4,x
   1354  f306		       95 a4		      sta	playfield,x
   1355  f308					      endif
   1356  f308		       8a		      txa
   1357  f309		       cb 04		      sbx	#4
   1358  f30b		       d0 eb		      bne	down2
   1359  f30d
   1360  f30d		       a5 9f		      lda	temp4
   1361  f30f				  -	      ifconst	superchip
   1362  f30f				  -	      sta	playfield-125
   1363  f30f				  -	      lda	temp3
   1364  f30f				  -	      sta	playfield-126
   1365  f30f				  -	      lda	temp2
   1366  f30f				  -	      sta	playfield-127
   1367  f30f				  -	      lda	temp1
   1368  f30f				  -	      sta	playfield-128
   1369  f30f					      else
   1370  f30f		       85 a7		      sta	playfield+3
   1371  f311		       a5 9e		      lda	temp3
   1372  f313		       85 a6		      sta	playfield+2
   1373  f315		       a5 9d		      lda	temp2
   1374  f317		       85 a5		      sta	playfield+1
   1375  f319		       a5 9c		      lda	temp1
   1376  f31b		       85 a4		      sta	playfield
   1377  f31d					      endif
   1378  f31d				   noshiftdown
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1380  f31e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f31e
   1382  f31e							;standard routines needed for pretty much all games
   1383  f31e							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f31e							; repositioning code and score pointer setup moved to overscan
   1385  f31e							; read switches, joysticks now compiler generated (more efficient)
   1386  f31e
   1387  f31e				   randomize
   1388  f31e		       a5 a2		      lda	rand
   1389  f320		       4a		      lsr
   1390  f321					      ifconst	rand16
   1391  f321		       26 ed		      rol	rand16
   1392  f323					      endif
   1393  f323		       90 02		      bcc	noeor
   1394  f325		       49 b4		      eor	#$B4
   1395  f327				   noeor
   1396  f327		       85 a2		      sta	rand
   1397  f329					      ifconst	rand16
   1398  f329		       45 ed		      eor	rand16
   1399  f32b					      endif
      0  f32b					      RETURN
      1  f32b					      ifnconst	bankswitch
      2  f32b		       60		      rts
      3  f32c				  -	      else
      4  f32c				  -	      jmp	BS_return
      5  f32c					      endif
   1401  f32c							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f32c
   1403  f32c				   drawscreen
   1404  f32c				  -	      ifconst	debugscore
   1405  f32c				  -	      ldx	#14
   1406  f32c				  -	      lda	INTIM	; display # cycles left in the score
   1407  f32c				  -
   1408  f32c				  -	      ifconst	mincycles
   1409  f32c				  -	      lda	mincycles
   1410  f32c				  -	      cmp	INTIM
   1411  f32c				  -	      lda	mincycles
   1412  f32c				  -	      bcc	nochange
   1413  f32c				  -	      lda	INTIM
   1414  f32c				  -	      sta	mincycles
   1415  f32c				  -nochange
   1416  f32c				  -	      endif
   1417  f32c				  -
   1418  f32c				  -			; cmp #$2B
   1419  f32c				  -			; bcs no_cycles_left
   1420  f32c				  -	      bmi	cycles_left
   1421  f32c				  -	      ldx	#64
   1422  f32c				  -	      eor	#$ff	;make negative
   1423  f32c				  -cycles_left
   1424  f32c				  -	      stx	scorecolor
   1425  f32c				  -	      and	#$7f	; clear sign bit
   1426  f32c				  -	      tax
   1427  f32c				  -	      lda	scorebcd,x
   1428  f32c				  -	      sta	score+2
   1429  f32c				  -	      lda	scorebcd1,x
   1430  f32c				  -	      sta	score+1
   1431  f32c				  -	      jmp	done_debugscore
   1432  f32c				  -scorebcd
   1433  f32c				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f32c				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f32c				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f32c				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f32c				  -scorebcd1
   1438  f32c				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f32c				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f32c				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f32c				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f32c				  -done_debugscore
   1443  f32c					      endif
   1444  f32c
   1445  f32c				  -	      ifconst	debugcycles
   1446  f32c				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f32c				  -			; cmp #$2B
   1448  f32c				  -			; BCC overscan
   1449  f32c				  -	      bmi	overscan
   1450  f32c				  -	      sta	COLUBK
   1451  f32c				  -	      bcs	doneoverscan
   1452  f32c					      endif
   1453  f32c
   1454  f32c				   overscan
   1455  f32c				  -	      ifconst	interlaced
   1456  f32c				  -	      PHP
   1457  f32c				  -	      PLA
   1458  f32c				  -	      EOR	#4	; flip interrupt bit
   1459  f32c				  -	      PHA
   1460  f32c				  -	      PLP
   1461  f32c				  -	      AND	#4	; isolate the interrupt bit
   1462  f32c				  -	      TAX		; save it for later
   1463  f32c					      endif
   1464  f32c
   1465  f32c				   overscanloop
   1466  f32c		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f32f		       30 fb		      bmi	overscanloop
   1468  f331				   doneoverscan
   1469  f331
   1470  f331							;do VSYNC
   1471  f331
   1472  f331				  -	      ifconst	interlaced
   1473  f331				  -	      CPX	#4
   1474  f331				  -	      BNE	oddframevsync
   1475  f331					      endif
   1476  f331
   1477  f331		       a9 02		      lda	#2
   1478  f333		       85 02		      sta	WSYNC
   1479  f335		       85 00		      sta	VSYNC
   1480  f337		       85 02		      STA	WSYNC
   1481  f339		       85 02		      STA	WSYNC
   1482  f33b		       4a		      lsr
   1483  f33c		       85 02		      STA	WSYNC
   1484  f33e		       85 00		      STA	VSYNC
   1485  f340		       85 01		      sta	VBLANK
   1486  f342					      ifnconst	overscan_time
   1487  f342		       a9 a5		      lda	#37+128
   1488  f344				  -	      else
   1489  f344				  -	      lda	#overscan_time+128
   1490  f344					      endif
   1491  f344		       8d 96 02 	      sta	TIM64T
   1492  f347
   1493  f347				  -	      ifconst	interlaced
   1494  f347				  -	      jmp	postsync
   1495  f347				  -
   1496  f347				  -oddframevsync
   1497  f347				  -	      sta	WSYNC
   1498  f347				  -
   1499  f347				  -	      LDA	($80,X)	; 11 waste
   1500  f347				  -	      LDA	($80,X)	; 11 waste
   1501  f347				  -	      LDA	($80,X)	; 11 waste
   1502  f347				  -
   1503  f347				  -	      lda	#2
   1504  f347				  -	      sta	VSYNC
   1505  f347				  -	      sta	WSYNC
   1506  f347				  -	      sta	WSYNC
   1507  f347				  -	      sta	WSYNC
   1508  f347				  -
   1509  f347				  -	      LDA	($80,X)	; 11 waste
   1510  f347				  -	      LDA	($80,X)	; 11 waste
   1511  f347				  -	      LDA	($80,X)	; 11 waste
   1512  f347				  -
   1513  f347				  -	      lda	#0
   1514  f347				  -	      sta	VSYNC
   1515  f347				  -	      sta	VBLANK
   1516  f347				  -	      ifnconst	overscan_time
   1517  f347				  -	      lda	#37+128
   1518  f347				  -	      else
   1519  f347				  -	      lda	#overscan_time+128
   1520  f347				  -	      endif
   1521  f347				  -	      sta	TIM64T
   1522  f347				  -
   1523  f347				  -postsync
   1524  f347					      endif
   1525  f347
   1526  f347				  -	      ifconst	legacy
   1527  f347				  -	      if	legacy < 100
   1528  f347				  -	      ldx	#4
   1529  f347				  -adjustloop
   1530  f347				  -	      lda	player0x,x
   1531  f347				  -	      sec
   1532  f347				  -	      sbc	#14	;?
   1533  f347				  -	      sta	player0x,x
   1534  f347				  -	      dex
   1535  f347				  -	      bpl	adjustloop
   1536  f347				  -	      endif
   1537  f347					      endif
   1538  f347				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f347				  -	      repeat	($fa-(<*))
   1540  f347				  -	      nop
   1541  f347				  -	      repend
   1542  f347					      endif
   1543  f347		       85 02		      sta	WSYNC
   1544  f349		       a2 04		      ldx	#4
      0  f34b					      SLEEP	3
      1  f34b				   .CYCLES    SET	3
      2  f34b
      3  f34b				  -	      IF	.CYCLES < 2
      4  f34b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f34b				  -	      ERR
      6  f34b					      ENDIF
      7  f34b
      8  f34b					      IF	.CYCLES & 1
      9  f34b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f34b		       04 00		      nop	0
     11  f34d				  -	      ELSE
     12  f34d				  -	      bit	VSYNC
     13  f34d					      ENDIF
     14  f34d				   .CYCLES    SET	.CYCLES - 3
     15  f34d					      ENDIF
     16  f34d
     17  f34d				  -	      REPEAT	.CYCLES / 2
     18  f34d				  -	      nop
     19  f34d					      REPEND
   1546  f34d				   HorPosLoop		; 5
   1547  f34d		       b5 80		      lda	player0x,X	;+4 9
   1548  f34f		       38		      sec		;+2 11
   1549  f350				   DivideLoop
   1550  f350		       e9 0f		      sbc	#15
   1551  f352		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f354		       95 9c		      sta	temp1,X	;+4 19
   1553  f356		       95 10		      sta	RESP0,X	;+4 23
   1554  f358		       85 02		      sta	WSYNC
   1555  f35a		       ca		      dex
   1556  f35b		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f35d							; 4
   1558  f35d
   1559  f35d		       a2 04		      ldx	#4
   1560  f35f		       b4 9c		      ldy	temp1,X
   1561  f361		       b9 bd f2 	      lda	repostable-256,Y
   1562  f364		       95 20		      sta	HMP0,X	;+14 18
   1563  f366
   1564  f366		       ca		      dex
   1565  f367		       b4 9c		      ldy	temp1,X
   1566  f369		       b9 bd f2 	      lda	repostable-256,Y
   1567  f36c		       95 20		      sta	HMP0,X	;+14 32
   1568  f36e
   1569  f36e		       ca		      dex
   1570  f36f		       b4 9c		      ldy	temp1,X
   1571  f371		       b9 bd f2 	      lda	repostable-256,Y
   1572  f374		       95 20		      sta	HMP0,X	;+14 46
   1573  f376
   1574  f376		       ca		      dex
   1575  f377		       b4 9c		      ldy	temp1,X
   1576  f379		       b9 bd f2 	      lda	repostable-256,Y
   1577  f37c		       95 20		      sta	HMP0,X	;+14 60
   1578  f37e
   1579  f37e		       ca		      dex
   1580  f37f		       b4 9c		      ldy	temp1,X
   1581  f381		       b9 bd f2 	      lda	repostable-256,Y
   1582  f384		       95 20		      sta	HMP0,X	;+14 74
   1583  f386
   1584  f386		       85 02		      sta	WSYNC
   1585  f388
   1586  f388		       85 2a		      sta	HMOVE	;+3 3
   1587  f38a
   1588  f38a
   1589  f38a				  -	      ifconst	legacy
   1590  f38a				  -	      if	legacy < 100
   1591  f38a				  -	      ldx	#4
   1592  f38a				  -adjustloop2
   1593  f38a				  -	      lda	player0x,x
   1594  f38a				  -	      clc
   1595  f38a				  -	      adc	#14	;?
   1596  f38a				  -	      sta	player0x,x
   1597  f38a				  -	      dex
   1598  f38a				  -	      bpl	adjustloop2
   1599  f38a				  -	      endif
   1600  f38a					      endif
   1601  f38a
   1602  f38a
   1603  f38a
   1604  f38a
   1605  f38a							;set score pointers
   1606  f38a		       a7 95		      lax	score+2
   1607  f38c		       20 bd f3 	      jsr	scorepointerset
   1608  f38f		       84 9b		      sty	scorepointers+5
   1609  f391		       86 98		      stx	scorepointers+2
   1610  f393		       a7 94		      lax	score+1
   1611  f395		       20 bd f3 	      jsr	scorepointerset
   1612  f398		       84 9a		      sty	scorepointers+4
   1613  f39a		       86 97		      stx	scorepointers+1
   1614  f39c		       a7 93		      lax	score
   1615  f39e		       20 bd f3 	      jsr	scorepointerset
   1616  f3a1		       84 99		      sty	scorepointers+3
   1617  f3a3		       86 96		      stx	scorepointers
   1618  f3a5
   1619  f3a5				   vblk
   1620  f3a5							; run possible vblank bB code
   1621  f3a5				  -	      ifconst	vblank_bB_code
   1622  f3a5				  -	      jsr	vblank_bB_code
   1623  f3a5					      endif
   1624  f3a5				   vblk2
   1625  f3a5		       ad 84 02 	      LDA	INTIM
   1626  f3a8		       30 fb		      bmi	vblk2
   1627  f3aa		       4c 34 f0 	      jmp	kernel
   1628  f3ad
   1629  f3ad
   1630  f3ad		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f3b6		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f3bd				   repostable
   1633  f3bd
   1634  f3bd				   scorepointerset
   1635  f3bd		       29 0f		      and	#$0F
   1636  f3bf		       0a		      asl
   1637  f3c0		       0a		      asl
   1638  f3c1		       0a		      asl
   1639  f3c2		       69 9c		      adc	#<scoretable
   1640  f3c4		       a8		      tay
   1641  f3c5		       8a		      txa
   1642  f3c6							; and #$F0
   1643  f3c6							; lsr
   1644  f3c6		       4b f0		      asr	#$F0
   1645  f3c8		       69 9c		      adc	#<scoretable
   1646  f3ca		       aa		      tax
   1647  f3cb		       60		      rts
   1648  f3cc				   game
   1649  f3cc				   .
   1650  f3cc							; 
   1651  f3cc
   1652  f3cc				   .
   1653  f3cc							; 
   1654  f3cc
   1655  f3cc				   .
   1656  f3cc							; 
   1657  f3cc
   1658  f3cc				   .
   1659  f3cc							; 
   1660  f3cc
   1661  f3cc				   .
   1662  f3cc							; 
   1663  f3cc
   1664  f3cc				   .
   1665  f3cc							; 
   1666  f3cc
   1667  f3cc				   .
   1668  f3cc							; 
   1669  f3cc
   1670  f3cc				   .
   1671  f3cc							; 
   1672  f3cc
   1673  f3cc				   .
   1674  f3cc							; 
   1675  f3cc
   1676  f3cc				   .
   1677  f3cc							; 
   1678  f3cc
   1679  f3cc				   .
   1680  f3cc							; 
   1681  f3cc
   1682  f3cc				   .
   1683  f3cc							; 
   1684  f3cc
   1685  f3cc				   .
   1686  f3cc							; 
   1687  f3cc
   1688  f3cc				   .
   1689  f3cc							; 
   1690  f3cc
   1691  f3cc				   .
   1692  f3cc							; 
   1693  f3cc
   1694  f3cc				   .
   1695  f3cc							; 
   1696  f3cc
   1697  f3cc				   .
   1698  f3cc							; 
   1699  f3cc
   1700  f3cc				   .
   1701  f3cc							; 
   1702  f3cc
   1703  f3cc				   .
   1704  f3cc							; 
   1705  f3cc
   1706  f3cc				   .
   1707  f3cc							; 
   1708  f3cc
   1709  f3cc				   .
   1710  f3cc							; 
   1711  f3cc
   1712  f3cc				   .
   1713  f3cc							; 
   1714  f3cc
   1715  f3cc				   .
   1716  f3cc							; 
   1717  f3cc
   1718  f3cc				   .
   1719  f3cc							; 
   1720  f3cc
   1721  f3cc				   .
   1722  f3cc							; 
   1723  f3cc
   1724  f3cc				   .
   1725  f3cc							; 
   1726  f3cc
   1727  f3cc				   .
   1728  f3cc							; 
   1729  f3cc
   1730  f3cc				   .
   1731  f3cc							; 
   1732  f3cc
   1733  f3cc				   .
   1734  f3cc							; 
   1735  f3cc
   1736  f3cc				   .
   1737  f3cc							; 
   1738  f3cc
   1739  f3cc				   .
   1740  f3cc							; 
   1741  f3cc
   1742  f3cc				   .
   1743  f3cc							; 
   1744  f3cc
   1745  f3cc				   .
   1746  f3cc							; 
   1747  f3cc
   1748  f3cc				   .
   1749  f3cc							; 
   1750  f3cc
   1751  f3cc				   .
   1752  f3cc							; 
   1753  f3cc
   1754  f3cc				   .
   1755  f3cc							; 
   1756  f3cc
   1757  f3cc				   .
   1758  f3cc							; 
   1759  f3cc
   1760  f3cc				   .
   1761  f3cc							; 
   1762  f3cc
   1763  f3cc				   .
   1764  f3cc							; 
   1765  f3cc
   1766  f3cc				   .
   1767  f3cc							; 
   1768  f3cc
   1769  f3cc				   .
   1770  f3cc							; 
   1771  f3cc
   1772  f3cc				   .
   1773  f3cc							; 
   1774  f3cc
   1775  f3cc				   .
   1776  f3cc							; 
   1777  f3cc
   1778  f3cc				   .
   1779  f3cc							; 
   1780  f3cc
   1781  f3cc				   .
   1782  f3cc							; 
   1783  f3cc
   1784  f3cc				   .
   1785  f3cc							; 
   1786  f3cc
   1787  f3cc				   .
   1788  f3cc							; 
   1789  f3cc
   1790  f3cc				   .
   1791  f3cc							; 
   1792  f3cc
   1793  f3cc				   .
   1794  f3cc							; 
   1795  f3cc
   1796  f3cc				   .
   1797  f3cc							; 
   1798  f3cc
   1799  f3cc				   .
   1800  f3cc							; 
   1801  f3cc
   1802  f3cc				   .
   1803  f3cc							; 
   1804  f3cc
   1805  f3cc				   .
   1806  f3cc							; 
   1807  f3cc
   1808  f3cc				   .L00 		;  dim _BitOp_P0_M0_Dir  =  g
   1809  f3cc
   1810  f3cc				   .L01 		;  dim _Bit0_P0_Dir_Up  =  g
   1811  f3cc
   1812  f3cc				   .L02 		;  dim _Bit1_P0_Dir_Down  =  g
   1813  f3cc
   1814  f3cc				   .L03 		;  dim _Bit2_P0_Dir_Left  =  g
   1815  f3cc
   1816  f3cc				   .L04 		;  dim _Bit3_P0_Dir_Right  =  g
   1817  f3cc
   1818  f3cc				   .L05 		;  dim _Bit4_M0_Dir_Up  =  g
   1819  f3cc
   1820  f3cc				   .L06 		;  dim _Bit5_M0_Dir_Down  =  g
   1821  f3cc
   1822  f3cc				   .L07 		;  dim _Bit6_M0_Dir_Left  =  g
   1823  f3cc
   1824  f3cc				   .L08 		;  dim _Bit7_M0_Dir_Right  =  g
   1825  f3cc
   1826  f3cc				   .
   1827  f3cc							; 
   1828  f3cc
   1829  f3cc				   .
   1830  f3cc							; 
   1831  f3cc
   1832  f3cc				   .
   1833  f3cc							; 
   1834  f3cc
   1835  f3cc				   .
   1836  f3cc							; 
   1837  f3cc
   1838  f3cc				   .L09 		;  dim _BitOp_Ball_Dir  =  h
   1839  f3cc
   1840  f3cc				   .L010		;  dim _Bit0_Ball_Dir_Up  =  h
   1841  f3cc
   1842  f3cc				   .L011		;  dim _Bit1_Ball_Dir_Down  =	h
   1843  f3cc
   1844  f3cc				   .L012		;  dim _Bit2_Ball_Dir_Left  =	h
   1845  f3cc
   1846  f3cc				   .L013		;  dim _Bit3_Ball_Dir_Right  =  h
   1847  f3cc
   1848  f3cc				   .L014		;  dim _Bit4_Ball_Hit_UD  =  h
   1849  f3cc
   1850  f3cc				   .
   1851  f3cc							; 
   1852  f3cc
   1853  f3cc				   .
   1854  f3cc							; 
   1855  f3cc
   1856  f3cc				   .
   1857  f3cc							; 
   1858  f3cc
   1859  f3cc				   .
   1860  f3cc							; 
   1861  f3cc
   1862  f3cc				   .L015		;  dim _B_Y  =  bally.i
   1863  f3cc
   1864  f3cc				   .L016		;  dim _B_X  =  ballx.j
   1865  f3cc
   1866  f3cc				   .
   1867  f3cc							; 
   1868  f3cc
   1869  f3cc				   .
   1870  f3cc							; 
   1871  f3cc
   1872  f3cc				   .
   1873  f3cc							; 
   1874  f3cc
   1875  f3cc				   .
   1876  f3cc							; 
   1877  f3cc
   1878  f3cc				   .L017		;  dim _BitOp_01  =  y
   1879  f3cc
   1880  f3cc				   .L018		;  dim _Bit0_Reset_Restrainer	=  y
   1881  f3cc
   1882  f3cc				   .L019		;  dim _Bit4_Toggle_Screen  =	y
   1883  f3cc
   1884  f3cc				   .L020		;  dim _Bit7_M0_Moving  =  y
   1885  f3cc
   1886  f3cc				   .
   1887  f3cc							; 
   1888  f3cc
   1889  f3cc				   .
   1890  f3cc							; 
   1891  f3cc
   1892  f3cc				   .
   1893  f3cc							; 
   1894  f3cc
   1895  f3cc				   .
   1896  f3cc							; 
   1897  f3cc
   1898  f3cc				   .L021		;  dim rand16	=  z
   1899  f3cc
   1900  f3cc				   .
   1901  f3cc							; 
   1902  f3cc
   1903  f3cc				   .
   1904  f3cc							; 
   1905  f3cc
   1906  f3cc				   .
   1907  f3cc							; 
   1908  f3cc
   1909  f3cc				   .
   1910  f3cc							; 
   1911  f3cc
   1912  f3cc				   .
   1913  f3cc							; 
   1914  f3cc
   1915  f3cc				   .
   1916  f3cc							; 
   1917  f3cc
   1918  f3cc				   .
   1919  f3cc							; 
   1920  f3cc
   1921  f3cc				   .
   1922  f3cc							; 
   1923  f3cc
   1924  f3cc				   .
   1925  f3cc							; 
   1926  f3cc
   1927  f3cc				   .L022		;  const _P_Edge_Top  =  9
   1928  f3cc
   1929  f3cc				   .L023		;  const _P_Edge_Bottom  =  88
   1930  f3cc
   1931  f3cc				   .L024		;  const _P_Edge_Left	=  1
   1932  f3cc
   1933  f3cc				   .L025		;  const _P_Edge_Right  =  153
   1934  f3cc
   1935  f3cc				   .
   1936  f3cc							; 
   1937  f3cc
   1938  f3cc				   .
   1939  f3cc							; 
   1940  f3cc
   1941  f3cc				   .
   1942  f3cc							; 
   1943  f3cc
   1944  f3cc				   .
   1945  f3cc							; 
   1946  f3cc
   1947  f3cc				   .
   1948  f3cc							; 
   1949  f3cc
   1950  f3cc				   .
   1951  f3cc							; 
   1952  f3cc
   1953  f3cc				   .
   1954  f3cc							; 
   1955  f3cc
   1956  f3cc				   .
   1957  f3cc							; 
   1958  f3cc
   1959  f3cc				   .L026		;  const _B_Edge_Top  =  2
   1960  f3cc
   1961  f3cc				   .L027		;  const _B_Edge_Bottom  =  88
   1962  f3cc
   1963  f3cc				   .L028		;  const _B_Edge_Left	=  2
   1964  f3cc
   1965  f3cc				   .L029		;  const _B_Edge_Right  =  160
   1966  f3cc
   1967  f3cc				   .
   1968  f3cc							; 
   1969  f3cc
   1970  f3cc				   .
   1971  f3cc							; 
   1972  f3cc
   1973  f3cc				   .
   1974  f3cc							; 
   1975  f3cc
   1976  f3cc				   .
   1977  f3cc							; 
   1978  f3cc
   1979  f3cc				   .
   1980  f3cc							; 
   1981  f3cc
   1982  f3cc				   .
   1983  f3cc							; 
   1984  f3cc
   1985  f3cc				   .
   1986  f3cc							; 
   1987  f3cc
   1988  f3cc				   .
   1989  f3cc							; 
   1990  f3cc
   1991  f3cc				   .
   1992  f3cc							; 
   1993  f3cc
   1994  f3cc				   .L030		;  const _M_Edge_Top  =  2
   1995  f3cc
   1996  f3cc				   .L031		;  const _M_Edge_Bottom  =  88
   1997  f3cc
   1998  f3cc				   .L032		;  const _M_Edge_Left	=  2
   1999  f3cc
   2000  f3cc				   .L033		;  const _M_Edge_Right  =  159
   2001  f3cc
   2002  f3cc				   .
   2003  f3cc							; 
   2004  f3cc
   2005  f3cc				   .
   2006  f3cc							; 
   2007  f3cc
   2008  f3cc				   .
   2009  f3cc							; 
   2010  f3cc
   2011  f3cc				   .
   2012  f3cc							; 
   2013  f3cc
   2014  f3cc				   .
   2015  f3cc							; 
   2016  f3cc
   2017  f3cc				   .
   2018  f3cc							; 
   2019  f3cc
   2020  f3cc				   .
   2021  f3cc							; 
   2022  f3cc
   2023  f3cc				   .L034		;  const noscore  =  1
   2024  f3cc
   2025  f3cc				   .
   2026  f3cc							; 
   2027  f3cc
   2028  f3cc				   .
   2029  f3cc							; 
   2030  f3cc
   2031  f3cc				   .
   2032  f3cc							; 
   2033  f3cc
   2034  f3cc				   .
   2035  f3cc							; 
   2036  f3cc
   2037  f3cc				   .
   2038  f3cc							; 
   2039  f3cc
   2040  f3cc				   .
   2041  f3cc							; 
   2042  f3cc
   2043  f3cc				   .
   2044  f3cc							; 
   2045  f3cc
   2046  f3cc				   .
   2047  f3cc							; 
   2048  f3cc
   2049  f3cc				   .
   2050  f3cc							; 
   2051  f3cc
   2052  f3cc				   .
   2053  f3cc							; 
   2054  f3cc
   2055  f3cc				   .
   2056  f3cc							; 
   2057  f3cc
   2058  f3cc				   .__Start_Restart
   2059  f3cc							; __Start_Restart
   2060  f3cc
   2061  f3cc				   .
   2062  f3cc							; 
   2063  f3cc
   2064  f3cc				   .
   2065  f3cc							; 
   2066  f3cc
   2067  f3cc				   .
   2068  f3cc							; 
   2069  f3cc
   2070  f3cc				   .
   2071  f3cc							; 
   2072  f3cc
   2073  f3cc				   .
   2074  f3cc							; 
   2075  f3cc
   2076  f3cc				   .
   2077  f3cc							; 
   2078  f3cc
   2079  f3cc				   .L035		;  AUDV0  =  0  :  AUDV1  =  0
   2080  f3cc
   2081  f3cc		       a9 00		      LDA	#0
   2082  f3ce		       85 19		      STA	AUDV0
   2083  f3d0		       85 1a		      STA	AUDV1
   2084  f3d2				   .
   2085  f3d2							; 
   2086  f3d2
   2087  f3d2				   .
   2088  f3d2							; 
   2089  f3d2
   2090  f3d2				   .
   2091  f3d2							; 
   2092  f3d2
   2093  f3d2				   .
   2094  f3d2							; 
   2095  f3d2
   2096  f3d2				   .
   2097  f3d2							; 
   2098  f3d2
   2099  f3d2				   .
   2100  f3d2							; 
   2101  f3d2
   2102  f3d2				   .
   2103  f3d2							; 
   2104  f3d2
   2105  f3d2				   .
   2106  f3d2							; 
   2107  f3d2
   2108  f3d2				   .
   2109  f3d2							; 
   2110  f3d2
   2111  f3d2				   .L036		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2112  f3d2
   2113  f3d2		       a9 00		      LDA	#0
   2114  f3d4		       85 d4		      STA	a
   2115  f3d6		       85 d5		      STA	b
   2116  f3d8		       85 d6		      STA	c
   2117  f3da		       85 d7		      STA	d
   2118  f3dc		       85 d8		      STA	e
   2119  f3de		       85 d9		      STA	f
   2120  f3e0		       85 da		      STA	g
   2121  f3e2		       85 db		      STA	h
   2122  f3e4		       85 dc		      STA	i
   2123  f3e6				   .L037		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2124  f3e6
   2125  f3e6		       a9 00		      LDA	#0
   2126  f3e8		       85 dd		      STA	j
   2127  f3ea		       85 de		      STA	k
   2128  f3ec		       85 df		      STA	l
   2129  f3ee		       85 e0		      STA	m
   2130  f3f0		       85 e1		      STA	n
   2131  f3f2		       85 e2		      STA	o
   2132  f3f4		       85 e3		      STA	p
   2133  f3f6		       85 e4		      STA	q
   2134  f3f8		       85 e5		      STA	r
   2135  f3fa				   .L038		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0
   2136  f3fa
   2137  f3fa		       a9 00		      LDA	#0
   2138  f3fc		       85 e6		      STA	s
   2139  f3fe		       85 e7		      STA	t
   2140  f400		       85 e8		      STA	u
   2141  f402		       85 e9		      STA	v
   2142  f404		       85 ea		      STA	w
   2143  f406		       85 eb		      STA	x
   2144  f408				   .
   2145  f408							; 
   2146  f408
   2147  f408				   .
   2148  f408							; 
   2149  f408
   2150  f408				   .
   2151  f408							; 
   2152  f408
   2153  f408				   .
   2154  f408							; 
   2155  f408
   2156  f408				   .
   2157  f408							; 
   2158  f408
   2159  f408				   .
   2160  f408							; 
   2161  f408
   2162  f408				   .
   2163  f408							; 
   2164  f408
   2165  f408				   .
   2166  f408							; 
   2167  f408
   2168  f408				   .L039		;  _BitOp_01  =  _BitOp_01  &	%00010000
   2169  f408
   2170  f408		       a5 ec		      LDA	_BitOp_01
   2171  f40a		       29 10		      AND	#%00010000
   2172  f40c		       85 ec		      STA	_BitOp_01
   2173  f40e				   .
   2174  f40e							; 
   2175  f40e
   2176  f40e				   .
   2177  f40e							; 
   2178  f40e
   2179  f40e				   .
   2180  f40e							; 
   2181  f40e
   2182  f40e				   .
   2183  f40e							; 
   2184  f40e
   2185  f40e				   .
   2186  f40e							; 
   2187  f40e
   2188  f40e				   .
   2189  f40e							; 
   2190  f40e
   2191  f40e				   .L040		;  player0x  =  77  :	player0y  =  53
   2192  f40e
   2193  f40e		       a9 4d		      LDA	#77
   2194  f410		       85 80		      STA	player0x
   2195  f412		       a9 35		      LDA	#53
   2196  f414		       85 85		      STA	player0y
   2197  f416				   .
   2198  f416							; 
   2199  f416
   2200  f416				   .
   2201  f416							; 
   2202  f416
   2203  f416				   .
   2204  f416							; 
   2205  f416
   2206  f416				   .
   2207  f416							; 
   2208  f416
   2209  f416				   .
   2210  f416							; 
   2211  f416
   2212  f416				   .
   2213  f416							; 
   2214  f416
   2215  f416				   .L041		;  missile0x  =  200  :  missile0y  =	200
   2216  f416
   2217  f416		       a9 c8		      LDA	#200
   2218  f418		       85 82		      STA	missile0x
   2219  f41a		       85 91		      STA	missile0y
   2220  f41c				   .
   2221  f41c							; 
   2222  f41c
   2223  f41c				   .
   2224  f41c							; 
   2225  f41c
   2226  f41c				   .
   2227  f41c							; 
   2228  f41c
   2229  f41c				   .
   2230  f41c							; 
   2231  f41c
   2232  f41c				   .
   2233  f41c							; 
   2234  f41c
   2235  f41c				   .
   2236  f41c							; 
   2237  f41c
   2238  f41c				   .L042		;  NUSIZ0  =  $10  :  missile0height  =  1
   2239  f41c
   2240  f41c		       a9 10		      LDA	#$10
   2241  f41e		       85 04		      STA	NUSIZ0
   2242  f420		       a9 01		      LDA	#1
   2243  f422		       85 90		      STA	missile0height
   2244  f424				   .
   2245  f424							; 
   2246  f424
   2247  f424				   .
   2248  f424							; 
   2249  f424
   2250  f424				   .
   2251  f424							; 
   2252  f424
   2253  f424				   .
   2254  f424							; 
   2255  f424
   2256  f424				   .
   2257  f424							; 
   2258  f424
   2259  f424				   .
   2260  f424							; 
   2261  f424
   2262  f424				   .L043		;  COLUPF  =  $2C
   2263  f424
   2264  f424		       a9 2c		      LDA	#$2C
   2265  f426		       85 08		      STA	COLUPF
   2266  f428				   .
   2267  f428							; 
   2268  f428
   2269  f428				   .
   2270  f428							; 
   2271  f428
   2272  f428				   .
   2273  f428							; 
   2274  f428
   2275  f428				   .
   2276  f428							; 
   2277  f428
   2278  f428				   .
   2279  f428							; 
   2280  f428
   2281  f428				   .
   2282  f428							; 
   2283  f428
   2284  f428				   .L044		;  COLUBK  =  0
   2285  f428
   2286  f428		       a9 00		      LDA	#0
   2287  f42a		       85 09		      STA	COLUBK
   2288  f42c				   .
   2289  f42c							; 
   2290  f42c
   2291  f42c				   .
   2292  f42c							; 
   2293  f42c
   2294  f42c				   .
   2295  f42c							; 
   2296  f42c
   2297  f42c				   .
   2298  f42c							; 
   2299  f42c
   2300  f42c				   .
   2301  f42c							; 
   2302  f42c
   2303  f42c				   .
   2304  f42c							; 
   2305  f42c
   2306  f42c				   .L045		;  CTRLPF  =  $11  :  ballheight  =  2
   2307  f42c
   2308  f42c		       a9 11		      LDA	#$11
   2309  f42e		       85 0a		      STA	CTRLPF
   2310  f430		       a9 02		      LDA	#2
   2311  f432		       85 92		      STA	ballheight
   2312  f434				   .
   2313  f434							; 
   2314  f434
   2315  f434				   .
   2316  f434							; 
   2317  f434
   2318  f434				   .
   2319  f434							; 
   2320  f434
   2321  f434				   .
   2322  f434							; 
   2323  f434
   2324  f434				   .
   2325  f434							; 
   2326  f434
   2327  f434				   .
   2328  f434							; 
   2329  f434
   2330  f434				   .L046		;  ballx  =   ( rand / 2 )   +   ( rand & 15 )   +   ( rand / 32 )   +  5  :  bally  =  9
   2331  f434
   2332  f434							; complex statement detected
   2333  f434		       20 1e f3 	      jsr	randomize
   2334  f437		       4a		      lsr
   2335  f438		       48		      PHA
   2336  f439		       20 1e f3 	      jsr	randomize
   2337  f43c		       29 0f		      AND	#15
   2338  f43e		       ba		      TSX
   2339  f43f		       e8		      INX
   2340  f440		       9a		      TXS
   2341  f441		       18		      CLC
   2342  f442		       75 00		      ADC	$00,x
   2343  f444		       48		      PHA
   2344  f445		       20 1e f3 	      jsr	randomize
   2345  f448		       4a		      lsr
   2346  f449		       4a		      lsr
   2347  f44a		       4a		      lsr
   2348  f44b		       4a		      lsr
   2349  f44c		       4a		      lsr
   2350  f44d		       ba		      TSX
   2351  f44e		       e8		      INX
   2352  f44f		       9a		      TXS
   2353  f450		       18		      CLC
   2354  f451		       75 00		      ADC	$00,x
   2355  f453		       18		      CLC
   2356  f454		       69 05		      ADC	#5
   2357  f456		       85 84		      STA	ballx
   2358  f458		       a9 09		      LDA	#9
   2359  f45a		       85 89		      STA	bally
   2360  f45c				   .
   2361  f45c							; 
   2362  f45c
   2363  f45c				   .
   2364  f45c							; 
   2365  f45c
   2366  f45c				   .
   2367  f45c							; 
   2368  f45c
   2369  f45c				   .
   2370  f45c							; 
   2371  f45c
   2372  f45c				   .
   2373  f45c							; 
   2374  f45c
   2375  f45c				   .
   2376  f45c							; 
   2377  f45c
   2378  f45c				   .
   2379  f45c							; 
   2380  f45c
   2381  f45c				   .L047		;  _Bit2_Ball_Dir_Left{2}  =  1  :  _Bit3_Ball_Dir_Right{3}  =  0
   2382  f45c
   2383  f45c		       a5 db		      LDA	_Bit2_Ball_Dir_Left
   2384  f45e		       09 04		      ORA	#4
   2385  f460		       85 db		      STA	_Bit2_Ball_Dir_Left
   2386  f462		       a5 db		      LDA	_Bit3_Ball_Dir_Right
   2387  f464		       29 f7		      AND	#247
   2388  f466		       85 db		      STA	_Bit3_Ball_Dir_Right
   2389  f468				   .
   2390  f468							; 
   2391  f468
   2392  f468				   .L048		;  temp5  =  rand  :  if temp5  <  128 then _Bit2_Ball_Dir_Left{2}  =	0  :  _Bit3_Ball_Dir_Right{3}  =  1
   2393  f468
   2394  f468		       20 1e f3 	      jsr	randomize
   2395  f46b		       85 a0		      STA	temp5
   2396  f46d		       a5 a0		      LDA	temp5
   2397  f46f		       c9 80		      CMP	#128
   2398  f471		       b0 0c		      BCS	.skipL048
   2399  f473				   .condpart0
   2400  f473		       a5 db		      LDA	_Bit2_Ball_Dir_Left
   2401  f475		       29 fb		      AND	#251
   2402  f477		       85 db		      STA	_Bit2_Ball_Dir_Left
   2403  f479		       a5 db		      LDA	_Bit3_Ball_Dir_Right
   2404  f47b		       09 08		      ORA	#8
   2405  f47d		       85 db		      STA	_Bit3_Ball_Dir_Right
   2406  f47f				   .skipL048
   2407  f47f				   .
   2408  f47f							; 
   2409  f47f
   2410  f47f				   .
   2411  f47f							; 
   2412  f47f
   2413  f47f				   .
   2414  f47f							; 
   2415  f47f
   2416  f47f				   .
   2417  f47f							; 
   2418  f47f
   2419  f47f				   .
   2420  f47f							; 
   2421  f47f
   2422  f47f				   .
   2423  f47f							; 
   2424  f47f
   2425  f47f				   .L049		;  _Bit1_Ball_Dir_Down{1}  =  1
   2426  f47f
   2427  f47f		       a5 db		      LDA	_Bit1_Ball_Dir_Down
   2428  f481		       09 02		      ORA	#2
   2429  f483		       85 db		      STA	_Bit1_Ball_Dir_Down
   2430  f485				   .
   2431  f485							; 
   2432  f485
   2433  f485				   .
   2434  f485							; 
   2435  f485
   2436  f485				   .
   2437  f485							; 
   2438  f485
   2439  f485				   .
   2440  f485							; 
   2441  f485
   2442  f485				   .
   2443  f485							; 
   2444  f485
   2445  f485				   .
   2446  f485							; 
   2447  f485
   2448  f485				   .
   2449  f485							; 
   2450  f485
   2451  f485				   .L050		;  _Bit3_P0_Dir_Right{3}  =  1
   2452  f485
   2453  f485		       a5 da		      LDA	_Bit3_P0_Dir_Right
   2454  f487		       09 08		      ORA	#8
   2455  f489		       85 da		      STA	_Bit3_P0_Dir_Right
   2456  f48b				   .
   2457  f48b							; 
   2458  f48b
   2459  f48b				   .
   2460  f48b							; 
   2461  f48b
   2462  f48b				   .
   2463  f48b							; 
   2464  f48b
   2465  f48b				   .
   2466  f48b							; 
   2467  f48b
   2468  f48b				   .
   2469  f48b							; 
   2470  f48b
   2471  f48b				   .
   2472  f48b							; 
   2473  f48b
   2474  f48b				   .
   2475  f48b							; 
   2476  f48b
   2477  f48b				   .
   2478  f48b							; 
   2479  f48b
   2480  f48b				   .
   2481  f48b							; 
   2482  f48b
   2483  f48b				   .L051		;  _Bit0_Reset_Restrainer{0}  =  1
   2484  f48b
   2485  f48b		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2486  f48d		       09 01		      ORA	#1
   2487  f48f		       85 ec		      STA	_Bit0_Reset_Restrainer
   2488  f491				   .
   2489  f491							; 
   2490  f491
   2491  f491				   .
   2492  f491							; 
   2493  f491
   2494  f491				   .
   2495  f491							; 
   2496  f491
   2497  f491				   .
   2498  f491							; 
   2499  f491
   2500  f491				   .
   2501  f491							; 
   2502  f491
   2503  f491				   .
   2504  f491							; 
   2505  f491
   2506  f491				   .L052		;  player0:
   2507  f491
   2508  f491		       a2 42		      LDX	#<playerL052_0
   2509  f493		       86 8a		      STX	player0pointerlo
   2510  f495		       a9 fa		      LDA	#>playerL052_0
   2511  f497		       85 8b		      STA	player0pointerhi
   2512  f499		       a9 07		      LDA	#7
   2513  f49b		       85 8e		      STA	player0height
   2514  f49d				   .
   2515  f49d							; 
   2516  f49d
   2517  f49d				   .
   2518  f49d							; 
   2519  f49d
   2520  f49d				   .
   2521  f49d							; 
   2522  f49d
   2523  f49d				   .
   2524  f49d							; 
   2525  f49d
   2526  f49d				   .
   2527  f49d							; 
   2528  f49d
   2529  f49d				   .
   2530  f49d							; 
   2531  f49d
   2532  f49d				   .L053		;  _Bit4_Toggle_Screen  =  _Bit4_Toggle_Screen  ^  %00010000
   2533  f49d
   2534  f49d		       a5 ec		      LDA	_Bit4_Toggle_Screen
   2535  f49f		       49 10		      EOR	#%00010000
   2536  f4a1		       85 ec		      STA	_Bit4_Toggle_Screen
   2537  f4a3				   .
   2538  f4a3							; 
   2539  f4a3
   2540  f4a3				   .L054		;  if _Bit4_Toggle_Screen{4} then goto __Skip_Playfield_01
   2541  f4a3
   2542  f4a3		       a5 ec		      LDA	_Bit4_Toggle_Screen
   2543  f4a5		       29 10		      AND	#16
   2544  f4a7		       f0 03		      BEQ	.skipL054
   2545  f4a9				   .condpart1
   2546  f4a9		       4c e8 f4 	      jmp	.__Skip_Playfield_01
   2547  f4ac
   2548  f4ac				   .skipL054
   2549  f4ac				   .
   2550  f4ac							; 
   2551  f4ac
   2552  f4ac				   .L055		;  playfield:
   2553  f4ac
   2554  f4ac				  -	      ifconst	pfres
   2555  f4ac				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2556  f4ac					      else
   2557  f4ac		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2558  f4ae					      endif
   2559  f4ae		       4c dd f4 	      jmp	pflabel0
   2560  f4b1				   PF_data0
   2561  f4b1		       00 00		      .byte.b	%00000000, %00000000
   2562  f4b3					      if	(pfwidth>2)
   2563  f4b3		       00 00		      .byte.b	%00000000, %00000000
   2564  f4b5					      endif
   2565  f4b5		       00 00		      .byte.b	%00000000, %00000000
   2566  f4b7					      if	(pfwidth>2)
   2567  f4b7		       00 00		      .byte.b	%00000000, %00000000
   2568  f4b9					      endif
   2569  f4b9		       0f 3f		      .byte.b	%00001111, %00111111
   2570  f4bb					      if	(pfwidth>2)
   2571  f4bb		       3f 0f		      .byte.b	%00111111, %00001111
   2572  f4bd					      endif
   2573  f4bd		       08 00		      .byte.b	%00001000, %00000000
   2574  f4bf					      if	(pfwidth>2)
   2575  f4bf		       00 08		      .byte.b	%00000000, %00001000
   2576  f4c1					      endif
   2577  f4c1		       08 00		      .byte.b	%00001000, %00000000
   2578  f4c3					      if	(pfwidth>2)
   2579  f4c3		       00 08		      .byte.b	%00000000, %00001000
   2580  f4c5					      endif
   2581  f4c5		       08 00		      .byte.b	%00001000, %00000000
   2582  f4c7					      if	(pfwidth>2)
   2583  f4c7		       00 08		      .byte.b	%00000000, %00001000
   2584  f4c9					      endif
   2585  f4c9		       00 00		      .byte.b	%00000000, %00000000
   2586  f4cb					      if	(pfwidth>2)
   2587  f4cb		       00 00		      .byte.b	%00000000, %00000000
   2588  f4cd					      endif
   2589  f4cd		       00 00		      .byte.b	%00000000, %00000000
   2590  f4cf					      if	(pfwidth>2)
   2591  f4cf		       00 00		      .byte.b	%00000000, %00000000
   2592  f4d1					      endif
   2593  f4d1		       0f 70		      .byte.b	%00001111, %01110000
   2594  f4d3					      if	(pfwidth>2)
   2595  f4d3		       70 0f		      .byte.b	%01110000, %00001111
   2596  f4d5					      endif
   2597  f4d5		       00 00		      .byte.b	%00000000, %00000000
   2598  f4d7					      if	(pfwidth>2)
   2599  f4d7		       00 00		      .byte.b	%00000000, %00000000
   2600  f4d9					      endif
   2601  f4d9		       00 00		      .byte.b	%00000000, %00000000
   2602  f4db					      if	(pfwidth>2)
   2603  f4db		       00 00		      .byte.b	%00000000, %00000000
   2604  f4dd					      endif
   2605  f4dd				   pflabel0
   2606  f4dd		       bd b1 f4 	      lda	PF_data0,x
   2607  f4e0		       95 a4		      sta	playfield,x
   2608  f4e2		       ca		      dex
   2609  f4e3		       10 f8		      bpl	pflabel0
   2610  f4e5				   .
   2611  f4e5							; 
   2612  f4e5
   2613  f4e5				   .L056		;  goto __Skip_Playfield_02
   2614  f4e5
   2615  f4e5		       4c 21 f5 	      jmp	.__Skip_Playfield_02
   2616  f4e8
   2617  f4e8				   .
   2618  f4e8							; 
   2619  f4e8
   2620  f4e8				   .
   2621  f4e8							; 
   2622  f4e8
   2623  f4e8				   .__Skip_Playfield_01
   2624  f4e8							; __Skip_Playfield_01
   2625  f4e8
   2626  f4e8				   .
   2627  f4e8							; 
   2628  f4e8
   2629  f4e8				   .
   2630  f4e8							; 
   2631  f4e8
   2632  f4e8				   .L057		;  playfield:
   2633  f4e8
   2634  f4e8				  -	      ifconst	pfres
   2635  f4e8				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2636  f4e8					      else
   2637  f4e8		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2638  f4ea					      endif
   2639  f4ea		       4c 19 f5 	      jmp	pflabel1
   2640  f4ed				   PF_data1
   2641  f4ed		       00 00		      .byte.b	%00000000, %00000000
   2642  f4ef					      if	(pfwidth>2)
   2643  f4ef		       00 00		      .byte.b	%00000000, %00000000
   2644  f4f1					      endif
   2645  f4f1		       00 00		      .byte.b	%00000000, %00000000
   2646  f4f3					      if	(pfwidth>2)
   2647  f4f3		       00 00		      .byte.b	%00000000, %00000000
   2648  f4f5					      endif
   2649  f4f5		       0f 23		      .byte.b	%00001111, %00100011
   2650  f4f7					      if	(pfwidth>2)
   2651  f4f7		       23 08		      .byte.b	%00100011, %00001000
   2652  f4f9					      endif
   2653  f4f9		       00 20		      .byte.b	%00000000, %00100000
   2654  f4fb					      if	(pfwidth>2)
   2655  f4fb		       20 08		      .byte.b	%00100000, %00001000
   2656  f4fd					      endif
   2657  f4fd		       00 20		      .byte.b	%00000000, %00100000
   2658  f4ff					      if	(pfwidth>2)
   2659  f4ff		       20 08		      .byte.b	%00100000, %00001000
   2660  f501					      endif
   2661  f501		       0c 3c		      .byte.b	%00001100, %00111100
   2662  f503					      if	(pfwidth>2)
   2663  f503		       3c 08		      .byte.b	%00111100, %00001000
   2664  f505					      endif
   2665  f505		       00 00		      .byte.b	%00000000, %00000000
   2666  f507					      if	(pfwidth>2)
   2667  f507		       00 00		      .byte.b	%00000000, %00000000
   2668  f509					      endif
   2669  f509		       00 00		      .byte.b	%00000000, %00000000
   2670  f50b					      if	(pfwidth>2)
   2671  f50b		       00 00		      .byte.b	%00000000, %00000000
   2672  f50d					      endif
   2673  f50d		       0c e6		      .byte.b	%00001100, %11100110
   2674  f50f					      if	(pfwidth>2)
   2675  f50f		       e6 0c		      .byte.b	%11100110, %00001100
   2676  f511					      endif
   2677  f511		       00 00		      .byte.b	%00000000, %00000000
   2678  f513					      if	(pfwidth>2)
   2679  f513		       00 00		      .byte.b	%00000000, %00000000
   2680  f515					      endif
   2681  f515		       00 00		      .byte.b	%00000000, %00000000
   2682  f517					      if	(pfwidth>2)
   2683  f517		       00 00		      .byte.b	%00000000, %00000000
   2684  f519					      endif
   2685  f519				   pflabel1
   2686  f519		       bd ed f4 	      lda	PF_data1,x
   2687  f51c		       95 a4		      sta	playfield,x
   2688  f51e		       ca		      dex
   2689  f51f		       10 f8		      bpl	pflabel1
   2690  f521				   .
   2691  f521							; 
   2692  f521
   2693  f521				   .
   2694  f521							; 
   2695  f521
   2696  f521				   .__Skip_Playfield_02
   2697  f521							; __Skip_Playfield_02
   2698  f521
   2699  f521				   .
   2700  f521							; 
   2701  f521
   2702  f521				   .
   2703  f521							; 
   2704  f521
   2705  f521				   .
   2706  f521							; 
   2707  f521
   2708  f521				   .
   2709  f521							; 
   2710  f521
   2711  f521				   .
   2712  f521							; 
   2713  f521
   2714  f521				   .
   2715  f521							; 
   2716  f521
   2717  f521				   .
   2718  f521							; 
   2719  f521
   2720  f521				   .
   2721  f521							; 
   2722  f521
   2723  f521				   .
   2724  f521							; 
   2725  f521
   2726  f521				   .
   2727  f521							; 
   2728  f521
   2729  f521				   .
   2730  f521							; 
   2731  f521
   2732  f521				   .__Main_Loop
   2733  f521							; __Main_Loop
   2734  f521
   2735  f521				   .
   2736  f521							; 
   2737  f521
   2738  f521				   .
   2739  f521							; 
   2740  f521
   2741  f521				   .
   2742  f521							; 
   2743  f521
   2744  f521				   .
   2745  f521							; 
   2746  f521
   2747  f521				   .
   2748  f521							; 
   2749  f521
   2750  f521				   .
   2751  f521							; 
   2752  f521
   2753  f521				   .
   2754  f521							; 
   2755  f521
   2756  f521				   .L058		;  COLUP0  =  $9C
   2757  f521
   2758  f521		       a9 9c		      LDA	#$9C
   2759  f523		       85 06		      STA	COLUP0
   2760  f525				   .
   2761  f525							; 
   2762  f525
   2763  f525				   .
   2764  f525							; 
   2765  f525
   2766  f525				   .
   2767  f525							; 
   2768  f525
   2769  f525				   .
   2770  f525							; 
   2771  f525
   2772  f525				   .
   2773  f525							; 
   2774  f525
   2775  f525				   .
   2776  f525							; 
   2777  f525
   2778  f525				   .
   2779  f525							; 
   2780  f525
   2781  f525				   .
   2782  f525							; 
   2783  f525
   2784  f525				   .
   2785  f525							; 
   2786  f525
   2787  f525				   .
   2788  f525							; 
   2789  f525
   2790  f525				   .L059		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   2791  f525
   2792  f525		       a9 10		      lda	#$10
   2793  f527		       2c 80 02 	      bit	SWCHA
   2794  f52a		       f0 14		      BEQ	.skipL059
   2795  f52c				   .condpart2
   2796  f52c		       a9 20		      lda	#$20
   2797  f52e		       2c 80 02 	      bit	SWCHA
   2798  f531		       f0 0d		      BEQ	.skip2then
   2799  f533				   .condpart3
   2800  f533		       2c 80 02 	      bit	SWCHA
   2801  f536		       50 08		      BVC	.skip3then
   2802  f538				   .condpart4
   2803  f538		       2c 80 02 	      bit	SWCHA
   2804  f53b		       10 03		      BPL	.skip4then
   2805  f53d				   .condpart5
   2806  f53d		       4c 46 f5 	      jmp	.__Skip_Joystick_Precheck
   2807  f540
   2808  f540				   .skip4then
   2809  f540				   .skip3then
   2810  f540				   .skip2then
   2811  f540				   .skipL059
   2812  f540				   .
   2813  f540							; 
   2814  f540
   2815  f540				   .
   2816  f540							; 
   2817  f540
   2818  f540				   .
   2819  f540							; 
   2820  f540
   2821  f540				   .
   2822  f540							; 
   2823  f540
   2824  f540				   .L060		;  _BitOp_P0_M0_Dir  =  _BitOp_P0_M0_Dir  &  %11110000
   2825  f540
   2826  f540		       a5 da		      LDA	_BitOp_P0_M0_Dir
   2827  f542		       29 f0		      AND	#%11110000
   2828  f544		       85 da		      STA	_BitOp_P0_M0_Dir
   2829  f546				   .
   2830  f546							; 
   2831  f546
   2832  f546				   .__Skip_Joystick_Precheck
   2833  f546							; __Skip_Joystick_Precheck
   2834  f546
   2835  f546				   .
   2836  f546							; 
   2837  f546
   2838  f546				   .
   2839  f546							; 
   2840  f546
   2841  f546				   .
   2842  f546							; 
   2843  f546
   2844  f546				   .
   2845  f546							; 
   2846  f546
   2847  f546				   .
   2848  f546							; 
   2849  f546
   2850  f546				   .
   2851  f546							; 
   2852  f546
   2853  f546				   .
   2854  f546							; 
   2855  f546
   2856  f546				   .
   2857  f546							; 
   2858  f546
   2859  f546				   .
   2860  f546							; 
   2861  f546
   2862  f546				   .
   2863  f546							; 
   2864  f546
   2865  f546				   .L061		;  if !joy0up then goto __Skip_Joy0_Up
   2866  f546
   2867  f546		       a9 10		      lda	#$10
   2868  f548		       2c 80 02 	      bit	SWCHA
   2869  f54b		       f0 03		      BEQ	.skipL061
   2870  f54d				   .condpart6
   2871  f54d		       4c ba f5 	      jmp	.__Skip_Joy0_Up
   2872  f550
   2873  f550				   .skipL061
   2874  f550				   .
   2875  f550							; 
   2876  f550
   2877  f550				   .
   2878  f550							; 
   2879  f550
   2880  f550				   .
   2881  f550							; 
   2882  f550
   2883  f550				   .
   2884  f550							; 
   2885  f550
   2886  f550				   .L062		;  _Bit0_P0_Dir_Up{0}	=  1
   2887  f550
   2888  f550		       a5 da		      LDA	_Bit0_P0_Dir_Up
   2889  f552		       09 01		      ORA	#1
   2890  f554		       85 da		      STA	_Bit0_P0_Dir_Up
   2891  f556				   .
   2892  f556							; 
   2893  f556
   2894  f556				   .
   2895  f556							; 
   2896  f556
   2897  f556				   .
   2898  f556							; 
   2899  f556
   2900  f556				   .
   2901  f556							; 
   2902  f556
   2903  f556				   .L063		;  if player0y  <=  _P_Edge_Top then goto __Skip_Joy0_Up
   2904  f556
   2905  f556		       a9 09		      LDA	#_P_Edge_Top
   2906  f558		       c5 85		      CMP	player0y
   2907  f55a		       90 03		      BCC	.skipL063
   2908  f55c				   .condpart7
   2909  f55c		       4c ba f5 	      jmp	.__Skip_Joy0_Up
   2910  f55f
   2911  f55f				   .skipL063
   2912  f55f				   .
   2913  f55f							; 
   2914  f55f
   2915  f55f				   .
   2916  f55f							; 
   2917  f55f
   2918  f55f				   .
   2919  f55f							; 
   2920  f55f
   2921  f55f				   .
   2922  f55f							; 
   2923  f55f
   2924  f55f				   .L064		;  temp5  =   ( player0x - 10 )  / 4
   2925  f55f
   2926  f55f							; complex statement detected
   2927  f55f		       a5 80		      LDA	player0x
   2928  f561		       38		      SEC
   2929  f562		       e9 0a		      SBC	#10
   2930  f564		       4a		      lsr
   2931  f565		       4a		      lsr
   2932  f566		       85 a0		      STA	temp5
   2933  f568				   .
   2934  f568							; 
   2935  f568
   2936  f568				   .L065		;  temp6  =   ( player0y - 9 )  / 8
   2937  f568
   2938  f568							; complex statement detected
   2939  f568		       a5 85		      LDA	player0y
   2940  f56a		       38		      SEC
   2941  f56b		       e9 09		      SBC	#9
   2942  f56d		       4a		      lsr
   2943  f56e		       4a		      lsr
   2944  f56f		       4a		      lsr
   2945  f570		       85 a1		      STA	temp6
   2946  f572				   .
   2947  f572							; 
   2948  f572
   2949  f572				   .L066		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   2950  f572
   2951  f572		       a5 a0		      LDA	temp5
   2952  f574		       c9 22		      CMP	#34
   2953  f576		       b0 0c		      BCS	.skipL066
   2954  f578				   .condpart8
   2955  f578		       a5 a0		      LDA	temp5
   2956  f57a		       a4 a1		      LDY	temp6
   2957  f57c		       20 d6 f1 	      jsr	pfread
   2958  f57f		       d0 03		      BNE	.skip8then
   2959  f581				   .condpart9
   2960  f581		       4c ba f5 	      jmp	.__Skip_Joy0_Up
   2961  f584
   2962  f584				   .skip8then
   2963  f584				   .skipL066
   2964  f584				   .
   2965  f584							; 
   2966  f584
   2967  f584				   .L067		;  temp4  =   ( player0x - 17 )  / 4
   2968  f584
   2969  f584							; complex statement detected
   2970  f584		       a5 80		      LDA	player0x
   2971  f586		       38		      SEC
   2972  f587		       e9 11		      SBC	#17
   2973  f589		       4a		      lsr
   2974  f58a		       4a		      lsr
   2975  f58b		       85 9f		      STA	temp4
   2976  f58d				   .
   2977  f58d							; 
   2978  f58d
   2979  f58d				   .L068		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   2980  f58d
   2981  f58d		       a5 9f		      LDA	temp4
   2982  f58f		       c9 22		      CMP	#34
   2983  f591		       b0 0c		      BCS	.skipL068
   2984  f593				   .condpart10
   2985  f593		       a5 9f		      LDA	temp4
   2986  f595		       a4 a1		      LDY	temp6
   2987  f597		       20 d6 f1 	      jsr	pfread
   2988  f59a		       d0 03		      BNE	.skip10then
   2989  f59c				   .condpart11
   2990  f59c		       4c ba f5 	      jmp	.__Skip_Joy0_Up
   2991  f59f
   2992  f59f				   .skip10then
   2993  f59f				   .skipL068
   2994  f59f				   .
   2995  f59f							; 
   2996  f59f
   2997  f59f				   .L069		;  temp3  =  temp5  -	1
   2998  f59f
   2999  f59f		       a5 a0		      LDA	temp5
   3000  f5a1		       38		      SEC
   3001  f5a2		       e9 01		      SBC	#1
   3002  f5a4		       85 9e		      STA	temp3
   3003  f5a6				   .
   3004  f5a6							; 
   3005  f5a6
   3006  f5a6				   .L070		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   3007  f5a6
   3008  f5a6		       a5 9e		      LDA	temp3
   3009  f5a8		       c9 22		      CMP	#34
   3010  f5aa		       b0 0c		      BCS	.skipL070
   3011  f5ac				   .condpart12
   3012  f5ac		       a5 9e		      LDA	temp3
   3013  f5ae		       a4 a1		      LDY	temp6
   3014  f5b0		       20 d6 f1 	      jsr	pfread
   3015  f5b3		       d0 03		      BNE	.skip12then
   3016  f5b5				   .condpart13
   3017  f5b5		       4c ba f5 	      jmp	.__Skip_Joy0_Up
   3018  f5b8
   3019  f5b8				   .skip12then
   3020  f5b8				   .skipL070
   3021  f5b8				   .
   3022  f5b8							; 
   3023  f5b8
   3024  f5b8				   .
   3025  f5b8							; 
   3026  f5b8
   3027  f5b8				   .
   3028  f5b8							; 
   3029  f5b8
   3030  f5b8				   .
   3031  f5b8							; 
   3032  f5b8
   3033  f5b8				   .L071		;  player0y  =  player0y  -  1
   3034  f5b8
   3035  f5b8		       c6 85		      DEC	player0y
   3036  f5ba				   .
   3037  f5ba							; 
   3038  f5ba
   3039  f5ba				   .__Skip_Joy0_Up
   3040  f5ba							; __Skip_Joy0_Up
   3041  f5ba
   3042  f5ba				   .
   3043  f5ba							; 
   3044  f5ba
   3045  f5ba				   .
   3046  f5ba							; 
   3047  f5ba
   3048  f5ba				   .
   3049  f5ba							; 
   3050  f5ba
   3051  f5ba				   .
   3052  f5ba							; 
   3053  f5ba
   3054  f5ba				   .
   3055  f5ba							; 
   3056  f5ba
   3057  f5ba				   .
   3058  f5ba							; 
   3059  f5ba
   3060  f5ba				   .
   3061  f5ba							; 
   3062  f5ba
   3063  f5ba				   .
   3064  f5ba							; 
   3065  f5ba
   3066  f5ba				   .
   3067  f5ba							; 
   3068  f5ba
   3069  f5ba				   .
   3070  f5ba							; 
   3071  f5ba
   3072  f5ba				   .L072		;  if !joy0down then goto __Skip_Joy0_Down
   3073  f5ba
   3074  f5ba		       a9 20		      lda	#$20
   3075  f5bc		       2c 80 02 	      bit	SWCHA
   3076  f5bf		       f0 03		      BEQ	.skipL072
   3077  f5c1				   .condpart14
   3078  f5c1		       4c 2b f6 	      jmp	.__Skip_Joy0_Down
   3079  f5c4
   3080  f5c4				   .skipL072
   3081  f5c4				   .
   3082  f5c4							; 
   3083  f5c4
   3084  f5c4				   .
   3085  f5c4							; 
   3086  f5c4
   3087  f5c4				   .
   3088  f5c4							; 
   3089  f5c4
   3090  f5c4				   .
   3091  f5c4							; 
   3092  f5c4
   3093  f5c4				   .L073		;  _Bit1_P0_Dir_Down{1}  =  1
   3094  f5c4
   3095  f5c4		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3096  f5c6		       09 02		      ORA	#2
   3097  f5c8		       85 da		      STA	_Bit1_P0_Dir_Down
   3098  f5ca				   .
   3099  f5ca							; 
   3100  f5ca
   3101  f5ca				   .
   3102  f5ca							; 
   3103  f5ca
   3104  f5ca				   .
   3105  f5ca							; 
   3106  f5ca
   3107  f5ca				   .
   3108  f5ca							; 
   3109  f5ca
   3110  f5ca				   .L074		;  if player0y  >=  _P_Edge_Bottom then goto __Skip_Joy0_Down
   3111  f5ca
   3112  f5ca		       a5 85		      LDA	player0y
   3113  f5cc		       c9 58		      CMP	#_P_Edge_Bottom
   3114  f5ce		       90 03		      BCC	.skipL074
   3115  f5d0				   .condpart15
   3116  f5d0		       4c 2b f6 	      jmp	.__Skip_Joy0_Down
   3117  f5d3
   3118  f5d3				   .skipL074
   3119  f5d3				   .
   3120  f5d3							; 
   3121  f5d3
   3122  f5d3				   .
   3123  f5d3							; 
   3124  f5d3
   3125  f5d3				   .
   3126  f5d3							; 
   3127  f5d3
   3128  f5d3				   .
   3129  f5d3							; 
   3130  f5d3
   3131  f5d3				   .L075		;  temp5  =   ( player0x - 10 )  / 4
   3132  f5d3
   3133  f5d3							; complex statement detected
   3134  f5d3		       a5 80		      LDA	player0x
   3135  f5d5		       38		      SEC
   3136  f5d6		       e9 0a		      SBC	#10
   3137  f5d8		       4a		      lsr
   3138  f5d9		       4a		      lsr
   3139  f5da		       85 a0		      STA	temp5
   3140  f5dc				   .
   3141  f5dc							; 
   3142  f5dc
   3143  f5dc				   .L076		;  temp6  =   ( player0y )  / 8
   3144  f5dc
   3145  f5dc							; complex statement detected
   3146  f5dc		       a5 85		      LDA	player0y
   3147  f5de		       4a		      lsr
   3148  f5df		       4a		      lsr
   3149  f5e0		       4a		      lsr
   3150  f5e1		       85 a1		      STA	temp6
   3151  f5e3				   .
   3152  f5e3							; 
   3153  f5e3
   3154  f5e3				   .L077		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   3155  f5e3
   3156  f5e3		       a5 a0		      LDA	temp5
   3157  f5e5		       c9 22		      CMP	#34
   3158  f5e7		       b0 0c		      BCS	.skipL077
   3159  f5e9				   .condpart16
   3160  f5e9		       a5 a0		      LDA	temp5
   3161  f5eb		       a4 a1		      LDY	temp6
   3162  f5ed		       20 d6 f1 	      jsr	pfread
   3163  f5f0		       d0 03		      BNE	.skip16then
   3164  f5f2				   .condpart17
   3165  f5f2		       4c 2b f6 	      jmp	.__Skip_Joy0_Down
   3166  f5f5
   3167  f5f5				   .skip16then
   3168  f5f5				   .skipL077
   3169  f5f5				   .
   3170  f5f5							; 
   3171  f5f5
   3172  f5f5				   .L078		;  temp4  =   ( player0x - 17 )  / 4
   3173  f5f5
   3174  f5f5							; complex statement detected
   3175  f5f5		       a5 80		      LDA	player0x
   3176  f5f7		       38		      SEC
   3177  f5f8		       e9 11		      SBC	#17
   3178  f5fa		       4a		      lsr
   3179  f5fb		       4a		      lsr
   3180  f5fc		       85 9f		      STA	temp4
   3181  f5fe				   .
   3182  f5fe							; 
   3183  f5fe
   3184  f5fe				   .L079		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   3185  f5fe
   3186  f5fe		       a5 9f		      LDA	temp4
   3187  f600		       c9 22		      CMP	#34
   3188  f602		       b0 0c		      BCS	.skipL079
   3189  f604				   .condpart18
   3190  f604		       a5 9f		      LDA	temp4
   3191  f606		       a4 a1		      LDY	temp6
   3192  f608		       20 d6 f1 	      jsr	pfread
   3193  f60b		       d0 03		      BNE	.skip18then
   3194  f60d				   .condpart19
   3195  f60d		       4c 2b f6 	      jmp	.__Skip_Joy0_Down
   3196  f610
   3197  f610				   .skip18then
   3198  f610				   .skipL079
   3199  f610				   .
   3200  f610							; 
   3201  f610
   3202  f610				   .L080		;  temp3  =  temp5  -	1
   3203  f610
   3204  f610		       a5 a0		      LDA	temp5
   3205  f612		       38		      SEC
   3206  f613		       e9 01		      SBC	#1
   3207  f615		       85 9e		      STA	temp3
   3208  f617				   .
   3209  f617							; 
   3210  f617
   3211  f617				   .L081		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   3212  f617
   3213  f617		       a5 9e		      LDA	temp3
   3214  f619		       c9 22		      CMP	#34
   3215  f61b		       b0 0c		      BCS	.skipL081
   3216  f61d				   .condpart20
   3217  f61d		       a5 9e		      LDA	temp3
   3218  f61f		       a4 a1		      LDY	temp6
   3219  f621		       20 d6 f1 	      jsr	pfread
   3220  f624		       d0 03		      BNE	.skip20then
   3221  f626				   .condpart21
   3222  f626		       4c 2b f6 	      jmp	.__Skip_Joy0_Down
   3223  f629
   3224  f629				   .skip20then
   3225  f629				   .skipL081
   3226  f629				   .
   3227  f629							; 
   3228  f629
   3229  f629				   .
   3230  f629							; 
   3231  f629
   3232  f629				   .
   3233  f629							; 
   3234  f629
   3235  f629				   .
   3236  f629							; 
   3237  f629
   3238  f629				   .L082		;  player0y  =  player0y  +  1
   3239  f629
   3240  f629		       e6 85		      INC	player0y
   3241  f62b				   .
   3242  f62b							; 
   3243  f62b
   3244  f62b				   .__Skip_Joy0_Down
   3245  f62b							; __Skip_Joy0_Down
   3246  f62b
   3247  f62b				   .
   3248  f62b							; 
   3249  f62b
   3250  f62b				   .
   3251  f62b							; 
   3252  f62b
   3253  f62b				   .
   3254  f62b							; 
   3255  f62b
   3256  f62b				   .
   3257  f62b							; 
   3258  f62b
   3259  f62b				   .
   3260  f62b							; 
   3261  f62b
   3262  f62b				   .
   3263  f62b							; 
   3264  f62b
   3265  f62b				   .
   3266  f62b							; 
   3267  f62b
   3268  f62b				   .
   3269  f62b							; 
   3270  f62b
   3271  f62b				   .
   3272  f62b							; 
   3273  f62b
   3274  f62b				   .
   3275  f62b							; 
   3276  f62b
   3277  f62b				   .L083		;  if !joy0left then goto __Skip_Joy0_Left
   3278  f62b
   3279  f62b		       2c 80 02 	      bit	SWCHA
   3280  f62e		       50 03		      BVC	.skipL083
   3281  f630				   .condpart22
   3282  f630		       4c 85 f6 	      jmp	.__Skip_Joy0_Left
   3283  f633
   3284  f633				   .skipL083
   3285  f633				   .
   3286  f633							; 
   3287  f633
   3288  f633				   .
   3289  f633							; 
   3290  f633
   3291  f633				   .
   3292  f633							; 
   3293  f633
   3294  f633				   .
   3295  f633							; 
   3296  f633
   3297  f633				   .L084		;  _Bit2_P0_Dir_Left{2}  =  1
   3298  f633
   3299  f633		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3300  f635		       09 04		      ORA	#4
   3301  f637		       85 da		      STA	_Bit2_P0_Dir_Left
   3302  f639				   .
   3303  f639							; 
   3304  f639
   3305  f639				   .
   3306  f639							; 
   3307  f639
   3308  f639				   .
   3309  f639							; 
   3310  f639
   3311  f639				   .
   3312  f639							; 
   3313  f639
   3314  f639				   .L085		;  if player0x  <=  _P_Edge_Left then goto __Skip_Joy0_Left
   3315  f639
   3316  f639		       a9 01		      LDA	#_P_Edge_Left
   3317  f63b		       c5 80		      CMP	player0x
   3318  f63d		       90 03		      BCC	.skipL085
   3319  f63f				   .condpart23
   3320  f63f		       4c 85 f6 	      jmp	.__Skip_Joy0_Left
   3321  f642
   3322  f642				   .skipL085
   3323  f642				   .
   3324  f642							; 
   3325  f642
   3326  f642				   .
   3327  f642							; 
   3328  f642
   3329  f642				   .
   3330  f642							; 
   3331  f642
   3332  f642				   .
   3333  f642							; 
   3334  f642
   3335  f642				   .L086		;  temp5  =   ( player0y - 1 )  / 8
   3336  f642
   3337  f642							; complex statement detected
   3338  f642		       a5 85		      LDA	player0y
   3339  f644		       38		      SEC
   3340  f645		       e9 01		      SBC	#1
   3341  f647		       4a		      lsr
   3342  f648		       4a		      lsr
   3343  f649		       4a		      lsr
   3344  f64a		       85 a0		      STA	temp5
   3345  f64c				   .
   3346  f64c							; 
   3347  f64c
   3348  f64c				   .L087		;  temp6  =   ( player0x - 18 )  / 4
   3349  f64c
   3350  f64c							; complex statement detected
   3351  f64c		       a5 80		      LDA	player0x
   3352  f64e		       38		      SEC
   3353  f64f		       e9 12		      SBC	#18
   3354  f651		       4a		      lsr
   3355  f652		       4a		      lsr
   3356  f653		       85 a1		      STA	temp6
   3357  f655				   .
   3358  f655							; 
   3359  f655
   3360  f655				   .L088		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   3361  f655
   3362  f655		       a5 a1		      LDA	temp6
   3363  f657		       c9 22		      CMP	#34
   3364  f659		       b0 0c		      BCS	.skipL088
   3365  f65b				   .condpart24
   3366  f65b		       a5 a1		      LDA	temp6
   3367  f65d		       a4 a0		      LDY	temp5
   3368  f65f		       20 d6 f1 	      jsr	pfread
   3369  f662		       d0 03		      BNE	.skip24then
   3370  f664				   .condpart25
   3371  f664		       4c 85 f6 	      jmp	.__Skip_Joy0_Left
   3372  f667
   3373  f667				   .skip24then
   3374  f667				   .skipL088
   3375  f667				   .
   3376  f667							; 
   3377  f667
   3378  f667				   .L089		;  temp3  =   ( player0y - 8 )  / 8
   3379  f667
   3380  f667							; complex statement detected
   3381  f667		       a5 85		      LDA	player0y
   3382  f669		       38		      SEC
   3383  f66a		       e9 08		      SBC	#8
   3384  f66c		       4a		      lsr
   3385  f66d		       4a		      lsr
   3386  f66e		       4a		      lsr
   3387  f66f		       85 9e		      STA	temp3
   3388  f671				   .
   3389  f671							; 
   3390  f671
   3391  f671				   .L090		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   3392  f671
   3393  f671		       a5 a1		      LDA	temp6
   3394  f673		       c9 22		      CMP	#34
   3395  f675		       b0 0c		      BCS	.skipL090
   3396  f677				   .condpart26
   3397  f677		       a5 a1		      LDA	temp6
   3398  f679		       a4 9e		      LDY	temp3
   3399  f67b		       20 d6 f1 	      jsr	pfread
   3400  f67e		       d0 03		      BNE	.skip26then
   3401  f680				   .condpart27
   3402  f680		       4c 85 f6 	      jmp	.__Skip_Joy0_Left
   3403  f683
   3404  f683				   .skip26then
   3405  f683				   .skipL090
   3406  f683				   .
   3407  f683							; 
   3408  f683
   3409  f683				   .
   3410  f683							; 
   3411  f683
   3412  f683				   .
   3413  f683							; 
   3414  f683
   3415  f683				   .
   3416  f683							; 
   3417  f683
   3418  f683				   .L091		;  player0x  =  player0x  -  1
   3419  f683
   3420  f683		       c6 80		      DEC	player0x
   3421  f685				   .
   3422  f685							; 
   3423  f685
   3424  f685				   .__Skip_Joy0_Left
   3425  f685							; __Skip_Joy0_Left
   3426  f685
   3427  f685				   .
   3428  f685							; 
   3429  f685
   3430  f685				   .
   3431  f685							; 
   3432  f685
   3433  f685				   .
   3434  f685							; 
   3435  f685
   3436  f685				   .
   3437  f685							; 
   3438  f685
   3439  f685				   .
   3440  f685							; 
   3441  f685
   3442  f685				   .
   3443  f685							; 
   3444  f685
   3445  f685				   .
   3446  f685							; 
   3447  f685
   3448  f685				   .
   3449  f685							; 
   3450  f685
   3451  f685				   .
   3452  f685							; 
   3453  f685
   3454  f685				   .
   3455  f685							; 
   3456  f685
   3457  f685				   .L092		;  if !joy0right then goto __Skip_Joy0_Right
   3458  f685
   3459  f685		       2c 80 02 	      bit	SWCHA
   3460  f688		       10 03		      BPL	.skipL092
   3461  f68a				   .condpart28
   3462  f68a		       4c df f6 	      jmp	.__Skip_Joy0_Right
   3463  f68d
   3464  f68d				   .skipL092
   3465  f68d				   .
   3466  f68d							; 
   3467  f68d
   3468  f68d				   .
   3469  f68d							; 
   3470  f68d
   3471  f68d				   .
   3472  f68d							; 
   3473  f68d
   3474  f68d				   .
   3475  f68d							; 
   3476  f68d
   3477  f68d				   .L093		;  _Bit3_P0_Dir_Right{3}  =  1
   3478  f68d
   3479  f68d		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3480  f68f		       09 08		      ORA	#8
   3481  f691		       85 da		      STA	_Bit3_P0_Dir_Right
   3482  f693				   .
   3483  f693							; 
   3484  f693
   3485  f693				   .
   3486  f693							; 
   3487  f693
   3488  f693				   .
   3489  f693							; 
   3490  f693
   3491  f693				   .
   3492  f693							; 
   3493  f693
   3494  f693				   .L094		;  if player0x  >=  _P_Edge_Right then goto __Skip_Joy0_Right
   3495  f693
   3496  f693		       a5 80		      LDA	player0x
   3497  f695		       c9 99		      CMP	#_P_Edge_Right
   3498  f697		       90 03		      BCC	.skipL094
   3499  f699				   .condpart29
   3500  f699		       4c df f6 	      jmp	.__Skip_Joy0_Right
   3501  f69c
   3502  f69c				   .skipL094
   3503  f69c				   .
   3504  f69c							; 
   3505  f69c
   3506  f69c				   .
   3507  f69c							; 
   3508  f69c
   3509  f69c				   .
   3510  f69c							; 
   3511  f69c
   3512  f69c				   .
   3513  f69c							; 
   3514  f69c
   3515  f69c				   .L095		;  temp5  =   ( player0y - 1 )  / 8
   3516  f69c
   3517  f69c							; complex statement detected
   3518  f69c		       a5 85		      LDA	player0y
   3519  f69e		       38		      SEC
   3520  f69f		       e9 01		      SBC	#1
   3521  f6a1		       4a		      lsr
   3522  f6a2		       4a		      lsr
   3523  f6a3		       4a		      lsr
   3524  f6a4		       85 a0		      STA	temp5
   3525  f6a6				   .
   3526  f6a6							; 
   3527  f6a6
   3528  f6a6				   .L096		;  temp6  =   ( player0x - 9 )  / 4
   3529  f6a6
   3530  f6a6							; complex statement detected
   3531  f6a6		       a5 80		      LDA	player0x
   3532  f6a8		       38		      SEC
   3533  f6a9		       e9 09		      SBC	#9
   3534  f6ab		       4a		      lsr
   3535  f6ac		       4a		      lsr
   3536  f6ad		       85 a1		      STA	temp6
   3537  f6af				   .
   3538  f6af							; 
   3539  f6af
   3540  f6af				   .L097		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   3541  f6af
   3542  f6af		       a5 a1		      LDA	temp6
   3543  f6b1		       c9 22		      CMP	#34
   3544  f6b3		       b0 0c		      BCS	.skipL097
   3545  f6b5				   .condpart30
   3546  f6b5		       a5 a1		      LDA	temp6
   3547  f6b7		       a4 a0		      LDY	temp5
   3548  f6b9		       20 d6 f1 	      jsr	pfread
   3549  f6bc		       d0 03		      BNE	.skip30then
   3550  f6be				   .condpart31
   3551  f6be		       4c df f6 	      jmp	.__Skip_Joy0_Right
   3552  f6c1
   3553  f6c1				   .skip30then
   3554  f6c1				   .skipL097
   3555  f6c1				   .
   3556  f6c1							; 
   3557  f6c1
   3558  f6c1				   .L098		;  temp3  =   ( player0y - 8 )  / 8
   3559  f6c1
   3560  f6c1							; complex statement detected
   3561  f6c1		       a5 85		      LDA	player0y
   3562  f6c3		       38		      SEC
   3563  f6c4		       e9 08		      SBC	#8
   3564  f6c6		       4a		      lsr
   3565  f6c7		       4a		      lsr
   3566  f6c8		       4a		      lsr
   3567  f6c9		       85 9e		      STA	temp3
   3568  f6cb				   .
   3569  f6cb							; 
   3570  f6cb
   3571  f6cb				   .L099		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   3572  f6cb
   3573  f6cb		       a5 a1		      LDA	temp6
   3574  f6cd		       c9 22		      CMP	#34
   3575  f6cf		       b0 0c		      BCS	.skipL099
   3576  f6d1				   .condpart32
   3577  f6d1		       a5 a1		      LDA	temp6
   3578  f6d3		       a4 9e		      LDY	temp3
   3579  f6d5		       20 d6 f1 	      jsr	pfread
   3580  f6d8		       d0 03		      BNE	.skip32then
   3581  f6da				   .condpart33
   3582  f6da		       4c df f6 	      jmp	.__Skip_Joy0_Right
   3583  f6dd
   3584  f6dd				   .skip32then
   3585  f6dd				   .skipL099
   3586  f6dd				   .
   3587  f6dd							; 
   3588  f6dd
   3589  f6dd				   .
   3590  f6dd							; 
   3591  f6dd
   3592  f6dd				   .
   3593  f6dd							; 
   3594  f6dd
   3595  f6dd				   .
   3596  f6dd							; 
   3597  f6dd
   3598  f6dd				   .L0100		;  player0x  =  player0x  +  1
   3599  f6dd
   3600  f6dd		       e6 80		      INC	player0x
   3601  f6df				   .
   3602  f6df							; 
   3603  f6df
   3604  f6df				   .__Skip_Joy0_Right
   3605  f6df							; __Skip_Joy0_Right
   3606  f6df
   3607  f6df				   .
   3608  f6df							; 
   3609  f6df
   3610  f6df				   .
   3611  f6df							; 
   3612  f6df
   3613  f6df				   .
   3614  f6df							; 
   3615  f6df
   3616  f6df				   .
   3617  f6df							; 
   3618  f6df
   3619  f6df				   .
   3620  f6df							; 
   3621  f6df
   3622  f6df				   .
   3623  f6df							; 
   3624  f6df
   3625  f6df				   .
   3626  f6df							; 
   3627  f6df
   3628  f6df				   .
   3629  f6df							; 
   3630  f6df
   3631  f6df				   .
   3632  f6df							; 
   3633  f6df
   3634  f6df				   .
   3635  f6df							; 
   3636  f6df
   3637  f6df				   .L0101		;  _Bit4_Ball_Hit_UD{4}  =  0
   3638  f6df
   3639  f6df		       a5 db		      LDA	_Bit4_Ball_Hit_UD
   3640  f6e1		       29 ef		      AND	#239
   3641  f6e3		       85 db		      STA	_Bit4_Ball_Hit_UD
   3642  f6e5				   .
   3643  f6e5							; 
   3644  f6e5
   3645  f6e5				   .
   3646  f6e5							; 
   3647  f6e5
   3648  f6e5				   .
   3649  f6e5							; 
   3650  f6e5
   3651  f6e5				   .
   3652  f6e5							; 
   3653  f6e5
   3654  f6e5				   .
   3655  f6e5							; 
   3656  f6e5
   3657  f6e5				   .
   3658  f6e5							; 
   3659  f6e5
   3660  f6e5				   .
   3661  f6e5							; 
   3662  f6e5
   3663  f6e5				   .
   3664  f6e5							; 
   3665  f6e5
   3666  f6e5				   .
   3667  f6e5							; 
   3668  f6e5
   3669  f6e5				   .
   3670  f6e5							; 
   3671  f6e5
   3672  f6e5				   .L0102		;  if !_Bit0_Ball_Dir_Up{0} then goto __Skip_Ball_Up
   3673  f6e5
   3674  f6e5		       a5 db		      LDA	_Bit0_Ball_Dir_Up
   3675  f6e7		       4a		      LSR
   3676  f6e8		       b0 03		      BCS	.skipL0102
   3677  f6ea				   .condpart34
   3678  f6ea		       4c 62 f7 	      jmp	.__Skip_Ball_Up
   3679  f6ed
   3680  f6ed				   .skipL0102
   3681  f6ed				   .
   3682  f6ed							; 
   3683  f6ed
   3684  f6ed				   .
   3685  f6ed							; 
   3686  f6ed
   3687  f6ed				   .
   3688  f6ed							; 
   3689  f6ed
   3690  f6ed				   .
   3691  f6ed							; 
   3692  f6ed
   3693  f6ed				   .L0103		;  if bally  <=  _B_Edge_Top then goto __Reverse_Ball_Up
   3694  f6ed
   3695  f6ed		       a9 02		      LDA	#_B_Edge_Top
   3696  f6ef		       c5 89		      CMP	bally
   3697  f6f1		       90 03		      BCC	.skipL0103
   3698  f6f3				   .condpart35
   3699  f6f3		       4c 31 f7 	      jmp	.__Reverse_Ball_Up
   3700  f6f6
   3701  f6f6				   .skipL0103
   3702  f6f6				   .
   3703  f6f6							; 
   3704  f6f6
   3705  f6f6				   .
   3706  f6f6							; 
   3707  f6f6
   3708  f6f6				   .
   3709  f6f6							; 
   3710  f6f6
   3711  f6f6				   .
   3712  f6f6							; 
   3713  f6f6
   3714  f6f6				   .L0104		;  temp5  =   ( ballx - 18 )  / 4
   3715  f6f6
   3716  f6f6							; complex statement detected
   3717  f6f6		       a5 84		      LDA	ballx
   3718  f6f8		       38		      SEC
   3719  f6f9		       e9 12		      SBC	#18
   3720  f6fb		       4a		      lsr
   3721  f6fc		       4a		      lsr
   3722  f6fd		       85 a0		      STA	temp5
   3723  f6ff				   .
   3724  f6ff							; 
   3725  f6ff
   3726  f6ff				   .L0105		;  temp6  =   ( bally - 2 )  / 8
   3727  f6ff
   3728  f6ff							; complex statement detected
   3729  f6ff		       a5 89		      LDA	bally
   3730  f701		       38		      SEC
   3731  f702		       e9 02		      SBC	#2
   3732  f704		       4a		      lsr
   3733  f705		       4a		      lsr
   3734  f706		       4a		      lsr
   3735  f707		       85 a1		      STA	temp6
   3736  f709				   .
   3737  f709							; 
   3738  f709
   3739  f709				   .L0106		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then _Bit4_Ball_Hit_UD{4}  =  1  :  goto __Reverse_Ball_Up
   3740  f709
   3741  f709		       a5 a0		      LDA	temp5
   3742  f70b		       c9 22		      CMP	#34
   3743  f70d		       b0 12		      BCS	.skipL0106
   3744  f70f				   .condpart36
   3745  f70f		       a5 a0		      LDA	temp5
   3746  f711		       a4 a1		      LDY	temp6
   3747  f713		       20 d6 f1 	      jsr	pfread
   3748  f716		       d0 09		      BNE	.skip36then
   3749  f718				   .condpart37
   3750  f718		       a5 db		      LDA	_Bit4_Ball_Hit_UD
   3751  f71a		       09 10		      ORA	#16
   3752  f71c		       85 db		      STA	_Bit4_Ball_Hit_UD
   3753  f71e		       4c 31 f7 	      jmp	.__Reverse_Ball_Up
   3754  f721
   3755  f721				   .skip36then
   3756  f721				   .skipL0106
   3757  f721				   .
   3758  f721							; 
   3759  f721
   3760  f721				   .
   3761  f721							; 
   3762  f721
   3763  f721				   .
   3764  f721							; 
   3765  f721
   3766  f721				   .
   3767  f721							; 
   3768  f721
   3769  f721				   .L0107		;  _B_Y  =  _B_Y  -  1.00  :  goto __Skip_Ball_Up
   3770  f721
   3771  f721		       a5 dc		      LDA	i
   3772  f723		       38		      SEC
   3773  f724		       e9 00		      SBC	#0
   3774  f726		       85 dc		      STA	i
   3775  f728		       a5 89		      LDA	_B_Y
   3776  f72a		       e9 01		      SBC	#1
   3777  f72c		       85 89		      STA	_B_Y
   3778  f72e		       4c 62 f7 	      jmp	.__Skip_Ball_Up
   3779  f731
   3780  f731				   .
   3781  f731							; 
   3782  f731
   3783  f731				   .
   3784  f731							; 
   3785  f731
   3786  f731				   .
   3787  f731							; 
   3788  f731
   3789  f731				   .
   3790  f731							; 
   3791  f731
   3792  f731				   .
   3793  f731							; 
   3794  f731
   3795  f731				   .__Reverse_Ball_Up
   3796  f731							; __Reverse_Ball_Up
   3797  f731
   3798  f731				   .
   3799  f731							; 
   3800  f731
   3801  f731				   .
   3802  f731							; 
   3803  f731
   3804  f731				   .
   3805  f731							; 
   3806  f731
   3807  f731				   .
   3808  f731							; 
   3809  f731
   3810  f731				   .
   3811  f731							; 
   3812  f731
   3813  f731				   .L0108		;  _B_Y  =  _B_Y  +  0.130
   3814  f731
   3815  f731		       a5 dc		      LDA	i
   3816  f733		       18		      CLC
   3817  f734		       69 21		      ADC	#33
   3818  f736		       85 dc		      STA	i
   3819  f738		       a5 89		      LDA	_B_Y
   3820  f73a		       69 00		      ADC	#0
   3821  f73c		       85 89		      STA	_B_Y
   3822  f73e				   .
   3823  f73e							; 
   3824  f73e
   3825  f73e				   .L0109		;  temp5  =  rand  :  if temp5  <  128 then _B_Y  =  _B_Y  +  0.130
   3826  f73e
   3827  f73e		       20 1e f3 	      jsr	randomize
   3828  f741		       85 a0		      STA	temp5
   3829  f743		       a5 a0		      LDA	temp5
   3830  f745		       c9 80		      CMP	#128
   3831  f747		       b0 0d		      BCS	.skipL0109
   3832  f749				   .condpart38
   3833  f749		       a5 dc		      LDA	i
   3834  f74b		       18		      CLC
   3835  f74c		       69 21		      ADC	#33
   3836  f74e		       85 dc		      STA	i
   3837  f750		       a5 89		      LDA	_B_Y
   3838  f752		       69 00		      ADC	#0
   3839  f754		       85 89		      STA	_B_Y
   3840  f756				   .skipL0109
   3841  f756				   .
   3842  f756							; 
   3843  f756
   3844  f756				   .
   3845  f756							; 
   3846  f756
   3847  f756				   .
   3848  f756							; 
   3849  f756
   3850  f756				   .
   3851  f756							; 
   3852  f756
   3853  f756				   .L0110		;  _Bit0_Ball_Dir_Up{0}  =  0	:  _Bit1_Ball_Dir_Down{1}  =  1
   3854  f756
   3855  f756		       a5 db		      LDA	_Bit0_Ball_Dir_Up
   3856  f758		       29 fe		      AND	#254
   3857  f75a		       85 db		      STA	_Bit0_Ball_Dir_Up
   3858  f75c		       a5 db		      LDA	_Bit1_Ball_Dir_Down
   3859  f75e		       09 02		      ORA	#2
   3860  f760		       85 db		      STA	_Bit1_Ball_Dir_Down
   3861  f762				   .
   3862  f762							; 
   3863  f762
   3864  f762				   .__Skip_Ball_Up
   3865  f762							; __Skip_Ball_Up
   3866  f762
   3867  f762				   .
   3868  f762							; 
   3869  f762
   3870  f762				   .
   3871  f762							; 
   3872  f762
   3873  f762				   .
   3874  f762							; 
   3875  f762
   3876  f762				   .
   3877  f762							; 
   3878  f762
   3879  f762				   .
   3880  f762							; 
   3881  f762
   3882  f762				   .
   3883  f762							; 
   3884  f762
   3885  f762				   .
   3886  f762							; 
   3887  f762
   3888  f762				   .
   3889  f762							; 
   3890  f762
   3891  f762				   .
   3892  f762							; 
   3893  f762
   3894  f762				   .
   3895  f762							; 
   3896  f762
   3897  f762				   .L0111		;  if !_Bit1_Ball_Dir_Down{1} then goto __Skip_Ball_Down
   3898  f762
   3899  f762		       a5 db		      LDA	_Bit1_Ball_Dir_Down
   3900  f764		       29 02		      AND	#2
   3901  f766		       d0 03		      BNE	.skipL0111
   3902  f768				   .condpart39
   3903  f768		       4c e0 f7 	      jmp	.__Skip_Ball_Down
   3904  f76b
   3905  f76b				   .skipL0111
   3906  f76b				   .
   3907  f76b							; 
   3908  f76b
   3909  f76b				   .
   3910  f76b							; 
   3911  f76b
   3912  f76b				   .
   3913  f76b							; 
   3914  f76b
   3915  f76b				   .
   3916  f76b							; 
   3917  f76b
   3918  f76b				   .L0112		;  if bally  >=  _B_Edge_Bottom then goto __Reverse_Ball_Down
   3919  f76b
   3920  f76b		       a5 89		      LDA	bally
   3921  f76d		       c9 58		      CMP	#_B_Edge_Bottom
   3922  f76f		       90 03		      BCC	.skipL0112
   3923  f771				   .condpart40
   3924  f771		       4c af f7 	      jmp	.__Reverse_Ball_Down
   3925  f774
   3926  f774				   .skipL0112
   3927  f774				   .
   3928  f774							; 
   3929  f774
   3930  f774				   .
   3931  f774							; 
   3932  f774
   3933  f774				   .
   3934  f774							; 
   3935  f774
   3936  f774				   .
   3937  f774							; 
   3938  f774
   3939  f774				   .L0113		;  temp5  =   ( ballx - 18 )  / 4
   3940  f774
   3941  f774							; complex statement detected
   3942  f774		       a5 84		      LDA	ballx
   3943  f776		       38		      SEC
   3944  f777		       e9 12		      SBC	#18
   3945  f779		       4a		      lsr
   3946  f77a		       4a		      lsr
   3947  f77b		       85 a0		      STA	temp5
   3948  f77d				   .
   3949  f77d							; 
   3950  f77d
   3951  f77d				   .L0114		;  temp6  =   ( bally + 1 )  / 8
   3952  f77d
   3953  f77d							; complex statement detected
   3954  f77d		       a5 89		      LDA	bally
   3955  f77f		       18		      CLC
   3956  f780		       69 01		      ADC	#1
   3957  f782		       4a		      lsr
   3958  f783		       4a		      lsr
   3959  f784		       4a		      lsr
   3960  f785		       85 a1		      STA	temp6
   3961  f787				   .
   3962  f787							; 
   3963  f787
   3964  f787				   .L0115		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then _Bit4_Ball_Hit_UD{4}  =  1  :  goto __Reverse_Ball_Down
   3965  f787
   3966  f787		       a5 a0		      LDA	temp5
   3967  f789		       c9 22		      CMP	#34
   3968  f78b		       b0 12		      BCS	.skipL0115
   3969  f78d				   .condpart41
   3970  f78d		       a5 a0		      LDA	temp5
   3971  f78f		       a4 a1		      LDY	temp6
   3972  f791		       20 d6 f1 	      jsr	pfread
   3973  f794		       d0 09		      BNE	.skip41then
   3974  f796				   .condpart42
   3975  f796		       a5 db		      LDA	_Bit4_Ball_Hit_UD
   3976  f798		       09 10		      ORA	#16
   3977  f79a		       85 db		      STA	_Bit4_Ball_Hit_UD
   3978  f79c		       4c af f7 	      jmp	.__Reverse_Ball_Down
   3979  f79f
   3980  f79f				   .skip41then
   3981  f79f				   .skipL0115
   3982  f79f				   .
   3983  f79f							; 
   3984  f79f
   3985  f79f				   .
   3986  f79f							; 
   3987  f79f
   3988  f79f				   .
   3989  f79f							; 
   3990  f79f
   3991  f79f				   .
   3992  f79f							; 
   3993  f79f
   3994  f79f				   .L0116		;  _B_Y  =  _B_Y  +  1.00  :  goto __Skip_Ball_Down
   3995  f79f
   3996  f79f		       a5 dc		      LDA	i
   3997  f7a1		       18		      CLC
   3998  f7a2		       69 00		      ADC	#0
   3999  f7a4		       85 dc		      STA	i
   4000  f7a6		       a5 89		      LDA	_B_Y
   4001  f7a8		       69 01		      ADC	#1
   4002  f7aa		       85 89		      STA	_B_Y
   4003  f7ac		       4c e0 f7 	      jmp	.__Skip_Ball_Down
   4004  f7af
   4005  f7af				   .
   4006  f7af							; 
   4007  f7af
   4008  f7af				   .
   4009  f7af							; 
   4010  f7af
   4011  f7af				   .
   4012  f7af							; 
   4013  f7af
   4014  f7af				   .
   4015  f7af							; 
   4016  f7af
   4017  f7af				   .
   4018  f7af							; 
   4019  f7af
   4020  f7af				   .__Reverse_Ball_Down
   4021  f7af							; __Reverse_Ball_Down
   4022  f7af
   4023  f7af				   .
   4024  f7af							; 
   4025  f7af
   4026  f7af				   .
   4027  f7af							; 
   4028  f7af
   4029  f7af				   .
   4030  f7af							; 
   4031  f7af
   4032  f7af				   .
   4033  f7af							; 
   4034  f7af
   4035  f7af				   .
   4036  f7af							; 
   4037  f7af
   4038  f7af				   .L0117		;  _B_Y  =  _B_Y  -  0.261
   4039  f7af
   4040  f7af		       a5 dc		      LDA	i
   4041  f7b1		       38		      SEC
   4042  f7b2		       e9 42		      SBC	#66
   4043  f7b4		       85 dc		      STA	i
   4044  f7b6		       a5 89		      LDA	_B_Y
   4045  f7b8		       e9 00		      SBC	#0
   4046  f7ba		       85 89		      STA	_B_Y
   4047  f7bc				   .
   4048  f7bc							; 
   4049  f7bc
   4050  f7bc				   .L0118		;  temp5  =  rand  :  if temp5  <  128 then _B_Y  =  _B_Y  -  0.261
   4051  f7bc
   4052  f7bc		       20 1e f3 	      jsr	randomize
   4053  f7bf		       85 a0		      STA	temp5
   4054  f7c1		       a5 a0		      LDA	temp5
   4055  f7c3		       c9 80		      CMP	#128
   4056  f7c5		       b0 0d		      BCS	.skipL0118
   4057  f7c7				   .condpart43
   4058  f7c7		       a5 dc		      LDA	i
   4059  f7c9		       38		      SEC
   4060  f7ca		       e9 42		      SBC	#66
   4061  f7cc		       85 dc		      STA	i
   4062  f7ce		       a5 89		      LDA	_B_Y
   4063  f7d0		       e9 00		      SBC	#0
   4064  f7d2		       85 89		      STA	_B_Y
   4065  f7d4				   .skipL0118
   4066  f7d4				   .
   4067  f7d4							; 
   4068  f7d4
   4069  f7d4				   .
   4070  f7d4							; 
   4071  f7d4
   4072  f7d4				   .
   4073  f7d4							; 
   4074  f7d4
   4075  f7d4				   .
   4076  f7d4							; 
   4077  f7d4
   4078  f7d4				   .L0119		;  _Bit0_Ball_Dir_Up{0}  =  1	:  _Bit1_Ball_Dir_Down{1}  =  0
   4079  f7d4
   4080  f7d4		       a5 db		      LDA	_Bit0_Ball_Dir_Up
   4081  f7d6		       09 01		      ORA	#1
   4082  f7d8		       85 db		      STA	_Bit0_Ball_Dir_Up
   4083  f7da		       a5 db		      LDA	_Bit1_Ball_Dir_Down
   4084  f7dc		       29 fd		      AND	#253
   4085  f7de		       85 db		      STA	_Bit1_Ball_Dir_Down
   4086  f7e0				   .
   4087  f7e0							; 
   4088  f7e0
   4089  f7e0				   .__Skip_Ball_Down
   4090  f7e0							; __Skip_Ball_Down
   4091  f7e0
   4092  f7e0				   .
   4093  f7e0							; 
   4094  f7e0
   4095  f7e0				   .
   4096  f7e0							; 
   4097  f7e0
   4098  f7e0				   .
   4099  f7e0							; 
   4100  f7e0
   4101  f7e0				   .
   4102  f7e0							; 
   4103  f7e0
   4104  f7e0				   .
   4105  f7e0							; 
   4106  f7e0
   4107  f7e0				   .
   4108  f7e0							; 
   4109  f7e0
   4110  f7e0				   .
   4111  f7e0							; 
   4112  f7e0
   4113  f7e0				   .
   4114  f7e0							; 
   4115  f7e0
   4116  f7e0				   .
   4117  f7e0							; 
   4118  f7e0
   4119  f7e0				   .
   4120  f7e0							; 
   4121  f7e0
   4122  f7e0				   .L0120		;  if !_Bit2_Ball_Dir_Left{2} then goto __Skip_Ball_Left
   4123  f7e0
   4124  f7e0		       a5 db		      LDA	_Bit2_Ball_Dir_Left
   4125  f7e2		       29 04		      AND	#4
   4126  f7e4		       d0 03		      BNE	.skipL0120
   4127  f7e6				   .condpart44
   4128  f7e6		       4c 7b f8 	      jmp	.__Skip_Ball_Left
   4129  f7e9
   4130  f7e9				   .skipL0120
   4131  f7e9				   .
   4132  f7e9							; 
   4133  f7e9
   4134  f7e9				   .
   4135  f7e9							; 
   4136  f7e9
   4137  f7e9				   .
   4138  f7e9							; 
   4139  f7e9
   4140  f7e9				   .
   4141  f7e9							; 
   4142  f7e9
   4143  f7e9				   .L0121		;  if ballx  <=  _B_Edge_Left then goto __Reverse_Ball_Left
   4144  f7e9
   4145  f7e9		       a9 02		      LDA	#_B_Edge_Left
   4146  f7eb		       c5 84		      CMP	ballx
   4147  f7ed		       90 03		      BCC	.skipL0121
   4148  f7ef				   .condpart45
   4149  f7ef		       4c 24 f8 	      jmp	.__Reverse_Ball_Left
   4150  f7f2
   4151  f7f2				   .skipL0121
   4152  f7f2				   .
   4153  f7f2							; 
   4154  f7f2
   4155  f7f2				   .
   4156  f7f2							; 
   4157  f7f2
   4158  f7f2				   .
   4159  f7f2							; 
   4160  f7f2
   4161  f7f2				   .
   4162  f7f2							; 
   4163  f7f2
   4164  f7f2				   .L0122		;  temp5  =   ( bally )  / 8
   4165  f7f2
   4166  f7f2							; complex statement detected
   4167  f7f2		       a5 89		      LDA	bally
   4168  f7f4		       4a		      lsr
   4169  f7f5		       4a		      lsr
   4170  f7f6		       4a		      lsr
   4171  f7f7		       85 a0		      STA	temp5
   4172  f7f9				   .
   4173  f7f9							; 
   4174  f7f9
   4175  f7f9				   .L0123		;  temp6  =   ( ballx - 19 )  / 4
   4176  f7f9
   4177  f7f9							; complex statement detected
   4178  f7f9		       a5 84		      LDA	ballx
   4179  f7fb		       38		      SEC
   4180  f7fc		       e9 13		      SBC	#19
   4181  f7fe		       4a		      lsr
   4182  f7ff		       4a		      lsr
   4183  f800		       85 a1		      STA	temp6
   4184  f802				   .
   4185  f802							; 
   4186  f802
   4187  f802				   .L0124		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Reverse_Ball_Left
   4188  f802
   4189  f802		       a5 a1		      LDA	temp6
   4190  f804		       c9 22		      CMP	#34
   4191  f806		       b0 0c		      BCS	.skipL0124
   4192  f808				   .condpart46
   4193  f808		       a5 a1		      LDA	temp6
   4194  f80a		       a4 a0		      LDY	temp5
   4195  f80c		       20 d6 f1 	      jsr	pfread
   4196  f80f		       d0 03		      BNE	.skip46then
   4197  f811				   .condpart47
   4198  f811		       4c 24 f8 	      jmp	.__Reverse_Ball_Left
   4199  f814
   4200  f814				   .skip46then
   4201  f814				   .skipL0124
   4202  f814				   .
   4203  f814							; 
   4204  f814
   4205  f814				   .
   4206  f814							; 
   4207  f814
   4208  f814				   .
   4209  f814							; 
   4210  f814
   4211  f814				   .
   4212  f814							; 
   4213  f814
   4214  f814				   .L0125		;  _B_X  =  _B_X  -  1.00  :  goto __Skip_Ball_Left
   4215  f814
   4216  f814		       a5 dd		      LDA	j
   4217  f816		       38		      SEC
   4218  f817		       e9 00		      SBC	#0
   4219  f819		       85 dd		      STA	j
   4220  f81b		       a5 84		      LDA	_B_X
   4221  f81d		       e9 01		      SBC	#1
   4222  f81f		       85 84		      STA	_B_X
   4223  f821		       4c 7b f8 	      jmp	.__Skip_Ball_Left
   4224  f824
   4225  f824				   .
   4226  f824							; 
   4227  f824
   4228  f824				   .
   4229  f824							; 
   4230  f824
   4231  f824				   .
   4232  f824							; 
   4233  f824
   4234  f824				   .
   4235  f824							; 
   4236  f824
   4237  f824				   .
   4238  f824							; 
   4239  f824
   4240  f824				   .__Reverse_Ball_Left
   4241  f824							; __Reverse_Ball_Left
   4242  f824
   4243  f824				   .
   4244  f824							; 
   4245  f824
   4246  f824				   .
   4247  f824							; 
   4248  f824
   4249  f824				   .
   4250  f824							; 
   4251  f824
   4252  f824				   .
   4253  f824							; 
   4254  f824
   4255  f824				   .L0126		;  if _Bit4_Ball_Hit_UD{4} then _Bit0_Ball_Dir_Up{0}  =  !_Bit0_Ball_Dir_Up{0}  :  _Bit1_Ball_Dir_Down{1}  =  !_Bit1_Ball_Dir_Down{1}
   4256  f824
   4257  f824		       a5 db		      LDA	_Bit4_Ball_Hit_UD
   4258  f826		       29 10		      AND	#16
   4259  f828		       f0 20		      BEQ	.skipL0126
   4260  f82a				   .condpart48
   4261  f82a		       a5 db		      LDA	_Bit0_Ball_Dir_Up
   4262  f82c		       29 01		      AND	#1
   4263  f82e		       08		      PHP
   4264  f82f		       a5 db		      LDA	_Bit0_Ball_Dir_Up
   4265  f831		       29 fe		      AND	#254
   4266  f833		       28		      PLP
   4267  f834		       d0 02		      .byte.b	$D0, $02
   4268  f836		       09 01		      ORA	#1
   4269  f838		       85 db		      STA	_Bit0_Ball_Dir_Up
   4270  f83a		       a5 db		      LDA	_Bit1_Ball_Dir_Down
   4271  f83c		       29 02		      AND	#2
   4272  f83e		       08		      PHP
   4273  f83f		       a5 db		      LDA	_Bit1_Ball_Dir_Down
   4274  f841		       29 fd		      AND	#253
   4275  f843		       28		      PLP
   4276  f844		       d0 02		      .byte.b	$D0, $02
   4277  f846		       09 02		      ORA	#2
   4278  f848		       85 db		      STA	_Bit1_Ball_Dir_Down
   4279  f84a				   .skipL0126
   4280  f84a				   .
   4281  f84a							; 
   4282  f84a
   4283  f84a				   .
   4284  f84a							; 
   4285  f84a
   4286  f84a				   .
   4287  f84a							; 
   4288  f84a
   4289  f84a				   .
   4290  f84a							; 
   4291  f84a
   4292  f84a				   .
   4293  f84a							; 
   4294  f84a
   4295  f84a				   .L0127		;  _B_X  =  _B_X  +  0.388
   4296  f84a
   4297  f84a		       a5 dd		      LDA	j
   4298  f84c		       18		      CLC
   4299  f84d		       69 63		      ADC	#99
   4300  f84f		       85 dd		      STA	j
   4301  f851		       a5 84		      LDA	_B_X
   4302  f853		       69 00		      ADC	#0
   4303  f855		       85 84		      STA	_B_X
   4304  f857				   .
   4305  f857							; 
   4306  f857
   4307  f857				   .L0128		;  temp5  =  rand  :  if temp5  <  128 then _B_X  =  _B_X  +  0.388
   4308  f857
   4309  f857		       20 1e f3 	      jsr	randomize
   4310  f85a		       85 a0		      STA	temp5
   4311  f85c		       a5 a0		      LDA	temp5
   4312  f85e		       c9 80		      CMP	#128
   4313  f860		       b0 0d		      BCS	.skipL0128
   4314  f862				   .condpart49
   4315  f862		       a5 dd		      LDA	j
   4316  f864		       18		      CLC
   4317  f865		       69 63		      ADC	#99
   4318  f867		       85 dd		      STA	j
   4319  f869		       a5 84		      LDA	_B_X
   4320  f86b		       69 00		      ADC	#0
   4321  f86d		       85 84		      STA	_B_X
   4322  f86f				   .skipL0128
   4323  f86f				   .
   4324  f86f							; 
   4325  f86f
   4326  f86f				   .
   4327  f86f							; 
   4328  f86f
   4329  f86f				   .
   4330  f86f							; 
   4331  f86f
   4332  f86f				   .
   4333  f86f							; 
   4334  f86f
   4335  f86f				   .L0129		;  _Bit2_Ball_Dir_Left{2}  =  0  :  _Bit3_Ball_Dir_Right{3}  =  1
   4336  f86f
   4337  f86f		       a5 db		      LDA	_Bit2_Ball_Dir_Left
   4338  f871		       29 fb		      AND	#251
   4339  f873		       85 db		      STA	_Bit2_Ball_Dir_Left
   4340  f875		       a5 db		      LDA	_Bit3_Ball_Dir_Right
   4341  f877		       09 08		      ORA	#8
   4342  f879		       85 db		      STA	_Bit3_Ball_Dir_Right
   4343  f87b				   .
   4344  f87b							; 
   4345  f87b
   4346  f87b				   .__Skip_Ball_Left
   4347  f87b							; __Skip_Ball_Left
   4348  f87b
   4349  f87b				   .
   4350  f87b							; 
   4351  f87b
   4352  f87b				   .
   4353  f87b							; 
   4354  f87b
   4355  f87b				   .
   4356  f87b							; 
   4357  f87b
   4358  f87b				   .
   4359  f87b							; 
   4360  f87b
   4361  f87b				   .
   4362  f87b							; 
   4363  f87b
   4364  f87b				   .
   4365  f87b							; 
   4366  f87b
   4367  f87b				   .
   4368  f87b							; 
   4369  f87b
   4370  f87b				   .
   4371  f87b							; 
   4372  f87b
   4373  f87b				   .
   4374  f87b							; 
   4375  f87b
   4376  f87b				   .
   4377  f87b							; 
   4378  f87b
   4379  f87b				   .L0130		;  if !_Bit3_Ball_Dir_Right{3} then goto __Skip_Ball_Right
   4380  f87b
   4381  f87b		       a5 db		      LDA	_Bit3_Ball_Dir_Right
   4382  f87d		       29 08		      AND	#8
   4383  f87f		       d0 03		      BNE	.skipL0130
   4384  f881				   .condpart50
   4385  f881		       4c 16 f9 	      jmp	.__Skip_Ball_Right
   4386  f884
   4387  f884				   .skipL0130
   4388  f884				   .
   4389  f884							; 
   4390  f884
   4391  f884				   .
   4392  f884							; 
   4393  f884
   4394  f884				   .
   4395  f884							; 
   4396  f884
   4397  f884				   .
   4398  f884							; 
   4399  f884
   4400  f884				   .L0131		;  if ballx  >=  _B_Edge_Right then goto __Reverse_Ball_Right
   4401  f884
   4402  f884		       a5 84		      LDA	ballx
   4403  f886		       c9 a0		      CMP	#_B_Edge_Right
   4404  f888		       90 03		      BCC	.skipL0131
   4405  f88a				   .condpart51
   4406  f88a		       4c bf f8 	      jmp	.__Reverse_Ball_Right
   4407  f88d
   4408  f88d				   .skipL0131
   4409  f88d				   .
   4410  f88d							; 
   4411  f88d
   4412  f88d				   .
   4413  f88d							; 
   4414  f88d
   4415  f88d				   .
   4416  f88d							; 
   4417  f88d
   4418  f88d				   .
   4419  f88d							; 
   4420  f88d
   4421  f88d				   .L0132		;  temp5  =   ( bally )  / 8
   4422  f88d
   4423  f88d							; complex statement detected
   4424  f88d		       a5 89		      LDA	bally
   4425  f88f		       4a		      lsr
   4426  f890		       4a		      lsr
   4427  f891		       4a		      lsr
   4428  f892		       85 a0		      STA	temp5
   4429  f894				   .
   4430  f894							; 
   4431  f894
   4432  f894				   .L0133		;  temp6  =   ( ballx - 16 )  / 4
   4433  f894
   4434  f894							; complex statement detected
   4435  f894		       a5 84		      LDA	ballx
   4436  f896		       38		      SEC
   4437  f897		       e9 10		      SBC	#16
   4438  f899		       4a		      lsr
   4439  f89a		       4a		      lsr
   4440  f89b		       85 a1		      STA	temp6
   4441  f89d				   .
   4442  f89d							; 
   4443  f89d
   4444  f89d				   .L0134		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Reverse_Ball_Right
   4445  f89d
   4446  f89d		       a5 a1		      LDA	temp6
   4447  f89f		       c9 22		      CMP	#34
   4448  f8a1		       b0 0c		      BCS	.skipL0134
   4449  f8a3				   .condpart52
   4450  f8a3		       a5 a1		      LDA	temp6
   4451  f8a5		       a4 a0		      LDY	temp5
   4452  f8a7		       20 d6 f1 	      jsr	pfread
   4453  f8aa		       d0 03		      BNE	.skip52then
   4454  f8ac				   .condpart53
   4455  f8ac		       4c bf f8 	      jmp	.__Reverse_Ball_Right
   4456  f8af
   4457  f8af				   .skip52then
   4458  f8af				   .skipL0134
   4459  f8af				   .
   4460  f8af							; 
   4461  f8af
   4462  f8af				   .
   4463  f8af							; 
   4464  f8af
   4465  f8af				   .
   4466  f8af							; 
   4467  f8af
   4468  f8af				   .
   4469  f8af							; 
   4470  f8af
   4471  f8af				   .L0135		;  _B_X  =  _B_X  +  1.00  :  goto __Skip_Ball_Right
   4472  f8af
   4473  f8af		       a5 dd		      LDA	j
   4474  f8b1		       18		      CLC
   4475  f8b2		       69 00		      ADC	#0
   4476  f8b4		       85 dd		      STA	j
   4477  f8b6		       a5 84		      LDA	_B_X
   4478  f8b8		       69 01		      ADC	#1
   4479  f8ba		       85 84		      STA	_B_X
   4480  f8bc		       4c 16 f9 	      jmp	.__Skip_Ball_Right
   4481  f8bf
   4482  f8bf				   .
   4483  f8bf							; 
   4484  f8bf
   4485  f8bf				   .
   4486  f8bf							; 
   4487  f8bf
   4488  f8bf				   .
   4489  f8bf							; 
   4490  f8bf
   4491  f8bf				   .
   4492  f8bf							; 
   4493  f8bf
   4494  f8bf				   .
   4495  f8bf							; 
   4496  f8bf
   4497  f8bf				   .__Reverse_Ball_Right
   4498  f8bf							; __Reverse_Ball_Right
   4499  f8bf
   4500  f8bf				   .
   4501  f8bf							; 
   4502  f8bf
   4503  f8bf				   .
   4504  f8bf							; 
   4505  f8bf
   4506  f8bf				   .
   4507  f8bf							; 
   4508  f8bf
   4509  f8bf				   .
   4510  f8bf							; 
   4511  f8bf
   4512  f8bf				   .L0136		;  if _Bit4_Ball_Hit_UD{4} then _Bit0_Ball_Dir_Up{0}  =  !_Bit0_Ball_Dir_Up{0}  :  _Bit1_Ball_Dir_Down{1}  =  !_Bit1_Ball_Dir_Down{1}
   4513  f8bf
   4514  f8bf		       a5 db		      LDA	_Bit4_Ball_Hit_UD
   4515  f8c1		       29 10		      AND	#16
   4516  f8c3		       f0 20		      BEQ	.skipL0136
   4517  f8c5				   .condpart54
   4518  f8c5		       a5 db		      LDA	_Bit0_Ball_Dir_Up
   4519  f8c7		       29 01		      AND	#1
   4520  f8c9		       08		      PHP
   4521  f8ca		       a5 db		      LDA	_Bit0_Ball_Dir_Up
   4522  f8cc		       29 fe		      AND	#254
   4523  f8ce		       28		      PLP
   4524  f8cf		       d0 02		      .byte.b	$D0, $02
   4525  f8d1		       09 01		      ORA	#1
   4526  f8d3		       85 db		      STA	_Bit0_Ball_Dir_Up
   4527  f8d5		       a5 db		      LDA	_Bit1_Ball_Dir_Down
   4528  f8d7		       29 02		      AND	#2
   4529  f8d9		       08		      PHP
   4530  f8da		       a5 db		      LDA	_Bit1_Ball_Dir_Down
   4531  f8dc		       29 fd		      AND	#253
   4532  f8de		       28		      PLP
   4533  f8df		       d0 02		      .byte.b	$D0, $02
   4534  f8e1		       09 02		      ORA	#2
   4535  f8e3		       85 db		      STA	_Bit1_Ball_Dir_Down
   4536  f8e5				   .skipL0136
   4537  f8e5				   .
   4538  f8e5							; 
   4539  f8e5
   4540  f8e5				   .
   4541  f8e5							; 
   4542  f8e5
   4543  f8e5				   .
   4544  f8e5							; 
   4545  f8e5
   4546  f8e5				   .
   4547  f8e5							; 
   4548  f8e5
   4549  f8e5				   .
   4550  f8e5							; 
   4551  f8e5
   4552  f8e5				   .L0137		;  _B_X  =  _B_X  -  0.513
   4553  f8e5
   4554  f8e5		       a5 dd		      LDA	j
   4555  f8e7		       38		      SEC
   4556  f8e8		       e9 83		      SBC	#131
   4557  f8ea		       85 dd		      STA	j
   4558  f8ec		       a5 84		      LDA	_B_X
   4559  f8ee		       e9 00		      SBC	#0
   4560  f8f0		       85 84		      STA	_B_X
   4561  f8f2				   .
   4562  f8f2							; 
   4563  f8f2
   4564  f8f2				   .L0138		;  temp5  =  rand  :  if temp5  <  128 then _B_X  =  _B_X  -  0.513
   4565  f8f2
   4566  f8f2		       20 1e f3 	      jsr	randomize
   4567  f8f5		       85 a0		      STA	temp5
   4568  f8f7		       a5 a0		      LDA	temp5
   4569  f8f9		       c9 80		      CMP	#128
   4570  f8fb		       b0 0d		      BCS	.skipL0138
   4571  f8fd				   .condpart55
   4572  f8fd		       a5 dd		      LDA	j
   4573  f8ff		       38		      SEC
   4574  f900		       e9 83		      SBC	#131
   4575  f902		       85 dd		      STA	j
   4576  f904		       a5 84		      LDA	_B_X
   4577  f906		       e9 00		      SBC	#0
   4578  f908		       85 84		      STA	_B_X
   4579  f90a				   .skipL0138
   4580  f90a				   .
   4581  f90a							; 
   4582  f90a
   4583  f90a				   .
   4584  f90a							; 
   4585  f90a
   4586  f90a				   .
   4587  f90a							; 
   4588  f90a
   4589  f90a				   .
   4590  f90a							; 
   4591  f90a
   4592  f90a				   .L0139		;  _Bit2_Ball_Dir_Left{2}  =  1  :  _Bit3_Ball_Dir_Right{3}  =  0
   4593  f90a
   4594  f90a		       a5 db		      LDA	_Bit2_Ball_Dir_Left
   4595  f90c		       09 04		      ORA	#4
   4596  f90e		       85 db		      STA	_Bit2_Ball_Dir_Left
   4597  f910		       a5 db		      LDA	_Bit3_Ball_Dir_Right
   4598  f912		       29 f7		      AND	#247
   4599  f914		       85 db		      STA	_Bit3_Ball_Dir_Right
   4600  f916				   .
   4601  f916							; 
   4602  f916
   4603  f916				   .__Skip_Ball_Right
   4604  f916							; __Skip_Ball_Right
   4605  f916
   4606  f916				   .
   4607  f916							; 
   4608  f916
   4609  f916				   .
   4610  f916							; 
   4611  f916
   4612  f916				   .
   4613  f916							; 
   4614  f916
   4615  f916				   .
   4616  f916							; 
   4617  f916
   4618  f916				   .
   4619  f916							; 
   4620  f916
   4621  f916				   .
   4622  f916							; 
   4623  f916
   4624  f916				   .
   4625  f916							; 
   4626  f916
   4627  f916				   .
   4628  f916							; 
   4629  f916
   4630  f916				   .
   4631  f916							; 
   4632  f916
   4633  f916				   .
   4634  f916							; 
   4635  f916
   4636  f916				   .
   4637  f916							; 
   4638  f916
   4639  f916				   .
   4640  f916							; 
   4641  f916
   4642  f916				   .
   4643  f916							; 
   4644  f916
   4645  f916				   .L0140		;  if !joy0fire then goto __Skip_Fire
   4646  f916
   4647  f916		       24 0c		      bit	INPT4
   4648  f918		       10 03		      BPL	.skipL0140
   4649  f91a				   .condpart56
   4650  f91a		       4c b6 f9 	      jmp	.__Skip_Fire
   4651  f91d
   4652  f91d				   .skipL0140
   4653  f91d				   .
   4654  f91d							; 
   4655  f91d
   4656  f91d				   .
   4657  f91d							; 
   4658  f91d
   4659  f91d				   .
   4660  f91d							; 
   4661  f91d
   4662  f91d				   .
   4663  f91d							; 
   4664  f91d
   4665  f91d				   .L0141		;  if _Bit7_M0_Moving{7} then goto __Skip_Fire
   4666  f91d
   4667  f91d		       24 ec		      BIT	_Bit7_M0_Moving
   4668  f91f		       10 03		      BPL	.skipL0141
   4669  f921				   .condpart57
   4670  f921		       4c b6 f9 	      jmp	.__Skip_Fire
   4671  f924
   4672  f924				   .skipL0141
   4673  f924				   .
   4674  f924							; 
   4675  f924
   4676  f924				   .
   4677  f924							; 
   4678  f924
   4679  f924				   .
   4680  f924							; 
   4681  f924
   4682  f924				   .
   4683  f924							; 
   4684  f924
   4685  f924				   .L0142		;  _Bit7_M0_Moving{7}	=  1
   4686  f924
   4687  f924		       a5 ec		      LDA	_Bit7_M0_Moving
   4688  f926		       09 80		      ORA	#128
   4689  f928		       85 ec		      STA	_Bit7_M0_Moving
   4690  f92a				   .
   4691  f92a							; 
   4692  f92a
   4693  f92a				   .
   4694  f92a							; 
   4695  f92a
   4696  f92a				   .
   4697  f92a							; 
   4698  f92a
   4699  f92a				   .
   4700  f92a							; 
   4701  f92a
   4702  f92a				   .
   4703  f92a							; 
   4704  f92a
   4705  f92a				   .L0143		;  _Bit4_M0_Dir_Up{4}	=  _Bit0_P0_Dir_Up{0}
   4706  f92a
   4707  f92a		       a5 da		      LDA	_Bit0_P0_Dir_Up
   4708  f92c		       29 01		      AND	#1
   4709  f92e		       08		      PHP
   4710  f92f		       a5 da		      LDA	_Bit4_M0_Dir_Up
   4711  f931		       29 ef		      AND	#239
   4712  f933		       28		      PLP
   4713  f934		       f0 02		      .byte.b	$F0, $02
   4714  f936		       09 10		      ORA	#16
   4715  f938		       85 da		      STA	_Bit4_M0_Dir_Up
   4716  f93a				   .L0144		;  _Bit5_M0_Dir_Down{5}  =  _Bit1_P0_Dir_Down{1}
   4717  f93a
   4718  f93a		       a5 da		      LDA	_Bit1_P0_Dir_Down
   4719  f93c		       29 02		      AND	#2
   4720  f93e		       08		      PHP
   4721  f93f		       a5 da		      LDA	_Bit5_M0_Dir_Down
   4722  f941		       29 df		      AND	#223
   4723  f943		       28		      PLP
   4724  f944		       f0 02		      .byte.b	$F0, $02
   4725  f946		       09 20		      ORA	#32
   4726  f948		       85 da		      STA	_Bit5_M0_Dir_Down
   4727  f94a				   .L0145		;  _Bit6_M0_Dir_Left{6}  =  _Bit2_P0_Dir_Left{2}
   4728  f94a
   4729  f94a		       a5 da		      LDA	_Bit2_P0_Dir_Left
   4730  f94c		       29 04		      AND	#4
   4731  f94e		       08		      PHP
   4732  f94f		       a5 da		      LDA	_Bit6_M0_Dir_Left
   4733  f951		       29 bf		      AND	#191
   4734  f953		       28		      PLP
   4735  f954		       f0 02		      .byte.b	$F0, $02
   4736  f956		       09 40		      ORA	#64
   4737  f958		       85 da		      STA	_Bit6_M0_Dir_Left
   4738  f95a				   .L0146		;  _Bit7_M0_Dir_Right{7}  =  _Bit3_P0_Dir_Right{3}
   4739  f95a
   4740  f95a		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4741  f95c		       29 08		      AND	#8
   4742  f95e		       08		      PHP
   4743  f95f		       a5 da		      LDA	_Bit7_M0_Dir_Right
   4744  f961		       29 7f		      AND	#127
   4745  f963		       28		      PLP
   4746  f964		       f0 02		      .byte.b	$F0, $02
   4747  f966		       09 80		      ORA	#128
   4748  f968		       85 da		      STA	_Bit7_M0_Dir_Right
   4749  f96a				   .
   4750  f96a							; 
   4751  f96a
   4752  f96a				   .
   4753  f96a							; 
   4754  f96a
   4755  f96a				   .
   4756  f96a							; 
   4757  f96a
   4758  f96a				   .
   4759  f96a							; 
   4760  f96a
   4761  f96a				   .L0147		;  if _Bit4_M0_Dir_Up{4} then missile0x  =  player0x  +  4  :	missile0y  =  player0y	-  5
   4762  f96a
   4763  f96a		       a5 da		      LDA	_Bit4_M0_Dir_Up
   4764  f96c		       29 10		      AND	#16
   4765  f96e		       f0 0e		      BEQ	.skipL0147
   4766  f970				   .condpart58
   4767  f970		       a5 80		      LDA	player0x
   4768  f972		       18		      CLC
   4769  f973		       69 04		      ADC	#4
   4770  f975		       85 82		      STA	missile0x
   4771  f977		       a5 85		      LDA	player0y
   4772  f979		       38		      SEC
   4773  f97a		       e9 05		      SBC	#5
   4774  f97c		       85 91		      STA	missile0y
   4775  f97e				   .skipL0147
   4776  f97e				   .L0148		;  if _Bit5_M0_Dir_Down{5} then missile0x  =  player0x  +  4  :  missile0y  =	player0y  -  1
   4777  f97e
   4778  f97e		       a5 da		      LDA	_Bit5_M0_Dir_Down
   4779  f980		       29 20		      AND	#32
   4780  f982		       f0 0e		      BEQ	.skipL0148
   4781  f984				   .condpart59
   4782  f984		       a5 80		      LDA	player0x
   4783  f986		       18		      CLC
   4784  f987		       69 04		      ADC	#4
   4785  f989		       85 82		      STA	missile0x
   4786  f98b		       a5 85		      LDA	player0y
   4787  f98d		       38		      SEC
   4788  f98e		       e9 01		      SBC	#1
   4789  f990		       85 91		      STA	missile0y
   4790  f992				   .skipL0148
   4791  f992				   .L0149		;  if _Bit6_M0_Dir_Left{6} then missile0x  =  player0x  +  2  :  missile0y  =	player0y  -  3
   4792  f992
   4793  f992		       24 da		      BIT	_Bit6_M0_Dir_Left
   4794  f994		       50 0e		      BVC	.skipL0149
   4795  f996				   .condpart60
   4796  f996		       a5 80		      LDA	player0x
   4797  f998		       18		      CLC
   4798  f999		       69 02		      ADC	#2
   4799  f99b		       85 82		      STA	missile0x
   4800  f99d		       a5 85		      LDA	player0y
   4801  f99f		       38		      SEC
   4802  f9a0		       e9 03		      SBC	#3
   4803  f9a2		       85 91		      STA	missile0y
   4804  f9a4				   .skipL0149
   4805  f9a4				   .L0150		;  if _Bit7_M0_Dir_Right{7} then missile0x  =	player0x  +  6	:  missile0y  =  player0y  -  3
   4806  f9a4
   4807  f9a4		       24 da		      BIT	_Bit7_M0_Dir_Right
   4808  f9a6		       10 0e		      BPL	.skipL0150
   4809  f9a8				   .condpart61
   4810  f9a8		       a5 80		      LDA	player0x
   4811  f9aa		       18		      CLC
   4812  f9ab		       69 06		      ADC	#6
   4813  f9ad		       85 82		      STA	missile0x
   4814  f9af		       a5 85		      LDA	player0y
   4815  f9b1		       38		      SEC
   4816  f9b2		       e9 03		      SBC	#3
   4817  f9b4		       85 91		      STA	missile0y
   4818  f9b6				   .skipL0150
   4819  f9b6				   .
   4820  f9b6							; 
   4821  f9b6
   4822  f9b6				   .__Skip_Fire
   4823  f9b6							; __Skip_Fire
   4824  f9b6
   4825  f9b6				   .
   4826  f9b6							; 
   4827  f9b6
   4828  f9b6				   .
   4829  f9b6							; 
   4830  f9b6
   4831  f9b6				   .
   4832  f9b6							; 
   4833  f9b6
   4834  f9b6				   .
   4835  f9b6							; 
   4836  f9b6
   4837  f9b6				   .
   4838  f9b6							; 
   4839  f9b6
   4840  f9b6				   .
   4841  f9b6							; 
   4842  f9b6
   4843  f9b6				   .
   4844  f9b6							; 
   4845  f9b6
   4846  f9b6				   .
   4847  f9b6							; 
   4848  f9b6
   4849  f9b6				   .
   4850  f9b6							; 
   4851  f9b6
   4852  f9b6				   .
   4853  f9b6							; 
   4854  f9b6
   4855  f9b6				   .L0151		;  if !_Bit7_M0_Moving{7} then goto __Skip_Missile
   4856  f9b6
   4857  f9b6		       24 ec		      BIT	_Bit7_M0_Moving
   4858  f9b8		       30 03		      BMI	.skipL0151
   4859  f9ba				   .condpart62
   4860  f9ba		       4c 24 fa 	      jmp	.__Skip_Missile
   4861  f9bd
   4862  f9bd				   .skipL0151
   4863  f9bd				   .
   4864  f9bd							; 
   4865  f9bd
   4866  f9bd				   .
   4867  f9bd							; 
   4868  f9bd
   4869  f9bd				   .
   4870  f9bd							; 
   4871  f9bd
   4872  f9bd				   .
   4873  f9bd							; 
   4874  f9bd
   4875  f9bd				   .L0152		;  if _Bit4_M0_Dir_Up{4} then missile0y  =  missile0y	-  2
   4876  f9bd
   4877  f9bd		       a5 da		      LDA	_Bit4_M0_Dir_Up
   4878  f9bf		       29 10		      AND	#16
   4879  f9c1		       f0 07		      BEQ	.skipL0152
   4880  f9c3				   .condpart63
   4881  f9c3		       a5 91		      LDA	missile0y
   4882  f9c5		       38		      SEC
   4883  f9c6		       e9 02		      SBC	#2
   4884  f9c8		       85 91		      STA	missile0y
   4885  f9ca				   .skipL0152
   4886  f9ca				   .L0153		;  if _Bit5_M0_Dir_Down{5} then missile0y  =  missile0y  +  2
   4887  f9ca
   4888  f9ca		       a5 da		      LDA	_Bit5_M0_Dir_Down
   4889  f9cc		       29 20		      AND	#32
   4890  f9ce		       f0 07		      BEQ	.skipL0153
   4891  f9d0				   .condpart64
   4892  f9d0		       a5 91		      LDA	missile0y
   4893  f9d2		       18		      CLC
   4894  f9d3		       69 02		      ADC	#2
   4895  f9d5		       85 91		      STA	missile0y
   4896  f9d7				   .skipL0153
   4897  f9d7				   .L0154		;  if _Bit6_M0_Dir_Left{6} then missile0x  =  missile0x  -  2
   4898  f9d7
   4899  f9d7		       24 da		      BIT	_Bit6_M0_Dir_Left
   4900  f9d9		       50 07		      BVC	.skipL0154
   4901  f9db				   .condpart65
   4902  f9db		       a5 82		      LDA	missile0x
   4903  f9dd		       38		      SEC
   4904  f9de		       e9 02		      SBC	#2
   4905  f9e0		       85 82		      STA	missile0x
   4906  f9e2				   .skipL0154
   4907  f9e2				   .L0155		;  if _Bit7_M0_Dir_Right{7} then missile0x  =	missile0x  +  2
   4908  f9e2
   4909  f9e2		       24 da		      BIT	_Bit7_M0_Dir_Right
   4910  f9e4		       10 07		      BPL	.skipL0155
   4911  f9e6				   .condpart66
   4912  f9e6		       a5 82		      LDA	missile0x
   4913  f9e8		       18		      CLC
   4914  f9e9		       69 02		      ADC	#2
   4915  f9eb		       85 82		      STA	missile0x
   4916  f9ed				   .skipL0155
   4917  f9ed				   .
   4918  f9ed							; 
   4919  f9ed
   4920  f9ed				   .
   4921  f9ed							; 
   4922  f9ed
   4923  f9ed				   .
   4924  f9ed							; 
   4925  f9ed
   4926  f9ed				   .
   4927  f9ed							; 
   4928  f9ed
   4929  f9ed				   .L0156		;  if missile0y  <  _M_Edge_Top then goto __Skip_to_Clear_Missile
   4930  f9ed
   4931  f9ed		       a5 91		      LDA	missile0y
   4932  f9ef		       c9 02		      CMP	#_M_Edge_Top
   4933  f9f1		       b0 03		      BCS	.skipL0156
   4934  f9f3				   .condpart67
   4935  f9f3		       4c 18 fa 	      jmp	.__Skip_to_Clear_Missile
   4936  f9f6
   4937  f9f6				   .skipL0156
   4938  f9f6				   .L0157		;  if missile0y  >  _M_Edge_Bottom then goto __Skip_to_Clear_Missile
   4939  f9f6
   4940  f9f6		       a9 58		      LDA	#_M_Edge_Bottom
   4941  f9f8		       c5 91		      CMP	missile0y
   4942  f9fa		       b0 03		      BCS	.skipL0157
   4943  f9fc				   .condpart68
   4944  f9fc		       4c 18 fa 	      jmp	.__Skip_to_Clear_Missile
   4945  f9ff
   4946  f9ff				   .skipL0157
   4947  f9ff				   .L0158		;  if missile0x  <  _M_Edge_Left then goto __Skip_to_Clear_Missile
   4948  f9ff
   4949  f9ff		       a5 82		      LDA	missile0x
   4950  fa01		       c9 02		      CMP	#_M_Edge_Left
   4951  fa03		       b0 03		      BCS	.skipL0158
   4952  fa05				   .condpart69
   4953  fa05		       4c 18 fa 	      jmp	.__Skip_to_Clear_Missile
   4954  fa08
   4955  fa08				   .skipL0158
   4956  fa08				   .L0159		;  if missile0x  >  _M_Edge_Right then goto __Skip_to_Clear_Missile
   4957  fa08
   4958  fa08		       a9 9f		      LDA	#_M_Edge_Right
   4959  fa0a		       c5 82		      CMP	missile0x
   4960  fa0c		       b0 03		      BCS	.skipL0159
   4961  fa0e				   .condpart70
   4962  fa0e		       4c 18 fa 	      jmp	.__Skip_to_Clear_Missile
   4963  fa11
   4964  fa11				   .skipL0159
   4965  fa11				   .
   4966  fa11							; 
   4967  fa11
   4968  fa11				   .
   4969  fa11							; 
   4970  fa11
   4971  fa11				   .
   4972  fa11							; 
   4973  fa11
   4974  fa11				   .
   4975  fa11							; 
   4976  fa11
   4977  fa11				   .L0160		;  if !collision(playfield,missile0) then goto __Skip_Missile
   4978  fa11
   4979  fa11		       24 04		      bit	CXM0FB
   4980  fa13		       30 03		      BMI	.skipL0160
   4981  fa15				   .condpart71
   4982  fa15		       4c 24 fa 	      jmp	.__Skip_Missile
   4983  fa18
   4984  fa18				   .skipL0160
   4985  fa18				   .
   4986  fa18							; 
   4987  fa18
   4988  fa18				   .__Skip_to_Clear_Missile
   4989  fa18							; __Skip_to_Clear_Missile
   4990  fa18
   4991  fa18				   .
   4992  fa18							; 
   4993  fa18
   4994  fa18				   .
   4995  fa18							; 
   4996  fa18
   4997  fa18				   .
   4998  fa18							; 
   4999  fa18
   5000  fa18				   .
   5001  fa18							; 
   5002  fa18
   5003  fa18				   .L0161		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   5004  fa18
   5005  fa18		       a5 ec		      LDA	_Bit7_M0_Moving
   5006  fa1a		       29 7f		      AND	#127
   5007  fa1c		       85 ec		      STA	_Bit7_M0_Moving
   5008  fa1e		       a9 c8		      LDA	#200
   5009  fa20		       85 82		      STA	missile0x
   5010  fa22		       85 91		      STA	missile0y
   5011  fa24				   .
   5012  fa24							; 
   5013  fa24
   5014  fa24				   .__Skip_Missile
   5015  fa24							; __Skip_Missile
   5016  fa24
   5017  fa24				   .
   5018  fa24							; 
   5019  fa24
   5020  fa24				   .
   5021  fa24							; 
   5022  fa24
   5023  fa24				   .
   5024  fa24							; 
   5025  fa24
   5026  fa24				   .
   5027  fa24							; 
   5028  fa24
   5029  fa24				   .
   5030  fa24							; 
   5031  fa24
   5032  fa24				   .
   5033  fa24							; 
   5034  fa24
   5035  fa24				   .
   5036  fa24							; 
   5037  fa24
   5038  fa24				   .L0162		;  drawscreen
   5039  fa24
   5040  fa24		       20 2c f3 	      jsr	drawscreen
   5041  fa27				   .
   5042  fa27							; 
   5043  fa27
   5044  fa27				   .
   5045  fa27							; 
   5046  fa27
   5047  fa27				   .
   5048  fa27							; 
   5049  fa27
   5050  fa27				   .
   5051  fa27							; 
   5052  fa27
   5053  fa27				   .
   5054  fa27							; 
   5055  fa27
   5056  fa27				   .
   5057  fa27							; 
   5058  fa27
   5059  fa27				   .
   5060  fa27							; 
   5061  fa27
   5062  fa27				   .
   5063  fa27							; 
   5064  fa27
   5065  fa27				   .
   5066  fa27							; 
   5067  fa27
   5068  fa27				   .
   5069  fa27							; 
   5070  fa27
   5071  fa27				   .
   5072  fa27							; 
   5073  fa27
   5074  fa27				   .
   5075  fa27							; 
   5076  fa27
   5077  fa27				   .
   5078  fa27							; 
   5079  fa27
   5080  fa27				   .
   5081  fa27							; 
   5082  fa27
   5083  fa27				   .
   5084  fa27							; 
   5085  fa27
   5086  fa27				   .L0163		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   5087  fa27
   5088  fa27		       a9 01		      lda	#1
   5089  fa29		       2c 82 02 	      bit	SWCHB
   5090  fa2c		       f0 09		      BEQ	.skipL0163
   5091  fa2e				   .condpart72
   5092  fa2e		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5093  fa30		       29 fe		      AND	#254
   5094  fa32		       85 ec		      STA	_Bit0_Reset_Restrainer
   5095  fa34		       4c 21 f5 	      jmp	.__Main_Loop
   5096  fa37
   5097  fa37				   .skipL0163
   5098  fa37				   .
   5099  fa37							; 
   5100  fa37
   5101  fa37				   .
   5102  fa37							; 
   5103  fa37
   5104  fa37				   .
   5105  fa37							; 
   5106  fa37
   5107  fa37				   .
   5108  fa37							; 
   5109  fa37
   5110  fa37				   .
   5111  fa37							; 
   5112  fa37
   5113  fa37				   .L0164		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   5114  fa37
   5115  fa37		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5116  fa39		       4a		      LSR
   5117  fa3a		       90 03		      BCC	.skipL0164
   5118  fa3c				   .condpart73
   5119  fa3c		       4c 21 f5 	      jmp	.__Main_Loop
   5120  fa3f
   5121  fa3f				   .skipL0164
   5122  fa3f				   .
   5123  fa3f							; 
   5124  fa3f
   5125  fa3f				   .
   5126  fa3f							; 
   5127  fa3f
   5128  fa3f				   .
   5129  fa3f							; 
   5130  fa3f
   5131  fa3f				   .
   5132  fa3f							; 
   5133  fa3f
   5134  fa3f				   .L0165		;  goto __Start_Restart
   5135  fa3f		       4c cc f3 	      jmp	.__Start_Restart
   5136  fa42				  -	      if	(<*) > (<(*+7))
   5137  fa42				  -	      repeat	($100-<*)
   5138  fa42				  -	      .byte	0
   5139  fa42				  -	      repend
   5140  fa42					      endif
   5141  fa42				   playerL052_0
   5142  fa42		       3c		      .byte.b	%00111100
   5143  fa43		       7e		      .byte.b	%01111110
   5144  fa44		       c3		      .byte.b	%11000011
   5145  fa45		       bd		      .byte.b	%10111101
   5146  fa46		       ff		      .byte.b	%11111111
   5147  fa47		       db		      .byte.b	%11011011
   5148  fa48		       7e		      .byte.b	%01111110
   5149  fa49		       3c		      .byte.b	%00111100
   5150  fa4a					      if	ECHOFIRST
      1362 bytes of ROM space left
   5151  fa4a					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   5152  fa4a					      endif
   5153  fa4a		       00 01	   ECHOFIRST  =	1
   5154  fa4a
   5155  fa4a
   5156  fa4a
   5157  fa4a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5158  fa4a
   5159  fa4a							; feel free to modify the score graphics - just keep each digit 8 high
   5160  fa4a							; and keep the conditional compilation stuff intact
   5161  fa4a				  -	      ifconst	ROM2k
   5162  fa4a				  -	      ORG	$F7AC-8
   5163  fa4a					      else
   5164  fa4a				  -	      ifconst	bankswitch
   5165  fa4a				  -	      if	bankswitch == 8
   5166  fa4a				  -	      ORG	$2F94-bscode_length
   5167  fa4a				  -	      RORG	$FF94-bscode_length
   5168  fa4a				  -	      endif
   5169  fa4a				  -	      if	bankswitch == 16
   5170  fa4a				  -	      ORG	$4F94-bscode_length
   5171  fa4a				  -	      RORG	$FF94-bscode_length
   5172  fa4a				  -	      endif
   5173  fa4a				  -	      if	bankswitch == 32
   5174  fa4a				  -	      ORG	$8F94-bscode_length
   5175  fa4a				  -	      RORG	$FF94-bscode_length
   5176  fa4a				  -	      endif
   5177  fa4a				  -	      if	bankswitch == 64
   5178  fa4a				  -	      ORG	$10F80-bscode_length
   5179  fa4a				  -	      RORG	$1FF80-bscode_length
   5180  fa4a				  -	      endif
   5181  fa4a					      else
   5182  ff9c					      ORG	$FF9C
   5183  ff9c					      endif
   5184  ff9c					      endif
   5185  ff9c
   5186  ff9c							; font equates
   5187  ff9c		       00 01	   .21stcentury =	1
   5188  ff9c		       00 02	   alarmclock =	2
   5189  ff9c		       00 03	   handwritten =	3
   5190  ff9c		       00 04	   interrupted =	4
   5191  ff9c		       00 05	   retroputer =	5
   5192  ff9c		       00 06	   whimsey    =	6
   5193  ff9c		       00 07	   tiny       =	7
   5194  ff9c		       00 08	   hex	      =	8
   5195  ff9c
   5196  ff9c				  -	      ifconst	font
   5197  ff9c				  -	      if	font == hex
   5198  ff9c				  -	      ORG	. - 48
   5199  ff9c				  -	      endif
   5200  ff9c					      endif
   5201  ff9c
   5202  ff9c				   scoretable
   5203  ff9c
   5204  ff9c				  -	      ifconst	font
   5205  ff9c				  -	      if	font == .21stcentury
   5206  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   5207  ff9c				  -	      endif
   5208  ff9c				  -	      if	font == alarmclock
   5209  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   5210  ff9c				  -	      endif
   5211  ff9c				  -	      if	font == handwritten
   5212  ff9c				  -	      include	"score_graphics.asm.handwritten"
   5213  ff9c				  -	      endif
   5214  ff9c				  -	      if	font == interrupted
   5215  ff9c				  -	      include	"score_graphics.asm.interrupted"
   5216  ff9c				  -	      endif
   5217  ff9c				  -	      if	font == retroputer
   5218  ff9c				  -	      include	"score_graphics.asm.retroputer"
   5219  ff9c				  -	      endif
   5220  ff9c				  -	      if	font == whimsey
   5221  ff9c				  -	      include	"score_graphics.asm.whimsey"
   5222  ff9c				  -	      endif
   5223  ff9c				  -	      if	font == tiny
   5224  ff9c				  -	      include	"score_graphics.asm.tiny"
   5225  ff9c				  -	      endif
   5226  ff9c				  -	      if	font == hex
   5227  ff9c				  -	      include	"score_graphics.asm.hex"
   5228  ff9c				  -	      endif
   5229  ff9c					      else		; default font
   5230  ff9c
   5231  ff9c		       3c		      .byte.b	%00111100
   5232  ff9d		       66		      .byte.b	%01100110
   5233  ff9e		       66		      .byte.b	%01100110
   5234  ff9f		       66		      .byte.b	%01100110
   5235  ffa0		       66		      .byte.b	%01100110
   5236  ffa1		       66		      .byte.b	%01100110
   5237  ffa2		       66		      .byte.b	%01100110
   5238  ffa3		       3c		      .byte.b	%00111100
   5239  ffa4
   5240  ffa4		       7e		      .byte.b	%01111110
   5241  ffa5		       18		      .byte.b	%00011000
   5242  ffa6		       18		      .byte.b	%00011000
   5243  ffa7		       18		      .byte.b	%00011000
   5244  ffa8		       18		      .byte.b	%00011000
   5245  ffa9		       38		      .byte.b	%00111000
   5246  ffaa		       18		      .byte.b	%00011000
   5247  ffab		       08		      .byte.b	%00001000
   5248  ffac
   5249  ffac		       7e		      .byte.b	%01111110
   5250  ffad		       60		      .byte.b	%01100000
   5251  ffae		       60		      .byte.b	%01100000
   5252  ffaf		       3c		      .byte.b	%00111100
   5253  ffb0		       06		      .byte.b	%00000110
   5254  ffb1		       06		      .byte.b	%00000110
   5255  ffb2		       46		      .byte.b	%01000110
   5256  ffb3		       3c		      .byte.b	%00111100
   5257  ffb4
   5258  ffb4		       3c		      .byte.b	%00111100
   5259  ffb5		       46		      .byte.b	%01000110
   5260  ffb6		       06		      .byte.b	%00000110
   5261  ffb7		       06		      .byte.b	%00000110
   5262  ffb8		       1c		      .byte.b	%00011100
   5263  ffb9		       06		      .byte.b	%00000110
   5264  ffba		       46		      .byte.b	%01000110
   5265  ffbb		       3c		      .byte.b	%00111100
   5266  ffbc
   5267  ffbc		       0c		      .byte.b	%00001100
   5268  ffbd		       0c		      .byte.b	%00001100
   5269  ffbe		       7e		      .byte.b	%01111110
   5270  ffbf		       4c		      .byte.b	%01001100
   5271  ffc0		       4c		      .byte.b	%01001100
   5272  ffc1		       2c		      .byte.b	%00101100
   5273  ffc2		       1c		      .byte.b	%00011100
   5274  ffc3		       0c		      .byte.b	%00001100
   5275  ffc4
   5276  ffc4		       3c		      .byte.b	%00111100
   5277  ffc5		       46		      .byte.b	%01000110
   5278  ffc6		       06		      .byte.b	%00000110
   5279  ffc7		       06		      .byte.b	%00000110
   5280  ffc8		       3c		      .byte.b	%00111100
   5281  ffc9		       60		      .byte.b	%01100000
   5282  ffca		       60		      .byte.b	%01100000
   5283  ffcb		       7e		      .byte.b	%01111110
   5284  ffcc
   5285  ffcc		       3c		      .byte.b	%00111100
   5286  ffcd		       66		      .byte.b	%01100110
   5287  ffce		       66		      .byte.b	%01100110
   5288  ffcf		       66		      .byte.b	%01100110
   5289  ffd0		       7c		      .byte.b	%01111100
   5290  ffd1		       60		      .byte.b	%01100000
   5291  ffd2		       62		      .byte.b	%01100010
   5292  ffd3		       3c		      .byte.b	%00111100
   5293  ffd4
   5294  ffd4		       30		      .byte.b	%00110000
   5295  ffd5		       30		      .byte.b	%00110000
   5296  ffd6		       30		      .byte.b	%00110000
   5297  ffd7		       18		      .byte.b	%00011000
   5298  ffd8		       0c		      .byte.b	%00001100
   5299  ffd9		       06		      .byte.b	%00000110
   5300  ffda		       42		      .byte.b	%01000010
   5301  ffdb		       3e		      .byte.b	%00111110
   5302  ffdc
   5303  ffdc		       3c		      .byte.b	%00111100
   5304  ffdd		       66		      .byte.b	%01100110
   5305  ffde		       66		      .byte.b	%01100110
   5306  ffdf		       66		      .byte.b	%01100110
   5307  ffe0		       3c		      .byte.b	%00111100
   5308  ffe1		       66		      .byte.b	%01100110
   5309  ffe2		       66		      .byte.b	%01100110
   5310  ffe3		       3c		      .byte.b	%00111100
   5311  ffe4
   5312  ffe4		       3c		      .byte.b	%00111100
   5313  ffe5		       46		      .byte.b	%01000110
   5314  ffe6		       06		      .byte.b	%00000110
   5315  ffe7		       3e		      .byte.b	%00111110
   5316  ffe8		       66		      .byte.b	%01100110
   5317  ffe9		       66		      .byte.b	%01100110
   5318  ffea		       66		      .byte.b	%01100110
   5319  ffeb		       3c		      .byte.b	%00111100
   5320  ffec
   5321  ffec					      ifnconst	DPC_kernel_options
   5322  ffec
   5323  ffec		       00		      .byte.b	%00000000
   5324  ffed		       00		      .byte.b	%00000000
   5325  ffee		       00		      .byte.b	%00000000
   5326  ffef		       00		      .byte.b	%00000000
   5327  fff0		       00		      .byte.b	%00000000
   5328  fff1		       00		      .byte.b	%00000000
   5329  fff2		       00		      .byte.b	%00000000
   5330  fff3		       00		      .byte.b	%00000000
   5331  fff4
   5332  fff4					      endif
   5333  fff4
   5334  fff4					      endif
   5335  fff4
   5336  fff4				  -	      ifconst	ROM2k
   5337  fff4				  -	      ORG	$F7FC
   5338  fff4					      else
   5339  fff4				  -	      ifconst	bankswitch
   5340  fff4				  -	      if	bankswitch == 8
   5341  fff4				  -	      ORG	$2FF4-bscode_length
   5342  fff4				  -	      RORG	$FFF4-bscode_length
   5343  fff4				  -	      endif
   5344  fff4				  -	      if	bankswitch == 16
   5345  fff4				  -	      ORG	$4FF4-bscode_length
   5346  fff4				  -	      RORG	$FFF4-bscode_length
   5347  fff4				  -	      endif
   5348  fff4				  -	      if	bankswitch == 32
   5349  fff4				  -	      ORG	$8FF4-bscode_length
   5350  fff4				  -	      RORG	$FFF4-bscode_length
   5351  fff4				  -	      endif
   5352  fff4				  -	      if	bankswitch == 64
   5353  fff4				  -	      ORG	$10FE0-bscode_length
   5354  fff4				  -	      RORG	$1FFE0-bscode_length
   5355  fff4				  -	      endif
   5356  fff4					      else
   5357  fffc					      ORG	$FFFC
   5358  fffc					      endif
   5359  fffc					      endif
   5360  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5361  fffc
   5362  fffc				  -	      ifconst	bankswitch
   5363  fffc				  -	      if	bankswitch == 8
   5364  fffc				  -	      ORG	$2FFC
   5365  fffc				  -	      RORG	$FFFC
   5366  fffc				  -	      endif
   5367  fffc				  -	      if	bankswitch == 16
   5368  fffc				  -	      ORG	$4FFC
   5369  fffc				  -	      RORG	$FFFC
   5370  fffc				  -	      endif
   5371  fffc				  -	      if	bankswitch == 32
   5372  fffc				  -	      ORG	$8FFC
   5373  fffc				  -	      RORG	$FFFC
   5374  fffc				  -	      endif
   5375  fffc				  -	      if	bankswitch == 64
   5376  fffc				  -	      ORG	$10FF0
   5377  fffc				  -	      RORG	$1FFF0
   5378  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5379  fffc				  -	      ORG	$10FF8
   5380  fffc				  -	      RORG	$1FFF8
   5381  fffc				  -	      ifconst	superchip
   5382  fffc				  -	      .byte	"E","F","S","C"
   5383  fffc				  -	      else
   5384  fffc				  -	      .byte	"E","F","E","F"
   5385  fffc				  -	      endif
   5386  fffc				  -	      ORG	$10FFC
   5387  fffc				  -	      RORG	$1FFFC
   5388  fffc				  -	      endif
   5389  fffc					      else
   5390  fffc				  -	      ifconst	ROM2k
   5391  fffc				  -	      ORG	$F7FC
   5392  fffc					      else
   5393  fffc					      ORG	$FFFC
   5394  fffc					      endif
   5395  fffc					      endif
   5396  fffc		       00 f0		      .word.w	(start & $ffff)
   5397  fffe		       00 f0		      .word.w	(start & $ffff)

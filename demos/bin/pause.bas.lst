------- FILE e:\Documents\bB\demos\pause.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE e:\Documents\bB\demos\pause.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE e:\Documents\bB\demos\pause.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 98	    _P_Edge_Right =	152
      4  10000 ????
      5  10000 ????		00 01	    _P_Edge_Left =	1
      6  10000 ????
      7  10000 ????		00 58	    _P_Edge_Bottom =	88
      8  10000 ????
      9  10000 ????		00 09	    _P_Edge_Top =	9
     10  10000 ????
     11  10000 ????		00 ed	    rand16     =	z
     12  10000 ????
     13  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     14  10000 ????
     15  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     16  10000 ????
     17  10000 ????		00 ec	    _BitOp_01  =	y
     18  10000 ????
     19  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     20  10000 ????
     21  10000 ????		00 e5	    _Bit1_BW_Check =	r
     22  10000 ????
     23  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     24  10000 ????
     25  10000 ????		00 e5	    _BitOp_02  =	r
     26  10000 ????
     27  10000 ????		00 e4	    _Pause_Color_Tmp =	q
     28  10000 ????
     29  10000 ????		00 e3	    _Pause_Mem_Color_Tmp =	p
     30  10000 ????
     31  10000 ????		00 e2	    _Pause_Counter_Tmp =	o
     32  10000 ????
     33  10000 ????		00 01	    PFcolors   =	1
     34  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE e:\Documents\bB\demos\pause.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 98	    _P_Edge_Right =	152
      4  10000 ????
      5  10000 ????		00 01	    _P_Edge_Left =	1
      6  10000 ????
      7  10000 ????		00 58	    _P_Edge_Bottom =	88
      8  10000 ????
      9  10000 ????		00 09	    _P_Edge_Top =	9
     10  10000 ????
     11  10000 ????		00 ed	    rand16     =	z
     12  10000 ????
     13  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     14  10000 ????
     15  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     16  10000 ????
     17  10000 ????		00 ec	    _BitOp_01  =	y
     18  10000 ????
     19  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     20  10000 ????
     21  10000 ????		00 e5	    _Bit1_BW_Check =	r
     22  10000 ????
     23  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     24  10000 ????
     25  10000 ????		00 e5	    _BitOp_02  =	r
     26  10000 ????
     27  10000 ????		00 e4	    _Pause_Color_Tmp =	q
     28  10000 ????
     29  10000 ????		00 e3	    _Pause_Mem_Color_Tmp =	p
     30  10000 ????
     31  10000 ????		00 e2	    _Pause_Counter_Tmp =	o
     32  10000 ????
     33  10000 ????		00 01	    PFcolors   =	1
     34  10000 ????		00 01	    no_blank_lines =	1
------- FILE e:\Documents\bB\demos\pause.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 7f f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 0c		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc					      ifconst	PFcolors
    306  f0dc		       8a		      txa
    307  f0dd		       a8		      tay
    308  f0de		       b1 f0		      lda	(pfcolortable),y
    309  f0e0					      ifnconst	backgroundchange
    310  f0e0		       85 08		      sta	COLUPF
    311  f0e2				  -	      else
    312  f0e2				  -	      sta	COLUBK
    313  f0e2					      endif
    314  f0e2		       4c 8f f0 	      jmp	continuekernel
    315  f0e5				  -	      else
    316  f0e5				  -	      ifconst	kernelmacrodef
    317  f0e5				  -	      kernelmacro
    318  f0e5				  -	      else
    319  f0e5				  -	      sleep	12
    320  f0e5				  -	      endif
    321  f0e5					      endif
    322  f0e5				  -	      else
    323  f0e5				  -	      lda	(player0color),y
    324  f0e5				  -	      sta	player0colorstore
    325  f0e5				  -	      sleep	4
    326  f0e5					      endif
    327  f0e5		       4c 8f f0 	      jmp	continuekernel
    328  f0e8					      endif
    329  f0e8				   altkernel2
    330  f0e8		       8a		      txa
    331  f0e9					      ifnconst	vertical_reflect
    332  f0e9		       cb fc		      sbx	#256-pfwidth
    333  f0eb				  -	      else
    334  f0eb				  -	      sbx	#256-pfwidth/2
    335  f0eb					      endif
    336  f0eb		       30 24		      bmi	lastkernelline
    337  f0ed				  -	      ifconst	pfrowheight
    338  f0ed				  -	      lda	#pfrowheight
    339  f0ed					      else
    340  f0ed					      ifnconst	pfres
    341  f0ed		       a9 08		      lda	#8
    342  f0ef				  -	      else
    343  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ef					      endif
    345  f0ef					      endif
    346  f0ef		       85 9c		      sta	temp1
    347  f0f1		       4c 8f f0 	      jmp	continuekernel
    348  f0f4					      endif
    349  f0f4
    350  f0f4				   altkernel
    351  f0f4
    352  f0f4				  -	      ifconst	PFmaskvalue
    353  f0f4				  -	      lda	#PFmaskvalue
    354  f0f4					      else
    355  f0f4		       a9 00		      lda	#0
    356  f0f6					      endif
    357  f0f6		       85 0e		      sta	PF1L
    358  f0f8		       85 0f		      sta	PF2
    359  f0fa
    360  f0fa
    361  f0fa							;sleep 3
    362  f0fa
    363  f0fa							;28 cycles to fix things
    364  f0fa							;minus 11=17
    365  f0fa
    366  f0fa							; lax temp4
    367  f0fa							; clc
    368  f0fa		       8a		      txa
    369  f0fb					      ifnconst	vertical_reflect
    370  f0fb		       cb fc		      sbx	#256-pfwidth
    371  f0fd				  -	      else
    372  f0fd				  -	      sbx	#256-pfwidth/2
    373  f0fd					      endif
    374  f0fd
    375  f0fd		       30 12		      bmi	lastkernelline
    376  f0ff
    377  f0ff				  -	      ifconst	PFcolorandheight
    378  f0ff				  -	      ifconst	pfres
    379  f0ff				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ff				  -	      else
    381  f0ff				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ff				  -	      endif
    383  f0ff				  -	      ifnconst	backgroundchange
    384  f0ff				  -	      sty	COLUPF
    385  f0ff				  -	      else
    386  f0ff				  -	      sty	COLUBK
    387  f0ff				  -	      endif
    388  f0ff				  -	      ifconst	pfres
    389  f0ff				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ff				  -	      else
    391  f0ff				  -	      lda	playfieldcolorandheight-88,x
    392  f0ff				  -	      endif
    393  f0ff				  -	      sta.w	temp1
    394  f0ff					      endif
    395  f0ff				  -	      ifconst	PFheights
    396  f0ff				  -	      lsr
    397  f0ff				  -	      lsr
    398  f0ff				  -	      tay
    399  f0ff				  -	      lda	(pfheighttable),y
    400  f0ff				  -	      sta.w	temp1
    401  f0ff					      endif
    402  f0ff					      ifconst	PFcolors
    403  f0ff		       a8		      tay
    404  f100		       b1 f0		      lda	(pfcolortable),y
    405  f102					      ifnconst	backgroundchange
    406  f102		       85 08		      sta	COLUPF
    407  f104				  -	      else
    408  f104				  -	      sta	COLUBK
    409  f104					      endif
    410  f104				  -	      ifconst	pfrowheight
    411  f104				  -	      lda	#pfrowheight
    412  f104					      else
    413  f104					      ifnconst	pfres
    414  f104		       a9 08		      lda	#8
    415  f106				  -	      else
    416  f106				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f106					      endif
    418  f106					      endif
    419  f106		       85 9c		      sta	temp1
    420  f108					      endif
    421  f108					      ifnconst	PFcolorandheight
    422  f108				  -	      ifnconst	PFcolors
    423  f108				  -	      ifnconst	PFheights
    424  f108				  -	      ifnconst	no_blank_lines
    425  f108				  -			; read paddle 0
    426  f108				  -			; lo-res paddle read
    427  f108				  -			; bit INPT0
    428  f108				  -			; bmi paddleskipread
    429  f108				  -			; inc paddle0
    430  f108				  -			;donepaddleskip
    431  f108				  -	      sleep	10
    432  f108				  -	      ifconst	pfrowheight
    433  f108				  -	      lda	#pfrowheight
    434  f108				  -	      else
    435  f108				  -	      ifnconst	pfres
    436  f108				  -	      lda	#8
    437  f108				  -	      else
    438  f108				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f108				  -	      endif
    440  f108				  -	      endif
    441  f108				  -	      sta	temp1
    442  f108				  -	      endif
    443  f108				  -	      endif
    444  f108					      endif
    445  f108					      endif
    446  f108
    447  f108
    448  f108		       a5 92		      lda	ballheight
    449  f10a		       c7 89		      dcp	bally
    450  f10c		       e5 9f		      sbc	temp4
    451  f10e
    452  f10e
    453  f10e		       4c a6 f0 	      jmp	goback
    454  f111
    455  f111
    456  f111				  -	      ifnconst	no_blank_lines
    457  f111				  -lastkernelline
    458  f111				  -	      ifnconst	PFcolors
    459  f111				  -	      sleep	10
    460  f111				  -	      else
    461  f111				  -	      ldy	#124
    462  f111				  -	      lda	(pfcolortable),y
    463  f111				  -	      sta	COLUPF
    464  f111				  -	      endif
    465  f111				  -
    466  f111				  -	      ifconst	PFheights
    467  f111				  -	      ldx	#1
    468  f111				  -			;sleep 4
    469  f111				  -	      sleep	3	; this was over 1 cycle
    470  f111				  -	      else
    471  f111				  -	      ldx	playfieldpos
    472  f111				  -			;sleep 3
    473  f111				  -	      sleep	2	; this was over 1 cycle
    474  f111				  -	      endif
    475  f111				  -
    476  f111				  -	      jmp	enterlastkernel
    477  f111				  -
    478  f111					      else
    479  f111				   lastkernelline
    480  f111
    481  f111				  -	      ifconst	PFheights
    482  f111				  -	      ldx	#1
    483  f111				  -			;sleep 5
    484  f111				  -	      sleep	4	; this was over 1 cycle
    485  f111					      else
    486  f111		       a6 ef		      ldx	playfieldpos
    487  f113							;sleep 4
      0  f113					      sleep	3	; this was over 1 cycle
      1  f113				   .CYCLES    SET	3
      2  f113
      3  f113				  -	      IF	.CYCLES < 2
      4  f113				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f113				  -	      ERR
      6  f113					      ENDIF
      7  f113
      8  f113					      IF	.CYCLES & 1
      9  f113					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f113		       04 00		      nop	0
     11  f115				  -	      ELSE
     12  f115				  -	      bit	VSYNC
     13  f115					      ENDIF
     14  f115				   .CYCLES    SET	.CYCLES - 3
     15  f115					      ENDIF
     16  f115
     17  f115				  -	      REPEAT	.CYCLES / 2
     18  f115				  -	      nop
     19  f115					      REPEND
    489  f115					      endif
    490  f115
    491  f115		       e0 00		      cpx	#0
    492  f117		       d0 0a		      bne	.enterfromNBL
    493  f119		       4c 84 f1 	      jmp	no_blank_lines_bailout
    494  f11c					      endif
    495  f11c
    496  f11c				  -	      if	((<*)>$d5)
    497  f11c				  -	      align	256
    498  f11c					      endif
    499  f11c							; this is a kludge to prevent page wrapping - fix!!!
    500  f11c
    501  f11c				   .skipDrawlastP1
    502  f11c		       a9 00		      lda	#0
    503  f11e		       a8		      tay		; added so we don't cross a page
    504  f11f		       4c 49 f1 	      jmp	.continuelastP1
    505  f122
    506  f122				   .endkerloop		; enter at cycle 59??
    507  f122
    508  f122		       ea		      nop
    509  f123
    510  f123				   .enterfromNBL
    511  f123				  -	      ifconst	pfres
    512  f123				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f123				  -	      sty	PF1L	;3
    514  f123				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f123				  -	      sty	PF2L	;3
    516  f123				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f123				  -	      sty	PF1R	; possibly too early?
    518  f123				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f123				  -	      sty	PF2R	;3
    520  f123					      else
    521  f123		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f126		       84 0e		      sty	PF1L	;3
    523  f128		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f12b		       84 0f		      sty	PF2L	;3
    525  f12d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f130		       84 0e		      sty	PF1R	; possibly too early?
    527  f132		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f135		       84 0f		      sty	PF2R	;3
    529  f137					      endif
    530  f137
    531  f137				   enterlastkernel
    532  f137		       a5 92		      lda	ballheight
    533  f139
    534  f139							; tya
    535  f139		       c7 89		      dcp	bally
    536  f13b							; sleep 4
    537  f13b
    538  f13b							; sbc stack3
    539  f13b		       2a		      rol
    540  f13c		       2a		      rol
    541  f13d		       85 1f		      sta	ENABL
    542  f13f
    543  f13f		       a5 8f		      lda	player1height	;3
    544  f141		       c7 86		      dcp	player1y	;5
    545  f143		       90 d7		      bcc	.skipDrawlastP1
    546  f145		       a4 86		      ldy	player1y	;3
    547  f147		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f149							; so it doesn't cross a page boundary!
    549  f149
    550  f149				   .continuelastP1
    551  f149		       85 1c		      sta	GRP1	;3
    552  f14b
    553  f14b					      ifnconst	player1colors
    554  f14b		       a5 87		      lda	missile1height	;3
    555  f14d		       c7 88		      dcp	missile1y	;5
    556  f14f				  -	      else
    557  f14f				  -	      lda	(player1color),y
    558  f14f				  -	      sta	COLUP1
    559  f14f					      endif
    560  f14f
    561  f14f		       ca		      dex
    562  f150							;dec temp4 ; might try putting this above PF writes
    563  f150		       f0 34		      beq	endkernel
    564  f152
    565  f152
    566  f152				  -	      ifconst	pfres
    567  f152				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f152				  -	      sty	PF1L	;3
    569  f152				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f152				  -	      sty	PF2L	;3
    571  f152				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f152				  -	      sty	PF1R	; possibly too early?
    573  f152				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f152				  -	      sty	PF2R	;3
    575  f152					      else
    576  f152		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f155		       84 0e		      sty	PF1L	;3
    578  f157		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f15a		       84 0f		      sty	PF2L	;3
    580  f15c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f15f		       84 0e		      sty	PF1R	; possibly too early?
    582  f161		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f164		       84 0f		      sty	PF2R	;3
    584  f166					      endif
    585  f166
    586  f166					      ifnconst	player1colors
    587  f166		       2a		      rol		;2
    588  f167		       2a		      rol		;2
    589  f168		       85 1e		      sta	ENAM1	;3
    590  f16a				  -	      else
    591  f16a				  -	      ifnconst	playercolors
    592  f16a				  -	      sleep	7
    593  f16a				  -	      else
    594  f16a				  -	      lda.w	player0colorstore
    595  f16a				  -	      sta	COLUP0
    596  f16a				  -	      endif
    597  f16a					      endif
    598  f16a
    599  f16a		       ad 8e 00 	      lda.w	player0height
    600  f16d		       c7 85		      dcp	player0y
    601  f16f		       90 0d		      bcc	.skipDrawlastP0
    602  f171		       a4 85		      ldy	player0y
    603  f173		       b1 8a		      lda	(player0pointer),y
    604  f175				   .continuelastP0
    605  f175		       85 1b		      sta	GRP0
    606  f177
    607  f177
    608  f177
    609  f177				  -	      ifnconst	no_blank_lines
    610  f177				  -	      lda	missile0height	;3
    611  f177				  -	      dcp	missile0y	;5
    612  f177				  -	      sbc	stack1
    613  f177				  -	      sta	ENAM0	;3
    614  f177				  -	      jmp	.endkerloop
    615  f177					      else
    616  f177				  -	      ifconst	readpaddle
    617  f177				  -	      ldy	currentpaddle
    618  f177				  -	      lda	INPT0,y
    619  f177				  -	      bpl	noreadpaddle2
    620  f177				  -	      inc	paddle
    621  f177				  -	      jmp	.endkerloop
    622  f177				  -noreadpaddle2
    623  f177				  -	      sleep	4
    624  f177				  -	      jmp	.endkerloop
    625  f177					      else		; no_blank_lines and no paddle reading
    626  f177		       68		      pla
    627  f178		       48		      pha		; 14 cycles in 4 bytes
    628  f179		       68		      pla
    629  f17a		       48		      pha
    630  f17b							; sleep 14
    631  f17b		       4c 22 f1 	      jmp	.endkerloop
    632  f17e					      endif
    633  f17e					      endif
    634  f17e
    635  f17e
    636  f17e							; ifconst donepaddleskip
    637  f17e							;paddleskipread
    638  f17e							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f17e							; plus we get a lo-res paddle read
    640  f17e							; bmi donepaddleskip
    641  f17e							; endif
    642  f17e
    643  f17e				   .skipDrawlastP0
    644  f17e		       a9 00		      lda	#0
    645  f180		       a8		      tay
    646  f181		       4c 75 f1 	      jmp	.continuelastP0
    647  f184
    648  f184					      ifconst	no_blank_lines
    649  f184				   no_blank_lines_bailout
    650  f184		       a2 00		      ldx	#0
    651  f186					      endif
    652  f186
    653  f186				   endkernel
    654  f186							; 6 digit score routine
    655  f186		       86 0e		      stx	PF1
    656  f188		       86 0f		      stx	PF2
    657  f18a		       86 0d		      stx	PF0
    658  f18c		       18		      clc
    659  f18d
    660  f18d				  -	      ifconst	pfrowheight
    661  f18d				  -	      lda	#pfrowheight+2
    662  f18d					      else
    663  f18d					      ifnconst	pfres
    664  f18d		       a9 0a		      lda	#10
    665  f18f				  -	      else
    666  f18f				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f18f					      endif
    668  f18f					      endif
    669  f18f
    670  f18f		       e5 ef		      sbc	playfieldpos
    671  f191		       85 ef		      sta	playfieldpos
    672  f193		       8a		      txa
    673  f194
    674  f194				  -	      ifconst	shakescreen
    675  f194				  -	      bit	shakescreen
    676  f194				  -	      bmi	noshakescreen2
    677  f194				  -	      ldx	#$3D
    678  f194				  -noshakescreen2
    679  f194					      endif
    680  f194
    681  f194		       95 02		      sta	WSYNC,x
    682  f196
    683  f196							; STA WSYNC ;first one, need one more
    684  f196		       85 0b		      sta	REFP0
    685  f198		       85 0c		      sta	REFP1
    686  f19a		       85 1b		      STA	GRP0
    687  f19c		       85 1c		      STA	GRP1
    688  f19e							; STA PF1
    689  f19e							; STA PF2
    690  f19e		       85 2b		      sta	HMCLR
    691  f1a0		       85 1d		      sta	ENAM0
    692  f1a2		       85 1e		      sta	ENAM1
    693  f1a4		       85 1f		      sta	ENABL
    694  f1a6
    695  f1a6		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f1a8		       85 85		      sta	player0y
    697  f1aa		       a5 9e		      lda	temp3
    698  f1ac		       85 86		      sta	player1y
    699  f1ae					      ifnconst	player1colors
    700  f1ae		       a5 a1		      lda	temp6
    701  f1b0		       85 88		      sta	missile1y
    702  f1b2					      endif
    703  f1b2					      ifnconst	playercolors
    704  f1b2					      ifnconst	readpaddle
    705  f1b2		       a5 a0		      lda	temp5
    706  f1b4		       85 91		      sta	missile0y
    707  f1b6					      endif
    708  f1b6					      endif
    709  f1b6		       a5 f7		      lda	stack2
    710  f1b8		       85 89		      sta	bally
    711  f1ba
    712  f1ba							; strangely, this isn't required any more. might have
    713  f1ba							; resulted from the no_blank_lines score bounce fix
    714  f1ba							;ifconst no_blank_lines
    715  f1ba							;sta WSYNC
    716  f1ba							;endif
    717  f1ba
    718  f1ba		       ad 84 02 	      lda	INTIM
    719  f1bd		       18		      clc
    720  f1be					      ifnconst	vblank_time
    721  f1be		       69 8e		      adc	#43+12+87
    722  f1c0				  -	      else
    723  f1c0				  -	      adc	#vblank_time+12+87
    724  f1c0				  -
    725  f1c0					      endif
    726  f1c0							; sta WSYNC
    727  f1c0		       8d 96 02 	      sta	TIM64T
    728  f1c3
    729  f1c3				  -	      ifconst	minikernel
    730  f1c3				  -	      jsr	minikernel
    731  f1c3					      endif
    732  f1c3
    733  f1c3							; now reassign temp vars for score pointers
    734  f1c3
    735  f1c3							; score pointers contain:
    736  f1c3							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1c3							; swap lo2->temp1
    738  f1c3							; swap lo4->temp3
    739  f1c3							; swap lo6->temp5
    740  f1c3					      ifnconst	noscore
    741  f1c3		       a5 97		      lda	scorepointers+1
    742  f1c5							; ldy temp1
    743  f1c5		       85 9c		      sta	temp1
    744  f1c7							; sty scorepointers+1
    745  f1c7
    746  f1c7		       a5 99		      lda	scorepointers+3
    747  f1c9							; ldy temp3
    748  f1c9		       85 9e		      sta	temp3
    749  f1cb							; sty scorepointers+3
    750  f1cb
    751  f1cb
    752  f1cb		       85 2b		      sta	HMCLR
    753  f1cd		       ba		      tsx
    754  f1ce		       86 f6		      stx	stack1
    755  f1d0		       a2 e0		      ldx	#$E0
    756  f1d2		       86 20		      stx	HMP0
    757  f1d4
    758  f1d4		       a5 a3		      LDA	scorecolor
    759  f1d6		       85 06		      STA	COLUP0
    760  f1d8		       85 07		      STA	COLUP1
    761  f1da				  -	      ifconst	scorefade
    762  f1da				  -	      STA	stack2
    763  f1da					      endif
    764  f1da				  -	      ifconst	pfscore
    765  f1da				  -	      lda	pfscorecolor
    766  f1da				  -	      sta	COLUPF
    767  f1da					      endif
    768  f1da		       85 02		      sta	WSYNC
    769  f1dc		       a2 00		      ldx	#0
    770  f1de		       86 1b		      STx	GRP0
    771  f1e0		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1e2
    773  f1e2		       a5 9b		      lda	scorepointers+5
    774  f1e4							; ldy temp5
    775  f1e4		       95 a0		      sta	temp5,x
    776  f1e6							; sty scorepointers+5
    777  f1e6		       a9 ff		      lda	#>scoretable
    778  f1e8		       85 97		      sta	scorepointers+1
    779  f1ea		       85 99		      sta	scorepointers+3
    780  f1ec		       85 9b		      sta	scorepointers+5
    781  f1ee		       85 9d		      sta	temp2
    782  f1f0		       85 9f		      sta	temp4
    783  f1f2		       85 a1		      sta	temp6
    784  f1f4		       a0 07		      LDY	#7
    785  f1f6		       84 25		      STY	VDELP0
    786  f1f8		       85 10		      STA	RESP0
    787  f1fa		       85 11		      STA	RESP1
    788  f1fc
    789  f1fc
    790  f1fc		       a9 03		      LDA	#$03
    791  f1fe		       85 04		      STA	NUSIZ0
    792  f200		       85 05		      STA	NUSIZ1
    793  f202		       85 26		      STA	VDELP1
    794  f204		       a9 f0		      LDA	#$F0
    795  f206		       85 21		      STA	HMP1
    796  f208		       b1 96		      lda	(scorepointers),y
    797  f20a		       85 1b		      sta	GRP0
    798  f20c		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f20e		       4c 19 f2 	      jmp	beginscore
    800  f211
    801  f211
    802  f211				  -	      if	((<*)>$d4)
    803  f211				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f211					      endif
    805  f211
    806  f211				   loop2
    807  f211		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f213		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f215				  -	      ifconst	pfscore
    810  f215				  -	      lda.w	pfscore1
    811  f215				  -	      sta	PF1
    812  f215					      else
    813  f215				  -	      ifconst	scorefade
    814  f215				  -	      sleep	2
    815  f215				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f215					      else
      0  f215					      sleep	7
      1  f215				   .CYCLES    SET	7
      2  f215
      3  f215				  -	      IF	.CYCLES < 2
      4  f215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f215				  -	      ERR
      6  f215					      ENDIF
      7  f215
      8  f215					      IF	.CYCLES & 1
      9  f215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f215		       04 00		      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217					      ENDIF
     14  f217				   .CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217					      REPEAT	.CYCLES / 2
     18  f217		       ea		      nop
     17  f217					      REPEND
     18  f218		       ea		      nop
     19  f219					      REPEND
    818  f219					      endif
    819  f219					      endif
    820  f219							; cycle 0
    821  f219				   beginscore
    822  f219		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f21b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f21d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f21f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f221		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f223		       9a		      txs
    828  f224		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f226				  -	      ifconst	scorefade
    830  f226				  -	      lda	stack2
    831  f226					      else
      0  f226					      sleep	3
      1  f226				   .CYCLES    SET	3
      2  f226
      3  f226				  -	      IF	.CYCLES < 2
      4  f226				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f226				  -	      ERR
      6  f226					      ENDIF
      7  f226
      8  f226					      IF	.CYCLES & 1
      9  f226					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f226		       04 00		      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228					      ENDIF
     14  f228				   .CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228				  -	      REPEAT	.CYCLES / 2
     18  f228				  -	      nop
     19  f228					      REPEND
    833  f228					      endif
    834  f228
    835  f228				  -	      ifconst	pfscore
    836  f228				  -	      lda	pfscore2
    837  f228				  -	      sta	PF1
    838  f228					      else
    839  f228				  -	      ifconst	scorefade
    840  f228				  -	      sta	COLUP0
    841  f228				  -	      sta	COLUP1
    842  f228					      else
      0  f228					      sleep	6
      1  f228				   .CYCLES    SET	6
      2  f228
      3  f228				  -	      IF	.CYCLES < 2
      4  f228				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f228				  -	      ERR
      6  f228					      ENDIF
      7  f228
      8  f228				  -	      IF	.CYCLES & 1
      9  f228				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f228				  -	      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228				  -	      ENDIF
     14  f228				  -.CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228					      REPEAT	.CYCLES / 2
     18  f228		       ea		      nop
     17  f228					      REPEND
     18  f229		       ea		      nop
     17  f229					      REPEND
     18  f22a		       ea		      nop
     19  f22b					      REPEND
    844  f22b					      endif
    845  f22b					      endif
    846  f22b
    847  f22b		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f22d		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f22f		       ba		      tsx
    850  f230		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f232		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f234		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f236		       88		      dey
    854  f237		       10 d8		      bpl	loop2	;+2 60 180
    855  f239
    856  f239		       a6 f6		      ldx	stack1
    857  f23b		       9a		      txs
    858  f23c							; lda scorepointers+1
    859  f23c		       a4 9c		      ldy	temp1
    860  f23e							; sta temp1
    861  f23e		       84 97		      sty	scorepointers+1
    862  f240
    863  f240		       a9 00		      LDA	#0
    864  f242		       85 0e		      sta	PF1
    865  f244		       85 1b		      STA	GRP0
    866  f246		       85 1c		      STA	GRP1
    867  f248		       85 25		      STA	VDELP0
    868  f24a		       85 26		      STA	VDELP1	;do we need these
    869  f24c		       85 04		      STA	NUSIZ0
    870  f24e		       85 05		      STA	NUSIZ1
    871  f250
    872  f250							; lda scorepointers+3
    873  f250		       a4 9e		      ldy	temp3
    874  f252							; sta temp3
    875  f252		       84 99		      sty	scorepointers+3
    876  f254
    877  f254							; lda scorepointers+5
    878  f254		       a4 a0		      ldy	temp5
    879  f256							; sta temp5
    880  f256		       84 9b		      sty	scorepointers+5
    881  f258					      endif		;noscore
    882  f258				  -	      ifconst	readpaddle
    883  f258				  -	      lda	#%11000010
    884  f258					      else
    885  f258				  -	      ifconst	qtcontroller
    886  f258				  -	      lda	qtcontroller
    887  f258				  -	      lsr		; bit 0 in carry
    888  f258				  -	      lda	#4
    889  f258				  -	      ror		; carry into top of A
    890  f258					      else
    891  f258		       a9 02		      lda	#2
    892  f25a					      endif		; qtcontroller
    893  f25a					      endif		; readpaddle
    894  f25a		       85 02		      sta	WSYNC
    895  f25c		       85 01		      sta	VBLANK
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    897  f25f				  -	      ifconst	shakescreen
    898  f25f				  -doshakescreen
    899  f25f				  -	      bit	shakescreen
    900  f25f				  -	      bmi	noshakescreen
    901  f25f				  -	      sta	WSYNC
    902  f25f				  -noshakescreen
    903  f25f				  -	      ldx	missile0height
    904  f25f				  -	      inx
    905  f25f				  -	      rts
    906  f25f					      endif
    907  f25f
    908  f25f							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f25f
    910  f25f							; playfield drawing routines
    911  f25f							; you get a 32x12 bitmapped display in a single color :)
    912  f25f							; 0-31 and 0-11
    913  f25f
    914  f25f				   pfclear		; clears playfield - or fill with pattern
    915  f25f				  -	      ifconst	pfres
    916  f25f				  -	      ldx	#pfres*pfwidth-1
    917  f25f					      else
    918  f25f		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f261					      endif
    920  f261				   pfclear_loop
    921  f261					      ifnconst	superchip
    922  f261		       95 a4		      sta	playfield,x
    923  f263				  -	      else
    924  f263				  -	      sta	playfield-128,x
    925  f263					      endif
    926  f263		       ca		      dex
    927  f264		       10 fb		      bpl	pfclear_loop
      0  f266					      RETURN
      1  f266					      ifnconst	bankswitch
      2  f266		       60		      rts
      3  f267				  -	      else
      4  f267				  -	      jmp	BS_return
      5  f267					      endif
    929  f267
    930  f267				   setuppointers
    931  f267		       86 9d		      stx	temp2	; store on.off.flip value
    932  f269		       aa		      tax		; put x-value in x 
    933  f26a		       4a		      lsr
    934  f26b		       4a		      lsr
    935  f26c		       4a		      lsr		; divide x pos by 8 
    936  f26d		       85 9c		      sta	temp1
    937  f26f		       98		      tya
    938  f270		       0a		      asl
    939  f271					      if	pfwidth=4
    940  f271		       0a		      asl		; multiply y pos by 4
    941  f272					      endif		; else multiply by 2
    942  f272		       18		      clc
    943  f273		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f275		       a8		      tay		; put the value in y
    945  f276		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f278		       60		      rts
    947  f279
    948  f279				   pfread
    949  f279							;x=xvalue, y=yvalue
    950  f279		       20 67 f2 	      jsr	setuppointers
    951  f27c		       bd e1 f2 	      lda	setbyte,x
    952  f27f		       39 a4 00 	      and	playfield,y
    953  f282		       5d e1 f2 	      eor	setbyte,x
    954  f285							; beq readzero
    955  f285							; lda #1
    956  f285							; readzero
      0  f285					      RETURN
      1  f285					      ifnconst	bankswitch
      2  f285		       60		      rts
      3  f286				  -	      else
      4  f286				  -	      jmp	BS_return
      5  f286					      endif
    958  f286
    959  f286				   pfpixel
    960  f286							;x=xvalue, y=yvalue, a=0,1,2
    961  f286		       20 67 f2 	      jsr	setuppointers
    962  f289
    963  f289				  -	      ifconst	bankswitch
    964  f289				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f289				  -	      beq	pixelon_r	; if "on" go to on
    966  f289				  -	      lsr
    967  f289				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f289				  -	      lda	playfield,y	; if here, it's "flip"
    969  f289				  -	      eor	setbyte,x
    970  f289				  -	      ifconst	superchip
    971  f289				  -	      sta	playfield-128,y
    972  f289				  -	      else
    973  f289				  -	      sta	playfield,y
    974  f289				  -	      endif
    975  f289				  -	      RETURN
    976  f289				  -pixelon_r
    977  f289				  -	      lda	playfield,y
    978  f289				  -	      ora	setbyte,x
    979  f289				  -	      ifconst	superchip
    980  f289				  -	      sta	playfield-128,y
    981  f289				  -	      else
    982  f289				  -	      sta	playfield,y
    983  f289				  -	      endif
    984  f289				  -	      RETURN
    985  f289				  -pixeloff_r
    986  f289				  -	      lda	setbyte,x
    987  f289				  -	      eor	#$ff
    988  f289				  -	      and	playfield,y
    989  f289				  -	      ifconst	superchip
    990  f289				  -	      sta	playfield-128,y
    991  f289				  -	      else
    992  f289				  -	      sta	playfield,y
    993  f289				  -	      endif
    994  f289				  -	      RETURN
    995  f289				  -
    996  f289					      else
    997  f289		       4c ba f2 	      jmp	plotpoint
    998  f28c					      endif
    999  f28c
   1000  f28c				   pfhline
   1001  f28c							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f28c		       20 67 f2 	      jsr	setuppointers
   1003  f28f		       4c 99 f2 	      jmp	noinc
   1004  f292				   keepgoing
   1005  f292		       e8		      inx
   1006  f293		       8a		      txa
   1007  f294		       29 07		      and	#7
   1008  f296		       d0 01		      bne	noinc
   1009  f298		       c8		      iny
   1010  f299				   noinc
   1011  f299		       20 ba f2 	      jsr	plotpoint
   1012  f29c		       e4 9e		      cpx	temp3
   1013  f29e		       30 f2		      bmi	keepgoing
      0  f2a0					      RETURN
      1  f2a0					      ifnconst	bankswitch
      2  f2a0		       60		      rts
      3  f2a1				  -	      else
      4  f2a1				  -	      jmp	BS_return
      5  f2a1					      endif
   1015  f2a1
   1016  f2a1				   pfvline
   1017  f2a1							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f2a1		       20 67 f2 	      jsr	setuppointers
   1019  f2a4		       84 9c		      sty	temp1	; store memory location offset
   1020  f2a6		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a8		       a5 9e		      lda	temp3
   1022  f2aa		       0a		      asl
   1023  f2ab					      if	pfwidth=4
   1024  f2ab		       0a		      asl		; multiply by 4
   1025  f2ac					      endif		; else multiply by 2
   1026  f2ac		       85 9e		      sta	temp3	; store it
   1027  f2ae							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2ae							; right now, temp1=y=starting memory location, temp3=final
   1029  f2ae							; x should equal original x value
   1030  f2ae				   keepgoingy
   1031  f2ae		       20 ba f2 	      jsr	plotpoint
   1032  f2b1		       c8		      iny
   1033  f2b2		       c8		      iny
   1034  f2b3					      if	pfwidth=4
   1035  f2b3		       c8		      iny
   1036  f2b4		       c8		      iny
   1037  f2b5					      endif
   1038  f2b5		       c4 9e		      cpy	temp3
   1039  f2b7		       30 f5		      bmi	keepgoingy
      0  f2b9					      RETURN
      1  f2b9					      ifnconst	bankswitch
      2  f2b9		       60		      rts
      3  f2ba				  -	      else
      4  f2ba				  -	      jmp	BS_return
      5  f2ba					      endif
   1041  f2ba
   1042  f2ba				   plotpoint
   1043  f2ba		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2bc		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2be		       4a		      lsr
   1046  f2bf		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2c1		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2c4		       5d e1 f2 	      eor	setbyte,x
   1049  f2c7				  -	      ifconst	superchip
   1050  f2c7				  -	      sta	playfield-128,y
   1051  f2c7					      else
   1052  f2c7		       99 a4 00 	      sta	playfield,y
   1053  f2ca					      endif
   1054  f2ca		       60		      rts
   1055  f2cb				   pixelon
   1056  f2cb		       b9 a4 00 	      lda	playfield,y
   1057  f2ce		       1d e1 f2 	      ora	setbyte,x
   1058  f2d1				  -	      ifconst	superchip
   1059  f2d1				  -	      sta	playfield-128,y
   1060  f2d1					      else
   1061  f2d1		       99 a4 00 	      sta	playfield,y
   1062  f2d4					      endif
   1063  f2d4		       60		      rts
   1064  f2d5				   pixeloff
   1065  f2d5		       bd e1 f2 	      lda	setbyte,x
   1066  f2d8		       49 ff		      eor	#$ff
   1067  f2da		       39 a4 00 	      and	playfield,y
   1068  f2dd				  -	      ifconst	superchip
   1069  f2dd				  -	      sta	playfield-128,y
   1070  f2dd					      else
   1071  f2dd		       99 a4 00 	      sta	playfield,y
   1072  f2e0					      endif
   1073  f2e0		       60		      rts
   1074  f2e1
   1075  f2e1				   setbyte
   1076  f2e1					      ifnconst	pfcenter
   1077  f2e1		       80		      .byte.b	$80
   1078  f2e2		       40		      .byte.b	$40
   1079  f2e3		       20		      .byte.b	$20
   1080  f2e4		       10		      .byte.b	$10
   1081  f2e5		       08		      .byte.b	$08
   1082  f2e6		       04		      .byte.b	$04
   1083  f2e7		       02		      .byte.b	$02
   1084  f2e8		       01		      .byte.b	$01
   1085  f2e9					      endif
   1086  f2e9		       01		      .byte.b	$01
   1087  f2ea		       02		      .byte.b	$02
   1088  f2eb		       04		      .byte.b	$04
   1089  f2ec		       08		      .byte.b	$08
   1090  f2ed		       10		      .byte.b	$10
   1091  f2ee		       20		      .byte.b	$20
   1092  f2ef		       40		      .byte.b	$40
   1093  f2f0		       80		      .byte.b	$80
   1094  f2f1		       80		      .byte.b	$80
   1095  f2f2		       40		      .byte.b	$40
   1096  f2f3		       20		      .byte.b	$20
   1097  f2f4		       10		      .byte.b	$10
   1098  f2f5		       08		      .byte.b	$08
   1099  f2f6		       04		      .byte.b	$04
   1100  f2f7		       02		      .byte.b	$02
   1101  f2f8		       01		      .byte.b	$01
   1102  f2f9		       01		      .byte.b	$01
   1103  f2fa		       02		      .byte.b	$02
   1104  f2fb		       04		      .byte.b	$04
   1105  f2fc		       08		      .byte.b	$08
   1106  f2fd		       10		      .byte.b	$10
   1107  f2fe		       20		      .byte.b	$20
   1108  f2ff		       40		      .byte.b	$40
   1109  f300		       80		      .byte.b	$80
   1110  f301							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f301
   1112  f301				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f301		       d0 13		      bne	notleft
   1114  f303							;left
   1115  f303				  -	      ifconst	pfres
   1116  f303				  -	      ldx	#pfres*4
   1117  f303					      else
   1118  f303		       a2 30		      ldx	#48
   1119  f305					      endif
   1120  f305				   leftloop
   1121  f305		       b5 a3		      lda	playfield-1,x
   1122  f307		       4a		      lsr
   1123  f308
   1124  f308				  -	      ifconst	superchip
   1125  f308				  -	      lda	playfield-2,x
   1126  f308				  -	      rol
   1127  f308				  -	      sta	playfield-130,x
   1128  f308				  -	      lda	playfield-3,x
   1129  f308				  -	      ror
   1130  f308				  -	      sta	playfield-131,x
   1131  f308				  -	      lda	playfield-4,x
   1132  f308				  -	      rol
   1133  f308				  -	      sta	playfield-132,x
   1134  f308				  -	      lda	playfield-1,x
   1135  f308				  -	      ror
   1136  f308				  -	      sta	playfield-129,x
   1137  f308					      else
   1138  f308		       36 a2		      rol	playfield-2,x
   1139  f30a		       76 a1		      ror	playfield-3,x
   1140  f30c		       36 a0		      rol	playfield-4,x
   1141  f30e		       76 a3		      ror	playfield-1,x
   1142  f310					      endif
   1143  f310
   1144  f310		       8a		      txa
   1145  f311		       cb 04		      sbx	#4
   1146  f313		       d0 f0		      bne	leftloop
      0  f315					      RETURN
      1  f315					      ifnconst	bankswitch
      2  f315		       60		      rts
      3  f316				  -	      else
      4  f316				  -	      jmp	BS_return
      5  f316					      endif
   1148  f316
   1149  f316				   notleft
   1150  f316		       4a		      lsr
   1151  f317		       90 13		      bcc	notright
   1152  f319							;right
   1153  f319
   1154  f319				  -	      ifconst	pfres
   1155  f319				  -	      ldx	#pfres*4
   1156  f319					      else
   1157  f319		       a2 30		      ldx	#48
   1158  f31b					      endif
   1159  f31b				   rightloop
   1160  f31b		       b5 a0		      lda	playfield-4,x
   1161  f31d		       4a		      lsr
   1162  f31e				  -	      ifconst	superchip
   1163  f31e				  -	      lda	playfield-3,x
   1164  f31e				  -	      rol
   1165  f31e				  -	      sta	playfield-131,x
   1166  f31e				  -	      lda	playfield-2,x
   1167  f31e				  -	      ror
   1168  f31e				  -	      sta	playfield-130,x
   1169  f31e				  -	      lda	playfield-1,x
   1170  f31e				  -	      rol
   1171  f31e				  -	      sta	playfield-129,x
   1172  f31e				  -	      lda	playfield-4,x
   1173  f31e				  -	      ror
   1174  f31e				  -	      sta	playfield-132,x
   1175  f31e					      else
   1176  f31e		       36 a1		      rol	playfield-3,x
   1177  f320		       76 a2		      ror	playfield-2,x
   1178  f322		       36 a3		      rol	playfield-1,x
   1179  f324		       76 a0		      ror	playfield-4,x
   1180  f326					      endif
   1181  f326		       8a		      txa
   1182  f327		       cb 04		      sbx	#4
   1183  f329		       d0 f0		      bne	rightloop
      0  f32b					      RETURN
      1  f32b					      ifnconst	bankswitch
      2  f32b		       60		      rts
      3  f32c				  -	      else
      4  f32c				  -	      jmp	BS_return
      5  f32c					      endif
   1185  f32c
   1186  f32c				   notright
   1187  f32c		       4a		      lsr
   1188  f32d		       90 49		      bcc	notup
   1189  f32f							;up
   1190  f32f		       4a		      lsr
   1191  f330		       90 02		      bcc	onedecup
   1192  f332		       c6 ef		      dec	playfieldpos
   1193  f334				   onedecup
   1194  f334		       c6 ef		      dec	playfieldpos
   1195  f336		       f0 02		      beq	shiftdown
   1196  f338		       10 3d		      bpl	noshiftdown2
   1197  f33a				   shiftdown
   1198  f33a				  -	      ifconst	pfrowheight
   1199  f33a				  -	      lda	#pfrowheight
   1200  f33a					      else
   1201  f33a					      ifnconst	pfres
   1202  f33a		       a9 08		      lda	#8
   1203  f33c				  -	      else
   1204  f33c				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f33c					      endif
   1206  f33c					      endif
   1207  f33c
   1208  f33c		       85 ef		      sta	playfieldpos
   1209  f33e		       a5 a7		      lda	playfield+3
   1210  f340		       85 9f		      sta	temp4
   1211  f342		       a5 a6		      lda	playfield+2
   1212  f344		       85 9e		      sta	temp3
   1213  f346		       a5 a5		      lda	playfield+1
   1214  f348		       85 9d		      sta	temp2
   1215  f34a		       a5 a4		      lda	playfield
   1216  f34c		       85 9c		      sta	temp1
   1217  f34e		       a2 00		      ldx	#0
   1218  f350				   up2
   1219  f350		       b5 a8		      lda	playfield+4,x
   1220  f352				  -	      ifconst	superchip
   1221  f352				  -	      sta	playfield-128,x
   1222  f352				  -	      lda	playfield+5,x
   1223  f352				  -	      sta	playfield-127,x
   1224  f352				  -	      lda	playfield+6,x
   1225  f352				  -	      sta	playfield-126,x
   1226  f352				  -	      lda	playfield+7,x
   1227  f352				  -	      sta	playfield-125,x
   1228  f352					      else
   1229  f352		       95 a4		      sta	playfield,x
   1230  f354		       b5 a9		      lda	playfield+5,x
   1231  f356		       95 a5		      sta	playfield+1,x
   1232  f358		       b5 aa		      lda	playfield+6,x
   1233  f35a		       95 a6		      sta	playfield+2,x
   1234  f35c		       b5 ab		      lda	playfield+7,x
   1235  f35e		       95 a7		      sta	playfield+3,x
   1236  f360					      endif
   1237  f360		       8a		      txa
   1238  f361		       cb fc		      sbx	#252
   1239  f363				  -	      ifconst	pfres
   1240  f363				  -	      cpx	#(pfres-1)*4
   1241  f363					      else
   1242  f363		       e0 2c		      cpx	#44
   1243  f365					      endif
   1244  f365		       d0 e9		      bne	up2
   1245  f367
   1246  f367		       a5 9f		      lda	temp4
   1247  f369
   1248  f369				  -	      ifconst	superchip
   1249  f369				  -	      ifconst	pfres
   1250  f369				  -	      sta	playfield+pfres*4-129
   1251  f369				  -	      lda	temp3
   1252  f369				  -	      sta	playfield+pfres*4-130
   1253  f369				  -	      lda	temp2
   1254  f369				  -	      sta	playfield+pfres*4-131
   1255  f369				  -	      lda	temp1
   1256  f369				  -	      sta	playfield+pfres*4-132
   1257  f369				  -	      else
   1258  f369				  -	      sta	playfield+47-128
   1259  f369				  -	      lda	temp3
   1260  f369				  -	      sta	playfield+46-128
   1261  f369				  -	      lda	temp2
   1262  f369				  -	      sta	playfield+45-128
   1263  f369				  -	      lda	temp1
   1264  f369				  -	      sta	playfield+44-128
   1265  f369				  -	      endif
   1266  f369					      else
   1267  f369				  -	      ifconst	pfres
   1268  f369				  -	      sta	playfield+pfres*4-1
   1269  f369				  -	      lda	temp3
   1270  f369				  -	      sta	playfield+pfres*4-2
   1271  f369				  -	      lda	temp2
   1272  f369				  -	      sta	playfield+pfres*4-3
   1273  f369				  -	      lda	temp1
   1274  f369				  -	      sta	playfield+pfres*4-4
   1275  f369					      else
   1276  f369		       85 d3		      sta	playfield+47
   1277  f36b		       a5 9e		      lda	temp3
   1278  f36d		       85 d2		      sta	playfield+46
   1279  f36f		       a5 9d		      lda	temp2
   1280  f371		       85 d1		      sta	playfield+45
   1281  f373		       a5 9c		      lda	temp1
   1282  f375		       85 d0		      sta	playfield+44
   1283  f377					      endif
   1284  f377					      endif
   1285  f377				   noshiftdown2
      0  f377					      RETURN
      1  f377					      ifnconst	bankswitch
      2  f377		       60		      rts
      3  f378				  -	      else
      4  f378				  -	      jmp	BS_return
      5  f378					      endif
   1287  f378
   1288  f378
   1289  f378				   notup
   1290  f378							;down
   1291  f378		       4a		      lsr
   1292  f379		       b0 02		      bcs	oneincup
   1293  f37b		       e6 ef		      inc	playfieldpos
   1294  f37d				   oneincup
   1295  f37d		       e6 ef		      inc	playfieldpos
   1296  f37f		       a5 ef		      lda	playfieldpos
   1297  f381
   1298  f381				  -	      ifconst	pfrowheight
   1299  f381				  -	      cmp	#pfrowheight+1
   1300  f381					      else
   1301  f381					      ifnconst	pfres
   1302  f381		       c9 09		      cmp	#9
   1303  f383				  -	      else
   1304  f383				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f383					      endif
   1306  f383					      endif
   1307  f383
   1308  f383		       90 3b		      bcc	noshiftdown
   1309  f385		       a9 01		      lda	#1
   1310  f387		       85 ef		      sta	playfieldpos
   1311  f389
   1312  f389				  -	      ifconst	pfres
   1313  f389				  -	      lda	playfield+pfres*4-1
   1314  f389				  -	      sta	temp4
   1315  f389				  -	      lda	playfield+pfres*4-2
   1316  f389				  -	      sta	temp3
   1317  f389				  -	      lda	playfield+pfres*4-3
   1318  f389				  -	      sta	temp2
   1319  f389				  -	      lda	playfield+pfres*4-4
   1320  f389					      else
   1321  f389		       a5 d3		      lda	playfield+47
   1322  f38b		       85 9f		      sta	temp4
   1323  f38d		       a5 d2		      lda	playfield+46
   1324  f38f		       85 9e		      sta	temp3
   1325  f391		       a5 d1		      lda	playfield+45
   1326  f393		       85 9d		      sta	temp2
   1327  f395		       a5 d0		      lda	playfield+44
   1328  f397					      endif
   1329  f397
   1330  f397		       85 9c		      sta	temp1
   1331  f399
   1332  f399				  -	      ifconst	pfres
   1333  f399				  -	      ldx	#(pfres-1)*4
   1334  f399					      else
   1335  f399		       a2 2c		      ldx	#44
   1336  f39b					      endif
   1337  f39b				   down2
   1338  f39b		       b5 a3		      lda	playfield-1,x
   1339  f39d				  -	      ifconst	superchip
   1340  f39d				  -	      sta	playfield-125,x
   1341  f39d				  -	      lda	playfield-2,x
   1342  f39d				  -	      sta	playfield-126,x
   1343  f39d				  -	      lda	playfield-3,x
   1344  f39d				  -	      sta	playfield-127,x
   1345  f39d				  -	      lda	playfield-4,x
   1346  f39d				  -	      sta	playfield-128,x
   1347  f39d					      else
   1348  f39d		       95 a7		      sta	playfield+3,x
   1349  f39f		       b5 a2		      lda	playfield-2,x
   1350  f3a1		       95 a6		      sta	playfield+2,x
   1351  f3a3		       b5 a1		      lda	playfield-3,x
   1352  f3a5		       95 a5		      sta	playfield+1,x
   1353  f3a7		       b5 a0		      lda	playfield-4,x
   1354  f3a9		       95 a4		      sta	playfield,x
   1355  f3ab					      endif
   1356  f3ab		       8a		      txa
   1357  f3ac		       cb 04		      sbx	#4
   1358  f3ae		       d0 eb		      bne	down2
   1359  f3b0
   1360  f3b0		       a5 9f		      lda	temp4
   1361  f3b2				  -	      ifconst	superchip
   1362  f3b2				  -	      sta	playfield-125
   1363  f3b2				  -	      lda	temp3
   1364  f3b2				  -	      sta	playfield-126
   1365  f3b2				  -	      lda	temp2
   1366  f3b2				  -	      sta	playfield-127
   1367  f3b2				  -	      lda	temp1
   1368  f3b2				  -	      sta	playfield-128
   1369  f3b2					      else
   1370  f3b2		       85 a7		      sta	playfield+3
   1371  f3b4		       a5 9e		      lda	temp3
   1372  f3b6		       85 a6		      sta	playfield+2
   1373  f3b8		       a5 9d		      lda	temp2
   1374  f3ba		       85 a5		      sta	playfield+1
   1375  f3bc		       a5 9c		      lda	temp1
   1376  f3be		       85 a4		      sta	playfield
   1377  f3c0					      endif
   1378  f3c0				   noshiftdown
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1380  f3c1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3c1
   1382  f3c1							;standard routines needed for pretty much all games
   1383  f3c1							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3c1							; repositioning code and score pointer setup moved to overscan
   1385  f3c1							; read switches, joysticks now compiler generated (more efficient)
   1386  f3c1
   1387  f3c1				   randomize
   1388  f3c1		       a5 a2		      lda	rand
   1389  f3c3		       4a		      lsr
   1390  f3c4					      ifconst	rand16
   1391  f3c4		       26 ed		      rol	rand16
   1392  f3c6					      endif
   1393  f3c6		       90 02		      bcc	noeor
   1394  f3c8		       49 b4		      eor	#$B4
   1395  f3ca				   noeor
   1396  f3ca		       85 a2		      sta	rand
   1397  f3cc					      ifconst	rand16
   1398  f3cc		       45 ed		      eor	rand16
   1399  f3ce					      endif
      0  f3ce					      RETURN
      1  f3ce					      ifnconst	bankswitch
      2  f3ce		       60		      rts
      3  f3cf				  -	      else
      4  f3cf				  -	      jmp	BS_return
      5  f3cf					      endif
   1401  f3cf							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3cf
   1403  f3cf				   drawscreen
   1404  f3cf				  -	      ifconst	debugscore
   1405  f3cf				  -	      ldx	#14
   1406  f3cf				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3cf				  -
   1408  f3cf				  -	      ifconst	mincycles
   1409  f3cf				  -	      lda	mincycles
   1410  f3cf				  -	      cmp	INTIM
   1411  f3cf				  -	      lda	mincycles
   1412  f3cf				  -	      bcc	nochange
   1413  f3cf				  -	      lda	INTIM
   1414  f3cf				  -	      sta	mincycles
   1415  f3cf				  -nochange
   1416  f3cf				  -	      endif
   1417  f3cf				  -
   1418  f3cf				  -			; cmp #$2B
   1419  f3cf				  -			; bcs no_cycles_left
   1420  f3cf				  -	      bmi	cycles_left
   1421  f3cf				  -	      ldx	#64
   1422  f3cf				  -	      eor	#$ff	;make negative
   1423  f3cf				  -cycles_left
   1424  f3cf				  -	      stx	scorecolor
   1425  f3cf				  -	      and	#$7f	; clear sign bit
   1426  f3cf				  -	      tax
   1427  f3cf				  -	      lda	scorebcd,x
   1428  f3cf				  -	      sta	score+2
   1429  f3cf				  -	      lda	scorebcd1,x
   1430  f3cf				  -	      sta	score+1
   1431  f3cf				  -	      jmp	done_debugscore
   1432  f3cf				  -scorebcd
   1433  f3cf				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3cf				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3cf				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3cf				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3cf				  -scorebcd1
   1438  f3cf				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3cf				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3cf				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3cf				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3cf				  -done_debugscore
   1443  f3cf					      endif
   1444  f3cf
   1445  f3cf				  -	      ifconst	debugcycles
   1446  f3cf				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3cf				  -			; cmp #$2B
   1448  f3cf				  -			; BCC overscan
   1449  f3cf				  -	      bmi	overscan
   1450  f3cf				  -	      sta	COLUBK
   1451  f3cf				  -	      bcs	doneoverscan
   1452  f3cf					      endif
   1453  f3cf
   1454  f3cf				   overscan
   1455  f3cf				  -	      ifconst	interlaced
   1456  f3cf				  -	      PHP
   1457  f3cf				  -	      PLA
   1458  f3cf				  -	      EOR	#4	; flip interrupt bit
   1459  f3cf				  -	      PHA
   1460  f3cf				  -	      PLP
   1461  f3cf				  -	      AND	#4	; isolate the interrupt bit
   1462  f3cf				  -	      TAX		; save it for later
   1463  f3cf					      endif
   1464  f3cf
   1465  f3cf				   overscanloop
   1466  f3cf		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3d2		       30 fb		      bmi	overscanloop
   1468  f3d4				   doneoverscan
   1469  f3d4
   1470  f3d4							;do VSYNC
   1471  f3d4
   1472  f3d4				  -	      ifconst	interlaced
   1473  f3d4				  -	      CPX	#4
   1474  f3d4				  -	      BNE	oddframevsync
   1475  f3d4					      endif
   1476  f3d4
   1477  f3d4		       a9 02		      lda	#2
   1478  f3d6		       85 02		      sta	WSYNC
   1479  f3d8		       85 00		      sta	VSYNC
   1480  f3da		       85 02		      STA	WSYNC
   1481  f3dc		       85 02		      STA	WSYNC
   1482  f3de		       4a		      lsr
   1483  f3df		       85 02		      STA	WSYNC
   1484  f3e1		       85 00		      STA	VSYNC
   1485  f3e3		       85 01		      sta	VBLANK
   1486  f3e5					      ifnconst	overscan_time
   1487  f3e5		       a9 a5		      lda	#37+128
   1488  f3e7				  -	      else
   1489  f3e7				  -	      lda	#overscan_time+128
   1490  f3e7					      endif
   1491  f3e7		       8d 96 02 	      sta	TIM64T
   1492  f3ea
   1493  f3ea				  -	      ifconst	interlaced
   1494  f3ea				  -	      jmp	postsync
   1495  f3ea				  -
   1496  f3ea				  -oddframevsync
   1497  f3ea				  -	      sta	WSYNC
   1498  f3ea				  -
   1499  f3ea				  -	      LDA	($80,X)	; 11 waste
   1500  f3ea				  -	      LDA	($80,X)	; 11 waste
   1501  f3ea				  -	      LDA	($80,X)	; 11 waste
   1502  f3ea				  -
   1503  f3ea				  -	      lda	#2
   1504  f3ea				  -	      sta	VSYNC
   1505  f3ea				  -	      sta	WSYNC
   1506  f3ea				  -	      sta	WSYNC
   1507  f3ea				  -	      sta	WSYNC
   1508  f3ea				  -
   1509  f3ea				  -	      LDA	($80,X)	; 11 waste
   1510  f3ea				  -	      LDA	($80,X)	; 11 waste
   1511  f3ea				  -	      LDA	($80,X)	; 11 waste
   1512  f3ea				  -
   1513  f3ea				  -	      lda	#0
   1514  f3ea				  -	      sta	VSYNC
   1515  f3ea				  -	      sta	VBLANK
   1516  f3ea				  -	      ifnconst	overscan_time
   1517  f3ea				  -	      lda	#37+128
   1518  f3ea				  -	      else
   1519  f3ea				  -	      lda	#overscan_time+128
   1520  f3ea				  -	      endif
   1521  f3ea				  -	      sta	TIM64T
   1522  f3ea				  -
   1523  f3ea				  -postsync
   1524  f3ea					      endif
   1525  f3ea
   1526  f3ea				  -	      ifconst	legacy
   1527  f3ea				  -	      if	legacy < 100
   1528  f3ea				  -	      ldx	#4
   1529  f3ea				  -adjustloop
   1530  f3ea				  -	      lda	player0x,x
   1531  f3ea				  -	      sec
   1532  f3ea				  -	      sbc	#14	;?
   1533  f3ea				  -	      sta	player0x,x
   1534  f3ea				  -	      dex
   1535  f3ea				  -	      bpl	adjustloop
   1536  f3ea				  -	      endif
   1537  f3ea					      endif
   1538  f3ea					      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3ea					      repeat	($fa-(<*))
   1540  f3ea		       ea		      nop
   1539  f3ea					      repend
   1540  f3eb		       ea		      nop
   1539  f3eb					      repend
   1540  f3ec		       ea		      nop
   1539  f3ec					      repend
   1540  f3ed		       ea		      nop
   1539  f3ed					      repend
   1540  f3ee		       ea		      nop
   1539  f3ee					      repend
   1540  f3ef		       ea		      nop
   1539  f3ef					      repend
   1540  f3f0		       ea		      nop
   1539  f3f0					      repend
   1540  f3f1		       ea		      nop
   1539  f3f1					      repend
   1540  f3f2		       ea		      nop
   1539  f3f2					      repend
   1540  f3f3		       ea		      nop
   1539  f3f3					      repend
   1540  f3f4		       ea		      nop
   1539  f3f4					      repend
   1540  f3f5		       ea		      nop
   1539  f3f5					      repend
   1540  f3f6		       ea		      nop
   1539  f3f6					      repend
   1540  f3f7		       ea		      nop
   1539  f3f7					      repend
   1540  f3f8		       ea		      nop
   1539  f3f8					      repend
   1540  f3f9		       ea		      nop
   1541  f3fa					      repend
   1542  f3fa					      endif
   1543  f3fa		       85 02		      sta	WSYNC
   1544  f3fc		       a2 04		      ldx	#4
      0  f3fe					      SLEEP	3
      1  f3fe				   .CYCLES    SET	3
      2  f3fe
      3  f3fe				  -	      IF	.CYCLES < 2
      4  f3fe				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3fe				  -	      ERR
      6  f3fe					      ENDIF
      7  f3fe
      8  f3fe					      IF	.CYCLES & 1
      9  f3fe					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3fe		       04 00		      nop	0
     11  f400				  -	      ELSE
     12  f400				  -	      bit	VSYNC
     13  f400					      ENDIF
     14  f400				   .CYCLES    SET	.CYCLES - 3
     15  f400					      ENDIF
     16  f400
     17  f400				  -	      REPEAT	.CYCLES / 2
     18  f400				  -	      nop
     19  f400					      REPEND
   1546  f400				   HorPosLoop		; 5
   1547  f400		       b5 80		      lda	player0x,X	;+4 9
   1548  f402		       38		      sec		;+2 11
   1549  f403				   DivideLoop
   1550  f403		       e9 0f		      sbc	#15
   1551  f405		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f407		       95 9c		      sta	temp1,X	;+4 19
   1553  f409		       95 10		      sta	RESP0,X	;+4 23
   1554  f40b		       85 02		      sta	WSYNC
   1555  f40d		       ca		      dex
   1556  f40e		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f410							; 4
   1558  f410
   1559  f410		       a2 04		      ldx	#4
   1560  f412		       b4 9c		      ldy	temp1,X
   1561  f414		       b9 70 f3 	      lda	repostable-256,Y
   1562  f417		       95 20		      sta	HMP0,X	;+14 18
   1563  f419
   1564  f419		       ca		      dex
   1565  f41a		       b4 9c		      ldy	temp1,X
   1566  f41c		       b9 70 f3 	      lda	repostable-256,Y
   1567  f41f		       95 20		      sta	HMP0,X	;+14 32
   1568  f421
   1569  f421		       ca		      dex
   1570  f422		       b4 9c		      ldy	temp1,X
   1571  f424		       b9 70 f3 	      lda	repostable-256,Y
   1572  f427		       95 20		      sta	HMP0,X	;+14 46
   1573  f429
   1574  f429		       ca		      dex
   1575  f42a		       b4 9c		      ldy	temp1,X
   1576  f42c		       b9 70 f3 	      lda	repostable-256,Y
   1577  f42f		       95 20		      sta	HMP0,X	;+14 60
   1578  f431
   1579  f431		       ca		      dex
   1580  f432		       b4 9c		      ldy	temp1,X
   1581  f434		       b9 70 f3 	      lda	repostable-256,Y
   1582  f437		       95 20		      sta	HMP0,X	;+14 74
   1583  f439
   1584  f439		       85 02		      sta	WSYNC
   1585  f43b
   1586  f43b		       85 2a		      sta	HMOVE	;+3 3
   1587  f43d
   1588  f43d
   1589  f43d				  -	      ifconst	legacy
   1590  f43d				  -	      if	legacy < 100
   1591  f43d				  -	      ldx	#4
   1592  f43d				  -adjustloop2
   1593  f43d				  -	      lda	player0x,x
   1594  f43d				  -	      clc
   1595  f43d				  -	      adc	#14	;?
   1596  f43d				  -	      sta	player0x,x
   1597  f43d				  -	      dex
   1598  f43d				  -	      bpl	adjustloop2
   1599  f43d				  -	      endif
   1600  f43d					      endif
   1601  f43d
   1602  f43d
   1603  f43d
   1604  f43d
   1605  f43d							;set score pointers
   1606  f43d		       a7 95		      lax	score+2
   1607  f43f		       20 70 f4 	      jsr	scorepointerset
   1608  f442		       84 9b		      sty	scorepointers+5
   1609  f444		       86 98		      stx	scorepointers+2
   1610  f446		       a7 94		      lax	score+1
   1611  f448		       20 70 f4 	      jsr	scorepointerset
   1612  f44b		       84 9a		      sty	scorepointers+4
   1613  f44d		       86 97		      stx	scorepointers+1
   1614  f44f		       a7 93		      lax	score
   1615  f451		       20 70 f4 	      jsr	scorepointerset
   1616  f454		       84 99		      sty	scorepointers+3
   1617  f456		       86 96		      stx	scorepointers
   1618  f458
   1619  f458				   vblk
   1620  f458							; run possible vblank bB code
   1621  f458				  -	      ifconst	vblank_bB_code
   1622  f458				  -	      jsr	vblank_bB_code
   1623  f458					      endif
   1624  f458				   vblk2
   1625  f458		       ad 84 02 	      LDA	INTIM
   1626  f45b		       30 fb		      bmi	vblk2
   1627  f45d		       4c 34 f0 	      jmp	kernel
   1628  f460
   1629  f460
   1630  f460		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f469		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f470				   repostable
   1633  f470
   1634  f470				   scorepointerset
   1635  f470		       29 0f		      and	#$0F
   1636  f472		       0a		      asl
   1637  f473		       0a		      asl
   1638  f474		       0a		      asl
   1639  f475		       69 9c		      adc	#<scoretable
   1640  f477		       a8		      tay
   1641  f478		       8a		      txa
   1642  f479							; and #$F0
   1643  f479							; lsr
   1644  f479		       4b f0		      asr	#$F0
   1645  f47b		       69 9c		      adc	#<scoretable
   1646  f47d		       aa		      tax
   1647  f47e		       60		      rts
   1648  f47f				   game
   1649  f47f				   .
   1650  f47f							; 
   1651  f47f
   1652  f47f				   .
   1653  f47f							; 
   1654  f47f
   1655  f47f				   .
   1656  f47f							; 
   1657  f47f
   1658  f47f				   .
   1659  f47f							; 
   1660  f47f
   1661  f47f				   .
   1662  f47f							; 
   1663  f47f
   1664  f47f				   .
   1665  f47f							; 
   1666  f47f
   1667  f47f				   .
   1668  f47f							; 
   1669  f47f
   1670  f47f				   .
   1671  f47f							; 
   1672  f47f
   1673  f47f				   .
   1674  f47f							; 
   1675  f47f
   1676  f47f				   .
   1677  f47f							; 
   1678  f47f
   1679  f47f				   .
   1680  f47f							; 
   1681  f47f
   1682  f47f				   .
   1683  f47f							; 
   1684  f47f
   1685  f47f				   .
   1686  f47f							; 
   1687  f47f
   1688  f47f				   .
   1689  f47f							; 
   1690  f47f
   1691  f47f				   .
   1692  f47f							; 
   1693  f47f
   1694  f47f				   .
   1695  f47f							; 
   1696  f47f
   1697  f47f				   .
   1698  f47f							; 
   1699  f47f
   1700  f47f				   .
   1701  f47f							; 
   1702  f47f
   1703  f47f				   .
   1704  f47f							; 
   1705  f47f
   1706  f47f				   .
   1707  f47f							; 
   1708  f47f
   1709  f47f				   .
   1710  f47f							; 
   1711  f47f
   1712  f47f				   .
   1713  f47f							; 
   1714  f47f
   1715  f47f				   .
   1716  f47f							; 
   1717  f47f
   1718  f47f				   .
   1719  f47f							; 
   1720  f47f
   1721  f47f				   .
   1722  f47f							; 
   1723  f47f
   1724  f47f				   .
   1725  f47f							; 
   1726  f47f
   1727  f47f				   .
   1728  f47f							; 
   1729  f47f
   1730  f47f				   .
   1731  f47f							; 
   1732  f47f
   1733  f47f				   .
   1734  f47f							; 
   1735  f47f
   1736  f47f				   .
   1737  f47f							; 
   1738  f47f
   1739  f47f				   .
   1740  f47f							; 
   1741  f47f
   1742  f47f				   .
   1743  f47f							; 
   1744  f47f
   1745  f47f				   .
   1746  f47f							; 
   1747  f47f
   1748  f47f				   .
   1749  f47f							; 
   1750  f47f
   1751  f47f				   .
   1752  f47f							; 
   1753  f47f
   1754  f47f				   .
   1755  f47f							; 
   1756  f47f
   1757  f47f				   .
   1758  f47f							; 
   1759  f47f
   1760  f47f				   .
   1761  f47f							; 
   1762  f47f
   1763  f47f				   .
   1764  f47f							; 
   1765  f47f
   1766  f47f				   .L00 		;  set kernel_options pfcolors no_blank_lines
   1767  f47f
   1768  f47f				   .
   1769  f47f							; 
   1770  f47f
   1771  f47f				   .
   1772  f47f							; 
   1773  f47f
   1774  f47f				   .
   1775  f47f							; 
   1776  f47f
   1777  f47f				   .
   1778  f47f							; 
   1779  f47f
   1780  f47f				   .
   1781  f47f							; 
   1782  f47f
   1783  f47f				   .
   1784  f47f							; 
   1785  f47f
   1786  f47f				   .
   1787  f47f							; 
   1788  f47f
   1789  f47f				   .
   1790  f47f							; 
   1791  f47f
   1792  f47f				   .
   1793  f47f							; 
   1794  f47f
   1795  f47f				   .
   1796  f47f							; 
   1797  f47f
   1798  f47f				   .
   1799  f47f							; 
   1800  f47f
   1801  f47f				   .
   1802  f47f							; 
   1803  f47f
   1804  f47f				   .
   1805  f47f							; 
   1806  f47f
   1807  f47f				   .
   1808  f47f							; 
   1809  f47f
   1810  f47f				   .
   1811  f47f							; 
   1812  f47f
   1813  f47f				   .
   1814  f47f							; 
   1815  f47f
   1816  f47f				   .
   1817  f47f							; 
   1818  f47f
   1819  f47f				   .
   1820  f47f							; 
   1821  f47f
   1822  f47f				   .
   1823  f47f							; 
   1824  f47f
   1825  f47f				   .
   1826  f47f							; 
   1827  f47f
   1828  f47f				   .
   1829  f47f							; 
   1830  f47f
   1831  f47f				   .
   1832  f47f							; 
   1833  f47f
   1834  f47f				   .
   1835  f47f							; 
   1836  f47f
   1837  f47f				   .
   1838  f47f							; 
   1839  f47f
   1840  f47f				   .
   1841  f47f							; 
   1842  f47f
   1843  f47f				   .
   1844  f47f							; 
   1845  f47f
   1846  f47f				   .
   1847  f47f							; 
   1848  f47f
   1849  f47f				   .
   1850  f47f							; 
   1851  f47f
   1852  f47f				   .
   1853  f47f							; 
   1854  f47f
   1855  f47f				   .
   1856  f47f							; 
   1857  f47f
   1858  f47f				   .
   1859  f47f							; 
   1860  f47f
   1861  f47f				   .L01 		;  dim _Pause_Counter_Tmp  =  o
   1862  f47f
   1863  f47f				   .
   1864  f47f							; 
   1865  f47f
   1866  f47f				   .
   1867  f47f							; 
   1868  f47f
   1869  f47f				   .
   1870  f47f							; 
   1871  f47f
   1872  f47f				   .
   1873  f47f							; 
   1874  f47f
   1875  f47f				   .
   1876  f47f							; 
   1877  f47f
   1878  f47f				   .
   1879  f47f							; 
   1880  f47f
   1881  f47f				   .L02 		;  dim _Pause_Mem_Color_Tmp  =  p
   1882  f47f
   1883  f47f				   .
   1884  f47f							; 
   1885  f47f
   1886  f47f				   .
   1887  f47f							; 
   1888  f47f
   1889  f47f				   .
   1890  f47f							; 
   1891  f47f
   1892  f47f				   .
   1893  f47f							; 
   1894  f47f
   1895  f47f				   .
   1896  f47f							; 
   1897  f47f
   1898  f47f				   .
   1899  f47f							; 
   1900  f47f
   1901  f47f				   .L03 		;  dim _Pause_Color_Tmp  =  q
   1902  f47f
   1903  f47f				   .
   1904  f47f							; 
   1905  f47f
   1906  f47f				   .
   1907  f47f							; 
   1908  f47f
   1909  f47f				   .
   1910  f47f							; 
   1911  f47f
   1912  f47f				   .
   1913  f47f							; 
   1914  f47f
   1915  f47f				   .
   1916  f47f							; 
   1917  f47f
   1918  f47f				   .L04 		;  dim _BitOp_02  =  r
   1919  f47f
   1920  f47f				   .
   1921  f47f							; 
   1922  f47f
   1923  f47f				   .
   1924  f47f							; 
   1925  f47f
   1926  f47f				   .
   1927  f47f							; 
   1928  f47f
   1929  f47f				   .
   1930  f47f							; 
   1931  f47f
   1932  f47f				   .L05 		;  dim _Bit0_BW_Mem  =  r
   1933  f47f
   1934  f47f				   .
   1935  f47f							; 
   1936  f47f
   1937  f47f				   .
   1938  f47f							; 
   1939  f47f
   1940  f47f				   .
   1941  f47f							; 
   1942  f47f
   1943  f47f				   .
   1944  f47f							; 
   1945  f47f
   1946  f47f				   .L06 		;  dim _Bit1_BW_Check	=  r
   1947  f47f
   1948  f47f				   .
   1949  f47f							; 
   1950  f47f
   1951  f47f				   .
   1952  f47f							; 
   1953  f47f
   1954  f47f				   .
   1955  f47f							; 
   1956  f47f
   1957  f47f				   .
   1958  f47f							; 
   1959  f47f
   1960  f47f				   .L07 		;  dim _Bit2_Pause_Clr_Scheme	=  r
   1961  f47f
   1962  f47f				   .
   1963  f47f							; 
   1964  f47f
   1965  f47f				   .
   1966  f47f							; 
   1967  f47f
   1968  f47f				   .
   1969  f47f							; 
   1970  f47f
   1971  f47f				   .
   1972  f47f							; 
   1973  f47f
   1974  f47f				   .
   1975  f47f							; 
   1976  f47f
   1977  f47f				   .L08 		;  dim _BitOp_01  =  y
   1978  f47f
   1979  f47f				   .
   1980  f47f							; 
   1981  f47f
   1982  f47f				   .
   1983  f47f							; 
   1984  f47f
   1985  f47f				   .
   1986  f47f							; 
   1987  f47f
   1988  f47f				   .
   1989  f47f							; 
   1990  f47f
   1991  f47f				   .L09 		;  dim _Bit0_Reset_Restrainer	=  y
   1992  f47f
   1993  f47f				   .
   1994  f47f							; 
   1995  f47f
   1996  f47f				   .
   1997  f47f							; 
   1998  f47f
   1999  f47f				   .
   2000  f47f							; 
   2001  f47f
   2002  f47f				   .
   2003  f47f							; 
   2004  f47f
   2005  f47f				   .L010		;  dim _Bit1_FireB_Restrainer	=  y
   2006  f47f
   2007  f47f				   .
   2008  f47f							; 
   2009  f47f
   2010  f47f				   .
   2011  f47f							; 
   2012  f47f
   2013  f47f				   .
   2014  f47f							; 
   2015  f47f
   2016  f47f				   .
   2017  f47f							; 
   2018  f47f
   2019  f47f				   .
   2020  f47f							; 
   2021  f47f
   2022  f47f				   .L011		;  dim rand16	=  z
   2023  f47f
   2024  f47f				   .
   2025  f47f							; 
   2026  f47f
   2027  f47f				   .
   2028  f47f							; 
   2029  f47f
   2030  f47f				   .
   2031  f47f							; 
   2032  f47f
   2033  f47f				   .
   2034  f47f							; 
   2035  f47f
   2036  f47f				   .
   2037  f47f							; 
   2038  f47f
   2039  f47f				   .
   2040  f47f							; 
   2041  f47f
   2042  f47f				   .
   2043  f47f							; 
   2044  f47f
   2045  f47f				   .
   2046  f47f							; 
   2047  f47f
   2048  f47f				   .
   2049  f47f							; 
   2050  f47f
   2051  f47f				   .L012		;  const _P_Edge_Top  =  9
   2052  f47f
   2053  f47f				   .L013		;  const _P_Edge_Bottom  =  88
   2054  f47f
   2055  f47f				   .L014		;  const _P_Edge_Left	=  1
   2056  f47f
   2057  f47f				   .L015		;  const _P_Edge_Right  =  152
   2058  f47f
   2059  f47f				   .
   2060  f47f							; 
   2061  f47f
   2062  f47f				   .
   2063  f47f							; 
   2064  f47f
   2065  f47f				   .
   2066  f47f							; 
   2067  f47f
   2068  f47f				   .
   2069  f47f							; 
   2070  f47f
   2071  f47f				   .
   2072  f47f							; 
   2073  f47f
   2074  f47f				   .
   2075  f47f							; 
   2076  f47f
   2077  f47f				   .
   2078  f47f							; 
   2079  f47f
   2080  f47f				   .
   2081  f47f							; 
   2082  f47f
   2083  f47f				   .
   2084  f47f							; 
   2085  f47f
   2086  f47f				   .
   2087  f47f							; 
   2088  f47f
   2089  f47f				   .
   2090  f47f							; 
   2091  f47f
   2092  f47f				   .__Start_Restart
   2093  f47f							; __Start_Restart
   2094  f47f
   2095  f47f				   .
   2096  f47f							; 
   2097  f47f
   2098  f47f				   .
   2099  f47f							; 
   2100  f47f
   2101  f47f				   .
   2102  f47f							; 
   2103  f47f
   2104  f47f				   .
   2105  f47f							; 
   2106  f47f
   2107  f47f				   .
   2108  f47f							; 
   2109  f47f
   2110  f47f				   .
   2111  f47f							; 
   2112  f47f
   2113  f47f				   .L016		;  AUDV0  =  0  :  AUDV1  =  0
   2114  f47f
   2115  f47f		       a9 00		      LDA	#0
   2116  f481		       85 19		      STA	AUDV0
   2117  f483		       85 1a		      STA	AUDV1
   2118  f485				   .
   2119  f485							; 
   2120  f485
   2121  f485				   .
   2122  f485							; 
   2123  f485
   2124  f485				   .
   2125  f485							; 
   2126  f485
   2127  f485				   .
   2128  f485							; 
   2129  f485
   2130  f485				   .
   2131  f485							; 
   2132  f485
   2133  f485				   .
   2134  f485							; 
   2135  f485
   2136  f485				   .
   2137  f485							; 
   2138  f485
   2139  f485				   .
   2140  f485							; 
   2141  f485
   2142  f485				   .L017		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2143  f485
   2144  f485		       a9 00		      LDA	#0
   2145  f487		       85 d4		      STA	a
   2146  f489		       85 d5		      STA	b
   2147  f48b		       85 d6		      STA	c
   2148  f48d		       85 d7		      STA	d
   2149  f48f		       85 d8		      STA	e
   2150  f491		       85 d9		      STA	f
   2151  f493		       85 da		      STA	g
   2152  f495		       85 db		      STA	h
   2153  f497		       85 dc		      STA	i
   2154  f499				   .L018		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2155  f499
   2156  f499		       a9 00		      LDA	#0
   2157  f49b		       85 dd		      STA	j
   2158  f49d		       85 de		      STA	k
   2159  f49f		       85 df		      STA	l
   2160  f4a1		       85 e0		      STA	m
   2161  f4a3		       85 e1		      STA	n
   2162  f4a5		       85 e2		      STA	o
   2163  f4a7		       85 e3		      STA	p
   2164  f4a9		       85 e4		      STA	q
   2165  f4ab		       85 e5		      STA	r
   2166  f4ad				   .L019		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   2167  f4ad
   2168  f4ad		       a9 00		      LDA	#0
   2169  f4af		       85 e6		      STA	s
   2170  f4b1		       85 e7		      STA	t
   2171  f4b3		       85 e8		      STA	u
   2172  f4b5		       85 e9		      STA	v
   2173  f4b7		       85 ea		      STA	w
   2174  f4b9		       85 eb		      STA	x
   2175  f4bb		       85 ec		      STA	y
   2176  f4bd				   .
   2177  f4bd							; 
   2178  f4bd
   2179  f4bd				   .
   2180  f4bd							; 
   2181  f4bd
   2182  f4bd				   .
   2183  f4bd							; 
   2184  f4bd
   2185  f4bd				   .
   2186  f4bd							; 
   2187  f4bd
   2188  f4bd				   .
   2189  f4bd							; 
   2190  f4bd
   2191  f4bd				   .
   2192  f4bd							; 
   2193  f4bd
   2194  f4bd				   .
   2195  f4bd							; 
   2196  f4bd
   2197  f4bd				   .
   2198  f4bd							; 
   2199  f4bd
   2200  f4bd				   .
   2201  f4bd							; 
   2202  f4bd
   2203  f4bd				   .
   2204  f4bd							; 
   2205  f4bd
   2206  f4bd				   .
   2207  f4bd							; 
   2208  f4bd
   2209  f4bd				   .__Main_Loop_Setup
   2210  f4bd							; __Main_Loop_Setup
   2211  f4bd
   2212  f4bd				   .
   2213  f4bd							; 
   2214  f4bd
   2215  f4bd				   .
   2216  f4bd							; 
   2217  f4bd
   2218  f4bd				   .
   2219  f4bd							; 
   2220  f4bd
   2221  f4bd				   .
   2222  f4bd							; 
   2223  f4bd
   2224  f4bd				   .
   2225  f4bd							; 
   2226  f4bd
   2227  f4bd				   .
   2228  f4bd							; 
   2229  f4bd
   2230  f4bd				   .
   2231  f4bd							; 
   2232  f4bd
   2233  f4bd				   .
   2234  f4bd							; 
   2235  f4bd
   2236  f4bd				   .
   2237  f4bd							; 
   2238  f4bd
   2239  f4bd				   .L020		;  _Bit0_Reset_Restrainer{0}  =  1
   2240  f4bd
   2241  f4bd		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2242  f4bf		       09 01		      ORA	#1
   2243  f4c1		       85 ec		      STA	_Bit0_Reset_Restrainer
   2244  f4c3				   .
   2245  f4c3							; 
   2246  f4c3
   2247  f4c3				   .
   2248  f4c3							; 
   2249  f4c3
   2250  f4c3				   .
   2251  f4c3							; 
   2252  f4c3
   2253  f4c3				   .
   2254  f4c3							; 
   2255  f4c3
   2256  f4c3				   .
   2257  f4c3							; 
   2258  f4c3
   2259  f4c3				   .
   2260  f4c3							; 
   2261  f4c3
   2262  f4c3				   .L021		;  player0x  =  77  :	player0y  =  53
   2263  f4c3
   2264  f4c3		       a9 4d		      LDA	#77
   2265  f4c5		       85 80		      STA	player0x
   2266  f4c7		       a9 35		      LDA	#53
   2267  f4c9		       85 85		      STA	player0y
   2268  f4cb				   .
   2269  f4cb							; 
   2270  f4cb
   2271  f4cb				   .
   2272  f4cb							; 
   2273  f4cb
   2274  f4cb				   .
   2275  f4cb							; 
   2276  f4cb
   2277  f4cb				   .
   2278  f4cb							; 
   2279  f4cb
   2280  f4cb				   .
   2281  f4cb							; 
   2282  f4cb
   2283  f4cb				   .
   2284  f4cb							; 
   2285  f4cb
   2286  f4cb				   .L022		;  scorecolor	=  $1C
   2287  f4cb
   2288  f4cb		       a9 1c		      LDA	#$1C
   2289  f4cd		       85 a3		      STA	scorecolor
   2290  f4cf				   .
   2291  f4cf							; 
   2292  f4cf
   2293  f4cf				   .
   2294  f4cf							; 
   2295  f4cf
   2296  f4cf				   .
   2297  f4cf							; 
   2298  f4cf
   2299  f4cf				   .
   2300  f4cf							; 
   2301  f4cf
   2302  f4cf				   .
   2303  f4cf							; 
   2304  f4cf
   2305  f4cf				   .
   2306  f4cf							; 
   2307  f4cf
   2308  f4cf				   .L023		;  missile1height  =  1
   2309  f4cf
   2310  f4cf		       a9 01		      LDA	#1
   2311  f4d1		       85 87		      STA	missile1height
   2312  f4d3				   .
   2313  f4d3							; 
   2314  f4d3
   2315  f4d3				   .
   2316  f4d3							; 
   2317  f4d3
   2318  f4d3				   .
   2319  f4d3							; 
   2320  f4d3
   2321  f4d3				   .
   2322  f4d3							; 
   2323  f4d3
   2324  f4d3				   .
   2325  f4d3							; 
   2326  f4d3
   2327  f4d3				   .
   2328  f4d3							; 
   2329  f4d3
   2330  f4d3				   .L024		;  player0:
   2331  f4d3
   2332  f4d3		       a2 d7		      LDX	#<playerL024_0
   2333  f4d5		       86 8a		      STX	player0pointerlo
   2334  f4d7		       a9 f9		      LDA	#>playerL024_0
   2335  f4d9		       85 8b		      STA	player0pointerhi
   2336  f4db		       a9 07		      LDA	#7
   2337  f4dd		       85 8e		      STA	player0height
   2338  f4df				   .
   2339  f4df							; 
   2340  f4df
   2341  f4df				   .
   2342  f4df							; 
   2343  f4df
   2344  f4df				   .
   2345  f4df							; 
   2346  f4df
   2347  f4df				   .
   2348  f4df							; 
   2349  f4df
   2350  f4df				   .
   2351  f4df							; 
   2352  f4df
   2353  f4df				   .
   2354  f4df							; 
   2355  f4df
   2356  f4df				   .
   2357  f4df							; 
   2358  f4df
   2359  f4df				   .L025		;  playfield:
   2360  f4df
   2361  f4df				  -	      ifconst	pfres
   2362  f4df				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2363  f4df					      else
   2364  f4df		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2365  f4e1					      endif
   2366  f4e1		       4c 10 f5 	      jmp	pflabel0
   2367  f4e4				   PF_data0
   2368  f4e4		       00 00		      .byte.b	%00000000, %00000000
   2369  f4e6					      if	(pfwidth>2)
   2370  f4e6		       00 00		      .byte.b	%00000000, %00000000
   2371  f4e8					      endif
   2372  f4e8		       00 00		      .byte.b	%00000000, %00000000
   2373  f4ea					      if	(pfwidth>2)
   2374  f4ea		       00 00		      .byte.b	%00000000, %00000000
   2375  f4ec					      endif
   2376  f4ec		       0f 3f		      .byte.b	%00001111, %00111111
   2377  f4ee					      if	(pfwidth>2)
   2378  f4ee		       3f 0f		      .byte.b	%00111111, %00001111
   2379  f4f0					      endif
   2380  f4f0		       08 00		      .byte.b	%00001000, %00000000
   2381  f4f2					      if	(pfwidth>2)
   2382  f4f2		       00 08		      .byte.b	%00000000, %00001000
   2383  f4f4					      endif
   2384  f4f4		       08 00		      .byte.b	%00001000, %00000000
   2385  f4f6					      if	(pfwidth>2)
   2386  f4f6		       00 08		      .byte.b	%00000000, %00001000
   2387  f4f8					      endif
   2388  f4f8		       08 00		      .byte.b	%00001000, %00000000
   2389  f4fa					      if	(pfwidth>2)
   2390  f4fa		       00 08		      .byte.b	%00000000, %00001000
   2391  f4fc					      endif
   2392  f4fc		       00 00		      .byte.b	%00000000, %00000000
   2393  f4fe					      if	(pfwidth>2)
   2394  f4fe		       00 00		      .byte.b	%00000000, %00000000
   2395  f500					      endif
   2396  f500		       00 00		      .byte.b	%00000000, %00000000
   2397  f502					      if	(pfwidth>2)
   2398  f502		       00 00		      .byte.b	%00000000, %00000000
   2399  f504					      endif
   2400  f504		       0f 70		      .byte.b	%00001111, %01110000
   2401  f506					      if	(pfwidth>2)
   2402  f506		       70 0f		      .byte.b	%01110000, %00001111
   2403  f508					      endif
   2404  f508		       00 00		      .byte.b	%00000000, %00000000
   2405  f50a					      if	(pfwidth>2)
   2406  f50a		       00 00		      .byte.b	%00000000, %00000000
   2407  f50c					      endif
   2408  f50c		       00 00		      .byte.b	%00000000, %00000000
   2409  f50e					      if	(pfwidth>2)
   2410  f50e		       00 00		      .byte.b	%00000000, %00000000
   2411  f510					      endif
   2412  f510				   pflabel0
   2413  f510		       bd e4 f4 	      lda	PF_data0,x
   2414  f513		       95 a4		      sta	playfield,x
   2415  f515		       ca		      dex
   2416  f516		       10 f8		      bpl	pflabel0
   2417  f518				   .
   2418  f518							; 
   2419  f518
   2420  f518				   .
   2421  f518							; 
   2422  f518
   2423  f518				   .
   2424  f518							; 
   2425  f518
   2426  f518				   .
   2427  f518							; 
   2428  f518
   2429  f518				   .
   2430  f518							; 
   2431  f518
   2432  f518				   .
   2433  f518							; 
   2434  f518
   2435  f518				   .L026		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   2436  f518
   2437  f518		       a5 e5		      LDA	_Bit0_BW_Mem
   2438  f51a		       29 fe		      AND	#254
   2439  f51c		       85 e5		      STA	_Bit0_BW_Mem
   2440  f51e		       a9 08		      lda	#8
   2441  f520		       2c 82 02 	      bit	SWCHB
   2442  f523		       d0 06		      BNE	.skipL026
   2443  f525				   .condpart0
   2444  f525		       a5 e5		      LDA	_Bit0_BW_Mem
   2445  f527		       09 01		      ORA	#1
   2446  f529		       85 e5		      STA	_Bit0_BW_Mem
   2447  f52b				   .skipL026
   2448  f52b				   .
   2449  f52b							; 
   2450  f52b
   2451  f52b				   .
   2452  f52b							; 
   2453  f52b
   2454  f52b				   .
   2455  f52b							; 
   2456  f52b
   2457  f52b				   .
   2458  f52b							; 
   2459  f52b
   2460  f52b				   .
   2461  f52b							; 
   2462  f52b
   2463  f52b				   .
   2464  f52b							; 
   2465  f52b
   2466  f52b				   .
   2467  f52b							; 
   2468  f52b
   2469  f52b				   .
   2470  f52b							; 
   2471  f52b
   2472  f52b				   .
   2473  f52b							; 
   2474  f52b
   2475  f52b				   .
   2476  f52b							; 
   2477  f52b
   2478  f52b				   .
   2479  f52b							; 
   2480  f52b
   2481  f52b				   .__Main_Loop
   2482  f52b							; __Main_Loop
   2483  f52b
   2484  f52b				   .
   2485  f52b							; 
   2486  f52b
   2487  f52b				   .
   2488  f52b							; 
   2489  f52b
   2490  f52b				   .
   2491  f52b							; 
   2492  f52b
   2493  f52b				   .
   2494  f52b							; 
   2495  f52b
   2496  f52b				   .
   2497  f52b							; 
   2498  f52b
   2499  f52b				   .
   2500  f52b							; 
   2501  f52b
   2502  f52b				   .
   2503  f52b							; 
   2504  f52b
   2505  f52b				   .L027		;  COLUBK  =  0
   2506  f52b
   2507  f52b		       a9 00		      LDA	#0
   2508  f52d		       85 09		      STA	COLUBK
   2509  f52f				   .
   2510  f52f							; 
   2511  f52f
   2512  f52f				   .
   2513  f52f							; 
   2514  f52f
   2515  f52f				   .
   2516  f52f							; 
   2517  f52f
   2518  f52f				   .
   2519  f52f							; 
   2520  f52f
   2521  f52f				   .
   2522  f52f							; 
   2523  f52f
   2524  f52f				   .
   2525  f52f							; 
   2526  f52f
   2527  f52f				   .
   2528  f52f							; 
   2529  f52f
   2530  f52f				   .L028		;  pfcolors:
   2531  f52f
   2532  f52f		       a9 2c		      lda	# $2C
   2533  f531		       85 08		      sta	COLUPF
   2534  f533				  -	      ifconst	pfres
   2535  f533				  -	      lda	#>(pfcolorlabel25-132+pfres*pfwidth)
   2536  f533					      else
   2537  f533		       a9 fa		      lda	#>(pfcolorlabel25-84)
   2538  f535					      endif
   2539  f535		       85 f1		      sta	pfcolortable+1
   2540  f537				  -	      ifconst	pfres
   2541  f537				  -	      lda	#<(pfcolorlabel25-132+pfres*pfwidth)
   2542  f537					      else
   2543  f537		       a9 04		      lda	#<(pfcolorlabel25-84)
   2544  f539					      endif
   2545  f539		       85 f0		      sta	pfcolortable
   2546  f53b				   .
   2547  f53b							; 
   2548  f53b
   2549  f53b				   .
   2550  f53b							; 
   2551  f53b
   2552  f53b				   .
   2553  f53b							; 
   2554  f53b
   2555  f53b				   .
   2556  f53b							; 
   2557  f53b
   2558  f53b				   .
   2559  f53b							; 
   2560  f53b
   2561  f53b				   .
   2562  f53b							; 
   2563  f53b
   2564  f53b				   .
   2565  f53b							; 
   2566  f53b
   2567  f53b				   .L029		;  COLUP0  =  $9C
   2568  f53b
   2569  f53b		       a9 9c		      LDA	#$9C
   2570  f53d		       85 06		      STA	COLUP0
   2571  f53f				   .
   2572  f53f							; 
   2573  f53f
   2574  f53f				   .
   2575  f53f							; 
   2576  f53f
   2577  f53f				   .
   2578  f53f							; 
   2579  f53f
   2580  f53f				   .
   2581  f53f							; 
   2582  f53f
   2583  f53f				   .
   2584  f53f							; 
   2585  f53f
   2586  f53f				   .
   2587  f53f							; 
   2588  f53f
   2589  f53f				   .
   2590  f53f							; 
   2591  f53f
   2592  f53f				   .L030		;  NUSIZ1  =  $10
   2593  f53f
   2594  f53f		       a9 10		      LDA	#$10
   2595  f541		       85 05		      STA	NUSIZ1
   2596  f543				   .
   2597  f543							; 
   2598  f543
   2599  f543				   .
   2600  f543							; 
   2601  f543
   2602  f543				   .
   2603  f543							; 
   2604  f543
   2605  f543				   .
   2606  f543							; 
   2607  f543
   2608  f543				   .
   2609  f543							; 
   2610  f543
   2611  f543				   .
   2612  f543							; 
   2613  f543
   2614  f543				   .
   2615  f543							; 
   2616  f543
   2617  f543				   .
   2618  f543							; 
   2619  f543
   2620  f543				   .
   2621  f543							; 
   2622  f543
   2623  f543				   .
   2624  f543							; 
   2625  f543
   2626  f543				   .L031		;  if !joy0up then goto __Skip_Joy0_Up
   2627  f543
   2628  f543		       a9 10		      lda	#$10
   2629  f545		       2c 80 02 	      bit	SWCHA
   2630  f548		       f0 03		      BEQ	.skipL031
   2631  f54a				   .condpart1
   2632  f54a		       4c b1 f5 	      jmp	.__Skip_Joy0_Up
   2633  f54d
   2634  f54d				   .skipL031
   2635  f54d				   .
   2636  f54d							; 
   2637  f54d
   2638  f54d				   .
   2639  f54d							; 
   2640  f54d
   2641  f54d				   .
   2642  f54d							; 
   2643  f54d
   2644  f54d				   .
   2645  f54d							; 
   2646  f54d
   2647  f54d				   .L032		;  if player0y  <=  _P_Edge_Top then goto __Skip_Joy0_Up
   2648  f54d
   2649  f54d		       a9 09		      LDA	#_P_Edge_Top
   2650  f54f		       c5 85		      CMP	player0y
   2651  f551		       90 03		      BCC	.skipL032
   2652  f553				   .condpart2
   2653  f553		       4c b1 f5 	      jmp	.__Skip_Joy0_Up
   2654  f556
   2655  f556				   .skipL032
   2656  f556				   .
   2657  f556							; 
   2658  f556
   2659  f556				   .
   2660  f556							; 
   2661  f556
   2662  f556				   .
   2663  f556							; 
   2664  f556
   2665  f556				   .
   2666  f556							; 
   2667  f556
   2668  f556				   .L033		;  temp5  =   ( player0x - 10 )  / 4
   2669  f556
   2670  f556							; complex statement detected
   2671  f556		       a5 80		      LDA	player0x
   2672  f558		       38		      SEC
   2673  f559		       e9 0a		      SBC	#10
   2674  f55b		       4a		      lsr
   2675  f55c		       4a		      lsr
   2676  f55d		       85 a0		      STA	temp5
   2677  f55f				   .
   2678  f55f							; 
   2679  f55f
   2680  f55f				   .L034		;  temp4  =   ( player0x - 17 )  / 4
   2681  f55f
   2682  f55f							; complex statement detected
   2683  f55f		       a5 80		      LDA	player0x
   2684  f561		       38		      SEC
   2685  f562		       e9 11		      SBC	#17
   2686  f564		       4a		      lsr
   2687  f565		       4a		      lsr
   2688  f566		       85 9f		      STA	temp4
   2689  f568				   .
   2690  f568							; 
   2691  f568
   2692  f568				   .L035		;  temp3  =  temp5  -	1
   2693  f568
   2694  f568		       a5 a0		      LDA	temp5
   2695  f56a		       38		      SEC
   2696  f56b		       e9 01		      SBC	#1
   2697  f56d		       85 9e		      STA	temp3
   2698  f56f				   .
   2699  f56f							; 
   2700  f56f
   2701  f56f				   .L036		;  temp6  =   ( player0y - 9 )  / 8
   2702  f56f
   2703  f56f							; complex statement detected
   2704  f56f		       a5 85		      LDA	player0y
   2705  f571		       38		      SEC
   2706  f572		       e9 09		      SBC	#9
   2707  f574		       4a		      lsr
   2708  f575		       4a		      lsr
   2709  f576		       4a		      lsr
   2710  f577		       85 a1		      STA	temp6
   2711  f579				   .
   2712  f579							; 
   2713  f579
   2714  f579				   .L037		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   2715  f579
   2716  f579		       a5 a0		      LDA	temp5
   2717  f57b		       c9 22		      CMP	#34
   2718  f57d		       b0 0c		      BCS	.skipL037
   2719  f57f				   .condpart3
   2720  f57f		       a5 a0		      LDA	temp5
   2721  f581		       a4 a1		      LDY	temp6
   2722  f583		       20 79 f2 	      jsr	pfread
   2723  f586		       d0 03		      BNE	.skip3then
   2724  f588				   .condpart4
   2725  f588		       4c b1 f5 	      jmp	.__Skip_Joy0_Up
   2726  f58b
   2727  f58b				   .skip3then
   2728  f58b				   .skipL037
   2729  f58b				   .
   2730  f58b							; 
   2731  f58b
   2732  f58b				   .L038		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   2733  f58b
   2734  f58b		       a5 9f		      LDA	temp4
   2735  f58d		       c9 22		      CMP	#34
   2736  f58f		       b0 0c		      BCS	.skipL038
   2737  f591				   .condpart5
   2738  f591		       a5 9f		      LDA	temp4
   2739  f593		       a4 a1		      LDY	temp6
   2740  f595		       20 79 f2 	      jsr	pfread
   2741  f598		       d0 03		      BNE	.skip5then
   2742  f59a				   .condpart6
   2743  f59a		       4c b1 f5 	      jmp	.__Skip_Joy0_Up
   2744  f59d
   2745  f59d				   .skip5then
   2746  f59d				   .skipL038
   2747  f59d				   .
   2748  f59d							; 
   2749  f59d
   2750  f59d				   .L039		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   2751  f59d
   2752  f59d		       a5 9e		      LDA	temp3
   2753  f59f		       c9 22		      CMP	#34
   2754  f5a1		       b0 0c		      BCS	.skipL039
   2755  f5a3				   .condpart7
   2756  f5a3		       a5 9e		      LDA	temp3
   2757  f5a5		       a4 a1		      LDY	temp6
   2758  f5a7		       20 79 f2 	      jsr	pfread
   2759  f5aa		       d0 03		      BNE	.skip7then
   2760  f5ac				   .condpart8
   2761  f5ac		       4c b1 f5 	      jmp	.__Skip_Joy0_Up
   2762  f5af
   2763  f5af				   .skip7then
   2764  f5af				   .skipL039
   2765  f5af				   .
   2766  f5af							; 
   2767  f5af
   2768  f5af				   .
   2769  f5af							; 
   2770  f5af
   2771  f5af				   .
   2772  f5af							; 
   2773  f5af
   2774  f5af				   .
   2775  f5af							; 
   2776  f5af
   2777  f5af				   .L040		;  player0y  =  player0y  -  1
   2778  f5af
   2779  f5af		       c6 85		      DEC	player0y
   2780  f5b1				   .
   2781  f5b1							; 
   2782  f5b1
   2783  f5b1				   .__Skip_Joy0_Up
   2784  f5b1							; __Skip_Joy0_Up
   2785  f5b1
   2786  f5b1				   .
   2787  f5b1							; 
   2788  f5b1
   2789  f5b1				   .
   2790  f5b1							; 
   2791  f5b1
   2792  f5b1				   .
   2793  f5b1							; 
   2794  f5b1
   2795  f5b1				   .
   2796  f5b1							; 
   2797  f5b1
   2798  f5b1				   .
   2799  f5b1							; 
   2800  f5b1
   2801  f5b1				   .
   2802  f5b1							; 
   2803  f5b1
   2804  f5b1				   .
   2805  f5b1							; 
   2806  f5b1
   2807  f5b1				   .
   2808  f5b1							; 
   2809  f5b1
   2810  f5b1				   .
   2811  f5b1							; 
   2812  f5b1
   2813  f5b1				   .
   2814  f5b1							; 
   2815  f5b1
   2816  f5b1				   .L041		;  if !joy0down then goto __Skip_Joy0_Down
   2817  f5b1
   2818  f5b1		       a9 20		      lda	#$20
   2819  f5b3		       2c 80 02 	      bit	SWCHA
   2820  f5b6		       f0 03		      BEQ	.skipL041
   2821  f5b8				   .condpart9
   2822  f5b8		       4c 1f f6 	      jmp	.__Skip_Joy0_Down
   2823  f5bb
   2824  f5bb				   .skipL041
   2825  f5bb				   .
   2826  f5bb							; 
   2827  f5bb
   2828  f5bb				   .
   2829  f5bb							; 
   2830  f5bb
   2831  f5bb				   .
   2832  f5bb							; 
   2833  f5bb
   2834  f5bb				   .
   2835  f5bb							; 
   2836  f5bb
   2837  f5bb				   .L042		;  if player0y  >=  _P_Edge_Bottom then goto __Skip_Joy0_Down
   2838  f5bb
   2839  f5bb		       a5 85		      LDA	player0y
   2840  f5bd		       c9 58		      CMP	#_P_Edge_Bottom
   2841  f5bf		       90 03		      BCC	.skipL042
   2842  f5c1				   .condpart10
   2843  f5c1		       4c 1f f6 	      jmp	.__Skip_Joy0_Down
   2844  f5c4
   2845  f5c4				   .skipL042
   2846  f5c4				   .
   2847  f5c4							; 
   2848  f5c4
   2849  f5c4				   .
   2850  f5c4							; 
   2851  f5c4
   2852  f5c4				   .
   2853  f5c4							; 
   2854  f5c4
   2855  f5c4				   .
   2856  f5c4							; 
   2857  f5c4
   2858  f5c4				   .L043		;  temp5  =   ( player0x - 10 )  / 4
   2859  f5c4
   2860  f5c4							; complex statement detected
   2861  f5c4		       a5 80		      LDA	player0x
   2862  f5c6		       38		      SEC
   2863  f5c7		       e9 0a		      SBC	#10
   2864  f5c9		       4a		      lsr
   2865  f5ca		       4a		      lsr
   2866  f5cb		       85 a0		      STA	temp5
   2867  f5cd				   .
   2868  f5cd							; 
   2869  f5cd
   2870  f5cd				   .L044		;  temp4  =   ( player0x - 17 )  / 4
   2871  f5cd
   2872  f5cd							; complex statement detected
   2873  f5cd		       a5 80		      LDA	player0x
   2874  f5cf		       38		      SEC
   2875  f5d0		       e9 11		      SBC	#17
   2876  f5d2		       4a		      lsr
   2877  f5d3		       4a		      lsr
   2878  f5d4		       85 9f		      STA	temp4
   2879  f5d6				   .
   2880  f5d6							; 
   2881  f5d6
   2882  f5d6				   .L045		;  temp3  =  temp5  -	1
   2883  f5d6
   2884  f5d6		       a5 a0		      LDA	temp5
   2885  f5d8		       38		      SEC
   2886  f5d9		       e9 01		      SBC	#1
   2887  f5db		       85 9e		      STA	temp3
   2888  f5dd				   .
   2889  f5dd							; 
   2890  f5dd
   2891  f5dd				   .L046		;  temp6  =   ( player0y + 1 )  / 8
   2892  f5dd
   2893  f5dd							; complex statement detected
   2894  f5dd		       a5 85		      LDA	player0y
   2895  f5df		       18		      CLC
   2896  f5e0		       69 01		      ADC	#1
   2897  f5e2		       4a		      lsr
   2898  f5e3		       4a		      lsr
   2899  f5e4		       4a		      lsr
   2900  f5e5		       85 a1		      STA	temp6
   2901  f5e7				   .
   2902  f5e7							; 
   2903  f5e7
   2904  f5e7				   .L047		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   2905  f5e7
   2906  f5e7		       a5 a0		      LDA	temp5
   2907  f5e9		       c9 22		      CMP	#34
   2908  f5eb		       b0 0c		      BCS	.skipL047
   2909  f5ed				   .condpart11
   2910  f5ed		       a5 a0		      LDA	temp5
   2911  f5ef		       a4 a1		      LDY	temp6
   2912  f5f1		       20 79 f2 	      jsr	pfread
   2913  f5f4		       d0 03		      BNE	.skip11then
   2914  f5f6				   .condpart12
   2915  f5f6		       4c 1f f6 	      jmp	.__Skip_Joy0_Down
   2916  f5f9
   2917  f5f9				   .skip11then
   2918  f5f9				   .skipL047
   2919  f5f9				   .
   2920  f5f9							; 
   2921  f5f9
   2922  f5f9				   .L048		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   2923  f5f9
   2924  f5f9		       a5 9f		      LDA	temp4
   2925  f5fb		       c9 22		      CMP	#34
   2926  f5fd		       b0 0c		      BCS	.skipL048
   2927  f5ff				   .condpart13
   2928  f5ff		       a5 9f		      LDA	temp4
   2929  f601		       a4 a1		      LDY	temp6
   2930  f603		       20 79 f2 	      jsr	pfread
   2931  f606		       d0 03		      BNE	.skip13then
   2932  f608				   .condpart14
   2933  f608		       4c 1f f6 	      jmp	.__Skip_Joy0_Down
   2934  f60b
   2935  f60b				   .skip13then
   2936  f60b				   .skipL048
   2937  f60b				   .
   2938  f60b							; 
   2939  f60b
   2940  f60b				   .L049		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   2941  f60b
   2942  f60b		       a5 9e		      LDA	temp3
   2943  f60d		       c9 22		      CMP	#34
   2944  f60f		       b0 0c		      BCS	.skipL049
   2945  f611				   .condpart15
   2946  f611		       a5 9e		      LDA	temp3
   2947  f613		       a4 a1		      LDY	temp6
   2948  f615		       20 79 f2 	      jsr	pfread
   2949  f618		       d0 03		      BNE	.skip15then
   2950  f61a				   .condpart16
   2951  f61a		       4c 1f f6 	      jmp	.__Skip_Joy0_Down
   2952  f61d
   2953  f61d				   .skip15then
   2954  f61d				   .skipL049
   2955  f61d				   .
   2956  f61d							; 
   2957  f61d
   2958  f61d				   .
   2959  f61d							; 
   2960  f61d
   2961  f61d				   .
   2962  f61d							; 
   2963  f61d
   2964  f61d				   .
   2965  f61d							; 
   2966  f61d
   2967  f61d				   .L050		;  player0y  =  player0y  +  1
   2968  f61d
   2969  f61d		       e6 85		      INC	player0y
   2970  f61f				   .
   2971  f61f							; 
   2972  f61f
   2973  f61f				   .__Skip_Joy0_Down
   2974  f61f							; __Skip_Joy0_Down
   2975  f61f
   2976  f61f				   .
   2977  f61f							; 
   2978  f61f
   2979  f61f				   .
   2980  f61f							; 
   2981  f61f
   2982  f61f				   .
   2983  f61f							; 
   2984  f61f
   2985  f61f				   .
   2986  f61f							; 
   2987  f61f
   2988  f61f				   .
   2989  f61f							; 
   2990  f61f
   2991  f61f				   .
   2992  f61f							; 
   2993  f61f
   2994  f61f				   .
   2995  f61f							; 
   2996  f61f
   2997  f61f				   .
   2998  f61f							; 
   2999  f61f
   3000  f61f				   .
   3001  f61f							; 
   3002  f61f
   3003  f61f				   .
   3004  f61f							; 
   3005  f61f
   3006  f61f				   .L051		;  if !joy0left then goto __Skip_Joy0_Left
   3007  f61f
   3008  f61f		       2c 80 02 	      bit	SWCHA
   3009  f622		       50 03		      BVC	.skipL051
   3010  f624				   .condpart17
   3011  f624		       4c 70 f6 	      jmp	.__Skip_Joy0_Left
   3012  f627
   3013  f627				   .skipL051
   3014  f627				   .
   3015  f627							; 
   3016  f627
   3017  f627				   .
   3018  f627							; 
   3019  f627
   3020  f627				   .
   3021  f627							; 
   3022  f627
   3023  f627				   .
   3024  f627							; 
   3025  f627
   3026  f627				   .L052		;  if player0x  <=  _P_Edge_Left then goto __Skip_Joy0_Left
   3027  f627
   3028  f627		       a9 01		      LDA	#_P_Edge_Left
   3029  f629		       c5 80		      CMP	player0x
   3030  f62b		       90 03		      BCC	.skipL052
   3031  f62d				   .condpart18
   3032  f62d		       4c 70 f6 	      jmp	.__Skip_Joy0_Left
   3033  f630
   3034  f630				   .skipL052
   3035  f630				   .
   3036  f630							; 
   3037  f630
   3038  f630				   .
   3039  f630							; 
   3040  f630
   3041  f630				   .
   3042  f630							; 
   3043  f630
   3044  f630				   .
   3045  f630							; 
   3046  f630
   3047  f630				   .L053		;  temp5  =   ( player0y )  / 8
   3048  f630
   3049  f630							; complex statement detected
   3050  f630		       a5 85		      LDA	player0y
   3051  f632		       4a		      lsr
   3052  f633		       4a		      lsr
   3053  f634		       4a		      lsr
   3054  f635		       85 a0		      STA	temp5
   3055  f637				   .
   3056  f637							; 
   3057  f637
   3058  f637				   .L054		;  temp3  =   ( player0y - 8 )  / 8
   3059  f637
   3060  f637							; complex statement detected
   3061  f637		       a5 85		      LDA	player0y
   3062  f639		       38		      SEC
   3063  f63a		       e9 08		      SBC	#8
   3064  f63c		       4a		      lsr
   3065  f63d		       4a		      lsr
   3066  f63e		       4a		      lsr
   3067  f63f		       85 9e		      STA	temp3
   3068  f641				   .
   3069  f641							; 
   3070  f641
   3071  f641				   .L055		;  temp6  =   ( player0x - 18 )  / 4
   3072  f641
   3073  f641							; complex statement detected
   3074  f641		       a5 80		      LDA	player0x
   3075  f643		       38		      SEC
   3076  f644		       e9 12		      SBC	#18
   3077  f646		       4a		      lsr
   3078  f647		       4a		      lsr
   3079  f648		       85 a1		      STA	temp6
   3080  f64a				   .
   3081  f64a							; 
   3082  f64a
   3083  f64a				   .L056		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   3084  f64a
   3085  f64a		       a5 a1		      LDA	temp6
   3086  f64c		       c9 22		      CMP	#34
   3087  f64e		       b0 0c		      BCS	.skipL056
   3088  f650				   .condpart19
   3089  f650		       a5 a1		      LDA	temp6
   3090  f652		       a4 a0		      LDY	temp5
   3091  f654		       20 79 f2 	      jsr	pfread
   3092  f657		       d0 03		      BNE	.skip19then
   3093  f659				   .condpart20
   3094  f659		       4c 70 f6 	      jmp	.__Skip_Joy0_Left
   3095  f65c
   3096  f65c				   .skip19then
   3097  f65c				   .skipL056
   3098  f65c				   .
   3099  f65c							; 
   3100  f65c
   3101  f65c				   .L057		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   3102  f65c
   3103  f65c		       a5 a1		      LDA	temp6
   3104  f65e		       c9 22		      CMP	#34
   3105  f660		       b0 0c		      BCS	.skipL057
   3106  f662				   .condpart21
   3107  f662		       a5 a1		      LDA	temp6
   3108  f664		       a4 9e		      LDY	temp3
   3109  f666		       20 79 f2 	      jsr	pfread
   3110  f669		       d0 03		      BNE	.skip21then
   3111  f66b				   .condpart22
   3112  f66b		       4c 70 f6 	      jmp	.__Skip_Joy0_Left
   3113  f66e
   3114  f66e				   .skip21then
   3115  f66e				   .skipL057
   3116  f66e				   .
   3117  f66e							; 
   3118  f66e
   3119  f66e				   .
   3120  f66e							; 
   3121  f66e
   3122  f66e				   .
   3123  f66e							; 
   3124  f66e
   3125  f66e				   .
   3126  f66e							; 
   3127  f66e
   3128  f66e				   .L058		;  player0x  =  player0x  -  1
   3129  f66e
   3130  f66e		       c6 80		      DEC	player0x
   3131  f670				   .
   3132  f670							; 
   3133  f670
   3134  f670				   .__Skip_Joy0_Left
   3135  f670							; __Skip_Joy0_Left
   3136  f670
   3137  f670				   .
   3138  f670							; 
   3139  f670
   3140  f670				   .
   3141  f670							; 
   3142  f670
   3143  f670				   .
   3144  f670							; 
   3145  f670
   3146  f670				   .
   3147  f670							; 
   3148  f670
   3149  f670				   .
   3150  f670							; 
   3151  f670
   3152  f670				   .
   3153  f670							; 
   3154  f670
   3155  f670				   .
   3156  f670							; 
   3157  f670
   3158  f670				   .
   3159  f670							; 
   3160  f670
   3161  f670				   .
   3162  f670							; 
   3163  f670
   3164  f670				   .
   3165  f670							; 
   3166  f670
   3167  f670				   .L059		;  if !joy0right then goto __Skip_Joy0_Right
   3168  f670
   3169  f670		       2c 80 02 	      bit	SWCHA
   3170  f673		       10 03		      BPL	.skipL059
   3171  f675				   .condpart23
   3172  f675		       4c c1 f6 	      jmp	.__Skip_Joy0_Right
   3173  f678
   3174  f678				   .skipL059
   3175  f678				   .
   3176  f678							; 
   3177  f678
   3178  f678				   .
   3179  f678							; 
   3180  f678
   3181  f678				   .
   3182  f678							; 
   3183  f678
   3184  f678				   .
   3185  f678							; 
   3186  f678
   3187  f678				   .L060		;  if player0x  >=  _P_Edge_Right then goto __Skip_Joy0_Right
   3188  f678
   3189  f678		       a5 80		      LDA	player0x
   3190  f67a		       c9 98		      CMP	#_P_Edge_Right
   3191  f67c		       90 03		      BCC	.skipL060
   3192  f67e				   .condpart24
   3193  f67e		       4c c1 f6 	      jmp	.__Skip_Joy0_Right
   3194  f681
   3195  f681				   .skipL060
   3196  f681				   .
   3197  f681							; 
   3198  f681
   3199  f681				   .
   3200  f681							; 
   3201  f681
   3202  f681				   .
   3203  f681							; 
   3204  f681
   3205  f681				   .
   3206  f681							; 
   3207  f681
   3208  f681				   .L061		;  temp5  =   ( player0y )  / 8
   3209  f681
   3210  f681							; complex statement detected
   3211  f681		       a5 85		      LDA	player0y
   3212  f683		       4a		      lsr
   3213  f684		       4a		      lsr
   3214  f685		       4a		      lsr
   3215  f686		       85 a0		      STA	temp5
   3216  f688				   .
   3217  f688							; 
   3218  f688
   3219  f688				   .L062		;  temp3  =   ( player0y - 8 )  / 8
   3220  f688
   3221  f688							; complex statement detected
   3222  f688		       a5 85		      LDA	player0y
   3223  f68a		       38		      SEC
   3224  f68b		       e9 08		      SBC	#8
   3225  f68d		       4a		      lsr
   3226  f68e		       4a		      lsr
   3227  f68f		       4a		      lsr
   3228  f690		       85 9e		      STA	temp3
   3229  f692				   .
   3230  f692							; 
   3231  f692
   3232  f692				   .L063		;  temp6  =   ( player0x - 9 )  / 4
   3233  f692
   3234  f692							; complex statement detected
   3235  f692		       a5 80		      LDA	player0x
   3236  f694		       38		      SEC
   3237  f695		       e9 09		      SBC	#9
   3238  f697		       4a		      lsr
   3239  f698		       4a		      lsr
   3240  f699		       85 a1		      STA	temp6
   3241  f69b				   .
   3242  f69b							; 
   3243  f69b
   3244  f69b				   .L064		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   3245  f69b
   3246  f69b		       a5 a1		      LDA	temp6
   3247  f69d		       c9 22		      CMP	#34
   3248  f69f		       b0 0c		      BCS	.skipL064
   3249  f6a1				   .condpart25
   3250  f6a1		       a5 a1		      LDA	temp6
   3251  f6a3		       a4 a0		      LDY	temp5
   3252  f6a5		       20 79 f2 	      jsr	pfread
   3253  f6a8		       d0 03		      BNE	.skip25then
   3254  f6aa				   .condpart26
   3255  f6aa		       4c c1 f6 	      jmp	.__Skip_Joy0_Right
   3256  f6ad
   3257  f6ad				   .skip25then
   3258  f6ad				   .skipL064
   3259  f6ad				   .
   3260  f6ad							; 
   3261  f6ad
   3262  f6ad				   .L065		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   3263  f6ad
   3264  f6ad		       a5 a1		      LDA	temp6
   3265  f6af		       c9 22		      CMP	#34
   3266  f6b1		       b0 0c		      BCS	.skipL065
   3267  f6b3				   .condpart27
   3268  f6b3		       a5 a1		      LDA	temp6
   3269  f6b5		       a4 9e		      LDY	temp3
   3270  f6b7		       20 79 f2 	      jsr	pfread
   3271  f6ba		       d0 03		      BNE	.skip27then
   3272  f6bc				   .condpart28
   3273  f6bc		       4c c1 f6 	      jmp	.__Skip_Joy0_Right
   3274  f6bf
   3275  f6bf				   .skip27then
   3276  f6bf				   .skipL065
   3277  f6bf				   .
   3278  f6bf							; 
   3279  f6bf
   3280  f6bf				   .
   3281  f6bf							; 
   3282  f6bf
   3283  f6bf				   .
   3284  f6bf							; 
   3285  f6bf
   3286  f6bf				   .
   3287  f6bf							; 
   3288  f6bf
   3289  f6bf				   .L066		;  player0x  =  player0x  +  1
   3290  f6bf
   3291  f6bf		       e6 80		      INC	player0x
   3292  f6c1				   .
   3293  f6c1							; 
   3294  f6c1
   3295  f6c1				   .__Skip_Joy0_Right
   3296  f6c1							; __Skip_Joy0_Right
   3297  f6c1
   3298  f6c1				   .
   3299  f6c1							; 
   3300  f6c1
   3301  f6c1				   .
   3302  f6c1							; 
   3303  f6c1
   3304  f6c1				   .
   3305  f6c1							; 
   3306  f6c1
   3307  f6c1				   .
   3308  f6c1							; 
   3309  f6c1
   3310  f6c1				   .
   3311  f6c1							; 
   3312  f6c1
   3313  f6c1				   .
   3314  f6c1							; 
   3315  f6c1
   3316  f6c1				   .
   3317  f6c1							; 
   3318  f6c1
   3319  f6c1				   .
   3320  f6c1							; 
   3321  f6c1
   3322  f6c1				   .
   3323  f6c1							; 
   3324  f6c1
   3325  f6c1				   .
   3326  f6c1							; 
   3327  f6c1
   3328  f6c1				   .L067		;  _Bit1_BW_Check{1}  =  0
   3329  f6c1
   3330  f6c1		       a5 e5		      LDA	_Bit1_BW_Check
   3331  f6c3		       29 fd		      AND	#253
   3332  f6c5		       85 e5		      STA	_Bit1_BW_Check
   3333  f6c7				   .
   3334  f6c7							; 
   3335  f6c7
   3336  f6c7				   .L068		;  if switchbw then _Bit1_BW_Check{1}	=  1
   3337  f6c7
   3338  f6c7		       a9 08		      lda	#8
   3339  f6c9		       2c 82 02 	      bit	SWCHB
   3340  f6cc		       d0 06		      BNE	.skipL068
   3341  f6ce				   .condpart29
   3342  f6ce		       a5 e5		      LDA	_Bit1_BW_Check
   3343  f6d0		       09 02		      ORA	#2
   3344  f6d2		       85 e5		      STA	_Bit1_BW_Check
   3345  f6d4				   .skipL068
   3346  f6d4				   .
   3347  f6d4							; 
   3348  f6d4
   3349  f6d4				   .
   3350  f6d4							; 
   3351  f6d4
   3352  f6d4				   .
   3353  f6d4							; 
   3354  f6d4
   3355  f6d4				   .
   3356  f6d4							; 
   3357  f6d4
   3358  f6d4				   .
   3359  f6d4							; 
   3360  f6d4
   3361  f6d4				   .L069		;  if _Bit0_BW_Mem{0} then if !_Bit1_BW_Check{1} then goto __Pause_Setup
   3362  f6d4
   3363  f6d4		       a5 e5		      LDA	_Bit0_BW_Mem
   3364  f6d6		       4a		      LSR
   3365  f6d7		       90 09		      BCC	.skipL069
   3366  f6d9				   .condpart30
   3367  f6d9		       a5 e5		      LDA	_Bit1_BW_Check
   3368  f6db		       29 02		      AND	#2
   3369  f6dd		       d0 03		      BNE	.skip30then
   3370  f6df				   .condpart31
   3371  f6df		       4c 15 f7 	      jmp	.__Pause_Setup
   3372  f6e2
   3373  f6e2				   .skip30then
   3374  f6e2				   .skipL069
   3375  f6e2				   .
   3376  f6e2							; 
   3377  f6e2
   3378  f6e2				   .L070		;  if !_Bit0_BW_Mem{0} then if _Bit1_BW_Check{1} then goto __Pause_Setup
   3379  f6e2
   3380  f6e2		       a5 e5		      LDA	_Bit0_BW_Mem
   3381  f6e4		       4a		      LSR
   3382  f6e5		       b0 09		      BCS	.skipL070
   3383  f6e7				   .condpart32
   3384  f6e7		       a5 e5		      LDA	_Bit1_BW_Check
   3385  f6e9		       29 02		      AND	#2
   3386  f6eb		       f0 03		      BEQ	.skip32then
   3387  f6ed				   .condpart33
   3388  f6ed		       4c 15 f7 	      jmp	.__Pause_Setup
   3389  f6f0
   3390  f6f0				   .skip32then
   3391  f6f0				   .skipL070
   3392  f6f0				   .
   3393  f6f0							; 
   3394  f6f0
   3395  f6f0				   .
   3396  f6f0							; 
   3397  f6f0
   3398  f6f0				   .
   3399  f6f0							; 
   3400  f6f0
   3401  f6f0				   .
   3402  f6f0							; 
   3403  f6f0
   3404  f6f0				   .L071		;  if joy1fire then goto __Pause_Setup
   3405  f6f0
   3406  f6f0		       24 0d		      bit	INPT5
   3407  f6f2		       30 03		      BMI	.skipL071
   3408  f6f4				   .condpart34
   3409  f6f4		       4c 15 f7 	      jmp	.__Pause_Setup
   3410  f6f7
   3411  f6f7				   .skipL071
   3412  f6f7				   .
   3413  f6f7							; 
   3414  f6f7
   3415  f6f7				   .__AP_Skip_Pause
   3416  f6f7							; __AP_Skip_Pause
   3417  f6f7
   3418  f6f7				   .
   3419  f6f7							; 
   3420  f6f7
   3421  f6f7				   .
   3422  f6f7							; 
   3423  f6f7
   3424  f6f7				   .
   3425  f6f7							; 
   3426  f6f7
   3427  f6f7				   .
   3428  f6f7							; 
   3429  f6f7
   3430  f6f7				   .
   3431  f6f7							; 
   3432  f6f7
   3433  f6f7				   .
   3434  f6f7							; 
   3435  f6f7
   3436  f6f7				   .
   3437  f6f7							; 
   3438  f6f7
   3439  f6f7				   .L072		;  drawscreen
   3440  f6f7
   3441  f6f7		       20 cf f3 	      jsr	drawscreen
   3442  f6fa				   .
   3443  f6fa							; 
   3444  f6fa
   3445  f6fa				   .
   3446  f6fa							; 
   3447  f6fa
   3448  f6fa				   .
   3449  f6fa							; 
   3450  f6fa
   3451  f6fa				   .
   3452  f6fa							; 
   3453  f6fa
   3454  f6fa				   .
   3455  f6fa							; 
   3456  f6fa
   3457  f6fa				   .
   3458  f6fa							; 
   3459  f6fa
   3460  f6fa				   .
   3461  f6fa							; 
   3462  f6fa
   3463  f6fa				   .
   3464  f6fa							; 
   3465  f6fa
   3466  f6fa				   .
   3467  f6fa							; 
   3468  f6fa
   3469  f6fa				   .
   3470  f6fa							; 
   3471  f6fa
   3472  f6fa				   .
   3473  f6fa							; 
   3474  f6fa
   3475  f6fa				   .
   3476  f6fa							; 
   3477  f6fa
   3478  f6fa				   .
   3479  f6fa							; 
   3480  f6fa
   3481  f6fa				   .
   3482  f6fa							; 
   3483  f6fa
   3484  f6fa				   .
   3485  f6fa							; 
   3486  f6fa
   3487  f6fa				   .L073		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   3488  f6fa
   3489  f6fa		       a9 01		      lda	#1
   3490  f6fc		       2c 82 02 	      bit	SWCHB
   3491  f6ff		       f0 09		      BEQ	.skipL073
   3492  f701				   .condpart35
   3493  f701		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   3494  f703		       29 fe		      AND	#254
   3495  f705		       85 ec		      STA	_Bit0_Reset_Restrainer
   3496  f707		       4c 2b f5 	      jmp	.__Main_Loop
   3497  f70a
   3498  f70a				   .skipL073
   3499  f70a				   .
   3500  f70a							; 
   3501  f70a
   3502  f70a				   .
   3503  f70a							; 
   3504  f70a
   3505  f70a				   .
   3506  f70a							; 
   3507  f70a
   3508  f70a				   .
   3509  f70a							; 
   3510  f70a
   3511  f70a				   .
   3512  f70a							; 
   3513  f70a
   3514  f70a				   .L074		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   3515  f70a
   3516  f70a		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   3517  f70c		       4a		      LSR
   3518  f70d		       90 03		      BCC	.skipL074
   3519  f70f				   .condpart36
   3520  f70f		       4c 2b f5 	      jmp	.__Main_Loop
   3521  f712
   3522  f712				   .skipL074
   3523  f712				   .
   3524  f712							; 
   3525  f712
   3526  f712				   .
   3527  f712							; 
   3528  f712
   3529  f712				   .
   3530  f712							; 
   3531  f712
   3532  f712				   .
   3533  f712							; 
   3534  f712
   3535  f712				   .L075		;  goto __Start_Restart
   3536  f712
   3537  f712		       4c 7f f4 	      jmp	.__Start_Restart
   3538  f715
   3539  f715				   .
   3540  f715							; 
   3541  f715
   3542  f715				   .
   3543  f715							; 
   3544  f715
   3545  f715				   .
   3546  f715							; 
   3547  f715
   3548  f715				   .
   3549  f715							; 
   3550  f715
   3551  f715				   .
   3552  f715							; 
   3553  f715
   3554  f715				   .
   3555  f715							; 
   3556  f715
   3557  f715				   .
   3558  f715							; 
   3559  f715
   3560  f715				   .
   3561  f715							; 
   3562  f715
   3563  f715				   .
   3564  f715							; 
   3565  f715
   3566  f715				   .
   3567  f715							; 
   3568  f715
   3569  f715				   .
   3570  f715							; 
   3571  f715
   3572  f715				   .
   3573  f715							; 
   3574  f715
   3575  f715				   .
   3576  f715							; 
   3577  f715
   3578  f715				   .
   3579  f715							; 
   3580  f715
   3581  f715				   .
   3582  f715							; 
   3583  f715
   3584  f715				   .
   3585  f715							; 
   3586  f715
   3587  f715				   .
   3588  f715							; 
   3589  f715
   3590  f715				   .
   3591  f715							; 
   3592  f715
   3593  f715				   .
   3594  f715							; 
   3595  f715
   3596  f715				   .
   3597  f715							; 
   3598  f715
   3599  f715				   .
   3600  f715							; 
   3601  f715
   3602  f715				   .__Pause_Setup
   3603  f715							; __Pause_Setup
   3604  f715
   3605  f715				   .
   3606  f715							; 
   3607  f715
   3608  f715				   .
   3609  f715							; 
   3610  f715
   3611  f715				   .
   3612  f715							; 
   3613  f715
   3614  f715				   .
   3615  f715							; 
   3616  f715
   3617  f715				   .
   3618  f715							; 
   3619  f715
   3620  f715				   .
   3621  f715							; 
   3622  f715
   3623  f715				   .L076		;  AUDV0  =  0  :  AUDV1  =  0
   3624  f715
   3625  f715		       a9 00		      LDA	#0
   3626  f717		       85 19		      STA	AUDV0
   3627  f719		       85 1a		      STA	AUDV1
   3628  f71b				   .
   3629  f71b							; 
   3630  f71b
   3631  f71b				   .
   3632  f71b							; 
   3633  f71b
   3634  f71b				   .
   3635  f71b							; 
   3636  f71b
   3637  f71b				   .
   3638  f71b							; 
   3639  f71b
   3640  f71b				   .
   3641  f71b							; 
   3642  f71b
   3643  f71b				   .
   3644  f71b							; 
   3645  f71b
   3646  f71b				   .L077		;  _Bit1_FireB_Restrainer{1}  =  1
   3647  f71b
   3648  f71b		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3649  f71d		       09 02		      ORA	#2
   3650  f71f		       85 ec		      STA	_Bit1_FireB_Restrainer
   3651  f721				   .
   3652  f721							; 
   3653  f721
   3654  f721				   .
   3655  f721							; 
   3656  f721
   3657  f721				   .
   3658  f721							; 
   3659  f721
   3660  f721				   .
   3661  f721							; 
   3662  f721
   3663  f721				   .
   3664  f721							; 
   3665  f721
   3666  f721				   .
   3667  f721							; 
   3668  f721
   3669  f721				   .L078		;  _Pause_Counter_Tmp	=  0
   3670  f721
   3671  f721		       a9 00		      LDA	#0
   3672  f723		       85 e2		      STA	_Pause_Counter_Tmp
   3673  f725				   .
   3674  f725							; 
   3675  f725
   3676  f725				   .
   3677  f725							; 
   3678  f725
   3679  f725				   .
   3680  f725							; 
   3681  f725
   3682  f725				   .
   3683  f725							; 
   3684  f725
   3685  f725				   .
   3686  f725							; 
   3687  f725
   3688  f725				   .
   3689  f725							; 
   3690  f725
   3691  f725				   .L079		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   3692  f725
   3693  f725							; complex statement detected
   3694  f725		       20 c1 f3 	      jsr	randomize
   3695  f728		       29 07		      AND	#7
   3696  f72a		       85 e4		      STA	_Pause_Color_Tmp
   3697  f72c				   .
   3698  f72c							; 
   3699  f72c
   3700  f72c				   .L080		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   3701  f72c
   3702  f72c		       a5 e4		      LDA	_Pause_Color_Tmp
   3703  f72e		       85 e3		      STA	_Pause_Mem_Color_Tmp
   3704  f730				   .
   3705  f730							; 
   3706  f730
   3707  f730				   .
   3708  f730							; 
   3709  f730
   3710  f730				   .
   3711  f730							; 
   3712  f730
   3713  f730				   .
   3714  f730							; 
   3715  f730
   3716  f730				   .
   3717  f730							; 
   3718  f730
   3719  f730				   .
   3720  f730							; 
   3721  f730
   3722  f730				   .
   3723  f730							; 
   3724  f730
   3725  f730				   .
   3726  f730							; 
   3727  f730
   3728  f730				   .
   3729  f730							; 
   3730  f730
   3731  f730				   .
   3732  f730							; 
   3733  f730
   3734  f730				   .__Pause_Game
   3735  f730							; __Pause_Game
   3736  f730
   3737  f730				   .
   3738  f730							; 
   3739  f730
   3740  f730				   .
   3741  f730							; 
   3742  f730
   3743  f730				   .
   3744  f730							; 
   3745  f730
   3746  f730				   .
   3747  f730							; 
   3748  f730
   3749  f730				   .
   3750  f730							; 
   3751  f730
   3752  f730				   .
   3753  f730							; 
   3754  f730
   3755  f730				   .
   3756  f730							; 
   3757  f730
   3758  f730				   .L081		;  NUSIZ1  =  $10
   3759  f730
   3760  f730		       a9 10		      LDA	#$10
   3761  f732		       85 05		      STA	NUSIZ1
   3762  f734				   .
   3763  f734							; 
   3764  f734
   3765  f734				   .
   3766  f734							; 
   3767  f734
   3768  f734				   .
   3769  f734							; 
   3770  f734
   3771  f734				   .
   3772  f734							; 
   3773  f734
   3774  f734				   .
   3775  f734							; 
   3776  f734
   3777  f734				   .
   3778  f734							; 
   3779  f734
   3780  f734				   .
   3781  f734							; 
   3782  f734
   3783  f734				   .
   3784  f734							; 
   3785  f734
   3786  f734				   .
   3787  f734							; 
   3788  f734
   3789  f734				   .
   3790  f734							; 
   3791  f734
   3792  f734				   .L082		;  _Pause_Counter_Tmp	=  _Pause_Counter_Tmp  +  1
   3793  f734
   3794  f734		       e6 e2		      INC	_Pause_Counter_Tmp
   3795  f736				   .
   3796  f736							; 
   3797  f736
   3798  f736				   .
   3799  f736							; 
   3800  f736
   3801  f736				   .
   3802  f736							; 
   3803  f736
   3804  f736				   .
   3805  f736							; 
   3806  f736
   3807  f736				   .L083		;  if _Pause_Counter_Tmp  <  240 then goto __Skip_Pause_Counter
   3808  f736
   3809  f736		       a5 e2		      LDA	_Pause_Counter_Tmp
   3810  f738		       c9 f0		      CMP	#240
   3811  f73a		       b0 03		      BCS	.skipL083
   3812  f73c				   .condpart37
   3813  f73c		       4c 8b f7 	      jmp	.__Skip_Pause_Counter
   3814  f73f
   3815  f73f				   .skipL083
   3816  f73f				   .
   3817  f73f							; 
   3818  f73f
   3819  f73f				   .
   3820  f73f							; 
   3821  f73f
   3822  f73f				   .
   3823  f73f							; 
   3824  f73f
   3825  f73f				   .
   3826  f73f							; 
   3827  f73f
   3828  f73f				   .L084		;  _Pause_Counter_Tmp	=  0
   3829  f73f
   3830  f73f		       a9 00		      LDA	#0
   3831  f741		       85 e2		      STA	_Pause_Counter_Tmp
   3832  f743				   .
   3833  f743							; 
   3834  f743
   3835  f743				   .
   3836  f743							; 
   3837  f743
   3838  f743				   .
   3839  f743							; 
   3840  f743
   3841  f743				   .
   3842  f743							; 
   3843  f743
   3844  f743				   .L085		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   3845  f743
   3846  f743							; complex statement detected
   3847  f743		       20 c1 f3 	      jsr	randomize
   3848  f746		       29 07		      AND	#7
   3849  f748		       85 e4		      STA	_Pause_Color_Tmp
   3850  f74a				   .
   3851  f74a							; 
   3852  f74a
   3853  f74a				   .
   3854  f74a							; 
   3855  f74a
   3856  f74a				   .
   3857  f74a							; 
   3858  f74a
   3859  f74a				   .
   3860  f74a							; 
   3861  f74a
   3862  f74a				   .
   3863  f74a							; 
   3864  f74a
   3865  f74a				   .L086		;  if _Pause_Color_Tmp  =  _Pause_Mem_Color_Tmp then _Pause_Color_Tmp	=  _Pause_Color_Tmp  +	 ( rand & 3 )	+  1  :  if _Pause_Color_Tmp  >  7 then _Pause_Color_Tmp  =  _Pause_Color_Tmp  -  8
   3866  f74a
   3867  f74a		       a5 e4		      LDA	_Pause_Color_Tmp
   3868  f74c		       c5 e3		      CMP	_Pause_Mem_Color_Tmp
   3869  f74e		       d0 20		      BNE	.skipL086
   3870  f750				   .condpart38
   3871  f750							; complex statement detected
   3872  f750		       a5 e4		      LDA	_Pause_Color_Tmp
   3873  f752		       48		      PHA
   3874  f753		       20 c1 f3 	      jsr	randomize
   3875  f756		       29 03		      AND	#3
   3876  f758		       ba		      TSX
   3877  f759		       e8		      INX
   3878  f75a		       9a		      TXS
   3879  f75b		       18		      CLC
   3880  f75c		       75 00		      ADC	$00,x
   3881  f75e		       18		      CLC
   3882  f75f		       69 01		      ADC	#1
   3883  f761		       85 e4		      STA	_Pause_Color_Tmp
   3884  f763		       a9 07		      LDA	#7
   3885  f765		       c5 e4		      CMP	_Pause_Color_Tmp
   3886  f767		       b0 07		      BCS	.skip38then
   3887  f769				   .condpart39
   3888  f769		       a5 e4		      LDA	_Pause_Color_Tmp
   3889  f76b		       38		      SEC
   3890  f76c		       e9 08		      SBC	#8
   3891  f76e		       85 e4		      STA	_Pause_Color_Tmp
   3892  f770				   .skip38then
   3893  f770				   .skipL086
   3894  f770				   .
   3895  f770							; 
   3896  f770
   3897  f770				   .
   3898  f770							; 
   3899  f770
   3900  f770				   .
   3901  f770							; 
   3902  f770
   3903  f770				   .
   3904  f770							; 
   3905  f770
   3906  f770				   .L087		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   3907  f770
   3908  f770		       a5 e4		      LDA	_Pause_Color_Tmp
   3909  f772		       85 e3		      STA	_Pause_Mem_Color_Tmp
   3910  f774				   .
   3911  f774							; 
   3912  f774
   3913  f774				   .
   3914  f774							; 
   3915  f774
   3916  f774				   .
   3917  f774							; 
   3918  f774
   3919  f774				   .
   3920  f774							; 
   3921  f774
   3922  f774				   .L088		;  _Bit2_Pause_Clr_Scheme{2}  =  0
   3923  f774
   3924  f774		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   3925  f776		       29 fb		      AND	#251
   3926  f778		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   3927  f77a				   .
   3928  f77a							; 
   3929  f77a
   3930  f77a				   .L089		;  temp5  =  rand  :  if temp5  <  128 then _Bit2_Pause_Clr_Scheme{2}	=  1
   3931  f77a
   3932  f77a		       20 c1 f3 	      jsr	randomize
   3933  f77d		       85 a0		      STA	temp5
   3934  f77f		       a5 a0		      LDA	temp5
   3935  f781		       c9 80		      CMP	#128
   3936  f783		       b0 06		      BCS	.skipL089
   3937  f785				   .condpart40
   3938  f785		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   3939  f787		       09 04		      ORA	#4
   3940  f789		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   3941  f78b				   .skipL089
   3942  f78b				   .
   3943  f78b							; 
   3944  f78b
   3945  f78b				   .__Skip_Pause_Counter
   3946  f78b							; __Skip_Pause_Counter
   3947  f78b
   3948  f78b				   .
   3949  f78b							; 
   3950  f78b
   3951  f78b				   .
   3952  f78b							; 
   3953  f78b
   3954  f78b				   .
   3955  f78b							; 
   3956  f78b
   3957  f78b				   .
   3958  f78b							; 
   3959  f78b
   3960  f78b				   .
   3961  f78b							; 
   3962  f78b
   3963  f78b				   .
   3964  f78b							; 
   3965  f78b
   3966  f78b				   .
   3967  f78b							; 
   3968  f78b
   3969  f78b				   .L090		;  on _Pause_Color_Tmp goto __Ps0 __Ps1 __Ps2 __Ps3 __Ps4 __Ps5 __Ps6 __Ps7
   3970  f78b
   3971  f78b		       a6 e4		      LDX	_Pause_Color_Tmp
   3972  f78d		       bd 96 f7 	      LDA	.L090jumptablehi,x
   3973  f790		       48		      PHA
   3974  f791		       bd 9e f7 	      LDA	.L090jumptablelo,x
   3975  f794		       48		      PHA
   3976  f795		       60		      RTS
   3977  f796				   .L090jumptablehi
   3978  f796		       f7		      .byte.b	>(.__Ps0-1)
   3979  f797		       f8		      .byte.b	>(.__Ps1-1)
   3980  f798		       f8		      .byte.b	>(.__Ps2-1)
   3981  f799		       f8		      .byte.b	>(.__Ps3-1)
   3982  f79a		       f8		      .byte.b	>(.__Ps4-1)
   3983  f79b		       f9		      .byte.b	>(.__Ps5-1)
   3984  f79c		       f9		      .byte.b	>(.__Ps6-1)
   3985  f79d		       f9		      .byte.b	>(.__Ps7-1)
   3986  f79e				   .L090jumptablelo
   3987  f79e		       de		      .byte.b	<(.__Ps0-1)
   3988  f79f		       1d		      .byte.b	<(.__Ps1-1)
   3989  f7a0		       5c		      .byte.b	<(.__Ps2-1)
   3990  f7a1		       9b		      .byte.b	<(.__Ps3-1)
   3991  f7a2		       da		      .byte.b	<(.__Ps4-1)
   3992  f7a3		       19		      .byte.b	<(.__Ps5-1)
   3993  f7a4		       58		      .byte.b	<(.__Ps6-1)
   3994  f7a5		       97		      .byte.b	<(.__Ps7-1)
   3995  f7a6				   .
   3996  f7a6							; 
   3997  f7a6
   3998  f7a6				   .__Got_Pause_Colors
   3999  f7a6							; __Got_Pause_Colors
   4000  f7a6
   4001  f7a6				   .
   4002  f7a6							; 
   4003  f7a6
   4004  f7a6				   .
   4005  f7a6							; 
   4006  f7a6
   4007  f7a6				   .
   4008  f7a6							; 
   4009  f7a6
   4010  f7a6				   .
   4011  f7a6							; 
   4012  f7a6
   4013  f7a6				   .
   4014  f7a6							; 
   4015  f7a6
   4016  f7a6				   .
   4017  f7a6							; 
   4018  f7a6
   4019  f7a6				   .
   4020  f7a6							; 
   4021  f7a6
   4022  f7a6				   .L091		;  drawscreen
   4023  f7a6
   4024  f7a6		       20 cf f3 	      jsr	drawscreen
   4025  f7a9				   .
   4026  f7a9							; 
   4027  f7a9
   4028  f7a9				   .
   4029  f7a9							; 
   4030  f7a9
   4031  f7a9				   .
   4032  f7a9							; 
   4033  f7a9
   4034  f7a9				   .
   4035  f7a9							; 
   4036  f7a9
   4037  f7a9				   .
   4038  f7a9							; 
   4039  f7a9
   4040  f7a9				   .
   4041  f7a9							; 
   4042  f7a9
   4043  f7a9				   .
   4044  f7a9							; 
   4045  f7a9
   4046  f7a9				   .
   4047  f7a9							; 
   4048  f7a9
   4049  f7a9				   .
   4050  f7a9							; 
   4051  f7a9
   4052  f7a9				   .
   4053  f7a9							; 
   4054  f7a9
   4055  f7a9				   .
   4056  f7a9							; 
   4057  f7a9
   4058  f7a9				   .L092		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Pause_Game
   4059  f7a9
   4060  f7a9		       24 0c		      bit	INPT4
   4061  f7ab		       10 09		      BPL	.skipL092
   4062  f7ad				   .condpart41
   4063  f7ad		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   4064  f7af		       29 fd		      AND	#253
   4065  f7b1		       85 ec		      STA	_Bit1_FireB_Restrainer
   4066  f7b3		       4c 30 f7 	      jmp	.__Pause_Game
   4067  f7b6
   4068  f7b6				   .skipL092
   4069  f7b6				   .
   4070  f7b6							; 
   4071  f7b6
   4072  f7b6				   .
   4073  f7b6							; 
   4074  f7b6
   4075  f7b6				   .
   4076  f7b6							; 
   4077  f7b6
   4078  f7b6				   .
   4079  f7b6							; 
   4080  f7b6
   4081  f7b6				   .
   4082  f7b6							; 
   4083  f7b6
   4084  f7b6				   .L093		;  if _Bit1_FireB_Restrainer{1} then goto __Pause_Game
   4085  f7b6
   4086  f7b6		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   4087  f7b8		       29 02		      AND	#2
   4088  f7ba		       f0 03		      BEQ	.skipL093
   4089  f7bc				   .condpart42
   4090  f7bc		       4c 30 f7 	      jmp	.__Pause_Game
   4091  f7bf
   4092  f7bf				   .skipL093
   4093  f7bf				   .
   4094  f7bf							; 
   4095  f7bf
   4096  f7bf				   .
   4097  f7bf							; 
   4098  f7bf
   4099  f7bf				   .
   4100  f7bf							; 
   4101  f7bf
   4102  f7bf				   .
   4103  f7bf							; 
   4104  f7bf
   4105  f7bf				   .L094		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   4106  f7bf
   4107  f7bf		       a5 e5		      LDA	_Bit0_BW_Mem
   4108  f7c1		       29 fe		      AND	#254
   4109  f7c3		       85 e5		      STA	_Bit0_BW_Mem
   4110  f7c5		       a9 08		      lda	#8
   4111  f7c7		       2c 82 02 	      bit	SWCHB
   4112  f7ca		       d0 06		      BNE	.skipL094
   4113  f7cc				   .condpart43
   4114  f7cc		       a5 e5		      LDA	_Bit0_BW_Mem
   4115  f7ce		       09 01		      ORA	#1
   4116  f7d0		       85 e5		      STA	_Bit0_BW_Mem
   4117  f7d2				   .skipL094
   4118  f7d2				   .
   4119  f7d2							; 
   4120  f7d2
   4121  f7d2				   .
   4122  f7d2							; 
   4123  f7d2
   4124  f7d2				   .
   4125  f7d2							; 
   4126  f7d2
   4127  f7d2				   .
   4128  f7d2							; 
   4129  f7d2
   4130  f7d2				   .
   4131  f7d2							; 
   4132  f7d2
   4133  f7d2				   .
   4134  f7d2							; 
   4135  f7d2
   4136  f7d2				   .
   4137  f7d2							; 
   4138  f7d2
   4139  f7d2				   .
   4140  f7d2							; 
   4141  f7d2
   4142  f7d2				   .
   4143  f7d2							; 
   4144  f7d2
   4145  f7d2				   .
   4146  f7d2							; 
   4147  f7d2
   4148  f7d2				   .
   4149  f7d2							; 
   4150  f7d2
   4151  f7d2				   .
   4152  f7d2							; 
   4153  f7d2
   4154  f7d2				   .
   4155  f7d2							; 
   4156  f7d2
   4157  f7d2				   .
   4158  f7d2							; 
   4159  f7d2
   4160  f7d2				   .
   4161  f7d2							; 
   4162  f7d2
   4163  f7d2				   .
   4164  f7d2							; 
   4165  f7d2
   4166  f7d2				   .
   4167  f7d2							; 
   4168  f7d2
   4169  f7d2				   .
   4170  f7d2							; 
   4171  f7d2
   4172  f7d2				   .
   4173  f7d2							; 
   4174  f7d2
   4175  f7d2				   .
   4176  f7d2							; 
   4177  f7d2
   4178  f7d2				   .
   4179  f7d2							; 
   4180  f7d2
   4181  f7d2				   .
   4182  f7d2							; 
   4183  f7d2
   4184  f7d2				   .
   4185  f7d2							; 
   4186  f7d2
   4187  f7d2				   .
   4188  f7d2							; 
   4189  f7d2
   4190  f7d2				   .__Restore_Game_from_Pause
   4191  f7d2							; __Restore_Game_from_Pause
   4192  f7d2
   4193  f7d2				   .
   4194  f7d2							; 
   4195  f7d2
   4196  f7d2				   .
   4197  f7d2							; 
   4198  f7d2
   4199  f7d2				   .
   4200  f7d2							; 
   4201  f7d2
   4202  f7d2				   .
   4203  f7d2							; 
   4204  f7d2
   4205  f7d2				   .
   4206  f7d2							; 
   4207  f7d2
   4208  f7d2				   .
   4209  f7d2							; 
   4210  f7d2
   4211  f7d2				   .L095		;  _Bit1_FireB_Restrainer{1}  =  1
   4212  f7d2
   4213  f7d2		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   4214  f7d4		       09 02		      ORA	#2
   4215  f7d6		       85 ec		      STA	_Bit1_FireB_Restrainer
   4216  f7d8				   .
   4217  f7d8							; 
   4218  f7d8
   4219  f7d8				   .
   4220  f7d8							; 
   4221  f7d8
   4222  f7d8				   .
   4223  f7d8							; 
   4224  f7d8
   4225  f7d8				   .
   4226  f7d8							; 
   4227  f7d8
   4228  f7d8				   .
   4229  f7d8							; 
   4230  f7d8
   4231  f7d8				   .
   4232  f7d8							; 
   4233  f7d8
   4234  f7d8				   .L096		;  scorecolor	=  $1C
   4235  f7d8
   4236  f7d8		       a9 1c		      LDA	#$1C
   4237  f7da		       85 a3		      STA	scorecolor
   4238  f7dc				   .
   4239  f7dc							; 
   4240  f7dc
   4241  f7dc				   .
   4242  f7dc							; 
   4243  f7dc
   4244  f7dc				   .L097		;  goto __Main_Loop
   4245  f7dc
   4246  f7dc		       4c 2b f5 	      jmp	.__Main_Loop
   4247  f7df
   4248  f7df				   .
   4249  f7df							; 
   4250  f7df
   4251  f7df				   .
   4252  f7df							; 
   4253  f7df
   4254  f7df				   .
   4255  f7df							; 
   4256  f7df
   4257  f7df				   .
   4258  f7df							; 
   4259  f7df
   4260  f7df				   .
   4261  f7df							; 
   4262  f7df
   4263  f7df				   .
   4264  f7df							; 
   4265  f7df
   4266  f7df				   .
   4267  f7df							; 
   4268  f7df
   4269  f7df				   .
   4270  f7df							; 
   4271  f7df
   4272  f7df				   .
   4273  f7df							; 
   4274  f7df
   4275  f7df				   .__Ps0
   4276  f7df							; __Ps0
   4277  f7df
   4278  f7df				   .
   4279  f7df							; 
   4280  f7df
   4281  f7df				   .L098		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps0B
   4282  f7df
   4283  f7df		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   4284  f7e1		       29 04		      AND	#4
   4285  f7e3		       f0 03		      BEQ	.skipL098
   4286  f7e5				   .condpart44
   4287  f7e5		       4c 03 f8 	      jmp	.__Ps0B
   4288  f7e8
   4289  f7e8				   .skipL098
   4290  f7e8				   .
   4291  f7e8							; 
   4292  f7e8
   4293  f7e8				   .L099		;  pfcolors:
   4294  f7e8
   4295  f7e8		       a9 0c		      lda	# $0C
   4296  f7ea		       85 08		      sta	COLUPF
   4297  f7ec				  -	      ifconst	pfres
   4298  f7ec				  -	      lda	#>(pfcolorlabel25-131+pfres*pfwidth)
   4299  f7ec					      else
   4300  f7ec		       a9 fa		      lda	#>(pfcolorlabel25-83)
   4301  f7ee					      endif
   4302  f7ee		       85 f1		      sta	pfcolortable+1
   4303  f7f0				  -	      ifconst	pfres
   4304  f7f0				  -	      lda	#<(pfcolorlabel25-131+pfres*pfwidth)
   4305  f7f0					      else
   4306  f7f0		       a9 05		      lda	#<(pfcolorlabel25-83)
   4307  f7f2					      endif
   4308  f7f2		       85 f0		      sta	pfcolortable
   4309  f7f4				   .
   4310  f7f4							; 
   4311  f7f4
   4312  f7f4				   .L0100		;  COLUP0  =  $0C
   4313  f7f4
   4314  f7f4		       a9 0c		      LDA	#$0C
   4315  f7f6		       85 06		      STA	COLUP0
   4316  f7f8				   .
   4317  f7f8							; 
   4318  f7f8
   4319  f7f8				   .L0101		;  COLUBK  =  $0A
   4320  f7f8
   4321  f7f8		       a9 0a		      LDA	#$0A
   4322  f7fa		       85 09		      STA	COLUBK
   4323  f7fc				   .
   4324  f7fc							; 
   4325  f7fc
   4326  f7fc				   .L0102		;  scorecolor	=  $0C
   4327  f7fc
   4328  f7fc		       a9 0c		      LDA	#$0C
   4329  f7fe		       85 a3		      STA	scorecolor
   4330  f800				   .
   4331  f800							; 
   4332  f800
   4333  f800				   .L0103		;  goto __Got_Pause_Colors
   4334  f800
   4335  f800		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   4336  f803
   4337  f803				   .
   4338  f803							; 
   4339  f803
   4340  f803				   .
   4341  f803							; 
   4342  f803
   4343  f803				   .
   4344  f803							; 
   4345  f803
   4346  f803				   .
   4347  f803							; 
   4348  f803
   4349  f803				   .
   4350  f803							; 
   4351  f803
   4352  f803				   .
   4353  f803							; 
   4354  f803
   4355  f803				   .
   4356  f803							; 
   4357  f803
   4358  f803				   .__Ps0B
   4359  f803							; __Ps0B
   4360  f803
   4361  f803				   .
   4362  f803							; 
   4363  f803
   4364  f803				   .L0104		;  pfcolors:
   4365  f803
   4366  f803		       a9 0a		      lda	# $0A
   4367  f805		       85 08		      sta	COLUPF
   4368  f807				  -	      ifconst	pfres
   4369  f807				  -	      lda	#>(pfcolorlabel25-130+pfres*pfwidth)
   4370  f807					      else
   4371  f807		       a9 fa		      lda	#>(pfcolorlabel25-82)
   4372  f809					      endif
   4373  f809		       85 f1		      sta	pfcolortable+1
   4374  f80b				  -	      ifconst	pfres
   4375  f80b				  -	      lda	#<(pfcolorlabel25-130+pfres*pfwidth)
   4376  f80b					      else
   4377  f80b		       a9 06		      lda	#<(pfcolorlabel25-82)
   4378  f80d					      endif
   4379  f80d		       85 f0		      sta	pfcolortable
   4380  f80f				   .
   4381  f80f							; 
   4382  f80f
   4383  f80f				   .L0105		;  COLUP0  =  $0A
   4384  f80f
   4385  f80f		       a9 0a		      LDA	#$0A
   4386  f811		       85 06		      STA	COLUP0
   4387  f813				   .
   4388  f813							; 
   4389  f813
   4390  f813				   .L0106		;  COLUBK  =  $0C
   4391  f813
   4392  f813		       a9 0c		      LDA	#$0C
   4393  f815		       85 09		      STA	COLUBK
   4394  f817				   .
   4395  f817							; 
   4396  f817
   4397  f817				   .L0107		;  scorecolor	=  $0A
   4398  f817
   4399  f817		       a9 0a		      LDA	#$0A
   4400  f819		       85 a3		      STA	scorecolor
   4401  f81b				   .
   4402  f81b							; 
   4403  f81b
   4404  f81b				   .L0108		;  goto __Got_Pause_Colors
   4405  f81b
   4406  f81b		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   4407  f81e
   4408  f81e				   .
   4409  f81e							; 
   4410  f81e
   4411  f81e				   .
   4412  f81e							; 
   4413  f81e
   4414  f81e				   .
   4415  f81e							; 
   4416  f81e
   4417  f81e				   .
   4418  f81e							; 
   4419  f81e
   4420  f81e				   .
   4421  f81e							; 
   4422  f81e
   4423  f81e				   .
   4424  f81e							; 
   4425  f81e
   4426  f81e				   .
   4427  f81e							; 
   4428  f81e
   4429  f81e				   .__Ps1
   4430  f81e							; __Ps1
   4431  f81e
   4432  f81e				   .
   4433  f81e							; 
   4434  f81e
   4435  f81e				   .L0109		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps1B
   4436  f81e
   4437  f81e		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   4438  f820		       29 04		      AND	#4
   4439  f822		       f0 03		      BEQ	.skipL0109
   4440  f824				   .condpart45
   4441  f824		       4c 42 f8 	      jmp	.__Ps1B
   4442  f827
   4443  f827				   .skipL0109
   4444  f827				   .
   4445  f827							; 
   4446  f827
   4447  f827				   .L0110		;  pfcolors:
   4448  f827
   4449  f827		       a9 3c		      lda	# $3C
   4450  f829		       85 08		      sta	COLUPF
   4451  f82b				  -	      ifconst	pfres
   4452  f82b				  -	      lda	#>(pfcolorlabel25-129+pfres*pfwidth)
   4453  f82b					      else
   4454  f82b		       a9 fa		      lda	#>(pfcolorlabel25-81)
   4455  f82d					      endif
   4456  f82d		       85 f1		      sta	pfcolortable+1
   4457  f82f				  -	      ifconst	pfres
   4458  f82f				  -	      lda	#<(pfcolorlabel25-129+pfres*pfwidth)
   4459  f82f					      else
   4460  f82f		       a9 07		      lda	#<(pfcolorlabel25-81)
   4461  f831					      endif
   4462  f831		       85 f0		      sta	pfcolortable
   4463  f833				   .
   4464  f833							; 
   4465  f833
   4466  f833				   .L0111		;  COLUP0  =  $3C
   4467  f833
   4468  f833		       a9 3c		      LDA	#$3C
   4469  f835		       85 06		      STA	COLUP0
   4470  f837				   .
   4471  f837							; 
   4472  f837
   4473  f837				   .L0112		;  COLUBK  =  $3A
   4474  f837
   4475  f837		       a9 3a		      LDA	#$3A
   4476  f839		       85 09		      STA	COLUBK
   4477  f83b				   .
   4478  f83b							; 
   4479  f83b
   4480  f83b				   .L0113		;  scorecolor	=  $3C
   4481  f83b
   4482  f83b		       a9 3c		      LDA	#$3C
   4483  f83d		       85 a3		      STA	scorecolor
   4484  f83f				   .
   4485  f83f							; 
   4486  f83f
   4487  f83f				   .L0114		;  goto __Got_Pause_Colors
   4488  f83f
   4489  f83f		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   4490  f842
   4491  f842				   .
   4492  f842							; 
   4493  f842
   4494  f842				   .
   4495  f842							; 
   4496  f842
   4497  f842				   .
   4498  f842							; 
   4499  f842
   4500  f842				   .
   4501  f842							; 
   4502  f842
   4503  f842				   .
   4504  f842							; 
   4505  f842
   4506  f842				   .
   4507  f842							; 
   4508  f842
   4509  f842				   .
   4510  f842							; 
   4511  f842
   4512  f842				   .__Ps1B
   4513  f842							; __Ps1B
   4514  f842
   4515  f842				   .
   4516  f842							; 
   4517  f842
   4518  f842				   .L0115		;  pfcolors:
   4519  f842
   4520  f842		       a9 3a		      lda	# $3A
   4521  f844		       85 08		      sta	COLUPF
   4522  f846				  -	      ifconst	pfres
   4523  f846				  -	      lda	#>(pfcolorlabel49-132+pfres*pfwidth)
   4524  f846					      else
   4525  f846		       a9 fa		      lda	#>(pfcolorlabel49-84)
   4526  f848					      endif
   4527  f848		       85 f1		      sta	pfcolortable+1
   4528  f84a				  -	      ifconst	pfres
   4529  f84a				  -	      lda	#<(pfcolorlabel49-132+pfres*pfwidth)
   4530  f84a					      else
   4531  f84a		       a9 2c		      lda	#<(pfcolorlabel49-84)
   4532  f84c					      endif
   4533  f84c		       85 f0		      sta	pfcolortable
   4534  f84e				   .
   4535  f84e							; 
   4536  f84e
   4537  f84e				   .L0116		;  COLUP0  =  $3A
   4538  f84e
   4539  f84e		       a9 3a		      LDA	#$3A
   4540  f850		       85 06		      STA	COLUP0
   4541  f852				   .
   4542  f852							; 
   4543  f852
   4544  f852				   .L0117		;  COLUBK  =  $3C
   4545  f852
   4546  f852		       a9 3c		      LDA	#$3C
   4547  f854		       85 09		      STA	COLUBK
   4548  f856				   .
   4549  f856							; 
   4550  f856
   4551  f856				   .L0118		;  scorecolor	=  $3A
   4552  f856
   4553  f856		       a9 3a		      LDA	#$3A
   4554  f858		       85 a3		      STA	scorecolor
   4555  f85a				   .
   4556  f85a							; 
   4557  f85a
   4558  f85a				   .L0119		;  goto __Got_Pause_Colors
   4559  f85a
   4560  f85a		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   4561  f85d
   4562  f85d				   .
   4563  f85d							; 
   4564  f85d
   4565  f85d				   .
   4566  f85d							; 
   4567  f85d
   4568  f85d				   .
   4569  f85d							; 
   4570  f85d
   4571  f85d				   .
   4572  f85d							; 
   4573  f85d
   4574  f85d				   .
   4575  f85d							; 
   4576  f85d
   4577  f85d				   .
   4578  f85d							; 
   4579  f85d
   4580  f85d				   .
   4581  f85d							; 
   4582  f85d
   4583  f85d				   .__Ps2
   4584  f85d							; __Ps2
   4585  f85d
   4586  f85d				   .
   4587  f85d							; 
   4588  f85d
   4589  f85d				   .L0120		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps2B
   4590  f85d
   4591  f85d		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   4592  f85f		       29 04		      AND	#4
   4593  f861		       f0 03		      BEQ	.skipL0120
   4594  f863				   .condpart46
   4595  f863		       4c 81 f8 	      jmp	.__Ps2B
   4596  f866
   4597  f866				   .skipL0120
   4598  f866				   .
   4599  f866							; 
   4600  f866
   4601  f866				   .L0121		;  pfcolors:
   4602  f866
   4603  f866		       a9 6c		      lda	# $6C
   4604  f868		       85 08		      sta	COLUPF
   4605  f86a				  -	      ifconst	pfres
   4606  f86a				  -	      lda	#>(pfcolorlabel49-131+pfres*pfwidth)
   4607  f86a					      else
   4608  f86a		       a9 fa		      lda	#>(pfcolorlabel49-83)
   4609  f86c					      endif
   4610  f86c		       85 f1		      sta	pfcolortable+1
   4611  f86e				  -	      ifconst	pfres
   4612  f86e				  -	      lda	#<(pfcolorlabel49-131+pfres*pfwidth)
   4613  f86e					      else
   4614  f86e		       a9 2d		      lda	#<(pfcolorlabel49-83)
   4615  f870					      endif
   4616  f870		       85 f0		      sta	pfcolortable
   4617  f872				   .
   4618  f872							; 
   4619  f872
   4620  f872				   .L0122		;  COLUP0  =  $6C
   4621  f872
   4622  f872		       a9 6c		      LDA	#$6C
   4623  f874		       85 06		      STA	COLUP0
   4624  f876				   .
   4625  f876							; 
   4626  f876
   4627  f876				   .L0123		;  COLUBK  =  $6A
   4628  f876
   4629  f876		       a9 6a		      LDA	#$6A
   4630  f878		       85 09		      STA	COLUBK
   4631  f87a				   .
   4632  f87a							; 
   4633  f87a
   4634  f87a				   .L0124		;  scorecolor	=  $6C
   4635  f87a
   4636  f87a		       a9 6c		      LDA	#$6C
   4637  f87c		       85 a3		      STA	scorecolor
   4638  f87e				   .
   4639  f87e							; 
   4640  f87e
   4641  f87e				   .L0125		;  goto __Got_Pause_Colors
   4642  f87e
   4643  f87e		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   4644  f881
   4645  f881				   .
   4646  f881							; 
   4647  f881
   4648  f881				   .
   4649  f881							; 
   4650  f881
   4651  f881				   .
   4652  f881							; 
   4653  f881
   4654  f881				   .
   4655  f881							; 
   4656  f881
   4657  f881				   .
   4658  f881							; 
   4659  f881
   4660  f881				   .
   4661  f881							; 
   4662  f881
   4663  f881				   .
   4664  f881							; 
   4665  f881
   4666  f881				   .__Ps2B
   4667  f881							; __Ps2B
   4668  f881
   4669  f881				   .
   4670  f881							; 
   4671  f881
   4672  f881				   .L0126		;  pfcolors:
   4673  f881
   4674  f881		       a9 6a		      lda	# $6A
   4675  f883		       85 08		      sta	COLUPF
   4676  f885				  -	      ifconst	pfres
   4677  f885				  -	      lda	#>(pfcolorlabel49-130+pfres*pfwidth)
   4678  f885					      else
   4679  f885		       a9 fa		      lda	#>(pfcolorlabel49-82)
   4680  f887					      endif
   4681  f887		       85 f1		      sta	pfcolortable+1
   4682  f889				  -	      ifconst	pfres
   4683  f889				  -	      lda	#<(pfcolorlabel49-130+pfres*pfwidth)
   4684  f889					      else
   4685  f889		       a9 2e		      lda	#<(pfcolorlabel49-82)
   4686  f88b					      endif
   4687  f88b		       85 f0		      sta	pfcolortable
   4688  f88d				   .
   4689  f88d							; 
   4690  f88d
   4691  f88d				   .L0127		;  COLUP0  =  $6A
   4692  f88d
   4693  f88d		       a9 6a		      LDA	#$6A
   4694  f88f		       85 06		      STA	COLUP0
   4695  f891				   .
   4696  f891							; 
   4697  f891
   4698  f891				   .L0128		;  COLUBK  =  $6C
   4699  f891
   4700  f891		       a9 6c		      LDA	#$6C
   4701  f893		       85 09		      STA	COLUBK
   4702  f895				   .
   4703  f895							; 
   4704  f895
   4705  f895				   .L0129		;  scorecolor	=  $6A
   4706  f895
   4707  f895		       a9 6a		      LDA	#$6A
   4708  f897		       85 a3		      STA	scorecolor
   4709  f899				   .
   4710  f899							; 
   4711  f899
   4712  f899				   .L0130		;  goto __Got_Pause_Colors
   4713  f899
   4714  f899		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   4715  f89c
   4716  f89c				   .
   4717  f89c							; 
   4718  f89c
   4719  f89c				   .
   4720  f89c							; 
   4721  f89c
   4722  f89c				   .
   4723  f89c							; 
   4724  f89c
   4725  f89c				   .
   4726  f89c							; 
   4727  f89c
   4728  f89c				   .
   4729  f89c							; 
   4730  f89c
   4731  f89c				   .
   4732  f89c							; 
   4733  f89c
   4734  f89c				   .
   4735  f89c							; 
   4736  f89c
   4737  f89c				   .__Ps3
   4738  f89c							; __Ps3
   4739  f89c
   4740  f89c				   .
   4741  f89c							; 
   4742  f89c
   4743  f89c				   .L0131		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps3B
   4744  f89c
   4745  f89c		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   4746  f89e		       29 04		      AND	#4
   4747  f8a0		       f0 03		      BEQ	.skipL0131
   4748  f8a2				   .condpart47
   4749  f8a2		       4c c0 f8 	      jmp	.__Ps3B
   4750  f8a5
   4751  f8a5				   .skipL0131
   4752  f8a5				   .
   4753  f8a5							; 
   4754  f8a5
   4755  f8a5				   .L0132		;  pfcolors:
   4756  f8a5
   4757  f8a5		       a9 9c		      lda	# $9C
   4758  f8a7		       85 08		      sta	COLUPF
   4759  f8a9				  -	      ifconst	pfres
   4760  f8a9				  -	      lda	#>(pfcolorlabel49-129+pfres*pfwidth)
   4761  f8a9					      else
   4762  f8a9		       a9 fa		      lda	#>(pfcolorlabel49-81)
   4763  f8ab					      endif
   4764  f8ab		       85 f1		      sta	pfcolortable+1
   4765  f8ad				  -	      ifconst	pfres
   4766  f8ad				  -	      lda	#<(pfcolorlabel49-129+pfres*pfwidth)
   4767  f8ad					      else
   4768  f8ad		       a9 2f		      lda	#<(pfcolorlabel49-81)
   4769  f8af					      endif
   4770  f8af		       85 f0		      sta	pfcolortable
   4771  f8b1				   .
   4772  f8b1							; 
   4773  f8b1
   4774  f8b1				   .L0133		;  COLUP0  =  $9C
   4775  f8b1
   4776  f8b1		       a9 9c		      LDA	#$9C
   4777  f8b3		       85 06		      STA	COLUP0
   4778  f8b5				   .
   4779  f8b5							; 
   4780  f8b5
   4781  f8b5				   .L0134		;  COLUBK  =  $9A
   4782  f8b5
   4783  f8b5		       a9 9a		      LDA	#$9A
   4784  f8b7		       85 09		      STA	COLUBK
   4785  f8b9				   .
   4786  f8b9							; 
   4787  f8b9
   4788  f8b9				   .L0135		;  scorecolor	=  $9C
   4789  f8b9
   4790  f8b9		       a9 9c		      LDA	#$9C
   4791  f8bb		       85 a3		      STA	scorecolor
   4792  f8bd				   .
   4793  f8bd							; 
   4794  f8bd
   4795  f8bd				   .L0136		;  goto __Got_Pause_Colors
   4796  f8bd
   4797  f8bd		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   4798  f8c0
   4799  f8c0				   .
   4800  f8c0							; 
   4801  f8c0
   4802  f8c0				   .
   4803  f8c0							; 
   4804  f8c0
   4805  f8c0				   .
   4806  f8c0							; 
   4807  f8c0
   4808  f8c0				   .
   4809  f8c0							; 
   4810  f8c0
   4811  f8c0				   .
   4812  f8c0							; 
   4813  f8c0
   4814  f8c0				   .
   4815  f8c0							; 
   4816  f8c0
   4817  f8c0				   .
   4818  f8c0							; 
   4819  f8c0
   4820  f8c0				   .__Ps3B
   4821  f8c0							; __Ps3B
   4822  f8c0
   4823  f8c0				   .
   4824  f8c0							; 
   4825  f8c0
   4826  f8c0				   .L0137		;  pfcolors:
   4827  f8c0
   4828  f8c0		       a9 9a		      lda	# $9A
   4829  f8c2		       85 08		      sta	COLUPF
   4830  f8c4				  -	      ifconst	pfres
   4831  f8c4				  -	      lda	#>(pfcolorlabel74-132+pfres*pfwidth)
   4832  f8c4					      else
   4833  f8c4		       a9 fa		      lda	#>(pfcolorlabel74-84)
   4834  f8c6					      endif
   4835  f8c6		       85 f1		      sta	pfcolortable+1
   4836  f8c8				  -	      ifconst	pfres
   4837  f8c8				  -	      lda	#<(pfcolorlabel74-132+pfres*pfwidth)
   4838  f8c8					      else
   4839  f8c8		       a9 58		      lda	#<(pfcolorlabel74-84)
   4840  f8ca					      endif
   4841  f8ca		       85 f0		      sta	pfcolortable
   4842  f8cc				   .
   4843  f8cc							; 
   4844  f8cc
   4845  f8cc				   .L0138		;  COLUP0  =  $9A
   4846  f8cc
   4847  f8cc		       a9 9a		      LDA	#$9A
   4848  f8ce		       85 06		      STA	COLUP0
   4849  f8d0				   .
   4850  f8d0							; 
   4851  f8d0
   4852  f8d0				   .L0139		;  COLUBK  =  $9C
   4853  f8d0
   4854  f8d0		       a9 9c		      LDA	#$9C
   4855  f8d2		       85 09		      STA	COLUBK
   4856  f8d4				   .
   4857  f8d4							; 
   4858  f8d4
   4859  f8d4				   .L0140		;  scorecolor	=  $9A
   4860  f8d4
   4861  f8d4		       a9 9a		      LDA	#$9A
   4862  f8d6		       85 a3		      STA	scorecolor
   4863  f8d8				   .
   4864  f8d8							; 
   4865  f8d8
   4866  f8d8				   .L0141		;  goto __Got_Pause_Colors
   4867  f8d8
   4868  f8d8		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   4869  f8db
   4870  f8db				   .
   4871  f8db							; 
   4872  f8db
   4873  f8db				   .
   4874  f8db							; 
   4875  f8db
   4876  f8db				   .
   4877  f8db							; 
   4878  f8db
   4879  f8db				   .
   4880  f8db							; 
   4881  f8db
   4882  f8db				   .
   4883  f8db							; 
   4884  f8db
   4885  f8db				   .
   4886  f8db							; 
   4887  f8db
   4888  f8db				   .
   4889  f8db							; 
   4890  f8db
   4891  f8db				   .__Ps4
   4892  f8db							; __Ps4
   4893  f8db
   4894  f8db				   .
   4895  f8db							; 
   4896  f8db
   4897  f8db				   .L0142		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps4B
   4898  f8db
   4899  f8db		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   4900  f8dd		       29 04		      AND	#4
   4901  f8df		       f0 03		      BEQ	.skipL0142
   4902  f8e1				   .condpart48
   4903  f8e1		       4c ff f8 	      jmp	.__Ps4B
   4904  f8e4
   4905  f8e4				   .skipL0142
   4906  f8e4				   .
   4907  f8e4							; 
   4908  f8e4
   4909  f8e4				   .L0143		;  pfcolors:
   4910  f8e4
   4911  f8e4		       a9 cc		      lda	# $CC
   4912  f8e6		       85 08		      sta	COLUPF
   4913  f8e8				  -	      ifconst	pfres
   4914  f8e8				  -	      lda	#>(pfcolorlabel74-131+pfres*pfwidth)
   4915  f8e8					      else
   4916  f8e8		       a9 fa		      lda	#>(pfcolorlabel74-83)
   4917  f8ea					      endif
   4918  f8ea		       85 f1		      sta	pfcolortable+1
   4919  f8ec				  -	      ifconst	pfres
   4920  f8ec				  -	      lda	#<(pfcolorlabel74-131+pfres*pfwidth)
   4921  f8ec					      else
   4922  f8ec		       a9 59		      lda	#<(pfcolorlabel74-83)
   4923  f8ee					      endif
   4924  f8ee		       85 f0		      sta	pfcolortable
   4925  f8f0				   .
   4926  f8f0							; 
   4927  f8f0
   4928  f8f0				   .L0144		;  COLUP0  =  $CC
   4929  f8f0
   4930  f8f0		       a9 cc		      LDA	#$CC
   4931  f8f2		       85 06		      STA	COLUP0
   4932  f8f4				   .
   4933  f8f4							; 
   4934  f8f4
   4935  f8f4				   .L0145		;  COLUBK  =  $CA
   4936  f8f4
   4937  f8f4		       a9 ca		      LDA	#$CA
   4938  f8f6		       85 09		      STA	COLUBK
   4939  f8f8				   .
   4940  f8f8							; 
   4941  f8f8
   4942  f8f8				   .L0146		;  scorecolor	=  $CC
   4943  f8f8
   4944  f8f8		       a9 cc		      LDA	#$CC
   4945  f8fa		       85 a3		      STA	scorecolor
   4946  f8fc				   .
   4947  f8fc							; 
   4948  f8fc
   4949  f8fc				   .L0147		;  goto __Got_Pause_Colors
   4950  f8fc
   4951  f8fc		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   4952  f8ff
   4953  f8ff				   .
   4954  f8ff							; 
   4955  f8ff
   4956  f8ff				   .
   4957  f8ff							; 
   4958  f8ff
   4959  f8ff				   .
   4960  f8ff							; 
   4961  f8ff
   4962  f8ff				   .
   4963  f8ff							; 
   4964  f8ff
   4965  f8ff				   .
   4966  f8ff							; 
   4967  f8ff
   4968  f8ff				   .
   4969  f8ff							; 
   4970  f8ff
   4971  f8ff				   .
   4972  f8ff							; 
   4973  f8ff
   4974  f8ff				   .__Ps4B
   4975  f8ff							; __Ps4B
   4976  f8ff
   4977  f8ff				   .
   4978  f8ff							; 
   4979  f8ff
   4980  f8ff				   .L0148		;  pfcolors:
   4981  f8ff
   4982  f8ff		       a9 ca		      lda	# $CA
   4983  f901		       85 08		      sta	COLUPF
   4984  f903				  -	      ifconst	pfres
   4985  f903				  -	      lda	#>(pfcolorlabel74-130+pfres*pfwidth)
   4986  f903					      else
   4987  f903		       a9 fa		      lda	#>(pfcolorlabel74-82)
   4988  f905					      endif
   4989  f905		       85 f1		      sta	pfcolortable+1
   4990  f907				  -	      ifconst	pfres
   4991  f907				  -	      lda	#<(pfcolorlabel74-130+pfres*pfwidth)
   4992  f907					      else
   4993  f907		       a9 5a		      lda	#<(pfcolorlabel74-82)
   4994  f909					      endif
   4995  f909		       85 f0		      sta	pfcolortable
   4996  f90b				   .
   4997  f90b							; 
   4998  f90b
   4999  f90b				   .L0149		;  COLUP0  =  $CA
   5000  f90b
   5001  f90b		       a9 ca		      LDA	#$CA
   5002  f90d		       85 06		      STA	COLUP0
   5003  f90f				   .
   5004  f90f							; 
   5005  f90f
   5006  f90f				   .L0150		;  COLUBK  =  $CC
   5007  f90f
   5008  f90f		       a9 cc		      LDA	#$CC
   5009  f911		       85 09		      STA	COLUBK
   5010  f913				   .
   5011  f913							; 
   5012  f913
   5013  f913				   .L0151		;  scorecolor	=  $CA
   5014  f913
   5015  f913		       a9 ca		      LDA	#$CA
   5016  f915		       85 a3		      STA	scorecolor
   5017  f917				   .
   5018  f917							; 
   5019  f917
   5020  f917				   .L0152		;  goto __Got_Pause_Colors
   5021  f917
   5022  f917		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   5023  f91a
   5024  f91a				   .
   5025  f91a							; 
   5026  f91a
   5027  f91a				   .
   5028  f91a							; 
   5029  f91a
   5030  f91a				   .
   5031  f91a							; 
   5032  f91a
   5033  f91a				   .
   5034  f91a							; 
   5035  f91a
   5036  f91a				   .
   5037  f91a							; 
   5038  f91a
   5039  f91a				   .
   5040  f91a							; 
   5041  f91a
   5042  f91a				   .
   5043  f91a							; 
   5044  f91a
   5045  f91a				   .__Ps5
   5046  f91a							; __Ps5
   5047  f91a
   5048  f91a				   .
   5049  f91a							; 
   5050  f91a
   5051  f91a				   .L0153		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps5B
   5052  f91a
   5053  f91a		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   5054  f91c		       29 04		      AND	#4
   5055  f91e		       f0 03		      BEQ	.skipL0153
   5056  f920				   .condpart49
   5057  f920		       4c 3e f9 	      jmp	.__Ps5B
   5058  f923
   5059  f923				   .skipL0153
   5060  f923				   .
   5061  f923							; 
   5062  f923
   5063  f923				   .L0154		;  pfcolors:
   5064  f923
   5065  f923		       a9 fc		      lda	# $FC
   5066  f925		       85 08		      sta	COLUPF
   5067  f927				  -	      ifconst	pfres
   5068  f927				  -	      lda	#>(pfcolorlabel74-129+pfres*pfwidth)
   5069  f927					      else
   5070  f927		       a9 fa		      lda	#>(pfcolorlabel74-81)
   5071  f929					      endif
   5072  f929		       85 f1		      sta	pfcolortable+1
   5073  f92b				  -	      ifconst	pfres
   5074  f92b				  -	      lda	#<(pfcolorlabel74-129+pfres*pfwidth)
   5075  f92b					      else
   5076  f92b		       a9 5b		      lda	#<(pfcolorlabel74-81)
   5077  f92d					      endif
   5078  f92d		       85 f0		      sta	pfcolortable
   5079  f92f				   .
   5080  f92f							; 
   5081  f92f
   5082  f92f				   .L0155		;  COLUP0  =  $FC
   5083  f92f
   5084  f92f		       a9 fc		      LDA	#$FC
   5085  f931		       85 06		      STA	COLUP0
   5086  f933				   .
   5087  f933							; 
   5088  f933
   5089  f933				   .L0156		;  COLUBK  =  $FA
   5090  f933
   5091  f933		       a9 fa		      LDA	#$FA
   5092  f935		       85 09		      STA	COLUBK
   5093  f937				   .
   5094  f937							; 
   5095  f937
   5096  f937				   .L0157		;  scorecolor	=  $FC
   5097  f937
   5098  f937		       a9 fc		      LDA	#$FC
   5099  f939		       85 a3		      STA	scorecolor
   5100  f93b				   .
   5101  f93b							; 
   5102  f93b
   5103  f93b				   .L0158		;  goto __Got_Pause_Colors
   5104  f93b
   5105  f93b		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   5106  f93e
   5107  f93e				   .
   5108  f93e							; 
   5109  f93e
   5110  f93e				   .
   5111  f93e							; 
   5112  f93e
   5113  f93e				   .
   5114  f93e							; 
   5115  f93e
   5116  f93e				   .
   5117  f93e							; 
   5118  f93e
   5119  f93e				   .
   5120  f93e							; 
   5121  f93e
   5122  f93e				   .
   5123  f93e							; 
   5124  f93e
   5125  f93e				   .
   5126  f93e							; 
   5127  f93e
   5128  f93e				   .__Ps5B
   5129  f93e							; __Ps5B
   5130  f93e
   5131  f93e				   .
   5132  f93e							; 
   5133  f93e
   5134  f93e				   .L0159		;  pfcolors:
   5135  f93e
   5136  f93e		       a9 fa		      lda	# $FA
   5137  f940		       85 08		      sta	COLUPF
   5138  f942				  -	      ifconst	pfres
   5139  f942				  -	      lda	#>(pfcolorlabel99-132+pfres*pfwidth)
   5140  f942					      else
   5141  f942		       a9 fb		      lda	#>(pfcolorlabel99-84)
   5142  f944					      endif
   5143  f944		       85 f1		      sta	pfcolortable+1
   5144  f946				  -	      ifconst	pfres
   5145  f946				  -	      lda	#<(pfcolorlabel99-132+pfres*pfwidth)
   5146  f946					      else
   5147  f946		       a9 04		      lda	#<(pfcolorlabel99-84)
   5148  f948					      endif
   5149  f948		       85 f0		      sta	pfcolortable
   5150  f94a				   .
   5151  f94a							; 
   5152  f94a
   5153  f94a				   .L0160		;  COLUP0  =  $FA
   5154  f94a
   5155  f94a		       a9 fa		      LDA	#$FA
   5156  f94c		       85 06		      STA	COLUP0
   5157  f94e				   .
   5158  f94e							; 
   5159  f94e
   5160  f94e				   .L0161		;  COLUBK  =  $FC
   5161  f94e
   5162  f94e		       a9 fc		      LDA	#$FC
   5163  f950		       85 09		      STA	COLUBK
   5164  f952				   .
   5165  f952							; 
   5166  f952
   5167  f952				   .L0162		;  scorecolor	=  $FA
   5168  f952
   5169  f952		       a9 fa		      LDA	#$FA
   5170  f954		       85 a3		      STA	scorecolor
   5171  f956				   .
   5172  f956							; 
   5173  f956
   5174  f956				   .L0163		;  goto __Got_Pause_Colors
   5175  f956
   5176  f956		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   5177  f959
   5178  f959				   .
   5179  f959							; 
   5180  f959
   5181  f959				   .
   5182  f959							; 
   5183  f959
   5184  f959				   .
   5185  f959							; 
   5186  f959
   5187  f959				   .
   5188  f959							; 
   5189  f959
   5190  f959				   .
   5191  f959							; 
   5192  f959
   5193  f959				   .
   5194  f959							; 
   5195  f959
   5196  f959				   .
   5197  f959							; 
   5198  f959
   5199  f959				   .__Ps6
   5200  f959							; __Ps6
   5201  f959
   5202  f959				   .
   5203  f959							; 
   5204  f959
   5205  f959				   .L0164		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps6B
   5206  f959
   5207  f959		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   5208  f95b		       29 04		      AND	#4
   5209  f95d		       f0 03		      BEQ	.skipL0164
   5210  f95f				   .condpart50
   5211  f95f		       4c 7d f9 	      jmp	.__Ps6B
   5212  f962
   5213  f962				   .skipL0164
   5214  f962				   .
   5215  f962							; 
   5216  f962
   5217  f962				   .L0165		;  pfcolors:
   5218  f962
   5219  f962		       a9 8c		      lda	# $8C
   5220  f964		       85 08		      sta	COLUPF
   5221  f966				  -	      ifconst	pfres
   5222  f966				  -	      lda	#>(pfcolorlabel99-131+pfres*pfwidth)
   5223  f966					      else
   5224  f966		       a9 fb		      lda	#>(pfcolorlabel99-83)
   5225  f968					      endif
   5226  f968		       85 f1		      sta	pfcolortable+1
   5227  f96a				  -	      ifconst	pfres
   5228  f96a				  -	      lda	#<(pfcolorlabel99-131+pfres*pfwidth)
   5229  f96a					      else
   5230  f96a		       a9 05		      lda	#<(pfcolorlabel99-83)
   5231  f96c					      endif
   5232  f96c		       85 f0		      sta	pfcolortable
   5233  f96e				   .
   5234  f96e							; 
   5235  f96e
   5236  f96e				   .L0166		;  COLUP0  =  $8C
   5237  f96e
   5238  f96e		       a9 8c		      LDA	#$8C
   5239  f970		       85 06		      STA	COLUP0
   5240  f972				   .
   5241  f972							; 
   5242  f972
   5243  f972				   .L0167		;  COLUBK  =  $8A
   5244  f972
   5245  f972		       a9 8a		      LDA	#$8A
   5246  f974		       85 09		      STA	COLUBK
   5247  f976				   .
   5248  f976							; 
   5249  f976
   5250  f976				   .L0168		;  scorecolor	=  $8C
   5251  f976
   5252  f976		       a9 8c		      LDA	#$8C
   5253  f978		       85 a3		      STA	scorecolor
   5254  f97a				   .
   5255  f97a							; 
   5256  f97a
   5257  f97a				   .L0169		;  goto __Got_Pause_Colors
   5258  f97a
   5259  f97a		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   5260  f97d
   5261  f97d				   .
   5262  f97d							; 
   5263  f97d
   5264  f97d				   .
   5265  f97d							; 
   5266  f97d
   5267  f97d				   .
   5268  f97d							; 
   5269  f97d
   5270  f97d				   .
   5271  f97d							; 
   5272  f97d
   5273  f97d				   .
   5274  f97d							; 
   5275  f97d
   5276  f97d				   .
   5277  f97d							; 
   5278  f97d
   5279  f97d				   .
   5280  f97d							; 
   5281  f97d
   5282  f97d				   .__Ps6B
   5283  f97d							; __Ps6B
   5284  f97d
   5285  f97d				   .
   5286  f97d							; 
   5287  f97d
   5288  f97d				   .L0170		;  pfcolors:
   5289  f97d
   5290  f97d		       a9 8a		      lda	# $8A
   5291  f97f		       85 08		      sta	COLUPF
   5292  f981				  -	      ifconst	pfres
   5293  f981				  -	      lda	#>(pfcolorlabel99-130+pfres*pfwidth)
   5294  f981					      else
   5295  f981		       a9 fb		      lda	#>(pfcolorlabel99-82)
   5296  f983					      endif
   5297  f983		       85 f1		      sta	pfcolortable+1
   5298  f985				  -	      ifconst	pfres
   5299  f985				  -	      lda	#<(pfcolorlabel99-130+pfres*pfwidth)
   5300  f985					      else
   5301  f985		       a9 06		      lda	#<(pfcolorlabel99-82)
   5302  f987					      endif
   5303  f987		       85 f0		      sta	pfcolortable
   5304  f989				   .
   5305  f989							; 
   5306  f989
   5307  f989				   .L0171		;  COLUP0  =  $8A
   5308  f989
   5309  f989		       a9 8a		      LDA	#$8A
   5310  f98b		       85 06		      STA	COLUP0
   5311  f98d				   .
   5312  f98d							; 
   5313  f98d
   5314  f98d				   .L0172		;  COLUBK  =  $8C
   5315  f98d
   5316  f98d		       a9 8c		      LDA	#$8C
   5317  f98f		       85 09		      STA	COLUBK
   5318  f991				   .
   5319  f991							; 
   5320  f991
   5321  f991				   .L0173		;  scorecolor	=  $8A
   5322  f991
   5323  f991		       a9 8a		      LDA	#$8A
   5324  f993		       85 a3		      STA	scorecolor
   5325  f995				   .
   5326  f995							; 
   5327  f995
   5328  f995				   .L0174		;  goto __Got_Pause_Colors
   5329  f995
   5330  f995		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   5331  f998
   5332  f998				   .
   5333  f998							; 
   5334  f998
   5335  f998				   .
   5336  f998							; 
   5337  f998
   5338  f998				   .
   5339  f998							; 
   5340  f998
   5341  f998				   .
   5342  f998							; 
   5343  f998
   5344  f998				   .
   5345  f998							; 
   5346  f998
   5347  f998				   .
   5348  f998							; 
   5349  f998
   5350  f998				   .
   5351  f998							; 
   5352  f998
   5353  f998				   .__Ps7
   5354  f998							; __Ps7
   5355  f998
   5356  f998				   .
   5357  f998							; 
   5358  f998
   5359  f998				   .L0175		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps7B
   5360  f998
   5361  f998		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   5362  f99a		       29 04		      AND	#4
   5363  f99c		       f0 03		      BEQ	.skipL0175
   5364  f99e				   .condpart51
   5365  f99e		       4c bc f9 	      jmp	.__Ps7B
   5366  f9a1
   5367  f9a1				   .skipL0175
   5368  f9a1				   .
   5369  f9a1							; 
   5370  f9a1
   5371  f9a1				   .L0176		;  pfcolors:
   5372  f9a1
   5373  f9a1		       a9 2c		      lda	# $2C
   5374  f9a3		       85 08		      sta	COLUPF
   5375  f9a5				  -	      ifconst	pfres
   5376  f9a5				  -	      lda	#>(pfcolorlabel99-129+pfres*pfwidth)
   5377  f9a5					      else
   5378  f9a5		       a9 fb		      lda	#>(pfcolorlabel99-81)
   5379  f9a7					      endif
   5380  f9a7		       85 f1		      sta	pfcolortable+1
   5381  f9a9				  -	      ifconst	pfres
   5382  f9a9				  -	      lda	#<(pfcolorlabel99-129+pfres*pfwidth)
   5383  f9a9					      else
   5384  f9a9		       a9 07		      lda	#<(pfcolorlabel99-81)
   5385  f9ab					      endif
   5386  f9ab		       85 f0		      sta	pfcolortable
   5387  f9ad				   .
   5388  f9ad							; 
   5389  f9ad
   5390  f9ad				   .L0177		;  COLUP0  =  $2C
   5391  f9ad
   5392  f9ad		       a9 2c		      LDA	#$2C
   5393  f9af		       85 06		      STA	COLUP0
   5394  f9b1				   .
   5395  f9b1							; 
   5396  f9b1
   5397  f9b1				   .L0178		;  COLUBK  =  $2A
   5398  f9b1
   5399  f9b1		       a9 2a		      LDA	#$2A
   5400  f9b3		       85 09		      STA	COLUBK
   5401  f9b5				   .
   5402  f9b5							; 
   5403  f9b5
   5404  f9b5				   .L0179		;  scorecolor	=  $2C
   5405  f9b5
   5406  f9b5		       a9 2c		      LDA	#$2C
   5407  f9b7		       85 a3		      STA	scorecolor
   5408  f9b9				   .
   5409  f9b9							; 
   5410  f9b9
   5411  f9b9				   .L0180		;  goto __Got_Pause_Colors
   5412  f9b9
   5413  f9b9		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   5414  f9bc
   5415  f9bc				   .
   5416  f9bc							; 
   5417  f9bc
   5418  f9bc				   .
   5419  f9bc							; 
   5420  f9bc
   5421  f9bc				   .
   5422  f9bc							; 
   5423  f9bc
   5424  f9bc				   .
   5425  f9bc							; 
   5426  f9bc
   5427  f9bc				   .
   5428  f9bc							; 
   5429  f9bc
   5430  f9bc				   .
   5431  f9bc							; 
   5432  f9bc
   5433  f9bc				   .
   5434  f9bc							; 
   5435  f9bc
   5436  f9bc				   .__Ps7B
   5437  f9bc							; __Ps7B
   5438  f9bc
   5439  f9bc				   .
   5440  f9bc							; 
   5441  f9bc
   5442  f9bc				   .L0181		;  pfcolors:
   5443  f9bc
   5444  f9bc		       a9 2a		      lda	# $2A
   5445  f9be		       85 08		      sta	COLUPF
   5446  f9c0				  -	      ifconst	pfres
   5447  f9c0				  -	      lda	#>(pfcolorlabel124-132+pfres*pfwidth)
   5448  f9c0					      else
   5449  f9c0		       a9 fb		      lda	#>(pfcolorlabel124-84)
   5450  f9c2					      endif
   5451  f9c2		       85 f1		      sta	pfcolortable+1
   5452  f9c4				  -	      ifconst	pfres
   5453  f9c4				  -	      lda	#<(pfcolorlabel124-132+pfres*pfwidth)
   5454  f9c4					      else
   5455  f9c4		       a9 30		      lda	#<(pfcolorlabel124-84)
   5456  f9c6					      endif
   5457  f9c6		       85 f0		      sta	pfcolortable
   5458  f9c8				   .
   5459  f9c8							; 
   5460  f9c8
   5461  f9c8				   .L0182		;  COLUP0  =  $2A
   5462  f9c8
   5463  f9c8		       a9 2a		      LDA	#$2A
   5464  f9ca		       85 06		      STA	COLUP0
   5465  f9cc				   .
   5466  f9cc							; 
   5467  f9cc
   5468  f9cc				   .L0183		;  COLUBK  =  $2C
   5469  f9cc
   5470  f9cc		       a9 2c		      LDA	#$2C
   5471  f9ce		       85 09		      STA	COLUBK
   5472  f9d0				   .
   5473  f9d0							; 
   5474  f9d0
   5475  f9d0				   .L0184		;  scorecolor	=  $2A
   5476  f9d0
   5477  f9d0		       a9 2a		      LDA	#$2A
   5478  f9d2		       85 a3		      STA	scorecolor
   5479  f9d4				   .
   5480  f9d4							; 
   5481  f9d4
   5482  f9d4				   .L0185		;  goto __Got_Pause_Colors
   5483  f9d4		       4c a6 f7 	      jmp	.__Got_Pause_Colors
   5484  f9d7				  -	      if	(<*) > (<(*+7))
   5485  f9d7				  -	      repeat	($100-<*)
   5486  f9d7				  -	      .byte	0
   5487  f9d7				  -	      repend
   5488  f9d7					      endif
   5489  f9d7				   playerL024_0
   5490  f9d7		       3c		      .byte.b	%00111100
   5491  f9d8		       7e		      .byte.b	%01111110
   5492  f9d9		       c3		      .byte.b	%11000011
   5493  f9da		       bd		      .byte.b	%10111101
   5494  f9db		       ff		      .byte.b	%11111111
   5495  f9dc		       db		      .byte.b	%11011011
   5496  f9dd		       7e		      .byte.b	%01111110
   5497  f9de		       3c		      .byte.b	%00111100
   5498  f9df				  -	      ifconst	pfres
   5499  f9df				  -	      if	(<*) > (254-pfres*pfwidth)
   5500  f9df				  -	      align	256
   5501  f9df				  -	      endif
   5502  f9df				  -	      if	(<*) < (136-pfres*pfwidth)
   5503  f9df				  -	      repeat	((136-pfres*pfwidth)-(<*))
   5504  f9df				  -	      .byte	0
   5505  f9df				  -	      repend
   5506  f9df				  -	      endif
   5507  f9df					      else
   5508  f9df					      if	(<*) > 206
   5509  fa00		       00 00 00 00*	      align	256
   5510  fa00					      endif
   5511  fa00					      if	(<*) < 88
   5512  fa00					      repeat	(88-(<*))
   5513  fa00		       00		      .byte.b	0
   5512  fa00					      repend
   5513  fa01		       00		      .byte.b	0
   5512  fa01					      repend
   5513  fa02		       00		      .byte.b	0
   5512  fa02					      repend
   5513  fa03		       00		      .byte.b	0
   5512  fa03					      repend
   5513  fa04		       00		      .byte.b	0
   5512  fa04					      repend
   5513  fa05		       00		      .byte.b	0
   5512  fa05					      repend
   5513  fa06		       00		      .byte.b	0
   5512  fa06					      repend
   5513  fa07		       00		      .byte.b	0
   5512  fa07					      repend
   5513  fa08		       00		      .byte.b	0
   5512  fa08					      repend
   5513  fa09		       00		      .byte.b	0
   5512  fa09					      repend
   5513  fa0a		       00		      .byte.b	0
   5512  fa0a					      repend
   5513  fa0b		       00		      .byte.b	0
   5512  fa0b					      repend
   5513  fa0c		       00		      .byte.b	0
   5512  fa0c					      repend
   5513  fa0d		       00		      .byte.b	0
   5512  fa0d					      repend
   5513  fa0e		       00		      .byte.b	0
   5512  fa0e					      repend
   5513  fa0f		       00		      .byte.b	0
   5512  fa0f					      repend
   5513  fa10		       00		      .byte.b	0
   5512  fa10					      repend
   5513  fa11		       00		      .byte.b	0
   5512  fa11					      repend
   5513  fa12		       00		      .byte.b	0
   5512  fa12					      repend
   5513  fa13		       00		      .byte.b	0
   5512  fa13					      repend
   5513  fa14		       00		      .byte.b	0
   5512  fa14					      repend
   5513  fa15		       00		      .byte.b	0
   5512  fa15					      repend
   5513  fa16		       00		      .byte.b	0
   5512  fa16					      repend
   5513  fa17		       00		      .byte.b	0
   5512  fa17					      repend
   5513  fa18		       00		      .byte.b	0
   5512  fa18					      repend
   5513  fa19		       00		      .byte.b	0
   5512  fa19					      repend
   5513  fa1a		       00		      .byte.b	0
   5512  fa1a					      repend
   5513  fa1b		       00		      .byte.b	0
   5512  fa1b					      repend
   5513  fa1c		       00		      .byte.b	0
   5512  fa1c					      repend
   5513  fa1d		       00		      .byte.b	0
   5512  fa1d					      repend
   5513  fa1e		       00		      .byte.b	0
   5512  fa1e					      repend
   5513  fa1f		       00		      .byte.b	0
   5512  fa1f					      repend
   5513  fa20		       00		      .byte.b	0
   5512  fa20					      repend
   5513  fa21		       00		      .byte.b	0
   5512  fa21					      repend
   5513  fa22		       00		      .byte.b	0
   5512  fa22					      repend
   5513  fa23		       00		      .byte.b	0
   5512  fa23					      repend
   5513  fa24		       00		      .byte.b	0
   5512  fa24					      repend
   5513  fa25		       00		      .byte.b	0
   5512  fa25					      repend
   5513  fa26		       00		      .byte.b	0
   5512  fa26					      repend
   5513  fa27		       00		      .byte.b	0
   5512  fa27					      repend
   5513  fa28		       00		      .byte.b	0
   5512  fa28					      repend
   5513  fa29		       00		      .byte.b	0
   5512  fa29					      repend
   5513  fa2a		       00		      .byte.b	0
   5512  fa2a					      repend
   5513  fa2b		       00		      .byte.b	0
   5512  fa2b					      repend
   5513  fa2c		       00		      .byte.b	0
   5512  fa2c					      repend
   5513  fa2d		       00		      .byte.b	0
   5512  fa2d					      repend
   5513  fa2e		       00		      .byte.b	0
   5512  fa2e					      repend
   5513  fa2f		       00		      .byte.b	0
   5512  fa2f					      repend
   5513  fa30		       00		      .byte.b	0
   5512  fa30					      repend
   5513  fa31		       00		      .byte.b	0
   5512  fa31					      repend
   5513  fa32		       00		      .byte.b	0
   5512  fa32					      repend
   5513  fa33		       00		      .byte.b	0
   5512  fa33					      repend
   5513  fa34		       00		      .byte.b	0
   5512  fa34					      repend
   5513  fa35		       00		      .byte.b	0
   5512  fa35					      repend
   5513  fa36		       00		      .byte.b	0
   5512  fa36					      repend
   5513  fa37		       00		      .byte.b	0
   5512  fa37					      repend
   5513  fa38		       00		      .byte.b	0
   5512  fa38					      repend
   5513  fa39		       00		      .byte.b	0
   5512  fa39					      repend
   5513  fa3a		       00		      .byte.b	0
   5512  fa3a					      repend
   5513  fa3b		       00		      .byte.b	0
   5512  fa3b					      repend
   5513  fa3c		       00		      .byte.b	0
   5512  fa3c					      repend
   5513  fa3d		       00		      .byte.b	0
   5512  fa3d					      repend
   5513  fa3e		       00		      .byte.b	0
   5512  fa3e					      repend
   5513  fa3f		       00		      .byte.b	0
   5512  fa3f					      repend
   5513  fa40		       00		      .byte.b	0
   5512  fa40					      repend
   5513  fa41		       00		      .byte.b	0
   5512  fa41					      repend
   5513  fa42		       00		      .byte.b	0
   5512  fa42					      repend
   5513  fa43		       00		      .byte.b	0
   5512  fa43					      repend
   5513  fa44		       00		      .byte.b	0
   5512  fa44					      repend
   5513  fa45		       00		      .byte.b	0
   5512  fa45					      repend
   5513  fa46		       00		      .byte.b	0
   5512  fa46					      repend
   5513  fa47		       00		      .byte.b	0
   5512  fa47					      repend
   5513  fa48		       00		      .byte.b	0
   5512  fa48					      repend
   5513  fa49		       00		      .byte.b	0
   5512  fa49					      repend
   5513  fa4a		       00		      .byte.b	0
   5512  fa4a					      repend
   5513  fa4b		       00		      .byte.b	0
   5512  fa4b					      repend
   5513  fa4c		       00		      .byte.b	0
   5512  fa4c					      repend
   5513  fa4d		       00		      .byte.b	0
   5512  fa4d					      repend
   5513  fa4e		       00		      .byte.b	0
   5512  fa4e					      repend
   5513  fa4f		       00		      .byte.b	0
   5512  fa4f					      repend
   5513  fa50		       00		      .byte.b	0
   5512  fa50					      repend
   5513  fa51		       00		      .byte.b	0
   5512  fa51					      repend
   5513  fa52		       00		      .byte.b	0
   5512  fa52					      repend
   5513  fa53		       00		      .byte.b	0
   5512  fa53					      repend
   5513  fa54		       00		      .byte.b	0
   5512  fa54					      repend
   5513  fa55		       00		      .byte.b	0
   5512  fa55					      repend
   5513  fa56		       00		      .byte.b	0
   5512  fa56					      repend
   5513  fa57		       00		      .byte.b	0
   5514  fa58					      repend
   5515  fa58					      endif
   5516  fa58					      endif
   5517  fa58				   pfcolorlabel25
   5518  fa58		       2c 0c 0a 3c	      .byte.b	$2C, $0C, $0A, $3C
   5519  fa5c		       2c 0c 0a 3c	      .byte.b	$2C, $0C, $0A, $3C
   5520  fa60		       2c 0c 0a 3c	      .byte.b	$2C, $0C, $0A, $3C
   5521  fa64		       2a 0c 0a 3c	      .byte.b	$2A, $0C, $0A, $3C
   5522  fa68		       28 0c 0a 3c	      .byte.b	$28, $0C, $0A, $3C
   5523  fa6c		       26 0c 0a 3c	      .byte.b	$26, $0C, $0A, $3C
   5524  fa70		       2c 0c 0a 3c	      .byte.b	$2C, $0C, $0A, $3C
   5525  fa74		       2c 0c 0a 3c	      .byte.b	$2C, $0C, $0A, $3C
   5526  fa78		       2c 0c 0a 3c	      .byte.b	$2C, $0C, $0A, $3C
   5527  fa7c		       2c 0c 0a 3c	      .byte.b	$2C, $0C, $0A, $3C
   5528  fa80				  -	      ifconst	pfres
   5529  fa80				  -	      if	(<*) > (254-pfres*pfwidth)
   5530  fa80				  -	      align	256
   5531  fa80				  -	      endif
   5532  fa80				  -	      if	(<*) < (136-pfres*pfwidth)
   5533  fa80				  -	      repeat	((136-pfres*pfwidth)-(<*))
   5534  fa80				  -	      .byte	0
   5535  fa80				  -	      repend
   5536  fa80				  -	      endif
   5537  fa80					      else
   5538  fa80				  -	      if	(<*) > 206
   5539  fa80				  -	      align	256
   5540  fa80					      endif
   5541  fa80				  -	      if	(<*) < 88
   5542  fa80				  -	      repeat	(88-(<*))
   5543  fa80				  -	      .byte	0
   5544  fa80				  -	      repend
   5545  fa80					      endif
   5546  fa80					      endif
   5547  fa80				   pfcolorlabel49
   5548  fa80		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5549  fa84		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5550  fa88		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5551  fa8c		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5552  fa90		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5553  fa94		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5554  fa98		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5555  fa9c		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5556  faa0		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5557  faa4		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5558  faa8		       3a 6c 6a 9c	      .byte.b	$3A, $6C, $6A, $9C
   5559  faac				  -	      ifconst	pfres
   5560  faac				  -	      if	(<*) > (254-pfres*pfwidth)
   5561  faac				  -	      align	256
   5562  faac				  -	      endif
   5563  faac				  -	      if	(<*) < (136-pfres*pfwidth)
   5564  faac				  -	      repeat	((136-pfres*pfwidth)-(<*))
   5565  faac				  -	      .byte	0
   5566  faac				  -	      repend
   5567  faac				  -	      endif
   5568  faac					      else
   5569  faac				  -	      if	(<*) > 206
   5570  faac				  -	      align	256
   5571  faac					      endif
   5572  faac				  -	      if	(<*) < 88
   5573  faac				  -	      repeat	(88-(<*))
   5574  faac				  -	      .byte	0
   5575  faac				  -	      repend
   5576  faac					      endif
   5577  faac					      endif
   5578  faac				   pfcolorlabel74
   5579  faac		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5580  fab0		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5581  fab4		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5582  fab8		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5583  fabc		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5584  fac0		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5585  fac4		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5586  fac8		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5587  facc		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5588  fad0		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5589  fad4		       9a cc ca fc	      .byte.b	$9A, $CC, $CA, $FC
   5590  fad8				  -	      ifconst	pfres
   5591  fad8				  -	      if	(<*) > (254-pfres*pfwidth)
   5592  fad8				  -	      align	256
   5593  fad8				  -	      endif
   5594  fad8				  -	      if	(<*) < (136-pfres*pfwidth)
   5595  fad8				  -	      repeat	((136-pfres*pfwidth)-(<*))
   5596  fad8				  -	      .byte	0
   5597  fad8				  -	      repend
   5598  fad8				  -	      endif
   5599  fad8					      else
   5600  fad8					      if	(<*) > 206
   5601  fb00		       00 00 00 00*	      align	256
   5602  fb00					      endif
   5603  fb00					      if	(<*) < 88
   5604  fb00					      repeat	(88-(<*))
   5605  fb00		       00		      .byte.b	0
   5604  fb00					      repend
   5605  fb01		       00		      .byte.b	0
   5604  fb01					      repend
   5605  fb02		       00		      .byte.b	0
   5604  fb02					      repend
   5605  fb03		       00		      .byte.b	0
   5604  fb03					      repend
   5605  fb04		       00		      .byte.b	0
   5604  fb04					      repend
   5605  fb05		       00		      .byte.b	0
   5604  fb05					      repend
   5605  fb06		       00		      .byte.b	0
   5604  fb06					      repend
   5605  fb07		       00		      .byte.b	0
   5604  fb07					      repend
   5605  fb08		       00		      .byte.b	0
   5604  fb08					      repend
   5605  fb09		       00		      .byte.b	0
   5604  fb09					      repend
   5605  fb0a		       00		      .byte.b	0
   5604  fb0a					      repend
   5605  fb0b		       00		      .byte.b	0
   5604  fb0b					      repend
   5605  fb0c		       00		      .byte.b	0
   5604  fb0c					      repend
   5605  fb0d		       00		      .byte.b	0
   5604  fb0d					      repend
   5605  fb0e		       00		      .byte.b	0
   5604  fb0e					      repend
   5605  fb0f		       00		      .byte.b	0
   5604  fb0f					      repend
   5605  fb10		       00		      .byte.b	0
   5604  fb10					      repend
   5605  fb11		       00		      .byte.b	0
   5604  fb11					      repend
   5605  fb12		       00		      .byte.b	0
   5604  fb12					      repend
   5605  fb13		       00		      .byte.b	0
   5604  fb13					      repend
   5605  fb14		       00		      .byte.b	0
   5604  fb14					      repend
   5605  fb15		       00		      .byte.b	0
   5604  fb15					      repend
   5605  fb16		       00		      .byte.b	0
   5604  fb16					      repend
   5605  fb17		       00		      .byte.b	0
   5604  fb17					      repend
   5605  fb18		       00		      .byte.b	0
   5604  fb18					      repend
   5605  fb19		       00		      .byte.b	0
   5604  fb19					      repend
   5605  fb1a		       00		      .byte.b	0
   5604  fb1a					      repend
   5605  fb1b		       00		      .byte.b	0
   5604  fb1b					      repend
   5605  fb1c		       00		      .byte.b	0
   5604  fb1c					      repend
   5605  fb1d		       00		      .byte.b	0
   5604  fb1d					      repend
   5605  fb1e		       00		      .byte.b	0
   5604  fb1e					      repend
   5605  fb1f		       00		      .byte.b	0
   5604  fb1f					      repend
   5605  fb20		       00		      .byte.b	0
   5604  fb20					      repend
   5605  fb21		       00		      .byte.b	0
   5604  fb21					      repend
   5605  fb22		       00		      .byte.b	0
   5604  fb22					      repend
   5605  fb23		       00		      .byte.b	0
   5604  fb23					      repend
   5605  fb24		       00		      .byte.b	0
   5604  fb24					      repend
   5605  fb25		       00		      .byte.b	0
   5604  fb25					      repend
   5605  fb26		       00		      .byte.b	0
   5604  fb26					      repend
   5605  fb27		       00		      .byte.b	0
   5604  fb27					      repend
   5605  fb28		       00		      .byte.b	0
   5604  fb28					      repend
   5605  fb29		       00		      .byte.b	0
   5604  fb29					      repend
   5605  fb2a		       00		      .byte.b	0
   5604  fb2a					      repend
   5605  fb2b		       00		      .byte.b	0
   5604  fb2b					      repend
   5605  fb2c		       00		      .byte.b	0
   5604  fb2c					      repend
   5605  fb2d		       00		      .byte.b	0
   5604  fb2d					      repend
   5605  fb2e		       00		      .byte.b	0
   5604  fb2e					      repend
   5605  fb2f		       00		      .byte.b	0
   5604  fb2f					      repend
   5605  fb30		       00		      .byte.b	0
   5604  fb30					      repend
   5605  fb31		       00		      .byte.b	0
   5604  fb31					      repend
   5605  fb32		       00		      .byte.b	0
   5604  fb32					      repend
   5605  fb33		       00		      .byte.b	0
   5604  fb33					      repend
   5605  fb34		       00		      .byte.b	0
   5604  fb34					      repend
   5605  fb35		       00		      .byte.b	0
   5604  fb35					      repend
   5605  fb36		       00		      .byte.b	0
   5604  fb36					      repend
   5605  fb37		       00		      .byte.b	0
   5604  fb37					      repend
   5605  fb38		       00		      .byte.b	0
   5604  fb38					      repend
   5605  fb39		       00		      .byte.b	0
   5604  fb39					      repend
   5605  fb3a		       00		      .byte.b	0
   5604  fb3a					      repend
   5605  fb3b		       00		      .byte.b	0
   5604  fb3b					      repend
   5605  fb3c		       00		      .byte.b	0
   5604  fb3c					      repend
   5605  fb3d		       00		      .byte.b	0
   5604  fb3d					      repend
   5605  fb3e		       00		      .byte.b	0
   5604  fb3e					      repend
   5605  fb3f		       00		      .byte.b	0
   5604  fb3f					      repend
   5605  fb40		       00		      .byte.b	0
   5604  fb40					      repend
   5605  fb41		       00		      .byte.b	0
   5604  fb41					      repend
   5605  fb42		       00		      .byte.b	0
   5604  fb42					      repend
   5605  fb43		       00		      .byte.b	0
   5604  fb43					      repend
   5605  fb44		       00		      .byte.b	0
   5604  fb44					      repend
   5605  fb45		       00		      .byte.b	0
   5604  fb45					      repend
   5605  fb46		       00		      .byte.b	0
   5604  fb46					      repend
   5605  fb47		       00		      .byte.b	0
   5604  fb47					      repend
   5605  fb48		       00		      .byte.b	0
   5604  fb48					      repend
   5605  fb49		       00		      .byte.b	0
   5604  fb49					      repend
   5605  fb4a		       00		      .byte.b	0
   5604  fb4a					      repend
   5605  fb4b		       00		      .byte.b	0
   5604  fb4b					      repend
   5605  fb4c		       00		      .byte.b	0
   5604  fb4c					      repend
   5605  fb4d		       00		      .byte.b	0
   5604  fb4d					      repend
   5605  fb4e		       00		      .byte.b	0
   5604  fb4e					      repend
   5605  fb4f		       00		      .byte.b	0
   5604  fb4f					      repend
   5605  fb50		       00		      .byte.b	0
   5604  fb50					      repend
   5605  fb51		       00		      .byte.b	0
   5604  fb51					      repend
   5605  fb52		       00		      .byte.b	0
   5604  fb52					      repend
   5605  fb53		       00		      .byte.b	0
   5604  fb53					      repend
   5605  fb54		       00		      .byte.b	0
   5604  fb54					      repend
   5605  fb55		       00		      .byte.b	0
   5604  fb55					      repend
   5605  fb56		       00		      .byte.b	0
   5604  fb56					      repend
   5605  fb57		       00		      .byte.b	0
   5606  fb58					      repend
   5607  fb58					      endif
   5608  fb58					      endif
   5609  fb58				   pfcolorlabel99
   5610  fb58		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5611  fb5c		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5612  fb60		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5613  fb64		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5614  fb68		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5615  fb6c		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5616  fb70		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5617  fb74		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5618  fb78		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5619  fb7c		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5620  fb80		       fa 8c 8a 2c	      .byte.b	$FA, $8C, $8A, $2C
   5621  fb84				  -	      ifconst	pfres
   5622  fb84				  -	      if	(<*) > (254-pfres*pfwidth)
   5623  fb84				  -	      align	256
   5624  fb84				  -	      endif
   5625  fb84				  -	      if	(<*) < (136-pfres*pfwidth)
   5626  fb84				  -	      repeat	((136-pfres*pfwidth)-(<*))
   5627  fb84				  -	      .byte	0
   5628  fb84				  -	      repend
   5629  fb84				  -	      endif
   5630  fb84					      else
   5631  fb84				  -	      if	(<*) > 206
   5632  fb84				  -	      align	256
   5633  fb84					      endif
   5634  fb84				  -	      if	(<*) < 88
   5635  fb84				  -	      repeat	(88-(<*))
   5636  fb84				  -	      .byte	0
   5637  fb84				  -	      repend
   5638  fb84					      endif
   5639  fb84					      endif
   5640  fb84				   pfcolorlabel124
   5641  fb84		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5642  fb88		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5643  fb8c		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5644  fb90		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5645  fb94		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5646  fb98		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5647  fb9c		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5648  fba0		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5649  fba4		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5650  fba8		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5651  fbac		       2a 00 00 00	      .byte.b	$2A,0,0,0
   5652  fbb0					      if	ECHOFIRST
      1004 bytes of ROM space left
   5653  fbb0					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   5654  fbb0					      endif
   5655  fbb0		       00 01	   ECHOFIRST  =	1
   5656  fbb0
   5657  fbb0
   5658  fbb0
   5659  fbb0							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5660  fbb0
   5661  fbb0							; feel free to modify the score graphics - just keep each digit 8 high
   5662  fbb0							; and keep the conditional compilation stuff intact
   5663  fbb0				  -	      ifconst	ROM2k
   5664  fbb0				  -	      ORG	$F7AC-8
   5665  fbb0					      else
   5666  fbb0				  -	      ifconst	bankswitch
   5667  fbb0				  -	      if	bankswitch == 8
   5668  fbb0				  -	      ORG	$2F94-bscode_length
   5669  fbb0				  -	      RORG	$FF94-bscode_length
   5670  fbb0				  -	      endif
   5671  fbb0				  -	      if	bankswitch == 16
   5672  fbb0				  -	      ORG	$4F94-bscode_length
   5673  fbb0				  -	      RORG	$FF94-bscode_length
   5674  fbb0				  -	      endif
   5675  fbb0				  -	      if	bankswitch == 32
   5676  fbb0				  -	      ORG	$8F94-bscode_length
   5677  fbb0				  -	      RORG	$FF94-bscode_length
   5678  fbb0				  -	      endif
   5679  fbb0				  -	      if	bankswitch == 64
   5680  fbb0				  -	      ORG	$10F80-bscode_length
   5681  fbb0				  -	      RORG	$1FF80-bscode_length
   5682  fbb0				  -	      endif
   5683  fbb0					      else
   5684  ff9c					      ORG	$FF9C
   5685  ff9c					      endif
   5686  ff9c					      endif
   5687  ff9c
   5688  ff9c							; font equates
   5689  ff9c		       00 01	   .21stcentury =	1
   5690  ff9c		       00 02	   alarmclock =	2
   5691  ff9c		       00 03	   handwritten =	3
   5692  ff9c		       00 04	   interrupted =	4
   5693  ff9c		       00 05	   retroputer =	5
   5694  ff9c		       00 06	   whimsey    =	6
   5695  ff9c		       00 07	   tiny       =	7
   5696  ff9c		       00 08	   hex	      =	8
   5697  ff9c
   5698  ff9c				  -	      ifconst	font
   5699  ff9c				  -	      if	font == hex
   5700  ff9c				  -	      ORG	. - 48
   5701  ff9c				  -	      endif
   5702  ff9c					      endif
   5703  ff9c
   5704  ff9c				   scoretable
   5705  ff9c
   5706  ff9c				  -	      ifconst	font
   5707  ff9c				  -	      if	font == .21stcentury
   5708  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   5709  ff9c				  -	      endif
   5710  ff9c				  -	      if	font == alarmclock
   5711  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   5712  ff9c				  -	      endif
   5713  ff9c				  -	      if	font == handwritten
   5714  ff9c				  -	      include	"score_graphics.asm.handwritten"
   5715  ff9c				  -	      endif
   5716  ff9c				  -	      if	font == interrupted
   5717  ff9c				  -	      include	"score_graphics.asm.interrupted"
   5718  ff9c				  -	      endif
   5719  ff9c				  -	      if	font == retroputer
   5720  ff9c				  -	      include	"score_graphics.asm.retroputer"
   5721  ff9c				  -	      endif
   5722  ff9c				  -	      if	font == whimsey
   5723  ff9c				  -	      include	"score_graphics.asm.whimsey"
   5724  ff9c				  -	      endif
   5725  ff9c				  -	      if	font == tiny
   5726  ff9c				  -	      include	"score_graphics.asm.tiny"
   5727  ff9c				  -	      endif
   5728  ff9c				  -	      if	font == hex
   5729  ff9c				  -	      include	"score_graphics.asm.hex"
   5730  ff9c				  -	      endif
   5731  ff9c					      else		; default font
   5732  ff9c
   5733  ff9c		       3c		      .byte.b	%00111100
   5734  ff9d		       66		      .byte.b	%01100110
   5735  ff9e		       66		      .byte.b	%01100110
   5736  ff9f		       66		      .byte.b	%01100110
   5737  ffa0		       66		      .byte.b	%01100110
   5738  ffa1		       66		      .byte.b	%01100110
   5739  ffa2		       66		      .byte.b	%01100110
   5740  ffa3		       3c		      .byte.b	%00111100
   5741  ffa4
   5742  ffa4		       7e		      .byte.b	%01111110
   5743  ffa5		       18		      .byte.b	%00011000
   5744  ffa6		       18		      .byte.b	%00011000
   5745  ffa7		       18		      .byte.b	%00011000
   5746  ffa8		       18		      .byte.b	%00011000
   5747  ffa9		       38		      .byte.b	%00111000
   5748  ffaa		       18		      .byte.b	%00011000
   5749  ffab		       08		      .byte.b	%00001000
   5750  ffac
   5751  ffac		       7e		      .byte.b	%01111110
   5752  ffad		       60		      .byte.b	%01100000
   5753  ffae		       60		      .byte.b	%01100000
   5754  ffaf		       3c		      .byte.b	%00111100
   5755  ffb0		       06		      .byte.b	%00000110
   5756  ffb1		       06		      .byte.b	%00000110
   5757  ffb2		       46		      .byte.b	%01000110
   5758  ffb3		       3c		      .byte.b	%00111100
   5759  ffb4
   5760  ffb4		       3c		      .byte.b	%00111100
   5761  ffb5		       46		      .byte.b	%01000110
   5762  ffb6		       06		      .byte.b	%00000110
   5763  ffb7		       06		      .byte.b	%00000110
   5764  ffb8		       1c		      .byte.b	%00011100
   5765  ffb9		       06		      .byte.b	%00000110
   5766  ffba		       46		      .byte.b	%01000110
   5767  ffbb		       3c		      .byte.b	%00111100
   5768  ffbc
   5769  ffbc		       0c		      .byte.b	%00001100
   5770  ffbd		       0c		      .byte.b	%00001100
   5771  ffbe		       7e		      .byte.b	%01111110
   5772  ffbf		       4c		      .byte.b	%01001100
   5773  ffc0		       4c		      .byte.b	%01001100
   5774  ffc1		       2c		      .byte.b	%00101100
   5775  ffc2		       1c		      .byte.b	%00011100
   5776  ffc3		       0c		      .byte.b	%00001100
   5777  ffc4
   5778  ffc4		       3c		      .byte.b	%00111100
   5779  ffc5		       46		      .byte.b	%01000110
   5780  ffc6		       06		      .byte.b	%00000110
   5781  ffc7		       06		      .byte.b	%00000110
   5782  ffc8		       3c		      .byte.b	%00111100
   5783  ffc9		       60		      .byte.b	%01100000
   5784  ffca		       60		      .byte.b	%01100000
   5785  ffcb		       7e		      .byte.b	%01111110
   5786  ffcc
   5787  ffcc		       3c		      .byte.b	%00111100
   5788  ffcd		       66		      .byte.b	%01100110
   5789  ffce		       66		      .byte.b	%01100110
   5790  ffcf		       66		      .byte.b	%01100110
   5791  ffd0		       7c		      .byte.b	%01111100
   5792  ffd1		       60		      .byte.b	%01100000
   5793  ffd2		       62		      .byte.b	%01100010
   5794  ffd3		       3c		      .byte.b	%00111100
   5795  ffd4
   5796  ffd4		       30		      .byte.b	%00110000
   5797  ffd5		       30		      .byte.b	%00110000
   5798  ffd6		       30		      .byte.b	%00110000
   5799  ffd7		       18		      .byte.b	%00011000
   5800  ffd8		       0c		      .byte.b	%00001100
   5801  ffd9		       06		      .byte.b	%00000110
   5802  ffda		       42		      .byte.b	%01000010
   5803  ffdb		       3e		      .byte.b	%00111110
   5804  ffdc
   5805  ffdc		       3c		      .byte.b	%00111100
   5806  ffdd		       66		      .byte.b	%01100110
   5807  ffde		       66		      .byte.b	%01100110
   5808  ffdf		       66		      .byte.b	%01100110
   5809  ffe0		       3c		      .byte.b	%00111100
   5810  ffe1		       66		      .byte.b	%01100110
   5811  ffe2		       66		      .byte.b	%01100110
   5812  ffe3		       3c		      .byte.b	%00111100
   5813  ffe4
   5814  ffe4		       3c		      .byte.b	%00111100
   5815  ffe5		       46		      .byte.b	%01000110
   5816  ffe6		       06		      .byte.b	%00000110
   5817  ffe7		       3e		      .byte.b	%00111110
   5818  ffe8		       66		      .byte.b	%01100110
   5819  ffe9		       66		      .byte.b	%01100110
   5820  ffea		       66		      .byte.b	%01100110
   5821  ffeb		       3c		      .byte.b	%00111100
   5822  ffec
   5823  ffec					      ifnconst	DPC_kernel_options
   5824  ffec
   5825  ffec		       00		      .byte.b	%00000000
   5826  ffed		       00		      .byte.b	%00000000
   5827  ffee		       00		      .byte.b	%00000000
   5828  ffef		       00		      .byte.b	%00000000
   5829  fff0		       00		      .byte.b	%00000000
   5830  fff1		       00		      .byte.b	%00000000
   5831  fff2		       00		      .byte.b	%00000000
   5832  fff3		       00		      .byte.b	%00000000
   5833  fff4
   5834  fff4					      endif
   5835  fff4
   5836  fff4					      endif
   5837  fff4
   5838  fff4				  -	      ifconst	ROM2k
   5839  fff4				  -	      ORG	$F7FC
   5840  fff4					      else
   5841  fff4				  -	      ifconst	bankswitch
   5842  fff4				  -	      if	bankswitch == 8
   5843  fff4				  -	      ORG	$2FF4-bscode_length
   5844  fff4				  -	      RORG	$FFF4-bscode_length
   5845  fff4				  -	      endif
   5846  fff4				  -	      if	bankswitch == 16
   5847  fff4				  -	      ORG	$4FF4-bscode_length
   5848  fff4				  -	      RORG	$FFF4-bscode_length
   5849  fff4				  -	      endif
   5850  fff4				  -	      if	bankswitch == 32
   5851  fff4				  -	      ORG	$8FF4-bscode_length
   5852  fff4				  -	      RORG	$FFF4-bscode_length
   5853  fff4				  -	      endif
   5854  fff4				  -	      if	bankswitch == 64
   5855  fff4				  -	      ORG	$10FE0-bscode_length
   5856  fff4				  -	      RORG	$1FFE0-bscode_length
   5857  fff4				  -	      endif
   5858  fff4					      else
   5859  fffc					      ORG	$FFFC
   5860  fffc					      endif
   5861  fffc					      endif
   5862  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5863  fffc
   5864  fffc				  -	      ifconst	bankswitch
   5865  fffc				  -	      if	bankswitch == 8
   5866  fffc				  -	      ORG	$2FFC
   5867  fffc				  -	      RORG	$FFFC
   5868  fffc				  -	      endif
   5869  fffc				  -	      if	bankswitch == 16
   5870  fffc				  -	      ORG	$4FFC
   5871  fffc				  -	      RORG	$FFFC
   5872  fffc				  -	      endif
   5873  fffc				  -	      if	bankswitch == 32
   5874  fffc				  -	      ORG	$8FFC
   5875  fffc				  -	      RORG	$FFFC
   5876  fffc				  -	      endif
   5877  fffc				  -	      if	bankswitch == 64
   5878  fffc				  -	      ORG	$10FF0
   5879  fffc				  -	      RORG	$1FFF0
   5880  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5881  fffc				  -	      ORG	$10FF8
   5882  fffc				  -	      RORG	$1FFF8
   5883  fffc				  -	      ifconst	superchip
   5884  fffc				  -	      .byte	"E","F","S","C"
   5885  fffc				  -	      else
   5886  fffc				  -	      .byte	"E","F","E","F"
   5887  fffc				  -	      endif
   5888  fffc				  -	      ORG	$10FFC
   5889  fffc				  -	      RORG	$1FFFC
   5890  fffc				  -	      endif
   5891  fffc					      else
   5892  fffc				  -	      ifconst	ROM2k
   5893  fffc				  -	      ORG	$F7FC
   5894  fffc					      else
   5895  fffc					      ORG	$FFFC
   5896  fffc					      endif
   5897  fffc					      endif
   5898  fffc		       00 f0		      .word.w	(start & $ffff)
   5899  fffe		       00 f0		      .word.w	(start & $ffff)

------- FILE e:\Documents\bB\demos\ex_karl_g_8x8_world_bankswitched.bas.asm LEVEL 1 PASS 2
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE e:\Documents\bB\demos\ex_karl_g_8x8_world_bankswitched.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE e:\Documents\bB\demos\ex_karl_g_8x8_world_bankswitched.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 08	   _Data_Number_to_Bit_length =	.skipL0391-_Data_Number_to_Bit
      4  5000 ????
      5  5000 ????	       00 20	   _Data_Foreground_Color_length =	.skipL0390-_Data_Foreground_Color
      6  5000 ????
      7  5000 ????	       00 20	   _Data_Background_Color_length =	.skipL0389-_Data_Background_Color
      8  5000 ????
      9  5000 ????	       00 20	   bscode_length =	32
     10  5000 ????	       00 fe	   _FE	      =	$FE
     11  5000 ????
     12  5000 ????	       00 fc	   _FC	      =	$FC
     13  5000 ????
     14  5000 ????	       00 fa	   _FA	      =	$FA
     15  5000 ????
     16  5000 ????	       00 f8	   _F8	      =	$F8
     17  5000 ????
     18  5000 ????	       00 f6	   _F6	      =	$F6
     19  5000 ????
     20  5000 ????	       00 f4	   _F4	      =	$F4
     21  5000 ????
     22  5000 ????	       00 f2	   _F2	      =	$F2
     23  5000 ????
     24  5000 ????	       00 f0	   _F0	      =	$F0
     25  5000 ????
     26  5000 ????	       00 ee	   _EE	      =	$EE
     27  5000 ????
     28  5000 ????	       00 ec	   _EC	      =	$EC
     29  5000 ????
     30  5000 ????	       00 ea	   _EA	      =	$EA
     31  5000 ????
     32  5000 ????	       00 e8	   _E8	      =	$E8
     33  5000 ????
     34  5000 ????	       00 e6	   _E6	      =	$E6
     35  5000 ????
     36  5000 ????	       00 e4	   _E4	      =	$E4
     37  5000 ????
     38  5000 ????	       00 e2	   _E2	      =	$E2
     39  5000 ????
     40  5000 ????	       00 e0	   _E0	      =	$E0
     41  5000 ????
     42  5000 ????	       00 de	   _DE	      =	$DE
     43  5000 ????
     44  5000 ????	       00 dc	   _DC	      =	$DC
     45  5000 ????
     46  5000 ????	       00 da	   _DA	      =	$DA
     47  5000 ????
     48  5000 ????	       00 d8	   _D8	      =	$D8
     49  5000 ????
     50  5000 ????	       00 d6	   _D6	      =	$D6
     51  5000 ????
     52  5000 ????	       00 d4	   _D4	      =	$D4
     53  5000 ????
     54  5000 ????	       00 d2	   _D2	      =	$D2
     55  5000 ????
     56  5000 ????	       00 d0	   _D0	      =	$D0
     57  5000 ????
     58  5000 ????	       00 ce	   _CE	      =	$CE
     59  5000 ????
     60  5000 ????	       00 cc	   _CC	      =	$CC
     61  5000 ????
     62  5000 ????	       00 ca	   _CA	      =	$CA
     63  5000 ????
     64  5000 ????	       00 c8	   _C8	      =	$C8
     65  5000 ????
     66  5000 ????	       00 c6	   _C6	      =	$C6
     67  5000 ????
     68  5000 ????	       00 c4	   _C4	      =	$C4
     69  5000 ????
     70  5000 ????	       00 c2	   _C2	      =	$C2
     71  5000 ????
     72  5000 ????	       00 c0	   _C0	      =	$C0
     73  5000 ????
     74  5000 ????	       00 be	   _BE	      =	$BE
     75  5000 ????
     76  5000 ????	       00 bc	   _BC	      =	$BC
     77  5000 ????
     78  5000 ????	       00 ba	   _BA	      =	$BA
     79  5000 ????
     80  5000 ????	       00 b8	   _B8	      =	$B8
     81  5000 ????
     82  5000 ????	       00 b6	   _B6	      =	$B6
     83  5000 ????
     84  5000 ????	       00 b4	   _B4	      =	$B4
     85  5000 ????
     86  5000 ????	       00 b2	   _B2	      =	$B2
     87  5000 ????
     88  5000 ????	       00 b0	   _B0	      =	$B0
     89  5000 ????
     90  5000 ????	       00 ae	   _AE	      =	$AE
     91  5000 ????
     92  5000 ????	       00 ac	   _AC	      =	$AC
     93  5000 ????
     94  5000 ????	       00 aa	   _AA	      =	$AA
     95  5000 ????
     96  5000 ????	       00 a8	   _A8	      =	$A8
     97  5000 ????
     98  5000 ????	       00 a6	   _A6	      =	$A6
     99  5000 ????
    100  5000 ????	       00 a4	   _A4	      =	$A4
    101  5000 ????
    102  5000 ????	       00 a2	   _A2	      =	$A2
    103  5000 ????
    104  5000 ????	       00 a0	   _A0	      =	$A0
    105  5000 ????
    106  5000 ????	       00 9e	   _9E	      =	$9E
    107  5000 ????
    108  5000 ????	       00 9c	   _9C	      =	$9C
    109  5000 ????
    110  5000 ????	       00 9a	   _9A	      =	$9A
    111  5000 ????
    112  5000 ????	       00 98	   _98	      =	$98
    113  5000 ????
    114  5000 ????	       00 96	   _96	      =	$96
    115  5000 ????
    116  5000 ????	       00 94	   _94	      =	$94
    117  5000 ????
    118  5000 ????	       00 92	   _92	      =	$92
    119  5000 ????
    120  5000 ????	       00 90	   _90	      =	$90
    121  5000 ????
    122  5000 ????	       00 8e	   _8E	      =	$8E
    123  5000 ????
    124  5000 ????	       00 8c	   _8C	      =	$8C
    125  5000 ????
    126  5000 ????	       00 8a	   _8A	      =	$8A
    127  5000 ????
    128  5000 ????	       00 88	   _88	      =	$88
    129  5000 ????
    130  5000 ????	       00 86	   _86	      =	$86
    131  5000 ????
    132  5000 ????	       00 84	   _84	      =	$84
    133  5000 ????
    134  5000 ????	       00 82	   _82	      =	$82
    135  5000 ????
    136  5000 ????	       00 80	   _80	      =	$80
    137  5000 ????
    138  5000 ????	       00 7e	   _7E	      =	$7E
    139  5000 ????
    140  5000 ????	       00 7c	   _7C	      =	$7C
    141  5000 ????
    142  5000 ????	       00 7a	   _7A	      =	$7A
    143  5000 ????
    144  5000 ????	       00 78	   _78	      =	$78
    145  5000 ????
    146  5000 ????	       00 76	   _76	      =	$76
    147  5000 ????
    148  5000 ????	       00 74	   _74	      =	$74
    149  5000 ????
    150  5000 ????	       00 72	   _72	      =	$72
    151  5000 ????
    152  5000 ????	       00 70	   _70	      =	$70
    153  5000 ????
    154  5000 ????	       00 6e	   _6E	      =	$6E
    155  5000 ????
    156  5000 ????	       00 6c	   _6C	      =	$6C
    157  5000 ????
    158  5000 ????	       00 6a	   _6A	      =	$6A
    159  5000 ????
    160  5000 ????	       00 68	   _68	      =	$68
    161  5000 ????
    162  5000 ????	       00 66	   _66	      =	$66
    163  5000 ????
    164  5000 ????	       00 64	   _64	      =	$64
    165  5000 ????
    166  5000 ????	       00 62	   _62	      =	$62
    167  5000 ????
    168  5000 ????	       00 60	   _60	      =	$60
    169  5000 ????
    170  5000 ????	       00 5e	   _5E	      =	$5E
    171  5000 ????
    172  5000 ????	       00 5c	   _5C	      =	$5C
    173  5000 ????
    174  5000 ????	       00 5a	   _5A	      =	$5A
    175  5000 ????
    176  5000 ????	       00 58	   _58	      =	$58
    177  5000 ????
    178  5000 ????	       00 56	   _56	      =	$56
    179  5000 ????
    180  5000 ????	       00 54	   _54	      =	$54
    181  5000 ????
    182  5000 ????	       00 52	   _52	      =	$52
    183  5000 ????
    184  5000 ????	       00 50	   _50	      =	$50
    185  5000 ????
    186  5000 ????	       00 4e	   _4E	      =	$4E
    187  5000 ????
    188  5000 ????	       00 4c	   _4C	      =	$4C
    189  5000 ????
    190  5000 ????	       00 4a	   _4A	      =	$4A
    191  5000 ????
    192  5000 ????	       00 48	   _48	      =	$48
    193  5000 ????
    194  5000 ????	       00 46	   _46	      =	$46
    195  5000 ????
    196  5000 ????	       00 44	   _44	      =	$44
    197  5000 ????
    198  5000 ????	       00 42	   _42	      =	$42
    199  5000 ????
    200  5000 ????	       00 40	   _40	      =	$40
    201  5000 ????
    202  5000 ????	       00 3e	   _3E	      =	$3E
    203  5000 ????
    204  5000 ????	       00 3c	   _3C	      =	$3C
    205  5000 ????
    206  5000 ????	       00 3a	   _3A	      =	$3A
    207  5000 ????
    208  5000 ????	       00 38	   _38	      =	$38
    209  5000 ????
    210  5000 ????	       00 36	   _36	      =	$36
    211  5000 ????
    212  5000 ????	       00 34	   _34	      =	$34
    213  5000 ????
    214  5000 ????	       00 32	   _32	      =	$32
    215  5000 ????
    216  5000 ????	       00 30	   _30	      =	$30
    217  5000 ????
    218  5000 ????	       00 2e	   _2E	      =	$2E
    219  5000 ????
    220  5000 ????	       00 2c	   _2C	      =	$2C
    221  5000 ????
    222  5000 ????	       00 2a	   _2A	      =	$2A
    223  5000 ????
    224  5000 ????	       00 28	   _28	      =	$28
    225  5000 ????
    226  5000 ????	       00 26	   _26	      =	$26
    227  5000 ????
    228  5000 ????	       00 24	   _24	      =	$24
    229  5000 ????
    230  5000 ????	       00 22	   _22	      =	$22
    231  5000 ????
    232  5000 ????	       00 20	   _20	      =	$20
    233  5000 ????
    234  5000 ????	       00 1e	   _1E	      =	$1E
    235  5000 ????
    236  5000 ????	       00 1c	   _1C	      =	$1C
    237  5000 ????
    238  5000 ????	       00 1a	   _1A	      =	$1A
    239  5000 ????
    240  5000 ????	       00 18	   _18	      =	$18
    241  5000 ????
    242  5000 ????	       00 16	   _16	      =	$16
    243  5000 ????
    244  5000 ????	       00 14	   _14	      =	$14
    245  5000 ????
    246  5000 ????	       00 12	   _12	      =	$12
    247  5000 ????
    248  5000 ????	       00 10	   _10	      =	$10
    249  5000 ????
    250  5000 ????	       00 0e	   _0E	      =	$0E
    251  5000 ????
    252  5000 ????	       00 0c	   _0C	      =	$0C
    253  5000 ????
    254  5000 ????	       00 0a	   _0A	      =	$0A
    255  5000 ????
    256  5000 ????	       00 08	   _08	      =	$08
    257  5000 ????
    258  5000 ????	       00 06	   _06	      =	$06
    259  5000 ????
    260  5000 ????	       00 04	   _04	      =	$04
    261  5000 ????
    262  5000 ????	       00 02	   _02	      =	$02
    263  5000 ????
    264  5000 ????	       00 00	   _00	      =	$00
    265  5000 ????
    266  5000 ????	       00 07	   _c_World_Limit_Right =	7
    267  5000 ????
    268  5000 ????	       00 00	   _c_World_Limit_Left =	0
    269  5000 ????
    270  5000 ????	       00 07	   _c_World_Limit_Bottom =	7
    271  5000 ????
    272  5000 ????	       00 00	   _c_World_Limit_Top =	0
    273  5000 ????
    274  5000 ????	       00 99	   _c_Edge_Right =	153
    275  5000 ????
    276  5000 ????	       00 02	   _c_Edge_Left =	2
    277  5000 ????
    278  5000 ????	       00 58	   _c_Edge_Bottom =	88
    279  5000 ????
    280  5000 ????	       00 0a	   _c_Edge_Top =	10
    281  5000 ????
    282  5000 ????	       00 95	   _sc3       =	score + 2
    283  5000 ????
    284  5000 ????	       00 94	   _sc2       =	score + 1
    285  5000 ????
    286  5000 ????	       00 93	   _sc1       =	score
    287  5000 ????
    288  5000 ????	       00 ed	   rand16     =	z
    289  5000 ????
    290  5000 ????	       00 ec	   _RoomRand  =	y
    291  5000 ????
    292  5000 ????	       00 86	   _P1_Up_Down =	player1y
    293  5000 ????	       00 81	   _P1_Left_Right =	player1x
    294  5000 ????	       00 e2	   _Bit7_Over_Under =	o
    295  5000 ????
    296  5000 ????	       00 e2	   _Bit6_LR_Joy_Movement =	o
    297  5000 ????
    298  5000 ????	       00 e2	   _Bit5_UD_Joy_Movement =	o
    299  5000 ????
    300  5000 ????	       00 e2	   _Bit4_Next_Room_Right =	o
    301  5000 ????
    302  5000 ????	       00 e2	   _Bit3_Next_Room_Left =	o
    303  5000 ????
    304  5000 ????	       00 e2	   _Bit2_Next_Room_Down =	o
    305  5000 ????
    306  5000 ????	       00 e2	   _Bit1_Next_Room_Up =	o
    307  5000 ????
    308  5000 ????	       00 e2	   _Bit0_Reset_Restrainer =	o
    309  5000 ????
    310  5000 ????	       00 e2	   _BitOp_01  =	o
    311  5000 ????
    312  5000 ????	       00 e1	   _Frame_Counter =	n
    313  5000 ????
    314  5000 ????	       00 e0	   _Master_Counter =	m
    315  5000 ????
    316  5000 ????	       00 df	   _Temp      =	l
    317  5000 ????
    318  5000 ????	       00 de	   _Row7Visited =	k
    319  5000 ????
    320  5000 ????	       00 dd	   _Row6Visited =	j
    321  5000 ????
    322  5000 ????	       00 dc	   _Row5Visited =	i
    323  5000 ????
    324  5000 ????	       00 db	   _Row4Visited =	h
    325  5000 ????
    326  5000 ????	       00 da	   _Row3Visited =	g
    327  5000 ????
    328  5000 ????	       00 d9	   _Row2Visited =	f
    329  5000 ????
    330  5000 ????	       00 d8	   _Row1Visited =	e
    331  5000 ????
    332  5000 ????	       00 d7	   _VisitedRooms =	d
    333  5000 ????
    334  5000 ????	       00 d6	   _TS_Slowdown =	c
    335  5000 ????
    336  5000 ????	       00 d6	   _CurrentScene =	c
    337  5000 ????
    338  5000 ????	       00 d5	   _YRoom     =	b
    339  5000 ????
    340  5000 ????	       00 d4	   _XRoom     =	a
    341  5000 ????
    342  5000 ????	       00 03	   bs_mask    =	3
    343  5000 ????	       00 10	   bankswitch =	16
    344  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    345  5000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????			  -	      ifconst	superchip
    199  5000 ????			  -playfieldbase =	$10D0
    200  5000 ????			  -	      include	superchip.h
    201  5000 ????				      else
    202  5000 ????	       00 a4	   playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       00 a4	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE e:\Documents\bB\demos\ex_karl_g_8x8_world_bankswitched.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 08	   _Data_Number_to_Bit_length =	.skipL0391-_Data_Number_to_Bit
      4  5000 ????
      5  5000 ????	       00 20	   _Data_Foreground_Color_length =	.skipL0390-_Data_Foreground_Color
      6  5000 ????
      7  5000 ????	       00 20	   _Data_Background_Color_length =	.skipL0389-_Data_Background_Color
      8  5000 ????
      9  5000 ????	       00 20	   bscode_length =	32
     10  5000 ????	       00 fe	   _FE	      =	$FE
     11  5000 ????
     12  5000 ????	       00 fc	   _FC	      =	$FC
     13  5000 ????
     14  5000 ????	       00 fa	   _FA	      =	$FA
     15  5000 ????
     16  5000 ????	       00 f8	   _F8	      =	$F8
     17  5000 ????
     18  5000 ????	       00 f6	   _F6	      =	$F6
     19  5000 ????
     20  5000 ????	       00 f4	   _F4	      =	$F4
     21  5000 ????
     22  5000 ????	       00 f2	   _F2	      =	$F2
     23  5000 ????
     24  5000 ????	       00 f0	   _F0	      =	$F0
     25  5000 ????
     26  5000 ????	       00 ee	   _EE	      =	$EE
     27  5000 ????
     28  5000 ????	       00 ec	   _EC	      =	$EC
     29  5000 ????
     30  5000 ????	       00 ea	   _EA	      =	$EA
     31  5000 ????
     32  5000 ????	       00 e8	   _E8	      =	$E8
     33  5000 ????
     34  5000 ????	       00 e6	   _E6	      =	$E6
     35  5000 ????
     36  5000 ????	       00 e4	   _E4	      =	$E4
     37  5000 ????
     38  5000 ????	       00 e2	   _E2	      =	$E2
     39  5000 ????
     40  5000 ????	       00 e0	   _E0	      =	$E0
     41  5000 ????
     42  5000 ????	       00 de	   _DE	      =	$DE
     43  5000 ????
     44  5000 ????	       00 dc	   _DC	      =	$DC
     45  5000 ????
     46  5000 ????	       00 da	   _DA	      =	$DA
     47  5000 ????
     48  5000 ????	       00 d8	   _D8	      =	$D8
     49  5000 ????
     50  5000 ????	       00 d6	   _D6	      =	$D6
     51  5000 ????
     52  5000 ????	       00 d4	   _D4	      =	$D4
     53  5000 ????
     54  5000 ????	       00 d2	   _D2	      =	$D2
     55  5000 ????
     56  5000 ????	       00 d0	   _D0	      =	$D0
     57  5000 ????
     58  5000 ????	       00 ce	   _CE	      =	$CE
     59  5000 ????
     60  5000 ????	       00 cc	   _CC	      =	$CC
     61  5000 ????
     62  5000 ????	       00 ca	   _CA	      =	$CA
     63  5000 ????
     64  5000 ????	       00 c8	   _C8	      =	$C8
     65  5000 ????
     66  5000 ????	       00 c6	   _C6	      =	$C6
     67  5000 ????
     68  5000 ????	       00 c4	   _C4	      =	$C4
     69  5000 ????
     70  5000 ????	       00 c2	   _C2	      =	$C2
     71  5000 ????
     72  5000 ????	       00 c0	   _C0	      =	$C0
     73  5000 ????
     74  5000 ????	       00 be	   _BE	      =	$BE
     75  5000 ????
     76  5000 ????	       00 bc	   _BC	      =	$BC
     77  5000 ????
     78  5000 ????	       00 ba	   _BA	      =	$BA
     79  5000 ????
     80  5000 ????	       00 b8	   _B8	      =	$B8
     81  5000 ????
     82  5000 ????	       00 b6	   _B6	      =	$B6
     83  5000 ????
     84  5000 ????	       00 b4	   _B4	      =	$B4
     85  5000 ????
     86  5000 ????	       00 b2	   _B2	      =	$B2
     87  5000 ????
     88  5000 ????	       00 b0	   _B0	      =	$B0
     89  5000 ????
     90  5000 ????	       00 ae	   _AE	      =	$AE
     91  5000 ????
     92  5000 ????	       00 ac	   _AC	      =	$AC
     93  5000 ????
     94  5000 ????	       00 aa	   _AA	      =	$AA
     95  5000 ????
     96  5000 ????	       00 a8	   _A8	      =	$A8
     97  5000 ????
     98  5000 ????	       00 a6	   _A6	      =	$A6
     99  5000 ????
    100  5000 ????	       00 a4	   _A4	      =	$A4
    101  5000 ????
    102  5000 ????	       00 a2	   _A2	      =	$A2
    103  5000 ????
    104  5000 ????	       00 a0	   _A0	      =	$A0
    105  5000 ????
    106  5000 ????	       00 9e	   _9E	      =	$9E
    107  5000 ????
    108  5000 ????	       00 9c	   _9C	      =	$9C
    109  5000 ????
    110  5000 ????	       00 9a	   _9A	      =	$9A
    111  5000 ????
    112  5000 ????	       00 98	   _98	      =	$98
    113  5000 ????
    114  5000 ????	       00 96	   _96	      =	$96
    115  5000 ????
    116  5000 ????	       00 94	   _94	      =	$94
    117  5000 ????
    118  5000 ????	       00 92	   _92	      =	$92
    119  5000 ????
    120  5000 ????	       00 90	   _90	      =	$90
    121  5000 ????
    122  5000 ????	       00 8e	   _8E	      =	$8E
    123  5000 ????
    124  5000 ????	       00 8c	   _8C	      =	$8C
    125  5000 ????
    126  5000 ????	       00 8a	   _8A	      =	$8A
    127  5000 ????
    128  5000 ????	       00 88	   _88	      =	$88
    129  5000 ????
    130  5000 ????	       00 86	   _86	      =	$86
    131  5000 ????
    132  5000 ????	       00 84	   _84	      =	$84
    133  5000 ????
    134  5000 ????	       00 82	   _82	      =	$82
    135  5000 ????
    136  5000 ????	       00 80	   _80	      =	$80
    137  5000 ????
    138  5000 ????	       00 7e	   _7E	      =	$7E
    139  5000 ????
    140  5000 ????	       00 7c	   _7C	      =	$7C
    141  5000 ????
    142  5000 ????	       00 7a	   _7A	      =	$7A
    143  5000 ????
    144  5000 ????	       00 78	   _78	      =	$78
    145  5000 ????
    146  5000 ????	       00 76	   _76	      =	$76
    147  5000 ????
    148  5000 ????	       00 74	   _74	      =	$74
    149  5000 ????
    150  5000 ????	       00 72	   _72	      =	$72
    151  5000 ????
    152  5000 ????	       00 70	   _70	      =	$70
    153  5000 ????
    154  5000 ????	       00 6e	   _6E	      =	$6E
    155  5000 ????
    156  5000 ????	       00 6c	   _6C	      =	$6C
    157  5000 ????
    158  5000 ????	       00 6a	   _6A	      =	$6A
    159  5000 ????
    160  5000 ????	       00 68	   _68	      =	$68
    161  5000 ????
    162  5000 ????	       00 66	   _66	      =	$66
    163  5000 ????
    164  5000 ????	       00 64	   _64	      =	$64
    165  5000 ????
    166  5000 ????	       00 62	   _62	      =	$62
    167  5000 ????
    168  5000 ????	       00 60	   _60	      =	$60
    169  5000 ????
    170  5000 ????	       00 5e	   _5E	      =	$5E
    171  5000 ????
    172  5000 ????	       00 5c	   _5C	      =	$5C
    173  5000 ????
    174  5000 ????	       00 5a	   _5A	      =	$5A
    175  5000 ????
    176  5000 ????	       00 58	   _58	      =	$58
    177  5000 ????
    178  5000 ????	       00 56	   _56	      =	$56
    179  5000 ????
    180  5000 ????	       00 54	   _54	      =	$54
    181  5000 ????
    182  5000 ????	       00 52	   _52	      =	$52
    183  5000 ????
    184  5000 ????	       00 50	   _50	      =	$50
    185  5000 ????
    186  5000 ????	       00 4e	   _4E	      =	$4E
    187  5000 ????
    188  5000 ????	       00 4c	   _4C	      =	$4C
    189  5000 ????
    190  5000 ????	       00 4a	   _4A	      =	$4A
    191  5000 ????
    192  5000 ????	       00 48	   _48	      =	$48
    193  5000 ????
    194  5000 ????	       00 46	   _46	      =	$46
    195  5000 ????
    196  5000 ????	       00 44	   _44	      =	$44
    197  5000 ????
    198  5000 ????	       00 42	   _42	      =	$42
    199  5000 ????
    200  5000 ????	       00 40	   _40	      =	$40
    201  5000 ????
    202  5000 ????	       00 3e	   _3E	      =	$3E
    203  5000 ????
    204  5000 ????	       00 3c	   _3C	      =	$3C
    205  5000 ????
    206  5000 ????	       00 3a	   _3A	      =	$3A
    207  5000 ????
    208  5000 ????	       00 38	   _38	      =	$38
    209  5000 ????
    210  5000 ????	       00 36	   _36	      =	$36
    211  5000 ????
    212  5000 ????	       00 34	   _34	      =	$34
    213  5000 ????
    214  5000 ????	       00 32	   _32	      =	$32
    215  5000 ????
    216  5000 ????	       00 30	   _30	      =	$30
    217  5000 ????
    218  5000 ????	       00 2e	   _2E	      =	$2E
    219  5000 ????
    220  5000 ????	       00 2c	   _2C	      =	$2C
    221  5000 ????
    222  5000 ????	       00 2a	   _2A	      =	$2A
    223  5000 ????
    224  5000 ????	       00 28	   _28	      =	$28
    225  5000 ????
    226  5000 ????	       00 26	   _26	      =	$26
    227  5000 ????
    228  5000 ????	       00 24	   _24	      =	$24
    229  5000 ????
    230  5000 ????	       00 22	   _22	      =	$22
    231  5000 ????
    232  5000 ????	       00 20	   _20	      =	$20
    233  5000 ????
    234  5000 ????	       00 1e	   _1E	      =	$1E
    235  5000 ????
    236  5000 ????	       00 1c	   _1C	      =	$1C
    237  5000 ????
    238  5000 ????	       00 1a	   _1A	      =	$1A
    239  5000 ????
    240  5000 ????	       00 18	   _18	      =	$18
    241  5000 ????
    242  5000 ????	       00 16	   _16	      =	$16
    243  5000 ????
    244  5000 ????	       00 14	   _14	      =	$14
    245  5000 ????
    246  5000 ????	       00 12	   _12	      =	$12
    247  5000 ????
    248  5000 ????	       00 10	   _10	      =	$10
    249  5000 ????
    250  5000 ????	       00 0e	   _0E	      =	$0E
    251  5000 ????
    252  5000 ????	       00 0c	   _0C	      =	$0C
    253  5000 ????
    254  5000 ????	       00 0a	   _0A	      =	$0A
    255  5000 ????
    256  5000 ????	       00 08	   _08	      =	$08
    257  5000 ????
    258  5000 ????	       00 06	   _06	      =	$06
    259  5000 ????
    260  5000 ????	       00 04	   _04	      =	$04
    261  5000 ????
    262  5000 ????	       00 02	   _02	      =	$02
    263  5000 ????
    264  5000 ????	       00 00	   _00	      =	$00
    265  5000 ????
    266  5000 ????	       00 07	   _c_World_Limit_Right =	7
    267  5000 ????
    268  5000 ????	       00 00	   _c_World_Limit_Left =	0
    269  5000 ????
    270  5000 ????	       00 07	   _c_World_Limit_Bottom =	7
    271  5000 ????
    272  5000 ????	       00 00	   _c_World_Limit_Top =	0
    273  5000 ????
    274  5000 ????	       00 99	   _c_Edge_Right =	153
    275  5000 ????
    276  5000 ????	       00 02	   _c_Edge_Left =	2
    277  5000 ????
    278  5000 ????	       00 58	   _c_Edge_Bottom =	88
    279  5000 ????
    280  5000 ????	       00 0a	   _c_Edge_Top =	10
    281  5000 ????
    282  5000 ????	       00 95	   _sc3       =	score + 2
    283  5000 ????
    284  5000 ????	       00 94	   _sc2       =	score + 1
    285  5000 ????
    286  5000 ????	       00 93	   _sc1       =	score
    287  5000 ????
    288  5000 ????	       00 ed	   rand16     =	z
    289  5000 ????
    290  5000 ????	       00 ec	   _RoomRand  =	y
    291  5000 ????
    292  5000 ????	       00 86	   _P1_Up_Down =	player1y
    293  5000 ????	       00 81	   _P1_Left_Right =	player1x
    294  5000 ????	       00 e2	   _Bit7_Over_Under =	o
    295  5000 ????
    296  5000 ????	       00 e2	   _Bit6_LR_Joy_Movement =	o
    297  5000 ????
    298  5000 ????	       00 e2	   _Bit5_UD_Joy_Movement =	o
    299  5000 ????
    300  5000 ????	       00 e2	   _Bit4_Next_Room_Right =	o
    301  5000 ????
    302  5000 ????	       00 e2	   _Bit3_Next_Room_Left =	o
    303  5000 ????
    304  5000 ????	       00 e2	   _Bit2_Next_Room_Down =	o
    305  5000 ????
    306  5000 ????	       00 e2	   _Bit1_Next_Room_Up =	o
    307  5000 ????
    308  5000 ????	       00 e2	   _Bit0_Reset_Restrainer =	o
    309  5000 ????
    310  5000 ????	       00 e2	   _BitOp_01  =	o
    311  5000 ????
    312  5000 ????	       00 e1	   _Frame_Counter =	n
    313  5000 ????
    314  5000 ????	       00 e0	   _Master_Counter =	m
    315  5000 ????
    316  5000 ????	       00 df	   _Temp      =	l
    317  5000 ????
    318  5000 ????	       00 de	   _Row7Visited =	k
    319  5000 ????
    320  5000 ????	       00 dd	   _Row6Visited =	j
    321  5000 ????
    322  5000 ????	       00 dc	   _Row5Visited =	i
    323  5000 ????
    324  5000 ????	       00 db	   _Row4Visited =	h
    325  5000 ????
    326  5000 ????	       00 da	   _Row3Visited =	g
    327  5000 ????
    328  5000 ????	       00 d9	   _Row2Visited =	f
    329  5000 ????
    330  5000 ????	       00 d8	   _Row1Visited =	e
    331  5000 ????
    332  5000 ????	       00 d7	   _VisitedRooms =	d
    333  5000 ????
    334  5000 ????	       00 d6	   _TS_Slowdown =	c
    335  5000 ????
    336  5000 ????	       00 d6	   _CurrentScene =	c
    337  5000 ????
    338  5000 ????	       00 d5	   _YRoom     =	b
    339  5000 ????
    340  5000 ????	       00 d4	   _XRoom     =	a
    341  5000 ????
    342  5000 ????	       00 03	   bs_mask    =	3
    343  5000 ????	       00 10	   bankswitch =	16
    344  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    345  5000 ????	       00 01	   player1colors =	1
------- FILE e:\Documents\bB\demos\ex_karl_g_8x8_world_bankswitched.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .
     39  1000							; 
     40  1000
     41  1000				   .
     42  1000							; 
     43  1000
     44  1000				   .
     45  1000							; 
     46  1000
     47  1000				   .
     48  1000							; 
     49  1000
     50  1000				   .
     51  1000							; 
     52  1000
     53  1000				   .
     54  1000							; 
     55  1000
     56  1000				   .
     57  1000							; 
     58  1000
     59  1000				   .
     60  1000							; 
     61  1000
     62  1000				   .
     63  1000							; 
     64  1000
     65  1000				   .
     66  1000							; 
     67  1000
     68  1000				   .
     69  1000							; 
     70  1000
     71  1000				   .
     72  1000							; 
     73  1000
     74  1000				   .
     75  1000							; 
     76  1000
     77  1000				   .
     78  1000							; 
     79  1000
     80  1000				   .
     81  1000							; 
     82  1000
     83  1000				   .
     84  1000							; 
     85  1000
     86  1000				   .
     87  1000							; 
     88  1000
     89  1000				   .
     90  1000							; 
     91  1000
     92  1000				   .
     93  1000							; 
     94  1000
     95  1000				   .
     96  1000							; 
     97  1000
     98  1000				   .
     99  1000							; 
    100  1000
    101  1000				   .
    102  1000							; 
    103  1000
    104  1000				   .
    105  1000							; 
    106  1000
    107  1000				   .
    108  1000							; 
    109  1000
    110  1000				   .
    111  1000							; 
    112  1000
    113  1000				   .
    114  1000							; 
    115  1000
    116  1000				   .
    117  1000							; 
    118  1000
    119  1000				   .
    120  1000							; 
    121  1000
    122  1000				   .
    123  1000							; 
    124  1000
    125  1000				   .
    126  1000							; 
    127  1000
    128  1000				   .
    129  1000							; 
    130  1000
    131  1000				   .
    132  1000							; 
    133  1000
    134  1000				   .
    135  1000							; 
    136  1000
    137  1000				   .
    138  1000							; 
    139  1000
    140  1000				   .
    141  1000							; 
    142  1000
    143  1000				   .
    144  1000							; 
    145  1000
    146  1000				   .
    147  1000							; 
    148  1000
    149  1000				   .
    150  1000							; 
    151  1000
    152  1000				   .
    153  1000							; 
    154  1000
    155  1000				   .
    156  1000							; 
    157  1000
    158  1000				   .
    159  1000							; 
    160  1000
    161  1000				   .
    162  1000							; 
    163  1000
    164  1000				   .
    165  1000							; 
    166  1000
    167  1000				   .
    168  1000							; 
    169  1000
    170  1000				   .
    171  1000							; 
    172  1000
    173  1000				   .L00 		;  set kernel_options player1colors
    174  1000
    175  1000				   .
    176  1000							; 
    177  1000
    178  1000				   .
    179  1000							; 
    180  1000
    181  1000				   .
    182  1000							; 
    183  1000
    184  1000				   .
    185  1000							; 
    186  1000
    187  1000				   .
    188  1000							; 
    189  1000
    190  1000				   .
    191  1000							; 
    192  1000
    193  1000				   .
    194  1000							; 
    195  1000
    196  1000				   .L01 		;  set romsize 16k
    197  1000
    198  1000				   .
    199  1000							; 
    200  1000
    201  1000				   .
    202  1000							; 
    203  1000
    204  1000				   .
    205  1000							; 
    206  1000
    207  1000				   .
    208  1000							; 
    209  1000
    210  1000				   .
    211  1000							; 
    212  1000
    213  1000				   .
    214  1000							; 
    215  1000
    216  1000				   .
    217  1000							; 
    218  1000
    219  1000				   .
    220  1000							; 
    221  1000
    222  1000				   .L02 		;  set optimization inlinerand
    223  1000
    224  1000				   .
    225  1000							; 
    226  1000
    227  1000				   .
    228  1000							; 
    229  1000
    230  1000				   .
    231  1000							; 
    232  1000
    233  1000				   .
    234  1000							; 
    235  1000
    236  1000				   .
    237  1000							; 
    238  1000
    239  1000				   .
    240  1000							; 
    241  1000
    242  1000				   .
    243  1000							; 
    244  1000
    245  1000				   .
    246  1000							; 
    247  1000
    248  1000				   .
    249  1000							; 
    250  1000
    251  1000				   .
    252  1000							; 
    253  1000
    254  1000				   .
    255  1000							; 
    256  1000
    257  1000				   .
    258  1000							; 
    259  1000
    260  1000				   .
    261  1000							; 
    262  1000
    263  1000				   .
    264  1000							; 
    265  1000
    266  1000				   .
    267  1000							; 
    268  1000
    269  1000				   .
    270  1000							; 
    271  1000
    272  1000				   .
    273  1000							; 
    274  1000
    275  1000				   .
    276  1000							; 
    277  1000
    278  1000				   .
    279  1000							; 
    280  1000
    281  1000				   .
    282  1000							; 
    283  1000
    284  1000				   .
    285  1000							; 
    286  1000
    287  1000				   .
    288  1000							; 
    289  1000
    290  1000				   .
    291  1000							; 
    292  1000
    293  1000				   .
    294  1000							; 
    295  1000
    296  1000				   .
    297  1000							; 
    298  1000
    299  1000				   .
    300  1000							; 
    301  1000
    302  1000				   .
    303  1000							; 
    304  1000
    305  1000				   .
    306  1000							; 
    307  1000
    308  1000				   .
    309  1000							; 
    310  1000
    311  1000				   .L03 		;  dim _XRoom	=  a
    312  1000
    313  1000				   .L04 		;  dim _YRoom	=  b
    314  1000
    315  1000				   .
    316  1000							; 
    317  1000
    318  1000				   .
    319  1000							; 
    320  1000
    321  1000				   .
    322  1000							; 
    323  1000
    324  1000				   .
    325  1000							; 
    326  1000
    327  1000				   .L05 		;  dim _CurrentScene  =  c
    328  1000
    329  1000				   .
    330  1000							; 
    331  1000
    332  1000				   .
    333  1000							; 
    334  1000
    335  1000				   .
    336  1000							; 
    337  1000
    338  1000				   .
    339  1000							; 
    340  1000
    341  1000				   .L06 		;  dim _TS_Slowdown  =  c
    342  1000
    343  1000				   .
    344  1000							; 
    345  1000
    346  1000				   .
    347  1000							; 
    348  1000
    349  1000				   .
    350  1000							; 
    351  1000
    352  1000				   .
    353  1000							; 
    354  1000
    355  1000				   .L07 		;  dim _VisitedRooms  =  d
    356  1000
    357  1000				   .L08 		;  dim _Row1Visited  =  e
    358  1000
    359  1000				   .L09 		;  dim _Row2Visited  =  f
    360  1000
    361  1000				   .L010		;  dim _Row3Visited  =  g
    362  1000
    363  1000				   .L011		;  dim _Row4Visited  =  h
    364  1000
    365  1000				   .L012		;  dim _Row5Visited  =  i
    366  1000
    367  1000				   .L013		;  dim _Row6Visited  =  j
    368  1000
    369  1000				   .L014		;  dim _Row7Visited  =  k
    370  1000
    371  1000				   .
    372  1000							; 
    373  1000
    374  1000				   .
    375  1000							; 
    376  1000
    377  1000				   .
    378  1000							; 
    379  1000
    380  1000				   .
    381  1000							; 
    382  1000
    383  1000				   .L015		;  dim _Temp  =  l
    384  1000
    385  1000				   .
    386  1000							; 
    387  1000
    388  1000				   .
    389  1000							; 
    390  1000
    391  1000				   .
    392  1000							; 
    393  1000
    394  1000				   .
    395  1000							; 
    396  1000
    397  1000				   .
    398  1000							; 
    399  1000
    400  1000				   .
    401  1000							; 
    402  1000
    403  1000				   .L016		;  dim _Master_Counter  =  m
    404  1000
    405  1000				   .L017		;  dim _Frame_Counter	=  n
    406  1000
    407  1000				   .
    408  1000							; 
    409  1000
    410  1000				   .
    411  1000							; 
    412  1000
    413  1000				   .
    414  1000							; 
    415  1000
    416  1000				   .
    417  1000							; 
    418  1000
    419  1000				   .
    420  1000							; 
    421  1000
    422  1000				   .L018		;  dim _BitOp_01  =  o
    423  1000
    424  1000				   .L019		;  dim _Bit0_Reset_Restrainer	=  o
    425  1000
    426  1000				   .L020		;  dim _Bit1_Next_Room_Up  =  o
    427  1000
    428  1000				   .L021		;  dim _Bit2_Next_Room_Down  =  o
    429  1000
    430  1000				   .L022		;  dim _Bit3_Next_Room_Left  =  o
    431  1000
    432  1000				   .L023		;  dim _Bit4_Next_Room_Right  =  o
    433  1000
    434  1000				   .L024		;  dim _Bit5_UD_Joy_Movement  =  o
    435  1000
    436  1000				   .L025		;  dim _Bit6_LR_Joy_Movement  =  o
    437  1000
    438  1000				   .L026		;  dim _Bit7_Over_Under  =  o
    439  1000
    440  1000				   .
    441  1000							; 
    442  1000
    443  1000				   .
    444  1000							; 
    445  1000
    446  1000				   .
    447  1000							; 
    448  1000
    449  1000				   .
    450  1000							; 
    451  1000
    452  1000				   .
    453  1000							; 
    454  1000
    455  1000				   .L027		;  dim _P1_Left_Right	=  player1x.p
    456  1000
    457  1000				   .
    458  1000							; 
    459  1000
    460  1000				   .
    461  1000							; 
    462  1000
    463  1000				   .
    464  1000							; 
    465  1000
    466  1000				   .
    467  1000							; 
    468  1000
    469  1000				   .L028		;  dim _P1_Up_Down  =	player1y.q
    470  1000
    471  1000				   .
    472  1000							; 
    473  1000
    474  1000				   .
    475  1000							; 
    476  1000
    477  1000				   .
    478  1000							; 
    479  1000
    480  1000				   .
    481  1000							; 
    482  1000
    483  1000				   .L029		;  dim _RoomRand  =  y
    484  1000
    485  1000				   .
    486  1000							; 
    487  1000
    488  1000				   .
    489  1000							; 
    490  1000
    491  1000				   .
    492  1000							; 
    493  1000
    494  1000				   .
    495  1000							; 
    496  1000
    497  1000				   .L030		;  dim rand16	=  z
    498  1000
    499  1000				   .
    500  1000							; 
    501  1000
    502  1000				   .
    503  1000							; 
    504  1000
    505  1000				   .
    506  1000							; 
    507  1000
    508  1000				   .
    509  1000							; 
    510  1000
    511  1000				   .L031		;  dim _sc1  =  score
    512  1000
    513  1000				   .L032		;  dim _sc2  =  score + 1
    514  1000
    515  1000				   .L033		;  dim _sc3  =  score + 2
    516  1000
    517  1000				   .
    518  1000							; 
    519  1000
    520  1000				   .
    521  1000							; 
    522  1000
    523  1000				   .
    524  1000							; 
    525  1000
    526  1000				   .
    527  1000							; 
    528  1000
    529  1000				   .
    530  1000							; 
    531  1000
    532  1000				   .
    533  1000							; 
    534  1000
    535  1000				   .
    536  1000							; 
    537  1000
    538  1000				   .
    539  1000							; 
    540  1000
    541  1000				   .
    542  1000							; 
    543  1000
    544  1000				   .L034		;  const _c_Edge_Top  =  10
    545  1000
    546  1000				   .L035		;  const _c_Edge_Bottom  =  88
    547  1000
    548  1000				   .L036		;  const _c_Edge_Left	=  2
    549  1000
    550  1000				   .L037		;  const _c_Edge_Right  =  153
    551  1000
    552  1000				   .
    553  1000							; 
    554  1000
    555  1000				   .
    556  1000							; 
    557  1000
    558  1000				   .
    559  1000							; 
    560  1000
    561  1000				   .
    562  1000							; 
    563  1000
    564  1000				   .
    565  1000							; 
    566  1000
    567  1000				   .
    568  1000							; 
    569  1000
    570  1000				   .
    571  1000							; 
    572  1000
    573  1000				   .
    574  1000							; 
    575  1000
    576  1000				   .
    577  1000							; 
    578  1000
    579  1000				   .L038		;  const _c_World_Limit_Top  =  0
    580  1000
    581  1000				   .L039		;  const _c_World_Limit_Bottom  =  7
    582  1000
    583  1000				   .L040		;  const _c_World_Limit_Left  =  0
    584  1000
    585  1000				   .L041		;  const _c_World_Limit_Right	=  7
    586  1000
    587  1000				   .
    588  1000							; 
    589  1000
    590  1000				   .
    591  1000							; 
    592  1000
    593  1000				   .
    594  1000							; 
    595  1000
    596  1000				   .
    597  1000							; 
    598  1000
    599  1000				   .
    600  1000							; 
    601  1000
    602  1000				   .
    603  1000							; 
    604  1000
    605  1000				   .
    606  1000							; 
    607  1000
    608  1000				   .
    609  1000							; 
    610  1000
    611  1000				   .
    612  1000							; 
    613  1000
    614  1000				   .
    615  1000							; 
    616  1000
    617  1000				   .
    618  1000							; 
    619  1000
    620  1000				   .
    621  1000							; 
    622  1000
    623  1000				   .L042		;  const _00  =  $00
    624  1000
    625  1000				   .L043		;  const _02  =  $02
    626  1000
    627  1000				   .L044		;  const _04  =  $04
    628  1000
    629  1000				   .L045		;  const _06  =  $06
    630  1000
    631  1000				   .L046		;  const _08  =  $08
    632  1000
    633  1000				   .L047		;  const _0A  =  $0A
    634  1000
    635  1000				   .L048		;  const _0C  =  $0C
    636  1000
    637  1000				   .L049		;  const _0E  =  $0E
    638  1000
    639  1000				   .L050		;  const _10  =  $10
    640  1000
    641  1000				   .L051		;  const _12  =  $12
    642  1000
    643  1000				   .L052		;  const _14  =  $14
    644  1000
    645  1000				   .L053		;  const _16  =  $16
    646  1000
    647  1000				   .L054		;  const _18  =  $18
    648  1000
    649  1000				   .L055		;  const _1A  =  $1A
    650  1000
    651  1000				   .L056		;  const _1C  =  $1C
    652  1000
    653  1000				   .L057		;  const _1E  =  $1E
    654  1000
    655  1000				   .L058		;  const _20  =  $20
    656  1000
    657  1000				   .L059		;  const _22  =  $22
    658  1000
    659  1000				   .L060		;  const _24  =  $24
    660  1000
    661  1000				   .L061		;  const _26  =  $26
    662  1000
    663  1000				   .L062		;  const _28  =  $28
    664  1000
    665  1000				   .L063		;  const _2A  =  $2A
    666  1000
    667  1000				   .L064		;  const _2C  =  $2C
    668  1000
    669  1000				   .L065		;  const _2E  =  $2E
    670  1000
    671  1000				   .L066		;  const _30  =  $30
    672  1000
    673  1000				   .L067		;  const _32  =  $32
    674  1000
    675  1000				   .L068		;  const _34  =  $34
    676  1000
    677  1000				   .L069		;  const _36  =  $36
    678  1000
    679  1000				   .L070		;  const _38  =  $38
    680  1000
    681  1000				   .L071		;  const _3A  =  $3A
    682  1000
    683  1000				   .L072		;  const _3C  =  $3C
    684  1000
    685  1000				   .L073		;  const _3E  =  $3E
    686  1000
    687  1000				   .L074		;  const _40  =  $40
    688  1000
    689  1000				   .L075		;  const _42  =  $42
    690  1000
    691  1000				   .L076		;  const _44  =  $44
    692  1000
    693  1000				   .L077		;  const _46  =  $46
    694  1000
    695  1000				   .L078		;  const _48  =  $48
    696  1000
    697  1000				   .L079		;  const _4A  =  $4A
    698  1000
    699  1000				   .L080		;  const _4C  =  $4C
    700  1000
    701  1000				   .L081		;  const _4E  =  $4E
    702  1000
    703  1000				   .L082		;  const _50  =  $50
    704  1000
    705  1000				   .L083		;  const _52  =  $52
    706  1000
    707  1000				   .L084		;  const _54  =  $54
    708  1000
    709  1000				   .L085		;  const _56  =  $56
    710  1000
    711  1000				   .L086		;  const _58  =  $58
    712  1000
    713  1000				   .L087		;  const _5A  =  $5A
    714  1000
    715  1000				   .L088		;  const _5C  =  $5C
    716  1000
    717  1000				   .L089		;  const _5E  =  $5E
    718  1000
    719  1000				   .L090		;  const _60  =  $60
    720  1000
    721  1000				   .L091		;  const _62  =  $62
    722  1000
    723  1000				   .L092		;  const _64  =  $64
    724  1000
    725  1000				   .L093		;  const _66  =  $66
    726  1000
    727  1000				   .L094		;  const _68  =  $68
    728  1000
    729  1000				   .L095		;  const _6A  =  $6A
    730  1000
    731  1000				   .L096		;  const _6C  =  $6C
    732  1000
    733  1000				   .L097		;  const _6E  =  $6E
    734  1000
    735  1000				   .L098		;  const _70  =  $70
    736  1000
    737  1000				   .L099		;  const _72  =  $72
    738  1000
    739  1000				   .L0100		;  const _74  =  $74
    740  1000
    741  1000				   .L0101		;  const _76  =  $76
    742  1000
    743  1000				   .L0102		;  const _78  =  $78
    744  1000
    745  1000				   .L0103		;  const _7A  =  $7A
    746  1000
    747  1000				   .L0104		;  const _7C  =  $7C
    748  1000
    749  1000				   .L0105		;  const _7E  =  $7E
    750  1000
    751  1000				   .L0106		;  const _80  =  $80
    752  1000
    753  1000				   .L0107		;  const _82  =  $82
    754  1000
    755  1000				   .L0108		;  const _84  =  $84
    756  1000
    757  1000				   .L0109		;  const _86  =  $86
    758  1000
    759  1000				   .L0110		;  const _88  =  $88
    760  1000
    761  1000				   .L0111		;  const _8A  =  $8A
    762  1000
    763  1000				   .L0112		;  const _8C  =  $8C
    764  1000
    765  1000				   .L0113		;  const _8E  =  $8E
    766  1000
    767  1000				   .L0114		;  const _90  =  $90
    768  1000
    769  1000				   .L0115		;  const _92  =  $92
    770  1000
    771  1000				   .L0116		;  const _94  =  $94
    772  1000
    773  1000				   .L0117		;  const _96  =  $96
    774  1000
    775  1000				   .L0118		;  const _98  =  $98
    776  1000
    777  1000				   .L0119		;  const _9A  =  $9A
    778  1000
    779  1000				   .L0120		;  const _9C  =  $9C
    780  1000
    781  1000				   .L0121		;  const _9E  =  $9E
    782  1000
    783  1000				   .L0122		;  const _A0  =  $A0
    784  1000
    785  1000				   .L0123		;  const _A2  =  $A2
    786  1000
    787  1000				   .L0124		;  const _A4  =  $A4
    788  1000
    789  1000				   .L0125		;  const _A6  =  $A6
    790  1000
    791  1000				   .L0126		;  const _A8  =  $A8
    792  1000
    793  1000				   .L0127		;  const _AA  =  $AA
    794  1000
    795  1000				   .L0128		;  const _AC  =  $AC
    796  1000
    797  1000				   .L0129		;  const _AE  =  $AE
    798  1000
    799  1000				   .L0130		;  const _B0  =  $B0
    800  1000
    801  1000				   .L0131		;  const _B2  =  $B2
    802  1000
    803  1000				   .L0132		;  const _B4  =  $B4
    804  1000
    805  1000				   .L0133		;  const _B6  =  $B6
    806  1000
    807  1000				   .L0134		;  const _B8  =  $B8
    808  1000
    809  1000				   .L0135		;  const _BA  =  $BA
    810  1000
    811  1000				   .L0136		;  const _BC  =  $BC
    812  1000
    813  1000				   .L0137		;  const _BE  =  $BE
    814  1000
    815  1000				   .L0138		;  const _C0  =  $C0
    816  1000
    817  1000				   .L0139		;  const _C2  =  $C2
    818  1000
    819  1000				   .L0140		;  const _C4  =  $C4
    820  1000
    821  1000				   .L0141		;  const _C6  =  $C6
    822  1000
    823  1000				   .L0142		;  const _C8  =  $C8
    824  1000
    825  1000				   .L0143		;  const _CA  =  $CA
    826  1000
    827  1000				   .L0144		;  const _CC  =  $CC
    828  1000
    829  1000				   .L0145		;  const _CE  =  $CE
    830  1000
    831  1000				   .L0146		;  const _D0  =  $D0
    832  1000
    833  1000				   .L0147		;  const _D2  =  $D2
    834  1000
    835  1000				   .L0148		;  const _D4  =  $D4
    836  1000
    837  1000				   .L0149		;  const _D6  =  $D6
    838  1000
    839  1000				   .L0150		;  const _D8  =  $D8
    840  1000
    841  1000				   .L0151		;  const _DA  =  $DA
    842  1000
    843  1000				   .L0152		;  const _DC  =  $DC
    844  1000
    845  1000				   .L0153		;  const _DE  =  $DE
    846  1000
    847  1000				   .L0154		;  const _E0  =  $E0
    848  1000
    849  1000				   .L0155		;  const _E2  =  $E2
    850  1000
    851  1000				   .L0156		;  const _E4  =  $E4
    852  1000
    853  1000				   .L0157		;  const _E6  =  $E6
    854  1000
    855  1000				   .L0158		;  const _E8  =  $E8
    856  1000
    857  1000				   .L0159		;  const _EA  =  $EA
    858  1000
    859  1000				   .L0160		;  const _EC  =  $EC
    860  1000
    861  1000				   .L0161		;  const _EE  =  $EE
    862  1000
    863  1000				   .L0162		;  const _F0  =  $F0
    864  1000
    865  1000				   .L0163		;  const _F2  =  $F2
    866  1000
    867  1000				   .L0164		;  const _F4  =  $F4
    868  1000
    869  1000				   .L0165		;  const _F6  =  $F6
    870  1000
    871  1000				   .L0166		;  const _F8  =  $F8
    872  1000
    873  1000				   .L0167		;  const _FA  =  $FA
    874  1000
    875  1000				   .L0168		;  const _FC  =  $FC
    876  1000
    877  1000				   .L0169		;  const _FE  =  $FE
    878  1000
    879  1000				   .
    880  1000							; 
    881  1000
    882  1000				   .
    883  1000							; 
    884  1000
    885  1000				   .
    886  1000							; 
    887  1000
    888  1000				   .
    889  1000							; 
    890  1000
    891  1000				   .
    892  1000							; 
    893  1000
    894  1000				   .
    895  1000							; 
    896  1000
    897  1000				   .
    898  1000							; 
    899  1000
    900  1000				   .
    901  1000							; 
    902  1000
    903  1000				   .
    904  1000							; 
    905  1000
    906  1000				   .
    907  1000							; 
    908  1000
    909  1000				   .
    910  1000							; 
    911  1000
    912  1000				   .__Start_Restart
    913  1000							; __Start_Restart
    914  1000
    915  1000				   .
    916  1000							; 
    917  1000
    918  1000				   .
    919  1000							; 
    920  1000
    921  1000				   .
    922  1000							; 
    923  1000
    924  1000				   .
    925  1000							; 
    926  1000
    927  1000				   .
    928  1000							; 
    929  1000
    930  1000				   .
    931  1000							; 
    932  1000
    933  1000				   .L0170		;  AUDV0  =  0  :  AUDV1  =  0
    934  1000
    935  1000		       a9 00		      LDA	#0
    936  1002		       85 19		      STA	AUDV0
    937  1004		       85 1a		      STA	AUDV1
    938  1006				   .
    939  1006							; 
    940  1006
    941  1006				   .
    942  1006							; 
    943  1006
    944  1006				   .
    945  1006							; 
    946  1006
    947  1006				   .
    948  1006							; 
    949  1006
    950  1006				   .
    951  1006							; 
    952  1006
    953  1006				   .
    954  1006							; 
    955  1006
    956  1006				   .L0171		;  player1y  =  150  :  player0y  =  150
    957  1006
    958  1006		       a9 96		      LDA	#150
    959  1008		       85 86		      STA	player1y
    960  100a		       85 85		      STA	player0y
    961  100c				   .
    962  100c							; 
    963  100c
    964  100c				   .
    965  100c							; 
    966  100c
    967  100c				   .
    968  100c							; 
    969  100c
    970  100c				   .
    971  100c							; 
    972  100c
    973  100c				   .
    974  100c							; 
    975  100c
    976  100c				   .
    977  100c							; 
    978  100c
    979  100c				   .L0172		;  lifecolor  =  _8A  :  lives  =  0
    980  100c
    981  100c		       a9 8a		      LDA	#_8A
    982  100e		       85 f4		      STA	lifecolor
    983  1010		       a9 00		      LDA	#0
    984  1012		       85 f3		      STA	lives
    985  1014				   .
    986  1014							; 
    987  1014
    988  1014				   .L0173		;  lives:
    989  1014
    990  1014		       a9 2e		      LDA	#<lives__L0173
    991  1016		       85 f2		      STA	lifepointer
    992  1018		       a5 f3		      LDA	lifepointer+1
    993  101a		       29 e0		      AND	#$E0
    994  101c		       09 15		      ORA	#(>lives__L0173)&($1F)
    995  101e		       85 f3		      STA	lifepointer+1
    996  1020				   .
    997  1020							; 
    998  1020
    999  1020				   .
   1000  1020							; 
   1001  1020
   1002  1020				   .
   1003  1020							; 
   1004  1020
   1005  1020				   .
   1006  1020							; 
   1007  1020
   1008  1020				   .
   1009  1020							; 
   1010  1020
   1011  1020				   .
   1012  1020							; 
   1013  1020
   1014  1020				   .L0174		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1015  1020
   1016  1020		       a9 00		      LDA	#0
   1017  1022		       85 d4		      STA	a
   1018  1024		       85 d5		      STA	b
   1019  1026		       85 d6		      STA	c
   1020  1028		       85 d7		      STA	d
   1021  102a		       85 d8		      STA	e
   1022  102c		       85 d9		      STA	f
   1023  102e		       85 da		      STA	g
   1024  1030		       85 db		      STA	h
   1025  1032		       85 dc		      STA	i
   1026  1034				   .L0175		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1027  1034
   1028  1034		       a9 00		      LDA	#0
   1029  1036		       85 dd		      STA	j
   1030  1038		       85 de		      STA	k
   1031  103a		       85 df		      STA	l
   1032  103c		       85 e0		      STA	m
   1033  103e		       85 e1		      STA	n
   1034  1040		       85 e2		      STA	o
   1035  1042		       85 e3		      STA	p
   1036  1044		       85 e4		      STA	q
   1037  1046		       85 e5		      STA	r
   1038  1048				   .L0176		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0
   1039  1048
   1040  1048		       a9 00		      LDA	#0
   1041  104a		       85 e6		      STA	s
   1042  104c		       85 e7		      STA	t
   1043  104e		       85 e8		      STA	u
   1044  1050		       85 e9		      STA	v
   1045  1052		       85 ea		      STA	w
   1046  1054		       85 eb		      STA	x
   1047  1056				   .
   1048  1056							; 
   1049  1056
   1050  1056				   .
   1051  1056							; 
   1052  1056
   1053  1056				   .
   1054  1056							; 
   1055  1056
   1056  1056				   .
   1057  1056							; 
   1058  1056
   1059  1056				   .
   1060  1056							; 
   1061  1056
   1062  1056				   .
   1063  1056							; 
   1064  1056
   1065  1056				   .
   1066  1056							; 
   1067  1056
   1068  1056				   .
   1069  1056							; 
   1070  1056
   1071  1056				   .
   1072  1056							; 
   1073  1056
   1074  1056				   .
   1075  1056							; 
   1076  1056
   1077  1056				   .
   1078  1056							; 
   1079  1056
   1080  1056				   .__Title_Screen_Setup
   1081  1056							; __Title_Screen_Setup
   1082  1056
   1083  1056				   .
   1084  1056							; 
   1085  1056
   1086  1056				   .
   1087  1056							; 
   1088  1056
   1089  1056				   .
   1090  1056							; 
   1091  1056
   1092  1056				   .
   1093  1056							; 
   1094  1056
   1095  1056				   .
   1096  1056							; 
   1097  1056
   1098  1056				   .
   1099  1056							; 
   1100  1056
   1101  1056				   .L0177		;  scorecolor	=  _1C
   1102  1056
   1103  1056		       a9 1c		      LDA	#_1C
   1104  1058		       85 a3		      STA	scorecolor
   1105  105a				   .
   1106  105a							; 
   1107  105a
   1108  105a				   .
   1109  105a							; 
   1110  105a
   1111  105a				   .
   1112  105a							; 
   1113  105a
   1114  105a				   .
   1115  105a							; 
   1116  105a
   1117  105a				   .
   1118  105a							; 
   1119  105a
   1120  105a				   .
   1121  105a							; 
   1122  105a
   1123  105a				   .L0178		;  score  =  0  :  _RoomRand  =  0
   1124  105a
   1125  105a		       a9 00		      LDA	#$00
   1126  105c		       85 95		      STA	score+2
   1127  105e		       a9 00		      LDA	#$00
   1128  1060		       85 94		      STA	score+1
   1129  1062		       a9 00		      LDA	#$00
   1130  1064		       85 93		      STA	score
   1131  1066		       a9 00		      LDA	#0
   1132  1068		       85 ec		      STA	_RoomRand
   1133  106a				   .
   1134  106a							; 
   1135  106a
   1136  106a				   .
   1137  106a							; 
   1138  106a
   1139  106a				   .
   1140  106a							; 
   1141  106a
   1142  106a				   .
   1143  106a							; 
   1144  106a
   1145  106a				   .
   1146  106a							; 
   1147  106a
   1148  106a				   .
   1149  106a							; 
   1150  106a
   1151  106a				   .L0179		;  COLUBK  =  _00
   1152  106a
   1153  106a		       a9 00		      LDA	#_00
   1154  106c		       85 09		      STA	COLUBK
   1155  106e				   .
   1156  106e							; 
   1157  106e
   1158  106e				   .
   1159  106e							; 
   1160  106e
   1161  106e				   .
   1162  106e							; 
   1163  106e
   1164  106e				   .
   1165  106e							; 
   1166  106e
   1167  106e				   .
   1168  106e							; 
   1169  106e
   1170  106e				   .
   1171  106e							; 
   1172  106e
   1173  106e				   .L0180		;  COLUPF  =  _08
   1174  106e
   1175  106e		       a9 08		      LDA	#_08
   1176  1070		       85 08		      STA	COLUPF
   1177  1072				   .
   1178  1072							; 
   1179  1072
   1180  1072				   .
   1181  1072							; 
   1182  1072
   1183  1072				   .
   1184  1072							; 
   1185  1072
   1186  1072				   .
   1187  1072							; 
   1188  1072
   1189  1072				   .
   1190  1072							; 
   1191  1072
   1192  1072				   .
   1193  1072							; 
   1194  1072
   1195  1072				   .
   1196  1072							; 
   1197  1072
   1198  1072				   .
   1199  1072							; 
   1200  1072
   1201  1072				   .
   1202  1072							; 
   1203  1072
   1204  1072				   .
   1205  1072							; 
   1206  1072
   1207  1072				   .
   1208  1072							; 
   1209  1072
   1210  1072				   .L0181		;  _Bit0_Reset_Restrainer{0}  =  1
   1211  1072
   1212  1072		       a5 e2		      LDA	_Bit0_Reset_Restrainer
   1213  1074		       09 01		      ORA	#1
   1214  1076		       85 e2		      STA	_Bit0_Reset_Restrainer
   1215  1078				   .
   1216  1078							; 
   1217  1078
   1218  1078				   .
   1219  1078							; 
   1220  1078
   1221  1078				   .
   1222  1078							; 
   1223  1078
   1224  1078				   .
   1225  1078							; 
   1226  1078
   1227  1078				   .
   1228  1078							; 
   1229  1078
   1230  1078				   .
   1231  1078							; 
   1232  1078
   1233  1078				   .L0182		;  playfield:
   1234  1078
   1235  1078				  -	      ifconst	pfres
   1236  1078				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1237  1078					      else
   1238  1078		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1239  107a					      endif
   1240  107a		       4c a9 90 	      jmp	pflabel0
   1241  107d				   PF_data0
   1242  107d		       7d 37		      .byte.b	%01111101, %00110111
   1243  107f					      if	(pfwidth>2)
   1244  107f		       7b 7b		      .byte.b	%01111011, %01111011
   1245  1081					      endif
   1246  1081		       61 31		      .byte.b	%01100001, %00110001
   1247  1083					      if	(pfwidth>2)
   1248  1083		       63 30		      .byte.b	%01100011, %00110000
   1249  1085					      endif
   1250  1085		       7d 37		      .byte.b	%01111101, %00110111
   1251  1087					      if	(pfwidth>2)
   1252  1087		       7b 30		      .byte.b	%01111011, %00110000
   1253  1089					      endif
   1254  1089		       0d 31		      .byte.b	%00001101, %00110001
   1255  108b					      if	(pfwidth>2)
   1256  108b		       63 30		      .byte.b	%01100011, %00110000
   1257  108d					      endif
   1258  108d		       7d f7		      .byte.b	%01111101, %11110111
   1259  108f					      if	(pfwidth>2)
   1260  108f		       7b 33		      .byte.b	%01111011, %00110011
   1261  1091					      endif
   1262  1091		       00 00		      .byte.b	%00000000, %00000000
   1263  1093					      if	(pfwidth>2)
   1264  1093		       00 00		      .byte.b	%00000000, %00000000
   1265  1095					      endif
   1266  1095		       fb 7b		      .byte.b	%11111011, %01111011
   1267  1097					      if	(pfwidth>2)
   1268  1097		       f8 36		      .byte.b	%11111000, %00110110
   1269  1099					      endif
   1270  1099		       c3 18		      .byte.b	%11000011, %00011000
   1271  109b					      if	(pfwidth>2)
   1272  109b		       cc 7f		      .byte.b	%11001100, %01111111
   1273  109d					      endif
   1274  109d		       fb 7b		      .byte.b	%11111011, %01111011
   1275  109f					      if	(pfwidth>2)
   1276  109f		       cc 36		      .byte.b	%11001100, %00110110
   1277  10a1					      endif
   1278  10a1		       1b 18		      .byte.b	%00011011, %00011000
   1279  10a3					      if	(pfwidth>2)
   1280  10a3		       cc 7f		      .byte.b	%11001100, %01111111
   1281  10a5					      endif
   1282  10a5		       fb 7b		      .byte.b	%11111011, %01111011
   1283  10a7					      if	(pfwidth>2)
   1284  10a7		       f8 36		      .byte.b	%11111000, %00110110
   1285  10a9					      endif
   1286  10a9				   pflabel0
   1287  10a9		       bd 7d 90 	      lda	PF_data0,x
   1288  10ac		       95 a4		      sta	playfield,x
   1289  10ae		       ca		      dex
   1290  10af		       10 f8		      bpl	pflabel0
   1291  10b1				   .
   1292  10b1							; 
   1293  10b1
   1294  10b1				   .
   1295  10b1							; 
   1296  10b1
   1297  10b1				   .
   1298  10b1							; 
   1299  10b1
   1300  10b1				   .
   1301  10b1							; 
   1302  10b1
   1303  10b1				   .
   1304  10b1							; 
   1305  10b1
   1306  10b1				   .
   1307  10b1							; 
   1308  10b1
   1309  10b1				   .
   1310  10b1							; 
   1311  10b1
   1312  10b1				   .
   1313  10b1							; 
   1314  10b1
   1315  10b1				   .
   1316  10b1							; 
   1317  10b1
   1318  10b1				   .
   1319  10b1							; 
   1320  10b1
   1321  10b1				   .
   1322  10b1							; 
   1323  10b1
   1324  10b1				   .__Title_Screen_Loop
   1325  10b1							; __Title_Screen_Loop
   1326  10b1
   1327  10b1				   .
   1328  10b1							; 
   1329  10b1
   1330  10b1				   .
   1331  10b1							; 
   1332  10b1
   1333  10b1				   .
   1334  10b1							; 
   1335  10b1
   1336  10b1				   .
   1337  10b1							; 
   1338  10b1
   1339  10b1				   .
   1340  10b1							; 
   1341  10b1
   1342  10b1				   .
   1343  10b1							; 
   1344  10b1
   1345  10b1				   .
   1346  10b1							; 
   1347  10b1
   1348  10b1				   .
   1349  10b1							; 
   1350  10b1
   1351  10b1				   .
   1352  10b1							; 
   1353  10b1
   1354  10b1				   .
   1355  10b1							; 
   1356  10b1
   1357  10b1				   .L0183		;  _Master_Counter  =	_Master_Counter  +  1
   1358  10b1
   1359  10b1		       e6 e0		      INC	_Master_Counter
   1360  10b3				   .
   1361  10b3							; 
   1362  10b3
   1363  10b3				   .
   1364  10b3							; 
   1365  10b3
   1366  10b3				   .
   1367  10b3							; 
   1368  10b3
   1369  10b3				   .
   1370  10b3							; 
   1371  10b3
   1372  10b3				   .L0184		;  if _Master_Counter	<  _TS_Slowdown then goto __Skip_TS_Counter
   1373  10b3
   1374  10b3		       a5 e0		      LDA	_Master_Counter
   1375  10b5		       c5 d6		      CMP	_TS_Slowdown
   1376  10b7		       b0 03		      BCS	.skipL0184
   1377  10b9				   .condpart0
   1378  10b9		       4c 5c 91 	      jmp	.__Skip_TS_Counter
   1379  10bc
   1380  10bc				   .skipL0184
   1381  10bc				   .
   1382  10bc							; 
   1383  10bc
   1384  10bc				   .
   1385  10bc							; 
   1386  10bc
   1387  10bc				   .
   1388  10bc							; 
   1389  10bc
   1390  10bc				   .
   1391  10bc							; 
   1392  10bc
   1393  10bc				   .L0185		;  if joy0right  &&  _RoomRand  <  255 then score  =  score  +  1  :  _RoomRand  =  _RoomRand	+  1  :  _TS_Slowdown  =  11
   1394  10bc
   1395  10bc		       2c 80 02 	      bit	SWCHA
   1396  10bf		       30 21		      BMI	.skipL0185
   1397  10c1				   .condpart1
   1398  10c1		       a5 ec		      LDA	_RoomRand
   1399  10c3		       c9 ff		      CMP	#255
   1400  10c5		       b0 1b		      BCS	.skip1then
   1401  10c7				   .condpart2
   1402  10c7		       f8		      SED
   1403  10c8		       18		      CLC
   1404  10c9		       a5 95		      LDA	score+2
   1405  10cb		       69 01		      ADC	#$01
   1406  10cd		       85 95		      STA	score+2
   1407  10cf		       a5 94		      LDA	score+1
   1408  10d1		       69 00		      ADC	#$00
   1409  10d3		       85 94		      STA	score+1
   1410  10d5		       a5 93		      LDA	score
   1411  10d7		       69 00		      ADC	#$00
   1412  10d9		       85 93		      STA	score
   1413  10db		       d8		      CLD
   1414  10dc		       e6 ec		      INC	_RoomRand
   1415  10de		       a9 0b		      LDA	#11
   1416  10e0		       85 d6		      STA	_TS_Slowdown
   1417  10e2				   .skip1then
   1418  10e2				   .skipL0185
   1419  10e2				   .L0186		;  if joy0left  &&  _RoomRand	>  0 then score  =  score  -  1  :  _RoomRand  =  _RoomRand  -	1  :  _TS_Slowdown  =  11
   1420  10e2
   1421  10e2		       2c 80 02 	      bit	SWCHA
   1422  10e5		       70 21		      BVS	.skipL0186
   1423  10e7				   .condpart3
   1424  10e7		       a9 00		      LDA	#0
   1425  10e9		       c5 ec		      CMP	_RoomRand
   1426  10eb		       b0 1b		      BCS	.skip3then
   1427  10ed				   .condpart4
   1428  10ed		       f8		      SED
   1429  10ee		       38		      SEC
   1430  10ef		       a5 95		      LDA	score+2
   1431  10f1		       e9 01		      SBC	#$01
   1432  10f3		       85 95		      STA	score+2
   1433  10f5		       a5 94		      LDA	score+1
   1434  10f7		       e9 00		      SBC	#$00
   1435  10f9		       85 94		      STA	score+1
   1436  10fb		       a5 93		      LDA	score
   1437  10fd		       e9 00		      SBC	#$00
   1438  10ff		       85 93		      STA	score
   1439  1101		       d8		      CLD
   1440  1102		       c6 ec		      DEC	_RoomRand
   1441  1104		       a9 0b		      LDA	#11
   1442  1106		       85 d6		      STA	_TS_Slowdown
   1443  1108				   .skip3then
   1444  1108				   .skipL0186
   1445  1108				   .L0187		;  if joy0up  &&  _RoomRand  <  255 then score  =  score  +  1  :  _RoomRand  =  _RoomRand  +	1  :  _TS_Slowdown  =  2
   1446  1108
   1447  1108		       a9 10		      lda	#$10
   1448  110a		       2c 80 02 	      bit	SWCHA
   1449  110d		       d0 21		      BNE	.skipL0187
   1450  110f				   .condpart5
   1451  110f		       a5 ec		      LDA	_RoomRand
   1452  1111		       c9 ff		      CMP	#255
   1453  1113		       b0 1b		      BCS	.skip5then
   1454  1115				   .condpart6
   1455  1115		       f8		      SED
   1456  1116		       18		      CLC
   1457  1117		       a5 95		      LDA	score+2
   1458  1119		       69 01		      ADC	#$01
   1459  111b		       85 95		      STA	score+2
   1460  111d		       a5 94		      LDA	score+1
   1461  111f		       69 00		      ADC	#$00
   1462  1121		       85 94		      STA	score+1
   1463  1123		       a5 93		      LDA	score
   1464  1125		       69 00		      ADC	#$00
   1465  1127		       85 93		      STA	score
   1466  1129		       d8		      CLD
   1467  112a		       e6 ec		      INC	_RoomRand
   1468  112c		       a9 02		      LDA	#2
   1469  112e		       85 d6		      STA	_TS_Slowdown
   1470  1130				   .skip5then
   1471  1130				   .skipL0187
   1472  1130				   .L0188		;  if joy0down  &&  _RoomRand	>  0 then score  =  score  -  1  :  _RoomRand  =  _RoomRand  -	1  :  _TS_Slowdown  =  2
   1473  1130
   1474  1130		       a9 20		      lda	#$20
   1475  1132		       2c 80 02 	      bit	SWCHA
   1476  1135		       d0 21		      BNE	.skipL0188
   1477  1137				   .condpart7
   1478  1137		       a9 00		      LDA	#0
   1479  1139		       c5 ec		      CMP	_RoomRand
   1480  113b		       b0 1b		      BCS	.skip7then
   1481  113d				   .condpart8
   1482  113d		       f8		      SED
   1483  113e		       38		      SEC
   1484  113f		       a5 95		      LDA	score+2
   1485  1141		       e9 01		      SBC	#$01
   1486  1143		       85 95		      STA	score+2
   1487  1145		       a5 94		      LDA	score+1
   1488  1147		       e9 00		      SBC	#$00
   1489  1149		       85 94		      STA	score+1
   1490  114b		       a5 93		      LDA	score
   1491  114d		       e9 00		      SBC	#$00
   1492  114f		       85 93		      STA	score
   1493  1151		       d8		      CLD
   1494  1152		       c6 ec		      DEC	_RoomRand
   1495  1154		       a9 02		      LDA	#2
   1496  1156		       85 d6		      STA	_TS_Slowdown
   1497  1158				   .skip7then
   1498  1158				   .skipL0188
   1499  1158				   .
   1500  1158							; 
   1501  1158
   1502  1158				   .
   1503  1158							; 
   1504  1158
   1505  1158				   .
   1506  1158							; 
   1507  1158
   1508  1158				   .
   1509  1158							; 
   1510  1158
   1511  1158				   .L0189		;  _Master_Counter  =	0
   1512  1158
   1513  1158		       a9 00		      LDA	#0
   1514  115a		       85 e0		      STA	_Master_Counter
   1515  115c				   .
   1516  115c							; 
   1517  115c
   1518  115c				   .__Skip_TS_Counter
   1519  115c							; __Skip_TS_Counter
   1520  115c
   1521  115c				   .
   1522  115c							; 
   1523  115c
   1524  115c				   .
   1525  115c							; 
   1526  115c
   1527  115c				   .
   1528  115c							; 
   1529  115c
   1530  115c				   .
   1531  115c							; 
   1532  115c
   1533  115c				   .
   1534  115c							; 
   1535  115c
   1536  115c				   .
   1537  115c							; 
   1538  115c
   1539  115c				   .
   1540  115c							; 
   1541  115c
   1542  115c				   .L0190		;  drawscreen
   1543  115c
   1544  115c		       85 ee		      sta	temp7
   1545  115e		       a9 91		      lda	#>(ret_point1-1)
   1546  1160		       48		      pha
   1547  1161		       a9 73		      lda	#<(ret_point1-1)
   1548  1163		       48		      pha
   1549  1164		       a9 f4		      lda	#>(drawscreen-1)
   1550  1166		       48		      pha
   1551  1167		       a9 39		      lda	#<(drawscreen-1)
   1552  1169		       48		      pha
   1553  116a		       a5 ee		      lda	temp7
   1554  116c		       48		      pha
   1555  116d		       8a		      txa
   1556  116e		       48		      pha
   1557  116f		       a2 04		      ldx	#4
   1558  1171		       4c eb ff 	      jmp	BS_jsr
   1559  1174				   ret_point1
   1560  1174				   .
   1561  1174							; 
   1562  1174
   1563  1174				   .
   1564  1174							; 
   1565  1174
   1566  1174				   .
   1567  1174							; 
   1568  1174
   1569  1174				   .
   1570  1174							; 
   1571  1174
   1572  1174				   .
   1573  1174							; 
   1574  1174
   1575  1174				   .
   1576  1174							; 
   1577  1174
   1578  1174				   .
   1579  1174							; 
   1580  1174
   1581  1174				   .
   1582  1174							; 
   1583  1174
   1584  1174				   .
   1585  1174							; 
   1586  1174
   1587  1174				   .
   1588  1174							; 
   1589  1174
   1590  1174				   .
   1591  1174							; 
   1592  1174
   1593  1174				   .
   1594  1174							; 
   1595  1174
   1596  1174				   .
   1597  1174							; 
   1598  1174
   1599  1174				   .
   1600  1174							; 
   1601  1174
   1602  1174				   .L0191		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
   1603  1174
   1604  1174		       a9 01		      lda	#1
   1605  1176		       2c 82 02 	      bit	SWCHB
   1606  1179		       f0 0d		      BEQ	.skipL0191
   1607  117b				   .condpart9
   1608  117b		       24 0c		      bit	INPT4
   1609  117d		       10 09		      BPL	.skip9then
   1610  117f				   .condpart10
   1611  117f		       a5 e2		      LDA	_Bit0_Reset_Restrainer
   1612  1181		       29 fe		      AND	#254
   1613  1183		       85 e2		      STA	_Bit0_Reset_Restrainer
   1614  1185		       4c b1 90 	      jmp	.__Title_Screen_Loop
   1615  1188
   1616  1188				   .skip9then
   1617  1188				   .skipL0191
   1618  1188				   .
   1619  1188							; 
   1620  1188
   1621  1188				   .
   1622  1188							; 
   1623  1188
   1624  1188				   .
   1625  1188							; 
   1626  1188
   1627  1188				   .
   1628  1188							; 
   1629  1188
   1630  1188				   .
   1631  1188							; 
   1632  1188
   1633  1188				   .L0192		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   1634  1188
   1635  1188		       a5 e2		      LDA	_Bit0_Reset_Restrainer
   1636  118a		       4a		      LSR
   1637  118b		       90 03		      BCC	.skipL0192
   1638  118d				   .condpart11
   1639  118d		       4c b1 90 	      jmp	.__Title_Screen_Loop
   1640  1190
   1641  1190				   .skipL0192
   1642  1190				   .
   1643  1190							; 
   1644  1190
   1645  1190				   .
   1646  1190							; 
   1647  1190
   1648  1190				   .
   1649  1190							; 
   1650  1190
   1651  1190				   .
   1652  1190							; 
   1653  1190
   1654  1190				   .L0193		;  goto __Main_Loop_Setup
   1655  1190
   1656  1190		       4c 93 91 	      jmp	.__Main_Loop_Setup
   1657  1193
   1658  1193				   .
   1659  1193							; 
   1660  1193
   1661  1193				   .
   1662  1193							; 
   1663  1193
   1664  1193				   .
   1665  1193							; 
   1666  1193
   1667  1193				   .
   1668  1193							; 
   1669  1193
   1670  1193				   .
   1671  1193							; 
   1672  1193
   1673  1193				   .
   1674  1193							; 
   1675  1193
   1676  1193				   .
   1677  1193							; 
   1678  1193
   1679  1193				   .
   1680  1193							; 
   1681  1193
   1682  1193				   .
   1683  1193							; 
   1684  1193
   1685  1193				   .
   1686  1193							; 
   1687  1193
   1688  1193				   .
   1689  1193							; 
   1690  1193
   1691  1193				   .__Main_Loop_Setup
   1692  1193							; __Main_Loop_Setup
   1693  1193
   1694  1193				   .
   1695  1193							; 
   1696  1193
   1697  1193				   .
   1698  1193							; 
   1699  1193
   1700  1193				   .
   1701  1193							; 
   1702  1193
   1703  1193				   .
   1704  1193							; 
   1705  1193
   1706  1193				   .
   1707  1193							; 
   1708  1193
   1709  1193				   .
   1710  1193							; 
   1711  1193
   1712  1193				   .L0194		;  player1x  =  17  :	player1y  =  15
   1713  1193
   1714  1193		       a9 11		      LDA	#17
   1715  1195		       85 81		      STA	player1x
   1716  1197		       a9 0f		      LDA	#15
   1717  1199		       85 86		      STA	player1y
   1718  119b				   .
   1719  119b							; 
   1720  119b
   1721  119b				   .
   1722  119b							; 
   1723  119b
   1724  119b				   .
   1725  119b							; 
   1726  119b
   1727  119b				   .
   1728  119b							; 
   1729  119b
   1730  119b				   .
   1731  119b							; 
   1732  119b
   1733  119b				   .
   1734  119b							; 
   1735  119b
   1736  119b				   .
   1737  119b							; 
   1738  119b
   1739  119b				   .
   1740  119b							; 
   1741  119b
   1742  119b				   .
   1743  119b							; 
   1744  119b
   1745  119b				   .L0195		;  _Bit0_Reset_Restrainer{0}  =  1
   1746  119b
   1747  119b		       a5 e2		      LDA	_Bit0_Reset_Restrainer
   1748  119d		       09 01		      ORA	#1
   1749  119f		       85 e2		      STA	_Bit0_Reset_Restrainer
   1750  11a1				   .
   1751  11a1							; 
   1752  11a1
   1753  11a1				   .
   1754  11a1							; 
   1755  11a1
   1756  11a1				   .
   1757  11a1							; 
   1758  11a1
   1759  11a1				   .
   1760  11a1							; 
   1761  11a1
   1762  11a1				   .
   1763  11a1							; 
   1764  11a1
   1765  11a1				   .
   1766  11a1							; 
   1767  11a1
   1768  11a1				   .
   1769  11a1							; 
   1770  11a1
   1771  11a1				   .
   1772  11a1							; 
   1773  11a1
   1774  11a1				   .
   1775  11a1							; 
   1776  11a1
   1777  11a1				   .L0196		;  if _RoomRand then goto __Skip_Rand_World
   1778  11a1
   1779  11a1		       a5 ec		      LDA	_RoomRand
   1780  11a3		       f0 03		      BEQ	.skipL0196
   1781  11a5				   .condpart12
   1782  11a5		       4c 41 92 	      jmp	.__Skip_Rand_World
   1783  11a8
   1784  11a8				   .skipL0196
   1785  11a8				   .
   1786  11a8							; 
   1787  11a8
   1788  11a8				   .
   1789  11a8							; 
   1790  11a8
   1791  11a8				   .
   1792  11a8							; 
   1793  11a8
   1794  11a8				   .
   1795  11a8							; 
   1796  11a8
   1797  11a8				   .L0197		;  _RoomRand  =  rand	:  if !_RoomRand then _RoomRand  =  1
   1798  11a8
   1799  11a8		       a5 a2		      lda	rand
   1800  11aa		       4a		      lsr
   1801  11ab					      ifconst	rand16
   1802  11ab		       26 ed		      rol	rand16
   1803  11ad					      endif
   1804  11ad		       90 02		      bcc	*+4
   1805  11af		       49 b4		      eor	#$B4
   1806  11b1		       85 a2		      sta	rand
   1807  11b3					      ifconst	rand16
   1808  11b3		       45 ed		      eor	rand16
   1809  11b5					      endif
   1810  11b5		       85 ec		      STA	_RoomRand
   1811  11b7		       a5 ec		      LDA	_RoomRand
   1812  11b9		       d0 04		      BNE	.skipL0197
   1813  11bb				   .condpart13
   1814  11bb		       a9 01		      LDA	#1
   1815  11bd		       85 ec		      STA	_RoomRand
   1816  11bf				   .skipL0197
   1817  11bf				   .
   1818  11bf							; 
   1819  11bf
   1820  11bf				   .
   1821  11bf							; 
   1822  11bf
   1823  11bf				   .
   1824  11bf							; 
   1825  11bf
   1826  11bf				   .
   1827  11bf							; 
   1828  11bf
   1829  11bf				   .L0198		;  temp4  =  _RoomRand
   1830  11bf
   1831  11bf		       a5 ec		      LDA	_RoomRand
   1832  11c1		       85 9f		      STA	temp4
   1833  11c3				   .
   1834  11c3							; 
   1835  11c3
   1836  11c3				   .L0199		;  _sc2  =  _sc2  &  240  :  _sc3  =  0
   1837  11c3
   1838  11c3		       a5 94		      LDA	_sc2
   1839  11c5		       29 f0		      AND	#240
   1840  11c7		       85 94		      STA	_sc2
   1841  11c9		       a9 00		      LDA	#0
   1842  11cb		       85 95		      STA	_sc3
   1843  11cd				   .L0200		;  if temp4  >=  100 then _sc2  =  _sc2  +  1	:  temp4  =  temp4  -  100
   1844  11cd
   1845  11cd		       a5 9f		      LDA	temp4
   1846  11cf		       c9 64		      CMP	#100
   1847  11d1		       90 09		      BCC	.skipL0200
   1848  11d3				   .condpart14
   1849  11d3		       e6 94		      INC	_sc2
   1850  11d5		       a5 9f		      LDA	temp4
   1851  11d7		       38		      SEC
   1852  11d8		       e9 64		      SBC	#100
   1853  11da		       85 9f		      STA	temp4
   1854  11dc				   .skipL0200
   1855  11dc				   .L0201		;  if temp4  >=  100 then _sc2  =  _sc2  +  1	:  temp4  =  temp4  -  100
   1856  11dc
   1857  11dc		       a5 9f		      LDA	temp4
   1858  11de		       c9 64		      CMP	#100
   1859  11e0		       90 09		      BCC	.skipL0201
   1860  11e2				   .condpart15
   1861  11e2		       e6 94		      INC	_sc2
   1862  11e4		       a5 9f		      LDA	temp4
   1863  11e6		       38		      SEC
   1864  11e7		       e9 64		      SBC	#100
   1865  11e9		       85 9f		      STA	temp4
   1866  11eb				   .skipL0201
   1867  11eb				   .L0202		;  if temp4  >=  50 then _sc3	=  _sc3  +  80	:  temp4  =  temp4  -  50
   1868  11eb
   1869  11eb		       a5 9f		      LDA	temp4
   1870  11ed		       c9 32		      CMP	#50
   1871  11ef		       90 0e		      BCC	.skipL0202
   1872  11f1				   .condpart16
   1873  11f1		       a5 95		      LDA	_sc3
   1874  11f3		       18		      CLC
   1875  11f4		       69 50		      ADC	#80
   1876  11f6		       85 95		      STA	_sc3
   1877  11f8		       a5 9f		      LDA	temp4
   1878  11fa		       38		      SEC
   1879  11fb		       e9 32		      SBC	#50
   1880  11fd		       85 9f		      STA	temp4
   1881  11ff				   .skipL0202
   1882  11ff				   .L0203		;  if temp4  >=  30 then _sc3	=  _sc3  +  48	:  temp4  =  temp4  -  30
   1883  11ff
   1884  11ff		       a5 9f		      LDA	temp4
   1885  1201		       c9 1e		      CMP	#30
   1886  1203		       90 0e		      BCC	.skipL0203
   1887  1205				   .condpart17
   1888  1205		       a5 95		      LDA	_sc3
   1889  1207		       18		      CLC
   1890  1208		       69 30		      ADC	#48
   1891  120a		       85 95		      STA	_sc3
   1892  120c		       a5 9f		      LDA	temp4
   1893  120e		       38		      SEC
   1894  120f		       e9 1e		      SBC	#30
   1895  1211		       85 9f		      STA	temp4
   1896  1213				   .skipL0203
   1897  1213				   .L0204		;  if temp4  >=  20 then _sc3	=  _sc3  +  32	:  temp4  =  temp4  -  20
   1898  1213
   1899  1213		       a5 9f		      LDA	temp4
   1900  1215		       c9 14		      CMP	#20
   1901  1217		       90 0e		      BCC	.skipL0204
   1902  1219				   .condpart18
   1903  1219		       a5 95		      LDA	_sc3
   1904  121b		       18		      CLC
   1905  121c		       69 20		      ADC	#32
   1906  121e		       85 95		      STA	_sc3
   1907  1220		       a5 9f		      LDA	temp4
   1908  1222		       38		      SEC
   1909  1223		       e9 14		      SBC	#20
   1910  1225		       85 9f		      STA	temp4
   1911  1227				   .skipL0204
   1912  1227				   .L0205		;  if temp4  >=  10 then _sc3	=  _sc3  +  16	:  temp4  =  temp4  -  10
   1913  1227
   1914  1227		       a5 9f		      LDA	temp4
   1915  1229		       c9 0a		      CMP	#10
   1916  122b		       90 0e		      BCC	.skipL0205
   1917  122d				   .condpart19
   1918  122d		       a5 95		      LDA	_sc3
   1919  122f		       18		      CLC
   1920  1230		       69 10		      ADC	#16
   1921  1232		       85 95		      STA	_sc3
   1922  1234		       a5 9f		      LDA	temp4
   1923  1236		       38		      SEC
   1924  1237		       e9 0a		      SBC	#10
   1925  1239		       85 9f		      STA	temp4
   1926  123b				   .skipL0205
   1927  123b				   .L0206		;  _sc3  =  _sc3  |  temp4
   1928  123b
   1929  123b		       a5 95		      LDA	_sc3
   1930  123d		       05 9f		      ORA	temp4
   1931  123f		       85 95		      STA	_sc3
   1932  1241				   .
   1933  1241							; 
   1934  1241
   1935  1241				   .__Skip_Rand_World
   1936  1241							; __Skip_Rand_World
   1937  1241
   1938  1241				   .
   1939  1241							; 
   1940  1241
   1941  1241				   .
   1942  1241							; 
   1943  1241
   1944  1241				   .
   1945  1241							; 
   1946  1241
   1947  1241				   .
   1948  1241							; 
   1949  1241
   1950  1241				   .
   1951  1241							; 
   1952  1241
   1953  1241				   .
   1954  1241							; 
   1955  1241
   1956  1241				   .L0207		;  goto __Special_Rand bank2
   1957  1241
   1958  1241		       85 ee		      sta	temp7
   1959  1243		       a9 b0		      lda	#>(.__Special_Rand-1)
   1960  1245		       48		      pha
   1961  1246		       a9 29		      lda	#<(.__Special_Rand-1)
   1962  1248		       48		      pha
   1963  1249		       a5 ee		      lda	temp7
   1964  124b		       48		      pha
   1965  124c		       8a		      txa
   1966  124d		       48		      pha
   1967  124e		       a2 02		      ldx	#2
   1968  1250		       4c eb ff 	      jmp	BS_jsr
   1969  1253				   .
   1970  1253							; 
   1971  1253
   1972  1253				   .
   1973  1253							; 
   1974  1253
   1975  1253				   .
   1976  1253							; 
   1977  1253
   1978  1253				   .
   1979  1253							; 
   1980  1253
   1981  1253				   .
   1982  1253							; 
   1983  1253
   1984  1253				   .
   1985  1253							; 
   1986  1253
   1987  1253				   .
   1988  1253							; 
   1989  1253
   1990  1253				   .
   1991  1253							; 
   1992  1253
   1993  1253				   .
   1994  1253							; 
   1995  1253
   1996  1253				   .
   1997  1253							; 
   1998  1253
   1999  1253				   .
   2000  1253							; 
   2001  1253
   2002  1253				   .__Main_Loop
   2003  1253							; __Main_Loop
   2004  1253
   2005  1253				   .
   2006  1253							; 
   2007  1253
   2008  1253				   .
   2009  1253							; 
   2010  1253
   2011  1253				   .
   2012  1253							; 
   2013  1253
   2014  1253				   .
   2015  1253							; 
   2016  1253
   2017  1253				   .
   2018  1253							; 
   2019  1253
   2020  1253				   .
   2021  1253							; 
   2022  1253
   2023  1253				   .
   2024  1253							; 
   2025  1253
   2026  1253				   .
   2027  1253							; 
   2028  1253
   2029  1253				   .
   2030  1253							; 
   2031  1253
   2032  1253				   .
   2033  1253							; 
   2034  1253
   2035  1253				   .
   2036  1253							; 
   2037  1253
   2038  1253				   .
   2039  1253							; 
   2040  1253
   2041  1253				   .L0208		;  _Master_Counter  =	_Master_Counter  +  1
   2042  1253
   2043  1253		       e6 e0		      INC	_Master_Counter
   2044  1255				   .
   2045  1255							; 
   2046  1255
   2047  1255				   .
   2048  1255							; 
   2049  1255
   2050  1255				   .
   2051  1255							; 
   2052  1255
   2053  1255				   .
   2054  1255							; 
   2055  1255
   2056  1255				   .L0209		;  if _Master_Counter	<  5 then goto __Skip_Frame_Counter
   2057  1255
   2058  1255		       a5 e0		      LDA	_Master_Counter
   2059  1257		       c9 05		      CMP	#5
   2060  1259		       b0 03		      BCS	.skipL0209
   2061  125b				   .condpart20
   2062  125b		       4c 6e 92 	      jmp	.__Skip_Frame_Counter
   2063  125e
   2064  125e				   .skipL0209
   2065  125e				   .
   2066  125e							; 
   2067  125e
   2068  125e				   .
   2069  125e							; 
   2070  125e
   2071  125e				   .
   2072  125e							; 
   2073  125e
   2074  125e				   .
   2075  125e							; 
   2076  125e
   2077  125e				   .L0210		;  _Frame_Counter  =  _Frame_Counter  +  1
   2078  125e
   2079  125e		       e6 e1		      INC	_Frame_Counter
   2080  1260				   .
   2081  1260							; 
   2082  1260
   2083  1260				   .
   2084  1260							; 
   2085  1260
   2086  1260				   .
   2087  1260							; 
   2088  1260
   2089  1260				   .
   2090  1260							; 
   2091  1260
   2092  1260				   .L0211		;  _Master_Counter  =	0
   2093  1260
   2094  1260		       a9 00		      LDA	#0
   2095  1262		       85 e0		      STA	_Master_Counter
   2096  1264				   .
   2097  1264							; 
   2098  1264
   2099  1264				   .
   2100  1264							; 
   2101  1264
   2102  1264				   .
   2103  1264							; 
   2104  1264
   2105  1264				   .
   2106  1264							; 
   2107  1264
   2108  1264				   .L0212		;  if _Frame_Counter  =  4 then _Frame_Counter  =  0
   2109  1264
   2110  1264		       a5 e1		      LDA	_Frame_Counter
   2111  1266		       c9 04		      CMP	#4
   2112  1268		       d0 04		      BNE	.skipL0212
   2113  126a				   .condpart21
   2114  126a		       a9 00		      LDA	#0
   2115  126c		       85 e1		      STA	_Frame_Counter
   2116  126e				   .skipL0212
   2117  126e				   .
   2118  126e							; 
   2119  126e
   2120  126e				   .__Skip_Frame_Counter
   2121  126e							; __Skip_Frame_Counter
   2122  126e
   2123  126e				   .
   2124  126e							; 
   2125  126e
   2126  126e				   .
   2127  126e							; 
   2128  126e
   2129  126e				   .
   2130  126e							; 
   2131  126e
   2132  126e				   .
   2133  126e							; 
   2134  126e
   2135  126e				   .
   2136  126e							; 
   2137  126e
   2138  126e				   .
   2139  126e							; 
   2140  126e
   2141  126e				   .
   2142  126e							; 
   2143  126e
   2144  126e				   .L0213		;  _Bit5_UD_Joy_Movement{5}  =  0  :  _Bit6_LR_Joy_Movement{6}  =  0  :  _Bit1_Next_Room_Up{1}  =  0  :  _Bit2_Next_Room_Down{2}  =  0  :  _Bit3_Next_Room_Left{3}  =	0  :  _Bit4_Next_Room_Right{4}	=  0
   2145  126e
   2146  126e		       a5 e2		      LDA	_Bit5_UD_Joy_Movement
   2147  1270		       29 df		      AND	#223
   2148  1272		       85 e2		      STA	_Bit5_UD_Joy_Movement
   2149  1274		       a5 e2		      LDA	_Bit6_LR_Joy_Movement
   2150  1276		       29 bf		      AND	#191
   2151  1278		       85 e2		      STA	_Bit6_LR_Joy_Movement
   2152  127a		       a5 e2		      LDA	_Bit1_Next_Room_Up
   2153  127c		       29 fd		      AND	#253
   2154  127e		       85 e2		      STA	_Bit1_Next_Room_Up
   2155  1280		       a5 e2		      LDA	_Bit2_Next_Room_Down
   2156  1282		       29 fb		      AND	#251
   2157  1284		       85 e2		      STA	_Bit2_Next_Room_Down
   2158  1286		       a5 e2		      LDA	_Bit3_Next_Room_Left
   2159  1288		       29 f7		      AND	#247
   2160  128a		       85 e2		      STA	_Bit3_Next_Room_Left
   2161  128c		       a5 e2		      LDA	_Bit4_Next_Room_Right
   2162  128e		       29 ef		      AND	#239
   2163  1290		       85 e2		      STA	_Bit4_Next_Room_Right
   2164  1292				   .
   2165  1292							; 
   2166  1292
   2167  1292				   .
   2168  1292							; 
   2169  1292
   2170  1292				   .
   2171  1292							; 
   2172  1292
   2173  1292				   .
   2174  1292							; 
   2175  1292
   2176  1292				   .
   2177  1292							; 
   2178  1292
   2179  1292				   .
   2180  1292							; 
   2181  1292
   2182  1292				   .
   2183  1292							; 
   2184  1292
   2185  1292				   .L0214		;  player1color:
   2186  1292
   2187  1292		       a2 36		      LDX	#<playercolorL0214_1
   2188  1294		       86 87		      STX	player1color
   2189  1296		       a9 f5		      LDA	#>playercolorL0214_1
   2190  1298		       85 88		      STA	player1color+1
   2191  129a				   .
   2192  129a							; 
   2193  129a
   2194  129a				   .L0215		;  player1:
   2195  129a
   2196  129a		       a2 40		      LDX	#<playerL0215_1
   2197  129c		       86 8c		      STX	player1pointerlo
   2198  129e		       a9 f5		      LDA	#>playerL0215_1
   2199  12a0		       85 8d		      STA	player1pointerhi
   2200  12a2		       a9 09		      LDA	#9
   2201  12a4		       85 8f		      STA	player1height
   2202  12a6				   .
   2203  12a6							; 
   2204  12a6
   2205  12a6				   .
   2206  12a6							; 
   2207  12a6
   2208  12a6				   .
   2209  12a6							; 
   2210  12a6
   2211  12a6				   .
   2212  12a6							; 
   2213  12a6
   2214  12a6				   .
   2215  12a6							; 
   2216  12a6
   2217  12a6				   .
   2218  12a6							; 
   2219  12a6
   2220  12a6				   .
   2221  12a6							; 
   2222  12a6
   2223  12a6				   .
   2224  12a6							; 
   2225  12a6
   2226  12a6				   .
   2227  12a6							; 
   2228  12a6
   2229  12a6				   .
   2230  12a6							; 
   2231  12a6
   2232  12a6				   .L0216		;  if !joy0up then goto __Skip_Joy0_Up
   2233  12a6
   2234  12a6		       a9 10		      lda	#$10
   2235  12a8		       2c 80 02 	      bit	SWCHA
   2236  12ab		       f0 03		      BEQ	.skipL0216
   2237  12ad				   .condpart22
   2238  12ad		       4c 85 93 	      jmp	.__Skip_Joy0_Up
   2239  12b0
   2240  12b0				   .skipL0216
   2241  12b0				   .
   2242  12b0							; 
   2243  12b0
   2244  12b0				   .
   2245  12b0							; 
   2246  12b0
   2247  12b0				   .
   2248  12b0							; 
   2249  12b0
   2250  12b0				   .
   2251  12b0							; 
   2252  12b0
   2253  12b0				   .L0217		;  temp5  =   ( player1x - 11 )  / 4
   2254  12b0
   2255  12b0							; complex statement detected
   2256  12b0		       a5 81		      LDA	player1x
   2257  12b2		       38		      SEC
   2258  12b3		       e9 0b		      SBC	#11
   2259  12b5		       4a		      lsr
   2260  12b6		       4a		      lsr
   2261  12b7		       85 a0		      STA	temp5
   2262  12b9				   .
   2263  12b9							; 
   2264  12b9
   2265  12b9				   .L0218		;  temp6  =   ( player1y - 11 )  / 8
   2266  12b9
   2267  12b9							; complex statement detected
   2268  12b9		       a5 86		      LDA	player1y
   2269  12bb		       38		      SEC
   2270  12bc		       e9 0b		      SBC	#11
   2271  12be		       4a		      lsr
   2272  12bf		       4a		      lsr
   2273  12c0		       4a		      lsr
   2274  12c1		       85 a1		      STA	temp6
   2275  12c3				   .
   2276  12c3							; 
   2277  12c3
   2278  12c3				   .L0219		;  if temp5  <  32 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   2279  12c3
   2280  12c3		       a5 a0		      LDA	temp5
   2281  12c5		       c9 20		      CMP	#32
   2282  12c7		       b0 21		      BCS	.skipL0219
   2283  12c9				   .condpart23
   2284  12c9		       a5 a0		      LDA	temp5
   2285  12cb		       a4 a1		      LDY	temp6
   2286  12cd		       85 ee		      sta	temp7
   2287  12cf		       a9 92		      lda	#>(ret_point2-1)
   2288  12d1		       48		      pha
   2289  12d2		       a9 e4		      lda	#<(ret_point2-1)
   2290  12d4		       48		      pha
   2291  12d5		       a9 f2		      lda	#>(pfread-1)
   2292  12d7		       48		      pha
   2293  12d8		       a9 a9		      lda	#<(pfread-1)
   2294  12da		       48		      pha
   2295  12db		       a5 ee		      lda	temp7
   2296  12dd		       48		      pha
   2297  12de		       8a		      txa
   2298  12df		       48		      pha
   2299  12e0		       a2 04		      ldx	#4
   2300  12e2		       4c eb ff 	      jmp	BS_jsr
   2301  12e5				   ret_point2
   2302  12e5		       d0 03		      BNE	.skip23then
   2303  12e7				   .condpart24
   2304  12e7		       4c 85 93 	      jmp	.__Skip_Joy0_Up
   2305  12ea
   2306  12ea				   .skip23then
   2307  12ea				   .skipL0219
   2308  12ea				   .
   2309  12ea							; 
   2310  12ea
   2311  12ea				   .L0220		;  temp4  =   ( player1x - 16 )  / 4
   2312  12ea
   2313  12ea							; complex statement detected
   2314  12ea		       a5 81		      LDA	player1x
   2315  12ec		       38		      SEC
   2316  12ed		       e9 10		      SBC	#16
   2317  12ef		       4a		      lsr
   2318  12f0		       4a		      lsr
   2319  12f1		       85 9f		      STA	temp4
   2320  12f3				   .
   2321  12f3							; 
   2322  12f3
   2323  12f3				   .L0221		;  if temp4  <  32 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   2324  12f3
   2325  12f3		       a5 9f		      LDA	temp4
   2326  12f5		       c9 20		      CMP	#32
   2327  12f7		       b0 21		      BCS	.skipL0221
   2328  12f9				   .condpart25
   2329  12f9		       a5 9f		      LDA	temp4
   2330  12fb		       a4 a1		      LDY	temp6
   2331  12fd		       85 ee		      sta	temp7
   2332  12ff		       a9 93		      lda	#>(ret_point3-1)
   2333  1301		       48		      pha
   2334  1302		       a9 14		      lda	#<(ret_point3-1)
   2335  1304		       48		      pha
   2336  1305		       a9 f2		      lda	#>(pfread-1)
   2337  1307		       48		      pha
   2338  1308		       a9 a9		      lda	#<(pfread-1)
   2339  130a		       48		      pha
   2340  130b		       a5 ee		      lda	temp7
   2341  130d		       48		      pha
   2342  130e		       8a		      txa
   2343  130f		       48		      pha
   2344  1310		       a2 04		      ldx	#4
   2345  1312		       4c eb ff 	      jmp	BS_jsr
   2346  1315				   ret_point3
   2347  1315		       d0 03		      BNE	.skip25then
   2348  1317				   .condpart26
   2349  1317		       4c 85 93 	      jmp	.__Skip_Joy0_Up
   2350  131a
   2351  131a				   .skip25then
   2352  131a				   .skipL0221
   2353  131a				   .
   2354  131a							; 
   2355  131a
   2356  131a				   .L0222		;  temp3  =  temp5  -	1
   2357  131a
   2358  131a		       a5 a0		      LDA	temp5
   2359  131c		       38		      SEC
   2360  131d		       e9 01		      SBC	#1
   2361  131f		       85 9e		      STA	temp3
   2362  1321				   .
   2363  1321							; 
   2364  1321
   2365  1321				   .L0223		;  if temp3  <  32 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   2366  1321
   2367  1321		       a5 9e		      LDA	temp3
   2368  1323		       c9 20		      CMP	#32
   2369  1325		       b0 21		      BCS	.skipL0223
   2370  1327				   .condpart27
   2371  1327		       a5 9e		      LDA	temp3
   2372  1329		       a4 a1		      LDY	temp6
   2373  132b		       85 ee		      sta	temp7
   2374  132d		       a9 93		      lda	#>(ret_point4-1)
   2375  132f		       48		      pha
   2376  1330		       a9 42		      lda	#<(ret_point4-1)
   2377  1332		       48		      pha
   2378  1333		       a9 f2		      lda	#>(pfread-1)
   2379  1335		       48		      pha
   2380  1336		       a9 a9		      lda	#<(pfread-1)
   2381  1338		       48		      pha
   2382  1339		       a5 ee		      lda	temp7
   2383  133b		       48		      pha
   2384  133c		       8a		      txa
   2385  133d		       48		      pha
   2386  133e		       a2 04		      ldx	#4
   2387  1340		       4c eb ff 	      jmp	BS_jsr
   2388  1343				   ret_point4
   2389  1343		       d0 03		      BNE	.skip27then
   2390  1345				   .condpart28
   2391  1345		       4c 85 93 	      jmp	.__Skip_Joy0_Up
   2392  1348
   2393  1348				   .skip27then
   2394  1348				   .skipL0223
   2395  1348				   .
   2396  1348							; 
   2397  1348
   2398  1348				   .
   2399  1348							; 
   2400  1348
   2401  1348				   .
   2402  1348							; 
   2403  1348
   2404  1348				   .
   2405  1348							; 
   2406  1348
   2407  1348				   .L0224		;  _Bit5_UD_Joy_Movement{5}  =  1
   2408  1348
   2409  1348		       a5 e2		      LDA	_Bit5_UD_Joy_Movement
   2410  134a		       09 20		      ORA	#32
   2411  134c		       85 e2		      STA	_Bit5_UD_Joy_Movement
   2412  134e				   .
   2413  134e							; 
   2414  134e
   2415  134e				   .
   2416  134e							; 
   2417  134e
   2418  134e				   .
   2419  134e							; 
   2420  134e
   2421  134e				   .
   2422  134e							; 
   2423  134e
   2424  134e				   .L0225		;  _P1_Up_Down  =  _P1_Up_Down  -  1.18
   2425  134e
   2426  134e		       a5 e4		      LDA	q
   2427  1350		       38		      SEC
   2428  1351		       e9 2e		      SBC	#46
   2429  1353		       85 e4		      STA	q
   2430  1355		       a5 86		      LDA	_P1_Up_Down
   2431  1357		       e9 01		      SBC	#1
   2432  1359		       85 86		      STA	_P1_Up_Down
   2433  135b				   .
   2434  135b							; 
   2435  135b
   2436  135b				   .
   2437  135b							; 
   2438  135b
   2439  135b				   .
   2440  135b							; 
   2441  135b
   2442  135b				   .
   2443  135b							; 
   2444  135b
   2445  135b				   .L0226		;  player1color:
   2446  135b
   2447  135b		       a2 4a		      LDX	#<playercolorL0226_1
   2448  135d		       86 87		      STX	player1color
   2449  135f		       a9 f5		      LDA	#>playercolorL0226_1
   2450  1361		       85 88		      STA	player1color+1
   2451  1363				   .
   2452  1363							; 
   2453  1363
   2454  1363				   .
   2455  1363							; 
   2456  1363
   2457  1363				   .
   2458  1363							; 
   2459  1363
   2460  1363				   .
   2461  1363							; 
   2462  1363
   2463  1363				   .L0227		;  if player1y  >=  _c_Edge_Top then goto __Skip_Joy0_Up
   2464  1363
   2465  1363		       a5 86		      LDA	player1y
   2466  1365		       c9 0a		      CMP	#_c_Edge_Top
   2467  1367		       90 03		      BCC	.skipL0227
   2468  1369				   .condpart29
   2469  1369		       4c 85 93 	      jmp	.__Skip_Joy0_Up
   2470  136c
   2471  136c				   .skipL0227
   2472  136c				   .
   2473  136c							; 
   2474  136c
   2475  136c				   .
   2476  136c							; 
   2477  136c
   2478  136c				   .
   2479  136c							; 
   2480  136c
   2481  136c				   .
   2482  136c							; 
   2483  136c
   2484  136c				   .L0228		;  if _YRoom  =  _c_World_Limit_Top then player1y  =  _c_Edge_Top  :  goto __Skip_Joy0_Up
   2485  136c
   2486  136c		       a5 d5		      LDA	_YRoom
   2487  136e		       c9 00		      CMP	#_c_World_Limit_Top
   2488  1370		       d0 07		      BNE	.skipL0228
   2489  1372				   .condpart30
   2490  1372		       a9 0a		      LDA	#_c_Edge_Top
   2491  1374		       85 86		      STA	player1y
   2492  1376		       4c 85 93 	      jmp	.__Skip_Joy0_Up
   2493  1379
   2494  1379				   .skipL0228
   2495  1379				   .
   2496  1379							; 
   2497  1379
   2498  1379				   .
   2499  1379							; 
   2500  1379
   2501  1379				   .
   2502  1379							; 
   2503  1379
   2504  1379				   .
   2505  1379							; 
   2506  1379
   2507  1379				   .L0229		;  player1y  =  _c_Edge_Bottom
   2508  1379
   2509  1379		       a9 58		      LDA	#_c_Edge_Bottom
   2510  137b		       85 86		      STA	player1y
   2511  137d				   .
   2512  137d							; 
   2513  137d
   2514  137d				   .
   2515  137d							; 
   2516  137d
   2517  137d				   .
   2518  137d							; 
   2519  137d
   2520  137d				   .
   2521  137d							; 
   2522  137d
   2523  137d				   .L0230		;  _YRoom  =  _YRoom  -  1
   2524  137d
   2525  137d		       c6 d5		      DEC	_YRoom
   2526  137f				   .
   2527  137f							; 
   2528  137f
   2529  137f				   .L0231		;  _Bit1_Next_Room_Up{1}  =  1
   2530  137f
   2531  137f		       a5 e2		      LDA	_Bit1_Next_Room_Up
   2532  1381		       09 02		      ORA	#2
   2533  1383		       85 e2		      STA	_Bit1_Next_Room_Up
   2534  1385				   .
   2535  1385							; 
   2536  1385
   2537  1385				   .__Skip_Joy0_Up
   2538  1385							; __Skip_Joy0_Up
   2539  1385
   2540  1385				   .
   2541  1385							; 
   2542  1385
   2543  1385				   .
   2544  1385							; 
   2545  1385
   2546  1385				   .
   2547  1385							; 
   2548  1385
   2549  1385				   .
   2550  1385							; 
   2551  1385
   2552  1385				   .
   2553  1385							; 
   2554  1385
   2555  1385				   .
   2556  1385							; 
   2557  1385
   2558  1385				   .
   2559  1385							; 
   2560  1385
   2561  1385				   .
   2562  1385							; 
   2563  1385
   2564  1385				   .
   2565  1385							; 
   2566  1385
   2567  1385				   .
   2568  1385							; 
   2569  1385
   2570  1385				   .L0232		;  if !joy0down then goto __Skip_Joy0_Down
   2571  1385
   2572  1385		       a9 20		      lda	#$20
   2573  1387		       2c 80 02 	      bit	SWCHA
   2574  138a		       f0 03		      BEQ	.skipL0232
   2575  138c				   .condpart31
   2576  138c		       4c 5c 94 	      jmp	.__Skip_Joy0_Down
   2577  138f
   2578  138f				   .skipL0232
   2579  138f				   .
   2580  138f							; 
   2581  138f
   2582  138f				   .
   2583  138f							; 
   2584  138f
   2585  138f				   .
   2586  138f							; 
   2587  138f
   2588  138f				   .
   2589  138f							; 
   2590  138f
   2591  138f				   .L0233		;  temp5  =   ( player1x - 11 )  / 4
   2592  138f
   2593  138f							; complex statement detected
   2594  138f		       a5 81		      LDA	player1x
   2595  1391		       38		      SEC
   2596  1392		       e9 0b		      SBC	#11
   2597  1394		       4a		      lsr
   2598  1395		       4a		      lsr
   2599  1396		       85 a0		      STA	temp5
   2600  1398				   .
   2601  1398							; 
   2602  1398
   2603  1398				   .L0234		;  temp6  =   ( player1y + 1 )  / 8
   2604  1398
   2605  1398							; complex statement detected
   2606  1398		       a5 86		      LDA	player1y
   2607  139a		       18		      CLC
   2608  139b		       69 01		      ADC	#1
   2609  139d		       4a		      lsr
   2610  139e		       4a		      lsr
   2611  139f		       4a		      lsr
   2612  13a0		       85 a1		      STA	temp6
   2613  13a2				   .
   2614  13a2							; 
   2615  13a2
   2616  13a2				   .L0235		;  if temp5  <  32 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   2617  13a2
   2618  13a2		       a5 a0		      LDA	temp5
   2619  13a4		       c9 20		      CMP	#32
   2620  13a6		       b0 21		      BCS	.skipL0235
   2621  13a8				   .condpart32
   2622  13a8		       a5 a0		      LDA	temp5
   2623  13aa		       a4 a1		      LDY	temp6
   2624  13ac		       85 ee		      sta	temp7
   2625  13ae		       a9 93		      lda	#>(ret_point5-1)
   2626  13b0		       48		      pha
   2627  13b1		       a9 c3		      lda	#<(ret_point5-1)
   2628  13b3		       48		      pha
   2629  13b4		       a9 f2		      lda	#>(pfread-1)
   2630  13b6		       48		      pha
   2631  13b7		       a9 a9		      lda	#<(pfread-1)
   2632  13b9		       48		      pha
   2633  13ba		       a5 ee		      lda	temp7
   2634  13bc		       48		      pha
   2635  13bd		       8a		      txa
   2636  13be		       48		      pha
   2637  13bf		       a2 04		      ldx	#4
   2638  13c1		       4c eb ff 	      jmp	BS_jsr
   2639  13c4				   ret_point5
   2640  13c4		       d0 03		      BNE	.skip32then
   2641  13c6				   .condpart33
   2642  13c6		       4c 5c 94 	      jmp	.__Skip_Joy0_Down
   2643  13c9
   2644  13c9				   .skip32then
   2645  13c9				   .skipL0235
   2646  13c9				   .
   2647  13c9							; 
   2648  13c9
   2649  13c9				   .L0236		;  temp4  =   ( player1x - 16 )  / 4
   2650  13c9
   2651  13c9							; complex statement detected
   2652  13c9		       a5 81		      LDA	player1x
   2653  13cb		       38		      SEC
   2654  13cc		       e9 10		      SBC	#16
   2655  13ce		       4a		      lsr
   2656  13cf		       4a		      lsr
   2657  13d0		       85 9f		      STA	temp4
   2658  13d2				   .
   2659  13d2							; 
   2660  13d2
   2661  13d2				   .L0237		;  if temp4  <  32 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   2662  13d2
   2663  13d2		       a5 9f		      LDA	temp4
   2664  13d4		       c9 20		      CMP	#32
   2665  13d6		       b0 21		      BCS	.skipL0237
   2666  13d8				   .condpart34
   2667  13d8		       a5 9f		      LDA	temp4
   2668  13da		       a4 a1		      LDY	temp6
   2669  13dc		       85 ee		      sta	temp7
   2670  13de		       a9 93		      lda	#>(ret_point6-1)
   2671  13e0		       48		      pha
   2672  13e1		       a9 f3		      lda	#<(ret_point6-1)
   2673  13e3		       48		      pha
   2674  13e4		       a9 f2		      lda	#>(pfread-1)
   2675  13e6		       48		      pha
   2676  13e7		       a9 a9		      lda	#<(pfread-1)
   2677  13e9		       48		      pha
   2678  13ea		       a5 ee		      lda	temp7
   2679  13ec		       48		      pha
   2680  13ed		       8a		      txa
   2681  13ee		       48		      pha
   2682  13ef		       a2 04		      ldx	#4
   2683  13f1		       4c eb ff 	      jmp	BS_jsr
   2684  13f4				   ret_point6
   2685  13f4		       d0 03		      BNE	.skip34then
   2686  13f6				   .condpart35
   2687  13f6		       4c 5c 94 	      jmp	.__Skip_Joy0_Down
   2688  13f9
   2689  13f9				   .skip34then
   2690  13f9				   .skipL0237
   2691  13f9				   .
   2692  13f9							; 
   2693  13f9
   2694  13f9				   .L0238		;  temp3  =  temp5  -	1
   2695  13f9
   2696  13f9		       a5 a0		      LDA	temp5
   2697  13fb		       38		      SEC
   2698  13fc		       e9 01		      SBC	#1
   2699  13fe		       85 9e		      STA	temp3
   2700  1400				   .
   2701  1400							; 
   2702  1400
   2703  1400				   .L0239		;  if temp3  <  32 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   2704  1400
   2705  1400		       a5 9e		      LDA	temp3
   2706  1402		       c9 20		      CMP	#32
   2707  1404		       b0 21		      BCS	.skipL0239
   2708  1406				   .condpart36
   2709  1406		       a5 9e		      LDA	temp3
   2710  1408		       a4 a1		      LDY	temp6
   2711  140a		       85 ee		      sta	temp7
   2712  140c		       a9 94		      lda	#>(ret_point7-1)
   2713  140e		       48		      pha
   2714  140f		       a9 21		      lda	#<(ret_point7-1)
   2715  1411		       48		      pha
   2716  1412		       a9 f2		      lda	#>(pfread-1)
   2717  1414		       48		      pha
   2718  1415		       a9 a9		      lda	#<(pfread-1)
   2719  1417		       48		      pha
   2720  1418		       a5 ee		      lda	temp7
   2721  141a		       48		      pha
   2722  141b		       8a		      txa
   2723  141c		       48		      pha
   2724  141d		       a2 04		      ldx	#4
   2725  141f		       4c eb ff 	      jmp	BS_jsr
   2726  1422				   ret_point7
   2727  1422		       d0 03		      BNE	.skip36then
   2728  1424				   .condpart37
   2729  1424		       4c 5c 94 	      jmp	.__Skip_Joy0_Down
   2730  1427
   2731  1427				   .skip36then
   2732  1427				   .skipL0239
   2733  1427				   .
   2734  1427							; 
   2735  1427
   2736  1427				   .
   2737  1427							; 
   2738  1427
   2739  1427				   .
   2740  1427							; 
   2741  1427
   2742  1427				   .
   2743  1427							; 
   2744  1427
   2745  1427				   .L0240		;  _Bit5_UD_Joy_Movement{5}  =  1
   2746  1427
   2747  1427		       a5 e2		      LDA	_Bit5_UD_Joy_Movement
   2748  1429		       09 20		      ORA	#32
   2749  142b		       85 e2		      STA	_Bit5_UD_Joy_Movement
   2750  142d				   .
   2751  142d							; 
   2752  142d
   2753  142d				   .
   2754  142d							; 
   2755  142d
   2756  142d				   .
   2757  142d							; 
   2758  142d
   2759  142d				   .
   2760  142d							; 
   2761  142d
   2762  142d				   .L0241		;  _P1_Up_Down  =  _P1_Up_Down  +  1.18
   2763  142d
   2764  142d		       a5 e4		      LDA	q
   2765  142f		       18		      CLC
   2766  1430		       69 2e		      ADC	#46
   2767  1432		       85 e4		      STA	q
   2768  1434		       a5 86		      LDA	_P1_Up_Down
   2769  1436		       69 01		      ADC	#1
   2770  1438		       85 86		      STA	_P1_Up_Down
   2771  143a				   .
   2772  143a							; 
   2773  143a
   2774  143a				   .
   2775  143a							; 
   2776  143a
   2777  143a				   .
   2778  143a							; 
   2779  143a
   2780  143a				   .
   2781  143a							; 
   2782  143a
   2783  143a				   .L0242		;  if player1y  <=  _c_Edge_Bottom then goto __Skip_Joy0_Down
   2784  143a
   2785  143a		       a9 58		      LDA	#_c_Edge_Bottom
   2786  143c		       c5 86		      CMP	player1y
   2787  143e		       90 03		      BCC	.skipL0242
   2788  1440				   .condpart38
   2789  1440		       4c 5c 94 	      jmp	.__Skip_Joy0_Down
   2790  1443
   2791  1443				   .skipL0242
   2792  1443				   .
   2793  1443							; 
   2794  1443
   2795  1443				   .
   2796  1443							; 
   2797  1443
   2798  1443				   .
   2799  1443							; 
   2800  1443
   2801  1443				   .
   2802  1443							; 
   2803  1443
   2804  1443				   .L0243		;  if _YRoom  =  _c_World_Limit_Bottom then player1y  =  _c_Edge_Bottom  :  goto __Skip_Joy0_Down
   2805  1443
   2806  1443		       a5 d5		      LDA	_YRoom
   2807  1445		       c9 07		      CMP	#_c_World_Limit_Bottom
   2808  1447		       d0 07		      BNE	.skipL0243
   2809  1449				   .condpart39
   2810  1449		       a9 58		      LDA	#_c_Edge_Bottom
   2811  144b		       85 86		      STA	player1y
   2812  144d		       4c 5c 94 	      jmp	.__Skip_Joy0_Down
   2813  1450
   2814  1450				   .skipL0243
   2815  1450				   .
   2816  1450							; 
   2817  1450
   2818  1450				   .
   2819  1450							; 
   2820  1450
   2821  1450				   .
   2822  1450							; 
   2823  1450
   2824  1450				   .
   2825  1450							; 
   2826  1450
   2827  1450				   .L0244		;  player1y  =  _c_Edge_Top
   2828  1450
   2829  1450		       a9 0a		      LDA	#_c_Edge_Top
   2830  1452		       85 86		      STA	player1y
   2831  1454				   .
   2832  1454							; 
   2833  1454
   2834  1454				   .
   2835  1454							; 
   2836  1454
   2837  1454				   .
   2838  1454							; 
   2839  1454
   2840  1454				   .
   2841  1454							; 
   2842  1454
   2843  1454				   .L0245		;  _YRoom  =  _YRoom  +  1
   2844  1454
   2845  1454		       e6 d5		      INC	_YRoom
   2846  1456				   .
   2847  1456							; 
   2848  1456
   2849  1456				   .L0246		;  _Bit2_Next_Room_Down{2}  =	1
   2850  1456
   2851  1456		       a5 e2		      LDA	_Bit2_Next_Room_Down
   2852  1458		       09 04		      ORA	#4
   2853  145a		       85 e2		      STA	_Bit2_Next_Room_Down
   2854  145c				   .
   2855  145c							; 
   2856  145c
   2857  145c				   .__Skip_Joy0_Down
   2858  145c							; __Skip_Joy0_Down
   2859  145c
   2860  145c				   .
   2861  145c							; 
   2862  145c
   2863  145c				   .
   2864  145c							; 
   2865  145c
   2866  145c				   .
   2867  145c							; 
   2868  145c
   2869  145c				   .
   2870  145c							; 
   2871  145c
   2872  145c				   .
   2873  145c							; 
   2874  145c
   2875  145c				   .
   2876  145c							; 
   2877  145c
   2878  145c				   .
   2879  145c							; 
   2880  145c
   2881  145c				   .
   2882  145c							; 
   2883  145c
   2884  145c				   .
   2885  145c							; 
   2886  145c
   2887  145c				   .
   2888  145c							; 
   2889  145c
   2890  145c				   .L0247		;  if !joy0left then goto __Skip_Joy0_Left
   2891  145c
   2892  145c		       2c 80 02 	      bit	SWCHA
   2893  145f		       50 03		      BVC	.skipL0247
   2894  1461				   .condpart40
   2895  1461		       4c 11 95 	      jmp	.__Skip_Joy0_Left
   2896  1464
   2897  1464				   .skipL0247
   2898  1464				   .
   2899  1464							; 
   2900  1464
   2901  1464				   .
   2902  1464							; 
   2903  1464
   2904  1464				   .
   2905  1464							; 
   2906  1464
   2907  1464				   .
   2908  1464							; 
   2909  1464
   2910  1464				   .L0248		;  temp5  =   ( player1y - 1 )  / 8
   2911  1464
   2912  1464							; complex statement detected
   2913  1464		       a5 86		      LDA	player1y
   2914  1466		       38		      SEC
   2915  1467		       e9 01		      SBC	#1
   2916  1469		       4a		      lsr
   2917  146a		       4a		      lsr
   2918  146b		       4a		      lsr
   2919  146c		       85 a0		      STA	temp5
   2920  146e				   .
   2921  146e							; 
   2922  146e
   2923  146e				   .L0249		;  temp6  =   ( player1x - 18 )  / 4
   2924  146e
   2925  146e							; complex statement detected
   2926  146e		       a5 81		      LDA	player1x
   2927  1470		       38		      SEC
   2928  1471		       e9 12		      SBC	#18
   2929  1473		       4a		      lsr
   2930  1474		       4a		      lsr
   2931  1475		       85 a1		      STA	temp6
   2932  1477				   .
   2933  1477							; 
   2934  1477
   2935  1477				   .L0250		;  if temp6  <  32 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   2936  1477
   2937  1477		       a5 a1		      LDA	temp6
   2938  1479		       c9 20		      CMP	#32
   2939  147b		       b0 21		      BCS	.skipL0250
   2940  147d				   .condpart41
   2941  147d		       a5 a1		      LDA	temp6
   2942  147f		       a4 a0		      LDY	temp5
   2943  1481		       85 ee		      sta	temp7
   2944  1483		       a9 94		      lda	#>(ret_point8-1)
   2945  1485		       48		      pha
   2946  1486		       a9 98		      lda	#<(ret_point8-1)
   2947  1488		       48		      pha
   2948  1489		       a9 f2		      lda	#>(pfread-1)
   2949  148b		       48		      pha
   2950  148c		       a9 a9		      lda	#<(pfread-1)
   2951  148e		       48		      pha
   2952  148f		       a5 ee		      lda	temp7
   2953  1491		       48		      pha
   2954  1492		       8a		      txa
   2955  1493		       48		      pha
   2956  1494		       a2 04		      ldx	#4
   2957  1496		       4c eb ff 	      jmp	BS_jsr
   2958  1499				   ret_point8
   2959  1499		       d0 03		      BNE	.skip41then
   2960  149b				   .condpart42
   2961  149b		       4c 11 95 	      jmp	.__Skip_Joy0_Left
   2962  149e
   2963  149e				   .skip41then
   2964  149e				   .skipL0250
   2965  149e				   .
   2966  149e							; 
   2967  149e
   2968  149e				   .L0251		;  temp3  =   ( player1y - 9 )  / 8
   2969  149e
   2970  149e							; complex statement detected
   2971  149e		       a5 86		      LDA	player1y
   2972  14a0		       38		      SEC
   2973  14a1		       e9 09		      SBC	#9
   2974  14a3		       4a		      lsr
   2975  14a4		       4a		      lsr
   2976  14a5		       4a		      lsr
   2977  14a6		       85 9e		      STA	temp3
   2978  14a8				   .
   2979  14a8							; 
   2980  14a8
   2981  14a8				   .L0252		;  if temp6  <  32 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   2982  14a8
   2983  14a8		       a5 a1		      LDA	temp6
   2984  14aa		       c9 20		      CMP	#32
   2985  14ac		       b0 21		      BCS	.skipL0252
   2986  14ae				   .condpart43
   2987  14ae		       a5 a1		      LDA	temp6
   2988  14b0		       a4 9e		      LDY	temp3
   2989  14b2		       85 ee		      sta	temp7
   2990  14b4		       a9 94		      lda	#>(ret_point9-1)
   2991  14b6		       48		      pha
   2992  14b7		       a9 c9		      lda	#<(ret_point9-1)
   2993  14b9		       48		      pha
   2994  14ba		       a9 f2		      lda	#>(pfread-1)
   2995  14bc		       48		      pha
   2996  14bd		       a9 a9		      lda	#<(pfread-1)
   2997  14bf		       48		      pha
   2998  14c0		       a5 ee		      lda	temp7
   2999  14c2		       48		      pha
   3000  14c3		       8a		      txa
   3001  14c4		       48		      pha
   3002  14c5		       a2 04		      ldx	#4
   3003  14c7		       4c eb ff 	      jmp	BS_jsr
   3004  14ca				   ret_point9
   3005  14ca		       d0 03		      BNE	.skip43then
   3006  14cc				   .condpart44
   3007  14cc		       4c 11 95 	      jmp	.__Skip_Joy0_Left
   3008  14cf
   3009  14cf				   .skip43then
   3010  14cf				   .skipL0252
   3011  14cf				   .
   3012  14cf							; 
   3013  14cf
   3014  14cf				   .
   3015  14cf							; 
   3016  14cf
   3017  14cf				   .
   3018  14cf							; 
   3019  14cf
   3020  14cf				   .
   3021  14cf							; 
   3022  14cf
   3023  14cf				   .L0253		;  _Bit6_LR_Joy_Movement{6}  =  1
   3024  14cf
   3025  14cf		       a5 e2		      LDA	_Bit6_LR_Joy_Movement
   3026  14d1		       09 40		      ORA	#64
   3027  14d3		       85 e2		      STA	_Bit6_LR_Joy_Movement
   3028  14d5				   .
   3029  14d5							; 
   3030  14d5
   3031  14d5				   .
   3032  14d5							; 
   3033  14d5
   3034  14d5				   .
   3035  14d5							; 
   3036  14d5
   3037  14d5				   .
   3038  14d5							; 
   3039  14d5
   3040  14d5				   .L0254		;  _P1_Left_Right  =  _P1_Left_Right  -  1.48
   3041  14d5
   3042  14d5		       a5 e3		      LDA	p
   3043  14d7		       38		      SEC
   3044  14d8		       e9 7a		      SBC	#122
   3045  14da		       85 e3		      STA	p
   3046  14dc		       a5 81		      LDA	_P1_Left_Right
   3047  14de		       e9 01		      SBC	#1
   3048  14e0		       85 81		      STA	_P1_Left_Right
   3049  14e2				   .
   3050  14e2							; 
   3051  14e2
   3052  14e2				   .
   3053  14e2							; 
   3054  14e2
   3055  14e2				   .
   3056  14e2							; 
   3057  14e2
   3058  14e2				   .
   3059  14e2							; 
   3060  14e2
   3061  14e2				   .L0255		;  REFP1  =  0
   3062  14e2
   3063  14e2		       a9 00		      LDA	#0
   3064  14e4		       85 0c		      STA	REFP1
   3065  14e6				   .
   3066  14e6							; 
   3067  14e6
   3068  14e6				   .
   3069  14e6							; 
   3070  14e6
   3071  14e6				   .
   3072  14e6							; 
   3073  14e6
   3074  14e6				   .
   3075  14e6							; 
   3076  14e6
   3077  14e6				   .L0256		;  if player1x  >=  _c_Edge_Left then goto __Skip_Joy0_Left
   3078  14e6
   3079  14e6		       a5 81		      LDA	player1x
   3080  14e8		       c9 02		      CMP	#_c_Edge_Left
   3081  14ea		       90 03		      BCC	.skipL0256
   3082  14ec				   .condpart45
   3083  14ec		       4c 11 95 	      jmp	.__Skip_Joy0_Left
   3084  14ef
   3085  14ef				   .skipL0256
   3086  14ef				   .
   3087  14ef							; 
   3088  14ef
   3089  14ef				   .
   3090  14ef							; 
   3091  14ef
   3092  14ef				   .
   3093  14ef							; 
   3094  14ef
   3095  14ef				   .
   3096  14ef							; 
   3097  14ef
   3098  14ef				   .L0257		;  if _XRoom  =  _c_World_Limit_Left then player1x  =	_c_Edge_Left  :  goto __Skip_Joy0_Left
   3099  14ef
   3100  14ef		       a5 d4		      LDA	_XRoom
   3101  14f1		       c9 00		      CMP	#_c_World_Limit_Left
   3102  14f3		       d0 07		      BNE	.skipL0257
   3103  14f5				   .condpart46
   3104  14f5		       a9 02		      LDA	#_c_Edge_Left
   3105  14f7		       85 81		      STA	player1x
   3106  14f9		       4c 11 95 	      jmp	.__Skip_Joy0_Left
   3107  14fc
   3108  14fc				   .skipL0257
   3109  14fc				   .
   3110  14fc							; 
   3111  14fc
   3112  14fc				   .
   3113  14fc							; 
   3114  14fc
   3115  14fc				   .
   3116  14fc							; 
   3117  14fc
   3118  14fc				   .
   3119  14fc							; 
   3120  14fc
   3121  14fc				   .L0258		;  if _Bit1_Next_Room_Up{1} then goto __Skip_Joy0_Left
   3122  14fc
   3123  14fc		       a5 e2		      LDA	_Bit1_Next_Room_Up
   3124  14fe		       29 02		      AND	#2
   3125  1500		       f0 03		      BEQ	.skipL0258
   3126  1502				   .condpart47
   3127  1502		       4c 11 95 	      jmp	.__Skip_Joy0_Left
   3128  1505
   3129  1505				   .skipL0258
   3130  1505				   .
   3131  1505							; 
   3132  1505
   3133  1505				   .
   3134  1505							; 
   3135  1505
   3136  1505				   .
   3137  1505							; 
   3138  1505
   3139  1505				   .
   3140  1505							; 
   3141  1505
   3142  1505				   .L0259		;  player1x  =  _c_Edge_Right
   3143  1505
   3144  1505		       a9 99		      LDA	#_c_Edge_Right
   3145  1507		       85 81		      STA	player1x
   3146  1509				   .
   3147  1509							; 
   3148  1509
   3149  1509				   .
   3150  1509							; 
   3151  1509
   3152  1509				   .
   3153  1509							; 
   3154  1509
   3155  1509				   .
   3156  1509							; 
   3157  1509
   3158  1509				   .L0260		;  _XRoom  =  _XRoom  -  1
   3159  1509
   3160  1509		       c6 d4		      DEC	_XRoom
   3161  150b				   .
   3162  150b							; 
   3163  150b
   3164  150b				   .L0261		;  _Bit3_Next_Room_Left{3}  =	1
   3165  150b
   3166  150b		       a5 e2		      LDA	_Bit3_Next_Room_Left
   3167  150d		       09 08		      ORA	#8
   3168  150f		       85 e2		      STA	_Bit3_Next_Room_Left
   3169  1511				   .
   3170  1511							; 
   3171  1511
   3172  1511				   .__Skip_Joy0_Left
   3173  1511							; __Skip_Joy0_Left
   3174  1511
   3175  1511				   .
   3176  1511							; 
   3177  1511
   3178  1511				   .
   3179  1511							; 
   3180  1511
   3181  1511				   .
   3182  1511							; 
   3183  1511
   3184  1511				   .
   3185  1511							; 
   3186  1511
   3187  1511				   .
   3188  1511							; 
   3189  1511
   3190  1511				   .
   3191  1511							; 
   3192  1511
   3193  1511				   .
   3194  1511							; 
   3195  1511
   3196  1511				   .
   3197  1511							; 
   3198  1511
   3199  1511				   .
   3200  1511							; 
   3201  1511
   3202  1511				   .
   3203  1511							; 
   3204  1511
   3205  1511				   .L0262		;  if !joy0right then goto __Skip_Joy0_Right
   3206  1511
   3207  1511		       2c 80 02 	      bit	SWCHA
   3208  1514		       10 03		      BPL	.skipL0262
   3209  1516				   .condpart48
   3210  1516		       4c c6 95 	      jmp	.__Skip_Joy0_Right
   3211  1519
   3212  1519				   .skipL0262
   3213  1519				   .
   3214  1519							; 
   3215  1519
   3216  1519				   .
   3217  1519							; 
   3218  1519
   3219  1519				   .
   3220  1519							; 
   3221  1519
   3222  1519				   .
   3223  1519							; 
   3224  1519
   3225  1519				   .L0263		;  temp5  =   ( player1y - 1 )  / 8
   3226  1519
   3227  1519							; complex statement detected
   3228  1519		       a5 86		      LDA	player1y
   3229  151b		       38		      SEC
   3230  151c		       e9 01		      SBC	#1
   3231  151e		       4a		      lsr
   3232  151f		       4a		      lsr
   3233  1520		       4a		      lsr
   3234  1521		       85 a0		      STA	temp5
   3235  1523				   .
   3236  1523							; 
   3237  1523
   3238  1523				   .L0264		;  temp6  =   ( player1x - 9 )  / 4
   3239  1523
   3240  1523							; complex statement detected
   3241  1523		       a5 81		      LDA	player1x
   3242  1525		       38		      SEC
   3243  1526		       e9 09		      SBC	#9
   3244  1528		       4a		      lsr
   3245  1529		       4a		      lsr
   3246  152a		       85 a1		      STA	temp6
   3247  152c				   .
   3248  152c							; 
   3249  152c
   3250  152c				   .L0265		;  if temp6  <  32 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   3251  152c
   3252  152c		       a5 a1		      LDA	temp6
   3253  152e		       c9 20		      CMP	#32
   3254  1530		       b0 21		      BCS	.skipL0265
   3255  1532				   .condpart49
   3256  1532		       a5 a1		      LDA	temp6
   3257  1534		       a4 a0		      LDY	temp5
   3258  1536		       85 ee		      sta	temp7
   3259  1538		       a9 95		      lda	#>(ret_point10-1)
   3260  153a		       48		      pha
   3261  153b		       a9 4d		      lda	#<(ret_point10-1)
   3262  153d		       48		      pha
   3263  153e		       a9 f2		      lda	#>(pfread-1)
   3264  1540		       48		      pha
   3265  1541		       a9 a9		      lda	#<(pfread-1)
   3266  1543		       48		      pha
   3267  1544		       a5 ee		      lda	temp7
   3268  1546		       48		      pha
   3269  1547		       8a		      txa
   3270  1548		       48		      pha
   3271  1549		       a2 04		      ldx	#4
   3272  154b		       4c eb ff 	      jmp	BS_jsr
   3273  154e				   ret_point10
   3274  154e		       d0 03		      BNE	.skip49then
   3275  1550				   .condpart50
   3276  1550		       4c c6 95 	      jmp	.__Skip_Joy0_Right
   3277  1553
   3278  1553				   .skip49then
   3279  1553				   .skipL0265
   3280  1553				   .
   3281  1553							; 
   3282  1553
   3283  1553				   .L0266		;  temp3  =   ( player1y - 9 )  / 8
   3284  1553
   3285  1553							; complex statement detected
   3286  1553		       a5 86		      LDA	player1y
   3287  1555		       38		      SEC
   3288  1556		       e9 09		      SBC	#9
   3289  1558		       4a		      lsr
   3290  1559		       4a		      lsr
   3291  155a		       4a		      lsr
   3292  155b		       85 9e		      STA	temp3
   3293  155d				   .
   3294  155d							; 
   3295  155d
   3296  155d				   .L0267		;  if temp6  <  32 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   3297  155d
   3298  155d		       a5 a1		      LDA	temp6
   3299  155f		       c9 20		      CMP	#32
   3300  1561		       b0 21		      BCS	.skipL0267
   3301  1563				   .condpart51
   3302  1563		       a5 a1		      LDA	temp6
   3303  1565		       a4 9e		      LDY	temp3
   3304  1567		       85 ee		      sta	temp7
   3305  1569		       a9 95		      lda	#>(ret_point11-1)
   3306  156b		       48		      pha
   3307  156c		       a9 7e		      lda	#<(ret_point11-1)
   3308  156e		       48		      pha
   3309  156f		       a9 f2		      lda	#>(pfread-1)
   3310  1571		       48		      pha
   3311  1572		       a9 a9		      lda	#<(pfread-1)
   3312  1574		       48		      pha
   3313  1575		       a5 ee		      lda	temp7
   3314  1577		       48		      pha
   3315  1578		       8a		      txa
   3316  1579		       48		      pha
   3317  157a		       a2 04		      ldx	#4
   3318  157c		       4c eb ff 	      jmp	BS_jsr
   3319  157f				   ret_point11
   3320  157f		       d0 03		      BNE	.skip51then
   3321  1581				   .condpart52
   3322  1581		       4c c6 95 	      jmp	.__Skip_Joy0_Right
   3323  1584
   3324  1584				   .skip51then
   3325  1584				   .skipL0267
   3326  1584				   .
   3327  1584							; 
   3328  1584
   3329  1584				   .
   3330  1584							; 
   3331  1584
   3332  1584				   .
   3333  1584							; 
   3334  1584
   3335  1584				   .
   3336  1584							; 
   3337  1584
   3338  1584				   .L0268		;  _Bit6_LR_Joy_Movement{6}  =  1
   3339  1584
   3340  1584		       a5 e2		      LDA	_Bit6_LR_Joy_Movement
   3341  1586		       09 40		      ORA	#64
   3342  1588		       85 e2		      STA	_Bit6_LR_Joy_Movement
   3343  158a				   .
   3344  158a							; 
   3345  158a
   3346  158a				   .
   3347  158a							; 
   3348  158a
   3349  158a				   .
   3350  158a							; 
   3351  158a
   3352  158a				   .
   3353  158a							; 
   3354  158a
   3355  158a				   .L0269		;  _P1_Left_Right  =  _P1_Left_Right  +  1.48
   3356  158a
   3357  158a		       a5 e3		      LDA	p
   3358  158c		       18		      CLC
   3359  158d		       69 7a		      ADC	#122
   3360  158f		       85 e3		      STA	p
   3361  1591		       a5 81		      LDA	_P1_Left_Right
   3362  1593		       69 01		      ADC	#1
   3363  1595		       85 81		      STA	_P1_Left_Right
   3364  1597				   .
   3365  1597							; 
   3366  1597
   3367  1597				   .
   3368  1597							; 
   3369  1597
   3370  1597				   .
   3371  1597							; 
   3372  1597
   3373  1597				   .
   3374  1597							; 
   3375  1597
   3376  1597				   .L0270		;  REFP1  =  8
   3377  1597
   3378  1597		       a9 08		      LDA	#8
   3379  1599		       85 0c		      STA	REFP1
   3380  159b				   .
   3381  159b							; 
   3382  159b
   3383  159b				   .
   3384  159b							; 
   3385  159b
   3386  159b				   .
   3387  159b							; 
   3388  159b
   3389  159b				   .
   3390  159b							; 
   3391  159b
   3392  159b				   .L0271		;  if player1x  <=  _c_Edge_Right then goto __Skip_Joy0_Right
   3393  159b
   3394  159b		       a9 99		      LDA	#_c_Edge_Right
   3395  159d		       c5 81		      CMP	player1x
   3396  159f		       90 03		      BCC	.skipL0271
   3397  15a1				   .condpart53
   3398  15a1		       4c c6 95 	      jmp	.__Skip_Joy0_Right
   3399  15a4
   3400  15a4				   .skipL0271
   3401  15a4				   .
   3402  15a4							; 
   3403  15a4
   3404  15a4				   .
   3405  15a4							; 
   3406  15a4
   3407  15a4				   .
   3408  15a4							; 
   3409  15a4
   3410  15a4				   .
   3411  15a4							; 
   3412  15a4
   3413  15a4				   .L0272		;  if _XRoom  =  _c_World_Limit_Right then player1x  =  _c_Edge_Right	:  goto __Skip_Joy0_Right
   3414  15a4
   3415  15a4		       a5 d4		      LDA	_XRoom
   3416  15a6		       c9 07		      CMP	#_c_World_Limit_Right
   3417  15a8		       d0 07		      BNE	.skipL0272
   3418  15aa				   .condpart54
   3419  15aa		       a9 99		      LDA	#_c_Edge_Right
   3420  15ac		       85 81		      STA	player1x
   3421  15ae		       4c c6 95 	      jmp	.__Skip_Joy0_Right
   3422  15b1
   3423  15b1				   .skipL0272
   3424  15b1				   .
   3425  15b1							; 
   3426  15b1
   3427  15b1				   .
   3428  15b1							; 
   3429  15b1
   3430  15b1				   .
   3431  15b1							; 
   3432  15b1
   3433  15b1				   .
   3434  15b1							; 
   3435  15b1
   3436  15b1				   .L0273		;  if _Bit2_Next_Room_Down{2} then goto __Skip_Joy0_Right
   3437  15b1
   3438  15b1		       a5 e2		      LDA	_Bit2_Next_Room_Down
   3439  15b3		       29 04		      AND	#4
   3440  15b5		       f0 03		      BEQ	.skipL0273
   3441  15b7				   .condpart55
   3442  15b7		       4c c6 95 	      jmp	.__Skip_Joy0_Right
   3443  15ba
   3444  15ba				   .skipL0273
   3445  15ba				   .
   3446  15ba							; 
   3447  15ba
   3448  15ba				   .
   3449  15ba							; 
   3450  15ba
   3451  15ba				   .
   3452  15ba							; 
   3453  15ba
   3454  15ba				   .
   3455  15ba							; 
   3456  15ba
   3457  15ba				   .L0274		;  player1x  =  _c_Edge_Left
   3458  15ba
   3459  15ba		       a9 02		      LDA	#_c_Edge_Left
   3460  15bc		       85 81		      STA	player1x
   3461  15be				   .
   3462  15be							; 
   3463  15be
   3464  15be				   .
   3465  15be							; 
   3466  15be
   3467  15be				   .
   3468  15be							; 
   3469  15be
   3470  15be				   .
   3471  15be							; 
   3472  15be
   3473  15be				   .L0275		;  _XRoom  =  _XRoom  +  1
   3474  15be
   3475  15be		       e6 d4		      INC	_XRoom
   3476  15c0				   .
   3477  15c0							; 
   3478  15c0
   3479  15c0				   .L0276		;  _Bit4_Next_Room_Right{4}  =  1
   3480  15c0
   3481  15c0		       a5 e2		      LDA	_Bit4_Next_Room_Right
   3482  15c2		       09 10		      ORA	#16
   3483  15c4		       85 e2		      STA	_Bit4_Next_Room_Right
   3484  15c6				   .
   3485  15c6							; 
   3486  15c6
   3487  15c6				   .__Skip_Joy0_Right
   3488  15c6							; __Skip_Joy0_Right
   3489  15c6
   3490  15c6				   .
   3491  15c6							; 
   3492  15c6
   3493  15c6				   .
   3494  15c6							; 
   3495  15c6
   3496  15c6				   .
   3497  15c6							; 
   3498  15c6
   3499  15c6				   .
   3500  15c6							; 
   3501  15c6
   3502  15c6				   .
   3503  15c6							; 
   3504  15c6
   3505  15c6				   .
   3506  15c6							; 
   3507  15c6
   3508  15c6				   .
   3509  15c6							; 
   3510  15c6
   3511  15c6				   .
   3512  15c6							; 
   3513  15c6
   3514  15c6				   .
   3515  15c6							; 
   3516  15c6
   3517  15c6				   .
   3518  15c6							; 
   3519  15c6
   3520  15c6				   .L0277		;  if !_Bit5_UD_Joy_Movement{5} then goto __Done_UD_Anim
   3521  15c6
   3522  15c6		       a5 e2		      LDA	_Bit5_UD_Joy_Movement
   3523  15c8		       29 20		      AND	#32
   3524  15ca		       d0 03		      BNE	.skipL0277
   3525  15cc				   .condpart56
   3526  15cc		       4c e2 95 	      jmp	.__Done_UD_Anim
   3527  15cf
   3528  15cf				   .skipL0277
   3529  15cf				   .
   3530  15cf							; 
   3531  15cf
   3532  15cf				   .
   3533  15cf							; 
   3534  15cf
   3535  15cf				   .
   3536  15cf							; 
   3537  15cf
   3538  15cf				   .
   3539  15cf							; 
   3540  15cf
   3541  15cf				   .L0278		;  on _Frame_Counter goto __FrameD0 __FrameD1 __FrameD2 __FrameD3
   3542  15cf
   3543  15cf		       a6 e1		      LDX	_Frame_Counter
   3544  15d1		       bd da 95 	      LDA	.L0278jumptablehi,x
   3545  15d4		       48		      PHA
   3546  15d5		       bd de 95 	      LDA	.L0278jumptablelo,x
   3547  15d8		       48		      PHA
   3548  15d9		       60		      RTS
   3549  15da				   .L0278jumptablehi
   3550  15da		       96		      .byte.b	>(.__FrameD0-1)
   3551  15db		       96		      .byte.b	>(.__FrameD1-1)
   3552  15dc		       96		      .byte.b	>(.__FrameD2-1)
   3553  15dd		       96		      .byte.b	>(.__FrameD3-1)
   3554  15de				   .L0278jumptablelo
   3555  15de		       51		      .byte.b	<(.__FrameD0-1)
   3556  15df		       60		      .byte.b	<(.__FrameD1-1)
   3557  15e0		       6f		      .byte.b	<(.__FrameD2-1)
   3558  15e1		       7e		      .byte.b	<(.__FrameD3-1)
   3559  15e2				   .
   3560  15e2							; 
   3561  15e2
   3562  15e2				   .__Done_UD_Anim
   3563  15e2							; __Done_UD_Anim
   3564  15e2
   3565  15e2				   .
   3566  15e2							; 
   3567  15e2
   3568  15e2				   .
   3569  15e2							; 
   3570  15e2
   3571  15e2				   .
   3572  15e2							; 
   3573  15e2
   3574  15e2				   .
   3575  15e2							; 
   3576  15e2
   3577  15e2				   .
   3578  15e2							; 
   3579  15e2
   3580  15e2				   .
   3581  15e2							; 
   3582  15e2
   3583  15e2				   .
   3584  15e2							; 
   3585  15e2
   3586  15e2				   .
   3587  15e2							; 
   3588  15e2
   3589  15e2				   .
   3590  15e2							; 
   3591  15e2
   3592  15e2				   .
   3593  15e2							; 
   3594  15e2
   3595  15e2				   .L0279		;  if !_Bit6_LR_Joy_Movement{6} then goto __Done_LR_Anim
   3596  15e2
   3597  15e2		       24 e2		      BIT	_Bit6_LR_Joy_Movement
   3598  15e4		       70 03		      BVS	.skipL0279
   3599  15e6				   .condpart57
   3600  15e6		       4c 04 96 	      jmp	.__Done_LR_Anim
   3601  15e9
   3602  15e9				   .skipL0279
   3603  15e9				   .
   3604  15e9							; 
   3605  15e9
   3606  15e9				   .
   3607  15e9							; 
   3608  15e9
   3609  15e9				   .
   3610  15e9							; 
   3611  15e9
   3612  15e9				   .
   3613  15e9							; 
   3614  15e9
   3615  15e9				   .L0280		;  player1color:
   3616  15e9
   3617  15e9		       a2 54		      LDX	#<playercolorL0280_1
   3618  15eb		       86 87		      STX	player1color
   3619  15ed		       a9 f5		      LDA	#>playercolorL0280_1
   3620  15ef		       85 88		      STA	player1color+1
   3621  15f1				   .
   3622  15f1							; 
   3623  15f1
   3624  15f1				   .
   3625  15f1							; 
   3626  15f1
   3627  15f1				   .
   3628  15f1							; 
   3629  15f1
   3630  15f1				   .
   3631  15f1							; 
   3632  15f1
   3633  15f1				   .L0281		;  on _Frame_Counter goto __FrameLR0 __FrameLR1 __FrameLR2 __FrameLR3
   3634  15f1
   3635  15f1		       a6 e1		      LDX	_Frame_Counter
   3636  15f3		       bd fc 95 	      LDA	.L0281jumptablehi,x
   3637  15f6		       48		      PHA
   3638  15f7		       bd 00 96 	      LDA	.L0281jumptablelo,x
   3639  15fa		       48		      PHA
   3640  15fb		       60		      RTS
   3641  15fc				   .L0281jumptablehi
   3642  15fc		       96		      .byte.b	>(.__FrameLR0-1)
   3643  15fd		       96		      .byte.b	>(.__FrameLR1-1)
   3644  15fe		       96		      .byte.b	>(.__FrameLR2-1)
   3645  15ff		       96		      .byte.b	>(.__FrameLR3-1)
   3646  1600				   .L0281jumptablelo
   3647  1600		       15		      .byte.b	<(.__FrameLR0-1)
   3648  1601		       24		      .byte.b	<(.__FrameLR1-1)
   3649  1602		       33		      .byte.b	<(.__FrameLR2-1)
   3650  1603		       42		      .byte.b	<(.__FrameLR3-1)
   3651  1604				   .
   3652  1604							; 
   3653  1604
   3654  1604				   .__Done_LR_Anim
   3655  1604							; __Done_LR_Anim
   3656  1604
   3657  1604				   .
   3658  1604							; 
   3659  1604
   3660  1604				   .
   3661  1604							; 
   3662  1604
   3663  1604				   .
   3664  1604							; 
   3665  1604
   3666  1604				   .
   3667  1604							; 
   3668  1604
   3669  1604				   .
   3670  1604							; 
   3671  1604
   3672  1604				   .
   3673  1604							; 
   3674  1604
   3675  1604				   .
   3676  1604							; 
   3677  1604
   3678  1604				   .
   3679  1604							; 
   3680  1604
   3681  1604				   .
   3682  1604							; 
   3683  1604
   3684  1604				   .
   3685  1604							; 
   3686  1604
   3687  1604				   .
   3688  1604							; 
   3689  1604
   3690  1604				   .
   3691  1604							; 
   3692  1604
   3693  1604				   .
   3694  1604							; 
   3695  1604
   3696  1604				   .
   3697  1604							; 
   3698  1604
   3699  1604				   .
   3700  1604							; 
   3701  1604
   3702  1604				   .L0282		;  goto __Continue_in_Bank_2 bank2
   3703  1604
   3704  1604		       85 ee		      sta	temp7
   3705  1606		       a9 af		      lda	#>(.__Continue_in_Bank_2-1)
   3706  1608		       48		      pha
   3707  1609		       a9 ff		      lda	#<(.__Continue_in_Bank_2-1)
   3708  160b		       48		      pha
   3709  160c		       a5 ee		      lda	temp7
   3710  160e		       48		      pha
   3711  160f		       8a		      txa
   3712  1610		       48		      pha
   3713  1611		       a2 02		      ldx	#2
   3714  1613		       4c eb ff 	      jmp	BS_jsr
   3715  1616				   .
   3716  1616							; 
   3717  1616
   3718  1616				   .
   3719  1616							; 
   3720  1616
   3721  1616				   .
   3722  1616							; 
   3723  1616
   3724  1616				   .
   3725  1616							; 
   3726  1616
   3727  1616				   .
   3728  1616							; 
   3729  1616
   3730  1616				   .
   3731  1616							; 
   3732  1616
   3733  1616				   .
   3734  1616							; 
   3735  1616
   3736  1616				   .
   3737  1616							; 
   3738  1616
   3739  1616				   .
   3740  1616							; 
   3741  1616
   3742  1616				   .
   3743  1616							; 
   3744  1616
   3745  1616				   .__FrameLR0
   3746  1616							; __FrameLR0
   3747  1616
   3748  1616				   .L0283		;  player1:
   3749  1616
   3750  1616		       a2 5e		      LDX	#<playerL0283_1
   3751  1618		       86 8c		      STX	player1pointerlo
   3752  161a		       a9 f5		      LDA	#>playerL0283_1
   3753  161c		       85 8d		      STA	player1pointerhi
   3754  161e		       a9 09		      LDA	#9
   3755  1620		       85 8f		      STA	player1height
   3756  1622				   .
   3757  1622							; 
   3758  1622
   3759  1622				   .L0284		;  goto __Done_LR_Anim
   3760  1622
   3761  1622		       4c 04 96 	      jmp	.__Done_LR_Anim
   3762  1625
   3763  1625				   .
   3764  1625							; 
   3765  1625
   3766  1625				   .
   3767  1625							; 
   3768  1625
   3769  1625				   .__FrameLR1
   3770  1625							; __FrameLR1
   3771  1625
   3772  1625				   .L0285		;  player1:
   3773  1625
   3774  1625		       a2 68		      LDX	#<playerL0285_1
   3775  1627		       86 8c		      STX	player1pointerlo
   3776  1629		       a9 f5		      LDA	#>playerL0285_1
   3777  162b		       85 8d		      STA	player1pointerhi
   3778  162d		       a9 09		      LDA	#9
   3779  162f		       85 8f		      STA	player1height
   3780  1631				   .
   3781  1631							; 
   3782  1631
   3783  1631				   .L0286		;  goto __Done_LR_Anim
   3784  1631
   3785  1631		       4c 04 96 	      jmp	.__Done_LR_Anim
   3786  1634
   3787  1634				   .
   3788  1634							; 
   3789  1634
   3790  1634				   .
   3791  1634							; 
   3792  1634
   3793  1634				   .__FrameLR2
   3794  1634							; __FrameLR2
   3795  1634
   3796  1634				   .L0287		;  player1:
   3797  1634
   3798  1634		       a2 72		      LDX	#<playerL0287_1
   3799  1636		       86 8c		      STX	player1pointerlo
   3800  1638		       a9 f5		      LDA	#>playerL0287_1
   3801  163a		       85 8d		      STA	player1pointerhi
   3802  163c		       a9 09		      LDA	#9
   3803  163e		       85 8f		      STA	player1height
   3804  1640				   .
   3805  1640							; 
   3806  1640
   3807  1640				   .L0288		;  goto __Done_LR_Anim
   3808  1640
   3809  1640		       4c 04 96 	      jmp	.__Done_LR_Anim
   3810  1643
   3811  1643				   .
   3812  1643							; 
   3813  1643
   3814  1643				   .
   3815  1643							; 
   3816  1643
   3817  1643				   .__FrameLR3
   3818  1643							; __FrameLR3
   3819  1643
   3820  1643				   .L0289		;  player1:
   3821  1643
   3822  1643		       a2 7c		      LDX	#<playerL0289_1
   3823  1645		       86 8c		      STX	player1pointerlo
   3824  1647		       a9 f5		      LDA	#>playerL0289_1
   3825  1649		       85 8d		      STA	player1pointerhi
   3826  164b		       a9 09		      LDA	#9
   3827  164d		       85 8f		      STA	player1height
   3828  164f				   .
   3829  164f							; 
   3830  164f
   3831  164f				   .L0290		;  goto __Done_LR_Anim
   3832  164f
   3833  164f		       4c 04 96 	      jmp	.__Done_LR_Anim
   3834  1652
   3835  1652				   .
   3836  1652							; 
   3837  1652
   3838  1652				   .
   3839  1652							; 
   3840  1652
   3841  1652				   .
   3842  1652							; 
   3843  1652
   3844  1652				   .
   3845  1652							; 
   3846  1652
   3847  1652				   .
   3848  1652							; 
   3849  1652
   3850  1652				   .
   3851  1652							; 
   3852  1652
   3853  1652				   .
   3854  1652							; 
   3855  1652
   3856  1652				   .
   3857  1652							; 
   3858  1652
   3859  1652				   .__FrameD0
   3860  1652							; __FrameD0
   3861  1652
   3862  1652				   .L0291		;  player1:
   3863  1652
   3864  1652		       a2 86		      LDX	#<playerL0291_1
   3865  1654		       86 8c		      STX	player1pointerlo
   3866  1656		       a9 f5		      LDA	#>playerL0291_1
   3867  1658		       85 8d		      STA	player1pointerhi
   3868  165a		       a9 09		      LDA	#9
   3869  165c		       85 8f		      STA	player1height
   3870  165e				   .
   3871  165e							; 
   3872  165e
   3873  165e				   .L0292		;  goto __Done_UD_Anim
   3874  165e
   3875  165e		       4c e2 95 	      jmp	.__Done_UD_Anim
   3876  1661
   3877  1661				   .__FrameD1
   3878  1661							; __FrameD1
   3879  1661
   3880  1661				   .L0293		;  player1:
   3881  1661
   3882  1661		       a2 90		      LDX	#<playerL0293_1
   3883  1663		       86 8c		      STX	player1pointerlo
   3884  1665		       a9 f5		      LDA	#>playerL0293_1
   3885  1667		       85 8d		      STA	player1pointerhi
   3886  1669		       a9 09		      LDA	#9
   3887  166b		       85 8f		      STA	player1height
   3888  166d				   .
   3889  166d							; 
   3890  166d
   3891  166d				   .L0294		;  goto __Done_UD_Anim
   3892  166d
   3893  166d		       4c e2 95 	      jmp	.__Done_UD_Anim
   3894  1670
   3895  1670				   .
   3896  1670							; 
   3897  1670
   3898  1670				   .
   3899  1670							; 
   3900  1670
   3901  1670				   .__FrameD2
   3902  1670							; __FrameD2
   3903  1670
   3904  1670				   .L0295		;  player1:
   3905  1670
   3906  1670		       a2 9a		      LDX	#<playerL0295_1
   3907  1672		       86 8c		      STX	player1pointerlo
   3908  1674		       a9 f5		      LDA	#>playerL0295_1
   3909  1676		       85 8d		      STA	player1pointerhi
   3910  1678		       a9 09		      LDA	#9
   3911  167a		       85 8f		      STA	player1height
   3912  167c				   .
   3913  167c							; 
   3914  167c
   3915  167c				   .L0296		;  goto __Done_UD_Anim
   3916  167c
   3917  167c		       4c e2 95 	      jmp	.__Done_UD_Anim
   3918  167f
   3919  167f				   .
   3920  167f							; 
   3921  167f
   3922  167f				   .
   3923  167f							; 
   3924  167f
   3925  167f				   .__FrameD3
   3926  167f							; __FrameD3
   3927  167f
   3928  167f				   .L0297		;  player1:
   3929  167f
   3930  167f		       a2 a4		      LDX	#<playerL0297_1
   3931  1681		       86 8c		      STX	player1pointerlo
   3932  1683		       a9 f5		      LDA	#>playerL0297_1
   3933  1685		       85 8d		      STA	player1pointerhi
   3934  1687		       a9 09		      LDA	#9
   3935  1689		       85 8f		      STA	player1height
   3936  168b				   .
   3937  168b							; 
   3938  168b
   3939  168b				   .L0298		;  goto __Done_UD_Anim
   3940  168b
   3941  168b		       4c e2 95 	      jmp	.__Done_UD_Anim
   3942  168e
   3943  168e				   .
   3944  168e							; 
   3945  168e
   3946  168e				   .
   3947  168e							; 
   3948  168e
   3949  168e				   .
   3950  168e							; 
   3951  168e
   3952  168e				   .
   3953  168e							; 
   3954  168e
   3955  168e				   .
   3956  168e							; 
   3957  168e
   3958  168e				   .L0299		;  bank 2
   3959  168e
   3960  168e					      if	ECHO1
      2374 bytes of ROM space left in bank 1
   3961  168e					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   3962  168e					      endif
   3963  168e		       00 01	   ECHO1      =	1
   3964  1fd4					      ORG	$1FF4-bscode_length
   3965  1fd4					      RORG	$9FF4-bscode_length
   3966  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   3967  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3968  1fd6				  -	      stx	FASTFETCH
   3969  1fd6					      endif
   3970  1fd6		       9a		      txs
   3971  1fd7				  -	      if	bankswitch == 64
   3972  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3973  1fd7					      else
   3974  1fd7		       a9 f2		      lda	#>(start-1)
   3975  1fd9					      endif
   3976  1fd9		       48		      pha
   3977  1fda		       a9 4f		      lda	#<(start-1)
   3978  1fdc		       48		      pha
   3979  1fdd		       48		      pha
   3980  1fde		       8a		      txa
   3981  1fdf		       48		      pha
   3982  1fe0		       ba		      tsx
   3983  1fe1					      if	bankswitch != 64
   3984  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   3985  1fe3		       2a		      rol
   3986  1fe4		       2a		      rol
   3987  1fe5		       2a		      rol
   3988  1fe6		       2a		      rol
   3989  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3990  1fe9		       aa		      tax
   3991  1fea		       e8		      inx
   3992  1feb				  -	      else
   3993  1feb				  -	      lda	4,x	; get high byte of return address
   3994  1feb				  -	      tay
   3995  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3996  1feb				  -	      sta	4,x
   3997  1feb				  -	      tya
   3998  1feb				  -	      lsr
   3999  1feb				  -	      lsr
   4000  1feb				  -	      lsr
   4001  1feb				  -	      lsr
   4002  1feb				  -	      tax
   4003  1feb				  -	      inx
   4004  1feb					      endif
   4005  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   4006  1fee		       68		      pla
   4007  1fef		       aa		      tax
   4008  1ff0		       68		      pla
   4009  1ff1		       60		      rts
   4010  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4011  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4012  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4013  1ff2					      endif
   4014  1ffc					      ORG	$1FFC
   4015  1ffc					      RORG	$9FFC
   4016  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
   4017  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
   4018  2000					      ORG	$2000
   4019  2000					      RORG	$B000
   4020  2000				   .
   4021  2000							; 
   4022  2000
   4023  2000				   .
   4024  2000							; 
   4025  2000
   4026  2000				   .
   4027  2000							; 
   4028  2000
   4029  2000				   .
   4030  2000							; 
   4031  2000
   4032  2000				   .
   4033  2000							; 
   4034  2000
   4035  2000				   .__Continue_in_Bank_2
   4036  2000							; __Continue_in_Bank_2
   4037  2000
   4038  2000				   .
   4039  2000							; 
   4040  2000
   4041  2000				   .
   4042  2000							; 
   4043  2000
   4044  2000				   .
   4045  2000							; 
   4046  2000
   4047  2000				   .
   4048  2000							; 
   4049  2000
   4050  2000				   .
   4051  2000							; 
   4052  2000
   4053  2000				   .
   4054  2000							; 
   4055  2000
   4056  2000				   .
   4057  2000							; 
   4058  2000
   4059  2000				   .
   4060  2000							; 
   4061  2000
   4062  2000				   .
   4063  2000							; 
   4064  2000
   4065  2000				   .
   4066  2000							; 
   4067  2000
   4068  2000				   .
   4069  2000							; 
   4070  2000
   4071  2000				   .
   4072  2000							; 
   4073  2000
   4074  2000				   .
   4075  2000							; 
   4076  2000
   4077  2000				   .
   4078  2000							; 
   4079  2000
   4080  2000				   .
   4081  2000							; 
   4082  2000
   4083  2000				   .
   4084  2000							; 
   4085  2000
   4086  2000				   .
   4087  2000							; 
   4088  2000
   4089  2000				   .
   4090  2000							; 
   4091  2000
   4092  2000				   .L0300		;  if !_Bit1_Next_Room_Up{1}  &&  !_Bit2_Next_Room_Down{2}  &&  !_Bit3_Next_Room_Left{3}  &&  !_Bit4_Next_Room_Right{4} then goto __Done_Next_Room
   4093  2000
   4094  2000		       a5 e2		      LDA	_Bit1_Next_Room_Up
   4095  2002		       29 02		      AND	#2
   4096  2004		       d0 15		      BNE	.skipL0300
   4097  2006				   .condpart58
   4098  2006		       a5 e2		      LDA	_Bit2_Next_Room_Down
   4099  2008		       29 04		      AND	#4
   4100  200a		       d0 0f		      BNE	.skip58then
   4101  200c				   .condpart59
   4102  200c		       a5 e2		      LDA	_Bit3_Next_Room_Left
   4103  200e		       29 08		      AND	#8
   4104  2010		       d0 09		      BNE	.skip59then
   4105  2012				   .condpart60
   4106  2012		       a5 e2		      LDA	_Bit4_Next_Room_Right
   4107  2014		       29 10		      AND	#16
   4108  2016		       d0 03		      BNE	.skip60then
   4109  2018				   .condpart61
   4110  2018		       4c ce b0 	      jmp	.__Done_Next_Room
   4111  201b
   4112  201b				   .skip60then
   4113  201b				   .skip59then
   4114  201b				   .skip58then
   4115  201b				   .skipL0300
   4116  201b				   .
   4117  201b							; 
   4118  201b
   4119  201b				   .
   4120  201b							; 
   4121  201b
   4122  201b				   .
   4123  201b							; 
   4124  201b
   4125  201b				   .
   4126  201b							; 
   4127  201b
   4128  201b				   .L0301		;  if !_Bit4_Next_Room_Right{4}  &&  !_Bit2_Next_Room_Down{2} then goto __Skip_bBRand
   4129  201b
   4130  201b		       a5 e2		      LDA	_Bit4_Next_Room_Right
   4131  201d		       29 10		      AND	#16
   4132  201f		       d0 09		      BNE	.skipL0301
   4133  2021				   .condpart62
   4134  2021		       a5 e2		      LDA	_Bit2_Next_Room_Down
   4135  2023		       29 04		      AND	#4
   4136  2025		       d0 03		      BNE	.skip62then
   4137  2027				   .condpart63
   4138  2027		       4c 4c b0 	      jmp	.__Skip_bBRand
   4139  202a
   4140  202a				   .skip62then
   4141  202a				   .skipL0301
   4142  202a				   .
   4143  202a							; 
   4144  202a
   4145  202a				   .__Special_Rand
   4146  202a							; __Special_Rand
   4147  202a
   4148  202a				   .
   4149  202a							; 
   4150  202a
   4151  202a				   .L0302		;  _Temp  =  0
   4152  202a
   4153  202a		       a9 00		      LDA	#0
   4154  202c		       85 df		      STA	_Temp
   4155  202e				   .
   4156  202e							; 
   4157  202e
   4158  202e				   .
   4159  202e							; 
   4160  202e
   4161  202e				   .
   4162  202e							; 
   4163  202e
   4164  202e				   .
   4165  202e							; 
   4166  202e
   4167  202e				   .__bBRand
   4168  202e							; __bBRand
   4169  202e
   4170  202e				   .L0303		;  asm
   4171  202e
   4172  202e		       a5 ec		      lda	_RoomRand
   4173  2030
   4174  2030		       4a		      lsr
   4175  2031
   4176  2031		       90 02		      bcc	__bB_Rand_no_eor
   4177  2033
   4178  2033		       49 b4		      eor	#$B4
   4179  2035
   4180  2035				   __bB_Rand_no_eor
   4181  2035
   4182  2035		       85 ec		      sta	_RoomRand
   4183  2037
   4184  2037				   .
   4185  2037							; 
   4186  2037
   4187  2037				   .
   4188  2037							; 
   4189  2037
   4190  2037				   .
   4191  2037							; 
   4192  2037
   4193  2037				   .
   4194  2037							; 
   4195  2037
   4196  2037				   .L0304		;  if _Bit2_Next_Room_Down{2} then _Temp  =  _Temp  +	1  :  if _Temp	<=  _c_World_Limit_Right then goto __bBRand
   4197  2037
   4198  2037		       a5 e2		      LDA	_Bit2_Next_Room_Down
   4199  2039		       29 04		      AND	#4
   4200  203b		       f0 0b		      BEQ	.skipL0304
   4201  203d				   .condpart64
   4202  203d		       e6 df		      INC	_Temp
   4203  203f		       a9 07		      LDA	#_c_World_Limit_Right
   4204  2041		       c5 df		      CMP	_Temp
   4205  2043		       90 03		      BCC	.skip64then
   4206  2045				   .condpart65
   4207  2045		       4c 2e b0 	      jmp	.__bBRand
   4208  2048
   4209  2048				   .skip64then
   4210  2048				   .skipL0304
   4211  2048				   .
   4212  2048							; 
   4213  2048
   4214  2048				   .
   4215  2048							; 
   4216  2048
   4217  2048				   .
   4218  2048							; 
   4219  2048
   4220  2048				   .
   4221  2048							; 
   4222  2048
   4223  2048				   .L0305		;  _CurrentScene  =  _RoomRand
   4224  2048
   4225  2048		       a5 ec		      LDA	_RoomRand
   4226  204a		       85 d6		      STA	_CurrentScene
   4227  204c				   .
   4228  204c							; 
   4229  204c
   4230  204c				   .__Skip_bBRand
   4231  204c							; __Skip_bBRand
   4232  204c
   4233  204c				   .
   4234  204c							; 
   4235  204c
   4236  204c				   .
   4237  204c							; 
   4238  204c
   4239  204c				   .
   4240  204c							; 
   4241  204c
   4242  204c				   .
   4243  204c							; 
   4244  204c
   4245  204c				   .L0306		;  if !_Bit1_Next_Room_Up{1}  &&  !_Bit3_Next_Room_Left{3} then goto __Skip_UnRand
   4246  204c
   4247  204c		       a5 e2		      LDA	_Bit1_Next_Room_Up
   4248  204e		       29 02		      AND	#2
   4249  2050		       d0 09		      BNE	.skipL0306
   4250  2052				   .condpart66
   4251  2052		       a5 e2		      LDA	_Bit3_Next_Room_Left
   4252  2054		       29 08		      AND	#8
   4253  2056		       d0 03		      BNE	.skip66then
   4254  2058				   .condpart67
   4255  2058		       4c 7b b0 	      jmp	.__Skip_UnRand
   4256  205b
   4257  205b				   .skip66then
   4258  205b				   .skipL0306
   4259  205b				   .
   4260  205b							; 
   4261  205b
   4262  205b				   .L0307		;  _Temp  =  0
   4263  205b
   4264  205b		       a9 00		      LDA	#0
   4265  205d		       85 df		      STA	_Temp
   4266  205f				   .
   4267  205f							; 
   4268  205f
   4269  205f				   .
   4270  205f							; 
   4271  205f
   4272  205f				   .
   4273  205f							; 
   4274  205f
   4275  205f				   .
   4276  205f							; 
   4277  205f
   4278  205f				   .__UnRand
   4279  205f							; __UnRand
   4280  205f
   4281  205f				   .L0308		;  asm
   4282  205f
   4283  205f		       a5 ec		      LDA	_RoomRand
   4284  2061
   4285  2061		       0a		      ASL
   4286  2062
   4287  2062		       90 02		      BCC	__UnRand_no_eor
   4288  2064
   4289  2064		       49 69		      EOR	#$69
   4290  2066
   4291  2066				   __UnRand_no_eor
   4292  2066
   4293  2066		       85 ec		      STA	_RoomRand
   4294  2068
   4295  2068		       85 d6		      STA	_CurrentScene
   4296  206a
   4297  206a				   .
   4298  206a							; 
   4299  206a
   4300  206a				   .
   4301  206a							; 
   4302  206a
   4303  206a				   .
   4304  206a							; 
   4305  206a
   4306  206a				   .
   4307  206a							; 
   4308  206a
   4309  206a				   .L0309		;  if _Bit1_Next_Room_Up{1} then _Temp  =  _Temp  +  1  :  if _Temp  <=  _c_World_Limit_Right then goto __UnRand
   4310  206a
   4311  206a		       a5 e2		      LDA	_Bit1_Next_Room_Up
   4312  206c		       29 02		      AND	#2
   4313  206e		       f0 0b		      BEQ	.skipL0309
   4314  2070				   .condpart68
   4315  2070		       e6 df		      INC	_Temp
   4316  2072		       a9 07		      LDA	#_c_World_Limit_Right
   4317  2074		       c5 df		      CMP	_Temp
   4318  2076		       90 03		      BCC	.skip68then
   4319  2078				   .condpart69
   4320  2078		       4c 5f b0 	      jmp	.__UnRand
   4321  207b
   4322  207b				   .skip68then
   4323  207b				   .skipL0309
   4324  207b				   .
   4325  207b							; 
   4326  207b
   4327  207b				   .__Skip_UnRand
   4328  207b							; __Skip_UnRand
   4329  207b
   4330  207b				   .
   4331  207b							; 
   4332  207b
   4333  207b				   .
   4334  207b							; 
   4335  207b
   4336  207b				   .
   4337  207b							; 
   4338  207b
   4339  207b				   .
   4340  207b							; 
   4341  207b
   4342  207b				   .L0310		;  _CurrentScene  =   ( _CurrentScene & 31 ) 
   4343  207b
   4344  207b							; complex statement detected
   4345  207b		       a5 d6		      LDA	_CurrentScene
   4346  207d		       29 1f		      AND	#31
   4347  207f		       85 d6		      STA	_CurrentScene
   4348  2081				   .
   4349  2081							; 
   4350  2081
   4351  2081				   .
   4352  2081							; 
   4353  2081
   4354  2081				   .
   4355  2081							; 
   4356  2081
   4357  2081				   .
   4358  2081							; 
   4359  2081
   4360  2081				   .L0311		;  _Temp  =  _VisitedRooms[_YRoom]
   4361  2081
   4362  2081		       a6 d5		      LDX	_YRoom
   4363  2083		       b5 d7		      LDA	_VisitedRooms,x
   4364  2085		       85 df		      STA	_Temp
   4365  2087				   .L0312		;  temp5  =  _Data_Number_to_Bit[_XRoom]
   4366  2087
   4367  2087		       a6 d4		      LDX	_XRoom
   4368  2089		       bd 1a b9 	      LDA	_Data_Number_to_Bit,x
   4369  208c		       85 a0		      STA	temp5
   4370  208e				   .L0313		;  _Temp  =   ( _Temp & temp5 ) 
   4371  208e
   4372  208e							; complex statement detected
   4373  208e		       a5 df		      LDA	_Temp
   4374  2090		       25 a0		      AND	temp5
   4375  2092		       85 df		      STA	_Temp
   4376  2094				   .
   4377  2094							; 
   4378  2094
   4379  2094				   .
   4380  2094							; 
   4381  2094
   4382  2094				   .
   4383  2094							; 
   4384  2094
   4385  2094				   .
   4386  2094							; 
   4387  2094
   4388  2094				   .L0314		;  if _Temp  &&  lives  <  32 then lives  =  lives  +	32
   4389  2094
   4390  2094		       a5 df		      LDA	_Temp
   4391  2096		       f0 0d		      BEQ	.skipL0314
   4392  2098				   .condpart70
   4393  2098		       a5 f3		      LDA	lives
   4394  209a		       c9 20		      CMP	#32
   4395  209c		       b0 07		      BCS	.skip70then
   4396  209e				   .condpart71
   4397  209e		       a5 f3		      LDA	lives
   4398  20a0		       18		      CLC
   4399  20a1		       69 20		      ADC	#32
   4400  20a3		       85 f3		      STA	lives
   4401  20a5				   .skip70then
   4402  20a5				   .skipL0314
   4403  20a5				   .L0315		;  if !_Temp  &&  lives  >=  32 then lives  =	lives  -  32
   4404  20a5
   4405  20a5		       a5 df		      LDA	_Temp
   4406  20a7		       d0 0d		      BNE	.skipL0315
   4407  20a9				   .condpart72
   4408  20a9		       a5 f3		      LDA	lives
   4409  20ab		       c9 20		      CMP	#32
   4410  20ad		       90 07		      BCC	.skip72then
   4411  20af				   .condpart73
   4412  20af		       a5 f3		      LDA	lives
   4413  20b1		       38		      SEC
   4414  20b2		       e9 20		      SBC	#32
   4415  20b4		       85 f3		      STA	lives
   4416  20b6				   .skip72then
   4417  20b6				   .skipL0315
   4418  20b6				   .
   4419  20b6							; 
   4420  20b6
   4421  20b6				   .
   4422  20b6							; 
   4423  20b6
   4424  20b6				   .
   4425  20b6							; 
   4426  20b6
   4427  20b6				   .
   4428  20b6							; 
   4429  20b6
   4430  20b6				   .L0316		;  _Temp  =  _VisitedRooms[_YRoom]
   4431  20b6
   4432  20b6		       a6 d5		      LDX	_YRoom
   4433  20b8		       b5 d7		      LDA	_VisitedRooms,x
   4434  20ba		       85 df		      STA	_Temp
   4435  20bc				   .L0317		;  temp5  =  _Data_Number_to_Bit[_XRoom]
   4436  20bc
   4437  20bc		       a6 d4		      LDX	_XRoom
   4438  20be		       bd 1a b9 	      LDA	_Data_Number_to_Bit,x
   4439  20c1		       85 a0		      STA	temp5
   4440  20c3				   .L0318		;  _VisitedRooms[_YRoom]  =   ( _Temp | temp5 ) 
   4441  20c3
   4442  20c3							; complex statement detected
   4443  20c3		       a5 df		      LDA	_Temp
   4444  20c5		       05 a0		      ORA	temp5
   4445  20c7		       a6 d5		      LDX	_YRoom
   4446  20c9		       95 d7		      STA	_VisitedRooms,x
   4447  20cb				   .
   4448  20cb							; 
   4449  20cb
   4450  20cb				   .
   4451  20cb							; 
   4452  20cb
   4453  20cb				   .
   4454  20cb							; 
   4455  20cb
   4456  20cb				   .
   4457  20cb							; 
   4458  20cb
   4459  20cb				   .L0319		;  goto __Set_Current_Scene
   4460  20cb
   4461  20cb		       4c f8 b0 	      jmp	.__Set_Current_Scene
   4462  20ce
   4463  20ce				   .
   4464  20ce							; 
   4465  20ce
   4466  20ce				   .__Done_Next_Room
   4467  20ce							; __Done_Next_Room
   4468  20ce
   4469  20ce				   .
   4470  20ce							; 
   4471  20ce
   4472  20ce				   .
   4473  20ce							; 
   4474  20ce
   4475  20ce				   .
   4476  20ce							; 
   4477  20ce
   4478  20ce				   .
   4479  20ce							; 
   4480  20ce
   4481  20ce				   .
   4482  20ce							; 
   4483  20ce
   4484  20ce				   .
   4485  20ce							; 
   4486  20ce
   4487  20ce				   .
   4488  20ce							; 
   4489  20ce
   4490  20ce				   .
   4491  20ce							; 
   4492  20ce
   4493  20ce				   .
   4494  20ce							; 
   4495  20ce
   4496  20ce				   .
   4497  20ce							; 
   4498  20ce
   4499  20ce				   .
   4500  20ce							; 
   4501  20ce
   4502  20ce				   .
   4503  20ce							; 
   4504  20ce
   4505  20ce				   .
   4506  20ce							; 
   4507  20ce
   4508  20ce				   .
   4509  20ce							; 
   4510  20ce
   4511  20ce				   .
   4512  20ce							; 
   4513  20ce
   4514  20ce				   .L0320		;  drawscreen
   4515  20ce
   4516  20ce		       85 ee		      sta	temp7
   4517  20d0		       a9 b0		      lda	#>(ret_point12-1)
   4518  20d2		       48		      pha
   4519  20d3		       a9 e5		      lda	#<(ret_point12-1)
   4520  20d5		       48		      pha
   4521  20d6		       a9 f4		      lda	#>(drawscreen-1)
   4522  20d8		       48		      pha
   4523  20d9		       a9 39		      lda	#<(drawscreen-1)
   4524  20db		       48		      pha
   4525  20dc		       a5 ee		      lda	temp7
   4526  20de		       48		      pha
   4527  20df		       8a		      txa
   4528  20e0		       48		      pha
   4529  20e1		       a2 04		      ldx	#4
   4530  20e3		       4c eb ff 	      jmp	BS_jsr
   4531  20e6				   ret_point12
   4532  20e6				   .
   4533  20e6							; 
   4534  20e6
   4535  20e6				   .
   4536  20e6							; 
   4537  20e6
   4538  20e6				   .
   4539  20e6							; 
   4540  20e6
   4541  20e6				   .
   4542  20e6							; 
   4543  20e6
   4544  20e6				   .
   4545  20e6							; 
   4546  20e6
   4547  20e6				   .
   4548  20e6							; 
   4549  20e6
   4550  20e6				   .
   4551  20e6							; 
   4552  20e6
   4553  20e6				   .L0321		;  goto __Continue_in_Bank_3 bank3
   4554  20e6
   4555  20e6		       85 ee		      sta	temp7
   4556  20e8		       a9 cf		      lda	#>(.__Continue_in_Bank_3-1)
   4557  20ea		       48		      pha
   4558  20eb		       a9 ff		      lda	#<(.__Continue_in_Bank_3-1)
   4559  20ed		       48		      pha
   4560  20ee		       a5 ee		      lda	temp7
   4561  20f0		       48		      pha
   4562  20f1		       8a		      txa
   4563  20f2		       48		      pha
   4564  20f3		       a2 03		      ldx	#3
   4565  20f5		       4c eb ff 	      jmp	BS_jsr
   4566  20f8				   .
   4567  20f8							; 
   4568  20f8
   4569  20f8				   .
   4570  20f8							; 
   4571  20f8
   4572  20f8				   .
   4573  20f8							; 
   4574  20f8
   4575  20f8				   .
   4576  20f8							; 
   4577  20f8
   4578  20f8				   .
   4579  20f8							; 
   4580  20f8
   4581  20f8				   .
   4582  20f8							; 
   4583  20f8
   4584  20f8				   .
   4585  20f8							; 
   4586  20f8
   4587  20f8				   .
   4588  20f8							; 
   4589  20f8
   4590  20f8				   .
   4591  20f8							; 
   4592  20f8
   4593  20f8				   .
   4594  20f8							; 
   4595  20f8
   4596  20f8				   .__Set_Current_Scene
   4597  20f8							; __Set_Current_Scene
   4598  20f8
   4599  20f8				   .
   4600  20f8							; 
   4601  20f8
   4602  20f8				   .
   4603  20f8							; 
   4604  20f8
   4605  20f8				   .
   4606  20f8							; 
   4607  20f8
   4608  20f8				   .
   4609  20f8							; 
   4610  20f8
   4611  20f8				   .L0322		;  COLUBK  =  _Data_Background_Color[_CurrentScene]
   4612  20f8
   4613  20f8		       a6 d6		      LDX	_CurrentScene
   4614  20fa		       bd d4 b8 	      LDA	_Data_Background_Color,x
   4615  20fd		       85 09		      STA	COLUBK
   4616  20ff				   .L0323		;  COLUPF  =  _Data_Foreground_Color[_CurrentScene]
   4617  20ff
   4618  20ff		       a6 d6		      LDX	_CurrentScene
   4619  2101		       bd f7 b8 	      LDA	_Data_Foreground_Color,x
   4620  2104		       85 08		      STA	COLUPF
   4621  2106				   .
   4622  2106							; 
   4623  2106
   4624  2106				   .
   4625  2106							; 
   4626  2106
   4627  2106				   .
   4628  2106							; 
   4629  2106
   4630  2106				   .
   4631  2106							; 
   4632  2106
   4633  2106				   .L0324		;  on _CurrentScene goto __s0 __s1 __s2 __s3 __s4 __s5 __s6 __s7 __s8 __s9 __sA __sB __sC __sD __sE __sF __sG __sH __sI __sJ __sK __sL __sM __sN __sO __sP __sQ __sR __sS __sT __sU __sV
   4634  2106
   4635  2106		       a6 d6		      LDX	_CurrentScene
   4636  2108		       bd 11 b1 	      LDA	.L0324jumptablehi,x
   4637  210b		       48		      PHA
   4638  210c		       bd 31 b1 	      LDA	.L0324jumptablelo,x
   4639  210f		       48		      PHA
   4640  2110		       60		      RTS
   4641  2111				   .L0324jumptablehi
   4642  2111		       b1		      .byte.b	>(.__s0-1)
   4643  2112		       b1		      .byte.b	>(.__s1-1)
   4644  2113		       b1		      .byte.b	>(.__s2-1)
   4645  2114		       b2		      .byte.b	>(.__s3-1)
   4646  2115		       b2		      .byte.b	>(.__s4-1)
   4647  2116		       b2		      .byte.b	>(.__s5-1)
   4648  2117		       b2		      .byte.b	>(.__s6-1)
   4649  2118		       b2		      .byte.b	>(.__s7-1)
   4650  2119		       b3		      .byte.b	>(.__s8-1)
   4651  211a		       b3		      .byte.b	>(.__s9-1)
   4652  211b		       b3		      .byte.b	>(.__sA-1)
   4653  211c		       b3		      .byte.b	>(.__sB-1)
   4654  211d		       b4		      .byte.b	>(.__sC-1)
   4655  211e		       b4		      .byte.b	>(.__sD-1)
   4656  211f		       b4		      .byte.b	>(.__sE-1)
   4657  2120		       b4		      .byte.b	>(.__sF-1)
   4658  2121		       b5		      .byte.b	>(.__sG-1)
   4659  2122		       b5		      .byte.b	>(.__sH-1)
   4660  2123		       b5		      .byte.b	>(.__sI-1)
   4661  2124		       b5		      .byte.b	>(.__sJ-1)
   4662  2125		       b6		      .byte.b	>(.__sK-1)
   4663  2126		       b6		      .byte.b	>(.__sL-1)
   4664  2127		       b6		      .byte.b	>(.__sM-1)
   4665  2128		       b6		      .byte.b	>(.__sN-1)
   4666  2129		       b6		      .byte.b	>(.__sO-1)
   4667  212a		       b7		      .byte.b	>(.__sP-1)
   4668  212b		       b7		      .byte.b	>(.__sQ-1)
   4669  212c		       b7		      .byte.b	>(.__sR-1)
   4670  212d		       b7		      .byte.b	>(.__sS-1)
   4671  212e		       b8		      .byte.b	>(.__sT-1)
   4672  212f		       b8		      .byte.b	>(.__sU-1)
   4673  2130		       b8		      .byte.b	>(.__sV-1)
   4674  2131				   .L0324jumptablelo
   4675  2131		       50		      .byte.b	<(.__s0-1)
   4676  2132		       8c		      .byte.b	<(.__s1-1)
   4677  2133		       c8		      .byte.b	<(.__s2-1)
   4678  2134		       04		      .byte.b	<(.__s3-1)
   4679  2135		       40		      .byte.b	<(.__s4-1)
   4680  2136		       7c		      .byte.b	<(.__s5-1)
   4681  2137		       b8		      .byte.b	<(.__s6-1)
   4682  2138		       f4		      .byte.b	<(.__s7-1)
   4683  2139		       30		      .byte.b	<(.__s8-1)
   4684  213a		       6c		      .byte.b	<(.__s9-1)
   4685  213b		       a8		      .byte.b	<(.__sA-1)
   4686  213c		       e4		      .byte.b	<(.__sB-1)
   4687  213d		       20		      .byte.b	<(.__sC-1)
   4688  213e		       5c		      .byte.b	<(.__sD-1)
   4689  213f		       98		      .byte.b	<(.__sE-1)
   4690  2140		       d4		      .byte.b	<(.__sF-1)
   4691  2141		       10		      .byte.b	<(.__sG-1)
   4692  2142		       4c		      .byte.b	<(.__sH-1)
   4693  2143		       88		      .byte.b	<(.__sI-1)
   4694  2144		       c4		      .byte.b	<(.__sJ-1)
   4695  2145		       00		      .byte.b	<(.__sK-1)
   4696  2146		       3c		      .byte.b	<(.__sL-1)
   4697  2147		       78		      .byte.b	<(.__sM-1)
   4698  2148		       b4		      .byte.b	<(.__sN-1)
   4699  2149		       f0		      .byte.b	<(.__sO-1)
   4700  214a		       2c		      .byte.b	<(.__sP-1)
   4701  214b		       68		      .byte.b	<(.__sQ-1)
   4702  214c		       a4		      .byte.b	<(.__sR-1)
   4703  214d		       e0		      .byte.b	<(.__sS-1)
   4704  214e		       1c		      .byte.b	<(.__sT-1)
   4705  214f		       58		      .byte.b	<(.__sU-1)
   4706  2150		       94		      .byte.b	<(.__sV-1)
   4707  2151				   .
   4708  2151							; 
   4709  2151
   4710  2151				   .
   4711  2151							; 
   4712  2151
   4713  2151				   .__s0
   4714  2151							; __s0
   4715  2151
   4716  2151				   .L0325		;  playfield:
   4717  2151
   4718  2151				  -	      ifconst	pfres
   4719  2151				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   4720  2151					      else
   4721  2151		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   4722  2153					      endif
   4723  2153		       4c 82 b1 	      jmp	pflabel1
   4724  2156				   PF_data1
   4725  2156		       00 00		      .byte.b	%00000000, %00000000
   4726  2158					      if	(pfwidth>2)
   4727  2158		       00 00		      .byte.b	%00000000, %00000000
   4728  215a					      endif
   4729  215a		       00 00		      .byte.b	%00000000, %00000000
   4730  215c					      if	(pfwidth>2)
   4731  215c		       00 00		      .byte.b	%00000000, %00000000
   4732  215e					      endif
   4733  215e		       00 40		      .byte.b	%00000000, %01000000
   4734  2160					      if	(pfwidth>2)
   4735  2160		       00 00		      .byte.b	%00000000, %00000000
   4736  2162					      endif
   4737  2162		       00 e0		      .byte.b	%00000000, %11100000
   4738  2164					      if	(pfwidth>2)
   4739  2164		       01 00		      .byte.b	%00000001, %00000000
   4740  2166					      endif
   4741  2166		       00 f0		      .byte.b	%00000000, %11110000
   4742  2168					      if	(pfwidth>2)
   4743  2168		       83 01		      .byte.b	%10000011, %00000001
   4744  216a					      endif
   4745  216a		       02 00		      .byte.b	%00000010, %00000000
   4746  216c					      if	(pfwidth>2)
   4747  216c		       07 03		      .byte.b	%00000111, %00000011
   4748  216e					      endif
   4749  216e		       07 00		      .byte.b	%00000111, %00000000
   4750  2170					      if	(pfwidth>2)
   4751  2170		       0f 07		      .byte.b	%00001111, %00000111
   4752  2172					      endif
   4753  2172		       0f 01		      .byte.b	%00001111, %00000001
   4754  2174					      if	(pfwidth>2)
   4755  2174		       1f 0f		      .byte.b	%00011111, %00001111
   4756  2176					      endif
   4757  2176		       1f 03		      .byte.b	%00011111, %00000011
   4758  2178					      if	(pfwidth>2)
   4759  2178		       00 00		      .byte.b	%00000000, %00000000
   4760  217a					      endif
   4761  217a		       00 00		      .byte.b	%00000000, %00000000
   4762  217c					      if	(pfwidth>2)
   4763  217c		       00 00		      .byte.b	%00000000, %00000000
   4764  217e					      endif
   4765  217e		       00 00		      .byte.b	%00000000, %00000000
   4766  2180					      if	(pfwidth>2)
   4767  2180		       00 00		      .byte.b	%00000000, %00000000
   4768  2182					      endif
   4769  2182				   pflabel1
   4770  2182		       bd 56 b1 	      lda	PF_data1,x
   4771  2185		       95 a4		      sta	playfield,x
   4772  2187		       ca		      dex
   4773  2188		       10 f8		      bpl	pflabel1
   4774  218a				   .
   4775  218a							; 
   4776  218a
   4777  218a				   .L0326		;  goto __Done_Next_Room
   4778  218a
   4779  218a		       4c ce b0 	      jmp	.__Done_Next_Room
   4780  218d
   4781  218d				   .
   4782  218d							; 
   4783  218d
   4784  218d				   .
   4785  218d							; 
   4786  218d
   4787  218d				   .__s1
   4788  218d							; __s1
   4789  218d
   4790  218d				   .L0327		;  playfield:
   4791  218d
   4792  218d				  -	      ifconst	pfres
   4793  218d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   4794  218d					      else
   4795  218d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   4796  218f					      endif
   4797  218f		       4c be b1 	      jmp	pflabel2
   4798  2192				   PF_data2
   4799  2192		       00 00		      .byte.b	%00000000, %00000000
   4800  2194					      if	(pfwidth>2)
   4801  2194		       00 00		      .byte.b	%00000000, %00000000
   4802  2196					      endif
   4803  2196		       00 00		      .byte.b	%00000000, %00000000
   4804  2198					      if	(pfwidth>2)
   4805  2198		       00 00		      .byte.b	%00000000, %00000000
   4806  219a					      endif
   4807  219a		       0f f8		      .byte.b	%00001111, %11111000
   4808  219c					      if	(pfwidth>2)
   4809  219c		       f8 0f		      .byte.b	%11111000, %00001111
   4810  219e					      endif
   4811  219e		       00 00		      .byte.b	%00000000, %00000000
   4812  21a0					      if	(pfwidth>2)
   4813  21a0		       00 00		      .byte.b	%00000000, %00000000
   4814  21a2					      endif
   4815  21a2		       00 00		      .byte.b	%00000000, %00000000
   4816  21a4					      if	(pfwidth>2)
   4817  21a4		       00 00		      .byte.b	%00000000, %00000000
   4818  21a6					      endif
   4819  21a6		       0f ff		      .byte.b	%00001111, %11111111
   4820  21a8					      if	(pfwidth>2)
   4821  21a8		       ff 0f		      .byte.b	%11111111, %00001111
   4822  21aa					      endif
   4823  21aa		       00 00		      .byte.b	%00000000, %00000000
   4824  21ac					      if	(pfwidth>2)
   4825  21ac		       00 00		      .byte.b	%00000000, %00000000
   4826  21ae					      endif
   4827  21ae		       00 00		      .byte.b	%00000000, %00000000
   4828  21b0					      if	(pfwidth>2)
   4829  21b0		       00 00		      .byte.b	%00000000, %00000000
   4830  21b2					      endif
   4831  21b2		       0f f8		      .byte.b	%00001111, %11111000
   4832  21b4					      if	(pfwidth>2)
   4833  21b4		       f8 0f		      .byte.b	%11111000, %00001111
   4834  21b6					      endif
   4835  21b6		       00 00		      .byte.b	%00000000, %00000000
   4836  21b8					      if	(pfwidth>2)
   4837  21b8		       00 00		      .byte.b	%00000000, %00000000
   4838  21ba					      endif
   4839  21ba		       00 00		      .byte.b	%00000000, %00000000
   4840  21bc					      if	(pfwidth>2)
   4841  21bc		       00 00		      .byte.b	%00000000, %00000000
   4842  21be					      endif
   4843  21be				   pflabel2
   4844  21be		       bd 92 b1 	      lda	PF_data2,x
   4845  21c1		       95 a4		      sta	playfield,x
   4846  21c3		       ca		      dex
   4847  21c4		       10 f8		      bpl	pflabel2
   4848  21c6				   .
   4849  21c6							; 
   4850  21c6
   4851  21c6				   .L0328		;  goto __Done_Next_Room
   4852  21c6
   4853  21c6		       4c ce b0 	      jmp	.__Done_Next_Room
   4854  21c9
   4855  21c9				   .
   4856  21c9							; 
   4857  21c9
   4858  21c9				   .
   4859  21c9							; 
   4860  21c9
   4861  21c9				   .__s2
   4862  21c9							; __s2
   4863  21c9
   4864  21c9				   .L0329		;  playfield:
   4865  21c9
   4866  21c9				  -	      ifconst	pfres
   4867  21c9				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   4868  21c9					      else
   4869  21c9		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   4870  21cb					      endif
   4871  21cb		       4c fa b1 	      jmp	pflabel3
   4872  21ce				   PF_data3
   4873  21ce		       00 00		      .byte.b	%00000000, %00000000
   4874  21d0					      if	(pfwidth>2)
   4875  21d0		       00 00		      .byte.b	%00000000, %00000000
   4876  21d2					      endif
   4877  21d2		       00 00		      .byte.b	%00000000, %00000000
   4878  21d4					      if	(pfwidth>2)
   4879  21d4		       00 00		      .byte.b	%00000000, %00000000
   4880  21d6					      endif
   4881  21d6		       01 03		      .byte.b	%00000001, %00000011
   4882  21d8					      if	(pfwidth>2)
   4883  21d8		       03 01		      .byte.b	%00000011, %00000001
   4884  21da					      endif
   4885  21da		       03 07		      .byte.b	%00000011, %00000111
   4886  21dc					      if	(pfwidth>2)
   4887  21dc		       07 03		      .byte.b	%00000111, %00000011
   4888  21de					      endif
   4889  21de		       01 03		      .byte.b	%00000001, %00000011
   4890  21e0					      if	(pfwidth>2)
   4891  21e0		       03 01		      .byte.b	%00000011, %00000001
   4892  21e2					      endif
   4893  21e2		       00 00		      .byte.b	%00000000, %00000000
   4894  21e4					      if	(pfwidth>2)
   4895  21e4		       00 00		      .byte.b	%00000000, %00000000
   4896  21e6					      endif
   4897  21e6		       00 c0		      .byte.b	%00000000, %11000000
   4898  21e8					      if	(pfwidth>2)
   4899  21e8		       c0 00		      .byte.b	%11000000, %00000000
   4900  21ea					      endif
   4901  21ea		       00 e0		      .byte.b	%00000000, %11100000
   4902  21ec					      if	(pfwidth>2)
   4903  21ec		       e0 00		      .byte.b	%11100000, %00000000
   4904  21ee					      endif
   4905  21ee		       00 c0		      .byte.b	%00000000, %11000000
   4906  21f0					      if	(pfwidth>2)
   4907  21f0		       c0 00		      .byte.b	%11000000, %00000000
   4908  21f2					      endif
   4909  21f2		       00 00		      .byte.b	%00000000, %00000000
   4910  21f4					      if	(pfwidth>2)
   4911  21f4		       00 00		      .byte.b	%00000000, %00000000
   4912  21f6					      endif
   4913  21f6		       00 00		      .byte.b	%00000000, %00000000
   4914  21f8					      if	(pfwidth>2)
   4915  21f8		       00 00		      .byte.b	%00000000, %00000000
   4916  21fa					      endif
   4917  21fa				   pflabel3
   4918  21fa		       bd ce b1 	      lda	PF_data3,x
   4919  21fd		       95 a4		      sta	playfield,x
   4920  21ff		       ca		      dex
   4921  2200		       10 f8		      bpl	pflabel3
   4922  2202				   .
   4923  2202							; 
   4924  2202
   4925  2202				   .L0330		;  goto __Done_Next_Room
   4926  2202
   4927  2202		       4c ce b0 	      jmp	.__Done_Next_Room
   4928  2205
   4929  2205				   .
   4930  2205							; 
   4931  2205
   4932  2205				   .
   4933  2205							; 
   4934  2205
   4935  2205				   .__s3
   4936  2205							; __s3
   4937  2205
   4938  2205				   .L0331		;  playfield:
   4939  2205
   4940  2205				  -	      ifconst	pfres
   4941  2205				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   4942  2205					      else
   4943  2205		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   4944  2207					      endif
   4945  2207		       4c 36 b2 	      jmp	pflabel4
   4946  220a				   PF_data4
   4947  220a		       00 00		      .byte.b	%00000000, %00000000
   4948  220c					      if	(pfwidth>2)
   4949  220c		       00 00		      .byte.b	%00000000, %00000000
   4950  220e					      endif
   4951  220e		       00 00		      .byte.b	%00000000, %00000000
   4952  2210					      if	(pfwidth>2)
   4953  2210		       00 00		      .byte.b	%00000000, %00000000
   4954  2212					      endif
   4955  2212		       0f f1		      .byte.b	%00001111, %11110001
   4956  2214					      if	(pfwidth>2)
   4957  2214		       e3 0f		      .byte.b	%11100011, %00001111
   4958  2216					      endif
   4959  2216		       0f f1		      .byte.b	%00001111, %11110001
   4960  2218					      if	(pfwidth>2)
   4961  2218		       e3 0f		      .byte.b	%11100011, %00001111
   4962  221a					      endif
   4963  221a		       00 00		      .byte.b	%00000000, %00000000
   4964  221c					      if	(pfwidth>2)
   4965  221c		       00 00		      .byte.b	%00000000, %00000000
   4966  221e					      endif
   4967  221e		       00 00		      .byte.b	%00000000, %00000000
   4968  2220					      if	(pfwidth>2)
   4969  2220		       00 00		      .byte.b	%00000000, %00000000
   4970  2222					      endif
   4971  2222		       00 00		      .byte.b	%00000000, %00000000
   4972  2224					      if	(pfwidth>2)
   4973  2224		       00 00		      .byte.b	%00000000, %00000000
   4974  2226					      endif
   4975  2226		       0f f1		      .byte.b	%00001111, %11110001
   4976  2228					      if	(pfwidth>2)
   4977  2228		       e3 0f		      .byte.b	%11100011, %00001111
   4978  222a					      endif
   4979  222a		       0f f1		      .byte.b	%00001111, %11110001
   4980  222c					      if	(pfwidth>2)
   4981  222c		       e3 0f		      .byte.b	%11100011, %00001111
   4982  222e					      endif
   4983  222e		       00 00		      .byte.b	%00000000, %00000000
   4984  2230					      if	(pfwidth>2)
   4985  2230		       00 00		      .byte.b	%00000000, %00000000
   4986  2232					      endif
   4987  2232		       00 00		      .byte.b	%00000000, %00000000
   4988  2234					      if	(pfwidth>2)
   4989  2234		       00 00		      .byte.b	%00000000, %00000000
   4990  2236					      endif
   4991  2236				   pflabel4
   4992  2236		       bd 0a b2 	      lda	PF_data4,x
   4993  2239		       95 a4		      sta	playfield,x
   4994  223b		       ca		      dex
   4995  223c		       10 f8		      bpl	pflabel4
   4996  223e				   .
   4997  223e							; 
   4998  223e
   4999  223e				   .L0332		;  goto __Done_Next_Room
   5000  223e
   5001  223e		       4c ce b0 	      jmp	.__Done_Next_Room
   5002  2241
   5003  2241				   .
   5004  2241							; 
   5005  2241
   5006  2241				   .
   5007  2241							; 
   5008  2241
   5009  2241				   .__s4
   5010  2241							; __s4
   5011  2241
   5012  2241				   .L0333		;  playfield:
   5013  2241
   5014  2241				  -	      ifconst	pfres
   5015  2241				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5016  2241					      else
   5017  2241		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5018  2243					      endif
   5019  2243		       4c 72 b2 	      jmp	pflabel5
   5020  2246				   PF_data5
   5021  2246		       00 00		      .byte.b	%00000000, %00000000
   5022  2248					      if	(pfwidth>2)
   5023  2248		       00 00		      .byte.b	%00000000, %00000000
   5024  224a					      endif
   5025  224a		       00 00		      .byte.b	%00000000, %00000000
   5026  224c					      if	(pfwidth>2)
   5027  224c		       00 00		      .byte.b	%00000000, %00000000
   5028  224e					      endif
   5029  224e		       00 80		      .byte.b	%00000000, %10000000
   5030  2250					      if	(pfwidth>2)
   5031  2250		       00 00		      .byte.b	%00000000, %00000000
   5032  2252					      endif
   5033  2252		       00 c0		      .byte.b	%00000000, %11000000
   5034  2254					      if	(pfwidth>2)
   5035  2254		       80 00		      .byte.b	%10000000, %00000000
   5036  2256					      endif
   5037  2256		       00 e0		      .byte.b	%00000000, %11100000
   5038  2258					      if	(pfwidth>2)
   5039  2258		       c0 00		      .byte.b	%11000000, %00000000
   5040  225a					      endif
   5041  225a		       00 f8		      .byte.b	%00000000, %11111000
   5042  225c					      if	(pfwidth>2)
   5043  225c		       f0 00		      .byte.b	%11110000, %00000000
   5044  225e					      endif
   5045  225e		       00 fe		      .byte.b	%00000000, %11111110
   5046  2260					      if	(pfwidth>2)
   5047  2260		       fc 00		      .byte.b	%11111100, %00000000
   5048  2262					      endif
   5049  2262		       01 ff		      .byte.b	%00000001, %11111111
   5050  2264					      if	(pfwidth>2)
   5051  2264		       ff 00		      .byte.b	%11111111, %00000000
   5052  2266					      endif
   5053  2266		       07 ff		      .byte.b	%00000111, %11111111
   5054  2268					      if	(pfwidth>2)
   5055  2268		       ff 03		      .byte.b	%11111111, %00000011
   5056  226a					      endif
   5057  226a		       00 00		      .byte.b	%00000000, %00000000
   5058  226c					      if	(pfwidth>2)
   5059  226c		       00 00		      .byte.b	%00000000, %00000000
   5060  226e					      endif
   5061  226e		       00 00		      .byte.b	%00000000, %00000000
   5062  2270					      if	(pfwidth>2)
   5063  2270		       00 00		      .byte.b	%00000000, %00000000
   5064  2272					      endif
   5065  2272				   pflabel5
   5066  2272		       bd 46 b2 	      lda	PF_data5,x
   5067  2275		       95 a4		      sta	playfield,x
   5068  2277		       ca		      dex
   5069  2278		       10 f8		      bpl	pflabel5
   5070  227a				   .
   5071  227a							; 
   5072  227a
   5073  227a				   .L0334		;  goto __Done_Next_Room
   5074  227a
   5075  227a		       4c ce b0 	      jmp	.__Done_Next_Room
   5076  227d
   5077  227d				   .
   5078  227d							; 
   5079  227d
   5080  227d				   .
   5081  227d							; 
   5082  227d
   5083  227d				   .__s5
   5084  227d							; __s5
   5085  227d
   5086  227d				   .L0335		;  playfield:
   5087  227d
   5088  227d				  -	      ifconst	pfres
   5089  227d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5090  227d					      else
   5091  227d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5092  227f					      endif
   5093  227f		       4c ae b2 	      jmp	pflabel6
   5094  2282				   PF_data6
   5095  2282		       00 00		      .byte.b	%00000000, %00000000
   5096  2284					      if	(pfwidth>2)
   5097  2284		       00 00		      .byte.b	%00000000, %00000000
   5098  2286					      endif
   5099  2286		       00 00		      .byte.b	%00000000, %00000000
   5100  2288					      if	(pfwidth>2)
   5101  2288		       00 00		      .byte.b	%00000000, %00000000
   5102  228a					      endif
   5103  228a		       08 04		      .byte.b	%00001000, %00000100
   5104  228c					      if	(pfwidth>2)
   5105  228c		       00 00		      .byte.b	%00000000, %00000000
   5106  228e					      endif
   5107  228e		       1c 0e		      .byte.b	%00011100, %00001110
   5108  2290					      if	(pfwidth>2)
   5109  2290		       04 00		      .byte.b	%00000100, %00000000
   5110  2292					      endif
   5111  2292		       08 04		      .byte.b	%00001000, %00000100
   5112  2294					      if	(pfwidth>2)
   5113  2294		       0e 00		      .byte.b	%00001110, %00000000
   5114  2296					      endif
   5115  2296		       00 00		      .byte.b	%00000000, %00000000
   5116  2298					      if	(pfwidth>2)
   5117  2298		       04 00		      .byte.b	%00000100, %00000000
   5118  229a					      endif
   5119  229a		       00 80		      .byte.b	%00000000, %10000000
   5120  229c					      if	(pfwidth>2)
   5121  229c		       00 04		      .byte.b	%00000000, %00000100
   5122  229e					      endif
   5123  229e		       00 c0		      .byte.b	%00000000, %11000000
   5124  22a0					      if	(pfwidth>2)
   5125  22a0		       80 0e		      .byte.b	%10000000, %00001110
   5126  22a2					      endif
   5127  22a2		       00 80		      .byte.b	%00000000, %10000000
   5128  22a4					      if	(pfwidth>2)
   5129  22a4		       00 04		      .byte.b	%00000000, %00000100
   5130  22a6					      endif
   5131  22a6		       00 00		      .byte.b	%00000000, %00000000
   5132  22a8					      if	(pfwidth>2)
   5133  22a8		       00 00		      .byte.b	%00000000, %00000000
   5134  22aa					      endif
   5135  22aa		       00 00		      .byte.b	%00000000, %00000000
   5136  22ac					      if	(pfwidth>2)
   5137  22ac		       00 00		      .byte.b	%00000000, %00000000
   5138  22ae					      endif
   5139  22ae				   pflabel6
   5140  22ae		       bd 82 b2 	      lda	PF_data6,x
   5141  22b1		       95 a4		      sta	playfield,x
   5142  22b3		       ca		      dex
   5143  22b4		       10 f8		      bpl	pflabel6
   5144  22b6				   .
   5145  22b6							; 
   5146  22b6
   5147  22b6				   .L0336		;  goto __Done_Next_Room
   5148  22b6
   5149  22b6		       4c ce b0 	      jmp	.__Done_Next_Room
   5150  22b9
   5151  22b9				   .
   5152  22b9							; 
   5153  22b9
   5154  22b9				   .
   5155  22b9							; 
   5156  22b9
   5157  22b9				   .__s6
   5158  22b9							; __s6
   5159  22b9
   5160  22b9				   .L0337		;  playfield:
   5161  22b9
   5162  22b9				  -	      ifconst	pfres
   5163  22b9				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5164  22b9					      else
   5165  22b9		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5166  22bb					      endif
   5167  22bb		       4c ea b2 	      jmp	pflabel7
   5168  22be				   PF_data7
   5169  22be		       00 00		      .byte.b	%00000000, %00000000
   5170  22c0					      if	(pfwidth>2)
   5171  22c0		       00 00		      .byte.b	%00000000, %00000000
   5172  22c2					      endif
   5173  22c2		       00 00		      .byte.b	%00000000, %00000000
   5174  22c4					      if	(pfwidth>2)
   5175  22c4		       00 00		      .byte.b	%00000000, %00000000
   5176  22c6					      endif
   5177  22c6		       00 30		      .byte.b	%00000000, %00110000
   5178  22c8					      if	(pfwidth>2)
   5179  22c8		       30 00		      .byte.b	%00110000, %00000000
   5180  22ca					      endif
   5181  22ca		       00 30		      .byte.b	%00000000, %00110000
   5182  22cc					      if	(pfwidth>2)
   5183  22cc		       30 00		      .byte.b	%00110000, %00000000
   5184  22ce					      endif
   5185  22ce		       0f 03		      .byte.b	%00001111, %00000011
   5186  22d0					      if	(pfwidth>2)
   5187  22d0		       03 0f		      .byte.b	%00000011, %00001111
   5188  22d2					      endif
   5189  22d2		       0f 03		      .byte.b	%00001111, %00000011
   5190  22d4					      if	(pfwidth>2)
   5191  22d4		       03 0f		      .byte.b	%00000011, %00001111
   5192  22d6					      endif
   5193  22d6		       0f 03		      .byte.b	%00001111, %00000011
   5194  22d8					      if	(pfwidth>2)
   5195  22d8		       03 0f		      .byte.b	%00000011, %00001111
   5196  22da					      endif
   5197  22da		       00 30		      .byte.b	%00000000, %00110000
   5198  22dc					      if	(pfwidth>2)
   5199  22dc		       30 00		      .byte.b	%00110000, %00000000
   5200  22de					      endif
   5201  22de		       00 30		      .byte.b	%00000000, %00110000
   5202  22e0					      if	(pfwidth>2)
   5203  22e0		       30 00		      .byte.b	%00110000, %00000000
   5204  22e2					      endif
   5205  22e2		       00 00		      .byte.b	%00000000, %00000000
   5206  22e4					      if	(pfwidth>2)
   5207  22e4		       00 00		      .byte.b	%00000000, %00000000
   5208  22e6					      endif
   5209  22e6		       00 00		      .byte.b	%00000000, %00000000
   5210  22e8					      if	(pfwidth>2)
   5211  22e8		       00 00		      .byte.b	%00000000, %00000000
   5212  22ea					      endif
   5213  22ea				   pflabel7
   5214  22ea		       bd be b2 	      lda	PF_data7,x
   5215  22ed		       95 a4		      sta	playfield,x
   5216  22ef		       ca		      dex
   5217  22f0		       10 f8		      bpl	pflabel7
   5218  22f2				   .
   5219  22f2							; 
   5220  22f2
   5221  22f2				   .L0338		;  goto __Done_Next_Room
   5222  22f2
   5223  22f2		       4c ce b0 	      jmp	.__Done_Next_Room
   5224  22f5
   5225  22f5				   .
   5226  22f5							; 
   5227  22f5
   5228  22f5				   .
   5229  22f5							; 
   5230  22f5
   5231  22f5				   .__s7
   5232  22f5							; __s7
   5233  22f5
   5234  22f5				   .L0339		;  playfield:
   5235  22f5
   5236  22f5				  -	      ifconst	pfres
   5237  22f5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5238  22f5					      else
   5239  22f5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5240  22f7					      endif
   5241  22f7		       4c 26 b3 	      jmp	pflabel8
   5242  22fa				   PF_data8
   5243  22fa		       00 00		      .byte.b	%00000000, %00000000
   5244  22fc					      if	(pfwidth>2)
   5245  22fc		       00 00		      .byte.b	%00000000, %00000000
   5246  22fe					      endif
   5247  22fe		       00 00		      .byte.b	%00000000, %00000000
   5248  2300					      if	(pfwidth>2)
   5249  2300		       00 00		      .byte.b	%00000000, %00000000
   5250  2302					      endif
   5251  2302		       00 00		      .byte.b	%00000000, %00000000
   5252  2304					      if	(pfwidth>2)
   5253  2304		       ff 00		      .byte.b	%11111111, %00000000
   5254  2306					      endif
   5255  2306		       00 fc		      .byte.b	%00000000, %11111100
   5256  2308					      if	(pfwidth>2)
   5257  2308		       ff 01		      .byte.b	%11111111, %00000001
   5258  230a					      endif
   5259  230a		       00 fe		      .byte.b	%00000000, %11111110
   5260  230c					      if	(pfwidth>2)
   5261  230c		       fe 00		      .byte.b	%11111110, %00000000
   5262  230e					      endif
   5263  230e		       00 ff		      .byte.b	%00000000, %11111111
   5264  2310					      if	(pfwidth>2)
   5265  2310		       fe 00		      .byte.b	%11111110, %00000000
   5266  2312					      endif
   5267  2312		       00 ff		      .byte.b	%00000000, %11111111
   5268  2314					      if	(pfwidth>2)
   5269  2314		       ff 03		      .byte.b	%11111111, %00000011
   5270  2316					      endif
   5271  2316		       00 fe		      .byte.b	%00000000, %11111110
   5272  2318					      if	(pfwidth>2)
   5273  2318		       ff 03		      .byte.b	%11111111, %00000011
   5274  231a					      endif
   5275  231a		       00 f0		      .byte.b	%00000000, %11110000
   5276  231c					      if	(pfwidth>2)
   5277  231c		       9f 01		      .byte.b	%10011111, %00000001
   5278  231e					      endif
   5279  231e		       00 00		      .byte.b	%00000000, %00000000
   5280  2320					      if	(pfwidth>2)
   5281  2320		       00 00		      .byte.b	%00000000, %00000000
   5282  2322					      endif
   5283  2322		       00 00		      .byte.b	%00000000, %00000000
   5284  2324					      if	(pfwidth>2)
   5285  2324		       00 00		      .byte.b	%00000000, %00000000
   5286  2326					      endif
   5287  2326				   pflabel8
   5288  2326		       bd fa b2 	      lda	PF_data8,x
   5289  2329		       95 a4		      sta	playfield,x
   5290  232b		       ca		      dex
   5291  232c		       10 f8		      bpl	pflabel8
   5292  232e				   .
   5293  232e							; 
   5294  232e
   5295  232e				   .L0340		;  goto __Done_Next_Room
   5296  232e
   5297  232e		       4c ce b0 	      jmp	.__Done_Next_Room
   5298  2331
   5299  2331				   .
   5300  2331							; 
   5301  2331
   5302  2331				   .
   5303  2331							; 
   5304  2331
   5305  2331				   .__s8
   5306  2331							; __s8
   5307  2331
   5308  2331				   .L0341		;  playfield:
   5309  2331
   5310  2331				  -	      ifconst	pfres
   5311  2331				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5312  2331					      else
   5313  2331		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5314  2333					      endif
   5315  2333		       4c 62 b3 	      jmp	pflabel9
   5316  2336				   PF_data9
   5317  2336		       00 00		      .byte.b	%00000000, %00000000
   5318  2338					      if	(pfwidth>2)
   5319  2338		       00 00		      .byte.b	%00000000, %00000000
   5320  233a					      endif
   5321  233a		       00 00		      .byte.b	%00000000, %00000000
   5322  233c					      if	(pfwidth>2)
   5323  233c		       00 00		      .byte.b	%00000000, %00000000
   5324  233e					      endif
   5325  233e		       00 ff		      .byte.b	%00000000, %11111111
   5326  2340					      if	(pfwidth>2)
   5327  2340		       80 02		      .byte.b	%10000000, %00000010
   5328  2342					      endif
   5329  2342		       03 ff		      .byte.b	%00000011, %11111111
   5330  2344					      if	(pfwidth>2)
   5331  2344		       c0 07		      .byte.b	%11000000, %00000111
   5332  2346					      endif
   5333  2346		       07 ff		      .byte.b	%00000111, %11111111
   5334  2348					      if	(pfwidth>2)
   5335  2348		       c1 0f		      .byte.b	%11000001, %00001111
   5336  234a					      endif
   5337  234a		       07 ff		      .byte.b	%00000111, %11111111
   5338  234c					      if	(pfwidth>2)
   5339  234c		       83 1f		      .byte.b	%10000011, %00011111
   5340  234e					      endif
   5341  234e		       03 fc		      .byte.b	%00000011, %11111100
   5342  2350					      if	(pfwidth>2)
   5343  2350		       80 02		      .byte.b	%10000000, %00000010
   5344  2352					      endif
   5345  2352		       03 fc		      .byte.b	%00000011, %11111100
   5346  2354					      if	(pfwidth>2)
   5347  2354		       00 02		      .byte.b	%00000000, %00000010
   5348  2356					      endif
   5349  2356		       00 00		      .byte.b	%00000000, %00000000
   5350  2358					      if	(pfwidth>2)
   5351  2358		       00 00		      .byte.b	%00000000, %00000000
   5352  235a					      endif
   5353  235a		       00 00		      .byte.b	%00000000, %00000000
   5354  235c					      if	(pfwidth>2)
   5355  235c		       00 00		      .byte.b	%00000000, %00000000
   5356  235e					      endif
   5357  235e		       00 00		      .byte.b	%00000000, %00000000
   5358  2360					      if	(pfwidth>2)
   5359  2360		       00 00		      .byte.b	%00000000, %00000000
   5360  2362					      endif
   5361  2362				   pflabel9
   5362  2362		       bd 36 b3 	      lda	PF_data9,x
   5363  2365		       95 a4		      sta	playfield,x
   5364  2367		       ca		      dex
   5365  2368		       10 f8		      bpl	pflabel9
   5366  236a				   .
   5367  236a							; 
   5368  236a
   5369  236a				   .L0342		;  goto __Done_Next_Room
   5370  236a
   5371  236a		       4c ce b0 	      jmp	.__Done_Next_Room
   5372  236d
   5373  236d				   .
   5374  236d							; 
   5375  236d
   5376  236d				   .
   5377  236d							; 
   5378  236d
   5379  236d				   .__s9
   5380  236d							; __s9
   5381  236d
   5382  236d				   .L0343		;  playfield:
   5383  236d
   5384  236d				  -	      ifconst	pfres
   5385  236d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5386  236d					      else
   5387  236d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5388  236f					      endif
   5389  236f		       4c 9e b3 	      jmp	pflabel10
   5390  2372				   PF_data10
   5391  2372		       00 00		      .byte.b	%00000000, %00000000
   5392  2374					      if	(pfwidth>2)
   5393  2374		       00 00		      .byte.b	%00000000, %00000000
   5394  2376					      endif
   5395  2376		       00 00		      .byte.b	%00000000, %00000000
   5396  2378					      if	(pfwidth>2)
   5397  2378		       00 00		      .byte.b	%00000000, %00000000
   5398  237a					      endif
   5399  237a		       00 00		      .byte.b	%00000000, %00000000
   5400  237c					      if	(pfwidth>2)
   5401  237c		       00 00		      .byte.b	%00000000, %00000000
   5402  237e					      endif
   5403  237e		       07 00		      .byte.b	%00000111, %00000000
   5404  2380					      if	(pfwidth>2)
   5405  2380		       00 00		      .byte.b	%00000000, %00000000
   5406  2382					      endif
   5407  2382		       0f 01		      .byte.b	%00001111, %00000001
   5408  2384					      if	(pfwidth>2)
   5409  2384		       0e 00		      .byte.b	%00001110, %00000000
   5410  2386					      endif
   5411  2386		       0f 01		      .byte.b	%00001111, %00000001
   5412  2388					      if	(pfwidth>2)
   5413  2388		       1f 00		      .byte.b	%00011111, %00000000
   5414  238a					      endif
   5415  238a		       07 00		      .byte.b	%00000111, %00000000
   5416  238c					      if	(pfwidth>2)
   5417  238c		       1f 00		      .byte.b	%00011111, %00000000
   5418  238e					      endif
   5419  238e		       00 00		      .byte.b	%00000000, %00000000
   5420  2390					      if	(pfwidth>2)
   5421  2390		       0e 00		      .byte.b	%00001110, %00000000
   5422  2392					      endif
   5423  2392		       00 00		      .byte.b	%00000000, %00000000
   5424  2394					      if	(pfwidth>2)
   5425  2394		       00 00		      .byte.b	%00000000, %00000000
   5426  2396					      endif
   5427  2396		       00 00		      .byte.b	%00000000, %00000000
   5428  2398					      if	(pfwidth>2)
   5429  2398		       00 00		      .byte.b	%00000000, %00000000
   5430  239a					      endif
   5431  239a		       00 00		      .byte.b	%00000000, %00000000
   5432  239c					      if	(pfwidth>2)
   5433  239c		       00 00		      .byte.b	%00000000, %00000000
   5434  239e					      endif
   5435  239e				   pflabel10
   5436  239e		       bd 72 b3 	      lda	PF_data10,x
   5437  23a1		       95 a4		      sta	playfield,x
   5438  23a3		       ca		      dex
   5439  23a4		       10 f8		      bpl	pflabel10
   5440  23a6				   .
   5441  23a6							; 
   5442  23a6
   5443  23a6				   .L0344		;  goto __Done_Next_Room
   5444  23a6
   5445  23a6		       4c ce b0 	      jmp	.__Done_Next_Room
   5446  23a9
   5447  23a9				   .
   5448  23a9							; 
   5449  23a9
   5450  23a9				   .
   5451  23a9							; 
   5452  23a9
   5453  23a9				   .__sA
   5454  23a9							; __sA
   5455  23a9
   5456  23a9				   .L0345		;  playfield:
   5457  23a9
   5458  23a9				  -	      ifconst	pfres
   5459  23a9				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5460  23a9					      else
   5461  23a9		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5462  23ab					      endif
   5463  23ab		       4c da b3 	      jmp	pflabel11
   5464  23ae				   PF_data11
   5465  23ae		       00 00		      .byte.b	%00000000, %00000000
   5466  23b0					      if	(pfwidth>2)
   5467  23b0		       00 00		      .byte.b	%00000000, %00000000
   5468  23b2					      endif
   5469  23b2		       00 00		      .byte.b	%00000000, %00000000
   5470  23b4					      if	(pfwidth>2)
   5471  23b4		       00 00		      .byte.b	%00000000, %00000000
   5472  23b6					      endif
   5473  23b6		       0f f3		      .byte.b	%00001111, %11110011
   5474  23b8					      if	(pfwidth>2)
   5475  23b8		       f3 0f		      .byte.b	%11110011, %00001111
   5476  23ba					      endif
   5477  23ba		       0c 00		      .byte.b	%00001100, %00000000
   5478  23bc					      if	(pfwidth>2)
   5479  23bc		       00 0c		      .byte.b	%00000000, %00001100
   5480  23be					      endif
   5481  23be		       0c 00		      .byte.b	%00001100, %00000000
   5482  23c0					      if	(pfwidth>2)
   5483  23c0		       00 0c		      .byte.b	%00000000, %00001100
   5484  23c2					      endif
   5485  23c2		       00 00		      .byte.b	%00000000, %00000000
   5486  23c4					      if	(pfwidth>2)
   5487  23c4		       00 00		      .byte.b	%00000000, %00000000
   5488  23c6					      endif
   5489  23c6		       00 00		      .byte.b	%00000000, %00000000
   5490  23c8					      if	(pfwidth>2)
   5491  23c8		       00 00		      .byte.b	%00000000, %00000000
   5492  23ca					      endif
   5493  23ca		       0c 00		      .byte.b	%00001100, %00000000
   5494  23cc					      if	(pfwidth>2)
   5495  23cc		       00 0c		      .byte.b	%00000000, %00001100
   5496  23ce					      endif
   5497  23ce		       0f f3		      .byte.b	%00001111, %11110011
   5498  23d0					      if	(pfwidth>2)
   5499  23d0		       f3 0f		      .byte.b	%11110011, %00001111
   5500  23d2					      endif
   5501  23d2		       00 00		      .byte.b	%00000000, %00000000
   5502  23d4					      if	(pfwidth>2)
   5503  23d4		       00 00		      .byte.b	%00000000, %00000000
   5504  23d6					      endif
   5505  23d6		       00 00		      .byte.b	%00000000, %00000000
   5506  23d8					      if	(pfwidth>2)
   5507  23d8		       00 00		      .byte.b	%00000000, %00000000
   5508  23da					      endif
   5509  23da				   pflabel11
   5510  23da		       bd ae b3 	      lda	PF_data11,x
   5511  23dd		       95 a4		      sta	playfield,x
   5512  23df		       ca		      dex
   5513  23e0		       10 f8		      bpl	pflabel11
   5514  23e2				   .L0346		;  goto __Done_Next_Room
   5515  23e2
   5516  23e2		       4c ce b0 	      jmp	.__Done_Next_Room
   5517  23e5
   5518  23e5				   .
   5519  23e5							; 
   5520  23e5
   5521  23e5				   .
   5522  23e5							; 
   5523  23e5
   5524  23e5				   .__sB
   5525  23e5							; __sB
   5526  23e5
   5527  23e5				   .L0347		;  playfield:
   5528  23e5
   5529  23e5				  -	      ifconst	pfres
   5530  23e5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5531  23e5					      else
   5532  23e5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5533  23e7					      endif
   5534  23e7		       4c 16 b4 	      jmp	pflabel12
   5535  23ea				   PF_data12
   5536  23ea		       00 00		      .byte.b	%00000000, %00000000
   5537  23ec					      if	(pfwidth>2)
   5538  23ec		       00 00		      .byte.b	%00000000, %00000000
   5539  23ee					      endif
   5540  23ee		       00 00		      .byte.b	%00000000, %00000000
   5541  23f0					      if	(pfwidth>2)
   5542  23f0		       00 00		      .byte.b	%00000000, %00000000
   5543  23f2					      endif
   5544  23f2		       01 07		      .byte.b	%00000001, %00000111
   5545  23f4					      if	(pfwidth>2)
   5546  23f4		       00 00		      .byte.b	%00000000, %00000000
   5547  23f6					      endif
   5548  23f6		       07 1f		      .byte.b	%00000111, %00011111
   5549  23f8					      if	(pfwidth>2)
   5550  23f8		       00 00		      .byte.b	%00000000, %00000000
   5551  23fa					      endif
   5552  23fa		       1f 7f		      .byte.b	%00011111, %01111111
   5553  23fc					      if	(pfwidth>2)
   5554  23fc		       00 00		      .byte.b	%00000000, %00000000
   5555  23fe					      endif
   5556  23fe		       07 1f		      .byte.b	%00000111, %00011111
   5557  2400					      if	(pfwidth>2)
   5558  2400		       00 00		      .byte.b	%00000000, %00000000
   5559  2402					      endif
   5560  2402		       01 07		      .byte.b	%00000001, %00000111
   5561  2404					      if	(pfwidth>2)
   5562  2404		       01 03		      .byte.b	%00000001, %00000011
   5563  2406					      endif
   5564  2406		       00 00		      .byte.b	%00000000, %00000000
   5565  2408					      if	(pfwidth>2)
   5566  2408		       03 07		      .byte.b	%00000011, %00000111
   5567  240a					      endif
   5568  240a		       00 00		      .byte.b	%00000000, %00000000
   5569  240c					      if	(pfwidth>2)
   5570  240c		       01 03		      .byte.b	%00000001, %00000011
   5571  240e					      endif
   5572  240e		       00 00		      .byte.b	%00000000, %00000000
   5573  2410					      if	(pfwidth>2)
   5574  2410		       00 00		      .byte.b	%00000000, %00000000
   5575  2412					      endif
   5576  2412		       00 00		      .byte.b	%00000000, %00000000
   5577  2414					      if	(pfwidth>2)
   5578  2414		       00 00		      .byte.b	%00000000, %00000000
   5579  2416					      endif
   5580  2416				   pflabel12
   5581  2416		       bd ea b3 	      lda	PF_data12,x
   5582  2419		       95 a4		      sta	playfield,x
   5583  241b		       ca		      dex
   5584  241c		       10 f8		      bpl	pflabel12
   5585  241e				   .
   5586  241e							; 
   5587  241e
   5588  241e				   .L0348		;  goto __Done_Next_Room
   5589  241e
   5590  241e		       4c ce b0 	      jmp	.__Done_Next_Room
   5591  2421
   5592  2421				   .
   5593  2421							; 
   5594  2421
   5595  2421				   .
   5596  2421							; 
   5597  2421
   5598  2421				   .__sC
   5599  2421							; __sC
   5600  2421
   5601  2421				   .L0349		;  playfield:
   5602  2421
   5603  2421				  -	      ifconst	pfres
   5604  2421				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5605  2421					      else
   5606  2421		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5607  2423					      endif
   5608  2423		       4c 52 b4 	      jmp	pflabel13
   5609  2426				   PF_data13
   5610  2426		       00 00		      .byte.b	%00000000, %00000000
   5611  2428					      if	(pfwidth>2)
   5612  2428		       00 00		      .byte.b	%00000000, %00000000
   5613  242a					      endif
   5614  242a		       00 00		      .byte.b	%00000000, %00000000
   5615  242c					      if	(pfwidth>2)
   5616  242c		       00 00		      .byte.b	%00000000, %00000000
   5617  242e					      endif
   5618  242e		       03 f1		      .byte.b	%00000011, %11110001
   5619  2430					      if	(pfwidth>2)
   5620  2430		       f1 03		      .byte.b	%11110001, %00000011
   5621  2432					      endif
   5622  2432		       0f c3		      .byte.b	%00001111, %11000011
   5623  2434					      if	(pfwidth>2)
   5624  2434		       c3 0f		      .byte.b	%11000011, %00001111
   5625  2436					      endif
   5626  2436		       1f c3		      .byte.b	%00011111, %11000011
   5627  2438					      if	(pfwidth>2)
   5628  2438		       c3 1f		      .byte.b	%11000011, %00011111
   5629  243a					      endif
   5630  243a		       1f c1		      .byte.b	%00011111, %11000001
   5631  243c					      if	(pfwidth>2)
   5632  243c		       c1 1f		      .byte.b	%11000001, %00011111
   5633  243e					      endif
   5634  243e		       0f c0		      .byte.b	%00001111, %11000000
   5635  2440					      if	(pfwidth>2)
   5636  2440		       c0 0f		      .byte.b	%11000000, %00001111
   5637  2442					      endif
   5638  2442		       0e f0		      .byte.b	%00001110, %11110000
   5639  2444					      if	(pfwidth>2)
   5640  2444		       f0 0e		      .byte.b	%11110000, %00001110
   5641  2446					      endif
   5642  2446		       0f f8		      .byte.b	%00001111, %11111000
   5643  2448					      if	(pfwidth>2)
   5644  2448		       f8 0f		      .byte.b	%11111000, %00001111
   5645  244a					      endif
   5646  244a		       00 00		      .byte.b	%00000000, %00000000
   5647  244c					      if	(pfwidth>2)
   5648  244c		       00 00		      .byte.b	%00000000, %00000000
   5649  244e					      endif
   5650  244e		       00 00		      .byte.b	%00000000, %00000000
   5651  2450					      if	(pfwidth>2)
   5652  2450		       00 00		      .byte.b	%00000000, %00000000
   5653  2452					      endif
   5654  2452				   pflabel13
   5655  2452		       bd 26 b4 	      lda	PF_data13,x
   5656  2455		       95 a4		      sta	playfield,x
   5657  2457		       ca		      dex
   5658  2458		       10 f8		      bpl	pflabel13
   5659  245a				   .
   5660  245a							; 
   5661  245a
   5662  245a				   .L0350		;  goto __Done_Next_Room
   5663  245a
   5664  245a		       4c ce b0 	      jmp	.__Done_Next_Room
   5665  245d
   5666  245d				   .
   5667  245d							; 
   5668  245d
   5669  245d				   .
   5670  245d							; 
   5671  245d
   5672  245d				   .__sD
   5673  245d							; __sD
   5674  245d
   5675  245d				   .L0351		;  playfield:
   5676  245d
   5677  245d				  -	      ifconst	pfres
   5678  245d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5679  245d					      else
   5680  245d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5681  245f					      endif
   5682  245f		       4c 8e b4 	      jmp	pflabel14
   5683  2462				   PF_data14
   5684  2462		       00 00		      .byte.b	%00000000, %00000000
   5685  2464					      if	(pfwidth>2)
   5686  2464		       00 00		      .byte.b	%00000000, %00000000
   5687  2466					      endif
   5688  2466		       00 00		      .byte.b	%00000000, %00000000
   5689  2468					      if	(pfwidth>2)
   5690  2468		       00 00		      .byte.b	%00000000, %00000000
   5691  246a					      endif
   5692  246a		       00 fc		      .byte.b	%00000000, %11111100
   5693  246c					      if	(pfwidth>2)
   5694  246c		       fc 00		      .byte.b	%11111100, %00000000
   5695  246e					      endif
   5696  246e		       00 ff		      .byte.b	%00000000, %11111111
   5697  2470					      if	(pfwidth>2)
   5698  2470		       ff 00		      .byte.b	%11111111, %00000000
   5699  2472					      endif
   5700  2472		       00 ff		      .byte.b	%00000000, %11111111
   5701  2474					      if	(pfwidth>2)
   5702  2474		       ff 00		      .byte.b	%11111111, %00000000
   5703  2476					      endif
   5704  2476		       00 ff		      .byte.b	%00000000, %11111111
   5705  2478					      if	(pfwidth>2)
   5706  2478		       ff 00		      .byte.b	%11111111, %00000000
   5707  247a					      endif
   5708  247a		       00 ff		      .byte.b	%00000000, %11111111
   5709  247c					      if	(pfwidth>2)
   5710  247c		       ff 00		      .byte.b	%11111111, %00000000
   5711  247e					      endif
   5712  247e		       00 ff		      .byte.b	%00000000, %11111111
   5713  2480					      if	(pfwidth>2)
   5714  2480		       cf 00		      .byte.b	%11001111, %00000000
   5715  2482					      endif
   5716  2482		       00 fc		      .byte.b	%00000000, %11111100
   5717  2484					      if	(pfwidth>2)
   5718  2484		       ce 00		      .byte.b	%11001110, %00000000
   5719  2486					      endif
   5720  2486		       00 00		      .byte.b	%00000000, %00000000
   5721  2488					      if	(pfwidth>2)
   5722  2488		       00 00		      .byte.b	%00000000, %00000000
   5723  248a					      endif
   5724  248a		       00 00		      .byte.b	%00000000, %00000000
   5725  248c					      if	(pfwidth>2)
   5726  248c		       00 00		      .byte.b	%00000000, %00000000
   5727  248e					      endif
   5728  248e				   pflabel14
   5729  248e		       bd 62 b4 	      lda	PF_data14,x
   5730  2491		       95 a4		      sta	playfield,x
   5731  2493		       ca		      dex
   5732  2494		       10 f8		      bpl	pflabel14
   5733  2496				   .
   5734  2496							; 
   5735  2496
   5736  2496				   .L0352		;  goto __Done_Next_Room
   5737  2496
   5738  2496		       4c ce b0 	      jmp	.__Done_Next_Room
   5739  2499
   5740  2499				   .
   5741  2499							; 
   5742  2499
   5743  2499				   .
   5744  2499							; 
   5745  2499
   5746  2499				   .__sE
   5747  2499							; __sE
   5748  2499
   5749  2499				   .L0353		;  playfield:
   5750  2499
   5751  2499				  -	      ifconst	pfres
   5752  2499				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5753  2499					      else
   5754  2499		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5755  249b					      endif
   5756  249b		       4c ca b4 	      jmp	pflabel15
   5757  249e				   PF_data15
   5758  249e		       00 00		      .byte.b	%00000000, %00000000
   5759  24a0					      if	(pfwidth>2)
   5760  24a0		       00 00		      .byte.b	%00000000, %00000000
   5761  24a2					      endif
   5762  24a2		       00 00		      .byte.b	%00000000, %00000000
   5763  24a4					      if	(pfwidth>2)
   5764  24a4		       00 00		      .byte.b	%00000000, %00000000
   5765  24a6					      endif
   5766  24a6		       0f 3f		      .byte.b	%00001111, %00111111
   5767  24a8					      if	(pfwidth>2)
   5768  24a8		       3f 0f		      .byte.b	%00111111, %00001111
   5769  24aa					      endif
   5770  24aa		       0c 00		      .byte.b	%00001100, %00000000
   5771  24ac					      if	(pfwidth>2)
   5772  24ac		       00 0c		      .byte.b	%00000000, %00001100
   5773  24ae					      endif
   5774  24ae		       0c 00		      .byte.b	%00001100, %00000000
   5775  24b0					      if	(pfwidth>2)
   5776  24b0		       00 0c		      .byte.b	%00000000, %00001100
   5777  24b2					      endif
   5778  24b2		       0c 00		      .byte.b	%00001100, %00000000
   5779  24b4					      if	(pfwidth>2)
   5780  24b4		       00 0c		      .byte.b	%00000000, %00001100
   5781  24b6					      endif
   5782  24b6		       00 70		      .byte.b	%00000000, %01110000
   5783  24b8					      if	(pfwidth>2)
   5784  24b8		       70 00		      .byte.b	%01110000, %00000000
   5785  24ba					      endif
   5786  24ba		       00 70		      .byte.b	%00000000, %01110000
   5787  24bc					      if	(pfwidth>2)
   5788  24bc		       70 00		      .byte.b	%01110000, %00000000
   5789  24be					      endif
   5790  24be		       0f 73		      .byte.b	%00001111, %01110011
   5791  24c0					      if	(pfwidth>2)
   5792  24c0		       73 0f		      .byte.b	%01110011, %00001111
   5793  24c2					      endif
   5794  24c2		       00 00		      .byte.b	%00000000, %00000000
   5795  24c4					      if	(pfwidth>2)
   5796  24c4		       00 00		      .byte.b	%00000000, %00000000
   5797  24c6					      endif
   5798  24c6		       00 00		      .byte.b	%00000000, %00000000
   5799  24c8					      if	(pfwidth>2)
   5800  24c8		       00 00		      .byte.b	%00000000, %00000000
   5801  24ca					      endif
   5802  24ca				   pflabel15
   5803  24ca		       bd 9e b4 	      lda	PF_data15,x
   5804  24cd		       95 a4		      sta	playfield,x
   5805  24cf		       ca		      dex
   5806  24d0		       10 f8		      bpl	pflabel15
   5807  24d2				   .
   5808  24d2							; 
   5809  24d2
   5810  24d2				   .L0354		;  goto __Done_Next_Room
   5811  24d2
   5812  24d2		       4c ce b0 	      jmp	.__Done_Next_Room
   5813  24d5
   5814  24d5				   .
   5815  24d5							; 
   5816  24d5
   5817  24d5				   .
   5818  24d5							; 
   5819  24d5
   5820  24d5				   .__sF
   5821  24d5							; __sF
   5822  24d5
   5823  24d5				   .L0355		;  playfield:
   5824  24d5
   5825  24d5				  -	      ifconst	pfres
   5826  24d5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5827  24d5					      else
   5828  24d5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5829  24d7					      endif
   5830  24d7		       4c 06 b5 	      jmp	pflabel16
   5831  24da				   PF_data16
   5832  24da		       00 00		      .byte.b	%00000000, %00000000
   5833  24dc					      if	(pfwidth>2)
   5834  24dc		       00 00		      .byte.b	%00000000, %00000000
   5835  24de					      endif
   5836  24de		       00 00		      .byte.b	%00000000, %00000000
   5837  24e0					      if	(pfwidth>2)
   5838  24e0		       00 00		      .byte.b	%00000000, %00000000
   5839  24e2					      endif
   5840  24e2		       00 fc		      .byte.b	%00000000, %11111100
   5841  24e4					      if	(pfwidth>2)
   5842  24e4		       80 00		      .byte.b	%10000000, %00000000
   5843  24e6					      endif
   5844  24e6		       00 fe		      .byte.b	%00000000, %11111110
   5845  24e8					      if	(pfwidth>2)
   5846  24e8		       e0 00		      .byte.b	%11100000, %00000000
   5847  24ea					      endif
   5848  24ea		       01 ff		      .byte.b	%00000001, %11111111
   5849  24ec					      if	(pfwidth>2)
   5850  24ec		       f8 00		      .byte.b	%11111000, %00000000
   5851  24ee					      endif
   5852  24ee		       03 ff		      .byte.b	%00000011, %11111111
   5853  24f0					      if	(pfwidth>2)
   5854  24f0		       f8 00		      .byte.b	%11111000, %00000000
   5855  24f2					      endif
   5856  24f2		       01 ff		      .byte.b	%00000001, %11111111
   5857  24f4					      if	(pfwidth>2)
   5858  24f4		       f0 00		      .byte.b	%11110000, %00000000
   5859  24f6					      endif
   5860  24f6		       00 fc		      .byte.b	%00000000, %11111100
   5861  24f8					      if	(pfwidth>2)
   5862  24f8		       80 00		      .byte.b	%10000000, %00000000
   5863  24fa					      endif
   5864  24fa		       00 00		      .byte.b	%00000000, %00000000
   5865  24fc					      if	(pfwidth>2)
   5866  24fc		       00 00		      .byte.b	%00000000, %00000000
   5867  24fe					      endif
   5868  24fe		       00 00		      .byte.b	%00000000, %00000000
   5869  2500					      if	(pfwidth>2)
   5870  2500		       00 00		      .byte.b	%00000000, %00000000
   5871  2502					      endif
   5872  2502		       00 00		      .byte.b	%00000000, %00000000
   5873  2504					      if	(pfwidth>2)
   5874  2504		       00 00		      .byte.b	%00000000, %00000000
   5875  2506					      endif
   5876  2506				   pflabel16
   5877  2506		       bd da b4 	      lda	PF_data16,x
   5878  2509		       95 a4		      sta	playfield,x
   5879  250b		       ca		      dex
   5880  250c		       10 f8		      bpl	pflabel16
   5881  250e				   .
   5882  250e							; 
   5883  250e
   5884  250e				   .L0356		;  goto __Done_Next_Room
   5885  250e
   5886  250e		       4c ce b0 	      jmp	.__Done_Next_Room
   5887  2511
   5888  2511				   .
   5889  2511							; 
   5890  2511
   5891  2511				   .
   5892  2511							; 
   5893  2511
   5894  2511				   .__sG
   5895  2511							; __sG
   5896  2511
   5897  2511				   .L0357		;  playfield:
   5898  2511
   5899  2511				  -	      ifconst	pfres
   5900  2511				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5901  2511					      else
   5902  2511		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5903  2513					      endif
   5904  2513		       4c 42 b5 	      jmp	pflabel17
   5905  2516				   PF_data17
   5906  2516		       00 00		      .byte.b	%00000000, %00000000
   5907  2518					      if	(pfwidth>2)
   5908  2518		       00 00		      .byte.b	%00000000, %00000000
   5909  251a					      endif
   5910  251a		       00 00		      .byte.b	%00000000, %00000000
   5911  251c					      if	(pfwidth>2)
   5912  251c		       00 00		      .byte.b	%00000000, %00000000
   5913  251e					      endif
   5914  251e		       0f 00		      .byte.b	%00001111, %00000000
   5915  2520					      if	(pfwidth>2)
   5916  2520		       00 0f		      .byte.b	%00000000, %00001111
   5917  2522					      endif
   5918  2522		       0f 00		      .byte.b	%00001111, %00000000
   5919  2524					      if	(pfwidth>2)
   5920  2524		       00 0f		      .byte.b	%00000000, %00001111
   5921  2526					      endif
   5922  2526		       0f 00		      .byte.b	%00001111, %00000000
   5923  2528					      if	(pfwidth>2)
   5924  2528		       00 0f		      .byte.b	%00000000, %00001111
   5925  252a					      endif
   5926  252a		       0f 1f		      .byte.b	%00001111, %00011111
   5927  252c					      if	(pfwidth>2)
   5928  252c		       1f 0f		      .byte.b	%00011111, %00001111
   5929  252e					      endif
   5930  252e		       00 00		      .byte.b	%00000000, %00000000
   5931  2530					      if	(pfwidth>2)
   5932  2530		       00 00		      .byte.b	%00000000, %00000000
   5933  2532					      endif
   5934  2532		       00 00		      .byte.b	%00000000, %00000000
   5935  2534					      if	(pfwidth>2)
   5936  2534		       00 00		      .byte.b	%00000000, %00000000
   5937  2536					      endif
   5938  2536		       0f 1f		      .byte.b	%00001111, %00011111
   5939  2538					      if	(pfwidth>2)
   5940  2538		       1f 0f		      .byte.b	%00011111, %00001111
   5941  253a					      endif
   5942  253a		       00 00		      .byte.b	%00000000, %00000000
   5943  253c					      if	(pfwidth>2)
   5944  253c		       00 00		      .byte.b	%00000000, %00000000
   5945  253e					      endif
   5946  253e		       00 00		      .byte.b	%00000000, %00000000
   5947  2540					      if	(pfwidth>2)
   5948  2540		       00 00		      .byte.b	%00000000, %00000000
   5949  2542					      endif
   5950  2542				   pflabel17
   5951  2542		       bd 16 b5 	      lda	PF_data17,x
   5952  2545		       95 a4		      sta	playfield,x
   5953  2547		       ca		      dex
   5954  2548		       10 f8		      bpl	pflabel17
   5955  254a				   .
   5956  254a							; 
   5957  254a
   5958  254a				   .L0358		;  goto __Done_Next_Room
   5959  254a
   5960  254a		       4c ce b0 	      jmp	.__Done_Next_Room
   5961  254d
   5962  254d				   .
   5963  254d							; 
   5964  254d
   5965  254d				   .
   5966  254d							; 
   5967  254d
   5968  254d				   .__sH
   5969  254d							; __sH
   5970  254d
   5971  254d				   .L0359		;  playfield:
   5972  254d
   5973  254d				  -	      ifconst	pfres
   5974  254d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5975  254d					      else
   5976  254d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5977  254f					      endif
   5978  254f		       4c 7e b5 	      jmp	pflabel18
   5979  2552				   PF_data18
   5980  2552		       00 00		      .byte.b	%00000000, %00000000
   5981  2554					      if	(pfwidth>2)
   5982  2554		       00 00		      .byte.b	%00000000, %00000000
   5983  2556					      endif
   5984  2556		       00 00		      .byte.b	%00000000, %00000000
   5985  2558					      if	(pfwidth>2)
   5986  2558		       00 00		      .byte.b	%00000000, %00000000
   5987  255a					      endif
   5988  255a		       1f 03		      .byte.b	%00011111, %00000011
   5989  255c					      if	(pfwidth>2)
   5990  255c		       00 00		      .byte.b	%00000000, %00000000
   5991  255e					      endif
   5992  255e		       0f 01		      .byte.b	%00001111, %00000001
   5993  2560					      if	(pfwidth>2)
   5994  2560		       1f 0f		      .byte.b	%00011111, %00001111
   5995  2562					      endif
   5996  2562		       07 00		      .byte.b	%00000111, %00000000
   5997  2564					      if	(pfwidth>2)
   5998  2564		       0f 07		      .byte.b	%00001111, %00000111
   5999  2566					      endif
   6000  2566		       02 00		      .byte.b	%00000010, %00000000
   6001  2568					      if	(pfwidth>2)
   6002  2568		       07 03		      .byte.b	%00000111, %00000011
   6003  256a					      endif
   6004  256a		       00 f0		      .byte.b	%00000000, %11110000
   6005  256c					      if	(pfwidth>2)
   6006  256c		       83 01		      .byte.b	%10000011, %00000001
   6007  256e					      endif
   6008  256e		       00 e0		      .byte.b	%00000000, %11100000
   6009  2570					      if	(pfwidth>2)
   6010  2570		       01 00		      .byte.b	%00000001, %00000000
   6011  2572					      endif
   6012  2572		       00 40		      .byte.b	%00000000, %01000000
   6013  2574					      if	(pfwidth>2)
   6014  2574		       00 00		      .byte.b	%00000000, %00000000
   6015  2576					      endif
   6016  2576		       00 00		      .byte.b	%00000000, %00000000
   6017  2578					      if	(pfwidth>2)
   6018  2578		       00 00		      .byte.b	%00000000, %00000000
   6019  257a					      endif
   6020  257a		       00 00		      .byte.b	%00000000, %00000000
   6021  257c					      if	(pfwidth>2)
   6022  257c		       00 00		      .byte.b	%00000000, %00000000
   6023  257e					      endif
   6024  257e				   pflabel18
   6025  257e		       bd 52 b5 	      lda	PF_data18,x
   6026  2581		       95 a4		      sta	playfield,x
   6027  2583		       ca		      dex
   6028  2584		       10 f8		      bpl	pflabel18
   6029  2586				   .
   6030  2586							; 
   6031  2586
   6032  2586				   .L0360		;  goto __Done_Next_Room
   6033  2586
   6034  2586		       4c ce b0 	      jmp	.__Done_Next_Room
   6035  2589
   6036  2589				   .
   6037  2589							; 
   6038  2589
   6039  2589				   .
   6040  2589							; 
   6041  2589
   6042  2589				   .__sI
   6043  2589							; __sI
   6044  2589
   6045  2589				   .L0361		;  playfield:
   6046  2589
   6047  2589				  -	      ifconst	pfres
   6048  2589				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6049  2589					      else
   6050  2589		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6051  258b					      endif
   6052  258b		       4c ba b5 	      jmp	pflabel19
   6053  258e				   PF_data19
   6054  258e		       00 00		      .byte.b	%00000000, %00000000
   6055  2590					      if	(pfwidth>2)
   6056  2590		       00 00		      .byte.b	%00000000, %00000000
   6057  2592					      endif
   6058  2592		       00 00		      .byte.b	%00000000, %00000000
   6059  2594					      if	(pfwidth>2)
   6060  2594		       00 00		      .byte.b	%00000000, %00000000
   6061  2596					      endif
   6062  2596		       0f 99		      .byte.b	%00001111, %10011001
   6063  2598					      if	(pfwidth>2)
   6064  2598		       99 0f		      .byte.b	%10011001, %00001111
   6065  259a					      endif
   6066  259a		       0f 99		      .byte.b	%00001111, %10011001
   6067  259c					      if	(pfwidth>2)
   6068  259c		       99 0f		      .byte.b	%10011001, %00001111
   6069  259e					      endif
   6070  259e		       0f 99		      .byte.b	%00001111, %10011001
   6071  25a0					      if	(pfwidth>2)
   6072  25a0		       99 0f		      .byte.b	%10011001, %00001111
   6073  25a2					      endif
   6074  25a2		       0f 99		      .byte.b	%00001111, %10011001
   6075  25a4					      if	(pfwidth>2)
   6076  25a4		       99 0f		      .byte.b	%10011001, %00001111
   6077  25a6					      endif
   6078  25a6		       00 98		      .byte.b	%00000000, %10011000
   6079  25a8					      if	(pfwidth>2)
   6080  25a8		       98 00		      .byte.b	%10011000, %00000000
   6081  25aa					      endif
   6082  25aa		       00 98		      .byte.b	%00000000, %10011000
   6083  25ac					      if	(pfwidth>2)
   6084  25ac		       98 00		      .byte.b	%10011000, %00000000
   6085  25ae					      endif
   6086  25ae		       0f 9f		      .byte.b	%00001111, %10011111
   6087  25b0					      if	(pfwidth>2)
   6088  25b0		       9f 0f		      .byte.b	%10011111, %00001111
   6089  25b2					      endif
   6090  25b2		       00 00		      .byte.b	%00000000, %00000000
   6091  25b4					      if	(pfwidth>2)
   6092  25b4		       00 00		      .byte.b	%00000000, %00000000
   6093  25b6					      endif
   6094  25b6		       00 00		      .byte.b	%00000000, %00000000
   6095  25b8					      if	(pfwidth>2)
   6096  25b8		       00 00		      .byte.b	%00000000, %00000000
   6097  25ba					      endif
   6098  25ba				   pflabel19
   6099  25ba		       bd 8e b5 	      lda	PF_data19,x
   6100  25bd		       95 a4		      sta	playfield,x
   6101  25bf		       ca		      dex
   6102  25c0		       10 f8		      bpl	pflabel19
   6103  25c2				   .
   6104  25c2							; 
   6105  25c2
   6106  25c2				   .L0362		;  goto __Done_Next_Room
   6107  25c2
   6108  25c2		       4c ce b0 	      jmp	.__Done_Next_Room
   6109  25c5
   6110  25c5				   .
   6111  25c5							; 
   6112  25c5
   6113  25c5				   .
   6114  25c5							; 
   6115  25c5
   6116  25c5				   .__sJ
   6117  25c5							; __sJ
   6118  25c5
   6119  25c5				   .L0363		;  playfield:
   6120  25c5
   6121  25c5				  -	      ifconst	pfres
   6122  25c5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6123  25c5					      else
   6124  25c5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6125  25c7					      endif
   6126  25c7		       4c f6 b5 	      jmp	pflabel20
   6127  25ca				   PF_data20
   6128  25ca		       00 00		      .byte.b	%00000000, %00000000
   6129  25cc					      if	(pfwidth>2)
   6130  25cc		       00 00		      .byte.b	%00000000, %00000000
   6131  25ce					      endif
   6132  25ce		       00 00		      .byte.b	%00000000, %00000000
   6133  25d0					      if	(pfwidth>2)
   6134  25d0		       00 00		      .byte.b	%00000000, %00000000
   6135  25d2					      endif
   6136  25d2		       00 00		      .byte.b	%00000000, %00000000
   6137  25d4					      if	(pfwidth>2)
   6138  25d4		       18 00		      .byte.b	%00011000, %00000000
   6139  25d6					      endif
   6140  25d6		       00 00		      .byte.b	%00000000, %00000000
   6141  25d8					      if	(pfwidth>2)
   6142  25d8		       3c 00		      .byte.b	%00111100, %00000000
   6143  25da					      endif
   6144  25da		       00 00		      .byte.b	%00000000, %00000000
   6145  25dc					      if	(pfwidth>2)
   6146  25dc		       7e 00		      .byte.b	%01111110, %00000000
   6147  25de					      endif
   6148  25de		       03 00		      .byte.b	%00000011, %00000000
   6149  25e0					      if	(pfwidth>2)
   6150  25e0		       66 00		      .byte.b	%01100110, %00000000
   6151  25e2					      endif
   6152  25e2		       07 01		      .byte.b	%00000111, %00000001
   6153  25e4					      if	(pfwidth>2)
   6154  25e4		       00 00		      .byte.b	%00000000, %00000000
   6155  25e6					      endif
   6156  25e6		       0f 03		      .byte.b	%00001111, %00000011
   6157  25e8					      if	(pfwidth>2)
   6158  25e8		       00 00		      .byte.b	%00000000, %00000000
   6159  25ea					      endif
   6160  25ea		       0c 03		      .byte.b	%00001100, %00000011
   6161  25ec					      if	(pfwidth>2)
   6162  25ec		       00 00		      .byte.b	%00000000, %00000000
   6163  25ee					      endif
   6164  25ee		       00 00		      .byte.b	%00000000, %00000000
   6165  25f0					      if	(pfwidth>2)
   6166  25f0		       00 00		      .byte.b	%00000000, %00000000
   6167  25f2					      endif
   6168  25f2		       00 00		      .byte.b	%00000000, %00000000
   6169  25f4					      if	(pfwidth>2)
   6170  25f4		       00 00		      .byte.b	%00000000, %00000000
   6171  25f6					      endif
   6172  25f6				   pflabel20
   6173  25f6		       bd ca b5 	      lda	PF_data20,x
   6174  25f9		       95 a4		      sta	playfield,x
   6175  25fb		       ca		      dex
   6176  25fc		       10 f8		      bpl	pflabel20
   6177  25fe				   .
   6178  25fe							; 
   6179  25fe
   6180  25fe				   .L0364		;  goto __Done_Next_Room
   6181  25fe
   6182  25fe		       4c ce b0 	      jmp	.__Done_Next_Room
   6183  2601
   6184  2601				   .
   6185  2601							; 
   6186  2601
   6187  2601				   .
   6188  2601							; 
   6189  2601
   6190  2601				   .__sK
   6191  2601							; __sK
   6192  2601
   6193  2601				   .L0365		;  playfield:
   6194  2601
   6195  2601				  -	      ifconst	pfres
   6196  2601				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6197  2601					      else
   6198  2601		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6199  2603					      endif
   6200  2603		       4c 32 b6 	      jmp	pflabel21
   6201  2606				   PF_data21
   6202  2606		       00 00		      .byte.b	%00000000, %00000000
   6203  2608					      if	(pfwidth>2)
   6204  2608		       00 00		      .byte.b	%00000000, %00000000
   6205  260a					      endif
   6206  260a		       00 00		      .byte.b	%00000000, %00000000
   6207  260c					      if	(pfwidth>2)
   6208  260c		       00 00		      .byte.b	%00000000, %00000000
   6209  260e					      endif
   6210  260e		       00 c0		      .byte.b	%00000000, %11000000
   6211  2610					      if	(pfwidth>2)
   6212  2610		       80 00		      .byte.b	%10000000, %00000000
   6213  2612					      endif
   6214  2612		       00 e0		      .byte.b	%00000000, %11100000
   6215  2614					      if	(pfwidth>2)
   6216  2614		       c0 00		      .byte.b	%11000000, %00000000
   6217  2616					      endif
   6218  2616		       00 c0		      .byte.b	%00000000, %11000000
   6219  2618					      if	(pfwidth>2)
   6220  2618		       80 00		      .byte.b	%10000000, %00000000
   6221  261a					      endif
   6222  261a		       00 00		      .byte.b	%00000000, %00000000
   6223  261c					      if	(pfwidth>2)
   6224  261c		       00 00		      .byte.b	%00000000, %00000000
   6225  261e					      endif
   6226  261e		       01 03		      .byte.b	%00000001, %00000011
   6227  2620					      if	(pfwidth>2)
   6228  2620		       07 00		      .byte.b	%00000111, %00000000
   6229  2622					      endif
   6230  2622		       03 07		      .byte.b	%00000011, %00000111
   6231  2624					      if	(pfwidth>2)
   6232  2624		       0f 01		      .byte.b	%00001111, %00000001
   6233  2626					      endif
   6234  2626		       01 03		      .byte.b	%00000001, %00000011
   6235  2628					      if	(pfwidth>2)
   6236  2628		       07 00		      .byte.b	%00000111, %00000000
   6237  262a					      endif
   6238  262a		       00 00		      .byte.b	%00000000, %00000000
   6239  262c					      if	(pfwidth>2)
   6240  262c		       00 00		      .byte.b	%00000000, %00000000
   6241  262e					      endif
   6242  262e		       00 00		      .byte.b	%00000000, %00000000
   6243  2630					      if	(pfwidth>2)
   6244  2630		       00 00		      .byte.b	%00000000, %00000000
   6245  2632					      endif
   6246  2632				   pflabel21
   6247  2632		       bd 06 b6 	      lda	PF_data21,x
   6248  2635		       95 a4		      sta	playfield,x
   6249  2637		       ca		      dex
   6250  2638		       10 f8		      bpl	pflabel21
   6251  263a				   .
   6252  263a							; 
   6253  263a
   6254  263a				   .L0366		;  goto __Done_Next_Room
   6255  263a
   6256  263a		       4c ce b0 	      jmp	.__Done_Next_Room
   6257  263d
   6258  263d				   .
   6259  263d							; 
   6260  263d
   6261  263d				   .
   6262  263d							; 
   6263  263d
   6264  263d				   .__sL
   6265  263d							; __sL
   6266  263d
   6267  263d				   .L0367		;  playfield:
   6268  263d
   6269  263d				  -	      ifconst	pfres
   6270  263d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6271  263d					      else
   6272  263d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6273  263f					      endif
   6274  263f		       4c 6e b6 	      jmp	pflabel22
   6275  2642				   PF_data22
   6276  2642		       00 00		      .byte.b	%00000000, %00000000
   6277  2644					      if	(pfwidth>2)
   6278  2644		       00 00		      .byte.b	%00000000, %00000000
   6279  2646					      endif
   6280  2646		       00 00		      .byte.b	%00000000, %00000000
   6281  2648					      if	(pfwidth>2)
   6282  2648		       00 00		      .byte.b	%00000000, %00000000
   6283  264a					      endif
   6284  264a		       06 fe		      .byte.b	%00000110, %11111110
   6285  264c					      if	(pfwidth>2)
   6286  264c		       ff 07		      .byte.b	%11111111, %00000111
   6287  264e					      endif
   6288  264e		       06 06		      .byte.b	%00000110, %00000110
   6289  2650					      if	(pfwidth>2)
   6290  2650		       00 00		      .byte.b	%00000000, %00000000
   6291  2652					      endif
   6292  2652		       06 06		      .byte.b	%00000110, %00000110
   6293  2654					      if	(pfwidth>2)
   6294  2654		       00 00		      .byte.b	%00000000, %00000000
   6295  2656					      endif
   6296  2656		       06 c6		      .byte.b	%00000110, %11000110
   6297  2658					      if	(pfwidth>2)
   6298  2658		       ff 07		      .byte.b	%11111111, %00000111
   6299  265a					      endif
   6300  265a		       06 c6		      .byte.b	%00000110, %11000110
   6301  265c					      if	(pfwidth>2)
   6302  265c		       00 06		      .byte.b	%00000000, %00000110
   6303  265e					      endif
   6304  265e		       06 c6		      .byte.b	%00000110, %11000110
   6305  2660					      if	(pfwidth>2)
   6306  2660		       00 06		      .byte.b	%00000000, %00000110
   6307  2662					      endif
   6308  2662		       06 c6		      .byte.b	%00000110, %11000110
   6309  2664					      if	(pfwidth>2)
   6310  2664		       3e 06		      .byte.b	%00111110, %00000110
   6311  2666					      endif
   6312  2666		       00 00		      .byte.b	%00000000, %00000000
   6313  2668					      if	(pfwidth>2)
   6314  2668		       00 00		      .byte.b	%00000000, %00000000
   6315  266a					      endif
   6316  266a		       00 00		      .byte.b	%00000000, %00000000
   6317  266c					      if	(pfwidth>2)
   6318  266c		       00 00		      .byte.b	%00000000, %00000000
   6319  266e					      endif
   6320  266e				   pflabel22
   6321  266e		       bd 42 b6 	      lda	PF_data22,x
   6322  2671		       95 a4		      sta	playfield,x
   6323  2673		       ca		      dex
   6324  2674		       10 f8		      bpl	pflabel22
   6325  2676				   .
   6326  2676							; 
   6327  2676
   6328  2676				   .L0368		;  goto __Done_Next_Room
   6329  2676
   6330  2676		       4c ce b0 	      jmp	.__Done_Next_Room
   6331  2679
   6332  2679				   .
   6333  2679							; 
   6334  2679
   6335  2679				   .
   6336  2679							; 
   6337  2679
   6338  2679				   .__sM
   6339  2679							; __sM
   6340  2679
   6341  2679				   .L0369		;  playfield:
   6342  2679
   6343  2679				  -	      ifconst	pfres
   6344  2679				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6345  2679					      else
   6346  2679		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6347  267b					      endif
   6348  267b		       4c aa b6 	      jmp	pflabel23
   6349  267e				   PF_data23
   6350  267e		       00 00		      .byte.b	%00000000, %00000000
   6351  2680					      if	(pfwidth>2)
   6352  2680		       00 00		      .byte.b	%00000000, %00000000
   6353  2682					      endif
   6354  2682		       00 00		      .byte.b	%00000000, %00000000
   6355  2684					      if	(pfwidth>2)
   6356  2684		       00 00		      .byte.b	%00000000, %00000000
   6357  2686					      endif
   6358  2686		       01 ff		      .byte.b	%00000001, %11111111
   6359  2688					      if	(pfwidth>2)
   6360  2688		       80 00		      .byte.b	%10000000, %00000000
   6361  268a					      endif
   6362  268a		       07 ff		      .byte.b	%00000111, %11111111
   6363  268c					      if	(pfwidth>2)
   6364  268c		       c0 00		      .byte.b	%11000000, %00000000
   6365  268e					      endif
   6366  268e		       07 ff		      .byte.b	%00000111, %11111111
   6367  2690					      if	(pfwidth>2)
   6368  2690		       c0 00		      .byte.b	%11000000, %00000000
   6369  2692					      endif
   6370  2692		       07 ff		      .byte.b	%00000111, %11111111
   6371  2694					      if	(pfwidth>2)
   6372  2694		       c0 00		      .byte.b	%11000000, %00000000
   6373  2696					      endif
   6374  2696		       07 fc		      .byte.b	%00000111, %11111100
   6375  2698					      if	(pfwidth>2)
   6376  2698		       c0 0e		      .byte.b	%11000000, %00001110
   6377  269a					      endif
   6378  269a		       03 fc		      .byte.b	%00000011, %11111100
   6379  269c					      if	(pfwidth>2)
   6380  269c		       80 0e		      .byte.b	%10000000, %00001110
   6381  269e					      endif
   6382  269e		       00 00		      .byte.b	%00000000, %00000000
   6383  26a0					      if	(pfwidth>2)
   6384  26a0		       00 00		      .byte.b	%00000000, %00000000
   6385  26a2					      endif
   6386  26a2		       00 00		      .byte.b	%00000000, %00000000
   6387  26a4					      if	(pfwidth>2)
   6388  26a4		       00 00		      .byte.b	%00000000, %00000000
   6389  26a6					      endif
   6390  26a6		       00 00		      .byte.b	%00000000, %00000000
   6391  26a8					      if	(pfwidth>2)
   6392  26a8		       00 00		      .byte.b	%00000000, %00000000
   6393  26aa					      endif
   6394  26aa				   pflabel23
   6395  26aa		       bd 7e b6 	      lda	PF_data23,x
   6396  26ad		       95 a4		      sta	playfield,x
   6397  26af		       ca		      dex
   6398  26b0		       10 f8		      bpl	pflabel23
   6399  26b2				   .
   6400  26b2							; 
   6401  26b2
   6402  26b2				   .
   6403  26b2							; 
   6404  26b2
   6405  26b2				   .L0370		;  goto __Done_Next_Room
   6406  26b2
   6407  26b2		       4c ce b0 	      jmp	.__Done_Next_Room
   6408  26b5
   6409  26b5				   .
   6410  26b5							; 
   6411  26b5
   6412  26b5				   .
   6413  26b5							; 
   6414  26b5
   6415  26b5				   .__sN
   6416  26b5							; __sN
   6417  26b5
   6418  26b5				   .L0371		;  playfield:
   6419  26b5
   6420  26b5				  -	      ifconst	pfres
   6421  26b5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6422  26b5					      else
   6423  26b5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6424  26b7					      endif
   6425  26b7		       4c e6 b6 	      jmp	pflabel24
   6426  26ba				   PF_data24
   6427  26ba		       00 00		      .byte.b	%00000000, %00000000
   6428  26bc					      if	(pfwidth>2)
   6429  26bc		       00 00		      .byte.b	%00000000, %00000000
   6430  26be					      endif
   6431  26be		       00 00		      .byte.b	%00000000, %00000000
   6432  26c0					      if	(pfwidth>2)
   6433  26c0		       00 00		      .byte.b	%00000000, %00000000
   6434  26c2					      endif
   6435  26c2		       02 00		      .byte.b	%00000010, %00000000
   6436  26c4					      if	(pfwidth>2)
   6437  26c4		       fe 00		      .byte.b	%11111110, %00000000
   6438  26c6					      endif
   6439  26c6		       07 c0		      .byte.b	%00000111, %11000000
   6440  26c8					      if	(pfwidth>2)
   6441  26c8		       ff 01		      .byte.b	%11111111, %00000001
   6442  26ca					      endif
   6443  26ca		       0f c1		      .byte.b	%00001111, %11000001
   6444  26cc					      if	(pfwidth>2)
   6445  26cc		       ff 03		      .byte.b	%11111111, %00000011
   6446  26ce					      endif
   6447  26ce		       1f c3		      .byte.b	%00011111, %11000011
   6448  26d0					      if	(pfwidth>2)
   6449  26d0		       ff 03		      .byte.b	%11111111, %00000011
   6450  26d2					      endif
   6451  26d2		       02 c0		      .byte.b	%00000010, %11000000
   6452  26d4					      if	(pfwidth>2)
   6453  26d4		       9f 03		      .byte.b	%10011111, %00000011
   6454  26d6					      endif
   6455  26d6		       02 80		      .byte.b	%00000010, %10000000
   6456  26d8					      if	(pfwidth>2)
   6457  26d8		       9f 01		      .byte.b	%10011111, %00000001
   6458  26da					      endif
   6459  26da		       00 00		      .byte.b	%00000000, %00000000
   6460  26dc					      if	(pfwidth>2)
   6461  26dc		       00 00		      .byte.b	%00000000, %00000000
   6462  26de					      endif
   6463  26de		       00 00		      .byte.b	%00000000, %00000000
   6464  26e0					      if	(pfwidth>2)
   6465  26e0		       00 00		      .byte.b	%00000000, %00000000
   6466  26e2					      endif
   6467  26e2		       00 00		      .byte.b	%00000000, %00000000
   6468  26e4					      if	(pfwidth>2)
   6469  26e4		       00 00		      .byte.b	%00000000, %00000000
   6470  26e6					      endif
   6471  26e6				   pflabel24
   6472  26e6		       bd ba b6 	      lda	PF_data24,x
   6473  26e9		       95 a4		      sta	playfield,x
   6474  26eb		       ca		      dex
   6475  26ec		       10 f8		      bpl	pflabel24
   6476  26ee				   .
   6477  26ee							; 
   6478  26ee
   6479  26ee				   .L0372		;  goto __Done_Next_Room
   6480  26ee
   6481  26ee		       4c ce b0 	      jmp	.__Done_Next_Room
   6482  26f1
   6483  26f1				   .
   6484  26f1							; 
   6485  26f1
   6486  26f1				   .
   6487  26f1							; 
   6488  26f1
   6489  26f1				   .__sO
   6490  26f1							; __sO
   6491  26f1
   6492  26f1				   .L0373		;  playfield:
   6493  26f1
   6494  26f1				  -	      ifconst	pfres
   6495  26f1				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6496  26f1					      else
   6497  26f1		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6498  26f3					      endif
   6499  26f3		       4c 22 b7 	      jmp	pflabel25
   6500  26f6				   PF_data25
   6501  26f6		       00 00		      .byte.b	%00000000, %00000000
   6502  26f8					      if	(pfwidth>2)
   6503  26f8		       00 00		      .byte.b	%00000000, %00000000
   6504  26fa					      endif
   6505  26fa		       00 00		      .byte.b	%00000000, %00000000
   6506  26fc					      if	(pfwidth>2)
   6507  26fc		       00 00		      .byte.b	%00000000, %00000000
   6508  26fe					      endif
   6509  26fe		       00 00		      .byte.b	%00000000, %00000000
   6510  2700					      if	(pfwidth>2)
   6511  2700		       3e 00		      .byte.b	%00111110, %00000000
   6512  2702					      endif
   6513  2702		       00 00		      .byte.b	%00000000, %00000000
   6514  2704					      if	(pfwidth>2)
   6515  2704		       3f 01		      .byte.b	%00111111, %00000001
   6516  2706					      endif
   6517  2706		       00 00		      .byte.b	%00000000, %00000000
   6518  2708					      if	(pfwidth>2)
   6519  2708		       1f 00		      .byte.b	%00011111, %00000000
   6520  270a					      endif
   6521  270a		       00 00		      .byte.b	%00000000, %00000000
   6522  270c					      if	(pfwidth>2)
   6523  270c		       00 00		      .byte.b	%00000000, %00000000
   6524  270e					      endif
   6525  270e		       00 3e		      .byte.b	%00000000, %00111110
   6526  2710					      if	(pfwidth>2)
   6527  2710		       00 00		      .byte.b	%00000000, %00000000
   6528  2712					      endif
   6529  2712		       01 3f		      .byte.b	%00000001, %00111111
   6530  2714					      if	(pfwidth>2)
   6531  2714		       00 00		      .byte.b	%00000000, %00000000
   6532  2716					      endif
   6533  2716		       00 1f		      .byte.b	%00000000, %00011111
   6534  2718					      if	(pfwidth>2)
   6535  2718		       00 00		      .byte.b	%00000000, %00000000
   6536  271a					      endif
   6537  271a		       00 00		      .byte.b	%00000000, %00000000
   6538  271c					      if	(pfwidth>2)
   6539  271c		       00 00		      .byte.b	%00000000, %00000000
   6540  271e					      endif
   6541  271e		       00 00		      .byte.b	%00000000, %00000000
   6542  2720					      if	(pfwidth>2)
   6543  2720		       00 00		      .byte.b	%00000000, %00000000
   6544  2722					      endif
   6545  2722				   pflabel25
   6546  2722		       bd f6 b6 	      lda	PF_data25,x
   6547  2725		       95 a4		      sta	playfield,x
   6548  2727		       ca		      dex
   6549  2728		       10 f8		      bpl	pflabel25
   6550  272a				   .
   6551  272a							; 
   6552  272a
   6553  272a				   .L0374		;  goto __Done_Next_Room
   6554  272a
   6555  272a		       4c ce b0 	      jmp	.__Done_Next_Room
   6556  272d
   6557  272d				   .
   6558  272d							; 
   6559  272d
   6560  272d				   .
   6561  272d							; 
   6562  272d
   6563  272d				   .__sP
   6564  272d							; __sP
   6565  272d
   6566  272d				   .L0375		;  playfield:
   6567  272d
   6568  272d				  -	      ifconst	pfres
   6569  272d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6570  272d					      else
   6571  272d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6572  272f					      endif
   6573  272f		       4c 5e b7 	      jmp	pflabel26
   6574  2732				   PF_data26
   6575  2732		       00 00		      .byte.b	%00000000, %00000000
   6576  2734					      if	(pfwidth>2)
   6577  2734		       00 00		      .byte.b	%00000000, %00000000
   6578  2736					      endif
   6579  2736		       00 00		      .byte.b	%00000000, %00000000
   6580  2738					      if	(pfwidth>2)
   6581  2738		       00 00		      .byte.b	%00000000, %00000000
   6582  273a					      endif
   6583  273a		       07 ff		      .byte.b	%00000111, %11111111
   6584  273c					      if	(pfwidth>2)
   6585  273c		       ff 07		      .byte.b	%11111111, %00000111
   6586  273e					      endif
   6587  273e		       07 00		      .byte.b	%00000111, %00000000
   6588  2740					      if	(pfwidth>2)
   6589  2740		       00 07		      .byte.b	%00000000, %00000111
   6590  2742					      endif
   6591  2742		       07 00		      .byte.b	%00000111, %00000000
   6592  2744					      if	(pfwidth>2)
   6593  2744		       00 07		      .byte.b	%00000000, %00000111
   6594  2746					      endif
   6595  2746		       07 fc		      .byte.b	%00000111, %11111100
   6596  2748					      if	(pfwidth>2)
   6597  2748		       fc 07		      .byte.b	%11111100, %00000111
   6598  274a					      endif
   6599  274a		       07 fc		      .byte.b	%00000111, %11111100
   6600  274c					      if	(pfwidth>2)
   6601  274c		       fc 07		      .byte.b	%11111100, %00000111
   6602  274e					      endif
   6603  274e		       07 fc		      .byte.b	%00000111, %11111100
   6604  2750					      if	(pfwidth>2)
   6605  2750		       fc 07		      .byte.b	%11111100, %00000111
   6606  2752					      endif
   6607  2752		       00 00		      .byte.b	%00000000, %00000000
   6608  2754					      if	(pfwidth>2)
   6609  2754		       00 00		      .byte.b	%00000000, %00000000
   6610  2756					      endif
   6611  2756		       00 00		      .byte.b	%00000000, %00000000
   6612  2758					      if	(pfwidth>2)
   6613  2758		       00 00		      .byte.b	%00000000, %00000000
   6614  275a					      endif
   6615  275a		       00 00		      .byte.b	%00000000, %00000000
   6616  275c					      if	(pfwidth>2)
   6617  275c		       00 00		      .byte.b	%00000000, %00000000
   6618  275e					      endif
   6619  275e				   pflabel26
   6620  275e		       bd 32 b7 	      lda	PF_data26,x
   6621  2761		       95 a4		      sta	playfield,x
   6622  2763		       ca		      dex
   6623  2764		       10 f8		      bpl	pflabel26
   6624  2766				   .
   6625  2766							; 
   6626  2766
   6627  2766				   .L0376		;  goto __Done_Next_Room
   6628  2766
   6629  2766		       4c ce b0 	      jmp	.__Done_Next_Room
   6630  2769
   6631  2769				   .
   6632  2769							; 
   6633  2769
   6634  2769				   .
   6635  2769							; 
   6636  2769
   6637  2769				   .__sQ
   6638  2769							; __sQ
   6639  2769
   6640  2769				   .L0377		;  playfield:
   6641  2769
   6642  2769				  -	      ifconst	pfres
   6643  2769				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6644  2769					      else
   6645  2769		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6646  276b					      endif
   6647  276b		       4c 9a b7 	      jmp	pflabel27
   6648  276e				   PF_data27
   6649  276e		       00 00		      .byte.b	%00000000, %00000000
   6650  2770					      if	(pfwidth>2)
   6651  2770		       00 00		      .byte.b	%00000000, %00000000
   6652  2772					      endif
   6653  2772		       00 00		      .byte.b	%00000000, %00000000
   6654  2774					      if	(pfwidth>2)
   6655  2774		       00 00		      .byte.b	%00000000, %00000000
   6656  2776					      endif
   6657  2776		       00 0e		      .byte.b	%00000000, %00001110
   6658  2778					      if	(pfwidth>2)
   6659  2778		       0e 00		      .byte.b	%00001110, %00000000
   6660  277a					      endif
   6661  277a		       01 3f		      .byte.b	%00000001, %00111111
   6662  277c					      if	(pfwidth>2)
   6663  277c		       3f 01		      .byte.b	%00111111, %00000001
   6664  277e					      endif
   6665  277e		       00 00		      .byte.b	%00000000, %00000000
   6666  2780					      if	(pfwidth>2)
   6667  2780		       00 00		      .byte.b	%00000000, %00000000
   6668  2782					      endif
   6669  2782		       00 00		      .byte.b	%00000000, %00000000
   6670  2784					      if	(pfwidth>2)
   6671  2784		       00 00		      .byte.b	%00000000, %00000000
   6672  2786					      endif
   6673  2786		       00 00		      .byte.b	%00000000, %00000000
   6674  2788					      if	(pfwidth>2)
   6675  2788		       00 00		      .byte.b	%00000000, %00000000
   6676  278a					      endif
   6677  278a		       01 3f		      .byte.b	%00000001, %00111111
   6678  278c					      if	(pfwidth>2)
   6679  278c		       3f 01		      .byte.b	%00111111, %00000001
   6680  278e					      endif
   6681  278e		       00 0e		      .byte.b	%00000000, %00001110
   6682  2790					      if	(pfwidth>2)
   6683  2790		       0e 00		      .byte.b	%00001110, %00000000
   6684  2792					      endif
   6685  2792		       00 00		      .byte.b	%00000000, %00000000
   6686  2794					      if	(pfwidth>2)
   6687  2794		       00 00		      .byte.b	%00000000, %00000000
   6688  2796					      endif
   6689  2796		       00 00		      .byte.b	%00000000, %00000000
   6690  2798					      if	(pfwidth>2)
   6691  2798		       00 00		      .byte.b	%00000000, %00000000
   6692  279a					      endif
   6693  279a				   pflabel27
   6694  279a		       bd 6e b7 	      lda	PF_data27,x
   6695  279d		       95 a4		      sta	playfield,x
   6696  279f		       ca		      dex
   6697  27a0		       10 f8		      bpl	pflabel27
   6698  27a2				   .
   6699  27a2							; 
   6700  27a2
   6701  27a2				   .L0378		;  goto __Done_Next_Room
   6702  27a2
   6703  27a2		       4c ce b0 	      jmp	.__Done_Next_Room
   6704  27a5
   6705  27a5				   .
   6706  27a5							; 
   6707  27a5
   6708  27a5				   .
   6709  27a5							; 
   6710  27a5
   6711  27a5				   .__sR
   6712  27a5							; __sR
   6713  27a5
   6714  27a5				   .L0379		;  playfield:
   6715  27a5
   6716  27a5				  -	      ifconst	pfres
   6717  27a5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6718  27a5					      else
   6719  27a5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6720  27a7					      endif
   6721  27a7		       4c d6 b7 	      jmp	pflabel28
   6722  27aa				   PF_data28
   6723  27aa		       00 00		      .byte.b	%00000000, %00000000
   6724  27ac					      if	(pfwidth>2)
   6725  27ac		       00 00		      .byte.b	%00000000, %00000000
   6726  27ae					      endif
   6727  27ae		       00 00		      .byte.b	%00000000, %00000000
   6728  27b0					      if	(pfwidth>2)
   6729  27b0		       00 00		      .byte.b	%00000000, %00000000
   6730  27b2					      endif
   6731  27b2		       07 7f		      .byte.b	%00000111, %01111111
   6732  27b4					      if	(pfwidth>2)
   6733  27b4		       79 07		      .byte.b	%01111001, %00000111
   6734  27b6					      endif
   6735  27b6		       07 7f		      .byte.b	%00000111, %01111111
   6736  27b8					      if	(pfwidth>2)
   6737  27b8		       79 07		      .byte.b	%01111001, %00000111
   6738  27ba					      endif
   6739  27ba		       00 00		      .byte.b	%00000000, %00000000
   6740  27bc					      if	(pfwidth>2)
   6741  27bc		       79 07		      .byte.b	%01111001, %00000111
   6742  27be					      endif
   6743  27be		       00 00		      .byte.b	%00000000, %00000000
   6744  27c0					      if	(pfwidth>2)
   6745  27c0		       79 07		      .byte.b	%01111001, %00000111
   6746  27c2					      endif
   6747  27c2		       07 7f		      .byte.b	%00000111, %01111111
   6748  27c4					      if	(pfwidth>2)
   6749  27c4		       79 07		      .byte.b	%01111001, %00000111
   6750  27c6					      endif
   6751  27c6		       07 7f		      .byte.b	%00000111, %01111111
   6752  27c8					      if	(pfwidth>2)
   6753  27c8		       79 07		      .byte.b	%01111001, %00000111
   6754  27ca					      endif
   6755  27ca		       00 00		      .byte.b	%00000000, %00000000
   6756  27cc					      if	(pfwidth>2)
   6757  27cc		       00 00		      .byte.b	%00000000, %00000000
   6758  27ce					      endif
   6759  27ce		       00 00		      .byte.b	%00000000, %00000000
   6760  27d0					      if	(pfwidth>2)
   6761  27d0		       00 00		      .byte.b	%00000000, %00000000
   6762  27d2					      endif
   6763  27d2		       00 00		      .byte.b	%00000000, %00000000
   6764  27d4					      if	(pfwidth>2)
   6765  27d4		       00 00		      .byte.b	%00000000, %00000000
   6766  27d6					      endif
   6767  27d6				   pflabel28
   6768  27d6		       bd aa b7 	      lda	PF_data28,x
   6769  27d9		       95 a4		      sta	playfield,x
   6770  27db		       ca		      dex
   6771  27dc		       10 f8		      bpl	pflabel28
   6772  27de				   .
   6773  27de							; 
   6774  27de
   6775  27de				   .L0380		;  goto __Done_Next_Room
   6776  27de
   6777  27de		       4c ce b0 	      jmp	.__Done_Next_Room
   6778  27e1
   6779  27e1				   .
   6780  27e1							; 
   6781  27e1
   6782  27e1				   .
   6783  27e1							; 
   6784  27e1
   6785  27e1				   .__sS
   6786  27e1							; __sS
   6787  27e1
   6788  27e1				   .L0381		;  playfield:
   6789  27e1
   6790  27e1				  -	      ifconst	pfres
   6791  27e1				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6792  27e1					      else
   6793  27e1		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6794  27e3					      endif
   6795  27e3		       4c 12 b8 	      jmp	pflabel29
   6796  27e6				   PF_data29
   6797  27e6		       00 00		      .byte.b	%00000000, %00000000
   6798  27e8					      if	(pfwidth>2)
   6799  27e8		       00 00		      .byte.b	%00000000, %00000000
   6800  27ea					      endif
   6801  27ea		       00 00		      .byte.b	%00000000, %00000000
   6802  27ec					      if	(pfwidth>2)
   6803  27ec		       00 00		      .byte.b	%00000000, %00000000
   6804  27ee					      endif
   6805  27ee		       00 70		      .byte.b	%00000000, %01110000
   6806  27f0					      if	(pfwidth>2)
   6807  27f0		       70 00		      .byte.b	%01110000, %00000000
   6808  27f2					      endif
   6809  27f2		       00 7c		      .byte.b	%00000000, %01111100
   6810  27f4					      if	(pfwidth>2)
   6811  27f4		       7c 00		      .byte.b	%01111100, %00000000
   6812  27f6					      endif
   6813  27f6		       00 00		      .byte.b	%00000000, %00000000
   6814  27f8					      if	(pfwidth>2)
   6815  27f8		       00 00		      .byte.b	%00000000, %00000000
   6816  27fa					      endif
   6817  27fa		       00 00		      .byte.b	%00000000, %00000000
   6818  27fc					      if	(pfwidth>2)
   6819  27fc		       00 00		      .byte.b	%00000000, %00000000
   6820  27fe					      endif
   6821  27fe		       00 00		      .byte.b	%00000000, %00000000
   6822  2800					      if	(pfwidth>2)
   6823  2800		       00 00		      .byte.b	%00000000, %00000000
   6824  2802					      endif
   6825  2802		       00 7c		      .byte.b	%00000000, %01111100
   6826  2804					      if	(pfwidth>2)
   6827  2804		       7c 00		      .byte.b	%01111100, %00000000
   6828  2806					      endif
   6829  2806		       00 70		      .byte.b	%00000000, %01110000
   6830  2808					      if	(pfwidth>2)
   6831  2808		       70 00		      .byte.b	%01110000, %00000000
   6832  280a					      endif
   6833  280a		       00 00		      .byte.b	%00000000, %00000000
   6834  280c					      if	(pfwidth>2)
   6835  280c		       00 00		      .byte.b	%00000000, %00000000
   6836  280e					      endif
   6837  280e		       00 00		      .byte.b	%00000000, %00000000
   6838  2810					      if	(pfwidth>2)
   6839  2810		       00 00		      .byte.b	%00000000, %00000000
   6840  2812					      endif
   6841  2812				   pflabel29
   6842  2812		       bd e6 b7 	      lda	PF_data29,x
   6843  2815		       95 a4		      sta	playfield,x
   6844  2817		       ca		      dex
   6845  2818		       10 f8		      bpl	pflabel29
   6846  281a				   .
   6847  281a							; 
   6848  281a
   6849  281a				   .L0382		;  goto __Done_Next_Room
   6850  281a
   6851  281a		       4c ce b0 	      jmp	.__Done_Next_Room
   6852  281d
   6853  281d				   .
   6854  281d							; 
   6855  281d
   6856  281d				   .
   6857  281d							; 
   6858  281d
   6859  281d				   .__sT
   6860  281d							; __sT
   6861  281d
   6862  281d				   .L0383		;  playfield:
   6863  281d
   6864  281d				  -	      ifconst	pfres
   6865  281d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6866  281d					      else
   6867  281d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6868  281f					      endif
   6869  281f		       4c 4e b8 	      jmp	pflabel30
   6870  2822				   PF_data30
   6871  2822		       00 00		      .byte.b	%00000000, %00000000
   6872  2824					      if	(pfwidth>2)
   6873  2824		       00 00		      .byte.b	%00000000, %00000000
   6874  2826					      endif
   6875  2826		       00 00		      .byte.b	%00000000, %00000000
   6876  2828					      if	(pfwidth>2)
   6877  2828		       00 00		      .byte.b	%00000000, %00000000
   6878  282a					      endif
   6879  282a		       07 3c		      .byte.b	%00000111, %00111100
   6880  282c					      if	(pfwidth>2)
   6881  282c		       3c 07		      .byte.b	%00111100, %00000111
   6882  282e					      endif
   6883  282e		       07 fc		      .byte.b	%00000111, %11111100
   6884  2830					      if	(pfwidth>2)
   6885  2830		       fc 07		      .byte.b	%11111100, %00000111
   6886  2832					      endif
   6887  2832		       00 00		      .byte.b	%00000000, %00000000
   6888  2834					      if	(pfwidth>2)
   6889  2834		       00 00		      .byte.b	%00000000, %00000000
   6890  2836					      endif
   6891  2836		       00 00		      .byte.b	%00000000, %00000000
   6892  2838					      if	(pfwidth>2)
   6893  2838		       00 00		      .byte.b	%00000000, %00000000
   6894  283a					      endif
   6895  283a		       07 fc		      .byte.b	%00000111, %11111100
   6896  283c					      if	(pfwidth>2)
   6897  283c		       fc 07		      .byte.b	%11111100, %00000111
   6898  283e					      endif
   6899  283e		       07 3c		      .byte.b	%00000111, %00111100
   6900  2840					      if	(pfwidth>2)
   6901  2840		       3c 07		      .byte.b	%00111100, %00000111
   6902  2842					      endif
   6903  2842		       07 3c		      .byte.b	%00000111, %00111100
   6904  2844					      if	(pfwidth>2)
   6905  2844		       3c 07		      .byte.b	%00111100, %00000111
   6906  2846					      endif
   6907  2846		       00 00		      .byte.b	%00000000, %00000000
   6908  2848					      if	(pfwidth>2)
   6909  2848		       00 00		      .byte.b	%00000000, %00000000
   6910  284a					      endif
   6911  284a		       00 00		      .byte.b	%00000000, %00000000
   6912  284c					      if	(pfwidth>2)
   6913  284c		       00 00		      .byte.b	%00000000, %00000000
   6914  284e					      endif
   6915  284e				   pflabel30
   6916  284e		       bd 22 b8 	      lda	PF_data30,x
   6917  2851		       95 a4		      sta	playfield,x
   6918  2853		       ca		      dex
   6919  2854		       10 f8		      bpl	pflabel30
   6920  2856				   .
   6921  2856							; 
   6922  2856
   6923  2856				   .L0384		;  goto __Done_Next_Room
   6924  2856
   6925  2856		       4c ce b0 	      jmp	.__Done_Next_Room
   6926  2859
   6927  2859				   .
   6928  2859							; 
   6929  2859
   6930  2859				   .
   6931  2859							; 
   6932  2859
   6933  2859				   .__sU
   6934  2859							; __sU
   6935  2859
   6936  2859				   .L0385		;  playfield:
   6937  2859
   6938  2859				  -	      ifconst	pfres
   6939  2859				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6940  2859					      else
   6941  2859		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6942  285b					      endif
   6943  285b		       4c 8a b8 	      jmp	pflabel31
   6944  285e				   PF_data31
   6945  285e		       00 00		      .byte.b	%00000000, %00000000
   6946  2860					      if	(pfwidth>2)
   6947  2860		       00 00		      .byte.b	%00000000, %00000000
   6948  2862					      endif
   6949  2862		       00 00		      .byte.b	%00000000, %00000000
   6950  2864					      if	(pfwidth>2)
   6951  2864		       00 00		      .byte.b	%00000000, %00000000
   6952  2866					      endif
   6953  2866		       00 70		      .byte.b	%00000000, %01110000
   6954  2868					      if	(pfwidth>2)
   6955  2868		       70 00		      .byte.b	%01110000, %00000000
   6956  286a					      endif
   6957  286a		       00 7c		      .byte.b	%00000000, %01111100
   6958  286c					      if	(pfwidth>2)
   6959  286c		       7c 00		      .byte.b	%01111100, %00000000
   6960  286e					      endif
   6961  286e		       00 7e		      .byte.b	%00000000, %01111110
   6962  2870					      if	(pfwidth>2)
   6963  2870		       7e 00		      .byte.b	%01111110, %00000000
   6964  2872					      endif
   6965  2872		       00 7f		      .byte.b	%00000000, %01111111
   6966  2874					      if	(pfwidth>2)
   6967  2874		       7f 00		      .byte.b	%01111111, %00000000
   6968  2876					      endif
   6969  2876		       00 7e		      .byte.b	%00000000, %01111110
   6970  2878					      if	(pfwidth>2)
   6971  2878		       7e 00		      .byte.b	%01111110, %00000000
   6972  287a					      endif
   6973  287a		       00 7c		      .byte.b	%00000000, %01111100
   6974  287c					      if	(pfwidth>2)
   6975  287c		       7c 00		      .byte.b	%01111100, %00000000
   6976  287e					      endif
   6977  287e		       00 70		      .byte.b	%00000000, %01110000
   6978  2880					      if	(pfwidth>2)
   6979  2880		       70 00		      .byte.b	%01110000, %00000000
   6980  2882					      endif
   6981  2882		       00 00		      .byte.b	%00000000, %00000000
   6982  2884					      if	(pfwidth>2)
   6983  2884		       00 00		      .byte.b	%00000000, %00000000
   6984  2886					      endif
   6985  2886		       00 00		      .byte.b	%00000000, %00000000
   6986  2888					      if	(pfwidth>2)
   6987  2888		       00 00		      .byte.b	%00000000, %00000000
   6988  288a					      endif
   6989  288a				   pflabel31
   6990  288a		       bd 5e b8 	      lda	PF_data31,x
   6991  288d		       95 a4		      sta	playfield,x
   6992  288f		       ca		      dex
   6993  2890		       10 f8		      bpl	pflabel31
   6994  2892				   .
   6995  2892							; 
   6996  2892
   6997  2892				   .L0386		;  goto __Done_Next_Room
   6998  2892
   6999  2892		       4c ce b0 	      jmp	.__Done_Next_Room
   7000  2895
   7001  2895				   .
   7002  2895							; 
   7003  2895
   7004  2895				   .
   7005  2895							; 
   7006  2895
   7007  2895				   .__sV
   7008  2895							; __sV
   7009  2895
   7010  2895				   .L0387		;  playfield:
   7011  2895
   7012  2895				  -	      ifconst	pfres
   7013  2895				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   7014  2895					      else
   7015  2895		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   7016  2897					      endif
   7017  2897		       4c c6 b8 	      jmp	pflabel32
   7018  289a				   PF_data32
   7019  289a		       00 00		      .byte.b	%00000000, %00000000
   7020  289c					      if	(pfwidth>2)
   7021  289c		       00 00		      .byte.b	%00000000, %00000000
   7022  289e					      endif
   7023  289e		       00 00		      .byte.b	%00000000, %00000000
   7024  28a0					      if	(pfwidth>2)
   7025  28a0		       00 00		      .byte.b	%00000000, %00000000
   7026  28a2					      endif
   7027  28a2		       07 3f		      .byte.b	%00000111, %00111111
   7028  28a4					      if	(pfwidth>2)
   7029  28a4		       3f 07		      .byte.b	%00111111, %00000111
   7030  28a6					      endif
   7031  28a6		       07 3f		      .byte.b	%00000111, %00111111
   7032  28a8					      if	(pfwidth>2)
   7033  28a8		       3f 07		      .byte.b	%00111111, %00000111
   7034  28aa					      endif
   7035  28aa		       07 01		      .byte.b	%00000111, %00000001
   7036  28ac					      if	(pfwidth>2)
   7037  28ac		       01 07		      .byte.b	%00000001, %00000111
   7038  28ae					      endif
   7039  28ae		       00 00		      .byte.b	%00000000, %00000000
   7040  28b0					      if	(pfwidth>2)
   7041  28b0		       00 00		      .byte.b	%00000000, %00000000
   7042  28b2					      endif
   7043  28b2		       00 38		      .byte.b	%00000000, %00111000
   7044  28b4					      if	(pfwidth>2)
   7045  28b4		       38 00		      .byte.b	%00111000, %00000000
   7046  28b6					      endif
   7047  28b6		       00 38		      .byte.b	%00000000, %00111000
   7048  28b8					      if	(pfwidth>2)
   7049  28b8		       38 00		      .byte.b	%00111000, %00000000
   7050  28ba					      endif
   7051  28ba		       07 3f		      .byte.b	%00000111, %00111111
   7052  28bc					      if	(pfwidth>2)
   7053  28bc		       3f 07		      .byte.b	%00111111, %00000111
   7054  28be					      endif
   7055  28be		       00 00		      .byte.b	%00000000, %00000000
   7056  28c0					      if	(pfwidth>2)
   7057  28c0		       00 00		      .byte.b	%00000000, %00000000
   7058  28c2					      endif
   7059  28c2		       00 00		      .byte.b	%00000000, %00000000
   7060  28c4					      if	(pfwidth>2)
   7061  28c4		       00 00		      .byte.b	%00000000, %00000000
   7062  28c6					      endif
   7063  28c6				   pflabel32
   7064  28c6		       bd 9a b8 	      lda	PF_data32,x
   7065  28c9		       95 a4		      sta	playfield,x
   7066  28cb		       ca		      dex
   7067  28cc		       10 f8		      bpl	pflabel32
   7068  28ce				   .
   7069  28ce							; 
   7070  28ce
   7071  28ce				   .L0388		;  goto __Done_Next_Room
   7072  28ce
   7073  28ce		       4c ce b0 	      jmp	.__Done_Next_Room
   7074  28d1
   7075  28d1				   .
   7076  28d1							; 
   7077  28d1
   7078  28d1				   .
   7079  28d1							; 
   7080  28d1
   7081  28d1				   .
   7082  28d1							; 
   7083  28d1
   7084  28d1				   .
   7085  28d1							; 
   7086  28d1
   7087  28d1				   .
   7088  28d1							; 
   7089  28d1
   7090  28d1				   .
   7091  28d1							; 
   7092  28d1
   7093  28d1				   .
   7094  28d1							; 
   7095  28d1
   7096  28d1				   .
   7097  28d1							; 
   7098  28d1
   7099  28d1				   .
   7100  28d1							; 
   7101  28d1
   7102  28d1				   .
   7103  28d1							; 
   7104  28d1
   7105  28d1				   .L0389		;  data _Data_Background_Color
   7106  28d1
   7107  28d1		       4c f4 b8 	      JMP	.skipL0389
   7108  28d4				   _Data_Background_Color
   7109  28d4		       20		      .byte.b	_20
   7110  28d5
   7111  28d5		       30		      .byte.b	_30
   7112  28d6
   7113  28d6		       50		      .byte.b	_50
   7114  28d7
   7115  28d7		       b0		      .byte.b	_B0
   7116  28d8
   7117  28d8		       c0		      .byte.b	_C0
   7118  28d9
   7119  28d9		       d0		      .byte.b	_D0
   7120  28da
   7121  28da		       e0		      .byte.b	_E0
   7122  28db
   7123  28db		       f0		      .byte.b	_F0
   7124  28dc
   7125  28dc		       80		      .byte.b	_80
   7126  28dd
   7127  28dd		       62		      .byte.b	_62
   7128  28de
   7129  28de		       c2		      .byte.b	_C2
   7130  28df
   7131  28df		       60		      .byte.b	_60
   7132  28e0
   7133  28e0		       40		      .byte.b	_40
   7134  28e1
   7135  28e1		       d2		      .byte.b	_D2
   7136  28e2
   7137  28e2		       30		      .byte.b	_30
   7138  28e3
   7139  28e3		       d0		      .byte.b	_D0
   7140  28e4
   7141  28e4		       62		      .byte.b	_62
   7142  28e5
   7143  28e5		       62		      .byte.b	_62
   7144  28e6
   7145  28e6		       90		      .byte.b	_90
   7146  28e7
   7147  28e7		       90		      .byte.b	_90
   7148  28e8
   7149  28e8		       d0		      .byte.b	_D0
   7150  28e9
   7151  28e9		       d0		      .byte.b	_D0
   7152  28ea
   7153  28ea		       40		      .byte.b	_40
   7154  28eb
   7155  28eb		       40		      .byte.b	_40
   7156  28ec
   7157  28ec		       c2		      .byte.b	_C2
   7158  28ed
   7159  28ed		       c0		      .byte.b	_C0
   7160  28ee
   7161  28ee		       20		      .byte.b	_20
   7162  28ef
   7163  28ef		       22		      .byte.b	_22
   7164  28f0
   7165  28f0		       22		      .byte.b	_22
   7166  28f1
   7167  28f1		       d2		      .byte.b	_D2
   7168  28f2
   7169  28f2		       c2		      .byte.b	_C2
   7170  28f3
   7171  28f3		       22		      .byte.b	_22
   7172  28f4
   7173  28f4				   .skipL0389
   7174  28f4				   .
   7175  28f4							; 
   7176  28f4
   7177  28f4				   .
   7178  28f4							; 
   7179  28f4
   7180  28f4				   .
   7181  28f4							; 
   7182  28f4
   7183  28f4				   .
   7184  28f4							; 
   7185  28f4
   7186  28f4				   .
   7187  28f4							; 
   7188  28f4
   7189  28f4				   .
   7190  28f4							; 
   7191  28f4
   7192  28f4				   .
   7193  28f4							; 
   7194  28f4
   7195  28f4				   .
   7196  28f4							; 
   7197  28f4
   7198  28f4				   .L0390		;  data _Data_Foreground_Color
   7199  28f4
   7200  28f4		       4c 17 b9 	      JMP	.skipL0390
   7201  28f7				   _Data_Foreground_Color
   7202  28f7		       bc		      .byte.b	_BC
   7203  28f8
   7204  28f8		       3c		      .byte.b	_3C
   7205  28f9
   7206  28f9		       bc		      .byte.b	_BC
   7207  28fa
   7208  28fa		       cc		      .byte.b	_CC
   7209  28fb
   7210  28fb		       2c		      .byte.b	_2C
   7211  28fc
   7212  28fc		       0c		      .byte.b	_0C
   7213  28fd
   7214  28fd		       bc		      .byte.b	_BC
   7215  28fe
   7216  28fe		       ac		      .byte.b	_AC
   7217  28ff
   7218  28ff		       9c		      .byte.b	_9C
   7219  2900
   7220  2900		       6c		      .byte.b	_6C
   7221  2901
   7222  2901		       cc		      .byte.b	_CC
   7223  2902
   7224  2902		       3c		      .byte.b	_3C
   7225  2903
   7226  2903		       cc		      .byte.b	_CC
   7227  2904
   7228  2904		       9c		      .byte.b	_9C
   7229  2905
   7230  2905		       cc		      .byte.b	_CC
   7231  2906
   7232  2906		       2c		      .byte.b	_2C
   7233  2907
   7234  2907		       5c		      .byte.b	_5C
   7235  2908
   7236  2908		       9c		      .byte.b	_9C
   7237  2909
   7238  2909		       bc		      .byte.b	_BC
   7239  290a
   7240  290a		       5c		      .byte.b	_5C
   7241  290b
   7242  290b		       2c		      .byte.b	_2C
   7243  290c
   7244  290c		       4c		      .byte.b	_4C
   7245  290d
   7246  290d		       0c		      .byte.b	_0C
   7247  290e
   7248  290e		       3c		      .byte.b	_3C
   7249  290f
   7250  290f		       0c		      .byte.b	_0C
   7251  2910
   7252  2910		       ac		      .byte.b	_AC
   7253  2911
   7254  2911		       cc		      .byte.b	_CC
   7255  2912
   7256  2912		       4c		      .byte.b	_4C
   7257  2913
   7258  2913		       3c		      .byte.b	_3C
   7259  2914
   7260  2914		       ec		      .byte.b	_EC
   7261  2915
   7262  2915		       4c		      .byte.b	_4C
   7263  2916
   7264  2916		       2e		      .byte.b	_2E
   7265  2917
   7266  2917				   .skipL0390
   7267  2917				   .
   7268  2917							; 
   7269  2917
   7270  2917				   .
   7271  2917							; 
   7272  2917
   7273  2917				   .
   7274  2917							; 
   7275  2917
   7276  2917				   .
   7277  2917							; 
   7278  2917
   7279  2917				   .
   7280  2917							; 
   7281  2917
   7282  2917				   .
   7283  2917							; 
   7284  2917
   7285  2917				   .
   7286  2917							; 
   7287  2917
   7288  2917				   .
   7289  2917							; 
   7290  2917
   7291  2917				   .L0391		;  data _Data_Number_to_Bit
   7292  2917
   7293  2917		       4c 22 b9 	      JMP	.skipL0391
   7294  291a				   _Data_Number_to_Bit
   7295  291a		       01		      .byte.b	%00000001
   7296  291b
   7297  291b		       02		      .byte.b	%00000010
   7298  291c
   7299  291c		       04		      .byte.b	%00000100
   7300  291d
   7301  291d		       08		      .byte.b	%00001000
   7302  291e
   7303  291e		       10		      .byte.b	%00010000
   7304  291f
   7305  291f		       20		      .byte.b	%00100000
   7306  2920
   7307  2920		       40		      .byte.b	%01000000
   7308  2921
   7309  2921		       80		      .byte.b	%10000000
   7310  2922
   7311  2922				   .skipL0391
   7312  2922				   .
   7313  2922							; 
   7314  2922
   7315  2922				   .
   7316  2922							; 
   7317  2922
   7318  2922				   .
   7319  2922							; 
   7320  2922
   7321  2922				   .
   7322  2922							; 
   7323  2922
   7324  2922				   .
   7325  2922							; 
   7326  2922
   7327  2922				   .L0392		;  bank 3
   7328  2922
   7329  2922					      if	ECHO2
      1714 bytes of ROM space left in bank 2
   7330  2922					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   7331  2922					      endif
   7332  2922		       00 01	   ECHO2      =	1
   7333  2fd4					      ORG	$2FF4-bscode_length
   7334  2fd4					      RORG	$BFF4-bscode_length
   7335  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   7336  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   7337  2fd6				  -	      stx	FASTFETCH
   7338  2fd6					      endif
   7339  2fd6		       9a		      txs
   7340  2fd7				  -	      if	bankswitch == 64
   7341  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7342  2fd7					      else
   7343  2fd7		       a9 f2		      lda	#>(start-1)
   7344  2fd9					      endif
   7345  2fd9		       48		      pha
   7346  2fda		       a9 4f		      lda	#<(start-1)
   7347  2fdc		       48		      pha
   7348  2fdd		       48		      pha
   7349  2fde		       8a		      txa
   7350  2fdf		       48		      pha
   7351  2fe0		       ba		      tsx
   7352  2fe1					      if	bankswitch != 64
   7353  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   7354  2fe3		       2a		      rol
   7355  2fe4		       2a		      rol
   7356  2fe5		       2a		      rol
   7357  2fe6		       2a		      rol
   7358  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7359  2fe9		       aa		      tax
   7360  2fea		       e8		      inx
   7361  2feb				  -	      else
   7362  2feb				  -	      lda	4,x	; get high byte of return address
   7363  2feb				  -	      tay
   7364  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7365  2feb				  -	      sta	4,x
   7366  2feb				  -	      tya
   7367  2feb				  -	      lsr
   7368  2feb				  -	      lsr
   7369  2feb				  -	      lsr
   7370  2feb				  -	      lsr
   7371  2feb				  -	      tax
   7372  2feb				  -	      inx
   7373  2feb					      endif
   7374  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7375  2fee		       68		      pla
   7376  2fef		       aa		      tax
   7377  2ff0		       68		      pla
   7378  2ff1		       60		      rts
   7379  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7380  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7381  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7382  2ff2					      endif
   7383  2ffc					      ORG	$2FFC
   7384  2ffc					      RORG	$BFFC
   7385  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
   7386  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
   7387  3000					      ORG	$3000
   7388  3000					      RORG	$D000
   7389  3000				   .
   7390  3000							; 
   7391  3000
   7392  3000				   .
   7393  3000							; 
   7394  3000
   7395  3000				   .
   7396  3000							; 
   7397  3000
   7398  3000				   .
   7399  3000							; 
   7400  3000
   7401  3000				   .
   7402  3000							; 
   7403  3000
   7404  3000				   .__Continue_in_Bank_3
   7405  3000							; __Continue_in_Bank_3
   7406  3000
   7407  3000				   .
   7408  3000							; 
   7409  3000
   7410  3000				   .
   7411  3000							; 
   7412  3000
   7413  3000				   .
   7414  3000							; 
   7415  3000
   7416  3000				   .
   7417  3000							; 
   7418  3000
   7419  3000				   .
   7420  3000							; 
   7421  3000
   7422  3000				   .
   7423  3000							; 
   7424  3000
   7425  3000				   .
   7426  3000							; 
   7427  3000
   7428  3000				   .
   7429  3000							; 
   7430  3000
   7431  3000				   .
   7432  3000							; 
   7433  3000
   7434  3000				   .
   7435  3000							; 
   7436  3000
   7437  3000				   .
   7438  3000							; 
   7439  3000
   7440  3000				   .
   7441  3000							; 
   7442  3000
   7443  3000				   .
   7444  3000							; 
   7445  3000
   7446  3000				   .
   7447  3000							; 
   7448  3000
   7449  3000				   .
   7450  3000							; 
   7451  3000
   7452  3000				   .
   7453  3000							; 
   7454  3000
   7455  3000				   .
   7456  3000							; 
   7457  3000
   7458  3000				   .
   7459  3000							; 
   7460  3000
   7461  3000				   .
   7462  3000							; 
   7463  3000
   7464  3000				   .
   7465  3000							; 
   7466  3000
   7467  3000				   .
   7468  3000							; 
   7469  3000
   7470  3000				   .
   7471  3000							; 
   7472  3000
   7473  3000				   .
   7474  3000							; 
   7475  3000
   7476  3000				   .L0393		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop bank1
   7477  3000
   7478  3000		       a9 01		      lda	#1
   7479  3002		       2c 82 02 	      bit	SWCHB
   7480  3005		       f0 18		      BEQ	.skipL0393
   7481  3007				   .condpart74
   7482  3007		       a5 e2		      LDA	_Bit0_Reset_Restrainer
   7483  3009		       29 fe		      AND	#254
   7484  300b		       85 e2		      STA	_Bit0_Reset_Restrainer
   7485  300d		       85 ee		      sta	temp7
   7486  300f		       a9 92		      lda	#>(.__Main_Loop-1)
   7487  3011		       48		      pha
   7488  3012		       a9 52		      lda	#<(.__Main_Loop-1)
   7489  3014		       48		      pha
   7490  3015		       a5 ee		      lda	temp7
   7491  3017		       48		      pha
   7492  3018		       8a		      txa
   7493  3019		       48		      pha
   7494  301a		       a2 01		      ldx	#1
   7495  301c		       4c eb ff 	      jmp	BS_jsr
   7496  301f				   .skipL0393
   7497  301f				   .
   7498  301f							; 
   7499  301f
   7500  301f				   .
   7501  301f							; 
   7502  301f
   7503  301f				   .
   7504  301f							; 
   7505  301f
   7506  301f				   .
   7507  301f							; 
   7508  301f
   7509  301f				   .
   7510  301f							; 
   7511  301f
   7512  301f				   .L0394		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop bank1
   7513  301f
   7514  301f		       a5 e2		      LDA	_Bit0_Reset_Restrainer
   7515  3021		       4a		      LSR
   7516  3022		       90 12		      BCC	.skipL0394
   7517  3024				   .condpart75
   7518  3024		       85 ee		      sta	temp7
   7519  3026		       a9 92		      lda	#>(.__Main_Loop-1)
   7520  3028		       48		      pha
   7521  3029		       a9 52		      lda	#<(.__Main_Loop-1)
   7522  302b		       48		      pha
   7523  302c		       a5 ee		      lda	temp7
   7524  302e		       48		      pha
   7525  302f		       8a		      txa
   7526  3030		       48		      pha
   7527  3031		       a2 01		      ldx	#1
   7528  3033		       4c eb ff 	      jmp	BS_jsr
   7529  3036				   .skipL0394
   7530  3036				   .
   7531  3036							; 
   7532  3036
   7533  3036				   .
   7534  3036							; 
   7535  3036
   7536  3036				   .
   7537  3036							; 
   7538  3036
   7539  3036				   .
   7540  3036							; 
   7541  3036
   7542  3036				   .L0395		;  goto __Start_Restart bank1
   7543  3036
   7544  3036		       85 ee		      sta	temp7
   7545  3038		       a9 8f		      lda	#>(.__Start_Restart-1)
   7546  303a		       48		      pha
   7547  303b		       a9 ff		      lda	#<(.__Start_Restart-1)
   7548  303d		       48		      pha
   7549  303e		       a5 ee		      lda	temp7
   7550  3040		       48		      pha
   7551  3041		       8a		      txa
   7552  3042		       48		      pha
   7553  3043		       a2 01		      ldx	#1
   7554  3045		       4c eb ff 	      jmp	BS_jsr
   7555  3048				   .
   7556  3048							; 
   7557  3048
   7558  3048				   .
   7559  3048							; 
   7560  3048
   7561  3048				   .
   7562  3048							; 
   7563  3048
   7564  3048				   .
   7565  3048							; 
   7566  3048
   7567  3048				   .
   7568  3048							; 
   7569  3048
   7570  3048				   .L0396		;  bank 4
   7571  3048
   7572  3048					      if	ECHO3
      3980 bytes of ROM space left in bank 3
   7573  3048					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   7574  3048					      endif
   7575  3048		       00 01	   ECHO3      =	1
   7576  3fd4					      ORG	$3FF4-bscode_length
   7577  3fd4					      RORG	$DFF4-bscode_length
   7578  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   7579  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
   7580  3fd6				  -	      stx	FASTFETCH
   7581  3fd6					      endif
   7582  3fd6		       9a		      txs
   7583  3fd7				  -	      if	bankswitch == 64
   7584  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7585  3fd7					      else
   7586  3fd7		       a9 f2		      lda	#>(start-1)
   7587  3fd9					      endif
   7588  3fd9		       48		      pha
   7589  3fda		       a9 4f		      lda	#<(start-1)
   7590  3fdc		       48		      pha
   7591  3fdd		       48		      pha
   7592  3fde		       8a		      txa
   7593  3fdf		       48		      pha
   7594  3fe0		       ba		      tsx
   7595  3fe1					      if	bankswitch != 64
   7596  3fe1		       b5 04		      lda	4,x	; get high byte of return address
   7597  3fe3		       2a		      rol
   7598  3fe4		       2a		      rol
   7599  3fe5		       2a		      rol
   7600  3fe6		       2a		      rol
   7601  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7602  3fe9		       aa		      tax
   7603  3fea		       e8		      inx
   7604  3feb				  -	      else
   7605  3feb				  -	      lda	4,x	; get high byte of return address
   7606  3feb				  -	      tay
   7607  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7608  3feb				  -	      sta	4,x
   7609  3feb				  -	      tya
   7610  3feb				  -	      lsr
   7611  3feb				  -	      lsr
   7612  3feb				  -	      lsr
   7613  3feb				  -	      lsr
   7614  3feb				  -	      tax
   7615  3feb				  -	      inx
   7616  3feb					      endif
   7617  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7618  3fee		       68		      pla
   7619  3fef		       aa		      tax
   7620  3ff0		       68		      pla
   7621  3ff1		       60		      rts
   7622  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7623  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7624  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7625  3ff2					      endif
   7626  3ffc					      ORG	$3FFC
   7627  3ffc					      RORG	$DFFC
   7628  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
   7629  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
   7630  4000					      ORG	$4000
   7631  4000					      RORG	$F000
   7632  4000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7633  4000
   7634  4000							; This is a 2-line kernel!
   7635  4000					      ifnconst	vertical_reflect
   7636  4000				   kernel
   7637  4000					      endif
   7638  4000		       85 02		      sta	WSYNC
   7639  4002		       a9 ff		      lda	#255
   7640  4004		       8d 96 02 	      sta	TIM64T
   7641  4007
   7642  4007		       a9 01		      lda	#1
   7643  4009		       85 27		      sta	VDELBL
   7644  400b		       85 25		      sta	VDELP0
   7645  400d		       a6 92		      ldx	ballheight
   7646  400f		       e8		      inx
   7647  4010		       e8		      inx
   7648  4011		       86 9f		      stx	temp4
   7649  4013		       a5 86		      lda	player1y
   7650  4015		       85 9e		      sta	temp3
   7651  4017
   7652  4017				  -	      ifconst	shakescreen
   7653  4017				  -	      jsr	doshakescreen
   7654  4017					      else
   7655  4017		       a6 90		      ldx	missile0height
   7656  4019		       e8		      inx
   7657  401a					      endif
   7658  401a
   7659  401a		       e8		      inx
   7660  401b		       86 f6		      stx	stack1
   7661  401d
   7662  401d		       a5 89		      lda	bally
   7663  401f		       85 f7		      sta	stack2
   7664  4021
   7665  4021		       a5 85		      lda	player0y
   7666  4023		       a2 00		      ldx	#0
   7667  4025		       85 02		      sta	WSYNC
   7668  4027		       86 1b		      stx	GRP0
   7669  4029		       86 1c		      stx	GRP1
   7670  402b		       86 0e		      stx	PF1L
   7671  402d		       86 0f		      stx	PF2
   7672  402f		       86 2c		      stx	CXCLR
   7673  4031				  -	      ifconst	readpaddle
   7674  4031				  -	      stx	paddle
   7675  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
   7677  4033					      endif
   7678  4033
   7679  4033		       95 9d		      sta	temp2,x
   7680  4035
   7681  4035							;store these so they can be retrieved later
   7682  4035					      ifnconst	pfres
   7683  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
   7684  4037				  -	      else
   7685  4037				  -	      ldx	#132-pfres*pfwidth
   7686  4037					      endif
   7687  4037
   7688  4037		       c6 85		      dec	player0y
   7689  4039
   7690  4039		       a5 91		      lda	missile0y
   7691  403b		       85 a0		      sta	temp5
   7692  403d		       a5 88		      lda	missile1y
   7693  403f		       85 a1		      sta	temp6
   7694  4041
   7695  4041		       a5 ef		      lda	playfieldpos
   7696  4043		       85 9c		      sta	temp1
   7697  4045
   7698  4045				  -	      ifconst	pfrowheight
   7699  4045				  -	      lda	#pfrowheight+2
   7700  4045					      else
   7701  4045					      ifnconst	pfres
   7702  4045		       a9 0a		      lda	#10
   7703  4047				  -	      else
   7704  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   7705  4047					      endif
   7706  4047					      endif
   7707  4047		       18		      clc
   7708  4048		       e5 ef		      sbc	playfieldpos
   7709  404a		       85 ef		      sta	playfieldpos
   7710  404c		       4c 74 f0 	      jmp	.startkernel
   7711  404f
   7712  404f				   .skipDrawP0
   7713  404f		       a9 00		      lda	#0
   7714  4051		       a8		      tay
   7715  4052		       4c a2 f0 	      jmp	.continueP0
   7716  4055
   7717  4055				   .skipDrawP1
   7718  4055		       a9 00		      lda	#0
   7719  4057		       a8		      tay
   7720  4058		       4c 7e f0 	      jmp	.continueP1
   7721  405b
   7722  405b				   .kerloop		; enter at cycle 59??
   7723  405b
   7724  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
   7726  405c				   continuekernel2
   7727  405c		       a5 92		      lda	ballheight
   7728  405e
   7729  405e				  -	      ifconst	pfres
   7730  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
   7731  405e				  -	      sty	PF1L	;3
   7732  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   7733  405e				  -	      sty	PF2L	;3
   7734  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
   7735  405e				  -	      sty	PF1R	; 3 too early?
   7736  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   7737  405e				  -	      sty	PF2R	;3
   7738  405e					      else
   7739  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
   7740  4060		       84 0e		      sty	PF1L	;3
   7741  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   7742  4064		       84 0f		      sty	PF2L	;3
   7743  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
   7744  4068		       84 0e		      sty	PF1R	; 3 too early?
   7745  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   7746  406c		       84 0f		      sty	PF2R	;3
   7747  406e					      endif
   7748  406e
   7749  406e							; should be playfield+$38 for width=2
   7750  406e
   7751  406e		       c7 89		      dcp	bally
   7752  4070		       2a		      rol
   7753  4071		       2a		      rol
   7754  4072							; rol
   7755  4072							; rol
   7756  4072				   goback
   7757  4072		       85 1f		      sta	ENABL
   7758  4074				   .startkernel
   7759  4074		       a5 8f		      lda	player1height	;3
   7760  4076		       c7 86		      dcp	player1y	;5
   7761  4078		       90 db		      bcc	.skipDrawP1	;2
   7762  407a		       a4 86		      ldy	player1y	;3
   7763  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   7764  407e							; so it doesn't cross a page boundary!
   7765  407e
   7766  407e				   .continueP1
   7767  407e		       85 1c		      sta	GRP1	;3
   7768  4080
   7769  4080				  -	      ifnconst	player1colors
   7770  4080				  -	      lda	missile1height	;3
   7771  4080				  -	      dcp	missile1y	;5
   7772  4080				  -	      rol		;2
   7773  4080				  -	      rol		;2
   7774  4080				  -	      sta	ENAM1	;3
   7775  4080					      else
   7776  4080		       b1 87		      lda	(player1color),y
   7777  4082		       85 07		      sta	COLUP1
   7778  4084					      ifnconst	playercolors
      0  4084					      sleep	7
      1  4084				   .CYCLES    SET	7
      2  4084
      3  4084				  -	      IF	.CYCLES < 2
      4  4084				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4084				  -	      ERR
      6  4084					      ENDIF
      7  4084
      8  4084					      IF	.CYCLES & 1
      9  4084					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4084		       04 00		      nop	0
     11  4086				  -	      ELSE
     12  4086				  -	      bit	VSYNC
     13  4086					      ENDIF
     14  4086				   .CYCLES    SET	.CYCLES - 3
     15  4086					      ENDIF
     16  4086
     17  4086					      REPEAT	.CYCLES / 2
     18  4086		       ea		      nop
     17  4086					      REPEND
     18  4087		       ea		      nop
     19  4088					      REPEND
   7780  4088				  -	      else
   7781  4088				  -	      lda.w	player0colorstore
   7782  4088				  -	      sta	COLUP0
   7783  4088					      endif
   7784  4088					      endif
   7785  4088
   7786  4088				  -	      ifconst	pfres
   7787  4088				  -	      lda	playfield+pfres*pfwidth-132,x
   7788  4088				  -	      sta	PF1L	;3
   7789  4088				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   7790  4088				  -	      sta	PF2L	;3
   7791  4088				  -	      lda	playfield+pfres*pfwidth-129,x
   7792  4088				  -	      sta	PF1R	; 3 too early?
   7793  4088				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   7794  4088				  -	      sta	PF2R	;3
   7795  4088					      else
   7796  4088		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
   7797  408a		       85 0e		      sta	PF1L	;3
   7798  408c		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   7799  408e		       85 0f		      sta	PF2L	;3
   7800  4090		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
   7801  4092		       85 0e		      sta	PF1R	; 3 too early?
   7802  4094		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   7803  4096		       85 0f		      sta	PF2R	;3
   7804  4098					      endif
   7805  4098							; sleep 3
   7806  4098
   7807  4098		       a5 8e		      lda	player0height
   7808  409a		       c7 85		      dcp	player0y
   7809  409c		       90 b1		      bcc	.skipDrawP0
   7810  409e		       a4 85		      ldy	player0y
   7811  40a0		       b1 8a		      lda	(player0pointer),y
   7812  40a2				   .continueP0
   7813  40a2		       85 1b		      sta	GRP0
   7814  40a4
   7815  40a4					      ifnconst	no_blank_lines
   7816  40a4					      ifnconst	playercolors
   7817  40a4		       a5 90		      lda	missile0height	;3
   7818  40a6		       c7 91		      dcp	missile0y	;5
   7819  40a8		       e5 f6		      sbc	stack1
   7820  40aa		       85 1d		      sta	ENAM0	;3
   7821  40ac				  -	      else
   7822  40ac				  -	      lda	(player0color),y
   7823  40ac				  -	      sta	player0colorstore
   7824  40ac				  -	      sleep	6
   7825  40ac					      endif
   7826  40ac		       c6 9c		      dec	temp1
   7827  40ae		       d0 ab		      bne	continuekernel
   7828  40b0				  -	      else
   7829  40b0				  -	      dec	temp1
   7830  40b0				  -	      beq	altkernel2
   7831  40b0				  -	      ifconst	readpaddle
   7832  40b0				  -	      ldy	currentpaddle
   7833  40b0				  -	      lda	INPT0,y
   7834  40b0				  -	      bpl	noreadpaddle
   7835  40b0				  -	      inc	paddle
   7836  40b0				  -	      jmp	continuekernel2
   7837  40b0				  -noreadpaddle
   7838  40b0				  -	      sleep	2
   7839  40b0				  -	      jmp	continuekernel
   7840  40b0				  -	      else
   7841  40b0				  -	      ifnconst	playercolors
   7842  40b0				  -	      ifconst	PFcolors
   7843  40b0				  -	      txa
   7844  40b0				  -	      tay
   7845  40b0				  -	      lda	(pfcolortable),y
   7846  40b0				  -	      ifnconst	backgroundchange
   7847  40b0				  -	      sta	COLUPF
   7848  40b0				  -	      else
   7849  40b0				  -	      sta	COLUBK
   7850  40b0				  -	      endif
   7851  40b0				  -	      jmp	continuekernel
   7852  40b0				  -	      else
   7853  40b0				  -	      ifconst	kernelmacrodef
   7854  40b0				  -	      kernelmacro
   7855  40b0				  -	      else
   7856  40b0				  -	      sleep	12
   7857  40b0				  -	      endif
   7858  40b0				  -	      endif
   7859  40b0				  -	      else
   7860  40b0				  -	      lda	(player0color),y
   7861  40b0				  -	      sta	player0colorstore
   7862  40b0				  -	      sleep	4
   7863  40b0				  -	      endif
   7864  40b0				  -	      jmp	continuekernel
   7865  40b0				  -	      endif
   7866  40b0				  -altkernel2
   7867  40b0				  -	      txa
   7868  40b0				  -	      ifnconst	vertical_reflect
   7869  40b0				  -	      sbx	#256-pfwidth
   7870  40b0				  -	      else
   7871  40b0				  -	      sbx	#256-pfwidth/2
   7872  40b0				  -	      endif
   7873  40b0				  -	      bmi	lastkernelline
   7874  40b0				  -	      ifconst	pfrowheight
   7875  40b0				  -	      lda	#pfrowheight
   7876  40b0				  -	      else
   7877  40b0				  -	      ifnconst	pfres
   7878  40b0				  -	      lda	#8
   7879  40b0				  -	      else
   7880  40b0				  -	      lda	#(96/pfres)	; try to come close to the real size
   7881  40b0				  -	      endif
   7882  40b0				  -	      endif
   7883  40b0				  -	      sta	temp1
   7884  40b0				  -	      jmp	continuekernel
   7885  40b0					      endif
   7886  40b0
   7887  40b0				   altkernel
   7888  40b0
   7889  40b0				  -	      ifconst	PFmaskvalue
   7890  40b0				  -	      lda	#PFmaskvalue
   7891  40b0					      else
   7892  40b0		       a9 00		      lda	#0
   7893  40b2					      endif
   7894  40b2		       85 0e		      sta	PF1L
   7895  40b4		       85 0f		      sta	PF2
   7896  40b6
   7897  40b6
   7898  40b6							;sleep 3
   7899  40b6
   7900  40b6							;28 cycles to fix things
   7901  40b6							;minus 11=17
   7902  40b6
   7903  40b6							; lax temp4
   7904  40b6							; clc
   7905  40b6		       8a		      txa
   7906  40b7					      ifnconst	vertical_reflect
   7907  40b7		       cb fc		      sbx	#256-pfwidth
   7908  40b9				  -	      else
   7909  40b9				  -	      sbx	#256-pfwidth/2
   7910  40b9					      endif
   7911  40b9
   7912  40b9		       30 12		      bmi	lastkernelline
   7913  40bb
   7914  40bb				  -	      ifconst	PFcolorandheight
   7915  40bb				  -	      ifconst	pfres
   7916  40bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   7917  40bb				  -	      else
   7918  40bb				  -	      ldy	playfieldcolorandheight-87,x
   7919  40bb				  -	      endif
   7920  40bb				  -	      ifnconst	backgroundchange
   7921  40bb				  -	      sty	COLUPF
   7922  40bb				  -	      else
   7923  40bb				  -	      sty	COLUBK
   7924  40bb				  -	      endif
   7925  40bb				  -	      ifconst	pfres
   7926  40bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   7927  40bb				  -	      else
   7928  40bb				  -	      lda	playfieldcolorandheight-88,x
   7929  40bb				  -	      endif
   7930  40bb				  -	      sta.w	temp1
   7931  40bb					      endif
   7932  40bb				  -	      ifconst	PFheights
   7933  40bb				  -	      lsr
   7934  40bb				  -	      lsr
   7935  40bb				  -	      tay
   7936  40bb				  -	      lda	(pfheighttable),y
   7937  40bb				  -	      sta.w	temp1
   7938  40bb					      endif
   7939  40bb				  -	      ifconst	PFcolors
   7940  40bb				  -	      tay
   7941  40bb				  -	      lda	(pfcolortable),y
   7942  40bb				  -	      ifnconst	backgroundchange
   7943  40bb				  -	      sta	COLUPF
   7944  40bb				  -	      else
   7945  40bb				  -	      sta	COLUBK
   7946  40bb				  -	      endif
   7947  40bb				  -	      ifconst	pfrowheight
   7948  40bb				  -	      lda	#pfrowheight
   7949  40bb				  -	      else
   7950  40bb				  -	      ifnconst	pfres
   7951  40bb				  -	      lda	#8
   7952  40bb				  -	      else
   7953  40bb				  -	      lda	#(96/pfres)	; try to come close to the real size
   7954  40bb				  -	      endif
   7955  40bb				  -	      endif
   7956  40bb				  -	      sta	temp1
   7957  40bb					      endif
   7958  40bb					      ifnconst	PFcolorandheight
   7959  40bb					      ifnconst	PFcolors
   7960  40bb					      ifnconst	PFheights
   7961  40bb					      ifnconst	no_blank_lines
   7962  40bb							; read paddle 0
   7963  40bb							; lo-res paddle read
   7964  40bb							; bit INPT0
   7965  40bb							; bmi paddleskipread
   7966  40bb							; inc paddle0
   7967  40bb							;donepaddleskip
      0  40bb					      sleep	10
      1  40bb				   .CYCLES    SET	10
      2  40bb
      3  40bb				  -	      IF	.CYCLES < 2
      4  40bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40bb				  -	      ERR
      6  40bb					      ENDIF
      7  40bb
      8  40bb				  -	      IF	.CYCLES & 1
      9  40bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40bb				  -	      nop	0
     11  40bb				  -	      ELSE
     12  40bb				  -	      bit	VSYNC
     13  40bb				  -	      ENDIF
     14  40bb				  -.CYCLES    SET	.CYCLES - 3
     15  40bb					      ENDIF
     16  40bb
     17  40bb					      REPEAT	.CYCLES / 2
     18  40bb		       ea		      nop
     17  40bb					      REPEND
     18  40bc		       ea		      nop
     17  40bc					      REPEND
     18  40bd		       ea		      nop
     17  40bd					      REPEND
     18  40be		       ea		      nop
     17  40be					      REPEND
     18  40bf		       ea		      nop
     19  40c0					      REPEND
   7969  40c0				  -	      ifconst	pfrowheight
   7970  40c0				  -	      lda	#pfrowheight
   7971  40c0					      else
   7972  40c0					      ifnconst	pfres
   7973  40c0		       a9 08		      lda	#8
   7974  40c2				  -	      else
   7975  40c2				  -	      lda	#(96/pfres)	; try to come close to the real size
   7976  40c2					      endif
   7977  40c2					      endif
   7978  40c2		       85 9c		      sta	temp1
   7979  40c4					      endif
   7980  40c4					      endif
   7981  40c4					      endif
   7982  40c4					      endif
   7983  40c4
   7984  40c4
   7985  40c4		       a5 92		      lda	ballheight
   7986  40c6		       c7 89		      dcp	bally
   7987  40c8		       e5 9f		      sbc	temp4
   7988  40ca
   7989  40ca
   7990  40ca		       4c 72 f0 	      jmp	goback
   7991  40cd
   7992  40cd
   7993  40cd					      ifnconst	no_blank_lines
   7994  40cd				   lastkernelline
   7995  40cd					      ifnconst	PFcolors
      0  40cd					      sleep	10
      1  40cd				   .CYCLES    SET	10
      2  40cd
      3  40cd				  -	      IF	.CYCLES < 2
      4  40cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40cd				  -	      ERR
      6  40cd					      ENDIF
      7  40cd
      8  40cd				  -	      IF	.CYCLES & 1
      9  40cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40cd				  -	      nop	0
     11  40cd				  -	      ELSE
     12  40cd				  -	      bit	VSYNC
     13  40cd				  -	      ENDIF
     14  40cd				  -.CYCLES    SET	.CYCLES - 3
     15  40cd					      ENDIF
     16  40cd
     17  40cd					      REPEAT	.CYCLES / 2
     18  40cd		       ea		      nop
     17  40cd					      REPEND
     18  40ce		       ea		      nop
     17  40ce					      REPEND
     18  40cf		       ea		      nop
     17  40cf					      REPEND
     18  40d0		       ea		      nop
     17  40d0					      REPEND
     18  40d1		       ea		      nop
     19  40d2					      REPEND
   7997  40d2				  -	      else
   7998  40d2				  -	      ldy	#124
   7999  40d2				  -	      lda	(pfcolortable),y
   8000  40d2				  -	      sta	COLUPF
   8001  40d2					      endif
   8002  40d2
   8003  40d2				  -	      ifconst	PFheights
   8004  40d2				  -	      ldx	#1
   8005  40d2				  -			;sleep 4
   8006  40d2				  -	      sleep	3	; this was over 1 cycle
   8007  40d2					      else
   8008  40d2		       a6 ef		      ldx	playfieldpos
   8009  40d4							;sleep 3
      0  40d4					      sleep	2	; this was over 1 cycle
      1  40d4				   .CYCLES    SET	2
      2  40d4
      3  40d4				  -	      IF	.CYCLES < 2
      4  40d4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d4				  -	      ERR
      6  40d4					      ENDIF
      7  40d4
      8  40d4				  -	      IF	.CYCLES & 1
      9  40d4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d4				  -	      nop	0
     11  40d4				  -	      ELSE
     12  40d4				  -	      bit	VSYNC
     13  40d4				  -	      ENDIF
     14  40d4				  -.CYCLES    SET	.CYCLES - 3
     15  40d4					      ENDIF
     16  40d4
     17  40d4					      REPEAT	.CYCLES / 2
     18  40d4		       ea		      nop
     19  40d5					      REPEND
   8011  40d5					      endif
   8012  40d5
   8013  40d5		       4c 1b f1 	      jmp	enterlastkernel
   8014  40d8
   8015  40d8				  -	      else
   8016  40d8				  -lastkernelline
   8017  40d8				  -
   8018  40d8				  -	      ifconst	PFheights
   8019  40d8				  -	      ldx	#1
   8020  40d8				  -			;sleep 5
   8021  40d8				  -	      sleep	4	; this was over 1 cycle
   8022  40d8				  -	      else
   8023  40d8				  -	      ldx	playfieldpos
   8024  40d8				  -			;sleep 4
   8025  40d8				  -	      sleep	3	; this was over 1 cycle
   8026  40d8				  -	      endif
   8027  40d8				  -
   8028  40d8				  -	      cpx	#0
   8029  40d8				  -	      bne	.enterfromNBL
   8030  40d8				  -	      jmp	no_blank_lines_bailout
   8031  40d8					      endif
   8032  40d8
   8033  40d8					      if	((<*)>$d5)
   8034  4100		       00 00 00 00*	      align	256
   8035  4100					      endif
   8036  4100							; this is a kludge to prevent page wrapping - fix!!!
   8037  4100
   8038  4100				   .skipDrawlastP1
   8039  4100		       a9 00		      lda	#0
   8040  4102		       a8		      tay		; added so we don't cross a page
   8041  4103		       4c 2d f1 	      jmp	.continuelastP1
   8042  4106
   8043  4106				   .endkerloop		; enter at cycle 59??
   8044  4106
   8045  4106		       ea		      nop
   8046  4107
   8047  4107				   .enterfromNBL
   8048  4107				  -	      ifconst	pfres
   8049  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
   8050  4107				  -	      sty	PF1L	;3
   8051  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   8052  4107				  -	      sty	PF2L	;3
   8053  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
   8054  4107				  -	      sty	PF1R	; possibly too early?
   8055  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   8056  4107				  -	      sty	PF2R	;3
   8057  4107					      else
   8058  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
   8059  410a		       84 0e		      sty	PF1L	;3
   8060  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   8061  410f		       84 0f		      sty	PF2L	;3
   8062  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
   8063  4114		       84 0e		      sty	PF1R	; possibly too early?
   8064  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   8065  4119		       84 0f		      sty	PF2R	;3
   8066  411b					      endif
   8067  411b
   8068  411b				   enterlastkernel
   8069  411b		       a5 92		      lda	ballheight
   8070  411d
   8071  411d							; tya
   8072  411d		       c7 89		      dcp	bally
   8073  411f							; sleep 4
   8074  411f
   8075  411f							; sbc stack3
   8076  411f		       2a		      rol
   8077  4120		       2a		      rol
   8078  4121		       85 1f		      sta	ENABL
   8079  4123
   8080  4123		       a5 8f		      lda	player1height	;3
   8081  4125		       c7 86		      dcp	player1y	;5
   8082  4127		       90 d7		      bcc	.skipDrawlastP1
   8083  4129		       a4 86		      ldy	player1y	;3
   8084  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   8085  412d							; so it doesn't cross a page boundary!
   8086  412d
   8087  412d				   .continuelastP1
   8088  412d		       85 1c		      sta	GRP1	;3
   8089  412f
   8090  412f				  -	      ifnconst	player1colors
   8091  412f				  -	      lda	missile1height	;3
   8092  412f				  -	      dcp	missile1y	;5
   8093  412f					      else
   8094  412f		       b1 87		      lda	(player1color),y
   8095  4131		       85 07		      sta	COLUP1
   8096  4133					      endif
   8097  4133
   8098  4133		       ca		      dex
   8099  4134							;dec temp4 ; might try putting this above PF writes
   8100  4134		       f0 36		      beq	endkernel
   8101  4136
   8102  4136
   8103  4136				  -	      ifconst	pfres
   8104  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
   8105  4136				  -	      sty	PF1L	;3
   8106  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   8107  4136				  -	      sty	PF2L	;3
   8108  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
   8109  4136				  -	      sty	PF1R	; possibly too early?
   8110  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   8111  4136				  -	      sty	PF2R	;3
   8112  4136					      else
   8113  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
   8114  4139		       84 0e		      sty	PF1L	;3
   8115  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   8116  413e		       84 0f		      sty	PF2L	;3
   8117  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
   8118  4143		       84 0e		      sty	PF1R	; possibly too early?
   8119  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   8120  4148		       84 0f		      sty	PF2R	;3
   8121  414a					      endif
   8122  414a
   8123  414a				  -	      ifnconst	player1colors
   8124  414a				  -	      rol		;2
   8125  414a				  -	      rol		;2
   8126  414a				  -	      sta	ENAM1	;3
   8127  414a					      else
   8128  414a					      ifnconst	playercolors
      0  414a					      sleep	7
      1  414a				   .CYCLES    SET	7
      2  414a
      3  414a				  -	      IF	.CYCLES < 2
      4  414a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  414a				  -	      ERR
      6  414a					      ENDIF
      7  414a
      8  414a					      IF	.CYCLES & 1
      9  414a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  414a		       04 00		      nop	0
     11  414c				  -	      ELSE
     12  414c				  -	      bit	VSYNC
     13  414c					      ENDIF
     14  414c				   .CYCLES    SET	.CYCLES - 3
     15  414c					      ENDIF
     16  414c
     17  414c					      REPEAT	.CYCLES / 2
     18  414c		       ea		      nop
     17  414c					      REPEND
     18  414d		       ea		      nop
     19  414e					      REPEND
   8130  414e				  -	      else
   8131  414e				  -	      lda.w	player0colorstore
   8132  414e				  -	      sta	COLUP0
   8133  414e					      endif
   8134  414e					      endif
   8135  414e
   8136  414e		       ad 8e 00 	      lda.w	player0height
   8137  4151		       c7 85		      dcp	player0y
   8138  4153		       90 11		      bcc	.skipDrawlastP0
   8139  4155		       a4 85		      ldy	player0y
   8140  4157		       b1 8a		      lda	(player0pointer),y
   8141  4159				   .continuelastP0
   8142  4159		       85 1b		      sta	GRP0
   8143  415b
   8144  415b
   8145  415b
   8146  415b					      ifnconst	no_blank_lines
   8147  415b		       a5 90		      lda	missile0height	;3
   8148  415d		       c7 91		      dcp	missile0y	;5
   8149  415f		       e5 f6		      sbc	stack1
   8150  4161		       85 1d		      sta	ENAM0	;3
   8151  4163		       4c 06 f1 	      jmp	.endkerloop
   8152  4166				  -	      else
   8153  4166				  -	      ifconst	readpaddle
   8154  4166				  -	      ldy	currentpaddle
   8155  4166				  -	      lda	INPT0,y
   8156  4166				  -	      bpl	noreadpaddle2
   8157  4166				  -	      inc	paddle
   8158  4166				  -	      jmp	.endkerloop
   8159  4166				  -noreadpaddle2
   8160  4166				  -	      sleep	4
   8161  4166				  -	      jmp	.endkerloop
   8162  4166				  -	      else		; no_blank_lines and no paddle reading
   8163  4166				  -	      pla
   8164  4166				  -	      pha		; 14 cycles in 4 bytes
   8165  4166				  -	      pla
   8166  4166				  -	      pha
   8167  4166				  -			; sleep 14
   8168  4166				  -	      jmp	.endkerloop
   8169  4166				  -	      endif
   8170  4166					      endif
   8171  4166
   8172  4166
   8173  4166							; ifconst donepaddleskip
   8174  4166							;paddleskipread
   8175  4166							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   8176  4166							; plus we get a lo-res paddle read
   8177  4166							; bmi donepaddleskip
   8178  4166							; endif
   8179  4166
   8180  4166				   .skipDrawlastP0
   8181  4166		       a9 00		      lda	#0
   8182  4168		       a8		      tay
   8183  4169		       4c 59 f1 	      jmp	.continuelastP0
   8184  416c
   8185  416c				  -	      ifconst	no_blank_lines
   8186  416c				  -no_blank_lines_bailout
   8187  416c				  -	      ldx	#0
   8188  416c					      endif
   8189  416c
   8190  416c				   endkernel
   8191  416c							; 6 digit score routine
   8192  416c		       86 0e		      stx	PF1
   8193  416e		       86 0f		      stx	PF2
   8194  4170		       86 0d		      stx	PF0
   8195  4172		       18		      clc
   8196  4173
   8197  4173				  -	      ifconst	pfrowheight
   8198  4173				  -	      lda	#pfrowheight+2
   8199  4173					      else
   8200  4173					      ifnconst	pfres
   8201  4173		       a9 0a		      lda	#10
   8202  4175				  -	      else
   8203  4175				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   8204  4175					      endif
   8205  4175					      endif
   8206  4175
   8207  4175		       e5 ef		      sbc	playfieldpos
   8208  4177		       85 ef		      sta	playfieldpos
   8209  4179		       8a		      txa
   8210  417a
   8211  417a				  -	      ifconst	shakescreen
   8212  417a				  -	      bit	shakescreen
   8213  417a				  -	      bmi	noshakescreen2
   8214  417a				  -	      ldx	#$3D
   8215  417a				  -noshakescreen2
   8216  417a					      endif
   8217  417a
   8218  417a		       95 02		      sta	WSYNC,x
   8219  417c
   8220  417c							; STA WSYNC ;first one, need one more
   8221  417c		       85 0b		      sta	REFP0
   8222  417e		       85 0c		      sta	REFP1
   8223  4180		       85 1b		      STA	GRP0
   8224  4182		       85 1c		      STA	GRP1
   8225  4184							; STA PF1
   8226  4184							; STA PF2
   8227  4184		       85 2b		      sta	HMCLR
   8228  4186		       85 1d		      sta	ENAM0
   8229  4188		       85 1e		      sta	ENAM1
   8230  418a		       85 1f		      sta	ENABL
   8231  418c
   8232  418c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   8233  418e		       85 85		      sta	player0y
   8234  4190		       a5 9e		      lda	temp3
   8235  4192		       85 86		      sta	player1y
   8236  4194				  -	      ifnconst	player1colors
   8237  4194				  -	      lda	temp6
   8238  4194				  -	      sta	missile1y
   8239  4194					      endif
   8240  4194					      ifnconst	playercolors
   8241  4194					      ifnconst	readpaddle
   8242  4194		       a5 a0		      lda	temp5
   8243  4196		       85 91		      sta	missile0y
   8244  4198					      endif
   8245  4198					      endif
   8246  4198		       a5 f7		      lda	stack2
   8247  419a		       85 89		      sta	bally
   8248  419c
   8249  419c							; strangely, this isn't required any more. might have
   8250  419c							; resulted from the no_blank_lines score bounce fix
   8251  419c							;ifconst no_blank_lines
   8252  419c							;sta WSYNC
   8253  419c							;endif
   8254  419c
   8255  419c		       ad 84 02 	      lda	INTIM
   8256  419f		       18		      clc
   8257  41a0					      ifnconst	vblank_time
   8258  41a0		       69 8e		      adc	#43+12+87
   8259  41a2				  -	      else
   8260  41a2				  -	      adc	#vblank_time+12+87
   8261  41a2				  -
   8262  41a2					      endif
   8263  41a2							; sta WSYNC
   8264  41a2		       8d 96 02 	      sta	TIM64T
   8265  41a5
   8266  41a5					      ifconst	minikernel
   8267  41a5		       20 da f4 	      jsr	minikernel
   8268  41a8					      endif
   8269  41a8
   8270  41a8							; now reassign temp vars for score pointers
   8271  41a8
   8272  41a8							; score pointers contain:
   8273  41a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   8274  41a8							; swap lo2->temp1
   8275  41a8							; swap lo4->temp3
   8276  41a8							; swap lo6->temp5
   8277  41a8					      ifnconst	noscore
   8278  41a8		       a5 97		      lda	scorepointers+1
   8279  41aa							; ldy temp1
   8280  41aa		       85 9c		      sta	temp1
   8281  41ac							; sty scorepointers+1
   8282  41ac
   8283  41ac		       a5 99		      lda	scorepointers+3
   8284  41ae							; ldy temp3
   8285  41ae		       85 9e		      sta	temp3
   8286  41b0							; sty scorepointers+3
   8287  41b0
   8288  41b0
   8289  41b0		       85 2b		      sta	HMCLR
   8290  41b2		       ba		      tsx
   8291  41b3		       86 f6		      stx	stack1
   8292  41b5		       a2 e0		      ldx	#$E0
   8293  41b7		       86 20		      stx	HMP0
   8294  41b9
   8295  41b9		       a5 a3		      LDA	scorecolor
   8296  41bb		       85 06		      STA	COLUP0
   8297  41bd		       85 07		      STA	COLUP1
   8298  41bf				  -	      ifconst	scorefade
   8299  41bf				  -	      STA	stack2
   8300  41bf					      endif
   8301  41bf				  -	      ifconst	pfscore
   8302  41bf				  -	      lda	pfscorecolor
   8303  41bf				  -	      sta	COLUPF
   8304  41bf					      endif
   8305  41bf		       85 02		      sta	WSYNC
   8306  41c1		       a2 00		      ldx	#0
   8307  41c3		       86 1b		      STx	GRP0
   8308  41c5		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   8309  41c7
   8310  41c7		       a5 9b		      lda	scorepointers+5
   8311  41c9							; ldy temp5
   8312  41c9		       95 a0		      sta	temp5,x
   8313  41cb							; sty scorepointers+5
   8314  41cb		       a9 ff		      lda	#>scoretable
   8315  41cd		       85 97		      sta	scorepointers+1
   8316  41cf		       85 99		      sta	scorepointers+3
   8317  41d1		       85 9b		      sta	scorepointers+5
   8318  41d3		       85 9d		      sta	temp2
   8319  41d5		       85 9f		      sta	temp4
   8320  41d7		       85 a1		      sta	temp6
   8321  41d9		       a0 07		      LDY	#7
   8322  41db		       84 25		      STY	VDELP0
   8323  41dd		       85 10		      STA	RESP0
   8324  41df		       85 11		      STA	RESP1
   8325  41e1
   8326  41e1
   8327  41e1		       a9 03		      LDA	#$03
   8328  41e3		       85 04		      STA	NUSIZ0
   8329  41e5		       85 05		      STA	NUSIZ1
   8330  41e7		       85 26		      STA	VDELP1
   8331  41e9		       a9 f0		      LDA	#$F0
   8332  41eb		       85 21		      STA	HMP1
   8333  41ed		       b1 96		      lda	(scorepointers),y
   8334  41ef		       85 1b		      sta	GRP0
   8335  41f1		       85 2a		      STA	HMOVE	; cycle 73 ?
   8336  41f3		       4c 08 f2 	      jmp	beginscore
   8337  41f6
   8338  41f6
   8339  41f6					      if	((<*)>$d4)
   8340  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   8341  4200					      endif
   8342  4200
   8343  4200				   loop2
   8344  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   8345  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   8346  4204				  -	      ifconst	pfscore
   8347  4204				  -	      lda.w	pfscore1
   8348  4204				  -	      sta	PF1
   8349  4204					      else
   8350  4204				  -	      ifconst	scorefade
   8351  4204				  -	      sleep	2
   8352  4204				  -	      dec	stack2	; decrement the temporary scorecolor
   8353  4204					      else
      0  4204					      sleep	7
      1  4204				   .CYCLES    SET	7
      2  4204
      3  4204				  -	      IF	.CYCLES < 2
      4  4204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4204				  -	      ERR
      6  4204					      ENDIF
      7  4204
      8  4204					      IF	.CYCLES & 1
      9  4204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4204		       04 00		      nop	0
     11  4206				  -	      ELSE
     12  4206				  -	      bit	VSYNC
     13  4206					      ENDIF
     14  4206				   .CYCLES    SET	.CYCLES - 3
     15  4206					      ENDIF
     16  4206
     17  4206					      REPEAT	.CYCLES / 2
     18  4206		       ea		      nop
     17  4206					      REPEND
     18  4207		       ea		      nop
     19  4208					      REPEND
   8355  4208					      endif
   8356  4208					      endif
   8357  4208							; cycle 0
   8358  4208				   beginscore
   8359  4208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   8360  420a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   8361  420c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   8362  420e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   8363  4210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   8364  4212		       9a		      txs
   8365  4213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   8366  4215				  -	      ifconst	scorefade
   8367  4215				  -	      lda	stack2
   8368  4215					      else
      0  4215					      sleep	3
      1  4215				   .CYCLES    SET	3
      2  4215
      3  4215				  -	      IF	.CYCLES < 2
      4  4215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4215				  -	      ERR
      6  4215					      ENDIF
      7  4215
      8  4215					      IF	.CYCLES & 1
      9  4215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4215		       04 00		      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217					      ENDIF
     14  4217				   .CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217				  -	      REPEAT	.CYCLES / 2
     18  4217				  -	      nop
     19  4217					      REPEND
   8370  4217					      endif
   8371  4217
   8372  4217				  -	      ifconst	pfscore
   8373  4217				  -	      lda	pfscore2
   8374  4217				  -	      sta	PF1
   8375  4217					      else
   8376  4217				  -	      ifconst	scorefade
   8377  4217				  -	      sta	COLUP0
   8378  4217				  -	      sta	COLUP1
   8379  4217					      else
      0  4217					      sleep	6
      1  4217				   .CYCLES    SET	6
      2  4217
      3  4217				  -	      IF	.CYCLES < 2
      4  4217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4217				  -	      ERR
      6  4217					      ENDIF
      7  4217
      8  4217				  -	      IF	.CYCLES & 1
      9  4217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4217				  -	      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217				  -	      ENDIF
     14  4217				  -.CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217					      REPEAT	.CYCLES / 2
     18  4217		       ea		      nop
     17  4217					      REPEND
     18  4218		       ea		      nop
     17  4218					      REPEND
     18  4219		       ea		      nop
     19  421a					      REPEND
   8381  421a					      endif
   8382  421a					      endif
   8383  421a
   8384  421a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   8385  421c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   8386  421e		       ba		      tsx
   8387  421f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   8388  4221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   8389  4223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   8390  4225		       88		      dey
   8391  4226		       10 d8		      bpl	loop2	;+2 60 180
   8392  4228
   8393  4228		       a6 f6		      ldx	stack1
   8394  422a		       9a		      txs
   8395  422b							; lda scorepointers+1
   8396  422b		       a4 9c		      ldy	temp1
   8397  422d							; sta temp1
   8398  422d		       84 97		      sty	scorepointers+1
   8399  422f
   8400  422f		       a9 00		      LDA	#0
   8401  4231		       85 0e		      sta	PF1
   8402  4233		       85 1b		      STA	GRP0
   8403  4235		       85 1c		      STA	GRP1
   8404  4237		       85 25		      STA	VDELP0
   8405  4239		       85 26		      STA	VDELP1	;do we need these
   8406  423b		       85 04		      STA	NUSIZ0
   8407  423d		       85 05		      STA	NUSIZ1
   8408  423f
   8409  423f							; lda scorepointers+3
   8410  423f		       a4 9e		      ldy	temp3
   8411  4241							; sta temp3
   8412  4241		       84 99		      sty	scorepointers+3
   8413  4243
   8414  4243							; lda scorepointers+5
   8415  4243		       a4 a0		      ldy	temp5
   8416  4245							; sta temp5
   8417  4245		       84 9b		      sty	scorepointers+5
   8418  4247					      endif		;noscore
   8419  4247				  -	      ifconst	readpaddle
   8420  4247				  -	      lda	#%11000010
   8421  4247					      else
   8422  4247				  -	      ifconst	qtcontroller
   8423  4247				  -	      lda	qtcontroller
   8424  4247				  -	      lsr		; bit 0 in carry
   8425  4247				  -	      lda	#4
   8426  4247				  -	      ror		; carry into top of A
   8427  4247					      else
   8428  4247		       a9 02		      lda	#2
   8429  4249					      endif		; qtcontroller
   8430  4249					      endif		; readpaddle
   8431  4249		       85 02		      sta	WSYNC
   8432  424b		       85 01		      sta	VBLANK
      0  424d					      RETURN
      1  424d				  -	      ifnconst	bankswitch
      2  424d				  -	      rts
      3  424d					      else
      4  424d		       4c dd ff 	      jmp	BS_return
      5  4250					      endif
   8434  4250				  -	      ifconst	shakescreen
   8435  4250				  -doshakescreen
   8436  4250				  -	      bit	shakescreen
   8437  4250				  -	      bmi	noshakescreen
   8438  4250				  -	      sta	WSYNC
   8439  4250				  -noshakescreen
   8440  4250				  -	      ldx	missile0height
   8441  4250				  -	      inx
   8442  4250				  -	      rts
   8443  4250					      endif
   8444  4250
   8445  4250							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8446  4250
   8447  4250				   start
   8448  4250		       78		      sei
   8449  4251		       d8		      cld
   8450  4252		       a0 00		      ldy	#0
   8451  4254		       a5 d0		      lda	$D0
   8452  4256		       c9 2c		      cmp	#$2C	;check RAM location #1
   8453  4258		       d0 07		      bne	MachineIs2600
   8454  425a		       a5 d1		      lda	$D1
   8455  425c		       c9 a9		      cmp	#$A9	;check RAM location #2
   8456  425e		       d0 01		      bne	MachineIs2600
   8457  4260		       88		      dey
   8458  4261				   MachineIs2600
   8459  4261		       a2 00		      ldx	#0
   8460  4263		       8a		      txa
   8461  4264				   clearmem
   8462  4264		       e8		      inx
   8463  4265		       9a		      txs
   8464  4266		       48		      pha
   8465  4267		       d0 fb		      bne	clearmem
   8466  4269		       84 9c		      sty	temp1
   8467  426b					      ifnconst	multisprite
   8468  426b				  -	      ifconst	pfrowheight
   8469  426b				  -	      lda	#pfrowheight
   8470  426b					      else
   8471  426b				  -	      ifconst	pfres
   8472  426b				  -	      lda	#(96/pfres)
   8473  426b					      else
   8474  426b		       a9 08		      lda	#8
   8475  426d					      endif
   8476  426d					      endif
   8477  426d		       85 ef		      sta	playfieldpos
   8478  426f					      endif
   8479  426f		       a2 05		      ldx	#5
   8480  4271				   initscore
   8481  4271		       a9 74		      lda	#<scoretable
   8482  4273		       95 96		      sta	scorepointers,x
   8483  4275		       ca		      dex
   8484  4276		       10 f9		      bpl	initscore
   8485  4278		       a9 01		      lda	#1
   8486  427a		       85 0a		      sta	CTRLPF
   8487  427c		       0d 84 02 	      ora	INTIM
   8488  427f		       85 a2		      sta	rand
   8489  4281
   8490  4281				  -	      ifconst	multisprite
   8491  4281				  -	      jsr	multisprite_setup
   8492  4281					      endif
   8493  4281
   8494  4281				  -	      ifnconst	bankswitch
   8495  4281				  -	      jmp	game
   8496  4281					      else
   8497  4281		       a9 8f		      lda	#>(game-1)
   8498  4283		       48		      pha
   8499  4284		       a9 ff		      lda	#<(game-1)
   8500  4286		       48		      pha
   8501  4287		       48		      pha
   8502  4288		       48		      pha
   8503  4289		       a2 01		      ldx	#1
   8504  428b		       4c eb ff 	      jmp	BS_jsr
   8505  428e					      endif
   8506  428e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8507  428e
   8508  428e							; playfield drawing routines
   8509  428e							; you get a 32x12 bitmapped display in a single color :)
   8510  428e							; 0-31 and 0-11
   8511  428e
   8512  428e				   pfclear		; clears playfield - or fill with pattern
   8513  428e				  -	      ifconst	pfres
   8514  428e				  -	      ldx	#pfres*pfwidth-1
   8515  428e					      else
   8516  428e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   8517  4290					      endif
   8518  4290				   pfclear_loop
   8519  4290					      ifnconst	superchip
   8520  4290		       95 a4		      sta	playfield,x
   8521  4292				  -	      else
   8522  4292				  -	      sta	playfield-128,x
   8523  4292					      endif
   8524  4292		       ca		      dex
   8525  4293		       10 fb		      bpl	pfclear_loop
      0  4295					      RETURN
      1  4295				  -	      ifnconst	bankswitch
      2  4295				  -	      rts
      3  4295					      else
      4  4295		       4c dd ff 	      jmp	BS_return
      5  4298					      endif
   8527  4298
   8528  4298				   setuppointers
   8529  4298		       86 9d		      stx	temp2	; store on.off.flip value
   8530  429a		       aa		      tax		; put x-value in x 
   8531  429b		       4a		      lsr
   8532  429c		       4a		      lsr
   8533  429d		       4a		      lsr		; divide x pos by 8 
   8534  429e		       85 9c		      sta	temp1
   8535  42a0		       98		      tya
   8536  42a1		       0a		      asl
   8537  42a2					      if	pfwidth=4
   8538  42a2		       0a		      asl		; multiply y pos by 4
   8539  42a3					      endif		; else multiply by 2
   8540  42a3		       18		      clc
   8541  42a4		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   8542  42a6		       a8		      tay		; put the value in y
   8543  42a7		       a5 9d		      lda	temp2	; restore on.off.flip value
   8544  42a9		       60		      rts
   8545  42aa
   8546  42aa				   pfread
   8547  42aa							;x=xvalue, y=yvalue
   8548  42aa		       20 98 f2 	      jsr	setuppointers
   8549  42ad		       bd 42 f3 	      lda	setbyte,x
   8550  42b0		       39 a4 00 	      and	playfield,y
   8551  42b3		       5d 42 f3 	      eor	setbyte,x
   8552  42b6							; beq readzero
   8553  42b6							; lda #1
   8554  42b6							; readzero
      0  42b6					      RETURN
      1  42b6				  -	      ifnconst	bankswitch
      2  42b6				  -	      rts
      3  42b6					      else
      4  42b6		       4c dd ff 	      jmp	BS_return
      5  42b9					      endif
   8556  42b9
   8557  42b9				   pfpixel
   8558  42b9							;x=xvalue, y=yvalue, a=0,1,2
   8559  42b9		       20 98 f2 	      jsr	setuppointers
   8560  42bc
   8561  42bc					      ifconst	bankswitch
   8562  42bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   8563  42be		       f0 0f		      beq	pixelon_r	; if "on" go to on
   8564  42c0		       4a		      lsr
   8565  42c1		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   8566  42c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   8567  42c6		       5d 42 f3 	      eor	setbyte,x
   8568  42c9				  -	      ifconst	superchip
   8569  42c9				  -	      sta	playfield-128,y
   8570  42c9					      else
   8571  42c9		       99 a4 00 	      sta	playfield,y
   8572  42cc					      endif
      0  42cc					      RETURN
      1  42cc				  -	      ifnconst	bankswitch
      2  42cc				  -	      rts
      3  42cc					      else
      4  42cc		       4c dd ff 	      jmp	BS_return
      5  42cf					      endif
   8574  42cf				   pixelon_r
   8575  42cf		       b9 a4 00 	      lda	playfield,y
   8576  42d2		       1d 42 f3 	      ora	setbyte,x
   8577  42d5				  -	      ifconst	superchip
   8578  42d5				  -	      sta	playfield-128,y
   8579  42d5					      else
   8580  42d5		       99 a4 00 	      sta	playfield,y
   8581  42d8					      endif
      0  42d8					      RETURN
      1  42d8				  -	      ifnconst	bankswitch
      2  42d8				  -	      rts
      3  42d8					      else
      4  42d8		       4c dd ff 	      jmp	BS_return
      5  42db					      endif
   8583  42db				   pixeloff_r
   8584  42db		       bd 42 f3 	      lda	setbyte,x
   8585  42de		       49 ff		      eor	#$ff
   8586  42e0		       39 a4 00 	      and	playfield,y
   8587  42e3				  -	      ifconst	superchip
   8588  42e3				  -	      sta	playfield-128,y
   8589  42e3					      else
   8590  42e3		       99 a4 00 	      sta	playfield,y
   8591  42e6					      endif
      0  42e6					      RETURN
      1  42e6				  -	      ifnconst	bankswitch
      2  42e6				  -	      rts
      3  42e6					      else
      4  42e6		       4c dd ff 	      jmp	BS_return
      5  42e9					      endif
   8593  42e9
   8594  42e9				  -	      else
   8595  42e9				  -	      jmp	plotpoint
   8596  42e9					      endif
   8597  42e9
   8598  42e9				   pfhline
   8599  42e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   8600  42e9		       20 98 f2 	      jsr	setuppointers
   8601  42ec		       4c f6 f2 	      jmp	noinc
   8602  42ef				   keepgoing
   8603  42ef		       e8		      inx
   8604  42f0		       8a		      txa
   8605  42f1		       29 07		      and	#7
   8606  42f3		       d0 01		      bne	noinc
   8607  42f5		       c8		      iny
   8608  42f6				   noinc
   8609  42f6		       20 1b f3 	      jsr	plotpoint
   8610  42f9		       e4 9e		      cpx	temp3
   8611  42fb		       30 f2		      bmi	keepgoing
      0  42fd					      RETURN
      1  42fd				  -	      ifnconst	bankswitch
      2  42fd				  -	      rts
      3  42fd					      else
      4  42fd		       4c dd ff 	      jmp	BS_return
      5  4300					      endif
   8613  4300
   8614  4300				   pfvline
   8615  4300							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   8616  4300		       20 98 f2 	      jsr	setuppointers
   8617  4303		       84 9c		      sty	temp1	; store memory location offset
   8618  4305		       e6 9e		      inc	temp3	; increase final x by 1 
   8619  4307		       a5 9e		      lda	temp3
   8620  4309		       0a		      asl
   8621  430a					      if	pfwidth=4
   8622  430a		       0a		      asl		; multiply by 4
   8623  430b					      endif		; else multiply by 2
   8624  430b		       85 9e		      sta	temp3	; store it
   8625  430d							; Thanks to Michael Rideout for fixing a bug in this code
   8626  430d							; right now, temp1=y=starting memory location, temp3=final
   8627  430d							; x should equal original x value
   8628  430d				   keepgoingy
   8629  430d		       20 1b f3 	      jsr	plotpoint
   8630  4310		       c8		      iny
   8631  4311		       c8		      iny
   8632  4312					      if	pfwidth=4
   8633  4312		       c8		      iny
   8634  4313		       c8		      iny
   8635  4314					      endif
   8636  4314		       c4 9e		      cpy	temp3
   8637  4316		       30 f5		      bmi	keepgoingy
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c dd ff 	      jmp	BS_return
      5  431b					      endif
   8639  431b
   8640  431b				   plotpoint
   8641  431b		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   8642  431d		       f0 0d		      beq	pixelon	; if "on" go to on
   8643  431f		       4a		      lsr
   8644  4320		       b0 14		      bcs	pixeloff	; value is 1 if true
   8645  4322		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   8646  4325		       5d 42 f3 	      eor	setbyte,x
   8647  4328				  -	      ifconst	superchip
   8648  4328				  -	      sta	playfield-128,y
   8649  4328					      else
   8650  4328		       99 a4 00 	      sta	playfield,y
   8651  432b					      endif
   8652  432b		       60		      rts
   8653  432c				   pixelon
   8654  432c		       b9 a4 00 	      lda	playfield,y
   8655  432f		       1d 42 f3 	      ora	setbyte,x
   8656  4332				  -	      ifconst	superchip
   8657  4332				  -	      sta	playfield-128,y
   8658  4332					      else
   8659  4332		       99 a4 00 	      sta	playfield,y
   8660  4335					      endif
   8661  4335		       60		      rts
   8662  4336				   pixeloff
   8663  4336		       bd 42 f3 	      lda	setbyte,x
   8664  4339		       49 ff		      eor	#$ff
   8665  433b		       39 a4 00 	      and	playfield,y
   8666  433e				  -	      ifconst	superchip
   8667  433e				  -	      sta	playfield-128,y
   8668  433e					      else
   8669  433e		       99 a4 00 	      sta	playfield,y
   8670  4341					      endif
   8671  4341		       60		      rts
   8672  4342
   8673  4342				   setbyte
   8674  4342					      ifnconst	pfcenter
   8675  4342		       80		      .byte.b	$80
   8676  4343		       40		      .byte.b	$40
   8677  4344		       20		      .byte.b	$20
   8678  4345		       10		      .byte.b	$10
   8679  4346		       08		      .byte.b	$08
   8680  4347		       04		      .byte.b	$04
   8681  4348		       02		      .byte.b	$02
   8682  4349		       01		      .byte.b	$01
   8683  434a					      endif
   8684  434a		       01		      .byte.b	$01
   8685  434b		       02		      .byte.b	$02
   8686  434c		       04		      .byte.b	$04
   8687  434d		       08		      .byte.b	$08
   8688  434e		       10		      .byte.b	$10
   8689  434f		       20		      .byte.b	$20
   8690  4350		       40		      .byte.b	$40
   8691  4351		       80		      .byte.b	$80
   8692  4352		       80		      .byte.b	$80
   8693  4353		       40		      .byte.b	$40
   8694  4354		       20		      .byte.b	$20
   8695  4355		       10		      .byte.b	$10
   8696  4356		       08		      .byte.b	$08
   8697  4357		       04		      .byte.b	$04
   8698  4358		       02		      .byte.b	$02
   8699  4359		       01		      .byte.b	$01
   8700  435a		       01		      .byte.b	$01
   8701  435b		       02		      .byte.b	$02
   8702  435c		       04		      .byte.b	$04
   8703  435d		       08		      .byte.b	$08
   8704  435e		       10		      .byte.b	$10
   8705  435f		       20		      .byte.b	$20
   8706  4360		       40		      .byte.b	$40
   8707  4361		       80		      .byte.b	$80
   8708  4362							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8709  4362
   8710  4362				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   8711  4362		       d0 15		      bne	notleft
   8712  4364							;left
   8713  4364				  -	      ifconst	pfres
   8714  4364				  -	      ldx	#pfres*4
   8715  4364					      else
   8716  4364		       a2 30		      ldx	#48
   8717  4366					      endif
   8718  4366				   leftloop
   8719  4366		       b5 a3		      lda	playfield-1,x
   8720  4368		       4a		      lsr
   8721  4369
   8722  4369				  -	      ifconst	superchip
   8723  4369				  -	      lda	playfield-2,x
   8724  4369				  -	      rol
   8725  4369				  -	      sta	playfield-130,x
   8726  4369				  -	      lda	playfield-3,x
   8727  4369				  -	      ror
   8728  4369				  -	      sta	playfield-131,x
   8729  4369				  -	      lda	playfield-4,x
   8730  4369				  -	      rol
   8731  4369				  -	      sta	playfield-132,x
   8732  4369				  -	      lda	playfield-1,x
   8733  4369				  -	      ror
   8734  4369				  -	      sta	playfield-129,x
   8735  4369					      else
   8736  4369		       36 a2		      rol	playfield-2,x
   8737  436b		       76 a1		      ror	playfield-3,x
   8738  436d		       36 a0		      rol	playfield-4,x
   8739  436f		       76 a3		      ror	playfield-1,x
   8740  4371					      endif
   8741  4371
   8742  4371		       8a		      txa
   8743  4372		       cb 04		      sbx	#4
   8744  4374		       d0 f0		      bne	leftloop
      0  4376					      RETURN
      1  4376				  -	      ifnconst	bankswitch
      2  4376				  -	      rts
      3  4376					      else
      4  4376		       4c dd ff 	      jmp	BS_return
      5  4379					      endif
   8746  4379
   8747  4379				   notleft
   8748  4379		       4a		      lsr
   8749  437a		       90 15		      bcc	notright
   8750  437c							;right
   8751  437c
   8752  437c				  -	      ifconst	pfres
   8753  437c				  -	      ldx	#pfres*4
   8754  437c					      else
   8755  437c		       a2 30		      ldx	#48
   8756  437e					      endif
   8757  437e				   rightloop
   8758  437e		       b5 a0		      lda	playfield-4,x
   8759  4380		       4a		      lsr
   8760  4381				  -	      ifconst	superchip
   8761  4381				  -	      lda	playfield-3,x
   8762  4381				  -	      rol
   8763  4381				  -	      sta	playfield-131,x
   8764  4381				  -	      lda	playfield-2,x
   8765  4381				  -	      ror
   8766  4381				  -	      sta	playfield-130,x
   8767  4381				  -	      lda	playfield-1,x
   8768  4381				  -	      rol
   8769  4381				  -	      sta	playfield-129,x
   8770  4381				  -	      lda	playfield-4,x
   8771  4381				  -	      ror
   8772  4381				  -	      sta	playfield-132,x
   8773  4381					      else
   8774  4381		       36 a1		      rol	playfield-3,x
   8775  4383		       76 a2		      ror	playfield-2,x
   8776  4385		       36 a3		      rol	playfield-1,x
   8777  4387		       76 a0		      ror	playfield-4,x
   8778  4389					      endif
   8779  4389		       8a		      txa
   8780  438a		       cb 04		      sbx	#4
   8781  438c		       d0 f0		      bne	rightloop
      0  438e					      RETURN
      1  438e				  -	      ifnconst	bankswitch
      2  438e				  -	      rts
      3  438e					      else
      4  438e		       4c dd ff 	      jmp	BS_return
      5  4391					      endif
   8783  4391
   8784  4391				   notright
   8785  4391		       4a		      lsr
   8786  4392		       90 4b		      bcc	notup
   8787  4394							;up
   8788  4394		       4a		      lsr
   8789  4395		       90 02		      bcc	onedecup
   8790  4397		       c6 ef		      dec	playfieldpos
   8791  4399				   onedecup
   8792  4399		       c6 ef		      dec	playfieldpos
   8793  439b		       f0 02		      beq	shiftdown
   8794  439d		       10 3d		      bpl	noshiftdown2
   8795  439f				   shiftdown
   8796  439f				  -	      ifconst	pfrowheight
   8797  439f				  -	      lda	#pfrowheight
   8798  439f					      else
   8799  439f					      ifnconst	pfres
   8800  439f		       a9 08		      lda	#8
   8801  43a1				  -	      else
   8802  43a1				  -	      lda	#(96/pfres)	; try to come close to the real size
   8803  43a1					      endif
   8804  43a1					      endif
   8805  43a1
   8806  43a1		       85 ef		      sta	playfieldpos
   8807  43a3		       a5 a7		      lda	playfield+3
   8808  43a5		       85 9f		      sta	temp4
   8809  43a7		       a5 a6		      lda	playfield+2
   8810  43a9		       85 9e		      sta	temp3
   8811  43ab		       a5 a5		      lda	playfield+1
   8812  43ad		       85 9d		      sta	temp2
   8813  43af		       a5 a4		      lda	playfield
   8814  43b1		       85 9c		      sta	temp1
   8815  43b3		       a2 00		      ldx	#0
   8816  43b5				   up2
   8817  43b5		       b5 a8		      lda	playfield+4,x
   8818  43b7				  -	      ifconst	superchip
   8819  43b7				  -	      sta	playfield-128,x
   8820  43b7				  -	      lda	playfield+5,x
   8821  43b7				  -	      sta	playfield-127,x
   8822  43b7				  -	      lda	playfield+6,x
   8823  43b7				  -	      sta	playfield-126,x
   8824  43b7				  -	      lda	playfield+7,x
   8825  43b7				  -	      sta	playfield-125,x
   8826  43b7					      else
   8827  43b7		       95 a4		      sta	playfield,x
   8828  43b9		       b5 a9		      lda	playfield+5,x
   8829  43bb		       95 a5		      sta	playfield+1,x
   8830  43bd		       b5 aa		      lda	playfield+6,x
   8831  43bf		       95 a6		      sta	playfield+2,x
   8832  43c1		       b5 ab		      lda	playfield+7,x
   8833  43c3		       95 a7		      sta	playfield+3,x
   8834  43c5					      endif
   8835  43c5		       8a		      txa
   8836  43c6		       cb fc		      sbx	#252
   8837  43c8				  -	      ifconst	pfres
   8838  43c8				  -	      cpx	#(pfres-1)*4
   8839  43c8					      else
   8840  43c8		       e0 2c		      cpx	#44
   8841  43ca					      endif
   8842  43ca		       d0 e9		      bne	up2
   8843  43cc
   8844  43cc		       a5 9f		      lda	temp4
   8845  43ce
   8846  43ce				  -	      ifconst	superchip
   8847  43ce				  -	      ifconst	pfres
   8848  43ce				  -	      sta	playfield+pfres*4-129
   8849  43ce				  -	      lda	temp3
   8850  43ce				  -	      sta	playfield+pfres*4-130
   8851  43ce				  -	      lda	temp2
   8852  43ce				  -	      sta	playfield+pfres*4-131
   8853  43ce				  -	      lda	temp1
   8854  43ce				  -	      sta	playfield+pfres*4-132
   8855  43ce				  -	      else
   8856  43ce				  -	      sta	playfield+47-128
   8857  43ce				  -	      lda	temp3
   8858  43ce				  -	      sta	playfield+46-128
   8859  43ce				  -	      lda	temp2
   8860  43ce				  -	      sta	playfield+45-128
   8861  43ce				  -	      lda	temp1
   8862  43ce				  -	      sta	playfield+44-128
   8863  43ce				  -	      endif
   8864  43ce					      else
   8865  43ce				  -	      ifconst	pfres
   8866  43ce				  -	      sta	playfield+pfres*4-1
   8867  43ce				  -	      lda	temp3
   8868  43ce				  -	      sta	playfield+pfres*4-2
   8869  43ce				  -	      lda	temp2
   8870  43ce				  -	      sta	playfield+pfres*4-3
   8871  43ce				  -	      lda	temp1
   8872  43ce				  -	      sta	playfield+pfres*4-4
   8873  43ce					      else
   8874  43ce		       85 d3		      sta	playfield+47
   8875  43d0		       a5 9e		      lda	temp3
   8876  43d2		       85 d2		      sta	playfield+46
   8877  43d4		       a5 9d		      lda	temp2
   8878  43d6		       85 d1		      sta	playfield+45
   8879  43d8		       a5 9c		      lda	temp1
   8880  43da		       85 d0		      sta	playfield+44
   8881  43dc					      endif
   8882  43dc					      endif
   8883  43dc				   noshiftdown2
      0  43dc					      RETURN
      1  43dc				  -	      ifnconst	bankswitch
      2  43dc				  -	      rts
      3  43dc					      else
      4  43dc		       4c dd ff 	      jmp	BS_return
      5  43df					      endif
   8885  43df
   8886  43df
   8887  43df				   notup
   8888  43df							;down
   8889  43df		       4a		      lsr
   8890  43e0		       b0 02		      bcs	oneincup
   8891  43e2		       e6 ef		      inc	playfieldpos
   8892  43e4				   oneincup
   8893  43e4		       e6 ef		      inc	playfieldpos
   8894  43e6		       a5 ef		      lda	playfieldpos
   8895  43e8
   8896  43e8				  -	      ifconst	pfrowheight
   8897  43e8				  -	      cmp	#pfrowheight+1
   8898  43e8					      else
   8899  43e8					      ifnconst	pfres
   8900  43e8		       c9 09		      cmp	#9
   8901  43ea				  -	      else
   8902  43ea				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   8903  43ea					      endif
   8904  43ea					      endif
   8905  43ea
   8906  43ea		       90 3b		      bcc	noshiftdown
   8907  43ec		       a9 01		      lda	#1
   8908  43ee		       85 ef		      sta	playfieldpos
   8909  43f0
   8910  43f0				  -	      ifconst	pfres
   8911  43f0				  -	      lda	playfield+pfres*4-1
   8912  43f0				  -	      sta	temp4
   8913  43f0				  -	      lda	playfield+pfres*4-2
   8914  43f0				  -	      sta	temp3
   8915  43f0				  -	      lda	playfield+pfres*4-3
   8916  43f0				  -	      sta	temp2
   8917  43f0				  -	      lda	playfield+pfres*4-4
   8918  43f0					      else
   8919  43f0		       a5 d3		      lda	playfield+47
   8920  43f2		       85 9f		      sta	temp4
   8921  43f4		       a5 d2		      lda	playfield+46
   8922  43f6		       85 9e		      sta	temp3
   8923  43f8		       a5 d1		      lda	playfield+45
   8924  43fa		       85 9d		      sta	temp2
   8925  43fc		       a5 d0		      lda	playfield+44
   8926  43fe					      endif
   8927  43fe
   8928  43fe		       85 9c		      sta	temp1
   8929  4400
   8930  4400				  -	      ifconst	pfres
   8931  4400				  -	      ldx	#(pfres-1)*4
   8932  4400					      else
   8933  4400		       a2 2c		      ldx	#44
   8934  4402					      endif
   8935  4402				   down2
   8936  4402		       b5 a3		      lda	playfield-1,x
   8937  4404				  -	      ifconst	superchip
   8938  4404				  -	      sta	playfield-125,x
   8939  4404				  -	      lda	playfield-2,x
   8940  4404				  -	      sta	playfield-126,x
   8941  4404				  -	      lda	playfield-3,x
   8942  4404				  -	      sta	playfield-127,x
   8943  4404				  -	      lda	playfield-4,x
   8944  4404				  -	      sta	playfield-128,x
   8945  4404					      else
   8946  4404		       95 a7		      sta	playfield+3,x
   8947  4406		       b5 a2		      lda	playfield-2,x
   8948  4408		       95 a6		      sta	playfield+2,x
   8949  440a		       b5 a1		      lda	playfield-3,x
   8950  440c		       95 a5		      sta	playfield+1,x
   8951  440e		       b5 a0		      lda	playfield-4,x
   8952  4410		       95 a4		      sta	playfield,x
   8953  4412					      endif
   8954  4412		       8a		      txa
   8955  4413		       cb 04		      sbx	#4
   8956  4415		       d0 eb		      bne	down2
   8957  4417
   8958  4417		       a5 9f		      lda	temp4
   8959  4419				  -	      ifconst	superchip
   8960  4419				  -	      sta	playfield-125
   8961  4419				  -	      lda	temp3
   8962  4419				  -	      sta	playfield-126
   8963  4419				  -	      lda	temp2
   8964  4419				  -	      sta	playfield-127
   8965  4419				  -	      lda	temp1
   8966  4419				  -	      sta	playfield-128
   8967  4419					      else
   8968  4419		       85 a7		      sta	playfield+3
   8969  441b		       a5 9e		      lda	temp3
   8970  441d		       85 a6		      sta	playfield+2
   8971  441f		       a5 9d		      lda	temp2
   8972  4421		       85 a5		      sta	playfield+1
   8973  4423		       a5 9c		      lda	temp1
   8974  4425		       85 a4		      sta	playfield
   8975  4427					      endif
   8976  4427				   noshiftdown
      0  4427					      RETURN
      1  4427				  -	      ifnconst	bankswitch
      2  4427				  -	      rts
      3  4427					      else
      4  4427		       4c dd ff 	      jmp	BS_return
      5  442a					      endif
   8978  442a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8979  442a
   8980  442a							;standard routines needed for pretty much all games
   8981  442a							; just the random number generator is left - maybe we should remove this asm file altogether?
   8982  442a							; repositioning code and score pointer setup moved to overscan
   8983  442a							; read switches, joysticks now compiler generated (more efficient)
   8984  442a
   8985  442a				   randomize
   8986  442a		       a5 a2		      lda	rand
   8987  442c		       4a		      lsr
   8988  442d					      ifconst	rand16
   8989  442d		       26 ed		      rol	rand16
   8990  442f					      endif
   8991  442f		       90 02		      bcc	noeor
   8992  4431		       49 b4		      eor	#$B4
   8993  4433				   noeor
   8994  4433		       85 a2		      sta	rand
   8995  4435					      ifconst	rand16
   8996  4435		       45 ed		      eor	rand16
   8997  4437					      endif
      0  4437					      RETURN
      1  4437				  -	      ifnconst	bankswitch
      2  4437				  -	      rts
      3  4437					      else
      4  4437		       4c dd ff 	      jmp	BS_return
      5  443a					      endif
   8999  443a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   9000  443a
   9001  443a				   drawscreen
   9002  443a				  -	      ifconst	debugscore
   9003  443a				  -	      ldx	#14
   9004  443a				  -	      lda	INTIM	; display # cycles left in the score
   9005  443a				  -
   9006  443a				  -	      ifconst	mincycles
   9007  443a				  -	      lda	mincycles
   9008  443a				  -	      cmp	INTIM
   9009  443a				  -	      lda	mincycles
   9010  443a				  -	      bcc	nochange
   9011  443a				  -	      lda	INTIM
   9012  443a				  -	      sta	mincycles
   9013  443a				  -nochange
   9014  443a				  -	      endif
   9015  443a				  -
   9016  443a				  -			; cmp #$2B
   9017  443a				  -			; bcs no_cycles_left
   9018  443a				  -	      bmi	cycles_left
   9019  443a				  -	      ldx	#64
   9020  443a				  -	      eor	#$ff	;make negative
   9021  443a				  -cycles_left
   9022  443a				  -	      stx	scorecolor
   9023  443a				  -	      and	#$7f	; clear sign bit
   9024  443a				  -	      tax
   9025  443a				  -	      lda	scorebcd,x
   9026  443a				  -	      sta	score+2
   9027  443a				  -	      lda	scorebcd1,x
   9028  443a				  -	      sta	score+1
   9029  443a				  -	      jmp	done_debugscore
   9030  443a				  -scorebcd
   9031  443a				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   9032  443a				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   9033  443a				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   9034  443a				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   9035  443a				  -scorebcd1
   9036  443a				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   9037  443a				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   9038  443a				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   9039  443a				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   9040  443a				  -done_debugscore
   9041  443a					      endif
   9042  443a
   9043  443a				  -	      ifconst	debugcycles
   9044  443a				  -	      lda	INTIM	; if we go over, it mucks up the background color
   9045  443a				  -			; cmp #$2B
   9046  443a				  -			; BCC overscan
   9047  443a				  -	      bmi	overscan
   9048  443a				  -	      sta	COLUBK
   9049  443a				  -	      bcs	doneoverscan
   9050  443a					      endif
   9051  443a
   9052  443a				   overscan
   9053  443a				  -	      ifconst	interlaced
   9054  443a				  -	      PHP
   9055  443a				  -	      PLA
   9056  443a				  -	      EOR	#4	; flip interrupt bit
   9057  443a				  -	      PHA
   9058  443a				  -	      PLP
   9059  443a				  -	      AND	#4	; isolate the interrupt bit
   9060  443a				  -	      TAX		; save it for later
   9061  443a					      endif
   9062  443a
   9063  443a				   overscanloop
   9064  443a		       ad 84 02 	      lda	INTIM	;wait for sync
   9065  443d		       30 fb		      bmi	overscanloop
   9066  443f				   doneoverscan
   9067  443f
   9068  443f							;do VSYNC
   9069  443f
   9070  443f				  -	      ifconst	interlaced
   9071  443f				  -	      CPX	#4
   9072  443f				  -	      BNE	oddframevsync
   9073  443f					      endif
   9074  443f
   9075  443f		       a9 02		      lda	#2
   9076  4441		       85 02		      sta	WSYNC
   9077  4443		       85 00		      sta	VSYNC
   9078  4445		       85 02		      STA	WSYNC
   9079  4447		       85 02		      STA	WSYNC
   9080  4449		       4a		      lsr
   9081  444a		       85 02		      STA	WSYNC
   9082  444c		       85 00		      STA	VSYNC
   9083  444e		       85 01		      sta	VBLANK
   9084  4450					      ifnconst	overscan_time
   9085  4450		       a9 a5		      lda	#37+128
   9086  4452				  -	      else
   9087  4452				  -	      lda	#overscan_time+128
   9088  4452					      endif
   9089  4452		       8d 96 02 	      sta	TIM64T
   9090  4455
   9091  4455				  -	      ifconst	interlaced
   9092  4455				  -	      jmp	postsync
   9093  4455				  -
   9094  4455				  -oddframevsync
   9095  4455				  -	      sta	WSYNC
   9096  4455				  -
   9097  4455				  -	      LDA	($80,X)	; 11 waste
   9098  4455				  -	      LDA	($80,X)	; 11 waste
   9099  4455				  -	      LDA	($80,X)	; 11 waste
   9100  4455				  -
   9101  4455				  -	      lda	#2
   9102  4455				  -	      sta	VSYNC
   9103  4455				  -	      sta	WSYNC
   9104  4455				  -	      sta	WSYNC
   9105  4455				  -	      sta	WSYNC
   9106  4455				  -
   9107  4455				  -	      LDA	($80,X)	; 11 waste
   9108  4455				  -	      LDA	($80,X)	; 11 waste
   9109  4455				  -	      LDA	($80,X)	; 11 waste
   9110  4455				  -
   9111  4455				  -	      lda	#0
   9112  4455				  -	      sta	VSYNC
   9113  4455				  -	      sta	VBLANK
   9114  4455				  -	      ifnconst	overscan_time
   9115  4455				  -	      lda	#37+128
   9116  4455				  -	      else
   9117  4455				  -	      lda	#overscan_time+128
   9118  4455				  -	      endif
   9119  4455				  -	      sta	TIM64T
   9120  4455				  -
   9121  4455				  -postsync
   9122  4455					      endif
   9123  4455
   9124  4455				  -	      ifconst	legacy
   9125  4455				  -	      if	legacy < 100
   9126  4455				  -	      ldx	#4
   9127  4455				  -adjustloop
   9128  4455				  -	      lda	player0x,x
   9129  4455				  -	      sec
   9130  4455				  -	      sbc	#14	;?
   9131  4455				  -	      sta	player0x,x
   9132  4455				  -	      dex
   9133  4455				  -	      bpl	adjustloop
   9134  4455				  -	      endif
   9135  4455					      endif
   9136  4455				  -	      if	((<*)>$e9)&&((<*)<$fa)
   9137  4455				  -	      repeat	($fa-(<*))
   9138  4455				  -	      nop
   9139  4455				  -	      repend
   9140  4455					      endif
   9141  4455		       85 02		      sta	WSYNC
   9142  4457		       a2 04		      ldx	#4
      0  4459					      SLEEP	3
      1  4459				   .CYCLES    SET	3
      2  4459
      3  4459				  -	      IF	.CYCLES < 2
      4  4459				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4459				  -	      ERR
      6  4459					      ENDIF
      7  4459
      8  4459					      IF	.CYCLES & 1
      9  4459					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4459		       04 00		      nop	0
     11  445b				  -	      ELSE
     12  445b				  -	      bit	VSYNC
     13  445b					      ENDIF
     14  445b				   .CYCLES    SET	.CYCLES - 3
     15  445b					      ENDIF
     16  445b
     17  445b				  -	      REPEAT	.CYCLES / 2
     18  445b				  -	      nop
     19  445b					      REPEND
   9144  445b				   HorPosLoop		; 5
   9145  445b		       b5 80		      lda	player0x,X	;+4 9
   9146  445d		       38		      sec		;+2 11
   9147  445e				   DivideLoop
   9148  445e		       e9 0f		      sbc	#15
   9149  4460		       b0 fc		      bcs	DivideLoop	;+4 15
   9150  4462		       95 9c		      sta	temp1,X	;+4 19
   9151  4464		       95 10		      sta	RESP0,X	;+4 23
   9152  4466		       85 02		      sta	WSYNC
   9153  4468		       ca		      dex
   9154  4469		       10 f0		      bpl	HorPosLoop	;+5 5
   9155  446b							; 4
   9156  446b
   9157  446b		       a2 04		      ldx	#4
   9158  446d		       b4 9c		      ldy	temp1,X
   9159  446f		       b9 cb f3 	      lda	repostable-256,Y
   9160  4472		       95 20		      sta	HMP0,X	;+14 18
   9161  4474
   9162  4474		       ca		      dex
   9163  4475		       b4 9c		      ldy	temp1,X
   9164  4477		       b9 cb f3 	      lda	repostable-256,Y
   9165  447a		       95 20		      sta	HMP0,X	;+14 32
   9166  447c
   9167  447c		       ca		      dex
   9168  447d		       b4 9c		      ldy	temp1,X
   9169  447f		       b9 cb f3 	      lda	repostable-256,Y
   9170  4482		       95 20		      sta	HMP0,X	;+14 46
   9171  4484
   9172  4484		       ca		      dex
   9173  4485		       b4 9c		      ldy	temp1,X
   9174  4487		       b9 cb f3 	      lda	repostable-256,Y
   9175  448a		       95 20		      sta	HMP0,X	;+14 60
   9176  448c
   9177  448c		       ca		      dex
   9178  448d		       b4 9c		      ldy	temp1,X
   9179  448f		       b9 cb f3 	      lda	repostable-256,Y
   9180  4492		       95 20		      sta	HMP0,X	;+14 74
   9181  4494
   9182  4494		       85 02		      sta	WSYNC
   9183  4496
   9184  4496		       85 2a		      sta	HMOVE	;+3 3
   9185  4498
   9186  4498
   9187  4498				  -	      ifconst	legacy
   9188  4498				  -	      if	legacy < 100
   9189  4498				  -	      ldx	#4
   9190  4498				  -adjustloop2
   9191  4498				  -	      lda	player0x,x
   9192  4498				  -	      clc
   9193  4498				  -	      adc	#14	;?
   9194  4498				  -	      sta	player0x,x
   9195  4498				  -	      dex
   9196  4498				  -	      bpl	adjustloop2
   9197  4498				  -	      endif
   9198  4498					      endif
   9199  4498
   9200  4498
   9201  4498
   9202  4498
   9203  4498							;set score pointers
   9204  4498		       a7 95		      lax	score+2
   9205  449a		       20 cb f4 	      jsr	scorepointerset
   9206  449d		       84 9b		      sty	scorepointers+5
   9207  449f		       86 98		      stx	scorepointers+2
   9208  44a1		       a7 94		      lax	score+1
   9209  44a3		       20 cb f4 	      jsr	scorepointerset
   9210  44a6		       84 9a		      sty	scorepointers+4
   9211  44a8		       86 97		      stx	scorepointers+1
   9212  44aa		       a7 93		      lax	score
   9213  44ac		       20 cb f4 	      jsr	scorepointerset
   9214  44af		       84 99		      sty	scorepointers+3
   9215  44b1		       86 96		      stx	scorepointers
   9216  44b3
   9217  44b3				   vblk
   9218  44b3							; run possible vblank bB code
   9219  44b3				  -	      ifconst	vblank_bB_code
   9220  44b3				  -	      jsr	vblank_bB_code
   9221  44b3					      endif
   9222  44b3				   vblk2
   9223  44b3		       ad 84 02 	      LDA	INTIM
   9224  44b6		       30 fb		      bmi	vblk2
   9225  44b8		       4c 00 f0 	      jmp	kernel
   9226  44bb
   9227  44bb
   9228  44bb		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   9229  44c4		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   9230  44cb				   repostable
   9231  44cb
   9232  44cb				   scorepointerset
   9233  44cb		       29 0f		      and	#$0F
   9234  44cd		       0a		      asl
   9235  44ce		       0a		      asl
   9236  44cf		       0a		      asl
   9237  44d0		       69 74		      adc	#<scoretable
   9238  44d2		       a8		      tay
   9239  44d3		       8a		      txa
   9240  44d4							; and #$F0
   9241  44d4							; lsr
   9242  44d4		       4b f0		      asr	#$F0
   9243  44d6		       69 74		      adc	#<scoretable
   9244  44d8		       aa		      tax
   9245  44d9		       60		      rts
   9246  44da							;bB.asm
   9247  44da							; bB.asm file is split here
   9248  44da				   .
   9249  44da							; 
   9250  44da
   9251  44da				   .
   9252  44da							; 
   9253  44da
   9254  44da				   .
   9255  44da							; 
   9256  44da
   9257  44da				   .
   9258  44da							; 
   9259  44da
   9260  44da				   .
   9261  44da							; 
   9262  44da
   9263  44da				   .
   9264  44da							; 
   9265  44da
   9266  44da				   .
   9267  44da							; 
   9268  44da
   9269  44da				   .
   9270  44da							; 
   9271  44da
   9272  44da				   .
   9273  44da							; 
   9274  44da
   9275  44da				   .
   9276  44da							; 
   9277  44da
   9278  44da				   .L0397		;  inline 6lives.asm
   9279  44da
------- FILE 6lives.asm LEVEL 2 PASS 2
      0  44da					      include	6lives.asm
      1  44da							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  44da
      3  44da				   minikernel		; display up to 6 lives on screen
      4  44da		       85 02		      sta	WSYNC
      0  44dc					      sleep	10	; can we optimize this?
      1  44dc				   .CYCLES    SET	10
      2  44dc
      3  44dc				  -	      IF	.CYCLES < 2
      4  44dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  44dc				  -	      ERR
      6  44dc					      ENDIF
      7  44dc
      8  44dc				  -	      IF	.CYCLES & 1
      9  44dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  44dc				  -	      nop	0
     11  44dc				  -	      ELSE
     12  44dc				  -	      bit	VSYNC
     13  44dc				  -	      ENDIF
     14  44dc				  -.CYCLES    SET	.CYCLES - 3
     15  44dc					      ENDIF
     16  44dc
     17  44dc					      REPEAT	.CYCLES / 2
     18  44dc		       ea		      nop
     17  44dc					      REPEND
     18  44dd		       ea		      nop
     17  44dd					      REPEND
     18  44de		       ea		      nop
     17  44de					      REPEND
     18  44df		       ea		      nop
     17  44df					      REPEND
     18  44e0		       ea		      nop
     19  44e1					      REPEND
      6  44e1		       a9 00		      lda	#0
      7  44e3		       a0 07		      ldy	#7
      8  44e5		       85 25		      sta	VDELP0
      9  44e7		       85 26		      sta	VDELP1
     10  44e9					      ifnconst	lives_compact
     11  44e9					      ifnconst	lives_centered
     12  44e9		       85 10		      sta	RESP0
     13  44eb					      endif
     14  44eb		       ad f3 00 	      lda.w	lives
     15  44ee					      ifnconst	lives_centered
     16  44ee		       85 11		      sta	RESP1
     17  44f0					      endif
     18  44f0		       4a		      lsr
     19  44f1		       4a		      lsr
     20  44f2		       4a		      lsr
     21  44f3		       4a		      lsr
     22  44f4				  -	      ifconst	lives_centered
     23  44f4				  -	      sta	RESP0
     24  44f4					      endif
     25  44f4		       4a		      lsr
     26  44f5		       aa		      tax
     27  44f6				  -	      ifconst	lives_centered
     28  44f6				  -	      sta	RESP1
     29  44f6					      endif
     30  44f6		       bd 26 f5 	      lda	lifenusiz0table,x
     31  44f9		       85 04		      sta	NUSIZ0
     32  44fb		       bd 25 f5 	      lda	lifenusiz1table,x
     33  44fe		       85 05		      sta	NUSIZ1
     34  4500		       a5 f4		      lda	lifecolor
     35  4502		       85 06		      sta	COLUP0
     36  4504		       85 07		      sta	COLUP1
     37  4506		       a9 b0		      lda	#$b0
     38  4508		       85 20		      sta	HMP0
     39  450a
     40  450a				  -	      else
     41  450a				  -
     42  450a				  -	      ifnconst	lives_centered
     43  450a				  -	      sta.w	RESP0
     44  450a				  -	      sta	RESP1
     45  450a				  -	      endif
     46  450a				  -	      lda	lives
     47  450a				  -	      lsr
     48  450a				  -	      lsr
     49  450a				  -	      lsr
     50  450a				  -	      lsr
     51  450a				  -	      lsr
     52  450a				  -	      tax
     53  450a				  -	      lda	lifenusiz0table,x
     54  450a				  -	      ifconst	lives_centered
     55  450a				  -	      sta	RESP0
     56  450a				  -	      sta	RESP1
     57  450a				  -	      sta.w	NUSIZ0
     58  450a				  -	      else
     59  450a				  -	      sta	NUSIZ0
     60  450a				  -	      endif
     61  450a				  -	      lda	lifenusiz1table,x
     62  450a				  -	      sta	NUSIZ1
     63  450a				  -	      lda	lifecolor
     64  450a				  -	      sta	COLUP0
     65  450a				  -	      sta	COLUP1
     66  450a				  -	      lda	#$10
     67  450a				  -	      sta	HMP1
     68  450a				  -
     69  450a					      endif
     70  450a
     71  450a		       85 2a		      sta	HMOVE	; cycle 73
     72  450c
     73  450c				   lifeloop
     74  450c		       e0 00		      cpx	#0
     75  450e		       f0 0a		      beq	skipall
     76  4510		       b1 f2		      lda	(lifepointer),y
     77  4512		       85 1b		      sta	GRP0
     78  4514		       e0 01		      cpx	#1
     79  4516		       f0 02		      beq	skipall
     80  4518		       85 1c		      sta	GRP1
     81  451a				   skipall
     82  451a		       88		      dey
     83  451b		       85 02		      sta	WSYNC
     84  451d		       10 ed		      bpl	lifeloop
     85  451f		       c8		      iny
     86  4520		       84 1b		      sty	GRP0
     87  4522		       84 1c		      sty	GRP1
     88  4524		       60		      rts
     89  4525
     90  4525				  -	      if	(<*) > $F5
     91  4525				  -	      align	256
     92  4525					      endif
     93  4525				  -	      ifconst	lives_compact
     94  4525				  -lifenusiz1table
     95  4525				  -	      .byte	0
     96  4525				  -lifenusiz0table
     97  4525				  -	      .byte	0,0,0,1,1,3,3,3
     98  4525					      else
     99  4525				   lifenusiz1table
    100  4525		       00		      .byte.b	0
    101  4526				   lifenusiz0table
    102  4526		       00 00 00 02*	      .byte.b	0,0,0,2,2,6,6,6
    103  452e					      endif
------- FILE e:\Documents\bB\demos\ex_karl_g_8x8_world_bankswitched.bas.asm
   9281  452e
   9282  452e				  -	      if	(<*) > (<(*+8))
   9283  452e				  -	      repeat	($100-<*)
   9284  452e				  -	      .byte	0
   9285  452e				  -	      repend
   9286  452e					      endif
   9287  452e				   lives__L0173
   9288  452e		       00		      .byte.b	%00000000
   9289  452f		       18		      .byte.b	%00011000
   9290  4530		       24		      .byte.b	%00100100
   9291  4531		       5a		      .byte.b	%01011010
   9292  4532		       99		      .byte.b	%10011001
   9293  4533		       5a		      .byte.b	%01011010
   9294  4534		       24		      .byte.b	%00100100
   9295  4535		       18		      .byte.b	%00011000
   9296  4536				  -	      if	(<*) > (<(*+9))
   9297  4536				  -	      repeat	($100-<*)
   9298  4536				  -	      .byte	0
   9299  4536				  -	      repend
   9300  4536					      endif
   9301  4536				   playercolorL0214_1
   9302  4536		       26		      .byte.b	_26
   9303  4537		       9c		      .byte.b	_9C
   9304  4538		       9c		      .byte.b	_9C
   9305  4539		       9c		      .byte.b	_9C
   9306  453a		       da		      .byte.b	_DA
   9307  453b		       da		      .byte.b	_DA
   9308  453c		       3c		      .byte.b	_3C
   9309  453d		       3c		      .byte.b	_3C
   9310  453e		       3c		      .byte.b	_3C
   9311  453f		       26		      .byte.b	_26
   9312  4540				  -	      if	(<*) > (<(*+9))
   9313  4540				  -	      repeat	($100-<*)
   9314  4540				  -	      .byte	0
   9315  4540				  -	      repend
   9316  4540					      endif
   9317  4540				   playerL0215_1
   9318  4540		       66		      .byte.b	%01100110
   9319  4541		       24		      .byte.b	%00100100
   9320  4542		       3c		      .byte.b	%00111100
   9321  4543		       18		      .byte.b	%00011000
   9322  4544		       5a		      .byte.b	%01011010
   9323  4545		       3c		      .byte.b	%00111100
   9324  4546		       18		      .byte.b	%00011000
   9325  4547		       3c		      .byte.b	%00111100
   9326  4548		       3c		      .byte.b	%00111100
   9327  4549		       18		      .byte.b	%00011000
   9328  454a				  -	      if	(<*) > (<(*+9))
   9329  454a				  -	      repeat	($100-<*)
   9330  454a				  -	      .byte	0
   9331  454a				  -	      repend
   9332  454a					      endif
   9333  454a				   playercolorL0226_1
   9334  454a		       26		      .byte.b	_26
   9335  454b		       9c		      .byte.b	_9C
   9336  454c		       9c		      .byte.b	_9C
   9337  454d		       9c		      .byte.b	_9C
   9338  454e		       da		      .byte.b	_DA
   9339  454f		       da		      .byte.b	_DA
   9340  4550		       3c		      .byte.b	_3C
   9341  4551		       26		      .byte.b	_26
   9342  4552		       26		      .byte.b	_26
   9343  4553		       26		      .byte.b	_26
   9344  4554				  -	      if	(<*) > (<(*+9))
   9345  4554				  -	      repeat	($100-<*)
   9346  4554				  -	      .byte	0
   9347  4554				  -	      repend
   9348  4554					      endif
   9349  4554				   playercolorL0280_1
   9350  4554		       26		      .byte.b	_26
   9351  4555		       9c		      .byte.b	_9C
   9352  4556		       9c		      .byte.b	_9C
   9353  4557		       9c		      .byte.b	_9C
   9354  4558		       da		      .byte.b	_DA
   9355  4559		       da		      .byte.b	_DA
   9356  455a		       3c		      .byte.b	_3C
   9357  455b		       3c		      .byte.b	_3C
   9358  455c		       3c		      .byte.b	_3C
   9359  455d		       26		      .byte.b	_26
   9360  455e				  -	      if	(<*) > (<(*+9))
   9361  455e				  -	      repeat	($100-<*)
   9362  455e				  -	      .byte	0
   9363  455e				  -	      repend
   9364  455e					      endif
   9365  455e				   playerL0283_1
   9366  455e		       66		      .byte.b	%01100110
   9367  455f		       66		      .byte.b	%01100110
   9368  4560		       3c		      .byte.b	%00111100
   9369  4561		       0c		      .byte.b	%00001100
   9370  4562		       3c		      .byte.b	%00111100
   9371  4563		       1c		      .byte.b	%00011100
   9372  4564		       18		      .byte.b	%00011000
   9373  4565		       3c		      .byte.b	%00111100
   9374  4566		       3c		      .byte.b	%00111100
   9375  4567		       18		      .byte.b	%00011000
   9376  4568				  -	      if	(<*) > (<(*+9))
   9377  4568				  -	      repeat	($100-<*)
   9378  4568				  -	      .byte	0
   9379  4568				  -	      repend
   9380  4568					      endif
   9381  4568				   playerL0285_1
   9382  4568		       c3		      .byte.b	%11000011
   9383  4569		       63		      .byte.b	%01100011
   9384  456a		       3e		      .byte.b	%00111110
   9385  456b		       1c		      .byte.b	%00011100
   9386  456c		       3c		      .byte.b	%00111100
   9387  456d		       5e		      .byte.b	%01011110
   9388  456e		       18		      .byte.b	%00011000
   9389  456f		       3c		      .byte.b	%00111100
   9390  4570		       3c		      .byte.b	%00111100
   9391  4571		       18		      .byte.b	%00011000
   9392  4572				  -	      if	(<*) > (<(*+9))
   9393  4572				  -	      repeat	($100-<*)
   9394  4572				  -	      .byte	0
   9395  4572				  -	      repend
   9396  4572					      endif
   9397  4572				   playerL0287_1
   9398  4572		       36		      .byte.b	%00110110
   9399  4573		       36		      .byte.b	%00110110
   9400  4574		       1c		      .byte.b	%00011100
   9401  4575		       0c		      .byte.b	%00001100
   9402  4576		       3c		      .byte.b	%00111100
   9403  4577		       1c		      .byte.b	%00011100
   9404  4578		       18		      .byte.b	%00011000
   9405  4579		       3c		      .byte.b	%00111100
   9406  457a		       3c		      .byte.b	%00111100
   9407  457b		       18		      .byte.b	%00011000
   9408  457c				  -	      if	(<*) > (<(*+9))
   9409  457c				  -	      repeat	($100-<*)
   9410  457c				  -	      .byte	0
   9411  457c				  -	      repend
   9412  457c					      endif
   9413  457c				   playerL0289_1
   9414  457c		       3c		      .byte.b	%00111100
   9415  457d		       1c		      .byte.b	%00011100
   9416  457e		       1c		      .byte.b	%00011100
   9417  457f		       04		      .byte.b	%00000100
   9418  4580		       1c		      .byte.b	%00011100
   9419  4581		       1c		      .byte.b	%00011100
   9420  4582		       18		      .byte.b	%00011000
   9421  4583		       3c		      .byte.b	%00111100
   9422  4584		       3c		      .byte.b	%00111100
   9423  4585		       18		      .byte.b	%00011000
   9424  4586				  -	      if	(<*) > (<(*+9))
   9425  4586				  -	      repeat	($100-<*)
   9426  4586				  -	      .byte	0
   9427  4586				  -	      repend
   9428  4586					      endif
   9429  4586				   playerL0291_1
   9430  4586		       66		      .byte.b	%01100110
   9431  4587		       24		      .byte.b	%00100100
   9432  4588		       1c		      .byte.b	%00011100
   9433  4589		       18		      .byte.b	%00011000
   9434  458a		       7a		      .byte.b	%01111010
   9435  458b		       3c		      .byte.b	%00111100
   9436  458c		       18		      .byte.b	%00011000
   9437  458d		       3c		      .byte.b	%00111100
   9438  458e		       3c		      .byte.b	%00111100
   9439  458f		       18		      .byte.b	%00011000
   9440  4590				  -	      if	(<*) > (<(*+9))
   9441  4590				  -	      repeat	($100-<*)
   9442  4590				  -	      .byte	0
   9443  4590				  -	      repend
   9444  4590					      endif
   9445  4590				   playerL0293_1
   9446  4590		       60		      .byte.b	%01100000
   9447  4591		       26		      .byte.b	%00100110
   9448  4592		       3c		      .byte.b	%00111100
   9449  4593		       18		      .byte.b	%00011000
   9450  4594		       3e		      .byte.b	%00111110
   9451  4595		       3e		      .byte.b	%00111110
   9452  4596		       18		      .byte.b	%00011000
   9453  4597		       3c		      .byte.b	%00111100
   9454  4598		       3c		      .byte.b	%00111100
   9455  4599		       18		      .byte.b	%00011000
   9456  459a				  -	      if	(<*) > (<(*+9))
   9457  459a				  -	      repeat	($100-<*)
   9458  459a				  -	      .byte	0
   9459  459a				  -	      repend
   9460  459a					      endif
   9461  459a				   playerL0295_1
   9462  459a		       66		      .byte.b	%01100110
   9463  459b		       24		      .byte.b	%00100100
   9464  459c		       38		      .byte.b	%00111000
   9465  459d		       18		      .byte.b	%00011000
   9466  459e		       5e		      .byte.b	%01011110
   9467  459f		       3c		      .byte.b	%00111100
   9468  45a0		       18		      .byte.b	%00011000
   9469  45a1		       3c		      .byte.b	%00111100
   9470  45a2		       3c		      .byte.b	%00111100
   9471  45a3		       18		      .byte.b	%00011000
   9472  45a4				  -	      if	(<*) > (<(*+9))
   9473  45a4				  -	      repeat	($100-<*)
   9474  45a4				  -	      .byte	0
   9475  45a4				  -	      repend
   9476  45a4					      endif
   9477  45a4				   playerL0297_1
   9478  45a4		       06		      .byte.b	%00000110
   9479  45a5		       64		      .byte.b	%01100100
   9480  45a6		       3c		      .byte.b	%00111100
   9481  45a7		       18		      .byte.b	%00011000
   9482  45a8		       7c		      .byte.b	%01111100
   9483  45a9		       7c		      .byte.b	%01111100
   9484  45aa		       18		      .byte.b	%00011000
   9485  45ab		       3c		      .byte.b	%00111100
   9486  45ac		       3c		      .byte.b	%00111100
   9487  45ad		       18		      .byte.b	%00011000
   9488  45ae					      if	ECHOFIRST
      2502 bytes of ROM space left in bank 4
   9489  45ae					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   9490  45ae					      endif
   9491  45ae		       00 01	   ECHOFIRST  =	1
   9492  45ae
   9493  45ae
   9494  45ae							; Provided under the CC0 license. See the included LICENSE.txt for details.
   9495  45ae
   9496  45ae							; feel free to modify the score graphics - just keep each digit 8 high
   9497  45ae							; and keep the conditional compilation stuff intact
   9498  45ae				  -	      ifconst	ROM2k
   9499  45ae				  -	      ORG	$F7AC-8
   9500  45ae					      else
   9501  45ae					      ifconst	bankswitch
   9502  45ae				  -	      if	bankswitch == 8
   9503  45ae				  -	      ORG	$2F94-bscode_length
   9504  45ae				  -	      RORG	$FF94-bscode_length
   9505  45ae					      endif
   9506  45ae					      if	bankswitch == 16
   9507  4f74					      ORG	$4F94-bscode_length
   9508  4f74					      RORG	$FF94-bscode_length
   9509  4f74					      endif
   9510  4f74				  -	      if	bankswitch == 32
   9511  4f74				  -	      ORG	$8F94-bscode_length
   9512  4f74				  -	      RORG	$FF94-bscode_length
   9513  4f74					      endif
   9514  4f74				  -	      if	bankswitch == 64
   9515  4f74				  -	      ORG	$10F80-bscode_length
   9516  4f74				  -	      RORG	$1FF80-bscode_length
   9517  4f74					      endif
   9518  4f74				  -	      else
   9519  4f74				  -	      ORG	$FF9C
   9520  4f74					      endif
   9521  4f74					      endif
   9522  4f74
   9523  4f74							; font equates
   9524  4f74		       00 01	   .21stcentury =	1
   9525  4f74		       00 02	   alarmclock =	2
   9526  4f74		       00 03	   handwritten =	3
   9527  4f74		       00 04	   interrupted =	4
   9528  4f74		       00 05	   retroputer =	5
   9529  4f74		       00 06	   whimsey    =	6
   9530  4f74		       00 07	   tiny       =	7
   9531  4f74		       00 08	   hex	      =	8
   9532  4f74
   9533  4f74				  -	      ifconst	font
   9534  4f74				  -	      if	font == hex
   9535  4f74				  -	      ORG	. - 48
   9536  4f74				  -	      endif
   9537  4f74					      endif
   9538  4f74
   9539  4f74				   scoretable
   9540  4f74
   9541  4f74				  -	      ifconst	font
   9542  4f74				  -	      if	font == .21stcentury
   9543  4f74				  -	      include	"score_graphics.asm.21stcentury"
   9544  4f74				  -	      endif
   9545  4f74				  -	      if	font == alarmclock
   9546  4f74				  -	      include	"score_graphics.asm.alarmclock"
   9547  4f74				  -	      endif
   9548  4f74				  -	      if	font == handwritten
   9549  4f74				  -	      include	"score_graphics.asm.handwritten"
   9550  4f74				  -	      endif
   9551  4f74				  -	      if	font == interrupted
   9552  4f74				  -	      include	"score_graphics.asm.interrupted"
   9553  4f74				  -	      endif
   9554  4f74				  -	      if	font == retroputer
   9555  4f74				  -	      include	"score_graphics.asm.retroputer"
   9556  4f74				  -	      endif
   9557  4f74				  -	      if	font == whimsey
   9558  4f74				  -	      include	"score_graphics.asm.whimsey"
   9559  4f74				  -	      endif
   9560  4f74				  -	      if	font == tiny
   9561  4f74				  -	      include	"score_graphics.asm.tiny"
   9562  4f74				  -	      endif
   9563  4f74				  -	      if	font == hex
   9564  4f74				  -	      include	"score_graphics.asm.hex"
   9565  4f74				  -	      endif
   9566  4f74					      else		; default font
   9567  4f74
   9568  4f74		       3c		      .byte.b	%00111100
   9569  4f75		       66		      .byte.b	%01100110
   9570  4f76		       66		      .byte.b	%01100110
   9571  4f77		       66		      .byte.b	%01100110
   9572  4f78		       66		      .byte.b	%01100110
   9573  4f79		       66		      .byte.b	%01100110
   9574  4f7a		       66		      .byte.b	%01100110
   9575  4f7b		       3c		      .byte.b	%00111100
   9576  4f7c
   9577  4f7c		       7e		      .byte.b	%01111110
   9578  4f7d		       18		      .byte.b	%00011000
   9579  4f7e		       18		      .byte.b	%00011000
   9580  4f7f		       18		      .byte.b	%00011000
   9581  4f80		       18		      .byte.b	%00011000
   9582  4f81		       38		      .byte.b	%00111000
   9583  4f82		       18		      .byte.b	%00011000
   9584  4f83		       08		      .byte.b	%00001000
   9585  4f84
   9586  4f84		       7e		      .byte.b	%01111110
   9587  4f85		       60		      .byte.b	%01100000
   9588  4f86		       60		      .byte.b	%01100000
   9589  4f87		       3c		      .byte.b	%00111100
   9590  4f88		       06		      .byte.b	%00000110
   9591  4f89		       06		      .byte.b	%00000110
   9592  4f8a		       46		      .byte.b	%01000110
   9593  4f8b		       3c		      .byte.b	%00111100
   9594  4f8c
   9595  4f8c		       3c		      .byte.b	%00111100
   9596  4f8d		       46		      .byte.b	%01000110
   9597  4f8e		       06		      .byte.b	%00000110
   9598  4f8f		       06		      .byte.b	%00000110
   9599  4f90		       1c		      .byte.b	%00011100
   9600  4f91		       06		      .byte.b	%00000110
   9601  4f92		       46		      .byte.b	%01000110
   9602  4f93		       3c		      .byte.b	%00111100
   9603  4f94
   9604  4f94		       0c		      .byte.b	%00001100
   9605  4f95		       0c		      .byte.b	%00001100
   9606  4f96		       7e		      .byte.b	%01111110
   9607  4f97		       4c		      .byte.b	%01001100
   9608  4f98		       4c		      .byte.b	%01001100
   9609  4f99		       2c		      .byte.b	%00101100
   9610  4f9a		       1c		      .byte.b	%00011100
   9611  4f9b		       0c		      .byte.b	%00001100
   9612  4f9c
   9613  4f9c		       3c		      .byte.b	%00111100
   9614  4f9d		       46		      .byte.b	%01000110
   9615  4f9e		       06		      .byte.b	%00000110
   9616  4f9f		       06		      .byte.b	%00000110
   9617  4fa0		       3c		      .byte.b	%00111100
   9618  4fa1		       60		      .byte.b	%01100000
   9619  4fa2		       60		      .byte.b	%01100000
   9620  4fa3		       7e		      .byte.b	%01111110
   9621  4fa4
   9622  4fa4		       3c		      .byte.b	%00111100
   9623  4fa5		       66		      .byte.b	%01100110
   9624  4fa6		       66		      .byte.b	%01100110
   9625  4fa7		       66		      .byte.b	%01100110
   9626  4fa8		       7c		      .byte.b	%01111100
   9627  4fa9		       60		      .byte.b	%01100000
   9628  4faa		       62		      .byte.b	%01100010
   9629  4fab		       3c		      .byte.b	%00111100
   9630  4fac
   9631  4fac		       30		      .byte.b	%00110000
   9632  4fad		       30		      .byte.b	%00110000
   9633  4fae		       30		      .byte.b	%00110000
   9634  4faf		       18		      .byte.b	%00011000
   9635  4fb0		       0c		      .byte.b	%00001100
   9636  4fb1		       06		      .byte.b	%00000110
   9637  4fb2		       42		      .byte.b	%01000010
   9638  4fb3		       3e		      .byte.b	%00111110
   9639  4fb4
   9640  4fb4		       3c		      .byte.b	%00111100
   9641  4fb5		       66		      .byte.b	%01100110
   9642  4fb6		       66		      .byte.b	%01100110
   9643  4fb7		       66		      .byte.b	%01100110
   9644  4fb8		       3c		      .byte.b	%00111100
   9645  4fb9		       66		      .byte.b	%01100110
   9646  4fba		       66		      .byte.b	%01100110
   9647  4fbb		       3c		      .byte.b	%00111100
   9648  4fbc
   9649  4fbc		       3c		      .byte.b	%00111100
   9650  4fbd		       46		      .byte.b	%01000110
   9651  4fbe		       06		      .byte.b	%00000110
   9652  4fbf		       3e		      .byte.b	%00111110
   9653  4fc0		       66		      .byte.b	%01100110
   9654  4fc1		       66		      .byte.b	%01100110
   9655  4fc2		       66		      .byte.b	%01100110
   9656  4fc3		       3c		      .byte.b	%00111100
   9657  4fc4
   9658  4fc4					      ifnconst	DPC_kernel_options
   9659  4fc4
   9660  4fc4		       00		      .byte.b	%00000000
   9661  4fc5		       00		      .byte.b	%00000000
   9662  4fc6		       00		      .byte.b	%00000000
   9663  4fc7		       00		      .byte.b	%00000000
   9664  4fc8		       00		      .byte.b	%00000000
   9665  4fc9		       00		      .byte.b	%00000000
   9666  4fca		       00		      .byte.b	%00000000
   9667  4fcb		       00		      .byte.b	%00000000
   9668  4fcc
   9669  4fcc					      endif
   9670  4fcc
   9671  4fcc					      endif
   9672  4fcc
   9673  4fcc				  -	      ifconst	ROM2k
   9674  4fcc				  -	      ORG	$F7FC
   9675  4fcc					      else
   9676  4fcc					      ifconst	bankswitch
   9677  4fcc				  -	      if	bankswitch == 8
   9678  4fcc				  -	      ORG	$2FF4-bscode_length
   9679  4fcc				  -	      RORG	$FFF4-bscode_length
   9680  4fcc					      endif
   9681  4fcc					      if	bankswitch == 16
   9682  4fd4					      ORG	$4FF4-bscode_length
   9683  4fd4					      RORG	$FFF4-bscode_length
   9684  4fd4					      endif
   9685  4fd4				  -	      if	bankswitch == 32
   9686  4fd4				  -	      ORG	$8FF4-bscode_length
   9687  4fd4				  -	      RORG	$FFF4-bscode_length
   9688  4fd4					      endif
   9689  4fd4				  -	      if	bankswitch == 64
   9690  4fd4				  -	      ORG	$10FE0-bscode_length
   9691  4fd4				  -	      RORG	$1FFE0-bscode_length
   9692  4fd4					      endif
   9693  4fd4				  -	      else
   9694  4fd4				  -	      ORG	$FFFC
   9695  4fd4					      endif
   9696  4fd4					      endif
   9697  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   9698  4fd4
   9699  4fd4							; every bank has this stuff at the same place
   9700  4fd4							; this code can switch to/from any bank at any entry point
   9701  4fd4							; and can preserve register values
   9702  4fd4							; note: lines not starting with a space are not placed in all banks
   9703  4fd4							;
   9704  4fd4							; line below tells the compiler how long this is - do not remove
   9705  4fd4							;size=32
   9706  4fd4
   9707  4fd4				   begin_bscode
   9708  4fd4		       a2 ff		      ldx	#$ff
   9709  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9710  4fd6				  -	      stx	FASTFETCH
   9711  4fd6					      endif
   9712  4fd6		       9a		      txs
   9713  4fd7				  -	      if	bankswitch == 64
   9714  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9715  4fd7					      else
   9716  4fd7		       a9 f2		      lda	#>(start-1)
   9717  4fd9					      endif
   9718  4fd9		       48		      pha
   9719  4fda		       a9 4f		      lda	#<(start-1)
   9720  4fdc		       48		      pha
   9721  4fdd
   9722  4fdd				   BS_return
   9723  4fdd		       48		      pha
   9724  4fde		       8a		      txa
   9725  4fdf		       48		      pha
   9726  4fe0		       ba		      tsx
   9727  4fe1
   9728  4fe1					      if	bankswitch != 64
   9729  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   9730  4fe3
   9731  4fe3		       2a		      rol
   9732  4fe4		       2a		      rol
   9733  4fe5		       2a		      rol
   9734  4fe6		       2a		      rol
   9735  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9736  4fe9		       aa		      tax
   9737  4fea		       e8		      inx
   9738  4feb				  -	      else
   9739  4feb				  -	      lda	4,x	; get high byte of return address
   9740  4feb				  -	      tay
   9741  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9742  4feb				  -	      sta	4,x
   9743  4feb				  -	      tya
   9744  4feb				  -	      lsr
   9745  4feb				  -	      lsr
   9746  4feb				  -	      lsr
   9747  4feb				  -	      lsr
   9748  4feb				  -	      tax
   9749  4feb				  -	      inx
   9750  4feb					      endif
   9751  4feb
   9752  4feb				   BS_jsr
   9753  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   9754  4fee		       68		      pla
   9755  4fef		       aa		      tax
   9756  4ff0		       68		      pla
   9757  4ff1		       60		      rts
   9758  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9759  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9760  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9761  4ff2					      endif
   9762  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   9763  4ff2
   9764  4ff2					      ifconst	bankswitch
   9765  4ff2				  -	      if	bankswitch == 8
   9766  4ff2				  -	      ORG	$2FFC
   9767  4ff2				  -	      RORG	$FFFC
   9768  4ff2					      endif
   9769  4ff2					      if	bankswitch == 16
   9770  4ffc					      ORG	$4FFC
   9771  4ffc					      RORG	$FFFC
   9772  4ffc					      endif
   9773  4ffc				  -	      if	bankswitch == 32
   9774  4ffc				  -	      ORG	$8FFC
   9775  4ffc				  -	      RORG	$FFFC
   9776  4ffc					      endif
   9777  4ffc				  -	      if	bankswitch == 64
   9778  4ffc				  -	      ORG	$10FF0
   9779  4ffc				  -	      RORG	$1FFF0
   9780  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   9781  4ffc				  -	      ORG	$10FF8
   9782  4ffc				  -	      RORG	$1FFF8
   9783  4ffc				  -	      ifconst	superchip
   9784  4ffc				  -	      .byte	"E","F","S","C"
   9785  4ffc				  -	      else
   9786  4ffc				  -	      .byte	"E","F","E","F"
   9787  4ffc				  -	      endif
   9788  4ffc				  -	      ORG	$10FFC
   9789  4ffc				  -	      RORG	$1FFFC
   9790  4ffc					      endif
   9791  4ffc				  -	      else
   9792  4ffc				  -	      ifconst	ROM2k
   9793  4ffc				  -	      ORG	$F7FC
   9794  4ffc				  -	      else
   9795  4ffc				  -	      ORG	$FFFC
   9796  4ffc				  -	      endif
   9797  4ffc					      endif
   9798  4ffc		       50 f2		      .word.w	(start & $ffff)
   9799  4ffe		       50 f2		      .word.w	(start & $ffff)

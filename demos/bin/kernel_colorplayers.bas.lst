------- FILE e:\Documents\bB\batariBasicGames\demos\kernel_colorplayers.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\kernel_colorplayers.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\kernel_colorplayers.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 fe	    _FE        =	$FE
      4  10000 ????
      5  10000 ????		00 fc	    _FC        =	$FC
      6  10000 ????
      7  10000 ????		00 fa	    _FA        =	$FA
      8  10000 ????
      9  10000 ????		00 f8	    _F8        =	$F8
     10  10000 ????
     11  10000 ????		00 f6	    _F6        =	$F6
     12  10000 ????
     13  10000 ????		00 f4	    _F4        =	$F4
     14  10000 ????
     15  10000 ????		00 f2	    _F2        =	$F2
     16  10000 ????
     17  10000 ????		00 f0	    _F0        =	$F0
     18  10000 ????
     19  10000 ????		00 ee	    _EE        =	$EE
     20  10000 ????
     21  10000 ????		00 ec	    _EC        =	$EC
     22  10000 ????
     23  10000 ????		00 ea	    _EA        =	$EA
     24  10000 ????
     25  10000 ????		00 e8	    _E8        =	$E8
     26  10000 ????
     27  10000 ????		00 e6	    _E6        =	$E6
     28  10000 ????
     29  10000 ????		00 e4	    _E4        =	$E4
     30  10000 ????
     31  10000 ????		00 e2	    _E2        =	$E2
     32  10000 ????
     33  10000 ????		00 e0	    _E0        =	$E0
     34  10000 ????
     35  10000 ????		00 de	    _DE        =	$DE
     36  10000 ????
     37  10000 ????		00 dc	    _DC        =	$DC
     38  10000 ????
     39  10000 ????		00 da	    _DA        =	$DA
     40  10000 ????
     41  10000 ????		00 d8	    _D8        =	$D8
     42  10000 ????
     43  10000 ????		00 d6	    _D6        =	$D6
     44  10000 ????
     45  10000 ????		00 d4	    _D4        =	$D4
     46  10000 ????
     47  10000 ????		00 d2	    _D2        =	$D2
     48  10000 ????
     49  10000 ????		00 d0	    _D0        =	$D0
     50  10000 ????
     51  10000 ????		00 ce	    _CE        =	$CE
     52  10000 ????
     53  10000 ????		00 cc	    _CC        =	$CC
     54  10000 ????
     55  10000 ????		00 ca	    _CA        =	$CA
     56  10000 ????
     57  10000 ????		00 c8	    _C8        =	$C8
     58  10000 ????
     59  10000 ????		00 c6	    _C6        =	$C6
     60  10000 ????
     61  10000 ????		00 c4	    _C4        =	$C4
     62  10000 ????
     63  10000 ????		00 c2	    _C2        =	$C2
     64  10000 ????
     65  10000 ????		00 c0	    _C0        =	$C0
     66  10000 ????
     67  10000 ????		00 be	    _BE        =	$BE
     68  10000 ????
     69  10000 ????		00 bc	    _BC        =	$BC
     70  10000 ????
     71  10000 ????		00 ba	    _BA        =	$BA
     72  10000 ????
     73  10000 ????		00 b8	    _B8        =	$B8
     74  10000 ????
     75  10000 ????		00 b6	    _B6        =	$B6
     76  10000 ????
     77  10000 ????		00 b4	    _B4        =	$B4
     78  10000 ????
     79  10000 ????		00 b2	    _B2        =	$B2
     80  10000 ????
     81  10000 ????		00 b0	    _B0        =	$B0
     82  10000 ????
     83  10000 ????		00 ae	    _AE        =	$AE
     84  10000 ????
     85  10000 ????		00 ac	    _AC        =	$AC
     86  10000 ????
     87  10000 ????		00 aa	    _AA        =	$AA
     88  10000 ????
     89  10000 ????		00 a8	    _A8        =	$A8
     90  10000 ????
     91  10000 ????		00 a6	    _A6        =	$A6
     92  10000 ????
     93  10000 ????		00 a4	    _A4        =	$A4
     94  10000 ????
     95  10000 ????		00 a2	    _A2        =	$A2
     96  10000 ????
     97  10000 ????		00 a0	    _A0        =	$A0
     98  10000 ????
     99  10000 ????		00 9e	    _9E        =	$9E
    100  10000 ????
    101  10000 ????		00 9c	    _9C        =	$9C
    102  10000 ????
    103  10000 ????		00 9a	    _9A        =	$9A
    104  10000 ????
    105  10000 ????		00 98	    _98        =	$98
    106  10000 ????
    107  10000 ????		00 96	    _96        =	$96
    108  10000 ????
    109  10000 ????		00 94	    _94        =	$94
    110  10000 ????
    111  10000 ????		00 92	    _92        =	$92
    112  10000 ????
    113  10000 ????		00 90	    _90        =	$90
    114  10000 ????
    115  10000 ????		00 8e	    _8E        =	$8E
    116  10000 ????
    117  10000 ????		00 8c	    _8C        =	$8C
    118  10000 ????
    119  10000 ????		00 8a	    _8A        =	$8A
    120  10000 ????
    121  10000 ????		00 88	    _88        =	$88
    122  10000 ????
    123  10000 ????		00 86	    _86        =	$86
    124  10000 ????
    125  10000 ????		00 84	    _84        =	$84
    126  10000 ????
    127  10000 ????		00 82	    _82        =	$82
    128  10000 ????
    129  10000 ????		00 80	    _80        =	$80
    130  10000 ????
    131  10000 ????		00 7e	    _7E        =	$7E
    132  10000 ????
    133  10000 ????		00 7c	    _7C        =	$7C
    134  10000 ????
    135  10000 ????		00 7a	    _7A        =	$7A
    136  10000 ????
    137  10000 ????		00 78	    _78        =	$78
    138  10000 ????
    139  10000 ????		00 76	    _76        =	$76
    140  10000 ????
    141  10000 ????		00 74	    _74        =	$74
    142  10000 ????
    143  10000 ????		00 72	    _72        =	$72
    144  10000 ????
    145  10000 ????		00 70	    _70        =	$70
    146  10000 ????
    147  10000 ????		00 6e	    _6E        =	$6E
    148  10000 ????
    149  10000 ????		00 6c	    _6C        =	$6C
    150  10000 ????
    151  10000 ????		00 6a	    _6A        =	$6A
    152  10000 ????
    153  10000 ????		00 68	    _68        =	$68
    154  10000 ????
    155  10000 ????		00 66	    _66        =	$66
    156  10000 ????
    157  10000 ????		00 64	    _64        =	$64
    158  10000 ????
    159  10000 ????		00 62	    _62        =	$62
    160  10000 ????
    161  10000 ????		00 60	    _60        =	$60
    162  10000 ????
    163  10000 ????		00 5e	    _5E        =	$5E
    164  10000 ????
    165  10000 ????		00 5c	    _5C        =	$5C
    166  10000 ????
    167  10000 ????		00 5a	    _5A        =	$5A
    168  10000 ????
    169  10000 ????		00 58	    _58        =	$58
    170  10000 ????
    171  10000 ????		00 56	    _56        =	$56
    172  10000 ????
    173  10000 ????		00 54	    _54        =	$54
    174  10000 ????
    175  10000 ????		00 52	    _52        =	$52
    176  10000 ????
    177  10000 ????		00 50	    _50        =	$50
    178  10000 ????
    179  10000 ????		00 4e	    _4E        =	$4E
    180  10000 ????
    181  10000 ????		00 4c	    _4C        =	$4C
    182  10000 ????
    183  10000 ????		00 4a	    _4A        =	$4A
    184  10000 ????
    185  10000 ????		00 48	    _48        =	$48
    186  10000 ????
    187  10000 ????		00 46	    _46        =	$46
    188  10000 ????
    189  10000 ????		00 44	    _44        =	$44
    190  10000 ????
    191  10000 ????		00 42	    _42        =	$42
    192  10000 ????
    193  10000 ????		00 40	    _40        =	$40
    194  10000 ????
    195  10000 ????		00 3e	    _3E        =	$3E
    196  10000 ????
    197  10000 ????		00 3c	    _3C        =	$3C
    198  10000 ????
    199  10000 ????		00 3a	    _3A        =	$3A
    200  10000 ????
    201  10000 ????		00 38	    _38        =	$38
    202  10000 ????
    203  10000 ????		00 36	    _36        =	$36
    204  10000 ????
    205  10000 ????		00 34	    _34        =	$34
    206  10000 ????
    207  10000 ????		00 32	    _32        =	$32
    208  10000 ????
    209  10000 ????		00 30	    _30        =	$30
    210  10000 ????
    211  10000 ????		00 2e	    _2E        =	$2E
    212  10000 ????
    213  10000 ????		00 2c	    _2C        =	$2C
    214  10000 ????
    215  10000 ????		00 2a	    _2A        =	$2A
    216  10000 ????
    217  10000 ????		00 28	    _28        =	$28
    218  10000 ????
    219  10000 ????		00 26	    _26        =	$26
    220  10000 ????
    221  10000 ????		00 24	    _24        =	$24
    222  10000 ????
    223  10000 ????		00 22	    _22        =	$22
    224  10000 ????
    225  10000 ????		00 20	    _20        =	$20
    226  10000 ????
    227  10000 ????		00 1e	    _1E        =	$1E
    228  10000 ????
    229  10000 ????		00 1c	    _1C        =	$1C
    230  10000 ????
    231  10000 ????		00 1a	    _1A        =	$1A
    232  10000 ????
    233  10000 ????		00 18	    _18        =	$18
    234  10000 ????
    235  10000 ????		00 16	    _16        =	$16
    236  10000 ????
    237  10000 ????		00 14	    _14        =	$14
    238  10000 ????
    239  10000 ????		00 12	    _12        =	$12
    240  10000 ????
    241  10000 ????		00 10	    _10        =	$10
    242  10000 ????
    243  10000 ????		00 0e	    _0E        =	$0E
    244  10000 ????
    245  10000 ????		00 0c	    _0C        =	$0C
    246  10000 ????
    247  10000 ????		00 0a	    _0A        =	$0A
    248  10000 ????
    249  10000 ????		00 08	    _08        =	$08
    250  10000 ????
    251  10000 ????		00 06	    _06        =	$06
    252  10000 ????
    253  10000 ????		00 04	    _04        =	$04
    254  10000 ????
    255  10000 ????		00 02	    _02        =	$02
    256  10000 ????
    257  10000 ????		00 00	    _00        =	$00
    258  10000 ????
    259  10000 ????		00 08	    pfres      =	8
    260  10000 ????
    261  10000 ????		00 eb	    oldbally   =	x
    262  10000 ????
    263  10000 ????		00 ea	    oldballx   =	w
    264  10000 ????
    265  10000 ????		00 d5	    playerroom =	b
    266  10000 ????
    267  10000 ????		00 d4	    threecount =	a
    268  10000 ????
    269  10000 ????		00 01	    PFcolors   =	1
    270  10000 ????		00 01	    player1colors =	1
    271  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????			   -	       ifnconst	pfres
    231  10000 ????			   -playfield  =	playfieldbase
    232  10000 ????				       else
    233  10000 ????		00 b4	    playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE e:\Documents\bB\batariBasicGames\demos\kernel_colorplayers.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 fe	    _FE        =	$FE
      4  10000 ????
      5  10000 ????		00 fc	    _FC        =	$FC
      6  10000 ????
      7  10000 ????		00 fa	    _FA        =	$FA
      8  10000 ????
      9  10000 ????		00 f8	    _F8        =	$F8
     10  10000 ????
     11  10000 ????		00 f6	    _F6        =	$F6
     12  10000 ????
     13  10000 ????		00 f4	    _F4        =	$F4
     14  10000 ????
     15  10000 ????		00 f2	    _F2        =	$F2
     16  10000 ????
     17  10000 ????		00 f0	    _F0        =	$F0
     18  10000 ????
     19  10000 ????		00 ee	    _EE        =	$EE
     20  10000 ????
     21  10000 ????		00 ec	    _EC        =	$EC
     22  10000 ????
     23  10000 ????		00 ea	    _EA        =	$EA
     24  10000 ????
     25  10000 ????		00 e8	    _E8        =	$E8
     26  10000 ????
     27  10000 ????		00 e6	    _E6        =	$E6
     28  10000 ????
     29  10000 ????		00 e4	    _E4        =	$E4
     30  10000 ????
     31  10000 ????		00 e2	    _E2        =	$E2
     32  10000 ????
     33  10000 ????		00 e0	    _E0        =	$E0
     34  10000 ????
     35  10000 ????		00 de	    _DE        =	$DE
     36  10000 ????
     37  10000 ????		00 dc	    _DC        =	$DC
     38  10000 ????
     39  10000 ????		00 da	    _DA        =	$DA
     40  10000 ????
     41  10000 ????		00 d8	    _D8        =	$D8
     42  10000 ????
     43  10000 ????		00 d6	    _D6        =	$D6
     44  10000 ????
     45  10000 ????		00 d4	    _D4        =	$D4
     46  10000 ????
     47  10000 ????		00 d2	    _D2        =	$D2
     48  10000 ????
     49  10000 ????		00 d0	    _D0        =	$D0
     50  10000 ????
     51  10000 ????		00 ce	    _CE        =	$CE
     52  10000 ????
     53  10000 ????		00 cc	    _CC        =	$CC
     54  10000 ????
     55  10000 ????		00 ca	    _CA        =	$CA
     56  10000 ????
     57  10000 ????		00 c8	    _C8        =	$C8
     58  10000 ????
     59  10000 ????		00 c6	    _C6        =	$C6
     60  10000 ????
     61  10000 ????		00 c4	    _C4        =	$C4
     62  10000 ????
     63  10000 ????		00 c2	    _C2        =	$C2
     64  10000 ????
     65  10000 ????		00 c0	    _C0        =	$C0
     66  10000 ????
     67  10000 ????		00 be	    _BE        =	$BE
     68  10000 ????
     69  10000 ????		00 bc	    _BC        =	$BC
     70  10000 ????
     71  10000 ????		00 ba	    _BA        =	$BA
     72  10000 ????
     73  10000 ????		00 b8	    _B8        =	$B8
     74  10000 ????
     75  10000 ????		00 b6	    _B6        =	$B6
     76  10000 ????
     77  10000 ????		00 b4	    _B4        =	$B4
     78  10000 ????
     79  10000 ????		00 b2	    _B2        =	$B2
     80  10000 ????
     81  10000 ????		00 b0	    _B0        =	$B0
     82  10000 ????
     83  10000 ????		00 ae	    _AE        =	$AE
     84  10000 ????
     85  10000 ????		00 ac	    _AC        =	$AC
     86  10000 ????
     87  10000 ????		00 aa	    _AA        =	$AA
     88  10000 ????
     89  10000 ????		00 a8	    _A8        =	$A8
     90  10000 ????
     91  10000 ????		00 a6	    _A6        =	$A6
     92  10000 ????
     93  10000 ????		00 a4	    _A4        =	$A4
     94  10000 ????
     95  10000 ????		00 a2	    _A2        =	$A2
     96  10000 ????
     97  10000 ????		00 a0	    _A0        =	$A0
     98  10000 ????
     99  10000 ????		00 9e	    _9E        =	$9E
    100  10000 ????
    101  10000 ????		00 9c	    _9C        =	$9C
    102  10000 ????
    103  10000 ????		00 9a	    _9A        =	$9A
    104  10000 ????
    105  10000 ????		00 98	    _98        =	$98
    106  10000 ????
    107  10000 ????		00 96	    _96        =	$96
    108  10000 ????
    109  10000 ????		00 94	    _94        =	$94
    110  10000 ????
    111  10000 ????		00 92	    _92        =	$92
    112  10000 ????
    113  10000 ????		00 90	    _90        =	$90
    114  10000 ????
    115  10000 ????		00 8e	    _8E        =	$8E
    116  10000 ????
    117  10000 ????		00 8c	    _8C        =	$8C
    118  10000 ????
    119  10000 ????		00 8a	    _8A        =	$8A
    120  10000 ????
    121  10000 ????		00 88	    _88        =	$88
    122  10000 ????
    123  10000 ????		00 86	    _86        =	$86
    124  10000 ????
    125  10000 ????		00 84	    _84        =	$84
    126  10000 ????
    127  10000 ????		00 82	    _82        =	$82
    128  10000 ????
    129  10000 ????		00 80	    _80        =	$80
    130  10000 ????
    131  10000 ????		00 7e	    _7E        =	$7E
    132  10000 ????
    133  10000 ????		00 7c	    _7C        =	$7C
    134  10000 ????
    135  10000 ????		00 7a	    _7A        =	$7A
    136  10000 ????
    137  10000 ????		00 78	    _78        =	$78
    138  10000 ????
    139  10000 ????		00 76	    _76        =	$76
    140  10000 ????
    141  10000 ????		00 74	    _74        =	$74
    142  10000 ????
    143  10000 ????		00 72	    _72        =	$72
    144  10000 ????
    145  10000 ????		00 70	    _70        =	$70
    146  10000 ????
    147  10000 ????		00 6e	    _6E        =	$6E
    148  10000 ????
    149  10000 ????		00 6c	    _6C        =	$6C
    150  10000 ????
    151  10000 ????		00 6a	    _6A        =	$6A
    152  10000 ????
    153  10000 ????		00 68	    _68        =	$68
    154  10000 ????
    155  10000 ????		00 66	    _66        =	$66
    156  10000 ????
    157  10000 ????		00 64	    _64        =	$64
    158  10000 ????
    159  10000 ????		00 62	    _62        =	$62
    160  10000 ????
    161  10000 ????		00 60	    _60        =	$60
    162  10000 ????
    163  10000 ????		00 5e	    _5E        =	$5E
    164  10000 ????
    165  10000 ????		00 5c	    _5C        =	$5C
    166  10000 ????
    167  10000 ????		00 5a	    _5A        =	$5A
    168  10000 ????
    169  10000 ????		00 58	    _58        =	$58
    170  10000 ????
    171  10000 ????		00 56	    _56        =	$56
    172  10000 ????
    173  10000 ????		00 54	    _54        =	$54
    174  10000 ????
    175  10000 ????		00 52	    _52        =	$52
    176  10000 ????
    177  10000 ????		00 50	    _50        =	$50
    178  10000 ????
    179  10000 ????		00 4e	    _4E        =	$4E
    180  10000 ????
    181  10000 ????		00 4c	    _4C        =	$4C
    182  10000 ????
    183  10000 ????		00 4a	    _4A        =	$4A
    184  10000 ????
    185  10000 ????		00 48	    _48        =	$48
    186  10000 ????
    187  10000 ????		00 46	    _46        =	$46
    188  10000 ????
    189  10000 ????		00 44	    _44        =	$44
    190  10000 ????
    191  10000 ????		00 42	    _42        =	$42
    192  10000 ????
    193  10000 ????		00 40	    _40        =	$40
    194  10000 ????
    195  10000 ????		00 3e	    _3E        =	$3E
    196  10000 ????
    197  10000 ????		00 3c	    _3C        =	$3C
    198  10000 ????
    199  10000 ????		00 3a	    _3A        =	$3A
    200  10000 ????
    201  10000 ????		00 38	    _38        =	$38
    202  10000 ????
    203  10000 ????		00 36	    _36        =	$36
    204  10000 ????
    205  10000 ????		00 34	    _34        =	$34
    206  10000 ????
    207  10000 ????		00 32	    _32        =	$32
    208  10000 ????
    209  10000 ????		00 30	    _30        =	$30
    210  10000 ????
    211  10000 ????		00 2e	    _2E        =	$2E
    212  10000 ????
    213  10000 ????		00 2c	    _2C        =	$2C
    214  10000 ????
    215  10000 ????		00 2a	    _2A        =	$2A
    216  10000 ????
    217  10000 ????		00 28	    _28        =	$28
    218  10000 ????
    219  10000 ????		00 26	    _26        =	$26
    220  10000 ????
    221  10000 ????		00 24	    _24        =	$24
    222  10000 ????
    223  10000 ????		00 22	    _22        =	$22
    224  10000 ????
    225  10000 ????		00 20	    _20        =	$20
    226  10000 ????
    227  10000 ????		00 1e	    _1E        =	$1E
    228  10000 ????
    229  10000 ????		00 1c	    _1C        =	$1C
    230  10000 ????
    231  10000 ????		00 1a	    _1A        =	$1A
    232  10000 ????
    233  10000 ????		00 18	    _18        =	$18
    234  10000 ????
    235  10000 ????		00 16	    _16        =	$16
    236  10000 ????
    237  10000 ????		00 14	    _14        =	$14
    238  10000 ????
    239  10000 ????		00 12	    _12        =	$12
    240  10000 ????
    241  10000 ????		00 10	    _10        =	$10
    242  10000 ????
    243  10000 ????		00 0e	    _0E        =	$0E
    244  10000 ????
    245  10000 ????		00 0c	    _0C        =	$0C
    246  10000 ????
    247  10000 ????		00 0a	    _0A        =	$0A
    248  10000 ????
    249  10000 ????		00 08	    _08        =	$08
    250  10000 ????
    251  10000 ????		00 06	    _06        =	$06
    252  10000 ????
    253  10000 ????		00 04	    _04        =	$04
    254  10000 ????
    255  10000 ????		00 02	    _02        =	$02
    256  10000 ????
    257  10000 ????		00 00	    _00        =	$00
    258  10000 ????
    259  10000 ????		00 08	    pfres      =	8
    260  10000 ????
    261  10000 ????		00 eb	    oldbally   =	x
    262  10000 ????
    263  10000 ????		00 ea	    oldballx   =	w
    264  10000 ????
    265  10000 ????		00 d5	    playerroom =	b
    266  10000 ????
    267  10000 ????		00 d4	    threecount =	a
    268  10000 ????
    269  10000 ????		00 01	    PFcolors   =	1
    270  10000 ????		00 01	    player1colors =	1
    271  10000 ????		00 01	    no_blank_lines =	1
------- FILE e:\Documents\bB\batariBasicGames\demos\kernel_colorplayers.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b					      ifconst	pfres
     61  f01b		       a9 0c		      lda	#(96/pfres)
     62  f01d				  -	      else
     63  f01d				  -	      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 68 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; This is a 2-line kernel!
     96  f034					      ifnconst	vertical_reflect
     97  f034				   kernel
     98  f034					      endif
     99  f034							;sta WSYNC
    100  f034		       a9 ff		      lda	#255
    101  f036		       8d 96 02 	      sta	TIM64T
    102  f039
    103  f039		       a9 01		      lda	#1
    104  f03b		       85 27		      sta	VDELBL
    105  f03d		       85 25		      sta	VDELP0
    106  f03f		       a6 92		      ldx	ballheight
    107  f041		       e8		      inx
    108  f042		       e8		      inx
    109  f043		       86 9f		      stx	temp4
    110  f045		       a5 86		      lda	player1y
    111  f047		       85 9e		      sta	temp3
    112  f049
    113  f049				  -	      ifconst	shakescreen
    114  f049				  -	      jsr	doshakescreen
    115  f049					      else
    116  f049		       a6 90		      ldx	missile0height
    117  f04b		       e8		      inx
    118  f04c					      endif
    119  f04c
    120  f04c		       e8		      inx
    121  f04d		       86 f6		      stx	stack1
    122  f04f
    123  f04f		       a5 89		      lda	bally
    124  f051		       85 f7		      sta	stack2
    125  f053
    126  f053		       a5 85		      lda	player0y
    127  f055		       a2 00		      ldx	#0
    128  f057		       85 02		      sta	WSYNC
    129  f059		       86 1b		      stx	GRP0
    130  f05b		       86 1c		      stx	GRP1
    131  f05d		       86 0e		      stx	PF1L
    132  f05f		       86 0f		      stx	PF2
    133  f061		       86 2c		      stx	CXCLR
    134  f063				  -	      ifconst	readpaddle
    135  f063				  -	      stx	paddle
    136  f063					      else
      0  f063					      sleep	3
      1  f063				   .CYCLES    SET	3
      2  f063
      3  f063				  -	      IF	.CYCLES < 2
      4  f063				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f063				  -	      ERR
      6  f063					      ENDIF
      7  f063
      8  f063					      IF	.CYCLES & 1
      9  f063					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f063		       04 00		      nop	0
     11  f065				  -	      ELSE
     12  f065				  -	      bit	VSYNC
     13  f065					      ENDIF
     14  f065				   .CYCLES    SET	.CYCLES - 3
     15  f065					      ENDIF
     16  f065
     17  f065				  -	      REPEAT	.CYCLES / 2
     18  f065				  -	      nop
     19  f065					      REPEND
    138  f065					      endif
    139  f065
    140  f065		       95 9d		      sta	temp2,x
    141  f067
    142  f067							;store these so they can be retrieved later
    143  f067				  -	      ifnconst	pfres
    144  f067				  -	      ldx	#128-44+(4-pfwidth)*12
    145  f067					      else
    146  f067		       a2 64		      ldx	#132-pfres*pfwidth
    147  f069					      endif
    148  f069
    149  f069		       c6 85		      dec	player0y
    150  f06b
    151  f06b		       a5 91		      lda	missile0y
    152  f06d		       85 a0		      sta	temp5
    153  f06f		       a5 88		      lda	missile1y
    154  f071		       85 a1		      sta	temp6
    155  f073
    156  f073		       a5 ef		      lda	playfieldpos
    157  f075		       85 9c		      sta	temp1
    158  f077
    159  f077				  -	      ifconst	pfrowheight
    160  f077				  -	      lda	#pfrowheight+2
    161  f077					      else
    162  f077				  -	      ifnconst	pfres
    163  f077				  -	      lda	#10
    164  f077					      else
    165  f077		       a9 0e		      lda	#(96/pfres)+2	; try to come close to the real size
    166  f079					      endif
    167  f079					      endif
    168  f079		       18		      clc
    169  f07a		       e5 ef		      sbc	playfieldpos
    170  f07c		       85 ef		      sta	playfieldpos
    171  f07e		       4c a6 f0 	      jmp	.startkernel
    172  f081
    173  f081				   .skipDrawP0
    174  f081		       a9 00		      lda	#0
    175  f083		       a8		      tay
    176  f084		       4c d5 f0 	      jmp	.continueP0
    177  f087
    178  f087				   .skipDrawP1
    179  f087		       a9 00		      lda	#0
    180  f089		       a8		      tay
    181  f08a		       4c b0 f0 	      jmp	.continueP1
    182  f08d
    183  f08d				   .kerloop		; enter at cycle 59??
    184  f08d
    185  f08d				   continuekernel
    186  f08d				   continuekernel2
    187  f08d		       b1 90		      lda	(player0color),y	; 5
    188  f08f
    189  f08f					      ifconst	pfres
    190  f08f		       b4 50		      ldy	playfield+pfres*pfwidth-132,x
    191  f091		       84 0e		      sty	PF1L	;3
    192  f093		       b4 51		      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    193  f095		       84 0f		      sty	PF2L	;3
    194  f097		       b4 53		      ldy	playfield+pfres*pfwidth-129,x
    195  f099		       84 0e		      sty	PF1R	; 3 too early?
    196  f09b							;ldy playfield+pfres*pfwidth-130-pfadjust,x
    197  f09b							;sty PF2R ;3
    198  f09b				  -	      else
    199  f09b				  -	      ldy	playfield-48+pfwidth*12+44-128,x
    200  f09b				  -	      sty	PF1L	;3
    201  f09b				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    202  f09b				  -	      sty	PF2L	;3
    203  f09b				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
    204  f09b				  -	      sty	PF1R	; 3 too early?
    205  f09b				  -			;ldy playfield-48+pfwidth*12+46-128-pfadjust,x;4
    206  f09b				  -			;sty PF2R ;3
    207  f09b					      endif
    208  f09b
    209  f09b		       8d 82 00 	      sta.w	player0colorstore	;4
    210  f09e		       a5 92		      lda	ballheight	;3
    211  f0a0
    212  f0a0							; should be playfield+$38 for width=2
    213  f0a0
    214  f0a0		       c7 89		      dcp	bally
    215  f0a2		       2a		      rol
    216  f0a3		       2a		      rol
    217  f0a4				   goback
    218  f0a4		       85 1f		      sta	ENABL
    219  f0a6				   .startkernel
    220  f0a6		       a5 8f		      lda	player1height	;3
    221  f0a8		       c7 86		      dcp	player1y	;5
    222  f0aa		       90 db		      bcc	.skipDrawP1	;2
    223  f0ac		       a4 86		      ldy	player1y	;3
    224  f0ae		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    225  f0b0							; so it doesn't cross a page boundary!
    226  f0b0
    227  f0b0				   .continueP1
    228  f0b0		       85 1c		      sta	GRP1	;3
    229  f0b2
    230  f0b2				  -	      ifnconst	player1colors
    231  f0b2				  -	      lda	missile1height	;3
    232  f0b2				  -	      dcp	missile1y	;5
    233  f0b2				  -	      rol		;2
    234  f0b2				  -	      rol		;2
    235  f0b2				  -	      sta	ENAM1	;3
    236  f0b2					      else
    237  f0b2		       b1 87		      lda	(player1color),y
    238  f0b4		       85 07		      sta	COLUP1
    239  f0b6					      ifnconst	playercolors
    240  f0b6							;color hack
    241  f0b6							;sleep 7
    242  f0b6		       ad 82 00 	      lda.w	player0colorstore
    243  f0b9		       85 06		      sta	COLUP0
    244  f0bb				  -	      else
    245  f0bb				  -	      lda.w	player0colorstore
    246  f0bb				  -	      sta	COLUP0
    247  f0bb					      endif
    248  f0bb					      endif
    249  f0bb
    250  f0bb					      ifconst	pfres
    251  f0bb		       b5 50		      lda	playfield+pfres*pfwidth-132,x
    252  f0bd		       85 0e		      sta	PF1L	;3
    253  f0bf		       b5 51		      lda	playfield+pfres*pfwidth-131-pfadjust,x
    254  f0c1		       85 0f		      sta	PF2L	;3
    255  f0c3		       b5 53		      lda	playfield+pfres*pfwidth-129,x
    256  f0c5		       85 0e		      sta	PF1R	; 3 too early?
    257  f0c7							;lda playfield+pfres*pfwidth-130-pfadjust,x 
    258  f0c7							;sta PF2R ;3
    259  f0c7				  -	      else
    260  f0c7				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
    261  f0c7				  -	      sta	PF1L	;3
    262  f0c7				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    263  f0c7				  -	      sta	PF2L	;3
    264  f0c7				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
    265  f0c7				  -	      sta	PF1R	; 3 too early?
    266  f0c7				  -			;lda playfield-48+pfwidth*12+46-128-pfadjust,x;4
    267  f0c7				  -			;sta PF2R ;3
    268  f0c7					      endif
    269  f0c7
      0  f0c7					      sleep	7
      1  f0c7				   .CYCLES    SET	7
      2  f0c7
      3  f0c7				  -	      IF	.CYCLES < 2
      4  f0c7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c7				  -	      ERR
      6  f0c7					      ENDIF
      7  f0c7
      8  f0c7					      IF	.CYCLES & 1
      9  f0c7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c7		       04 00		      nop	0
     11  f0c9				  -	      ELSE
     12  f0c9				  -	      bit	VSYNC
     13  f0c9					      ENDIF
     14  f0c9				   .CYCLES    SET	.CYCLES - 3
     15  f0c9					      ENDIF
     16  f0c9
     17  f0c9					      REPEAT	.CYCLES / 2
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     19  f0cb					      REPEND
    271  f0cb
    272  f0cb		       a5 8e		      lda	player0height
    273  f0cd		       c7 85		      dcp	player0y
    274  f0cf		       90 b0		      bcc	.skipDrawP0
    275  f0d1		       a4 85		      ldy	player0y
    276  f0d3		       b1 8a		      lda	(player0pointer),y
    277  f0d5				   .continueP0
    278  f0d5		       85 1b		      sta	GRP0
    279  f0d7
    280  f0d7				  -	      ifnconst	no_blank_lines
    281  f0d7				  -	      ifnconst	playercolors
    282  f0d7				  -	      lda	missile0height	;3
    283  f0d7				  -	      dcp	missile0y	;5
    284  f0d7				  -	      sbc	stack1	;3
    285  f0d7				  -	      sta	ENAM0	;3
    286  f0d7				  -	      else
    287  f0d7				  -	      lda	(player0color),y
    288  f0d7				  -	      sta	player0colorstore
    289  f0d7				  -	      sleep	6
    290  f0d7				  -	      endif
    291  f0d7				  -	      dec	temp1
    292  f0d7				  -	      bne	continuekernel
    293  f0d7					      else
    294  f0d7		       c6 9c		      dec	temp1
    295  f0d9		       f0 0c		      beq	altkernel2
    296  f0db				  -	      ifconst	readpaddle
    297  f0db				  -	      ldy	currentpaddle
    298  f0db				  -	      lda	INPT0,y
    299  f0db				  -	      bpl	noreadpaddle
    300  f0db				  -	      inc	paddle
    301  f0db				  -	      jmp	continuekernel2
    302  f0db				  -noreadpaddle
    303  f0db				  -	      sleep	2
    304  f0db				  -	      jmp	continuekernel
    305  f0db					      else
    306  f0db					      ifnconst	playercolors
    307  f0db					      ifconst	PFcolors
    308  f0db		       8a		      txa
    309  f0dc		       a8		      tay
    310  f0dd		       b1 f0		      lda	(pfcolortable),y
    311  f0df					      ifnconst	backgroundchange
    312  f0df		       85 08		      sta	COLUPF
    313  f0e1				  -	      else
    314  f0e1				  -	      sta	COLUBK
    315  f0e1					      endif
    316  f0e1		       4c 8d f0 	      jmp	continuekernel
    317  f0e4				  -	      else
    318  f0e4				  -	      ifconst	kernelmacrodef
    319  f0e4				  -	      kernelmacro
    320  f0e4				  -	      else
    321  f0e4				  -	      sleep	12
    322  f0e4				  -	      endif
    323  f0e4					      endif
    324  f0e4				  -	      else
    325  f0e4				  -	      lda	(player0color),y
    326  f0e4				  -	      sta	player0colorstore
    327  f0e4				  -	      sleep	4
    328  f0e4					      endif
    329  f0e4		       4c 8d f0 	      jmp	continuekernel
    330  f0e7					      endif
    331  f0e7				   altkernel2
    332  f0e7		       8a		      txa
    333  f0e8					      ifnconst	vertical_reflect
    334  f0e8		       cb fc		      sbx	#256-pfwidth
    335  f0ea				  -	      else
    336  f0ea				  -	      sbx	#256-pfwidth/2
    337  f0ea					      endif
    338  f0ea		       30 24		      bmi	lastkernelline
    339  f0ec				  -	      ifconst	pfrowheight
    340  f0ec				  -	      lda	#pfrowheight
    341  f0ec					      else
    342  f0ec				  -	      ifnconst	pfres
    343  f0ec				  -	      lda	#8
    344  f0ec					      else
    345  f0ec		       a9 0c		      lda	#(96/pfres)	; try to come close to the real size
    346  f0ee					      endif
    347  f0ee					      endif
    348  f0ee		       85 9c		      sta	temp1
    349  f0f0		       4c 8d f0 	      jmp	continuekernel
    350  f0f3					      endif
    351  f0f3
    352  f0f3				   altkernel
    353  f0f3
    354  f0f3				  -	      ifconst	PFmaskvalue
    355  f0f3				  -	      lda	#PFmaskvalue
    356  f0f3					      else
    357  f0f3		       a9 00		      lda	#0
    358  f0f5					      endif
    359  f0f5		       85 0e		      sta	PF1L
    360  f0f7		       85 0f		      sta	PF2
    361  f0f9
    362  f0f9
    363  f0f9							;sleep 3
    364  f0f9
    365  f0f9							;28 cycles to fix things
    366  f0f9							;minus 11=17
    367  f0f9
    368  f0f9							; lax temp4
    369  f0f9							; clc
    370  f0f9		       8a		      txa
    371  f0fa					      ifnconst	vertical_reflect
    372  f0fa		       cb fc		      sbx	#256-pfwidth
    373  f0fc				  -	      else
    374  f0fc				  -	      sbx	#256-pfwidth/2
    375  f0fc					      endif
    376  f0fc
    377  f0fc		       30 12		      bmi	lastkernelline
    378  f0fe
    379  f0fe				  -	      ifconst	PFcolorandheight
    380  f0fe				  -	      ifconst	pfres
    381  f0fe				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    382  f0fe				  -	      else
    383  f0fe				  -	      ldy	playfieldcolorandheight-87,x
    384  f0fe				  -	      endif
    385  f0fe				  -	      ifnconst	backgroundchange
    386  f0fe				  -	      sty	COLUPF
    387  f0fe				  -	      else
    388  f0fe				  -	      sty	COLUBK
    389  f0fe				  -	      endif
    390  f0fe				  -	      ifconst	pfres
    391  f0fe				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    392  f0fe				  -	      else
    393  f0fe				  -	      lda	playfieldcolorandheight-88,x
    394  f0fe				  -	      endif
    395  f0fe				  -	      sta.w	temp1
    396  f0fe					      endif
    397  f0fe				  -	      ifconst	PFheights
    398  f0fe				  -	      lsr
    399  f0fe				  -	      lsr
    400  f0fe				  -	      tay
    401  f0fe				  -	      lda	(pfheighttable),y
    402  f0fe				  -	      sta.w	temp1
    403  f0fe					      endif
    404  f0fe					      ifconst	PFcolors
    405  f0fe		       a8		      tay
    406  f0ff		       b1 f0		      lda	(pfcolortable),y
    407  f101					      ifnconst	backgroundchange
    408  f101		       85 08		      sta	COLUPF
    409  f103				  -	      else
    410  f103				  -	      sta	COLUBK
    411  f103					      endif
    412  f103				  -	      ifconst	pfrowheight
    413  f103				  -	      lda	#pfrowheight
    414  f103					      else
    415  f103				  -	      ifnconst	pfres
    416  f103				  -	      lda	#8
    417  f103					      else
    418  f103		       a9 0c		      lda	#(96/pfres)	; try to come close to the real size
    419  f105					      endif
    420  f105					      endif
    421  f105		       85 9c		      sta	temp1
    422  f107					      endif
    423  f107					      ifnconst	PFcolorandheight
    424  f107				  -	      ifnconst	PFcolors
    425  f107				  -	      ifnconst	PFheights
    426  f107				  -	      ifnconst	no_blank_lines
    427  f107				  -			; read paddle 0
    428  f107				  -			; lo-res paddle read
    429  f107				  -			; bit INPT0
    430  f107				  -			; bmi paddleskipread
    431  f107				  -			; inc paddle0
    432  f107				  -			;donepaddleskip
    433  f107				  -	      sleep	10
    434  f107				  -	      ifconst	pfrowheight
    435  f107				  -	      lda	#pfrowheight
    436  f107				  -	      else
    437  f107				  -	      ifnconst	pfres
    438  f107				  -	      lda	#8
    439  f107				  -	      else
    440  f107				  -	      lda	#(96/pfres)	; try to come close to the real size
    441  f107				  -	      endif
    442  f107				  -	      endif
    443  f107				  -	      sta	temp1
    444  f107				  -	      endif
    445  f107				  -	      endif
    446  f107					      endif
    447  f107					      endif
    448  f107
    449  f107
    450  f107		       a5 92		      lda	ballheight
    451  f109		       c7 89		      dcp	bally
    452  f10b		       e5 9f		      sbc	temp4
    453  f10d
    454  f10d
    455  f10d		       4c a4 f0 	      jmp	goback
    456  f110
    457  f110
    458  f110				  -	      ifnconst	no_blank_lines
    459  f110				  -lastkernelline
    460  f110				  -	      ifnconst	PFcolors
    461  f110				  -	      sleep	10
    462  f110				  -	      else
    463  f110				  -	      ldy	#124
    464  f110				  -	      lda	(pfcolortable),y
    465  f110				  -	      sta	COLUPF
    466  f110				  -	      endif
    467  f110				  -
    468  f110				  -	      ifconst	PFheights
    469  f110				  -	      ldx	#1
    470  f110				  -	      sleep	4
    471  f110				  -	      else
    472  f110				  -	      ldx	playfieldpos
    473  f110				  -	      sleep	3
    474  f110				  -	      endif
    475  f110				  -
    476  f110				  -	      jmp	enterlastkernel
    477  f110				  -
    478  f110					      else
    479  f110				   lastkernelline
    480  f110
    481  f110				  -	      ifconst	PFheights
    482  f110				  -	      ldx	#1
    483  f110				  -	      sleep	5
    484  f110					      else
    485  f110		       a6 ef		      ldx	playfieldpos
      0  f112					      sleep	4
      1  f112				   .CYCLES    SET	4
      2  f112
      3  f112				  -	      IF	.CYCLES < 2
      4  f112				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f112				  -	      ERR
      6  f112					      ENDIF
      7  f112
      8  f112				  -	      IF	.CYCLES & 1
      9  f112				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f112				  -	      nop	0
     11  f112				  -	      ELSE
     12  f112				  -	      bit	VSYNC
     13  f112				  -	      ENDIF
     14  f112				  -.CYCLES    SET	.CYCLES - 3
     15  f112					      ENDIF
     16  f112
     17  f112					      REPEAT	.CYCLES / 2
     18  f112		       ea		      nop
     17  f112					      REPEND
     18  f113		       ea		      nop
     19  f114					      REPEND
    487  f114					      endif
    488  f114
    489  f114		       e0 01		      cpx	#1
    490  f116		       d0 0a		      bne	.enterfromNBL
    491  f118		       4c 83 f1 	      jmp	no_blank_lines_bailout
    492  f11b					      endif
    493  f11b
    494  f11b				  -	      if	((<*)>$d5)
    495  f11b				  -	      align	256
    496  f11b					      endif
    497  f11b							; this is a kludge to prevent page wrapping - fix!!!
    498  f11b
    499  f11b				   .skipDrawlastP1
      0  f11b					      sleep	2
      1  f11b				   .CYCLES    SET	2
      2  f11b
      3  f11b				  -	      IF	.CYCLES < 2
      4  f11b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f11b				  -	      ERR
      6  f11b					      ENDIF
      7  f11b
      8  f11b				  -	      IF	.CYCLES & 1
      9  f11b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f11b				  -	      nop	0
     11  f11b				  -	      ELSE
     12  f11b				  -	      bit	VSYNC
     13  f11b				  -	      ENDIF
     14  f11b				  -.CYCLES    SET	.CYCLES - 3
     15  f11b					      ENDIF
     16  f11b
     17  f11b					      REPEAT	.CYCLES / 2
     18  f11b		       ea		      nop
     19  f11c					      REPEND
    501  f11c		       a9 00		      lda	#0
    502  f11e		       4c 48 f1 	      jmp	.continuelastP1
    503  f121
    504  f121				   .endkerloop		; enter at cycle 59??
    505  f121
    506  f121		       ea		      nop
    507  f122
    508  f122				   .enterfromNBL
    509  f122					      ifconst	pfres
    510  f122		       ac d0 00 	      ldy.w	playfield+pfres*pfwidth-4
    511  f125		       84 0e		      sty	PF1L	;3
    512  f127		       ac d1 00 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    513  f12a		       84 0f		      sty	PF2L	;3
    514  f12c		       ac d3 00 	      ldy.w	playfield+pfres*pfwidth-1
    515  f12f		       84 0e		      sty	PF1R	; possibly too early?
    516  f131		       ac d2 00 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    517  f134		       84 0f		      sty	PF2R	;3
    518  f136				  -	      else
    519  f136				  -	      ldy.w	playfield-48+pfwidth*12+44
    520  f136				  -	      sty	PF1L	;3
    521  f136				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    522  f136				  -	      sty	PF2L	;3
    523  f136				  -	      ldy.w	playfield-48+pfwidth*12+47
    524  f136				  -	      sty	PF1R	; possibly too early?
    525  f136				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    526  f136				  -	      sty	PF2R	;3
    527  f136					      endif
    528  f136
    529  f136				   enterlastkernel
    530  f136		       a5 92		      lda	ballheight
    531  f138
    532  f138							; tya
    533  f138		       c7 89		      dcp	bally
    534  f13a							; sleep 4
    535  f13a
    536  f13a							; sbc stack3
    537  f13a		       2a		      rol
    538  f13b		       2a		      rol
    539  f13c		       85 1f		      sta	ENABL
    540  f13e
    541  f13e		       a5 8f		      lda	player1height	;3
    542  f140		       c7 86		      dcp	player1y	;5
    543  f142		       90 d7		      bcc	.skipDrawlastP1
    544  f144		       a4 86		      ldy	player1y	;3
    545  f146		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    546  f148							; so it doesn't cross a page boundary!
    547  f148
    548  f148				   .continuelastP1
    549  f148		       85 1c		      sta	GRP1	;3
    550  f14a
    551  f14a				  -	      ifnconst	player1colors
    552  f14a				  -	      lda	missile1height	;3
    553  f14a				  -	      dcp	missile1y	;5
    554  f14a					      else
    555  f14a		       b1 87		      lda	(player1color),y
    556  f14c		       85 07		      sta	COLUP1
    557  f14e					      endif
    558  f14e
    559  f14e		       ca		      dex
    560  f14f							;dec temp4 ; might try putting this above PF writes
    561  f14f		       f0 34		      beq	endkernel
    562  f151
    563  f151
    564  f151					      ifconst	pfres
    565  f151		       ac d0 00 	      ldy.w	playfield+pfres*pfwidth-4
    566  f154		       84 0e		      sty	PF1L	;3
    567  f156		       ac d1 00 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    568  f159		       84 0f		      sty	PF2L	;3
    569  f15b		       ac d3 00 	      ldy.w	playfield+pfres*pfwidth-1
    570  f15e		       84 0e		      sty	PF1R	; possibly too early?
    571  f160		       ac d2 00 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    572  f163		       84 0f		      sty	PF2R	;3
    573  f165				  -	      else
    574  f165				  -	      ldy.w	playfield-48+pfwidth*12+44
    575  f165				  -	      sty	PF1L	;3
    576  f165				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    577  f165				  -	      sty	PF2L	;3
    578  f165				  -	      ldy.w	playfield-48+pfwidth*12+47
    579  f165				  -	      sty	PF1R	; possibly too early?
    580  f165				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    581  f165				  -	      sty	PF2R	;3
    582  f165					      endif
    583  f165
    584  f165				  -	      ifnconst	player1colors
    585  f165				  -	      rol		;2
    586  f165				  -	      rol		;2
    587  f165				  -	      sta	ENAM1	;3
    588  f165					      else
    589  f165					      ifnconst	playercolors
      0  f165					      sleep	7
      1  f165				   .CYCLES    SET	7
      2  f165
      3  f165				  -	      IF	.CYCLES < 2
      4  f165				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f165				  -	      ERR
      6  f165					      ENDIF
      7  f165
      8  f165					      IF	.CYCLES & 1
      9  f165					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f165		       04 00		      nop	0
     11  f167				  -	      ELSE
     12  f167				  -	      bit	VSYNC
     13  f167					      ENDIF
     14  f167				   .CYCLES    SET	.CYCLES - 3
     15  f167					      ENDIF
     16  f167
     17  f167					      REPEAT	.CYCLES / 2
     18  f167		       ea		      nop
     17  f167					      REPEND
     18  f168		       ea		      nop
     19  f169					      REPEND
    591  f169				  -	      else
    592  f169				  -	      lda.w	player0colorstore
    593  f169				  -	      sta	COLUP0
    594  f169					      endif
    595  f169					      endif
    596  f169
    597  f169		       ad 8e 00 	      lda.w	player0height
    598  f16c		       c7 85		      dcp	player0y
    599  f16e		       90 0d		      bcc	.skipDrawlastP0
    600  f170		       a4 85		      ldy	player0y
    601  f172		       b1 8a		      lda	(player0pointer),y
    602  f174				   .continuelastP0
    603  f174		       85 1b		      sta	GRP0
    604  f176
    605  f176
    606  f176
    607  f176				  -	      ifnconst	no_blank_lines
    608  f176				  -	      lda	missile0height	;3
    609  f176				  -	      dcp	missile0y	;5
    610  f176				  -	      sbc	stack1
    611  f176				  -	      sta	ENAM0	;3
    612  f176				  -	      jmp	.endkerloop
    613  f176					      else
    614  f176				  -	      ifconst	readpaddle
    615  f176				  -	      ldy	currentpaddle
    616  f176				  -	      lda	INPT0,y
    617  f176				  -	      bpl	noreadpaddle2
    618  f176				  -	      inc	paddle
    619  f176				  -	      jmp	.endkerloop
    620  f176				  -noreadpaddle2
    621  f176				  -	      sleep	4
    622  f176				  -	      jmp	.endkerloop
    623  f176					      else		; no_blank_lines and no paddle reading
    624  f176		       68		      pla
    625  f177		       48		      pha		; 14 cycles in 4 bytes
    626  f178		       68		      pla
    627  f179		       48		      pha
    628  f17a							; sleep 14
    629  f17a		       4c 21 f1 	      jmp	.endkerloop
    630  f17d					      endif
    631  f17d					      endif
    632  f17d
    633  f17d				   .skipDrawlastP0
      0  f17d					      sleep	2
      1  f17d				   .CYCLES    SET	2
      2  f17d
      3  f17d				  -	      IF	.CYCLES < 2
      4  f17d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f17d				  -	      ERR
      6  f17d					      ENDIF
      7  f17d
      8  f17d				  -	      IF	.CYCLES & 1
      9  f17d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f17d				  -	      nop	0
     11  f17d				  -	      ELSE
     12  f17d				  -	      bit	VSYNC
     13  f17d				  -	      ENDIF
     14  f17d				  -.CYCLES    SET	.CYCLES - 3
     15  f17d					      ENDIF
     16  f17d
     17  f17d					      REPEAT	.CYCLES / 2
     18  f17d		       ea		      nop
     19  f17e					      REPEND
    635  f17e		       a9 00		      lda	#0
    636  f180		       4c 74 f1 	      jmp	.continuelastP0
    637  f183
    638  f183					      ifconst	no_blank_lines
    639  f183				   no_blank_lines_bailout
    640  f183		       a2 00		      ldx	#0
    641  f185					      endif
    642  f185
    643  f185				   endkernel
    644  f185							; 6 digit score routine
    645  f185		       86 0e		      stx	PF1
    646  f187		       86 0f		      stx	PF2
    647  f189		       86 0d		      stx	PF0
    648  f18b		       18		      clc
    649  f18c
    650  f18c				  -	      ifconst	pfrowheight
    651  f18c				  -	      lda	#pfrowheight+2
    652  f18c					      else
    653  f18c				  -	      ifnconst	pfres
    654  f18c				  -	      lda	#10
    655  f18c					      else
    656  f18c		       a9 0e		      lda	#(96/pfres)+2	; try to come close to the real size
    657  f18e					      endif
    658  f18e					      endif
    659  f18e
    660  f18e		       e5 ef		      sbc	playfieldpos
    661  f190		       85 ef		      sta	playfieldpos
    662  f192		       8a		      txa
    663  f193
    664  f193				  -	      ifconst	shakescreen
    665  f193				  -	      bit	shakescreen
    666  f193				  -	      bmi	noshakescreen2
    667  f193				  -	      ldx	#$3D
    668  f193				  -noshakescreen2
    669  f193					      endif
    670  f193
    671  f193		       95 02		      sta	WSYNC,x
    672  f195
    673  f195							;		  STA WSYNC ;first one, need one more
    674  f195		       85 0b		      sta	REFP0
    675  f197		       85 0c		      sta	REFP1
    676  f199		       85 1b		      STA	GRP0
    677  f19b		       85 1c		      STA	GRP1
    678  f19d							;		 STA PF1
    679  f19d							;	       STA PF2
    680  f19d		       85 2b		      sta	HMCLR
    681  f19f		       85 1d		      sta	ENAM0
    682  f1a1		       85 1e		      sta	ENAM1
    683  f1a3		       85 1f		      sta	ENABL
    684  f1a5
    685  f1a5		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    686  f1a7		       85 85		      sta	player0y
    687  f1a9		       a5 9e		      lda	temp3
    688  f1ab		       85 86		      sta	player1y
    689  f1ad				  -	      ifnconst	player1colors
    690  f1ad				  -	      lda	temp6
    691  f1ad				  -	      sta	missile1y
    692  f1ad					      endif
    693  f1ad					      ifnconst	playercolors
    694  f1ad					      ifnconst	readpaddle
    695  f1ad		       a5 a0		      lda	temp5
    696  f1af		       85 91		      sta	missile0y
    697  f1b1					      endif
    698  f1b1					      endif
    699  f1b1		       a5 f7		      lda	stack2
    700  f1b3		       85 89		      sta	bally
    701  f1b5
    702  f1b5					      ifconst	no_blank_lines
    703  f1b5		       85 02		      sta	WSYNC
    704  f1b7					      endif
    705  f1b7
    706  f1b7		       ad 84 02 	      lda	INTIM
    707  f1ba		       18		      clc
    708  f1bb					      ifnconst	vblank_time
    709  f1bb							;adc #43+12+87
    710  f1bb		       69 8f		      adc	#43+12+88
    711  f1bd				  -	      else
    712  f1bd				  -			;adc #vblank_time+12+87
    713  f1bd				  -	      adc	#vblank_time+12+88
    714  f1bd					      endif
    715  f1bd							; sta WSYNC
    716  f1bd		       8d 96 02 	      sta	TIM64T
    717  f1c0
    718  f1c0				  -	      ifconst	minikernel
    719  f1c0				  -	      jsr	minikernel
    720  f1c0					      endif
    721  f1c0
    722  f1c0							; now reassign temp vars for score pointers
    723  f1c0
    724  f1c0							; score pointers contain:
    725  f1c0							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    726  f1c0							; swap lo2->temp1
    727  f1c0							; swap lo4->temp3
    728  f1c0							; swap lo6->temp5
    729  f1c0					      ifnconst	noscore
    730  f1c0		       a5 97		      lda	scorepointers+1
    731  f1c2							; ldy temp1
    732  f1c2		       85 9c		      sta	temp1
    733  f1c4							; sty scorepointers+1
    734  f1c4
    735  f1c4		       a5 99		      lda	scorepointers+3
    736  f1c6							; ldy temp3
    737  f1c6		       85 9e		      sta	temp3
    738  f1c8							; sty scorepointers+3
    739  f1c8
    740  f1c8
    741  f1c8		       85 2b		      sta	HMCLR
    742  f1ca		       ba		      tsx
    743  f1cb		       86 f6		      stx	stack1
    744  f1cd		       a2 e0		      ldx	#$E0
    745  f1cf		       86 20		      stx	HMP0
    746  f1d1
    747  f1d1		       a5 a3		      LDA	scorecolor
    748  f1d3		       85 06		      STA	COLUP0
    749  f1d5		       85 07		      STA	COLUP1
    750  f1d7				  -	      ifconst	scorefade
    751  f1d7				  -	      STA	stack2
    752  f1d7					      endif
    753  f1d7
    754  f1d7				  -	      ifconst	pfscore
    755  f1d7				  -	      lda	pfscorecolor
    756  f1d7				  -	      sta	COLUPF
    757  f1d7					      endif
    758  f1d7		       85 02		      sta	WSYNC
    759  f1d9		       a2 00		      ldx	#0
    760  f1db		       86 1b		      STx	GRP0
    761  f1dd		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    762  f1df
    763  f1df		       a5 9b		      lda	scorepointers+5
    764  f1e1							; ldy temp5
    765  f1e1		       95 a0		      sta	temp5,x
    766  f1e3							; sty scorepointers+5
    767  f1e3		       a9 ff		      lda	#>scoretable
    768  f1e5		       85 97		      sta	scorepointers+1
    769  f1e7		       85 99		      sta	scorepointers+3
    770  f1e9		       85 9b		      sta	scorepointers+5
    771  f1eb		       85 9d		      sta	temp2
    772  f1ed		       85 9f		      sta	temp4
    773  f1ef		       85 a1		      sta	temp6
    774  f1f1		       a0 07		      LDY	#7
    775  f1f3		       84 25		      STY	VDELP0
    776  f1f5		       85 10		      STA	RESP0
    777  f1f7		       85 11		      STA	RESP1
    778  f1f9
    779  f1f9
    780  f1f9		       a9 03		      LDA	#$03
    781  f1fb		       85 04		      STA	NUSIZ0
    782  f1fd		       85 05		      STA	NUSIZ1
    783  f1ff		       85 26		      STA	VDELP1
    784  f201		       a9 f0		      LDA	#$F0
    785  f203		       85 21		      STA	HMP1
    786  f205		       b1 96		      lda	(scorepointers),y
    787  f207		       85 1b		      sta	GRP0
    788  f209		       85 2a		      STA	HMOVE	; cycle 73 ?
    789  f20b		       4c 16 f2 	      jmp	beginscore
    790  f20e
    791  f20e
    792  f20e				  -	      if	((<*)>$d4)
    793  f20e				  -	      align	256	; kludge that potentially wastes space!  should be fixed!
    794  f20e					      endif
    795  f20e
    796  f20e				   loop2
    797  f20e		       b1 96		      lda	(scorepointers),y	;+5  68  204
    798  f210		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
    799  f212				  -	      ifconst	pfscore
    800  f212				  -	      lda.w	pfscore1
    801  f212				  -	      sta	PF1
    802  f212					      else
    803  f212				  -	      ifconst	scorefade
    804  f212				  -	      sleep	2
    805  f212				  -	      dec	stack2	; decrement the temp scorecolor
    806  f212					      else
      0  f212					      sleep	7
      1  f212				   .CYCLES    SET	7
      2  f212
      3  f212				  -	      IF	.CYCLES < 2
      4  f212				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f212				  -	      ERR
      6  f212					      ENDIF
      7  f212
      8  f212					      IF	.CYCLES & 1
      9  f212					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f212		       04 00		      nop	0
     11  f214				  -	      ELSE
     12  f214				  -	      bit	VSYNC
     13  f214					      ENDIF
     14  f214				   .CYCLES    SET	.CYCLES - 3
     15  f214					      ENDIF
     16  f214
     17  f214					      REPEAT	.CYCLES / 2
     18  f214		       ea		      nop
     17  f214					      REPEND
     18  f215		       ea		      nop
     19  f216					      REPEND
    808  f216					      endif
    809  f216					      endif
    810  f216							; cycle 0
    811  f216				   beginscore
    812  f216		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
    813  f218		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    814  f21a		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
    815  f21c		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    816  f21e		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
    817  f220		       9a		      txs
    818  f221		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
    819  f223				  -	      ifconst	scorefade
    820  f223				  -	      lda	stack2	; load the temp scorecolor
    821  f223					      else
      0  f223					      sleep	3
      1  f223				   .CYCLES    SET	3
      2  f223
      3  f223				  -	      IF	.CYCLES < 2
      4  f223				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f223				  -	      ERR
      6  f223					      ENDIF
      7  f223
      8  f223					      IF	.CYCLES & 1
      9  f223					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f223		       04 00		      nop	0
     11  f225				  -	      ELSE
     12  f225				  -	      bit	VSYNC
     13  f225					      ENDIF
     14  f225				   .CYCLES    SET	.CYCLES - 3
     15  f225					      ENDIF
     16  f225
     17  f225				  -	      REPEAT	.CYCLES / 2
     18  f225				  -	      nop
     19  f225					      REPEND
    823  f225					      endif
    824  f225
    825  f225				  -	      ifconst	pfscore
    826  f225				  -	      lda	pfscore2
    827  f225				  -	      sta	PF1
    828  f225					      else
    829  f225				  -	      ifconst	scorefade
    830  f225				  -	      sta	COLUP0
    831  f225				  -	      sta	COLUP1
    832  f225					      else
      0  f225					      sleep	6
      1  f225				   .CYCLES    SET	6
      2  f225
      3  f225				  -	      IF	.CYCLES < 2
      4  f225				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f225				  -	      ERR
      6  f225					      ENDIF
      7  f225
      8  f225				  -	      IF	.CYCLES & 1
      9  f225				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f225				  -	      nop	0
     11  f225				  -	      ELSE
     12  f225				  -	      bit	VSYNC
     13  f225				  -	      ENDIF
     14  f225				  -.CYCLES    SET	.CYCLES - 3
     15  f225					      ENDIF
     16  f225
     17  f225					      REPEAT	.CYCLES / 2
     18  f225		       ea		      nop
     17  f225					      REPEND
     18  f226		       ea		      nop
     17  f226					      REPEND
     18  f227		       ea		      nop
     19  f228					      REPEND
    834  f228					      endif
    835  f228					      endif
    836  f228
    837  f228		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63
    838  f22a		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    839  f22c		       ba		      tsx
    840  f22d		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    841  f22f		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    842  f231		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    843  f233		       88		      dey
    844  f234		       10 d8		      bpl	loop2	;+2  60  180
    845  f236
    846  f236		       a6 f6		      ldx	stack1
    847  f238		       9a		      txs
    848  f239							; lda scorepointers+1
    849  f239		       a4 9c		      ldy	temp1
    850  f23b							; sta temp1
    851  f23b		       84 97		      sty	scorepointers+1
    852  f23d
    853  f23d		       a9 00		      LDA	#0
    854  f23f		       85 0e		      sta	PF1
    855  f241		       85 1b		      STA	GRP0
    856  f243		       85 1c		      STA	GRP1
    857  f245		       85 25		      STA	VDELP0
    858  f247		       85 26		      STA	VDELP1	;do we need these
    859  f249		       85 04		      STA	NUSIZ0
    860  f24b		       85 05		      STA	NUSIZ1
    861  f24d
    862  f24d							; lda scorepointers+3
    863  f24d		       a4 9e		      ldy	temp3
    864  f24f							; sta temp3
    865  f24f		       84 99		      sty	scorepointers+3
    866  f251
    867  f251							; lda scorepointers+5
    868  f251		       a4 a0		      ldy	temp5
    869  f253							; sta temp5
    870  f253		       84 9b		      sty	scorepointers+5
    871  f255					      endif		;noscore
    872  f255		       a9 c2		      LDA	#%11000010
    873  f257		       85 02		      sta	WSYNC
    874  f259		       85 01		      STA	VBLANK
      0  f25b					      RETURN
      1  f25b					      ifnconst	bankswitch
      2  f25b		       60		      rts
      3  f25c				  -	      else
      4  f25c				  -	      jmp	BS_return
      5  f25c					      endif
    876  f25c
    877  f25c				  -	      ifconst	shakescreen
    878  f25c				  -doshakescreen
    879  f25c				  -	      bit	shakescreen
    880  f25c				  -	      bmi	noshakescreen
    881  f25c				  -	      sta	WSYNC
    882  f25c				  -noshakescreen
    883  f25c				  -	      ldx	missile0height
    884  f25c				  -	      inx
    885  f25c				  -	      rts
    886  f25c					      endif
    887  f25c
    888  f25c							; Provided under the CC0 license. See the included LICENSE.txt for details.
    889  f25c
    890  f25c							; playfield drawing routines
    891  f25c							; you get a 32x12 bitmapped display in a single color :)
    892  f25c							; 0-31 and 0-11
    893  f25c
    894  f25c				   pfclear		; clears playfield - or fill with pattern
    895  f25c					      ifconst	pfres
    896  f25c		       a2 1f		      ldx	#pfres*pfwidth-1
    897  f25e				  -	      else
    898  f25e				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
    899  f25e					      endif
    900  f25e				   pfclear_loop
    901  f25e					      ifnconst	superchip
    902  f25e		       95 b4		      sta	playfield,x
    903  f260				  -	      else
    904  f260				  -	      sta	playfield-128,x
    905  f260					      endif
    906  f260		       ca		      dex
    907  f261		       10 fb		      bpl	pfclear_loop
      0  f263					      RETURN
      1  f263					      ifnconst	bankswitch
      2  f263		       60		      rts
      3  f264				  -	      else
      4  f264				  -	      jmp	BS_return
      5  f264					      endif
    909  f264
    910  f264				   setuppointers
    911  f264		       86 9d		      stx	temp2	; store on.off.flip value
    912  f266		       aa		      tax		; put x-value in x 
    913  f267		       4a		      lsr
    914  f268		       4a		      lsr
    915  f269		       4a		      lsr		; divide x pos by 8 
    916  f26a		       85 9c		      sta	temp1
    917  f26c		       98		      tya
    918  f26d		       0a		      asl
    919  f26e					      if	pfwidth=4
    920  f26e		       0a		      asl		; multiply y pos by 4
    921  f26f					      endif		; else multiply by 2
    922  f26f		       18		      clc
    923  f270		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    924  f272		       a8		      tay		; put the value in y
    925  f273		       a5 9d		      lda	temp2	; restore on.off.flip value
    926  f275		       60		      rts
    927  f276
    928  f276				   pfread
    929  f276							;x=xvalue, y=yvalue
    930  f276		       20 64 f2 	      jsr	setuppointers
    931  f279		       bd de f2 	      lda	setbyte,x
    932  f27c		       39 b4 00 	      and	playfield,y
    933  f27f		       5d de f2 	      eor	setbyte,x
    934  f282							; beq readzero
    935  f282							; lda #1
    936  f282							; readzero
      0  f282					      RETURN
      1  f282					      ifnconst	bankswitch
      2  f282		       60		      rts
      3  f283				  -	      else
      4  f283				  -	      jmp	BS_return
      5  f283					      endif
    938  f283
    939  f283				   pfpixel
    940  f283							;x=xvalue, y=yvalue, a=0,1,2
    941  f283		       20 64 f2 	      jsr	setuppointers
    942  f286
    943  f286				  -	      ifconst	bankswitch
    944  f286				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    945  f286				  -	      beq	pixelon_r	; if "on" go to on
    946  f286				  -	      lsr
    947  f286				  -	      bcs	pixeloff_r	; value is 1 if true
    948  f286				  -	      lda	playfield,y	; if here, it's "flip"
    949  f286				  -	      eor	setbyte,x
    950  f286				  -	      ifconst	superchip
    951  f286				  -	      sta	playfield-128,y
    952  f286				  -	      else
    953  f286				  -	      sta	playfield,y
    954  f286				  -	      endif
    955  f286				  -	      RETURN
    956  f286				  -pixelon_r
    957  f286				  -	      lda	playfield,y
    958  f286				  -	      ora	setbyte,x
    959  f286				  -	      ifconst	superchip
    960  f286				  -	      sta	playfield-128,y
    961  f286				  -	      else
    962  f286				  -	      sta	playfield,y
    963  f286				  -	      endif
    964  f286				  -	      RETURN
    965  f286				  -pixeloff_r
    966  f286				  -	      lda	setbyte,x
    967  f286				  -	      eor	#$ff
    968  f286				  -	      and	playfield,y
    969  f286				  -	      ifconst	superchip
    970  f286				  -	      sta	playfield-128,y
    971  f286				  -	      else
    972  f286				  -	      sta	playfield,y
    973  f286				  -	      endif
    974  f286				  -	      RETURN
    975  f286				  -
    976  f286					      else
    977  f286		       4c b7 f2 	      jmp	plotpoint
    978  f289					      endif
    979  f289
    980  f289				   pfhline
    981  f289							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    982  f289		       20 64 f2 	      jsr	setuppointers
    983  f28c		       4c 96 f2 	      jmp	noinc
    984  f28f				   keepgoing
    985  f28f		       e8		      inx
    986  f290		       8a		      txa
    987  f291		       29 07		      and	#7
    988  f293		       d0 01		      bne	noinc
    989  f295		       c8		      iny
    990  f296				   noinc
    991  f296		       20 b7 f2 	      jsr	plotpoint
    992  f299		       e4 9e		      cpx	temp3
    993  f29b		       30 f2		      bmi	keepgoing
      0  f29d					      RETURN
      1  f29d					      ifnconst	bankswitch
      2  f29d		       60		      rts
      3  f29e				  -	      else
      4  f29e				  -	      jmp	BS_return
      5  f29e					      endif
    995  f29e
    996  f29e				   pfvline
    997  f29e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    998  f29e		       20 64 f2 	      jsr	setuppointers
    999  f2a1		       84 9c		      sty	temp1	; store memory location offset
   1000  f2a3		       e6 9e		      inc	temp3	; increase final x by 1 
   1001  f2a5		       a5 9e		      lda	temp3
   1002  f2a7		       0a		      asl
   1003  f2a8					      if	pfwidth=4
   1004  f2a8		       0a		      asl		; multiply by 4
   1005  f2a9					      endif		; else multiply by 2
   1006  f2a9		       85 9e		      sta	temp3	; store it
   1007  f2ab							; Thanks to Michael Rideout for fixing a bug in this code
   1008  f2ab							; right now, temp1=y=starting memory location, temp3=final
   1009  f2ab							; x should equal original x value
   1010  f2ab				   keepgoingy
   1011  f2ab		       20 b7 f2 	      jsr	plotpoint
   1012  f2ae		       c8		      iny
   1013  f2af		       c8		      iny
   1014  f2b0					      if	pfwidth=4
   1015  f2b0		       c8		      iny
   1016  f2b1		       c8		      iny
   1017  f2b2					      endif
   1018  f2b2		       c4 9e		      cpy	temp3
   1019  f2b4		       30 f5		      bmi	keepgoingy
      0  f2b6					      RETURN
      1  f2b6					      ifnconst	bankswitch
      2  f2b6		       60		      rts
      3  f2b7				  -	      else
      4  f2b7				  -	      jmp	BS_return
      5  f2b7					      endif
   1021  f2b7
   1022  f2b7				   plotpoint
   1023  f2b7		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1024  f2b9		       f0 0d		      beq	pixelon	; if "on" go to on
   1025  f2bb		       4a		      lsr
   1026  f2bc		       b0 14		      bcs	pixeloff	; value is 1 if true
   1027  f2be		       b9 b4 00 	      lda	playfield,y	; if here, it's "flip"
   1028  f2c1		       5d de f2 	      eor	setbyte,x
   1029  f2c4				  -	      ifconst	superchip
   1030  f2c4				  -	      sta	playfield-128,y
   1031  f2c4					      else
   1032  f2c4		       99 b4 00 	      sta	playfield,y
   1033  f2c7					      endif
   1034  f2c7		       60		      rts
   1035  f2c8				   pixelon
   1036  f2c8		       b9 b4 00 	      lda	playfield,y
   1037  f2cb		       1d de f2 	      ora	setbyte,x
   1038  f2ce				  -	      ifconst	superchip
   1039  f2ce				  -	      sta	playfield-128,y
   1040  f2ce					      else
   1041  f2ce		       99 b4 00 	      sta	playfield,y
   1042  f2d1					      endif
   1043  f2d1		       60		      rts
   1044  f2d2				   pixeloff
   1045  f2d2		       bd de f2 	      lda	setbyte,x
   1046  f2d5		       49 ff		      eor	#$ff
   1047  f2d7		       39 b4 00 	      and	playfield,y
   1048  f2da				  -	      ifconst	superchip
   1049  f2da				  -	      sta	playfield-128,y
   1050  f2da					      else
   1051  f2da		       99 b4 00 	      sta	playfield,y
   1052  f2dd					      endif
   1053  f2dd		       60		      rts
   1054  f2de
   1055  f2de				   setbyte
   1056  f2de					      ifnconst	pfcenter
   1057  f2de		       80		      .byte.b	$80
   1058  f2df		       40		      .byte.b	$40
   1059  f2e0		       20		      .byte.b	$20
   1060  f2e1		       10		      .byte.b	$10
   1061  f2e2		       08		      .byte.b	$08
   1062  f2e3		       04		      .byte.b	$04
   1063  f2e4		       02		      .byte.b	$02
   1064  f2e5		       01		      .byte.b	$01
   1065  f2e6					      endif
   1066  f2e6		       01		      .byte.b	$01
   1067  f2e7		       02		      .byte.b	$02
   1068  f2e8		       04		      .byte.b	$04
   1069  f2e9		       08		      .byte.b	$08
   1070  f2ea		       10		      .byte.b	$10
   1071  f2eb		       20		      .byte.b	$20
   1072  f2ec		       40		      .byte.b	$40
   1073  f2ed		       80		      .byte.b	$80
   1074  f2ee		       80		      .byte.b	$80
   1075  f2ef		       40		      .byte.b	$40
   1076  f2f0		       20		      .byte.b	$20
   1077  f2f1		       10		      .byte.b	$10
   1078  f2f2		       08		      .byte.b	$08
   1079  f2f3		       04		      .byte.b	$04
   1080  f2f4		       02		      .byte.b	$02
   1081  f2f5		       01		      .byte.b	$01
   1082  f2f6		       01		      .byte.b	$01
   1083  f2f7		       02		      .byte.b	$02
   1084  f2f8		       04		      .byte.b	$04
   1085  f2f9		       08		      .byte.b	$08
   1086  f2fa		       10		      .byte.b	$10
   1087  f2fb		       20		      .byte.b	$20
   1088  f2fc		       40		      .byte.b	$40
   1089  f2fd		       80		      .byte.b	$80
   1090  f2fe							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1091  f2fe
   1092  f2fe				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2fe		       d0 13		      bne	notleft
   1094  f300							;left
   1095  f300					      ifconst	pfres
   1096  f300		       a2 20		      ldx	#pfres*4
   1097  f302				  -	      else
   1098  f302				  -	      ldx	#48
   1099  f302					      endif
   1100  f302				   leftloop
   1101  f302		       b5 b3		      lda	playfield-1,x
   1102  f304		       4a		      lsr
   1103  f305
   1104  f305				  -	      ifconst	superchip
   1105  f305				  -	      lda	playfield-2,x
   1106  f305				  -	      rol
   1107  f305				  -	      sta	playfield-130,x
   1108  f305				  -	      lda	playfield-3,x
   1109  f305				  -	      ror
   1110  f305				  -	      sta	playfield-131,x
   1111  f305				  -	      lda	playfield-4,x
   1112  f305				  -	      rol
   1113  f305				  -	      sta	playfield-132,x
   1114  f305				  -	      lda	playfield-1,x
   1115  f305				  -	      ror
   1116  f305				  -	      sta	playfield-129,x
   1117  f305					      else
   1118  f305		       36 b2		      rol	playfield-2,x
   1119  f307		       76 b1		      ror	playfield-3,x
   1120  f309		       36 b0		      rol	playfield-4,x
   1121  f30b		       76 b3		      ror	playfield-1,x
   1122  f30d					      endif
   1123  f30d
   1124  f30d		       8a		      txa
   1125  f30e		       cb 04		      sbx	#4
   1126  f310		       d0 f0		      bne	leftloop
      0  f312					      RETURN
      1  f312					      ifnconst	bankswitch
      2  f312		       60		      rts
      3  f313				  -	      else
      4  f313				  -	      jmp	BS_return
      5  f313					      endif
   1128  f313
   1129  f313				   notleft
   1130  f313		       4a		      lsr
   1131  f314		       90 13		      bcc	notright
   1132  f316							;right
   1133  f316
   1134  f316					      ifconst	pfres
   1135  f316		       a2 20		      ldx	#pfres*4
   1136  f318				  -	      else
   1137  f318				  -	      ldx	#48
   1138  f318					      endif
   1139  f318				   rightloop
   1140  f318		       b5 b0		      lda	playfield-4,x
   1141  f31a		       4a		      lsr
   1142  f31b				  -	      ifconst	superchip
   1143  f31b				  -	      lda	playfield-3,x
   1144  f31b				  -	      rol
   1145  f31b				  -	      sta	playfield-131,x
   1146  f31b				  -	      lda	playfield-2,x
   1147  f31b				  -	      ror
   1148  f31b				  -	      sta	playfield-130,x
   1149  f31b				  -	      lda	playfield-1,x
   1150  f31b				  -	      rol
   1151  f31b				  -	      sta	playfield-129,x
   1152  f31b				  -	      lda	playfield-4,x
   1153  f31b				  -	      ror
   1154  f31b				  -	      sta	playfield-132,x
   1155  f31b					      else
   1156  f31b		       36 b1		      rol	playfield-3,x
   1157  f31d		       76 b2		      ror	playfield-2,x
   1158  f31f		       36 b3		      rol	playfield-1,x
   1159  f321		       76 b0		      ror	playfield-4,x
   1160  f323					      endif
   1161  f323		       8a		      txa
   1162  f324		       cb 04		      sbx	#4
   1163  f326		       d0 f0		      bne	rightloop
      0  f328					      RETURN
      1  f328					      ifnconst	bankswitch
      2  f328		       60		      rts
      3  f329				  -	      else
      4  f329				  -	      jmp	BS_return
      5  f329					      endif
   1165  f329
   1166  f329				   notright
   1167  f329		       4a		      lsr
   1168  f32a		       90 49		      bcc	notup
   1169  f32c							;up
   1170  f32c		       4a		      lsr
   1171  f32d		       90 02		      bcc	onedecup
   1172  f32f		       c6 ef		      dec	playfieldpos
   1173  f331				   onedecup
   1174  f331		       c6 ef		      dec	playfieldpos
   1175  f333		       f0 02		      beq	shiftdown
   1176  f335		       10 3d		      bpl	noshiftdown2
   1177  f337				   shiftdown
   1178  f337				  -	      ifconst	pfrowheight
   1179  f337				  -	      lda	#pfrowheight
   1180  f337					      else
   1181  f337				  -	      ifnconst	pfres
   1182  f337				  -	      lda	#8
   1183  f337					      else
   1184  f337		       a9 0c		      lda	#(96/pfres)	; try to come close to the real size
   1185  f339					      endif
   1186  f339					      endif
   1187  f339
   1188  f339		       85 ef		      sta	playfieldpos
   1189  f33b		       a5 b7		      lda	playfield+3
   1190  f33d		       85 9f		      sta	temp4
   1191  f33f		       a5 b6		      lda	playfield+2
   1192  f341		       85 9e		      sta	temp3
   1193  f343		       a5 b5		      lda	playfield+1
   1194  f345		       85 9d		      sta	temp2
   1195  f347		       a5 b4		      lda	playfield
   1196  f349		       85 9c		      sta	temp1
   1197  f34b		       a2 00		      ldx	#0
   1198  f34d				   up2
   1199  f34d		       b5 b8		      lda	playfield+4,x
   1200  f34f				  -	      ifconst	superchip
   1201  f34f				  -	      sta	playfield-128,x
   1202  f34f				  -	      lda	playfield+5,x
   1203  f34f				  -	      sta	playfield-127,x
   1204  f34f				  -	      lda	playfield+6,x
   1205  f34f				  -	      sta	playfield-126,x
   1206  f34f				  -	      lda	playfield+7,x
   1207  f34f				  -	      sta	playfield-125,x
   1208  f34f					      else
   1209  f34f		       95 b4		      sta	playfield,x
   1210  f351		       b5 b9		      lda	playfield+5,x
   1211  f353		       95 b5		      sta	playfield+1,x
   1212  f355		       b5 ba		      lda	playfield+6,x
   1213  f357		       95 b6		      sta	playfield+2,x
   1214  f359		       b5 bb		      lda	playfield+7,x
   1215  f35b		       95 b7		      sta	playfield+3,x
   1216  f35d					      endif
   1217  f35d		       8a		      txa
   1218  f35e		       cb fc		      sbx	#252
   1219  f360					      ifconst	pfres
   1220  f360		       e0 1c		      cpx	#(pfres-1)*4
   1221  f362				  -	      else
   1222  f362				  -	      cpx	#44
   1223  f362					      endif
   1224  f362		       d0 e9		      bne	up2
   1225  f364
   1226  f364		       a5 9f		      lda	temp4
   1227  f366
   1228  f366				  -	      ifconst	superchip
   1229  f366				  -	      ifconst	pfres
   1230  f366				  -	      sta	playfield+pfres*4-129
   1231  f366				  -	      lda	temp3
   1232  f366				  -	      sta	playfield+pfres*4-130
   1233  f366				  -	      lda	temp2
   1234  f366				  -	      sta	playfield+pfres*4-131
   1235  f366				  -	      lda	temp1
   1236  f366				  -	      sta	playfield+pfres*4-132
   1237  f366				  -	      else
   1238  f366				  -	      sta	playfield+47-128
   1239  f366				  -	      lda	temp3
   1240  f366				  -	      sta	playfield+46-128
   1241  f366				  -	      lda	temp2
   1242  f366				  -	      sta	playfield+45-128
   1243  f366				  -	      lda	temp1
   1244  f366				  -	      sta	playfield+44-128
   1245  f366				  -	      endif
   1246  f366					      else
   1247  f366					      ifconst	pfres
   1248  f366		       85 d3		      sta	playfield+pfres*4-1
   1249  f368		       a5 9e		      lda	temp3
   1250  f36a		       85 d2		      sta	playfield+pfres*4-2
   1251  f36c		       a5 9d		      lda	temp2
   1252  f36e		       85 d1		      sta	playfield+pfres*4-3
   1253  f370		       a5 9c		      lda	temp1
   1254  f372		       85 d0		      sta	playfield+pfres*4-4
   1255  f374				  -	      else
   1256  f374				  -	      sta	playfield+47
   1257  f374				  -	      lda	temp3
   1258  f374				  -	      sta	playfield+46
   1259  f374				  -	      lda	temp2
   1260  f374				  -	      sta	playfield+45
   1261  f374				  -	      lda	temp1
   1262  f374				  -	      sta	playfield+44
   1263  f374					      endif
   1264  f374					      endif
   1265  f374				   noshiftdown2
      0  f374					      RETURN
      1  f374					      ifnconst	bankswitch
      2  f374		       60		      rts
      3  f375				  -	      else
      4  f375				  -	      jmp	BS_return
      5  f375					      endif
   1267  f375
   1268  f375
   1269  f375				   notup
   1270  f375							;down
   1271  f375		       4a		      lsr
   1272  f376		       b0 02		      bcs	oneincup
   1273  f378		       e6 ef		      inc	playfieldpos
   1274  f37a				   oneincup
   1275  f37a		       e6 ef		      inc	playfieldpos
   1276  f37c		       a5 ef		      lda	playfieldpos
   1277  f37e
   1278  f37e				  -	      ifconst	pfrowheight
   1279  f37e				  -	      cmp	#pfrowheight+1
   1280  f37e					      else
   1281  f37e				  -	      ifnconst	pfres
   1282  f37e				  -	      cmp	#9
   1283  f37e					      else
   1284  f37e		       c9 0d		      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f380					      endif
   1286  f380					      endif
   1287  f380
   1288  f380		       90 3b		      bcc	noshiftdown
   1289  f382		       a9 01		      lda	#1
   1290  f384		       85 ef		      sta	playfieldpos
   1291  f386
   1292  f386					      ifconst	pfres
   1293  f386		       a5 d3		      lda	playfield+pfres*4-1
   1294  f388		       85 9f		      sta	temp4
   1295  f38a		       a5 d2		      lda	playfield+pfres*4-2
   1296  f38c		       85 9e		      sta	temp3
   1297  f38e		       a5 d1		      lda	playfield+pfres*4-3
   1298  f390		       85 9d		      sta	temp2
   1299  f392		       a5 d0		      lda	playfield+pfres*4-4
   1300  f394				  -	      else
   1301  f394				  -	      lda	playfield+47
   1302  f394				  -	      sta	temp4
   1303  f394				  -	      lda	playfield+46
   1304  f394				  -	      sta	temp3
   1305  f394				  -	      lda	playfield+45
   1306  f394				  -	      sta	temp2
   1307  f394				  -	      lda	playfield+44
   1308  f394					      endif
   1309  f394
   1310  f394		       85 9c		      sta	temp1
   1311  f396
   1312  f396					      ifconst	pfres
   1313  f396		       a2 1c		      ldx	#(pfres-1)*4
   1314  f398				  -	      else
   1315  f398				  -	      ldx	#44
   1316  f398					      endif
   1317  f398				   down2
   1318  f398		       b5 b3		      lda	playfield-1,x
   1319  f39a				  -	      ifconst	superchip
   1320  f39a				  -	      sta	playfield-125,x
   1321  f39a				  -	      lda	playfield-2,x
   1322  f39a				  -	      sta	playfield-126,x
   1323  f39a				  -	      lda	playfield-3,x
   1324  f39a				  -	      sta	playfield-127,x
   1325  f39a				  -	      lda	playfield-4,x
   1326  f39a				  -	      sta	playfield-128,x
   1327  f39a					      else
   1328  f39a		       95 b7		      sta	playfield+3,x
   1329  f39c		       b5 b2		      lda	playfield-2,x
   1330  f39e		       95 b6		      sta	playfield+2,x
   1331  f3a0		       b5 b1		      lda	playfield-3,x
   1332  f3a2		       95 b5		      sta	playfield+1,x
   1333  f3a4		       b5 b0		      lda	playfield-4,x
   1334  f3a6		       95 b4		      sta	playfield,x
   1335  f3a8					      endif
   1336  f3a8		       8a		      txa
   1337  f3a9		       cb 04		      sbx	#4
   1338  f3ab		       d0 eb		      bne	down2
   1339  f3ad
   1340  f3ad		       a5 9f		      lda	temp4
   1341  f3af				  -	      ifconst	superchip
   1342  f3af				  -	      sta	playfield-125
   1343  f3af				  -	      lda	temp3
   1344  f3af				  -	      sta	playfield-126
   1345  f3af				  -	      lda	temp2
   1346  f3af				  -	      sta	playfield-127
   1347  f3af				  -	      lda	temp1
   1348  f3af				  -	      sta	playfield-128
   1349  f3af					      else
   1350  f3af		       85 b7		      sta	playfield+3
   1351  f3b1		       a5 9e		      lda	temp3
   1352  f3b3		       85 b6		      sta	playfield+2
   1353  f3b5		       a5 9d		      lda	temp2
   1354  f3b7		       85 b5		      sta	playfield+1
   1355  f3b9		       a5 9c		      lda	temp1
   1356  f3bb		       85 b4		      sta	playfield
   1357  f3bd					      endif
   1358  f3bd				   noshiftdown
      0  f3bd					      RETURN
      1  f3bd					      ifnconst	bankswitch
      2  f3bd		       60		      rts
      3  f3be				  -	      else
      4  f3be				  -	      jmp	BS_return
      5  f3be					      endif
   1360  f3be							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1361  f3be
   1362  f3be							;standard routines needed for pretty much all games
   1363  f3be							; just the random number generator is left - maybe we should remove this asm file altogether?
   1364  f3be							; repositioning code and score pointer setup moved to overscan
   1365  f3be							; read switches, joysticks now compiler generated (more efficient)
   1366  f3be
   1367  f3be				   randomize
   1368  f3be		       a5 a2		      lda	rand
   1369  f3c0		       4a		      lsr
   1370  f3c1				  -	      ifconst	rand16
   1371  f3c1				  -	      rol	rand16
   1372  f3c1					      endif
   1373  f3c1		       90 02		      bcc	noeor
   1374  f3c3		       49 b4		      eor	#$B4
   1375  f3c5				   noeor
   1376  f3c5		       85 a2		      sta	rand
   1377  f3c7				  -	      ifconst	rand16
   1378  f3c7				  -	      eor	rand16
   1379  f3c7					      endif
      0  f3c7					      RETURN
      1  f3c7					      ifnconst	bankswitch
      2  f3c7		       60		      rts
      3  f3c8				  -	      else
      4  f3c8				  -	      jmp	BS_return
      5  f3c8					      endif
   1381  f3c8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1382  f3c8
   1383  f3c8				   drawscreen
   1384  f3c8				  -	      ifconst	debugscore
   1385  f3c8				  -	      ldx	#14
   1386  f3c8				  -	      lda	INTIM	; display # cycles left in the score
   1387  f3c8				  -
   1388  f3c8				  -	      ifconst	mincycles
   1389  f3c8				  -	      lda	mincycles
   1390  f3c8				  -	      cmp	INTIM
   1391  f3c8				  -	      lda	mincycles
   1392  f3c8				  -	      bcc	nochange
   1393  f3c8				  -	      lda	INTIM
   1394  f3c8				  -	      sta	mincycles
   1395  f3c8				  -nochange
   1396  f3c8				  -	      endif
   1397  f3c8				  -
   1398  f3c8				  -			; cmp #$2B
   1399  f3c8				  -			; bcs no_cycles_left
   1400  f3c8				  -	      bmi	cycles_left
   1401  f3c8				  -	      ldx	#64
   1402  f3c8				  -	      eor	#$ff	;make negative
   1403  f3c8				  -cycles_left
   1404  f3c8				  -	      stx	scorecolor
   1405  f3c8				  -	      and	#$7f	; clear sign bit
   1406  f3c8				  -	      tax
   1407  f3c8				  -	      lda	scorebcd,x
   1408  f3c8				  -	      sta	score+2
   1409  f3c8				  -	      lda	scorebcd1,x
   1410  f3c8				  -	      sta	score+1
   1411  f3c8				  -	      jmp	done_debugscore
   1412  f3c8				  -scorebcd
   1413  f3c8				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1414  f3c8				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1415  f3c8				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1416  f3c8				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1417  f3c8				  -scorebcd1
   1418  f3c8				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1419  f3c8				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1420  f3c8				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1421  f3c8				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1422  f3c8				  -done_debugscore
   1423  f3c8					      endif
   1424  f3c8
   1425  f3c8				  -	      ifconst	debugcycles
   1426  f3c8				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1427  f3c8				  -			; cmp #$2B
   1428  f3c8				  -			; BCC overscan
   1429  f3c8				  -	      bmi	overscan
   1430  f3c8				  -	      sta	COLUBK
   1431  f3c8				  -	      bcs	doneoverscan
   1432  f3c8					      endif
   1433  f3c8
   1434  f3c8				   overscan
   1435  f3c8				  -	      ifconst	interlaced
   1436  f3c8				  -	      PHP
   1437  f3c8				  -	      PLA
   1438  f3c8				  -	      EOR	#4	; flip interrupt bit
   1439  f3c8				  -	      PHA
   1440  f3c8				  -	      PLP
   1441  f3c8				  -	      AND	#4	; isolate the interrupt bit
   1442  f3c8				  -	      TAX		; save it for later
   1443  f3c8					      endif
   1444  f3c8
   1445  f3c8				   overscanloop
   1446  f3c8		       ad 84 02 	      lda	INTIM	;wait for sync
   1447  f3cb		       30 fb		      bmi	overscanloop
   1448  f3cd				   doneoverscan
   1449  f3cd
   1450  f3cd							;do VSYNC
   1451  f3cd
   1452  f3cd				  -	      ifconst	interlaced
   1453  f3cd				  -	      CPX	#4
   1454  f3cd				  -	      BNE	oddframevsync
   1455  f3cd					      endif
   1456  f3cd
   1457  f3cd		       a9 02		      lda	#2
   1458  f3cf		       85 02		      sta	WSYNC
   1459  f3d1		       85 00		      sta	VSYNC
   1460  f3d3		       85 02		      STA	WSYNC
   1461  f3d5		       85 02		      STA	WSYNC
   1462  f3d7		       4a		      lsr
   1463  f3d8		       85 02		      STA	WSYNC
   1464  f3da		       85 00		      STA	VSYNC
   1465  f3dc		       85 01		      sta	VBLANK
   1466  f3de					      ifnconst	overscan_time
   1467  f3de		       a9 a5		      lda	#37+128
   1468  f3e0				  -	      else
   1469  f3e0				  -	      lda	#overscan_time+128
   1470  f3e0					      endif
   1471  f3e0		       8d 96 02 	      sta	TIM64T
   1472  f3e3
   1473  f3e3				  -	      ifconst	interlaced
   1474  f3e3				  -	      jmp	postsync
   1475  f3e3				  -
   1476  f3e3				  -oddframevsync
   1477  f3e3				  -	      sta	WSYNC
   1478  f3e3				  -
   1479  f3e3				  -	      LDA	($80,X)	; 11 waste
   1480  f3e3				  -	      LDA	($80,X)	; 11 waste
   1481  f3e3				  -	      LDA	($80,X)	; 11 waste
   1482  f3e3				  -
   1483  f3e3				  -	      lda	#2
   1484  f3e3				  -	      sta	VSYNC
   1485  f3e3				  -	      sta	WSYNC
   1486  f3e3				  -	      sta	WSYNC
   1487  f3e3				  -	      sta	WSYNC
   1488  f3e3				  -
   1489  f3e3				  -	      LDA	($80,X)	; 11 waste
   1490  f3e3				  -	      LDA	($80,X)	; 11 waste
   1491  f3e3				  -	      LDA	($80,X)	; 11 waste
   1492  f3e3				  -
   1493  f3e3				  -	      lda	#0
   1494  f3e3				  -	      sta	VSYNC
   1495  f3e3				  -	      sta	VBLANK
   1496  f3e3				  -	      ifnconst	overscan_time
   1497  f3e3				  -	      lda	#37+128
   1498  f3e3				  -	      else
   1499  f3e3				  -	      lda	#overscan_time+128
   1500  f3e3				  -	      endif
   1501  f3e3				  -	      sta	TIM64T
   1502  f3e3				  -
   1503  f3e3				  -postsync
   1504  f3e3					      endif
   1505  f3e3
   1506  f3e3				  -	      ifconst	legacy
   1507  f3e3				  -	      if	legacy < 100
   1508  f3e3				  -	      ldx	#4
   1509  f3e3				  -adjustloop
   1510  f3e3				  -	      lda	player0x,x
   1511  f3e3				  -	      sec
   1512  f3e3				  -	      sbc	#14	;?
   1513  f3e3				  -	      sta	player0x,x
   1514  f3e3				  -	      dex
   1515  f3e3				  -	      bpl	adjustloop
   1516  f3e3				  -	      endif
   1517  f3e3					      endif
   1518  f3e3				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1519  f3e3				  -	      repeat	($fa-(<*))
   1520  f3e3				  -	      nop
   1521  f3e3				  -	      repend
   1522  f3e3					      endif
   1523  f3e3		       85 02		      sta	WSYNC
   1524  f3e5		       a2 04		      ldx	#4
      0  f3e7					      SLEEP	3
      1  f3e7				   .CYCLES    SET	3
      2  f3e7
      3  f3e7				  -	      IF	.CYCLES < 2
      4  f3e7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e7				  -	      ERR
      6  f3e7					      ENDIF
      7  f3e7
      8  f3e7					      IF	.CYCLES & 1
      9  f3e7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e7		       04 00		      nop	0
     11  f3e9				  -	      ELSE
     12  f3e9				  -	      bit	VSYNC
     13  f3e9					      ENDIF
     14  f3e9				   .CYCLES    SET	.CYCLES - 3
     15  f3e9					      ENDIF
     16  f3e9
     17  f3e9				  -	      REPEAT	.CYCLES / 2
     18  f3e9				  -	      nop
     19  f3e9					      REPEND
   1526  f3e9				   HorPosLoop		; 5
   1527  f3e9		       b5 80		      lda	player0x,X	;+4 9
   1528  f3eb		       38		      sec		;+2 11
   1529  f3ec				   DivideLoop
   1530  f3ec		       e9 0f		      sbc	#15
   1531  f3ee		       b0 fc		      bcs	DivideLoop	;+4 15
   1532  f3f0		       95 9c		      sta	temp1,X	;+4 19
   1533  f3f2		       95 10		      sta	RESP0,X	;+4 23
   1534  f3f4		       85 02		      sta	WSYNC
   1535  f3f6		       ca		      dex
   1536  f3f7		       10 f0		      bpl	HorPosLoop	;+5 5
   1537  f3f9							; 4
   1538  f3f9
   1539  f3f9		       a2 04		      ldx	#4
   1540  f3fb		       b4 9c		      ldy	temp1,X
   1541  f3fd		       b9 59 f3 	      lda	repostable-256,Y
   1542  f400		       95 20		      sta	HMP0,X	;+14 18
   1543  f402
   1544  f402		       ca		      dex
   1545  f403		       b4 9c		      ldy	temp1,X
   1546  f405		       b9 59 f3 	      lda	repostable-256,Y
   1547  f408		       95 20		      sta	HMP0,X	;+14 32
   1548  f40a
   1549  f40a		       ca		      dex
   1550  f40b		       b4 9c		      ldy	temp1,X
   1551  f40d		       b9 59 f3 	      lda	repostable-256,Y
   1552  f410		       95 20		      sta	HMP0,X	;+14 46
   1553  f412
   1554  f412		       ca		      dex
   1555  f413		       b4 9c		      ldy	temp1,X
   1556  f415		       b9 59 f3 	      lda	repostable-256,Y
   1557  f418		       95 20		      sta	HMP0,X	;+14 60
   1558  f41a
   1559  f41a		       ca		      dex
   1560  f41b		       b4 9c		      ldy	temp1,X
   1561  f41d		       b9 59 f3 	      lda	repostable-256,Y
   1562  f420		       95 20		      sta	HMP0,X	;+14 74
   1563  f422
   1564  f422		       85 02		      sta	WSYNC
   1565  f424
   1566  f424		       85 2a		      sta	HMOVE	;+3 3
   1567  f426
   1568  f426
   1569  f426				  -	      ifconst	legacy
   1570  f426				  -	      if	legacy < 100
   1571  f426				  -	      ldx	#4
   1572  f426				  -adjustloop2
   1573  f426				  -	      lda	player0x,x
   1574  f426				  -	      clc
   1575  f426				  -	      adc	#14	;?
   1576  f426				  -	      sta	player0x,x
   1577  f426				  -	      dex
   1578  f426				  -	      bpl	adjustloop2
   1579  f426				  -	      endif
   1580  f426					      endif
   1581  f426
   1582  f426
   1583  f426
   1584  f426
   1585  f426							;set score pointers
   1586  f426		       a7 95		      lax	score+2
   1587  f428		       20 59 f4 	      jsr	scorepointerset
   1588  f42b		       84 9b		      sty	scorepointers+5
   1589  f42d		       86 98		      stx	scorepointers+2
   1590  f42f		       a7 94		      lax	score+1
   1591  f431		       20 59 f4 	      jsr	scorepointerset
   1592  f434		       84 9a		      sty	scorepointers+4
   1593  f436		       86 97		      stx	scorepointers+1
   1594  f438		       a7 93		      lax	score
   1595  f43a		       20 59 f4 	      jsr	scorepointerset
   1596  f43d		       84 99		      sty	scorepointers+3
   1597  f43f		       86 96		      stx	scorepointers
   1598  f441
   1599  f441				   vblk
   1600  f441							; run possible vblank bB code
   1601  f441				  -	      ifconst	vblank_bB_code
   1602  f441				  -	      jsr	vblank_bB_code
   1603  f441					      endif
   1604  f441				   vblk2
   1605  f441		       ad 84 02 	      LDA	INTIM
   1606  f444		       30 fb		      bmi	vblk2
   1607  f446		       4c 34 f0 	      jmp	kernel
   1608  f449
   1609  f449
   1610  f449		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1611  f452		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1612  f459				   repostable
   1613  f459
   1614  f459				   scorepointerset
   1615  f459		       29 0f		      and	#$0F
   1616  f45b		       0a		      asl
   1617  f45c		       0a		      asl
   1618  f45d		       0a		      asl
   1619  f45e		       69 9c		      adc	#<scoretable
   1620  f460		       a8		      tay
   1621  f461		       8a		      txa
   1622  f462							; and #$F0
   1623  f462							; lsr
   1624  f462		       4b f0		      asr	#$F0
   1625  f464		       69 9c		      adc	#<scoretable
   1626  f466		       aa		      tax
   1627  f467		       60		      rts
   1628  f468				   game
   1629  f468				   .L00 		;  rem *******************************************************************
   1630  f468
   1631  f468				   .L01 		;  rem ** Demo of playercolors+no_blank_lines kernel	
   1632  f468
   1633  f468				   .L02 		;  rem ** 
   1634  f468
   1635  f468				   .L03 		;  rem ** It provides 2xplayers with color and a ball. (no missiles)
   1636  f468
   1637  f468				   .L04 		;  rem ** the trade-off is the middle playfield bytes are symmetrical
   1638  f468
   1639  f468				   .L05 		;  rem *******************************************************************
   1640  f468
   1641  f468				   .L06 		;  set kernel_options pfcolors no_blank_lines player1colors
   1642  f468
   1643  f468				   .
   1644  f468							; 
   1645  f468
   1646  f468				   .L07 		;  rem ** in adventure, counts of 3 are important...
   1647  f468
   1648  f468				   .L08 		;  dim threecount  =  a
   1649  f468
   1650  f468				   .
   1651  f468							; 
   1652  f468
   1653  f468				   .L09 		;  rem ** track which room the player is in...
   1654  f468
   1655  f468				   .L010		;  dim playerroom  =  b
   1656  f468
   1657  f468				   .
   1658  f468							; 
   1659  f468
   1660  f468				   .L011		;  rem ** we use saved variables for sliding off walls
   1661  f468
   1662  f468				   .L012		;  dim oldballx  =  w
   1663  f468
   1664  f468				   .L013		;  dim oldbally  =  x
   1665  f468
   1666  f468				   .
   1667  f468							; 
   1668  f468
   1669  f468				   .
   1670  f468							; 
   1671  f468
   1672  f468				   .L014		;  rem ** screen resolution = 7, so we can re-use screen variables for enemy vars
   1673  f468
   1674  f468				   .L015		;  rem ** if you need more resolution, use SC ram instead
   1675  f468
   1676  f468				   .L016		;  const pfres  =  8
   1677  f468
   1678  f468				   .
   1679  f468							; 
   1680  f468
   1681  f468				   .
   1682  f468							; 
   1683  f468
   1684  f468				   .L017		;  const _00  =  $00
   1685  f468
   1686  f468				   .L018		;  const _02  =  $02
   1687  f468
   1688  f468				   .L019		;  const _04  =  $04
   1689  f468
   1690  f468				   .L020		;  const _06  =  $06
   1691  f468
   1692  f468				   .L021		;  const _08  =  $08
   1693  f468
   1694  f468				   .L022		;  const _0A  =  $0A
   1695  f468
   1696  f468				   .L023		;  const _0C  =  $0C
   1697  f468
   1698  f468				   .L024		;  const _0E  =  $0E
   1699  f468
   1700  f468				   .L025		;  const _10  =  $10
   1701  f468
   1702  f468				   .L026		;  const _12  =  $12
   1703  f468
   1704  f468				   .L027		;  const _14  =  $14
   1705  f468
   1706  f468				   .L028		;  const _16  =  $16
   1707  f468
   1708  f468				   .L029		;  const _18  =  $18
   1709  f468
   1710  f468				   .L030		;  const _1A  =  $1A
   1711  f468
   1712  f468				   .L031		;  const _1C  =  $1C
   1713  f468
   1714  f468				   .L032		;  const _1E  =  $1E
   1715  f468
   1716  f468				   .L033		;  const _20  =  $20
   1717  f468
   1718  f468				   .L034		;  const _22  =  $22
   1719  f468
   1720  f468				   .L035		;  const _24  =  $24
   1721  f468
   1722  f468				   .L036		;  const _26  =  $26
   1723  f468
   1724  f468				   .L037		;  const _28  =  $28
   1725  f468
   1726  f468				   .L038		;  const _2A  =  $2A
   1727  f468
   1728  f468				   .L039		;  const _2C  =  $2C
   1729  f468
   1730  f468				   .L040		;  const _2E  =  $2E
   1731  f468
   1732  f468				   .L041		;  const _30  =  $30
   1733  f468
   1734  f468				   .L042		;  const _32  =  $32
   1735  f468
   1736  f468				   .L043		;  const _34  =  $34
   1737  f468
   1738  f468				   .L044		;  const _36  =  $36
   1739  f468
   1740  f468				   .L045		;  const _38  =  $38
   1741  f468
   1742  f468				   .L046		;  const _3A  =  $3A
   1743  f468
   1744  f468				   .L047		;  const _3C  =  $3C
   1745  f468
   1746  f468				   .L048		;  const _3E  =  $3E
   1747  f468
   1748  f468				   .L049		;  const _40  =  $40
   1749  f468
   1750  f468				   .L050		;  const _42  =  $42
   1751  f468
   1752  f468				   .L051		;  const _44  =  $44
   1753  f468
   1754  f468				   .L052		;  const _46  =  $46
   1755  f468
   1756  f468				   .L053		;  const _48  =  $48
   1757  f468
   1758  f468				   .L054		;  const _4A  =  $4A
   1759  f468
   1760  f468				   .L055		;  const _4C  =  $4C
   1761  f468
   1762  f468				   .L056		;  const _4E  =  $4E
   1763  f468
   1764  f468				   .L057		;  const _50  =  $50
   1765  f468
   1766  f468				   .L058		;  const _52  =  $52
   1767  f468
   1768  f468				   .L059		;  const _54  =  $54
   1769  f468
   1770  f468				   .L060		;  const _56  =  $56
   1771  f468
   1772  f468				   .L061		;  const _58  =  $58
   1773  f468
   1774  f468				   .L062		;  const _5A  =  $5A
   1775  f468
   1776  f468				   .L063		;  const _5C  =  $5C
   1777  f468
   1778  f468				   .L064		;  const _5E  =  $5E
   1779  f468
   1780  f468				   .L065		;  const _60  =  $60
   1781  f468
   1782  f468				   .L066		;  const _62  =  $62
   1783  f468
   1784  f468				   .L067		;  const _64  =  $64
   1785  f468
   1786  f468				   .L068		;  const _66  =  $66
   1787  f468
   1788  f468				   .L069		;  const _68  =  $68
   1789  f468
   1790  f468				   .L070		;  const _6A  =  $6A
   1791  f468
   1792  f468				   .L071		;  const _6C  =  $6C
   1793  f468
   1794  f468				   .L072		;  const _6E  =  $6E
   1795  f468
   1796  f468				   .L073		;  const _70  =  $70
   1797  f468
   1798  f468				   .L074		;  const _72  =  $72
   1799  f468
   1800  f468				   .L075		;  const _74  =  $74
   1801  f468
   1802  f468				   .L076		;  const _76  =  $76
   1803  f468
   1804  f468				   .L077		;  const _78  =  $78
   1805  f468
   1806  f468				   .L078		;  const _7A  =  $7A
   1807  f468
   1808  f468				   .L079		;  const _7C  =  $7C
   1809  f468
   1810  f468				   .L080		;  const _7E  =  $7E
   1811  f468
   1812  f468				   .L081		;  const _80  =  $80
   1813  f468
   1814  f468				   .L082		;  const _82  =  $82
   1815  f468
   1816  f468				   .L083		;  const _84  =  $84
   1817  f468
   1818  f468				   .L084		;  const _86  =  $86
   1819  f468
   1820  f468				   .L085		;  const _88  =  $88
   1821  f468
   1822  f468				   .L086		;  const _8A  =  $8A
   1823  f468
   1824  f468				   .L087		;  const _8C  =  $8C
   1825  f468
   1826  f468				   .L088		;  const _8E  =  $8E
   1827  f468
   1828  f468				   .L089		;  const _90  =  $90
   1829  f468
   1830  f468				   .L090		;  const _92  =  $92
   1831  f468
   1832  f468				   .L091		;  const _94  =  $94
   1833  f468
   1834  f468				   .L092		;  const _96  =  $96
   1835  f468
   1836  f468				   .L093		;  const _98  =  $98
   1837  f468
   1838  f468				   .L094		;  const _9A  =  $9A
   1839  f468
   1840  f468				   .L095		;  const _9C  =  $9C
   1841  f468
   1842  f468				   .L096		;  const _9E  =  $9E
   1843  f468
   1844  f468				   .L097		;  const _A0  =  $A0
   1845  f468
   1846  f468				   .L098		;  const _A2  =  $A2
   1847  f468
   1848  f468				   .L099		;  const _A4  =  $A4
   1849  f468
   1850  f468				   .L0100		;  const _A6  =  $A6
   1851  f468
   1852  f468				   .L0101		;  const _A8  =  $A8
   1853  f468
   1854  f468				   .L0102		;  const _AA  =  $AA
   1855  f468
   1856  f468				   .L0103		;  const _AC  =  $AC
   1857  f468
   1858  f468				   .L0104		;  const _AE  =  $AE
   1859  f468
   1860  f468				   .L0105		;  const _B0  =  $B0
   1861  f468
   1862  f468				   .L0106		;  const _B2  =  $B2
   1863  f468
   1864  f468				   .L0107		;  const _B4  =  $B4
   1865  f468
   1866  f468				   .L0108		;  const _B6  =  $B6
   1867  f468
   1868  f468				   .L0109		;  const _B8  =  $B8
   1869  f468
   1870  f468				   .L0110		;  const _BA  =  $BA
   1871  f468
   1872  f468				   .L0111		;  const _BC  =  $BC
   1873  f468
   1874  f468				   .L0112		;  const _BE  =  $BE
   1875  f468
   1876  f468				   .L0113		;  const _C0  =  $C0
   1877  f468
   1878  f468				   .L0114		;  const _C2  =  $C2
   1879  f468
   1880  f468				   .L0115		;  const _C4  =  $C4
   1881  f468
   1882  f468				   .L0116		;  const _C6  =  $C6
   1883  f468
   1884  f468				   .L0117		;  const _C8  =  $C8
   1885  f468
   1886  f468				   .L0118		;  const _CA  =  $CA
   1887  f468
   1888  f468				   .L0119		;  const _CC  =  $CC
   1889  f468
   1890  f468				   .L0120		;  const _CE  =  $CE
   1891  f468
   1892  f468				   .L0121		;  const _D0  =  $D0
   1893  f468
   1894  f468				   .L0122		;  const _D2  =  $D2
   1895  f468
   1896  f468				   .L0123		;  const _D4  =  $D4
   1897  f468
   1898  f468				   .L0124		;  const _D6  =  $D6
   1899  f468
   1900  f468				   .L0125		;  const _D8  =  $D8
   1901  f468
   1902  f468				   .L0126		;  const _DA  =  $DA
   1903  f468
   1904  f468				   .L0127		;  const _DC  =  $DC
   1905  f468
   1906  f468				   .L0128		;  const _DE  =  $DE
   1907  f468
   1908  f468				   .L0129		;  const _E0  =  $E0
   1909  f468
   1910  f468				   .L0130		;  const _E2  =  $E2
   1911  f468
   1912  f468				   .L0131		;  const _E4  =  $E4
   1913  f468
   1914  f468				   .L0132		;  const _E6  =  $E6
   1915  f468
   1916  f468				   .L0133		;  const _E8  =  $E8
   1917  f468
   1918  f468				   .L0134		;  const _EA  =  $EA
   1919  f468
   1920  f468				   .L0135		;  const _EC  =  $EC
   1921  f468
   1922  f468				   .L0136		;  const _EE  =  $EE
   1923  f468
   1924  f468				   .L0137		;  const _F0  =  $F0
   1925  f468
   1926  f468				   .L0138		;  const _F2  =  $F2
   1927  f468
   1928  f468				   .L0139		;  const _F4  =  $F4
   1929  f468
   1930  f468				   .L0140		;  const _F6  =  $F6
   1931  f468
   1932  f468				   .L0141		;  const _F8  =  $F8
   1933  f468
   1934  f468				   .L0142		;  const _FA  =  $FA
   1935  f468
   1936  f468				   .L0143		;  const _FC  =  $FC
   1937  f468
   1938  f468				   .L0144		;  const _FE  =  $FE
   1939  f468
   1940  f468				   .
   1941  f468							; 
   1942  f468
   1943  f468				   .initialsetup
   1944  f468							; initialsetup
   1945  f468
   1946  f468				   .
   1947  f468							; 
   1948  f468
   1949  f468				   .L0145		;  playfield:
   1950  f468
   1951  f468					      ifconst	pfres
   1952  f468		       a2 1f		      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1953  f46a				  -	      else
   1954  f46a				  -	      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1955  f46a					      endif
   1956  f46a		       4c 99 f4 	      jmp	pflabel0
   1957  f46d				   PF_data0
   1958  f46d		       1f ff		      .byte.b	%00011111, %11111111
   1959  f46f					      if	(pfwidth>2)
   1960  f46f		       ff 0f		      .byte.b	%11111111, %00001111
   1961  f471					      endif
   1962  f471		       0f ff		      .byte.b	%00001111, %11111111
   1963  f473					      if	(pfwidth>2)
   1964  f473		       ff 07		      .byte.b	%11111111, %00000111
   1965  f475					      endif
   1966  f475		       03 ff		      .byte.b	%00000011, %11111111
   1967  f477					      if	(pfwidth>2)
   1968  f477		       ff 01		      .byte.b	%11111111, %00000001
   1969  f479					      endif
   1970  f479		       00 fc		      .byte.b	%00000000, %11111100
   1971  f47b					      if	(pfwidth>2)
   1972  f47b		       f8 00		      .byte.b	%11111000, %00000000
   1973  f47d					      endif
   1974  f47d		       00 f0		      .byte.b	%00000000, %11110000
   1975  f47f					      if	(pfwidth>2)
   1976  f47f		       e0 00		      .byte.b	%11100000, %00000000
   1977  f481					      endif
   1978  f481		       00 f0		      .byte.b	%00000000, %11110000
   1979  f483					      if	(pfwidth>2)
   1980  f483		       e0 00		      .byte.b	%11100000, %00000000
   1981  f485					      endif
   1982  f485		       00 f0		      .byte.b	%00000000, %11110000
   1983  f487					      if	(pfwidth>2)
   1984  f487		       e0 00		      .byte.b	%11100000, %00000000
   1985  f489					      endif
   1986  f489		       00 f0		      .byte.b	%00000000, %11110000
   1987  f48b					      if	(pfwidth>2)
   1988  f48b		       e0 00		      .byte.b	%11100000, %00000000
   1989  f48d					      endif
   1990  f48d		       00 ff		      .byte.b	%00000000, %11111111
   1991  f48f					      if	(pfwidth>2)
   1992  f48f		       fe 00		      .byte.b	%11111110, %00000000
   1993  f491					      endif
   1994  f491		       03 ff		      .byte.b	%00000011, %11111111
   1995  f493					      if	(pfwidth>2)
   1996  f493		       ff 03		      .byte.b	%11111111, %00000011
   1997  f495					      endif
   1998  f495		       0f ff		      .byte.b	%00001111, %11111111
   1999  f497					      if	(pfwidth>2)
   2000  f497		       ff 0f		      .byte.b	%11111111, %00001111
   2001  f499					      endif
   2002  f499				   pflabel0
   2003  f499		       bd 6d f4 	      lda	PF_data0,x
   2004  f49c		       95 b4		      sta	playfield,x
   2005  f49e		       ca		      dex
   2006  f49f		       10 f8		      bpl	pflabel0
   2007  f4a1				   .
   2008  f4a1							; 
   2009  f4a1
   2010  f4a1				   .L0146		;  pfcolors:
   2011  f4a1
   2012  f4a1		       a9 06		      lda	# _06
   2013  f4a3		       85 08		      sta	COLUPF
   2014  f4a5					      ifconst	pfres
   2015  f4a5		       a9 f6		      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   2016  f4a7				  -	      else
   2017  f4a7				  -	      lda	#>(pfcolorlabel13-84)
   2018  f4a7					      endif
   2019  f4a7		       85 f1		      sta	pfcolortable+1
   2020  f4a9					      ifconst	pfres
   2021  f4a9		       a9 04		      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   2022  f4ab				  -	      else
   2023  f4ab				  -	      lda	#<(pfcolorlabel13-84)
   2024  f4ab					      endif
   2025  f4ab		       85 f0		      sta	pfcolortable
   2026  f4ad				   .
   2027  f4ad							; 
   2028  f4ad
   2029  f4ad				   .L0147		;  player0:
   2030  f4ad
   2031  f4ad		       a2 94		      LDX	#<playerL0147_0
   2032  f4af		       86 8a		      STX	player0pointerlo
   2033  f4b1		       a9 f6		      LDA	#>playerL0147_0
   2034  f4b3		       85 8b		      STA	player0pointerhi
   2035  f4b5		       a9 07		      LDA	#7
   2036  f4b7		       85 8e		      STA	player0height
   2037  f4b9				   .L0148		;  player0color:
   2038  f4b9
   2039  f4b9		       a2 9c		      LDX	#<playercolorL0148_0
   2040  f4bb		       86 90		      STX	player0color
   2041  f4bd		       a9 f6		      LDA	#>playercolorL0148_0
   2042  f4bf		       85 91		      STA	player0color+1
   2043  f4c1				   .
   2044  f4c1							; 
   2045  f4c1
   2046  f4c1				   .L0149		;  scorecolor	=  $0f
   2047  f4c1
   2048  f4c1		       a9 0f		      LDA	#$0f
   2049  f4c3		       85 a3		      STA	scorecolor
   2050  f4c5				   .
   2051  f4c5							; 
   2052  f4c5
   2053  f4c5				   .L0150		;  player1:
   2054  f4c5
   2055  f4c5		       a2 a4		      LDX	#<playerL0150_1
   2056  f4c7		       86 8c		      STX	player1pointerlo
   2057  f4c9		       a9 f6		      LDA	#>playerL0150_1
   2058  f4cb		       85 8d		      STA	player1pointerhi
   2059  f4cd		       a9 07		      LDA	#7
   2060  f4cf		       85 8f		      STA	player1height
   2061  f4d1				   .L0151		;  player1color:
   2062  f4d1
   2063  f4d1		       a2 ac		      LDX	#<playercolorL0151_1
   2064  f4d3		       86 87		      STX	player1color
   2065  f4d5		       a9 f6		      LDA	#>playercolorL0151_1
   2066  f4d7		       85 88		      STA	player1color+1
   2067  f4d9				   .
   2068  f4d9							; 
   2069  f4d9
   2070  f4d9				   .L0152		;  player0x = 30 : player0y = 40
   2071  f4d9
   2072  f4d9		       a9 1e		      LDA	#30
   2073  f4db		       85 80		      STA	player0x
   2074  f4dd		       a9 28		      LDA	#40
   2075  f4df		       85 85		      STA	player0y
   2076  f4e1				   .L0153		;  player1x = 130 : player1y = 60
   2077  f4e1
   2078  f4e1		       a9 82		      LDA	#130
   2079  f4e3		       85 81		      STA	player1x
   2080  f4e5		       a9 3c		      LDA	#60
   2081  f4e7		       85 86		      STA	player1y
   2082  f4e9				   .L0154		;  ballx = 80 : bally = 70 : ballheight = 3 : CTRLPF = $21
   2083  f4e9
   2084  f4e9		       a9 50		      LDA	#80
   2085  f4eb		       85 84		      STA	ballx
   2086  f4ed		       a9 46		      LDA	#70
   2087  f4ef		       85 89		      STA	bally
   2088  f4f1		       a9 03		      LDA	#3
   2089  f4f3		       85 92		      STA	ballheight
   2090  f4f5		       a9 21		      LDA	#$21
   2091  f4f7		       85 0a		      STA	CTRLPF
   2092  f4f9				   .L0155		;  oldballx = ballx
   2093  f4f9
   2094  f4f9		       a5 84		      LDA	ballx
   2095  f4fb		       85 ea		      STA	oldballx
   2096  f4fd				   .L0156		;  oldbally = bally
   2097  f4fd
   2098  f4fd		       a5 89		      LDA	bally
   2099  f4ff		       85 eb		      STA	oldbally
   2100  f501				   .
   2101  f501							; 
   2102  f501
   2103  f501				   .mainloop
   2104  f501							; mainloop
   2105  f501
   2106  f501				   .L0157		;  threecount = threecount + 1 : if threecount > 2 then threecount = 0
   2107  f501
   2108  f501		       e6 d4		      INC	threecount
   2109  f503		       a9 02		      LDA	#2
   2110  f505		       c5 d4		      CMP	threecount
   2111  f507		       b0 04		      BCS	.skipL0157
   2112  f509				   .condpart0
   2113  f509		       a9 00		      LDA	#0
   2114  f50b		       85 d4		      STA	threecount
   2115  f50d				   .skipL0157
   2116  f50d				   .
   2117  f50d							; 
   2118  f50d
   2119  f50d				   .L0158		;  COLUPF = $ad
   2120  f50d
   2121  f50d		       a9 ad		      LDA	#$ad
   2122  f50f		       85 08		      STA	COLUPF
   2123  f511				   .
   2124  f511							; 
   2125  f511
   2126  f511				   .L0159		;  drawscreen
   2127  f511
   2128  f511		       20 c8 f3 	      jsr	drawscreen
   2129  f514				   .
   2130  f514							; 
   2131  f514
   2132  f514				   .L0160		;  on threecount goto one two three
   2133  f514
   2134  f514		       a6 d4		      LDX	threecount
   2135  f516		       bd 1f f5 	      LDA	.L0160jumptablehi,x
   2136  f519		       48		      PHA
   2137  f51a		       bd 22 f5 	      LDA	.L0160jumptablelo,x
   2138  f51d		       48		      PHA
   2139  f51e		       60		      RTS
   2140  f51f				   .L0160jumptablehi
   2141  f51f		       f5		      .byte.b	>(.one-1)
   2142  f520		       f5		      .byte.b	>(.two-1)
   2143  f521		       f5		      .byte.b	>(.three-1)
   2144  f522				   .L0160jumptablelo
   2145  f522		       24		      .byte.b	<(.one-1)
   2146  f523		       bc		      .byte.b	<(.two-1)
   2147  f524		       d2		      .byte.b	<(.three-1)
   2148  f525				   .one
   2149  f525							; one
   2150  f525
   2151  f525				   .L0161		;  if !collision(ball,playfield) then goto nocollisionone
   2152  f525
   2153  f525		       24 06		      bit	CXBLPF
   2154  f527		       30 03		      BMI	.skipL0161
   2155  f529				   .condpart1
   2156  f529		       4c 38 f5 	      jmp	.nocollisionone
   2157  f52c
   2158  f52c				   .skipL0161
   2159  f52c				   .L0162		;  temp1 = oldballx : oldballx = ballx : ballx = temp1
   2160  f52c
   2161  f52c		       a5 ea		      LDA	oldballx
   2162  f52e		       85 9c		      STA	temp1
   2163  f530		       a5 84		      LDA	ballx
   2164  f532		       85 ea		      STA	oldballx
   2165  f534		       a5 9c		      LDA	temp1
   2166  f536		       85 84		      STA	ballx
   2167  f538				   .nocollisionone
   2168  f538							; nocollisionone
   2169  f538
   2170  f538				   .
   2171  f538							; 
   2172  f538
   2173  f538				   .checknewroom
   2174  f538							; checknewroom
   2175  f538
   2176  f538				   .L0163		;  if ballx < 3 then playerroom = playerroom - 1 : ballx = 157 : gosub drawroom
   2177  f538
   2178  f538		       a5 84		      LDA	ballx
   2179  f53a		       c9 03		      CMP	#3
   2180  f53c		       b0 09		      BCS	.skipL0163
   2181  f53e				   .condpart2
   2182  f53e		       c6 d5		      DEC	playerroom
   2183  f540		       a9 9d		      LDA	#157
   2184  f542		       85 84		      STA	ballx
   2185  f544		       20 f5 f5 	      jsr	.drawroom
   2186  f547
   2187  f547				   .skipL0163
   2188  f547				   .L0164		;  if ballx > 157 then playerroom = playerroom + 1 : ballx = 3 : gosub drawroom
   2189  f547
   2190  f547		       a9 9d		      LDA	#157
   2191  f549		       c5 84		      CMP	ballx
   2192  f54b		       b0 09		      BCS	.skipL0164
   2193  f54d				   .condpart3
   2194  f54d		       e6 d5		      INC	playerroom
   2195  f54f		       a9 03		      LDA	#3
   2196  f551		       85 84		      STA	ballx
   2197  f553		       20 f5 f5 	      jsr	.drawroom
   2198  f556
   2199  f556				   .skipL0164
   2200  f556				   .L0165		;  if bally < 3 then playerroom = playerroom - 4 : bally = 85 : gosub drawroom
   2201  f556
   2202  f556		       a5 89		      LDA	bally
   2203  f558		       c9 03		      CMP	#3
   2204  f55a		       b0 0e		      BCS	.skipL0165
   2205  f55c				   .condpart4
   2206  f55c		       a5 d5		      LDA	playerroom
   2207  f55e		       38		      SEC
   2208  f55f		       e9 04		      SBC	#4
   2209  f561		       85 d5		      STA	playerroom
   2210  f563		       a9 55		      LDA	#85
   2211  f565		       85 89		      STA	bally
   2212  f567		       20 f5 f5 	      jsr	.drawroom
   2213  f56a
   2214  f56a				   .skipL0165
   2215  f56a				   .L0166		;  if bally > 85 then playerroom = playerroom + 4 : bally = 3 : gosub drawroom
   2216  f56a
   2217  f56a		       a9 55		      LDA	#85
   2218  f56c		       c5 89		      CMP	bally
   2219  f56e		       b0 0e		      BCS	.skipL0166
   2220  f570				   .condpart5
   2221  f570		       a5 d5		      LDA	playerroom
   2222  f572		       18		      CLC
   2223  f573		       69 04		      ADC	#4
   2224  f575		       85 d5		      STA	playerroom
   2225  f577		       a9 03		      LDA	#3
   2226  f579		       85 89		      STA	bally
   2227  f57b		       20 f5 f5 	      jsr	.drawroom
   2228  f57e
   2229  f57e				   .skipL0166
   2230  f57e				   .
   2231  f57e							; 
   2232  f57e
   2233  f57e				   .L0167		;  oldballx = ballx : oldbally = bally
   2234  f57e
   2235  f57e		       a5 84		      LDA	ballx
   2236  f580		       85 ea		      STA	oldballx
   2237  f582		       a5 89		      LDA	bally
   2238  f584		       85 eb		      STA	oldbally
   2239  f586				   .L0168		;  if joy0up then bally = bally - 3
   2240  f586
   2241  f586		       a9 10		      lda	#$10
   2242  f588		       2c 80 02 	      bit	SWCHA
   2243  f58b		       d0 07		      BNE	.skipL0168
   2244  f58d				   .condpart6
   2245  f58d		       a5 89		      LDA	bally
   2246  f58f		       38		      SEC
   2247  f590		       e9 03		      SBC	#3
   2248  f592		       85 89		      STA	bally
   2249  f594				   .skipL0168
   2250  f594				   .L0169		;  if joy0down then bally = bally + 3
   2251  f594
   2252  f594		       a9 20		      lda	#$20
   2253  f596		       2c 80 02 	      bit	SWCHA
   2254  f599		       d0 07		      BNE	.skipL0169
   2255  f59b				   .condpart7
   2256  f59b		       a5 89		      LDA	bally
   2257  f59d		       18		      CLC
   2258  f59e		       69 03		      ADC	#3
   2259  f5a0		       85 89		      STA	bally
   2260  f5a2				   .skipL0169
   2261  f5a2				   .L0170		;  if joy0left then ballx = ballx - 3
   2262  f5a2
   2263  f5a2		       2c 80 02 	      bit	SWCHA
   2264  f5a5		       70 07		      BVS	.skipL0170
   2265  f5a7				   .condpart8
   2266  f5a7		       a5 84		      LDA	ballx
   2267  f5a9		       38		      SEC
   2268  f5aa		       e9 03		      SBC	#3
   2269  f5ac		       85 84		      STA	ballx
   2270  f5ae				   .skipL0170
   2271  f5ae				   .L0171		;  if joy0right then ballx = ballx + 3
   2272  f5ae
   2273  f5ae		       2c 80 02 	      bit	SWCHA
   2274  f5b1		       30 07		      BMI	.skipL0171
   2275  f5b3				   .condpart9
   2276  f5b3		       a5 84		      LDA	ballx
   2277  f5b5		       18		      CLC
   2278  f5b6		       69 03		      ADC	#3
   2279  f5b8		       85 84		      STA	ballx
   2280  f5ba				   .skipL0171
   2281  f5ba				   .
   2282  f5ba							; 
   2283  f5ba
   2284  f5ba				   .L0172		;  goto donethreecount
   2285  f5ba
   2286  f5ba		       4c f2 f5 	      jmp	.donethreecount
   2287  f5bd
   2288  f5bd				   .two
   2289  f5bd							; two
   2290  f5bd
   2291  f5bd				   .L0173		;  if !collision(ball,playfield) then goto donethreecount
   2292  f5bd
   2293  f5bd		       24 06		      bit	CXBLPF
   2294  f5bf		       30 03		      BMI	.skipL0173
   2295  f5c1				   .condpart10
   2296  f5c1		       4c f2 f5 	      jmp	.donethreecount
   2297  f5c4
   2298  f5c4				   .skipL0173
   2299  f5c4				   .L0174		;  temp1 = oldballx : oldballx = ballx : ballx = temp1
   2300  f5c4
   2301  f5c4		       a5 ea		      LDA	oldballx
   2302  f5c6		       85 9c		      STA	temp1
   2303  f5c8		       a5 84		      LDA	ballx
   2304  f5ca		       85 ea		      STA	oldballx
   2305  f5cc		       a5 9c		      LDA	temp1
   2306  f5ce		       85 84		      STA	ballx
   2307  f5d0				   .L0175		;  goto donethreecount
   2308  f5d0
   2309  f5d0		       4c f2 f5 	      jmp	.donethreecount
   2310  f5d3
   2311  f5d3				   .three
   2312  f5d3							; three
   2313  f5d3
   2314  f5d3				   .L0176		;  if !collision(ball,playfield) then goto donethreecount
   2315  f5d3
   2316  f5d3		       24 06		      bit	CXBLPF
   2317  f5d5		       30 03		      BMI	.skipL0176
   2318  f5d7				   .condpart11
   2319  f5d7		       4c f2 f5 	      jmp	.donethreecount
   2320  f5da
   2321  f5da				   .skipL0176
   2322  f5da				   .L0177		;  temp1 = oldbally : oldbally = bally : bally = temp1
   2323  f5da
   2324  f5da		       a5 eb		      LDA	oldbally
   2325  f5dc		       85 9c		      STA	temp1
   2326  f5de		       a5 89		      LDA	bally
   2327  f5e0		       85 eb		      STA	oldbally
   2328  f5e2		       a5 9c		      LDA	temp1
   2329  f5e4		       85 89		      STA	bally
   2330  f5e6				   .L0178		;  temp1 = oldballx : oldballx = ballx : ballx = temp1
   2331  f5e6
   2332  f5e6		       a5 ea		      LDA	oldballx
   2333  f5e8		       85 9c		      STA	temp1
   2334  f5ea		       a5 84		      LDA	ballx
   2335  f5ec		       85 ea		      STA	oldballx
   2336  f5ee		       a5 9c		      LDA	temp1
   2337  f5f0		       85 84		      STA	ballx
   2338  f5f2				   .
   2339  f5f2							; 
   2340  f5f2
   2341  f5f2				   .donethreecount
   2342  f5f2							; donethreecount
   2343  f5f2
   2344  f5f2				   .
   2345  f5f2							; 
   2346  f5f2
   2347  f5f2				   .L0179		;  goto mainloop
   2348  f5f2
   2349  f5f2		       4c 01 f5 	      jmp	.mainloop
   2350  f5f5
   2351  f5f5				   .
   2352  f5f5							; 
   2353  f5f5
   2354  f5f5				   .drawroom
   2355  f5f5							; drawroom
   2356  f5f5
   2357  f5f5				   .L0180		;  rem ** this is where room drawing code would go
   2358  f5f5
   2359  f5f5				   .L0181		;  return
   2360  f5f5
   2361  f5f5		       60		      RTS
   2362  f5f6					      ifconst	pfres
   2363  f5f6					      if	(<*) > (254-pfres*pfwidth)
   2364  f600		       00 00 00 00*	      align	256
   2365  f600					      endif
   2366  f600					      if	(<*) < (136-pfres*pfwidth)
   2367  f600					      repeat	((136-pfres*pfwidth)-(<*))
   2368  f600		       00		      .byte.b	0
   2367  f600					      repend
   2368  f601		       00		      .byte.b	0
   2367  f601					      repend
   2368  f602		       00		      .byte.b	0
   2367  f602					      repend
   2368  f603		       00		      .byte.b	0
   2367  f603					      repend
   2368  f604		       00		      .byte.b	0
   2367  f604					      repend
   2368  f605		       00		      .byte.b	0
   2367  f605					      repend
   2368  f606		       00		      .byte.b	0
   2367  f606					      repend
   2368  f607		       00		      .byte.b	0
   2367  f607					      repend
   2368  f608		       00		      .byte.b	0
   2367  f608					      repend
   2368  f609		       00		      .byte.b	0
   2367  f609					      repend
   2368  f60a		       00		      .byte.b	0
   2367  f60a					      repend
   2368  f60b		       00		      .byte.b	0
   2367  f60b					      repend
   2368  f60c		       00		      .byte.b	0
   2367  f60c					      repend
   2368  f60d		       00		      .byte.b	0
   2367  f60d					      repend
   2368  f60e		       00		      .byte.b	0
   2367  f60e					      repend
   2368  f60f		       00		      .byte.b	0
   2367  f60f					      repend
   2368  f610		       00		      .byte.b	0
   2367  f610					      repend
   2368  f611		       00		      .byte.b	0
   2367  f611					      repend
   2368  f612		       00		      .byte.b	0
   2367  f612					      repend
   2368  f613		       00		      .byte.b	0
   2367  f613					      repend
   2368  f614		       00		      .byte.b	0
   2367  f614					      repend
   2368  f615		       00		      .byte.b	0
   2367  f615					      repend
   2368  f616		       00		      .byte.b	0
   2367  f616					      repend
   2368  f617		       00		      .byte.b	0
   2367  f617					      repend
   2368  f618		       00		      .byte.b	0
   2367  f618					      repend
   2368  f619		       00		      .byte.b	0
   2367  f619					      repend
   2368  f61a		       00		      .byte.b	0
   2367  f61a					      repend
   2368  f61b		       00		      .byte.b	0
   2367  f61b					      repend
   2368  f61c		       00		      .byte.b	0
   2367  f61c					      repend
   2368  f61d		       00		      .byte.b	0
   2367  f61d					      repend
   2368  f61e		       00		      .byte.b	0
   2367  f61e					      repend
   2368  f61f		       00		      .byte.b	0
   2367  f61f					      repend
   2368  f620		       00		      .byte.b	0
   2367  f620					      repend
   2368  f621		       00		      .byte.b	0
   2367  f621					      repend
   2368  f622		       00		      .byte.b	0
   2367  f622					      repend
   2368  f623		       00		      .byte.b	0
   2367  f623					      repend
   2368  f624		       00		      .byte.b	0
   2367  f624					      repend
   2368  f625		       00		      .byte.b	0
   2367  f625					      repend
   2368  f626		       00		      .byte.b	0
   2367  f626					      repend
   2368  f627		       00		      .byte.b	0
   2367  f627					      repend
   2368  f628		       00		      .byte.b	0
   2367  f628					      repend
   2368  f629		       00		      .byte.b	0
   2367  f629					      repend
   2368  f62a		       00		      .byte.b	0
   2367  f62a					      repend
   2368  f62b		       00		      .byte.b	0
   2367  f62b					      repend
   2368  f62c		       00		      .byte.b	0
   2367  f62c					      repend
   2368  f62d		       00		      .byte.b	0
   2367  f62d					      repend
   2368  f62e		       00		      .byte.b	0
   2367  f62e					      repend
   2368  f62f		       00		      .byte.b	0
   2367  f62f					      repend
   2368  f630		       00		      .byte.b	0
   2367  f630					      repend
   2368  f631		       00		      .byte.b	0
   2367  f631					      repend
   2368  f632		       00		      .byte.b	0
   2367  f632					      repend
   2368  f633		       00		      .byte.b	0
   2367  f633					      repend
   2368  f634		       00		      .byte.b	0
   2367  f634					      repend
   2368  f635		       00		      .byte.b	0
   2367  f635					      repend
   2368  f636		       00		      .byte.b	0
   2367  f636					      repend
   2368  f637		       00		      .byte.b	0
   2367  f637					      repend
   2368  f638		       00		      .byte.b	0
   2367  f638					      repend
   2368  f639		       00		      .byte.b	0
   2367  f639					      repend
   2368  f63a		       00		      .byte.b	0
   2367  f63a					      repend
   2368  f63b		       00		      .byte.b	0
   2367  f63b					      repend
   2368  f63c		       00		      .byte.b	0
   2367  f63c					      repend
   2368  f63d		       00		      .byte.b	0
   2367  f63d					      repend
   2368  f63e		       00		      .byte.b	0
   2367  f63e					      repend
   2368  f63f		       00		      .byte.b	0
   2367  f63f					      repend
   2368  f640		       00		      .byte.b	0
   2367  f640					      repend
   2368  f641		       00		      .byte.b	0
   2367  f641					      repend
   2368  f642		       00		      .byte.b	0
   2367  f642					      repend
   2368  f643		       00		      .byte.b	0
   2367  f643					      repend
   2368  f644		       00		      .byte.b	0
   2367  f644					      repend
   2368  f645		       00		      .byte.b	0
   2367  f645					      repend
   2368  f646		       00		      .byte.b	0
   2367  f646					      repend
   2368  f647		       00		      .byte.b	0
   2367  f647					      repend
   2368  f648		       00		      .byte.b	0
   2367  f648					      repend
   2368  f649		       00		      .byte.b	0
   2367  f649					      repend
   2368  f64a		       00		      .byte.b	0
   2367  f64a					      repend
   2368  f64b		       00		      .byte.b	0
   2367  f64b					      repend
   2368  f64c		       00		      .byte.b	0
   2367  f64c					      repend
   2368  f64d		       00		      .byte.b	0
   2367  f64d					      repend
   2368  f64e		       00		      .byte.b	0
   2367  f64e					      repend
   2368  f64f		       00		      .byte.b	0
   2367  f64f					      repend
   2368  f650		       00		      .byte.b	0
   2367  f650					      repend
   2368  f651		       00		      .byte.b	0
   2367  f651					      repend
   2368  f652		       00		      .byte.b	0
   2367  f652					      repend
   2368  f653		       00		      .byte.b	0
   2367  f653					      repend
   2368  f654		       00		      .byte.b	0
   2367  f654					      repend
   2368  f655		       00		      .byte.b	0
   2367  f655					      repend
   2368  f656		       00		      .byte.b	0
   2367  f656					      repend
   2368  f657		       00		      .byte.b	0
   2367  f657					      repend
   2368  f658		       00		      .byte.b	0
   2367  f658					      repend
   2368  f659		       00		      .byte.b	0
   2367  f659					      repend
   2368  f65a		       00		      .byte.b	0
   2367  f65a					      repend
   2368  f65b		       00		      .byte.b	0
   2367  f65b					      repend
   2368  f65c		       00		      .byte.b	0
   2367  f65c					      repend
   2368  f65d		       00		      .byte.b	0
   2367  f65d					      repend
   2368  f65e		       00		      .byte.b	0
   2367  f65e					      repend
   2368  f65f		       00		      .byte.b	0
   2367  f65f					      repend
   2368  f660		       00		      .byte.b	0
   2367  f660					      repend
   2368  f661		       00		      .byte.b	0
   2367  f661					      repend
   2368  f662		       00		      .byte.b	0
   2367  f662					      repend
   2368  f663		       00		      .byte.b	0
   2367  f663					      repend
   2368  f664		       00		      .byte.b	0
   2367  f664					      repend
   2368  f665		       00		      .byte.b	0
   2367  f665					      repend
   2368  f666		       00		      .byte.b	0
   2367  f666					      repend
   2368  f667		       00		      .byte.b	0
   2369  f668					      repend
   2370  f668					      endif
   2371  f668				  -	      else
   2372  f668				  -	      if	(<*) > 206
   2373  f668				  -	      align	256
   2374  f668				  -	      endif
   2375  f668				  -	      if	(<*) < 88
   2376  f668				  -	      repeat	(88-(<*))
   2377  f668				  -	      .byte	0
   2378  f668				  -	      repend
   2379  f668				  -	      endif
   2380  f668					      endif
   2381  f668				   pfcolorlabel13
   2382  f668		       06 00 00 00	      .byte.b	_06,0,0,0
   2383  f66c		       06 00 00 00	      .byte.b	_06,0,0,0
   2384  f670		       06 00 00 00	      .byte.b	_06,0,0,0
   2385  f674		       06 00 00 00	      .byte.b	_06,0,0,0
   2386  f678		       be 00 00 00	      .byte.b	_BE,0,0,0
   2387  f67c		       be 00 00 00	      .byte.b	_BE,0,0,0
   2388  f680		       be 00 00 00	      .byte.b	_BE,0,0,0
   2389  f684		       be 00 00 00	      .byte.b	_BE,0,0,0
   2390  f688		       0a 00 00 00	      .byte.b	_0A,0,0,0
   2391  f68c		       0a 00 00 00	      .byte.b	_0A,0,0,0
   2392  f690		       0a 00 00 00	      .byte.b	_0A,0,0,0
   2393  f694				  -	      if	(<*) > (<(*+7))
   2394  f694				  -	      repeat	($100-<*)
   2395  f694				  -	      .byte	0
   2396  f694				  -	      repend
   2397  f694					      endif
   2398  f694				   playerL0147_0
   2399  f694		       7c		      .byte.b	%01111100
   2400  f695		       38		      .byte.b	%00111000
   2401  f696		       10		      .byte.b	%00010000
   2402  f697		       10		      .byte.b	%00010000
   2403  f698		       7c		      .byte.b	%01111100
   2404  f699		       92		      .byte.b	%10010010
   2405  f69a		       fe		      .byte.b	%11111110
   2406  f69b		       82		      .byte.b	%10000010
   2407  f69c				  -	      if	(<*) > (<(*+7))
   2408  f69c				  -	      repeat	($100-<*)
   2409  f69c				  -	      .byte	0
   2410  f69c				  -	      repend
   2411  f69c					      endif
   2412  f69c				   playercolorL0148_0
   2413  f69c		       f8		      .byte.b	$f8
   2414  f69d		       f6		      .byte.b	$f6
   2415  f69e		       f4		      .byte.b	$f4
   2416  f69f		       f4		      .byte.b	$f4
   2417  f6a0		       f6		      .byte.b	$f6
   2418  f6a1		       46		      .byte.b	$46
   2419  f6a2		       fa		      .byte.b	$fa
   2420  f6a3		       fa		      .byte.b	$fa
   2421  f6a4				  -	      if	(<*) > (<(*+7))
   2422  f6a4				  -	      repeat	($100-<*)
   2423  f6a4				  -	      .byte	0
   2424  f6a4				  -	      repend
   2425  f6a4					      endif
   2426  f6a4				   playerL0150_1
   2427  f6a4		       3c		      .byte.b	%00111100
   2428  f6a5		       56		      .byte.b	%01010110
   2429  f6a6		       ab		      .byte.b	%10101011
   2430  f6a7		       ff		      .byte.b	%11111111
   2431  f6a8		       93		      .byte.b	%10010011
   2432  f6a9		       bb		      .byte.b	%10111011
   2433  f6aa		       7e		      .byte.b	%01111110
   2434  f6ab		       0c		      .byte.b	%00001100
   2435  f6ac				  -	      if	(<*) > (<(*+7))
   2436  f6ac				  -	      repeat	($100-<*)
   2437  f6ac				  -	      .byte	0
   2438  f6ac				  -	      repend
   2439  f6ac					      endif
   2440  f6ac				   playercolorL0151_1
   2441  f6ac		       f4		      .byte.b	$f4
   2442  f6ad		       f6		      .byte.b	$f6
   2443  f6ae		       f8		      .byte.b	$f8
   2444  f6af		       fa		      .byte.b	$fa
   2445  f6b0		       fa		      .byte.b	$fa
   2446  f6b1		       f8		      .byte.b	$f8
   2447  f6b2		       f6		      .byte.b	$f6
   2448  f6b3		       c6		      .byte.b	$c6
   2449  f6b4					      if	ECHOFIRST
      2280 bytes of ROM space left
   2450  f6b4					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2451  f6b4					      endif
   2452  f6b4		       00 01	   ECHOFIRST  =	1
   2453  f6b4
   2454  f6b4
   2455  f6b4
   2456  f6b4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2457  f6b4
   2458  f6b4							; feel free to modify the score graphics - just keep each digit 8 high
   2459  f6b4							; and keep the conditional compilation stuff intact
   2460  f6b4				  -	      ifconst	ROM2k
   2461  f6b4				  -	      ORG	$F7AC-8
   2462  f6b4					      else
   2463  f6b4				  -	      ifconst	bankswitch
   2464  f6b4				  -	      if	bankswitch == 8
   2465  f6b4				  -	      ORG	$2F94-bscode_length
   2466  f6b4				  -	      RORG	$FF94-bscode_length
   2467  f6b4				  -	      endif
   2468  f6b4				  -	      if	bankswitch == 16
   2469  f6b4				  -	      ORG	$4F94-bscode_length
   2470  f6b4				  -	      RORG	$FF94-bscode_length
   2471  f6b4				  -	      endif
   2472  f6b4				  -	      if	bankswitch == 32
   2473  f6b4				  -	      ORG	$8F94-bscode_length
   2474  f6b4				  -	      RORG	$FF94-bscode_length
   2475  f6b4				  -	      endif
   2476  f6b4				  -	      if	bankswitch == 64
   2477  f6b4				  -	      ORG	$10F80-bscode_length
   2478  f6b4				  -	      RORG	$1FF80-bscode_length
   2479  f6b4				  -	      endif
   2480  f6b4					      else
   2481  ff9c					      ORG	$FF9C
   2482  ff9c					      endif
   2483  ff9c					      endif
   2484  ff9c
   2485  ff9c							; font equates
   2486  ff9c		       00 01	   .21stcentury =	1
   2487  ff9c		       00 02	   alarmclock =	2
   2488  ff9c		       00 03	   handwritten =	3
   2489  ff9c		       00 04	   interrupted =	4
   2490  ff9c		       00 05	   retroputer =	5
   2491  ff9c		       00 06	   whimsey    =	6
   2492  ff9c		       00 07	   tiny       =	7
   2493  ff9c		       00 08	   hex	      =	8
   2494  ff9c
   2495  ff9c				  -	      ifconst	font
   2496  ff9c				  -	      if	font == hex
   2497  ff9c				  -	      ORG	. - 48
   2498  ff9c				  -	      endif
   2499  ff9c					      endif
   2500  ff9c
   2501  ff9c				   scoretable
   2502  ff9c
   2503  ff9c				  -	      ifconst	font
   2504  ff9c				  -	      if	font == .21stcentury
   2505  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2506  ff9c				  -	      endif
   2507  ff9c				  -	      if	font == alarmclock
   2508  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2509  ff9c				  -	      endif
   2510  ff9c				  -	      if	font == handwritten
   2511  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2512  ff9c				  -	      endif
   2513  ff9c				  -	      if	font == interrupted
   2514  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2515  ff9c				  -	      endif
   2516  ff9c				  -	      if	font == retroputer
   2517  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2518  ff9c				  -	      endif
   2519  ff9c				  -	      if	font == whimsey
   2520  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2521  ff9c				  -	      endif
   2522  ff9c				  -	      if	font == tiny
   2523  ff9c				  -	      include	"score_graphics.asm.tiny"
   2524  ff9c				  -	      endif
   2525  ff9c				  -	      if	font == hex
   2526  ff9c				  -	      include	"score_graphics.asm.hex"
   2527  ff9c				  -	      endif
   2528  ff9c					      else		; default font
   2529  ff9c
   2530  ff9c		       3c		      .byte.b	%00111100
   2531  ff9d		       66		      .byte.b	%01100110
   2532  ff9e		       66		      .byte.b	%01100110
   2533  ff9f		       66		      .byte.b	%01100110
   2534  ffa0		       66		      .byte.b	%01100110
   2535  ffa1		       66		      .byte.b	%01100110
   2536  ffa2		       66		      .byte.b	%01100110
   2537  ffa3		       3c		      .byte.b	%00111100
   2538  ffa4
   2539  ffa4		       7e		      .byte.b	%01111110
   2540  ffa5		       18		      .byte.b	%00011000
   2541  ffa6		       18		      .byte.b	%00011000
   2542  ffa7		       18		      .byte.b	%00011000
   2543  ffa8		       18		      .byte.b	%00011000
   2544  ffa9		       38		      .byte.b	%00111000
   2545  ffaa		       18		      .byte.b	%00011000
   2546  ffab		       08		      .byte.b	%00001000
   2547  ffac
   2548  ffac		       7e		      .byte.b	%01111110
   2549  ffad		       60		      .byte.b	%01100000
   2550  ffae		       60		      .byte.b	%01100000
   2551  ffaf		       3c		      .byte.b	%00111100
   2552  ffb0		       06		      .byte.b	%00000110
   2553  ffb1		       06		      .byte.b	%00000110
   2554  ffb2		       46		      .byte.b	%01000110
   2555  ffb3		       3c		      .byte.b	%00111100
   2556  ffb4
   2557  ffb4		       3c		      .byte.b	%00111100
   2558  ffb5		       46		      .byte.b	%01000110
   2559  ffb6		       06		      .byte.b	%00000110
   2560  ffb7		       06		      .byte.b	%00000110
   2561  ffb8		       1c		      .byte.b	%00011100
   2562  ffb9		       06		      .byte.b	%00000110
   2563  ffba		       46		      .byte.b	%01000110
   2564  ffbb		       3c		      .byte.b	%00111100
   2565  ffbc
   2566  ffbc		       0c		      .byte.b	%00001100
   2567  ffbd		       0c		      .byte.b	%00001100
   2568  ffbe		       7e		      .byte.b	%01111110
   2569  ffbf		       4c		      .byte.b	%01001100
   2570  ffc0		       4c		      .byte.b	%01001100
   2571  ffc1		       2c		      .byte.b	%00101100
   2572  ffc2		       1c		      .byte.b	%00011100
   2573  ffc3		       0c		      .byte.b	%00001100
   2574  ffc4
   2575  ffc4		       3c		      .byte.b	%00111100
   2576  ffc5		       46		      .byte.b	%01000110
   2577  ffc6		       06		      .byte.b	%00000110
   2578  ffc7		       06		      .byte.b	%00000110
   2579  ffc8		       3c		      .byte.b	%00111100
   2580  ffc9		       60		      .byte.b	%01100000
   2581  ffca		       60		      .byte.b	%01100000
   2582  ffcb		       7e		      .byte.b	%01111110
   2583  ffcc
   2584  ffcc		       3c		      .byte.b	%00111100
   2585  ffcd		       66		      .byte.b	%01100110
   2586  ffce		       66		      .byte.b	%01100110
   2587  ffcf		       66		      .byte.b	%01100110
   2588  ffd0		       7c		      .byte.b	%01111100
   2589  ffd1		       60		      .byte.b	%01100000
   2590  ffd2		       62		      .byte.b	%01100010
   2591  ffd3		       3c		      .byte.b	%00111100
   2592  ffd4
   2593  ffd4		       30		      .byte.b	%00110000
   2594  ffd5		       30		      .byte.b	%00110000
   2595  ffd6		       30		      .byte.b	%00110000
   2596  ffd7		       18		      .byte.b	%00011000
   2597  ffd8		       0c		      .byte.b	%00001100
   2598  ffd9		       06		      .byte.b	%00000110
   2599  ffda		       42		      .byte.b	%01000010
   2600  ffdb		       3e		      .byte.b	%00111110
   2601  ffdc
   2602  ffdc		       3c		      .byte.b	%00111100
   2603  ffdd		       66		      .byte.b	%01100110
   2604  ffde		       66		      .byte.b	%01100110
   2605  ffdf		       66		      .byte.b	%01100110
   2606  ffe0		       3c		      .byte.b	%00111100
   2607  ffe1		       66		      .byte.b	%01100110
   2608  ffe2		       66		      .byte.b	%01100110
   2609  ffe3		       3c		      .byte.b	%00111100
   2610  ffe4
   2611  ffe4		       3c		      .byte.b	%00111100
   2612  ffe5		       46		      .byte.b	%01000110
   2613  ffe6		       06		      .byte.b	%00000110
   2614  ffe7		       3e		      .byte.b	%00111110
   2615  ffe8		       66		      .byte.b	%01100110
   2616  ffe9		       66		      .byte.b	%01100110
   2617  ffea		       66		      .byte.b	%01100110
   2618  ffeb		       3c		      .byte.b	%00111100
   2619  ffec
   2620  ffec					      ifnconst	DPC_kernel_options
   2621  ffec
   2622  ffec		       00		      .byte.b	%00000000
   2623  ffed		       00		      .byte.b	%00000000
   2624  ffee		       00		      .byte.b	%00000000
   2625  ffef		       00		      .byte.b	%00000000
   2626  fff0		       00		      .byte.b	%00000000
   2627  fff1		       00		      .byte.b	%00000000
   2628  fff2		       00		      .byte.b	%00000000
   2629  fff3		       00		      .byte.b	%00000000
   2630  fff4
   2631  fff4					      endif
   2632  fff4
   2633  fff4					      endif
   2634  fff4
   2635  fff4				  -	      ifconst	ROM2k
   2636  fff4				  -	      ORG	$F7FC
   2637  fff4					      else
   2638  fff4				  -	      ifconst	bankswitch
   2639  fff4				  -	      if	bankswitch == 8
   2640  fff4				  -	      ORG	$2FF4-bscode_length
   2641  fff4				  -	      RORG	$FFF4-bscode_length
   2642  fff4				  -	      endif
   2643  fff4				  -	      if	bankswitch == 16
   2644  fff4				  -	      ORG	$4FF4-bscode_length
   2645  fff4				  -	      RORG	$FFF4-bscode_length
   2646  fff4				  -	      endif
   2647  fff4				  -	      if	bankswitch == 32
   2648  fff4				  -	      ORG	$8FF4-bscode_length
   2649  fff4				  -	      RORG	$FFF4-bscode_length
   2650  fff4				  -	      endif
   2651  fff4				  -	      if	bankswitch == 64
   2652  fff4				  -	      ORG	$10FE0-bscode_length
   2653  fff4				  -	      RORG	$1FFE0-bscode_length
   2654  fff4				  -	      endif
   2655  fff4					      else
   2656  fffc					      ORG	$FFFC
   2657  fffc					      endif
   2658  fffc					      endif
   2659  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2660  fffc
   2661  fffc				  -	      ifconst	bankswitch
   2662  fffc				  -	      if	bankswitch == 8
   2663  fffc				  -	      ORG	$2FFC
   2664  fffc				  -	      RORG	$FFFC
   2665  fffc				  -	      endif
   2666  fffc				  -	      if	bankswitch == 16
   2667  fffc				  -	      ORG	$4FFC
   2668  fffc				  -	      RORG	$FFFC
   2669  fffc				  -	      endif
   2670  fffc				  -	      if	bankswitch == 32
   2671  fffc				  -	      ORG	$8FFC
   2672  fffc				  -	      RORG	$FFFC
   2673  fffc				  -	      endif
   2674  fffc				  -	      if	bankswitch == 64
   2675  fffc				  -	      ORG	$10FF0
   2676  fffc				  -	      RORG	$1FFF0
   2677  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2678  fffc				  -	      ORG	$10FF8
   2679  fffc				  -	      RORG	$1FFF8
   2680  fffc				  -	      ifconst	superchip
   2681  fffc				  -	      .byte	"E","F","S","C"
   2682  fffc				  -	      else
   2683  fffc				  -	      .byte	"E","F","E","F"
   2684  fffc				  -	      endif
   2685  fffc				  -	      ORG	$10FFC
   2686  fffc				  -	      RORG	$1FFFC
   2687  fffc				  -	      endif
   2688  fffc					      else
   2689  fffc				  -	      ifconst	ROM2k
   2690  fffc				  -	      ORG	$F7FC
   2691  fffc					      else
   2692  fffc					      ORG	$FFFC
   2693  fffc					      endif
   2694  fffc					      endif
   2695  fffc		       00 f0		      .word.w	(start & $ffff)
   2696  fffe		       00 f0		      .word.w	(start & $ffff)

------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_sound_data_health_bar.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_sound_data_health_bar.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_sound_data_health_bar.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 41	    _Data_Player_Damaged_length =	.skipL0311-_Data_Player_Damaged
      4  10000 ????
      5  10000 ????		00 35	    _Data_Enemy_Destroyed_length =	.skipL0310-_Data_Enemy_Destroyed
      6  10000 ????
      7  10000 ????		00 19	    _Data_Fire_B_Sound_length =	.skipL0309-_Data_Fire_B_Sound
      8  10000 ????
      9  10000 ????		00 99	    _P_Edge_Right =	153
     10  10000 ????
     11  10000 ????		00 01	    _P_Edge_Left =	1
     12  10000 ????
     13  10000 ????		00 53	    _P_Edge_Bottom =	83
     14  10000 ????
     15  10000 ????		00 0a	    _P_Edge_Top =	10
     16  10000 ????
     17  10000 ????		00 01	    pfscore    =	1
     18  10000 ????
     19  10000 ????		00 ed	    rand16     =	z
     20  10000 ????
     21  10000 ????		00 ec	    _Bit7_Last_Life =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     26  10000 ????
     27  10000 ????		00 ec	    _Bit2_Game_Control =	y
     28  10000 ????
     29  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     30  10000 ????
     31  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     32  10000 ????
     33  10000 ????		00 ec	    _BitOp_01  =	y
     34  10000 ????
     35  10000 ????		00 eb	    _High_Score3 =	x
     36  10000 ????
     37  10000 ????		00 ea	    _High_Score2 =	w
     38  10000 ????
     39  10000 ????		00 e9	    _High_Score1 =	v
     40  10000 ????
     41  10000 ????		00 e8	    _Score3_Mem =	u
     42  10000 ????
     43  10000 ????		00 e7	    _Score2_Mem =	t
     44  10000 ????
     45  10000 ????		00 e6	    _Score1_Mem =	s
     46  10000 ????
     47  10000 ????		00 95	    _sc3       =	score + 2
     48  10000 ????
     49  10000 ????		00 94	    _sc2       =	score + 1
     50  10000 ????
     51  10000 ????		00 93	    _sc1       =	score
     52  10000 ????
     53  10000 ????		00 e5	    _Bit3_AP_P0_Dir =	r
     54  10000 ????
     55  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     56  10000 ????
     57  10000 ????		00 e5	    _Bit1_BW_Check =	r
     58  10000 ????
     59  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     60  10000 ????
     61  10000 ????		00 e5	    _BitOp_02  =	r
     62  10000 ????
     63  10000 ????		00 dd	    _Pause_Color_Tmp =	j
     64  10000 ????
     65  10000 ????		00 dd	    _AP_Dir_Counter =	j
     66  10000 ????
     67  10000 ????		00 dc	    _Pause_Mem_Color_Tmp =	i
     68  10000 ????
     69  10000 ????		00 dc	    _AP_2_Sec_Score_Flip =	i
     70  10000 ????
     71  10000 ????		00 db	    _Pause_Counter_Tmp =	h
     72  10000 ????
     73  10000 ????		00 d8	    _Ch0_Counter =	e
     74  10000 ????
     75  10000 ????		00 d7	    _Ch0_Duration =	d
     76  10000 ????
     77  10000 ????		00 d6	    _Ch0_Sound =	c
     78  10000 ????
     79  10000 ????		00 d5	    _Frame_Counter =	b
     80  10000 ????
     81  10000 ????		00 d4	    _Master_Counter =	a
     82  10000 ????
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_sound_data_health_bar.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 41	    _Data_Player_Damaged_length =	.skipL0311-_Data_Player_Damaged
      4  10000 ????
      5  10000 ????		00 35	    _Data_Enemy_Destroyed_length =	.skipL0310-_Data_Enemy_Destroyed
      6  10000 ????
      7  10000 ????		00 19	    _Data_Fire_B_Sound_length =	.skipL0309-_Data_Fire_B_Sound
      8  10000 ????
      9  10000 ????		00 99	    _P_Edge_Right =	153
     10  10000 ????
     11  10000 ????		00 01	    _P_Edge_Left =	1
     12  10000 ????
     13  10000 ????		00 53	    _P_Edge_Bottom =	83
     14  10000 ????
     15  10000 ????		00 0a	    _P_Edge_Top =	10
     16  10000 ????
     17  10000 ????		00 01	    pfscore    =	1
     18  10000 ????
     19  10000 ????		00 ed	    rand16     =	z
     20  10000 ????
     21  10000 ????		00 ec	    _Bit7_Last_Life =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     26  10000 ????
     27  10000 ????		00 ec	    _Bit2_Game_Control =	y
     28  10000 ????
     29  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     30  10000 ????
     31  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     32  10000 ????
     33  10000 ????		00 ec	    _BitOp_01  =	y
     34  10000 ????
     35  10000 ????		00 eb	    _High_Score3 =	x
     36  10000 ????
     37  10000 ????		00 ea	    _High_Score2 =	w
     38  10000 ????
     39  10000 ????		00 e9	    _High_Score1 =	v
     40  10000 ????
     41  10000 ????		00 e8	    _Score3_Mem =	u
     42  10000 ????
     43  10000 ????		00 e7	    _Score2_Mem =	t
     44  10000 ????
     45  10000 ????		00 e6	    _Score1_Mem =	s
     46  10000 ????
     47  10000 ????		00 95	    _sc3       =	score + 2
     48  10000 ????
     49  10000 ????		00 94	    _sc2       =	score + 1
     50  10000 ????
     51  10000 ????		00 93	    _sc1       =	score
     52  10000 ????
     53  10000 ????		00 e5	    _Bit3_AP_P0_Dir =	r
     54  10000 ????
     55  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     56  10000 ????
     57  10000 ????		00 e5	    _Bit1_BW_Check =	r
     58  10000 ????
     59  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     60  10000 ????
     61  10000 ????		00 e5	    _BitOp_02  =	r
     62  10000 ????
     63  10000 ????		00 dd	    _Pause_Color_Tmp =	j
     64  10000 ????
     65  10000 ????		00 dd	    _AP_Dir_Counter =	j
     66  10000 ????
     67  10000 ????		00 dc	    _Pause_Mem_Color_Tmp =	i
     68  10000 ????
     69  10000 ????		00 dc	    _AP_2_Sec_Score_Flip =	i
     70  10000 ????
     71  10000 ????		00 db	    _Pause_Counter_Tmp =	h
     72  10000 ????
     73  10000 ????		00 d8	    _Ch0_Counter =	e
     74  10000 ????
     75  10000 ????		00 d7	    _Ch0_Duration =	d
     76  10000 ????
     77  10000 ????		00 d6	    _Ch0_Sound =	c
     78  10000 ????
     79  10000 ????		00 d5	    _Frame_Counter =	b
     80  10000 ????
     81  10000 ????		00 d4	    _Master_Counter =	a
     82  10000 ????
------- FILE e:\Documents\bB\batariBasicGames\demos\tinkernut_world_deluxe_sound_data_health_bar.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 66 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; This is a 2-line kernel!
     96  f034					      ifnconst	vertical_reflect
     97  f034				   kernel
     98  f034					      endif
     99  f034							;sta WSYNC
    100  f034		       a9 ff		      lda	#255
    101  f036		       8d 96 02 	      sta	TIM64T
    102  f039
    103  f039		       a9 01		      lda	#1
    104  f03b		       85 27		      sta	VDELBL
    105  f03d		       85 25		      sta	VDELP0
    106  f03f		       a6 92		      ldx	ballheight
    107  f041		       e8		      inx
    108  f042		       e8		      inx
    109  f043		       86 9f		      stx	temp4
    110  f045		       a5 86		      lda	player1y
    111  f047		       85 9e		      sta	temp3
    112  f049
    113  f049				  -	      ifconst	shakescreen
    114  f049				  -	      jsr	doshakescreen
    115  f049					      else
    116  f049		       a6 90		      ldx	missile0height
    117  f04b		       e8		      inx
    118  f04c					      endif
    119  f04c
    120  f04c		       e8		      inx
    121  f04d		       86 f6		      stx	stack1
    122  f04f
    123  f04f		       a5 89		      lda	bally
    124  f051		       85 f7		      sta	stack2
    125  f053
    126  f053		       a5 85		      lda	player0y
    127  f055		       a2 00		      ldx	#0
    128  f057		       85 02		      sta	WSYNC
    129  f059		       86 1b		      stx	GRP0
    130  f05b		       86 1c		      stx	GRP1
    131  f05d		       86 0e		      stx	PF1L
    132  f05f		       86 0f		      stx	PF2
    133  f061		       86 2c		      stx	CXCLR
    134  f063				  -	      ifconst	readpaddle
    135  f063				  -	      stx	paddle
    136  f063					      else
      0  f063					      sleep	3
      1  f063				   .CYCLES    SET	3
      2  f063
      3  f063				  -	      IF	.CYCLES < 2
      4  f063				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f063				  -	      ERR
      6  f063					      ENDIF
      7  f063
      8  f063					      IF	.CYCLES & 1
      9  f063					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f063		       04 00		      nop	0
     11  f065				  -	      ELSE
     12  f065				  -	      bit	VSYNC
     13  f065					      ENDIF
     14  f065				   .CYCLES    SET	.CYCLES - 3
     15  f065					      ENDIF
     16  f065
     17  f065				  -	      REPEAT	.CYCLES / 2
     18  f065				  -	      nop
     19  f065					      REPEND
    138  f065					      endif
    139  f065
    140  f065		       95 9d		      sta	temp2,x
    141  f067
    142  f067							;store these so they can be retrieved later
    143  f067					      ifnconst	pfres
    144  f067		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    145  f069				  -	      else
    146  f069				  -	      ldx	#132-pfres*pfwidth
    147  f069					      endif
    148  f069
    149  f069		       c6 85		      dec	player0y
    150  f06b
    151  f06b		       a5 91		      lda	missile0y
    152  f06d		       85 a0		      sta	temp5
    153  f06f		       a5 88		      lda	missile1y
    154  f071		       85 a1		      sta	temp6
    155  f073
    156  f073		       a5 ef		      lda	playfieldpos
    157  f075		       85 9c		      sta	temp1
    158  f077
    159  f077				  -	      ifconst	pfrowheight
    160  f077				  -	      lda	#pfrowheight+2
    161  f077					      else
    162  f077					      ifnconst	pfres
    163  f077		       a9 0a		      lda	#10
    164  f079				  -	      else
    165  f079				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    166  f079					      endif
    167  f079					      endif
    168  f079		       18		      clc
    169  f07a		       e5 ef		      sbc	playfieldpos
    170  f07c		       85 ef		      sta	playfieldpos
    171  f07e		       4c a6 f0 	      jmp	.startkernel
    172  f081
    173  f081				   .skipDrawP0
    174  f081		       a9 00		      lda	#0
    175  f083		       a8		      tay
    176  f084		       4c d4 f0 	      jmp	.continueP0
    177  f087
    178  f087				   .skipDrawP1
    179  f087		       a9 00		      lda	#0
    180  f089		       a8		      tay
    181  f08a		       4c b0 f0 	      jmp	.continueP1
    182  f08d
    183  f08d				   .kerloop		; enter at cycle 59??
    184  f08d
    185  f08d				   continuekernel
    186  f08d				   continuekernel2
    187  f08d		       b1 90		      lda	(player0color),y	; 5
    188  f08f
    189  f08f				  -	      ifconst	pfres
    190  f08f				  -	      ldy	playfield+pfres*pfwidth-132,x
    191  f08f				  -	      sty	PF1L	;3
    192  f08f				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    193  f08f				  -	      sty	PF2L	;3
    194  f08f				  -	      ldy	playfield+pfres*pfwidth-129,x
    195  f08f				  -	      sty	PF1R	; 3 too early?
    196  f08f				  -			;ldy playfield+pfres*pfwidth-130-pfadjust,x
    197  f08f				  -			;sty PF2R ;3
    198  f08f					      else
    199  f08f		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    200  f091		       84 0e		      sty	PF1L	;3
    201  f093		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    202  f095		       84 0f		      sty	PF2L	;3
    203  f097		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    204  f099		       84 0e		      sty	PF1R	; 3 too early?
    205  f09b							;ldy playfield-48+pfwidth*12+46-128-pfadjust,x;4
    206  f09b							;sty PF2R ;3
    207  f09b					      endif
    208  f09b
    209  f09b		       8d 82 00 	      sta.w	player0colorstore	;4
    210  f09e		       a5 92		      lda	ballheight	;3
    211  f0a0
    212  f0a0							; should be playfield+$38 for width=2
    213  f0a0
    214  f0a0		       c7 89		      dcp	bally
    215  f0a2		       2a		      rol
    216  f0a3		       2a		      rol
    217  f0a4				   goback
    218  f0a4		       85 1f		      sta	ENABL
    219  f0a6				   .startkernel
    220  f0a6		       a5 8f		      lda	player1height	;3
    221  f0a8		       c7 86		      dcp	player1y	;5
    222  f0aa		       90 db		      bcc	.skipDrawP1	;2
    223  f0ac		       a4 86		      ldy	player1y	;3
    224  f0ae		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    225  f0b0							; so it doesn't cross a page boundary!
    226  f0b0
    227  f0b0				   .continueP1
    228  f0b0		       85 1c		      sta	GRP1	;3
    229  f0b2
    230  f0b2					      ifnconst	player1colors
    231  f0b2		       a5 87		      lda	missile1height	;3
    232  f0b4		       c7 88		      dcp	missile1y	;5
    233  f0b6		       2a		      rol		;2
    234  f0b7		       2a		      rol		;2
    235  f0b8		       85 1e		      sta	ENAM1	;3
    236  f0ba				  -	      else
    237  f0ba				  -	      lda	(player1color),y
    238  f0ba				  -	      sta	COLUP1
    239  f0ba				  -	      ifnconst	playercolors
    240  f0ba				  -			;color hack
    241  f0ba				  -			;sleep 7
    242  f0ba				  -	      lda.w	player0colorstore
    243  f0ba				  -	      sta	COLUP0
    244  f0ba				  -	      else
    245  f0ba				  -	      lda.w	player0colorstore
    246  f0ba				  -	      sta	COLUP0
    247  f0ba				  -	      endif
    248  f0ba					      endif
    249  f0ba
    250  f0ba				  -	      ifconst	pfres
    251  f0ba				  -	      lda	playfield+pfres*pfwidth-132,x
    252  f0ba				  -	      sta	PF1L	;3
    253  f0ba				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    254  f0ba				  -	      sta	PF2L	;3
    255  f0ba				  -	      lda	playfield+pfres*pfwidth-129,x
    256  f0ba				  -	      sta	PF1R	; 3 too early?
    257  f0ba				  -			;lda playfield+pfres*pfwidth-130-pfadjust,x 
    258  f0ba				  -			;sta PF2R ;3
    259  f0ba					      else
    260  f0ba		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    261  f0bc		       85 0e		      sta	PF1L	;3
    262  f0be		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    263  f0c0		       85 0f		      sta	PF2L	;3
    264  f0c2		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    265  f0c4		       85 0e		      sta	PF1R	; 3 too early?
    266  f0c6							;lda playfield-48+pfwidth*12+46-128-pfadjust,x;4
    267  f0c6							;sta PF2R ;3
    268  f0c6					      endif
    269  f0c6
      0  f0c6					      sleep	7
      1  f0c6				   .CYCLES    SET	7
      2  f0c6
      3  f0c6				  -	      IF	.CYCLES < 2
      4  f0c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c6				  -	      ERR
      6  f0c6					      ENDIF
      7  f0c6
      8  f0c6					      IF	.CYCLES & 1
      9  f0c6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c6		       04 00		      nop	0
     11  f0c8				  -	      ELSE
     12  f0c8				  -	      bit	VSYNC
     13  f0c8					      ENDIF
     14  f0c8				   .CYCLES    SET	.CYCLES - 3
     15  f0c8					      ENDIF
     16  f0c8
     17  f0c8					      REPEAT	.CYCLES / 2
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     19  f0ca					      REPEND
    271  f0ca
    272  f0ca		       a5 8e		      lda	player0height
    273  f0cc		       c7 85		      dcp	player0y
    274  f0ce		       90 b1		      bcc	.skipDrawP0
    275  f0d0		       a4 85		      ldy	player0y
    276  f0d2		       b1 8a		      lda	(player0pointer),y
    277  f0d4				   .continueP0
    278  f0d4		       85 1b		      sta	GRP0
    279  f0d6
    280  f0d6					      ifnconst	no_blank_lines
    281  f0d6					      ifnconst	playercolors
    282  f0d6		       a5 90		      lda	missile0height	;3
    283  f0d8		       c7 91		      dcp	missile0y	;5
    284  f0da		       e5 f6		      sbc	stack1	;3
    285  f0dc		       85 1d		      sta	ENAM0	;3
    286  f0de				  -	      else
    287  f0de				  -	      lda	(player0color),y
    288  f0de				  -	      sta	player0colorstore
    289  f0de				  -	      sleep	6
    290  f0de					      endif
    291  f0de		       c6 9c		      dec	temp1
    292  f0e0		       d0 ab		      bne	continuekernel
    293  f0e2				  -	      else
    294  f0e2				  -	      dec	temp1
    295  f0e2				  -	      beq	altkernel2
    296  f0e2				  -	      ifconst	readpaddle
    297  f0e2				  -	      ldy	currentpaddle
    298  f0e2				  -	      lda	INPT0,y
    299  f0e2				  -	      bpl	noreadpaddle
    300  f0e2				  -	      inc	paddle
    301  f0e2				  -	      jmp	continuekernel2
    302  f0e2				  -noreadpaddle
    303  f0e2				  -	      sleep	2
    304  f0e2				  -	      jmp	continuekernel
    305  f0e2				  -	      else
    306  f0e2				  -	      ifnconst	playercolors
    307  f0e2				  -	      ifconst	PFcolors
    308  f0e2				  -	      txa
    309  f0e2				  -	      tay
    310  f0e2				  -	      lda	(pfcolortable),y
    311  f0e2				  -	      ifnconst	backgroundchange
    312  f0e2				  -	      sta	COLUPF
    313  f0e2				  -	      else
    314  f0e2				  -	      sta	COLUBK
    315  f0e2				  -	      endif
    316  f0e2				  -	      jmp	continuekernel
    317  f0e2				  -	      else
    318  f0e2				  -	      ifconst	kernelmacrodef
    319  f0e2				  -	      kernelmacro
    320  f0e2				  -	      else
    321  f0e2				  -	      sleep	12
    322  f0e2				  -	      endif
    323  f0e2				  -	      endif
    324  f0e2				  -	      else
    325  f0e2				  -	      lda	(player0color),y
    326  f0e2				  -	      sta	player0colorstore
    327  f0e2				  -	      sleep	4
    328  f0e2				  -	      endif
    329  f0e2				  -	      jmp	continuekernel
    330  f0e2				  -	      endif
    331  f0e2				  -altkernel2
    332  f0e2				  -	      txa
    333  f0e2				  -	      ifnconst	vertical_reflect
    334  f0e2				  -	      sbx	#256-pfwidth
    335  f0e2				  -	      else
    336  f0e2				  -	      sbx	#256-pfwidth/2
    337  f0e2				  -	      endif
    338  f0e2				  -	      bmi	lastkernelline
    339  f0e2				  -	      ifconst	pfrowheight
    340  f0e2				  -	      lda	#pfrowheight
    341  f0e2				  -	      else
    342  f0e2				  -	      ifnconst	pfres
    343  f0e2				  -	      lda	#8
    344  f0e2				  -	      else
    345  f0e2				  -	      lda	#(96/pfres)	; try to come close to the real size
    346  f0e2				  -	      endif
    347  f0e2				  -	      endif
    348  f0e2				  -	      sta	temp1
    349  f0e2				  -	      jmp	continuekernel
    350  f0e2					      endif
    351  f0e2
    352  f0e2				   altkernel
    353  f0e2
    354  f0e2				  -	      ifconst	PFmaskvalue
    355  f0e2				  -	      lda	#PFmaskvalue
    356  f0e2					      else
    357  f0e2		       a9 00		      lda	#0
    358  f0e4					      endif
    359  f0e4		       85 0e		      sta	PF1L
    360  f0e6		       85 0f		      sta	PF2
    361  f0e8
    362  f0e8
    363  f0e8							;sleep 3
    364  f0e8
    365  f0e8							;28 cycles to fix things
    366  f0e8							;minus 11=17
    367  f0e8
    368  f0e8							; lax temp4
    369  f0e8							; clc
    370  f0e8		       8a		      txa
    371  f0e9					      ifnconst	vertical_reflect
    372  f0e9		       cb fc		      sbx	#256-pfwidth
    373  f0eb				  -	      else
    374  f0eb				  -	      sbx	#256-pfwidth/2
    375  f0eb					      endif
    376  f0eb
    377  f0eb		       30 12		      bmi	lastkernelline
    378  f0ed
    379  f0ed				  -	      ifconst	PFcolorandheight
    380  f0ed				  -	      ifconst	pfres
    381  f0ed				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    382  f0ed				  -	      else
    383  f0ed				  -	      ldy	playfieldcolorandheight-87,x
    384  f0ed				  -	      endif
    385  f0ed				  -	      ifnconst	backgroundchange
    386  f0ed				  -	      sty	COLUPF
    387  f0ed				  -	      else
    388  f0ed				  -	      sty	COLUBK
    389  f0ed				  -	      endif
    390  f0ed				  -	      ifconst	pfres
    391  f0ed				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    392  f0ed				  -	      else
    393  f0ed				  -	      lda	playfieldcolorandheight-88,x
    394  f0ed				  -	      endif
    395  f0ed				  -	      sta.w	temp1
    396  f0ed					      endif
    397  f0ed				  -	      ifconst	PFheights
    398  f0ed				  -	      lsr
    399  f0ed				  -	      lsr
    400  f0ed				  -	      tay
    401  f0ed				  -	      lda	(pfheighttable),y
    402  f0ed				  -	      sta.w	temp1
    403  f0ed					      endif
    404  f0ed				  -	      ifconst	PFcolors
    405  f0ed				  -	      tay
    406  f0ed				  -	      lda	(pfcolortable),y
    407  f0ed				  -	      ifnconst	backgroundchange
    408  f0ed				  -	      sta	COLUPF
    409  f0ed				  -	      else
    410  f0ed				  -	      sta	COLUBK
    411  f0ed				  -	      endif
    412  f0ed				  -	      ifconst	pfrowheight
    413  f0ed				  -	      lda	#pfrowheight
    414  f0ed				  -	      else
    415  f0ed				  -	      ifnconst	pfres
    416  f0ed				  -	      lda	#8
    417  f0ed				  -	      else
    418  f0ed				  -	      lda	#(96/pfres)	; try to come close to the real size
    419  f0ed				  -	      endif
    420  f0ed				  -	      endif
    421  f0ed				  -	      sta	temp1
    422  f0ed					      endif
    423  f0ed					      ifnconst	PFcolorandheight
    424  f0ed					      ifnconst	PFcolors
    425  f0ed					      ifnconst	PFheights
    426  f0ed					      ifnconst	no_blank_lines
    427  f0ed							; read paddle 0
    428  f0ed							; lo-res paddle read
    429  f0ed							; bit INPT0
    430  f0ed							; bmi paddleskipread
    431  f0ed							; inc paddle0
    432  f0ed							;donepaddleskip
      0  f0ed					      sleep	10
      1  f0ed				   .CYCLES    SET	10
      2  f0ed
      3  f0ed				  -	      IF	.CYCLES < 2
      4  f0ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ed				  -	      ERR
      6  f0ed					      ENDIF
      7  f0ed
      8  f0ed				  -	      IF	.CYCLES & 1
      9  f0ed				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ed				  -	      nop	0
     11  f0ed				  -	      ELSE
     12  f0ed				  -	      bit	VSYNC
     13  f0ed				  -	      ENDIF
     14  f0ed				  -.CYCLES    SET	.CYCLES - 3
     15  f0ed					      ENDIF
     16  f0ed
     17  f0ed					      REPEAT	.CYCLES / 2
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     19  f0f2					      REPEND
    434  f0f2				  -	      ifconst	pfrowheight
    435  f0f2				  -	      lda	#pfrowheight
    436  f0f2					      else
    437  f0f2					      ifnconst	pfres
    438  f0f2		       a9 08		      lda	#8
    439  f0f4				  -	      else
    440  f0f4				  -	      lda	#(96/pfres)	; try to come close to the real size
    441  f0f4					      endif
    442  f0f4					      endif
    443  f0f4		       85 9c		      sta	temp1
    444  f0f6					      endif
    445  f0f6					      endif
    446  f0f6					      endif
    447  f0f6					      endif
    448  f0f6
    449  f0f6
    450  f0f6		       a5 92		      lda	ballheight
    451  f0f8		       c7 89		      dcp	bally
    452  f0fa		       e5 9f		      sbc	temp4
    453  f0fc
    454  f0fc
    455  f0fc		       4c a4 f0 	      jmp	goback
    456  f0ff
    457  f0ff
    458  f0ff					      ifnconst	no_blank_lines
    459  f0ff				   lastkernelline
    460  f0ff					      ifnconst	PFcolors
      0  f0ff					      sleep	10
      1  f0ff				   .CYCLES    SET	10
      2  f0ff
      3  f0ff				  -	      IF	.CYCLES < 2
      4  f0ff				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ff				  -	      ERR
      6  f0ff					      ENDIF
      7  f0ff
      8  f0ff				  -	      IF	.CYCLES & 1
      9  f0ff				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ff				  -	      nop	0
     11  f0ff				  -	      ELSE
     12  f0ff				  -	      bit	VSYNC
     13  f0ff				  -	      ENDIF
     14  f0ff				  -.CYCLES    SET	.CYCLES - 3
     15  f0ff					      ENDIF
     16  f0ff
     17  f0ff					      REPEAT	.CYCLES / 2
     18  f0ff		       ea		      nop
     17  f0ff					      REPEND
     18  f100		       ea		      nop
     17  f100					      REPEND
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     19  f104					      REPEND
    462  f104				  -	      else
    463  f104				  -	      ldy	#124
    464  f104				  -	      lda	(pfcolortable),y
    465  f104				  -	      sta	COLUPF
    466  f104					      endif
    467  f104
    468  f104				  -	      ifconst	PFheights
    469  f104				  -	      ldx	#1
    470  f104				  -	      sleep	4
    471  f104					      else
    472  f104		       a6 ef		      ldx	playfieldpos
      0  f106					      sleep	3
      1  f106				   .CYCLES    SET	3
      2  f106
      3  f106				  -	      IF	.CYCLES < 2
      4  f106				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f106				  -	      ERR
      6  f106					      ENDIF
      7  f106
      8  f106					      IF	.CYCLES & 1
      9  f106					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f106		       04 00		      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108					      ENDIF
     14  f108				   .CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108				  -	      REPEAT	.CYCLES / 2
     18  f108				  -	      nop
     19  f108					      REPEND
    474  f108					      endif
    475  f108
    476  f108		       4c 26 f1 	      jmp	enterlastkernel
    477  f10b
    478  f10b				  -	      else
    479  f10b				  -lastkernelline
    480  f10b				  -
    481  f10b				  -	      ifconst	PFheights
    482  f10b				  -	      ldx	#1
    483  f10b				  -	      sleep	5
    484  f10b				  -	      else
    485  f10b				  -	      ldx	playfieldpos
    486  f10b				  -	      sleep	4
    487  f10b				  -	      endif
    488  f10b				  -
    489  f10b				  -	      cpx	#1
    490  f10b				  -	      bne	.enterfromNBL
    491  f10b				  -	      jmp	no_blank_lines_bailout
    492  f10b					      endif
    493  f10b
    494  f10b				  -	      if	((<*)>$d5)
    495  f10b				  -	      align	256
    496  f10b					      endif
    497  f10b							; this is a kludge to prevent page wrapping - fix!!!
    498  f10b
    499  f10b				   .skipDrawlastP1
      0  f10b					      sleep	2
      1  f10b				   .CYCLES    SET	2
      2  f10b
      3  f10b				  -	      IF	.CYCLES < 2
      4  f10b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f10b				  -	      ERR
      6  f10b					      ENDIF
      7  f10b
      8  f10b				  -	      IF	.CYCLES & 1
      9  f10b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f10b				  -	      nop	0
     11  f10b				  -	      ELSE
     12  f10b				  -	      bit	VSYNC
     13  f10b				  -	      ENDIF
     14  f10b				  -.CYCLES    SET	.CYCLES - 3
     15  f10b					      ENDIF
     16  f10b
     17  f10b					      REPEAT	.CYCLES / 2
     18  f10b		       ea		      nop
     19  f10c					      REPEND
    501  f10c		       a9 00		      lda	#0
    502  f10e		       4c 38 f1 	      jmp	.continuelastP1
    503  f111
    504  f111				   .endkerloop		; enter at cycle 59??
    505  f111
    506  f111		       ea		      nop
    507  f112
    508  f112				   .enterfromNBL
    509  f112				  -	      ifconst	pfres
    510  f112				  -	      ldy.w	playfield+pfres*pfwidth-4
    511  f112				  -	      sty	PF1L	;3
    512  f112				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    513  f112				  -	      sty	PF2L	;3
    514  f112				  -	      ldy.w	playfield+pfres*pfwidth-1
    515  f112				  -	      sty	PF1R	; possibly too early?
    516  f112				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    517  f112				  -	      sty	PF2R	;3
    518  f112					      else
    519  f112		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    520  f115		       84 0e		      sty	PF1L	;3
    521  f117		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    522  f11a		       84 0f		      sty	PF2L	;3
    523  f11c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    524  f11f		       84 0e		      sty	PF1R	; possibly too early?
    525  f121		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    526  f124		       84 0f		      sty	PF2R	;3
    527  f126					      endif
    528  f126
    529  f126				   enterlastkernel
    530  f126		       a5 92		      lda	ballheight
    531  f128
    532  f128							; tya
    533  f128		       c7 89		      dcp	bally
    534  f12a							; sleep 4
    535  f12a
    536  f12a							; sbc stack3
    537  f12a		       2a		      rol
    538  f12b		       2a		      rol
    539  f12c		       85 1f		      sta	ENABL
    540  f12e
    541  f12e		       a5 8f		      lda	player1height	;3
    542  f130		       c7 86		      dcp	player1y	;5
    543  f132		       90 d7		      bcc	.skipDrawlastP1
    544  f134		       a4 86		      ldy	player1y	;3
    545  f136		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    546  f138							; so it doesn't cross a page boundary!
    547  f138
    548  f138				   .continuelastP1
    549  f138		       85 1c		      sta	GRP1	;3
    550  f13a
    551  f13a					      ifnconst	player1colors
    552  f13a		       a5 87		      lda	missile1height	;3
    553  f13c		       c7 88		      dcp	missile1y	;5
    554  f13e				  -	      else
    555  f13e				  -	      lda	(player1color),y
    556  f13e				  -	      sta	COLUP1
    557  f13e					      endif
    558  f13e
    559  f13e		       ca		      dex
    560  f13f							;dec temp4 ; might try putting this above PF writes
    561  f13f		       f0 36		      beq	endkernel
    562  f141
    563  f141
    564  f141				  -	      ifconst	pfres
    565  f141				  -	      ldy.w	playfield+pfres*pfwidth-4
    566  f141				  -	      sty	PF1L	;3
    567  f141				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    568  f141				  -	      sty	PF2L	;3
    569  f141				  -	      ldy.w	playfield+pfres*pfwidth-1
    570  f141				  -	      sty	PF1R	; possibly too early?
    571  f141				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    572  f141				  -	      sty	PF2R	;3
    573  f141					      else
    574  f141		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    575  f144		       84 0e		      sty	PF1L	;3
    576  f146		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    577  f149		       84 0f		      sty	PF2L	;3
    578  f14b		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    579  f14e		       84 0e		      sty	PF1R	; possibly too early?
    580  f150		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    581  f153		       84 0f		      sty	PF2R	;3
    582  f155					      endif
    583  f155
    584  f155					      ifnconst	player1colors
    585  f155		       2a		      rol		;2
    586  f156		       2a		      rol		;2
    587  f157		       85 1e		      sta	ENAM1	;3
    588  f159				  -	      else
    589  f159				  -	      ifnconst	playercolors
    590  f159				  -	      sleep	7
    591  f159				  -	      else
    592  f159				  -	      lda.w	player0colorstore
    593  f159				  -	      sta	COLUP0
    594  f159				  -	      endif
    595  f159					      endif
    596  f159
    597  f159		       ad 8e 00 	      lda.w	player0height
    598  f15c		       c7 85		      dcp	player0y
    599  f15e		       90 11		      bcc	.skipDrawlastP0
    600  f160		       a4 85		      ldy	player0y
    601  f162		       b1 8a		      lda	(player0pointer),y
    602  f164				   .continuelastP0
    603  f164		       85 1b		      sta	GRP0
    604  f166
    605  f166
    606  f166
    607  f166					      ifnconst	no_blank_lines
    608  f166		       a5 90		      lda	missile0height	;3
    609  f168		       c7 91		      dcp	missile0y	;5
    610  f16a		       e5 f6		      sbc	stack1
    611  f16c		       85 1d		      sta	ENAM0	;3
    612  f16e		       4c 11 f1 	      jmp	.endkerloop
    613  f171				  -	      else
    614  f171				  -	      ifconst	readpaddle
    615  f171				  -	      ldy	currentpaddle
    616  f171				  -	      lda	INPT0,y
    617  f171				  -	      bpl	noreadpaddle2
    618  f171				  -	      inc	paddle
    619  f171				  -	      jmp	.endkerloop
    620  f171				  -noreadpaddle2
    621  f171				  -	      sleep	4
    622  f171				  -	      jmp	.endkerloop
    623  f171				  -	      else		; no_blank_lines and no paddle reading
    624  f171				  -	      pla
    625  f171				  -	      pha		; 14 cycles in 4 bytes
    626  f171				  -	      pla
    627  f171				  -	      pha
    628  f171				  -			; sleep 14
    629  f171				  -	      jmp	.endkerloop
    630  f171				  -	      endif
    631  f171					      endif
    632  f171
    633  f171				   .skipDrawlastP0
      0  f171					      sleep	2
      1  f171				   .CYCLES    SET	2
      2  f171
      3  f171				  -	      IF	.CYCLES < 2
      4  f171				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f171				  -	      ERR
      6  f171					      ENDIF
      7  f171
      8  f171				  -	      IF	.CYCLES & 1
      9  f171				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f171				  -	      nop	0
     11  f171				  -	      ELSE
     12  f171				  -	      bit	VSYNC
     13  f171				  -	      ENDIF
     14  f171				  -.CYCLES    SET	.CYCLES - 3
     15  f171					      ENDIF
     16  f171
     17  f171					      REPEAT	.CYCLES / 2
     18  f171		       ea		      nop
     19  f172					      REPEND
    635  f172		       a9 00		      lda	#0
    636  f174		       4c 64 f1 	      jmp	.continuelastP0
    637  f177
    638  f177				  -	      ifconst	no_blank_lines
    639  f177				  -no_blank_lines_bailout
    640  f177				  -	      ldx	#0
    641  f177					      endif
    642  f177
    643  f177				   endkernel
    644  f177							; 6 digit score routine
    645  f177		       86 0e		      stx	PF1
    646  f179		       86 0f		      stx	PF2
    647  f17b		       86 0d		      stx	PF0
    648  f17d		       18		      clc
    649  f17e
    650  f17e				  -	      ifconst	pfrowheight
    651  f17e				  -	      lda	#pfrowheight+2
    652  f17e					      else
    653  f17e					      ifnconst	pfres
    654  f17e		       a9 0a		      lda	#10
    655  f180				  -	      else
    656  f180				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    657  f180					      endif
    658  f180					      endif
    659  f180
    660  f180		       e5 ef		      sbc	playfieldpos
    661  f182		       85 ef		      sta	playfieldpos
    662  f184		       8a		      txa
    663  f185
    664  f185				  -	      ifconst	shakescreen
    665  f185				  -	      bit	shakescreen
    666  f185				  -	      bmi	noshakescreen2
    667  f185				  -	      ldx	#$3D
    668  f185				  -noshakescreen2
    669  f185					      endif
    670  f185
    671  f185		       95 02		      sta	WSYNC,x
    672  f187
    673  f187							;		  STA WSYNC ;first one, need one more
    674  f187		       85 0b		      sta	REFP0
    675  f189		       85 0c		      sta	REFP1
    676  f18b		       85 1b		      STA	GRP0
    677  f18d		       85 1c		      STA	GRP1
    678  f18f							;		 STA PF1
    679  f18f							;	       STA PF2
    680  f18f		       85 2b		      sta	HMCLR
    681  f191		       85 1d		      sta	ENAM0
    682  f193		       85 1e		      sta	ENAM1
    683  f195		       85 1f		      sta	ENABL
    684  f197
    685  f197		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    686  f199		       85 85		      sta	player0y
    687  f19b		       a5 9e		      lda	temp3
    688  f19d		       85 86		      sta	player1y
    689  f19f					      ifnconst	player1colors
    690  f19f		       a5 a1		      lda	temp6
    691  f1a1		       85 88		      sta	missile1y
    692  f1a3					      endif
    693  f1a3					      ifnconst	playercolors
    694  f1a3					      ifnconst	readpaddle
    695  f1a3		       a5 a0		      lda	temp5
    696  f1a5		       85 91		      sta	missile0y
    697  f1a7					      endif
    698  f1a7					      endif
    699  f1a7		       a5 f7		      lda	stack2
    700  f1a9		       85 89		      sta	bally
    701  f1ab
    702  f1ab				  -	      ifconst	no_blank_lines
    703  f1ab				  -	      sta	WSYNC
    704  f1ab					      endif
    705  f1ab
    706  f1ab		       ad 84 02 	      lda	INTIM
    707  f1ae		       18		      clc
    708  f1af					      ifnconst	vblank_time
    709  f1af							;adc #43+12+87
    710  f1af		       69 8f		      adc	#43+12+88
    711  f1b1				  -	      else
    712  f1b1				  -			;adc #vblank_time+12+87
    713  f1b1				  -	      adc	#vblank_time+12+88
    714  f1b1					      endif
    715  f1b1							; sta WSYNC
    716  f1b1		       8d 96 02 	      sta	TIM64T
    717  f1b4
    718  f1b4				  -	      ifconst	minikernel
    719  f1b4				  -	      jsr	minikernel
    720  f1b4					      endif
    721  f1b4
    722  f1b4							; now reassign temp vars for score pointers
    723  f1b4
    724  f1b4							; score pointers contain:
    725  f1b4							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    726  f1b4							; swap lo2->temp1
    727  f1b4							; swap lo4->temp3
    728  f1b4							; swap lo6->temp5
    729  f1b4					      ifnconst	noscore
    730  f1b4		       a5 97		      lda	scorepointers+1
    731  f1b6							; ldy temp1
    732  f1b6		       85 9c		      sta	temp1
    733  f1b8							; sty scorepointers+1
    734  f1b8
    735  f1b8		       a5 99		      lda	scorepointers+3
    736  f1ba							; ldy temp3
    737  f1ba		       85 9e		      sta	temp3
    738  f1bc							; sty scorepointers+3
    739  f1bc
    740  f1bc
    741  f1bc		       85 2b		      sta	HMCLR
    742  f1be		       ba		      tsx
    743  f1bf		       86 f6		      stx	stack1
    744  f1c1		       a2 e0		      ldx	#$E0
    745  f1c3		       86 20		      stx	HMP0
    746  f1c5
    747  f1c5		       a5 a3		      LDA	scorecolor
    748  f1c7		       85 06		      STA	COLUP0
    749  f1c9		       85 07		      STA	COLUP1
    750  f1cb				  -	      ifconst	scorefade
    751  f1cb				  -	      STA	stack2
    752  f1cb					      endif
    753  f1cb
    754  f1cb					      ifconst	pfscore
    755  f1cb		       a5 f4		      lda	pfscorecolor
    756  f1cd		       85 08		      sta	COLUPF
    757  f1cf					      endif
    758  f1cf		       85 02		      sta	WSYNC
    759  f1d1		       a2 00		      ldx	#0
    760  f1d3		       86 1b		      STx	GRP0
    761  f1d5		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    762  f1d7
    763  f1d7		       a5 9b		      lda	scorepointers+5
    764  f1d9							; ldy temp5
    765  f1d9		       95 a0		      sta	temp5,x
    766  f1db							; sty scorepointers+5
    767  f1db		       a9 ff		      lda	#>scoretable
    768  f1dd		       85 97		      sta	scorepointers+1
    769  f1df		       85 99		      sta	scorepointers+3
    770  f1e1		       85 9b		      sta	scorepointers+5
    771  f1e3		       85 9d		      sta	temp2
    772  f1e5		       85 9f		      sta	temp4
    773  f1e7		       85 a1		      sta	temp6
    774  f1e9		       a0 07		      LDY	#7
    775  f1eb		       84 25		      STY	VDELP0
    776  f1ed		       85 10		      STA	RESP0
    777  f1ef		       85 11		      STA	RESP1
    778  f1f1
    779  f1f1
    780  f1f1		       a9 03		      LDA	#$03
    781  f1f3		       85 04		      STA	NUSIZ0
    782  f1f5		       85 05		      STA	NUSIZ1
    783  f1f7		       85 26		      STA	VDELP1
    784  f1f9		       a9 f0		      LDA	#$F0
    785  f1fb		       85 21		      STA	HMP1
    786  f1fd		       b1 96		      lda	(scorepointers),y
    787  f1ff		       85 1b		      sta	GRP0
    788  f201		       85 2a		      STA	HMOVE	; cycle 73 ?
    789  f203		       4c 0f f2 	      jmp	beginscore
    790  f206
    791  f206
    792  f206				  -	      if	((<*)>$d4)
    793  f206				  -	      align	256	; kludge that potentially wastes space!  should be fixed!
    794  f206					      endif
    795  f206
    796  f206				   loop2
    797  f206		       b1 96		      lda	(scorepointers),y	;+5  68  204
    798  f208		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
    799  f20a					      ifconst	pfscore
    800  f20a		       ad f2 00 	      lda.w	pfscore1
    801  f20d		       85 0e		      sta	PF1
    802  f20f				  -	      else
    803  f20f				  -	      ifconst	scorefade
    804  f20f				  -	      sleep	2
    805  f20f				  -	      dec	stack2	; decrement the temp scorecolor
    806  f20f				  -	      else
    807  f20f				  -	      sleep	7
    808  f20f				  -	      endif
    809  f20f					      endif
    810  f20f							; cycle 0
    811  f20f				   beginscore
    812  f20f		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
    813  f211		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    814  f213		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
    815  f215		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    816  f217		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
    817  f219		       9a		      txs
    818  f21a		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
    819  f21c				  -	      ifconst	scorefade
    820  f21c				  -	      lda	stack2	; load the temp scorecolor
    821  f21c					      else
      0  f21c					      sleep	3
      1  f21c				   .CYCLES    SET	3
      2  f21c
      3  f21c				  -	      IF	.CYCLES < 2
      4  f21c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21c				  -	      ERR
      6  f21c					      ENDIF
      7  f21c
      8  f21c					      IF	.CYCLES & 1
      9  f21c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21c		       04 00		      nop	0
     11  f21e				  -	      ELSE
     12  f21e				  -	      bit	VSYNC
     13  f21e					      ENDIF
     14  f21e				   .CYCLES    SET	.CYCLES - 3
     15  f21e					      ENDIF
     16  f21e
     17  f21e				  -	      REPEAT	.CYCLES / 2
     18  f21e				  -	      nop
     19  f21e					      REPEND
    823  f21e					      endif
    824  f21e
    825  f21e					      ifconst	pfscore
    826  f21e		       a5 f3		      lda	pfscore2
    827  f220		       85 0e		      sta	PF1
    828  f222				  -	      else
    829  f222				  -	      ifconst	scorefade
    830  f222				  -	      sta	COLUP0
    831  f222				  -	      sta	COLUP1
    832  f222				  -	      else
    833  f222				  -	      sleep	6
    834  f222				  -	      endif
    835  f222					      endif
    836  f222
    837  f222		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63
    838  f224		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    839  f226		       ba		      tsx
    840  f227		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    841  f229		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    842  f22b		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    843  f22d		       88		      dey
    844  f22e		       10 d6		      bpl	loop2	;+2  60  180
    845  f230
    846  f230		       a6 f6		      ldx	stack1
    847  f232		       9a		      txs
    848  f233							; lda scorepointers+1
    849  f233		       a4 9c		      ldy	temp1
    850  f235							; sta temp1
    851  f235		       84 97		      sty	scorepointers+1
    852  f237
    853  f237		       a9 00		      LDA	#0
    854  f239		       85 0e		      sta	PF1
    855  f23b		       85 1b		      STA	GRP0
    856  f23d		       85 1c		      STA	GRP1
    857  f23f		       85 25		      STA	VDELP0
    858  f241		       85 26		      STA	VDELP1	;do we need these
    859  f243		       85 04		      STA	NUSIZ0
    860  f245		       85 05		      STA	NUSIZ1
    861  f247
    862  f247							; lda scorepointers+3
    863  f247		       a4 9e		      ldy	temp3
    864  f249							; sta temp3
    865  f249		       84 99		      sty	scorepointers+3
    866  f24b
    867  f24b							; lda scorepointers+5
    868  f24b		       a4 a0		      ldy	temp5
    869  f24d							; sta temp5
    870  f24d		       84 9b		      sty	scorepointers+5
    871  f24f					      endif		;noscore
    872  f24f		       a9 c2		      LDA	#%11000010
    873  f251		       85 02		      sta	WSYNC
    874  f253		       85 01		      STA	VBLANK
      0  f255					      RETURN
      1  f255					      ifnconst	bankswitch
      2  f255		       60		      rts
      3  f256				  -	      else
      4  f256				  -	      jmp	BS_return
      5  f256					      endif
    876  f256
    877  f256				  -	      ifconst	shakescreen
    878  f256				  -doshakescreen
    879  f256				  -	      bit	shakescreen
    880  f256				  -	      bmi	noshakescreen
    881  f256				  -	      sta	WSYNC
    882  f256				  -noshakescreen
    883  f256				  -	      ldx	missile0height
    884  f256				  -	      inx
    885  f256				  -	      rts
    886  f256					      endif
    887  f256
    888  f256							; Provided under the CC0 license. See the included LICENSE.txt for details.
    889  f256
    890  f256							; playfield drawing routines
    891  f256							; you get a 32x12 bitmapped display in a single color :)
    892  f256							; 0-31 and 0-11
    893  f256
    894  f256				   pfclear		; clears playfield - or fill with pattern
    895  f256				  -	      ifconst	pfres
    896  f256				  -	      ldx	#pfres*pfwidth-1
    897  f256					      else
    898  f256		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    899  f258					      endif
    900  f258				   pfclear_loop
    901  f258					      ifnconst	superchip
    902  f258		       95 a4		      sta	playfield,x
    903  f25a				  -	      else
    904  f25a				  -	      sta	playfield-128,x
    905  f25a					      endif
    906  f25a		       ca		      dex
    907  f25b		       10 fb		      bpl	pfclear_loop
      0  f25d					      RETURN
      1  f25d					      ifnconst	bankswitch
      2  f25d		       60		      rts
      3  f25e				  -	      else
      4  f25e				  -	      jmp	BS_return
      5  f25e					      endif
    909  f25e
    910  f25e				   setuppointers
    911  f25e		       86 9d		      stx	temp2	; store on.off.flip value
    912  f260		       aa		      tax		; put x-value in x 
    913  f261		       4a		      lsr
    914  f262		       4a		      lsr
    915  f263		       4a		      lsr		; divide x pos by 8 
    916  f264		       85 9c		      sta	temp1
    917  f266		       98		      tya
    918  f267		       0a		      asl
    919  f268					      if	pfwidth=4
    920  f268		       0a		      asl		; multiply y pos by 4
    921  f269					      endif		; else multiply by 2
    922  f269		       18		      clc
    923  f26a		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    924  f26c		       a8		      tay		; put the value in y
    925  f26d		       a5 9d		      lda	temp2	; restore on.off.flip value
    926  f26f		       60		      rts
    927  f270
    928  f270				   pfread
    929  f270							;x=xvalue, y=yvalue
    930  f270		       20 5e f2 	      jsr	setuppointers
    931  f273		       bd d8 f2 	      lda	setbyte,x
    932  f276		       39 a4 00 	      and	playfield,y
    933  f279		       5d d8 f2 	      eor	setbyte,x
    934  f27c							; beq readzero
    935  f27c							; lda #1
    936  f27c							; readzero
      0  f27c					      RETURN
      1  f27c					      ifnconst	bankswitch
      2  f27c		       60		      rts
      3  f27d				  -	      else
      4  f27d				  -	      jmp	BS_return
      5  f27d					      endif
    938  f27d
    939  f27d				   pfpixel
    940  f27d							;x=xvalue, y=yvalue, a=0,1,2
    941  f27d		       20 5e f2 	      jsr	setuppointers
    942  f280
    943  f280				  -	      ifconst	bankswitch
    944  f280				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    945  f280				  -	      beq	pixelon_r	; if "on" go to on
    946  f280				  -	      lsr
    947  f280				  -	      bcs	pixeloff_r	; value is 1 if true
    948  f280				  -	      lda	playfield,y	; if here, it's "flip"
    949  f280				  -	      eor	setbyte,x
    950  f280				  -	      ifconst	superchip
    951  f280				  -	      sta	playfield-128,y
    952  f280				  -	      else
    953  f280				  -	      sta	playfield,y
    954  f280				  -	      endif
    955  f280				  -	      RETURN
    956  f280				  -pixelon_r
    957  f280				  -	      lda	playfield,y
    958  f280				  -	      ora	setbyte,x
    959  f280				  -	      ifconst	superchip
    960  f280				  -	      sta	playfield-128,y
    961  f280				  -	      else
    962  f280				  -	      sta	playfield,y
    963  f280				  -	      endif
    964  f280				  -	      RETURN
    965  f280				  -pixeloff_r
    966  f280				  -	      lda	setbyte,x
    967  f280				  -	      eor	#$ff
    968  f280				  -	      and	playfield,y
    969  f280				  -	      ifconst	superchip
    970  f280				  -	      sta	playfield-128,y
    971  f280				  -	      else
    972  f280				  -	      sta	playfield,y
    973  f280				  -	      endif
    974  f280				  -	      RETURN
    975  f280				  -
    976  f280					      else
    977  f280		       4c b1 f2 	      jmp	plotpoint
    978  f283					      endif
    979  f283
    980  f283				   pfhline
    981  f283							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    982  f283		       20 5e f2 	      jsr	setuppointers
    983  f286		       4c 90 f2 	      jmp	noinc
    984  f289				   keepgoing
    985  f289		       e8		      inx
    986  f28a		       8a		      txa
    987  f28b		       29 07		      and	#7
    988  f28d		       d0 01		      bne	noinc
    989  f28f		       c8		      iny
    990  f290				   noinc
    991  f290		       20 b1 f2 	      jsr	plotpoint
    992  f293		       e4 9e		      cpx	temp3
    993  f295		       30 f2		      bmi	keepgoing
      0  f297					      RETURN
      1  f297					      ifnconst	bankswitch
      2  f297		       60		      rts
      3  f298				  -	      else
      4  f298				  -	      jmp	BS_return
      5  f298					      endif
    995  f298
    996  f298				   pfvline
    997  f298							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    998  f298		       20 5e f2 	      jsr	setuppointers
    999  f29b		       84 9c		      sty	temp1	; store memory location offset
   1000  f29d		       e6 9e		      inc	temp3	; increase final x by 1 
   1001  f29f		       a5 9e		      lda	temp3
   1002  f2a1		       0a		      asl
   1003  f2a2					      if	pfwidth=4
   1004  f2a2		       0a		      asl		; multiply by 4
   1005  f2a3					      endif		; else multiply by 2
   1006  f2a3		       85 9e		      sta	temp3	; store it
   1007  f2a5							; Thanks to Michael Rideout for fixing a bug in this code
   1008  f2a5							; right now, temp1=y=starting memory location, temp3=final
   1009  f2a5							; x should equal original x value
   1010  f2a5				   keepgoingy
   1011  f2a5		       20 b1 f2 	      jsr	plotpoint
   1012  f2a8		       c8		      iny
   1013  f2a9		       c8		      iny
   1014  f2aa					      if	pfwidth=4
   1015  f2aa		       c8		      iny
   1016  f2ab		       c8		      iny
   1017  f2ac					      endif
   1018  f2ac		       c4 9e		      cpy	temp3
   1019  f2ae		       30 f5		      bmi	keepgoingy
      0  f2b0					      RETURN
      1  f2b0					      ifnconst	bankswitch
      2  f2b0		       60		      rts
      3  f2b1				  -	      else
      4  f2b1				  -	      jmp	BS_return
      5  f2b1					      endif
   1021  f2b1
   1022  f2b1				   plotpoint
   1023  f2b1		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1024  f2b3		       f0 0d		      beq	pixelon	; if "on" go to on
   1025  f2b5		       4a		      lsr
   1026  f2b6		       b0 14		      bcs	pixeloff	; value is 1 if true
   1027  f2b8		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1028  f2bb		       5d d8 f2 	      eor	setbyte,x
   1029  f2be				  -	      ifconst	superchip
   1030  f2be				  -	      sta	playfield-128,y
   1031  f2be					      else
   1032  f2be		       99 a4 00 	      sta	playfield,y
   1033  f2c1					      endif
   1034  f2c1		       60		      rts
   1035  f2c2				   pixelon
   1036  f2c2		       b9 a4 00 	      lda	playfield,y
   1037  f2c5		       1d d8 f2 	      ora	setbyte,x
   1038  f2c8				  -	      ifconst	superchip
   1039  f2c8				  -	      sta	playfield-128,y
   1040  f2c8					      else
   1041  f2c8		       99 a4 00 	      sta	playfield,y
   1042  f2cb					      endif
   1043  f2cb		       60		      rts
   1044  f2cc				   pixeloff
   1045  f2cc		       bd d8 f2 	      lda	setbyte,x
   1046  f2cf		       49 ff		      eor	#$ff
   1047  f2d1		       39 a4 00 	      and	playfield,y
   1048  f2d4				  -	      ifconst	superchip
   1049  f2d4				  -	      sta	playfield-128,y
   1050  f2d4					      else
   1051  f2d4		       99 a4 00 	      sta	playfield,y
   1052  f2d7					      endif
   1053  f2d7		       60		      rts
   1054  f2d8
   1055  f2d8				   setbyte
   1056  f2d8					      ifnconst	pfcenter
   1057  f2d8		       80		      .byte.b	$80
   1058  f2d9		       40		      .byte.b	$40
   1059  f2da		       20		      .byte.b	$20
   1060  f2db		       10		      .byte.b	$10
   1061  f2dc		       08		      .byte.b	$08
   1062  f2dd		       04		      .byte.b	$04
   1063  f2de		       02		      .byte.b	$02
   1064  f2df		       01		      .byte.b	$01
   1065  f2e0					      endif
   1066  f2e0		       01		      .byte.b	$01
   1067  f2e1		       02		      .byte.b	$02
   1068  f2e2		       04		      .byte.b	$04
   1069  f2e3		       08		      .byte.b	$08
   1070  f2e4		       10		      .byte.b	$10
   1071  f2e5		       20		      .byte.b	$20
   1072  f2e6		       40		      .byte.b	$40
   1073  f2e7		       80		      .byte.b	$80
   1074  f2e8		       80		      .byte.b	$80
   1075  f2e9		       40		      .byte.b	$40
   1076  f2ea		       20		      .byte.b	$20
   1077  f2eb		       10		      .byte.b	$10
   1078  f2ec		       08		      .byte.b	$08
   1079  f2ed		       04		      .byte.b	$04
   1080  f2ee		       02		      .byte.b	$02
   1081  f2ef		       01		      .byte.b	$01
   1082  f2f0		       01		      .byte.b	$01
   1083  f2f1		       02		      .byte.b	$02
   1084  f2f2		       04		      .byte.b	$04
   1085  f2f3		       08		      .byte.b	$08
   1086  f2f4		       10		      .byte.b	$10
   1087  f2f5		       20		      .byte.b	$20
   1088  f2f6		       40		      .byte.b	$40
   1089  f2f7		       80		      .byte.b	$80
   1090  f2f8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1091  f2f8
   1092  f2f8				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f8		       d0 13		      bne	notleft
   1094  f2fa							;left
   1095  f2fa				  -	      ifconst	pfres
   1096  f2fa				  -	      ldx	#pfres*4
   1097  f2fa					      else
   1098  f2fa		       a2 30		      ldx	#48
   1099  f2fc					      endif
   1100  f2fc				   leftloop
   1101  f2fc		       b5 a3		      lda	playfield-1,x
   1102  f2fe		       4a		      lsr
   1103  f2ff
   1104  f2ff				  -	      ifconst	superchip
   1105  f2ff				  -	      lda	playfield-2,x
   1106  f2ff				  -	      rol
   1107  f2ff				  -	      sta	playfield-130,x
   1108  f2ff				  -	      lda	playfield-3,x
   1109  f2ff				  -	      ror
   1110  f2ff				  -	      sta	playfield-131,x
   1111  f2ff				  -	      lda	playfield-4,x
   1112  f2ff				  -	      rol
   1113  f2ff				  -	      sta	playfield-132,x
   1114  f2ff				  -	      lda	playfield-1,x
   1115  f2ff				  -	      ror
   1116  f2ff				  -	      sta	playfield-129,x
   1117  f2ff					      else
   1118  f2ff		       36 a2		      rol	playfield-2,x
   1119  f301		       76 a1		      ror	playfield-3,x
   1120  f303		       36 a0		      rol	playfield-4,x
   1121  f305		       76 a3		      ror	playfield-1,x
   1122  f307					      endif
   1123  f307
   1124  f307		       8a		      txa
   1125  f308		       cb 04		      sbx	#4
   1126  f30a		       d0 f0		      bne	leftloop
      0  f30c					      RETURN
      1  f30c					      ifnconst	bankswitch
      2  f30c		       60		      rts
      3  f30d				  -	      else
      4  f30d				  -	      jmp	BS_return
      5  f30d					      endif
   1128  f30d
   1129  f30d				   notleft
   1130  f30d		       4a		      lsr
   1131  f30e		       90 13		      bcc	notright
   1132  f310							;right
   1133  f310
   1134  f310				  -	      ifconst	pfres
   1135  f310				  -	      ldx	#pfres*4
   1136  f310					      else
   1137  f310		       a2 30		      ldx	#48
   1138  f312					      endif
   1139  f312				   rightloop
   1140  f312		       b5 a0		      lda	playfield-4,x
   1141  f314		       4a		      lsr
   1142  f315				  -	      ifconst	superchip
   1143  f315				  -	      lda	playfield-3,x
   1144  f315				  -	      rol
   1145  f315				  -	      sta	playfield-131,x
   1146  f315				  -	      lda	playfield-2,x
   1147  f315				  -	      ror
   1148  f315				  -	      sta	playfield-130,x
   1149  f315				  -	      lda	playfield-1,x
   1150  f315				  -	      rol
   1151  f315				  -	      sta	playfield-129,x
   1152  f315				  -	      lda	playfield-4,x
   1153  f315				  -	      ror
   1154  f315				  -	      sta	playfield-132,x
   1155  f315					      else
   1156  f315		       36 a1		      rol	playfield-3,x
   1157  f317		       76 a2		      ror	playfield-2,x
   1158  f319		       36 a3		      rol	playfield-1,x
   1159  f31b		       76 a0		      ror	playfield-4,x
   1160  f31d					      endif
   1161  f31d		       8a		      txa
   1162  f31e		       cb 04		      sbx	#4
   1163  f320		       d0 f0		      bne	rightloop
      0  f322					      RETURN
      1  f322					      ifnconst	bankswitch
      2  f322		       60		      rts
      3  f323				  -	      else
      4  f323				  -	      jmp	BS_return
      5  f323					      endif
   1165  f323
   1166  f323				   notright
   1167  f323		       4a		      lsr
   1168  f324		       90 49		      bcc	notup
   1169  f326							;up
   1170  f326		       4a		      lsr
   1171  f327		       90 02		      bcc	onedecup
   1172  f329		       c6 ef		      dec	playfieldpos
   1173  f32b				   onedecup
   1174  f32b		       c6 ef		      dec	playfieldpos
   1175  f32d		       f0 02		      beq	shiftdown
   1176  f32f		       10 3d		      bpl	noshiftdown2
   1177  f331				   shiftdown
   1178  f331				  -	      ifconst	pfrowheight
   1179  f331				  -	      lda	#pfrowheight
   1180  f331					      else
   1181  f331					      ifnconst	pfres
   1182  f331		       a9 08		      lda	#8
   1183  f333				  -	      else
   1184  f333				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f333					      endif
   1186  f333					      endif
   1187  f333
   1188  f333		       85 ef		      sta	playfieldpos
   1189  f335		       a5 a7		      lda	playfield+3
   1190  f337		       85 9f		      sta	temp4
   1191  f339		       a5 a6		      lda	playfield+2
   1192  f33b		       85 9e		      sta	temp3
   1193  f33d		       a5 a5		      lda	playfield+1
   1194  f33f		       85 9d		      sta	temp2
   1195  f341		       a5 a4		      lda	playfield
   1196  f343		       85 9c		      sta	temp1
   1197  f345		       a2 00		      ldx	#0
   1198  f347				   up2
   1199  f347		       b5 a8		      lda	playfield+4,x
   1200  f349				  -	      ifconst	superchip
   1201  f349				  -	      sta	playfield-128,x
   1202  f349				  -	      lda	playfield+5,x
   1203  f349				  -	      sta	playfield-127,x
   1204  f349				  -	      lda	playfield+6,x
   1205  f349				  -	      sta	playfield-126,x
   1206  f349				  -	      lda	playfield+7,x
   1207  f349				  -	      sta	playfield-125,x
   1208  f349					      else
   1209  f349		       95 a4		      sta	playfield,x
   1210  f34b		       b5 a9		      lda	playfield+5,x
   1211  f34d		       95 a5		      sta	playfield+1,x
   1212  f34f		       b5 aa		      lda	playfield+6,x
   1213  f351		       95 a6		      sta	playfield+2,x
   1214  f353		       b5 ab		      lda	playfield+7,x
   1215  f355		       95 a7		      sta	playfield+3,x
   1216  f357					      endif
   1217  f357		       8a		      txa
   1218  f358		       cb fc		      sbx	#252
   1219  f35a				  -	      ifconst	pfres
   1220  f35a				  -	      cpx	#(pfres-1)*4
   1221  f35a					      else
   1222  f35a		       e0 2c		      cpx	#44
   1223  f35c					      endif
   1224  f35c		       d0 e9		      bne	up2
   1225  f35e
   1226  f35e		       a5 9f		      lda	temp4
   1227  f360
   1228  f360				  -	      ifconst	superchip
   1229  f360				  -	      ifconst	pfres
   1230  f360				  -	      sta	playfield+pfres*4-129
   1231  f360				  -	      lda	temp3
   1232  f360				  -	      sta	playfield+pfres*4-130
   1233  f360				  -	      lda	temp2
   1234  f360				  -	      sta	playfield+pfres*4-131
   1235  f360				  -	      lda	temp1
   1236  f360				  -	      sta	playfield+pfres*4-132
   1237  f360				  -	      else
   1238  f360				  -	      sta	playfield+47-128
   1239  f360				  -	      lda	temp3
   1240  f360				  -	      sta	playfield+46-128
   1241  f360				  -	      lda	temp2
   1242  f360				  -	      sta	playfield+45-128
   1243  f360				  -	      lda	temp1
   1244  f360				  -	      sta	playfield+44-128
   1245  f360				  -	      endif
   1246  f360					      else
   1247  f360				  -	      ifconst	pfres
   1248  f360				  -	      sta	playfield+pfres*4-1
   1249  f360				  -	      lda	temp3
   1250  f360				  -	      sta	playfield+pfres*4-2
   1251  f360				  -	      lda	temp2
   1252  f360				  -	      sta	playfield+pfres*4-3
   1253  f360				  -	      lda	temp1
   1254  f360				  -	      sta	playfield+pfres*4-4
   1255  f360					      else
   1256  f360		       85 d3		      sta	playfield+47
   1257  f362		       a5 9e		      lda	temp3
   1258  f364		       85 d2		      sta	playfield+46
   1259  f366		       a5 9d		      lda	temp2
   1260  f368		       85 d1		      sta	playfield+45
   1261  f36a		       a5 9c		      lda	temp1
   1262  f36c		       85 d0		      sta	playfield+44
   1263  f36e					      endif
   1264  f36e					      endif
   1265  f36e				   noshiftdown2
      0  f36e					      RETURN
      1  f36e					      ifnconst	bankswitch
      2  f36e		       60		      rts
      3  f36f				  -	      else
      4  f36f				  -	      jmp	BS_return
      5  f36f					      endif
   1267  f36f
   1268  f36f
   1269  f36f				   notup
   1270  f36f							;down
   1271  f36f		       4a		      lsr
   1272  f370		       b0 02		      bcs	oneincup
   1273  f372		       e6 ef		      inc	playfieldpos
   1274  f374				   oneincup
   1275  f374		       e6 ef		      inc	playfieldpos
   1276  f376		       a5 ef		      lda	playfieldpos
   1277  f378
   1278  f378				  -	      ifconst	pfrowheight
   1279  f378				  -	      cmp	#pfrowheight+1
   1280  f378					      else
   1281  f378					      ifnconst	pfres
   1282  f378		       c9 09		      cmp	#9
   1283  f37a				  -	      else
   1284  f37a				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f37a					      endif
   1286  f37a					      endif
   1287  f37a
   1288  f37a		       90 3b		      bcc	noshiftdown
   1289  f37c		       a9 01		      lda	#1
   1290  f37e		       85 ef		      sta	playfieldpos
   1291  f380
   1292  f380				  -	      ifconst	pfres
   1293  f380				  -	      lda	playfield+pfres*4-1
   1294  f380				  -	      sta	temp4
   1295  f380				  -	      lda	playfield+pfres*4-2
   1296  f380				  -	      sta	temp3
   1297  f380				  -	      lda	playfield+pfres*4-3
   1298  f380				  -	      sta	temp2
   1299  f380				  -	      lda	playfield+pfres*4-4
   1300  f380					      else
   1301  f380		       a5 d3		      lda	playfield+47
   1302  f382		       85 9f		      sta	temp4
   1303  f384		       a5 d2		      lda	playfield+46
   1304  f386		       85 9e		      sta	temp3
   1305  f388		       a5 d1		      lda	playfield+45
   1306  f38a		       85 9d		      sta	temp2
   1307  f38c		       a5 d0		      lda	playfield+44
   1308  f38e					      endif
   1309  f38e
   1310  f38e		       85 9c		      sta	temp1
   1311  f390
   1312  f390				  -	      ifconst	pfres
   1313  f390				  -	      ldx	#(pfres-1)*4
   1314  f390					      else
   1315  f390		       a2 2c		      ldx	#44
   1316  f392					      endif
   1317  f392				   down2
   1318  f392		       b5 a3		      lda	playfield-1,x
   1319  f394				  -	      ifconst	superchip
   1320  f394				  -	      sta	playfield-125,x
   1321  f394				  -	      lda	playfield-2,x
   1322  f394				  -	      sta	playfield-126,x
   1323  f394				  -	      lda	playfield-3,x
   1324  f394				  -	      sta	playfield-127,x
   1325  f394				  -	      lda	playfield-4,x
   1326  f394				  -	      sta	playfield-128,x
   1327  f394					      else
   1328  f394		       95 a7		      sta	playfield+3,x
   1329  f396		       b5 a2		      lda	playfield-2,x
   1330  f398		       95 a6		      sta	playfield+2,x
   1331  f39a		       b5 a1		      lda	playfield-3,x
   1332  f39c		       95 a5		      sta	playfield+1,x
   1333  f39e		       b5 a0		      lda	playfield-4,x
   1334  f3a0		       95 a4		      sta	playfield,x
   1335  f3a2					      endif
   1336  f3a2		       8a		      txa
   1337  f3a3		       cb 04		      sbx	#4
   1338  f3a5		       d0 eb		      bne	down2
   1339  f3a7
   1340  f3a7		       a5 9f		      lda	temp4
   1341  f3a9				  -	      ifconst	superchip
   1342  f3a9				  -	      sta	playfield-125
   1343  f3a9				  -	      lda	temp3
   1344  f3a9				  -	      sta	playfield-126
   1345  f3a9				  -	      lda	temp2
   1346  f3a9				  -	      sta	playfield-127
   1347  f3a9				  -	      lda	temp1
   1348  f3a9				  -	      sta	playfield-128
   1349  f3a9					      else
   1350  f3a9		       85 a7		      sta	playfield+3
   1351  f3ab		       a5 9e		      lda	temp3
   1352  f3ad		       85 a6		      sta	playfield+2
   1353  f3af		       a5 9d		      lda	temp2
   1354  f3b1		       85 a5		      sta	playfield+1
   1355  f3b3		       a5 9c		      lda	temp1
   1356  f3b5		       85 a4		      sta	playfield
   1357  f3b7					      endif
   1358  f3b7				   noshiftdown
      0  f3b7					      RETURN
      1  f3b7					      ifnconst	bankswitch
      2  f3b7		       60		      rts
      3  f3b8				  -	      else
      4  f3b8				  -	      jmp	BS_return
      5  f3b8					      endif
   1360  f3b8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1361  f3b8
   1362  f3b8							;standard routines needed for pretty much all games
   1363  f3b8							; just the random number generator is left - maybe we should remove this asm file altogether?
   1364  f3b8							; repositioning code and score pointer setup moved to overscan
   1365  f3b8							; read switches, joysticks now compiler generated (more efficient)
   1366  f3b8
   1367  f3b8				   randomize
   1368  f3b8		       a5 a2		      lda	rand
   1369  f3ba		       4a		      lsr
   1370  f3bb					      ifconst	rand16
   1371  f3bb		       26 ed		      rol	rand16
   1372  f3bd					      endif
   1373  f3bd		       90 02		      bcc	noeor
   1374  f3bf		       49 b4		      eor	#$B4
   1375  f3c1				   noeor
   1376  f3c1		       85 a2		      sta	rand
   1377  f3c3					      ifconst	rand16
   1378  f3c3		       45 ed		      eor	rand16
   1379  f3c5					      endif
      0  f3c5					      RETURN
      1  f3c5					      ifnconst	bankswitch
      2  f3c5		       60		      rts
      3  f3c6				  -	      else
      4  f3c6				  -	      jmp	BS_return
      5  f3c6					      endif
   1381  f3c6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1382  f3c6
   1383  f3c6				   drawscreen
   1384  f3c6				  -	      ifconst	debugscore
   1385  f3c6				  -	      ldx	#14
   1386  f3c6				  -	      lda	INTIM	; display # cycles left in the score
   1387  f3c6				  -
   1388  f3c6				  -	      ifconst	mincycles
   1389  f3c6				  -	      lda	mincycles
   1390  f3c6				  -	      cmp	INTIM
   1391  f3c6				  -	      lda	mincycles
   1392  f3c6				  -	      bcc	nochange
   1393  f3c6				  -	      lda	INTIM
   1394  f3c6				  -	      sta	mincycles
   1395  f3c6				  -nochange
   1396  f3c6				  -	      endif
   1397  f3c6				  -
   1398  f3c6				  -			; cmp #$2B
   1399  f3c6				  -			; bcs no_cycles_left
   1400  f3c6				  -	      bmi	cycles_left
   1401  f3c6				  -	      ldx	#64
   1402  f3c6				  -	      eor	#$ff	;make negative
   1403  f3c6				  -cycles_left
   1404  f3c6				  -	      stx	scorecolor
   1405  f3c6				  -	      and	#$7f	; clear sign bit
   1406  f3c6				  -	      tax
   1407  f3c6				  -	      lda	scorebcd,x
   1408  f3c6				  -	      sta	score+2
   1409  f3c6				  -	      lda	scorebcd1,x
   1410  f3c6				  -	      sta	score+1
   1411  f3c6				  -	      jmp	done_debugscore
   1412  f3c6				  -scorebcd
   1413  f3c6				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1414  f3c6				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1415  f3c6				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1416  f3c6				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1417  f3c6				  -scorebcd1
   1418  f3c6				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1419  f3c6				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1420  f3c6				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1421  f3c6				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1422  f3c6				  -done_debugscore
   1423  f3c6					      endif
   1424  f3c6
   1425  f3c6				  -	      ifconst	debugcycles
   1426  f3c6				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1427  f3c6				  -			; cmp #$2B
   1428  f3c6				  -			; BCC overscan
   1429  f3c6				  -	      bmi	overscan
   1430  f3c6				  -	      sta	COLUBK
   1431  f3c6				  -	      bcs	doneoverscan
   1432  f3c6					      endif
   1433  f3c6
   1434  f3c6				   overscan
   1435  f3c6				  -	      ifconst	interlaced
   1436  f3c6				  -	      PHP
   1437  f3c6				  -	      PLA
   1438  f3c6				  -	      EOR	#4	; flip interrupt bit
   1439  f3c6				  -	      PHA
   1440  f3c6				  -	      PLP
   1441  f3c6				  -	      AND	#4	; isolate the interrupt bit
   1442  f3c6				  -	      TAX		; save it for later
   1443  f3c6					      endif
   1444  f3c6
   1445  f3c6				   overscanloop
   1446  f3c6		       ad 84 02 	      lda	INTIM	;wait for sync
   1447  f3c9		       30 fb		      bmi	overscanloop
   1448  f3cb				   doneoverscan
   1449  f3cb
   1450  f3cb							;do VSYNC
   1451  f3cb
   1452  f3cb				  -	      ifconst	interlaced
   1453  f3cb				  -	      CPX	#4
   1454  f3cb				  -	      BNE	oddframevsync
   1455  f3cb					      endif
   1456  f3cb
   1457  f3cb		       a9 02		      lda	#2
   1458  f3cd		       85 02		      sta	WSYNC
   1459  f3cf		       85 00		      sta	VSYNC
   1460  f3d1		       85 02		      STA	WSYNC
   1461  f3d3		       85 02		      STA	WSYNC
   1462  f3d5		       4a		      lsr
   1463  f3d6		       85 02		      STA	WSYNC
   1464  f3d8		       85 00		      STA	VSYNC
   1465  f3da		       85 01		      sta	VBLANK
   1466  f3dc					      ifnconst	overscan_time
   1467  f3dc		       a9 a5		      lda	#37+128
   1468  f3de				  -	      else
   1469  f3de				  -	      lda	#overscan_time+128
   1470  f3de					      endif
   1471  f3de		       8d 96 02 	      sta	TIM64T
   1472  f3e1
   1473  f3e1				  -	      ifconst	interlaced
   1474  f3e1				  -	      jmp	postsync
   1475  f3e1				  -
   1476  f3e1				  -oddframevsync
   1477  f3e1				  -	      sta	WSYNC
   1478  f3e1				  -
   1479  f3e1				  -	      LDA	($80,X)	; 11 waste
   1480  f3e1				  -	      LDA	($80,X)	; 11 waste
   1481  f3e1				  -	      LDA	($80,X)	; 11 waste
   1482  f3e1				  -
   1483  f3e1				  -	      lda	#2
   1484  f3e1				  -	      sta	VSYNC
   1485  f3e1				  -	      sta	WSYNC
   1486  f3e1				  -	      sta	WSYNC
   1487  f3e1				  -	      sta	WSYNC
   1488  f3e1				  -
   1489  f3e1				  -	      LDA	($80,X)	; 11 waste
   1490  f3e1				  -	      LDA	($80,X)	; 11 waste
   1491  f3e1				  -	      LDA	($80,X)	; 11 waste
   1492  f3e1				  -
   1493  f3e1				  -	      lda	#0
   1494  f3e1				  -	      sta	VSYNC
   1495  f3e1				  -	      sta	VBLANK
   1496  f3e1				  -	      ifnconst	overscan_time
   1497  f3e1				  -	      lda	#37+128
   1498  f3e1				  -	      else
   1499  f3e1				  -	      lda	#overscan_time+128
   1500  f3e1				  -	      endif
   1501  f3e1				  -	      sta	TIM64T
   1502  f3e1				  -
   1503  f3e1				  -postsync
   1504  f3e1					      endif
   1505  f3e1
   1506  f3e1				  -	      ifconst	legacy
   1507  f3e1				  -	      if	legacy < 100
   1508  f3e1				  -	      ldx	#4
   1509  f3e1				  -adjustloop
   1510  f3e1				  -	      lda	player0x,x
   1511  f3e1				  -	      sec
   1512  f3e1				  -	      sbc	#14	;?
   1513  f3e1				  -	      sta	player0x,x
   1514  f3e1				  -	      dex
   1515  f3e1				  -	      bpl	adjustloop
   1516  f3e1				  -	      endif
   1517  f3e1					      endif
   1518  f3e1				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1519  f3e1				  -	      repeat	($fa-(<*))
   1520  f3e1				  -	      nop
   1521  f3e1				  -	      repend
   1522  f3e1					      endif
   1523  f3e1		       85 02		      sta	WSYNC
   1524  f3e3		       a2 04		      ldx	#4
      0  f3e5					      SLEEP	3
      1  f3e5				   .CYCLES    SET	3
      2  f3e5
      3  f3e5				  -	      IF	.CYCLES < 2
      4  f3e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e5				  -	      ERR
      6  f3e5					      ENDIF
      7  f3e5
      8  f3e5					      IF	.CYCLES & 1
      9  f3e5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e5		       04 00		      nop	0
     11  f3e7				  -	      ELSE
     12  f3e7				  -	      bit	VSYNC
     13  f3e7					      ENDIF
     14  f3e7				   .CYCLES    SET	.CYCLES - 3
     15  f3e7					      ENDIF
     16  f3e7
     17  f3e7				  -	      REPEAT	.CYCLES / 2
     18  f3e7				  -	      nop
     19  f3e7					      REPEND
   1526  f3e7				   HorPosLoop		; 5
   1527  f3e7		       b5 80		      lda	player0x,X	;+4 9
   1528  f3e9		       38		      sec		;+2 11
   1529  f3ea				   DivideLoop
   1530  f3ea		       e9 0f		      sbc	#15
   1531  f3ec		       b0 fc		      bcs	DivideLoop	;+4 15
   1532  f3ee		       95 9c		      sta	temp1,X	;+4 19
   1533  f3f0		       95 10		      sta	RESP0,X	;+4 23
   1534  f3f2		       85 02		      sta	WSYNC
   1535  f3f4		       ca		      dex
   1536  f3f5		       10 f0		      bpl	HorPosLoop	;+5 5
   1537  f3f7							; 4
   1538  f3f7
   1539  f3f7		       a2 04		      ldx	#4
   1540  f3f9		       b4 9c		      ldy	temp1,X
   1541  f3fb		       b9 57 f3 	      lda	repostable-256,Y
   1542  f3fe		       95 20		      sta	HMP0,X	;+14 18
   1543  f400
   1544  f400		       ca		      dex
   1545  f401		       b4 9c		      ldy	temp1,X
   1546  f403		       b9 57 f3 	      lda	repostable-256,Y
   1547  f406		       95 20		      sta	HMP0,X	;+14 32
   1548  f408
   1549  f408		       ca		      dex
   1550  f409		       b4 9c		      ldy	temp1,X
   1551  f40b		       b9 57 f3 	      lda	repostable-256,Y
   1552  f40e		       95 20		      sta	HMP0,X	;+14 46
   1553  f410
   1554  f410		       ca		      dex
   1555  f411		       b4 9c		      ldy	temp1,X
   1556  f413		       b9 57 f3 	      lda	repostable-256,Y
   1557  f416		       95 20		      sta	HMP0,X	;+14 60
   1558  f418
   1559  f418		       ca		      dex
   1560  f419		       b4 9c		      ldy	temp1,X
   1561  f41b		       b9 57 f3 	      lda	repostable-256,Y
   1562  f41e		       95 20		      sta	HMP0,X	;+14 74
   1563  f420
   1564  f420		       85 02		      sta	WSYNC
   1565  f422
   1566  f422		       85 2a		      sta	HMOVE	;+3 3
   1567  f424
   1568  f424
   1569  f424				  -	      ifconst	legacy
   1570  f424				  -	      if	legacy < 100
   1571  f424				  -	      ldx	#4
   1572  f424				  -adjustloop2
   1573  f424				  -	      lda	player0x,x
   1574  f424				  -	      clc
   1575  f424				  -	      adc	#14	;?
   1576  f424				  -	      sta	player0x,x
   1577  f424				  -	      dex
   1578  f424				  -	      bpl	adjustloop2
   1579  f424				  -	      endif
   1580  f424					      endif
   1581  f424
   1582  f424
   1583  f424
   1584  f424
   1585  f424							;set score pointers
   1586  f424		       a7 95		      lax	score+2
   1587  f426		       20 57 f4 	      jsr	scorepointerset
   1588  f429		       84 9b		      sty	scorepointers+5
   1589  f42b		       86 98		      stx	scorepointers+2
   1590  f42d		       a7 94		      lax	score+1
   1591  f42f		       20 57 f4 	      jsr	scorepointerset
   1592  f432		       84 9a		      sty	scorepointers+4
   1593  f434		       86 97		      stx	scorepointers+1
   1594  f436		       a7 93		      lax	score
   1595  f438		       20 57 f4 	      jsr	scorepointerset
   1596  f43b		       84 99		      sty	scorepointers+3
   1597  f43d		       86 96		      stx	scorepointers
   1598  f43f
   1599  f43f				   vblk
   1600  f43f							; run possible vblank bB code
   1601  f43f				  -	      ifconst	vblank_bB_code
   1602  f43f				  -	      jsr	vblank_bB_code
   1603  f43f					      endif
   1604  f43f				   vblk2
   1605  f43f		       ad 84 02 	      LDA	INTIM
   1606  f442		       30 fb		      bmi	vblk2
   1607  f444		       4c 34 f0 	      jmp	kernel
   1608  f447
   1609  f447
   1610  f447		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1611  f450		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1612  f457				   repostable
   1613  f457
   1614  f457				   scorepointerset
   1615  f457		       29 0f		      and	#$0F
   1616  f459		       0a		      asl
   1617  f45a		       0a		      asl
   1618  f45b		       0a		      asl
   1619  f45c		       69 9c		      adc	#<scoretable
   1620  f45e		       a8		      tay
   1621  f45f		       8a		      txa
   1622  f460							; and #$F0
   1623  f460							; lsr
   1624  f460		       4b f0		      asr	#$F0
   1625  f462		       69 9c		      adc	#<scoretable
   1626  f464		       aa		      tax
   1627  f465		       60		      rts
   1628  f466				   game
   1629  f466				   .
   1630  f466							; 
   1631  f466
   1632  f466				   .
   1633  f466							; 
   1634  f466
   1635  f466				   .
   1636  f466							; 
   1637  f466
   1638  f466				   .
   1639  f466							; 
   1640  f466
   1641  f466				   .
   1642  f466							; 
   1643  f466
   1644  f466				   .
   1645  f466							; 
   1646  f466
   1647  f466				   .
   1648  f466							; 
   1649  f466
   1650  f466				   .
   1651  f466							; 
   1652  f466
   1653  f466				   .
   1654  f466							; 
   1655  f466
   1656  f466				   .
   1657  f466							; 
   1658  f466
   1659  f466				   .
   1660  f466							; 
   1661  f466
   1662  f466				   .
   1663  f466							; 
   1664  f466
   1665  f466				   .
   1666  f466							; 
   1667  f466
   1668  f466				   .
   1669  f466							; 
   1670  f466
   1671  f466				   .
   1672  f466							; 
   1673  f466
   1674  f466				   .
   1675  f466							; 
   1676  f466
   1677  f466				   .
   1678  f466							; 
   1679  f466
   1680  f466				   .
   1681  f466							; 
   1682  f466
   1683  f466				   .
   1684  f466							; 
   1685  f466
   1686  f466				   .
   1687  f466							; 
   1688  f466
   1689  f466				   .
   1690  f466							; 
   1691  f466
   1692  f466				   .
   1693  f466							; 
   1694  f466
   1695  f466				   .
   1696  f466							; 
   1697  f466
   1698  f466				   .
   1699  f466							; 
   1700  f466
   1701  f466				   .
   1702  f466							; 
   1703  f466
   1704  f466				   .
   1705  f466							; 
   1706  f466
   1707  f466				   .
   1708  f466							; 
   1709  f466
   1710  f466				   .
   1711  f466							; 
   1712  f466
   1713  f466				   .
   1714  f466							; 
   1715  f466
   1716  f466				   .
   1717  f466							; 
   1718  f466
   1719  f466				   .
   1720  f466							; 
   1721  f466
   1722  f466				   .
   1723  f466							; 
   1724  f466
   1725  f466				   .
   1726  f466							; 
   1727  f466
   1728  f466				   .
   1729  f466							; 
   1730  f466
   1731  f466				   .
   1732  f466							; 
   1733  f466
   1734  f466				   .
   1735  f466							; 
   1736  f466
   1737  f466				   .
   1738  f466							; 
   1739  f466
   1740  f466				   .
   1741  f466							; 
   1742  f466
   1743  f466				   .
   1744  f466							; 
   1745  f466
   1746  f466				   .
   1747  f466							; 
   1748  f466
   1749  f466				   .
   1750  f466							; 
   1751  f466
   1752  f466				   .
   1753  f466							; 
   1754  f466
   1755  f466				   .
   1756  f466							; 
   1757  f466
   1758  f466				   .
   1759  f466							; 
   1760  f466
   1761  f466				   .
   1762  f466							; 
   1763  f466
   1764  f466				   .
   1765  f466							; 
   1766  f466
   1767  f466				   .
   1768  f466							; 
   1769  f466
   1770  f466				   .
   1771  f466							; 
   1772  f466
   1773  f466				   .
   1774  f466							; 
   1775  f466
   1776  f466				   .
   1777  f466							; 
   1778  f466
   1779  f466				   .
   1780  f466							; 
   1781  f466
   1782  f466				   .
   1783  f466							; 
   1784  f466
   1785  f466				   .
   1786  f466							; 
   1787  f466
   1788  f466				   .
   1789  f466							; 
   1790  f466
   1791  f466				   .
   1792  f466							; 
   1793  f466
   1794  f466				   .
   1795  f466							; 
   1796  f466
   1797  f466				   .
   1798  f466							; 
   1799  f466
   1800  f466				   .L00 		;  dim _Master_Counter  =  a
   1801  f466
   1802  f466				   .L01 		;  dim _Frame_Counter	=  b
   1803  f466
   1804  f466				   .
   1805  f466							; 
   1806  f466
   1807  f466				   .
   1808  f466							; 
   1809  f466
   1810  f466				   .
   1811  f466							; 
   1812  f466
   1813  f466				   .
   1814  f466							; 
   1815  f466
   1816  f466				   .L02 		;  dim _Ch0_Sound  =  c
   1817  f466
   1818  f466				   .L03 		;  dim _Ch0_Duration  =  d
   1819  f466
   1820  f466				   .L04 		;  dim _Ch0_Counter  =  e
   1821  f466
   1822  f466				   .
   1823  f466							; 
   1824  f466
   1825  f466				   .
   1826  f466							; 
   1827  f466
   1828  f466				   .
   1829  f466							; 
   1830  f466
   1831  f466				   .
   1832  f466							; 
   1833  f466
   1834  f466				   .
   1835  f466							; 
   1836  f466
   1837  f466				   .
   1838  f466							; 
   1839  f466
   1840  f466				   .L05 		;  dim _Pause_Counter_Tmp  =  h
   1841  f466
   1842  f466				   .
   1843  f466							; 
   1844  f466
   1845  f466				   .
   1846  f466							; 
   1847  f466
   1848  f466				   .
   1849  f466							; 
   1850  f466
   1851  f466				   .
   1852  f466							; 
   1853  f466
   1854  f466				   .
   1855  f466							; 
   1856  f466
   1857  f466				   .
   1858  f466							; 
   1859  f466
   1860  f466				   .L06 		;  dim _AP_2_Sec_Score_Flip  =  i
   1861  f466
   1862  f466				   .
   1863  f466							; 
   1864  f466
   1865  f466				   .
   1866  f466							; 
   1867  f466
   1868  f466				   .
   1869  f466							; 
   1870  f466
   1871  f466				   .
   1872  f466							; 
   1873  f466
   1874  f466				   .
   1875  f466							; 
   1876  f466
   1877  f466				   .
   1878  f466							; 
   1879  f466
   1880  f466				   .L07 		;  dim _Pause_Mem_Color_Tmp  =  i
   1881  f466
   1882  f466				   .
   1883  f466							; 
   1884  f466
   1885  f466				   .
   1886  f466							; 
   1887  f466
   1888  f466				   .
   1889  f466							; 
   1890  f466
   1891  f466				   .
   1892  f466							; 
   1893  f466
   1894  f466				   .
   1895  f466							; 
   1896  f466
   1897  f466				   .
   1898  f466							; 
   1899  f466
   1900  f466				   .L08 		;  dim _AP_Dir_Counter  =  j
   1901  f466
   1902  f466				   .
   1903  f466							; 
   1904  f466
   1905  f466				   .
   1906  f466							; 
   1907  f466
   1908  f466				   .
   1909  f466							; 
   1910  f466
   1911  f466				   .
   1912  f466							; 
   1913  f466
   1914  f466				   .
   1915  f466							; 
   1916  f466
   1917  f466				   .
   1918  f466							; 
   1919  f466
   1920  f466				   .L09 		;  dim _Pause_Color_Tmp  =  j
   1921  f466
   1922  f466				   .
   1923  f466							; 
   1924  f466
   1925  f466				   .
   1926  f466							; 
   1927  f466
   1928  f466				   .
   1929  f466							; 
   1930  f466
   1931  f466				   .
   1932  f466							; 
   1933  f466
   1934  f466				   .
   1935  f466							; 
   1936  f466
   1937  f466				   .L010		;  dim _BitOp_02  =  r
   1938  f466
   1939  f466				   .
   1940  f466							; 
   1941  f466
   1942  f466				   .
   1943  f466							; 
   1944  f466
   1945  f466				   .
   1946  f466							; 
   1947  f466
   1948  f466				   .
   1949  f466							; 
   1950  f466
   1951  f466				   .L011		;  dim _Bit0_BW_Mem  =  r
   1952  f466
   1953  f466				   .
   1954  f466							; 
   1955  f466
   1956  f466				   .
   1957  f466							; 
   1958  f466
   1959  f466				   .
   1960  f466							; 
   1961  f466
   1962  f466				   .
   1963  f466							; 
   1964  f466
   1965  f466				   .L012		;  dim _Bit1_BW_Check	=  r
   1966  f466
   1967  f466				   .
   1968  f466							; 
   1969  f466
   1970  f466				   .
   1971  f466							; 
   1972  f466
   1973  f466				   .
   1974  f466							; 
   1975  f466
   1976  f466				   .
   1977  f466							; 
   1978  f466
   1979  f466				   .L013		;  dim _Bit2_Pause_Clr_Scheme	=  r
   1980  f466
   1981  f466				   .
   1982  f466							; 
   1983  f466
   1984  f466				   .
   1985  f466							; 
   1986  f466
   1987  f466				   .
   1988  f466							; 
   1989  f466
   1990  f466				   .
   1991  f466							; 
   1992  f466
   1993  f466				   .L014		;  dim _Bit3_AP_P0_Dir  =  r
   1994  f466
   1995  f466				   .
   1996  f466							; 
   1997  f466
   1998  f466				   .
   1999  f466							; 
   2000  f466
   2001  f466				   .
   2002  f466							; 
   2003  f466
   2004  f466				   .
   2005  f466							; 
   2006  f466
   2007  f466				   .
   2008  f466							; 
   2009  f466
   2010  f466				   .
   2011  f466							; 
   2012  f466
   2013  f466				   .
   2014  f466							; 
   2015  f466
   2016  f466				   .
   2017  f466							; 
   2018  f466
   2019  f466				   .L015		;  dim _sc1  =  score
   2020  f466
   2021  f466				   .L016		;  dim _sc2  =  score + 1
   2022  f466
   2023  f466				   .L017		;  dim _sc3  =  score + 2
   2024  f466
   2025  f466				   .
   2026  f466							; 
   2027  f466
   2028  f466				   .
   2029  f466							; 
   2030  f466
   2031  f466				   .
   2032  f466							; 
   2033  f466
   2034  f466				   .
   2035  f466							; 
   2036  f466
   2037  f466				   .
   2038  f466							; 
   2039  f466
   2040  f466				   .
   2041  f466							; 
   2042  f466
   2043  f466				   .
   2044  f466							; 
   2045  f466
   2046  f466				   .L018		;  dim _Score1_Mem  =	s
   2047  f466
   2048  f466				   .L019		;  dim _Score2_Mem  =	t
   2049  f466
   2050  f466				   .L020		;  dim _Score3_Mem  =	u
   2051  f466
   2052  f466				   .
   2053  f466							; 
   2054  f466
   2055  f466				   .
   2056  f466							; 
   2057  f466
   2058  f466				   .
   2059  f466							; 
   2060  f466
   2061  f466				   .
   2062  f466							; 
   2063  f466
   2064  f466				   .L021		;  dim _High_Score1  =  v
   2065  f466
   2066  f466				   .L022		;  dim _High_Score2  =  w
   2067  f466
   2068  f466				   .L023		;  dim _High_Score3  =  x
   2069  f466
   2070  f466				   .
   2071  f466							; 
   2072  f466
   2073  f466				   .
   2074  f466							; 
   2075  f466
   2076  f466				   .
   2077  f466							; 
   2078  f466
   2079  f466				   .
   2080  f466							; 
   2081  f466
   2082  f466				   .L024		;  dim _BitOp_01  =  y
   2083  f466
   2084  f466				   .L025		;  dim _Bit0_Reset_Restrainer	=  y
   2085  f466
   2086  f466				   .L026		;  dim _Bit1_FireB_Restrainer	=  y
   2087  f466
   2088  f466				   .L027		;  dim _Bit2_Game_Control  =  y
   2089  f466
   2090  f466				   .L028		;  dim _Bit3_Auto_Play  =  y
   2091  f466
   2092  f466				   .L029		;  dim _Bit6_Swap_Scores  =  y
   2093  f466
   2094  f466				   .L030		;  dim _Bit7_Last_Life  =  y
   2095  f466
   2096  f466				   .
   2097  f466							; 
   2098  f466
   2099  f466				   .
   2100  f466							; 
   2101  f466
   2102  f466				   .
   2103  f466							; 
   2104  f466
   2105  f466				   .
   2106  f466							; 
   2107  f466
   2108  f466				   .L031		;  dim rand16	=  z
   2109  f466
   2110  f466				   .
   2111  f466							; 
   2112  f466
   2113  f466				   .
   2114  f466							; 
   2115  f466
   2116  f466				   .
   2117  f466							; 
   2118  f466
   2119  f466				   .
   2120  f466							; 
   2121  f466
   2122  f466				   .
   2123  f466							; 
   2124  f466
   2125  f466				   .
   2126  f466							; 
   2127  f466
   2128  f466				   .
   2129  f466							; 
   2130  f466
   2131  f466				   .L032		;  const pfscore  =  1
   2132  f466
   2133  f466				   .
   2134  f466							; 
   2135  f466
   2136  f466				   .
   2137  f466							; 
   2138  f466
   2139  f466				   .
   2140  f466							; 
   2141  f466
   2142  f466				   .
   2143  f466							; 
   2144  f466
   2145  f466				   .
   2146  f466							; 
   2147  f466
   2148  f466				   .
   2149  f466							; 
   2150  f466
   2151  f466				   .
   2152  f466							; 
   2153  f466
   2154  f466				   .
   2155  f466							; 
   2156  f466
   2157  f466				   .
   2158  f466							; 
   2159  f466
   2160  f466				   .L033		;  const _P_Edge_Top  =  10
   2161  f466
   2162  f466				   .L034		;  const _P_Edge_Bottom  =  83
   2163  f466
   2164  f466				   .L035		;  const _P_Edge_Left	=  1
   2165  f466
   2166  f466				   .L036		;  const _P_Edge_Right  =  153
   2167  f466
   2168  f466				   .
   2169  f466							; 
   2170  f466
   2171  f466				   .
   2172  f466							; 
   2173  f466
   2174  f466				   .
   2175  f466							; 
   2176  f466
   2177  f466				   .
   2178  f466							; 
   2179  f466
   2180  f466				   .
   2181  f466							; 
   2182  f466
   2183  f466				   .
   2184  f466							; 
   2185  f466
   2186  f466				   .
   2187  f466							; 
   2188  f466
   2189  f466				   .
   2190  f466							; 
   2191  f466
   2192  f466				   .
   2193  f466							; 
   2194  f466
   2195  f466				   .
   2196  f466							; 
   2197  f466
   2198  f466				   .
   2199  f466							; 
   2200  f466
   2201  f466				   .__Start_Restart
   2202  f466							; __Start_Restart
   2203  f466
   2204  f466				   .
   2205  f466							; 
   2206  f466
   2207  f466				   .
   2208  f466							; 
   2209  f466
   2210  f466				   .
   2211  f466							; 
   2212  f466
   2213  f466				   .
   2214  f466							; 
   2215  f466
   2216  f466				   .
   2217  f466							; 
   2218  f466
   2219  f466				   .
   2220  f466							; 
   2221  f466
   2222  f466				   .L037		;  AUDV0  =  0  :  AUDV1  =  0
   2223  f466
   2224  f466		       a9 00		      LDA	#0
   2225  f468		       85 19		      STA	AUDV0
   2226  f46a		       85 1a		      STA	AUDV1
   2227  f46c				   .
   2228  f46c							; 
   2229  f46c
   2230  f46c				   .
   2231  f46c							; 
   2232  f46c
   2233  f46c				   .
   2234  f46c							; 
   2235  f46c
   2236  f46c				   .
   2237  f46c							; 
   2238  f46c
   2239  f46c				   .
   2240  f46c							; 
   2241  f46c
   2242  f46c				   .
   2243  f46c							; 
   2244  f46c
   2245  f46c				   .
   2246  f46c							; 
   2247  f46c
   2248  f46c				   .
   2249  f46c							; 
   2250  f46c
   2251  f46c				   .
   2252  f46c							; 
   2253  f46c
   2254  f46c				   .
   2255  f46c							; 
   2256  f46c
   2257  f46c				   .
   2258  f46c							; 
   2259  f46c
   2260  f46c				   .L038		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2261  f46c
   2262  f46c		       a9 00		      LDA	#0
   2263  f46e		       85 d4		      STA	a
   2264  f470		       85 d5		      STA	b
   2265  f472		       85 d6		      STA	c
   2266  f474		       85 d7		      STA	d
   2267  f476		       85 d8		      STA	e
   2268  f478		       85 d9		      STA	f
   2269  f47a		       85 da		      STA	g
   2270  f47c		       85 db		      STA	h
   2271  f47e		       85 dc		      STA	i
   2272  f480				   .L039		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2273  f480
   2274  f480		       a9 00		      LDA	#0
   2275  f482		       85 dd		      STA	j
   2276  f484		       85 de		      STA	k
   2277  f486		       85 df		      STA	l
   2278  f488		       85 e0		      STA	m
   2279  f48a		       85 e1		      STA	n
   2280  f48c		       85 e2		      STA	o
   2281  f48e		       85 e3		      STA	p
   2282  f490		       85 e4		      STA	q
   2283  f492		       85 e5		      STA	r
   2284  f494				   .L040		;  s  =  0  :	t  =  0  :  u  =  0
   2285  f494
   2286  f494		       a9 00		      LDA	#0
   2287  f496		       85 e6		      STA	s
   2288  f498		       85 e7		      STA	t
   2289  f49a		       85 e8		      STA	u
   2290  f49c				   .
   2291  f49c							; 
   2292  f49c
   2293  f49c				   .
   2294  f49c							; 
   2295  f49c
   2296  f49c				   .
   2297  f49c							; 
   2298  f49c
   2299  f49c				   .
   2300  f49c							; 
   2301  f49c
   2302  f49c				   .
   2303  f49c							; 
   2304  f49c
   2305  f49c				   .
   2306  f49c							; 
   2307  f49c
   2308  f49c				   .
   2309  f49c							; 
   2310  f49c
   2311  f49c				   .
   2312  f49c							; 
   2313  f49c
   2314  f49c				   .
   2315  f49c							; 
   2316  f49c
   2317  f49c				   .L041		;  _BitOp_01  =  _BitOp_01  &	%00000100
   2318  f49c
   2319  f49c		       a5 ec		      LDA	_BitOp_01
   2320  f49e		       29 04		      AND	#%00000100
   2321  f4a0		       85 ec		      STA	_BitOp_01
   2322  f4a2				   .
   2323  f4a2							; 
   2324  f4a2
   2325  f4a2				   .
   2326  f4a2							; 
   2327  f4a2
   2328  f4a2				   .
   2329  f4a2							; 
   2330  f4a2
   2331  f4a2				   .
   2332  f4a2							; 
   2333  f4a2
   2334  f4a2				   .
   2335  f4a2							; 
   2336  f4a2
   2337  f4a2				   .
   2338  f4a2							; 
   2339  f4a2
   2340  f4a2				   .L042		;  player0y  =  200  :  player1y  =  200  :  missile0y  =  200
   2341  f4a2
   2342  f4a2		       a9 c8		      LDA	#200
   2343  f4a4		       85 85		      STA	player0y
   2344  f4a6		       85 86		      STA	player1y
   2345  f4a8		       85 91		      STA	missile0y
   2346  f4aa				   .
   2347  f4aa							; 
   2348  f4aa
   2349  f4aa				   .
   2350  f4aa							; 
   2351  f4aa
   2352  f4aa				   .
   2353  f4aa							; 
   2354  f4aa
   2355  f4aa				   .
   2356  f4aa							; 
   2357  f4aa
   2358  f4aa				   .
   2359  f4aa							; 
   2360  f4aa
   2361  f4aa				   .
   2362  f4aa							; 
   2363  f4aa
   2364  f4aa				   .
   2365  f4aa							; 
   2366  f4aa
   2367  f4aa				   .
   2368  f4aa							; 
   2369  f4aa
   2370  f4aa				   .
   2371  f4aa							; 
   2372  f4aa
   2373  f4aa				   .
   2374  f4aa							; 
   2375  f4aa
   2376  f4aa				   .L043		;  if _Bit2_Game_Control{2} then goto __Main_Loop_Setup
   2377  f4aa
   2378  f4aa		       a5 ec		      LDA	_Bit2_Game_Control
   2379  f4ac		       29 04		      AND	#4
   2380  f4ae		       f0 03		      BEQ	.skipL043
   2381  f4b0				   .condpart0
   2382  f4b0		       4c 4a f5 	      jmp	.__Main_Loop_Setup
   2383  f4b3
   2384  f4b3				   .skipL043
   2385  f4b3				   .
   2386  f4b3							; 
   2387  f4b3
   2388  f4b3				   .
   2389  f4b3							; 
   2390  f4b3
   2391  f4b3				   .
   2392  f4b3							; 
   2393  f4b3
   2394  f4b3				   .
   2395  f4b3							; 
   2396  f4b3
   2397  f4b3				   .
   2398  f4b3							; 
   2399  f4b3
   2400  f4b3				   .
   2401  f4b3							; 
   2402  f4b3
   2403  f4b3				   .
   2404  f4b3							; 
   2405  f4b3
   2406  f4b3				   .
   2407  f4b3							; 
   2408  f4b3
   2409  f4b3				   .
   2410  f4b3							; 
   2411  f4b3
   2412  f4b3				   .
   2413  f4b3							; 
   2414  f4b3
   2415  f4b3				   .
   2416  f4b3							; 
   2417  f4b3
   2418  f4b3				   .__Setup_Title_Screen
   2419  f4b3							; __Setup_Title_Screen
   2420  f4b3
   2421  f4b3				   .
   2422  f4b3							; 
   2423  f4b3
   2424  f4b3				   .
   2425  f4b3							; 
   2426  f4b3
   2427  f4b3				   .
   2428  f4b3							; 
   2429  f4b3
   2430  f4b3				   .
   2431  f4b3							; 
   2432  f4b3
   2433  f4b3				   .
   2434  f4b3							; 
   2435  f4b3
   2436  f4b3				   .
   2437  f4b3							; 
   2438  f4b3
   2439  f4b3				   .L044		;  pfscore1  =  0  :  scorecolor  =  $20
   2440  f4b3
   2441  f4b3		       a9 00		      LDA	#0
   2442  f4b5		       85 f2		      STA	pfscore1
   2443  f4b7		       a9 20		      LDA	#$20
   2444  f4b9		       85 a3		      STA	scorecolor
   2445  f4bb				   .
   2446  f4bb							; 
   2447  f4bb
   2448  f4bb				   .
   2449  f4bb							; 
   2450  f4bb
   2451  f4bb				   .
   2452  f4bb							; 
   2453  f4bb
   2454  f4bb				   .
   2455  f4bb							; 
   2456  f4bb
   2457  f4bb				   .
   2458  f4bb							; 
   2459  f4bb
   2460  f4bb				   .
   2461  f4bb							; 
   2462  f4bb
   2463  f4bb				   .L045		;  COLUBK  =  $20
   2464  f4bb
   2465  f4bb		       a9 20		      LDA	#$20
   2466  f4bd		       85 09		      STA	COLUBK
   2467  f4bf				   .
   2468  f4bf							; 
   2469  f4bf
   2470  f4bf				   .
   2471  f4bf							; 
   2472  f4bf
   2473  f4bf				   .
   2474  f4bf							; 
   2475  f4bf
   2476  f4bf				   .
   2477  f4bf							; 
   2478  f4bf
   2479  f4bf				   .
   2480  f4bf							; 
   2481  f4bf
   2482  f4bf				   .
   2483  f4bf							; 
   2484  f4bf
   2485  f4bf				   .
   2486  f4bf							; 
   2487  f4bf
   2488  f4bf				   .
   2489  f4bf							; 
   2490  f4bf
   2491  f4bf				   .
   2492  f4bf							; 
   2493  f4bf
   2494  f4bf				   .
   2495  f4bf							; 
   2496  f4bf
   2497  f4bf				   .
   2498  f4bf							; 
   2499  f4bf
   2500  f4bf				   .L046		;  _Bit0_Reset_Restrainer{0}  =  1
   2501  f4bf
   2502  f4bf		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2503  f4c1		       09 01		      ORA	#1
   2504  f4c3		       85 ec		      STA	_Bit0_Reset_Restrainer
   2505  f4c5				   .
   2506  f4c5							; 
   2507  f4c5
   2508  f4c5				   .
   2509  f4c5							; 
   2510  f4c5
   2511  f4c5				   .
   2512  f4c5							; 
   2513  f4c5
   2514  f4c5				   .
   2515  f4c5							; 
   2516  f4c5
   2517  f4c5				   .
   2518  f4c5							; 
   2519  f4c5
   2520  f4c5				   .
   2521  f4c5							; 
   2522  f4c5
   2523  f4c5				   .L047		;  playfield:
   2524  f4c5
   2525  f4c5				  -	      ifconst	pfres
   2526  f4c5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2527  f4c5					      else
   2528  f4c5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2529  f4c7					      endif
   2530  f4c7		       4c f6 f4 	      jmp	pflabel0
   2531  f4ca				   PF_data0
   2532  f4ca		       e9 6a		      .byte.b	%11101001, %01101010
   2533  f4cc					      if	(pfwidth>2)
   2534  f4cc		       c9 ea		      .byte.b	%11001001, %11101010
   2535  f4ce					      endif
   2536  f4ce		       49 2a		      .byte.b	%01001001, %00101010
   2537  f4d0					      if	(pfwidth>2)
   2538  f4d0		       a9 4a		      .byte.b	%10101001, %01001010
   2539  f4d2					      endif
   2540  f4d2		       4d 66		      .byte.b	%01001101, %01100110
   2541  f4d4					      if	(pfwidth>2)
   2542  f4d4		       cd 4a		      .byte.b	%11001101, %01001010
   2543  f4d6					      endif
   2544  f4d6		       4b 2a		      .byte.b	%01001011, %00101010
   2545  f4d8					      if	(pfwidth>2)
   2546  f4d8		       ab 4a		      .byte.b	%10101011, %01001010
   2547  f4da					      endif
   2548  f4da		       49 6a		      .byte.b	%01001001, %01101010
   2549  f4dc					      if	(pfwidth>2)
   2550  f4dc		       a9 4e		      .byte.b	%10101001, %01001110
   2551  f4de					      endif
   2552  f4de		       00 00		      .byte.b	%00000000, %00000000
   2553  f4e0					      if	(pfwidth>2)
   2554  f4e0		       00 00		      .byte.b	%00000000, %00000000
   2555  f4e2					      endif
   2556  f4e2		       08 bd		      .byte.b	%00001000, %10111101
   2557  f4e4					      if	(pfwidth>2)
   2558  f4e4		       c8 07		      .byte.b	%11001000, %00000111
   2559  f4e6					      endif
   2560  f4e6		       08 a5		      .byte.b	%00001000, %10100101
   2561  f4e8					      if	(pfwidth>2)
   2562  f4e8		       28 09		      .byte.b	%00101000, %00001001
   2563  f4ea					      endif
   2564  f4ea		       08 a5		      .byte.b	%00001000, %10100101
   2565  f4ec					      if	(pfwidth>2)
   2566  f4ec		       88 09		      .byte.b	%10001000, %00001001
   2567  f4ee					      endif
   2568  f4ee		       0a a5		      .byte.b	%00001010, %10100101
   2569  f4f0					      if	(pfwidth>2)
   2570  f4f0		       48 09		      .byte.b	%01001000, %00001001
   2571  f4f2					      endif
   2572  f4f2		       0d bd		      .byte.b	%00001101, %10111101
   2573  f4f4					      if	(pfwidth>2)
   2574  f4f4		       2e 07		      .byte.b	%00101110, %00000111
   2575  f4f6					      endif
   2576  f4f6				   pflabel0
   2577  f4f6		       bd ca f4 	      lda	PF_data0,x
   2578  f4f9		       95 a4		      sta	playfield,x
   2579  f4fb		       ca		      dex
   2580  f4fc		       10 f8		      bpl	pflabel0
   2581  f4fe				   .
   2582  f4fe							; 
   2583  f4fe
   2584  f4fe				   .
   2585  f4fe							; 
   2586  f4fe
   2587  f4fe				   .
   2588  f4fe							; 
   2589  f4fe
   2590  f4fe				   .
   2591  f4fe							; 
   2592  f4fe
   2593  f4fe				   .
   2594  f4fe							; 
   2595  f4fe
   2596  f4fe				   .
   2597  f4fe							; 
   2598  f4fe
   2599  f4fe				   .
   2600  f4fe							; 
   2601  f4fe
   2602  f4fe				   .
   2603  f4fe							; 
   2604  f4fe
   2605  f4fe				   .
   2606  f4fe							; 
   2607  f4fe
   2608  f4fe				   .
   2609  f4fe							; 
   2610  f4fe
   2611  f4fe				   .
   2612  f4fe							; 
   2613  f4fe
   2614  f4fe				   .__Title_Screen_Loop
   2615  f4fe							; __Title_Screen_Loop
   2616  f4fe
   2617  f4fe				   .
   2618  f4fe							; 
   2619  f4fe
   2620  f4fe				   .
   2621  f4fe							; 
   2622  f4fe
   2623  f4fe				   .
   2624  f4fe							; 
   2625  f4fe
   2626  f4fe				   .
   2627  f4fe							; 
   2628  f4fe
   2629  f4fe				   .
   2630  f4fe							; 
   2631  f4fe
   2632  f4fe				   .
   2633  f4fe							; 
   2634  f4fe
   2635  f4fe				   .
   2636  f4fe							; 
   2637  f4fe
   2638  f4fe				   .L048		;  COLUPF  =  $D8
   2639  f4fe
   2640  f4fe		       a9 d8		      LDA	#$D8
   2641  f500		       85 08		      STA	COLUPF
   2642  f502				   .
   2643  f502							; 
   2644  f502
   2645  f502				   .
   2646  f502							; 
   2647  f502
   2648  f502				   .
   2649  f502							; 
   2650  f502
   2651  f502				   .
   2652  f502							; 
   2653  f502
   2654  f502				   .
   2655  f502							; 
   2656  f502
   2657  f502				   .
   2658  f502							; 
   2659  f502
   2660  f502				   .
   2661  f502							; 
   2662  f502
   2663  f502				   .
   2664  f502							; 
   2665  f502
   2666  f502				   .
   2667  f502							; 
   2668  f502
   2669  f502				   .
   2670  f502							; 
   2671  f502
   2672  f502				   .
   2673  f502							; 
   2674  f502
   2675  f502				   .
   2676  f502							; 
   2677  f502
   2678  f502				   .
   2679  f502							; 
   2680  f502
   2681  f502				   .L049		;  _Master_Counter  =	_Master_Counter  +  1
   2682  f502
   2683  f502		       e6 d4		      INC	_Master_Counter
   2684  f504				   .
   2685  f504							; 
   2686  f504
   2687  f504				   .
   2688  f504							; 
   2689  f504
   2690  f504				   .
   2691  f504							; 
   2692  f504
   2693  f504				   .
   2694  f504							; 
   2695  f504
   2696  f504				   .L050		;  if _Master_Counter	<  60 then goto __TS_AP_Skip
   2697  f504
   2698  f504		       a5 d4		      LDA	_Master_Counter
   2699  f506		       c9 3c		      CMP	#60
   2700  f508		       b0 03		      BCS	.skipL050
   2701  f50a				   .condpart1
   2702  f50a		       4c 22 f5 	      jmp	.__TS_AP_Skip
   2703  f50d
   2704  f50d				   .skipL050
   2705  f50d				   .
   2706  f50d							; 
   2707  f50d
   2708  f50d				   .
   2709  f50d							; 
   2710  f50d
   2711  f50d				   .
   2712  f50d							; 
   2713  f50d
   2714  f50d				   .
   2715  f50d							; 
   2716  f50d
   2717  f50d				   .L051		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2718  f50d
   2719  f50d		       e6 d5		      INC	_Frame_Counter
   2720  f50f		       a9 00		      LDA	#0
   2721  f511		       85 d4		      STA	_Master_Counter
   2722  f513				   .
   2723  f513							; 
   2724  f513
   2725  f513				   .
   2726  f513							; 
   2727  f513
   2728  f513				   .
   2729  f513							; 
   2730  f513
   2731  f513				   .
   2732  f513							; 
   2733  f513
   2734  f513				   .
   2735  f513							; 
   2736  f513
   2737  f513				   .
   2738  f513							; 
   2739  f513
   2740  f513				   .
   2741  f513							; 
   2742  f513
   2743  f513				   .L052		;  if _Frame_Counter  >  9 then _Bit3_Auto_Play{3}  =	1  :  goto __Main_Loop_Setup
   2744  f513
   2745  f513		       a9 09		      LDA	#9
   2746  f515		       c5 d5		      CMP	_Frame_Counter
   2747  f517		       b0 09		      BCS	.skipL052
   2748  f519				   .condpart2
   2749  f519		       a5 ec		      LDA	_Bit3_Auto_Play
   2750  f51b		       09 08		      ORA	#8
   2751  f51d		       85 ec		      STA	_Bit3_Auto_Play
   2752  f51f		       4c 4a f5 	      jmp	.__Main_Loop_Setup
   2753  f522
   2754  f522				   .skipL052
   2755  f522				   .
   2756  f522							; 
   2757  f522
   2758  f522				   .__TS_AP_Skip
   2759  f522							; __TS_AP_Skip
   2760  f522
   2761  f522				   .
   2762  f522							; 
   2763  f522
   2764  f522				   .
   2765  f522							; 
   2766  f522
   2767  f522				   .
   2768  f522							; 
   2769  f522
   2770  f522				   .
   2771  f522							; 
   2772  f522
   2773  f522				   .
   2774  f522							; 
   2775  f522
   2776  f522				   .
   2777  f522							; 
   2778  f522
   2779  f522				   .
   2780  f522							; 
   2781  f522
   2782  f522				   .L053		;  drawscreen
   2783  f522
   2784  f522		       20 c6 f3 	      jsr	drawscreen
   2785  f525				   .
   2786  f525							; 
   2787  f525
   2788  f525				   .
   2789  f525							; 
   2790  f525
   2791  f525				   .
   2792  f525							; 
   2793  f525
   2794  f525				   .
   2795  f525							; 
   2796  f525
   2797  f525				   .
   2798  f525							; 
   2799  f525
   2800  f525				   .
   2801  f525							; 
   2802  f525
   2803  f525				   .
   2804  f525							; 
   2805  f525
   2806  f525				   .
   2807  f525							; 
   2808  f525
   2809  f525				   .
   2810  f525							; 
   2811  f525
   2812  f525				   .
   2813  f525							; 
   2814  f525
   2815  f525				   .
   2816  f525							; 
   2817  f525
   2818  f525				   .
   2819  f525							; 
   2820  f525
   2821  f525				   .
   2822  f525							; 
   2823  f525
   2824  f525				   .
   2825  f525							; 
   2826  f525
   2827  f525				   .L054		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
   2828  f525
   2829  f525		       a9 01		      lda	#1
   2830  f527		       2c 82 02 	      bit	SWCHB
   2831  f52a		       f0 0d		      BEQ	.skipL054
   2832  f52c				   .condpart3
   2833  f52c		       24 0c		      bit	INPT4
   2834  f52e		       10 09		      BPL	.skip3then
   2835  f530				   .condpart4
   2836  f530		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2837  f532		       29 fe		      AND	#254
   2838  f534		       85 ec		      STA	_Bit0_Reset_Restrainer
   2839  f536		       4c fe f4 	      jmp	.__Title_Screen_Loop
   2840  f539
   2841  f539				   .skip3then
   2842  f539				   .skipL054
   2843  f539				   .
   2844  f539							; 
   2845  f539
   2846  f539				   .
   2847  f539							; 
   2848  f539
   2849  f539				   .
   2850  f539							; 
   2851  f539
   2852  f539				   .
   2853  f539							; 
   2854  f539
   2855  f539				   .
   2856  f539							; 
   2857  f539
   2858  f539				   .L055		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   2859  f539
   2860  f539		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2861  f53b		       4a		      LSR
   2862  f53c		       90 03		      BCC	.skipL055
   2863  f53e				   .condpart5
   2864  f53e		       4c fe f4 	      jmp	.__Title_Screen_Loop
   2865  f541
   2866  f541				   .skipL055
   2867  f541				   .
   2868  f541							; 
   2869  f541
   2870  f541				   .
   2871  f541							; 
   2872  f541
   2873  f541				   .
   2874  f541							; 
   2875  f541
   2876  f541				   .
   2877  f541							; 
   2878  f541
   2879  f541				   .L056		;  _Bit2_Game_Control{2}  =  1
   2880  f541
   2881  f541		       a5 ec		      LDA	_Bit2_Game_Control
   2882  f543		       09 04		      ORA	#4
   2883  f545		       85 ec		      STA	_Bit2_Game_Control
   2884  f547				   .
   2885  f547							; 
   2886  f547
   2887  f547				   .
   2888  f547							; 
   2889  f547
   2890  f547				   .
   2891  f547							; 
   2892  f547
   2893  f547				   .
   2894  f547							; 
   2895  f547
   2896  f547				   .L057		;  goto __Start_Restart
   2897  f547
   2898  f547		       4c 66 f4 	      jmp	.__Start_Restart
   2899  f54a
   2900  f54a				   .
   2901  f54a							; 
   2902  f54a
   2903  f54a				   .
   2904  f54a							; 
   2905  f54a
   2906  f54a				   .
   2907  f54a							; 
   2908  f54a
   2909  f54a				   .
   2910  f54a							; 
   2911  f54a
   2912  f54a				   .
   2913  f54a							; 
   2914  f54a
   2915  f54a				   .
   2916  f54a							; 
   2917  f54a
   2918  f54a				   .
   2919  f54a							; 
   2920  f54a
   2921  f54a				   .
   2922  f54a							; 
   2923  f54a
   2924  f54a				   .
   2925  f54a							; 
   2926  f54a
   2927  f54a				   .
   2928  f54a							; 
   2929  f54a
   2930  f54a				   .
   2931  f54a							; 
   2932  f54a
   2933  f54a				   .__Main_Loop_Setup
   2934  f54a							; __Main_Loop_Setup
   2935  f54a
   2936  f54a				   .
   2937  f54a							; 
   2938  f54a
   2939  f54a				   .
   2940  f54a							; 
   2941  f54a
   2942  f54a				   .
   2943  f54a							; 
   2944  f54a
   2945  f54a				   .
   2946  f54a							; 
   2947  f54a
   2948  f54a				   .
   2949  f54a							; 
   2950  f54a
   2951  f54a				   .
   2952  f54a							; 
   2953  f54a
   2954  f54a				   .
   2955  f54a							; 
   2956  f54a
   2957  f54a				   .
   2958  f54a							; 
   2959  f54a
   2960  f54a				   .
   2961  f54a							; 
   2962  f54a
   2963  f54a				   .
   2964  f54a							; 
   2965  f54a
   2966  f54a				   .L058		;  _Bit2_Game_Control{2}  =  0
   2967  f54a
   2968  f54a		       a5 ec		      LDA	_Bit2_Game_Control
   2969  f54c		       29 fb		      AND	#251
   2970  f54e		       85 ec		      STA	_Bit2_Game_Control
   2971  f550				   .
   2972  f550							; 
   2973  f550
   2974  f550				   .
   2975  f550							; 
   2976  f550
   2977  f550				   .
   2978  f550							; 
   2979  f550
   2980  f550				   .
   2981  f550							; 
   2982  f550
   2983  f550				   .
   2984  f550							; 
   2985  f550
   2986  f550				   .
   2987  f550							; 
   2988  f550
   2989  f550				   .
   2990  f550							; 
   2991  f550
   2992  f550				   .
   2993  f550							; 
   2994  f550
   2995  f550				   .
   2996  f550							; 
   2997  f550
   2998  f550				   .
   2999  f550							; 
   3000  f550
   3001  f550				   .
   3002  f550							; 
   3003  f550
   3004  f550				   .
   3005  f550							; 
   3006  f550
   3007  f550				   .L059		;  _Bit0_Reset_Restrainer{0}  =  1
   3008  f550
   3009  f550		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   3010  f552		       09 01		      ORA	#1
   3011  f554		       85 ec		      STA	_Bit0_Reset_Restrainer
   3012  f556				   .
   3013  f556							; 
   3014  f556
   3015  f556				   .
   3016  f556							; 
   3017  f556
   3018  f556				   .
   3019  f556							; 
   3020  f556
   3021  f556				   .
   3022  f556							; 
   3023  f556
   3024  f556				   .
   3025  f556							; 
   3026  f556
   3027  f556				   .
   3028  f556							; 
   3029  f556
   3030  f556				   .
   3031  f556							; 
   3032  f556
   3033  f556				   .
   3034  f556							; 
   3035  f556
   3036  f556				   .
   3037  f556							; 
   3038  f556
   3039  f556				   .
   3040  f556							; 
   3041  f556
   3042  f556				   .
   3043  f556							; 
   3044  f556
   3045  f556				   .
   3046  f556							; 
   3047  f556
   3048  f556				   .L060		;  _Bit1_FireB_Restrainer{1}  =  1
   3049  f556
   3050  f556		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3051  f558		       09 02		      ORA	#2
   3052  f55a		       85 ec		      STA	_Bit1_FireB_Restrainer
   3053  f55c				   .
   3054  f55c							; 
   3055  f55c
   3056  f55c				   .
   3057  f55c							; 
   3058  f55c
   3059  f55c				   .
   3060  f55c							; 
   3061  f55c
   3062  f55c				   .
   3063  f55c							; 
   3064  f55c
   3065  f55c				   .
   3066  f55c							; 
   3067  f55c
   3068  f55c				   .
   3069  f55c							; 
   3070  f55c
   3071  f55c				   .L061		;  player0x  =  74  :	player0y  =  78
   3072  f55c
   3073  f55c		       a9 4a		      LDA	#74
   3074  f55e		       85 80		      STA	player0x
   3075  f560		       a9 4e		      LDA	#78
   3076  f562		       85 85		      STA	player0y
   3077  f564				   .
   3078  f564							; 
   3079  f564
   3080  f564				   .
   3081  f564							; 
   3082  f564
   3083  f564				   .
   3084  f564							; 
   3085  f564
   3086  f564				   .
   3087  f564							; 
   3088  f564
   3089  f564				   .
   3090  f564							; 
   3091  f564
   3092  f564				   .
   3093  f564							; 
   3094  f564
   3095  f564				   .L062		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0
   3096  f564
   3097  f564							; complex statement detected
   3098  f564		       20 b8 f3 	      jsr	randomize
   3099  f567		       4a		      lsr
   3100  f568		       48		      PHA
   3101  f569		       20 b8 f3 	      jsr	randomize
   3102  f56c		       29 0f		      AND	#15
   3103  f56e		       ba		      TSX
   3104  f56f		       e8		      INX
   3105  f570		       9a		      TXS
   3106  f571		       18		      CLC
   3107  f572		       75 00		      ADC	$00,x
   3108  f574		       85 81		      STA	player1x
   3109  f576		       a9 00		      LDA	#0
   3110  f578		       85 86		      STA	player1y
   3111  f57a				   .
   3112  f57a							; 
   3113  f57a
   3114  f57a				   .
   3115  f57a							; 
   3116  f57a
   3117  f57a				   .
   3118  f57a							; 
   3119  f57a
   3120  f57a				   .
   3121  f57a							; 
   3122  f57a
   3123  f57a				   .
   3124  f57a							; 
   3125  f57a
   3126  f57a				   .
   3127  f57a							; 
   3128  f57a
   3129  f57a				   .L063		;  missile0height  =  4  :  missile0y	=  250
   3130  f57a
   3131  f57a		       a9 04		      LDA	#4
   3132  f57c		       85 90		      STA	missile0height
   3133  f57e		       a9 fa		      LDA	#250
   3134  f580		       85 91		      STA	missile0y
   3135  f582				   .
   3136  f582							; 
   3137  f582
   3138  f582				   .
   3139  f582							; 
   3140  f582
   3141  f582				   .
   3142  f582							; 
   3143  f582
   3144  f582				   .
   3145  f582							; 
   3146  f582
   3147  f582				   .
   3148  f582							; 
   3149  f582
   3150  f582				   .
   3151  f582							; 
   3152  f582
   3153  f582				   .L064		;  scorecolor	=  $1C
   3154  f582
   3155  f582		       a9 1c		      LDA	#$1C
   3156  f584		       85 a3		      STA	scorecolor
   3157  f586				   .
   3158  f586							; 
   3159  f586
   3160  f586				   .
   3161  f586							; 
   3162  f586
   3163  f586				   .
   3164  f586							; 
   3165  f586
   3166  f586				   .
   3167  f586							; 
   3168  f586
   3169  f586				   .
   3170  f586							; 
   3171  f586
   3172  f586				   .
   3173  f586							; 
   3174  f586
   3175  f586				   .L065		;  pfscore1  =  %11111111  :  pfscorecolor  =	$D2
   3176  f586
   3177  f586		       a9 ff		      LDA	#%11111111
   3178  f588		       85 f2		      STA	pfscore1
   3179  f58a		       a9 d2		      LDA	#$D2
   3180  f58c		       85 f4		      STA	pfscorecolor
   3181  f58e				   .
   3182  f58e							; 
   3183  f58e
   3184  f58e				   .
   3185  f58e							; 
   3186  f58e
   3187  f58e				   .
   3188  f58e							; 
   3189  f58e
   3190  f58e				   .
   3191  f58e							; 
   3192  f58e
   3193  f58e				   .
   3194  f58e							; 
   3195  f58e
   3196  f58e				   .
   3197  f58e							; 
   3198  f58e
   3199  f58e				   .L066		;  player0:
   3200  f58e
   3201  f58e		       a2 cf		      LDX	#<playerL066_0
   3202  f590		       86 8a		      STX	player0pointerlo
   3203  f592		       a9 fe		      LDA	#>playerL066_0
   3204  f594		       85 8b		      STA	player0pointerhi
   3205  f596		       a9 07		      LDA	#7
   3206  f598		       85 8e		      STA	player0height
   3207  f59a				   .
   3208  f59a							; 
   3209  f59a
   3210  f59a				   .
   3211  f59a							; 
   3212  f59a
   3213  f59a				   .
   3214  f59a							; 
   3215  f59a
   3216  f59a				   .
   3217  f59a							; 
   3218  f59a
   3219  f59a				   .
   3220  f59a							; 
   3221  f59a
   3222  f59a				   .
   3223  f59a							; 
   3224  f59a
   3225  f59a				   .L067		;  playfield:
   3226  f59a
   3227  f59a				  -	      ifconst	pfres
   3228  f59a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3229  f59a					      else
   3230  f59a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3231  f59c					      endif
   3232  f59c		       4c cb f5 	      jmp	pflabel1
   3233  f59f				   PF_data1
   3234  f59f		       ff ff		      .byte.b	%11111111, %11111111
   3235  f5a1					      if	(pfwidth>2)
   3236  f5a1		       ff 7f		      .byte.b	%11111111, %01111111
   3237  f5a3					      endif
   3238  f5a3		       00 00		      .byte.b	%00000000, %00000000
   3239  f5a5					      if	(pfwidth>2)
   3240  f5a5		       00 00		      .byte.b	%00000000, %00000000
   3241  f5a7					      endif
   3242  f5a7		       00 00		      .byte.b	%00000000, %00000000
   3243  f5a9					      if	(pfwidth>2)
   3244  f5a9		       00 00		      .byte.b	%00000000, %00000000
   3245  f5ab					      endif
   3246  f5ab		       00 00		      .byte.b	%00000000, %00000000
   3247  f5ad					      if	(pfwidth>2)
   3248  f5ad		       00 00		      .byte.b	%00000000, %00000000
   3249  f5af					      endif
   3250  f5af		       00 00		      .byte.b	%00000000, %00000000
   3251  f5b1					      if	(pfwidth>2)
   3252  f5b1		       00 00		      .byte.b	%00000000, %00000000
   3253  f5b3					      endif
   3254  f5b3		       00 00		      .byte.b	%00000000, %00000000
   3255  f5b5					      if	(pfwidth>2)
   3256  f5b5		       00 00		      .byte.b	%00000000, %00000000
   3257  f5b7					      endif
   3258  f5b7		       00 00		      .byte.b	%00000000, %00000000
   3259  f5b9					      if	(pfwidth>2)
   3260  f5b9		       00 00		      .byte.b	%00000000, %00000000
   3261  f5bb					      endif
   3262  f5bb		       00 00		      .byte.b	%00000000, %00000000
   3263  f5bd					      if	(pfwidth>2)
   3264  f5bd		       00 00		      .byte.b	%00000000, %00000000
   3265  f5bf					      endif
   3266  f5bf		       00 00		      .byte.b	%00000000, %00000000
   3267  f5c1					      if	(pfwidth>2)
   3268  f5c1		       00 00		      .byte.b	%00000000, %00000000
   3269  f5c3					      endif
   3270  f5c3		       00 00		      .byte.b	%00000000, %00000000
   3271  f5c5					      if	(pfwidth>2)
   3272  f5c5		       00 00		      .byte.b	%00000000, %00000000
   3273  f5c7					      endif
   3274  f5c7		       ff ff		      .byte.b	%11111111, %11111111
   3275  f5c9					      if	(pfwidth>2)
   3276  f5c9		       ff 7f		      .byte.b	%11111111, %01111111
   3277  f5cb					      endif
   3278  f5cb				   pflabel1
   3279  f5cb		       bd 9f f5 	      lda	PF_data1,x
   3280  f5ce		       95 a4		      sta	playfield,x
   3281  f5d0		       ca		      dex
   3282  f5d1		       10 f8		      bpl	pflabel1
   3283  f5d3				   .
   3284  f5d3							; 
   3285  f5d3
   3286  f5d3				   .
   3287  f5d3							; 
   3288  f5d3
   3289  f5d3				   .
   3290  f5d3							; 
   3291  f5d3
   3292  f5d3				   .
   3293  f5d3							; 
   3294  f5d3
   3295  f5d3				   .
   3296  f5d3							; 
   3297  f5d3
   3298  f5d3				   .
   3299  f5d3							; 
   3300  f5d3
   3301  f5d3				   .L068		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   3302  f5d3
   3303  f5d3		       a5 e5		      LDA	_Bit0_BW_Mem
   3304  f5d5		       29 fe		      AND	#254
   3305  f5d7		       85 e5		      STA	_Bit0_BW_Mem
   3306  f5d9		       a9 08		      lda	#8
   3307  f5db		       2c 82 02 	      bit	SWCHB
   3308  f5de		       d0 06		      BNE	.skipL068
   3309  f5e0				   .condpart6
   3310  f5e0		       a5 e5		      LDA	_Bit0_BW_Mem
   3311  f5e2		       09 01		      ORA	#1
   3312  f5e4		       85 e5		      STA	_Bit0_BW_Mem
   3313  f5e6				   .skipL068
   3314  f5e6				   .
   3315  f5e6							; 
   3316  f5e6
   3317  f5e6				   .
   3318  f5e6							; 
   3319  f5e6
   3320  f5e6				   .
   3321  f5e6							; 
   3322  f5e6
   3323  f5e6				   .
   3324  f5e6							; 
   3325  f5e6
   3326  f5e6				   .
   3327  f5e6							; 
   3328  f5e6
   3329  f5e6				   .
   3330  f5e6							; 
   3331  f5e6
   3332  f5e6				   .
   3333  f5e6							; 
   3334  f5e6
   3335  f5e6				   .
   3336  f5e6							; 
   3337  f5e6
   3338  f5e6				   .
   3339  f5e6							; 
   3340  f5e6
   3341  f5e6				   .L069		;  if !_Bit3_Auto_Play{3} then score  =  0  :	goto __AP_Skip_AP_Setup
   3342  f5e6
   3343  f5e6		       a5 ec		      LDA	_Bit3_Auto_Play
   3344  f5e8		       29 08		      AND	#8
   3345  f5ea		       d0 0f		      BNE	.skipL069
   3346  f5ec				   .condpart7
   3347  f5ec		       a9 00		      LDA	#$00
   3348  f5ee		       85 95		      STA	score+2
   3349  f5f0		       a9 00		      LDA	#$00
   3350  f5f2		       85 94		      STA	score+1
   3351  f5f4		       a9 00		      LDA	#$00
   3352  f5f6		       85 93		      STA	score
   3353  f5f8		       4c 13 f6 	      jmp	.__AP_Skip_AP_Setup
   3354  f5fb
   3355  f5fb				   .skipL069
   3356  f5fb				   .
   3357  f5fb							; 
   3358  f5fb
   3359  f5fb				   .
   3360  f5fb							; 
   3361  f5fb
   3362  f5fb				   .
   3363  f5fb							; 
   3364  f5fb
   3365  f5fb				   .
   3366  f5fb							; 
   3367  f5fb
   3368  f5fb				   .L070		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   3369  f5fb
   3370  f5fb		       a9 00		      LDA	#0
   3371  f5fd		       85 d4		      STA	_Master_Counter
   3372  f5ff		       85 d5		      STA	_Frame_Counter
   3373  f601				   .
   3374  f601							; 
   3375  f601
   3376  f601				   .
   3377  f601							; 
   3378  f601
   3379  f601				   .
   3380  f601							; 
   3381  f601
   3382  f601				   .
   3383  f601							; 
   3384  f601
   3385  f601				   .L071		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   3386  f601
   3387  f601		       a5 93		      LDA	_sc1
   3388  f603		       85 e6		      STA	_Score1_Mem
   3389  f605		       a5 94		      LDA	_sc2
   3390  f607		       85 e7		      STA	_Score2_Mem
   3391  f609		       a5 95		      LDA	_sc3
   3392  f60b		       85 e8		      STA	_Score3_Mem
   3393  f60d				   .
   3394  f60d							; 
   3395  f60d
   3396  f60d				   .L072		;  _Bit6_Swap_Scores{6}  =  0
   3397  f60d
   3398  f60d		       a5 ec		      LDA	_Bit6_Swap_Scores
   3399  f60f		       29 bf		      AND	#191
   3400  f611		       85 ec		      STA	_Bit6_Swap_Scores
   3401  f613				   .
   3402  f613							; 
   3403  f613
   3404  f613				   .__AP_Skip_AP_Setup
   3405  f613							; __AP_Skip_AP_Setup
   3406  f613
   3407  f613				   .
   3408  f613							; 
   3409  f613
   3410  f613				   .
   3411  f613							; 
   3412  f613
   3413  f613				   .
   3414  f613							; 
   3415  f613
   3416  f613				   .
   3417  f613							; 
   3418  f613
   3419  f613				   .
   3420  f613							; 
   3421  f613
   3422  f613				   .
   3423  f613							; 
   3424  f613
   3425  f613				   .
   3426  f613							; 
   3427  f613
   3428  f613				   .
   3429  f613							; 
   3430  f613
   3431  f613				   .
   3432  f613							; 
   3433  f613
   3434  f613				   .
   3435  f613							; 
   3436  f613
   3437  f613				   .
   3438  f613							; 
   3439  f613
   3440  f613				   .__Main_Loop
   3441  f613							; __Main_Loop
   3442  f613
   3443  f613				   .
   3444  f613							; 
   3445  f613
   3446  f613				   .
   3447  f613							; 
   3448  f613
   3449  f613				   .
   3450  f613							; 
   3451  f613
   3452  f613				   .
   3453  f613							; 
   3454  f613
   3455  f613				   .
   3456  f613							; 
   3457  f613
   3458  f613				   .
   3459  f613							; 
   3460  f613
   3461  f613				   .
   3462  f613							; 
   3463  f613
   3464  f613				   .L073		;  COLUBK  =  $D6
   3465  f613
   3466  f613		       a9 d6		      LDA	#$D6
   3467  f615		       85 09		      STA	COLUBK
   3468  f617				   .
   3469  f617							; 
   3470  f617
   3471  f617				   .
   3472  f617							; 
   3473  f617
   3474  f617				   .
   3475  f617							; 
   3476  f617
   3477  f617				   .
   3478  f617							; 
   3479  f617
   3480  f617				   .
   3481  f617							; 
   3482  f617
   3483  f617				   .
   3484  f617							; 
   3485  f617
   3486  f617				   .
   3487  f617							; 
   3488  f617
   3489  f617				   .L074		;  COLUPF  =  0
   3490  f617
   3491  f617		       a9 00		      LDA	#0
   3492  f619		       85 08		      STA	COLUPF
   3493  f61b				   .
   3494  f61b							; 
   3495  f61b
   3496  f61b				   .
   3497  f61b							; 
   3498  f61b
   3499  f61b				   .
   3500  f61b							; 
   3501  f61b
   3502  f61b				   .
   3503  f61b							; 
   3504  f61b
   3505  f61b				   .
   3506  f61b							; 
   3507  f61b
   3508  f61b				   .
   3509  f61b							; 
   3510  f61b
   3511  f61b				   .
   3512  f61b							; 
   3513  f61b
   3514  f61b				   .L075		;  COLUP0  =  $22  :  COLUP1  =  $20
   3515  f61b
   3516  f61b		       a9 22		      LDA	#$22
   3517  f61d		       85 06		      STA	COLUP0
   3518  f61f		       a9 20		      LDA	#$20
   3519  f621		       85 07		      STA	COLUP1
   3520  f623				   .
   3521  f623							; 
   3522  f623
   3523  f623				   .
   3524  f623							; 
   3525  f623
   3526  f623				   .
   3527  f623							; 
   3528  f623
   3529  f623				   .
   3530  f623							; 
   3531  f623
   3532  f623				   .
   3533  f623							; 
   3534  f623
   3535  f623				   .
   3536  f623							; 
   3537  f623
   3538  f623				   .
   3539  f623							; 
   3540  f623
   3541  f623				   .L076		;  NUSIZ0  =  $10
   3542  f623
   3543  f623		       a9 10		      LDA	#$10
   3544  f625		       85 04		      STA	NUSIZ0
   3545  f627				   .
   3546  f627							; 
   3547  f627
   3548  f627				   .
   3549  f627							; 
   3550  f627
   3551  f627				   .
   3552  f627							; 
   3553  f627
   3554  f627				   .
   3555  f627							; 
   3556  f627
   3557  f627				   .
   3558  f627							; 
   3559  f627
   3560  f627				   .
   3561  f627							; 
   3562  f627
   3563  f627				   .
   3564  f627							; 
   3565  f627
   3566  f627				   .L077		;  NUSIZ1  =  $05
   3567  f627
   3568  f627		       a9 05		      LDA	#$05
   3569  f629		       85 05		      STA	NUSIZ1
   3570  f62b				   .
   3571  f62b							; 
   3572  f62b
   3573  f62b				   .
   3574  f62b							; 
   3575  f62b
   3576  f62b				   .
   3577  f62b							; 
   3578  f62b
   3579  f62b				   .
   3580  f62b							; 
   3581  f62b
   3582  f62b				   .
   3583  f62b							; 
   3584  f62b
   3585  f62b				   .
   3586  f62b							; 
   3587  f62b
   3588  f62b				   .
   3589  f62b							; 
   3590  f62b
   3591  f62b				   .
   3592  f62b							; 
   3593  f62b
   3594  f62b				   .
   3595  f62b							; 
   3596  f62b
   3597  f62b				   .
   3598  f62b							; 
   3599  f62b
   3600  f62b				   .L078		;  _Master_Counter  =	_Master_Counter  +  1
   3601  f62b
   3602  f62b		       e6 d4		      INC	_Master_Counter
   3603  f62d				   .
   3604  f62d							; 
   3605  f62d
   3606  f62d				   .
   3607  f62d							; 
   3608  f62d
   3609  f62d				   .
   3610  f62d							; 
   3611  f62d
   3612  f62d				   .
   3613  f62d							; 
   3614  f62d
   3615  f62d				   .L079		;  if _Master_Counter	<  7 then goto __Skip_Counters
   3616  f62d
   3617  f62d		       a5 d4		      LDA	_Master_Counter
   3618  f62f		       c9 07		      CMP	#7
   3619  f631		       b0 03		      BCS	.skipL079
   3620  f633				   .condpart8
   3621  f633		       4c 46 f6 	      jmp	.__Skip_Counters
   3622  f636
   3623  f636				   .skipL079
   3624  f636				   .
   3625  f636							; 
   3626  f636
   3627  f636				   .
   3628  f636							; 
   3629  f636
   3630  f636				   .
   3631  f636							; 
   3632  f636
   3633  f636				   .
   3634  f636							; 
   3635  f636
   3636  f636				   .L080		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   3637  f636
   3638  f636		       e6 d5		      INC	_Frame_Counter
   3639  f638		       a9 00		      LDA	#0
   3640  f63a		       85 d4		      STA	_Master_Counter
   3641  f63c				   .
   3642  f63c							; 
   3643  f63c
   3644  f63c				   .
   3645  f63c							; 
   3646  f63c
   3647  f63c				   .
   3648  f63c							; 
   3649  f63c
   3650  f63c				   .
   3651  f63c							; 
   3652  f63c
   3653  f63c				   .L081		;  if _Frame_Counter  >  3 then _Frame_Counter  =  0
   3654  f63c
   3655  f63c		       a9 03		      LDA	#3
   3656  f63e		       c5 d5		      CMP	_Frame_Counter
   3657  f640		       b0 04		      BCS	.skipL081
   3658  f642				   .condpart9
   3659  f642		       a9 00		      LDA	#0
   3660  f644		       85 d5		      STA	_Frame_Counter
   3661  f646				   .skipL081
   3662  f646				   .
   3663  f646							; 
   3664  f646
   3665  f646				   .__Skip_Counters
   3666  f646							; __Skip_Counters
   3667  f646
   3668  f646				   .
   3669  f646							; 
   3670  f646
   3671  f646				   .
   3672  f646							; 
   3673  f646
   3674  f646				   .
   3675  f646							; 
   3676  f646
   3677  f646				   .
   3678  f646							; 
   3679  f646
   3680  f646				   .
   3681  f646							; 
   3682  f646
   3683  f646				   .
   3684  f646							; 
   3685  f646
   3686  f646				   .
   3687  f646							; 
   3688  f646
   3689  f646				   .L082		;  on _Frame_Counter goto __Sq00 __Sq01 __Sq02 __Sq03
   3690  f646
   3691  f646		       a6 d5		      LDX	_Frame_Counter
   3692  f648		       bd 51 f6 	      LDA	.L082jumptablehi,x
   3693  f64b		       48		      PHA
   3694  f64c		       bd 55 f6 	      LDA	.L082jumptablelo,x
   3695  f64f		       48		      PHA
   3696  f650		       60		      RTS
   3697  f651				   .L082jumptablehi
   3698  f651		       fa		      .byte.b	>(.__Sq00-1)
   3699  f652		       fa		      .byte.b	>(.__Sq01-1)
   3700  f653		       fa		      .byte.b	>(.__Sq02-1)
   3701  f654		       fa		      .byte.b	>(.__Sq03-1)
   3702  f655				   .L082jumptablelo
   3703  f655		       62		      .byte.b	<(.__Sq00-1)
   3704  f656		       71		      .byte.b	<(.__Sq01-1)
   3705  f657		       80		      .byte.b	<(.__Sq02-1)
   3706  f658		       8f		      .byte.b	<(.__Sq03-1)
   3707  f659				   .
   3708  f659							; 
   3709  f659
   3710  f659				   .__Squirrel_Frame_Done
   3711  f659							; __Squirrel_Frame_Done
   3712  f659
   3713  f659				   .
   3714  f659							; 
   3715  f659
   3716  f659				   .
   3717  f659							; 
   3718  f659
   3719  f659				   .
   3720  f659							; 
   3721  f659
   3722  f659				   .
   3723  f659							; 
   3724  f659
   3725  f659				   .
   3726  f659							; 
   3727  f659
   3728  f659				   .
   3729  f659							; 
   3730  f659
   3731  f659				   .
   3732  f659							; 
   3733  f659
   3734  f659				   .
   3735  f659							; 
   3736  f659
   3737  f659				   .
   3738  f659							; 
   3739  f659
   3740  f659				   .
   3741  f659							; 
   3742  f659
   3743  f659				   .L083		;  if missile0y  >  240 then goto __FireB_Check
   3744  f659
   3745  f659		       a9 f0		      LDA	#240
   3746  f65b		       c5 91		      CMP	missile0y
   3747  f65d		       b0 03		      BCS	.skipL083
   3748  f65f				   .condpart10
   3749  f65f		       4c 6c f6 	      jmp	.__FireB_Check
   3750  f662
   3751  f662				   .skipL083
   3752  f662				   .
   3753  f662							; 
   3754  f662
   3755  f662				   .
   3756  f662							; 
   3757  f662
   3758  f662				   .
   3759  f662							; 
   3760  f662
   3761  f662				   .
   3762  f662							; 
   3763  f662
   3764  f662				   .L084		;  missile0y  =  missile0y  -	2  :  goto __Skip_FireB
   3765  f662
   3766  f662		       a5 91		      LDA	missile0y
   3767  f664		       38		      SEC
   3768  f665		       e9 02		      SBC	#2
   3769  f667		       85 91		      STA	missile0y
   3770  f669		       4c c4 f6 	      jmp	.__Skip_FireB
   3771  f66c
   3772  f66c				   .
   3773  f66c							; 
   3774  f66c
   3775  f66c				   .__FireB_Check
   3776  f66c							; __FireB_Check
   3777  f66c
   3778  f66c				   .
   3779  f66c							; 
   3780  f66c
   3781  f66c				   .
   3782  f66c							; 
   3783  f66c
   3784  f66c				   .
   3785  f66c							; 
   3786  f66c
   3787  f66c				   .
   3788  f66c							; 
   3789  f66c
   3790  f66c				   .L085		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Fire_Missile
   3791  f66c
   3792  f66c		       a5 ec		      LDA	_Bit3_Auto_Play
   3793  f66e		       29 08		      AND	#8
   3794  f670		       d0 03		      BNE	.skipL085
   3795  f672				   .condpart11
   3796  f672		       4c 86 f6 	      jmp	.__AP_Skip_Fire_Missile
   3797  f675
   3798  f675				   .skipL085
   3799  f675				   .
   3800  f675							; 
   3801  f675
   3802  f675				   .
   3803  f675							; 
   3804  f675
   3805  f675				   .
   3806  f675							; 
   3807  f675
   3808  f675				   .
   3809  f675							; 
   3810  f675
   3811  f675				   .
   3812  f675							; 
   3813  f675
   3814  f675				   .L086		;  temp5  =  rand  :  if temp5  <  230 then goto __Skip_FireB
   3815  f675
   3816  f675		       20 b8 f3 	      jsr	randomize
   3817  f678		       85 a0		      STA	temp5
   3818  f67a		       a5 a0		      LDA	temp5
   3819  f67c		       c9 e6		      CMP	#230
   3820  f67e		       b0 03		      BCS	.skipL086
   3821  f680				   .condpart12
   3822  f680		       4c c4 f6 	      jmp	.__Skip_FireB
   3823  f683
   3824  f683				   .skipL086
   3825  f683				   .
   3826  f683							; 
   3827  f683
   3828  f683				   .L087		;  goto __AP_Fire
   3829  f683
   3830  f683		       4c 9c f6 	      jmp	.__AP_Fire
   3831  f686
   3832  f686				   .
   3833  f686							; 
   3834  f686
   3835  f686				   .__AP_Skip_Fire_Missile
   3836  f686							; __AP_Skip_Fire_Missile
   3837  f686
   3838  f686				   .
   3839  f686							; 
   3840  f686
   3841  f686				   .
   3842  f686							; 
   3843  f686
   3844  f686				   .
   3845  f686							; 
   3846  f686
   3847  f686				   .
   3848  f686							; 
   3849  f686
   3850  f686				   .
   3851  f686							; 
   3852  f686
   3853  f686				   .L088		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Skip_FireB
   3854  f686
   3855  f686		       24 0c		      bit	INPT4
   3856  f688		       10 09		      BPL	.skipL088
   3857  f68a				   .condpart13
   3858  f68a		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3859  f68c		       29 fd		      AND	#253
   3860  f68e		       85 ec		      STA	_Bit1_FireB_Restrainer
   3861  f690		       4c c4 f6 	      jmp	.__Skip_FireB
   3862  f693
   3863  f693				   .skipL088
   3864  f693				   .
   3865  f693							; 
   3866  f693
   3867  f693				   .
   3868  f693							; 
   3869  f693
   3870  f693				   .
   3871  f693							; 
   3872  f693
   3873  f693				   .
   3874  f693							; 
   3875  f693
   3876  f693				   .
   3877  f693							; 
   3878  f693
   3879  f693				   .L089		;  if _Bit1_FireB_Restrainer{1} then goto __Skip_FireB
   3880  f693
   3881  f693		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3882  f695		       29 02		      AND	#2
   3883  f697		       f0 03		      BEQ	.skipL089
   3884  f699				   .condpart14
   3885  f699		       4c c4 f6 	      jmp	.__Skip_FireB
   3886  f69c
   3887  f69c				   .skipL089
   3888  f69c				   .
   3889  f69c							; 
   3890  f69c
   3891  f69c				   .__AP_Fire
   3892  f69c							; __AP_Fire
   3893  f69c
   3894  f69c				   .
   3895  f69c							; 
   3896  f69c
   3897  f69c				   .
   3898  f69c							; 
   3899  f69c
   3900  f69c				   .
   3901  f69c							; 
   3902  f69c
   3903  f69c				   .
   3904  f69c							; 
   3905  f69c
   3906  f69c				   .L090		;  missile0y  =  player0y  -  2  :  missile0x	=  player0x  +	4
   3907  f69c
   3908  f69c		       a5 85		      LDA	player0y
   3909  f69e		       38		      SEC
   3910  f69f		       e9 02		      SBC	#2
   3911  f6a1		       85 91		      STA	missile0y
   3912  f6a3		       a5 80		      LDA	player0x
   3913  f6a5		       18		      CLC
   3914  f6a6		       69 04		      ADC	#4
   3915  f6a8		       85 82		      STA	missile0x
   3916  f6aa				   .
   3917  f6aa							; 
   3918  f6aa
   3919  f6aa				   .
   3920  f6aa							; 
   3921  f6aa
   3922  f6aa				   .
   3923  f6aa							; 
   3924  f6aa
   3925  f6aa				   .
   3926  f6aa							; 
   3927  f6aa
   3928  f6aa				   .L091		;  if _Bit3_Auto_Play{3} then goto __Skip_FireB
   3929  f6aa
   3930  f6aa		       a5 ec		      LDA	_Bit3_Auto_Play
   3931  f6ac		       29 08		      AND	#8
   3932  f6ae		       f0 03		      BEQ	.skipL091
   3933  f6b0				   .condpart15
   3934  f6b0		       4c c4 f6 	      jmp	.__Skip_FireB
   3935  f6b3
   3936  f6b3				   .skipL091
   3937  f6b3				   .
   3938  f6b3							; 
   3939  f6b3
   3940  f6b3				   .
   3941  f6b3							; 
   3942  f6b3
   3943  f6b3				   .
   3944  f6b3							; 
   3945  f6b3
   3946  f6b3				   .
   3947  f6b3							; 
   3948  f6b3
   3949  f6b3				   .L092		;  if _Ch0_Sound then goto __Skip_FireB
   3950  f6b3
   3951  f6b3		       a5 d6		      LDA	_Ch0_Sound
   3952  f6b5		       f0 03		      BEQ	.skipL092
   3953  f6b7				   .condpart16
   3954  f6b7		       4c c4 f6 	      jmp	.__Skip_FireB
   3955  f6ba
   3956  f6ba				   .skipL092
   3957  f6ba				   .
   3958  f6ba							; 
   3959  f6ba
   3960  f6ba				   .L093		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3961  f6ba
   3962  f6ba		       a9 01		      LDA	#1
   3963  f6bc		       85 d6		      STA	_Ch0_Sound
   3964  f6be		       85 d7		      STA	_Ch0_Duration
   3965  f6c0		       a9 00		      LDA	#0
   3966  f6c2		       85 d8		      STA	_Ch0_Counter
   3967  f6c4				   .
   3968  f6c4							; 
   3969  f6c4
   3970  f6c4				   .__Skip_FireB
   3971  f6c4							; __Skip_FireB
   3972  f6c4
   3973  f6c4				   .
   3974  f6c4							; 
   3975  f6c4
   3976  f6c4				   .
   3977  f6c4							; 
   3978  f6c4
   3979  f6c4				   .
   3980  f6c4							; 
   3981  f6c4
   3982  f6c4				   .
   3983  f6c4							; 
   3984  f6c4
   3985  f6c4				   .
   3986  f6c4							; 
   3987  f6c4
   3988  f6c4				   .
   3989  f6c4							; 
   3990  f6c4
   3991  f6c4				   .
   3992  f6c4							; 
   3993  f6c4
   3994  f6c4				   .
   3995  f6c4							; 
   3996  f6c4
   3997  f6c4				   .
   3998  f6c4							; 
   3999  f6c4
   4000  f6c4				   .
   4001  f6c4							; 
   4002  f6c4
   4003  f6c4				   .L094		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_New_Dir
   4004  f6c4
   4005  f6c4		       a5 ec		      LDA	_Bit3_Auto_Play
   4006  f6c6		       29 08		      AND	#8
   4007  f6c8		       d0 03		      BNE	.skipL094
   4008  f6ca				   .condpart17
   4009  f6ca		       4c 23 f7 	      jmp	.__AP_Skip_New_Dir
   4010  f6cd
   4011  f6cd				   .skipL094
   4012  f6cd				   .
   4013  f6cd							; 
   4014  f6cd
   4015  f6cd				   .
   4016  f6cd							; 
   4017  f6cd
   4018  f6cd				   .
   4019  f6cd							; 
   4020  f6cd
   4021  f6cd				   .
   4022  f6cd							; 
   4023  f6cd
   4024  f6cd				   .L095		;  _AP_Dir_Counter  =	_AP_Dir_Counter  +  1
   4025  f6cd
   4026  f6cd		       e6 dd		      INC	_AP_Dir_Counter
   4027  f6cf				   .
   4028  f6cf							; 
   4029  f6cf
   4030  f6cf				   .
   4031  f6cf							; 
   4032  f6cf
   4033  f6cf				   .
   4034  f6cf							; 
   4035  f6cf
   4036  f6cf				   .
   4037  f6cf							; 
   4038  f6cf
   4039  f6cf				   .
   4040  f6cf							; 
   4041  f6cf
   4042  f6cf				   .
   4043  f6cf							; 
   4044  f6cf
   4045  f6cf				   .L096		;  temp6  =   ( rand & 63 )   +  50
   4046  f6cf
   4047  f6cf							; complex statement detected
   4048  f6cf		       20 b8 f3 	      jsr	randomize
   4049  f6d2		       29 3f		      AND	#63
   4050  f6d4		       18		      CLC
   4051  f6d5		       69 32		      ADC	#50
   4052  f6d7		       85 a1		      STA	temp6
   4053  f6d9				   .
   4054  f6d9							; 
   4055  f6d9
   4056  f6d9				   .
   4057  f6d9							; 
   4058  f6d9
   4059  f6d9				   .
   4060  f6d9							; 
   4061  f6d9
   4062  f6d9				   .
   4063  f6d9							; 
   4064  f6d9
   4065  f6d9				   .L097		;  if _AP_Dir_Counter	<  temp6 then goto __AP_Move_Acorn
   4066  f6d9
   4067  f6d9		       a5 dd		      LDA	_AP_Dir_Counter
   4068  f6db		       c5 a1		      CMP	temp6
   4069  f6dd		       b0 03		      BCS	.skipL097
   4070  f6df				   .condpart18
   4071  f6df		       4c 04 f7 	      jmp	.__AP_Move_Acorn
   4072  f6e2
   4073  f6e2				   .skipL097
   4074  f6e2				   .
   4075  f6e2							; 
   4076  f6e2
   4077  f6e2				   .
   4078  f6e2							; 
   4079  f6e2
   4080  f6e2				   .
   4081  f6e2							; 
   4082  f6e2
   4083  f6e2				   .
   4084  f6e2							; 
   4085  f6e2
   4086  f6e2				   .L098		;  temp5  =  rand
   4087  f6e2
   4088  f6e2		       20 b8 f3 	      jsr	randomize
   4089  f6e5		       85 a0		      STA	temp5
   4090  f6e7				   .
   4091  f6e7							; 
   4092  f6e7
   4093  f6e7				   .
   4094  f6e7							; 
   4095  f6e7
   4096  f6e7				   .
   4097  f6e7							; 
   4098  f6e7
   4099  f6e7				   .
   4100  f6e7							; 
   4101  f6e7
   4102  f6e7				   .L099		;  if temp5  <  230 then goto __AP_Move_Acorn
   4103  f6e7
   4104  f6e7		       a5 a0		      LDA	temp5
   4105  f6e9		       c9 e6		      CMP	#230
   4106  f6eb		       b0 03		      BCS	.skipL099
   4107  f6ed				   .condpart19
   4108  f6ed		       4c 04 f7 	      jmp	.__AP_Move_Acorn
   4109  f6f0
   4110  f6f0				   .skipL099
   4111  f6f0				   .
   4112  f6f0							; 
   4113  f6f0
   4114  f6f0				   .
   4115  f6f0							; 
   4116  f6f0
   4117  f6f0				   .
   4118  f6f0							; 
   4119  f6f0
   4120  f6f0				   .
   4121  f6f0							; 
   4122  f6f0
   4123  f6f0				   .L0100		;  _Bit3_AP_P0_Dir{3}	=  !_Bit3_AP_P0_Dir{3}
   4124  f6f0
   4125  f6f0		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4126  f6f2		       29 08		      AND	#8
   4127  f6f4		       08		      PHP
   4128  f6f5		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4129  f6f7		       29 f7		      AND	#247
   4130  f6f9		       28		      PLP
   4131  f6fa		       d0 02		      .byte.b	$D0, $02
   4132  f6fc		       09 08		      ORA	#8
   4133  f6fe		       85 e5		      STA	_Bit3_AP_P0_Dir
   4134  f700				   .
   4135  f700							; 
   4136  f700
   4137  f700				   .
   4138  f700							; 
   4139  f700
   4140  f700				   .
   4141  f700							; 
   4142  f700
   4143  f700				   .
   4144  f700							; 
   4145  f700
   4146  f700				   .L0101		;  _AP_Dir_Counter  =	0
   4147  f700
   4148  f700		       a9 00		      LDA	#0
   4149  f702		       85 dd		      STA	_AP_Dir_Counter
   4150  f704				   .
   4151  f704							; 
   4152  f704
   4153  f704				   .__AP_Move_Acorn
   4154  f704							; __AP_Move_Acorn
   4155  f704
   4156  f704				   .
   4157  f704							; 
   4158  f704
   4159  f704				   .
   4160  f704							; 
   4161  f704
   4162  f704				   .
   4163  f704							; 
   4164  f704
   4165  f704				   .
   4166  f704							; 
   4167  f704
   4168  f704				   .L0102		;  if !_Bit3_AP_P0_Dir{3} then if player0x  >	_P_Edge_Left then player0x  =  player0x  -  1
   4169  f704
   4170  f704		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4171  f706		       29 08		      AND	#8
   4172  f708		       d0 08		      BNE	.skipL0102
   4173  f70a				   .condpart20
   4174  f70a		       a9 01		      LDA	#_P_Edge_Left
   4175  f70c		       c5 80		      CMP	player0x
   4176  f70e		       b0 02		      BCS	.skip20then
   4177  f710				   .condpart21
   4178  f710		       c6 80		      DEC	player0x
   4179  f712				   .skip20then
   4180  f712				   .skipL0102
   4181  f712				   .L0103		;  if _Bit3_AP_P0_Dir{3} then if player0x  <  _P_Edge_Right then player0x  =  player0x  +  1
   4182  f712
   4183  f712		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4184  f714		       29 08		      AND	#8
   4185  f716		       f0 08		      BEQ	.skipL0103
   4186  f718				   .condpart22
   4187  f718		       a5 80		      LDA	player0x
   4188  f71a		       c9 99		      CMP	#_P_Edge_Right
   4189  f71c		       b0 02		      BCS	.skip22then
   4190  f71e				   .condpart23
   4191  f71e		       e6 80		      INC	player0x
   4192  f720				   .skip22then
   4193  f720				   .skipL0103
   4194  f720				   .
   4195  f720							; 
   4196  f720
   4197  f720				   .L0104		;  goto __Skip_Joy_Movement
   4198  f720
   4199  f720		       4c 5b f7 	      jmp	.__Skip_Joy_Movement
   4200  f723
   4201  f723				   .
   4202  f723							; 
   4203  f723
   4204  f723				   .__AP_Skip_New_Dir
   4205  f723							; __AP_Skip_New_Dir
   4206  f723
   4207  f723				   .
   4208  f723							; 
   4209  f723
   4210  f723				   .
   4211  f723							; 
   4212  f723
   4213  f723				   .
   4214  f723							; 
   4215  f723
   4216  f723				   .
   4217  f723							; 
   4218  f723
   4219  f723				   .
   4220  f723							; 
   4221  f723
   4222  f723				   .
   4223  f723							; 
   4224  f723
   4225  f723				   .
   4226  f723							; 
   4227  f723
   4228  f723				   .
   4229  f723							; 
   4230  f723
   4231  f723				   .L0105		;  if joy0up then if player0y	>  _P_Edge_Top then player0y  =  player0y  -  1
   4232  f723
   4233  f723		       a9 10		      lda	#$10
   4234  f725		       2c 80 02 	      bit	SWCHA
   4235  f728		       d0 08		      BNE	.skipL0105
   4236  f72a				   .condpart24
   4237  f72a		       a9 0a		      LDA	#_P_Edge_Top
   4238  f72c		       c5 85		      CMP	player0y
   4239  f72e		       b0 02		      BCS	.skip24then
   4240  f730				   .condpart25
   4241  f730		       c6 85		      DEC	player0y
   4242  f732				   .skip24then
   4243  f732				   .skipL0105
   4244  f732				   .L0106		;  if joy0down then if player0y  <  _P_Edge_Bottom then player0y  =  player0y	+  1
   4245  f732
   4246  f732		       a9 20		      lda	#$20
   4247  f734		       2c 80 02 	      bit	SWCHA
   4248  f737		       d0 08		      BNE	.skipL0106
   4249  f739				   .condpart26
   4250  f739		       a5 85		      LDA	player0y
   4251  f73b		       c9 53		      CMP	#_P_Edge_Bottom
   4252  f73d		       b0 02		      BCS	.skip26then
   4253  f73f				   .condpart27
   4254  f73f		       e6 85		      INC	player0y
   4255  f741				   .skip26then
   4256  f741				   .skipL0106
   4257  f741				   .L0107		;  if joy0left then if player0x  >  _P_Edge_Left then player0x  =  player0x  -  1
   4258  f741
   4259  f741		       2c 80 02 	      bit	SWCHA
   4260  f744		       70 08		      BVS	.skipL0107
   4261  f746				   .condpart28
   4262  f746		       a9 01		      LDA	#_P_Edge_Left
   4263  f748		       c5 80		      CMP	player0x
   4264  f74a		       b0 02		      BCS	.skip28then
   4265  f74c				   .condpart29
   4266  f74c		       c6 80		      DEC	player0x
   4267  f74e				   .skip28then
   4268  f74e				   .skipL0107
   4269  f74e				   .L0108		;  if joy0right then if player0x  <  _P_Edge_Right then player0x  =  player0x	+  1
   4270  f74e
   4271  f74e		       2c 80 02 	      bit	SWCHA
   4272  f751		       30 08		      BMI	.skipL0108
   4273  f753				   .condpart30
   4274  f753		       a5 80		      LDA	player0x
   4275  f755		       c9 99		      CMP	#_P_Edge_Right
   4276  f757		       b0 02		      BCS	.skip30then
   4277  f759				   .condpart31
   4278  f759		       e6 80		      INC	player0x
   4279  f75b				   .skip30then
   4280  f75b				   .skipL0108
   4281  f75b				   .
   4282  f75b							; 
   4283  f75b
   4284  f75b				   .__Skip_Joy_Movement
   4285  f75b							; __Skip_Joy_Movement
   4286  f75b
   4287  f75b				   .
   4288  f75b							; 
   4289  f75b
   4290  f75b				   .
   4291  f75b							; 
   4292  f75b
   4293  f75b				   .
   4294  f75b							; 
   4295  f75b
   4296  f75b				   .
   4297  f75b							; 
   4298  f75b
   4299  f75b				   .
   4300  f75b							; 
   4301  f75b
   4302  f75b				   .
   4303  f75b							; 
   4304  f75b
   4305  f75b				   .
   4306  f75b							; 
   4307  f75b
   4308  f75b				   .L0109		;  if player1y  <  player0y then player1y  =  player1y  +  1
   4309  f75b
   4310  f75b		       a5 86		      LDA	player1y
   4311  f75d		       c5 85		      CMP	player0y
   4312  f75f		       b0 02		      BCS	.skipL0109
   4313  f761				   .condpart32
   4314  f761		       e6 86		      INC	player1y
   4315  f763				   .skipL0109
   4316  f763				   .L0110		;  if player1y  >  player0y then player1y  =  player1y  -  1
   4317  f763
   4318  f763		       a5 85		      LDA	player0y
   4319  f765		       c5 86		      CMP	player1y
   4320  f767		       b0 02		      BCS	.skipL0110
   4321  f769				   .condpart33
   4322  f769		       c6 86		      DEC	player1y
   4323  f76b				   .skipL0110
   4324  f76b				   .L0111		;  temp5  =  player1x	+  8  :  if temp5  <  player0x then if player1x  <  144 then player1x  =  player1x  +  1
   4325  f76b
   4326  f76b		       a5 81		      LDA	player1x
   4327  f76d		       18		      CLC
   4328  f76e		       69 08		      ADC	#8
   4329  f770		       85 a0		      STA	temp5
   4330  f772		       a5 a0		      LDA	temp5
   4331  f774		       c5 80		      CMP	player0x
   4332  f776		       b0 08		      BCS	.skipL0111
   4333  f778				   .condpart34
   4334  f778		       a5 81		      LDA	player1x
   4335  f77a		       c9 90		      CMP	#144
   4336  f77c		       b0 02		      BCS	.skip34then
   4337  f77e				   .condpart35
   4338  f77e		       e6 81		      INC	player1x
   4339  f780				   .skip34then
   4340  f780				   .skipL0111
   4341  f780				   .L0112		;  temp5  =  player1x	+  8  :  if temp5  >  player0x then if player1x  >  0 then player1x  =	player1x  -  1
   4342  f780
   4343  f780		       a5 81		      LDA	player1x
   4344  f782		       18		      CLC
   4345  f783		       69 08		      ADC	#8
   4346  f785		       85 a0		      STA	temp5
   4347  f787		       a5 80		      LDA	player0x
   4348  f789		       c5 a0		      CMP	temp5
   4349  f78b		       b0 08		      BCS	.skipL0112
   4350  f78d				   .condpart36
   4351  f78d		       a9 00		      LDA	#0
   4352  f78f		       c5 81		      CMP	player1x
   4353  f791		       b0 02		      BCS	.skip36then
   4354  f793				   .condpart37
   4355  f793		       c6 81		      DEC	player1x
   4356  f795				   .skip36then
   4357  f795				   .skipL0112
   4358  f795				   .
   4359  f795							; 
   4360  f795
   4361  f795				   .
   4362  f795							; 
   4363  f795
   4364  f795				   .
   4365  f795							; 
   4366  f795
   4367  f795				   .
   4368  f795							; 
   4369  f795
   4370  f795				   .
   4371  f795							; 
   4372  f795
   4373  f795				   .
   4374  f795							; 
   4375  f795
   4376  f795				   .
   4377  f795							; 
   4378  f795
   4379  f795				   .
   4380  f795							; 
   4381  f795
   4382  f795				   .
   4383  f795							; 
   4384  f795
   4385  f795				   .
   4386  f795							; 
   4387  f795
   4388  f795				   .L0113		;  if !collision(missile0,player1) then goto __Skip_Squirrel_Kill
   4389  f795
   4390  f795		       24 00		      bit	CXM0P
   4391  f797		       30 03		      BMI	.skipL0113
   4392  f799				   .condpart38
   4393  f799		       4c eb f7 	      jmp	.__Skip_Squirrel_Kill
   4394  f79c
   4395  f79c				   .skipL0113
   4396  f79c				   .
   4397  f79c							; 
   4398  f79c
   4399  f79c				   .
   4400  f79c							; 
   4401  f79c
   4402  f79c				   .
   4403  f79c							; 
   4404  f79c
   4405  f79c				   .
   4406  f79c							; 
   4407  f79c
   4408  f79c				   .L0114		;  temp6  =  player1y
   4409  f79c
   4410  f79c		       a5 86		      LDA	player1y
   4411  f79e		       85 a1		      STA	temp6
   4412  f7a0				   .
   4413  f7a0							; 
   4414  f7a0
   4415  f7a0				   .
   4416  f7a0							; 
   4417  f7a0
   4418  f7a0				   .
   4419  f7a0							; 
   4420  f7a0
   4421  f7a0				   .
   4422  f7a0							; 
   4423  f7a0
   4424  f7a0				   .L0115		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0	:  missile0y  =  250
   4425  f7a0
   4426  f7a0							; complex statement detected
   4427  f7a0		       20 b8 f3 	      jsr	randomize
   4428  f7a3		       4a		      lsr
   4429  f7a4		       48		      PHA
   4430  f7a5		       20 b8 f3 	      jsr	randomize
   4431  f7a8		       29 0f		      AND	#15
   4432  f7aa		       ba		      TSX
   4433  f7ab		       e8		      INX
   4434  f7ac		       9a		      TXS
   4435  f7ad		       18		      CLC
   4436  f7ae		       75 00		      ADC	$00,x
   4437  f7b0		       85 81		      STA	player1x
   4438  f7b2		       a9 00		      LDA	#0
   4439  f7b4		       85 86		      STA	player1y
   4440  f7b6		       a9 fa		      LDA	#250
   4441  f7b8		       85 91		      STA	missile0y
   4442  f7ba				   .
   4443  f7ba							; 
   4444  f7ba
   4445  f7ba				   .
   4446  f7ba							; 
   4447  f7ba
   4448  f7ba				   .
   4449  f7ba							; 
   4450  f7ba
   4451  f7ba				   .
   4452  f7ba							; 
   4453  f7ba
   4454  f7ba				   .L0116		;  if _Bit3_Auto_Play{3} then goto __Skip_Squirrel_Kill
   4455  f7ba
   4456  f7ba		       a5 ec		      LDA	_Bit3_Auto_Play
   4457  f7bc		       29 08		      AND	#8
   4458  f7be		       f0 03		      BEQ	.skipL0116
   4459  f7c0				   .condpart39
   4460  f7c0		       4c eb f7 	      jmp	.__Skip_Squirrel_Kill
   4461  f7c3
   4462  f7c3				   .skipL0116
   4463  f7c3				   .
   4464  f7c3							; 
   4465  f7c3
   4466  f7c3				   .
   4467  f7c3							; 
   4468  f7c3
   4469  f7c3				   .
   4470  f7c3							; 
   4471  f7c3
   4472  f7c3				   .
   4473  f7c3							; 
   4474  f7c3
   4475  f7c3				   .L0117		;  score  =  score  +	1
   4476  f7c3
   4477  f7c3		       f8		      SED
   4478  f7c4		       18		      CLC
   4479  f7c5		       a5 95		      LDA	score+2
   4480  f7c7		       69 01		      ADC	#$01
   4481  f7c9		       85 95		      STA	score+2
   4482  f7cb		       a5 94		      LDA	score+1
   4483  f7cd		       69 00		      ADC	#$00
   4484  f7cf		       85 94		      STA	score+1
   4485  f7d1		       a5 93		      LDA	score
   4486  f7d3		       69 00		      ADC	#$00
   4487  f7d5		       85 93		      STA	score
   4488  f7d7		       d8		      CLD
   4489  f7d8				   .
   4490  f7d8							; 
   4491  f7d8
   4492  f7d8				   .
   4493  f7d8							; 
   4494  f7d8
   4495  f7d8				   .
   4496  f7d8							; 
   4497  f7d8
   4498  f7d8				   .
   4499  f7d8							; 
   4500  f7d8
   4501  f7d8				   .L0118		;  if _Ch0_Sound then goto __Skip_Squirrel_Kill
   4502  f7d8
   4503  f7d8		       a5 d6		      LDA	_Ch0_Sound
   4504  f7da		       f0 03		      BEQ	.skipL0118
   4505  f7dc				   .condpart40
   4506  f7dc		       4c eb f7 	      jmp	.__Skip_Squirrel_Kill
   4507  f7df
   4508  f7df				   .skipL0118
   4509  f7df				   .
   4510  f7df							; 
   4511  f7df
   4512  f7df				   .L0119		;  _Ch0_Sound	=  2  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   4513  f7df
   4514  f7df		       a9 02		      LDA	#2
   4515  f7e1		       85 d6		      STA	_Ch0_Sound
   4516  f7e3		       a9 01		      LDA	#1
   4517  f7e5		       85 d7		      STA	_Ch0_Duration
   4518  f7e7		       a9 00		      LDA	#0
   4519  f7e9		       85 d8		      STA	_Ch0_Counter
   4520  f7eb				   .
   4521  f7eb							; 
   4522  f7eb
   4523  f7eb				   .__Skip_Squirrel_Kill
   4524  f7eb							; __Skip_Squirrel_Kill
   4525  f7eb
   4526  f7eb				   .
   4527  f7eb							; 
   4528  f7eb
   4529  f7eb				   .
   4530  f7eb							; 
   4531  f7eb
   4532  f7eb				   .
   4533  f7eb							; 
   4534  f7eb
   4535  f7eb				   .
   4536  f7eb							; 
   4537  f7eb
   4538  f7eb				   .
   4539  f7eb							; 
   4540  f7eb
   4541  f7eb				   .
   4542  f7eb							; 
   4543  f7eb
   4544  f7eb				   .
   4545  f7eb							; 
   4546  f7eb
   4547  f7eb				   .
   4548  f7eb							; 
   4549  f7eb
   4550  f7eb				   .
   4551  f7eb							; 
   4552  f7eb
   4553  f7eb				   .
   4554  f7eb							; 
   4555  f7eb
   4556  f7eb				   .L0120		;  if !collision(player0,player1) then goto __Skip_Acorn_Eaten
   4557  f7eb
   4558  f7eb		       24 07		      bit	CXPPMM
   4559  f7ed		       30 03		      BMI	.skipL0120
   4560  f7ef				   .condpart41
   4561  f7ef		       4c 63 f8 	      jmp	.__Skip_Acorn_Eaten
   4562  f7f2
   4563  f7f2				   .skipL0120
   4564  f7f2				   .
   4565  f7f2							; 
   4566  f7f2
   4567  f7f2				   .
   4568  f7f2							; 
   4569  f7f2
   4570  f7f2				   .
   4571  f7f2							; 
   4572  f7f2
   4573  f7f2				   .
   4574  f7f2							; 
   4575  f7f2
   4576  f7f2				   .
   4577  f7f2							; 
   4578  f7f2
   4579  f7f2				   .L0121		;  if !pfscore1 then _Bit7_Last_Life{7}  =  1	:  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =	1
   4580  f7f2
   4581  f7f2		       a5 f2		      LDA	pfscore1
   4582  f7f4		       d0 12		      BNE	.skipL0121
   4583  f7f6				   .condpart42
   4584  f7f6		       a5 ec		      LDA	_Bit7_Last_Life
   4585  f7f8		       09 80		      ORA	#128
   4586  f7fa		       85 ec		      STA	_Bit7_Last_Life
   4587  f7fc		       a5 ec		      LDA	_Bit3_Auto_Play
   4588  f7fe		       29 08		      AND	#8
   4589  f800		       f0 06		      BEQ	.skip42then
   4590  f802				   .condpart43
   4591  f802		       a5 ec		      LDA	_Bit2_Game_Control
   4592  f804		       09 04		      ORA	#4
   4593  f806		       85 ec		      STA	_Bit2_Game_Control
   4594  f808				   .skip42then
   4595  f808				   .skipL0121
   4596  f808				   .
   4597  f808							; 
   4598  f808
   4599  f808				   .
   4600  f808							; 
   4601  f808
   4602  f808				   .
   4603  f808							; 
   4604  f808
   4605  f808				   .
   4606  f808							; 
   4607  f808
   4608  f808				   .L0122		;  if pfscore1 then pfscore1  =  pfscore1 / 4
   4609  f808
   4610  f808		       a5 f2		      LDA	pfscore1
   4611  f80a		       f0 06		      BEQ	.skipL0122
   4612  f80c				   .condpart44
   4613  f80c		       a5 f2		      LDA	pfscore1
   4614  f80e		       4a		      lsr
   4615  f80f		       4a		      lsr
   4616  f810		       85 f2		      STA	pfscore1
   4617  f812				   .skipL0122
   4618  f812				   .
   4619  f812							; 
   4620  f812
   4621  f812				   .
   4622  f812							; 
   4623  f812
   4624  f812				   .
   4625  f812							; 
   4626  f812
   4627  f812				   .
   4628  f812							; 
   4629  f812
   4630  f812				   .L0123		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0	:  missile0y  =  250
   4631  f812
   4632  f812							; complex statement detected
   4633  f812		       20 b8 f3 	      jsr	randomize
   4634  f815		       4a		      lsr
   4635  f816		       48		      PHA
   4636  f817		       20 b8 f3 	      jsr	randomize
   4637  f81a		       29 0f		      AND	#15
   4638  f81c		       ba		      TSX
   4639  f81d		       e8		      INX
   4640  f81e		       9a		      TXS
   4641  f81f		       18		      CLC
   4642  f820		       75 00		      ADC	$00,x
   4643  f822		       85 81		      STA	player1x
   4644  f824		       a9 00		      LDA	#0
   4645  f826		       85 86		      STA	player1y
   4646  f828		       a9 fa		      LDA	#250
   4647  f82a		       85 91		      STA	missile0y
   4648  f82c				   .
   4649  f82c							; 
   4650  f82c
   4651  f82c				   .
   4652  f82c							; 
   4653  f82c
   4654  f82c				   .
   4655  f82c							; 
   4656  f82c
   4657  f82c				   .
   4658  f82c							; 
   4659  f82c
   4660  f82c				   .L0124		;  if _Bit3_Auto_Play{3} then goto __Skip_Acorn_Eaten
   4661  f82c
   4662  f82c		       a5 ec		      LDA	_Bit3_Auto_Play
   4663  f82e		       29 08		      AND	#8
   4664  f830		       f0 03		      BEQ	.skipL0124
   4665  f832				   .condpart45
   4666  f832		       4c 63 f8 	      jmp	.__Skip_Acorn_Eaten
   4667  f835
   4668  f835				   .skipL0124
   4669  f835				   .
   4670  f835							; 
   4671  f835
   4672  f835				   .
   4673  f835							; 
   4674  f835
   4675  f835				   .
   4676  f835							; 
   4677  f835
   4678  f835				   .
   4679  f835							; 
   4680  f835
   4681  f835				   .L0125		;  if _sc3  >	0 then score  =  score	-  1
   4682  f835
   4683  f835		       a9 00		      LDA	#0
   4684  f837		       c5 95		      CMP	_sc3
   4685  f839		       b0 15		      BCS	.skipL0125
   4686  f83b				   .condpart46
   4687  f83b		       f8		      SED
   4688  f83c		       38		      SEC
   4689  f83d		       a5 95		      LDA	score+2
   4690  f83f		       e9 01		      SBC	#$01
   4691  f841		       85 95		      STA	score+2
   4692  f843		       a5 94		      LDA	score+1
   4693  f845		       e9 00		      SBC	#$00
   4694  f847		       85 94		      STA	score+1
   4695  f849		       a5 93		      LDA	score
   4696  f84b		       e9 00		      SBC	#$00
   4697  f84d		       85 93		      STA	score
   4698  f84f		       d8		      CLD
   4699  f850				   .skipL0125
   4700  f850				   .
   4701  f850							; 
   4702  f850
   4703  f850				   .
   4704  f850							; 
   4705  f850
   4706  f850				   .
   4707  f850							; 
   4708  f850
   4709  f850				   .
   4710  f850							; 
   4711  f850
   4712  f850				   .L0126		;  if _Ch0_Sound then goto __Skip_Acorn_Eaten
   4713  f850
   4714  f850		       a5 d6		      LDA	_Ch0_Sound
   4715  f852		       f0 03		      BEQ	.skipL0126
   4716  f854				   .condpart47
   4717  f854		       4c 63 f8 	      jmp	.__Skip_Acorn_Eaten
   4718  f857
   4719  f857				   .skipL0126
   4720  f857				   .
   4721  f857							; 
   4722  f857
   4723  f857				   .L0127		;  _Ch0_Sound	=  3  :  _Ch0_Duration = 1  :  _Ch0_Counter = 0
   4724  f857
   4725  f857		       a9 03		      LDA	#3
   4726  f859		       85 d6		      STA	_Ch0_Sound
   4727  f85b		       a9 01		      LDA	#1
   4728  f85d		       85 d7		      STA	_Ch0_Duration
   4729  f85f		       a9 00		      LDA	#0
   4730  f861		       85 d8		      STA	_Ch0_Counter
   4731  f863				   .
   4732  f863							; 
   4733  f863
   4734  f863				   .__Skip_Acorn_Eaten
   4735  f863							; __Skip_Acorn_Eaten
   4736  f863
   4737  f863				   .
   4738  f863							; 
   4739  f863
   4740  f863				   .
   4741  f863							; 
   4742  f863
   4743  f863				   .
   4744  f863							; 
   4745  f863
   4746  f863				   .
   4747  f863							; 
   4748  f863
   4749  f863				   .
   4750  f863							; 
   4751  f863
   4752  f863				   .
   4753  f863							; 
   4754  f863
   4755  f863				   .
   4756  f863							; 
   4757  f863
   4758  f863				   .
   4759  f863							; 
   4760  f863
   4761  f863				   .
   4762  f863							; 
   4763  f863
   4764  f863				   .
   4765  f863							; 
   4766  f863
   4767  f863				   .L0128		;  if !_Ch0_Sound then goto __Skip_Channel_0
   4768  f863
   4769  f863		       a5 d6		      LDA	_Ch0_Sound
   4770  f865		       d0 03		      BNE	.skipL0128
   4771  f867				   .condpart48
   4772  f867		       4c 5b f9 	      jmp	.__Skip_Channel_0
   4773  f86a
   4774  f86a				   .skipL0128
   4775  f86a				   .
   4776  f86a							; 
   4777  f86a
   4778  f86a				   .
   4779  f86a							; 
   4780  f86a
   4781  f86a				   .
   4782  f86a							; 
   4783  f86a
   4784  f86a				   .
   4785  f86a							; 
   4786  f86a
   4787  f86a				   .L0129		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   4788  f86a
   4789  f86a		       c6 d7		      DEC	_Ch0_Duration
   4790  f86c				   .
   4791  f86c							; 
   4792  f86c
   4793  f86c				   .
   4794  f86c							; 
   4795  f86c
   4796  f86c				   .
   4797  f86c							; 
   4798  f86c
   4799  f86c				   .
   4800  f86c							; 
   4801  f86c
   4802  f86c				   .
   4803  f86c							; 
   4804  f86c
   4805  f86c				   .L0130		;  if _Ch0_Duration then goto __Skip_Channel_0
   4806  f86c
   4807  f86c		       a5 d7		      LDA	_Ch0_Duration
   4808  f86e		       f0 03		      BEQ	.skipL0130
   4809  f870				   .condpart49
   4810  f870		       4c 5b f9 	      jmp	.__Skip_Channel_0
   4811  f873
   4812  f873				   .skipL0130
   4813  f873				   .
   4814  f873							; 
   4815  f873
   4816  f873				   .
   4817  f873							; 
   4818  f873
   4819  f873				   .
   4820  f873							; 
   4821  f873
   4822  f873				   .
   4823  f873							; 
   4824  f873
   4825  f873				   .
   4826  f873							; 
   4827  f873
   4828  f873				   .
   4829  f873							; 
   4830  f873
   4831  f873				   .
   4832  f873							; 
   4833  f873
   4834  f873				   .
   4835  f873							; 
   4836  f873
   4837  f873				   .
   4838  f873							; 
   4839  f873
   4840  f873				   .
   4841  f873							; 
   4842  f873
   4843  f873				   .
   4844  f873							; 
   4845  f873
   4846  f873				   .
   4847  f873							; 
   4848  f873
   4849  f873				   .L0131		;  if _Ch0_Sound  <>  1 then goto __Skip_Chan0_Sound_001
   4850  f873
   4851  f873		       a5 d6		      LDA	_Ch0_Sound
   4852  f875		       c9 01		      CMP	#1
   4853  f877		       f0 03		      BEQ	.skipL0131
   4854  f879				   .condpart50
   4855  f879		       4c b8 f8 	      jmp	.__Skip_Chan0_Sound_001
   4856  f87c
   4857  f87c				   .skipL0131
   4858  f87c				   .
   4859  f87c							; 
   4860  f87c
   4861  f87c				   .
   4862  f87c							; 
   4863  f87c
   4864  f87c				   .
   4865  f87c							; 
   4866  f87c
   4867  f87c				   .
   4868  f87c							; 
   4869  f87c
   4870  f87c				   .L0132		;  temp4  =  _Data_Fire_B_Sound[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
   4871  f87c
   4872  f87c		       a6 d8		      LDX	_Ch0_Counter
   4873  f87e		       bd 3a fe 	      LDA	_Data_Fire_B_Sound,x
   4874  f881		       85 9f		      STA	temp4
   4875  f883		       e6 d8		      INC	_Ch0_Counter
   4876  f885				   .
   4877  f885							; 
   4878  f885
   4879  f885				   .
   4880  f885							; 
   4881  f885
   4882  f885				   .
   4883  f885							; 
   4884  f885
   4885  f885				   .
   4886  f885							; 
   4887  f885
   4888  f885				   .L0133		;  if temp4  =  255 then goto __Clear_Channel_0
   4889  f885
   4890  f885		       a5 9f		      LDA	temp4
   4891  f887		       c9 ff		      CMP	#255
   4892  f889		       d0 03		      BNE	.skipL0133
   4893  f88b				   .condpart51
   4894  f88b		       4c 55 f9 	      jmp	.__Clear_Channel_0
   4895  f88e
   4896  f88e				   .skipL0133
   4897  f88e				   .
   4898  f88e							; 
   4899  f88e
   4900  f88e				   .
   4901  f88e							; 
   4902  f88e
   4903  f88e				   .
   4904  f88e							; 
   4905  f88e
   4906  f88e				   .
   4907  f88e							; 
   4908  f88e
   4909  f88e				   .L0134		;  temp5  =  _Data_Fire_B_Sound[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
   4910  f88e
   4911  f88e		       a6 d8		      LDX	_Ch0_Counter
   4912  f890		       bd 3a fe 	      LDA	_Data_Fire_B_Sound,x
   4913  f893		       85 a0		      STA	temp5
   4914  f895		       e6 d8		      INC	_Ch0_Counter
   4915  f897				   .L0135		;  temp6  =  _Data_Fire_B_Sound[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
   4916  f897
   4917  f897		       a6 d8		      LDX	_Ch0_Counter
   4918  f899		       bd 3a fe 	      LDA	_Data_Fire_B_Sound,x
   4919  f89c		       85 a1		      STA	temp6
   4920  f89e		       e6 d8		      INC	_Ch0_Counter
   4921  f8a0				   .
   4922  f8a0							; 
   4923  f8a0
   4924  f8a0				   .
   4925  f8a0							; 
   4926  f8a0
   4927  f8a0				   .
   4928  f8a0							; 
   4929  f8a0
   4930  f8a0				   .
   4931  f8a0							; 
   4932  f8a0
   4933  f8a0				   .L0136		;  AUDV0  =  temp4
   4934  f8a0
   4935  f8a0		       a5 9f		      LDA	temp4
   4936  f8a2		       85 19		      STA	AUDV0
   4937  f8a4				   .L0137		;  AUDC0  =  temp5
   4938  f8a4
   4939  f8a4		       a5 a0		      LDA	temp5
   4940  f8a6		       85 15		      STA	AUDC0
   4941  f8a8				   .L0138		;  AUDF0  =  temp6
   4942  f8a8
   4943  f8a8		       a5 a1		      LDA	temp6
   4944  f8aa		       85 17		      STA	AUDF0
   4945  f8ac				   .
   4946  f8ac							; 
   4947  f8ac
   4948  f8ac				   .
   4949  f8ac							; 
   4950  f8ac
   4951  f8ac				   .
   4952  f8ac							; 
   4953  f8ac
   4954  f8ac				   .
   4955  f8ac							; 
   4956  f8ac
   4957  f8ac				   .L0139		;  _Ch0_Duration  =  _Data_Fire_B_Sound[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
   4958  f8ac
   4959  f8ac		       a6 d8		      LDX	_Ch0_Counter
   4960  f8ae		       bd 3a fe 	      LDA	_Data_Fire_B_Sound,x
   4961  f8b1		       85 d7		      STA	_Ch0_Duration
   4962  f8b3		       e6 d8		      INC	_Ch0_Counter
   4963  f8b5				   .
   4964  f8b5							; 
   4965  f8b5
   4966  f8b5				   .
   4967  f8b5							; 
   4968  f8b5
   4969  f8b5				   .
   4970  f8b5							; 
   4971  f8b5
   4972  f8b5				   .
   4973  f8b5							; 
   4974  f8b5
   4975  f8b5				   .L0140		;  goto __Skip_Channel_0
   4976  f8b5
   4977  f8b5		       4c 5b f9 	      jmp	.__Skip_Channel_0
   4978  f8b8
   4979  f8b8				   .
   4980  f8b8							; 
   4981  f8b8
   4982  f8b8				   .__Skip_Chan0_Sound_001
   4983  f8b8							; __Skip_Chan0_Sound_001
   4984  f8b8
   4985  f8b8				   .
   4986  f8b8							; 
   4987  f8b8
   4988  f8b8				   .
   4989  f8b8							; 
   4990  f8b8
   4991  f8b8				   .
   4992  f8b8							; 
   4993  f8b8
   4994  f8b8				   .
   4995  f8b8							; 
   4996  f8b8
   4997  f8b8				   .
   4998  f8b8							; 
   4999  f8b8
   5000  f8b8				   .
   5001  f8b8							; 
   5002  f8b8
   5003  f8b8				   .
   5004  f8b8							; 
   5005  f8b8
   5006  f8b8				   .
   5007  f8b8							; 
   5008  f8b8
   5009  f8b8				   .
   5010  f8b8							; 
   5011  f8b8
   5012  f8b8				   .
   5013  f8b8							; 
   5014  f8b8
   5015  f8b8				   .
   5016  f8b8							; 
   5017  f8b8
   5018  f8b8				   .
   5019  f8b8							; 
   5020  f8b8
   5021  f8b8				   .L0141		;  if _Ch0_Sound  <>  2 then goto __Skip_Chan0_Sound_002
   5022  f8b8
   5023  f8b8		       a5 d6		      LDA	_Ch0_Sound
   5024  f8ba		       c9 02		      CMP	#2
   5025  f8bc		       f0 03		      BEQ	.skipL0141
   5026  f8be				   .condpart52
   5027  f8be		       4c fd f8 	      jmp	.__Skip_Chan0_Sound_002
   5028  f8c1
   5029  f8c1				   .skipL0141
   5030  f8c1				   .
   5031  f8c1							; 
   5032  f8c1
   5033  f8c1				   .
   5034  f8c1							; 
   5035  f8c1
   5036  f8c1				   .
   5037  f8c1							; 
   5038  f8c1
   5039  f8c1				   .
   5040  f8c1							; 
   5041  f8c1
   5042  f8c1				   .L0142		;  temp4  =  _Data_Enemy_Destroyed[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   5043  f8c1
   5044  f8c1		       a6 d8		      LDX	_Ch0_Counter
   5045  f8c3		       bd 56 fe 	      LDA	_Data_Enemy_Destroyed,x
   5046  f8c6		       85 9f		      STA	temp4
   5047  f8c8		       e6 d8		      INC	_Ch0_Counter
   5048  f8ca				   .
   5049  f8ca							; 
   5050  f8ca
   5051  f8ca				   .
   5052  f8ca							; 
   5053  f8ca
   5054  f8ca				   .
   5055  f8ca							; 
   5056  f8ca
   5057  f8ca				   .
   5058  f8ca							; 
   5059  f8ca
   5060  f8ca				   .L0143		;  if temp4  =  255 then goto __Clear_Channel_0
   5061  f8ca
   5062  f8ca		       a5 9f		      LDA	temp4
   5063  f8cc		       c9 ff		      CMP	#255
   5064  f8ce		       d0 03		      BNE	.skipL0143
   5065  f8d0				   .condpart53
   5066  f8d0		       4c 55 f9 	      jmp	.__Clear_Channel_0
   5067  f8d3
   5068  f8d3				   .skipL0143
   5069  f8d3				   .
   5070  f8d3							; 
   5071  f8d3
   5072  f8d3				   .
   5073  f8d3							; 
   5074  f8d3
   5075  f8d3				   .
   5076  f8d3							; 
   5077  f8d3
   5078  f8d3				   .
   5079  f8d3							; 
   5080  f8d3
   5081  f8d3				   .L0144		;  temp5  =  _Data_Enemy_Destroyed[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   5082  f8d3
   5083  f8d3		       a6 d8		      LDX	_Ch0_Counter
   5084  f8d5		       bd 56 fe 	      LDA	_Data_Enemy_Destroyed,x
   5085  f8d8		       85 a0		      STA	temp5
   5086  f8da		       e6 d8		      INC	_Ch0_Counter
   5087  f8dc				   .L0145		;  temp6  =  _Data_Enemy_Destroyed[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   5088  f8dc
   5089  f8dc		       a6 d8		      LDX	_Ch0_Counter
   5090  f8de		       bd 56 fe 	      LDA	_Data_Enemy_Destroyed,x
   5091  f8e1		       85 a1		      STA	temp6
   5092  f8e3		       e6 d8		      INC	_Ch0_Counter
   5093  f8e5				   .
   5094  f8e5							; 
   5095  f8e5
   5096  f8e5				   .
   5097  f8e5							; 
   5098  f8e5
   5099  f8e5				   .
   5100  f8e5							; 
   5101  f8e5
   5102  f8e5				   .
   5103  f8e5							; 
   5104  f8e5
   5105  f8e5				   .L0146		;  AUDV0  =  temp4
   5106  f8e5
   5107  f8e5		       a5 9f		      LDA	temp4
   5108  f8e7		       85 19		      STA	AUDV0
   5109  f8e9				   .L0147		;  AUDC0  =  temp5
   5110  f8e9
   5111  f8e9		       a5 a0		      LDA	temp5
   5112  f8eb		       85 15		      STA	AUDC0
   5113  f8ed				   .L0148		;  AUDF0  =  temp6
   5114  f8ed
   5115  f8ed		       a5 a1		      LDA	temp6
   5116  f8ef		       85 17		      STA	AUDF0
   5117  f8f1				   .
   5118  f8f1							; 
   5119  f8f1
   5120  f8f1				   .
   5121  f8f1							; 
   5122  f8f1
   5123  f8f1				   .
   5124  f8f1							; 
   5125  f8f1
   5126  f8f1				   .
   5127  f8f1							; 
   5128  f8f1
   5129  f8f1				   .L0149		;  _Ch0_Duration  =  _Data_Enemy_Destroyed[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   5130  f8f1
   5131  f8f1		       a6 d8		      LDX	_Ch0_Counter
   5132  f8f3		       bd 56 fe 	      LDA	_Data_Enemy_Destroyed,x
   5133  f8f6		       85 d7		      STA	_Ch0_Duration
   5134  f8f8		       e6 d8		      INC	_Ch0_Counter
   5135  f8fa				   .
   5136  f8fa							; 
   5137  f8fa
   5138  f8fa				   .
   5139  f8fa							; 
   5140  f8fa
   5141  f8fa				   .
   5142  f8fa							; 
   5143  f8fa
   5144  f8fa				   .
   5145  f8fa							; 
   5146  f8fa
   5147  f8fa				   .L0150		;  goto __Skip_Channel_0
   5148  f8fa
   5149  f8fa		       4c 5b f9 	      jmp	.__Skip_Channel_0
   5150  f8fd
   5151  f8fd				   .
   5152  f8fd							; 
   5153  f8fd
   5154  f8fd				   .__Skip_Chan0_Sound_002
   5155  f8fd							; __Skip_Chan0_Sound_002
   5156  f8fd
   5157  f8fd				   .
   5158  f8fd							; 
   5159  f8fd
   5160  f8fd				   .
   5161  f8fd							; 
   5162  f8fd
   5163  f8fd				   .
   5164  f8fd							; 
   5165  f8fd
   5166  f8fd				   .
   5167  f8fd							; 
   5168  f8fd
   5169  f8fd				   .
   5170  f8fd							; 
   5171  f8fd
   5172  f8fd				   .
   5173  f8fd							; 
   5174  f8fd
   5175  f8fd				   .
   5176  f8fd							; 
   5177  f8fd
   5178  f8fd				   .
   5179  f8fd							; 
   5180  f8fd
   5181  f8fd				   .
   5182  f8fd							; 
   5183  f8fd
   5184  f8fd				   .
   5185  f8fd							; 
   5186  f8fd
   5187  f8fd				   .
   5188  f8fd							; 
   5189  f8fd
   5190  f8fd				   .
   5191  f8fd							; 
   5192  f8fd
   5193  f8fd				   .L0151		;  if _Ch0_Sound  <>  3 then goto __Skip_Chan0_Sound_003
   5194  f8fd
   5195  f8fd		       a5 d6		      LDA	_Ch0_Sound
   5196  f8ff		       c9 03		      CMP	#3
   5197  f901		       f0 03		      BEQ	.skipL0151
   5198  f903				   .condpart54
   5199  f903		       4c 52 f9 	      jmp	.__Skip_Chan0_Sound_003
   5200  f906
   5201  f906				   .skipL0151
   5202  f906				   .
   5203  f906							; 
   5204  f906
   5205  f906				   .
   5206  f906							; 
   5207  f906
   5208  f906				   .
   5209  f906							; 
   5210  f906
   5211  f906				   .
   5212  f906							; 
   5213  f906
   5214  f906				   .L0152		;  temp4  =  _Data_Player_Damaged[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   5215  f906
   5216  f906		       a6 d8		      LDX	_Ch0_Counter
   5217  f908		       bd 8e fe 	      LDA	_Data_Player_Damaged,x
   5218  f90b		       85 9f		      STA	temp4
   5219  f90d		       e6 d8		      INC	_Ch0_Counter
   5220  f90f				   .
   5221  f90f							; 
   5222  f90f
   5223  f90f				   .
   5224  f90f							; 
   5225  f90f
   5226  f90f				   .
   5227  f90f							; 
   5228  f90f
   5229  f90f				   .
   5230  f90f							; 
   5231  f90f
   5232  f90f				   .L0153		;  if temp4  =  255 then if _Bit7_Last_Life{7} then _Bit2_Game_Control{2}  =  1
   5233  f90f
   5234  f90f		       a5 9f		      LDA	temp4
   5235  f911		       c9 ff		      CMP	#255
   5236  f913		       d0 0a		      BNE	.skipL0153
   5237  f915				   .condpart55
   5238  f915		       24 ec		      BIT	_Bit7_Last_Life
   5239  f917		       10 06		      BPL	.skip55then
   5240  f919				   .condpart56
   5241  f919		       a5 ec		      LDA	_Bit2_Game_Control
   5242  f91b		       09 04		      ORA	#4
   5243  f91d		       85 ec		      STA	_Bit2_Game_Control
   5244  f91f				   .skip55then
   5245  f91f				   .skipL0153
   5246  f91f				   .
   5247  f91f							; 
   5248  f91f
   5249  f91f				   .
   5250  f91f							; 
   5251  f91f
   5252  f91f				   .
   5253  f91f							; 
   5254  f91f
   5255  f91f				   .
   5256  f91f							; 
   5257  f91f
   5258  f91f				   .L0154		;  if temp4  =  255 then goto __Clear_Channel_0
   5259  f91f
   5260  f91f		       a5 9f		      LDA	temp4
   5261  f921		       c9 ff		      CMP	#255
   5262  f923		       d0 03		      BNE	.skipL0154
   5263  f925				   .condpart57
   5264  f925		       4c 55 f9 	      jmp	.__Clear_Channel_0
   5265  f928
   5266  f928				   .skipL0154
   5267  f928				   .
   5268  f928							; 
   5269  f928
   5270  f928				   .
   5271  f928							; 
   5272  f928
   5273  f928				   .
   5274  f928							; 
   5275  f928
   5276  f928				   .
   5277  f928							; 
   5278  f928
   5279  f928				   .L0155		;  temp5  =  _Data_Player_Damaged[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   5280  f928
   5281  f928		       a6 d8		      LDX	_Ch0_Counter
   5282  f92a		       bd 8e fe 	      LDA	_Data_Player_Damaged,x
   5283  f92d		       85 a0		      STA	temp5
   5284  f92f		       e6 d8		      INC	_Ch0_Counter
   5285  f931				   .L0156		;  temp6  =  _Data_Player_Damaged[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   5286  f931
   5287  f931		       a6 d8		      LDX	_Ch0_Counter
   5288  f933		       bd 8e fe 	      LDA	_Data_Player_Damaged,x
   5289  f936		       85 a1		      STA	temp6
   5290  f938		       e6 d8		      INC	_Ch0_Counter
   5291  f93a				   .
   5292  f93a							; 
   5293  f93a
   5294  f93a				   .
   5295  f93a							; 
   5296  f93a
   5297  f93a				   .
   5298  f93a							; 
   5299  f93a
   5300  f93a				   .
   5301  f93a							; 
   5302  f93a
   5303  f93a				   .L0157		;  AUDV0  =  temp4
   5304  f93a
   5305  f93a		       a5 9f		      LDA	temp4
   5306  f93c		       85 19		      STA	AUDV0
   5307  f93e				   .L0158		;  AUDC0  =  temp5
   5308  f93e
   5309  f93e		       a5 a0		      LDA	temp5
   5310  f940		       85 15		      STA	AUDC0
   5311  f942				   .L0159		;  AUDF0  =  temp6
   5312  f942
   5313  f942		       a5 a1		      LDA	temp6
   5314  f944		       85 17		      STA	AUDF0
   5315  f946				   .
   5316  f946							; 
   5317  f946
   5318  f946				   .
   5319  f946							; 
   5320  f946
   5321  f946				   .
   5322  f946							; 
   5323  f946
   5324  f946				   .
   5325  f946							; 
   5326  f946
   5327  f946				   .L0160		;  _Ch0_Duration  =  _Data_Player_Damaged[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   5328  f946
   5329  f946		       a6 d8		      LDX	_Ch0_Counter
   5330  f948		       bd 8e fe 	      LDA	_Data_Player_Damaged,x
   5331  f94b		       85 d7		      STA	_Ch0_Duration
   5332  f94d		       e6 d8		      INC	_Ch0_Counter
   5333  f94f				   .
   5334  f94f							; 
   5335  f94f
   5336  f94f				   .
   5337  f94f							; 
   5338  f94f
   5339  f94f				   .
   5340  f94f							; 
   5341  f94f
   5342  f94f				   .
   5343  f94f							; 
   5344  f94f
   5345  f94f				   .L0161		;  goto __Skip_Channel_0
   5346  f94f
   5347  f94f		       4c 5b f9 	      jmp	.__Skip_Channel_0
   5348  f952
   5349  f952				   .
   5350  f952							; 
   5351  f952
   5352  f952				   .__Skip_Chan0_Sound_003
   5353  f952							; __Skip_Chan0_Sound_003
   5354  f952
   5355  f952				   .
   5356  f952							; 
   5357  f952
   5358  f952				   .
   5359  f952							; 
   5360  f952
   5361  f952				   .
   5362  f952							; 
   5363  f952
   5364  f952				   .
   5365  f952							; 
   5366  f952
   5367  f952				   .
   5368  f952							; 
   5369  f952
   5370  f952				   .
   5371  f952							; 
   5372  f952
   5373  f952				   .
   5374  f952							; 
   5375  f952
   5376  f952				   .
   5377  f952							; 
   5378  f952
   5379  f952				   .
   5380  f952							; 
   5381  f952
   5382  f952				   .
   5383  f952							; 
   5384  f952
   5385  f952				   .
   5386  f952							; 
   5387  f952
   5388  f952				   .
   5389  f952							; 
   5390  f952
   5391  f952				   .
   5392  f952							; 
   5393  f952
   5394  f952				   .
   5395  f952							; 
   5396  f952
   5397  f952				   .
   5398  f952							; 
   5399  f952
   5400  f952				   .
   5401  f952							; 
   5402  f952
   5403  f952				   .
   5404  f952							; 
   5405  f952
   5406  f952				   .L0162		;  goto __Skip_Channel_0
   5407  f952
   5408  f952		       4c 5b f9 	      jmp	.__Skip_Channel_0
   5409  f955
   5410  f955				   .
   5411  f955							; 
   5412  f955
   5413  f955				   .
   5414  f955							; 
   5415  f955
   5416  f955				   .
   5417  f955							; 
   5418  f955
   5419  f955				   .
   5420  f955							; 
   5421  f955
   5422  f955				   .
   5423  f955							; 
   5424  f955
   5425  f955				   .
   5426  f955							; 
   5427  f955
   5428  f955				   .
   5429  f955							; 
   5430  f955
   5431  f955				   .__Clear_Channel_0
   5432  f955							; __Clear_Channel_0
   5433  f955
   5434  f955				   .
   5435  f955							; 
   5436  f955
   5437  f955				   .
   5438  f955							; 
   5439  f955
   5440  f955				   .
   5441  f955							; 
   5442  f955
   5443  f955				   .
   5444  f955							; 
   5445  f955
   5446  f955				   .L0163		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   5447  f955
   5448  f955		       a9 00		      LDA	#0
   5449  f957		       85 d6		      STA	_Ch0_Sound
   5450  f959		       85 19		      STA	AUDV0
   5451  f95b				   .
   5452  f95b							; 
   5453  f95b
   5454  f95b				   .
   5455  f95b							; 
   5456  f95b
   5457  f95b				   .
   5458  f95b							; 
   5459  f95b
   5460  f95b				   .
   5461  f95b							; 
   5462  f95b
   5463  f95b				   .
   5464  f95b							; 
   5465  f95b
   5466  f95b				   .
   5467  f95b							; 
   5468  f95b
   5469  f95b				   .
   5470  f95b							; 
   5471  f95b
   5472  f95b				   .__Skip_Channel_0
   5473  f95b							; __Skip_Channel_0
   5474  f95b
   5475  f95b				   .
   5476  f95b							; 
   5477  f95b
   5478  f95b				   .
   5479  f95b							; 
   5480  f95b
   5481  f95b				   .
   5482  f95b							; 
   5483  f95b
   5484  f95b				   .
   5485  f95b							; 
   5486  f95b
   5487  f95b				   .
   5488  f95b							; 
   5489  f95b
   5490  f95b				   .
   5491  f95b							; 
   5492  f95b
   5493  f95b				   .
   5494  f95b							; 
   5495  f95b
   5496  f95b				   .
   5497  f95b							; 
   5498  f95b
   5499  f95b				   .
   5500  f95b							; 
   5501  f95b
   5502  f95b				   .
   5503  f95b							; 
   5504  f95b
   5505  f95b				   .
   5506  f95b							; 
   5507  f95b
   5508  f95b				   .
   5509  f95b							; 
   5510  f95b
   5511  f95b				   .L0164		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Flip
   5512  f95b
   5513  f95b		       a5 ec		      LDA	_Bit3_Auto_Play
   5514  f95d		       29 08		      AND	#8
   5515  f95f		       d0 03		      BNE	.skipL0164
   5516  f961				   .condpart58
   5517  f961		       4c ad f9 	      jmp	.__AP_Skip_Flip
   5518  f964
   5519  f964				   .skipL0164
   5520  f964				   .
   5521  f964							; 
   5522  f964
   5523  f964				   .
   5524  f964							; 
   5525  f964
   5526  f964				   .
   5527  f964							; 
   5528  f964
   5529  f964				   .
   5530  f964							; 
   5531  f964
   5532  f964				   .L0165		;  _AP_2_Sec_Score_Flip  =  _AP_2_Sec_Score_Flip  +  1
   5533  f964
   5534  f964		       e6 dc		      INC	_AP_2_Sec_Score_Flip
   5535  f966				   .
   5536  f966							; 
   5537  f966
   5538  f966				   .
   5539  f966							; 
   5540  f966
   5541  f966				   .
   5542  f966							; 
   5543  f966
   5544  f966				   .
   5545  f966							; 
   5546  f966
   5547  f966				   .
   5548  f966							; 
   5549  f966
   5550  f966				   .L0166		;  if _AP_2_Sec_Score_Flip  <	120 then goto __AP_Skip_Flip
   5551  f966
   5552  f966		       a5 dc		      LDA	_AP_2_Sec_Score_Flip
   5553  f968		       c9 78		      CMP	#120
   5554  f96a		       b0 03		      BCS	.skipL0166
   5555  f96c				   .condpart59
   5556  f96c		       4c ad f9 	      jmp	.__AP_Skip_Flip
   5557  f96f
   5558  f96f				   .skipL0166
   5559  f96f				   .
   5560  f96f							; 
   5561  f96f
   5562  f96f				   .
   5563  f96f							; 
   5564  f96f
   5565  f96f				   .
   5566  f96f							; 
   5567  f96f
   5568  f96f				   .
   5569  f96f							; 
   5570  f96f
   5571  f96f				   .L0167		;  _AP_2_Sec_Score_Flip  =  0	:  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   5572  f96f
   5573  f96f		       a9 00		      LDA	#0
   5574  f971		       85 dc		      STA	_AP_2_Sec_Score_Flip
   5575  f973		       a5 ec		      LDA	_Bit6_Swap_Scores
   5576  f975		       29 40		      AND	#64
   5577  f977		       08		      PHP
   5578  f978		       a5 ec		      LDA	_Bit6_Swap_Scores
   5579  f97a		       29 bf		      AND	#191
   5580  f97c		       28		      PLP
   5581  f97d		       d0 02		      .byte.b	$D0, $02
   5582  f97f		       09 40		      ORA	#64
   5583  f981		       85 ec		      STA	_Bit6_Swap_Scores
   5584  f983				   .
   5585  f983							; 
   5586  f983
   5587  f983				   .
   5588  f983							; 
   5589  f983
   5590  f983				   .
   5591  f983							; 
   5592  f983
   5593  f983				   .
   5594  f983							; 
   5595  f983
   5596  f983				   .L0168		;  if !_Bit6_Swap_Scores{6} then goto __AP_Skip_HiScore_Swap
   5597  f983
   5598  f983		       24 ec		      BIT	_Bit6_Swap_Scores
   5599  f985		       70 03		      BVS	.skipL0168
   5600  f987				   .condpart60
   5601  f987		       4c 9d f9 	      jmp	.__AP_Skip_HiScore_Swap
   5602  f98a
   5603  f98a				   .skipL0168
   5604  f98a				   .
   5605  f98a							; 
   5606  f98a
   5607  f98a				   .
   5608  f98a							; 
   5609  f98a
   5610  f98a				   .
   5611  f98a							; 
   5612  f98a
   5613  f98a				   .
   5614  f98a							; 
   5615  f98a
   5616  f98a				   .L0169		;  scorecolor	=  $AE
   5617  f98a
   5618  f98a		       a9 ae		      LDA	#$AE
   5619  f98c		       85 a3		      STA	scorecolor
   5620  f98e				   .
   5621  f98e							; 
   5622  f98e
   5623  f98e				   .L0170		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   5624  f98e
   5625  f98e		       a5 e9		      LDA	_High_Score1
   5626  f990		       85 93		      STA	_sc1
   5627  f992		       a5 ea		      LDA	_High_Score2
   5628  f994		       85 94		      STA	_sc2
   5629  f996		       a5 eb		      LDA	_High_Score3
   5630  f998		       85 95		      STA	_sc3
   5631  f99a				   .
   5632  f99a							; 
   5633  f99a
   5634  f99a				   .L0171		;  goto __AP_Skip_Flip
   5635  f99a
   5636  f99a		       4c ad f9 	      jmp	.__AP_Skip_Flip
   5637  f99d
   5638  f99d				   .
   5639  f99d							; 
   5640  f99d
   5641  f99d				   .__AP_Skip_HiScore_Swap
   5642  f99d							; __AP_Skip_HiScore_Swap
   5643  f99d
   5644  f99d				   .
   5645  f99d							; 
   5646  f99d
   5647  f99d				   .
   5648  f99d							; 
   5649  f99d
   5650  f99d				   .
   5651  f99d							; 
   5652  f99d
   5653  f99d				   .
   5654  f99d							; 
   5655  f99d
   5656  f99d				   .L0172		;  scorecolor	=  $1C
   5657  f99d
   5658  f99d		       a9 1c		      LDA	#$1C
   5659  f99f		       85 a3		      STA	scorecolor
   5660  f9a1				   .
   5661  f9a1							; 
   5662  f9a1
   5663  f9a1				   .L0173		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   5664  f9a1
   5665  f9a1		       a5 e6		      LDA	_Score1_Mem
   5666  f9a3		       85 93		      STA	_sc1
   5667  f9a5		       a5 e7		      LDA	_Score2_Mem
   5668  f9a7		       85 94		      STA	_sc2
   5669  f9a9		       a5 e8		      LDA	_Score3_Mem
   5670  f9ab		       85 95		      STA	_sc3
   5671  f9ad				   .
   5672  f9ad							; 
   5673  f9ad
   5674  f9ad				   .__AP_Skip_Flip
   5675  f9ad							; __AP_Skip_Flip
   5676  f9ad
   5677  f9ad				   .
   5678  f9ad							; 
   5679  f9ad
   5680  f9ad				   .
   5681  f9ad							; 
   5682  f9ad
   5683  f9ad				   .
   5684  f9ad							; 
   5685  f9ad
   5686  f9ad				   .
   5687  f9ad							; 
   5688  f9ad
   5689  f9ad				   .
   5690  f9ad							; 
   5691  f9ad
   5692  f9ad				   .
   5693  f9ad							; 
   5694  f9ad
   5695  f9ad				   .
   5696  f9ad							; 
   5697  f9ad
   5698  f9ad				   .
   5699  f9ad							; 
   5700  f9ad
   5701  f9ad				   .
   5702  f9ad							; 
   5703  f9ad
   5704  f9ad				   .
   5705  f9ad							; 
   5706  f9ad
   5707  f9ad				   .L0174		;  if _Bit3_Auto_Play{3} then goto __AP_Skip_Pause
   5708  f9ad
   5709  f9ad		       a5 ec		      LDA	_Bit3_Auto_Play
   5710  f9af		       29 08		      AND	#8
   5711  f9b1		       f0 03		      BEQ	.skipL0174
   5712  f9b3				   .condpart61
   5713  f9b3		       4c f2 f9 	      jmp	.__AP_Skip_Pause
   5714  f9b6
   5715  f9b6				   .skipL0174
   5716  f9b6				   .
   5717  f9b6							; 
   5718  f9b6
   5719  f9b6				   .
   5720  f9b6							; 
   5721  f9b6
   5722  f9b6				   .
   5723  f9b6							; 
   5724  f9b6
   5725  f9b6				   .
   5726  f9b6							; 
   5727  f9b6
   5728  f9b6				   .L0175		;  _Bit1_BW_Check{1}  =  0
   5729  f9b6
   5730  f9b6		       a5 e5		      LDA	_Bit1_BW_Check
   5731  f9b8		       29 fd		      AND	#253
   5732  f9ba		       85 e5		      STA	_Bit1_BW_Check
   5733  f9bc				   .
   5734  f9bc							; 
   5735  f9bc
   5736  f9bc				   .L0176		;  if switchbw then _Bit1_BW_Check{1}	=  1
   5737  f9bc
   5738  f9bc		       a9 08		      lda	#8
   5739  f9be		       2c 82 02 	      bit	SWCHB
   5740  f9c1		       d0 06		      BNE	.skipL0176
   5741  f9c3				   .condpart62
   5742  f9c3		       a5 e5		      LDA	_Bit1_BW_Check
   5743  f9c5		       09 02		      ORA	#2
   5744  f9c7		       85 e5		      STA	_Bit1_BW_Check
   5745  f9c9				   .skipL0176
   5746  f9c9				   .
   5747  f9c9							; 
   5748  f9c9
   5749  f9c9				   .
   5750  f9c9							; 
   5751  f9c9
   5752  f9c9				   .
   5753  f9c9							; 
   5754  f9c9
   5755  f9c9				   .
   5756  f9c9							; 
   5757  f9c9
   5758  f9c9				   .
   5759  f9c9							; 
   5760  f9c9
   5761  f9c9				   .L0177		;  if _Bit0_BW_Mem{0} then if !_Bit1_BW_Check{1} then goto __Pause_Setup
   5762  f9c9
   5763  f9c9		       a5 e5		      LDA	_Bit0_BW_Mem
   5764  f9cb		       4a		      LSR
   5765  f9cc		       90 09		      BCC	.skipL0177
   5766  f9ce				   .condpart63
   5767  f9ce		       a5 e5		      LDA	_Bit1_BW_Check
   5768  f9d0		       29 02		      AND	#2
   5769  f9d2		       d0 03		      BNE	.skip63then
   5770  f9d4				   .condpart64
   5771  f9d4		       4c ed fb 	      jmp	.__Pause_Setup
   5772  f9d7
   5773  f9d7				   .skip63then
   5774  f9d7				   .skipL0177
   5775  f9d7				   .
   5776  f9d7							; 
   5777  f9d7
   5778  f9d7				   .L0178		;  if !_Bit0_BW_Mem{0} then if _Bit1_BW_Check{1} then goto __Pause_Setup
   5779  f9d7
   5780  f9d7		       a5 e5		      LDA	_Bit0_BW_Mem
   5781  f9d9		       4a		      LSR
   5782  f9da		       b0 09		      BCS	.skipL0178
   5783  f9dc				   .condpart65
   5784  f9dc		       a5 e5		      LDA	_Bit1_BW_Check
   5785  f9de		       29 02		      AND	#2
   5786  f9e0		       f0 03		      BEQ	.skip65then
   5787  f9e2				   .condpart66
   5788  f9e2		       4c ed fb 	      jmp	.__Pause_Setup
   5789  f9e5
   5790  f9e5				   .skip65then
   5791  f9e5				   .skipL0178
   5792  f9e5				   .
   5793  f9e5							; 
   5794  f9e5
   5795  f9e5				   .
   5796  f9e5							; 
   5797  f9e5
   5798  f9e5				   .
   5799  f9e5							; 
   5800  f9e5
   5801  f9e5				   .
   5802  f9e5							; 
   5803  f9e5
   5804  f9e5				   .L0179		;  if joy1fire  &&  !_Bit1_FireB_Restrainer{1} then goto __Pause_Setup
   5805  f9e5
   5806  f9e5		       24 0d		      bit	INPT5
   5807  f9e7		       30 09		      BMI	.skipL0179
   5808  f9e9				   .condpart67
   5809  f9e9		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   5810  f9eb		       29 02		      AND	#2
   5811  f9ed		       d0 03		      BNE	.skip67then
   5812  f9ef				   .condpart68
   5813  f9ef		       4c ed fb 	      jmp	.__Pause_Setup
   5814  f9f2
   5815  f9f2				   .skip67then
   5816  f9f2				   .skipL0179
   5817  f9f2				   .
   5818  f9f2							; 
   5819  f9f2
   5820  f9f2				   .__AP_Skip_Pause
   5821  f9f2							; __AP_Skip_Pause
   5822  f9f2
   5823  f9f2				   .
   5824  f9f2							; 
   5825  f9f2
   5826  f9f2				   .
   5827  f9f2							; 
   5828  f9f2
   5829  f9f2				   .
   5830  f9f2							; 
   5831  f9f2
   5832  f9f2				   .
   5833  f9f2							; 
   5834  f9f2
   5835  f9f2				   .
   5836  f9f2							; 
   5837  f9f2
   5838  f9f2				   .
   5839  f9f2							; 
   5840  f9f2
   5841  f9f2				   .
   5842  f9f2							; 
   5843  f9f2
   5844  f9f2				   .L0180		;  drawscreen
   5845  f9f2
   5846  f9f2		       20 c6 f3 	      jsr	drawscreen
   5847  f9f5				   .
   5848  f9f5							; 
   5849  f9f5
   5850  f9f5				   .
   5851  f9f5							; 
   5852  f9f5
   5853  f9f5				   .
   5854  f9f5							; 
   5855  f9f5
   5856  f9f5				   .
   5857  f9f5							; 
   5858  f9f5
   5859  f9f5				   .
   5860  f9f5							; 
   5861  f9f5
   5862  f9f5				   .
   5863  f9f5							; 
   5864  f9f5
   5865  f9f5				   .
   5866  f9f5							; 
   5867  f9f5
   5868  f9f5				   .
   5869  f9f5							; 
   5870  f9f5
   5871  f9f5				   .
   5872  f9f5							; 
   5873  f9f5
   5874  f9f5				   .
   5875  f9f5							; 
   5876  f9f5
   5877  f9f5				   .
   5878  f9f5							; 
   5879  f9f5
   5880  f9f5				   .
   5881  f9f5							; 
   5882  f9f5
   5883  f9f5				   .
   5884  f9f5							; 
   5885  f9f5
   5886  f9f5				   .
   5887  f9f5							; 
   5888  f9f5
   5889  f9f5				   .
   5890  f9f5							; 
   5891  f9f5
   5892  f9f5				   .L0181		;  if !_Bit2_Game_Control{2} then goto __Skip_Check_G_Over
   5893  f9f5
   5894  f9f5		       a5 ec		      LDA	_Bit2_Game_Control
   5895  f9f7		       29 04		      AND	#4
   5896  f9f9		       d0 03		      BNE	.skipL0181
   5897  f9fb				   .condpart69
   5898  f9fb		       4c 1c fa 	      jmp	.__Skip_Check_G_Over
   5899  f9fe
   5900  f9fe				   .skipL0181
   5901  f9fe				   .
   5902  f9fe							; 
   5903  f9fe
   5904  f9fe				   .
   5905  f9fe							; 
   5906  f9fe
   5907  f9fe				   .
   5908  f9fe							; 
   5909  f9fe
   5910  f9fe				   .
   5911  f9fe							; 
   5912  f9fe
   5913  f9fe				   .
   5914  f9fe							; 
   5915  f9fe
   5916  f9fe				   .L0182		;  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =  0  :  _sc1  =	_Score1_Mem  :	_sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem  :  goto __Start_Restart
   5917  f9fe
   5918  f9fe		       a5 ec		      LDA	_Bit3_Auto_Play
   5919  fa00		       29 08		      AND	#8
   5920  fa02		       f0 15		      BEQ	.skipL0182
   5921  fa04				   .condpart70
   5922  fa04		       a5 ec		      LDA	_Bit2_Game_Control
   5923  fa06		       29 fb		      AND	#251
   5924  fa08		       85 ec		      STA	_Bit2_Game_Control
   5925  fa0a		       a5 e6		      LDA	_Score1_Mem
   5926  fa0c		       85 93		      STA	_sc1
   5927  fa0e		       a5 e7		      LDA	_Score2_Mem
   5928  fa10		       85 94		      STA	_sc2
   5929  fa12		       a5 e8		      LDA	_Score3_Mem
   5930  fa14		       85 95		      STA	_sc3
   5931  fa16		       4c 66 f4 	      jmp	.__Start_Restart
   5932  fa19
   5933  fa19				   .skipL0182
   5934  fa19				   .
   5935  fa19							; 
   5936  fa19
   5937  fa19				   .
   5938  fa19							; 
   5939  fa19
   5940  fa19				   .
   5941  fa19							; 
   5942  fa19
   5943  fa19				   .
   5944  fa19							; 
   5945  fa19
   5946  fa19				   .L0183		;  goto __Game_Over_Setup
   5947  fa19
   5948  fa19		       4c 9f fa 	      jmp	.__Game_Over_Setup
   5949  fa1c
   5950  fa1c				   .
   5951  fa1c							; 
   5952  fa1c
   5953  fa1c				   .__Skip_Check_G_Over
   5954  fa1c							; __Skip_Check_G_Over
   5955  fa1c
   5956  fa1c				   .
   5957  fa1c							; 
   5958  fa1c
   5959  fa1c				   .
   5960  fa1c							; 
   5961  fa1c
   5962  fa1c				   .
   5963  fa1c							; 
   5964  fa1c
   5965  fa1c				   .
   5966  fa1c							; 
   5967  fa1c
   5968  fa1c				   .
   5969  fa1c							; 
   5970  fa1c
   5971  fa1c				   .
   5972  fa1c							; 
   5973  fa1c
   5974  fa1c				   .
   5975  fa1c							; 
   5976  fa1c
   5977  fa1c				   .
   5978  fa1c							; 
   5979  fa1c
   5980  fa1c				   .
   5981  fa1c							; 
   5982  fa1c
   5983  fa1c				   .
   5984  fa1c							; 
   5985  fa1c
   5986  fa1c				   .
   5987  fa1c							; 
   5988  fa1c
   5989  fa1c				   .
   5990  fa1c							; 
   5991  fa1c
   5992  fa1c				   .
   5993  fa1c							; 
   5994  fa1c
   5995  fa1c				   .
   5996  fa1c							; 
   5997  fa1c
   5998  fa1c				   .L0184		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Reset
   5999  fa1c
   6000  fa1c		       a5 ec		      LDA	_Bit3_Auto_Play
   6001  fa1e		       29 08		      AND	#8
   6002  fa20		       d0 03		      BNE	.skipL0184
   6003  fa22				   .condpart71
   6004  fa22		       4c 42 fa 	      jmp	.__AP_Skip_Reset
   6005  fa25
   6006  fa25				   .skipL0184
   6007  fa25				   .
   6008  fa25							; 
   6009  fa25
   6010  fa25				   .
   6011  fa25							; 
   6012  fa25
   6013  fa25				   .
   6014  fa25							; 
   6015  fa25
   6016  fa25				   .
   6017  fa25							; 
   6018  fa25
   6019  fa25				   .
   6020  fa25							; 
   6021  fa25
   6022  fa25				   .
   6023  fa25							; 
   6024  fa25
   6025  fa25				   .L0185		;  if switchreset  ||	joy0fire then _Bit3_Auto_Play{3}  =  0	:  _Bit2_Game_Control{2}  =  1	:  goto __Start_Restart
   6026  fa25
   6027  fa25		       a9 01		      lda	#1
   6028  fa27		       2c 82 02 	      bit	SWCHB
   6029  fa2a		       d0 03		      BNE	.skipL0185
   6030  fa2c				   .condpart72
   6031  fa2c		       4c 33 fa 	      jmp	.condpart73
   6032  fa2f				   .skipL0185
   6033  fa2f		       24 0c		      bit	INPT4
   6034  fa31		       30 0f		      BMI	.skip2OR
   6035  fa33				   .condpart73
   6036  fa33		       a5 ec		      LDA	_Bit3_Auto_Play
   6037  fa35		       29 f7		      AND	#247
   6038  fa37		       85 ec		      STA	_Bit3_Auto_Play
   6039  fa39		       a5 ec		      LDA	_Bit2_Game_Control
   6040  fa3b		       09 04		      ORA	#4
   6041  fa3d		       85 ec		      STA	_Bit2_Game_Control
   6042  fa3f		       4c 66 f4 	      jmp	.__Start_Restart
   6043  fa42
   6044  fa42				   .skip2OR
   6045  fa42				   .
   6046  fa42							; 
   6047  fa42
   6048  fa42				   .__AP_Skip_Reset
   6049  fa42							; __AP_Skip_Reset
   6050  fa42
   6051  fa42				   .
   6052  fa42							; 
   6053  fa42
   6054  fa42				   .
   6055  fa42							; 
   6056  fa42
   6057  fa42				   .
   6058  fa42							; 
   6059  fa42
   6060  fa42				   .
   6061  fa42							; 
   6062  fa42
   6063  fa42				   .
   6064  fa42							; 
   6065  fa42
   6066  fa42				   .L0186		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   6067  fa42
   6068  fa42		       a9 01		      lda	#1
   6069  fa44		       2c 82 02 	      bit	SWCHB
   6070  fa47		       f0 09		      BEQ	.skipL0186
   6071  fa49				   .condpart74
   6072  fa49		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6073  fa4b		       29 fe		      AND	#254
   6074  fa4d		       85 ec		      STA	_Bit0_Reset_Restrainer
   6075  fa4f		       4c 13 f6 	      jmp	.__Main_Loop
   6076  fa52
   6077  fa52				   .skipL0186
   6078  fa52				   .
   6079  fa52							; 
   6080  fa52
   6081  fa52				   .
   6082  fa52							; 
   6083  fa52
   6084  fa52				   .
   6085  fa52							; 
   6086  fa52
   6087  fa52				   .
   6088  fa52							; 
   6089  fa52
   6090  fa52				   .
   6091  fa52							; 
   6092  fa52
   6093  fa52				   .L0187		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   6094  fa52
   6095  fa52		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6096  fa54		       4a		      LSR
   6097  fa55		       90 03		      BCC	.skipL0187
   6098  fa57				   .condpart75
   6099  fa57		       4c 13 f6 	      jmp	.__Main_Loop
   6100  fa5a
   6101  fa5a				   .skipL0187
   6102  fa5a				   .
   6103  fa5a							; 
   6104  fa5a
   6105  fa5a				   .
   6106  fa5a							; 
   6107  fa5a
   6108  fa5a				   .
   6109  fa5a							; 
   6110  fa5a
   6111  fa5a				   .
   6112  fa5a							; 
   6113  fa5a
   6114  fa5a				   .L0188		;  _Bit2_Game_Control{2}  =  0
   6115  fa5a
   6116  fa5a		       a5 ec		      LDA	_Bit2_Game_Control
   6117  fa5c		       29 fb		      AND	#251
   6118  fa5e		       85 ec		      STA	_Bit2_Game_Control
   6119  fa60				   .
   6120  fa60							; 
   6121  fa60
   6122  fa60				   .
   6123  fa60							; 
   6124  fa60
   6125  fa60				   .
   6126  fa60							; 
   6127  fa60
   6128  fa60				   .
   6129  fa60							; 
   6130  fa60
   6131  fa60				   .
   6132  fa60							; 
   6133  fa60
   6134  fa60				   .L0189		;  goto __Game_Over_Setup
   6135  fa60
   6136  fa60		       4c 9f fa 	      jmp	.__Game_Over_Setup
   6137  fa63
   6138  fa63				   .
   6139  fa63							; 
   6140  fa63
   6141  fa63				   .
   6142  fa63							; 
   6143  fa63
   6144  fa63				   .
   6145  fa63							; 
   6146  fa63
   6147  fa63				   .
   6148  fa63							; 
   6149  fa63
   6150  fa63				   .
   6151  fa63							; 
   6152  fa63
   6153  fa63				   .
   6154  fa63							; 
   6155  fa63
   6156  fa63				   .
   6157  fa63							; 
   6158  fa63
   6159  fa63				   .
   6160  fa63							; 
   6161  fa63
   6162  fa63				   .
   6163  fa63							; 
   6164  fa63
   6165  fa63				   .
   6166  fa63							; 
   6167  fa63
   6168  fa63				   .
   6169  fa63							; 
   6170  fa63
   6171  fa63				   .
   6172  fa63							; 
   6173  fa63
   6174  fa63				   .
   6175  fa63							; 
   6176  fa63
   6177  fa63				   .
   6178  fa63							; 
   6179  fa63
   6180  fa63				   .
   6181  fa63							; 
   6182  fa63
   6183  fa63				   .
   6184  fa63							; 
   6185  fa63
   6186  fa63				   .
   6187  fa63							; 
   6188  fa63
   6189  fa63				   .
   6190  fa63							; 
   6191  fa63
   6192  fa63				   .
   6193  fa63							; 
   6194  fa63
   6195  fa63				   .
   6196  fa63							; 
   6197  fa63
   6198  fa63				   .__Sq00
   6199  fa63							; __Sq00
   6200  fa63
   6201  fa63				   .L0190		;  player1:
   6202  fa63
   6203  fa63		       a2 d7		      LDX	#<playerL0190_1
   6204  fa65		       86 8c		      STX	player1pointerlo
   6205  fa67		       a9 fe		      LDA	#>playerL0190_1
   6206  fa69		       85 8d		      STA	player1pointerhi
   6207  fa6b		       a9 03		      LDA	#3
   6208  fa6d		       85 8f		      STA	player1height
   6209  fa6f				   .
   6210  fa6f							; 
   6211  fa6f
   6212  fa6f				   .L0191		;  goto __Squirrel_Frame_Done
   6213  fa6f
   6214  fa6f		       4c 59 f6 	      jmp	.__Squirrel_Frame_Done
   6215  fa72
   6216  fa72				   .
   6217  fa72							; 
   6218  fa72
   6219  fa72				   .
   6220  fa72							; 
   6221  fa72
   6222  fa72				   .__Sq01
   6223  fa72							; __Sq01
   6224  fa72
   6225  fa72				   .L0192		;  player1:
   6226  fa72
   6227  fa72		       a2 db		      LDX	#<playerL0192_1
   6228  fa74		       86 8c		      STX	player1pointerlo
   6229  fa76		       a9 fe		      LDA	#>playerL0192_1
   6230  fa78		       85 8d		      STA	player1pointerhi
   6231  fa7a		       a9 03		      LDA	#3
   6232  fa7c		       85 8f		      STA	player1height
   6233  fa7e				   .
   6234  fa7e							; 
   6235  fa7e
   6236  fa7e				   .L0193		;  goto __Squirrel_Frame_Done
   6237  fa7e
   6238  fa7e		       4c 59 f6 	      jmp	.__Squirrel_Frame_Done
   6239  fa81
   6240  fa81				   .
   6241  fa81							; 
   6242  fa81
   6243  fa81				   .
   6244  fa81							; 
   6245  fa81
   6246  fa81				   .__Sq02
   6247  fa81							; __Sq02
   6248  fa81
   6249  fa81				   .L0194		;  player1:
   6250  fa81
   6251  fa81		       a2 df		      LDX	#<playerL0194_1
   6252  fa83		       86 8c		      STX	player1pointerlo
   6253  fa85		       a9 fe		      LDA	#>playerL0194_1
   6254  fa87		       85 8d		      STA	player1pointerhi
   6255  fa89		       a9 03		      LDA	#3
   6256  fa8b		       85 8f		      STA	player1height
   6257  fa8d				   .
   6258  fa8d							; 
   6259  fa8d
   6260  fa8d				   .L0195		;  goto __Squirrel_Frame_Done
   6261  fa8d
   6262  fa8d		       4c 59 f6 	      jmp	.__Squirrel_Frame_Done
   6263  fa90
   6264  fa90				   .
   6265  fa90							; 
   6266  fa90
   6267  fa90				   .
   6268  fa90							; 
   6269  fa90
   6270  fa90				   .__Sq03
   6271  fa90							; __Sq03
   6272  fa90
   6273  fa90				   .L0196		;  player1:
   6274  fa90
   6275  fa90		       a2 e3		      LDX	#<playerL0196_1
   6276  fa92		       86 8c		      STX	player1pointerlo
   6277  fa94		       a9 fe		      LDA	#>playerL0196_1
   6278  fa96		       85 8d		      STA	player1pointerhi
   6279  fa98		       a9 03		      LDA	#3
   6280  fa9a		       85 8f		      STA	player1height
   6281  fa9c				   .
   6282  fa9c							; 
   6283  fa9c
   6284  fa9c				   .L0197		;  goto __Squirrel_Frame_Done
   6285  fa9c
   6286  fa9c		       4c 59 f6 	      jmp	.__Squirrel_Frame_Done
   6287  fa9f
   6288  fa9f				   .
   6289  fa9f							; 
   6290  fa9f
   6291  fa9f				   .
   6292  fa9f							; 
   6293  fa9f
   6294  fa9f				   .
   6295  fa9f							; 
   6296  fa9f
   6297  fa9f				   .
   6298  fa9f							; 
   6299  fa9f
   6300  fa9f				   .
   6301  fa9f							; 
   6302  fa9f
   6303  fa9f				   .
   6304  fa9f							; 
   6305  fa9f
   6306  fa9f				   .
   6307  fa9f							; 
   6308  fa9f
   6309  fa9f				   .
   6310  fa9f							; 
   6311  fa9f
   6312  fa9f				   .
   6313  fa9f							; 
   6314  fa9f
   6315  fa9f				   .
   6316  fa9f							; 
   6317  fa9f
   6318  fa9f				   .
   6319  fa9f							; 
   6320  fa9f
   6321  fa9f				   .__Game_Over_Setup
   6322  fa9f							; __Game_Over_Setup
   6323  fa9f
   6324  fa9f				   .
   6325  fa9f							; 
   6326  fa9f
   6327  fa9f				   .
   6328  fa9f							; 
   6329  fa9f
   6330  fa9f				   .
   6331  fa9f							; 
   6332  fa9f
   6333  fa9f				   .
   6334  fa9f							; 
   6335  fa9f
   6336  fa9f				   .
   6337  fa9f							; 
   6338  fa9f
   6339  fa9f				   .
   6340  fa9f							; 
   6341  fa9f
   6342  fa9f				   .
   6343  fa9f							; 
   6344  fa9f
   6345  fa9f				   .
   6346  fa9f							; 
   6347  fa9f
   6348  fa9f				   .
   6349  fa9f							; 
   6350  fa9f
   6351  fa9f				   .
   6352  fa9f							; 
   6353  fa9f
   6354  fa9f				   .
   6355  fa9f							; 
   6356  fa9f
   6357  fa9f				   .L0198		;  if _sc1  >	_High_Score1 then goto __New_High_Score
   6358  fa9f
   6359  fa9f		       a5 e9		      LDA	_High_Score1
   6360  faa1		       c5 93		      CMP	_sc1
   6361  faa3		       b0 03		      BCS	.skipL0198
   6362  faa5				   .condpart76
   6363  faa5		       4c d8 fa 	      jmp	.__New_High_Score
   6364  faa8
   6365  faa8				   .skipL0198
   6366  faa8				   .L0199		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
   6367  faa8
   6368  faa8		       a5 93		      LDA	_sc1
   6369  faaa		       c5 e9		      CMP	_High_Score1
   6370  faac		       b0 03		      BCS	.skipL0199
   6371  faae				   .condpart77
   6372  faae		       4c e4 fa 	      jmp	.__Skip_High_Score
   6373  fab1
   6374  fab1				   .skipL0199
   6375  fab1				   .
   6376  fab1							; 
   6377  fab1
   6378  fab1				   .
   6379  fab1							; 
   6380  fab1
   6381  fab1				   .
   6382  fab1							; 
   6383  fab1
   6384  fab1				   .
   6385  fab1							; 
   6386  fab1
   6387  fab1				   .L0200		;  if _sc2  >	_High_Score2 then goto __New_High_Score
   6388  fab1
   6389  fab1		       a5 ea		      LDA	_High_Score2
   6390  fab3		       c5 94		      CMP	_sc2
   6391  fab5		       b0 03		      BCS	.skipL0200
   6392  fab7				   .condpart78
   6393  fab7		       4c d8 fa 	      jmp	.__New_High_Score
   6394  faba
   6395  faba				   .skipL0200
   6396  faba				   .L0201		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
   6397  faba
   6398  faba		       a5 94		      LDA	_sc2
   6399  fabc		       c5 ea		      CMP	_High_Score2
   6400  fabe		       b0 03		      BCS	.skipL0201
   6401  fac0				   .condpart79
   6402  fac0		       4c e4 fa 	      jmp	.__Skip_High_Score
   6403  fac3
   6404  fac3				   .skipL0201
   6405  fac3				   .
   6406  fac3							; 
   6407  fac3
   6408  fac3				   .
   6409  fac3							; 
   6410  fac3
   6411  fac3				   .
   6412  fac3							; 
   6413  fac3
   6414  fac3				   .
   6415  fac3							; 
   6416  fac3
   6417  fac3				   .L0202		;  if _sc3  >	_High_Score3 then goto __New_High_Score
   6418  fac3
   6419  fac3		       a5 eb		      LDA	_High_Score3
   6420  fac5		       c5 95		      CMP	_sc3
   6421  fac7		       b0 03		      BCS	.skipL0202
   6422  fac9				   .condpart80
   6423  fac9		       4c d8 fa 	      jmp	.__New_High_Score
   6424  facc
   6425  facc				   .skipL0202
   6426  facc				   .L0203		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
   6427  facc
   6428  facc		       a5 95		      LDA	_sc3
   6429  face		       c5 eb		      CMP	_High_Score3
   6430  fad0		       b0 03		      BCS	.skipL0203
   6431  fad2				   .condpart81
   6432  fad2		       4c e4 fa 	      jmp	.__Skip_High_Score
   6433  fad5
   6434  fad5				   .skipL0203
   6435  fad5				   .
   6436  fad5							; 
   6437  fad5
   6438  fad5				   .
   6439  fad5							; 
   6440  fad5
   6441  fad5				   .
   6442  fad5							; 
   6443  fad5
   6444  fad5				   .
   6445  fad5							; 
   6446  fad5
   6447  fad5				   .L0204		;  goto __Skip_High_Score
   6448  fad5
   6449  fad5		       4c e4 fa 	      jmp	.__Skip_High_Score
   6450  fad8
   6451  fad8				   .
   6452  fad8							; 
   6453  fad8
   6454  fad8				   .
   6455  fad8							; 
   6456  fad8
   6457  fad8				   .
   6458  fad8							; 
   6459  fad8
   6460  fad8				   .
   6461  fad8							; 
   6462  fad8
   6463  fad8				   .__New_High_Score
   6464  fad8							; __New_High_Score
   6465  fad8
   6466  fad8				   .
   6467  fad8							; 
   6468  fad8
   6469  fad8				   .L0205		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
   6470  fad8
   6471  fad8		       a5 93		      LDA	_sc1
   6472  fada		       85 e9		      STA	_High_Score1
   6473  fadc		       a5 94		      LDA	_sc2
   6474  fade		       85 ea		      STA	_High_Score2
   6475  fae0		       a5 95		      LDA	_sc3
   6476  fae2		       85 eb		      STA	_High_Score3
   6477  fae4				   .
   6478  fae4							; 
   6479  fae4
   6480  fae4				   .__Skip_High_Score
   6481  fae4							; __Skip_High_Score
   6482  fae4
   6483  fae4				   .
   6484  fae4							; 
   6485  fae4
   6486  fae4				   .
   6487  fae4							; 
   6488  fae4
   6489  fae4				   .
   6490  fae4							; 
   6491  fae4
   6492  fae4				   .
   6493  fae4							; 
   6494  fae4
   6495  fae4				   .
   6496  fae4							; 
   6497  fae4
   6498  fae4				   .L0206		;  if !_Bit2_Game_Control{2} then goto __Start_Restart
   6499  fae4
   6500  fae4		       a5 ec		      LDA	_Bit2_Game_Control
   6501  fae6		       29 04		      AND	#4
   6502  fae8		       d0 03		      BNE	.skipL0206
   6503  faea				   .condpart82
   6504  faea		       4c 66 f4 	      jmp	.__Start_Restart
   6505  faed
   6506  faed				   .skipL0206
   6507  faed				   .
   6508  faed							; 
   6509  faed
   6510  faed				   .
   6511  faed							; 
   6512  faed
   6513  faed				   .
   6514  faed							; 
   6515  faed
   6516  faed				   .
   6517  faed							; 
   6518  faed
   6519  faed				   .
   6520  faed							; 
   6521  faed
   6522  faed				   .
   6523  faed							; 
   6524  faed
   6525  faed				   .L0207		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   6526  faed
   6527  faed		       a5 93		      LDA	_sc1
   6528  faef		       85 e6		      STA	_Score1_Mem
   6529  faf1		       a5 94		      LDA	_sc2
   6530  faf3		       85 e7		      STA	_Score2_Mem
   6531  faf5		       a5 95		      LDA	_sc3
   6532  faf7		       85 e8		      STA	_Score3_Mem
   6533  faf9				   .
   6534  faf9							; 
   6535  faf9
   6536  faf9				   .
   6537  faf9							; 
   6538  faf9
   6539  faf9				   .
   6540  faf9							; 
   6541  faf9
   6542  faf9				   .
   6543  faf9							; 
   6544  faf9
   6545  faf9				   .
   6546  faf9							; 
   6547  faf9
   6548  faf9				   .
   6549  faf9							; 
   6550  faf9
   6551  faf9				   .L0208		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   6552  faf9
   6553  faf9		       a9 00		      LDA	#0
   6554  fafb		       85 d4		      STA	_Master_Counter
   6555  fafd		       85 d5		      STA	_Frame_Counter
   6556  faff				   .
   6557  faff							; 
   6558  faff
   6559  faff				   .
   6560  faff							; 
   6561  faff
   6562  faff				   .
   6563  faff							; 
   6564  faff
   6565  faff				   .
   6566  faff							; 
   6567  faff
   6568  faff				   .
   6569  faff							; 
   6570  faff
   6571  faff				   .
   6572  faff							; 
   6573  faff
   6574  faff				   .L0209		;  player0y  =  200  :  player1y  =  200  :  missile0y  =  200
   6575  faff
   6576  faff		       a9 c8		      LDA	#200
   6577  fb01		       85 85		      STA	player0y
   6578  fb03		       85 86		      STA	player1y
   6579  fb05		       85 91		      STA	missile0y
   6580  fb07				   .
   6581  fb07							; 
   6582  fb07
   6583  fb07				   .
   6584  fb07							; 
   6585  fb07
   6586  fb07				   .
   6587  fb07							; 
   6588  fb07
   6589  fb07				   .
   6590  fb07							; 
   6591  fb07
   6592  fb07				   .
   6593  fb07							; 
   6594  fb07
   6595  fb07				   .
   6596  fb07							; 
   6597  fb07
   6598  fb07				   .
   6599  fb07							; 
   6600  fb07
   6601  fb07				   .
   6602  fb07							; 
   6603  fb07
   6604  fb07				   .
   6605  fb07							; 
   6606  fb07
   6607  fb07				   .
   6608  fb07							; 
   6609  fb07
   6610  fb07				   .
   6611  fb07							; 
   6612  fb07
   6613  fb07				   .L0210		;  _Bit0_Reset_Restrainer{0}  =  1
   6614  fb07
   6615  fb07		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6616  fb09		       09 01		      ORA	#1
   6617  fb0b		       85 ec		      STA	_Bit0_Reset_Restrainer
   6618  fb0d				   .
   6619  fb0d							; 
   6620  fb0d
   6621  fb0d				   .
   6622  fb0d							; 
   6623  fb0d
   6624  fb0d				   .
   6625  fb0d							; 
   6626  fb0d
   6627  fb0d				   .
   6628  fb0d							; 
   6629  fb0d
   6630  fb0d				   .
   6631  fb0d							; 
   6632  fb0d
   6633  fb0d				   .
   6634  fb0d							; 
   6635  fb0d
   6636  fb0d				   .L0211		;  playfield:
   6637  fb0d
   6638  fb0d				  -	      ifconst	pfres
   6639  fb0d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6640  fb0d					      else
   6641  fb0d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6642  fb0f					      endif
   6643  fb0f		       4c 3e fb 	      jmp	pflabel2
   6644  fb12				   PF_data2
   6645  fb12		       7e bf		      .byte.b	%01111110, %10111111
   6646  fb14					      if	(pfwidth>2)
   6647  fb14		       ff 7d		      .byte.b	%11111111, %01111101
   6648  fb16					      endif
   6649  fb16		       60 b3		      .byte.b	%01100000, %10110011
   6650  fb18					      if	(pfwidth>2)
   6651  fb18		       99 0d		      .byte.b	%10011001, %00001101
   6652  fb1a					      endif
   6653  fb1a		       6e bf		      .byte.b	%01101110, %10111111
   6654  fb1c					      if	(pfwidth>2)
   6655  fb1c		       99 3d		      .byte.b	%10011001, %00111101
   6656  fb1e					      endif
   6657  fb1e		       66 b3		      .byte.b	%01100110, %10110011
   6658  fb20					      if	(pfwidth>2)
   6659  fb20		       99 0d		      .byte.b	%10011001, %00001101
   6660  fb22					      endif
   6661  fb22		       7e b3		      .byte.b	%01111110, %10110011
   6662  fb24					      if	(pfwidth>2)
   6663  fb24		       99 7d		      .byte.b	%10011001, %01111101
   6664  fb26					      endif
   6665  fb26		       00 00		      .byte.b	%00000000, %00000000
   6666  fb28					      if	(pfwidth>2)
   6667  fb28		       00 00		      .byte.b	%00000000, %00000000
   6668  fb2a					      endif
   6669  fb2a		       1f cd		      .byte.b	%00011111, %11001101
   6670  fb2c					      if	(pfwidth>2)
   6671  fb2c		       7d 1f		      .byte.b	%01111101, %00011111
   6672  fb2e					      endif
   6673  fb2e		       19 cd		      .byte.b	%00011001, %11001101
   6674  fb30					      if	(pfwidth>2)
   6675  fb30		       61 19		      .byte.b	%01100001, %00011001
   6676  fb32					      endif
   6677  fb32		       19 cd		      .byte.b	%00011001, %11001101
   6678  fb34					      if	(pfwidth>2)
   6679  fb34		       79 0f		      .byte.b	%01111001, %00001111
   6680  fb36					      endif
   6681  fb36		       19 cd		      .byte.b	%00011001, %11001101
   6682  fb38					      if	(pfwidth>2)
   6683  fb38		       61 19		      .byte.b	%01100001, %00011001
   6684  fb3a					      endif
   6685  fb3a		       1f 31		      .byte.b	%00011111, %00110001
   6686  fb3c					      if	(pfwidth>2)
   6687  fb3c		       7d 19		      .byte.b	%01111101, %00011001
   6688  fb3e					      endif
   6689  fb3e				   pflabel2
   6690  fb3e		       bd 12 fb 	      lda	PF_data2,x
   6691  fb41		       95 a4		      sta	playfield,x
   6692  fb43		       ca		      dex
   6693  fb44		       10 f8		      bpl	pflabel2
   6694  fb46				   .
   6695  fb46							; 
   6696  fb46
   6697  fb46				   .
   6698  fb46							; 
   6699  fb46
   6700  fb46				   .
   6701  fb46							; 
   6702  fb46
   6703  fb46				   .
   6704  fb46							; 
   6705  fb46
   6706  fb46				   .
   6707  fb46							; 
   6708  fb46
   6709  fb46				   .
   6710  fb46							; 
   6711  fb46
   6712  fb46				   .
   6713  fb46							; 
   6714  fb46
   6715  fb46				   .
   6716  fb46							; 
   6717  fb46
   6718  fb46				   .
   6719  fb46							; 
   6720  fb46
   6721  fb46				   .
   6722  fb46							; 
   6723  fb46
   6724  fb46				   .
   6725  fb46							; 
   6726  fb46
   6727  fb46				   .__Game_Over_Loop
   6728  fb46							; __Game_Over_Loop
   6729  fb46
   6730  fb46				   .
   6731  fb46							; 
   6732  fb46
   6733  fb46				   .
   6734  fb46							; 
   6735  fb46
   6736  fb46				   .
   6737  fb46							; 
   6738  fb46
   6739  fb46				   .
   6740  fb46							; 
   6741  fb46
   6742  fb46				   .
   6743  fb46							; 
   6744  fb46
   6745  fb46				   .
   6746  fb46							; 
   6747  fb46
   6748  fb46				   .
   6749  fb46							; 
   6750  fb46
   6751  fb46				   .
   6752  fb46							; 
   6753  fb46
   6754  fb46				   .
   6755  fb46							; 
   6756  fb46
   6757  fb46				   .
   6758  fb46							; 
   6759  fb46
   6760  fb46				   .
   6761  fb46							; 
   6762  fb46
   6763  fb46				   .
   6764  fb46							; 
   6765  fb46
   6766  fb46				   .
   6767  fb46							; 
   6768  fb46
   6769  fb46				   .
   6770  fb46							; 
   6771  fb46
   6772  fb46				   .
   6773  fb46							; 
   6774  fb46
   6775  fb46				   .
   6776  fb46							; 
   6777  fb46
   6778  fb46				   .
   6779  fb46							; 
   6780  fb46
   6781  fb46				   .
   6782  fb46							; 
   6783  fb46
   6784  fb46				   .
   6785  fb46							; 
   6786  fb46
   6787  fb46				   .L0212		;  _Master_Counter  =	_Master_Counter  +  1
   6788  fb46
   6789  fb46		       e6 d4		      INC	_Master_Counter
   6790  fb48				   .
   6791  fb48							; 
   6792  fb48
   6793  fb48				   .
   6794  fb48							; 
   6795  fb48
   6796  fb48				   .
   6797  fb48							; 
   6798  fb48
   6799  fb48				   .
   6800  fb48							; 
   6801  fb48
   6802  fb48				   .
   6803  fb48							; 
   6804  fb48
   6805  fb48				   .L0213		;  if _Master_Counter	<  120 then goto __Skip_20_Second_Counter
   6806  fb48
   6807  fb48		       a5 d4		      LDA	_Master_Counter
   6808  fb4a		       c9 78		      CMP	#120
   6809  fb4c		       b0 03		      BCS	.skipL0213
   6810  fb4e				   .condpart83
   6811  fb4e		       4c ac fb 	      jmp	.__Skip_20_Second_Counter
   6812  fb51
   6813  fb51				   .skipL0213
   6814  fb51				   .
   6815  fb51							; 
   6816  fb51
   6817  fb51				   .
   6818  fb51							; 
   6819  fb51
   6820  fb51				   .
   6821  fb51							; 
   6822  fb51
   6823  fb51				   .
   6824  fb51							; 
   6825  fb51
   6826  fb51				   .
   6827  fb51							; 
   6828  fb51
   6829  fb51				   .L0214		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   6830  fb51
   6831  fb51		       e6 d5		      INC	_Frame_Counter
   6832  fb53		       a9 00		      LDA	#0
   6833  fb55		       85 d4		      STA	_Master_Counter
   6834  fb57				   .
   6835  fb57							; 
   6836  fb57
   6837  fb57				   .
   6838  fb57							; 
   6839  fb57
   6840  fb57				   .
   6841  fb57							; 
   6842  fb57
   6843  fb57				   .
   6844  fb57							; 
   6845  fb57
   6846  fb57				   .
   6847  fb57							; 
   6848  fb57
   6849  fb57				   .
   6850  fb57							; 
   6851  fb57
   6852  fb57				   .
   6853  fb57							; 
   6854  fb57
   6855  fb57				   .
   6856  fb57							; 
   6857  fb57
   6858  fb57				   .L0215		;  if _Frame_Counter  >  9 then _Bit2_Game_Control{2}	=  0  :  _sc1 = _Score1_Mem  :	_sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem :  goto __Start_Restart
   6859  fb57
   6860  fb57		       a9 09		      LDA	#9
   6861  fb59		       c5 d5		      CMP	_Frame_Counter
   6862  fb5b		       b0 15		      BCS	.skipL0215
   6863  fb5d				   .condpart84
   6864  fb5d		       a5 ec		      LDA	_Bit2_Game_Control
   6865  fb5f		       29 fb		      AND	#251
   6866  fb61		       85 ec		      STA	_Bit2_Game_Control
   6867  fb63		       a5 e6		      LDA	_Score1_Mem
   6868  fb65		       85 93		      STA	_sc1
   6869  fb67		       a5 e7		      LDA	_Score2_Mem
   6870  fb69		       85 94		      STA	_sc2
   6871  fb6b		       a5 e8		      LDA	_Score3_Mem
   6872  fb6d		       85 95		      STA	_sc3
   6873  fb6f		       4c 66 f4 	      jmp	.__Start_Restart
   6874  fb72
   6875  fb72				   .skipL0215
   6876  fb72				   .
   6877  fb72							; 
   6878  fb72
   6879  fb72				   .
   6880  fb72							; 
   6881  fb72
   6882  fb72				   .
   6883  fb72							; 
   6884  fb72
   6885  fb72				   .
   6886  fb72							; 
   6887  fb72
   6888  fb72				   .L0216		;  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   6889  fb72
   6890  fb72		       a5 ec		      LDA	_Bit6_Swap_Scores
   6891  fb74		       29 40		      AND	#64
   6892  fb76		       08		      PHP
   6893  fb77		       a5 ec		      LDA	_Bit6_Swap_Scores
   6894  fb79		       29 bf		      AND	#191
   6895  fb7b		       28		      PLP
   6896  fb7c		       d0 02		      .byte.b	$D0, $02
   6897  fb7e		       09 40		      ORA	#64
   6898  fb80		       85 ec		      STA	_Bit6_Swap_Scores
   6899  fb82				   .
   6900  fb82							; 
   6901  fb82
   6902  fb82				   .
   6903  fb82							; 
   6904  fb82
   6905  fb82				   .
   6906  fb82							; 
   6907  fb82
   6908  fb82				   .
   6909  fb82							; 
   6910  fb82
   6911  fb82				   .L0217		;  if !_Bit6_Swap_Scores{6} then goto __GO_Current_Score
   6912  fb82
   6913  fb82		       24 ec		      BIT	_Bit6_Swap_Scores
   6914  fb84		       70 03		      BVS	.skipL0217
   6915  fb86				   .condpart85
   6916  fb86		       4c 9c fb 	      jmp	.__GO_Current_Score
   6917  fb89
   6918  fb89				   .skipL0217
   6919  fb89				   .
   6920  fb89							; 
   6921  fb89
   6922  fb89				   .
   6923  fb89							; 
   6924  fb89
   6925  fb89				   .
   6926  fb89							; 
   6927  fb89
   6928  fb89				   .
   6929  fb89							; 
   6930  fb89
   6931  fb89				   .L0218		;  scorecolor	=  $AE
   6932  fb89
   6933  fb89		       a9 ae		      LDA	#$AE
   6934  fb8b		       85 a3		      STA	scorecolor
   6935  fb8d				   .
   6936  fb8d							; 
   6937  fb8d
   6938  fb8d				   .L0219		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   6939  fb8d
   6940  fb8d		       a5 e9		      LDA	_High_Score1
   6941  fb8f		       85 93		      STA	_sc1
   6942  fb91		       a5 ea		      LDA	_High_Score2
   6943  fb93		       85 94		      STA	_sc2
   6944  fb95		       a5 eb		      LDA	_High_Score3
   6945  fb97		       85 95		      STA	_sc3
   6946  fb99				   .
   6947  fb99							; 
   6948  fb99
   6949  fb99				   .L0220		;  goto __Skip_20_Second_Counter
   6950  fb99
   6951  fb99		       4c ac fb 	      jmp	.__Skip_20_Second_Counter
   6952  fb9c
   6953  fb9c				   .
   6954  fb9c							; 
   6955  fb9c
   6956  fb9c				   .
   6957  fb9c							; 
   6958  fb9c
   6959  fb9c				   .
   6960  fb9c							; 
   6961  fb9c
   6962  fb9c				   .
   6963  fb9c							; 
   6964  fb9c
   6965  fb9c				   .__GO_Current_Score
   6966  fb9c							; __GO_Current_Score
   6967  fb9c
   6968  fb9c				   .
   6969  fb9c							; 
   6970  fb9c
   6971  fb9c				   .L0221		;  scorecolor	=  $1C
   6972  fb9c
   6973  fb9c		       a9 1c		      LDA	#$1C
   6974  fb9e		       85 a3		      STA	scorecolor
   6975  fba0				   .
   6976  fba0							; 
   6977  fba0
   6978  fba0				   .L0222		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   6979  fba0
   6980  fba0		       a5 e6		      LDA	_Score1_Mem
   6981  fba2		       85 93		      STA	_sc1
   6982  fba4		       a5 e7		      LDA	_Score2_Mem
   6983  fba6		       85 94		      STA	_sc2
   6984  fba8		       a5 e8		      LDA	_Score3_Mem
   6985  fbaa		       85 95		      STA	_sc3
   6986  fbac				   .
   6987  fbac							; 
   6988  fbac
   6989  fbac				   .__Skip_20_Second_Counter
   6990  fbac							; __Skip_20_Second_Counter
   6991  fbac
   6992  fbac				   .
   6993  fbac							; 
   6994  fbac
   6995  fbac				   .
   6996  fbac							; 
   6997  fbac
   6998  fbac				   .
   6999  fbac							; 
   7000  fbac
   7001  fbac				   .
   7002  fbac							; 
   7003  fbac
   7004  fbac				   .
   7005  fbac							; 
   7006  fbac
   7007  fbac				   .
   7008  fbac							; 
   7009  fbac
   7010  fbac				   .
   7011  fbac							; 
   7012  fbac
   7013  fbac				   .L0223		;  COLUBK  =  $44  :  COLUPF  =  $2C
   7014  fbac
   7015  fbac		       a9 44		      LDA	#$44
   7016  fbae		       85 09		      STA	COLUBK
   7017  fbb0		       a9 2c		      LDA	#$2C
   7018  fbb2		       85 08		      STA	COLUPF
   7019  fbb4				   .
   7020  fbb4							; 
   7021  fbb4
   7022  fbb4				   .
   7023  fbb4							; 
   7024  fbb4
   7025  fbb4				   .
   7026  fbb4							; 
   7027  fbb4
   7028  fbb4				   .
   7029  fbb4							; 
   7030  fbb4
   7031  fbb4				   .
   7032  fbb4							; 
   7033  fbb4
   7034  fbb4				   .
   7035  fbb4							; 
   7036  fbb4
   7037  fbb4				   .L0224		;  if _Frame_Counter  >  0 then COLUBK  =  $D2  :  COLUPF  =  $DA
   7038  fbb4
   7039  fbb4		       a9 00		      LDA	#0
   7040  fbb6		       c5 d5		      CMP	_Frame_Counter
   7041  fbb8		       b0 08		      BCS	.skipL0224
   7042  fbba				   .condpart86
   7043  fbba		       a9 d2		      LDA	#$D2
   7044  fbbc		       85 09		      STA	COLUBK
   7045  fbbe		       a9 da		      LDA	#$DA
   7046  fbc0		       85 08		      STA	COLUPF
   7047  fbc2				   .skipL0224
   7048  fbc2				   .
   7049  fbc2							; 
   7050  fbc2
   7051  fbc2				   .
   7052  fbc2							; 
   7053  fbc2
   7054  fbc2				   .
   7055  fbc2							; 
   7056  fbc2
   7057  fbc2				   .
   7058  fbc2							; 
   7059  fbc2
   7060  fbc2				   .
   7061  fbc2							; 
   7062  fbc2
   7063  fbc2				   .
   7064  fbc2							; 
   7065  fbc2
   7066  fbc2				   .
   7067  fbc2							; 
   7068  fbc2
   7069  fbc2				   .L0225		;  drawscreen
   7070  fbc2
   7071  fbc2		       20 c6 f3 	      jsr	drawscreen
   7072  fbc5				   .
   7073  fbc5							; 
   7074  fbc5
   7075  fbc5				   .
   7076  fbc5							; 
   7077  fbc5
   7078  fbc5				   .
   7079  fbc5							; 
   7080  fbc5
   7081  fbc5				   .
   7082  fbc5							; 
   7083  fbc5
   7084  fbc5				   .
   7085  fbc5							; 
   7086  fbc5
   7087  fbc5				   .
   7088  fbc5							; 
   7089  fbc5
   7090  fbc5				   .
   7091  fbc5							; 
   7092  fbc5
   7093  fbc5				   .
   7094  fbc5							; 
   7095  fbc5
   7096  fbc5				   .
   7097  fbc5							; 
   7098  fbc5
   7099  fbc5				   .
   7100  fbc5							; 
   7101  fbc5
   7102  fbc5				   .
   7103  fbc5							; 
   7104  fbc5
   7105  fbc5				   .
   7106  fbc5							; 
   7107  fbc5
   7108  fbc5				   .
   7109  fbc5							; 
   7110  fbc5
   7111  fbc5				   .
   7112  fbc5							; 
   7113  fbc5
   7114  fbc5				   .L0226		;  if _Frame_Counter  =  0 then goto __Game_Over_Loop
   7115  fbc5
   7116  fbc5		       a5 d5		      LDA	_Frame_Counter
   7117  fbc7		       c9 00		      CMP	#0
   7118  fbc9		       d0 03		      BNE	.skipL0226
   7119  fbcb				   .condpart87
   7120  fbcb		       4c 46 fb 	      jmp	.__Game_Over_Loop
   7121  fbce
   7122  fbce				   .skipL0226
   7123  fbce				   .
   7124  fbce							; 
   7125  fbce
   7126  fbce				   .
   7127  fbce							; 
   7128  fbce
   7129  fbce				   .
   7130  fbce							; 
   7131  fbce
   7132  fbce				   .
   7133  fbce							; 
   7134  fbce
   7135  fbce				   .
   7136  fbce							; 
   7137  fbce
   7138  fbce				   .L0227		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Game_Over_Loop
   7139  fbce
   7140  fbce		       a9 01		      lda	#1
   7141  fbd0		       2c 82 02 	      bit	SWCHB
   7142  fbd3		       f0 0d		      BEQ	.skipL0227
   7143  fbd5				   .condpart88
   7144  fbd5		       24 0c		      bit	INPT4
   7145  fbd7		       10 09		      BPL	.skip88then
   7146  fbd9				   .condpart89
   7147  fbd9		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7148  fbdb		       29 fe		      AND	#254
   7149  fbdd		       85 ec		      STA	_Bit0_Reset_Restrainer
   7150  fbdf		       4c 46 fb 	      jmp	.__Game_Over_Loop
   7151  fbe2
   7152  fbe2				   .skip88then
   7153  fbe2				   .skipL0227
   7154  fbe2				   .
   7155  fbe2							; 
   7156  fbe2
   7157  fbe2				   .
   7158  fbe2							; 
   7159  fbe2
   7160  fbe2				   .
   7161  fbe2							; 
   7162  fbe2
   7163  fbe2				   .
   7164  fbe2							; 
   7165  fbe2
   7166  fbe2				   .
   7167  fbe2							; 
   7168  fbe2
   7169  fbe2				   .L0228		;  if _Bit0_Reset_Restrainer{0} then goto __Game_Over_Loop
   7170  fbe2
   7171  fbe2		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7172  fbe4		       4a		      LSR
   7173  fbe5		       90 03		      BCC	.skipL0228
   7174  fbe7				   .condpart90
   7175  fbe7		       4c 46 fb 	      jmp	.__Game_Over_Loop
   7176  fbea
   7177  fbea				   .skipL0228
   7178  fbea				   .
   7179  fbea							; 
   7180  fbea
   7181  fbea				   .
   7182  fbea							; 
   7183  fbea
   7184  fbea				   .
   7185  fbea							; 
   7186  fbea
   7187  fbea				   .
   7188  fbea							; 
   7189  fbea
   7190  fbea				   .L0229		;  goto __Start_Restart
   7191  fbea
   7192  fbea		       4c 66 f4 	      jmp	.__Start_Restart
   7193  fbed
   7194  fbed				   .
   7195  fbed							; 
   7196  fbed
   7197  fbed				   .
   7198  fbed							; 
   7199  fbed
   7200  fbed				   .
   7201  fbed							; 
   7202  fbed
   7203  fbed				   .
   7204  fbed							; 
   7205  fbed
   7206  fbed				   .
   7207  fbed							; 
   7208  fbed
   7209  fbed				   .
   7210  fbed							; 
   7211  fbed
   7212  fbed				   .
   7213  fbed							; 
   7214  fbed
   7215  fbed				   .
   7216  fbed							; 
   7217  fbed
   7218  fbed				   .
   7219  fbed							; 
   7220  fbed
   7221  fbed				   .
   7222  fbed							; 
   7223  fbed
   7224  fbed				   .
   7225  fbed							; 
   7226  fbed
   7227  fbed				   .
   7228  fbed							; 
   7229  fbed
   7230  fbed				   .
   7231  fbed							; 
   7232  fbed
   7233  fbed				   .
   7234  fbed							; 
   7235  fbed
   7236  fbed				   .
   7237  fbed							; 
   7238  fbed
   7239  fbed				   .
   7240  fbed							; 
   7241  fbed
   7242  fbed				   .
   7243  fbed							; 
   7244  fbed
   7245  fbed				   .
   7246  fbed							; 
   7247  fbed
   7248  fbed				   .
   7249  fbed							; 
   7250  fbed
   7251  fbed				   .
   7252  fbed							; 
   7253  fbed
   7254  fbed				   .
   7255  fbed							; 
   7256  fbed
   7257  fbed				   .
   7258  fbed							; 
   7259  fbed
   7260  fbed				   .__Pause_Setup
   7261  fbed							; __Pause_Setup
   7262  fbed
   7263  fbed				   .
   7264  fbed							; 
   7265  fbed
   7266  fbed				   .
   7267  fbed							; 
   7268  fbed
   7269  fbed				   .
   7270  fbed							; 
   7271  fbed
   7272  fbed				   .
   7273  fbed							; 
   7274  fbed
   7275  fbed				   .
   7276  fbed							; 
   7277  fbed
   7278  fbed				   .
   7279  fbed							; 
   7280  fbed
   7281  fbed				   .L0230		;  AUDV0  =  0  :  AUDV1  =  0
   7282  fbed
   7283  fbed		       a9 00		      LDA	#0
   7284  fbef		       85 19		      STA	AUDV0
   7285  fbf1		       85 1a		      STA	AUDV1
   7286  fbf3				   .
   7287  fbf3							; 
   7288  fbf3
   7289  fbf3				   .
   7290  fbf3							; 
   7291  fbf3
   7292  fbf3				   .
   7293  fbf3							; 
   7294  fbf3
   7295  fbf3				   .
   7296  fbf3							; 
   7297  fbf3
   7298  fbf3				   .
   7299  fbf3							; 
   7300  fbf3
   7301  fbf3				   .
   7302  fbf3							; 
   7303  fbf3
   7304  fbf3				   .L0231		;  _Bit1_FireB_Restrainer{1}  =  1
   7305  fbf3
   7306  fbf3		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7307  fbf5		       09 02		      ORA	#2
   7308  fbf7		       85 ec		      STA	_Bit1_FireB_Restrainer
   7309  fbf9				   .
   7310  fbf9							; 
   7311  fbf9
   7312  fbf9				   .
   7313  fbf9							; 
   7314  fbf9
   7315  fbf9				   .
   7316  fbf9							; 
   7317  fbf9
   7318  fbf9				   .
   7319  fbf9							; 
   7320  fbf9
   7321  fbf9				   .
   7322  fbf9							; 
   7323  fbf9
   7324  fbf9				   .
   7325  fbf9							; 
   7326  fbf9
   7327  fbf9				   .L0232		;  _Pause_Counter_Tmp	=  0
   7328  fbf9
   7329  fbf9		       a9 00		      LDA	#0
   7330  fbfb		       85 db		      STA	_Pause_Counter_Tmp
   7331  fbfd				   .
   7332  fbfd							; 
   7333  fbfd
   7334  fbfd				   .
   7335  fbfd							; 
   7336  fbfd
   7337  fbfd				   .
   7338  fbfd							; 
   7339  fbfd
   7340  fbfd				   .
   7341  fbfd							; 
   7342  fbfd
   7343  fbfd				   .
   7344  fbfd							; 
   7345  fbfd
   7346  fbfd				   .
   7347  fbfd							; 
   7348  fbfd
   7349  fbfd				   .L0233		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   7350  fbfd
   7351  fbfd							; complex statement detected
   7352  fbfd		       20 b8 f3 	      jsr	randomize
   7353  fc00		       29 07		      AND	#7
   7354  fc02		       85 dd		      STA	_Pause_Color_Tmp
   7355  fc04				   .
   7356  fc04							; 
   7357  fc04
   7358  fc04				   .L0234		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   7359  fc04
   7360  fc04		       a5 dd		      LDA	_Pause_Color_Tmp
   7361  fc06		       85 dc		      STA	_Pause_Mem_Color_Tmp
   7362  fc08				   .
   7363  fc08							; 
   7364  fc08
   7365  fc08				   .
   7366  fc08							; 
   7367  fc08
   7368  fc08				   .
   7369  fc08							; 
   7370  fc08
   7371  fc08				   .
   7372  fc08							; 
   7373  fc08
   7374  fc08				   .
   7375  fc08							; 
   7376  fc08
   7377  fc08				   .
   7378  fc08							; 
   7379  fc08
   7380  fc08				   .
   7381  fc08							; 
   7382  fc08
   7383  fc08				   .
   7384  fc08							; 
   7385  fc08
   7386  fc08				   .
   7387  fc08							; 
   7388  fc08
   7389  fc08				   .
   7390  fc08							; 
   7391  fc08
   7392  fc08				   .__Pause_Game
   7393  fc08							; __Pause_Game
   7394  fc08
   7395  fc08				   .
   7396  fc08							; 
   7397  fc08
   7398  fc08				   .
   7399  fc08							; 
   7400  fc08
   7401  fc08				   .
   7402  fc08							; 
   7403  fc08
   7404  fc08				   .
   7405  fc08							; 
   7406  fc08
   7407  fc08				   .
   7408  fc08							; 
   7409  fc08
   7410  fc08				   .
   7411  fc08							; 
   7412  fc08
   7413  fc08				   .
   7414  fc08							; 
   7415  fc08
   7416  fc08				   .L0235		;  NUSIZ0  =  $10
   7417  fc08
   7418  fc08		       a9 10		      LDA	#$10
   7419  fc0a		       85 04		      STA	NUSIZ0
   7420  fc0c				   .
   7421  fc0c							; 
   7422  fc0c
   7423  fc0c				   .
   7424  fc0c							; 
   7425  fc0c
   7426  fc0c				   .
   7427  fc0c							; 
   7428  fc0c
   7429  fc0c				   .
   7430  fc0c							; 
   7431  fc0c
   7432  fc0c				   .
   7433  fc0c							; 
   7434  fc0c
   7435  fc0c				   .
   7436  fc0c							; 
   7437  fc0c
   7438  fc0c				   .
   7439  fc0c							; 
   7440  fc0c
   7441  fc0c				   .L0236		;  NUSIZ1  =  $05
   7442  fc0c
   7443  fc0c		       a9 05		      LDA	#$05
   7444  fc0e		       85 05		      STA	NUSIZ1
   7445  fc10				   .
   7446  fc10							; 
   7447  fc10
   7448  fc10				   .
   7449  fc10							; 
   7450  fc10
   7451  fc10				   .
   7452  fc10							; 
   7453  fc10
   7454  fc10				   .
   7455  fc10							; 
   7456  fc10
   7457  fc10				   .
   7458  fc10							; 
   7459  fc10
   7460  fc10				   .
   7461  fc10							; 
   7462  fc10
   7463  fc10				   .
   7464  fc10							; 
   7465  fc10
   7466  fc10				   .
   7467  fc10							; 
   7468  fc10
   7469  fc10				   .
   7470  fc10							; 
   7471  fc10
   7472  fc10				   .
   7473  fc10							; 
   7474  fc10
   7475  fc10				   .L0237		;  _Pause_Counter_Tmp	=  _Pause_Counter_Tmp  +  1
   7476  fc10
   7477  fc10		       e6 db		      INC	_Pause_Counter_Tmp
   7478  fc12				   .
   7479  fc12							; 
   7480  fc12
   7481  fc12				   .
   7482  fc12							; 
   7483  fc12
   7484  fc12				   .
   7485  fc12							; 
   7486  fc12
   7487  fc12				   .
   7488  fc12							; 
   7489  fc12
   7490  fc12				   .L0238		;  if _Pause_Counter_Tmp  <  240 then goto __Skip_Pause_Counter
   7491  fc12
   7492  fc12		       a5 db		      LDA	_Pause_Counter_Tmp
   7493  fc14		       c9 f0		      CMP	#240
   7494  fc16		       b0 03		      BCS	.skipL0238
   7495  fc18				   .condpart91
   7496  fc18		       4c 67 fc 	      jmp	.__Skip_Pause_Counter
   7497  fc1b
   7498  fc1b				   .skipL0238
   7499  fc1b				   .
   7500  fc1b							; 
   7501  fc1b
   7502  fc1b				   .
   7503  fc1b							; 
   7504  fc1b
   7505  fc1b				   .
   7506  fc1b							; 
   7507  fc1b
   7508  fc1b				   .
   7509  fc1b							; 
   7510  fc1b
   7511  fc1b				   .L0239		;  _Pause_Counter_Tmp	=  0
   7512  fc1b
   7513  fc1b		       a9 00		      LDA	#0
   7514  fc1d		       85 db		      STA	_Pause_Counter_Tmp
   7515  fc1f				   .
   7516  fc1f							; 
   7517  fc1f
   7518  fc1f				   .
   7519  fc1f							; 
   7520  fc1f
   7521  fc1f				   .
   7522  fc1f							; 
   7523  fc1f
   7524  fc1f				   .
   7525  fc1f							; 
   7526  fc1f
   7527  fc1f				   .L0240		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   7528  fc1f
   7529  fc1f							; complex statement detected
   7530  fc1f		       20 b8 f3 	      jsr	randomize
   7531  fc22		       29 07		      AND	#7
   7532  fc24		       85 dd		      STA	_Pause_Color_Tmp
   7533  fc26				   .
   7534  fc26							; 
   7535  fc26
   7536  fc26				   .
   7537  fc26							; 
   7538  fc26
   7539  fc26				   .
   7540  fc26							; 
   7541  fc26
   7542  fc26				   .
   7543  fc26							; 
   7544  fc26
   7545  fc26				   .
   7546  fc26							; 
   7547  fc26
   7548  fc26				   .L0241		;  if _Pause_Color_Tmp  =  _Pause_Mem_Color_Tmp then _Pause_Color_Tmp	=  _Pause_Color_Tmp  +	 ( rand & 3 )	+  1  :  if _Pause_Color_Tmp  >  7 then _Pause_Color_Tmp  =  _Pause_Color_Tmp  -  8
   7549  fc26
   7550  fc26		       a5 dd		      LDA	_Pause_Color_Tmp
   7551  fc28		       c5 dc		      CMP	_Pause_Mem_Color_Tmp
   7552  fc2a		       d0 20		      BNE	.skipL0241
   7553  fc2c				   .condpart92
   7554  fc2c							; complex statement detected
   7555  fc2c		       a5 dd		      LDA	_Pause_Color_Tmp
   7556  fc2e		       48		      PHA
   7557  fc2f		       20 b8 f3 	      jsr	randomize
   7558  fc32		       29 03		      AND	#3
   7559  fc34		       ba		      TSX
   7560  fc35		       e8		      INX
   7561  fc36		       9a		      TXS
   7562  fc37		       18		      CLC
   7563  fc38		       75 00		      ADC	$00,x
   7564  fc3a		       18		      CLC
   7565  fc3b		       69 01		      ADC	#1
   7566  fc3d		       85 dd		      STA	_Pause_Color_Tmp
   7567  fc3f		       a9 07		      LDA	#7
   7568  fc41		       c5 dd		      CMP	_Pause_Color_Tmp
   7569  fc43		       b0 07		      BCS	.skip92then
   7570  fc45				   .condpart93
   7571  fc45		       a5 dd		      LDA	_Pause_Color_Tmp
   7572  fc47		       38		      SEC
   7573  fc48		       e9 08		      SBC	#8
   7574  fc4a		       85 dd		      STA	_Pause_Color_Tmp
   7575  fc4c				   .skip92then
   7576  fc4c				   .skipL0241
   7577  fc4c				   .
   7578  fc4c							; 
   7579  fc4c
   7580  fc4c				   .
   7581  fc4c							; 
   7582  fc4c
   7583  fc4c				   .
   7584  fc4c							; 
   7585  fc4c
   7586  fc4c				   .
   7587  fc4c							; 
   7588  fc4c
   7589  fc4c				   .L0242		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   7590  fc4c
   7591  fc4c		       a5 dd		      LDA	_Pause_Color_Tmp
   7592  fc4e		       85 dc		      STA	_Pause_Mem_Color_Tmp
   7593  fc50				   .
   7594  fc50							; 
   7595  fc50
   7596  fc50				   .
   7597  fc50							; 
   7598  fc50
   7599  fc50				   .
   7600  fc50							; 
   7601  fc50
   7602  fc50				   .
   7603  fc50							; 
   7604  fc50
   7605  fc50				   .L0243		;  _Bit2_Pause_Clr_Scheme{2}  =  0
   7606  fc50
   7607  fc50		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7608  fc52		       29 fb		      AND	#251
   7609  fc54		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7610  fc56				   .
   7611  fc56							; 
   7612  fc56
   7613  fc56				   .L0244		;  temp5  =  rand  :  if temp5  <  128 then _Bit2_Pause_Clr_Scheme{2}	=  1
   7614  fc56
   7615  fc56		       20 b8 f3 	      jsr	randomize
   7616  fc59		       85 a0		      STA	temp5
   7617  fc5b		       a5 a0		      LDA	temp5
   7618  fc5d		       c9 80		      CMP	#128
   7619  fc5f		       b0 06		      BCS	.skipL0244
   7620  fc61				   .condpart94
   7621  fc61		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7622  fc63		       09 04		      ORA	#4
   7623  fc65		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7624  fc67				   .skipL0244
   7625  fc67				   .
   7626  fc67							; 
   7627  fc67
   7628  fc67				   .__Skip_Pause_Counter
   7629  fc67							; __Skip_Pause_Counter
   7630  fc67
   7631  fc67				   .
   7632  fc67							; 
   7633  fc67
   7634  fc67				   .
   7635  fc67							; 
   7636  fc67
   7637  fc67				   .
   7638  fc67							; 
   7639  fc67
   7640  fc67				   .
   7641  fc67							; 
   7642  fc67
   7643  fc67				   .
   7644  fc67							; 
   7645  fc67
   7646  fc67				   .
   7647  fc67							; 
   7648  fc67
   7649  fc67				   .
   7650  fc67							; 
   7651  fc67
   7652  fc67				   .L0245		;  on _Pause_Color_Tmp goto __Ps0 __Ps1 __Ps2 __Ps3 __Ps4 __Ps5 __Ps6 __Ps7
   7653  fc67
   7654  fc67		       a6 dd		      LDX	_Pause_Color_Tmp
   7655  fc69		       bd 72 fc 	      LDA	.L0245jumptablehi,x
   7656  fc6c		       48		      PHA
   7657  fc6d		       bd 7a fc 	      LDA	.L0245jumptablelo,x
   7658  fc70		       48		      PHA
   7659  fc71		       60		      RTS
   7660  fc72				   .L0245jumptablehi
   7661  fc72		       fc		      .byte.b	>(.__Ps0-1)
   7662  fc73		       fc		      .byte.b	>(.__Ps1-1)
   7663  fc74		       fd		      .byte.b	>(.__Ps2-1)
   7664  fc75		       fd		      .byte.b	>(.__Ps3-1)
   7665  fc76		       fd		      .byte.b	>(.__Ps4-1)
   7666  fc77		       fd		      .byte.b	>(.__Ps5-1)
   7667  fc78		       fd		      .byte.b	>(.__Ps6-1)
   7668  fc79		       fe		      .byte.b	>(.__Ps7-1)
   7669  fc7a				   .L0245jumptablelo
   7670  fc7a		       be		      .byte.b	<(.__Ps0-1)
   7671  fc7b		       ed		      .byte.b	<(.__Ps1-1)
   7672  fc7c		       1c		      .byte.b	<(.__Ps2-1)
   7673  fc7d		       4b		      .byte.b	<(.__Ps3-1)
   7674  fc7e		       7a		      .byte.b	<(.__Ps4-1)
   7675  fc7f		       a9		      .byte.b	<(.__Ps5-1)
   7676  fc80		       d8		      .byte.b	<(.__Ps6-1)
   7677  fc81		       07		      .byte.b	<(.__Ps7-1)
   7678  fc82				   .
   7679  fc82							; 
   7680  fc82
   7681  fc82				   .__Got_Pause_Colors
   7682  fc82							; __Got_Pause_Colors
   7683  fc82
   7684  fc82				   .
   7685  fc82							; 
   7686  fc82
   7687  fc82				   .
   7688  fc82							; 
   7689  fc82
   7690  fc82				   .
   7691  fc82							; 
   7692  fc82
   7693  fc82				   .
   7694  fc82							; 
   7695  fc82
   7696  fc82				   .
   7697  fc82							; 
   7698  fc82
   7699  fc82				   .
   7700  fc82							; 
   7701  fc82
   7702  fc82				   .
   7703  fc82							; 
   7704  fc82
   7705  fc82				   .L0246		;  drawscreen
   7706  fc82
   7707  fc82		       20 c6 f3 	      jsr	drawscreen
   7708  fc85				   .
   7709  fc85							; 
   7710  fc85
   7711  fc85				   .
   7712  fc85							; 
   7713  fc85
   7714  fc85				   .
   7715  fc85							; 
   7716  fc85
   7717  fc85				   .
   7718  fc85							; 
   7719  fc85
   7720  fc85				   .
   7721  fc85							; 
   7722  fc85
   7723  fc85				   .
   7724  fc85							; 
   7725  fc85
   7726  fc85				   .
   7727  fc85							; 
   7728  fc85
   7729  fc85				   .
   7730  fc85							; 
   7731  fc85
   7732  fc85				   .
   7733  fc85							; 
   7734  fc85
   7735  fc85				   .
   7736  fc85							; 
   7737  fc85
   7738  fc85				   .
   7739  fc85							; 
   7740  fc85
   7741  fc85				   .L0247		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Pause_Game
   7742  fc85
   7743  fc85		       24 0c		      bit	INPT4
   7744  fc87		       10 09		      BPL	.skipL0247
   7745  fc89				   .condpart95
   7746  fc89		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7747  fc8b		       29 fd		      AND	#253
   7748  fc8d		       85 ec		      STA	_Bit1_FireB_Restrainer
   7749  fc8f		       4c 08 fc 	      jmp	.__Pause_Game
   7750  fc92
   7751  fc92				   .skipL0247
   7752  fc92				   .
   7753  fc92							; 
   7754  fc92
   7755  fc92				   .
   7756  fc92							; 
   7757  fc92
   7758  fc92				   .
   7759  fc92							; 
   7760  fc92
   7761  fc92				   .
   7762  fc92							; 
   7763  fc92
   7764  fc92				   .
   7765  fc92							; 
   7766  fc92
   7767  fc92				   .L0248		;  if _Bit1_FireB_Restrainer{1} then goto __Pause_Game
   7768  fc92
   7769  fc92		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7770  fc94		       29 02		      AND	#2
   7771  fc96		       f0 03		      BEQ	.skipL0248
   7772  fc98				   .condpart96
   7773  fc98		       4c 08 fc 	      jmp	.__Pause_Game
   7774  fc9b
   7775  fc9b				   .skipL0248
   7776  fc9b				   .
   7777  fc9b							; 
   7778  fc9b
   7779  fc9b				   .
   7780  fc9b							; 
   7781  fc9b
   7782  fc9b				   .
   7783  fc9b							; 
   7784  fc9b
   7785  fc9b				   .
   7786  fc9b							; 
   7787  fc9b
   7788  fc9b				   .L0249		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   7789  fc9b
   7790  fc9b		       a5 e5		      LDA	_Bit0_BW_Mem
   7791  fc9d		       29 fe		      AND	#254
   7792  fc9f		       85 e5		      STA	_Bit0_BW_Mem
   7793  fca1		       a9 08		      lda	#8
   7794  fca3		       2c 82 02 	      bit	SWCHB
   7795  fca6		       d0 06		      BNE	.skipL0249
   7796  fca8				   .condpart97
   7797  fca8		       a5 e5		      LDA	_Bit0_BW_Mem
   7798  fcaa		       09 01		      ORA	#1
   7799  fcac		       85 e5		      STA	_Bit0_BW_Mem
   7800  fcae				   .skipL0249
   7801  fcae				   .
   7802  fcae							; 
   7803  fcae
   7804  fcae				   .
   7805  fcae							; 
   7806  fcae
   7807  fcae				   .
   7808  fcae							; 
   7809  fcae
   7810  fcae				   .
   7811  fcae							; 
   7812  fcae
   7813  fcae				   .
   7814  fcae							; 
   7815  fcae
   7816  fcae				   .
   7817  fcae							; 
   7818  fcae
   7819  fcae				   .
   7820  fcae							; 
   7821  fcae
   7822  fcae				   .
   7823  fcae							; 
   7824  fcae
   7825  fcae				   .
   7826  fcae							; 
   7827  fcae
   7828  fcae				   .
   7829  fcae							; 
   7830  fcae
   7831  fcae				   .
   7832  fcae							; 
   7833  fcae
   7834  fcae				   .
   7835  fcae							; 
   7836  fcae
   7837  fcae				   .
   7838  fcae							; 
   7839  fcae
   7840  fcae				   .
   7841  fcae							; 
   7842  fcae
   7843  fcae				   .
   7844  fcae							; 
   7845  fcae
   7846  fcae				   .
   7847  fcae							; 
   7848  fcae
   7849  fcae				   .
   7850  fcae							; 
   7851  fcae
   7852  fcae				   .
   7853  fcae							; 
   7854  fcae
   7855  fcae				   .
   7856  fcae							; 
   7857  fcae
   7858  fcae				   .
   7859  fcae							; 
   7860  fcae
   7861  fcae				   .
   7862  fcae							; 
   7863  fcae
   7864  fcae				   .
   7865  fcae							; 
   7866  fcae
   7867  fcae				   .
   7868  fcae							; 
   7869  fcae
   7870  fcae				   .
   7871  fcae							; 
   7872  fcae
   7873  fcae				   .__Restore_Game_from_Pause
   7874  fcae							; __Restore_Game_from_Pause
   7875  fcae
   7876  fcae				   .
   7877  fcae							; 
   7878  fcae
   7879  fcae				   .
   7880  fcae							; 
   7881  fcae
   7882  fcae				   .
   7883  fcae							; 
   7884  fcae
   7885  fcae				   .
   7886  fcae							; 
   7887  fcae
   7888  fcae				   .
   7889  fcae							; 
   7890  fcae
   7891  fcae				   .
   7892  fcae							; 
   7893  fcae
   7894  fcae				   .L0250		;  _Bit1_FireB_Restrainer{1}  =  1
   7895  fcae
   7896  fcae		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7897  fcb0		       09 02		      ORA	#2
   7898  fcb2		       85 ec		      STA	_Bit1_FireB_Restrainer
   7899  fcb4				   .
   7900  fcb4							; 
   7901  fcb4
   7902  fcb4				   .
   7903  fcb4							; 
   7904  fcb4
   7905  fcb4				   .
   7906  fcb4							; 
   7907  fcb4
   7908  fcb4				   .
   7909  fcb4							; 
   7910  fcb4
   7911  fcb4				   .
   7912  fcb4							; 
   7913  fcb4
   7914  fcb4				   .
   7915  fcb4							; 
   7916  fcb4
   7917  fcb4				   .L0251		;  scorecolor	=  $1C	:  pfscorecolor  =  $D2
   7918  fcb4
   7919  fcb4		       a9 1c		      LDA	#$1C
   7920  fcb6		       85 a3		      STA	scorecolor
   7921  fcb8		       a9 d2		      LDA	#$D2
   7922  fcba		       85 f4		      STA	pfscorecolor
   7923  fcbc				   .
   7924  fcbc							; 
   7925  fcbc
   7926  fcbc				   .
   7927  fcbc							; 
   7928  fcbc
   7929  fcbc				   .L0252		;  goto __Main_Loop
   7930  fcbc
   7931  fcbc		       4c 13 f6 	      jmp	.__Main_Loop
   7932  fcbf
   7933  fcbf				   .
   7934  fcbf							; 
   7935  fcbf
   7936  fcbf				   .
   7937  fcbf							; 
   7938  fcbf
   7939  fcbf				   .
   7940  fcbf							; 
   7941  fcbf
   7942  fcbf				   .
   7943  fcbf							; 
   7944  fcbf
   7945  fcbf				   .
   7946  fcbf							; 
   7947  fcbf
   7948  fcbf				   .
   7949  fcbf							; 
   7950  fcbf
   7951  fcbf				   .
   7952  fcbf							; 
   7953  fcbf
   7954  fcbf				   .
   7955  fcbf							; 
   7956  fcbf
   7957  fcbf				   .
   7958  fcbf							; 
   7959  fcbf
   7960  fcbf				   .__Ps0
   7961  fcbf							; __Ps0
   7962  fcbf
   7963  fcbf				   .
   7964  fcbf							; 
   7965  fcbf
   7966  fcbf				   .L0253		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps0B
   7967  fcbf
   7968  fcbf		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7969  fcc1		       29 04		      AND	#4
   7970  fcc3		       f0 03		      BEQ	.skipL0253
   7971  fcc5				   .condpart98
   7972  fcc5		       4c db fc 	      jmp	.__Ps0B
   7973  fcc8
   7974  fcc8				   .skipL0253
   7975  fcc8				   .
   7976  fcc8							; 
   7977  fcc8
   7978  fcc8				   .L0254		;  COLUPF  =  $0C  :  COLUP0  =  $0C  :  COLUP1  =  $0C  :  pfscorecolor  =  $0C  :  scorecolor  =  $0C
   7979  fcc8
   7980  fcc8		       a9 0c		      LDA	#$0C
   7981  fcca		       85 08		      STA	COLUPF
   7982  fccc		       85 06		      STA	COLUP0
   7983  fcce		       85 07		      STA	COLUP1
   7984  fcd0		       85 f4		      STA	pfscorecolor
   7985  fcd2		       85 a3		      STA	scorecolor
   7986  fcd4				   .
   7987  fcd4							; 
   7988  fcd4
   7989  fcd4				   .L0255		;  COLUBK  =  $0A
   7990  fcd4
   7991  fcd4		       a9 0a		      LDA	#$0A
   7992  fcd6		       85 09		      STA	COLUBK
   7993  fcd8				   .
   7994  fcd8							; 
   7995  fcd8
   7996  fcd8				   .L0256		;  goto __Got_Pause_Colors
   7997  fcd8
   7998  fcd8		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   7999  fcdb
   8000  fcdb				   .
   8001  fcdb							; 
   8002  fcdb
   8003  fcdb				   .
   8004  fcdb							; 
   8005  fcdb
   8006  fcdb				   .
   8007  fcdb							; 
   8008  fcdb
   8009  fcdb				   .
   8010  fcdb							; 
   8011  fcdb
   8012  fcdb				   .
   8013  fcdb							; 
   8014  fcdb
   8015  fcdb				   .
   8016  fcdb							; 
   8017  fcdb
   8018  fcdb				   .
   8019  fcdb							; 
   8020  fcdb
   8021  fcdb				   .__Ps0B
   8022  fcdb							; __Ps0B
   8023  fcdb
   8024  fcdb				   .
   8025  fcdb							; 
   8026  fcdb
   8027  fcdb				   .L0257		;  COLUPF  =  $0A  :  COLUP0  =  $0A  :  COLUP1  =  $0A  :  pfscorecolor  =  $0A  :  scorecolor  =  $0A
   8028  fcdb
   8029  fcdb		       a9 0a		      LDA	#$0A
   8030  fcdd		       85 08		      STA	COLUPF
   8031  fcdf		       85 06		      STA	COLUP0
   8032  fce1		       85 07		      STA	COLUP1
   8033  fce3		       85 f4		      STA	pfscorecolor
   8034  fce5		       85 a3		      STA	scorecolor
   8035  fce7				   .
   8036  fce7							; 
   8037  fce7
   8038  fce7				   .L0258		;  COLUBK  =  $0C
   8039  fce7
   8040  fce7		       a9 0c		      LDA	#$0C
   8041  fce9		       85 09		      STA	COLUBK
   8042  fceb				   .
   8043  fceb							; 
   8044  fceb
   8045  fceb				   .L0259		;  goto __Got_Pause_Colors
   8046  fceb
   8047  fceb		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8048  fcee
   8049  fcee				   .
   8050  fcee							; 
   8051  fcee
   8052  fcee				   .
   8053  fcee							; 
   8054  fcee
   8055  fcee				   .
   8056  fcee							; 
   8057  fcee
   8058  fcee				   .
   8059  fcee							; 
   8060  fcee
   8061  fcee				   .
   8062  fcee							; 
   8063  fcee
   8064  fcee				   .
   8065  fcee							; 
   8066  fcee
   8067  fcee				   .
   8068  fcee							; 
   8069  fcee
   8070  fcee				   .__Ps1
   8071  fcee							; __Ps1
   8072  fcee
   8073  fcee				   .
   8074  fcee							; 
   8075  fcee
   8076  fcee				   .L0260		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps1B
   8077  fcee
   8078  fcee		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8079  fcf0		       29 04		      AND	#4
   8080  fcf2		       f0 03		      BEQ	.skipL0260
   8081  fcf4				   .condpart99
   8082  fcf4		       4c 0a fd 	      jmp	.__Ps1B
   8083  fcf7
   8084  fcf7				   .skipL0260
   8085  fcf7				   .
   8086  fcf7							; 
   8087  fcf7
   8088  fcf7				   .L0261		;  COLUPF  =  $3C  :  COLUP0  =  $3C  :  COLUP1  =  $3C  :  pfscorecolor  =  $3C  :  scorecolor  =  $3C
   8089  fcf7
   8090  fcf7		       a9 3c		      LDA	#$3C
   8091  fcf9		       85 08		      STA	COLUPF
   8092  fcfb		       85 06		      STA	COLUP0
   8093  fcfd		       85 07		      STA	COLUP1
   8094  fcff		       85 f4		      STA	pfscorecolor
   8095  fd01		       85 a3		      STA	scorecolor
   8096  fd03				   .
   8097  fd03							; 
   8098  fd03
   8099  fd03				   .L0262		;  COLUBK  =  $3A
   8100  fd03
   8101  fd03		       a9 3a		      LDA	#$3A
   8102  fd05		       85 09		      STA	COLUBK
   8103  fd07				   .
   8104  fd07							; 
   8105  fd07
   8106  fd07				   .L0263		;  goto __Got_Pause_Colors
   8107  fd07
   8108  fd07		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8109  fd0a
   8110  fd0a				   .
   8111  fd0a							; 
   8112  fd0a
   8113  fd0a				   .
   8114  fd0a							; 
   8115  fd0a
   8116  fd0a				   .
   8117  fd0a							; 
   8118  fd0a
   8119  fd0a				   .
   8120  fd0a							; 
   8121  fd0a
   8122  fd0a				   .
   8123  fd0a							; 
   8124  fd0a
   8125  fd0a				   .
   8126  fd0a							; 
   8127  fd0a
   8128  fd0a				   .
   8129  fd0a							; 
   8130  fd0a
   8131  fd0a				   .__Ps1B
   8132  fd0a							; __Ps1B
   8133  fd0a
   8134  fd0a				   .
   8135  fd0a							; 
   8136  fd0a
   8137  fd0a				   .L0264		;  COLUPF  =  $3A  :  COLUP0  =  $3A  :  COLUP1  =  $3A  :  pfscorecolor  =  $3A  :  scorecolor  =  $3A
   8138  fd0a
   8139  fd0a		       a9 3a		      LDA	#$3A
   8140  fd0c		       85 08		      STA	COLUPF
   8141  fd0e		       85 06		      STA	COLUP0
   8142  fd10		       85 07		      STA	COLUP1
   8143  fd12		       85 f4		      STA	pfscorecolor
   8144  fd14		       85 a3		      STA	scorecolor
   8145  fd16				   .
   8146  fd16							; 
   8147  fd16
   8148  fd16				   .L0265		;  COLUBK  =  $3C
   8149  fd16
   8150  fd16		       a9 3c		      LDA	#$3C
   8151  fd18		       85 09		      STA	COLUBK
   8152  fd1a				   .
   8153  fd1a							; 
   8154  fd1a
   8155  fd1a				   .L0266		;  goto __Got_Pause_Colors
   8156  fd1a
   8157  fd1a		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8158  fd1d
   8159  fd1d				   .
   8160  fd1d							; 
   8161  fd1d
   8162  fd1d				   .
   8163  fd1d							; 
   8164  fd1d
   8165  fd1d				   .
   8166  fd1d							; 
   8167  fd1d
   8168  fd1d				   .
   8169  fd1d							; 
   8170  fd1d
   8171  fd1d				   .
   8172  fd1d							; 
   8173  fd1d
   8174  fd1d				   .
   8175  fd1d							; 
   8176  fd1d
   8177  fd1d				   .
   8178  fd1d							; 
   8179  fd1d
   8180  fd1d				   .__Ps2
   8181  fd1d							; __Ps2
   8182  fd1d
   8183  fd1d				   .
   8184  fd1d							; 
   8185  fd1d
   8186  fd1d				   .L0267		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps2B
   8187  fd1d
   8188  fd1d		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8189  fd1f		       29 04		      AND	#4
   8190  fd21		       f0 03		      BEQ	.skipL0267
   8191  fd23				   .condpart100
   8192  fd23		       4c 39 fd 	      jmp	.__Ps2B
   8193  fd26
   8194  fd26				   .skipL0267
   8195  fd26				   .
   8196  fd26							; 
   8197  fd26
   8198  fd26				   .L0268		;  COLUPF  =  $6C  :  COLUP0  =  $6C  :  COLUP1  =  $6C  :  pfscorecolor  =  $6C  :  scorecolor  =  $6C
   8199  fd26
   8200  fd26		       a9 6c		      LDA	#$6C
   8201  fd28		       85 08		      STA	COLUPF
   8202  fd2a		       85 06		      STA	COLUP0
   8203  fd2c		       85 07		      STA	COLUP1
   8204  fd2e		       85 f4		      STA	pfscorecolor
   8205  fd30		       85 a3		      STA	scorecolor
   8206  fd32				   .
   8207  fd32							; 
   8208  fd32
   8209  fd32				   .L0269		;  COLUBK  =  $6A
   8210  fd32
   8211  fd32		       a9 6a		      LDA	#$6A
   8212  fd34		       85 09		      STA	COLUBK
   8213  fd36				   .
   8214  fd36							; 
   8215  fd36
   8216  fd36				   .L0270		;  goto __Got_Pause_Colors
   8217  fd36
   8218  fd36		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8219  fd39
   8220  fd39				   .
   8221  fd39							; 
   8222  fd39
   8223  fd39				   .
   8224  fd39							; 
   8225  fd39
   8226  fd39				   .
   8227  fd39							; 
   8228  fd39
   8229  fd39				   .
   8230  fd39							; 
   8231  fd39
   8232  fd39				   .
   8233  fd39							; 
   8234  fd39
   8235  fd39				   .
   8236  fd39							; 
   8237  fd39
   8238  fd39				   .
   8239  fd39							; 
   8240  fd39
   8241  fd39				   .__Ps2B
   8242  fd39							; __Ps2B
   8243  fd39
   8244  fd39				   .
   8245  fd39							; 
   8246  fd39
   8247  fd39				   .L0271		;  COLUPF  =  $6A  :  COLUP0  =  $6A  :  COLUP1  =  $6A  :  pfscorecolor  =  $6A  :  scorecolor  =  $6A
   8248  fd39
   8249  fd39		       a9 6a		      LDA	#$6A
   8250  fd3b		       85 08		      STA	COLUPF
   8251  fd3d		       85 06		      STA	COLUP0
   8252  fd3f		       85 07		      STA	COLUP1
   8253  fd41		       85 f4		      STA	pfscorecolor
   8254  fd43		       85 a3		      STA	scorecolor
   8255  fd45				   .
   8256  fd45							; 
   8257  fd45
   8258  fd45				   .
   8259  fd45							; 
   8260  fd45
   8261  fd45				   .
   8262  fd45							; 
   8263  fd45
   8264  fd45				   .L0272		;  COLUBK  =  $6C
   8265  fd45
   8266  fd45		       a9 6c		      LDA	#$6C
   8267  fd47		       85 09		      STA	COLUBK
   8268  fd49				   .
   8269  fd49							; 
   8270  fd49
   8271  fd49				   .L0273		;  goto __Got_Pause_Colors
   8272  fd49
   8273  fd49		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8274  fd4c
   8275  fd4c				   .
   8276  fd4c							; 
   8277  fd4c
   8278  fd4c				   .
   8279  fd4c							; 
   8280  fd4c
   8281  fd4c				   .
   8282  fd4c							; 
   8283  fd4c
   8284  fd4c				   .
   8285  fd4c							; 
   8286  fd4c
   8287  fd4c				   .
   8288  fd4c							; 
   8289  fd4c
   8290  fd4c				   .
   8291  fd4c							; 
   8292  fd4c
   8293  fd4c				   .
   8294  fd4c							; 
   8295  fd4c
   8296  fd4c				   .__Ps3
   8297  fd4c							; __Ps3
   8298  fd4c
   8299  fd4c				   .
   8300  fd4c							; 
   8301  fd4c
   8302  fd4c				   .L0274		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps3B
   8303  fd4c
   8304  fd4c		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8305  fd4e		       29 04		      AND	#4
   8306  fd50		       f0 03		      BEQ	.skipL0274
   8307  fd52				   .condpart101
   8308  fd52		       4c 68 fd 	      jmp	.__Ps3B
   8309  fd55
   8310  fd55				   .skipL0274
   8311  fd55				   .
   8312  fd55							; 
   8313  fd55
   8314  fd55				   .L0275		;  COLUPF  =  $9C  :  COLUP0  =  $9C  :  COLUP1  =  $9C  :  pfscorecolor  =  $9C  :  scorecolor  =  $9C
   8315  fd55
   8316  fd55		       a9 9c		      LDA	#$9C
   8317  fd57		       85 08		      STA	COLUPF
   8318  fd59		       85 06		      STA	COLUP0
   8319  fd5b		       85 07		      STA	COLUP1
   8320  fd5d		       85 f4		      STA	pfscorecolor
   8321  fd5f		       85 a3		      STA	scorecolor
   8322  fd61				   .
   8323  fd61							; 
   8324  fd61
   8325  fd61				   .L0276		;  COLUBK  =  $9A
   8326  fd61
   8327  fd61		       a9 9a		      LDA	#$9A
   8328  fd63		       85 09		      STA	COLUBK
   8329  fd65				   .
   8330  fd65							; 
   8331  fd65
   8332  fd65				   .L0277		;  goto __Got_Pause_Colors
   8333  fd65
   8334  fd65		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8335  fd68
   8336  fd68				   .
   8337  fd68							; 
   8338  fd68
   8339  fd68				   .
   8340  fd68							; 
   8341  fd68
   8342  fd68				   .
   8343  fd68							; 
   8344  fd68
   8345  fd68				   .
   8346  fd68							; 
   8347  fd68
   8348  fd68				   .
   8349  fd68							; 
   8350  fd68
   8351  fd68				   .
   8352  fd68							; 
   8353  fd68
   8354  fd68				   .
   8355  fd68							; 
   8356  fd68
   8357  fd68				   .__Ps3B
   8358  fd68							; __Ps3B
   8359  fd68
   8360  fd68				   .
   8361  fd68							; 
   8362  fd68
   8363  fd68				   .L0278		;  COLUPF  =  $9A  :  COLUP0  =  $9A  :  COLUP1  =  $9A  :  pfscorecolor  =  $9A  :  scorecolor  =  $9A
   8364  fd68
   8365  fd68		       a9 9a		      LDA	#$9A
   8366  fd6a		       85 08		      STA	COLUPF
   8367  fd6c		       85 06		      STA	COLUP0
   8368  fd6e		       85 07		      STA	COLUP1
   8369  fd70		       85 f4		      STA	pfscorecolor
   8370  fd72		       85 a3		      STA	scorecolor
   8371  fd74				   .
   8372  fd74							; 
   8373  fd74
   8374  fd74				   .L0279		;  COLUBK  =  $9C
   8375  fd74
   8376  fd74		       a9 9c		      LDA	#$9C
   8377  fd76		       85 09		      STA	COLUBK
   8378  fd78				   .
   8379  fd78							; 
   8380  fd78
   8381  fd78				   .L0280		;  goto __Got_Pause_Colors
   8382  fd78
   8383  fd78		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8384  fd7b
   8385  fd7b				   .
   8386  fd7b							; 
   8387  fd7b
   8388  fd7b				   .
   8389  fd7b							; 
   8390  fd7b
   8391  fd7b				   .
   8392  fd7b							; 
   8393  fd7b
   8394  fd7b				   .
   8395  fd7b							; 
   8396  fd7b
   8397  fd7b				   .
   8398  fd7b							; 
   8399  fd7b
   8400  fd7b				   .
   8401  fd7b							; 
   8402  fd7b
   8403  fd7b				   .
   8404  fd7b							; 
   8405  fd7b
   8406  fd7b				   .__Ps4
   8407  fd7b							; __Ps4
   8408  fd7b
   8409  fd7b				   .
   8410  fd7b							; 
   8411  fd7b
   8412  fd7b				   .L0281		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps4B
   8413  fd7b
   8414  fd7b		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8415  fd7d		       29 04		      AND	#4
   8416  fd7f		       f0 03		      BEQ	.skipL0281
   8417  fd81				   .condpart102
   8418  fd81		       4c 97 fd 	      jmp	.__Ps4B
   8419  fd84
   8420  fd84				   .skipL0281
   8421  fd84				   .
   8422  fd84							; 
   8423  fd84
   8424  fd84				   .L0282		;  COLUPF  =  $CC  :  COLUP0  =  $CC  :  COLUP1  =  $CC  :  pfscorecolor  =  $CC  :  scorecolor  =  $CC
   8425  fd84
   8426  fd84		       a9 cc		      LDA	#$CC
   8427  fd86		       85 08		      STA	COLUPF
   8428  fd88		       85 06		      STA	COLUP0
   8429  fd8a		       85 07		      STA	COLUP1
   8430  fd8c		       85 f4		      STA	pfscorecolor
   8431  fd8e		       85 a3		      STA	scorecolor
   8432  fd90				   .
   8433  fd90							; 
   8434  fd90
   8435  fd90				   .L0283		;  COLUBK  =  $CA
   8436  fd90
   8437  fd90		       a9 ca		      LDA	#$CA
   8438  fd92		       85 09		      STA	COLUBK
   8439  fd94				   .
   8440  fd94							; 
   8441  fd94
   8442  fd94				   .L0284		;  goto __Got_Pause_Colors
   8443  fd94
   8444  fd94		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8445  fd97
   8446  fd97				   .
   8447  fd97							; 
   8448  fd97
   8449  fd97				   .
   8450  fd97							; 
   8451  fd97
   8452  fd97				   .
   8453  fd97							; 
   8454  fd97
   8455  fd97				   .
   8456  fd97							; 
   8457  fd97
   8458  fd97				   .
   8459  fd97							; 
   8460  fd97
   8461  fd97				   .
   8462  fd97							; 
   8463  fd97
   8464  fd97				   .
   8465  fd97							; 
   8466  fd97
   8467  fd97				   .__Ps4B
   8468  fd97							; __Ps4B
   8469  fd97
   8470  fd97				   .
   8471  fd97							; 
   8472  fd97
   8473  fd97				   .L0285		;  COLUPF  =  $CA  :  COLUP0  =  $CA  :  COLUP1  =  $CA  :  pfscorecolor  =  $CA  :  scorecolor  =  $CA
   8474  fd97
   8475  fd97		       a9 ca		      LDA	#$CA
   8476  fd99		       85 08		      STA	COLUPF
   8477  fd9b		       85 06		      STA	COLUP0
   8478  fd9d		       85 07		      STA	COLUP1
   8479  fd9f		       85 f4		      STA	pfscorecolor
   8480  fda1		       85 a3		      STA	scorecolor
   8481  fda3				   .
   8482  fda3							; 
   8483  fda3
   8484  fda3				   .L0286		;  COLUBK  =  $CC
   8485  fda3
   8486  fda3		       a9 cc		      LDA	#$CC
   8487  fda5		       85 09		      STA	COLUBK
   8488  fda7				   .
   8489  fda7							; 
   8490  fda7
   8491  fda7				   .L0287		;  goto __Got_Pause_Colors
   8492  fda7
   8493  fda7		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8494  fdaa
   8495  fdaa				   .
   8496  fdaa							; 
   8497  fdaa
   8498  fdaa				   .
   8499  fdaa							; 
   8500  fdaa
   8501  fdaa				   .
   8502  fdaa							; 
   8503  fdaa
   8504  fdaa				   .
   8505  fdaa							; 
   8506  fdaa
   8507  fdaa				   .
   8508  fdaa							; 
   8509  fdaa
   8510  fdaa				   .
   8511  fdaa							; 
   8512  fdaa
   8513  fdaa				   .
   8514  fdaa							; 
   8515  fdaa
   8516  fdaa				   .__Ps5
   8517  fdaa							; __Ps5
   8518  fdaa
   8519  fdaa				   .
   8520  fdaa							; 
   8521  fdaa
   8522  fdaa				   .L0288		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps5B
   8523  fdaa
   8524  fdaa		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8525  fdac		       29 04		      AND	#4
   8526  fdae		       f0 03		      BEQ	.skipL0288
   8527  fdb0				   .condpart103
   8528  fdb0		       4c c6 fd 	      jmp	.__Ps5B
   8529  fdb3
   8530  fdb3				   .skipL0288
   8531  fdb3				   .
   8532  fdb3							; 
   8533  fdb3
   8534  fdb3				   .L0289		;  COLUPF  =  $FC  :  COLUP0  =  $FC  :  COLUP1  =  $FC  :  pfscorecolor  =  $FC  :  scorecolor  =  $FC
   8535  fdb3
   8536  fdb3		       a9 fc		      LDA	#$FC
   8537  fdb5		       85 08		      STA	COLUPF
   8538  fdb7		       85 06		      STA	COLUP0
   8539  fdb9		       85 07		      STA	COLUP1
   8540  fdbb		       85 f4		      STA	pfscorecolor
   8541  fdbd		       85 a3		      STA	scorecolor
   8542  fdbf				   .
   8543  fdbf							; 
   8544  fdbf
   8545  fdbf				   .L0290		;  COLUBK  =  $FA
   8546  fdbf
   8547  fdbf		       a9 fa		      LDA	#$FA
   8548  fdc1		       85 09		      STA	COLUBK
   8549  fdc3				   .
   8550  fdc3							; 
   8551  fdc3
   8552  fdc3				   .L0291		;  goto __Got_Pause_Colors
   8553  fdc3
   8554  fdc3		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8555  fdc6
   8556  fdc6				   .
   8557  fdc6							; 
   8558  fdc6
   8559  fdc6				   .
   8560  fdc6							; 
   8561  fdc6
   8562  fdc6				   .
   8563  fdc6							; 
   8564  fdc6
   8565  fdc6				   .
   8566  fdc6							; 
   8567  fdc6
   8568  fdc6				   .
   8569  fdc6							; 
   8570  fdc6
   8571  fdc6				   .
   8572  fdc6							; 
   8573  fdc6
   8574  fdc6				   .
   8575  fdc6							; 
   8576  fdc6
   8577  fdc6				   .__Ps5B
   8578  fdc6							; __Ps5B
   8579  fdc6
   8580  fdc6				   .
   8581  fdc6							; 
   8582  fdc6
   8583  fdc6				   .L0292		;  COLUPF  =  $FA  :  COLUP0  =  $FA  :  COLUP1  =  $FA  :  pfscorecolor  =  $FA :  scorecolor  =  $FA
   8584  fdc6
   8585  fdc6		       a9 fa		      LDA	#$FA
   8586  fdc8		       85 08		      STA	COLUPF
   8587  fdca		       85 06		      STA	COLUP0
   8588  fdcc		       85 07		      STA	COLUP1
   8589  fdce		       85 f4		      STA	pfscorecolor
   8590  fdd0		       85 a3		      STA	scorecolor
   8591  fdd2				   .
   8592  fdd2							; 
   8593  fdd2
   8594  fdd2				   .L0293		;  COLUBK  =  $FC
   8595  fdd2
   8596  fdd2		       a9 fc		      LDA	#$FC
   8597  fdd4		       85 09		      STA	COLUBK
   8598  fdd6				   .
   8599  fdd6							; 
   8600  fdd6
   8601  fdd6				   .L0294		;  goto __Got_Pause_Colors
   8602  fdd6
   8603  fdd6		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8604  fdd9
   8605  fdd9				   .
   8606  fdd9							; 
   8607  fdd9
   8608  fdd9				   .
   8609  fdd9							; 
   8610  fdd9
   8611  fdd9				   .
   8612  fdd9							; 
   8613  fdd9
   8614  fdd9				   .
   8615  fdd9							; 
   8616  fdd9
   8617  fdd9				   .
   8618  fdd9							; 
   8619  fdd9
   8620  fdd9				   .
   8621  fdd9							; 
   8622  fdd9
   8623  fdd9				   .
   8624  fdd9							; 
   8625  fdd9
   8626  fdd9				   .__Ps6
   8627  fdd9							; __Ps6
   8628  fdd9
   8629  fdd9				   .
   8630  fdd9							; 
   8631  fdd9
   8632  fdd9				   .L0295		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps6B
   8633  fdd9
   8634  fdd9		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8635  fddb		       29 04		      AND	#4
   8636  fddd		       f0 03		      BEQ	.skipL0295
   8637  fddf				   .condpart104
   8638  fddf		       4c f5 fd 	      jmp	.__Ps6B
   8639  fde2
   8640  fde2				   .skipL0295
   8641  fde2				   .
   8642  fde2							; 
   8643  fde2
   8644  fde2				   .L0296		;  COLUPF  =  $8C  :  COLUP0  =  $8C  :  COLUP1  =  $8C  :  pfscorecolor  =  $8C  :  scorecolor  =  $8C
   8645  fde2
   8646  fde2		       a9 8c		      LDA	#$8C
   8647  fde4		       85 08		      STA	COLUPF
   8648  fde6		       85 06		      STA	COLUP0
   8649  fde8		       85 07		      STA	COLUP1
   8650  fdea		       85 f4		      STA	pfscorecolor
   8651  fdec		       85 a3		      STA	scorecolor
   8652  fdee				   .
   8653  fdee							; 
   8654  fdee
   8655  fdee				   .L0297		;  COLUBK  =  $8A
   8656  fdee
   8657  fdee		       a9 8a		      LDA	#$8A
   8658  fdf0		       85 09		      STA	COLUBK
   8659  fdf2				   .
   8660  fdf2							; 
   8661  fdf2
   8662  fdf2				   .L0298		;  goto __Got_Pause_Colors
   8663  fdf2
   8664  fdf2		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8665  fdf5
   8666  fdf5				   .
   8667  fdf5							; 
   8668  fdf5
   8669  fdf5				   .
   8670  fdf5							; 
   8671  fdf5
   8672  fdf5				   .
   8673  fdf5							; 
   8674  fdf5
   8675  fdf5				   .
   8676  fdf5							; 
   8677  fdf5
   8678  fdf5				   .
   8679  fdf5							; 
   8680  fdf5
   8681  fdf5				   .
   8682  fdf5							; 
   8683  fdf5
   8684  fdf5				   .
   8685  fdf5							; 
   8686  fdf5
   8687  fdf5				   .__Ps6B
   8688  fdf5							; __Ps6B
   8689  fdf5
   8690  fdf5				   .
   8691  fdf5							; 
   8692  fdf5
   8693  fdf5				   .L0299		;  COLUPF  =  $8A  :  COLUP0  =  $8A  :  COLUP1  =  $8A  :  pfscorecolor  =  $8A  :  scorecolor  =  $8A
   8694  fdf5
   8695  fdf5		       a9 8a		      LDA	#$8A
   8696  fdf7		       85 08		      STA	COLUPF
   8697  fdf9		       85 06		      STA	COLUP0
   8698  fdfb		       85 07		      STA	COLUP1
   8699  fdfd		       85 f4		      STA	pfscorecolor
   8700  fdff		       85 a3		      STA	scorecolor
   8701  fe01				   .
   8702  fe01							; 
   8703  fe01
   8704  fe01				   .L0300		;  COLUBK  =  $8C
   8705  fe01
   8706  fe01		       a9 8c		      LDA	#$8C
   8707  fe03		       85 09		      STA	COLUBK
   8708  fe05				   .
   8709  fe05							; 
   8710  fe05
   8711  fe05				   .L0301		;  goto __Got_Pause_Colors
   8712  fe05
   8713  fe05		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8714  fe08
   8715  fe08				   .
   8716  fe08							; 
   8717  fe08
   8718  fe08				   .
   8719  fe08							; 
   8720  fe08
   8721  fe08				   .
   8722  fe08							; 
   8723  fe08
   8724  fe08				   .
   8725  fe08							; 
   8726  fe08
   8727  fe08				   .
   8728  fe08							; 
   8729  fe08
   8730  fe08				   .
   8731  fe08							; 
   8732  fe08
   8733  fe08				   .
   8734  fe08							; 
   8735  fe08
   8736  fe08				   .__Ps7
   8737  fe08							; __Ps7
   8738  fe08
   8739  fe08				   .
   8740  fe08							; 
   8741  fe08
   8742  fe08				   .L0302		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps7B
   8743  fe08
   8744  fe08		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8745  fe0a		       29 04		      AND	#4
   8746  fe0c		       f0 03		      BEQ	.skipL0302
   8747  fe0e				   .condpart105
   8748  fe0e		       4c 24 fe 	      jmp	.__Ps7B
   8749  fe11
   8750  fe11				   .skipL0302
   8751  fe11				   .
   8752  fe11							; 
   8753  fe11
   8754  fe11				   .L0303		;  COLUPF  =  $2C  :  COLUP0  =  $2C  :  COLUP1  =  $2C  :  pfscorecolor  =  $2C  :  scorecolor  =  $2C
   8755  fe11
   8756  fe11		       a9 2c		      LDA	#$2C
   8757  fe13		       85 08		      STA	COLUPF
   8758  fe15		       85 06		      STA	COLUP0
   8759  fe17		       85 07		      STA	COLUP1
   8760  fe19		       85 f4		      STA	pfscorecolor
   8761  fe1b		       85 a3		      STA	scorecolor
   8762  fe1d				   .
   8763  fe1d							; 
   8764  fe1d
   8765  fe1d				   .L0304		;  COLUBK  =  $2A
   8766  fe1d
   8767  fe1d		       a9 2a		      LDA	#$2A
   8768  fe1f		       85 09		      STA	COLUBK
   8769  fe21				   .
   8770  fe21							; 
   8771  fe21
   8772  fe21				   .L0305		;  goto __Got_Pause_Colors
   8773  fe21
   8774  fe21		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8775  fe24
   8776  fe24				   .
   8777  fe24							; 
   8778  fe24
   8779  fe24				   .
   8780  fe24							; 
   8781  fe24
   8782  fe24				   .
   8783  fe24							; 
   8784  fe24
   8785  fe24				   .
   8786  fe24							; 
   8787  fe24
   8788  fe24				   .
   8789  fe24							; 
   8790  fe24
   8791  fe24				   .
   8792  fe24							; 
   8793  fe24
   8794  fe24				   .
   8795  fe24							; 
   8796  fe24
   8797  fe24				   .__Ps7B
   8798  fe24							; __Ps7B
   8799  fe24
   8800  fe24				   .
   8801  fe24							; 
   8802  fe24
   8803  fe24				   .L0306		;  COLUPF  =  $2A  :  COLUP0  =  $2A  :  COLUP1  =  $2A  :  pfscorecolor  =  $2A  :  scorecolor  =  $2A
   8804  fe24
   8805  fe24		       a9 2a		      LDA	#$2A
   8806  fe26		       85 08		      STA	COLUPF
   8807  fe28		       85 06		      STA	COLUP0
   8808  fe2a		       85 07		      STA	COLUP1
   8809  fe2c		       85 f4		      STA	pfscorecolor
   8810  fe2e		       85 a3		      STA	scorecolor
   8811  fe30				   .
   8812  fe30							; 
   8813  fe30
   8814  fe30				   .L0307		;  COLUBK  =  $2C
   8815  fe30
   8816  fe30		       a9 2c		      LDA	#$2C
   8817  fe32		       85 09		      STA	COLUBK
   8818  fe34				   .
   8819  fe34							; 
   8820  fe34
   8821  fe34				   .L0308		;  goto __Got_Pause_Colors
   8822  fe34
   8823  fe34		       4c 82 fc 	      jmp	.__Got_Pause_Colors
   8824  fe37
   8825  fe37				   .
   8826  fe37							; 
   8827  fe37
   8828  fe37				   .
   8829  fe37							; 
   8830  fe37
   8831  fe37				   .
   8832  fe37							; 
   8833  fe37
   8834  fe37				   .
   8835  fe37							; 
   8836  fe37
   8837  fe37				   .
   8838  fe37							; 
   8839  fe37
   8840  fe37				   .
   8841  fe37							; 
   8842  fe37
   8843  fe37				   .
   8844  fe37							; 
   8845  fe37
   8846  fe37				   .
   8847  fe37							; 
   8848  fe37
   8849  fe37				   .
   8850  fe37							; 
   8851  fe37
   8852  fe37				   .
   8853  fe37							; 
   8854  fe37
   8855  fe37				   .
   8856  fe37							; 
   8857  fe37
   8858  fe37				   .
   8859  fe37							; 
   8860  fe37
   8861  fe37				   .
   8862  fe37							; 
   8863  fe37
   8864  fe37				   .
   8865  fe37							; 
   8866  fe37
   8867  fe37				   .
   8868  fe37							; 
   8869  fe37
   8870  fe37				   .
   8871  fe37							; 
   8872  fe37
   8873  fe37				   .
   8874  fe37							; 
   8875  fe37
   8876  fe37				   .
   8877  fe37							; 
   8878  fe37
   8879  fe37				   .
   8880  fe37							; 
   8881  fe37
   8882  fe37				   .L0309		;  data _Data_Fire_B_Sound
   8883  fe37
   8884  fe37		       4c 53 fe 	      JMP	.skipL0309
   8885  fe3a				   _Data_Fire_B_Sound
   8886  fe3a		       08 08 02 	      .byte.b	8,8,2
   8887  fe3d
   8888  fe3d		       01		      .byte.b	1
   8889  fe3e
   8890  fe3e		       08 08 08 	      .byte.b	8,8,8
   8891  fe41
   8892  fe41		       01		      .byte.b	1
   8893  fe42
   8894  fe42		       08 08 0c 	      .byte.b	8,8,12
   8895  fe45
   8896  fe45		       01		      .byte.b	1
   8897  fe46
   8898  fe46		       08 08 13 	      .byte.b	8,8,19
   8899  fe49
   8900  fe49		       01		      .byte.b	1
   8901  fe4a
   8902  fe4a		       08 08 17 	      .byte.b	8,8,23
   8903  fe4d
   8904  fe4d		       01		      .byte.b	1
   8905  fe4e
   8906  fe4e		       02 08 1b 	      .byte.b	2,8,27
   8907  fe51
   8908  fe51		       04		      .byte.b	4
   8909  fe52
   8910  fe52		       ff		      .byte.b	255
   8911  fe53
   8912  fe53				   .skipL0309
   8913  fe53				   .
   8914  fe53							; 
   8915  fe53
   8916  fe53				   .
   8917  fe53							; 
   8918  fe53
   8919  fe53				   .
   8920  fe53							; 
   8921  fe53
   8922  fe53				   .
   8923  fe53							; 
   8924  fe53
   8925  fe53				   .
   8926  fe53							; 
   8927  fe53
   8928  fe53				   .
   8929  fe53							; 
   8930  fe53
   8931  fe53				   .
   8932  fe53							; 
   8933  fe53
   8934  fe53				   .L0310		;  data _Data_Enemy_Destroyed
   8935  fe53
   8936  fe53		       4c 8b fe 	      JMP	.skipL0310
   8937  fe56				   _Data_Enemy_Destroyed
   8938  fe56		       0a 08 0f 	      .byte.b	10,8,15
   8939  fe59
   8940  fe59		       01		      .byte.b	1
   8941  fe5a
   8942  fe5a		       08 0f 0f 	      .byte.b	8,15,15
   8943  fe5d
   8944  fe5d		       01		      .byte.b	1
   8945  fe5e
   8946  fe5e		       08 04 11 	      .byte.b	8,4,17
   8947  fe61
   8948  fe61		       01		      .byte.b	1
   8949  fe62
   8950  fe62		       06 07 10 	      .byte.b	6,7,16
   8951  fe65
   8952  fe65		       01		      .byte.b	1
   8953  fe66
   8954  fe66		       04 08 13 	      .byte.b	4,8,19
   8955  fe69
   8956  fe69		       01		      .byte.b	1
   8957  fe6a
   8958  fe6a		       02 07 0a 	      .byte.b	2,7,10
   8959  fe6d
   8960  fe6d		       01		      .byte.b	1
   8961  fe6e
   8962  fe6e		       06 04 12 	      .byte.b	6,4,18
   8963  fe71
   8964  fe71		       01		      .byte.b	1
   8965  fe72
   8966  fe72		       06 08 05 	      .byte.b	6,8,5
   8967  fe75
   8968  fe75		       01		      .byte.b	1
   8969  fe76
   8970  fe76		       0a 07 0a 	      .byte.b	10,7,10
   8971  fe79
   8972  fe79		       01		      .byte.b	1
   8973  fe7a
   8974  fe7a		       0a 04 13 	      .byte.b	10,4,19
   8975  fe7d
   8976  fe7d		       01		      .byte.b	1
   8977  fe7e
   8978  fe7e		       0a 08 1d 	      .byte.b	10,8,29
   8979  fe81
   8980  fe81		       01		      .byte.b	1
   8981  fe82
   8982  fe82		       02 04 15 	      .byte.b	2,4,21
   8983  fe85
   8984  fe85		       01		      .byte.b	1
   8985  fe86
   8986  fe86		       02 0f 12 	      .byte.b	2,15,18
   8987  fe89
   8988  fe89		       08		      .byte.b	8
   8989  fe8a
   8990  fe8a		       ff		      .byte.b	255
   8991  fe8b
   8992  fe8b				   .skipL0310
   8993  fe8b				   .
   8994  fe8b							; 
   8995  fe8b
   8996  fe8b				   .
   8997  fe8b							; 
   8998  fe8b
   8999  fe8b				   .
   9000  fe8b							; 
   9001  fe8b
   9002  fe8b				   .
   9003  fe8b							; 
   9004  fe8b
   9005  fe8b				   .
   9006  fe8b							; 
   9007  fe8b
   9008  fe8b				   .
   9009  fe8b							; 
   9010  fe8b
   9011  fe8b				   .
   9012  fe8b							; 
   9013  fe8b
   9014  fe8b				   .L0311		;  data _Data_Player_Damaged
   9015  fe8b
   9016  fe8b		       4c cf fe 	      JMP	.skipL0311
   9017  fe8e				   _Data_Player_Damaged
   9018  fe8e		       0c 08 03 	      .byte.b	12,8,3
   9019  fe91
   9020  fe91		       01		      .byte.b	1
   9021  fe92
   9022  fe92		       08 06 03 	      .byte.b	8,6,3
   9023  fe95
   9024  fe95		       01		      .byte.b	1
   9025  fe96
   9026  fe96		       06 08 06 	      .byte.b	6,8,6
   9027  fe99
   9028  fe99		       01		      .byte.b	1
   9029  fe9a
   9030  fe9a		       08 08 09 	      .byte.b	8,8,9
   9031  fe9d
   9032  fe9d		       01		      .byte.b	1
   9033  fe9e
   9034  fe9e		       0a 08 0c 	      .byte.b	10,8,12
   9035  fea1
   9036  fea1		       01		      .byte.b	1
   9037  fea2
   9038  fea2		       08 08 0f 	      .byte.b	8,8,15
   9039  fea5
   9040  fea5		       01		      .byte.b	1
   9041  fea6
   9042  fea6		       06 08 11 	      .byte.b	6,8,17
   9043  fea9
   9044  fea9		       01		      .byte.b	1
   9045  feaa
   9046  feaa		       04 08 13 	      .byte.b	4,8,19
   9047  fead
   9048  fead		       01		      .byte.b	1
   9049  feae
   9050  feae		       08 08 15 	      .byte.b	8,8,21
   9051  feb1
   9052  feb1		       01		      .byte.b	1
   9053  feb2
   9054  feb2		       0a 08 17 	      .byte.b	10,8,23
   9055  feb5
   9056  feb5		       01		      .byte.b	1
   9057  feb6
   9058  feb6		       0c 08 19 	      .byte.b	12,8,25
   9059  feb9
   9060  feb9		       01		      .byte.b	1
   9061  feba
   9062  feba		       0a 08 1b 	      .byte.b	10,8,27
   9063  febd
   9064  febd		       01		      .byte.b	1
   9065  febe
   9066  febe		       08 08 1b 	      .byte.b	8,8,27
   9067  fec1
   9068  fec1		       01		      .byte.b	1
   9069  fec2
   9070  fec2		       06 08 1d 	      .byte.b	6,8,29
   9071  fec5
   9072  fec5		       01		      .byte.b	1
   9073  fec6
   9074  fec6		       04 06 1d 	      .byte.b	4,6,29
   9075  fec9
   9076  fec9		       01		      .byte.b	1
   9077  feca
   9078  feca		       02 08 1f 	      .byte.b	2,8,31
   9079  fecd
   9080  fecd		       08		      .byte.b	8
   9081  fece
   9082  fece		       ff		      .byte.b	255
   9083  fecf
   9084  fecf				   .skipL0311
   9085  fecf				  -	      if	(<*) > (<(*+7))
   9086  fecf				  -	      repeat	($100-<*)
   9087  fecf				  -	      .byte	0
   9088  fecf				  -	      repend
   9089  fecf					      endif
   9090  fecf				   playerL066_0
   9091  fecf		       18		      .byte.b	%00011000
   9092  fed0		       3c		      .byte.b	%00111100
   9093  fed1		       3c		      .byte.b	%00111100
   9094  fed2		       7e		      .byte.b	%01111110
   9095  fed3		       7e		      .byte.b	%01111110
   9096  fed4		       ff		      .byte.b	%11111111
   9097  fed5		       7e		      .byte.b	%01111110
   9098  fed6		       18		      .byte.b	%00011000
   9099  fed7				  -	      if	(<*) > (<(*+3))
   9100  fed7				  -	      repeat	($100-<*)
   9101  fed7				  -	      .byte	0
   9102  fed7				  -	      repend
   9103  fed7					      endif
   9104  fed7				   playerL0190_1
   9105  fed7		       0a		      .byte.b	%00001010
   9106  fed8		       0e		      .byte.b	%00001110
   9107  fed9		       33		      .byte.b	%00110011
   9108  feda		       74		      .byte.b	%01110100
   9109  fedb				  -	      if	(<*) > (<(*+3))
   9110  fedb				  -	      repeat	($100-<*)
   9111  fedb				  -	      .byte	0
   9112  fedb				  -	      repend
   9113  fedb					      endif
   9114  fedb				   playerL0192_1
   9115  fedb		       09		      .byte.b	%00001001
   9116  fedc		       0e		      .byte.b	%00001110
   9117  fedd		       33		      .byte.b	%00110011
   9118  fede		       74		      .byte.b	%01110100
   9119  fedf				  -	      if	(<*) > (<(*+3))
   9120  fedf				  -	      repeat	($100-<*)
   9121  fedf				  -	      .byte	0
   9122  fedf				  -	      repend
   9123  fedf					      endif
   9124  fedf				   playerL0194_1
   9125  fedf		       11		      .byte.b	%00010001
   9126  fee0		       0e		      .byte.b	%00001110
   9127  fee1		       33		      .byte.b	%00110011
   9128  fee2		       74		      .byte.b	%01110100
   9129  fee3				  -	      if	(<*) > (<(*+3))
   9130  fee3				  -	      repeat	($100-<*)
   9131  fee3				  -	      .byte	0
   9132  fee3				  -	      repend
   9133  fee3					      endif
   9134  fee3				   playerL0196_1
   9135  fee3		       12		      .byte.b	%00010010
   9136  fee4		       0e		      .byte.b	%00001110
   9137  fee5		       33		      .byte.b	%00110011
   9138  fee6		       74		      .byte.b	%01110100
   9139  fee7					      if	ECHOFIRST
      181 bytes of ROM space left
   9140  fee7					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   9141  fee7					      endif
   9142  fee7		       00 01	   ECHOFIRST  =	1
   9143  fee7
   9144  fee7
   9145  fee7
   9146  fee7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   9147  fee7
   9148  fee7							; feel free to modify the score graphics - just keep each digit 8 high
   9149  fee7							; and keep the conditional compilation stuff intact
   9150  fee7				  -	      ifconst	ROM2k
   9151  fee7				  -	      ORG	$F7AC-8
   9152  fee7					      else
   9153  fee7				  -	      ifconst	bankswitch
   9154  fee7				  -	      if	bankswitch == 8
   9155  fee7				  -	      ORG	$2F94-bscode_length
   9156  fee7				  -	      RORG	$FF94-bscode_length
   9157  fee7				  -	      endif
   9158  fee7				  -	      if	bankswitch == 16
   9159  fee7				  -	      ORG	$4F94-bscode_length
   9160  fee7				  -	      RORG	$FF94-bscode_length
   9161  fee7				  -	      endif
   9162  fee7				  -	      if	bankswitch == 32
   9163  fee7				  -	      ORG	$8F94-bscode_length
   9164  fee7				  -	      RORG	$FF94-bscode_length
   9165  fee7				  -	      endif
   9166  fee7				  -	      if	bankswitch == 64
   9167  fee7				  -	      ORG	$10F80-bscode_length
   9168  fee7				  -	      RORG	$1FF80-bscode_length
   9169  fee7				  -	      endif
   9170  fee7					      else
   9171  ff9c					      ORG	$FF9C
   9172  ff9c					      endif
   9173  ff9c					      endif
   9174  ff9c
   9175  ff9c							; font equates
   9176  ff9c		       00 01	   .21stcentury =	1
   9177  ff9c		       00 02	   alarmclock =	2
   9178  ff9c		       00 03	   handwritten =	3
   9179  ff9c		       00 04	   interrupted =	4
   9180  ff9c		       00 05	   retroputer =	5
   9181  ff9c		       00 06	   whimsey    =	6
   9182  ff9c		       00 07	   tiny       =	7
   9183  ff9c		       00 08	   hex	      =	8
   9184  ff9c
   9185  ff9c				  -	      ifconst	font
   9186  ff9c				  -	      if	font == hex
   9187  ff9c				  -	      ORG	. - 48
   9188  ff9c				  -	      endif
   9189  ff9c					      endif
   9190  ff9c
   9191  ff9c				   scoretable
   9192  ff9c
   9193  ff9c				  -	      ifconst	font
   9194  ff9c				  -	      if	font == .21stcentury
   9195  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   9196  ff9c				  -	      endif
   9197  ff9c				  -	      if	font == alarmclock
   9198  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   9199  ff9c				  -	      endif
   9200  ff9c				  -	      if	font == handwritten
   9201  ff9c				  -	      include	"score_graphics.asm.handwritten"
   9202  ff9c				  -	      endif
   9203  ff9c				  -	      if	font == interrupted
   9204  ff9c				  -	      include	"score_graphics.asm.interrupted"
   9205  ff9c				  -	      endif
   9206  ff9c				  -	      if	font == retroputer
   9207  ff9c				  -	      include	"score_graphics.asm.retroputer"
   9208  ff9c				  -	      endif
   9209  ff9c				  -	      if	font == whimsey
   9210  ff9c				  -	      include	"score_graphics.asm.whimsey"
   9211  ff9c				  -	      endif
   9212  ff9c				  -	      if	font == tiny
   9213  ff9c				  -	      include	"score_graphics.asm.tiny"
   9214  ff9c				  -	      endif
   9215  ff9c				  -	      if	font == hex
   9216  ff9c				  -	      include	"score_graphics.asm.hex"
   9217  ff9c				  -	      endif
   9218  ff9c					      else		; default font
   9219  ff9c
   9220  ff9c		       3c		      .byte.b	%00111100
   9221  ff9d		       66		      .byte.b	%01100110
   9222  ff9e		       66		      .byte.b	%01100110
   9223  ff9f		       66		      .byte.b	%01100110
   9224  ffa0		       66		      .byte.b	%01100110
   9225  ffa1		       66		      .byte.b	%01100110
   9226  ffa2		       66		      .byte.b	%01100110
   9227  ffa3		       3c		      .byte.b	%00111100
   9228  ffa4
   9229  ffa4		       7e		      .byte.b	%01111110
   9230  ffa5		       18		      .byte.b	%00011000
   9231  ffa6		       18		      .byte.b	%00011000
   9232  ffa7		       18		      .byte.b	%00011000
   9233  ffa8		       18		      .byte.b	%00011000
   9234  ffa9		       38		      .byte.b	%00111000
   9235  ffaa		       18		      .byte.b	%00011000
   9236  ffab		       08		      .byte.b	%00001000
   9237  ffac
   9238  ffac		       7e		      .byte.b	%01111110
   9239  ffad		       60		      .byte.b	%01100000
   9240  ffae		       60		      .byte.b	%01100000
   9241  ffaf		       3c		      .byte.b	%00111100
   9242  ffb0		       06		      .byte.b	%00000110
   9243  ffb1		       06		      .byte.b	%00000110
   9244  ffb2		       46		      .byte.b	%01000110
   9245  ffb3		       3c		      .byte.b	%00111100
   9246  ffb4
   9247  ffb4		       3c		      .byte.b	%00111100
   9248  ffb5		       46		      .byte.b	%01000110
   9249  ffb6		       06		      .byte.b	%00000110
   9250  ffb7		       06		      .byte.b	%00000110
   9251  ffb8		       1c		      .byte.b	%00011100
   9252  ffb9		       06		      .byte.b	%00000110
   9253  ffba		       46		      .byte.b	%01000110
   9254  ffbb		       3c		      .byte.b	%00111100
   9255  ffbc
   9256  ffbc		       0c		      .byte.b	%00001100
   9257  ffbd		       0c		      .byte.b	%00001100
   9258  ffbe		       7e		      .byte.b	%01111110
   9259  ffbf		       4c		      .byte.b	%01001100
   9260  ffc0		       4c		      .byte.b	%01001100
   9261  ffc1		       2c		      .byte.b	%00101100
   9262  ffc2		       1c		      .byte.b	%00011100
   9263  ffc3		       0c		      .byte.b	%00001100
   9264  ffc4
   9265  ffc4		       3c		      .byte.b	%00111100
   9266  ffc5		       46		      .byte.b	%01000110
   9267  ffc6		       06		      .byte.b	%00000110
   9268  ffc7		       06		      .byte.b	%00000110
   9269  ffc8		       3c		      .byte.b	%00111100
   9270  ffc9		       60		      .byte.b	%01100000
   9271  ffca		       60		      .byte.b	%01100000
   9272  ffcb		       7e		      .byte.b	%01111110
   9273  ffcc
   9274  ffcc		       3c		      .byte.b	%00111100
   9275  ffcd		       66		      .byte.b	%01100110
   9276  ffce		       66		      .byte.b	%01100110
   9277  ffcf		       66		      .byte.b	%01100110
   9278  ffd0		       7c		      .byte.b	%01111100
   9279  ffd1		       60		      .byte.b	%01100000
   9280  ffd2		       62		      .byte.b	%01100010
   9281  ffd3		       3c		      .byte.b	%00111100
   9282  ffd4
   9283  ffd4		       30		      .byte.b	%00110000
   9284  ffd5		       30		      .byte.b	%00110000
   9285  ffd6		       30		      .byte.b	%00110000
   9286  ffd7		       18		      .byte.b	%00011000
   9287  ffd8		       0c		      .byte.b	%00001100
   9288  ffd9		       06		      .byte.b	%00000110
   9289  ffda		       42		      .byte.b	%01000010
   9290  ffdb		       3e		      .byte.b	%00111110
   9291  ffdc
   9292  ffdc		       3c		      .byte.b	%00111100
   9293  ffdd		       66		      .byte.b	%01100110
   9294  ffde		       66		      .byte.b	%01100110
   9295  ffdf		       66		      .byte.b	%01100110
   9296  ffe0		       3c		      .byte.b	%00111100
   9297  ffe1		       66		      .byte.b	%01100110
   9298  ffe2		       66		      .byte.b	%01100110
   9299  ffe3		       3c		      .byte.b	%00111100
   9300  ffe4
   9301  ffe4		       3c		      .byte.b	%00111100
   9302  ffe5		       46		      .byte.b	%01000110
   9303  ffe6		       06		      .byte.b	%00000110
   9304  ffe7		       3e		      .byte.b	%00111110
   9305  ffe8		       66		      .byte.b	%01100110
   9306  ffe9		       66		      .byte.b	%01100110
   9307  ffea		       66		      .byte.b	%01100110
   9308  ffeb		       3c		      .byte.b	%00111100
   9309  ffec
   9310  ffec					      ifnconst	DPC_kernel_options
   9311  ffec
   9312  ffec		       00		      .byte.b	%00000000
   9313  ffed		       00		      .byte.b	%00000000
   9314  ffee		       00		      .byte.b	%00000000
   9315  ffef		       00		      .byte.b	%00000000
   9316  fff0		       00		      .byte.b	%00000000
   9317  fff1		       00		      .byte.b	%00000000
   9318  fff2		       00		      .byte.b	%00000000
   9319  fff3		       00		      .byte.b	%00000000
   9320  fff4
   9321  fff4					      endif
   9322  fff4
   9323  fff4					      endif
   9324  fff4
   9325  fff4				  -	      ifconst	ROM2k
   9326  fff4				  -	      ORG	$F7FC
   9327  fff4					      else
   9328  fff4				  -	      ifconst	bankswitch
   9329  fff4				  -	      if	bankswitch == 8
   9330  fff4				  -	      ORG	$2FF4-bscode_length
   9331  fff4				  -	      RORG	$FFF4-bscode_length
   9332  fff4				  -	      endif
   9333  fff4				  -	      if	bankswitch == 16
   9334  fff4				  -	      ORG	$4FF4-bscode_length
   9335  fff4				  -	      RORG	$FFF4-bscode_length
   9336  fff4				  -	      endif
   9337  fff4				  -	      if	bankswitch == 32
   9338  fff4				  -	      ORG	$8FF4-bscode_length
   9339  fff4				  -	      RORG	$FFF4-bscode_length
   9340  fff4				  -	      endif
   9341  fff4				  -	      if	bankswitch == 64
   9342  fff4				  -	      ORG	$10FE0-bscode_length
   9343  fff4				  -	      RORG	$1FFE0-bscode_length
   9344  fff4				  -	      endif
   9345  fff4					      else
   9346  fffc					      ORG	$FFFC
   9347  fffc					      endif
   9348  fffc					      endif
   9349  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   9350  fffc
   9351  fffc				  -	      ifconst	bankswitch
   9352  fffc				  -	      if	bankswitch == 8
   9353  fffc				  -	      ORG	$2FFC
   9354  fffc				  -	      RORG	$FFFC
   9355  fffc				  -	      endif
   9356  fffc				  -	      if	bankswitch == 16
   9357  fffc				  -	      ORG	$4FFC
   9358  fffc				  -	      RORG	$FFFC
   9359  fffc				  -	      endif
   9360  fffc				  -	      if	bankswitch == 32
   9361  fffc				  -	      ORG	$8FFC
   9362  fffc				  -	      RORG	$FFFC
   9363  fffc				  -	      endif
   9364  fffc				  -	      if	bankswitch == 64
   9365  fffc				  -	      ORG	$10FF0
   9366  fffc				  -	      RORG	$1FFF0
   9367  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   9368  fffc				  -	      ORG	$10FF8
   9369  fffc				  -	      RORG	$1FFF8
   9370  fffc				  -	      ifconst	superchip
   9371  fffc				  -	      .byte	"E","F","S","C"
   9372  fffc				  -	      else
   9373  fffc				  -	      .byte	"E","F","E","F"
   9374  fffc				  -	      endif
   9375  fffc				  -	      ORG	$10FFC
   9376  fffc				  -	      RORG	$1FFFC
   9377  fffc				  -	      endif
   9378  fffc					      else
   9379  fffc				  -	      ifconst	ROM2k
   9380  fffc				  -	      ORG	$F7FC
   9381  fffc					      else
   9382  fffc					      ORG	$FFFC
   9383  fffc					      endif
   9384  fffc					      endif
   9385  fffc		       00 f0		      .word.w	(start & $ffff)
   9386  fffe		       00 f0		      .word.w	(start & $ffff)

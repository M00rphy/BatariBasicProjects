------- FILE e:\Documents\bB\demos\ex_save_high_score.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE e:\Documents\bB\demos\ex_save_high_score.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE e:\Documents\bB\demos\ex_save_high_score.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    rand16     =	z
     10  10000 ????
     11  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     12  10000 ????
     13  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     14  10000 ????
     15  10000 ????		00 ec	    _Bit2_Game_Control =	y
     16  10000 ????
     17  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     18  10000 ????
     19  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     20  10000 ????
     21  10000 ????		00 ec	    _BitOp_01  =	y
     22  10000 ????
     23  10000 ????		00 eb	    _High_Score3 =	x
     24  10000 ????
     25  10000 ????		00 ea	    _High_Score2 =	w
     26  10000 ????
     27  10000 ????		00 e9	    _High_Score1 =	v
     28  10000 ????
     29  10000 ????		00 e8	    _Score3_Mem =	u
     30  10000 ????
     31  10000 ????		00 e7	    _Score2_Mem =	t
     32  10000 ????
     33  10000 ????		00 e6	    _Score1_Mem =	s
     34  10000 ????
     35  10000 ????		00 de	    _AP_2_Sec_Score_Flip =	k
     36  10000 ????
     37  10000 ????		00 d5	    _Frame_Counter =	b
     38  10000 ????
     39  10000 ????		00 d4	    _Master_Counter =	a
     40  10000 ????
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE e:\Documents\bB\demos\ex_save_high_score.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    rand16     =	z
     10  10000 ????
     11  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     12  10000 ????
     13  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     14  10000 ????
     15  10000 ????		00 ec	    _Bit2_Game_Control =	y
     16  10000 ????
     17  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     18  10000 ????
     19  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     20  10000 ????
     21  10000 ????		00 ec	    _BitOp_01  =	y
     22  10000 ????
     23  10000 ????		00 eb	    _High_Score3 =	x
     24  10000 ????
     25  10000 ????		00 ea	    _High_Score2 =	w
     26  10000 ????
     27  10000 ????		00 e9	    _High_Score1 =	v
     28  10000 ????
     29  10000 ????		00 e8	    _Score3_Mem =	u
     30  10000 ????
     31  10000 ????		00 e7	    _Score2_Mem =	t
     32  10000 ????
     33  10000 ????		00 e6	    _Score1_Mem =	s
     34  10000 ????
     35  10000 ????		00 de	    _AP_2_Sec_Score_Flip =	k
     36  10000 ????
     37  10000 ????		00 d5	    _Frame_Counter =	b
     38  10000 ????
     39  10000 ????		00 d4	    _Master_Counter =	a
     40  10000 ????
------- FILE e:\Documents\bB\demos\ex_save_high_score.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 61 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5					      ifnconst	noscore
    741  f1b5		       a5 97		      lda	scorepointers+1
    742  f1b7							; ldy temp1
    743  f1b7		       85 9c		      sta	temp1
    744  f1b9							; sty scorepointers+1
    745  f1b9
    746  f1b9		       a5 99		      lda	scorepointers+3
    747  f1bb							; ldy temp3
    748  f1bb		       85 9e		      sta	temp3
    749  f1bd							; sty scorepointers+3
    750  f1bd
    751  f1bd
    752  f1bd		       85 2b		      sta	HMCLR
    753  f1bf		       ba		      tsx
    754  f1c0		       86 f6		      stx	stack1
    755  f1c2		       a2 e0		      ldx	#$E0
    756  f1c4		       86 20		      stx	HMP0
    757  f1c6
    758  f1c6		       a5 a3		      LDA	scorecolor
    759  f1c8		       85 06		      STA	COLUP0
    760  f1ca		       85 07		      STA	COLUP1
    761  f1cc				  -	      ifconst	scorefade
    762  f1cc				  -	      STA	stack2
    763  f1cc					      endif
    764  f1cc				  -	      ifconst	pfscore
    765  f1cc				  -	      lda	pfscorecolor
    766  f1cc				  -	      sta	COLUPF
    767  f1cc					      endif
    768  f1cc		       85 02		      sta	WSYNC
    769  f1ce		       a2 00		      ldx	#0
    770  f1d0		       86 1b		      STx	GRP0
    771  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d4
    773  f1d4		       a5 9b		      lda	scorepointers+5
    774  f1d6							; ldy temp5
    775  f1d6		       95 a0		      sta	temp5,x
    776  f1d8							; sty scorepointers+5
    777  f1d8		       a9 ff		      lda	#>scoretable
    778  f1da		       85 97		      sta	scorepointers+1
    779  f1dc		       85 99		      sta	scorepointers+3
    780  f1de		       85 9b		      sta	scorepointers+5
    781  f1e0		       85 9d		      sta	temp2
    782  f1e2		       85 9f		      sta	temp4
    783  f1e4		       85 a1		      sta	temp6
    784  f1e6		       a0 07		      LDY	#7
    785  f1e8		       84 25		      STY	VDELP0
    786  f1ea		       85 10		      STA	RESP0
    787  f1ec		       85 11		      STA	RESP1
    788  f1ee
    789  f1ee
    790  f1ee		       a9 03		      LDA	#$03
    791  f1f0		       85 04		      STA	NUSIZ0
    792  f1f2		       85 05		      STA	NUSIZ1
    793  f1f4		       85 26		      STA	VDELP1
    794  f1f6		       a9 f0		      LDA	#$F0
    795  f1f8		       85 21		      STA	HMP1
    796  f1fa		       b1 96		      lda	(scorepointers),y
    797  f1fc		       85 1b		      sta	GRP0
    798  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f200		       4c 0b f2 	      jmp	beginscore
    800  f203
    801  f203
    802  f203				  -	      if	((<*)>$d4)
    803  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f203					      endif
    805  f203
    806  f203				   loop2
    807  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f207				  -	      ifconst	pfscore
    810  f207				  -	      lda.w	pfscore1
    811  f207				  -	      sta	PF1
    812  f207					      else
    813  f207				  -	      ifconst	scorefade
    814  f207				  -	      sleep	2
    815  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    818  f20b					      endif
    819  f20b					      endif
    820  f20b							; cycle 0
    821  f20b				   beginscore
    822  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f215		       9a		      txs
    828  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f218				  -	      ifconst	scorefade
    830  f218				  -	      lda	stack2
    831  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    833  f21a					      endif
    834  f21a
    835  f21a				  -	      ifconst	pfscore
    836  f21a				  -	      lda	pfscore2
    837  f21a				  -	      sta	PF1
    838  f21a					      else
    839  f21a				  -	      ifconst	scorefade
    840  f21a				  -	      sta	COLUP0
    841  f21a				  -	      sta	COLUP1
    842  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    844  f21d					      endif
    845  f21d					      endif
    846  f21d
    847  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f221		       ba		      tsx
    850  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f228		       88		      dey
    854  f229		       10 d8		      bpl	loop2	;+2 60 180
    855  f22b
    856  f22b		       a6 f6		      ldx	stack1
    857  f22d		       9a		      txs
    858  f22e							; lda scorepointers+1
    859  f22e		       a4 9c		      ldy	temp1
    860  f230							; sta temp1
    861  f230		       84 97		      sty	scorepointers+1
    862  f232
    863  f232		       a9 00		      LDA	#0
    864  f234		       85 0e		      sta	PF1
    865  f236		       85 1b		      STA	GRP0
    866  f238		       85 1c		      STA	GRP1
    867  f23a		       85 25		      STA	VDELP0
    868  f23c		       85 26		      STA	VDELP1	;do we need these
    869  f23e		       85 04		      STA	NUSIZ0
    870  f240		       85 05		      STA	NUSIZ1
    871  f242
    872  f242							; lda scorepointers+3
    873  f242		       a4 9e		      ldy	temp3
    874  f244							; sta temp3
    875  f244		       84 99		      sty	scorepointers+3
    876  f246
    877  f246							; lda scorepointers+5
    878  f246		       a4 a0		      ldy	temp5
    879  f248							; sta temp5
    880  f248		       84 9b		      sty	scorepointers+5
    881  f24a					      endif		;noscore
    882  f24a				  -	      ifconst	readpaddle
    883  f24a				  -	      lda	#%11000010
    884  f24a					      else
    885  f24a				  -	      ifconst	qtcontroller
    886  f24a				  -	      lda	qtcontroller
    887  f24a				  -	      lsr		; bit 0 in carry
    888  f24a				  -	      lda	#4
    889  f24a				  -	      ror		; carry into top of A
    890  f24a					      else
    891  f24a		       a9 02		      lda	#2
    892  f24c					      endif		; qtcontroller
    893  f24c					      endif		; readpaddle
    894  f24c		       85 02		      sta	WSYNC
    895  f24e		       85 01		      sta	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    897  f251				  -	      ifconst	shakescreen
    898  f251				  -doshakescreen
    899  f251				  -	      bit	shakescreen
    900  f251				  -	      bmi	noshakescreen
    901  f251				  -	      sta	WSYNC
    902  f251				  -noshakescreen
    903  f251				  -	      ldx	missile0height
    904  f251				  -	      inx
    905  f251				  -	      rts
    906  f251					      endif
    907  f251
    908  f251							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f251
    910  f251							; playfield drawing routines
    911  f251							; you get a 32x12 bitmapped display in a single color :)
    912  f251							; 0-31 and 0-11
    913  f251
    914  f251				   pfclear		; clears playfield - or fill with pattern
    915  f251				  -	      ifconst	pfres
    916  f251				  -	      ldx	#pfres*pfwidth-1
    917  f251					      else
    918  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f253					      endif
    920  f253				   pfclear_loop
    921  f253					      ifnconst	superchip
    922  f253		       95 a4		      sta	playfield,x
    923  f255				  -	      else
    924  f255				  -	      sta	playfield-128,x
    925  f255					      endif
    926  f255		       ca		      dex
    927  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    929  f259
    930  f259				   setuppointers
    931  f259		       86 9d		      stx	temp2	; store on.off.flip value
    932  f25b		       aa		      tax		; put x-value in x 
    933  f25c		       4a		      lsr
    934  f25d		       4a		      lsr
    935  f25e		       4a		      lsr		; divide x pos by 8 
    936  f25f		       85 9c		      sta	temp1
    937  f261		       98		      tya
    938  f262		       0a		      asl
    939  f263					      if	pfwidth=4
    940  f263		       0a		      asl		; multiply y pos by 4
    941  f264					      endif		; else multiply by 2
    942  f264		       18		      clc
    943  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f267		       a8		      tay		; put the value in y
    945  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f26a		       60		      rts
    947  f26b
    948  f26b				   pfread
    949  f26b							;x=xvalue, y=yvalue
    950  f26b		       20 59 f2 	      jsr	setuppointers
    951  f26e		       bd d3 f2 	      lda	setbyte,x
    952  f271		       39 a4 00 	      and	playfield,y
    953  f274		       5d d3 f2 	      eor	setbyte,x
    954  f277							; beq readzero
    955  f277							; lda #1
    956  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    958  f278
    959  f278				   pfpixel
    960  f278							;x=xvalue, y=yvalue, a=0,1,2
    961  f278		       20 59 f2 	      jsr	setuppointers
    962  f27b
    963  f27b				  -	      ifconst	bankswitch
    964  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f27b				  -	      beq	pixelon_r	; if "on" go to on
    966  f27b				  -	      lsr
    967  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    969  f27b				  -	      eor	setbyte,x
    970  f27b				  -	      ifconst	superchip
    971  f27b				  -	      sta	playfield-128,y
    972  f27b				  -	      else
    973  f27b				  -	      sta	playfield,y
    974  f27b				  -	      endif
    975  f27b				  -	      RETURN
    976  f27b				  -pixelon_r
    977  f27b				  -	      lda	playfield,y
    978  f27b				  -	      ora	setbyte,x
    979  f27b				  -	      ifconst	superchip
    980  f27b				  -	      sta	playfield-128,y
    981  f27b				  -	      else
    982  f27b				  -	      sta	playfield,y
    983  f27b				  -	      endif
    984  f27b				  -	      RETURN
    985  f27b				  -pixeloff_r
    986  f27b				  -	      lda	setbyte,x
    987  f27b				  -	      eor	#$ff
    988  f27b				  -	      and	playfield,y
    989  f27b				  -	      ifconst	superchip
    990  f27b				  -	      sta	playfield-128,y
    991  f27b				  -	      else
    992  f27b				  -	      sta	playfield,y
    993  f27b				  -	      endif
    994  f27b				  -	      RETURN
    995  f27b				  -
    996  f27b					      else
    997  f27b		       4c ac f2 	      jmp	plotpoint
    998  f27e					      endif
    999  f27e
   1000  f27e				   pfhline
   1001  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f27e		       20 59 f2 	      jsr	setuppointers
   1003  f281		       4c 8b f2 	      jmp	noinc
   1004  f284				   keepgoing
   1005  f284		       e8		      inx
   1006  f285		       8a		      txa
   1007  f286		       29 07		      and	#7
   1008  f288		       d0 01		      bne	noinc
   1009  f28a		       c8		      iny
   1010  f28b				   noinc
   1011  f28b		       20 ac f2 	      jsr	plotpoint
   1012  f28e		       e4 9e		      cpx	temp3
   1013  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
   1015  f293
   1016  f293				   pfvline
   1017  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f293		       20 59 f2 	      jsr	setuppointers
   1019  f296		       84 9c		      sty	temp1	; store memory location offset
   1020  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f29a		       a5 9e		      lda	temp3
   1022  f29c		       0a		      asl
   1023  f29d					      if	pfwidth=4
   1024  f29d		       0a		      asl		; multiply by 4
   1025  f29e					      endif		; else multiply by 2
   1026  f29e		       85 9e		      sta	temp3	; store it
   1027  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a0							; x should equal original x value
   1030  f2a0				   keepgoingy
   1031  f2a0		       20 ac f2 	      jsr	plotpoint
   1032  f2a3		       c8		      iny
   1033  f2a4		       c8		      iny
   1034  f2a5					      if	pfwidth=4
   1035  f2a5		       c8		      iny
   1036  f2a6		       c8		      iny
   1037  f2a7					      endif
   1038  f2a7		       c4 9e		      cpy	temp3
   1039  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1041  f2ac
   1042  f2ac				   plotpoint
   1043  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b0		       4a		      lsr
   1046  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2b6		       5d d3 f2 	      eor	setbyte,x
   1049  f2b9				  -	      ifconst	superchip
   1050  f2b9				  -	      sta	playfield-128,y
   1051  f2b9					      else
   1052  f2b9		       99 a4 00 	      sta	playfield,y
   1053  f2bc					      endif
   1054  f2bc		       60		      rts
   1055  f2bd				   pixelon
   1056  f2bd		       b9 a4 00 	      lda	playfield,y
   1057  f2c0		       1d d3 f2 	      ora	setbyte,x
   1058  f2c3				  -	      ifconst	superchip
   1059  f2c3				  -	      sta	playfield-128,y
   1060  f2c3					      else
   1061  f2c3		       99 a4 00 	      sta	playfield,y
   1062  f2c6					      endif
   1063  f2c6		       60		      rts
   1064  f2c7				   pixeloff
   1065  f2c7		       bd d3 f2 	      lda	setbyte,x
   1066  f2ca		       49 ff		      eor	#$ff
   1067  f2cc		       39 a4 00 	      and	playfield,y
   1068  f2cf				  -	      ifconst	superchip
   1069  f2cf				  -	      sta	playfield-128,y
   1070  f2cf					      else
   1071  f2cf		       99 a4 00 	      sta	playfield,y
   1072  f2d2					      endif
   1073  f2d2		       60		      rts
   1074  f2d3
   1075  f2d3				   setbyte
   1076  f2d3					      ifnconst	pfcenter
   1077  f2d3		       80		      .byte.b	$80
   1078  f2d4		       40		      .byte.b	$40
   1079  f2d5		       20		      .byte.b	$20
   1080  f2d6		       10		      .byte.b	$10
   1081  f2d7		       08		      .byte.b	$08
   1082  f2d8		       04		      .byte.b	$04
   1083  f2d9		       02		      .byte.b	$02
   1084  f2da		       01		      .byte.b	$01
   1085  f2db					      endif
   1086  f2db		       01		      .byte.b	$01
   1087  f2dc		       02		      .byte.b	$02
   1088  f2dd		       04		      .byte.b	$04
   1089  f2de		       08		      .byte.b	$08
   1090  f2df		       10		      .byte.b	$10
   1091  f2e0		       20		      .byte.b	$20
   1092  f2e1		       40		      .byte.b	$40
   1093  f2e2		       80		      .byte.b	$80
   1094  f2e3		       80		      .byte.b	$80
   1095  f2e4		       40		      .byte.b	$40
   1096  f2e5		       20		      .byte.b	$20
   1097  f2e6		       10		      .byte.b	$10
   1098  f2e7		       08		      .byte.b	$08
   1099  f2e8		       04		      .byte.b	$04
   1100  f2e9		       02		      .byte.b	$02
   1101  f2ea		       01		      .byte.b	$01
   1102  f2eb		       01		      .byte.b	$01
   1103  f2ec		       02		      .byte.b	$02
   1104  f2ed		       04		      .byte.b	$04
   1105  f2ee		       08		      .byte.b	$08
   1106  f2ef		       10		      .byte.b	$10
   1107  f2f0		       20		      .byte.b	$20
   1108  f2f1		       40		      .byte.b	$40
   1109  f2f2		       80		      .byte.b	$80
   1110  f2f3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f3
   1112  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f3		       d0 13		      bne	notleft
   1114  f2f5							;left
   1115  f2f5				  -	      ifconst	pfres
   1116  f2f5				  -	      ldx	#pfres*4
   1117  f2f5					      else
   1118  f2f5		       a2 30		      ldx	#48
   1119  f2f7					      endif
   1120  f2f7				   leftloop
   1121  f2f7		       b5 a3		      lda	playfield-1,x
   1122  f2f9		       4a		      lsr
   1123  f2fa
   1124  f2fa				  -	      ifconst	superchip
   1125  f2fa				  -	      lda	playfield-2,x
   1126  f2fa				  -	      rol
   1127  f2fa				  -	      sta	playfield-130,x
   1128  f2fa				  -	      lda	playfield-3,x
   1129  f2fa				  -	      ror
   1130  f2fa				  -	      sta	playfield-131,x
   1131  f2fa				  -	      lda	playfield-4,x
   1132  f2fa				  -	      rol
   1133  f2fa				  -	      sta	playfield-132,x
   1134  f2fa				  -	      lda	playfield-1,x
   1135  f2fa				  -	      ror
   1136  f2fa				  -	      sta	playfield-129,x
   1137  f2fa					      else
   1138  f2fa		       36 a2		      rol	playfield-2,x
   1139  f2fc		       76 a1		      ror	playfield-3,x
   1140  f2fe		       36 a0		      rol	playfield-4,x
   1141  f300		       76 a3		      ror	playfield-1,x
   1142  f302					      endif
   1143  f302
   1144  f302		       8a		      txa
   1145  f303		       cb 04		      sbx	#4
   1146  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1148  f308
   1149  f308				   notleft
   1150  f308		       4a		      lsr
   1151  f309		       90 13		      bcc	notright
   1152  f30b							;right
   1153  f30b
   1154  f30b				  -	      ifconst	pfres
   1155  f30b				  -	      ldx	#pfres*4
   1156  f30b					      else
   1157  f30b		       a2 30		      ldx	#48
   1158  f30d					      endif
   1159  f30d				   rightloop
   1160  f30d		       b5 a0		      lda	playfield-4,x
   1161  f30f		       4a		      lsr
   1162  f310				  -	      ifconst	superchip
   1163  f310				  -	      lda	playfield-3,x
   1164  f310				  -	      rol
   1165  f310				  -	      sta	playfield-131,x
   1166  f310				  -	      lda	playfield-2,x
   1167  f310				  -	      ror
   1168  f310				  -	      sta	playfield-130,x
   1169  f310				  -	      lda	playfield-1,x
   1170  f310				  -	      rol
   1171  f310				  -	      sta	playfield-129,x
   1172  f310				  -	      lda	playfield-4,x
   1173  f310				  -	      ror
   1174  f310				  -	      sta	playfield-132,x
   1175  f310					      else
   1176  f310		       36 a1		      rol	playfield-3,x
   1177  f312		       76 a2		      ror	playfield-2,x
   1178  f314		       36 a3		      rol	playfield-1,x
   1179  f316		       76 a0		      ror	playfield-4,x
   1180  f318					      endif
   1181  f318		       8a		      txa
   1182  f319		       cb 04		      sbx	#4
   1183  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1185  f31e
   1186  f31e				   notright
   1187  f31e		       4a		      lsr
   1188  f31f		       90 49		      bcc	notup
   1189  f321							;up
   1190  f321		       4a		      lsr
   1191  f322		       90 02		      bcc	onedecup
   1192  f324		       c6 ef		      dec	playfieldpos
   1193  f326				   onedecup
   1194  f326		       c6 ef		      dec	playfieldpos
   1195  f328		       f0 02		      beq	shiftdown
   1196  f32a		       10 3d		      bpl	noshiftdown2
   1197  f32c				   shiftdown
   1198  f32c				  -	      ifconst	pfrowheight
   1199  f32c				  -	      lda	#pfrowheight
   1200  f32c					      else
   1201  f32c					      ifnconst	pfres
   1202  f32c		       a9 08		      lda	#8
   1203  f32e				  -	      else
   1204  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f32e					      endif
   1206  f32e					      endif
   1207  f32e
   1208  f32e		       85 ef		      sta	playfieldpos
   1209  f330		       a5 a7		      lda	playfield+3
   1210  f332		       85 9f		      sta	temp4
   1211  f334		       a5 a6		      lda	playfield+2
   1212  f336		       85 9e		      sta	temp3
   1213  f338		       a5 a5		      lda	playfield+1
   1214  f33a		       85 9d		      sta	temp2
   1215  f33c		       a5 a4		      lda	playfield
   1216  f33e		       85 9c		      sta	temp1
   1217  f340		       a2 00		      ldx	#0
   1218  f342				   up2
   1219  f342		       b5 a8		      lda	playfield+4,x
   1220  f344				  -	      ifconst	superchip
   1221  f344				  -	      sta	playfield-128,x
   1222  f344				  -	      lda	playfield+5,x
   1223  f344				  -	      sta	playfield-127,x
   1224  f344				  -	      lda	playfield+6,x
   1225  f344				  -	      sta	playfield-126,x
   1226  f344				  -	      lda	playfield+7,x
   1227  f344				  -	      sta	playfield-125,x
   1228  f344					      else
   1229  f344		       95 a4		      sta	playfield,x
   1230  f346		       b5 a9		      lda	playfield+5,x
   1231  f348		       95 a5		      sta	playfield+1,x
   1232  f34a		       b5 aa		      lda	playfield+6,x
   1233  f34c		       95 a6		      sta	playfield+2,x
   1234  f34e		       b5 ab		      lda	playfield+7,x
   1235  f350		       95 a7		      sta	playfield+3,x
   1236  f352					      endif
   1237  f352		       8a		      txa
   1238  f353		       cb fc		      sbx	#252
   1239  f355				  -	      ifconst	pfres
   1240  f355				  -	      cpx	#(pfres-1)*4
   1241  f355					      else
   1242  f355		       e0 2c		      cpx	#44
   1243  f357					      endif
   1244  f357		       d0 e9		      bne	up2
   1245  f359
   1246  f359		       a5 9f		      lda	temp4
   1247  f35b
   1248  f35b				  -	      ifconst	superchip
   1249  f35b				  -	      ifconst	pfres
   1250  f35b				  -	      sta	playfield+pfres*4-129
   1251  f35b				  -	      lda	temp3
   1252  f35b				  -	      sta	playfield+pfres*4-130
   1253  f35b				  -	      lda	temp2
   1254  f35b				  -	      sta	playfield+pfres*4-131
   1255  f35b				  -	      lda	temp1
   1256  f35b				  -	      sta	playfield+pfres*4-132
   1257  f35b				  -	      else
   1258  f35b				  -	      sta	playfield+47-128
   1259  f35b				  -	      lda	temp3
   1260  f35b				  -	      sta	playfield+46-128
   1261  f35b				  -	      lda	temp2
   1262  f35b				  -	      sta	playfield+45-128
   1263  f35b				  -	      lda	temp1
   1264  f35b				  -	      sta	playfield+44-128
   1265  f35b				  -	      endif
   1266  f35b					      else
   1267  f35b				  -	      ifconst	pfres
   1268  f35b				  -	      sta	playfield+pfres*4-1
   1269  f35b				  -	      lda	temp3
   1270  f35b				  -	      sta	playfield+pfres*4-2
   1271  f35b				  -	      lda	temp2
   1272  f35b				  -	      sta	playfield+pfres*4-3
   1273  f35b				  -	      lda	temp1
   1274  f35b				  -	      sta	playfield+pfres*4-4
   1275  f35b					      else
   1276  f35b		       85 d3		      sta	playfield+47
   1277  f35d		       a5 9e		      lda	temp3
   1278  f35f		       85 d2		      sta	playfield+46
   1279  f361		       a5 9d		      lda	temp2
   1280  f363		       85 d1		      sta	playfield+45
   1281  f365		       a5 9c		      lda	temp1
   1282  f367		       85 d0		      sta	playfield+44
   1283  f369					      endif
   1284  f369					      endif
   1285  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1287  f36a
   1288  f36a
   1289  f36a				   notup
   1290  f36a							;down
   1291  f36a		       4a		      lsr
   1292  f36b		       b0 02		      bcs	oneincup
   1293  f36d		       e6 ef		      inc	playfieldpos
   1294  f36f				   oneincup
   1295  f36f		       e6 ef		      inc	playfieldpos
   1296  f371		       a5 ef		      lda	playfieldpos
   1297  f373
   1298  f373				  -	      ifconst	pfrowheight
   1299  f373				  -	      cmp	#pfrowheight+1
   1300  f373					      else
   1301  f373					      ifnconst	pfres
   1302  f373		       c9 09		      cmp	#9
   1303  f375				  -	      else
   1304  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f375					      endif
   1306  f375					      endif
   1307  f375
   1308  f375		       90 3b		      bcc	noshiftdown
   1309  f377		       a9 01		      lda	#1
   1310  f379		       85 ef		      sta	playfieldpos
   1311  f37b
   1312  f37b				  -	      ifconst	pfres
   1313  f37b				  -	      lda	playfield+pfres*4-1
   1314  f37b				  -	      sta	temp4
   1315  f37b				  -	      lda	playfield+pfres*4-2
   1316  f37b				  -	      sta	temp3
   1317  f37b				  -	      lda	playfield+pfres*4-3
   1318  f37b				  -	      sta	temp2
   1319  f37b				  -	      lda	playfield+pfres*4-4
   1320  f37b					      else
   1321  f37b		       a5 d3		      lda	playfield+47
   1322  f37d		       85 9f		      sta	temp4
   1323  f37f		       a5 d2		      lda	playfield+46
   1324  f381		       85 9e		      sta	temp3
   1325  f383		       a5 d1		      lda	playfield+45
   1326  f385		       85 9d		      sta	temp2
   1327  f387		       a5 d0		      lda	playfield+44
   1328  f389					      endif
   1329  f389
   1330  f389		       85 9c		      sta	temp1
   1331  f38b
   1332  f38b				  -	      ifconst	pfres
   1333  f38b				  -	      ldx	#(pfres-1)*4
   1334  f38b					      else
   1335  f38b		       a2 2c		      ldx	#44
   1336  f38d					      endif
   1337  f38d				   down2
   1338  f38d		       b5 a3		      lda	playfield-1,x
   1339  f38f				  -	      ifconst	superchip
   1340  f38f				  -	      sta	playfield-125,x
   1341  f38f				  -	      lda	playfield-2,x
   1342  f38f				  -	      sta	playfield-126,x
   1343  f38f				  -	      lda	playfield-3,x
   1344  f38f				  -	      sta	playfield-127,x
   1345  f38f				  -	      lda	playfield-4,x
   1346  f38f				  -	      sta	playfield-128,x
   1347  f38f					      else
   1348  f38f		       95 a7		      sta	playfield+3,x
   1349  f391		       b5 a2		      lda	playfield-2,x
   1350  f393		       95 a6		      sta	playfield+2,x
   1351  f395		       b5 a1		      lda	playfield-3,x
   1352  f397		       95 a5		      sta	playfield+1,x
   1353  f399		       b5 a0		      lda	playfield-4,x
   1354  f39b		       95 a4		      sta	playfield,x
   1355  f39d					      endif
   1356  f39d		       8a		      txa
   1357  f39e		       cb 04		      sbx	#4
   1358  f3a0		       d0 eb		      bne	down2
   1359  f3a2
   1360  f3a2		       a5 9f		      lda	temp4
   1361  f3a4				  -	      ifconst	superchip
   1362  f3a4				  -	      sta	playfield-125
   1363  f3a4				  -	      lda	temp3
   1364  f3a4				  -	      sta	playfield-126
   1365  f3a4				  -	      lda	temp2
   1366  f3a4				  -	      sta	playfield-127
   1367  f3a4				  -	      lda	temp1
   1368  f3a4				  -	      sta	playfield-128
   1369  f3a4					      else
   1370  f3a4		       85 a7		      sta	playfield+3
   1371  f3a6		       a5 9e		      lda	temp3
   1372  f3a8		       85 a6		      sta	playfield+2
   1373  f3aa		       a5 9d		      lda	temp2
   1374  f3ac		       85 a5		      sta	playfield+1
   1375  f3ae		       a5 9c		      lda	temp1
   1376  f3b0		       85 a4		      sta	playfield
   1377  f3b2					      endif
   1378  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1380  f3b3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b3
   1382  f3b3							;standard routines needed for pretty much all games
   1383  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b3							; repositioning code and score pointer setup moved to overscan
   1385  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b3
   1387  f3b3				   randomize
   1388  f3b3		       a5 a2		      lda	rand
   1389  f3b5		       4a		      lsr
   1390  f3b6					      ifconst	rand16
   1391  f3b6		       26 ed		      rol	rand16
   1392  f3b8					      endif
   1393  f3b8		       90 02		      bcc	noeor
   1394  f3ba		       49 b4		      eor	#$B4
   1395  f3bc				   noeor
   1396  f3bc		       85 a2		      sta	rand
   1397  f3be					      ifconst	rand16
   1398  f3be		       45 ed		      eor	rand16
   1399  f3c0					      endif
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1401  f3c1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c1
   1403  f3c1				   drawscreen
   1404  f3c1				  -	      ifconst	debugscore
   1405  f3c1				  -	      ldx	#14
   1406  f3c1				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c1				  -
   1408  f3c1				  -	      ifconst	mincycles
   1409  f3c1				  -	      lda	mincycles
   1410  f3c1				  -	      cmp	INTIM
   1411  f3c1				  -	      lda	mincycles
   1412  f3c1				  -	      bcc	nochange
   1413  f3c1				  -	      lda	INTIM
   1414  f3c1				  -	      sta	mincycles
   1415  f3c1				  -nochange
   1416  f3c1				  -	      endif
   1417  f3c1				  -
   1418  f3c1				  -			; cmp #$2B
   1419  f3c1				  -			; bcs no_cycles_left
   1420  f3c1				  -	      bmi	cycles_left
   1421  f3c1				  -	      ldx	#64
   1422  f3c1				  -	      eor	#$ff	;make negative
   1423  f3c1				  -cycles_left
   1424  f3c1				  -	      stx	scorecolor
   1425  f3c1				  -	      and	#$7f	; clear sign bit
   1426  f3c1				  -	      tax
   1427  f3c1				  -	      lda	scorebcd,x
   1428  f3c1				  -	      sta	score+2
   1429  f3c1				  -	      lda	scorebcd1,x
   1430  f3c1				  -	      sta	score+1
   1431  f3c1				  -	      jmp	done_debugscore
   1432  f3c1				  -scorebcd
   1433  f3c1				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c1				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c1				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c1				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c1				  -scorebcd1
   1438  f3c1				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c1				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c1				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c1				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c1				  -done_debugscore
   1443  f3c1					      endif
   1444  f3c1
   1445  f3c1				  -	      ifconst	debugcycles
   1446  f3c1				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c1				  -			; cmp #$2B
   1448  f3c1				  -			; BCC overscan
   1449  f3c1				  -	      bmi	overscan
   1450  f3c1				  -	      sta	COLUBK
   1451  f3c1				  -	      bcs	doneoverscan
   1452  f3c1					      endif
   1453  f3c1
   1454  f3c1				   overscan
   1455  f3c1				  -	      ifconst	interlaced
   1456  f3c1				  -	      PHP
   1457  f3c1				  -	      PLA
   1458  f3c1				  -	      EOR	#4	; flip interrupt bit
   1459  f3c1				  -	      PHA
   1460  f3c1				  -	      PLP
   1461  f3c1				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c1				  -	      TAX		; save it for later
   1463  f3c1					      endif
   1464  f3c1
   1465  f3c1				   overscanloop
   1466  f3c1		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3c4		       30 fb		      bmi	overscanloop
   1468  f3c6				   doneoverscan
   1469  f3c6
   1470  f3c6							;do VSYNC
   1471  f3c6
   1472  f3c6				  -	      ifconst	interlaced
   1473  f3c6				  -	      CPX	#4
   1474  f3c6				  -	      BNE	oddframevsync
   1475  f3c6					      endif
   1476  f3c6
   1477  f3c6		       a9 02		      lda	#2
   1478  f3c8		       85 02		      sta	WSYNC
   1479  f3ca		       85 00		      sta	VSYNC
   1480  f3cc		       85 02		      STA	WSYNC
   1481  f3ce		       85 02		      STA	WSYNC
   1482  f3d0		       4a		      lsr
   1483  f3d1		       85 02		      STA	WSYNC
   1484  f3d3		       85 00		      STA	VSYNC
   1485  f3d5		       85 01		      sta	VBLANK
   1486  f3d7					      ifnconst	overscan_time
   1487  f3d7		       a9 a5		      lda	#37+128
   1488  f3d9				  -	      else
   1489  f3d9				  -	      lda	#overscan_time+128
   1490  f3d9					      endif
   1491  f3d9		       8d 96 02 	      sta	TIM64T
   1492  f3dc
   1493  f3dc				  -	      ifconst	interlaced
   1494  f3dc				  -	      jmp	postsync
   1495  f3dc				  -
   1496  f3dc				  -oddframevsync
   1497  f3dc				  -	      sta	WSYNC
   1498  f3dc				  -
   1499  f3dc				  -	      LDA	($80,X)	; 11 waste
   1500  f3dc				  -	      LDA	($80,X)	; 11 waste
   1501  f3dc				  -	      LDA	($80,X)	; 11 waste
   1502  f3dc				  -
   1503  f3dc				  -	      lda	#2
   1504  f3dc				  -	      sta	VSYNC
   1505  f3dc				  -	      sta	WSYNC
   1506  f3dc				  -	      sta	WSYNC
   1507  f3dc				  -	      sta	WSYNC
   1508  f3dc				  -
   1509  f3dc				  -	      LDA	($80,X)	; 11 waste
   1510  f3dc				  -	      LDA	($80,X)	; 11 waste
   1511  f3dc				  -	      LDA	($80,X)	; 11 waste
   1512  f3dc				  -
   1513  f3dc				  -	      lda	#0
   1514  f3dc				  -	      sta	VSYNC
   1515  f3dc				  -	      sta	VBLANK
   1516  f3dc				  -	      ifnconst	overscan_time
   1517  f3dc				  -	      lda	#37+128
   1518  f3dc				  -	      else
   1519  f3dc				  -	      lda	#overscan_time+128
   1520  f3dc				  -	      endif
   1521  f3dc				  -	      sta	TIM64T
   1522  f3dc				  -
   1523  f3dc				  -postsync
   1524  f3dc					      endif
   1525  f3dc
   1526  f3dc				  -	      ifconst	legacy
   1527  f3dc				  -	      if	legacy < 100
   1528  f3dc				  -	      ldx	#4
   1529  f3dc				  -adjustloop
   1530  f3dc				  -	      lda	player0x,x
   1531  f3dc				  -	      sec
   1532  f3dc				  -	      sbc	#14	;?
   1533  f3dc				  -	      sta	player0x,x
   1534  f3dc				  -	      dex
   1535  f3dc				  -	      bpl	adjustloop
   1536  f3dc				  -	      endif
   1537  f3dc					      endif
   1538  f3dc				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3dc				  -	      repeat	($fa-(<*))
   1540  f3dc				  -	      nop
   1541  f3dc				  -	      repend
   1542  f3dc					      endif
   1543  f3dc		       85 02		      sta	WSYNC
   1544  f3de		       a2 04		      ldx	#4
      0  f3e0					      SLEEP	3
      1  f3e0				   .CYCLES    SET	3
      2  f3e0
      3  f3e0				  -	      IF	.CYCLES < 2
      4  f3e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e0				  -	      ERR
      6  f3e0					      ENDIF
      7  f3e0
      8  f3e0					      IF	.CYCLES & 1
      9  f3e0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e0		       04 00		      nop	0
     11  f3e2				  -	      ELSE
     12  f3e2				  -	      bit	VSYNC
     13  f3e2					      ENDIF
     14  f3e2				   .CYCLES    SET	.CYCLES - 3
     15  f3e2					      ENDIF
     16  f3e2
     17  f3e2				  -	      REPEAT	.CYCLES / 2
     18  f3e2				  -	      nop
     19  f3e2					      REPEND
   1546  f3e2				   HorPosLoop		; 5
   1547  f3e2		       b5 80		      lda	player0x,X	;+4 9
   1548  f3e4		       38		      sec		;+2 11
   1549  f3e5				   DivideLoop
   1550  f3e5		       e9 0f		      sbc	#15
   1551  f3e7		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3e9		       95 9c		      sta	temp1,X	;+4 19
   1553  f3eb		       95 10		      sta	RESP0,X	;+4 23
   1554  f3ed		       85 02		      sta	WSYNC
   1555  f3ef		       ca		      dex
   1556  f3f0		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f2							; 4
   1558  f3f2
   1559  f3f2		       a2 04		      ldx	#4
   1560  f3f4		       b4 9c		      ldy	temp1,X
   1561  f3f6		       b9 52 f3 	      lda	repostable-256,Y
   1562  f3f9		       95 20		      sta	HMP0,X	;+14 18
   1563  f3fb
   1564  f3fb		       ca		      dex
   1565  f3fc		       b4 9c		      ldy	temp1,X
   1566  f3fe		       b9 52 f3 	      lda	repostable-256,Y
   1567  f401		       95 20		      sta	HMP0,X	;+14 32
   1568  f403
   1569  f403		       ca		      dex
   1570  f404		       b4 9c		      ldy	temp1,X
   1571  f406		       b9 52 f3 	      lda	repostable-256,Y
   1572  f409		       95 20		      sta	HMP0,X	;+14 46
   1573  f40b
   1574  f40b		       ca		      dex
   1575  f40c		       b4 9c		      ldy	temp1,X
   1576  f40e		       b9 52 f3 	      lda	repostable-256,Y
   1577  f411		       95 20		      sta	HMP0,X	;+14 60
   1578  f413
   1579  f413		       ca		      dex
   1580  f414		       b4 9c		      ldy	temp1,X
   1581  f416		       b9 52 f3 	      lda	repostable-256,Y
   1582  f419		       95 20		      sta	HMP0,X	;+14 74
   1583  f41b
   1584  f41b		       85 02		      sta	WSYNC
   1585  f41d
   1586  f41d		       85 2a		      sta	HMOVE	;+3 3
   1587  f41f
   1588  f41f
   1589  f41f				  -	      ifconst	legacy
   1590  f41f				  -	      if	legacy < 100
   1591  f41f				  -	      ldx	#4
   1592  f41f				  -adjustloop2
   1593  f41f				  -	      lda	player0x,x
   1594  f41f				  -	      clc
   1595  f41f				  -	      adc	#14	;?
   1596  f41f				  -	      sta	player0x,x
   1597  f41f				  -	      dex
   1598  f41f				  -	      bpl	adjustloop2
   1599  f41f				  -	      endif
   1600  f41f					      endif
   1601  f41f
   1602  f41f
   1603  f41f
   1604  f41f
   1605  f41f							;set score pointers
   1606  f41f		       a7 95		      lax	score+2
   1607  f421		       20 52 f4 	      jsr	scorepointerset
   1608  f424		       84 9b		      sty	scorepointers+5
   1609  f426		       86 98		      stx	scorepointers+2
   1610  f428		       a7 94		      lax	score+1
   1611  f42a		       20 52 f4 	      jsr	scorepointerset
   1612  f42d		       84 9a		      sty	scorepointers+4
   1613  f42f		       86 97		      stx	scorepointers+1
   1614  f431		       a7 93		      lax	score
   1615  f433		       20 52 f4 	      jsr	scorepointerset
   1616  f436		       84 99		      sty	scorepointers+3
   1617  f438		       86 96		      stx	scorepointers
   1618  f43a
   1619  f43a				   vblk
   1620  f43a							; run possible vblank bB code
   1621  f43a				  -	      ifconst	vblank_bB_code
   1622  f43a				  -	      jsr	vblank_bB_code
   1623  f43a					      endif
   1624  f43a				   vblk2
   1625  f43a		       ad 84 02 	      LDA	INTIM
   1626  f43d		       30 fb		      bmi	vblk2
   1627  f43f		       4c 34 f0 	      jmp	kernel
   1628  f442
   1629  f442
   1630  f442		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f44b		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f452				   repostable
   1633  f452
   1634  f452				   scorepointerset
   1635  f452		       29 0f		      and	#$0F
   1636  f454		       0a		      asl
   1637  f455		       0a		      asl
   1638  f456		       0a		      asl
   1639  f457		       69 9c		      adc	#<scoretable
   1640  f459		       a8		      tay
   1641  f45a		       8a		      txa
   1642  f45b							; and #$F0
   1643  f45b							; lsr
   1644  f45b		       4b f0		      asr	#$F0
   1645  f45d		       69 9c		      adc	#<scoretable
   1646  f45f		       aa		      tax
   1647  f460		       60		      rts
   1648  f461				   game
   1649  f461				   .
   1650  f461							; 
   1651  f461
   1652  f461				   .
   1653  f461							; 
   1654  f461
   1655  f461				   .
   1656  f461							; 
   1657  f461
   1658  f461				   .
   1659  f461							; 
   1660  f461
   1661  f461				   .
   1662  f461							; 
   1663  f461
   1664  f461				   .
   1665  f461							; 
   1666  f461
   1667  f461				   .
   1668  f461							; 
   1669  f461
   1670  f461				   .
   1671  f461							; 
   1672  f461
   1673  f461				   .
   1674  f461							; 
   1675  f461
   1676  f461				   .
   1677  f461							; 
   1678  f461
   1679  f461				   .
   1680  f461							; 
   1681  f461
   1682  f461				   .
   1683  f461							; 
   1684  f461
   1685  f461				   .
   1686  f461							; 
   1687  f461
   1688  f461				   .
   1689  f461							; 
   1690  f461
   1691  f461				   .
   1692  f461							; 
   1693  f461
   1694  f461				   .
   1695  f461							; 
   1696  f461
   1697  f461				   .
   1698  f461							; 
   1699  f461
   1700  f461				   .
   1701  f461							; 
   1702  f461
   1703  f461				   .
   1704  f461							; 
   1705  f461
   1706  f461				   .
   1707  f461							; 
   1708  f461
   1709  f461				   .
   1710  f461							; 
   1711  f461
   1712  f461				   .
   1713  f461							; 
   1714  f461
   1715  f461				   .
   1716  f461							; 
   1717  f461
   1718  f461				   .
   1719  f461							; 
   1720  f461
   1721  f461				   .
   1722  f461							; 
   1723  f461
   1724  f461				   .
   1725  f461							; 
   1726  f461
   1727  f461				   .
   1728  f461							; 
   1729  f461
   1730  f461				   .
   1731  f461							; 
   1732  f461
   1733  f461				   .
   1734  f461							; 
   1735  f461
   1736  f461				   .
   1737  f461							; 
   1738  f461
   1739  f461				   .
   1740  f461							; 
   1741  f461
   1742  f461				   .
   1743  f461							; 
   1744  f461
   1745  f461				   .
   1746  f461							; 
   1747  f461
   1748  f461				   .
   1749  f461							; 
   1750  f461
   1751  f461				   .
   1752  f461							; 
   1753  f461
   1754  f461				   .
   1755  f461							; 
   1756  f461
   1757  f461				   .
   1758  f461							; 
   1759  f461
   1760  f461				   .
   1761  f461							; 
   1762  f461
   1763  f461				   .
   1764  f461							; 
   1765  f461
   1766  f461				   .
   1767  f461							; 
   1768  f461
   1769  f461				   .
   1770  f461							; 
   1771  f461
   1772  f461				   .
   1773  f461							; 
   1774  f461
   1775  f461				   .
   1776  f461							; 
   1777  f461
   1778  f461				   .
   1779  f461							; 
   1780  f461
   1781  f461				   .
   1782  f461							; 
   1783  f461
   1784  f461				   .
   1785  f461							; 
   1786  f461
   1787  f461				   .
   1788  f461							; 
   1789  f461
   1790  f461				   .
   1791  f461							; 
   1792  f461
   1793  f461				   .
   1794  f461							; 
   1795  f461
   1796  f461				   .
   1797  f461							; 
   1798  f461
   1799  f461				   .
   1800  f461							; 
   1801  f461
   1802  f461				   .
   1803  f461							; 
   1804  f461
   1805  f461				   .
   1806  f461							; 
   1807  f461
   1808  f461				   .
   1809  f461							; 
   1810  f461
   1811  f461				   .
   1812  f461							; 
   1813  f461
   1814  f461				   .
   1815  f461							; 
   1816  f461
   1817  f461				   .
   1818  f461							; 
   1819  f461
   1820  f461				   .
   1821  f461							; 
   1822  f461
   1823  f461				   .
   1824  f461							; 
   1825  f461
   1826  f461				   .
   1827  f461							; 
   1828  f461
   1829  f461				   .L00 		;  dim _Master_Counter  =  a
   1830  f461
   1831  f461				   .L01 		;  dim _Frame_Counter	=  b
   1832  f461
   1833  f461				   .
   1834  f461							; 
   1835  f461
   1836  f461				   .
   1837  f461							; 
   1838  f461
   1839  f461				   .
   1840  f461							; 
   1841  f461
   1842  f461				   .
   1843  f461							; 
   1844  f461
   1845  f461				   .
   1846  f461							; 
   1847  f461
   1848  f461				   .
   1849  f461							; 
   1850  f461
   1851  f461				   .L02 		;  dim _AP_2_Sec_Score_Flip  =  k
   1852  f461
   1853  f461				   .
   1854  f461							; 
   1855  f461
   1856  f461				   .
   1857  f461							; 
   1858  f461
   1859  f461				   .
   1860  f461							; 
   1861  f461
   1862  f461				   .
   1863  f461							; 
   1864  f461
   1865  f461				   .
   1866  f461							; 
   1867  f461
   1868  f461				   .
   1869  f461							; 
   1870  f461
   1871  f461				   .
   1872  f461							; 
   1873  f461
   1874  f461				   .L03 		;  dim _Score1_Mem  =	s
   1875  f461
   1876  f461				   .L04 		;  dim _Score2_Mem  =	t
   1877  f461
   1878  f461				   .L05 		;  dim _Score3_Mem  =	u
   1879  f461
   1880  f461				   .
   1881  f461							; 
   1882  f461
   1883  f461				   .
   1884  f461							; 
   1885  f461
   1886  f461				   .
   1887  f461							; 
   1888  f461
   1889  f461				   .
   1890  f461							; 
   1891  f461
   1892  f461				   .L06 		;  dim _High_Score1  =  v
   1893  f461
   1894  f461				   .L07 		;  dim _High_Score2  =  w
   1895  f461
   1896  f461				   .L08 		;  dim _High_Score3  =  x
   1897  f461
   1898  f461				   .
   1899  f461							; 
   1900  f461
   1901  f461				   .
   1902  f461							; 
   1903  f461
   1904  f461				   .
   1905  f461							; 
   1906  f461
   1907  f461				   .
   1908  f461							; 
   1909  f461
   1910  f461				   .L09 		;  dim _BitOp_01  =  y
   1911  f461
   1912  f461				   .L010		;  dim _Bit0_Reset_Restrainer	=  y
   1913  f461
   1914  f461				   .L011		;  dim _Bit1_FireB_Restrainer	=  y
   1915  f461
   1916  f461				   .L012		;  dim _Bit2_Game_Control  =  y
   1917  f461
   1918  f461				   .L013		;  dim _Bit3_Auto_Play  =  y
   1919  f461
   1920  f461				   .L014		;  dim _Bit6_Swap_Scores  =  y
   1921  f461
   1922  f461				   .
   1923  f461							; 
   1924  f461
   1925  f461				   .
   1926  f461							; 
   1927  f461
   1928  f461				   .
   1929  f461							; 
   1930  f461
   1931  f461				   .
   1932  f461							; 
   1933  f461
   1934  f461				   .L015		;  dim rand16	=  z
   1935  f461
   1936  f461				   .
   1937  f461							; 
   1938  f461
   1939  f461				   .
   1940  f461							; 
   1941  f461
   1942  f461				   .
   1943  f461							; 
   1944  f461
   1945  f461				   .
   1946  f461							; 
   1947  f461
   1948  f461				   .
   1949  f461							; 
   1950  f461
   1951  f461				   .
   1952  f461							; 
   1953  f461
   1954  f461				   .
   1955  f461							; 
   1956  f461
   1957  f461				   .
   1958  f461							; 
   1959  f461
   1960  f461				   .L016		;  dim _sc1  =  score
   1961  f461
   1962  f461				   .L017		;  dim _sc2  =  score + 1
   1963  f461
   1964  f461				   .L018		;  dim _sc3  =  score + 2
   1965  f461
   1966  f461				   .
   1967  f461							; 
   1968  f461
   1969  f461				   .
   1970  f461							; 
   1971  f461
   1972  f461				   .
   1973  f461							; 
   1974  f461
   1975  f461				   .
   1976  f461							; 
   1977  f461
   1978  f461				   .
   1979  f461							; 
   1980  f461
   1981  f461				   .
   1982  f461							; 
   1983  f461
   1984  f461				   .
   1985  f461							; 
   1986  f461
   1987  f461				   .
   1988  f461							; 
   1989  f461
   1990  f461				   .
   1991  f461							; 
   1992  f461
   1993  f461				   .
   1994  f461							; 
   1995  f461
   1996  f461				   .
   1997  f461							; 
   1998  f461
   1999  f461				   .__Start_Restart
   2000  f461							; __Start_Restart
   2001  f461
   2002  f461				   .
   2003  f461							; 
   2004  f461
   2005  f461				   .
   2006  f461							; 
   2007  f461
   2008  f461				   .
   2009  f461							; 
   2010  f461
   2011  f461				   .
   2012  f461							; 
   2013  f461
   2014  f461				   .
   2015  f461							; 
   2016  f461
   2017  f461				   .
   2018  f461							; 
   2019  f461
   2020  f461				   .L019		;  AUDV0  =  0  :  AUDV1  =  0
   2021  f461
   2022  f461		       a9 00		      LDA	#0
   2023  f463		       85 19		      STA	AUDV0
   2024  f465		       85 1a		      STA	AUDV1
   2025  f467				   .
   2026  f467							; 
   2027  f467
   2028  f467				   .
   2029  f467							; 
   2030  f467
   2031  f467				   .
   2032  f467							; 
   2033  f467
   2034  f467				   .
   2035  f467							; 
   2036  f467
   2037  f467				   .
   2038  f467							; 
   2039  f467
   2040  f467				   .
   2041  f467							; 
   2042  f467
   2043  f467				   .
   2044  f467							; 
   2045  f467
   2046  f467				   .
   2047  f467							; 
   2048  f467
   2049  f467				   .
   2050  f467							; 
   2051  f467
   2052  f467				   .
   2053  f467							; 
   2054  f467
   2055  f467				   .
   2056  f467							; 
   2057  f467
   2058  f467				   .L020		;  asm
   2059  f467
   2060  f467		       a9 00		      LDA	#0
   2061  f469
   2062  f469		       85 d4		      STA	a
   2063  f46b
   2064  f46b		       85 d5		      STA	b
   2065  f46d
   2066  f46d		       85 d6		      STA	c
   2067  f46f
   2068  f46f		       85 d7		      STA	d
   2069  f471
   2070  f471		       85 d8		      STA	e
   2071  f473
   2072  f473		       85 d9		      STA	f
   2073  f475
   2074  f475		       85 da		      STA	g
   2075  f477
   2076  f477		       85 db		      STA	h
   2077  f479
   2078  f479		       85 dc		      STA	i
   2079  f47b
   2080  f47b		       85 dd		      STA	j
   2081  f47d
   2082  f47d		       85 de		      STA	k
   2083  f47f
   2084  f47f		       85 df		      STA	l
   2085  f481
   2086  f481		       85 e0		      STA	m
   2087  f483
   2088  f483		       85 e1		      STA	n
   2089  f485
   2090  f485		       85 e2		      STA	o
   2091  f487
   2092  f487		       85 e3		      STA	p
   2093  f489
   2094  f489		       85 e4		      STA	q
   2095  f48b
   2096  f48b		       85 e5		      STA	r
   2097  f48d
   2098  f48d		       85 e6		      STA	s
   2099  f48f
   2100  f48f		       85 e7		      STA	t
   2101  f491
   2102  f491		       85 e8		      STA	u
   2103  f493
   2104  f493				   .
   2105  f493							; 
   2106  f493
   2107  f493				   .
   2108  f493							; 
   2109  f493
   2110  f493				   .
   2111  f493							; 
   2112  f493
   2113  f493				   .
   2114  f493							; 
   2115  f493
   2116  f493				   .
   2117  f493							; 
   2118  f493
   2119  f493				   .
   2120  f493							; 
   2121  f493
   2122  f493				   .
   2123  f493							; 
   2124  f493
   2125  f493				   .
   2126  f493							; 
   2127  f493
   2128  f493				   .
   2129  f493							; 
   2130  f493
   2131  f493				   .L021		;  _BitOp_01  =  _BitOp_01  &	%00000100
   2132  f493
   2133  f493		       a5 ec		      LDA	_BitOp_01
   2134  f495		       29 04		      AND	#%00000100
   2135  f497		       85 ec		      STA	_BitOp_01
   2136  f499				   .
   2137  f499							; 
   2138  f499
   2139  f499				   .
   2140  f499							; 
   2141  f499
   2142  f499				   .
   2143  f499							; 
   2144  f499
   2145  f499				   .
   2146  f499							; 
   2147  f499
   2148  f499				   .
   2149  f499							; 
   2150  f499
   2151  f499				   .
   2152  f499							; 
   2153  f499
   2154  f499				   .
   2155  f499							; 
   2156  f499
   2157  f499				   .
   2158  f499							; 
   2159  f499
   2160  f499				   .
   2161  f499							; 
   2162  f499
   2163  f499				   .L022		;  if _Bit2_Game_Control{2} then goto __Main_Loop_Setup
   2164  f499
   2165  f499		       a5 ec		      LDA	_Bit2_Game_Control
   2166  f49b		       29 04		      AND	#4
   2167  f49d		       f0 03		      BEQ	.skipL022
   2168  f49f				   .condpart0
   2169  f49f		       4c 35 f5 	      jmp	.__Main_Loop_Setup
   2170  f4a2
   2171  f4a2				   .skipL022
   2172  f4a2				   .
   2173  f4a2							; 
   2174  f4a2
   2175  f4a2				   .
   2176  f4a2							; 
   2177  f4a2
   2178  f4a2				   .
   2179  f4a2							; 
   2180  f4a2
   2181  f4a2				   .
   2182  f4a2							; 
   2183  f4a2
   2184  f4a2				   .
   2185  f4a2							; 
   2186  f4a2
   2187  f4a2				   .
   2188  f4a2							; 
   2189  f4a2
   2190  f4a2				   .
   2191  f4a2							; 
   2192  f4a2
   2193  f4a2				   .
   2194  f4a2							; 
   2195  f4a2
   2196  f4a2				   .
   2197  f4a2							; 
   2198  f4a2
   2199  f4a2				   .
   2200  f4a2							; 
   2201  f4a2
   2202  f4a2				   .
   2203  f4a2							; 
   2204  f4a2
   2205  f4a2				   .__Setup_Title_Screen
   2206  f4a2							; __Setup_Title_Screen
   2207  f4a2
   2208  f4a2				   .
   2209  f4a2							; 
   2210  f4a2
   2211  f4a2				   .
   2212  f4a2							; 
   2213  f4a2
   2214  f4a2				   .
   2215  f4a2							; 
   2216  f4a2
   2217  f4a2				   .
   2218  f4a2							; 
   2219  f4a2
   2220  f4a2				   .
   2221  f4a2							; 
   2222  f4a2
   2223  f4a2				   .
   2224  f4a2							; 
   2225  f4a2
   2226  f4a2				   .L023		;  scorecolor	=  0
   2227  f4a2
   2228  f4a2		       a9 00		      LDA	#0
   2229  f4a4		       85 a3		      STA	scorecolor
   2230  f4a6				   .
   2231  f4a6							; 
   2232  f4a6
   2233  f4a6				   .
   2234  f4a6							; 
   2235  f4a6
   2236  f4a6				   .
   2237  f4a6							; 
   2238  f4a6
   2239  f4a6				   .
   2240  f4a6							; 
   2241  f4a6
   2242  f4a6				   .
   2243  f4a6							; 
   2244  f4a6
   2245  f4a6				   .
   2246  f4a6							; 
   2247  f4a6
   2248  f4a6				   .L024		;  COLUBK  =  0
   2249  f4a6
   2250  f4a6		       a9 00		      LDA	#0
   2251  f4a8		       85 09		      STA	COLUBK
   2252  f4aa				   .
   2253  f4aa							; 
   2254  f4aa
   2255  f4aa				   .
   2256  f4aa							; 
   2257  f4aa
   2258  f4aa				   .
   2259  f4aa							; 
   2260  f4aa
   2261  f4aa				   .
   2262  f4aa							; 
   2263  f4aa
   2264  f4aa				   .
   2265  f4aa							; 
   2266  f4aa
   2267  f4aa				   .
   2268  f4aa							; 
   2269  f4aa
   2270  f4aa				   .
   2271  f4aa							; 
   2272  f4aa
   2273  f4aa				   .
   2274  f4aa							; 
   2275  f4aa
   2276  f4aa				   .
   2277  f4aa							; 
   2278  f4aa
   2279  f4aa				   .
   2280  f4aa							; 
   2281  f4aa
   2282  f4aa				   .
   2283  f4aa							; 
   2284  f4aa
   2285  f4aa				   .L025		;  _Bit0_Reset_Restrainer{0}  =  1
   2286  f4aa
   2287  f4aa		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2288  f4ac		       09 01		      ORA	#1
   2289  f4ae		       85 ec		      STA	_Bit0_Reset_Restrainer
   2290  f4b0				   .
   2291  f4b0							; 
   2292  f4b0
   2293  f4b0				   .
   2294  f4b0							; 
   2295  f4b0
   2296  f4b0				   .
   2297  f4b0							; 
   2298  f4b0
   2299  f4b0				   .
   2300  f4b0							; 
   2301  f4b0
   2302  f4b0				   .
   2303  f4b0							; 
   2304  f4b0
   2305  f4b0				   .
   2306  f4b0							; 
   2307  f4b0
   2308  f4b0				   .L026		;  playfield:
   2309  f4b0
   2310  f4b0				  -	      ifconst	pfres
   2311  f4b0				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2312  f4b0					      else
   2313  f4b0		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2314  f4b2					      endif
   2315  f4b2		       4c e1 f4 	      jmp	pflabel0
   2316  f4b5				   PF_data0
   2317  f4b5		       7e bf		      .byte.b	%01111110, %10111111
   2318  f4b7					      if	(pfwidth>2)
   2319  f4b7		       ff 7d		      .byte.b	%11111111, %01111101
   2320  f4b9					      endif
   2321  f4b9		       60 b3		      .byte.b	%01100000, %10110011
   2322  f4bb					      if	(pfwidth>2)
   2323  f4bb		       99 0d		      .byte.b	%10011001, %00001101
   2324  f4bd					      endif
   2325  f4bd		       6e bf		      .byte.b	%01101110, %10111111
   2326  f4bf					      if	(pfwidth>2)
   2327  f4bf		       99 3d		      .byte.b	%10011001, %00111101
   2328  f4c1					      endif
   2329  f4c1		       66 b3		      .byte.b	%01100110, %10110011
   2330  f4c3					      if	(pfwidth>2)
   2331  f4c3		       99 0d		      .byte.b	%10011001, %00001101
   2332  f4c5					      endif
   2333  f4c5		       7e b3		      .byte.b	%01111110, %10110011
   2334  f4c7					      if	(pfwidth>2)
   2335  f4c7		       99 7d		      .byte.b	%10011001, %01111101
   2336  f4c9					      endif
   2337  f4c9		       00 00		      .byte.b	%00000000, %00000000
   2338  f4cb					      if	(pfwidth>2)
   2339  f4cb		       00 00		      .byte.b	%00000000, %00000000
   2340  f4cd					      endif
   2341  f4cd		       3f f6		      .byte.b	%00111111, %11110110
   2342  f4cf					      if	(pfwidth>2)
   2343  f4cf		       d8 3e		      .byte.b	%11011000, %00111110
   2344  f4d1					      endif
   2345  f4d1		       0c c6		      .byte.b	%00001100, %11000110
   2346  f4d3					      if	(pfwidth>2)
   2347  f4d3		       18 06		      .byte.b	%00011000, %00000110
   2348  f4d5					      endif
   2349  f4d5		       0c c6		      .byte.b	%00001100, %11000110
   2350  f4d7					      if	(pfwidth>2)
   2351  f4d7		       18 1e		      .byte.b	%00011000, %00011110
   2352  f4d9					      endif
   2353  f4d9		       0c c6		      .byte.b	%00001100, %11000110
   2354  f4db					      if	(pfwidth>2)
   2355  f4db		       18 06		      .byte.b	%00011000, %00000110
   2356  f4dd					      endif
   2357  f4dd		       0c c6		      .byte.b	%00001100, %11000110
   2358  f4df					      if	(pfwidth>2)
   2359  f4df		       1f 3e		      .byte.b	%00011111, %00111110
   2360  f4e1					      endif
   2361  f4e1				   pflabel0
   2362  f4e1		       bd b5 f4 	      lda	PF_data0,x
   2363  f4e4		       95 a4		      sta	playfield,x
   2364  f4e6		       ca		      dex
   2365  f4e7		       10 f8		      bpl	pflabel0
   2366  f4e9				   .
   2367  f4e9							; 
   2368  f4e9
   2369  f4e9				   .
   2370  f4e9							; 
   2371  f4e9
   2372  f4e9				   .
   2373  f4e9							; 
   2374  f4e9
   2375  f4e9				   .
   2376  f4e9							; 
   2377  f4e9
   2378  f4e9				   .
   2379  f4e9							; 
   2380  f4e9
   2381  f4e9				   .
   2382  f4e9							; 
   2383  f4e9
   2384  f4e9				   .
   2385  f4e9							; 
   2386  f4e9
   2387  f4e9				   .
   2388  f4e9							; 
   2389  f4e9
   2390  f4e9				   .
   2391  f4e9							; 
   2392  f4e9
   2393  f4e9				   .
   2394  f4e9							; 
   2395  f4e9
   2396  f4e9				   .
   2397  f4e9							; 
   2398  f4e9
   2399  f4e9				   .__Title_Screen_Loop
   2400  f4e9							; __Title_Screen_Loop
   2401  f4e9
   2402  f4e9				   .
   2403  f4e9							; 
   2404  f4e9
   2405  f4e9				   .
   2406  f4e9							; 
   2407  f4e9
   2408  f4e9				   .
   2409  f4e9							; 
   2410  f4e9
   2411  f4e9				   .
   2412  f4e9							; 
   2413  f4e9
   2414  f4e9				   .
   2415  f4e9							; 
   2416  f4e9
   2417  f4e9				   .
   2418  f4e9							; 
   2419  f4e9
   2420  f4e9				   .
   2421  f4e9							; 
   2422  f4e9
   2423  f4e9				   .L027		;  COLUPF  =  $2C
   2424  f4e9
   2425  f4e9		       a9 2c		      LDA	#$2C
   2426  f4eb		       85 08		      STA	COLUPF
   2427  f4ed				   .
   2428  f4ed							; 
   2429  f4ed
   2430  f4ed				   .
   2431  f4ed							; 
   2432  f4ed
   2433  f4ed				   .
   2434  f4ed							; 
   2435  f4ed
   2436  f4ed				   .
   2437  f4ed							; 
   2438  f4ed
   2439  f4ed				   .
   2440  f4ed							; 
   2441  f4ed
   2442  f4ed				   .
   2443  f4ed							; 
   2444  f4ed
   2445  f4ed				   .
   2446  f4ed							; 
   2447  f4ed
   2448  f4ed				   .
   2449  f4ed							; 
   2450  f4ed
   2451  f4ed				   .
   2452  f4ed							; 
   2453  f4ed
   2454  f4ed				   .
   2455  f4ed							; 
   2456  f4ed
   2457  f4ed				   .
   2458  f4ed							; 
   2459  f4ed
   2460  f4ed				   .
   2461  f4ed							; 
   2462  f4ed
   2463  f4ed				   .
   2464  f4ed							; 
   2465  f4ed
   2466  f4ed				   .L028		;  _Master_Counter  =	_Master_Counter  +  1
   2467  f4ed
   2468  f4ed		       e6 d4		      INC	_Master_Counter
   2469  f4ef				   .
   2470  f4ef							; 
   2471  f4ef
   2472  f4ef				   .
   2473  f4ef							; 
   2474  f4ef
   2475  f4ef				   .
   2476  f4ef							; 
   2477  f4ef
   2478  f4ef				   .
   2479  f4ef							; 
   2480  f4ef
   2481  f4ef				   .L029		;  if _Master_Counter	<  60 then goto __TS_AP_Skip
   2482  f4ef
   2483  f4ef		       a5 d4		      LDA	_Master_Counter
   2484  f4f1		       c9 3c		      CMP	#60
   2485  f4f3		       b0 03		      BCS	.skipL029
   2486  f4f5				   .condpart1
   2487  f4f5		       4c 0d f5 	      jmp	.__TS_AP_Skip
   2488  f4f8
   2489  f4f8				   .skipL029
   2490  f4f8				   .
   2491  f4f8							; 
   2492  f4f8
   2493  f4f8				   .
   2494  f4f8							; 
   2495  f4f8
   2496  f4f8				   .
   2497  f4f8							; 
   2498  f4f8
   2499  f4f8				   .
   2500  f4f8							; 
   2501  f4f8
   2502  f4f8				   .L030		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2503  f4f8
   2504  f4f8		       e6 d5		      INC	_Frame_Counter
   2505  f4fa		       a9 00		      LDA	#0
   2506  f4fc		       85 d4		      STA	_Master_Counter
   2507  f4fe				   .
   2508  f4fe							; 
   2509  f4fe
   2510  f4fe				   .
   2511  f4fe							; 
   2512  f4fe
   2513  f4fe				   .
   2514  f4fe							; 
   2515  f4fe
   2516  f4fe				   .
   2517  f4fe							; 
   2518  f4fe
   2519  f4fe				   .
   2520  f4fe							; 
   2521  f4fe
   2522  f4fe				   .
   2523  f4fe							; 
   2524  f4fe
   2525  f4fe				   .
   2526  f4fe							; 
   2527  f4fe
   2528  f4fe				   .L031		;  if _Frame_Counter  >  9 then _Bit3_Auto_Play{3}  =	1  :  goto __Main_Loop_Setup
   2529  f4fe
   2530  f4fe		       a9 09		      LDA	#9
   2531  f500		       c5 d5		      CMP	_Frame_Counter
   2532  f502		       b0 09		      BCS	.skipL031
   2533  f504				   .condpart2
   2534  f504		       a5 ec		      LDA	_Bit3_Auto_Play
   2535  f506		       09 08		      ORA	#8
   2536  f508		       85 ec		      STA	_Bit3_Auto_Play
   2537  f50a		       4c 35 f5 	      jmp	.__Main_Loop_Setup
   2538  f50d
   2539  f50d				   .skipL031
   2540  f50d				   .
   2541  f50d							; 
   2542  f50d
   2543  f50d				   .__TS_AP_Skip
   2544  f50d							; __TS_AP_Skip
   2545  f50d
   2546  f50d				   .
   2547  f50d							; 
   2548  f50d
   2549  f50d				   .
   2550  f50d							; 
   2551  f50d
   2552  f50d				   .
   2553  f50d							; 
   2554  f50d
   2555  f50d				   .
   2556  f50d							; 
   2557  f50d
   2558  f50d				   .
   2559  f50d							; 
   2560  f50d
   2561  f50d				   .
   2562  f50d							; 
   2563  f50d
   2564  f50d				   .
   2565  f50d							; 
   2566  f50d
   2567  f50d				   .L032		;  drawscreen
   2568  f50d
   2569  f50d		       20 c1 f3 	      jsr	drawscreen
   2570  f510				   .
   2571  f510							; 
   2572  f510
   2573  f510				   .
   2574  f510							; 
   2575  f510
   2576  f510				   .
   2577  f510							; 
   2578  f510
   2579  f510				   .
   2580  f510							; 
   2581  f510
   2582  f510				   .
   2583  f510							; 
   2584  f510
   2585  f510				   .
   2586  f510							; 
   2587  f510
   2588  f510				   .
   2589  f510							; 
   2590  f510
   2591  f510				   .
   2592  f510							; 
   2593  f510
   2594  f510				   .
   2595  f510							; 
   2596  f510
   2597  f510				   .
   2598  f510							; 
   2599  f510
   2600  f510				   .
   2601  f510							; 
   2602  f510
   2603  f510				   .
   2604  f510							; 
   2605  f510
   2606  f510				   .
   2607  f510							; 
   2608  f510
   2609  f510				   .
   2610  f510							; 
   2611  f510
   2612  f510				   .L033		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
   2613  f510
   2614  f510		       a9 01		      lda	#1
   2615  f512		       2c 82 02 	      bit	SWCHB
   2616  f515		       f0 0d		      BEQ	.skipL033
   2617  f517				   .condpart3
   2618  f517		       24 0c		      bit	INPT4
   2619  f519		       10 09		      BPL	.skip3then
   2620  f51b				   .condpart4
   2621  f51b		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2622  f51d		       29 fe		      AND	#254
   2623  f51f		       85 ec		      STA	_Bit0_Reset_Restrainer
   2624  f521		       4c e9 f4 	      jmp	.__Title_Screen_Loop
   2625  f524
   2626  f524				   .skip3then
   2627  f524				   .skipL033
   2628  f524				   .
   2629  f524							; 
   2630  f524
   2631  f524				   .
   2632  f524							; 
   2633  f524
   2634  f524				   .
   2635  f524							; 
   2636  f524
   2637  f524				   .
   2638  f524							; 
   2639  f524
   2640  f524				   .
   2641  f524							; 
   2642  f524
   2643  f524				   .L034		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   2644  f524
   2645  f524		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2646  f526		       4a		      LSR
   2647  f527		       90 03		      BCC	.skipL034
   2648  f529				   .condpart5
   2649  f529		       4c e9 f4 	      jmp	.__Title_Screen_Loop
   2650  f52c
   2651  f52c				   .skipL034
   2652  f52c				   .
   2653  f52c							; 
   2654  f52c
   2655  f52c				   .
   2656  f52c							; 
   2657  f52c
   2658  f52c				   .
   2659  f52c							; 
   2660  f52c
   2661  f52c				   .
   2662  f52c							; 
   2663  f52c
   2664  f52c				   .L035		;  _Bit2_Game_Control{2}  =  1
   2665  f52c
   2666  f52c		       a5 ec		      LDA	_Bit2_Game_Control
   2667  f52e		       09 04		      ORA	#4
   2668  f530		       85 ec		      STA	_Bit2_Game_Control
   2669  f532				   .
   2670  f532							; 
   2671  f532
   2672  f532				   .
   2673  f532							; 
   2674  f532
   2675  f532				   .
   2676  f532							; 
   2677  f532
   2678  f532				   .
   2679  f532							; 
   2680  f532
   2681  f532				   .L036		;  goto __Start_Restart
   2682  f532
   2683  f532		       4c 61 f4 	      jmp	.__Start_Restart
   2684  f535
   2685  f535				   .
   2686  f535							; 
   2687  f535
   2688  f535				   .
   2689  f535							; 
   2690  f535
   2691  f535				   .
   2692  f535							; 
   2693  f535
   2694  f535				   .
   2695  f535							; 
   2696  f535
   2697  f535				   .
   2698  f535							; 
   2699  f535
   2700  f535				   .
   2701  f535							; 
   2702  f535
   2703  f535				   .
   2704  f535							; 
   2705  f535
   2706  f535				   .
   2707  f535							; 
   2708  f535
   2709  f535				   .
   2710  f535							; 
   2711  f535
   2712  f535				   .
   2713  f535							; 
   2714  f535
   2715  f535				   .
   2716  f535							; 
   2717  f535
   2718  f535				   .__Main_Loop_Setup
   2719  f535							; __Main_Loop_Setup
   2720  f535
   2721  f535				   .
   2722  f535							; 
   2723  f535
   2724  f535				   .
   2725  f535							; 
   2726  f535
   2727  f535				   .
   2728  f535							; 
   2729  f535
   2730  f535				   .
   2731  f535							; 
   2732  f535
   2733  f535				   .
   2734  f535							; 
   2735  f535
   2736  f535				   .
   2737  f535							; 
   2738  f535
   2739  f535				   .
   2740  f535							; 
   2741  f535
   2742  f535				   .
   2743  f535							; 
   2744  f535
   2745  f535				   .
   2746  f535							; 
   2747  f535
   2748  f535				   .
   2749  f535							; 
   2750  f535
   2751  f535				   .L037		;  _Bit2_Game_Control{2}  =  0
   2752  f535
   2753  f535		       a5 ec		      LDA	_Bit2_Game_Control
   2754  f537		       29 fb		      AND	#251
   2755  f539		       85 ec		      STA	_Bit2_Game_Control
   2756  f53b				   .
   2757  f53b							; 
   2758  f53b
   2759  f53b				   .
   2760  f53b							; 
   2761  f53b
   2762  f53b				   .
   2763  f53b							; 
   2764  f53b
   2765  f53b				   .
   2766  f53b							; 
   2767  f53b
   2768  f53b				   .
   2769  f53b							; 
   2770  f53b
   2771  f53b				   .
   2772  f53b							; 
   2773  f53b
   2774  f53b				   .
   2775  f53b							; 
   2776  f53b
   2777  f53b				   .
   2778  f53b							; 
   2779  f53b
   2780  f53b				   .
   2781  f53b							; 
   2782  f53b
   2783  f53b				   .
   2784  f53b							; 
   2785  f53b
   2786  f53b				   .
   2787  f53b							; 
   2788  f53b
   2789  f53b				   .
   2790  f53b							; 
   2791  f53b
   2792  f53b				   .L038		;  _Bit0_Reset_Restrainer{0}  =  1
   2793  f53b
   2794  f53b		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2795  f53d		       09 01		      ORA	#1
   2796  f53f		       85 ec		      STA	_Bit0_Reset_Restrainer
   2797  f541				   .
   2798  f541							; 
   2799  f541
   2800  f541				   .
   2801  f541							; 
   2802  f541
   2803  f541				   .
   2804  f541							; 
   2805  f541
   2806  f541				   .
   2807  f541							; 
   2808  f541
   2809  f541				   .
   2810  f541							; 
   2811  f541
   2812  f541				   .
   2813  f541							; 
   2814  f541
   2815  f541				   .
   2816  f541							; 
   2817  f541
   2818  f541				   .
   2819  f541							; 
   2820  f541
   2821  f541				   .
   2822  f541							; 
   2823  f541
   2824  f541				   .
   2825  f541							; 
   2826  f541
   2827  f541				   .
   2828  f541							; 
   2829  f541
   2830  f541				   .
   2831  f541							; 
   2832  f541
   2833  f541				   .L039		;  _Bit1_FireB_Restrainer{1}  =  1
   2834  f541
   2835  f541		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   2836  f543		       09 02		      ORA	#2
   2837  f545		       85 ec		      STA	_Bit1_FireB_Restrainer
   2838  f547				   .
   2839  f547							; 
   2840  f547
   2841  f547				   .
   2842  f547							; 
   2843  f547
   2844  f547				   .
   2845  f547							; 
   2846  f547
   2847  f547				   .
   2848  f547							; 
   2849  f547
   2850  f547				   .
   2851  f547							; 
   2852  f547
   2853  f547				   .
   2854  f547							; 
   2855  f547
   2856  f547				   .L040		;  COLUBK  =  $80
   2857  f547
   2858  f547		       a9 80		      LDA	#$80
   2859  f549		       85 09		      STA	COLUBK
   2860  f54b				   .
   2861  f54b							; 
   2862  f54b
   2863  f54b				   .
   2864  f54b							; 
   2865  f54b
   2866  f54b				   .
   2867  f54b							; 
   2868  f54b
   2869  f54b				   .
   2870  f54b							; 
   2871  f54b
   2872  f54b				   .
   2873  f54b							; 
   2874  f54b
   2875  f54b				   .
   2876  f54b							; 
   2877  f54b
   2878  f54b				   .L041		;  scorecolor	=  $AE
   2879  f54b
   2880  f54b		       a9 ae		      LDA	#$AE
   2881  f54d		       85 a3		      STA	scorecolor
   2882  f54f				   .
   2883  f54f							; 
   2884  f54f
   2885  f54f				   .
   2886  f54f							; 
   2887  f54f
   2888  f54f				   .
   2889  f54f							; 
   2890  f54f
   2891  f54f				   .
   2892  f54f							; 
   2893  f54f
   2894  f54f				   .
   2895  f54f							; 
   2896  f54f
   2897  f54f				   .
   2898  f54f							; 
   2899  f54f
   2900  f54f				   .L042		;  playfield:
   2901  f54f
   2902  f54f				  -	      ifconst	pfres
   2903  f54f				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2904  f54f					      else
   2905  f54f		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2906  f551					      endif
   2907  f551		       4c 80 f5 	      jmp	pflabel1
   2908  f554				   PF_data1
   2909  f554		       00 00		      .byte.b	%00000000, %00000000
   2910  f556					      if	(pfwidth>2)
   2911  f556		       00 00		      .byte.b	%00000000, %00000000
   2912  f558					      endif
   2913  f558		       00 00		      .byte.b	%00000000, %00000000
   2914  f55a					      if	(pfwidth>2)
   2915  f55a		       00 00		      .byte.b	%00000000, %00000000
   2916  f55c					      endif
   2917  f55c		       00 00		      .byte.b	%00000000, %00000000
   2918  f55e					      if	(pfwidth>2)
   2919  f55e		       00 00		      .byte.b	%00000000, %00000000
   2920  f560					      endif
   2921  f560		       7e bf		      .byte.b	%01111110, %10111111
   2922  f562					      if	(pfwidth>2)
   2923  f562		       ff 7d		      .byte.b	%11111111, %01111101
   2924  f564					      endif
   2925  f564		       60 b3		      .byte.b	%01100000, %10110011
   2926  f566					      if	(pfwidth>2)
   2927  f566		       99 0d		      .byte.b	%10011001, %00001101
   2928  f568					      endif
   2929  f568		       6e bf		      .byte.b	%01101110, %10111111
   2930  f56a					      if	(pfwidth>2)
   2931  f56a		       99 3d		      .byte.b	%10011001, %00111101
   2932  f56c					      endif
   2933  f56c		       66 b3		      .byte.b	%01100110, %10110011
   2934  f56e					      if	(pfwidth>2)
   2935  f56e		       99 0d		      .byte.b	%10011001, %00001101
   2936  f570					      endif
   2937  f570		       7e b3		      .byte.b	%01111110, %10110011
   2938  f572					      if	(pfwidth>2)
   2939  f572		       99 7d		      .byte.b	%10011001, %01111101
   2940  f574					      endif
   2941  f574		       00 00		      .byte.b	%00000000, %00000000
   2942  f576					      if	(pfwidth>2)
   2943  f576		       00 00		      .byte.b	%00000000, %00000000
   2944  f578					      endif
   2945  f578		       00 00		      .byte.b	%00000000, %00000000
   2946  f57a					      if	(pfwidth>2)
   2947  f57a		       00 00		      .byte.b	%00000000, %00000000
   2948  f57c					      endif
   2949  f57c		       00 00		      .byte.b	%00000000, %00000000
   2950  f57e					      if	(pfwidth>2)
   2951  f57e		       00 00		      .byte.b	%00000000, %00000000
   2952  f580					      endif
   2953  f580				   pflabel1
   2954  f580		       bd 54 f5 	      lda	PF_data1,x
   2955  f583		       95 a4		      sta	playfield,x
   2956  f585		       ca		      dex
   2957  f586		       10 f8		      bpl	pflabel1
   2958  f588				   .
   2959  f588							; 
   2960  f588
   2961  f588				   .
   2962  f588							; 
   2963  f588
   2964  f588				   .
   2965  f588							; 
   2966  f588
   2967  f588				   .
   2968  f588							; 
   2969  f588
   2970  f588				   .
   2971  f588							; 
   2972  f588
   2973  f588				   .
   2974  f588							; 
   2975  f588
   2976  f588				   .
   2977  f588							; 
   2978  f588
   2979  f588				   .
   2980  f588							; 
   2981  f588
   2982  f588				   .
   2983  f588							; 
   2984  f588
   2985  f588				   .L043		;  if !_Bit3_Auto_Play{3} then score  =  0  :	goto __AP_Skip_AP_Setup
   2986  f588
   2987  f588		       a5 ec		      LDA	_Bit3_Auto_Play
   2988  f58a		       29 08		      AND	#8
   2989  f58c		       d0 0f		      BNE	.skipL043
   2990  f58e				   .condpart6
   2991  f58e		       a9 00		      LDA	#$00
   2992  f590		       85 95		      STA	score+2
   2993  f592		       a9 00		      LDA	#$00
   2994  f594		       85 94		      STA	score+1
   2995  f596		       a9 00		      LDA	#$00
   2996  f598		       85 93		      STA	score
   2997  f59a		       4c f2 f5 	      jmp	.__AP_Skip_AP_Setup
   2998  f59d
   2999  f59d				   .skipL043
   3000  f59d				   .
   3001  f59d							; 
   3002  f59d
   3003  f59d				   .
   3004  f59d							; 
   3005  f59d
   3006  f59d				   .
   3007  f59d							; 
   3008  f59d
   3009  f59d				   .
   3010  f59d							; 
   3011  f59d
   3012  f59d				   .L044		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   3013  f59d
   3014  f59d		       a9 00		      LDA	#0
   3015  f59f		       85 d4		      STA	_Master_Counter
   3016  f5a1		       85 d5		      STA	_Frame_Counter
   3017  f5a3				   .
   3018  f5a3							; 
   3019  f5a3
   3020  f5a3				   .
   3021  f5a3							; 
   3022  f5a3
   3023  f5a3				   .
   3024  f5a3							; 
   3025  f5a3
   3026  f5a3				   .
   3027  f5a3							; 
   3028  f5a3
   3029  f5a3				   .
   3030  f5a3							; 
   3031  f5a3
   3032  f5a3				   .L045		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   3033  f5a3
   3034  f5a3		       a5 93		      LDA	_sc1
   3035  f5a5		       85 e6		      STA	_Score1_Mem
   3036  f5a7		       a5 94		      LDA	_sc2
   3037  f5a9		       85 e7		      STA	_Score2_Mem
   3038  f5ab		       a5 95		      LDA	_sc3
   3039  f5ad		       85 e8		      STA	_Score3_Mem
   3040  f5af				   .
   3041  f5af							; 
   3042  f5af
   3043  f5af				   .L046		;  _Bit6_Swap_Scores{6}  =  0	:  COLUBK  =  $30
   3044  f5af
   3045  f5af		       a5 ec		      LDA	_Bit6_Swap_Scores
   3046  f5b1		       29 bf		      AND	#191
   3047  f5b3		       85 ec		      STA	_Bit6_Swap_Scores
   3048  f5b5		       a9 30		      LDA	#$30
   3049  f5b7		       85 09		      STA	COLUBK
   3050  f5b9				   .
   3051  f5b9							; 
   3052  f5b9
   3053  f5b9				   .L047		;  playfield:
   3054  f5b9
   3055  f5b9				  -	      ifconst	pfres
   3056  f5b9				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3057  f5b9					      else
   3058  f5b9		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3059  f5bb					      endif
   3060  f5bb		       4c ea f5 	      jmp	pflabel2
   3061  f5be				   PF_data2
   3062  f5be		       3f 66		      .byte.b	%00111111, %01100110
   3063  f5c0					      if	(pfwidth>2)
   3064  f5c0		       fd 1f		      .byte.b	%11111101, %00011111
   3065  f5c2					      endif
   3066  f5c2		       33 66		      .byte.b	%00110011, %01100110
   3067  f5c4					      if	(pfwidth>2)
   3068  f5c4		       31 19		      .byte.b	%00110001, %00011001
   3069  f5c6					      endif
   3070  f5c6		       3f 66		      .byte.b	%00111111, %01100110
   3071  f5c8					      if	(pfwidth>2)
   3072  f5c8		       31 19		      .byte.b	%00110001, %00011001
   3073  f5ca					      endif
   3074  f5ca		       33 66		      .byte.b	%00110011, %01100110
   3075  f5cc					      if	(pfwidth>2)
   3076  f5cc		       31 19		      .byte.b	%00110001, %00011001
   3077  f5ce					      endif
   3078  f5ce		       33 7e		      .byte.b	%00110011, %01111110
   3079  f5d0					      if	(pfwidth>2)
   3080  f5d0		       31 1f		      .byte.b	%00110001, %00011111
   3081  f5d2					      endif
   3082  f5d2		       00 00		      .byte.b	%00000000, %00000000
   3083  f5d4					      if	(pfwidth>2)
   3084  f5d4		       00 00		      .byte.b	%00000000, %00000000
   3085  f5d6					      endif
   3086  f5d6		       3f 06		      .byte.b	%00111111, %00000110
   3087  f5d8					      if	(pfwidth>2)
   3088  f5d8		       fd 19		      .byte.b	%11111101, %00011001
   3089  f5da					      endif
   3090  f5da		       33 06		      .byte.b	%00110011, %00000110
   3091  f5dc					      if	(pfwidth>2)
   3092  f5dc		       cd 19		      .byte.b	%11001101, %00011001
   3093  f5de					      endif
   3094  f5de		       3f 06		      .byte.b	%00111111, %00000110
   3095  f5e0					      if	(pfwidth>2)
   3096  f5e0		       fd 1f		      .byte.b	%11111101, %00011111
   3097  f5e2					      endif
   3098  f5e2		       30 06		      .byte.b	%00110000, %00000110
   3099  f5e4					      if	(pfwidth>2)
   3100  f5e4		       cc 06		      .byte.b	%11001100, %00000110
   3101  f5e6					      endif
   3102  f5e6		       30 7e		      .byte.b	%00110000, %01111110
   3103  f5e8					      if	(pfwidth>2)
   3104  f5e8		       cc 06		      .byte.b	%11001100, %00000110
   3105  f5ea					      endif
   3106  f5ea				   pflabel2
   3107  f5ea		       bd be f5 	      lda	PF_data2,x
   3108  f5ed		       95 a4		      sta	playfield,x
   3109  f5ef		       ca		      dex
   3110  f5f0		       10 f8		      bpl	pflabel2
   3111  f5f2				   .
   3112  f5f2							; 
   3113  f5f2
   3114  f5f2				   .__AP_Skip_AP_Setup
   3115  f5f2							; __AP_Skip_AP_Setup
   3116  f5f2
   3117  f5f2				   .
   3118  f5f2							; 
   3119  f5f2
   3120  f5f2				   .
   3121  f5f2							; 
   3122  f5f2
   3123  f5f2				   .
   3124  f5f2							; 
   3125  f5f2
   3126  f5f2				   .
   3127  f5f2							; 
   3128  f5f2
   3129  f5f2				   .
   3130  f5f2							; 
   3131  f5f2
   3132  f5f2				   .
   3133  f5f2							; 
   3134  f5f2
   3135  f5f2				   .
   3136  f5f2							; 
   3137  f5f2
   3138  f5f2				   .
   3139  f5f2							; 
   3140  f5f2
   3141  f5f2				   .
   3142  f5f2							; 
   3143  f5f2
   3144  f5f2				   .
   3145  f5f2							; 
   3146  f5f2
   3147  f5f2				   .
   3148  f5f2							; 
   3149  f5f2
   3150  f5f2				   .__Main_Loop
   3151  f5f2							; __Main_Loop
   3152  f5f2
   3153  f5f2				   .
   3154  f5f2							; 
   3155  f5f2
   3156  f5f2				   .
   3157  f5f2							; 
   3158  f5f2
   3159  f5f2				   .
   3160  f5f2							; 
   3161  f5f2
   3162  f5f2				   .
   3163  f5f2							; 
   3164  f5f2
   3165  f5f2				   .
   3166  f5f2							; 
   3167  f5f2
   3168  f5f2				   .
   3169  f5f2							; 
   3170  f5f2
   3171  f5f2				   .
   3172  f5f2							; 
   3173  f5f2
   3174  f5f2				   .L048		;  COLUPF  =  $9A
   3175  f5f2
   3176  f5f2		       a9 9a		      LDA	#$9A
   3177  f5f4		       85 08		      STA	COLUPF
   3178  f5f6				   .
   3179  f5f6							; 
   3180  f5f6
   3181  f5f6				   .
   3182  f5f6							; 
   3183  f5f6
   3184  f5f6				   .
   3185  f5f6							; 
   3186  f5f6
   3187  f5f6				   .
   3188  f5f6							; 
   3189  f5f6
   3190  f5f6				   .
   3191  f5f6							; 
   3192  f5f6
   3193  f5f6				   .
   3194  f5f6							; 
   3195  f5f6
   3196  f5f6				   .
   3197  f5f6							; 
   3198  f5f6
   3199  f5f6				   .L049		;  if _Bit3_Auto_Play{3} then COLUPF  =  $3A
   3200  f5f6
   3201  f5f6		       a5 ec		      LDA	_Bit3_Auto_Play
   3202  f5f8		       29 08		      AND	#8
   3203  f5fa		       f0 04		      BEQ	.skipL049
   3204  f5fc				   .condpart7
   3205  f5fc		       a9 3a		      LDA	#$3A
   3206  f5fe		       85 08		      STA	COLUPF
   3207  f600				   .skipL049
   3208  f600				   .
   3209  f600							; 
   3210  f600
   3211  f600				   .
   3212  f600							; 
   3213  f600
   3214  f600				   .
   3215  f600							; 
   3216  f600
   3217  f600				   .
   3218  f600							; 
   3219  f600
   3220  f600				   .
   3221  f600							; 
   3222  f600
   3223  f600				   .
   3224  f600							; 
   3225  f600
   3226  f600				   .
   3227  f600							; 
   3228  f600
   3229  f600				   .
   3230  f600							; 
   3231  f600
   3232  f600				   .
   3233  f600							; 
   3234  f600
   3235  f600				   .
   3236  f600							; 
   3237  f600
   3238  f600				   .
   3239  f600							; 
   3240  f600
   3241  f600				   .L050		;  _Master_Counter  =	_Master_Counter  +  1
   3242  f600
   3243  f600		       e6 d4		      INC	_Master_Counter
   3244  f602				   .
   3245  f602							; 
   3246  f602
   3247  f602				   .
   3248  f602							; 
   3249  f602
   3250  f602				   .
   3251  f602							; 
   3252  f602
   3253  f602				   .
   3254  f602							; 
   3255  f602
   3256  f602				   .L051		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Counter
   3257  f602
   3258  f602		       a5 ec		      LDA	_Bit3_Auto_Play
   3259  f604		       29 08		      AND	#8
   3260  f606		       d0 03		      BNE	.skipL051
   3261  f608				   .condpart8
   3262  f608		       4c 29 f6 	      jmp	.__AP_Skip_Counter
   3263  f60b
   3264  f60b				   .skipL051
   3265  f60b				   .
   3266  f60b							; 
   3267  f60b
   3268  f60b				   .
   3269  f60b							; 
   3270  f60b
   3271  f60b				   .
   3272  f60b							; 
   3273  f60b
   3274  f60b				   .
   3275  f60b							; 
   3276  f60b
   3277  f60b				   .
   3278  f60b							; 
   3279  f60b
   3280  f60b				   .L052		;  if _Master_Counter	<  120 then goto __Skip_Joystick_Check
   3281  f60b
   3282  f60b		       a5 d4		      LDA	_Master_Counter
   3283  f60d		       c9 78		      CMP	#120
   3284  f60f		       b0 03		      BCS	.skipL052
   3285  f611				   .condpart9
   3286  f611		       4c 66 f6 	      jmp	.__Skip_Joystick_Check
   3287  f614
   3288  f614				   .skipL052
   3289  f614				   .
   3290  f614							; 
   3291  f614
   3292  f614				   .
   3293  f614							; 
   3294  f614
   3295  f614				   .
   3296  f614							; 
   3297  f614
   3298  f614				   .
   3299  f614							; 
   3300  f614
   3301  f614				   .
   3302  f614							; 
   3303  f614
   3304  f614				   .L053		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   3305  f614
   3306  f614		       e6 d5		      INC	_Frame_Counter
   3307  f616		       a9 00		      LDA	#0
   3308  f618		       85 d4		      STA	_Master_Counter
   3309  f61a				   .
   3310  f61a							; 
   3311  f61a
   3312  f61a				   .
   3313  f61a							; 
   3314  f61a
   3315  f61a				   .
   3316  f61a							; 
   3317  f61a
   3318  f61a				   .
   3319  f61a							; 
   3320  f61a
   3321  f61a				   .L054		;  if _Frame_Counter  >  4 then _Bit2_Game_Control{2}	=  1
   3322  f61a
   3323  f61a		       a9 04		      LDA	#4
   3324  f61c		       c5 d5		      CMP	_Frame_Counter
   3325  f61e		       b0 06		      BCS	.skipL054
   3326  f620				   .condpart10
   3327  f620		       a5 ec		      LDA	_Bit2_Game_Control
   3328  f622		       09 04		      ORA	#4
   3329  f624		       85 ec		      STA	_Bit2_Game_Control
   3330  f626				   .skipL054
   3331  f626				   .
   3332  f626							; 
   3333  f626
   3334  f626				   .L055		;  goto __Skip_Joystick_Check
   3335  f626
   3336  f626		       4c 66 f6 	      jmp	.__Skip_Joystick_Check
   3337  f629
   3338  f629				   .
   3339  f629							; 
   3340  f629
   3341  f629				   .__AP_Skip_Counter
   3342  f629							; __AP_Skip_Counter
   3343  f629
   3344  f629				   .
   3345  f629							; 
   3346  f629
   3347  f629				   .
   3348  f629							; 
   3349  f629
   3350  f629				   .
   3351  f629							; 
   3352  f629
   3353  f629				   .
   3354  f629							; 
   3355  f629
   3356  f629				   .L056		;  if _Master_Counter	<  8 then goto __Skip_Joystick_Check
   3357  f629
   3358  f629		       a5 d4		      LDA	_Master_Counter
   3359  f62b		       c9 08		      CMP	#8
   3360  f62d		       b0 03		      BCS	.skipL056
   3361  f62f				   .condpart11
   3362  f62f		       4c 66 f6 	      jmp	.__Skip_Joystick_Check
   3363  f632
   3364  f632				   .skipL056
   3365  f632				   .
   3366  f632							; 
   3367  f632
   3368  f632				   .
   3369  f632							; 
   3370  f632
   3371  f632				   .
   3372  f632							; 
   3373  f632
   3374  f632				   .
   3375  f632							; 
   3376  f632
   3377  f632				   .L057		;  _Master_Counter  =	0
   3378  f632
   3379  f632		       a9 00		      LDA	#0
   3380  f634		       85 d4		      STA	_Master_Counter
   3381  f636				   .
   3382  f636							; 
   3383  f636
   3384  f636				   .
   3385  f636							; 
   3386  f636
   3387  f636				   .
   3388  f636							; 
   3389  f636
   3390  f636				   .
   3391  f636							; 
   3392  f636
   3393  f636				   .L058		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Check
   3394  f636
   3395  f636		       a9 10		      lda	#$10
   3396  f638		       2c 80 02 	      bit	SWCHA
   3397  f63b		       f0 14		      BEQ	.skipL058
   3398  f63d				   .condpart12
   3399  f63d		       a9 20		      lda	#$20
   3400  f63f		       2c 80 02 	      bit	SWCHA
   3401  f642		       f0 0d		      BEQ	.skip12then
   3402  f644				   .condpart13
   3403  f644		       2c 80 02 	      bit	SWCHA
   3404  f647		       50 08		      BVC	.skip13then
   3405  f649				   .condpart14
   3406  f649		       2c 80 02 	      bit	SWCHA
   3407  f64c		       10 03		      BPL	.skip14then
   3408  f64e				   .condpart15
   3409  f64e		       4c 66 f6 	      jmp	.__Skip_Joystick_Check
   3410  f651
   3411  f651				   .skip14then
   3412  f651				   .skip13then
   3413  f651				   .skip12then
   3414  f651				   .skipL058
   3415  f651				   .
   3416  f651							; 
   3417  f651
   3418  f651				   .L059		;  score  =  score  +	10
   3419  f651
   3420  f651		       f8		      SED
   3421  f652		       18		      CLC
   3422  f653		       a5 95		      LDA	score+2
   3423  f655		       69 10		      ADC	#$10
   3424  f657		       85 95		      STA	score+2
   3425  f659		       a5 94		      LDA	score+1
   3426  f65b		       69 00		      ADC	#$00
   3427  f65d		       85 94		      STA	score+1
   3428  f65f		       a5 93		      LDA	score
   3429  f661		       69 00		      ADC	#$00
   3430  f663		       85 93		      STA	score
   3431  f665		       d8		      CLD
   3432  f666				   .
   3433  f666							; 
   3434  f666
   3435  f666				   .__Skip_Joystick_Check
   3436  f666							; __Skip_Joystick_Check
   3437  f666
   3438  f666				   .
   3439  f666							; 
   3440  f666
   3441  f666				   .
   3442  f666							; 
   3443  f666
   3444  f666				   .
   3445  f666							; 
   3446  f666
   3447  f666				   .
   3448  f666							; 
   3449  f666
   3450  f666				   .
   3451  f666							; 
   3452  f666
   3453  f666				   .
   3454  f666							; 
   3455  f666
   3456  f666				   .
   3457  f666							; 
   3458  f666
   3459  f666				   .
   3460  f666							; 
   3461  f666
   3462  f666				   .
   3463  f666							; 
   3464  f666
   3465  f666				   .
   3466  f666							; 
   3467  f666
   3468  f666				   .
   3469  f666							; 
   3470  f666
   3471  f666				   .L060		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Done_Fire
   3472  f666
   3473  f666		       24 0c		      bit	INPT4
   3474  f668		       10 09		      BPL	.skipL060
   3475  f66a				   .condpart16
   3476  f66a		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3477  f66c		       29 fd		      AND	#253
   3478  f66e		       85 ec		      STA	_Bit1_FireB_Restrainer
   3479  f670		       4c 82 f6 	      jmp	.__Done_Fire
   3480  f673
   3481  f673				   .skipL060
   3482  f673				   .
   3483  f673							; 
   3484  f673
   3485  f673				   .
   3486  f673							; 
   3487  f673
   3488  f673				   .
   3489  f673							; 
   3490  f673
   3491  f673				   .
   3492  f673							; 
   3493  f673
   3494  f673				   .
   3495  f673							; 
   3496  f673
   3497  f673				   .L061		;  if _Bit1_FireB_Restrainer{1} then goto __Done_Fire
   3498  f673
   3499  f673		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3500  f675		       29 02		      AND	#2
   3501  f677		       f0 03		      BEQ	.skipL061
   3502  f679				   .condpart17
   3503  f679		       4c 82 f6 	      jmp	.__Done_Fire
   3504  f67c
   3505  f67c				   .skipL061
   3506  f67c				   .
   3507  f67c							; 
   3508  f67c
   3509  f67c				   .
   3510  f67c							; 
   3511  f67c
   3512  f67c				   .
   3513  f67c							; 
   3514  f67c
   3515  f67c				   .
   3516  f67c							; 
   3517  f67c
   3518  f67c				   .L062		;  _Bit2_Game_Control{2}  =  1
   3519  f67c
   3520  f67c		       a5 ec		      LDA	_Bit2_Game_Control
   3521  f67e		       09 04		      ORA	#4
   3522  f680		       85 ec		      STA	_Bit2_Game_Control
   3523  f682				   .
   3524  f682							; 
   3525  f682
   3526  f682				   .__Done_Fire
   3527  f682							; __Done_Fire
   3528  f682
   3529  f682				   .
   3530  f682							; 
   3531  f682
   3532  f682				   .
   3533  f682							; 
   3534  f682
   3535  f682				   .
   3536  f682							; 
   3537  f682
   3538  f682				   .
   3539  f682							; 
   3540  f682
   3541  f682				   .
   3542  f682							; 
   3543  f682
   3544  f682				   .
   3545  f682							; 
   3546  f682
   3547  f682				   .
   3548  f682							; 
   3549  f682
   3550  f682				   .
   3551  f682							; 
   3552  f682
   3553  f682				   .
   3554  f682							; 
   3555  f682
   3556  f682				   .
   3557  f682							; 
   3558  f682
   3559  f682				   .
   3560  f682							; 
   3561  f682
   3562  f682				   .
   3563  f682							; 
   3564  f682
   3565  f682				   .L063		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Flip
   3566  f682
   3567  f682		       a5 ec		      LDA	_Bit3_Auto_Play
   3568  f684		       29 08		      AND	#8
   3569  f686		       d0 03		      BNE	.skipL063
   3570  f688				   .condpart18
   3571  f688		       4c d4 f6 	      jmp	.__AP_Skip_Flip
   3572  f68b
   3573  f68b				   .skipL063
   3574  f68b				   .
   3575  f68b							; 
   3576  f68b
   3577  f68b				   .
   3578  f68b							; 
   3579  f68b
   3580  f68b				   .
   3581  f68b							; 
   3582  f68b
   3583  f68b				   .
   3584  f68b							; 
   3585  f68b
   3586  f68b				   .L064		;  _AP_2_Sec_Score_Flip  =  _AP_2_Sec_Score_Flip  +  1
   3587  f68b
   3588  f68b		       e6 de		      INC	_AP_2_Sec_Score_Flip
   3589  f68d				   .
   3590  f68d							; 
   3591  f68d
   3592  f68d				   .
   3593  f68d							; 
   3594  f68d
   3595  f68d				   .
   3596  f68d							; 
   3597  f68d
   3598  f68d				   .
   3599  f68d							; 
   3600  f68d
   3601  f68d				   .
   3602  f68d							; 
   3603  f68d
   3604  f68d				   .L065		;  if _AP_2_Sec_Score_Flip  <	120 then goto __AP_Skip_Flip
   3605  f68d
   3606  f68d		       a5 de		      LDA	_AP_2_Sec_Score_Flip
   3607  f68f		       c9 78		      CMP	#120
   3608  f691		       b0 03		      BCS	.skipL065
   3609  f693				   .condpart19
   3610  f693		       4c d4 f6 	      jmp	.__AP_Skip_Flip
   3611  f696
   3612  f696				   .skipL065
   3613  f696				   .
   3614  f696							; 
   3615  f696
   3616  f696				   .
   3617  f696							; 
   3618  f696
   3619  f696				   .
   3620  f696							; 
   3621  f696
   3622  f696				   .
   3623  f696							; 
   3624  f696
   3625  f696				   .L066		;  _AP_2_Sec_Score_Flip  =  0	:  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   3626  f696
   3627  f696		       a9 00		      LDA	#0
   3628  f698		       85 de		      STA	_AP_2_Sec_Score_Flip
   3629  f69a		       a5 ec		      LDA	_Bit6_Swap_Scores
   3630  f69c		       29 40		      AND	#64
   3631  f69e		       08		      PHP
   3632  f69f		       a5 ec		      LDA	_Bit6_Swap_Scores
   3633  f6a1		       29 bf		      AND	#191
   3634  f6a3		       28		      PLP
   3635  f6a4		       d0 02		      .byte.b	$D0, $02
   3636  f6a6		       09 40		      ORA	#64
   3637  f6a8		       85 ec		      STA	_Bit6_Swap_Scores
   3638  f6aa				   .
   3639  f6aa							; 
   3640  f6aa
   3641  f6aa				   .
   3642  f6aa							; 
   3643  f6aa
   3644  f6aa				   .
   3645  f6aa							; 
   3646  f6aa
   3647  f6aa				   .
   3648  f6aa							; 
   3649  f6aa
   3650  f6aa				   .L067		;  if !_Bit6_Swap_Scores{6} then goto __AP_Skip_HiScore_Swap
   3651  f6aa
   3652  f6aa		       24 ec		      BIT	_Bit6_Swap_Scores
   3653  f6ac		       70 03		      BVS	.skipL067
   3654  f6ae				   .condpart20
   3655  f6ae		       4c c4 f6 	      jmp	.__AP_Skip_HiScore_Swap
   3656  f6b1
   3657  f6b1				   .skipL067
   3658  f6b1				   .
   3659  f6b1							; 
   3660  f6b1
   3661  f6b1				   .
   3662  f6b1							; 
   3663  f6b1
   3664  f6b1				   .
   3665  f6b1							; 
   3666  f6b1
   3667  f6b1				   .
   3668  f6b1							; 
   3669  f6b1
   3670  f6b1				   .L068		;  scorecolor	=  $1C
   3671  f6b1
   3672  f6b1		       a9 1c		      LDA	#$1C
   3673  f6b3		       85 a3		      STA	scorecolor
   3674  f6b5				   .
   3675  f6b5							; 
   3676  f6b5
   3677  f6b5				   .L069		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   3678  f6b5
   3679  f6b5		       a5 e9		      LDA	_High_Score1
   3680  f6b7		       85 93		      STA	_sc1
   3681  f6b9		       a5 ea		      LDA	_High_Score2
   3682  f6bb		       85 94		      STA	_sc2
   3683  f6bd		       a5 eb		      LDA	_High_Score3
   3684  f6bf		       85 95		      STA	_sc3
   3685  f6c1				   .
   3686  f6c1							; 
   3687  f6c1
   3688  f6c1				   .L070		;  goto __AP_Skip_Flip
   3689  f6c1
   3690  f6c1		       4c d4 f6 	      jmp	.__AP_Skip_Flip
   3691  f6c4
   3692  f6c4				   .
   3693  f6c4							; 
   3694  f6c4
   3695  f6c4				   .__AP_Skip_HiScore_Swap
   3696  f6c4							; __AP_Skip_HiScore_Swap
   3697  f6c4
   3698  f6c4				   .
   3699  f6c4							; 
   3700  f6c4
   3701  f6c4				   .
   3702  f6c4							; 
   3703  f6c4
   3704  f6c4				   .
   3705  f6c4							; 
   3706  f6c4
   3707  f6c4				   .
   3708  f6c4							; 
   3709  f6c4
   3710  f6c4				   .L071		;  scorecolor	=  $AE
   3711  f6c4
   3712  f6c4		       a9 ae		      LDA	#$AE
   3713  f6c6		       85 a3		      STA	scorecolor
   3714  f6c8				   .
   3715  f6c8							; 
   3716  f6c8
   3717  f6c8				   .L072		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   3718  f6c8
   3719  f6c8		       a5 e6		      LDA	_Score1_Mem
   3720  f6ca		       85 93		      STA	_sc1
   3721  f6cc		       a5 e7		      LDA	_Score2_Mem
   3722  f6ce		       85 94		      STA	_sc2
   3723  f6d0		       a5 e8		      LDA	_Score3_Mem
   3724  f6d2		       85 95		      STA	_sc3
   3725  f6d4				   .
   3726  f6d4							; 
   3727  f6d4
   3728  f6d4				   .__AP_Skip_Flip
   3729  f6d4							; __AP_Skip_Flip
   3730  f6d4
   3731  f6d4				   .
   3732  f6d4							; 
   3733  f6d4
   3734  f6d4				   .
   3735  f6d4							; 
   3736  f6d4
   3737  f6d4				   .
   3738  f6d4							; 
   3739  f6d4
   3740  f6d4				   .
   3741  f6d4							; 
   3742  f6d4
   3743  f6d4				   .
   3744  f6d4							; 
   3745  f6d4
   3746  f6d4				   .
   3747  f6d4							; 
   3748  f6d4
   3749  f6d4				   .
   3750  f6d4							; 
   3751  f6d4
   3752  f6d4				   .L073		;  drawscreen
   3753  f6d4
   3754  f6d4		       20 c1 f3 	      jsr	drawscreen
   3755  f6d7				   .
   3756  f6d7							; 
   3757  f6d7
   3758  f6d7				   .
   3759  f6d7							; 
   3760  f6d7
   3761  f6d7				   .
   3762  f6d7							; 
   3763  f6d7
   3764  f6d7				   .
   3765  f6d7							; 
   3766  f6d7
   3767  f6d7				   .
   3768  f6d7							; 
   3769  f6d7
   3770  f6d7				   .
   3771  f6d7							; 
   3772  f6d7
   3773  f6d7				   .
   3774  f6d7							; 
   3775  f6d7
   3776  f6d7				   .
   3777  f6d7							; 
   3778  f6d7
   3779  f6d7				   .
   3780  f6d7							; 
   3781  f6d7
   3782  f6d7				   .
   3783  f6d7							; 
   3784  f6d7
   3785  f6d7				   .
   3786  f6d7							; 
   3787  f6d7
   3788  f6d7				   .
   3789  f6d7							; 
   3790  f6d7
   3791  f6d7				   .
   3792  f6d7							; 
   3793  f6d7
   3794  f6d7				   .
   3795  f6d7							; 
   3796  f6d7
   3797  f6d7				   .
   3798  f6d7							; 
   3799  f6d7
   3800  f6d7				   .L074		;  if !_Bit2_Game_Control{2} then goto __Skip_Check_G_Over
   3801  f6d7
   3802  f6d7		       a5 ec		      LDA	_Bit2_Game_Control
   3803  f6d9		       29 04		      AND	#4
   3804  f6db		       d0 03		      BNE	.skipL074
   3805  f6dd				   .condpart21
   3806  f6dd		       4c fe f6 	      jmp	.__Skip_Check_G_Over
   3807  f6e0
   3808  f6e0				   .skipL074
   3809  f6e0				   .
   3810  f6e0							; 
   3811  f6e0
   3812  f6e0				   .
   3813  f6e0							; 
   3814  f6e0
   3815  f6e0				   .
   3816  f6e0							; 
   3817  f6e0
   3818  f6e0				   .
   3819  f6e0							; 
   3820  f6e0
   3821  f6e0				   .
   3822  f6e0							; 
   3823  f6e0
   3824  f6e0				   .L075		;  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =  0  :  _sc1  =	_Score1_Mem  :	_sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem  :  goto __Start_Restart
   3825  f6e0
   3826  f6e0		       a5 ec		      LDA	_Bit3_Auto_Play
   3827  f6e2		       29 08		      AND	#8
   3828  f6e4		       f0 15		      BEQ	.skipL075
   3829  f6e6				   .condpart22
   3830  f6e6		       a5 ec		      LDA	_Bit2_Game_Control
   3831  f6e8		       29 fb		      AND	#251
   3832  f6ea		       85 ec		      STA	_Bit2_Game_Control
   3833  f6ec		       a5 e6		      LDA	_Score1_Mem
   3834  f6ee		       85 93		      STA	_sc1
   3835  f6f0		       a5 e7		      LDA	_Score2_Mem
   3836  f6f2		       85 94		      STA	_sc2
   3837  f6f4		       a5 e8		      LDA	_Score3_Mem
   3838  f6f6		       85 95		      STA	_sc3
   3839  f6f8		       4c 61 f4 	      jmp	.__Start_Restart
   3840  f6fb
   3841  f6fb				   .skipL075
   3842  f6fb				   .
   3843  f6fb							; 
   3844  f6fb
   3845  f6fb				   .
   3846  f6fb							; 
   3847  f6fb
   3848  f6fb				   .
   3849  f6fb							; 
   3850  f6fb
   3851  f6fb				   .
   3852  f6fb							; 
   3853  f6fb
   3854  f6fb				   .L076		;  goto __Game_Over_Setup
   3855  f6fb
   3856  f6fb		       4c 45 f7 	      jmp	.__Game_Over_Setup
   3857  f6fe
   3858  f6fe				   .
   3859  f6fe							; 
   3860  f6fe
   3861  f6fe				   .__Skip_Check_G_Over
   3862  f6fe							; __Skip_Check_G_Over
   3863  f6fe
   3864  f6fe				   .
   3865  f6fe							; 
   3866  f6fe
   3867  f6fe				   .
   3868  f6fe							; 
   3869  f6fe
   3870  f6fe				   .
   3871  f6fe							; 
   3872  f6fe
   3873  f6fe				   .
   3874  f6fe							; 
   3875  f6fe
   3876  f6fe				   .
   3877  f6fe							; 
   3878  f6fe
   3879  f6fe				   .
   3880  f6fe							; 
   3881  f6fe
   3882  f6fe				   .
   3883  f6fe							; 
   3884  f6fe
   3885  f6fe				   .
   3886  f6fe							; 
   3887  f6fe
   3888  f6fe				   .
   3889  f6fe							; 
   3890  f6fe
   3891  f6fe				   .
   3892  f6fe							; 
   3893  f6fe
   3894  f6fe				   .
   3895  f6fe							; 
   3896  f6fe
   3897  f6fe				   .
   3898  f6fe							; 
   3899  f6fe
   3900  f6fe				   .
   3901  f6fe							; 
   3902  f6fe
   3903  f6fe				   .
   3904  f6fe							; 
   3905  f6fe
   3906  f6fe				   .L077		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Reset
   3907  f6fe
   3908  f6fe		       a5 ec		      LDA	_Bit3_Auto_Play
   3909  f700		       29 08		      AND	#8
   3910  f702		       d0 03		      BNE	.skipL077
   3911  f704				   .condpart23
   3912  f704		       4c 24 f7 	      jmp	.__AP_Skip_Reset
   3913  f707
   3914  f707				   .skipL077
   3915  f707				   .
   3916  f707							; 
   3917  f707
   3918  f707				   .
   3919  f707							; 
   3920  f707
   3921  f707				   .
   3922  f707							; 
   3923  f707
   3924  f707				   .
   3925  f707							; 
   3926  f707
   3927  f707				   .
   3928  f707							; 
   3929  f707
   3930  f707				   .
   3931  f707							; 
   3932  f707
   3933  f707				   .L078		;  if switchreset  ||	joy0fire then _Bit3_Auto_Play{3}  =  0	:  _Bit2_Game_Control{2}  =  1	:  goto __Start_Restart
   3934  f707
   3935  f707		       a9 01		      lda	#1
   3936  f709		       2c 82 02 	      bit	SWCHB
   3937  f70c		       d0 03		      BNE	.skipL078
   3938  f70e				   .condpart24
   3939  f70e		       4c 15 f7 	      jmp	.condpart25
   3940  f711				   .skipL078
   3941  f711		       24 0c		      bit	INPT4
   3942  f713		       30 0f		      BMI	.skip4OR
   3943  f715				   .condpart25
   3944  f715		       a5 ec		      LDA	_Bit3_Auto_Play
   3945  f717		       29 f7		      AND	#247
   3946  f719		       85 ec		      STA	_Bit3_Auto_Play
   3947  f71b		       a5 ec		      LDA	_Bit2_Game_Control
   3948  f71d		       09 04		      ORA	#4
   3949  f71f		       85 ec		      STA	_Bit2_Game_Control
   3950  f721		       4c 61 f4 	      jmp	.__Start_Restart
   3951  f724
   3952  f724				   .skip4OR
   3953  f724				   .
   3954  f724							; 
   3955  f724
   3956  f724				   .__AP_Skip_Reset
   3957  f724							; __AP_Skip_Reset
   3958  f724
   3959  f724				   .
   3960  f724							; 
   3961  f724
   3962  f724				   .
   3963  f724							; 
   3964  f724
   3965  f724				   .
   3966  f724							; 
   3967  f724
   3968  f724				   .
   3969  f724							; 
   3970  f724
   3971  f724				   .
   3972  f724							; 
   3973  f724
   3974  f724				   .L079		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   3975  f724
   3976  f724		       a9 01		      lda	#1
   3977  f726		       2c 82 02 	      bit	SWCHB
   3978  f729		       f0 09		      BEQ	.skipL079
   3979  f72b				   .condpart26
   3980  f72b		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   3981  f72d		       29 fe		      AND	#254
   3982  f72f		       85 ec		      STA	_Bit0_Reset_Restrainer
   3983  f731		       4c f2 f5 	      jmp	.__Main_Loop
   3984  f734
   3985  f734				   .skipL079
   3986  f734				   .
   3987  f734							; 
   3988  f734
   3989  f734				   .
   3990  f734							; 
   3991  f734
   3992  f734				   .
   3993  f734							; 
   3994  f734
   3995  f734				   .
   3996  f734							; 
   3997  f734
   3998  f734				   .
   3999  f734							; 
   4000  f734
   4001  f734				   .L080		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   4002  f734
   4003  f734		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4004  f736		       4a		      LSR
   4005  f737		       90 03		      BCC	.skipL080
   4006  f739				   .condpart27
   4007  f739		       4c f2 f5 	      jmp	.__Main_Loop
   4008  f73c
   4009  f73c				   .skipL080
   4010  f73c				   .
   4011  f73c							; 
   4012  f73c
   4013  f73c				   .
   4014  f73c							; 
   4015  f73c
   4016  f73c				   .
   4017  f73c							; 
   4018  f73c
   4019  f73c				   .
   4020  f73c							; 
   4021  f73c
   4022  f73c				   .L081		;  _Bit2_Game_Control{2}  =  0
   4023  f73c
   4024  f73c		       a5 ec		      LDA	_Bit2_Game_Control
   4025  f73e		       29 fb		      AND	#251
   4026  f740		       85 ec		      STA	_Bit2_Game_Control
   4027  f742				   .
   4028  f742							; 
   4029  f742
   4030  f742				   .
   4031  f742							; 
   4032  f742
   4033  f742				   .
   4034  f742							; 
   4035  f742
   4036  f742				   .
   4037  f742							; 
   4038  f742
   4039  f742				   .
   4040  f742							; 
   4041  f742
   4042  f742				   .L082		;  goto __Game_Over_Setup
   4043  f742
   4044  f742		       4c 45 f7 	      jmp	.__Game_Over_Setup
   4045  f745
   4046  f745				   .
   4047  f745							; 
   4048  f745
   4049  f745				   .
   4050  f745							; 
   4051  f745
   4052  f745				   .
   4053  f745							; 
   4054  f745
   4055  f745				   .
   4056  f745							; 
   4057  f745
   4058  f745				   .
   4059  f745							; 
   4060  f745
   4061  f745				   .
   4062  f745							; 
   4063  f745
   4064  f745				   .
   4065  f745							; 
   4066  f745
   4067  f745				   .
   4068  f745							; 
   4069  f745
   4070  f745				   .
   4071  f745							; 
   4072  f745
   4073  f745				   .
   4074  f745							; 
   4075  f745
   4076  f745				   .__Game_Over_Setup
   4077  f745							; __Game_Over_Setup
   4078  f745
   4079  f745				   .
   4080  f745							; 
   4081  f745
   4082  f745				   .
   4083  f745							; 
   4084  f745
   4085  f745				   .
   4086  f745							; 
   4087  f745
   4088  f745				   .
   4089  f745							; 
   4090  f745
   4091  f745				   .
   4092  f745							; 
   4093  f745
   4094  f745				   .
   4095  f745							; 
   4096  f745
   4097  f745				   .
   4098  f745							; 
   4099  f745
   4100  f745				   .
   4101  f745							; 
   4102  f745
   4103  f745				   .
   4104  f745							; 
   4105  f745
   4106  f745				   .
   4107  f745							; 
   4108  f745
   4109  f745				   .
   4110  f745							; 
   4111  f745
   4112  f745				   .L083		;  if _sc1  >	_High_Score1 then goto __New_High_Score
   4113  f745
   4114  f745		       a5 e9		      LDA	_High_Score1
   4115  f747		       c5 93		      CMP	_sc1
   4116  f749		       b0 03		      BCS	.skipL083
   4117  f74b				   .condpart28
   4118  f74b		       4c 7e f7 	      jmp	.__New_High_Score
   4119  f74e
   4120  f74e				   .skipL083
   4121  f74e				   .L084		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
   4122  f74e
   4123  f74e		       a5 93		      LDA	_sc1
   4124  f750		       c5 e9		      CMP	_High_Score1
   4125  f752		       b0 03		      BCS	.skipL084
   4126  f754				   .condpart29
   4127  f754		       4c 8a f7 	      jmp	.__Skip_High_Score
   4128  f757
   4129  f757				   .skipL084
   4130  f757				   .
   4131  f757							; 
   4132  f757
   4133  f757				   .
   4134  f757							; 
   4135  f757
   4136  f757				   .
   4137  f757							; 
   4138  f757
   4139  f757				   .
   4140  f757							; 
   4141  f757
   4142  f757				   .L085		;  if _sc2  >	_High_Score2 then goto __New_High_Score
   4143  f757
   4144  f757		       a5 ea		      LDA	_High_Score2
   4145  f759		       c5 94		      CMP	_sc2
   4146  f75b		       b0 03		      BCS	.skipL085
   4147  f75d				   .condpart30
   4148  f75d		       4c 7e f7 	      jmp	.__New_High_Score
   4149  f760
   4150  f760				   .skipL085
   4151  f760				   .L086		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
   4152  f760
   4153  f760		       a5 94		      LDA	_sc2
   4154  f762		       c5 ea		      CMP	_High_Score2
   4155  f764		       b0 03		      BCS	.skipL086
   4156  f766				   .condpart31
   4157  f766		       4c 8a f7 	      jmp	.__Skip_High_Score
   4158  f769
   4159  f769				   .skipL086
   4160  f769				   .
   4161  f769							; 
   4162  f769
   4163  f769				   .
   4164  f769							; 
   4165  f769
   4166  f769				   .
   4167  f769							; 
   4168  f769
   4169  f769				   .
   4170  f769							; 
   4171  f769
   4172  f769				   .L087		;  if _sc3  >	_High_Score3 then goto __New_High_Score
   4173  f769
   4174  f769		       a5 eb		      LDA	_High_Score3
   4175  f76b		       c5 95		      CMP	_sc3
   4176  f76d		       b0 03		      BCS	.skipL087
   4177  f76f				   .condpart32
   4178  f76f		       4c 7e f7 	      jmp	.__New_High_Score
   4179  f772
   4180  f772				   .skipL087
   4181  f772				   .L088		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
   4182  f772
   4183  f772		       a5 95		      LDA	_sc3
   4184  f774		       c5 eb		      CMP	_High_Score3
   4185  f776		       b0 03		      BCS	.skipL088
   4186  f778				   .condpart33
   4187  f778		       4c 8a f7 	      jmp	.__Skip_High_Score
   4188  f77b
   4189  f77b				   .skipL088
   4190  f77b				   .
   4191  f77b							; 
   4192  f77b
   4193  f77b				   .
   4194  f77b							; 
   4195  f77b
   4196  f77b				   .
   4197  f77b							; 
   4198  f77b
   4199  f77b				   .
   4200  f77b							; 
   4201  f77b
   4202  f77b				   .L089		;  goto __Skip_High_Score
   4203  f77b
   4204  f77b		       4c 8a f7 	      jmp	.__Skip_High_Score
   4205  f77e
   4206  f77e				   .
   4207  f77e							; 
   4208  f77e
   4209  f77e				   .
   4210  f77e							; 
   4211  f77e
   4212  f77e				   .
   4213  f77e							; 
   4214  f77e
   4215  f77e				   .
   4216  f77e							; 
   4217  f77e
   4218  f77e				   .__New_High_Score
   4219  f77e							; __New_High_Score
   4220  f77e
   4221  f77e				   .
   4222  f77e							; 
   4223  f77e
   4224  f77e				   .L090		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
   4225  f77e
   4226  f77e		       a5 93		      LDA	_sc1
   4227  f780		       85 e9		      STA	_High_Score1
   4228  f782		       a5 94		      LDA	_sc2
   4229  f784		       85 ea		      STA	_High_Score2
   4230  f786		       a5 95		      LDA	_sc3
   4231  f788		       85 eb		      STA	_High_Score3
   4232  f78a				   .
   4233  f78a							; 
   4234  f78a
   4235  f78a				   .__Skip_High_Score
   4236  f78a							; __Skip_High_Score
   4237  f78a
   4238  f78a				   .
   4239  f78a							; 
   4240  f78a
   4241  f78a				   .
   4242  f78a							; 
   4243  f78a
   4244  f78a				   .
   4245  f78a							; 
   4246  f78a
   4247  f78a				   .
   4248  f78a							; 
   4249  f78a
   4250  f78a				   .
   4251  f78a							; 
   4252  f78a
   4253  f78a				   .L091		;  if !_Bit2_Game_Control{2} then goto __Start_Restart
   4254  f78a
   4255  f78a		       a5 ec		      LDA	_Bit2_Game_Control
   4256  f78c		       29 04		      AND	#4
   4257  f78e		       d0 03		      BNE	.skipL091
   4258  f790				   .condpart34
   4259  f790		       4c 61 f4 	      jmp	.__Start_Restart
   4260  f793
   4261  f793				   .skipL091
   4262  f793				   .
   4263  f793							; 
   4264  f793
   4265  f793				   .
   4266  f793							; 
   4267  f793
   4268  f793				   .
   4269  f793							; 
   4270  f793
   4271  f793				   .
   4272  f793							; 
   4273  f793
   4274  f793				   .
   4275  f793							; 
   4276  f793
   4277  f793				   .
   4278  f793							; 
   4279  f793
   4280  f793				   .L092		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   4281  f793
   4282  f793		       a5 93		      LDA	_sc1
   4283  f795		       85 e6		      STA	_Score1_Mem
   4284  f797		       a5 94		      LDA	_sc2
   4285  f799		       85 e7		      STA	_Score2_Mem
   4286  f79b		       a5 95		      LDA	_sc3
   4287  f79d		       85 e8		      STA	_Score3_Mem
   4288  f79f				   .
   4289  f79f							; 
   4290  f79f
   4291  f79f				   .
   4292  f79f							; 
   4293  f79f
   4294  f79f				   .
   4295  f79f							; 
   4296  f79f
   4297  f79f				   .
   4298  f79f							; 
   4299  f79f
   4300  f79f				   .
   4301  f79f							; 
   4302  f79f
   4303  f79f				   .L093		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   4304  f79f
   4305  f79f		       a9 00		      LDA	#0
   4306  f7a1		       85 d4		      STA	_Master_Counter
   4307  f7a3		       85 d5		      STA	_Frame_Counter
   4308  f7a5				   .
   4309  f7a5							; 
   4310  f7a5
   4311  f7a5				   .
   4312  f7a5							; 
   4313  f7a5
   4314  f7a5				   .
   4315  f7a5							; 
   4316  f7a5
   4317  f7a5				   .
   4318  f7a5							; 
   4319  f7a5
   4320  f7a5				   .
   4321  f7a5							; 
   4322  f7a5
   4323  f7a5				   .
   4324  f7a5							; 
   4325  f7a5
   4326  f7a5				   .
   4327  f7a5							; 
   4328  f7a5
   4329  f7a5				   .
   4330  f7a5							; 
   4331  f7a5
   4332  f7a5				   .
   4333  f7a5							; 
   4334  f7a5
   4335  f7a5				   .
   4336  f7a5							; 
   4337  f7a5
   4338  f7a5				   .
   4339  f7a5							; 
   4340  f7a5
   4341  f7a5				   .L094		;  _Bit0_Reset_Restrainer{0}  =  1
   4342  f7a5
   4343  f7a5		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4344  f7a7		       09 01		      ORA	#1
   4345  f7a9		       85 ec		      STA	_Bit0_Reset_Restrainer
   4346  f7ab				   .
   4347  f7ab							; 
   4348  f7ab
   4349  f7ab				   .
   4350  f7ab							; 
   4351  f7ab
   4352  f7ab				   .
   4353  f7ab							; 
   4354  f7ab
   4355  f7ab				   .
   4356  f7ab							; 
   4357  f7ab
   4358  f7ab				   .
   4359  f7ab							; 
   4360  f7ab
   4361  f7ab				   .
   4362  f7ab							; 
   4363  f7ab
   4364  f7ab				   .L095		;  playfield:
   4365  f7ab
   4366  f7ab				  -	      ifconst	pfres
   4367  f7ab				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   4368  f7ab					      else
   4369  f7ab		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   4370  f7ad					      endif
   4371  f7ad		       4c dc f7 	      jmp	pflabel3
   4372  f7b0				   PF_data3
   4373  f7b0		       7e bf		      .byte.b	%01111110, %10111111
   4374  f7b2					      if	(pfwidth>2)
   4375  f7b2		       ff 7d		      .byte.b	%11111111, %01111101
   4376  f7b4					      endif
   4377  f7b4		       60 b3		      .byte.b	%01100000, %10110011
   4378  f7b6					      if	(pfwidth>2)
   4379  f7b6		       99 0d		      .byte.b	%10011001, %00001101
   4380  f7b8					      endif
   4381  f7b8		       6e bf		      .byte.b	%01101110, %10111111
   4382  f7ba					      if	(pfwidth>2)
   4383  f7ba		       99 3d		      .byte.b	%10011001, %00111101
   4384  f7bc					      endif
   4385  f7bc		       66 b3		      .byte.b	%01100110, %10110011
   4386  f7be					      if	(pfwidth>2)
   4387  f7be		       99 0d		      .byte.b	%10011001, %00001101
   4388  f7c0					      endif
   4389  f7c0		       7e b3		      .byte.b	%01111110, %10110011
   4390  f7c2					      if	(pfwidth>2)
   4391  f7c2		       99 7d		      .byte.b	%10011001, %01111101
   4392  f7c4					      endif
   4393  f7c4		       00 00		      .byte.b	%00000000, %00000000
   4394  f7c6					      if	(pfwidth>2)
   4395  f7c6		       00 00		      .byte.b	%00000000, %00000000
   4396  f7c8					      endif
   4397  f7c8		       1f cd		      .byte.b	%00011111, %11001101
   4398  f7ca					      if	(pfwidth>2)
   4399  f7ca		       7d 1f		      .byte.b	%01111101, %00011111
   4400  f7cc					      endif
   4401  f7cc		       19 cd		      .byte.b	%00011001, %11001101
   4402  f7ce					      if	(pfwidth>2)
   4403  f7ce		       61 19		      .byte.b	%01100001, %00011001
   4404  f7d0					      endif
   4405  f7d0		       19 cd		      .byte.b	%00011001, %11001101
   4406  f7d2					      if	(pfwidth>2)
   4407  f7d2		       79 0f		      .byte.b	%01111001, %00001111
   4408  f7d4					      endif
   4409  f7d4		       19 cd		      .byte.b	%00011001, %11001101
   4410  f7d6					      if	(pfwidth>2)
   4411  f7d6		       61 19		      .byte.b	%01100001, %00011001
   4412  f7d8					      endif
   4413  f7d8		       1f 31		      .byte.b	%00011111, %00110001
   4414  f7da					      if	(pfwidth>2)
   4415  f7da		       7d 19		      .byte.b	%01111101, %00011001
   4416  f7dc					      endif
   4417  f7dc				   pflabel3
   4418  f7dc		       bd b0 f7 	      lda	PF_data3,x
   4419  f7df		       95 a4		      sta	playfield,x
   4420  f7e1		       ca		      dex
   4421  f7e2		       10 f8		      bpl	pflabel3
   4422  f7e4				   .
   4423  f7e4							; 
   4424  f7e4
   4425  f7e4				   .
   4426  f7e4							; 
   4427  f7e4
   4428  f7e4				   .
   4429  f7e4							; 
   4430  f7e4
   4431  f7e4				   .
   4432  f7e4							; 
   4433  f7e4
   4434  f7e4				   .
   4435  f7e4							; 
   4436  f7e4
   4437  f7e4				   .
   4438  f7e4							; 
   4439  f7e4
   4440  f7e4				   .
   4441  f7e4							; 
   4442  f7e4
   4443  f7e4				   .
   4444  f7e4							; 
   4445  f7e4
   4446  f7e4				   .
   4447  f7e4							; 
   4448  f7e4
   4449  f7e4				   .
   4450  f7e4							; 
   4451  f7e4
   4452  f7e4				   .
   4453  f7e4							; 
   4454  f7e4
   4455  f7e4				   .__Game_Over_Loop
   4456  f7e4							; __Game_Over_Loop
   4457  f7e4
   4458  f7e4				   .
   4459  f7e4							; 
   4460  f7e4
   4461  f7e4				   .
   4462  f7e4							; 
   4463  f7e4
   4464  f7e4				   .
   4465  f7e4							; 
   4466  f7e4
   4467  f7e4				   .
   4468  f7e4							; 
   4469  f7e4
   4470  f7e4				   .
   4471  f7e4							; 
   4472  f7e4
   4473  f7e4				   .
   4474  f7e4							; 
   4475  f7e4
   4476  f7e4				   .
   4477  f7e4							; 
   4478  f7e4
   4479  f7e4				   .
   4480  f7e4							; 
   4481  f7e4
   4482  f7e4				   .
   4483  f7e4							; 
   4484  f7e4
   4485  f7e4				   .
   4486  f7e4							; 
   4487  f7e4
   4488  f7e4				   .
   4489  f7e4							; 
   4490  f7e4
   4491  f7e4				   .
   4492  f7e4							; 
   4493  f7e4
   4494  f7e4				   .
   4495  f7e4							; 
   4496  f7e4
   4497  f7e4				   .
   4498  f7e4							; 
   4499  f7e4
   4500  f7e4				   .
   4501  f7e4							; 
   4502  f7e4
   4503  f7e4				   .
   4504  f7e4							; 
   4505  f7e4
   4506  f7e4				   .
   4507  f7e4							; 
   4508  f7e4
   4509  f7e4				   .
   4510  f7e4							; 
   4511  f7e4
   4512  f7e4				   .
   4513  f7e4							; 
   4514  f7e4
   4515  f7e4				   .L096		;  _Master_Counter  =	_Master_Counter  +  1
   4516  f7e4
   4517  f7e4		       e6 d4		      INC	_Master_Counter
   4518  f7e6				   .
   4519  f7e6							; 
   4520  f7e6
   4521  f7e6				   .
   4522  f7e6							; 
   4523  f7e6
   4524  f7e6				   .
   4525  f7e6							; 
   4526  f7e6
   4527  f7e6				   .
   4528  f7e6							; 
   4529  f7e6
   4530  f7e6				   .
   4531  f7e6							; 
   4532  f7e6
   4533  f7e6				   .L097		;  if _Master_Counter	<  120 then goto __Skip_20_Second_Counter
   4534  f7e6
   4535  f7e6		       a5 d4		      LDA	_Master_Counter
   4536  f7e8		       c9 78		      CMP	#120
   4537  f7ea		       b0 03		      BCS	.skipL097
   4538  f7ec				   .condpart35
   4539  f7ec		       4c 4a f8 	      jmp	.__Skip_20_Second_Counter
   4540  f7ef
   4541  f7ef				   .skipL097
   4542  f7ef				   .
   4543  f7ef							; 
   4544  f7ef
   4545  f7ef				   .
   4546  f7ef							; 
   4547  f7ef
   4548  f7ef				   .
   4549  f7ef							; 
   4550  f7ef
   4551  f7ef				   .
   4552  f7ef							; 
   4553  f7ef
   4554  f7ef				   .
   4555  f7ef							; 
   4556  f7ef
   4557  f7ef				   .L098		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   4558  f7ef
   4559  f7ef		       e6 d5		      INC	_Frame_Counter
   4560  f7f1		       a9 00		      LDA	#0
   4561  f7f3		       85 d4		      STA	_Master_Counter
   4562  f7f5				   .
   4563  f7f5							; 
   4564  f7f5
   4565  f7f5				   .
   4566  f7f5							; 
   4567  f7f5
   4568  f7f5				   .
   4569  f7f5							; 
   4570  f7f5
   4571  f7f5				   .
   4572  f7f5							; 
   4573  f7f5
   4574  f7f5				   .
   4575  f7f5							; 
   4576  f7f5
   4577  f7f5				   .
   4578  f7f5							; 
   4579  f7f5
   4580  f7f5				   .
   4581  f7f5							; 
   4582  f7f5
   4583  f7f5				   .
   4584  f7f5							; 
   4585  f7f5
   4586  f7f5				   .L099		;  if _Frame_Counter  >  9 then _Bit2_Game_Control{2}	=  0  :  _sc1 = _Score1_Mem  :	_sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem :  goto __Start_Restart
   4587  f7f5
   4588  f7f5		       a9 09		      LDA	#9
   4589  f7f7		       c5 d5		      CMP	_Frame_Counter
   4590  f7f9		       b0 15		      BCS	.skipL099
   4591  f7fb				   .condpart36
   4592  f7fb		       a5 ec		      LDA	_Bit2_Game_Control
   4593  f7fd		       29 fb		      AND	#251
   4594  f7ff		       85 ec		      STA	_Bit2_Game_Control
   4595  f801		       a5 e6		      LDA	_Score1_Mem
   4596  f803		       85 93		      STA	_sc1
   4597  f805		       a5 e7		      LDA	_Score2_Mem
   4598  f807		       85 94		      STA	_sc2
   4599  f809		       a5 e8		      LDA	_Score3_Mem
   4600  f80b		       85 95		      STA	_sc3
   4601  f80d		       4c 61 f4 	      jmp	.__Start_Restart
   4602  f810
   4603  f810				   .skipL099
   4604  f810				   .
   4605  f810							; 
   4606  f810
   4607  f810				   .
   4608  f810							; 
   4609  f810
   4610  f810				   .
   4611  f810							; 
   4612  f810
   4613  f810				   .
   4614  f810							; 
   4615  f810
   4616  f810				   .L0100		;  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   4617  f810
   4618  f810		       a5 ec		      LDA	_Bit6_Swap_Scores
   4619  f812		       29 40		      AND	#64
   4620  f814		       08		      PHP
   4621  f815		       a5 ec		      LDA	_Bit6_Swap_Scores
   4622  f817		       29 bf		      AND	#191
   4623  f819		       28		      PLP
   4624  f81a		       d0 02		      .byte.b	$D0, $02
   4625  f81c		       09 40		      ORA	#64
   4626  f81e		       85 ec		      STA	_Bit6_Swap_Scores
   4627  f820				   .
   4628  f820							; 
   4629  f820
   4630  f820				   .
   4631  f820							; 
   4632  f820
   4633  f820				   .
   4634  f820							; 
   4635  f820
   4636  f820				   .
   4637  f820							; 
   4638  f820
   4639  f820				   .L0101		;  if !_Bit6_Swap_Scores{6} then goto __GO_Current_Score
   4640  f820
   4641  f820		       24 ec		      BIT	_Bit6_Swap_Scores
   4642  f822		       70 03		      BVS	.skipL0101
   4643  f824				   .condpart37
   4644  f824		       4c 3a f8 	      jmp	.__GO_Current_Score
   4645  f827
   4646  f827				   .skipL0101
   4647  f827				   .
   4648  f827							; 
   4649  f827
   4650  f827				   .
   4651  f827							; 
   4652  f827
   4653  f827				   .
   4654  f827							; 
   4655  f827
   4656  f827				   .
   4657  f827							; 
   4658  f827
   4659  f827				   .L0102		;  scorecolor	=  $1C
   4660  f827
   4661  f827		       a9 1c		      LDA	#$1C
   4662  f829		       85 a3		      STA	scorecolor
   4663  f82b				   .
   4664  f82b							; 
   4665  f82b
   4666  f82b				   .L0103		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   4667  f82b
   4668  f82b		       a5 e9		      LDA	_High_Score1
   4669  f82d		       85 93		      STA	_sc1
   4670  f82f		       a5 ea		      LDA	_High_Score2
   4671  f831		       85 94		      STA	_sc2
   4672  f833		       a5 eb		      LDA	_High_Score3
   4673  f835		       85 95		      STA	_sc3
   4674  f837				   .
   4675  f837							; 
   4676  f837
   4677  f837				   .L0104		;  goto __Skip_20_Second_Counter
   4678  f837
   4679  f837		       4c 4a f8 	      jmp	.__Skip_20_Second_Counter
   4680  f83a
   4681  f83a				   .
   4682  f83a							; 
   4683  f83a
   4684  f83a				   .
   4685  f83a							; 
   4686  f83a
   4687  f83a				   .
   4688  f83a							; 
   4689  f83a
   4690  f83a				   .
   4691  f83a							; 
   4692  f83a
   4693  f83a				   .__GO_Current_Score
   4694  f83a							; __GO_Current_Score
   4695  f83a
   4696  f83a				   .
   4697  f83a							; 
   4698  f83a
   4699  f83a				   .L0105		;  scorecolor	=  $AE
   4700  f83a
   4701  f83a		       a9 ae		      LDA	#$AE
   4702  f83c		       85 a3		      STA	scorecolor
   4703  f83e				   .
   4704  f83e							; 
   4705  f83e
   4706  f83e				   .L0106		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   4707  f83e
   4708  f83e		       a5 e6		      LDA	_Score1_Mem
   4709  f840		       85 93		      STA	_sc1
   4710  f842		       a5 e7		      LDA	_Score2_Mem
   4711  f844		       85 94		      STA	_sc2
   4712  f846		       a5 e8		      LDA	_Score3_Mem
   4713  f848		       85 95		      STA	_sc3
   4714  f84a				   .
   4715  f84a							; 
   4716  f84a
   4717  f84a				   .__Skip_20_Second_Counter
   4718  f84a							; __Skip_20_Second_Counter
   4719  f84a
   4720  f84a				   .
   4721  f84a							; 
   4722  f84a
   4723  f84a				   .
   4724  f84a							; 
   4725  f84a
   4726  f84a				   .
   4727  f84a							; 
   4728  f84a
   4729  f84a				   .
   4730  f84a							; 
   4731  f84a
   4732  f84a				   .
   4733  f84a							; 
   4734  f84a
   4735  f84a				   .
   4736  f84a							; 
   4737  f84a
   4738  f84a				   .
   4739  f84a							; 
   4740  f84a
   4741  f84a				   .L0107		;  COLUBK  =  $44  :  COLUPF  =  $2C
   4742  f84a
   4743  f84a		       a9 44		      LDA	#$44
   4744  f84c		       85 09		      STA	COLUBK
   4745  f84e		       a9 2c		      LDA	#$2C
   4746  f850		       85 08		      STA	COLUPF
   4747  f852				   .
   4748  f852							; 
   4749  f852
   4750  f852				   .
   4751  f852							; 
   4752  f852
   4753  f852				   .
   4754  f852							; 
   4755  f852
   4756  f852				   .
   4757  f852							; 
   4758  f852
   4759  f852				   .
   4760  f852							; 
   4761  f852
   4762  f852				   .
   4763  f852							; 
   4764  f852
   4765  f852				   .L0108		;  if _Frame_Counter  >  0 then COLUBK  =  $D2  :  COLUPF  =  $DA
   4766  f852
   4767  f852		       a9 00		      LDA	#0
   4768  f854		       c5 d5		      CMP	_Frame_Counter
   4769  f856		       b0 08		      BCS	.skipL0108
   4770  f858				   .condpart38
   4771  f858		       a9 d2		      LDA	#$D2
   4772  f85a		       85 09		      STA	COLUBK
   4773  f85c		       a9 da		      LDA	#$DA
   4774  f85e		       85 08		      STA	COLUPF
   4775  f860				   .skipL0108
   4776  f860				   .
   4777  f860							; 
   4778  f860
   4779  f860				   .
   4780  f860							; 
   4781  f860
   4782  f860				   .
   4783  f860							; 
   4784  f860
   4785  f860				   .
   4786  f860							; 
   4787  f860
   4788  f860				   .
   4789  f860							; 
   4790  f860
   4791  f860				   .
   4792  f860							; 
   4793  f860
   4794  f860				   .
   4795  f860							; 
   4796  f860
   4797  f860				   .L0109		;  drawscreen
   4798  f860
   4799  f860		       20 c1 f3 	      jsr	drawscreen
   4800  f863				   .
   4801  f863							; 
   4802  f863
   4803  f863				   .
   4804  f863							; 
   4805  f863
   4806  f863				   .
   4807  f863							; 
   4808  f863
   4809  f863				   .
   4810  f863							; 
   4811  f863
   4812  f863				   .
   4813  f863							; 
   4814  f863
   4815  f863				   .
   4816  f863							; 
   4817  f863
   4818  f863				   .
   4819  f863							; 
   4820  f863
   4821  f863				   .
   4822  f863							; 
   4823  f863
   4824  f863				   .
   4825  f863							; 
   4826  f863
   4827  f863				   .
   4828  f863							; 
   4829  f863
   4830  f863				   .
   4831  f863							; 
   4832  f863
   4833  f863				   .
   4834  f863							; 
   4835  f863
   4836  f863				   .
   4837  f863							; 
   4838  f863
   4839  f863				   .
   4840  f863							; 
   4841  f863
   4842  f863				   .L0110		;  if _Frame_Counter  =  0 then goto __Game_Over_Loop
   4843  f863
   4844  f863		       a5 d5		      LDA	_Frame_Counter
   4845  f865		       c9 00		      CMP	#0
   4846  f867		       d0 03		      BNE	.skipL0110
   4847  f869				   .condpart39
   4848  f869		       4c e4 f7 	      jmp	.__Game_Over_Loop
   4849  f86c
   4850  f86c				   .skipL0110
   4851  f86c				   .
   4852  f86c							; 
   4853  f86c
   4854  f86c				   .
   4855  f86c							; 
   4856  f86c
   4857  f86c				   .
   4858  f86c							; 
   4859  f86c
   4860  f86c				   .
   4861  f86c							; 
   4862  f86c
   4863  f86c				   .
   4864  f86c							; 
   4865  f86c
   4866  f86c				   .L0111		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Game_Over_Loop
   4867  f86c
   4868  f86c		       a9 01		      lda	#1
   4869  f86e		       2c 82 02 	      bit	SWCHB
   4870  f871		       f0 0d		      BEQ	.skipL0111
   4871  f873				   .condpart40
   4872  f873		       24 0c		      bit	INPT4
   4873  f875		       10 09		      BPL	.skip40then
   4874  f877				   .condpart41
   4875  f877		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4876  f879		       29 fe		      AND	#254
   4877  f87b		       85 ec		      STA	_Bit0_Reset_Restrainer
   4878  f87d		       4c e4 f7 	      jmp	.__Game_Over_Loop
   4879  f880
   4880  f880				   .skip40then
   4881  f880				   .skipL0111
   4882  f880				   .
   4883  f880							; 
   4884  f880
   4885  f880				   .
   4886  f880							; 
   4887  f880
   4888  f880				   .
   4889  f880							; 
   4890  f880
   4891  f880				   .
   4892  f880							; 
   4893  f880
   4894  f880				   .
   4895  f880							; 
   4896  f880
   4897  f880				   .L0112		;  if _Bit0_Reset_Restrainer{0} then goto __Game_Over_Loop
   4898  f880
   4899  f880		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4900  f882		       4a		      LSR
   4901  f883		       90 03		      BCC	.skipL0112
   4902  f885				   .condpart42
   4903  f885		       4c e4 f7 	      jmp	.__Game_Over_Loop
   4904  f888
   4905  f888				   .skipL0112
   4906  f888				   .
   4907  f888							; 
   4908  f888
   4909  f888				   .
   4910  f888							; 
   4911  f888
   4912  f888				   .
   4913  f888							; 
   4914  f888
   4915  f888				   .
   4916  f888							; 
   4917  f888
   4918  f888				   .L0113		;  goto __Start_Restart
   4919  f888		       4c 61 f4 	      jmp	.__Start_Restart
   4920  f88b					      if	ECHOFIRST
      1809 bytes of ROM space left
   4921  f88b					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4922  f88b					      endif
   4923  f88b		       00 01	   ECHOFIRST  =	1
   4924  f88b
   4925  f88b
   4926  f88b
   4927  f88b							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4928  f88b
   4929  f88b							; feel free to modify the score graphics - just keep each digit 8 high
   4930  f88b							; and keep the conditional compilation stuff intact
   4931  f88b				  -	      ifconst	ROM2k
   4932  f88b				  -	      ORG	$F7AC-8
   4933  f88b					      else
   4934  f88b				  -	      ifconst	bankswitch
   4935  f88b				  -	      if	bankswitch == 8
   4936  f88b				  -	      ORG	$2F94-bscode_length
   4937  f88b				  -	      RORG	$FF94-bscode_length
   4938  f88b				  -	      endif
   4939  f88b				  -	      if	bankswitch == 16
   4940  f88b				  -	      ORG	$4F94-bscode_length
   4941  f88b				  -	      RORG	$FF94-bscode_length
   4942  f88b				  -	      endif
   4943  f88b				  -	      if	bankswitch == 32
   4944  f88b				  -	      ORG	$8F94-bscode_length
   4945  f88b				  -	      RORG	$FF94-bscode_length
   4946  f88b				  -	      endif
   4947  f88b				  -	      if	bankswitch == 64
   4948  f88b				  -	      ORG	$10F80-bscode_length
   4949  f88b				  -	      RORG	$1FF80-bscode_length
   4950  f88b				  -	      endif
   4951  f88b					      else
   4952  ff9c					      ORG	$FF9C
   4953  ff9c					      endif
   4954  ff9c					      endif
   4955  ff9c
   4956  ff9c							; font equates
   4957  ff9c		       00 01	   .21stcentury =	1
   4958  ff9c		       00 02	   alarmclock =	2
   4959  ff9c		       00 03	   handwritten =	3
   4960  ff9c		       00 04	   interrupted =	4
   4961  ff9c		       00 05	   retroputer =	5
   4962  ff9c		       00 06	   whimsey    =	6
   4963  ff9c		       00 07	   tiny       =	7
   4964  ff9c		       00 08	   hex	      =	8
   4965  ff9c
   4966  ff9c				  -	      ifconst	font
   4967  ff9c				  -	      if	font == hex
   4968  ff9c				  -	      ORG	. - 48
   4969  ff9c				  -	      endif
   4970  ff9c					      endif
   4971  ff9c
   4972  ff9c				   scoretable
   4973  ff9c
   4974  ff9c				  -	      ifconst	font
   4975  ff9c				  -	      if	font == .21stcentury
   4976  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4977  ff9c				  -	      endif
   4978  ff9c				  -	      if	font == alarmclock
   4979  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4980  ff9c				  -	      endif
   4981  ff9c				  -	      if	font == handwritten
   4982  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4983  ff9c				  -	      endif
   4984  ff9c				  -	      if	font == interrupted
   4985  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4986  ff9c				  -	      endif
   4987  ff9c				  -	      if	font == retroputer
   4988  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4989  ff9c				  -	      endif
   4990  ff9c				  -	      if	font == whimsey
   4991  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4992  ff9c				  -	      endif
   4993  ff9c				  -	      if	font == tiny
   4994  ff9c				  -	      include	"score_graphics.asm.tiny"
   4995  ff9c				  -	      endif
   4996  ff9c				  -	      if	font == hex
   4997  ff9c				  -	      include	"score_graphics.asm.hex"
   4998  ff9c				  -	      endif
   4999  ff9c					      else		; default font
   5000  ff9c
   5001  ff9c		       3c		      .byte.b	%00111100
   5002  ff9d		       66		      .byte.b	%01100110
   5003  ff9e		       66		      .byte.b	%01100110
   5004  ff9f		       66		      .byte.b	%01100110
   5005  ffa0		       66		      .byte.b	%01100110
   5006  ffa1		       66		      .byte.b	%01100110
   5007  ffa2		       66		      .byte.b	%01100110
   5008  ffa3		       3c		      .byte.b	%00111100
   5009  ffa4
   5010  ffa4		       7e		      .byte.b	%01111110
   5011  ffa5		       18		      .byte.b	%00011000
   5012  ffa6		       18		      .byte.b	%00011000
   5013  ffa7		       18		      .byte.b	%00011000
   5014  ffa8		       18		      .byte.b	%00011000
   5015  ffa9		       38		      .byte.b	%00111000
   5016  ffaa		       18		      .byte.b	%00011000
   5017  ffab		       08		      .byte.b	%00001000
   5018  ffac
   5019  ffac		       7e		      .byte.b	%01111110
   5020  ffad		       60		      .byte.b	%01100000
   5021  ffae		       60		      .byte.b	%01100000
   5022  ffaf		       3c		      .byte.b	%00111100
   5023  ffb0		       06		      .byte.b	%00000110
   5024  ffb1		       06		      .byte.b	%00000110
   5025  ffb2		       46		      .byte.b	%01000110
   5026  ffb3		       3c		      .byte.b	%00111100
   5027  ffb4
   5028  ffb4		       3c		      .byte.b	%00111100
   5029  ffb5		       46		      .byte.b	%01000110
   5030  ffb6		       06		      .byte.b	%00000110
   5031  ffb7		       06		      .byte.b	%00000110
   5032  ffb8		       1c		      .byte.b	%00011100
   5033  ffb9		       06		      .byte.b	%00000110
   5034  ffba		       46		      .byte.b	%01000110
   5035  ffbb		       3c		      .byte.b	%00111100
   5036  ffbc
   5037  ffbc		       0c		      .byte.b	%00001100
   5038  ffbd		       0c		      .byte.b	%00001100
   5039  ffbe		       7e		      .byte.b	%01111110
   5040  ffbf		       4c		      .byte.b	%01001100
   5041  ffc0		       4c		      .byte.b	%01001100
   5042  ffc1		       2c		      .byte.b	%00101100
   5043  ffc2		       1c		      .byte.b	%00011100
   5044  ffc3		       0c		      .byte.b	%00001100
   5045  ffc4
   5046  ffc4		       3c		      .byte.b	%00111100
   5047  ffc5		       46		      .byte.b	%01000110
   5048  ffc6		       06		      .byte.b	%00000110
   5049  ffc7		       06		      .byte.b	%00000110
   5050  ffc8		       3c		      .byte.b	%00111100
   5051  ffc9		       60		      .byte.b	%01100000
   5052  ffca		       60		      .byte.b	%01100000
   5053  ffcb		       7e		      .byte.b	%01111110
   5054  ffcc
   5055  ffcc		       3c		      .byte.b	%00111100
   5056  ffcd		       66		      .byte.b	%01100110
   5057  ffce		       66		      .byte.b	%01100110
   5058  ffcf		       66		      .byte.b	%01100110
   5059  ffd0		       7c		      .byte.b	%01111100
   5060  ffd1		       60		      .byte.b	%01100000
   5061  ffd2		       62		      .byte.b	%01100010
   5062  ffd3		       3c		      .byte.b	%00111100
   5063  ffd4
   5064  ffd4		       30		      .byte.b	%00110000
   5065  ffd5		       30		      .byte.b	%00110000
   5066  ffd6		       30		      .byte.b	%00110000
   5067  ffd7		       18		      .byte.b	%00011000
   5068  ffd8		       0c		      .byte.b	%00001100
   5069  ffd9		       06		      .byte.b	%00000110
   5070  ffda		       42		      .byte.b	%01000010
   5071  ffdb		       3e		      .byte.b	%00111110
   5072  ffdc
   5073  ffdc		       3c		      .byte.b	%00111100
   5074  ffdd		       66		      .byte.b	%01100110
   5075  ffde		       66		      .byte.b	%01100110
   5076  ffdf		       66		      .byte.b	%01100110
   5077  ffe0		       3c		      .byte.b	%00111100
   5078  ffe1		       66		      .byte.b	%01100110
   5079  ffe2		       66		      .byte.b	%01100110
   5080  ffe3		       3c		      .byte.b	%00111100
   5081  ffe4
   5082  ffe4		       3c		      .byte.b	%00111100
   5083  ffe5		       46		      .byte.b	%01000110
   5084  ffe6		       06		      .byte.b	%00000110
   5085  ffe7		       3e		      .byte.b	%00111110
   5086  ffe8		       66		      .byte.b	%01100110
   5087  ffe9		       66		      .byte.b	%01100110
   5088  ffea		       66		      .byte.b	%01100110
   5089  ffeb		       3c		      .byte.b	%00111100
   5090  ffec
   5091  ffec					      ifnconst	DPC_kernel_options
   5092  ffec
   5093  ffec		       00		      .byte.b	%00000000
   5094  ffed		       00		      .byte.b	%00000000
   5095  ffee		       00		      .byte.b	%00000000
   5096  ffef		       00		      .byte.b	%00000000
   5097  fff0		       00		      .byte.b	%00000000
   5098  fff1		       00		      .byte.b	%00000000
   5099  fff2		       00		      .byte.b	%00000000
   5100  fff3		       00		      .byte.b	%00000000
   5101  fff4
   5102  fff4					      endif
   5103  fff4
   5104  fff4					      endif
   5105  fff4
   5106  fff4				  -	      ifconst	ROM2k
   5107  fff4				  -	      ORG	$F7FC
   5108  fff4					      else
   5109  fff4				  -	      ifconst	bankswitch
   5110  fff4				  -	      if	bankswitch == 8
   5111  fff4				  -	      ORG	$2FF4-bscode_length
   5112  fff4				  -	      RORG	$FFF4-bscode_length
   5113  fff4				  -	      endif
   5114  fff4				  -	      if	bankswitch == 16
   5115  fff4				  -	      ORG	$4FF4-bscode_length
   5116  fff4				  -	      RORG	$FFF4-bscode_length
   5117  fff4				  -	      endif
   5118  fff4				  -	      if	bankswitch == 32
   5119  fff4				  -	      ORG	$8FF4-bscode_length
   5120  fff4				  -	      RORG	$FFF4-bscode_length
   5121  fff4				  -	      endif
   5122  fff4				  -	      if	bankswitch == 64
   5123  fff4				  -	      ORG	$10FE0-bscode_length
   5124  fff4				  -	      RORG	$1FFE0-bscode_length
   5125  fff4				  -	      endif
   5126  fff4					      else
   5127  fffc					      ORG	$FFFC
   5128  fffc					      endif
   5129  fffc					      endif
   5130  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5131  fffc
   5132  fffc				  -	      ifconst	bankswitch
   5133  fffc				  -	      if	bankswitch == 8
   5134  fffc				  -	      ORG	$2FFC
   5135  fffc				  -	      RORG	$FFFC
   5136  fffc				  -	      endif
   5137  fffc				  -	      if	bankswitch == 16
   5138  fffc				  -	      ORG	$4FFC
   5139  fffc				  -	      RORG	$FFFC
   5140  fffc				  -	      endif
   5141  fffc				  -	      if	bankswitch == 32
   5142  fffc				  -	      ORG	$8FFC
   5143  fffc				  -	      RORG	$FFFC
   5144  fffc				  -	      endif
   5145  fffc				  -	      if	bankswitch == 64
   5146  fffc				  -	      ORG	$10FF0
   5147  fffc				  -	      RORG	$1FFF0
   5148  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5149  fffc				  -	      ORG	$10FF8
   5150  fffc				  -	      RORG	$1FFF8
   5151  fffc				  -	      ifconst	superchip
   5152  fffc				  -	      .byte	"E","F","S","C"
   5153  fffc				  -	      else
   5154  fffc				  -	      .byte	"E","F","E","F"
   5155  fffc				  -	      endif
   5156  fffc				  -	      ORG	$10FFC
   5157  fffc				  -	      RORG	$1FFFC
   5158  fffc				  -	      endif
   5159  fffc					      else
   5160  fffc				  -	      ifconst	ROM2k
   5161  fffc				  -	      ORG	$F7FC
   5162  fffc					      else
   5163  fffc					      ORG	$FFFC
   5164  fffc					      endif
   5165  fffc					      endif
   5166  fffc		       00 f0		      .word.w	(start & $ffff)
   5167  fffe		       00 f0		      .word.w	(start & $ffff)

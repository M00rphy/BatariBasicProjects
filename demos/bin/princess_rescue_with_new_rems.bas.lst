------- FILE e:\Documents\bB\demos\princess_rescue_with_new_rems.bas.asm LEVEL 1 PASS 3
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE e:\Documents\bB\demos\princess_rescue_with_new_rems.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE e:\Documents\bB\demos\princess_rescue_with_new_rems.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  9000 ????				      include	"2600basic.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 e4	   _FinalMusicData =	q
      4  9000 ????	       00 e4	   _DeathMusicData =	q
      5  9000 ????	       00 e4	   _FanFareMusicData =	q
      6  9000 ????	       00 e4	   _UWMusicData =	q
      7  9000 ????	       00 e4	   _StarPowerMusicData =	q
      8  9000 ????	       00 e4	   _OWMusicData =	q
      9  9000 ????	       01 00	   _Level16_length =	.skipL01385-_Level16
     10  9000 ????
     11  9000 ????	       01 00	   _Level15B_length =	.skipL01384-_Level15B
     12  9000 ????
     13  9000 ????	       01 00	   _Level15A_length =	.skipL01383-_Level15A
     14  9000 ????
     15  9000 ????	       01 00	   _Level14B_length =	.skipL01382-_Level14B
     16  9000 ????
     17  9000 ????	       01 00	   _Level14A_length =	.skipL01381-_Level14A
     18  9000 ????
     19  9000 ????	       01 00	   _Level13B_length =	.skipL01380-_Level13B
     20  9000 ????
     21  9000 ????	       01 00	   _Level13A_length =	.skipL01379-_Level13A
     22  9000 ????
     23  9000 ????	       01 00	   _Level12_length =	.skipL01378-_Level12
     24  9000 ????
     25  9000 ????	       01 00	   _Level11B_length =	.skipL01377-_Level11B
     26  9000 ????
     27  9000 ????	       01 00	   _Level11A_length =	.skipL01376-_Level11A
     28  9000 ????
     29  9000 ????	       01 00	   _Level10B_length =	.skipL01375-_Level10B
     30  9000 ????
     31  9000 ????	       01 00	   _Level10A_length =	.skipL01374-_Level10A
     32  9000 ????
     33  9000 ????	       01 00	   _Level9B_length =	.skipL01373-_Level9B
     34  9000 ????
     35  9000 ????	       01 00	   _Level9A_length =	.skipL01372-_Level9A
     36  9000 ????
     37  9000 ????	       01 00	   _Data_Level8_length =	.skipL01350-_Data_Level8
     38  9000 ????
     39  9000 ????	       01 00	   _Data_Level7B_length =	.skipL01349-_Data_Level7B
     40  9000 ????
     41  9000 ????	       01 00	   _Data_Level7A_length =	.skipL01348-_Data_Level7A
     42  9000 ????
     43  9000 ????	       01 00	   _Data_Level6B_length =	.skipL01347-_Data_Level6B
     44  9000 ????
     45  9000 ????	       01 00	   _Data_Level6A_length =	.skipL01346-_Data_Level6A
     46  9000 ????
     47  9000 ????	       01 00	   _Data_Level5B_length =	.skipL01345-_Data_Level5B
     48  9000 ????
     49  9000 ????	       01 00	   _Data_Level5A_length =	.skipL01344-_Data_Level5A
     50  9000 ????
     51  9000 ????	       01 00	   _Data_Level4_length =	.skipL01343-_Data_Level4
     52  9000 ????
     53  9000 ????	       01 00	   _Data_Level3B_length =	.skipL01342-_Data_Level3B
     54  9000 ????
     55  9000 ????	       01 00	   _Data_Level3A_length =	.skipL01341-_Data_Level3A
     56  9000 ????
     57  9000 ????	       01 00	   _Data_Level2B_length =	.skipL01340-_Data_Level2B
     58  9000 ????
     59  9000 ????	       01 00	   _Data_Level2A_length =	.skipL01339-_Data_Level2A
     60  9000 ????
     61  9000 ????	       01 00	   _Data_Level1B_length =	.skipL01338-_Data_Level1B
     62  9000 ????
     63  9000 ????	       01 00	   _Data_Level1A_length =	.skipL01337-_Data_Level1A
     64  9000 ????
     65  9000 ????	       00 e4	   _GameOverMusicData =	q
     66  9000 ????	       00 20	   bscode_length =	32
     67  9000 ????	       00 01	   pfscore    =	1
     68  9000 ????
     69  9000 ????	       00 40	   _Bowser_Jr =	64
     70  9000 ????
     71  9000 ????	       00 2e	   _Two_Spineys =	46
     72  9000 ????
     73  9000 ????	       00 2c	   _Two_Thwomps =	44
     74  9000 ????
     75  9000 ????	       00 2a	   _Two_Goombas =	42
     76  9000 ????
     77  9000 ????	       00 28	   _Thwomp    =	40
     78  9000 ????
     79  9000 ????	       00 27	   _P_Plant_39 =	39
     80  9000 ????
     81  9000 ????	       00 26	   _Trampoline =	38
     82  9000 ????
     83  9000 ????	       00 24	   _Red_Shell =	36
     84  9000 ????
     85  9000 ????	       00 22	   _Green_Shell =	34
     86  9000 ????
     87  9000 ????	       00 20	   _Beetle_Shell =	32
     88  9000 ????
     89  9000 ????	       00 1f	   _P_Plant_31 =	31
     90  9000 ????
     91  9000 ????	       00 1e	   _Pirahna_Plant =	30
     92  9000 ????
     93  9000 ????	       00 1c	   _Kinetic_Platforms =	28
     94  9000 ????
     95  9000 ????	       00 1a	   _1up_Mushroom =	26
     96  9000 ????
     97  9000 ????	       00 18	   _Starman   =	24
     98  9000 ????
     99  9000 ????	       00 16	   _Silver_Coin =	22
    100  9000 ????
    101  9000 ????	       00 14	   _Flagpole  =	20
    102  9000 ????
    103  9000 ????	       00 12	   _Fireball_Enemy =	18
    104  9000 ????
    105  9000 ????	       00 10	   _Spiney_Ball =	16
    106  9000 ????
    107  9000 ????	       00 0e	   _Flying_Red_Koopa =	14
    108  9000 ????
    109  9000 ????	       00 0c	   _Bullet_Bill =	12
    110  9000 ????
    111  9000 ????	       00 0a	   _Flying_Green_Koopa =	10
    112  9000 ????
    113  9000 ????	       00 08	   _Red_Koopa =	8
    114  9000 ????
    115  9000 ????	       00 06	   _Spiney    =	6
    116  9000 ????
    117  9000 ????	       00 04	   _Beetle    =	4
    118  9000 ????
    119  9000 ????	       00 02	   _Green_Koopa =	2
    120  9000 ????
    121  9000 ????	       00 00	   _Goomba    =	0
    122  9000 ????
    123  9000 ????	       00 ea	   _Level     =	w
    124  9000 ????
    125  9000 ????	       00 e9	   _World     =	v
    126  9000 ????
    127  9000 ????	       00 e8	   _Temp_u_Freq =	u
    128  9000 ????
    129  9000 ????	       00 e8	   _Temp_u_PF_Row =	u
    130  9000 ????
    131  9000 ????	       00 e8	   _Temp_u_PF_Column =	u
    132  9000 ????
    133  9000 ????	       00 e7	   _Moving_Shell_Y_Coordinate =	t
    134  9000 ????
    135  9000 ????	       00 e6	   _Moving_Shell_X_Coordinate =	s
    136  9000 ????
    137  9000 ????	       00 e3	   _Music_Duration =	p
    138  9000 ????
    139  9000 ????	       00 e2	   _Farthest_Traveled_On_Level =	o
    140  9000 ????
    141  9000 ????	       00 e1	   _Momentum_Up_Down =	n
    142  9000 ????
    143  9000 ????	       00 e0	   _Momentum_Left_Right =	m
    144  9000 ????
    145  9000 ????	       00 df	   _Lives_Counter =	l
    146  9000 ????
    147  9000 ????	       00 de	   _Star_Invincibility_Timer =	k
    148  9000 ????
    149  9000 ????	       00 dd	   _Enemy_Momentum =	j
    150  9000 ????
    151  9000 ????	       00 dc	   _Enemy_Type =	i
    152  9000 ????
    153  9000 ????	       00 db	   _Object_Scroll_In_Data =	h
    154  9000 ????
    155  9000 ????	       00 da	   _Bit7_Mario_On_Off =	g
    156  9000 ????
    157  9000 ????	       00 da	   _Bit6_Checkpoint_Flag =	g
    158  9000 ????
    159  9000 ????	       00 da	   _Bit5_Moving_Turtle_Shell_Direction =	g
    160  9000 ????
    161  9000 ????	       00 da	   _Bit4_Enemy_Dead_Flag =	g
    162  9000 ????
    163  9000 ????	       00 da	   _Bit3_Enemy_Direction =	g
    164  9000 ????
    165  9000 ????	       00 da	   _Bit2_Mario_Fireball_Direction =	g
    166  9000 ????
    167  9000 ????	       00 da	   _Bit1_Mario_Fireball_Going_Up =	g
    168  9000 ????
    169  9000 ????	       00 da	   _Bit0_Mario_Fireball_Going_Down =	g
    170  9000 ????
    171  9000 ????	       00 da	   _BitOp_Extra_Bit_Flags =	g
    172  9000 ????
    173  9000 ????	       00 d9	   _Bit7_2nd_Quest =	f
    174  9000 ????
    175  9000 ????	       00 d9	   _Bit1_Genesis_Button_Pressed =	f
    176  9000 ????
    177  9000 ????	       00 d9	   _Bit0_Genesis_Controller =	f
    178  9000 ????
    179  9000 ????	       00 d9	   _BitOp_Extra_Bits =	f
    180  9000 ????
    181  9000 ????	       00 d8	   _Boss_Life =	e
    182  9000 ????
    183  9000 ????	       00 d8	   _Level_Timer =	e
    184  9000 ????
    185  9000 ????	       00 d7	   _Bit7_Mario_Invincibility =	d
    186  9000 ????
    187  9000 ????	       00 d7	   _Bit6_Regular_Mario =	d
    188  9000 ????
    189  9000 ????	       00 d7	   _Bit5_Ducking_Flag =	d
    190  9000 ????
    191  9000 ????	       00 d7	   _Bit4_Firey_Mario_Power =	d
    192  9000 ????
    193  9000 ????	       00 d7	   _Bit3_Super_Mario_Power =	d
    194  9000 ????
    195  9000 ????	       00 d7	   _Bit2_Fire_Button_Pressed =	d
    196  9000 ????
    197  9000 ????	       00 d7	   _Bit1_Jumping_Flag =	d
    198  9000 ????
    199  9000 ????	       00 d7	   _Bit0_Player_Facing_Direction =	d
    200  9000 ????
    201  9000 ????	       00 d7	   _BitOp_Player_Data_Flags =	d
    202  9000 ????
    203  9000 ????	       00 d6	   _Coin_Counter =	c
    204  9000 ????
    205  9000 ????	       00 d5	   _Level_Data_Pointer =	b
    206  9000 ????
    207  9000 ????	       00 d4	   _Animation_Timer =	a
    208  9000 ????
    209  9000 ????	       00 07	   bs_mask    =	7
    210  9000 ????	       00 20	   bankswitch =	32
    211  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    212  9000 ????	       00 2b	   vblank_time =	43
    213  9000 ????	       00 25	   overscan_time =	37
    214  9000 ????	       00 01	   PFcolors   =	1
    215  9000 ????	       00 01	   player1colors =	1
    216  9000 ????	       00 01	   player1colors =	1
    217  9000 ????	       00 01	   playercolors =	1
------- FILE 2600basic.h
      7  9000 ????
      8  9000 ????	       00 80	   player0x   =	$80
      9  9000 ????	       00 81	   player1x   =	$81
     10  9000 ????	       00 82	   missile0x  =	$82
     11  9000 ????	       00 83	   missile1x  =	$83
     12  9000 ????	       00 84	   ballx      =	$84
     13  9000 ????
     14  9000 ????	       00 85	   objecty    =	$85
     15  9000 ????	       00 85	   player0y   =	$85
     16  9000 ????	       00 86	   player1y   =	$86
     17  9000 ????	       00 87	   missile1height =	$87
     18  9000 ????	       00 88	   missile1y  =	$88
     19  9000 ????	       00 89	   bally      =	$89
     20  9000 ????
     21  9000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  9000 ????
     23  9000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  9000 ????	       00 8a	   player0pointerlo =	$8A
     25  9000 ????	       00 8b	   player0pointerhi =	$8B
     26  9000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  9000 ????	       00 8c	   player1pointerlo =	$8C
     28  9000 ????	       00 8d	   player1pointerhi =	$8D
     29  9000 ????
     30  9000 ????	       00 8e	   player0height =	$8E
     31  9000 ????	       00 8f	   player1height =	$8F
     32  9000 ????	       00 90	   missile0height =	$90
     33  9000 ????	       00 91	   missile0y  =	$91
     34  9000 ????	       00 92	   ballheight =	$92
     35  9000 ????
     36  9000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  9000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  9000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  9000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  9000 ????
     41  9000 ????	       00 93	   score      =	$93	; $93-$95
     42  9000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  9000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  9000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  9000 ????	       00 9e	   temp3      =	$9E
     46  9000 ????	       00 9f	   temp4      =	$9F
     47  9000 ????	       00 a0	   temp5      =	$A0
     48  9000 ????	       00 a1	   temp6      =	$A1
     49  9000 ????
     50  9000 ????	       00 a2	   rand       =	$A2
     51  9000 ????	       00 a3	   scorecolor =	$A3
     52  9000 ????
     53  9000 ????	       00 a4	   var0       =	$A4
     54  9000 ????	       00 a5	   var1       =	$A5
     55  9000 ????	       00 a6	   var2       =	$A6
     56  9000 ????	       00 a7	   var3       =	$A7
     57  9000 ????	       00 a8	   var4       =	$A8
     58  9000 ????	       00 a9	   var5       =	$A9
     59  9000 ????	       00 aa	   var6       =	$AA
     60  9000 ????	       00 ab	   var7       =	$AB
     61  9000 ????	       00 ac	   var8       =	$AC
     62  9000 ????	       00 ad	   var9       =	$AD
     63  9000 ????	       00 ae	   var10      =	$AE
     64  9000 ????	       00 af	   var11      =	$AF
     65  9000 ????	       00 b0	   var12      =	$B0
     66  9000 ????	       00 b1	   var13      =	$B1
     67  9000 ????	       00 b2	   var14      =	$B2
     68  9000 ????	       00 b3	   var15      =	$B3
     69  9000 ????	       00 b4	   var16      =	$B4
     70  9000 ????	       00 b5	   var17      =	$B5
     71  9000 ????	       00 b6	   var18      =	$B6
     72  9000 ????	       00 b7	   var19      =	$B7
     73  9000 ????	       00 b8	   var20      =	$B8
     74  9000 ????	       00 b9	   var21      =	$B9
     75  9000 ????	       00 ba	   var22      =	$BA
     76  9000 ????	       00 bb	   var23      =	$BB
     77  9000 ????	       00 bc	   var24      =	$BC
     78  9000 ????	       00 bd	   var25      =	$BD
     79  9000 ????	       00 be	   var26      =	$BE
     80  9000 ????	       00 bf	   var27      =	$BF
     81  9000 ????	       00 c0	   var28      =	$C0
     82  9000 ????	       00 c1	   var29      =	$C1
     83  9000 ????	       00 c2	   var30      =	$C2
     84  9000 ????	       00 c3	   var31      =	$C3
     85  9000 ????	       00 c4	   var32      =	$C4
     86  9000 ????	       00 c5	   var33      =	$C5
     87  9000 ????	       00 c6	   var34      =	$C6
     88  9000 ????	       00 c7	   var35      =	$C7
     89  9000 ????	       00 c8	   var36      =	$C8
     90  9000 ????	       00 c9	   var37      =	$C9
     91  9000 ????	       00 ca	   var38      =	$CA
     92  9000 ????	       00 cb	   var39      =	$CB
     93  9000 ????	       00 cc	   var40      =	$CC
     94  9000 ????	       00 cd	   var41      =	$CD
     95  9000 ????	       00 ce	   var42      =	$CE
     96  9000 ????	       00 cf	   var43      =	$CF
     97  9000 ????	       00 d0	   var44      =	$D0
     98  9000 ????	       00 d1	   var45      =	$D1
     99  9000 ????	       00 d2	   var46      =	$D2
    100  9000 ????	       00 d3	   var47      =	$D3
    101  9000 ????
    102  9000 ????	       00 d4	   A	      =	$d4
    103  9000 ????	       00 d4	   a	      =	$d4
    104  9000 ????	       00 d5	   B	      =	$d5
    105  9000 ????	       00 d5	   b	      =	$d5
    106  9000 ????	       00 d6	   C	      =	$d6
    107  9000 ????	       00 d6	   c	      =	$d6
    108  9000 ????	       00 d7	   D	      =	$d7
    109  9000 ????	       00 d7	   d	      =	$d7
    110  9000 ????	       00 d8	   E	      =	$d8
    111  9000 ????	       00 d8	   e	      =	$d8
    112  9000 ????	       00 d9	   F	      =	$d9
    113  9000 ????	       00 d9	   f	      =	$d9
    114  9000 ????	       00 da	   G	      =	$da
    115  9000 ????	       00 da	   g	      =	$da
    116  9000 ????	       00 db	   H	      =	$db
    117  9000 ????	       00 db	   h	      =	$db
    118  9000 ????	       00 dc	   I	      =	$dc
    119  9000 ????	       00 dc	   i	      =	$dc
    120  9000 ????	       00 dd	   J	      =	$dd
    121  9000 ????	       00 dd	   j	      =	$dd
    122  9000 ????	       00 de	   K	      =	$de
    123  9000 ????	       00 de	   k	      =	$de
    124  9000 ????	       00 df	   L	      =	$df
    125  9000 ????	       00 df	   l	      =	$df
    126  9000 ????	       00 e0	   M	      =	$e0
    127  9000 ????	       00 e0	   m	      =	$e0
    128  9000 ????	       00 e1	   N	      =	$e1
    129  9000 ????	       00 e1	   n	      =	$e1
    130  9000 ????	       00 e2	   O	      =	$e2
    131  9000 ????	       00 e2	   o	      =	$e2
    132  9000 ????	       00 e3	   P	      =	$e3
    133  9000 ????	       00 e3	   p	      =	$e3
    134  9000 ????	       00 e4	   Q	      =	$e4
    135  9000 ????	       00 e4	   q	      =	$e4
    136  9000 ????	       00 e5	   R	      =	$e5
    137  9000 ????	       00 e5	   r	      =	$e5
    138  9000 ????	       00 e6	   S	      =	$e6
    139  9000 ????	       00 e6	   s	      =	$e6
    140  9000 ????	       00 e7	   T	      =	$e7
    141  9000 ????	       00 e7	   t	      =	$e7
    142  9000 ????	       00 e8	   U	      =	$e8
    143  9000 ????	       00 e8	   u	      =	$e8
    144  9000 ????	       00 e9	   V	      =	$e9
    145  9000 ????	       00 e9	   v	      =	$e9
    146  9000 ????	       00 ea	   W	      =	$ea
    147  9000 ????	       00 ea	   w	      =	$ea
    148  9000 ????	       00 eb	   X	      =	$eb
    149  9000 ????	       00 eb	   x	      =	$eb
    150  9000 ????	       00 ec	   Y	      =	$ec
    151  9000 ????	       00 ec	   y	      =	$ec
    152  9000 ????	       00 ed	   Z	      =	$ed
    153  9000 ????	       00 ed	   z	      =	$ed
    154  9000 ????
    155  9000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  9000 ????	       00 ef	   playfieldpos =	$ef
    157  9000 ????
    158  9000 ????						; available for other uses, or if unused, provide more stack space
    159  9000 ????
    160  9000 ????	       00 f0	   aux1       =	$f0
    161  9000 ????	       00 f1	   aux2       =	$f1
    162  9000 ????	       00 f2	   aux3       =	$f2
    163  9000 ????	       00 f3	   aux4       =	$f3
    164  9000 ????	       00 f4	   aux5       =	$f4
    165  9000 ????	       00 f5	   aux6       =	$f5
    166  9000 ????
    167  9000 ????						; playfield color/height pointers
    168  9000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  9000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  9000 ????						; the above pointers are the same because if color and height are both used together,
    171  9000 ????						; they must used absolute indexed and cannot use pointers
    172  9000 ????
    173  9000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  9000 ????						; upper 3 bits of $f2 contain the number of lives
    175  9000 ????	       00 f4	   lifecolor  =	$f4
    176  9000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  9000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  9000 ????
    179  9000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  9000 ????	       00 f3	   pfscore2   =	$f3
    181  9000 ????	       00 f4	   pfscorecolor =	$f4
    182  9000 ????
    183  9000 ????	       00 f6	   stack1     =	$f6
    184  9000 ????	       00 f7	   stack2     =	$f7
    185  9000 ????	       00 f8	   stack3     =	$f8
    186  9000 ????	       00 f9	   stack4     =	$f9
    187  9000 ????						; the stack bytes above may be used in the kernel
    188  9000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  9000 ????
    190  9000 ????				      MAC	return
    191  9000 ????				      ifnconst	bankswitch
    192  9000 ????				      rts
    193  9000 ????				      else
    194  9000 ????				      jmp	BS_return
    195  9000 ????				      endif
    196  9000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  9000 ????
    198  9000 ????			  -	      ifconst	superchip
    199  9000 ????			  -playfieldbase =	$10D0
    200  9000 ????			  -	      include	superchip.h
    201  9000 ????				      else
    202  9000 ????	       00 a4	   playfieldbase =	$A4
    203  9000 ????				      endif
    204  9000 ????
    205  9000 ????				      ifnconst	pfhalfwidth
    206  9000 ????	       00 04	   pfwidth    =	4
    207  9000 ????	       00 0e	   PF1L       =	PF1
    208  9000 ????	       00 0f	   PF2L       =	PF2
    209  9000 ????	       00 0e	   PF1R       =	PF1
    210  9000 ????	       00 0f	   PF2R       =	PF2
    211  9000 ????	       00 00	   pfadjust   =	0
    212  9000 ????			  -	      else
    213  9000 ????			  -pfwidth    =	2
    214  9000 ????			  -	      ifconst	pfcenter
    215  9000 ????			  -PF1L       =	$3F	; no effect
    216  9000 ????			  -PF2L       =	PF2
    217  9000 ????			  -PF1R       =	$3F
    218  9000 ????			  -PF2R       =	PF2	; no effect
    219  9000 ????			  -pfadjust   =	1
    220  9000 ????			  -	      else
    221  9000 ????			  -PF1L       =	PF1
    222  9000 ????			  -PF2L       =	PF2
    223  9000 ????			  -PF1R       =	$3F	; no effect
    224  9000 ????			  -PF2R       =	$3F	; no effect
    225  9000 ????			  -pfadjust   =	0
    226  9000 ????			  -	      endif
    227  9000 ????				      endif
    228  9000 ????
    229  9000 ????						; define playfield start based on height
    230  9000 ????				      ifnconst	pfres
    231  9000 ????	       00 a4	   playfield  =	playfieldbase
    232  9000 ????			  -	      else
    233  9000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  9000 ????				      endif
------- FILE e:\Documents\bB\demos\princess_rescue_with_new_rems.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 e4	   _FinalMusicData =	q
      4  9000 ????	       00 e4	   _DeathMusicData =	q
      5  9000 ????	       00 e4	   _FanFareMusicData =	q
      6  9000 ????	       00 e4	   _UWMusicData =	q
      7  9000 ????	       00 e4	   _StarPowerMusicData =	q
      8  9000 ????	       00 e4	   _OWMusicData =	q
      9  9000 ????	       01 00	   _Level16_length =	.skipL01385-_Level16
     10  9000 ????
     11  9000 ????	       01 00	   _Level15B_length =	.skipL01384-_Level15B
     12  9000 ????
     13  9000 ????	       01 00	   _Level15A_length =	.skipL01383-_Level15A
     14  9000 ????
     15  9000 ????	       01 00	   _Level14B_length =	.skipL01382-_Level14B
     16  9000 ????
     17  9000 ????	       01 00	   _Level14A_length =	.skipL01381-_Level14A
     18  9000 ????
     19  9000 ????	       01 00	   _Level13B_length =	.skipL01380-_Level13B
     20  9000 ????
     21  9000 ????	       01 00	   _Level13A_length =	.skipL01379-_Level13A
     22  9000 ????
     23  9000 ????	       01 00	   _Level12_length =	.skipL01378-_Level12
     24  9000 ????
     25  9000 ????	       01 00	   _Level11B_length =	.skipL01377-_Level11B
     26  9000 ????
     27  9000 ????	       01 00	   _Level11A_length =	.skipL01376-_Level11A
     28  9000 ????
     29  9000 ????	       01 00	   _Level10B_length =	.skipL01375-_Level10B
     30  9000 ????
     31  9000 ????	       01 00	   _Level10A_length =	.skipL01374-_Level10A
     32  9000 ????
     33  9000 ????	       01 00	   _Level9B_length =	.skipL01373-_Level9B
     34  9000 ????
     35  9000 ????	       01 00	   _Level9A_length =	.skipL01372-_Level9A
     36  9000 ????
     37  9000 ????	       01 00	   _Data_Level8_length =	.skipL01350-_Data_Level8
     38  9000 ????
     39  9000 ????	       01 00	   _Data_Level7B_length =	.skipL01349-_Data_Level7B
     40  9000 ????
     41  9000 ????	       01 00	   _Data_Level7A_length =	.skipL01348-_Data_Level7A
     42  9000 ????
     43  9000 ????	       01 00	   _Data_Level6B_length =	.skipL01347-_Data_Level6B
     44  9000 ????
     45  9000 ????	       01 00	   _Data_Level6A_length =	.skipL01346-_Data_Level6A
     46  9000 ????
     47  9000 ????	       01 00	   _Data_Level5B_length =	.skipL01345-_Data_Level5B
     48  9000 ????
     49  9000 ????	       01 00	   _Data_Level5A_length =	.skipL01344-_Data_Level5A
     50  9000 ????
     51  9000 ????	       01 00	   _Data_Level4_length =	.skipL01343-_Data_Level4
     52  9000 ????
     53  9000 ????	       01 00	   _Data_Level3B_length =	.skipL01342-_Data_Level3B
     54  9000 ????
     55  9000 ????	       01 00	   _Data_Level3A_length =	.skipL01341-_Data_Level3A
     56  9000 ????
     57  9000 ????	       01 00	   _Data_Level2B_length =	.skipL01340-_Data_Level2B
     58  9000 ????
     59  9000 ????	       01 00	   _Data_Level2A_length =	.skipL01339-_Data_Level2A
     60  9000 ????
     61  9000 ????	       01 00	   _Data_Level1B_length =	.skipL01338-_Data_Level1B
     62  9000 ????
     63  9000 ????	       01 00	   _Data_Level1A_length =	.skipL01337-_Data_Level1A
     64  9000 ????
     65  9000 ????	       00 e4	   _GameOverMusicData =	q
     66  9000 ????	       00 20	   bscode_length =	32
     67  9000 ????	       00 01	   pfscore    =	1
     68  9000 ????
     69  9000 ????	       00 40	   _Bowser_Jr =	64
     70  9000 ????
     71  9000 ????	       00 2e	   _Two_Spineys =	46
     72  9000 ????
     73  9000 ????	       00 2c	   _Two_Thwomps =	44
     74  9000 ????
     75  9000 ????	       00 2a	   _Two_Goombas =	42
     76  9000 ????
     77  9000 ????	       00 28	   _Thwomp    =	40
     78  9000 ????
     79  9000 ????	       00 27	   _P_Plant_39 =	39
     80  9000 ????
     81  9000 ????	       00 26	   _Trampoline =	38
     82  9000 ????
     83  9000 ????	       00 24	   _Red_Shell =	36
     84  9000 ????
     85  9000 ????	       00 22	   _Green_Shell =	34
     86  9000 ????
     87  9000 ????	       00 20	   _Beetle_Shell =	32
     88  9000 ????
     89  9000 ????	       00 1f	   _P_Plant_31 =	31
     90  9000 ????
     91  9000 ????	       00 1e	   _Pirahna_Plant =	30
     92  9000 ????
     93  9000 ????	       00 1c	   _Kinetic_Platforms =	28
     94  9000 ????
     95  9000 ????	       00 1a	   _1up_Mushroom =	26
     96  9000 ????
     97  9000 ????	       00 18	   _Starman   =	24
     98  9000 ????
     99  9000 ????	       00 16	   _Silver_Coin =	22
    100  9000 ????
    101  9000 ????	       00 14	   _Flagpole  =	20
    102  9000 ????
    103  9000 ????	       00 12	   _Fireball_Enemy =	18
    104  9000 ????
    105  9000 ????	       00 10	   _Spiney_Ball =	16
    106  9000 ????
    107  9000 ????	       00 0e	   _Flying_Red_Koopa =	14
    108  9000 ????
    109  9000 ????	       00 0c	   _Bullet_Bill =	12
    110  9000 ????
    111  9000 ????	       00 0a	   _Flying_Green_Koopa =	10
    112  9000 ????
    113  9000 ????	       00 08	   _Red_Koopa =	8
    114  9000 ????
    115  9000 ????	       00 06	   _Spiney    =	6
    116  9000 ????
    117  9000 ????	       00 04	   _Beetle    =	4
    118  9000 ????
    119  9000 ????	       00 02	   _Green_Koopa =	2
    120  9000 ????
    121  9000 ????	       00 00	   _Goomba    =	0
    122  9000 ????
    123  9000 ????	       00 ea	   _Level     =	w
    124  9000 ????
    125  9000 ????	       00 e9	   _World     =	v
    126  9000 ????
    127  9000 ????	       00 e8	   _Temp_u_Freq =	u
    128  9000 ????
    129  9000 ????	       00 e8	   _Temp_u_PF_Row =	u
    130  9000 ????
    131  9000 ????	       00 e8	   _Temp_u_PF_Column =	u
    132  9000 ????
    133  9000 ????	       00 e7	   _Moving_Shell_Y_Coordinate =	t
    134  9000 ????
    135  9000 ????	       00 e6	   _Moving_Shell_X_Coordinate =	s
    136  9000 ????
    137  9000 ????	       00 e3	   _Music_Duration =	p
    138  9000 ????
    139  9000 ????	       00 e2	   _Farthest_Traveled_On_Level =	o
    140  9000 ????
    141  9000 ????	       00 e1	   _Momentum_Up_Down =	n
    142  9000 ????
    143  9000 ????	       00 e0	   _Momentum_Left_Right =	m
    144  9000 ????
    145  9000 ????	       00 df	   _Lives_Counter =	l
    146  9000 ????
    147  9000 ????	       00 de	   _Star_Invincibility_Timer =	k
    148  9000 ????
    149  9000 ????	       00 dd	   _Enemy_Momentum =	j
    150  9000 ????
    151  9000 ????	       00 dc	   _Enemy_Type =	i
    152  9000 ????
    153  9000 ????	       00 db	   _Object_Scroll_In_Data =	h
    154  9000 ????
    155  9000 ????	       00 da	   _Bit7_Mario_On_Off =	g
    156  9000 ????
    157  9000 ????	       00 da	   _Bit6_Checkpoint_Flag =	g
    158  9000 ????
    159  9000 ????	       00 da	   _Bit5_Moving_Turtle_Shell_Direction =	g
    160  9000 ????
    161  9000 ????	       00 da	   _Bit4_Enemy_Dead_Flag =	g
    162  9000 ????
    163  9000 ????	       00 da	   _Bit3_Enemy_Direction =	g
    164  9000 ????
    165  9000 ????	       00 da	   _Bit2_Mario_Fireball_Direction =	g
    166  9000 ????
    167  9000 ????	       00 da	   _Bit1_Mario_Fireball_Going_Up =	g
    168  9000 ????
    169  9000 ????	       00 da	   _Bit0_Mario_Fireball_Going_Down =	g
    170  9000 ????
    171  9000 ????	       00 da	   _BitOp_Extra_Bit_Flags =	g
    172  9000 ????
    173  9000 ????	       00 d9	   _Bit7_2nd_Quest =	f
    174  9000 ????
    175  9000 ????	       00 d9	   _Bit1_Genesis_Button_Pressed =	f
    176  9000 ????
    177  9000 ????	       00 d9	   _Bit0_Genesis_Controller =	f
    178  9000 ????
    179  9000 ????	       00 d9	   _BitOp_Extra_Bits =	f
    180  9000 ????
    181  9000 ????	       00 d8	   _Boss_Life =	e
    182  9000 ????
    183  9000 ????	       00 d8	   _Level_Timer =	e
    184  9000 ????
    185  9000 ????	       00 d7	   _Bit7_Mario_Invincibility =	d
    186  9000 ????
    187  9000 ????	       00 d7	   _Bit6_Regular_Mario =	d
    188  9000 ????
    189  9000 ????	       00 d7	   _Bit5_Ducking_Flag =	d
    190  9000 ????
    191  9000 ????	       00 d7	   _Bit4_Firey_Mario_Power =	d
    192  9000 ????
    193  9000 ????	       00 d7	   _Bit3_Super_Mario_Power =	d
    194  9000 ????
    195  9000 ????	       00 d7	   _Bit2_Fire_Button_Pressed =	d
    196  9000 ????
    197  9000 ????	       00 d7	   _Bit1_Jumping_Flag =	d
    198  9000 ????
    199  9000 ????	       00 d7	   _Bit0_Player_Facing_Direction =	d
    200  9000 ????
    201  9000 ????	       00 d7	   _BitOp_Player_Data_Flags =	d
    202  9000 ????
    203  9000 ????	       00 d6	   _Coin_Counter =	c
    204  9000 ????
    205  9000 ????	       00 d5	   _Level_Data_Pointer =	b
    206  9000 ????
    207  9000 ????	       00 d4	   _Animation_Timer =	a
    208  9000 ????
    209  9000 ????	       00 07	   bs_mask    =	7
    210  9000 ????	       00 20	   bankswitch =	32
    211  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    212  9000 ????	       00 2b	   vblank_time =	43
    213  9000 ????	       00 25	   overscan_time =	37
    214  9000 ????	       00 01	   PFcolors   =	1
    215  9000 ????	       00 01	   player1colors =	1
    216  9000 ????	       00 01	   player1colors =	1
    217  9000 ????	       00 01	   playercolors =	1
------- FILE e:\Documents\bB\demos\princess_rescue_with_new_rems.bas.asm
      8  9000 ????				      ifconst	bankswitch
      9  9000 ????			  -	      if	bankswitch == 8
     10  9000 ????			  -	      ORG	$1000
     11  9000 ????			  -	      RORG	$D000
     12  9000 ????				      endif
     13  9000 ????			  -	      if	bankswitch == 16
     14  9000 ????			  -	      ORG	$1000
     15  9000 ????			  -	      RORG	$9000
     16  9000 ????				      endif
     17  9000 ????				      if	bankswitch == 32
     18  1000					      ORG	$1000
     19  1000					      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .
     39  1000							; 
     40  1000
     41  1000				   .
     42  1000							; 
     43  1000
     44  1000				   .
     45  1000							; 
     46  1000
     47  1000				   .
     48  1000							; 
     49  1000
     50  1000				   .
     51  1000							; 
     52  1000
     53  1000				   .
     54  1000							; 
     55  1000
     56  1000				   .
     57  1000							; 
     58  1000
     59  1000				   .
     60  1000							; 
     61  1000
     62  1000				   .
     63  1000							; 
     64  1000
     65  1000				   .
     66  1000							; 
     67  1000
     68  1000				   .
     69  1000							; 
     70  1000
     71  1000				   .
     72  1000							; 
     73  1000
     74  1000				   .
     75  1000							; 
     76  1000
     77  1000				   .
     78  1000							; 
     79  1000
     80  1000				   .
     81  1000							; 
     82  1000
     83  1000				   .
     84  1000							; 
     85  1000
     86  1000				   .
     87  1000							; 
     88  1000
     89  1000				   .
     90  1000							; 
     91  1000
     92  1000				   .
     93  1000							; 
     94  1000
     95  1000				   .
     96  1000							; 
     97  1000
     98  1000				   .
     99  1000							; 
    100  1000
    101  1000				   .
    102  1000							; 
    103  1000
    104  1000				   .
    105  1000							; 
    106  1000
    107  1000				   .
    108  1000							; 
    109  1000
    110  1000				   .L00 		;  set kernel_options playercolors player1colors pfcolors
    111  1000
    112  1000				   .L01 		;  set tv ntsc
    113  1000
    114  1000				   .L02 		;  set romsize 32k
    115  1000
    116  1000				   .L03 		;  set optimization speed
    117  1000
    118  1000				   .L04 		;  set smartbranching on
    119  1000
    120  1000				   .L05 		;  set optimization noinlinedata
    121  1000
    122  1000				   .L06 		;  set optimization inlinerand
    123  1000
    124  1000				   .
    125  1000							; 
    126  1000
    127  1000				   .
    128  1000							; 
    129  1000
    130  1000				   .
    131  1000							; 
    132  1000
    133  1000				   .
    134  1000							; 
    135  1000
    136  1000				   .
    137  1000							; 
    138  1000
    139  1000				   .
    140  1000							; 
    141  1000
    142  1000				   .
    143  1000							; 
    144  1000
    145  1000				   .
    146  1000							; 
    147  1000
    148  1000				   .L07 		;  rem set debug
    149  1000
    150  1000				   .
    151  1000							; 
    152  1000
    153  1000				   .
    154  1000							; 
    155  1000
    156  1000				   .
    157  1000							; 
    158  1000
    159  1000				   .
    160  1000							; 
    161  1000
    162  1000				   .
    163  1000							; 
    164  1000
    165  1000				   .
    166  1000							; 
    167  1000
    168  1000				   .
    169  1000							; 
    170  1000
    171  1000				   .
    172  1000							; 
    173  1000
    174  1000				   .
    175  1000							; 
    176  1000
    177  1000				   .
    178  1000							; 
    179  1000
    180  1000				   .
    181  1000							; 
    182  1000
    183  1000				   .
    184  1000							; 
    185  1000
    186  1000				   .
    187  1000							; 
    188  1000
    189  1000				   .
    190  1000							; 
    191  1000
    192  1000				   .
    193  1000							; 
    194  1000
    195  1000				   .
    196  1000							; 
    197  1000
    198  1000				   .
    199  1000							; 
    200  1000
    201  1000				   .
    202  1000							; 
    203  1000
    204  1000				   .
    205  1000							; 
    206  1000
    207  1000				   .
    208  1000							; 
    209  1000
    210  1000				   .
    211  1000							; 
    212  1000
    213  1000				   .
    214  1000							; 
    215  1000
    216  1000				   .
    217  1000							; 
    218  1000
    219  1000				   .
    220  1000							; 
    221  1000
    222  1000				   .
    223  1000							; 
    224  1000
    225  1000				   .
    226  1000							; 
    227  1000
    228  1000				   .
    229  1000							; 
    230  1000
    231  1000				   .
    232  1000							; 
    233  1000
    234  1000				   .
    235  1000							; 
    236  1000
    237  1000				   .L08 		;  dim _Animation_Timer  =  a
    238  1000
    239  1000				   .
    240  1000							; 
    241  1000
    242  1000				   .
    243  1000							; 
    244  1000
    245  1000				   .
    246  1000							; 
    247  1000
    248  1000				   .
    249  1000							; 
    250  1000
    251  1000				   .L09 		;  dim _Level_Data_Pointer  =	b
    252  1000
    253  1000				   .
    254  1000							; 
    255  1000
    256  1000				   .
    257  1000							; 
    258  1000
    259  1000				   .
    260  1000							; 
    261  1000
    262  1000				   .
    263  1000							; 
    264  1000
    265  1000				   .L010		;  dim _Coin_Counter  =  c
    266  1000
    267  1000				   .
    268  1000							; 
    269  1000
    270  1000				   .
    271  1000							; 
    272  1000
    273  1000				   .
    274  1000							; 
    275  1000
    276  1000				   .
    277  1000							; 
    278  1000
    279  1000				   .L011		;  dim _BitOp_Player_Data_Flags  =  d
    280  1000
    281  1000				   .L012		;  dim _Bit0_Player_Facing_Direction  =  d
    282  1000
    283  1000				   .L013		;  dim _Bit1_Jumping_Flag  =  d
    284  1000
    285  1000				   .L014		;  dim _Bit2_Fire_Button_Pressed  =  d
    286  1000
    287  1000				   .L015		;  dim _Bit3_Super_Mario_Power  =  d
    288  1000
    289  1000				   .L016		;  dim _Bit4_Firey_Mario_Power  =  d
    290  1000
    291  1000				   .L017		;  dim _Bit5_Ducking_Flag  =  d
    292  1000
    293  1000				   .L018		;  dim _Bit6_Regular_Mario  =	d
    294  1000
    295  1000				   .L019		;  dim _Bit7_Mario_Invincibility  =  d
    296  1000
    297  1000				   .
    298  1000							; 
    299  1000
    300  1000				   .
    301  1000							; 
    302  1000
    303  1000				   .
    304  1000							; 
    305  1000
    306  1000				   .
    307  1000							; 
    308  1000
    309  1000				   .L020		;  dim _Level_Timer  =  e
    310  1000
    311  1000				   .
    312  1000							; 
    313  1000
    314  1000				   .
    315  1000							; 
    316  1000
    317  1000				   .
    318  1000							; 
    319  1000
    320  1000				   .
    321  1000							; 
    322  1000
    323  1000				   .L021		;  dim _Boss_Life  =  e
    324  1000
    325  1000				   .
    326  1000							; 
    327  1000
    328  1000				   .
    329  1000							; 
    330  1000
    331  1000				   .
    332  1000							; 
    333  1000
    334  1000				   .
    335  1000							; 
    336  1000
    337  1000				   .L022		;  dim _BitOp_Extra_Bits  =  f
    338  1000
    339  1000				   .L023		;  dim _Bit0_Genesis_Controller  =  f
    340  1000
    341  1000				   .L024		;  dim _Bit1_Genesis_Button_Pressed  =  f
    342  1000
    343  1000				   .L025		;  dim _Bit7_2nd_Quest  =  f
    344  1000
    345  1000				   .
    346  1000							; 
    347  1000
    348  1000				   .
    349  1000							; 
    350  1000
    351  1000				   .
    352  1000							; 
    353  1000
    354  1000				   .
    355  1000							; 
    356  1000
    357  1000				   .L026		;  dim _BitOp_Extra_Bit_Flags	=  g
    358  1000
    359  1000				   .L027		;  dim _Bit0_Mario_Fireball_Going_Down  =  g
    360  1000
    361  1000				   .L028		;  dim _Bit1_Mario_Fireball_Going_Up  =  g
    362  1000
    363  1000				   .L029		;  dim _Bit2_Mario_Fireball_Direction	=  g
    364  1000
    365  1000				   .L030		;  dim _Bit3_Enemy_Direction  =  g
    366  1000
    367  1000				   .L031		;  dim _Bit4_Enemy_Dead_Flag  =  g
    368  1000
    369  1000				   .L032		;  dim _Bit5_Moving_Turtle_Shell_Direction  =	g
    370  1000
    371  1000				   .L033		;  dim _Bit6_Checkpoint_Flag  =  g
    372  1000
    373  1000				   .L034		;  dim _Bit7_Mario_On_Off  =  g
    374  1000
    375  1000				   .
    376  1000							; 
    377  1000
    378  1000				   .
    379  1000							; 
    380  1000
    381  1000				   .
    382  1000							; 
    383  1000
    384  1000				   .
    385  1000							; 
    386  1000
    387  1000				   .L035		;  dim _Object_Scroll_In_Data	=  h
    388  1000
    389  1000				   .
    390  1000							; 
    391  1000
    392  1000				   .
    393  1000							; 
    394  1000
    395  1000				   .
    396  1000							; 
    397  1000
    398  1000				   .
    399  1000							; 
    400  1000
    401  1000				   .L036		;  dim _Enemy_Type  =	i
    402  1000
    403  1000				   .
    404  1000							; 
    405  1000
    406  1000				   .
    407  1000							; 
    408  1000
    409  1000				   .
    410  1000							; 
    411  1000
    412  1000				   .
    413  1000							; 
    414  1000
    415  1000				   .L037		;  dim _Enemy_Momentum  =  j
    416  1000
    417  1000				   .
    418  1000							; 
    419  1000
    420  1000				   .
    421  1000							; 
    422  1000
    423  1000				   .
    424  1000							; 
    425  1000
    426  1000				   .
    427  1000							; 
    428  1000
    429  1000				   .L038		;  dim _Star_Invincibility_Timer  =  k
    430  1000
    431  1000				   .
    432  1000							; 
    433  1000
    434  1000				   .
    435  1000							; 
    436  1000
    437  1000				   .
    438  1000							; 
    439  1000
    440  1000				   .
    441  1000							; 
    442  1000
    443  1000				   .L039		;  dim _Lives_Counter	=  l
    444  1000
    445  1000				   .
    446  1000							; 
    447  1000
    448  1000				   .
    449  1000							; 
    450  1000
    451  1000				   .
    452  1000							; 
    453  1000
    454  1000				   .
    455  1000							; 
    456  1000
    457  1000				   .L040		;  dim _Momentum_Left_Right  =  m
    458  1000
    459  1000				   .
    460  1000							; 
    461  1000
    462  1000				   .
    463  1000							; 
    464  1000
    465  1000				   .
    466  1000							; 
    467  1000
    468  1000				   .
    469  1000							; 
    470  1000
    471  1000				   .L041		;  dim _Momentum_Up_Down  =  n
    472  1000
    473  1000				   .
    474  1000							; 
    475  1000
    476  1000				   .
    477  1000							; 
    478  1000
    479  1000				   .
    480  1000							; 
    481  1000
    482  1000				   .
    483  1000							; 
    484  1000
    485  1000				   .L042		;  dim _Farthest_Traveled_On_Level  =	o
    486  1000
    487  1000				   .
    488  1000							; 
    489  1000
    490  1000				   .
    491  1000							; 
    492  1000
    493  1000				   .
    494  1000							; 
    495  1000
    496  1000				   .
    497  1000							; 
    498  1000
    499  1000				   .L043		;  dim _Music_Duration  =  p
    500  1000
    501  1000				   .
    502  1000							; 
    503  1000
    504  1000				   .
    505  1000							; 
    506  1000
    507  1000				   .
    508  1000							; 
    509  1000
    510  1000				   .
    511  1000							; 
    512  1000
    513  1000				   .
    514  1000							; 
    515  1000
    516  1000				   .
    517  1000							; 
    518  1000
    519  1000				   .
    520  1000							; 
    521  1000
    522  1000				   .
    523  1000							; 
    524  1000
    525  1000				   .
    526  1000							; 
    527  1000
    528  1000				   .L044		;  dim _Moving_Shell_X_Coordinate  =  s
    529  1000
    530  1000				   .
    531  1000							; 
    532  1000
    533  1000				   .
    534  1000							; 
    535  1000
    536  1000				   .
    537  1000							; 
    538  1000
    539  1000				   .
    540  1000							; 
    541  1000
    542  1000				   .L045		;  dim _Moving_Shell_Y_Coordinate  =  t
    543  1000
    544  1000				   .
    545  1000							; 
    546  1000
    547  1000				   .
    548  1000							; 
    549  1000
    550  1000				   .
    551  1000							; 
    552  1000
    553  1000				   .
    554  1000							; 
    555  1000
    556  1000				   .L046		;  dim _Temp_u_PF_Column  =  u
    557  1000
    558  1000				   .L047		;  dim _Temp_u_PF_Row	=  u
    559  1000
    560  1000				   .L048		;  dim _Temp_u_Freq  =  u
    561  1000
    562  1000				   .
    563  1000							; 
    564  1000
    565  1000				   .
    566  1000							; 
    567  1000
    568  1000				   .
    569  1000							; 
    570  1000
    571  1000				   .
    572  1000							; 
    573  1000
    574  1000				   .L049		;  dim _World	=  v
    575  1000
    576  1000				   .
    577  1000							; 
    578  1000
    579  1000				   .
    580  1000							; 
    581  1000
    582  1000				   .
    583  1000							; 
    584  1000
    585  1000				   .
    586  1000							; 
    587  1000
    588  1000				   .L050		;  dim _Level	=  w
    589  1000
    590  1000				   .
    591  1000							; 
    592  1000
    593  1000				   .
    594  1000							; 
    595  1000
    596  1000				   .
    597  1000							; 
    598  1000
    599  1000				   .
    600  1000							; 
    601  1000
    602  1000				   .
    603  1000							; 
    604  1000
    605  1000				   .
    606  1000							; 
    607  1000
    608  1000				   .
    609  1000							; 
    610  1000
    611  1000				   .
    612  1000							; 
    613  1000
    614  1000				   .
    615  1000							; 
    616  1000
    617  1000				   .
    618  1000							; 
    619  1000
    620  1000				   .
    621  1000							; 
    622  1000
    623  1000				   .
    624  1000							; 
    625  1000
    626  1000				   .
    627  1000							; 
    628  1000
    629  1000				   .
    630  1000							; 
    631  1000
    632  1000				   .
    633  1000							; 
    634  1000
    635  1000				   .
    636  1000							; 
    637  1000
    638  1000				   .L051		;  const _Goomba  =  0
    639  1000
    640  1000				   .L052		;  const _Green_Koopa	=  2
    641  1000
    642  1000				   .L053		;  const _Beetle  =  4
    643  1000
    644  1000				   .L054		;  const _Spiney  =  6
    645  1000
    646  1000				   .L055		;  const _Red_Koopa  =  8
    647  1000
    648  1000				   .L056		;  const _Flying_Green_Koopa  =  10
    649  1000
    650  1000				   .L057		;  const _Bullet_Bill	=  12
    651  1000
    652  1000				   .L058		;  const _Flying_Red_Koopa  =	14
    653  1000
    654  1000				   .L059		;  const _Spiney_Ball	=  16
    655  1000
    656  1000				   .L060		;  const _Fireball_Enemy  =  18
    657  1000
    658  1000				   .L061		;  const _Flagpole  =	20
    659  1000
    660  1000				   .L062		;  const _Silver_Coin	=  22
    661  1000
    662  1000				   .L063		;  const _Starman  =  24
    663  1000
    664  1000				   .L064		;  const _1up_Mushroom  =  26
    665  1000
    666  1000				   .L065		;  const _Kinetic_Platforms  =  28
    667  1000
    668  1000				   .L066		;  const _Pirahna_Plant  =  30
    669  1000
    670  1000				   .L067		;  const _P_Plant_31  =  31
    671  1000
    672  1000				   .L068		;  const _Beetle_Shell  =  32
    673  1000
    674  1000				   .L069		;  const _Green_Shell	=  34
    675  1000
    676  1000				   .L070		;  const _Red_Shell  =  36
    677  1000
    678  1000				   .L071		;  const _Trampoline  =  38
    679  1000
    680  1000				   .L072		;  const _P_Plant_39  =  39
    681  1000
    682  1000				   .L073		;  const _Thwomp  =  40
    683  1000
    684  1000				   .L074		;  const _Two_Goombas	=  42
    685  1000
    686  1000				   .L075		;  const _Two_Thwomps	=  44
    687  1000
    688  1000				   .L076		;  const _Two_Spineys	=  46
    689  1000
    690  1000				   .L077		;  const _Bowser_Jr  =  64
    691  1000
    692  1000				   .
    693  1000							; 
    694  1000
    695  1000				   .
    696  1000							; 
    697  1000
    698  1000				   .
    699  1000							; 
    700  1000
    701  1000				   .
    702  1000							; 
    703  1000
    704  1000				   .
    705  1000							; 
    706  1000
    707  1000				   .
    708  1000							; 
    709  1000
    710  1000				   .
    711  1000							; 
    712  1000
    713  1000				   .L078		;  const pfscore  =  1
    714  1000
    715  1000				   .
    716  1000							; 
    717  1000
    718  1000				   .
    719  1000							; 
    720  1000
    721  1000				   .
    722  1000							; 
    723  1000
    724  1000				   .
    725  1000							; 
    726  1000
    727  1000				   .
    728  1000							; 
    729  1000
    730  1000				   .
    731  1000							; 
    732  1000
    733  1000				   .
    734  1000							; 
    735  1000
    736  1000				   .
    737  1000							; 
    738  1000
    739  1000				   .
    740  1000							; 
    741  1000
    742  1000				   .
    743  1000							; 
    744  1000
    745  1000				   .
    746  1000							; 
    747  1000
    748  1000				   .
    749  1000							; 
    750  1000
    751  1000				   .
    752  1000							; 
    753  1000
    754  1000				   .__Start
    755  1000							; __Start
    756  1000
    757  1000				   .
    758  1000							; 
    759  1000
    760  1000				   .L079		;  if switchleftb then _Lives_Counter	=  3 else _Lives_Counter  =  5
    761  1000
    762  1000		       2c 82 02 	      bit	SWCHB
    763  1003		       70 07		      BVS	.skipL079
    764  1005				   .condpart0
    765  1005		       a9 03		      LDA	#3
    766  1007		       85 df		      STA	_Lives_Counter
    767  1009		       4c 10 10 	      jmp	.skipelse0
    768  100c				   .skipL079
    769  100c		       a9 05		      LDA	#5
    770  100e		       85 df		      STA	_Lives_Counter
    771  1010				   .skipelse0
    772  1010				   .
    773  1010							; 
    774  1010
    775  1010				   .L080		;  _World  =  1  :  _Level  =	1  :  _Bit6_Regular_Mario{6}  =  1
    776  1010
    777  1010		       a9 01		      LDA	#1
    778  1012		       85 e9		      STA	_World
    779  1014		       85 ea		      STA	_Level
    780  1016		       a5 d7		      LDA	_Bit6_Regular_Mario
    781  1018		       09 40		      ORA	#64
    782  101a		       85 d7		      STA	_Bit6_Regular_Mario
    783  101c				   .
    784  101c							; 
    785  101c
    786  101c				   .L081		;  _Bit6_Checkpoint_Flag{6}  =  0  :  score  =  0  :  _Coin_Counter  =  0  :  pfscore2  =  0  :  d  =	0
    787  101c
    788  101c		       a5 da		      LDA	_Bit6_Checkpoint_Flag
    789  101e		       29 bf		      AND	#191
    790  1020		       85 da		      STA	_Bit6_Checkpoint_Flag
    791  1022		       a9 00		      LDA	#$00
    792  1024		       85 95		      STA	score+2
    793  1026		       a9 00		      LDA	#$00
    794  1028		       85 94		      STA	score+1
    795  102a		       a9 00		      LDA	#$00
    796  102c		       85 93		      STA	score
    797  102e		       a9 00		      LDA	#0
    798  1030		       85 d6		      STA	_Coin_Counter
    799  1032		       85 f3		      STA	pfscore2
    800  1034		       85 d7		      STA	d
    801  1036				   .
    802  1036							; 
    803  1036
    804  1036				   .L082		;  ballheight	=  2
    805  1036
    806  1036		       a9 02		      LDA	#2
    807  1038		       85 92		      STA	ballheight
    808  103a				   .
    809  103a							; 
    810  103a
    811  103a				   .
    812  103a							; 
    813  103a
    814  103a				   .
    815  103a							; 
    816  103a
    817  103a				   .
    818  103a							; 
    819  103a
    820  103a				   .
    821  103a							; 
    822  103a
    823  103a				   .
    824  103a							; 
    825  103a
    826  103a				   .
    827  103a							; 
    828  103a
    829  103a				   .L083		;  if INPT1{7} then _Bit0_Genesis_Controller{0}  =  1 else _Bit0_Genesis_Controller{0}  =  0
    830  103a
    831  103a		       24 09		      BIT	INPT1
    832  103c		       10 09		      BPL	.skipL083
    833  103e				   .condpart1
    834  103e		       a5 d9		      LDA	_Bit0_Genesis_Controller
    835  1040		       09 01		      ORA	#1
    836  1042		       85 d9		      STA	_Bit0_Genesis_Controller
    837  1044		       4c 4d 10 	      jmp	.skipelse1
    838  1047				   .skipL083
    839  1047		       a5 d9		      LDA	_Bit0_Genesis_Controller
    840  1049		       29 fe		      AND	#254
    841  104b		       85 d9		      STA	_Bit0_Genesis_Controller
    842  104d				   .skipelse1
    843  104d				   .
    844  104d							; 
    845  104d
    846  104d				   .
    847  104d							; 
    848  104d
    849  104d				   .
    850  104d							; 
    851  104d
    852  104d				   .
    853  104d							; 
    854  104d
    855  104d				   .
    856  104d							; 
    857  104d
    858  104d				   .
    859  104d							; 
    860  104d
    861  104d				   .
    862  104d							; 
    863  104d
    864  104d				   .L084		;  gosub __Title_Screen bank2
    865  104d
    866  104d		       85 ee		      sta	temp7
    867  104f		       a9 10		      lda	#>(ret_point1-1)
    868  1051		       48		      pha
    869  1052		       a9 64		      lda	#<(ret_point1-1)
    870  1054		       48		      pha
    871  1055		       a9 3c		      lda	#>(.__Title_Screen-1)
    872  1057		       48		      pha
    873  1058		       a9 9f		      lda	#<(.__Title_Screen-1)
    874  105a		       48		      pha
    875  105b		       a5 ee		      lda	temp7
    876  105d		       48		      pha
    877  105e		       8a		      txa
    878  105f		       48		      pha
    879  1060		       a2 02		      ldx	#2
    880  1062		       4c eb ff 	      jmp	BS_jsr
    881  1065				   ret_point1
    882  1065				   .
    883  1065							; 
    884  1065
    885  1065				   .
    886  1065							; 
    887  1065
    888  1065				   .
    889  1065							; 
    890  1065
    891  1065				   .
    892  1065							; 
    893  1065
    894  1065				   .
    895  1065							; 
    896  1065
    897  1065				   .
    898  1065							; 
    899  1065
    900  1065				   .
    901  1065							; 
    902  1065
    903  1065				   .
    904  1065							; 
    905  1065
    906  1065				   .
    907  1065							; 
    908  1065
    909  1065				   .
    910  1065							; 
    911  1065
    912  1065				   .
    913  1065							; 
    914  1065
    915  1065				   .
    916  1065							; 
    917  1065
    918  1065				   .__Init
    919  1065							; __Init
    920  1065
    921  1065				   .
    922  1065							; 
    923  1065
    924  1065				   .L085		;  drawscreen
    925  1065
    926  1065		       85 ee		      sta	temp7
    927  1067		       a9 10		      lda	#>(ret_point2-1)
    928  1069		       48		      pha
    929  106a		       a9 7c		      lda	#<(ret_point2-1)
    930  106c		       48		      pha
    931  106d		       a9 f4		      lda	#>(drawscreen-1)
    932  106f		       48		      pha
    933  1070		       a9 37		      lda	#<(drawscreen-1)
    934  1072		       48		      pha
    935  1073		       a5 ee		      lda	temp7
    936  1075		       48		      pha
    937  1076		       8a		      txa
    938  1077		       48		      pha
    939  1078		       a2 08		      ldx	#8
    940  107a		       4c eb ff 	      jmp	BS_jsr
    941  107d				   ret_point2
    942  107d				   .
    943  107d							; 
    944  107d
    945  107d				   .L086		;  gosub __Intro_Screen bank4
    946  107d
    947  107d		       85 ee		      sta	temp7
    948  107f		       a9 10		      lda	#>(ret_point3-1)
    949  1081		       48		      pha
    950  1082		       a9 94		      lda	#<(ret_point3-1)
    951  1084		       48		      pha
    952  1085		       a9 6f		      lda	#>(.__Intro_Screen-1)
    953  1087		       48		      pha
    954  1088		       a9 ff		      lda	#<(.__Intro_Screen-1)
    955  108a		       48		      pha
    956  108b		       a5 ee		      lda	temp7
    957  108d		       48		      pha
    958  108e		       8a		      txa
    959  108f		       48		      pha
    960  1090		       a2 04		      ldx	#4
    961  1092		       4c eb ff 	      jmp	BS_jsr
    962  1095				   ret_point3
    963  1095				   .
    964  1095							; 
    965  1095
    966  1095				   .L087		;  if _Level  =  4  &&  _Bit6_Checkpoint_Flag{6} then goto __Bos_Setup bank4
    967  1095
    968  1095		       a5 ea		      LDA	_Level
    969  1097		       c9 04		      CMP	#4
    970  1099		       d0 16		      BNE	.skipL087
    971  109b				   .condpart2
    972  109b		       24 da		      BIT	_Bit6_Checkpoint_Flag
    973  109d		       50 12		      BVC	.skip2then
    974  109f				   .condpart3
    975  109f		       85 ee		      sta	temp7
    976  10a1		       a9 7a		      lda	#>(.__Bos_Setup-1)
    977  10a3		       48		      pha
    978  10a4		       a9 8f		      lda	#<(.__Bos_Setup-1)
    979  10a6		       48		      pha
    980  10a7		       a5 ee		      lda	temp7
    981  10a9		       48		      pha
    982  10aa		       8a		      txa
    983  10ab		       48		      pha
    984  10ac		       a2 04		      ldx	#4
    985  10ae		       4c eb ff 	      jmp	BS_jsr
    986  10b1				   .skip2then
    987  10b1				   .skipL087
    988  10b1				   .
    989  10b1							; 
    990  10b1
    991  10b1				   .
    992  10b1							; 
    993  10b1
    994  10b1				   .
    995  10b1							; 
    996  10b1
    997  10b1				   .
    998  10b1							; 
    999  10b1
   1000  10b1				   .
   1001  10b1							; 
   1002  10b1
   1003  10b1				   .
   1004  10b1							; 
   1005  10b1
   1006  10b1				   .
   1007  10b1							; 
   1008  10b1
   1009  10b1				   .
   1010  10b1							; 
   1011  10b1
   1012  10b1				   .
   1013  10b1							; 
   1014  10b1
   1015  10b1				   .
   1016  10b1							; 
   1017  10b1
   1018  10b1				   .
   1019  10b1							; 
   1020  10b1
   1021  10b1				   .
   1022  10b1							; 
   1023  10b1
   1024  10b1				   .
   1025  10b1							; 
   1026  10b1
   1027  10b1				   .
   1028  10b1							; 
   1029  10b1
   1030  10b1				   .__Main_Loop
   1031  10b1							; __Main_Loop
   1032  10b1
   1033  10b1				   .
   1034  10b1							; 
   1035  10b1
   1036  10b1				   .
   1037  10b1							; 
   1038  10b1
   1039  10b1				   .
   1040  10b1							; 
   1041  10b1
   1042  10b1				   .
   1043  10b1							; 
   1044  10b1
   1045  10b1				   .
   1046  10b1							; 
   1047  10b1
   1048  10b1				   .
   1049  10b1							; 
   1050  10b1
   1051  10b1				   .
   1052  10b1							; 
   1053  10b1
   1054  10b1				   .
   1055  10b1							; 
   1056  10b1
   1057  10b1				   .
   1058  10b1							; 
   1059  10b1
   1060  10b1				   .
   1061  10b1							; 
   1062  10b1
   1063  10b1				   .
   1064  10b1							; 
   1065  10b1
   1066  10b1				   .L088		;  _Object_Scroll_In_Data  =  0
   1067  10b1
   1068  10b1		       a9 00		      LDA	#0
   1069  10b3		       85 db		      STA	_Object_Scroll_In_Data
   1070  10b5				   .
   1071  10b5							; 
   1072  10b5
   1073  10b5				   .
   1074  10b5							; 
   1075  10b5
   1076  10b5				   .
   1077  10b5							; 
   1078  10b5
   1079  10b5				   .
   1080  10b5							; 
   1081  10b5
   1082  10b5				   .
   1083  10b5							; 
   1084  10b5
   1085  10b5				   .
   1086  10b5							; 
   1087  10b5
   1088  10b5				   .
   1089  10b5							; 
   1090  10b5
   1091  10b5				   .
   1092  10b5							; 
   1093  10b5
   1094  10b5				   .
   1095  10b5							; 
   1096  10b5
   1097  10b5				   .
   1098  10b5							; 
   1099  10b5
   1100  10b5				   .
   1101  10b5							; 
   1102  10b5
   1103  10b5				   .
   1104  10b5							; 
   1105  10b5
   1106  10b5				   .
   1107  10b5							; 
   1108  10b5
   1109  10b5				   .
   1110  10b5							; 
   1111  10b5
   1112  10b5				   .
   1113  10b5							; 
   1114  10b5
   1115  10b5				   .L089		;  if switchreset then reboot
   1116  10b5
   1117  10b5		       a9 01		      lda	#1
   1118  10b7		       2c 82 02 	      bit	SWCHB
   1119  10ba		       d0 03		      BNE	.skipL089
   1120  10bc				   .condpart4
   1121  10bc		       6c fc ff 	      JMP	($FFFC)
   1122  10bf				   .skipL089
   1123  10bf				   .
   1124  10bf							; 
   1125  10bf
   1126  10bf				   .
   1127  10bf							; 
   1128  10bf
   1129  10bf				   .
   1130  10bf							; 
   1131  10bf
   1132  10bf				   .
   1133  10bf							; 
   1134  10bf
   1135  10bf				   .
   1136  10bf							; 
   1137  10bf
   1138  10bf				   .
   1139  10bf							; 
   1140  10bf
   1141  10bf				   .
   1142  10bf							; 
   1143  10bf
   1144  10bf				   .
   1145  10bf							; 
   1146  10bf
   1147  10bf				   .L090		;  gosub __Set_Up_Mario
   1148  10bf
   1149  10bf		       20 99 18 	      jsr	.__Set_Up_Mario
   1150  10c2
   1151  10c2				   .
   1152  10c2							; 
   1153  10c2
   1154  10c2				   .L091		;  gosub __Render_Screen
   1155  10c2
   1156  10c2		       20 ac 1d 	      jsr	.__Render_Screen
   1157  10c5
   1158  10c5				   .
   1159  10c5							; 
   1160  10c5
   1161  10c5				   .L092		;  goto __Enemy_Collision_Routine bank3
   1162  10c5
   1163  10c5		       85 ee		      sta	temp7
   1164  10c7		       a9 5c		      lda	#>(.__Enemy_Collision_Routine-1)
   1165  10c9		       48		      pha
   1166  10ca		       a9 19		      lda	#<(.__Enemy_Collision_Routine-1)
   1167  10cc		       48		      pha
   1168  10cd		       a5 ee		      lda	temp7
   1169  10cf		       48		      pha
   1170  10d0		       8a		      txa
   1171  10d1		       48		      pha
   1172  10d2		       a2 03		      ldx	#3
   1173  10d4		       4c eb ff 	      jmp	BS_jsr
   1174  10d7				   .
   1175  10d7							; 
   1176  10d7
   1177  10d7				   .
   1178  10d7							; 
   1179  10d7
   1180  10d7				   .
   1181  10d7							; 
   1182  10d7
   1183  10d7				   .
   1184  10d7							; 
   1185  10d7
   1186  10d7				   .
   1187  10d7							; 
   1188  10d7
   1189  10d7				   .
   1190  10d7							; 
   1191  10d7
   1192  10d7				   .
   1193  10d7							; 
   1194  10d7
   1195  10d7				   .
   1196  10d7							; 
   1197  10d7
   1198  10d7				   .
   1199  10d7							; 
   1200  10d7
   1201  10d7				   .
   1202  10d7							; 
   1203  10d7
   1204  10d7				   .
   1205  10d7							; 
   1206  10d7
   1207  10d7				   .
   1208  10d7							; 
   1209  10d7
   1210  10d7				   .
   1211  10d7							; 
   1212  10d7
   1213  10d7				   .
   1214  10d7							; 
   1215  10d7
   1216  10d7				   .
   1217  10d7							; 
   1218  10d7
   1219  10d7				   .
   1220  10d7							; 
   1221  10d7
   1222  10d7				   .
   1223  10d7							; 
   1224  10d7
   1225  10d7				   .
   1226  10d7							; 
   1227  10d7
   1228  10d7				   .
   1229  10d7							; 
   1230  10d7
   1231  10d7				   .
   1232  10d7							; 
   1233  10d7
   1234  10d7				   .
   1235  10d7							; 
   1236  10d7
   1237  10d7				   .
   1238  10d7							; 
   1239  10d7
   1240  10d7				   .
   1241  10d7							; 
   1242  10d7
   1243  10d7				   .
   1244  10d7							; 
   1245  10d7
   1246  10d7				   .__Mario_Hit_01
   1247  10d7							; __Mario_Hit_01
   1248  10d7
   1249  10d7				   .
   1250  10d7							; 
   1251  10d7
   1252  10d7				   .
   1253  10d7							; 
   1254  10d7
   1255  10d7				   .
   1256  10d7							; 
   1257  10d7
   1258  10d7				   .
   1259  10d7							; 
   1260  10d7
   1261  10d7				   .
   1262  10d7							; 
   1263  10d7
   1264  10d7				   .
   1265  10d7							; 
   1266  10d7
   1267  10d7				   .L093		;  if _Bit7_Mario_Invincibility{7}  ||  _Enemy_Type  =  _Kinetic_Platforms then goto __Draw bank3
   1268  10d7
   1269  10d7		       24 d7		      BIT	_Bit7_Mario_Invincibility
   1270  10d9		       10 03		      BPL	.skipL093
   1271  10db				   .condpart5
   1272  10db		       4c e4 10 	      jmp	.condpart6
   1273  10de				   .skipL093
   1274  10de		       a5 dc		      LDA	_Enemy_Type
   1275  10e0		       c9 1c		      CMP	#_Kinetic_Platforms
   1276  10e2		       d0 12		      BNE	.skip1OR
   1277  10e4				   .condpart6
   1278  10e4		       85 ee		      sta	temp7
   1279  10e6		       a9 4f		      lda	#>(.__Draw-1)
   1280  10e8		       48		      pha
   1281  10e9		       a9 ff		      lda	#<(.__Draw-1)
   1282  10eb		       48		      pha
   1283  10ec		       a5 ee		      lda	temp7
   1284  10ee		       48		      pha
   1285  10ef		       8a		      txa
   1286  10f0		       48		      pha
   1287  10f1		       a2 03		      ldx	#3
   1288  10f3		       4c eb ff 	      jmp	BS_jsr
   1289  10f6				   .skip1OR
   1290  10f6				   .
   1291  10f6							; 
   1292  10f6
   1293  10f6				   .L094		;  if _Enemy_Type  =  _Trampoline then goto __Draw bank3
   1294  10f6
   1295  10f6		       a5 dc		      LDA	_Enemy_Type
   1296  10f8		       c9 26		      CMP	#_Trampoline
   1297  10fa		       d0 12		      BNE	.skipL094
   1298  10fc				   .condpart7
   1299  10fc		       85 ee		      sta	temp7
   1300  10fe		       a9 4f		      lda	#>(.__Draw-1)
   1301  1100		       48		      pha
   1302  1101		       a9 ff		      lda	#<(.__Draw-1)
   1303  1103		       48		      pha
   1304  1104		       a5 ee		      lda	temp7
   1305  1106		       48		      pha
   1306  1107		       8a		      txa
   1307  1108		       48		      pha
   1308  1109		       a2 03		      ldx	#3
   1309  110b		       4c eb ff 	      jmp	BS_jsr
   1310  110e				   .skipL094
   1311  110e				   .
   1312  110e							; 
   1313  110e
   1314  110e				   .
   1315  110e							; 
   1316  110e
   1317  110e				   .
   1318  110e							; 
   1319  110e
   1320  110e				   .
   1321  110e							; 
   1322  110e
   1323  110e				   .
   1324  110e							; 
   1325  110e
   1326  110e				   .L095		;  if _Bit6_Regular_Mario{6} then goto __Mario_Death bank3
   1327  110e
   1328  110e		       24 d7		      BIT	_Bit6_Regular_Mario
   1329  1110		       50 12		      BVC	.skipL095
   1330  1112				   .condpart8
   1331  1112		       85 ee		      sta	temp7
   1332  1114		       a9 55		      lda	#>(.__Mario_Death-1)
   1333  1116		       48		      pha
   1334  1117		       a9 95		      lda	#<(.__Mario_Death-1)
   1335  1119		       48		      pha
   1336  111a		       a5 ee		      lda	temp7
   1337  111c		       48		      pha
   1338  111d		       8a		      txa
   1339  111e		       48		      pha
   1340  111f		       a2 03		      ldx	#3
   1341  1121		       4c eb ff 	      jmp	BS_jsr
   1342  1124				   .skipL095
   1343  1124				   .
   1344  1124							; 
   1345  1124
   1346  1124				   .
   1347  1124							; 
   1348  1124
   1349  1124				   .
   1350  1124							; 
   1351  1124
   1352  1124				   .
   1353  1124							; 
   1354  1124
   1355  1124				   .
   1356  1124							; 
   1357  1124
   1358  1124				   .
   1359  1124							; 
   1360  1124
   1361  1124				   .L096		;  if _Bit4_Firey_Mario_Power{4} then _Bit3_Super_Mario_Power{3}  =  1  :  _Bit4_Firey_Mario_Power{4}	=  0 else _Bit6_Regular_Mario{6}  =  1	:  _Bit3_Super_Mario_Power{3}  =  0  :	_Temp_u_Freq  =  0  :  y  =  8
   1362  1124
   1363  1124		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
   1364  1126		       29 10		      AND	#16
   1365  1128		       f0 0f		      BEQ	.skipL096
   1366  112a				   .condpart9
   1367  112a		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   1368  112c		       09 08		      ORA	#8
   1369  112e		       85 d7		      STA	_Bit3_Super_Mario_Power
   1370  1130		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
   1371  1132		       29 ef		      AND	#239
   1372  1134		       85 d7		      STA	_Bit4_Firey_Mario_Power
   1373  1136		       4c 4d 11 	      jmp	.skipelse2
   1374  1139				   .skipL096
   1375  1139		       a5 d7		      LDA	_Bit6_Regular_Mario
   1376  113b		       09 40		      ORA	#64
   1377  113d		       85 d7		      STA	_Bit6_Regular_Mario
   1378  113f		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   1379  1141		       29 f7		      AND	#247
   1380  1143		       85 d7		      STA	_Bit3_Super_Mario_Power
   1381  1145		       a9 00		      LDA	#0
   1382  1147		       85 e8		      STA	_Temp_u_Freq
   1383  1149		       a9 08		      LDA	#8
   1384  114b		       85 ec		      STA	y
   1385  114d				   .skipelse2
   1386  114d				   .
   1387  114d							; 
   1388  114d
   1389  114d				   .L097		;  for z  =  1 to 8
   1390  114d
   1391  114d		       a9 01		      LDA	#1
   1392  114f		       85 ed		      STA	z
   1393  1151				   .L097forz
   1394  1151				   .
   1395  1151							; 
   1396  1151
   1397  1151				   .L098		;  for x  =  1 to 4
   1398  1151
   1399  1151		       a9 01		      LDA	#1
   1400  1153		       85 eb		      STA	x
   1401  1155				   .L098forx
   1402  1155				   .
   1403  1155							; 
   1404  1155
   1405  1155				   .L099		;  if _Bit3_Super_Mario_Power{3} then gosub __Fire_Mario_Color  :  gosub __Super_Mario else gosub __Super_Mario_Color	:  gosub __Super_Mario
   1406  1155
   1407  1155		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   1408  1157		       29 08		      AND	#8
   1409  1159		       f0 09		      BEQ	.skipL099
   1410  115b				   .condpart10
   1411  115b		       20 e0 1e 	      jsr	.__Fire_Mario_Color
   1412  115e		       20 d3 1e 	      jsr	.__Super_Mario
   1413  1161		       4c 6a 11 	      jmp	.skipelse3
   1414  1164				   .skipL099
   1415  1164		       20 ca 1e 	      jsr	.__Super_Mario_Color
   1416  1167		       20 d3 1e 	      jsr	.__Super_Mario
   1417  116a
   1418  116a				   .skipelse3
   1419  116a				   .
   1420  116a							; 
   1421  116a
   1422  116a				   .L0100		;  gosub __Power_Down_SFX
   1423  116a
   1424  116a		       20 cd 19 	      jsr	.__Power_Down_SFX
   1425  116d
   1426  116d				   .
   1427  116d							; 
   1428  116d
   1429  116d				   .L0101		;  gosub __Render_Screen
   1430  116d
   1431  116d		       20 ac 1d 	      jsr	.__Render_Screen
   1432  1170
   1433  1170				   .
   1434  1170							; 
   1435  1170
   1436  1170				   .L0102		;  next x
   1437  1170
   1438  1170		       a5 eb		      LDA	x
   1439  1172		       c9 04		      CMP	#4
   1440  1174
   1441  1174		       e6 eb		      INC	x
   1442  1176					      if	((* - .L098forx) < 127) && ((* - .L098forx) > -128)
   1443  1176		       90 dd		      bcc	.L098forx
   1444  1178				  -	      else
   1445  1178				  -	      bcs	.0skipL098forx
   1446  1178				  -	      jmp	.L098forx
   1447  1178				  -.0skipL098forx
   1448  1178					      endif
   1449  1178				   .
   1450  1178							; 
   1451  1178
   1452  1178				   .L0103		;  for x  =  1 to 4
   1453  1178
   1454  1178		       a9 01		      LDA	#1
   1455  117a		       85 eb		      STA	x
   1456  117c				   .L0103forx
   1457  117c				   .
   1458  117c							; 
   1459  117c
   1460  117c				   .L0104		;  if _Bit3_Super_Mario_Power{3} then gosub __Super_Mario_Color  :  gosub __Super_Mario else gosub __Mario_Color  :  gosub __Mario
   1461  117c
   1462  117c		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   1463  117e		       29 08		      AND	#8
   1464  1180		       f0 09		      BEQ	.skipL0104
   1465  1182				   .condpart11
   1466  1182		       20 ca 1e 	      jsr	.__Super_Mario_Color
   1467  1185		       20 d3 1e 	      jsr	.__Super_Mario
   1468  1188		       4c 91 11 	      jmp	.skipelse4
   1469  118b				   .skipL0104
   1470  118b		       20 91 1e 	      jsr	.__Mario_Color
   1471  118e		       20 a3 1e 	      jsr	.__Mario
   1472  1191
   1473  1191				   .skipelse4
   1474  1191				   .
   1475  1191							; 
   1476  1191
   1477  1191				   .L0105		;  gosub __Power_Down_SFX
   1478  1191
   1479  1191		       20 cd 19 	      jsr	.__Power_Down_SFX
   1480  1194
   1481  1194				   .
   1482  1194							; 
   1483  1194
   1484  1194				   .L0106		;  gosub __Render_Screen
   1485  1194
   1486  1194		       20 ac 1d 	      jsr	.__Render_Screen
   1487  1197
   1488  1197				   .
   1489  1197							; 
   1490  1197
   1491  1197				   .L0107		;  next x
   1492  1197
   1493  1197		       a5 eb		      LDA	x
   1494  1199		       c9 04		      CMP	#4
   1495  119b
   1496  119b		       e6 eb		      INC	x
   1497  119d					      if	((* - .L0103forx) < 127) && ((* - .L0103forx) > -128)
   1498  119d		       90 dd		      bcc	.L0103forx
   1499  119f				  -	      else
   1500  119f				  -	      bcs	.1skipL0103forx
   1501  119f				  -	      jmp	.L0103forx
   1502  119f				  -.1skipL0103forx
   1503  119f					      endif
   1504  119f				   .
   1505  119f							; 
   1506  119f
   1507  119f				   .L0108		;  next z
   1508  119f
   1509  119f		       a5 ed		      LDA	z
   1510  11a1		       c9 08		      CMP	#8
   1511  11a3
   1512  11a3		       e6 ed		      INC	z
   1513  11a5					      if	((* - .L097forz) < 127) && ((* - .L097forz) > -128)
   1514  11a5		       90 aa		      bcc	.L097forz
   1515  11a7				  -	      else
   1516  11a7				  -	      bcs	.2skipL097forz
   1517  11a7				  -	      jmp	.L097forz
   1518  11a7				  -.2skipL097forz
   1519  11a7					      endif
   1520  11a7				   .
   1521  11a7							; 
   1522  11a7
   1523  11a7				   .
   1524  11a7							; 
   1525  11a7
   1526  11a7				   .
   1527  11a7							; 
   1528  11a7
   1529  11a7				   .
   1530  11a7							; 
   1531  11a7
   1532  11a7				   .
   1533  11a7							; 
   1534  11a7
   1535  11a7				   .
   1536  11a7							; 
   1537  11a7
   1538  11a7				   .
   1539  11a7							; 
   1540  11a7
   1541  11a7				   .
   1542  11a7							; 
   1543  11a7
   1544  11a7				   .L0109		;  if _Enemy_Type  <  _Bowser_Jr then _Bit7_Mario_Invincibility{7}  =	1  :  _Level_Timer  =  0  :  _Bit7_Mario_On_Off{7}  =  0 else _Star_Invincibility_Timer  =  1  :  _Bit7_Mario_On_Off{7}  =  1  :  _Bit7_Mario_Invincibility{7}	=  1
   1545  11a7
   1546  11a7		       a5 dc		      LDA	_Enemy_Type
   1547  11a9		       c9 40		      CMP	#_Bowser_Jr
   1548  11ab		       b0 13		      BCS	.skipL0109
   1549  11ad				   .condpart12
   1550  11ad		       a5 d7		      LDA	_Bit7_Mario_Invincibility
   1551  11af		       09 80		      ORA	#128
   1552  11b1		       85 d7		      STA	_Bit7_Mario_Invincibility
   1553  11b3		       a9 00		      LDA	#0
   1554  11b5		       85 d8		      STA	_Level_Timer
   1555  11b7		       a5 da		      LDA	_Bit7_Mario_On_Off
   1556  11b9		       29 7f		      AND	#127
   1557  11bb		       85 da		      STA	_Bit7_Mario_On_Off
   1558  11bd		       4c d0 11 	      jmp	.skipelse5
   1559  11c0				   .skipL0109
   1560  11c0		       a9 01		      LDA	#1
   1561  11c2		       85 de		      STA	_Star_Invincibility_Timer
   1562  11c4		       a5 da		      LDA	_Bit7_Mario_On_Off
   1563  11c6		       09 80		      ORA	#128
   1564  11c8		       85 da		      STA	_Bit7_Mario_On_Off
   1565  11ca		       a5 d7		      LDA	_Bit7_Mario_Invincibility
   1566  11cc		       09 80		      ORA	#128
   1567  11ce		       85 d7		      STA	_Bit7_Mario_Invincibility
   1568  11d0				   .skipelse5
   1569  11d0				   .
   1570  11d0							; 
   1571  11d0
   1572  11d0				   .L0110		;  goto __Draw bank3
   1573  11d0
   1574  11d0		       85 ee		      sta	temp7
   1575  11d2		       a9 4f		      lda	#>(.__Draw-1)
   1576  11d4		       48		      pha
   1577  11d5		       a9 ff		      lda	#<(.__Draw-1)
   1578  11d7		       48		      pha
   1579  11d8		       a5 ee		      lda	temp7
   1580  11da		       48		      pha
   1581  11db		       8a		      txa
   1582  11dc		       48		      pha
   1583  11dd		       a2 03		      ldx	#3
   1584  11df		       4c eb ff 	      jmp	BS_jsr
   1585  11e2				   .
   1586  11e2							; 
   1587  11e2
   1588  11e2				   .
   1589  11e2							; 
   1590  11e2
   1591  11e2				   .
   1592  11e2							; 
   1593  11e2
   1594  11e2				   .
   1595  11e2							; 
   1596  11e2
   1597  11e2				   .__Main_2
   1598  11e2							; __Main_2
   1599  11e2
   1600  11e2				   .
   1601  11e2							; 
   1602  11e2
   1603  11e2				   .L0111		;  gosub __Render_Screen
   1604  11e2
   1605  11e2		       20 ac 1d 	      jsr	.__Render_Screen
   1606  11e5
   1607  11e5				   .
   1608  11e5							; 
   1609  11e5
   1610  11e5				   .
   1611  11e5							; 
   1612  11e5
   1613  11e5				   .
   1614  11e5							; 
   1615  11e5
   1616  11e5				   .
   1617  11e5							; 
   1618  11e5
   1619  11e5				   .
   1620  11e5							; 
   1621  11e5
   1622  11e5				   .
   1623  11e5							; 
   1624  11e5
   1625  11e5				   .
   1626  11e5							; 
   1627  11e5
   1628  11e5				   .
   1629  11e5							; 
   1630  11e5
   1631  11e5				   .L0112		;  if _Momentum_Left_Right  >	0  &&  _Bit0_Player_Facing_Direction{0} then player0x  =  player0x  -  _Momentum_Left_Right
   1632  11e5
   1633  11e5		       a9 00		      LDA	#0
   1634  11e7		       c5 e0		      CMP	_Momentum_Left_Right
   1635  11e9		       b0 0c		      BCS	.skipL0112
   1636  11eb				   .condpart13
   1637  11eb		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   1638  11ed		       4a		      LSR
   1639  11ee		       90 07		      BCC	.skip13then
   1640  11f0				   .condpart14
   1641  11f0		       a5 80		      LDA	player0x
   1642  11f2		       38		      SEC
   1643  11f3		       e5 e0		      SBC	_Momentum_Left_Right
   1644  11f5		       85 80		      STA	player0x
   1645  11f7				   .skip13then
   1646  11f7				   .skipL0112
   1647  11f7				   .
   1648  11f7							; 
   1649  11f7
   1650  11f7				   .L0113		;  if _Momentum_Left_Right  >	0  &&  !_Bit0_Player_Facing_Direction{0} then player0x	=  player0x  +	_Momentum_Left_Right
   1651  11f7
   1652  11f7		       a9 00		      LDA	#0
   1653  11f9		       c5 e0		      CMP	_Momentum_Left_Right
   1654  11fb		       b0 0c		      BCS	.skipL0113
   1655  11fd				   .condpart15
   1656  11fd		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   1657  11ff		       4a		      LSR
   1658  1200		       b0 07		      BCS	.skip15then
   1659  1202				   .condpart16
   1660  1202		       a5 80		      LDA	player0x
   1661  1204		       18		      CLC
   1662  1205		       65 e0		      ADC	_Momentum_Left_Right
   1663  1207		       85 80		      STA	player0x
   1664  1209				   .skip15then
   1665  1209				   .skipL0113
   1666  1209				   .
   1667  1209							; 
   1668  1209
   1669  1209				   .L0114		;  if _Momentum_Up_Down  >  0	&&  _Bit1_Jumping_Flag{1} then player0y  =  player0y  -  _Momentum_Up_Down
   1670  1209
   1671  1209		       a9 00		      LDA	#0
   1672  120b		       c5 e1		      CMP	_Momentum_Up_Down
   1673  120d		       b0 0d		      BCS	.skipL0114
   1674  120f				   .condpart17
   1675  120f		       a5 d7		      LDA	_Bit1_Jumping_Flag
   1676  1211		       29 02		      AND	#2
   1677  1213		       f0 07		      BEQ	.skip17then
   1678  1215				   .condpart18
   1679  1215		       a5 85		      LDA	player0y
   1680  1217		       38		      SEC
   1681  1218		       e5 e1		      SBC	_Momentum_Up_Down
   1682  121a		       85 85		      STA	player0y
   1683  121c				   .skip17then
   1684  121c				   .skipL0114
   1685  121c				   .
   1686  121c							; 
   1687  121c
   1688  121c				   .L0115		;  if _Momentum_Up_Down  >  0	&&  !_Bit1_Jumping_Flag{1} then player0y  =  player0y  +  _Momentum_Up_Down
   1689  121c
   1690  121c		       a9 00		      LDA	#0
   1691  121e		       c5 e1		      CMP	_Momentum_Up_Down
   1692  1220		       b0 0d		      BCS	.skipL0115
   1693  1222				   .condpart19
   1694  1222		       a5 d7		      LDA	_Bit1_Jumping_Flag
   1695  1224		       29 02		      AND	#2
   1696  1226		       d0 07		      BNE	.skip19then
   1697  1228				   .condpart20
   1698  1228		       a5 85		      LDA	player0y
   1699  122a		       18		      CLC
   1700  122b		       65 e1		      ADC	_Momentum_Up_Down
   1701  122d		       85 85		      STA	player0y
   1702  122f				   .skip19then
   1703  122f				   .skipL0115
   1704  122f				   .
   1705  122f							; 
   1706  122f
   1707  122f				   .
   1708  122f							; 
   1709  122f
   1710  122f				   .
   1711  122f							; 
   1712  122f
   1713  122f				   .
   1714  122f							; 
   1715  122f
   1716  122f				   .
   1717  122f							; 
   1718  122f
   1719  122f				   .
   1720  122f							; 
   1721  122f
   1722  122f				   .
   1723  122f							; 
   1724  122f
   1725  122f				   .
   1726  122f							; 
   1727  122f
   1728  122f				   .
   1729  122f							; 
   1730  122f
   1731  122f				   .
   1732  122f							; 
   1733  122f
   1734  122f				   .
   1735  122f							; 
   1736  122f
   1737  122f				   .L0116		;  if player0x  <  17 then player0x  =  17
   1738  122f
   1739  122f		       a5 80		      LDA	player0x
   1740  1231		       c9 11		      CMP	#17
   1741  1233		       b0 04		      BCS	.skipL0116
   1742  1235				   .condpart21
   1743  1235		       a9 11		      LDA	#17
   1744  1237		       85 80		      STA	player0x
   1745  1239				   .skipL0116
   1746  1239				   .
   1747  1239							; 
   1748  1239
   1749  1239				   .L0117		;  if player0x  >  137 then player0x  =  137
   1750  1239
   1751  1239		       a9 89		      LDA	#137
   1752  123b		       c5 80		      CMP	player0x
   1753  123d		       b0 04		      BCS	.skipL0117
   1754  123f				   .condpart22
   1755  123f		       a9 89		      LDA	#137
   1756  1241		       85 80		      STA	player0x
   1757  1243				   .skipL0117
   1758  1243				   .
   1759  1243							; 
   1760  1243
   1761  1243				   .L0118		;  if _Enemy_Type  >  60 then goto __Fall_Collision_Check
   1762  1243
   1763  1243		       a9 3c		      LDA	#60
   1764  1245		       c5 dc		      CMP	_Enemy_Type
   1765  1247		       b0 03		      BCS	.skipL0118
   1766  1249				   .condpart23
   1767  1249		       4c 7c 12 	      jmp	.__Fall_Collision_Check
   1768  124c
   1769  124c				   .skipL0118
   1770  124c				   .
   1771  124c							; 
   1772  124c
   1773  124c				   .L0119		;  if !_Bit0_Player_Facing_Direction{0}  &&  player0x	>  80  &&  _Level_Data_Pointer	<  127 then player0x  =  80  :	gosub __Scroll_Left
   1774  124c
   1775  124c		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   1776  124e		       4a		      LSR
   1777  124f		       b0 13		      BCS	.skipL0119
   1778  1251				   .condpart24
   1779  1251		       a9 50		      LDA	#80
   1780  1253		       c5 80		      CMP	player0x
   1781  1255		       b0 0d		      BCS	.skip24then
   1782  1257				   .condpart25
   1783  1257		       a5 d5		      LDA	_Level_Data_Pointer
   1784  1259		       c9 7f		      CMP	#127
   1785  125b		       b0 07		      BCS	.skip25then
   1786  125d				   .condpart26
   1787  125d		       a9 50		      LDA	#80
   1788  125f		       85 80		      STA	player0x
   1789  1261		       20 45 1a 	      jsr	.__Scroll_Left
   1790  1264
   1791  1264				   .skip25then
   1792  1264				   .skip24then
   1793  1264				   .skipL0119
   1794  1264				   .
   1795  1264							; 
   1796  1264
   1797  1264				   .L0120		;  if _Bit0_Player_Facing_Direction{0}  &&  player0x  <  72  &&  _Level_Data_Pointer  >  32 then player0x  =  72  :  gosub __Scroll_Right
   1798  1264
   1799  1264		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   1800  1266		       4a		      LSR
   1801  1267		       90 13		      BCC	.skipL0120
   1802  1269				   .condpart27
   1803  1269		       a5 80		      LDA	player0x
   1804  126b		       c9 48		      CMP	#72
   1805  126d		       b0 0d		      BCS	.skip27then
   1806  126f				   .condpart28
   1807  126f		       a9 20		      LDA	#32
   1808  1271		       c5 d5		      CMP	_Level_Data_Pointer
   1809  1273		       b0 07		      BCS	.skip28then
   1810  1275				   .condpart29
   1811  1275		       a9 48		      LDA	#72
   1812  1277		       85 80		      STA	player0x
   1813  1279		       20 fc 1b 	      jsr	.__Scroll_Right
   1814  127c
   1815  127c				   .skip28then
   1816  127c				   .skip27then
   1817  127c				   .skipL0120
   1818  127c				   .
   1819  127c							; 
   1820  127c
   1821  127c				   .
   1822  127c							; 
   1823  127c
   1824  127c				   .
   1825  127c							; 
   1826  127c
   1827  127c				   .
   1828  127c							; 
   1829  127c
   1830  127c				   .
   1831  127c							; 
   1832  127c
   1833  127c				   .
   1834  127c							; 
   1835  127c
   1836  127c				   .
   1837  127c							; 
   1838  127c
   1839  127c				   .
   1840  127c							; 
   1841  127c
   1842  127c				   .
   1843  127c							; 
   1844  127c
   1845  127c				   .
   1846  127c							; 
   1847  127c
   1848  127c				   .__Fall_Collision_Check
   1849  127c							; __Fall_Collision_Check
   1850  127c
   1851  127c				   .
   1852  127c							; 
   1853  127c
   1854  127c				   .
   1855  127c							; 
   1856  127c
   1857  127c				   .
   1858  127c							; 
   1859  127c
   1860  127c				   .
   1861  127c							; 
   1862  127c
   1863  127c				   .L0121		;  if _Bit1_Jumping_Flag{1} then goto __Jump_Collision_Check
   1864  127c
   1865  127c		       a5 d7		      LDA	_Bit1_Jumping_Flag
   1866  127e		       29 02		      AND	#2
   1867  1280		       f0 03		      BEQ	.skipL0121
   1868  1282				   .condpart30
   1869  1282		       4c 18 13 	      jmp	.__Jump_Collision_Check
   1870  1285
   1871  1285				   .skipL0121
   1872  1285				   .
   1873  1285							; 
   1874  1285
   1875  1285				   .
   1876  1285							; 
   1877  1285
   1878  1285				   .
   1879  1285							; 
   1880  1285
   1881  1285				   .
   1882  1285							; 
   1883  1285
   1884  1285				   .
   1885  1285							; 
   1886  1285
   1887  1285				   .
   1888  1285							; 
   1889  1285
   1890  1285				   .L0122		;  if _Momentum_Up_Down  >  0 then z  =  0 else z  =  1
   1891  1285
   1892  1285		       a9 00		      LDA	#0
   1893  1287		       c5 e1		      CMP	_Momentum_Up_Down
   1894  1289		       b0 07		      BCS	.skipL0122
   1895  128b				   .condpart31
   1896  128b		       a9 00		      LDA	#0
   1897  128d		       85 ed		      STA	z
   1898  128f		       4c 96 12 	      jmp	.skipelse6
   1899  1292				   .skipL0122
   1900  1292		       a9 01		      LDA	#1
   1901  1294		       85 ed		      STA	z
   1902  1296				   .skipelse6
   1903  1296				   .
   1904  1296							; 
   1905  1296
   1906  1296				   .
   1907  1296							; 
   1908  1296
   1909  1296				   .
   1910  1296							; 
   1911  1296
   1912  1296				   .
   1913  1296							; 
   1914  1296
   1915  1296				   .
   1916  1296							; 
   1917  1296
   1918  1296				   .
   1919  1296							; 
   1920  1296
   1921  1296				   .L0123		;  y  =   ( player0y  +  z )  / 8
   1922  1296
   1923  1296							; complex statement detected
   1924  1296		       a5 85		      LDA	player0y
   1925  1298		       18		      CLC
   1926  1299		       65 ed		      ADC	z
   1927  129b		       4a		      lsr
   1928  129c		       4a		      lsr
   1929  129d		       4a		      lsr
   1930  129e		       85 ec		      STA	y
   1931  12a0				   .
   1932  12a0							; 
   1933  12a0
   1934  12a0				   .L0124		;  x  =   ( player0x  -  15 )	/ 4
   1935  12a0
   1936  12a0							; complex statement detected
   1937  12a0		       a5 80		      LDA	player0x
   1938  12a2		       38		      SEC
   1939  12a3		       e9 0f		      SBC	#15
   1940  12a5		       4a		      lsr
   1941  12a6		       4a		      lsr
   1942  12a7		       85 eb		      STA	x
   1943  12a9				   .
   1944  12a9							; 
   1945  12a9
   1946  12a9				   .
   1947  12a9							; 
   1948  12a9
   1949  12a9				   .
   1950  12a9							; 
   1951  12a9
   1952  12a9				   .
   1953  12a9							; 
   1954  12a9
   1955  12a9				   .
   1956  12a9							; 
   1957  12a9
   1958  12a9				   .
   1959  12a9							; 
   1960  12a9
   1961  12a9				   .
   1962  12a9							; 
   1963  12a9
   1964  12a9				   .
   1965  12a9							; 
   1966  12a9
   1967  12a9				   .
   1968  12a9							; 
   1969  12a9
   1970  12a9				   .L0125		;  if pfread ( x , y )  then player0y	=   ( y  *  8 )   -  1	:  _Momentum_Up_Down  =  0  :  goto __Jump_Collision_Check
   1971  12a9
   1972  12a9		       a5 eb		      LDA	x
   1973  12ab		       a4 ec		      LDY	y
   1974  12ad		       85 ee		      sta	temp7
   1975  12af		       a9 12		      lda	#>(ret_point4-1)
   1976  12b1		       48		      pha
   1977  12b2		       a9 c4		      lda	#<(ret_point4-1)
   1978  12b4		       48		      pha
   1979  12b5		       a9 f2		      lda	#>(pfread-1)
   1980  12b7		       48		      pha
   1981  12b8		       a9 ab		      lda	#<(pfread-1)
   1982  12ba		       48		      pha
   1983  12bb		       a5 ee		      lda	temp7
   1984  12bd		       48		      pha
   1985  12be		       8a		      txa
   1986  12bf		       48		      pha
   1987  12c0		       a2 08		      ldx	#8
   1988  12c2		       4c eb ff 	      jmp	BS_jsr
   1989  12c5				   ret_point4
   1990  12c5		       d0 11		      BNE	.skipL0125
   1991  12c7				   .condpart32
   1992  12c7							; complex statement detected
   1993  12c7		       a5 ec		      LDA	y
   1994  12c9		       0a		      asl
   1995  12ca		       0a		      asl
   1996  12cb		       0a		      asl
   1997  12cc		       38		      SEC
   1998  12cd		       e9 01		      SBC	#1
   1999  12cf		       85 85		      STA	player0y
   2000  12d1		       a9 00		      LDA	#0
   2001  12d3		       85 e1		      STA	_Momentum_Up_Down
   2002  12d5		       4c 18 13 	      jmp	.__Jump_Collision_Check
   2003  12d8
   2004  12d8				   .skipL0125
   2005  12d8				   .
   2006  12d8							; 
   2007  12d8
   2008  12d8				   .L0126		;  x  =   ( player0x  -  11 )	/ 4
   2009  12d8
   2010  12d8							; complex statement detected
   2011  12d8		       a5 80		      LDA	player0x
   2012  12da		       38		      SEC
   2013  12db		       e9 0b		      SBC	#11
   2014  12dd		       4a		      lsr
   2015  12de		       4a		      lsr
   2016  12df		       85 eb		      STA	x
   2017  12e1				   .
   2018  12e1							; 
   2019  12e1
   2020  12e1				   .L0127		;  if pfread ( x , y )  then player0y	=   ( y  *  8 )   -  1	:  _Momentum_Up_Down  =  0  :  goto __Jump_Collision_Check
   2021  12e1
   2022  12e1		       a5 eb		      LDA	x
   2023  12e3		       a4 ec		      LDY	y
   2024  12e5		       85 ee		      sta	temp7
   2025  12e7		       a9 12		      lda	#>(ret_point5-1)
   2026  12e9		       48		      pha
   2027  12ea		       a9 fc		      lda	#<(ret_point5-1)
   2028  12ec		       48		      pha
   2029  12ed		       a9 f2		      lda	#>(pfread-1)
   2030  12ef		       48		      pha
   2031  12f0		       a9 ab		      lda	#<(pfread-1)
   2032  12f2		       48		      pha
   2033  12f3		       a5 ee		      lda	temp7
   2034  12f5		       48		      pha
   2035  12f6		       8a		      txa
   2036  12f7		       48		      pha
   2037  12f8		       a2 08		      ldx	#8
   2038  12fa		       4c eb ff 	      jmp	BS_jsr
   2039  12fd				   ret_point5
   2040  12fd		       d0 11		      BNE	.skipL0127
   2041  12ff				   .condpart33
   2042  12ff							; complex statement detected
   2043  12ff		       a5 ec		      LDA	y
   2044  1301		       0a		      asl
   2045  1302		       0a		      asl
   2046  1303		       0a		      asl
   2047  1304		       38		      SEC
   2048  1305		       e9 01		      SBC	#1
   2049  1307		       85 85		      STA	player0y
   2050  1309		       a9 00		      LDA	#0
   2051  130b		       85 e1		      STA	_Momentum_Up_Down
   2052  130d		       4c 18 13 	      jmp	.__Jump_Collision_Check
   2053  1310
   2054  1310				   .skipL0127
   2055  1310				   .
   2056  1310							; 
   2057  1310
   2058  1310				   .
   2059  1310							; 
   2060  1310
   2061  1310				   .
   2062  1310							; 
   2063  1310
   2064  1310				   .
   2065  1310							; 
   2066  1310
   2067  1310				   .
   2068  1310							; 
   2069  1310
   2070  1310				   .
   2071  1310							; 
   2072  1310
   2073  1310				   .
   2074  1310							; 
   2075  1310
   2076  1310				   .L0128		;  if _Momentum_Up_Down  <  7 then _Momentum_Up_Down  =  _Momentum_Up_Down  +	1
   2077  1310
   2078  1310		       a5 e1		      LDA	_Momentum_Up_Down
   2079  1312		       c9 07		      CMP	#7
   2080  1314		       b0 02		      BCS	.skipL0128
   2081  1316				   .condpart34
   2082  1316		       e6 e1		      INC	_Momentum_Up_Down
   2083  1318				   .skipL0128
   2084  1318				   .
   2085  1318							; 
   2086  1318
   2087  1318				   .
   2088  1318							; 
   2089  1318
   2090  1318				   .
   2091  1318							; 
   2092  1318
   2093  1318				   .
   2094  1318							; 
   2095  1318
   2096  1318				   .
   2097  1318							; 
   2098  1318
   2099  1318				   .
   2100  1318							; 
   2101  1318
   2102  1318				   .
   2103  1318							; 
   2104  1318
   2105  1318				   .__Jump_Collision_Check
   2106  1318							; __Jump_Collision_Check
   2107  1318
   2108  1318				   .
   2109  1318							; 
   2110  1318
   2111  1318				   .
   2112  1318							; 
   2113  1318
   2114  1318				   .
   2115  1318							; 
   2116  1318
   2117  1318				   .
   2118  1318							; 
   2119  1318
   2120  1318				   .L0129		;  if !_Bit1_Jumping_Flag{1} then goto __Momentum_Left_Right_Check
   2121  1318
   2122  1318		       a5 d7		      LDA	_Bit1_Jumping_Flag
   2123  131a		       29 02		      AND	#2
   2124  131c		       d0 03		      BNE	.skipL0129
   2125  131e				   .condpart35
   2126  131e		       4c 18 14 	      jmp	.__Momentum_Left_Right_Check
   2127  1321
   2128  1321				   .skipL0129
   2129  1321				   .
   2130  1321							; 
   2131  1321
   2132  1321				   .
   2133  1321							; 
   2134  1321
   2135  1321				   .
   2136  1321							; 
   2137  1321
   2138  1321				   .
   2139  1321							; 
   2140  1321
   2141  1321				   .L0130		;  if _Bit3_Super_Mario_Power{3}  ||  _Bit4_Firey_Mario_Power{4} then y  =   ( player0y  -  22 )  / 8	:  z  =  10
   2142  1321
   2143  1321		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   2144  1323		       29 08		      AND	#8
   2145  1325		       f0 03		      BEQ	.skipL0130
   2146  1327				   .condpart36
   2147  1327		       4c 30 13 	      jmp	.condpart37
   2148  132a				   .skipL0130
   2149  132a		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
   2150  132c		       29 10		      AND	#16
   2151  132e		       f0 0e		      BEQ	.skip10OR
   2152  1330				   .condpart37
   2153  1330							; complex statement detected
   2154  1330		       a5 85		      LDA	player0y
   2155  1332		       38		      SEC
   2156  1333		       e9 16		      SBC	#22
   2157  1335		       4a		      lsr
   2158  1336		       4a		      lsr
   2159  1337		       4a		      lsr
   2160  1338		       85 ec		      STA	y
   2161  133a		       a9 0a		      LDA	#10
   2162  133c		       85 ed		      STA	z
   2163  133e				   .skip10OR
   2164  133e				   .
   2165  133e							; 
   2166  133e
   2167  133e				   .L0131		;  if _Bit5_Ducking_Flag{5}  ||  _Bit6_Regular_Mario{6} then y  =   ( player0y  -  12 )  / 8  :  z  =	0
   2168  133e
   2169  133e		       a5 d7		      LDA	_Bit5_Ducking_Flag
   2170  1340		       29 20		      AND	#32
   2171  1342		       f0 03		      BEQ	.skipL0131
   2172  1344				   .condpart38
   2173  1344		       4c 4b 13 	      jmp	.condpart39
   2174  1347				   .skipL0131
   2175  1347		       24 d7		      BIT	_Bit6_Regular_Mario
   2176  1349		       50 0e		      BVC	.skip11OR
   2177  134b				   .condpart39
   2178  134b							; complex statement detected
   2179  134b		       a5 85		      LDA	player0y
   2180  134d		       38		      SEC
   2181  134e		       e9 0c		      SBC	#12
   2182  1350		       4a		      lsr
   2183  1351		       4a		      lsr
   2184  1352		       4a		      lsr
   2185  1353		       85 ec		      STA	y
   2186  1355		       a9 00		      LDA	#0
   2187  1357		       85 ed		      STA	z
   2188  1359				   .skip11OR
   2189  1359				   .
   2190  1359							; 
   2191  1359
   2192  1359				   .L0132		;  if y  <  0	||  y  >  11 then goto __Jump_Collsn_Check_02
   2193  1359
   2194  1359		       a5 ec		      LDA	y
   2195  135b		       c9 00		      CMP	#0
   2196  135d		       b0 03		      BCS	.skipL0132
   2197  135f				   .condpart40
   2198  135f		       4c 68 13 	      jmp	.condpart41
   2199  1362				   .skipL0132
   2200  1362		       a9 0b		      LDA	#11
   2201  1364		       c5 ec		      CMP	y
   2202  1366		       b0 03		      BCS	.skip12OR
   2203  1368				   .condpart41
   2204  1368		       4c fc 13 	      jmp	.__Jump_Collsn_Check_02
   2205  136b
   2206  136b				   .skip12OR
   2207  136b				   .
   2208  136b							; 
   2209  136b
   2210  136b				   .L0133		;  if _Level  =  3  &&  y  >  1 then goto __Jump_Collsn_Check_02
   2211  136b
   2212  136b		       a5 ea		      LDA	_Level
   2213  136d		       c9 03		      CMP	#3
   2214  136f		       d0 09		      BNE	.skipL0133
   2215  1371				   .condpart42
   2216  1371		       a9 01		      LDA	#1
   2217  1373		       c5 ec		      CMP	y
   2218  1375		       b0 03		      BCS	.skip42then
   2219  1377				   .condpart43
   2220  1377		       4c fc 13 	      jmp	.__Jump_Collsn_Check_02
   2221  137a
   2222  137a				   .skip42then
   2223  137a				   .skipL0133
   2224  137a				   .
   2225  137a							; 
   2226  137a
   2227  137a				   .
   2228  137a							; 
   2229  137a
   2230  137a				   .
   2231  137a							; 
   2232  137a
   2233  137a				   .
   2234  137a							; 
   2235  137a
   2236  137a				   .L0134		;  x  =   ( player0x  -  15 )	/ 4
   2237  137a
   2238  137a							; complex statement detected
   2239  137a		       a5 80		      LDA	player0x
   2240  137c		       38		      SEC
   2241  137d		       e9 0f		      SBC	#15
   2242  137f		       4a		      lsr
   2243  1380		       4a		      lsr
   2244  1381		       85 eb		      STA	x
   2245  1383				   .
   2246  1383							; 
   2247  1383
   2248  1383				   .L0135		;  if pfread ( x , y )  then player0y	=   ( y  *  8 )   +  18  +  z  :  _Bit1_Jumping_Flag{1}  =  0  :  _Momentum_Up_Down  =	1  :  goto __Bonus_Check
   2249  1383
   2250  1383		       a5 eb		      LDA	x
   2251  1385		       a4 ec		      LDY	y
   2252  1387		       85 ee		      sta	temp7
   2253  1389		       a9 13		      lda	#>(ret_point6-1)
   2254  138b		       48		      pha
   2255  138c		       a9 9e		      lda	#<(ret_point6-1)
   2256  138e		       48		      pha
   2257  138f		       a9 f2		      lda	#>(pfread-1)
   2258  1391		       48		      pha
   2259  1392		       a9 ab		      lda	#<(pfread-1)
   2260  1394		       48		      pha
   2261  1395		       a5 ee		      lda	temp7
   2262  1397		       48		      pha
   2263  1398		       8a		      txa
   2264  1399		       48		      pha
   2265  139a		       a2 08		      ldx	#8
   2266  139c		       4c eb ff 	      jmp	BS_jsr
   2267  139f				   ret_point6
   2268  139f		       d0 1a		      BNE	.skipL0135
   2269  13a1				   .condpart44
   2270  13a1							; complex statement detected
   2271  13a1		       a5 ec		      LDA	y
   2272  13a3		       0a		      asl
   2273  13a4		       0a		      asl
   2274  13a5		       0a		      asl
   2275  13a6		       18		      CLC
   2276  13a7		       69 12		      ADC	#18
   2277  13a9		       18		      CLC
   2278  13aa		       65 ed		      ADC	z
   2279  13ac		       85 85		      STA	player0y
   2280  13ae		       a5 d7		      LDA	_Bit1_Jumping_Flag
   2281  13b0		       29 fd		      AND	#253
   2282  13b2		       85 d7		      STA	_Bit1_Jumping_Flag
   2283  13b4		       a9 01		      LDA	#1
   2284  13b6		       85 e1		      STA	_Momentum_Up_Down
   2285  13b8		       4c cf 14 	      jmp	.__Bonus_Check
   2286  13bb
   2287  13bb				   .skipL0135
   2288  13bb				   .
   2289  13bb							; 
   2290  13bb
   2291  13bb				   .L0136		;  x  =   ( player0x  -  11 )	/ 4
   2292  13bb
   2293  13bb							; complex statement detected
   2294  13bb		       a5 80		      LDA	player0x
   2295  13bd		       38		      SEC
   2296  13be		       e9 0b		      SBC	#11
   2297  13c0		       4a		      lsr
   2298  13c1		       4a		      lsr
   2299  13c2		       85 eb		      STA	x
   2300  13c4				   .
   2301  13c4							; 
   2302  13c4
   2303  13c4				   .L0137		;  if pfread ( x , y )  then player0y	=   ( y  *  8 )   +  18  +  z  :  _Bit1_Jumping_Flag{1}  =  0  :  _Momentum_Up_Down  =	1  :  goto __Bonus_Check
   2304  13c4
   2305  13c4		       a5 eb		      LDA	x
   2306  13c6		       a4 ec		      LDY	y
   2307  13c8		       85 ee		      sta	temp7
   2308  13ca		       a9 13		      lda	#>(ret_point7-1)
   2309  13cc		       48		      pha
   2310  13cd		       a9 df		      lda	#<(ret_point7-1)
   2311  13cf		       48		      pha
   2312  13d0		       a9 f2		      lda	#>(pfread-1)
   2313  13d2		       48		      pha
   2314  13d3		       a9 ab		      lda	#<(pfread-1)
   2315  13d5		       48		      pha
   2316  13d6		       a5 ee		      lda	temp7
   2317  13d8		       48		      pha
   2318  13d9		       8a		      txa
   2319  13da		       48		      pha
   2320  13db		       a2 08		      ldx	#8
   2321  13dd		       4c eb ff 	      jmp	BS_jsr
   2322  13e0				   ret_point7
   2323  13e0		       d0 1a		      BNE	.skipL0137
   2324  13e2				   .condpart45
   2325  13e2							; complex statement detected
   2326  13e2		       a5 ec		      LDA	y
   2327  13e4		       0a		      asl
   2328  13e5		       0a		      asl
   2329  13e6		       0a		      asl
   2330  13e7		       18		      CLC
   2331  13e8		       69 12		      ADC	#18
   2332  13ea		       18		      CLC
   2333  13eb		       65 ed		      ADC	z
   2334  13ed		       85 85		      STA	player0y
   2335  13ef		       a5 d7		      LDA	_Bit1_Jumping_Flag
   2336  13f1		       29 fd		      AND	#253
   2337  13f3		       85 d7		      STA	_Bit1_Jumping_Flag
   2338  13f5		       a9 01		      LDA	#1
   2339  13f7		       85 e1		      STA	_Momentum_Up_Down
   2340  13f9		       4c cf 14 	      jmp	.__Bonus_Check
   2341  13fc
   2342  13fc				   .skipL0137
   2343  13fc				   .
   2344  13fc							; 
   2345  13fc
   2346  13fc				   .
   2347  13fc							; 
   2348  13fc
   2349  13fc				   .
   2350  13fc							; 
   2351  13fc
   2352  13fc				   .
   2353  13fc							; 
   2354  13fc
   2355  13fc				   .
   2356  13fc							; 
   2357  13fc
   2358  13fc				   .
   2359  13fc							; 
   2360  13fc
   2361  13fc				   .
   2362  13fc							; 
   2363  13fc
   2364  13fc				   .__Jump_Collsn_Check_02
   2365  13fc							; __Jump_Collsn_Check_02
   2366  13fc
   2367  13fc				   .
   2368  13fc							; 
   2369  13fc
   2370  13fc				   .
   2371  13fc							; 
   2372  13fc
   2373  13fc				   .
   2374  13fc							; 
   2375  13fc
   2376  13fc				   .
   2377  13fc							; 
   2378  13fc
   2379  13fc				   .
   2380  13fc							; 
   2381  13fc
   2382  13fc				   .
   2383  13fc							; 
   2384  13fc
   2385  13fc				   .L0138		;  _Momentum_Up_Down  =  _Momentum_Up_Down  -	1
   2386  13fc
   2387  13fc		       c6 e1		      DEC	_Momentum_Up_Down
   2388  13fe				   .
   2389  13fe							; 
   2390  13fe
   2391  13fe				   .L0139		;  if _Momentum_Up_Down  <  1 then _Momentum_Up_Down  =  1  :	_Bit1_Jumping_Flag{1}  =  0
   2392  13fe
   2393  13fe		       a5 e1		      LDA	_Momentum_Up_Down
   2394  1400		       c9 01		      CMP	#1
   2395  1402		       b0 0a		      BCS	.skipL0139
   2396  1404				   .condpart46
   2397  1404		       a9 01		      LDA	#1
   2398  1406		       85 e1		      STA	_Momentum_Up_Down
   2399  1408		       a5 d7		      LDA	_Bit1_Jumping_Flag
   2400  140a		       29 fd		      AND	#253
   2401  140c		       85 d7		      STA	_Bit1_Jumping_Flag
   2402  140e				   .skipL0139
   2403  140e				   .
   2404  140e							; 
   2405  140e
   2406  140e				   .L0140		;  if player0y  <  8 then player0y  =	8
   2407  140e
   2408  140e		       a5 85		      LDA	player0y
   2409  1410		       c9 08		      CMP	#8
   2410  1412		       b0 04		      BCS	.skipL0140
   2411  1414				   .condpart47
   2412  1414		       a9 08		      LDA	#8
   2413  1416		       85 85		      STA	player0y
   2414  1418				   .skipL0140
   2415  1418				   .
   2416  1418							; 
   2417  1418
   2418  1418				   .
   2419  1418							; 
   2420  1418
   2421  1418				   .
   2422  1418							; 
   2423  1418
   2424  1418				   .
   2425  1418							; 
   2426  1418
   2427  1418				   .
   2428  1418							; 
   2429  1418
   2430  1418				   .
   2431  1418							; 
   2432  1418
   2433  1418				   .
   2434  1418							; 
   2435  1418
   2436  1418				   .__Momentum_Left_Right_Check
   2437  1418							; __Momentum_Left_Right_Check
   2438  1418
   2439  1418				   .
   2440  1418							; 
   2441  1418
   2442  1418				   .
   2443  1418							; 
   2444  1418
   2445  1418				   .
   2446  1418							; 
   2447  1418
   2448  1418				   .
   2449  1418							; 
   2450  1418
   2451  1418				   .
   2452  1418							; 
   2453  1418
   2454  1418				   .
   2455  1418							; 
   2456  1418
   2457  1418				   .L0141		;  if _Level  =  3 then goto __Finish_Check
   2458  1418
   2459  1418		       a5 ea		      LDA	_Level
   2460  141a		       c9 03		      CMP	#3
   2461  141c		       d0 03		      BNE	.skipL0141
   2462  141e				   .condpart48
   2463  141e		       4c b1 17 	      jmp	.__Finish_Check
   2464  1421
   2465  1421				   .skipL0141
   2466  1421				   .
   2467  1421							; 
   2468  1421
   2469  1421				   .L0142		;  if _Bit0_Player_Facing_Direction{0} then x	=   ( player0x	-  17 )  / 4 else x  =	 ( player0x  -	9 )  / 4
   2470  1421
   2471  1421		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   2472  1423		       4a		      LSR
   2473  1424		       90 0c		      BCC	.skipL0142
   2474  1426				   .condpart49
   2475  1426							; complex statement detected
   2476  1426		       a5 80		      LDA	player0x
   2477  1428		       38		      SEC
   2478  1429		       e9 11		      SBC	#17
   2479  142b		       4a		      lsr
   2480  142c		       4a		      lsr
   2481  142d		       85 eb		      STA	x
   2482  142f		       4c 3b 14 	      jmp	.skipelse7
   2483  1432				   .skipL0142
   2484  1432							; complex statement detected
   2485  1432		       a5 80		      LDA	player0x
   2486  1434		       38		      SEC
   2487  1435		       e9 09		      SBC	#9
   2488  1437		       4a		      lsr
   2489  1438		       4a		      lsr
   2490  1439		       85 eb		      STA	x
   2491  143b				   .skipelse7
   2492  143b				   .
   2493  143b							; 
   2494  143b
   2495  143b				   .L0143		;  y  =   ( player0y  -  4 )  / 8
   2496  143b
   2497  143b							; complex statement detected
   2498  143b		       a5 85		      LDA	player0y
   2499  143d		       38		      SEC
   2500  143e		       e9 04		      SBC	#4
   2501  1440		       4a		      lsr
   2502  1441		       4a		      lsr
   2503  1442		       4a		      lsr
   2504  1443		       85 ec		      STA	y
   2505  1445				   .
   2506  1445							; 
   2507  1445
   2508  1445				   .L0144		;  if pfread ( x , y )  then goto __Fix_Mario
   2509  1445
   2510  1445		       a5 eb		      LDA	x
   2511  1447		       a4 ec		      LDY	y
   2512  1449		       85 ee		      sta	temp7
   2513  144b		       a9 14		      lda	#>(ret_point8-1)
   2514  144d		       48		      pha
   2515  144e		       a9 60		      lda	#<(ret_point8-1)
   2516  1450		       48		      pha
   2517  1451		       a9 f2		      lda	#>(pfread-1)
   2518  1453		       48		      pha
   2519  1454		       a9 ab		      lda	#<(pfread-1)
   2520  1456		       48		      pha
   2521  1457		       a5 ee		      lda	temp7
   2522  1459		       48		      pha
   2523  145a		       8a		      txa
   2524  145b		       48		      pha
   2525  145c		       a2 08		      ldx	#8
   2526  145e		       4c eb ff 	      jmp	BS_jsr
   2527  1461				   ret_point8
   2528  1461		       d0 03		      BNE	.skipL0144
   2529  1463				   .condpart50
   2530  1463		       4c 93 17 	      jmp	.__Fix_Mario
   2531  1466
   2532  1466				   .skipL0144
   2533  1466				   .
   2534  1466							; 
   2535  1466
   2536  1466				   .L0145		;  y  =   ( player0y  -  11 )	/ 8
   2537  1466
   2538  1466							; complex statement detected
   2539  1466		       a5 85		      LDA	player0y
   2540  1468		       38		      SEC
   2541  1469		       e9 0b		      SBC	#11
   2542  146b		       4a		      lsr
   2543  146c		       4a		      lsr
   2544  146d		       4a		      lsr
   2545  146e		       85 ec		      STA	y
   2546  1470				   .
   2547  1470							; 
   2548  1470
   2549  1470				   .L0146		;  if pfread ( x , y )  then goto __Fix_Mario
   2550  1470
   2551  1470		       a5 eb		      LDA	x
   2552  1472		       a4 ec		      LDY	y
   2553  1474		       85 ee		      sta	temp7
   2554  1476		       a9 14		      lda	#>(ret_point9-1)
   2555  1478		       48		      pha
   2556  1479		       a9 8b		      lda	#<(ret_point9-1)
   2557  147b		       48		      pha
   2558  147c		       a9 f2		      lda	#>(pfread-1)
   2559  147e		       48		      pha
   2560  147f		       a9 ab		      lda	#<(pfread-1)
   2561  1481		       48		      pha
   2562  1482		       a5 ee		      lda	temp7
   2563  1484		       48		      pha
   2564  1485		       8a		      txa
   2565  1486		       48		      pha
   2566  1487		       a2 08		      ldx	#8
   2567  1489		       4c eb ff 	      jmp	BS_jsr
   2568  148c				   ret_point9
   2569  148c		       d0 03		      BNE	.skipL0146
   2570  148e				   .condpart51
   2571  148e		       4c 93 17 	      jmp	.__Fix_Mario
   2572  1491
   2573  1491				   .skipL0146
   2574  1491				   .
   2575  1491							; 
   2576  1491
   2577  1491				   .L0147		;  if _Bit5_Ducking_Flag{5}  ||  _Bit6_Regular_Mario{6} then goto __Finish_Check
   2578  1491
   2579  1491		       a5 d7		      LDA	_Bit5_Ducking_Flag
   2580  1493		       29 20		      AND	#32
   2581  1495		       f0 03		      BEQ	.skipL0147
   2582  1497				   .condpart52
   2583  1497		       4c 9e 14 	      jmp	.condpart53
   2584  149a				   .skipL0147
   2585  149a		       24 d7		      BIT	_Bit6_Regular_Mario
   2586  149c		       50 03		      BVC	.skip14OR
   2587  149e				   .condpart53
   2588  149e		       4c b1 17 	      jmp	.__Finish_Check
   2589  14a1
   2590  14a1				   .skip14OR
   2591  14a1				   .
   2592  14a1							; 
   2593  14a1
   2594  14a1				   .L0148		;  y  =   ( player0y  -  18 )	/ 8
   2595  14a1
   2596  14a1							; complex statement detected
   2597  14a1		       a5 85		      LDA	player0y
   2598  14a3		       38		      SEC
   2599  14a4		       e9 12		      SBC	#18
   2600  14a6		       4a		      lsr
   2601  14a7		       4a		      lsr
   2602  14a8		       4a		      lsr
   2603  14a9		       85 ec		      STA	y
   2604  14ab				   .
   2605  14ab							; 
   2606  14ab
   2607  14ab				   .L0149		;  if pfread ( x , y )  then goto __Fix_Mario
   2608  14ab
   2609  14ab		       a5 eb		      LDA	x
   2610  14ad		       a4 ec		      LDY	y
   2611  14af		       85 ee		      sta	temp7
   2612  14b1		       a9 14		      lda	#>(ret_point10-1)
   2613  14b3		       48		      pha
   2614  14b4		       a9 c6		      lda	#<(ret_point10-1)
   2615  14b6		       48		      pha
   2616  14b7		       a9 f2		      lda	#>(pfread-1)
   2617  14b9		       48		      pha
   2618  14ba		       a9 ab		      lda	#<(pfread-1)
   2619  14bc		       48		      pha
   2620  14bd		       a5 ee		      lda	temp7
   2621  14bf		       48		      pha
   2622  14c0		       8a		      txa
   2623  14c1		       48		      pha
   2624  14c2		       a2 08		      ldx	#8
   2625  14c4		       4c eb ff 	      jmp	BS_jsr
   2626  14c7				   ret_point10
   2627  14c7		       d0 03		      BNE	.skipL0149
   2628  14c9				   .condpart54
   2629  14c9		       4c 93 17 	      jmp	.__Fix_Mario
   2630  14cc
   2631  14cc				   .skipL0149
   2632  14cc				   .
   2633  14cc							; 
   2634  14cc
   2635  14cc				   .L0150		;  goto __Finish_Check
   2636  14cc
   2637  14cc		       4c b1 17 	      jmp	.__Finish_Check
   2638  14cf
   2639  14cf				   .
   2640  14cf							; 
   2641  14cf
   2642  14cf				   .
   2643  14cf							; 
   2644  14cf
   2645  14cf				   .
   2646  14cf							; 
   2647  14cf
   2648  14cf				   .
   2649  14cf							; 
   2650  14cf
   2651  14cf				   .
   2652  14cf							; 
   2653  14cf
   2654  14cf				   .
   2655  14cf							; 
   2656  14cf
   2657  14cf				   .
   2658  14cf							; 
   2659  14cf
   2660  14cf				   .
   2661  14cf							; 
   2662  14cf
   2663  14cf				   .
   2664  14cf							; 
   2665  14cf
   2666  14cf				   .
   2667  14cf							; 
   2668  14cf
   2669  14cf				   .
   2670  14cf							; 
   2671  14cf
   2672  14cf				   .
   2673  14cf							; 
   2674  14cf
   2675  14cf				   .__Bonus_Check
   2676  14cf							; __Bonus_Check
   2677  14cf
   2678  14cf				   .
   2679  14cf							; 
   2680  14cf
   2681  14cf				   .
   2682  14cf							; 
   2683  14cf
   2684  14cf				   .
   2685  14cf							; 
   2686  14cf
   2687  14cf				   .
   2688  14cf							; 
   2689  14cf
   2690  14cf				   .
   2691  14cf							; 
   2692  14cf
   2693  14cf				   .
   2694  14cf							; 
   2695  14cf
   2696  14cf				   .
   2697  14cf							; 
   2698  14cf
   2699  14cf				   .L0151		;  if _Level  =  4 then goto __Momentum_Left_Right_Check
   2700  14cf
   2701  14cf		       a5 ea		      LDA	_Level
   2702  14d1		       c9 04		      CMP	#4
   2703  14d3		       d0 03		      BNE	.skipL0151
   2704  14d5				   .condpart55
   2705  14d5		       4c 18 14 	      jmp	.__Momentum_Left_Right_Check
   2706  14d8
   2707  14d8				   .skipL0151
   2708  14d8				   .
   2709  14d8							; 
   2710  14d8
   2711  14d8				   .L0152		;  if player1y  <  player0y then goto __Enemy_Bump
   2712  14d8
   2713  14d8		       a5 86		      LDA	player1y
   2714  14da		       c5 85		      CMP	player0y
   2715  14dc		       b0 03		      BCS	.skipL0152
   2716  14de				   .condpart56
   2717  14de		       4c c2 16 	      jmp	.__Enemy_Bump
   2718  14e1
   2719  14e1				   .skipL0152
   2720  14e1				   .
   2721  14e1							; 
   2722  14e1
   2723  14e1				   .
   2724  14e1							; 
   2725  14e1
   2726  14e1				   .
   2727  14e1							; 
   2728  14e1
   2729  14e1				   .
   2730  14e1							; 
   2731  14e1
   2732  14e1				   .
   2733  14e1							; 
   2734  14e1
   2735  14e1				   .
   2736  14e1							; 
   2737  14e1
   2738  14e1				   .
   2739  14e1							; 
   2740  14e1
   2741  14e1				   .__Bonus_Check_02
   2742  14e1							; __Bonus_Check_02
   2743  14e1
   2744  14e1				   .
   2745  14e1							; 
   2746  14e1
   2747  14e1				   .
   2748  14e1							; 
   2749  14e1
   2750  14e1				   .
   2751  14e1							; 
   2752  14e1
   2753  14e1				   .
   2754  14e1							; 
   2755  14e1
   2756  14e1				   .
   2757  14e1							; 
   2758  14e1
   2759  14e1				   .
   2760  14e1							; 
   2761  14e1
   2762  14e1				   .L0153		;  if y  =  0	&&  _Level  =  3 then goto __Yellow_Block
   2763  14e1
   2764  14e1		       a5 ec		      LDA	y
   2765  14e3		       c9 00		      CMP	#0
   2766  14e5		       d0 09		      BNE	.skipL0153
   2767  14e7				   .condpart57
   2768  14e7		       a5 ea		      LDA	_Level
   2769  14e9		       c9 03		      CMP	#3
   2770  14eb		       d0 03		      BNE	.skip57then
   2771  14ed				   .condpart58
   2772  14ed		       4c 7f 15 	      jmp	.__Yellow_Block
   2773  14f0
   2774  14f0				   .skip57then
   2775  14f0				   .skipL0153
   2776  14f0				   .
   2777  14f0							; 
   2778  14f0
   2779  14f0				   .L0154		;  if y  =  1	&&  _Level  =  1 then goto __Yellow_Block
   2780  14f0
   2781  14f0		       a5 ec		      LDA	y
   2782  14f2		       c9 01		      CMP	#1
   2783  14f4		       d0 09		      BNE	.skipL0154
   2784  14f6				   .condpart59
   2785  14f6		       a5 ea		      LDA	_Level
   2786  14f8		       c9 01		      CMP	#1
   2787  14fa		       d0 03		      BNE	.skip59then
   2788  14fc				   .condpart60
   2789  14fc		       4c 7f 15 	      jmp	.__Yellow_Block
   2790  14ff
   2791  14ff				   .skip59then
   2792  14ff				   .skipL0154
   2793  14ff				   .
   2794  14ff							; 
   2795  14ff
   2796  14ff				   .L0155		;  if y  =  6	&&  _Level  <>	3 then goto __Yellow_Block
   2797  14ff
   2798  14ff		       a5 ec		      LDA	y
   2799  1501		       c9 06		      CMP	#6
   2800  1503		       d0 09		      BNE	.skipL0155
   2801  1505				   .condpart61
   2802  1505		       a5 ea		      LDA	_Level
   2803  1507		       c9 03		      CMP	#3
   2804  1509		       f0 03		      BEQ	.skip61then
   2805  150b				   .condpart62
   2806  150b		       4c 7f 15 	      jmp	.__Yellow_Block
   2807  150e
   2808  150e				   .skip61then
   2809  150e				   .skipL0155
   2810  150e				   .
   2811  150e							; 
   2812  150e
   2813  150e				   .__Brick_Block
   2814  150e							; __Brick_Block
   2815  150e
   2816  150e				   .
   2817  150e							; 
   2818  150e
   2819  150e				   .L0156		;  if y  <>  1  &&  _Level  =	3 then goto __Finish_Check
   2820  150e
   2821  150e		       a5 ec		      LDA	y
   2822  1510		       c9 01		      CMP	#1
   2823  1512		       f0 09		      BEQ	.skipL0156
   2824  1514				   .condpart63
   2825  1514		       a5 ea		      LDA	_Level
   2826  1516		       c9 03		      CMP	#3
   2827  1518		       d0 03		      BNE	.skip63then
   2828  151a				   .condpart64
   2829  151a		       4c b1 17 	      jmp	.__Finish_Check
   2830  151d
   2831  151d				   .skip63then
   2832  151d				   .skipL0156
   2833  151d				   .
   2834  151d							; 
   2835  151d
   2836  151d				   .L0157		;  if player1x  =  0  &&  _Level_Data_Pointer	>  31  &&  y  >  1  &&	!_Bit6_Regular_Mario{6} then goto __Hidden_Block
   2837  151d
   2838  151d		       a5 81		      LDA	player1x
   2839  151f		       c9 00		      CMP	#0
   2840  1521		       d0 13		      BNE	.skipL0157
   2841  1523				   .condpart65
   2842  1523		       a9 1f		      LDA	#31
   2843  1525		       c5 d5		      CMP	_Level_Data_Pointer
   2844  1527		       b0 0d		      BCS	.skip65then
   2845  1529				   .condpart66
   2846  1529		       a9 01		      LDA	#1
   2847  152b		       c5 ec		      CMP	y
   2848  152d		       b0 07		      BCS	.skip66then
   2849  152f				   .condpart67
   2850  152f		       24 d7		      BIT	_Bit6_Regular_Mario
   2851  1531		       70 03		      BVS	.skip67then
   2852  1533				   .condpart68
   2853  1533		       4c 62 16 	      jmp	.__Hidden_Block
   2854  1536
   2855  1536				   .skip67then
   2856  1536				   .skip66then
   2857  1536				   .skip65then
   2858  1536				   .skipL0157
   2859  1536				   .
   2860  1536							; 
   2861  1536
   2862  1536				   .__Brick_Block_02
   2863  1536							; __Brick_Block_02
   2864  1536
   2865  1536				   .
   2866  1536							; 
   2867  1536
   2868  1536				   .L0158		;  if _Bit6_Regular_Mario{6} then goto __Finish_Check
   2869  1536
   2870  1536		       24 d7		      BIT	_Bit6_Regular_Mario
   2871  1538		       50 03		      BVC	.skipL0158
   2872  153a				   .condpart69
   2873  153a		       4c b1 17 	      jmp	.__Finish_Check
   2874  153d
   2875  153d				   .skipL0158
   2876  153d				   .
   2877  153d							; 
   2878  153d
   2879  153d				   .L0159		;  AUDV0  =  10  :  AUDC0  =  7  :  AUDF0  =  22
   2880  153d
   2881  153d		       a9 0a		      LDA	#10
   2882  153f		       85 19		      STA	AUDV0
   2883  1541		       a9 07		      LDA	#7
   2884  1543		       85 15		      STA	AUDC0
   2885  1545		       a9 16		      LDA	#22
   2886  1547		       85 17		      STA	AUDF0
   2887  1549				   .
   2888  1549							; 
   2889  1549
   2890  1549				   .L0160		;  score  =  score  +	10
   2891  1549
   2892  1549		       f8		      SED
   2893  154a		       18		      CLC
   2894  154b		       a5 95		      LDA	score+2
   2895  154d		       69 10		      ADC	#$10
   2896  154f		       85 95		      STA	score+2
   2897  1551		       a5 94		      LDA	score+1
   2898  1553		       69 00		      ADC	#$00
   2899  1555		       85 94		      STA	score+1
   2900  1557		       a5 93		      LDA	score
   2901  1559		       69 00		      ADC	#$00
   2902  155b		       85 93		      STA	score
   2903  155d		       d8		      CLD
   2904  155e				   .
   2905  155e							; 
   2906  155e
   2907  155e				   .L0161		;  pfpixel x y off
   2908  155e
   2909  155e		       a2 01		      LDX	#1
   2910  1560		       a4 ec		      LDY	y
   2911  1562		       a5 eb		      LDA	x
   2912  1564		       85 ee		      sta	temp7
   2913  1566		       a9 15		      lda	#>(ret_point11-1)
   2914  1568		       48		      pha
   2915  1569		       a9 7b		      lda	#<(ret_point11-1)
   2916  156b		       48		      pha
   2917  156c		       a9 f2		      lda	#>(pfpixel-1)
   2918  156e		       48		      pha
   2919  156f		       a9 ba		      lda	#<(pfpixel-1)
   2920  1571		       48		      pha
   2921  1572		       a5 ee		      lda	temp7
   2922  1574		       48		      pha
   2923  1575		       8a		      txa
   2924  1576		       48		      pha
   2925  1577		       a2 08		      ldx	#8
   2926  1579		       4c eb ff 	      jmp	BS_jsr
   2927  157c				   ret_point11
   2928  157c				   .
   2929  157c							; 
   2930  157c
   2931  157c				   .L0162		;  goto __Finish_Check
   2932  157c
   2933  157c		       4c b1 17 	      jmp	.__Finish_Check
   2934  157f
   2935  157f				   .
   2936  157f							; 
   2937  157f
   2938  157f				   .
   2939  157f							; 
   2940  157f
   2941  157f				   .
   2942  157f							; 
   2943  157f
   2944  157f				   .
   2945  157f							; 
   2946  157f
   2947  157f				   .
   2948  157f							; 
   2949  157f
   2950  157f				   .
   2951  157f							; 
   2952  157f
   2953  157f				   .
   2954  157f							; 
   2955  157f
   2956  157f				   .__Yellow_Block
   2957  157f							; __Yellow_Block
   2958  157f
   2959  157f				   .
   2960  157f							; 
   2961  157f
   2962  157f				   .
   2963  157f							; 
   2964  157f
   2965  157f				   .
   2966  157f							; 
   2967  157f
   2968  157f				   .
   2969  157f							; 
   2970  157f
   2971  157f				   .
   2972  157f							; 
   2973  157f
   2974  157f				   .
   2975  157f							; 
   2976  157f
   2977  157f				   .L0163		;  pfpixel x y off
   2978  157f
   2979  157f		       a2 01		      LDX	#1
   2980  1581		       a4 ec		      LDY	y
   2981  1583		       a5 eb		      LDA	x
   2982  1585		       85 ee		      sta	temp7
   2983  1587		       a9 15		      lda	#>(ret_point12-1)
   2984  1589		       48		      pha
   2985  158a		       a9 9c		      lda	#<(ret_point12-1)
   2986  158c		       48		      pha
   2987  158d		       a9 f2		      lda	#>(pfpixel-1)
   2988  158f		       48		      pha
   2989  1590		       a9 ba		      lda	#<(pfpixel-1)
   2990  1592		       48		      pha
   2991  1593		       a5 ee		      lda	temp7
   2992  1595		       48		      pha
   2993  1596		       8a		      txa
   2994  1597		       48		      pha
   2995  1598		       a2 08		      ldx	#8
   2996  159a		       4c eb ff 	      jmp	BS_jsr
   2997  159d				   ret_point12
   2998  159d				   .
   2999  159d							; 
   3000  159d
   3001  159d				   .L0164		;  if _Animation_Timer  >  1  ||  _Bit4_Firey_Mario_Power{4} then score  =  score  +  100  :  goto __Add_Coin_Counter
   3002  159d
   3003  159d		       a9 01		      LDA	#1
   3004  159f		       c5 d4		      CMP	_Animation_Timer
   3005  15a1		       b0 03		      BCS	.skipL0164
   3006  15a3				   .condpart70
   3007  15a3		       4c ac 15 	      jmp	.condpart71
   3008  15a6				   .skipL0164
   3009  15a6		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
   3010  15a8		       29 10		      AND	#16
   3011  15aa		       f0 12		      BEQ	.skip22OR
   3012  15ac				   .condpart71
   3013  15ac		       f8		      SED
   3014  15ad		       18		      CLC
   3015  15ae		       a5 94		      LDA	score+1
   3016  15b0		       69 01		      ADC	#$01
   3017  15b2		       85 94		      STA	score+1
   3018  15b4		       a5 93		      LDA	score
   3019  15b6		       69 00		      ADC	#$00
   3020  15b8		       85 93		      STA	score
   3021  15ba		       d8		      CLD
   3022  15bb		       4c 11 17 	      jmp	.__Add_Coin_Counter
   3023  15be
   3024  15be				   .skip22OR
   3025  15be				   .
   3026  15be							; 
   3027  15be
   3028  15be				   .L0165		;  score  =  score  +	1000
   3029  15be
   3030  15be		       f8		      SED
   3031  15bf		       18		      CLC
   3032  15c0		       a5 94		      LDA	score+1
   3033  15c2		       69 10		      ADC	#$10
   3034  15c4		       85 94		      STA	score+1
   3035  15c6		       a5 93		      LDA	score
   3036  15c8		       69 00		      ADC	#$00
   3037  15ca		       85 93		      STA	score
   3038  15cc		       d8		      CLD
   3039  15cd				   .
   3040  15cd							; 
   3041  15cd
   3042  15cd				   .L0166		;  if _Bit4_Firey_Mario_Power{4} then goto __Finish_Check
   3043  15cd
   3044  15cd		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
   3045  15cf		       29 10		      AND	#16
   3046  15d1		       f0 03		      BEQ	.skipL0166
   3047  15d3				   .condpart72
   3048  15d3		       4c b1 17 	      jmp	.__Finish_Check
   3049  15d6
   3050  15d6				   .skipL0166
   3051  15d6				   .
   3052  15d6							; 
   3053  15d6
   3054  15d6				   .L0167		;  if _Bit3_Super_Mario_Power{3} then _Bit3_Super_Mario_Power{3}  =  0  :  _Bit4_Firey_Mario_Power{4}	=  1 else _Bit3_Super_Mario_Power{3}  =  1  :  _Bit4_Firey_Mario_Power{4}  =  0  :  _Bit6_Regular_Mario{6}  =  0
   3055  15d6
   3056  15d6		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   3057  15d8		       29 08		      AND	#8
   3058  15da		       f0 0f		      BEQ	.skipL0167
   3059  15dc				   .condpart73
   3060  15dc		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   3061  15de		       29 f7		      AND	#247
   3062  15e0		       85 d7		      STA	_Bit3_Super_Mario_Power
   3063  15e2		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
   3064  15e4		       09 10		      ORA	#16
   3065  15e6		       85 d7		      STA	_Bit4_Firey_Mario_Power
   3066  15e8		       4c fd 15 	      jmp	.skipelse8
   3067  15eb				   .skipL0167
   3068  15eb		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   3069  15ed		       09 08		      ORA	#8
   3070  15ef		       85 d7		      STA	_Bit3_Super_Mario_Power
   3071  15f1		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
   3072  15f3		       29 ef		      AND	#239
   3073  15f5		       85 d7		      STA	_Bit4_Firey_Mario_Power
   3074  15f7		       a5 d7		      LDA	_Bit6_Regular_Mario
   3075  15f9		       29 bf		      AND	#191
   3076  15fb		       85 d7		      STA	_Bit6_Regular_Mario
   3077  15fd				   .skipelse8
   3078  15fd				   .
   3079  15fd							; 
   3080  15fd
   3081  15fd				   .L0168		;  y  =  31  :  u  =  0
   3082  15fd
   3083  15fd		       a9 1f		      LDA	#31
   3084  15ff		       85 ec		      STA	y
   3085  1601		       a9 00		      LDA	#0
   3086  1603		       85 e8		      STA	u
   3087  1605				   .
   3088  1605							; 
   3089  1605
   3090  1605				   .L0169		;  for z  =  1 to 8
   3091  1605
   3092  1605		       a9 01		      LDA	#1
   3093  1607		       85 ed		      STA	z
   3094  1609				   .L0169forz
   3095  1609				   .
   3096  1609							; 
   3097  1609
   3098  1609				   .L0170		;  for x  =  1 to 4
   3099  1609
   3100  1609		       a9 01		      LDA	#1
   3101  160b		       85 eb		      STA	x
   3102  160d				   .L0170forx
   3103  160d				   .
   3104  160d							; 
   3105  160d
   3106  160d				   .L0171		;  if _Bit3_Super_Mario_Power{3} then gosub __Super_Mario_Color  :  gosub __Super_Mario else gosub __Fire_Mario_Color	:  gosub __Super_Mario
   3107  160d
   3108  160d		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   3109  160f		       29 08		      AND	#8
   3110  1611		       f0 09		      BEQ	.skipL0171
   3111  1613				   .condpart74
   3112  1613		       20 ca 1e 	      jsr	.__Super_Mario_Color
   3113  1616		       20 d3 1e 	      jsr	.__Super_Mario
   3114  1619		       4c 22 16 	      jmp	.skipelse9
   3115  161c				   .skipL0171
   3116  161c		       20 e0 1e 	      jsr	.__Fire_Mario_Color
   3117  161f		       20 d3 1e 	      jsr	.__Super_Mario
   3118  1622
   3119  1622				   .skipelse9
   3120  1622				   .
   3121  1622							; 
   3122  1622
   3123  1622				   .L0172		;  gosub __Power_Up_SFX
   3124  1622
   3125  1622		       20 a7 19 	      jsr	.__Power_Up_SFX
   3126  1625
   3127  1625				   .
   3128  1625							; 
   3129  1625
   3130  1625				   .L0173		;  gosub __Render_Screen
   3131  1625
   3132  1625		       20 ac 1d 	      jsr	.__Render_Screen
   3133  1628
   3134  1628				   .
   3135  1628							; 
   3136  1628
   3137  1628				   .L0174		;  next x
   3138  1628
   3139  1628		       a5 eb		      LDA	x
   3140  162a		       c9 04		      CMP	#4
   3141  162c
   3142  162c		       e6 eb		      INC	x
   3143  162e					      if	((* - .L0170forx) < 127) && ((* - .L0170forx) > -128)
   3144  162e		       90 dd		      bcc	.L0170forx
   3145  1630				  -	      else
   3146  1630				  -	      bcs	.3skipL0170forx
   3147  1630				  -	      jmp	.L0170forx
   3148  1630				  -.3skipL0170forx
   3149  1630					      endif
   3150  1630				   .
   3151  1630							; 
   3152  1630
   3153  1630				   .L0175		;  for x  =  1 to 4
   3154  1630
   3155  1630		       a9 01		      LDA	#1
   3156  1632		       85 eb		      STA	x
   3157  1634				   .L0175forx
   3158  1634				   .
   3159  1634							; 
   3160  1634
   3161  1634				   .L0176		;  if _Bit3_Super_Mario_Power{3} then gosub __Mario_Color  :  gosub __Mario else gosub __Super_Mario_Color  :	gosub __Super_Mario
   3162  1634
   3163  1634		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   3164  1636		       29 08		      AND	#8
   3165  1638		       f0 09		      BEQ	.skipL0176
   3166  163a				   .condpart75
   3167  163a		       20 91 1e 	      jsr	.__Mario_Color
   3168  163d		       20 a3 1e 	      jsr	.__Mario
   3169  1640		       4c 49 16 	      jmp	.skipelse10
   3170  1643				   .skipL0176
   3171  1643		       20 ca 1e 	      jsr	.__Super_Mario_Color
   3172  1646		       20 d3 1e 	      jsr	.__Super_Mario
   3173  1649
   3174  1649				   .skipelse10
   3175  1649				   .
   3176  1649							; 
   3177  1649
   3178  1649				   .L0177		;  gosub __Power_Up_SFX
   3179  1649
   3180  1649		       20 a7 19 	      jsr	.__Power_Up_SFX
   3181  164c
   3182  164c				   .
   3183  164c							; 
   3184  164c
   3185  164c				   .L0178		;  gosub __Render_Screen
   3186  164c
   3187  164c		       20 ac 1d 	      jsr	.__Render_Screen
   3188  164f
   3189  164f				   .
   3190  164f							; 
   3191  164f
   3192  164f				   .L0179		;  next x
   3193  164f
   3194  164f		       a5 eb		      LDA	x
   3195  1651		       c9 04		      CMP	#4
   3196  1653
   3197  1653		       e6 eb		      INC	x
   3198  1655					      if	((* - .L0175forx) < 127) && ((* - .L0175forx) > -128)
   3199  1655		       90 dd		      bcc	.L0175forx
   3200  1657				  -	      else
   3201  1657				  -	      bcs	.4skipL0175forx
   3202  1657				  -	      jmp	.L0175forx
   3203  1657				  -.4skipL0175forx
   3204  1657					      endif
   3205  1657				   .
   3206  1657							; 
   3207  1657
   3208  1657				   .L0180		;  next z
   3209  1657
   3210  1657		       a5 ed		      LDA	z
   3211  1659		       c9 08		      CMP	#8
   3212  165b
   3213  165b		       e6 ed		      INC	z
   3214  165d					      if	((* - .L0169forz) < 127) && ((* - .L0169forz) > -128)
   3215  165d		       90 aa		      bcc	.L0169forz
   3216  165f				  -	      else
   3217  165f				  -	      bcs	.5skipL0169forz
   3218  165f				  -	      jmp	.L0169forz
   3219  165f				  -.5skipL0169forz
   3220  165f					      endif
   3221  165f				   .
   3222  165f							; 
   3223  165f
   3224  165f				   .L0181		;  goto __Finish_Check
   3225  165f
   3226  165f		       4c b1 17 	      jmp	.__Finish_Check
   3227  1662
   3228  1662				   .
   3229  1662							; 
   3230  1662
   3231  1662				   .
   3232  1662							; 
   3233  1662
   3234  1662				   .
   3235  1662							; 
   3236  1662
   3237  1662				   .
   3238  1662							; 
   3239  1662
   3240  1662				   .
   3241  1662							; 
   3242  1662
   3243  1662				   .
   3244  1662							; 
   3245  1662
   3246  1662				   .
   3247  1662							; 
   3248  1662
   3249  1662				   .__Hidden_Block
   3250  1662							; __Hidden_Block
   3251  1662
   3252  1662				   .
   3253  1662							; 
   3254  1662
   3255  1662				   .
   3256  1662							; 
   3257  1662
   3258  1662				   .
   3259  1662							; 
   3260  1662
   3261  1662				   .
   3262  1662							; 
   3263  1662
   3264  1662				   .
   3265  1662							; 
   3266  1662
   3267  1662				   .
   3268  1662							; 
   3269  1662
   3270  1662				   .
   3271  1662							; 
   3272  1662
   3273  1662				   .
   3274  1662							; 
   3275  1662
   3276  1662				   .
   3277  1662							; 
   3278  1662
   3279  1662				   .
   3280  1662							; 
   3281  1662
   3282  1662				   .
   3283  1662							; 
   3284  1662
   3285  1662				   .
   3286  1662							; 
   3287  1662
   3288  1662				   .L0182		;  u  =  _Level_Timer	+  _Animation_Timer
   3289  1662
   3290  1662		       a5 d8		      LDA	_Level_Timer
   3291  1664		       18		      CLC
   3292  1665		       65 d4		      ADC	_Animation_Timer
   3293  1667		       85 e8		      STA	u
   3294  1669				   .
   3295  1669							; 
   3296  1669
   3297  1669				   .L0183		;  if u  =  10  ||  u	=  16 then goto __Hidden_Blck_02
   3298  1669
   3299  1669		       a5 e8		      LDA	u
   3300  166b		       c9 0a		      CMP	#10
   3301  166d		       d0 03		      BNE	.skipL0183
   3302  166f				   .condpart76
   3303  166f		       4c 78 16 	      jmp	.condpart77
   3304  1672				   .skipL0183
   3305  1672		       a5 e8		      LDA	u
   3306  1674		       c9 10		      CMP	#16
   3307  1676		       d0 03		      BNE	.skip23OR
   3308  1678				   .condpart77
   3309  1678		       4c 87 16 	      jmp	.__Hidden_Blck_02
   3310  167b
   3311  167b				   .skip23OR
   3312  167b				   .
   3313  167b							; 
   3314  167b
   3315  167b				   .L0184		;  if u  =  25 then goto __Hidden_Blck_02
   3316  167b
   3317  167b		       a5 e8		      LDA	u
   3318  167d		       c9 19		      CMP	#25
   3319  167f		       d0 03		      BNE	.skipL0184
   3320  1681				   .condpart78
   3321  1681		       4c 87 16 	      jmp	.__Hidden_Blck_02
   3322  1684
   3323  1684				   .skipL0184
   3324  1684				   .
   3325  1684							; 
   3326  1684
   3327  1684				   .L0185		;  goto __Brick_Block_02
   3328  1684
   3329  1684		       4c 36 15 	      jmp	.__Brick_Block_02
   3330  1687
   3331  1687				   .
   3332  1687							; 
   3333  1687
   3334  1687				   .__Hidden_Blck_02
   3335  1687							; __Hidden_Blck_02
   3336  1687
   3337  1687				   .
   3338  1687							; 
   3339  1687
   3340  1687				   .L0186		;  _Bit3_Enemy_Direction{3}  =  0
   3341  1687
   3342  1687		       a5 da		      LDA	_Bit3_Enemy_Direction
   3343  1689		       29 f7		      AND	#247
   3344  168b		       85 da		      STA	_Bit3_Enemy_Direction
   3345  168d				   .
   3346  168d							; 
   3347  168d
   3348  168d				   .L0187		;  player1x  =   ( x  *  4 )	+  17
   3349  168d
   3350  168d							; complex statement detected
   3351  168d		       a5 eb		      LDA	x
   3352  168f		       0a		      asl
   3353  1690		       0a		      asl
   3354  1691		       18		      CLC
   3355  1692		       69 11		      ADC	#17
   3356  1694		       85 81		      STA	player1x
   3357  1696				   .
   3358  1696							; 
   3359  1696
   3360  1696				   .L0188		;  player1y  =  y  *  8
   3361  1696
   3362  1696		       a5 ec		      LDA	y
   3363  1698		       0a		      asl
   3364  1699		       0a		      asl
   3365  169a		       0a		      asl
   3366  169b		       85 86		      STA	player1y
   3367  169d				   .
   3368  169d							; 
   3369  169d
   3370  169d				   .L0189		;  _Enemy_Type  =  _Silver_Coin
   3371  169d
   3372  169d		       a9 16		      LDA	#_Silver_Coin
   3373  169f		       85 dc		      STA	_Enemy_Type
   3374  16a1				   .
   3375  16a1							; 
   3376  16a1
   3377  16a1				   .L0190		;  if _Animation_Timer  >  3  &&  _Star_Invincibility_Timer  =  0 then _Enemy_Type  =	_Starman
   3378  16a1
   3379  16a1		       a9 03		      LDA	#3
   3380  16a3		       c5 d4		      CMP	_Animation_Timer
   3381  16a5		       b0 0a		      BCS	.skipL0190
   3382  16a7				   .condpart79
   3383  16a7		       a5 de		      LDA	_Star_Invincibility_Timer
   3384  16a9		       c9 00		      CMP	#0
   3385  16ab		       d0 04		      BNE	.skip79then
   3386  16ad				   .condpart80
   3387  16ad		       a9 18		      LDA	#_Starman
   3388  16af		       85 dc		      STA	_Enemy_Type
   3389  16b1				   .skip79then
   3390  16b1				   .skipL0190
   3391  16b1				   .
   3392  16b1							; 
   3393  16b1
   3394  16b1				   .L0191		;  if _Animation_Timer  =  6 then _Enemy_Type	=  _1up_Mushroom
   3395  16b1
   3396  16b1		       a5 d4		      LDA	_Animation_Timer
   3397  16b3		       c9 06		      CMP	#6
   3398  16b5		       d0 04		      BNE	.skipL0191
   3399  16b7				   .condpart81
   3400  16b7		       a9 1a		      LDA	#_1up_Mushroom
   3401  16b9		       85 dc		      STA	_Enemy_Type
   3402  16bb				   .skipL0191
   3403  16bb				   .
   3404  16bb							; 
   3405  16bb
   3406  16bb				   .L0192		;  _Enemy_Momentum  =	3
   3407  16bb
   3408  16bb		       a9 03		      LDA	#3
   3409  16bd		       85 dd		      STA	_Enemy_Momentum
   3410  16bf				   .
   3411  16bf							; 
   3412  16bf
   3413  16bf				   .L0193		;  goto __Brick_Block_02
   3414  16bf
   3415  16bf		       4c 36 15 	      jmp	.__Brick_Block_02
   3416  16c2
   3417  16c2				   .
   3418  16c2							; 
   3419  16c2
   3420  16c2				   .
   3421  16c2							; 
   3422  16c2
   3423  16c2				   .
   3424  16c2							; 
   3425  16c2
   3426  16c2				   .
   3427  16c2							; 
   3428  16c2
   3429  16c2				   .
   3430  16c2							; 
   3431  16c2
   3432  16c2				   .
   3433  16c2							; 
   3434  16c2
   3435  16c2				   .
   3436  16c2							; 
   3437  16c2
   3438  16c2				   .__Enemy_Bump
   3439  16c2							; __Enemy_Bump
   3440  16c2
   3441  16c2				   .
   3442  16c2							; 
   3443  16c2
   3444  16c2				   .
   3445  16c2							; 
   3446  16c2
   3447  16c2				   .
   3448  16c2							; 
   3449  16c2
   3450  16c2				   .
   3451  16c2							; 
   3452  16c2
   3453  16c2				   .
   3454  16c2							; 
   3455  16c2
   3456  16c2				   .L0194		;  _Temp_u_PF_Row  =	( y  *	8 )   -  1
   3457  16c2
   3458  16c2							; complex statement detected
   3459  16c2		       a5 ec		      LDA	y
   3460  16c4		       0a		      asl
   3461  16c5		       0a		      asl
   3462  16c6		       0a		      asl
   3463  16c7		       38		      SEC
   3464  16c8		       e9 01		      SBC	#1
   3465  16ca		       85 e8		      STA	_Temp_u_PF_Row
   3466  16cc				   .
   3467  16cc							; 
   3468  16cc
   3469  16cc				   .L0195		;  if _Temp_u_PF_Row  <>  player1y then goto __Bonus_Check_02
   3470  16cc
   3471  16cc		       a5 e8		      LDA	_Temp_u_PF_Row
   3472  16ce		       c5 86		      CMP	player1y
   3473  16d0		       f0 03		      BEQ	.skipL0195
   3474  16d2				   .condpart82
   3475  16d2		       4c e1 14 	      jmp	.__Bonus_Check_02
   3476  16d5
   3477  16d5				   .skipL0195
   3478  16d5				   .
   3479  16d5							; 
   3480  16d5
   3481  16d5				   .L0196		;  _Temp_u_PF_Column  =   ( x	*  4 )	 +  13	:  z  =   ( x  *  4 )	+  23
   3482  16d5
   3483  16d5							; complex statement detected
   3484  16d5		       a5 eb		      LDA	x
   3485  16d7		       0a		      asl
   3486  16d8		       0a		      asl
   3487  16d9		       18		      CLC
   3488  16da		       69 0d		      ADC	#13
   3489  16dc		       85 e8		      STA	_Temp_u_PF_Column
   3490  16de							; complex statement detected
   3491  16de		       a5 eb		      LDA	x
   3492  16e0		       0a		      asl
   3493  16e1		       0a		      asl
   3494  16e2		       18		      CLC
   3495  16e3		       69 17		      ADC	#23
   3496  16e5		       85 ed		      STA	z
   3497  16e7				   .
   3498  16e7							; 
   3499  16e7
   3500  16e7				   .L0197		;  if player1x  >  _Temp_u_PF_Column  &&  player1x  <	z then goto __Enemy_Bump_02
   3501  16e7
   3502  16e7		       a5 e8		      LDA	_Temp_u_PF_Column
   3503  16e9		       c5 81		      CMP	player1x
   3504  16eb		       b0 09		      BCS	.skipL0197
   3505  16ed				   .condpart83
   3506  16ed		       a5 81		      LDA	player1x
   3507  16ef		       c5 ed		      CMP	z
   3508  16f1		       b0 03		      BCS	.skip83then
   3509  16f3				   .condpart84
   3510  16f3		       4c f9 16 	      jmp	.__Enemy_Bump_02
   3511  16f6
   3512  16f6				   .skip83then
   3513  16f6				   .skipL0197
   3514  16f6				   .
   3515  16f6							; 
   3516  16f6
   3517  16f6				   .L0198		;  goto __Bonus_Check_02
   3518  16f6
   3519  16f6		       4c e1 14 	      jmp	.__Bonus_Check_02
   3520  16f9
   3521  16f9				   .
   3522  16f9							; 
   3523  16f9
   3524  16f9				   .__Enemy_Bump_02
   3525  16f9							; __Enemy_Bump_02
   3526  16f9
   3527  16f9				   .
   3528  16f9							; 
   3529  16f9
   3530  16f9				   .L0199		;  _Bit4_Enemy_Dead_Flag{4}  =  1  :  score  =  score	+  300
   3531  16f9
   3532  16f9		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
   3533  16fb		       09 10		      ORA	#16
   3534  16fd		       85 da		      STA	_Bit4_Enemy_Dead_Flag
   3535  16ff		       f8		      SED
   3536  1700		       18		      CLC
   3537  1701		       a5 94		      LDA	score+1
   3538  1703		       69 03		      ADC	#$03
   3539  1705		       85 94		      STA	score+1
   3540  1707		       a5 93		      LDA	score
   3541  1709		       69 00		      ADC	#$00
   3542  170b		       85 93		      STA	score
   3543  170d		       d8		      CLD
   3544  170e				   .
   3545  170e							; 
   3546  170e
   3547  170e				   .L0200		;  goto __Bonus_Check_02
   3548  170e
   3549  170e		       4c e1 14 	      jmp	.__Bonus_Check_02
   3550  1711
   3551  1711				   .
   3552  1711							; 
   3553  1711
   3554  1711				   .
   3555  1711							; 
   3556  1711
   3557  1711				   .
   3558  1711							; 
   3559  1711
   3560  1711				   .
   3561  1711							; 
   3562  1711
   3563  1711				   .
   3564  1711							; 
   3565  1711
   3566  1711				   .
   3567  1711							; 
   3568  1711
   3569  1711				   .
   3570  1711							; 
   3571  1711
   3572  1711				   .__Add_Coin_Counter
   3573  1711							; __Add_Coin_Counter
   3574  1711
   3575  1711				   .
   3576  1711							; 
   3577  1711
   3578  1711				   .
   3579  1711							; 
   3580  1711
   3581  1711				   .
   3582  1711							; 
   3583  1711
   3584  1711				   .
   3585  1711							; 
   3586  1711
   3587  1711				   .
   3588  1711							; 
   3589  1711
   3590  1711				   .L0201		;  _Coin_Counter  =  _Coin_Counter  +	1
   3591  1711
   3592  1711		       e6 d6		      INC	_Coin_Counter
   3593  1713				   .
   3594  1713							; 
   3595  1713
   3596  1713				   .L0202		;  if _Coin_Counter  >  3 then _Coin_Counter  =  0  :	pfscore2  =  pfscore2  *  2 | 1
   3597  1713
   3598  1713		       a9 03		      LDA	#3
   3599  1715		       c5 d6		      CMP	_Coin_Counter
   3600  1717		       b0 0b		      BCS	.skipL0202
   3601  1719				   .condpart85
   3602  1719		       a9 00		      LDA	#0
   3603  171b		       85 d6		      STA	_Coin_Counter
   3604  171d							; complex statement detected
   3605  171d		       a5 f3		      LDA	pfscore2
   3606  171f		       0a		      asl
   3607  1720		       09 01		      ORA	#1
   3608  1722		       85 f3		      STA	pfscore2
   3609  1724				   .skipL0202
   3610  1724				   .
   3611  1724							; 
   3612  1724
   3613  1724				   .L0203		;  AUDV0  =  12  :  AUDC0  =  4  :  AUDF0  =  7
   3614  1724
   3615  1724		       a9 0c		      LDA	#12
   3616  1726		       85 19		      STA	AUDV0
   3617  1728		       a9 04		      LDA	#4
   3618  172a		       85 15		      STA	AUDC0
   3619  172c		       a9 07		      LDA	#7
   3620  172e		       85 17		      STA	AUDF0
   3621  1730				   .
   3622  1730							; 
   3623  1730
   3624  1730				   .L0204		;  if pfscore2  <  250 then goto __Finish_Check
   3625  1730
   3626  1730		       a5 f3		      LDA	pfscore2
   3627  1732		       c9 fa		      CMP	#250
   3628  1734		       b0 03		      BCS	.skipL0204
   3629  1736				   .condpart86
   3630  1736		       4c b1 17 	      jmp	.__Finish_Check
   3631  1739
   3632  1739				   .skipL0204
   3633  1739				   .
   3634  1739							; 
   3635  1739
   3636  1739				   .L0205		;  y  =  11  :  _Temp_u_PF_Column  =  0  :  _Lives_Counter  =	_Lives_Counter	+  1
   3637  1739
   3638  1739		       a9 0b		      LDA	#11
   3639  173b		       85 ec		      STA	y
   3640  173d		       a9 00		      LDA	#0
   3641  173f		       85 e8		      STA	_Temp_u_PF_Column
   3642  1741		       e6 df		      INC	_Lives_Counter
   3643  1743				   .
   3644  1743							; 
   3645  1743
   3646  1743				   .L0206		;  if _Lives_Counter  =  255 then _Lives_Counter  =  254
   3647  1743
   3648  1743		       a5 df		      LDA	_Lives_Counter
   3649  1745		       c9 ff		      CMP	#255
   3650  1747		       d0 04		      BNE	.skipL0206
   3651  1749				   .condpart87
   3652  1749		       a9 fe		      LDA	#254
   3653  174b		       85 df		      STA	_Lives_Counter
   3654  174d				   .skipL0206
   3655  174d				   .
   3656  174d							; 
   3657  174d
   3658  174d				   .
   3659  174d							; 
   3660  174d
   3661  174d				   .
   3662  174d							; 
   3663  174d
   3664  174d				   .
   3665  174d							; 
   3666  174d
   3667  174d				   .
   3668  174d							; 
   3669  174d
   3670  174d				   .
   3671  174d							; 
   3672  174d
   3673  174d				   .
   3674  174d							; 
   3675  174d
   3676  174d				   .__1Up
   3677  174d							; __1Up
   3678  174d
   3679  174d				   .
   3680  174d							; 
   3681  174d
   3682  174d				   .
   3683  174d							; 
   3684  174d
   3685  174d				   .
   3686  174d							; 
   3687  174d
   3688  174d				   .
   3689  174d							; 
   3690  174d
   3691  174d				   .L0207		;  gosub __1Up_SFX
   3692  174d
   3693  174d		       20 11 1a 	      jsr	.__1Up_SFX
   3694  1750
   3695  1750				   .
   3696  1750							; 
   3697  1750
   3698  1750				   .L0208		;  gosub __Render_Screen  :  gosub __Render_Screen  :	gosub __Render_Screen  :  gosub __Render_Screen
   3699  1750
   3700  1750		       20 ac 1d 	      jsr	.__Render_Screen
   3701  1753		       20 ac 1d 	      jsr	.__Render_Screen
   3702  1756		       20 ac 1d 	      jsr	.__Render_Screen
   3703  1759		       20 ac 1d 	      jsr	.__Render_Screen
   3704  175c
   3705  175c				   .
   3706  175c							; 
   3707  175c
   3708  175c				   .L0209		;  _Bit7_Mario_On_Off{7}  =  1  :  _Bit7_Mario_Invincibility{7}  =  1
   3709  175c
   3710  175c		       a5 da		      LDA	_Bit7_Mario_On_Off
   3711  175e		       09 80		      ORA	#128
   3712  1760		       85 da		      STA	_Bit7_Mario_On_Off
   3713  1762		       a5 d7		      LDA	_Bit7_Mario_Invincibility
   3714  1764		       09 80		      ORA	#128
   3715  1766		       85 d7		      STA	_Bit7_Mario_Invincibility
   3716  1768				   .
   3717  1768							; 
   3718  1768
   3719  1768				   .L0210		;  gosub __Render_Screen  :  gosub __Render_Screen  :	gosub __Render_Screen  :  gosub __Render_Screen
   3720  1768
   3721  1768		       20 ac 1d 	      jsr	.__Render_Screen
   3722  176b		       20 ac 1d 	      jsr	.__Render_Screen
   3723  176e		       20 ac 1d 	      jsr	.__Render_Screen
   3724  1771		       20 ac 1d 	      jsr	.__Render_Screen
   3725  1774
   3726  1774				   .
   3727  1774							; 
   3728  1774
   3729  1774				   .L0211		;  _Bit7_Mario_On_Off{7}  =  0  :  _Bit7_Mario_Invincibility{7}  =  0	:  gosub __Set_Up_Mario
   3730  1774
   3731  1774		       a5 da		      LDA	_Bit7_Mario_On_Off
   3732  1776		       29 7f		      AND	#127
   3733  1778		       85 da		      STA	_Bit7_Mario_On_Off
   3734  177a		       a5 d7		      LDA	_Bit7_Mario_Invincibility
   3735  177c		       29 7f		      AND	#127
   3736  177e		       85 d7		      STA	_Bit7_Mario_Invincibility
   3737  1780		       20 99 18 	      jsr	.__Set_Up_Mario
   3738  1783
   3739  1783				   .
   3740  1783							; 
   3741  1783
   3742  1783				   .L0212		;  if y  =  3 then pfscore2  =  0  :  goto __Finish_Check
   3743  1783
   3744  1783		       a5 ec		      LDA	y
   3745  1785		       c9 03		      CMP	#3
   3746  1787		       d0 07		      BNE	.skipL0212
   3747  1789				   .condpart88
   3748  1789		       a9 00		      LDA	#0
   3749  178b		       85 f3		      STA	pfscore2
   3750  178d		       4c b1 17 	      jmp	.__Finish_Check
   3751  1790
   3752  1790				   .skipL0212
   3753  1790				   .
   3754  1790							; 
   3755  1790
   3756  1790				   .L0213		;  goto __1Up
   3757  1790
   3758  1790		       4c 4d 17 	      jmp	.__1Up
   3759  1793
   3760  1793				   .
   3761  1793							; 
   3762  1793
   3763  1793				   .
   3764  1793							; 
   3765  1793
   3766  1793				   .
   3767  1793							; 
   3768  1793
   3769  1793				   .
   3770  1793							; 
   3771  1793
   3772  1793				   .
   3773  1793							; 
   3774  1793
   3775  1793				   .
   3776  1793							; 
   3777  1793
   3778  1793				   .
   3779  1793							; 
   3780  1793
   3781  1793				   .__Fix_Mario
   3782  1793							; __Fix_Mario
   3783  1793
   3784  1793				   .
   3785  1793							; 
   3786  1793
   3787  1793				   .
   3788  1793							; 
   3789  1793
   3790  1793				   .
   3791  1793							; 
   3792  1793
   3793  1793				   .
   3794  1793							; 
   3795  1793
   3796  1793				   .
   3797  1793							; 
   3798  1793
   3799  1793				   .L0214		;  if _Bit0_Player_Facing_Direction{0} then player0x  =   ( x	*  4 )	 +  21 else player0x  =   ( x  *  4 )	+  9
   3800  1793
   3801  1793		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   3802  1795		       4a		      LSR
   3803  1796		       90 0c		      BCC	.skipL0214
   3804  1798				   .condpart89
   3805  1798							; complex statement detected
   3806  1798		       a5 eb		      LDA	x
   3807  179a		       0a		      asl
   3808  179b		       0a		      asl
   3809  179c		       18		      CLC
   3810  179d		       69 15		      ADC	#21
   3811  179f		       85 80		      STA	player0x
   3812  17a1		       4c ad 17 	      jmp	.skipelse11
   3813  17a4				   .skipL0214
   3814  17a4							; complex statement detected
   3815  17a4		       a5 eb		      LDA	x
   3816  17a6		       0a		      asl
   3817  17a7		       0a		      asl
   3818  17a8		       18		      CLC
   3819  17a9		       69 09		      ADC	#9
   3820  17ab		       85 80		      STA	player0x
   3821  17ad				   .skipelse11
   3822  17ad				   .
   3823  17ad							; 
   3824  17ad
   3825  17ad				   .L0215		;  _Momentum_Left_Right  =  0
   3826  17ad
   3827  17ad		       a9 00		      LDA	#0
   3828  17af		       85 e0		      STA	_Momentum_Left_Right
   3829  17b1				   .
   3830  17b1							; 
   3831  17b1
   3832  17b1				   .
   3833  17b1							; 
   3834  17b1
   3835  17b1				   .
   3836  17b1							; 
   3837  17b1
   3838  17b1				   .
   3839  17b1							; 
   3840  17b1
   3841  17b1				   .
   3842  17b1							; 
   3843  17b1
   3844  17b1				   .
   3845  17b1							; 
   3846  17b1
   3847  17b1				   .
   3848  17b1							; 
   3849  17b1
   3850  17b1				   .__Finish_Check
   3851  17b1							; __Finish_Check
   3852  17b1
   3853  17b1				   .
   3854  17b1							; 
   3855  17b1
   3856  17b1				   .
   3857  17b1							; 
   3858  17b1
   3859  17b1				   .
   3860  17b1							; 
   3861  17b1
   3862  17b1				   .
   3863  17b1							; 
   3864  17b1
   3865  17b1				   .
   3866  17b1							; 
   3867  17b1
   3868  17b1				   .
   3869  17b1							; 
   3870  17b1
   3871  17b1				   .
   3872  17b1							; 
   3873  17b1
   3874  17b1				   .
   3875  17b1							; 
   3876  17b1
   3877  17b1				   .
   3878  17b1							; 
   3879  17b1
   3880  17b1				   .L0216		;  if ballx  >  0 then u  =  bally  :	bally  =  120
   3881  17b1
   3882  17b1		       a9 00		      LDA	#0
   3883  17b3		       c5 84		      CMP	ballx
   3884  17b5		       b0 08		      BCS	.skipL0216
   3885  17b7				   .condpart90
   3886  17b7		       a5 89		      LDA	bally
   3887  17b9		       85 e8		      STA	u
   3888  17bb		       a9 78		      LDA	#120
   3889  17bd		       85 89		      STA	bally
   3890  17bf				   .skipL0216
   3891  17bf				   .
   3892  17bf							; 
   3893  17bf
   3894  17bf				   .L0217		;  if _Object_Scroll_In_Data  >  0  &&  _Bit0_Player_Facing_Direction{0}  &&  player1x  >  0 then player1x  =	player1x  +  4
   3895  17bf
   3896  17bf		       a9 00		      LDA	#0
   3897  17c1		       c5 db		      CMP	_Object_Scroll_In_Data
   3898  17c3		       b0 12		      BCS	.skipL0217
   3899  17c5				   .condpart91
   3900  17c5		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   3901  17c7		       4a		      LSR
   3902  17c8		       90 0d		      BCC	.skip91then
   3903  17ca				   .condpart92
   3904  17ca		       a9 00		      LDA	#0
   3905  17cc		       c5 81		      CMP	player1x
   3906  17ce		       b0 07		      BCS	.skip92then
   3907  17d0				   .condpart93
   3908  17d0		       a5 81		      LDA	player1x
   3909  17d2		       18		      CLC
   3910  17d3		       69 04		      ADC	#4
   3911  17d5		       85 81		      STA	player1x
   3912  17d7				   .skip92then
   3913  17d7				   .skip91then
   3914  17d7				   .skipL0217
   3915  17d7				   .
   3916  17d7							; 
   3917  17d7
   3918  17d7				   .L0218		;  if _Object_Scroll_In_Data  >  0  &&  !_Bit0_Player_Facing_Direction{0}  &&	player1x  >  0 then player1x  =  player1x  -  4
   3919  17d7
   3920  17d7		       a9 00		      LDA	#0
   3921  17d9		       c5 db		      CMP	_Object_Scroll_In_Data
   3922  17db		       b0 12		      BCS	.skipL0218
   3923  17dd				   .condpart94
   3924  17dd		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   3925  17df		       4a		      LSR
   3926  17e0		       b0 0d		      BCS	.skip94then
   3927  17e2				   .condpart95
   3928  17e2		       a9 00		      LDA	#0
   3929  17e4		       c5 81		      CMP	player1x
   3930  17e6		       b0 07		      BCS	.skip95then
   3931  17e8				   .condpart96
   3932  17e8		       a5 81		      LDA	player1x
   3933  17ea		       38		      SEC
   3934  17eb		       e9 04		      SBC	#4
   3935  17ed		       85 81		      STA	player1x
   3936  17ef				   .skip95then
   3937  17ef				   .skip94then
   3938  17ef				   .skipL0218
   3939  17ef				   .
   3940  17ef							; 
   3941  17ef
   3942  17ef				   .L0219		;  if _Moving_Shell_X_Coordinate  >  0  ||  _Moving_Shell_Y_Coordinate  >  0 then gosub __Redraw_Shell
   3943  17ef
   3944  17ef		       a9 00		      LDA	#0
   3945  17f1		       c5 e6		      CMP	_Moving_Shell_X_Coordinate
   3946  17f3		       b0 03		      BCS	.skipL0219
   3947  17f5				   .condpart97
   3948  17f5		       4c fe 17 	      jmp	.condpart98
   3949  17f8				   .skipL0219
   3950  17f8		       a9 00		      LDA	#0
   3951  17fa		       c5 e7		      CMP	_Moving_Shell_Y_Coordinate
   3952  17fc		       b0 03		      BCS	.skip30OR
   3953  17fe				   .condpart98
   3954  17fe		       20 16 18 	      jsr	.__Redraw_Shell
   3955  1801
   3956  1801				   .skip30OR
   3957  1801				   .
   3958  1801							; 
   3959  1801
   3960  1801				   .L0220		;  gosub __Render_Screen
   3961  1801
   3962  1801		       20 ac 1d 	      jsr	.__Render_Screen
   3963  1804
   3964  1804				   .
   3965  1804							; 
   3966  1804
   3967  1804				   .
   3968  1804							; 
   3969  1804
   3970  1804				   .
   3971  1804							; 
   3972  1804
   3973  1804				   .
   3974  1804							; 
   3975  1804
   3976  1804				   .L0221		;  goto __Fireball_Enemy_Routine bank2
   3977  1804
   3978  1804		       85 ee		      sta	temp7
   3979  1806		       a9 2f		      lda	#>(.__Fireball_Enemy_Routine-1)
   3980  1808		       48		      pha
   3981  1809		       a9 ff		      lda	#<(.__Fireball_Enemy_Routine-1)
   3982  180b		       48		      pha
   3983  180c		       a5 ee		      lda	temp7
   3984  180e		       48		      pha
   3985  180f		       8a		      txa
   3986  1810		       48		      pha
   3987  1811		       a2 02		      ldx	#2
   3988  1813		       4c eb ff 	      jmp	BS_jsr
   3989  1816				   .
   3990  1816							; 
   3991  1816
   3992  1816				   .
   3993  1816							; 
   3994  1816
   3995  1816				   .
   3996  1816							; 
   3997  1816
   3998  1816				   .
   3999  1816							; 
   4000  1816
   4001  1816				   .
   4002  1816							; 
   4003  1816
   4004  1816				   .
   4005  1816							; 
   4006  1816
   4007  1816				   .
   4008  1816							; 
   4009  1816
   4010  1816				   .__Redraw_Shell
   4011  1816							; __Redraw_Shell
   4012  1816
   4013  1816				   .
   4014  1816							; 
   4015  1816
   4016  1816				   .
   4017  1816							; 
   4018  1816
   4019  1816				   .
   4020  1816							; 
   4021  1816
   4022  1816				   .
   4023  1816							; 
   4024  1816
   4025  1816				   .
   4026  1816							; 
   4027  1816
   4028  1816				   .
   4029  1816							; 
   4030  1816
   4031  1816				   .
   4032  1816							; 
   4033  1816
   4034  1816				   .L0222		;  gosub __Render_Screen
   4035  1816
   4036  1816		       20 ac 1d 	      jsr	.__Render_Screen
   4037  1819
   4038  1819				   .
   4039  1819							; 
   4040  1819
   4041  1819				   .L0223		;  if _Object_Scroll_In_Data  >  0  &&  _Bit0_Player_Facing_Direction{0} then _Moving_Shell_X_Coordinate  =  _Moving_Shell_X_Coordinate  +  1
   4042  1819
   4043  1819		       a9 00		      LDA	#0
   4044  181b		       c5 db		      CMP	_Object_Scroll_In_Data
   4045  181d		       b0 07		      BCS	.skipL0223
   4046  181f				   .condpart99
   4047  181f		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   4048  1821		       4a		      LSR
   4049  1822		       90 02		      BCC	.skip99then
   4050  1824				   .condpart100
   4051  1824		       e6 e6		      INC	_Moving_Shell_X_Coordinate
   4052  1826				   .skip99then
   4053  1826				   .skipL0223
   4054  1826				   .
   4055  1826							; 
   4056  1826
   4057  1826				   .L0224		;  if _Object_Scroll_In_Data  >  0  &&  !_Bit0_Player_Facing_Direction{0} then _Moving_Shell_X_Coordinate  =  _Moving_Shell_X_Coordinate  -  1
   4058  1826
   4059  1826		       a9 00		      LDA	#0
   4060  1828		       c5 db		      CMP	_Object_Scroll_In_Data
   4061  182a		       b0 07		      BCS	.skipL0224
   4062  182c				   .condpart101
   4063  182c		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   4064  182e		       4a		      LSR
   4065  182f		       b0 02		      BCS	.skip101then
   4066  1831				   .condpart102
   4067  1831		       c6 e6		      DEC	_Moving_Shell_X_Coordinate
   4068  1833				   .skip101then
   4069  1833				   .skipL0224
   4070  1833				   .
   4071  1833							; 
   4072  1833
   4073  1833				   .L0225		;  if _Moving_Shell_X_Coordinate  <  0  ||  _Moving_Shell_X_Coordinate  >  30 then _Moving_Shell_X_Coordinate	=  0  :  _Moving_Shell_Y_Coordinate  =	0  :  return
   4074  1833
   4075  1833		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   4076  1835		       c9 00		      CMP	#0
   4077  1837		       b0 03		      BCS	.skipL0225
   4078  1839				   .condpart103
   4079  1839		       4c 42 18 	      jmp	.condpart104
   4080  183c				   .skipL0225
   4081  183c		       a9 1e		      LDA	#30
   4082  183e		       c5 e6		      CMP	_Moving_Shell_X_Coordinate
   4083  1840		       b0 13		      BCS	.skip33OR
   4084  1842				   .condpart104
   4085  1842		       a9 00		      LDA	#0
   4086  1844		       85 e6		      STA	_Moving_Shell_X_Coordinate
   4087  1846		       85 e7		      STA	_Moving_Shell_Y_Coordinate
   4088  1848		       ba		      tsx
   4089  1849		       b5 02		      lda	2,x	; check return address
   4090  184b		       49 18		      eor	#(>*)	; vs. current PCH
   4091  184d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4092  184f		       f0 03		      beq	*+5	; if equal, do normal return
   4093  1851		       4c dd ff 	      JMP	BS_return
   4094  1854		       60		      RTS
   4095  1855				   .skip33OR
   4096  1855				   .
   4097  1855							; 
   4098  1855
   4099  1855				   .L0226		;  pfpixel _Moving_Shell_X_Coordinate _Moving_Shell_Y_Coordinate on
   4100  1855
   4101  1855		       a2 00		      LDX	#0
   4102  1857		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
   4103  1859		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   4104  185b		       85 ee		      sta	temp7
   4105  185d		       a9 18		      lda	#>(ret_point13-1)
   4106  185f		       48		      pha
   4107  1860		       a9 72		      lda	#<(ret_point13-1)
   4108  1862		       48		      pha
   4109  1863		       a9 f2		      lda	#>(pfpixel-1)
   4110  1865		       48		      pha
   4111  1866		       a9 ba		      lda	#<(pfpixel-1)
   4112  1868		       48		      pha
   4113  1869		       a5 ee		      lda	temp7
   4114  186b		       48		      pha
   4115  186c		       8a		      txa
   4116  186d		       48		      pha
   4117  186e		       a2 08		      ldx	#8
   4118  1870		       4c eb ff 	      jmp	BS_jsr
   4119  1873				   ret_point13
   4120  1873				   .
   4121  1873							; 
   4122  1873
   4123  1873				   .L0227		;  x  =  _Moving_Shell_X_Coordinate  +  1
   4124  1873
   4125  1873		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   4126  1875		       18		      CLC
   4127  1876		       69 01		      ADC	#1
   4128  1878		       85 eb		      STA	x
   4129  187a				   .
   4130  187a							; 
   4131  187a
   4132  187a				   .L0228		;  pfpixel x _Moving_Shell_Y_Coordinate on
   4133  187a
   4134  187a		       a2 00		      LDX	#0
   4135  187c		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
   4136  187e		       a5 eb		      LDA	x
   4137  1880		       85 ee		      sta	temp7
   4138  1882		       a9 18		      lda	#>(ret_point14-1)
   4139  1884		       48		      pha
   4140  1885		       a9 97		      lda	#<(ret_point14-1)
   4141  1887		       48		      pha
   4142  1888		       a9 f2		      lda	#>(pfpixel-1)
   4143  188a		       48		      pha
   4144  188b		       a9 ba		      lda	#<(pfpixel-1)
   4145  188d		       48		      pha
   4146  188e		       a5 ee		      lda	temp7
   4147  1890		       48		      pha
   4148  1891		       8a		      txa
   4149  1892		       48		      pha
   4150  1893		       a2 08		      ldx	#8
   4151  1895		       4c eb ff 	      jmp	BS_jsr
   4152  1898				   ret_point14
   4153  1898				   .
   4154  1898							; 
   4155  1898
   4156  1898				   .L0229		;  return thisbank
   4157  1898
   4158  1898		       60		      RTS
   4159  1899				   .
   4160  1899							; 
   4161  1899
   4162  1899				   .
   4163  1899							; 
   4164  1899
   4165  1899				   .
   4166  1899							; 
   4167  1899
   4168  1899				   .
   4169  1899							; 
   4170  1899
   4171  1899				   .
   4172  1899							; 
   4173  1899
   4174  1899				   .
   4175  1899							; 
   4176  1899
   4177  1899				   .
   4178  1899							; 
   4179  1899
   4180  1899				   .__Set_Up_Mario
   4181  1899							; __Set_Up_Mario
   4182  1899
   4183  1899				   .
   4184  1899							; 
   4185  1899
   4186  1899				   .
   4187  1899							; 
   4188  1899
   4189  1899				   .
   4190  1899							; 
   4191  1899
   4192  1899				   .
   4193  1899							; 
   4194  1899
   4195  1899				   .L0230		;  if _Bit7_Mario_Invincibility{7}  &&  _Bit7_Mario_On_Off{7} then _Bit7_Mario_On_Off{7}  =  0  :  gosub __No_Mario  :  return
   4196  1899
   4197  1899		       24 d7		      BIT	_Bit7_Mario_Invincibility
   4198  189b		       10 1a		      BPL	.skipL0230
   4199  189d				   .condpart105
   4200  189d		       24 da		      BIT	_Bit7_Mario_On_Off
   4201  189f		       10 16		      BPL	.skip105then
   4202  18a1				   .condpart106
   4203  18a1		       a5 da		      LDA	_Bit7_Mario_On_Off
   4204  18a3		       29 7f		      AND	#127
   4205  18a5		       85 da		      STA	_Bit7_Mario_On_Off
   4206  18a7		       20 34 1f 	      jsr	.__No_Mario
   4207  18aa		       ba		      tsx
   4208  18ab		       b5 02		      lda	2,x	; check return address
   4209  18ad		       49 18		      eor	#(>*)	; vs. current PCH
   4210  18af		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4211  18b1		       f0 03		      beq	*+5	; if equal, do normal return
   4212  18b3		       4c dd ff 	      JMP	BS_return
   4213  18b6		       60		      RTS
   4214  18b7				   .skip105then
   4215  18b7				   .skipL0230
   4216  18b7				   .
   4217  18b7							; 
   4218  18b7
   4219  18b7				   .L0231		;  if _Bit7_Mario_Invincibility{7}  &&  !_Bit7_Mario_On_Off{7} then _Bit7_Mario_On_Off{7}  =  1
   4220  18b7
   4221  18b7		       24 d7		      BIT	_Bit7_Mario_Invincibility
   4222  18b9		       10 0a		      BPL	.skipL0231
   4223  18bb				   .condpart107
   4224  18bb		       24 da		      BIT	_Bit7_Mario_On_Off
   4225  18bd		       30 06		      BMI	.skip107then
   4226  18bf				   .condpart108
   4227  18bf		       a5 da		      LDA	_Bit7_Mario_On_Off
   4228  18c1		       09 80		      ORA	#128
   4229  18c3		       85 da		      STA	_Bit7_Mario_On_Off
   4230  18c5				   .skip107then
   4231  18c5				   .skipL0231
   4232  18c5				   .
   4233  18c5							; 
   4234  18c5
   4235  18c5				   .L0232		;  if _Animation_Timer  >  3 then x  =  1 else x  =  0
   4236  18c5
   4237  18c5		       a9 03		      LDA	#3
   4238  18c7		       c5 d4		      CMP	_Animation_Timer
   4239  18c9		       b0 07		      BCS	.skipL0232
   4240  18cb				   .condpart109
   4241  18cb		       a9 01		      LDA	#1
   4242  18cd		       85 eb		      STA	x
   4243  18cf		       4c d6 18 	      jmp	.skipelse12
   4244  18d2				   .skipL0232
   4245  18d2		       a9 00		      LDA	#0
   4246  18d4		       85 eb		      STA	x
   4247  18d6				   .skipelse12
   4248  18d6				   .
   4249  18d6							; 
   4250  18d6
   4251  18d6				   .L0233		;  if _Momentum_Left_Right  =	0 then x  =  0
   4252  18d6
   4253  18d6		       a5 e0		      LDA	_Momentum_Left_Right
   4254  18d8		       c9 00		      CMP	#0
   4255  18da		       d0 04		      BNE	.skipL0233
   4256  18dc				   .condpart110
   4257  18dc		       a9 00		      LDA	#0
   4258  18de		       85 eb		      STA	x
   4259  18e0				   .skipL0233
   4260  18e0				   .
   4261  18e0							; 
   4262  18e0
   4263  18e0				   .L0234		;  if _Bit5_Ducking_Flag{5} then x  =	3
   4264  18e0
   4265  18e0		       a5 d7		      LDA	_Bit5_Ducking_Flag
   4266  18e2		       29 20		      AND	#32
   4267  18e4		       f0 04		      BEQ	.skipL0234
   4268  18e6				   .condpart111
   4269  18e6		       a9 03		      LDA	#3
   4270  18e8		       85 eb		      STA	x
   4271  18ea				   .skipL0234
   4272  18ea				   .
   4273  18ea							; 
   4274  18ea
   4275  18ea				   .L0235		;  if _Bit1_Jumping_Flag{1}  ||  _Momentum_Up_Down  >	0 then x  =  2
   4276  18ea
   4277  18ea		       a5 d7		      LDA	_Bit1_Jumping_Flag
   4278  18ec		       29 02		      AND	#2
   4279  18ee		       f0 03		      BEQ	.skipL0235
   4280  18f0				   .condpart112
   4281  18f0		       4c f9 18 	      jmp	.condpart113
   4282  18f3				   .skipL0235
   4283  18f3		       a9 00		      LDA	#0
   4284  18f5		       c5 e1		      CMP	_Momentum_Up_Down
   4285  18f7		       b0 04		      BCS	.skip36OR
   4286  18f9				   .condpart113
   4287  18f9		       a9 02		      LDA	#2
   4288  18fb		       85 eb		      STA	x
   4289  18fd				   .skip36OR
   4290  18fd				   .
   4291  18fd							; 
   4292  18fd
   4293  18fd				   .L0236		;  if _Bit6_Regular_Mario{6} then goto __Small_Mario
   4294  18fd
   4295  18fd		       24 d7		      BIT	_Bit6_Regular_Mario
   4296  18ff		       50 03		      BVC	.skipL0236
   4297  1901				   .condpart114
   4298  1901		       4c 68 19 	      jmp	.__Small_Mario
   4299  1904
   4300  1904				   .skipL0236
   4301  1904				   .
   4302  1904							; 
   4303  1904
   4304  1904				   .L0237		;  if _Bit3_Super_Mario_Power{3} then goto __Big_Mario_Color
   4305  1904
   4306  1904		       a5 d7		      LDA	_Bit3_Super_Mario_Power
   4307  1906		       29 08		      AND	#8
   4308  1908		       f0 03		      BEQ	.skipL0237
   4309  190a				   .condpart115
   4310  190a		       4c 29 19 	      jmp	.__Big_Mario_Color
   4311  190d
   4312  190d				   .skipL0237
   4313  190d				   .
   4314  190d							; 
   4315  190d
   4316  190d				   .L0238		;  on x gosub __Fire_Mario_Color __Fire_Mario_Color __Fire_Mario_Jump_Color __Fire_Mario_Duck_Color
   4317  190d
   4318  190d		       a9 19		      lda	#>(ongosub0-1)
   4319  190f		       48		      PHA
   4320  1910		       a9 25		      lda	#<(ongosub0-1)
   4321  1912		       48		      PHA
   4322  1913		       a6 eb		      LDX	x
   4323  1915		       bd 1e 19 	      LDA	.L0238jumptablehi,x
   4324  1918		       48		      PHA
   4325  1919		       bd 22 19 	      LDA	.L0238jumptablelo,x
   4326  191c		       48		      PHA
   4327  191d		       60		      RTS
   4328  191e				   .L0238jumptablehi
   4329  191e		       1e		      .byte.b	>(.__Fire_Mario_Color-1)
   4330  191f		       1e		      .byte.b	>(.__Fire_Mario_Color-1)
   4331  1920		       1e		      .byte.b	>(.__Fire_Mario_Jump_Color-1)
   4332  1921		       1f		      .byte.b	>(.__Fire_Mario_Duck_Color-1)
   4333  1922				   .L0238jumptablelo
   4334  1922		       df		      .byte.b	<(.__Fire_Mario_Color-1)
   4335  1923		       df		      .byte.b	<(.__Fire_Mario_Color-1)
   4336  1924		       e8		      .byte.b	<(.__Fire_Mario_Jump_Color-1)
   4337  1925		       1d		      .byte.b	<(.__Fire_Mario_Duck_Color-1)
   4338  1926				   ongosub0
   4339  1926				   .
   4340  1926							; 
   4341  1926
   4342  1926				   .L0239		;  goto __Big_Mario_Sprite
   4343  1926
   4344  1926		       4c 42 19 	      jmp	.__Big_Mario_Sprite
   4345  1929
   4346  1929				   .
   4347  1929							; 
   4348  1929
   4349  1929				   .__Big_Mario_Color
   4350  1929							; __Big_Mario_Color
   4351  1929
   4352  1929				   .L0240		;  on x gosub __Super_Mario_Color __Super_Mario_Color __Super_Mario_Jump_Color __Mario_Duck_Color
   4353  1929
   4354  1929		       a9 19		      lda	#>(ongosub1-1)
   4355  192b		       48		      PHA
   4356  192c		       a9 41		      lda	#<(ongosub1-1)
   4357  192e		       48		      PHA
   4358  192f		       a6 eb		      LDX	x
   4359  1931		       bd 3a 19 	      LDA	.L0240jumptablehi,x
   4360  1934		       48		      PHA
   4361  1935		       bd 3e 19 	      LDA	.L0240jumptablelo,x
   4362  1938		       48		      PHA
   4363  1939		       60		      RTS
   4364  193a				   .L0240jumptablehi
   4365  193a		       1e		      .byte.b	>(.__Super_Mario_Color-1)
   4366  193b		       1e		      .byte.b	>(.__Super_Mario_Color-1)
   4367  193c		       1e		      .byte.b	>(.__Super_Mario_Jump_Color-1)
   4368  193d		       1f		      .byte.b	>(.__Mario_Duck_Color-1)
   4369  193e				   .L0240jumptablelo
   4370  193e		       c9		      .byte.b	<(.__Super_Mario_Color-1)
   4371  193f		       c9		      .byte.b	<(.__Super_Mario_Color-1)
   4372  1940		       fe		      .byte.b	<(.__Super_Mario_Jump_Color-1)
   4373  1941		       14		      .byte.b	<(.__Mario_Duck_Color-1)
   4374  1942				   ongosub1
   4375  1942				   .
   4376  1942							; 
   4377  1942
   4378  1942				   .__Big_Mario_Sprite
   4379  1942							; __Big_Mario_Sprite
   4380  1942
   4381  1942				   .L0241		;  on x gosub __Super_Mario __Super_Mario_02 __Super_Mario_Jump __Mario_Duck
   4382  1942
   4383  1942		       a9 19		      lda	#>(ongosub2-1)
   4384  1944		       48		      PHA
   4385  1945		       a9 5a		      lda	#<(ongosub2-1)
   4386  1947		       48		      PHA
   4387  1948		       a6 eb		      LDX	x
   4388  194a		       bd 53 19 	      LDA	.L0241jumptablehi,x
   4389  194d		       48		      PHA
   4390  194e		       bd 57 19 	      LDA	.L0241jumptablelo,x
   4391  1951		       48		      PHA
   4392  1952		       60		      RTS
   4393  1953				   .L0241jumptablehi
   4394  1953		       1e		      .byte.b	>(.__Super_Mario-1)
   4395  1954		       1e		      .byte.b	>(.__Super_Mario_02-1)
   4396  1955		       1f		      .byte.b	>(.__Super_Mario_Jump-1)
   4397  1956		       1f		      .byte.b	>(.__Mario_Duck-1)
   4398  1957				   .L0241jumptablelo
   4399  1957		       d2		      .byte.b	<(.__Super_Mario-1)
   4400  1958		       f1		      .byte.b	<(.__Super_Mario_02-1)
   4401  1959		       07		      .byte.b	<(.__Super_Mario_Jump-1)
   4402  195a		       26		      .byte.b	<(.__Mario_Duck-1)
   4403  195b				   ongosub2
   4404  195b				   .
   4405  195b							; 
   4406  195b
   4407  195b				   .L0242		;  return
   4408  195b
   4409  195b		       ba		      tsx
   4410  195c		       b5 02		      lda	2,x	; check return address
   4411  195e		       49 19		      eor	#(>*)	; vs. current PCH
   4412  1960		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4413  1962		       f0 03		      beq	*+5	; if equal, do normal return
   4414  1964		       4c dd ff 	      JMP	BS_return
   4415  1967		       60		      RTS
   4416  1968				   .
   4417  1968							; 
   4418  1968
   4419  1968				   .__Small_Mario
   4420  1968							; __Small_Mario
   4421  1968
   4422  1968				   .L0243		;  on x gosub __Mario_Color __Mario_Color __Mario_Jump_Color __Mario_Color
   4423  1968
   4424  1968		       a9 19		      lda	#>(ongosub3-1)
   4425  196a		       48		      PHA
   4426  196b		       a9 80		      lda	#<(ongosub3-1)
   4427  196d		       48		      PHA
   4428  196e		       a6 eb		      LDX	x
   4429  1970		       bd 79 19 	      LDA	.L0243jumptablehi,x
   4430  1973		       48		      PHA
   4431  1974		       bd 7d 19 	      LDA	.L0243jumptablelo,x
   4432  1977		       48		      PHA
   4433  1978		       60		      RTS
   4434  1979				   .L0243jumptablehi
   4435  1979		       1e		      .byte.b	>(.__Mario_Color-1)
   4436  197a		       1e		      .byte.b	>(.__Mario_Color-1)
   4437  197b		       1e		      .byte.b	>(.__Mario_Jump_Color-1)
   4438  197c		       1e		      .byte.b	>(.__Mario_Color-1)
   4439  197d				   .L0243jumptablelo
   4440  197d		       90		      .byte.b	<(.__Mario_Color-1)
   4441  197e		       90		      .byte.b	<(.__Mario_Color-1)
   4442  197f		       99		      .byte.b	<(.__Mario_Jump_Color-1)
   4443  1980		       90		      .byte.b	<(.__Mario_Color-1)
   4444  1981				   ongosub3
   4445  1981				   .
   4446  1981							; 
   4447  1981
   4448  1981				   .L0244		;  on x gosub __Mario __Mario2 __Mario_Jump __Mario
   4449  1981
   4450  1981		       a9 19		      lda	#>(ongosub4-1)
   4451  1983		       48		      PHA
   4452  1984		       a9 99		      lda	#<(ongosub4-1)
   4453  1986		       48		      PHA
   4454  1987		       a6 eb		      LDX	x
   4455  1989		       bd 92 19 	      LDA	.L0244jumptablehi,x
   4456  198c		       48		      PHA
   4457  198d		       bd 96 19 	      LDA	.L0244jumptablelo,x
   4458  1990		       48		      PHA
   4459  1991		       60		      RTS
   4460  1992				   .L0244jumptablehi
   4461  1992		       1e		      .byte.b	>(.__Mario-1)
   4462  1993		       1e		      .byte.b	>(.__Mario2-1)
   4463  1994		       1e		      .byte.b	>(.__Mario_Jump-1)
   4464  1995		       1e		      .byte.b	>(.__Mario-1)
   4465  1996				   .L0244jumptablelo
   4466  1996		       a2		      .byte.b	<(.__Mario-1)
   4467  1997		       af		      .byte.b	<(.__Mario2-1)
   4468  1998		       bc		      .byte.b	<(.__Mario_Jump-1)
   4469  1999		       a2		      .byte.b	<(.__Mario-1)
   4470  199a				   ongosub4
   4471  199a				   .
   4472  199a							; 
   4473  199a
   4474  199a				   .L0245		;  return
   4475  199a
   4476  199a		       ba		      tsx
   4477  199b		       b5 02		      lda	2,x	; check return address
   4478  199d		       49 19		      eor	#(>*)	; vs. current PCH
   4479  199f		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4480  19a1		       f0 03		      beq	*+5	; if equal, do normal return
   4481  19a3		       4c dd ff 	      JMP	BS_return
   4482  19a6		       60		      RTS
   4483  19a7				   .
   4484  19a7							; 
   4485  19a7
   4486  19a7				   .__Power_Up_SFX
   4487  19a7							; __Power_Up_SFX
   4488  19a7
   4489  19a7				   .
   4490  19a7							; 
   4491  19a7
   4492  19a7				   .L0246		;  y  =  y  -	1  :  _Temp_u_Freq  =  _Temp_u_Freq  +	1
   4493  19a7
   4494  19a7		       c6 ec		      DEC	y
   4495  19a9		       e6 e8		      INC	_Temp_u_Freq
   4496  19ab				   .
   4497  19ab							; 
   4498  19ab
   4499  19ab				   .L0247		;  if _Temp_u_Freq  >	21 then y  =  y  +  18	:  _Temp_u_Freq  =  0
   4500  19ab
   4501  19ab		       a9 15		      LDA	#21
   4502  19ad		       c5 e8		      CMP	_Temp_u_Freq
   4503  19af		       b0 0b		      BCS	.skipL0247
   4504  19b1				   .condpart116
   4505  19b1		       a5 ec		      LDA	y
   4506  19b3		       18		      CLC
   4507  19b4		       69 12		      ADC	#18
   4508  19b6		       85 ec		      STA	y
   4509  19b8		       a9 00		      LDA	#0
   4510  19ba		       85 e8		      STA	_Temp_u_Freq
   4511  19bc				   .skipL0247
   4512  19bc				   .
   4513  19bc							; 
   4514  19bc
   4515  19bc				   .L0248		;  AUDV0  =  8  :  AUDC0  =  4  :  AUDF0  =  y  :  AUDV1  =  0
   4516  19bc
   4517  19bc		       a9 08		      LDA	#8
   4518  19be		       85 19		      STA	AUDV0
   4519  19c0		       a9 04		      LDA	#4
   4520  19c2		       85 15		      STA	AUDC0
   4521  19c4		       a5 ec		      LDA	y
   4522  19c6		       85 17		      STA	AUDF0
   4523  19c8		       a9 00		      LDA	#0
   4524  19ca		       85 1a		      STA	AUDV1
   4525  19cc				   .
   4526  19cc							; 
   4527  19cc
   4528  19cc				   .L0249		;  return thisbank
   4529  19cc
   4530  19cc		       60		      RTS
   4531  19cd				   .
   4532  19cd							; 
   4533  19cd
   4534  19cd				   .__Power_Down_SFX
   4535  19cd							; __Power_Down_SFX
   4536  19cd
   4537  19cd				   .
   4538  19cd							; 
   4539  19cd
   4540  19cd				   .L0250		;  y  =  y  +	1
   4541  19cd
   4542  19cd		       e6 ec		      INC	y
   4543  19cf				   .
   4544  19cf							; 
   4545  19cf
   4546  19cf				   .L0251		;  temp4  =  8
   4547  19cf
   4548  19cf		       a9 08		      LDA	#8
   4549  19d1		       85 9f		      STA	temp4
   4550  19d3				   .
   4551  19d3							; 
   4552  19d3
   4553  19d3				   .L0252		;  if _Temp_u_Freq  >	6 then y  =  8	:  _Temp_u_Freq  =  0
   4554  19d3
   4555  19d3		       a9 06		      LDA	#6
   4556  19d5		       c5 e8		      CMP	_Temp_u_Freq
   4557  19d7		       b0 08		      BCS	.skipL0252
   4558  19d9				   .condpart117
   4559  19d9		       a9 08		      LDA	#8
   4560  19db		       85 ec		      STA	y
   4561  19dd		       a9 00		      LDA	#0
   4562  19df		       85 e8		      STA	_Temp_u_Freq
   4563  19e1				   .skipL0252
   4564  19e1				   .
   4565  19e1							; 
   4566  19e1
   4567  19e1				   .L0253		;  if y  >  30 then _Temp_u_Freq  =  _Temp_u_Freq  +  1  :  y	=  9  :  temp4	=  8  -  _Temp_u_Freq
   4568  19e1
   4569  19e1		       a9 1e		      LDA	#30
   4570  19e3		       c5 ec		      CMP	y
   4571  19e5		       b0 0d		      BCS	.skipL0253
   4572  19e7				   .condpart118
   4573  19e7		       e6 e8		      INC	_Temp_u_Freq
   4574  19e9		       a9 09		      LDA	#9
   4575  19eb		       85 ec		      STA	y
   4576  19ed		       a9 08		      LDA	#8
   4577  19ef		       38		      SEC
   4578  19f0		       e5 e8		      SBC	_Temp_u_Freq
   4579  19f2		       85 9f		      STA	temp4
   4580  19f4				   .skipL0253
   4581  19f4				   .
   4582  19f4							; 
   4583  19f4
   4584  19f4				   .L0254		;  AUDV0  =  temp4  :	AUDC0  =  6  :	AUDF0  =  y  :	AUDV1  =  0
   4585  19f4
   4586  19f4		       a5 9f		      LDA	temp4
   4587  19f6		       85 19		      STA	AUDV0
   4588  19f8		       a9 06		      LDA	#6
   4589  19fa		       85 15		      STA	AUDC0
   4590  19fc		       a5 ec		      LDA	y
   4591  19fe		       85 17		      STA	AUDF0
   4592  1a00		       a9 00		      LDA	#0
   4593  1a02		       85 1a		      STA	AUDV1
   4594  1a04				   .
   4595  1a04							; 
   4596  1a04
   4597  1a04				   .L0255		;  return
   4598  1a04
   4599  1a04		       ba		      tsx
   4600  1a05		       b5 02		      lda	2,x	; check return address
   4601  1a07		       49 1a		      eor	#(>*)	; vs. current PCH
   4602  1a09		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4603  1a0b		       f0 03		      beq	*+5	; if equal, do normal return
   4604  1a0d		       4c dd ff 	      JMP	BS_return
   4605  1a10		       60		      RTS
   4606  1a11				   .
   4607  1a11							; 
   4608  1a11
   4609  1a11				   .__1Up_SFX
   4610  1a11							; __1Up_SFX
   4611  1a11
   4612  1a11				   .
   4613  1a11							; 
   4614  1a11
   4615  1a11				   .L0256		;  y  =  y  -	2  :  _Temp_u_Freq  =  _Temp_u_Freq  +	1
   4616  1a11
   4617  1a11		       a5 ec		      LDA	y
   4618  1a13		       38		      SEC
   4619  1a14		       e9 02		      SBC	#2
   4620  1a16		       85 ec		      STA	y
   4621  1a18		       e6 e8		      INC	_Temp_u_Freq
   4622  1a1a				   .
   4623  1a1a							; 
   4624  1a1a
   4625  1a1a				   .L0257		;  if _Temp_u_Freq  =	4 then _Temp_u_Freq  =	0  :  y  =  7
   4626  1a1a
   4627  1a1a		       a5 e8		      LDA	_Temp_u_Freq
   4628  1a1c		       c9 04		      CMP	#4
   4629  1a1e		       d0 08		      BNE	.skipL0257
   4630  1a20				   .condpart119
   4631  1a20		       a9 00		      LDA	#0
   4632  1a22		       85 e8		      STA	_Temp_u_Freq
   4633  1a24		       a9 07		      LDA	#7
   4634  1a26		       85 ec		      STA	y
   4635  1a28				   .skipL0257
   4636  1a28				   .
   4637  1a28							; 
   4638  1a28
   4639  1a28				   .L0258		;  AUDV0  =  8  :  AUDC0  =  4  :  AUDF0  =  y  :  AUDV1  =  0
   4640  1a28
   4641  1a28		       a9 08		      LDA	#8
   4642  1a2a		       85 19		      STA	AUDV0
   4643  1a2c		       a9 04		      LDA	#4
   4644  1a2e		       85 15		      STA	AUDC0
   4645  1a30		       a5 ec		      LDA	y
   4646  1a32		       85 17		      STA	AUDF0
   4647  1a34		       a9 00		      LDA	#0
   4648  1a36		       85 1a		      STA	AUDV1
   4649  1a38				   .
   4650  1a38							; 
   4651  1a38
   4652  1a38				   .L0259		;  return
   4653  1a38
   4654  1a38		       ba		      tsx
   4655  1a39		       b5 02		      lda	2,x	; check return address
   4656  1a3b		       49 1a		      eor	#(>*)	; vs. current PCH
   4657  1a3d		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4658  1a3f		       f0 03		      beq	*+5	; if equal, do normal return
   4659  1a41		       4c dd ff 	      JMP	BS_return
   4660  1a44		       60		      RTS
   4661  1a45				   .
   4662  1a45							; 
   4663  1a45
   4664  1a45				   .
   4665  1a45							; 
   4666  1a45
   4667  1a45				   .
   4668  1a45							; 
   4669  1a45
   4670  1a45				   .
   4671  1a45							; 
   4672  1a45
   4673  1a45				   .
   4674  1a45							; 
   4675  1a45
   4676  1a45				   .
   4677  1a45							; 
   4678  1a45
   4679  1a45				   .
   4680  1a45							; 
   4681  1a45
   4682  1a45				   .
   4683  1a45							; 
   4684  1a45
   4685  1a45				   .
   4686  1a45							; 
   4687  1a45
   4688  1a45				   .
   4689  1a45							; 
   4690  1a45
   4691  1a45				   .
   4692  1a45							; 
   4693  1a45
   4694  1a45				   .
   4695  1a45							; 
   4696  1a45
   4697  1a45				   .
   4698  1a45							; 
   4699  1a45
   4700  1a45				   .
   4701  1a45							; 
   4702  1a45
   4703  1a45				   .
   4704  1a45							; 
   4705  1a45
   4706  1a45				   .
   4707  1a45							; 
   4708  1a45
   4709  1a45				   .
   4710  1a45							; 
   4711  1a45
   4712  1a45				   .
   4713  1a45							; 
   4714  1a45
   4715  1a45				   .
   4716  1a45							; 
   4717  1a45
   4718  1a45				   .
   4719  1a45							; 
   4720  1a45
   4721  1a45				   .
   4722  1a45							; 
   4723  1a45
   4724  1a45				   .
   4725  1a45							; 
   4726  1a45
   4727  1a45				   .
   4728  1a45							; 
   4729  1a45
   4730  1a45				   .
   4731  1a45							; 
   4732  1a45
   4733  1a45				   .
   4734  1a45							; 
   4735  1a45
   4736  1a45				   .__Scroll_Left
   4737  1a45							; __Scroll_Left
   4738  1a45
   4739  1a45				   .
   4740  1a45							; 
   4741  1a45
   4742  1a45				   .
   4743  1a45							; 
   4744  1a45
   4745  1a45				   .
   4746  1a45							; 
   4747  1a45
   4748  1a45				   .
   4749  1a45							; 
   4750  1a45
   4751  1a45				   .L0260		;  pfscroll left
   4752  1a45
   4753  1a45		       a9 00		      LDA	#0
   4754  1a47		       85 ee		      sta	temp7
   4755  1a49		       a9 1a		      lda	#>(ret_point15-1)
   4756  1a4b		       48		      pha
   4757  1a4c		       a9 5e		      lda	#<(ret_point15-1)
   4758  1a4e		       48		      pha
   4759  1a4f		       a9 f3		      lda	#>(pfscroll-1)
   4760  1a51		       48		      pha
   4761  1a52		       a9 63		      lda	#<(pfscroll-1)
   4762  1a54		       48		      pha
   4763  1a55		       a5 ee		      lda	temp7
   4764  1a57		       48		      pha
   4765  1a58		       8a		      txa
   4766  1a59		       48		      pha
   4767  1a5a		       a2 08		      ldx	#8
   4768  1a5c		       4c eb ff 	      jmp	BS_jsr
   4769  1a5f				   ret_point15
   4770  1a5f				   .
   4771  1a5f							; 
   4772  1a5f
   4773  1a5f				   .
   4774  1a5f							; 
   4775  1a5f
   4776  1a5f				   .
   4777  1a5f							; 
   4778  1a5f
   4779  1a5f				   .
   4780  1a5f							; 
   4781  1a5f
   4782  1a5f				   .
   4783  1a5f							; 
   4784  1a5f
   4785  1a5f				   .L0261		;  if ballx  >  0 then ballx  =  ballx  -  4
   4786  1a5f
   4787  1a5f		       a9 00		      LDA	#0
   4788  1a61		       c5 84		      CMP	ballx
   4789  1a63		       b0 07		      BCS	.skipL0261
   4790  1a65				   .condpart120
   4791  1a65		       a5 84		      LDA	ballx
   4792  1a67		       38		      SEC
   4793  1a68		       e9 04		      SBC	#4
   4794  1a6a		       85 84		      STA	ballx
   4795  1a6c				   .skipL0261
   4796  1a6c				   .
   4797  1a6c							; 
   4798  1a6c
   4799  1a6c				   .
   4800  1a6c							; 
   4801  1a6c
   4802  1a6c				   .
   4803  1a6c							; 
   4804  1a6c
   4805  1a6c				   .
   4806  1a6c							; 
   4807  1a6c
   4808  1a6c				   .
   4809  1a6c							; 
   4810  1a6c
   4811  1a6c				   .
   4812  1a6c							; 
   4813  1a6c
   4814  1a6c				   .
   4815  1a6c							; 
   4816  1a6c
   4817  1a6c				   .L0262		;  x  =  _Level_Data_Pointer  *  2
   4818  1a6c
   4819  1a6c		       a5 d5		      LDA	_Level_Data_Pointer
   4820  1a6e		       0a		      asl
   4821  1a6f		       85 eb		      STA	x
   4822  1a71				   .
   4823  1a71							; 
   4824  1a71
   4825  1a71				   .L0263		;  if x  >  _Farthest_Traveled_On_Level then _Farthest_Traveled_On_Level  =  x
   4826  1a71
   4827  1a71		       a5 e2		      LDA	_Farthest_Traveled_On_Level
   4828  1a73		       c5 eb		      CMP	x
   4829  1a75		       b0 04		      BCS	.skipL0263
   4830  1a77				   .condpart121
   4831  1a77		       a5 eb		      LDA	x
   4832  1a79		       85 e2		      STA	_Farthest_Traveled_On_Level
   4833  1a7b				   .skipL0263
   4834  1a7b				   .
   4835  1a7b							; 
   4836  1a7b
   4837  1a7b				   .
   4838  1a7b							; 
   4839  1a7b
   4840  1a7b				   .
   4841  1a7b							; 
   4842  1a7b
   4843  1a7b				   .
   4844  1a7b							; 
   4845  1a7b
   4846  1a7b				   .
   4847  1a7b							; 
   4848  1a7b
   4849  1a7b				   .L0264		;  z  =   (  ( _World	-  1 )	 *  8 )   +   (  ( _Level  -  1 )   *  2 ) 
   4850  1a7b
   4851  1a7b							; complex statement detected
   4852  1a7b		       a5 e9		      LDA	_World
   4853  1a7d		       38		      SEC
   4854  1a7e		       e9 01		      SBC	#1
   4855  1a80		       0a		      asl
   4856  1a81		       0a		      asl
   4857  1a82		       0a		      asl
   4858  1a83		       48		      PHA
   4859  1a84		       a5 ea		      LDA	_Level
   4860  1a86		       38		      SEC
   4861  1a87		       e9 01		      SBC	#1
   4862  1a89		       0a		      asl
   4863  1a8a		       ba		      TSX
   4864  1a8b		       e8		      INX
   4865  1a8c		       9a		      TXS
   4866  1a8d		       18		      CLC
   4867  1a8e		       75 00		      ADC	$00,x
   4868  1a90		       85 ed		      STA	z
   4869  1a92				   .
   4870  1a92							; 
   4871  1a92
   4872  1a92				   .
   4873  1a92							; 
   4874  1a92
   4875  1a92				   .
   4876  1a92							; 
   4877  1a92
   4878  1a92				   .
   4879  1a92							; 
   4880  1a92
   4881  1a92				   .
   4882  1a92							; 
   4883  1a92
   4884  1a92				   .L0265		;  if _Bit6_Checkpoint_Flag{6} then z	=  z  +  1
   4885  1a92
   4886  1a92		       24 da		      BIT	_Bit6_Checkpoint_Flag
   4887  1a94		       50 02		      BVC	.skipL0265
   4888  1a96				   .condpart122
   4889  1a96		       e6 ed		      INC	z
   4890  1a98				   .skipL0265
   4891  1a98				   .
   4892  1a98							; 
   4893  1a98
   4894  1a98				   .
   4895  1a98							; 
   4896  1a98
   4897  1a98				   .
   4898  1a98							; 
   4899  1a98
   4900  1a98				   .
   4901  1a98							; 
   4902  1a98
   4903  1a98				   .L0266		;  if z  <  16 then gosub __Level_Data_Bank1 bank5 else gosub __Level_Data_Bank2 bank6
   4904  1a98
   4905  1a98		       a5 ed		      LDA	z
   4906  1a9a		       c9 10		      CMP	#16
   4907  1a9c		       b0 1b		      BCS	.skipL0266
   4908  1a9e				   .condpart123
   4909  1a9e		       85 ee		      sta	temp7
   4910  1aa0		       a9 1a		      lda	#>(ret_point16-1)
   4911  1aa2		       48		      pha
   4912  1aa3		       a9 b5		      lda	#<(ret_point16-1)
   4913  1aa5		       48		      pha
   4914  1aa6		       a9 8f		      lda	#>(.__Level_Data_Bank1-1)
   4915  1aa8		       48		      pha
   4916  1aa9		       a9 ff		      lda	#<(.__Level_Data_Bank1-1)
   4917  1aab		       48		      pha
   4918  1aac		       a5 ee		      lda	temp7
   4919  1aae		       48		      pha
   4920  1aaf		       8a		      txa
   4921  1ab0		       48		      pha
   4922  1ab1		       a2 05		      ldx	#5
   4923  1ab3		       4c eb ff 	      jmp	BS_jsr
   4924  1ab6				   ret_point16
   4925  1ab6		       4c d1 1a 	      jmp	.skipelse13
   4926  1ab9				   .skipL0266
   4927  1ab9		       85 ee		      sta	temp7
   4928  1abb		       a9 1a		      lda	#>(ret_point17-1)
   4929  1abd		       48		      pha
   4930  1abe		       a9 d0		      lda	#<(ret_point17-1)
   4931  1ac0		       48		      pha
   4932  1ac1		       a9 af		      lda	#>(.__Level_Data_Bank2-1)
   4933  1ac3		       48		      pha
   4934  1ac4		       a9 ff		      lda	#<(.__Level_Data_Bank2-1)
   4935  1ac6		       48		      pha
   4936  1ac7		       a5 ee		      lda	temp7
   4937  1ac9		       48		      pha
   4938  1aca		       8a		      txa
   4939  1acb		       48		      pha
   4940  1acc		       a2 06		      ldx	#6
   4941  1ace		       4c eb ff 	      jmp	BS_jsr
   4942  1ad1				   ret_point17
   4943  1ad1				   .skipelse13
   4944  1ad1				   .
   4945  1ad1							; 
   4946  1ad1
   4947  1ad1				   .
   4948  1ad1							; 
   4949  1ad1
   4950  1ad1				   .
   4951  1ad1							; 
   4952  1ad1
   4953  1ad1				   .
   4954  1ad1							; 
   4955  1ad1
   4956  1ad1				   .
   4957  1ad1							; 
   4958  1ad1
   4959  1ad1				   .
   4960  1ad1							; 
   4961  1ad1
   4962  1ad1				   .L0267		;  if y{0} then var3  =  var3	|  128 else var3  =  var3  &  127
   4963  1ad1
   4964  1ad1		       a5 ec		      LDA	y
   4965  1ad3		       4a		      LSR
   4966  1ad4		       90 09		      BCC	.skipL0267
   4967  1ad6				   .condpart124
   4968  1ad6		       a5 a7		      LDA	var3
   4969  1ad8		       09 80		      ORA	#128
   4970  1ada		       85 a7		      STA	var3
   4971  1adc		       4c e5 1a 	      jmp	.skipelse14
   4972  1adf				   .skipL0267
   4973  1adf		       a5 a7		      LDA	var3
   4974  1ae1		       29 7f		      AND	#127
   4975  1ae3		       85 a7		      STA	var3
   4976  1ae5				   .skipelse14
   4977  1ae5				   .
   4978  1ae5							; 
   4979  1ae5
   4980  1ae5				   .
   4981  1ae5							; 
   4982  1ae5
   4983  1ae5				   .
   4984  1ae5							; 
   4985  1ae5
   4986  1ae5				   .
   4987  1ae5							; 
   4988  1ae5
   4989  1ae5				   .
   4990  1ae5							; 
   4991  1ae5
   4992  1ae5				   .L0268		;  if _Farthest_Traveled_On_Level  >  x  &&  _Level  =  1 then var7  =  var7  &  127  :  goto __Render_1
   4993  1ae5
   4994  1ae5		       a5 eb		      LDA	x
   4995  1ae7		       c5 e2		      CMP	_Farthest_Traveled_On_Level
   4996  1ae9		       b0 0f		      BCS	.skipL0268
   4997  1aeb				   .condpart125
   4998  1aeb		       a5 ea		      LDA	_Level
   4999  1aed		       c9 01		      CMP	#1
   5000  1aef		       d0 09		      BNE	.skip125then
   5001  1af1				   .condpart126
   5002  1af1		       a5 ab		      LDA	var7
   5003  1af3		       29 7f		      AND	#127
   5004  1af5		       85 ab		      STA	var7
   5005  1af7		       4c 0f 1b 	      jmp	.__Render_1
   5006  1afa
   5007  1afa				   .skip125then
   5008  1afa				   .skipL0268
   5009  1afa				   .
   5010  1afa							; 
   5011  1afa
   5012  1afa				   .L0269		;  if y{1} then var7  =  var7	|  128 else var7  =  var7  &  127
   5013  1afa
   5014  1afa		       a5 ec		      LDA	y
   5015  1afc		       29 02		      AND	#2
   5016  1afe		       f0 09		      BEQ	.skipL0269
   5017  1b00				   .condpart127
   5018  1b00		       a5 ab		      LDA	var7
   5019  1b02		       09 80		      ORA	#128
   5020  1b04		       85 ab		      STA	var7
   5021  1b06		       4c 0f 1b 	      jmp	.skipelse15
   5022  1b09				   .skipL0269
   5023  1b09		       a5 ab		      LDA	var7
   5024  1b0b		       29 7f		      AND	#127
   5025  1b0d		       85 ab		      STA	var7
   5026  1b0f				   .skipelse15
   5027  1b0f				   .
   5028  1b0f							; 
   5029  1b0f
   5030  1b0f				   .__Render_1
   5031  1b0f							; __Render_1
   5032  1b0f
   5033  1b0f				   .
   5034  1b0f							; 
   5035  1b0f
   5036  1b0f				   .L0270		;  if y{2} then var11	=  var11  |  128 else var11  =	var11  &  127
   5037  1b0f
   5038  1b0f		       a5 ec		      LDA	y
   5039  1b11		       29 04		      AND	#4
   5040  1b13		       f0 09		      BEQ	.skipL0270
   5041  1b15				   .condpart128
   5042  1b15		       a5 af		      LDA	var11
   5043  1b17		       09 80		      ORA	#128
   5044  1b19		       85 af		      STA	var11
   5045  1b1b		       4c 24 1b 	      jmp	.skipelse16
   5046  1b1e				   .skipL0270
   5047  1b1e		       a5 af		      LDA	var11
   5048  1b20		       29 7f		      AND	#127
   5049  1b22		       85 af		      STA	var11
   5050  1b24				   .skipelse16
   5051  1b24				   .
   5052  1b24							; 
   5053  1b24
   5054  1b24				   .L0271		;  if y{3} then var15	=  var15  |  128 else var15  =	var15  &  127
   5055  1b24
   5056  1b24		       a5 ec		      LDA	y
   5057  1b26		       29 08		      AND	#8
   5058  1b28		       f0 09		      BEQ	.skipL0271
   5059  1b2a				   .condpart129
   5060  1b2a		       a5 b3		      LDA	var15
   5061  1b2c		       09 80		      ORA	#128
   5062  1b2e		       85 b3		      STA	var15
   5063  1b30		       4c 39 1b 	      jmp	.skipelse17
   5064  1b33				   .skipL0271
   5065  1b33		       a5 b3		      LDA	var15
   5066  1b35		       29 7f		      AND	#127
   5067  1b37		       85 b3		      STA	var15
   5068  1b39				   .skipelse17
   5069  1b39				   .
   5070  1b39							; 
   5071  1b39
   5072  1b39				   .L0272		;  if y{4} then var19	=  var19  |  128 else var19  =	var19  &  127
   5073  1b39
   5074  1b39		       a5 ec		      LDA	y
   5075  1b3b		       29 10		      AND	#16
   5076  1b3d		       f0 09		      BEQ	.skipL0272
   5077  1b3f				   .condpart130
   5078  1b3f		       a5 b7		      LDA	var19
   5079  1b41		       09 80		      ORA	#128
   5080  1b43		       85 b7		      STA	var19
   5081  1b45		       4c 4e 1b 	      jmp	.skipelse18
   5082  1b48				   .skipL0272
   5083  1b48		       a5 b7		      LDA	var19
   5084  1b4a		       29 7f		      AND	#127
   5085  1b4c		       85 b7		      STA	var19
   5086  1b4e				   .skipelse18
   5087  1b4e				   .
   5088  1b4e							; 
   5089  1b4e
   5090  1b4e				   .L0273		;  if y{5} then var23	=  var23  |  128 else var23  =	var23  &  127
   5091  1b4e
   5092  1b4e		       a5 ec		      LDA	y
   5093  1b50		       29 20		      AND	#32
   5094  1b52		       f0 09		      BEQ	.skipL0273
   5095  1b54				   .condpart131
   5096  1b54		       a5 bb		      LDA	var23
   5097  1b56		       09 80		      ORA	#128
   5098  1b58		       85 bb		      STA	var23
   5099  1b5a		       4c 63 1b 	      jmp	.skipelse19
   5100  1b5d				   .skipL0273
   5101  1b5d		       a5 bb		      LDA	var23
   5102  1b5f		       29 7f		      AND	#127
   5103  1b61		       85 bb		      STA	var23
   5104  1b63				   .skipelse19
   5105  1b63				   .
   5106  1b63							; 
   5107  1b63
   5108  1b63				   .L0274		;  if _Farthest_Traveled_On_Level  >  x  &&  _Level  <  3 then var27  =  var27  &  127  :  goto __Render_2
   5109  1b63
   5110  1b63		       a5 eb		      LDA	x
   5111  1b65		       c5 e2		      CMP	_Farthest_Traveled_On_Level
   5112  1b67		       b0 0f		      BCS	.skipL0274
   5113  1b69				   .condpart132
   5114  1b69		       a5 ea		      LDA	_Level
   5115  1b6b		       c9 03		      CMP	#3
   5116  1b6d		       b0 09		      BCS	.skip132then
   5117  1b6f				   .condpart133
   5118  1b6f		       a5 bf		      LDA	var27
   5119  1b71		       29 7f		      AND	#127
   5120  1b73		       85 bf		      STA	var27
   5121  1b75		       4c 8b 1b 	      jmp	.__Render_2
   5122  1b78
   5123  1b78				   .skip132then
   5124  1b78				   .skipL0274
   5125  1b78				   .
   5126  1b78							; 
   5127  1b78
   5128  1b78				   .L0275		;  if y{6} then var27	=  var27  |  128 else var27  =	var27  &  127
   5129  1b78
   5130  1b78		       24 ec		      BIT	y
   5131  1b7a		       50 09		      BVC	.skipL0275
   5132  1b7c				   .condpart134
   5133  1b7c		       a5 bf		      LDA	var27
   5134  1b7e		       09 80		      ORA	#128
   5135  1b80		       85 bf		      STA	var27
   5136  1b82		       4c 8b 1b 	      jmp	.skipelse20
   5137  1b85				   .skipL0275
   5138  1b85		       a5 bf		      LDA	var27
   5139  1b87		       29 7f		      AND	#127
   5140  1b89		       85 bf		      STA	var27
   5141  1b8b				   .skipelse20
   5142  1b8b				   .
   5143  1b8b							; 
   5144  1b8b
   5145  1b8b				   .__Render_2
   5146  1b8b							; __Render_2
   5147  1b8b
   5148  1b8b				   .
   5149  1b8b							; 
   5150  1b8b
   5151  1b8b				   .L0276		;  if y{7} then var31	=  var31  |  128 else var31  =	var31  &  127
   5152  1b8b
   5153  1b8b		       24 ec		      BIT	y
   5154  1b8d		       10 09		      BPL	.skipL0276
   5155  1b8f				   .condpart135
   5156  1b8f		       a5 c3		      LDA	var31
   5157  1b91		       09 80		      ORA	#128
   5158  1b93		       85 c3		      STA	var31
   5159  1b95		       4c 9e 1b 	      jmp	.skipelse21
   5160  1b98				   .skipL0276
   5161  1b98		       a5 c3		      LDA	var31
   5162  1b9a		       29 7f		      AND	#127
   5163  1b9c		       85 c3		      STA	var31
   5164  1b9e				   .skipelse21
   5165  1b9e				   .
   5166  1b9e							; 
   5167  1b9e
   5168  1b9e				   .L0277		;  if u{0} then var35	=  var35  |  128 else var35  =	var35  &  127
   5169  1b9e
   5170  1b9e		       a5 e8		      LDA	u
   5171  1ba0		       4a		      LSR
   5172  1ba1		       90 09		      BCC	.skipL0277
   5173  1ba3				   .condpart136
   5174  1ba3		       a5 c7		      LDA	var35
   5175  1ba5		       09 80		      ORA	#128
   5176  1ba7		       85 c7		      STA	var35
   5177  1ba9		       4c b2 1b 	      jmp	.skipelse22
   5178  1bac				   .skipL0277
   5179  1bac		       a5 c7		      LDA	var35
   5180  1bae		       29 7f		      AND	#127
   5181  1bb0		       85 c7		      STA	var35
   5182  1bb2				   .skipelse22
   5183  1bb2				   .
   5184  1bb2							; 
   5185  1bb2
   5186  1bb2				   .L0278		;  if u{1} then var39	=  var39  |  128 else var39  =	var39  &  127
   5187  1bb2
   5188  1bb2		       a5 e8		      LDA	u
   5189  1bb4		       29 02		      AND	#2
   5190  1bb6		       f0 09		      BEQ	.skipL0278
   5191  1bb8				   .condpart137
   5192  1bb8		       a5 cb		      LDA	var39
   5193  1bba		       09 80		      ORA	#128
   5194  1bbc		       85 cb		      STA	var39
   5195  1bbe		       4c c7 1b 	      jmp	.skipelse23
   5196  1bc1				   .skipL0278
   5197  1bc1		       a5 cb		      LDA	var39
   5198  1bc3		       29 7f		      AND	#127
   5199  1bc5		       85 cb		      STA	var39
   5200  1bc7				   .skipelse23
   5201  1bc7				   .
   5202  1bc7							; 
   5203  1bc7
   5204  1bc7				   .L0279		;  if u{2} then var43	=  var43  |  128 else var43  =	var43  &  127
   5205  1bc7
   5206  1bc7		       a5 e8		      LDA	u
   5207  1bc9		       29 04		      AND	#4
   5208  1bcb		       f0 09		      BEQ	.skipL0279
   5209  1bcd				   .condpart138
   5210  1bcd		       a5 cf		      LDA	var43
   5211  1bcf		       09 80		      ORA	#128
   5212  1bd1		       85 cf		      STA	var43
   5213  1bd3		       4c dc 1b 	      jmp	.skipelse24
   5214  1bd6				   .skipL0279
   5215  1bd6		       a5 cf		      LDA	var43
   5216  1bd8		       29 7f		      AND	#127
   5217  1bda		       85 cf		      STA	var43
   5218  1bdc				   .skipelse24
   5219  1bdc				   .
   5220  1bdc							; 
   5221  1bdc
   5222  1bdc				   .
   5223  1bdc							; 
   5224  1bdc
   5225  1bdc				   .
   5226  1bdc							; 
   5227  1bdc
   5228  1bdc				   .
   5229  1bdc							; 
   5230  1bdc
   5231  1bdc				   .
   5232  1bdc							; 
   5233  1bdc
   5234  1bdc				   .
   5235  1bdc							; 
   5236  1bdc
   5237  1bdc				   .L0280		;  if u{3} then _Object_Scroll_In_Data  =  u else _Object_Scroll_In_Data  =  1
   5238  1bdc
   5239  1bdc		       a5 e8		      LDA	u
   5240  1bde		       29 08		      AND	#8
   5241  1be0		       f0 07		      BEQ	.skipL0280
   5242  1be2				   .condpart139
   5243  1be2		       a5 e8		      LDA	u
   5244  1be4		       85 db		      STA	_Object_Scroll_In_Data
   5245  1be6		       4c ed 1b 	      jmp	.skipelse25
   5246  1be9				   .skipL0280
   5247  1be9		       a9 01		      LDA	#1
   5248  1beb		       85 db		      STA	_Object_Scroll_In_Data
   5249  1bed				   .skipelse25
   5250  1bed				   .
   5251  1bed							; 
   5252  1bed
   5253  1bed				   .
   5254  1bed							; 
   5255  1bed
   5256  1bed				   .
   5257  1bed							; 
   5258  1bed
   5259  1bed				   .
   5260  1bed							; 
   5261  1bed
   5262  1bed				   .L0281		;  _Level_Data_Pointer  =  _Level_Data_Pointer  +  1
   5263  1bed
   5264  1bed		       e6 d5		      INC	_Level_Data_Pointer
   5265  1bef				   .
   5266  1bef							; 
   5267  1bef
   5268  1bef				   .L0282		;  return
   5269  1bef
   5270  1bef		       ba		      tsx
   5271  1bf0		       b5 02		      lda	2,x	; check return address
   5272  1bf2		       49 1b		      eor	#(>*)	; vs. current PCH
   5273  1bf4		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5274  1bf6		       f0 03		      beq	*+5	; if equal, do normal return
   5275  1bf8		       4c dd ff 	      JMP	BS_return
   5276  1bfb		       60		      RTS
   5277  1bfc				   .
   5278  1bfc							; 
   5279  1bfc
   5280  1bfc				   .
   5281  1bfc							; 
   5282  1bfc
   5283  1bfc				   .
   5284  1bfc							; 
   5285  1bfc
   5286  1bfc				   .
   5287  1bfc							; 
   5288  1bfc
   5289  1bfc				   .
   5290  1bfc							; 
   5291  1bfc
   5292  1bfc				   .
   5293  1bfc							; 
   5294  1bfc
   5295  1bfc				   .__Scroll_Right
   5296  1bfc							; __Scroll_Right
   5297  1bfc
   5298  1bfc				   .
   5299  1bfc							; 
   5300  1bfc
   5301  1bfc				   .
   5302  1bfc							; 
   5303  1bfc
   5304  1bfc				   .
   5305  1bfc							; 
   5306  1bfc
   5307  1bfc				   .
   5308  1bfc							; 
   5309  1bfc
   5310  1bfc				   .
   5311  1bfc							; 
   5312  1bfc
   5313  1bfc				   .
   5314  1bfc							; 
   5315  1bfc
   5316  1bfc				   .L0283		;  pfscroll right
   5317  1bfc
   5318  1bfc		       a9 01		      LDA	#1
   5319  1bfe		       85 ee		      sta	temp7
   5320  1c00		       a9 1c		      lda	#>(ret_point18-1)
   5321  1c02		       48		      pha
   5322  1c03		       a9 15		      lda	#<(ret_point18-1)
   5323  1c05		       48		      pha
   5324  1c06		       a9 f3		      lda	#>(pfscroll-1)
   5325  1c08		       48		      pha
   5326  1c09		       a9 63		      lda	#<(pfscroll-1)
   5327  1c0b		       48		      pha
   5328  1c0c		       a5 ee		      lda	temp7
   5329  1c0e		       48		      pha
   5330  1c0f		       8a		      txa
   5331  1c10		       48		      pha
   5332  1c11		       a2 08		      ldx	#8
   5333  1c13		       4c eb ff 	      jmp	BS_jsr
   5334  1c16				   ret_point18
   5335  1c16				   .
   5336  1c16							; 
   5337  1c16
   5338  1c16				   .L0284		;  if ballx  >  0 then ballx  =  ballx  +  4
   5339  1c16
   5340  1c16		       a9 00		      LDA	#0
   5341  1c18		       c5 84		      CMP	ballx
   5342  1c1a		       b0 07		      BCS	.skipL0284
   5343  1c1c				   .condpart140
   5344  1c1c		       a5 84		      LDA	ballx
   5345  1c1e		       18		      CLC
   5346  1c1f		       69 04		      ADC	#4
   5347  1c21		       85 84		      STA	ballx
   5348  1c23				   .skipL0284
   5349  1c23				   .
   5350  1c23							; 
   5351  1c23
   5352  1c23				   .L0285		;  x  =   ( _Level_Data_Pointer  -  32 )   *  2
   5353  1c23
   5354  1c23							; complex statement detected
   5355  1c23		       a5 d5		      LDA	_Level_Data_Pointer
   5356  1c25		       38		      SEC
   5357  1c26		       e9 20		      SBC	#32
   5358  1c28		       0a		      asl
   5359  1c29		       85 eb		      STA	x
   5360  1c2b				   .
   5361  1c2b							; 
   5362  1c2b
   5363  1c2b				   .L0286		;  z  =   (  ( _World	-  1 )	 *  8 )   +   (  ( _Level  -  1 )   *  2 ) 
   5364  1c2b
   5365  1c2b							; complex statement detected
   5366  1c2b		       a5 e9		      LDA	_World
   5367  1c2d		       38		      SEC
   5368  1c2e		       e9 01		      SBC	#1
   5369  1c30		       0a		      asl
   5370  1c31		       0a		      asl
   5371  1c32		       0a		      asl
   5372  1c33		       48		      PHA
   5373  1c34		       a5 ea		      LDA	_Level
   5374  1c36		       38		      SEC
   5375  1c37		       e9 01		      SBC	#1
   5376  1c39		       0a		      asl
   5377  1c3a		       ba		      TSX
   5378  1c3b		       e8		      INX
   5379  1c3c		       9a		      TXS
   5380  1c3d		       18		      CLC
   5381  1c3e		       75 00		      ADC	$00,x
   5382  1c40		       85 ed		      STA	z
   5383  1c42				   .
   5384  1c42							; 
   5385  1c42
   5386  1c42				   .L0287		;  if _Bit6_Checkpoint_Flag{6} then z	=  z  +  1
   5387  1c42
   5388  1c42		       24 da		      BIT	_Bit6_Checkpoint_Flag
   5389  1c44		       50 02		      BVC	.skipL0287
   5390  1c46				   .condpart141
   5391  1c46		       e6 ed		      INC	z
   5392  1c48				   .skipL0287
   5393  1c48				   .
   5394  1c48							; 
   5395  1c48
   5396  1c48				   .L0288		;  if z  <  16 then gosub __Level_Data_Bank1 bank5 else gosub __Level_Data_Bank2 bank6
   5397  1c48
   5398  1c48		       a5 ed		      LDA	z
   5399  1c4a		       c9 10		      CMP	#16
   5400  1c4c		       b0 1b		      BCS	.skipL0288
   5401  1c4e				   .condpart142
   5402  1c4e		       85 ee		      sta	temp7
   5403  1c50		       a9 1c		      lda	#>(ret_point19-1)
   5404  1c52		       48		      pha
   5405  1c53		       a9 65		      lda	#<(ret_point19-1)
   5406  1c55		       48		      pha
   5407  1c56		       a9 8f		      lda	#>(.__Level_Data_Bank1-1)
   5408  1c58		       48		      pha
   5409  1c59		       a9 ff		      lda	#<(.__Level_Data_Bank1-1)
   5410  1c5b		       48		      pha
   5411  1c5c		       a5 ee		      lda	temp7
   5412  1c5e		       48		      pha
   5413  1c5f		       8a		      txa
   5414  1c60		       48		      pha
   5415  1c61		       a2 05		      ldx	#5
   5416  1c63		       4c eb ff 	      jmp	BS_jsr
   5417  1c66				   ret_point19
   5418  1c66		       4c 81 1c 	      jmp	.skipelse26
   5419  1c69				   .skipL0288
   5420  1c69		       85 ee		      sta	temp7
   5421  1c6b		       a9 1c		      lda	#>(ret_point20-1)
   5422  1c6d		       48		      pha
   5423  1c6e		       a9 80		      lda	#<(ret_point20-1)
   5424  1c70		       48		      pha
   5425  1c71		       a9 af		      lda	#>(.__Level_Data_Bank2-1)
   5426  1c73		       48		      pha
   5427  1c74		       a9 ff		      lda	#<(.__Level_Data_Bank2-1)
   5428  1c76		       48		      pha
   5429  1c77		       a5 ee		      lda	temp7
   5430  1c79		       48		      pha
   5431  1c7a		       8a		      txa
   5432  1c7b		       48		      pha
   5433  1c7c		       a2 06		      ldx	#6
   5434  1c7e		       4c eb ff 	      jmp	BS_jsr
   5435  1c81				   ret_point20
   5436  1c81				   .skipelse26
   5437  1c81				   .
   5438  1c81							; 
   5439  1c81
   5440  1c81				   .L0289		;  if y{0} then var0  =  var0	|  128 else var0  =  var0  &  127
   5441  1c81
   5442  1c81		       a5 ec		      LDA	y
   5443  1c83		       4a		      LSR
   5444  1c84		       90 09		      BCC	.skipL0289
   5445  1c86				   .condpart143
   5446  1c86		       a5 a4		      LDA	var0
   5447  1c88		       09 80		      ORA	#128
   5448  1c8a		       85 a4		      STA	var0
   5449  1c8c		       4c 95 1c 	      jmp	.skipelse27
   5450  1c8f				   .skipL0289
   5451  1c8f		       a5 a4		      LDA	var0
   5452  1c91		       29 7f		      AND	#127
   5453  1c93		       85 a4		      STA	var0
   5454  1c95				   .skipelse27
   5455  1c95				   .
   5456  1c95							; 
   5457  1c95
   5458  1c95				   .
   5459  1c95							; 
   5460  1c95
   5461  1c95				   .
   5462  1c95							; 
   5463  1c95
   5464  1c95				   .
   5465  1c95							; 
   5466  1c95
   5467  1c95				   .
   5468  1c95							; 
   5469  1c95
   5470  1c95				   .L0290		;  if _Level  =  1  &&  _Animation_Timer  <>  250 then var4  =  var4  &  127  :  goto __Render_3
   5471  1c95
   5472  1c95		       a5 ea		      LDA	_Level
   5473  1c97		       c9 01		      CMP	#1
   5474  1c99		       d0 0f		      BNE	.skipL0290
   5475  1c9b				   .condpart144
   5476  1c9b		       a5 d4		      LDA	_Animation_Timer
   5477  1c9d		       c9 fa		      CMP	#250
   5478  1c9f		       f0 09		      BEQ	.skip144then
   5479  1ca1				   .condpart145
   5480  1ca1		       a5 a8		      LDA	var4
   5481  1ca3		       29 7f		      AND	#127
   5482  1ca5		       85 a8		      STA	var4
   5483  1ca7		       4c bf 1c 	      jmp	.__Render_3
   5484  1caa
   5485  1caa				   .skip144then
   5486  1caa				   .skipL0290
   5487  1caa				   .
   5488  1caa							; 
   5489  1caa
   5490  1caa				   .L0291		;  if y{1} then var4  =  var4	|  128 else var4  =  var4  &  127
   5491  1caa
   5492  1caa		       a5 ec		      LDA	y
   5493  1cac		       29 02		      AND	#2
   5494  1cae		       f0 09		      BEQ	.skipL0291
   5495  1cb0				   .condpart146
   5496  1cb0		       a5 a8		      LDA	var4
   5497  1cb2		       09 80		      ORA	#128
   5498  1cb4		       85 a8		      STA	var4
   5499  1cb6		       4c bf 1c 	      jmp	.skipelse28
   5500  1cb9				   .skipL0291
   5501  1cb9		       a5 a8		      LDA	var4
   5502  1cbb		       29 7f		      AND	#127
   5503  1cbd		       85 a8		      STA	var4
   5504  1cbf				   .skipelse28
   5505  1cbf				   .
   5506  1cbf							; 
   5507  1cbf
   5508  1cbf				   .__Render_3
   5509  1cbf							; __Render_3
   5510  1cbf
   5511  1cbf				   .
   5512  1cbf							; 
   5513  1cbf
   5514  1cbf				   .L0292		;  if y{2} then var8  =  var8	|  128 else var8  =  var8  &  127
   5515  1cbf
   5516  1cbf		       a5 ec		      LDA	y
   5517  1cc1		       29 04		      AND	#4
   5518  1cc3		       f0 09		      BEQ	.skipL0292
   5519  1cc5				   .condpart147
   5520  1cc5		       a5 ac		      LDA	var8
   5521  1cc7		       09 80		      ORA	#128
   5522  1cc9		       85 ac		      STA	var8
   5523  1ccb		       4c d4 1c 	      jmp	.skipelse29
   5524  1cce				   .skipL0292
   5525  1cce		       a5 ac		      LDA	var8
   5526  1cd0		       29 7f		      AND	#127
   5527  1cd2		       85 ac		      STA	var8
   5528  1cd4				   .skipelse29
   5529  1cd4				   .
   5530  1cd4							; 
   5531  1cd4
   5532  1cd4				   .L0293		;  if y{3} then var12	=  var12  |  128 else var12  =	var12  &  127
   5533  1cd4
   5534  1cd4		       a5 ec		      LDA	y
   5535  1cd6		       29 08		      AND	#8
   5536  1cd8		       f0 09		      BEQ	.skipL0293
   5537  1cda				   .condpart148
   5538  1cda		       a5 b0		      LDA	var12
   5539  1cdc		       09 80		      ORA	#128
   5540  1cde		       85 b0		      STA	var12
   5541  1ce0		       4c e9 1c 	      jmp	.skipelse30
   5542  1ce3				   .skipL0293
   5543  1ce3		       a5 b0		      LDA	var12
   5544  1ce5		       29 7f		      AND	#127
   5545  1ce7		       85 b0		      STA	var12
   5546  1ce9				   .skipelse30
   5547  1ce9				   .
   5548  1ce9							; 
   5549  1ce9
   5550  1ce9				   .L0294		;  if y{4} then var16	=  var16  |  128 else var16  =	var16  &  127
   5551  1ce9
   5552  1ce9		       a5 ec		      LDA	y
   5553  1ceb		       29 10		      AND	#16
   5554  1ced		       f0 09		      BEQ	.skipL0294
   5555  1cef				   .condpart149
   5556  1cef		       a5 b4		      LDA	var16
   5557  1cf1		       09 80		      ORA	#128
   5558  1cf3		       85 b4		      STA	var16
   5559  1cf5		       4c fe 1c 	      jmp	.skipelse31
   5560  1cf8				   .skipL0294
   5561  1cf8		       a5 b4		      LDA	var16
   5562  1cfa		       29 7f		      AND	#127
   5563  1cfc		       85 b4		      STA	var16
   5564  1cfe				   .skipelse31
   5565  1cfe				   .
   5566  1cfe							; 
   5567  1cfe
   5568  1cfe				   .L0295		;  if y{5} then var20	=  var20  |  128 else var20  =	var20  &  127
   5569  1cfe
   5570  1cfe		       a5 ec		      LDA	y
   5571  1d00		       29 20		      AND	#32
   5572  1d02		       f0 09		      BEQ	.skipL0295
   5573  1d04				   .condpart150
   5574  1d04		       a5 b8		      LDA	var20
   5575  1d06		       09 80		      ORA	#128
   5576  1d08		       85 b8		      STA	var20
   5577  1d0a		       4c 13 1d 	      jmp	.skipelse32
   5578  1d0d				   .skipL0295
   5579  1d0d		       a5 b8		      LDA	var20
   5580  1d0f		       29 7f		      AND	#127
   5581  1d11		       85 b8		      STA	var20
   5582  1d13				   .skipelse32
   5583  1d13				   .
   5584  1d13							; 
   5585  1d13
   5586  1d13				   .L0296		;  if _Level  <  3  &&  _Animation_Timer  <>  250 then var24  =  var24  &  127  :  goto __Render_4
   5587  1d13
   5588  1d13		       a5 ea		      LDA	_Level
   5589  1d15		       c9 03		      CMP	#3
   5590  1d17		       b0 0f		      BCS	.skipL0296
   5591  1d19				   .condpart151
   5592  1d19		       a5 d4		      LDA	_Animation_Timer
   5593  1d1b		       c9 fa		      CMP	#250
   5594  1d1d		       f0 09		      BEQ	.skip151then
   5595  1d1f				   .condpart152
   5596  1d1f		       a5 bc		      LDA	var24
   5597  1d21		       29 7f		      AND	#127
   5598  1d23		       85 bc		      STA	var24
   5599  1d25		       4c 3b 1d 	      jmp	.__Render_4
   5600  1d28
   5601  1d28				   .skip151then
   5602  1d28				   .skipL0296
   5603  1d28				   .
   5604  1d28							; 
   5605  1d28
   5606  1d28				   .L0297		;  if y{6} then var24	=  var24  |  128 else var24  =	var24  &  127
   5607  1d28
   5608  1d28		       24 ec		      BIT	y
   5609  1d2a		       50 09		      BVC	.skipL0297
   5610  1d2c				   .condpart153
   5611  1d2c		       a5 bc		      LDA	var24
   5612  1d2e		       09 80		      ORA	#128
   5613  1d30		       85 bc		      STA	var24
   5614  1d32		       4c 3b 1d 	      jmp	.skipelse33
   5615  1d35				   .skipL0297
   5616  1d35		       a5 bc		      LDA	var24
   5617  1d37		       29 7f		      AND	#127
   5618  1d39		       85 bc		      STA	var24
   5619  1d3b				   .skipelse33
   5620  1d3b				   .
   5621  1d3b							; 
   5622  1d3b
   5623  1d3b				   .__Render_4
   5624  1d3b							; __Render_4
   5625  1d3b
   5626  1d3b				   .
   5627  1d3b							; 
   5628  1d3b
   5629  1d3b				   .L0298		;  if y{7} then var28	=  var28  |  128 else var28  =	var28  &  127
   5630  1d3b
   5631  1d3b		       24 ec		      BIT	y
   5632  1d3d		       10 09		      BPL	.skipL0298
   5633  1d3f				   .condpart154
   5634  1d3f		       a5 c0		      LDA	var28
   5635  1d41		       09 80		      ORA	#128
   5636  1d43		       85 c0		      STA	var28
   5637  1d45		       4c 4e 1d 	      jmp	.skipelse34
   5638  1d48				   .skipL0298
   5639  1d48		       a5 c0		      LDA	var28
   5640  1d4a		       29 7f		      AND	#127
   5641  1d4c		       85 c0		      STA	var28
   5642  1d4e				   .skipelse34
   5643  1d4e				   .
   5644  1d4e							; 
   5645  1d4e
   5646  1d4e				   .L0299		;  if u{0} then var32	=  var32  |  128 else var32  =	var32  &  127
   5647  1d4e
   5648  1d4e		       a5 e8		      LDA	u
   5649  1d50		       4a		      LSR
   5650  1d51		       90 09		      BCC	.skipL0299
   5651  1d53				   .condpart155
   5652  1d53		       a5 c4		      LDA	var32
   5653  1d55		       09 80		      ORA	#128
   5654  1d57		       85 c4		      STA	var32
   5655  1d59		       4c 62 1d 	      jmp	.skipelse35
   5656  1d5c				   .skipL0299
   5657  1d5c		       a5 c4		      LDA	var32
   5658  1d5e		       29 7f		      AND	#127
   5659  1d60		       85 c4		      STA	var32
   5660  1d62				   .skipelse35
   5661  1d62				   .
   5662  1d62							; 
   5663  1d62
   5664  1d62				   .L0300		;  if u{1} then var36	=  var36  |  128 else var36  =	var36  &  127
   5665  1d62
   5666  1d62		       a5 e8		      LDA	u
   5667  1d64		       29 02		      AND	#2
   5668  1d66		       f0 09		      BEQ	.skipL0300
   5669  1d68				   .condpart156
   5670  1d68		       a5 c8		      LDA	var36
   5671  1d6a		       09 80		      ORA	#128
   5672  1d6c		       85 c8		      STA	var36
   5673  1d6e		       4c 77 1d 	      jmp	.skipelse36
   5674  1d71				   .skipL0300
   5675  1d71		       a5 c8		      LDA	var36
   5676  1d73		       29 7f		      AND	#127
   5677  1d75		       85 c8		      STA	var36
   5678  1d77				   .skipelse36
   5679  1d77				   .
   5680  1d77							; 
   5681  1d77
   5682  1d77				   .L0301		;  if u{2} then var40	=  var40  |  128 else var40  =	var40  &  127
   5683  1d77
   5684  1d77		       a5 e8		      LDA	u
   5685  1d79		       29 04		      AND	#4
   5686  1d7b		       f0 09		      BEQ	.skipL0301
   5687  1d7d				   .condpart157
   5688  1d7d		       a5 cc		      LDA	var40
   5689  1d7f		       09 80		      ORA	#128
   5690  1d81		       85 cc		      STA	var40
   5691  1d83		       4c 8c 1d 	      jmp	.skipelse37
   5692  1d86				   .skipL0301
   5693  1d86		       a5 cc		      LDA	var40
   5694  1d88		       29 7f		      AND	#127
   5695  1d8a		       85 cc		      STA	var40
   5696  1d8c				   .skipelse37
   5697  1d8c				   .
   5698  1d8c							; 
   5699  1d8c
   5700  1d8c				   .L0302		;  if u{3} then _Object_Scroll_In_Data  =  u else _Object_Scroll_In_Data  =  1
   5701  1d8c
   5702  1d8c		       a5 e8		      LDA	u
   5703  1d8e		       29 08		      AND	#8
   5704  1d90		       f0 07		      BEQ	.skipL0302
   5705  1d92				   .condpart158
   5706  1d92		       a5 e8		      LDA	u
   5707  1d94		       85 db		      STA	_Object_Scroll_In_Data
   5708  1d96		       4c 9d 1d 	      jmp	.skipelse38
   5709  1d99				   .skipL0302
   5710  1d99		       a9 01		      LDA	#1
   5711  1d9b		       85 db		      STA	_Object_Scroll_In_Data
   5712  1d9d				   .skipelse38
   5713  1d9d				   .
   5714  1d9d							; 
   5715  1d9d
   5716  1d9d				   .L0303		;  _Level_Data_Pointer  =  _Level_Data_Pointer  -  1
   5717  1d9d
   5718  1d9d		       c6 d5		      DEC	_Level_Data_Pointer
   5719  1d9f				   .
   5720  1d9f							; 
   5721  1d9f
   5722  1d9f				   .L0304		;  return
   5723  1d9f
   5724  1d9f		       ba		      tsx
   5725  1da0		       b5 02		      lda	2,x	; check return address
   5726  1da2		       49 1d		      eor	#(>*)	; vs. current PCH
   5727  1da4		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5728  1da6		       f0 03		      beq	*+5	; if equal, do normal return
   5729  1da8		       4c dd ff 	      JMP	BS_return
   5730  1dab		       60		      RTS
   5731  1dac				   .
   5732  1dac							; 
   5733  1dac
   5734  1dac				   .
   5735  1dac							; 
   5736  1dac
   5737  1dac				   .
   5738  1dac							; 
   5739  1dac
   5740  1dac				   .
   5741  1dac							; 
   5742  1dac
   5743  1dac				   .
   5744  1dac							; 
   5745  1dac
   5746  1dac				   .
   5747  1dac							; 
   5748  1dac
   5749  1dac				   .
   5750  1dac							; 
   5751  1dac
   5752  1dac				   .__Render_Screen
   5753  1dac							; __Render_Screen
   5754  1dac
   5755  1dac				   .
   5756  1dac							; 
   5757  1dac
   5758  1dac				   .
   5759  1dac							; 
   5760  1dac
   5761  1dac				   .
   5762  1dac							; 
   5763  1dac
   5764  1dac				   .
   5765  1dac							; 
   5766  1dac
   5767  1dac				   .
   5768  1dac							; 
   5769  1dac
   5770  1dac				   .
   5771  1dac							; 
   5772  1dac
   5773  1dac				   .
   5774  1dac							; 
   5775  1dac
   5776  1dac				   .
   5777  1dac							; 
   5778  1dac
   5779  1dac				   .L0305		;  if _Level  =  1  ||  _Level  =  3 then COLUPF  =  $32 else COLUPF  =  $04
   5780  1dac
   5781  1dac		       a5 ea		      LDA	_Level
   5782  1dae		       c9 01		      CMP	#1
   5783  1db0		       d0 03		      BNE	.skipL0305
   5784  1db2				   .condpart159
   5785  1db2		       4c bb 1d 	      jmp	.condpart160
   5786  1db5				   .skipL0305
   5787  1db5		       a5 ea		      LDA	_Level
   5788  1db7		       c9 03		      CMP	#3
   5789  1db9		       d0 07		      BNE	.skip41OR
   5790  1dbb				   .condpart160
   5791  1dbb		       a9 32		      LDA	#$32
   5792  1dbd		       85 08		      STA	COLUPF
   5793  1dbf		       4c c6 1d 	      jmp	.skipelse39
   5794  1dc2				   .skip41OR
   5795  1dc2		       a9 04		      LDA	#$04
   5796  1dc4		       85 08		      STA	COLUPF
   5797  1dc6				   .skipelse39
   5798  1dc6				   .
   5799  1dc6							; 
   5800  1dc6
   5801  1dc6				   .L0306		;  if _Level  =  2 then COLUPF  =  $A4
   5802  1dc6
   5803  1dc6		       a5 ea		      LDA	_Level
   5804  1dc8		       c9 02		      CMP	#2
   5805  1dca		       d0 04		      BNE	.skipL0306
   5806  1dcc				   .condpart161
   5807  1dcc		       a9 a4		      LDA	#$A4
   5808  1dce		       85 08		      STA	COLUPF
   5809  1dd0				   .skipL0306
   5810  1dd0				   .
   5811  1dd0							; 
   5812  1dd0
   5813  1dd0				   .L0307		;  if _Enemy_Type  =  _Kinetic_Platforms  &&  !_Bit7_2nd_Quest{7} then NUSIZ1	=  $17	:  goto __Finish_Render
   5814  1dd0
   5815  1dd0		       a5 dc		      LDA	_Enemy_Type
   5816  1dd2		       c9 1c		      CMP	#_Kinetic_Platforms
   5817  1dd4		       d0 0b		      BNE	.skipL0307
   5818  1dd6				   .condpart162
   5819  1dd6		       24 d9		      BIT	_Bit7_2nd_Quest
   5820  1dd8		       30 07		      BMI	.skip162then
   5821  1dda				   .condpart163
   5822  1dda		       a9 17		      LDA	#$17
   5823  1ddc		       85 05		      STA	NUSIZ1
   5824  1dde		       4c 4b 1e 	      jmp	.__Finish_Render
   5825  1de1
   5826  1de1				   .skip162then
   5827  1de1				   .skipL0307
   5828  1de1				   .
   5829  1de1							; 
   5830  1de1
   5831  1de1				   .L0308		;  if _Enemy_Type  =  _Kinetic_Platforms  &&  _Bit7_2nd_Quest{7} then NUSIZ1  =  $15  :  goto __Finish_Render
   5832  1de1
   5833  1de1		       a5 dc		      LDA	_Enemy_Type
   5834  1de3		       c9 1c		      CMP	#_Kinetic_Platforms
   5835  1de5		       d0 0b		      BNE	.skipL0308
   5836  1de7				   .condpart164
   5837  1de7		       24 d9		      BIT	_Bit7_2nd_Quest
   5838  1de9		       10 07		      BPL	.skip164then
   5839  1deb				   .condpart165
   5840  1deb		       a9 15		      LDA	#$15
   5841  1ded		       85 05		      STA	NUSIZ1
   5842  1def		       4c 4b 1e 	      jmp	.__Finish_Render
   5843  1df2
   5844  1df2				   .skip164then
   5845  1df2				   .skipL0308
   5846  1df2				   .
   5847  1df2							; 
   5848  1df2
   5849  1df2				   .L0309		;  if _Enemy_Type  =  _Thwomp	||  _Enemy_Type  =  _Bowser_Jr then NUSIZ1  =  $15  :  goto __Finish_Render
   5850  1df2
   5851  1df2		       a5 dc		      LDA	_Enemy_Type
   5852  1df4		       c9 28		      CMP	#_Thwomp
   5853  1df6		       d0 03		      BNE	.skipL0309
   5854  1df8				   .condpart166
   5855  1df8		       4c 01 1e 	      jmp	.condpart167
   5856  1dfb				   .skipL0309
   5857  1dfb		       a5 dc		      LDA	_Enemy_Type
   5858  1dfd		       c9 40		      CMP	#_Bowser_Jr
   5859  1dff		       d0 07		      BNE	.skip44OR
   5860  1e01				   .condpart167
   5861  1e01		       a9 15		      LDA	#$15
   5862  1e03		       85 05		      STA	NUSIZ1
   5863  1e05		       4c 4b 1e 	      jmp	.__Finish_Render
   5864  1e08
   5865  1e08				   .skip44OR
   5866  1e08				   .
   5867  1e08							; 
   5868  1e08
   5869  1e08				   .L0310		;  if _Enemy_Type  =  _Bullet_Bill then NUSIZ1  =  $15  :  goto __Finish_Render
   5870  1e08
   5871  1e08		       a5 dc		      LDA	_Enemy_Type
   5872  1e0a		       c9 0c		      CMP	#_Bullet_Bill
   5873  1e0c		       d0 07		      BNE	.skipL0310
   5874  1e0e				   .condpart168
   5875  1e0e		       a9 15		      LDA	#$15
   5876  1e10		       85 05		      STA	NUSIZ1
   5877  1e12		       4c 4b 1e 	      jmp	.__Finish_Render
   5878  1e15
   5879  1e15				   .skipL0310
   5880  1e15				   .
   5881  1e15							; 
   5882  1e15
   5883  1e15				   .L0311		;  if _Enemy_Type  =  _Two_Goombas  &&  player1x  <  122 then NUSIZ1  =  $11  :  goto __Finish_Render
   5884  1e15
   5885  1e15		       a5 dc		      LDA	_Enemy_Type
   5886  1e17		       c9 2a		      CMP	#_Two_Goombas
   5887  1e19		       d0 0d		      BNE	.skipL0311
   5888  1e1b				   .condpart169
   5889  1e1b		       a5 81		      LDA	player1x
   5890  1e1d		       c9 7a		      CMP	#122
   5891  1e1f		       b0 07		      BCS	.skip169then
   5892  1e21				   .condpart170
   5893  1e21		       a9 11		      LDA	#$11
   5894  1e23		       85 05		      STA	NUSIZ1
   5895  1e25		       4c 4b 1e 	      jmp	.__Finish_Render
   5896  1e28
   5897  1e28				   .skip169then
   5898  1e28				   .skipL0311
   5899  1e28				   .
   5900  1e28							; 
   5901  1e28
   5902  1e28				   .L0312		;  if _Enemy_Type  =  _Two_Spineys  &&  player1x  <  122 then NUSIZ1  =  $11  :  goto __Finish_Render
   5903  1e28
   5904  1e28		       a5 dc		      LDA	_Enemy_Type
   5905  1e2a		       c9 2e		      CMP	#_Two_Spineys
   5906  1e2c		       d0 0d		      BNE	.skipL0312
   5907  1e2e				   .condpart171
   5908  1e2e		       a5 81		      LDA	player1x
   5909  1e30		       c9 7a		      CMP	#122
   5910  1e32		       b0 07		      BCS	.skip171then
   5911  1e34				   .condpart172
   5912  1e34		       a9 11		      LDA	#$11
   5913  1e36		       85 05		      STA	NUSIZ1
   5914  1e38		       4c 4b 1e 	      jmp	.__Finish_Render
   5915  1e3b
   5916  1e3b				   .skip171then
   5917  1e3b				   .skipL0312
   5918  1e3b				   .
   5919  1e3b							; 
   5920  1e3b
   5921  1e3b				   .L0313		;  if _Enemy_Type  =  _Two_Thwomps  &&  player1x  <  106 then NUSIZ1  =  $12
   5922  1e3b
   5923  1e3b		       a5 dc		      LDA	_Enemy_Type
   5924  1e3d		       c9 2c		      CMP	#_Two_Thwomps
   5925  1e3f		       d0 0a		      BNE	.skipL0313
   5926  1e41				   .condpart173
   5927  1e41		       a5 81		      LDA	player1x
   5928  1e43		       c9 6a		      CMP	#106
   5929  1e45		       b0 04		      BCS	.skip173then
   5930  1e47				   .condpart174
   5931  1e47		       a9 12		      LDA	#$12
   5932  1e49		       85 05		      STA	NUSIZ1
   5933  1e4b				   .skip173then
   5934  1e4b				   .skipL0313
   5935  1e4b				   .
   5936  1e4b							; 
   5937  1e4b
   5938  1e4b				   .__Finish_Render
   5939  1e4b							; __Finish_Render
   5940  1e4b
   5941  1e4b				   .
   5942  1e4b							; 
   5943  1e4b
   5944  1e4b				   .L0314		;  if _Bit0_Player_Facing_Direction{0} then REFP0  =  8 else REFP0  =	0
   5945  1e4b
   5946  1e4b		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   5947  1e4d		       4a		      LSR
   5948  1e4e		       90 07		      BCC	.skipL0314
   5949  1e50				   .condpart175
   5950  1e50		       a9 08		      LDA	#8
   5951  1e52		       85 0b		      STA	REFP0
   5952  1e54		       4c 5b 1e 	      jmp	.skipelse40
   5953  1e57				   .skipL0314
   5954  1e57		       a9 00		      LDA	#0
   5955  1e59		       85 0b		      STA	REFP0
   5956  1e5b				   .skipelse40
   5957  1e5b				   .
   5958  1e5b							; 
   5959  1e5b
   5960  1e5b				   .L0315		;  if _Bit3_Enemy_Direction{3} then REFP1  =  8 else REFP1  =	0
   5961  1e5b
   5962  1e5b		       a5 da		      LDA	_Bit3_Enemy_Direction
   5963  1e5d		       29 08		      AND	#8
   5964  1e5f		       f0 07		      BEQ	.skipL0315
   5965  1e61				   .condpart176
   5966  1e61		       a9 08		      LDA	#8
   5967  1e63		       85 0c		      STA	REFP1
   5968  1e65		       4c 6c 1e 	      jmp	.skipelse41
   5969  1e68				   .skipL0315
   5970  1e68		       a9 00		      LDA	#0
   5971  1e6a		       85 0c		      STA	REFP1
   5972  1e6c				   .skipelse41
   5973  1e6c				   .
   5974  1e6c							; 
   5975  1e6c
   5976  1e6c				   .L0316		;  drawscreen
   5977  1e6c
   5978  1e6c		       85 ee		      sta	temp7
   5979  1e6e		       a9 1e		      lda	#>(ret_point21-1)
   5980  1e70		       48		      pha
   5981  1e71		       a9 83		      lda	#<(ret_point21-1)
   5982  1e73		       48		      pha
   5983  1e74		       a9 f4		      lda	#>(drawscreen-1)
   5984  1e76		       48		      pha
   5985  1e77		       a9 37		      lda	#<(drawscreen-1)
   5986  1e79		       48		      pha
   5987  1e7a		       a5 ee		      lda	temp7
   5988  1e7c		       48		      pha
   5989  1e7d		       8a		      txa
   5990  1e7e		       48		      pha
   5991  1e7f		       a2 08		      ldx	#8
   5992  1e81		       4c eb ff 	      jmp	BS_jsr
   5993  1e84				   ret_point21
   5994  1e84				   .
   5995  1e84							; 
   5996  1e84
   5997  1e84				   .L0317		;  return
   5998  1e84
   5999  1e84		       ba		      tsx
   6000  1e85		       b5 02		      lda	2,x	; check return address
   6001  1e87		       49 1e		      eor	#(>*)	; vs. current PCH
   6002  1e89		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6003  1e8b		       f0 03		      beq	*+5	; if equal, do normal return
   6004  1e8d		       4c dd ff 	      JMP	BS_return
   6005  1e90		       60		      RTS
   6006  1e91				   .
   6007  1e91							; 
   6008  1e91
   6009  1e91				   .
   6010  1e91							; 
   6011  1e91
   6012  1e91				   .
   6013  1e91							; 
   6014  1e91
   6015  1e91				   .
   6016  1e91							; 
   6017  1e91
   6018  1e91				   .
   6019  1e91							; 
   6020  1e91
   6021  1e91				   .
   6022  1e91							; 
   6023  1e91
   6024  1e91				   .
   6025  1e91							; 
   6026  1e91
   6027  1e91				   .__Mario_Color
   6028  1e91							; __Mario_Color
   6029  1e91
   6030  1e91				   .L0318		;  player0color:
   6031  1e91
   6032  1e91		       a2 96		      LDX	#<playercolorL0318_0
   6033  1e93		       86 90		      STX	player0color
   6034  1e95		       a9 f8		      LDA	#>playercolorL0318_0
   6035  1e97		       85 91		      STA	player0color+1
   6036  1e99				   .L0319		;  return thisbank
   6037  1e99
   6038  1e99		       60		      RTS
   6039  1e9a				   .
   6040  1e9a							; 
   6041  1e9a
   6042  1e9a				   .__Mario_Jump_Color
   6043  1e9a							; __Mario_Jump_Color
   6044  1e9a
   6045  1e9a				   .L0320		;  player0color:
   6046  1e9a
   6047  1e9a		       a2 a3		      LDX	#<playercolorL0320_0
   6048  1e9c		       86 90		      STX	player0color
   6049  1e9e		       a9 f8		      LDA	#>playercolorL0320_0
   6050  1ea0		       85 91		      STA	player0color+1
   6051  1ea2				   .L0321		;  return thisbank
   6052  1ea2
   6053  1ea2		       60		      RTS
   6054  1ea3				   .
   6055  1ea3							; 
   6056  1ea3
   6057  1ea3				   .
   6058  1ea3							; 
   6059  1ea3
   6060  1ea3				   .
   6061  1ea3							; 
   6062  1ea3
   6063  1ea3				   .
   6064  1ea3							; 
   6065  1ea3
   6066  1ea3				   .
   6067  1ea3							; 
   6068  1ea3
   6069  1ea3				   .
   6070  1ea3							; 
   6071  1ea3
   6072  1ea3				   .
   6073  1ea3							; 
   6074  1ea3
   6075  1ea3				   .__Mario
   6076  1ea3							; __Mario
   6077  1ea3
   6078  1ea3				   .L0322		;  player0:
   6079  1ea3
   6080  1ea3		       a2 b2		      LDX	#<playerL0322_0
   6081  1ea5		       86 8a		      STX	player0pointerlo
   6082  1ea7		       a9 f8		      LDA	#>playerL0322_0
   6083  1ea9		       85 8b		      STA	player0pointerhi
   6084  1eab		       a9 0c		      LDA	#12
   6085  1ead		       85 8e		      STA	player0height
   6086  1eaf				   .L0323		;  return thisbank
   6087  1eaf
   6088  1eaf		       60		      RTS
   6089  1eb0				   .
   6090  1eb0							; 
   6091  1eb0
   6092  1eb0				   .__Mario2
   6093  1eb0							; __Mario2
   6094  1eb0
   6095  1eb0				   .L0324		;  player0:
   6096  1eb0
   6097  1eb0		       a2 bf		      LDX	#<playerL0324_0
   6098  1eb2		       86 8a		      STX	player0pointerlo
   6099  1eb4		       a9 f8		      LDA	#>playerL0324_0
   6100  1eb6		       85 8b		      STA	player0pointerhi
   6101  1eb8		       a9 0c		      LDA	#12
   6102  1eba		       85 8e		      STA	player0height
   6103  1ebc				   .L0325		;  return thisbank
   6104  1ebc
   6105  1ebc		       60		      RTS
   6106  1ebd				   .
   6107  1ebd							; 
   6108  1ebd
   6109  1ebd				   .__Mario_Jump
   6110  1ebd							; __Mario_Jump
   6111  1ebd
   6112  1ebd				   .L0326		;  player0:
   6113  1ebd
   6114  1ebd		       a2 cc		      LDX	#<playerL0326_0
   6115  1ebf		       86 8a		      STX	player0pointerlo
   6116  1ec1		       a9 f8		      LDA	#>playerL0326_0
   6117  1ec3		       85 8b		      STA	player0pointerhi
   6118  1ec5		       a9 0e		      LDA	#14
   6119  1ec7		       85 8e		      STA	player0height
   6120  1ec9				   .L0327		;  return thisbank
   6121  1ec9
   6122  1ec9		       60		      RTS
   6123  1eca				   .
   6124  1eca							; 
   6125  1eca
   6126  1eca				   .
   6127  1eca							; 
   6128  1eca
   6129  1eca				   .
   6130  1eca							; 
   6131  1eca
   6132  1eca				   .
   6133  1eca							; 
   6134  1eca
   6135  1eca				   .
   6136  1eca							; 
   6137  1eca
   6138  1eca				   .
   6139  1eca							; 
   6140  1eca
   6141  1eca				   .
   6142  1eca							; 
   6143  1eca
   6144  1eca				   .__Super_Mario_Color
   6145  1eca							; __Super_Mario_Color
   6146  1eca
   6147  1eca				   .L0328		;  player0color:
   6148  1eca
   6149  1eca		       a2 db		      LDX	#<playercolorL0328_0
   6150  1ecc		       86 90		      STX	player0color
   6151  1ece		       a9 f8		      LDA	#>playercolorL0328_0
   6152  1ed0		       85 91		      STA	player0color+1
   6153  1ed2				   .L0329		;  return thisbank
   6154  1ed2
   6155  1ed2		       60		      RTS
   6156  1ed3				   .
   6157  1ed3							; 
   6158  1ed3
   6159  1ed3				   .__Super_Mario
   6160  1ed3							; __Super_Mario
   6161  1ed3
   6162  1ed3				   .L0330		;  player0:
   6163  1ed3
   6164  1ed3		       a2 00		      LDX	#<playerL0330_0
   6165  1ed5		       86 8a		      STX	player0pointerlo
   6166  1ed7		       a9 f9		      LDA	#>playerL0330_0
   6167  1ed9		       85 8b		      STA	player0pointerhi
   6168  1edb		       a9 17		      LDA	#23
   6169  1edd		       85 8e		      STA	player0height
   6170  1edf				   .L0331		;  return thisbank
   6171  1edf
   6172  1edf		       60		      RTS
   6173  1ee0				   .
   6174  1ee0							; 
   6175  1ee0
   6176  1ee0				   .
   6177  1ee0							; 
   6178  1ee0
   6179  1ee0				   .
   6180  1ee0							; 
   6181  1ee0
   6182  1ee0				   .
   6183  1ee0							; 
   6184  1ee0
   6185  1ee0				   .
   6186  1ee0							; 
   6187  1ee0
   6188  1ee0				   .
   6189  1ee0							; 
   6190  1ee0
   6191  1ee0				   .
   6192  1ee0							; 
   6193  1ee0
   6194  1ee0				   .__Fire_Mario_Color
   6195  1ee0							; __Fire_Mario_Color
   6196  1ee0
   6197  1ee0				   .L0332		;  player0color:
   6198  1ee0
   6199  1ee0		       a2 18		      LDX	#<playercolorL0332_0
   6200  1ee2		       86 90		      STX	player0color
   6201  1ee4		       a9 f9		      LDA	#>playercolorL0332_0
   6202  1ee6		       85 91		      STA	player0color+1
   6203  1ee8				   .L0333		;  return thisbank
   6204  1ee8
   6205  1ee8		       60		      RTS
   6206  1ee9				   .
   6207  1ee9							; 
   6208  1ee9
   6209  1ee9				   .__Fire_Mario_Jump_Color
   6210  1ee9							; __Fire_Mario_Jump_Color
   6211  1ee9
   6212  1ee9				   .L0334		;  player0color:
   6213  1ee9
   6214  1ee9		       a2 30		      LDX	#<playercolorL0334_0
   6215  1eeb		       86 90		      STX	player0color
   6216  1eed		       a9 f9		      LDA	#>playercolorL0334_0
   6217  1eef		       85 91		      STA	player0color+1
   6218  1ef1				   .L0335		;  return thisbank
   6219  1ef1
   6220  1ef1		       60		      RTS
   6221  1ef2				   .
   6222  1ef2							; 
   6223  1ef2
   6224  1ef2				   .__Super_Mario_02
   6225  1ef2							; __Super_Mario_02
   6226  1ef2
   6227  1ef2				   .L0336		;  player0:
   6228  1ef2
   6229  1ef2		       a2 4a		      LDX	#<playerL0336_0
   6230  1ef4		       86 8a		      STX	player0pointerlo
   6231  1ef6		       a9 f9		      LDA	#>playerL0336_0
   6232  1ef8		       85 8b		      STA	player0pointerhi
   6233  1efa		       a9 17		      LDA	#23
   6234  1efc		       85 8e		      STA	player0height
   6235  1efe				   .L0337		;  return thisbank
   6236  1efe
   6237  1efe		       60		      RTS
   6238  1eff				   .
   6239  1eff							; 
   6240  1eff
   6241  1eff				   .__Super_Mario_Jump_Color
   6242  1eff							; __Super_Mario_Jump_Color
   6243  1eff
   6244  1eff				   .L0338		;  player0color:
   6245  1eff
   6246  1eff		       a2 62		      LDX	#<playercolorL0338_0
   6247  1f01		       86 90		      STX	player0color
   6248  1f03		       a9 f9		      LDA	#>playercolorL0338_0
   6249  1f05		       85 91		      STA	player0color+1
   6250  1f07				   .L0339		;  return thisbank
   6251  1f07
   6252  1f07		       60		      RTS
   6253  1f08				   .
   6254  1f08							; 
   6255  1f08
   6256  1f08				   .__Super_Mario_Jump
   6257  1f08							; __Super_Mario_Jump
   6258  1f08
   6259  1f08				   .L0340		;  player0:
   6260  1f08
   6261  1f08		       a2 7c		      LDX	#<playerL0340_0
   6262  1f0a		       86 8a		      STX	player0pointerlo
   6263  1f0c		       a9 f9		      LDA	#>playerL0340_0
   6264  1f0e		       85 8b		      STA	player0pointerhi
   6265  1f10		       a9 19		      LDA	#25
   6266  1f12		       85 8e		      STA	player0height
   6267  1f14				   .L0341		;  return thisbank
   6268  1f14
   6269  1f14		       60		      RTS
   6270  1f15				   .
   6271  1f15							; 
   6272  1f15
   6273  1f15				   .__Mario_Duck_Color
   6274  1f15							; __Mario_Duck_Color
   6275  1f15
   6276  1f15				   .L0342		;  player0color:
   6277  1f15
   6278  1f15		       a2 96		      LDX	#<playercolorL0342_0
   6279  1f17		       86 90		      STX	player0color
   6280  1f19		       a9 f9		      LDA	#>playercolorL0342_0
   6281  1f1b		       85 91		      STA	player0color+1
   6282  1f1d				   .L0343		;  return thisbank
   6283  1f1d
   6284  1f1d		       60		      RTS
   6285  1f1e				   .
   6286  1f1e							; 
   6287  1f1e
   6288  1f1e				   .__Fire_Mario_Duck_Color
   6289  1f1e							; __Fire_Mario_Duck_Color
   6290  1f1e
   6291  1f1e				   .L0344		;  player0color:
   6292  1f1e
   6293  1f1e		       a2 a3		      LDX	#<playercolorL0344_0
   6294  1f20		       86 90		      STX	player0color
   6295  1f22		       a9 f9		      LDA	#>playercolorL0344_0
   6296  1f24		       85 91		      STA	player0color+1
   6297  1f26				   .L0345		;  return thisbank
   6298  1f26
   6299  1f26		       60		      RTS
   6300  1f27				   .
   6301  1f27							; 
   6302  1f27
   6303  1f27				   .__Mario_Duck
   6304  1f27							; __Mario_Duck
   6305  1f27
   6306  1f27				   .L0346		;  player0:
   6307  1f27
   6308  1f27		       a2 b0		      LDX	#<playerL0346_0
   6309  1f29		       86 8a		      STX	player0pointerlo
   6310  1f2b		       a9 f9		      LDA	#>playerL0346_0
   6311  1f2d		       85 8b		      STA	player0pointerhi
   6312  1f2f		       a9 0c		      LDA	#12
   6313  1f31		       85 8e		      STA	player0height
   6314  1f33				   .L0347		;  return thisbank
   6315  1f33
   6316  1f33		       60		      RTS
   6317  1f34				   .
   6318  1f34							; 
   6319  1f34
   6320  1f34				   .
   6321  1f34							; 
   6322  1f34
   6323  1f34				   .__No_Mario
   6324  1f34							; __No_Mario
   6325  1f34
   6326  1f34				   .
   6327  1f34							; 
   6328  1f34
   6329  1f34				   .
   6330  1f34							; 
   6331  1f34
   6332  1f34				   .
   6333  1f34							; 
   6334  1f34
   6335  1f34				   .
   6336  1f34							; 
   6337  1f34
   6338  1f34				   .
   6339  1f34							; 
   6340  1f34
   6341  1f34				   .
   6342  1f34							; 
   6343  1f34
   6344  1f34				   .L0348		;  player0:
   6345  1f34
   6346  1f34		       a2 bd		      LDX	#<playerL0348_0
   6347  1f36		       86 8a		      STX	player0pointerlo
   6348  1f38		       a9 f9		      LDA	#>playerL0348_0
   6349  1f3a		       85 8b		      STA	player0pointerhi
   6350  1f3c		       a9 00		      LDA	#0
   6351  1f3e		       85 8e		      STA	player0height
   6352  1f40				   .L0349		;  return
   6353  1f40
   6354  1f40		       ba		      tsx
   6355  1f41		       b5 02		      lda	2,x	; check return address
   6356  1f43		       49 1f		      eor	#(>*)	; vs. current PCH
   6357  1f45		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   6358  1f47		       f0 03		      beq	*+5	; if equal, do normal return
   6359  1f49		       4c dd ff 	      JMP	BS_return
   6360  1f4c		       60		      RTS
   6361  1f4d				   .
   6362  1f4d							; 
   6363  1f4d
   6364  1f4d				   .
   6365  1f4d							; 
   6366  1f4d
   6367  1f4d				   .
   6368  1f4d							; 
   6369  1f4d
   6370  1f4d				   .
   6371  1f4d							; 
   6372  1f4d
   6373  1f4d				   .
   6374  1f4d							; 
   6375  1f4d
   6376  1f4d				   .
   6377  1f4d							; 
   6378  1f4d
   6379  1f4d				   .
   6380  1f4d							; 
   6381  1f4d
   6382  1f4d				   .
   6383  1f4d							; 
   6384  1f4d
   6385  1f4d				   .
   6386  1f4d							; 
   6387  1f4d
   6388  1f4d				   .
   6389  1f4d							; 
   6390  1f4d
   6391  1f4d				   .
   6392  1f4d							; 
   6393  1f4d
   6394  1f4d				   .L0350		;  bank 2
   6395  1f4d
   6396  1f4d					      if	ECHO1
      135 bytes of ROM space left in bank 1
   6397  1f4d					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   6398  1f4d					      endif
   6399  1f4d		       00 01	   ECHO1      =	1
   6400  1fd4					      ORG	$1FF4-bscode_length
   6401  1fd4					      RORG	$1FF4-bscode_length
   6402  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   6403  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   6404  1fd6				  -	      stx	FASTFETCH
   6405  1fd6					      endif
   6406  1fd6		       9a		      txs
   6407  1fd7				  -	      if	bankswitch == 64
   6408  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6409  1fd7					      else
   6410  1fd7		       a9 f2		      lda	#>(start-1)
   6411  1fd9					      endif
   6412  1fd9		       48		      pha
   6413  1fda		       a9 51		      lda	#<(start-1)
   6414  1fdc		       48		      pha
   6415  1fdd		       48		      pha
   6416  1fde		       8a		      txa
   6417  1fdf		       48		      pha
   6418  1fe0		       ba		      tsx
   6419  1fe1					      if	bankswitch != 64
   6420  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   6421  1fe3		       2a		      rol
   6422  1fe4		       2a		      rol
   6423  1fe5		       2a		      rol
   6424  1fe6		       2a		      rol
   6425  1fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6426  1fe9		       aa		      tax
   6427  1fea		       e8		      inx
   6428  1feb				  -	      else
   6429  1feb				  -	      lda	4,x	; get high byte of return address
   6430  1feb				  -	      tay
   6431  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6432  1feb				  -	      sta	4,x
   6433  1feb				  -	      tya
   6434  1feb				  -	      lsr
   6435  1feb				  -	      lsr
   6436  1feb				  -	      lsr
   6437  1feb				  -	      lsr
   6438  1feb				  -	      tax
   6439  1feb				  -	      inx
   6440  1feb					      endif
   6441  1feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   6442  1fee		       68		      pla
   6443  1fef		       aa		      tax
   6444  1ff0		       68		      pla
   6445  1ff1		       60		      rts
   6446  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6447  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6448  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6449  1ff2					      endif
   6450  1ffc					      ORG	$1FFC
   6451  1ffc					      RORG	$1FFC
   6452  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   6453  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   6454  2000					      ORG	$2000
   6455  2000					      RORG	$3000
   6456  2000				   .
   6457  2000							; 
   6458  2000
   6459  2000				   .
   6460  2000							; 
   6461  2000
   6462  2000				   .
   6463  2000							; 
   6464  2000
   6465  2000				   .
   6466  2000							; 
   6467  2000
   6468  2000				   .
   6469  2000							; 
   6470  2000
   6471  2000				   .
   6472  2000							; 
   6473  2000
   6474  2000				   .
   6475  2000							; 
   6476  2000
   6477  2000				   .__Fireball_Enemy_Routine
   6478  2000							; __Fireball_Enemy_Routine
   6479  2000
   6480  2000				   .
   6481  2000							; 
   6482  2000
   6483  2000				   .
   6484  2000							; 
   6485  2000
   6486  2000				   .
   6487  2000							; 
   6488  2000
   6489  2000				   .
   6490  2000							; 
   6491  2000
   6492  2000				   .
   6493  2000							; 
   6494  2000
   6495  2000				   .
   6496  2000							; 
   6497  2000
   6498  2000				   .
   6499  2000							; 
   6500  2000
   6501  2000				   .L0351		;  if _Object_Scroll_In_Data  >  1 then gosub __Initialize_Enemy
   6502  2000
   6503  2000		       a9 01		      LDA	#1
   6504  2002		       c5 db		      CMP	_Object_Scroll_In_Data
   6505  2004		       b0 03		      BCS	.skipL0351
   6506  2006				   .condpart177
   6507  2006		       20 74 36 	      jsr	.__Initialize_Enemy
   6508  2009
   6509  2009				   .skipL0351
   6510  2009				   .
   6511  2009							; 
   6512  2009
   6513  2009				   .L0352		;  if ballx  >  0 then bally  =  u else goto __Enemy_Routine
   6514  2009
   6515  2009		       a9 00		      LDA	#0
   6516  200b		       c5 84		      CMP	ballx
   6517  200d		       b0 07		      BCS	.skipL0352
   6518  200f				   .condpart178
   6519  200f		       a5 e8		      LDA	u
   6520  2011		       85 89		      STA	bally
   6521  2013		       4c 19 30 	      jmp	.skipelse42
   6522  2016				   .skipL0352
   6523  2016		       4c b5 30 	      jmp	.__Enemy_Routine
   6524  2019
   6525  2019				   .skipelse42
   6526  2019				   .
   6527  2019							; 
   6528  2019
   6529  2019				   .
   6530  2019							; 
   6531  2019
   6532  2019				   .
   6533  2019							; 
   6534  2019
   6535  2019				   .
   6536  2019							; 
   6537  2019
   6538  2019				   .
   6539  2019							; 
   6540  2019
   6541  2019				   .L0353		;  if _Bit2_Mario_Fireball_Direction{2} then ballx  =	ballx  +  6 else ballx	=  ballx  -  6
   6542  2019
   6543  2019		       a5 da		      LDA	_Bit2_Mario_Fireball_Direction
   6544  201b		       29 04		      AND	#4
   6545  201d		       f0 0a		      BEQ	.skipL0353
   6546  201f				   .condpart179
   6547  201f		       a5 84		      LDA	ballx
   6548  2021		       18		      CLC
   6549  2022		       69 06		      ADC	#6
   6550  2024		       85 84		      STA	ballx
   6551  2026		       4c 30 30 	      jmp	.skipelse43
   6552  2029				   .skipL0353
   6553  2029		       a5 84		      LDA	ballx
   6554  202b		       38		      SEC
   6555  202c		       e9 06		      SBC	#6
   6556  202e		       85 84		      STA	ballx
   6557  2030				   .skipelse43
   6558  2030				   .
   6559  2030							; 
   6560  2030
   6561  2030				   .L0354		;  bally  =  bally  +	3
   6562  2030
   6563  2030		       a5 89		      LDA	bally
   6564  2032		       18		      CLC
   6565  2033		       69 03		      ADC	#3
   6566  2035		       85 89		      STA	bally
   6567  2037				   .
   6568  2037							; 
   6569  2037
   6570  2037				   .L0355		;  if ballx  >  137 then gosub __Kill_Fireball
   6571  2037
   6572  2037		       a9 89		      LDA	#137
   6573  2039		       c5 84		      CMP	ballx
   6574  203b		       b0 03		      BCS	.skipL0355
   6575  203d				   .condpart180
   6576  203d		       20 6b 36 	      jsr	.__Kill_Fireball
   6577  2040
   6578  2040				   .skipL0355
   6579  2040				   .
   6580  2040							; 
   6581  2040
   6582  2040				   .L0356		;  if ballx  <  17 then gosub __Kill_Fireball
   6583  2040
   6584  2040		       a5 84		      LDA	ballx
   6585  2042		       c9 11		      CMP	#17
   6586  2044		       b0 03		      BCS	.skipL0356
   6587  2046				   .condpart181
   6588  2046		       20 6b 36 	      jsr	.__Kill_Fireball
   6589  2049
   6590  2049				   .skipL0356
   6591  2049				   .
   6592  2049							; 
   6593  2049
   6594  2049				   .L0357		;  if bally  >  96 then gosub __Kill_Fireball
   6595  2049
   6596  2049		       a9 60		      LDA	#96
   6597  204b		       c5 89		      CMP	bally
   6598  204d		       b0 03		      BCS	.skipL0357
   6599  204f				   .condpart182
   6600  204f		       20 6b 36 	      jsr	.__Kill_Fireball
   6601  2052
   6602  2052				   .skipL0357
   6603  2052				   .
   6604  2052							; 
   6605  2052
   6606  2052				   .L0358		;  x  =   ( ballx  -  17 )  / 4  :  y	=  bally / 8
   6607  2052
   6608  2052							; complex statement detected
   6609  2052		       a5 84		      LDA	ballx
   6610  2054		       38		      SEC
   6611  2055		       e9 11		      SBC	#17
   6612  2057		       4a		      lsr
   6613  2058		       4a		      lsr
   6614  2059		       85 eb		      STA	x
   6615  205b		       a5 89		      LDA	bally
   6616  205d		       4a		      lsr
   6617  205e		       4a		      lsr
   6618  205f		       4a		      lsr
   6619  2060		       85 ec		      STA	y
   6620  2062				   .
   6621  2062							; 
   6622  2062
   6623  2062				   .L0359		;  if pfread ( x , y )  then goto __Fireball_Collision
   6624  2062
   6625  2062		       a5 eb		      LDA	x
   6626  2064		       a4 ec		      LDY	y
   6627  2066		       85 ee		      sta	temp7
   6628  2068		       a9 30		      lda	#>(ret_point22-1)
   6629  206a		       48		      pha
   6630  206b		       a9 7d		      lda	#<(ret_point22-1)
   6631  206d		       48		      pha
   6632  206e		       a9 f2		      lda	#>(pfread-1)
   6633  2070		       48		      pha
   6634  2071		       a9 ab		      lda	#<(pfread-1)
   6635  2073		       48		      pha
   6636  2074		       a5 ee		      lda	temp7
   6637  2076		       48		      pha
   6638  2077		       8a		      txa
   6639  2078		       48		      pha
   6640  2079		       a2 08		      ldx	#8
   6641  207b		       4c eb ff 	      jmp	BS_jsr
   6642  207e				   ret_point22
   6643  207e		       d0 03		      BNE	.skipL0359
   6644  2080				   .condpart183
   6645  2080		       4c 86 30 	      jmp	.__Fireball_Collision
   6646  2083
   6647  2083				   .skipL0359
   6648  2083				   .
   6649  2083							; 
   6650  2083
   6651  2083				   .L0360		;  goto __Enemy_Routine
   6652  2083
   6653  2083		       4c b5 30 	      jmp	.__Enemy_Routine
   6654  2086
   6655  2086				   .
   6656  2086							; 
   6657  2086
   6658  2086				   .
   6659  2086							; 
   6660  2086
   6661  2086				   .__Fireball_Collision
   6662  2086							; __Fireball_Collision
   6663  2086
   6664  2086				   .
   6665  2086							; 
   6666  2086
   6667  2086				   .L0361		;  z  =  y  -	1
   6668  2086
   6669  2086		       a5 ec		      LDA	y
   6670  2088		       38		      SEC
   6671  2089		       e9 01		      SBC	#1
   6672  208b		       85 ed		      STA	z
   6673  208d				   .
   6674  208d							; 
   6675  208d
   6676  208d				   .L0362		;  if pfread ( x , z )  then gosub __Kill_Fireball
   6677  208d
   6678  208d		       a5 eb		      LDA	x
   6679  208f		       a4 ed		      LDY	z
   6680  2091		       85 ee		      sta	temp7
   6681  2093		       a9 30		      lda	#>(ret_point23-1)
   6682  2095		       48		      pha
   6683  2096		       a9 a8		      lda	#<(ret_point23-1)
   6684  2098		       48		      pha
   6685  2099		       a9 f2		      lda	#>(pfread-1)
   6686  209b		       48		      pha
   6687  209c		       a9 ab		      lda	#<(pfread-1)
   6688  209e		       48		      pha
   6689  209f		       a5 ee		      lda	temp7
   6690  20a1		       48		      pha
   6691  20a2		       8a		      txa
   6692  20a3		       48		      pha
   6693  20a4		       a2 08		      ldx	#8
   6694  20a6		       4c eb ff 	      jmp	BS_jsr
   6695  20a9				   ret_point23
   6696  20a9		       d0 03		      BNE	.skipL0362
   6697  20ab				   .condpart184
   6698  20ab		       20 6b 36 	      jsr	.__Kill_Fireball
   6699  20ae
   6700  20ae				   .skipL0362
   6701  20ae				   .
   6702  20ae							; 
   6703  20ae
   6704  20ae				   .L0363		;  bally  =  bally  -	6
   6705  20ae
   6706  20ae		       a5 89		      LDA	bally
   6707  20b0		       38		      SEC
   6708  20b1		       e9 06		      SBC	#6
   6709  20b3		       85 89		      STA	bally
   6710  20b5				   .
   6711  20b5							; 
   6712  20b5
   6713  20b5				   .
   6714  20b5							; 
   6715  20b5
   6716  20b5				   .__Enemy_Routine
   6717  20b5							; __Enemy_Routine
   6718  20b5
   6719  20b5				   .
   6720  20b5							; 
   6721  20b5
   6722  20b5				   .
   6723  20b5							; 
   6724  20b5
   6725  20b5				   .
   6726  20b5							; 
   6727  20b5
   6728  20b5				   .
   6729  20b5							; 
   6730  20b5
   6731  20b5				   .
   6732  20b5							; 
   6733  20b5
   6734  20b5				   .L0364		;  if _Moving_Shell_X_Coordinate  >  0  ||  _Moving_Shell_Y_Coordinate  >  0 then gosub __Moving_Shell_Routine
   6735  20b5
   6736  20b5		       a9 00		      LDA	#0
   6737  20b7		       c5 e6		      CMP	_Moving_Shell_X_Coordinate
   6738  20b9		       b0 03		      BCS	.skipL0364
   6739  20bb				   .condpart185
   6740  20bb		       4c c4 30 	      jmp	.condpart186
   6741  20be				   .skipL0364
   6742  20be		       a9 00		      LDA	#0
   6743  20c0		       c5 e7		      CMP	_Moving_Shell_Y_Coordinate
   6744  20c2		       b0 03		      BCS	.skip48OR
   6745  20c4				   .condpart186
   6746  20c4		       20 81 39 	      jsr	.__Moving_Shell_Routine
   6747  20c7
   6748  20c7				   .skip48OR
   6749  20c7				   .
   6750  20c7							; 
   6751  20c7
   6752  20c7				   .L0365		;  if _Moving_Shell_Y_Coordinate  >  0  &&  player1x  >  0 then gosub __Render_Screen bank1
   6753  20c7
   6754  20c7		       a9 00		      LDA	#0
   6755  20c9		       c5 e7		      CMP	_Moving_Shell_Y_Coordinate
   6756  20cb		       b0 1e		      BCS	.skipL0365
   6757  20cd				   .condpart187
   6758  20cd		       a9 00		      LDA	#0
   6759  20cf		       c5 81		      CMP	player1x
   6760  20d1		       b0 18		      BCS	.skip187then
   6761  20d3				   .condpart188
   6762  20d3		       85 ee		      sta	temp7
   6763  20d5		       a9 30		      lda	#>(ret_point24-1)
   6764  20d7		       48		      pha
   6765  20d8		       a9 ea		      lda	#<(ret_point24-1)
   6766  20da		       48		      pha
   6767  20db		       a9 1d		      lda	#>(.__Render_Screen-1)
   6768  20dd		       48		      pha
   6769  20de		       a9 ab		      lda	#<(.__Render_Screen-1)
   6770  20e0		       48		      pha
   6771  20e1		       a5 ee		      lda	temp7
   6772  20e3		       48		      pha
   6773  20e4		       8a		      txa
   6774  20e5		       48		      pha
   6775  20e6		       a2 01		      ldx	#1
   6776  20e8		       4c eb ff 	      jmp	BS_jsr
   6777  20eb				   ret_point24
   6778  20eb				   .skip187then
   6779  20eb				   .skipL0365
   6780  20eb				   .
   6781  20eb							; 
   6782  20eb
   6783  20eb				   .
   6784  20eb							; 
   6785  20eb
   6786  20eb				   .
   6787  20eb							; 
   6788  20eb
   6789  20eb				   .
   6790  20eb							; 
   6791  20eb
   6792  20eb				   .
   6793  20eb							; 
   6794  20eb
   6795  20eb				   .L0366		;  if player1x  =  0 then goto __Main_Loop bank1
   6796  20eb
   6797  20eb		       a5 81		      LDA	player1x
   6798  20ed		       c9 00		      CMP	#0
   6799  20ef		       d0 12		      BNE	.skipL0366
   6800  20f1				   .condpart189
   6801  20f1		       85 ee		      sta	temp7
   6802  20f3		       a9 10		      lda	#>(.__Main_Loop-1)
   6803  20f5		       48		      pha
   6804  20f6		       a9 b0		      lda	#<(.__Main_Loop-1)
   6805  20f8		       48		      pha
   6806  20f9		       a5 ee		      lda	temp7
   6807  20fb		       48		      pha
   6808  20fc		       8a		      txa
   6809  20fd		       48		      pha
   6810  20fe		       a2 01		      ldx	#1
   6811  2100		       4c eb ff 	      jmp	BS_jsr
   6812  2103				   .skipL0366
   6813  2103				   .
   6814  2103							; 
   6815  2103
   6816  2103				   .
   6817  2103							; 
   6818  2103
   6819  2103				   .
   6820  2103							; 
   6821  2103
   6822  2103				   .
   6823  2103							; 
   6824  2103
   6825  2103				   .L0367		;  if player1x  >  136  ||  player1x  <  17 then gosub __Kill_Enemy  :  goto __Main_Loop bank1
   6826  2103
   6827  2103		       a9 88		      LDA	#136
   6828  2105		       c5 81		      CMP	player1x
   6829  2107		       b0 03		      BCS	.skipL0367
   6830  2109				   .condpart190
   6831  2109		       4c 12 31 	      jmp	.condpart191
   6832  210c				   .skipL0367
   6833  210c		       a5 81		      LDA	player1x
   6834  210e		       c9 11		      CMP	#17
   6835  2110		       b0 15		      BCS	.skip50OR
   6836  2112				   .condpart191
   6837  2112		       20 d6 38 	      jsr	.__Kill_Enemy
   6838  2115		       85 ee		      sta	temp7
   6839  2117		       a9 10		      lda	#>(.__Main_Loop-1)
   6840  2119		       48		      pha
   6841  211a		       a9 b0		      lda	#<(.__Main_Loop-1)
   6842  211c		       48		      pha
   6843  211d		       a5 ee		      lda	temp7
   6844  211f		       48		      pha
   6845  2120		       8a		      txa
   6846  2121		       48		      pha
   6847  2122		       a2 01		      ldx	#1
   6848  2124		       4c eb ff 	      jmp	BS_jsr
   6849  2127				   .skip50OR
   6850  2127				   .
   6851  2127							; 
   6852  2127
   6853  2127				   .
   6854  2127							; 
   6855  2127
   6856  2127				   .
   6857  2127							; 
   6858  2127
   6859  2127				   .
   6860  2127							; 
   6861  2127
   6862  2127				   .L0368		;  if _Bit4_Enemy_Dead_Flag{4} then goto __Enemy_Death_Routine
   6863  2127
   6864  2127		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
   6865  2129		       29 10		      AND	#16
   6866  212b		       f0 03		      BEQ	.skipL0368
   6867  212d				   .condpart192
   6868  212d		       4c 4a 39 	      jmp	.__Enemy_Death_Routine
   6869  2130
   6870  2130				   .skipL0368
   6871  2130				   .
   6872  2130							; 
   6873  2130
   6874  2130				   .
   6875  2130							; 
   6876  2130
   6877  2130				   .
   6878  2130							; 
   6879  2130
   6880  2130				   .
   6881  2130							; 
   6882  2130
   6883  2130				   .
   6884  2130							; 
   6885  2130
   6886  2130				   .L0369		;  if _Enemy_Type  =  _Bowser_Jr then goto __Bowser_Jr bank4
   6887  2130
   6888  2130		       a5 dc		      LDA	_Enemy_Type
   6889  2132		       c9 40		      CMP	#_Bowser_Jr
   6890  2134		       d0 12		      BNE	.skipL0369
   6891  2136				   .condpart193
   6892  2136		       85 ee		      sta	temp7
   6893  2138		       a9 74		      lda	#>(.__Bowser_Jr-1)
   6894  213a		       48		      pha
   6895  213b		       a9 fd		      lda	#<(.__Bowser_Jr-1)
   6896  213d		       48		      pha
   6897  213e		       a5 ee		      lda	temp7
   6898  2140		       48		      pha
   6899  2141		       8a		      txa
   6900  2142		       48		      pha
   6901  2143		       a2 04		      ldx	#4
   6902  2145		       4c eb ff 	      jmp	BS_jsr
   6903  2148				   .skipL0369
   6904  2148				   .
   6905  2148							; 
   6906  2148
   6907  2148				   .L0370		;  if _Enemy_Type  =  _Thwomp	||  _Enemy_Type  =  _Two_Thwomps then goto __Thwomp bank8
   6908  2148
   6909  2148		       a5 dc		      LDA	_Enemy_Type
   6910  214a		       c9 28		      CMP	#_Thwomp
   6911  214c		       d0 03		      BNE	.skipL0370
   6912  214e				   .condpart194
   6913  214e		       4c 57 31 	      jmp	.condpart195
   6914  2151				   .skipL0370
   6915  2151		       a5 dc		      LDA	_Enemy_Type
   6916  2153		       c9 2c		      CMP	#_Two_Thwomps
   6917  2155		       d0 12		      BNE	.skip51OR
   6918  2157				   .condpart195
   6919  2157		       85 ee		      sta	temp7
   6920  2159		       a9 f4		      lda	#>(.__Thwomp-1)
   6921  215b		       48		      pha
   6922  215c		       a9 d7		      lda	#<(.__Thwomp-1)
   6923  215e		       48		      pha
   6924  215f		       a5 ee		      lda	temp7
   6925  2161		       48		      pha
   6926  2162		       8a		      txa
   6927  2163		       48		      pha
   6928  2164		       a2 08		      ldx	#8
   6929  2166		       4c eb ff 	      jmp	BS_jsr
   6930  2169				   .skip51OR
   6931  2169				   .
   6932  2169							; 
   6933  2169
   6934  2169				   .L0371		;  if _Enemy_Type  =  _Flying_Red_Koopa then goto __Red_Flying_Koopa
   6935  2169
   6936  2169		       a5 dc		      LDA	_Enemy_Type
   6937  216b		       c9 0e		      CMP	#_Flying_Red_Koopa
   6938  216d		       d0 03		      BNE	.skipL0371
   6939  216f				   .condpart196
   6940  216f		       4c 82 34 	      jmp	.__Red_Flying_Koopa
   6941  2172
   6942  2172				   .skipL0371
   6943  2172				   .
   6944  2172							; 
   6945  2172
   6946  2172				   .L0372		;  if _Enemy_Type  =  _Spiney_Ball then goto __Spiney_Ball
   6947  2172
   6948  2172		       a5 dc		      LDA	_Enemy_Type
   6949  2174		       c9 10		      CMP	#_Spiney_Ball
   6950  2176		       d0 03		      BNE	.skipL0372
   6951  2178				   .condpart197
   6952  2178		       4c c5 34 	      jmp	.__Spiney_Ball
   6953  217b
   6954  217b				   .skipL0372
   6955  217b				   .
   6956  217b							; 
   6957  217b
   6958  217b				   .L0373		;  if _Enemy_Type  =  _Fireball_Enemy then goto __Fireball_Enemy
   6959  217b
   6960  217b		       a5 dc		      LDA	_Enemy_Type
   6961  217d		       c9 12		      CMP	#_Fireball_Enemy
   6962  217f		       d0 03		      BNE	.skipL0373
   6963  2181				   .condpart198
   6964  2181		       4c 16 35 	      jmp	.__Fireball_Enemy
   6965  2184
   6966  2184				   .skipL0373
   6967  2184				   .
   6968  2184							; 
   6969  2184
   6970  2184				   .L0374		;  if _Enemy_Type  =  _Pirahna_Plant then goto __Pirahna_Plant
   6971  2184
   6972  2184		       a5 dc		      LDA	_Enemy_Type
   6973  2186		       c9 1e		      CMP	#_Pirahna_Plant
   6974  2188		       d0 03		      BNE	.skipL0374
   6975  218a				   .condpart199
   6976  218a		       4c 96 35 	      jmp	.__Pirahna_Plant
   6977  218d
   6978  218d				   .skipL0374
   6979  218d				   .
   6980  218d							; 
   6981  218d
   6982  218d				   .L0375		;  if _Enemy_Type  =  _Kinetic_Platforms then goto __Kinetic_Platform
   6983  218d
   6984  218d		       a5 dc		      LDA	_Enemy_Type
   6985  218f		       c9 1c		      CMP	#_Kinetic_Platforms
   6986  2191		       d0 03		      BNE	.skipL0375
   6987  2193				   .condpart200
   6988  2193		       4c ff 35 	      jmp	.__Kinetic_Platform
   6989  2196
   6990  2196				   .skipL0375
   6991  2196				   .
   6992  2196							; 
   6993  2196
   6994  2196				   .L0376		;  if _Enemy_Type  =  _Flagpole then goto __Enemy_Collision_Check
   6995  2196
   6996  2196		       a5 dc		      LDA	_Enemy_Type
   6997  2198		       c9 14		      CMP	#_Flagpole
   6998  219a		       d0 03		      BNE	.skipL0376
   6999  219c				   .condpart201
   7000  219c		       4c 12 32 	      jmp	.__Enemy_Collision_Check
   7001  219f
   7002  219f				   .skipL0376
   7003  219f				   .
   7004  219f							; 
   7005  219f
   7006  219f				   .L0377		;  if _Enemy_Type  >  _Flagpole  &&  _Enemy_Type  <  _Kinetic_Platforms then goto __Special_Item
   7007  219f
   7008  219f		       a9 14		      LDA	#_Flagpole
   7009  21a1		       c5 dc		      CMP	_Enemy_Type
   7010  21a3		       b0 09		      BCS	.skipL0377
   7011  21a5				   .condpart202
   7012  21a5		       a5 dc		      LDA	_Enemy_Type
   7013  21a7		       c9 1c		      CMP	#_Kinetic_Platforms
   7014  21a9		       b0 03		      BCS	.skip202then
   7015  21ab				   .condpart203
   7016  21ab		       4c 17 3c 	      jmp	.__Special_Item
   7017  21ae
   7018  21ae				   .skip202then
   7019  21ae				   .skipL0377
   7020  21ae				   .
   7021  21ae							; 
   7022  21ae
   7023  21ae				   .L0378		;  if _Enemy_Type  >  _P_Plant_31  &&	_Enemy_Type  <	_P_Plant_39 then goto __Enemy_Collision_Check
   7024  21ae
   7025  21ae		       a9 1f		      LDA	#_P_Plant_31
   7026  21b0		       c5 dc		      CMP	_Enemy_Type
   7027  21b2		       b0 09		      BCS	.skipL0378
   7028  21b4				   .condpart204
   7029  21b4		       a5 dc		      LDA	_Enemy_Type
   7030  21b6		       c9 27		      CMP	#_P_Plant_39
   7031  21b8		       b0 03		      BCS	.skip204then
   7032  21ba				   .condpart205
   7033  21ba		       4c 12 32 	      jmp	.__Enemy_Collision_Check
   7034  21bd
   7035  21bd				   .skip204then
   7036  21bd				   .skipL0378
   7037  21bd				   .
   7038  21bd							; 
   7039  21bd
   7040  21bd				   .
   7041  21bd							; 
   7042  21bd
   7043  21bd				   .
   7044  21bd							; 
   7045  21bd
   7046  21bd				   .
   7047  21bd							; 
   7048  21bd
   7049  21bd				   .L0379		;  if _Enemy_Type  =  _Bullet_Bill then x  =  2 else x  =  1
   7050  21bd
   7051  21bd		       a5 dc		      LDA	_Enemy_Type
   7052  21bf		       c9 0c		      CMP	#_Bullet_Bill
   7053  21c1		       d0 07		      BNE	.skipL0379
   7054  21c3				   .condpart206
   7055  21c3		       a9 02		      LDA	#2
   7056  21c5		       85 eb		      STA	x
   7057  21c7		       4c ce 31 	      jmp	.skipelse44
   7058  21ca				   .skipL0379
   7059  21ca		       a9 01		      LDA	#1
   7060  21cc		       85 eb		      STA	x
   7061  21ce				   .skipelse44
   7062  21ce				   .
   7063  21ce							; 
   7064  21ce
   7065  21ce				   .L0380		;  if _Bit7_2nd_Quest{7} then x  =  x	*  2
   7066  21ce
   7067  21ce		       24 d9		      BIT	_Bit7_2nd_Quest
   7068  21d0		       10 05		      BPL	.skipL0380
   7069  21d2				   .condpart207
   7070  21d2		       a5 eb		      LDA	x
   7071  21d4		       0a		      asl
   7072  21d5		       85 eb		      STA	x
   7073  21d7				   .skipL0380
   7074  21d7				   .
   7075  21d7							; 
   7076  21d7
   7077  21d7				   .L0381		;  if _Bit3_Enemy_Direction{3} then player1x  =  player1x  +  x else player1x	=  player1x  -	x
   7078  21d7
   7079  21d7		       a5 da		      LDA	_Bit3_Enemy_Direction
   7080  21d9		       29 08		      AND	#8
   7081  21db		       f0 0a		      BEQ	.skipL0381
   7082  21dd				   .condpart208
   7083  21dd		       a5 81		      LDA	player1x
   7084  21df		       18		      CLC
   7085  21e0		       65 eb		      ADC	x
   7086  21e2		       85 81		      STA	player1x
   7087  21e4		       4c ee 31 	      jmp	.skipelse45
   7088  21e7				   .skipL0381
   7089  21e7		       a5 81		      LDA	player1x
   7090  21e9		       38		      SEC
   7091  21ea		       e5 eb		      SBC	x
   7092  21ec		       85 81		      STA	player1x
   7093  21ee				   .skipelse45
   7094  21ee				   .
   7095  21ee							; 
   7096  21ee
   7097  21ee				   .L0382		;  if player1x  <  17	||  player1x  >  137 then gosub __Kill_Enemy  :  goto __Main_Loop bank1
   7098  21ee
   7099  21ee		       a5 81		      LDA	player1x
   7100  21f0		       c9 11		      CMP	#17
   7101  21f2		       b0 03		      BCS	.skipL0382
   7102  21f4				   .condpart209
   7103  21f4		       4c fd 31 	      jmp	.condpart210
   7104  21f7				   .skipL0382
   7105  21f7		       a9 89		      LDA	#137
   7106  21f9		       c5 81		      CMP	player1x
   7107  21fb		       b0 15		      BCS	.skip54OR
   7108  21fd				   .condpart210
   7109  21fd		       20 d6 38 	      jsr	.__Kill_Enemy
   7110  2200		       85 ee		      sta	temp7
   7111  2202		       a9 10		      lda	#>(.__Main_Loop-1)
   7112  2204		       48		      pha
   7113  2205		       a9 b0		      lda	#<(.__Main_Loop-1)
   7114  2207		       48		      pha
   7115  2208		       a5 ee		      lda	temp7
   7116  220a		       48		      pha
   7117  220b		       8a		      txa
   7118  220c		       48		      pha
   7119  220d		       a2 01		      ldx	#1
   7120  220f		       4c eb ff 	      jmp	BS_jsr
   7121  2212				   .skip54OR
   7122  2212				   .
   7123  2212							; 
   7124  2212
   7125  2212				   .
   7126  2212							; 
   7127  2212
   7128  2212				   .
   7129  2212							; 
   7130  2212
   7131  2212				   .
   7132  2212							; 
   7133  2212
   7134  2212				   .
   7135  2212							; 
   7136  2212
   7137  2212				   .
   7138  2212							; 
   7139  2212
   7140  2212				   .
   7141  2212							; 
   7142  2212
   7143  2212				   .__Enemy_Collision_Check
   7144  2212							; __Enemy_Collision_Check
   7145  2212
   7146  2212				   .
   7147  2212							; 
   7148  2212
   7149  2212				   .
   7150  2212							; 
   7151  2212
   7152  2212				   .
   7153  2212							; 
   7154  2212
   7155  2212				   .
   7156  2212							; 
   7157  2212
   7158  2212				   .
   7159  2212							; 
   7160  2212
   7161  2212				   .L0383		;  if _Enemy_Type  >  _Red_Koopa  &&  _Enemy_Type  <  _Beetle_Shell then goto __Enemy_LR_Check
   7162  2212
   7163  2212		       a9 08		      LDA	#_Red_Koopa
   7164  2214		       c5 dc		      CMP	_Enemy_Type
   7165  2216		       b0 09		      BCS	.skipL0383
   7166  2218				   .condpart211
   7167  2218		       a5 dc		      LDA	_Enemy_Type
   7168  221a		       c9 20		      CMP	#_Beetle_Shell
   7169  221c		       b0 03		      BCS	.skip211then
   7170  221e				   .condpart212
   7171  221e		       4c fd 32 	      jmp	.__Enemy_LR_Check
   7172  2221
   7173  2221				   .skip211then
   7174  2221				   .skipL0383
   7175  2221				   .
   7176  2221							; 
   7177  2221
   7178  2221				   .L0384		;  if _Enemy_Momentum	<  7 then _Enemy_Momentum  =  _Enemy_Momentum  +  1
   7179  2221
   7180  2221		       a5 dd		      LDA	_Enemy_Momentum
   7181  2223		       c9 07		      CMP	#7
   7182  2225		       b0 02		      BCS	.skipL0384
   7183  2227				   .condpart213
   7184  2227		       e6 dd		      INC	_Enemy_Momentum
   7185  2229				   .skipL0384
   7186  2229				   .
   7187  2229							; 
   7188  2229
   7189  2229				   .L0385		;  player1y  =  player1y  +  _Enemy_Momentum
   7190  2229
   7191  2229		       a5 86		      LDA	player1y
   7192  222b		       18		      CLC
   7193  222c		       65 dd		      ADC	_Enemy_Momentum
   7194  222e		       85 86		      STA	player1y
   7195  2230				   .
   7196  2230							; 
   7197  2230
   7198  2230				   .L0386		;  if _Bit3_Enemy_Direction{3} then x	=   ( player1x	-  17 )  / 4 else x  =	 ( player1x  -	9 )  / 4
   7199  2230
   7200  2230		       a5 da		      LDA	_Bit3_Enemy_Direction
   7201  2232		       29 08		      AND	#8
   7202  2234		       f0 0c		      BEQ	.skipL0386
   7203  2236				   .condpart214
   7204  2236							; complex statement detected
   7205  2236		       a5 81		      LDA	player1x
   7206  2238		       38		      SEC
   7207  2239		       e9 11		      SBC	#17
   7208  223b		       4a		      lsr
   7209  223c		       4a		      lsr
   7210  223d		       85 eb		      STA	x
   7211  223f		       4c 4b 32 	      jmp	.skipelse46
   7212  2242				   .skipL0386
   7213  2242							; complex statement detected
   7214  2242		       a5 81		      LDA	player1x
   7215  2244		       38		      SEC
   7216  2245		       e9 09		      SBC	#9
   7217  2247		       4a		      lsr
   7218  2248		       4a		      lsr
   7219  2249		       85 eb		      STA	x
   7220  224b				   .skipelse46
   7221  224b				   .
   7222  224b							; 
   7223  224b
   7224  224b				   .L0387		;  if _Bit3_Enemy_Direction{3}  &&  _Enemy_Type  =  _Red_Koopa then x	=  x  +  1
   7225  224b
   7226  224b		       a5 da		      LDA	_Bit3_Enemy_Direction
   7227  224d		       29 08		      AND	#8
   7228  224f		       f0 08		      BEQ	.skipL0387
   7229  2251				   .condpart215
   7230  2251		       a5 dc		      LDA	_Enemy_Type
   7231  2253		       c9 08		      CMP	#_Red_Koopa
   7232  2255		       d0 02		      BNE	.skip215then
   7233  2257				   .condpart216
   7234  2257		       e6 eb		      INC	x
   7235  2259				   .skip215then
   7236  2259				   .skipL0387
   7237  2259				   .
   7238  2259							; 
   7239  2259
   7240  2259				   .L0388		;  if !_Bit3_Enemy_Direction{3}  &&  _Enemy_Type  =  _Red_Koopa then x  =  x  -  1
   7241  2259
   7242  2259		       a5 da		      LDA	_Bit3_Enemy_Direction
   7243  225b		       29 08		      AND	#8
   7244  225d		       d0 08		      BNE	.skipL0388
   7245  225f				   .condpart217
   7246  225f		       a5 dc		      LDA	_Enemy_Type
   7247  2261		       c9 08		      CMP	#_Red_Koopa
   7248  2263		       d0 02		      BNE	.skip217then
   7249  2265				   .condpart218
   7250  2265		       c6 eb		      DEC	x
   7251  2267				   .skip217then
   7252  2267				   .skipL0388
   7253  2267				   .
   7254  2267							; 
   7255  2267
   7256  2267				   .L0389		;  y  =   ( player1y  +  1 )  / 8
   7257  2267
   7258  2267							; complex statement detected
   7259  2267		       a5 86		      LDA	player1y
   7260  2269		       18		      CLC
   7261  226a		       69 01		      ADC	#1
   7262  226c		       4a		      lsr
   7263  226d		       4a		      lsr
   7264  226e		       4a		      lsr
   7265  226f		       85 ec		      STA	y
   7266  2271				   .
   7267  2271							; 
   7268  2271
   7269  2271				   .L0390		;  if pfread ( x , y )  then player1y	=   ( y  *  8 )   -  1	:  _Enemy_Momentum  =  0  :  goto __Enemy_LR_Check
   7270  2271
   7271  2271		       a5 eb		      LDA	x
   7272  2273		       a4 ec		      LDY	y
   7273  2275		       85 ee		      sta	temp7
   7274  2277		       a9 32		      lda	#>(ret_point25-1)
   7275  2279		       48		      pha
   7276  227a		       a9 8c		      lda	#<(ret_point25-1)
   7277  227c		       48		      pha
   7278  227d		       a9 f2		      lda	#>(pfread-1)
   7279  227f		       48		      pha
   7280  2280		       a9 ab		      lda	#<(pfread-1)
   7281  2282		       48		      pha
   7282  2283		       a5 ee		      lda	temp7
   7283  2285		       48		      pha
   7284  2286		       8a		      txa
   7285  2287		       48		      pha
   7286  2288		       a2 08		      ldx	#8
   7287  228a		       4c eb ff 	      jmp	BS_jsr
   7288  228d				   ret_point25
   7289  228d		       d0 11		      BNE	.skipL0390
   7290  228f				   .condpart219
   7291  228f							; complex statement detected
   7292  228f		       a5 ec		      LDA	y
   7293  2291		       0a		      asl
   7294  2292		       0a		      asl
   7295  2293		       0a		      asl
   7296  2294		       38		      SEC
   7297  2295		       e9 01		      SBC	#1
   7298  2297		       85 86		      STA	player1y
   7299  2299		       a9 00		      LDA	#0
   7300  229b		       85 dd		      STA	_Enemy_Momentum
   7301  229d		       4c fd 32 	      jmp	.__Enemy_LR_Check
   7302  22a0
   7303  22a0				   .skipL0390
   7304  22a0				   .
   7305  22a0							; 
   7306  22a0
   7307  22a0				   .
   7308  22a0							; 
   7309  22a0
   7310  22a0				   .
   7311  22a0							; 
   7312  22a0
   7313  22a0				   .
   7314  22a0							; 
   7315  22a0
   7316  22a0				   .L0391		;  if _Enemy_Type  =  _Red_Koopa  &&  _Enemy_Momentum	<>  8 then gosub __Fix_Enemy  :  player1y  =   ( y  *  8 )   -	1  :  _Enemy_Momentum  =  0  :	goto __Enemy_LR_Check
   7317  22a0
   7318  22a0		       a5 dc		      LDA	_Enemy_Type
   7319  22a2		       c9 08		      CMP	#_Red_Koopa
   7320  22a4		       d0 1a		      BNE	.skipL0391
   7321  22a6				   .condpart220
   7322  22a6		       a5 dd		      LDA	_Enemy_Momentum
   7323  22a8		       c9 08		      CMP	#8
   7324  22aa		       f0 14		      BEQ	.skip220then
   7325  22ac				   .condpart221
   7326  22ac		       20 f3 38 	      jsr	.__Fix_Enemy
   7327  22af							; complex statement detected
   7328  22af		       a5 ec		      LDA	y
   7329  22b1		       0a		      asl
   7330  22b2		       0a		      asl
   7331  22b3		       0a		      asl
   7332  22b4		       38		      SEC
   7333  22b5		       e9 01		      SBC	#1
   7334  22b7		       85 86		      STA	player1y
   7335  22b9		       a9 00		      LDA	#0
   7336  22bb		       85 dd		      STA	_Enemy_Momentum
   7337  22bd		       4c fd 32 	      jmp	.__Enemy_LR_Check
   7338  22c0
   7339  22c0				   .skip220then
   7340  22c0				   .skipL0391
   7341  22c0				   .
   7342  22c0							; 
   7343  22c0
   7344  22c0				   .
   7345  22c0							; 
   7346  22c0
   7347  22c0				   .
   7348  22c0							; 
   7349  22c0
   7350  22c0				   .
   7351  22c0							; 
   7352  22c0
   7353  22c0				   .
   7354  22c0							; 
   7355  22c0
   7356  22c0				   .
   7357  22c0							; 
   7358  22c0
   7359  22c0				   .L0392		;  if _Enemy_Type  =  _Two_Goombas then player1x  =  player1x	+  16  :  _Enemy_Type  =  _Goomba
   7360  22c0
   7361  22c0		       a5 dc		      LDA	_Enemy_Type
   7362  22c2		       c9 2a		      CMP	#_Two_Goombas
   7363  22c4		       d0 0b		      BNE	.skipL0392
   7364  22c6				   .condpart222
   7365  22c6		       a5 81		      LDA	player1x
   7366  22c8		       18		      CLC
   7367  22c9		       69 10		      ADC	#16
   7368  22cb		       85 81		      STA	player1x
   7369  22cd		       a9 00		      LDA	#_Goomba
   7370  22cf		       85 dc		      STA	_Enemy_Type
   7371  22d1				   .skipL0392
   7372  22d1				   .
   7373  22d1							; 
   7374  22d1
   7375  22d1				   .L0393		;  if _Enemy_Type  =  _Two_Spineys then player1x  =  player1x	+  16  :  _Enemy_Type  =  _Spiney
   7376  22d1
   7377  22d1		       a5 dc		      LDA	_Enemy_Type
   7378  22d3		       c9 2e		      CMP	#_Two_Spineys
   7379  22d5		       d0 0b		      BNE	.skipL0393
   7380  22d7				   .condpart223
   7381  22d7		       a5 81		      LDA	player1x
   7382  22d9		       18		      CLC
   7383  22da		       69 10		      ADC	#16
   7384  22dc		       85 81		      STA	player1x
   7385  22de		       a9 06		      LDA	#_Spiney
   7386  22e0		       85 dc		      STA	_Enemy_Type
   7387  22e2				   .skipL0393
   7388  22e2				   .
   7389  22e2							; 
   7390  22e2
   7391  22e2				   .L0394		;  if player1y  >  90 then gosub __Kill_Enemy	:  goto __Main_Loop bank1
   7392  22e2
   7393  22e2		       a9 5a		      LDA	#90
   7394  22e4		       c5 86		      CMP	player1y
   7395  22e6		       b0 15		      BCS	.skipL0394
   7396  22e8				   .condpart224
   7397  22e8		       20 d6 38 	      jsr	.__Kill_Enemy
   7398  22eb		       85 ee		      sta	temp7
   7399  22ed		       a9 10		      lda	#>(.__Main_Loop-1)
   7400  22ef		       48		      pha
   7401  22f0		       a9 b0		      lda	#<(.__Main_Loop-1)
   7402  22f2		       48		      pha
   7403  22f3		       a5 ee		      lda	temp7
   7404  22f5		       48		      pha
   7405  22f6		       8a		      txa
   7406  22f7		       48		      pha
   7407  22f8		       a2 01		      ldx	#1
   7408  22fa		       4c eb ff 	      jmp	BS_jsr
   7409  22fd				   .skipL0394
   7410  22fd				   .
   7411  22fd							; 
   7412  22fd
   7413  22fd				   .__Enemy_LR_Check
   7414  22fd							; __Enemy_LR_Check
   7415  22fd
   7416  22fd				   .
   7417  22fd							; 
   7418  22fd
   7419  22fd				   .
   7420  22fd							; 
   7421  22fd
   7422  22fd				   .
   7423  22fd							; 
   7424  22fd
   7425  22fd				   .L0395		;  if _Enemy_Type  =  _Bullet_Bill then goto __Enemy_End_Move
   7426  22fd
   7427  22fd		       a5 dc		      LDA	_Enemy_Type
   7428  22ff		       c9 0c		      CMP	#_Bullet_Bill
   7429  2301		       d0 03		      BNE	.skipL0395
   7430  2303				   .condpart225
   7431  2303		       4c 10 33 	      jmp	.__Enemy_End_Move
   7432  2306
   7433  2306				   .skipL0395
   7434  2306				   .
   7435  2306							; 
   7436  2306
   7437  2306				   .L0396		;  if !collision(playfield,player1) then goto __Enemy_End_Move
   7438  2306
   7439  2306		       24 03		      bit	CXP1FB
   7440  2308		       30 03		      BMI	.skipL0396
   7441  230a				   .condpart226
   7442  230a		       4c 10 33 	      jmp	.__Enemy_End_Move
   7443  230d
   7444  230d				   .skipL0396
   7445  230d				   .
   7446  230d							; 
   7447  230d
   7448  230d				   .L0397		;  gosub __Fix_Enemy
   7449  230d
   7450  230d		       20 f3 38 	      jsr	.__Fix_Enemy
   7451  2310
   7452  2310				   .
   7453  2310							; 
   7454  2310
   7455  2310				   .
   7456  2310							; 
   7457  2310
   7458  2310				   .__Enemy_End_Move
   7459  2310							; __Enemy_End_Move
   7460  2310
   7461  2310				   .
   7462  2310							; 
   7463  2310
   7464  2310				   .
   7465  2310							; 
   7466  2310
   7467  2310				   .
   7468  2310							; 
   7469  2310
   7470  2310				   .L0398		;  if _Enemy_Type  >  29  &&  _Enemy_Type  <  _Two_Goombas then goto __Enemy_End_Move_32
   7471  2310
   7472  2310		       a9 1d		      LDA	#29
   7473  2312		       c5 dc		      CMP	_Enemy_Type
   7474  2314		       b0 09		      BCS	.skipL0398
   7475  2316				   .condpart227
   7476  2316		       a5 dc		      LDA	_Enemy_Type
   7477  2318		       c9 2a		      CMP	#_Two_Goombas
   7478  231a		       b0 03		      BCS	.skip227then
   7479  231c				   .condpart228
   7480  231c		       4c 11 34 	      jmp	.__Enemy_End_Move_32
   7481  231f
   7482  231f				   .skip227then
   7483  231f				   .skipL0398
   7484  231f				   .
   7485  231f							; 
   7486  231f
   7487  231f				   .L0399		;  if _Animation_Timer  >  3  &&  !_Bit4_Enemy_Dead_Flag{4} then x  =	_Enemy_Type  +	1 else x  =  _Enemy_Type
   7488  231f
   7489  231f		       a9 03		      LDA	#3
   7490  2321		       c5 d4		      CMP	_Animation_Timer
   7491  2323		       b0 10		      BCS	.skipL0399
   7492  2325				   .condpart229
   7493  2325		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
   7494  2327		       29 10		      AND	#16
   7495  2329		       d0 0a		      BNE	.skip229then
   7496  232b				   .condpart230
   7497  232b		       a5 dc		      LDA	_Enemy_Type
   7498  232d		       18		      CLC
   7499  232e		       69 01		      ADC	#1
   7500  2330		       85 eb		      STA	x
   7501  2332		       4c 39 33 	      jmp	.skipelse47
   7502  2335				   .skip229then
   7503  2335				   .skipL0399
   7504  2335		       a5 dc		      LDA	_Enemy_Type
   7505  2337		       85 eb		      STA	x
   7506  2339				   .skipelse47
   7507  2339				   .
   7508  2339							; 
   7509  2339
   7510  2339				   .L0400		;  if x  =  42  ||  x	=  43 then x  =  x  -  42
   7511  2339
   7512  2339		       a5 eb		      LDA	x
   7513  233b		       c9 2a		      CMP	#42
   7514  233d		       d0 03		      BNE	.skipL0400
   7515  233f				   .condpart231
   7516  233f		       4c 48 33 	      jmp	.condpart232
   7517  2342				   .skipL0400
   7518  2342		       a5 eb		      LDA	x
   7519  2344		       c9 2b		      CMP	#43
   7520  2346		       d0 07		      BNE	.skip61OR
   7521  2348				   .condpart232
   7522  2348		       a5 eb		      LDA	x
   7523  234a		       38		      SEC
   7524  234b		       e9 2a		      SBC	#42
   7525  234d		       85 eb		      STA	x
   7526  234f				   .skip61OR
   7527  234f				   .
   7528  234f							; 
   7529  234f
   7530  234f				   .L0401		;  if x  =  46  ||  x	=  47 then x  =  x  -  40
   7531  234f
   7532  234f		       a5 eb		      LDA	x
   7533  2351		       c9 2e		      CMP	#46
   7534  2353		       d0 03		      BNE	.skipL0401
   7535  2355				   .condpart233
   7536  2355		       4c 5e 33 	      jmp	.condpart234
   7537  2358				   .skipL0401
   7538  2358		       a5 eb		      LDA	x
   7539  235a		       c9 2f		      CMP	#47
   7540  235c		       d0 07		      BNE	.skip62OR
   7541  235e				   .condpart234
   7542  235e		       a5 eb		      LDA	x
   7543  2360		       38		      SEC
   7544  2361		       e9 28		      SBC	#40
   7545  2363		       85 eb		      STA	x
   7546  2365				   .skip62OR
   7547  2365				   .
   7548  2365							; 
   7549  2365
   7550  2365				   .L0402		;  on x gosub __Goomba_Color __Goomba_Color __Green_Koopa_Color __Green_Koopa_Color __Beetle_Color __Beetle_Color __SpineyC __SpineyC __Red_Koopa_Color __Red_Koopa_Color __Green_Koopa_Color __Green_Koopa_Color __Bullet_Bill __Bullet_Bill __Red_Koopa_Color __Red_Koopa_Color __Spny_Ball_Color __Spny_Ball_Color __Fireball_Color __Fireball_Color __Flagpole __Flagpole __CoinC __CoinC __StarC1 __StarC2 __1UPC __1UPC __PlatformC __PlatformC
   7551  2365
   7552  2365		       a9 33		      lda	#>(ongosub5-1)
   7553  2367		       48		      PHA
   7554  2368		       a9 b1		      lda	#<(ongosub5-1)
   7555  236a		       48		      PHA
   7556  236b		       a6 eb		      LDX	x
   7557  236d		       bd 76 33 	      LDA	.L0402jumptablehi,x
   7558  2370		       48		      PHA
   7559  2371		       bd 94 33 	      LDA	.L0402jumptablelo,x
   7560  2374		       48		      PHA
   7561  2375		       60		      RTS
   7562  2376				   .L0402jumptablehi
   7563  2376		       3d		      .byte.b	>(.__Goomba_Color-1)
   7564  2377		       3d		      .byte.b	>(.__Goomba_Color-1)
   7565  2378		       3e		      .byte.b	>(.__Green_Koopa_Color-1)
   7566  2379		       3e		      .byte.b	>(.__Green_Koopa_Color-1)
   7567  237a		       3d		      .byte.b	>(.__Beetle_Color-1)
   7568  237b		       3d		      .byte.b	>(.__Beetle_Color-1)
   7569  237c		       3e		      .byte.b	>(.__SpineyC-1)
   7570  237d		       3e		      .byte.b	>(.__SpineyC-1)
   7571  237e		       3e		      .byte.b	>(.__Red_Koopa_Color-1)
   7572  237f		       3e		      .byte.b	>(.__Red_Koopa_Color-1)
   7573  2380		       3e		      .byte.b	>(.__Green_Koopa_Color-1)
   7574  2381		       3e		      .byte.b	>(.__Green_Koopa_Color-1)
   7575  2382		       3e		      .byte.b	>(.__Bullet_Bill-1)
   7576  2383		       3e		      .byte.b	>(.__Bullet_Bill-1)
   7577  2384		       3e		      .byte.b	>(.__Red_Koopa_Color-1)
   7578  2385		       3e		      .byte.b	>(.__Red_Koopa_Color-1)
   7579  2386		       3e		      .byte.b	>(.__Spny_Ball_Color-1)
   7580  2387		       3e		      .byte.b	>(.__Spny_Ball_Color-1)
   7581  2388		       3e		      .byte.b	>(.__Fireball_Color-1)
   7582  2389		       3e		      .byte.b	>(.__Fireball_Color-1)
   7583  238a		       3f		      .byte.b	>(.__Flagpole-1)
   7584  238b		       3f		      .byte.b	>(.__Flagpole-1)
   7585  238c		       3f		      .byte.b	>(.__CoinC-1)
   7586  238d		       3f		      .byte.b	>(.__CoinC-1)
   7587  238e		       3f		      .byte.b	>(.__StarC1-1)
   7588  238f		       3f		      .byte.b	>(.__StarC2-1)
   7589  2390		       3f		      .byte.b	>(.__1UPC-1)
   7590  2391		       3f		      .byte.b	>(.__1UPC-1)
   7591  2392		       3f		      .byte.b	>(.__PlatformC-1)
   7592  2393		       3f		      .byte.b	>(.__PlatformC-1)
   7593  2394				   .L0402jumptablelo
   7594  2394		       c6		      .byte.b	<(.__Goomba_Color-1)
   7595  2395		       c6		      .byte.b	<(.__Goomba_Color-1)
   7596  2396		       44		      .byte.b	<(.__Green_Koopa_Color-1)
   7597  2397		       44		      .byte.b	<(.__Green_Koopa_Color-1)
   7598  2398		       e9		      .byte.b	<(.__Beetle_Color-1)
   7599  2399		       e9		      .byte.b	<(.__Beetle_Color-1)
   7600  239a		       e2		      .byte.b	<(.__SpineyC-1)
   7601  239b		       e2		      .byte.b	<(.__SpineyC-1)
   7602  239c		       4d		      .byte.b	<(.__Red_Koopa_Color-1)
   7603  239d		       4d		      .byte.b	<(.__Red_Koopa_Color-1)
   7604  239e		       44		      .byte.b	<(.__Green_Koopa_Color-1)
   7605  239f		       44		      .byte.b	<(.__Green_Koopa_Color-1)
   7606  23a0		       0c		      .byte.b	<(.__Bullet_Bill-1)
   7607  23a1		       0c		      .byte.b	<(.__Bullet_Bill-1)
   7608  23a2		       4d		      .byte.b	<(.__Red_Koopa_Color-1)
   7609  23a3		       4d		      .byte.b	<(.__Red_Koopa_Color-1)
   7610  23a4		       8a		      .byte.b	<(.__Spny_Ball_Color-1)
   7611  23a5		       8a		      .byte.b	<(.__Spny_Ball_Color-1)
   7612  23a6		       21		      .byte.b	<(.__Fireball_Color-1)
   7613  23a7		       21		      .byte.b	<(.__Fireball_Color-1)
   7614  23a8		       05		      .byte.b	<(.__Flagpole-1)
   7615  23a9		       05		      .byte.b	<(.__Flagpole-1)
   7616  23aa		       30		      .byte.b	<(.__CoinC-1)
   7617  23ab		       30		      .byte.b	<(.__CoinC-1)
   7618  23ac		       53		      .byte.b	<(.__StarC1-1)
   7619  23ad		       5c		      .byte.b	<(.__StarC2-1)
   7620  23ae		       1a		      .byte.b	<(.__1UPC-1)
   7621  23af		       1a		      .byte.b	<(.__1UPC-1)
   7622  23b0		       95		      .byte.b	<(.__PlatformC-1)
   7623  23b1		       95		      .byte.b	<(.__PlatformC-1)
   7624  23b2				   ongosub5
   7625  23b2				   .
   7626  23b2							; 
   7627  23b2
   7628  23b2				   .L0403		;  on x gosub __Goomba_1 __Goomba_2 __Koopa_1 __Koopa_2 __Beetle_1 __Beetle_2 __Spiney1 __Spiney2 __Koopa_1 __Koopa_2 __F_Koopa_1 __F_Koopa_2 __Bullet_Bill __Bullet_Bill __F_Koopa_1 __F_Koopa_2 __Spny_Ball_1 __Spny_Ball_2 __Fireball_1 __Fireball_2 __Flagpole __Flagpole __Coin1 __Coin2 __Star __Star __1UPMush __1UPMush __Platform __Platform
   7629  23b2
   7630  23b2		       a9 33		      lda	#>(ongosub6-1)
   7631  23b4		       48		      PHA
   7632  23b5		       a9 fe		      lda	#<(ongosub6-1)
   7633  23b7		       48		      PHA
   7634  23b8		       a6 eb		      LDX	x
   7635  23ba		       bd c3 33 	      LDA	.L0403jumptablehi,x
   7636  23bd		       48		      PHA
   7637  23be		       bd e1 33 	      LDA	.L0403jumptablelo,x
   7638  23c1		       48		      PHA
   7639  23c2		       60		      RTS
   7640  23c3				   .L0403jumptablehi
   7641  23c3		       3d		      .byte.b	>(.__Goomba_1-1)
   7642  23c4		       3d		      .byte.b	>(.__Goomba_2-1)
   7643  23c5		       3e		      .byte.b	>(.__Koopa_1-1)
   7644  23c6		       3e		      .byte.b	>(.__Koopa_2-1)
   7645  23c7		       3d		      .byte.b	>(.__Beetle_1-1)
   7646  23c8		       3d		      .byte.b	>(.__Beetle_2-1)
   7647  23c9		       3e		      .byte.b	>(.__Spiney1-1)
   7648  23ca		       3e		      .byte.b	>(.__Spiney2-1)
   7649  23cb		       3e		      .byte.b	>(.__Koopa_1-1)
   7650  23cc		       3e		      .byte.b	>(.__Koopa_2-1)
   7651  23cd		       3e		      .byte.b	>(.__F_Koopa_1-1)
   7652  23ce		       3e		      .byte.b	>(.__F_Koopa_2-1)
   7653  23cf		       3e		      .byte.b	>(.__Bullet_Bill-1)
   7654  23d0		       3e		      .byte.b	>(.__Bullet_Bill-1)
   7655  23d1		       3e		      .byte.b	>(.__F_Koopa_1-1)
   7656  23d2		       3e		      .byte.b	>(.__F_Koopa_2-1)
   7657  23d3		       3e		      .byte.b	>(.__Spny_Ball_1-1)
   7658  23d4		       3e		      .byte.b	>(.__Spny_Ball_2-1)
   7659  23d5		       3e		      .byte.b	>(.__Fireball_1-1)
   7660  23d6		       3e		      .byte.b	>(.__Fireball_2-1)
   7661  23d7		       3f		      .byte.b	>(.__Flagpole-1)
   7662  23d8		       3f		      .byte.b	>(.__Flagpole-1)
   7663  23d9		       3f		      .byte.b	>(.__Coin1-1)
   7664  23da		       3f		      .byte.b	>(.__Coin2-1)
   7665  23db		       3f		      .byte.b	>(.__Star-1)
   7666  23dc		       3f		      .byte.b	>(.__Star-1)
   7667  23dd		       3f		      .byte.b	>(.__1UPMush-1)
   7668  23de		       3f		      .byte.b	>(.__1UPMush-1)
   7669  23df		       3f		      .byte.b	>(.__Platform-1)
   7670  23e0		       3f		      .byte.b	>(.__Platform-1)
   7671  23e1				   .L0403jumptablelo
   7672  23e1		       cf		      .byte.b	<(.__Goomba_1-1)
   7673  23e2		       dc		      .byte.b	<(.__Goomba_2-1)
   7674  23e3		       70		      .byte.b	<(.__Koopa_1-1)
   7675  23e4		       7d		      .byte.b	<(.__Koopa_2-1)
   7676  23e5		       f2		      .byte.b	<(.__Beetle_1-1)
   7677  23e6		       ff		      .byte.b	<(.__Beetle_2-1)
   7678  23e7		       eb		      .byte.b	<(.__Spiney1-1)
   7679  23e8		       f8		      .byte.b	<(.__Spiney2-1)
   7680  23e9		       70		      .byte.b	<(.__Koopa_1-1)
   7681  23ea		       7d		      .byte.b	<(.__Koopa_2-1)
   7682  23eb		       56		      .byte.b	<(.__F_Koopa_1-1)
   7683  23ec		       63		      .byte.b	<(.__F_Koopa_2-1)
   7684  23ed		       0c		      .byte.b	<(.__Bullet_Bill-1)
   7685  23ee		       0c		      .byte.b	<(.__Bullet_Bill-1)
   7686  23ef		       56		      .byte.b	<(.__F_Koopa_1-1)
   7687  23f0		       63		      .byte.b	<(.__F_Koopa_2-1)
   7688  23f1		       93		      .byte.b	<(.__Spny_Ball_1-1)
   7689  23f2		       a0		      .byte.b	<(.__Spny_Ball_2-1)
   7690  23f3		       2a		      .byte.b	<(.__Fireball_1-1)
   7691  23f4		       37		      .byte.b	<(.__Fireball_2-1)
   7692  23f5		       05		      .byte.b	<(.__Flagpole-1)
   7693  23f6		       05		      .byte.b	<(.__Flagpole-1)
   7694  23f7		       39		      .byte.b	<(.__Coin1-1)
   7695  23f8		       46		      .byte.b	<(.__Coin2-1)
   7696  23f9		       65		      .byte.b	<(.__Star-1)
   7697  23fa		       65		      .byte.b	<(.__Star-1)
   7698  23fb		       23		      .byte.b	<(.__1UPMush-1)
   7699  23fc		       23		      .byte.b	<(.__1UPMush-1)
   7700  23fd		       9e		      .byte.b	<(.__Platform-1)
   7701  23fe		       9e		      .byte.b	<(.__Platform-1)
   7702  23ff				   ongosub6
   7703  23ff				   .
   7704  23ff							; 
   7705  23ff
   7706  23ff				   .L0404		;  goto __Main_Loop bank1
   7707  23ff
   7708  23ff		       85 ee		      sta	temp7
   7709  2401		       a9 10		      lda	#>(.__Main_Loop-1)
   7710  2403		       48		      pha
   7711  2404		       a9 b0		      lda	#<(.__Main_Loop-1)
   7712  2406		       48		      pha
   7713  2407		       a5 ee		      lda	temp7
   7714  2409		       48		      pha
   7715  240a		       8a		      txa
   7716  240b		       48		      pha
   7717  240c		       a2 01		      ldx	#1
   7718  240e		       4c eb ff 	      jmp	BS_jsr
   7719  2411				   .
   7720  2411							; 
   7721  2411
   7722  2411				   .__Enemy_End_Move_32
   7723  2411							; __Enemy_End_Move_32
   7724  2411
   7725  2411				   .
   7726  2411							; 
   7727  2411
   7728  2411				   .L0405		;  x  =  _Enemy_Type  -  30
   7729  2411
   7730  2411		       a5 dc		      LDA	_Enemy_Type
   7731  2413		       38		      SEC
   7732  2414		       e9 1e		      SBC	#30
   7733  2416		       85 eb		      STA	x
   7734  2418				   .
   7735  2418							; 
   7736  2418
   7737  2418				   .L0406		;  on x gosub __PirahnaC __PirahnaC __SBColor __SBColor __SGKColor __SGKColor __SRKColor __SRKColor __Tramp1C __Tramp1C
   7738  2418
   7739  2418		       a9 34		      lda	#>(ongosub7-1)
   7740  241a		       48		      PHA
   7741  241b		       a9 3c		      lda	#<(ongosub7-1)
   7742  241d		       48		      PHA
   7743  241e		       a6 eb		      LDX	x
   7744  2420		       bd 29 34 	      LDA	.L0406jumptablehi,x
   7745  2423		       48		      PHA
   7746  2424		       bd 33 34 	      LDA	.L0406jumptablelo,x
   7747  2427		       48		      PHA
   7748  2428		       60		      RTS
   7749  2429				   .L0406jumptablehi
   7750  2429		       3f		      .byte.b	>(.__PirahnaC-1)
   7751  242a		       3f		      .byte.b	>(.__PirahnaC-1)
   7752  242b		       3e		      .byte.b	>(.__SBColor-1)
   7753  242c		       3e		      .byte.b	>(.__SBColor-1)
   7754  242d		       3e		      .byte.b	>(.__SGKColor-1)
   7755  242e		       3e		      .byte.b	>(.__SGKColor-1)
   7756  242f		       3e		      .byte.b	>(.__SRKColor-1)
   7757  2430		       3e		      .byte.b	>(.__SRKColor-1)
   7758  2431		       3f		      .byte.b	>(.__Tramp1C-1)
   7759  2432		       3f		      .byte.b	>(.__Tramp1C-1)
   7760  2433				   .L0406jumptablelo
   7761  2433		       72		      .byte.b	<(.__PirahnaC-1)
   7762  2434		       72		      .byte.b	<(.__PirahnaC-1)
   7763  2435		       ad		      .byte.b	<(.__SBColor-1)
   7764  2436		       ad		      .byte.b	<(.__SBColor-1)
   7765  2437		       c3		      .byte.b	<(.__SGKColor-1)
   7766  2438		       c3		      .byte.b	<(.__SGKColor-1)
   7767  2439		       cc		      .byte.b	<(.__SRKColor-1)
   7768  243a		       cc		      .byte.b	<(.__SRKColor-1)
   7769  243b		       ab		      .byte.b	<(.__Tramp1C-1)
   7770  243c		       ab		      .byte.b	<(.__Tramp1C-1)
   7771  243d				   ongosub7
   7772  243d				   .
   7773  243d							; 
   7774  243d
   7775  243d				   .L0407		;  if _Animation_Timer  >  3  &&  !_Bit4_Enemy_Dead_Flag{4} then x  =	x  +  1
   7776  243d
   7777  243d		       a9 03		      LDA	#3
   7778  243f		       c5 d4		      CMP	_Animation_Timer
   7779  2441		       b0 08		      BCS	.skipL0407
   7780  2443				   .condpart235
   7781  2443		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
   7782  2445		       29 10		      AND	#16
   7783  2447		       d0 02		      BNE	.skip235then
   7784  2449				   .condpart236
   7785  2449		       e6 eb		      INC	x
   7786  244b				   .skip235then
   7787  244b				   .skipL0407
   7788  244b				   .
   7789  244b							; 
   7790  244b
   7791  244b				   .L0408		;  on x gosub __Pirahna1 __Pirahna2 __ShellB __ShellB __ShellK __ShellK __ShellK __ShellK __Tramp1 __Tramp1
   7792  244b
   7793  244b		       a9 34		      lda	#>(ongosub8-1)
   7794  244d		       48		      PHA
   7795  244e		       a9 6f		      lda	#<(ongosub8-1)
   7796  2450		       48		      PHA
   7797  2451		       a6 eb		      LDX	x
   7798  2453		       bd 5c 34 	      LDA	.L0408jumptablehi,x
   7799  2456		       48		      PHA
   7800  2457		       bd 66 34 	      LDA	.L0408jumptablelo,x
   7801  245a		       48		      PHA
   7802  245b		       60		      RTS
   7803  245c				   .L0408jumptablehi
   7804  245c		       3f		      .byte.b	>(.__Pirahna1-1)
   7805  245d		       3f		      .byte.b	>(.__Pirahna2-1)
   7806  245e		       3e		      .byte.b	>(.__ShellB-1)
   7807  245f		       3e		      .byte.b	>(.__ShellB-1)
   7808  2460		       3e		      .byte.b	>(.__ShellK-1)
   7809  2461		       3e		      .byte.b	>(.__ShellK-1)
   7810  2462		       3e		      .byte.b	>(.__ShellK-1)
   7811  2463		       3e		      .byte.b	>(.__ShellK-1)
   7812  2464		       3f		      .byte.b	>(.__Tramp1-1)
   7813  2465		       3f		      .byte.b	>(.__Tramp1-1)
   7814  2466				   .L0408jumptablelo
   7815  2466		       7b		      .byte.b	<(.__Pirahna1-1)
   7816  2467		       88		      .byte.b	<(.__Pirahna2-1)
   7817  2468		       b6		      .byte.b	<(.__ShellB-1)
   7818  2469		       b6		      .byte.b	<(.__ShellB-1)
   7819  246a		       d5		      .byte.b	<(.__ShellK-1)
   7820  246b		       d5		      .byte.b	<(.__ShellK-1)
   7821  246c		       d5		      .byte.b	<(.__ShellK-1)
   7822  246d		       d5		      .byte.b	<(.__ShellK-1)
   7823  246e		       b4		      .byte.b	<(.__Tramp1-1)
   7824  246f		       b4		      .byte.b	<(.__Tramp1-1)
   7825  2470				   ongosub8
   7826  2470				   .
   7827  2470							; 
   7828  2470
   7829  2470				   .
   7830  2470							; 
   7831  2470
   7832  2470				   .
   7833  2470							; 
   7834  2470
   7835  2470				   .
   7836  2470							; 
   7837  2470
   7838  2470				   .L0409		;  goto __Main_Loop bank1
   7839  2470
   7840  2470		       85 ee		      sta	temp7
   7841  2472		       a9 10		      lda	#>(.__Main_Loop-1)
   7842  2474		       48		      pha
   7843  2475		       a9 b0		      lda	#<(.__Main_Loop-1)
   7844  2477		       48		      pha
   7845  2478		       a5 ee		      lda	temp7
   7846  247a		       48		      pha
   7847  247b		       8a		      txa
   7848  247c		       48		      pha
   7849  247d		       a2 01		      ldx	#1
   7850  247f		       4c eb ff 	      jmp	BS_jsr
   7851  2482				   .
   7852  2482							; 
   7853  2482
   7854  2482				   .
   7855  2482							; 
   7856  2482
   7857  2482				   .
   7858  2482							; 
   7859  2482
   7860  2482				   .
   7861  2482							; 
   7862  2482
   7863  2482				   .
   7864  2482							; 
   7865  2482
   7866  2482				   .
   7867  2482							; 
   7868  2482
   7869  2482				   .
   7870  2482							; 
   7871  2482
   7872  2482				   .
   7873  2482							; 
   7874  2482
   7875  2482				   .
   7876  2482							; 
   7877  2482
   7878  2482				   .
   7879  2482							; 
   7880  2482
   7881  2482				   .__Red_Flying_Koopa
   7882  2482							; __Red_Flying_Koopa
   7883  2482
   7884  2482				   .
   7885  2482							; 
   7886  2482
   7887  2482				   .L0410		;  if _Bit7_2nd_Quest{7} then x  =  4 else x  =  2
   7888  2482
   7889  2482		       24 d9		      BIT	_Bit7_2nd_Quest
   7890  2484		       10 07		      BPL	.skipL0410
   7891  2486				   .condpart237
   7892  2486		       a9 04		      LDA	#4
   7893  2488		       85 eb		      STA	x
   7894  248a		       4c 91 34 	      jmp	.skipelse48
   7895  248d				   .skipL0410
   7896  248d		       a9 02		      LDA	#2
   7897  248f		       85 eb		      STA	x
   7898  2491				   .skipelse48
   7899  2491				   .
   7900  2491							; 
   7901  2491
   7902  2491				   .L0411		;  if _Bit3_Enemy_Direction{3} then player1y  =  player1y  +  x else player1y	=  player1y  -	x
   7903  2491
   7904  2491		       a5 da		      LDA	_Bit3_Enemy_Direction
   7905  2493		       29 08		      AND	#8
   7906  2495		       f0 0a		      BEQ	.skipL0411
   7907  2497				   .condpart238
   7908  2497		       a5 86		      LDA	player1y
   7909  2499		       18		      CLC
   7910  249a		       65 eb		      ADC	x
   7911  249c		       85 86		      STA	player1y
   7912  249e		       4c a8 34 	      jmp	.skipelse49
   7913  24a1				   .skipL0411
   7914  24a1		       a5 86		      LDA	player1y
   7915  24a3		       38		      SEC
   7916  24a4		       e5 eb		      SBC	x
   7917  24a6		       85 86		      STA	player1y
   7918  24a8				   .skipelse49
   7919  24a8				   .
   7920  24a8							; 
   7921  24a8
   7922  24a8				   .L0412		;  if player1y  >  72 then gosub __Fix_Enemy  :  player1y  =  72
   7923  24a8
   7924  24a8		       a9 48		      LDA	#72
   7925  24aa		       c5 86		      CMP	player1y
   7926  24ac		       b0 07		      BCS	.skipL0412
   7927  24ae				   .condpart239
   7928  24ae		       20 f3 38 	      jsr	.__Fix_Enemy
   7929  24b1		       a9 48		      LDA	#72
   7930  24b3		       85 86		      STA	player1y
   7931  24b5				   .skipL0412
   7932  24b5				   .
   7933  24b5							; 
   7934  24b5
   7935  24b5				   .L0413		;  if player1y  <  24 then gosub __Fix_Enemy  :  player1y  =  24
   7936  24b5
   7937  24b5		       a5 86		      LDA	player1y
   7938  24b7		       c9 18		      CMP	#24
   7939  24b9		       b0 07		      BCS	.skipL0413
   7940  24bb				   .condpart240
   7941  24bb		       20 f3 38 	      jsr	.__Fix_Enemy
   7942  24be		       a9 18		      LDA	#24
   7943  24c0		       85 86		      STA	player1y
   7944  24c2				   .skipL0413
   7945  24c2				   .
   7946  24c2							; 
   7947  24c2
   7948  24c2				   .L0414		;  goto __Enemy_End_Move
   7949  24c2
   7950  24c2		       4c 10 33 	      jmp	.__Enemy_End_Move
   7951  24c5
   7952  24c5				   .
   7953  24c5							; 
   7954  24c5
   7955  24c5				   .__Spiney_Ball
   7956  24c5							; __Spiney_Ball
   7957  24c5
   7958  24c5				   .
   7959  24c5							; 
   7960  24c5
   7961  24c5				   .L0415		;  player1y  =  player1y  +  4
   7962  24c5
   7963  24c5		       a5 86		      LDA	player1y
   7964  24c7		       18		      CLC
   7965  24c8		       69 04		      ADC	#4
   7966  24ca		       85 86		      STA	player1y
   7967  24cc				   .
   7968  24cc							; 
   7969  24cc
   7970  24cc				   .L0416		;  if _Bit3_Enemy_Direction{3} then x	=   ( player1x	-  17 )  / 4 else x  =	 ( player1x  -	9 )  / 4
   7971  24cc
   7972  24cc		       a5 da		      LDA	_Bit3_Enemy_Direction
   7973  24ce		       29 08		      AND	#8
   7974  24d0		       f0 0c		      BEQ	.skipL0416
   7975  24d2				   .condpart241
   7976  24d2							; complex statement detected
   7977  24d2		       a5 81		      LDA	player1x
   7978  24d4		       38		      SEC
   7979  24d5		       e9 11		      SBC	#17
   7980  24d7		       4a		      lsr
   7981  24d8		       4a		      lsr
   7982  24d9		       85 eb		      STA	x
   7983  24db		       4c e7 34 	      jmp	.skipelse50
   7984  24de				   .skipL0416
   7985  24de							; complex statement detected
   7986  24de		       a5 81		      LDA	player1x
   7987  24e0		       38		      SEC
   7988  24e1		       e9 09		      SBC	#9
   7989  24e3		       4a		      lsr
   7990  24e4		       4a		      lsr
   7991  24e5		       85 eb		      STA	x
   7992  24e7				   .skipelse50
   7993  24e7				   .
   7994  24e7							; 
   7995  24e7
   7996  24e7				   .L0417		;  y  =   ( player1y  +  1 )  / 8
   7997  24e7
   7998  24e7							; complex statement detected
   7999  24e7		       a5 86		      LDA	player1y
   8000  24e9		       18		      CLC
   8001  24ea		       69 01		      ADC	#1
   8002  24ec		       4a		      lsr
   8003  24ed		       4a		      lsr
   8004  24ee		       4a		      lsr
   8005  24ef		       85 ec		      STA	y
   8006  24f1				   .
   8007  24f1							; 
   8008  24f1
   8009  24f1				   .L0418		;  if pfread ( x , y )  then _Enemy_Type  =  _Spiney
   8010  24f1
   8011  24f1		       a5 eb		      LDA	x
   8012  24f3		       a4 ec		      LDY	y
   8013  24f5		       85 ee		      sta	temp7
   8014  24f7		       a9 35		      lda	#>(ret_point26-1)
   8015  24f9		       48		      pha
   8016  24fa		       a9 0c		      lda	#<(ret_point26-1)
   8017  24fc		       48		      pha
   8018  24fd		       a9 f2		      lda	#>(pfread-1)
   8019  24ff		       48		      pha
   8020  2500		       a9 ab		      lda	#<(pfread-1)
   8021  2502		       48		      pha
   8022  2503		       a5 ee		      lda	temp7
   8023  2505		       48		      pha
   8024  2506		       8a		      txa
   8025  2507		       48		      pha
   8026  2508		       a2 08		      ldx	#8
   8027  250a		       4c eb ff 	      jmp	BS_jsr
   8028  250d				   ret_point26
   8029  250d		       d0 04		      BNE	.skipL0418
   8030  250f				   .condpart242
   8031  250f		       a9 06		      LDA	#_Spiney
   8032  2511		       85 dc		      STA	_Enemy_Type
   8033  2513				   .skipL0418
   8034  2513				   .
   8035  2513							; 
   8036  2513
   8037  2513				   .L0419		;  goto __Enemy_End_Move
   8038  2513
   8039  2513		       4c 10 33 	      jmp	.__Enemy_End_Move
   8040  2516
   8041  2516				   .
   8042  2516							; 
   8043  2516
   8044  2516				   .__Fireball_Enemy
   8045  2516							; __Fireball_Enemy
   8046  2516
   8047  2516				   .
   8048  2516							; 
   8049  2516
   8050  2516				   .L0420		;  if _Bit3_Enemy_Direction{3} then player1y  =  player1y  +  _Enemy_Momentum else player1y  =  player1y  -  _Enemy_Momentum
   8051  2516
   8052  2516		       a5 da		      LDA	_Bit3_Enemy_Direction
   8053  2518		       29 08		      AND	#8
   8054  251a		       f0 0a		      BEQ	.skipL0420
   8055  251c				   .condpart243
   8056  251c		       a5 86		      LDA	player1y
   8057  251e		       18		      CLC
   8058  251f		       65 dd		      ADC	_Enemy_Momentum
   8059  2521		       85 86		      STA	player1y
   8060  2523		       4c 2d 35 	      jmp	.skipelse51
   8061  2526				   .skipL0420
   8062  2526		       a5 86		      LDA	player1y
   8063  2528		       38		      SEC
   8064  2529		       e5 dd		      SBC	_Enemy_Momentum
   8065  252b		       85 86		      STA	player1y
   8066  252d				   .skipelse51
   8067  252d				   .
   8068  252d							; 
   8069  252d
   8070  252d				   .L0421		;  if _Bit3_Enemy_Direction{3}  &&  player1y  >  120 then _Bit3_Enemy_Direction{3}  =	0
   8071  252d
   8072  252d		       a5 da		      LDA	_Bit3_Enemy_Direction
   8073  252f		       29 08		      AND	#8
   8074  2531		       f0 0c		      BEQ	.skipL0421
   8075  2533				   .condpart244
   8076  2533		       a9 78		      LDA	#120
   8077  2535		       c5 86		      CMP	player1y
   8078  2537		       b0 06		      BCS	.skip244then
   8079  2539				   .condpart245
   8080  2539		       a5 da		      LDA	_Bit3_Enemy_Direction
   8081  253b		       29 f7		      AND	#247
   8082  253d		       85 da		      STA	_Bit3_Enemy_Direction
   8083  253f				   .skip244then
   8084  253f				   .skipL0421
   8085  253f				   .
   8086  253f							; 
   8087  253f
   8088  253f				   .L0422		;  if !_Bit3_Enemy_Direction{3}  &&  player1y	<  40 then _Enemy_Momentum  =  _Enemy_Momentum	-  2
   8089  253f
   8090  253f		       a5 da		      LDA	_Bit3_Enemy_Direction
   8091  2541		       29 08		      AND	#8
   8092  2543		       d0 0d		      BNE	.skipL0422
   8093  2545				   .condpart246
   8094  2545		       a5 86		      LDA	player1y
   8095  2547		       c9 28		      CMP	#40
   8096  2549		       b0 07		      BCS	.skip246then
   8097  254b				   .condpart247
   8098  254b		       a5 dd		      LDA	_Enemy_Momentum
   8099  254d		       38		      SEC
   8100  254e		       e9 02		      SBC	#2
   8101  2550		       85 dd		      STA	_Enemy_Momentum
   8102  2552				   .skip246then
   8103  2552				   .skipL0422
   8104  2552				   .
   8105  2552							; 
   8106  2552
   8107  2552				   .L0423		;  if _Bit3_Enemy_Direction{3}  &&  _Enemy_Momentum  <  6 then _Enemy_Momentum  =  _Enemy_Momentum  +	2
   8108  2552
   8109  2552		       a5 da		      LDA	_Bit3_Enemy_Direction
   8110  2554		       29 08		      AND	#8
   8111  2556		       f0 0d		      BEQ	.skipL0423
   8112  2558				   .condpart248
   8113  2558		       a5 dd		      LDA	_Enemy_Momentum
   8114  255a		       c9 06		      CMP	#6
   8115  255c		       b0 07		      BCS	.skip248then
   8116  255e				   .condpart249
   8117  255e		       a5 dd		      LDA	_Enemy_Momentum
   8118  2560		       18		      CLC
   8119  2561		       69 02		      ADC	#2
   8120  2563		       85 dd		      STA	_Enemy_Momentum
   8121  2565				   .skip248then
   8122  2565				   .skipL0423
   8123  2565				   .
   8124  2565							; 
   8125  2565
   8126  2565				   .L0424		;  if _Enemy_Momentum	=  0 then _Bit3_Enemy_Direction{3}  =  1
   8127  2565
   8128  2565		       a5 dd		      LDA	_Enemy_Momentum
   8129  2567		       c9 00		      CMP	#0
   8130  2569		       d0 06		      BNE	.skipL0424
   8131  256b				   .condpart250
   8132  256b		       a5 da		      LDA	_Bit3_Enemy_Direction
   8133  256d		       09 08		      ORA	#8
   8134  256f		       85 da		      STA	_Bit3_Enemy_Direction
   8135  2571				   .skipL0424
   8136  2571				   .
   8137  2571							; 
   8138  2571
   8139  2571				   .L0425		;  x  =  player0x  -  16
   8140  2571
   8141  2571		       a5 80		      LDA	player0x
   8142  2573		       38		      SEC
   8143  2574		       e9 10		      SBC	#16
   8144  2576		       85 eb		      STA	x
   8145  2578				   .
   8146  2578							; 
   8147  2578
   8148  2578				   .L0426		;  if x  >  player1x then gosub __Kill_Enemy  :  goto __Main_Loop bank1
   8149  2578
   8150  2578		       a5 81		      LDA	player1x
   8151  257a		       c5 eb		      CMP	x
   8152  257c		       b0 15		      BCS	.skipL0426
   8153  257e				   .condpart251
   8154  257e		       20 d6 38 	      jsr	.__Kill_Enemy
   8155  2581		       85 ee		      sta	temp7
   8156  2583		       a9 10		      lda	#>(.__Main_Loop-1)
   8157  2585		       48		      pha
   8158  2586		       a9 b0		      lda	#<(.__Main_Loop-1)
   8159  2588		       48		      pha
   8160  2589		       a5 ee		      lda	temp7
   8161  258b		       48		      pha
   8162  258c		       8a		      txa
   8163  258d		       48		      pha
   8164  258e		       a2 01		      ldx	#1
   8165  2590		       4c eb ff 	      jmp	BS_jsr
   8166  2593				   .skipL0426
   8167  2593				   .
   8168  2593							; 
   8169  2593
   8170  2593				   .L0427		;  goto __Enemy_End_Move
   8171  2593
   8172  2593		       4c 10 33 	      jmp	.__Enemy_End_Move
   8173  2596
   8174  2596				   .
   8175  2596							; 
   8176  2596
   8177  2596				   .__Pirahna_Plant
   8178  2596							; __Pirahna_Plant
   8179  2596
   8180  2596				   .
   8181  2596							; 
   8182  2596
   8183  2596				   .L0428		;  x  =  player1x  +  16
   8184  2596
   8185  2596		       a5 81		      LDA	player1x
   8186  2598		       18		      CLC
   8187  2599		       69 10		      ADC	#16
   8188  259b		       85 eb		      STA	x
   8189  259d				   .
   8190  259d							; 
   8191  259d
   8192  259d				   .L0429		;  if player0x  >  x then gosub __Kill_Enemy  :  goto __Main_Loop bank1
   8193  259d
   8194  259d		       a5 eb		      LDA	x
   8195  259f		       c5 80		      CMP	player0x
   8196  25a1		       b0 15		      BCS	.skipL0429
   8197  25a3				   .condpart252
   8198  25a3		       20 d6 38 	      jsr	.__Kill_Enemy
   8199  25a6		       85 ee		      sta	temp7
   8200  25a8		       a9 10		      lda	#>(.__Main_Loop-1)
   8201  25aa		       48		      pha
   8202  25ab		       a9 b0		      lda	#<(.__Main_Loop-1)
   8203  25ad		       48		      pha
   8204  25ae		       a5 ee		      lda	temp7
   8205  25b0		       48		      pha
   8206  25b1		       8a		      txa
   8207  25b2		       48		      pha
   8208  25b3		       a2 01		      ldx	#1
   8209  25b5		       4c eb ff 	      jmp	BS_jsr
   8210  25b8				   .skipL0429
   8211  25b8				   .
   8212  25b8							; 
   8213  25b8
   8214  25b8				   .L0430		;  if _Bit3_Enemy_Direction{3} then player1y  =  64 else player1y  =  120
   8215  25b8
   8216  25b8		       a5 da		      LDA	_Bit3_Enemy_Direction
   8217  25ba		       29 08		      AND	#8
   8218  25bc		       f0 07		      BEQ	.skipL0430
   8219  25be				   .condpart253
   8220  25be		       a9 40		      LDA	#64
   8221  25c0		       85 86		      STA	player1y
   8222  25c2		       4c c9 35 	      jmp	.skipelse52
   8223  25c5				   .skipL0430
   8224  25c5		       a9 78		      LDA	#120
   8225  25c7		       85 86		      STA	player1y
   8226  25c9				   .skipelse52
   8227  25c9				   .
   8228  25c9							; 
   8229  25c9
   8230  25c9				   .L0431		;  _Enemy_Momentum  =	_Enemy_Momentum  +  1
   8231  25c9
   8232  25c9		       e6 dd		      INC	_Enemy_Momentum
   8233  25cb				   .
   8234  25cb							; 
   8235  25cb
   8236  25cb				   .L0432		;  if _Bit7_2nd_Quest{7} then x  =  32 else x	=  48
   8237  25cb
   8238  25cb		       24 d9		      BIT	_Bit7_2nd_Quest
   8239  25cd		       10 07		      BPL	.skipL0432
   8240  25cf				   .condpart254
   8241  25cf		       a9 20		      LDA	#32
   8242  25d1		       85 eb		      STA	x
   8243  25d3		       4c da 35 	      jmp	.skipelse53
   8244  25d6				   .skipL0432
   8245  25d6		       a9 30		      LDA	#48
   8246  25d8		       85 eb		      STA	x
   8247  25da				   .skipelse53
   8248  25da				   .
   8249  25da							; 
   8250  25da
   8251  25da				   .L0433		;  if _Enemy_Momentum	<  x then goto __Enemy_End_Move
   8252  25da
   8253  25da		       a5 dd		      LDA	_Enemy_Momentum
   8254  25dc		       c5 eb		      CMP	x
   8255  25de		       b0 03		      BCS	.skipL0433
   8256  25e0				   .condpart255
   8257  25e0		       4c 10 33 	      jmp	.__Enemy_End_Move
   8258  25e3
   8259  25e3				   .skipL0433
   8260  25e3				   .
   8261  25e3							; 
   8262  25e3
   8263  25e3				   .L0434		;  _Enemy_Momentum  =	0
   8264  25e3
   8265  25e3		       a9 00		      LDA	#0
   8266  25e5		       85 dd		      STA	_Enemy_Momentum
   8267  25e7				   .
   8268  25e7							; 
   8269  25e7
   8270  25e7				   .L0435		;  if _Bit3_Enemy_Direction{3} then _Bit3_Enemy_Direction{3}  =  0 else _Bit3_Enemy_Direction{3}  =  1
   8271  25e7
   8272  25e7		       a5 da		      LDA	_Bit3_Enemy_Direction
   8273  25e9		       29 08		      AND	#8
   8274  25eb		       f0 09		      BEQ	.skipL0435
   8275  25ed				   .condpart256
   8276  25ed		       a5 da		      LDA	_Bit3_Enemy_Direction
   8277  25ef		       29 f7		      AND	#247
   8278  25f1		       85 da		      STA	_Bit3_Enemy_Direction
   8279  25f3		       4c fc 35 	      jmp	.skipelse54
   8280  25f6				   .skipL0435
   8281  25f6		       a5 da		      LDA	_Bit3_Enemy_Direction
   8282  25f8		       09 08		      ORA	#8
   8283  25fa		       85 da		      STA	_Bit3_Enemy_Direction
   8284  25fc				   .skipelse54
   8285  25fc				   .
   8286  25fc							; 
   8287  25fc
   8288  25fc				   .L0436		;  goto __Enemy_End_Move
   8289  25fc
   8290  25fc		       4c 10 33 	      jmp	.__Enemy_End_Move
   8291  25ff
   8292  25ff				   .
   8293  25ff							; 
   8294  25ff
   8295  25ff				   .__Kinetic_Platform
   8296  25ff							; __Kinetic_Platform
   8297  25ff
   8298  25ff				   .
   8299  25ff							; 
   8300  25ff
   8301  25ff				   .L0437		;  if collision(player1,playfield) then goto __K_Platform_03
   8302  25ff
   8303  25ff		       24 03		      bit	CXP1FB
   8304  2601		       10 03		      BPL	.skipL0437
   8305  2603				   .condpart257
   8306  2603		       4c 3c 36 	      jmp	.__K_Platform_03
   8307  2606
   8308  2606				   .skipL0437
   8309  2606				   .
   8310  2606							; 
   8311  2606
   8312  2606				   .L0438		;  if player1y  >  72	&&  _Bit3_Enemy_Direction{3} then _Enemy_Momentum  =  _Enemy_Momentum  -  1  :	goto __K_Platform_02
   8313  2606
   8314  2606		       a9 48		      LDA	#72
   8315  2608		       c5 86		      CMP	player1y
   8316  260a		       b0 0b		      BCS	.skipL0438
   8317  260c				   .condpart258
   8318  260c		       a5 da		      LDA	_Bit3_Enemy_Direction
   8319  260e		       29 08		      AND	#8
   8320  2610		       f0 05		      BEQ	.skip258then
   8321  2612				   .condpart259
   8322  2612		       c6 dd		      DEC	_Enemy_Momentum
   8323  2614		       4c 33 36 	      jmp	.__K_Platform_02
   8324  2617
   8325  2617				   .skip258then
   8326  2617				   .skipL0438
   8327  2617				   .
   8328  2617							; 
   8329  2617
   8330  2617				   .L0439		;  if player1y  <  24	&&  !_Bit3_Enemy_Direction{3} then _Enemy_Momentum  =  _Enemy_Momentum	-  1  :  goto __K_Platform_02
   8331  2617
   8332  2617		       a5 86		      LDA	player1y
   8333  2619		       c9 18		      CMP	#24
   8334  261b		       b0 0b		      BCS	.skipL0439
   8335  261d				   .condpart260
   8336  261d		       a5 da		      LDA	_Bit3_Enemy_Direction
   8337  261f		       29 08		      AND	#8
   8338  2621		       d0 05		      BNE	.skip260then
   8339  2623				   .condpart261
   8340  2623		       c6 dd		      DEC	_Enemy_Momentum
   8341  2625		       4c 33 36 	      jmp	.__K_Platform_02
   8342  2628
   8343  2628				   .skip260then
   8344  2628				   .skipL0439
   8345  2628				   .
   8346  2628							; 
   8347  2628
   8348  2628				   .L0440		;  if _Enemy_Momentum	<  5 then _Enemy_Momentum  =  _Enemy_Momentum  +  1
   8349  2628
   8350  2628		       a5 dd		      LDA	_Enemy_Momentum
   8351  262a		       c9 05		      CMP	#5
   8352  262c		       b0 02		      BCS	.skipL0440
   8353  262e				   .condpart262
   8354  262e		       e6 dd		      INC	_Enemy_Momentum
   8355  2630				   .skipL0440
   8356  2630				   .
   8357  2630							; 
   8358  2630
   8359  2630				   .L0441		;  goto __K_Platform_04
   8360  2630
   8361  2630		       4c 51 36 	      jmp	.__K_Platform_04
   8362  2633
   8363  2633				   .
   8364  2633							; 
   8365  2633
   8366  2633				   .__K_Platform_02
   8367  2633							; __K_Platform_02
   8368  2633
   8369  2633				   .
   8370  2633							; 
   8371  2633
   8372  2633				   .L0442		;  if _Enemy_Momentum	>  0 then goto __K_Platform_04
   8373  2633
   8374  2633		       a9 00		      LDA	#0
   8375  2635		       c5 dd		      CMP	_Enemy_Momentum
   8376  2637		       b0 03		      BCS	.skipL0442
   8377  2639				   .condpart263
   8378  2639		       4c 51 36 	      jmp	.__K_Platform_04
   8379  263c
   8380  263c				   .skipL0442
   8381  263c				   .
   8382  263c							; 
   8383  263c
   8384  263c				   .__K_Platform_03
   8385  263c							; __K_Platform_03
   8386  263c
   8387  263c				   .
   8388  263c							; 
   8389  263c
   8390  263c				   .L0443		;  if _Bit3_Enemy_Direction{3} then _Bit3_Enemy_Direction{3}  =  0 else _Bit3_Enemy_Direction{3}  =  1
   8391  263c
   8392  263c		       a5 da		      LDA	_Bit3_Enemy_Direction
   8393  263e		       29 08		      AND	#8
   8394  2640		       f0 09		      BEQ	.skipL0443
   8395  2642				   .condpart264
   8396  2642		       a5 da		      LDA	_Bit3_Enemy_Direction
   8397  2644		       29 f7		      AND	#247
   8398  2646		       85 da		      STA	_Bit3_Enemy_Direction
   8399  2648		       4c 51 36 	      jmp	.skipelse55
   8400  264b				   .skipL0443
   8401  264b		       a5 da		      LDA	_Bit3_Enemy_Direction
   8402  264d		       09 08		      ORA	#8
   8403  264f		       85 da		      STA	_Bit3_Enemy_Direction
   8404  2651				   .skipelse55
   8405  2651				   .
   8406  2651							; 
   8407  2651
   8408  2651				   .__K_Platform_04
   8409  2651							; __K_Platform_04
   8410  2651
   8411  2651				   .
   8412  2651							; 
   8413  2651
   8414  2651				   .L0444		;  if _Bit3_Enemy_Direction{3} then player1y  =  player1y  +  _Enemy_Momentum else player1y  =  player1y  -  _Enemy_Momentum
   8415  2651
   8416  2651		       a5 da		      LDA	_Bit3_Enemy_Direction
   8417  2653		       29 08		      AND	#8
   8418  2655		       f0 0a		      BEQ	.skipL0444
   8419  2657				   .condpart265
   8420  2657		       a5 86		      LDA	player1y
   8421  2659		       18		      CLC
   8422  265a		       65 dd		      ADC	_Enemy_Momentum
   8423  265c		       85 86		      STA	player1y
   8424  265e		       4c 68 36 	      jmp	.skipelse56
   8425  2661				   .skipL0444
   8426  2661		       a5 86		      LDA	player1y
   8427  2663		       38		      SEC
   8428  2664		       e5 dd		      SBC	_Enemy_Momentum
   8429  2666		       85 86		      STA	player1y
   8430  2668				   .skipelse56
   8431  2668				   .
   8432  2668							; 
   8433  2668
   8434  2668				   .L0445		;  goto __Enemy_End_Move
   8435  2668
   8436  2668		       4c 10 33 	      jmp	.__Enemy_End_Move
   8437  266b
   8438  266b				   .
   8439  266b							; 
   8440  266b
   8441  266b				   .__Kill_Fireball
   8442  266b							; __Kill_Fireball
   8443  266b
   8444  266b				   .
   8445  266b							; 
   8446  266b
   8447  266b				   .L0446		;  ballx  =  0  :  bally  =  120
   8448  266b
   8449  266b		       a9 00		      LDA	#0
   8450  266d		       85 84		      STA	ballx
   8451  266f		       a9 78		      LDA	#120
   8452  2671		       85 89		      STA	bally
   8453  2673				   .
   8454  2673							; 
   8455  2673
   8456  2673				   .L0447		;  return thisbank
   8457  2673
   8458  2673		       60		      RTS
   8459  2674				   .
   8460  2674							; 
   8461  2674
   8462  2674				   .
   8463  2674							; 
   8464  2674
   8465  2674				   .
   8466  2674							; 
   8467  2674
   8468  2674				   .
   8469  2674							; 
   8470  2674
   8471  2674				   .
   8472  2674							; 
   8473  2674
   8474  2674				   .
   8475  2674							; 
   8476  2674
   8477  2674				   .
   8478  2674							; 
   8479  2674
   8480  2674				   .
   8481  2674							; 
   8482  2674
   8483  2674				   .
   8484  2674							; 
   8485  2674
   8486  2674				   .
   8487  2674							; 
   8488  2674
   8489  2674				   .
   8490  2674							; 
   8491  2674
   8492  2674				   .
   8493  2674							; 
   8494  2674
   8495  2674				   .
   8496  2674							; 
   8497  2674
   8498  2674				   .__Initialize_Enemy
   8499  2674							; __Initialize_Enemy
   8500  2674
   8501  2674				   .
   8502  2674							; 
   8503  2674
   8504  2674				   .
   8505  2674							; 
   8506  2674
   8507  2674				   .
   8508  2674							; 
   8509  2674
   8510  2674				   .
   8511  2674							; 
   8512  2674
   8513  2674				   .
   8514  2674							; 
   8515  2674
   8516  2674				   .L0448		;  if _Object_Scroll_In_Data  >  151  &&  _Object_Scroll_In_Data  <  168  &&  _Level  =  3 then goto __Init_Enemy_02
   8517  2674
   8518  2674		       a9 97		      LDA	#151
   8519  2676		       c5 db		      CMP	_Object_Scroll_In_Data
   8520  2678		       b0 0f		      BCS	.skipL0448
   8521  267a				   .condpart266
   8522  267a		       a5 db		      LDA	_Object_Scroll_In_Data
   8523  267c		       c9 a8		      CMP	#168
   8524  267e		       b0 09		      BCS	.skip266then
   8525  2680				   .condpart267
   8526  2680		       a5 ea		      LDA	_Level
   8527  2682		       c9 03		      CMP	#3
   8528  2684		       d0 03		      BNE	.skip267then
   8529  2686				   .condpart268
   8530  2686		       4c b4 36 	      jmp	.__Init_Enemy_02
   8531  2689
   8532  2689				   .skip267then
   8533  2689				   .skip266then
   8534  2689				   .skipL0448
   8535  2689				   .
   8536  2689							; 
   8537  2689
   8538  2689				   .L0449		;  if _Object_Scroll_In_Data  >  167  &&  _Object_Scroll_In_Data  <  184 then goto __Init_Enemy_02
   8539  2689
   8540  2689		       a9 a7		      LDA	#167
   8541  268b		       c5 db		      CMP	_Object_Scroll_In_Data
   8542  268d		       b0 09		      BCS	.skipL0449
   8543  268f				   .condpart269
   8544  268f		       a5 db		      LDA	_Object_Scroll_In_Data
   8545  2691		       c9 b8		      CMP	#184
   8546  2693		       b0 03		      BCS	.skip269then
   8547  2695				   .condpart270
   8548  2695		       4c b4 36 	      jmp	.__Init_Enemy_02
   8549  2698
   8550  2698				   .skip269then
   8551  2698				   .skipL0449
   8552  2698				   .
   8553  2698							; 
   8554  2698
   8555  2698				   .L0450		;  if _Object_Scroll_In_Data  >  135  &&  _Object_Scroll_In_Data  <  152  &&  _Level  =  4 then goto __Init_Enemy_02
   8556  2698
   8557  2698		       a9 87		      LDA	#135
   8558  269a		       c5 db		      CMP	_Object_Scroll_In_Data
   8559  269c		       b0 0f		      BCS	.skipL0450
   8560  269e				   .condpart271
   8561  269e		       a5 db		      LDA	_Object_Scroll_In_Data
   8562  26a0		       c9 98		      CMP	#152
   8563  26a2		       b0 09		      BCS	.skip271then
   8564  26a4				   .condpart272
   8565  26a4		       a5 ea		      LDA	_Level
   8566  26a6		       c9 04		      CMP	#4
   8567  26a8		       d0 03		      BNE	.skip272then
   8568  26aa				   .condpart273
   8569  26aa		       4c b4 36 	      jmp	.__Init_Enemy_02
   8570  26ad
   8571  26ad				   .skip272then
   8572  26ad				   .skip271then
   8573  26ad				   .skipL0450
   8574  26ad				   .
   8575  26ad							; 
   8576  26ad
   8577  26ad				   .L0451		;  if player1x  >  0 then return thisbank
   8578  26ad
   8579  26ad		       a9 00		      LDA	#0
   8580  26af		       c5 81		      CMP	player1x
   8581  26b1		       b0 01		      BCS	.skipL0451
   8582  26b3				   .condpart274
   8583  26b3		       60		      RTS
   8584  26b4				   .skipL0451
   8585  26b4				   .
   8586  26b4							; 
   8587  26b4
   8588  26b4				   .__Init_Enemy_02
   8589  26b4							; __Init_Enemy_02
   8590  26b4
   8591  26b4				   .
   8592  26b4							; 
   8593  26b4
   8594  26b4				   .L0452		;  _Enemy_Type  =  _Object_Scroll_In_Data / 8
   8595  26b4
   8596  26b4		       a5 db		      LDA	_Object_Scroll_In_Data
   8597  26b6		       4a		      lsr
   8598  26b7		       4a		      lsr
   8599  26b8		       4a		      lsr
   8600  26b9		       85 dc		      STA	_Enemy_Type
   8601  26bb				   .
   8602  26bb							; 
   8603  26bb
   8604  26bb				   .L0453		;  _Enemy_Type  =  _Enemy_Type  -  1  :  _Enemy_Momentum  =  0
   8605  26bb
   8606  26bb		       c6 dc		      DEC	_Enemy_Type
   8607  26bd		       a9 00		      LDA	#0
   8608  26bf		       85 dd		      STA	_Enemy_Momentum
   8609  26c1				   .
   8610  26c1							; 
   8611  26c1
   8612  26c1				   .L0454		;  if _Enemy_Type  >  21  &&  _Enemy_Type  <  27 then _Enemy_Type  =  _Enemy_Type  +  20
   8613  26c1
   8614  26c1		       a9 15		      LDA	#21
   8615  26c3		       c5 dc		      CMP	_Enemy_Type
   8616  26c5		       b0 0d		      BCS	.skipL0454
   8617  26c7				   .condpart275
   8618  26c7		       a5 dc		      LDA	_Enemy_Type
   8619  26c9		       c9 1b		      CMP	#27
   8620  26cb		       b0 07		      BCS	.skip275then
   8621  26cd				   .condpart276
   8622  26cd		       a5 dc		      LDA	_Enemy_Type
   8623  26cf		       18		      CLC
   8624  26d0		       69 14		      ADC	#20
   8625  26d2		       85 dc		      STA	_Enemy_Type
   8626  26d4				   .skip275then
   8627  26d4				   .skipL0454
   8628  26d4				   .
   8629  26d4							; 
   8630  26d4
   8631  26d4				   .L0455		;  _Bit4_Enemy_Dead_Flag{4}  =  0
   8632  26d4
   8633  26d4		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
   8634  26d6		       29 ef		      AND	#239
   8635  26d8		       85 da		      STA	_Bit4_Enemy_Dead_Flag
   8636  26da				   .
   8637  26da							; 
   8638  26da
   8639  26da				   .L0456		;  if _Bit7_2nd_Quest{7}  &&  _Enemy_Type  =  _Goomba then _Enemy_Type  =  _Beetle
   8640  26da
   8641  26da		       24 d9		      BIT	_Bit7_2nd_Quest
   8642  26dc		       10 0a		      BPL	.skipL0456
   8643  26de				   .condpart277
   8644  26de		       a5 dc		      LDA	_Enemy_Type
   8645  26e0		       c9 00		      CMP	#_Goomba
   8646  26e2		       d0 04		      BNE	.skip277then
   8647  26e4				   .condpart278
   8648  26e4		       a9 04		      LDA	#_Beetle
   8649  26e6		       85 dc		      STA	_Enemy_Type
   8650  26e8				   .skip277then
   8651  26e8				   .skipL0456
   8652  26e8				   .
   8653  26e8							; 
   8654  26e8
   8655  26e8				   .L0457		;  if _Bit7_2nd_Quest{7}  &&  _Enemy_Type  =  _Two_Goombas then _Enemy_Type  =  _Beetle
   8656  26e8
   8657  26e8		       24 d9		      BIT	_Bit7_2nd_Quest
   8658  26ea		       10 0a		      BPL	.skipL0457
   8659  26ec				   .condpart279
   8660  26ec		       a5 dc		      LDA	_Enemy_Type
   8661  26ee		       c9 2a		      CMP	#_Two_Goombas
   8662  26f0		       d0 04		      BNE	.skip279then
   8663  26f2				   .condpart280
   8664  26f2		       a9 04		      LDA	#_Beetle
   8665  26f4		       85 dc		      STA	_Enemy_Type
   8666  26f6				   .skip279then
   8667  26f6				   .skipL0457
   8668  26f6				   .
   8669  26f6							; 
   8670  26f6
   8671  26f6				   .L0458		;  if _Bit7_2nd_Quest{7}  &&  _Enemy_Type  =  _Green_Koopa  &&  _Animation_Timer  >  3 then _Enemy_Type  =  _Red_Koopa
   8672  26f6
   8673  26f6		       24 d9		      BIT	_Bit7_2nd_Quest
   8674  26f8		       10 10		      BPL	.skipL0458
   8675  26fa				   .condpart281
   8676  26fa		       a5 dc		      LDA	_Enemy_Type
   8677  26fc		       c9 02		      CMP	#_Green_Koopa
   8678  26fe		       d0 0a		      BNE	.skip281then
   8679  2700				   .condpart282
   8680  2700		       a9 03		      LDA	#3
   8681  2702		       c5 d4		      CMP	_Animation_Timer
   8682  2704		       b0 04		      BCS	.skip282then
   8683  2706				   .condpart283
   8684  2706		       a9 08		      LDA	#_Red_Koopa
   8685  2708		       85 dc		      STA	_Enemy_Type
   8686  270a				   .skip282then
   8687  270a				   .skip281then
   8688  270a				   .skipL0458
   8689  270a				   .
   8690  270a							; 
   8691  270a
   8692  270a				   .L0459		;  if _Enemy_Type  =  _Two_Thwomps then z  =  24  :  _Enemy_Momentum  =  0  :	_Bit3_Enemy_Direction{3}  =  0	:  goto __Finish_Enemy_Init
   8693  270a
   8694  270a		       a5 dc		      LDA	_Enemy_Type
   8695  270c		       c9 2c		      CMP	#_Two_Thwomps
   8696  270e		       d0 11		      BNE	.skipL0459
   8697  2710				   .condpart284
   8698  2710		       a9 18		      LDA	#24
   8699  2712		       85 ed		      STA	z
   8700  2714		       a9 00		      LDA	#0
   8701  2716		       85 dd		      STA	_Enemy_Momentum
   8702  2718		       a5 da		      LDA	_Bit3_Enemy_Direction
   8703  271a		       29 f7		      AND	#247
   8704  271c		       85 da		      STA	_Bit3_Enemy_Direction
   8705  271e		       4c 60 38 	      jmp	.__Finish_Enemy_Init
   8706  2721
   8707  2721				   .skipL0459
   8708  2721				   .
   8709  2721							; 
   8710  2721
   8711  2721				   .L0460		;  if _Enemy_Type  =  _Bullet_Bill  &&  _Level  =  4  &&  _Bit0_Player_Facing_Direction{0} then _Enemy_Type  =  _Goomba  :  return thisbank
   8712  2721
   8713  2721		       a5 dc		      LDA	_Enemy_Type
   8714  2723		       c9 0c		      CMP	#_Bullet_Bill
   8715  2725		       d0 10		      BNE	.skipL0460
   8716  2727				   .condpart285
   8717  2727		       a5 ea		      LDA	_Level
   8718  2729		       c9 04		      CMP	#4
   8719  272b		       d0 0a		      BNE	.skip285then
   8720  272d				   .condpart286
   8721  272d		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   8722  272f		       4a		      LSR
   8723  2730		       90 05		      BCC	.skip286then
   8724  2732				   .condpart287
   8725  2732		       a9 00		      LDA	#_Goomba
   8726  2734		       85 dc		      STA	_Enemy_Type
   8727  2736		       60		      RTS
   8728  2737				   .skip286then
   8729  2737				   .skip285then
   8730  2737				   .skipL0460
   8731  2737				   .
   8732  2737							; 
   8733  2737
   8734  2737				   .L0461		;  if _Enemy_Type  =  _Bullet_Bill then AUDC0	=  8  :  AUDF0	=  31
   8735  2737
   8736  2737		       a5 dc		      LDA	_Enemy_Type
   8737  2739		       c9 0c		      CMP	#_Bullet_Bill
   8738  273b		       d0 08		      BNE	.skipL0461
   8739  273d				   .condpart288
   8740  273d		       a9 08		      LDA	#8
   8741  273f		       85 15		      STA	AUDC0
   8742  2741		       a9 1f		      LDA	#31
   8743  2743		       85 17		      STA	AUDF0
   8744  2745				   .skipL0461
   8745  2745				   .
   8746  2745							; 
   8747  2745
   8748  2745				   .L0462		;  if _Enemy_Type  >  9  &&  _Enemy_Type  <  15 then z  =   ( _Animation_Timer  +  8 )   *  4	:  goto __Enemy_Facing_Init
   8749  2745
   8750  2745		       a9 09		      LDA	#9
   8751  2747		       c5 dc		      CMP	_Enemy_Type
   8752  2749		       b0 12		      BCS	.skipL0462
   8753  274b				   .condpart289
   8754  274b		       a5 dc		      LDA	_Enemy_Type
   8755  274d		       c9 0f		      CMP	#15
   8756  274f		       b0 0c		      BCS	.skip289then
   8757  2751				   .condpart290
   8758  2751							; complex statement detected
   8759  2751		       a5 d4		      LDA	_Animation_Timer
   8760  2753		       18		      CLC
   8761  2754		       69 08		      ADC	#8
   8762  2756		       0a		      asl
   8763  2757		       0a		      asl
   8764  2758		       85 ed		      STA	z
   8765  275a		       4c 4a 38 	      jmp	.__Enemy_Facing_Init
   8766  275d
   8767  275d				   .skip289then
   8768  275d				   .skipL0462
   8769  275d				   .
   8770  275d							; 
   8771  275d
   8772  275d				   .L0463		;  if _Enemy_Type  =  _Spiney_Ball  &&  _Level  =  4 then _Enemy_Type	=  _Thwomp  :  z  =  24  :  _Enemy_Momentum  =	0  :  _Bit3_Enemy_Direction{3}	=  0  :  goto __Finish_Enemy_Init
   8773  275d
   8774  275d		       a5 dc		      LDA	_Enemy_Type
   8775  275f		       c9 10		      CMP	#_Spiney_Ball
   8776  2761		       d0 1b		      BNE	.skipL0463
   8777  2763				   .condpart291
   8778  2763		       a5 ea		      LDA	_Level
   8779  2765		       c9 04		      CMP	#4
   8780  2767		       d0 15		      BNE	.skip291then
   8781  2769				   .condpart292
   8782  2769		       a9 28		      LDA	#_Thwomp
   8783  276b		       85 dc		      STA	_Enemy_Type
   8784  276d		       a9 18		      LDA	#24
   8785  276f		       85 ed		      STA	z
   8786  2771		       a9 00		      LDA	#0
   8787  2773		       85 dd		      STA	_Enemy_Momentum
   8788  2775		       a5 da		      LDA	_Bit3_Enemy_Direction
   8789  2777		       29 f7		      AND	#247
   8790  2779		       85 da		      STA	_Bit3_Enemy_Direction
   8791  277b		       4c 60 38 	      jmp	.__Finish_Enemy_Init
   8792  277e
   8793  277e				   .skip291then
   8794  277e				   .skipL0463
   8795  277e				   .
   8796  277e							; 
   8797  277e
   8798  277e				   .L0464		;  if _Enemy_Type  =  _Spiney_Ball  &&  _Level  =  2 then _Enemy_Type	=  _Thwomp  :  z  =  24  :  _Enemy_Momentum  =	0  :  _Bit3_Enemy_Direction{3}	=  0  :  goto __Finish_Enemy_Init
   8799  277e
   8800  277e		       a5 dc		      LDA	_Enemy_Type
   8801  2780		       c9 10		      CMP	#_Spiney_Ball
   8802  2782		       d0 1b		      BNE	.skipL0464
   8803  2784				   .condpart293
   8804  2784		       a5 ea		      LDA	_Level
   8805  2786		       c9 02		      CMP	#2
   8806  2788		       d0 15		      BNE	.skip293then
   8807  278a				   .condpart294
   8808  278a		       a9 28		      LDA	#_Thwomp
   8809  278c		       85 dc		      STA	_Enemy_Type
   8810  278e		       a9 18		      LDA	#24
   8811  2790		       85 ed		      STA	z
   8812  2792		       a9 00		      LDA	#0
   8813  2794		       85 dd		      STA	_Enemy_Momentum
   8814  2796		       a5 da		      LDA	_Bit3_Enemy_Direction
   8815  2798		       29 f7		      AND	#247
   8816  279a		       85 da		      STA	_Bit3_Enemy_Direction
   8817  279c		       4c 60 38 	      jmp	.__Finish_Enemy_Init
   8818  279f
   8819  279f				   .skip293then
   8820  279f				   .skipL0464
   8821  279f				   .
   8822  279f							; 
   8823  279f
   8824  279f				   .L0465		;  if _Enemy_Type  =  _Spiney_Ball then z  =  8  :  _Bit3_Enemy_Direction{3}  =  0  :	goto __Finish_Enemy_Init
   8825  279f
   8826  279f		       a5 dc		      LDA	_Enemy_Type
   8827  27a1		       c9 10		      CMP	#_Spiney_Ball
   8828  27a3		       d0 0d		      BNE	.skipL0465
   8829  27a5				   .condpart295
   8830  27a5		       a9 08		      LDA	#8
   8831  27a7		       85 ed		      STA	z
   8832  27a9		       a5 da		      LDA	_Bit3_Enemy_Direction
   8833  27ab		       29 f7		      AND	#247
   8834  27ad		       85 da		      STA	_Bit3_Enemy_Direction
   8835  27af		       4c 60 38 	      jmp	.__Finish_Enemy_Init
   8836  27b2
   8837  27b2				   .skipL0465
   8838  27b2				   .
   8839  27b2							; 
   8840  27b2
   8841  27b2				   .L0466		;  if _Enemy_Type  =  _Fireball_Enemy then z  =  121  :  _Bit3_Enemy_Direction{3}  =  0  :  _Enemy_Momentum  =  6  :  goto __Finish_Enemy_Init
   8842  27b2
   8843  27b2		       a5 dc		      LDA	_Enemy_Type
   8844  27b4		       c9 12		      CMP	#_Fireball_Enemy
   8845  27b6		       d0 11		      BNE	.skipL0466
   8846  27b8				   .condpart296
   8847  27b8		       a9 79		      LDA	#121
   8848  27ba		       85 ed		      STA	z
   8849  27bc		       a5 da		      LDA	_Bit3_Enemy_Direction
   8850  27be		       29 f7		      AND	#247
   8851  27c0		       85 da		      STA	_Bit3_Enemy_Direction
   8852  27c2		       a9 06		      LDA	#6
   8853  27c4		       85 dd		      STA	_Enemy_Momentum
   8854  27c6		       4c 60 38 	      jmp	.__Finish_Enemy_Init
   8855  27c9
   8856  27c9				   .skipL0466
   8857  27c9				   .
   8858  27c9							; 
   8859  27c9
   8860  27c9				   .L0467		;  if _Enemy_Type  =  _Kinetic_Platforms then z  =  48  :  _Bit3_Enemy_Direction{3}  =  0  :  goto __Finish_Enemy_Init
   8861  27c9
   8862  27c9		       a5 dc		      LDA	_Enemy_Type
   8863  27cb		       c9 1c		      CMP	#_Kinetic_Platforms
   8864  27cd		       d0 0d		      BNE	.skipL0467
   8865  27cf				   .condpart297
   8866  27cf		       a9 30		      LDA	#48
   8867  27d1		       85 ed		      STA	z
   8868  27d3		       a5 da		      LDA	_Bit3_Enemy_Direction
   8869  27d5		       29 f7		      AND	#247
   8870  27d7		       85 da		      STA	_Bit3_Enemy_Direction
   8871  27d9		       4c 60 38 	      jmp	.__Finish_Enemy_Init
   8872  27dc
   8873  27dc				   .skipL0467
   8874  27dc				   .
   8875  27dc							; 
   8876  27dc
   8877  27dc				   .L0468		;  if _Enemy_Type  =  _Pirahna_Plant then z  =  120  :  _Enemy_Momentum  =  0	:  _Bit3_Enemy_Direction{3}  =	1  :  goto __Finish_Enemy_Init
   8878  27dc
   8879  27dc		       a5 dc		      LDA	_Enemy_Type
   8880  27de		       c9 1e		      CMP	#_Pirahna_Plant
   8881  27e0		       d0 11		      BNE	.skipL0468
   8882  27e2				   .condpart298
   8883  27e2		       a9 78		      LDA	#120
   8884  27e4		       85 ed		      STA	z
   8885  27e6		       a9 00		      LDA	#0
   8886  27e8		       85 dd		      STA	_Enemy_Momentum
   8887  27ea		       a5 da		      LDA	_Bit3_Enemy_Direction
   8888  27ec		       09 08		      ORA	#8
   8889  27ee		       85 da		      STA	_Bit3_Enemy_Direction
   8890  27f0		       4c 60 38 	      jmp	.__Finish_Enemy_Init
   8891  27f3
   8892  27f3				   .skipL0468
   8893  27f3				   .
   8894  27f3							; 
   8895  27f3
   8896  27f3				   .L0469		;  y  =  1
   8897  27f3
   8898  27f3		       a9 01		      LDA	#1
   8899  27f5		       85 ec		      STA	y
   8900  27f7				   .
   8901  27f7							; 
   8902  27f7
   8903  27f7				   .L0470		;  if _Bit0_Player_Facing_Direction{0} then x	=  0 else x  =	31
   8904  27f7
   8905  27f7		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   8906  27f9		       4a		      LSR
   8907  27fa		       90 07		      BCC	.skipL0470
   8908  27fc				   .condpart299
   8909  27fc		       a9 00		      LDA	#0
   8910  27fe		       85 eb		      STA	x
   8911  2800		       4c 07 38 	      jmp	.skipelse57
   8912  2803				   .skipL0470
   8913  2803		       a9 1f		      LDA	#31
   8914  2805		       85 eb		      STA	x
   8915  2807				   .skipelse57
   8916  2807				   .
   8917  2807							; 
   8918  2807
   8919  2807				   .__Init_Enemy_Placement
   8920  2807							; __Init_Enemy_Placement
   8921  2807
   8922  2807				   .
   8923  2807							; 
   8924  2807
   8925  2807				   .L0471		;  y  =  y  +	1
   8926  2807
   8927  2807		       e6 ec		      INC	y
   8928  2809				   .
   8929  2809							; 
   8930  2809
   8931  2809				   .
   8932  2809							; 
   8933  2809
   8934  2809				   .
   8935  2809							; 
   8936  2809
   8937  2809				   .
   8938  2809							; 
   8939  2809
   8940  2809				   .L0472		;  if y  =  11 then return
   8941  2809
   8942  2809		       a5 ec		      LDA	y
   8943  280b		       c9 0b		      CMP	#11
   8944  280d		       d0 0d		      BNE	.skipL0472
   8945  280f				   .condpart300
   8946  280f		       ba		      tsx
   8947  2810		       b5 02		      lda	2,x	; check return address
   8948  2812		       49 38		      eor	#(>*)	; vs. current PCH
   8949  2814		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   8950  2816		       f0 03		      beq	*+5	; if equal, do normal return
   8951  2818		       4c dd ff 	      JMP	BS_return
   8952  281b		       60		      RTS
   8953  281c				   .skipL0472
   8954  281c				   .
   8955  281c							; 
   8956  281c
   8957  281c				   .L0473		;  if pfread ( x , y )  then z  =   ( y  *  8 )   -  1 else goto __Init_Enemy_Placement
   8958  281c
   8959  281c		       a5 eb		      LDA	x
   8960  281e		       a4 ec		      LDY	y
   8961  2820		       85 ee		      sta	temp7
   8962  2822		       a9 38		      lda	#>(ret_point27-1)
   8963  2824		       48		      pha
   8964  2825		       a9 37		      lda	#<(ret_point27-1)
   8965  2827		       48		      pha
   8966  2828		       a9 f2		      lda	#>(pfread-1)
   8967  282a		       48		      pha
   8968  282b		       a9 ab		      lda	#<(pfread-1)
   8969  282d		       48		      pha
   8970  282e		       a5 ee		      lda	temp7
   8971  2830		       48		      pha
   8972  2831		       8a		      txa
   8973  2832		       48		      pha
   8974  2833		       a2 08		      ldx	#8
   8975  2835		       4c eb ff 	      jmp	BS_jsr
   8976  2838				   ret_point27
   8977  2838		       d0 0d		      BNE	.skipL0473
   8978  283a				   .condpart301
   8979  283a							; complex statement detected
   8980  283a		       a5 ec		      LDA	y
   8981  283c		       0a		      asl
   8982  283d		       0a		      asl
   8983  283e		       0a		      asl
   8984  283f		       38		      SEC
   8985  2840		       e9 01		      SBC	#1
   8986  2842		       85 ed		      STA	z
   8987  2844		       4c 4a 38 	      jmp	.skipelse58
   8988  2847				   .skipL0473
   8989  2847		       4c 07 38 	      jmp	.__Init_Enemy_Placement
   8990  284a
   8991  284a				   .skipelse58
   8992  284a				   .
   8993  284a							; 
   8994  284a
   8995  284a				   .__Enemy_Facing_Init
   8996  284a							; __Enemy_Facing_Init
   8997  284a
   8998  284a				   .
   8999  284a							; 
   9000  284a
   9001  284a				   .L0474		;  if _Bit0_Player_Facing_Direction{0} then _Bit3_Enemy_Direction{3}  =  1
   9002  284a
   9003  284a		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   9004  284c		       4a		      LSR
   9005  284d		       90 06		      BCC	.skipL0474
   9006  284f				   .condpart302
   9007  284f		       a5 da		      LDA	_Bit3_Enemy_Direction
   9008  2851		       09 08		      ORA	#8
   9009  2853		       85 da		      STA	_Bit3_Enemy_Direction
   9010  2855				   .skipL0474
   9011  2855				   .
   9012  2855							; 
   9013  2855
   9014  2855				   .L0475		;  if !_Bit0_Player_Facing_Direction{0} then _Bit3_Enemy_Direction{3}	=  0
   9015  2855
   9016  2855		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   9017  2857		       4a		      LSR
   9018  2858		       b0 06		      BCS	.skipL0475
   9019  285a				   .condpart303
   9020  285a		       a5 da		      LDA	_Bit3_Enemy_Direction
   9021  285c		       29 f7		      AND	#247
   9022  285e		       85 da		      STA	_Bit3_Enemy_Direction
   9023  2860				   .skipL0475
   9024  2860				   .
   9025  2860							; 
   9026  2860
   9027  2860				   .__Finish_Enemy_Init
   9028  2860							; __Finish_Enemy_Init
   9029  2860
   9030  2860				   .
   9031  2860							; 
   9032  2860
   9033  2860				   .L0476		;  if _Bit0_Player_Facing_Direction{0} then x	=  17 else x  =  135
   9034  2860
   9035  2860		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   9036  2862		       4a		      LSR
   9037  2863		       90 07		      BCC	.skipL0476
   9038  2865				   .condpart304
   9039  2865		       a9 11		      LDA	#17
   9040  2867		       85 eb		      STA	x
   9041  2869		       4c 70 38 	      jmp	.skipelse59
   9042  286c				   .skipL0476
   9043  286c		       a9 87		      LDA	#135
   9044  286e		       85 eb		      STA	x
   9045  2870				   .skipelse59
   9046  2870				   .
   9047  2870							; 
   9048  2870
   9049  2870				   .L0477		;  if _Enemy_Type  =  _Spiney_Ball then x  =  96  +   ( _Animation_Timer  *  4 ) 
   9050  2870
   9051  2870		       a5 dc		      LDA	_Enemy_Type
   9052  2872		       c9 10		      CMP	#_Spiney_Ball
   9053  2874		       d0 0f		      BNE	.skipL0477
   9054  2876				   .condpart305
   9055  2876							; complex statement detected
   9056  2876		       a9 60		      LDA	#96
   9057  2878		       48		      PHA
   9058  2879		       a5 d4		      LDA	_Animation_Timer
   9059  287b		       0a		      asl
   9060  287c		       0a		      asl
   9061  287d		       ba		      TSX
   9062  287e		       e8		      INX
   9063  287f		       9a		      TXS
   9064  2880		       18		      CLC
   9065  2881		       75 00		      ADC	$00,x
   9066  2883		       85 eb		      STA	x
   9067  2885				   .skipL0477
   9068  2885				   .
   9069  2885							; 
   9070  2885
   9071  2885				   .L0478		;  player1x  =  x  :  player1y  =  z
   9072  2885
   9073  2885		       a5 eb		      LDA	x
   9074  2887		       85 81		      STA	player1x
   9075  2889		       a5 ed		      LDA	z
   9076  288b		       85 86		      STA	player1y
   9077  288d				   .
   9078  288d							; 
   9079  288d
   9080  288d				   .L0479		;  if _Enemy_Type  =  _Flagpole  ||  _Enemy_Type  =  _Trampoline then _Bit3_Enemy_Direction{3}  =  0
   9081  288d
   9082  288d		       a5 dc		      LDA	_Enemy_Type
   9083  288f		       c9 14		      CMP	#_Flagpole
   9084  2891		       d0 03		      BNE	.skipL0479
   9085  2893				   .condpart306
   9086  2893		       4c 9c 38 	      jmp	.condpart307
   9087  2896				   .skipL0479
   9088  2896		       a5 dc		      LDA	_Enemy_Type
   9089  2898		       c9 26		      CMP	#_Trampoline
   9090  289a		       d0 06		      BNE	.skip84OR
   9091  289c				   .condpart307
   9092  289c		       a5 da		      LDA	_Bit3_Enemy_Direction
   9093  289e		       29 f7		      AND	#247
   9094  28a0		       85 da		      STA	_Bit3_Enemy_Direction
   9095  28a2				   .skip84OR
   9096  28a2				   .
   9097  28a2							; 
   9098  28a2
   9099  28a2				   .L0480		;  gosub __Render_Screen bank1
   9100  28a2
   9101  28a2		       85 ee		      sta	temp7
   9102  28a4		       a9 38		      lda	#>(ret_point28-1)
   9103  28a6		       48		      pha
   9104  28a7		       a9 b9		      lda	#<(ret_point28-1)
   9105  28a9		       48		      pha
   9106  28aa		       a9 1d		      lda	#>(.__Render_Screen-1)
   9107  28ac		       48		      pha
   9108  28ad		       a9 ab		      lda	#<(.__Render_Screen-1)
   9109  28af		       48		      pha
   9110  28b0		       a5 ee		      lda	temp7
   9111  28b2		       48		      pha
   9112  28b3		       8a		      txa
   9113  28b4		       48		      pha
   9114  28b5		       a2 01		      ldx	#1
   9115  28b7		       4c eb ff 	      jmp	BS_jsr
   9116  28ba				   ret_point28
   9117  28ba				   .
   9118  28ba							; 
   9119  28ba
   9120  28ba				   .L0481		;  return thisbank
   9121  28ba
   9122  28ba		       60		      RTS
   9123  28bb				   .
   9124  28bb							; 
   9125  28bb
   9126  28bb				   .
   9127  28bb							; 
   9128  28bb
   9129  28bb				   .
   9130  28bb							; 
   9131  28bb
   9132  28bb				   .
   9133  28bb							; 
   9134  28bb
   9135  28bb				   .L0482		;  if _Bit0_Player_Facing_Direction{0} then y	=  0 else y  =	8
   9136  28bb
   9137  28bb		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
   9138  28bd		       4a		      LSR
   9139  28be		       90 07		      BCC	.skipL0482
   9140  28c0				   .condpart308
   9141  28c0		       a9 00		      LDA	#0
   9142  28c2		       85 ec		      STA	y
   9143  28c4		       4c cb 38 	      jmp	.skipelse60
   9144  28c7				   .skipL0482
   9145  28c7		       a9 08		      LDA	#8
   9146  28c9		       85 ec		      STA	y
   9147  28cb				   .skipelse60
   9148  28cb				   .
   9149  28cb							; 
   9150  28cb
   9151  28cb				   .L0483		;  player1x  =  player1x  +  4  -  y
   9152  28cb
   9153  28cb							; complex statement detected
   9154  28cb		       a5 81		      LDA	player1x
   9155  28cd		       18		      CLC
   9156  28ce		       69 04		      ADC	#4
   9157  28d0		       38		      SEC
   9158  28d1		       e5 ec		      SBC	y
   9159  28d3		       85 81		      STA	player1x
   9160  28d5				   .
   9161  28d5							; 
   9162  28d5
   9163  28d5				   .L0484		;  return thisbank
   9164  28d5
   9165  28d5		       60		      RTS
   9166  28d6				   .
   9167  28d6							; 
   9168  28d6
   9169  28d6				   .
   9170  28d6							; 
   9171  28d6
   9172  28d6				   .
   9173  28d6							; 
   9174  28d6
   9175  28d6				   .
   9176  28d6							; 
   9177  28d6
   9178  28d6				   .__Kill_Enemy
   9179  28d6							; __Kill_Enemy
   9180  28d6
   9181  28d6				   .
   9182  28d6							; 
   9183  28d6
   9184  28d6				   .L0485		;  player1x  =  0  :  player1y  =  150  :  _Enemy_Type  =  _Goomba  :	_Bit3_Enemy_Direction{3}  =  0	:  _Enemy_Momentum  =  0  :  _Bit4_Enemy_Dead_Flag{4}  =  0
   9185  28d6
   9186  28d6		       a9 00		      LDA	#0
   9187  28d8		       85 81		      STA	player1x
   9188  28da		       a9 96		      LDA	#150
   9189  28dc		       85 86		      STA	player1y
   9190  28de		       a9 00		      LDA	#_Goomba
   9191  28e0		       85 dc		      STA	_Enemy_Type
   9192  28e2		       a5 da		      LDA	_Bit3_Enemy_Direction
   9193  28e4		       29 f7		      AND	#247
   9194  28e6		       85 da		      STA	_Bit3_Enemy_Direction
   9195  28e8		       a9 00		      LDA	#0
   9196  28ea		       85 dd		      STA	_Enemy_Momentum
   9197  28ec		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
   9198  28ee		       29 ef		      AND	#239
   9199  28f0		       85 da		      STA	_Bit4_Enemy_Dead_Flag
   9200  28f2				   .
   9201  28f2							; 
   9202  28f2
   9203  28f2				   .L0486		;  return thisbank
   9204  28f2
   9205  28f2		       60		      RTS
   9206  28f3				   .
   9207  28f3							; 
   9208  28f3
   9209  28f3				   .__Fix_Enemy
   9210  28f3							; __Fix_Enemy
   9211  28f3
   9212  28f3				   .
   9213  28f3							; 
   9214  28f3
   9215  28f3				   .L0487		;  if _Bit3_Enemy_Direction{3} then _Bit3_Enemy_Direction{3}  =  0 else _Bit3_Enemy_Direction{3}  =  1
   9216  28f3
   9217  28f3		       a5 da		      LDA	_Bit3_Enemy_Direction
   9218  28f5		       29 08		      AND	#8
   9219  28f7		       f0 09		      BEQ	.skipL0487
   9220  28f9				   .condpart309
   9221  28f9		       a5 da		      LDA	_Bit3_Enemy_Direction
   9222  28fb		       29 f7		      AND	#247
   9223  28fd		       85 da		      STA	_Bit3_Enemy_Direction
   9224  28ff		       4c 08 39 	      jmp	.skipelse61
   9225  2902				   .skipL0487
   9226  2902		       a5 da		      LDA	_Bit3_Enemy_Direction
   9227  2904		       09 08		      ORA	#8
   9228  2906		       85 da		      STA	_Bit3_Enemy_Direction
   9229  2908				   .skipelse61
   9230  2908				   .
   9231  2908							; 
   9232  2908
   9233  2908				   .L0488		;  x  =  2
   9234  2908
   9235  2908		       a9 02		      LDA	#2
   9236  290a		       85 eb		      STA	x
   9237  290c				   .
   9238  290c							; 
   9239  290c
   9240  290c				   .L0489		;  if _Enemy_Type  =  _Green_Koopa  ||  _Enemy_Type  =  _Flying_Green_Koopa then x  =	4
   9241  290c
   9242  290c		       a5 dc		      LDA	_Enemy_Type
   9243  290e		       c9 02		      CMP	#_Green_Koopa
   9244  2910		       d0 03		      BNE	.skipL0489
   9245  2912				   .condpart310
   9246  2912		       4c 1b 39 	      jmp	.condpart311
   9247  2915				   .skipL0489
   9248  2915		       a5 dc		      LDA	_Enemy_Type
   9249  2917		       c9 0a		      CMP	#_Flying_Green_Koopa
   9250  2919		       d0 04		      BNE	.skip85OR
   9251  291b				   .condpart311
   9252  291b		       a9 04		      LDA	#4
   9253  291d		       85 eb		      STA	x
   9254  291f				   .skip85OR
   9255  291f				   .
   9256  291f							; 
   9257  291f
   9258  291f				   .L0490		;  if _Enemy_Type  =  _Red_Koopa then x  =  4
   9259  291f
   9260  291f		       a5 dc		      LDA	_Enemy_Type
   9261  2921		       c9 08		      CMP	#_Red_Koopa
   9262  2923		       d0 04		      BNE	.skipL0490
   9263  2925				   .condpart312
   9264  2925		       a9 04		      LDA	#4
   9265  2927		       85 eb		      STA	x
   9266  2929				   .skipL0490
   9267  2929				   .
   9268  2929							; 
   9269  2929
   9270  2929				   .L0491		;  if _Bit7_2nd_Quest{7} then x  =  x	*  2
   9271  2929
   9272  2929		       24 d9		      BIT	_Bit7_2nd_Quest
   9273  292b		       10 05		      BPL	.skipL0491
   9274  292d				   .condpart313
   9275  292d		       a5 eb		      LDA	x
   9276  292f		       0a		      asl
   9277  2930		       85 eb		      STA	x
   9278  2932				   .skipL0491
   9279  2932				   .
   9280  2932							; 
   9281  2932
   9282  2932				   .L0492		;  if _Bit3_Enemy_Direction{3} then player1x  =  player1x  +  x else player1x	=  player1x  -	x
   9283  2932
   9284  2932		       a5 da		      LDA	_Bit3_Enemy_Direction
   9285  2934		       29 08		      AND	#8
   9286  2936		       f0 0a		      BEQ	.skipL0492
   9287  2938				   .condpart314
   9288  2938		       a5 81		      LDA	player1x
   9289  293a		       18		      CLC
   9290  293b		       65 eb		      ADC	x
   9291  293d		       85 81		      STA	player1x
   9292  293f		       4c 49 39 	      jmp	.skipelse62
   9293  2942				   .skipL0492
   9294  2942		       a5 81		      LDA	player1x
   9295  2944		       38		      SEC
   9296  2945		       e5 eb		      SBC	x
   9297  2947		       85 81		      STA	player1x
   9298  2949				   .skipelse62
   9299  2949				   .
   9300  2949							; 
   9301  2949
   9302  2949				   .L0493		;  return thisbank
   9303  2949
   9304  2949		       60		      RTS
   9305  294a				   .
   9306  294a							; 
   9307  294a
   9308  294a				   .
   9309  294a							; 
   9310  294a
   9311  294a				   .
   9312  294a							; 
   9313  294a
   9314  294a				   .
   9315  294a							; 
   9316  294a
   9317  294a				   .
   9318  294a							; 
   9319  294a
   9320  294a				   .
   9321  294a							; 
   9322  294a
   9323  294a				   .__Enemy_Death_Routine
   9324  294a							; __Enemy_Death_Routine
   9325  294a
   9326  294a				   .
   9327  294a							; 
   9328  294a
   9329  294a				   .L0494		;  player1y  =  player1y  +  _Enemy_Momentum
   9330  294a
   9331  294a		       a5 86		      LDA	player1y
   9332  294c		       18		      CLC
   9333  294d		       65 dd		      ADC	_Enemy_Momentum
   9334  294f		       85 86		      STA	player1y
   9335  2951				   .
   9336  2951							; 
   9337  2951
   9338  2951				   .L0495		;  if _Enemy_Momentum	<  6 then _Enemy_Momentum  =  _Enemy_Momentum  +  1
   9339  2951
   9340  2951		       a5 dd		      LDA	_Enemy_Momentum
   9341  2953		       c9 06		      CMP	#6
   9342  2955		       b0 02		      BCS	.skipL0495
   9343  2957				   .condpart315
   9344  2957		       e6 dd		      INC	_Enemy_Momentum
   9345  2959				   .skipL0495
   9346  2959				   .
   9347  2959							; 
   9348  2959
   9349  2959				   .L0496		;  if player1y  >  90 then gosub __Kill_Enemy
   9350  2959
   9351  2959		       a9 5a		      LDA	#90
   9352  295b		       c5 86		      CMP	player1y
   9353  295d		       b0 03		      BCS	.skipL0496
   9354  295f				   .condpart316
   9355  295f		       20 d6 38 	      jsr	.__Kill_Enemy
   9356  2962
   9357  2962				   .skipL0496
   9358  2962				   .
   9359  2962							; 
   9360  2962
   9361  2962				   .L0497		;  if _Enemy_Momentum	=  6 then goto __Enemy_End_Move
   9362  2962
   9363  2962		       a5 dd		      LDA	_Enemy_Momentum
   9364  2964		       c9 06		      CMP	#6
   9365  2966		       d0 03		      BNE	.skipL0497
   9366  2968				   .condpart317
   9367  2968		       4c 10 33 	      jmp	.__Enemy_End_Move
   9368  296b
   9369  296b				   .skipL0497
   9370  296b				   .
   9371  296b							; 
   9372  296b
   9373  296b				   .L0498		;  temp4  =  26  -  _Enemy_Momentum
   9374  296b
   9375  296b		       a9 1a		      LDA	#26
   9376  296d		       38		      SEC
   9377  296e		       e5 dd		      SBC	_Enemy_Momentum
   9378  2970		       85 9f		      STA	temp4
   9379  2972				   .
   9380  2972							; 
   9381  2972
   9382  2972				   .L0499		;  AUDV0  =  12
   9383  2972
   9384  2972		       a9 0c		      LDA	#12
   9385  2974		       85 19		      STA	AUDV0
   9386  2976				   .L0500		;  AUDC0  =  4
   9387  2976
   9388  2976		       a9 04		      LDA	#4
   9389  2978		       85 15		      STA	AUDC0
   9390  297a				   .L0501		;  AUDF0  =  temp4
   9391  297a
   9392  297a		       a5 9f		      LDA	temp4
   9393  297c		       85 17		      STA	AUDF0
   9394  297e				   .
   9395  297e							; 
   9396  297e
   9397  297e				   .L0502		;  goto __Enemy_End_Move
   9398  297e
   9399  297e		       4c 10 33 	      jmp	.__Enemy_End_Move
   9400  2981
   9401  2981				   .
   9402  2981							; 
   9403  2981
   9404  2981				   .
   9405  2981							; 
   9406  2981
   9407  2981				   .
   9408  2981							; 
   9409  2981
   9410  2981				   .
   9411  2981							; 
   9412  2981
   9413  2981				   .__Moving_Shell_Routine
   9414  2981							; __Moving_Shell_Routine
   9415  2981
   9416  2981				   .
   9417  2981							; 
   9418  2981
   9419  2981				   .L0503		;  x  =  _Moving_Shell_X_Coordinate  +  1
   9420  2981
   9421  2981		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9422  2983		       18		      CLC
   9423  2984		       69 01		      ADC	#1
   9424  2986		       85 eb		      STA	x
   9425  2988				   .
   9426  2988							; 
   9427  2988
   9428  2988				   .L0504		;  pfpixel _Moving_Shell_X_Coordinate _Moving_Shell_Y_Coordinate off
   9429  2988
   9430  2988		       a2 01		      LDX	#1
   9431  298a		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
   9432  298c		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9433  298e		       85 ee		      sta	temp7
   9434  2990		       a9 39		      lda	#>(ret_point29-1)
   9435  2992		       48		      pha
   9436  2993		       a9 a5		      lda	#<(ret_point29-1)
   9437  2995		       48		      pha
   9438  2996		       a9 f2		      lda	#>(pfpixel-1)
   9439  2998		       48		      pha
   9440  2999		       a9 ba		      lda	#<(pfpixel-1)
   9441  299b		       48		      pha
   9442  299c		       a5 ee		      lda	temp7
   9443  299e		       48		      pha
   9444  299f		       8a		      txa
   9445  29a0		       48		      pha
   9446  29a1		       a2 08		      ldx	#8
   9447  29a3		       4c eb ff 	      jmp	BS_jsr
   9448  29a6				   ret_point29
   9449  29a6				   .
   9450  29a6							; 
   9451  29a6
   9452  29a6				   .L0505		;  pfpixel x _Moving_Shell_Y_Coordinate off
   9453  29a6
   9454  29a6		       a2 01		      LDX	#1
   9455  29a8		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
   9456  29aa		       a5 eb		      LDA	x
   9457  29ac		       85 ee		      sta	temp7
   9458  29ae		       a9 39		      lda	#>(ret_point30-1)
   9459  29b0		       48		      pha
   9460  29b1		       a9 c3		      lda	#<(ret_point30-1)
   9461  29b3		       48		      pha
   9462  29b4		       a9 f2		      lda	#>(pfpixel-1)
   9463  29b6		       48		      pha
   9464  29b7		       a9 ba		      lda	#<(pfpixel-1)
   9465  29b9		       48		      pha
   9466  29ba		       a5 ee		      lda	temp7
   9467  29bc		       48		      pha
   9468  29bd		       8a		      txa
   9469  29be		       48		      pha
   9470  29bf		       a2 08		      ldx	#8
   9471  29c1		       4c eb ff 	      jmp	BS_jsr
   9472  29c4				   ret_point30
   9473  29c4				   .
   9474  29c4							; 
   9475  29c4
   9476  29c4				   .L0506		;  if _Bit5_Moving_Turtle_Shell_Direction{5} then _Moving_Shell_X_Coordinate  =  _Moving_Shell_X_Coordinate  -  2 else _Moving_Shell_X_Coordinate  =  _Moving_Shell_X_Coordinate  +  2
   9477  29c4
   9478  29c4		       a5 da		      LDA	_Bit5_Moving_Turtle_Shell_Direction
   9479  29c6		       29 20		      AND	#32
   9480  29c8		       f0 0a		      BEQ	.skipL0506
   9481  29ca				   .condpart318
   9482  29ca		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9483  29cc		       38		      SEC
   9484  29cd		       e9 02		      SBC	#2
   9485  29cf		       85 e6		      STA	_Moving_Shell_X_Coordinate
   9486  29d1		       4c db 39 	      jmp	.skipelse63
   9487  29d4				   .skipL0506
   9488  29d4		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9489  29d6		       18		      CLC
   9490  29d7		       69 02		      ADC	#2
   9491  29d9		       85 e6		      STA	_Moving_Shell_X_Coordinate
   9492  29db				   .skipelse63
   9493  29db				   .
   9494  29db							; 
   9495  29db
   9496  29db				   .L0507		;  if _Moving_Shell_X_Coordinate  <  0 then _Moving_Shell_X_Coordinate  =  0  :  _Moving_Shell_Y_Coordinate  =  0  :  return thisbank
   9497  29db
   9498  29db		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9499  29dd		       c9 00		      CMP	#0
   9500  29df		       b0 07		      BCS	.skipL0507
   9501  29e1				   .condpart319
   9502  29e1		       a9 00		      LDA	#0
   9503  29e3		       85 e6		      STA	_Moving_Shell_X_Coordinate
   9504  29e5		       85 e7		      STA	_Moving_Shell_Y_Coordinate
   9505  29e7		       60		      RTS
   9506  29e8				   .skipL0507
   9507  29e8				   .
   9508  29e8							; 
   9509  29e8
   9510  29e8				   .L0508		;  if _Moving_Shell_X_Coordinate  >  30 then _Moving_Shell_X_Coordinate  =  0	:  _Moving_Shell_Y_Coordinate  =  0  :	return thisbank
   9511  29e8
   9512  29e8		       a9 1e		      LDA	#30
   9513  29ea		       c5 e6		      CMP	_Moving_Shell_X_Coordinate
   9514  29ec		       b0 07		      BCS	.skipL0508
   9515  29ee				   .condpart320
   9516  29ee		       a9 00		      LDA	#0
   9517  29f0		       85 e6		      STA	_Moving_Shell_X_Coordinate
   9518  29f2		       85 e7		      STA	_Moving_Shell_Y_Coordinate
   9519  29f4		       60		      RTS
   9520  29f5				   .skipL0508
   9521  29f5				   .
   9522  29f5							; 
   9523  29f5
   9524  29f5				   .L0509		;  y  =  _Moving_Shell_Y_Coordinate  +  1
   9525  29f5
   9526  29f5		       a5 e7		      LDA	_Moving_Shell_Y_Coordinate
   9527  29f7		       18		      CLC
   9528  29f8		       69 01		      ADC	#1
   9529  29fa		       85 ec		      STA	y
   9530  29fc				   .
   9531  29fc							; 
   9532  29fc
   9533  29fc				   .L0510		;  if pfread ( _Moving_Shell_X_Coordinate , y )  then goto __Moving_Shell_02
   9534  29fc
   9535  29fc		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9536  29fe		       a4 ec		      LDY	y
   9537  2a00		       85 ee		      sta	temp7
   9538  2a02		       a9 3a		      lda	#>(ret_point31-1)
   9539  2a04		       48		      pha
   9540  2a05		       a9 17		      lda	#<(ret_point31-1)
   9541  2a07		       48		      pha
   9542  2a08		       a9 f2		      lda	#>(pfread-1)
   9543  2a0a		       48		      pha
   9544  2a0b		       a9 ab		      lda	#<(pfread-1)
   9545  2a0d		       48		      pha
   9546  2a0e		       a5 ee		      lda	temp7
   9547  2a10		       48		      pha
   9548  2a11		       8a		      txa
   9549  2a12		       48		      pha
   9550  2a13		       a2 08		      ldx	#8
   9551  2a15		       4c eb ff 	      jmp	BS_jsr
   9552  2a18				   ret_point31
   9553  2a18		       d0 03		      BNE	.skipL0510
   9554  2a1a				   .condpart321
   9555  2a1a		       4c 4d 3a 	      jmp	.__Moving_Shell_02
   9556  2a1d
   9557  2a1d				   .skipL0510
   9558  2a1d				   .
   9559  2a1d							; 
   9560  2a1d
   9561  2a1d				   .L0511		;  if pfread ( x , y )  then goto __Moving_Shell_02
   9562  2a1d
   9563  2a1d		       a5 eb		      LDA	x
   9564  2a1f		       a4 ec		      LDY	y
   9565  2a21		       85 ee		      sta	temp7
   9566  2a23		       a9 3a		      lda	#>(ret_point32-1)
   9567  2a25		       48		      pha
   9568  2a26		       a9 38		      lda	#<(ret_point32-1)
   9569  2a28		       48		      pha
   9570  2a29		       a9 f2		      lda	#>(pfread-1)
   9571  2a2b		       48		      pha
   9572  2a2c		       a9 ab		      lda	#<(pfread-1)
   9573  2a2e		       48		      pha
   9574  2a2f		       a5 ee		      lda	temp7
   9575  2a31		       48		      pha
   9576  2a32		       8a		      txa
   9577  2a33		       48		      pha
   9578  2a34		       a2 08		      ldx	#8
   9579  2a36		       4c eb ff 	      jmp	BS_jsr
   9580  2a39				   ret_point32
   9581  2a39		       d0 03		      BNE	.skipL0511
   9582  2a3b				   .condpart322
   9583  2a3b		       4c 4d 3a 	      jmp	.__Moving_Shell_02
   9584  2a3e
   9585  2a3e				   .skipL0511
   9586  2a3e				   .
   9587  2a3e							; 
   9588  2a3e
   9589  2a3e				   .L0512		;  _Moving_Shell_Y_Coordinate	=  _Moving_Shell_Y_Coordinate  +  1
   9590  2a3e
   9591  2a3e		       e6 e7		      INC	_Moving_Shell_Y_Coordinate
   9592  2a40				   .
   9593  2a40							; 
   9594  2a40
   9595  2a40				   .L0513		;  if _Moving_Shell_Y_Coordinate  =  11 then _Moving_Shell_X_Coordinate  =  0	:  _Moving_Shell_Y_Coordinate  =  0  :	return thisbank
   9596  2a40
   9597  2a40		       a5 e7		      LDA	_Moving_Shell_Y_Coordinate
   9598  2a42		       c9 0b		      CMP	#11
   9599  2a44		       d0 07		      BNE	.skipL0513
   9600  2a46				   .condpart323
   9601  2a46		       a9 00		      LDA	#0
   9602  2a48		       85 e6		      STA	_Moving_Shell_X_Coordinate
   9603  2a4a		       85 e7		      STA	_Moving_Shell_Y_Coordinate
   9604  2a4c		       60		      RTS
   9605  2a4d				   .skipL0513
   9606  2a4d				   .
   9607  2a4d							; 
   9608  2a4d
   9609  2a4d				   .__Moving_Shell_02
   9610  2a4d							; __Moving_Shell_02
   9611  2a4d
   9612  2a4d				   .
   9613  2a4d							; 
   9614  2a4d
   9615  2a4d				   .L0514		;  if _Level  =  3 then goto __Moving_Shell_03
   9616  2a4d
   9617  2a4d		       a5 ea		      LDA	_Level
   9618  2a4f		       c9 03		      CMP	#3
   9619  2a51		       d0 03		      BNE	.skipL0514
   9620  2a53				   .condpart324
   9621  2a53		       4c a7 3a 	      jmp	.__Moving_Shell_03
   9622  2a56
   9623  2a56				   .skipL0514
   9624  2a56				   .
   9625  2a56							; 
   9626  2a56
   9627  2a56				   .L0515		;  y  =  0
   9628  2a56
   9629  2a56		       a9 00		      LDA	#0
   9630  2a58		       85 ec		      STA	y
   9631  2a5a				   .
   9632  2a5a							; 
   9633  2a5a
   9634  2a5a				   .L0516		;  if pfread ( _Moving_Shell_X_Coordinate , _Moving_Shell_Y_Coordinate )  then goto __Change_Shell_Direction
   9635  2a5a
   9636  2a5a		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9637  2a5c		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
   9638  2a5e		       85 ee		      sta	temp7
   9639  2a60		       a9 3a		      lda	#>(ret_point33-1)
   9640  2a62		       48		      pha
   9641  2a63		       a9 75		      lda	#<(ret_point33-1)
   9642  2a65		       48		      pha
   9643  2a66		       a9 f2		      lda	#>(pfread-1)
   9644  2a68		       48		      pha
   9645  2a69		       a9 ab		      lda	#<(pfread-1)
   9646  2a6b		       48		      pha
   9647  2a6c		       a5 ee		      lda	temp7
   9648  2a6e		       48		      pha
   9649  2a6f		       8a		      txa
   9650  2a70		       48		      pha
   9651  2a71		       a2 08		      ldx	#8
   9652  2a73		       4c eb ff 	      jmp	BS_jsr
   9653  2a76				   ret_point33
   9654  2a76		       d0 03		      BNE	.skipL0516
   9655  2a78				   .condpart325
   9656  2a78		       4c 64 3b 	      jmp	.__Change_Shell_Direction
   9657  2a7b
   9658  2a7b				   .skipL0516
   9659  2a7b				   .
   9660  2a7b							; 
   9661  2a7b
   9662  2a7b				   .L0517		;  y  =  1
   9663  2a7b
   9664  2a7b		       a9 01		      LDA	#1
   9665  2a7d		       85 ec		      STA	y
   9666  2a7f				   .
   9667  2a7f							; 
   9668  2a7f
   9669  2a7f				   .L0518		;  x  =  _Moving_Shell_X_Coordinate  +  1
   9670  2a7f
   9671  2a7f		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9672  2a81		       18		      CLC
   9673  2a82		       69 01		      ADC	#1
   9674  2a84		       85 eb		      STA	x
   9675  2a86				   .
   9676  2a86							; 
   9677  2a86
   9678  2a86				   .L0519		;  if pfread ( x , _Moving_Shell_Y_Coordinate )  then goto __Change_Shell_Direction
   9679  2a86
   9680  2a86		       a5 eb		      LDA	x
   9681  2a88		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
   9682  2a8a		       85 ee		      sta	temp7
   9683  2a8c		       a9 3a		      lda	#>(ret_point34-1)
   9684  2a8e		       48		      pha
   9685  2a8f		       a9 a1		      lda	#<(ret_point34-1)
   9686  2a91		       48		      pha
   9687  2a92		       a9 f2		      lda	#>(pfread-1)
   9688  2a94		       48		      pha
   9689  2a95		       a9 ab		      lda	#<(pfread-1)
   9690  2a97		       48		      pha
   9691  2a98		       a5 ee		      lda	temp7
   9692  2a9a		       48		      pha
   9693  2a9b		       8a		      txa
   9694  2a9c		       48		      pha
   9695  2a9d		       a2 08		      ldx	#8
   9696  2a9f		       4c eb ff 	      jmp	BS_jsr
   9697  2aa2				   ret_point34
   9698  2aa2		       d0 03		      BNE	.skipL0519
   9699  2aa4				   .condpart326
   9700  2aa4		       4c 64 3b 	      jmp	.__Change_Shell_Direction
   9701  2aa7
   9702  2aa7				   .skipL0519
   9703  2aa7				   .
   9704  2aa7							; 
   9705  2aa7
   9706  2aa7				   .__Moving_Shell_03
   9707  2aa7							; __Moving_Shell_03
   9708  2aa7
   9709  2aa7				   .
   9710  2aa7							; 
   9711  2aa7
   9712  2aa7				   .L0520		;  x  =  _Moving_Shell_X_Coordinate  +  1
   9713  2aa7
   9714  2aa7		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9715  2aa9		       18		      CLC
   9716  2aaa		       69 01		      ADC	#1
   9717  2aac		       85 eb		      STA	x
   9718  2aae				   .
   9719  2aae							; 
   9720  2aae
   9721  2aae				   .L0521		;  pfpixel _Moving_Shell_X_Coordinate _Moving_Shell_Y_Coordinate on
   9722  2aae
   9723  2aae		       a2 00		      LDX	#0
   9724  2ab0		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
   9725  2ab2		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9726  2ab4		       85 ee		      sta	temp7
   9727  2ab6		       a9 3a		      lda	#>(ret_point35-1)
   9728  2ab8		       48		      pha
   9729  2ab9		       a9 cb		      lda	#<(ret_point35-1)
   9730  2abb		       48		      pha
   9731  2abc		       a9 f2		      lda	#>(pfpixel-1)
   9732  2abe		       48		      pha
   9733  2abf		       a9 ba		      lda	#<(pfpixel-1)
   9734  2ac1		       48		      pha
   9735  2ac2		       a5 ee		      lda	temp7
   9736  2ac4		       48		      pha
   9737  2ac5		       8a		      txa
   9738  2ac6		       48		      pha
   9739  2ac7		       a2 08		      ldx	#8
   9740  2ac9		       4c eb ff 	      jmp	BS_jsr
   9741  2acc				   ret_point35
   9742  2acc				   .
   9743  2acc							; 
   9744  2acc
   9745  2acc				   .L0522		;  pfpixel x _Moving_Shell_Y_Coordinate on
   9746  2acc
   9747  2acc		       a2 00		      LDX	#0
   9748  2ace		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
   9749  2ad0		       a5 eb		      LDA	x
   9750  2ad2		       85 ee		      sta	temp7
   9751  2ad4		       a9 3a		      lda	#>(ret_point36-1)
   9752  2ad6		       48		      pha
   9753  2ad7		       a9 e9		      lda	#<(ret_point36-1)
   9754  2ad9		       48		      pha
   9755  2ada		       a9 f2		      lda	#>(pfpixel-1)
   9756  2adc		       48		      pha
   9757  2add		       a9 ba		      lda	#<(pfpixel-1)
   9758  2adf		       48		      pha
   9759  2ae0		       a5 ee		      lda	temp7
   9760  2ae2		       48		      pha
   9761  2ae3		       8a		      txa
   9762  2ae4		       48		      pha
   9763  2ae5		       a2 08		      ldx	#8
   9764  2ae7		       4c eb ff 	      jmp	BS_jsr
   9765  2aea				   ret_point36
   9766  2aea				   .
   9767  2aea							; 
   9768  2aea
   9769  2aea				   .
   9770  2aea							; 
   9771  2aea
   9772  2aea				   .
   9773  2aea							; 
   9774  2aea
   9775  2aea				   .
   9776  2aea							; 
   9777  2aea
   9778  2aea				   .L0523		;  if _Bit4_Enemy_Dead_Flag{4}  ||  _Enemy_Type  =  _Flagpole then return thisbank
   9779  2aea
   9780  2aea		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
   9781  2aec		       29 10		      AND	#16
   9782  2aee		       f0 03		      BEQ	.skipL0523
   9783  2af0				   .condpart327
   9784  2af0		       4c f9 3a 	      jmp	.condpart328
   9785  2af3				   .skipL0523
   9786  2af3		       a5 dc		      LDA	_Enemy_Type
   9787  2af5		       c9 14		      CMP	#_Flagpole
   9788  2af7		       d0 01		      BNE	.skip86OR
   9789  2af9				   .condpart328
   9790  2af9		       60		      RTS
   9791  2afa				   .skip86OR
   9792  2afa				   .
   9793  2afa							; 
   9794  2afa
   9795  2afa				   .L0524		;  x  =   ( _Moving_Shell_X_Coordinate  *  4 )   +  17
   9796  2afa
   9797  2afa							; complex statement detected
   9798  2afa		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9799  2afc		       0a		      asl
   9800  2afd		       0a		      asl
   9801  2afe		       18		      CLC
   9802  2aff		       69 11		      ADC	#17
   9803  2b01		       85 eb		      STA	x
   9804  2b03				   .
   9805  2b03							; 
   9806  2b03
   9807  2b03				   .L0525		;  y  =   ( _Moving_Shell_X_Coordinate  *  4 )   +  25
   9808  2b03
   9809  2b03							; complex statement detected
   9810  2b03		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9811  2b05		       0a		      asl
   9812  2b06		       0a		      asl
   9813  2b07		       18		      CLC
   9814  2b08		       69 19		      ADC	#25
   9815  2b0a		       85 ec		      STA	y
   9816  2b0c				   .
   9817  2b0c							; 
   9818  2b0c
   9819  2b0c				   .L0526		;  if player1x  >=  x	&&  player1x  <=  y then goto __Moving_Shell_04
   9820  2b0c
   9821  2b0c		       a5 81		      LDA	player1x
   9822  2b0e		       c5 eb		      CMP	x
   9823  2b10		       90 09		      BCC	.skipL0526
   9824  2b12				   .condpart329
   9825  2b12		       a5 ec		      LDA	y
   9826  2b14		       c5 81		      CMP	player1x
   9827  2b16		       90 03		      BCC	.skip329then
   9828  2b18				   .condpart330
   9829  2b18		       4c 1c 3b 	      jmp	.__Moving_Shell_04
   9830  2b1b
   9831  2b1b				   .skip329then
   9832  2b1b				   .skipL0526
   9833  2b1b				   .
   9834  2b1b							; 
   9835  2b1b
   9836  2b1b				   .L0527		;  return thisbank
   9837  2b1b
   9838  2b1b		       60		      RTS
   9839  2b1c				   .
   9840  2b1c							; 
   9841  2b1c
   9842  2b1c				   .__Moving_Shell_04
   9843  2b1c							; __Moving_Shell_04
   9844  2b1c
   9845  2b1c				   .
   9846  2b1c							; 
   9847  2b1c
   9848  2b1c				   .L0528		;  x  =   ( _Moving_Shell_Y_Coordinate  *  8 ) 
   9849  2b1c
   9850  2b1c							; complex statement detected
   9851  2b1c		       a5 e7		      LDA	_Moving_Shell_Y_Coordinate
   9852  2b1e		       0a		      asl
   9853  2b1f		       0a		      asl
   9854  2b20		       0a		      asl
   9855  2b21		       85 eb		      STA	x
   9856  2b23				   .
   9857  2b23							; 
   9858  2b23
   9859  2b23				   .L0529		;  y  =   ( _Moving_Shell_Y_Coordinate  *  8 )   +  8
   9860  2b23
   9861  2b23							; complex statement detected
   9862  2b23		       a5 e7		      LDA	_Moving_Shell_Y_Coordinate
   9863  2b25		       0a		      asl
   9864  2b26		       0a		      asl
   9865  2b27		       0a		      asl
   9866  2b28		       18		      CLC
   9867  2b29		       69 08		      ADC	#8
   9868  2b2b		       85 ec		      STA	y
   9869  2b2d				   .
   9870  2b2d							; 
   9871  2b2d
   9872  2b2d				   .L0530		;  if player1y  >=  x	&&  player1y  <=  y then _Bit4_Enemy_Dead_Flag{4}  =  1  :  score  =  score  +	400
   9873  2b2d
   9874  2b2d		       a5 86		      LDA	player1y
   9875  2b2f		       c5 eb		      CMP	x
   9876  2b31		       90 1b		      BCC	.skipL0530
   9877  2b33				   .condpart331
   9878  2b33		       a5 ec		      LDA	y
   9879  2b35		       c5 86		      CMP	player1y
   9880  2b37		       90 15		      BCC	.skip331then
   9881  2b39				   .condpart332
   9882  2b39		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
   9883  2b3b		       09 10		      ORA	#16
   9884  2b3d		       85 da		      STA	_Bit4_Enemy_Dead_Flag
   9885  2b3f		       f8		      SED
   9886  2b40		       18		      CLC
   9887  2b41		       a5 94		      LDA	score+1
   9888  2b43		       69 04		      ADC	#$04
   9889  2b45		       85 94		      STA	score+1
   9890  2b47		       a5 93		      LDA	score
   9891  2b49		       69 00		      ADC	#$00
   9892  2b4b		       85 93		      STA	score
   9893  2b4d		       d8		      CLD
   9894  2b4e				   .skip331then
   9895  2b4e				   .skipL0530
   9896  2b4e				   .
   9897  2b4e							; 
   9898  2b4e
   9899  2b4e				   .L0531		;  if _Enemy_Type  >  41 then score  =  score	+  800
   9900  2b4e
   9901  2b4e		       a9 29		      LDA	#41
   9902  2b50		       c5 dc		      CMP	_Enemy_Type
   9903  2b52		       b0 0f		      BCS	.skipL0531
   9904  2b54				   .condpart333
   9905  2b54		       f8		      SED
   9906  2b55		       18		      CLC
   9907  2b56		       a5 94		      LDA	score+1
   9908  2b58		       69 08		      ADC	#$08
   9909  2b5a		       85 94		      STA	score+1
   9910  2b5c		       a5 93		      LDA	score
   9911  2b5e		       69 00		      ADC	#$00
   9912  2b60		       85 93		      STA	score
   9913  2b62		       d8		      CLD
   9914  2b63				   .skipL0531
   9915  2b63				   .
   9916  2b63							; 
   9917  2b63
   9918  2b63				   .L0532		;  return thisbank
   9919  2b63
   9920  2b63		       60		      RTS
   9921  2b64				   .
   9922  2b64							; 
   9923  2b64
   9924  2b64				   .__Change_Shell_Direction
   9925  2b64							; __Change_Shell_Direction
   9926  2b64
   9927  2b64				   .
   9928  2b64							; 
   9929  2b64
   9930  2b64				   .L0533		;  if _Moving_Shell_Y_Coordinate  <  8  &&  _Level  <	3 then goto __Destroy_Block
   9931  2b64
   9932  2b64		       a5 e7		      LDA	_Moving_Shell_Y_Coordinate
   9933  2b66		       c9 08		      CMP	#8
   9934  2b68		       b0 09		      BCS	.skipL0533
   9935  2b6a				   .condpart334
   9936  2b6a		       a5 ea		      LDA	_Level
   9937  2b6c		       c9 03		      CMP	#3
   9938  2b6e		       b0 03		      BCS	.skip334then
   9939  2b70				   .condpart335
   9940  2b70		       4c ab 3b 	      jmp	.__Destroy_Block
   9941  2b73
   9942  2b73				   .skip334then
   9943  2b73				   .skipL0533
   9944  2b73				   .
   9945  2b73							; 
   9946  2b73
   9947  2b73				   .L0534		;  AUDV0  =  12
   9948  2b73
   9949  2b73		       a9 0c		      LDA	#12
   9950  2b75		       85 19		      STA	AUDV0
   9951  2b77				   .L0535		;  AUDC0  =  1
   9952  2b77
   9953  2b77		       a9 01		      LDA	#1
   9954  2b79		       85 15		      STA	AUDC0
   9955  2b7b				   .L0536		;  AUDF0  =  31
   9956  2b7b
   9957  2b7b		       a9 1f		      LDA	#31
   9958  2b7d		       85 17		      STA	AUDF0
   9959  2b7f				   .
   9960  2b7f							; 
   9961  2b7f
   9962  2b7f				   .__Change_Shell_Dir_02
   9963  2b7f							; __Change_Shell_Dir_02
   9964  2b7f
   9965  2b7f				   .
   9966  2b7f							; 
   9967  2b7f
   9968  2b7f				   .L0537		;  if _Bit5_Moving_Turtle_Shell_Direction{5} then _Moving_Shell_X_Coordinate  =  _Moving_Shell_X_Coordinate  +  4  :  _Bit5_Moving_Turtle_Shell_Direction{5}  =  0  :	goto __Moving_Shell_03
   9969  2b7f
   9970  2b7f		       a5 da		      LDA	_Bit5_Moving_Turtle_Shell_Direction
   9971  2b81		       29 20		      AND	#32
   9972  2b83		       f0 10		      BEQ	.skipL0537
   9973  2b85				   .condpart336
   9974  2b85		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9975  2b87		       18		      CLC
   9976  2b88		       69 04		      ADC	#4
   9977  2b8a		       85 e6		      STA	_Moving_Shell_X_Coordinate
   9978  2b8c		       a5 da		      LDA	_Bit5_Moving_Turtle_Shell_Direction
   9979  2b8e		       29 df		      AND	#223
   9980  2b90		       85 da		      STA	_Bit5_Moving_Turtle_Shell_Direction
   9981  2b92		       4c a7 3a 	      jmp	.__Moving_Shell_03
   9982  2b95
   9983  2b95				   .skipL0537
   9984  2b95				   .
   9985  2b95							; 
   9986  2b95
   9987  2b95				   .L0538		;  if !_Bit5_Moving_Turtle_Shell_Direction{5} then _Moving_Shell_X_Coordinate	=  _Moving_Shell_X_Coordinate  -  4  :	_Bit5_Moving_Turtle_Shell_Direction{5}	=  1
   9988  2b95
   9989  2b95		       a5 da		      LDA	_Bit5_Moving_Turtle_Shell_Direction
   9990  2b97		       29 20		      AND	#32
   9991  2b99		       d0 0d		      BNE	.skipL0538
   9992  2b9b				   .condpart337
   9993  2b9b		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
   9994  2b9d		       38		      SEC
   9995  2b9e		       e9 04		      SBC	#4
   9996  2ba0		       85 e6		      STA	_Moving_Shell_X_Coordinate
   9997  2ba2		       a5 da		      LDA	_Bit5_Moving_Turtle_Shell_Direction
   9998  2ba4		       09 20		      ORA	#32
   9999  2ba6		       85 da		      STA	_Bit5_Moving_Turtle_Shell_Direction
  10000  2ba8				   .skipL0538
  10001  2ba8				   .
  10002  2ba8							; 
  10003  2ba8
  10004  2ba8				   .L0539		;  goto __Moving_Shell_03
  10005  2ba8
  10006  2ba8		       4c a7 3a 	      jmp	.__Moving_Shell_03
  10007  2bab
  10008  2bab				   .
  10009  2bab							; 
  10010  2bab
  10011  2bab				   .__Destroy_Block
  10012  2bab							; __Destroy_Block
  10013  2bab
  10014  2bab				   .
  10015  2bab							; 
  10016  2bab
  10017  2bab				   .L0540		;  score  =  score  +	20
  10018  2bab
  10019  2bab		       f8		      SED
  10020  2bac		       18		      CLC
  10021  2bad		       a5 95		      LDA	score+2
  10022  2baf		       69 20		      ADC	#$20
  10023  2bb1		       85 95		      STA	score+2
  10024  2bb3		       a5 94		      LDA	score+1
  10025  2bb5		       69 00		      ADC	#$00
  10026  2bb7		       85 94		      STA	score+1
  10027  2bb9		       a5 93		      LDA	score
  10028  2bbb		       69 00		      ADC	#$00
  10029  2bbd		       85 93		      STA	score
  10030  2bbf		       d8		      CLD
  10031  2bc0				   .
  10032  2bc0							; 
  10033  2bc0
  10034  2bc0				   .L0541		;  if y  =  0 then pfpixel _Moving_Shell_X_Coordinate _Moving_Shell_Y_Coordinate off
  10035  2bc0
  10036  2bc0		       a5 ec		      LDA	y
  10037  2bc2		       c9 00		      CMP	#0
  10038  2bc4		       d0 1e		      BNE	.skipL0541
  10039  2bc6				   .condpart338
  10040  2bc6		       a2 01		      LDX	#1
  10041  2bc8		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
  10042  2bca		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
  10043  2bcc		       85 ee		      sta	temp7
  10044  2bce		       a9 3b		      lda	#>(ret_point37-1)
  10045  2bd0		       48		      pha
  10046  2bd1		       a9 e3		      lda	#<(ret_point37-1)
  10047  2bd3		       48		      pha
  10048  2bd4		       a9 f2		      lda	#>(pfpixel-1)
  10049  2bd6		       48		      pha
  10050  2bd7		       a9 ba		      lda	#<(pfpixel-1)
  10051  2bd9		       48		      pha
  10052  2bda		       a5 ee		      lda	temp7
  10053  2bdc		       48		      pha
  10054  2bdd		       8a		      txa
  10055  2bde		       48		      pha
  10056  2bdf		       a2 08		      ldx	#8
  10057  2be1		       4c eb ff 	      jmp	BS_jsr
  10058  2be4				   ret_point37
  10059  2be4				   .skipL0541
  10060  2be4				   .
  10061  2be4							; 
  10062  2be4
  10063  2be4				   .L0542		;  if y  =  1 then pfpixel x _Moving_Shell_Y_Coordinate off
  10064  2be4
  10065  2be4		       a5 ec		      LDA	y
  10066  2be6		       c9 01		      CMP	#1
  10067  2be8		       d0 1e		      BNE	.skipL0542
  10068  2bea				   .condpart339
  10069  2bea		       a2 01		      LDX	#1
  10070  2bec		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
  10071  2bee		       a5 eb		      LDA	x
  10072  2bf0		       85 ee		      sta	temp7
  10073  2bf2		       a9 3c		      lda	#>(ret_point38-1)
  10074  2bf4		       48		      pha
  10075  2bf5		       a9 07		      lda	#<(ret_point38-1)
  10076  2bf7		       48		      pha
  10077  2bf8		       a9 f2		      lda	#>(pfpixel-1)
  10078  2bfa		       48		      pha
  10079  2bfb		       a9 ba		      lda	#<(pfpixel-1)
  10080  2bfd		       48		      pha
  10081  2bfe		       a5 ee		      lda	temp7
  10082  2c00		       48		      pha
  10083  2c01		       8a		      txa
  10084  2c02		       48		      pha
  10085  2c03		       a2 08		      ldx	#8
  10086  2c05		       4c eb ff 	      jmp	BS_jsr
  10087  2c08				   ret_point38
  10088  2c08				   .skipL0542
  10089  2c08				   .
  10090  2c08							; 
  10091  2c08
  10092  2c08				   .L0543		;  AUDV0  =  10
  10093  2c08
  10094  2c08		       a9 0a		      LDA	#10
  10095  2c0a		       85 19		      STA	AUDV0
  10096  2c0c				   .L0544		;  AUDC0  =  7
  10097  2c0c
  10098  2c0c		       a9 07		      LDA	#7
  10099  2c0e		       85 15		      STA	AUDC0
  10100  2c10				   .L0545		;  AUDF0  =  22
  10101  2c10
  10102  2c10		       a9 16		      LDA	#22
  10103  2c12		       85 17		      STA	AUDF0
  10104  2c14				   .
  10105  2c14							; 
  10106  2c14
  10107  2c14				   .L0546		;  goto __Change_Shell_Dir_02
  10108  2c14
  10109  2c14		       4c 7f 3b 	      jmp	.__Change_Shell_Dir_02
  10110  2c17
  10111  2c17				   .
  10112  2c17							; 
  10113  2c17
  10114  2c17				   .__Special_Item
  10115  2c17							; __Special_Item
  10116  2c17
  10117  2c17				   .
  10118  2c17							; 
  10119  2c17
  10120  2c17				   .L0547		;  if _Enemy_Momentum	>  249 then gosub __Kill_Enemy	:  goto __Enemy_End_Move
  10121  2c17
  10122  2c17		       a9 f9		      LDA	#249
  10123  2c19		       c5 dd		      CMP	_Enemy_Momentum
  10124  2c1b		       b0 06		      BCS	.skipL0547
  10125  2c1d				   .condpart340
  10126  2c1d		       20 d6 38 	      jsr	.__Kill_Enemy
  10127  2c20		       4c 10 33 	      jmp	.__Enemy_End_Move
  10128  2c23
  10129  2c23				   .skipL0547
  10130  2c23				   .
  10131  2c23							; 
  10132  2c23
  10133  2c23				   .L0548		;  if _Enemy_Momentum	>  199 then _Enemy_Momentum  =	_Enemy_Momentum  +  1  :  goto __Enemy_End_Move
  10134  2c23
  10135  2c23		       a9 c7		      LDA	#199
  10136  2c25		       c5 dd		      CMP	_Enemy_Momentum
  10137  2c27		       b0 05		      BCS	.skipL0548
  10138  2c29				   .condpart341
  10139  2c29		       e6 dd		      INC	_Enemy_Momentum
  10140  2c2b		       4c 10 33 	      jmp	.__Enemy_End_Move
  10141  2c2e
  10142  2c2e				   .skipL0548
  10143  2c2e				   .
  10144  2c2e							; 
  10145  2c2e
  10146  2c2e				   .L0549		;  if _Bit3_Enemy_Direction{3} then _Enemy_Momentum  =  _Enemy_Momentum  +  1 else _Enemy_Momentum  =	_Enemy_Momentum  -  1
  10147  2c2e
  10148  2c2e		       a5 da		      LDA	_Bit3_Enemy_Direction
  10149  2c30		       29 08		      AND	#8
  10150  2c32		       f0 05		      BEQ	.skipL0549
  10151  2c34				   .condpart342
  10152  2c34		       e6 dd		      INC	_Enemy_Momentum
  10153  2c36		       4c 3b 3c 	      jmp	.skipelse64
  10154  2c39				   .skipL0549
  10155  2c39		       c6 dd		      DEC	_Enemy_Momentum
  10156  2c3b				   .skipelse64
  10157  2c3b				   .
  10158  2c3b							; 
  10159  2c3b
  10160  2c3b				   .L0550		;  if _Enemy_Momentum	=  0 then _Bit3_Enemy_Direction{3}  =  1
  10161  2c3b
  10162  2c3b		       a5 dd		      LDA	_Enemy_Momentum
  10163  2c3d		       c9 00		      CMP	#0
  10164  2c3f		       d0 06		      BNE	.skipL0550
  10165  2c41				   .condpart343
  10166  2c41		       a5 da		      LDA	_Bit3_Enemy_Direction
  10167  2c43		       09 08		      ORA	#8
  10168  2c45		       85 da		      STA	_Bit3_Enemy_Direction
  10169  2c47				   .skipL0550
  10170  2c47				   .
  10171  2c47							; 
  10172  2c47
  10173  2c47				   .L0551		;  if _Enemy_Momentum	>  6 then _Enemy_Momentum  =  6
  10174  2c47
  10175  2c47		       a9 06		      LDA	#6
  10176  2c49		       c5 dd		      CMP	_Enemy_Momentum
  10177  2c4b		       b0 04		      BCS	.skipL0551
  10178  2c4d				   .condpart344
  10179  2c4d		       a9 06		      LDA	#6
  10180  2c4f		       85 dd		      STA	_Enemy_Momentum
  10181  2c51				   .skipL0551
  10182  2c51				   .
  10183  2c51							; 
  10184  2c51
  10185  2c51				   .L0552		;  player1y  =  player1y  +  _Enemy_Momentum
  10186  2c51
  10187  2c51		       a5 86		      LDA	player1y
  10188  2c53		       18		      CLC
  10189  2c54		       65 dd		      ADC	_Enemy_Momentum
  10190  2c56		       85 86		      STA	player1y
  10191  2c58				   .
  10192  2c58							; 
  10193  2c58
  10194  2c58				   .L0553		;  if _Enemy_Momentum	<  5 then goto __Enemy_End_Move
  10195  2c58
  10196  2c58		       a5 dd		      LDA	_Enemy_Momentum
  10197  2c5a		       c9 05		      CMP	#5
  10198  2c5c		       b0 03		      BCS	.skipL0553
  10199  2c5e				   .condpart345
  10200  2c5e		       4c 10 33 	      jmp	.__Enemy_End_Move
  10201  2c61
  10202  2c61				   .skipL0553
  10203  2c61				   .
  10204  2c61							; 
  10205  2c61
  10206  2c61				   .L0554		;  x  =   ( player1x  -  17 )	/ 4  :	y  =  player1y / 8
  10207  2c61
  10208  2c61							; complex statement detected
  10209  2c61		       a5 81		      LDA	player1x
  10210  2c63		       38		      SEC
  10211  2c64		       e9 11		      SBC	#17
  10212  2c66		       4a		      lsr
  10213  2c67		       4a		      lsr
  10214  2c68		       85 eb		      STA	x
  10215  2c6a		       a5 86		      LDA	player1y
  10216  2c6c		       4a		      lsr
  10217  2c6d		       4a		      lsr
  10218  2c6e		       4a		      lsr
  10219  2c6f		       85 ec		      STA	y
  10220  2c71				   .
  10221  2c71							; 
  10222  2c71
  10223  2c71				   .L0555		;  if pfread ( x , y )  then player1y	=   ( y  *  8 )   -  1	:  _Enemy_Momentum  =  200
  10224  2c71
  10225  2c71		       a5 eb		      LDA	x
  10226  2c73		       a4 ec		      LDY	y
  10227  2c75		       85 ee		      sta	temp7
  10228  2c77		       a9 3c		      lda	#>(ret_point39-1)
  10229  2c79		       48		      pha
  10230  2c7a		       a9 8c		      lda	#<(ret_point39-1)
  10231  2c7c		       48		      pha
  10232  2c7d		       a9 f2		      lda	#>(pfread-1)
  10233  2c7f		       48		      pha
  10234  2c80		       a9 ab		      lda	#<(pfread-1)
  10235  2c82		       48		      pha
  10236  2c83		       a5 ee		      lda	temp7
  10237  2c85		       48		      pha
  10238  2c86		       8a		      txa
  10239  2c87		       48		      pha
  10240  2c88		       a2 08		      ldx	#8
  10241  2c8a		       4c eb ff 	      jmp	BS_jsr
  10242  2c8d				   ret_point39
  10243  2c8d		       d0 0e		      BNE	.skipL0555
  10244  2c8f				   .condpart346
  10245  2c8f							; complex statement detected
  10246  2c8f		       a5 ec		      LDA	y
  10247  2c91		       0a		      asl
  10248  2c92		       0a		      asl
  10249  2c93		       0a		      asl
  10250  2c94		       38		      SEC
  10251  2c95		       e9 01		      SBC	#1
  10252  2c97		       85 86		      STA	player1y
  10253  2c99		       a9 c8		      LDA	#200
  10254  2c9b		       85 dd		      STA	_Enemy_Momentum
  10255  2c9d				   .skipL0555
  10256  2c9d				   .
  10257  2c9d							; 
  10258  2c9d
  10259  2c9d				   .L0556		;  goto __Enemy_End_Move
  10260  2c9d
  10261  2c9d		       4c 10 33 	      jmp	.__Enemy_End_Move
  10262  2ca0
  10263  2ca0				   .
  10264  2ca0							; 
  10265  2ca0
  10266  2ca0				   .__Title_Screen
  10267  2ca0							; __Title_Screen
  10268  2ca0
  10269  2ca0				   .
  10270  2ca0							; 
  10271  2ca0
  10272  2ca0				   .
  10273  2ca0							; 
  10274  2ca0
  10275  2ca0				   .
  10276  2ca0							; 
  10277  2ca0
  10278  2ca0				   .
  10279  2ca0							; 
  10280  2ca0
  10281  2ca0				   .
  10282  2ca0							; 
  10283  2ca0
  10284  2ca0				   .L0557		;  pfcolors:
  10285  2ca0
  10286  2ca0		       a9 08		      lda	# $08
  10287  2ca2		       85 08		      sta	COLUPF
  10288  2ca4				  -	      ifconst	pfres
  10289  2ca4				  -	      lda	#>(pfcolorlabel360-132+pfres*pfwidth)
  10290  2ca4					      else
  10291  2ca4		       a9 f9		      lda	#>(pfcolorlabel360-84)
  10292  2ca6					      endif
  10293  2ca6		       85 f1		      sta	pfcolortable+1
  10294  2ca8				  -	      ifconst	pfres
  10295  2ca8				  -	      lda	#<(pfcolorlabel360-132+pfres*pfwidth)
  10296  2ca8					      else
  10297  2ca8		       a9 6a		      lda	#<(pfcolorlabel360-84)
  10298  2caa					      endif
  10299  2caa		       85 f0		      sta	pfcolortable
  10300  2cac				   .
  10301  2cac							; 
  10302  2cac
  10303  2cac				   .
  10304  2cac							; 
  10305  2cac
  10306  2cac				   .
  10307  2cac							; 
  10308  2cac
  10309  2cac				   .
  10310  2cac							; 
  10311  2cac
  10312  2cac				   .
  10313  2cac							; 
  10314  2cac
  10315  2cac				   .
  10316  2cac							; 
  10317  2cac
  10318  2cac				   .
  10319  2cac							; 
  10320  2cac
  10321  2cac				   .L0558		;  playfield:
  10322  2cac
  10323  2cac				  -	      ifconst	pfres
  10324  2cac				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  10325  2cac					      else
  10326  2cac		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  10327  2cae					      endif
  10328  2cae		       4c dd 3c 	      jmp	pflabel0
  10329  2cb1				   PF_data0
  10330  2cb1		       00 00		      .byte.b	%00000000, %00000000
  10331  2cb3					      if	(pfwidth>2)
  10332  2cb3		       00 00		      .byte.b	%00000000, %00000000
  10333  2cb5					      endif
  10334  2cb5		       00 64		      .byte.b	%00000000, %01100100
  10335  2cb7					      if	(pfwidth>2)
  10336  2cb7		       64 00		      .byte.b	%01100100, %00000000
  10337  2cb9					      endif
  10338  2cb9		       00 fc		      .byte.b	%00000000, %11111100
  10339  2cbb					      if	(pfwidth>2)
  10340  2cbb		       fc 00		      .byte.b	%11111100, %00000000
  10341  2cbd					      endif
  10342  2cbd		       00 9c		      .byte.b	%00000000, %10011100
  10343  2cbf					      if	(pfwidth>2)
  10344  2cbf		       9c 00		      .byte.b	%10011100, %00000000
  10345  2cc1					      endif
  10346  2cc1		       00 9c		      .byte.b	%00000000, %10011100
  10347  2cc3					      if	(pfwidth>2)
  10348  2cc3		       9c 00		      .byte.b	%10011100, %00000000
  10349  2cc5					      endif
  10350  2cc5		       02 66		      .byte.b	%00000010, %01100110
  10351  2cc7					      if	(pfwidth>2)
  10352  2cc7		       66 02		      .byte.b	%01100110, %00000010
  10353  2cc9					      endif
  10354  2cc9		       03 ff		      .byte.b	%00000011, %11111111
  10355  2ccb					      if	(pfwidth>2)
  10356  2ccb		       ff 03		      .byte.b	%11111111, %00000011
  10357  2ccd					      endif
  10358  2ccd		       03 3c		      .byte.b	%00000011, %00111100
  10359  2ccf					      if	(pfwidth>2)
  10360  2ccf		       3c 03		      .byte.b	%00111100, %00000011
  10361  2cd1					      endif
  10362  2cd1		       03 3c		      .byte.b	%00000011, %00111100
  10363  2cd3					      if	(pfwidth>2)
  10364  2cd3		       3c 03		      .byte.b	%00111100, %00000011
  10365  2cd5					      endif
  10366  2cd5		       03 3f		      .byte.b	%00000011, %00111111
  10367  2cd7					      if	(pfwidth>2)
  10368  2cd7		       3f 03		      .byte.b	%00111111, %00000011
  10369  2cd9					      endif
  10370  2cd9		       ff ff		      .byte.b	%11111111, %11111111
  10371  2cdb					      if	(pfwidth>2)
  10372  2cdb		       ff ff		      .byte.b	%11111111, %11111111
  10373  2cdd					      endif
  10374  2cdd				   pflabel0
  10375  2cdd		       bd b1 3c 	      lda	PF_data0,x
  10376  2ce0		       95 a4		      sta	playfield,x
  10377  2ce2		       ca		      dex
  10378  2ce3		       10 f8		      bpl	pflabel0
  10379  2ce5				   .
  10380  2ce5							; 
  10381  2ce5
  10382  2ce5				   .
  10383  2ce5							; 
  10384  2ce5
  10385  2ce5				   .
  10386  2ce5							; 
  10387  2ce5
  10388  2ce5				   .
  10389  2ce5							; 
  10390  2ce5
  10391  2ce5				   .
  10392  2ce5							; 
  10393  2ce5
  10394  2ce5				   .
  10395  2ce5							; 
  10396  2ce5
  10397  2ce5				   .
  10398  2ce5							; 
  10399  2ce5
  10400  2ce5				   .
  10401  2ce5							; 
  10402  2ce5
  10403  2ce5				   .
  10404  2ce5							; 
  10405  2ce5
  10406  2ce5				   .
  10407  2ce5							; 
  10408  2ce5
  10409  2ce5				   .
  10410  2ce5							; 
  10411  2ce5
  10412  2ce5				   .
  10413  2ce5							; 
  10414  2ce5
  10415  2ce5				   .
  10416  2ce5							; 
  10417  2ce5
  10418  2ce5				   .
  10419  2ce5							; 
  10420  2ce5
  10421  2ce5				   .
  10422  2ce5							; 
  10423  2ce5
  10424  2ce5				   .
  10425  2ce5							; 
  10426  2ce5
  10427  2ce5				   .
  10428  2ce5							; 
  10429  2ce5
  10430  2ce5				   .
  10431  2ce5							; 
  10432  2ce5
  10433  2ce5				   .
  10434  2ce5							; 
  10435  2ce5
  10436  2ce5				   .
  10437  2ce5							; 
  10438  2ce5
  10439  2ce5				   .
  10440  2ce5							; 
  10441  2ce5
  10442  2ce5				   .
  10443  2ce5							; 
  10444  2ce5
  10445  2ce5				   .
  10446  2ce5							; 
  10447  2ce5
  10448  2ce5				   .L0559		;  player0y  =  150  :  player0x  =  42  :  _Bit3_Super_Mario_Power{3}  =  1  :  _Momentum_Left_Right	=  2
  10449  2ce5
  10450  2ce5		       a9 96		      LDA	#150
  10451  2ce7		       85 85		      STA	player0y
  10452  2ce9		       a9 2a		      LDA	#42
  10453  2ceb		       85 80		      STA	player0x
  10454  2ced		       a5 d7		      LDA	_Bit3_Super_Mario_Power
  10455  2cef		       09 08		      ORA	#8
  10456  2cf1		       85 d7		      STA	_Bit3_Super_Mario_Power
  10457  2cf3		       a9 02		      LDA	#2
  10458  2cf5		       85 e0		      STA	_Momentum_Left_Right
  10459  2cf7				   .
  10460  2cf7							; 
  10461  2cf7
  10462  2cf7				   .L0560		;  _Animation_Timer  =  0  :  _Level_Timer  =	0  :  _Bit6_Regular_Mario{6}  =  0  :  _Bit0_Player_Facing_Direction{0}  =  0
  10463  2cf7
  10464  2cf7		       a9 00		      LDA	#0
  10465  2cf9		       85 d4		      STA	_Animation_Timer
  10466  2cfb		       85 d8		      STA	_Level_Timer
  10467  2cfd		       a5 d7		      LDA	_Bit6_Regular_Mario
  10468  2cff		       29 bf		      AND	#191
  10469  2d01		       85 d7		      STA	_Bit6_Regular_Mario
  10470  2d03		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  10471  2d05		       29 fe		      AND	#254
  10472  2d07		       85 d7		      STA	_Bit0_Player_Facing_Direction
  10473  2d09				   .
  10474  2d09							; 
  10475  2d09
  10476  2d09				   .
  10477  2d09							; 
  10478  2d09
  10479  2d09				   .__S2
  10480  2d09							; __S2
  10481  2d09
  10482  2d09				   .
  10483  2d09							; 
  10484  2d09
  10485  2d09				   .L0561		;  _Animation_Timer  =  _Animation_Timer  +  1
  10486  2d09
  10487  2d09		       e6 d4		      INC	_Animation_Timer
  10488  2d0b				   .
  10489  2d0b							; 
  10490  2d0b
  10491  2d0b				   .L0562		;  if _Animation_Timer  >  6 then _Animation_Timer  =	0  :  _Level_Timer  =  _Level_Timer  +	1
  10492  2d0b
  10493  2d0b		       a9 06		      LDA	#6
  10494  2d0d		       c5 d4		      CMP	_Animation_Timer
  10495  2d0f		       b0 06		      BCS	.skipL0562
  10496  2d11				   .condpart347
  10497  2d11		       a9 00		      LDA	#0
  10498  2d13		       85 d4		      STA	_Animation_Timer
  10499  2d15		       e6 d8		      INC	_Level_Timer
  10500  2d17				   .skipL0562
  10501  2d17				   .
  10502  2d17							; 
  10503  2d17
  10504  2d17				   .L0563		;  if player0y  >  100  &&  _Level_Timer  <  4 then goto __S3
  10505  2d17
  10506  2d17		       a9 64		      LDA	#100
  10507  2d19		       c5 85		      CMP	player0y
  10508  2d1b		       b0 09		      BCS	.skipL0563
  10509  2d1d				   .condpart348
  10510  2d1d		       a5 d8		      LDA	_Level_Timer
  10511  2d1f		       c9 04		      CMP	#4
  10512  2d21		       b0 03		      BCS	.skip348then
  10513  2d23				   .condpart349
  10514  2d23		       4c 62 3d 	      jmp	.__S3
  10515  2d26
  10516  2d26				   .skip348then
  10517  2d26				   .skipL0563
  10518  2d26				   .
  10519  2d26							; 
  10520  2d26
  10521  2d26				   .L0564		;  _Level_Timer  =  0	:  player0y  =	79
  10522  2d26
  10523  2d26		       a9 00		      LDA	#0
  10524  2d28		       85 d8		      STA	_Level_Timer
  10525  2d2a		       a9 4f		      LDA	#79
  10526  2d2c		       85 85		      STA	player0y
  10527  2d2e				   .
  10528  2d2e							; 
  10529  2d2e
  10530  2d2e				   .L0565		;  if _Bit0_Player_Facing_Direction{0} then player0x  =  player0x  -  1 else player0x	=  player0x  +	1
  10531  2d2e
  10532  2d2e		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  10533  2d30		       4a		      LSR
  10534  2d31		       90 05		      BCC	.skipL0565
  10535  2d33				   .condpart350
  10536  2d33		       c6 80		      DEC	player0x
  10537  2d35		       4c 3a 3d 	      jmp	.skipelse65
  10538  2d38				   .skipL0565
  10539  2d38		       e6 80		      INC	player0x
  10540  2d3a				   .skipelse65
  10541  2d3a				   .
  10542  2d3a							; 
  10543  2d3a
  10544  2d3a				   .L0566		;  if player0x  <  42 then player0x  =  42  :	player0y  =  150  :  _Bit0_Player_Facing_Direction{0}  =  0
  10545  2d3a
  10546  2d3a		       a5 80		      LDA	player0x
  10547  2d3c		       c9 2a		      CMP	#42
  10548  2d3e		       b0 0e		      BCS	.skipL0566
  10549  2d40				   .condpart351
  10550  2d40		       a9 2a		      LDA	#42
  10551  2d42		       85 80		      STA	player0x
  10552  2d44		       a9 96		      LDA	#150
  10553  2d46		       85 85		      STA	player0y
  10554  2d48		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  10555  2d4a		       29 fe		      AND	#254
  10556  2d4c		       85 d7		      STA	_Bit0_Player_Facing_Direction
  10557  2d4e				   .skipL0566
  10558  2d4e				   .
  10559  2d4e							; 
  10560  2d4e
  10561  2d4e				   .L0567		;  if player0x  >  112 then player0x  =  112  :  player0y  =  150  :  _Bit0_Player_Facing_Direction{0}  =  1
  10562  2d4e
  10563  2d4e		       a9 70		      LDA	#112
  10564  2d50		       c5 80		      CMP	player0x
  10565  2d52		       b0 0e		      BCS	.skipL0567
  10566  2d54				   .condpart352
  10567  2d54		       a9 70		      LDA	#112
  10568  2d56		       85 80		      STA	player0x
  10569  2d58		       a9 96		      LDA	#150
  10570  2d5a		       85 85		      STA	player0y
  10571  2d5c		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  10572  2d5e		       09 01		      ORA	#1
  10573  2d60		       85 d7		      STA	_Bit0_Player_Facing_Direction
  10574  2d62				   .skipL0567
  10575  2d62				   .
  10576  2d62							; 
  10577  2d62
  10578  2d62				   .__S3
  10579  2d62							; __S3
  10580  2d62
  10581  2d62				   .
  10582  2d62							; 
  10583  2d62
  10584  2d62				   .L0568		;  gosub __Set_Up_Mario bank1
  10585  2d62
  10586  2d62		       85 ee		      sta	temp7
  10587  2d64		       a9 3d		      lda	#>(ret_point40-1)
  10588  2d66		       48		      pha
  10589  2d67		       a9 79		      lda	#<(ret_point40-1)
  10590  2d69		       48		      pha
  10591  2d6a		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  10592  2d6c		       48		      pha
  10593  2d6d		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  10594  2d6f		       48		      pha
  10595  2d70		       a5 ee		      lda	temp7
  10596  2d72		       48		      pha
  10597  2d73		       8a		      txa
  10598  2d74		       48		      pha
  10599  2d75		       a2 01		      ldx	#1
  10600  2d77		       4c eb ff 	      jmp	BS_jsr
  10601  2d7a				   ret_point40
  10602  2d7a				   .
  10603  2d7a							; 
  10604  2d7a
  10605  2d7a				   .L0569		;  for x  =  1 to 3
  10606  2d7a
  10607  2d7a		       a9 01		      LDA	#1
  10608  2d7c		       85 eb		      STA	x
  10609  2d7e				   .L0569forx
  10610  2d7e				   .
  10611  2d7e							; 
  10612  2d7e
  10613  2d7e				   .L0570		;  CTRLPF  =  $15
  10614  2d7e
  10615  2d7e		       a9 15		      LDA	#$15
  10616  2d80		       85 0a		      STA	CTRLPF
  10617  2d82				   .
  10618  2d82							; 
  10619  2d82
  10620  2d82				   .L0571		;  if _Bit0_Player_Facing_Direction{0} then REFP0  =  8
  10621  2d82
  10622  2d82		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  10623  2d84		       4a		      LSR
  10624  2d85		       90 04		      BCC	.skipL0571
  10625  2d87				   .condpart353
  10626  2d87		       a9 08		      LDA	#8
  10627  2d89		       85 0b		      STA	REFP0
  10628  2d8b				   .skipL0571
  10629  2d8b				   .
  10630  2d8b							; 
  10631  2d8b
  10632  2d8b				   .L0572		;  drawscreen
  10633  2d8b
  10634  2d8b		       85 ee		      sta	temp7
  10635  2d8d		       a9 3d		      lda	#>(ret_point41-1)
  10636  2d8f		       48		      pha
  10637  2d90		       a9 a2		      lda	#<(ret_point41-1)
  10638  2d92		       48		      pha
  10639  2d93		       a9 f4		      lda	#>(drawscreen-1)
  10640  2d95		       48		      pha
  10641  2d96		       a9 37		      lda	#<(drawscreen-1)
  10642  2d98		       48		      pha
  10643  2d99		       a5 ee		      lda	temp7
  10644  2d9b		       48		      pha
  10645  2d9c		       8a		      txa
  10646  2d9d		       48		      pha
  10647  2d9e		       a2 08		      ldx	#8
  10648  2da0		       4c eb ff 	      jmp	BS_jsr
  10649  2da3				   ret_point41
  10650  2da3				   .
  10651  2da3							; 
  10652  2da3
  10653  2da3				   .L0573		;  next x
  10654  2da3
  10655  2da3		       a5 eb		      LDA	x
  10656  2da5		       c9 03		      CMP	#3
  10657  2da7
  10658  2da7		       e6 eb		      INC	x
  10659  2da9					      if	((* - .L0569forx) < 127) && ((* - .L0569forx) > -128)
  10660  2da9		       90 d3		      bcc	.L0569forx
  10661  2dab				  -	      else
  10662  2dab				  -	      bcs	.6skipL0569forx
  10663  2dab				  -	      jmp	.L0569forx
  10664  2dab				  -.6skipL0569forx
  10665  2dab					      endif
  10666  2dab				   .
  10667  2dab							; 
  10668  2dab
  10669  2dab				   .L0574		;  if !joy0fire then goto __S2
  10670  2dab
  10671  2dab		       24 0c		      bit	INPT4
  10672  2dad		       10 03		      BPL	.skipL0574
  10673  2daf				   .condpart354
  10674  2daf		       4c 09 3d 	      jmp	.__S2
  10675  2db2
  10676  2db2				   .skipL0574
  10677  2db2				   .
  10678  2db2							; 
  10679  2db2
  10680  2db2				   .L0575		;  _Bit6_Regular_Mario{6}  =  1
  10681  2db2
  10682  2db2		       a5 d7		      LDA	_Bit6_Regular_Mario
  10683  2db4		       09 40		      ORA	#64
  10684  2db6		       85 d7		      STA	_Bit6_Regular_Mario
  10685  2db8				   .
  10686  2db8							; 
  10687  2db8
  10688  2db8				   .L0576		;  _Bit3_Super_Mario_Power{3}	=  0  :  _Bit0_Player_Facing_Direction{0}  =  0
  10689  2db8
  10690  2db8		       a5 d7		      LDA	_Bit3_Super_Mario_Power
  10691  2dba		       29 f7		      AND	#247
  10692  2dbc		       85 d7		      STA	_Bit3_Super_Mario_Power
  10693  2dbe		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  10694  2dc0		       29 fe		      AND	#254
  10695  2dc2		       85 d7		      STA	_Bit0_Player_Facing_Direction
  10696  2dc4				   .
  10697  2dc4							; 
  10698  2dc4
  10699  2dc4				   .L0577		;  return otherbank
  10700  2dc4
  10701  2dc4		       4c dd ff 	      JMP	BS_return
  10702  2dc7				   .
  10703  2dc7							; 
  10704  2dc7
  10705  2dc7				   .
  10706  2dc7							; 
  10707  2dc7
  10708  2dc7				   .
  10709  2dc7							; 
  10710  2dc7
  10711  2dc7				   .
  10712  2dc7							; 
  10713  2dc7
  10714  2dc7				   .
  10715  2dc7							; 
  10716  2dc7
  10717  2dc7				   .
  10718  2dc7							; 
  10719  2dc7
  10720  2dc7				   .
  10721  2dc7							; 
  10722  2dc7
  10723  2dc7				   .__Goomba_Color
  10724  2dc7							; __Goomba_Color
  10725  2dc7
  10726  2dc7				   .L0578		;  player1color:
  10727  2dc7
  10728  2dc7		       a2 e6		      LDX	#<playercolorL0578_1
  10729  2dc9		       86 87		      STX	player1color
  10730  2dcb		       a9 f9		      LDA	#>playercolorL0578_1
  10731  2dcd		       85 88		      STA	player1color+1
  10732  2dcf				   .L0579		;  return thisbank
  10733  2dcf
  10734  2dcf		       60		      RTS
  10735  2dd0				   .
  10736  2dd0							; 
  10737  2dd0
  10738  2dd0				   .__Goomba_1
  10739  2dd0							; __Goomba_1
  10740  2dd0
  10741  2dd0				   .L0580		;  player1:
  10742  2dd0
  10743  2dd0		       a2 f1		      LDX	#<playerL0580_1
  10744  2dd2		       86 8c		      STX	player1pointerlo
  10745  2dd4		       a9 f9		      LDA	#>playerL0580_1
  10746  2dd6		       85 8d		      STA	player1pointerhi
  10747  2dd8		       a9 0a		      LDA	#10
  10748  2dda		       85 8f		      STA	player1height
  10749  2ddc				   .L0581		;  return thisbank
  10750  2ddc
  10751  2ddc		       60		      RTS
  10752  2ddd				   .
  10753  2ddd							; 
  10754  2ddd
  10755  2ddd				   .__Goomba_2
  10756  2ddd							; __Goomba_2
  10757  2ddd
  10758  2ddd				   .L0582		;  player1:
  10759  2ddd
  10760  2ddd		       a2 00		      LDX	#<playerL0582_1
  10761  2ddf		       86 8c		      STX	player1pointerlo
  10762  2de1		       a9 fa		      LDA	#>playerL0582_1
  10763  2de3		       85 8d		      STA	player1pointerhi
  10764  2de5		       a9 0a		      LDA	#10
  10765  2de7		       85 8f		      STA	player1height
  10766  2de9				   .L0583		;  return thisbank
  10767  2de9
  10768  2de9		       60		      RTS
  10769  2dea				   .
  10770  2dea							; 
  10771  2dea
  10772  2dea				   .__Beetle_Color
  10773  2dea							; __Beetle_Color
  10774  2dea
  10775  2dea				   .L0584		;  player1color:
  10776  2dea
  10777  2dea		       a2 0b		      LDX	#<playercolorL0584_1
  10778  2dec		       86 87		      STX	player1color
  10779  2dee		       a9 fa		      LDA	#>playercolorL0584_1
  10780  2df0		       85 88		      STA	player1color+1
  10781  2df2				   .L0585		;  return thisbank
  10782  2df2
  10783  2df2		       60		      RTS
  10784  2df3				   .
  10785  2df3							; 
  10786  2df3
  10787  2df3				   .__Beetle_1
  10788  2df3							; __Beetle_1
  10789  2df3
  10790  2df3				   .L0586		;  player1:
  10791  2df3
  10792  2df3		       a2 15		      LDX	#<playerL0586_1
  10793  2df5		       86 8c		      STX	player1pointerlo
  10794  2df7		       a9 fa		      LDA	#>playerL0586_1
  10795  2df9		       85 8d		      STA	player1pointerhi
  10796  2dfb		       a9 09		      LDA	#9
  10797  2dfd		       85 8f		      STA	player1height
  10798  2dff				   .L0587		;  return thisbank
  10799  2dff
  10800  2dff		       60		      RTS
  10801  2e00				   .
  10802  2e00							; 
  10803  2e00
  10804  2e00				   .__Beetle_2
  10805  2e00							; __Beetle_2
  10806  2e00
  10807  2e00				   .L0588		;  player1:
  10808  2e00
  10809  2e00		       a2 1f		      LDX	#<playerL0588_1
  10810  2e02		       86 8c		      STX	player1pointerlo
  10811  2e04		       a9 fa		      LDA	#>playerL0588_1
  10812  2e06		       85 8d		      STA	player1pointerhi
  10813  2e08		       a9 09		      LDA	#9
  10814  2e0a		       85 8f		      STA	player1height
  10815  2e0c				   .L0589		;  return thisbank
  10816  2e0c
  10817  2e0c		       60		      RTS
  10818  2e0d				   .
  10819  2e0d							; 
  10820  2e0d
  10821  2e0d				   .__Bullet_Bill
  10822  2e0d							; __Bullet_Bill
  10823  2e0d
  10824  2e0d				   .L0590		;  player1color:
  10825  2e0d
  10826  2e0d		       a2 29		      LDX	#<playercolorL0590_1
  10827  2e0f		       86 87		      STX	player1color
  10828  2e11		       a9 fa		      LDA	#>playercolorL0590_1
  10829  2e13		       85 88		      STA	player1color+1
  10830  2e15				   .
  10831  2e15							; 
  10832  2e15
  10833  2e15				   .L0591		;  player1:
  10834  2e15
  10835  2e15		       a2 31		      LDX	#<playerL0591_1
  10836  2e17		       86 8c		      STX	player1pointerlo
  10837  2e19		       a9 fa		      LDA	#>playerL0591_1
  10838  2e1b		       85 8d		      STA	player1pointerhi
  10839  2e1d		       a9 07		      LDA	#7
  10840  2e1f		       85 8f		      STA	player1height
  10841  2e21				   .L0592		;  return thisbank
  10842  2e21
  10843  2e21		       60		      RTS
  10844  2e22				   .
  10845  2e22							; 
  10846  2e22
  10847  2e22				   .__Fireball_Color
  10848  2e22							; __Fireball_Color
  10849  2e22
  10850  2e22				   .L0593		;  player1color:
  10851  2e22
  10852  2e22		       a2 39		      LDX	#<playercolorL0593_1
  10853  2e24		       86 87		      STX	player1color
  10854  2e26		       a9 fa		      LDA	#>playercolorL0593_1
  10855  2e28		       85 88		      STA	player1color+1
  10856  2e2a				   .L0594		;  return thisbank
  10857  2e2a
  10858  2e2a		       60		      RTS
  10859  2e2b				   .
  10860  2e2b							; 
  10861  2e2b
  10862  2e2b				   .__Fireball_1
  10863  2e2b							; __Fireball_1
  10864  2e2b
  10865  2e2b				   .L0595		;  player1:
  10866  2e2b
  10867  2e2b		       a2 41		      LDX	#<playerL0595_1
  10868  2e2d		       86 8c		      STX	player1pointerlo
  10869  2e2f		       a9 fa		      LDA	#>playerL0595_1
  10870  2e31		       85 8d		      STA	player1pointerhi
  10871  2e33		       a9 07		      LDA	#7
  10872  2e35		       85 8f		      STA	player1height
  10873  2e37				   .L0596		;  return thisbank
  10874  2e37
  10875  2e37		       60		      RTS
  10876  2e38				   .
  10877  2e38							; 
  10878  2e38
  10879  2e38				   .__Fireball_2
  10880  2e38							; __Fireball_2
  10881  2e38
  10882  2e38				   .L0597		;  player1:
  10883  2e38
  10884  2e38		       a2 49		      LDX	#<playerL0597_1
  10885  2e3a		       86 8c		      STX	player1pointerlo
  10886  2e3c		       a9 fa		      LDA	#>playerL0597_1
  10887  2e3e		       85 8d		      STA	player1pointerhi
  10888  2e40		       a9 07		      LDA	#7
  10889  2e42		       85 8f		      STA	player1height
  10890  2e44				   .L0598		;  return thisbank
  10891  2e44
  10892  2e44		       60		      RTS
  10893  2e45				   .
  10894  2e45							; 
  10895  2e45
  10896  2e45				   .__Green_Koopa_Color
  10897  2e45							; __Green_Koopa_Color
  10898  2e45
  10899  2e45				   .L0599		;  player1color:
  10900  2e45
  10901  2e45		       a2 51		      LDX	#<playercolorL0599_1
  10902  2e47		       86 87		      STX	player1color
  10903  2e49		       a9 fa		      LDA	#>playercolorL0599_1
  10904  2e4b		       85 88		      STA	player1color+1
  10905  2e4d				   .L0600		;  return thisbank
  10906  2e4d
  10907  2e4d		       60		      RTS
  10908  2e4e				   .
  10909  2e4e							; 
  10910  2e4e
  10911  2e4e				   .__Red_Koopa_Color
  10912  2e4e							; __Red_Koopa_Color
  10913  2e4e
  10914  2e4e				   .L0601		;  player1color:
  10915  2e4e
  10916  2e4e		       a2 5e		      LDX	#<playercolorL0601_1
  10917  2e50		       86 87		      STX	player1color
  10918  2e52		       a9 fa		      LDA	#>playercolorL0601_1
  10919  2e54		       85 88		      STA	player1color+1
  10920  2e56				   .L0602		;  return thisbank
  10921  2e56
  10922  2e56		       60		      RTS
  10923  2e57				   .
  10924  2e57							; 
  10925  2e57
  10926  2e57				   .__F_Koopa_1
  10927  2e57							; __F_Koopa_1
  10928  2e57
  10929  2e57				   .L0603		;  player1:
  10930  2e57
  10931  2e57		       a2 6b		      LDX	#<playerL0603_1
  10932  2e59		       86 8c		      STX	player1pointerlo
  10933  2e5b		       a9 fa		      LDA	#>playerL0603_1
  10934  2e5d		       85 8d		      STA	player1pointerhi
  10935  2e5f		       a9 0c		      LDA	#12
  10936  2e61		       85 8f		      STA	player1height
  10937  2e63				   .L0604		;  return thisbank
  10938  2e63
  10939  2e63		       60		      RTS
  10940  2e64				   .
  10941  2e64							; 
  10942  2e64
  10943  2e64				   .__F_Koopa_2
  10944  2e64							; __F_Koopa_2
  10945  2e64
  10946  2e64				   .L0605		;  player1:
  10947  2e64
  10948  2e64		       a2 78		      LDX	#<playerL0605_1
  10949  2e66		       86 8c		      STX	player1pointerlo
  10950  2e68		       a9 fa		      LDA	#>playerL0605_1
  10951  2e6a		       85 8d		      STA	player1pointerhi
  10952  2e6c		       a9 0c		      LDA	#12
  10953  2e6e		       85 8f		      STA	player1height
  10954  2e70				   .L0606		;  return thisbank
  10955  2e70
  10956  2e70		       60		      RTS
  10957  2e71				   .
  10958  2e71							; 
  10959  2e71
  10960  2e71				   .__Koopa_1
  10961  2e71							; __Koopa_1
  10962  2e71
  10963  2e71				   .L0607		;  player1:
  10964  2e71
  10965  2e71		       a2 85		      LDX	#<playerL0607_1
  10966  2e73		       86 8c		      STX	player1pointerlo
  10967  2e75		       a9 fa		      LDA	#>playerL0607_1
  10968  2e77		       85 8d		      STA	player1pointerhi
  10969  2e79		       a9 0c		      LDA	#12
  10970  2e7b		       85 8f		      STA	player1height
  10971  2e7d				   .L0608		;  return thisbank
  10972  2e7d
  10973  2e7d		       60		      RTS
  10974  2e7e				   .
  10975  2e7e							; 
  10976  2e7e
  10977  2e7e				   .__Koopa_2
  10978  2e7e							; __Koopa_2
  10979  2e7e
  10980  2e7e				   .L0609		;  player1:
  10981  2e7e
  10982  2e7e		       a2 92		      LDX	#<playerL0609_1
  10983  2e80		       86 8c		      STX	player1pointerlo
  10984  2e82		       a9 fa		      LDA	#>playerL0609_1
  10985  2e84		       85 8d		      STA	player1pointerhi
  10986  2e86		       a9 0c		      LDA	#12
  10987  2e88		       85 8f		      STA	player1height
  10988  2e8a				   .L0610		;  return thisbank
  10989  2e8a
  10990  2e8a		       60		      RTS
  10991  2e8b				   .
  10992  2e8b							; 
  10993  2e8b
  10994  2e8b				   .__Spny_Ball_Color
  10995  2e8b							; __Spny_Ball_Color
  10996  2e8b
  10997  2e8b				   .L0611		;  player1color:
  10998  2e8b
  10999  2e8b		       a2 9f		      LDX	#<playercolorL0611_1
  11000  2e8d		       86 87		      STX	player1color
  11001  2e8f		       a9 fa		      LDA	#>playercolorL0611_1
  11002  2e91		       85 88		      STA	player1color+1
  11003  2e93				   .L0612		;  return thisbank
  11004  2e93
  11005  2e93		       60		      RTS
  11006  2e94				   .
  11007  2e94							; 
  11008  2e94
  11009  2e94				   .__Spny_Ball_1
  11010  2e94							; __Spny_Ball_1
  11011  2e94
  11012  2e94				   .L0613		;  player1:
  11013  2e94
  11014  2e94		       a2 a8		      LDX	#<playerL0613_1
  11015  2e96		       86 8c		      STX	player1pointerlo
  11016  2e98		       a9 fa		      LDA	#>playerL0613_1
  11017  2e9a		       85 8d		      STA	player1pointerhi
  11018  2e9c		       a9 08		      LDA	#8
  11019  2e9e		       85 8f		      STA	player1height
  11020  2ea0				   .L0614		;  return thisbank
  11021  2ea0
  11022  2ea0		       60		      RTS
  11023  2ea1				   .
  11024  2ea1							; 
  11025  2ea1
  11026  2ea1				   .__Spny_Ball_2
  11027  2ea1							; __Spny_Ball_2
  11028  2ea1
  11029  2ea1				   .L0615		;  player1:
  11030  2ea1
  11031  2ea1		       a2 b1		      LDX	#<playerL0615_1
  11032  2ea3		       86 8c		      STX	player1pointerlo
  11033  2ea5		       a9 fa		      LDA	#>playerL0615_1
  11034  2ea7		       85 8d		      STA	player1pointerhi
  11035  2ea9		       a9 08		      LDA	#8
  11036  2eab		       85 8f		      STA	player1height
  11037  2ead				   .L0616		;  return thisbank
  11038  2ead
  11039  2ead		       60		      RTS
  11040  2eae				   .
  11041  2eae							; 
  11042  2eae
  11043  2eae				   .__SBColor
  11044  2eae							; __SBColor
  11045  2eae
  11046  2eae				   .L0617		;  player1color:
  11047  2eae
  11048  2eae		       a2 ba		      LDX	#<playercolorL0617_1
  11049  2eb0		       86 87		      STX	player1color
  11050  2eb2		       a9 fa		      LDA	#>playercolorL0617_1
  11051  2eb4		       85 88		      STA	player1color+1
  11052  2eb6				   .L0618		;  return thisbank
  11053  2eb6
  11054  2eb6		       60		      RTS
  11055  2eb7				   .
  11056  2eb7							; 
  11057  2eb7
  11058  2eb7				   .__ShellB
  11059  2eb7							; __ShellB
  11060  2eb7
  11061  2eb7				   .L0619		;  player1:
  11062  2eb7
  11063  2eb7		       a2 c2		      LDX	#<playerL0619_1
  11064  2eb9		       86 8c		      STX	player1pointerlo
  11065  2ebb		       a9 fa		      LDA	#>playerL0619_1
  11066  2ebd		       85 8d		      STA	player1pointerhi
  11067  2ebf		       a9 07		      LDA	#7
  11068  2ec1		       85 8f		      STA	player1height
  11069  2ec3				   .L0620		;  return thisbank
  11070  2ec3
  11071  2ec3		       60		      RTS
  11072  2ec4				   .
  11073  2ec4							; 
  11074  2ec4
  11075  2ec4				   .__SGKColor
  11076  2ec4							; __SGKColor
  11077  2ec4
  11078  2ec4				   .L0621		;  player1color:
  11079  2ec4
  11080  2ec4		       a2 ca		      LDX	#<playercolorL0621_1
  11081  2ec6		       86 87		      STX	player1color
  11082  2ec8		       a9 fa		      LDA	#>playercolorL0621_1
  11083  2eca		       85 88		      STA	player1color+1
  11084  2ecc				   .L0622		;  return thisbank
  11085  2ecc
  11086  2ecc		       60		      RTS
  11087  2ecd				   .
  11088  2ecd							; 
  11089  2ecd
  11090  2ecd				   .__SRKColor
  11091  2ecd							; __SRKColor
  11092  2ecd
  11093  2ecd				   .L0623		;  player1color:
  11094  2ecd
  11095  2ecd		       a2 d2		      LDX	#<playercolorL0623_1
  11096  2ecf		       86 87		      STX	player1color
  11097  2ed1		       a9 fa		      LDA	#>playercolorL0623_1
  11098  2ed3		       85 88		      STA	player1color+1
  11099  2ed5				   .L0624		;  return thisbank
  11100  2ed5
  11101  2ed5		       60		      RTS
  11102  2ed6				   .
  11103  2ed6							; 
  11104  2ed6
  11105  2ed6				   .__ShellK
  11106  2ed6							; __ShellK
  11107  2ed6
  11108  2ed6				   .L0625		;  player1:
  11109  2ed6
  11110  2ed6		       a2 da		      LDX	#<playerL0625_1
  11111  2ed8		       86 8c		      STX	player1pointerlo
  11112  2eda		       a9 fa		      LDA	#>playerL0625_1
  11113  2edc		       85 8d		      STA	player1pointerhi
  11114  2ede		       a9 07		      LDA	#7
  11115  2ee0		       85 8f		      STA	player1height
  11116  2ee2				   .L0626		;  return thisbank
  11117  2ee2
  11118  2ee2		       60		      RTS
  11119  2ee3				   .
  11120  2ee3							; 
  11121  2ee3
  11122  2ee3				   .__SpineyC
  11123  2ee3							; __SpineyC
  11124  2ee3
  11125  2ee3				   .L0627		;  player1color:
  11126  2ee3
  11127  2ee3		       a2 e2		      LDX	#<playercolorL0627_1
  11128  2ee5		       86 87		      STX	player1color
  11129  2ee7		       a9 fa		      LDA	#>playercolorL0627_1
  11130  2ee9		       85 88		      STA	player1color+1
  11131  2eeb				   .L0628		;  return thisbank
  11132  2eeb
  11133  2eeb		       60		      RTS
  11134  2eec				   .
  11135  2eec							; 
  11136  2eec
  11137  2eec				   .__Spiney1
  11138  2eec							; __Spiney1
  11139  2eec
  11140  2eec				   .L0629		;  player1:
  11141  2eec
  11142  2eec		       a2 eb		      LDX	#<playerL0629_1
  11143  2eee		       86 8c		      STX	player1pointerlo
  11144  2ef0		       a9 fa		      LDA	#>playerL0629_1
  11145  2ef2		       85 8d		      STA	player1pointerhi
  11146  2ef4		       a9 08		      LDA	#8
  11147  2ef6		       85 8f		      STA	player1height
  11148  2ef8				   .L0630		;  return thisbank
  11149  2ef8
  11150  2ef8		       60		      RTS
  11151  2ef9				   .
  11152  2ef9							; 
  11153  2ef9
  11154  2ef9				   .__Spiney2
  11155  2ef9							; __Spiney2
  11156  2ef9
  11157  2ef9				   .L0631		;  player1:
  11158  2ef9
  11159  2ef9		       a2 f4		      LDX	#<playerL0631_1
  11160  2efb		       86 8c		      STX	player1pointerlo
  11161  2efd		       a9 fa		      LDA	#>playerL0631_1
  11162  2eff		       85 8d		      STA	player1pointerhi
  11163  2f01		       a9 08		      LDA	#8
  11164  2f03		       85 8f		      STA	player1height
  11165  2f05				   .L0632		;  return thisbank
  11166  2f05
  11167  2f05		       60		      RTS
  11168  2f06				   .
  11169  2f06							; 
  11170  2f06
  11171  2f06				   .__Flagpole
  11172  2f06							; __Flagpole
  11173  2f06
  11174  2f06				   .L0633		;  player1color:
  11175  2f06
  11176  2f06		       a2 00		      LDX	#<playercolorL0633_1
  11177  2f08		       86 87		      STX	player1color
  11178  2f0a		       a9 fb		      LDA	#>playercolorL0633_1
  11179  2f0c		       85 88		      STA	player1color+1
  11180  2f0e				   .
  11181  2f0e							; 
  11182  2f0e
  11183  2f0e				   .L0634		;  player1:
  11184  2f0e
  11185  2f0e		       a2 20		      LDX	#<playerL0634_1
  11186  2f10		       86 8c		      STX	player1pointerlo
  11187  2f12		       a9 fb		      LDA	#>playerL0634_1
  11188  2f14		       85 8d		      STA	player1pointerhi
  11189  2f16		       a9 1f		      LDA	#31
  11190  2f18		       85 8f		      STA	player1height
  11191  2f1a				   .L0635		;  return thisbank
  11192  2f1a
  11193  2f1a		       60		      RTS
  11194  2f1b				   .
  11195  2f1b							; 
  11196  2f1b
  11197  2f1b				   .__1UPC
  11198  2f1b							; __1UPC
  11199  2f1b
  11200  2f1b				   .L0636		;  player1color:
  11201  2f1b
  11202  2f1b		       a2 40		      LDX	#<playercolorL0636_1
  11203  2f1d		       86 87		      STX	player1color
  11204  2f1f		       a9 fb		      LDA	#>playercolorL0636_1
  11205  2f21		       85 88		      STA	player1color+1
  11206  2f23				   .L0637		;  return thisbank
  11207  2f23
  11208  2f23		       60		      RTS
  11209  2f24				   .
  11210  2f24							; 
  11211  2f24
  11212  2f24				   .__1UPMush
  11213  2f24							; __1UPMush
  11214  2f24
  11215  2f24				   .L0638		;  player1:
  11216  2f24
  11217  2f24		       a2 48		      LDX	#<playerL0638_1
  11218  2f26		       86 8c		      STX	player1pointerlo
  11219  2f28		       a9 fb		      LDA	#>playerL0638_1
  11220  2f2a		       85 8d		      STA	player1pointerhi
  11221  2f2c		       a9 07		      LDA	#7
  11222  2f2e		       85 8f		      STA	player1height
  11223  2f30				   .L0639		;  return thisbank
  11224  2f30
  11225  2f30		       60		      RTS
  11226  2f31				   .
  11227  2f31							; 
  11228  2f31
  11229  2f31				   .__CoinC
  11230  2f31							; __CoinC
  11231  2f31
  11232  2f31				   .L0640		;  player1color:
  11233  2f31
  11234  2f31		       a2 50		      LDX	#<playercolorL0640_1
  11235  2f33		       86 87		      STX	player1color
  11236  2f35		       a9 fb		      LDA	#>playercolorL0640_1
  11237  2f37		       85 88		      STA	player1color+1
  11238  2f39				   .L0641		;  return thisbank
  11239  2f39
  11240  2f39		       60		      RTS
  11241  2f3a				   .
  11242  2f3a							; 
  11243  2f3a
  11244  2f3a				   .__Coin1
  11245  2f3a							; __Coin1
  11246  2f3a
  11247  2f3a				   .L0642		;  player1:
  11248  2f3a
  11249  2f3a		       a2 58		      LDX	#<playerL0642_1
  11250  2f3c		       86 8c		      STX	player1pointerlo
  11251  2f3e		       a9 fb		      LDA	#>playerL0642_1
  11252  2f40		       85 8d		      STA	player1pointerhi
  11253  2f42		       a9 07		      LDA	#7
  11254  2f44		       85 8f		      STA	player1height
  11255  2f46				   .L0643		;  return thisbank
  11256  2f46
  11257  2f46		       60		      RTS
  11258  2f47				   .
  11259  2f47							; 
  11260  2f47
  11261  2f47				   .__Coin2
  11262  2f47							; __Coin2
  11263  2f47
  11264  2f47				   .L0644		;  player1:
  11265  2f47
  11266  2f47		       a2 60		      LDX	#<playerL0644_1
  11267  2f49		       86 8c		      STX	player1pointerlo
  11268  2f4b		       a9 fb		      LDA	#>playerL0644_1
  11269  2f4d		       85 8d		      STA	player1pointerhi
  11270  2f4f		       a9 07		      LDA	#7
  11271  2f51		       85 8f		      STA	player1height
  11272  2f53				   .L0645		;  return thisbank
  11273  2f53
  11274  2f53		       60		      RTS
  11275  2f54				   .
  11276  2f54							; 
  11277  2f54
  11278  2f54				   .__StarC1
  11279  2f54							; __StarC1
  11280  2f54
  11281  2f54				   .L0646		;  player1color:
  11282  2f54
  11283  2f54		       a2 68		      LDX	#<playercolorL0646_1
  11284  2f56		       86 87		      STX	player1color
  11285  2f58		       a9 fb		      LDA	#>playercolorL0646_1
  11286  2f5a		       85 88		      STA	player1color+1
  11287  2f5c				   .L0647		;  return thisbank
  11288  2f5c
  11289  2f5c		       60		      RTS
  11290  2f5d				   .
  11291  2f5d							; 
  11292  2f5d
  11293  2f5d				   .__StarC2
  11294  2f5d							; __StarC2
  11295  2f5d
  11296  2f5d				   .L0648		;  player1color:
  11297  2f5d
  11298  2f5d		       a2 70		      LDX	#<playercolorL0648_1
  11299  2f5f		       86 87		      STX	player1color
  11300  2f61		       a9 fb		      LDA	#>playercolorL0648_1
  11301  2f63		       85 88		      STA	player1color+1
  11302  2f65				   .L0649		;  return thisbank
  11303  2f65
  11304  2f65		       60		      RTS
  11305  2f66				   .
  11306  2f66							; 
  11307  2f66
  11308  2f66				   .__Star
  11309  2f66							; __Star
  11310  2f66
  11311  2f66				   .L0650		;  player1:
  11312  2f66
  11313  2f66		       a2 78		      LDX	#<playerL0650_1
  11314  2f68		       86 8c		      STX	player1pointerlo
  11315  2f6a		       a9 fb		      LDA	#>playerL0650_1
  11316  2f6c		       85 8d		      STA	player1pointerhi
  11317  2f6e		       a9 07		      LDA	#7
  11318  2f70		       85 8f		      STA	player1height
  11319  2f72				   .L0651		;  return thisbank
  11320  2f72
  11321  2f72		       60		      RTS
  11322  2f73				   .
  11323  2f73							; 
  11324  2f73
  11325  2f73				   .__PirahnaC
  11326  2f73							; __PirahnaC
  11327  2f73
  11328  2f73				   .L0652		;  player1color:
  11329  2f73
  11330  2f73		       a2 80		      LDX	#<playercolorL0652_1
  11331  2f75		       86 87		      STX	player1color
  11332  2f77		       a9 fb		      LDA	#>playercolorL0652_1
  11333  2f79		       85 88		      STA	player1color+1
  11334  2f7b				   .L0653		;  return thisbank
  11335  2f7b
  11336  2f7b		       60		      RTS
  11337  2f7c				   .
  11338  2f7c							; 
  11339  2f7c
  11340  2f7c				   .__Pirahna1
  11341  2f7c							; __Pirahna1
  11342  2f7c
  11343  2f7c				   .L0654		;  player1:
  11344  2f7c
  11345  2f7c		       a2 8f		      LDX	#<playerL0654_1
  11346  2f7e		       86 8c		      STX	player1pointerlo
  11347  2f80		       a9 fb		      LDA	#>playerL0654_1
  11348  2f82		       85 8d		      STA	player1pointerhi
  11349  2f84		       a9 0e		      LDA	#14
  11350  2f86		       85 8f		      STA	player1height
  11351  2f88				   .L0655		;  return thisbank
  11352  2f88
  11353  2f88		       60		      RTS
  11354  2f89				   .
  11355  2f89							; 
  11356  2f89
  11357  2f89				   .__Pirahna2
  11358  2f89							; __Pirahna2
  11359  2f89
  11360  2f89				   .L0656		;  player1:
  11361  2f89
  11362  2f89		       a2 9e		      LDX	#<playerL0656_1
  11363  2f8b		       86 8c		      STX	player1pointerlo
  11364  2f8d		       a9 fb		      LDA	#>playerL0656_1
  11365  2f8f		       85 8d		      STA	player1pointerhi
  11366  2f91		       a9 0e		      LDA	#14
  11367  2f93		       85 8f		      STA	player1height
  11368  2f95				   .L0657		;  return thisbank
  11369  2f95
  11370  2f95		       60		      RTS
  11371  2f96				   .
  11372  2f96							; 
  11373  2f96
  11374  2f96				   .__PlatformC
  11375  2f96							; __PlatformC
  11376  2f96
  11377  2f96				   .L0658		;  player1color:
  11378  2f96
  11379  2f96		       a2 ad		      LDX	#<playercolorL0658_1
  11380  2f98		       86 87		      STX	player1color
  11381  2f9a		       a9 fb		      LDA	#>playercolorL0658_1
  11382  2f9c		       85 88		      STA	player1color+1
  11383  2f9e				   .L0659		;  return thisbank
  11384  2f9e
  11385  2f9e		       60		      RTS
  11386  2f9f				   .
  11387  2f9f							; 
  11388  2f9f
  11389  2f9f				   .__Platform
  11390  2f9f							; __Platform
  11391  2f9f
  11392  2f9f				   .L0660		;  player1:
  11393  2f9f
  11394  2f9f		       a2 b5		      LDX	#<playerL0660_1
  11395  2fa1		       86 8c		      STX	player1pointerlo
  11396  2fa3		       a9 fb		      LDA	#>playerL0660_1
  11397  2fa5		       85 8d		      STA	player1pointerhi
  11398  2fa7		       a9 07		      LDA	#7
  11399  2fa9		       85 8f		      STA	player1height
  11400  2fab				   .L0661		;  return thisbank
  11401  2fab
  11402  2fab		       60		      RTS
  11403  2fac				   .
  11404  2fac							; 
  11405  2fac
  11406  2fac				   .__Tramp1C
  11407  2fac							; __Tramp1C
  11408  2fac
  11409  2fac				   .L0662		;  player1color:
  11410  2fac
  11411  2fac		       a2 bd		      LDX	#<playercolorL0662_1
  11412  2fae		       86 87		      STX	player1color
  11413  2fb0		       a9 fb		      LDA	#>playercolorL0662_1
  11414  2fb2		       85 88		      STA	player1color+1
  11415  2fb4				   .L0663		;  return thisbank
  11416  2fb4
  11417  2fb4		       60		      RTS
  11418  2fb5				   .
  11419  2fb5							; 
  11420  2fb5
  11421  2fb5				   .__Tramp1
  11422  2fb5							; __Tramp1
  11423  2fb5
  11424  2fb5				   .L0664		;  player1:
  11425  2fb5
  11426  2fb5		       a2 c5		      LDX	#<playerL0664_1
  11427  2fb7		       86 8c		      STX	player1pointerlo
  11428  2fb9		       a9 fb		      LDA	#>playerL0664_1
  11429  2fbb		       85 8d		      STA	player1pointerhi
  11430  2fbd		       a9 07		      LDA	#7
  11431  2fbf		       85 8f		      STA	player1height
  11432  2fc1				   .L0665		;  return thisbank
  11433  2fc1
  11434  2fc1		       60		      RTS
  11435  2fc2				   .
  11436  2fc2							; 
  11437  2fc2
  11438  2fc2				   .
  11439  2fc2							; 
  11440  2fc2
  11441  2fc2				   .
  11442  2fc2							; 
  11443  2fc2
  11444  2fc2				   .
  11445  2fc2							; 
  11446  2fc2
  11447  2fc2				   .
  11448  2fc2							; 
  11449  2fc2
  11450  2fc2				   .
  11451  2fc2							; 
  11452  2fc2
  11453  2fc2				   .
  11454  2fc2							; 
  11455  2fc2
  11456  2fc2				   .
  11457  2fc2							; 
  11458  2fc2
  11459  2fc2				   .
  11460  2fc2							; 
  11461  2fc2
  11462  2fc2				   .
  11463  2fc2							; 
  11464  2fc2
  11465  2fc2				   .
  11466  2fc2							; 
  11467  2fc2
  11468  2fc2				   .L0666		;  bank 3
  11469  2fc2
  11470  2fc2					      if	ECHO2
      18 bytes of ROM space left in bank 2
  11471  2fc2					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
  11472  2fc2					      endif
  11473  2fc2		       00 01	   ECHO2      =	1
  11474  2fd4					      ORG	$2FF4-bscode_length
  11475  2fd4					      RORG	$3FF4-bscode_length
  11476  2fd4		       a2 ff	   start_bank2 ldx	#$ff
  11477  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
  11478  2fd6				  -	      stx	FASTFETCH
  11479  2fd6					      endif
  11480  2fd6		       9a		      txs
  11481  2fd7				  -	      if	bankswitch == 64
  11482  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  11483  2fd7					      else
  11484  2fd7		       a9 f2		      lda	#>(start-1)
  11485  2fd9					      endif
  11486  2fd9		       48		      pha
  11487  2fda		       a9 51		      lda	#<(start-1)
  11488  2fdc		       48		      pha
  11489  2fdd		       48		      pha
  11490  2fde		       8a		      txa
  11491  2fdf		       48		      pha
  11492  2fe0		       ba		      tsx
  11493  2fe1					      if	bankswitch != 64
  11494  2fe1		       b5 04		      lda	4,x	; get high byte of return address
  11495  2fe3		       2a		      rol
  11496  2fe4		       2a		      rol
  11497  2fe5		       2a		      rol
  11498  2fe6		       2a		      rol
  11499  2fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  11500  2fe9		       aa		      tax
  11501  2fea		       e8		      inx
  11502  2feb				  -	      else
  11503  2feb				  -	      lda	4,x	; get high byte of return address
  11504  2feb				  -	      tay
  11505  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  11506  2feb				  -	      sta	4,x
  11507  2feb				  -	      tya
  11508  2feb				  -	      lsr
  11509  2feb				  -	      lsr
  11510  2feb				  -	      lsr
  11511  2feb				  -	      lsr
  11512  2feb				  -	      tax
  11513  2feb				  -	      inx
  11514  2feb					      endif
  11515  2feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  11516  2fee		       68		      pla
  11517  2fef		       aa		      tax
  11518  2ff0		       68		      pla
  11519  2ff1		       60		      rts
  11520  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  11521  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  11522  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  11523  2ff2					      endif
  11524  2ffc					      ORG	$2FFC
  11525  2ffc					      RORG	$3FFC
  11526  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
  11527  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
  11528  3000					      ORG	$3000
  11529  3000					      RORG	$5000
  11530  3000				   .
  11531  3000							; 
  11532  3000
  11533  3000				   .
  11534  3000							; 
  11535  3000
  11536  3000				   .
  11537  3000							; 
  11538  3000
  11539  3000				   .
  11540  3000							; 
  11541  3000
  11542  3000				   .
  11543  3000							; 
  11544  3000
  11545  3000				   .
  11546  3000							; 
  11547  3000
  11548  3000				   .
  11549  3000							; 
  11550  3000
  11551  3000				   .__Draw
  11552  3000							; __Draw
  11553  3000
  11554  3000				   .
  11555  3000							; 
  11556  3000
  11557  3000				   .
  11558  3000							; 
  11559  3000
  11560  3000				   .
  11561  3000							; 
  11562  3000
  11563  3000				   .
  11564  3000							; 
  11565  3000
  11566  3000				   .L0667		;  _Animation_Timer  =  _Animation_Timer  +  1
  11567  3000
  11568  3000		       e6 d4		      INC	_Animation_Timer
  11569  3002				   .
  11570  3002							; 
  11571  3002
  11572  3002				   .
  11573  3002							; 
  11574  3002
  11575  3002				   .
  11576  3002							; 
  11577  3002
  11578  3002				   .
  11579  3002							; 
  11580  3002
  11581  3002				   .
  11582  3002							; 
  11583  3002
  11584  3002				   .L0668		;  if _Enemy_Type  >  63 then goto __Draw_Boss
  11585  3002
  11586  3002		       a9 3f		      LDA	#63
  11587  3004		       c5 dc		      CMP	_Enemy_Type
  11588  3006		       b0 03		      BCS	.skipL0668
  11589  3008				   .condpart355
  11590  3008		       4c 77 50 	      jmp	.__Draw_Boss
  11591  300b
  11592  300b				   .skipL0668
  11593  300b				   .
  11594  300b							; 
  11595  300b
  11596  300b				   .
  11597  300b							; 
  11598  300b
  11599  300b				   .
  11600  300b							; 
  11601  300b
  11602  300b				   .
  11603  300b							; 
  11604  300b
  11605  300b				   .L0669		;  if _Animation_Timer  >  7 then _Animation_Timer  =	0  :  _Level_Timer  =  _Level_Timer  +	1
  11606  300b
  11607  300b		       a9 07		      LDA	#7
  11608  300d		       c5 d4		      CMP	_Animation_Timer
  11609  300f		       b0 06		      BCS	.skipL0669
  11610  3011				   .condpart356
  11611  3011		       a9 00		      LDA	#0
  11612  3013		       85 d4		      STA	_Animation_Timer
  11613  3015		       e6 d8		      INC	_Level_Timer
  11614  3017				   .skipL0669
  11615  3017				   .
  11616  3017							; 
  11617  3017
  11618  3017				   .
  11619  3017							; 
  11620  3017
  11621  3017				   .
  11622  3017							; 
  11623  3017
  11624  3017				   .
  11625  3017							; 
  11626  3017
  11627  3017				   .
  11628  3017							; 
  11629  3017
  11630  3017				   .L0670		;  if _Level_Timer  >	6  &&  _Bit7_Mario_Invincibility{7}  &&  _Star_Invincibility_Timer  =  0 then _Bit7_Mario_Invincibility{7}  =  0
  11631  3017
  11632  3017		       a9 06		      LDA	#6
  11633  3019		       c5 d8		      CMP	_Level_Timer
  11634  301b		       b0 10		      BCS	.skipL0670
  11635  301d				   .condpart357
  11636  301d		       24 d7		      BIT	_Bit7_Mario_Invincibility
  11637  301f		       10 0c		      BPL	.skip357then
  11638  3021				   .condpart358
  11639  3021		       a5 de		      LDA	_Star_Invincibility_Timer
  11640  3023		       c9 00		      CMP	#0
  11641  3025		       d0 06		      BNE	.skip358then
  11642  3027				   .condpart359
  11643  3027		       a5 d7		      LDA	_Bit7_Mario_Invincibility
  11644  3029		       29 7f		      AND	#127
  11645  302b		       85 d7		      STA	_Bit7_Mario_Invincibility
  11646  302d				   .skip358then
  11647  302d				   .skip357then
  11648  302d				   .skipL0670
  11649  302d				   .
  11650  302d							; 
  11651  302d
  11652  302d				   .L0671		;  if _Star_Invincibility_Timer  >  0 then _Star_Invincibility_Timer  =  _Star_Invincibility_Timer  +	1
  11653  302d
  11654  302d		       a9 00		      LDA	#0
  11655  302f		       c5 de		      CMP	_Star_Invincibility_Timer
  11656  3031		       b0 02		      BCS	.skipL0671
  11657  3033				   .condpart360
  11658  3033		       e6 de		      INC	_Star_Invincibility_Timer
  11659  3035				   .skipL0671
  11660  3035				   .
  11661  3035							; 
  11662  3035
  11663  3035				   .L0672		;  if _Star_Invincibility_Timer  =  160 then gosub __Star_Power_End
  11664  3035
  11665  3035		       a5 de		      LDA	_Star_Invincibility_Timer
  11666  3037		       c9 a0		      CMP	#160
  11667  3039		       d0 03		      BNE	.skipL0672
  11668  303b				   .condpart361
  11669  303b		       20 c5 5b 	      jsr	.__Star_Power_End
  11670  303e
  11671  303e				   .skipL0672
  11672  303e				   .
  11673  303e							; 
  11674  303e
  11675  303e				   .L0673		;  if _Level_Timer  >	25 then _Level_Timer  =  0  :  pfscore1  =  pfscore1 / 2
  11676  303e
  11677  303e		       a9 19		      LDA	#25
  11678  3040		       c5 d8		      CMP	_Level_Timer
  11679  3042		       b0 09		      BCS	.skipL0673
  11680  3044				   .condpart362
  11681  3044		       a9 00		      LDA	#0
  11682  3046		       85 d8		      STA	_Level_Timer
  11683  3048		       a5 f2		      LDA	pfscore1
  11684  304a		       4a		      lsr
  11685  304b		       85 f2		      STA	pfscore1
  11686  304d				   .skipL0673
  11687  304d				   .
  11688  304d							; 
  11689  304d
  11690  304d				   .L0674		;  if pfscore1  =  0 then goto __Mario_Death
  11691  304d
  11692  304d		       a5 f2		      LDA	pfscore1
  11693  304f		       c9 00		      CMP	#0
  11694  3051		       d0 03		      BNE	.skipL0674
  11695  3053				   .condpart363
  11696  3053		       4c 96 55 	      jmp	.__Mario_Death
  11697  3056
  11698  3056				   .skipL0674
  11699  3056				   .
  11700  3056							; 
  11701  3056
  11702  3056				   .L0675		;  if pfscore1  <  6  &&  pfscore1  >	2  &&  _Level_Timer  <	5 then AUDV0  =  10  :	AUDC0  =  1  :	AUDF0  =  10
  11703  3056
  11704  3056		       a5 f2		      LDA	pfscore1
  11705  3058		       c9 06		      CMP	#6
  11706  305a		       b0 18		      BCS	.skipL0675
  11707  305c				   .condpart364
  11708  305c		       a9 02		      LDA	#2
  11709  305e		       c5 f2		      CMP	pfscore1
  11710  3060		       b0 12		      BCS	.skip364then
  11711  3062				   .condpart365
  11712  3062		       a5 d8		      LDA	_Level_Timer
  11713  3064		       c9 05		      CMP	#5
  11714  3066		       b0 0c		      BCS	.skip365then
  11715  3068				   .condpart366
  11716  3068		       a9 0a		      LDA	#10
  11717  306a		       85 19		      STA	AUDV0
  11718  306c		       a9 01		      LDA	#1
  11719  306e		       85 15		      STA	AUDC0
  11720  3070		       a9 0a		      LDA	#10
  11721  3072		       85 17		      STA	AUDF0
  11722  3074				   .skip365then
  11723  3074				   .skip364then
  11724  3074				   .skipL0675
  11725  3074				   .
  11726  3074							; 
  11727  3074
  11728  3074				   .L0676		;  goto __Draw_2
  11729  3074
  11730  3074		       4c 9f 50 	      jmp	.__Draw_2
  11731  3077
  11732  3077				   .
  11733  3077							; 
  11734  3077
  11735  3077				   .__Draw_Boss
  11736  3077							; __Draw_Boss
  11737  3077
  11738  3077				   .
  11739  3077							; 
  11740  3077
  11741  3077				   .
  11742  3077							; 
  11743  3077
  11744  3077				   .
  11745  3077							; 
  11746  3077
  11747  3077				   .
  11748  3077							; 
  11749  3077
  11750  3077				   .L0677		;  if _Animation_Timer  >  7 then _Animation_Timer  =	0
  11751  3077
  11752  3077		       a9 07		      LDA	#7
  11753  3079		       c5 d4		      CMP	_Animation_Timer
  11754  307b		       b0 04		      BCS	.skipL0677
  11755  307d				   .condpart367
  11756  307d		       a9 00		      LDA	#0
  11757  307f		       85 d4		      STA	_Animation_Timer
  11758  3081				   .skipL0677
  11759  3081				   .
  11760  3081							; 
  11761  3081
  11762  3081				   .L0678		;  if _Star_Invincibility_Timer  >  0 then _Star_Invincibility_Timer  =  _Star_Invincibility_Timer  +	1
  11763  3081
  11764  3081		       a9 00		      LDA	#0
  11765  3083		       c5 de		      CMP	_Star_Invincibility_Timer
  11766  3085		       b0 02		      BCS	.skipL0678
  11767  3087				   .condpart368
  11768  3087		       e6 de		      INC	_Star_Invincibility_Timer
  11769  3089				   .skipL0678
  11770  3089				   .
  11771  3089							; 
  11772  3089
  11773  3089				   .L0679		;  if _Star_Invincibility_Timer  =  40 then _Star_Invincibility_Timer	=  0  :  _Bit7_Mario_On_Off{7}	=  0  :  _Bit7_Mario_Invincibility{7}  =  0
  11774  3089
  11775  3089		       a5 de		      LDA	_Star_Invincibility_Timer
  11776  308b		       c9 28		      CMP	#40
  11777  308d		       d0 10		      BNE	.skipL0679
  11778  308f				   .condpart369
  11779  308f		       a9 00		      LDA	#0
  11780  3091		       85 de		      STA	_Star_Invincibility_Timer
  11781  3093		       a5 da		      LDA	_Bit7_Mario_On_Off
  11782  3095		       29 7f		      AND	#127
  11783  3097		       85 da		      STA	_Bit7_Mario_On_Off
  11784  3099		       a5 d7		      LDA	_Bit7_Mario_Invincibility
  11785  309b		       29 7f		      AND	#127
  11786  309d		       85 d7		      STA	_Bit7_Mario_Invincibility
  11787  309f				   .skipL0679
  11788  309f				   .
  11789  309f							; 
  11790  309f
  11791  309f				   .__Draw_2
  11792  309f							; __Draw_2
  11793  309f
  11794  309f				   .
  11795  309f							; 
  11796  309f
  11797  309f				   .
  11798  309f							; 
  11799  309f
  11800  309f				   .
  11801  309f							; 
  11802  309f
  11803  309f				   .
  11804  309f							; 
  11805  309f
  11806  309f				   .
  11807  309f							; 
  11808  309f
  11809  309f				   .L0680		;  if player0y  >  94 then goto __Mario_Death
  11810  309f
  11811  309f		       a9 5e		      LDA	#94
  11812  30a1		       c5 85		      CMP	player0y
  11813  30a3		       b0 03		      BCS	.skipL0680
  11814  30a5				   .condpart370
  11815  30a5		       4c 96 55 	      jmp	.__Mario_Death
  11816  30a8
  11817  30a8				   .skipL0680
  11818  30a8				   .
  11819  30a8							; 
  11820  30a8
  11821  30a8				   .
  11822  30a8							; 
  11823  30a8
  11824  30a8				   .
  11825  30a8							; 
  11826  30a8
  11827  30a8				   .
  11828  30a8							; 
  11829  30a8
  11830  30a8				   .
  11831  30a8							; 
  11832  30a8
  11833  30a8				   .
  11834  30a8							; 
  11835  30a8
  11836  30a8				   .L0681		;  if _Level  =  3  &&  _Level_Data_Pointer  >  126  &&  player1y  >  96 then _Enemy_Type  =  _Trampoline  :  player1x  =  135  :  player1y  =  79
  11837  30a8
  11838  30a8		       a5 ea		      LDA	_Level
  11839  30aa		       c9 03		      CMP	#3
  11840  30ac		       d0 18		      BNE	.skipL0681
  11841  30ae				   .condpart371
  11842  30ae		       a9 7e		      LDA	#126
  11843  30b0		       c5 d5		      CMP	_Level_Data_Pointer
  11844  30b2		       b0 12		      BCS	.skip371then
  11845  30b4				   .condpart372
  11846  30b4		       a9 60		      LDA	#96
  11847  30b6		       c5 86		      CMP	player1y
  11848  30b8		       b0 0c		      BCS	.skip372then
  11849  30ba				   .condpart373
  11850  30ba		       a9 26		      LDA	#_Trampoline
  11851  30bc		       85 dc		      STA	_Enemy_Type
  11852  30be		       a9 87		      LDA	#135
  11853  30c0		       85 81		      STA	player1x
  11854  30c2		       a9 4f		      LDA	#79
  11855  30c4		       85 86		      STA	player1y
  11856  30c6				   .skip372then
  11857  30c6				   .skip371then
  11858  30c6				   .skipL0681
  11859  30c6				   .
  11860  30c6							; 
  11861  30c6
  11862  30c6				   .
  11863  30c6							; 
  11864  30c6
  11865  30c6				   .
  11866  30c6							; 
  11867  30c6
  11868  30c6				   .
  11869  30c6							; 
  11870  30c6
  11871  30c6				   .L0682		;  if !joy0down then _Bit5_Ducking_Flag{5}  =	0
  11872  30c6
  11873  30c6		       a9 20		      lda	#$20
  11874  30c8		       2c 80 02 	      bit	SWCHA
  11875  30cb		       f0 06		      BEQ	.skipL0682
  11876  30cd				   .condpart374
  11877  30cd		       a5 d7		      LDA	_Bit5_Ducking_Flag
  11878  30cf		       29 df		      AND	#223
  11879  30d1		       85 d7		      STA	_Bit5_Ducking_Flag
  11880  30d3				   .skipL0682
  11881  30d3				   .
  11882  30d3							; 
  11883  30d3
  11884  30d3				   .L0683		;  if joy0down  &&  player0y  =  63  &&  _Momentum_Up_Down  =	0  &&  player0x  >  110 then goto __Checkpoint
  11885  30d3
  11886  30d3		       a9 20		      lda	#$20
  11887  30d5		       2c 80 02 	      bit	SWCHA
  11888  30d8		       d0 15		      BNE	.skipL0683
  11889  30da				   .condpart375
  11890  30da		       a5 85		      LDA	player0y
  11891  30dc		       c9 3f		      CMP	#63
  11892  30de		       d0 0f		      BNE	.skip375then
  11893  30e0				   .condpart376
  11894  30e0		       a5 e1		      LDA	_Momentum_Up_Down
  11895  30e2		       c9 00		      CMP	#0
  11896  30e4		       d0 09		      BNE	.skip376then
  11897  30e6				   .condpart377
  11898  30e6		       a9 6e		      LDA	#110
  11899  30e8		       c5 80		      CMP	player0x
  11900  30ea		       b0 03		      BCS	.skip377then
  11901  30ec				   .condpart378
  11902  30ec		       4c c7 56 	      jmp	.__Checkpoint
  11903  30ef
  11904  30ef				   .skip377then
  11905  30ef				   .skip376then
  11906  30ef				   .skip375then
  11907  30ef				   .skipL0683
  11908  30ef				   .
  11909  30ef							; 
  11910  30ef
  11911  30ef				   .__More_Joy_Checks
  11912  30ef							; __More_Joy_Checks
  11913  30ef
  11914  30ef				   .
  11915  30ef							; 
  11916  30ef
  11917  30ef				   .L0684		;  if joy0down  &&  !_Bit6_Regular_Mario{6} then _Bit5_Ducking_Flag{5}  =  1
  11918  30ef
  11919  30ef		       a9 20		      lda	#$20
  11920  30f1		       2c 80 02 	      bit	SWCHA
  11921  30f4		       d0 0a		      BNE	.skipL0684
  11922  30f6				   .condpart379
  11923  30f6		       24 d7		      BIT	_Bit6_Regular_Mario
  11924  30f8		       70 06		      BVS	.skip379then
  11925  30fa				   .condpart380
  11926  30fa		       a5 d7		      LDA	_Bit5_Ducking_Flag
  11927  30fc		       09 20		      ORA	#32
  11928  30fe		       85 d7		      STA	_Bit5_Ducking_Flag
  11929  3100				   .skip379then
  11930  3100				   .skipL0684
  11931  3100				   .
  11932  3100							; 
  11933  3100
  11934  3100				   .L0685		;  if joy0left  &&  !_Bit5_Ducking_Flag{5} then _Bit0_Player_Facing_Direction{0}  =  1  :  goto __Moving
  11935  3100
  11936  3100		       2c 80 02 	      bit	SWCHA
  11937  3103		       70 0f		      BVS	.skipL0685
  11938  3105				   .condpart381
  11939  3105		       a5 d7		      LDA	_Bit5_Ducking_Flag
  11940  3107		       29 20		      AND	#32
  11941  3109		       d0 09		      BNE	.skip381then
  11942  310b				   .condpart382
  11943  310b		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  11944  310d		       09 01		      ORA	#1
  11945  310f		       85 d7		      STA	_Bit0_Player_Facing_Direction
  11946  3111		       4c 33 51 	      jmp	.__Moving
  11947  3114
  11948  3114				   .skip381then
  11949  3114				   .skipL0685
  11950  3114				   .
  11951  3114							; 
  11952  3114
  11953  3114				   .L0686		;  if joy0right  &&  !_Bit5_Ducking_Flag{5} then _Bit0_Player_Facing_Direction{0}  =  0  :  goto __Moving
  11954  3114
  11955  3114		       2c 80 02 	      bit	SWCHA
  11956  3117		       30 0f		      BMI	.skipL0686
  11957  3119				   .condpart383
  11958  3119		       a5 d7		      LDA	_Bit5_Ducking_Flag
  11959  311b		       29 20		      AND	#32
  11960  311d		       d0 09		      BNE	.skip383then
  11961  311f				   .condpart384
  11962  311f		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  11963  3121		       29 fe		      AND	#254
  11964  3123		       85 d7		      STA	_Bit0_Player_Facing_Direction
  11965  3125		       4c 33 51 	      jmp	.__Moving
  11966  3128
  11967  3128				   .skip383then
  11968  3128				   .skipL0686
  11969  3128				   .
  11970  3128							; 
  11971  3128
  11972  3128				   .L0687		;  if _Momentum_Left_Right  >	0 then _Momentum_Left_Right  =	_Momentum_Left_Right  -  1
  11973  3128
  11974  3128		       a9 00		      LDA	#0
  11975  312a		       c5 e0		      CMP	_Momentum_Left_Right
  11976  312c		       b0 02		      BCS	.skipL0687
  11977  312e				   .condpart385
  11978  312e		       c6 e0		      DEC	_Momentum_Left_Right
  11979  3130				   .skipL0687
  11980  3130				   .
  11981  3130							; 
  11982  3130
  11983  3130				   .L0688		;  goto __Check_Fire
  11984  3130
  11985  3130		       4c 85 51 	      jmp	.__Check_Fire
  11986  3133
  11987  3133				   .
  11988  3133							; 
  11989  3133
  11990  3133				   .
  11991  3133							; 
  11992  3133
  11993  3133				   .
  11994  3133							; 
  11995  3133
  11996  3133				   .
  11997  3133							; 
  11998  3133
  11999  3133				   .
  12000  3133							; 
  12001  3133
  12002  3133				   .
  12003  3133							; 
  12004  3133
  12005  3133				   .
  12006  3133							; 
  12007  3133
  12008  3133				   .
  12009  3133							; 
  12010  3133
  12011  3133				   .
  12012  3133							; 
  12013  3133
  12014  3133				   .
  12015  3133							; 
  12016  3133
  12017  3133				   .
  12018  3133							; 
  12019  3133
  12020  3133				   .__Moving
  12021  3133							; __Moving
  12022  3133
  12023  3133				   .L0689		;  _Momentum_Left_Right  =  _Momentum_Left_Right  +  1
  12024  3133
  12025  3133		       e6 e0		      INC	_Momentum_Left_Right
  12026  3135				   .
  12027  3135							; 
  12028  3135
  12029  3135				   .
  12030  3135							; 
  12031  3135
  12032  3135				   .
  12033  3135							; 
  12034  3135
  12035  3135				   .
  12036  3135							; 
  12037  3135
  12038  3135				   .L0690		;  if _Bit0_Genesis_Controller{0}  &&	!INPT1{7}  &&  _Momentum_Left_Right  >	4 then _Momentum_Left_Right  =	4
  12039  3135
  12040  3135		       a5 d9		      LDA	_Bit0_Genesis_Controller
  12041  3137		       4a		      LSR
  12042  3138		       90 0e		      BCC	.skipL0690
  12043  313a				   .condpart386
  12044  313a		       24 09		      BIT	INPT1
  12045  313c		       30 0a		      BMI	.skip386then
  12046  313e				   .condpart387
  12047  313e		       a9 04		      LDA	#4
  12048  3140		       c5 e0		      CMP	_Momentum_Left_Right
  12049  3142		       b0 04		      BCS	.skip387then
  12050  3144				   .condpart388
  12051  3144		       a9 04		      LDA	#4
  12052  3146		       85 e0		      STA	_Momentum_Left_Right
  12053  3148				   .skip387then
  12054  3148				   .skip386then
  12055  3148				   .skipL0690
  12056  3148				   .
  12057  3148							; 
  12058  3148
  12059  3148				   .L0691		;  if _Bit0_Genesis_Controller{0}  &&	INPT1{7}  &&  _Momentum_Left_Right  >  2 then _Momentum_Left_Right  =  2
  12060  3148
  12061  3148		       a5 d9		      LDA	_Bit0_Genesis_Controller
  12062  314a		       4a		      LSR
  12063  314b		       90 0e		      BCC	.skipL0691
  12064  314d				   .condpart389
  12065  314d		       24 09		      BIT	INPT1
  12066  314f		       10 0a		      BPL	.skip389then
  12067  3151				   .condpart390
  12068  3151		       a9 02		      LDA	#2
  12069  3153		       c5 e0		      CMP	_Momentum_Left_Right
  12070  3155		       b0 04		      BCS	.skip390then
  12071  3157				   .condpart391
  12072  3157		       a9 02		      LDA	#2
  12073  3159		       85 e0		      STA	_Momentum_Left_Right
  12074  315b				   .skip390then
  12075  315b				   .skip389then
  12076  315b				   .skipL0691
  12077  315b				   .
  12078  315b							; 
  12079  315b
  12080  315b				   .L0692		;  if _Bit0_Genesis_Controller{0} then goto __Check_Fire
  12081  315b
  12082  315b		       a5 d9		      LDA	_Bit0_Genesis_Controller
  12083  315d		       4a		      LSR
  12084  315e		       90 03		      BCC	.skipL0692
  12085  3160				   .condpart392
  12086  3160		       4c 85 51 	      jmp	.__Check_Fire
  12087  3163
  12088  3163				   .skipL0692
  12089  3163				   .
  12090  3163							; 
  12091  3163
  12092  3163				   .
  12093  3163							; 
  12094  3163
  12095  3163				   .
  12096  3163							; 
  12097  3163
  12098  3163				   .
  12099  3163							; 
  12100  3163
  12101  3163				   .L0693		;  if joy0up  &&  _Momentum_Left_Right  >  4 then _Momentum_Left_Right  =  4
  12102  3163
  12103  3163		       a9 10		      lda	#$10
  12104  3165		       2c 80 02 	      bit	SWCHA
  12105  3168		       d0 0a		      BNE	.skipL0693
  12106  316a				   .condpart393
  12107  316a		       a9 04		      LDA	#4
  12108  316c		       c5 e0		      CMP	_Momentum_Left_Right
  12109  316e		       b0 04		      BCS	.skip393then
  12110  3170				   .condpart394
  12111  3170		       a9 04		      LDA	#4
  12112  3172		       85 e0		      STA	_Momentum_Left_Right
  12113  3174				   .skip393then
  12114  3174				   .skipL0693
  12115  3174				   .
  12116  3174							; 
  12117  3174
  12118  3174				   .L0694		;  if !joy0up	&&  _Momentum_Left_Right  >  2 then _Momentum_Left_Right  =  2
  12119  3174
  12120  3174		       a9 10		      lda	#$10
  12121  3176		       2c 80 02 	      bit	SWCHA
  12122  3179		       f0 0a		      BEQ	.skipL0694
  12123  317b				   .condpart395
  12124  317b		       a9 02		      LDA	#2
  12125  317d		       c5 e0		      CMP	_Momentum_Left_Right
  12126  317f		       b0 04		      BCS	.skip395then
  12127  3181				   .condpart396
  12128  3181		       a9 02		      LDA	#2
  12129  3183		       85 e0		      STA	_Momentum_Left_Right
  12130  3185				   .skip395then
  12131  3185				   .skipL0694
  12132  3185				   .
  12133  3185							; 
  12134  3185
  12135  3185				   .__Check_Fire
  12136  3185							; __Check_Fire
  12137  3185
  12138  3185				   .
  12139  3185							; 
  12140  3185
  12141  3185				   .
  12142  3185							; 
  12143  3185
  12144  3185				   .
  12145  3185							; 
  12146  3185
  12147  3185				   .
  12148  3185							; 
  12149  3185
  12150  3185				   .L0695		;  if _Bit0_Genesis_Controller{0}  &&	INPT1{7} then _Bit1_Genesis_Button_Pressed{1}  =  0
  12151  3185
  12152  3185		       a5 d9		      LDA	_Bit0_Genesis_Controller
  12153  3187		       4a		      LSR
  12154  3188		       90 0a		      BCC	.skipL0695
  12155  318a				   .condpart397
  12156  318a		       24 09		      BIT	INPT1
  12157  318c		       10 06		      BPL	.skip397then
  12158  318e				   .condpart398
  12159  318e		       a5 d9		      LDA	_Bit1_Genesis_Button_Pressed
  12160  3190		       29 fd		      AND	#253
  12161  3192		       85 d9		      STA	_Bit1_Genesis_Button_Pressed
  12162  3194				   .skip397then
  12163  3194				   .skipL0695
  12164  3194				   .
  12165  3194							; 
  12166  3194
  12167  3194				   .L0696		;  if _Bit0_Genesis_Controller{0}  &&	!INPT1{7}  &&  _Bit4_Firey_Mario_Power{4}  &&  ballx  =  0  &&	!_Bit1_Genesis_Button_Pressed{1} then gosub __Init_Fire
  12168  3194
  12169  3194		       a5 d9		      LDA	_Bit0_Genesis_Controller
  12170  3196		       4a		      LSR
  12171  3197		       90 19		      BCC	.skipL0696
  12172  3199				   .condpart399
  12173  3199		       24 09		      BIT	INPT1
  12174  319b		       30 15		      BMI	.skip399then
  12175  319d				   .condpart400
  12176  319d		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
  12177  319f		       29 10		      AND	#16
  12178  31a1		       f0 0f		      BEQ	.skip400then
  12179  31a3				   .condpart401
  12180  31a3		       a5 84		      LDA	ballx
  12181  31a5		       c9 00		      CMP	#0
  12182  31a7		       d0 09		      BNE	.skip401then
  12183  31a9				   .condpart402
  12184  31a9		       a5 d9		      LDA	_Bit1_Genesis_Button_Pressed
  12185  31ab		       29 02		      AND	#2
  12186  31ad		       d0 03		      BNE	.skip402then
  12187  31af				   .condpart403
  12188  31af		       20 01 53 	      jsr	.__Init_Fire
  12189  31b2
  12190  31b2				   .skip402then
  12191  31b2				   .skip401then
  12192  31b2				   .skip400then
  12193  31b2				   .skip399then
  12194  31b2				   .skipL0696
  12195  31b2				   .
  12196  31b2							; 
  12197  31b2
  12198  31b2				   .L0697		;  if _Bit0_Genesis_Controller{0} then goto __Check_Jump
  12199  31b2
  12200  31b2		       a5 d9		      LDA	_Bit0_Genesis_Controller
  12201  31b4		       4a		      LSR
  12202  31b5		       90 03		      BCC	.skipL0697
  12203  31b7				   .condpart404
  12204  31b7		       4c e3 51 	      jmp	.__Check_Jump
  12205  31ba
  12206  31ba				   .skipL0697
  12207  31ba				   .
  12208  31ba							; 
  12209  31ba
  12210  31ba				   .
  12211  31ba							; 
  12212  31ba
  12213  31ba				   .
  12214  31ba							; 
  12215  31ba
  12216  31ba				   .
  12217  31ba							; 
  12218  31ba
  12219  31ba				   .L0698		;  if !joy0up then _Bit1_Genesis_Button_Pressed{1}  =	0
  12220  31ba
  12221  31ba		       a9 10		      lda	#$10
  12222  31bc		       2c 80 02 	      bit	SWCHA
  12223  31bf		       f0 06		      BEQ	.skipL0698
  12224  31c1				   .condpart405
  12225  31c1		       a5 d9		      LDA	_Bit1_Genesis_Button_Pressed
  12226  31c3		       29 fd		      AND	#253
  12227  31c5		       85 d9		      STA	_Bit1_Genesis_Button_Pressed
  12228  31c7				   .skipL0698
  12229  31c7				   .
  12230  31c7							; 
  12231  31c7
  12232  31c7				   .L0699		;  if joy0up  &&  _Bit4_Firey_Mario_Power{4}  &&  ballx  =  0	&&  !_Bit1_Genesis_Button_Pressed{1} then gosub __Init_Fire
  12233  31c7
  12234  31c7		       a9 10		      lda	#$10
  12235  31c9		       2c 80 02 	      bit	SWCHA
  12236  31cc		       d0 15		      BNE	.skipL0699
  12237  31ce				   .condpart406
  12238  31ce		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
  12239  31d0		       29 10		      AND	#16
  12240  31d2		       f0 0f		      BEQ	.skip406then
  12241  31d4				   .condpart407
  12242  31d4		       a5 84		      LDA	ballx
  12243  31d6		       c9 00		      CMP	#0
  12244  31d8		       d0 09		      BNE	.skip407then
  12245  31da				   .condpart408
  12246  31da		       a5 d9		      LDA	_Bit1_Genesis_Button_Pressed
  12247  31dc		       29 02		      AND	#2
  12248  31de		       d0 03		      BNE	.skip408then
  12249  31e0				   .condpart409
  12250  31e0		       20 01 53 	      jsr	.__Init_Fire
  12251  31e3
  12252  31e3				   .skip408then
  12253  31e3				   .skip407then
  12254  31e3				   .skip406then
  12255  31e3				   .skipL0699
  12256  31e3				   .
  12257  31e3							; 
  12258  31e3
  12259  31e3				   .__Check_Jump
  12260  31e3							; __Check_Jump
  12261  31e3
  12262  31e3				   .
  12263  31e3							; 
  12264  31e3
  12265  31e3				   .L0700		;  if !joy0fire then _Bit2_Fire_Button_Pressed{2}  =  0
  12266  31e3
  12267  31e3		       24 0c		      bit	INPT4
  12268  31e5		       10 06		      BPL	.skipL0700
  12269  31e7				   .condpart410
  12270  31e7		       a5 d7		      LDA	_Bit2_Fire_Button_Pressed
  12271  31e9		       29 fb		      AND	#251
  12272  31eb		       85 d7		      STA	_Bit2_Fire_Button_Pressed
  12273  31ed				   .skipL0700
  12274  31ed				   .
  12275  31ed							; 
  12276  31ed
  12277  31ed				   .L0701		;  if joy0fire  &&  !_Bit1_Jumping_Flag{1}  &&  _Momentum_Up_Down  =  0  &&  !_Bit2_Fire_Button_Pressed{2} then gosub __Init_Jump
  12278  31ed
  12279  31ed		       24 0c		      bit	INPT4
  12280  31ef		       30 15		      BMI	.skipL0701
  12281  31f1				   .condpart411
  12282  31f1		       a5 d7		      LDA	_Bit1_Jumping_Flag
  12283  31f3		       29 02		      AND	#2
  12284  31f5		       d0 0f		      BNE	.skip411then
  12285  31f7				   .condpart412
  12286  31f7		       a5 e1		      LDA	_Momentum_Up_Down
  12287  31f9		       c9 00		      CMP	#0
  12288  31fb		       d0 09		      BNE	.skip412then
  12289  31fd				   .condpart413
  12290  31fd		       a5 d7		      LDA	_Bit2_Fire_Button_Pressed
  12291  31ff		       29 04		      AND	#4
  12292  3201		       d0 03		      BNE	.skip413then
  12293  3203				   .condpart414
  12294  3203		       20 e6 52 	      jsr	.__Init_Jump
  12295  3206
  12296  3206				   .skip413then
  12297  3206				   .skip412then
  12298  3206				   .skip411then
  12299  3206				   .skipL0701
  12300  3206				   .
  12301  3206							; 
  12302  3206
  12303  3206				   .
  12304  3206							; 
  12305  3206
  12306  3206				   .
  12307  3206							; 
  12308  3206
  12309  3206				   .
  12310  3206							; 
  12311  3206
  12312  3206				   .L0702		;  if !_Bit1_Jumping_Flag{1} then goto __Check_Shell
  12313  3206
  12314  3206		       a5 d7		      LDA	_Bit1_Jumping_Flag
  12315  3208		       29 02		      AND	#2
  12316  320a		       d0 03		      BNE	.skipL0702
  12317  320c				   .condpart415
  12318  320c		       4c 22 52 	      jmp	.__Check_Shell
  12319  320f
  12320  320f				   .skipL0702
  12321  320f				   .
  12322  320f							; 
  12323  320f
  12324  320f				   .L0703		;  temp4  =  6  +  _Momentum_Up_Down
  12325  320f
  12326  320f		       a9 06		      LDA	#6
  12327  3211		       18		      CLC
  12328  3212		       65 e1		      ADC	_Momentum_Up_Down
  12329  3214		       85 9f		      STA	temp4
  12330  3216				   .
  12331  3216							; 
  12332  3216
  12333  3216				   .L0704		;  AUDV0  =  12
  12334  3216
  12335  3216		       a9 0c		      LDA	#12
  12336  3218		       85 19		      STA	AUDV0
  12337  321a				   .L0705		;  AUDC0  =  12
  12338  321a
  12339  321a		       a9 0c		      LDA	#12
  12340  321c		       85 15		      STA	AUDC0
  12341  321e				   .L0706		;  AUDF0  =  temp4
  12342  321e
  12343  321e		       a5 9f		      LDA	temp4
  12344  3220		       85 17		      STA	AUDF0
  12345  3222				   .
  12346  3222							; 
  12347  3222
  12348  3222				   .
  12349  3222							; 
  12350  3222
  12351  3222				   .
  12352  3222							; 
  12353  3222
  12354  3222				   .
  12355  3222							; 
  12356  3222
  12357  3222				   .
  12358  3222							; 
  12359  3222
  12360  3222				   .
  12361  3222							; 
  12362  3222
  12363  3222				   .__Check_Shell
  12364  3222							; __Check_Shell
  12365  3222
  12366  3222				   .
  12367  3222							; 
  12368  3222
  12369  3222				   .L0707		;  if _Moving_Shell_X_Coordinate  =  0  &&  _Moving_Shell_Y_Coordinate  =  0 then goto __Music_Part
  12370  3222
  12371  3222		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
  12372  3224		       c9 00		      CMP	#0
  12373  3226		       d0 09		      BNE	.skipL0707
  12374  3228				   .condpart416
  12375  3228		       a5 e7		      LDA	_Moving_Shell_Y_Coordinate
  12376  322a		       c9 00		      CMP	#0
  12377  322c		       d0 03		      BNE	.skip416then
  12378  322e				   .condpart417
  12379  322e		       4c 74 52 	      jmp	.__Music_Part
  12380  3231
  12381  3231				   .skip416then
  12382  3231				   .skipL0707
  12383  3231				   .
  12384  3231							; 
  12385  3231
  12386  3231				   .L0708		;  pfpixel _Moving_Shell_X_Coordinate _Moving_Shell_Y_Coordinate off
  12387  3231
  12388  3231		       a2 01		      LDX	#1
  12389  3233		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
  12390  3235		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
  12391  3237		       85 ee		      sta	temp7
  12392  3239		       a9 52		      lda	#>(ret_point42-1)
  12393  323b		       48		      pha
  12394  323c		       a9 4e		      lda	#<(ret_point42-1)
  12395  323e		       48		      pha
  12396  323f		       a9 f2		      lda	#>(pfpixel-1)
  12397  3241		       48		      pha
  12398  3242		       a9 ba		      lda	#<(pfpixel-1)
  12399  3244		       48		      pha
  12400  3245		       a5 ee		      lda	temp7
  12401  3247		       48		      pha
  12402  3248		       8a		      txa
  12403  3249		       48		      pha
  12404  324a		       a2 08		      ldx	#8
  12405  324c		       4c eb ff 	      jmp	BS_jsr
  12406  324f				   ret_point42
  12407  324f				   .
  12408  324f							; 
  12409  324f
  12410  324f				   .L0709		;  x  =  _Moving_Shell_X_Coordinate  +  1
  12411  324f
  12412  324f		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
  12413  3251		       18		      CLC
  12414  3252		       69 01		      ADC	#1
  12415  3254		       85 eb		      STA	x
  12416  3256				   .
  12417  3256							; 
  12418  3256
  12419  3256				   .L0710		;  pfpixel x _Moving_Shell_Y_Coordinate off
  12420  3256
  12421  3256		       a2 01		      LDX	#1
  12422  3258		       a4 e7		      LDY	_Moving_Shell_Y_Coordinate
  12423  325a		       a5 eb		      LDA	x
  12424  325c		       85 ee		      sta	temp7
  12425  325e		       a9 52		      lda	#>(ret_point43-1)
  12426  3260		       48		      pha
  12427  3261		       a9 73		      lda	#<(ret_point43-1)
  12428  3263		       48		      pha
  12429  3264		       a9 f2		      lda	#>(pfpixel-1)
  12430  3266		       48		      pha
  12431  3267		       a9 ba		      lda	#<(pfpixel-1)
  12432  3269		       48		      pha
  12433  326a		       a5 ee		      lda	temp7
  12434  326c		       48		      pha
  12435  326d		       8a		      txa
  12436  326e		       48		      pha
  12437  326f		       a2 08		      ldx	#8
  12438  3271		       4c eb ff 	      jmp	BS_jsr
  12439  3274				   ret_point43
  12440  3274				   .
  12441  3274							; 
  12442  3274
  12443  3274				   .
  12444  3274							; 
  12445  3274
  12446  3274				   .
  12447  3274							; 
  12448  3274
  12449  3274				   .
  12450  3274							; 
  12451  3274
  12452  3274				   .
  12453  3274							; 
  12454  3274
  12455  3274				   .
  12456  3274							; 
  12457  3274
  12458  3274				   .
  12459  3274							; 
  12460  3274
  12461  3274				   .__Music_Part
  12462  3274							; __Music_Part
  12463  3274
  12464  3274				   .
  12465  3274							; 
  12466  3274
  12467  3274				   .L0711		;  if _Star_Invincibility_Timer  >  0	&&  _Enemy_Type  <  63 then goto __Get_Star_Music bank7
  12468  3274
  12469  3274		       a9 00		      LDA	#0
  12470  3276		       c5 de		      CMP	_Star_Invincibility_Timer
  12471  3278		       b0 18		      BCS	.skipL0711
  12472  327a				   .condpart418
  12473  327a		       a5 dc		      LDA	_Enemy_Type
  12474  327c		       c9 3f		      CMP	#63
  12475  327e		       b0 12		      BCS	.skip418then
  12476  3280				   .condpart419
  12477  3280		       85 ee		      sta	temp7
  12478  3282		       a9 d7		      lda	#>(.__Get_Star_Music-1)
  12479  3284		       48		      pha
  12480  3285		       a9 e0		      lda	#<(.__Get_Star_Music-1)
  12481  3287		       48		      pha
  12482  3288		       a5 ee		      lda	temp7
  12483  328a		       48		      pha
  12484  328b		       8a		      txa
  12485  328c		       48		      pha
  12486  328d		       a2 07		      ldx	#7
  12487  328f		       4c eb ff 	      jmp	BS_jsr
  12488  3292				   .skip418then
  12489  3292				   .skipL0711
  12490  3292				   .
  12491  3292							; 
  12492  3292
  12493  3292				   .L0712		;  if _Level  =  1  ||  _Level  =  3 then goto __Get_Music bank7
  12494  3292
  12495  3292		       a5 ea		      LDA	_Level
  12496  3294		       c9 01		      CMP	#1
  12497  3296		       d0 03		      BNE	.skipL0712
  12498  3298				   .condpart420
  12499  3298		       4c a1 52 	      jmp	.condpart421
  12500  329b				   .skipL0712
  12501  329b		       a5 ea		      LDA	_Level
  12502  329d		       c9 03		      CMP	#3
  12503  329f		       d0 12		      BNE	.skip122OR
  12504  32a1				   .condpart421
  12505  32a1		       85 ee		      sta	temp7
  12506  32a3		       a9 cf		      lda	#>(.__Get_Music-1)
  12507  32a5		       48		      pha
  12508  32a6		       a9 ff		      lda	#<(.__Get_Music-1)
  12509  32a8		       48		      pha
  12510  32a9		       a5 ee		      lda	temp7
  12511  32ab		       48		      pha
  12512  32ac		       8a		      txa
  12513  32ad		       48		      pha
  12514  32ae		       a2 07		      ldx	#7
  12515  32b0		       4c eb ff 	      jmp	BS_jsr
  12516  32b3				   .skip122OR
  12517  32b3				   .
  12518  32b3							; 
  12519  32b3
  12520  32b3				   .L0713		;  if _Level  =  2  ||  _Level  =  4 then goto __Get_UW_Music bank7
  12521  32b3
  12522  32b3		       a5 ea		      LDA	_Level
  12523  32b5		       c9 02		      CMP	#2
  12524  32b7		       d0 03		      BNE	.skipL0713
  12525  32b9				   .condpart422
  12526  32b9		       4c c2 52 	      jmp	.condpart423
  12527  32bc				   .skipL0713
  12528  32bc		       a5 ea		      LDA	_Level
  12529  32be		       c9 04		      CMP	#4
  12530  32c0		       d0 12		      BNE	.skip123OR
  12531  32c2				   .condpart423
  12532  32c2		       85 ee		      sta	temp7
  12533  32c4		       a9 d9		      lda	#>(.__Get_UW_Music-1)
  12534  32c6		       48		      pha
  12535  32c7		       a9 93		      lda	#<(.__Get_UW_Music-1)
  12536  32c9		       48		      pha
  12537  32ca		       a5 ee		      lda	temp7
  12538  32cc		       48		      pha
  12539  32cd		       8a		      txa
  12540  32ce		       48		      pha
  12541  32cf		       a2 07		      ldx	#7
  12542  32d1		       4c eb ff 	      jmp	BS_jsr
  12543  32d4				   .skip123OR
  12544  32d4				   .
  12545  32d4							; 
  12546  32d4
  12547  32d4				   .__Got_Music
  12548  32d4							; __Got_Music
  12549  32d4
  12550  32d4				   .
  12551  32d4							; 
  12552  32d4
  12553  32d4				   .L0714		;  goto __Main_2 bank1
  12554  32d4
  12555  32d4		       85 ee		      sta	temp7
  12556  32d6		       a9 11		      lda	#>(.__Main_2-1)
  12557  32d8		       48		      pha
  12558  32d9		       a9 e1		      lda	#<(.__Main_2-1)
  12559  32db		       48		      pha
  12560  32dc		       a5 ee		      lda	temp7
  12561  32de		       48		      pha
  12562  32df		       8a		      txa
  12563  32e0		       48		      pha
  12564  32e1		       a2 01		      ldx	#1
  12565  32e3		       4c eb ff 	      jmp	BS_jsr
  12566  32e6				   .
  12567  32e6							; 
  12568  32e6
  12569  32e6				   .__Init_Jump
  12570  32e6							; __Init_Jump
  12571  32e6
  12572  32e6				   .
  12573  32e6							; 
  12574  32e6
  12575  32e6				   .L0715		;  _Bit1_Jumping_Flag{1}  =  1  :  _Momentum_Up_Down  =  7  :	_Bit2_Fire_Button_Pressed{2}  =  1
  12576  32e6
  12577  32e6		       a5 d7		      LDA	_Bit1_Jumping_Flag
  12578  32e8		       09 02		      ORA	#2
  12579  32ea		       85 d7		      STA	_Bit1_Jumping_Flag
  12580  32ec		       a9 07		      LDA	#7
  12581  32ee		       85 e1		      STA	_Momentum_Up_Down
  12582  32f0		       a5 d7		      LDA	_Bit2_Fire_Button_Pressed
  12583  32f2		       09 04		      ORA	#4
  12584  32f4		       85 d7		      STA	_Bit2_Fire_Button_Pressed
  12585  32f6				   .
  12586  32f6							; 
  12587  32f6
  12588  32f6				   .L0716		;  if _Momentum_Left_Right  =	4 then _Momentum_Up_Down  =  8
  12589  32f6
  12590  32f6		       a5 e0		      LDA	_Momentum_Left_Right
  12591  32f8		       c9 04		      CMP	#4
  12592  32fa		       d0 04		      BNE	.skipL0716
  12593  32fc				   .condpart424
  12594  32fc		       a9 08		      LDA	#8
  12595  32fe		       85 e1		      STA	_Momentum_Up_Down
  12596  3300				   .skipL0716
  12597  3300				   .
  12598  3300							; 
  12599  3300
  12600  3300				   .L0717		;  return thisbank
  12601  3300
  12602  3300		       60		      RTS
  12603  3301				   .
  12604  3301							; 
  12605  3301
  12606  3301				   .__Init_Fire
  12607  3301							; __Init_Fire
  12608  3301
  12609  3301				   .
  12610  3301							; 
  12611  3301
  12612  3301				   .L0718		;  if _Bit0_Player_Facing_Direction{0} then ballx  =  player0x  :  _Bit2_Mario_Fireball_Direction{2}  =  0 else ballx	=  player0x  +	4  :  _Bit2_Mario_Fireball_Direction{2}  =  1
  12613  3301
  12614  3301		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  12615  3303		       4a		      LSR
  12616  3304		       90 0d		      BCC	.skipL0718
  12617  3306				   .condpart425
  12618  3306		       a5 80		      LDA	player0x
  12619  3308		       85 84		      STA	ballx
  12620  330a		       a5 da		      LDA	_Bit2_Mario_Fireball_Direction
  12621  330c		       29 fb		      AND	#251
  12622  330e		       85 da		      STA	_Bit2_Mario_Fireball_Direction
  12623  3310		       4c 20 53 	      jmp	.skipelse66
  12624  3313				   .skipL0718
  12625  3313		       a5 80		      LDA	player0x
  12626  3315		       18		      CLC
  12627  3316		       69 04		      ADC	#4
  12628  3318		       85 84		      STA	ballx
  12629  331a		       a5 da		      LDA	_Bit2_Mario_Fireball_Direction
  12630  331c		       09 04		      ORA	#4
  12631  331e		       85 da		      STA	_Bit2_Mario_Fireball_Direction
  12632  3320				   .skipelse66
  12633  3320				   .
  12634  3320							; 
  12635  3320
  12636  3320				   .L0719		;  bally  =  player0y	-  8
  12637  3320
  12638  3320		       a5 85		      LDA	player0y
  12639  3322		       38		      SEC
  12640  3323		       e9 08		      SBC	#8
  12641  3325		       85 89		      STA	bally
  12642  3327				   .
  12643  3327							; 
  12644  3327
  12645  3327				   .L0720		;  _Bit0_Mario_Fireball_Going_Down{0}	=  1  :  _Bit1_Genesis_Button_Pressed{1}  =  1
  12646  3327
  12647  3327		       a5 da		      LDA	_Bit0_Mario_Fireball_Going_Down
  12648  3329		       09 01		      ORA	#1
  12649  332b		       85 da		      STA	_Bit0_Mario_Fireball_Going_Down
  12650  332d		       a5 d9		      LDA	_Bit1_Genesis_Button_Pressed
  12651  332f		       09 02		      ORA	#2
  12652  3331		       85 d9		      STA	_Bit1_Genesis_Button_Pressed
  12653  3333				   .
  12654  3333							; 
  12655  3333
  12656  3333				   .L0721		;  AUDV0  =  12
  12657  3333
  12658  3333		       a9 0c		      LDA	#12
  12659  3335		       85 19		      STA	AUDV0
  12660  3337				   .L0722		;  AUDC0  =  14
  12661  3337
  12662  3337		       a9 0e		      LDA	#14
  12663  3339		       85 15		      STA	AUDC0
  12664  333b				   .L0723		;  AUDF0  =  0
  12665  333b
  12666  333b		       a9 00		      LDA	#0
  12667  333d		       85 17		      STA	AUDF0
  12668  333f				   .
  12669  333f							; 
  12670  333f
  12671  333f				   .L0724		;  return thisbank
  12672  333f
  12673  333f		       60		      RTS
  12674  3340				   .
  12675  3340							; 
  12676  3340
  12677  3340				   .
  12678  3340							; 
  12679  3340
  12680  3340				   .
  12681  3340							; 
  12682  3340
  12683  3340				   .
  12684  3340							; 
  12685  3340
  12686  3340				   .
  12687  3340							; 
  12688  3340
  12689  3340				   .
  12690  3340							; 
  12691  3340
  12692  3340				   .
  12693  3340							; 
  12694  3340
  12695  3340				   .
  12696  3340							; 
  12697  3340
  12698  3340				   .__Enemy_Hit
  12699  3340							; __Enemy_Hit
  12700  3340
  12701  3340				   .
  12702  3340							; 
  12703  3340
  12704  3340				   .L0725		;  if _Enemy_Type  =  _Two_Thwomps then goto __Draw
  12705  3340
  12706  3340		       a5 dc		      LDA	_Enemy_Type
  12707  3342		       c9 2c		      CMP	#_Two_Thwomps
  12708  3344		       d0 03		      BNE	.skipL0725
  12709  3346				   .condpart426
  12710  3346		       4c 00 50 	      jmp	.__Draw
  12711  3349
  12712  3349				   .skipL0725
  12713  3349				   .
  12714  3349							; 
  12715  3349
  12716  3349				   .L0726		;  score  =  score  +	200
  12717  3349
  12718  3349		       f8		      SED
  12719  334a		       18		      CLC
  12720  334b		       a5 94		      LDA	score+1
  12721  334d		       69 02		      ADC	#$02
  12722  334f		       85 94		      STA	score+1
  12723  3351		       a5 93		      LDA	score
  12724  3353		       69 00		      ADC	#$00
  12725  3355		       85 93		      STA	score
  12726  3357		       d8		      CLD
  12727  3358				   .
  12728  3358							; 
  12729  3358
  12730  3358				   .L0727		;  if _Enemy_Type  <  _Flagpole  &&  _Star_Invincibility_Timer  =  0 then _Bit1_Jumping_Flag{1}  =  1	:  _Momentum_Up_Down  =  2  :  _Bit2_Fire_Button_Pressed{2}  =	1
  12731  3358
  12732  3358		       a5 dc		      LDA	_Enemy_Type
  12733  335a		       c9 14		      CMP	#_Flagpole
  12734  335c		       b0 16		      BCS	.skipL0727
  12735  335e				   .condpart427
  12736  335e		       a5 de		      LDA	_Star_Invincibility_Timer
  12737  3360		       c9 00		      CMP	#0
  12738  3362		       d0 10		      BNE	.skip427then
  12739  3364				   .condpart428
  12740  3364		       a5 d7		      LDA	_Bit1_Jumping_Flag
  12741  3366		       09 02		      ORA	#2
  12742  3368		       85 d7		      STA	_Bit1_Jumping_Flag
  12743  336a		       a9 02		      LDA	#2
  12744  336c		       85 e1		      STA	_Momentum_Up_Down
  12745  336e		       a5 d7		      LDA	_Bit2_Fire_Button_Pressed
  12746  3370		       09 04		      ORA	#4
  12747  3372		       85 d7		      STA	_Bit2_Fire_Button_Pressed
  12748  3374				   .skip427then
  12749  3374				   .skipL0727
  12750  3374				   .
  12751  3374							; 
  12752  3374
  12753  3374				   .L0728		;  if _Enemy_Type  >  41  &&  _Star_Invincibility_Timer  =  0 then _Bit1_Jumping_Flag{1}  =  1  :  _Momentum_Up_Down  =  2  :	_Bit2_Fire_Button_Pressed{2}  =  1
  12754  3374
  12755  3374		       a9 29		      LDA	#41
  12756  3376		       c5 dc		      CMP	_Enemy_Type
  12757  3378		       b0 16		      BCS	.skipL0728
  12758  337a				   .condpart429
  12759  337a		       a5 de		      LDA	_Star_Invincibility_Timer
  12760  337c		       c9 00		      CMP	#0
  12761  337e		       d0 10		      BNE	.skip429then
  12762  3380				   .condpart430
  12763  3380		       a5 d7		      LDA	_Bit1_Jumping_Flag
  12764  3382		       09 02		      ORA	#2
  12765  3384		       85 d7		      STA	_Bit1_Jumping_Flag
  12766  3386		       a9 02		      LDA	#2
  12767  3388		       85 e1		      STA	_Momentum_Up_Down
  12768  338a		       a5 d7		      LDA	_Bit2_Fire_Button_Pressed
  12769  338c		       09 04		      ORA	#4
  12770  338e		       85 d7		      STA	_Bit2_Fire_Button_Pressed
  12771  3390				   .skip429then
  12772  3390				   .skipL0728
  12773  3390				   .
  12774  3390							; 
  12775  3390
  12776  3390				   .L0729		;  if _Star_Invincibility_Timer  >  0	&&  _Enemy_Type  >  41 then goto __Double_To_Single
  12777  3390
  12778  3390		       a9 00		      LDA	#0
  12779  3392		       c5 de		      CMP	_Star_Invincibility_Timer
  12780  3394		       b0 09		      BCS	.skipL0729
  12781  3396				   .condpart431
  12782  3396		       a9 29		      LDA	#41
  12783  3398		       c5 dc		      CMP	_Enemy_Type
  12784  339a		       b0 03		      BCS	.skip431then
  12785  339c				   .condpart432
  12786  339c		       4c 48 54 	      jmp	.__Double_To_Single
  12787  339f
  12788  339f				   .skip431then
  12789  339f				   .skipL0729
  12790  339f				   .
  12791  339f							; 
  12792  339f
  12793  339f				   .L0730		;  if _Star_Invincibility_Timer  >  0 then goto __Enemy_Hit_2
  12794  339f
  12795  339f		       a9 00		      LDA	#0
  12796  33a1		       c5 de		      CMP	_Star_Invincibility_Timer
  12797  33a3		       b0 03		      BCS	.skipL0730
  12798  33a5				   .condpart433
  12799  33a5		       4c 38 54 	      jmp	.__Enemy_Hit_2
  12800  33a8
  12801  33a8				   .skipL0730
  12802  33a8				   .
  12803  33a8							; 
  12804  33a8
  12805  33a8				   .L0731		;  if _Enemy_Type  <  _Fireball_Enemy	&&  joy0fire then _Momentum_Up_Down  =	6
  12806  33a8
  12807  33a8		       a5 dc		      LDA	_Enemy_Type
  12808  33aa		       c9 12		      CMP	#_Fireball_Enemy
  12809  33ac		       b0 08		      BCS	.skipL0731
  12810  33ae				   .condpart434
  12811  33ae		       24 0c		      bit	INPT4
  12812  33b0		       30 04		      BMI	.skip434then
  12813  33b2				   .condpart435
  12814  33b2		       a9 06		      LDA	#6
  12815  33b4		       85 e1		      STA	_Momentum_Up_Down
  12816  33b6				   .skip434then
  12817  33b6				   .skipL0731
  12818  33b6				   .
  12819  33b6							; 
  12820  33b6
  12821  33b6				   .L0732		;  if _Enemy_Type  >  41  &&  joy0fire then _Momentum_Up_Down	=  6  :  AUDV0	=  12  :  AUDC0  =  4  :  AUDF0  =  24
  12822  33b6
  12823  33b6		       a9 29		      LDA	#41
  12824  33b8		       c5 dc		      CMP	_Enemy_Type
  12825  33ba		       b0 14		      BCS	.skipL0732
  12826  33bc				   .condpart436
  12827  33bc		       24 0c		      bit	INPT4
  12828  33be		       30 10		      BMI	.skip436then
  12829  33c0				   .condpart437
  12830  33c0		       a9 06		      LDA	#6
  12831  33c2		       85 e1		      STA	_Momentum_Up_Down
  12832  33c4		       a9 0c		      LDA	#12
  12833  33c6		       85 19		      STA	AUDV0
  12834  33c8		       a9 04		      LDA	#4
  12835  33ca		       85 15		      STA	AUDC0
  12836  33cc		       a9 18		      LDA	#24
  12837  33ce		       85 17		      STA	AUDF0
  12838  33d0				   .skip436then
  12839  33d0				   .skipL0732
  12840  33d0				   .
  12841  33d0							; 
  12842  33d0
  12843  33d0				   .L0733		;  if !joy0fire then player0y	=  player0y  -	3
  12844  33d0
  12845  33d0		       24 0c		      bit	INPT4
  12846  33d2		       10 07		      BPL	.skipL0733
  12847  33d4				   .condpart438
  12848  33d4		       a5 85		      LDA	player0y
  12849  33d6		       38		      SEC
  12850  33d7		       e9 03		      SBC	#3
  12851  33d9		       85 85		      STA	player0y
  12852  33db				   .skipL0733
  12853  33db				   .
  12854  33db							; 
  12855  33db
  12856  33db				   .L0734		;  if _Enemy_Type  >  41 then goto __Double_To_Single
  12857  33db
  12858  33db		       a9 29		      LDA	#41
  12859  33dd		       c5 dc		      CMP	_Enemy_Type
  12860  33df		       b0 03		      BCS	.skipL0734
  12861  33e1				   .condpart439
  12862  33e1		       4c 48 54 	      jmp	.__Double_To_Single
  12863  33e4
  12864  33e4				   .skipL0734
  12865  33e4				   .
  12866  33e4							; 
  12867  33e4
  12868  33e4				   .L0735		;  if _Enemy_Type  =  _Flying_Green_Koopa then _Enemy_Type  =	_Green_Koopa  :  goto __Draw
  12869  33e4
  12870  33e4		       a5 dc		      LDA	_Enemy_Type
  12871  33e6		       c9 0a		      CMP	#_Flying_Green_Koopa
  12872  33e8		       d0 07		      BNE	.skipL0735
  12873  33ea				   .condpart440
  12874  33ea		       a9 02		      LDA	#_Green_Koopa
  12875  33ec		       85 dc		      STA	_Enemy_Type
  12876  33ee		       4c 00 50 	      jmp	.__Draw
  12877  33f1
  12878  33f1				   .skipL0735
  12879  33f1				   .
  12880  33f1							; 
  12881  33f1
  12882  33f1				   .L0736		;  if _Enemy_Type  =  _Flying_Red_Koopa then _Enemy_Type  =  _Red_Koopa  :  _Enemy_Momentum  =  8  :  goto __Draw
  12883  33f1
  12884  33f1		       a5 dc		      LDA	_Enemy_Type
  12885  33f3		       c9 0e		      CMP	#_Flying_Red_Koopa
  12886  33f5		       d0 0b		      BNE	.skipL0736
  12887  33f7				   .condpart441
  12888  33f7		       a9 08		      LDA	#_Red_Koopa
  12889  33f9		       85 dc		      STA	_Enemy_Type
  12890  33fb		       a9 08		      LDA	#8
  12891  33fd		       85 dd		      STA	_Enemy_Momentum
  12892  33ff		       4c 00 50 	      jmp	.__Draw
  12893  3402
  12894  3402				   .skipL0736
  12895  3402				   .
  12896  3402							; 
  12897  3402
  12898  3402				   .L0737		;  if _Enemy_Type  =  _Green_Koopa then _Enemy_Type  =  _Green_Shell  :  goto __Draw
  12899  3402
  12900  3402		       a5 dc		      LDA	_Enemy_Type
  12901  3404		       c9 02		      CMP	#_Green_Koopa
  12902  3406		       d0 07		      BNE	.skipL0737
  12903  3408				   .condpart442
  12904  3408		       a9 22		      LDA	#_Green_Shell
  12905  340a		       85 dc		      STA	_Enemy_Type
  12906  340c		       4c 00 50 	      jmp	.__Draw
  12907  340f
  12908  340f				   .skipL0737
  12909  340f				   .
  12910  340f							; 
  12911  340f
  12912  340f				   .L0738		;  if _Enemy_Type  =  _Beetle then _Enemy_Type  =  _Beetle_Shell  :  goto __Draw
  12913  340f
  12914  340f		       a5 dc		      LDA	_Enemy_Type
  12915  3411		       c9 04		      CMP	#_Beetle
  12916  3413		       d0 07		      BNE	.skipL0738
  12917  3415				   .condpart443
  12918  3415		       a9 20		      LDA	#_Beetle_Shell
  12919  3417		       85 dc		      STA	_Enemy_Type
  12920  3419		       4c 00 50 	      jmp	.__Draw
  12921  341c
  12922  341c				   .skipL0738
  12923  341c				   .
  12924  341c							; 
  12925  341c
  12926  341c				   .L0739		;  if _Enemy_Type  =  _Red_Koopa then _Enemy_Type  =  _Red_Shell  :  goto __Draw
  12927  341c
  12928  341c		       a5 dc		      LDA	_Enemy_Type
  12929  341e		       c9 08		      CMP	#_Red_Koopa
  12930  3420		       d0 07		      BNE	.skipL0739
  12931  3422				   .condpart444
  12932  3422		       a9 24		      LDA	#_Red_Shell
  12933  3424		       85 dc		      STA	_Enemy_Type
  12934  3426		       4c 00 50 	      jmp	.__Draw
  12935  3429
  12936  3429				   .skipL0739
  12937  3429				   .
  12938  3429							; 
  12939  3429
  12940  3429				   .L0740		;  if _Enemy_Type  >  _P_Plant_31  &&	_Enemy_Type  <	_Trampoline then goto __Init_Kicked_Shell
  12941  3429
  12942  3429		       a9 1f		      LDA	#_P_Plant_31
  12943  342b		       c5 dc		      CMP	_Enemy_Type
  12944  342d		       b0 09		      BCS	.skipL0740
  12945  342f				   .condpart445
  12946  342f		       a5 dc		      LDA	_Enemy_Type
  12947  3431		       c9 26		      CMP	#_Trampoline
  12948  3433		       b0 03		      BCS	.skip445then
  12949  3435				   .condpart446
  12950  3435		       4c 3c 55 	      jmp	.__Init_Kicked_Shell
  12951  3438
  12952  3438				   .skip445then
  12953  3438				   .skipL0740
  12954  3438				   .
  12955  3438							; 
  12956  3438
  12957  3438				   .__Enemy_Hit_2
  12958  3438							; __Enemy_Hit_2
  12959  3438
  12960  3438				   .
  12961  3438							; 
  12962  3438
  12963  3438				   .L0741		;  player1y  =  player1y  -  3
  12964  3438
  12965  3438		       a5 86		      LDA	player1y
  12966  343a		       38		      SEC
  12967  343b		       e9 03		      SBC	#3
  12968  343d		       85 86		      STA	player1y
  12969  343f				   .
  12970  343f							; 
  12971  343f
  12972  343f				   .L0742		;  _Bit4_Enemy_Dead_Flag{4}  =  1
  12973  343f
  12974  343f		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
  12975  3441		       09 10		      ORA	#16
  12976  3443		       85 da		      STA	_Bit4_Enemy_Dead_Flag
  12977  3445				   .
  12978  3445							; 
  12979  3445
  12980  3445				   .L0743		;  goto __Draw
  12981  3445
  12982  3445		       4c 00 50 	      jmp	.__Draw
  12983  3448
  12984  3448				   .
  12985  3448							; 
  12986  3448
  12987  3448				   .
  12988  3448							; 
  12989  3448
  12990  3448				   .
  12991  3448							; 
  12992  3448
  12993  3448				   .
  12994  3448							; 
  12995  3448
  12996  3448				   .
  12997  3448							; 
  12998  3448
  12999  3448				   .
  13000  3448							; 
  13001  3448
  13002  3448				   .
  13003  3448							; 
  13004  3448
  13005  3448				   .__Double_To_Single
  13006  3448							; __Double_To_Single
  13007  3448
  13008  3448				   .
  13009  3448							; 
  13010  3448
  13011  3448				   .L0744		;  _Enemy_Type  =  _Enemy_Type  -  42
  13012  3448
  13013  3448		       a5 dc		      LDA	_Enemy_Type
  13014  344a		       38		      SEC
  13015  344b		       e9 2a		      SBC	#42
  13016  344d		       85 dc		      STA	_Enemy_Type
  13017  344f				   .
  13018  344f							; 
  13019  344f
  13020  344f				   .L0745		;  x  =  player1x  +  8
  13021  344f
  13022  344f		       a5 81		      LDA	player1x
  13023  3451		       18		      CLC
  13024  3452		       69 08		      ADC	#8
  13025  3454		       85 eb		      STA	x
  13026  3456				   .
  13027  3456							; 
  13028  3456
  13029  3456				   .L0746		;  if player0x  <  x then player1x  =	player1x  +  16
  13030  3456
  13031  3456		       a5 80		      LDA	player0x
  13032  3458		       c5 eb		      CMP	x
  13033  345a		       b0 07		      BCS	.skipL0746
  13034  345c				   .condpart447
  13035  345c		       a5 81		      LDA	player1x
  13036  345e		       18		      CLC
  13037  345f		       69 10		      ADC	#16
  13038  3461		       85 81		      STA	player1x
  13039  3463				   .skipL0746
  13040  3463				   .
  13041  3463							; 
  13042  3463
  13043  3463				   .L0747		;  goto __Draw
  13044  3463
  13045  3463		       4c 00 50 	      jmp	.__Draw
  13046  3466
  13047  3466				   .
  13048  3466							; 
  13049  3466
  13050  3466				   .
  13051  3466							; 
  13052  3466
  13053  3466				   .
  13054  3466							; 
  13055  3466
  13056  3466				   .
  13057  3466							; 
  13058  3466
  13059  3466				   .
  13060  3466							; 
  13061  3466
  13062  3466				   .
  13063  3466							; 
  13064  3466
  13065  3466				   .
  13066  3466							; 
  13067  3466
  13068  3466				   .
  13069  3466							; 
  13070  3466
  13071  3466				   .__Enemy_Hit_By_Fireball
  13072  3466							; __Enemy_Hit_By_Fireball
  13073  3466
  13074  3466				   .
  13075  3466							; 
  13076  3466
  13077  3466				   .L0748		;  if _Enemy_Type  =  _Bowser_Jr then goto __Fireball_BJr_Collision bank4
  13078  3466
  13079  3466		       a5 dc		      LDA	_Enemy_Type
  13080  3468		       c9 40		      CMP	#_Bowser_Jr
  13081  346a		       d0 12		      BNE	.skipL0748
  13082  346c				   .condpart448
  13083  346c		       85 ee		      sta	temp7
  13084  346e		       a9 77		      lda	#>(.__Fireball_BJr_Collision-1)
  13085  3470		       48		      pha
  13086  3471		       a9 70		      lda	#<(.__Fireball_BJr_Collision-1)
  13087  3473		       48		      pha
  13088  3474		       a5 ee		      lda	temp7
  13089  3476		       48		      pha
  13090  3477		       8a		      txa
  13091  3478		       48		      pha
  13092  3479		       a2 04		      ldx	#4
  13093  347b		       4c eb ff 	      jmp	BS_jsr
  13094  347e				   .skipL0748
  13095  347e				   .
  13096  347e							; 
  13097  347e
  13098  347e				   .L0749		;  if _Enemy_Type  =  _Kinetic_Platforms then goto __Draw
  13099  347e
  13100  347e		       a5 dc		      LDA	_Enemy_Type
  13101  3480		       c9 1c		      CMP	#_Kinetic_Platforms
  13102  3482		       d0 03		      BNE	.skipL0749
  13103  3484				   .condpart449
  13104  3484		       4c 00 50 	      jmp	.__Draw
  13105  3487
  13106  3487				   .skipL0749
  13107  3487				   .
  13108  3487							; 
  13109  3487
  13110  3487				   .L0750		;  if _Enemy_Type  <  _Two_Goombas then ballx	=  0  :  bally	=  120
  13111  3487
  13112  3487		       a5 dc		      LDA	_Enemy_Type
  13113  3489		       c9 2a		      CMP	#_Two_Goombas
  13114  348b		       b0 08		      BCS	.skipL0750
  13115  348d				   .condpart450
  13116  348d		       a9 00		      LDA	#0
  13117  348f		       85 84		      STA	ballx
  13118  3491		       a9 78		      LDA	#120
  13119  3493		       85 89		      STA	bally
  13120  3495				   .skipL0750
  13121  3495				   .
  13122  3495							; 
  13123  3495
  13124  3495				   .L0751		;  if _Enemy_Type  =  _Beetle then goto __Draw
  13125  3495
  13126  3495		       a5 dc		      LDA	_Enemy_Type
  13127  3497		       c9 04		      CMP	#_Beetle
  13128  3499		       d0 03		      BNE	.skipL0751
  13129  349b				   .condpart451
  13130  349b		       4c 00 50 	      jmp	.__Draw
  13131  349e
  13132  349e				   .skipL0751
  13133  349e				   .
  13134  349e							; 
  13135  349e
  13136  349e				   .L0752		;  if _Enemy_Type  =  _Bullet_Bill then goto __Draw
  13137  349e
  13138  349e		       a5 dc		      LDA	_Enemy_Type
  13139  34a0		       c9 0c		      CMP	#_Bullet_Bill
  13140  34a2		       d0 03		      BNE	.skipL0752
  13141  34a4				   .condpart452
  13142  34a4		       4c 00 50 	      jmp	.__Draw
  13143  34a7
  13144  34a7				   .skipL0752
  13145  34a7				   .
  13146  34a7							; 
  13147  34a7
  13148  34a7				   .L0753		;  if _Enemy_Type  =  _Beetle_Shell then goto __Draw
  13149  34a7
  13150  34a7		       a5 dc		      LDA	_Enemy_Type
  13151  34a9		       c9 20		      CMP	#_Beetle_Shell
  13152  34ab		       d0 03		      BNE	.skipL0753
  13153  34ad				   .condpart453
  13154  34ad		       4c 00 50 	      jmp	.__Draw
  13155  34b0
  13156  34b0				   .skipL0753
  13157  34b0				   .
  13158  34b0							; 
  13159  34b0
  13160  34b0				   .L0754		;  if _Enemy_Type  =  _Trampoline then goto __Draw
  13161  34b0
  13162  34b0		       a5 dc		      LDA	_Enemy_Type
  13163  34b2		       c9 26		      CMP	#_Trampoline
  13164  34b4		       d0 03		      BNE	.skipL0754
  13165  34b6				   .condpart454
  13166  34b6		       4c 00 50 	      jmp	.__Draw
  13167  34b9
  13168  34b9				   .skipL0754
  13169  34b9				   .
  13170  34b9							; 
  13171  34b9
  13172  34b9				   .L0755		;  if _Enemy_Type  =  _Thwomp	||  _Enemy_Type  =  _Two_Thwomps then goto __Draw
  13173  34b9
  13174  34b9		       a5 dc		      LDA	_Enemy_Type
  13175  34bb		       c9 28		      CMP	#_Thwomp
  13176  34bd		       d0 03		      BNE	.skipL0755
  13177  34bf				   .condpart455
  13178  34bf		       4c c8 54 	      jmp	.condpart456
  13179  34c2				   .skipL0755
  13180  34c2		       a5 dc		      LDA	_Enemy_Type
  13181  34c4		       c9 2c		      CMP	#_Two_Thwomps
  13182  34c6		       d0 03		      BNE	.skip130OR
  13183  34c8				   .condpart456
  13184  34c8		       4c 00 50 	      jmp	.__Draw
  13185  34cb
  13186  34cb				   .skip130OR
  13187  34cb				   .
  13188  34cb							; 
  13189  34cb
  13190  34cb				   .L0756		;  if _Enemy_Type  >  17  &&  _Enemy_Type  <  29 then goto __Draw
  13191  34cb
  13192  34cb		       a9 11		      LDA	#17
  13193  34cd		       c5 dc		      CMP	_Enemy_Type
  13194  34cf		       b0 09		      BCS	.skipL0756
  13195  34d1				   .condpart457
  13196  34d1		       a5 dc		      LDA	_Enemy_Type
  13197  34d3		       c9 1d		      CMP	#29
  13198  34d5		       b0 03		      BCS	.skip457then
  13199  34d7				   .condpart458
  13200  34d7		       4c 00 50 	      jmp	.__Draw
  13201  34da
  13202  34da				   .skip457then
  13203  34da				   .skipL0756
  13204  34da				   .
  13205  34da							; 
  13206  34da
  13207  34da				   .L0757		;  if _Enemy_Type  =  _Spiney_Ball then _Enemy_Type  =  _Spiney
  13208  34da
  13209  34da		       a5 dc		      LDA	_Enemy_Type
  13210  34dc		       c9 10		      CMP	#_Spiney_Ball
  13211  34de		       d0 04		      BNE	.skipL0757
  13212  34e0				   .condpart459
  13213  34e0		       a9 06		      LDA	#_Spiney
  13214  34e2		       85 dc		      STA	_Enemy_Type
  13215  34e4				   .skipL0757
  13216  34e4				   .
  13217  34e4							; 
  13218  34e4
  13219  34e4				   .L0758		;  score  =  score  +	100
  13220  34e4
  13221  34e4		       f8		      SED
  13222  34e5		       18		      CLC
  13223  34e6		       a5 94		      LDA	score+1
  13224  34e8		       69 01		      ADC	#$01
  13225  34ea		       85 94		      STA	score+1
  13226  34ec		       a5 93		      LDA	score
  13227  34ee		       69 00		      ADC	#$00
  13228  34f0		       85 93		      STA	score
  13229  34f2		       d8		      CLD
  13230  34f3				   .
  13231  34f3							; 
  13232  34f3
  13233  34f3				   .L0759		;  if _Enemy_Type  >  41 then goto __Double_To_Single_Fire
  13234  34f3
  13235  34f3		       a9 29		      LDA	#41
  13236  34f5		       c5 dc		      CMP	_Enemy_Type
  13237  34f7		       b0 03		      BCS	.skipL0759
  13238  34f9				   .condpart460
  13239  34f9		       4c 0c 55 	      jmp	.__Double_To_Single_Fire
  13240  34fc
  13241  34fc				   .skipL0759
  13242  34fc				   .
  13243  34fc							; 
  13244  34fc
  13245  34fc				   .L0760		;  player1y  =  player1y  -  3
  13246  34fc
  13247  34fc		       a5 86		      LDA	player1y
  13248  34fe		       38		      SEC
  13249  34ff		       e9 03		      SBC	#3
  13250  3501		       85 86		      STA	player1y
  13251  3503				   .
  13252  3503							; 
  13253  3503
  13254  3503				   .L0761		;  _Bit4_Enemy_Dead_Flag{4}  =  1
  13255  3503
  13256  3503		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
  13257  3505		       09 10		      ORA	#16
  13258  3507		       85 da		      STA	_Bit4_Enemy_Dead_Flag
  13259  3509				   .
  13260  3509							; 
  13261  3509
  13262  3509				   .L0762		;  goto __Draw
  13263  3509
  13264  3509		       4c 00 50 	      jmp	.__Draw
  13265  350c
  13266  350c				   .
  13267  350c							; 
  13268  350c
  13269  350c				   .
  13270  350c							; 
  13271  350c
  13272  350c				   .
  13273  350c							; 
  13274  350c
  13275  350c				   .
  13276  350c							; 
  13277  350c
  13278  350c				   .
  13279  350c							; 
  13280  350c
  13281  350c				   .
  13282  350c							; 
  13283  350c
  13284  350c				   .
  13285  350c							; 
  13286  350c
  13287  350c				   .
  13288  350c							; 
  13289  350c
  13290  350c				   .__Double_To_Single_Fire
  13291  350c							; __Double_To_Single_Fire
  13292  350c
  13293  350c				   .
  13294  350c							; 
  13295  350c
  13296  350c				   .L0763		;  if _Enemy_Type  =  _Two_Goombas then _Enemy_Type  =  _Goomba else _Enemy_Type  =  _Spiney
  13297  350c
  13298  350c		       a5 dc		      LDA	_Enemy_Type
  13299  350e		       c9 2a		      CMP	#_Two_Goombas
  13300  3510		       d0 07		      BNE	.skipL0763
  13301  3512				   .condpart461
  13302  3512		       a9 00		      LDA	#_Goomba
  13303  3514		       85 dc		      STA	_Enemy_Type
  13304  3516		       4c 1d 55 	      jmp	.skipelse67
  13305  3519				   .skipL0763
  13306  3519		       a9 06		      LDA	#_Spiney
  13307  351b		       85 dc		      STA	_Enemy_Type
  13308  351d				   .skipelse67
  13309  351d				   .
  13310  351d							; 
  13311  351d
  13312  351d				   .L0764		;  x  =  player1x  +  8
  13313  351d
  13314  351d		       a5 81		      LDA	player1x
  13315  351f		       18		      CLC
  13316  3520		       69 08		      ADC	#8
  13317  3522		       85 eb		      STA	x
  13318  3524				   .
  13319  3524							; 
  13320  3524
  13321  3524				   .L0765		;  if ballx  <  x then player1x  =  player1x  +  16
  13322  3524
  13323  3524		       a5 84		      LDA	ballx
  13324  3526		       c5 eb		      CMP	x
  13325  3528		       b0 07		      BCS	.skipL0765
  13326  352a				   .condpart462
  13327  352a		       a5 81		      LDA	player1x
  13328  352c		       18		      CLC
  13329  352d		       69 10		      ADC	#16
  13330  352f		       85 81		      STA	player1x
  13331  3531				   .skipL0765
  13332  3531				   .
  13333  3531							; 
  13334  3531
  13335  3531				   .L0766		;  ballx  =  0  :  bally  =  120
  13336  3531
  13337  3531		       a9 00		      LDA	#0
  13338  3533		       85 84		      STA	ballx
  13339  3535		       a9 78		      LDA	#120
  13340  3537		       85 89		      STA	bally
  13341  3539				   .
  13342  3539							; 
  13343  3539
  13344  3539				   .L0767		;  goto __Draw
  13345  3539
  13346  3539		       4c 00 50 	      jmp	.__Draw
  13347  353c
  13348  353c				   .
  13349  353c							; 
  13350  353c
  13351  353c				   .
  13352  353c							; 
  13353  353c
  13354  353c				   .
  13355  353c							; 
  13356  353c
  13357  353c				   .
  13358  353c							; 
  13359  353c
  13360  353c				   .
  13361  353c							; 
  13362  353c
  13363  353c				   .
  13364  353c							; 
  13365  353c
  13366  353c				   .
  13367  353c							; 
  13368  353c
  13369  353c				   .
  13370  353c							; 
  13371  353c
  13372  353c				   .__Init_Kicked_Shell
  13373  353c							; __Init_Kicked_Shell
  13374  353c
  13375  353c				   .
  13376  353c							; 
  13377  353c
  13378  353c				   .L0768		;  player0y  =  player0y  +  3
  13379  353c
  13380  353c		       a5 85		      LDA	player0y
  13381  353e		       18		      CLC
  13382  353f		       69 03		      ADC	#3
  13383  3541		       85 85		      STA	player0y
  13384  3543				   .
  13385  3543							; 
  13386  3543
  13387  3543				   .L0769		;  _Enemy_Type  =  _Goomba  :	_Bit3_Enemy_Direction{3}  =  0	:  _Enemy_Momentum  =  0  :  _Bit4_Enemy_Dead_Flag{4}  =  0
  13388  3543
  13389  3543		       a9 00		      LDA	#_Goomba
  13390  3545		       85 dc		      STA	_Enemy_Type
  13391  3547		       a5 da		      LDA	_Bit3_Enemy_Direction
  13392  3549		       29 f7		      AND	#247
  13393  354b		       85 da		      STA	_Bit3_Enemy_Direction
  13394  354d		       a9 00		      LDA	#0
  13395  354f		       85 dd		      STA	_Enemy_Momentum
  13396  3551		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
  13397  3553		       29 ef		      AND	#239
  13398  3555		       85 da		      STA	_Bit4_Enemy_Dead_Flag
  13399  3557				   .
  13400  3557							; 
  13401  3557
  13402  3557				   .L0770		;  if !_Bit0_Player_Facing_Direction{0} then _Bit5_Moving_Turtle_Shell_Direction{5}  =  0 else _Bit5_Moving_Turtle_Shell_Direction{5}	=  1
  13403  3557
  13404  3557		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  13405  3559		       4a		      LSR
  13406  355a		       b0 09		      BCS	.skipL0770
  13407  355c				   .condpart463
  13408  355c		       a5 da		      LDA	_Bit5_Moving_Turtle_Shell_Direction
  13409  355e		       29 df		      AND	#223
  13410  3560		       85 da		      STA	_Bit5_Moving_Turtle_Shell_Direction
  13411  3562		       4c 6b 55 	      jmp	.skipelse68
  13412  3565				   .skipL0770
  13413  3565		       a5 da		      LDA	_Bit5_Moving_Turtle_Shell_Direction
  13414  3567		       09 20		      ORA	#32
  13415  3569		       85 da		      STA	_Bit5_Moving_Turtle_Shell_Direction
  13416  356b				   .skipelse68
  13417  356b				   .
  13418  356b							; 
  13419  356b
  13420  356b				   .L0771		;  _Moving_Shell_X_Coordinate	=   ( player1x	-  13 )  / 4  :  _Moving_Shell_Y_Coordinate  =	 ( player1y  -	4 )  / 8
  13421  356b
  13422  356b							; complex statement detected
  13423  356b		       a5 81		      LDA	player1x
  13424  356d		       38		      SEC
  13425  356e		       e9 0d		      SBC	#13
  13426  3570		       4a		      lsr
  13427  3571		       4a		      lsr
  13428  3572		       85 e6		      STA	_Moving_Shell_X_Coordinate
  13429  3574							; complex statement detected
  13430  3574		       a5 86		      LDA	player1y
  13431  3576		       38		      SEC
  13432  3577		       e9 04		      SBC	#4
  13433  3579		       4a		      lsr
  13434  357a		       4a		      lsr
  13435  357b		       4a		      lsr
  13436  357c		       85 e7		      STA	_Moving_Shell_Y_Coordinate
  13437  357e				   .
  13438  357e							; 
  13439  357e
  13440  357e				   .L0772		;  if _Bit5_Moving_Turtle_Shell_Direction{5} then _Moving_Shell_X_Coordinate  =  _Moving_Shell_X_Coordinate  -  1 else _Moving_Shell_X_Coordinate  =  _Moving_Shell_X_Coordinate  +  1
  13441  357e
  13442  357e		       a5 da		      LDA	_Bit5_Moving_Turtle_Shell_Direction
  13443  3580		       29 20		      AND	#32
  13444  3582		       f0 05		      BEQ	.skipL0772
  13445  3584				   .condpart464
  13446  3584		       c6 e6		      DEC	_Moving_Shell_X_Coordinate
  13447  3586		       4c 8b 55 	      jmp	.skipelse69
  13448  3589				   .skipL0772
  13449  3589		       e6 e6		      INC	_Moving_Shell_X_Coordinate
  13450  358b				   .skipelse69
  13451  358b				   .
  13452  358b							; 
  13453  358b
  13454  358b				   .L0773		;  player1x  =  0  :  player1y  =  150
  13455  358b
  13456  358b		       a9 00		      LDA	#0
  13457  358d		       85 81		      STA	player1x
  13458  358f		       a9 96		      LDA	#150
  13459  3591		       85 86		      STA	player1y
  13460  3593				   .
  13461  3593							; 
  13462  3593
  13463  3593				   .L0774		;  goto __Draw
  13464  3593
  13465  3593		       4c 00 50 	      jmp	.__Draw
  13466  3596
  13467  3596				   .
  13468  3596							; 
  13469  3596
  13470  3596				   .
  13471  3596							; 
  13472  3596
  13473  3596				   .
  13474  3596							; 
  13475  3596
  13476  3596				   .
  13477  3596							; 
  13478  3596
  13479  3596				   .
  13480  3596							; 
  13481  3596
  13482  3596				   .
  13483  3596							; 
  13484  3596
  13485  3596				   .
  13486  3596							; 
  13487  3596
  13488  3596				   .__Mario_Death
  13489  3596							; __Mario_Death
  13490  3596
  13491  3596				   .
  13492  3596							; 
  13493  3596
  13494  3596				   .L0775		;  if player0y  >  94 then player0y  =  150
  13495  3596
  13496  3596		       a9 5e		      LDA	#94
  13497  3598		       c5 85		      CMP	player0y
  13498  359a		       b0 04		      BCS	.skipL0775
  13499  359c				   .condpart465
  13500  359c		       a9 96		      LDA	#150
  13501  359e		       85 85		      STA	player0y
  13502  35a0				   .skipL0775
  13503  35a0				   .
  13504  35a0							; 
  13505  35a0
  13506  35a0				   .L0776		;  gosub __Death_Music bank7
  13507  35a0
  13508  35a0		       85 ee		      sta	temp7
  13509  35a2		       a9 55		      lda	#>(ret_point44-1)
  13510  35a4		       48		      pha
  13511  35a5		       a9 b7		      lda	#<(ret_point44-1)
  13512  35a7		       48		      pha
  13513  35a8		       a9 de		      lda	#>(.__Death_Music-1)
  13514  35aa		       48		      pha
  13515  35ab		       a9 40		      lda	#<(.__Death_Music-1)
  13516  35ad		       48		      pha
  13517  35ae		       a5 ee		      lda	temp7
  13518  35b0		       48		      pha
  13519  35b1		       8a		      txa
  13520  35b2		       48		      pha
  13521  35b3		       a2 07		      ldx	#7
  13522  35b5		       4c eb ff 	      jmp	BS_jsr
  13523  35b8				   ret_point44
  13524  35b8				   .
  13525  35b8							; 
  13526  35b8
  13527  35b8				   .L0777		;  gosub __Mario_Die
  13528  35b8
  13529  35b8		       20 e6 5e 	      jsr	.__Mario_Die
  13530  35bb
  13531  35bb				   .
  13532  35bb							; 
  13533  35bb
  13534  35bb				   .L0778		;  p  =  1  :	_Lives_Counter	=  _Lives_Counter  -  1  :  _Bit6_Regular_Mario{6}  =  1  :  _Bit4_Firey_Mario_Power{4}  =  0  :  _Bit3_Super_Mario_Power{3}  =  0  :  _Moving_Shell_X_Coordinate  =  0  :  _Moving_Shell_Y_Coordinate	=  0
  13535  35bb
  13536  35bb		       a9 01		      LDA	#1
  13537  35bd		       85 e3		      STA	p
  13538  35bf		       c6 df		      DEC	_Lives_Counter
  13539  35c1		       a5 d7		      LDA	_Bit6_Regular_Mario
  13540  35c3		       09 40		      ORA	#64
  13541  35c5		       85 d7		      STA	_Bit6_Regular_Mario
  13542  35c7		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
  13543  35c9		       29 ef		      AND	#239
  13544  35cb		       85 d7		      STA	_Bit4_Firey_Mario_Power
  13545  35cd		       a5 d7		      LDA	_Bit3_Super_Mario_Power
  13546  35cf		       29 f7		      AND	#247
  13547  35d1		       85 d7		      STA	_Bit3_Super_Mario_Power
  13548  35d3		       a9 00		      LDA	#0
  13549  35d5		       85 e6		      STA	_Moving_Shell_X_Coordinate
  13550  35d7		       85 e7		      STA	_Moving_Shell_Y_Coordinate
  13551  35d9				   .
  13552  35d9							; 
  13553  35d9
  13554  35d9				   .L0779		;  ballx  =  0  :  bally  =  150
  13555  35d9
  13556  35d9		       a9 00		      LDA	#0
  13557  35db		       85 84		      STA	ballx
  13558  35dd		       a9 96		      LDA	#150
  13559  35df		       85 89		      STA	bally
  13560  35e1				   .
  13561  35e1							; 
  13562  35e1
  13563  35e1				   .L0780		;  for x  =  6 to 0 step -1
  13564  35e1
  13565  35e1		       a9 06		      LDA	#6
  13566  35e3		       85 eb		      STA	x
  13567  35e5				   .L0780forx
  13568  35e5				   .
  13569  35e5							; 
  13570  35e5
  13571  35e5				   .L0781		;  if player0y  <>  150 then player0y	=  player0y  -	x
  13572  35e5
  13573  35e5		       a5 85		      LDA	player0y
  13574  35e7		       c9 96		      CMP	#150
  13575  35e9		       f0 07		      BEQ	.skipL0781
  13576  35eb				   .condpart466
  13577  35eb		       a5 85		      LDA	player0y
  13578  35ed		       38		      SEC
  13579  35ee		       e5 eb		      SBC	x
  13580  35f0		       85 85		      STA	player0y
  13581  35f2				   .skipL0781
  13582  35f2				   .
  13583  35f2							; 
  13584  35f2
  13585  35f2				   .L0782		;  gosub __Play_Death_Music bank7
  13586  35f2
  13587  35f2		       85 ee		      sta	temp7
  13588  35f4		       a9 56		      lda	#>(ret_point45-1)
  13589  35f6		       48		      pha
  13590  35f7		       a9 09		      lda	#<(ret_point45-1)
  13591  35f9		       48		      pha
  13592  35fa		       a9 dd		      lda	#>(.__Play_Death_Music-1)
  13593  35fc		       48		      pha
  13594  35fd		       a9 b9		      lda	#<(.__Play_Death_Music-1)
  13595  35ff		       48		      pha
  13596  3600		       a5 ee		      lda	temp7
  13597  3602		       48		      pha
  13598  3603		       8a		      txa
  13599  3604		       48		      pha
  13600  3605		       a2 07		      ldx	#7
  13601  3607		       4c eb ff 	      jmp	BS_jsr
  13602  360a				   ret_point45
  13603  360a				   .
  13604  360a							; 
  13605  360a
  13606  360a				   .L0783		;  gosub __Render_Screen_B3  :  gosub __Render_Screen_B3  :  gosub __Render_Screen_B3
  13607  360a
  13608  360a		       20 0d 5e 	      jsr	.__Render_Screen_B3
  13609  360d		       20 0d 5e 	      jsr	.__Render_Screen_B3
  13610  3610		       20 0d 5e 	      jsr	.__Render_Screen_B3
  13611  3613
  13612  3613				   .
  13613  3613							; 
  13614  3613
  13615  3613				   .L0784		;  next x
  13616  3613
  13617  3613		       a5 eb		      LDA	x
  13618  3615		       18		      CLC
  13619  3616		       69 ff		      ADC	#-1
  13620  3618
  13621  3618					      if	((* - .L0780forx_failsafe) < 127) && ((* - .L0780forx_failsafe) > -128)
  13622  3618		       90 06		      bcc	.L0780forx_failsafe
  13623  361a				  -	      else
  13624  361a				  -	      bcs	.7skipL0780forx_failsafe
  13625  361a				  -	      jmp	.L0780forx_failsafe
  13626  361a				  -.7skipL0780forx_failsafe
  13627  361a					      endif
  13628  361a		       85 eb		      STA	x
  13629  361c		       c9 00		      CMP	#0
  13630  361e					      if	((* - .L0780forx) < 127) && ((* - .L0780forx) > -128)
  13631  361e		       b0 c5		      bcs	.L0780forx
  13632  3620				  -	      else
  13633  3620				  -	      bcc	.8skipL0780forx
  13634  3620				  -	      jmp	.L0780forx
  13635  3620				  -.8skipL0780forx
  13636  3620					      endif
  13637  3620				   .L0780forx_failsafe
  13638  3620				   .
  13639  3620							; 
  13640  3620
  13641  3620				   .__Mario_Death_2
  13642  3620							; __Mario_Death_2
  13643  3620
  13644  3620				   .
  13645  3620							; 
  13646  3620
  13647  3620				   .L0785		;  if x  <  7 then x  =  x  +	1
  13648  3620
  13649  3620		       a5 eb		      LDA	x
  13650  3622		       c9 07		      CMP	#7
  13651  3624		       b0 02		      BCS	.skipL0785
  13652  3626				   .condpart467
  13653  3626		       e6 eb		      INC	x
  13654  3628				   .skipL0785
  13655  3628				   .
  13656  3628							; 
  13657  3628
  13658  3628				   .L0786		;  if player0y  <>  150 then player0y	=  player0y  +	x
  13659  3628
  13660  3628		       a5 85		      LDA	player0y
  13661  362a		       c9 96		      CMP	#150
  13662  362c		       f0 07		      BEQ	.skipL0786
  13663  362e				   .condpart468
  13664  362e		       a5 85		      LDA	player0y
  13665  3630		       18		      CLC
  13666  3631		       65 eb		      ADC	x
  13667  3633		       85 85		      STA	player0y
  13668  3635				   .skipL0786
  13669  3635				   .
  13670  3635							; 
  13671  3635
  13672  3635				   .L0787		;  gosub __Play_Death_Music bank7
  13673  3635
  13674  3635		       85 ee		      sta	temp7
  13675  3637		       a9 56		      lda	#>(ret_point46-1)
  13676  3639		       48		      pha
  13677  363a		       a9 4c		      lda	#<(ret_point46-1)
  13678  363c		       48		      pha
  13679  363d		       a9 dd		      lda	#>(.__Play_Death_Music-1)
  13680  363f		       48		      pha
  13681  3640		       a9 b9		      lda	#<(.__Play_Death_Music-1)
  13682  3642		       48		      pha
  13683  3643		       a5 ee		      lda	temp7
  13684  3645		       48		      pha
  13685  3646		       8a		      txa
  13686  3647		       48		      pha
  13687  3648		       a2 07		      ldx	#7
  13688  364a		       4c eb ff 	      jmp	BS_jsr
  13689  364d				   ret_point46
  13690  364d				   .
  13691  364d							; 
  13692  364d
  13693  364d				   .L0788		;  if _Music_Duration	=  255 then goto __Check_Lives
  13694  364d
  13695  364d		       a5 e3		      LDA	_Music_Duration
  13696  364f		       c9 ff		      CMP	#255
  13697  3651		       d0 03		      BNE	.skipL0788
  13698  3653				   .condpart469
  13699  3653		       4c 6c 56 	      jmp	.__Check_Lives
  13700  3656
  13701  3656				   .skipL0788
  13702  3656				   .
  13703  3656							; 
  13704  3656
  13705  3656				   .L0789		;  gosub __Render_Screen_B3  :  gosub __Render_Screen_B3  :  gosub __Render_Screen_B3
  13706  3656
  13707  3656		       20 0d 5e 	      jsr	.__Render_Screen_B3
  13708  3659		       20 0d 5e 	      jsr	.__Render_Screen_B3
  13709  365c		       20 0d 5e 	      jsr	.__Render_Screen_B3
  13710  365f
  13711  365f				   .
  13712  365f							; 
  13713  365f
  13714  365f				   .L0790		;  if player0y  >  120 then player0y  =  120
  13715  365f
  13716  365f		       a9 78		      LDA	#120
  13717  3661		       c5 85		      CMP	player0y
  13718  3663		       b0 04		      BCS	.skipL0790
  13719  3665				   .condpart470
  13720  3665		       a9 78		      LDA	#120
  13721  3667		       85 85		      STA	player0y
  13722  3669				   .skipL0790
  13723  3669				   .
  13724  3669							; 
  13725  3669
  13726  3669				   .L0791		;  goto __Mario_Death_2
  13727  3669
  13728  3669		       4c 20 56 	      jmp	.__Mario_Death_2
  13729  366c
  13730  366c				   .
  13731  366c							; 
  13732  366c
  13733  366c				   .__Check_Lives
  13734  366c							; __Check_Lives
  13735  366c
  13736  366c				   .
  13737  366c							; 
  13738  366c
  13739  366c				   .L0792		;  _Enemy_Type  =  _Goomba  :	player1y  =  150
  13740  366c
  13741  366c		       a9 00		      LDA	#_Goomba
  13742  366e		       85 dc		      STA	_Enemy_Type
  13743  3670		       a9 96		      LDA	#150
  13744  3672		       85 86		      STA	player1y
  13745  3674				   .
  13746  3674							; 
  13747  3674
  13748  3674				   .L0793		;  player1x  =  0  :  _Star_Invincibility_Timer  =  0	:  _Bit7_Mario_Invincibility{7}  =  0  :  _Bit7_Mario_On_Off{7}  =  0  :  _Bit5_Ducking_Flag{5}  =  0  :  _Level_Timer	=  0  :  _Momentum_Up_Down  =  0  :  _Momentum_Left_Right  =  0  :  _Bit1_Jumping_Flag{1}  =  0
  13749  3674
  13750  3674		       a9 00		      LDA	#0
  13751  3676		       85 81		      STA	player1x
  13752  3678		       85 de		      STA	_Star_Invincibility_Timer
  13753  367a		       a5 d7		      LDA	_Bit7_Mario_Invincibility
  13754  367c		       29 7f		      AND	#127
  13755  367e		       85 d7		      STA	_Bit7_Mario_Invincibility
  13756  3680		       a5 da		      LDA	_Bit7_Mario_On_Off
  13757  3682		       29 7f		      AND	#127
  13758  3684		       85 da		      STA	_Bit7_Mario_On_Off
  13759  3686		       a5 d7		      LDA	_Bit5_Ducking_Flag
  13760  3688		       29 df		      AND	#223
  13761  368a		       85 d7		      STA	_Bit5_Ducking_Flag
  13762  368c		       a9 00		      LDA	#0
  13763  368e		       85 d8		      STA	_Level_Timer
  13764  3690		       85 e1		      STA	_Momentum_Up_Down
  13765  3692		       85 e0		      STA	_Momentum_Left_Right
  13766  3694		       a5 d7		      LDA	_Bit1_Jumping_Flag
  13767  3696		       29 fd		      AND	#253
  13768  3698		       85 d7		      STA	_Bit1_Jumping_Flag
  13769  369a				   .
  13770  369a							; 
  13771  369a
  13772  369a				   .L0794		;  if _Lives_Counter  <  1 then goto __Game_Over_Screen bank4 else goto __Init bank1
  13773  369a
  13774  369a		       a5 df		      LDA	_Lives_Counter
  13775  369c		       c9 01		      CMP	#1
  13776  369e		       b0 15		      BCS	.skipL0794
  13777  36a0				   .condpart471
  13778  36a0		       85 ee		      sta	temp7
  13779  36a2		       a9 72		      lda	#>(.__Game_Over_Screen-1)
  13780  36a4		       48		      pha
  13781  36a5		       a9 f5		      lda	#<(.__Game_Over_Screen-1)
  13782  36a7		       48		      pha
  13783  36a8		       a5 ee		      lda	temp7
  13784  36aa		       48		      pha
  13785  36ab		       8a		      txa
  13786  36ac		       48		      pha
  13787  36ad		       a2 04		      ldx	#4
  13788  36af		       4c eb ff 	      jmp	BS_jsr
  13789  36b2		       4c c7 56 	      jmp	.skipelse70
  13790  36b5				   .skipL0794
  13791  36b5		       85 ee		      sta	temp7
  13792  36b7		       a9 10		      lda	#>(.__Init-1)
  13793  36b9		       48		      pha
  13794  36ba		       a9 64		      lda	#<(.__Init-1)
  13795  36bc		       48		      pha
  13796  36bd		       a5 ee		      lda	temp7
  13797  36bf		       48		      pha
  13798  36c0		       8a		      txa
  13799  36c1		       48		      pha
  13800  36c2		       a2 01		      ldx	#1
  13801  36c4		       4c eb ff 	      jmp	BS_jsr
  13802  36c7				   .skipelse70
  13803  36c7				   .
  13804  36c7							; 
  13805  36c7
  13806  36c7				   .
  13807  36c7							; 
  13808  36c7
  13809  36c7				   .
  13810  36c7							; 
  13811  36c7
  13812  36c7				   .
  13813  36c7							; 
  13814  36c7
  13815  36c7				   .
  13816  36c7							; 
  13817  36c7
  13818  36c7				   .
  13819  36c7							; 
  13820  36c7
  13821  36c7				   .
  13822  36c7							; 
  13823  36c7
  13824  36c7				   .
  13825  36c7							; 
  13826  36c7
  13827  36c7				   .
  13828  36c7							; 
  13829  36c7
  13830  36c7				   .
  13831  36c7							; 
  13832  36c7
  13833  36c7				   .__Checkpoint
  13834  36c7							; __Checkpoint
  13835  36c7
  13836  36c7				   .
  13837  36c7							; 
  13838  36c7
  13839  36c7				   .L0795		;  x  =   ( player0x  -  9 )  / 4
  13840  36c7
  13841  36c7							; complex statement detected
  13842  36c7		       a5 80		      LDA	player0x
  13843  36c9		       38		      SEC
  13844  36ca		       e9 09		      SBC	#9
  13845  36cc		       4a		      lsr
  13846  36cd		       4a		      lsr
  13847  36ce		       85 eb		      STA	x
  13848  36d0				   .
  13849  36d0							; 
  13850  36d0
  13851  36d0				   .L0796		;  if !pfread ( x , 9 )  then goto __More_Joy_Checks
  13852  36d0
  13853  36d0		       a5 eb		      LDA	x
  13854  36d2		       a0 09		      LDY	#9
  13855  36d4		       85 ee		      sta	temp7
  13856  36d6		       a9 56		      lda	#>(ret_point47-1)
  13857  36d8		       48		      pha
  13858  36d9		       a9 eb		      lda	#<(ret_point47-1)
  13859  36db		       48		      pha
  13860  36dc		       a9 f2		      lda	#>(pfread-1)
  13861  36de		       48		      pha
  13862  36df		       a9 ab		      lda	#<(pfread-1)
  13863  36e1		       48		      pha
  13864  36e2		       a5 ee		      lda	temp7
  13865  36e4		       48		      pha
  13866  36e5		       8a		      txa
  13867  36e6		       48		      pha
  13868  36e7		       a2 08		      ldx	#8
  13869  36e9		       4c eb ff 	      jmp	BS_jsr
  13870  36ec				   ret_point47
  13871  36ec		       f0 03		      BEQ	.skipL0796
  13872  36ee				   .condpart472
  13873  36ee		       4c ef 50 	      jmp	.__More_Joy_Checks
  13874  36f1
  13875  36f1				   .skipL0796
  13876  36f1				   .
  13877  36f1							; 
  13878  36f1
  13879  36f1				   .L0797		;  x  =   ( player0x  -  17 )	/ 4
  13880  36f1
  13881  36f1							; complex statement detected
  13882  36f1		       a5 80		      LDA	player0x
  13883  36f3		       38		      SEC
  13884  36f4		       e9 11		      SBC	#17
  13885  36f6		       4a		      lsr
  13886  36f7		       4a		      lsr
  13887  36f8		       85 eb		      STA	x
  13888  36fa				   .
  13889  36fa							; 
  13890  36fa
  13891  36fa				   .L0798		;  if !pfread ( x , 9 )  then goto __More_Joy_Checks
  13892  36fa
  13893  36fa		       a5 eb		      LDA	x
  13894  36fc		       a0 09		      LDY	#9
  13895  36fe		       85 ee		      sta	temp7
  13896  3700		       a9 57		      lda	#>(ret_point48-1)
  13897  3702		       48		      pha
  13898  3703		       a9 15		      lda	#<(ret_point48-1)
  13899  3705		       48		      pha
  13900  3706		       a9 f2		      lda	#>(pfread-1)
  13901  3708		       48		      pha
  13902  3709		       a9 ab		      lda	#<(pfread-1)
  13903  370b		       48		      pha
  13904  370c		       a5 ee		      lda	temp7
  13905  370e		       48		      pha
  13906  370f		       8a		      txa
  13907  3710		       48		      pha
  13908  3711		       a2 08		      ldx	#8
  13909  3713		       4c eb ff 	      jmp	BS_jsr
  13910  3716				   ret_point48
  13911  3716		       f0 03		      BEQ	.skipL0798
  13912  3718				   .condpart473
  13913  3718		       4c ef 50 	      jmp	.__More_Joy_Checks
  13914  371b
  13915  371b				   .skipL0798
  13916  371b				   .
  13917  371b							; 
  13918  371b
  13919  371b				   .L0799		;  y  =  8  :	bally  =  150
  13920  371b
  13921  371b		       a9 08		      LDA	#8
  13922  371d		       85 ec		      STA	y
  13923  371f		       a9 96		      LDA	#150
  13924  3721		       85 89		      STA	bally
  13925  3723				   .
  13926  3723							; 
  13927  3723
  13928  3723				   .L0800		;  ballx  =  0  :  u  =  0  :	_Star_Invincibility_Timer  =  0  :  _Bit7_Mario_Invincibility{7}  =  0	:  _Bit7_Mario_On_Off{7}  =  0
  13929  3723
  13930  3723		       a9 00		      LDA	#0
  13931  3725		       85 84		      STA	ballx
  13932  3727		       85 e8		      STA	u
  13933  3729		       85 de		      STA	_Star_Invincibility_Timer
  13934  372b		       a5 d7		      LDA	_Bit7_Mario_Invincibility
  13935  372d		       29 7f		      AND	#127
  13936  372f		       85 d7		      STA	_Bit7_Mario_Invincibility
  13937  3731		       a5 da		      LDA	_Bit7_Mario_On_Off
  13938  3733		       29 7f		      AND	#127
  13939  3735		       85 da		      STA	_Bit7_Mario_On_Off
  13940  3737				   .
  13941  3737							; 
  13942  3737
  13943  3737				   .__fl2
  13944  3737							; __fl2
  13945  3737
  13946  3737				   .
  13947  3737							; 
  13948  3737
  13949  3737				   .L0801		;  CTRLPF  =  $15
  13950  3737
  13951  3737		       a9 15		      LDA	#$15
  13952  3739		       85 0a		      STA	CTRLPF
  13953  373b				   .
  13954  373b							; 
  13955  373b
  13956  373b				   .L0802		;  player0y  =  player0y  +  1
  13957  373b
  13958  373b		       e6 85		      INC	player0y
  13959  373d				   .
  13960  373d							; 
  13961  373d
  13962  373d				   .L0803		;  gosub __Power_Down_SFX bank1
  13963  373d
  13964  373d		       85 ee		      sta	temp7
  13965  373f		       a9 57		      lda	#>(ret_point49-1)
  13966  3741		       48		      pha
  13967  3742		       a9 54		      lda	#<(ret_point49-1)
  13968  3744		       48		      pha
  13969  3745		       a9 19		      lda	#>(.__Power_Down_SFX-1)
  13970  3747		       48		      pha
  13971  3748		       a9 cc		      lda	#<(.__Power_Down_SFX-1)
  13972  374a		       48		      pha
  13973  374b		       a5 ee		      lda	temp7
  13974  374d		       48		      pha
  13975  374e		       8a		      txa
  13976  374f		       48		      pha
  13977  3750		       a2 01		      ldx	#1
  13978  3752		       4c eb ff 	      jmp	BS_jsr
  13979  3755				   ret_point49
  13980  3755				   .
  13981  3755							; 
  13982  3755
  13983  3755				   .L0804		;  gosub __Render_Screen_B3
  13984  3755
  13985  3755		       20 0d 5e 	      jsr	.__Render_Screen_B3
  13986  3758
  13987  3758				   .
  13988  3758							; 
  13989  3758
  13990  3758				   .L0805		;  if player0y  <  79 then goto __fl2
  13991  3758
  13992  3758		       a5 85		      LDA	player0y
  13993  375a		       c9 4f		      CMP	#79
  13994  375c		       b0 03		      BCS	.skipL0805
  13995  375e				   .condpart474
  13996  375e		       4c 37 57 	      jmp	.__fl2
  13997  3761
  13998  3761				   .skipL0805
  13999  3761				   .
  14000  3761							; 
  14001  3761
  14002  3761				   .L0806		;  player0x  =  0  :  player0y  =  150
  14003  3761
  14004  3761		       a9 00		      LDA	#0
  14005  3763		       85 80		      STA	player0x
  14006  3765		       a9 96		      LDA	#150
  14007  3767		       85 85		      STA	player0y
  14008  3769				   .
  14009  3769							; 
  14010  3769
  14011  3769				   .L0807		;  pfclear
  14012  3769
  14013  3769		       a9 00		      LDA	#0
  14014  376b		       85 ee		      sta	temp7
  14015  376d		       a9 57		      lda	#>(ret_point50-1)
  14016  376f		       48		      pha
  14017  3770		       a9 82		      lda	#<(ret_point50-1)
  14018  3772		       48		      pha
  14019  3773		       a9 f2		      lda	#>(pfclear-1)
  14020  3775		       48		      pha
  14021  3776		       a9 8f		      lda	#<(pfclear-1)
  14022  3778		       48		      pha
  14023  3779		       a5 ee		      lda	temp7
  14024  377b		       48		      pha
  14025  377c		       8a		      txa
  14026  377d		       48		      pha
  14027  377e		       a2 08		      ldx	#8
  14028  3780		       4c eb ff 	      jmp	BS_jsr
  14029  3783				   ret_point50
  14030  3783				   .
  14031  3783							; 
  14032  3783
  14033  3783				   .L0808		;  _Enemy_Type  =  _Goomba  :	player1y  =  150  :  player1x  =  0
  14034  3783
  14035  3783		       a9 00		      LDA	#_Goomba
  14036  3785		       85 dc		      STA	_Enemy_Type
  14037  3787		       a9 96		      LDA	#150
  14038  3789		       85 86		      STA	player1y
  14039  378b		       a9 00		      LDA	#0
  14040  378d		       85 81		      STA	player1x
  14041  378f				   .
  14042  378f							; 
  14043  378f
  14044  378f				   .L0809		;  _Level_Data_Pointer  =  32	:  _Bit6_Checkpoint_Flag{6}  =	1  :  _Moving_Shell_X_Coordinate  =  0	:  _Moving_Shell_Y_Coordinate  =  0
  14045  378f
  14046  378f		       a9 20		      LDA	#32
  14047  3791		       85 d5		      STA	_Level_Data_Pointer
  14048  3793		       a5 da		      LDA	_Bit6_Checkpoint_Flag
  14049  3795		       09 40		      ORA	#64
  14050  3797		       85 da		      STA	_Bit6_Checkpoint_Flag
  14051  3799		       a9 00		      LDA	#0
  14052  379b		       85 e6		      STA	_Moving_Shell_X_Coordinate
  14053  379d		       85 e7		      STA	_Moving_Shell_Y_Coordinate
  14054  379f				   .
  14055  379f							; 
  14056  379f
  14057  379f				   .L0810		;  for x  =  1 to 32
  14058  379f
  14059  379f		       a9 01		      LDA	#1
  14060  37a1		       85 eb		      STA	x
  14061  37a3				   .L0810forx
  14062  37a3				   .
  14063  37a3							; 
  14064  37a3
  14065  37a3				   .L0811		;  gosub __Power_Down_SFX bank1
  14066  37a3
  14067  37a3		       85 ee		      sta	temp7
  14068  37a5		       a9 57		      lda	#>(ret_point51-1)
  14069  37a7		       48		      pha
  14070  37a8		       a9 ba		      lda	#<(ret_point51-1)
  14071  37aa		       48		      pha
  14072  37ab		       a9 19		      lda	#>(.__Power_Down_SFX-1)
  14073  37ad		       48		      pha
  14074  37ae		       a9 cc		      lda	#<(.__Power_Down_SFX-1)
  14075  37b0		       48		      pha
  14076  37b1		       a5 ee		      lda	temp7
  14077  37b3		       48		      pha
  14078  37b4		       8a		      txa
  14079  37b5		       48		      pha
  14080  37b6		       a2 01		      ldx	#1
  14081  37b8		       4c eb ff 	      jmp	BS_jsr
  14082  37bb				   ret_point51
  14083  37bb				   .
  14084  37bb							; 
  14085  37bb
  14086  37bb				   .L0812		;  gosub __Render_Screen_B3
  14087  37bb
  14088  37bb		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14089  37be
  14090  37be				   .
  14091  37be							; 
  14092  37be
  14093  37be				   .L0813		;  next x
  14094  37be
  14095  37be		       a5 eb		      LDA	x
  14096  37c0		       c9 20		      CMP	#32
  14097  37c2
  14098  37c2		       e6 eb		      INC	x
  14099  37c4					      if	((* - .L0810forx) < 127) && ((* - .L0810forx) > -128)
  14100  37c4		       90 dd		      bcc	.L0810forx
  14101  37c6				  -	      else
  14102  37c6				  -	      bcs	.9skipL0810forx
  14103  37c6				  -	      jmp	.L0810forx
  14104  37c6				  -.9skipL0810forx
  14105  37c6					      endif
  14106  37c6				   .
  14107  37c6							; 
  14108  37c6
  14109  37c6				   .L0814		;  gosub __Intro_Screen_3 bank4
  14110  37c6
  14111  37c6		       85 ee		      sta	temp7
  14112  37c8		       a9 57		      lda	#>(ret_point52-1)
  14113  37ca		       48		      pha
  14114  37cb		       a9 dd		      lda	#<(ret_point52-1)
  14115  37cd		       48		      pha
  14116  37ce		       a9 70		      lda	#>(.__Intro_Screen_3-1)
  14117  37d0		       48		      pha
  14118  37d1		       a9 ef		      lda	#<(.__Intro_Screen_3-1)
  14119  37d3		       48		      pha
  14120  37d4		       a5 ee		      lda	temp7
  14121  37d6		       48		      pha
  14122  37d7		       8a		      txa
  14123  37d8		       48		      pha
  14124  37d9		       a2 04		      ldx	#4
  14125  37db		       4c eb ff 	      jmp	BS_jsr
  14126  37de				   ret_point52
  14127  37de				   .
  14128  37de							; 
  14129  37de
  14130  37de				   .L0815		;  if _Level  =  4 then goto __Bos_Setup bank4
  14131  37de
  14132  37de		       a5 ea		      LDA	_Level
  14133  37e0		       c9 04		      CMP	#4
  14134  37e2		       d0 12		      BNE	.skipL0815
  14135  37e4				   .condpart475
  14136  37e4		       85 ee		      sta	temp7
  14137  37e6		       a9 7a		      lda	#>(.__Bos_Setup-1)
  14138  37e8		       48		      pha
  14139  37e9		       a9 8f		      lda	#<(.__Bos_Setup-1)
  14140  37eb		       48		      pha
  14141  37ec		       a5 ee		      lda	temp7
  14142  37ee		       48		      pha
  14143  37ef		       8a		      txa
  14144  37f0		       48		      pha
  14145  37f1		       a2 04		      ldx	#4
  14146  37f3		       4c eb ff 	      jmp	BS_jsr
  14147  37f6				   .skipL0815
  14148  37f6				   .
  14149  37f6							; 
  14150  37f6
  14151  37f6				   .L0816		;  player0x  =  24  :	player0y  =  80
  14152  37f6
  14153  37f6		       a9 18		      LDA	#24
  14154  37f8		       85 80		      STA	player0x
  14155  37fa		       a9 50		      LDA	#80
  14156  37fc		       85 85		      STA	player0y
  14157  37fe				   .
  14158  37fe							; 
  14159  37fe
  14160  37fe				   .__fl3
  14161  37fe							; __fl3
  14162  37fe
  14163  37fe				   .
  14164  37fe							; 
  14165  37fe
  14166  37fe				   .L0817		;  player0y  =  player0y  -  1
  14167  37fe
  14168  37fe		       c6 85		      DEC	player0y
  14169  3800				   .
  14170  3800							; 
  14171  3800
  14172  3800				   .L0818		;  gosub __Power_Down_SFX bank1
  14173  3800
  14174  3800		       85 ee		      sta	temp7
  14175  3802		       a9 58		      lda	#>(ret_point53-1)
  14176  3804		       48		      pha
  14177  3805		       a9 17		      lda	#<(ret_point53-1)
  14178  3807		       48		      pha
  14179  3808		       a9 19		      lda	#>(.__Power_Down_SFX-1)
  14180  380a		       48		      pha
  14181  380b		       a9 cc		      lda	#<(.__Power_Down_SFX-1)
  14182  380d		       48		      pha
  14183  380e		       a5 ee		      lda	temp7
  14184  3810		       48		      pha
  14185  3811		       8a		      txa
  14186  3812		       48		      pha
  14187  3813		       a2 01		      ldx	#1
  14188  3815		       4c eb ff 	      jmp	BS_jsr
  14189  3818				   ret_point53
  14190  3818				   .
  14191  3818							; 
  14192  3818
  14193  3818				   .L0819		;  gosub __Render_Screen_B3
  14194  3818
  14195  3818		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14196  381b
  14197  381b				   .
  14198  381b							; 
  14199  381b
  14200  381b				   .L0820		;  if player0y  <  64 then CTRLPF  =  $11  :  goto __More_Joy_Checks
  14201  381b
  14202  381b		       a5 85		      LDA	player0y
  14203  381d		       c9 40		      CMP	#64
  14204  381f		       b0 07		      BCS	.skipL0820
  14205  3821				   .condpart476
  14206  3821		       a9 11		      LDA	#$11
  14207  3823		       85 0a		      STA	CTRLPF
  14208  3825		       4c ef 50 	      jmp	.__More_Joy_Checks
  14209  3828
  14210  3828				   .skipL0820
  14211  3828				   .
  14212  3828							; 
  14213  3828
  14214  3828				   .L0821		;  goto __fl3
  14215  3828
  14216  3828		       4c fe 57 	      jmp	.__fl3
  14217  382b
  14218  382b				   .
  14219  382b							; 
  14220  382b
  14221  382b				   .
  14222  382b							; 
  14223  382b
  14224  382b				   .
  14225  382b							; 
  14226  382b
  14227  382b				   .
  14228  382b							; 
  14229  382b
  14230  382b				   .
  14231  382b							; 
  14232  382b
  14233  382b				   .__Checkpoint_L3
  14234  382b							; __Checkpoint_L3
  14235  382b
  14236  382b				   .
  14237  382b							; 
  14238  382b
  14239  382b				   .L0822		;  _Temp_u_Freq  =  31
  14240  382b
  14241  382b		       a9 1f		      LDA	#31
  14242  382d		       85 e8		      STA	_Temp_u_Freq
  14243  382f				   .
  14244  382f							; 
  14245  382f
  14246  382f				   .L0823		;  gosub __Tramp2C
  14247  382f
  14248  382f		       20 10 5f 	      jsr	.__Tramp2C
  14249  3832
  14250  3832				   .
  14251  3832							; 
  14252  3832
  14253  3832				   .__Checkpoint_2
  14254  3832							; __Checkpoint_2
  14255  3832
  14256  3832				   .
  14257  3832							; 
  14258  3832
  14259  3832				   .L0824		;  player0y  =  player0y  -  8
  14260  3832
  14261  3832		       a5 85		      LDA	player0y
  14262  3834		       38		      SEC
  14263  3835		       e9 08		      SBC	#8
  14264  3837		       85 85		      STA	player0y
  14265  3839				   .
  14266  3839							; 
  14267  3839
  14268  3839				   .L0825		;  AUDV0  =  8
  14269  3839
  14270  3839		       a9 08		      LDA	#8
  14271  383b		       85 19		      STA	AUDV0
  14272  383d				   .L0826		;  AUDC0  =  12
  14273  383d
  14274  383d		       a9 0c		      LDA	#12
  14275  383f		       85 15		      STA	AUDC0
  14276  3841				   .L0827		;  AUDF0  =  _Temp_u_Freq
  14277  3841
  14278  3841		       a5 e8		      LDA	_Temp_u_Freq
  14279  3843		       85 17		      STA	AUDF0
  14280  3845				   .L0828		;  AUDV1  =  0
  14281  3845
  14282  3845		       a9 00		      LDA	#0
  14283  3847		       85 1a		      STA	AUDV1
  14284  3849				   .
  14285  3849							; 
  14286  3849
  14287  3849				   .L0829		;  gosub __Render_Screen_B3
  14288  3849
  14289  3849		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14290  384c
  14291  384c				   .
  14292  384c							; 
  14293  384c
  14294  384c				   .L0830		;  _Temp_u_Freq  =  _Temp_u_Freq  -  4
  14295  384c
  14296  384c		       a5 e8		      LDA	_Temp_u_Freq
  14297  384e		       38		      SEC
  14298  384f		       e9 04		      SBC	#4
  14299  3851		       85 e8		      STA	_Temp_u_Freq
  14300  3853				   .
  14301  3853							; 
  14302  3853
  14303  3853				   .L0831		;  if player0y  >  8 then goto __Checkpoint_2
  14304  3853
  14305  3853		       a9 08		      LDA	#8
  14306  3855		       c5 85		      CMP	player0y
  14307  3857		       b0 03		      BCS	.skipL0831
  14308  3859				   .condpart477
  14309  3859		       4c 32 58 	      jmp	.__Checkpoint_2
  14310  385c
  14311  385c				   .skipL0831
  14312  385c				   .
  14313  385c							; 
  14314  385c
  14315  385c				   .L0832		;  player0x  =  0  :  player0y  =  150
  14316  385c
  14317  385c		       a9 00		      LDA	#0
  14318  385e		       85 80		      STA	player0x
  14319  3860		       a9 96		      LDA	#150
  14320  3862		       85 85		      STA	player0y
  14321  3864				   .
  14322  3864							; 
  14323  3864
  14324  3864				   .L0833		;  _Enemy_Type  =  _Goomba  :	player1x  =  0	:  player1y  =	150
  14325  3864
  14326  3864		       a9 00		      LDA	#_Goomba
  14327  3866		       85 dc		      STA	_Enemy_Type
  14328  3868		       a9 00		      LDA	#0
  14329  386a		       85 81		      STA	player1x
  14330  386c		       a9 96		      LDA	#150
  14331  386e		       85 86		      STA	player1y
  14332  3870				   .
  14333  3870							; 
  14334  3870
  14335  3870				   .L0834		;  _Level_Data_Pointer  =  32	:  _Bit6_Checkpoint_Flag{6}  =	1
  14336  3870
  14337  3870		       a9 20		      LDA	#32
  14338  3872		       85 d5		      STA	_Level_Data_Pointer
  14339  3874		       a5 da		      LDA	_Bit6_Checkpoint_Flag
  14340  3876		       09 40		      ORA	#64
  14341  3878		       85 da		      STA	_Bit6_Checkpoint_Flag
  14342  387a				   .
  14343  387a							; 
  14344  387a
  14345  387a				   .L0835		;  pfclear
  14346  387a
  14347  387a		       a9 00		      LDA	#0
  14348  387c		       85 ee		      sta	temp7
  14349  387e		       a9 58		      lda	#>(ret_point54-1)
  14350  3880		       48		      pha
  14351  3881		       a9 93		      lda	#<(ret_point54-1)
  14352  3883		       48		      pha
  14353  3884		       a9 f2		      lda	#>(pfclear-1)
  14354  3886		       48		      pha
  14355  3887		       a9 8f		      lda	#<(pfclear-1)
  14356  3889		       48		      pha
  14357  388a		       a5 ee		      lda	temp7
  14358  388c		       48		      pha
  14359  388d		       8a		      txa
  14360  388e		       48		      pha
  14361  388f		       a2 08		      ldx	#8
  14362  3891		       4c eb ff 	      jmp	BS_jsr
  14363  3894				   ret_point54
  14364  3894				   .
  14365  3894							; 
  14366  3894
  14367  3894				   .L0836		;  AUDV0  =  0
  14368  3894
  14369  3894		       a9 00		      LDA	#0
  14370  3896		       85 19		      STA	AUDV0
  14371  3898				   .
  14372  3898							; 
  14373  3898
  14374  3898				   .L0837		;  for x  =  1 to 32
  14375  3898
  14376  3898		       a9 01		      LDA	#1
  14377  389a		       85 eb		      STA	x
  14378  389c				   .L0837forx
  14379  389c				   .
  14380  389c							; 
  14381  389c
  14382  389c				   .L0838		;  gosub __Render_Screen_B3
  14383  389c
  14384  389c		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14385  389f
  14386  389f				   .
  14387  389f							; 
  14388  389f
  14389  389f				   .L0839		;  next x
  14390  389f
  14391  389f		       a5 eb		      LDA	x
  14392  38a1		       c9 20		      CMP	#32
  14393  38a3
  14394  38a3		       e6 eb		      INC	x
  14395  38a5					      if	((* - .L0837forx) < 127) && ((* - .L0837forx) > -128)
  14396  38a5		       90 f5		      bcc	.L0837forx
  14397  38a7				  -	      else
  14398  38a7				  -	      bcs	.10skipL0837forx
  14399  38a7				  -	      jmp	.L0837forx
  14400  38a7				  -.10skipL0837forx
  14401  38a7					      endif
  14402  38a7				   .
  14403  38a7							; 
  14404  38a7
  14405  38a7				   .L0840		;  gosub __Intro_Screen_3 bank4
  14406  38a7
  14407  38a7		       85 ee		      sta	temp7
  14408  38a9		       a9 58		      lda	#>(ret_point55-1)
  14409  38ab		       48		      pha
  14410  38ac		       a9 be		      lda	#<(ret_point55-1)
  14411  38ae		       48		      pha
  14412  38af		       a9 70		      lda	#>(.__Intro_Screen_3-1)
  14413  38b1		       48		      pha
  14414  38b2		       a9 ef		      lda	#<(.__Intro_Screen_3-1)
  14415  38b4		       48		      pha
  14416  38b5		       a5 ee		      lda	temp7
  14417  38b7		       48		      pha
  14418  38b8		       8a		      txa
  14419  38b9		       48		      pha
  14420  38ba		       a2 04		      ldx	#4
  14421  38bc		       4c eb ff 	      jmp	BS_jsr
  14422  38bf				   ret_point55
  14423  38bf				   .
  14424  38bf							; 
  14425  38bf
  14426  38bf				   .L0841		;  player0x  =  24  :	player0y  =  100
  14427  38bf
  14428  38bf		       a9 18		      LDA	#24
  14429  38c1		       85 80		      STA	player0x
  14430  38c3		       a9 64		      LDA	#100
  14431  38c5		       85 85		      STA	player0y
  14432  38c7				   .
  14433  38c7							; 
  14434  38c7
  14435  38c7				   .L0842		;  _Temp_u_Freq  =  31
  14436  38c7
  14437  38c7		       a9 1f		      LDA	#31
  14438  38c9		       85 e8		      STA	_Temp_u_Freq
  14439  38cb				   .
  14440  38cb							; 
  14441  38cb
  14442  38cb				   .L0843		;  x  =  8
  14443  38cb
  14444  38cb		       a9 08		      LDA	#8
  14445  38cd		       85 eb		      STA	x
  14446  38cf				   .
  14447  38cf							; 
  14448  38cf
  14449  38cf				   .__Checkpoint_3
  14450  38cf							; __Checkpoint_3
  14451  38cf
  14452  38cf				   .
  14453  38cf							; 
  14454  38cf
  14455  38cf				   .L0844		;  player0y  =  player0y  -  x
  14456  38cf
  14457  38cf		       a5 85		      LDA	player0y
  14458  38d1		       38		      SEC
  14459  38d2		       e5 eb		      SBC	x
  14460  38d4		       85 85		      STA	player0y
  14461  38d6				   .
  14462  38d6							; 
  14463  38d6
  14464  38d6				   .L0845		;  AUDV0  =  8
  14465  38d6
  14466  38d6		       a9 08		      LDA	#8
  14467  38d8		       85 19		      STA	AUDV0
  14468  38da				   .L0846		;  AUDC0  =  12
  14469  38da
  14470  38da		       a9 0c		      LDA	#12
  14471  38dc		       85 15		      STA	AUDC0
  14472  38de				   .L0847		;  AUDF0  =  _Temp_u_Freq
  14473  38de
  14474  38de		       a5 e8		      LDA	_Temp_u_Freq
  14475  38e0		       85 17		      STA	AUDF0
  14476  38e2				   .L0848		;  AUDV1  =  0
  14477  38e2
  14478  38e2		       a9 00		      LDA	#0
  14479  38e4		       85 1a		      STA	AUDV1
  14480  38e6				   .
  14481  38e6							; 
  14482  38e6
  14483  38e6				   .L0849		;  gosub __Render_Screen_B3
  14484  38e6
  14485  38e6		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14486  38e9
  14487  38e9				   .
  14488  38e9							; 
  14489  38e9
  14490  38e9				   .L0850		;  _Temp_u_Freq  =  _Temp_u_Freq  -  4  :  x  =  x  -	1
  14491  38e9
  14492  38e9		       a5 e8		      LDA	_Temp_u_Freq
  14493  38eb		       38		      SEC
  14494  38ec		       e9 04		      SBC	#4
  14495  38ee		       85 e8		      STA	_Temp_u_Freq
  14496  38f0		       c6 eb		      DEC	x
  14497  38f2				   .
  14498  38f2							; 
  14499  38f2
  14500  38f2				   .L0851		;  if player0y  <  80 then goto __More_Joy_Checks
  14501  38f2
  14502  38f2		       a5 85		      LDA	player0y
  14503  38f4		       c9 50		      CMP	#80
  14504  38f6		       b0 03		      BCS	.skipL0851
  14505  38f8				   .condpart478
  14506  38f8		       4c ef 50 	      jmp	.__More_Joy_Checks
  14507  38fb
  14508  38fb				   .skipL0851
  14509  38fb				   .
  14510  38fb							; 
  14511  38fb
  14512  38fb				   .L0852		;  goto __Checkpoint_3
  14513  38fb
  14514  38fb		       4c cf 58 	      jmp	.__Checkpoint_3
  14515  38fe
  14516  38fe				   .
  14517  38fe							; 
  14518  38fe
  14519  38fe				   .
  14520  38fe							; 
  14521  38fe
  14522  38fe				   .
  14523  38fe							; 
  14524  38fe
  14525  38fe				   .
  14526  38fe							; 
  14527  38fe
  14528  38fe				   .
  14529  38fe							; 
  14530  38fe
  14531  38fe				   .
  14532  38fe							; 
  14533  38fe
  14534  38fe				   .
  14535  38fe							; 
  14536  38fe
  14537  38fe				   .
  14538  38fe							; 
  14539  38fe
  14540  38fe				   .__Level_Completed
  14541  38fe							; __Level_Completed
  14542  38fe
  14543  38fe				   .
  14544  38fe							; 
  14545  38fe
  14546  38fe				   .L0853		;  ballx  =  0  :  bally  =  150
  14547  38fe
  14548  38fe		       a9 00		      LDA	#0
  14549  3900		       85 84		      STA	ballx
  14550  3902		       a9 96		      LDA	#150
  14551  3904		       85 89		      STA	bally
  14552  3906				   .
  14553  3906							; 
  14554  3906
  14555  3906				   .L0854		;  gosub __Flag_Pole_Down
  14556  3906
  14557  3906		       20 fb 5e 	      jsr	.__Flag_Pole_Down
  14558  3909
  14559  3909				   .
  14560  3909							; 
  14561  3909
  14562  3909				   .L0855		;  gosub __Fanfare_Music bank7
  14563  3909
  14564  3909		       85 ee		      sta	temp7
  14565  390b		       a9 59		      lda	#>(ret_point56-1)
  14566  390d		       48		      pha
  14567  390e		       a9 20		      lda	#<(ret_point56-1)
  14568  3910		       48		      pha
  14569  3911		       a9 dc		      lda	#>(.__Fanfare_Music-1)
  14570  3913		       48		      pha
  14571  3914		       a9 c0		      lda	#<(.__Fanfare_Music-1)
  14572  3916		       48		      pha
  14573  3917		       a5 ee		      lda	temp7
  14574  3919		       48		      pha
  14575  391a		       8a		      txa
  14576  391b		       48		      pha
  14577  391c		       a2 07		      ldx	#7
  14578  391e		       4c eb ff 	      jmp	BS_jsr
  14579  3921				   ret_point56
  14580  3921				   .
  14581  3921							; 
  14582  3921
  14583  3921				   .L0856		;  z  =  player1y  -  player0y
  14584  3921
  14585  3921		       a5 86		      LDA	player1y
  14586  3923		       38		      SEC
  14587  3924		       e5 85		      SBC	player0y
  14588  3926		       85 ed		      STA	z
  14589  3928				   .
  14590  3928							; 
  14591  3928
  14592  3928				   .L0857		;  if z  =  0 then z  =  1
  14593  3928
  14594  3928		       a5 ed		      LDA	z
  14595  392a		       c9 00		      CMP	#0
  14596  392c		       d0 04		      BNE	.skipL0857
  14597  392e				   .condpart479
  14598  392e		       a9 01		      LDA	#1
  14599  3930		       85 ed		      STA	z
  14600  3932				   .skipL0857
  14601  3932				   .
  14602  3932							; 
  14603  3932
  14604  3932				   .L0858		;  AUDV0  =  0
  14605  3932
  14606  3932		       a9 00		      LDA	#0
  14607  3934		       85 19		      STA	AUDV0
  14608  3936				   .L0859		;  AUDV1  =  0
  14609  3936
  14610  3936		       a9 00		      LDA	#0
  14611  3938		       85 1a		      STA	AUDV1
  14612  393a				   .
  14613  393a							; 
  14614  393a
  14615  393a				   .L0860		;  player0y  =  player1y  :  _Music_Duration  =  1
  14616  393a
  14617  393a		       a5 86		      LDA	player1y
  14618  393c		       85 85		      STA	player0y
  14619  393e		       a9 01		      LDA	#1
  14620  3940		       85 e3		      STA	_Music_Duration
  14621  3942				   .
  14622  3942							; 
  14623  3942
  14624  3942				   .L0861		;  _Animation_Timer  =  0  :  _Bit1_Jumping_Flag{1}  =  0  :  _Bit0_Player_Facing_Direction{0}  =  0  :  _Bit5_Ducking_Flag{5}  =  0  :  _Momentum_Up_Down  =	0  :  _Bit7_Mario_Invincibility{7}  =  0  :  _Bit7_Mario_On_Off{7}  =  0  :  _Momentum_Left_Right  =  0
  14625  3942
  14626  3942		       a9 00		      LDA	#0
  14627  3944		       85 d4		      STA	_Animation_Timer
  14628  3946		       a5 d7		      LDA	_Bit1_Jumping_Flag
  14629  3948		       29 fd		      AND	#253
  14630  394a		       85 d7		      STA	_Bit1_Jumping_Flag
  14631  394c		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  14632  394e		       29 fe		      AND	#254
  14633  3950		       85 d7		      STA	_Bit0_Player_Facing_Direction
  14634  3952		       a5 d7		      LDA	_Bit5_Ducking_Flag
  14635  3954		       29 df		      AND	#223
  14636  3956		       85 d7		      STA	_Bit5_Ducking_Flag
  14637  3958		       a9 00		      LDA	#0
  14638  395a		       85 e1		      STA	_Momentum_Up_Down
  14639  395c		       a5 d7		      LDA	_Bit7_Mario_Invincibility
  14640  395e		       29 7f		      AND	#127
  14641  3960		       85 d7		      STA	_Bit7_Mario_Invincibility
  14642  3962		       a5 da		      LDA	_Bit7_Mario_On_Off
  14643  3964		       29 7f		      AND	#127
  14644  3966		       85 da		      STA	_Bit7_Mario_On_Off
  14645  3968		       a9 00		      LDA	#0
  14646  396a		       85 e0		      STA	_Momentum_Left_Right
  14647  396c				   .
  14648  396c							; 
  14649  396c
  14650  396c				   .L0862		;  gosub __Set_Up_Mario bank1
  14651  396c
  14652  396c		       85 ee		      sta	temp7
  14653  396e		       a9 59		      lda	#>(ret_point57-1)
  14654  3970		       48		      pha
  14655  3971		       a9 83		      lda	#<(ret_point57-1)
  14656  3973		       48		      pha
  14657  3974		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  14658  3976		       48		      pha
  14659  3977		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  14660  3979		       48		      pha
  14661  397a		       a5 ee		      lda	temp7
  14662  397c		       48		      pha
  14663  397d		       8a		      txa
  14664  397e		       48		      pha
  14665  397f		       a2 01		      ldx	#1
  14666  3981		       4c eb ff 	      jmp	BS_jsr
  14667  3984				   ret_point57
  14668  3984				   .
  14669  3984							; 
  14670  3984
  14671  3984				   .L0863		;  for y  =  1 to z
  14672  3984
  14673  3984		       a9 01		      LDA	#1
  14674  3986		       85 ec		      STA	y
  14675  3988				   .L0863fory
  14676  3988				   .
  14677  3988							; 
  14678  3988
  14679  3988				   .L0864		;  score  =  score  +	100
  14680  3988
  14681  3988		       f8		      SED
  14682  3989		       18		      CLC
  14683  398a		       a5 94		      LDA	score+1
  14684  398c		       69 01		      ADC	#$01
  14685  398e		       85 94		      STA	score+1
  14686  3990		       a5 93		      LDA	score
  14687  3992		       69 00		      ADC	#$00
  14688  3994		       85 93		      STA	score
  14689  3996		       d8		      CLD
  14690  3997				   .
  14691  3997							; 
  14692  3997
  14693  3997				   .L0865		;  gosub __Render_Screen_B3
  14694  3997
  14695  3997		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14696  399a
  14697  399a				   .
  14698  399a							; 
  14699  399a
  14700  399a				   .L0866		;  AUDV0  =  8
  14701  399a
  14702  399a		       a9 08		      LDA	#8
  14703  399c		       85 19		      STA	AUDV0
  14704  399e				   .L0867		;  AUDC0  =  12
  14705  399e
  14706  399e		       a9 0c		      LDA	#12
  14707  39a0		       85 15		      STA	AUDC0
  14708  39a2				   .L0868		;  AUDF0  =  y
  14709  39a2
  14710  39a2		       a5 ec		      LDA	y
  14711  39a4		       85 17		      STA	AUDF0
  14712  39a6				   .
  14713  39a6							; 
  14714  39a6
  14715  39a6				   .L0869		;  next y
  14716  39a6
  14717  39a6		       a5 ec		      LDA	y
  14718  39a8		       c5 ed		      CMP	z
  14719  39aa
  14720  39aa		       e6 ec		      INC	y
  14721  39ac					      if	((* - .L0863fory) < 127) && ((* - .L0863fory) > -128)
  14722  39ac		       90 da		      bcc	.L0863fory
  14723  39ae				  -	      else
  14724  39ae				  -	      bcs	.11skipL0863fory
  14725  39ae				  -	      jmp	.L0863fory
  14726  39ae				  -.11skipL0863fory
  14727  39ae					      endif
  14728  39ae				   .
  14729  39ae							; 
  14730  39ae
  14731  39ae				   .L0870		;  AUDV0  =  0
  14732  39ae
  14733  39ae		       a9 00		      LDA	#0
  14734  39b0		       85 19		      STA	AUDV0
  14735  39b2				   .
  14736  39b2							; 
  14737  39b2
  14738  39b2				   .L0871		;  _Momentum_Left_Right  =  2
  14739  39b2
  14740  39b2		       a9 02		      LDA	#2
  14741  39b4		       85 e0		      STA	_Momentum_Left_Right
  14742  39b6				   .
  14743  39b6							; 
  14744  39b6
  14745  39b6				   .__elr3
  14746  39b6							; __elr3
  14747  39b6
  14748  39b6				   .
  14749  39b6							; 
  14750  39b6
  14751  39b6				   .L0872		;  gosub __Play_FF_Music bank7
  14752  39b6
  14753  39b6		       85 ee		      sta	temp7
  14754  39b8		       a9 59		      lda	#>(ret_point58-1)
  14755  39ba		       48		      pha
  14756  39bb		       a9 cd		      lda	#<(ret_point58-1)
  14757  39bd		       48		      pha
  14758  39be		       a9 dc		      lda	#>(.__Play_FF_Music-1)
  14759  39c0		       48		      pha
  14760  39c1		       a9 39		      lda	#<(.__Play_FF_Music-1)
  14761  39c3		       48		      pha
  14762  39c4		       a5 ee		      lda	temp7
  14763  39c6		       48		      pha
  14764  39c7		       8a		      txa
  14765  39c8		       48		      pha
  14766  39c9		       a2 07		      ldx	#7
  14767  39cb		       4c eb ff 	      jmp	BS_jsr
  14768  39ce				   ret_point58
  14769  39ce				   .
  14770  39ce							; 
  14771  39ce
  14772  39ce				   .L0873		;  _Animation_Timer  =  _Animation_Timer  +  1
  14773  39ce
  14774  39ce		       e6 d4		      INC	_Animation_Timer
  14775  39d0				   .
  14776  39d0							; 
  14777  39d0
  14778  39d0				   .L0874		;  player0x  =  player0x  +  1
  14779  39d0
  14780  39d0		       e6 80		      INC	player0x
  14781  39d2				   .
  14782  39d2							; 
  14783  39d2
  14784  39d2				   .L0875		;  if player0x  >  137 then player0x  =  137  :  player0y  =  150
  14785  39d2
  14786  39d2		       a9 89		      LDA	#137
  14787  39d4		       c5 80		      CMP	player0x
  14788  39d6		       b0 08		      BCS	.skipL0875
  14789  39d8				   .condpart480
  14790  39d8		       a9 89		      LDA	#137
  14791  39da		       85 80		      STA	player0x
  14792  39dc		       a9 96		      LDA	#150
  14793  39de		       85 85		      STA	player0y
  14794  39e0				   .skipL0875
  14795  39e0				   .
  14796  39e0							; 
  14797  39e0
  14798  39e0				   .L0876		;  if _Animation_Timer  >  6 then _Animation_Timer  =	0
  14799  39e0
  14800  39e0		       a9 06		      LDA	#6
  14801  39e2		       c5 d4		      CMP	_Animation_Timer
  14802  39e4		       b0 04		      BCS	.skipL0876
  14803  39e6				   .condpart481
  14804  39e6		       a9 00		      LDA	#0
  14805  39e8		       85 d4		      STA	_Animation_Timer
  14806  39ea				   .skipL0876
  14807  39ea				   .
  14808  39ea							; 
  14809  39ea
  14810  39ea				   .L0877		;  gosub __Set_Up_Mario bank1
  14811  39ea
  14812  39ea		       85 ee		      sta	temp7
  14813  39ec		       a9 5a		      lda	#>(ret_point59-1)
  14814  39ee		       48		      pha
  14815  39ef		       a9 01		      lda	#<(ret_point59-1)
  14816  39f1		       48		      pha
  14817  39f2		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  14818  39f4		       48		      pha
  14819  39f5		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  14820  39f7		       48		      pha
  14821  39f8		       a5 ee		      lda	temp7
  14822  39fa		       48		      pha
  14823  39fb		       8a		      txa
  14824  39fc		       48		      pha
  14825  39fd		       a2 01		      ldx	#1
  14826  39ff		       4c eb ff 	      jmp	BS_jsr
  14827  3a02				   ret_point59
  14828  3a02				   .
  14829  3a02							; 
  14830  3a02
  14831  3a02				   .L0878		;  gosub __Render_Screen_B3  :  gosub __Render_Screen_B3
  14832  3a02
  14833  3a02		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14834  3a05		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14835  3a08
  14836  3a08				   .
  14837  3a08							; 
  14838  3a08
  14839  3a08				   .L0879		;  if _Music_Duration	<>  255 then goto __elr3
  14840  3a08
  14841  3a08		       a5 e3		      LDA	_Music_Duration
  14842  3a0a		       c9 ff		      CMP	#255
  14843  3a0c		       f0 03		      BEQ	.skipL0879
  14844  3a0e				   .condpart482
  14845  3a0e		       4c b6 59 	      jmp	.__elr3
  14846  3a11
  14847  3a11				   .skipL0879
  14848  3a11				   .
  14849  3a11							; 
  14850  3a11
  14851  3a11				   .__elr4
  14852  3a11							; __elr4
  14853  3a11
  14854  3a11				   .
  14855  3a11							; 
  14856  3a11
  14857  3a11				   .L0880		;  if pfscore1  =  0 then goto __elr5
  14858  3a11
  14859  3a11		       a5 f2		      LDA	pfscore1
  14860  3a13		       c9 00		      CMP	#0
  14861  3a15		       d0 03		      BNE	.skipL0880
  14862  3a17				   .condpart483
  14863  3a17		       4c 4b 5a 	      jmp	.__elr5
  14864  3a1a
  14865  3a1a				   .skipL0880
  14866  3a1a				   .
  14867  3a1a							; 
  14868  3a1a
  14869  3a1a				   .L0881		;  AUDV0  =  8
  14870  3a1a
  14871  3a1a		       a9 08		      LDA	#8
  14872  3a1c		       85 19		      STA	AUDV0
  14873  3a1e				   .L0882		;  AUDC0  =  4
  14874  3a1e
  14875  3a1e		       a9 04		      LDA	#4
  14876  3a20		       85 15		      STA	AUDC0
  14877  3a22				   .L0883		;  AUDF0  =  8
  14878  3a22
  14879  3a22		       a9 08		      LDA	#8
  14880  3a24		       85 17		      STA	AUDF0
  14881  3a26				   .L0884		;  AUDV1  =  0
  14882  3a26
  14883  3a26		       a9 00		      LDA	#0
  14884  3a28		       85 1a		      STA	AUDV1
  14885  3a2a				   .
  14886  3a2a							; 
  14887  3a2a
  14888  3a2a				   .L0885		;  pfscore1  =  pfscore1 / 2
  14889  3a2a
  14890  3a2a		       a5 f2		      LDA	pfscore1
  14891  3a2c		       4a		      lsr
  14892  3a2d		       85 f2		      STA	pfscore1
  14893  3a2f				   .
  14894  3a2f							; 
  14895  3a2f
  14896  3a2f				   .L0886		;  score  =  score  +	500
  14897  3a2f
  14898  3a2f		       f8		      SED
  14899  3a30		       18		      CLC
  14900  3a31		       a5 94		      LDA	score+1
  14901  3a33		       69 05		      ADC	#$05
  14902  3a35		       85 94		      STA	score+1
  14903  3a37		       a5 93		      LDA	score
  14904  3a39		       69 00		      ADC	#$00
  14905  3a3b		       85 93		      STA	score
  14906  3a3d		       d8		      CLD
  14907  3a3e				   .
  14908  3a3e							; 
  14909  3a3e
  14910  3a3e				   .L0887		;  gosub __Render_Screen_B3
  14911  3a3e
  14912  3a3e		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14913  3a41
  14914  3a41				   .
  14915  3a41							; 
  14916  3a41
  14917  3a41				   .L0888		;  AUDV0  =  0
  14918  3a41
  14919  3a41		       a9 00		      LDA	#0
  14920  3a43		       85 19		      STA	AUDV0
  14921  3a45				   .
  14922  3a45							; 
  14923  3a45
  14924  3a45				   .L0889		;  gosub __Render_Screen_B3
  14925  3a45
  14926  3a45		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14927  3a48
  14928  3a48				   .
  14929  3a48							; 
  14930  3a48
  14931  3a48				   .L0890		;  goto __elr4
  14932  3a48
  14933  3a48		       4c 11 5a 	      jmp	.__elr4
  14934  3a4b
  14935  3a4b				   .
  14936  3a4b							; 
  14937  3a4b
  14938  3a4b				   .__elr5
  14939  3a4b							; __elr5
  14940  3a4b
  14941  3a4b				   .
  14942  3a4b							; 
  14943  3a4b
  14944  3a4b				   .L0891		;  for x  =  1 to 64
  14945  3a4b
  14946  3a4b		       a9 01		      LDA	#1
  14947  3a4d		       85 eb		      STA	x
  14948  3a4f				   .L0891forx
  14949  3a4f				   .
  14950  3a4f							; 
  14951  3a4f
  14952  3a4f				   .L0892		;  gosub __Render_Screen_B3
  14953  3a4f
  14954  3a4f		       20 0d 5e 	      jsr	.__Render_Screen_B3
  14955  3a52
  14956  3a52				   .
  14957  3a52							; 
  14958  3a52
  14959  3a52				   .L0893		;  next x
  14960  3a52
  14961  3a52		       a5 eb		      LDA	x
  14962  3a54		       c9 40		      CMP	#64
  14963  3a56
  14964  3a56		       e6 eb		      INC	x
  14965  3a58					      if	((* - .L0891forx) < 127) && ((* - .L0891forx) > -128)
  14966  3a58		       90 f5		      bcc	.L0891forx
  14967  3a5a				  -	      else
  14968  3a5a				  -	      bcs	.12skipL0891forx
  14969  3a5a				  -	      jmp	.L0891forx
  14970  3a5a				  -.12skipL0891forx
  14971  3a5a					      endif
  14972  3a5a				   .
  14973  3a5a							; 
  14974  3a5a
  14975  3a5a				   .L0894		;  _Bit6_Checkpoint_Flag{6}  =  0  :  _Enemy_Type  =  _Goomba	:  player1y  =	150  :	player1x  =  0	:  _Star_Invincibility_Timer  =  0  :  _Bit7_Mario_Invincibility{7}  =	0  :  _Bit7_Mario_On_Off{7}  =	0  :  _Bit5_Ducking_Flag{5}  =	0  :  _Level_Timer  =  0
  14976  3a5a
  14977  3a5a		       a5 da		      LDA	_Bit6_Checkpoint_Flag
  14978  3a5c		       29 bf		      AND	#191
  14979  3a5e		       85 da		      STA	_Bit6_Checkpoint_Flag
  14980  3a60		       a9 00		      LDA	#_Goomba
  14981  3a62		       85 dc		      STA	_Enemy_Type
  14982  3a64		       a9 96		      LDA	#150
  14983  3a66		       85 86		      STA	player1y
  14984  3a68		       a9 00		      LDA	#0
  14985  3a6a		       85 81		      STA	player1x
  14986  3a6c		       85 de		      STA	_Star_Invincibility_Timer
  14987  3a6e		       a5 d7		      LDA	_Bit7_Mario_Invincibility
  14988  3a70		       29 7f		      AND	#127
  14989  3a72		       85 d7		      STA	_Bit7_Mario_Invincibility
  14990  3a74		       a5 da		      LDA	_Bit7_Mario_On_Off
  14991  3a76		       29 7f		      AND	#127
  14992  3a78		       85 da		      STA	_Bit7_Mario_On_Off
  14993  3a7a		       a5 d7		      LDA	_Bit5_Ducking_Flag
  14994  3a7c		       29 df		      AND	#223
  14995  3a7e		       85 d7		      STA	_Bit5_Ducking_Flag
  14996  3a80		       a9 00		      LDA	#0
  14997  3a82		       85 d8		      STA	_Level_Timer
  14998  3a84				   .
  14999  3a84							; 
  15000  3a84
  15001  3a84				   .L0895		;  _Moving_Shell_X_Coordinate	=  0  :  _Moving_Shell_Y_Coordinate  =	0  :  _Bit1_Jumping_Flag{1}  =	0  :  _Momentum_Up_Down  =  0  :  _Momentum_Left_Right	=  0
  15002  3a84
  15003  3a84		       a9 00		      LDA	#0
  15004  3a86		       85 e6		      STA	_Moving_Shell_X_Coordinate
  15005  3a88		       85 e7		      STA	_Moving_Shell_Y_Coordinate
  15006  3a8a		       a5 d7		      LDA	_Bit1_Jumping_Flag
  15007  3a8c		       29 fd		      AND	#253
  15008  3a8e		       85 d7		      STA	_Bit1_Jumping_Flag
  15009  3a90		       a9 00		      LDA	#0
  15010  3a92		       85 e1		      STA	_Momentum_Up_Down
  15011  3a94		       85 e0		      STA	_Momentum_Left_Right
  15012  3a96				   .
  15013  3a96							; 
  15014  3a96
  15015  3a96				   .L0896		;  _Level  =  _Level  +  1
  15016  3a96
  15017  3a96		       e6 ea		      INC	_Level
  15018  3a98				   .
  15019  3a98							; 
  15020  3a98
  15021  3a98				   .L0897		;  if _Level  =  5 then _Level  =  1  :  _World  =  _World  +	1
  15022  3a98
  15023  3a98		       a5 ea		      LDA	_Level
  15024  3a9a		       c9 05		      CMP	#5
  15025  3a9c		       d0 06		      BNE	.skipL0897
  15026  3a9e				   .condpart484
  15027  3a9e		       a9 01		      LDA	#1
  15028  3aa0		       85 ea		      STA	_Level
  15029  3aa2		       e6 e9		      INC	_World
  15030  3aa4				   .skipL0897
  15031  3aa4				   .
  15032  3aa4							; 
  15033  3aa4
  15034  3aa4				   .L0898		;  goto __Init bank1
  15035  3aa4
  15036  3aa4		       85 ee		      sta	temp7
  15037  3aa6		       a9 10		      lda	#>(.__Init-1)
  15038  3aa8		       48		      pha
  15039  3aa9		       a9 64		      lda	#<(.__Init-1)
  15040  3aab		       48		      pha
  15041  3aac		       a5 ee		      lda	temp7
  15042  3aae		       48		      pha
  15043  3aaf		       8a		      txa
  15044  3ab0		       48		      pha
  15045  3ab1		       a2 01		      ldx	#1
  15046  3ab3		       4c eb ff 	      jmp	BS_jsr
  15047  3ab6				   .
  15048  3ab6							; 
  15049  3ab6
  15050  3ab6				   .
  15051  3ab6							; 
  15052  3ab6
  15053  3ab6				   .
  15054  3ab6							; 
  15055  3ab6
  15056  3ab6				   .
  15057  3ab6							; 
  15058  3ab6
  15059  3ab6				   .
  15060  3ab6							; 
  15061  3ab6
  15062  3ab6				   .
  15063  3ab6							; 
  15064  3ab6
  15065  3ab6				   .
  15066  3ab6							; 
  15067  3ab6
  15068  3ab6				   .__8coins
  15069  3ab6							; __8coins
  15070  3ab6
  15071  3ab6				   .
  15072  3ab6							; 
  15073  3ab6
  15074  3ab6				   .L0899		;  score  =  score  +	800
  15075  3ab6
  15076  3ab6		       f8		      SED
  15077  3ab7		       18		      CLC
  15078  3ab8		       a5 94		      LDA	score+1
  15079  3aba		       69 08		      ADC	#$08
  15080  3abc		       85 94		      STA	score+1
  15081  3abe		       a5 93		      LDA	score
  15082  3ac0		       69 00		      ADC	#$00
  15083  3ac2		       85 93		      STA	score
  15084  3ac4		       d8		      CLD
  15085  3ac5				   .
  15086  3ac5							; 
  15087  3ac5
  15088  3ac5				   .L0900		;  pfscore2  =  pfscore2  *  2 | 1
  15089  3ac5
  15090  3ac5							; complex statement detected
  15091  3ac5		       a5 f3		      LDA	pfscore2
  15092  3ac7		       0a		      asl
  15093  3ac8		       09 01		      ORA	#1
  15094  3aca		       85 f3		      STA	pfscore2
  15095  3acc				   .
  15096  3acc							; 
  15097  3acc
  15098  3acc				   .L0901		;  AUDV0  =  12
  15099  3acc
  15100  3acc		       a9 0c		      LDA	#12
  15101  3ace		       85 19		      STA	AUDV0
  15102  3ad0				   .L0902		;  AUDC0  =  4
  15103  3ad0
  15104  3ad0		       a9 04		      LDA	#4
  15105  3ad2		       85 15		      STA	AUDC0
  15106  3ad4				   .L0903		;  AUDF0  =  7
  15107  3ad4
  15108  3ad4		       a9 07		      LDA	#7
  15109  3ad6		       85 17		      STA	AUDF0
  15110  3ad8				   .
  15111  3ad8							; 
  15112  3ad8
  15113  3ad8				   .L0904		;  player1x  =  0  :  player1y  =  150  :  _Enemy_Type  =  _Goomba
  15114  3ad8
  15115  3ad8		       a9 00		      LDA	#0
  15116  3ada		       85 81		      STA	player1x
  15117  3adc		       a9 96		      LDA	#150
  15118  3ade		       85 86		      STA	player1y
  15119  3ae0		       a9 00		      LDA	#_Goomba
  15120  3ae2		       85 dc		      STA	_Enemy_Type
  15121  3ae4				   .
  15122  3ae4							; 
  15123  3ae4
  15124  3ae4				   .L0905		;  if pfscore2  <  250 then goto __Draw
  15125  3ae4
  15126  3ae4		       a5 f3		      LDA	pfscore2
  15127  3ae6		       c9 fa		      CMP	#250
  15128  3ae8		       b0 03		      BCS	.skipL0905
  15129  3aea				   .condpart485
  15130  3aea		       4c 00 50 	      jmp	.__Draw
  15131  3aed
  15132  3aed				   .skipL0905
  15133  3aed				   .
  15134  3aed							; 
  15135  3aed
  15136  3aed				   .L0906		;  pfscore2  =  0
  15137  3aed
  15138  3aed		       a9 00		      LDA	#0
  15139  3aef		       85 f3		      STA	pfscore2
  15140  3af1				   .
  15141  3af1							; 
  15142  3af1
  15143  3af1				   .L0907		;  goto __1Up_Mushroom
  15144  3af1
  15145  3af1		       4c 3e 5b 	      jmp	.__1Up_Mushroom
  15146  3af4
  15147  3af4				   .
  15148  3af4							; 
  15149  3af4
  15150  3af4				   .
  15151  3af4							; 
  15152  3af4
  15153  3af4				   .
  15154  3af4							; 
  15155  3af4
  15156  3af4				   .
  15157  3af4							; 
  15158  3af4
  15159  3af4				   .
  15160  3af4							; 
  15161  3af4
  15162  3af4				   .
  15163  3af4							; 
  15164  3af4
  15165  3af4				   .
  15166  3af4							; 
  15167  3af4
  15168  3af4				   .__Star_Power
  15169  3af4							; __Star_Power
  15170  3af4
  15171  3af4				   .
  15172  3af4							; 
  15173  3af4
  15174  3af4				   .L0908		;  _Star_Invincibility_Timer  =  1  :	_Bit7_Mario_Invincibility{7}  =  1  :  _Bit7_Mario_On_Off{7}  =  1
  15175  3af4
  15176  3af4		       a9 01		      LDA	#1
  15177  3af6		       85 de		      STA	_Star_Invincibility_Timer
  15178  3af8		       a5 d7		      LDA	_Bit7_Mario_Invincibility
  15179  3afa		       09 80		      ORA	#128
  15180  3afc		       85 d7		      STA	_Bit7_Mario_Invincibility
  15181  3afe		       a5 da		      LDA	_Bit7_Mario_On_Off
  15182  3b00		       09 80		      ORA	#128
  15183  3b02		       85 da		      STA	_Bit7_Mario_On_Off
  15184  3b04				   .
  15185  3b04							; 
  15186  3b04
  15187  3b04				   .L0909		;  score  =  score  +	1000
  15188  3b04
  15189  3b04		       f8		      SED
  15190  3b05		       18		      CLC
  15191  3b06		       a5 94		      LDA	score+1
  15192  3b08		       69 10		      ADC	#$10
  15193  3b0a		       85 94		      STA	score+1
  15194  3b0c		       a5 93		      LDA	score
  15195  3b0e		       69 00		      ADC	#$00
  15196  3b10		       85 93		      STA	score
  15197  3b12		       d8		      CLD
  15198  3b13				   .
  15199  3b13							; 
  15200  3b13
  15201  3b13				   .L0910		;  player1x  =  0  :  player1y  =  150  :  _Enemy_Type  =  _Goomba
  15202  3b13
  15203  3b13		       a9 00		      LDA	#0
  15204  3b15		       85 81		      STA	player1x
  15205  3b17		       a9 96		      LDA	#150
  15206  3b19		       85 86		      STA	player1y
  15207  3b1b		       a9 00		      LDA	#_Goomba
  15208  3b1d		       85 dc		      STA	_Enemy_Type
  15209  3b1f				   .
  15210  3b1f							; 
  15211  3b1f
  15212  3b1f				   .L0911		;  _Music_Duration  =	1
  15213  3b1f
  15214  3b1f		       a9 01		      LDA	#1
  15215  3b21		       85 e3		      STA	_Music_Duration
  15216  3b23				   .
  15217  3b23							; 
  15218  3b23
  15219  3b23				   .L0912		;  gosub __Star_Power_Music bank7
  15220  3b23
  15221  3b23		       85 ee		      sta	temp7
  15222  3b25		       a9 5b		      lda	#>(ret_point60-1)
  15223  3b27		       48		      pha
  15224  3b28		       a9 3a		      lda	#<(ret_point60-1)
  15225  3b2a		       48		      pha
  15226  3b2b		       a9 d8		      lda	#>(.__Star_Power_Music-1)
  15227  3b2d		       48		      pha
  15228  3b2e		       a9 9a		      lda	#<(.__Star_Power_Music-1)
  15229  3b30		       48		      pha
  15230  3b31		       a5 ee		      lda	temp7
  15231  3b33		       48		      pha
  15232  3b34		       8a		      txa
  15233  3b35		       48		      pha
  15234  3b36		       a2 07		      ldx	#7
  15235  3b38		       4c eb ff 	      jmp	BS_jsr
  15236  3b3b				   ret_point60
  15237  3b3b				   .
  15238  3b3b							; 
  15239  3b3b
  15240  3b3b				   .L0913		;  goto __Draw
  15241  3b3b
  15242  3b3b		       4c 00 50 	      jmp	.__Draw
  15243  3b3e
  15244  3b3e				   .
  15245  3b3e							; 
  15246  3b3e
  15247  3b3e				   .
  15248  3b3e							; 
  15249  3b3e
  15250  3b3e				   .
  15251  3b3e							; 
  15252  3b3e
  15253  3b3e				   .
  15254  3b3e							; 
  15255  3b3e
  15256  3b3e				   .
  15257  3b3e							; 
  15258  3b3e
  15259  3b3e				   .
  15260  3b3e							; 
  15261  3b3e
  15262  3b3e				   .
  15263  3b3e							; 
  15264  3b3e
  15265  3b3e				   .__1Up_Mushroom
  15266  3b3e							; __1Up_Mushroom
  15267  3b3e
  15268  3b3e				   .
  15269  3b3e							; 
  15270  3b3e
  15271  3b3e				   .L0914		;  y  =  11  :  u  =  0  :  _Lives_Counter  =	_Lives_Counter	+  1
  15272  3b3e
  15273  3b3e		       a9 0b		      LDA	#11
  15274  3b40		       85 ec		      STA	y
  15275  3b42		       a9 00		      LDA	#0
  15276  3b44		       85 e8		      STA	u
  15277  3b46		       e6 df		      INC	_Lives_Counter
  15278  3b48				   .
  15279  3b48							; 
  15280  3b48
  15281  3b48				   .L0915		;  if _Lives_Counter  =  255 then _Lives_Counter  =  254
  15282  3b48
  15283  3b48		       a5 df		      LDA	_Lives_Counter
  15284  3b4a		       c9 ff		      CMP	#255
  15285  3b4c		       d0 04		      BNE	.skipL0915
  15286  3b4e				   .condpart486
  15287  3b4e		       a9 fe		      LDA	#254
  15288  3b50		       85 df		      STA	_Lives_Counter
  15289  3b52				   .skipL0915
  15290  3b52				   .
  15291  3b52							; 
  15292  3b52
  15293  3b52				   .L0916		;  player1x  =  0  :  player1y  =  150  :  _Enemy_Type  =  _Goomba
  15294  3b52
  15295  3b52		       a9 00		      LDA	#0
  15296  3b54		       85 81		      STA	player1x
  15297  3b56		       a9 96		      LDA	#150
  15298  3b58		       85 86		      STA	player1y
  15299  3b5a		       a9 00		      LDA	#_Goomba
  15300  3b5c		       85 dc		      STA	_Enemy_Type
  15301  3b5e				   .
  15302  3b5e							; 
  15303  3b5e
  15304  3b5e				   .__1Up_Mush_2
  15305  3b5e							; __1Up_Mush_2
  15306  3b5e
  15307  3b5e				   .
  15308  3b5e							; 
  15309  3b5e
  15310  3b5e				   .L0917		;  gosub __1Up_SFX_B3
  15311  3b5e
  15312  3b5e		       20 9d 5b 	      jsr	.__1Up_SFX_B3
  15313  3b61
  15314  3b61				   .
  15315  3b61							; 
  15316  3b61
  15317  3b61				   .L0918		;  gosub __Render_Screen_B3  :  gosub __Render_Screen_B3  :  gosub __Render_Screen_B3	:  gosub __Render_Screen_B3
  15318  3b61
  15319  3b61		       20 0d 5e 	      jsr	.__Render_Screen_B3
  15320  3b64		       20 0d 5e 	      jsr	.__Render_Screen_B3
  15321  3b67		       20 0d 5e 	      jsr	.__Render_Screen_B3
  15322  3b6a		       20 0d 5e 	      jsr	.__Render_Screen_B3
  15323  3b6d
  15324  3b6d				   .
  15325  3b6d							; 
  15326  3b6d
  15327  3b6d				   .L0919		;  x  =  player0x  :  z  =  player0y  :  player0x  =  0  :  player0y  =  150
  15328  3b6d
  15329  3b6d		       a5 80		      LDA	player0x
  15330  3b6f		       85 eb		      STA	x
  15331  3b71		       a5 85		      LDA	player0y
  15332  3b73		       85 ed		      STA	z
  15333  3b75		       a9 00		      LDA	#0
  15334  3b77		       85 80		      STA	player0x
  15335  3b79		       a9 96		      LDA	#150
  15336  3b7b		       85 85		      STA	player0y
  15337  3b7d				   .
  15338  3b7d							; 
  15339  3b7d
  15340  3b7d				   .L0920		;  gosub __Render_Screen_B3  :  gosub __Render_Screen_B3  :  gosub __Render_Screen_B3	:  gosub __Render_Screen_B3
  15341  3b7d
  15342  3b7d		       20 0d 5e 	      jsr	.__Render_Screen_B3
  15343  3b80		       20 0d 5e 	      jsr	.__Render_Screen_B3
  15344  3b83		       20 0d 5e 	      jsr	.__Render_Screen_B3
  15345  3b86		       20 0d 5e 	      jsr	.__Render_Screen_B3
  15346  3b89
  15347  3b89				   .
  15348  3b89							; 
  15349  3b89
  15350  3b89				   .L0921		;  player0x  =  x  :  player0y  =  z
  15351  3b89
  15352  3b89		       a5 eb		      LDA	x
  15353  3b8b		       85 80		      STA	player0x
  15354  3b8d		       a5 ed		      LDA	z
  15355  3b8f		       85 85		      STA	player0y
  15356  3b91				   .
  15357  3b91							; 
  15358  3b91
  15359  3b91				   .L0922		;  if y  =  3 then goto __Draw
  15360  3b91
  15361  3b91		       a5 ec		      LDA	y
  15362  3b93		       c9 03		      CMP	#3
  15363  3b95		       d0 03		      BNE	.skipL0922
  15364  3b97				   .condpart487
  15365  3b97		       4c 00 50 	      jmp	.__Draw
  15366  3b9a
  15367  3b9a				   .skipL0922
  15368  3b9a				   .
  15369  3b9a							; 
  15370  3b9a
  15371  3b9a				   .L0923		;  goto __1Up_Mush_2
  15372  3b9a
  15373  3b9a		       4c 5e 5b 	      jmp	.__1Up_Mush_2
  15374  3b9d
  15375  3b9d				   .
  15376  3b9d							; 
  15377  3b9d
  15378  3b9d				   .__1Up_SFX_B3
  15379  3b9d							; __1Up_SFX_B3
  15380  3b9d
  15381  3b9d				   .
  15382  3b9d							; 
  15383  3b9d
  15384  3b9d				   .L0924		;  y  =  y  -	2  :  u  =  u  +  1
  15385  3b9d
  15386  3b9d		       a5 ec		      LDA	y
  15387  3b9f		       38		      SEC
  15388  3ba0		       e9 02		      SBC	#2
  15389  3ba2		       85 ec		      STA	y
  15390  3ba4		       e6 e8		      INC	u
  15391  3ba6				   .
  15392  3ba6							; 
  15393  3ba6
  15394  3ba6				   .L0925		;  if u  =  4 then u  =  0  :	y  =  7
  15395  3ba6
  15396  3ba6		       a5 e8		      LDA	u
  15397  3ba8		       c9 04		      CMP	#4
  15398  3baa		       d0 08		      BNE	.skipL0925
  15399  3bac				   .condpart488
  15400  3bac		       a9 00		      LDA	#0
  15401  3bae		       85 e8		      STA	u
  15402  3bb0		       a9 07		      LDA	#7
  15403  3bb2		       85 ec		      STA	y
  15404  3bb4				   .skipL0925
  15405  3bb4				   .
  15406  3bb4							; 
  15407  3bb4
  15408  3bb4				   .L0926		;  AUDV0  =  8
  15409  3bb4
  15410  3bb4		       a9 08		      LDA	#8
  15411  3bb6		       85 19		      STA	AUDV0
  15412  3bb8				   .L0927		;  AUDC0  =  4
  15413  3bb8
  15414  3bb8		       a9 04		      LDA	#4
  15415  3bba		       85 15		      STA	AUDC0
  15416  3bbc				   .L0928		;  AUDF0  =  y
  15417  3bbc
  15418  3bbc		       a5 ec		      LDA	y
  15419  3bbe		       85 17		      STA	AUDF0
  15420  3bc0				   .L0929		;  AUDV1  =  0
  15421  3bc0
  15422  3bc0		       a9 00		      LDA	#0
  15423  3bc2		       85 1a		      STA	AUDV1
  15424  3bc4				   .
  15425  3bc4							; 
  15426  3bc4
  15427  3bc4				   .L0930		;  return thisbank
  15428  3bc4
  15429  3bc4		       60		      RTS
  15430  3bc5				   .
  15431  3bc5							; 
  15432  3bc5
  15433  3bc5				   .
  15434  3bc5							; 
  15435  3bc5
  15436  3bc5				   .
  15437  3bc5							; 
  15438  3bc5
  15439  3bc5				   .
  15440  3bc5							; 
  15441  3bc5
  15442  3bc5				   .
  15443  3bc5							; 
  15444  3bc5
  15445  3bc5				   .
  15446  3bc5							; 
  15447  3bc5
  15448  3bc5				   .
  15449  3bc5							; 
  15450  3bc5
  15451  3bc5				   .
  15452  3bc5							; 
  15453  3bc5
  15454  3bc5				   .__Star_Power_End
  15455  3bc5							; __Star_Power_End
  15456  3bc5
  15457  3bc5				   .
  15458  3bc5							; 
  15459  3bc5
  15460  3bc5				   .L0931		;  _Star_Invincibility_Timer  =  0  :	_Level_Timer  =  0
  15461  3bc5
  15462  3bc5		       a9 00		      LDA	#0
  15463  3bc7		       85 de		      STA	_Star_Invincibility_Timer
  15464  3bc9		       85 d8		      STA	_Level_Timer
  15465  3bcb				   .
  15466  3bcb							; 
  15467  3bcb
  15468  3bcb				   .L0932		;  if _Level  =  1  ||  _Level  =  3 then gosub __OW_Music bank7
  15469  3bcb
  15470  3bcb		       a5 ea		      LDA	_Level
  15471  3bcd		       c9 01		      CMP	#1
  15472  3bcf		       d0 03		      BNE	.skipL0932
  15473  3bd1				   .condpart489
  15474  3bd1		       4c da 5b 	      jmp	.condpart490
  15475  3bd4				   .skipL0932
  15476  3bd4		       a5 ea		      LDA	_Level
  15477  3bd6		       c9 03		      CMP	#3
  15478  3bd8		       d0 18		      BNE	.skip132OR
  15479  3bda				   .condpart490
  15480  3bda		       85 ee		      sta	temp7
  15481  3bdc		       a9 5b		      lda	#>(ret_point61-1)
  15482  3bde		       48		      pha
  15483  3bdf		       a9 f1		      lda	#<(ret_point61-1)
  15484  3be1		       48		      pha
  15485  3be2		       a9 d0		      lda	#>(.__OW_Music-1)
  15486  3be4		       48		      pha
  15487  3be5		       a9 b9		      lda	#<(.__OW_Music-1)
  15488  3be7		       48		      pha
  15489  3be8		       a5 ee		      lda	temp7
  15490  3bea		       48		      pha
  15491  3beb		       8a		      txa
  15492  3bec		       48		      pha
  15493  3bed		       a2 07		      ldx	#7
  15494  3bef		       4c eb ff 	      jmp	BS_jsr
  15495  3bf2				   ret_point61
  15496  3bf2				   .skip132OR
  15497  3bf2				   .
  15498  3bf2							; 
  15499  3bf2
  15500  3bf2				   .L0933		;  if _Level  =  2  ||  _Level  =  4 then gosub __UW_Music bank7
  15501  3bf2
  15502  3bf2		       a5 ea		      LDA	_Level
  15503  3bf4		       c9 02		      CMP	#2
  15504  3bf6		       d0 03		      BNE	.skipL0933
  15505  3bf8				   .condpart491
  15506  3bf8		       4c 01 5c 	      jmp	.condpart492
  15507  3bfb				   .skipL0933
  15508  3bfb		       a5 ea		      LDA	_Level
  15509  3bfd		       c9 04		      CMP	#4
  15510  3bff		       d0 18		      BNE	.skip133OR
  15511  3c01				   .condpart492
  15512  3c01		       85 ee		      sta	temp7
  15513  3c03		       a9 5c		      lda	#>(ret_point62-1)
  15514  3c05		       48		      pha
  15515  3c06		       a9 18		      lda	#<(ret_point62-1)
  15516  3c08		       48		      pha
  15517  3c09		       a9 da		      lda	#>(.__UW_Music-1)
  15518  3c0b		       48		      pha
  15519  3c0c		       a9 c2		      lda	#<(.__UW_Music-1)
  15520  3c0e		       48		      pha
  15521  3c0f		       a5 ee		      lda	temp7
  15522  3c11		       48		      pha
  15523  3c12		       8a		      txa
  15524  3c13		       48		      pha
  15525  3c14		       a2 07		      ldx	#7
  15526  3c16		       4c eb ff 	      jmp	BS_jsr
  15527  3c19				   ret_point62
  15528  3c19				   .skip133OR
  15529  3c19				   .
  15530  3c19							; 
  15531  3c19
  15532  3c19				   .L0934		;  return thisbank
  15533  3c19
  15534  3c19		       60		      RTS
  15535  3c1a				   .
  15536  3c1a							; 
  15537  3c1a
  15538  3c1a				   .
  15539  3c1a							; 
  15540  3c1a
  15541  3c1a				   .
  15542  3c1a							; 
  15543  3c1a
  15544  3c1a				   .
  15545  3c1a							; 
  15546  3c1a
  15547  3c1a				   .
  15548  3c1a							; 
  15549  3c1a
  15550  3c1a				   .
  15551  3c1a							; 
  15552  3c1a
  15553  3c1a				   .
  15554  3c1a							; 
  15555  3c1a
  15556  3c1a				   .
  15557  3c1a							; 
  15558  3c1a
  15559  3c1a				   .__Enemy_Collision_Routine
  15560  3c1a							; __Enemy_Collision_Routine
  15561  3c1a
  15562  3c1a				   .
  15563  3c1a							; 
  15564  3c1a
  15565  3c1a				   .
  15566  3c1a							; 
  15567  3c1a
  15568  3c1a				   .
  15569  3c1a							; 
  15570  3c1a
  15571  3c1a				   .
  15572  3c1a							; 
  15573  3c1a
  15574  3c1a				   .L0935		;  if collision(ball,player1)	&&  !_Bit4_Enemy_Dead_Flag{4} then goto __Enemy_Hit_By_Fireball
  15575  3c1a
  15576  3c1a		       24 03		      bit	CXP1FB
  15577  3c1c		       50 09		      BVC	.skipL0935
  15578  3c1e				   .condpart493
  15579  3c1e		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
  15580  3c20		       29 10		      AND	#16
  15581  3c22		       d0 03		      BNE	.skip493then
  15582  3c24				   .condpart494
  15583  3c24		       4c 66 54 	      jmp	.__Enemy_Hit_By_Fireball
  15584  3c27
  15585  3c27				   .skip493then
  15586  3c27				   .skipL0935
  15587  3c27				   .
  15588  3c27							; 
  15589  3c27
  15590  3c27				   .
  15591  3c27							; 
  15592  3c27
  15593  3c27				   .
  15594  3c27							; 
  15595  3c27
  15596  3c27				   .
  15597  3c27							; 
  15598  3c27
  15599  3c27				   .
  15600  3c27							; 
  15601  3c27
  15602  3c27				   .
  15603  3c27							; 
  15604  3c27
  15605  3c27				   .L0936		;  if _Moving_Shell_X_Coordinate  >  0  &&  _Moving_Shell_Y_Coordinate  >  0 then goto __Moving_Shell_Collision
  15606  3c27
  15607  3c27		       a9 00		      LDA	#0
  15608  3c29		       c5 e6		      CMP	_Moving_Shell_X_Coordinate
  15609  3c2b		       b0 09		      BCS	.skipL0936
  15610  3c2d				   .condpart495
  15611  3c2d		       a9 00		      LDA	#0
  15612  3c2f		       c5 e7		      CMP	_Moving_Shell_Y_Coordinate
  15613  3c31		       b0 03		      BCS	.skip495then
  15614  3c33				   .condpart496
  15615  3c33		       4c 51 5d 	      jmp	.__Moving_Shell_Collision
  15616  3c36
  15617  3c36				   .skip495then
  15618  3c36				   .skipL0936
  15619  3c36				   .
  15620  3c36							; 
  15621  3c36
  15622  3c36				   .__Enemy_Coll_Rout_2
  15623  3c36							; __Enemy_Coll_Rout_2
  15624  3c36
  15625  3c36				   .
  15626  3c36							; 
  15627  3c36
  15628  3c36				   .L0937		;  if !collision(player0,player1) then goto __Draw
  15629  3c36
  15630  3c36		       24 07		      bit	CXPPMM
  15631  3c38		       30 03		      BMI	.skipL0937
  15632  3c3a				   .condpart497
  15633  3c3a		       4c 00 50 	      jmp	.__Draw
  15634  3c3d
  15635  3c3d				   .skipL0937
  15636  3c3d				   .
  15637  3c3d							; 
  15638  3c3d
  15639  3c3d				   .L0938		;  if _Enemy_Type  =  _Kinetic_Platforms then goto __Convert_Platform
  15640  3c3d
  15641  3c3d		       a5 dc		      LDA	_Enemy_Type
  15642  3c3f		       c9 1c		      CMP	#_Kinetic_Platforms
  15643  3c41		       d0 03		      BNE	.skipL0938
  15644  3c43				   .condpart498
  15645  3c43		       4c a7 5d 	      jmp	.__Convert_Platform
  15646  3c46
  15647  3c46				   .skipL0938
  15648  3c46				   .
  15649  3c46							; 
  15650  3c46
  15651  3c46				   .L0939		;  if _Enemy_Type  =  _Trampoline then goto __Checkpoint_L3
  15652  3c46
  15653  3c46		       a5 dc		      LDA	_Enemy_Type
  15654  3c48		       c9 26		      CMP	#_Trampoline
  15655  3c4a		       d0 03		      BNE	.skipL0939
  15656  3c4c				   .condpart499
  15657  3c4c		       4c 2b 58 	      jmp	.__Checkpoint_L3
  15658  3c4f
  15659  3c4f				   .skipL0939
  15660  3c4f				   .
  15661  3c4f							; 
  15662  3c4f
  15663  3c4f				   .L0940		;  if _Enemy_Type  >=	_Bowser_Jr then goto __Mario_BJr_Collision bank4
  15664  3c4f
  15665  3c4f		       a5 dc		      LDA	_Enemy_Type
  15666  3c51		       c9 40		      CMP	#_Bowser_Jr
  15667  3c53		       90 12		      BCC	.skipL0940
  15668  3c55				   .condpart500
  15669  3c55		       85 ee		      sta	temp7
  15670  3c57		       a9 77		      lda	#>(.__Mario_BJr_Collision-1)
  15671  3c59		       48		      pha
  15672  3c5a		       a9 cd		      lda	#<(.__Mario_BJr_Collision-1)
  15673  3c5c		       48		      pha
  15674  3c5d		       a5 ee		      lda	temp7
  15675  3c5f		       48		      pha
  15676  3c60		       8a		      txa
  15677  3c61		       48		      pha
  15678  3c62		       a2 04		      ldx	#4
  15679  3c64		       4c eb ff 	      jmp	BS_jsr
  15680  3c67				   .skipL0940
  15681  3c67				   .
  15682  3c67							; 
  15683  3c67
  15684  3c67				   .L0941		;  if _Bit4_Enemy_Dead_Flag{4} then goto __Draw
  15685  3c67
  15686  3c67		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
  15687  3c69		       29 10		      AND	#16
  15688  3c6b		       f0 03		      BEQ	.skipL0941
  15689  3c6d				   .condpart501
  15690  3c6d		       4c 00 50 	      jmp	.__Draw
  15691  3c70
  15692  3c70				   .skipL0941
  15693  3c70				   .
  15694  3c70							; 
  15695  3c70
  15696  3c70				   .
  15697  3c70							; 
  15698  3c70
  15699  3c70				   .
  15700  3c70							; 
  15701  3c70
  15702  3c70				   .
  15703  3c70							; 
  15704  3c70
  15705  3c70				   .L0942		;  if _Enemy_Type  =  _Flagpole then goto __Level_Completed
  15706  3c70
  15707  3c70		       a5 dc		      LDA	_Enemy_Type
  15708  3c72		       c9 14		      CMP	#_Flagpole
  15709  3c74		       d0 03		      BNE	.skipL0942
  15710  3c76				   .condpart502
  15711  3c76		       4c fe 58 	      jmp	.__Level_Completed
  15712  3c79
  15713  3c79				   .skipL0942
  15714  3c79				   .
  15715  3c79							; 
  15716  3c79
  15717  3c79				   .L0943		;  if _Enemy_Type  =  _Silver_Coin then goto __8coins
  15718  3c79
  15719  3c79		       a5 dc		      LDA	_Enemy_Type
  15720  3c7b		       c9 16		      CMP	#_Silver_Coin
  15721  3c7d		       d0 03		      BNE	.skipL0943
  15722  3c7f				   .condpart503
  15723  3c7f		       4c b6 5a 	      jmp	.__8coins
  15724  3c82
  15725  3c82				   .skipL0943
  15726  3c82				   .
  15727  3c82							; 
  15728  3c82
  15729  3c82				   .L0944		;  if _Enemy_Type  =  _Starman then goto __Star_Power
  15730  3c82
  15731  3c82		       a5 dc		      LDA	_Enemy_Type
  15732  3c84		       c9 18		      CMP	#_Starman
  15733  3c86		       d0 03		      BNE	.skipL0944
  15734  3c88				   .condpart504
  15735  3c88		       4c f4 5a 	      jmp	.__Star_Power
  15736  3c8b
  15737  3c8b				   .skipL0944
  15738  3c8b				   .
  15739  3c8b							; 
  15740  3c8b
  15741  3c8b				   .L0945		;  if _Enemy_Type  =  _1up_Mushroom then goto __1Up_Mushroom
  15742  3c8b
  15743  3c8b		       a5 dc		      LDA	_Enemy_Type
  15744  3c8d		       c9 1a		      CMP	#_1up_Mushroom
  15745  3c8f		       d0 03		      BNE	.skipL0945
  15746  3c91				   .condpart505
  15747  3c91		       4c 3e 5b 	      jmp	.__1Up_Mushroom
  15748  3c94
  15749  3c94				   .skipL0945
  15750  3c94				   .
  15751  3c94							; 
  15752  3c94
  15753  3c94				   .L0946		;  if _Star_Invincibility_Timer  >  0 then goto __Enemy_Hit
  15754  3c94
  15755  3c94		       a9 00		      LDA	#0
  15756  3c96		       c5 de		      CMP	_Star_Invincibility_Timer
  15757  3c98		       b0 03		      BCS	.skipL0946
  15758  3c9a				   .condpart506
  15759  3c9a		       4c 40 53 	      jmp	.__Enemy_Hit
  15760  3c9d
  15761  3c9d				   .skipL0946
  15762  3c9d				   .
  15763  3c9d							; 
  15764  3c9d
  15765  3c9d				   .L0947		;  if _Enemy_Type  =  _Spiney then goto __Mario_Hit_01 bank1
  15766  3c9d
  15767  3c9d		       a5 dc		      LDA	_Enemy_Type
  15768  3c9f		       c9 06		      CMP	#_Spiney
  15769  3ca1		       d0 12		      BNE	.skipL0947
  15770  3ca3				   .condpart507
  15771  3ca3		       85 ee		      sta	temp7
  15772  3ca5		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  15773  3ca7		       48		      pha
  15774  3ca8		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  15775  3caa		       48		      pha
  15776  3cab		       a5 ee		      lda	temp7
  15777  3cad		       48		      pha
  15778  3cae		       8a		      txa
  15779  3caf		       48		      pha
  15780  3cb0		       a2 01		      ldx	#1
  15781  3cb2		       4c eb ff 	      jmp	BS_jsr
  15782  3cb5				   .skipL0947
  15783  3cb5				   .
  15784  3cb5							; 
  15785  3cb5
  15786  3cb5				   .L0948		;  if _Enemy_Type  =  _Spiney_Ball then goto __Mario_Hit_01 bank1
  15787  3cb5
  15788  3cb5		       a5 dc		      LDA	_Enemy_Type
  15789  3cb7		       c9 10		      CMP	#_Spiney_Ball
  15790  3cb9		       d0 12		      BNE	.skipL0948
  15791  3cbb				   .condpart508
  15792  3cbb		       85 ee		      sta	temp7
  15793  3cbd		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  15794  3cbf		       48		      pha
  15795  3cc0		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  15796  3cc2		       48		      pha
  15797  3cc3		       a5 ee		      lda	temp7
  15798  3cc5		       48		      pha
  15799  3cc6		       8a		      txa
  15800  3cc7		       48		      pha
  15801  3cc8		       a2 01		      ldx	#1
  15802  3cca		       4c eb ff 	      jmp	BS_jsr
  15803  3ccd				   .skipL0948
  15804  3ccd				   .
  15805  3ccd							; 
  15806  3ccd
  15807  3ccd				   .L0949		;  if _Enemy_Type  =  _Fireball_Enemy then goto __Mario_Hit_01 bank1
  15808  3ccd
  15809  3ccd		       a5 dc		      LDA	_Enemy_Type
  15810  3ccf		       c9 12		      CMP	#_Fireball_Enemy
  15811  3cd1		       d0 12		      BNE	.skipL0949
  15812  3cd3				   .condpart509
  15813  3cd3		       85 ee		      sta	temp7
  15814  3cd5		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  15815  3cd7		       48		      pha
  15816  3cd8		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  15817  3cda		       48		      pha
  15818  3cdb		       a5 ee		      lda	temp7
  15819  3cdd		       48		      pha
  15820  3cde		       8a		      txa
  15821  3cdf		       48		      pha
  15822  3ce0		       a2 01		      ldx	#1
  15823  3ce2		       4c eb ff 	      jmp	BS_jsr
  15824  3ce5				   .skipL0949
  15825  3ce5				   .
  15826  3ce5							; 
  15827  3ce5
  15828  3ce5				   .L0950		;  if _Enemy_Type  =  _Pirahna_Plant  ||  _Enemy_Type	=  _Two_Spineys then goto __Mario_Hit_01 bank1
  15829  3ce5
  15830  3ce5		       a5 dc		      LDA	_Enemy_Type
  15831  3ce7		       c9 1e		      CMP	#_Pirahna_Plant
  15832  3ce9		       d0 03		      BNE	.skipL0950
  15833  3ceb				   .condpart510
  15834  3ceb		       4c f4 5c 	      jmp	.condpart511
  15835  3cee				   .skipL0950
  15836  3cee		       a5 dc		      LDA	_Enemy_Type
  15837  3cf0		       c9 2e		      CMP	#_Two_Spineys
  15838  3cf2		       d0 12		      BNE	.skip136OR
  15839  3cf4				   .condpart511
  15840  3cf4		       85 ee		      sta	temp7
  15841  3cf6		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  15842  3cf8		       48		      pha
  15843  3cf9		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  15844  3cfb		       48		      pha
  15845  3cfc		       a5 ee		      lda	temp7
  15846  3cfe		       48		      pha
  15847  3cff		       8a		      txa
  15848  3d00		       48		      pha
  15849  3d01		       a2 01		      ldx	#1
  15850  3d03		       4c eb ff 	      jmp	BS_jsr
  15851  3d06				   .skip136OR
  15852  3d06				   .
  15853  3d06							; 
  15854  3d06
  15855  3d06				   .L0951		;  if _Enemy_Type  =  _Thwomp	||  _Enemy_Type  =  _Two_Thwomps then goto __Mario_Hit_01 bank1
  15856  3d06
  15857  3d06		       a5 dc		      LDA	_Enemy_Type
  15858  3d08		       c9 28		      CMP	#_Thwomp
  15859  3d0a		       d0 03		      BNE	.skipL0951
  15860  3d0c				   .condpart512
  15861  3d0c		       4c 15 5d 	      jmp	.condpart513
  15862  3d0f				   .skipL0951
  15863  3d0f		       a5 dc		      LDA	_Enemy_Type
  15864  3d11		       c9 2c		      CMP	#_Two_Thwomps
  15865  3d13		       d0 12		      BNE	.skip137OR
  15866  3d15				   .condpart513
  15867  3d15		       85 ee		      sta	temp7
  15868  3d17		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  15869  3d19		       48		      pha
  15870  3d1a		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  15871  3d1c		       48		      pha
  15872  3d1d		       a5 ee		      lda	temp7
  15873  3d1f		       48		      pha
  15874  3d20		       8a		      txa
  15875  3d21		       48		      pha
  15876  3d22		       a2 01		      ldx	#1
  15877  3d24		       4c eb ff 	      jmp	BS_jsr
  15878  3d27				   .skip137OR
  15879  3d27				   .
  15880  3d27							; 
  15881  3d27
  15882  3d27				   .L0952		;  if _Enemy_Type  >=	_Flagpole then goto __Enemy_Hit
  15883  3d27
  15884  3d27		       a5 dc		      LDA	_Enemy_Type
  15885  3d29		       c9 14		      CMP	#_Flagpole
  15886  3d2b		       90 03		      BCC	.skipL0952
  15887  3d2d				   .condpart514
  15888  3d2d		       4c 40 53 	      jmp	.__Enemy_Hit
  15889  3d30
  15890  3d30				   .skipL0952
  15891  3d30				   .
  15892  3d30							; 
  15893  3d30
  15894  3d30				   .L0953		;  if player0y  <  player1y  &&  !_Bit4_Enemy_Dead_Flag{4} then goto __Enemy_Hit
  15895  3d30
  15896  3d30		       a5 85		      LDA	player0y
  15897  3d32		       c5 86		      CMP	player1y
  15898  3d34		       b0 09		      BCS	.skipL0953
  15899  3d36				   .condpart515
  15900  3d36		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
  15901  3d38		       29 10		      AND	#16
  15902  3d3a		       d0 03		      BNE	.skip515then
  15903  3d3c				   .condpart516
  15904  3d3c		       4c 40 53 	      jmp	.__Enemy_Hit
  15905  3d3f
  15906  3d3f				   .skip515then
  15907  3d3f				   .skipL0953
  15908  3d3f				   .
  15909  3d3f							; 
  15910  3d3f
  15911  3d3f				   .L0954		;  goto __Mario_Hit_01 bank1
  15912  3d3f
  15913  3d3f		       85 ee		      sta	temp7
  15914  3d41		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  15915  3d43		       48		      pha
  15916  3d44		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  15917  3d46		       48		      pha
  15918  3d47		       a5 ee		      lda	temp7
  15919  3d49		       48		      pha
  15920  3d4a		       8a		      txa
  15921  3d4b		       48		      pha
  15922  3d4c		       a2 01		      ldx	#1
  15923  3d4e		       4c eb ff 	      jmp	BS_jsr
  15924  3d51				   .
  15925  3d51							; 
  15926  3d51
  15927  3d51				   .
  15928  3d51							; 
  15929  3d51
  15930  3d51				   .
  15931  3d51							; 
  15932  3d51
  15933  3d51				   .
  15934  3d51							; 
  15935  3d51
  15936  3d51				   .
  15937  3d51							; 
  15938  3d51
  15939  3d51				   .
  15940  3d51							; 
  15941  3d51
  15942  3d51				   .
  15943  3d51							; 
  15944  3d51
  15945  3d51				   .
  15946  3d51							; 
  15947  3d51
  15948  3d51				   .__Moving_Shell_Collision
  15949  3d51							; __Moving_Shell_Collision
  15950  3d51
  15951  3d51				   .
  15952  3d51							; 
  15953  3d51
  15954  3d51				   .L0955		;  x  =   ( player0x  -  13 )	/ 4  :	y  =   ( player0y )  / 8
  15955  3d51
  15956  3d51							; complex statement detected
  15957  3d51		       a5 80		      LDA	player0x
  15958  3d53		       38		      SEC
  15959  3d54		       e9 0d		      SBC	#13
  15960  3d56		       4a		      lsr
  15961  3d57		       4a		      lsr
  15962  3d58		       85 eb		      STA	x
  15963  3d5a							; complex statement detected
  15964  3d5a		       a5 85		      LDA	player0y
  15965  3d5c		       4a		      lsr
  15966  3d5d		       4a		      lsr
  15967  3d5e		       4a		      lsr
  15968  3d5f		       85 ec		      STA	y
  15969  3d61				   .
  15970  3d61							; 
  15971  3d61
  15972  3d61				   .L0956		;  if _Moving_Shell_X_Coordinate  =  x  &&  _Moving_Shell_Y_Coordinate  =  y then goto __Mario_Hit_01 bank1
  15973  3d61
  15974  3d61		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
  15975  3d63		       c5 eb		      CMP	x
  15976  3d65		       d0 18		      BNE	.skipL0956
  15977  3d67				   .condpart517
  15978  3d67		       a5 e7		      LDA	_Moving_Shell_Y_Coordinate
  15979  3d69		       c5 ec		      CMP	y
  15980  3d6b		       d0 12		      BNE	.skip517then
  15981  3d6d				   .condpart518
  15982  3d6d		       85 ee		      sta	temp7
  15983  3d6f		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  15984  3d71		       48		      pha
  15985  3d72		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  15986  3d74		       48		      pha
  15987  3d75		       a5 ee		      lda	temp7
  15988  3d77		       48		      pha
  15989  3d78		       8a		      txa
  15990  3d79		       48		      pha
  15991  3d7a		       a2 01		      ldx	#1
  15992  3d7c		       4c eb ff 	      jmp	BS_jsr
  15993  3d7f				   .skip517then
  15994  3d7f				   .skipL0956
  15995  3d7f				   .
  15996  3d7f							; 
  15997  3d7f
  15998  3d7f				   .L0957		;  z  =  _Moving_Shell_X_Coordinate  +  1
  15999  3d7f
  16000  3d7f		       a5 e6		      LDA	_Moving_Shell_X_Coordinate
  16001  3d81		       18		      CLC
  16002  3d82		       69 01		      ADC	#1
  16003  3d84		       85 ed		      STA	z
  16004  3d86				   .
  16005  3d86							; 
  16006  3d86
  16007  3d86				   .L0958		;  if z  =  x	&&  _Moving_Shell_Y_Coordinate	=  y then goto __Mario_Hit_01 bank1
  16008  3d86
  16009  3d86		       a5 ed		      LDA	z
  16010  3d88		       c5 eb		      CMP	x
  16011  3d8a		       d0 18		      BNE	.skipL0958
  16012  3d8c				   .condpart519
  16013  3d8c		       a5 e7		      LDA	_Moving_Shell_Y_Coordinate
  16014  3d8e		       c5 ec		      CMP	y
  16015  3d90		       d0 12		      BNE	.skip519then
  16016  3d92				   .condpart520
  16017  3d92		       85 ee		      sta	temp7
  16018  3d94		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  16019  3d96		       48		      pha
  16020  3d97		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  16021  3d99		       48		      pha
  16022  3d9a		       a5 ee		      lda	temp7
  16023  3d9c		       48		      pha
  16024  3d9d		       8a		      txa
  16025  3d9e		       48		      pha
  16026  3d9f		       a2 01		      ldx	#1
  16027  3da1		       4c eb ff 	      jmp	BS_jsr
  16028  3da4				   .skip519then
  16029  3da4				   .skipL0958
  16030  3da4				   .
  16031  3da4							; 
  16032  3da4
  16033  3da4				   .L0959		;  goto __Enemy_Coll_Rout_2
  16034  3da4
  16035  3da4		       4c 36 5c 	      jmp	.__Enemy_Coll_Rout_2
  16036  3da7
  16037  3da7				   .
  16038  3da7							; 
  16039  3da7
  16040  3da7				   .
  16041  3da7							; 
  16042  3da7
  16043  3da7				   .
  16044  3da7							; 
  16045  3da7
  16046  3da7				   .
  16047  3da7							; 
  16048  3da7
  16049  3da7				   .
  16050  3da7							; 
  16051  3da7
  16052  3da7				   .
  16053  3da7							; 
  16054  3da7
  16055  3da7				   .
  16056  3da7							; 
  16057  3da7
  16058  3da7				   .
  16059  3da7							; 
  16060  3da7
  16061  3da7				   .__Convert_Platform
  16062  3da7							; __Convert_Platform
  16063  3da7
  16064  3da7				   .
  16065  3da7							; 
  16066  3da7
  16067  3da7				   .L0960		;  x  =   ( player1x  -  14 )	/ 4  :	y  =  player1y / 8
  16068  3da7
  16069  3da7							; complex statement detected
  16070  3da7		       a5 81		      LDA	player1x
  16071  3da9		       38		      SEC
  16072  3daa		       e9 0e		      SBC	#14
  16073  3dac		       4a		      lsr
  16074  3dad		       4a		      lsr
  16075  3dae		       85 eb		      STA	x
  16076  3db0		       a5 86		      LDA	player1y
  16077  3db2		       4a		      lsr
  16078  3db3		       4a		      lsr
  16079  3db4		       4a		      lsr
  16080  3db5		       85 ec		      STA	y
  16081  3db7				   .
  16082  3db7							; 
  16083  3db7
  16084  3db7				   .L0961		;  _Enemy_Type  =  _Goomba  :	player1y  =  150  :  player1x  =  0
  16085  3db7
  16086  3db7		       a9 00		      LDA	#_Goomba
  16087  3db9		       85 dc		      STA	_Enemy_Type
  16088  3dbb		       a9 96		      LDA	#150
  16089  3dbd		       85 86		      STA	player1y
  16090  3dbf		       a9 00		      LDA	#0
  16091  3dc1		       85 81		      STA	player1x
  16092  3dc3				   .
  16093  3dc3							; 
  16094  3dc3
  16095  3dc3				   .L0962		;  gosub __Render_Screen_B3
  16096  3dc3
  16097  3dc3		       20 0d 5e 	      jsr	.__Render_Screen_B3
  16098  3dc6
  16099  3dc6				   .
  16100  3dc6							; 
  16101  3dc6
  16102  3dc6				   .L0963		;  if _Bit7_2nd_Quest{7} then z  =  x	+  3 else z  =	x  +  7
  16103  3dc6
  16104  3dc6		       24 d9		      BIT	_Bit7_2nd_Quest
  16105  3dc8		       10 0a		      BPL	.skipL0963
  16106  3dca				   .condpart521
  16107  3dca		       a5 eb		      LDA	x
  16108  3dcc		       18		      CLC
  16109  3dcd		       69 03		      ADC	#3
  16110  3dcf		       85 ed		      STA	z
  16111  3dd1		       4c db 5d 	      jmp	.skipelse71
  16112  3dd4				   .skipL0963
  16113  3dd4		       a5 eb		      LDA	x
  16114  3dd6		       18		      CLC
  16115  3dd7		       69 07		      ADC	#7
  16116  3dd9		       85 ed		      STA	z
  16117  3ddb				   .skipelse71
  16118  3ddb				   .
  16119  3ddb							; 
  16120  3ddb
  16121  3ddb				   .L0964		;  pfhline x y z on
  16122  3ddb
  16123  3ddb		       a2 00		      LDX	#0
  16124  3ddd		       a5 ed		      LDA	z
  16125  3ddf		       85 9e		      STA	temp3
  16126  3de1		       a4 ec		      LDY	y
  16127  3de3		       a5 eb		      LDA	x
  16128  3de5		       85 ee		      sta	temp7
  16129  3de7		       a9 5d		      lda	#>(ret_point63-1)
  16130  3de9		       48		      pha
  16131  3dea		       a9 fc		      lda	#<(ret_point63-1)
  16132  3dec		       48		      pha
  16133  3ded		       a9 f2		      lda	#>(pfhline-1)
  16134  3def		       48		      pha
  16135  3df0		       a9 ea		      lda	#<(pfhline-1)
  16136  3df2		       48		      pha
  16137  3df3		       a5 ee		      lda	temp7
  16138  3df5		       48		      pha
  16139  3df6		       8a		      txa
  16140  3df7		       48		      pha
  16141  3df8		       a2 08		      ldx	#8
  16142  3dfa		       4c eb ff 	      jmp	BS_jsr
  16143  3dfd				   ret_point63
  16144  3dfd				   .
  16145  3dfd							; 
  16146  3dfd
  16147  3dfd				   .L0965		;  player0y  =  player0y  -  _Momentum_Up_Down  -  4
  16148  3dfd
  16149  3dfd							; complex statement detected
  16150  3dfd		       a5 85		      LDA	player0y
  16151  3dff		       38		      SEC
  16152  3e00		       e5 e1		      SBC	_Momentum_Up_Down
  16153  3e02		       38		      SEC
  16154  3e03		       e9 04		      SBC	#4
  16155  3e05		       85 85		      STA	player0y
  16156  3e07				   .
  16157  3e07							; 
  16158  3e07
  16159  3e07				   .L0966		;  gosub __Render_Screen_B3
  16160  3e07
  16161  3e07		       20 0d 5e 	      jsr	.__Render_Screen_B3
  16162  3e0a
  16163  3e0a				   .
  16164  3e0a							; 
  16165  3e0a
  16166  3e0a				   .L0967		;  goto __Draw
  16167  3e0a
  16168  3e0a		       4c 00 50 	      jmp	.__Draw
  16169  3e0d
  16170  3e0d				   .
  16171  3e0d							; 
  16172  3e0d
  16173  3e0d				   .
  16174  3e0d							; 
  16175  3e0d
  16176  3e0d				   .
  16177  3e0d							; 
  16178  3e0d
  16179  3e0d				   .
  16180  3e0d							; 
  16181  3e0d
  16182  3e0d				   .
  16183  3e0d							; 
  16184  3e0d
  16185  3e0d				   .
  16186  3e0d							; 
  16187  3e0d
  16188  3e0d				   .
  16189  3e0d							; 
  16190  3e0d
  16191  3e0d				   .
  16192  3e0d							; 
  16193  3e0d
  16194  3e0d				   .
  16195  3e0d							; 
  16196  3e0d
  16197  3e0d				   .
  16198  3e0d							; 
  16199  3e0d
  16200  3e0d				   .
  16201  3e0d							; 
  16202  3e0d
  16203  3e0d				   .__Render_Screen_B3
  16204  3e0d							; __Render_Screen_B3
  16205  3e0d
  16206  3e0d				   .
  16207  3e0d							; 
  16208  3e0d
  16209  3e0d				   .L0968		;  if _Level  =  1  ||  _Level  =  3 then COLUPF  =  $32 else COLUPF  =  $04
  16210  3e0d
  16211  3e0d		       a5 ea		      LDA	_Level
  16212  3e0f		       c9 01		      CMP	#1
  16213  3e11		       d0 03		      BNE	.skipL0968
  16214  3e13				   .condpart522
  16215  3e13		       4c 1c 5e 	      jmp	.condpart523
  16216  3e16				   .skipL0968
  16217  3e16		       a5 ea		      LDA	_Level
  16218  3e18		       c9 03		      CMP	#3
  16219  3e1a		       d0 07		      BNE	.skip141OR
  16220  3e1c				   .condpart523
  16221  3e1c		       a9 32		      LDA	#$32
  16222  3e1e		       85 08		      STA	COLUPF
  16223  3e20		       4c 27 5e 	      jmp	.skipelse72
  16224  3e23				   .skip141OR
  16225  3e23		       a9 04		      LDA	#$04
  16226  3e25		       85 08		      STA	COLUPF
  16227  3e27				   .skipelse72
  16228  3e27				   .
  16229  3e27							; 
  16230  3e27
  16231  3e27				   .L0969		;  if _Level  =  2 then COLUPF  =  $A4
  16232  3e27
  16233  3e27		       a5 ea		      LDA	_Level
  16234  3e29		       c9 02		      CMP	#2
  16235  3e2b		       d0 04		      BNE	.skipL0969
  16236  3e2d				   .condpart524
  16237  3e2d		       a9 a4		      LDA	#$A4
  16238  3e2f		       85 08		      STA	COLUPF
  16239  3e31				   .skipL0969
  16240  3e31				   .
  16241  3e31							; 
  16242  3e31
  16243  3e31				   .L0970		;  if _Enemy_Type  =  _Kinetic_Platforms  &&  !_Bit7_2nd_Quest{7} then NUSIZ1	=  $17	:  goto __Finish_Render_B3
  16244  3e31
  16245  3e31		       a5 dc		      LDA	_Enemy_Type
  16246  3e33		       c9 1c		      CMP	#_Kinetic_Platforms
  16247  3e35		       d0 0b		      BNE	.skipL0970
  16248  3e37				   .condpart525
  16249  3e37		       24 d9		      BIT	_Bit7_2nd_Quest
  16250  3e39		       30 07		      BMI	.skip525then
  16251  3e3b				   .condpart526
  16252  3e3b		       a9 17		      LDA	#$17
  16253  3e3d		       85 05		      STA	NUSIZ1
  16254  3e3f		       4c ac 5e 	      jmp	.__Finish_Render_B3
  16255  3e42
  16256  3e42				   .skip525then
  16257  3e42				   .skipL0970
  16258  3e42				   .
  16259  3e42							; 
  16260  3e42
  16261  3e42				   .L0971		;  if _Enemy_Type  =  _Kinetic_Platforms  &&  _Bit7_2nd_Quest{7} then NUSIZ1  =  $15  :  goto __Finish_Render_B3
  16262  3e42
  16263  3e42		       a5 dc		      LDA	_Enemy_Type
  16264  3e44		       c9 1c		      CMP	#_Kinetic_Platforms
  16265  3e46		       d0 0b		      BNE	.skipL0971
  16266  3e48				   .condpart527
  16267  3e48		       24 d9		      BIT	_Bit7_2nd_Quest
  16268  3e4a		       10 07		      BPL	.skip527then
  16269  3e4c				   .condpart528
  16270  3e4c		       a9 15		      LDA	#$15
  16271  3e4e		       85 05		      STA	NUSIZ1
  16272  3e50		       4c ac 5e 	      jmp	.__Finish_Render_B3
  16273  3e53
  16274  3e53				   .skip527then
  16275  3e53				   .skipL0971
  16276  3e53				   .
  16277  3e53							; 
  16278  3e53
  16279  3e53				   .L0972		;  if _Enemy_Type  =  _Thwomp	||  _Enemy_Type  =  _Bowser_Jr then NUSIZ1  =  $15  :  goto __Finish_Render_B3
  16280  3e53
  16281  3e53		       a5 dc		      LDA	_Enemy_Type
  16282  3e55		       c9 28		      CMP	#_Thwomp
  16283  3e57		       d0 03		      BNE	.skipL0972
  16284  3e59				   .condpart529
  16285  3e59		       4c 62 5e 	      jmp	.condpart530
  16286  3e5c				   .skipL0972
  16287  3e5c		       a5 dc		      LDA	_Enemy_Type
  16288  3e5e		       c9 40		      CMP	#_Bowser_Jr
  16289  3e60		       d0 07		      BNE	.skip144OR
  16290  3e62				   .condpart530
  16291  3e62		       a9 15		      LDA	#$15
  16292  3e64		       85 05		      STA	NUSIZ1
  16293  3e66		       4c ac 5e 	      jmp	.__Finish_Render_B3
  16294  3e69
  16295  3e69				   .skip144OR
  16296  3e69				   .
  16297  3e69							; 
  16298  3e69
  16299  3e69				   .L0973		;  if _Enemy_Type  =  _Bullet_Bill then NUSIZ1  =  $15  :  goto __Finish_Render_B3
  16300  3e69
  16301  3e69		       a5 dc		      LDA	_Enemy_Type
  16302  3e6b		       c9 0c		      CMP	#_Bullet_Bill
  16303  3e6d		       d0 07		      BNE	.skipL0973
  16304  3e6f				   .condpart531
  16305  3e6f		       a9 15		      LDA	#$15
  16306  3e71		       85 05		      STA	NUSIZ1
  16307  3e73		       4c ac 5e 	      jmp	.__Finish_Render_B3
  16308  3e76
  16309  3e76				   .skipL0973
  16310  3e76				   .
  16311  3e76							; 
  16312  3e76
  16313  3e76				   .L0974		;  if _Enemy_Type  =  _Two_Goombas  &&  player1x  <  122 then NUSIZ1  =  $11  :  goto __Finish_Render_B3
  16314  3e76
  16315  3e76		       a5 dc		      LDA	_Enemy_Type
  16316  3e78		       c9 2a		      CMP	#_Two_Goombas
  16317  3e7a		       d0 0d		      BNE	.skipL0974
  16318  3e7c				   .condpart532
  16319  3e7c		       a5 81		      LDA	player1x
  16320  3e7e		       c9 7a		      CMP	#122
  16321  3e80		       b0 07		      BCS	.skip532then
  16322  3e82				   .condpart533
  16323  3e82		       a9 11		      LDA	#$11
  16324  3e84		       85 05		      STA	NUSIZ1
  16325  3e86		       4c ac 5e 	      jmp	.__Finish_Render_B3
  16326  3e89
  16327  3e89				   .skip532then
  16328  3e89				   .skipL0974
  16329  3e89				   .
  16330  3e89							; 
  16331  3e89
  16332  3e89				   .L0975		;  if _Enemy_Type  =  _Two_Spineys  &&  player1x  <  122 then NUSIZ1  =  $11  :  goto __Finish_Render_B3
  16333  3e89
  16334  3e89		       a5 dc		      LDA	_Enemy_Type
  16335  3e8b		       c9 2e		      CMP	#_Two_Spineys
  16336  3e8d		       d0 0d		      BNE	.skipL0975
  16337  3e8f				   .condpart534
  16338  3e8f		       a5 81		      LDA	player1x
  16339  3e91		       c9 7a		      CMP	#122
  16340  3e93		       b0 07		      BCS	.skip534then
  16341  3e95				   .condpart535
  16342  3e95		       a9 11		      LDA	#$11
  16343  3e97		       85 05		      STA	NUSIZ1
  16344  3e99		       4c ac 5e 	      jmp	.__Finish_Render_B3
  16345  3e9c
  16346  3e9c				   .skip534then
  16347  3e9c				   .skipL0975
  16348  3e9c				   .
  16349  3e9c							; 
  16350  3e9c
  16351  3e9c				   .L0976		;  if _Enemy_Type  =  _Two_Thwomps  &&  player1x  <  106 then NUSIZ1  =  $12
  16352  3e9c
  16353  3e9c		       a5 dc		      LDA	_Enemy_Type
  16354  3e9e		       c9 2c		      CMP	#_Two_Thwomps
  16355  3ea0		       d0 0a		      BNE	.skipL0976
  16356  3ea2				   .condpart536
  16357  3ea2		       a5 81		      LDA	player1x
  16358  3ea4		       c9 6a		      CMP	#106
  16359  3ea6		       b0 04		      BCS	.skip536then
  16360  3ea8				   .condpart537
  16361  3ea8		       a9 12		      LDA	#$12
  16362  3eaa		       85 05		      STA	NUSIZ1
  16363  3eac				   .skip536then
  16364  3eac				   .skipL0976
  16365  3eac				   .
  16366  3eac							; 
  16367  3eac
  16368  3eac				   .__Finish_Render_B3
  16369  3eac							; __Finish_Render_B3
  16370  3eac
  16371  3eac				   .
  16372  3eac							; 
  16373  3eac
  16374  3eac				   .L0977		;  if _Bit0_Player_Facing_Direction{0} then REFP0  =  8 else REFP0  =	0
  16375  3eac
  16376  3eac		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  16377  3eae		       4a		      LSR
  16378  3eaf		       90 07		      BCC	.skipL0977
  16379  3eb1				   .condpart538
  16380  3eb1		       a9 08		      LDA	#8
  16381  3eb3		       85 0b		      STA	REFP0
  16382  3eb5		       4c bc 5e 	      jmp	.skipelse73
  16383  3eb8				   .skipL0977
  16384  3eb8		       a9 00		      LDA	#0
  16385  3eba		       85 0b		      STA	REFP0
  16386  3ebc				   .skipelse73
  16387  3ebc				   .
  16388  3ebc							; 
  16389  3ebc
  16390  3ebc				   .L0978		;  if _Bit3_Enemy_Direction{3} then REFP1  =  8 else REFP1  =	0
  16391  3ebc
  16392  3ebc		       a5 da		      LDA	_Bit3_Enemy_Direction
  16393  3ebe		       29 08		      AND	#8
  16394  3ec0		       f0 07		      BEQ	.skipL0978
  16395  3ec2				   .condpart539
  16396  3ec2		       a9 08		      LDA	#8
  16397  3ec4		       85 0c		      STA	REFP1
  16398  3ec6		       4c cd 5e 	      jmp	.skipelse74
  16399  3ec9				   .skipL0978
  16400  3ec9		       a9 00		      LDA	#0
  16401  3ecb		       85 0c		      STA	REFP1
  16402  3ecd				   .skipelse74
  16403  3ecd				   .
  16404  3ecd							; 
  16405  3ecd
  16406  3ecd				   .L0979		;  drawscreen
  16407  3ecd
  16408  3ecd		       85 ee		      sta	temp7
  16409  3ecf		       a9 5e		      lda	#>(ret_point64-1)
  16410  3ed1		       48		      pha
  16411  3ed2		       a9 e4		      lda	#<(ret_point64-1)
  16412  3ed4		       48		      pha
  16413  3ed5		       a9 f4		      lda	#>(drawscreen-1)
  16414  3ed7		       48		      pha
  16415  3ed8		       a9 37		      lda	#<(drawscreen-1)
  16416  3eda		       48		      pha
  16417  3edb		       a5 ee		      lda	temp7
  16418  3edd		       48		      pha
  16419  3ede		       8a		      txa
  16420  3edf		       48		      pha
  16421  3ee0		       a2 08		      ldx	#8
  16422  3ee2		       4c eb ff 	      jmp	BS_jsr
  16423  3ee5				   ret_point64
  16424  3ee5				   .
  16425  3ee5							; 
  16426  3ee5
  16427  3ee5				   .L0980		;  return thisbank
  16428  3ee5
  16429  3ee5		       60		      RTS
  16430  3ee6				   .
  16431  3ee6							; 
  16432  3ee6
  16433  3ee6				   .
  16434  3ee6							; 
  16435  3ee6
  16436  3ee6				   .
  16437  3ee6							; 
  16438  3ee6
  16439  3ee6				   .
  16440  3ee6							; 
  16441  3ee6
  16442  3ee6				   .
  16443  3ee6							; 
  16444  3ee6
  16445  3ee6				   .
  16446  3ee6							; 
  16447  3ee6
  16448  3ee6				   .
  16449  3ee6							; 
  16450  3ee6
  16451  3ee6				   .__Mario_Die
  16452  3ee6							; __Mario_Die
  16453  3ee6
  16454  3ee6				   .L0981		;  player0color:
  16455  3ee6
  16456  3ee6		       a2 cd		      LDX	#<playercolorL0981_0
  16457  3ee8		       86 90		      STX	player0color
  16458  3eea		       a9 fb		      LDA	#>playercolorL0981_0
  16459  3eec		       85 91		      STA	player0color+1
  16460  3eee				   .
  16461  3eee							; 
  16462  3eee
  16463  3eee				   .L0982		;  player0:
  16464  3eee
  16465  3eee		       a2 dc		      LDX	#<playerL0982_0
  16466  3ef0		       86 8a		      STX	player0pointerlo
  16467  3ef2		       a9 fb		      LDA	#>playerL0982_0
  16468  3ef4		       85 8b		      STA	player0pointerhi
  16469  3ef6		       a9 0e		      LDA	#14
  16470  3ef8		       85 8e		      STA	player0height
  16471  3efa				   .L0983		;  return thisbank
  16472  3efa
  16473  3efa		       60		      RTS
  16474  3efb				   .
  16475  3efb							; 
  16476  3efb
  16477  3efb				   .__Flag_Pole_Down
  16478  3efb							; __Flag_Pole_Down
  16479  3efb
  16480  3efb				   .L0984		;  player1color:
  16481  3efb
  16482  3efb		       a2 00		      LDX	#<playercolorL0984_1
  16483  3efd		       86 87		      STX	player1color
  16484  3eff		       a9 fc		      LDA	#>playercolorL0984_1
  16485  3f01		       85 88		      STA	player1color+1
  16486  3f03				   .
  16487  3f03							; 
  16488  3f03
  16489  3f03				   .L0985		;  player1:
  16490  3f03
  16491  3f03		       a2 20		      LDX	#<playerL0985_1
  16492  3f05		       86 8c		      STX	player1pointerlo
  16493  3f07		       a9 fc		      LDA	#>playerL0985_1
  16494  3f09		       85 8d		      STA	player1pointerhi
  16495  3f0b		       a9 1f		      LDA	#31
  16496  3f0d		       85 8f		      STA	player1height
  16497  3f0f				   .L0986		;  return thisbank
  16498  3f0f
  16499  3f0f		       60		      RTS
  16500  3f10				   .
  16501  3f10							; 
  16502  3f10
  16503  3f10				   .__Tramp2C
  16504  3f10							; __Tramp2C
  16505  3f10
  16506  3f10				   .L0987		;  player1color:
  16507  3f10
  16508  3f10		       a2 40		      LDX	#<playercolorL0987_1
  16509  3f12		       86 87		      STX	player1color
  16510  3f14		       a9 fc		      LDA	#>playercolorL0987_1
  16511  3f16		       85 88		      STA	player1color+1
  16512  3f18				   .
  16513  3f18							; 
  16514  3f18
  16515  3f18				   .L0988		;  player1:
  16516  3f18
  16517  3f18		       a2 50		      LDX	#<playerL0988_1
  16518  3f1a		       86 8c		      STX	player1pointerlo
  16519  3f1c		       a9 fc		      LDA	#>playerL0988_1
  16520  3f1e		       85 8d		      STA	player1pointerhi
  16521  3f20		       a9 0f		      LDA	#15
  16522  3f22		       85 8f		      STA	player1height
  16523  3f24				   .L0989		;  return thisbank
  16524  3f24
  16525  3f24		       60		      RTS
  16526  3f25				   .
  16527  3f25							; 
  16528  3f25
  16529  3f25				   .
  16530  3f25							; 
  16531  3f25
  16532  3f25				   .
  16533  3f25							; 
  16534  3f25
  16535  3f25				   .
  16536  3f25							; 
  16537  3f25
  16538  3f25				   .
  16539  3f25							; 
  16540  3f25
  16541  3f25				   .
  16542  3f25							; 
  16543  3f25
  16544  3f25				   .
  16545  3f25							; 
  16546  3f25
  16547  3f25				   .
  16548  3f25							; 
  16549  3f25
  16550  3f25				   .
  16551  3f25							; 
  16552  3f25
  16553  3f25				   .
  16554  3f25							; 
  16555  3f25
  16556  3f25				   .
  16557  3f25							; 
  16558  3f25
  16559  3f25				   .L0990		;  bank 4
  16560  3f25
  16561  3f25					      if	ECHO3
      175 bytes of ROM space left in bank 3
  16562  3f25					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
  16563  3f25					      endif
  16564  3f25		       00 01	   ECHO3      =	1
  16565  3fd4					      ORG	$3FF4-bscode_length
  16566  3fd4					      RORG	$5FF4-bscode_length
  16567  3fd4		       a2 ff	   start_bank3 ldx	#$ff
  16568  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
  16569  3fd6				  -	      stx	FASTFETCH
  16570  3fd6					      endif
  16571  3fd6		       9a		      txs
  16572  3fd7				  -	      if	bankswitch == 64
  16573  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  16574  3fd7					      else
  16575  3fd7		       a9 f2		      lda	#>(start-1)
  16576  3fd9					      endif
  16577  3fd9		       48		      pha
  16578  3fda		       a9 51		      lda	#<(start-1)
  16579  3fdc		       48		      pha
  16580  3fdd		       48		      pha
  16581  3fde		       8a		      txa
  16582  3fdf		       48		      pha
  16583  3fe0		       ba		      tsx
  16584  3fe1					      if	bankswitch != 64
  16585  3fe1		       b5 04		      lda	4,x	; get high byte of return address
  16586  3fe3		       2a		      rol
  16587  3fe4		       2a		      rol
  16588  3fe5		       2a		      rol
  16589  3fe6		       2a		      rol
  16590  3fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  16591  3fe9		       aa		      tax
  16592  3fea		       e8		      inx
  16593  3feb				  -	      else
  16594  3feb				  -	      lda	4,x	; get high byte of return address
  16595  3feb				  -	      tay
  16596  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  16597  3feb				  -	      sta	4,x
  16598  3feb				  -	      tya
  16599  3feb				  -	      lsr
  16600  3feb				  -	      lsr
  16601  3feb				  -	      lsr
  16602  3feb				  -	      lsr
  16603  3feb				  -	      tax
  16604  3feb				  -	      inx
  16605  3feb					      endif
  16606  3feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  16607  3fee		       68		      pla
  16608  3fef		       aa		      tax
  16609  3ff0		       68		      pla
  16610  3ff1		       60		      rts
  16611  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  16612  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  16613  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  16614  3ff2					      endif
  16615  3ffc					      ORG	$3FFC
  16616  3ffc					      RORG	$5FFC
  16617  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
  16618  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
  16619  4000					      ORG	$4000
  16620  4000					      RORG	$7000
  16621  4000				   .
  16622  4000							; 
  16623  4000
  16624  4000				   .
  16625  4000							; 
  16626  4000
  16627  4000				   .
  16628  4000							; 
  16629  4000
  16630  4000				   .
  16631  4000							; 
  16632  4000
  16633  4000				   .
  16634  4000							; 
  16635  4000
  16636  4000				   .
  16637  4000							; 
  16638  4000
  16639  4000				   .
  16640  4000							; 
  16641  4000
  16642  4000				   .__Intro_Screen
  16643  4000							; __Intro_Screen
  16644  4000
  16645  4000				   .
  16646  4000							; 
  16647  4000
  16648  4000				   .L0991		;  AUDV0  =  0  :  AUDV1  =  0
  16649  4000
  16650  4000		       a9 00		      LDA	#0
  16651  4002		       85 19		      STA	AUDV0
  16652  4004		       85 1a		      STA	AUDV1
  16653  4006				   .
  16654  4006							; 
  16655  4006
  16656  4006				   .L0992		;  pfclear
  16657  4006
  16658  4006		       a9 00		      LDA	#0
  16659  4008		       85 ee		      sta	temp7
  16660  400a		       a9 70		      lda	#>(ret_point65-1)
  16661  400c		       48		      pha
  16662  400d		       a9 1f		      lda	#<(ret_point65-1)
  16663  400f		       48		      pha
  16664  4010		       a9 f2		      lda	#>(pfclear-1)
  16665  4012		       48		      pha
  16666  4013		       a9 8f		      lda	#<(pfclear-1)
  16667  4015		       48		      pha
  16668  4016		       a5 ee		      lda	temp7
  16669  4018		       48		      pha
  16670  4019		       8a		      txa
  16671  401a		       48		      pha
  16672  401b		       a2 08		      ldx	#8
  16673  401d		       4c eb ff 	      jmp	BS_jsr
  16674  4020				   ret_point65
  16675  4020				   .
  16676  4020							; 
  16677  4020
  16678  4020				   .L0993		;  _Level_Data_Pointer  =  63	:  _Animation_Timer  =	250
  16679  4020
  16680  4020		       a9 3f		      LDA	#63
  16681  4022		       85 d5		      STA	_Level_Data_Pointer
  16682  4024		       a9 fa		      LDA	#250
  16683  4026		       85 d4		      STA	_Animation_Timer
  16684  4028				   .
  16685  4028							; 
  16686  4028
  16687  4028				   .L0994		;  gosub __Setup_Colors
  16688  4028
  16689  4028		       20 a8 72 	      jsr	.__Setup_Colors
  16690  402b
  16691  402b				   .
  16692  402b							; 
  16693  402b
  16694  402b				   .__Intro_Screen_2
  16695  402b							; __Intro_Screen_2
  16696  402b
  16697  402b				   .
  16698  402b							; 
  16699  402b
  16700  402b				   .L0995		;  gosub __Show_Level
  16701  402b
  16702  402b		       20 6b 74 	      jsr	.__Show_Level
  16703  402e
  16704  402e				   .
  16705  402e							; 
  16706  402e
  16707  402e				   .L0996		;  COLUPF  =  $00
  16708  402e
  16709  402e		       a9 00		      LDA	#$00
  16710  4030		       85 08		      STA	COLUPF
  16711  4032				   .
  16712  4032							; 
  16713  4032
  16714  4032				   .L0997		;  x  =  _Lives_Counter  -  1
  16715  4032
  16716  4032		       a5 df		      LDA	_Lives_Counter
  16717  4034		       38		      SEC
  16718  4035		       e9 01		      SBC	#1
  16719  4037		       85 eb		      STA	x
  16720  4039				   .
  16721  4039							; 
  16722  4039
  16723  4039				   .L0998		;  gosub __Mario_Icon
  16724  4039
  16725  4039		       20 d6 7d 	      jsr	.__Mario_Icon
  16726  403c
  16727  403c				   .
  16728  403c							; 
  16729  403c
  16730  403c				   .L0999		;  gosub __Number_Colors_P1
  16731  403c
  16732  403c		       20 f5 74 	      jsr	.__Number_Colors_P1
  16733  403f
  16734  403f				   .
  16735  403f							; 
  16736  403f
  16737  403f				   .L01000		;  on x gosub __1Mario __2Mario __3Mario __4Mario __5Mario __6Mario __7Mario __8Mario __9Mario
  16738  403f
  16739  403f		       a9 70		      lda	#>(ongosub9-1)
  16740  4041		       48		      PHA
  16741  4042		       a9 61		      lda	#<(ongosub9-1)
  16742  4044		       48		      PHA
  16743  4045		       a6 eb		      LDX	x
  16744  4047		       bd 50 70 	      LDA	.L01000jumptablehi,x
  16745  404a		       48		      PHA
  16746  404b		       bd 59 70 	      LDA	.L01000jumptablelo,x
  16747  404e		       48		      PHA
  16748  404f		       60		      RTS
  16749  4050				   .L01000jumptablehi
  16750  4050		       7d		      .byte.b	>(.__1Mario-1)
  16751  4051		       7d		      .byte.b	>(.__2Mario-1)
  16752  4052		       7d		      .byte.b	>(.__3Mario-1)
  16753  4053		       7d		      .byte.b	>(.__4Mario-1)
  16754  4054		       7d		      .byte.b	>(.__5Mario-1)
  16755  4055		       7d		      .byte.b	>(.__6Mario-1)
  16756  4056		       7d		      .byte.b	>(.__7Mario-1)
  16757  4057		       7d		      .byte.b	>(.__8Mario-1)
  16758  4058		       7d		      .byte.b	>(.__9Mario-1)
  16759  4059				   .L01000jumptablelo
  16760  4059		       60		      .byte.b	<(.__1Mario-1)
  16761  405a		       6d		      .byte.b	<(.__2Mario-1)
  16762  405b		       7a		      .byte.b	<(.__3Mario-1)
  16763  405c		       87		      .byte.b	<(.__4Mario-1)
  16764  405d		       94		      .byte.b	<(.__5Mario-1)
  16765  405e		       a1		      .byte.b	<(.__6Mario-1)
  16766  405f		       ae		      .byte.b	<(.__7Mario-1)
  16767  4060		       bb		      .byte.b	<(.__8Mario-1)
  16768  4061		       c8		      .byte.b	<(.__9Mario-1)
  16769  4062				   ongosub9
  16770  4062				   .
  16771  4062							; 
  16772  4062
  16773  4062				   .L01001		;  player0x  =  71  :	player1x  =  81
  16774  4062
  16775  4062		       a9 47		      LDA	#71
  16776  4064		       85 80		      STA	player0x
  16777  4066		       a9 51		      LDA	#81
  16778  4068		       85 81		      STA	player1x
  16779  406a				   .
  16780  406a							; 
  16781  406a
  16782  406a				   .L01002		;  player0y  =  56  :	player1y  =  54
  16783  406a
  16784  406a		       a9 38		      LDA	#56
  16785  406c		       85 85		      STA	player0y
  16786  406e		       a9 36		      LDA	#54
  16787  4070		       85 86		      STA	player1y
  16788  4072				   .
  16789  4072							; 
  16790  4072
  16791  4072				   .L01003		;  drawscreen
  16792  4072
  16793  4072		       85 ee		      sta	temp7
  16794  4074		       a9 70		      lda	#>(ret_point66-1)
  16795  4076		       48		      pha
  16796  4077		       a9 89		      lda	#<(ret_point66-1)
  16797  4079		       48		      pha
  16798  407a		       a9 f4		      lda	#>(drawscreen-1)
  16799  407c		       48		      pha
  16800  407d		       a9 37		      lda	#<(drawscreen-1)
  16801  407f		       48		      pha
  16802  4080		       a5 ee		      lda	temp7
  16803  4082		       48		      pha
  16804  4083		       8a		      txa
  16805  4084		       48		      pha
  16806  4085		       a2 08		      ldx	#8
  16807  4087		       4c eb ff 	      jmp	BS_jsr
  16808  408a				   ret_point66
  16809  408a				   .
  16810  408a							; 
  16811  408a
  16812  408a				   .
  16813  408a							; 
  16814  408a
  16815  408a				   .
  16816  408a							; 
  16817  408a
  16818  408a				   .
  16819  408a							; 
  16820  408a
  16821  408a				   .
  16822  408a							; 
  16823  408a
  16824  408a				   .
  16825  408a							; 
  16826  408a
  16827  408a				   .L01004		;  if _Level  =  4  &&  _Bit6_Checkpoint_Flag{6} then _Level_Data_Pointer  =  0  :  goto __Skip_Scroll
  16828  408a
  16829  408a		       a5 ea		      LDA	_Level
  16830  408c		       c9 04		      CMP	#4
  16831  408e		       d0 0b		      BNE	.skipL01004
  16832  4090				   .condpart540
  16833  4090		       24 da		      BIT	_Bit6_Checkpoint_Flag
  16834  4092		       50 07		      BVC	.skip540then
  16835  4094				   .condpart541
  16836  4094		       a9 00		      LDA	#0
  16837  4096		       85 d5		      STA	_Level_Data_Pointer
  16838  4098		       4c b9 70 	      jmp	.__Skip_Scroll
  16839  409b
  16840  409b				   .skip540then
  16841  409b				   .skipL01004
  16842  409b				   .
  16843  409b							; 
  16844  409b
  16845  409b				   .L01005		;  if _Level_Data_Pointer  >  31 then gosub __Scroll_Right bank1
  16846  409b
  16847  409b		       a9 1f		      LDA	#31
  16848  409d		       c5 d5		      CMP	_Level_Data_Pointer
  16849  409f		       b0 18		      BCS	.skipL01005
  16850  40a1				   .condpart542
  16851  40a1		       85 ee		      sta	temp7
  16852  40a3		       a9 70		      lda	#>(ret_point67-1)
  16853  40a5		       48		      pha
  16854  40a6		       a9 b8		      lda	#<(ret_point67-1)
  16855  40a8		       48		      pha
  16856  40a9		       a9 1b		      lda	#>(.__Scroll_Right-1)
  16857  40ab		       48		      pha
  16858  40ac		       a9 fb		      lda	#<(.__Scroll_Right-1)
  16859  40ae		       48		      pha
  16860  40af		       a5 ee		      lda	temp7
  16861  40b1		       48		      pha
  16862  40b2		       8a		      txa
  16863  40b3		       48		      pha
  16864  40b4		       a2 01		      ldx	#1
  16865  40b6		       4c eb ff 	      jmp	BS_jsr
  16866  40b9				   ret_point67
  16867  40b9				   .skipL01005
  16868  40b9				   .
  16869  40b9							; 
  16870  40b9
  16871  40b9				   .__Skip_Scroll
  16872  40b9							; __Skip_Scroll
  16873  40b9
  16874  40b9				   .
  16875  40b9							; 
  16876  40b9
  16877  40b9				   .L01006		;  if !joy0fire then goto __Intro_Screen_2
  16878  40b9
  16879  40b9		       24 0c		      bit	INPT4
  16880  40bb		       10 03		      BPL	.skipL01006
  16881  40bd				   .condpart543
  16882  40bd		       4c 2b 70 	      jmp	.__Intro_Screen_2
  16883  40c0
  16884  40c0				   .skipL01006
  16885  40c0				   .
  16886  40c0							; 
  16887  40c0
  16888  40c0				   .L01007		;  if _Level_Data_Pointer  >  31 then goto __Intro_Screen_2
  16889  40c0
  16890  40c0		       a9 1f		      LDA	#31
  16891  40c2		       c5 d5		      CMP	_Level_Data_Pointer
  16892  40c4		       b0 03		      BCS	.skipL01007
  16893  40c6				   .condpart544
  16894  40c6		       4c 2b 70 	      jmp	.__Intro_Screen_2
  16895  40c9
  16896  40c9				   .skipL01007
  16897  40c9				   .
  16898  40c9							; 
  16899  40c9
  16900  40c9				   .L01008		;  _Level_Timer  =  0	:  pfscore1  =	255
  16901  40c9
  16902  40c9		       a9 00		      LDA	#0
  16903  40cb		       85 d8		      STA	_Level_Timer
  16904  40cd		       a9 ff		      LDA	#255
  16905  40cf		       85 f2		      STA	pfscore1
  16906  40d1				   .
  16907  40d1							; 
  16908  40d1
  16909  40d1				   .L01009		;  _Bit2_Fire_Button_Pressed{2}  =  1
  16910  40d1
  16911  40d1		       a5 d7		      LDA	_Bit2_Fire_Button_Pressed
  16912  40d3		       09 04		      ORA	#4
  16913  40d5		       85 d7		      STA	_Bit2_Fire_Button_Pressed
  16914  40d7				   .
  16915  40d7							; 
  16916  40d7
  16917  40d7				   .L01010		;  if !_Bit6_Checkpoint_Flag{6} then player0y	=  79
  16918  40d7
  16919  40d7		       24 da		      BIT	_Bit6_Checkpoint_Flag
  16920  40d9		       70 04		      BVS	.skipL01010
  16921  40db				   .condpart545
  16922  40db		       a9 4f		      LDA	#79
  16923  40dd		       85 85		      STA	player0y
  16924  40df				   .skipL01010
  16925  40df				   .
  16926  40df							; 
  16927  40df
  16928  40df				   .L01011		;  if _Bit6_Checkpoint_Flag{6}  &&  _Level  <	3 then player0y  =  63
  16929  40df
  16930  40df		       24 da		      BIT	_Bit6_Checkpoint_Flag
  16931  40e1		       50 0a		      BVC	.skipL01011
  16932  40e3				   .condpart546
  16933  40e3		       a5 ea		      LDA	_Level
  16934  40e5		       c9 03		      CMP	#3
  16935  40e7		       b0 04		      BCS	.skip546then
  16936  40e9				   .condpart547
  16937  40e9		       a9 3f		      LDA	#63
  16938  40eb		       85 85		      STA	player0y
  16939  40ed				   .skip546then
  16940  40ed				   .skipL01011
  16941  40ed				   .
  16942  40ed							; 
  16943  40ed
  16944  40ed				   .L01012		;  goto __Intro_Screen_6
  16945  40ed
  16946  40ed		       4c 40 71 	      jmp	.__Intro_Screen_6
  16947  40f0
  16948  40f0				   .
  16949  40f0							; 
  16950  40f0
  16951  40f0				   .__Intro_Screen_3
  16952  40f0							; __Intro_Screen_3
  16953  40f0
  16954  40f0				   .
  16955  40f0							; 
  16956  40f0
  16957  40f0				   .L01013		;  AUDV0  =  0  :  AUDV1  =  0  :  _Level_Data_Pointer  =  63	:  _Animation_Timer  =	250
  16958  40f0
  16959  40f0		       a9 00		      LDA	#0
  16960  40f2		       85 19		      STA	AUDV0
  16961  40f4		       85 1a		      STA	AUDV1
  16962  40f6		       a9 3f		      LDA	#63
  16963  40f8		       85 d5		      STA	_Level_Data_Pointer
  16964  40fa		       a9 fa		      LDA	#250
  16965  40fc		       85 d4		      STA	_Animation_Timer
  16966  40fe				   .
  16967  40fe							; 
  16968  40fe
  16969  40fe				   .L01014		;  gosub __Setup_Colors
  16970  40fe
  16971  40fe		       20 a8 72 	      jsr	.__Setup_Colors
  16972  4101
  16973  4101				   .
  16974  4101							; 
  16975  4101
  16976  4101				   .__Intro_Screen_5
  16977  4101							; __Intro_Screen_5
  16978  4101
  16979  4101				   .
  16980  4101							; 
  16981  4101
  16982  4101				   .L01015		;  COLUPF  =  $00  :  COLUBK  =  $00
  16983  4101
  16984  4101		       a9 00		      LDA	#$00
  16985  4103		       85 08		      STA	COLUPF
  16986  4105		       85 09		      STA	COLUBK
  16987  4107				   .
  16988  4107							; 
  16989  4107
  16990  4107				   .L01016		;  gosub __Scroll_Right bank1
  16991  4107
  16992  4107		       85 ee		      sta	temp7
  16993  4109		       a9 71		      lda	#>(ret_point68-1)
  16994  410b		       48		      pha
  16995  410c		       a9 1e		      lda	#<(ret_point68-1)
  16996  410e		       48		      pha
  16997  410f		       a9 1b		      lda	#>(.__Scroll_Right-1)
  16998  4111		       48		      pha
  16999  4112		       a9 fb		      lda	#<(.__Scroll_Right-1)
  17000  4114		       48		      pha
  17001  4115		       a5 ee		      lda	temp7
  17002  4117		       48		      pha
  17003  4118		       8a		      txa
  17004  4119		       48		      pha
  17005  411a		       a2 01		      ldx	#1
  17006  411c		       4c eb ff 	      jmp	BS_jsr
  17007  411f				   ret_point68
  17008  411f				   .
  17009  411f							; 
  17010  411f
  17011  411f				   .L01017		;  drawscreen
  17012  411f
  17013  411f		       85 ee		      sta	temp7
  17014  4121		       a9 71		      lda	#>(ret_point69-1)
  17015  4123		       48		      pha
  17016  4124		       a9 36		      lda	#<(ret_point69-1)
  17017  4126		       48		      pha
  17018  4127		       a9 f4		      lda	#>(drawscreen-1)
  17019  4129		       48		      pha
  17020  412a		       a9 37		      lda	#<(drawscreen-1)
  17021  412c		       48		      pha
  17022  412d		       a5 ee		      lda	temp7
  17023  412f		       48		      pha
  17024  4130		       8a		      txa
  17025  4131		       48		      pha
  17026  4132		       a2 08		      ldx	#8
  17027  4134		       4c eb ff 	      jmp	BS_jsr
  17028  4137				   ret_point69
  17029  4137				   .
  17030  4137							; 
  17031  4137
  17032  4137				   .L01018		;  if _Level_Data_Pointer  >  31 then goto __Intro_Screen_5
  17033  4137
  17034  4137		       a9 1f		      LDA	#31
  17035  4139		       c5 d5		      CMP	_Level_Data_Pointer
  17036  413b		       b0 03		      BCS	.skipL01018
  17037  413d				   .condpart548
  17038  413d		       4c 01 71 	      jmp	.__Intro_Screen_5
  17039  4140
  17040  4140				   .skipL01018
  17041  4140				   .
  17042  4140							; 
  17043  4140
  17044  4140				   .
  17045  4140							; 
  17046  4140
  17047  4140				   .
  17048  4140							; 
  17049  4140
  17050  4140				   .
  17051  4140							; 
  17052  4140
  17053  4140				   .
  17054  4140							; 
  17055  4140
  17056  4140				   .
  17057  4140							; 
  17058  4140
  17059  4140				   .__Intro_Screen_6
  17060  4140							; __Intro_Screen_6
  17061  4140
  17062  4140				   .
  17063  4140							; 
  17064  4140
  17065  4140				   .L01019		;  if _Level  =  1 then gosub __OW1_Colors  :	COLUBK	=  $00	:  gosub __OW_Music bank7
  17066  4140
  17067  4140		       a5 ea		      LDA	_Level
  17068  4142		       c9 01		      CMP	#1
  17069  4144		       d0 1f		      BNE	.skipL01019
  17070  4146				   .condpart549
  17071  4146		       20 b5 72 	      jsr	.__OW1_Colors
  17072  4149		       a9 00		      LDA	#$00
  17073  414b		       85 09		      STA	COLUBK
  17074  414d		       85 ee		      sta	temp7
  17075  414f		       a9 71		      lda	#>(ret_point70-1)
  17076  4151		       48		      pha
  17077  4152		       a9 64		      lda	#<(ret_point70-1)
  17078  4154		       48		      pha
  17079  4155		       a9 d0		      lda	#>(.__OW_Music-1)
  17080  4157		       48		      pha
  17081  4158		       a9 b9		      lda	#<(.__OW_Music-1)
  17082  415a		       48		      pha
  17083  415b		       a5 ee		      lda	temp7
  17084  415d		       48		      pha
  17085  415e		       8a		      txa
  17086  415f		       48		      pha
  17087  4160		       a2 07		      ldx	#7
  17088  4162		       4c eb ff 	      jmp	BS_jsr
  17089  4165				   ret_point70
  17090  4165				   .skipL01019
  17091  4165				   .
  17092  4165							; 
  17093  4165
  17094  4165				   .L01020		;  if _Level  =  2 then gosub __UW1_Colors  :	COLUBK	=  $00	:  gosub __UW_Music bank7
  17095  4165
  17096  4165		       a5 ea		      LDA	_Level
  17097  4167		       c9 02		      CMP	#2
  17098  4169		       d0 1f		      BNE	.skipL01020
  17099  416b				   .condpart550
  17100  416b		       20 cf 72 	      jsr	.__UW1_Colors
  17101  416e		       a9 00		      LDA	#$00
  17102  4170		       85 09		      STA	COLUBK
  17103  4172		       85 ee		      sta	temp7
  17104  4174		       a9 71		      lda	#>(ret_point71-1)
  17105  4176		       48		      pha
  17106  4177		       a9 89		      lda	#<(ret_point71-1)
  17107  4179		       48		      pha
  17108  417a		       a9 da		      lda	#>(.__UW_Music-1)
  17109  417c		       48		      pha
  17110  417d		       a9 c2		      lda	#<(.__UW_Music-1)
  17111  417f		       48		      pha
  17112  4180		       a5 ee		      lda	temp7
  17113  4182		       48		      pha
  17114  4183		       8a		      txa
  17115  4184		       48		      pha
  17116  4185		       a2 07		      ldx	#7
  17117  4187		       4c eb ff 	      jmp	BS_jsr
  17118  418a				   ret_point71
  17119  418a				   .skipL01020
  17120  418a				   .
  17121  418a							; 
  17122  418a
  17123  418a				   .L01021		;  if _Level  =  3 then gosub __OW2_Colors  :	COLUBK	=  $A0	:  gosub __OW_Music bank7
  17124  418a
  17125  418a		       a5 ea		      LDA	_Level
  17126  418c		       c9 03		      CMP	#3
  17127  418e		       d0 1f		      BNE	.skipL01021
  17128  4190				   .condpart551
  17129  4190		       20 c2 72 	      jsr	.__OW2_Colors
  17130  4193		       a9 a0		      LDA	#$A0
  17131  4195		       85 09		      STA	COLUBK
  17132  4197		       85 ee		      sta	temp7
  17133  4199		       a9 71		      lda	#>(ret_point72-1)
  17134  419b		       48		      pha
  17135  419c		       a9 ae		      lda	#<(ret_point72-1)
  17136  419e		       48		      pha
  17137  419f		       a9 d0		      lda	#>(.__OW_Music-1)
  17138  41a1		       48		      pha
  17139  41a2		       a9 b9		      lda	#<(.__OW_Music-1)
  17140  41a4		       48		      pha
  17141  41a5		       a5 ee		      lda	temp7
  17142  41a7		       48		      pha
  17143  41a8		       8a		      txa
  17144  41a9		       48		      pha
  17145  41aa		       a2 07		      ldx	#7
  17146  41ac		       4c eb ff 	      jmp	BS_jsr
  17147  41af				   ret_point72
  17148  41af				   .skipL01021
  17149  41af				   .
  17150  41af							; 
  17151  41af
  17152  41af				   .L01022		;  if _Level  =  4 then COLUBK  =  $00
  17153  41af
  17154  41af		       a5 ea		      LDA	_Level
  17155  41b1		       c9 04		      CMP	#4
  17156  41b3		       d0 04		      BNE	.skipL01022
  17157  41b5				   .condpart552
  17158  41b5		       a9 00		      LDA	#$00
  17159  41b7		       85 09		      STA	COLUBK
  17160  41b9				   .skipL01022
  17161  41b9				   .
  17162  41b9							; 
  17163  41b9
  17164  41b9				   .L01023		;  if _Level  =  4  &&  !_Bit6_Checkpoint_Flag{6} then gosub __UW2_Colors  :  gosub __UW_Music bank7
  17165  41b9
  17166  41b9		       a5 ea		      LDA	_Level
  17167  41bb		       c9 04		      CMP	#4
  17168  41bd		       d0 1f		      BNE	.skipL01023
  17169  41bf				   .condpart553
  17170  41bf		       24 da		      BIT	_Bit6_Checkpoint_Flag
  17171  41c1		       70 1b		      BVS	.skip553then
  17172  41c3				   .condpart554
  17173  41c3		       20 dc 72 	      jsr	.__UW2_Colors
  17174  41c6		       85 ee		      sta	temp7
  17175  41c8		       a9 71		      lda	#>(ret_point73-1)
  17176  41ca		       48		      pha
  17177  41cb		       a9 dd		      lda	#<(ret_point73-1)
  17178  41cd		       48		      pha
  17179  41ce		       a9 da		      lda	#>(.__UW_Music-1)
  17180  41d0		       48		      pha
  17181  41d1		       a9 c2		      lda	#<(.__UW_Music-1)
  17182  41d3		       48		      pha
  17183  41d4		       a5 ee		      lda	temp7
  17184  41d6		       48		      pha
  17185  41d7		       8a		      txa
  17186  41d8		       48		      pha
  17187  41d9		       a2 07		      ldx	#7
  17188  41db		       4c eb ff 	      jmp	BS_jsr
  17189  41de				   ret_point73
  17190  41de				   .skip553then
  17191  41de				   .skipL01023
  17192  41de				   .
  17193  41de							; 
  17194  41de
  17195  41de				   .L01024		;  if _Level  =  4  &&  _Bit6_Checkpoint_Flag{6} then gosub __Boss_Level_Setup
  17196  41de
  17197  41de		       a5 ea		      LDA	_Level
  17198  41e0		       c9 04		      CMP	#4
  17199  41e2		       d0 07		      BNE	.skipL01024
  17200  41e4				   .condpart555
  17201  41e4		       24 da		      BIT	_Bit6_Checkpoint_Flag
  17202  41e6		       50 03		      BVC	.skip555then
  17203  41e8				   .condpart556
  17204  41e8		       20 2c 72 	      jsr	.__Boss_Level_Setup
  17205  41eb
  17206  41eb				   .skip555then
  17207  41eb				   .skipL01024
  17208  41eb				   .
  17209  41eb							; 
  17210  41eb
  17211  41eb				   .L01025		;  _Momentum_Left_Right  =  0	:  _Animation_Timer  =	0  :  _Momentum_Up_Down  =  0  :  _Object_Scroll_In_Data  =  0	:  _Farthest_Traveled_On_Level	=  0  :  _Moving_Shell_X_Coordinate  =	0  :  u  =  0
  17212  41eb
  17213  41eb		       a9 00		      LDA	#0
  17214  41ed		       85 e0		      STA	_Momentum_Left_Right
  17215  41ef		       85 d4		      STA	_Animation_Timer
  17216  41f1		       85 e1		      STA	_Momentum_Up_Down
  17217  41f3		       85 db		      STA	_Object_Scroll_In_Data
  17218  41f5		       85 e2		      STA	_Farthest_Traveled_On_Level
  17219  41f7		       85 e6		      STA	_Moving_Shell_X_Coordinate
  17220  41f9		       85 e8		      STA	u
  17221  41fb				   .
  17222  41fb							; 
  17223  41fb
  17224  41fb				   .L01026		;  scorecolor	=  $0E	:  _Level_Data_Pointer	=  32  :  _Music_Duration  =  1  :  _Bit5_Moving_Turtle_Shell_Direction{5}  =  1
  17225  41fb
  17226  41fb		       a9 0e		      LDA	#$0E
  17227  41fd		       85 a3		      STA	scorecolor
  17228  41ff		       a9 20		      LDA	#32
  17229  4201		       85 d5		      STA	_Level_Data_Pointer
  17230  4203		       a9 01		      LDA	#1
  17231  4205		       85 e3		      STA	_Music_Duration
  17232  4207		       a5 da		      LDA	_Bit5_Moving_Turtle_Shell_Direction
  17233  4209		       09 20		      ORA	#32
  17234  420b		       85 da		      STA	_Bit5_Moving_Turtle_Shell_Direction
  17235  420d				   .
  17236  420d							; 
  17237  420d
  17238  420d				   .L01027		;  player1y  =  150  :  bally	=  150	:  player0x  =	24  :  pfscorecolor  =	28
  17239  420d
  17240  420d		       a9 96		      LDA	#150
  17241  420f		       85 86		      STA	player1y
  17242  4211		       85 89		      STA	bally
  17243  4213		       a9 18		      LDA	#24
  17244  4215		       85 80		      STA	player0x
  17245  4217		       a9 1c		      LDA	#28
  17246  4219		       85 f4		      STA	pfscorecolor
  17247  421b				   .
  17248  421b							; 
  17249  421b
  17250  421b				   .L01028		;  player1x  =  0  :  var44  =  0  :  var45  =  0  :  var46  =  0  :  var47  =  0  :  ballx  =  0
  17251  421b
  17252  421b		       a9 00		      LDA	#0
  17253  421d		       85 81		      STA	player1x
  17254  421f		       85 d0		      STA	var44
  17255  4221		       85 d1		      STA	var45
  17256  4223		       85 d2		      STA	var46
  17257  4225		       85 d3		      STA	var47
  17258  4227		       85 84		      STA	ballx
  17259  4229				   .
  17260  4229							; 
  17261  4229
  17262  4229				   .L01029		;  return otherbank
  17263  4229
  17264  4229		       4c dd ff 	      JMP	BS_return
  17265  422c				   .
  17266  422c							; 
  17267  422c
  17268  422c				   .__Boss_Level_Setup
  17269  422c							; __Boss_Level_Setup
  17270  422c
  17271  422c				   .
  17272  422c							; 
  17273  422c
  17274  422c				   .L01030		;  if _World  =  1 then gosub __Boss_PF_Setup bank5
  17275  422c
  17276  422c		       a5 e9		      LDA	_World
  17277  422e		       c9 01		      CMP	#1
  17278  4230		       d0 18		      BNE	.skipL01030
  17279  4232				   .condpart557
  17280  4232		       85 ee		      sta	temp7
  17281  4234		       a9 72		      lda	#>(ret_point74-1)
  17282  4236		       48		      pha
  17283  4237		       a9 49		      lda	#<(ret_point74-1)
  17284  4239		       48		      pha
  17285  423a		       a9 9f		      lda	#>(.__Boss_PF_Setup-1)
  17286  423c		       48		      pha
  17287  423d		       a9 34		      lda	#<(.__Boss_PF_Setup-1)
  17288  423f		       48		      pha
  17289  4240		       a5 ee		      lda	temp7
  17290  4242		       48		      pha
  17291  4243		       8a		      txa
  17292  4244		       48		      pha
  17293  4245		       a2 05		      ldx	#5
  17294  4247		       4c eb ff 	      jmp	BS_jsr
  17295  424a				   ret_point74
  17296  424a				   .skipL01030
  17297  424a				   .
  17298  424a							; 
  17299  424a
  17300  424a				   .L01031		;  if _World  =  2 then gosub __Boss_PF_Setup_2 bank5
  17301  424a
  17302  424a		       a5 e9		      LDA	_World
  17303  424c		       c9 02		      CMP	#2
  17304  424e		       d0 18		      BNE	.skipL01031
  17305  4250				   .condpart558
  17306  4250		       85 ee		      sta	temp7
  17307  4252		       a9 72		      lda	#>(ret_point75-1)
  17308  4254		       48		      pha
  17309  4255		       a9 67		      lda	#<(ret_point75-1)
  17310  4257		       48		      pha
  17311  4258		       a9 9f		      lda	#>(.__Boss_PF_Setup_2-1)
  17312  425a		       48		      pha
  17313  425b		       a9 70		      lda	#<(.__Boss_PF_Setup_2-1)
  17314  425d		       48		      pha
  17315  425e		       a5 ee		      lda	temp7
  17316  4260		       48		      pha
  17317  4261		       8a		      txa
  17318  4262		       48		      pha
  17319  4263		       a2 05		      ldx	#5
  17320  4265		       4c eb ff 	      jmp	BS_jsr
  17321  4268				   ret_point75
  17322  4268				   .skipL01031
  17323  4268				   .
  17324  4268							; 
  17325  4268
  17326  4268				   .L01032		;  if _World  =  3 then gosub __Boss_PF_Setup_3 bank6
  17327  4268
  17328  4268		       a5 e9		      LDA	_World
  17329  426a		       c9 03		      CMP	#3
  17330  426c		       d0 18		      BNE	.skipL01032
  17331  426e				   .condpart559
  17332  426e		       85 ee		      sta	temp7
  17333  4270		       a9 72		      lda	#>(ret_point76-1)
  17334  4272		       48		      pha
  17335  4273		       a9 85		      lda	#<(ret_point76-1)
  17336  4275		       48		      pha
  17337  4276		       a9 bf		      lda	#>(.__Boss_PF_Setup_3-1)
  17338  4278		       48		      pha
  17339  4279		       a9 3b		      lda	#<(.__Boss_PF_Setup_3-1)
  17340  427b		       48		      pha
  17341  427c		       a5 ee		      lda	temp7
  17342  427e		       48		      pha
  17343  427f		       8a		      txa
  17344  4280		       48		      pha
  17345  4281		       a2 06		      ldx	#6
  17346  4283		       4c eb ff 	      jmp	BS_jsr
  17347  4286				   ret_point76
  17348  4286				   .skipL01032
  17349  4286				   .
  17350  4286							; 
  17351  4286
  17352  4286				   .L01033		;  if _World  =  4 then gosub __Boss_PF_Setup_4 bank6
  17353  4286
  17354  4286		       a5 e9		      LDA	_World
  17355  4288		       c9 04		      CMP	#4
  17356  428a		       d0 18		      BNE	.skipL01033
  17357  428c				   .condpart560
  17358  428c		       85 ee		      sta	temp7
  17359  428e		       a9 72		      lda	#>(ret_point77-1)
  17360  4290		       48		      pha
  17361  4291		       a9 a3		      lda	#<(ret_point77-1)
  17362  4293		       48		      pha
  17363  4294		       a9 bf		      lda	#>(.__Boss_PF_Setup_4-1)
  17364  4296		       48		      pha
  17365  4297		       a9 77		      lda	#<(.__Boss_PF_Setup_4-1)
  17366  4299		       48		      pha
  17367  429a		       a5 ee		      lda	temp7
  17368  429c		       48		      pha
  17369  429d		       8a		      txa
  17370  429e		       48		      pha
  17371  429f		       a2 06		      ldx	#6
  17372  42a1		       4c eb ff 	      jmp	BS_jsr
  17373  42a4				   ret_point77
  17374  42a4				   .skipL01033
  17375  42a4				   .
  17376  42a4							; 
  17377  42a4
  17378  42a4				   .L01034		;  gosub __Boss_Colors
  17379  42a4
  17380  42a4		       20 e9 72 	      jsr	.__Boss_Colors
  17381  42a7
  17382  42a7				   .
  17383  42a7							; 
  17384  42a7
  17385  42a7				   .L01035		;  return thisbank
  17386  42a7
  17387  42a7		       60		      RTS
  17388  42a8				   .
  17389  42a8							; 
  17390  42a8
  17391  42a8				   .
  17392  42a8							; 
  17393  42a8
  17394  42a8				   .
  17395  42a8							; 
  17396  42a8
  17397  42a8				   .
  17398  42a8							; 
  17399  42a8
  17400  42a8				   .
  17401  42a8							; 
  17402  42a8
  17403  42a8				   .
  17404  42a8							; 
  17405  42a8
  17406  42a8				   .
  17407  42a8							; 
  17408  42a8
  17409  42a8				   .
  17410  42a8							; 
  17411  42a8
  17412  42a8				   .
  17413  42a8							; 
  17414  42a8
  17415  42a8				   .__Setup_Colors
  17416  42a8							; __Setup_Colors
  17417  42a8
  17418  42a8				   .L01036		;  pfcolors:
  17419  42a8
  17420  42a8		       a9 00		      lda	# $00
  17421  42aa		       85 08		      sta	COLUPF
  17422  42ac				  -	      ifconst	pfres
  17423  42ac				  -	      lda	#>(pfcolorlabel360-131+pfres*pfwidth)
  17424  42ac					      else
  17425  42ac		       a9 f9		      lda	#>(pfcolorlabel360-83)
  17426  42ae					      endif
  17427  42ae		       85 f1		      sta	pfcolortable+1
  17428  42b0				  -	      ifconst	pfres
  17429  42b0				  -	      lda	#<(pfcolorlabel360-131+pfres*pfwidth)
  17430  42b0					      else
  17431  42b0		       a9 6b		      lda	#<(pfcolorlabel360-83)
  17432  42b2					      endif
  17433  42b2		       85 f0		      sta	pfcolortable
  17434  42b4				   .L01037		;  return thisbank
  17435  42b4
  17436  42b4		       60		      RTS
  17437  42b5				   .
  17438  42b5							; 
  17439  42b5
  17440  42b5				   .__OW1_Colors
  17441  42b5							; __OW1_Colors
  17442  42b5
  17443  42b5				   .L01038		;  pfcolors:
  17444  42b5
  17445  42b5		       a9 32		      lda	# $32
  17446  42b7		       85 08		      sta	COLUPF
  17447  42b9				  -	      ifconst	pfres
  17448  42b9				  -	      lda	#>(pfcolorlabel360-130+pfres*pfwidth)
  17449  42b9					      else
  17450  42b9		       a9 f9		      lda	#>(pfcolorlabel360-82)
  17451  42bb					      endif
  17452  42bb		       85 f1		      sta	pfcolortable+1
  17453  42bd				  -	      ifconst	pfres
  17454  42bd				  -	      lda	#<(pfcolorlabel360-130+pfres*pfwidth)
  17455  42bd					      else
  17456  42bd		       a9 6c		      lda	#<(pfcolorlabel360-82)
  17457  42bf					      endif
  17458  42bf		       85 f0		      sta	pfcolortable
  17459  42c1				   .L01039		;  return thisbank
  17460  42c1
  17461  42c1		       60		      RTS
  17462  42c2				   .
  17463  42c2							; 
  17464  42c2
  17465  42c2				   .__OW2_Colors
  17466  42c2							; __OW2_Colors
  17467  42c2
  17468  42c2				   .L01040		;  pfcolors:
  17469  42c2
  17470  42c2		       a9 18		      lda	# $18
  17471  42c4		       85 08		      sta	COLUPF
  17472  42c6				  -	      ifconst	pfres
  17473  42c6				  -	      lda	#>(pfcolorlabel360-129+pfres*pfwidth)
  17474  42c6					      else
  17475  42c6		       a9 f9		      lda	#>(pfcolorlabel360-81)
  17476  42c8					      endif
  17477  42c8		       85 f1		      sta	pfcolortable+1
  17478  42ca				  -	      ifconst	pfres
  17479  42ca				  -	      lda	#<(pfcolorlabel360-129+pfres*pfwidth)
  17480  42ca					      else
  17481  42ca		       a9 6d		      lda	#<(pfcolorlabel360-81)
  17482  42cc					      endif
  17483  42cc		       85 f0		      sta	pfcolortable
  17484  42ce				   .L01041		;  return thisbank
  17485  42ce
  17486  42ce		       60		      RTS
  17487  42cf				   .
  17488  42cf							; 
  17489  42cf
  17490  42cf				   .__UW1_Colors
  17491  42cf							; __UW1_Colors
  17492  42cf
  17493  42cf				   .L01042		;  pfcolors:
  17494  42cf
  17495  42cf		       a9 a4		      lda	# $A4
  17496  42d1		       85 08		      sta	COLUPF
  17497  42d3				  -	      ifconst	pfres
  17498  42d3				  -	      lda	#>(pfcolorlabel1194-132+pfres*pfwidth)
  17499  42d3					      else
  17500  42d3		       a9 fc		      lda	#>(pfcolorlabel1194-84)
  17501  42d5					      endif
  17502  42d5		       85 f1		      sta	pfcolortable+1
  17503  42d7				  -	      ifconst	pfres
  17504  42d7				  -	      lda	#<(pfcolorlabel1194-132+pfres*pfwidth)
  17505  42d7					      else
  17506  42d7		       a9 0c		      lda	#<(pfcolorlabel1194-84)
  17507  42d9					      endif
  17508  42d9		       85 f0		      sta	pfcolortable
  17509  42db				   .L01043		;  return thisbank
  17510  42db
  17511  42db		       60		      RTS
  17512  42dc				   .
  17513  42dc							; 
  17514  42dc
  17515  42dc				   .__UW2_Colors
  17516  42dc							; __UW2_Colors
  17517  42dc
  17518  42dc				   .L01044		;  pfcolors:
  17519  42dc
  17520  42dc		       a9 04		      lda	# $04
  17521  42de		       85 08		      sta	COLUPF
  17522  42e0				  -	      ifconst	pfres
  17523  42e0				  -	      lda	#>(pfcolorlabel1194-131+pfres*pfwidth)
  17524  42e0					      else
  17525  42e0		       a9 fc		      lda	#>(pfcolorlabel1194-83)
  17526  42e2					      endif
  17527  42e2		       85 f1		      sta	pfcolortable+1
  17528  42e4				  -	      ifconst	pfres
  17529  42e4				  -	      lda	#<(pfcolorlabel1194-131+pfres*pfwidth)
  17530  42e4					      else
  17531  42e4		       a9 0d		      lda	#<(pfcolorlabel1194-83)
  17532  42e6					      endif
  17533  42e6		       85 f0		      sta	pfcolortable
  17534  42e8				   .L01045		;  return thisbank
  17535  42e8
  17536  42e8		       60		      RTS
  17537  42e9				   .
  17538  42e9							; 
  17539  42e9
  17540  42e9				   .__Boss_Colors
  17541  42e9							; __Boss_Colors
  17542  42e9
  17543  42e9				   .L01046		;  pfcolors:
  17544  42e9
  17545  42e9		       a9 04		      lda	# $04
  17546  42eb		       85 08		      sta	COLUPF
  17547  42ed				  -	      ifconst	pfres
  17548  42ed				  -	      lda	#>(pfcolorlabel1194-130+pfres*pfwidth)
  17549  42ed					      else
  17550  42ed		       a9 fc		      lda	#>(pfcolorlabel1194-82)
  17551  42ef					      endif
  17552  42ef		       85 f1		      sta	pfcolortable+1
  17553  42f1				  -	      ifconst	pfres
  17554  42f1				  -	      lda	#<(pfcolorlabel1194-130+pfres*pfwidth)
  17555  42f1					      else
  17556  42f1		       a9 0e		      lda	#<(pfcolorlabel1194-82)
  17557  42f3					      endif
  17558  42f3		       85 f0		      sta	pfcolortable
  17559  42f5				   .L01047		;  return thisbank
  17560  42f5
  17561  42f5		       60		      RTS
  17562  42f6				   .
  17563  42f6							; 
  17564  42f6
  17565  42f6				   .
  17566  42f6							; 
  17567  42f6
  17568  42f6				   .
  17569  42f6							; 
  17570  42f6
  17571  42f6				   .
  17572  42f6							; 
  17573  42f6
  17574  42f6				   .
  17575  42f6							; 
  17576  42f6
  17577  42f6				   .
  17578  42f6							; 
  17579  42f6
  17580  42f6				   .
  17581  42f6							; 
  17582  42f6
  17583  42f6				   .__Game_Over_Screen
  17584  42f6							; __Game_Over_Screen
  17585  42f6
  17586  42f6				   .
  17587  42f6							; 
  17588  42f6
  17589  42f6				   .L01048		;  pfclear
  17590  42f6
  17591  42f6		       a9 00		      LDA	#0
  17592  42f8		       85 ee		      sta	temp7
  17593  42fa		       a9 73		      lda	#>(ret_point78-1)
  17594  42fc		       48		      pha
  17595  42fd		       a9 0f		      lda	#<(ret_point78-1)
  17596  42ff		       48		      pha
  17597  4300		       a9 f2		      lda	#>(pfclear-1)
  17598  4302		       48		      pha
  17599  4303		       a9 8f		      lda	#<(pfclear-1)
  17600  4305		       48		      pha
  17601  4306		       a5 ee		      lda	temp7
  17602  4308		       48		      pha
  17603  4309		       8a		      txa
  17604  430a		       48		      pha
  17605  430b		       a2 08		      ldx	#8
  17606  430d		       4c eb ff 	      jmp	BS_jsr
  17607  4310				   ret_point78
  17608  4310				   .
  17609  4310							; 
  17610  4310
  17611  4310				   .L01049		;  COLUBK  =  $00
  17612  4310
  17613  4310		       a9 00		      LDA	#$00
  17614  4312		       85 09		      STA	COLUBK
  17615  4314				   .
  17616  4314							; 
  17617  4314
  17618  4314				   .L01050		;  gosub __Game_Over_Music
  17619  4314
  17620  4314		       20 28 7f 	      jsr	.__Game_Over_Music
  17621  4317
  17622  4317				   .
  17623  4317							; 
  17624  4317
  17625  4317				   .L01051		;  _Music_Duration  =	1
  17626  4317
  17627  4317		       a9 01		      LDA	#1
  17628  4319		       85 e3		      STA	_Music_Duration
  17629  431b				   .
  17630  431b							; 
  17631  431b
  17632  431b				   .__Gm_Ovr_Scrn_2
  17633  431b							; __Gm_Ovr_Scrn_2
  17634  431b
  17635  431b				   .
  17636  431b							; 
  17637  431b
  17638  431b				   .L01052		;  gosub __Number_Colors_P0  :  gosub __Number_Colors_P1
  17639  431b
  17640  431b		       20 ec 74 	      jsr	.__Number_Colors_P0
  17641  431e		       20 f5 74 	      jsr	.__Number_Colors_P1
  17642  4321
  17643  4321				   .
  17644  4321							; 
  17645  4321
  17646  4321				   .L01053		;  gosub __GA	:  gosub __ME
  17647  4321
  17648  4321		       20 eb 7d 	      jsr	.__GA
  17649  4324		       20 f8 7d 	      jsr	.__ME
  17650  4327
  17651  4327				   .
  17652  4327							; 
  17653  4327
  17654  4327				   .L01054		;  player0x  =  73  :	player1x  =  81
  17655  4327
  17656  4327		       a9 49		      LDA	#73
  17657  4329		       85 80		      STA	player0x
  17658  432b		       a9 51		      LDA	#81
  17659  432d		       85 81		      STA	player1x
  17660  432f				   .
  17661  432f							; 
  17662  432f
  17663  432f				   .L01055		;  player0y  =  32  :	player1y  =  32
  17664  432f
  17665  432f		       a9 20		      LDA	#32
  17666  4331		       85 85		      STA	player0y
  17667  4333		       85 86		      STA	player1y
  17668  4335				   .
  17669  4335							; 
  17670  4335
  17671  4335				   .L01056		;  gosub __Play_Game_Over_Music
  17672  4335
  17673  4335		       20 a3 7e 	      jsr	.__Play_Game_Over_Music
  17674  4338
  17675  4338				   .
  17676  4338							; 
  17677  4338
  17678  4338				   .L01057		;  drawscreen
  17679  4338
  17680  4338		       85 ee		      sta	temp7
  17681  433a		       a9 73		      lda	#>(ret_point79-1)
  17682  433c		       48		      pha
  17683  433d		       a9 4f		      lda	#<(ret_point79-1)
  17684  433f		       48		      pha
  17685  4340		       a9 f4		      lda	#>(drawscreen-1)
  17686  4342		       48		      pha
  17687  4343		       a9 37		      lda	#<(drawscreen-1)
  17688  4345		       48		      pha
  17689  4346		       a5 ee		      lda	temp7
  17690  4348		       48		      pha
  17691  4349		       8a		      txa
  17692  434a		       48		      pha
  17693  434b		       a2 08		      ldx	#8
  17694  434d		       4c eb ff 	      jmp	BS_jsr
  17695  4350				   ret_point79
  17696  4350				   .
  17697  4350							; 
  17698  4350
  17699  4350				   .L01058		;  gosub __OV	:  gosub __ER
  17700  4350
  17701  4350		       20 05 7e 	      jsr	.__OV
  17702  4353		       20 12 7e 	      jsr	.__ER
  17703  4356
  17704  4356				   .
  17705  4356							; 
  17706  4356
  17707  4356				   .L01059		;  player0x  =  73  :	player1x  =  81
  17708  4356
  17709  4356		       a9 49		      LDA	#73
  17710  4358		       85 80		      STA	player0x
  17711  435a		       a9 51		      LDA	#81
  17712  435c		       85 81		      STA	player1x
  17713  435e				   .
  17714  435e							; 
  17715  435e
  17716  435e				   .L01060		;  player0y  =  44  :	player1y  =  44
  17717  435e
  17718  435e		       a9 2c		      LDA	#44
  17719  4360		       85 85		      STA	player0y
  17720  4362		       85 86		      STA	player1y
  17721  4364				   .
  17722  4364							; 
  17723  4364
  17724  4364				   .L01061		;  gosub __Play_Game_Over_Music
  17725  4364
  17726  4364		       20 a3 7e 	      jsr	.__Play_Game_Over_Music
  17727  4367
  17728  4367				   .
  17729  4367							; 
  17730  4367
  17731  4367				   .L01062		;  drawscreen
  17732  4367
  17733  4367		       85 ee		      sta	temp7
  17734  4369		       a9 73		      lda	#>(ret_point80-1)
  17735  436b		       48		      pha
  17736  436c		       a9 7e		      lda	#<(ret_point80-1)
  17737  436e		       48		      pha
  17738  436f		       a9 f4		      lda	#>(drawscreen-1)
  17739  4371		       48		      pha
  17740  4372		       a9 37		      lda	#<(drawscreen-1)
  17741  4374		       48		      pha
  17742  4375		       a5 ee		      lda	temp7
  17743  4377		       48		      pha
  17744  4378		       8a		      txa
  17745  4379		       48		      pha
  17746  437a		       a2 08		      ldx	#8
  17747  437c		       4c eb ff 	      jmp	BS_jsr
  17748  437f				   ret_point80
  17749  437f				   .
  17750  437f							; 
  17751  437f
  17752  437f				   .L01063		;  if _Music_Duration	=  255 then _Level  =  1  :  _Coin_Counter  =  0  :  _Bit3_Super_Mario_Power{3}  =  0  :  _Bit4_Firey_Mario_Power{4}  =  0  :  pfscore2  =  0  :  g  =	0  :  _Bit6_Regular_Mario{6}  =  1  :  _Animation_Timer  =  _World  :  goto __Gm_Ovr_Scrn_3
  17753  437f
  17754  437f		       a5 e3		      LDA	_Music_Duration
  17755  4381		       c9 ff		      CMP	#255
  17756  4383		       d0 27		      BNE	.skipL01063
  17757  4385				   .condpart561
  17758  4385		       a9 01		      LDA	#1
  17759  4387		       85 ea		      STA	_Level
  17760  4389		       a9 00		      LDA	#0
  17761  438b		       85 d6		      STA	_Coin_Counter
  17762  438d		       a5 d7		      LDA	_Bit3_Super_Mario_Power
  17763  438f		       29 f7		      AND	#247
  17764  4391		       85 d7		      STA	_Bit3_Super_Mario_Power
  17765  4393		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
  17766  4395		       29 ef		      AND	#239
  17767  4397		       85 d7		      STA	_Bit4_Firey_Mario_Power
  17768  4399		       a9 00		      LDA	#0
  17769  439b		       85 f3		      STA	pfscore2
  17770  439d		       85 da		      STA	g
  17771  439f		       a5 d7		      LDA	_Bit6_Regular_Mario
  17772  43a1		       09 40		      ORA	#64
  17773  43a3		       85 d7		      STA	_Bit6_Regular_Mario
  17774  43a5		       a5 e9		      LDA	_World
  17775  43a7		       85 d4		      STA	_Animation_Timer
  17776  43a9		       4c af 73 	      jmp	.__Gm_Ovr_Scrn_3
  17777  43ac
  17778  43ac				   .skipL01063
  17779  43ac				   .
  17780  43ac							; 
  17781  43ac
  17782  43ac				   .L01064		;  goto __Gm_Ovr_Scrn_2
  17783  43ac
  17784  43ac		       4c 1b 73 	      jmp	.__Gm_Ovr_Scrn_2
  17785  43af
  17786  43af				   .
  17787  43af							; 
  17788  43af
  17789  43af				   .__Gm_Ovr_Scrn_3
  17790  43af							; __Gm_Ovr_Scrn_3
  17791  43af
  17792  43af				   .
  17793  43af							; 
  17794  43af
  17795  43af				   .L01065		;  gosub __Show_Level
  17796  43af
  17797  43af		       20 6b 74 	      jsr	.__Show_Level
  17798  43b2
  17799  43b2				   .
  17800  43b2							; 
  17801  43b2
  17802  43b2				   .L01066		;  if !joy0up then _Bit0_Mario_Fireball_Going_Down{0}	=  0
  17803  43b2
  17804  43b2		       a9 10		      lda	#$10
  17805  43b4		       2c 80 02 	      bit	SWCHA
  17806  43b7		       f0 06		      BEQ	.skipL01066
  17807  43b9				   .condpart562
  17808  43b9		       a5 da		      LDA	_Bit0_Mario_Fireball_Going_Down
  17809  43bb		       29 fe		      AND	#254
  17810  43bd		       85 da		      STA	_Bit0_Mario_Fireball_Going_Down
  17811  43bf				   .skipL01066
  17812  43bf				   .
  17813  43bf							; 
  17814  43bf
  17815  43bf				   .L01067		;  if !joy0down then _Bit1_Mario_Fireball_Going_Up{1}	=  0
  17816  43bf
  17817  43bf		       a9 20		      lda	#$20
  17818  43c1		       2c 80 02 	      bit	SWCHA
  17819  43c4		       f0 06		      BEQ	.skipL01067
  17820  43c6				   .condpart563
  17821  43c6		       a5 da		      LDA	_Bit1_Mario_Fireball_Going_Up
  17822  43c8		       29 fd		      AND	#253
  17823  43ca		       85 da		      STA	_Bit1_Mario_Fireball_Going_Up
  17824  43cc				   .skipL01067
  17825  43cc				   .
  17826  43cc							; 
  17827  43cc
  17828  43cc				   .L01068		;  if joy0up  &&  !_Bit0_Mario_Fireball_Going_Down{0} then _Level  =  _Level  +  1  :	_Bit0_Mario_Fireball_Going_Down{0}  =  1
  17829  43cc
  17830  43cc		       a9 10		      lda	#$10
  17831  43ce		       2c 80 02 	      bit	SWCHA
  17832  43d1		       d0 0d		      BNE	.skipL01068
  17833  43d3				   .condpart564
  17834  43d3		       a5 da		      LDA	_Bit0_Mario_Fireball_Going_Down
  17835  43d5		       4a		      LSR
  17836  43d6		       b0 08		      BCS	.skip564then
  17837  43d8				   .condpart565
  17838  43d8		       e6 ea		      INC	_Level
  17839  43da		       a5 da		      LDA	_Bit0_Mario_Fireball_Going_Down
  17840  43dc		       09 01		      ORA	#1
  17841  43de		       85 da		      STA	_Bit0_Mario_Fireball_Going_Down
  17842  43e0				   .skip564then
  17843  43e0				   .skipL01068
  17844  43e0				   .
  17845  43e0							; 
  17846  43e0
  17847  43e0				   .L01069		;  if joy0down  &&  !_Bit1_Mario_Fireball_Going_Up{1} then _Level  =  _Level  -  1  :	_Bit1_Mario_Fireball_Going_Up{1}  =  1
  17848  43e0
  17849  43e0		       a9 20		      lda	#$20
  17850  43e2		       2c 80 02 	      bit	SWCHA
  17851  43e5		       d0 0e		      BNE	.skipL01069
  17852  43e7				   .condpart566
  17853  43e7		       a5 da		      LDA	_Bit1_Mario_Fireball_Going_Up
  17854  43e9		       29 02		      AND	#2
  17855  43eb		       d0 08		      BNE	.skip566then
  17856  43ed				   .condpart567
  17857  43ed		       c6 ea		      DEC	_Level
  17858  43ef		       a5 da		      LDA	_Bit1_Mario_Fireball_Going_Up
  17859  43f1		       09 02		      ORA	#2
  17860  43f3		       85 da		      STA	_Bit1_Mario_Fireball_Going_Up
  17861  43f5				   .skip566then
  17862  43f5				   .skipL01069
  17863  43f5				   .
  17864  43f5							; 
  17865  43f5
  17866  43f5				   .L01070		;  if joy0fire then goto __Gm_Ovr_Scrn_4
  17867  43f5
  17868  43f5		       24 0c		      bit	INPT4
  17869  43f7		       30 03		      BMI	.skipL01070
  17870  43f9				   .condpart568
  17871  43f9		       4c 37 74 	      jmp	.__Gm_Ovr_Scrn_4
  17872  43fc
  17873  43fc				   .skipL01070
  17874  43fc				   .
  17875  43fc							; 
  17876  43fc
  17877  43fc				   .L01071		;  if _Level  =  0 then _Level  =  4  :  _World  =  _World  -	1
  17878  43fc
  17879  43fc		       a5 ea		      LDA	_Level
  17880  43fe		       c9 00		      CMP	#0
  17881  4400		       d0 06		      BNE	.skipL01071
  17882  4402				   .condpart569
  17883  4402		       a9 04		      LDA	#4
  17884  4404		       85 ea		      STA	_Level
  17885  4406		       c6 e9		      DEC	_World
  17886  4408				   .skipL01071
  17887  4408				   .
  17888  4408							; 
  17889  4408
  17890  4408				   .L01072		;  if _Level  =  5 then _Level  =  1  :  _World  =  _World  +	1
  17891  4408
  17892  4408		       a5 ea		      LDA	_Level
  17893  440a		       c9 05		      CMP	#5
  17894  440c		       d0 06		      BNE	.skipL01072
  17895  440e				   .condpart570
  17896  440e		       a9 01		      LDA	#1
  17897  4410		       85 ea		      STA	_Level
  17898  4412		       e6 e9		      INC	_World
  17899  4414				   .skipL01072
  17900  4414				   .
  17901  4414							; 
  17902  4414
  17903  4414				   .L01073		;  if _World  =  0 then _World  =  _Animation_Timer  :  _Level  =  1
  17904  4414
  17905  4414		       a5 e9		      LDA	_World
  17906  4416		       c9 00		      CMP	#0
  17907  4418		       d0 08		      BNE	.skipL01073
  17908  441a				   .condpart571
  17909  441a		       a5 d4		      LDA	_Animation_Timer
  17910  441c		       85 e9		      STA	_World
  17911  441e		       a9 01		      LDA	#1
  17912  4420		       85 ea		      STA	_Level
  17913  4422				   .skipL01073
  17914  4422				   .
  17915  4422							; 
  17916  4422
  17917  4422				   .L01074		;  if _World  =  _Animation_Timer  &&	_Level	>  1 then _World  =  1	:  _Level  =  1
  17918  4422
  17919  4422		       a5 e9		      LDA	_World
  17920  4424		       c5 d4		      CMP	_Animation_Timer
  17921  4426		       d0 0c		      BNE	.skipL01074
  17922  4428				   .condpart572
  17923  4428		       a9 01		      LDA	#1
  17924  442a		       c5 ea		      CMP	_Level
  17925  442c		       b0 06		      BCS	.skip572then
  17926  442e				   .condpart573
  17927  442e		       a9 01		      LDA	#1
  17928  4430		       85 e9		      STA	_World
  17929  4432		       85 ea		      STA	_Level
  17930  4434				   .skip572then
  17931  4434				   .skipL01074
  17932  4434				   .
  17933  4434							; 
  17934  4434
  17935  4434				   .L01075		;  goto __Gm_Ovr_Scrn_3
  17936  4434
  17937  4434		       4c af 73 	      jmp	.__Gm_Ovr_Scrn_3
  17938  4437
  17939  4437				   .
  17940  4437							; 
  17941  4437
  17942  4437				   .__Gm_Ovr_Scrn_4
  17943  4437							; __Gm_Ovr_Scrn_4
  17944  4437
  17945  4437				   .
  17946  4437							; 
  17947  4437
  17948  4437				   .L01076		;  if switchleftb then _Lives_Counter	=  3 else _Lives_Counter  =  5
  17949  4437
  17950  4437		       2c 82 02 	      bit	SWCHB
  17951  443a		       70 07		      BVS	.skipL01076
  17952  443c				   .condpart574
  17953  443c		       a9 03		      LDA	#3
  17954  443e		       85 df		      STA	_Lives_Counter
  17955  4440		       4c 47 74 	      jmp	.skipelse75
  17956  4443				   .skipL01076
  17957  4443		       a9 05		      LDA	#5
  17958  4445		       85 df		      STA	_Lives_Counter
  17959  4447				   .skipelse75
  17960  4447				   .
  17961  4447							; 
  17962  4447
  17963  4447				   .L01077		;  g  =  0  :	_Animation_Timer  =  0	:  score  =  0
  17964  4447
  17965  4447		       a9 00		      LDA	#0
  17966  4449		       85 da		      STA	g
  17967  444b		       85 d4		      STA	_Animation_Timer
  17968  444d		       a9 00		      LDA	#$00
  17969  444f		       85 95		      STA	score+2
  17970  4451		       a9 00		      LDA	#$00
  17971  4453		       85 94		      STA	score+1
  17972  4455		       a9 00		      LDA	#$00
  17973  4457		       85 93		      STA	score
  17974  4459				   .
  17975  4459							; 
  17976  4459
  17977  4459				   .L01078		;  goto __Init bank1
  17978  4459
  17979  4459		       85 ee		      sta	temp7
  17980  445b		       a9 10		      lda	#>(.__Init-1)
  17981  445d		       48		      pha
  17982  445e		       a9 64		      lda	#<(.__Init-1)
  17983  4460		       48		      pha
  17984  4461		       a5 ee		      lda	temp7
  17985  4463		       48		      pha
  17986  4464		       8a		      txa
  17987  4465		       48		      pha
  17988  4466		       a2 01		      ldx	#1
  17989  4468		       4c eb ff 	      jmp	BS_jsr
  17990  446b				   .
  17991  446b							; 
  17992  446b
  17993  446b				   .
  17994  446b							; 
  17995  446b
  17996  446b				   .
  17997  446b							; 
  17998  446b
  17999  446b				   .
  18000  446b							; 
  18001  446b
  18002  446b				   .
  18003  446b							; 
  18004  446b
  18005  446b				   .
  18006  446b							; 
  18007  446b
  18008  446b				   .
  18009  446b							; 
  18010  446b
  18011  446b				   .
  18012  446b							; 
  18013  446b
  18014  446b				   .
  18015  446b							; 
  18016  446b
  18017  446b				   .
  18018  446b							; 
  18019  446b
  18020  446b				   .__Show_Level
  18021  446b							; __Show_Level
  18022  446b
  18023  446b				   .
  18024  446b							; 
  18025  446b
  18026  446b				   .L01079		;  COLUBK  =  $00  :  COLUPF  =  $00  :  CTRLPF  =  $11  :  x	=  _World  -  1  :  y  =  _Level  -  1
  18027  446b
  18028  446b		       a9 00		      LDA	#$00
  18029  446d		       85 09		      STA	COLUBK
  18030  446f		       85 08		      STA	COLUPF
  18031  4471		       a9 11		      LDA	#$11
  18032  4473		       85 0a		      STA	CTRLPF
  18033  4475		       a5 e9		      LDA	_World
  18034  4477		       38		      SEC
  18035  4478		       e9 01		      SBC	#1
  18036  447a		       85 eb		      STA	x
  18037  447c		       a5 ea		      LDA	_Level
  18038  447e		       38		      SEC
  18039  447f		       e9 01		      SBC	#1
  18040  4481		       85 ec		      STA	y
  18041  4483				   .
  18042  4483							; 
  18043  4483
  18044  4483				   .L01080		;  gosub __Number_Colors_P0  :  gosub __Number_Colors_P1
  18045  4483
  18046  4483		       20 ec 74 	      jsr	.__Number_Colors_P0
  18047  4486		       20 f5 74 	      jsr	.__Number_Colors_P1
  18048  4489
  18049  4489				   .
  18050  4489							; 
  18051  4489
  18052  4489				   .L01081		;  on x gosub __1World __2World __3World __4World
  18053  4489
  18054  4489		       a9 74		      lda	#>(ongosub10-1)
  18055  448b		       48		      PHA
  18056  448c		       a9 a1		      lda	#<(ongosub10-1)
  18057  448e		       48		      PHA
  18058  448f		       a6 eb		      LDX	x
  18059  4491		       bd 9a 74 	      LDA	.L01081jumptablehi,x
  18060  4494		       48		      PHA
  18061  4495		       bd 9e 74 	      LDA	.L01081jumptablelo,x
  18062  4498		       48		      PHA
  18063  4499		       60		      RTS
  18064  449a				   .L01081jumptablehi
  18065  449a		       7c		      .byte.b	>(.__1World-1)
  18066  449b		       7d		      .byte.b	>(.__2World-1)
  18067  449c		       7d		      .byte.b	>(.__3World-1)
  18068  449d		       7d		      .byte.b	>(.__4World-1)
  18069  449e				   .L01081jumptablelo
  18070  449e		       f8		      .byte.b	<(.__1World-1)
  18071  449f		       05		      .byte.b	<(.__2World-1)
  18072  44a0		       12		      .byte.b	<(.__3World-1)
  18073  44a1		       1f		      .byte.b	<(.__4World-1)
  18074  44a2				   ongosub10
  18075  44a2				   .
  18076  44a2							; 
  18077  44a2
  18078  44a2				   .L01082		;  on y gosub __1Level __2Level __3Level __4Level
  18079  44a2
  18080  44a2		       a9 74		      lda	#>(ongosub11-1)
  18081  44a4		       48		      PHA
  18082  44a5		       a9 ba		      lda	#<(ongosub11-1)
  18083  44a7		       48		      PHA
  18084  44a8		       a6 ec		      LDX	y
  18085  44aa		       bd b3 74 	      LDA	.L01082jumptablehi,x
  18086  44ad		       48		      PHA
  18087  44ae		       bd b7 74 	      LDA	.L01082jumptablelo,x
  18088  44b1		       48		      PHA
  18089  44b2		       60		      RTS
  18090  44b3				   .L01082jumptablehi
  18091  44b3		       7d		      .byte.b	>(.__1Level-1)
  18092  44b4		       7d		      .byte.b	>(.__2Level-1)
  18093  44b5		       7d		      .byte.b	>(.__3Level-1)
  18094  44b6		       7d		      .byte.b	>(.__4Level-1)
  18095  44b7				   .L01082jumptablelo
  18096  44b7		       2c		      .byte.b	<(.__1Level-1)
  18097  44b8		       39		      .byte.b	<(.__2Level-1)
  18098  44b9		       46		      .byte.b	<(.__3Level-1)
  18099  44ba		       53		      .byte.b	<(.__4Level-1)
  18100  44bb				   ongosub11
  18101  44bb				   .
  18102  44bb							; 
  18103  44bb
  18104  44bb				   .L01083		;  player0x  =  73  :	player1x  =  81
  18105  44bb
  18106  44bb		       a9 49		      LDA	#73
  18107  44bd		       85 80		      STA	player0x
  18108  44bf		       a9 51		      LDA	#81
  18109  44c1		       85 81		      STA	player1x
  18110  44c3				   .
  18111  44c3							; 
  18112  44c3
  18113  44c3				   .L01084		;  player0y  =  32  :	player1y  =  32
  18114  44c3
  18115  44c3		       a9 20		      LDA	#32
  18116  44c5		       85 85		      STA	player0y
  18117  44c7		       85 86		      STA	player1y
  18118  44c9				   .
  18119  44c9							; 
  18120  44c9
  18121  44c9				   .L01085		;  if switchreset then reboot
  18122  44c9
  18123  44c9		       a9 01		      lda	#1
  18124  44cb		       2c 82 02 	      bit	SWCHB
  18125  44ce		       d0 03		      BNE	.skipL01085
  18126  44d0				   .condpart575
  18127  44d0		       6c fc ff 	      JMP	($FFFC)
  18128  44d3				   .skipL01085
  18129  44d3				   .
  18130  44d3							; 
  18131  44d3
  18132  44d3				   .L01086		;  drawscreen
  18133  44d3
  18134  44d3		       85 ee		      sta	temp7
  18135  44d5		       a9 74		      lda	#>(ret_point81-1)
  18136  44d7		       48		      pha
  18137  44d8		       a9 ea		      lda	#<(ret_point81-1)
  18138  44da		       48		      pha
  18139  44db		       a9 f4		      lda	#>(drawscreen-1)
  18140  44dd		       48		      pha
  18141  44de		       a9 37		      lda	#<(drawscreen-1)
  18142  44e0		       48		      pha
  18143  44e1		       a5 ee		      lda	temp7
  18144  44e3		       48		      pha
  18145  44e4		       8a		      txa
  18146  44e5		       48		      pha
  18147  44e6		       a2 08		      ldx	#8
  18148  44e8		       4c eb ff 	      jmp	BS_jsr
  18149  44eb				   ret_point81
  18150  44eb				   .
  18151  44eb							; 
  18152  44eb
  18153  44eb				   .L01087		;  return thisbank
  18154  44eb
  18155  44eb		       60		      RTS
  18156  44ec				   .
  18157  44ec							; 
  18158  44ec
  18159  44ec				   .
  18160  44ec							; 
  18161  44ec
  18162  44ec				   .
  18163  44ec							; 
  18164  44ec
  18165  44ec				   .
  18166  44ec							; 
  18167  44ec
  18168  44ec				   .
  18169  44ec							; 
  18170  44ec
  18171  44ec				   .
  18172  44ec							; 
  18173  44ec
  18174  44ec				   .
  18175  44ec							; 
  18176  44ec
  18177  44ec				   .__Number_Colors_P0
  18178  44ec							; __Number_Colors_P0
  18179  44ec
  18180  44ec				   .L01088		;  player0color:
  18181  44ec
  18182  44ec		       a2 88		      LDX	#<playercolorL01088_0
  18183  44ee		       86 90		      STX	player0color
  18184  44f0		       a9 fc		      LDA	#>playercolorL01088_0
  18185  44f2		       85 91		      STA	player0color+1
  18186  44f4				   .L01089		;  return thisbank
  18187  44f4
  18188  44f4		       60		      RTS
  18189  44f5				   .
  18190  44f5							; 
  18191  44f5
  18192  44f5				   .__Number_Colors_P1
  18193  44f5							; __Number_Colors_P1
  18194  44f5
  18195  44f5				   .L01090		;  player1color:
  18196  44f5
  18197  44f5		       a2 90		      LDX	#<playercolorL01090_1
  18198  44f7		       86 87		      STX	player1color
  18199  44f9		       a9 fc		      LDA	#>playercolorL01090_1
  18200  44fb		       85 88		      STA	player1color+1
  18201  44fd				   .L01091		;  return thisbank
  18202  44fd
  18203  44fd		       60		      RTS
  18204  44fe				   .
  18205  44fe							; 
  18206  44fe
  18207  44fe				   .
  18208  44fe							; 
  18209  44fe
  18210  44fe				   .
  18211  44fe							; 
  18212  44fe
  18213  44fe				   .
  18214  44fe							; 
  18215  44fe
  18216  44fe				   .
  18217  44fe							; 
  18218  44fe
  18219  44fe				   .
  18220  44fe							; 
  18221  44fe
  18222  44fe				   .
  18223  44fe							; 
  18224  44fe
  18225  44fe				   .__Bowser_Jr
  18226  44fe							; __Bowser_Jr
  18227  44fe
  18228  44fe				   .
  18229  44fe							; 
  18230  44fe
  18231  44fe				   .L01092		;  if ballx  >  0  &&	_Farthest_Traveled_On_Level  <	3 then _Level_Data_Pointer  =  5  :  goto __Bowser_Jr_2
  18232  44fe
  18233  44fe		       a9 00		      LDA	#0
  18234  4500		       c5 84		      CMP	ballx
  18235  4502		       b0 0d		      BCS	.skipL01092
  18236  4504				   .condpart576
  18237  4504		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18238  4506		       c9 03		      CMP	#3
  18239  4508		       b0 07		      BCS	.skip576then
  18240  450a				   .condpart577
  18241  450a		       a9 05		      LDA	#5
  18242  450c		       85 d5		      STA	_Level_Data_Pointer
  18243  450e		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18244  4511
  18245  4511				   .skip576then
  18246  4511				   .skipL01092
  18247  4511				   .
  18248  4511							; 
  18249  4511
  18250  4511				   .__Bowser_Jr_1
  18251  4511							; __Bowser_Jr_1
  18252  4511
  18253  4511				   .
  18254  4511							; 
  18255  4511
  18256  4511				   .L01093		;  if _Farthest_Traveled_On_Level  =  0 then goto __Bowser_Jr_Moving
  18257  4511
  18258  4511		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18259  4513		       c9 00		      CMP	#0
  18260  4515		       d0 03		      BNE	.skipL01093
  18261  4517				   .condpart578
  18262  4517		       4c 90 75 	      jmp	.__Bowser_Jr_Moving
  18263  451a
  18264  451a				   .skipL01093
  18265  451a				   .
  18266  451a							; 
  18267  451a
  18268  451a				   .L01094		;  if _Farthest_Traveled_On_Level  >  0  &&  _Farthest_Traveled_On_Level  <  11 then goto __Bowser_Jr_Jumping
  18269  451a
  18270  451a		       a9 00		      LDA	#0
  18271  451c		       c5 e2		      CMP	_Farthest_Traveled_On_Level
  18272  451e		       b0 09		      BCS	.skipL01094
  18273  4520				   .condpart579
  18274  4520		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18275  4522		       c9 0b		      CMP	#11
  18276  4524		       b0 03		      BCS	.skip579then
  18277  4526				   .condpart580
  18278  4526		       4c 74 76 	      jmp	.__Bowser_Jr_Jumping
  18279  4529
  18280  4529				   .skip579then
  18281  4529				   .skipL01094
  18282  4529				   .
  18283  4529							; 
  18284  4529
  18285  4529				   .L01095		;  if _Farthest_Traveled_On_Level  =  11  ||  _Farthest_Traveled_On_Level  =  12 then goto __Bowser_Jr_Shell
  18286  4529
  18287  4529		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18288  452b		       c9 0b		      CMP	#11
  18289  452d		       d0 03		      BNE	.skipL01095
  18290  452f				   .condpart581
  18291  452f		       4c 38 75 	      jmp	.condpart582
  18292  4532				   .skipL01095
  18293  4532		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18294  4534		       c9 0c		      CMP	#12
  18295  4536		       d0 03		      BNE	.skip157OR
  18296  4538				   .condpart582
  18297  4538		       4c 28 77 	      jmp	.__Bowser_Jr_Shell
  18298  453b
  18299  453b				   .skip157OR
  18300  453b				   .
  18301  453b							; 
  18302  453b
  18303  453b				   .L01096		;  if _Farthest_Traveled_On_Level  >  12 then goto __Bowser_Jr_Standing
  18304  453b
  18305  453b		       a9 0c		      LDA	#12
  18306  453d		       c5 e2		      CMP	_Farthest_Traveled_On_Level
  18307  453f		       b0 03		      BCS	.skipL01096
  18308  4541				   .condpart583
  18309  4541		       4c 60 77 	      jmp	.__Bowser_Jr_Standing
  18310  4544
  18311  4544				   .skipL01096
  18312  4544				   .
  18313  4544							; 
  18314  4544
  18315  4544				   .__Bowser_Jr_2
  18316  4544							; __Bowser_Jr_2
  18317  4544
  18318  4544				   .
  18319  4544							; 
  18320  4544
  18321  4544				   .L01097		;  on _Level_Data_Pointer gosub __BJC1 __BJC1 __BJCColor __BJJColor __BJSC __BJDC
  18322  4544
  18323  4544		       a9 75		      lda	#>(ongosub12-1)
  18324  4546		       48		      PHA
  18325  4547		       a9 60		      lda	#<(ongosub12-1)
  18326  4549		       48		      PHA
  18327  454a		       a6 d5		      LDX	_Level_Data_Pointer
  18328  454c		       bd 55 75 	      LDA	.L01097jumptablehi,x
  18329  454f		       48		      PHA
  18330  4550		       bd 5b 75 	      LDA	.L01097jumptablelo,x
  18331  4553		       48		      PHA
  18332  4554		       60		      RTS
  18333  4555				   .L01097jumptablehi
  18334  4555		       7e		      .byte.b	>(.__BJC1-1)
  18335  4556		       7e		      .byte.b	>(.__BJC1-1)
  18336  4557		       7e		      .byte.b	>(.__BJCColor-1)
  18337  4558		       7e		      .byte.b	>(.__BJJColor-1)
  18338  4559		       7e		      .byte.b	>(.__BJSC-1)
  18339  455a		       7e		      .byte.b	>(.__BJDC-1)
  18340  455b				   .L01097jumptablelo
  18341  455b		       1e		      .byte.b	<(.__BJC1-1)
  18342  455c		       1e		      .byte.b	<(.__BJC1-1)
  18343  455d		       4a		      .byte.b	<(.__BJCColor-1)
  18344  455e		       60		      .byte.b	<(.__BJJColor-1)
  18345  455f		       8c		      .byte.b	<(.__BJSC-1)
  18346  4560		       76		      .byte.b	<(.__BJDC-1)
  18347  4561				   ongosub12
  18348  4561				   .
  18349  4561							; 
  18350  4561
  18351  4561				   .L01098		;  on _Level_Data_Pointer gosub __BJ1 __BJ2 __BJC __BJJ __BJS __BJD
  18352  4561
  18353  4561		       a9 75		      lda	#>(ongosub13-1)
  18354  4563		       48		      PHA
  18355  4564		       a9 7d		      lda	#<(ongosub13-1)
  18356  4566		       48		      PHA
  18357  4567		       a6 d5		      LDX	_Level_Data_Pointer
  18358  4569		       bd 72 75 	      LDA	.L01098jumptablehi,x
  18359  456c		       48		      PHA
  18360  456d		       bd 78 75 	      LDA	.L01098jumptablelo,x
  18361  4570		       48		      PHA
  18362  4571		       60		      RTS
  18363  4572				   .L01098jumptablehi
  18364  4572		       7e		      .byte.b	>(.__BJ1-1)
  18365  4573		       7e		      .byte.b	>(.__BJ2-1)
  18366  4574		       7e		      .byte.b	>(.__BJC-1)
  18367  4575		       7e		      .byte.b	>(.__BJJ-1)
  18368  4576		       7e		      .byte.b	>(.__BJS-1)
  18369  4577		       7e		      .byte.b	>(.__BJD-1)
  18370  4578				   .L01098jumptablelo
  18371  4578		       30		      .byte.b	<(.__BJ1-1)
  18372  4579		       3d		      .byte.b	<(.__BJ2-1)
  18373  457a		       53		      .byte.b	<(.__BJC-1)
  18374  457b		       69		      .byte.b	<(.__BJJ-1)
  18375  457c		       95		      .byte.b	<(.__BJS-1)
  18376  457d		       7f		      .byte.b	<(.__BJD-1)
  18377  457e				   ongosub13
  18378  457e				   .
  18379  457e							; 
  18380  457e
  18381  457e				   .L01099		;  goto __Main_Loop bank1
  18382  457e
  18383  457e		       85 ee		      sta	temp7
  18384  4580		       a9 10		      lda	#>(.__Main_Loop-1)
  18385  4582		       48		      pha
  18386  4583		       a9 b0		      lda	#<(.__Main_Loop-1)
  18387  4585		       48		      pha
  18388  4586		       a5 ee		      lda	temp7
  18389  4588		       48		      pha
  18390  4589		       8a		      txa
  18391  458a		       48		      pha
  18392  458b		       a2 01		      ldx	#1
  18393  458d		       4c eb ff 	      jmp	BS_jsr
  18394  4590				   .
  18395  4590							; 
  18396  4590
  18397  4590				   .__Bowser_Jr_Moving
  18398  4590							; __Bowser_Jr_Moving
  18399  4590
  18400  4590				   .
  18401  4590							; 
  18402  4590
  18403  4590				   .L01100		;  if !_Bit3_Enemy_Direction{3} then x  =  player1x  -  3  :  y  =   ( x  -  13 )  / 4 else x	=  player1x  +	3  :  y  =  x / 4
  18404  4590
  18405  4590		       a5 da		      LDA	_Bit3_Enemy_Direction
  18406  4592		       29 08		      AND	#8
  18407  4594		       d0 13		      BNE	.skipL01100
  18408  4596				   .condpart584
  18409  4596		       a5 81		      LDA	player1x
  18410  4598		       38		      SEC
  18411  4599		       e9 03		      SBC	#3
  18412  459b		       85 eb		      STA	x
  18413  459d							; complex statement detected
  18414  459d		       a5 eb		      LDA	x
  18415  459f		       38		      SEC
  18416  45a0		       e9 0d		      SBC	#13
  18417  45a2		       4a		      lsr
  18418  45a3		       4a		      lsr
  18419  45a4		       85 ec		      STA	y
  18420  45a6		       4c b6 75 	      jmp	.skipelse76
  18421  45a9				   .skipL01100
  18422  45a9		       a5 81		      LDA	player1x
  18423  45ab		       18		      CLC
  18424  45ac		       69 03		      ADC	#3
  18425  45ae		       85 eb		      STA	x
  18426  45b0		       a5 eb		      LDA	x
  18427  45b2		       4a		      lsr
  18428  45b3		       4a		      lsr
  18429  45b4		       85 ec		      STA	y
  18430  45b6				   .skipelse76
  18431  45b6				   .
  18432  45b6							; 
  18433  45b6
  18434  45b6				   .L01101		;  if _Animation_Timer  >  3 then _Level_Data_Pointer	=  1 else _Level_Data_Pointer  =  0
  18435  45b6
  18436  45b6		       a9 03		      LDA	#3
  18437  45b8		       c5 d4		      CMP	_Animation_Timer
  18438  45ba		       b0 07		      BCS	.skipL01101
  18439  45bc				   .condpart585
  18440  45bc		       a9 01		      LDA	#1
  18441  45be		       85 d5		      STA	_Level_Data_Pointer
  18442  45c0		       4c c7 75 	      jmp	.skipelse77
  18443  45c3				   .skipL01101
  18444  45c3		       a9 00		      LDA	#0
  18445  45c5		       85 d5		      STA	_Level_Data_Pointer
  18446  45c7				   .skipelse77
  18447  45c7				   .
  18448  45c7							; 
  18449  45c7
  18450  45c7				   .__Bowser_Jr_Moving_2
  18451  45c7							; __Bowser_Jr_Moving_2
  18452  45c7
  18453  45c7				   .
  18454  45c7							; 
  18455  45c7
  18456  45c7				   .L01102		;  if pfread ( y , 9 )  then gosub __Change_Bowser_Jr_Direction  :  goto __Bowser_Jr_2
  18457  45c7
  18458  45c7		       a5 ec		      LDA	y
  18459  45c9		       a0 09		      LDY	#9
  18460  45cb		       85 ee		      sta	temp7
  18461  45cd		       a9 75		      lda	#>(ret_point82-1)
  18462  45cf		       48		      pha
  18463  45d0		       a9 e2		      lda	#<(ret_point82-1)
  18464  45d2		       48		      pha
  18465  45d3		       a9 f2		      lda	#>(pfread-1)
  18466  45d5		       48		      pha
  18467  45d6		       a9 ab		      lda	#<(pfread-1)
  18468  45d8		       48		      pha
  18469  45d9		       a5 ee		      lda	temp7
  18470  45db		       48		      pha
  18471  45dc		       8a		      txa
  18472  45dd		       48		      pha
  18473  45de		       a2 08		      ldx	#8
  18474  45e0		       4c eb ff 	      jmp	BS_jsr
  18475  45e3				   ret_point82
  18476  45e3		       d0 06		      BNE	.skipL01102
  18477  45e5				   .condpart586
  18478  45e5		       20 5e 76 	      jsr	.__Change_Bowser_Jr_Direction
  18479  45e8		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18480  45eb
  18481  45eb				   .skipL01102
  18482  45eb				   .
  18483  45eb							; 
  18484  45eb
  18485  45eb				   .L01103		;  if !pfread ( y , 10 )  then gosub __Change_Bowser_Jr_Direction  :  goto __Bowser_Jr_2
  18486  45eb
  18487  45eb		       a5 ec		      LDA	y
  18488  45ed		       a0 0a		      LDY	#10
  18489  45ef		       85 ee		      sta	temp7
  18490  45f1		       a9 76		      lda	#>(ret_point83-1)
  18491  45f3		       48		      pha
  18492  45f4		       a9 06		      lda	#<(ret_point83-1)
  18493  45f6		       48		      pha
  18494  45f7		       a9 f2		      lda	#>(pfread-1)
  18495  45f9		       48		      pha
  18496  45fa		       a9 ab		      lda	#<(pfread-1)
  18497  45fc		       48		      pha
  18498  45fd		       a5 ee		      lda	temp7
  18499  45ff		       48		      pha
  18500  4600		       8a		      txa
  18501  4601		       48		      pha
  18502  4602		       a2 08		      ldx	#8
  18503  4604		       4c eb ff 	      jmp	BS_jsr
  18504  4607				   ret_point83
  18505  4607		       f0 06		      BEQ	.skipL01103
  18506  4609				   .condpart587
  18507  4609		       20 5e 76 	      jsr	.__Change_Bowser_Jr_Direction
  18508  460c		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18509  460f
  18510  460f				   .skipL01103
  18511  460f				   .
  18512  460f							; 
  18513  460f
  18514  460f				   .L01104		;  player1x  =  x
  18515  460f
  18516  460f		       a5 eb		      LDA	x
  18517  4611		       85 81		      STA	player1x
  18518  4613				   .
  18519  4613							; 
  18520  4613
  18521  4613				   .L01105		;  if _Enemy_Momentum	<  1  &&  _Farthest_Traveled_On_Level  =  12 then _Farthest_Traveled_On_Level  =  13  :  _Level_Data_Pointer  =  0  :  _Enemy_Momentum	=  8
  18522  4613
  18523  4613		       a5 dd		      LDA	_Enemy_Momentum
  18524  4615		       c9 01		      CMP	#1
  18525  4617		       b0 12		      BCS	.skipL01105
  18526  4619				   .condpart588
  18527  4619		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18528  461b		       c9 0c		      CMP	#12
  18529  461d		       d0 0c		      BNE	.skip588then
  18530  461f				   .condpart589
  18531  461f		       a9 0d		      LDA	#13
  18532  4621		       85 e2		      STA	_Farthest_Traveled_On_Level
  18533  4623		       a9 00		      LDA	#0
  18534  4625		       85 d5		      STA	_Level_Data_Pointer
  18535  4627		       a9 08		      LDA	#8
  18536  4629		       85 dd		      STA	_Enemy_Momentum
  18537  462b				   .skip588then
  18538  462b				   .skipL01105
  18539  462b				   .
  18540  462b							; 
  18541  462b
  18542  462b				   .L01106		;  if _Farthest_Traveled_On_Level  =  0  &&  _Animation_Timer	>  4  &&  _Music_Duration  =  3 then _Farthest_Traveled_On_Level  =  1
  18543  462b
  18544  462b		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18545  462d		       c9 00		      CMP	#0
  18546  462f		       d0 10		      BNE	.skipL01106
  18547  4631				   .condpart590
  18548  4631		       a9 04		      LDA	#4
  18549  4633		       c5 d4		      CMP	_Animation_Timer
  18550  4635		       b0 0a		      BCS	.skip590then
  18551  4637				   .condpart591
  18552  4637		       a5 e3		      LDA	_Music_Duration
  18553  4639		       c9 03		      CMP	#3
  18554  463b		       d0 04		      BNE	.skip591then
  18555  463d				   .condpart592
  18556  463d		       a9 01		      LDA	#1
  18557  463f		       85 e2		      STA	_Farthest_Traveled_On_Level
  18558  4641				   .skip591then
  18559  4641				   .skip590then
  18560  4641				   .skipL01106
  18561  4641				   .
  18562  4641							; 
  18563  4641
  18564  4641				   .L01107		;  if _Farthest_Traveled_On_Level  =  11  &&  _Animation_Timer  >  4  &&  _Music_Duration  =  3 then _Farthest_Traveled_On_Level  =  12  :  _Enemy_Momentum  =  6
  18565  4641
  18566  4641		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18567  4643		       c9 0b		      CMP	#11
  18568  4645		       d0 14		      BNE	.skipL01107
  18569  4647				   .condpart593
  18570  4647		       a9 04		      LDA	#4
  18571  4649		       c5 d4		      CMP	_Animation_Timer
  18572  464b		       b0 0e		      BCS	.skip593then
  18573  464d				   .condpart594
  18574  464d		       a5 e3		      LDA	_Music_Duration
  18575  464f		       c9 03		      CMP	#3
  18576  4651		       d0 08		      BNE	.skip594then
  18577  4653				   .condpart595
  18578  4653		       a9 0c		      LDA	#12
  18579  4655		       85 e2		      STA	_Farthest_Traveled_On_Level
  18580  4657		       a9 06		      LDA	#6
  18581  4659		       85 dd		      STA	_Enemy_Momentum
  18582  465b				   .skip594then
  18583  465b				   .skip593then
  18584  465b				   .skipL01107
  18585  465b				   .
  18586  465b							; 
  18587  465b
  18588  465b				   .L01108		;  goto __Bowser_Jr_2
  18589  465b
  18590  465b		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18591  465e
  18592  465e				   .
  18593  465e							; 
  18594  465e
  18595  465e				   .__Change_Bowser_Jr_Direction
  18596  465e							; __Change_Bowser_Jr_Direction
  18597  465e
  18598  465e				   .
  18599  465e							; 
  18600  465e
  18601  465e				   .L01109		;  if _Bit3_Enemy_Direction{3} then _Bit3_Enemy_Direction{3}  =  0 else _Bit3_Enemy_Direction{3}  =  1
  18602  465e
  18603  465e		       a5 da		      LDA	_Bit3_Enemy_Direction
  18604  4660		       29 08		      AND	#8
  18605  4662		       f0 09		      BEQ	.skipL01109
  18606  4664				   .condpart596
  18607  4664		       a5 da		      LDA	_Bit3_Enemy_Direction
  18608  4666		       29 f7		      AND	#247
  18609  4668		       85 da		      STA	_Bit3_Enemy_Direction
  18610  466a		       4c 73 76 	      jmp	.skipelse78
  18611  466d				   .skipL01109
  18612  466d		       a5 da		      LDA	_Bit3_Enemy_Direction
  18613  466f		       09 08		      ORA	#8
  18614  4671		       85 da		      STA	_Bit3_Enemy_Direction
  18615  4673				   .skipelse78
  18616  4673				   .
  18617  4673							; 
  18618  4673
  18619  4673				   .L01110		;  return thisbank
  18620  4673
  18621  4673		       60		      RTS
  18622  4674				   .
  18623  4674							; 
  18624  4674
  18625  4674				   .__Bowser_Jr_Jumping
  18626  4674							; __Bowser_Jr_Jumping
  18627  4674
  18628  4674				   .
  18629  4674							; 
  18630  4674
  18631  4674				   .L01111		;  if !_Bit3_Enemy_Direction{3}  &&  player1x	<  68  &&  _Farthest_Traveled_On_Level	=  1 then _Farthest_Traveled_On_Level  =  0  :	_Level_Data_Pointer  =	0  :  goto __Bowser_Jr_2
  18632  4674
  18633  4674		       a5 da		      LDA	_Bit3_Enemy_Direction
  18634  4676		       29 08		      AND	#8
  18635  4678		       d0 15		      BNE	.skipL01111
  18636  467a				   .condpart597
  18637  467a		       a5 81		      LDA	player1x
  18638  467c		       c9 44		      CMP	#68
  18639  467e		       b0 0f		      BCS	.skip597then
  18640  4680				   .condpart598
  18641  4680		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18642  4682		       c9 01		      CMP	#1
  18643  4684		       d0 09		      BNE	.skip598then
  18644  4686				   .condpart599
  18645  4686		       a9 00		      LDA	#0
  18646  4688		       85 e2		      STA	_Farthest_Traveled_On_Level
  18647  468a		       85 d5		      STA	_Level_Data_Pointer
  18648  468c		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18649  468f
  18650  468f				   .skip598then
  18651  468f				   .skip597then
  18652  468f				   .skipL01111
  18653  468f				   .
  18654  468f							; 
  18655  468f
  18656  468f				   .L01112		;  if _Bit3_Enemy_Direction{3}  &&  player1x  >  82  &&  _Farthest_Traveled_On_Level  =  1 then _Farthest_Traveled_On_Level  =  0  :  _Level_Data_Pointer  =  0  :  goto __Bowser_Jr_2
  18657  468f
  18658  468f		       a5 da		      LDA	_Bit3_Enemy_Direction
  18659  4691		       29 08		      AND	#8
  18660  4693		       f0 15		      BEQ	.skipL01112
  18661  4695				   .condpart600
  18662  4695		       a9 52		      LDA	#82
  18663  4697		       c5 81		      CMP	player1x
  18664  4699		       b0 0f		      BCS	.skip600then
  18665  469b				   .condpart601
  18666  469b		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18667  469d		       c9 01		      CMP	#1
  18668  469f		       d0 09		      BNE	.skip601then
  18669  46a1				   .condpart602
  18670  46a1		       a9 00		      LDA	#0
  18671  46a3		       85 e2		      STA	_Farthest_Traveled_On_Level
  18672  46a5		       85 d5		      STA	_Level_Data_Pointer
  18673  46a7		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18674  46aa
  18675  46aa				   .skip601then
  18676  46aa				   .skip600then
  18677  46aa				   .skipL01112
  18678  46aa				   .
  18679  46aa							; 
  18680  46aa
  18681  46aa				   .L01113		;  if _Farthest_Traveled_On_Level  <  8 then _Farthest_Traveled_On_Level  =  _Farthest_Traveled_On_Level  +  1  :  _Level_Data_Pointer  =  2  :  goto __Bowser_Jr_2
  18682  46aa
  18683  46aa		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18684  46ac		       c9 08		      CMP	#8
  18685  46ae		       b0 09		      BCS	.skipL01113
  18686  46b0				   .condpart603
  18687  46b0		       e6 e2		      INC	_Farthest_Traveled_On_Level
  18688  46b2		       a9 02		      LDA	#2
  18689  46b4		       85 d5		      STA	_Level_Data_Pointer
  18690  46b6		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18691  46b9
  18692  46b9				   .skipL01113
  18693  46b9				   .
  18694  46b9							; 
  18695  46b9
  18696  46b9				   .L01114		;  if _Farthest_Traveled_On_Level  =  8 then _Level_Data_Pointer  =  3  :  _Farthest_Traveled_On_Level  =  9  :  _Enemy_Momentum  =  8  :  goto __Bowser_Jr_2
  18697  46b9
  18698  46b9		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18699  46bb		       c9 08		      CMP	#8
  18700  46bd		       d0 0f		      BNE	.skipL01114
  18701  46bf				   .condpart604
  18702  46bf		       a9 03		      LDA	#3
  18703  46c1		       85 d5		      STA	_Level_Data_Pointer
  18704  46c3		       a9 09		      LDA	#9
  18705  46c5		       85 e2		      STA	_Farthest_Traveled_On_Level
  18706  46c7		       a9 08		      LDA	#8
  18707  46c9		       85 dd		      STA	_Enemy_Momentum
  18708  46cb		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18709  46ce
  18710  46ce				   .skipL01114
  18711  46ce				   .
  18712  46ce							; 
  18713  46ce
  18714  46ce				   .L01115		;  if _Farthest_Traveled_On_Level  =  9 then player1y	=  player1y  -	_Enemy_Momentum else player1y  =  player1y  +  _Enemy_Momentum
  18715  46ce
  18716  46ce		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18717  46d0		       c9 09		      CMP	#9
  18718  46d2		       d0 0a		      BNE	.skipL01115
  18719  46d4				   .condpart605
  18720  46d4		       a5 86		      LDA	player1y
  18721  46d6		       38		      SEC
  18722  46d7		       e5 dd		      SBC	_Enemy_Momentum
  18723  46d9		       85 86		      STA	player1y
  18724  46db		       4c e5 76 	      jmp	.skipelse79
  18725  46de				   .skipL01115
  18726  46de		       a5 86		      LDA	player1y
  18727  46e0		       18		      CLC
  18728  46e1		       65 dd		      ADC	_Enemy_Momentum
  18729  46e3		       85 86		      STA	player1y
  18730  46e5				   .skipelse79
  18731  46e5				   .
  18732  46e5							; 
  18733  46e5
  18734  46e5				   .L01116		;  if !_Bit3_Enemy_Direction{3} then player1x	=  player1x  -	3 else player1x  =  player1x  +  3
  18735  46e5
  18736  46e5		       a5 da		      LDA	_Bit3_Enemy_Direction
  18737  46e7		       29 08		      AND	#8
  18738  46e9		       d0 0a		      BNE	.skipL01116
  18739  46eb				   .condpart606
  18740  46eb		       a5 81		      LDA	player1x
  18741  46ed		       38		      SEC
  18742  46ee		       e9 03		      SBC	#3
  18743  46f0		       85 81		      STA	player1x
  18744  46f2		       4c fc 76 	      jmp	.skipelse80
  18745  46f5				   .skipL01116
  18746  46f5		       a5 81		      LDA	player1x
  18747  46f7		       18		      CLC
  18748  46f8		       69 03		      ADC	#3
  18749  46fa		       85 81		      STA	player1x
  18750  46fc				   .skipelse80
  18751  46fc				   .
  18752  46fc							; 
  18753  46fc
  18754  46fc				   .L01117		;  if _Farthest_Traveled_On_Level  =  9 then _Enemy_Momentum  =  _Enemy_Momentum  -  1 else _Enemy_Momentum  =  _Enemy_Momentum  +  1
  18755  46fc
  18756  46fc		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18757  46fe		       c9 09		      CMP	#9
  18758  4700		       d0 05		      BNE	.skipL01117
  18759  4702				   .condpart607
  18760  4702		       c6 dd		      DEC	_Enemy_Momentum
  18761  4704		       4c 09 77 	      jmp	.skipelse81
  18762  4707				   .skipL01117
  18763  4707		       e6 dd		      INC	_Enemy_Momentum
  18764  4709				   .skipelse81
  18765  4709				   .
  18766  4709							; 
  18767  4709
  18768  4709				   .L01118		;  if _Enemy_Momentum	=  0 then _Farthest_Traveled_On_Level  =  10
  18769  4709
  18770  4709		       a5 dd		      LDA	_Enemy_Momentum
  18771  470b		       c9 00		      CMP	#0
  18772  470d		       d0 04		      BNE	.skipL01118
  18773  470f				   .condpart608
  18774  470f		       a9 0a		      LDA	#10
  18775  4711		       85 e2		      STA	_Farthest_Traveled_On_Level
  18776  4713				   .skipL01118
  18777  4713				   .
  18778  4713							; 
  18779  4713
  18780  4713				   .L01119		;  if player1y  >  79 then player1y  =  79  :	_Farthest_Traveled_On_Level  =	11  :  _Level_Data_Pointer  =  4
  18781  4713
  18782  4713		       a9 4f		      LDA	#79
  18783  4715		       c5 86		      CMP	player1y
  18784  4717		       b0 0c		      BCS	.skipL01119
  18785  4719				   .condpart609
  18786  4719		       a9 4f		      LDA	#79
  18787  471b		       85 86		      STA	player1y
  18788  471d		       a9 0b		      LDA	#11
  18789  471f		       85 e2		      STA	_Farthest_Traveled_On_Level
  18790  4721		       a9 04		      LDA	#4
  18791  4723		       85 d5		      STA	_Level_Data_Pointer
  18792  4725				   .skipL01119
  18793  4725				   .
  18794  4725							; 
  18795  4725
  18796  4725				   .L01120		;  goto __Bowser_Jr_2
  18797  4725
  18798  4725		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18799  4728
  18800  4728				   .
  18801  4728							; 
  18802  4728
  18803  4728				   .__Bowser_Jr_Shell
  18804  4728							; __Bowser_Jr_Shell
  18805  4728
  18806  4728				   .
  18807  4728							; 
  18808  4728
  18809  4728				   .L01121		;  if _Farthest_Traveled_On_Level  =  11 then _Enemy_Momentum	=  6 else _Enemy_Momentum  =  _Enemy_Momentum  -  1
  18810  4728
  18811  4728		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  18812  472a		       c9 0b		      CMP	#11
  18813  472c		       d0 07		      BNE	.skipL01121
  18814  472e				   .condpart610
  18815  472e		       a9 06		      LDA	#6
  18816  4730		       85 dd		      STA	_Enemy_Momentum
  18817  4732		       4c 37 77 	      jmp	.skipelse82
  18818  4735				   .skipL01121
  18819  4735		       c6 dd		      DEC	_Enemy_Momentum
  18820  4737				   .skipelse82
  18821  4737				   .
  18822  4737							; 
  18823  4737
  18824  4737				   .L01122		;  if !_Bit3_Enemy_Direction{3} then x  =  player1x  -  _Enemy_Momentum  :  y	=   ( x  -  13 )  / 4 else x  =  player1x  +  _Enemy_Momentum  :  y  =	x / 4
  18825  4737
  18826  4737		       a5 da		      LDA	_Bit3_Enemy_Direction
  18827  4739		       29 08		      AND	#8
  18828  473b		       d0 13		      BNE	.skipL01122
  18829  473d				   .condpart611
  18830  473d		       a5 81		      LDA	player1x
  18831  473f		       38		      SEC
  18832  4740		       e5 dd		      SBC	_Enemy_Momentum
  18833  4742		       85 eb		      STA	x
  18834  4744							; complex statement detected
  18835  4744		       a5 eb		      LDA	x
  18836  4746		       38		      SEC
  18837  4747		       e9 0d		      SBC	#13
  18838  4749		       4a		      lsr
  18839  474a		       4a		      lsr
  18840  474b		       85 ec		      STA	y
  18841  474d		       4c 5d 77 	      jmp	.skipelse83
  18842  4750				   .skipL01122
  18843  4750		       a5 81		      LDA	player1x
  18844  4752		       18		      CLC
  18845  4753		       65 dd		      ADC	_Enemy_Momentum
  18846  4755		       85 eb		      STA	x
  18847  4757		       a5 eb		      LDA	x
  18848  4759		       4a		      lsr
  18849  475a		       4a		      lsr
  18850  475b		       85 ec		      STA	y
  18851  475d				   .skipelse83
  18852  475d				   .
  18853  475d							; 
  18854  475d
  18855  475d				   .L01123		;  goto __Bowser_Jr_Moving_2
  18856  475d
  18857  475d		       4c c7 75 	      jmp	.__Bowser_Jr_Moving_2
  18858  4760
  18859  4760				   .
  18860  4760							; 
  18861  4760
  18862  4760				   .__Bowser_Jr_Standing
  18863  4760							; __Bowser_Jr_Standing
  18864  4760
  18865  4760				   .
  18866  4760							; 
  18867  4760
  18868  4760				   .L01124		;  _Enemy_Momentum  =	_Enemy_Momentum  -  1
  18869  4760
  18870  4760		       c6 dd		      DEC	_Enemy_Momentum
  18871  4762				   .
  18872  4762							; 
  18873  4762
  18874  4762				   .L01125		;  if _Enemy_Momentum	<  1 then _Farthest_Traveled_On_Level  =  0  :	_Level_Data_Pointer  =	0
  18875  4762
  18876  4762		       a5 dd		      LDA	_Enemy_Momentum
  18877  4764		       c9 01		      CMP	#1
  18878  4766		       b0 06		      BCS	.skipL01125
  18879  4768				   .condpart612
  18880  4768		       a9 00		      LDA	#0
  18881  476a		       85 e2		      STA	_Farthest_Traveled_On_Level
  18882  476c		       85 d5		      STA	_Level_Data_Pointer
  18883  476e				   .skipL01125
  18884  476e				   .
  18885  476e							; 
  18886  476e
  18887  476e				   .L01126		;  goto __Bowser_Jr_2
  18888  476e
  18889  476e		       4c 44 75 	      jmp	.__Bowser_Jr_2
  18890  4771
  18891  4771				   .
  18892  4771							; 
  18893  4771
  18894  4771				   .__Fireball_BJr_Collision
  18895  4771							; __Fireball_BJr_Collision
  18896  4771
  18897  4771				   .
  18898  4771							; 
  18899  4771
  18900  4771				   .L01127		;  ballx  =  0  :  bally  =  120
  18901  4771
  18902  4771		       a9 00		      LDA	#0
  18903  4773		       85 84		      STA	ballx
  18904  4775		       a9 78		      LDA	#120
  18905  4777		       85 89		      STA	bally
  18906  4779				   .
  18907  4779							; 
  18908  4779
  18909  4779				   .L01128		;  if _Level_Data_Pointer  >  3 then goto __Draw bank3
  18910  4779
  18911  4779		       a9 03		      LDA	#3
  18912  477b		       c5 d5		      CMP	_Level_Data_Pointer
  18913  477d		       b0 12		      BCS	.skipL01128
  18914  477f				   .condpart613
  18915  477f		       85 ee		      sta	temp7
  18916  4781		       a9 4f		      lda	#>(.__Draw-1)
  18917  4783		       48		      pha
  18918  4784		       a9 ff		      lda	#<(.__Draw-1)
  18919  4786		       48		      pha
  18920  4787		       a5 ee		      lda	temp7
  18921  4789		       48		      pha
  18922  478a		       8a		      txa
  18923  478b		       48		      pha
  18924  478c		       a2 03		      ldx	#3
  18925  478e		       4c eb ff 	      jmp	BS_jsr
  18926  4791				   .skipL01128
  18927  4791				   .
  18928  4791							; 
  18929  4791
  18930  4791				   .L01129		;  score  =  score  +	300
  18931  4791
  18932  4791		       f8		      SED
  18933  4792		       18		      CLC
  18934  4793		       a5 94		      LDA	score+1
  18935  4795		       69 03		      ADC	#$03
  18936  4797		       85 94		      STA	score+1
  18937  4799		       a5 93		      LDA	score
  18938  479b		       69 00		      ADC	#$00
  18939  479d		       85 93		      STA	score
  18940  479f		       d8		      CLD
  18941  47a0				   .
  18942  47a0							; 
  18943  47a0
  18944  47a0				   .__Bowser_Jr_Hit
  18945  47a0							; __Bowser_Jr_Hit
  18946  47a0
  18947  47a0				   .
  18948  47a0							; 
  18949  47a0
  18950  47a0				   .L01130		;  _Level_Timer  =  _Level_Timer  -  1  :  _Level_Data_Pointer  =  2  :  _Farthest_Traveled_On_Level  =  13  :  _Enemy_Momentum  =  6
  18951  47a0
  18952  47a0		       c6 d8		      DEC	_Level_Timer
  18953  47a2		       a9 02		      LDA	#2
  18954  47a4		       85 d5		      STA	_Level_Data_Pointer
  18955  47a6		       a9 0d		      LDA	#13
  18956  47a8		       85 e2		      STA	_Farthest_Traveled_On_Level
  18957  47aa		       a9 06		      LDA	#6
  18958  47ac		       85 dd		      STA	_Enemy_Momentum
  18959  47ae				   .
  18960  47ae							; 
  18961  47ae
  18962  47ae				   .L01131		;  pfscore1  =  pfscore1 / 2
  18963  47ae
  18964  47ae		       a5 f2		      LDA	pfscore1
  18965  47b0		       4a		      lsr
  18966  47b1		       85 f2		      STA	pfscore1
  18967  47b3				   .
  18968  47b3							; 
  18969  47b3
  18970  47b3				   .L01132		;  if _Level_Timer  <	1 then goto __Bowser_Jr_Defeated
  18971  47b3
  18972  47b3		       a5 d8		      LDA	_Level_Timer
  18973  47b5		       c9 01		      CMP	#1
  18974  47b7		       b0 03		      BCS	.skipL01132
  18975  47b9				   .condpart614
  18976  47b9		       4c a9 78 	      jmp	.__Bowser_Jr_Defeated
  18977  47bc
  18978  47bc				   .skipL01132
  18979  47bc				   .
  18980  47bc							; 
  18981  47bc
  18982  47bc				   .L01133		;  goto __Draw bank3
  18983  47bc
  18984  47bc		       85 ee		      sta	temp7
  18985  47be		       a9 4f		      lda	#>(.__Draw-1)
  18986  47c0		       48		      pha
  18987  47c1		       a9 ff		      lda	#<(.__Draw-1)
  18988  47c3		       48		      pha
  18989  47c4		       a5 ee		      lda	temp7
  18990  47c6		       48		      pha
  18991  47c7		       8a		      txa
  18992  47c8		       48		      pha
  18993  47c9		       a2 03		      ldx	#3
  18994  47cb		       4c eb ff 	      jmp	BS_jsr
  18995  47ce				   .
  18996  47ce							; 
  18997  47ce
  18998  47ce				   .__Mario_BJr_Collision
  18999  47ce							; __Mario_BJr_Collision
  19000  47ce
  19001  47ce				   .
  19002  47ce							; 
  19003  47ce
  19004  47ce				   .L01134		;  if player1y  <=  player0y then goto __Mario_Hit_01 bank1
  19005  47ce
  19006  47ce		       a5 85		      LDA	player0y
  19007  47d0		       c5 86		      CMP	player1y
  19008  47d2		       90 12		      BCC	.skipL01134
  19009  47d4				   .condpart615
  19010  47d4		       85 ee		      sta	temp7
  19011  47d6		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  19012  47d8		       48		      pha
  19013  47d9		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  19014  47db		       48		      pha
  19015  47dc		       a5 ee		      lda	temp7
  19016  47de		       48		      pha
  19017  47df		       8a		      txa
  19018  47e0		       48		      pha
  19019  47e1		       a2 01		      ldx	#1
  19020  47e3		       4c eb ff 	      jmp	BS_jsr
  19021  47e6				   .skipL01134
  19022  47e6				   .
  19023  47e6							; 
  19024  47e6
  19025  47e6				   .L01135		;  if _Farthest_Traveled_On_Level  =  11  ||  _Farthest_Traveled_On_Level  =  12 then player0y  =  player0y  -  3  :  _Bit1_Jumping_Flag{1}  =  1  :  _Momentum_Up_Down  =  2	:  _Bit2_Fire_Button_Pressed{2}  =  1  :  score  =  score  +  50  :  goto __Draw bank3
  19026  47e6
  19027  47e6		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  19028  47e8		       c9 0b		      CMP	#11
  19029  47ea		       d0 03		      BNE	.skipL01135
  19030  47ec				   .condpart616
  19031  47ec		       4c f5 77 	      jmp	.condpart617
  19032  47ef				   .skipL01135
  19033  47ef		       a5 e2		      LDA	_Farthest_Traveled_On_Level
  19034  47f1		       c9 0c		      CMP	#12
  19035  47f3		       d0 3e		      BNE	.skip167OR
  19036  47f5				   .condpart617
  19037  47f5		       a5 85		      LDA	player0y
  19038  47f7		       38		      SEC
  19039  47f8		       e9 03		      SBC	#3
  19040  47fa		       85 85		      STA	player0y
  19041  47fc		       a5 d7		      LDA	_Bit1_Jumping_Flag
  19042  47fe		       09 02		      ORA	#2
  19043  4800		       85 d7		      STA	_Bit1_Jumping_Flag
  19044  4802		       a9 02		      LDA	#2
  19045  4804		       85 e1		      STA	_Momentum_Up_Down
  19046  4806		       a5 d7		      LDA	_Bit2_Fire_Button_Pressed
  19047  4808		       09 04		      ORA	#4
  19048  480a		       85 d7		      STA	_Bit2_Fire_Button_Pressed
  19049  480c		       f8		      SED
  19050  480d		       18		      CLC
  19051  480e		       a5 95		      LDA	score+2
  19052  4810		       69 50		      ADC	#$50
  19053  4812		       85 95		      STA	score+2
  19054  4814		       a5 94		      LDA	score+1
  19055  4816		       69 00		      ADC	#$00
  19056  4818		       85 94		      STA	score+1
  19057  481a		       a5 93		      LDA	score
  19058  481c		       69 00		      ADC	#$00
  19059  481e		       85 93		      STA	score
  19060  4820		       d8		      CLD
  19061  4821		       85 ee		      sta	temp7
  19062  4823		       a9 4f		      lda	#>(.__Draw-1)
  19063  4825		       48		      pha
  19064  4826		       a9 ff		      lda	#<(.__Draw-1)
  19065  4828		       48		      pha
  19066  4829		       a5 ee		      lda	temp7
  19067  482b		       48		      pha
  19068  482c		       8a		      txa
  19069  482d		       48		      pha
  19070  482e		       a2 03		      ldx	#3
  19071  4830		       4c eb ff 	      jmp	BS_jsr
  19072  4833				   .skip167OR
  19073  4833				   .
  19074  4833							; 
  19075  4833
  19076  4833				   .L01136		;  x  =  player1y  -  player0y
  19077  4833
  19078  4833		       a5 86		      LDA	player1y
  19079  4835		       38		      SEC
  19080  4836		       e5 85		      SBC	player0y
  19081  4838		       85 eb		      STA	x
  19082  483a				   .
  19083  483a							; 
  19084  483a
  19085  483a				   .L01137		;  if x  <  12 then goto __Mario_Hit_01 bank1
  19086  483a
  19087  483a		       a5 eb		      LDA	x
  19088  483c		       c9 0c		      CMP	#12
  19089  483e		       b0 12		      BCS	.skipL01137
  19090  4840				   .condpart618
  19091  4840		       85 ee		      sta	temp7
  19092  4842		       a9 10		      lda	#>(.__Mario_Hit_01-1)
  19093  4844		       48		      pha
  19094  4845		       a9 d6		      lda	#<(.__Mario_Hit_01-1)
  19095  4847		       48		      pha
  19096  4848		       a5 ee		      lda	temp7
  19097  484a		       48		      pha
  19098  484b		       8a		      txa
  19099  484c		       48		      pha
  19100  484d		       a2 01		      ldx	#1
  19101  484f		       4c eb ff 	      jmp	BS_jsr
  19102  4852				   .skipL01137
  19103  4852				   .
  19104  4852							; 
  19105  4852
  19106  4852				   .L01138		;  player0y  =  player0y  -  3  :  _Bit1_Jumping_Flag{1}  =  1  :  _Momentum_Up_Down  =  2  :	_Bit2_Fire_Button_Pressed{2}  =  1  :  _Momentum_Left_Right  =	6
  19107  4852
  19108  4852		       a5 85		      LDA	player0y
  19109  4854		       38		      SEC
  19110  4855		       e9 03		      SBC	#3
  19111  4857		       85 85		      STA	player0y
  19112  4859		       a5 d7		      LDA	_Bit1_Jumping_Flag
  19113  485b		       09 02		      ORA	#2
  19114  485d		       85 d7		      STA	_Bit1_Jumping_Flag
  19115  485f		       a9 02		      LDA	#2
  19116  4861		       85 e1		      STA	_Momentum_Up_Down
  19117  4863		       a5 d7		      LDA	_Bit2_Fire_Button_Pressed
  19118  4865		       09 04		      ORA	#4
  19119  4867		       85 d7		      STA	_Bit2_Fire_Button_Pressed
  19120  4869		       a9 06		      LDA	#6
  19121  486b		       85 e0		      STA	_Momentum_Left_Right
  19122  486d				   .
  19123  486d							; 
  19124  486d
  19125  486d				   .L01139		;  if player1y  <  79 then player1y  =  79
  19126  486d
  19127  486d		       a5 86		      LDA	player1y
  19128  486f		       c9 4f		      CMP	#79
  19129  4871		       b0 04		      BCS	.skipL01139
  19130  4873				   .condpart619
  19131  4873		       a9 4f		      LDA	#79
  19132  4875		       85 86		      STA	player1y
  19133  4877				   .skipL01139
  19134  4877				   .
  19135  4877							; 
  19136  4877
  19137  4877				   .L01140		;  if _Level_Data_Pointer  =  2 then _Enemy_Momentum  =  6  :	_Farthest_Traveled_On_Level  =	13  :  goto __Draw bank3
  19138  4877
  19139  4877		       a5 d5		      LDA	_Level_Data_Pointer
  19140  4879		       c9 02		      CMP	#2
  19141  487b		       d0 1a		      BNE	.skipL01140
  19142  487d				   .condpart620
  19143  487d		       a9 06		      LDA	#6
  19144  487f		       85 dd		      STA	_Enemy_Momentum
  19145  4881		       a9 0d		      LDA	#13
  19146  4883		       85 e2		      STA	_Farthest_Traveled_On_Level
  19147  4885		       85 ee		      sta	temp7
  19148  4887		       a9 4f		      lda	#>(.__Draw-1)
  19149  4889		       48		      pha
  19150  488a		       a9 ff		      lda	#<(.__Draw-1)
  19151  488c		       48		      pha
  19152  488d		       a5 ee		      lda	temp7
  19153  488f		       48		      pha
  19154  4890		       8a		      txa
  19155  4891		       48		      pha
  19156  4892		       a2 03		      ldx	#3
  19157  4894		       4c eb ff 	      jmp	BS_jsr
  19158  4897				   .skipL01140
  19159  4897				   .
  19160  4897							; 
  19161  4897
  19162  4897				   .L01141		;  score  =  score  +	400
  19163  4897
  19164  4897		       f8		      SED
  19165  4898		       18		      CLC
  19166  4899		       a5 94		      LDA	score+1
  19167  489b		       69 04		      ADC	#$04
  19168  489d		       85 94		      STA	score+1
  19169  489f		       a5 93		      LDA	score
  19170  48a1		       69 00		      ADC	#$00
  19171  48a3		       85 93		      STA	score
  19172  48a5		       d8		      CLD
  19173  48a6				   .
  19174  48a6							; 
  19175  48a6
  19176  48a6				   .L01142		;  goto __Bowser_Jr_Hit
  19177  48a6
  19178  48a6		       4c a0 77 	      jmp	.__Bowser_Jr_Hit
  19179  48a9
  19180  48a9				   .
  19181  48a9							; 
  19182  48a9
  19183  48a9				   .__Bowser_Jr_Defeated
  19184  48a9							; __Bowser_Jr_Defeated
  19185  48a9
  19186  48a9				   .
  19187  48a9							; 
  19188  48a9
  19189  48a9				   .L01143		;  gosub __Pause_Boss
  19190  48a9
  19191  48a9		       20 8d 7c 	      jsr	.__Pause_Boss
  19192  48ac
  19193  48ac				   .
  19194  48ac							; 
  19195  48ac
  19196  48ac				   .L01144		;  player0y  =  79  :	player1y  =  79  :  _Bit1_Jumping_Flag{1}  =  0  :  _Momentum_Up_Down  =  0  :	_Bit0_Player_Facing_Direction{0}  =  0	:  _Momentum_Left_Right  =  0  :  player0x  =  player1x  -  16
  19197  48ac
  19198  48ac		       a9 4f		      LDA	#79
  19199  48ae		       85 85		      STA	player0y
  19200  48b0		       85 86		      STA	player1y
  19201  48b2		       a5 d7		      LDA	_Bit1_Jumping_Flag
  19202  48b4		       29 fd		      AND	#253
  19203  48b6		       85 d7		      STA	_Bit1_Jumping_Flag
  19204  48b8		       a9 00		      LDA	#0
  19205  48ba		       85 e1		      STA	_Momentum_Up_Down
  19206  48bc		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  19207  48be		       29 fe		      AND	#254
  19208  48c0		       85 d7		      STA	_Bit0_Player_Facing_Direction
  19209  48c2		       a9 00		      LDA	#0
  19210  48c4		       85 e0		      STA	_Momentum_Left_Right
  19211  48c6		       a5 81		      LDA	player1x
  19212  48c8		       38		      SEC
  19213  48c9		       e9 10		      SBC	#16
  19214  48cb		       85 80		      STA	player0x
  19215  48cd				   .
  19216  48cd							; 
  19217  48cd
  19218  48cd				   .L01145		;  if player0x  <  24 then player0x  =  24
  19219  48cd
  19220  48cd		       a5 80		      LDA	player0x
  19221  48cf		       c9 18		      CMP	#24
  19222  48d1		       b0 04		      BCS	.skipL01145
  19223  48d3				   .condpart621
  19224  48d3		       a9 18		      LDA	#24
  19225  48d5		       85 80		      STA	player0x
  19226  48d7				   .skipL01145
  19227  48d7				   .
  19228  48d7							; 
  19229  48d7
  19230  48d7				   .L01146		;  _Bit7_Mario_Invincibility{7}  =  0	:  _Bit7_Mario_On_Off{7}  =  0
  19231  48d7
  19232  48d7		       a5 d7		      LDA	_Bit7_Mario_Invincibility
  19233  48d9		       29 7f		      AND	#127
  19234  48db		       85 d7		      STA	_Bit7_Mario_Invincibility
  19235  48dd		       a5 da		      LDA	_Bit7_Mario_On_Off
  19236  48df		       29 7f		      AND	#127
  19237  48e1		       85 da		      STA	_Bit7_Mario_On_Off
  19238  48e3				   .
  19239  48e3							; 
  19240  48e3
  19241  48e3				   .L01147		;  gosub __Set_Up_Mario bank1
  19242  48e3
  19243  48e3		       85 ee		      sta	temp7
  19244  48e5		       a9 78		      lda	#>(ret_point84-1)
  19245  48e7		       48		      pha
  19246  48e8		       a9 fa		      lda	#<(ret_point84-1)
  19247  48ea		       48		      pha
  19248  48eb		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  19249  48ed		       48		      pha
  19250  48ee		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  19251  48f0		       48		      pha
  19252  48f1		       a5 ee		      lda	temp7
  19253  48f3		       48		      pha
  19254  48f4		       8a		      txa
  19255  48f5		       48		      pha
  19256  48f6		       a2 01		      ldx	#1
  19257  48f8		       4c eb ff 	      jmp	BS_jsr
  19258  48fb				   ret_point84
  19259  48fb				   .
  19260  48fb							; 
  19261  48fb
  19262  48fb				   .L01148		;  AUDV0  =  0  :  AUDV1  =  0
  19263  48fb
  19264  48fb		       a9 00		      LDA	#0
  19265  48fd		       85 19		      STA	AUDV0
  19266  48ff		       85 1a		      STA	AUDV1
  19267  4901				   .
  19268  4901							; 
  19269  4901
  19270  4901				   .L01149		;  score  =  score  +	5000
  19271  4901
  19272  4901		       f8		      SED
  19273  4902		       18		      CLC
  19274  4903		       a5 94		      LDA	score+1
  19275  4905		       69 50		      ADC	#$50
  19276  4907		       85 94		      STA	score+1
  19277  4909		       a5 93		      LDA	score
  19278  490b		       69 00		      ADC	#$00
  19279  490d		       85 93		      STA	score
  19280  490f		       d8		      CLD
  19281  4910				   .
  19282  4910							; 
  19283  4910
  19284  4910				   .L01150		;  player1color:
  19285  4910
  19286  4910		       a2 98		      LDX	#<playercolorL01150_1
  19287  4912		       86 87		      STX	player1color
  19288  4914		       a9 fc		      LDA	#>playercolorL01150_1
  19289  4916		       85 88		      STA	player1color+1
  19290  4918				   .
  19291  4918							; 
  19292  4918
  19293  4918				   .L01151		;  player1:
  19294  4918
  19295  4918		       a2 aa		      LDX	#<playerL01151_1
  19296  491a		       86 8c		      STX	player1pointerlo
  19297  491c		       a9 fc		      LDA	#>playerL01151_1
  19298  491e		       85 8d		      STA	player1pointerhi
  19299  4920		       a9 11		      LDA	#17
  19300  4922		       85 8f		      STA	player1height
  19301  4924				   .
  19302  4924							; 
  19303  4924
  19304  4924				   .L01152		;  AUDV0  =  12  :  AUDC0  =  7  :  AUDF0  =  31
  19305  4924
  19306  4924		       a9 0c		      LDA	#12
  19307  4926		       85 19		      STA	AUDV0
  19308  4928		       a9 07		      LDA	#7
  19309  492a		       85 15		      STA	AUDC0
  19310  492c		       a9 1f		      LDA	#31
  19311  492e		       85 17		      STA	AUDF0
  19312  4930				   .
  19313  4930							; 
  19314  4930
  19315  4930				   .L01153		;  gosub __Pause_Boss
  19316  4930
  19317  4930		       20 8d 7c 	      jsr	.__Pause_Boss
  19318  4933
  19319  4933				   .
  19320  4933							; 
  19321  4933
  19322  4933				   .L01154		;  gosub __Fanfare_Music bank7
  19323  4933
  19324  4933		       85 ee		      sta	temp7
  19325  4935		       a9 79		      lda	#>(ret_point85-1)
  19326  4937		       48		      pha
  19327  4938		       a9 4a		      lda	#<(ret_point85-1)
  19328  493a		       48		      pha
  19329  493b		       a9 dc		      lda	#>(.__Fanfare_Music-1)
  19330  493d		       48		      pha
  19331  493e		       a9 c0		      lda	#<(.__Fanfare_Music-1)
  19332  4940		       48		      pha
  19333  4941		       a5 ee		      lda	temp7
  19334  4943		       48		      pha
  19335  4944		       8a		      txa
  19336  4945		       48		      pha
  19337  4946		       a2 07		      ldx	#7
  19338  4948		       4c eb ff 	      jmp	BS_jsr
  19339  494b				   ret_point85
  19340  494b				   .
  19341  494b							; 
  19342  494b
  19343  494b				   .__BJr_Defeated_2
  19344  494b							; __BJr_Defeated_2
  19345  494b
  19346  494b				   .
  19347  494b							; 
  19348  494b
  19349  494b				   .L01155		;  gosub __Play_FF_Music bank7
  19350  494b
  19351  494b		       85 ee		      sta	temp7
  19352  494d		       a9 79		      lda	#>(ret_point86-1)
  19353  494f		       48		      pha
  19354  4950		       a9 62		      lda	#<(ret_point86-1)
  19355  4952		       48		      pha
  19356  4953		       a9 dc		      lda	#>(.__Play_FF_Music-1)
  19357  4955		       48		      pha
  19358  4956		       a9 39		      lda	#<(.__Play_FF_Music-1)
  19359  4958		       48		      pha
  19360  4959		       a5 ee		      lda	temp7
  19361  495b		       48		      pha
  19362  495c		       8a		      txa
  19363  495d		       48		      pha
  19364  495e		       a2 07		      ldx	#7
  19365  4960		       4c eb ff 	      jmp	BS_jsr
  19366  4963				   ret_point86
  19367  4963				   .
  19368  4963							; 
  19369  4963
  19370  4963				   .L01156		;  gosub __Render_Screen_Boss	:  gosub __Render_Screen_Boss
  19371  4963
  19372  4963		       20 b7 7c 	      jsr	.__Render_Screen_Boss
  19373  4966		       20 b7 7c 	      jsr	.__Render_Screen_Boss
  19374  4969
  19375  4969				   .
  19376  4969							; 
  19377  4969
  19378  4969				   .L01157		;  if _Music_Duration	<>  255 then goto __BJr_Defeated_2
  19379  4969
  19380  4969		       a5 e3		      LDA	_Music_Duration
  19381  496b		       c9 ff		      CMP	#255
  19382  496d		       f0 03		      BEQ	.skipL01157
  19383  496f				   .condpart622
  19384  496f		       4c 4b 79 	      jmp	.__BJr_Defeated_2
  19385  4972
  19386  4972				   .skipL01157
  19387  4972				   .
  19388  4972							; 
  19389  4972
  19390  4972				   .L01158		;  if _World  =  4 then goto __Final bank8
  19391  4972
  19392  4972		       a5 e9		      LDA	_World
  19393  4974		       c9 04		      CMP	#4
  19394  4976		       d0 12		      BNE	.skipL01158
  19395  4978				   .condpart623
  19396  4978		       85 ee		      sta	temp7
  19397  497a		       a9 f6		      lda	#>(.__Final-1)
  19398  497c		       48		      pha
  19399  497d		       a9 22		      lda	#<(.__Final-1)
  19400  497f		       48		      pha
  19401  4980		       a5 ee		      lda	temp7
  19402  4982		       48		      pha
  19403  4983		       8a		      txa
  19404  4984		       48		      pha
  19405  4985		       a2 08		      ldx	#8
  19406  4987		       4c eb ff 	      jmp	BS_jsr
  19407  498a				   .skipL01158
  19408  498a				   .
  19409  498a							; 
  19410  498a
  19411  498a				   .L01159		;  gosub __BJCColor  :  gosub __BJC
  19412  498a
  19413  498a		       20 4b 7e 	      jsr	.__BJCColor
  19414  498d		       20 54 7e 	      jsr	.__BJC
  19415  4990
  19416  4990				   .
  19417  4990							; 
  19418  4990
  19419  4990				   .L01160		;  gosub __Pause_Boss
  19420  4990
  19421  4990		       20 8d 7c 	      jsr	.__Pause_Boss
  19422  4993
  19423  4993				   .
  19424  4993							; 
  19425  4993
  19426  4993				   .L01161		;  gosub __BJSC  :  gosub __BJS
  19427  4993
  19428  4993		       20 8d 7e 	      jsr	.__BJSC
  19429  4996		       20 96 7e 	      jsr	.__BJS
  19430  4999
  19431  4999				   .
  19432  4999							; 
  19433  4999
  19434  4999				   .__BJr_Defeated_3
  19435  4999							; __BJr_Defeated_3
  19436  4999
  19437  4999				   .
  19438  4999							; 
  19439  4999
  19440  4999				   .L01162		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  31  :  player1x	=  player1x  +	4
  19441  4999
  19442  4999		       a9 0c		      LDA	#12
  19443  499b		       85 19		      STA	AUDV0
  19444  499d		       a9 08		      LDA	#8
  19445  499f		       85 15		      STA	AUDC0
  19446  49a1		       a9 1f		      LDA	#31
  19447  49a3		       85 17		      STA	AUDF0
  19448  49a5		       a5 81		      LDA	player1x
  19449  49a7		       18		      CLC
  19450  49a8		       69 04		      ADC	#4
  19451  49aa		       85 81		      STA	player1x
  19452  49ac				   .
  19453  49ac							; 
  19454  49ac
  19455  49ac				   .L01163		;  if player1x  >  137 then player1x  =  0  :	player1y  =  120  :  _Enemy_Type  =  _Goomba  :  goto __BJr_Defeated_4
  19456  49ac
  19457  49ac		       a9 89		      LDA	#137
  19458  49ae		       c5 81		      CMP	player1x
  19459  49b0		       b0 0f		      BCS	.skipL01163
  19460  49b2				   .condpart624
  19461  49b2		       a9 00		      LDA	#0
  19462  49b4		       85 81		      STA	player1x
  19463  49b6		       a9 78		      LDA	#120
  19464  49b8		       85 86		      STA	player1y
  19465  49ba		       a9 00		      LDA	#_Goomba
  19466  49bc		       85 dc		      STA	_Enemy_Type
  19467  49be		       4c 37 7a 	      jmp	.__BJr_Defeated_4
  19468  49c1
  19469  49c1				   .skipL01163
  19470  49c1				   .
  19471  49c1							; 
  19472  49c1
  19473  49c1				   .L01164		;  if player1x  >  120 then pfhline 30 7 31 off  :  pfhline 30 8 31 off  :  pfhline 30 9 31 off  :  AUDC0  =  7
  19474  49c1
  19475  49c1		       a9 78		      LDA	#120
  19476  49c3		       c5 81		      CMP	player1x
  19477  49c5		       b0 6a		      BCS	.skipL01164
  19478  49c7				   .condpart625
  19479  49c7		       a2 01		      LDX	#1
  19480  49c9		       a9 1f		      LDA	#31
  19481  49cb		       85 9e		      STA	temp3
  19482  49cd		       a0 07		      LDY	#7
  19483  49cf		       a9 1e		      LDA	#30
  19484  49d1		       85 ee		      sta	temp7
  19485  49d3		       a9 79		      lda	#>(ret_point87-1)
  19486  49d5		       48		      pha
  19487  49d6		       a9 e8		      lda	#<(ret_point87-1)
  19488  49d8		       48		      pha
  19489  49d9		       a9 f2		      lda	#>(pfhline-1)
  19490  49db		       48		      pha
  19491  49dc		       a9 ea		      lda	#<(pfhline-1)
  19492  49de		       48		      pha
  19493  49df		       a5 ee		      lda	temp7
  19494  49e1		       48		      pha
  19495  49e2		       8a		      txa
  19496  49e3		       48		      pha
  19497  49e4		       a2 08		      ldx	#8
  19498  49e6		       4c eb ff 	      jmp	BS_jsr
  19499  49e9				   ret_point87
  19500  49e9		       a2 01		      LDX	#1
  19501  49eb		       a9 1f		      LDA	#31
  19502  49ed		       85 9e		      STA	temp3
  19503  49ef		       a0 08		      LDY	#8
  19504  49f1		       a9 1e		      LDA	#30
  19505  49f3		       85 ee		      sta	temp7
  19506  49f5		       a9 7a		      lda	#>(ret_point88-1)
  19507  49f7		       48		      pha
  19508  49f8		       a9 0a		      lda	#<(ret_point88-1)
  19509  49fa		       48		      pha
  19510  49fb		       a9 f2		      lda	#>(pfhline-1)
  19511  49fd		       48		      pha
  19512  49fe		       a9 ea		      lda	#<(pfhline-1)
  19513  4a00		       48		      pha
  19514  4a01		       a5 ee		      lda	temp7
  19515  4a03		       48		      pha
  19516  4a04		       8a		      txa
  19517  4a05		       48		      pha
  19518  4a06		       a2 08		      ldx	#8
  19519  4a08		       4c eb ff 	      jmp	BS_jsr
  19520  4a0b				   ret_point88
  19521  4a0b		       a2 01		      LDX	#1
  19522  4a0d		       a9 1f		      LDA	#31
  19523  4a0f		       85 9e		      STA	temp3
  19524  4a11		       a0 09		      LDY	#9
  19525  4a13		       a9 1e		      LDA	#30
  19526  4a15		       85 ee		      sta	temp7
  19527  4a17		       a9 7a		      lda	#>(ret_point89-1)
  19528  4a19		       48		      pha
  19529  4a1a		       a9 2c		      lda	#<(ret_point89-1)
  19530  4a1c		       48		      pha
  19531  4a1d		       a9 f2		      lda	#>(pfhline-1)
  19532  4a1f		       48		      pha
  19533  4a20		       a9 ea		      lda	#<(pfhline-1)
  19534  4a22		       48		      pha
  19535  4a23		       a5 ee		      lda	temp7
  19536  4a25		       48		      pha
  19537  4a26		       8a		      txa
  19538  4a27		       48		      pha
  19539  4a28		       a2 08		      ldx	#8
  19540  4a2a		       4c eb ff 	      jmp	BS_jsr
  19541  4a2d				   ret_point89
  19542  4a2d		       a9 07		      LDA	#7
  19543  4a2f		       85 15		      STA	AUDC0
  19544  4a31				   .skipL01164
  19545  4a31				   .
  19546  4a31							; 
  19547  4a31
  19548  4a31				   .L01165		;  gosub __Slow_Boss
  19549  4a31
  19550  4a31		       20 a7 7c 	      jsr	.__Slow_Boss
  19551  4a34
  19552  4a34				   .
  19553  4a34							; 
  19554  4a34
  19555  4a34				   .L01166		;  goto __BJr_Defeated_3
  19556  4a34
  19557  4a34		       4c 99 79 	      jmp	.__BJr_Defeated_3
  19558  4a37
  19559  4a37				   .
  19560  4a37							; 
  19561  4a37
  19562  4a37				   .__BJr_Defeated_4
  19563  4a37							; __BJr_Defeated_4
  19564  4a37
  19565  4a37				   .
  19566  4a37							; 
  19567  4a37
  19568  4a37				   .L01167		;  AUDV0  =  0  :  _Animation_Timer  =  _Animation_Timer  +  1  :  _Momentum_Left_Right  =  2
  19569  4a37
  19570  4a37		       a9 00		      LDA	#0
  19571  4a39		       85 19		      STA	AUDV0
  19572  4a3b		       e6 d4		      INC	_Animation_Timer
  19573  4a3d		       a9 02		      LDA	#2
  19574  4a3f		       85 e0		      STA	_Momentum_Left_Right
  19575  4a41				   .
  19576  4a41							; 
  19577  4a41
  19578  4a41				   .L01168		;  if _Animation_Timer  >  6 then _Animation_Timer  =	0
  19579  4a41
  19580  4a41		       a9 06		      LDA	#6
  19581  4a43		       c5 d4		      CMP	_Animation_Timer
  19582  4a45		       b0 04		      BCS	.skipL01168
  19583  4a47				   .condpart626
  19584  4a47		       a9 00		      LDA	#0
  19585  4a49		       85 d4		      STA	_Animation_Timer
  19586  4a4b				   .skipL01168
  19587  4a4b				   .
  19588  4a4b							; 
  19589  4a4b
  19590  4a4b				   .L01169		;  gosub __Set_Up_Mario bank1
  19591  4a4b
  19592  4a4b		       85 ee		      sta	temp7
  19593  4a4d		       a9 7a		      lda	#>(ret_point90-1)
  19594  4a4f		       48		      pha
  19595  4a50		       a9 62		      lda	#<(ret_point90-1)
  19596  4a52		       48		      pha
  19597  4a53		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  19598  4a55		       48		      pha
  19599  4a56		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  19600  4a58		       48		      pha
  19601  4a59		       a5 ee		      lda	temp7
  19602  4a5b		       48		      pha
  19603  4a5c		       8a		      txa
  19604  4a5d		       48		      pha
  19605  4a5e		       a2 01		      ldx	#1
  19606  4a60		       4c eb ff 	      jmp	BS_jsr
  19607  4a63				   ret_point90
  19608  4a63				   .
  19609  4a63							; 
  19610  4a63
  19611  4a63				   .L01170		;  player0x  =  player0x  +  2
  19612  4a63
  19613  4a63		       a5 80		      LDA	player0x
  19614  4a65		       18		      CLC
  19615  4a66		       69 02		      ADC	#2
  19616  4a68		       85 80		      STA	player0x
  19617  4a6a				   .
  19618  4a6a							; 
  19619  4a6a
  19620  4a6a				   .L01171		;  gosub __Slow_Boss
  19621  4a6a
  19622  4a6a		       20 a7 7c 	      jsr	.__Slow_Boss
  19623  4a6d
  19624  4a6d				   .
  19625  4a6d							; 
  19626  4a6d
  19627  4a6d				   .L01172		;  if player0x  >  138 then player0x  =  0  :	player0y  =  120  :  goto __elr5 bank3
  19628  4a6d
  19629  4a6d		       a9 8a		      LDA	#138
  19630  4a6f		       c5 80		      CMP	player0x
  19631  4a71		       b0 1a		      BCS	.skipL01172
  19632  4a73				   .condpart627
  19633  4a73		       a9 00		      LDA	#0
  19634  4a75		       85 80		      STA	player0x
  19635  4a77		       a9 78		      LDA	#120
  19636  4a79		       85 85		      STA	player0y
  19637  4a7b		       85 ee		      sta	temp7
  19638  4a7d		       a9 5a		      lda	#>(.__elr5-1)
  19639  4a7f		       48		      pha
  19640  4a80		       a9 4a		      lda	#<(.__elr5-1)
  19641  4a82		       48		      pha
  19642  4a83		       a5 ee		      lda	temp7
  19643  4a85		       48		      pha
  19644  4a86		       8a		      txa
  19645  4a87		       48		      pha
  19646  4a88		       a2 03		      ldx	#3
  19647  4a8a		       4c eb ff 	      jmp	BS_jsr
  19648  4a8d				   .skipL01172
  19649  4a8d				   .
  19650  4a8d							; 
  19651  4a8d
  19652  4a8d				   .L01173		;  goto __BJr_Defeated_4
  19653  4a8d
  19654  4a8d		       4c 37 7a 	      jmp	.__BJr_Defeated_4
  19655  4a90
  19656  4a90				   .
  19657  4a90							; 
  19658  4a90
  19659  4a90				   .
  19660  4a90							; 
  19661  4a90
  19662  4a90				   .__Bos_Setup
  19663  4a90							; __Bos_Setup
  19664  4a90
  19665  4a90				   .
  19666  4a90							; 
  19667  4a90
  19668  4a90				   .L01174		;  AUDV0  =  0  :  AUDV1  =  0
  19669  4a90
  19670  4a90		       a9 00		      LDA	#0
  19671  4a92		       85 19		      STA	AUDV0
  19672  4a94		       85 1a		      STA	AUDV1
  19673  4a96				   .
  19674  4a96							; 
  19675  4a96
  19676  4a96				   .L01175		;  player0x  =  32  :	player0y  =  0
  19677  4a96
  19678  4a96		       a9 20		      LDA	#32
  19679  4a98		       85 80		      STA	player0x
  19680  4a9a		       a9 00		      LDA	#0
  19681  4a9c		       85 85		      STA	player0y
  19682  4a9e				   .
  19683  4a9e							; 
  19684  4a9e
  19685  4a9e				   .L01176		;  _Momentum_Up_Down  =  4  :	u  =  10  :  pfscore1  =  0  :	_Bit0_Player_Facing_Direction{0}  =  0
  19686  4a9e
  19687  4a9e		       a9 04		      LDA	#4
  19688  4aa0		       85 e1		      STA	_Momentum_Up_Down
  19689  4aa2		       a9 0a		      LDA	#10
  19690  4aa4		       85 e8		      STA	u
  19691  4aa6		       a9 00		      LDA	#0
  19692  4aa8		       85 f2		      STA	pfscore1
  19693  4aaa		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  19694  4aac		       29 fe		      AND	#254
  19695  4aae		       85 d7		      STA	_Bit0_Player_Facing_Direction
  19696  4ab0				   .
  19697  4ab0							; 
  19698  4ab0
  19699  4ab0				   .L01177		;  gosub __Set_Up_Mario bank1
  19700  4ab0
  19701  4ab0		       85 ee		      sta	temp7
  19702  4ab2		       a9 7a		      lda	#>(ret_point91-1)
  19703  4ab4		       48		      pha
  19704  4ab5		       a9 c7		      lda	#<(ret_point91-1)
  19705  4ab7		       48		      pha
  19706  4ab8		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  19707  4aba		       48		      pha
  19708  4abb		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  19709  4abd		       48		      pha
  19710  4abe		       a5 ee		      lda	temp7
  19711  4ac0		       48		      pha
  19712  4ac1		       8a		      txa
  19713  4ac2		       48		      pha
  19714  4ac3		       a2 01		      ldx	#1
  19715  4ac5		       4c eb ff 	      jmp	BS_jsr
  19716  4ac8				   ret_point91
  19717  4ac8				   .
  19718  4ac8							; 
  19719  4ac8
  19720  4ac8				   .L01178		;  y  =  1
  19721  4ac8
  19722  4ac8		       a9 01		      LDA	#1
  19723  4aca		       85 ec		      STA	y
  19724  4acc				   .
  19725  4acc							; 
  19726  4acc
  19727  4acc				   .__Mario_Fall
  19728  4acc							; __Mario_Fall
  19729  4acc
  19730  4acc				   .
  19731  4acc							; 
  19732  4acc
  19733  4acc				   .L01179		;  u  =  u  +	1  :  AUDV0  =	8  :  AUDC0  =	4  :  AUDF0  =	u  :  player0y	=  player0y  +	y
  19734  4acc
  19735  4acc		       e6 e8		      INC	u
  19736  4ace		       a9 08		      LDA	#8
  19737  4ad0		       85 19		      STA	AUDV0
  19738  4ad2		       a9 04		      LDA	#4
  19739  4ad4		       85 15		      STA	AUDC0
  19740  4ad6		       a5 e8		      LDA	u
  19741  4ad8		       85 17		      STA	AUDF0
  19742  4ada		       a5 85		      LDA	player0y
  19743  4adc		       18		      CLC
  19744  4add		       65 ec		      ADC	y
  19745  4adf		       85 85		      STA	player0y
  19746  4ae1				   .
  19747  4ae1							; 
  19748  4ae1
  19749  4ae1				   .L01180		;  if y  <  7 then y  =  y  +	1
  19750  4ae1
  19751  4ae1		       a5 ec		      LDA	y
  19752  4ae3		       c9 07		      CMP	#7
  19753  4ae5		       b0 02		      BCS	.skipL01180
  19754  4ae7				   .condpart628
  19755  4ae7		       e6 ec		      INC	y
  19756  4ae9				   .skipL01180
  19757  4ae9				   .
  19758  4ae9							; 
  19759  4ae9
  19760  4ae9				   .L01181		;  if player0y  >  80 then player0y  =  79  :	_Momentum_Up_Down  =  0  :  _Momentum_Left_Right  =  0	:  gosub __Set_Up_Mario bank1  :  AUDC0  =  1  :  AUDF0  =  8
  19761  4ae9
  19762  4ae9		       a9 50		      LDA	#80
  19763  4aeb		       c5 85		      CMP	player0y
  19764  4aed		       b0 2a		      BCS	.skipL01181
  19765  4aef				   .condpart629
  19766  4aef		       a9 4f		      LDA	#79
  19767  4af1		       85 85		      STA	player0y
  19768  4af3		       a9 00		      LDA	#0
  19769  4af5		       85 e1		      STA	_Momentum_Up_Down
  19770  4af7		       85 e0		      STA	_Momentum_Left_Right
  19771  4af9		       85 ee		      sta	temp7
  19772  4afb		       a9 7b		      lda	#>(ret_point92-1)
  19773  4afd		       48		      pha
  19774  4afe		       a9 10		      lda	#<(ret_point92-1)
  19775  4b00		       48		      pha
  19776  4b01		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  19777  4b03		       48		      pha
  19778  4b04		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  19779  4b06		       48		      pha
  19780  4b07		       a5 ee		      lda	temp7
  19781  4b09		       48		      pha
  19782  4b0a		       8a		      txa
  19783  4b0b		       48		      pha
  19784  4b0c		       a2 01		      ldx	#1
  19785  4b0e		       4c eb ff 	      jmp	BS_jsr
  19786  4b11				   ret_point92
  19787  4b11		       a9 01		      LDA	#1
  19788  4b13		       85 15		      STA	AUDC0
  19789  4b15		       a9 08		      LDA	#8
  19790  4b17		       85 17		      STA	AUDF0
  19791  4b19				   .skipL01181
  19792  4b19				   .
  19793  4b19							; 
  19794  4b19
  19795  4b19				   .L01182		;  gosub __Slow_Boss
  19796  4b19
  19797  4b19		       20 a7 7c 	      jsr	.__Slow_Boss
  19798  4b1c
  19799  4b1c				   .
  19800  4b1c							; 
  19801  4b1c
  19802  4b1c				   .L01183		;  if player0y  =  79 then x  =  9  :	_Momentum_Up_Down  =  0  :  _Bit1_Jumping_Flag{1}  =  0  :  _Momentum_Left_Right  =  0	:  gosub __Set_Up_Mario bank1  :  goto __Boss_Fall
  19803  4b1c
  19804  4b1c		       a5 85		      LDA	player0y
  19805  4b1e		       c9 4f		      CMP	#79
  19806  4b20		       d0 2d		      BNE	.skipL01183
  19807  4b22				   .condpart630
  19808  4b22		       a9 09		      LDA	#9
  19809  4b24		       85 eb		      STA	x
  19810  4b26		       a9 00		      LDA	#0
  19811  4b28		       85 e1		      STA	_Momentum_Up_Down
  19812  4b2a		       a5 d7		      LDA	_Bit1_Jumping_Flag
  19813  4b2c		       29 fd		      AND	#253
  19814  4b2e		       85 d7		      STA	_Bit1_Jumping_Flag
  19815  4b30		       a9 00		      LDA	#0
  19816  4b32		       85 e0		      STA	_Momentum_Left_Right
  19817  4b34		       85 ee		      sta	temp7
  19818  4b36		       a9 7b		      lda	#>(ret_point93-1)
  19819  4b38		       48		      pha
  19820  4b39		       a9 4b		      lda	#<(ret_point93-1)
  19821  4b3b		       48		      pha
  19822  4b3c		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  19823  4b3e		       48		      pha
  19824  4b3f		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  19825  4b41		       48		      pha
  19826  4b42		       a5 ee		      lda	temp7
  19827  4b44		       48		      pha
  19828  4b45		       8a		      txa
  19829  4b46		       48		      pha
  19830  4b47		       a2 01		      ldx	#1
  19831  4b49		       4c eb ff 	      jmp	BS_jsr
  19832  4b4c				   ret_point93
  19833  4b4c		       4c 52 7b 	      jmp	.__Boss_Fall
  19834  4b4f
  19835  4b4f				   .skipL01183
  19836  4b4f				   .
  19837  4b4f							; 
  19838  4b4f
  19839  4b4f				   .L01184		;  goto __Mario_Fall
  19840  4b4f
  19841  4b4f		       4c cc 7a 	      jmp	.__Mario_Fall
  19842  4b52
  19843  4b52				   .
  19844  4b52							; 
  19845  4b52
  19846  4b52				   .__Boss_Fall
  19847  4b52							; __Boss_Fall
  19848  4b52
  19849  4b52				   .
  19850  4b52							; 
  19851  4b52
  19852  4b52				   .L01185		;  AUDV0  =  0
  19853  4b52
  19854  4b52		       a9 00		      LDA	#0
  19855  4b54		       85 19		      STA	AUDV0
  19856  4b56				   .
  19857  4b56							; 
  19858  4b56
  19859  4b56				   .L01186		;  for z  =  1 to 3
  19860  4b56
  19861  4b56		       a9 01		      LDA	#1
  19862  4b58		       85 ed		      STA	z
  19863  4b5a				   .L01186forz
  19864  4b5a				   .
  19865  4b5a							; 
  19866  4b5a
  19867  4b5a				   .L01187		;  gosub __Pause_Boss
  19868  4b5a
  19869  4b5a		       20 8d 7c 	      jsr	.__Pause_Boss
  19870  4b5d
  19871  4b5d				   .
  19872  4b5d							; 
  19873  4b5d
  19874  4b5d				   .L01188		;  next z
  19875  4b5d
  19876  4b5d		       a5 ed		      LDA	z
  19877  4b5f		       c9 03		      CMP	#3
  19878  4b61
  19879  4b61		       e6 ed		      INC	z
  19880  4b63					      if	((* - .L01186forz) < 127) && ((* - .L01186forz) > -128)
  19881  4b63		       90 f5		      bcc	.L01186forz
  19882  4b65				  -	      else
  19883  4b65				  -	      bcs	.13skipL01186forz
  19884  4b65				  -	      jmp	.L01186forz
  19885  4b65				  -.13skipL01186forz
  19886  4b65					      endif
  19887  4b65				   .
  19888  4b65							; 
  19889  4b65
  19890  4b65				   .L01189		;  player1x  =  116  :  player1y  =  0
  19891  4b65
  19892  4b65		       a9 74		      LDA	#116
  19893  4b67		       85 81		      STA	player1x
  19894  4b69		       a9 00		      LDA	#0
  19895  4b6b		       85 86		      STA	player1y
  19896  4b6d				   .
  19897  4b6d							; 
  19898  4b6d
  19899  4b6d				   .L01190		;  u  =  10  :  x  =  1  :  g	=  0  :  _Bit6_Checkpoint_Flag{6}  =  1
  19900  4b6d
  19901  4b6d		       a9 0a		      LDA	#10
  19902  4b6f		       85 e8		      STA	u
  19903  4b71		       a9 01		      LDA	#1
  19904  4b73		       85 eb		      STA	x
  19905  4b75		       a9 00		      LDA	#0
  19906  4b77		       85 da		      STA	g
  19907  4b79		       a5 da		      LDA	_Bit6_Checkpoint_Flag
  19908  4b7b		       09 40		      ORA	#64
  19909  4b7d		       85 da		      STA	_Bit6_Checkpoint_Flag
  19910  4b7f				   .
  19911  4b7f							; 
  19912  4b7f
  19913  4b7f				   .L01191		;  gosub __BJJColor  :  gosub __BJJ
  19914  4b7f
  19915  4b7f		       20 61 7e 	      jsr	.__BJJColor
  19916  4b82		       20 6a 7e 	      jsr	.__BJJ
  19917  4b85
  19918  4b85				   .
  19919  4b85							; 
  19920  4b85
  19921  4b85				   .__Boss_Fall_2
  19922  4b85							; __Boss_Fall_2
  19923  4b85
  19924  4b85				   .
  19925  4b85							; 
  19926  4b85
  19927  4b85				   .L01192		;  u  =  u  +	1  :  AUDV0  =	8  :  AUDC0  =	4  :  AUDF0  =	u  :  player1y	=  player1y  +	x
  19928  4b85
  19929  4b85		       e6 e8		      INC	u
  19930  4b87		       a9 08		      LDA	#8
  19931  4b89		       85 19		      STA	AUDV0
  19932  4b8b		       a9 04		      LDA	#4
  19933  4b8d		       85 15		      STA	AUDC0
  19934  4b8f		       a5 e8		      LDA	u
  19935  4b91		       85 17		      STA	AUDF0
  19936  4b93		       a5 86		      LDA	player1y
  19937  4b95		       18		      CLC
  19938  4b96		       65 eb		      ADC	x
  19939  4b98		       85 86		      STA	player1y
  19940  4b9a				   .
  19941  4b9a							; 
  19942  4b9a
  19943  4b9a				   .L01193		;  if x  <  7 then x  =  x  +	1
  19944  4b9a
  19945  4b9a		       a5 eb		      LDA	x
  19946  4b9c		       c9 07		      CMP	#7
  19947  4b9e		       b0 02		      BCS	.skipL01193
  19948  4ba0				   .condpart631
  19949  4ba0		       e6 eb		      INC	x
  19950  4ba2				   .skipL01193
  19951  4ba2				   .
  19952  4ba2							; 
  19953  4ba2
  19954  4ba2				   .L01194		;  if player1y  >  80 then player1y  =  79  :	gosub __BJCColor  :  gosub __BJC  :  AUDC0  =  1  :  AUDF0  =  8  :  gosub __Pause_Boss
  19955  4ba2
  19956  4ba2		       a9 50		      LDA	#80
  19957  4ba4		       c5 86		      CMP	player1y
  19958  4ba6		       b0 15		      BCS	.skipL01194
  19959  4ba8				   .condpart632
  19960  4ba8		       a9 4f		      LDA	#79
  19961  4baa		       85 86		      STA	player1y
  19962  4bac		       20 4b 7e 	      jsr	.__BJCColor
  19963  4baf		       20 54 7e 	      jsr	.__BJC
  19964  4bb2		       a9 01		      LDA	#1
  19965  4bb4		       85 15		      STA	AUDC0
  19966  4bb6		       a9 08		      LDA	#8
  19967  4bb8		       85 17		      STA	AUDF0
  19968  4bba		       20 8d 7c 	      jsr	.__Pause_Boss
  19969  4bbd
  19970  4bbd				   .skipL01194
  19971  4bbd				   .
  19972  4bbd							; 
  19973  4bbd
  19974  4bbd				   .L01195		;  gosub __Slow_Boss
  19975  4bbd
  19976  4bbd		       20 a7 7c 	      jsr	.__Slow_Boss
  19977  4bc0
  19978  4bc0				   .
  19979  4bc0							; 
  19980  4bc0
  19981  4bc0				   .L01196		;  if player1y  =  79 then gosub __BJC1  :  gosub __BJ1  :  x	=  0  :  goto __Boss_Fall_Fill_Lifebar
  19982  4bc0
  19983  4bc0		       a5 86		      LDA	player1y
  19984  4bc2		       c9 4f		      CMP	#79
  19985  4bc4		       d0 0d		      BNE	.skipL01196
  19986  4bc6				   .condpart633
  19987  4bc6		       20 1f 7e 	      jsr	.__BJC1
  19988  4bc9		       20 31 7e 	      jsr	.__BJ1
  19989  4bcc		       a9 00		      LDA	#0
  19990  4bce		       85 eb		      STA	x
  19991  4bd0		       4c d6 7b 	      jmp	.__Boss_Fall_Fill_Lifebar
  19992  4bd3
  19993  4bd3				   .skipL01196
  19994  4bd3				   .
  19995  4bd3							; 
  19996  4bd3
  19997  4bd3				   .L01197		;  goto __Boss_Fall_2
  19998  4bd3
  19999  4bd3		       4c 85 7b 	      jmp	.__Boss_Fall_2
  20000  4bd6
  20001  4bd6				   .
  20002  4bd6							; 
  20003  4bd6
  20004  4bd6				   .__Boss_Fall_Fill_Lifebar
  20005  4bd6							; __Boss_Fall_Fill_Lifebar
  20006  4bd6
  20007  4bd6				   .
  20008  4bd6							; 
  20009  4bd6
  20010  4bd6				   .L01198		;  x  =  x  +	1
  20011  4bd6
  20012  4bd6		       e6 eb		      INC	x
  20013  4bd8				   .
  20014  4bd8							; 
  20015  4bd8
  20016  4bd8				   .L01199		;  if x  =  1 then pfscore1  =  1 else pfscore1  =  pfscore1  *  2 | 1
  20017  4bd8
  20018  4bd8		       a5 eb		      LDA	x
  20019  4bda		       c9 01		      CMP	#1
  20020  4bdc		       d0 07		      BNE	.skipL01199
  20021  4bde				   .condpart634
  20022  4bde		       a9 01		      LDA	#1
  20023  4be0		       85 f2		      STA	pfscore1
  20024  4be2		       4c ec 7b 	      jmp	.skipelse84
  20025  4be5				   .skipL01199
  20026  4be5							; complex statement detected
  20027  4be5		       a5 f2		      LDA	pfscore1
  20028  4be7		       0a		      asl
  20029  4be8		       09 01		      ORA	#1
  20030  4bea		       85 f2		      STA	pfscore1
  20031  4bec				   .skipelse84
  20032  4bec				   .
  20033  4bec							; 
  20034  4bec
  20035  4bec				   .L01200		;  AUDV0  =  8  :  AUDC0  =  7  :  AUDF0  =  6
  20036  4bec
  20037  4bec		       a9 08		      LDA	#8
  20038  4bee		       85 19		      STA	AUDV0
  20039  4bf0		       a9 07		      LDA	#7
  20040  4bf2		       85 15		      STA	AUDC0
  20041  4bf4		       a9 06		      LDA	#6
  20042  4bf6		       85 17		      STA	AUDF0
  20043  4bf8				   .
  20044  4bf8							; 
  20045  4bf8
  20046  4bf8				   .L01201		;  gosub __Pause_Boss
  20047  4bf8
  20048  4bf8		       20 8d 7c 	      jsr	.__Pause_Boss
  20049  4bfb
  20050  4bfb				   .
  20051  4bfb							; 
  20052  4bfb
  20053  4bfb				   .L01202		;  if x  <  3 then goto __Boss_Fall_Fill_Lifebar
  20054  4bfb
  20055  4bfb		       a5 eb		      LDA	x
  20056  4bfd		       c9 03		      CMP	#3
  20057  4bff		       b0 03		      BCS	.skipL01202
  20058  4c01				   .condpart635
  20059  4c01		       4c d6 7b 	      jmp	.__Boss_Fall_Fill_Lifebar
  20060  4c04
  20061  4c04				   .skipL01202
  20062  4c04				   .
  20063  4c04							; 
  20064  4c04
  20065  4c04				   .__Boss_Fall_3
  20066  4c04							; __Boss_Fall_3
  20067  4c04
  20068  4c04				   .
  20069  4c04							; 
  20070  4c04
  20071  4c04				   .L01203		;  AUDV0  =  0
  20072  4c04
  20073  4c04		       a9 00		      LDA	#0
  20074  4c06		       85 19		      STA	AUDV0
  20075  4c08				   .
  20076  4c08							; 
  20077  4c08
  20078  4c08				   .L01204		;  for z  =  1 to 3
  20079  4c08
  20080  4c08		       a9 01		      LDA	#1
  20081  4c0a		       85 ed		      STA	z
  20082  4c0c				   .L01204forz
  20083  4c0c				   .
  20084  4c0c							; 
  20085  4c0c
  20086  4c0c				   .L01205		;  gosub __Pause_Boss
  20087  4c0c
  20088  4c0c		       20 8d 7c 	      jsr	.__Pause_Boss
  20089  4c0f
  20090  4c0f				   .
  20091  4c0f							; 
  20092  4c0f
  20093  4c0f				   .L01206		;  next z
  20094  4c0f
  20095  4c0f		       a5 ed		      LDA	z
  20096  4c11		       c9 03		      CMP	#3
  20097  4c13
  20098  4c13		       e6 ed		      INC	z
  20099  4c15					      if	((* - .L01204forz) < 127) && ((* - .L01204forz) > -128)
  20100  4c15		       90 f5		      bcc	.L01204forz
  20101  4c17				  -	      else
  20102  4c17				  -	      bcs	.14skipL01204forz
  20103  4c17				  -	      jmp	.L01204forz
  20104  4c17				  -.14skipL01204forz
  20105  4c17					      endif
  20106  4c17				   .
  20107  4c17							; 
  20108  4c17
  20109  4c17				   .L01207		;  for z  =  1 to 3
  20110  4c17
  20111  4c17		       a9 01		      LDA	#1
  20112  4c19		       85 ed		      STA	z
  20113  4c1b				   .L01207forz
  20114  4c1b				   .
  20115  4c1b							; 
  20116  4c1b
  20117  4c1b				   .L01208		;  u  =  $0e  :  x  =	17
  20118  4c1b
  20119  4c1b		       a9 0e		      LDA	#$0e
  20120  4c1d		       85 e8		      STA	u
  20121  4c1f		       a9 11		      LDA	#17
  20122  4c21		       85 eb		      STA	x
  20123  4c23				   .
  20124  4c23							; 
  20125  4c23
  20126  4c23				   .__Boss_Fall_4
  20127  4c23							; __Boss_Fall_4
  20128  4c23
  20129  4c23				   .
  20130  4c23							; 
  20131  4c23
  20132  4c23				   .L01209		;  x  =  x  +	1
  20133  4c23
  20134  4c23		       e6 eb		      INC	x
  20135  4c25				   .
  20136  4c25							; 
  20137  4c25
  20138  4c25				   .L01210		;  COLUBK  =  u
  20139  4c25
  20140  4c25		       a5 e8		      LDA	u
  20141  4c27		       85 09		      STA	COLUBK
  20142  4c29				   .
  20143  4c29							; 
  20144  4c29
  20145  4c29				   .L01211		;  AUDV0  =  8  :  AUDC0  =  1  :  AUDF0  =  x
  20146  4c29
  20147  4c29		       a9 08		      LDA	#8
  20148  4c2b		       85 19		      STA	AUDV0
  20149  4c2d		       a9 01		      LDA	#1
  20150  4c2f		       85 15		      STA	AUDC0
  20151  4c31		       a5 eb		      LDA	x
  20152  4c33		       85 17		      STA	AUDF0
  20153  4c35				   .
  20154  4c35							; 
  20155  4c35
  20156  4c35				   .L01212		;  gosub __Render_Screen_Boss
  20157  4c35
  20158  4c35		       20 b7 7c 	      jsr	.__Render_Screen_Boss
  20159  4c38
  20160  4c38				   .
  20161  4c38							; 
  20162  4c38
  20163  4c38				   .L01213		;  if u  >  0 then u  =  u  -	1  :  goto __Boss_Fall_4
  20164  4c38
  20165  4c38		       a9 00		      LDA	#0
  20166  4c3a		       c5 e8		      CMP	u
  20167  4c3c		       b0 05		      BCS	.skipL01213
  20168  4c3e				   .condpart636
  20169  4c3e		       c6 e8		      DEC	u
  20170  4c40		       4c 23 7c 	      jmp	.__Boss_Fall_4
  20171  4c43
  20172  4c43				   .skipL01213
  20173  4c43				   .
  20174  4c43							; 
  20175  4c43
  20176  4c43				   .L01214		;  next z
  20177  4c43
  20178  4c43		       a5 ed		      LDA	z
  20179  4c45		       c9 03		      CMP	#3
  20180  4c47
  20181  4c47		       e6 ed		      INC	z
  20182  4c49					      if	((* - .L01207forz) < 127) && ((* - .L01207forz) > -128)
  20183  4c49		       90 d0		      bcc	.L01207forz
  20184  4c4b				  -	      else
  20185  4c4b				  -	      bcs	.15skipL01207forz
  20186  4c4b				  -	      jmp	.L01207forz
  20187  4c4b				  -.15skipL01207forz
  20188  4c4b					      endif
  20189  4c4b				   .
  20190  4c4b							; 
  20191  4c4b
  20192  4c4b				   .L01215		;  _Enemy_Type  =  _Bowser_Jr	:  _Level_Data_Pointer	=  0  :  _Level_Timer  =  3  :	_Bit3_Enemy_Direction{3}  =  0	:  _Object_Scroll_In_Data  =  0  :  _Farthest_Traveled_On_Level  =  0
  20193  4c4b
  20194  4c4b		       a9 40		      LDA	#_Bowser_Jr
  20195  4c4d		       85 dc		      STA	_Enemy_Type
  20196  4c4f		       a9 00		      LDA	#0
  20197  4c51		       85 d5		      STA	_Level_Data_Pointer
  20198  4c53		       a9 03		      LDA	#3
  20199  4c55		       85 d8		      STA	_Level_Timer
  20200  4c57		       a5 da		      LDA	_Bit3_Enemy_Direction
  20201  4c59		       29 f7		      AND	#247
  20202  4c5b		       85 da		      STA	_Bit3_Enemy_Direction
  20203  4c5d		       a9 00		      LDA	#0
  20204  4c5f		       85 db		      STA	_Object_Scroll_In_Data
  20205  4c61		       85 e2		      STA	_Farthest_Traveled_On_Level
  20206  4c63				   .
  20207  4c63							; 
  20208  4c63
  20209  4c63				   .L01216		;  gosub __UW_Music bank7
  20210  4c63
  20211  4c63		       85 ee		      sta	temp7
  20212  4c65		       a9 7c		      lda	#>(ret_point94-1)
  20213  4c67		       48		      pha
  20214  4c68		       a9 7a		      lda	#<(ret_point94-1)
  20215  4c6a		       48		      pha
  20216  4c6b		       a9 da		      lda	#>(.__UW_Music-1)
  20217  4c6d		       48		      pha
  20218  4c6e		       a9 c2		      lda	#<(.__UW_Music-1)
  20219  4c70		       48		      pha
  20220  4c71		       a5 ee		      lda	temp7
  20221  4c73		       48		      pha
  20222  4c74		       8a		      txa
  20223  4c75		       48		      pha
  20224  4c76		       a2 07		      ldx	#7
  20225  4c78		       4c eb ff 	      jmp	BS_jsr
  20226  4c7b				   ret_point94
  20227  4c7b				   .
  20228  4c7b							; 
  20229  4c7b
  20230  4c7b				   .L01217		;  goto __Main_Loop bank1
  20231  4c7b
  20232  4c7b		       85 ee		      sta	temp7
  20233  4c7d		       a9 10		      lda	#>(.__Main_Loop-1)
  20234  4c7f		       48		      pha
  20235  4c80		       a9 b0		      lda	#<(.__Main_Loop-1)
  20236  4c82		       48		      pha
  20237  4c83		       a5 ee		      lda	temp7
  20238  4c85		       48		      pha
  20239  4c86		       8a		      txa
  20240  4c87		       48		      pha
  20241  4c88		       a2 01		      ldx	#1
  20242  4c8a		       4c eb ff 	      jmp	BS_jsr
  20243  4c8d				   .
  20244  4c8d							; 
  20245  4c8d
  20246  4c8d				   .__Pause_Boss
  20247  4c8d							; __Pause_Boss
  20248  4c8d
  20249  4c8d				   .
  20250  4c8d							; 
  20251  4c8d
  20252  4c8d				   .L01218		;  for y  =  1 to 30
  20253  4c8d
  20254  4c8d		       a9 01		      LDA	#1
  20255  4c8f		       85 ec		      STA	y
  20256  4c91				   .L01218fory
  20257  4c91				   .
  20258  4c91							; 
  20259  4c91
  20260  4c91				   .L01219		;  gosub __Render_Screen_Boss
  20261  4c91
  20262  4c91		       20 b7 7c 	      jsr	.__Render_Screen_Boss
  20263  4c94
  20264  4c94				   .
  20265  4c94							; 
  20266  4c94
  20267  4c94				   .L01220		;  if y  >  3 then AUDV0  =  0
  20268  4c94
  20269  4c94		       a9 03		      LDA	#3
  20270  4c96		       c5 ec		      CMP	y
  20271  4c98		       b0 04		      BCS	.skipL01220
  20272  4c9a				   .condpart637
  20273  4c9a		       a9 00		      LDA	#0
  20274  4c9c		       85 19		      STA	AUDV0
  20275  4c9e				   .skipL01220
  20276  4c9e				   .
  20277  4c9e							; 
  20278  4c9e
  20279  4c9e				   .L01221		;  next y
  20280  4c9e
  20281  4c9e		       a5 ec		      LDA	y
  20282  4ca0		       c9 1e		      CMP	#30
  20283  4ca2
  20284  4ca2		       e6 ec		      INC	y
  20285  4ca4					      if	((* - .L01218fory) < 127) && ((* - .L01218fory) > -128)
  20286  4ca4		       90 eb		      bcc	.L01218fory
  20287  4ca6				  -	      else
  20288  4ca6				  -	      bcs	.16skipL01218fory
  20289  4ca6				  -	      jmp	.L01218fory
  20290  4ca6				  -.16skipL01218fory
  20291  4ca6					      endif
  20292  4ca6				   .
  20293  4ca6							; 
  20294  4ca6
  20295  4ca6				   .L01222		;  return thisbank
  20296  4ca6
  20297  4ca6		       60		      RTS
  20298  4ca7				   .
  20299  4ca7							; 
  20300  4ca7
  20301  4ca7				   .__Slow_Boss
  20302  4ca7							; __Slow_Boss
  20303  4ca7
  20304  4ca7				   .
  20305  4ca7							; 
  20306  4ca7
  20307  4ca7				   .L01223		;  for y  =  1 to 3
  20308  4ca7
  20309  4ca7		       a9 01		      LDA	#1
  20310  4ca9		       85 ec		      STA	y
  20311  4cab				   .L01223fory
  20312  4cab				   .
  20313  4cab							; 
  20314  4cab
  20315  4cab				   .L01224		;  gosub __Render_Screen_Boss
  20316  4cab
  20317  4cab		       20 b7 7c 	      jsr	.__Render_Screen_Boss
  20318  4cae
  20319  4cae				   .
  20320  4cae							; 
  20321  4cae
  20322  4cae				   .L01225		;  next y
  20323  4cae
  20324  4cae		       a5 ec		      LDA	y
  20325  4cb0		       c9 03		      CMP	#3
  20326  4cb2
  20327  4cb2		       e6 ec		      INC	y
  20328  4cb4					      if	((* - .L01223fory) < 127) && ((* - .L01223fory) > -128)
  20329  4cb4		       90 f5		      bcc	.L01223fory
  20330  4cb6				  -	      else
  20331  4cb6				  -	      bcs	.17skipL01223fory
  20332  4cb6				  -	      jmp	.L01223fory
  20333  4cb6				  -.17skipL01223fory
  20334  4cb6					      endif
  20335  4cb6				   .
  20336  4cb6							; 
  20337  4cb6
  20338  4cb6				   .L01226		;  return thisbank
  20339  4cb6
  20340  4cb6		       60		      RTS
  20341  4cb7				   .
  20342  4cb7							; 
  20343  4cb7
  20344  4cb7				   .__Render_Screen_Boss
  20345  4cb7							; __Render_Screen_Boss
  20346  4cb7
  20347  4cb7				   .
  20348  4cb7							; 
  20349  4cb7
  20350  4cb7				   .L01227		;  COLUPF  =  $04
  20351  4cb7
  20352  4cb7		       a9 04		      LDA	#$04
  20353  4cb9		       85 08		      STA	COLUPF
  20354  4cbb				   .
  20355  4cbb							; 
  20356  4cbb
  20357  4cbb				   .L01228		;  NUSIZ1  =  $15
  20358  4cbb
  20359  4cbb		       a9 15		      LDA	#$15
  20360  4cbd		       85 05		      STA	NUSIZ1
  20361  4cbf				   .
  20362  4cbf							; 
  20363  4cbf
  20364  4cbf				   .L01229		;  if _Bit0_Player_Facing_Direction{0} then REFP0  =  8 else REFP0  =	0
  20365  4cbf
  20366  4cbf		       a5 d7		      LDA	_Bit0_Player_Facing_Direction
  20367  4cc1		       4a		      LSR
  20368  4cc2		       90 07		      BCC	.skipL01229
  20369  4cc4				   .condpart638
  20370  4cc4		       a9 08		      LDA	#8
  20371  4cc6		       85 0b		      STA	REFP0
  20372  4cc8		       4c cf 7c 	      jmp	.skipelse85
  20373  4ccb				   .skipL01229
  20374  4ccb		       a9 00		      LDA	#0
  20375  4ccd		       85 0b		      STA	REFP0
  20376  4ccf				   .skipelse85
  20377  4ccf				   .
  20378  4ccf							; 
  20379  4ccf
  20380  4ccf				   .L01230		;  if _Bit3_Enemy_Direction{3} then REFP1  =  8 else REFP1  =	0
  20381  4ccf
  20382  4ccf		       a5 da		      LDA	_Bit3_Enemy_Direction
  20383  4cd1		       29 08		      AND	#8
  20384  4cd3		       f0 07		      BEQ	.skipL01230
  20385  4cd5				   .condpart639
  20386  4cd5		       a9 08		      LDA	#8
  20387  4cd7		       85 0c		      STA	REFP1
  20388  4cd9		       4c e0 7c 	      jmp	.skipelse86
  20389  4cdc				   .skipL01230
  20390  4cdc		       a9 00		      LDA	#0
  20391  4cde		       85 0c		      STA	REFP1
  20392  4ce0				   .skipelse86
  20393  4ce0				   .
  20394  4ce0							; 
  20395  4ce0
  20396  4ce0				   .L01231		;  drawscreen
  20397  4ce0
  20398  4ce0		       85 ee		      sta	temp7
  20399  4ce2		       a9 7c		      lda	#>(ret_point95-1)
  20400  4ce4		       48		      pha
  20401  4ce5		       a9 f7		      lda	#<(ret_point95-1)
  20402  4ce7		       48		      pha
  20403  4ce8		       a9 f4		      lda	#>(drawscreen-1)
  20404  4cea		       48		      pha
  20405  4ceb		       a9 37		      lda	#<(drawscreen-1)
  20406  4ced		       48		      pha
  20407  4cee		       a5 ee		      lda	temp7
  20408  4cf0		       48		      pha
  20409  4cf1		       8a		      txa
  20410  4cf2		       48		      pha
  20411  4cf3		       a2 08		      ldx	#8
  20412  4cf5		       4c eb ff 	      jmp	BS_jsr
  20413  4cf8				   ret_point95
  20414  4cf8				   .
  20415  4cf8							; 
  20416  4cf8
  20417  4cf8				   .L01232		;  return thisbank
  20418  4cf8
  20419  4cf8		       60		      RTS
  20420  4cf9				   .
  20421  4cf9							; 
  20422  4cf9
  20423  4cf9				   .
  20424  4cf9							; 
  20425  4cf9
  20426  4cf9				   .__1World
  20427  4cf9							; __1World
  20428  4cf9
  20429  4cf9				   .L01233		;  player0:
  20430  4cf9
  20431  4cf9		       a2 bc		      LDX	#<playerL01233_0
  20432  4cfb		       86 8a		      STX	player0pointerlo
  20433  4cfd		       a9 fc		      LDA	#>playerL01233_0
  20434  4cff		       85 8b		      STA	player0pointerhi
  20435  4d01		       a9 07		      LDA	#7
  20436  4d03		       85 8e		      STA	player0height
  20437  4d05				   .L01234		;  return thisbank
  20438  4d05
  20439  4d05		       60		      RTS
  20440  4d06				   .
  20441  4d06							; 
  20442  4d06
  20443  4d06				   .__2World
  20444  4d06							; __2World
  20445  4d06
  20446  4d06				   .L01235		;  player0:
  20447  4d06
  20448  4d06		       a2 c4		      LDX	#<playerL01235_0
  20449  4d08		       86 8a		      STX	player0pointerlo
  20450  4d0a		       a9 fc		      LDA	#>playerL01235_0
  20451  4d0c		       85 8b		      STA	player0pointerhi
  20452  4d0e		       a9 07		      LDA	#7
  20453  4d10		       85 8e		      STA	player0height
  20454  4d12				   .L01236		;  return thisbank
  20455  4d12
  20456  4d12		       60		      RTS
  20457  4d13				   .
  20458  4d13							; 
  20459  4d13
  20460  4d13				   .__3World
  20461  4d13							; __3World
  20462  4d13
  20463  4d13				   .L01237		;  player0:
  20464  4d13
  20465  4d13		       a2 cc		      LDX	#<playerL01237_0
  20466  4d15		       86 8a		      STX	player0pointerlo
  20467  4d17		       a9 fc		      LDA	#>playerL01237_0
  20468  4d19		       85 8b		      STA	player0pointerhi
  20469  4d1b		       a9 07		      LDA	#7
  20470  4d1d		       85 8e		      STA	player0height
  20471  4d1f				   .L01238		;  return thisbank
  20472  4d1f
  20473  4d1f		       60		      RTS
  20474  4d20				   .
  20475  4d20							; 
  20476  4d20
  20477  4d20				   .__4World
  20478  4d20							; __4World
  20479  4d20
  20480  4d20				   .L01239		;  player0:
  20481  4d20
  20482  4d20		       a2 d4		      LDX	#<playerL01239_0
  20483  4d22		       86 8a		      STX	player0pointerlo
  20484  4d24		       a9 fc		      LDA	#>playerL01239_0
  20485  4d26		       85 8b		      STA	player0pointerhi
  20486  4d28		       a9 07		      LDA	#7
  20487  4d2a		       85 8e		      STA	player0height
  20488  4d2c				   .L01240		;  return thisbank
  20489  4d2c
  20490  4d2c		       60		      RTS
  20491  4d2d				   .
  20492  4d2d							; 
  20493  4d2d
  20494  4d2d				   .__1Level
  20495  4d2d							; __1Level
  20496  4d2d
  20497  4d2d				   .L01241		;  player1:
  20498  4d2d
  20499  4d2d		       a2 dc		      LDX	#<playerL01241_1
  20500  4d2f		       86 8c		      STX	player1pointerlo
  20501  4d31		       a9 fc		      LDA	#>playerL01241_1
  20502  4d33		       85 8d		      STA	player1pointerhi
  20503  4d35		       a9 07		      LDA	#7
  20504  4d37		       85 8f		      STA	player1height
  20505  4d39				   .L01242		;  return thisbank
  20506  4d39
  20507  4d39		       60		      RTS
  20508  4d3a				   .
  20509  4d3a							; 
  20510  4d3a
  20511  4d3a				   .__2Level
  20512  4d3a							; __2Level
  20513  4d3a
  20514  4d3a				   .L01243		;  player1:
  20515  4d3a
  20516  4d3a		       a2 e4		      LDX	#<playerL01243_1
  20517  4d3c		       86 8c		      STX	player1pointerlo
  20518  4d3e		       a9 fc		      LDA	#>playerL01243_1
  20519  4d40		       85 8d		      STA	player1pointerhi
  20520  4d42		       a9 07		      LDA	#7
  20521  4d44		       85 8f		      STA	player1height
  20522  4d46				   .L01244		;  return thisbank
  20523  4d46
  20524  4d46		       60		      RTS
  20525  4d47				   .
  20526  4d47							; 
  20527  4d47
  20528  4d47				   .__3Level
  20529  4d47							; __3Level
  20530  4d47
  20531  4d47				   .L01245		;  player1:
  20532  4d47
  20533  4d47		       a2 ec		      LDX	#<playerL01245_1
  20534  4d49		       86 8c		      STX	player1pointerlo
  20535  4d4b		       a9 fc		      LDA	#>playerL01245_1
  20536  4d4d		       85 8d		      STA	player1pointerhi
  20537  4d4f		       a9 07		      LDA	#7
  20538  4d51		       85 8f		      STA	player1height
  20539  4d53				   .L01246		;  return thisbank
  20540  4d53
  20541  4d53		       60		      RTS
  20542  4d54				   .
  20543  4d54							; 
  20544  4d54
  20545  4d54				   .__4Level
  20546  4d54							; __4Level
  20547  4d54
  20548  4d54				   .L01247		;  player1:
  20549  4d54
  20550  4d54		       a2 f4		      LDX	#<playerL01247_1
  20551  4d56		       86 8c		      STX	player1pointerlo
  20552  4d58		       a9 fc		      LDA	#>playerL01247_1
  20553  4d5a		       85 8d		      STA	player1pointerhi
  20554  4d5c		       a9 07		      LDA	#7
  20555  4d5e		       85 8f		      STA	player1height
  20556  4d60				   .L01248		;  return thisbank
  20557  4d60
  20558  4d60		       60		      RTS
  20559  4d61				   .
  20560  4d61							; 
  20561  4d61
  20562  4d61				   .__1Mario
  20563  4d61							; __1Mario
  20564  4d61
  20565  4d61				   .L01249		;  player1:
  20566  4d61
  20567  4d61		       a2 00		      LDX	#<playerL01249_1
  20568  4d63		       86 8c		      STX	player1pointerlo
  20569  4d65		       a9 fd		      LDA	#>playerL01249_1
  20570  4d67		       85 8d		      STA	player1pointerhi
  20571  4d69		       a9 07		      LDA	#7
  20572  4d6b		       85 8f		      STA	player1height
  20573  4d6d				   .L01250		;  return thisbank
  20574  4d6d
  20575  4d6d		       60		      RTS
  20576  4d6e				   .
  20577  4d6e							; 
  20578  4d6e
  20579  4d6e				   .__2Mario
  20580  4d6e							; __2Mario
  20581  4d6e
  20582  4d6e				   .L01251		;  player1:
  20583  4d6e
  20584  4d6e		       a2 08		      LDX	#<playerL01251_1
  20585  4d70		       86 8c		      STX	player1pointerlo
  20586  4d72		       a9 fd		      LDA	#>playerL01251_1
  20587  4d74		       85 8d		      STA	player1pointerhi
  20588  4d76		       a9 07		      LDA	#7
  20589  4d78		       85 8f		      STA	player1height
  20590  4d7a				   .L01252		;  return thisbank
  20591  4d7a
  20592  4d7a		       60		      RTS
  20593  4d7b				   .
  20594  4d7b							; 
  20595  4d7b
  20596  4d7b				   .__3Mario
  20597  4d7b							; __3Mario
  20598  4d7b
  20599  4d7b				   .L01253		;  player1:
  20600  4d7b
  20601  4d7b		       a2 10		      LDX	#<playerL01253_1
  20602  4d7d		       86 8c		      STX	player1pointerlo
  20603  4d7f		       a9 fd		      LDA	#>playerL01253_1
  20604  4d81		       85 8d		      STA	player1pointerhi
  20605  4d83		       a9 07		      LDA	#7
  20606  4d85		       85 8f		      STA	player1height
  20607  4d87				   .L01254		;  return thisbank
  20608  4d87
  20609  4d87		       60		      RTS
  20610  4d88				   .
  20611  4d88							; 
  20612  4d88
  20613  4d88				   .__4Mario
  20614  4d88							; __4Mario
  20615  4d88
  20616  4d88				   .L01255		;  player1:
  20617  4d88
  20618  4d88		       a2 18		      LDX	#<playerL01255_1
  20619  4d8a		       86 8c		      STX	player1pointerlo
  20620  4d8c		       a9 fd		      LDA	#>playerL01255_1
  20621  4d8e		       85 8d		      STA	player1pointerhi
  20622  4d90		       a9 07		      LDA	#7
  20623  4d92		       85 8f		      STA	player1height
  20624  4d94				   .L01256		;  return thisbank
  20625  4d94
  20626  4d94		       60		      RTS
  20627  4d95				   .
  20628  4d95							; 
  20629  4d95
  20630  4d95				   .__5Mario
  20631  4d95							; __5Mario
  20632  4d95
  20633  4d95				   .L01257		;  player1:
  20634  4d95
  20635  4d95		       a2 20		      LDX	#<playerL01257_1
  20636  4d97		       86 8c		      STX	player1pointerlo
  20637  4d99		       a9 fd		      LDA	#>playerL01257_1
  20638  4d9b		       85 8d		      STA	player1pointerhi
  20639  4d9d		       a9 07		      LDA	#7
  20640  4d9f		       85 8f		      STA	player1height
  20641  4da1				   .L01258		;  return thisbank
  20642  4da1
  20643  4da1		       60		      RTS
  20644  4da2				   .
  20645  4da2							; 
  20646  4da2
  20647  4da2				   .__6Mario
  20648  4da2							; __6Mario
  20649  4da2
  20650  4da2				   .L01259		;  player1:
  20651  4da2
  20652  4da2		       a2 28		      LDX	#<playerL01259_1
  20653  4da4		       86 8c		      STX	player1pointerlo
  20654  4da6		       a9 fd		      LDA	#>playerL01259_1
  20655  4da8		       85 8d		      STA	player1pointerhi
  20656  4daa		       a9 07		      LDA	#7
  20657  4dac		       85 8f		      STA	player1height
  20658  4dae				   .L01260		;  return thisbank
  20659  4dae
  20660  4dae		       60		      RTS
  20661  4daf				   .
  20662  4daf							; 
  20663  4daf
  20664  4daf				   .__7Mario
  20665  4daf							; __7Mario
  20666  4daf
  20667  4daf				   .L01261		;  player1:
  20668  4daf
  20669  4daf		       a2 30		      LDX	#<playerL01261_1
  20670  4db1		       86 8c		      STX	player1pointerlo
  20671  4db3		       a9 fd		      LDA	#>playerL01261_1
  20672  4db5		       85 8d		      STA	player1pointerhi
  20673  4db7		       a9 07		      LDA	#7
  20674  4db9		       85 8f		      STA	player1height
  20675  4dbb				   .L01262		;  return thisbank
  20676  4dbb
  20677  4dbb		       60		      RTS
  20678  4dbc				   .
  20679  4dbc							; 
  20680  4dbc
  20681  4dbc				   .__8Mario
  20682  4dbc							; __8Mario
  20683  4dbc
  20684  4dbc				   .L01263		;  player1:
  20685  4dbc
  20686  4dbc		       a2 38		      LDX	#<playerL01263_1
  20687  4dbe		       86 8c		      STX	player1pointerlo
  20688  4dc0		       a9 fd		      LDA	#>playerL01263_1
  20689  4dc2		       85 8d		      STA	player1pointerhi
  20690  4dc4		       a9 07		      LDA	#7
  20691  4dc6		       85 8f		      STA	player1height
  20692  4dc8				   .L01264		;  return thisbank
  20693  4dc8
  20694  4dc8		       60		      RTS
  20695  4dc9				   .
  20696  4dc9							; 
  20697  4dc9
  20698  4dc9				   .__9Mario
  20699  4dc9							; __9Mario
  20700  4dc9
  20701  4dc9				   .L01265		;  player1:
  20702  4dc9
  20703  4dc9		       a2 40		      LDX	#<playerL01265_1
  20704  4dcb		       86 8c		      STX	player1pointerlo
  20705  4dcd		       a9 fd		      LDA	#>playerL01265_1
  20706  4dcf		       85 8d		      STA	player1pointerhi
  20707  4dd1		       a9 07		      LDA	#7
  20708  4dd3		       85 8f		      STA	player1height
  20709  4dd5				   .L01266		;  return thisbank
  20710  4dd5
  20711  4dd5		       60		      RTS
  20712  4dd6				   .
  20713  4dd6							; 
  20714  4dd6
  20715  4dd6				   .__Mario_Icon
  20716  4dd6							; __Mario_Icon
  20717  4dd6
  20718  4dd6				   .L01267		;  player0color:
  20719  4dd6
  20720  4dd6		       a2 48		      LDX	#<playercolorL01267_0
  20721  4dd8		       86 90		      STX	player0color
  20722  4dda		       a9 fd		      LDA	#>playercolorL01267_0
  20723  4ddc		       85 91		      STA	player0color+1
  20724  4dde				   .
  20725  4dde							; 
  20726  4dde
  20727  4dde				   .L01268		;  player0:
  20728  4dde
  20729  4dde		       a2 55		      LDX	#<playerL01268_0
  20730  4de0		       86 8a		      STX	player0pointerlo
  20731  4de2		       a9 fd		      LDA	#>playerL01268_0
  20732  4de4		       85 8b		      STA	player0pointerhi
  20733  4de6		       a9 0c		      LDA	#12
  20734  4de8		       85 8e		      STA	player0height
  20735  4dea				   .L01269		;  return thisbank
  20736  4dea
  20737  4dea		       60		      RTS
  20738  4deb				   .
  20739  4deb							; 
  20740  4deb
  20741  4deb				   .
  20742  4deb							; 
  20743  4deb
  20744  4deb				   .__GA
  20745  4deb							; __GA
  20746  4deb
  20747  4deb				   .L01270		;  player0:
  20748  4deb
  20749  4deb		       a2 62		      LDX	#<playerL01270_0
  20750  4ded		       86 8a		      STX	player0pointerlo
  20751  4def		       a9 fd		      LDA	#>playerL01270_0
  20752  4df1		       85 8b		      STA	player0pointerhi
  20753  4df3		       a9 07		      LDA	#7
  20754  4df5		       85 8e		      STA	player0height
  20755  4df7				   .L01271		;  return thisbank
  20756  4df7
  20757  4df7		       60		      RTS
  20758  4df8				   .
  20759  4df8							; 
  20760  4df8
  20761  4df8				   .__ME
  20762  4df8							; __ME
  20763  4df8
  20764  4df8				   .L01272		;  player1:
  20765  4df8
  20766  4df8		       a2 6a		      LDX	#<playerL01272_1
  20767  4dfa		       86 8c		      STX	player1pointerlo
  20768  4dfc		       a9 fd		      LDA	#>playerL01272_1
  20769  4dfe		       85 8d		      STA	player1pointerhi
  20770  4e00		       a9 07		      LDA	#7
  20771  4e02		       85 8f		      STA	player1height
  20772  4e04				   .L01273		;  return thisbank
  20773  4e04
  20774  4e04		       60		      RTS
  20775  4e05				   .
  20776  4e05							; 
  20777  4e05
  20778  4e05				   .__OV
  20779  4e05							; __OV
  20780  4e05
  20781  4e05				   .L01274		;  player0:
  20782  4e05
  20783  4e05		       a2 72		      LDX	#<playerL01274_0
  20784  4e07		       86 8a		      STX	player0pointerlo
  20785  4e09		       a9 fd		      LDA	#>playerL01274_0
  20786  4e0b		       85 8b		      STA	player0pointerhi
  20787  4e0d		       a9 07		      LDA	#7
  20788  4e0f		       85 8e		      STA	player0height
  20789  4e11				   .L01275		;  return thisbank
  20790  4e11
  20791  4e11		       60		      RTS
  20792  4e12				   .
  20793  4e12							; 
  20794  4e12
  20795  4e12				   .__ER
  20796  4e12							; __ER
  20797  4e12
  20798  4e12				   .L01276		;  player1:
  20799  4e12
  20800  4e12		       a2 7a		      LDX	#<playerL01276_1
  20801  4e14		       86 8c		      STX	player1pointerlo
  20802  4e16		       a9 fd		      LDA	#>playerL01276_1
  20803  4e18		       85 8d		      STA	player1pointerhi
  20804  4e1a		       a9 07		      LDA	#7
  20805  4e1c		       85 8f		      STA	player1height
  20806  4e1e				   .L01277		;  return thisbank
  20807  4e1e
  20808  4e1e		       60		      RTS
  20809  4e1f				   .
  20810  4e1f							; 
  20811  4e1f
  20812  4e1f				   .__BJC1
  20813  4e1f							; __BJC1
  20814  4e1f
  20815  4e1f				   .L01278		;  player1color:
  20816  4e1f
  20817  4e1f		       a2 82		      LDX	#<playercolorL01278_1
  20818  4e21		       86 87		      STX	player1color
  20819  4e23		       a9 fd		      LDA	#>playercolorL01278_1
  20820  4e25		       85 88		      STA	player1color+1
  20821  4e27				   .L01279		;  return thisbank
  20822  4e27
  20823  4e27		       60		      RTS
  20824  4e28				   .
  20825  4e28							; 
  20826  4e28
  20827  4e28				   .__BJDColor
  20828  4e28							; __BJDColor
  20829  4e28
  20830  4e28				   .L01280		;  player1color:
  20831  4e28
  20832  4e28		       a2 9a		      LDX	#<playercolorL01280_1
  20833  4e2a		       86 87		      STX	player1color
  20834  4e2c		       a9 fd		      LDA	#>playercolorL01280_1
  20835  4e2e		       85 88		      STA	player1color+1
  20836  4e30				   .L01281		;  return thisbank
  20837  4e30
  20838  4e30		       60		      RTS
  20839  4e31				   .
  20840  4e31							; 
  20841  4e31
  20842  4e31				   .__BJ1
  20843  4e31							; __BJ1
  20844  4e31
  20845  4e31				   .L01282		;  player1:
  20846  4e31
  20847  4e31		       a2 af		      LDX	#<playerL01282_1
  20848  4e33		       86 8c		      STX	player1pointerlo
  20849  4e35		       a9 fd		      LDA	#>playerL01282_1
  20850  4e37		       85 8d		      STA	player1pointerhi
  20851  4e39		       a9 17		      LDA	#23
  20852  4e3b		       85 8f		      STA	player1height
  20853  4e3d				   .L01283		;  return thisbank
  20854  4e3d
  20855  4e3d		       60		      RTS
  20856  4e3e				   .
  20857  4e3e							; 
  20858  4e3e
  20859  4e3e				   .__BJ2
  20860  4e3e							; __BJ2
  20861  4e3e
  20862  4e3e				   .L01284		;  player1:
  20863  4e3e
  20864  4e3e		       a2 c7		      LDX	#<playerL01284_1
  20865  4e40		       86 8c		      STX	player1pointerlo
  20866  4e42		       a9 fd		      LDA	#>playerL01284_1
  20867  4e44		       85 8d		      STA	player1pointerhi
  20868  4e46		       a9 17		      LDA	#23
  20869  4e48		       85 8f		      STA	player1height
  20870  4e4a				   .L01285		;  return thisbank
  20871  4e4a
  20872  4e4a		       60		      RTS
  20873  4e4b				   .
  20874  4e4b							; 
  20875  4e4b
  20876  4e4b				   .__BJCColor
  20877  4e4b							; __BJCColor
  20878  4e4b
  20879  4e4b				   .L01286		;  player1color:
  20880  4e4b
  20881  4e4b		       a2 df		      LDX	#<playercolorL01286_1
  20882  4e4d		       86 87		      STX	player1color
  20883  4e4f		       a9 fd		      LDA	#>playercolorL01286_1
  20884  4e51		       85 88		      STA	player1color+1
  20885  4e53				   .L01287		;  return thisbank
  20886  4e53
  20887  4e53		       60		      RTS
  20888  4e54				   .
  20889  4e54							; 
  20890  4e54
  20891  4e54				   .__BJC
  20892  4e54							; __BJC
  20893  4e54
  20894  4e54				   .L01288		;  player1:
  20895  4e54
  20896  4e54		       a2 00		      LDX	#<playerL01288_1
  20897  4e56		       86 8c		      STX	player1pointerlo
  20898  4e58		       a9 fe		      LDA	#>playerL01288_1
  20899  4e5a		       85 8d		      STA	player1pointerhi
  20900  4e5c		       a9 13		      LDA	#19
  20901  4e5e		       85 8f		      STA	player1height
  20902  4e60				   .L01289		;  return thisbank
  20903  4e60
  20904  4e60		       60		      RTS
  20905  4e61				   .
  20906  4e61							; 
  20907  4e61
  20908  4e61				   .__BJJColor
  20909  4e61							; __BJJColor
  20910  4e61
  20911  4e61				   .L01290		;  player1color:
  20912  4e61
  20913  4e61		       a2 14		      LDX	#<playercolorL01290_1
  20914  4e63		       86 87		      STX	player1color
  20915  4e65		       a9 fe		      LDA	#>playercolorL01290_1
  20916  4e67		       85 88		      STA	player1color+1
  20917  4e69				   .L01291		;  return thisbank
  20918  4e69
  20919  4e69		       60		      RTS
  20920  4e6a				   .
  20921  4e6a							; 
  20922  4e6a
  20923  4e6a				   .__BJJ
  20924  4e6a							; __BJJ
  20925  4e6a
  20926  4e6a				   .L01292		;  player1:
  20927  4e6a
  20928  4e6a		       a2 2d		      LDX	#<playerL01292_1
  20929  4e6c		       86 8c		      STX	player1pointerlo
  20930  4e6e		       a9 fe		      LDA	#>playerL01292_1
  20931  4e70		       85 8d		      STA	player1pointerhi
  20932  4e72		       a9 18		      LDA	#24
  20933  4e74		       85 8f		      STA	player1height
  20934  4e76				   .L01293		;  return thisbank
  20935  4e76
  20936  4e76		       60		      RTS
  20937  4e77				   .
  20938  4e77							; 
  20939  4e77
  20940  4e77				   .__BJDC
  20941  4e77							; __BJDC
  20942  4e77
  20943  4e77				   .L01294		;  player1color:
  20944  4e77
  20945  4e77		       a2 46		      LDX	#<playercolorL01294_1
  20946  4e79		       86 87		      STX	player1color
  20947  4e7b		       a9 fe		      LDA	#>playercolorL01294_1
  20948  4e7d		       85 88		      STA	player1color+1
  20949  4e7f				   .L01295		;  return thisbank
  20950  4e7f
  20951  4e7f		       60		      RTS
  20952  4e80				   .
  20953  4e80							; 
  20954  4e80
  20955  4e80				   .__BJD
  20956  4e80							; __BJD
  20957  4e80
  20958  4e80				   .L01296		;  player1:
  20959  4e80
  20960  4e80		       a2 5b		      LDX	#<playerL01296_1
  20961  4e82		       86 8c		      STX	player1pointerlo
  20962  4e84		       a9 fe		      LDA	#>playerL01296_1
  20963  4e86		       85 8d		      STA	player1pointerhi
  20964  4e88		       a9 14		      LDA	#20
  20965  4e8a		       85 8f		      STA	player1height
  20966  4e8c				   .L01297		;  return thisbank
  20967  4e8c
  20968  4e8c		       60		      RTS
  20969  4e8d				   .
  20970  4e8d							; 
  20971  4e8d
  20972  4e8d				   .__BJSC
  20973  4e8d							; __BJSC
  20974  4e8d
  20975  4e8d				   .L01298		;  player1color:
  20976  4e8d
  20977  4e8d		       a2 70		      LDX	#<playercolorL01298_1
  20978  4e8f		       86 87		      STX	player1color
  20979  4e91		       a9 fe		      LDA	#>playercolorL01298_1
  20980  4e93		       85 88		      STA	player1color+1
  20981  4e95				   .L01299		;  return thisbank
  20982  4e95
  20983  4e95		       60		      RTS
  20984  4e96				   .
  20985  4e96							; 
  20986  4e96
  20987  4e96				   .__BJS
  20988  4e96							; __BJS
  20989  4e96
  20990  4e96				   .L01300		;  player1:
  20991  4e96
  20992  4e96		       a2 78		      LDX	#<playerL01300_1
  20993  4e98		       86 8c		      STX	player1pointerlo
  20994  4e9a		       a9 fe		      LDA	#>playerL01300_1
  20995  4e9c		       85 8d		      STA	player1pointerhi
  20996  4e9e		       a9 07		      LDA	#7
  20997  4ea0		       85 8f		      STA	player1height
  20998  4ea2				   .L01301		;  return thisbank
  20999  4ea2
  21000  4ea2		       60		      RTS
  21001  4ea3				   .
  21002  4ea3							; 
  21003  4ea3
  21004  4ea3				   .__Play_Game_Over_Music
  21005  4ea3							; __Play_Game_Over_Music
  21006  4ea3
  21007  4ea3				   .
  21008  4ea3							; 
  21009  4ea3
  21010  4ea3				   .
  21011  4ea3							; 
  21012  4ea3
  21013  4ea3				   .
  21014  4ea3							; 
  21015  4ea3
  21016  4ea3				   .
  21017  4ea3							; 
  21018  4ea3
  21019  4ea3				   .L01302		;  _Music_Duration  =	_Music_Duration  -  1
  21020  4ea3
  21021  4ea3		       c6 e3		      DEC	_Music_Duration
  21022  4ea5				   .
  21023  4ea5							; 
  21024  4ea5
  21025  4ea5				   .L01303		;  if _Music_Duration	>  0 then goto __Got_Gm_Ovr_Music
  21026  4ea5
  21027  4ea5		       a9 00		      LDA	#0
  21028  4ea7		       c5 e3		      CMP	_Music_Duration
  21029  4ea9		       b0 03		      BCS	.skipL01303
  21030  4eab				   .condpart640
  21031  4eab		       4c 27 7f 	      jmp	.__Got_Gm_Ovr_Music
  21032  4eae
  21033  4eae				   .skipL01303
  21034  4eae				   .
  21035  4eae							; 
  21036  4eae
  21037  4eae				   .
  21038  4eae							; 
  21039  4eae
  21040  4eae				   .
  21041  4eae							; 
  21042  4eae
  21043  4eae				   .
  21044  4eae							; 
  21045  4eae
  21046  4eae				   .L01304		;  temp4  =  sread ( _GameOverMusicData ) 
  21047  4eae
  21048  4eae		       a2 e4		      ldx	#_GameOverMusicData
  21049  4eb0		       a1 00		      lda	(0,x)
  21050  4eb2		       f6 00		      inc	0,x
  21051  4eb4		       d0 02		      bne	*+4
  21052  4eb6		       f6 01		      inc	1,x
  21053  4eb8		       85 9f		      STA	temp4
  21054  4eba				   .
  21055  4eba							; 
  21056  4eba
  21057  4eba				   .
  21058  4eba							; 
  21059  4eba
  21060  4eba				   .
  21061  4eba							; 
  21062  4eba
  21063  4eba				   .
  21064  4eba							; 
  21065  4eba
  21066  4eba				   .L01305		;  if temp4  =  255 then _Music_Duration  =  255  :  goto __Got_Gm_Ovr_Music
  21067  4eba
  21068  4eba		       a5 9f		      LDA	temp4
  21069  4ebc		       c9 ff		      CMP	#255
  21070  4ebe		       d0 07		      BNE	.skipL01305
  21071  4ec0				   .condpart641
  21072  4ec0		       a9 ff		      LDA	#255
  21073  4ec2		       85 e3		      STA	_Music_Duration
  21074  4ec4		       4c 27 7f 	      jmp	.__Got_Gm_Ovr_Music
  21075  4ec7
  21076  4ec7				   .skipL01305
  21077  4ec7				   .
  21078  4ec7							; 
  21079  4ec7
  21080  4ec7				   .
  21081  4ec7							; 
  21082  4ec7
  21083  4ec7				   .
  21084  4ec7							; 
  21085  4ec7
  21086  4ec7				   .
  21087  4ec7							; 
  21088  4ec7
  21089  4ec7				   .L01306		;  temp5  =  sread ( _GameOverMusicData ) 
  21090  4ec7
  21091  4ec7		       a2 e4		      ldx	#_GameOverMusicData
  21092  4ec9		       a1 00		      lda	(0,x)
  21093  4ecb		       f6 00		      inc	0,x
  21094  4ecd		       d0 02		      bne	*+4
  21095  4ecf		       f6 01		      inc	1,x
  21096  4ed1		       85 a0		      STA	temp5
  21097  4ed3				   .L01307		;  temp6  =  sread ( _GameOverMusicData ) 
  21098  4ed3
  21099  4ed3		       a2 e4		      ldx	#_GameOverMusicData
  21100  4ed5		       a1 00		      lda	(0,x)
  21101  4ed7		       f6 00		      inc	0,x
  21102  4ed9		       d0 02		      bne	*+4
  21103  4edb		       f6 01		      inc	1,x
  21104  4edd		       85 a1		      STA	temp6
  21105  4edf				   .
  21106  4edf							; 
  21107  4edf
  21108  4edf				   .
  21109  4edf							; 
  21110  4edf
  21111  4edf				   .
  21112  4edf							; 
  21113  4edf
  21114  4edf				   .
  21115  4edf							; 
  21116  4edf
  21117  4edf				   .L01308		;  AUDV0  =  temp4
  21118  4edf
  21119  4edf		       a5 9f		      LDA	temp4
  21120  4ee1		       85 19		      STA	AUDV0
  21121  4ee3				   .L01309		;  AUDC0  =  temp5
  21122  4ee3
  21123  4ee3		       a5 a0		      LDA	temp5
  21124  4ee5		       85 15		      STA	AUDC0
  21125  4ee7				   .L01310		;  AUDF0  =  temp6
  21126  4ee7
  21127  4ee7		       a5 a1		      LDA	temp6
  21128  4ee9		       85 17		      STA	AUDF0
  21129  4eeb				   .
  21130  4eeb							; 
  21131  4eeb
  21132  4eeb				   .
  21133  4eeb							; 
  21134  4eeb
  21135  4eeb				   .
  21136  4eeb							; 
  21137  4eeb
  21138  4eeb				   .
  21139  4eeb							; 
  21140  4eeb
  21141  4eeb				   .L01311		;  temp4  =  sread ( _GameOverMusicData ) 
  21142  4eeb
  21143  4eeb		       a2 e4		      ldx	#_GameOverMusicData
  21144  4eed		       a1 00		      lda	(0,x)
  21145  4eef		       f6 00		      inc	0,x
  21146  4ef1		       d0 02		      bne	*+4
  21147  4ef3		       f6 01		      inc	1,x
  21148  4ef5		       85 9f		      STA	temp4
  21149  4ef7				   .L01312		;  temp5  =  sread ( _GameOverMusicData ) 
  21150  4ef7
  21151  4ef7		       a2 e4		      ldx	#_GameOverMusicData
  21152  4ef9		       a1 00		      lda	(0,x)
  21153  4efb		       f6 00		      inc	0,x
  21154  4efd		       d0 02		      bne	*+4
  21155  4eff		       f6 01		      inc	1,x
  21156  4f01		       85 a0		      STA	temp5
  21157  4f03				   .L01313		;  temp6  =  sread ( _GameOverMusicData ) 
  21158  4f03
  21159  4f03		       a2 e4		      ldx	#_GameOverMusicData
  21160  4f05		       a1 00		      lda	(0,x)
  21161  4f07		       f6 00		      inc	0,x
  21162  4f09		       d0 02		      bne	*+4
  21163  4f0b		       f6 01		      inc	1,x
  21164  4f0d		       85 a1		      STA	temp6
  21165  4f0f				   .
  21166  4f0f							; 
  21167  4f0f
  21168  4f0f				   .
  21169  4f0f							; 
  21170  4f0f
  21171  4f0f				   .
  21172  4f0f							; 
  21173  4f0f
  21174  4f0f				   .
  21175  4f0f							; 
  21176  4f0f
  21177  4f0f				   .L01314		;  AUDV1  =  temp4
  21178  4f0f
  21179  4f0f		       a5 9f		      LDA	temp4
  21180  4f11		       85 1a		      STA	AUDV1
  21181  4f13				   .L01315		;  AUDC1  =  temp5
  21182  4f13
  21183  4f13		       a5 a0		      LDA	temp5
  21184  4f15		       85 16		      STA	AUDC1
  21185  4f17				   .L01316		;  AUDF1  =  temp6
  21186  4f17
  21187  4f17		       a5 a1		      LDA	temp6
  21188  4f19		       85 18		      STA	AUDF1
  21189  4f1b				   .
  21190  4f1b							; 
  21191  4f1b
  21192  4f1b				   .
  21193  4f1b							; 
  21194  4f1b
  21195  4f1b				   .
  21196  4f1b							; 
  21197  4f1b
  21198  4f1b				   .
  21199  4f1b							; 
  21200  4f1b
  21201  4f1b				   .L01317		;  _Music_Duration  =	sread ( _GameOverMusicData ) 
  21202  4f1b
  21203  4f1b		       a2 e4		      ldx	#_GameOverMusicData
  21204  4f1d		       a1 00		      lda	(0,x)
  21205  4f1f		       f6 00		      inc	0,x
  21206  4f21		       d0 02		      bne	*+4
  21207  4f23		       f6 01		      inc	1,x
  21208  4f25		       85 e3		      STA	_Music_Duration
  21209  4f27				   .
  21210  4f27							; 
  21211  4f27
  21212  4f27				   .__Got_Gm_Ovr_Music
  21213  4f27							; __Got_Gm_Ovr_Music
  21214  4f27
  21215  4f27				   .
  21216  4f27							; 
  21217  4f27
  21218  4f27				   .L01318		;  return thisbank
  21219  4f27
  21220  4f27		       60		      RTS
  21221  4f28				   .
  21222  4f28							; 
  21223  4f28
  21224  4f28				   .
  21225  4f28							; 
  21226  4f28
  21227  4f28				   .
  21228  4f28							; 
  21229  4f28
  21230  4f28				   .
  21231  4f28							; 
  21232  4f28
  21233  4f28				   .
  21234  4f28							; 
  21235  4f28
  21236  4f28				   .
  21237  4f28							; 
  21238  4f28
  21239  4f28				   .
  21240  4f28							; 
  21241  4f28
  21242  4f28				   .__Game_Over_Music
  21243  4f28							; __Game_Over_Music
  21244  4f28
  21245  4f28				   .L01319		;  sdata _GameOverMusicData = q
  21246  4f28
  21247  4f28		       a9 33		      lda	#<_GameOverMusicData_begin
  21248  4f2a		       85 e4		      sta	q
  21249  4f2c		       a9 7f		      lda	#>_GameOverMusicData_begin
  21250  4f2e		       85 e5		      sta	q+1
  21251  4f30		       4c ab 7f 	      JMP	.skipL01319
  21252  4f33				   _GameOverMusicData_begin
  21253  4f33		       08 04 0e 	      .byte.b	8,4,14
  21254  4f36
  21255  4f36		       04 04 17 	      .byte.b	4,4,23
  21256  4f39
  21257  4f39		       0a		      .byte.b	10
  21258  4f3a
  21259  4f3a		       04 04 0e 	      .byte.b	4,4,14
  21260  4f3d
  21261  4f3d		       02 04 17 	      .byte.b	2,4,23
  21262  4f40
  21263  4f40		       0a		      .byte.b	10
  21264  4f41
  21265  4f41		       00 00 00 	      .byte.b	0,0,0
  21266  4f44
  21267  4f44		       00 00 00 	      .byte.b	0,0,0
  21268  4f47
  21269  4f47		       0a		      .byte.b	10
  21270  4f48
  21271  4f48		       08 04 13 	      .byte.b	8,4,19
  21272  4f4b
  21273  4f4b		       04 04 1d 	      .byte.b	4,4,29
  21274  4f4e
  21275  4f4e		       0a		      .byte.b	10
  21276  4f4f
  21277  4f4f		       04 04 13 	      .byte.b	4,4,19
  21278  4f52
  21279  4f52		       02 04 1d 	      .byte.b	2,4,29
  21280  4f55
  21281  4f55		       0a		      .byte.b	10
  21282  4f56
  21283  4f56		       00 00 00 	      .byte.b	0,0,0
  21284  4f59
  21285  4f59		       00 00 00 	      .byte.b	0,0,0
  21286  4f5c
  21287  4f5c		       0a		      .byte.b	10
  21288  4f5d
  21289  4f5d		       08 04 17 	      .byte.b	8,4,23
  21290  4f60
  21291  4f60		       04 0c 1a 	      .byte.b	4,12,26
  21292  4f63
  21293  4f63		       14		      .byte.b	20
  21294  4f64
  21295  4f64		       08 04 11 	      .byte.b	8,4,17
  21296  4f67
  21297  4f67		       04 04 15 	      .byte.b	4,4,21
  21298  4f6a
  21299  4f6a		       0d		      .byte.b	13
  21300  4f6b
  21301  4f6b		       08 04 0f 	      .byte.b	8,4,15
  21302  4f6e
  21303  4f6e		       04 04 15 	      .byte.b	4,4,21
  21304  4f71
  21305  4f71		       0d		      .byte.b	13
  21306  4f72
  21307  4f72		       08 04 11 	      .byte.b	8,4,17
  21308  4f75
  21309  4f75		       04 04 15 	      .byte.b	4,4,21
  21310  4f78
  21311  4f78		       0e		      .byte.b	14
  21312  4f79
  21313  4f79		       08 04 12 	      .byte.b	8,4,18
  21314  4f7c
  21315  4f7c		       04 04 15 	      .byte.b	4,4,21
  21316  4f7f
  21317  4f7f		       14		      .byte.b	20
  21318  4f80
  21319  4f80		       08 04 10 	      .byte.b	8,4,16
  21320  4f83
  21321  4f83		       04 04 15 	      .byte.b	4,4,21
  21322  4f86
  21323  4f86		       14		      .byte.b	20
  21324  4f87
  21325  4f87		       08 04 12 	      .byte.b	8,4,18
  21326  4f8a
  21327  4f8a		       04 04 15 	      .byte.b	4,4,21
  21328  4f8d
  21329  4f8d		       14		      .byte.b	20
  21330  4f8e
  21331  4f8e		       08 04 13 	      .byte.b	8,4,19
  21332  4f91
  21333  4f91		       04 04 17 	      .byte.b	4,4,23
  21334  4f94
  21335  4f94		       0a		      .byte.b	10
  21336  4f95
  21337  4f95		       08 04 13 	      .byte.b	8,4,19
  21338  4f98
  21339  4f98		       04 04 1a 	      .byte.b	4,4,26
  21340  4f9b
  21341  4f9b		       0a		      .byte.b	10
  21342  4f9c
  21343  4f9c		       08 04 13 	      .byte.b	8,4,19
  21344  4f9f
  21345  4f9f		       04 04 17 	      .byte.b	4,4,23
  21346  4fa2
  21347  4fa2		       28		      .byte.b	40
  21348  4fa3
  21349  4fa3		       00 00 00 	      .byte.b	0,0,0
  21350  4fa6
  21351  4fa6		       00 00 00 	      .byte.b	0,0,0
  21352  4fa9
  21353  4fa9		       03		      .byte.b	3
  21354  4faa
  21355  4faa		       ff		      .byte.b	255
  21356  4fab
  21357  4fab				   .skipL01319
  21358  4fab				   .L01320		;  return thisbank
  21359  4fab
  21360  4fab		       60		      RTS
  21361  4fac				   .
  21362  4fac							; 
  21363  4fac
  21364  4fac				   .
  21365  4fac							; 
  21366  4fac
  21367  4fac				   .
  21368  4fac							; 
  21369  4fac
  21370  4fac				   .
  21371  4fac							; 
  21372  4fac
  21373  4fac				   .
  21374  4fac							; 
  21375  4fac
  21376  4fac				   .
  21377  4fac							; 
  21378  4fac
  21379  4fac				   .
  21380  4fac							; 
  21381  4fac
  21382  4fac				   .
  21383  4fac							; 
  21384  4fac
  21385  4fac				   .
  21386  4fac							; 
  21387  4fac
  21388  4fac				   .
  21389  4fac							; 
  21390  4fac
  21391  4fac				   .
  21392  4fac							; 
  21393  4fac
  21394  4fac				   .L01321		;  bank 5
  21395  4fac
  21396  4fac					      if	ECHO4
      40 bytes of ROM space left in bank 4
  21397  4fac					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
  21398  4fac					      endif
  21399  4fac		       00 01	   ECHO4      =	1
  21400  4fd4					      ORG	$4FF4-bscode_length
  21401  4fd4					      RORG	$7FF4-bscode_length
  21402  4fd4		       a2 ff	   start_bank4 ldx	#$ff
  21403  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
  21404  4fd6				  -	      stx	FASTFETCH
  21405  4fd6					      endif
  21406  4fd6		       9a		      txs
  21407  4fd7				  -	      if	bankswitch == 64
  21408  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  21409  4fd7					      else
  21410  4fd7		       a9 f2		      lda	#>(start-1)
  21411  4fd9					      endif
  21412  4fd9		       48		      pha
  21413  4fda		       a9 51		      lda	#<(start-1)
  21414  4fdc		       48		      pha
  21415  4fdd		       48		      pha
  21416  4fde		       8a		      txa
  21417  4fdf		       48		      pha
  21418  4fe0		       ba		      tsx
  21419  4fe1					      if	bankswitch != 64
  21420  4fe1		       b5 04		      lda	4,x	; get high byte of return address
  21421  4fe3		       2a		      rol
  21422  4fe4		       2a		      rol
  21423  4fe5		       2a		      rol
  21424  4fe6		       2a		      rol
  21425  4fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  21426  4fe9		       aa		      tax
  21427  4fea		       e8		      inx
  21428  4feb				  -	      else
  21429  4feb				  -	      lda	4,x	; get high byte of return address
  21430  4feb				  -	      tay
  21431  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  21432  4feb				  -	      sta	4,x
  21433  4feb				  -	      tya
  21434  4feb				  -	      lsr
  21435  4feb				  -	      lsr
  21436  4feb				  -	      lsr
  21437  4feb				  -	      lsr
  21438  4feb				  -	      tax
  21439  4feb				  -	      inx
  21440  4feb					      endif
  21441  4feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  21442  4fee		       68		      pla
  21443  4fef		       aa		      tax
  21444  4ff0		       68		      pla
  21445  4ff1		       60		      rts
  21446  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  21447  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  21448  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  21449  4ff2					      endif
  21450  4ffc					      ORG	$4FFC
  21451  4ffc					      RORG	$7FFC
  21452  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
  21453  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
  21454  5000					      ORG	$5000
  21455  5000					      RORG	$9000
  21456  5000				   .
  21457  5000							; 
  21458  5000
  21459  5000				   .
  21460  5000							; 
  21461  5000
  21462  5000				   .
  21463  5000							; 
  21464  5000
  21465  5000				   .
  21466  5000							; 
  21467  5000
  21468  5000				   .
  21469  5000							; 
  21470  5000
  21471  5000				   .
  21472  5000							; 
  21473  5000
  21474  5000				   .
  21475  5000							; 
  21476  5000
  21477  5000				   .
  21478  5000							; 
  21479  5000
  21480  5000				   .
  21481  5000							; 
  21482  5000
  21483  5000				   .__Level_Data_Bank1
  21484  5000							; __Level_Data_Bank1
  21485  5000
  21486  5000				   .L01322		;  on z goto __W11A __W11B __W12A __W12B __W13A __W13B __W14 __W14 __W21A __W21B __W22A __W22B __W23A __W23B __W24 __W24
  21487  5000
  21488  5000		       a6 ed		      LDX	z
  21489  5002		       bd 0b 90 	      LDA	.L01322jumptablehi,x
  21490  5005		       48		      PHA
  21491  5006		       bd 1b 90 	      LDA	.L01322jumptablelo,x
  21492  5009		       48		      PHA
  21493  500a		       60		      RTS
  21494  500b				   .L01322jumptablehi
  21495  500b		       90		      .byte.b	>(.__W11A-1)
  21496  500c		       90		      .byte.b	>(.__W11B-1)
  21497  500d		       90		      .byte.b	>(.__W12A-1)
  21498  500e		       90		      .byte.b	>(.__W12B-1)
  21499  500f		       90		      .byte.b	>(.__W13A-1)
  21500  5010		       90		      .byte.b	>(.__W13B-1)
  21501  5011		       90		      .byte.b	>(.__W14-1)
  21502  5012		       90		      .byte.b	>(.__W14-1)
  21503  5013		       90		      .byte.b	>(.__W21A-1)
  21504  5014		       90		      .byte.b	>(.__W21B-1)
  21505  5015		       90		      .byte.b	>(.__W22A-1)
  21506  5016		       90		      .byte.b	>(.__W22B-1)
  21507  5017		       90		      .byte.b	>(.__W23A-1)
  21508  5018		       91		      .byte.b	>(.__W23B-1)
  21509  5019		       91		      .byte.b	>(.__W24-1)
  21510  501a		       91		      .byte.b	>(.__W24-1)
  21511  501b				   .L01322jumptablelo
  21512  501b		       2a		      .byte.b	<(.__W11A-1)
  21513  501c		       3d		      .byte.b	<(.__W11B-1)
  21514  501d		       50		      .byte.b	<(.__W12A-1)
  21515  501e		       63		      .byte.b	<(.__W12B-1)
  21516  501f		       76		      .byte.b	<(.__W13A-1)
  21517  5020		       89		      .byte.b	<(.__W13B-1)
  21518  5021		       9c		      .byte.b	<(.__W14-1)
  21519  5022		       9c		      .byte.b	<(.__W14-1)
  21520  5023		       af		      .byte.b	<(.__W21A-1)
  21521  5024		       c2		      .byte.b	<(.__W21B-1)
  21522  5025		       d5		      .byte.b	<(.__W22A-1)
  21523  5026		       e8		      .byte.b	<(.__W22B-1)
  21524  5027		       fb		      .byte.b	<(.__W23A-1)
  21525  5028		       0e		      .byte.b	<(.__W23B-1)
  21526  5029		       21		      .byte.b	<(.__W24-1)
  21527  502a		       21		      .byte.b	<(.__W24-1)
  21528  502b				   .
  21529  502b							; 
  21530  502b
  21531  502b				   .__W11A
  21532  502b							; __W11A
  21533  502b
  21534  502b				   .L01323		;  y  =  _Data_Level1A[x] : x	=  x  +  1  :  u  =  _Data_Level1A[x] : return otherbank
  21535  502b
  21536  502b		       a6 eb		      LDX	x
  21537  502d		       bd 35 91 	      LDA	_Data_Level1A,x
  21538  5030		       85 ec		      STA	y
  21539  5032		       e6 eb		      INC	x
  21540  5034		       a6 eb		      LDX	x
  21541  5036		       bd 35 91 	      LDA	_Data_Level1A,x
  21542  5039		       85 e8		      STA	u
  21543  503b		       4c dd ff 	      JMP	BS_return
  21544  503e				   .
  21545  503e							; 
  21546  503e
  21547  503e				   .__W11B
  21548  503e							; __W11B
  21549  503e
  21550  503e				   .L01324		;  y  =  _Data_Level1B[x] : x	=  x  +  1  :  u  =  _Data_Level1B[x] : return otherbank
  21551  503e
  21552  503e		       a6 eb		      LDX	x
  21553  5040		       bd 35 92 	      LDA	_Data_Level1B,x
  21554  5043		       85 ec		      STA	y
  21555  5045		       e6 eb		      INC	x
  21556  5047		       a6 eb		      LDX	x
  21557  5049		       bd 35 92 	      LDA	_Data_Level1B,x
  21558  504c		       85 e8		      STA	u
  21559  504e		       4c dd ff 	      JMP	BS_return
  21560  5051				   .
  21561  5051							; 
  21562  5051
  21563  5051				   .__W12A
  21564  5051							; __W12A
  21565  5051
  21566  5051				   .L01325		;  y  =  _Data_Level2A[x} : x	=  x  +  1  :  u  =  _Data_Level2A[x] : return otherbank
  21567  5051
  21568  5051		       a6 eb		      LDX	x
  21569  5053		       bd 35 93 	      LDA	_Data_Level2A,x
  21570  5056		       85 ec		      STA	y
  21571  5058		       e6 eb		      INC	x
  21572  505a		       a6 eb		      LDX	x
  21573  505c		       bd 35 93 	      LDA	_Data_Level2A,x
  21574  505f		       85 e8		      STA	u
  21575  5061		       4c dd ff 	      JMP	BS_return
  21576  5064				   .
  21577  5064							; 
  21578  5064
  21579  5064				   .__W12B
  21580  5064							; __W12B
  21581  5064
  21582  5064				   .L01326		;  y  =  _Data_Level2B[x] : x	=  x  +  1  :  u  =  _Data_Level2B[x] : return otherbank
  21583  5064
  21584  5064		       a6 eb		      LDX	x
  21585  5066		       bd 35 94 	      LDA	_Data_Level2B,x
  21586  5069		       85 ec		      STA	y
  21587  506b		       e6 eb		      INC	x
  21588  506d		       a6 eb		      LDX	x
  21589  506f		       bd 35 94 	      LDA	_Data_Level2B,x
  21590  5072		       85 e8		      STA	u
  21591  5074		       4c dd ff 	      JMP	BS_return
  21592  5077				   .
  21593  5077							; 
  21594  5077
  21595  5077				   .__W13A
  21596  5077							; __W13A
  21597  5077
  21598  5077				   .L01327		;  y  =  _Data_Level3A[x] : x	=  x  +  1  :  u  =  _Data_Level3A[x] : return otherbank
  21599  5077
  21600  5077		       a6 eb		      LDX	x
  21601  5079		       bd 35 95 	      LDA	_Data_Level3A,x
  21602  507c		       85 ec		      STA	y
  21603  507e		       e6 eb		      INC	x
  21604  5080		       a6 eb		      LDX	x
  21605  5082		       bd 35 95 	      LDA	_Data_Level3A,x
  21606  5085		       85 e8		      STA	u
  21607  5087		       4c dd ff 	      JMP	BS_return
  21608  508a				   .
  21609  508a							; 
  21610  508a
  21611  508a				   .__W13B
  21612  508a							; __W13B
  21613  508a
  21614  508a				   .L01328		;  y  =  _Data_Level3B[x} : x	=  x  +  1  :  u  =  _Data_Level3B[x] : return otherbank
  21615  508a
  21616  508a		       a6 eb		      LDX	x
  21617  508c		       bd 35 96 	      LDA	_Data_Level3B,x
  21618  508f		       85 ec		      STA	y
  21619  5091		       e6 eb		      INC	x
  21620  5093		       a6 eb		      LDX	x
  21621  5095		       bd 35 96 	      LDA	_Data_Level3B,x
  21622  5098		       85 e8		      STA	u
  21623  509a		       4c dd ff 	      JMP	BS_return
  21624  509d				   .
  21625  509d							; 
  21626  509d
  21627  509d				   .__W14
  21628  509d							; __W14
  21629  509d
  21630  509d				   .L01329		;  y  =  _Data_Level4[x] : x  =  x  +	1  :  u  =  _Data_Level4[x] : return otherbank
  21631  509d
  21632  509d		       a6 eb		      LDX	x
  21633  509f		       bd 35 97 	      LDA	_Data_Level4,x
  21634  50a2		       85 ec		      STA	y
  21635  50a4		       e6 eb		      INC	x
  21636  50a6		       a6 eb		      LDX	x
  21637  50a8		       bd 35 97 	      LDA	_Data_Level4,x
  21638  50ab		       85 e8		      STA	u
  21639  50ad		       4c dd ff 	      JMP	BS_return
  21640  50b0				   .
  21641  50b0							; 
  21642  50b0
  21643  50b0				   .__W21A
  21644  50b0							; __W21A
  21645  50b0
  21646  50b0				   .L01330		;  y  =  _Data_Level5A[x} : x	=  x  +  1  :  u  =  _Data_Level5A[x] : return otherbank
  21647  50b0
  21648  50b0		       a6 eb		      LDX	x
  21649  50b2		       bd 35 98 	      LDA	_Data_Level5A,x
  21650  50b5		       85 ec		      STA	y
  21651  50b7		       e6 eb		      INC	x
  21652  50b9		       a6 eb		      LDX	x
  21653  50bb		       bd 35 98 	      LDA	_Data_Level5A,x
  21654  50be		       85 e8		      STA	u
  21655  50c0		       4c dd ff 	      JMP	BS_return
  21656  50c3				   .
  21657  50c3							; 
  21658  50c3
  21659  50c3				   .__W21B
  21660  50c3							; __W21B
  21661  50c3
  21662  50c3				   .L01331		;  y  =  _Data_Level5B[x} : x	=  x  +  1  :  u  =  _Data_Level5B[x] : return otherbank
  21663  50c3
  21664  50c3		       a6 eb		      LDX	x
  21665  50c5		       bd 35 99 	      LDA	_Data_Level5B,x
  21666  50c8		       85 ec		      STA	y
  21667  50ca		       e6 eb		      INC	x
  21668  50cc		       a6 eb		      LDX	x
  21669  50ce		       bd 35 99 	      LDA	_Data_Level5B,x
  21670  50d1		       85 e8		      STA	u
  21671  50d3		       4c dd ff 	      JMP	BS_return
  21672  50d6				   .
  21673  50d6							; 
  21674  50d6
  21675  50d6				   .__W22A
  21676  50d6							; __W22A
  21677  50d6
  21678  50d6				   .L01332		;  y  =  _Data_Level6A[x} : x	=  x  +  1  :  u  =  _Data_Level6A[x] : return otherbank
  21679  50d6
  21680  50d6		       a6 eb		      LDX	x
  21681  50d8		       bd 35 9a 	      LDA	_Data_Level6A,x
  21682  50db		       85 ec		      STA	y
  21683  50dd		       e6 eb		      INC	x
  21684  50df		       a6 eb		      LDX	x
  21685  50e1		       bd 35 9a 	      LDA	_Data_Level6A,x
  21686  50e4		       85 e8		      STA	u
  21687  50e6		       4c dd ff 	      JMP	BS_return
  21688  50e9				   .
  21689  50e9							; 
  21690  50e9
  21691  50e9				   .__W22B
  21692  50e9							; __W22B
  21693  50e9
  21694  50e9				   .L01333		;  y  =  _Data_Level6B[x} : x	=  x  +  1  :  u  =  _Data_Level6B[x] : return otherbank
  21695  50e9
  21696  50e9		       a6 eb		      LDX	x
  21697  50eb		       bd 35 9b 	      LDA	_Data_Level6B,x
  21698  50ee		       85 ec		      STA	y
  21699  50f0		       e6 eb		      INC	x
  21700  50f2		       a6 eb		      LDX	x
  21701  50f4		       bd 35 9b 	      LDA	_Data_Level6B,x
  21702  50f7		       85 e8		      STA	u
  21703  50f9		       4c dd ff 	      JMP	BS_return
  21704  50fc				   .
  21705  50fc							; 
  21706  50fc
  21707  50fc				   .__W23A
  21708  50fc							; __W23A
  21709  50fc
  21710  50fc				   .L01334		;  y  =  _Data_Level7A[x} : x	=  x  +  1  :  u  =  _Data_Level7A[x] : return otherbank
  21711  50fc
  21712  50fc		       a6 eb		      LDX	x
  21713  50fe		       bd 35 9c 	      LDA	_Data_Level7A,x
  21714  5101		       85 ec		      STA	y
  21715  5103		       e6 eb		      INC	x
  21716  5105		       a6 eb		      LDX	x
  21717  5107		       bd 35 9c 	      LDA	_Data_Level7A,x
  21718  510a		       85 e8		      STA	u
  21719  510c		       4c dd ff 	      JMP	BS_return
  21720  510f				   .
  21721  510f							; 
  21722  510f
  21723  510f				   .__W23B
  21724  510f							; __W23B
  21725  510f
  21726  510f				   .L01335		;  y  =  _Data_Level7B[x} : x	=  x  +  1  :  u  =  _Data_Level7B[x] : return otherbank
  21727  510f
  21728  510f		       a6 eb		      LDX	x
  21729  5111		       bd 35 9d 	      LDA	_Data_Level7B,x
  21730  5114		       85 ec		      STA	y
  21731  5116		       e6 eb		      INC	x
  21732  5118		       a6 eb		      LDX	x
  21733  511a		       bd 35 9d 	      LDA	_Data_Level7B,x
  21734  511d		       85 e8		      STA	u
  21735  511f		       4c dd ff 	      JMP	BS_return
  21736  5122				   .
  21737  5122							; 
  21738  5122
  21739  5122				   .__W24
  21740  5122							; __W24
  21741  5122
  21742  5122				   .L01336		;  y  =  _Data_Level8[x] : x  =  x  +	1  :  u  =  _Data_Level8[x] : return otherbank
  21743  5122
  21744  5122		       a6 eb		      LDX	x
  21745  5124		       bd 35 9e 	      LDA	_Data_Level8,x
  21746  5127		       85 ec		      STA	y
  21747  5129		       e6 eb		      INC	x
  21748  512b		       a6 eb		      LDX	x
  21749  512d		       bd 35 9e 	      LDA	_Data_Level8,x
  21750  5130		       85 e8		      STA	u
  21751  5132		       4c dd ff 	      JMP	BS_return
  21752  5135				   .
  21753  5135							; 
  21754  5135
  21755  5135				   .
  21756  5135							; 
  21757  5135
  21758  5135				   .
  21759  5135							; 
  21760  5135
  21761  5135				   .
  21762  5135							; 
  21763  5135
  21764  5135				   .
  21765  5135							; 
  21766  5135
  21767  5135				   .
  21768  5135							; 
  21769  5135
  21770  5135				   .
  21771  5135							; 
  21772  5135
  21773  5135				   .
  21774  5135							; 
  21775  5135
  21776  5135				   .
  21777  5135							; 
  21778  5135
  21779  5135				   .
  21780  5135							; 
  21781  5135
  21782  5135				   .
  21783  5135							; 
  21784  5135
  21785  5135				   .
  21786  5135							; 
  21787  5135
  21788  5135				   .
  21789  5135							; 
  21790  5135
  21791  5135				   .
  21792  5135							; 
  21793  5135
  21794  5135				   .
  21795  5135							; 
  21796  5135
  21797  5135				   .
  21798  5135							; 
  21799  5135
  21800  5135				   .
  21801  5135							; 
  21802  5135
  21803  5135				   .
  21804  5135							; 
  21805  5135
  21806  5135				   .
  21807  5135							; 
  21808  5135
  21809  5135				   .
  21810  5135							; 
  21811  5135
  21812  5135				   .
  21813  5135							; 
  21814  5135
  21815  5135				   .
  21816  5135							; 
  21817  5135
  21818  5135				   .
  21819  5135							; 
  21820  5135
  21821  5135				   .
  21822  5135							; 
  21823  5135
  21824  5135				   .
  21825  5135							; 
  21826  5135
  21827  5135				   .
  21828  5135							; 
  21829  5135
  21830  5135				   .
  21831  5135							; 
  21832  5135
  21833  5135				   .
  21834  5135							; 
  21835  5135
  21836  5135				   .
  21837  5135							; 
  21838  5135
  21839  5135				   .
  21840  5135							; 
  21841  5135
  21842  5135				   .
  21843  5135							; 
  21844  5135
  21845  5135				   .L01337		;  data _Data_Level1A
  21846  5135
  21847  5135				   _Data_Level1A
  21848  5135		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4
  21849  5153
  21850  5153		       00 04 40 04*	      .byte.b	0,4,64,4,36,4,36,4,36,4,36,4,36,4,66,4,129,4,129,4,129,4,129
  21851  516a
  21852  516a		       04 81 04 40*	      .byte.b	4,129,4,64,4,0,4,0,12,0,12
  21853  5175
  21854  5175		       00 0c 00 0c*	      .byte.b	0,12,0,12,0,12,0,4,0,7,0,7,0,7,0,4,0,4,0,12,16,4,16,4,16,4,16
  21855  5190
  21856  5190		       04 10 04 10*	      .byte.b	4,16,4,16,4,0,12,0,4,0,7,0,7,0,7,0,4,0,4,0,12,0,12,0,12,0,12
  21857  51ab
  21858  51ab		       00 04 00 04*	      .byte.b	0,4,0,4,0,0,0,0,0,0
  21859  51b5
  21860  51b5		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,32,12,32,12,32,12,32,12,36
  21861  51d0
  21862  51d0		       04 24 04 44*	      .byte.b	4,36,4,68,4,4,4,4,4,0,28,0,28,4,4,36,4,36,4,36,4,36,4,32,4,32
  21863  51ea
  21864  51ea		       04 20 04 00*	      .byte.b	4,32,4,0,188,0,188,0,188,0,4
  21865  51f5
  21866  51f5		       00 04 80 04*	      .byte.b	0,4,128,4,128,4,128,4,128,4,32,4,32,4,32,4,32,4,32,4,32,4,8,24
  21867  520d
  21868  520d		       08 18 08 18*	      .byte.b	8,24,8,24,8,24,8,24,8,24,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,7,0
  21869  522a
  21870  522a		       07 00 07 00*	      .byte.b	7,0,7,0,4,0,4,0,4,0,4
  21871  5235
  21872  5235				   .skipL01337
  21873  5235				   .
  21874  5235							; 
  21875  5235
  21876  5235				   .
  21877  5235							; 
  21878  5235
  21879  5235				   .L01338		;  data _Data_Level1B
  21880  5235
  21881  5235				   _Data_Level1B
  21882  5235		       00 04 00 07*	      .byte.b	0,4,0,7,0,7,0,7,0,4,0,188,0,188,0,188,64,4,0,188,0,188,0,188,0
  21883  524e
  21884  524e		       bc 42 04 00*	      .byte.b	188,66,4,0,188,0,188,0,188,0,188,64,4,0,188,0,188,0,188,0,188
  21885  5263
  21886  5263		       00 bc 00 bc*	      .byte.b	0,188,0,188,32,4,32,4,32,4,32,4,0,12,0,12,0,12
  21887  5275
  21888  5275		       00 0c 00 04*	      .byte.b	0,12,0,4,0,6,0,6,0,7,0,7,128,7,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0
  21889  5292
  21890  5292		       00 00 00 80*	      .byte.b	0,0,0,128,7,128,7,0,7,0,7,0,6,0,6,0,4,0,4,0,28,16,4,16,4,16,4
  21891  52ad
  21892  52ad		       10 04 10 04*	      .byte.b	16,4,16,4,0,188,0,188
  21893  52b5
  21894  52b5		       00 bc 00 bc*	      .byte.b	0,188,0,188,0,188,0,188,0,188,0,188,33,4,33,4,33,4,33,4,33,4,33
  21895  52cc
  21896  52cc		       04 21 04 21*	      .byte.b	4,33,4,33,4,33,4,33,4,0,188,0,188,0,12,0,12,0,12,0,12,0,4,0,7,0
  21897  52e6
  21898  52e6		       07 00 07 00*	      .byte.b	7,0,7,0,4,0,4,0,188,0,188,64,4,32,4
  21899  52f5
  21900  52f5		       20 04 20 04*	      .byte.b	32,4,32,4,32,4,0,4,0,12,0,12,0,12,0,12,0,4,0,4,0,6,0,6,0,7,0,7
  21901  5311
  21902  5311		       80 07 80 07*	      .byte.b	128,7,128,7,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0
  21903  532e
  21904  532e		       ac 00 04 00*	      .byte.b	172,0,4,0,4,0,4
  21905  5335
  21906  5335				   .skipL01338
  21907  5335				   .
  21908  5335							; 
  21909  5335
  21910  5335				   .
  21911  5335							; 
  21912  5335
  21913  5335				   .L01339		;  data _Data_Level2A
  21914  5335
  21915  5335				   _Data_Level2A
  21916  5335		       ff 07 00 04*	      .byte.b	255,7,0,4,0,4,0,4,0,4,0,4,0,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1
  21917  5354
  21918  5354		       04 01 04 41*	      .byte.b	4,1,4,65,4,65,4,65,4,65,4,65,4,65,4,1,188,1,188,1,188,1,188,1
  21919  536c
  21920  536c		       bc 01 bc 01*	      .byte.b	188,1,188,1,188,1,188,1,188
  21921  5375
  21922  5375		       01 0c 01 0c*	      .byte.b	1,12,1,12,1,4,1,4,1,7,1,7,1,4,1,4,129,7,129,7,1,4,1,4,33,4,33,4
  21923  5391
  21924  5391		       01 0c 01 04*	      .byte.b	1,12,1,4,129,7,129,7,1,4,1,4,1,7,1,7,1,4,1,4,1,4,1,28,1,28,1,28
  21925  53ad
  21926  53ad		       01 1c 01 1c*	      .byte.b	1,28,1,28,1,28,1,28
  21927  53b5
  21928  53b5		       31 04 31 04*	      .byte.b	49,4,49,4,33,4,33,4,33,4,33,4,49,4,49,4,1,28,1,28,1,28,1,28,1
  21929  53ce
  21930  53ce		       1c 3f 04 3f*	      .byte.b	28,63,4,63,4,32,4,32,4,129,4,129,4,1,188,1,188,1,188,1,188,1
  21931  53e4
  21932  53e4		       bc 01 bc 81*	      .byte.b	188,1,188,129,12,129,12,129,12,129,12,129,12,129,12,17,12
  21933  53f5
  21934  53f5		       11 0c 11 0c*	      .byte.b	17,12,17,12,17,12,17,12,17,12,1,6,1,6,1,6,1,0,1,0,1,0,1,0,1,7,1
  21935  5410
  21936  5410		       07 01 ff 01*	      .byte.b	7,1,255,1,0,1,0,1,0,1,0,129,7,129,7,129,7,1,0,1,0,1,0,1,0,1,7,1
  21937  542c
  21938  542c		       07 01 07 01*	      .byte.b	7,1,7,1,0,1,0,255,7
  21939  5435
  21940  5435				   .skipL01339
  21941  5435				   .
  21942  5435							; 
  21943  5435
  21944  5435				   .
  21945  5435							; 
  21946  5435
  21947  5435				   .L01340		;  data _Data_Level2B
  21948  5435
  21949  5435				   _Data_Level2B
  21950  5435		       ff 07 01 00*	      .byte.b	255,7,1,0,1,7,1,7,1,7,1,0,1,0,1,0,1,0,129,7,129,7,1,7,1,7,1,6,1
  21951  5452
  21952  5452		       06 01 04 01*	      .byte.b	6,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,0
  21953  5472
  21954  5472		       00 00 00 	      .byte.b	0,0,0
  21955  5475
  21956  5475		       00 e8 00 00*	      .byte.b	0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,4,32,4,32,76,32,76
  21957  5491
  21958  5491		       20 4c 20 4c*	      .byte.b	32,76,32,76,32,76,32,76,32,76,32,76,32,76,32,4,32,4,0,0,0,0,0,0
  21959  54a9
  21960  54a9		       00 00 00 00*	      .byte.b	0,0,0,0,8,0,8,0,8,0,8,0
  21961  54b5
  21962  54b5		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,4,0,76,64,4,64,4,32,4,32,4,32,4,32,4,32,4,32,4,64
  21963  54d0
  21964  54d0		       04 40 04 00*	      .byte.b	4,64,4,0,76,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4
  21965  54ef
  21966  54ef		       00 06 00 06*	      .byte.b	0,6,0,6,0,15
  21967  54f5
  21968  54f5		       00 0f 80 0f*	      .byte.b	0,15,128,15,128,15,0,0,0,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0
  21969  550d
  21970  550d		       e0 07 e0 07*	      .byte.b	224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7
  21971  5521
  21972  5521		       e0 07 e0 07*	      .byte.b	224,7,224,7,224,175,224,7,224,7,224,7,224,7,224,7,224,7,224,7
  21973  5535
  21974  5535				   .skipL01340
  21975  5535				   .
  21976  5535							; 
  21977  5535
  21978  5535				   .
  21979  5535							; 
  21980  5535
  21981  5535				   .L01341		;  data _Data_Level3A
  21982  5535
  21983  5535				   _Data_Level3A
  21984  5535		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,128,0
  21985  5553
  21986  5553		       80 00 80 00*	      .byte.b	128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,0
  21987  5568
  21988  5568		       00 10 08 10*	      .byte.b	0,16,8,16,8,16,8,16,8,16,8,16,8
  21989  5575
  21990  5575		       10 08 10 08*	      .byte.b	16,8,16,8,16,8,16,8,16,8,16,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0
  21991  5592
  21992  5592		       04 00 04 10*	      .byte.b	4,0,4,16,76,16,76,17,76,16,76,16,76,0,0,0,0,0,0,0,2,0,2,0,2,0,2
  21993  55ad
  21994  55ad		       00 02 00 02*	      .byte.b	0,2,0,2,64,24,64,24
  21995  55b5
  21996  55b5		       40 18 40 18*	      .byte.b	64,24,64,24,64,24,64,24,64,24,64,24,64,24,64,0,64,0,64,0,64,0,64
  21997  55cc
  21998  55cc		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,4,0,4,0,92,0,92,0,88,0,88,0,88,0,88,0,88,0,88,0,88,0
  21999  55e8
  22000  55e8		       00 00 00 40*	      .byte.b	0,0,0,64,4,64,76,64,76,64,76,64,76
  22001  55f5
  22002  55f5		       40 4c 40 04*	      .byte.b	64,76,64,4,0,4,0,4,0,0,0,0,0,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0
  22003  5611
  22004  5611		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,188,0,188,0,188
  22005  562f
  22006  562f		       00 bc 00 bc*	      .byte.b	0,188,0,188,0,188
  22007  5635
  22008  5635				   .skipL01341
  22009  5635				   .
  22010  5635							; 
  22011  5635
  22012  5635				   .
  22013  5635							; 
  22014  5635
  22015  5635				   .L01342		;  data _Data_Level3B
  22016  5635
  22017  5635				   _Data_Level3B
  22018  5635		       10 04 10 04*	      .byte.b	16,4,16,4,16,4,16,4,16,4,144,4,128,4,128,4,132,4,132,4,132,4,132
  22019  564c
  22020  564c		       04 04 00 04*	      .byte.b	4,4,0,4,0,4,0,0,0,0,0,0,0,0,0,8,0,8,0,8,0,8,0,8,0,8,0,136,0,136
  22021  566a
  22022  566a		       00 80 04 80*	      .byte.b	0,128,4,128,4,128,4,128,4,0,0
  22023  5675
  22024  5675		       00 00 00 e8*	      .byte.b	0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0
  22025  5693
  22026  5693		       80 00 80 00*	      .byte.b	128,0,128,0,128,24,128,24,128,24,128,24,128,0,0,0,0,0,0,0,72,0
  22027  56a9
  22028  56a9		       48 00 48 00*	      .byte.b	72,0,72,0,72,0,72,0,72,0,0,0
  22029  56b5
  22030  56b5		       00 00 00 78*	      .byte.b	0,0,0,120,0,120,0,120,0,120,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17
  22031  56ce
  22032  56ce		       00 10 00 10*	      .byte.b	0,16,0,16,0,16,0,16,0,0,0,0,0,0,0,0,92,0,92,0,92,0,92,0,92,0,92
  22033  56e9
  22034  56e9		       00 5c 00 5c*	      .byte.b	0,92,0,92,0,92,0,92,0,4,0,4
  22035  56f5
  22036  56f5		       00 04 80 04*	      .byte.b	0,4,128,4,128,4,128,4,128,0,16,0,16,0,16,72,16,72,16,72,16,0,0,0
  22037  570d
  22038  570d		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,4,0,4,0,4
  22039  572d
  22040  572d		       00 04 00 ac*	      .byte.b	0,4,0,172,0,4,0,4
  22041  5735
  22042  5735				   .skipL01342
  22043  5735				   .
  22044  5735							; 
  22045  5735
  22046  5735				   .
  22047  5735							; 
  22048  5735
  22049  5735				   .L01343		;  data _Data_Level4
  22050  5735
  22051  5735				   _Data_Level4
  22052  5735		       01 04 01 04*	      .byte.b	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,6
  22053  5755
  22054  5755		       01 06 03 07*	      .byte.b	1,6,3,7,3,7,135,7,135,7,135,7,135,7,135,7,135,7,135,7,135,7,131
  22055  576c
  22056  576c		       07 83 07 01*	      .byte.b	7,131,7,1,0,1,0,1,0
  22057  5775
  22058  5775		       01 00 01 98*	      .byte.b	1,0,1,152,1,0,1,0,1,0,1,0,129,7,129,7,129,7,129,7,129,7,129,7,3
  22059  578e
  22060  578e		       07 03 07 07*	      .byte.b	7,3,7,7,6,7,6,15,4,15,4,15,4,15,4,15,4,1,4,1,4,1,140,1,4,1,4,1
  22061  57aa
  22062  57aa		       04 3f 04 3f*	      .byte.b	4,63,4,63,4,63,4,31,4,31,4
  22063  57b5
  22064  57b5		       0f 00 0f 00*	      .byte.b	15,0,15,0,7,0,7,0,3,0,3,0,1,0,1,0,1,0,1,4,1,4,1,4,1,4,127,4,127,4
  22065  57d3
  22066  57d3		       1f 04 1f 04*	      .byte.b	31,4,31,4,7,4,7,4,3,7,3,7,195,7,195,7,193,31,193,31,193,31,193,31
  22067  57eb
  22068  57eb		       c1 1f 01 01*	      .byte.b	193,31,1,1,1,1,1,0,1,152
  22069  57f5
  22070  57f5		       01 98 01 98*	      .byte.b	1,152,1,152,1,0,1,0,1,4,1,4,1,4,65,4,65,4,113,4,113,4,1,28,1,28
  22071  580f
  22072  580f		       71 1c 71 1c*	      .byte.b	113,28,113,28,65,28,65,4,1,4,1,4,1,0,1,0,1,152,1,152,1,152,1,0
  22073  5827
  22074  5827		       01 04 01 04*	      .byte.b	1,4,1,4,17,7,17,7,17,7,17,4,255,7
  22075  5835
  22076  5835				   .skipL01343
  22077  5835				   .
  22078  5835							; 
  22079  5835
  22080  5835				   .
  22081  5835							; 
  22082  5835
  22083  5835				   .L01344		;  data _Data_Level5A
  22084  5835
  22085  5835				   _Data_Level5A
  22086  5835		       22 04 22 04*	      .byte.b	34,4,34,4,32,4,32,4,56,4,56,4,0,4,0,4,0,4,0,4,0,4,0,4,128,4,128
  22087  5850
  22088  5850		       04 80 04 80*	      .byte.b	4,128,4,128,4,64,4,64,4,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,7
  22089  586d
  22090  586d		       00 07 00 07*	      .byte.b	0,7,0,7,0,4,0,44
  22091  5875
  22092  5875		       00 2c 00 2c*	      .byte.b	0,44,0,44,32,4,32,4,32,4,64,4,64,4,64,4,32,4,32,4,32,4,0,44,0,44
  22093  588f
  22094  588f		       00 04 00 04*	      .byte.b	0,4,0,4,0,7,0,7,0,7,0,4,0,4,0,12,0,12,0,12,0,12,0,12,0,4,0,4,0,0
  22095  58ad
  22096  58ad		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
  22097  58b5
  22098  58b5		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,4,0,4,0,4,16,79,16,79,16,79,0,0,0,0,0,0,0,0,0,0,0
  22099  58d2
  22100  58d2		       00 00 04 00*	      .byte.b	0,0,4,0,4,0,4,0,4,0,188,0,188,0,188,0,188,128,12,128,12,128,12
  22101  58e9
  22102  58e9		       80 0c 20 0c*	      .byte.b	128,12,32,12,32,12,32,12,32,12,0,188
  22103  58f5
  22104  58f5		       00 bc 08 04*	      .byte.b	0,188,8,4,8,4,8,4,8,4,0,4,0,4,0,4,128,7,128,7,128,7,128,4,136,4
  22105  590f
  22106  590f		       88 4c 88 4c*	      .byte.b	136,76,136,76,136,76,136,76,184,76,184,76,56,76,56,76,56,76,56
  22107  5922
  22108  5922		       04 10 04 10*	      .byte.b	4,16,4,16,4,16,4,16,7,8,7,8,7,60,4,60,4,60,4
  22109  5935
  22110  5935				   .skipL01344
  22111  5935				   .
  22112  5935							; 
  22113  5935
  22114  5935				   .
  22115  5935							; 
  22116  5935
  22117  5935				   .L01345		;  data _Data_Level5B
  22118  5935
  22119  5935				   _Data_Level5B
  22120  5935		       00 00 00 07*	      .byte.b	0,0,0,7,0,7,0,7,0,0,0,0,128,4,128,4,128,4,128,4,0,4,0,4,32,4,32
  22121  5950
  22122  5950		       04 20 04 20*	      .byte.b	4,32,4,32,4,32,4,32,4,32,4,16,7,17,7,17,7,17,4,17,4,81,4,81,4
  22123  5969
  22124  5969		       10 04 00 00*	      .byte.b	16,4,0,0,0,0,0,0,0,0,0,88
  22125  5975
  22126  5975		       00 58 00 58*	      .byte.b	0,88,0,88,0,88,0,0,0,4,0,4,0,4,0,4,0,4,0,4,0,7,0,7,0,255,0,108
  22127  5991
  22128  5991		       00 6c 40 6c*	      .byte.b	0,108,64,108,64,108,0,108,0,108,0,108,0,111,0,111,0,111,0,108
  22129  59a5
  22130  59a5		       00 6c 00 6c*	      .byte.b	0,108,0,108,0,108,0,104,0,104,0,104,128,104,128,104
  22131  59b5
  22132  59b5		       80 68 88 68*	      .byte.b	128,104,136,104,136,104,136,104,8,104,16,108,16,108,16,108,16
  22133  59c6
  22134  59c6		       6c a0 6c a0*	      .byte.b	108,160,108,160,108,160,108,160,108,136,108,136,108,8,108,8
  22135  59d6
  22136  59d6		       6c 00 68 00*	      .byte.b	108,0,104,0,104,0,104,0,104,0,104,0,104,8,104,8,104,4,104,5,108,5
  22137  59ec
  22138  59ec		       6c 05 6f 05*	      .byte.b	108,5,111,5,111,5,111,5,108,0,108,0,44,0,44,0,44,0,44,128,44,128
  22139  5a02
  22140  5a02		       2c 80 2c 80*	      .byte.b	44,128,44,128,44,0,44,0,44,0,44,0,44,0,44,32,44,32,44,48,44,48
  22141  5a18
  22142  5a18		       2e 38 2e 38*	      .byte.b	46,56,46,56,46,0,0,0,0,0,0,0,0,0,0,0,0,32,0,32,168,32,0,32,0,32,0,32,0
  22143  5a35
  22144  5a35				   .skipL01345
  22145  5a35				   .
  22146  5a35							; 
  22147  5a35
  22148  5a35				   .
  22149  5a35							; 
  22150  5a35
  22151  5a35				   .L01346		;  data _Data_Level6A
  22152  5a35
  22153  5a35				   _Data_Level6A
  22154  5a35		       ff 07 00 04*	      .byte.b	255,7,0,4,0,4,0,4,0,4,0,4,0,4,1,4,1,0,1,4,1,0,1,0,1,4,1,4,1,0,1,0
  22155  5a55
  22156  5a55		       01 00 01 00*	      .byte.b	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,4,1,4,0,7,0,7,0,7,0,4
  22157  5a75
  22158  5a75		       00 04 00 00*	      .byte.b	0,4,0,0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,8,0,8,0
  22159  5a95
  22160  5a95		       08 00 08 00*	      .byte.b	8,0,8,0,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,7,0,7,0,255,0,4,0,4,64,4,0,4
  22161  5ab5
  22162  5ab5		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,128,7,128,7,128,7,0,0,0,0,0,0,0,0,33,0,33,72
  22163  5ad1
  22164  5ad1		       21 48 21 48*	      .byte.b	33,72,33,72,33,72,33,0,1,0,1,0,1,0,1,4,1,4,1,4,1,4,1,4,1,4,1,6,1
  22165  5aee
  22166  5aee		       06 01 06 01*	      .byte.b	6,1,6,1,6,1,0
  22167  5af5
  22168  5af5		       01 00 01 00*	      .byte.b	1,0,1,0,1,0,1,0,1,0,1,6,3,6,3,6,7,6,7,4,7,4,1,4,1,4,1,204,7,4,7,4
  22169  5b15
  22170  5b15		       07 04 07 04*	      .byte.b	7,4,7,4,7,4,1,4,1,4,1,4,7,6,7,6,7,6,3,6,3,4,1,4,1,7,1,7,1,7,255,7
  22171  5b35
  22172  5b35				   .skipL01346
  22173  5b35				   .
  22174  5b35							; 
  22175  5b35
  22176  5b35				   .
  22177  5b35							; 
  22178  5b35
  22179  5b35				   .L01347		;  data _Data_Level6B
  22180  5b35
  22181  5b35				   _Data_Level6B
  22182  5b35		       ff 07 01 04*	      .byte.b	255,7,1,4,1,7,1,7,1,7,1,0,1,0,1,0,1,0,1,0,1,0,1,4,1,4,1,4,1,4,1
  22183  5b54
  22184  5b54		       00 01 00 01*	      .byte.b	0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,7,1,7
  22185  5b75
  22186  5b75		       01 ff 01 00*	      .byte.b	1,255,1,0,1,0,1,0,1,0,1,0,3,0,3,6,3,6,7,4,7,4,71,4,79,4,31,4,31
  22187  5b92
  22188  5b92		       04 47 04 43*	      .byte.b	4,71,4,67,4,1,44,1,44,1,44,3,4,3,4,7,4,7,4,79,4,15,4,7,4,1,6,1
  22189  5bae
  22190  5bae		       06 01 07 01*	      .byte.b	6,1,7,1,7,129,7
  22191  5bb5
  22192  5bb5		       81 07 a1 1f*	      .byte.b	129,7,161,31,161,31,49,24,49,24,16,24,16,0,0,0,0,0,0,0,0,0,0,0,0
  22193  5bce
  22194  5bce		       00 00 00 e1*	      .byte.b	0,0,0,225,7,225,79,227,7,227,7,227,7,227,7,129,7,129,7,129,7,129
  22195  5be4
  22196  5be4		       07 01 04 01*	      .byte.b	7,1,4,1,4,1,188,1,188,1,188,65,188,65,188,1,12
  22197  5bf5
  22198  5bf5		       01 0c 01 04*	      .byte.b	1,12,1,4,1,7,1,7,1,7,1,4,1,4,1,4,1,4,1,4,1,4,33,44,33,44,33,44,33
  22199  5c12
  22200  5c12		       2c 30 2c 30*	      .byte.b	44,48,44,48,44,56,44,56,44,56,44,56,44,0,0,0,0,0,0,0,0,0,0,0,0,48
  22201  5c2c
  22202  5c2c		       00 30 a8 30*	      .byte.b	0,48,168,48,0,48,0,48,0
  22203  5c35
  22204  5c35				   .skipL01347
  22205  5c35				   .
  22206  5c35							; 
  22207  5c35
  22208  5c35				   .
  22209  5c35							; 
  22210  5c35
  22211  5c35				   .L01348		;  data _Data_Level7A
  22212  5c35
  22213  5c35				   _Data_Level7A
  22214  5c35		       44 04 44 04*	      .byte.b	68,4,68,4,68,4,68,4,0,4,0,4,0,4,0,4,0,4,16,0,16,0,16,0,16,0,16,0
  22215  5c51
  22216  5c51		       10 04 10 04*	      .byte.b	16,4,16,4,16,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,8,0,8,0,8,0,8,0,8,0,8
  22217  5c70
  22218  5c70		       00 40 00 40*	      .byte.b	0,64,0,64,0
  22219  5c75
  22220  5c75		       40 00 40 00*	      .byte.b	64,0,64,0,32,0,32,0,32,0,32,0,16,8,16,8,16,8,16,8,8,8,9,8,9,8,8
  22221  5c90
  22222  5c90		       08 00 00 00*	      .byte.b	8,0,0,0,0,0,0,0,88,0,88,0,88,0,92,0,92,0,92,0,4,8,4,8,76,8,72,8
  22223  5cac
  22224  5cac		       48 08 48 08*	      .byte.b	72,8,72,8,74,0,2,0,2
  22225  5cb5
  22226  5cb5		       00 5a 00 5a*	      .byte.b	0,90,0,90,0,90,0,88,0,88,0,0,64,4,64,4,64,4,64,4,64,4,0,188,0,188
  22227  5ccf
  22228  5ccf		       08 04 08 04*	      .byte.b	8,4,8,4,0,4,0,4,0,0,0,0,0,0,0,0,0,120,0,120,0,120,0,120,0,0,0,0
  22229  5ceb
  22230  5ceb		       40 00 40 48*	      .byte.b	64,0,64,72,64,72,64,72,64,72
  22231  5cf5
  22232  5cf5		       44 48 44 00*	      .byte.b	68,72,68,0,4,0,4,0,0,0,8,0,8,0,8,0,16,0,16,0,16,0,0,0,0,0,0,0,0
  22233  5d12
  22234  5d12		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,144,0,144,72,144,72,16,72,16,76,16,76,0,4,0,4
  22235  5d2b
  22236  5d2b		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,4
  22237  5d35
  22238  5d35				   .skipL01348
  22239  5d35				   .
  22240  5d35							; 
  22241  5d35
  22242  5d35				   .
  22243  5d35							; 
  22244  5d35
  22245  5d35				   .L01349		;  data _Data_Level7B
  22246  5d35
  22247  5d35				   _Data_Level7B
  22248  5d35		       00 04 00 04*	      .byte.b	0,4,0,4,64,4,64,4,64,4,64,4,0,0,0,0,0,0,16,0,16,0,16,0,16,4,16,4
  22249  5d51
  22250  5d51		       10 04 10 04*	      .byte.b	16,4,16,4,16,4,16,4,16,4,16,0,16,0,0,0,0,0,0,0,0,0,0,4,0,4,16,4
  22251  5d6d
  22252  5d6d		       10 04 10 00*	      .byte.b	16,4,16,0,16,8,16,8
  22253  5d75
  22254  5d75		       10 08 11 08*	      .byte.b	16,8,17,8,16,8,17,12,16,12,17,12,16,8,16,8,0,0,0,0,0,88,0,88,0,92
  22255  5d8f
  22256  5d8f		       00 5c 00 5c*	      .byte.b	0,92,0,92,128,4,128,4,0,4,0,0,16,0,16,0,16,0,0,0,0,0,8,0,8,72,8
  22257  5daa
  22258  5daa		       48 08 48 08*	      .byte.b	72,8,72,8,72,8,0,0,0,0,104
  22259  5db5
  22260  5db5		       00 68 40 68*	      .byte.b	0,104,64,104,64,104,64,104,64,104,64,104,64,104,64,104,64,104,0
  22261  5dc8
  22262  5dc8		       6a 00 6a 00*	      .byte.b	106,0,106,0,106,0,106,8,104,8,104,8,104,8,104,64,104,64,104,64
  22263  5ddc
  22264  5ddc		       68 40 68 00*	      .byte.b	104,64,104,0,104,0,104,4,104,4,104,4,104,0,104,0,104,0
  22265  5dee
  22266  5dee		       68 00 68 00*	      .byte.b	104,0,104,0,106,0,106,4,106,4,106,4,106,4,106,0,104,0,104,0,104
  22267  5e03
  22268  5e03		       00 68 00 68*	      .byte.b	0,104,0,104,0,104,0,104,0,106,0,106,0,106,0,106,0,106,0,106,0,1
  22269  5e19
  22270  5e19		       00 01 80 00*	      .byte.b	0,1,128,0,128,0,128,0,0,0,0,0,0,0,0,1,0,1,0,1,0,169,0,1,0,1,0,1
  22271  5e35
  22272  5e35				   .skipL01349
  22273  5e35				   .
  22274  5e35							; 
  22275  5e35
  22276  5e35				   .
  22277  5e35							; 
  22278  5e35
  22279  5e35				   .L01350		;  data _Data_Level8
  22280  5e35
  22281  5e35				   _Data_Level8
  22282  5e35		       01 04 01 04*	      .byte.b	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,6,1,6,1,7,1,7,129,7,129
  22283  5e54
  22284  5e54		       07 c1 07 c1*	      .byte.b	7,193,7,193,7,225,7,225,7,225,7,225,7,225,7,225,7,225,7,225,7,225
  22285  5e6a
  22286  5e6a		       07 e1 07 e3*	      .byte.b	7,225,7,227,7,227,7,227,7,227,7
  22287  5e75
  22288  5e75		       01 04 01 04*	      .byte.b	1,4,1,4,1,140,1,4,1,4,1,4,7,4,7,4,7,4,63,4,63,4,63,4,33,4,33,4,1
  22289  5e92
  22290  5e92		       04 01 04 01*	      .byte.b	4,1,4,1,4,1,6,1,6,17,7,17,7,17,7,17,0,17,0,49,0,33,0,33,0,33,24
  22291  5ead
  22292  5ead		       21 18 21 18*	      .byte.b	33,24,33,24,33,24,33,24
  22293  5eb5
  22294  5eb5		       21 18 21 18*	      .byte.b	33,24,33,24,33,24,33,24,49,24,17,24,17,24,17,24,17,24,17,0,1,7,1
  22295  5ecc
  22296  5ecc		       07 01 07 01*	      .byte.b	7,1,7,1,0,31,0,15,0,15,0,7,4,7,4,3,4,3,4,3,0,3,0,1,152,1,152,1
  22297  5ee8
  22298  5ee8		       98 01 00 01*	      .byte.b	152,1,0,1,4,33,4,33,4,1,6,1,6
  22299  5ef5
  22300  5ef5		       01 04 01 04*	      .byte.b	1,4,1,4,1,4,1,4,65,4,65,4,65,28,65,28,65,28,1,28,1,28,1,28,1,28,1
  22301  5f10
  22302  5f10		       1c 01 1c f1*	      .byte.b	28,1,28,241,31,241,31,241,31,241,7,1,0,1,0,1,152,1,152,1,152,1,0
  22303  5f27
  22304  5f27		       01 04 01 04*	      .byte.b	1,4,1,4,1,7,1,7,1,7,1,4,255,7
  22305  5f35
  22306  5f35				   .skipL01350
  22307  5f35				   .
  22308  5f35							; 
  22309  5f35
  22310  5f35				   .
  22311  5f35							; 
  22312  5f35
  22313  5f35				   .__Boss_PF_Setup
  22314  5f35							; __Boss_PF_Setup
  22315  5f35
  22316  5f35				   .L01351		;  playfield:
  22317  5f35
  22318  5f35				  -	      ifconst	pfres
  22319  5f35				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  22320  5f35					      else
  22321  5f35		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  22322  5f37					      endif
  22323  5f37		       4c 66 9f 	      jmp	pflabel1
  22324  5f3a				   PF_data1
  22325  5f3a		       c3 ff		      .byte.b	%11000011, %11111111
  22326  5f3c					      if	(pfwidth>2)
  22327  5f3c		       ff c0		      .byte.b	%11111111, %11000000
  22328  5f3e					      endif
  22329  5f3e		       c0 00		      .byte.b	%11000000, %00000000
  22330  5f40					      if	(pfwidth>2)
  22331  5f40		       00 c0		      .byte.b	%00000000, %11000000
  22332  5f42					      endif
  22333  5f42		       c0 00		      .byte.b	%11000000, %00000000
  22334  5f44					      if	(pfwidth>2)
  22335  5f44		       00 c0		      .byte.b	%00000000, %11000000
  22336  5f46					      endif
  22337  5f46		       c0 00		      .byte.b	%11000000, %00000000
  22338  5f48					      if	(pfwidth>2)
  22339  5f48		       00 c0		      .byte.b	%00000000, %11000000
  22340  5f4a					      endif
  22341  5f4a		       c0 00		      .byte.b	%11000000, %00000000
  22342  5f4c					      if	(pfwidth>2)
  22343  5f4c		       00 c0		      .byte.b	%00000000, %11000000
  22344  5f4e					      endif
  22345  5f4e		       c0 00		      .byte.b	%11000000, %00000000
  22346  5f50					      if	(pfwidth>2)
  22347  5f50		       00 c0		      .byte.b	%00000000, %11000000
  22348  5f52					      endif
  22349  5f52		       c0 00		      .byte.b	%11000000, %00000000
  22350  5f54					      if	(pfwidth>2)
  22351  5f54		       00 c0		      .byte.b	%00000000, %11000000
  22352  5f56					      endif
  22353  5f56		       c0 00		      .byte.b	%11000000, %00000000
  22354  5f58					      if	(pfwidth>2)
  22355  5f58		       00 c0		      .byte.b	%00000000, %11000000
  22356  5f5a					      endif
  22357  5f5a		       c0 00		      .byte.b	%11000000, %00000000
  22358  5f5c					      if	(pfwidth>2)
  22359  5f5c		       00 c0		      .byte.b	%00000000, %11000000
  22360  5f5e					      endif
  22361  5f5e		       c0 00		      .byte.b	%11000000, %00000000
  22362  5f60					      if	(pfwidth>2)
  22363  5f60		       00 c0		      .byte.b	%00000000, %11000000
  22364  5f62					      endif
  22365  5f62		       ff ff		      .byte.b	%11111111, %11111111
  22366  5f64					      if	(pfwidth>2)
  22367  5f64		       ff ff		      .byte.b	%11111111, %11111111
  22368  5f66					      endif
  22369  5f66				   pflabel1
  22370  5f66		       bd 3a 9f 	      lda	PF_data1,x
  22371  5f69		       95 a4		      sta	playfield,x
  22372  5f6b		       ca		      dex
  22373  5f6c		       10 f8		      bpl	pflabel1
  22374  5f6e				   .L01352		;  return otherbank
  22375  5f6e
  22376  5f6e		       4c dd ff 	      JMP	BS_return
  22377  5f71				   .
  22378  5f71							; 
  22379  5f71
  22380  5f71				   .__Boss_PF_Setup_2
  22381  5f71							; __Boss_PF_Setup_2
  22382  5f71
  22383  5f71				   .L01353		;  playfield:
  22384  5f71
  22385  5f71				  -	      ifconst	pfres
  22386  5f71				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  22387  5f71					      else
  22388  5f71		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  22389  5f73					      endif
  22390  5f73		       4c a2 9f 	      jmp	pflabel2
  22391  5f76				   PF_data2
  22392  5f76		       c0 ff		      .byte.b	%11000000, %11111111
  22393  5f78					      if	(pfwidth>2)
  22394  5f78		       ff c0		      .byte.b	%11111111, %11000000
  22395  5f7a					      endif
  22396  5f7a		       c0 00		      .byte.b	%11000000, %00000000
  22397  5f7c					      if	(pfwidth>2)
  22398  5f7c		       00 c0		      .byte.b	%00000000, %11000000
  22399  5f7e					      endif
  22400  5f7e		       c0 00		      .byte.b	%11000000, %00000000
  22401  5f80					      if	(pfwidth>2)
  22402  5f80		       00 c0		      .byte.b	%00000000, %11000000
  22403  5f82					      endif
  22404  5f82		       c0 00		      .byte.b	%11000000, %00000000
  22405  5f84					      if	(pfwidth>2)
  22406  5f84		       00 c0		      .byte.b	%00000000, %11000000
  22407  5f86					      endif
  22408  5f86		       c0 00		      .byte.b	%11000000, %00000000
  22409  5f88					      if	(pfwidth>2)
  22410  5f88		       00 c0		      .byte.b	%00000000, %11000000
  22411  5f8a					      endif
  22412  5f8a		       c0 00		      .byte.b	%11000000, %00000000
  22413  5f8c					      if	(pfwidth>2)
  22414  5f8c		       00 c0		      .byte.b	%00000000, %11000000
  22415  5f8e					      endif
  22416  5f8e		       c0 00		      .byte.b	%11000000, %00000000
  22417  5f90					      if	(pfwidth>2)
  22418  5f90		       00 c0		      .byte.b	%00000000, %11000000
  22419  5f92					      endif
  22420  5f92		       c0 00		      .byte.b	%11000000, %00000000
  22421  5f94					      if	(pfwidth>2)
  22422  5f94		       00 c0		      .byte.b	%00000000, %11000000
  22423  5f96					      endif
  22424  5f96		       c0 00		      .byte.b	%11000000, %00000000
  22425  5f98					      if	(pfwidth>2)
  22426  5f98		       00 c0		      .byte.b	%00000000, %11000000
  22427  5f9a					      endif
  22428  5f9a		       c0 00		      .byte.b	%11000000, %00000000
  22429  5f9c					      if	(pfwidth>2)
  22430  5f9c		       00 c0		      .byte.b	%00000000, %11000000
  22431  5f9e					      endif
  22432  5f9e		       cf ff		      .byte.b	%11001111, %11111111
  22433  5fa0					      if	(pfwidth>2)
  22434  5fa0		       ff cf		      .byte.b	%11111111, %11001111
  22435  5fa2					      endif
  22436  5fa2				   pflabel2
  22437  5fa2		       bd 76 9f 	      lda	PF_data2,x
  22438  5fa5		       95 a4		      sta	playfield,x
  22439  5fa7		       ca		      dex
  22440  5fa8		       10 f8		      bpl	pflabel2
  22441  5faa				   .L01354		;  return otherbank
  22442  5faa
  22443  5faa		       4c dd ff 	      JMP	BS_return
  22444  5fad				   .
  22445  5fad							; 
  22446  5fad
  22447  5fad				   .
  22448  5fad							; 
  22449  5fad
  22450  5fad				   .
  22451  5fad							; 
  22452  5fad
  22453  5fad				   .
  22454  5fad							; 
  22455  5fad
  22456  5fad				   .
  22457  5fad							; 
  22458  5fad
  22459  5fad				   .
  22460  5fad							; 
  22461  5fad
  22462  5fad				   .
  22463  5fad							; 
  22464  5fad
  22465  5fad				   .
  22466  5fad							; 
  22467  5fad
  22468  5fad				   .
  22469  5fad							; 
  22470  5fad
  22471  5fad				   .
  22472  5fad							; 
  22473  5fad
  22474  5fad				   .
  22475  5fad							; 
  22476  5fad
  22477  5fad				   .L01355		;  bank 6
  22478  5fad
  22479  5fad					      if	ECHO5
      39 bytes of ROM space left in bank 5
  22480  5fad					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
  22481  5fad					      endif
  22482  5fad		       00 01	   ECHO5      =	1
  22483  5fd4					      ORG	$5FF4-bscode_length
  22484  5fd4					      RORG	$9FF4-bscode_length
  22485  5fd4		       a2 ff	   start_bank5 ldx	#$ff
  22486  5fd6				  -	      ifconst	FASTFETCH	; using DPC+
  22487  5fd6				  -	      stx	FASTFETCH
  22488  5fd6					      endif
  22489  5fd6		       9a		      txs
  22490  5fd7				  -	      if	bankswitch == 64
  22491  5fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  22492  5fd7					      else
  22493  5fd7		       a9 f2		      lda	#>(start-1)
  22494  5fd9					      endif
  22495  5fd9		       48		      pha
  22496  5fda		       a9 51		      lda	#<(start-1)
  22497  5fdc		       48		      pha
  22498  5fdd		       48		      pha
  22499  5fde		       8a		      txa
  22500  5fdf		       48		      pha
  22501  5fe0		       ba		      tsx
  22502  5fe1					      if	bankswitch != 64
  22503  5fe1		       b5 04		      lda	4,x	; get high byte of return address
  22504  5fe3		       2a		      rol
  22505  5fe4		       2a		      rol
  22506  5fe5		       2a		      rol
  22507  5fe6		       2a		      rol
  22508  5fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  22509  5fe9		       aa		      tax
  22510  5fea		       e8		      inx
  22511  5feb				  -	      else
  22512  5feb				  -	      lda	4,x	; get high byte of return address
  22513  5feb				  -	      tay
  22514  5feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  22515  5feb				  -	      sta	4,x
  22516  5feb				  -	      tya
  22517  5feb				  -	      lsr
  22518  5feb				  -	      lsr
  22519  5feb				  -	      lsr
  22520  5feb				  -	      lsr
  22521  5feb				  -	      tax
  22522  5feb				  -	      inx
  22523  5feb					      endif
  22524  5feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  22525  5fee		       68		      pla
  22526  5fef		       aa		      tax
  22527  5ff0		       68		      pla
  22528  5ff1		       60		      rts
  22529  5ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  22530  5ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  22531  5ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  22532  5ff2					      endif
  22533  5ffc					      ORG	$5FFC
  22534  5ffc					      RORG	$9FFC
  22535  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
  22536  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
  22537  6000					      ORG	$6000
  22538  6000					      RORG	$B000
  22539  6000				   .
  22540  6000							; 
  22541  6000
  22542  6000				   .
  22543  6000							; 
  22544  6000
  22545  6000				   .__Level_Data_Bank2
  22546  6000							; __Level_Data_Bank2
  22547  6000
  22548  6000				   .L01356		;  z  =  z  -	16
  22549  6000
  22550  6000		       a5 ed		      LDA	z
  22551  6002		       38		      SEC
  22552  6003		       e9 10		      SBC	#16
  22553  6005		       85 ed		      STA	z
  22554  6007				   .L01357		;  on z goto __W31A __W31B __W32A __W32B __W33A __W33B __W34 __W34 __W41A __W41B __W42A __W42B __W43A __W43B __W44 __W44
  22555  6007
  22556  6007		       a6 ed		      LDX	z
  22557  6009		       bd 12 b0 	      LDA	.L01357jumptablehi,x
  22558  600c		       48		      PHA
  22559  600d		       bd 22 b0 	      LDA	.L01357jumptablelo,x
  22560  6010		       48		      PHA
  22561  6011		       60		      RTS
  22562  6012				   .L01357jumptablehi
  22563  6012		       b0		      .byte.b	>(.__W31A-1)
  22564  6013		       b0		      .byte.b	>(.__W31B-1)
  22565  6014		       b0		      .byte.b	>(.__W32A-1)
  22566  6015		       b0		      .byte.b	>(.__W32B-1)
  22567  6016		       b0		      .byte.b	>(.__W33A-1)
  22568  6017		       b0		      .byte.b	>(.__W33B-1)
  22569  6018		       b0		      .byte.b	>(.__W34-1)
  22570  6019		       b0		      .byte.b	>(.__W34-1)
  22571  601a		       b0		      .byte.b	>(.__W41A-1)
  22572  601b		       b0		      .byte.b	>(.__W41B-1)
  22573  601c		       b0		      .byte.b	>(.__W42A-1)
  22574  601d		       b0		      .byte.b	>(.__W42B-1)
  22575  601e		       b1		      .byte.b	>(.__W43A-1)
  22576  601f		       b1		      .byte.b	>(.__W43B-1)
  22577  6020		       b1		      .byte.b	>(.__W44-1)
  22578  6021		       b1		      .byte.b	>(.__W44-1)
  22579  6022				   .L01357jumptablelo
  22580  6022		       31		      .byte.b	<(.__W31A-1)
  22581  6023		       44		      .byte.b	<(.__W31B-1)
  22582  6024		       57		      .byte.b	<(.__W32A-1)
  22583  6025		       6a		      .byte.b	<(.__W32B-1)
  22584  6026		       7d		      .byte.b	<(.__W33A-1)
  22585  6027		       90		      .byte.b	<(.__W33B-1)
  22586  6028		       a3		      .byte.b	<(.__W34-1)
  22587  6029		       a3		      .byte.b	<(.__W34-1)
  22588  602a		       b6		      .byte.b	<(.__W41A-1)
  22589  602b		       c9		      .byte.b	<(.__W41B-1)
  22590  602c		       dc		      .byte.b	<(.__W42A-1)
  22591  602d		       ef		      .byte.b	<(.__W42B-1)
  22592  602e		       02		      .byte.b	<(.__W43A-1)
  22593  602f		       15		      .byte.b	<(.__W43B-1)
  22594  6030		       28		      .byte.b	<(.__W44-1)
  22595  6031		       28		      .byte.b	<(.__W44-1)
  22596  6032				   .
  22597  6032							; 
  22598  6032
  22599  6032				   .__W31A
  22600  6032							; __W31A
  22601  6032
  22602  6032				   .L01358		;  y  =  _Level9A[x] : x  =  x  +  1  :  u  =	_Level9A[x] : return otherbank
  22603  6032
  22604  6032		       a6 eb		      LDX	x
  22605  6034		       bd 3c b1 	      LDA	_Level9A,x
  22606  6037		       85 ec		      STA	y
  22607  6039		       e6 eb		      INC	x
  22608  603b		       a6 eb		      LDX	x
  22609  603d		       bd 3c b1 	      LDA	_Level9A,x
  22610  6040		       85 e8		      STA	u
  22611  6042		       4c dd ff 	      JMP	BS_return
  22612  6045				   .
  22613  6045							; 
  22614  6045
  22615  6045				   .__W31B
  22616  6045							; __W31B
  22617  6045
  22618  6045				   .L01359		;  y  =  _Level9B[x] : x  =  x  +  1  :  u  =	_Level9B[x] : return otherbank
  22619  6045
  22620  6045		       a6 eb		      LDX	x
  22621  6047		       bd 3c b2 	      LDA	_Level9B,x
  22622  604a		       85 ec		      STA	y
  22623  604c		       e6 eb		      INC	x
  22624  604e		       a6 eb		      LDX	x
  22625  6050		       bd 3c b2 	      LDA	_Level9B,x
  22626  6053		       85 e8		      STA	u
  22627  6055		       4c dd ff 	      JMP	BS_return
  22628  6058				   .
  22629  6058							; 
  22630  6058
  22631  6058				   .__W32A
  22632  6058							; __W32A
  22633  6058
  22634  6058				   .L01360		;  y  =  _Level10A[x] : x  =  x  +  1	:  u  =  _Level10A[x] : return otherbank
  22635  6058
  22636  6058		       a6 eb		      LDX	x
  22637  605a		       bd 3c b3 	      LDA	_Level10A,x
  22638  605d		       85 ec		      STA	y
  22639  605f		       e6 eb		      INC	x
  22640  6061		       a6 eb		      LDX	x
  22641  6063		       bd 3c b3 	      LDA	_Level10A,x
  22642  6066		       85 e8		      STA	u
  22643  6068		       4c dd ff 	      JMP	BS_return
  22644  606b				   .
  22645  606b							; 
  22646  606b
  22647  606b				   .__W32B
  22648  606b							; __W32B
  22649  606b
  22650  606b				   .L01361		;  y  =  _Level10B[x] : x  =  x  +  1	:  u  =  _Level10B[x] : return otherbank
  22651  606b
  22652  606b		       a6 eb		      LDX	x
  22653  606d		       bd 3c b4 	      LDA	_Level10B,x
  22654  6070		       85 ec		      STA	y
  22655  6072		       e6 eb		      INC	x
  22656  6074		       a6 eb		      LDX	x
  22657  6076		       bd 3c b4 	      LDA	_Level10B,x
  22658  6079		       85 e8		      STA	u
  22659  607b		       4c dd ff 	      JMP	BS_return
  22660  607e				   .
  22661  607e							; 
  22662  607e
  22663  607e				   .__W33A
  22664  607e							; __W33A
  22665  607e
  22666  607e				   .L01362		;  y  =  _Level11A[x] : x  =  x  +  1	:  u  =  _Level11A[x] : return otherbank
  22667  607e
  22668  607e		       a6 eb		      LDX	x
  22669  6080		       bd 3c b5 	      LDA	_Level11A,x
  22670  6083		       85 ec		      STA	y
  22671  6085		       e6 eb		      INC	x
  22672  6087		       a6 eb		      LDX	x
  22673  6089		       bd 3c b5 	      LDA	_Level11A,x
  22674  608c		       85 e8		      STA	u
  22675  608e		       4c dd ff 	      JMP	BS_return
  22676  6091				   .
  22677  6091							; 
  22678  6091
  22679  6091				   .__W33B
  22680  6091							; __W33B
  22681  6091
  22682  6091				   .L01363		;  y  =  _Level11B[x] : x  =  x  +  1	:  u  =  _Level11B[x] : return otherbank
  22683  6091
  22684  6091		       a6 eb		      LDX	x
  22685  6093		       bd 3c b6 	      LDA	_Level11B,x
  22686  6096		       85 ec		      STA	y
  22687  6098		       e6 eb		      INC	x
  22688  609a		       a6 eb		      LDX	x
  22689  609c		       bd 3c b6 	      LDA	_Level11B,x
  22690  609f		       85 e8		      STA	u
  22691  60a1		       4c dd ff 	      JMP	BS_return
  22692  60a4				   .
  22693  60a4							; 
  22694  60a4
  22695  60a4				   .__W34
  22696  60a4							; __W34
  22697  60a4
  22698  60a4				   .L01364		;  y  =  _Level12[x] : x  =  x  +  1  :  u  =	_Level12[x] : return otherbank
  22699  60a4
  22700  60a4		       a6 eb		      LDX	x
  22701  60a6		       bd 3c b7 	      LDA	_Level12,x
  22702  60a9		       85 ec		      STA	y
  22703  60ab		       e6 eb		      INC	x
  22704  60ad		       a6 eb		      LDX	x
  22705  60af		       bd 3c b7 	      LDA	_Level12,x
  22706  60b2		       85 e8		      STA	u
  22707  60b4		       4c dd ff 	      JMP	BS_return
  22708  60b7				   .
  22709  60b7							; 
  22710  60b7
  22711  60b7				   .__W41A
  22712  60b7							; __W41A
  22713  60b7
  22714  60b7				   .L01365		;  y  =  _Level13A[x] : x  =  x  +  1	:  u  =  _Level13A[x] : return otherbank
  22715  60b7
  22716  60b7		       a6 eb		      LDX	x
  22717  60b9		       bd 3c b8 	      LDA	_Level13A,x
  22718  60bc		       85 ec		      STA	y
  22719  60be		       e6 eb		      INC	x
  22720  60c0		       a6 eb		      LDX	x
  22721  60c2		       bd 3c b8 	      LDA	_Level13A,x
  22722  60c5		       85 e8		      STA	u
  22723  60c7		       4c dd ff 	      JMP	BS_return
  22724  60ca				   .
  22725  60ca							; 
  22726  60ca
  22727  60ca				   .__W41B
  22728  60ca							; __W41B
  22729  60ca
  22730  60ca				   .L01366		;  y  =  _Level13B[x] : x  =  x  +  1	:  u  =  _Level13B[x] : return otherbank
  22731  60ca
  22732  60ca		       a6 eb		      LDX	x
  22733  60cc		       bd 3c b9 	      LDA	_Level13B,x
  22734  60cf		       85 ec		      STA	y
  22735  60d1		       e6 eb		      INC	x
  22736  60d3		       a6 eb		      LDX	x
  22737  60d5		       bd 3c b9 	      LDA	_Level13B,x
  22738  60d8		       85 e8		      STA	u
  22739  60da		       4c dd ff 	      JMP	BS_return
  22740  60dd				   .
  22741  60dd							; 
  22742  60dd
  22743  60dd				   .__W42A
  22744  60dd							; __W42A
  22745  60dd
  22746  60dd				   .L01367		;  y  =  _Level14A[x] : x  =  x  +  1	:  u  =  _Level14A[x] : return otherbank
  22747  60dd
  22748  60dd		       a6 eb		      LDX	x
  22749  60df		       bd 3c ba 	      LDA	_Level14A,x
  22750  60e2		       85 ec		      STA	y
  22751  60e4		       e6 eb		      INC	x
  22752  60e6		       a6 eb		      LDX	x
  22753  60e8		       bd 3c ba 	      LDA	_Level14A,x
  22754  60eb		       85 e8		      STA	u
  22755  60ed		       4c dd ff 	      JMP	BS_return
  22756  60f0				   .
  22757  60f0							; 
  22758  60f0
  22759  60f0				   .__W42B
  22760  60f0							; __W42B
  22761  60f0
  22762  60f0				   .L01368		;  y  =  _Level14B[x] : x  =  x  +  1	:  u  =  _Level14B[x] : return otherbank
  22763  60f0
  22764  60f0		       a6 eb		      LDX	x
  22765  60f2		       bd 3c bb 	      LDA	_Level14B,x
  22766  60f5		       85 ec		      STA	y
  22767  60f7		       e6 eb		      INC	x
  22768  60f9		       a6 eb		      LDX	x
  22769  60fb		       bd 3c bb 	      LDA	_Level14B,x
  22770  60fe		       85 e8		      STA	u
  22771  6100		       4c dd ff 	      JMP	BS_return
  22772  6103				   .
  22773  6103							; 
  22774  6103
  22775  6103				   .__W43A
  22776  6103							; __W43A
  22777  6103
  22778  6103				   .L01369		;  y  =  _Level15A[x] : x  =  x  +  1	:  u  =  _Level15A[x] : return otherbank
  22779  6103
  22780  6103		       a6 eb		      LDX	x
  22781  6105		       bd 3c bc 	      LDA	_Level15A,x
  22782  6108		       85 ec		      STA	y
  22783  610a		       e6 eb		      INC	x
  22784  610c		       a6 eb		      LDX	x
  22785  610e		       bd 3c bc 	      LDA	_Level15A,x
  22786  6111		       85 e8		      STA	u
  22787  6113		       4c dd ff 	      JMP	BS_return
  22788  6116				   .
  22789  6116							; 
  22790  6116
  22791  6116				   .__W43B
  22792  6116							; __W43B
  22793  6116
  22794  6116				   .L01370		;  y  =  _Level15B[x] : x  =  x  +  1	:  u  =  _Level15B[x] : return otherbank
  22795  6116
  22796  6116		       a6 eb		      LDX	x
  22797  6118		       bd 3c bd 	      LDA	_Level15B,x
  22798  611b		       85 ec		      STA	y
  22799  611d		       e6 eb		      INC	x
  22800  611f		       a6 eb		      LDX	x
  22801  6121		       bd 3c bd 	      LDA	_Level15B,x
  22802  6124		       85 e8		      STA	u
  22803  6126		       4c dd ff 	      JMP	BS_return
  22804  6129				   .
  22805  6129							; 
  22806  6129
  22807  6129				   .__W44
  22808  6129							; __W44
  22809  6129
  22810  6129				   .L01371		;  y  =  _Level16[x] : x  =  x  +  1  :  u  =	_Level16[x] : return otherbank
  22811  6129
  22812  6129		       a6 eb		      LDX	x
  22813  612b		       bd 3c be 	      LDA	_Level16,x
  22814  612e		       85 ec		      STA	y
  22815  6130		       e6 eb		      INC	x
  22816  6132		       a6 eb		      LDX	x
  22817  6134		       bd 3c be 	      LDA	_Level16,x
  22818  6137		       85 e8		      STA	u
  22819  6139		       4c dd ff 	      JMP	BS_return
  22820  613c				   .
  22821  613c							; 
  22822  613c
  22823  613c				   .
  22824  613c							; 
  22825  613c
  22826  613c				   .L01372		;  data _Level9A
  22827  613c
  22828  613c				   _Level9A
  22829  613c		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,7
  22830  615c
  22831  615c		       00 07 00 04*	      .byte.b	0,7,0,4,0,4,0,4,32,4,34,4,34,4,34,4,32,4,0,4,0,4,0,4,0,4,0,4,0
  22832  6179
  22833  6179		       04 00 dc 00*	      .byte.b	4,0,220,0,220,0,220,0,220,32,140,32,140,64,140,64,140
  22834  618a
  22835  618a		       20 8c 20 8c*	      .byte.b	32,140,32,140,0,140,0,140,0,142,0,142,0,143,0,143,128,143,128
  22836  619d
  22837  619d		       8f 80 8f 00*	      .byte.b	143,128,143,0,136,0,136,0,136,0,136,0,136,0,136,0,136,0,136
  22838  61b0
  22839  61b0		       80 8f 80 8f*	      .byte.b	128,143,128,143,132,143,4,143,4,143,4,142,4,142,4,140,4,140,0
  22840  61c3
  22841  61c3		       8c 00		      .byte.b	140,0
  22842  61c5
  22843  61c5		       8c 00 8c 00*	      .byte.b	140,0,140,0,143,16,143,16,255,16,136,16,136,16,136,16,136,0,136
  22844  61d8
  22845  61d8		       00 88 00 8c*	      .byte.b	0,136,0,140,0,140,0,140,0,140,4,140,4,140,4,140,4,140,0,220,0
  22846  61ed
  22847  61ed		       dc 00 dc 00*	      .byte.b	220,0,220,0,220,0,220,0,220,66,140,0,140,0,140,0,140,66,140,0
  22848  6201
  22849  6201		       dc 00 dc 00*	      .byte.b	220,0,220,0,220,0,220,0,140,0,140,0,140,0,142,0,142,0,143,0
  22850  6215
  22851  6215		       8f 80 8f 80*	      .byte.b	143,128,143,128,143,128,143,128,143,128,143,128,143,132,143
  22852  6224
  22853  6224		       04 8f 04 8f*	      .byte.b	4,143,4,143,4,142,4,142,4,140,4,140,4,143,4,143,4,143,4,140
  22854  6238
  22855  6238		       04 8c 04 8c	      .byte.b	4,140,4,140
  22856  623c
  22857  623c				   .skipL01372
  22858  623c				   .
  22859  623c							; 
  22860  623c
  22861  623c				   .
  22862  623c							; 
  22863  623c
  22864  623c				   .L01373		;  data _Level9B
  22865  623c
  22866  623c				   _Level9B
  22867  623c		       00 00 00 07*	      .byte.b	0,0,0,7,0,7,0,7,0,0,0,0,32,0,34,0,34,0,32,0,0,0,0,0,0,7,0,7,0,7
  22868  625a
  22869  625a		       00 04 00 04*	      .byte.b	0,4,0,4,8,4,8,4,72,4,72,4,64,4,64,4,0,4,4,4,4,4,4,4,180,5,180,5
  22870  6276
  22871  6276		       b4 05 00 6c*	      .byte.b	180,5,0,108,0,108,0,108,0,108,16,104,16,104
  22872  6284
  22873  6284		       1f 68 1f 68*	      .byte.b	31,104,31,104,16,108,16,108,16,108,16,108,16,108,0,108,0,105,0
  22874  6297
  22875  6297		       69 00 69 00*	      .byte.b	105,0,105,0,105,0,104,0,104,32,108,32,108,40,108,40,108,8,108
  22876  62aa
  22877  62aa		       08 6c 08 6c*	      .byte.b	8,108,8,108,8,108,8,111,8,111,8,255,8,108,8,108,8,111
  22878  62bc
  22879  62bc		       08 6f 08 ff*	      .byte.b	8,111,8,255,8,108,8,108,8,111,8,111,8,255,8,108,8,108,8,108,8
  22880  62d1
  22881  62d1		       6c 00 bc 48*	      .byte.b	108,0,188,72,4,72,4,72,4,72,4,0,4,13,4,13,4,0,188,0,188,0,188
  22882  62e8
  22883  62e8		       20 04 20 04*	      .byte.b	32,4,32,4,34,4,34,4,32,4,32,4,0,188,0,188,0,4,0,4
  22884  62fc
  22885  62fc		       80 08 80 08*	      .byte.b	128,8,128,8,160,8,160,8,8,8,8,8,8,12,8,12,0,4,0,4,0,6,0,6,0,7,0
  22886  6317
  22887  6317		       07 80 07 80*	      .byte.b	7,128,7,128,7,128,7,128,7,160,7,160,7,160,7,160,7,0,0,0,0,0,0,0
  22888  632f
  22889  632f		       00 00 00 00*	      .byte.b	0,0,0,0,0,32,0,32,168,32,0,32,0
  22890  633c
  22891  633c				   .skipL01373
  22892  633c				   .
  22893  633c							; 
  22894  633c
  22895  633c				   .
  22896  633c							; 
  22897  633c
  22898  633c				   .L01374		;  data _Level10A
  22899  633c
  22900  633c				   _Level10A
  22901  633c		       ff 07 00 04*	      .byte.b	255,7,0,4,0,4,0,4,0,4,0,4,0,4,1,4,129,4,129,4,129,4,129,4,32,4,32
  22902  6357
  22903  6357		       04 20 00 20*	      .byte.b	4,32,0,32,0,32,0,32,0,0,0,0,0,0,0,0,0,16,0,16,0,16,0,16,0,0,0,0,0
  22904  6374
  22905  6374		       00 00 00 00*	      .byte.b	0,0,0,0,240,7,240,7
  22906  637c
  22907  637c		       f0 07 20 00*	      .byte.b	240,7,32,0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,4,63,4,1
  22908  6399
  22909  6399		       04 01 04 01*	      .byte.b	4,1,4,1,4,1,4,17,4,17,28,17,28,17,28,17,28,17,28,17,28,17,28,17
  22910  63b1
  22911  63b1		       1c 01 04 01*	      .byte.b	28,1,4,1,4,1,7,1,7,1,255
  22912  63bc
  22913  63bc		       01 00 01 00*	      .byte.b	1,0,1,0,1,120,1,120,192,7,192,7,192,7,192,7,0,0,0,0,0,120,0,120
  22914  63d4
  22915  63d4		       f0 07 f0 07*	      .byte.b	240,7,240,7,240,7,240,7,0,0,0,0,0,88,0,88,0,88,0,88,0,88,15,0,7
  22916  63ed
  22917  63ed		       04 03 04 01*	      .byte.b	4,3,4,1,4,1,4,1,4,137,4,137,44,137,44
  22918  63fc
  22919  63fc		       89 2c 81 2c*	      .byte.b	137,44,129,44,129,44,129,44,129,28,17,24,17,24,17,24,17,24,17,24
  22920  6410
  22921  6410		       81 1c 81 2c*	      .byte.b	129,28,129,44,129,44,137,44,137,44,137,44,9,76,9,76,9,12,9,12,1
  22922  6425
  22923  6425		       0c 01 4c 41*	      .byte.b	12,1,76,65,44,65,44,65,44,65,44,1,76,1,4,3,7,7,7,15,7,255,7
  22924  643c
  22925  643c				   .skipL01374
  22926  643c				   .
  22927  643c							; 
  22928  643c
  22929  643c				   .
  22930  643c							; 
  22931  643c
  22932  643c				   .L01375		;  data _Level10B
  22933  643c
  22934  643c				   _Level10B
  22935  643c		       00 00 10 07*	      .byte.b	0,0,16,7,16,7,16,7,16,4,16,4,16,4,0,4,64,4,0,4,64,4,0,4,64,4,0,4
  22936  6458
  22937  6458		       00 04 00 04*	      .byte.b	0,4,0,4,176,4,176,4,176,4,176,4,176,4,177,4,177,4,177,4,161,4,161
  22938  646f
  22939  646f		       04 a1 04 a1*	      .byte.b	4,161,4,161,4,163,4,163,4,1,4,1,4
  22940  647c
  22941  647c		       01 cc 03 04*	      .byte.b	1,204,3,4,3,4,3,7,3,7,3,7,1,4,1,4,1,4,163,7,163,7,161,7,33,0,33
  22942  6497
  22943  6497		       00 01 04 01*	      .byte.b	0,1,4,1,4,1,4,1,4,63,4,63,4,31,4,15,4,7,4,3,4,65,4,65,4,1,188,1
  22944  64b3
  22945  64b3		       bc 01 bc 01*	      .byte.b	188,1,188,1,188,3,0,7,0
  22946  64bc
  22947  64bc		       0f 06 1f 06*	      .byte.b	15,6,31,6,31,6,31,6,3,7,1,31,0,31,0,31,16,24,16,24,16,24,16,24
  22948  64d4
  22949  64d4		       10 00 11 00*	      .byte.b	16,0,17,0,17,0,17,0,1,0,1,4,1,4,1,4,31,4,31,4,1,7,1,7,1,255,1
  22950  64ef
  22951  64ef		       04 01 04 09*	      .byte.b	4,1,4,9,4,9,4,1,15,1,15,193,15
  22952  64fc
  22953  64fc		       c1 0f f0 0f*	      .byte.b	193,15,240,15,240,15,0,4,0,4,0,4,64,4,64,4,0,28,1,28,11,6,11,6,1
  22954  6515
  22955  6515		       1f 01 1f 81*	      .byte.b	31,1,31,129,31,129,31,128,31,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  22956  652e
  22957  652e		       00 00 00 00*	      .byte.b	0,0,0,0,129,7,129,7,129,175,129,7,129,7
  22958  653c
  22959  653c				   .skipL01375
  22960  653c				   .
  22961  653c							; 
  22962  653c
  22963  653c				   .
  22964  653c							; 
  22965  653c
  22966  653c				   .L01376		;  data _Level11A
  22967  653c
  22968  653c				   _Level11A
  22969  653c		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,128,4,128,4,128,4,128
  22970  6559
  22971  6559		       04 00 00 00*	      .byte.b	4,0,0,0,0,0,0,0,0,0,0,0,0,64,4,64,4,64,4,64,4,64,4,64,4,64,4,0,4
  22972  6576
  22973  6576		       00 04 00 04*	      .byte.b	0,4,0,4,0,140,0,140,0,140,0,140,16,140,16,140,16,140
  22974  6588
  22975  6588		       10 8c 10 8c*	      .byte.b	16,140,16,140,16,140,0,140,0,140,0,140,0,140,0,136,16,136,16,136
  22976  659c
  22977  659c		       10 88 10 88*	      .byte.b	16,136,16,136,16,136,16,136,0,136,0,136,0,136,0,136,0,136,0,136
  22978  65b0
  22979  65b0		       20 88 20 88*	      .byte.b	32,136,32,136,32,136,32,136,32,136,32,136
  22980  65bc
  22981  65bc		       20 88 00 88*	      .byte.b	32,136,0,136,0,136,0,136,0,136,0,136,0,136,0,136,32,140,32,140,32
  22982  65d1
  22983  65d1		       8c 21 04 20*	      .byte.b	140,33,4,32,0,33,0,32,0,33,0,0,4,0,4,0,4,0,4,0,4,0,92,0,92,0,92,0
  22984  65ed
  22985  65ed		       58 00 58 00*	      .byte.b	88,0,88,0,0,0,0,8,0,8,72,8,76,8,76
  22986  65fc
  22987  65fc		       40 4c 40 4c*	      .byte.b	64,76,64,76,64,76,64,76,0,4,0,4,4,0,4,0,4,0,4,0,4,0,0,0,0,0,0,4,0
  22988  6619
  22989  6619		       04 00 04 00*	      .byte.b	4,0,4,0,4,0,4,0,4,8,0,8,0,8,0,8,72,8,72,8,72,8,76,8,76,8,76,8,76
  22990  6636
  22991  6636		       08 4c 00 4c*	      .byte.b	8,76,0,76,0,4
  22992  663c
  22993  663c				   .skipL01376
  22994  663c				   .
  22995  663c							; 
  22996  663c
  22997  663c				   .
  22998  663c							; 
  22999  663c
  23000  663c				   .L01377		;  data _Level11B
  23001  663c
  23002  663c				   _Level11B
  23003  663c		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,0,0,0,0,0,64,0
  23004  665c
  23005  665c		       40 00 40 00*	      .byte.b	64,0,64,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,4,0
  23006  6679
  23007  6679		       04 00 5c 	      .byte.b	4,0,92
  23008  667c
  23009  667c		       00 5c 00 8c*	      .byte.b	0,92,0,140,80,140,81,4,81,4,80,140,0,140,0,140,0,92,0,92,0,92,0
  23010  6693
  23011  6693		       58 00 58 00*	      .byte.b	88,0,88,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,80,4,81,4,81,4
  23012  66b0
  23013  66b0		       50 04 00 04*	      .byte.b	80,4,0,4,0,4,0,4,0,0,0,0
  23014  66bc
  23015  66bc		       00 78 00 78*	      .byte.b	0,120,0,120,0,120,0,120,0,120,0,120,0,0,64,0,64,0,64,0,64,0,64
  23016  66d3
  23017  66d3		       00 40 00 40*	      .byte.b	0,64,0,64,0,64,0,64,0,8,0,8,0,8,0,8,0,0,0,0,120,0,120,0,124,0
  23018  66ed
  23019  66ed		       7c 00 7c 00*	      .byte.b	124,0,124,0,124,0,124,0,124,0,120,0,120,0,88
  23020  66fc
  23021  66fc		       00 58 00 58*	      .byte.b	0,88,0,88,0,88,0,88,0,90,0,90,0,90,0,90,0,88,0,88,0,88,0,0,0,0
  23022  6716
  23023  6716		       00 00 00 01*	      .byte.b	0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,172
  23024  6734
  23025  6734		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4
  23026  673c
  23027  673c				   .skipL01377
  23028  673c				   .
  23029  673c							; 
  23030  673c
  23031  673c				   .
  23032  673c							; 
  23033  673c
  23034  673c				   .L01378		;  data _Level12
  23035  673c
  23036  673c				   _Level12
  23037  673c		       01 04 01 04*	      .byte.b	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,6,1,6,1,7,1,7,129,7,129
  23038  675b
  23039  675b		       07 c1 07 c1*	      .byte.b	7,193,7,193,7,227,7,227,7,227,7,227,7,227,7,227,7,3,4,3,4,3,4,3,4
  23040  6774
  23041  6774		       7f 04 7f 04*	      .byte.b	127,4,127,4,1,4,1,4
  23042  677c
  23043  677c		       01 8c 01 04*	      .byte.b	1,140,1,4,1,4,1,4,3,6,3,6,3,6,3,6,3,6,3,6,3,0,3,0,3,0,195,7,192,7
  23044  679a
  23045  679a		       c0 07 c0 07*	      .byte.b	192,7,192,7,0,0,0,0,8,0,8,0,8,0,252,7,252,7,0,4,0,4,0,4,63,4,63,4
  23046  67b6
  23047  67b6		       20 04 20 04*	      .byte.b	32,4,32,4,0,4
  23048  67bc
  23049  67bc		       00 00 00 98*	      .byte.b	0,0,0,152,0,152,0,0,4,7,4,7,4,7,4,7,0,7,0,0,0,0,0,152,0,0,248,7
  23050  67d8
  23051  67d8		       fc 07 1c 00*	      .byte.b	252,7,28,0,12,0,28,0,252,7,248,7,0,0,0,0,0,0,0,0,24,6,24,44,24
  23052  67f1
  23053  67f1		       2c 18 2c 18*	      .byte.b	44,24,44,24,44,63,4,63,4,48,4
  23054  67fc
  23055  67fc		       30 04 20 04*	      .byte.b	48,4,32,4,32,4,0,28,0,28,0,30,0,30,128,31,128,31,248,31,248,31
  23056  6812
  23057  6812		       f8 1f 00 00*	      .byte.b	248,31,0,0,0,0,1,0,63,4,63,4,1,4,1,4,1,31,1,31,193,31,193,31,1
  23058  682b
  23059  682b		       00 01 00 01*	      .byte.b	0,1,0,1,152,1,152,1,152,1,7,1,7,1,7,255,7
  23060  683c
  23061  683c				   .skipL01378
  23062  683c				   .
  23063  683c							; 
  23064  683c
  23065  683c				   .
  23066  683c							; 
  23067  683c
  23068  683c				   .L01379		;  data _Level13A
  23069  683c
  23070  683c				   _Level13A
  23071  683c		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,4,0,0,0,0
  23072  685c
  23073  685c		       00 00 00 04*	      .byte.b	0,0,0,4,0,4,0,0,0,0,0,0,0,4,0,4,0,0,0,0,0,0,0,4,0,4,0,28,32,4,34,4
  23074  687c
  23075  687c		       20 04 22 04*	      .byte.b	32,4,34,4,32,4,0,28,0,188,64,4,0,188,64,4,0,188,0,188,0,188,32
  23076  6893
  23077  6893		       0c 20 0c 20*	      .byte.b	12,32,12,32,12,32,4,0,7,0,7,0,7,0,4,0,4,64,4,64,4,0,44,0,4,0,7
  23078  68ae
  23079  68ae		       00 07 00 07*	      .byte.b	0,7,0,7,0,0,0,0,0,0,0,0,0,0
  23080  68bc
  23081  68bc		       00 00 00 04*	      .byte.b	0,0,0,4,0,4,0,4,60,4,60,4,32,4,32,28,32,28,32,28,32,28,32,28,0,28
  23082  68d6
  23083  68d6		       00 1c 00 1c*	      .byte.b	0,28,0,28,0,28,0,31,0,31,128,31,128,31,0,0,0,0,0,88,0,88,0,88,33
  23084  68ef
  23085  68ef		       00 21 48 22*	      .byte.b	0,33,72,34,72,34,72,33,72,33,72,0,0
  23086  68fc
  23087  68fc		       00 00 00 58*	      .byte.b	0,0,0,88,0,88,0,0,160,7,160,7,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,4
  23088  691a
  23089  691a		       00 04 00 00*	      .byte.b	0,4,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,0,0,0,8,7,8,7,8,255,0,0,0,0,0,0
  23090  693c
  23091  693c				   .skipL01379
  23092  693c				   .
  23093  693c							; 
  23094  693c
  23095  693c				   .
  23096  693c							; 
  23097  693c
  23098  693c				   .L01380		;  data _Level13B
  23099  693c
  23100  693c				   _Level13B
  23101  693c		       00 04 00 07*	      .byte.b	0,4,0,7,0,7,0,7,0,4,0,4,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,4,0,0,0,0
  23102  695c
  23103  695c		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,0,0,0,0,4,0,4,0,4,0,0,0,0,0,0,0,4,0,4,0,4,0,4,128,44
  23104  697c
  23105  697c		       80 2c 80 2c*	      .byte.b	128,44,128,44,128,44,128,44,0,40,16,40,16,40,16,40,16,40,0,0,0,0
  23106  6992
  23107  6992		       00 58 00 58*	      .byte.b	0,88,0,88,0,88,0,0,13,7,13,7,13,255,0,4,0,4,0,4,0,4,16,12,16,12
  23108  69ac
  23109  69ac		       10 08 10 08*	      .byte.b	16,8,16,8,176,15,176,15,64,4,0,4,0,0,0,0
  23110  69bc
  23111  69bc		       00 00 00 00*	      .byte.b	0,0,0,0,0,7,0,7,0,255,0,4,0,4,0,76,40,4,40,4,0,76,0,76,0,88,0,88
  23112  69d8
  23113  69d8		       00 58 00 58*	      .byte.b	0,88,0,88,4,89,4,89,4,89,4,89,4,89,4,89,0,88,0,88,0,88,0,88,0,92
  23114  69f2
  23115  69f2		       00 5c 00 5c*	      .byte.b	0,92,0,92,0,92,0,92,0,88
  23116  69fc
  23117  69fc		       00 78 00 78*	      .byte.b	0,120,0,120,0,126,0,94,0,94,0,88,0,88,128,95,128,95,128,95,0,0,0
  23118  6a13
  23119  6a13		       00 20 00 20*	      .byte.b	0,32,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4
  23120  6a32
  23121  6a32		       00 04 00 04*	      .byte.b	0,4,0,4,0,172,0,4,0,4
  23122  6a3c
  23123  6a3c				   .skipL01380
  23124  6a3c				   .
  23125  6a3c							; 
  23126  6a3c
  23127  6a3c				   .
  23128  6a3c							; 
  23129  6a3c
  23130  6a3c				   .L01381		;  data _Level14A
  23131  6a3c
  23132  6a3c				   _Level14A
  23133  6a3c		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,6,0,6,0,7,0,7,128,7,128
  23134  6a5b
  23135  6a5b		       07 00 00 00*	      .byte.b	7,0,0,0,0,176,7,176,7,176,7,176,7,0,0,0,0,0,0,0,0,188,7,188,7,0,4
  23136  6a76
  23137  6a76		       00 04 00 bc*	      .byte.b	0,4,0,188,0,188
  23138  6a7c
  23139  6a7c		       3f 04 3f 04*	      .byte.b	63,4,63,4,0,4,0,188,0,4,0,4,0,4,128,7,128,7,0,92,0,92,0,88,0,92,0
  23140  6a97
  23141  6a97		       5c 00 58 00*	      .byte.b	92,0,88,0,88,0,0,32,4,32,76,32,72,32,72,0,4,0,4,0,120,0,120,0,0
  23142  6ab0
  23143  6ab0		       0a 6c 0a 6c*	      .byte.b	10,108,10,108,128,108,128,108,128,104,128,104
  23144  6abc
  23145  6abc		       00 68 00 68*	      .byte.b	0,104,0,104,0,104,0,104,0,108,0,108,42,108,42,108,0,108,0,108,0
  23146  6ad1
  23147  6ad1		       6c 00 6c 00*	      .byte.b	108,0,108,0,111,0,111,0,111,0,108,0,108,16,104,16,104,16,104,16
  23148  6ae5
  23149  6ae5		       68 00 68 00*	      .byte.b	104,0,104,0,104,0,104,128,104,128,108,128,108,128,108,64
  23150  6af5
  23151  6af5		       6c 40 6c 40*	      .byte.b	108,64,108,64,108,64,108,0,108,0,108,145,104,145,104,145,104,145
  23152  6b07
  23153  6b07		       68 01 68 01*	      .byte.b	104,1,104,1,104,63,108,63,108,8,4,8,4,8,4,8,4,0,0,0,0,128,0,128
  23154  6b1f
  23155  6b1f		       00 80 00 00*	      .byte.b	0,128,0,0,0,0,0,188,7,188,7,188,7,0,0,0,0,0,7,0,7,0,255,0,0,0,0,0,0
  23156  6b3c
  23157  6b3c				   .skipL01381
  23158  6b3c				   .
  23159  6b3c							; 
  23160  6b3c
  23161  6b3c				   .
  23162  6b3c							; 
  23163  6b3c
  23164  6b3c				   .L01382		;  data _Level14B
  23165  6b3c
  23166  6b3c				   _Level14B
  23167  6b3c		       01 04 01 07*	      .byte.b	1,4,1,7,1,7,1,7,1,4,1,4,1,4,1,4,1,4,1,4,1,0,1,0,1,0,1,0,1,0,1,0
  23168  6b5c
  23169  6b5c		       01 04 01 04*	      .byte.b	1,4,1,4,1,4,1,4,1,0,1,0,1,0,1,0,1,0,1,0,1,7,1,7,1,7,3,7,3,7,1,7
  23170  6b7c
  23171  6b7c		       01 07 01 cf*	      .byte.b	1,7,1,207,3,7,3,7,3,7,3,7,3,7,1,7,1,7,1,7,163,7,163,7,163,7,163
  23172  6b97
  23173  6b97		       07 03 07 03*	      .byte.b	7,3,7,3,7,0,0,0,0,0,0,0,120,0,120,0,120,0,120,0,120,0,120,0,124
  23174  6bb0
  23175  6bb0		       00 7c 00 7c*	      .byte.b	0,124,0,124,0,124,0,120,0,120,0,120
  23176  6bbc
  23177  6bbc		       00 78 00 78*	      .byte.b	0,120,0,120,0,120,0,0,0,4,0,4,0,7,0,7,0,255,0,108,0,108,80,108
  23178  6bd4
  23179  6bd4		       50 6c 50 6c*	      .byte.b	80,108,80,108,80,108,0,104,0,104,176,111,176,111,176,111,0,108
  23180  6be6
  23181  6be6		       00 6c 00 00*	      .byte.b	0,108,0,0,0,0,4,0,4,72,188,79,188,79,4,74,4,74,0,104,0,104
  23182  6bfc
  23183  6bfc		       1f 68 1f 68*	      .byte.b	31,104,31,104,0,108,0,108,0,108,0,108,128,104,128,104,128,104,0
  23184  6c0f
  23185  6c0f		       68 00 68 20*	      .byte.b	104,0,104,32,104,32,104,32,104,0,104,0,104,4,104,4,104,4,104,0
  23186  6c23
  23187  6c23		       68 00 00 00*	      .byte.b	104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,48,168,48,0,48,0
  23188  6c3c
  23189  6c3c				   .skipL01382
  23190  6c3c				   .
  23191  6c3c							; 
  23192  6c3c
  23193  6c3c				   .
  23194  6c3c							; 
  23195  6c3c
  23196  6c3c				   .L01383		;  data _Level15A
  23197  6c3c
  23198  6c3c				   _Level15A
  23199  6c3c		       40 04 40 04*	      .byte.b	64,4,64,4,64,4,64,4,0,4,4,4,4,4,4,4,4,4,0,4,0,4,128,4,128,4,128
  23200  6c57
  23201  6c57		       04 84 04 04*	      .byte.b	4,132,4,4,4,4,4,4,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,8,0,8,4,8,4
  23202  6c76
  23203  6c76		       08 04 08 04*	      .byte.b	8,4,8,4,8,4
  23204  6c7c
  23205  6c7c		       08 04 08 04*	      .byte.b	8,4,8,4,8,4,8,12,8,12,8,12,0,4,0,4,0,124,0,124,0,124,0,124,0,4,0
  23206  6c97
  23207  6c97		       04 10 04 10*	      .byte.b	4,16,4,16,76,16,76,16,76,16,76,16,76,0,4,0,4,0,4,4,4,4,28,4,28,4
  23208  6cb1
  23209  6cb1		       1c 04 1c 04*	      .byte.b	28,4,28,4,28,4,28,4,28,4,28
  23210  6cbc
  23211  6cbc		       04 1c 04 1c*	      .byte.b	4,28,4,28,4,24,0,0,0,0,0,120,0,120,0,120,0,0,0,4,16,140,16,140
  23212  6cd4
  23213  6cd4		       10 8c 10 8c*	      .byte.b	16,140,16,140,16,140,16,140,16,140,16,140,16,140,16,140,16,140
  23214  6ce6
  23215  6ce6		       10 8c 00 8c*	      .byte.b	16,140,0,140,0,140,0,120,0,120,0,120,0,120,0,124,0,124,4,104,4,104
  23216  6cfc
  23217  6cfc		       04 68 04 68*	      .byte.b	4,104,4,104,0,104,0,104,32,104,32,104,32,104,32,104,0,104,0,104
  23218  6d10
  23219  6d10		       00 68 08 00*	      .byte.b	0,104,8,0,8,0,8,0,8,0,0,0,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,4,0
  23220  6d2f
  23221  6d2f		       7c 00 7c 00*	      .byte.b	124,0,124,0,124,0,124,0,124,0,4,0,0
  23222  6d3c
  23223  6d3c				   .skipL01383
  23224  6d3c				   .
  23225  6d3c							; 
  23226  6d3c
  23227  6d3c				   .
  23228  6d3c							; 
  23229  6d3c
  23230  6d3c				   .L01384		;  data _Level15B
  23231  6d3c
  23232  6d3c				   _Level15B
  23233  6d3c		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,4,0,4,64,4,64,4,64,4,64,4,64,4,64,0,4,0,4,0,4
  23234  6d59
  23235  6d59		       00 04 00 04*	      .byte.b	0,4,0,4,0,0,0,0,0,0,0,0,0,4,0,4,4,4,4,4,0,4,0,4,0,4,0,4,0,4,0,0
  23236  6d79
  23237  6d79		       00 00 00 	      .byte.b	0,0,0
  23238  6d7c
  23239  6d7c		       00 00 00 e8*	      .byte.b	0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  23240  6d9b
  23241  6d9b		       00 04 00 04*	      .byte.b	0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0
  23242  6db9
  23243  6db9		       78 00 78 	      .byte.b	120,0,120
  23244  6dbc
  23245  6dbc		       00 78 00 78*	      .byte.b	0,120,0,120,0,120,0,104,0,104,0,104,0,104,0,104,0,104,0,108,0
  23246  6dd1
  23247  6dd1		       6c 00 6c 00*	      .byte.b	108,0,108,0,108,0,108,0,108,0,108,0,108,144,108,145,76,145,76
  23248  6de4
  23249  6de4		       91 4c 91 4c*	      .byte.b	145,76,145,76,144,76,0,0,0,0,0,88,0,88,4,88,4,88,4,88,4,88,4,88
  23250  6dfc
  23251  6dfc		       04 58 00 58*	      .byte.b	4,88,0,88,0,88,0,88,0,88,0,88,0,104,0,108,0,108,0,108,0,108,0
  23252  6e13
  23253  6e13		       6c 00 68 80*	      .byte.b	108,0,104,128,104,128,104,128,104,128,104,0,104,0,104,0,104,0
  23254  6e25
  23255  6e25		       68 00 68 00*	      .byte.b	104,0,104,0,108,0,108,0,108,0,108,16,4,16,172,16,4,144,4,144
  23256  6e39
  23257  6e39		       04 90 04 	      .byte.b	4,144,4
  23258  6e3c
  23259  6e3c				   .skipL01384
  23260  6e3c				   .
  23261  6e3c							; 
  23262  6e3c
  23263  6e3c				   .
  23264  6e3c							; 
  23265  6e3c
  23266  6e3c				   .L01385		;  data _Level16
  23267  6e3c
  23268  6e3c				   _Level16
  23269  6e3c		       01 04 01 04*	      .byte.b	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,0,1,0,1,0,1,0,129,7,129
  23270  6e5b
  23271  6e5b		       07 c1 07 c1*	      .byte.b	7,193,7,193,7,225,7,225,7,225,0,225,0,225,0,225,0,225,0,225,0,225
  23272  6e71
  23273  6e71		       07 e1 07 c3*	      .byte.b	7,225,7,195,7,195,7,135,7,135,7
  23274  6e7c
  23275  6e7c		       87 07 07 00*	      .byte.b	135,7,7,0,7,0,7,0,4,152,4,24,132,31,132,31,132,31,132,31,4,31,12
  23276  6e93
  23277  6e93		       1f 0c 1e 18*	      .byte.b	31,12,30,24,4,24,4,112,4,112,4,64,4,64,4,64,4,70,4,70,4,68,4,0,4
  23278  6eac
  23279  6eac		       00 04 fc 07*	      .byte.b	0,4,252,7,252,7,0,4,0,4,0,4,0,4,0,0
  23280  6ebc
  23281  6ebc		       00 00 40 00*	      .byte.b	0,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0,0,0,31,108,31,108,31,108,31
  23282  6ed5
  23283  6ed5		       6c 08 68 08*	      .byte.b	108,8,104,8,104,0,104,0,104,128,104,128,104,252,104,252,104,0
  23284  6ee7
  23285  6ee7		       68 00 68 00*	      .byte.b	104,0,104,0,104,0,108,0,76,32,4,32,4,127,4,127,4,64,4,64,4
  23286  6efc
  23287  6efc		       00 4c 00 6c*	      .byte.b	0,76,0,108,240,111,240,111,0,104,0,104,193,111,195,111,3,108,3
  23288  6f0f
  23289  6f0f		       6c 03 6c 03*	      .byte.b	108,3,108,3,0,3,0,3,0,3,6,3,6,15,6,15,6,1,6,1,6,1,142,1,6,1,6
  23290  6f2a
  23291  6f2a		       01 06 c3 07*	      .byte.b	1,6,195,7,195,7,7,0,7,0,15,7,15,7,31,7,255,7
  23292  6f3c
  23293  6f3c				   .skipL01385
  23294  6f3c				   .
  23295  6f3c							; 
  23296  6f3c
  23297  6f3c				   .
  23298  6f3c							; 
  23299  6f3c
  23300  6f3c				   .
  23301  6f3c							; 
  23302  6f3c
  23303  6f3c				   .__Boss_PF_Setup_3
  23304  6f3c							; __Boss_PF_Setup_3
  23305  6f3c
  23306  6f3c				   .L01386		;  playfield:
  23307  6f3c
  23308  6f3c				  -	      ifconst	pfres
  23309  6f3c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  23310  6f3c					      else
  23311  6f3c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  23312  6f3e					      endif
  23313  6f3e		       4c 6d bf 	      jmp	pflabel3
  23314  6f41				   PF_data3
  23315  6f41		       c0 ff		      .byte.b	%11000000, %11111111
  23316  6f43					      if	(pfwidth>2)
  23317  6f43		       ff c0		      .byte.b	%11111111, %11000000
  23318  6f45					      endif
  23319  6f45		       c0 00		      .byte.b	%11000000, %00000000
  23320  6f47					      if	(pfwidth>2)
  23321  6f47		       00 c0		      .byte.b	%00000000, %11000000
  23322  6f49					      endif
  23323  6f49		       c0 00		      .byte.b	%11000000, %00000000
  23324  6f4b					      if	(pfwidth>2)
  23325  6f4b		       00 c0		      .byte.b	%00000000, %11000000
  23326  6f4d					      endif
  23327  6f4d		       c0 00		      .byte.b	%11000000, %00000000
  23328  6f4f					      if	(pfwidth>2)
  23329  6f4f		       00 c0		      .byte.b	%00000000, %11000000
  23330  6f51					      endif
  23331  6f51		       c0 00		      .byte.b	%11000000, %00000000
  23332  6f53					      if	(pfwidth>2)
  23333  6f53		       00 c0		      .byte.b	%00000000, %11000000
  23334  6f55					      endif
  23335  6f55		       c0 00		      .byte.b	%11000000, %00000000
  23336  6f57					      if	(pfwidth>2)
  23337  6f57		       00 c0		      .byte.b	%00000000, %11000000
  23338  6f59					      endif
  23339  6f59		       f0 00		      .byte.b	%11110000, %00000000
  23340  6f5b					      if	(pfwidth>2)
  23341  6f5b		       00 f0		      .byte.b	%00000000, %11110000
  23342  6f5d					      endif
  23343  6f5d		       c0 00		      .byte.b	%11000000, %00000000
  23344  6f5f					      if	(pfwidth>2)
  23345  6f5f		       00 c0		      .byte.b	%00000000, %11000000
  23346  6f61					      endif
  23347  6f61		       c0 80		      .byte.b	%11000000, %10000000
  23348  6f63					      if	(pfwidth>2)
  23349  6f63		       80 c0		      .byte.b	%10000000, %11000000
  23350  6f65					      endif
  23351  6f65		       c0 80		      .byte.b	%11000000, %10000000
  23352  6f67					      if	(pfwidth>2)
  23353  6f67		       80 c0		      .byte.b	%10000000, %11000000
  23354  6f69					      endif
  23355  6f69		       cf ff		      .byte.b	%11001111, %11111111
  23356  6f6b					      if	(pfwidth>2)
  23357  6f6b		       ff cf		      .byte.b	%11111111, %11001111
  23358  6f6d					      endif
  23359  6f6d				   pflabel3
  23360  6f6d		       bd 41 bf 	      lda	PF_data3,x
  23361  6f70		       95 a4		      sta	playfield,x
  23362  6f72		       ca		      dex
  23363  6f73		       10 f8		      bpl	pflabel3
  23364  6f75				   .L01387		;  return otherbank
  23365  6f75
  23366  6f75		       4c dd ff 	      JMP	BS_return
  23367  6f78				   .
  23368  6f78							; 
  23369  6f78
  23370  6f78				   .
  23371  6f78							; 
  23372  6f78
  23373  6f78				   .
  23374  6f78							; 
  23375  6f78
  23376  6f78				   .__Boss_PF_Setup_4
  23377  6f78							; __Boss_PF_Setup_4
  23378  6f78
  23379  6f78				   .L01388		;  playfield:
  23380  6f78
  23381  6f78				  -	      ifconst	pfres
  23382  6f78				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  23383  6f78					      else
  23384  6f78		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  23385  6f7a					      endif
  23386  6f7a		       4c a9 bf 	      jmp	pflabel4
  23387  6f7d				   PF_data4
  23388  6f7d		       e0 ff		      .byte.b	%11100000, %11111111
  23389  6f7f					      if	(pfwidth>2)
  23390  6f7f		       ff e0		      .byte.b	%11111111, %11100000
  23391  6f81					      endif
  23392  6f81		       c0 fe		      .byte.b	%11000000, %11111110
  23393  6f83					      if	(pfwidth>2)
  23394  6f83		       fe c0		      .byte.b	%11111110, %11000000
  23395  6f85					      endif
  23396  6f85		       e0 3c		      .byte.b	%11100000, %00111100
  23397  6f87					      if	(pfwidth>2)
  23398  6f87		       3c e0		      .byte.b	%00111100, %11100000
  23399  6f89					      endif
  23400  6f89		       c0 18		      .byte.b	%11000000, %00011000
  23401  6f8b					      if	(pfwidth>2)
  23402  6f8b		       18 c0		      .byte.b	%00011000, %11000000
  23403  6f8d					      endif
  23404  6f8d		       c0 00		      .byte.b	%11000000, %00000000
  23405  6f8f					      if	(pfwidth>2)
  23406  6f8f		       00 c0		      .byte.b	%00000000, %11000000
  23407  6f91					      endif
  23408  6f91		       c0 00		      .byte.b	%11000000, %00000000
  23409  6f93					      if	(pfwidth>2)
  23410  6f93		       00 c0		      .byte.b	%00000000, %11000000
  23411  6f95					      endif
  23412  6f95		       f0 00		      .byte.b	%11110000, %00000000
  23413  6f97					      if	(pfwidth>2)
  23414  6f97		       00 f0		      .byte.b	%00000000, %11110000
  23415  6f99					      endif
  23416  6f99		       c0 00		      .byte.b	%11000000, %00000000
  23417  6f9b					      if	(pfwidth>2)
  23418  6f9b		       00 c0		      .byte.b	%00000000, %11000000
  23419  6f9d					      endif
  23420  6f9d		       c0 80		      .byte.b	%11000000, %10000000
  23421  6f9f					      if	(pfwidth>2)
  23422  6f9f		       80 c0		      .byte.b	%10000000, %11000000
  23423  6fa1					      endif
  23424  6fa1		       c0 80		      .byte.b	%11000000, %10000000
  23425  6fa3					      if	(pfwidth>2)
  23426  6fa3		       80 c0		      .byte.b	%10000000, %11000000
  23427  6fa5					      endif
  23428  6fa5		       ff 9f		      .byte.b	%11111111, %10011111
  23429  6fa7					      if	(pfwidth>2)
  23430  6fa7		       9f ff		      .byte.b	%10011111, %11111111
  23431  6fa9					      endif
  23432  6fa9				   pflabel4
  23433  6fa9		       bd 7d bf 	      lda	PF_data4,x
  23434  6fac		       95 a4		      sta	playfield,x
  23435  6fae		       ca		      dex
  23436  6faf		       10 f8		      bpl	pflabel4
  23437  6fb1				   .L01389		;  return otherbank
  23438  6fb1
  23439  6fb1		       4c dd ff 	      JMP	BS_return
  23440  6fb4				   .
  23441  6fb4							; 
  23442  6fb4
  23443  6fb4				   .
  23444  6fb4							; 
  23445  6fb4
  23446  6fb4				   .
  23447  6fb4							; 
  23448  6fb4
  23449  6fb4				   .
  23450  6fb4							; 
  23451  6fb4
  23452  6fb4				   .
  23453  6fb4							; 
  23454  6fb4
  23455  6fb4				   .
  23456  6fb4							; 
  23457  6fb4
  23458  6fb4				   .
  23459  6fb4							; 
  23460  6fb4
  23461  6fb4				   .
  23462  6fb4							; 
  23463  6fb4
  23464  6fb4				   .
  23465  6fb4							; 
  23466  6fb4
  23467  6fb4				   .
  23468  6fb4							; 
  23469  6fb4
  23470  6fb4				   .
  23471  6fb4							; 
  23472  6fb4
  23473  6fb4				   .L01390		;  bank 7
  23474  6fb4
  23475  6fb4					      if	ECHO6
      32 bytes of ROM space left in bank 6
  23476  6fb4					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
  23477  6fb4					      endif
  23478  6fb4		       00 01	   ECHO6      =	1
  23479  6fd4					      ORG	$6FF4-bscode_length
  23480  6fd4					      RORG	$BFF4-bscode_length
  23481  6fd4		       a2 ff	   start_bank6 ldx	#$ff
  23482  6fd6				  -	      ifconst	FASTFETCH	; using DPC+
  23483  6fd6				  -	      stx	FASTFETCH
  23484  6fd6					      endif
  23485  6fd6		       9a		      txs
  23486  6fd7				  -	      if	bankswitch == 64
  23487  6fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  23488  6fd7					      else
  23489  6fd7		       a9 f2		      lda	#>(start-1)
  23490  6fd9					      endif
  23491  6fd9		       48		      pha
  23492  6fda		       a9 51		      lda	#<(start-1)
  23493  6fdc		       48		      pha
  23494  6fdd		       48		      pha
  23495  6fde		       8a		      txa
  23496  6fdf		       48		      pha
  23497  6fe0		       ba		      tsx
  23498  6fe1					      if	bankswitch != 64
  23499  6fe1		       b5 04		      lda	4,x	; get high byte of return address
  23500  6fe3		       2a		      rol
  23501  6fe4		       2a		      rol
  23502  6fe5		       2a		      rol
  23503  6fe6		       2a		      rol
  23504  6fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  23505  6fe9		       aa		      tax
  23506  6fea		       e8		      inx
  23507  6feb				  -	      else
  23508  6feb				  -	      lda	4,x	; get high byte of return address
  23509  6feb				  -	      tay
  23510  6feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  23511  6feb				  -	      sta	4,x
  23512  6feb				  -	      tya
  23513  6feb				  -	      lsr
  23514  6feb				  -	      lsr
  23515  6feb				  -	      lsr
  23516  6feb				  -	      lsr
  23517  6feb				  -	      tax
  23518  6feb				  -	      inx
  23519  6feb					      endif
  23520  6feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  23521  6fee		       68		      pla
  23522  6fef		       aa		      tax
  23523  6ff0		       68		      pla
  23524  6ff1		       60		      rts
  23525  6ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  23526  6ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  23527  6ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  23528  6ff2					      endif
  23529  6ffc					      ORG	$6FFC
  23530  6ffc					      RORG	$BFFC
  23531  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
  23532  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
  23533  7000					      ORG	$7000
  23534  7000					      RORG	$D000
  23535  7000				   .
  23536  7000							; 
  23537  7000
  23538  7000				   .
  23539  7000							; 
  23540  7000
  23541  7000				   .
  23542  7000							; 
  23543  7000
  23544  7000				   .
  23545  7000							; 
  23546  7000
  23547  7000				   .
  23548  7000							; 
  23549  7000
  23550  7000				   .
  23551  7000							; 
  23552  7000
  23553  7000				   .
  23554  7000							; 
  23555  7000
  23556  7000				   .__Get_Music
  23557  7000							; __Get_Music
  23558  7000
  23559  7000				   .
  23560  7000							; 
  23561  7000
  23562  7000				   .
  23563  7000							; 
  23564  7000
  23565  7000				   .
  23566  7000							; 
  23567  7000
  23568  7000				   .
  23569  7000							; 
  23570  7000
  23571  7000				   .L01391		;  _Music_Duration  =	_Music_Duration  -  1
  23572  7000
  23573  7000		       c6 e3		      DEC	_Music_Duration
  23574  7002				   .
  23575  7002							; 
  23576  7002
  23577  7002				   .L01392		;  if _Music_Duration	>  0 then goto __Got_Music bank3
  23578  7002
  23579  7002		       a9 00		      LDA	#0
  23580  7004		       c5 e3		      CMP	_Music_Duration
  23581  7006		       b0 12		      BCS	.skipL01392
  23582  7008				   .condpart642
  23583  7008		       85 ee		      sta	temp7
  23584  700a		       a9 52		      lda	#>(.__Got_Music-1)
  23585  700c		       48		      pha
  23586  700d		       a9 d3		      lda	#<(.__Got_Music-1)
  23587  700f		       48		      pha
  23588  7010		       a5 ee		      lda	temp7
  23589  7012		       48		      pha
  23590  7013		       8a		      txa
  23591  7014		       48		      pha
  23592  7015		       a2 03		      ldx	#3
  23593  7017		       4c eb ff 	      jmp	BS_jsr
  23594  701a				   .skipL01392
  23595  701a				   .
  23596  701a							; 
  23597  701a
  23598  701a				   .
  23599  701a							; 
  23600  701a
  23601  701a				   .
  23602  701a							; 
  23603  701a
  23604  701a				   .
  23605  701a							; 
  23606  701a
  23607  701a				   .L01393		;  temp4  =  sread ( _OWMusicData ) 
  23608  701a
  23609  701a		       a2 e4		      ldx	#_OWMusicData
  23610  701c		       a1 00		      lda	(0,x)
  23611  701e		       f6 00		      inc	0,x
  23612  7020		       d0 02		      bne	*+4
  23613  7022		       f6 01		      inc	1,x
  23614  7024		       85 9f		      STA	temp4
  23615  7026				   .
  23616  7026							; 
  23617  7026
  23618  7026				   .
  23619  7026							; 
  23620  7026
  23621  7026				   .
  23622  7026							; 
  23623  7026
  23624  7026				   .
  23625  7026							; 
  23626  7026
  23627  7026				   .L01394		;  if temp4  =  255 then _Music_Duration  =  1  :  gosub __OW_Music  :  goto __Get_Music
  23628  7026
  23629  7026		       a5 9f		      LDA	temp4
  23630  7028		       c9 ff		      CMP	#255
  23631  702a		       d0 0a		      BNE	.skipL01394
  23632  702c				   .condpart643
  23633  702c		       a9 01		      LDA	#1
  23634  702e		       85 e3		      STA	_Music_Duration
  23635  7030		       20 ba d0 	      jsr	.__OW_Music
  23636  7033		       4c 00 d0 	      jmp	.__Get_Music
  23637  7036
  23638  7036				   .skipL01394
  23639  7036				   .
  23640  7036							; 
  23641  7036
  23642  7036				   .
  23643  7036							; 
  23644  7036
  23645  7036				   .
  23646  7036							; 
  23647  7036
  23648  7036				   .
  23649  7036							; 
  23650  7036
  23651  7036				   .L01395		;  temp5  =  sread ( _OWMusicData ) 
  23652  7036
  23653  7036		       a2 e4		      ldx	#_OWMusicData
  23654  7038		       a1 00		      lda	(0,x)
  23655  703a		       f6 00		      inc	0,x
  23656  703c		       d0 02		      bne	*+4
  23657  703e		       f6 01		      inc	1,x
  23658  7040		       85 a0		      STA	temp5
  23659  7042				   .L01396		;  temp6  =  sread ( _OWMusicData ) 
  23660  7042
  23661  7042		       a2 e4		      ldx	#_OWMusicData
  23662  7044		       a1 00		      lda	(0,x)
  23663  7046		       f6 00		      inc	0,x
  23664  7048		       d0 02		      bne	*+4
  23665  704a		       f6 01		      inc	1,x
  23666  704c		       85 a1		      STA	temp6
  23667  704e				   .
  23668  704e							; 
  23669  704e
  23670  704e				   .
  23671  704e							; 
  23672  704e
  23673  704e				   .
  23674  704e							; 
  23675  704e
  23676  704e				   .
  23677  704e							; 
  23678  704e
  23679  704e				   .L01397		;  if _Bit1_Jumping_Flag{1}  ||  _Bit4_Enemy_Dead_Flag{4} then goto __Skip_Melody
  23680  704e
  23681  704e		       a5 d7		      LDA	_Bit1_Jumping_Flag
  23682  7050		       29 02		      AND	#2
  23683  7052		       f0 03		      BEQ	.skipL01397
  23684  7054				   .condpart644
  23685  7054		       4c 5d d0 	      jmp	.condpart645
  23686  7057				   .skipL01397
  23687  7057		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
  23688  7059		       29 10		      AND	#16
  23689  705b		       f0 03		      BEQ	.skip168OR
  23690  705d				   .condpart645
  23691  705d		       4c 6c d0 	      jmp	.__Skip_Melody
  23692  7060
  23693  7060				   .skip168OR
  23694  7060				   .
  23695  7060							; 
  23696  7060
  23697  7060				   .
  23698  7060							; 
  23699  7060
  23700  7060				   .
  23701  7060							; 
  23702  7060
  23703  7060				   .
  23704  7060							; 
  23705  7060
  23706  7060				   .L01398		;  AUDV0  =  temp4
  23707  7060
  23708  7060		       a5 9f		      LDA	temp4
  23709  7062		       85 19		      STA	AUDV0
  23710  7064				   .L01399		;  AUDC0  =  temp5
  23711  7064
  23712  7064		       a5 a0		      LDA	temp5
  23713  7066		       85 15		      STA	AUDC0
  23714  7068				   .L01400		;  AUDF0  =  temp6
  23715  7068
  23716  7068		       a5 a1		      LDA	temp6
  23717  706a		       85 17		      STA	AUDF0
  23718  706c				   .
  23719  706c							; 
  23720  706c
  23721  706c				   .__Skip_Melody
  23722  706c							; __Skip_Melody
  23723  706c
  23724  706c				   .
  23725  706c							; 
  23726  706c
  23727  706c				   .
  23728  706c							; 
  23729  706c
  23730  706c				   .
  23731  706c							; 
  23732  706c
  23733  706c				   .
  23734  706c							; 
  23735  706c
  23736  706c				   .L01401		;  temp4  =  sread ( _OWMusicData ) 
  23737  706c
  23738  706c		       a2 e4		      ldx	#_OWMusicData
  23739  706e		       a1 00		      lda	(0,x)
  23740  7070		       f6 00		      inc	0,x
  23741  7072		       d0 02		      bne	*+4
  23742  7074		       f6 01		      inc	1,x
  23743  7076		       85 9f		      STA	temp4
  23744  7078				   .L01402		;  temp5  =  sread ( _OWMusicData ) 
  23745  7078
  23746  7078		       a2 e4		      ldx	#_OWMusicData
  23747  707a		       a1 00		      lda	(0,x)
  23748  707c		       f6 00		      inc	0,x
  23749  707e		       d0 02		      bne	*+4
  23750  7080		       f6 01		      inc	1,x
  23751  7082		       85 a0		      STA	temp5
  23752  7084				   .L01403		;  temp6  =  sread ( _OWMusicData ) 
  23753  7084
  23754  7084		       a2 e4		      ldx	#_OWMusicData
  23755  7086		       a1 00		      lda	(0,x)
  23756  7088		       f6 00		      inc	0,x
  23757  708a		       d0 02		      bne	*+4
  23758  708c		       f6 01		      inc	1,x
  23759  708e		       85 a1		      STA	temp6
  23760  7090				   .
  23761  7090							; 
  23762  7090
  23763  7090				   .
  23764  7090							; 
  23765  7090
  23766  7090				   .
  23767  7090							; 
  23768  7090
  23769  7090				   .
  23770  7090							; 
  23771  7090
  23772  7090				   .L01404		;  AUDV1  =  temp4
  23773  7090
  23774  7090		       a5 9f		      LDA	temp4
  23775  7092		       85 1a		      STA	AUDV1
  23776  7094				   .L01405		;  AUDC1  =  temp5
  23777  7094
  23778  7094		       a5 a0		      LDA	temp5
  23779  7096		       85 16		      STA	AUDC1
  23780  7098				   .L01406		;  AUDF1  =  temp6
  23781  7098
  23782  7098		       a5 a1		      LDA	temp6
  23783  709a		       85 18		      STA	AUDF1
  23784  709c				   .
  23785  709c							; 
  23786  709c
  23787  709c				   .
  23788  709c							; 
  23789  709c
  23790  709c				   .
  23791  709c							; 
  23792  709c
  23793  709c				   .
  23794  709c							; 
  23795  709c
  23796  709c				   .L01407		;  _Music_Duration  =	sread ( _OWMusicData ) 
  23797  709c
  23798  709c		       a2 e4		      ldx	#_OWMusicData
  23799  709e		       a1 00		      lda	(0,x)
  23800  70a0		       f6 00		      inc	0,x
  23801  70a2		       d0 02		      bne	*+4
  23802  70a4		       f6 01		      inc	1,x
  23803  70a6		       85 e3		      STA	_Music_Duration
  23804  70a8				   .
  23805  70a8							; 
  23806  70a8
  23807  70a8				   .L01408		;  goto __Got_Music bank3
  23808  70a8
  23809  70a8		       85 ee		      sta	temp7
  23810  70aa		       a9 52		      lda	#>(.__Got_Music-1)
  23811  70ac		       48		      pha
  23812  70ad		       a9 d3		      lda	#<(.__Got_Music-1)
  23813  70af		       48		      pha
  23814  70b0		       a5 ee		      lda	temp7
  23815  70b2		       48		      pha
  23816  70b3		       8a		      txa
  23817  70b4		       48		      pha
  23818  70b5		       a2 03		      ldx	#3
  23819  70b7		       4c eb ff 	      jmp	BS_jsr
  23820  70ba				   .
  23821  70ba							; 
  23822  70ba
  23823  70ba				   .
  23824  70ba							; 
  23825  70ba
  23826  70ba				   .
  23827  70ba							; 
  23828  70ba
  23829  70ba				   .
  23830  70ba							; 
  23831  70ba
  23832  70ba				   .
  23833  70ba							; 
  23834  70ba
  23835  70ba				   .
  23836  70ba							; 
  23837  70ba
  23838  70ba				   .
  23839  70ba							; 
  23840  70ba
  23841  70ba				   .
  23842  70ba							; 
  23843  70ba
  23844  70ba				   .
  23845  70ba							; 
  23846  70ba
  23847  70ba				   .
  23848  70ba							; 
  23849  70ba
  23850  70ba				   .
  23851  70ba							; 
  23852  70ba
  23853  70ba				   .
  23854  70ba							; 
  23855  70ba
  23856  70ba				   .
  23857  70ba							; 
  23858  70ba
  23859  70ba				   .
  23860  70ba							; 
  23861  70ba
  23862  70ba				   .
  23863  70ba							; 
  23864  70ba
  23865  70ba				   .
  23866  70ba							; 
  23867  70ba
  23868  70ba				   .
  23869  70ba							; 
  23870  70ba
  23871  70ba				   .
  23872  70ba							; 
  23873  70ba
  23874  70ba				   .
  23875  70ba							; 
  23876  70ba
  23877  70ba				   .
  23878  70ba							; 
  23879  70ba
  23880  70ba				   .
  23881  70ba							; 
  23882  70ba
  23883  70ba				   .
  23884  70ba							; 
  23885  70ba
  23886  70ba				   .
  23887  70ba							; 
  23888  70ba
  23889  70ba				   .
  23890  70ba							; 
  23891  70ba
  23892  70ba				   .
  23893  70ba							; 
  23894  70ba
  23895  70ba				   .__OW_Music
  23896  70ba							; __OW_Music
  23897  70ba
  23898  70ba				   .L01409		;  sdata _OWMusicData = q
  23899  70ba
  23900  70ba		       a9 c5		      lda	#<_OWMusicData_begin
  23901  70bc		       85 e4		      sta	q
  23902  70be		       a9 d0		      lda	#>_OWMusicData_begin
  23903  70c0		       85 e5		      sta	q+1
  23904  70c2		       4c d4 d7 	      JMP	.skipL01409
  23905  70c5				   _OWMusicData_begin
  23906  70c5		       08 04 17 	      .byte.b	8,4,23
  23907  70c8
  23908  70c8		       04 06 0d 	      .byte.b	4,6,13
  23909  70cb
  23910  70cb		       02		      .byte.b	2
  23911  70cc
  23912  70cc		       02 04 17 	      .byte.b	2,4,23
  23913  70cf
  23914  70cf		       01 06 0d 	      .byte.b	1,6,13
  23915  70d2
  23916  70d2		       01		      .byte.b	1
  23917  70d3
  23918  70d3		       08 04 17 	      .byte.b	8,4,23
  23919  70d6
  23920  70d6		       04 06 0d 	      .byte.b	4,6,13
  23921  70d9
  23922  70d9		       03		      .byte.b	3
  23923  70da
  23924  70da		       02 04 17 	      .byte.b	2,4,23
  23925  70dd
  23926  70dd		       01 06 0d 	      .byte.b	1,6,13
  23927  70e0
  23928  70e0		       03		      .byte.b	3
  23929  70e1
  23930  70e1		       08 04 17 	      .byte.b	8,4,23
  23931  70e4
  23932  70e4		       04 06 0d 	      .byte.b	4,6,13
  23933  70e7
  23934  70e7		       03		      .byte.b	3
  23935  70e8
  23936  70e8		       02 04 17 	      .byte.b	2,4,23
  23937  70eb
  23938  70eb		       01 06 0d 	      .byte.b	1,6,13
  23939  70ee
  23940  70ee		       03		      .byte.b	3
  23941  70ef
  23942  70ef		       08 04 1d 	      .byte.b	8,4,29
  23943  70f2
  23944  70f2		       04 06 0d 	      .byte.b	4,6,13
  23945  70f5
  23946  70f5		       03		      .byte.b	3
  23947  70f6
  23948  70f6		       08 04 17 	      .byte.b	8,4,23
  23949  70f9
  23950  70f9		       04 06 0d 	      .byte.b	4,6,13
  23951  70fc
  23952  70fc		       03		      .byte.b	3
  23953  70fd
  23954  70fd		       02 04 17 	      .byte.b	2,4,23
  23955  7100
  23956  7100		       01 06 0d 	      .byte.b	1,6,13
  23957  7103
  23958  7103		       03		      .byte.b	3
  23959  7104
  23960  7104		       08 04 13 	      .byte.b	8,4,19
  23961  7107
  23962  7107		       04 06 14 	      .byte.b	4,6,20
  23963  710a
  23964  710a		       03		      .byte.b	3
  23965  710b
  23966  710b		       02 04 13 	      .byte.b	2,4,19
  23967  710e
  23968  710e		       01 06 14 	      .byte.b	1,6,20
  23969  7111
  23970  7111		       03		      .byte.b	3
  23971  7112
  23972  7112		       00 00 00 	      .byte.b	0,0,0
  23973  7115
  23974  7115		       00 00 00 	      .byte.b	0,0,0
  23975  7118
  23976  7118		       06		      .byte.b	6
  23977  7119
  23978  7119		       08 0c 1a 	      .byte.b	8,12,26
  23979  711c
  23980  711c		       04 06 14 	      .byte.b	4,6,20
  23981  711f
  23982  711f		       03		      .byte.b	3
  23983  7120
  23984  7120		       02 0c 1a 	      .byte.b	2,12,26
  23985  7123
  23986  7123		       01 06 14 	      .byte.b	1,6,20
  23987  7126
  23988  7126		       03		      .byte.b	3
  23989  7127
  23990  7127		       00 00 00 	      .byte.b	0,0,0
  23991  712a
  23992  712a		       00 00 00 	      .byte.b	0,0,0
  23993  712d
  23994  712d		       06		      .byte.b	6
  23995  712e
  23996  712e		       08 04 0e 	      .byte.b	8,4,14
  23997  7131
  23998  7131		       04 0c 1a 	      .byte.b	4,12,26
  23999  7134
  24000  7134		       03		      .byte.b	3
  24001  7135
  24002  7135		       04 04 0e 	      .byte.b	4,4,14
  24003  7138
  24004  7138		       02 0c 1a 	      .byte.b	2,12,26
  24005  713b
  24006  713b		       03		      .byte.b	3
  24007  713c
  24008  713c		       00 00 00 	      .byte.b	0,0,0
  24009  713f
  24010  713f		       00 00 00 	      .byte.b	0,0,0
  24011  7142
  24012  7142		       03		      .byte.b	3
  24013  7143
  24014  7143		       08 04 13 	      .byte.b	8,4,19
  24015  7146
  24016  7146		       04 0c 1f 	      .byte.b	4,12,31
  24017  7149
  24018  7149		       03		      .byte.b	3
  24019  714a
  24020  714a		       04 04 13 	      .byte.b	4,4,19
  24021  714d
  24022  714d		       02 0c 1f 	      .byte.b	2,12,31
  24023  7150
  24024  7150		       03		      .byte.b	3
  24025  7151
  24026  7151		       00 00 00 	      .byte.b	0,0,0
  24027  7154
  24028  7154		       00 00 00 	      .byte.b	0,0,0
  24029  7157
  24030  7157		       03		      .byte.b	3
  24031  7158
  24032  7158		       08 04 17 	      .byte.b	8,4,23
  24033  715b
  24034  715b		       04 01 0f 	      .byte.b	4,1,15
  24035  715e
  24036  715e		       03		      .byte.b	3
  24037  715f
  24038  715f		       04 04 17 	      .byte.b	4,4,23
  24039  7162
  24040  7162		       02 01 0f 	      .byte.b	2,1,15
  24041  7165
  24042  7165		       03		      .byte.b	3
  24043  7166
  24044  7166		       00 00 00 	      .byte.b	0,0,0
  24045  7169
  24046  7169		       00 00 00 	      .byte.b	0,0,0
  24047  716c
  24048  716c		       03		      .byte.b	3
  24049  716d
  24050  716d		       08 04 11 	      .byte.b	8,4,17
  24051  7170
  24052  7170		       04 0c 1d 	      .byte.b	4,12,29
  24053  7173
  24054  7173		       03		      .byte.b	3
  24055  7174
  24056  7174		       04 04 11 	      .byte.b	4,4,17
  24057  7177
  24058  7177		       02 0c 1d 	      .byte.b	2,12,29
  24059  717a
  24060  717a		       03		      .byte.b	3
  24061  717b
  24062  717b		       08 04 0f 	      .byte.b	8,4,15
  24063  717e
  24064  717e		       04 0c 1a 	      .byte.b	4,12,26
  24065  7181
  24066  7181		       03		      .byte.b	3
  24067  7182
  24068  7182		       04 04 0f 	      .byte.b	4,4,15
  24069  7185
  24070  7185		       02 0c 1a 	      .byte.b	2,12,26
  24071  7188
  24072  7188		       03		      .byte.b	3
  24073  7189
  24074  7189		       08 04 10 	      .byte.b	8,4,16
  24075  718c
  24076  718c		       04 0c 1b 	      .byte.b	4,12,27
  24077  718f
  24078  718f		       03		      .byte.b	3
  24079  7190
  24080  7190		       08 04 11 	      .byte.b	8,4,17
  24081  7193
  24082  7193		       04 0c 1d 	      .byte.b	4,12,29
  24083  7196
  24084  7196		       03		      .byte.b	3
  24085  7197
  24086  7197		       04 04 11 	      .byte.b	4,4,17
  24087  719a
  24088  719a		       02 0c 1d 	      .byte.b	2,12,29
  24089  719d
  24090  719d		       03		      .byte.b	3
  24091  719e
  24092  719e		       08 04 13 	      .byte.b	8,4,19
  24093  71a1
  24094  71a1		       04 0c 1f 	      .byte.b	4,12,31
  24095  71a4
  24096  71a4		       04		      .byte.b	4
  24097  71a5
  24098  71a5		       08 04 17 	      .byte.b	8,4,23
  24099  71a8
  24100  71a8		       04 0c 13 	      .byte.b	4,12,19
  24101  71ab
  24102  71ab		       04		      .byte.b	4
  24103  71ac
  24104  71ac		       08 04 13 	      .byte.b	8,4,19
  24105  71af
  24106  71af		       04 0c 0f 	      .byte.b	4,12,15
  24107  71b2
  24108  71b2		       04		      .byte.b	4
  24109  71b3
  24110  71b3		       08 04 11 	      .byte.b	8,4,17
  24111  71b6
  24112  71b6		       04 0c 0e 	      .byte.b	4,12,14
  24113  71b9
  24114  71b9		       03		      .byte.b	3
  24115  71ba
  24116  71ba		       04 04 11 	      .byte.b	4,4,17
  24117  71bd
  24118  71bd		       02 0c 0e 	      .byte.b	2,12,14
  24119  71c0
  24120  71c0		       03		      .byte.b	3
  24121  71c1
  24122  71c1		       08 04 15 	      .byte.b	8,4,21
  24123  71c4
  24124  71c4		       04 0c 11 	      .byte.b	4,12,17
  24125  71c7
  24126  71c7		       03		      .byte.b	3
  24127  71c8
  24128  71c8		       08 04 13 	      .byte.b	8,4,19
  24129  71cb
  24130  71cb		       04 0c 0f 	      .byte.b	4,12,15
  24131  71ce
  24132  71ce		       03		      .byte.b	3
  24133  71cf
  24134  71cf		       04 04 13 	      .byte.b	4,4,19
  24135  71d2
  24136  71d2		       02 0c 0f 	      .byte.b	2,12,15
  24137  71d5
  24138  71d5		       03		      .byte.b	3
  24139  71d6
  24140  71d6		       08 04 17 	      .byte.b	8,4,23
  24141  71d9
  24142  71d9		       04 0c 0b 	      .byte.b	4,12,11
  24143  71dc
  24144  71dc		       03		      .byte.b	3
  24145  71dd
  24146  71dd		       04 04 17 	      .byte.b	4,4,23
  24147  71e0
  24148  71e0		       02 0c 0b 	      .byte.b	2,12,11
  24149  71e3
  24150  71e3		       03		      .byte.b	3
  24151  71e4
  24152  71e4		       08 04 1d 	      .byte.b	8,4,29
  24153  71e7
  24154  71e7		       04 0c 17 	      .byte.b	4,12,23
  24155  71ea
  24156  71ea		       03		      .byte.b	3
  24157  71eb
  24158  71eb		       08 04 1a 	      .byte.b	8,4,26
  24159  71ee
  24160  71ee		       04 0c 14 	      .byte.b	4,12,20
  24161  71f1
  24162  71f1		       03		      .byte.b	3
  24163  71f2
  24164  71f2		       08 04 1f 	      .byte.b	8,4,31
  24165  71f5
  24166  71f5		       04 0c 1a 	      .byte.b	4,12,26
  24167  71f8
  24168  71f8		       03		      .byte.b	3
  24169  71f9
  24170  71f9		       04 04 1f 	      .byte.b	4,4,31
  24171  71fc
  24172  71fc		       02 0c 1a 	      .byte.b	2,12,26
  24173  71ff
  24174  71ff		       03		      .byte.b	3
  24175  7200
  24176  7200		       00 00 00 	      .byte.b	0,0,0
  24177  7203
  24178  7203		       00 00 00 	      .byte.b	0,0,0
  24179  7206
  24180  7206		       03		      .byte.b	3
  24181  7207
  24182  7207		       08 04 1d 	      .byte.b	8,4,29
  24183  720a
  24184  720a		       04 0c 1a 	      .byte.b	4,12,26
  24185  720d
  24186  720d		       03		      .byte.b	3
  24187  720e
  24188  720e		       04 04 1d 	      .byte.b	4,4,29
  24189  7211
  24190  7211		       02 0c 1a 	      .byte.b	2,12,26
  24191  7214
  24192  7214		       03		      .byte.b	3
  24193  7215
  24194  7215		       00 00 00 	      .byte.b	0,0,0
  24195  7218
  24196  7218		       00 00 00 	      .byte.b	0,0,0
  24197  721b
  24198  721b		       03		      .byte.b	3
  24199  721c
  24200  721c		       08 04 13 	      .byte.b	8,4,19
  24201  721f
  24202  721f		       04 0c 1f 	      .byte.b	4,12,31
  24203  7222
  24204  7222		       03		      .byte.b	3
  24205  7223
  24206  7223		       04 04 13 	      .byte.b	4,4,19
  24207  7226
  24208  7226		       02 0c 1f 	      .byte.b	2,12,31
  24209  7229
  24210  7229		       03		      .byte.b	3
  24211  722a
  24212  722a		       00 00 00 	      .byte.b	0,0,0
  24213  722d
  24214  722d		       00 00 00 	      .byte.b	0,0,0
  24215  7230
  24216  7230		       03		      .byte.b	3
  24217  7231
  24218  7231		       08 04 17 	      .byte.b	8,4,23
  24219  7234
  24220  7234		       04 01 0f 	      .byte.b	4,1,15
  24221  7237
  24222  7237		       03		      .byte.b	3
  24223  7238
  24224  7238		       04 04 17 	      .byte.b	4,4,23
  24225  723b
  24226  723b		       02 01 0f 	      .byte.b	2,1,15
  24227  723e
  24228  723e		       03		      .byte.b	3
  24229  723f
  24230  723f		       00 00 00 	      .byte.b	0,0,0
  24231  7242
  24232  7242		       00 00 00 	      .byte.b	0,0,0
  24233  7245
  24234  7245		       03		      .byte.b	3
  24235  7246
  24236  7246		       08 04 11 	      .byte.b	8,4,17
  24237  7249
  24238  7249		       04 0c 1d 	      .byte.b	4,12,29
  24239  724c
  24240  724c		       03		      .byte.b	3
  24241  724d
  24242  724d		       04 04 11 	      .byte.b	4,4,17
  24243  7250
  24244  7250		       02 0c 1d 	      .byte.b	2,12,29
  24245  7253
  24246  7253		       03		      .byte.b	3
  24247  7254
  24248  7254		       08 04 0f 	      .byte.b	8,4,15
  24249  7257
  24250  7257		       04 0c 1a 	      .byte.b	4,12,26
  24251  725a
  24252  725a		       03		      .byte.b	3
  24253  725b
  24254  725b		       04 04 0f 	      .byte.b	4,4,15
  24255  725e
  24256  725e		       02 0c 1a 	      .byte.b	2,12,26
  24257  7261
  24258  7261		       03		      .byte.b	3
  24259  7262
  24260  7262		       08 04 10 	      .byte.b	8,4,16
  24261  7265
  24262  7265		       04 0c 1b 	      .byte.b	4,12,27
  24263  7268
  24264  7268		       03		      .byte.b	3
  24265  7269
  24266  7269		       08 04 11 	      .byte.b	8,4,17
  24267  726c
  24268  726c		       04 0c 1d 	      .byte.b	4,12,29
  24269  726f
  24270  726f		       03		      .byte.b	3
  24271  7270
  24272  7270		       04 04 11 	      .byte.b	4,4,17
  24273  7273
  24274  7273		       02 0c 1d 	      .byte.b	2,12,29
  24275  7276
  24276  7276		       03		      .byte.b	3
  24277  7277
  24278  7277		       08 04 13 	      .byte.b	8,4,19
  24279  727a
  24280  727a		       04 0c 1f 	      .byte.b	4,12,31
  24281  727d
  24282  727d		       04		      .byte.b	4
  24283  727e
  24284  727e		       08 04 17 	      .byte.b	8,4,23
  24285  7281
  24286  7281		       04 0c 13 	      .byte.b	4,12,19
  24287  7284
  24288  7284		       04		      .byte.b	4
  24289  7285
  24290  7285		       08 04 13 	      .byte.b	8,4,19
  24291  7288
  24292  7288		       04 0c 0f 	      .byte.b	4,12,15
  24293  728b
  24294  728b		       04		      .byte.b	4
  24295  728c
  24296  728c		       08 04 11 	      .byte.b	8,4,17
  24297  728f
  24298  728f		       04 0c 0e 	      .byte.b	4,12,14
  24299  7292
  24300  7292		       03		      .byte.b	3
  24301  7293
  24302  7293		       04 04 11 	      .byte.b	4,4,17
  24303  7296
  24304  7296		       02 0c 0e 	      .byte.b	2,12,14
  24305  7299
  24306  7299		       03		      .byte.b	3
  24307  729a
  24308  729a		       08 04 15 	      .byte.b	8,4,21
  24309  729d
  24310  729d		       04 0c 11 	      .byte.b	4,12,17
  24311  72a0
  24312  72a0		       03		      .byte.b	3
  24313  72a1
  24314  72a1		       08 04 13 	      .byte.b	8,4,19
  24315  72a4
  24316  72a4		       04 0c 0f 	      .byte.b	4,12,15
  24317  72a7
  24318  72a7		       03		      .byte.b	3
  24319  72a8
  24320  72a8		       04 04 13 	      .byte.b	4,4,19
  24321  72ab
  24322  72ab		       02 0c 0f 	      .byte.b	2,12,15
  24323  72ae
  24324  72ae		       03		      .byte.b	3
  24325  72af
  24326  72af		       08 04 17 	      .byte.b	8,4,23
  24327  72b2
  24328  72b2		       04 0c 0b 	      .byte.b	4,12,11
  24329  72b5
  24330  72b5		       03		      .byte.b	3
  24331  72b6
  24332  72b6		       04 04 17 	      .byte.b	4,4,23
  24333  72b9
  24334  72b9		       02 0c 0b 	      .byte.b	2,12,11
  24335  72bc
  24336  72bc		       03		      .byte.b	3
  24337  72bd
  24338  72bd		       08 04 1d 	      .byte.b	8,4,29
  24339  72c0
  24340  72c0		       04 0c 17 	      .byte.b	4,12,23
  24341  72c3
  24342  72c3		       03		      .byte.b	3
  24343  72c4
  24344  72c4		       08 04 1a 	      .byte.b	8,4,26
  24345  72c7
  24346  72c7		       04 0c 14 	      .byte.b	4,12,20
  24347  72ca
  24348  72ca		       03		      .byte.b	3
  24349  72cb
  24350  72cb		       08 04 1f 	      .byte.b	8,4,31
  24351  72ce
  24352  72ce		       04 0c 1a 	      .byte.b	4,12,26
  24353  72d1
  24354  72d1		       03		      .byte.b	3
  24355  72d2
  24356  72d2		       04 04 1f 	      .byte.b	4,4,31
  24357  72d5
  24358  72d5		       02 0c 1a 	      .byte.b	2,12,26
  24359  72d8
  24360  72d8		       03		      .byte.b	3
  24361  72d9
  24362  72d9		       00 00 00 	      .byte.b	0,0,0
  24363  72dc
  24364  72dc		       04 01 1f 	      .byte.b	4,1,31
  24365  72df
  24366  72df		       03		      .byte.b	3
  24367  72e0
  24368  72e0		       00 00 00 	      .byte.b	0,0,0
  24369  72e3
  24370  72e3		       02 01 1f 	      .byte.b	2,1,31
  24371  72e6
  24372  72e6		       03		      .byte.b	3
  24373  72e7
  24374  72e7		       08 04 13 	      .byte.b	8,4,19
  24375  72ea
  24376  72ea		       04 04 17 	      .byte.b	4,4,23
  24377  72ed
  24378  72ed		       03		      .byte.b	3
  24379  72ee
  24380  72ee		       08 04 14 	      .byte.b	8,4,20
  24381  72f1
  24382  72f1		       04 0c 1f 	      .byte.b	4,12,31
  24383  72f4
  24384  72f4		       03		      .byte.b	3
  24385  72f5
  24386  72f5		       08 04 15 	      .byte.b	8,4,21
  24387  72f8
  24388  72f8		       04 04 1a 	      .byte.b	4,4,26
  24389  72fb
  24390  72fb		       03		      .byte.b	3
  24391  72fc
  24392  72fc		       08 04 18 	      .byte.b	8,4,24
  24393  72ff
  24394  72ff		       04 04 1f 	      .byte.b	4,4,31
  24395  7302
  24396  7302		       03		      .byte.b	3
  24397  7303
  24398  7303		       04 04 18 	      .byte.b	4,4,24
  24399  7306
  24400  7306		       04 0c 13 	      .byte.b	4,12,19
  24401  7309
  24402  7309		       03		      .byte.b	3
  24403  730a
  24404  730a		       08 04 17 	      .byte.b	8,4,23
  24405  730d
  24406  730d		       02 0c 13 	      .byte.b	2,12,19
  24407  7310
  24408  7310		       03		      .byte.b	3
  24409  7311
  24410  7311		       04 04 17 	      .byte.b	4,4,23
  24411  7314
  24412  7314		       04 0c 1d 	      .byte.b	4,12,29
  24413  7317
  24414  7317		       03		      .byte.b	3
  24415  7318
  24416  7318		       04 01 04 	      .byte.b	4,1,4
  24417  731b
  24418  731b		       02 0c 1d 	      .byte.b	2,12,29
  24419  731e
  24420  731e		       03		      .byte.b	3
  24421  731f
  24422  731f		       08 0c 0b 	      .byte.b	8,12,11
  24423  7322
  24424  7322		       04 0c 0e 	      .byte.b	4,12,14
  24425  7325
  24426  7325		       03		      .byte.b	3
  24427  7326
  24428  7326		       08 04 1d 	      .byte.b	8,4,29
  24429  7329
  24430  7329		       04 0c 13 	      .byte.b	4,12,19
  24431  732c
  24432  732c		       03		      .byte.b	3
  24433  732d
  24434  732d		       04 04 1d 	      .byte.b	4,4,29
  24435  7330
  24436  7330		       04 0c 13 	      .byte.b	4,12,19
  24437  7333
  24438  7333		       03		      .byte.b	3
  24439  7334
  24440  7334		       08 0c 0b 	      .byte.b	8,12,11
  24441  7337
  24442  7337		       04 0c 13 	      .byte.b	4,12,19
  24443  733a
  24444  733a		       03		      .byte.b	3
  24445  733b
  24446  733b		       08 04 1d 	      .byte.b	8,4,29
  24447  733e
  24448  733e		       04 0c 1d 	      .byte.b	4,12,29
  24449  7341
  24450  7341		       03		      .byte.b	3
  24451  7342
  24452  7342		       08 04 1a 	      .byte.b	8,4,26
  24453  7345
  24454  7345		       04 0c 1d 	      .byte.b	4,12,29
  24455  7348
  24456  7348		       03		      .byte.b	3
  24457  7349
  24458  7349		       00 00 00 	      .byte.b	0,0,0
  24459  734c
  24460  734c		       04 01 1f 	      .byte.b	4,1,31
  24461  734f
  24462  734f		       03		      .byte.b	3
  24463  7350
  24464  7350		       00 00 00 	      .byte.b	0,0,0
  24465  7353
  24466  7353		       02 01 1f 	      .byte.b	2,1,31
  24467  7356
  24468  7356		       03		      .byte.b	3
  24469  7357
  24470  7357		       08 04 13 	      .byte.b	8,4,19
  24471  735a
  24472  735a		       04 04 17 	      .byte.b	4,4,23
  24473  735d
  24474  735d		       03		      .byte.b	3
  24475  735e
  24476  735e		       08 04 14 	      .byte.b	8,4,20
  24477  7361
  24478  7361		       04 0c 1f 	      .byte.b	4,12,31
  24479  7364
  24480  7364		       03		      .byte.b	3
  24481  7365
  24482  7365		       08 04 15 	      .byte.b	8,4,21
  24483  7368
  24484  7368		       04 04 1a 	      .byte.b	4,4,26
  24485  736b
  24486  736b		       03		      .byte.b	3
  24487  736c
  24488  736c		       08 04 18 	      .byte.b	8,4,24
  24489  736f
  24490  736f		       04 04 1f 	      .byte.b	4,4,31
  24491  7372
  24492  7372		       03		      .byte.b	3
  24493  7373
  24494  7373		       04 04 18 	      .byte.b	4,4,24
  24495  7376
  24496  7376		       04 0c 1a 	      .byte.b	4,12,26
  24497  7379
  24498  7379		       03		      .byte.b	3
  24499  737a
  24500  737a		       08 04 17 	      .byte.b	8,4,23
  24501  737d
  24502  737d		       04 0c 13 	      .byte.b	4,12,19
  24503  7380
  24504  7380		       03		      .byte.b	3
  24505  7381
  24506  7381		       04 04 17 	      .byte.b	4,4,23
  24507  7384
  24508  7384		       02 0c 13 	      .byte.b	2,12,19
  24509  7387
  24510  7387		       03		      .byte.b	3
  24511  7388
  24512  7388		       08 04 0e 	      .byte.b	8,4,14
  24513  738b
  24514  738b		       08 04 15 	      .byte.b	8,4,21
  24515  738e
  24516  738e		       03		      .byte.b	3
  24517  738f
  24518  738f		       04 04 0e 	      .byte.b	4,4,14
  24519  7392
  24520  7392		       04 04 15 	      .byte.b	4,4,21
  24521  7395
  24522  7395		       03		      .byte.b	3
  24523  7396
  24524  7396		       08 04 0e 	      .byte.b	8,4,14
  24525  7399
  24526  7399		       08 04 15 	      .byte.b	8,4,21
  24527  739c
  24528  739c		       02		      .byte.b	2
  24529  739d
  24530  739d		       04 04 0e 	      .byte.b	4,4,14
  24531  73a0
  24532  73a0		       04 04 15 	      .byte.b	4,4,21
  24533  73a3
  24534  73a3		       01		      .byte.b	1
  24535  73a4
  24536  73a4		       08 04 0e 	      .byte.b	8,4,14
  24537  73a7
  24538  73a7		       08 04 15 	      .byte.b	8,4,21
  24539  73aa
  24540  73aa		       03		      .byte.b	3
  24541  73ab
  24542  73ab		       04 04 0e 	      .byte.b	4,4,14
  24543  73ae
  24544  73ae		       04 04 15 	      .byte.b	4,4,21
  24545  73b1
  24546  73b1		       03		      .byte.b	3
  24547  73b2
  24548  73b2		       00 00 00 	      .byte.b	0,0,0
  24549  73b5
  24550  73b5		       04 0c 1a 	      .byte.b	4,12,26
  24551  73b8
  24552  73b8		       03		      .byte.b	3
  24553  73b9
  24554  73b9		       00 00 00 	      .byte.b	0,0,0
  24555  73bc
  24556  73bc		       02 0c 1a 	      .byte.b	2,12,26
  24557  73bf
  24558  73bf		       03		      .byte.b	3
  24559  73c0
  24560  73c0		       00 00 00 	      .byte.b	0,0,0
  24561  73c3
  24562  73c3		       04 01 1f 	      .byte.b	4,1,31
  24563  73c6
  24564  73c6		       03		      .byte.b	3
  24565  73c7
  24566  73c7		       00 00 00 	      .byte.b	0,0,0
  24567  73ca
  24568  73ca		       02 01 1f 	      .byte.b	2,1,31
  24569  73cd
  24570  73cd		       03		      .byte.b	3
  24571  73ce
  24572  73ce		       08 04 13 	      .byte.b	8,4,19
  24573  73d1
  24574  73d1		       04 04 17 	      .byte.b	4,4,23
  24575  73d4
  24576  73d4		       03		      .byte.b	3
  24577  73d5
  24578  73d5		       08 04 14 	      .byte.b	8,4,20
  24579  73d8
  24580  73d8		       04 0c 1f 	      .byte.b	4,12,31
  24581  73db
  24582  73db		       03		      .byte.b	3
  24583  73dc
  24584  73dc		       08 04 15 	      .byte.b	8,4,21
  24585  73df
  24586  73df		       04 04 1a 	      .byte.b	4,4,26
  24587  73e2
  24588  73e2		       03		      .byte.b	3
  24589  73e3
  24590  73e3		       08 04 18 	      .byte.b	8,4,24
  24591  73e6
  24592  73e6		       04 04 1f 	      .byte.b	4,4,31
  24593  73e9
  24594  73e9		       03		      .byte.b	3
  24595  73ea
  24596  73ea		       04 04 18 	      .byte.b	4,4,24
  24597  73ed
  24598  73ed		       04 0c 13 	      .byte.b	4,12,19
  24599  73f0
  24600  73f0		       03		      .byte.b	3
  24601  73f1
  24602  73f1		       08 04 17 	      .byte.b	8,4,23
  24603  73f4
  24604  73f4		       02 0c 13 	      .byte.b	2,12,19
  24605  73f7
  24606  73f7		       03		      .byte.b	3
  24607  73f8
  24608  73f8		       04 04 17 	      .byte.b	4,4,23
  24609  73fb
  24610  73fb		       04 0c 1d 	      .byte.b	4,12,29
  24611  73fe
  24612  73fe		       03		      .byte.b	3
  24613  73ff
  24614  73ff		       04 01 04 	      .byte.b	4,1,4
  24615  7402
  24616  7402		       02 0c 1d 	      .byte.b	2,12,29
  24617  7405
  24618  7405		       03		      .byte.b	3
  24619  7406
  24620  7406		       08 0c 0b 	      .byte.b	8,12,11
  24621  7409
  24622  7409		       04 0c 0e 	      .byte.b	4,12,14
  24623  740c
  24624  740c		       03		      .byte.b	3
  24625  740d
  24626  740d		       08 04 1d 	      .byte.b	8,4,29
  24627  7410
  24628  7410		       04 0c 13 	      .byte.b	4,12,19
  24629  7413
  24630  7413		       03		      .byte.b	3
  24631  7414
  24632  7414		       04 04 1d 	      .byte.b	4,4,29
  24633  7417
  24634  7417		       04 0c 13 	      .byte.b	4,12,19
  24635  741a
  24636  741a		       03		      .byte.b	3
  24637  741b
  24638  741b		       08 0c 0b 	      .byte.b	8,12,11
  24639  741e
  24640  741e		       04 0c 13 	      .byte.b	4,12,19
  24641  7421
  24642  7421		       03		      .byte.b	3
  24643  7422
  24644  7422		       08 04 1d 	      .byte.b	8,4,29
  24645  7425
  24646  7425		       04 0c 1d 	      .byte.b	4,12,29
  24647  7428
  24648  7428		       03		      .byte.b	3
  24649  7429
  24650  7429		       08 04 1a 	      .byte.b	8,4,26
  24651  742c
  24652  742c		       04 0c 1d 	      .byte.b	4,12,29
  24653  742f
  24654  742f		       03		      .byte.b	3
  24655  7430
  24656  7430		       00 00 00 	      .byte.b	0,0,0
  24657  7433
  24658  7433		       04 01 1f 	      .byte.b	4,1,31
  24659  7436
  24660  7436		       03		      .byte.b	3
  24661  7437
  24662  7437		       00 00 00 	      .byte.b	0,0,0
  24663  743a
  24664  743a		       02 01 1f 	      .byte.b	2,1,31
  24665  743d
  24666  743d		       03		      .byte.b	3
  24667  743e
  24668  743e		       08 04 18 	      .byte.b	8,4,24
  24669  7441
  24670  7441		       04 01 13 	      .byte.b	4,1,19
  24671  7444
  24672  7444		       03		      .byte.b	3
  24673  7445
  24674  7445		       04 04 18 	      .byte.b	4,4,24
  24675  7448
  24676  7448		       02 01 13 	      .byte.b	2,1,19
  24677  744b
  24678  744b		       03		      .byte.b	3
  24679  744c
  24680  744c		       00 00 00 	      .byte.b	0,0,0
  24681  744f
  24682  744f		       00 00 00 	      .byte.b	0,0,0
  24683  7452
  24684  7452		       03		      .byte.b	3
  24685  7453
  24686  7453		       08 04 1a 	      .byte.b	8,4,26
  24687  7456
  24688  7456		       04 01 11 	      .byte.b	4,1,17
  24689  7459
  24690  7459		       03		      .byte.b	3
  24691  745a
  24692  745a		       04 04 1a 	      .byte.b	4,4,26
  24693  745d
  24694  745d		       02 01 11 	      .byte.b	2,1,17
  24695  7460
  24696  7460		       03		      .byte.b	3
  24697  7461
  24698  7461		       00 00 00 	      .byte.b	0,0,0
  24699  7464
  24700  7464		       00 00 00 	      .byte.b	0,0,0
  24701  7467
  24702  7467		       03		      .byte.b	3
  24703  7468
  24704  7468		       08 04 1d 	      .byte.b	8,4,29
  24705  746b
  24706  746b		       04 01 0f 	      .byte.b	4,1,15
  24707  746e
  24708  746e		       03		      .byte.b	3
  24709  746f
  24710  746f		       04 04 1d 	      .byte.b	4,4,29
  24711  7472
  24712  7472		       02 01 0f 	      .byte.b	2,1,15
  24713  7475
  24714  7475		       03		      .byte.b	3
  24715  7476
  24716  7476		       00 00 00 	      .byte.b	0,0,0
  24717  7479
  24718  7479		       00 00 00 	      .byte.b	0,0,0
  24719  747c
  24720  747c		       03		      .byte.b	3
  24721  747d
  24722  747d		       00 00 00 	      .byte.b	0,0,0
  24723  7480
  24724  7480		       04 0c 1a 	      .byte.b	4,12,26
  24725  7483
  24726  7483		       02		      .byte.b	2
  24727  7484
  24728  7484		       00 00 00 	      .byte.b	0,0,0
  24729  7487
  24730  7487		       02 0c 1a 	      .byte.b	2,12,26
  24731  748a
  24732  748a		       01		      .byte.b	1
  24733  748b
  24734  748b		       00 00 00 	      .byte.b	0,0,0
  24735  748e
  24736  748e		       04 0c 1a 	      .byte.b	4,12,26
  24737  7491
  24738  7491		       03		      .byte.b	3
  24739  7492
  24740  7492		       00 00 00 	      .byte.b	0,0,0
  24741  7495
  24742  7495		       02 0c 1a 	      .byte.b	2,12,26
  24743  7498
  24744  7498		       03		      .byte.b	3
  24745  7499
  24746  7499		       00 00 00 	      .byte.b	0,0,0
  24747  749c
  24748  749c		       04 01 1f 	      .byte.b	4,1,31
  24749  749f
  24750  749f		       03		      .byte.b	3
  24751  74a0
  24752  74a0		       00 00 00 	      .byte.b	0,0,0
  24753  74a3
  24754  74a3		       02 01 1f 	      .byte.b	2,1,31
  24755  74a6
  24756  74a6		       03		      .byte.b	3
  24757  74a7
  24758  74a7		       00 00 00 	      .byte.b	0,0,0
  24759  74aa
  24760  74aa		       04 01 1f 	      .byte.b	4,1,31
  24761  74ad
  24762  74ad		       03		      .byte.b	3
  24763  74ae
  24764  74ae		       00 00 00 	      .byte.b	0,0,0
  24765  74b1
  24766  74b1		       02 01 1f 	      .byte.b	2,1,31
  24767  74b4
  24768  74b4		       03		      .byte.b	3
  24769  74b5
  24770  74b5		       08 04 13 	      .byte.b	8,4,19
  24771  74b8
  24772  74b8		       04 04 17 	      .byte.b	4,4,23
  24773  74bb
  24774  74bb		       03		      .byte.b	3
  24775  74bc
  24776  74bc		       08 04 14 	      .byte.b	8,4,20
  24777  74bf
  24778  74bf		       04 0c 1f 	      .byte.b	4,12,31
  24779  74c2
  24780  74c2		       03		      .byte.b	3
  24781  74c3
  24782  74c3		       08 04 15 	      .byte.b	8,4,21
  24783  74c6
  24784  74c6		       04 04 1a 	      .byte.b	4,4,26
  24785  74c9
  24786  74c9		       03		      .byte.b	3
  24787  74ca
  24788  74ca		       08 04 18 	      .byte.b	8,4,24
  24789  74cd
  24790  74cd		       04 04 1f 	      .byte.b	4,4,31
  24791  74d0
  24792  74d0		       03		      .byte.b	3
  24793  74d1
  24794  74d1		       04 04 18 	      .byte.b	4,4,24
  24795  74d4
  24796  74d4		       04 0c 13 	      .byte.b	4,12,19
  24797  74d7
  24798  74d7		       03		      .byte.b	3
  24799  74d8
  24800  74d8		       08 04 17 	      .byte.b	8,4,23
  24801  74db
  24802  74db		       02 0c 13 	      .byte.b	2,12,19
  24803  74de
  24804  74de		       03		      .byte.b	3
  24805  74df
  24806  74df		       04 04 17 	      .byte.b	4,4,23
  24807  74e2
  24808  74e2		       04 0c 1d 	      .byte.b	4,12,29
  24809  74e5
  24810  74e5		       03		      .byte.b	3
  24811  74e6
  24812  74e6		       04 01 04 	      .byte.b	4,1,4
  24813  74e9
  24814  74e9		       02 0c 1d 	      .byte.b	2,12,29
  24815  74ec
  24816  74ec		       03		      .byte.b	3
  24817  74ed
  24818  74ed		       08 0c 0b 	      .byte.b	8,12,11
  24819  74f0
  24820  74f0		       04 0c 0e 	      .byte.b	4,12,14
  24821  74f3
  24822  74f3		       03		      .byte.b	3
  24823  74f4
  24824  74f4		       08 04 1d 	      .byte.b	8,4,29
  24825  74f7
  24826  74f7		       04 0c 13 	      .byte.b	4,12,19
  24827  74fa
  24828  74fa		       03		      .byte.b	3
  24829  74fb
  24830  74fb		       04 04 1d 	      .byte.b	4,4,29
  24831  74fe
  24832  74fe		       04 0c 13 	      .byte.b	4,12,19
  24833  7501
  24834  7501		       03		      .byte.b	3
  24835  7502
  24836  7502		       08 0c 0b 	      .byte.b	8,12,11
  24837  7505
  24838  7505		       04 0c 13 	      .byte.b	4,12,19
  24839  7508
  24840  7508		       03		      .byte.b	3
  24841  7509
  24842  7509		       08 04 1d 	      .byte.b	8,4,29
  24843  750c
  24844  750c		       04 0c 1d 	      .byte.b	4,12,29
  24845  750f
  24846  750f		       03		      .byte.b	3
  24847  7510
  24848  7510		       08 04 1a 	      .byte.b	8,4,26
  24849  7513
  24850  7513		       04 0c 1d 	      .byte.b	4,12,29
  24851  7516
  24852  7516		       03		      .byte.b	3
  24853  7517
  24854  7517		       00 00 00 	      .byte.b	0,0,0
  24855  751a
  24856  751a		       04 01 1f 	      .byte.b	4,1,31
  24857  751d
  24858  751d		       03		      .byte.b	3
  24859  751e
  24860  751e		       00 00 00 	      .byte.b	0,0,0
  24861  7521
  24862  7521		       02 01 1f 	      .byte.b	2,1,31
  24863  7524
  24864  7524		       03		      .byte.b	3
  24865  7525
  24866  7525		       08 04 13 	      .byte.b	8,4,19
  24867  7528
  24868  7528		       04 04 17 	      .byte.b	4,4,23
  24869  752b
  24870  752b		       03		      .byte.b	3
  24871  752c
  24872  752c		       08 04 14 	      .byte.b	8,4,20
  24873  752f
  24874  752f		       04 0c 1f 	      .byte.b	4,12,31
  24875  7532
  24876  7532		       03		      .byte.b	3
  24877  7533
  24878  7533		       08 04 15 	      .byte.b	8,4,21
  24879  7536
  24880  7536		       04 04 1a 	      .byte.b	4,4,26
  24881  7539
  24882  7539		       03		      .byte.b	3
  24883  753a
  24884  753a		       08 04 18 	      .byte.b	8,4,24
  24885  753d
  24886  753d		       04 04 1f 	      .byte.b	4,4,31
  24887  7540
  24888  7540		       03		      .byte.b	3
  24889  7541
  24890  7541		       04 04 18 	      .byte.b	4,4,24
  24891  7544
  24892  7544		       04 0c 1a 	      .byte.b	4,12,26
  24893  7547
  24894  7547		       03		      .byte.b	3
  24895  7548
  24896  7548		       08 04 17 	      .byte.b	8,4,23
  24897  754b
  24898  754b		       04 0c 13 	      .byte.b	4,12,19
  24899  754e
  24900  754e		       03		      .byte.b	3
  24901  754f
  24902  754f		       04 04 17 	      .byte.b	4,4,23
  24903  7552
  24904  7552		       02 0c 13 	      .byte.b	2,12,19
  24905  7555
  24906  7555		       03		      .byte.b	3
  24907  7556
  24908  7556		       08 04 0e 	      .byte.b	8,4,14
  24909  7559
  24910  7559		       08 04 15 	      .byte.b	8,4,21
  24911  755c
  24912  755c		       03		      .byte.b	3
  24913  755d
  24914  755d		       04 04 0e 	      .byte.b	4,4,14
  24915  7560
  24916  7560		       04 04 15 	      .byte.b	4,4,21
  24917  7563
  24918  7563		       03		      .byte.b	3
  24919  7564
  24920  7564		       08 04 0e 	      .byte.b	8,4,14
  24921  7567
  24922  7567		       08 04 15 	      .byte.b	8,4,21
  24923  756a
  24924  756a		       02		      .byte.b	2
  24925  756b
  24926  756b		       04 04 0e 	      .byte.b	4,4,14
  24927  756e
  24928  756e		       04 04 15 	      .byte.b	4,4,21
  24929  7571
  24930  7571		       01		      .byte.b	1
  24931  7572
  24932  7572		       08 04 0e 	      .byte.b	8,4,14
  24933  7575
  24934  7575		       08 04 15 	      .byte.b	8,4,21
  24935  7578
  24936  7578		       03		      .byte.b	3
  24937  7579
  24938  7579		       04 04 0e 	      .byte.b	4,4,14
  24939  757c
  24940  757c		       04 04 15 	      .byte.b	4,4,21
  24941  757f
  24942  757f		       03		      .byte.b	3
  24943  7580
  24944  7580		       00 00 00 	      .byte.b	0,0,0
  24945  7583
  24946  7583		       04 0c 1a 	      .byte.b	4,12,26
  24947  7586
  24948  7586		       03		      .byte.b	3
  24949  7587
  24950  7587		       00 00 00 	      .byte.b	0,0,0
  24951  758a
  24952  758a		       02 0c 1a 	      .byte.b	2,12,26
  24953  758d
  24954  758d		       03		      .byte.b	3
  24955  758e
  24956  758e		       00 00 00 	      .byte.b	0,0,0
  24957  7591
  24958  7591		       04 01 1f 	      .byte.b	4,1,31
  24959  7594
  24960  7594		       03		      .byte.b	3
  24961  7595
  24962  7595		       00 00 00 	      .byte.b	0,0,0
  24963  7598
  24964  7598		       02 01 1f 	      .byte.b	2,1,31
  24965  759b
  24966  759b		       03		      .byte.b	3
  24967  759c
  24968  759c		       08 04 13 	      .byte.b	8,4,19
  24969  759f
  24970  759f		       04 04 17 	      .byte.b	4,4,23
  24971  75a2
  24972  75a2		       03		      .byte.b	3
  24973  75a3
  24974  75a3		       08 04 14 	      .byte.b	8,4,20
  24975  75a6
  24976  75a6		       04 0c 1f 	      .byte.b	4,12,31
  24977  75a9
  24978  75a9		       03		      .byte.b	3
  24979  75aa
  24980  75aa		       08 04 15 	      .byte.b	8,4,21
  24981  75ad
  24982  75ad		       04 04 1a 	      .byte.b	4,4,26
  24983  75b0
  24984  75b0		       03		      .byte.b	3
  24985  75b1
  24986  75b1		       08 04 18 	      .byte.b	8,4,24
  24987  75b4
  24988  75b4		       04 04 1f 	      .byte.b	4,4,31
  24989  75b7
  24990  75b7		       03		      .byte.b	3
  24991  75b8
  24992  75b8		       04 04 18 	      .byte.b	4,4,24
  24993  75bb
  24994  75bb		       04 0c 13 	      .byte.b	4,12,19
  24995  75be
  24996  75be		       03		      .byte.b	3
  24997  75bf
  24998  75bf		       08 04 17 	      .byte.b	8,4,23
  24999  75c2
  25000  75c2		       02 0c 13 	      .byte.b	2,12,19
  25001  75c5
  25002  75c5		       03		      .byte.b	3
  25003  75c6
  25004  75c6		       04 04 17 	      .byte.b	4,4,23
  25005  75c9
  25006  75c9		       04 0c 1d 	      .byte.b	4,12,29
  25007  75cc
  25008  75cc		       03		      .byte.b	3
  25009  75cd
  25010  75cd		       04 01 04 	      .byte.b	4,1,4
  25011  75d0
  25012  75d0		       02 0c 1d 	      .byte.b	2,12,29
  25013  75d3
  25014  75d3		       03		      .byte.b	3
  25015  75d4
  25016  75d4		       08 0c 0b 	      .byte.b	8,12,11
  25017  75d7
  25018  75d7		       04 0c 0e 	      .byte.b	4,12,14
  25019  75da
  25020  75da		       03		      .byte.b	3
  25021  75db
  25022  75db		       08 04 1d 	      .byte.b	8,4,29
  25023  75de
  25024  75de		       04 0c 13 	      .byte.b	4,12,19
  25025  75e1
  25026  75e1		       03		      .byte.b	3
  25027  75e2
  25028  75e2		       04 04 1d 	      .byte.b	4,4,29
  25029  75e5
  25030  75e5		       04 0c 13 	      .byte.b	4,12,19
  25031  75e8
  25032  75e8		       03		      .byte.b	3
  25033  75e9
  25034  75e9		       08 0c 0b 	      .byte.b	8,12,11
  25035  75ec
  25036  75ec		       04 0c 13 	      .byte.b	4,12,19
  25037  75ef
  25038  75ef		       03		      .byte.b	3
  25039  75f0
  25040  75f0		       08 04 1d 	      .byte.b	8,4,29
  25041  75f3
  25042  75f3		       04 0c 1d 	      .byte.b	4,12,29
  25043  75f6
  25044  75f6		       03		      .byte.b	3
  25045  75f7
  25046  75f7		       08 04 1a 	      .byte.b	8,4,26
  25047  75fa
  25048  75fa		       04 0c 1d 	      .byte.b	4,12,29
  25049  75fd
  25050  75fd		       03		      .byte.b	3
  25051  75fe
  25052  75fe		       00 00 00 	      .byte.b	0,0,0
  25053  7601
  25054  7601		       04 01 1f 	      .byte.b	4,1,31
  25055  7604
  25056  7604		       03		      .byte.b	3
  25057  7605
  25058  7605		       00 00 00 	      .byte.b	0,0,0
  25059  7608
  25060  7608		       02 01 1f 	      .byte.b	2,1,31
  25061  760b
  25062  760b		       03		      .byte.b	3
  25063  760c
  25064  760c		       08 04 18 	      .byte.b	8,4,24
  25065  760f
  25066  760f		       04 01 13 	      .byte.b	4,1,19
  25067  7612
  25068  7612		       03		      .byte.b	3
  25069  7613
  25070  7613		       04 04 18 	      .byte.b	4,4,24
  25071  7616
  25072  7616		       02 01 13 	      .byte.b	2,1,19
  25073  7619
  25074  7619		       03		      .byte.b	3
  25075  761a
  25076  761a		       00 00 00 	      .byte.b	0,0,0
  25077  761d
  25078  761d		       00 00 00 	      .byte.b	0,0,0
  25079  7620
  25080  7620		       03		      .byte.b	3
  25081  7621
  25082  7621		       08 04 1a 	      .byte.b	8,4,26
  25083  7624
  25084  7624		       04 01 11 	      .byte.b	4,1,17
  25085  7627
  25086  7627		       03		      .byte.b	3
  25087  7628
  25088  7628		       04 04 1a 	      .byte.b	4,4,26
  25089  762b
  25090  762b		       02 01 11 	      .byte.b	2,1,17
  25091  762e
  25092  762e		       03		      .byte.b	3
  25093  762f
  25094  762f		       00 00 00 	      .byte.b	0,0,0
  25095  7632
  25096  7632		       00 00 00 	      .byte.b	0,0,0
  25097  7635
  25098  7635		       03		      .byte.b	3
  25099  7636
  25100  7636		       08 04 1d 	      .byte.b	8,4,29
  25101  7639
  25102  7639		       04 01 0f 	      .byte.b	4,1,15
  25103  763c
  25104  763c		       03		      .byte.b	3
  25105  763d
  25106  763d		       04 04 1d 	      .byte.b	4,4,29
  25107  7640
  25108  7640		       02 01 0f 	      .byte.b	2,1,15
  25109  7643
  25110  7643		       03		      .byte.b	3
  25111  7644
  25112  7644		       00 00 00 	      .byte.b	0,0,0
  25113  7647
  25114  7647		       00 00 00 	      .byte.b	0,0,0
  25115  764a
  25116  764a		       03		      .byte.b	3
  25117  764b
  25118  764b		       00 00 00 	      .byte.b	0,0,0
  25119  764e
  25120  764e		       04 0c 1a 	      .byte.b	4,12,26
  25121  7651
  25122  7651		       02		      .byte.b	2
  25123  7652
  25124  7652		       00 00 00 	      .byte.b	0,0,0
  25125  7655
  25126  7655		       02 0c 1a 	      .byte.b	2,12,26
  25127  7658
  25128  7658		       01		      .byte.b	1
  25129  7659
  25130  7659		       00 00 00 	      .byte.b	0,0,0
  25131  765c
  25132  765c		       04 0c 1a 	      .byte.b	4,12,26
  25133  765f
  25134  765f		       03		      .byte.b	3
  25135  7660
  25136  7660		       00 00 00 	      .byte.b	0,0,0
  25137  7663
  25138  7663		       02 0c 1a 	      .byte.b	2,12,26
  25139  7666
  25140  7666		       03		      .byte.b	3
  25141  7667
  25142  7667		       00 00 00 	      .byte.b	0,0,0
  25143  766a
  25144  766a		       04 01 1f 	      .byte.b	4,1,31
  25145  766d
  25146  766d		       03		      .byte.b	3
  25147  766e
  25148  766e		       00 00 00 	      .byte.b	0,0,0
  25149  7671
  25150  7671		       02 01 1f 	      .byte.b	2,1,31
  25151  7674
  25152  7674		       03		      .byte.b	3
  25153  7675
  25154  7675		       08 04 1d 	      .byte.b	8,4,29
  25155  7678
  25156  7678		       03 01 09 	      .byte.b	3,1,9
  25157  767b
  25158  767b		       02		      .byte.b	2
  25159  767c
  25160  767c		       04 04 1d 	      .byte.b	4,4,29
  25161  767f
  25162  767f		       01 01 09 	      .byte.b	1,1,9
  25163  7682
  25164  7682		       01		      .byte.b	1
  25165  7683
  25166  7683		       08 04 1d 	      .byte.b	8,4,29
  25167  7686
  25168  7686		       03 01 09 	      .byte.b	3,1,9
  25169  7689
  25170  7689		       03		      .byte.b	3
  25171  768a
  25172  768a		       04 04 1d 	      .byte.b	4,4,29
  25173  768d
  25174  768d		       01 01 09 	      .byte.b	1,1,9
  25175  7690
  25176  7690		       03		      .byte.b	3
  25177  7691
  25178  7691		       08 04 1d 	      .byte.b	8,4,29
  25179  7694
  25180  7694		       03 01 09 	      .byte.b	3,1,9
  25181  7697
  25182  7697		       03		      .byte.b	3
  25183  7698
  25184  7698		       04 04 1d 	      .byte.b	4,4,29
  25185  769b
  25186  769b		       01 01 09 	      .byte.b	1,1,9
  25187  769e
  25188  769e		       03		      .byte.b	3
  25189  769f
  25190  769f		       08 04 1d 	      .byte.b	8,4,29
  25191  76a2
  25192  76a2		       03 01 09 	      .byte.b	3,1,9
  25193  76a5
  25194  76a5		       03		      .byte.b	3
  25195  76a6
  25196  76a6		       08 04 1a 	      .byte.b	8,4,26
  25197  76a9
  25198  76a9		       04 0c 18 	      .byte.b	4,12,24
  25199  76ac
  25200  76ac		       03		      .byte.b	3
  25201  76ad
  25202  76ad		       04 04 1a 	      .byte.b	4,4,26
  25203  76b0
  25204  76b0		       02 0c 18 	      .byte.b	2,12,24
  25205  76b3
  25206  76b3		       03		      .byte.b	3
  25207  76b4
  25208  76b4		       08 04 17 	      .byte.b	8,4,23
  25209  76b7
  25210  76b7		       04 0c 1a 	      .byte.b	4,12,26
  25211  76ba
  25212  76ba		       03		      .byte.b	3
  25213  76bb
  25214  76bb		       08 04 1d 	      .byte.b	8,4,29
  25215  76be
  25216  76be		       04 0c 0f 	      .byte.b	4,12,15
  25217  76c1
  25218  76c1		       03		      .byte.b	3
  25219  76c2
  25220  76c2		       04 04 1d 	      .byte.b	4,4,29
  25221  76c5
  25222  76c5		       02 0c 0f 	      .byte.b	2,12,15
  25223  76c8
  25224  76c8		       03		      .byte.b	3
  25225  76c9
  25226  76c9		       08 0c 0b 	      .byte.b	8,12,11
  25227  76cc
  25228  76cc		       04 01 1f 	      .byte.b	4,1,31
  25229  76cf
  25230  76cf		       03		      .byte.b	3
  25231  76d0
  25232  76d0		       08 0c 1a 	      .byte.b	8,12,26
  25233  76d3
  25234  76d3		       04 0c 13 	      .byte.b	4,12,19
  25235  76d6
  25236  76d6		       03		      .byte.b	3
  25237  76d7
  25238  76d7		       04 0c 1a 	      .byte.b	4,12,26
  25239  76da
  25240  76da		       02 0c 13 	      .byte.b	2,12,19
  25241  76dd
  25242  76dd		       03		      .byte.b	3
  25243  76de
  25244  76de		       00 00 00 	      .byte.b	0,0,0
  25245  76e1
  25246  76e1		       04 06 14 	      .byte.b	4,6,20
  25247  76e4
  25248  76e4		       03		      .byte.b	3
  25249  76e5
  25250  76e5		       00 00 00 	      .byte.b	0,0,0
  25251  76e8
  25252  76e8		       02 06 14 	      .byte.b	2,6,20
  25253  76eb
  25254  76eb		       03		      .byte.b	3
  25255  76ec
  25256  76ec		       08 04 1d 	      .byte.b	8,4,29
  25257  76ef
  25258  76ef		       03 01 09 	      .byte.b	3,1,9
  25259  76f2
  25260  76f2		       02		      .byte.b	2
  25261  76f3
  25262  76f3		       04 04 1d 	      .byte.b	4,4,29
  25263  76f6
  25264  76f6		       01 01 09 	      .byte.b	1,1,9
  25265  76f9
  25266  76f9		       01		      .byte.b	1
  25267  76fa
  25268  76fa		       08 04 1d 	      .byte.b	8,4,29
  25269  76fd
  25270  76fd		       03 01 09 	      .byte.b	3,1,9
  25271  7700
  25272  7700		       03		      .byte.b	3
  25273  7701
  25274  7701		       04 04 1d 	      .byte.b	4,4,29
  25275  7704
  25276  7704		       01 01 09 	      .byte.b	1,1,9
  25277  7707
  25278  7707		       03		      .byte.b	3
  25279  7708
  25280  7708		       08 04 1d 	      .byte.b	8,4,29
  25281  770b
  25282  770b		       03 01 09 	      .byte.b	3,1,9
  25283  770e
  25284  770e		       03		      .byte.b	3
  25285  770f
  25286  770f		       04 04 1d 	      .byte.b	4,4,29
  25287  7712
  25288  7712		       01 01 09 	      .byte.b	1,1,9
  25289  7715
  25290  7715		       03		      .byte.b	3
  25291  7716
  25292  7716		       08 04 1d 	      .byte.b	8,4,29
  25293  7719
  25294  7719		       03 01 09 	      .byte.b	3,1,9
  25295  771c
  25296  771c		       03		      .byte.b	3
  25297  771d
  25298  771d		       08 04 1a 	      .byte.b	8,4,26
  25299  7720
  25300  7720		       04 0c 18 	      .byte.b	4,12,24
  25301  7723
  25302  7723		       03		      .byte.b	3
  25303  7724
  25304  7724		       04 04 17 	      .byte.b	4,4,23
  25305  7727
  25306  7727		       04 0c 1a 	      .byte.b	4,12,26
  25307  772a
  25308  772a		       03		      .byte.b	3
  25309  772b
  25310  772b		       00 00 00 	      .byte.b	0,0,0
  25311  772e
  25312  772e		       02 0c 1a 	      .byte.b	2,12,26
  25313  7731
  25314  7731		       03		      .byte.b	3
  25315  7732
  25316  7732		       00 00 00 	      .byte.b	0,0,0
  25317  7735
  25318  7735		       00 00 00 	      .byte.b	0,0,0
  25319  7738
  25320  7738		       03		      .byte.b	3
  25321  7739
  25322  7739		       00 00 00 	      .byte.b	0,0,0
  25323  773c
  25324  773c		       04 01 1f 	      .byte.b	4,1,31
  25325  773f
  25326  773f		       03		      .byte.b	3
  25327  7740
  25328  7740		       00 00 00 	      .byte.b	0,0,0
  25329  7743
  25330  7743		       02 01 1f 	      .byte.b	2,1,31
  25331  7746
  25332  7746		       03		      .byte.b	3
  25333  7747
  25334  7747		       00 00 00 	      .byte.b	0,0,0
  25335  774a
  25336  774a		       00 00 00 	      .byte.b	0,0,0
  25337  774d
  25338  774d		       03		      .byte.b	3
  25339  774e
  25340  774e		       00 00 00 	      .byte.b	0,0,0
  25341  7751
  25342  7751		       04 06 14 	      .byte.b	4,6,20
  25343  7754
  25344  7754		       03		      .byte.b	3
  25345  7755
  25346  7755		       00 00 00 	      .byte.b	0,0,0
  25347  7758
  25348  7758		       02 06 14 	      .byte.b	2,6,20
  25349  775b
  25350  775b		       03		      .byte.b	3
  25351  775c
  25352  775c		       08 04 1d 	      .byte.b	8,4,29
  25353  775f
  25354  775f		       03 01 09 	      .byte.b	3,1,9
  25355  7762
  25356  7762		       02		      .byte.b	2
  25357  7763
  25358  7763		       04 04 1d 	      .byte.b	4,4,29
  25359  7766
  25360  7766		       01 01 09 	      .byte.b	1,1,9
  25361  7769
  25362  7769		       01		      .byte.b	1
  25363  776a
  25364  776a		       08 04 1d 	      .byte.b	8,4,29
  25365  776d
  25366  776d		       03 01 09 	      .byte.b	3,1,9
  25367  7770
  25368  7770		       03		      .byte.b	3
  25369  7771
  25370  7771		       04 04 1d 	      .byte.b	4,4,29
  25371  7774
  25372  7774		       01 01 09 	      .byte.b	1,1,9
  25373  7777
  25374  7777		       03		      .byte.b	3
  25375  7778
  25376  7778		       08 04 1d 	      .byte.b	8,4,29
  25377  777b
  25378  777b		       03 01 09 	      .byte.b	3,1,9
  25379  777e
  25380  777e		       03		      .byte.b	3
  25381  777f
  25382  777f		       04 04 1d 	      .byte.b	4,4,29
  25383  7782
  25384  7782		       01 01 09 	      .byte.b	1,1,9
  25385  7785
  25386  7785		       03		      .byte.b	3
  25387  7786
  25388  7786		       08 04 1d 	      .byte.b	8,4,29
  25389  7789
  25390  7789		       03 01 09 	      .byte.b	3,1,9
  25391  778c
  25392  778c		       03		      .byte.b	3
  25393  778d
  25394  778d		       08 04 1a 	      .byte.b	8,4,26
  25395  7790
  25396  7790		       04 0c 18 	      .byte.b	4,12,24
  25397  7793
  25398  7793		       03		      .byte.b	3
  25399  7794
  25400  7794		       04 04 1a 	      .byte.b	4,4,26
  25401  7797
  25402  7797		       02 0c 18 	      .byte.b	2,12,24
  25403  779a
  25404  779a		       03		      .byte.b	3
  25405  779b
  25406  779b		       08 04 17 	      .byte.b	8,4,23
  25407  779e
  25408  779e		       04 0c 1a 	      .byte.b	4,12,26
  25409  77a1
  25410  77a1		       03		      .byte.b	3
  25411  77a2
  25412  77a2		       08 04 1d 	      .byte.b	8,4,29
  25413  77a5
  25414  77a5		       04 0c 0f 	      .byte.b	4,12,15
  25415  77a8
  25416  77a8		       03		      .byte.b	3
  25417  77a9
  25418  77a9		       04 04 1d 	      .byte.b	4,4,29
  25419  77ac
  25420  77ac		       02 0c 0f 	      .byte.b	2,12,15
  25421  77af
  25422  77af		       03		      .byte.b	3
  25423  77b0
  25424  77b0		       08 0c 0b 	      .byte.b	8,12,11
  25425  77b3
  25426  77b3		       04 01 1f 	      .byte.b	4,1,31
  25427  77b6
  25428  77b6		       03		      .byte.b	3
  25429  77b7
  25430  77b7		       08 0c 1a 	      .byte.b	8,12,26
  25431  77ba
  25432  77ba		       04 0c 13 	      .byte.b	4,12,19
  25433  77bd
  25434  77bd		       03		      .byte.b	3
  25435  77be
  25436  77be		       04 0c 1a 	      .byte.b	4,12,26
  25437  77c1
  25438  77c1		       02 0c 13 	      .byte.b	2,12,19
  25439  77c4
  25440  77c4		       03		      .byte.b	3
  25441  77c5
  25442  77c5		       00 00 00 	      .byte.b	0,0,0
  25443  77c8
  25444  77c8		       04 06 14 	      .byte.b	4,6,20
  25445  77cb
  25446  77cb		       03		      .byte.b	3
  25447  77cc
  25448  77cc		       00 00 00 	      .byte.b	0,0,0
  25449  77cf
  25450  77cf		       02 06 14 	      .byte.b	2,6,20
  25451  77d2
  25452  77d2		       03		      .byte.b	3
  25453  77d3
  25454  77d3		       ff		      .byte.b	255
  25455  77d4
  25456  77d4				   .skipL01409
  25457  77d4				   .L01410		;  return
  25458  77d4
  25459  77d4		       ba		      tsx
  25460  77d5		       b5 02		      lda	2,x	; check return address
  25461  77d7		       49 d7		      eor	#(>*)	; vs. current PCH
  25462  77d9		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  25463  77db		       f0 03		      beq	*+5	; if equal, do normal return
  25464  77dd		       4c dd ff 	      JMP	BS_return
  25465  77e0		       60		      RTS
  25466  77e1				   .
  25467  77e1							; 
  25468  77e1
  25469  77e1				   .
  25470  77e1							; 
  25471  77e1
  25472  77e1				   .
  25473  77e1							; 
  25474  77e1
  25475  77e1				   .
  25476  77e1							; 
  25477  77e1
  25478  77e1				   .
  25479  77e1							; 
  25480  77e1
  25481  77e1				   .
  25482  77e1							; 
  25483  77e1
  25484  77e1				   .
  25485  77e1							; 
  25486  77e1
  25487  77e1				   .
  25488  77e1							; 
  25489  77e1
  25490  77e1				   .__Get_Star_Music
  25491  77e1							; __Get_Star_Music
  25492  77e1
  25493  77e1				   .
  25494  77e1							; 
  25495  77e1
  25496  77e1				   .
  25497  77e1							; 
  25498  77e1
  25499  77e1				   .
  25500  77e1							; 
  25501  77e1
  25502  77e1				   .
  25503  77e1							; 
  25504  77e1
  25505  77e1				   .L01411		;  _Music_Duration  =	_Music_Duration  -  1
  25506  77e1
  25507  77e1		       c6 e3		      DEC	_Music_Duration
  25508  77e3				   .
  25509  77e3							; 
  25510  77e3
  25511  77e3				   .L01412		;  if _Music_Duration	>  0 then goto __Got_Music bank3
  25512  77e3
  25513  77e3		       a9 00		      LDA	#0
  25514  77e5		       c5 e3		      CMP	_Music_Duration
  25515  77e7		       b0 12		      BCS	.skipL01412
  25516  77e9				   .condpart646
  25517  77e9		       85 ee		      sta	temp7
  25518  77eb		       a9 52		      lda	#>(.__Got_Music-1)
  25519  77ed		       48		      pha
  25520  77ee		       a9 d3		      lda	#<(.__Got_Music-1)
  25521  77f0		       48		      pha
  25522  77f1		       a5 ee		      lda	temp7
  25523  77f3		       48		      pha
  25524  77f4		       8a		      txa
  25525  77f5		       48		      pha
  25526  77f6		       a2 03		      ldx	#3
  25527  77f8		       4c eb ff 	      jmp	BS_jsr
  25528  77fb				   .skipL01412
  25529  77fb				   .
  25530  77fb							; 
  25531  77fb
  25532  77fb				   .
  25533  77fb							; 
  25534  77fb
  25535  77fb				   .
  25536  77fb							; 
  25537  77fb
  25538  77fb				   .
  25539  77fb							; 
  25540  77fb
  25541  77fb				   .L01413		;  temp4  =  sread ( _StarPowerMusicData ) 
  25542  77fb
  25543  77fb		       a2 e4		      ldx	#_StarPowerMusicData
  25544  77fd		       a1 00		      lda	(0,x)
  25545  77ff		       f6 00		      inc	0,x
  25546  7801		       d0 02		      bne	*+4
  25547  7803		       f6 01		      inc	1,x
  25548  7805		       85 9f		      STA	temp4
  25549  7807				   .
  25550  7807							; 
  25551  7807
  25552  7807				   .
  25553  7807							; 
  25554  7807
  25555  7807				   .
  25556  7807							; 
  25557  7807
  25558  7807				   .
  25559  7807							; 
  25560  7807
  25561  7807				   .L01414		;  if temp4  =  255 then _Music_Duration  =  1  :  gosub __Star_Power_Music  :  goto __Get_Star_Music
  25562  7807
  25563  7807		       a5 9f		      LDA	temp4
  25564  7809		       c9 ff		      CMP	#255
  25565  780b		       d0 0a		      BNE	.skipL01414
  25566  780d				   .condpart647
  25567  780d		       a9 01		      LDA	#1
  25568  780f		       85 e3		      STA	_Music_Duration
  25569  7811		       20 9b d8 	      jsr	.__Star_Power_Music
  25570  7814		       4c e1 d7 	      jmp	.__Get_Star_Music
  25571  7817
  25572  7817				   .skipL01414
  25573  7817				   .
  25574  7817							; 
  25575  7817
  25576  7817				   .
  25577  7817							; 
  25578  7817
  25579  7817				   .
  25580  7817							; 
  25581  7817
  25582  7817				   .
  25583  7817							; 
  25584  7817
  25585  7817				   .L01415		;  temp5  =  sread ( _StarPowerMusicData ) 
  25586  7817
  25587  7817		       a2 e4		      ldx	#_StarPowerMusicData
  25588  7819		       a1 00		      lda	(0,x)
  25589  781b		       f6 00		      inc	0,x
  25590  781d		       d0 02		      bne	*+4
  25591  781f		       f6 01		      inc	1,x
  25592  7821		       85 a0		      STA	temp5
  25593  7823				   .L01416		;  temp6  =  sread ( _StarPowerMusicData ) 
  25594  7823
  25595  7823		       a2 e4		      ldx	#_StarPowerMusicData
  25596  7825		       a1 00		      lda	(0,x)
  25597  7827		       f6 00		      inc	0,x
  25598  7829		       d0 02		      bne	*+4
  25599  782b		       f6 01		      inc	1,x
  25600  782d		       85 a1		      STA	temp6
  25601  782f				   .
  25602  782f							; 
  25603  782f
  25604  782f				   .
  25605  782f							; 
  25606  782f
  25607  782f				   .
  25608  782f							; 
  25609  782f
  25610  782f				   .
  25611  782f							; 
  25612  782f
  25613  782f				   .L01417		;  if _Bit1_Jumping_Flag{1}  ||  _Bit4_Enemy_Dead_Flag{4} then goto __Skip_Star_Melody
  25614  782f
  25615  782f		       a5 d7		      LDA	_Bit1_Jumping_Flag
  25616  7831		       29 02		      AND	#2
  25617  7833		       f0 03		      BEQ	.skipL01417
  25618  7835				   .condpart648
  25619  7835		       4c 3e d8 	      jmp	.condpart649
  25620  7838				   .skipL01417
  25621  7838		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
  25622  783a		       29 10		      AND	#16
  25623  783c		       f0 03		      BEQ	.skip169OR
  25624  783e				   .condpart649
  25625  783e		       4c 4d d8 	      jmp	.__Skip_Star_Melody
  25626  7841
  25627  7841				   .skip169OR
  25628  7841				   .
  25629  7841							; 
  25630  7841
  25631  7841				   .
  25632  7841							; 
  25633  7841
  25634  7841				   .
  25635  7841							; 
  25636  7841
  25637  7841				   .
  25638  7841							; 
  25639  7841
  25640  7841				   .L01418		;  AUDV0  =  temp4
  25641  7841
  25642  7841		       a5 9f		      LDA	temp4
  25643  7843		       85 19		      STA	AUDV0
  25644  7845				   .L01419		;  AUDC0  =  temp5
  25645  7845
  25646  7845		       a5 a0		      LDA	temp5
  25647  7847		       85 15		      STA	AUDC0
  25648  7849				   .L01420		;  AUDF0  =  temp6
  25649  7849
  25650  7849		       a5 a1		      LDA	temp6
  25651  784b		       85 17		      STA	AUDF0
  25652  784d				   .
  25653  784d							; 
  25654  784d
  25655  784d				   .__Skip_Star_Melody
  25656  784d							; __Skip_Star_Melody
  25657  784d
  25658  784d				   .
  25659  784d							; 
  25660  784d
  25661  784d				   .
  25662  784d							; 
  25663  784d
  25664  784d				   .
  25665  784d							; 
  25666  784d
  25667  784d				   .
  25668  784d							; 
  25669  784d
  25670  784d				   .L01421		;  temp4  =  sread ( _StarPowerMusicData ) 
  25671  784d
  25672  784d		       a2 e4		      ldx	#_StarPowerMusicData
  25673  784f		       a1 00		      lda	(0,x)
  25674  7851		       f6 00		      inc	0,x
  25675  7853		       d0 02		      bne	*+4
  25676  7855		       f6 01		      inc	1,x
  25677  7857		       85 9f		      STA	temp4
  25678  7859				   .L01422		;  temp5  =  sread ( _StarPowerMusicData ) 
  25679  7859
  25680  7859		       a2 e4		      ldx	#_StarPowerMusicData
  25681  785b		       a1 00		      lda	(0,x)
  25682  785d		       f6 00		      inc	0,x
  25683  785f		       d0 02		      bne	*+4
  25684  7861		       f6 01		      inc	1,x
  25685  7863		       85 a0		      STA	temp5
  25686  7865				   .L01423		;  temp6  =  sread ( _StarPowerMusicData ) 
  25687  7865
  25688  7865		       a2 e4		      ldx	#_StarPowerMusicData
  25689  7867		       a1 00		      lda	(0,x)
  25690  7869		       f6 00		      inc	0,x
  25691  786b		       d0 02		      bne	*+4
  25692  786d		       f6 01		      inc	1,x
  25693  786f		       85 a1		      STA	temp6
  25694  7871				   .
  25695  7871							; 
  25696  7871
  25697  7871				   .
  25698  7871							; 
  25699  7871
  25700  7871				   .
  25701  7871							; 
  25702  7871
  25703  7871				   .
  25704  7871							; 
  25705  7871
  25706  7871				   .L01424		;  AUDV1  =  temp4
  25707  7871
  25708  7871		       a5 9f		      LDA	temp4
  25709  7873		       85 1a		      STA	AUDV1
  25710  7875				   .L01425		;  AUDC1  =  temp5
  25711  7875
  25712  7875		       a5 a0		      LDA	temp5
  25713  7877		       85 16		      STA	AUDC1
  25714  7879				   .L01426		;  AUDF1  =  temp6
  25715  7879
  25716  7879		       a5 a1		      LDA	temp6
  25717  787b		       85 18		      STA	AUDF1
  25718  787d				   .
  25719  787d							; 
  25720  787d
  25721  787d				   .
  25722  787d							; 
  25723  787d
  25724  787d				   .
  25725  787d							; 
  25726  787d
  25727  787d				   .
  25728  787d							; 
  25729  787d
  25730  787d				   .L01427		;  _Music_Duration  =	sread ( _StarPowerMusicData ) 
  25731  787d
  25732  787d		       a2 e4		      ldx	#_StarPowerMusicData
  25733  787f		       a1 00		      lda	(0,x)
  25734  7881		       f6 00		      inc	0,x
  25735  7883		       d0 02		      bne	*+4
  25736  7885		       f6 01		      inc	1,x
  25737  7887		       85 e3		      STA	_Music_Duration
  25738  7889				   .
  25739  7889							; 
  25740  7889
  25741  7889				   .L01428		;  goto __Got_Music bank3
  25742  7889
  25743  7889		       85 ee		      sta	temp7
  25744  788b		       a9 52		      lda	#>(.__Got_Music-1)
  25745  788d		       48		      pha
  25746  788e		       a9 d3		      lda	#<(.__Got_Music-1)
  25747  7890		       48		      pha
  25748  7891		       a5 ee		      lda	temp7
  25749  7893		       48		      pha
  25750  7894		       8a		      txa
  25751  7895		       48		      pha
  25752  7896		       a2 03		      ldx	#3
  25753  7898		       4c eb ff 	      jmp	BS_jsr
  25754  789b				   .
  25755  789b							; 
  25756  789b
  25757  789b				   .
  25758  789b							; 
  25759  789b
  25760  789b				   .
  25761  789b							; 
  25762  789b
  25763  789b				   .
  25764  789b							; 
  25765  789b
  25766  789b				   .
  25767  789b							; 
  25768  789b
  25769  789b				   .
  25770  789b							; 
  25771  789b
  25772  789b				   .
  25773  789b							; 
  25774  789b
  25775  789b				   .
  25776  789b							; 
  25777  789b
  25778  789b				   .
  25779  789b							; 
  25780  789b
  25781  789b				   .
  25782  789b							; 
  25783  789b
  25784  789b				   .
  25785  789b							; 
  25786  789b
  25787  789b				   .
  25788  789b							; 
  25789  789b
  25790  789b				   .
  25791  789b							; 
  25792  789b
  25793  789b				   .
  25794  789b							; 
  25795  789b
  25796  789b				   .
  25797  789b							; 
  25798  789b
  25799  789b				   .
  25800  789b							; 
  25801  789b
  25802  789b				   .
  25803  789b							; 
  25804  789b
  25805  789b				   .
  25806  789b							; 
  25807  789b
  25808  789b				   .
  25809  789b							; 
  25810  789b
  25811  789b				   .
  25812  789b							; 
  25813  789b
  25814  789b				   .
  25815  789b							; 
  25816  789b
  25817  789b				   .
  25818  789b							; 
  25819  789b
  25820  789b				   .
  25821  789b							; 
  25822  789b
  25823  789b				   .
  25824  789b							; 
  25825  789b
  25826  789b				   .
  25827  789b							; 
  25828  789b
  25829  789b				   .
  25830  789b							; 
  25831  789b
  25832  789b				   .__Star_Power_Music
  25833  789b							; __Star_Power_Music
  25834  789b
  25835  789b				   .L01429		;  sdata _StarPowerMusicData = q
  25836  789b
  25837  789b		       a9 a6		      lda	#<_StarPowerMusicData_begin
  25838  789d		       85 e4		      sta	q
  25839  789f		       a9 d8		      lda	#>_StarPowerMusicData_begin
  25840  78a1		       85 e5		      sta	q+1
  25841  78a3		       4c 87 d9 	      JMP	.skipL01429
  25842  78a6				   _StarPowerMusicData_begin
  25843  78a6		       08 04 1d 	      .byte.b	8,4,29
  25844  78a9
  25845  78a9		       04 01 1c 	      .byte.b	4,1,28
  25846  78ac
  25847  78ac		       03		      .byte.b	3
  25848  78ad
  25849  78ad		       04 04 1d 	      .byte.b	4,4,29
  25850  78b0
  25851  78b0		       02 01 1c 	      .byte.b	2,1,28
  25852  78b3
  25853  78b3		       01		      .byte.b	1
  25854  78b4
  25855  78b4		       08 04 1d 	      .byte.b	8,4,29
  25856  78b7
  25857  78b7		       04 0c 0e 	      .byte.b	4,12,14
  25858  78ba
  25859  78ba		       03		      .byte.b	3
  25860  78bb
  25861  78bb		       04 04 1d 	      .byte.b	4,4,29
  25862  78be
  25863  78be		       02 0c 0e 	      .byte.b	2,12,14
  25864  78c1
  25865  78c1		       01		      .byte.b	1
  25866  78c2
  25867  78c2		       08 04 1d 	      .byte.b	8,4,29
  25868  78c5
  25869  78c5		       04 0c 17 	      .byte.b	4,12,23
  25870  78c8
  25871  78c8		       03		      .byte.b	3
  25872  78c9
  25873  78c9		       04 04 1d 	      .byte.b	4,4,29
  25874  78cc
  25875  78cc		       02 0c 17 	      .byte.b	2,12,23
  25876  78cf
  25877  78cf		       01		      .byte.b	1
  25878  78d0
  25879  78d0		       08 0c 11 	      .byte.b	8,12,17
  25880  78d3
  25881  78d3		       00 00 00 	      .byte.b	0,0,0
  25882  78d6
  25883  78d6		       02		      .byte.b	2
  25884  78d7
  25885  78d7		       08 04 1d 	      .byte.b	8,4,29
  25886  78da
  25887  78da		       04 0c 11 	      .byte.b	4,12,17
  25888  78dd
  25889  78dd		       02		      .byte.b	2
  25890  78de
  25891  78de		       00 00 00 	      .byte.b	0,0,0
  25892  78e1
  25893  78e1		       00 00 00 	      .byte.b	0,0,0
  25894  78e4
  25895  78e4		       02		      .byte.b	2
  25896  78e5
  25897  78e5		       08 04 1d 	      .byte.b	8,4,29
  25898  78e8
  25899  78e8		       04 0c 0e 	      .byte.b	4,12,14
  25900  78eb
  25901  78eb		       03		      .byte.b	3
  25902  78ec
  25903  78ec		       04 04 1d 	      .byte.b	4,4,29
  25904  78ef
  25905  78ef		       02 0c 0e 	      .byte.b	2,12,14
  25906  78f2
  25907  78f2		       01		      .byte.b	1
  25908  78f3
  25909  78f3		       08 0c 11 	      .byte.b	8,12,17
  25910  78f6
  25911  78f6		       00 00 00 	      .byte.b	0,0,0
  25912  78f9
  25913  78f9		       02		      .byte.b	2
  25914  78fa
  25915  78fa		       08 04 1d 	      .byte.b	8,4,29
  25916  78fd
  25917  78fd		       04 0c 17 	      .byte.b	4,12,23
  25918  7900
  25919  7900		       02		      .byte.b	2
  25920  7901
  25921  7901		       08 0c 11 	      .byte.b	8,12,17
  25922  7904
  25923  7904		       04 0c 17 	      .byte.b	4,12,23
  25924  7907
  25925  7907		       02		      .byte.b	2
  25926  7908
  25927  7908		       08 04 1d 	      .byte.b	8,4,29
  25928  790b
  25929  790b		       04 0c 11 	      .byte.b	4,12,17
  25930  790e
  25931  790e		       03		      .byte.b	3
  25932  790f
  25933  790f		       04 04 1d 	      .byte.b	4,4,29
  25934  7912
  25935  7912		       04 0c 11 	      .byte.b	4,12,17
  25936  7915
  25937  7915		       01		      .byte.b	1
  25938  7916
  25939  7916		       08 04 1f 	      .byte.b	8,4,31
  25940  7919
  25941  7919		       04 01 1f 	      .byte.b	4,1,31
  25942  791c
  25943  791c		       03		      .byte.b	3
  25944  791d
  25945  791d		       04 04 1d 	      .byte.b	4,4,29
  25946  7920
  25947  7920		       02 01 1f 	      .byte.b	2,1,31
  25948  7923
  25949  7923		       01		      .byte.b	1
  25950  7924
  25951  7924		       08 04 1f 	      .byte.b	8,4,31
  25952  7927
  25953  7927		       04 0c 0f 	      .byte.b	4,12,15
  25954  792a
  25955  792a		       03		      .byte.b	3
  25956  792b
  25957  792b		       04 04 1f 	      .byte.b	4,4,31
  25958  792e
  25959  792e		       02 0c 0f 	      .byte.b	2,12,15
  25960  7931
  25961  7931		       01		      .byte.b	1
  25962  7932
  25963  7932		       08 04 1f 	      .byte.b	8,4,31
  25964  7935
  25965  7935		       04 0c 1a 	      .byte.b	4,12,26
  25966  7938
  25967  7938		       03		      .byte.b	3
  25968  7939
  25969  7939		       04 04 1f 	      .byte.b	4,4,31
  25970  793c
  25971  793c		       02 0c 1a 	      .byte.b	2,12,26
  25972  793f
  25973  793f		       01		      .byte.b	1
  25974  7940
  25975  7940		       08 0c 13 	      .byte.b	8,12,19
  25976  7943
  25977  7943		       00 00 00 	      .byte.b	0,0,0
  25978  7946
  25979  7946		       02		      .byte.b	2
  25980  7947
  25981  7947		       08 04 1f 	      .byte.b	8,4,31
  25982  794a
  25983  794a		       04 0c 13 	      .byte.b	4,12,19
  25984  794d
  25985  794d		       02		      .byte.b	2
  25986  794e
  25987  794e		       00 00 00 	      .byte.b	0,0,0
  25988  7951
  25989  7951		       00 00 00 	      .byte.b	0,0,0
  25990  7954
  25991  7954		       02		      .byte.b	2
  25992  7955
  25993  7955		       08 04 1f 	      .byte.b	8,4,31
  25994  7958
  25995  7958		       04 0c 0f 	      .byte.b	4,12,15
  25996  795b
  25997  795b		       03		      .byte.b	3
  25998  795c
  25999  795c		       04 04 1f 	      .byte.b	4,4,31
  26000  795f
  26001  795f		       02 0c 0f 	      .byte.b	2,12,15
  26002  7962
  26003  7962		       01		      .byte.b	1
  26004  7963
  26005  7963		       08 0c 13 	      .byte.b	8,12,19
  26006  7966
  26007  7966		       00 00 00 	      .byte.b	0,0,0
  26008  7969
  26009  7969		       02		      .byte.b	2
  26010  796a
  26011  796a		       08 04 1f 	      .byte.b	8,4,31
  26012  796d
  26013  796d		       04 0c 1a 	      .byte.b	4,12,26
  26014  7970
  26015  7970		       02		      .byte.b	2
  26016  7971
  26017  7971		       08 0c 13 	      .byte.b	8,12,19
  26018  7974
  26019  7974		       04 0c 1a 	      .byte.b	4,12,26
  26020  7977
  26021  7977		       02		      .byte.b	2
  26022  7978
  26023  7978		       08 04 1f 	      .byte.b	8,4,31
  26024  797b
  26025  797b		       04 0c 13 	      .byte.b	4,12,19
  26026  797e
  26027  797e		       02		      .byte.b	2
  26028  797f
  26029  797f		       08 04 1f 	      .byte.b	8,4,31
  26030  7982
  26031  7982		       04 0c 13 	      .byte.b	4,12,19
  26032  7985
  26033  7985		       03		      .byte.b	3
  26034  7986
  26035  7986		       ff		      .byte.b	255
  26036  7987
  26037  7987				   .skipL01429
  26038  7987				   .L01430		;  return
  26039  7987
  26040  7987		       ba		      tsx
  26041  7988		       b5 02		      lda	2,x	; check return address
  26042  798a		       49 d9		      eor	#(>*)	; vs. current PCH
  26043  798c		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  26044  798e		       f0 03		      beq	*+5	; if equal, do normal return
  26045  7990		       4c dd ff 	      JMP	BS_return
  26046  7993		       60		      RTS
  26047  7994				   .
  26048  7994							; 
  26049  7994
  26050  7994				   .
  26051  7994							; 
  26052  7994
  26053  7994				   .
  26054  7994							; 
  26055  7994
  26056  7994				   .
  26057  7994							; 
  26058  7994
  26059  7994				   .
  26060  7994							; 
  26061  7994
  26062  7994				   .
  26063  7994							; 
  26064  7994
  26065  7994				   .
  26066  7994							; 
  26067  7994
  26068  7994				   .
  26069  7994							; 
  26070  7994
  26071  7994				   .__Get_UW_Music
  26072  7994							; __Get_UW_Music
  26073  7994
  26074  7994				   .
  26075  7994							; 
  26076  7994
  26077  7994				   .
  26078  7994							; 
  26079  7994
  26080  7994				   .
  26081  7994							; 
  26082  7994
  26083  7994				   .
  26084  7994							; 
  26085  7994
  26086  7994				   .L01431		;  _Music_Duration  =	_Music_Duration  -  1
  26087  7994
  26088  7994		       c6 e3		      DEC	_Music_Duration
  26089  7996				   .L01432		;  if _Music_Duration	=  7  ||  _Music_Duration  =  12 then AUDV0  =	0  :  AUDV1  =	0  :  goto __Got_Music bank3
  26090  7996
  26091  7996		       a5 e3		      LDA	_Music_Duration
  26092  7998		       c9 07		      CMP	#7
  26093  799a		       d0 03		      BNE	.skipL01432
  26094  799c				   .condpart650
  26095  799c		       4c a5 d9 	      jmp	.condpart651
  26096  799f				   .skipL01432
  26097  799f		       a5 e3		      LDA	_Music_Duration
  26098  79a1		       c9 0c		      CMP	#12
  26099  79a3		       d0 18		      BNE	.skip170OR
  26100  79a5				   .condpart651
  26101  79a5		       a9 00		      LDA	#0
  26102  79a7		       85 19		      STA	AUDV0
  26103  79a9		       85 1a		      STA	AUDV1
  26104  79ab		       85 ee		      sta	temp7
  26105  79ad		       a9 52		      lda	#>(.__Got_Music-1)
  26106  79af		       48		      pha
  26107  79b0		       a9 d3		      lda	#<(.__Got_Music-1)
  26108  79b2		       48		      pha
  26109  79b3		       a5 ee		      lda	temp7
  26110  79b5		       48		      pha
  26111  79b6		       8a		      txa
  26112  79b7		       48		      pha
  26113  79b8		       a2 03		      ldx	#3
  26114  79ba		       4c eb ff 	      jmp	BS_jsr
  26115  79bd				   .skip170OR
  26116  79bd				   .L01433		;  if _Music_Duration	=  17  ||  _Music_Duration  =  22 then AUDV0  =  0  :  AUDV1  =  0  :  goto __Got_Music bank3
  26117  79bd
  26118  79bd		       a5 e3		      LDA	_Music_Duration
  26119  79bf		       c9 11		      CMP	#17
  26120  79c1		       d0 03		      BNE	.skipL01433
  26121  79c3				   .condpart652
  26122  79c3		       4c cc d9 	      jmp	.condpart653
  26123  79c6				   .skipL01433
  26124  79c6		       a5 e3		      LDA	_Music_Duration
  26125  79c8		       c9 16		      CMP	#22
  26126  79ca		       d0 18		      BNE	.skip171OR
  26127  79cc				   .condpart653
  26128  79cc		       a9 00		      LDA	#0
  26129  79ce		       85 19		      STA	AUDV0
  26130  79d0		       85 1a		      STA	AUDV1
  26131  79d2		       85 ee		      sta	temp7
  26132  79d4		       a9 52		      lda	#>(.__Got_Music-1)
  26133  79d6		       48		      pha
  26134  79d7		       a9 d3		      lda	#<(.__Got_Music-1)
  26135  79d9		       48		      pha
  26136  79da		       a5 ee		      lda	temp7
  26137  79dc		       48		      pha
  26138  79dd		       8a		      txa
  26139  79de		       48		      pha
  26140  79df		       a2 03		      ldx	#3
  26141  79e1		       4c eb ff 	      jmp	BS_jsr
  26142  79e4				   .skip171OR
  26143  79e4				   .L01434		;  if _Music_Duration	=  27  ||  _Music_Duration  =  31 then AUDV0  =  0  :  AUDV1  =  0  :  goto __Got_Music bank3
  26144  79e4
  26145  79e4		       a5 e3		      LDA	_Music_Duration
  26146  79e6		       c9 1b		      CMP	#27
  26147  79e8		       d0 03		      BNE	.skipL01434
  26148  79ea				   .condpart654
  26149  79ea		       4c f3 d9 	      jmp	.condpart655
  26150  79ed				   .skipL01434
  26151  79ed		       a5 e3		      LDA	_Music_Duration
  26152  79ef		       c9 1f		      CMP	#31
  26153  79f1		       d0 18		      BNE	.skip172OR
  26154  79f3				   .condpart655
  26155  79f3		       a9 00		      LDA	#0
  26156  79f5		       85 19		      STA	AUDV0
  26157  79f7		       85 1a		      STA	AUDV1
  26158  79f9		       85 ee		      sta	temp7
  26159  79fb		       a9 52		      lda	#>(.__Got_Music-1)
  26160  79fd		       48		      pha
  26161  79fe		       a9 d3		      lda	#<(.__Got_Music-1)
  26162  7a00		       48		      pha
  26163  7a01		       a5 ee		      lda	temp7
  26164  7a03		       48		      pha
  26165  7a04		       8a		      txa
  26166  7a05		       48		      pha
  26167  7a06		       a2 03		      ldx	#3
  26168  7a08		       4c eb ff 	      jmp	BS_jsr
  26169  7a0b				   .skip172OR
  26170  7a0b				   .L01435		;  if _Music_Duration	>  0 then goto __Got_Music bank3
  26171  7a0b
  26172  7a0b		       a9 00		      LDA	#0
  26173  7a0d		       c5 e3		      CMP	_Music_Duration
  26174  7a0f		       b0 12		      BCS	.skipL01435
  26175  7a11				   .condpart656
  26176  7a11		       85 ee		      sta	temp7
  26177  7a13		       a9 52		      lda	#>(.__Got_Music-1)
  26178  7a15		       48		      pha
  26179  7a16		       a9 d3		      lda	#<(.__Got_Music-1)
  26180  7a18		       48		      pha
  26181  7a19		       a5 ee		      lda	temp7
  26182  7a1b		       48		      pha
  26183  7a1c		       8a		      txa
  26184  7a1d		       48		      pha
  26185  7a1e		       a2 03		      ldx	#3
  26186  7a20		       4c eb ff 	      jmp	BS_jsr
  26187  7a23				   .skipL01435
  26188  7a23				   .
  26189  7a23							; 
  26190  7a23
  26191  7a23				   .
  26192  7a23							; 
  26193  7a23
  26194  7a23				   .
  26195  7a23							; 
  26196  7a23
  26197  7a23				   .
  26198  7a23							; 
  26199  7a23
  26200  7a23				   .L01436		;  temp4  =  sread ( _UWMusicData ) 
  26201  7a23
  26202  7a23		       a2 e4		      ldx	#_UWMusicData
  26203  7a25		       a1 00		      lda	(0,x)
  26204  7a27		       f6 00		      inc	0,x
  26205  7a29		       d0 02		      bne	*+4
  26206  7a2b		       f6 01		      inc	1,x
  26207  7a2d		       85 9f		      STA	temp4
  26208  7a2f				   .
  26209  7a2f							; 
  26210  7a2f
  26211  7a2f				   .
  26212  7a2f							; 
  26213  7a2f
  26214  7a2f				   .
  26215  7a2f							; 
  26216  7a2f
  26217  7a2f				   .
  26218  7a2f							; 
  26219  7a2f
  26220  7a2f				   .L01437		;  if temp4  =  255 then _Music_Duration  =  1  :  gosub __UW_Music  :  goto __Get_UW_Music
  26221  7a2f
  26222  7a2f		       a5 9f		      LDA	temp4
  26223  7a31		       c9 ff		      CMP	#255
  26224  7a33		       d0 0a		      BNE	.skipL01437
  26225  7a35				   .condpart657
  26226  7a35		       a9 01		      LDA	#1
  26227  7a37		       85 e3		      STA	_Music_Duration
  26228  7a39		       20 c3 da 	      jsr	.__UW_Music
  26229  7a3c		       4c 94 d9 	      jmp	.__Get_UW_Music
  26230  7a3f
  26231  7a3f				   .skipL01437
  26232  7a3f				   .
  26233  7a3f							; 
  26234  7a3f
  26235  7a3f				   .
  26236  7a3f							; 
  26237  7a3f
  26238  7a3f				   .
  26239  7a3f							; 
  26240  7a3f
  26241  7a3f				   .
  26242  7a3f							; 
  26243  7a3f
  26244  7a3f				   .L01438		;  temp5  =  sread ( _UWMusicData ) 
  26245  7a3f
  26246  7a3f		       a2 e4		      ldx	#_UWMusicData
  26247  7a41		       a1 00		      lda	(0,x)
  26248  7a43		       f6 00		      inc	0,x
  26249  7a45		       d0 02		      bne	*+4
  26250  7a47		       f6 01		      inc	1,x
  26251  7a49		       85 a0		      STA	temp5
  26252  7a4b				   .L01439		;  temp6  =  sread ( _UWMusicData ) 
  26253  7a4b
  26254  7a4b		       a2 e4		      ldx	#_UWMusicData
  26255  7a4d		       a1 00		      lda	(0,x)
  26256  7a4f		       f6 00		      inc	0,x
  26257  7a51		       d0 02		      bne	*+4
  26258  7a53		       f6 01		      inc	1,x
  26259  7a55		       85 a1		      STA	temp6
  26260  7a57				   .
  26261  7a57							; 
  26262  7a57
  26263  7a57				   .
  26264  7a57							; 
  26265  7a57
  26266  7a57				   .
  26267  7a57							; 
  26268  7a57
  26269  7a57				   .
  26270  7a57							; 
  26271  7a57
  26272  7a57				   .L01440		;  if _Bit1_Jumping_Flag{1}  ||  _Bit4_Enemy_Dead_Flag{4} then goto __Skip_UW_Melody
  26273  7a57
  26274  7a57		       a5 d7		      LDA	_Bit1_Jumping_Flag
  26275  7a59		       29 02		      AND	#2
  26276  7a5b		       f0 03		      BEQ	.skipL01440
  26277  7a5d				   .condpart658
  26278  7a5d		       4c 66 da 	      jmp	.condpart659
  26279  7a60				   .skipL01440
  26280  7a60		       a5 da		      LDA	_Bit4_Enemy_Dead_Flag
  26281  7a62		       29 10		      AND	#16
  26282  7a64		       f0 03		      BEQ	.skip173OR
  26283  7a66				   .condpart659
  26284  7a66		       4c 75 da 	      jmp	.__Skip_UW_Melody
  26285  7a69
  26286  7a69				   .skip173OR
  26287  7a69				   .
  26288  7a69							; 
  26289  7a69
  26290  7a69				   .
  26291  7a69							; 
  26292  7a69
  26293  7a69				   .
  26294  7a69							; 
  26295  7a69
  26296  7a69				   .
  26297  7a69							; 
  26298  7a69
  26299  7a69				   .L01441		;  AUDV0  =  temp4
  26300  7a69
  26301  7a69		       a5 9f		      LDA	temp4
  26302  7a6b		       85 19		      STA	AUDV0
  26303  7a6d				   .L01442		;  AUDC0  =  temp5
  26304  7a6d
  26305  7a6d		       a5 a0		      LDA	temp5
  26306  7a6f		       85 15		      STA	AUDC0
  26307  7a71				   .L01443		;  AUDF0  =  temp6
  26308  7a71
  26309  7a71		       a5 a1		      LDA	temp6
  26310  7a73		       85 17		      STA	AUDF0
  26311  7a75				   .
  26312  7a75							; 
  26313  7a75
  26314  7a75				   .__Skip_UW_Melody
  26315  7a75							; __Skip_UW_Melody
  26316  7a75
  26317  7a75				   .
  26318  7a75							; 
  26319  7a75
  26320  7a75				   .
  26321  7a75							; 
  26322  7a75
  26323  7a75				   .
  26324  7a75							; 
  26325  7a75
  26326  7a75				   .
  26327  7a75							; 
  26328  7a75
  26329  7a75				   .L01444		;  temp4  =  sread ( _UWMusicData ) 
  26330  7a75
  26331  7a75		       a2 e4		      ldx	#_UWMusicData
  26332  7a77		       a1 00		      lda	(0,x)
  26333  7a79		       f6 00		      inc	0,x
  26334  7a7b		       d0 02		      bne	*+4
  26335  7a7d		       f6 01		      inc	1,x
  26336  7a7f		       85 9f		      STA	temp4
  26337  7a81				   .L01445		;  temp5  =  sread ( _UWMusicData ) 
  26338  7a81
  26339  7a81		       a2 e4		      ldx	#_UWMusicData
  26340  7a83		       a1 00		      lda	(0,x)
  26341  7a85		       f6 00		      inc	0,x
  26342  7a87		       d0 02		      bne	*+4
  26343  7a89		       f6 01		      inc	1,x
  26344  7a8b		       85 a0		      STA	temp5
  26345  7a8d				   .L01446		;  temp6  =  sread ( _UWMusicData ) 
  26346  7a8d
  26347  7a8d		       a2 e4		      ldx	#_UWMusicData
  26348  7a8f		       a1 00		      lda	(0,x)
  26349  7a91		       f6 00		      inc	0,x
  26350  7a93		       d0 02		      bne	*+4
  26351  7a95		       f6 01		      inc	1,x
  26352  7a97		       85 a1		      STA	temp6
  26353  7a99				   .
  26354  7a99							; 
  26355  7a99
  26356  7a99				   .
  26357  7a99							; 
  26358  7a99
  26359  7a99				   .
  26360  7a99							; 
  26361  7a99
  26362  7a99				   .
  26363  7a99							; 
  26364  7a99
  26365  7a99				   .L01447		;  AUDV1  =  temp4
  26366  7a99
  26367  7a99		       a5 9f		      LDA	temp4
  26368  7a9b		       85 1a		      STA	AUDV1
  26369  7a9d				   .L01448		;  AUDC1  =  temp5
  26370  7a9d
  26371  7a9d		       a5 a0		      LDA	temp5
  26372  7a9f		       85 16		      STA	AUDC1
  26373  7aa1				   .L01449		;  AUDF1  =  temp6
  26374  7aa1
  26375  7aa1		       a5 a1		      LDA	temp6
  26376  7aa3		       85 18		      STA	AUDF1
  26377  7aa5				   .
  26378  7aa5							; 
  26379  7aa5
  26380  7aa5				   .
  26381  7aa5							; 
  26382  7aa5
  26383  7aa5				   .
  26384  7aa5							; 
  26385  7aa5
  26386  7aa5				   .
  26387  7aa5							; 
  26388  7aa5
  26389  7aa5				   .L01450		;  _Music_Duration  =	sread ( _UWMusicData ) 
  26390  7aa5
  26391  7aa5		       a2 e4		      ldx	#_UWMusicData
  26392  7aa7		       a1 00		      lda	(0,x)
  26393  7aa9		       f6 00		      inc	0,x
  26394  7aab		       d0 02		      bne	*+4
  26395  7aad		       f6 01		      inc	1,x
  26396  7aaf		       85 e3		      STA	_Music_Duration
  26397  7ab1				   .
  26398  7ab1							; 
  26399  7ab1
  26400  7ab1				   .L01451		;  goto __Got_Music bank3
  26401  7ab1
  26402  7ab1		       85 ee		      sta	temp7
  26403  7ab3		       a9 52		      lda	#>(.__Got_Music-1)
  26404  7ab5		       48		      pha
  26405  7ab6		       a9 d3		      lda	#<(.__Got_Music-1)
  26406  7ab8		       48		      pha
  26407  7ab9		       a5 ee		      lda	temp7
  26408  7abb		       48		      pha
  26409  7abc		       8a		      txa
  26410  7abd		       48		      pha
  26411  7abe		       a2 03		      ldx	#3
  26412  7ac0		       4c eb ff 	      jmp	BS_jsr
  26413  7ac3				   .
  26414  7ac3							; 
  26415  7ac3
  26416  7ac3				   .
  26417  7ac3							; 
  26418  7ac3
  26419  7ac3				   .
  26420  7ac3							; 
  26421  7ac3
  26422  7ac3				   .
  26423  7ac3							; 
  26424  7ac3
  26425  7ac3				   .
  26426  7ac3							; 
  26427  7ac3
  26428  7ac3				   .
  26429  7ac3							; 
  26430  7ac3
  26431  7ac3				   .
  26432  7ac3							; 
  26433  7ac3
  26434  7ac3				   .__UW_Music
  26435  7ac3							; __UW_Music
  26436  7ac3
  26437  7ac3				   .L01452		;  sdata _UWMusicData = q
  26438  7ac3
  26439  7ac3		       a9 ce		      lda	#<_UWMusicData_begin
  26440  7ac5		       85 e4		      sta	q
  26441  7ac7		       a9 da		      lda	#>_UWMusicData_begin
  26442  7ac9		       85 e5		      sta	q+1
  26443  7acb		       4c 2d dc 	      JMP	.skipL01452
  26444  7ace				   _UWMusicData_begin
  26445  7ace		       00 00 00 	      .byte.b	0,0,0
  26446  7ad1
  26447  7ad1		       08 01 0f 	      .byte.b	8,1,15
  26448  7ad4
  26449  7ad4		       03		      .byte.b	3
  26450  7ad5
  26451  7ad5		       00 00 00 	      .byte.b	0,0,0
  26452  7ad8
  26453  7ad8		       08 0c 13 	      .byte.b	8,12,19
  26454  7adb
  26455  7adb		       03		      .byte.b	3
  26456  7adc
  26457  7adc		       00 00 00 	      .byte.b	0,0,0
  26458  7adf
  26459  7adf		       08 01 12 	      .byte.b	8,1,18
  26460  7ae2
  26461  7ae2		       03		      .byte.b	3
  26462  7ae3
  26463  7ae3		       00 00 00 	      .byte.b	0,0,0
  26464  7ae6
  26465  7ae6		       08 0c 17 	      .byte.b	8,12,23
  26466  7ae9
  26467  7ae9		       03		      .byte.b	3
  26468  7aea
  26469  7aea		       00 00 00 	      .byte.b	0,0,0
  26470  7aed
  26471  7aed		       08 01 11 	      .byte.b	8,1,17
  26472  7af0
  26473  7af0		       03		      .byte.b	3
  26474  7af1
  26475  7af1		       00 00 00 	      .byte.b	0,0,0
  26476  7af4
  26477  7af4		       08 01 08 	      .byte.b	8,1,8
  26478  7af7
  26479  7af7		       03		      .byte.b	3
  26480  7af8
  26481  7af8		       00 00 00 	      .byte.b	0,0,0
  26482  7afb
  26483  7afb		       00 00 00 	      .byte.b	0,0,0
  26484  7afe
  26485  7afe		       12		      .byte.b	18
  26486  7aff
  26487  7aff		       00 00 00 	      .byte.b	0,0,0
  26488  7b02
  26489  7b02		       08 01 0f 	      .byte.b	8,1,15
  26490  7b05
  26491  7b05		       03		      .byte.b	3
  26492  7b06
  26493  7b06		       00 00 00 	      .byte.b	0,0,0
  26494  7b09
  26495  7b09		       08 0c 13 	      .byte.b	8,12,19
  26496  7b0c
  26497  7b0c		       03		      .byte.b	3
  26498  7b0d
  26499  7b0d		       00 00 00 	      .byte.b	0,0,0
  26500  7b10
  26501  7b10		       08 01 12 	      .byte.b	8,1,18
  26502  7b13
  26503  7b13		       03		      .byte.b	3
  26504  7b14
  26505  7b14		       00 00 00 	      .byte.b	0,0,0
  26506  7b17
  26507  7b17		       08 0c 17 	      .byte.b	8,12,23
  26508  7b1a
  26509  7b1a		       03		      .byte.b	3
  26510  7b1b
  26511  7b1b		       00 00 00 	      .byte.b	0,0,0
  26512  7b1e
  26513  7b1e		       08 01 11 	      .byte.b	8,1,17
  26514  7b21
  26515  7b21		       03		      .byte.b	3
  26516  7b22
  26517  7b22		       00 00 00 	      .byte.b	0,0,0
  26518  7b25
  26519  7b25		       08 01 08 	      .byte.b	8,1,8
  26520  7b28
  26521  7b28		       03		      .byte.b	3
  26522  7b29
  26523  7b29		       00 00 00 	      .byte.b	0,0,0
  26524  7b2c
  26525  7b2c		       00 00 00 	      .byte.b	0,0,0
  26526  7b2f
  26527  7b2f		       12		      .byte.b	18
  26528  7b30
  26529  7b30		       00 00 00 	      .byte.b	0,0,0
  26530  7b33
  26531  7b33		       08 01 17 	      .byte.b	8,1,23
  26532  7b36
  26533  7b36		       03		      .byte.b	3
  26534  7b37
  26535  7b37		       00 00 00 	      .byte.b	0,0,0
  26536  7b3a
  26537  7b3a		       08 0c 1d 	      .byte.b	8,12,29
  26538  7b3d
  26539  7b3d		       03		      .byte.b	3
  26540  7b3e
  26541  7b3e		       00 00 00 	      .byte.b	0,0,0
  26542  7b41
  26543  7b41		       08 01 1c 	      .byte.b	8,1,28
  26544  7b44
  26545  7b44		       03		      .byte.b	3
  26546  7b45
  26547  7b45		       00 00 00 	      .byte.b	0,0,0
  26548  7b48
  26549  7b48		       08 06 0d 	      .byte.b	8,6,13
  26550  7b4b
  26551  7b4b		       03		      .byte.b	3
  26552  7b4c
  26553  7b4c		       00 00 00 	      .byte.b	0,0,0
  26554  7b4f
  26555  7b4f		       08 01 1a 	      .byte.b	8,1,26
  26556  7b52
  26557  7b52		       03		      .byte.b	3
  26558  7b53
  26559  7b53		       00 00 00 	      .byte.b	0,0,0
  26560  7b56
  26561  7b56		       08 06 0c 	      .byte.b	8,6,12
  26562  7b59
  26563  7b59		       03		      .byte.b	3
  26564  7b5a
  26565  7b5a		       00 00 00 	      .byte.b	0,0,0
  26566  7b5d
  26567  7b5d		       00 00 00 	      .byte.b	0,0,0
  26568  7b60
  26569  7b60		       12		      .byte.b	18
  26570  7b61
  26571  7b61		       00 00 00 	      .byte.b	0,0,0
  26572  7b64
  26573  7b64		       08 01 17 	      .byte.b	8,1,23
  26574  7b67
  26575  7b67		       03		      .byte.b	3
  26576  7b68
  26577  7b68		       00 00 00 	      .byte.b	0,0,0
  26578  7b6b
  26579  7b6b		       08 0c 1d 	      .byte.b	8,12,29
  26580  7b6e
  26581  7b6e		       03		      .byte.b	3
  26582  7b6f
  26583  7b6f		       00 00 00 	      .byte.b	0,0,0
  26584  7b72
  26585  7b72		       08 01 1c 	      .byte.b	8,1,28
  26586  7b75
  26587  7b75		       03		      .byte.b	3
  26588  7b76
  26589  7b76		       00 00 00 	      .byte.b	0,0,0
  26590  7b79
  26591  7b79		       08 06 0d 	      .byte.b	8,6,13
  26592  7b7c
  26593  7b7c		       03		      .byte.b	3
  26594  7b7d
  26595  7b7d		       00 00 00 	      .byte.b	0,0,0
  26596  7b80
  26597  7b80		       08 01 1a 	      .byte.b	8,1,26
  26598  7b83
  26599  7b83		       03		      .byte.b	3
  26600  7b84
  26601  7b84		       00 00 00 	      .byte.b	0,0,0
  26602  7b87
  26603  7b87		       08 06 0c 	      .byte.b	8,6,12
  26604  7b8a
  26605  7b8a		       03		      .byte.b	3
  26606  7b8b
  26607  7b8b		       00 00 00 	      .byte.b	0,0,0
  26608  7b8e
  26609  7b8e		       00 00 00 	      .byte.b	0,0,0
  26610  7b91
  26611  7b91		       0c		      .byte.b	12
  26612  7b92
  26613  7b92		       00 00 00 	      .byte.b	0,0,0
  26614  7b95
  26615  7b95		       08 01 1a 	      .byte.b	8,1,26
  26616  7b98
  26617  7b98		       02		      .byte.b	2
  26618  7b99
  26619  7b99		       00 00 00 	      .byte.b	0,0,0
  26620  7b9c
  26621  7b9c		       08 01 1c 	      .byte.b	8,1,28
  26622  7b9f
  26623  7b9f		       02		      .byte.b	2
  26624  7ba0
  26625  7ba0		       00 00 00 	      .byte.b	0,0,0
  26626  7ba3
  26627  7ba3		       08 01 1d 	      .byte.b	8,1,29
  26628  7ba6
  26629  7ba6		       02		      .byte.b	2
  26630  7ba7
  26631  7ba7		       00 00 00 	      .byte.b	0,0,0
  26632  7baa
  26633  7baa		       08 01 1f 	      .byte.b	8,1,31
  26634  7bad
  26635  7bad		       06		      .byte.b	6
  26636  7bae
  26637  7bae		       00 00 00 	      .byte.b	0,0,0
  26638  7bb1
  26639  7bb1		       08 01 1a 	      .byte.b	8,1,26
  26640  7bb4
  26641  7bb4		       06		      .byte.b	6
  26642  7bb5
  26643  7bb5		       00 00 00 	      .byte.b	0,0,0
  26644  7bb8
  26645  7bb8		       08 01 1c 	      .byte.b	8,1,28
  26646  7bbb
  26647  7bbb		       06		      .byte.b	6
  26648  7bbc
  26649  7bbc		       00 00 00 	      .byte.b	0,0,0
  26650  7bbf
  26651  7bbf		       08 01 13 	      .byte.b	8,1,19
  26652  7bc2
  26653  7bc2		       06		      .byte.b	6
  26654  7bc3
  26655  7bc3		       00 00 00 	      .byte.b	0,0,0
  26656  7bc6
  26657  7bc6		       08 07 14 	      .byte.b	8,7,20
  26658  7bc9
  26659  7bc9		       06		      .byte.b	6
  26660  7bca
  26661  7bca		       00 00 00 	      .byte.b	0,0,0
  26662  7bcd
  26663  7bcd		       08 01 1d 	      .byte.b	8,1,29
  26664  7bd0
  26665  7bd0		       06		      .byte.b	6
  26666  7bd1
  26667  7bd1		       00 00 00 	      .byte.b	0,0,0
  26668  7bd4
  26669  7bd4		       08 01 1f 	      .byte.b	8,1,31
  26670  7bd7
  26671  7bd7		       02		      .byte.b	2
  26672  7bd8
  26673  7bd8		       00 00 00 	      .byte.b	0,0,0
  26674  7bdb
  26675  7bdb		       08 01 13 	      .byte.b	8,1,19
  26676  7bde
  26677  7bde		       02		      .byte.b	2
  26678  7bdf
  26679  7bdf		       00 00 00 	      .byte.b	0,0,0
  26680  7be2
  26681  7be2		       08 01 17 	      .byte.b	8,1,23
  26682  7be5
  26683  7be5		       02		      .byte.b	2
  26684  7be6
  26685  7be6		       00 00 00 	      .byte.b	0,0,0
  26686  7be9
  26687  7be9		       08 06 18 	      .byte.b	8,6,24
  26688  7bec
  26689  7bec		       02		      .byte.b	2
  26690  7bed
  26691  7bed		       00 00 00 	      .byte.b	0,0,0
  26692  7bf0
  26693  7bf0		       08 01 11 	      .byte.b	8,1,17
  26694  7bf3
  26695  7bf3		       02		      .byte.b	2
  26696  7bf4
  26697  7bf4		       00 00 00 	      .byte.b	0,0,0
  26698  7bf7
  26699  7bf7		       08 01 12 	      .byte.b	8,1,18
  26700  7bfa
  26701  7bfa		       02		      .byte.b	2
  26702  7bfb
  26703  7bfb		       00 00 00 	      .byte.b	0,0,0
  26704  7bfe
  26705  7bfe		       08 01 13 	      .byte.b	8,1,19
  26706  7c01
  26707  7c01		       04		      .byte.b	4
  26708  7c02
  26709  7c02		       00 00 00 	      .byte.b	0,0,0
  26710  7c05
  26711  7c05		       08 01 1a 	      .byte.b	8,1,26
  26712  7c08
  26713  7c08		       04		      .byte.b	4
  26714  7c09
  26715  7c09		       00 00 00 	      .byte.b	0,0,0
  26716  7c0c
  26717  7c0c		       08 0e 0a 	      .byte.b	8,14,10
  26718  7c0f
  26719  7c0f		       04		      .byte.b	4
  26720  7c10
  26721  7c10		       00 00 00 	      .byte.b	0,0,0
  26722  7c13
  26723  7c13		       08 0e 0c 	      .byte.b	8,14,12
  26724  7c16
  26725  7c16		       04		      .byte.b	4
  26726  7c17
  26727  7c17		       00 00 00 	      .byte.b	0,0,0
  26728  7c1a
  26729  7c1a		       08 0e 0e 	      .byte.b	8,14,14
  26730  7c1d
  26731  7c1d		       04		      .byte.b	4
  26732  7c1e
  26733  7c1e		       00 00 00 	      .byte.b	0,0,0
  26734  7c21
  26735  7c21		       08 0e 10 	      .byte.b	8,14,16
  26736  7c24
  26737  7c24		       04		      .byte.b	4
  26738  7c25
  26739  7c25		       00 00 00 	      .byte.b	0,0,0
  26740  7c28
  26741  7c28		       00 00 00 	      .byte.b	0,0,0
  26742  7c2b
  26743  7c2b		       24		      .byte.b	36
  26744  7c2c
  26745  7c2c		       ff		      .byte.b	255
  26746  7c2d
  26747  7c2d				   .skipL01452
  26748  7c2d				   .L01453		;  return
  26749  7c2d
  26750  7c2d		       ba		      tsx
  26751  7c2e		       b5 02		      lda	2,x	; check return address
  26752  7c30		       49 dc		      eor	#(>*)	; vs. current PCH
  26753  7c32		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  26754  7c34		       f0 03		      beq	*+5	; if equal, do normal return
  26755  7c36		       4c dd ff 	      JMP	BS_return
  26756  7c39		       60		      RTS
  26757  7c3a				   .
  26758  7c3a							; 
  26759  7c3a
  26760  7c3a				   .__Play_FF_Music
  26761  7c3a							; __Play_FF_Music
  26762  7c3a
  26763  7c3a				   .
  26764  7c3a							; 
  26765  7c3a
  26766  7c3a				   .
  26767  7c3a							; 
  26768  7c3a
  26769  7c3a				   .
  26770  7c3a							; 
  26771  7c3a
  26772  7c3a				   .
  26773  7c3a							; 
  26774  7c3a
  26775  7c3a				   .L01454		;  _Music_Duration  =	_Music_Duration  -  1
  26776  7c3a
  26777  7c3a		       c6 e3		      DEC	_Music_Duration
  26778  7c3c				   .
  26779  7c3c							; 
  26780  7c3c
  26781  7c3c				   .L01455		;  if _Music_Duration	>  0 then goto __Got_FF_Music
  26782  7c3c
  26783  7c3c		       a9 00		      LDA	#0
  26784  7c3e		       c5 e3		      CMP	_Music_Duration
  26785  7c40		       b0 03		      BCS	.skipL01455
  26786  7c42				   .condpart660
  26787  7c42		       4c be dc 	      jmp	.__Got_FF_Music
  26788  7c45
  26789  7c45				   .skipL01455
  26790  7c45				   .
  26791  7c45							; 
  26792  7c45
  26793  7c45				   .
  26794  7c45							; 
  26795  7c45
  26796  7c45				   .
  26797  7c45							; 
  26798  7c45
  26799  7c45				   .
  26800  7c45							; 
  26801  7c45
  26802  7c45				   .L01456		;  temp4  =  sread ( _FanFareMusicData ) 
  26803  7c45
  26804  7c45		       a2 e4		      ldx	#_FanFareMusicData
  26805  7c47		       a1 00		      lda	(0,x)
  26806  7c49		       f6 00		      inc	0,x
  26807  7c4b		       d0 02		      bne	*+4
  26808  7c4d		       f6 01		      inc	1,x
  26809  7c4f		       85 9f		      STA	temp4
  26810  7c51				   .
  26811  7c51							; 
  26812  7c51
  26813  7c51				   .
  26814  7c51							; 
  26815  7c51
  26816  7c51				   .
  26817  7c51							; 
  26818  7c51
  26819  7c51				   .
  26820  7c51							; 
  26821  7c51
  26822  7c51				   .L01457		;  if temp4  =  255 then _Music_Duration  =  255  :  goto __Got_FF_Music
  26823  7c51
  26824  7c51		       a5 9f		      LDA	temp4
  26825  7c53		       c9 ff		      CMP	#255
  26826  7c55		       d0 07		      BNE	.skipL01457
  26827  7c57				   .condpart661
  26828  7c57		       a9 ff		      LDA	#255
  26829  7c59		       85 e3		      STA	_Music_Duration
  26830  7c5b		       4c be dc 	      jmp	.__Got_FF_Music
  26831  7c5e
  26832  7c5e				   .skipL01457
  26833  7c5e				   .
  26834  7c5e							; 
  26835  7c5e
  26836  7c5e				   .
  26837  7c5e							; 
  26838  7c5e
  26839  7c5e				   .
  26840  7c5e							; 
  26841  7c5e
  26842  7c5e				   .
  26843  7c5e							; 
  26844  7c5e
  26845  7c5e				   .L01458		;  temp5  =  sread ( _FanFareMusicData ) 
  26846  7c5e
  26847  7c5e		       a2 e4		      ldx	#_FanFareMusicData
  26848  7c60		       a1 00		      lda	(0,x)
  26849  7c62		       f6 00		      inc	0,x
  26850  7c64		       d0 02		      bne	*+4
  26851  7c66		       f6 01		      inc	1,x
  26852  7c68		       85 a0		      STA	temp5
  26853  7c6a				   .L01459		;  temp6  =  sread ( _FanFareMusicData ) 
  26854  7c6a
  26855  7c6a		       a2 e4		      ldx	#_FanFareMusicData
  26856  7c6c		       a1 00		      lda	(0,x)
  26857  7c6e		       f6 00		      inc	0,x
  26858  7c70		       d0 02		      bne	*+4
  26859  7c72		       f6 01		      inc	1,x
  26860  7c74		       85 a1		      STA	temp6
  26861  7c76				   .
  26862  7c76							; 
  26863  7c76
  26864  7c76				   .
  26865  7c76							; 
  26866  7c76
  26867  7c76				   .
  26868  7c76							; 
  26869  7c76
  26870  7c76				   .
  26871  7c76							; 
  26872  7c76
  26873  7c76				   .L01460		;  AUDV0  =  temp4
  26874  7c76
  26875  7c76		       a5 9f		      LDA	temp4
  26876  7c78		       85 19		      STA	AUDV0
  26877  7c7a				   .L01461		;  AUDC0  =  temp5
  26878  7c7a
  26879  7c7a		       a5 a0		      LDA	temp5
  26880  7c7c		       85 15		      STA	AUDC0
  26881  7c7e				   .L01462		;  AUDF0  =  temp6
  26882  7c7e
  26883  7c7e		       a5 a1		      LDA	temp6
  26884  7c80		       85 17		      STA	AUDF0
  26885  7c82				   .
  26886  7c82							; 
  26887  7c82
  26888  7c82				   .
  26889  7c82							; 
  26890  7c82
  26891  7c82				   .
  26892  7c82							; 
  26893  7c82
  26894  7c82				   .
  26895  7c82							; 
  26896  7c82
  26897  7c82				   .L01463		;  temp4  =  sread ( _FanFareMusicData ) 
  26898  7c82
  26899  7c82		       a2 e4		      ldx	#_FanFareMusicData
  26900  7c84		       a1 00		      lda	(0,x)
  26901  7c86		       f6 00		      inc	0,x
  26902  7c88		       d0 02		      bne	*+4
  26903  7c8a		       f6 01		      inc	1,x
  26904  7c8c		       85 9f		      STA	temp4
  26905  7c8e				   .L01464		;  temp5  =  sread ( _FanFareMusicData ) 
  26906  7c8e
  26907  7c8e		       a2 e4		      ldx	#_FanFareMusicData
  26908  7c90		       a1 00		      lda	(0,x)
  26909  7c92		       f6 00		      inc	0,x
  26910  7c94		       d0 02		      bne	*+4
  26911  7c96		       f6 01		      inc	1,x
  26912  7c98		       85 a0		      STA	temp5
  26913  7c9a				   .L01465		;  temp6  =  sread ( _FanFareMusicData ) 
  26914  7c9a
  26915  7c9a		       a2 e4		      ldx	#_FanFareMusicData
  26916  7c9c		       a1 00		      lda	(0,x)
  26917  7c9e		       f6 00		      inc	0,x
  26918  7ca0		       d0 02		      bne	*+4
  26919  7ca2		       f6 01		      inc	1,x
  26920  7ca4		       85 a1		      STA	temp6
  26921  7ca6				   .
  26922  7ca6							; 
  26923  7ca6
  26924  7ca6				   .
  26925  7ca6							; 
  26926  7ca6
  26927  7ca6				   .
  26928  7ca6							; 
  26929  7ca6
  26930  7ca6				   .
  26931  7ca6							; 
  26932  7ca6
  26933  7ca6				   .L01466		;  AUDV1  =  temp4
  26934  7ca6
  26935  7ca6		       a5 9f		      LDA	temp4
  26936  7ca8		       85 1a		      STA	AUDV1
  26937  7caa				   .L01467		;  AUDC1  =  temp5
  26938  7caa
  26939  7caa		       a5 a0		      LDA	temp5
  26940  7cac		       85 16		      STA	AUDC1
  26941  7cae				   .L01468		;  AUDF1  =  temp6
  26942  7cae
  26943  7cae		       a5 a1		      LDA	temp6
  26944  7cb0		       85 18		      STA	AUDF1
  26945  7cb2				   .
  26946  7cb2							; 
  26947  7cb2
  26948  7cb2				   .
  26949  7cb2							; 
  26950  7cb2
  26951  7cb2				   .
  26952  7cb2							; 
  26953  7cb2
  26954  7cb2				   .
  26955  7cb2							; 
  26956  7cb2
  26957  7cb2				   .L01469		;  _Music_Duration  =	sread ( _FanFareMusicData ) 
  26958  7cb2
  26959  7cb2		       a2 e4		      ldx	#_FanFareMusicData
  26960  7cb4		       a1 00		      lda	(0,x)
  26961  7cb6		       f6 00		      inc	0,x
  26962  7cb8		       d0 02		      bne	*+4
  26963  7cba		       f6 01		      inc	1,x
  26964  7cbc		       85 e3		      STA	_Music_Duration
  26965  7cbe				   .
  26966  7cbe							; 
  26967  7cbe
  26968  7cbe				   .__Got_FF_Music
  26969  7cbe							; __Got_FF_Music
  26970  7cbe
  26971  7cbe				   .
  26972  7cbe							; 
  26973  7cbe
  26974  7cbe				   .L01470		;  return otherbank
  26975  7cbe
  26976  7cbe		       4c dd ff 	      JMP	BS_return
  26977  7cc1				   .
  26978  7cc1							; 
  26979  7cc1
  26980  7cc1				   .
  26981  7cc1							; 
  26982  7cc1
  26983  7cc1				   .
  26984  7cc1							; 
  26985  7cc1
  26986  7cc1				   .
  26987  7cc1							; 
  26988  7cc1
  26989  7cc1				   .
  26990  7cc1							; 
  26991  7cc1
  26992  7cc1				   .
  26993  7cc1							; 
  26994  7cc1
  26995  7cc1				   .
  26996  7cc1							; 
  26997  7cc1
  26998  7cc1				   .__Fanfare_Music
  26999  7cc1							; __Fanfare_Music
  27000  7cc1
  27001  7cc1				   .L01471		;  sdata _FanFareMusicData = q
  27002  7cc1
  27003  7cc1		       a9 cc		      lda	#<_FanFareMusicData_begin
  27004  7cc3		       85 e4		      sta	q
  27005  7cc5		       a9 dc		      lda	#>_FanFareMusicData_begin
  27006  7cc7		       85 e5		      sta	q+1
  27007  7cc9		       4c ad dd 	      JMP	.skipL01471
  27008  7ccc				   _FanFareMusicData_begin
  27009  7ccc		       08 0c 1a 	      .byte.b	8,12,26
  27010  7ccf
  27011  7ccf		       04 0c 1a 	      .byte.b	4,12,26
  27012  7cd2
  27013  7cd2		       04		      .byte.b	4
  27014  7cd3
  27015  7cd3		       08 0c 13 	      .byte.b	8,12,19
  27016  7cd6
  27017  7cd6		       04 0c 1f 	      .byte.b	4,12,31
  27018  7cd9
  27019  7cd9		       04		      .byte.b	4
  27020  7cda
  27021  7cda		       08 0c 0f 	      .byte.b	8,12,15
  27022  7cdd
  27023  7cdd		       04 0c 1a 	      .byte.b	4,12,26
  27024  7ce0
  27025  7ce0		       04		      .byte.b	4
  27026  7ce1
  27027  7ce1		       08 04 13 	      .byte.b	8,4,19
  27028  7ce4
  27029  7ce4		       03 01 1f 	      .byte.b	3,1,31
  27030  7ce7
  27031  7ce7		       04		      .byte.b	4
  27032  7ce8
  27033  7ce8		       08 04 1d 	      .byte.b	8,4,29
  27034  7ceb
  27035  7ceb		       04 0c 1f 	      .byte.b	4,12,31
  27036  7cee
  27037  7cee		       04		      .byte.b	4
  27038  7cef
  27039  7cef		       08 04 17 	      .byte.b	8,4,23
  27040  7cf2
  27041  7cf2		       04 0c 1a 	      .byte.b	4,12,26
  27042  7cf5
  27043  7cf5		       04		      .byte.b	4
  27044  7cf6
  27045  7cf6		       08 04 13 	      .byte.b	8,4,19
  27046  7cf9
  27047  7cf9		       04 0c 0f 	      .byte.b	4,12,15
  27048  7cfc
  27049  7cfc		       0c		      .byte.b	12
  27050  7cfd
  27051  7cfd		       08 04 17 	      .byte.b	8,4,23
  27052  7d00
  27053  7d00		       04 0c 13 	      .byte.b	4,12,19
  27054  7d03
  27055  7d03		       0c		      .byte.b	12
  27056  7d04
  27057  7d04		       08 0c 18 	      .byte.b	8,12,24
  27058  7d07
  27059  7d07		       04 0c 18 	      .byte.b	4,12,24
  27060  7d0a
  27061  7d0a		       04		      .byte.b	4
  27062  7d0b
  27063  7d0b		       08 0c 13 	      .byte.b	8,12,19
  27064  7d0e
  27065  7d0e		       03 01 1a 	      .byte.b	3,1,26
  27066  7d11
  27067  7d11		       04		      .byte.b	4
  27068  7d12
  27069  7d12		       08 0c 10 	      .byte.b	8,12,16
  27070  7d15
  27071  7d15		       04 0c 18 	      .byte.b	4,12,24
  27072  7d18
  27073  7d18		       04		      .byte.b	4
  27074  7d19
  27075  7d19		       06 01 04 	      .byte.b	6,1,4
  27076  7d1c
  27077  7d1c		       03 01 1f 	      .byte.b	3,1,31
  27078  7d1f
  27079  7d1f		       04		      .byte.b	4
  27080  7d20
  27081  7d20		       08 04 1d 	      .byte.b	8,4,29
  27082  7d23
  27083  7d23		       03 01 1a 	      .byte.b	3,1,26
  27084  7d26
  27085  7d26		       04		      .byte.b	4
  27086  7d27
  27087  7d27		       08 04 18 	      .byte.b	8,4,24
  27088  7d2a
  27089  7d2a		       04 0c 18 	      .byte.b	4,12,24
  27090  7d2d
  27091  7d2d		       04		      .byte.b	4
  27092  7d2e
  27093  7d2e		       08 04 12 	      .byte.b	8,4,18
  27094  7d31
  27095  7d31		       04 0c 10 	      .byte.b	4,12,16
  27096  7d34
  27097  7d34		       0c		      .byte.b	12
  27098  7d35
  27099  7d35		       08 04 18 	      .byte.b	8,4,24
  27100  7d38
  27101  7d38		       04 0c 13 	      .byte.b	4,12,19
  27102  7d3b
  27103  7d3b		       0c		      .byte.b	12
  27104  7d3c
  27105  7d3c		       06 01 08 	      .byte.b	6,1,8
  27106  7d3f
  27107  7d3f		       00 00 00 	      .byte.b	0,0,0
  27108  7d42
  27109  7d42		       04		      .byte.b	4
  27110  7d43
  27111  7d43		       08 0c 11 	      .byte.b	8,12,17
  27112  7d46
  27113  7d46		       04 0c 1d 	      .byte.b	4,12,29
  27114  7d49
  27115  7d49		       04		      .byte.b	4
  27116  7d4a
  27117  7d4a		       08 0c 0e 	      .byte.b	8,12,14
  27118  7d4d
  27119  7d4d		       03 01 08 	      .byte.b	3,1,8
  27120  7d50
  27121  7d50		       04		      .byte.b	4
  27122  7d51
  27123  7d51		       06 01 08 	      .byte.b	6,1,8
  27124  7d54
  27125  7d54		       03 01 0d 	      .byte.b	3,1,13
  27126  7d57
  27127  7d57		       04		      .byte.b	4
  27128  7d58
  27129  7d58		       08 04 1a 	      .byte.b	8,4,26
  27130  7d5b
  27131  7d5b		       04 0c 1d 	      .byte.b	4,12,29
  27132  7d5e
  27133  7d5e		       04		      .byte.b	4
  27134  7d5f
  27135  7d5f		       08 04 15 	      .byte.b	8,4,21
  27136  7d62
  27137  7d62		       03 01 08 	      .byte.b	3,1,8
  27138  7d65
  27139  7d65		       04		      .byte.b	4
  27140  7d66
  27141  7d66		       08 04 10 	      .byte.b	8,4,16
  27142  7d69
  27143  7d69		       04 0c 0e 	      .byte.b	4,12,14
  27144  7d6c
  27145  7d6c		       0a		      .byte.b	10
  27146  7d6d
  27147  7d6d		       04 04 10 	      .byte.b	4,4,16
  27148  7d70
  27149  7d70		       02 0c 0e 	      .byte.b	2,12,14
  27150  7d73
  27151  7d73		       02		      .byte.b	2
  27152  7d74
  27153  7d74		       08 04 10 	      .byte.b	8,4,16
  27154  7d77
  27155  7d77		       04 0c 11 	      .byte.b	4,12,17
  27156  7d7a
  27157  7d7a		       03		      .byte.b	3
  27158  7d7b
  27159  7d7b		       04 04 10 	      .byte.b	4,4,16
  27160  7d7e
  27161  7d7e		       02 0c 11 	      .byte.b	2,12,17
  27162  7d81
  27163  7d81		       01		      .byte.b	1
  27164  7d82
  27165  7d82		       08 04 10 	      .byte.b	8,4,16
  27166  7d85
  27167  7d85		       04 0c 11 	      .byte.b	4,12,17
  27168  7d88
  27169  7d88		       03		      .byte.b	3
  27170  7d89
  27171  7d89		       04 04 10 	      .byte.b	4,4,16
  27172  7d8c
  27173  7d8c		       02 0c 11 	      .byte.b	2,12,17
  27174  7d8f
  27175  7d8f		       01		      .byte.b	1
  27176  7d90
  27177  7d90		       08 04 10 	      .byte.b	8,4,16
  27178  7d93
  27179  7d93		       04 0c 11 	      .byte.b	4,12,17
  27180  7d96
  27181  7d96		       03		      .byte.b	3
  27182  7d97
  27183  7d97		       04 04 10 	      .byte.b	4,4,16
  27184  7d9a
  27185  7d9a		       02 0c 11 	      .byte.b	2,12,17
  27186  7d9d
  27187  7d9d		       01		      .byte.b	1
  27188  7d9e
  27189  7d9e		       08 04 0e 	      .byte.b	8,4,14
  27190  7da1
  27191  7da1		       04 0c 0f 	      .byte.b	4,12,15
  27192  7da4
  27193  7da4		       18		      .byte.b	24
  27194  7da5
  27195  7da5		       00 00 00 	      .byte.b	0,0,0
  27196  7da8
  27197  7da8		       00 00 00 	      .byte.b	0,0,0
  27198  7dab
  27199  7dab		       0c		      .byte.b	12
  27200  7dac
  27201  7dac		       ff		      .byte.b	255
  27202  7dad
  27203  7dad				   .skipL01471
  27204  7dad				   .L01472		;  return
  27205  7dad
  27206  7dad		       ba		      tsx
  27207  7dae		       b5 02		      lda	2,x	; check return address
  27208  7db0		       49 dd		      eor	#(>*)	; vs. current PCH
  27209  7db2		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  27210  7db4		       f0 03		      beq	*+5	; if equal, do normal return
  27211  7db6		       4c dd ff 	      JMP	BS_return
  27212  7db9		       60		      RTS
  27213  7dba				   .
  27214  7dba							; 
  27215  7dba
  27216  7dba				   .__Play_Death_Music
  27217  7dba							; __Play_Death_Music
  27218  7dba
  27219  7dba				   .
  27220  7dba							; 
  27221  7dba
  27222  7dba				   .
  27223  7dba							; 
  27224  7dba
  27225  7dba				   .
  27226  7dba							; 
  27227  7dba
  27228  7dba				   .
  27229  7dba							; 
  27230  7dba
  27231  7dba				   .L01473		;  _Music_Duration  =	_Music_Duration  -  1
  27232  7dba
  27233  7dba		       c6 e3		      DEC	_Music_Duration
  27234  7dbc				   .
  27235  7dbc							; 
  27236  7dbc
  27237  7dbc				   .L01474		;  if _Music_Duration	>  0 then goto __Got_Death_Music
  27238  7dbc
  27239  7dbc		       a9 00		      LDA	#0
  27240  7dbe		       c5 e3		      CMP	_Music_Duration
  27241  7dc0		       b0 03		      BCS	.skipL01474
  27242  7dc2				   .condpart662
  27243  7dc2		       4c 3e de 	      jmp	.__Got_Death_Music
  27244  7dc5
  27245  7dc5				   .skipL01474
  27246  7dc5				   .
  27247  7dc5							; 
  27248  7dc5
  27249  7dc5				   .
  27250  7dc5							; 
  27251  7dc5
  27252  7dc5				   .
  27253  7dc5							; 
  27254  7dc5
  27255  7dc5				   .
  27256  7dc5							; 
  27257  7dc5
  27258  7dc5				   .L01475		;  temp4  =  sread ( _DeathMusicData ) 
  27259  7dc5
  27260  7dc5		       a2 e4		      ldx	#_DeathMusicData
  27261  7dc7		       a1 00		      lda	(0,x)
  27262  7dc9		       f6 00		      inc	0,x
  27263  7dcb		       d0 02		      bne	*+4
  27264  7dcd		       f6 01		      inc	1,x
  27265  7dcf		       85 9f		      STA	temp4
  27266  7dd1				   .
  27267  7dd1							; 
  27268  7dd1
  27269  7dd1				   .
  27270  7dd1							; 
  27271  7dd1
  27272  7dd1				   .
  27273  7dd1							; 
  27274  7dd1
  27275  7dd1				   .
  27276  7dd1							; 
  27277  7dd1
  27278  7dd1				   .L01476		;  if temp4  =  255 then _Music_Duration  =  255  :  goto __Got_Death_Music
  27279  7dd1
  27280  7dd1		       a5 9f		      LDA	temp4
  27281  7dd3		       c9 ff		      CMP	#255
  27282  7dd5		       d0 07		      BNE	.skipL01476
  27283  7dd7				   .condpart663
  27284  7dd7		       a9 ff		      LDA	#255
  27285  7dd9		       85 e3		      STA	_Music_Duration
  27286  7ddb		       4c 3e de 	      jmp	.__Got_Death_Music
  27287  7dde
  27288  7dde				   .skipL01476
  27289  7dde				   .
  27290  7dde							; 
  27291  7dde
  27292  7dde				   .
  27293  7dde							; 
  27294  7dde
  27295  7dde				   .
  27296  7dde							; 
  27297  7dde
  27298  7dde				   .
  27299  7dde							; 
  27300  7dde
  27301  7dde				   .L01477		;  temp5  =  sread ( _DeathMusicData ) 
  27302  7dde
  27303  7dde		       a2 e4		      ldx	#_DeathMusicData
  27304  7de0		       a1 00		      lda	(0,x)
  27305  7de2		       f6 00		      inc	0,x
  27306  7de4		       d0 02		      bne	*+4
  27307  7de6		       f6 01		      inc	1,x
  27308  7de8		       85 a0		      STA	temp5
  27309  7dea				   .L01478		;  temp6  =  sread ( _DeathMusicData ) 
  27310  7dea
  27311  7dea		       a2 e4		      ldx	#_DeathMusicData
  27312  7dec		       a1 00		      lda	(0,x)
  27313  7dee		       f6 00		      inc	0,x
  27314  7df0		       d0 02		      bne	*+4
  27315  7df2		       f6 01		      inc	1,x
  27316  7df4		       85 a1		      STA	temp6
  27317  7df6				   .
  27318  7df6							; 
  27319  7df6
  27320  7df6				   .
  27321  7df6							; 
  27322  7df6
  27323  7df6				   .
  27324  7df6							; 
  27325  7df6
  27326  7df6				   .
  27327  7df6							; 
  27328  7df6
  27329  7df6				   .L01479		;  AUDV0  =  temp4
  27330  7df6
  27331  7df6		       a5 9f		      LDA	temp4
  27332  7df8		       85 19		      STA	AUDV0
  27333  7dfa				   .L01480		;  AUDC0  =  temp5
  27334  7dfa
  27335  7dfa		       a5 a0		      LDA	temp5
  27336  7dfc		       85 15		      STA	AUDC0
  27337  7dfe				   .L01481		;  AUDF0  =  temp6
  27338  7dfe
  27339  7dfe		       a5 a1		      LDA	temp6
  27340  7e00		       85 17		      STA	AUDF0
  27341  7e02				   .
  27342  7e02							; 
  27343  7e02
  27344  7e02				   .
  27345  7e02							; 
  27346  7e02
  27347  7e02				   .
  27348  7e02							; 
  27349  7e02
  27350  7e02				   .
  27351  7e02							; 
  27352  7e02
  27353  7e02				   .L01482		;  temp4  =  sread ( _DeathMusicData ) 
  27354  7e02
  27355  7e02		       a2 e4		      ldx	#_DeathMusicData
  27356  7e04		       a1 00		      lda	(0,x)
  27357  7e06		       f6 00		      inc	0,x
  27358  7e08		       d0 02		      bne	*+4
  27359  7e0a		       f6 01		      inc	1,x
  27360  7e0c		       85 9f		      STA	temp4
  27361  7e0e				   .L01483		;  temp5  =  sread ( _DeathMusicData ) 
  27362  7e0e
  27363  7e0e		       a2 e4		      ldx	#_DeathMusicData
  27364  7e10		       a1 00		      lda	(0,x)
  27365  7e12		       f6 00		      inc	0,x
  27366  7e14		       d0 02		      bne	*+4
  27367  7e16		       f6 01		      inc	1,x
  27368  7e18		       85 a0		      STA	temp5
  27369  7e1a				   .L01484		;  temp6  =  sread ( _DeathMusicData ) 
  27370  7e1a
  27371  7e1a		       a2 e4		      ldx	#_DeathMusicData
  27372  7e1c		       a1 00		      lda	(0,x)
  27373  7e1e		       f6 00		      inc	0,x
  27374  7e20		       d0 02		      bne	*+4
  27375  7e22		       f6 01		      inc	1,x
  27376  7e24		       85 a1		      STA	temp6
  27377  7e26				   .
  27378  7e26							; 
  27379  7e26
  27380  7e26				   .
  27381  7e26							; 
  27382  7e26
  27383  7e26				   .
  27384  7e26							; 
  27385  7e26
  27386  7e26				   .
  27387  7e26							; 
  27388  7e26
  27389  7e26				   .L01485		;  AUDV1  =  temp4
  27390  7e26
  27391  7e26		       a5 9f		      LDA	temp4
  27392  7e28		       85 1a		      STA	AUDV1
  27393  7e2a				   .L01486		;  AUDC1  =  temp5
  27394  7e2a
  27395  7e2a		       a5 a0		      LDA	temp5
  27396  7e2c		       85 16		      STA	AUDC1
  27397  7e2e				   .L01487		;  AUDF1  =  temp6
  27398  7e2e
  27399  7e2e		       a5 a1		      LDA	temp6
  27400  7e30		       85 18		      STA	AUDF1
  27401  7e32				   .
  27402  7e32							; 
  27403  7e32
  27404  7e32				   .
  27405  7e32							; 
  27406  7e32
  27407  7e32				   .
  27408  7e32							; 
  27409  7e32
  27410  7e32				   .
  27411  7e32							; 
  27412  7e32
  27413  7e32				   .L01488		;  _Music_Duration  =	sread ( _DeathMusicData ) 
  27414  7e32
  27415  7e32		       a2 e4		      ldx	#_DeathMusicData
  27416  7e34		       a1 00		      lda	(0,x)
  27417  7e36		       f6 00		      inc	0,x
  27418  7e38		       d0 02		      bne	*+4
  27419  7e3a		       f6 01		      inc	1,x
  27420  7e3c		       85 e3		      STA	_Music_Duration
  27421  7e3e				   .
  27422  7e3e							; 
  27423  7e3e
  27424  7e3e				   .__Got_Death_Music
  27425  7e3e							; __Got_Death_Music
  27426  7e3e
  27427  7e3e				   .
  27428  7e3e							; 
  27429  7e3e
  27430  7e3e				   .L01489		;  return otherbank
  27431  7e3e
  27432  7e3e		       4c dd ff 	      JMP	BS_return
  27433  7e41				   .
  27434  7e41							; 
  27435  7e41
  27436  7e41				   .
  27437  7e41							; 
  27438  7e41
  27439  7e41				   .
  27440  7e41							; 
  27441  7e41
  27442  7e41				   .
  27443  7e41							; 
  27444  7e41
  27445  7e41				   .
  27446  7e41							; 
  27447  7e41
  27448  7e41				   .
  27449  7e41							; 
  27450  7e41
  27451  7e41				   .
  27452  7e41							; 
  27453  7e41
  27454  7e41				   .__Death_Music
  27455  7e41							; __Death_Music
  27456  7e41
  27457  7e41				   .L01490		;  sdata _DeathMusicData = q
  27458  7e41
  27459  7e41		       a9 4c		      lda	#<_DeathMusicData_begin
  27460  7e43		       85 e4		      sta	q
  27461  7e45		       a9 de		      lda	#>_DeathMusicData_begin
  27462  7e47		       85 e5		      sta	q+1
  27463  7e49		       4c d2 de 	      JMP	.skipL01490
  27464  7e4c				   _DeathMusicData_begin
  27465  7e4c		       08 04 1d 	      .byte.b	8,4,29
  27466  7e4f
  27467  7e4f		       00 00 00 	      .byte.b	0,0,0
  27468  7e52
  27469  7e52		       01		      .byte.b	1
  27470  7e53
  27471  7e53		       08 04 1b 	      .byte.b	8,4,27
  27472  7e56
  27473  7e56		       00 00 00 	      .byte.b	0,0,0
  27474  7e59
  27475  7e59		       01		      .byte.b	1
  27476  7e5a
  27477  7e5a		       08 04 1a 	      .byte.b	8,4,26
  27478  7e5d
  27479  7e5d		       00 00 00 	      .byte.b	0,0,0
  27480  7e60
  27481  7e60		       01		      .byte.b	1
  27482  7e61
  27483  7e61		       00 00 00 	      .byte.b	0,0,0
  27484  7e64
  27485  7e64		       00 00 00 	      .byte.b	0,0,0
  27486  7e67
  27487  7e67		       09		      .byte.b	9
  27488  7e68
  27489  7e68		       08 04 1f 	      .byte.b	8,4,31
  27490  7e6b
  27491  7e6b		       04 0c 1a 	      .byte.b	4,12,26
  27492  7e6e
  27493  7e6e		       03		      .byte.b	3
  27494  7e6f
  27495  7e6f		       08 04 15 	      .byte.b	8,4,21
  27496  7e72
  27497  7e72		       04 04 1a 	      .byte.b	4,4,26
  27498  7e75
  27499  7e75		       03		      .byte.b	3
  27500  7e76
  27501  7e76		       04 04 15 	      .byte.b	4,4,21
  27502  7e79
  27503  7e79		       02 04 1a 	      .byte.b	2,4,26
  27504  7e7c
  27505  7e7c		       03		      .byte.b	3
  27506  7e7d
  27507  7e7d		       08 04 15 	      .byte.b	8,4,21
  27508  7e80
  27509  7e80		       04 0c 1a 	      .byte.b	4,12,26
  27510  7e83
  27511  7e83		       02		      .byte.b	2
  27512  7e84
  27513  7e84		       04 04 15 	      .byte.b	4,4,21
  27514  7e87
  27515  7e87		       02 0c 1a 	      .byte.b	2,12,26
  27516  7e8a
  27517  7e8a		       01		      .byte.b	1
  27518  7e8b
  27519  7e8b		       08 04 15 	      .byte.b	8,4,21
  27520  7e8e
  27521  7e8e		       04 0c 1a 	      .byte.b	4,12,26
  27522  7e91
  27523  7e91		       04		      .byte.b	4
  27524  7e92
  27525  7e92		       08 04 17 	      .byte.b	8,4,23
  27526  7e95
  27527  7e95		       04 0c 17 	      .byte.b	4,12,23
  27528  7e98
  27529  7e98		       04		      .byte.b	4
  27530  7e99
  27531  7e99		       08 04 1a 	      .byte.b	8,4,26
  27532  7e9c
  27533  7e9c		       04 0c 14 	      .byte.b	4,12,20
  27534  7e9f
  27535  7e9f		       04		      .byte.b	4
  27536  7ea0
  27537  7ea0		       08 04 1d 	      .byte.b	8,4,29
  27538  7ea3
  27539  7ea3		       04 0c 13 	      .byte.b	4,12,19
  27540  7ea6
  27541  7ea6		       03		      .byte.b	3
  27542  7ea7
  27543  7ea7		       08 0c 0f 	      .byte.b	8,12,15
  27544  7eaa
  27545  7eaa		       02 0c 13 	      .byte.b	2,12,19
  27546  7ead
  27547  7ead		       03		      .byte.b	3
  27548  7eae
  27549  7eae		       04 0c 0f 	      .byte.b	4,12,15
  27550  7eb1
  27551  7eb1		       04 0c 1a 	      .byte.b	4,12,26
  27552  7eb4
  27553  7eb4		       03		      .byte.b	3
  27554  7eb5
  27555  7eb5		       08 0c 0f 	      .byte.b	8,12,15
  27556  7eb8
  27557  7eb8		       02 0c 1a 	      .byte.b	2,12,26
  27558  7ebb
  27559  7ebb		       03		      .byte.b	3
  27560  7ebc
  27561  7ebc		       08 0c 13 	      .byte.b	8,12,19
  27562  7ebf
  27563  7ebf		       04 01 1f 	      .byte.b	4,1,31
  27564  7ec2
  27565  7ec2		       03		      .byte.b	3
  27566  7ec3
  27567  7ec3		       04 0c 13 	      .byte.b	4,12,19
  27568  7ec6
  27569  7ec6		       02 01 1f 	      .byte.b	2,1,31
  27570  7ec9
  27571  7ec9		       03		      .byte.b	3
  27572  7eca
  27573  7eca		       00 00 00 	      .byte.b	0,0,0
  27574  7ecd
  27575  7ecd		       00 00 00 	      .byte.b	0,0,0
  27576  7ed0
  27577  7ed0		       09		      .byte.b	9
  27578  7ed1
  27579  7ed1		       ff		      .byte.b	255
  27580  7ed2
  27581  7ed2				   .skipL01490
  27582  7ed2				   .L01491		;  return otherbank
  27583  7ed2
  27584  7ed2		       4c dd ff 	      JMP	BS_return
  27585  7ed5				   .
  27586  7ed5							; 
  27587  7ed5
  27588  7ed5				   .__Play_Final_Music
  27589  7ed5							; __Play_Final_Music
  27590  7ed5
  27591  7ed5				   .
  27592  7ed5							; 
  27593  7ed5
  27594  7ed5				   .
  27595  7ed5							; 
  27596  7ed5
  27597  7ed5				   .
  27598  7ed5							; 
  27599  7ed5
  27600  7ed5				   .
  27601  7ed5							; 
  27602  7ed5
  27603  7ed5				   .L01492		;  _Music_Duration  =	_Music_Duration  -  1
  27604  7ed5
  27605  7ed5		       c6 e3		      DEC	_Music_Duration
  27606  7ed7				   .
  27607  7ed7							; 
  27608  7ed7
  27609  7ed7				   .L01493		;  if _Music_Duration	>  0 then goto __Got_Final_Music
  27610  7ed7
  27611  7ed7		       a9 00		      LDA	#0
  27612  7ed9		       c5 e3		      CMP	_Music_Duration
  27613  7edb		       b0 03		      BCS	.skipL01493
  27614  7edd				   .condpart664
  27615  7edd		       4c 29 df 	      jmp	.__Got_Final_Music
  27616  7ee0
  27617  7ee0				   .skipL01493
  27618  7ee0				   .
  27619  7ee0							; 
  27620  7ee0
  27621  7ee0				   .
  27622  7ee0							; 
  27623  7ee0
  27624  7ee0				   .
  27625  7ee0							; 
  27626  7ee0
  27627  7ee0				   .
  27628  7ee0							; 
  27629  7ee0
  27630  7ee0				   .L01494		;  temp4  =  sread ( _FinalMusicData ) 
  27631  7ee0
  27632  7ee0		       a2 e4		      ldx	#_FinalMusicData
  27633  7ee2		       a1 00		      lda	(0,x)
  27634  7ee4		       f6 00		      inc	0,x
  27635  7ee6		       d0 02		      bne	*+4
  27636  7ee8		       f6 01		      inc	1,x
  27637  7eea		       85 9f		      STA	temp4
  27638  7eec				   .
  27639  7eec							; 
  27640  7eec
  27641  7eec				   .
  27642  7eec							; 
  27643  7eec
  27644  7eec				   .
  27645  7eec							; 
  27646  7eec
  27647  7eec				   .
  27648  7eec							; 
  27649  7eec
  27650  7eec				   .L01495		;  if temp4  =  255 then _Music_Duration  =  255  :  goto __Got_Final_Music
  27651  7eec
  27652  7eec		       a5 9f		      LDA	temp4
  27653  7eee		       c9 ff		      CMP	#255
  27654  7ef0		       d0 07		      BNE	.skipL01495
  27655  7ef2				   .condpart665
  27656  7ef2		       a9 ff		      LDA	#255
  27657  7ef4		       85 e3		      STA	_Music_Duration
  27658  7ef6		       4c 29 df 	      jmp	.__Got_Final_Music
  27659  7ef9
  27660  7ef9				   .skipL01495
  27661  7ef9				   .
  27662  7ef9							; 
  27663  7ef9
  27664  7ef9				   .
  27665  7ef9							; 
  27666  7ef9
  27667  7ef9				   .
  27668  7ef9							; 
  27669  7ef9
  27670  7ef9				   .
  27671  7ef9							; 
  27672  7ef9
  27673  7ef9				   .L01496		;  temp5  =  sread ( _FinalMusicData ) 
  27674  7ef9
  27675  7ef9		       a2 e4		      ldx	#_FinalMusicData
  27676  7efb		       a1 00		      lda	(0,x)
  27677  7efd		       f6 00		      inc	0,x
  27678  7eff		       d0 02		      bne	*+4
  27679  7f01		       f6 01		      inc	1,x
  27680  7f03		       85 a0		      STA	temp5
  27681  7f05				   .L01497		;  temp6  =  sread ( _FinalMusicData ) 
  27682  7f05
  27683  7f05		       a2 e4		      ldx	#_FinalMusicData
  27684  7f07		       a1 00		      lda	(0,x)
  27685  7f09		       f6 00		      inc	0,x
  27686  7f0b		       d0 02		      bne	*+4
  27687  7f0d		       f6 01		      inc	1,x
  27688  7f0f		       85 a1		      STA	temp6
  27689  7f11				   .
  27690  7f11							; 
  27691  7f11
  27692  7f11				   .
  27693  7f11							; 
  27694  7f11
  27695  7f11				   .
  27696  7f11							; 
  27697  7f11
  27698  7f11				   .
  27699  7f11							; 
  27700  7f11
  27701  7f11				   .L01498		;  AUDV0  =  temp4
  27702  7f11
  27703  7f11		       a5 9f		      LDA	temp4
  27704  7f13		       85 19		      STA	AUDV0
  27705  7f15				   .L01499		;  AUDC0  =  temp5
  27706  7f15
  27707  7f15		       a5 a0		      LDA	temp5
  27708  7f17		       85 15		      STA	AUDC0
  27709  7f19				   .L01500		;  AUDF0  =  temp6
  27710  7f19
  27711  7f19		       a5 a1		      LDA	temp6
  27712  7f1b		       85 17		      STA	AUDF0
  27713  7f1d				   .
  27714  7f1d							; 
  27715  7f1d
  27716  7f1d				   .
  27717  7f1d							; 
  27718  7f1d
  27719  7f1d				   .
  27720  7f1d							; 
  27721  7f1d
  27722  7f1d				   .
  27723  7f1d							; 
  27724  7f1d
  27725  7f1d				   .L01501		;  _Music_Duration  =	sread ( _FinalMusicData ) 
  27726  7f1d
  27727  7f1d		       a2 e4		      ldx	#_FinalMusicData
  27728  7f1f		       a1 00		      lda	(0,x)
  27729  7f21		       f6 00		      inc	0,x
  27730  7f23		       d0 02		      bne	*+4
  27731  7f25		       f6 01		      inc	1,x
  27732  7f27		       85 e3		      STA	_Music_Duration
  27733  7f29				   .
  27734  7f29							; 
  27735  7f29
  27736  7f29				   .__Got_Final_Music
  27737  7f29							; __Got_Final_Music
  27738  7f29
  27739  7f29				   .
  27740  7f29							; 
  27741  7f29
  27742  7f29				   .L01502		;  return otherbank
  27743  7f29
  27744  7f29		       4c dd ff 	      JMP	BS_return
  27745  7f2c				   .
  27746  7f2c							; 
  27747  7f2c
  27748  7f2c				   .
  27749  7f2c							; 
  27750  7f2c
  27751  7f2c				   .
  27752  7f2c							; 
  27753  7f2c
  27754  7f2c				   .
  27755  7f2c							; 
  27756  7f2c
  27757  7f2c				   .
  27758  7f2c							; 
  27759  7f2c
  27760  7f2c				   .
  27761  7f2c							; 
  27762  7f2c
  27763  7f2c				   .
  27764  7f2c							; 
  27765  7f2c
  27766  7f2c				   .__Final_Music
  27767  7f2c							; __Final_Music
  27768  7f2c
  27769  7f2c				   .L01503		;  sdata _FinalMusicData = q
  27770  7f2c
  27771  7f2c		       a9 37		      lda	#<_FinalMusicData_begin
  27772  7f2e		       85 e4		      sta	q
  27773  7f30		       a9 df		      lda	#>_FinalMusicData_begin
  27774  7f32		       85 e5		      sta	q+1
  27775  7f34		       4c 7c df 	      JMP	.skipL01503
  27776  7f37				   _FinalMusicData_begin
  27777  7f37		       08 0c 1d 	      .byte.b	8,12,29
  27778  7f3a
  27779  7f3a		       04		      .byte.b	4
  27780  7f3b
  27781  7f3b		       08 0c 11 	      .byte.b	8,12,17
  27782  7f3e
  27783  7f3e		       04		      .byte.b	4
  27784  7f3f
  27785  7f3f		       08 0c 13 	      .byte.b	8,12,19
  27786  7f42
  27787  7f42		       04		      .byte.b	4
  27788  7f43
  27789  7f43		       08 0c 1d 	      .byte.b	8,12,29
  27790  7f46
  27791  7f46		       04		      .byte.b	4
  27792  7f47
  27793  7f47		       08 0c 11 	      .byte.b	8,12,17
  27794  7f4a
  27795  7f4a		       04		      .byte.b	4
  27796  7f4b
  27797  7f4b		       08 0c 13 	      .byte.b	8,12,19
  27798  7f4e
  27799  7f4e		       04		      .byte.b	4
  27800  7f4f
  27801  7f4f		       08 0c 1d 	      .byte.b	8,12,29
  27802  7f52
  27803  7f52		       04		      .byte.b	4
  27804  7f53
  27805  7f53		       08 0c 11 	      .byte.b	8,12,17
  27806  7f56
  27807  7f56		       04		      .byte.b	4
  27808  7f57
  27809  7f57		       08 0c 13 	      .byte.b	8,12,19
  27810  7f5a
  27811  7f5a		       02		      .byte.b	2
  27812  7f5b
  27813  7f5b		       07 0c 13 	      .byte.b	7,12,19
  27814  7f5e
  27815  7f5e		       02		      .byte.b	2
  27816  7f5f
  27817  7f5f		       06 0c 13 	      .byte.b	6,12,19
  27818  7f62
  27819  7f62		       02		      .byte.b	2
  27820  7f63
  27821  7f63		       05 0c 13 	      .byte.b	5,12,19
  27822  7f66
  27823  7f66		       02		      .byte.b	2
  27824  7f67
  27825  7f67		       04 0c 13 	      .byte.b	4,12,19
  27826  7f6a
  27827  7f6a		       02		      .byte.b	2
  27828  7f6b
  27829  7f6b		       03 0c 13 	      .byte.b	3,12,19
  27830  7f6e
  27831  7f6e		       02		      .byte.b	2
  27832  7f6f
  27833  7f6f		       02 0c 13 	      .byte.b	2,12,19
  27834  7f72
  27835  7f72		       02		      .byte.b	2
  27836  7f73
  27837  7f73		       01 0c 13 	      .byte.b	1,12,19
  27838  7f76
  27839  7f76		       02		      .byte.b	2
  27840  7f77
  27841  7f77		       00 00 00 	      .byte.b	0,0,0
  27842  7f7a
  27843  7f7a		       02		      .byte.b	2
  27844  7f7b
  27845  7f7b		       ff		      .byte.b	255
  27846  7f7c
  27847  7f7c				   .skipL01503
  27848  7f7c				   .L01504		;  return otherbank
  27849  7f7c
  27850  7f7c		       4c dd ff 	      JMP	BS_return
  27851  7f7f				   .
  27852  7f7f							; 
  27853  7f7f
  27854  7f7f				   .
  27855  7f7f							; 
  27856  7f7f
  27857  7f7f				   .
  27858  7f7f							; 
  27859  7f7f
  27860  7f7f				   .
  27861  7f7f							; 
  27862  7f7f
  27863  7f7f				   .
  27864  7f7f							; 
  27865  7f7f
  27866  7f7f				   .
  27867  7f7f							; 
  27868  7f7f
  27869  7f7f				   .
  27870  7f7f							; 
  27871  7f7f
  27872  7f7f				   .
  27873  7f7f							; 
  27874  7f7f
  27875  7f7f				   .
  27876  7f7f							; 
  27877  7f7f
  27878  7f7f				   .
  27879  7f7f							; 
  27880  7f7f
  27881  7f7f				   .
  27882  7f7f							; 
  27883  7f7f
  27884  7f7f				   .L01505		;  bank 8
  27885  7f7f
  27886  7f7f					      if	ECHO7
      85 bytes of ROM space left in bank 7
  27887  7f7f					      echo	"    ",[(start_bank7 - *)]d , "bytes of ROM space left in bank 7")
  27888  7f7f					      endif
  27889  7f7f		       00 01	   ECHO7      =	1
  27890  7fd4					      ORG	$7FF4-bscode_length
  27891  7fd4					      RORG	$DFF4-bscode_length
  27892  7fd4		       a2 ff	   start_bank7 ldx	#$ff
  27893  7fd6				  -	      ifconst	FASTFETCH	; using DPC+
  27894  7fd6				  -	      stx	FASTFETCH
  27895  7fd6					      endif
  27896  7fd6		       9a		      txs
  27897  7fd7				  -	      if	bankswitch == 64
  27898  7fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  27899  7fd7					      else
  27900  7fd7		       a9 f2		      lda	#>(start-1)
  27901  7fd9					      endif
  27902  7fd9		       48		      pha
  27903  7fda		       a9 51		      lda	#<(start-1)
  27904  7fdc		       48		      pha
  27905  7fdd		       48		      pha
  27906  7fde		       8a		      txa
  27907  7fdf		       48		      pha
  27908  7fe0		       ba		      tsx
  27909  7fe1					      if	bankswitch != 64
  27910  7fe1		       b5 04		      lda	4,x	; get high byte of return address
  27911  7fe3		       2a		      rol
  27912  7fe4		       2a		      rol
  27913  7fe5		       2a		      rol
  27914  7fe6		       2a		      rol
  27915  7fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  27916  7fe9		       aa		      tax
  27917  7fea		       e8		      inx
  27918  7feb				  -	      else
  27919  7feb				  -	      lda	4,x	; get high byte of return address
  27920  7feb				  -	      tay
  27921  7feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  27922  7feb				  -	      sta	4,x
  27923  7feb				  -	      tya
  27924  7feb				  -	      lsr
  27925  7feb				  -	      lsr
  27926  7feb				  -	      lsr
  27927  7feb				  -	      lsr
  27928  7feb				  -	      tax
  27929  7feb				  -	      inx
  27930  7feb					      endif
  27931  7feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  27932  7fee		       68		      pla
  27933  7fef		       aa		      tax
  27934  7ff0		       68		      pla
  27935  7ff1		       60		      rts
  27936  7ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  27937  7ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  27938  7ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  27939  7ff2					      endif
  27940  7ffc					      ORG	$7FFC
  27941  7ffc					      RORG	$DFFC
  27942  7ffc		       d4 df		      .word.w	(start_bank7 & $ffff)
  27943  7ffe		       d4 df		      .word.w	(start_bank7 & $ffff)
  27944  8000					      ORG	$8000
  27945  8000					      RORG	$F000
  27946  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
  27947  8000
  27948  8000							; This is a 2-line kernel!
  27949  8000					      ifnconst	vertical_reflect
  27950  8000				   kernel
  27951  8000					      endif
  27952  8000		       85 02		      sta	WSYNC
  27953  8002		       a9 ff		      lda	#255
  27954  8004		       8d 96 02 	      sta	TIM64T
  27955  8007
  27956  8007		       a9 01		      lda	#1
  27957  8009		       85 27		      sta	VDELBL
  27958  800b		       85 25		      sta	VDELP0
  27959  800d		       a6 92		      ldx	ballheight
  27960  800f		       e8		      inx
  27961  8010		       e8		      inx
  27962  8011		       86 9f		      stx	temp4
  27963  8013		       a5 86		      lda	player1y
  27964  8015		       85 9e		      sta	temp3
  27965  8017
  27966  8017				  -	      ifconst	shakescreen
  27967  8017				  -	      jsr	doshakescreen
  27968  8017					      else
  27969  8017		       a6 90		      ldx	missile0height
  27970  8019		       e8		      inx
  27971  801a					      endif
  27972  801a
  27973  801a		       e8		      inx
  27974  801b		       86 f6		      stx	stack1
  27975  801d
  27976  801d		       a5 89		      lda	bally
  27977  801f		       85 f7		      sta	stack2
  27978  8021
  27979  8021		       a5 85		      lda	player0y
  27980  8023		       a2 00		      ldx	#0
  27981  8025		       85 02		      sta	WSYNC
  27982  8027		       86 1b		      stx	GRP0
  27983  8029		       86 1c		      stx	GRP1
  27984  802b		       86 0e		      stx	PF1L
  27985  802d		       86 0f		      stx	PF2
  27986  802f		       86 2c		      stx	CXCLR
  27987  8031				  -	      ifconst	readpaddle
  27988  8031				  -	      stx	paddle
  27989  8031					      else
      0  8031					      sleep	3
      1  8031				   .CYCLES    SET	3
      2  8031
      3  8031				  -	      IF	.CYCLES < 2
      4  8031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8031				  -	      ERR
      6  8031					      ENDIF
      7  8031
      8  8031					      IF	.CYCLES & 1
      9  8031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8031		       04 00		      nop	0
     11  8033				  -	      ELSE
     12  8033				  -	      bit	VSYNC
     13  8033					      ENDIF
     14  8033				   .CYCLES    SET	.CYCLES - 3
     15  8033					      ENDIF
     16  8033
     17  8033				  -	      REPEAT	.CYCLES / 2
     18  8033				  -	      nop
     19  8033					      REPEND
  27991  8033					      endif
  27992  8033
  27993  8033		       95 9d		      sta	temp2,x
  27994  8035
  27995  8035							;store these so they can be retrieved later
  27996  8035					      ifnconst	pfres
  27997  8035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
  27998  8037				  -	      else
  27999  8037				  -	      ldx	#132-pfres*pfwidth
  28000  8037					      endif
  28001  8037
  28002  8037		       c6 85		      dec	player0y
  28003  8039
  28004  8039		       a5 91		      lda	missile0y
  28005  803b		       85 a0		      sta	temp5
  28006  803d		       a5 88		      lda	missile1y
  28007  803f		       85 a1		      sta	temp6
  28008  8041
  28009  8041		       a5 ef		      lda	playfieldpos
  28010  8043		       85 9c		      sta	temp1
  28011  8045
  28012  8045				  -	      ifconst	pfrowheight
  28013  8045				  -	      lda	#pfrowheight+2
  28014  8045					      else
  28015  8045					      ifnconst	pfres
  28016  8045		       a9 0a		      lda	#10
  28017  8047				  -	      else
  28018  8047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  28019  8047					      endif
  28020  8047					      endif
  28021  8047		       18		      clc
  28022  8048		       e5 ef		      sbc	playfieldpos
  28023  804a		       85 ef		      sta	playfieldpos
  28024  804c		       4c 74 f0 	      jmp	.startkernel
  28025  804f
  28026  804f				   .skipDrawP0
  28027  804f		       a9 00		      lda	#0
  28028  8051		       a8		      tay
  28029  8052		       4c a3 f0 	      jmp	.continueP0
  28030  8055
  28031  8055				   .skipDrawP1
  28032  8055		       a9 00		      lda	#0
  28033  8057		       a8		      tay
  28034  8058		       4c 7e f0 	      jmp	.continueP1
  28035  805b
  28036  805b				   .kerloop		; enter at cycle 59??
  28037  805b
  28038  805b				   continuekernel
      0  805b					      sleep	2
      1  805b				   .CYCLES    SET	2
      2  805b
      3  805b				  -	      IF	.CYCLES < 2
      4  805b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  805b				  -	      ERR
      6  805b					      ENDIF
      7  805b
      8  805b				  -	      IF	.CYCLES & 1
      9  805b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  805b				  -	      nop	0
     11  805b				  -	      ELSE
     12  805b				  -	      bit	VSYNC
     13  805b				  -	      ENDIF
     14  805b				  -.CYCLES    SET	.CYCLES - 3
     15  805b					      ENDIF
     16  805b
     17  805b					      REPEAT	.CYCLES / 2
     18  805b		       ea		      nop
     19  805c					      REPEND
  28040  805c				   continuekernel2
  28041  805c		       a5 92		      lda	ballheight
  28042  805e
  28043  805e				  -	      ifconst	pfres
  28044  805e				  -	      ldy	playfield+pfres*pfwidth-132,x
  28045  805e				  -	      sty	PF1L	;3
  28046  805e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
  28047  805e				  -	      sty	PF2L	;3
  28048  805e				  -	      ldy	playfield+pfres*pfwidth-129,x
  28049  805e				  -	      sty	PF1R	; 3 too early?
  28050  805e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
  28051  805e				  -	      sty	PF2R	;3
  28052  805e					      else
  28053  805e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
  28054  8060		       84 0e		      sty	PF1L	;3
  28055  8062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  28056  8064		       84 0f		      sty	PF2L	;3
  28057  8066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
  28058  8068		       84 0e		      sty	PF1R	; 3 too early?
  28059  806a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  28060  806c		       84 0f		      sty	PF2R	;3
  28061  806e					      endif
  28062  806e
  28063  806e							; should be playfield+$38 for width=2
  28064  806e
  28065  806e		       c7 89		      dcp	bally
  28066  8070		       2a		      rol
  28067  8071		       2a		      rol
  28068  8072							; rol
  28069  8072							; rol
  28070  8072				   goback
  28071  8072		       85 1f		      sta	ENABL
  28072  8074				   .startkernel
  28073  8074		       a5 8f		      lda	player1height	;3
  28074  8076		       c7 86		      dcp	player1y	;5
  28075  8078		       90 db		      bcc	.skipDrawP1	;2
  28076  807a		       a4 86		      ldy	player1y	;3
  28077  807c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  28078  807e							; so it doesn't cross a page boundary!
  28079  807e
  28080  807e				   .continueP1
  28081  807e		       85 1c		      sta	GRP1	;3
  28082  8080
  28083  8080				  -	      ifnconst	player1colors
  28084  8080				  -	      lda	missile1height	;3
  28085  8080				  -	      dcp	missile1y	;5
  28086  8080				  -	      rol		;2
  28087  8080				  -	      rol		;2
  28088  8080				  -	      sta	ENAM1	;3
  28089  8080					      else
  28090  8080		       b1 87		      lda	(player1color),y
  28091  8082		       85 07		      sta	COLUP1
  28092  8084				  -	      ifnconst	playercolors
  28093  8084				  -	      sleep	7
  28094  8084					      else
  28095  8084		       ad 82 00 	      lda.w	player0colorstore
  28096  8087		       85 06		      sta	COLUP0
  28097  8089					      endif
  28098  8089					      endif
  28099  8089
  28100  8089				  -	      ifconst	pfres
  28101  8089				  -	      lda	playfield+pfres*pfwidth-132,x
  28102  8089				  -	      sta	PF1L	;3
  28103  8089				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
  28104  8089				  -	      sta	PF2L	;3
  28105  8089				  -	      lda	playfield+pfres*pfwidth-129,x
  28106  8089				  -	      sta	PF1R	; 3 too early?
  28107  8089				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
  28108  8089				  -	      sta	PF2R	;3
  28109  8089					      else
  28110  8089		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
  28111  808b		       85 0e		      sta	PF1L	;3
  28112  808d		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  28113  808f		       85 0f		      sta	PF2L	;3
  28114  8091		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
  28115  8093		       85 0e		      sta	PF1R	; 3 too early?
  28116  8095		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  28117  8097		       85 0f		      sta	PF2R	;3
  28118  8099					      endif
  28119  8099							; sleep 3
  28120  8099
  28121  8099		       a5 8e		      lda	player0height
  28122  809b		       c7 85		      dcp	player0y
  28123  809d		       90 b0		      bcc	.skipDrawP0
  28124  809f		       a4 85		      ldy	player0y
  28125  80a1		       b1 8a		      lda	(player0pointer),y
  28126  80a3				   .continueP0
  28127  80a3		       85 1b		      sta	GRP0
  28128  80a5
  28129  80a5					      ifnconst	no_blank_lines
  28130  80a5				  -	      ifnconst	playercolors
  28131  80a5				  -	      lda	missile0height	;3
  28132  80a5				  -	      dcp	missile0y	;5
  28133  80a5				  -	      sbc	stack1
  28134  80a5				  -	      sta	ENAM0	;3
  28135  80a5					      else
  28136  80a5		       b1 90		      lda	(player0color),y
  28137  80a7		       85 82		      sta	player0colorstore
      0  80a9					      sleep	6
      1  80a9				   .CYCLES    SET	6
      2  80a9
      3  80a9				  -	      IF	.CYCLES < 2
      4  80a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  80a9				  -	      ERR
      6  80a9					      ENDIF
      7  80a9
      8  80a9				  -	      IF	.CYCLES & 1
      9  80a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  80a9				  -	      nop	0
     11  80a9				  -	      ELSE
     12  80a9				  -	      bit	VSYNC
     13  80a9				  -	      ENDIF
     14  80a9				  -.CYCLES    SET	.CYCLES - 3
     15  80a9					      ENDIF
     16  80a9
     17  80a9					      REPEAT	.CYCLES / 2
     18  80a9		       ea		      nop
     17  80a9					      REPEND
     18  80aa		       ea		      nop
     17  80aa					      REPEND
     18  80ab		       ea		      nop
     19  80ac					      REPEND
  28139  80ac					      endif
  28140  80ac		       c6 9c		      dec	temp1
  28141  80ae		       d0 ab		      bne	continuekernel
  28142  80b0				  -	      else
  28143  80b0				  -	      dec	temp1
  28144  80b0				  -	      beq	altkernel2
  28145  80b0				  -	      ifconst	readpaddle
  28146  80b0				  -	      ldy	currentpaddle
  28147  80b0				  -	      lda	INPT0,y
  28148  80b0				  -	      bpl	noreadpaddle
  28149  80b0				  -	      inc	paddle
  28150  80b0				  -	      jmp	continuekernel2
  28151  80b0				  -noreadpaddle
  28152  80b0				  -	      sleep	2
  28153  80b0				  -	      jmp	continuekernel
  28154  80b0				  -	      else
  28155  80b0				  -	      ifnconst	playercolors
  28156  80b0				  -	      ifconst	PFcolors
  28157  80b0				  -	      txa
  28158  80b0				  -	      tay
  28159  80b0				  -	      lda	(pfcolortable),y
  28160  80b0				  -	      ifnconst	backgroundchange
  28161  80b0				  -	      sta	COLUPF
  28162  80b0				  -	      else
  28163  80b0				  -	      sta	COLUBK
  28164  80b0				  -	      endif
  28165  80b0				  -	      jmp	continuekernel
  28166  80b0				  -	      else
  28167  80b0				  -	      ifconst	kernelmacrodef
  28168  80b0				  -	      kernelmacro
  28169  80b0				  -	      else
  28170  80b0				  -	      sleep	12
  28171  80b0				  -	      endif
  28172  80b0				  -	      endif
  28173  80b0				  -	      else
  28174  80b0				  -	      lda	(player0color),y
  28175  80b0				  -	      sta	player0colorstore
  28176  80b0				  -	      sleep	4
  28177  80b0				  -	      endif
  28178  80b0				  -	      jmp	continuekernel
  28179  80b0				  -	      endif
  28180  80b0				  -altkernel2
  28181  80b0				  -	      txa
  28182  80b0				  -	      ifnconst	vertical_reflect
  28183  80b0				  -	      sbx	#256-pfwidth
  28184  80b0				  -	      else
  28185  80b0				  -	      sbx	#256-pfwidth/2
  28186  80b0				  -	      endif
  28187  80b0				  -	      bmi	lastkernelline
  28188  80b0				  -	      ifconst	pfrowheight
  28189  80b0				  -	      lda	#pfrowheight
  28190  80b0				  -	      else
  28191  80b0				  -	      ifnconst	pfres
  28192  80b0				  -	      lda	#8
  28193  80b0				  -	      else
  28194  80b0				  -	      lda	#(96/pfres)	; try to come close to the real size
  28195  80b0				  -	      endif
  28196  80b0				  -	      endif
  28197  80b0				  -	      sta	temp1
  28198  80b0				  -	      jmp	continuekernel
  28199  80b0					      endif
  28200  80b0
  28201  80b0				   altkernel
  28202  80b0
  28203  80b0				  -	      ifconst	PFmaskvalue
  28204  80b0				  -	      lda	#PFmaskvalue
  28205  80b0					      else
  28206  80b0		       a9 00		      lda	#0
  28207  80b2					      endif
  28208  80b2		       85 0e		      sta	PF1L
  28209  80b4		       85 0f		      sta	PF2
  28210  80b6
  28211  80b6
  28212  80b6							;sleep 3
  28213  80b6
  28214  80b6							;28 cycles to fix things
  28215  80b6							;minus 11=17
  28216  80b6
  28217  80b6							; lax temp4
  28218  80b6							; clc
  28219  80b6		       8a		      txa
  28220  80b7					      ifnconst	vertical_reflect
  28221  80b7		       cb fc		      sbx	#256-pfwidth
  28222  80b9				  -	      else
  28223  80b9				  -	      sbx	#256-pfwidth/2
  28224  80b9					      endif
  28225  80b9
  28226  80b9		       30 12		      bmi	lastkernelline
  28227  80bb
  28228  80bb				  -	      ifconst	PFcolorandheight
  28229  80bb				  -	      ifconst	pfres
  28230  80bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
  28231  80bb				  -	      else
  28232  80bb				  -	      ldy	playfieldcolorandheight-87,x
  28233  80bb				  -	      endif
  28234  80bb				  -	      ifnconst	backgroundchange
  28235  80bb				  -	      sty	COLUPF
  28236  80bb				  -	      else
  28237  80bb				  -	      sty	COLUBK
  28238  80bb				  -	      endif
  28239  80bb				  -	      ifconst	pfres
  28240  80bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
  28241  80bb				  -	      else
  28242  80bb				  -	      lda	playfieldcolorandheight-88,x
  28243  80bb				  -	      endif
  28244  80bb				  -	      sta.w	temp1
  28245  80bb					      endif
  28246  80bb				  -	      ifconst	PFheights
  28247  80bb				  -	      lsr
  28248  80bb				  -	      lsr
  28249  80bb				  -	      tay
  28250  80bb				  -	      lda	(pfheighttable),y
  28251  80bb				  -	      sta.w	temp1
  28252  80bb					      endif
  28253  80bb					      ifconst	PFcolors
  28254  80bb		       a8		      tay
  28255  80bc		       b1 f0		      lda	(pfcolortable),y
  28256  80be					      ifnconst	backgroundchange
  28257  80be		       85 08		      sta	COLUPF
  28258  80c0				  -	      else
  28259  80c0				  -	      sta	COLUBK
  28260  80c0					      endif
  28261  80c0				  -	      ifconst	pfrowheight
  28262  80c0				  -	      lda	#pfrowheight
  28263  80c0					      else
  28264  80c0					      ifnconst	pfres
  28265  80c0		       a9 08		      lda	#8
  28266  80c2				  -	      else
  28267  80c2				  -	      lda	#(96/pfres)	; try to come close to the real size
  28268  80c2					      endif
  28269  80c2					      endif
  28270  80c2		       85 9c		      sta	temp1
  28271  80c4					      endif
  28272  80c4					      ifnconst	PFcolorandheight
  28273  80c4				  -	      ifnconst	PFcolors
  28274  80c4				  -	      ifnconst	PFheights
  28275  80c4				  -	      ifnconst	no_blank_lines
  28276  80c4				  -			; read paddle 0
  28277  80c4				  -			; lo-res paddle read
  28278  80c4				  -			; bit INPT0
  28279  80c4				  -			; bmi paddleskipread
  28280  80c4				  -			; inc paddle0
  28281  80c4				  -			;donepaddleskip
  28282  80c4				  -	      sleep	10
  28283  80c4				  -	      ifconst	pfrowheight
  28284  80c4				  -	      lda	#pfrowheight
  28285  80c4				  -	      else
  28286  80c4				  -	      ifnconst	pfres
  28287  80c4				  -	      lda	#8
  28288  80c4				  -	      else
  28289  80c4				  -	      lda	#(96/pfres)	; try to come close to the real size
  28290  80c4				  -	      endif
  28291  80c4				  -	      endif
  28292  80c4				  -	      sta	temp1
  28293  80c4				  -	      endif
  28294  80c4				  -	      endif
  28295  80c4					      endif
  28296  80c4					      endif
  28297  80c4
  28298  80c4
  28299  80c4		       a5 92		      lda	ballheight
  28300  80c6		       c7 89		      dcp	bally
  28301  80c8		       e5 9f		      sbc	temp4
  28302  80ca
  28303  80ca
  28304  80ca		       4c 72 f0 	      jmp	goback
  28305  80cd
  28306  80cd
  28307  80cd					      ifnconst	no_blank_lines
  28308  80cd				   lastkernelline
  28309  80cd				  -	      ifnconst	PFcolors
  28310  80cd				  -	      sleep	10
  28311  80cd					      else
  28312  80cd		       a0 7c		      ldy	#124
  28313  80cf		       b1 f0		      lda	(pfcolortable),y
  28314  80d1		       85 08		      sta	COLUPF
  28315  80d3					      endif
  28316  80d3
  28317  80d3				  -	      ifconst	PFheights
  28318  80d3				  -	      ldx	#1
  28319  80d3				  -			;sleep 4
  28320  80d3				  -	      sleep	3	; this was over 1 cycle
  28321  80d3					      else
  28322  80d3		       a6 ef		      ldx	playfieldpos
  28323  80d5							;sleep 3
      0  80d5					      sleep	2	; this was over 1 cycle
      1  80d5				   .CYCLES    SET	2
      2  80d5
      3  80d5				  -	      IF	.CYCLES < 2
      4  80d5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  80d5				  -	      ERR
      6  80d5					      ENDIF
      7  80d5
      8  80d5				  -	      IF	.CYCLES & 1
      9  80d5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  80d5				  -	      nop	0
     11  80d5				  -	      ELSE
     12  80d5				  -	      bit	VSYNC
     13  80d5				  -	      ENDIF
     14  80d5				  -.CYCLES    SET	.CYCLES - 3
     15  80d5					      ENDIF
     16  80d5
     17  80d5					      REPEAT	.CYCLES / 2
     18  80d5		       ea		      nop
     19  80d6					      REPEND
  28325  80d6					      endif
  28326  80d6
  28327  80d6		       4c 1b f1 	      jmp	enterlastkernel
  28328  80d9
  28329  80d9				  -	      else
  28330  80d9				  -lastkernelline
  28331  80d9				  -
  28332  80d9				  -	      ifconst	PFheights
  28333  80d9				  -	      ldx	#1
  28334  80d9				  -			;sleep 5
  28335  80d9				  -	      sleep	4	; this was over 1 cycle
  28336  80d9				  -	      else
  28337  80d9				  -	      ldx	playfieldpos
  28338  80d9				  -			;sleep 4
  28339  80d9				  -	      sleep	3	; this was over 1 cycle
  28340  80d9				  -	      endif
  28341  80d9				  -
  28342  80d9				  -	      cpx	#0
  28343  80d9				  -	      bne	.enterfromNBL
  28344  80d9				  -	      jmp	no_blank_lines_bailout
  28345  80d9					      endif
  28346  80d9
  28347  80d9					      if	((<*)>$d5)
  28348  8100		       00 00 00 00*	      align	256
  28349  8100					      endif
  28350  8100							; this is a kludge to prevent page wrapping - fix!!!
  28351  8100
  28352  8100				   .skipDrawlastP1
  28353  8100		       a9 00		      lda	#0
  28354  8102		       a8		      tay		; added so we don't cross a page
  28355  8103		       4c 2d f1 	      jmp	.continuelastP1
  28356  8106
  28357  8106				   .endkerloop		; enter at cycle 59??
  28358  8106
  28359  8106		       ea		      nop
  28360  8107
  28361  8107				   .enterfromNBL
  28362  8107				  -	      ifconst	pfres
  28363  8107				  -	      ldy.w	playfield+pfres*pfwidth-4
  28364  8107				  -	      sty	PF1L	;3
  28365  8107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  28366  8107				  -	      sty	PF2L	;3
  28367  8107				  -	      ldy.w	playfield+pfres*pfwidth-1
  28368  8107				  -	      sty	PF1R	; possibly too early?
  28369  8107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  28370  8107				  -	      sty	PF2R	;3
  28371  8107					      else
  28372  8107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  28373  810a		       84 0e		      sty	PF1L	;3
  28374  810c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  28375  810f		       84 0f		      sty	PF2L	;3
  28376  8111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  28377  8114		       84 0e		      sty	PF1R	; possibly too early?
  28378  8116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  28379  8119		       84 0f		      sty	PF2R	;3
  28380  811b					      endif
  28381  811b
  28382  811b				   enterlastkernel
  28383  811b		       a5 92		      lda	ballheight
  28384  811d
  28385  811d							; tya
  28386  811d		       c7 89		      dcp	bally
  28387  811f							; sleep 4
  28388  811f
  28389  811f							; sbc stack3
  28390  811f		       2a		      rol
  28391  8120		       2a		      rol
  28392  8121		       85 1f		      sta	ENABL
  28393  8123
  28394  8123		       a5 8f		      lda	player1height	;3
  28395  8125		       c7 86		      dcp	player1y	;5
  28396  8127		       90 d7		      bcc	.skipDrawlastP1
  28397  8129		       a4 86		      ldy	player1y	;3
  28398  812b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  28399  812d							; so it doesn't cross a page boundary!
  28400  812d
  28401  812d				   .continuelastP1
  28402  812d		       85 1c		      sta	GRP1	;3
  28403  812f
  28404  812f				  -	      ifnconst	player1colors
  28405  812f				  -	      lda	missile1height	;3
  28406  812f				  -	      dcp	missile1y	;5
  28407  812f					      else
  28408  812f		       b1 87		      lda	(player1color),y
  28409  8131		       85 07		      sta	COLUP1
  28410  8133					      endif
  28411  8133
  28412  8133		       ca		      dex
  28413  8134							;dec temp4 ; might try putting this above PF writes
  28414  8134		       f0 37		      beq	endkernel
  28415  8136
  28416  8136
  28417  8136				  -	      ifconst	pfres
  28418  8136				  -	      ldy.w	playfield+pfres*pfwidth-4
  28419  8136				  -	      sty	PF1L	;3
  28420  8136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  28421  8136				  -	      sty	PF2L	;3
  28422  8136				  -	      ldy.w	playfield+pfres*pfwidth-1
  28423  8136				  -	      sty	PF1R	; possibly too early?
  28424  8136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  28425  8136				  -	      sty	PF2R	;3
  28426  8136					      else
  28427  8136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  28428  8139		       84 0e		      sty	PF1L	;3
  28429  813b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  28430  813e		       84 0f		      sty	PF2L	;3
  28431  8140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  28432  8143		       84 0e		      sty	PF1R	; possibly too early?
  28433  8145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  28434  8148		       84 0f		      sty	PF2R	;3
  28435  814a					      endif
  28436  814a
  28437  814a				  -	      ifnconst	player1colors
  28438  814a				  -	      rol		;2
  28439  814a				  -	      rol		;2
  28440  814a				  -	      sta	ENAM1	;3
  28441  814a					      else
  28442  814a				  -	      ifnconst	playercolors
  28443  814a				  -	      sleep	7
  28444  814a					      else
  28445  814a		       ad 82 00 	      lda.w	player0colorstore
  28446  814d		       85 06		      sta	COLUP0
  28447  814f					      endif
  28448  814f					      endif
  28449  814f
  28450  814f		       ad 8e 00 	      lda.w	player0height
  28451  8152		       c7 85		      dcp	player0y
  28452  8154		       90 11		      bcc	.skipDrawlastP0
  28453  8156		       a4 85		      ldy	player0y
  28454  8158		       b1 8a		      lda	(player0pointer),y
  28455  815a				   .continuelastP0
  28456  815a		       85 1b		      sta	GRP0
  28457  815c
  28458  815c
  28459  815c
  28460  815c					      ifnconst	no_blank_lines
  28461  815c		       a5 90		      lda	missile0height	;3
  28462  815e		       c7 91		      dcp	missile0y	;5
  28463  8160		       e5 f6		      sbc	stack1
  28464  8162		       85 1d		      sta	ENAM0	;3
  28465  8164		       4c 06 f1 	      jmp	.endkerloop
  28466  8167				  -	      else
  28467  8167				  -	      ifconst	readpaddle
  28468  8167				  -	      ldy	currentpaddle
  28469  8167				  -	      lda	INPT0,y
  28470  8167				  -	      bpl	noreadpaddle2
  28471  8167				  -	      inc	paddle
  28472  8167				  -	      jmp	.endkerloop
  28473  8167				  -noreadpaddle2
  28474  8167				  -	      sleep	4
  28475  8167				  -	      jmp	.endkerloop
  28476  8167				  -	      else		; no_blank_lines and no paddle reading
  28477  8167				  -	      pla
  28478  8167				  -	      pha		; 14 cycles in 4 bytes
  28479  8167				  -	      pla
  28480  8167				  -	      pha
  28481  8167				  -			; sleep 14
  28482  8167				  -	      jmp	.endkerloop
  28483  8167				  -	      endif
  28484  8167					      endif
  28485  8167
  28486  8167
  28487  8167							; ifconst donepaddleskip
  28488  8167							;paddleskipread
  28489  8167							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
  28490  8167							; plus we get a lo-res paddle read
  28491  8167							; bmi donepaddleskip
  28492  8167							; endif
  28493  8167
  28494  8167				   .skipDrawlastP0
  28495  8167		       a9 00		      lda	#0
  28496  8169		       a8		      tay
  28497  816a		       4c 5a f1 	      jmp	.continuelastP0
  28498  816d
  28499  816d				  -	      ifconst	no_blank_lines
  28500  816d				  -no_blank_lines_bailout
  28501  816d				  -	      ldx	#0
  28502  816d					      endif
  28503  816d
  28504  816d				   endkernel
  28505  816d							; 6 digit score routine
  28506  816d		       86 0e		      stx	PF1
  28507  816f		       86 0f		      stx	PF2
  28508  8171		       86 0d		      stx	PF0
  28509  8173		       18		      clc
  28510  8174
  28511  8174				  -	      ifconst	pfrowheight
  28512  8174				  -	      lda	#pfrowheight+2
  28513  8174					      else
  28514  8174					      ifnconst	pfres
  28515  8174		       a9 0a		      lda	#10
  28516  8176				  -	      else
  28517  8176				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  28518  8176					      endif
  28519  8176					      endif
  28520  8176
  28521  8176		       e5 ef		      sbc	playfieldpos
  28522  8178		       85 ef		      sta	playfieldpos
  28523  817a		       8a		      txa
  28524  817b
  28525  817b				  -	      ifconst	shakescreen
  28526  817b				  -	      bit	shakescreen
  28527  817b				  -	      bmi	noshakescreen2
  28528  817b				  -	      ldx	#$3D
  28529  817b				  -noshakescreen2
  28530  817b					      endif
  28531  817b
  28532  817b		       95 02		      sta	WSYNC,x
  28533  817d
  28534  817d							; STA WSYNC ;first one, need one more
  28535  817d		       85 0b		      sta	REFP0
  28536  817f		       85 0c		      sta	REFP1
  28537  8181		       85 1b		      STA	GRP0
  28538  8183		       85 1c		      STA	GRP1
  28539  8185							; STA PF1
  28540  8185							; STA PF2
  28541  8185		       85 2b		      sta	HMCLR
  28542  8187		       85 1d		      sta	ENAM0
  28543  8189		       85 1e		      sta	ENAM1
  28544  818b		       85 1f		      sta	ENABL
  28545  818d
  28546  818d		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
  28547  818f		       85 85		      sta	player0y
  28548  8191		       a5 9e		      lda	temp3
  28549  8193		       85 86		      sta	player1y
  28550  8195				  -	      ifnconst	player1colors
  28551  8195				  -	      lda	temp6
  28552  8195				  -	      sta	missile1y
  28553  8195					      endif
  28554  8195				  -	      ifnconst	playercolors
  28555  8195				  -	      ifnconst	readpaddle
  28556  8195				  -	      lda	temp5
  28557  8195				  -	      sta	missile0y
  28558  8195				  -	      endif
  28559  8195					      endif
  28560  8195		       a5 f7		      lda	stack2
  28561  8197		       85 89		      sta	bally
  28562  8199
  28563  8199							; strangely, this isn't required any more. might have
  28564  8199							; resulted from the no_blank_lines score bounce fix
  28565  8199							;ifconst no_blank_lines
  28566  8199							;sta WSYNC
  28567  8199							;endif
  28568  8199
  28569  8199		       ad 84 02 	      lda	INTIM
  28570  819c		       18		      clc
  28571  819d				  -	      ifnconst	vblank_time
  28572  819d				  -	      adc	#43+12+87
  28573  819d					      else
  28574  819d		       69 8e		      adc	#vblank_time+12+87
  28575  819f
  28576  819f					      endif
  28577  819f							; sta WSYNC
  28578  819f		       8d 96 02 	      sta	TIM64T
  28579  81a2
  28580  81a2				  -	      ifconst	minikernel
  28581  81a2				  -	      jsr	minikernel
  28582  81a2					      endif
  28583  81a2
  28584  81a2							; now reassign temp vars for score pointers
  28585  81a2
  28586  81a2							; score pointers contain:
  28587  81a2							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
  28588  81a2							; swap lo2->temp1
  28589  81a2							; swap lo4->temp3
  28590  81a2							; swap lo6->temp5
  28591  81a2					      ifnconst	noscore
  28592  81a2		       a5 97		      lda	scorepointers+1
  28593  81a4							; ldy temp1
  28594  81a4		       85 9c		      sta	temp1
  28595  81a6							; sty scorepointers+1
  28596  81a6
  28597  81a6		       a5 99		      lda	scorepointers+3
  28598  81a8							; ldy temp3
  28599  81a8		       85 9e		      sta	temp3
  28600  81aa							; sty scorepointers+3
  28601  81aa
  28602  81aa
  28603  81aa		       85 2b		      sta	HMCLR
  28604  81ac		       ba		      tsx
  28605  81ad		       86 f6		      stx	stack1
  28606  81af		       a2 e0		      ldx	#$E0
  28607  81b1		       86 20		      stx	HMP0
  28608  81b3
  28609  81b3		       a5 a3		      LDA	scorecolor
  28610  81b5		       85 06		      STA	COLUP0
  28611  81b7		       85 07		      STA	COLUP1
  28612  81b9				  -	      ifconst	scorefade
  28613  81b9				  -	      STA	stack2
  28614  81b9					      endif
  28615  81b9					      ifconst	pfscore
  28616  81b9		       a5 f4		      lda	pfscorecolor
  28617  81bb		       85 08		      sta	COLUPF
  28618  81bd					      endif
  28619  81bd		       85 02		      sta	WSYNC
  28620  81bf		       a2 00		      ldx	#0
  28621  81c1		       86 1b		      STx	GRP0
  28622  81c3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
  28623  81c5
  28624  81c5		       a5 9b		      lda	scorepointers+5
  28625  81c7							; ldy temp5
  28626  81c7		       95 a0		      sta	temp5,x
  28627  81c9							; sty scorepointers+5
  28628  81c9		       a9 ff		      lda	#>scoretable
  28629  81cb		       85 97		      sta	scorepointers+1
  28630  81cd		       85 99		      sta	scorepointers+3
  28631  81cf		       85 9b		      sta	scorepointers+5
  28632  81d1		       85 9d		      sta	temp2
  28633  81d3		       85 9f		      sta	temp4
  28634  81d5		       85 a1		      sta	temp6
  28635  81d7		       a0 07		      LDY	#7
  28636  81d9		       84 25		      STY	VDELP0
  28637  81db		       85 10		      STA	RESP0
  28638  81dd		       85 11		      STA	RESP1
  28639  81df
  28640  81df
  28641  81df		       a9 03		      LDA	#$03
  28642  81e1		       85 04		      STA	NUSIZ0
  28643  81e3		       85 05		      STA	NUSIZ1
  28644  81e5		       85 26		      STA	VDELP1
  28645  81e7		       a9 f0		      LDA	#$F0
  28646  81e9		       85 21		      STA	HMP1
  28647  81eb		       b1 96		      lda	(scorepointers),y
  28648  81ed		       85 1b		      sta	GRP0
  28649  81ef		       85 2a		      STA	HMOVE	; cycle 73 ?
  28650  81f1		       4c 09 f2 	      jmp	beginscore
  28651  81f4
  28652  81f4
  28653  81f4					      if	((<*)>$d4)
  28654  8200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
  28655  8200					      endif
  28656  8200
  28657  8200				   loop2
  28658  8200		       b1 96		      lda	(scorepointers),y	;+5 68 204
  28659  8202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
  28660  8204					      ifconst	pfscore
  28661  8204		       ad f2 00 	      lda.w	pfscore1
  28662  8207		       85 0e		      sta	PF1
  28663  8209				  -	      else
  28664  8209				  -	      ifconst	scorefade
  28665  8209				  -	      sleep	2
  28666  8209				  -	      dec	stack2	; decrement the temporary scorecolor
  28667  8209				  -	      else
  28668  8209				  -	      sleep	7
  28669  8209				  -	      endif
  28670  8209					      endif
  28671  8209							; cycle 0
  28672  8209				   beginscore
  28673  8209		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
  28674  820b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
  28675  820d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
  28676  820f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
  28677  8211		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
  28678  8213		       9a		      txs
  28679  8214		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
  28680  8216				  -	      ifconst	scorefade
  28681  8216				  -	      lda	stack2
  28682  8216					      else
      0  8216					      sleep	3
      1  8216				   .CYCLES    SET	3
      2  8216
      3  8216				  -	      IF	.CYCLES < 2
      4  8216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8216				  -	      ERR
      6  8216					      ENDIF
      7  8216
      8  8216					      IF	.CYCLES & 1
      9  8216					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8216		       04 00		      nop	0
     11  8218				  -	      ELSE
     12  8218				  -	      bit	VSYNC
     13  8218					      ENDIF
     14  8218				   .CYCLES    SET	.CYCLES - 3
     15  8218					      ENDIF
     16  8218
     17  8218				  -	      REPEAT	.CYCLES / 2
     18  8218				  -	      nop
     19  8218					      REPEND
  28684  8218					      endif
  28685  8218
  28686  8218					      ifconst	pfscore
  28687  8218		       a5 f3		      lda	pfscore2
  28688  821a		       85 0e		      sta	PF1
  28689  821c				  -	      else
  28690  821c				  -	      ifconst	scorefade
  28691  821c				  -	      sta	COLUP0
  28692  821c				  -	      sta	COLUP1
  28693  821c				  -	      else
  28694  821c				  -	      sleep	6
  28695  821c				  -	      endif
  28696  821c					      endif
  28697  821c
  28698  821c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
  28699  821e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
  28700  8220		       ba		      tsx
  28701  8221		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
  28702  8223		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
  28703  8225		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
  28704  8227		       88		      dey
  28705  8228		       10 d6		      bpl	loop2	;+2 60 180
  28706  822a
  28707  822a		       a6 f6		      ldx	stack1
  28708  822c		       9a		      txs
  28709  822d							; lda scorepointers+1
  28710  822d		       a4 9c		      ldy	temp1
  28711  822f							; sta temp1
  28712  822f		       84 97		      sty	scorepointers+1
  28713  8231
  28714  8231		       a9 00		      LDA	#0
  28715  8233		       85 0e		      sta	PF1
  28716  8235		       85 1b		      STA	GRP0
  28717  8237		       85 1c		      STA	GRP1
  28718  8239		       85 25		      STA	VDELP0
  28719  823b		       85 26		      STA	VDELP1	;do we need these
  28720  823d		       85 04		      STA	NUSIZ0
  28721  823f		       85 05		      STA	NUSIZ1
  28722  8241
  28723  8241							; lda scorepointers+3
  28724  8241		       a4 9e		      ldy	temp3
  28725  8243							; sta temp3
  28726  8243		       84 99		      sty	scorepointers+3
  28727  8245
  28728  8245							; lda scorepointers+5
  28729  8245		       a4 a0		      ldy	temp5
  28730  8247							; sta temp5
  28731  8247		       84 9b		      sty	scorepointers+5
  28732  8249					      endif		;noscore
  28733  8249				  -	      ifconst	readpaddle
  28734  8249				  -	      lda	#%11000010
  28735  8249					      else
  28736  8249				  -	      ifconst	qtcontroller
  28737  8249				  -	      lda	qtcontroller
  28738  8249				  -	      lsr		; bit 0 in carry
  28739  8249				  -	      lda	#4
  28740  8249				  -	      ror		; carry into top of A
  28741  8249					      else
  28742  8249		       a9 02		      lda	#2
  28743  824b					      endif		; qtcontroller
  28744  824b					      endif		; readpaddle
  28745  824b		       85 02		      sta	WSYNC
  28746  824d		       85 01		      sta	VBLANK
      0  824f					      RETURN
      1  824f				  -	      ifnconst	bankswitch
      2  824f				  -	      rts
      3  824f					      else
      4  824f		       4c dd ff 	      jmp	BS_return
      5  8252					      endif
  28748  8252				  -	      ifconst	shakescreen
  28749  8252				  -doshakescreen
  28750  8252				  -	      bit	shakescreen
  28751  8252				  -	      bmi	noshakescreen
  28752  8252				  -	      sta	WSYNC
  28753  8252				  -noshakescreen
  28754  8252				  -	      ldx	missile0height
  28755  8252				  -	      inx
  28756  8252				  -	      rts
  28757  8252					      endif
  28758  8252
  28759  8252							; Provided under the CC0 license. See the included LICENSE.txt for details.
  28760  8252
  28761  8252				   start
  28762  8252		       78		      sei
  28763  8253		       d8		      cld
  28764  8254		       a0 00		      ldy	#0
  28765  8256		       a5 d0		      lda	$D0
  28766  8258		       c9 2c		      cmp	#$2C	;check RAM location #1
  28767  825a		       d0 07		      bne	MachineIs2600
  28768  825c		       a5 d1		      lda	$D1
  28769  825e		       c9 a9		      cmp	#$A9	;check RAM location #2
  28770  8260		       d0 01		      bne	MachineIs2600
  28771  8262		       88		      dey
  28772  8263				   MachineIs2600
  28773  8263		       a2 00		      ldx	#0
  28774  8265		       8a		      txa
  28775  8266				   clearmem
  28776  8266		       e8		      inx
  28777  8267		       9a		      txs
  28778  8268		       48		      pha
  28779  8269		       d0 fb		      bne	clearmem
  28780  826b		       84 9c		      sty	temp1
  28781  826d					      ifnconst	multisprite
  28782  826d				  -	      ifconst	pfrowheight
  28783  826d				  -	      lda	#pfrowheight
  28784  826d					      else
  28785  826d				  -	      ifconst	pfres
  28786  826d				  -	      lda	#(96/pfres)
  28787  826d					      else
  28788  826d		       a9 08		      lda	#8
  28789  826f					      endif
  28790  826f					      endif
  28791  826f		       85 ef		      sta	playfieldpos
  28792  8271					      endif
  28793  8271		       a2 05		      ldx	#5
  28794  8273				   initscore
  28795  8273		       a9 74		      lda	#<scoretable
  28796  8275		       95 96		      sta	scorepointers,x
  28797  8277		       ca		      dex
  28798  8278		       10 f9		      bpl	initscore
  28799  827a		       a9 01		      lda	#1
  28800  827c		       85 0a		      sta	CTRLPF
  28801  827e		       0d 84 02 	      ora	INTIM
  28802  8281		       85 a2		      sta	rand
  28803  8283
  28804  8283				  -	      ifconst	multisprite
  28805  8283				  -	      jsr	multisprite_setup
  28806  8283					      endif
  28807  8283
  28808  8283				  -	      ifnconst	bankswitch
  28809  8283				  -	      jmp	game
  28810  8283					      else
  28811  8283		       a9 0f		      lda	#>(game-1)
  28812  8285		       48		      pha
  28813  8286		       a9 ff		      lda	#<(game-1)
  28814  8288		       48		      pha
  28815  8289		       48		      pha
  28816  828a		       48		      pha
  28817  828b		       a2 01		      ldx	#1
  28818  828d		       4c eb ff 	      jmp	BS_jsr
  28819  8290					      endif
  28820  8290							; Provided under the CC0 license. See the included LICENSE.txt for details.
  28821  8290
  28822  8290							; playfield drawing routines
  28823  8290							; you get a 32x12 bitmapped display in a single color :)
  28824  8290							; 0-31 and 0-11
  28825  8290
  28826  8290				   pfclear		; clears playfield - or fill with pattern
  28827  8290				  -	      ifconst	pfres
  28828  8290				  -	      ldx	#pfres*pfwidth-1
  28829  8290					      else
  28830  8290		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
  28831  8292					      endif
  28832  8292				   pfclear_loop
  28833  8292					      ifnconst	superchip
  28834  8292		       95 a4		      sta	playfield,x
  28835  8294				  -	      else
  28836  8294				  -	      sta	playfield-128,x
  28837  8294					      endif
  28838  8294		       ca		      dex
  28839  8295		       10 fb		      bpl	pfclear_loop
      0  8297					      RETURN
      1  8297				  -	      ifnconst	bankswitch
      2  8297				  -	      rts
      3  8297					      else
      4  8297		       4c dd ff 	      jmp	BS_return
      5  829a					      endif
  28841  829a
  28842  829a				   setuppointers
  28843  829a		       86 9d		      stx	temp2	; store on.off.flip value
  28844  829c		       aa		      tax		; put x-value in x 
  28845  829d		       4a		      lsr
  28846  829e		       4a		      lsr
  28847  829f		       4a		      lsr		; divide x pos by 8 
  28848  82a0		       85 9c		      sta	temp1
  28849  82a2		       98		      tya
  28850  82a3		       0a		      asl
  28851  82a4					      if	pfwidth=4
  28852  82a4		       0a		      asl		; multiply y pos by 4
  28853  82a5					      endif		; else multiply by 2
  28854  82a5		       18		      clc
  28855  82a6		       65 9c		      adc	temp1	; add them together to get actual memory location offset
  28856  82a8		       a8		      tay		; put the value in y
  28857  82a9		       a5 9d		      lda	temp2	; restore on.off.flip value
  28858  82ab		       60		      rts
  28859  82ac
  28860  82ac				   pfread
  28861  82ac							;x=xvalue, y=yvalue
  28862  82ac		       20 9a f2 	      jsr	setuppointers
  28863  82af		       bd 44 f3 	      lda	setbyte,x
  28864  82b2		       39 a4 00 	      and	playfield,y
  28865  82b5		       5d 44 f3 	      eor	setbyte,x
  28866  82b8							; beq readzero
  28867  82b8							; lda #1
  28868  82b8							; readzero
      0  82b8					      RETURN
      1  82b8				  -	      ifnconst	bankswitch
      2  82b8				  -	      rts
      3  82b8					      else
      4  82b8		       4c dd ff 	      jmp	BS_return
      5  82bb					      endif
  28870  82bb
  28871  82bb				   pfpixel
  28872  82bb							;x=xvalue, y=yvalue, a=0,1,2
  28873  82bb		       20 9a f2 	      jsr	setuppointers
  28874  82be
  28875  82be					      ifconst	bankswitch
  28876  82be		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  28877  82c0		       f0 0f		      beq	pixelon_r	; if "on" go to on
  28878  82c2		       4a		      lsr
  28879  82c3		       b0 18		      bcs	pixeloff_r	; value is 1 if true
  28880  82c5		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  28881  82c8		       5d 44 f3 	      eor	setbyte,x
  28882  82cb				  -	      ifconst	superchip
  28883  82cb				  -	      sta	playfield-128,y
  28884  82cb					      else
  28885  82cb		       99 a4 00 	      sta	playfield,y
  28886  82ce					      endif
      0  82ce					      RETURN
      1  82ce				  -	      ifnconst	bankswitch
      2  82ce				  -	      rts
      3  82ce					      else
      4  82ce		       4c dd ff 	      jmp	BS_return
      5  82d1					      endif
  28888  82d1				   pixelon_r
  28889  82d1		       b9 a4 00 	      lda	playfield,y
  28890  82d4		       1d 44 f3 	      ora	setbyte,x
  28891  82d7				  -	      ifconst	superchip
  28892  82d7				  -	      sta	playfield-128,y
  28893  82d7					      else
  28894  82d7		       99 a4 00 	      sta	playfield,y
  28895  82da					      endif
      0  82da					      RETURN
      1  82da				  -	      ifnconst	bankswitch
      2  82da				  -	      rts
      3  82da					      else
      4  82da		       4c dd ff 	      jmp	BS_return
      5  82dd					      endif
  28897  82dd				   pixeloff_r
  28898  82dd		       bd 44 f3 	      lda	setbyte,x
  28899  82e0		       49 ff		      eor	#$ff
  28900  82e2		       39 a4 00 	      and	playfield,y
  28901  82e5				  -	      ifconst	superchip
  28902  82e5				  -	      sta	playfield-128,y
  28903  82e5					      else
  28904  82e5		       99 a4 00 	      sta	playfield,y
  28905  82e8					      endif
      0  82e8					      RETURN
      1  82e8				  -	      ifnconst	bankswitch
      2  82e8				  -	      rts
      3  82e8					      else
      4  82e8		       4c dd ff 	      jmp	BS_return
      5  82eb					      endif
  28907  82eb
  28908  82eb				  -	      else
  28909  82eb				  -	      jmp	plotpoint
  28910  82eb					      endif
  28911  82eb
  28912  82eb				   pfhline
  28913  82eb							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  28914  82eb		       20 9a f2 	      jsr	setuppointers
  28915  82ee		       4c f8 f2 	      jmp	noinc
  28916  82f1				   keepgoing
  28917  82f1		       e8		      inx
  28918  82f2		       8a		      txa
  28919  82f3		       29 07		      and	#7
  28920  82f5		       d0 01		      bne	noinc
  28921  82f7		       c8		      iny
  28922  82f8				   noinc
  28923  82f8		       20 1d f3 	      jsr	plotpoint
  28924  82fb		       e4 9e		      cpx	temp3
  28925  82fd		       30 f2		      bmi	keepgoing
      0  82ff					      RETURN
      1  82ff				  -	      ifnconst	bankswitch
      2  82ff				  -	      rts
      3  82ff					      else
      4  82ff		       4c dd ff 	      jmp	BS_return
      5  8302					      endif
  28927  8302
  28928  8302				   pfvline
  28929  8302							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  28930  8302		       20 9a f2 	      jsr	setuppointers
  28931  8305		       84 9c		      sty	temp1	; store memory location offset
  28932  8307		       e6 9e		      inc	temp3	; increase final x by 1 
  28933  8309		       a5 9e		      lda	temp3
  28934  830b		       0a		      asl
  28935  830c					      if	pfwidth=4
  28936  830c		       0a		      asl		; multiply by 4
  28937  830d					      endif		; else multiply by 2
  28938  830d		       85 9e		      sta	temp3	; store it
  28939  830f							; Thanks to Michael Rideout for fixing a bug in this code
  28940  830f							; right now, temp1=y=starting memory location, temp3=final
  28941  830f							; x should equal original x value
  28942  830f				   keepgoingy
  28943  830f		       20 1d f3 	      jsr	plotpoint
  28944  8312		       c8		      iny
  28945  8313		       c8		      iny
  28946  8314					      if	pfwidth=4
  28947  8314		       c8		      iny
  28948  8315		       c8		      iny
  28949  8316					      endif
  28950  8316		       c4 9e		      cpy	temp3
  28951  8318		       30 f5		      bmi	keepgoingy
      0  831a					      RETURN
      1  831a				  -	      ifnconst	bankswitch
      2  831a				  -	      rts
      3  831a					      else
      4  831a		       4c dd ff 	      jmp	BS_return
      5  831d					      endif
  28953  831d
  28954  831d				   plotpoint
  28955  831d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  28956  831f		       f0 0d		      beq	pixelon	; if "on" go to on
  28957  8321		       4a		      lsr
  28958  8322		       b0 14		      bcs	pixeloff	; value is 1 if true
  28959  8324		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  28960  8327		       5d 44 f3 	      eor	setbyte,x
  28961  832a				  -	      ifconst	superchip
  28962  832a				  -	      sta	playfield-128,y
  28963  832a					      else
  28964  832a		       99 a4 00 	      sta	playfield,y
  28965  832d					      endif
  28966  832d		       60		      rts
  28967  832e				   pixelon
  28968  832e		       b9 a4 00 	      lda	playfield,y
  28969  8331		       1d 44 f3 	      ora	setbyte,x
  28970  8334				  -	      ifconst	superchip
  28971  8334				  -	      sta	playfield-128,y
  28972  8334					      else
  28973  8334		       99 a4 00 	      sta	playfield,y
  28974  8337					      endif
  28975  8337		       60		      rts
  28976  8338				   pixeloff
  28977  8338		       bd 44 f3 	      lda	setbyte,x
  28978  833b		       49 ff		      eor	#$ff
  28979  833d		       39 a4 00 	      and	playfield,y
  28980  8340				  -	      ifconst	superchip
  28981  8340				  -	      sta	playfield-128,y
  28982  8340					      else
  28983  8340		       99 a4 00 	      sta	playfield,y
  28984  8343					      endif
  28985  8343		       60		      rts
  28986  8344
  28987  8344				   setbyte
  28988  8344					      ifnconst	pfcenter
  28989  8344		       80		      .byte.b	$80
  28990  8345		       40		      .byte.b	$40
  28991  8346		       20		      .byte.b	$20
  28992  8347		       10		      .byte.b	$10
  28993  8348		       08		      .byte.b	$08
  28994  8349		       04		      .byte.b	$04
  28995  834a		       02		      .byte.b	$02
  28996  834b		       01		      .byte.b	$01
  28997  834c					      endif
  28998  834c		       01		      .byte.b	$01
  28999  834d		       02		      .byte.b	$02
  29000  834e		       04		      .byte.b	$04
  29001  834f		       08		      .byte.b	$08
  29002  8350		       10		      .byte.b	$10
  29003  8351		       20		      .byte.b	$20
  29004  8352		       40		      .byte.b	$40
  29005  8353		       80		      .byte.b	$80
  29006  8354		       80		      .byte.b	$80
  29007  8355		       40		      .byte.b	$40
  29008  8356		       20		      .byte.b	$20
  29009  8357		       10		      .byte.b	$10
  29010  8358		       08		      .byte.b	$08
  29011  8359		       04		      .byte.b	$04
  29012  835a		       02		      .byte.b	$02
  29013  835b		       01		      .byte.b	$01
  29014  835c		       01		      .byte.b	$01
  29015  835d		       02		      .byte.b	$02
  29016  835e		       04		      .byte.b	$04
  29017  835f		       08		      .byte.b	$08
  29018  8360		       10		      .byte.b	$10
  29019  8361		       20		      .byte.b	$20
  29020  8362		       40		      .byte.b	$40
  29021  8363		       80		      .byte.b	$80
  29022  8364							; Provided under the CC0 license. See the included LICENSE.txt for details.
  29023  8364
  29024  8364				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
  29025  8364		       d0 15		      bne	notleft
  29026  8366							;left
  29027  8366				  -	      ifconst	pfres
  29028  8366				  -	      ldx	#pfres*4
  29029  8366					      else
  29030  8366		       a2 30		      ldx	#48
  29031  8368					      endif
  29032  8368				   leftloop
  29033  8368		       b5 a3		      lda	playfield-1,x
  29034  836a		       4a		      lsr
  29035  836b
  29036  836b				  -	      ifconst	superchip
  29037  836b				  -	      lda	playfield-2,x
  29038  836b				  -	      rol
  29039  836b				  -	      sta	playfield-130,x
  29040  836b				  -	      lda	playfield-3,x
  29041  836b				  -	      ror
  29042  836b				  -	      sta	playfield-131,x
  29043  836b				  -	      lda	playfield-4,x
  29044  836b				  -	      rol
  29045  836b				  -	      sta	playfield-132,x
  29046  836b				  -	      lda	playfield-1,x
  29047  836b				  -	      ror
  29048  836b				  -	      sta	playfield-129,x
  29049  836b					      else
  29050  836b		       36 a2		      rol	playfield-2,x
  29051  836d		       76 a1		      ror	playfield-3,x
  29052  836f		       36 a0		      rol	playfield-4,x
  29053  8371		       76 a3		      ror	playfield-1,x
  29054  8373					      endif
  29055  8373
  29056  8373		       8a		      txa
  29057  8374		       cb 04		      sbx	#4
  29058  8376		       d0 f0		      bne	leftloop
      0  8378					      RETURN
      1  8378				  -	      ifnconst	bankswitch
      2  8378				  -	      rts
      3  8378					      else
      4  8378		       4c dd ff 	      jmp	BS_return
      5  837b					      endif
  29060  837b
  29061  837b				   notleft
  29062  837b		       4a		      lsr
  29063  837c		       90 15		      bcc	notright
  29064  837e							;right
  29065  837e
  29066  837e				  -	      ifconst	pfres
  29067  837e				  -	      ldx	#pfres*4
  29068  837e					      else
  29069  837e		       a2 30		      ldx	#48
  29070  8380					      endif
  29071  8380				   rightloop
  29072  8380		       b5 a0		      lda	playfield-4,x
  29073  8382		       4a		      lsr
  29074  8383				  -	      ifconst	superchip
  29075  8383				  -	      lda	playfield-3,x
  29076  8383				  -	      rol
  29077  8383				  -	      sta	playfield-131,x
  29078  8383				  -	      lda	playfield-2,x
  29079  8383				  -	      ror
  29080  8383				  -	      sta	playfield-130,x
  29081  8383				  -	      lda	playfield-1,x
  29082  8383				  -	      rol
  29083  8383				  -	      sta	playfield-129,x
  29084  8383				  -	      lda	playfield-4,x
  29085  8383				  -	      ror
  29086  8383				  -	      sta	playfield-132,x
  29087  8383					      else
  29088  8383		       36 a1		      rol	playfield-3,x
  29089  8385		       76 a2		      ror	playfield-2,x
  29090  8387		       36 a3		      rol	playfield-1,x
  29091  8389		       76 a0		      ror	playfield-4,x
  29092  838b					      endif
  29093  838b		       8a		      txa
  29094  838c		       cb 04		      sbx	#4
  29095  838e		       d0 f0		      bne	rightloop
      0  8390					      RETURN
      1  8390				  -	      ifnconst	bankswitch
      2  8390				  -	      rts
      3  8390					      else
      4  8390		       4c dd ff 	      jmp	BS_return
      5  8393					      endif
  29097  8393
  29098  8393				   notright
  29099  8393		       4a		      lsr
  29100  8394		       90 4b		      bcc	notup
  29101  8396							;up
  29102  8396		       4a		      lsr
  29103  8397		       90 02		      bcc	onedecup
  29104  8399		       c6 ef		      dec	playfieldpos
  29105  839b				   onedecup
  29106  839b		       c6 ef		      dec	playfieldpos
  29107  839d		       f0 02		      beq	shiftdown
  29108  839f		       10 3d		      bpl	noshiftdown2
  29109  83a1				   shiftdown
  29110  83a1				  -	      ifconst	pfrowheight
  29111  83a1				  -	      lda	#pfrowheight
  29112  83a1					      else
  29113  83a1					      ifnconst	pfres
  29114  83a1		       a9 08		      lda	#8
  29115  83a3				  -	      else
  29116  83a3				  -	      lda	#(96/pfres)	; try to come close to the real size
  29117  83a3					      endif
  29118  83a3					      endif
  29119  83a3
  29120  83a3		       85 ef		      sta	playfieldpos
  29121  83a5		       a5 a7		      lda	playfield+3
  29122  83a7		       85 9f		      sta	temp4
  29123  83a9		       a5 a6		      lda	playfield+2
  29124  83ab		       85 9e		      sta	temp3
  29125  83ad		       a5 a5		      lda	playfield+1
  29126  83af		       85 9d		      sta	temp2
  29127  83b1		       a5 a4		      lda	playfield
  29128  83b3		       85 9c		      sta	temp1
  29129  83b5		       a2 00		      ldx	#0
  29130  83b7				   up2
  29131  83b7		       b5 a8		      lda	playfield+4,x
  29132  83b9				  -	      ifconst	superchip
  29133  83b9				  -	      sta	playfield-128,x
  29134  83b9				  -	      lda	playfield+5,x
  29135  83b9				  -	      sta	playfield-127,x
  29136  83b9				  -	      lda	playfield+6,x
  29137  83b9				  -	      sta	playfield-126,x
  29138  83b9				  -	      lda	playfield+7,x
  29139  83b9				  -	      sta	playfield-125,x
  29140  83b9					      else
  29141  83b9		       95 a4		      sta	playfield,x
  29142  83bb		       b5 a9		      lda	playfield+5,x
  29143  83bd		       95 a5		      sta	playfield+1,x
  29144  83bf		       b5 aa		      lda	playfield+6,x
  29145  83c1		       95 a6		      sta	playfield+2,x
  29146  83c3		       b5 ab		      lda	playfield+7,x
  29147  83c5		       95 a7		      sta	playfield+3,x
  29148  83c7					      endif
  29149  83c7		       8a		      txa
  29150  83c8		       cb fc		      sbx	#252
  29151  83ca				  -	      ifconst	pfres
  29152  83ca				  -	      cpx	#(pfres-1)*4
  29153  83ca					      else
  29154  83ca		       e0 2c		      cpx	#44
  29155  83cc					      endif
  29156  83cc		       d0 e9		      bne	up2
  29157  83ce
  29158  83ce		       a5 9f		      lda	temp4
  29159  83d0
  29160  83d0				  -	      ifconst	superchip
  29161  83d0				  -	      ifconst	pfres
  29162  83d0				  -	      sta	playfield+pfres*4-129
  29163  83d0				  -	      lda	temp3
  29164  83d0				  -	      sta	playfield+pfres*4-130
  29165  83d0				  -	      lda	temp2
  29166  83d0				  -	      sta	playfield+pfres*4-131
  29167  83d0				  -	      lda	temp1
  29168  83d0				  -	      sta	playfield+pfres*4-132
  29169  83d0				  -	      else
  29170  83d0				  -	      sta	playfield+47-128
  29171  83d0				  -	      lda	temp3
  29172  83d0				  -	      sta	playfield+46-128
  29173  83d0				  -	      lda	temp2
  29174  83d0				  -	      sta	playfield+45-128
  29175  83d0				  -	      lda	temp1
  29176  83d0				  -	      sta	playfield+44-128
  29177  83d0				  -	      endif
  29178  83d0					      else
  29179  83d0				  -	      ifconst	pfres
  29180  83d0				  -	      sta	playfield+pfres*4-1
  29181  83d0				  -	      lda	temp3
  29182  83d0				  -	      sta	playfield+pfres*4-2
  29183  83d0				  -	      lda	temp2
  29184  83d0				  -	      sta	playfield+pfres*4-3
  29185  83d0				  -	      lda	temp1
  29186  83d0				  -	      sta	playfield+pfres*4-4
  29187  83d0					      else
  29188  83d0		       85 d3		      sta	playfield+47
  29189  83d2		       a5 9e		      lda	temp3
  29190  83d4		       85 d2		      sta	playfield+46
  29191  83d6		       a5 9d		      lda	temp2
  29192  83d8		       85 d1		      sta	playfield+45
  29193  83da		       a5 9c		      lda	temp1
  29194  83dc		       85 d0		      sta	playfield+44
  29195  83de					      endif
  29196  83de					      endif
  29197  83de				   noshiftdown2
      0  83de					      RETURN
      1  83de				  -	      ifnconst	bankswitch
      2  83de				  -	      rts
      3  83de					      else
      4  83de		       4c dd ff 	      jmp	BS_return
      5  83e1					      endif
  29199  83e1
  29200  83e1
  29201  83e1				   notup
  29202  83e1							;down
  29203  83e1		       4a		      lsr
  29204  83e2		       b0 02		      bcs	oneincup
  29205  83e4		       e6 ef		      inc	playfieldpos
  29206  83e6				   oneincup
  29207  83e6		       e6 ef		      inc	playfieldpos
  29208  83e8		       a5 ef		      lda	playfieldpos
  29209  83ea
  29210  83ea				  -	      ifconst	pfrowheight
  29211  83ea				  -	      cmp	#pfrowheight+1
  29212  83ea					      else
  29213  83ea					      ifnconst	pfres
  29214  83ea		       c9 09		      cmp	#9
  29215  83ec				  -	      else
  29216  83ec				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
  29217  83ec					      endif
  29218  83ec					      endif
  29219  83ec
  29220  83ec		       90 3b		      bcc	noshiftdown
  29221  83ee		       a9 01		      lda	#1
  29222  83f0		       85 ef		      sta	playfieldpos
  29223  83f2
  29224  83f2				  -	      ifconst	pfres
  29225  83f2				  -	      lda	playfield+pfres*4-1
  29226  83f2				  -	      sta	temp4
  29227  83f2				  -	      lda	playfield+pfres*4-2
  29228  83f2				  -	      sta	temp3
  29229  83f2				  -	      lda	playfield+pfres*4-3
  29230  83f2				  -	      sta	temp2
  29231  83f2				  -	      lda	playfield+pfres*4-4
  29232  83f2					      else
  29233  83f2		       a5 d3		      lda	playfield+47
  29234  83f4		       85 9f		      sta	temp4
  29235  83f6		       a5 d2		      lda	playfield+46
  29236  83f8		       85 9e		      sta	temp3
  29237  83fa		       a5 d1		      lda	playfield+45
  29238  83fc		       85 9d		      sta	temp2
  29239  83fe		       a5 d0		      lda	playfield+44
  29240  8400					      endif
  29241  8400
  29242  8400		       85 9c		      sta	temp1
  29243  8402
  29244  8402				  -	      ifconst	pfres
  29245  8402				  -	      ldx	#(pfres-1)*4
  29246  8402					      else
  29247  8402		       a2 2c		      ldx	#44
  29248  8404					      endif
  29249  8404				   down2
  29250  8404		       b5 a3		      lda	playfield-1,x
  29251  8406				  -	      ifconst	superchip
  29252  8406				  -	      sta	playfield-125,x
  29253  8406				  -	      lda	playfield-2,x
  29254  8406				  -	      sta	playfield-126,x
  29255  8406				  -	      lda	playfield-3,x
  29256  8406				  -	      sta	playfield-127,x
  29257  8406				  -	      lda	playfield-4,x
  29258  8406				  -	      sta	playfield-128,x
  29259  8406					      else
  29260  8406		       95 a7		      sta	playfield+3,x
  29261  8408		       b5 a2		      lda	playfield-2,x
  29262  840a		       95 a6		      sta	playfield+2,x
  29263  840c		       b5 a1		      lda	playfield-3,x
  29264  840e		       95 a5		      sta	playfield+1,x
  29265  8410		       b5 a0		      lda	playfield-4,x
  29266  8412		       95 a4		      sta	playfield,x
  29267  8414					      endif
  29268  8414		       8a		      txa
  29269  8415		       cb 04		      sbx	#4
  29270  8417		       d0 eb		      bne	down2
  29271  8419
  29272  8419		       a5 9f		      lda	temp4
  29273  841b				  -	      ifconst	superchip
  29274  841b				  -	      sta	playfield-125
  29275  841b				  -	      lda	temp3
  29276  841b				  -	      sta	playfield-126
  29277  841b				  -	      lda	temp2
  29278  841b				  -	      sta	playfield-127
  29279  841b				  -	      lda	temp1
  29280  841b				  -	      sta	playfield-128
  29281  841b					      else
  29282  841b		       85 a7		      sta	playfield+3
  29283  841d		       a5 9e		      lda	temp3
  29284  841f		       85 a6		      sta	playfield+2
  29285  8421		       a5 9d		      lda	temp2
  29286  8423		       85 a5		      sta	playfield+1
  29287  8425		       a5 9c		      lda	temp1
  29288  8427		       85 a4		      sta	playfield
  29289  8429					      endif
  29290  8429				   noshiftdown
      0  8429					      RETURN
      1  8429				  -	      ifnconst	bankswitch
      2  8429				  -	      rts
      3  8429					      else
      4  8429		       4c dd ff 	      jmp	BS_return
      5  842c					      endif
  29292  842c							; Provided under the CC0 license. See the included LICENSE.txt for details.
  29293  842c
  29294  842c							;standard routines needed for pretty much all games
  29295  842c							; just the random number generator is left - maybe we should remove this asm file altogether?
  29296  842c							; repositioning code and score pointer setup moved to overscan
  29297  842c							; read switches, joysticks now compiler generated (more efficient)
  29298  842c
  29299  842c				   randomize
  29300  842c		       a5 a2		      lda	rand
  29301  842e		       4a		      lsr
  29302  842f				  -	      ifconst	rand16
  29303  842f				  -	      rol	rand16
  29304  842f					      endif
  29305  842f		       90 02		      bcc	noeor
  29306  8431		       49 b4		      eor	#$B4
  29307  8433				   noeor
  29308  8433		       85 a2		      sta	rand
  29309  8435				  -	      ifconst	rand16
  29310  8435				  -	      eor	rand16
  29311  8435					      endif
      0  8435					      RETURN
      1  8435				  -	      ifnconst	bankswitch
      2  8435				  -	      rts
      3  8435					      else
      4  8435		       4c dd ff 	      jmp	BS_return
      5  8438					      endif
  29313  8438							; Provided under the CC0 license. See the included LICENSE.txt for details.
  29314  8438
  29315  8438				   drawscreen
  29316  8438				  -	      ifconst	debugscore
  29317  8438				  -	      ldx	#14
  29318  8438				  -	      lda	INTIM	; display # cycles left in the score
  29319  8438				  -
  29320  8438				  -	      ifconst	mincycles
  29321  8438				  -	      lda	mincycles
  29322  8438				  -	      cmp	INTIM
  29323  8438				  -	      lda	mincycles
  29324  8438				  -	      bcc	nochange
  29325  8438				  -	      lda	INTIM
  29326  8438				  -	      sta	mincycles
  29327  8438				  -nochange
  29328  8438				  -	      endif
  29329  8438				  -
  29330  8438				  -			; cmp #$2B
  29331  8438				  -			; bcs no_cycles_left
  29332  8438				  -	      bmi	cycles_left
  29333  8438				  -	      ldx	#64
  29334  8438				  -	      eor	#$ff	;make negative
  29335  8438				  -cycles_left
  29336  8438				  -	      stx	scorecolor
  29337  8438				  -	      and	#$7f	; clear sign bit
  29338  8438				  -	      tax
  29339  8438				  -	      lda	scorebcd,x
  29340  8438				  -	      sta	score+2
  29341  8438				  -	      lda	scorebcd1,x
  29342  8438				  -	      sta	score+1
  29343  8438				  -	      jmp	done_debugscore
  29344  8438				  -scorebcd
  29345  8438				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
  29346  8438				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
  29347  8438				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
  29348  8438				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
  29349  8438				  -scorebcd1
  29350  8438				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
  29351  8438				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
  29352  8438				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
  29353  8438				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
  29354  8438				  -done_debugscore
  29355  8438					      endif
  29356  8438
  29357  8438				  -	      ifconst	debugcycles
  29358  8438				  -	      lda	INTIM	; if we go over, it mucks up the background color
  29359  8438				  -			; cmp #$2B
  29360  8438				  -			; BCC overscan
  29361  8438				  -	      bmi	overscan
  29362  8438				  -	      sta	COLUBK
  29363  8438				  -	      bcs	doneoverscan
  29364  8438					      endif
  29365  8438
  29366  8438				   overscan
  29367  8438				  -	      ifconst	interlaced
  29368  8438				  -	      PHP
  29369  8438				  -	      PLA
  29370  8438				  -	      EOR	#4	; flip interrupt bit
  29371  8438				  -	      PHA
  29372  8438				  -	      PLP
  29373  8438				  -	      AND	#4	; isolate the interrupt bit
  29374  8438				  -	      TAX		; save it for later
  29375  8438					      endif
  29376  8438
  29377  8438				   overscanloop
  29378  8438		       ad 84 02 	      lda	INTIM	;wait for sync
  29379  843b		       30 fb		      bmi	overscanloop
  29380  843d				   doneoverscan
  29381  843d
  29382  843d							;do VSYNC
  29383  843d
  29384  843d				  -	      ifconst	interlaced
  29385  843d				  -	      CPX	#4
  29386  843d				  -	      BNE	oddframevsync
  29387  843d					      endif
  29388  843d
  29389  843d		       a9 02		      lda	#2
  29390  843f		       85 02		      sta	WSYNC
  29391  8441		       85 00		      sta	VSYNC
  29392  8443		       85 02		      STA	WSYNC
  29393  8445		       85 02		      STA	WSYNC
  29394  8447		       4a		      lsr
  29395  8448		       85 02		      STA	WSYNC
  29396  844a		       85 00		      STA	VSYNC
  29397  844c		       85 01		      sta	VBLANK
  29398  844e				  -	      ifnconst	overscan_time
  29399  844e				  -	      lda	#37+128
  29400  844e					      else
  29401  844e		       a9 a5		      lda	#overscan_time+128
  29402  8450					      endif
  29403  8450		       8d 96 02 	      sta	TIM64T
  29404  8453
  29405  8453				  -	      ifconst	interlaced
  29406  8453				  -	      jmp	postsync
  29407  8453				  -
  29408  8453				  -oddframevsync
  29409  8453				  -	      sta	WSYNC
  29410  8453				  -
  29411  8453				  -	      LDA	($80,X)	; 11 waste
  29412  8453				  -	      LDA	($80,X)	; 11 waste
  29413  8453				  -	      LDA	($80,X)	; 11 waste
  29414  8453				  -
  29415  8453				  -	      lda	#2
  29416  8453				  -	      sta	VSYNC
  29417  8453				  -	      sta	WSYNC
  29418  8453				  -	      sta	WSYNC
  29419  8453				  -	      sta	WSYNC
  29420  8453				  -
  29421  8453				  -	      LDA	($80,X)	; 11 waste
  29422  8453				  -	      LDA	($80,X)	; 11 waste
  29423  8453				  -	      LDA	($80,X)	; 11 waste
  29424  8453				  -
  29425  8453				  -	      lda	#0
  29426  8453				  -	      sta	VSYNC
  29427  8453				  -	      sta	VBLANK
  29428  8453				  -	      ifnconst	overscan_time
  29429  8453				  -	      lda	#37+128
  29430  8453				  -	      else
  29431  8453				  -	      lda	#overscan_time+128
  29432  8453				  -	      endif
  29433  8453				  -	      sta	TIM64T
  29434  8453				  -
  29435  8453				  -postsync
  29436  8453					      endif
  29437  8453
  29438  8453				  -	      ifconst	legacy
  29439  8453				  -	      if	legacy < 100
  29440  8453				  -	      ldx	#4
  29441  8453				  -adjustloop
  29442  8453				  -	      lda	player0x,x
  29443  8453				  -	      sec
  29444  8453				  -	      sbc	#14	;?
  29445  8453				  -	      sta	player0x,x
  29446  8453				  -	      dex
  29447  8453				  -	      bpl	adjustloop
  29448  8453				  -	      endif
  29449  8453					      endif
  29450  8453				  -	      if	((<*)>$e9)&&((<*)<$fa)
  29451  8453				  -	      repeat	($fa-(<*))
  29452  8453				  -	      nop
  29453  8453				  -	      repend
  29454  8453					      endif
  29455  8453		       85 02		      sta	WSYNC
  29456  8455		       a2 04		      ldx	#4
      0  8457					      SLEEP	3
      1  8457				   .CYCLES    SET	3
      2  8457
      3  8457				  -	      IF	.CYCLES < 2
      4  8457				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8457				  -	      ERR
      6  8457					      ENDIF
      7  8457
      8  8457					      IF	.CYCLES & 1
      9  8457					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8457		       04 00		      nop	0
     11  8459				  -	      ELSE
     12  8459				  -	      bit	VSYNC
     13  8459					      ENDIF
     14  8459				   .CYCLES    SET	.CYCLES - 3
     15  8459					      ENDIF
     16  8459
     17  8459				  -	      REPEAT	.CYCLES / 2
     18  8459				  -	      nop
     19  8459					      REPEND
  29458  8459				   HorPosLoop		; 5
  29459  8459		       b5 80		      lda	player0x,X	;+4 9
  29460  845b		       38		      sec		;+2 11
  29461  845c				   DivideLoop
  29462  845c		       e9 0f		      sbc	#15
  29463  845e		       b0 fc		      bcs	DivideLoop	;+4 15
  29464  8460		       95 9c		      sta	temp1,X	;+4 19
  29465  8462		       95 10		      sta	RESP0,X	;+4 23
  29466  8464		       85 02		      sta	WSYNC
  29467  8466		       ca		      dex
  29468  8467		       10 f0		      bpl	HorPosLoop	;+5 5
  29469  8469							; 4
  29470  8469
  29471  8469		       a2 04		      ldx	#4
  29472  846b		       b4 9c		      ldy	temp1,X
  29473  846d		       b9 c9 f3 	      lda	repostable-256,Y
  29474  8470		       95 20		      sta	HMP0,X	;+14 18
  29475  8472
  29476  8472		       ca		      dex
  29477  8473		       b4 9c		      ldy	temp1,X
  29478  8475		       b9 c9 f3 	      lda	repostable-256,Y
  29479  8478		       95 20		      sta	HMP0,X	;+14 32
  29480  847a
  29481  847a		       ca		      dex
  29482  847b		       b4 9c		      ldy	temp1,X
  29483  847d		       b9 c9 f3 	      lda	repostable-256,Y
  29484  8480		       95 20		      sta	HMP0,X	;+14 46
  29485  8482
  29486  8482		       ca		      dex
  29487  8483		       b4 9c		      ldy	temp1,X
  29488  8485		       b9 c9 f3 	      lda	repostable-256,Y
  29489  8488		       95 20		      sta	HMP0,X	;+14 60
  29490  848a
  29491  848a		       ca		      dex
  29492  848b		       b4 9c		      ldy	temp1,X
  29493  848d		       b9 c9 f3 	      lda	repostable-256,Y
  29494  8490		       95 20		      sta	HMP0,X	;+14 74
  29495  8492
  29496  8492		       85 02		      sta	WSYNC
  29497  8494
  29498  8494		       85 2a		      sta	HMOVE	;+3 3
  29499  8496
  29500  8496
  29501  8496				  -	      ifconst	legacy
  29502  8496				  -	      if	legacy < 100
  29503  8496				  -	      ldx	#4
  29504  8496				  -adjustloop2
  29505  8496				  -	      lda	player0x,x
  29506  8496				  -	      clc
  29507  8496				  -	      adc	#14	;?
  29508  8496				  -	      sta	player0x,x
  29509  8496				  -	      dex
  29510  8496				  -	      bpl	adjustloop2
  29511  8496				  -	      endif
  29512  8496					      endif
  29513  8496
  29514  8496
  29515  8496
  29516  8496
  29517  8496							;set score pointers
  29518  8496		       a7 95		      lax	score+2
  29519  8498		       20 c9 f4 	      jsr	scorepointerset
  29520  849b		       84 9b		      sty	scorepointers+5
  29521  849d		       86 98		      stx	scorepointers+2
  29522  849f		       a7 94		      lax	score+1
  29523  84a1		       20 c9 f4 	      jsr	scorepointerset
  29524  84a4		       84 9a		      sty	scorepointers+4
  29525  84a6		       86 97		      stx	scorepointers+1
  29526  84a8		       a7 93		      lax	score
  29527  84aa		       20 c9 f4 	      jsr	scorepointerset
  29528  84ad		       84 99		      sty	scorepointers+3
  29529  84af		       86 96		      stx	scorepointers
  29530  84b1
  29531  84b1				   vblk
  29532  84b1							; run possible vblank bB code
  29533  84b1				  -	      ifconst	vblank_bB_code
  29534  84b1				  -	      jsr	vblank_bB_code
  29535  84b1					      endif
  29536  84b1				   vblk2
  29537  84b1		       ad 84 02 	      LDA	INTIM
  29538  84b4		       30 fb		      bmi	vblk2
  29539  84b6		       4c 00 f0 	      jmp	kernel
  29540  84b9
  29541  84b9
  29542  84b9		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
  29543  84c2		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
  29544  84c9				   repostable
  29545  84c9
  29546  84c9				   scorepointerset
  29547  84c9		       29 0f		      and	#$0F
  29548  84cb		       0a		      asl
  29549  84cc		       0a		      asl
  29550  84cd		       0a		      asl
  29551  84ce		       69 74		      adc	#<scoretable
  29552  84d0		       a8		      tay
  29553  84d1		       8a		      txa
  29554  84d2							; and #$F0
  29555  84d2							; lsr
  29556  84d2		       4b f0		      asr	#$F0
  29557  84d4		       69 74		      adc	#<scoretable
  29558  84d6		       aa		      tax
  29559  84d7		       60		      rts
  29560  84d8							;bB.asm
  29561  84d8							; bB.asm file is split here
  29562  84d8				   .
  29563  84d8							; 
  29564  84d8
  29565  84d8				   .
  29566  84d8							; 
  29567  84d8
  29568  84d8				   .
  29569  84d8							; 
  29570  84d8
  29571  84d8				   .
  29572  84d8							; 
  29573  84d8
  29574  84d8				   .
  29575  84d8							; 
  29576  84d8
  29577  84d8				   .
  29578  84d8							; 
  29579  84d8
  29580  84d8				   .
  29581  84d8							; 
  29582  84d8
  29583  84d8				   .
  29584  84d8							; 
  29585  84d8
  29586  84d8				   .
  29587  84d8							; 
  29588  84d8
  29589  84d8				   .
  29590  84d8							; 
  29591  84d8
  29592  84d8				   .
  29593  84d8							; 
  29594  84d8
  29595  84d8				   .__Thwomp
  29596  84d8							; __Thwomp
  29597  84d8
  29598  84d8				   .
  29599  84d8							; 
  29600  84d8
  29601  84d8				   .L01506		;  gosub __ThwompC
  29602  84d8
  29603  84d8		       20 00 f6 	      jsr	.__ThwompC
  29604  84db
  29605  84db				   .
  29606  84db							; 
  29607  84db
  29608  84db				   .L01507		;  if _Enemy_Type  =  _Thwomp then NUSIZ1  =  $15
  29609  84db
  29610  84db		       a5 dc		      LDA	_Enemy_Type
  29611  84dd		       c9 28		      CMP	#_Thwomp
  29612  84df		       d0 04		      BNE	.skipL01507
  29613  84e1				   .condpart666
  29614  84e1		       a9 15		      LDA	#$15
  29615  84e3		       85 05		      STA	NUSIZ1
  29616  84e5				   .skipL01507
  29617  84e5				   .
  29618  84e5							; 
  29619  84e5
  29620  84e5				   .L01508		;  if _Bit3_Enemy_Direction{3} then goto __T2
  29621  84e5
  29622  84e5		       a5 da		      LDA	_Bit3_Enemy_Direction
  29623  84e7		       29 08		      AND	#8
  29624  84e9		       f0 03		      BEQ	.skipL01508
  29625  84eb				   .condpart667
  29626  84eb		       4c 29 f5 	      jmp	.__T2
  29627  84ee
  29628  84ee				   .skipL01508
  29629  84ee				   .
  29630  84ee							; 
  29631  84ee
  29632  84ee				   .L01509		;  if player0x  <  player1x then x  =	player1x  -  player0x
  29633  84ee
  29634  84ee		       a5 80		      LDA	player0x
  29635  84f0		       c5 81		      CMP	player1x
  29636  84f2		       b0 07		      BCS	.skipL01509
  29637  84f4				   .condpart668
  29638  84f4		       a5 81		      LDA	player1x
  29639  84f6		       38		      SEC
  29640  84f7		       e5 80		      SBC	player0x
  29641  84f9		       85 eb		      STA	x
  29642  84fb				   .skipL01509
  29643  84fb				   .
  29644  84fb							; 
  29645  84fb
  29646  84fb				   .L01510		;  if player0x  >  player1x then x  =	player0x  -  player1x
  29647  84fb
  29648  84fb		       a5 81		      LDA	player1x
  29649  84fd		       c5 80		      CMP	player0x
  29650  84ff		       b0 07		      BCS	.skipL01510
  29651  8501				   .condpart669
  29652  8501		       a5 80		      LDA	player0x
  29653  8503		       38		      SEC
  29654  8504		       e5 81		      SBC	player1x
  29655  8506		       85 eb		      STA	x
  29656  8508				   .skipL01510
  29657  8508				   .
  29658  8508							; 
  29659  8508
  29660  8508				   .L01511		;  if x  <  32 then _Bit3_Enemy_Direction{3}  =  1
  29661  8508
  29662  8508		       a5 eb		      LDA	x
  29663  850a		       c9 20		      CMP	#32
  29664  850c		       b0 06		      BCS	.skipL01511
  29665  850e				   .condpart670
  29666  850e		       a5 da		      LDA	_Bit3_Enemy_Direction
  29667  8510		       09 08		      ORA	#8
  29668  8512		       85 da		      STA	_Bit3_Enemy_Direction
  29669  8514				   .skipL01511
  29670  8514				   .
  29671  8514							; 
  29672  8514
  29673  8514				   .L01512		;  gosub __Thwomp1
  29674  8514
  29675  8514		       20 09 f6 	      jsr	.__Thwomp1
  29676  8517
  29677  8517				   .
  29678  8517							; 
  29679  8517
  29680  8517				   .L01513		;  goto __Main_Loop bank1
  29681  8517
  29682  8517		       85 ee		      sta	temp7
  29683  8519		       a9 10		      lda	#>(.__Main_Loop-1)
  29684  851b		       48		      pha
  29685  851c		       a9 b0		      lda	#<(.__Main_Loop-1)
  29686  851e		       48		      pha
  29687  851f		       a5 ee		      lda	temp7
  29688  8521		       48		      pha
  29689  8522		       8a		      txa
  29690  8523		       48		      pha
  29691  8524		       a2 01		      ldx	#1
  29692  8526		       4c eb ff 	      jmp	BS_jsr
  29693  8529				   .
  29694  8529							; 
  29695  8529
  29696  8529				   .
  29697  8529							; 
  29698  8529
  29699  8529				   .__T2
  29700  8529							; __T2
  29701  8529
  29702  8529				   .
  29703  8529							; 
  29704  8529
  29705  8529				   .L01514		;  if _Enemy_Momentum	=  0 then player1y  =  player1y  +  8  :  gosub __Thwomp2
  29706  8529
  29707  8529		       a5 dd		      LDA	_Enemy_Momentum
  29708  852b		       c9 00		      CMP	#0
  29709  852d		       d0 0a		      BNE	.skipL01514
  29710  852f				   .condpart671
  29711  852f		       a5 86		      LDA	player1y
  29712  8531		       18		      CLC
  29713  8532		       69 08		      ADC	#8
  29714  8534		       85 86		      STA	player1y
  29715  8536		       20 16 f6 	      jsr	.__Thwomp2
  29716  8539
  29717  8539				   .skipL01514
  29718  8539				   .
  29719  8539							; 
  29720  8539
  29721  8539				   .L01515		;  if _Enemy_Momentum	>  0  &&  _Enemy_Momentum  <  16 then _Enemy_Momentum  =  _Enemy_Momentum  +  1  :  gosub __Thwomp2
  29722  8539
  29723  8539		       a9 00		      LDA	#0
  29724  853b		       c5 dd		      CMP	_Enemy_Momentum
  29725  853d		       b0 0b		      BCS	.skipL01515
  29726  853f				   .condpart672
  29727  853f		       a5 dd		      LDA	_Enemy_Momentum
  29728  8541		       c9 10		      CMP	#16
  29729  8543		       b0 05		      BCS	.skip672then
  29730  8545				   .condpart673
  29731  8545		       e6 dd		      INC	_Enemy_Momentum
  29732  8547		       20 16 f6 	      jsr	.__Thwomp2
  29733  854a
  29734  854a				   .skip672then
  29735  854a				   .skipL01515
  29736  854a				   .
  29737  854a							; 
  29738  854a
  29739  854a				   .L01516		;  if _Enemy_Momentum	=  2  ||  _Enemy_Momentum  =  4 then player1y  =  player1y  -  1
  29740  854a
  29741  854a		       a5 dd		      LDA	_Enemy_Momentum
  29742  854c		       c9 02		      CMP	#2
  29743  854e		       d0 03		      BNE	.skipL01516
  29744  8550				   .condpart674
  29745  8550		       4c 59 f5 	      jmp	.condpart675
  29746  8553				   .skipL01516
  29747  8553		       a5 dd		      LDA	_Enemy_Momentum
  29748  8555		       c9 04		      CMP	#4
  29749  8557		       d0 02		      BNE	.skip175OR
  29750  8559				   .condpart675
  29751  8559		       c6 86		      DEC	player1y
  29752  855b				   .skip175OR
  29753  855b				   .
  29754  855b							; 
  29755  855b
  29756  855b				   .L01517		;  if _Enemy_Momentum	=  3  ||  _Enemy_Momentum  =  5 then player1y  =  player1y  +  1
  29757  855b
  29758  855b		       a5 dd		      LDA	_Enemy_Momentum
  29759  855d		       c9 03		      CMP	#3
  29760  855f		       d0 03		      BNE	.skipL01517
  29761  8561				   .condpart676
  29762  8561		       4c 6a f5 	      jmp	.condpart677
  29763  8564				   .skipL01517
  29764  8564		       a5 dd		      LDA	_Enemy_Momentum
  29765  8566		       c9 05		      CMP	#5
  29766  8568		       d0 02		      BNE	.skip176OR
  29767  856a				   .condpart677
  29768  856a		       e6 86		      INC	player1y
  29769  856c				   .skip176OR
  29770  856c				   .
  29771  856c							; 
  29772  856c
  29773  856c				   .L01518		;  if _Enemy_Momentum	=  16 then player1y  =	player1y  -  4	:  gosub __Thwomp1
  29774  856c
  29775  856c		       a5 dd		      LDA	_Enemy_Momentum
  29776  856e		       c9 10		      CMP	#16
  29777  8570		       d0 0a		      BNE	.skipL01518
  29778  8572				   .condpart678
  29779  8572		       a5 86		      LDA	player1y
  29780  8574		       38		      SEC
  29781  8575		       e9 04		      SBC	#4
  29782  8577		       85 86		      STA	player1y
  29783  8579		       20 09 f6 	      jsr	.__Thwomp1
  29784  857c
  29785  857c				   .skipL01518
  29786  857c				   .
  29787  857c							; 
  29788  857c
  29789  857c				   .L01519		;  x  =   ( player1x  -  9 )  / 4
  29790  857c
  29791  857c							; complex statement detected
  29792  857c		       a5 81		      LDA	player1x
  29793  857e		       38		      SEC
  29794  857f		       e9 09		      SBC	#9
  29795  8581		       4a		      lsr
  29796  8582		       4a		      lsr
  29797  8583		       85 eb		      STA	x
  29798  8585				   .
  29799  8585							; 
  29800  8585
  29801  8585				   .L01520		;  if _Enemy_Momentum	=  16 then y  =   ( player1y  -  12 )  / 8 else y  =   ( player1y / 8 ) 
  29802  8585
  29803  8585		       a5 dd		      LDA	_Enemy_Momentum
  29804  8587		       c9 10		      CMP	#16
  29805  8589		       d0 0d		      BNE	.skipL01520
  29806  858b				   .condpart679
  29807  858b							; complex statement detected
  29808  858b		       a5 86		      LDA	player1y
  29809  858d		       38		      SEC
  29810  858e		       e9 0c		      SBC	#12
  29811  8590		       4a		      lsr
  29812  8591		       4a		      lsr
  29813  8592		       4a		      lsr
  29814  8593		       85 ec		      STA	y
  29815  8595		       4c 9f f5 	      jmp	.skipelse87
  29816  8598				   .skipL01520
  29817  8598							; complex statement detected
  29818  8598		       a5 86		      LDA	player1y
  29819  859a		       4a		      lsr
  29820  859b		       4a		      lsr
  29821  859c		       4a		      lsr
  29822  859d		       85 ec		      STA	y
  29823  859f				   .skipelse87
  29824  859f				   .
  29825  859f							; 
  29826  859f
  29827  859f				   .L01521		;  if !pfread ( x , y )  then goto __Main_Loop bank1
  29828  859f
  29829  859f		       a5 eb		      LDA	x
  29830  85a1		       a4 ec		      LDY	y
  29831  85a3		       20 ac f2 	      jsr	pfread
  29832  85a6		       f0 12		      BEQ	.skipL01521
  29833  85a8				   .condpart680
  29834  85a8		       85 ee		      sta	temp7
  29835  85aa		       a9 10		      lda	#>(.__Main_Loop-1)
  29836  85ac		       48		      pha
  29837  85ad		       a9 b0		      lda	#<(.__Main_Loop-1)
  29838  85af		       48		      pha
  29839  85b0		       a5 ee		      lda	temp7
  29840  85b2		       48		      pha
  29841  85b3		       8a		      txa
  29842  85b4		       48		      pha
  29843  85b5		       a2 01		      ldx	#1
  29844  85b7		       4c eb ff 	      jmp	BS_jsr
  29845  85ba				   .skipL01521
  29846  85ba				   .
  29847  85ba							; 
  29848  85ba
  29849  85ba				   .L01522		;  if _Enemy_Momentum	=  0 then _Enemy_Momentum  =  1  :  player1y  =   ( y  *  8 )	-  1  :  AUDV0	=  10  :  AUDC0  =  7  :  AUDF0  =  22
  29850  85ba
  29851  85ba		       a5 dd		      LDA	_Enemy_Momentum
  29852  85bc		       c9 00		      CMP	#0
  29853  85be		       d0 1a		      BNE	.skipL01522
  29854  85c0				   .condpart681
  29855  85c0		       a9 01		      LDA	#1
  29856  85c2		       85 dd		      STA	_Enemy_Momentum
  29857  85c4							; complex statement detected
  29858  85c4		       a5 ec		      LDA	y
  29859  85c6		       0a		      asl
  29860  85c7		       0a		      asl
  29861  85c8		       0a		      asl
  29862  85c9		       38		      SEC
  29863  85ca		       e9 01		      SBC	#1
  29864  85cc		       85 86		      STA	player1y
  29865  85ce		       a9 0a		      LDA	#10
  29866  85d0		       85 19		      STA	AUDV0
  29867  85d2		       a9 07		      LDA	#7
  29868  85d4		       85 15		      STA	AUDC0
  29869  85d6		       a9 16		      LDA	#22
  29870  85d8		       85 17		      STA	AUDF0
  29871  85da				   .skipL01522
  29872  85da				   .
  29873  85da							; 
  29874  85da
  29875  85da				   .L01523		;  if _Enemy_Momentum	=  16 then _Enemy_Momentum  =  0  :  player1y  =  24  :  _Bit3_Enemy_Direction{3}  =  0
  29876  85da
  29877  85da		       a5 dd		      LDA	_Enemy_Momentum
  29878  85dc		       c9 10		      CMP	#16
  29879  85de		       d0 0e		      BNE	.skipL01523
  29880  85e0				   .condpart682
  29881  85e0		       a9 00		      LDA	#0
  29882  85e2		       85 dd		      STA	_Enemy_Momentum
  29883  85e4		       a9 18		      LDA	#24
  29884  85e6		       85 86		      STA	player1y
  29885  85e8		       a5 da		      LDA	_Bit3_Enemy_Direction
  29886  85ea		       29 f7		      AND	#247
  29887  85ec		       85 da		      STA	_Bit3_Enemy_Direction
  29888  85ee				   .skipL01523
  29889  85ee				   .
  29890  85ee							; 
  29891  85ee
  29892  85ee				   .L01524		;  goto __Main_Loop bank1
  29893  85ee
  29894  85ee		       85 ee		      sta	temp7
  29895  85f0		       a9 10		      lda	#>(.__Main_Loop-1)
  29896  85f2		       48		      pha
  29897  85f3		       a9 b0		      lda	#<(.__Main_Loop-1)
  29898  85f5		       48		      pha
  29899  85f6		       a5 ee		      lda	temp7
  29900  85f8		       48		      pha
  29901  85f9		       8a		      txa
  29902  85fa		       48		      pha
  29903  85fb		       a2 01		      ldx	#1
  29904  85fd		       4c eb ff 	      jmp	BS_jsr
  29905  8600				   .
  29906  8600							; 
  29907  8600
  29908  8600				   .__ThwompC
  29909  8600							; __ThwompC
  29910  8600
  29911  8600				   .L01525		;  player1color:
  29912  8600
  29913  8600		       a2 80		      LDX	#<playercolorL01525_1
  29914  8602		       86 87		      STX	player1color
  29915  8604		       a9 fe		      LDA	#>playercolorL01525_1
  29916  8606		       85 88		      STA	player1color+1
  29917  8608				   .L01526		;  return thisbank
  29918  8608
  29919  8608		       60		      RTS
  29920  8609				   .
  29921  8609							; 
  29922  8609
  29923  8609				   .__Thwomp1
  29924  8609							; __Thwomp1
  29925  8609
  29926  8609				   .L01527		;  player1:
  29927  8609
  29928  8609		       a2 90		      LDX	#<playerL01527_1
  29929  860b		       86 8c		      STX	player1pointerlo
  29930  860d		       a9 fe		      LDA	#>playerL01527_1
  29931  860f		       85 8d		      STA	player1pointerhi
  29932  8611		       a9 0f		      LDA	#15
  29933  8613		       85 8f		      STA	player1height
  29934  8615				   .L01528		;  return thisbank
  29935  8615
  29936  8615		       60		      RTS
  29937  8616				   .
  29938  8616							; 
  29939  8616
  29940  8616				   .__Thwomp2
  29941  8616							; __Thwomp2
  29942  8616
  29943  8616				   .L01529		;  player1:
  29944  8616
  29945  8616		       a2 a0		      LDX	#<playerL01529_1
  29946  8618		       86 8c		      STX	player1pointerlo
  29947  861a		       a9 fe		      LDA	#>playerL01529_1
  29948  861c		       85 8d		      STA	player1pointerhi
  29949  861e		       a9 0f		      LDA	#15
  29950  8620		       85 8f		      STA	player1height
  29951  8622				   .L01530		;  return thisbank
  29952  8622
  29953  8622		       60		      RTS
  29954  8623				   .
  29955  8623							; 
  29956  8623
  29957  8623				   .
  29958  8623							; 
  29959  8623
  29960  8623				   .
  29961  8623							; 
  29962  8623
  29963  8623				   .__Final
  29964  8623							; __Final
  29965  8623
  29966  8623				   .
  29967  8623							; 
  29968  8623
  29969  8623				   .L01531		;  y  =  30  :  gosub __Pause_B8
  29970  8623
  29971  8623		       a9 1e		      LDA	#30
  29972  8625		       85 ec		      STA	y
  29973  8627		       20 47 f8 	      jsr	.__Pause_B8
  29974  862a
  29975  862a				   .
  29976  862a							; 
  29977  862a
  29978  862a				   .L01532		;  for z  =  1 to 8
  29979  862a
  29980  862a		       a9 01		      LDA	#1
  29981  862c		       85 ed		      STA	z
  29982  862e				   .L01532forz
  29983  862e				   .
  29984  862e							; 
  29985  862e
  29986  862e				   .L01533		;  pfclear
  29987  862e
  29988  862e		       a9 00		      LDA	#0
  29989  8630		       20 90 f2 	      jsr	pfclear
  29990  8633				   .
  29991  8633							; 
  29992  8633
  29993  8633				   .L01534		;  y  =  4  :	gosub __Pause_B8
  29994  8633
  29995  8633		       a9 04		      LDA	#4
  29996  8635		       85 ec		      STA	y
  29997  8637		       20 47 f8 	      jsr	.__Pause_B8
  29998  863a
  29999  863a				   .
  30000  863a							; 
  30001  863a
  30002  863a				   .L01535		;  gosub __Boss_PF_Setup_4 bank6
  30003  863a
  30004  863a		       85 ee		      sta	temp7
  30005  863c		       a9 f6		      lda	#>(ret_point96-1)
  30006  863e		       48		      pha
  30007  863f		       a9 51		      lda	#<(ret_point96-1)
  30008  8641		       48		      pha
  30009  8642		       a9 bf		      lda	#>(.__Boss_PF_Setup_4-1)
  30010  8644		       48		      pha
  30011  8645		       a9 77		      lda	#<(.__Boss_PF_Setup_4-1)
  30012  8647		       48		      pha
  30013  8648		       a5 ee		      lda	temp7
  30014  864a		       48		      pha
  30015  864b		       8a		      txa
  30016  864c		       48		      pha
  30017  864d		       a2 06		      ldx	#6
  30018  864f		       4c eb ff 	      jmp	BS_jsr
  30019  8652				   ret_point96
  30020  8652				   .
  30021  8652							; 
  30022  8652
  30023  8652				   .L01536		;  gosub __Pause_B8
  30024  8652
  30025  8652		       20 47 f8 	      jsr	.__Pause_B8
  30026  8655
  30027  8655				   .
  30028  8655							; 
  30029  8655
  30030  8655				   .L01537		;  next z
  30031  8655
  30032  8655		       a5 ed		      LDA	z
  30033  8657		       c9 08		      CMP	#8
  30034  8659
  30035  8659		       e6 ed		      INC	z
  30036  865b					      if	((* - .L01532forz) < 127) && ((* - .L01532forz) > -128)
  30037  865b		       90 d1		      bcc	.L01532forz
  30038  865d				  -	      else
  30039  865d				  -	      bcs	.18skipL01532forz
  30040  865d				  -	      jmp	.L01532forz
  30041  865d				  -.18skipL01532forz
  30042  865d					      endif
  30043  865d				   .
  30044  865d							; 
  30045  865d
  30046  865d				   .L01538		;  pfclear
  30047  865d
  30048  865d		       a9 00		      LDA	#0
  30049  865f		       20 90 f2 	      jsr	pfclear
  30050  8662				   .
  30051  8662							; 
  30052  8662
  30053  8662				   .L01539		;  y  =  30  :  gosub __Pause_B8
  30054  8662
  30055  8662		       a9 1e		      LDA	#30
  30056  8664		       85 ec		      STA	y
  30057  8666		       20 47 f8 	      jsr	.__Pause_B8
  30058  8669
  30059  8669				   .
  30060  8669							; 
  30061  8669
  30062  8669				   .
  30063  8669							; 
  30064  8669
  30065  8669				   .__Final2
  30066  8669							; __Final2
  30067  8669
  30068  8669				   .
  30069  8669							; 
  30070  8669
  30071  8669				   .L01540		;  if player1x  >  0 then player1x  =	player1x  -  1 else player1y  =  150  :  goto __Final3
  30072  8669
  30073  8669		       a9 00		      LDA	#0
  30074  866b		       c5 81		      CMP	player1x
  30075  866d		       b0 05		      BCS	.skipL01540
  30076  866f				   .condpart683
  30077  866f		       c6 81		      DEC	player1x
  30078  8671		       4c 7b f6 	      jmp	.skipelse88
  30079  8674				   .skipL01540
  30080  8674		       a9 96		      LDA	#150
  30081  8676		       85 86		      STA	player1y
  30082  8678		       4c 94 f6 	      jmp	.__Final3
  30083  867b
  30084  867b				   .skipelse88
  30085  867b				   .
  30086  867b							; 
  30087  867b
  30088  867b				   .L01541		;  if player0x  >  0 then player0x  =	player0x  -  1 else player0y  =  150
  30089  867b
  30090  867b		       a9 00		      LDA	#0
  30091  867d		       c5 80		      CMP	player0x
  30092  867f		       b0 05		      BCS	.skipL01541
  30093  8681				   .condpart684
  30094  8681		       c6 80		      DEC	player0x
  30095  8683		       4c 8a f6 	      jmp	.skipelse89
  30096  8686				   .skipL01541
  30097  8686		       a9 96		      LDA	#150
  30098  8688		       85 85		      STA	player0y
  30099  868a				   .skipelse89
  30100  868a				   .
  30101  868a							; 
  30102  868a
  30103  868a				   .L01542		;  NUSIZ1  =  $15
  30104  868a
  30105  868a		       a9 15		      LDA	#$15
  30106  868c		       85 05		      STA	NUSIZ1
  30107  868e				   .
  30108  868e							; 
  30109  868e
  30110  868e				   .L01543		;  drawscreen
  30111  868e
  30112  868e		       20 38 f4 	      jsr	drawscreen
  30113  8691				   .
  30114  8691							; 
  30115  8691
  30116  8691				   .L01544		;  goto __Final2
  30117  8691
  30118  8691		       4c 69 f6 	      jmp	.__Final2
  30119  8694
  30120  8694				   .
  30121  8694							; 
  30122  8694
  30123  8694				   .
  30124  8694							; 
  30125  8694
  30126  8694				   .__Final3
  30127  8694							; __Final3
  30128  8694
  30129  8694				   .
  30130  8694							; 
  30131  8694
  30132  8694				   .L01545		;  _Enemy_Type  =  _Goomba  :	gosub __Pause_B8
  30133  8694
  30134  8694		       a9 00		      LDA	#_Goomba
  30135  8696		       85 dc		      STA	_Enemy_Type
  30136  8698		       20 47 f8 	      jsr	.__Pause_B8
  30137  869b
  30138  869b				   .
  30139  869b							; 
  30140  869b
  30141  869b				   .L01546		;  gosub __PrincessC  :  gosub __PB
  30142  869b
  30143  869b		       20 73 f8 	      jsr	.__PrincessC
  30144  869e		       20 89 f8 	      jsr	.__PB
  30145  86a1
  30146  86a1				   .
  30147  86a1							; 
  30148  86a1
  30149  86a1				   .L01547		;  player1y  =  80
  30150  86a1
  30151  86a1		       a9 50		      LDA	#80
  30152  86a3		       85 86		      STA	player1y
  30153  86a5				   .
  30154  86a5							; 
  30155  86a5
  30156  86a5				   .L01548		;  for x  =  150 to 100 step -1
  30157  86a5
  30158  86a5		       a9 96		      LDA	#150
  30159  86a7		       85 eb		      STA	x
  30160  86a9				   .L01548forx
  30161  86a9				   .
  30162  86a9							; 
  30163  86a9
  30164  86a9				   .L01549		;  player1x  =  x
  30165  86a9
  30166  86a9		       a5 eb		      LDA	x
  30167  86ab		       85 81		      STA	player1x
  30168  86ad				   .
  30169  86ad							; 
  30170  86ad
  30171  86ad				   .L01550		;  REFP1  =  8
  30172  86ad
  30173  86ad		       a9 08		      LDA	#8
  30174  86af		       85 0c		      STA	REFP1
  30175  86b1				   .
  30176  86b1							; 
  30177  86b1
  30178  86b1				   .L01551		;  drawscreen
  30179  86b1
  30180  86b1		       20 38 f4 	      jsr	drawscreen
  30181  86b4				   .
  30182  86b4							; 
  30183  86b4
  30184  86b4				   .L01552		;  next x
  30185  86b4
  30186  86b4		       a5 eb		      LDA	x
  30187  86b6		       18		      CLC
  30188  86b7		       69 ff		      ADC	#-1
  30189  86b9
  30190  86b9		       85 eb		      STA	x
  30191  86bb		       c9 64		      CMP	#100
  30192  86bd					      if	((* - .L01548forx) < 127) && ((* - .L01548forx) > -128)
  30193  86bd		       b0 ea		      bcs	.L01548forx
  30194  86bf				  -	      else
  30195  86bf				  -	      bcc	.19skipL01548forx
  30196  86bf				  -	      jmp	.L01548forx
  30197  86bf				  -.19skipL01548forx
  30198  86bf					      endif
  30199  86bf				   .
  30200  86bf							; 
  30201  86bf
  30202  86bf				   .L01553		;  gosub __Pause_B8
  30203  86bf
  30204  86bf		       20 47 f8 	      jsr	.__Pause_B8
  30205  86c2
  30206  86c2				   .
  30207  86c2							; 
  30208  86c2
  30209  86c2				   .L01554		;  _Animation_Timer  =  0  :  _Bit6_Regular_Mario{6}  =  0  :	_Bit3_Super_Mario_Power{3}  =  1  :  _Momentum_Left_Right  =  1  :  player0y  =  80
  30210  86c2
  30211  86c2		       a9 00		      LDA	#0
  30212  86c4		       85 d4		      STA	_Animation_Timer
  30213  86c6		       a5 d7		      LDA	_Bit6_Regular_Mario
  30214  86c8		       29 bf		      AND	#191
  30215  86ca		       85 d7		      STA	_Bit6_Regular_Mario
  30216  86cc		       a5 d7		      LDA	_Bit3_Super_Mario_Power
  30217  86ce		       09 08		      ORA	#8
  30218  86d0		       85 d7		      STA	_Bit3_Super_Mario_Power
  30219  86d2		       a9 01		      LDA	#1
  30220  86d4		       85 e0		      STA	_Momentum_Left_Right
  30221  86d6		       a9 50		      LDA	#80
  30222  86d8		       85 85		      STA	player0y
  30223  86da				   .
  30224  86da							; 
  30225  86da
  30226  86da				   .L01555		;  for z  =  0 to 74
  30227  86da
  30228  86da		       a9 00		      LDA	#0
  30229  86dc		       85 ed		      STA	z
  30230  86de				   .L01555forz
  30231  86de				   .
  30232  86de							; 
  30233  86de
  30234  86de				   .L01556		;  _Animation_Timer  =  _Animation_Timer  +  1
  30235  86de
  30236  86de		       e6 d4		      INC	_Animation_Timer
  30237  86e0				   .
  30238  86e0							; 
  30239  86e0
  30240  86e0				   .L01557		;  if _Animation_Timer  >  6 then _Animation_Timer  =	0
  30241  86e0
  30242  86e0		       a9 06		      LDA	#6
  30243  86e2		       c5 d4		      CMP	_Animation_Timer
  30244  86e4		       b0 04		      BCS	.skipL01557
  30245  86e6				   .condpart685
  30246  86e6		       a9 00		      LDA	#0
  30247  86e8		       85 d4		      STA	_Animation_Timer
  30248  86ea				   .skipL01557
  30249  86ea				   .
  30250  86ea							; 
  30251  86ea
  30252  86ea				   .L01558		;  gosub __Set_Up_Mario bank1
  30253  86ea
  30254  86ea		       85 ee		      sta	temp7
  30255  86ec		       a9 f7		      lda	#>(ret_point97-1)
  30256  86ee		       48		      pha
  30257  86ef		       a9 01		      lda	#<(ret_point97-1)
  30258  86f1		       48		      pha
  30259  86f2		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  30260  86f4		       48		      pha
  30261  86f5		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  30262  86f7		       48		      pha
  30263  86f8		       a5 ee		      lda	temp7
  30264  86fa		       48		      pha
  30265  86fb		       8a		      txa
  30266  86fc		       48		      pha
  30267  86fd		       a2 01		      ldx	#1
  30268  86ff		       4c eb ff 	      jmp	BS_jsr
  30269  8702				   ret_point97
  30270  8702				   .
  30271  8702							; 
  30272  8702
  30273  8702				   .L01559		;  player0x  =  z
  30274  8702
  30275  8702		       a5 ed		      LDA	z
  30276  8704		       85 80		      STA	player0x
  30277  8706				   .
  30278  8706							; 
  30279  8706
  30280  8706				   .L01560		;  y  =  3  :	gosub __Pause_B8
  30281  8706
  30282  8706		       a9 03		      LDA	#3
  30283  8708		       85 ec		      STA	y
  30284  870a		       20 47 f8 	      jsr	.__Pause_B8
  30285  870d
  30286  870d				   .
  30287  870d							; 
  30288  870d
  30289  870d				   .L01561		;  next z
  30290  870d
  30291  870d		       a5 ed		      LDA	z
  30292  870f		       c9 4a		      CMP	#74
  30293  8711
  30294  8711		       e6 ed		      INC	z
  30295  8713					      if	((* - .L01555forz) < 127) && ((* - .L01555forz) > -128)
  30296  8713		       90 c9		      bcc	.L01555forz
  30297  8715				  -	      else
  30298  8715				  -	      bcs	.20skipL01555forz
  30299  8715				  -	      jmp	.L01555forz
  30300  8715				  -.20skipL01555forz
  30301  8715					      endif
  30302  8715				   .
  30303  8715							; 
  30304  8715
  30305  8715				   .L01562		;  _Animation_Timer  =  0  :  gosub __Set_Up_Mario bank1
  30306  8715
  30307  8715		       a9 00		      LDA	#0
  30308  8717		       85 d4		      STA	_Animation_Timer
  30309  8719		       85 ee		      sta	temp7
  30310  871b		       a9 f7		      lda	#>(ret_point98-1)
  30311  871d		       48		      pha
  30312  871e		       a9 30		      lda	#<(ret_point98-1)
  30313  8720		       48		      pha
  30314  8721		       a9 18		      lda	#>(.__Set_Up_Mario-1)
  30315  8723		       48		      pha
  30316  8724		       a9 98		      lda	#<(.__Set_Up_Mario-1)
  30317  8726		       48		      pha
  30318  8727		       a5 ee		      lda	temp7
  30319  8729		       48		      pha
  30320  872a		       8a		      txa
  30321  872b		       48		      pha
  30322  872c		       a2 01		      ldx	#1
  30323  872e		       4c eb ff 	      jmp	BS_jsr
  30324  8731				   ret_point98
  30325  8731				   .
  30326  8731							; 
  30327  8731
  30328  8731				   .L01563		;  y  =  30  :  gosub __Pause_B8
  30329  8731
  30330  8731		       a9 1e		      LDA	#30
  30331  8733		       85 ec		      STA	y
  30332  8735		       20 47 f8 	      jsr	.__Pause_B8
  30333  8738
  30334  8738				   .
  30335  8738							; 
  30336  8738
  30337  8738				   .L01564		;  gosub __PA
  30338  8738
  30339  8738		       20 7c f8 	      jsr	.__PA
  30340  873b
  30341  873b				   .
  30342  873b							; 
  30343  873b
  30344  873b				   .L01565		;  y  =  40  :  gosub __Pause_B8
  30345  873b
  30346  873b		       a9 28		      LDA	#40
  30347  873d		       85 ec		      STA	y
  30348  873f		       20 47 f8 	      jsr	.__Pause_B8
  30349  8742
  30350  8742				   .
  30351  8742							; 
  30352  8742
  30353  8742				   .L01566		;  _Enemy_Type  =  1
  30354  8742
  30355  8742		       a9 01		      LDA	#1
  30356  8744		       85 dc		      STA	_Enemy_Type
  30357  8746				   .
  30358  8746							; 
  30359  8746
  30360  8746				   .L01567		;  y  =  120  :  gosub __Pause_B8
  30361  8746
  30362  8746		       a9 78		      LDA	#120
  30363  8748		       85 ec		      STA	y
  30364  874a		       20 47 f8 	      jsr	.__Pause_B8
  30365  874d
  30366  874d				   .
  30367  874d							; 
  30368  874d
  30369  874d				   .L01568		;  for z  =  100 to 84 step -1
  30370  874d
  30371  874d		       a9 64		      LDA	#100
  30372  874f		       85 ed		      STA	z
  30373  8751				   .L01568forz
  30374  8751				   .
  30375  8751							; 
  30376  8751
  30377  8751				   .L01569		;  player1x  =  z
  30378  8751
  30379  8751		       a5 ed		      LDA	z
  30380  8753		       85 81		      STA	player1x
  30381  8755				   .
  30382  8755							; 
  30383  8755
  30384  8755				   .L01570		;  y  =  3  :	gosub __Pause_B8
  30385  8755
  30386  8755		       a9 03		      LDA	#3
  30387  8757		       85 ec		      STA	y
  30388  8759		       20 47 f8 	      jsr	.__Pause_B8
  30389  875c
  30390  875c				   .
  30391  875c							; 
  30392  875c
  30393  875c				   .L01571		;  next z
  30394  875c
  30395  875c		       a5 ed		      LDA	z
  30396  875e		       18		      CLC
  30397  875f		       69 ff		      ADC	#-1
  30398  8761
  30399  8761		       85 ed		      STA	z
  30400  8763		       c9 54		      CMP	#84
  30401  8765					      if	((* - .L01568forz) < 127) && ((* - .L01568forz) > -128)
  30402  8765		       b0 ea		      bcs	.L01568forz
  30403  8767				  -	      else
  30404  8767				  -	      bcc	.21skipL01568forz
  30405  8767				  -	      jmp	.L01568forz
  30406  8767				  -.21skipL01568forz
  30407  8767					      endif
  30408  8767				   .
  30409  8767							; 
  30410  8767
  30411  8767				   .L01572		;  gosub __Final_Music bank7
  30412  8767
  30413  8767		       85 ee		      sta	temp7
  30414  8769		       a9 f7		      lda	#>(ret_point99-1)
  30415  876b		       48		      pha
  30416  876c		       a9 7e		      lda	#<(ret_point99-1)
  30417  876e		       48		      pha
  30418  876f		       a9 df		      lda	#>(.__Final_Music-1)
  30419  8771		       48		      pha
  30420  8772		       a9 2b		      lda	#<(.__Final_Music-1)
  30421  8774		       48		      pha
  30422  8775		       a5 ee		      lda	temp7
  30423  8777		       48		      pha
  30424  8778		       8a		      txa
  30425  8779		       48		      pha
  30426  877a		       a2 07		      ldx	#7
  30427  877c		       4c eb ff 	      jmp	BS_jsr
  30428  877f				   ret_point99
  30429  877f				   .
  30430  877f							; 
  30431  877f
  30432  877f				   .L01573		;  _Music_Duration  =	1
  30433  877f
  30434  877f		       a9 01		      LDA	#1
  30435  8781		       85 e3		      STA	_Music_Duration
  30436  8783				   .
  30437  8783							; 
  30438  8783
  30439  8783				   .L01574		;  pfcolors:
  30440  8783
  30441  8783		       a9 46		      lda	# $46
  30442  8785		       85 08		      sta	COLUPF
  30443  8787				  -	      ifconst	pfres
  30444  8787				  -	      lda	#>(pfcolorlabel1194-129+pfres*pfwidth)
  30445  8787					      else
  30446  8787		       a9 fc		      lda	#>(pfcolorlabel1194-81)
  30447  8789					      endif
  30448  8789		       85 f1		      sta	pfcolortable+1
  30449  878b				  -	      ifconst	pfres
  30450  878b				  -	      lda	#<(pfcolorlabel1194-129+pfres*pfwidth)
  30451  878b					      else
  30452  878b		       a9 0f		      lda	#<(pfcolorlabel1194-81)
  30453  878d					      endif
  30454  878d		       85 f0		      sta	pfcolortable
  30455  878f				   .
  30456  878f							; 
  30457  878f
  30458  878f				   .L01575		;  playfield:
  30459  878f
  30460  878f				  -	      ifconst	pfres
  30461  878f				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  30462  878f					      else
  30463  878f		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  30464  8791					      endif
  30465  8791		       4c c0 f7 	      jmp	pflabel5
  30466  8794				   PF_data5
  30467  8794		       00 c0		      .byte.b	%00000000, %11000000
  30468  8796					      if	(pfwidth>2)
  30469  8796		       60 00		      .byte.b	%01100000, %00000000
  30470  8798					      endif
  30471  8798		       00 e0		      .byte.b	%00000000, %11100000
  30472  879a					      if	(pfwidth>2)
  30473  879a		       f0 00		      .byte.b	%11110000, %00000000
  30474  879c					      endif
  30475  879c		       00 e0		      .byte.b	%00000000, %11100000
  30476  879e					      if	(pfwidth>2)
  30477  879e		       f0 00		      .byte.b	%11110000, %00000000
  30478  87a0					      endif
  30479  87a0		       00 c0		      .byte.b	%00000000, %11000000
  30480  87a2					      if	(pfwidth>2)
  30481  87a2		       e0 00		      .byte.b	%11100000, %00000000
  30482  87a4					      endif
  30483  87a4		       00 80		      .byte.b	%00000000, %10000000
  30484  87a6					      if	(pfwidth>2)
  30485  87a6		       c0 00		      .byte.b	%11000000, %00000000
  30486  87a8					      endif
  30487  87a8		       00 00		      .byte.b	%00000000, %00000000
  30488  87aa					      if	(pfwidth>2)
  30489  87aa		       80 00		      .byte.b	%10000000, %00000000
  30490  87ac					      endif
  30491  87ac		       00 00		      .byte.b	%00000000, %00000000
  30492  87ae					      if	(pfwidth>2)
  30493  87ae		       00 00		      .byte.b	%00000000, %00000000
  30494  87b0					      endif
  30495  87b0		       00 00		      .byte.b	%00000000, %00000000
  30496  87b2					      if	(pfwidth>2)
  30497  87b2		       00 00		      .byte.b	%00000000, %00000000
  30498  87b4					      endif
  30499  87b4		       00 00		      .byte.b	%00000000, %00000000
  30500  87b6					      if	(pfwidth>2)
  30501  87b6		       00 00		      .byte.b	%00000000, %00000000
  30502  87b8					      endif
  30503  87b8		       00 00		      .byte.b	%00000000, %00000000
  30504  87ba					      if	(pfwidth>2)
  30505  87ba		       00 00		      .byte.b	%00000000, %00000000
  30506  87bc					      endif
  30507  87bc		       00 00		      .byte.b	%00000000, %00000000
  30508  87be					      if	(pfwidth>2)
  30509  87be		       00 00		      .byte.b	%00000000, %00000000
  30510  87c0					      endif
  30511  87c0				   pflabel5
  30512  87c0		       bd 94 f7 	      lda	PF_data5,x
  30513  87c3		       95 a4		      sta	playfield,x
  30514  87c5		       ca		      dex
  30515  87c6		       10 f8		      bpl	pflabel5
  30516  87c8				   .
  30517  87c8							; 
  30518  87c8
  30519  87c8				   .__Final4
  30520  87c8							; __Final4
  30521  87c8
  30522  87c8				   .
  30523  87c8							; 
  30524  87c8
  30525  87c8				   .L01576		;  gosub __Play_Final_Music bank7
  30526  87c8
  30527  87c8		       85 ee		      sta	temp7
  30528  87ca		       a9 f7		      lda	#>(ret_point100-1)
  30529  87cc		       48		      pha
  30530  87cd		       a9 df		      lda	#<(ret_point100-1)
  30531  87cf		       48		      pha
  30532  87d0		       a9 de		      lda	#>(.__Play_Final_Music-1)
  30533  87d2		       48		      pha
  30534  87d3		       a9 d4		      lda	#<(.__Play_Final_Music-1)
  30535  87d5		       48		      pha
  30536  87d6		       a5 ee		      lda	temp7
  30537  87d8		       48		      pha
  30538  87d9		       8a		      txa
  30539  87da		       48		      pha
  30540  87db		       a2 07		      ldx	#7
  30541  87dd		       4c eb ff 	      jmp	BS_jsr
  30542  87e0				   ret_point100
  30543  87e0				   .
  30544  87e0							; 
  30545  87e0
  30546  87e0				   .L01577		;  if _Music_Duration	=  255 then goto __Final5
  30547  87e0
  30548  87e0		       a5 e3		      LDA	_Music_Duration
  30549  87e2		       c9 ff		      CMP	#255
  30550  87e4		       d0 03		      BNE	.skipL01577
  30551  87e6				   .condpart686
  30552  87e6		       4c f3 f7 	      jmp	.__Final5
  30553  87e9
  30554  87e9				   .skipL01577
  30555  87e9				   .
  30556  87e9							; 
  30557  87e9
  30558  87e9				   .L01578		;  y  =  4  :	gosub __Pause_B8
  30559  87e9
  30560  87e9		       a9 04		      LDA	#4
  30561  87eb		       85 ec		      STA	y
  30562  87ed		       20 47 f8 	      jsr	.__Pause_B8
  30563  87f0
  30564  87f0				   .
  30565  87f0							; 
  30566  87f0
  30567  87f0				   .L01579		;  goto __Final4
  30568  87f0
  30569  87f0		       4c c8 f7 	      jmp	.__Final4
  30570  87f3
  30571  87f3				   .
  30572  87f3							; 
  30573  87f3
  30574  87f3				   .__Final5
  30575  87f3							; __Final5
  30576  87f3
  30577  87f3				   .
  30578  87f3							; 
  30579  87f3
  30580  87f3				   .L01580		;  _World  =  1  :  _Level  =	1
  30581  87f3
  30582  87f3		       a9 01		      LDA	#1
  30583  87f5		       85 e9		      STA	_World
  30584  87f7		       85 ea		      STA	_Level
  30585  87f9				   .
  30586  87f9							; 
  30587  87f9
  30588  87f9				   .L01581		;  _Coin_Counter  =  0  :  _Bit3_Super_Mario_Power{3}	=  0  :  _Bit4_Firey_Mario_Power{4}  =	0  :  g  =  0  :  pfscore2  =  0
  30589  87f9
  30590  87f9		       a9 00		      LDA	#0
  30591  87fb		       85 d6		      STA	_Coin_Counter
  30592  87fd		       a5 d7		      LDA	_Bit3_Super_Mario_Power
  30593  87ff		       29 f7		      AND	#247
  30594  8801		       85 d7		      STA	_Bit3_Super_Mario_Power
  30595  8803		       a5 d7		      LDA	_Bit4_Firey_Mario_Power
  30596  8805		       29 ef		      AND	#239
  30597  8807		       85 d7		      STA	_Bit4_Firey_Mario_Power
  30598  8809		       a9 00		      LDA	#0
  30599  880b		       85 da		      STA	g
  30600  880d		       85 f3		      STA	pfscore2
  30601  880f				   .
  30602  880f							; 
  30603  880f
  30604  880f				   .L01582		;  _Bit6_Regular_Mario{6}  =  1  :  _Bit7_2nd_Quest{7}  =  1
  30605  880f
  30606  880f		       a5 d7		      LDA	_Bit6_Regular_Mario
  30607  8811		       09 40		      ORA	#64
  30608  8813		       85 d7		      STA	_Bit6_Regular_Mario
  30609  8815		       a5 d9		      LDA	_Bit7_2nd_Quest
  30610  8817		       09 80		      ORA	#128
  30611  8819		       85 d9		      STA	_Bit7_2nd_Quest
  30612  881b				   .
  30613  881b							; 
  30614  881b
  30615  881b				   .L01583		;  if joy0fire then score  =  0  :  goto __Gm_Ovr_Scrn_4 bank4
  30616  881b
  30617  881b		       24 0c		      bit	INPT4
  30618  881d		       30 1e		      BMI	.skipL01583
  30619  881f				   .condpart687
  30620  881f		       a9 00		      LDA	#$00
  30621  8821		       85 95		      STA	score+2
  30622  8823		       a9 00		      LDA	#$00
  30623  8825		       85 94		      STA	score+1
  30624  8827		       a9 00		      LDA	#$00
  30625  8829		       85 93		      STA	score
  30626  882b		       85 ee		      sta	temp7
  30627  882d		       a9 74		      lda	#>(.__Gm_Ovr_Scrn_4-1)
  30628  882f		       48		      pha
  30629  8830		       a9 36		      lda	#<(.__Gm_Ovr_Scrn_4-1)
  30630  8832		       48		      pha
  30631  8833		       a5 ee		      lda	temp7
  30632  8835		       48		      pha
  30633  8836		       8a		      txa
  30634  8837		       48		      pha
  30635  8838		       a2 04		      ldx	#4
  30636  883a		       4c eb ff 	      jmp	BS_jsr
  30637  883d				   .skipL01583
  30638  883d				   .
  30639  883d							; 
  30640  883d
  30641  883d				   .L01584		;  COLUPF  =  $46
  30642  883d
  30643  883d		       a9 46		      LDA	#$46
  30644  883f		       85 08		      STA	COLUPF
  30645  8841				   .
  30646  8841							; 
  30647  8841
  30648  8841				   .L01585		;  drawscreen
  30649  8841
  30650  8841		       20 38 f4 	      jsr	drawscreen
  30651  8844				   .
  30652  8844							; 
  30653  8844
  30654  8844				   .L01586		;  goto __Final5
  30655  8844
  30656  8844		       4c f3 f7 	      jmp	.__Final5
  30657  8847
  30658  8847				   .
  30659  8847							; 
  30660  8847
  30661  8847				   .__Pause_B8
  30662  8847							; __Pause_B8
  30663  8847
  30664  8847				   .
  30665  8847							; 
  30666  8847
  30667  8847				   .L01587		;  for x  =  1 to y
  30668  8847
  30669  8847		       a9 01		      LDA	#1
  30670  8849		       85 eb		      STA	x
  30671  884b				   .L01587forx
  30672  884b				   .
  30673  884b							; 
  30674  884b
  30675  884b				   .L01588		;  COLUPF  =  $46
  30676  884b
  30677  884b		       a9 46		      LDA	#$46
  30678  884d		       85 08		      STA	COLUPF
  30679  884f				   .
  30680  884f							; 
  30681  884f
  30682  884f				   .L01589		;  if _Enemy_Type  =  _Bowser_Jr then NUSIZ1  =  $15  :  COLUPF  =  $04
  30683  884f
  30684  884f		       a5 dc		      LDA	_Enemy_Type
  30685  8851		       c9 40		      CMP	#_Bowser_Jr
  30686  8853		       d0 08		      BNE	.skipL01589
  30687  8855				   .condpart688
  30688  8855		       a9 15		      LDA	#$15
  30689  8857		       85 05		      STA	NUSIZ1
  30690  8859		       a9 04		      LDA	#$04
  30691  885b		       85 08		      STA	COLUPF
  30692  885d				   .skipL01589
  30693  885d				   .
  30694  885d							; 
  30695  885d
  30696  885d				   .L01590		;  if _Enemy_Type  =  _Goomba then REFP1  =  8
  30697  885d
  30698  885d		       a5 dc		      LDA	_Enemy_Type
  30699  885f		       c9 00		      CMP	#_Goomba
  30700  8861		       d0 04		      BNE	.skipL01590
  30701  8863				   .condpart689
  30702  8863		       a9 08		      LDA	#8
  30703  8865		       85 0c		      STA	REFP1
  30704  8867				   .skipL01590
  30705  8867				   .
  30706  8867							; 
  30707  8867
  30708  8867				   .L01591		;  drawscreen
  30709  8867
  30710  8867		       20 38 f4 	      jsr	drawscreen
  30711  886a				   .
  30712  886a							; 
  30713  886a
  30714  886a				   .L01592		;  next x
  30715  886a
  30716  886a		       a5 eb		      LDA	x
  30717  886c		       c5 ec		      CMP	y
  30718  886e
  30719  886e		       e6 eb		      INC	x
  30720  8870					      if	((* - .L01587forx) < 127) && ((* - .L01587forx) > -128)
  30721  8870		       90 d9		      bcc	.L01587forx
  30722  8872				  -	      else
  30723  8872				  -	      bcs	.22skipL01587forx
  30724  8872				  -	      jmp	.L01587forx
  30725  8872				  -.22skipL01587forx
  30726  8872					      endif
  30727  8872				   .
  30728  8872							; 
  30729  8872
  30730  8872				   .L01593		;  return thisbank
  30731  8872
  30732  8872		       60		      RTS
  30733  8873				   .
  30734  8873							; 
  30735  8873
  30736  8873				   .__PrincessC
  30737  8873							; __PrincessC
  30738  8873
  30739  8873				   .L01594		;  player1color:
  30740  8873
  30741  8873		       a2 b0		      LDX	#<playercolorL01594_1
  30742  8875		       86 87		      STX	player1color
  30743  8877		       a9 fe		      LDA	#>playercolorL01594_1
  30744  8879		       85 88		      STA	player1color+1
  30745  887b				   .L01595		;  return thisbank
  30746  887b
  30747  887b		       60		      RTS
  30748  887c				   .
  30749  887c							; 
  30750  887c
  30751  887c				   .__PA
  30752  887c							; __PA
  30753  887c
  30754  887c				   .L01596		;  player1:
  30755  887c
  30756  887c		       a2 c8		      LDX	#<playerL01596_1
  30757  887e		       86 8c		      STX	player1pointerlo
  30758  8880		       a9 fe		      LDA	#>playerL01596_1
  30759  8882		       85 8d		      STA	player1pointerhi
  30760  8884		       a9 17		      LDA	#23
  30761  8886		       85 8f		      STA	player1height
  30762  8888				   .L01597		;  return thisbank
  30763  8888
  30764  8888		       60		      RTS
  30765  8889				   .
  30766  8889							; 
  30767  8889
  30768  8889				   .__PB
  30769  8889							; __PB
  30770  8889
  30771  8889				   .L01598		;  player1:
  30772  8889
  30773  8889		       a2 e0		      LDX	#<playerL01598_1
  30774  888b		       86 8c		      STX	player1pointerlo
  30775  888d		       a9 fe		      LDA	#>playerL01598_1
  30776  888f		       85 8d		      STA	player1pointerhi
  30777  8891		       a9 17		      LDA	#23
  30778  8893		       85 8f		      STA	player1height
  30779  8895				   .L01599		;  return thisbank
  30780  8895		       60		      RTS
  30781  8896				  -	      if	(<*) > (<(*+12))
  30782  8896				  -	      repeat	($100-<*)
  30783  8896				  -	      .byte	0
  30784  8896				  -	      repend
  30785  8896					      endif
  30786  8896				   playercolorL0318_0
  30787  8896		       44		      .byte.b	$44
  30788  8897		       44		      .byte.b	$44
  30789  8898		       3e		      .byte.b	$3E
  30790  8899		       44		      .byte.b	$44
  30791  889a		       44		      .byte.b	$44
  30792  889b		       44		      .byte.b	$44
  30793  889c		       3e		      .byte.b	$3E
  30794  889d		       3e		      .byte.b	$3E
  30795  889e		       3e		      .byte.b	$3E
  30796  889f		       3e		      .byte.b	$3E
  30797  88a0		       3e		      .byte.b	$3E
  30798  88a1		       44		      .byte.b	$44
  30799  88a2		       44		      .byte.b	$44
  30800  88a3				  -	      if	(<*) > (<(*+14))
  30801  88a3				  -	      repeat	($100-<*)
  30802  88a3				  -	      .byte	0
  30803  88a3				  -	      repend
  30804  88a3					      endif
  30805  88a3				   playercolorL0320_0
  30806  88a3		       44		      .byte.b	$44
  30807  88a4		       44		      .byte.b	$44
  30808  88a5		       44		      .byte.b	$44
  30809  88a6		       3e		      .byte.b	$3E
  30810  88a7		       44		      .byte.b	$44
  30811  88a8		       44		      .byte.b	$44
  30812  88a9		       3e		      .byte.b	$3E
  30813  88aa		       3e		      .byte.b	$3E
  30814  88ab		       3e		      .byte.b	$3E
  30815  88ac		       3e		      .byte.b	$3E
  30816  88ad		       3e		      .byte.b	$3E
  30817  88ae		       44		      .byte.b	$44
  30818  88af		       44		      .byte.b	$44
  30819  88b0		       3e		      .byte.b	$3E
  30820  88b1		       3e		      .byte.b	$3E
  30821  88b2				  -	      if	(<*) > (<(*+12))
  30822  88b2				  -	      repeat	($100-<*)
  30823  88b2				  -	      .byte	0
  30824  88b2				  -	      repend
  30825  88b2					      endif
  30826  88b2				   playerL0322_0
  30827  88b2		       7c		      .byte.b	%01111100
  30828  88b3		       78		      .byte.b	%01111000
  30829  88b4		       64		      .byte.b	%01100100
  30830  88b5		       f0		      .byte.b	%11110000
  30831  88b6		       f6		      .byte.b	%11110110
  30832  88b7		       6c		      .byte.b	%01101100
  30833  88b8		       3e		      .byte.b	%00111110
  30834  88b9		       70		      .byte.b	%01110000
  30835  88ba		       db		      .byte.b	%11011011
  30836  88bb		       97		      .byte.b	%10010111
  30837  88bc		       34		      .byte.b	%00110100
  30838  88bd		       ff		      .byte.b	%11111111
  30839  88be		       7c		      .byte.b	%01111100
  30840  88bf				  -	      if	(<*) > (<(*+12))
  30841  88bf				  -	      repeat	($100-<*)
  30842  88bf				  -	      .byte	0
  30843  88bf				  -	      repend
  30844  88bf					      endif
  30845  88bf				   playerL0324_0
  30846  88bf		       e6		      .byte.b	%11100110
  30847  88c0		       c3		      .byte.b	%11000011
  30848  88c1		       ca		      .byte.b	%11001010
  30849  88c2		       e0		      .byte.b	%11100000
  30850  88c3		       f6		      .byte.b	%11110110
  30851  88c4		       6c		      .byte.b	%01101100
  30852  88c5		       3e		      .byte.b	%00111110
  30853  88c6		       70		      .byte.b	%01110000
  30854  88c7		       db		      .byte.b	%11011011
  30855  88c8		       97		      .byte.b	%10010111
  30856  88c9		       34		      .byte.b	%00110100
  30857  88ca		       ff		      .byte.b	%11111111
  30858  88cb		       7c		      .byte.b	%01111100
  30859  88cc				  -	      if	(<*) > (<(*+14))
  30860  88cc				  -	      repeat	($100-<*)
  30861  88cc				  -	      .byte	0
  30862  88cc				  -	      repend
  30863  88cc					      endif
  30864  88cc				   playerL0326_0
  30865  88cc		       86		      .byte.b	%10000110
  30866  88cd		       c3		      .byte.b	%11000011
  30867  88ce		       c3		      .byte.b	%11000011
  30868  88cf		       ca		      .byte.b	%11001010
  30869  88d0		       e5		      .byte.b	%11100101
  30870  88d1		       6a		      .byte.b	%01101010
  30871  88d2		       3e		      .byte.b	%00111110
  30872  88d3		       70		      .byte.b	%01110000
  30873  88d4		       db		      .byte.b	%11011011
  30874  88d5		       97		      .byte.b	%10010111
  30875  88d6		       34		      .byte.b	%00110100
  30876  88d7		       ff		      .byte.b	%11111111
  30877  88d8		       7c		      .byte.b	%01111100
  30878  88d9		       03		      .byte.b	%00000011
  30879  88da		       07		      .byte.b	%00000111
  30880  88db				  -	      if	(<*) > (<(*+23))
  30881  88db				  -	      repeat	($100-<*)
  30882  88db				  -	      .byte	0
  30883  88db				  -	      repend
  30884  88db					      endif
  30885  88db				   playercolorL0328_0
  30886  88db		       44		      .byte.b	$44
  30887  88dc		       44		      .byte.b	$44
  30888  88dd		       44		      .byte.b	$44
  30889  88de		       44		      .byte.b	$44
  30890  88df		       3e		      .byte.b	$3E
  30891  88e0		       3e		      .byte.b	$3E
  30892  88e1		       44		      .byte.b	$44
  30893  88e2		       44		      .byte.b	$44
  30894  88e3		       44		      .byte.b	$44
  30895  88e4		       44		      .byte.b	$44
  30896  88e5		       44		      .byte.b	$44
  30897  88e6		       44		      .byte.b	$44
  30898  88e7		       3e		      .byte.b	$3E
  30899  88e8		       3e		      .byte.b	$3E
  30900  88e9		       3e		      .byte.b	$3E
  30901  88ea		       3e		      .byte.b	$3E
  30902  88eb		       3e		      .byte.b	$3E
  30903  88ec		       3e		      .byte.b	$3E
  30904  88ed		       3e		      .byte.b	$3E
  30905  88ee		       3e		      .byte.b	$3E
  30906  88ef		       44		      .byte.b	$44
  30907  88f0		       44		      .byte.b	$44
  30908  88f1		       44		      .byte.b	$44
  30909  88f2		       44		      .byte.b	$44
  30910  88f3					      if	(<*) > (<(*+23))
  30911  88f3					      repeat	($100-<*)
  30912  88f3		       00		      .byte.b	0
  30911  88f3					      repend
  30912  88f4		       00		      .byte.b	0
  30911  88f4					      repend
  30912  88f5		       00		      .byte.b	0
  30911  88f5					      repend
  30912  88f6		       00		      .byte.b	0
  30911  88f6					      repend
  30912  88f7		       00		      .byte.b	0
  30911  88f7					      repend
  30912  88f8		       00		      .byte.b	0
  30911  88f8					      repend
  30912  88f9		       00		      .byte.b	0
  30911  88f9					      repend
  30912  88fa		       00		      .byte.b	0
  30911  88fa					      repend
  30912  88fb		       00		      .byte.b	0
  30911  88fb					      repend
  30912  88fc		       00		      .byte.b	0
  30911  88fc					      repend
  30912  88fd		       00		      .byte.b	0
  30911  88fd					      repend
  30912  88fe		       00		      .byte.b	0
  30911  88fe					      repend
  30912  88ff		       00		      .byte.b	0
  30913  8900					      repend
  30914  8900					      endif
  30915  8900				   playerL0330_0
  30916  8900		       7f		      .byte.b	%01111111
  30917  8901		       7e		      .byte.b	%01111110
  30918  8902		       38		      .byte.b	%00111000
  30919  8903		       00		      .byte.b	%00000000
  30920  8904		       c2		      .byte.b	%11000010
  30921  8905		       e2		      .byte.b	%11100010
  30922  8906		       f0		      .byte.b	%11110000
  30923  8907		       f7		      .byte.b	%11110111
  30924  8908		       f7		      .byte.b	%11110111
  30925  8909		       e7		      .byte.b	%11100111
  30926  890a		       ee		      .byte.b	%11101110
  30927  890b		       60		      .byte.b	%01100000
  30928  890c		       3e		      .byte.b	%00111110
  30929  890d		       78		      .byte.b	%01111000
  30930  890e		       e3		      .byte.b	%11100011
  30931  890f		       b7		      .byte.b	%10110111
  30932  8910		       3f		      .byte.b	%00111111
  30933  8911		       34		      .byte.b	%00110100
  30934  8912		       74		      .byte.b	%01110100
  30935  8913		       3c		      .byte.b	%00111100
  30936  8914		       c0		      .byte.b	%11000000
  30937  8915		       ff		      .byte.b	%11111111
  30938  8916		       7c		      .byte.b	%01111100
  30939  8917		       3c		      .byte.b	%00111100
  30940  8918				  -	      if	(<*) > (<(*+23))
  30941  8918				  -	      repeat	($100-<*)
  30942  8918				  -	      .byte	0
  30943  8918				  -	      repend
  30944  8918					      endif
  30945  8918				   playercolorL0332_0
  30946  8918		       3a		      .byte.b	$3A
  30947  8919		       38		      .byte.b	$38
  30948  891a		       36		      .byte.b	$36
  30949  891b		       16		      .byte.b	$16
  30950  891c		       3e		      .byte.b	$3E
  30951  891d		       3e		      .byte.b	$3E
  30952  891e		       16		      .byte.b	$16
  30953  891f		       1e		      .byte.b	$1E
  30954  8920		       1c		      .byte.b	$1C
  30955  8921		       1a		      .byte.b	$1A
  30956  8922		       18		      .byte.b	$18
  30957  8923		       16		      .byte.b	$16
  30958  8924		       3e		      .byte.b	$3E
  30959  8925		       3e		      .byte.b	$3E
  30960  8926		       3e		      .byte.b	$3E
  30961  8927		       3e		      .byte.b	$3E
  30962  8928		       3e		      .byte.b	$3E
  30963  8929		       3e		      .byte.b	$3E
  30964  892a		       3e		      .byte.b	$3E
  30965  892b		       3e		      .byte.b	$3E
  30966  892c		       36		      .byte.b	$36
  30967  892d		       38		      .byte.b	$38
  30968  892e		       3a		      .byte.b	$3A
  30969  892f		       3c		      .byte.b	$3C
  30970  8930				  -	      if	(<*) > (<(*+25))
  30971  8930				  -	      repeat	($100-<*)
  30972  8930				  -	      .byte	0
  30973  8930				  -	      repend
  30974  8930					      endif
  30975  8930				   playercolorL0334_0
  30976  8930		       3a		      .byte.b	$3A
  30977  8931		       38		      .byte.b	$38
  30978  8932		       36		      .byte.b	$36
  30979  8933		       16		      .byte.b	$16
  30980  8934		       3e		      .byte.b	$3E
  30981  8935		       3e		      .byte.b	$3E
  30982  8936		       1e		      .byte.b	$1E
  30983  8937		       1e		      .byte.b	$1E
  30984  8938		       1c		      .byte.b	$1C
  30985  8939		       1a		      .byte.b	$1A
  30986  893a		       18		      .byte.b	$18
  30987  893b		       16		      .byte.b	$16
  30988  893c		       3e		      .byte.b	$3E
  30989  893d		       3e		      .byte.b	$3E
  30990  893e		       3e		      .byte.b	$3E
  30991  893f		       3e		      .byte.b	$3E
  30992  8940		       3e		      .byte.b	$3E
  30993  8941		       3e		      .byte.b	$3E
  30994  8942		       3e		      .byte.b	$3E
  30995  8943		       3e		      .byte.b	$3E
  30996  8944		       36		      .byte.b	$36
  30997  8945		       38		      .byte.b	$38
  30998  8946		       3a		      .byte.b	$3A
  30999  8947		       3c		      .byte.b	$3C
  31000  8948		       3e		      .byte.b	$3E
  31001  8949		       3e		      .byte.b	$3E
  31002  894a				  -	      if	(<*) > (<(*+23))
  31003  894a				  -	      repeat	($100-<*)
  31004  894a				  -	      .byte	0
  31005  894a				  -	      repend
  31006  894a					      endif
  31007  894a				   playerL0336_0
  31008  894a		       66		      .byte.b	%01100110
  31009  894b		       c7		      .byte.b	%11000111
  31010  894c		       c3		      .byte.b	%11000011
  31011  894d		       00		      .byte.b	%00000000
  31012  894e		       1a		      .byte.b	%00011010
  31013  894f		       1a		      .byte.b	%00011010
  31014  8950		       38		      .byte.b	%00111000
  31015  8951		       77		      .byte.b	%01110111
  31016  8952		       f7		      .byte.b	%11110111
  31017  8953		       ef		      .byte.b	%11101111
  31018  8954		       ee		      .byte.b	%11101110
  31019  8955		       40		      .byte.b	%01000000
  31020  8956		       3e		      .byte.b	%00111110
  31021  8957		       78		      .byte.b	%01111000
  31022  8958		       e3		      .byte.b	%11100011
  31023  8959		       b7		      .byte.b	%10110111
  31024  895a		       3f		      .byte.b	%00111111
  31025  895b		       34		      .byte.b	%00110100
  31026  895c		       74		      .byte.b	%01110100
  31027  895d		       3c		      .byte.b	%00111100
  31028  895e		       c0		      .byte.b	%11000000
  31029  895f		       ff		      .byte.b	%11111111
  31030  8960		       7c		      .byte.b	%01111100
  31031  8961		       3c		      .byte.b	%00111100
  31032  8962				  -	      if	(<*) > (<(*+25))
  31033  8962				  -	      repeat	($100-<*)
  31034  8962				  -	      .byte	0
  31035  8962				  -	      repend
  31036  8962					      endif
  31037  8962				   playercolorL0338_0
  31038  8962		       44		      .byte.b	$44
  31039  8963		       44		      .byte.b	$44
  31040  8964		       44		      .byte.b	$44
  31041  8965		       44		      .byte.b	$44
  31042  8966		       3e		      .byte.b	$3E
  31043  8967		       3e		      .byte.b	$3E
  31044  8968		       44		      .byte.b	$44
  31045  8969		       44		      .byte.b	$44
  31046  896a		       44		      .byte.b	$44
  31047  896b		       44		      .byte.b	$44
  31048  896c		       44		      .byte.b	$44
  31049  896d		       44		      .byte.b	$44
  31050  896e		       3e		      .byte.b	$3E
  31051  896f		       3e		      .byte.b	$3E
  31052  8970		       3e		      .byte.b	$3E
  31053  8971		       3e		      .byte.b	$3E
  31054  8972		       3e		      .byte.b	$3E
  31055  8973		       3e		      .byte.b	$3E
  31056  8974		       3e		      .byte.b	$3E
  31057  8975		       3e		      .byte.b	$3E
  31058  8976		       44		      .byte.b	$44
  31059  8977		       44		      .byte.b	$44
  31060  8978		       44		      .byte.b	$44
  31061  8979		       44		      .byte.b	$44
  31062  897a		       3e		      .byte.b	$3E
  31063  897b		       3e		      .byte.b	$3E
  31064  897c				  -	      if	(<*) > (<(*+25))
  31065  897c				  -	      repeat	($100-<*)
  31066  897c				  -	      .byte	0
  31067  897c				  -	      repend
  31068  897c					      endif
  31069  897c				   playerL0340_0
  31070  897c		       c6		      .byte.b	%11000110
  31071  897d		       c7		      .byte.b	%11000111
  31072  897e		       47		      .byte.b	%01000111
  31073  897f		       63		      .byte.b	%01100011
  31074  8980		       c9		      .byte.b	%11001001
  31075  8981		       e9		      .byte.b	%11101001
  31076  8982		       e0		      .byte.b	%11100000
  31077  8983		       f6		      .byte.b	%11110110
  31078  8984		       f6		      .byte.b	%11110110
  31079  8985		       e5		      .byte.b	%11100101
  31080  8986		       ed		      .byte.b	%11101101
  31081  8987		       60		      .byte.b	%01100000
  31082  8988		       3e		      .byte.b	%00111110
  31083  8989		       70		      .byte.b	%01110000
  31084  898a		       c3		      .byte.b	%11000011
  31085  898b		       6f		      .byte.b	%01101111
  31086  898c		       3f		      .byte.b	%00111111
  31087  898d		       6a		      .byte.b	%01101010
  31088  898e		       6a		      .byte.b	%01101010
  31089  898f		       3c		      .byte.b	%00111100
  31090  8990		       c1		      .byte.b	%11000001
  31091  8991		       ff		      .byte.b	%11111111
  31092  8992		       7d		      .byte.b	%01111101
  31093  8993		       3d		      .byte.b	%00111101
  31094  8994		       03		      .byte.b	%00000011
  31095  8995		       07		      .byte.b	%00000111
  31096  8996				  -	      if	(<*) > (<(*+12))
  31097  8996				  -	      repeat	($100-<*)
  31098  8996				  -	      .byte	0
  31099  8996				  -	      repend
  31100  8996					      endif
  31101  8996				   playercolorL0342_0
  31102  8996		       44		      .byte.b	$44
  31103  8997		       44		      .byte.b	$44
  31104  8998		       44		      .byte.b	$44
  31105  8999		       44		      .byte.b	$44
  31106  899a		       44		      .byte.b	$44
  31107  899b		       44		      .byte.b	$44
  31108  899c		       44		      .byte.b	$44
  31109  899d		       3e		      .byte.b	$3E
  31110  899e		       3e		      .byte.b	$3E
  31111  899f		       44		      .byte.b	$44
  31112  89a0		       44		      .byte.b	$44
  31113  89a1		       44		      .byte.b	$44
  31114  89a2		       44		      .byte.b	$44
  31115  89a3				  -	      if	(<*) > (<(*+12))
  31116  89a3				  -	      repeat	($100-<*)
  31117  89a3				  -	      .byte	0
  31118  89a3				  -	      repend
  31119  89a3					      endif
  31120  89a3				   playercolorL0344_0
  31121  89a3		       3a		      .byte.b	$3A
  31122  89a4		       38		      .byte.b	$38
  31123  89a5		       1c		      .byte.b	$1C
  31124  89a6		       1a		      .byte.b	$1A
  31125  89a7		       1a		      .byte.b	$1A
  31126  89a8		       18		      .byte.b	$18
  31127  89a9		       16		      .byte.b	$16
  31128  89aa		       3e		      .byte.b	$3E
  31129  89ab		       3e		      .byte.b	$3E
  31130  89ac		       36		      .byte.b	$36
  31131  89ad		       38		      .byte.b	$38
  31132  89ae		       3a		      .byte.b	$3A
  31133  89af		       3c		      .byte.b	$3C
  31134  89b0				  -	      if	(<*) > (<(*+12))
  31135  89b0				  -	      repeat	($100-<*)
  31136  89b0				  -	      .byte	0
  31137  89b0				  -	      repend
  31138  89b0					      endif
  31139  89b0				   playerL0346_0
  31140  89b0		       3c		      .byte.b	%00111100
  31141  89b1		       78		      .byte.b	%01111000
  31142  89b2		       06		      .byte.b	%00000110
  31143  89b3		       76		      .byte.b	%01110110
  31144  89b4		       f0		      .byte.b	%11110000
  31145  89b5		       fc		      .byte.b	%11111100
  31146  89b6		       6c		      .byte.b	%01101100
  31147  89b7		       6d		      .byte.b	%01101101
  31148  89b8		       2c		      .byte.b	%00101100
  31149  89b9		       fb		      .byte.b	%11111011
  31150  89ba		       76		      .byte.b	%01110110
  31151  89bb		       36		      .byte.b	%00110110
  31152  89bc		       1c		      .byte.b	%00011100
  31153  89bd				  -	      if	(<*) > (<(*+0))
  31154  89bd				  -	      repeat	($100-<*)
  31155  89bd				  -	      .byte	0
  31156  89bd				  -	      repend
  31157  89bd					      endif
  31158  89bd				   playerL0348_0
  31159  89bd		       e7		      .byte.b	%11100111
  31160  89be				  -	      ifconst	pfres
  31161  89be				  -	      if	(<*) > (254-pfres*pfwidth)
  31162  89be				  -	      align	256
  31163  89be				  -	      endif
  31164  89be				  -	      if	(<*) < (136-pfres*pfwidth)
  31165  89be				  -	      repeat	((136-pfres*pfwidth)-(<*))
  31166  89be				  -	      .byte	0
  31167  89be				  -	      repend
  31168  89be				  -	      endif
  31169  89be					      else
  31170  89be				  -	      if	(<*) > 206
  31171  89be				  -	      align	256
  31172  89be					      endif
  31173  89be				  -	      if	(<*) < 88
  31174  89be				  -	      repeat	(88-(<*))
  31175  89be				  -	      .byte	0
  31176  89be				  -	      repend
  31177  89be					      endif
  31178  89be					      endif
  31179  89be				   pfcolorlabel360
  31180  89be		       0c 00 18 34	      .byte.b	$0C, $00, $18, $34
  31181  89c2		       08 00 32 da	      .byte.b	$08, $00, $32, $DA
  31182  89c6		       0a 00 32 da	      .byte.b	$0A, $00, $32, $DA
  31183  89ca		       0a 00 32 da	      .byte.b	$0A, $00, $32, $DA
  31184  89ce		       0c 00 32 d8	      .byte.b	$0C, $00, $32, $D8
  31185  89d2		       08 00 18 d8	      .byte.b	$08, $00, $18, $D8
  31186  89d6		       0a 00 32 d8	      .byte.b	$0A, $00, $32, $D8
  31187  89da		       0a 00 c6 d8	      .byte.b	$0A, $00, $C6, $D8
  31188  89de		       0a 00 c6 c6	      .byte.b	$0A, $00, $C6, $C6
  31189  89e2		       d4 00 24 c6	      .byte.b	$D4, $00, $24, $C6
  31190  89e6				  -	      if	(<*) > (<(*+10))
  31191  89e6				  -	      repeat	($100-<*)
  31192  89e6				  -	      .byte	0
  31193  89e6				  -	      repend
  31194  89e6					      endif
  31195  89e6				   playercolorL0578_1
  31196  89e6		       06		      .byte.b	$06
  31197  89e7		       06		      .byte.b	$06
  31198  89e8		       2e		      .byte.b	$2E
  31199  89e9		       2e		      .byte.b	$2E
  31200  89ea		       36		      .byte.b	$36
  31201  89eb		       36		      .byte.b	$36
  31202  89ec		       36		      .byte.b	$36
  31203  89ed		       36		      .byte.b	$36
  31204  89ee		       36		      .byte.b	$36
  31205  89ef		       36		      .byte.b	$36
  31206  89f0		       36		      .byte.b	$36
  31207  89f1				  -	      if	(<*) > (<(*+10))
  31208  89f1				  -	      repeat	($100-<*)
  31209  89f1				  -	      .byte	0
  31210  89f1				  -	      repend
  31211  89f1					      endif
  31212  89f1				   playerL0580_1
  31213  89f1		       e6		      .byte.b	%11100110
  31214  89f2		       43		      .byte.b	%01000011
  31215  89f3		       3c		      .byte.b	%00111100
  31216  89f4		       3c		      .byte.b	%00111100
  31217  89f5		       7e		      .byte.b	%01111110
  31218  89f6		       ff		      .byte.b	%11111111
  31219  89f7		       db		      .byte.b	%11011011
  31220  89f8		       c3		      .byte.b	%11000011
  31221  89f9		       bd		      .byte.b	%10111101
  31222  89fa		       7e		      .byte.b	%01111110
  31223  89fb		       3c		      .byte.b	%00111100
  31224  89fc					      if	(<*) > (<(*+10))
  31225  89fc					      repeat	($100-<*)
  31226  89fc		       00		      .byte.b	0
  31225  89fc					      repend
  31226  89fd		       00		      .byte.b	0
  31225  89fd					      repend
  31226  89fe		       00		      .byte.b	0
  31225  89fe					      repend
  31226  89ff		       00		      .byte.b	0
  31227  8a00					      repend
  31228  8a00					      endif
  31229  8a00				   playerL0582_1
  31230  8a00		       67		      .byte.b	%01100111
  31231  8a01		       c2		      .byte.b	%11000010
  31232  8a02		       3c		      .byte.b	%00111100
  31233  8a03		       3c		      .byte.b	%00111100
  31234  8a04		       7e		      .byte.b	%01111110
  31235  8a05		       ff		      .byte.b	%11111111
  31236  8a06		       db		      .byte.b	%11011011
  31237  8a07		       c3		      .byte.b	%11000011
  31238  8a08		       bd		      .byte.b	%10111101
  31239  8a09		       7e		      .byte.b	%01111110
  31240  8a0a		       3c		      .byte.b	%00111100
  31241  8a0b				  -	      if	(<*) > (<(*+9))
  31242  8a0b				  -	      repeat	($100-<*)
  31243  8a0b				  -	      .byte	0
  31244  8a0b				  -	      repend
  31245  8a0b					      endif
  31246  8a0b				   playercolorL0584_1
  31247  8a0b		       2e		      .byte.b	$2E
  31248  8a0c		       2e		      .byte.b	$2E
  31249  8a0d		       36		      .byte.b	$36
  31250  8a0e		       28		      .byte.b	$28
  31251  8a0f		       2a		      .byte.b	$2A
  31252  8a10		       2a		      .byte.b	$2A
  31253  8a11		       36		      .byte.b	$36
  31254  8a12		       36		      .byte.b	$36
  31255  8a13		       36		      .byte.b	$36
  31256  8a14		       38		      .byte.b	$38
  31257  8a15				  -	      if	(<*) > (<(*+9))
  31258  8a15				  -	      repeat	($100-<*)
  31259  8a15				  -	      .byte	0
  31260  8a15				  -	      repend
  31261  8a15					      endif
  31262  8a15				   playerL0586_1
  31263  8a15		       63		      .byte.b	%01100011
  31264  8a16		       36		      .byte.b	%00110110
  31265  8a17		       3f		      .byte.b	%00111111
  31266  8a18		       f5		      .byte.b	%11110101
  31267  8a19		       d5		      .byte.b	%11010101
  31268  8a1a		       75		      .byte.b	%01110101
  31269  8a1b		       89		      .byte.b	%10001001
  31270  8a1c		       71		      .byte.b	%01110001
  31271  8a1d		       22		      .byte.b	%00100010
  31272  8a1e		       1c		      .byte.b	%00011100
  31273  8a1f				  -	      if	(<*) > (<(*+9))
  31274  8a1f				  -	      repeat	($100-<*)
  31275  8a1f				  -	      .byte	0
  31276  8a1f				  -	      repend
  31277  8a1f					      endif
  31278  8a1f				   playerL0588_1
  31279  8a1f		       36		      .byte.b	%00110110
  31280  8a20		       36		      .byte.b	%00110110
  31281  8a21		       3f		      .byte.b	%00111111
  31282  8a22		       f5		      .byte.b	%11110101
  31283  8a23		       d5		      .byte.b	%11010101
  31284  8a24		       75		      .byte.b	%01110101
  31285  8a25		       89		      .byte.b	%10001001
  31286  8a26		       71		      .byte.b	%01110001
  31287  8a27		       22		      .byte.b	%00100010
  31288  8a28		       1c		      .byte.b	%00011100
  31289  8a29				  -	      if	(<*) > (<(*+7))
  31290  8a29				  -	      repeat	($100-<*)
  31291  8a29				  -	      .byte	0
  31292  8a29				  -	      repend
  31293  8a29					      endif
  31294  8a29				   playercolorL0590_1
  31295  8a29		       0a		      .byte.b	$0A
  31296  8a2a		       08		      .byte.b	$08
  31297  8a2b		       0a		      .byte.b	$0A
  31298  8a2c		       0c		      .byte.b	$0C
  31299  8a2d		       0e		      .byte.b	$0E
  31300  8a2e		       0e		      .byte.b	$0E
  31301  8a2f		       0c		      .byte.b	$0C
  31302  8a30		       0a		      .byte.b	$0A
  31303  8a31				  -	      if	(<*) > (<(*+7))
  31304  8a31				  -	      repeat	($100-<*)
  31305  8a31				  -	      .byte	0
  31306  8a31				  -	      repend
  31307  8a31					      endif
  31308  8a31				   playerL0591_1
  31309  8a31		       3d		      .byte.b	%00111101
  31310  8a32		       7d		      .byte.b	%01111101
  31311  8a33		       7d		      .byte.b	%01111101
  31312  8a34		       fd		      .byte.b	%11111101
  31313  8a35		       dd		      .byte.b	%11011101
  31314  8a36		       5d		      .byte.b	%01011101
  31315  8a37		       6d		      .byte.b	%01101101
  31316  8a38		       3d		      .byte.b	%00111101
  31317  8a39				  -	      if	(<*) > (<(*+7))
  31318  8a39				  -	      repeat	($100-<*)
  31319  8a39				  -	      .byte	0
  31320  8a39				  -	      repend
  31321  8a39					      endif
  31322  8a39				   playercolorL0593_1
  31323  8a39		       44		      .byte.b	$44
  31324  8a3a		       46		      .byte.b	$46
  31325  8a3b		       38		      .byte.b	$38
  31326  8a3c		       3a		      .byte.b	$3A
  31327  8a3d		       3a		      .byte.b	$3A
  31328  8a3e		       38		      .byte.b	$38
  31329  8a3f		       46		      .byte.b	$46
  31330  8a40		       44		      .byte.b	$44
  31331  8a41				  -	      if	(<*) > (<(*+7))
  31332  8a41				  -	      repeat	($100-<*)
  31333  8a41				  -	      .byte	0
  31334  8a41				  -	      repend
  31335  8a41					      endif
  31336  8a41				   playerL0595_1
  31337  8a41		       3a		      .byte.b	%00111010
  31338  8a42		       74		      .byte.b	%01110100
  31339  8a43		       f1		      .byte.b	%11110001
  31340  8a44		       fc		      .byte.b	%11111100
  31341  8a45		       de		      .byte.b	%11011110
  31342  8a46		       ee		      .byte.b	%11101110
  31343  8a47		       7e		      .byte.b	%01111110
  31344  8a48		       3c		      .byte.b	%00111100
  31345  8a49				  -	      if	(<*) > (<(*+7))
  31346  8a49				  -	      repeat	($100-<*)
  31347  8a49				  -	      .byte	0
  31348  8a49				  -	      repend
  31349  8a49					      endif
  31350  8a49				   playerL0597_1
  31351  8a49		       3c		      .byte.b	%00111100
  31352  8a4a		       7e		      .byte.b	%01111110
  31353  8a4b		       77		      .byte.b	%01110111
  31354  8a4c		       7b		      .byte.b	%01111011
  31355  8a4d		       3f		      .byte.b	%00111111
  31356  8a4e		       8f		      .byte.b	%10001111
  31357  8a4f		       2e		      .byte.b	%00101110
  31358  8a50		       5c		      .byte.b	%01011100
  31359  8a51				  -	      if	(<*) > (<(*+12))
  31360  8a51				  -	      repeat	($100-<*)
  31361  8a51				  -	      .byte	0
  31362  8a51				  -	      repend
  31363  8a51					      endif
  31364  8a51				   playercolorL0599_1
  31365  8a51		       2e		      .byte.b	$2E
  31366  8a52		       2e		      .byte.b	$2E
  31367  8a53		       c4		      .byte.b	$C4
  31368  8a54		       c6		      .byte.b	$C6
  31369  8a55		       c8		      .byte.b	$C8
  31370  8a56		       c8		      .byte.b	$C8
  31371  8a57		       c6		      .byte.b	$C6
  31372  8a58		       2e		      .byte.b	$2E
  31373  8a59		       2e		      .byte.b	$2E
  31374  8a5a		       2e		      .byte.b	$2E
  31375  8a5b		       2e		      .byte.b	$2E
  31376  8a5c		       2e		      .byte.b	$2E
  31377  8a5d		       2e		      .byte.b	$2E
  31378  8a5e				  -	      if	(<*) > (<(*+12))
  31379  8a5e				  -	      repeat	($100-<*)
  31380  8a5e				  -	      .byte	0
  31381  8a5e				  -	      repend
  31382  8a5e					      endif
  31383  8a5e				   playercolorL0601_1
  31384  8a5e		       2e		      .byte.b	$2E
  31385  8a5f		       2e		      .byte.b	$2E
  31386  8a60		       48		      .byte.b	$48
  31387  8a61		       4a		      .byte.b	$4A
  31388  8a62		       4a		      .byte.b	$4A
  31389  8a63		       48		      .byte.b	$48
  31390  8a64		       46		      .byte.b	$46
  31391  8a65		       2e		      .byte.b	$2E
  31392  8a66		       2e		      .byte.b	$2E
  31393  8a67		       2e		      .byte.b	$2E
  31394  8a68		       2e		      .byte.b	$2E
  31395  8a69		       2e		      .byte.b	$2E
  31396  8a6a		       2e		      .byte.b	$2E
  31397  8a6b				  -	      if	(<*) > (<(*+12))
  31398  8a6b				  -	      repeat	($100-<*)
  31399  8a6b				  -	      .byte	0
  31400  8a6b				  -	      repend
  31401  8a6b					      endif
  31402  8a6b				   playerL0603_1
  31403  8a6b		       77		      .byte.b	%01110111
  31404  8a6c		       22		      .byte.b	%00100010
  31405  8a6d		       3e		      .byte.b	%00111110
  31406  8a6e		       6b		      .byte.b	%01101011
  31407  8a6f		       55		      .byte.b	%01010101
  31408  8a70		       2a		      .byte.b	%00101010
  31409  8a71		       1c		      .byte.b	%00011100
  31410  8a72		       e2		      .byte.b	%11100010
  31411  8a73		       35		      .byte.b	%00110101
  31412  8a74		       d6		      .byte.b	%11010110
  31413  8a75		       b7		      .byte.b	%10110111
  31414  8a76		       a3		      .byte.b	%10100011
  31415  8a77		       61		      .byte.b	%01100001
  31416  8a78				  -	      if	(<*) > (<(*+12))
  31417  8a78				  -	      repeat	($100-<*)
  31418  8a78				  -	      .byte	0
  31419  8a78				  -	      repend
  31420  8a78					      endif
  31421  8a78				   playerL0605_1
  31422  8a78		       36		      .byte.b	%00110110
  31423  8a79		       36		      .byte.b	%00110110
  31424  8a7a		       3e		      .byte.b	%00111110
  31425  8a7b		       6b		      .byte.b	%01101011
  31426  8a7c		       55		      .byte.b	%01010101
  31427  8a7d		       2a		      .byte.b	%00101010
  31428  8a7e		       1c		      .byte.b	%00011100
  31429  8a7f		       e2		      .byte.b	%11100010
  31430  8a80		       37		      .byte.b	%00110111
  31431  8a81		       d3		      .byte.b	%11010011
  31432  8a82		       b0		      .byte.b	%10110000
  31433  8a83		       a0		      .byte.b	%10100000
  31434  8a84		       60		      .byte.b	%01100000
  31435  8a85				  -	      if	(<*) > (<(*+12))
  31436  8a85				  -	      repeat	($100-<*)
  31437  8a85				  -	      .byte	0
  31438  8a85				  -	      repend
  31439  8a85					      endif
  31440  8a85				   playerL0607_1
  31441  8a85		       77		      .byte.b	%01110111
  31442  8a86		       22		      .byte.b	%00100010
  31443  8a87		       3e		      .byte.b	%00111110
  31444  8a88		       6b		      .byte.b	%01101011
  31445  8a89		       55		      .byte.b	%01010101
  31446  8a8a		       2a		      .byte.b	%00101010
  31447  8a8b		       1c		      .byte.b	%00011100
  31448  8a8c		       e0		      .byte.b	%11100000
  31449  8a8d		       30		      .byte.b	%00110000
  31450  8a8e		       d0		      .byte.b	%11010000
  31451  8a8f		       b0		      .byte.b	%10110000
  31452  8a90		       a0		      .byte.b	%10100000
  31453  8a91		       60		      .byte.b	%01100000
  31454  8a92				  -	      if	(<*) > (<(*+12))
  31455  8a92				  -	      repeat	($100-<*)
  31456  8a92				  -	      .byte	0
  31457  8a92				  -	      repend
  31458  8a92					      endif
  31459  8a92				   playerL0609_1
  31460  8a92		       36		      .byte.b	%00110110
  31461  8a93		       36		      .byte.b	%00110110
  31462  8a94		       3e		      .byte.b	%00111110
  31463  8a95		       6b		      .byte.b	%01101011
  31464  8a96		       55		      .byte.b	%01010101
  31465  8a97		       2a		      .byte.b	%00101010
  31466  8a98		       1c		      .byte.b	%00011100
  31467  8a99		       e0		      .byte.b	%11100000
  31468  8a9a		       30		      .byte.b	%00110000
  31469  8a9b		       d0		      .byte.b	%11010000
  31470  8a9c		       b0		      .byte.b	%10110000
  31471  8a9d		       a0		      .byte.b	%10100000
  31472  8a9e		       60		      .byte.b	%01100000
  31473  8a9f				  -	      if	(<*) > (<(*+8))
  31474  8a9f				  -	      repeat	($100-<*)
  31475  8a9f				  -	      .byte	0
  31476  8a9f				  -	      repend
  31477  8a9f					      endif
  31478  8a9f				   playercolorL0611_1
  31479  8a9f		       1e		      .byte.b	$1E
  31480  8aa0		       48		      .byte.b	$48
  31481  8aa1		       48		      .byte.b	$48
  31482  8aa2		       46		      .byte.b	$46
  31483  8aa3		       44		      .byte.b	$44
  31484  8aa4		       44		      .byte.b	$44
  31485  8aa5		       46		      .byte.b	$46
  31486  8aa6		       48		      .byte.b	$48
  31487  8aa7		       1e		      .byte.b	$1E
  31488  8aa8				  -	      if	(<*) > (<(*+8))
  31489  8aa8				  -	      repeat	($100-<*)
  31490  8aa8				  -	      .byte	0
  31491  8aa8				  -	      repend
  31492  8aa8					      endif
  31493  8aa8				   playerL0613_1
  31494  8aa8		       54		      .byte.b	%01010100
  31495  8aa9		       3c		      .byte.b	%00111100
  31496  8aaa		       6e		      .byte.b	%01101110
  31497  8aab		       df		      .byte.b	%11011111
  31498  8aac		       ff		      .byte.b	%11111111
  31499  8aad		       fb		      .byte.b	%11111011
  31500  8aae		       76		      .byte.b	%01110110
  31501  8aaf		       3c		      .byte.b	%00111100
  31502  8ab0		       2a		      .byte.b	%00101010
  31503  8ab1				  -	      if	(<*) > (<(*+8))
  31504  8ab1				  -	      repeat	($100-<*)
  31505  8ab1				  -	      .byte	0
  31506  8ab1				  -	      repend
  31507  8ab1					      endif
  31508  8ab1				   playerL0615_1
  31509  8ab1		       2a		      .byte.b	%00101010
  31510  8ab2		       3c		      .byte.b	%00111100
  31511  8ab3		       76		      .byte.b	%01110110
  31512  8ab4		       fb		      .byte.b	%11111011
  31513  8ab5		       ff		      .byte.b	%11111111
  31514  8ab6		       df		      .byte.b	%11011111
  31515  8ab7		       6e		      .byte.b	%01101110
  31516  8ab8		       3c		      .byte.b	%00111100
  31517  8ab9		       54		      .byte.b	%01010100
  31518  8aba				  -	      if	(<*) > (<(*+7))
  31519  8aba				  -	      repeat	($100-<*)
  31520  8aba				  -	      .byte	0
  31521  8aba				  -	      repend
  31522  8aba					      endif
  31523  8aba				   playercolorL0617_1
  31524  8aba		       36		      .byte.b	$36
  31525  8abb		       26		      .byte.b	$26
  31526  8abc		       2a		      .byte.b	$2A
  31527  8abd		       2a		      .byte.b	$2A
  31528  8abe		       36		      .byte.b	$36
  31529  8abf		       36		      .byte.b	$36
  31530  8ac0		       36		      .byte.b	$36
  31531  8ac1		       38		      .byte.b	$38
  31532  8ac2				  -	      if	(<*) > (<(*+7))
  31533  8ac2				  -	      repeat	($100-<*)
  31534  8ac2				  -	      .byte	0
  31535  8ac2				  -	      repend
  31536  8ac2					      endif
  31537  8ac2				   playerL0619_1
  31538  8ac2		       3c		      .byte.b	%00111100
  31539  8ac3		       66		      .byte.b	%01100110
  31540  8ac4		       81		      .byte.b	%10000001
  31541  8ac5		       81		      .byte.b	%10000001
  31542  8ac6		       4a		      .byte.b	%01001010
  31543  8ac7		       42		      .byte.b	%01000010
  31544  8ac8		       24		      .byte.b	%00100100
  31545  8ac9		       18		      .byte.b	%00011000
  31546  8aca				  -	      if	(<*) > (<(*+7))
  31547  8aca				  -	      repeat	($100-<*)
  31548  8aca				  -	      .byte	0
  31549  8aca				  -	      repend
  31550  8aca					      endif
  31551  8aca				   playercolorL0621_1
  31552  8aca		       2e		      .byte.b	$2E
  31553  8acb		       2e		      .byte.b	$2E
  31554  8acc		       c8		      .byte.b	$C8
  31555  8acd		       ca		      .byte.b	$CA
  31556  8ace		       ca		      .byte.b	$CA
  31557  8acf		       c8		      .byte.b	$C8
  31558  8ad0		       c8		      .byte.b	$C8
  31559  8ad1		       c6		      .byte.b	$C6
  31560  8ad2				  -	      if	(<*) > (<(*+7))
  31561  8ad2				  -	      repeat	($100-<*)
  31562  8ad2				  -	      .byte	0
  31563  8ad2				  -	      repend
  31564  8ad2					      endif
  31565  8ad2				   playercolorL0623_1
  31566  8ad2		       2e		      .byte.b	$2E
  31567  8ad3		       2e		      .byte.b	$2E
  31568  8ad4		       48		      .byte.b	$48
  31569  8ad5		       4a		      .byte.b	$4A
  31570  8ad6		       4a		      .byte.b	$4A
  31571  8ad7		       48		      .byte.b	$48
  31572  8ad8		       48		      .byte.b	$48
  31573  8ad9		       46		      .byte.b	$46
  31574  8ada				  -	      if	(<*) > (<(*+7))
  31575  8ada				  -	      repeat	($100-<*)
  31576  8ada				  -	      .byte	0
  31577  8ada				  -	      repend
  31578  8ada					      endif
  31579  8ada				   playerL0625_1
  31580  8ada		       24		      .byte.b	%00100100
  31581  8adb		       5a		      .byte.b	%01011010
  31582  8adc		       bd		      .byte.b	%10111101
  31583  8add		       db		      .byte.b	%11011011
  31584  8ade		       66		      .byte.b	%01100110
  31585  8adf		       5a		      .byte.b	%01011010
  31586  8ae0		       3c		      .byte.b	%00111100
  31587  8ae1		       18		      .byte.b	%00011000
  31588  8ae2				  -	      if	(<*) > (<(*+8))
  31589  8ae2				  -	      repeat	($100-<*)
  31590  8ae2				  -	      .byte	0
  31591  8ae2				  -	      repend
  31592  8ae2					      endif
  31593  8ae2				   playercolorL0627_1
  31594  8ae2		       2e		      .byte.b	$2E
  31595  8ae3		       2e		      .byte.b	$2E
  31596  8ae4		       46		      .byte.b	$46
  31597  8ae5		       44		      .byte.b	$44
  31598  8ae6		       44		      .byte.b	$44
  31599  8ae7		       48		      .byte.b	$48
  31600  8ae8		       1a		      .byte.b	$1A
  31601  8ae9		       1c		      .byte.b	$1C
  31602  8aea		       1e		      .byte.b	$1E
  31603  8aeb				  -	      if	(<*) > (<(*+8))
  31604  8aeb				  -	      repeat	($100-<*)
  31605  8aeb				  -	      .byte	0
  31606  8aeb				  -	      repend
  31607  8aeb					      endif
  31608  8aeb				   playerL0629_1
  31609  8aeb		       77		      .byte.b	%01110111
  31610  8aec		       22		      .byte.b	%00100010
  31611  8aed		       7f		      .byte.b	%01111111
  31612  8aee		       b5		      .byte.b	%10110101
  31613  8aef		       eb		      .byte.b	%11101011
  31614  8af0		       36		      .byte.b	%00110110
  31615  8af1		       2a		      .byte.b	%00101010
  31616  8af2		       2a		      .byte.b	%00101010
  31617  8af3		       08		      .byte.b	%00001000
  31618  8af4				  -	      if	(<*) > (<(*+8))
  31619  8af4				  -	      repeat	($100-<*)
  31620  8af4				  -	      .byte	0
  31621  8af4				  -	      repend
  31622  8af4					      endif
  31623  8af4				   playerL0631_1
  31624  8af4		       36		      .byte.b	%00110110
  31625  8af5		       36		      .byte.b	%00110110
  31626  8af6		       7f		      .byte.b	%01111111
  31627  8af7		       b5		      .byte.b	%10110101
  31628  8af8		       eb		      .byte.b	%11101011
  31629  8af9		       36		      .byte.b	%00110110
  31630  8afa		       2a		      .byte.b	%00101010
  31631  8afb		       2a		      .byte.b	%00101010
  31632  8afc		       08		      .byte.b	%00001000
  31633  8afd					      if	(<*) > (<(*+31))
  31634  8afd					      repeat	($100-<*)
  31635  8afd		       00		      .byte.b	0
  31634  8afd					      repend
  31635  8afe		       00		      .byte.b	0
  31634  8afe					      repend
  31635  8aff		       00		      .byte.b	0
  31636  8b00					      repend
  31637  8b00					      endif
  31638  8b00				   playercolorL0633_1
  31639  8b00		       0a		      .byte.b	$0A
  31640  8b01		       08		      .byte.b	$08
  31641  8b02		       c4		      .byte.b	$C4
  31642  8b03		       c8		      .byte.b	$C8
  31643  8b04		       c8		      .byte.b	$C8
  31644  8b05		       c8		      .byte.b	$C8
  31645  8b06		       c8		      .byte.b	$C8
  31646  8b07		       c8		      .byte.b	$C8
  31647  8b08		       c8		      .byte.b	$C8
  31648  8b09		       c8		      .byte.b	$C8
  31649  8b0a		       c8		      .byte.b	$C8
  31650  8b0b		       c8		      .byte.b	$C8
  31651  8b0c		       c8		      .byte.b	$C8
  31652  8b0d		       c8		      .byte.b	$C8
  31653  8b0e		       c8		      .byte.b	$C8
  31654  8b0f		       c8		      .byte.b	$C8
  31655  8b10		       c8		      .byte.b	$C8
  31656  8b11		       c8		      .byte.b	$C8
  31657  8b12		       c8		      .byte.b	$C8
  31658  8b13		       c8		      .byte.b	$C8
  31659  8b14		       c8		      .byte.b	$C8
  31660  8b15		       c8		      .byte.b	$C8
  31661  8b16		       c8		      .byte.b	$C8
  31662  8b17		       c4		      .byte.b	$C4
  31663  8b18		       0a		      .byte.b	$0A
  31664  8b19		       0c		      .byte.b	$0C
  31665  8b1a		       0e		      .byte.b	$0E
  31666  8b1b		       0e		      .byte.b	$0E
  31667  8b1c		       0e		      .byte.b	$0E
  31668  8b1d		       0c		      .byte.b	$0C
  31669  8b1e		       0a		      .byte.b	$0A
  31670  8b1f		       ca		      .byte.b	$CA
  31671  8b20				  -	      if	(<*) > (<(*+31))
  31672  8b20				  -	      repeat	($100-<*)
  31673  8b20				  -	      .byte	0
  31674  8b20				  -	      repend
  31675  8b20					      endif
  31676  8b20				   playerL0634_1
  31677  8b20		       07		      .byte.b	%00000111
  31678  8b21		       03		      .byte.b	%00000011
  31679  8b22		       01		      .byte.b	%00000001
  31680  8b23		       01		      .byte.b	%00000001
  31681  8b24		       01		      .byte.b	%00000001
  31682  8b25		       01		      .byte.b	%00000001
  31683  8b26		       01		      .byte.b	%00000001
  31684  8b27		       01		      .byte.b	%00000001
  31685  8b28		       01		      .byte.b	%00000001
  31686  8b29		       01		      .byte.b	%00000001
  31687  8b2a		       01		      .byte.b	%00000001
  31688  8b2b		       01		      .byte.b	%00000001
  31689  8b2c		       01		      .byte.b	%00000001
  31690  8b2d		       01		      .byte.b	%00000001
  31691  8b2e		       01		      .byte.b	%00000001
  31692  8b2f		       01		      .byte.b	%00000001
  31693  8b30		       01		      .byte.b	%00000001
  31694  8b31		       01		      .byte.b	%00000001
  31695  8b32		       01		      .byte.b	%00000001
  31696  8b33		       01		      .byte.b	%00000001
  31697  8b34		       01		      .byte.b	%00000001
  31698  8b35		       01		      .byte.b	%00000001
  31699  8b36		       01		      .byte.b	%00000001
  31700  8b37		       01		      .byte.b	%00000001
  31701  8b38		       0e		      .byte.b	%00001110
  31702  8b39		       3e		      .byte.b	%00111110
  31703  8b3a		       ea		      .byte.b	%11101010
  31704  8b3b		       f6		      .byte.b	%11110110
  31705  8b3c		       f6		      .byte.b	%11110110
  31706  8b3d		       3e		      .byte.b	%00111110
  31707  8b3e		       0e		      .byte.b	%00001110
  31708  8b3f		       01		      .byte.b	%00000001
  31709  8b40				  -	      if	(<*) > (<(*+7))
  31710  8b40				  -	      repeat	($100-<*)
  31711  8b40				  -	      .byte	0
  31712  8b40				  -	      repend
  31713  8b40					      endif
  31714  8b40				   playercolorL0636_1
  31715  8b40		       2a		      .byte.b	$2A
  31716  8b41		       2a		      .byte.b	$2A
  31717  8b42		       d8		      .byte.b	$D8
  31718  8b43		       c6		      .byte.b	$C6
  31719  8b44		       0c		      .byte.b	$0C
  31720  8b45		       0c		      .byte.b	$0C
  31721  8b46		       c6		      .byte.b	$C6
  31722  8b47		       c8		      .byte.b	$C8
  31723  8b48				  -	      if	(<*) > (<(*+7))
  31724  8b48				  -	      repeat	($100-<*)
  31725  8b48				  -	      .byte	0
  31726  8b48				  -	      repend
  31727  8b48					      endif
  31728  8b48				   playerL0638_1
  31729  8b48		       34		      .byte.b	%00110100
  31730  8b49		       3c		      .byte.b	%00111100
  31731  8b4a		       ff		      .byte.b	%11111111
  31732  8b4b		       ff		      .byte.b	%11111111
  31733  8b4c		       cf		      .byte.b	%11001111
  31734  8b4d		       56		      .byte.b	%01010110
  31735  8b4e		       24		      .byte.b	%00100100
  31736  8b4f		       18		      .byte.b	%00011000
  31737  8b50				  -	      if	(<*) > (<(*+7))
  31738  8b50				  -	      repeat	($100-<*)
  31739  8b50				  -	      .byte	0
  31740  8b50				  -	      repend
  31741  8b50					      endif
  31742  8b50				   playercolorL0640_1
  31743  8b50		       08		      .byte.b	$08
  31744  8b51		       0a		      .byte.b	$0A
  31745  8b52		       0c		      .byte.b	$0C
  31746  8b53		       0c		      .byte.b	$0C
  31747  8b54		       0c		      .byte.b	$0C
  31748  8b55		       0c		      .byte.b	$0C
  31749  8b56		       0a		      .byte.b	$0A
  31750  8b57		       08		      .byte.b	$08
  31751  8b58				  -	      if	(<*) > (<(*+7))
  31752  8b58				  -	      repeat	($100-<*)
  31753  8b58				  -	      .byte	0
  31754  8b58				  -	      repend
  31755  8b58					      endif
  31756  8b58				   playerL0642_1
  31757  8b58		       18		      .byte.b	%00011000
  31758  8b59		       24		      .byte.b	%00100100
  31759  8b5a		       5a		      .byte.b	%01011010
  31760  8b5b		       5a		      .byte.b	%01011010
  31761  8b5c		       5a		      .byte.b	%01011010
  31762  8b5d		       5a		      .byte.b	%01011010
  31763  8b5e		       24		      .byte.b	%00100100
  31764  8b5f		       18		      .byte.b	%00011000
  31765  8b60				  -	      if	(<*) > (<(*+7))
  31766  8b60				  -	      repeat	($100-<*)
  31767  8b60				  -	      .byte	0
  31768  8b60				  -	      repend
  31769  8b60					      endif
  31770  8b60				   playerL0644_1
  31771  8b60		       18		      .byte.b	%00011000
  31772  8b61		       18		      .byte.b	%00011000
  31773  8b62		       18		      .byte.b	%00011000
  31774  8b63		       18		      .byte.b	%00011000
  31775  8b64		       18		      .byte.b	%00011000
  31776  8b65		       18		      .byte.b	%00011000
  31777  8b66		       18		      .byte.b	%00011000
  31778  8b67		       18		      .byte.b	%00011000
  31779  8b68				  -	      if	(<*) > (<(*+7))
  31780  8b68				  -	      repeat	($100-<*)
  31781  8b68				  -	      .byte	0
  31782  8b68				  -	      repend
  31783  8b68					      endif
  31784  8b68				   playercolorL0646_1
  31785  8b68		       1e		      .byte.b	$1E
  31786  8b69		       1e		      .byte.b	$1E
  31787  8b6a		       1e		      .byte.b	$1E
  31788  8b6b		       1e		      .byte.b	$1E
  31789  8b6c		       1e		      .byte.b	$1E
  31790  8b6d		       1e		      .byte.b	$1E
  31791  8b6e		       1e		      .byte.b	$1E
  31792  8b6f		       1e		      .byte.b	$1E
  31793  8b70				  -	      if	(<*) > (<(*+7))
  31794  8b70				  -	      repeat	($100-<*)
  31795  8b70				  -	      .byte	0
  31796  8b70				  -	      repend
  31797  8b70					      endif
  31798  8b70				   playercolorL0648_1
  31799  8b70		       1e		      .byte.b	$1E
  31800  8b71		       28		      .byte.b	$28
  31801  8b72		       28		      .byte.b	$28
  31802  8b73		       28		      .byte.b	$28
  31803  8b74		       28		      .byte.b	$28
  31804  8b75		       28		      .byte.b	$28
  31805  8b76		       28		      .byte.b	$28
  31806  8b77		       28		      .byte.b	$28
  31807  8b78				  -	      if	(<*) > (<(*+7))
  31808  8b78				  -	      repeat	($100-<*)
  31809  8b78				  -	      .byte	0
  31810  8b78				  -	      repend
  31811  8b78					      endif
  31812  8b78				   playerL0650_1
  31813  8b78		       00		      .byte.b	%00000000
  31814  8b79		       c6		      .byte.b	%11000110
  31815  8b7a		       6c		      .byte.b	%01101100
  31816  8b7b		       38		      .byte.b	%00111000
  31817  8b7c		       7c		      .byte.b	%01111100
  31818  8b7d		       d6		      .byte.b	%11010110
  31819  8b7e		       38		      .byte.b	%00111000
  31820  8b7f		       10		      .byte.b	%00010000
  31821  8b80				  -	      if	(<*) > (<(*+14))
  31822  8b80				  -	      repeat	($100-<*)
  31823  8b80				  -	      .byte	0
  31824  8b80				  -	      repend
  31825  8b80					      endif
  31826  8b80				   playercolorL0652_1
  31827  8b80		       2a		      .byte.b	$2A
  31828  8b81		       2a		      .byte.b	$2A
  31829  8b82		       2a		      .byte.b	$2A
  31830  8b83		       2a		      .byte.b	$2A
  31831  8b84		       2a		      .byte.b	$2A
  31832  8b85		       2e		      .byte.b	$2E
  31833  8b86		       2e		      .byte.b	$2E
  31834  8b87		       c8		      .byte.b	$C8
  31835  8b88		       c8		      .byte.b	$C8
  31836  8b89		       ca		      .byte.b	$CA
  31837  8b8a		       ca		      .byte.b	$CA
  31838  8b8b		       ca		      .byte.b	$CA
  31839  8b8c		       c8		      .byte.b	$C8
  31840  8b8d		       c8		      .byte.b	$C8
  31841  8b8e		       c6		      .byte.b	$C6
  31842  8b8f				  -	      if	(<*) > (<(*+14))
  31843  8b8f				  -	      repeat	($100-<*)
  31844  8b8f				  -	      .byte	0
  31845  8b8f				  -	      repend
  31846  8b8f					      endif
  31847  8b8f				   playerL0654_1
  31848  8b8f		       18		      .byte.b	%00011000
  31849  8b90		       3c		      .byte.b	%00111100
  31850  8b91		       5a		      .byte.b	%01011010
  31851  8b92		       bd		      .byte.b	%10111101
  31852  8b93		       db		      .byte.b	%11011011
  31853  8b94		       18		      .byte.b	%00011000
  31854  8b95		       18		      .byte.b	%00011000
  31855  8b96		       3c		      .byte.b	%00111100
  31856  8b97		       76		      .byte.b	%01110110
  31857  8b98		       df		      .byte.b	%11011111
  31858  8b99		       fd		      .byte.b	%11111101
  31859  8b9a		       a7		      .byte.b	%10100111
  31860  8b9b		       c3		      .byte.b	%11000011
  31861  8b9c		       c3		      .byte.b	%11000011
  31862  8b9d		       81		      .byte.b	%10000001
  31863  8b9e				  -	      if	(<*) > (<(*+14))
  31864  8b9e				  -	      repeat	($100-<*)
  31865  8b9e				  -	      .byte	0
  31866  8b9e				  -	      repend
  31867  8b9e					      endif
  31868  8b9e				   playerL0656_1
  31869  8b9e		       18		      .byte.b	%00011000
  31870  8b9f		       3c		      .byte.b	%00111100
  31871  8ba0		       5a		      .byte.b	%01011010
  31872  8ba1		       bd		      .byte.b	%10111101
  31873  8ba2		       db		      .byte.b	%11011011
  31874  8ba3		       18		      .byte.b	%00011000
  31875  8ba4		       18		      .byte.b	%00011000
  31876  8ba5		       3c		      .byte.b	%00111100
  31877  8ba6		       76		      .byte.b	%01110110
  31878  8ba7		       df		      .byte.b	%11011111
  31879  8ba8		       fd		      .byte.b	%11111101
  31880  8ba9		       a7		      .byte.b	%10100111
  31881  8baa		       e7		      .byte.b	%11100111
  31882  8bab		       66		      .byte.b	%01100110
  31883  8bac		       24		      .byte.b	%00100100
  31884  8bad				  -	      if	(<*) > (<(*+7))
  31885  8bad				  -	      repeat	($100-<*)
  31886  8bad				  -	      .byte	0
  31887  8bad				  -	      repend
  31888  8bad					      endif
  31889  8bad				   playercolorL0658_1
  31890  8bad		       44		      .byte.b	$44
  31891  8bae		       38		      .byte.b	$38
  31892  8baf		       38		      .byte.b	$38
  31893  8bb0		       3a		      .byte.b	$3A
  31894  8bb1		       3a		      .byte.b	$3A
  31895  8bb2		       38		      .byte.b	$38
  31896  8bb3		       44		      .byte.b	$44
  31897  8bb4		       3e		      .byte.b	$3E
  31898  8bb5				  -	      if	(<*) > (<(*+7))
  31899  8bb5				  -	      repeat	($100-<*)
  31900  8bb5				  -	      .byte	0
  31901  8bb5				  -	      repend
  31902  8bb5					      endif
  31903  8bb5				   playerL0660_1
  31904  8bb5		       ff		      .byte.b	%11111111
  31905  8bb6		       ff		      .byte.b	%11111111
  31906  8bb7		       bd		      .byte.b	%10111101
  31907  8bb8		       99		      .byte.b	%10011001
  31908  8bb9		       99		      .byte.b	%10011001
  31909  8bba		       bd		      .byte.b	%10111101
  31910  8bbb		       ff		      .byte.b	%11111111
  31911  8bbc		       ff		      .byte.b	%11111111
  31912  8bbd				  -	      if	(<*) > (<(*+7))
  31913  8bbd				  -	      repeat	($100-<*)
  31914  8bbd				  -	      .byte	0
  31915  8bbd				  -	      repend
  31916  8bbd					      endif
  31917  8bbd				   playercolorL0662_1
  31918  8bbd		       4a		      .byte.b	$4A
  31919  8bbe		       0a		      .byte.b	$0A
  31920  8bbf		       0c		      .byte.b	$0C
  31921  8bc0		       0e		      .byte.b	$0E
  31922  8bc1		       0e		      .byte.b	$0E
  31923  8bc2		       0c		      .byte.b	$0C
  31924  8bc3		       0a		      .byte.b	$0A
  31925  8bc4		       46		      .byte.b	$46
  31926  8bc5				  -	      if	(<*) > (<(*+7))
  31927  8bc5				  -	      repeat	($100-<*)
  31928  8bc5				  -	      .byte	0
  31929  8bc5				  -	      repend
  31930  8bc5					      endif
  31931  8bc5				   playerL0664_1
  31932  8bc5		       ff		      .byte.b	%11111111
  31933  8bc6		       3c		      .byte.b	%00111100
  31934  8bc7		       66		      .byte.b	%01100110
  31935  8bc8		       c3		      .byte.b	%11000011
  31936  8bc9		       c3		      .byte.b	%11000011
  31937  8bca		       66		      .byte.b	%01100110
  31938  8bcb		       3c		      .byte.b	%00111100
  31939  8bcc		       ff		      .byte.b	%11111111
  31940  8bcd				  -	      if	(<*) > (<(*+14))
  31941  8bcd				  -	      repeat	($100-<*)
  31942  8bcd				  -	      .byte	0
  31943  8bcd				  -	      repend
  31944  8bcd					      endif
  31945  8bcd				   playercolorL0981_0
  31946  8bcd		       44		      .byte.b	$44
  31947  8bce		       44		      .byte.b	$44
  31948  8bcf		       3e		      .byte.b	$3E
  31949  8bd0		       44		      .byte.b	$44
  31950  8bd1		       44		      .byte.b	$44
  31951  8bd2		       3e		      .byte.b	$3E
  31952  8bd3		       3e		      .byte.b	$3E
  31953  8bd4		       3e		      .byte.b	$3E
  31954  8bd5		       3e		      .byte.b	$3E
  31955  8bd6		       3e		      .byte.b	$3E
  31956  8bd7		       3e		      .byte.b	$3E
  31957  8bd8		       44		      .byte.b	$44
  31958  8bd9		       44		      .byte.b	$44
  31959  8bda		       3e		      .byte.b	$3E
  31960  8bdb		       3e		      .byte.b	$3E
  31961  8bdc				  -	      if	(<*) > (<(*+14))
  31962  8bdc				  -	      repeat	($100-<*)
  31963  8bdc				  -	      .byte	0
  31964  8bdc				  -	      repend
  31965  8bdc					      endif
  31966  8bdc				   playerL0982_0
  31967  8bdc		       db		      .byte.b	%11011011
  31968  8bdd		       bd		      .byte.b	%10111101
  31969  8bde		       24		      .byte.b	%00100100
  31970  8bdf		       42		      .byte.b	%01000010
  31971  8be0		       db		      .byte.b	%11011011
  31972  8be1		       3c		      .byte.b	%00111100
  31973  8be2		       42		      .byte.b	%01000010
  31974  8be3		       99		      .byte.b	%10011001
  31975  8be4		       3c		      .byte.b	%00111100
  31976  8be5		       db		      .byte.b	%11011011
  31977  8be6		       5a		      .byte.b	%01011010
  31978  8be7		       bd		      .byte.b	%10111101
  31979  8be8		       db		      .byte.b	%11011011
  31980  8be9		       c3		      .byte.b	%11000011
  31981  8bea		       42		      .byte.b	%01000010
  31982  8beb					      if	(<*) > (<(*+31))
  31983  8beb					      repeat	($100-<*)
  31984  8beb		       00		      .byte.b	0
  31983  8beb					      repend
  31984  8bec		       00		      .byte.b	0
  31983  8bec					      repend
  31984  8bed		       00		      .byte.b	0
  31983  8bed					      repend
  31984  8bee		       00		      .byte.b	0
  31983  8bee					      repend
  31984  8bef		       00		      .byte.b	0
  31983  8bef					      repend
  31984  8bf0		       00		      .byte.b	0
  31983  8bf0					      repend
  31984  8bf1		       00		      .byte.b	0
  31983  8bf1					      repend
  31984  8bf2		       00		      .byte.b	0
  31983  8bf2					      repend
  31984  8bf3		       00		      .byte.b	0
  31983  8bf3					      repend
  31984  8bf4		       00		      .byte.b	0
  31983  8bf4					      repend
  31984  8bf5		       00		      .byte.b	0
  31983  8bf5					      repend
  31984  8bf6		       00		      .byte.b	0
  31983  8bf6					      repend
  31984  8bf7		       00		      .byte.b	0
  31983  8bf7					      repend
  31984  8bf8		       00		      .byte.b	0
  31983  8bf8					      repend
  31984  8bf9		       00		      .byte.b	0
  31983  8bf9					      repend
  31984  8bfa		       00		      .byte.b	0
  31983  8bfa					      repend
  31984  8bfb		       00		      .byte.b	0
  31983  8bfb					      repend
  31984  8bfc		       00		      .byte.b	0
  31983  8bfc					      repend
  31984  8bfd		       00		      .byte.b	0
  31983  8bfd					      repend
  31984  8bfe		       00		      .byte.b	0
  31983  8bfe					      repend
  31984  8bff		       00		      .byte.b	0
  31985  8c00					      repend
  31986  8c00					      endif
  31987  8c00				   playercolorL0984_1
  31988  8c00		       0a		      .byte.b	$0A
  31989  8c01		       08		      .byte.b	$08
  31990  8c02		       c4		      .byte.b	$C4
  31991  8c03		       0a		      .byte.b	$0A
  31992  8c04		       0c		      .byte.b	$0C
  31993  8c05		       0e		      .byte.b	$0E
  31994  8c06		       0e		      .byte.b	$0E
  31995  8c07		       0e		      .byte.b	$0E
  31996  8c08		       0c		      .byte.b	$0C
  31997  8c09		       0a		      .byte.b	$0A
  31998  8c0a		       c6		      .byte.b	$C6
  31999  8c0b		       c8		      .byte.b	$C8
  32000  8c0c		       c8		      .byte.b	$C8
  32001  8c0d		       c8		      .byte.b	$C8
  32002  8c0e		       c8		      .byte.b	$C8
  32003  8c0f		       c8		      .byte.b	$C8
  32004  8c10		       c8		      .byte.b	$C8
  32005  8c11		       c8		      .byte.b	$C8
  32006  8c12		       c8		      .byte.b	$C8
  32007  8c13		       c8		      .byte.b	$C8
  32008  8c14		       c8		      .byte.b	$C8
  32009  8c15		       c8		      .byte.b	$C8
  32010  8c16		       c8		      .byte.b	$C8
  32011  8c17		       c8		      .byte.b	$C8
  32012  8c18		       c8		      .byte.b	$C8
  32013  8c19		       c8		      .byte.b	$C8
  32014  8c1a		       c8		      .byte.b	$C8
  32015  8c1b		       c8		      .byte.b	$C8
  32016  8c1c		       c8		      .byte.b	$C8
  32017  8c1d		       c8		      .byte.b	$C8
  32018  8c1e		       c8		      .byte.b	$C8
  32019  8c1f		       ca		      .byte.b	$CA
  32020  8c20				  -	      if	(<*) > (<(*+31))
  32021  8c20				  -	      repeat	($100-<*)
  32022  8c20				  -	      .byte	0
  32023  8c20				  -	      repend
  32024  8c20					      endif
  32025  8c20				   playerL0985_1
  32026  8c20		       07		      .byte.b	%00000111
  32027  8c21		       03		      .byte.b	%00000011
  32028  8c22		       01		      .byte.b	%00000001
  32029  8c23		       0e		      .byte.b	%00001110
  32030  8c24		       3e		      .byte.b	%00111110
  32031  8c25		       ea		      .byte.b	%11101010
  32032  8c26		       f6		      .byte.b	%11110110
  32033  8c27		       f6		      .byte.b	%11110110
  32034  8c28		       3e		      .byte.b	%00111110
  32035  8c29		       0e		      .byte.b	%00001110
  32036  8c2a		       01		      .byte.b	%00000001
  32037  8c2b		       01		      .byte.b	%00000001
  32038  8c2c		       01		      .byte.b	%00000001
  32039  8c2d		       01		      .byte.b	%00000001
  32040  8c2e		       01		      .byte.b	%00000001
  32041  8c2f		       01		      .byte.b	%00000001
  32042  8c30		       01		      .byte.b	%00000001
  32043  8c31		       01		      .byte.b	%00000001
  32044  8c32		       01		      .byte.b	%00000001
  32045  8c33		       01		      .byte.b	%00000001
  32046  8c34		       01		      .byte.b	%00000001
  32047  8c35		       01		      .byte.b	%00000001
  32048  8c36		       01		      .byte.b	%00000001
  32049  8c37		       01		      .byte.b	%00000001
  32050  8c38		       01		      .byte.b	%00000001
  32051  8c39		       01		      .byte.b	%00000001
  32052  8c3a		       01		      .byte.b	%00000001
  32053  8c3b		       01		      .byte.b	%00000001
  32054  8c3c		       01		      .byte.b	%00000001
  32055  8c3d		       01		      .byte.b	%00000001
  32056  8c3e		       01		      .byte.b	%00000001
  32057  8c3f		       01		      .byte.b	%00000001
  32058  8c40				  -	      if	(<*) > (<(*+15))
  32059  8c40				  -	      repeat	($100-<*)
  32060  8c40				  -	      .byte	0
  32061  8c40				  -	      repend
  32062  8c40					      endif
  32063  8c40				   playercolorL0987_1
  32064  8c40		       4a		      .byte.b	$4A
  32065  8c41		       0a		      .byte.b	$0A
  32066  8c42		       0c		      .byte.b	$0C
  32067  8c43		       0e		      .byte.b	$0E
  32068  8c44		       0e		      .byte.b	$0E
  32069  8c45		       0e		      .byte.b	$0E
  32070  8c46		       0e		      .byte.b	$0E
  32071  8c47		       0e		      .byte.b	$0E
  32072  8c48		       0e		      .byte.b	$0E
  32073  8c49		       0e		      .byte.b	$0E
  32074  8c4a		       0e		      .byte.b	$0E
  32075  8c4b		       0e		      .byte.b	$0E
  32076  8c4c		       0e		      .byte.b	$0E
  32077  8c4d		       0c		      .byte.b	$0C
  32078  8c4e		       0a		      .byte.b	$0A
  32079  8c4f		       46		      .byte.b	$46
  32080  8c50				  -	      if	(<*) > (<(*+15))
  32081  8c50				  -	      repeat	($100-<*)
  32082  8c50				  -	      .byte	0
  32083  8c50				  -	      repend
  32084  8c50					      endif
  32085  8c50				   playerL0988_1
  32086  8c50		       ff		      .byte.b	%11111111
  32087  8c51		       18		      .byte.b	%00011000
  32088  8c52		       24		      .byte.b	%00100100
  32089  8c53		       24		      .byte.b	%00100100
  32090  8c54		       24		      .byte.b	%00100100
  32091  8c55		       42		      .byte.b	%01000010
  32092  8c56		       42		      .byte.b	%01000010
  32093  8c57		       42		      .byte.b	%01000010
  32094  8c58		       42		      .byte.b	%01000010
  32095  8c59		       42		      .byte.b	%01000010
  32096  8c5a		       42		      .byte.b	%01000010
  32097  8c5b		       24		      .byte.b	%00100100
  32098  8c5c		       24		      .byte.b	%00100100
  32099  8c5d		       24		      .byte.b	%00100100
  32100  8c5e		       18		      .byte.b	%00011000
  32101  8c5f		       ff		      .byte.b	%11111111
  32102  8c60				  -	      ifconst	pfres
  32103  8c60				  -	      if	(<*) > (254-pfres*pfwidth)
  32104  8c60				  -	      align	256
  32105  8c60				  -	      endif
  32106  8c60				  -	      if	(<*) < (136-pfres*pfwidth)
  32107  8c60				  -	      repeat	((136-pfres*pfwidth)-(<*))
  32108  8c60				  -	      .byte	0
  32109  8c60				  -	      repend
  32110  8c60				  -	      endif
  32111  8c60					      else
  32112  8c60				  -	      if	(<*) > 206
  32113  8c60				  -	      align	256
  32114  8c60					      endif
  32115  8c60				  -	      if	(<*) < 88
  32116  8c60				  -	      repeat	(88-(<*))
  32117  8c60				  -	      .byte	0
  32118  8c60				  -	      repend
  32119  8c60					      endif
  32120  8c60					      endif
  32121  8c60				   pfcolorlabel1194
  32122  8c60		       a4 06 04 48	      .byte.b	$A4, $06, $04, $48
  32123  8c64		       a4 06 06 4a	      .byte.b	$A4, $06, $06, $4A
  32124  8c68		       a4 06 06 4a	      .byte.b	$A4, $06, $06, $4A
  32125  8c6c		       a4 06 08 4a	      .byte.b	$A4, $06, $08, $4A
  32126  8c70		       a4 06 08 48	      .byte.b	$A4, $06, $08, $48
  32127  8c74		       18 06 0a 48	      .byte.b	$18, $06, $0A, $48
  32128  8c78		       a4 06 0a 00	      .byte.b	$A4, $06, $0A, $00
  32129  8c7c		       c6 c6 0c 00	      .byte.b	$C6, $C6, $0C, $00
  32130  8c80		       c6 c6 0c 00	      .byte.b	$C6, $C6, $0C, $00
  32131  8c84		       a2 0a 0e 0a	      .byte.b	$A2, $0A, $0E, $0A
  32132  8c88				  -	      if	(<*) > (<(*+7))
  32133  8c88				  -	      repeat	($100-<*)
  32134  8c88				  -	      .byte	0
  32135  8c88				  -	      repend
  32136  8c88					      endif
  32137  8c88				   playercolorL01088_0
  32138  8c88		       0e		      .byte.b	$0E
  32139  8c89		       0e		      .byte.b	$0E
  32140  8c8a		       0e		      .byte.b	$0E
  32141  8c8b		       0e		      .byte.b	$0E
  32142  8c8c		       0e		      .byte.b	$0E
  32143  8c8d		       0e		      .byte.b	$0E
  32144  8c8e		       0e		      .byte.b	$0E
  32145  8c8f		       0e		      .byte.b	$0E
  32146  8c90				  -	      if	(<*) > (<(*+7))
  32147  8c90				  -	      repeat	($100-<*)
  32148  8c90				  -	      .byte	0
  32149  8c90				  -	      repend
  32150  8c90					      endif
  32151  8c90				   playercolorL01090_1
  32152  8c90		       0e		      .byte.b	$0E
  32153  8c91		       0e		      .byte.b	$0E
  32154  8c92		       0e		      .byte.b	$0E
  32155  8c93		       0e		      .byte.b	$0E
  32156  8c94		       0e		      .byte.b	$0E
  32157  8c95		       0e		      .byte.b	$0E
  32158  8c96		       0e		      .byte.b	$0E
  32159  8c97		       0e		      .byte.b	$0E
  32160  8c98				  -	      if	(<*) > (<(*+17))
  32161  8c98				  -	      repeat	($100-<*)
  32162  8c98				  -	      .byte	0
  32163  8c98				  -	      repend
  32164  8c98					      endif
  32165  8c98				   playercolorL01150_1
  32166  8c98		       1a		      .byte.b	$1A
  32167  8c99		       1c		      .byte.b	$1C
  32168  8c9a		       1e		      .byte.b	$1E
  32169  8c9b		       2a		      .byte.b	$2A
  32170  8c9c		       2e		      .byte.b	$2E
  32171  8c9d		       2a		      .byte.b	$2A
  32172  8c9e		       2e		      .byte.b	$2E
  32173  8c9f		       0c		      .byte.b	$0C
  32174  8ca0		       2e		      .byte.b	$2E
  32175  8ca1		       2e		      .byte.b	$2E
  32176  8ca2		       2e		      .byte.b	$2E
  32177  8ca3		       2e		      .byte.b	$2E
  32178  8ca4		       c6		      .byte.b	$C6
  32179  8ca5		       c6		      .byte.b	$C6
  32180  8ca6		       44		      .byte.b	$44
  32181  8ca7		       44		      .byte.b	$44
  32182  8ca8		       46		      .byte.b	$46
  32183  8ca9		       46		      .byte.b	$46
  32184  8caa				  -	      if	(<*) > (<(*+17))
  32185  8caa				  -	      repeat	($100-<*)
  32186  8caa				  -	      .byte	0
  32187  8caa				  -	      repend
  32188  8caa					      endif
  32189  8caa				   playerL01151_1
  32190  8caa		       d7		      .byte.b	%11010111
  32191  8cab		       fb		      .byte.b	%11111011
  32192  8cac		       b8		      .byte.b	%10111000
  32193  8cad		       0b		      .byte.b	%00001011
  32194  8cae		       0b		      .byte.b	%00001011
  32195  8caf		       17		      .byte.b	%00010111
  32196  8cb0		       0e		      .byte.b	%00001110
  32197  8cb1		       14		      .byte.b	%00010100
  32198  8cb2		       7c		      .byte.b	%01111100
  32199  8cb3		       56		      .byte.b	%01010110
  32200  8cb4		       af		      .byte.b	%10101111
  32201  8cb5		       fe		      .byte.b	%11111110
  32202  8cb6		       6c		      .byte.b	%01101100
  32203  8cb7		       38		      .byte.b	%00111000
  32204  8cb8		       72		      .byte.b	%01110010
  32205  8cb9		       54		      .byte.b	%01010100
  32206  8cba		       06		      .byte.b	%00000110
  32207  8cbb		       0c		      .byte.b	%00001100
  32208  8cbc				  -	      if	(<*) > (<(*+7))
  32209  8cbc				  -	      repeat	($100-<*)
  32210  8cbc				  -	      .byte	0
  32211  8cbc				  -	      repend
  32212  8cbc					      endif
  32213  8cbc				   playerL01233_0
  32214  8cbc		       78		      .byte.b	%01111000
  32215  8cbd		       30		      .byte.b	%00110000
  32216  8cbe		       30		      .byte.b	%00110000
  32217  8cbf		       33		      .byte.b	%00110011
  32218  8cc0		       30		      .byte.b	%00110000
  32219  8cc1		       30		      .byte.b	%00110000
  32220  8cc2		       70		      .byte.b	%01110000
  32221  8cc3		       30		      .byte.b	%00110000
  32222  8cc4				  -	      if	(<*) > (<(*+7))
  32223  8cc4				  -	      repeat	($100-<*)
  32224  8cc4				  -	      .byte	0
  32225  8cc4				  -	      repend
  32226  8cc4					      endif
  32227  8cc4				   playerL01235_0
  32228  8cc4		       78		      .byte.b	%01111000
  32229  8cc5		       78		      .byte.b	%01111000
  32230  8cc6		       60		      .byte.b	%01100000
  32231  8cc7		       73		      .byte.b	%01110011
  32232  8cc8		       38		      .byte.b	%00111000
  32233  8cc9		       18		      .byte.b	%00011000
  32234  8cca		       78		      .byte.b	%01111000
  32235  8ccb		       70		      .byte.b	%01110000
  32236  8ccc				  -	      if	(<*) > (<(*+7))
  32237  8ccc				  -	      repeat	($100-<*)
  32238  8ccc				  -	      .byte	0
  32239  8ccc				  -	      repend
  32240  8ccc					      endif
  32241  8ccc				   playerL01237_0
  32242  8ccc		       70		      .byte.b	%01110000
  32243  8ccd		       78		      .byte.b	%01111000
  32244  8cce		       18		      .byte.b	%00011000
  32245  8ccf		       7b		      .byte.b	%01111011
  32246  8cd0		       78		      .byte.b	%01111000
  32247  8cd1		       18		      .byte.b	%00011000
  32248  8cd2		       78		      .byte.b	%01111000
  32249  8cd3		       70		      .byte.b	%01110000
  32250  8cd4				  -	      if	(<*) > (<(*+7))
  32251  8cd4				  -	      repeat	($100-<*)
  32252  8cd4				  -	      .byte	0
  32253  8cd4				  -	      repend
  32254  8cd4					      endif
  32255  8cd4				   playerL01239_0
  32256  8cd4		       18		      .byte.b	%00011000
  32257  8cd5		       18		      .byte.b	%00011000
  32258  8cd6		       18		      .byte.b	%00011000
  32259  8cd7		       3b		      .byte.b	%00111011
  32260  8cd8		       78		      .byte.b	%01111000
  32261  8cd9		       68		      .byte.b	%01101000
  32262  8cda		       68		      .byte.b	%01101000
  32263  8cdb		       68		      .byte.b	%01101000
  32264  8cdc				  -	      if	(<*) > (<(*+7))
  32265  8cdc				  -	      repeat	($100-<*)
  32266  8cdc				  -	      .byte	0
  32267  8cdc				  -	      repend
  32268  8cdc					      endif
  32269  8cdc				   playerL01241_1
  32270  8cdc		       78		      .byte.b	%01111000
  32271  8cdd		       30		      .byte.b	%00110000
  32272  8cde		       30		      .byte.b	%00110000
  32273  8cdf		       30		      .byte.b	%00110000
  32274  8ce0		       30		      .byte.b	%00110000
  32275  8ce1		       30		      .byte.b	%00110000
  32276  8ce2		       70		      .byte.b	%01110000
  32277  8ce3		       30		      .byte.b	%00110000
  32278  8ce4				  -	      if	(<*) > (<(*+7))
  32279  8ce4				  -	      repeat	($100-<*)
  32280  8ce4				  -	      .byte	0
  32281  8ce4				  -	      repend
  32282  8ce4					      endif
  32283  8ce4				   playerL01243_1
  32284  8ce4		       78		      .byte.b	%01111000
  32285  8ce5		       78		      .byte.b	%01111000
  32286  8ce6		       60		      .byte.b	%01100000
  32287  8ce7		       70		      .byte.b	%01110000
  32288  8ce8		       38		      .byte.b	%00111000
  32289  8ce9		       18		      .byte.b	%00011000
  32290  8cea		       78		      .byte.b	%01111000
  32291  8ceb		       70		      .byte.b	%01110000
  32292  8cec				  -	      if	(<*) > (<(*+7))
  32293  8cec				  -	      repeat	($100-<*)
  32294  8cec				  -	      .byte	0
  32295  8cec				  -	      repend
  32296  8cec					      endif
  32297  8cec				   playerL01245_1
  32298  8cec		       70		      .byte.b	%01110000
  32299  8ced		       78		      .byte.b	%01111000
  32300  8cee		       18		      .byte.b	%00011000
  32301  8cef		       78		      .byte.b	%01111000
  32302  8cf0		       78		      .byte.b	%01111000
  32303  8cf1		       18		      .byte.b	%00011000
  32304  8cf2		       78		      .byte.b	%01111000
  32305  8cf3		       70		      .byte.b	%01110000
  32306  8cf4				  -	      if	(<*) > (<(*+7))
  32307  8cf4				  -	      repeat	($100-<*)
  32308  8cf4				  -	      .byte	0
  32309  8cf4				  -	      repend
  32310  8cf4					      endif
  32311  8cf4				   playerL01247_1
  32312  8cf4		       18		      .byte.b	%00011000
  32313  8cf5		       18		      .byte.b	%00011000
  32314  8cf6		       18		      .byte.b	%00011000
  32315  8cf7		       38		      .byte.b	%00111000
  32316  8cf8		       78		      .byte.b	%01111000
  32317  8cf9		       68		      .byte.b	%01101000
  32318  8cfa		       68		      .byte.b	%01101000
  32319  8cfb		       68		      .byte.b	%01101000
  32320  8cfc					      if	(<*) > (<(*+7))
  32321  8cfc					      repeat	($100-<*)
  32322  8cfc		       00		      .byte.b	0
  32321  8cfc					      repend
  32322  8cfd		       00		      .byte.b	0
  32321  8cfd					      repend
  32322  8cfe		       00		      .byte.b	0
  32321  8cfe					      repend
  32322  8cff		       00		      .byte.b	0
  32323  8d00					      repend
  32324  8d00					      endif
  32325  8d00				   playerL01249_1
  32326  8d00		       0f		      .byte.b	%00001111
  32327  8d01		       06		      .byte.b	%00000110
  32328  8d02		       06		      .byte.b	%00000110
  32329  8d03		       a6		      .byte.b	%10100110
  32330  8d04		       46		      .byte.b	%01000110
  32331  8d05		       a6		      .byte.b	%10100110
  32332  8d06		       0e		      .byte.b	%00001110
  32333  8d07		       06		      .byte.b	%00000110
  32334  8d08				  -	      if	(<*) > (<(*+7))
  32335  8d08				  -	      repeat	($100-<*)
  32336  8d08				  -	      .byte	0
  32337  8d08				  -	      repend
  32338  8d08					      endif
  32339  8d08				   playerL01251_1
  32340  8d08		       0f		      .byte.b	%00001111
  32341  8d09		       0f		      .byte.b	%00001111
  32342  8d0a		       0c		      .byte.b	%00001100
  32343  8d0b		       ae		      .byte.b	%10101110
  32344  8d0c		       47		      .byte.b	%01000111
  32345  8d0d		       a3		      .byte.b	%10100011
  32346  8d0e		       0f		      .byte.b	%00001111
  32347  8d0f		       0e		      .byte.b	%00001110
  32348  8d10				  -	      if	(<*) > (<(*+7))
  32349  8d10				  -	      repeat	($100-<*)
  32350  8d10				  -	      .byte	0
  32351  8d10				  -	      repend
  32352  8d10					      endif
  32353  8d10				   playerL01253_1
  32354  8d10		       0e		      .byte.b	%00001110
  32355  8d11		       0f		      .byte.b	%00001111
  32356  8d12		       03		      .byte.b	%00000011
  32357  8d13		       af		      .byte.b	%10101111
  32358  8d14		       4f		      .byte.b	%01001111
  32359  8d15		       a3		      .byte.b	%10100011
  32360  8d16		       0f		      .byte.b	%00001111
  32361  8d17		       0e		      .byte.b	%00001110
  32362  8d18				  -	      if	(<*) > (<(*+7))
  32363  8d18				  -	      repeat	($100-<*)
  32364  8d18				  -	      .byte	0
  32365  8d18				  -	      repend
  32366  8d18					      endif
  32367  8d18				   playerL01255_1
  32368  8d18		       03		      .byte.b	%00000011
  32369  8d19		       03		      .byte.b	%00000011
  32370  8d1a		       03		      .byte.b	%00000011
  32371  8d1b		       a7		      .byte.b	%10100111
  32372  8d1c		       4f		      .byte.b	%01001111
  32373  8d1d		       ad		      .byte.b	%10101101
  32374  8d1e		       0d		      .byte.b	%00001101
  32375  8d1f		       0d		      .byte.b	%00001101
  32376  8d20				  -	      if	(<*) > (<(*+7))
  32377  8d20				  -	      repeat	($100-<*)
  32378  8d20				  -	      .byte	0
  32379  8d20				  -	      repend
  32380  8d20					      endif
  32381  8d20				   playerL01257_1
  32382  8d20		       0e		      .byte.b	%00001110
  32383  8d21		       0f		      .byte.b	%00001111
  32384  8d22		       03		      .byte.b	%00000011
  32385  8d23		       a7		      .byte.b	%10100111
  32386  8d24		       4e		      .byte.b	%01001110
  32387  8d25		       ac		      .byte.b	%10101100
  32388  8d26		       0f		      .byte.b	%00001111
  32389  8d27		       0f		      .byte.b	%00001111
  32390  8d28				  -	      if	(<*) > (<(*+7))
  32391  8d28				  -	      repeat	($100-<*)
  32392  8d28				  -	      .byte	0
  32393  8d28				  -	      repend
  32394  8d28					      endif
  32395  8d28				   playerL01259_1
  32396  8d28		       0f		      .byte.b	%00001111
  32397  8d29		       0d		      .byte.b	%00001101
  32398  8d2a		       0d		      .byte.b	%00001101
  32399  8d2b		       af		      .byte.b	%10101111
  32400  8d2c		       4f		      .byte.b	%01001111
  32401  8d2d		       ac		      .byte.b	%10101100
  32402  8d2e		       0f		      .byte.b	%00001111
  32403  8d2f		       07		      .byte.b	%00000111
  32404  8d30				  -	      if	(<*) > (<(*+7))
  32405  8d30				  -	      repeat	($100-<*)
  32406  8d30				  -	      .byte	0
  32407  8d30				  -	      repend
  32408  8d30					      endif
  32409  8d30				   playerL01261_1
  32410  8d30		       06		      .byte.b	%00000110
  32411  8d31		       06		      .byte.b	%00000110
  32412  8d32		       06		      .byte.b	%00000110
  32413  8d33		       a7		      .byte.b	%10100111
  32414  8d34		       43		      .byte.b	%01000011
  32415  8d35		       a3		      .byte.b	%10100011
  32416  8d36		       0f		      .byte.b	%00001111
  32417  8d37		       0f		      .byte.b	%00001111
  32418  8d38				  -	      if	(<*) > (<(*+7))
  32419  8d38				  -	      repeat	($100-<*)
  32420  8d38				  -	      .byte	0
  32421  8d38				  -	      repend
  32422  8d38					      endif
  32423  8d38				   playerL01263_1
  32424  8d38		       0f		      .byte.b	%00001111
  32425  8d39		       0f		      .byte.b	%00001111
  32426  8d3a		       09		      .byte.b	%00001001
  32427  8d3b		       af		      .byte.b	%10101111
  32428  8d3c		       4f		      .byte.b	%01001111
  32429  8d3d		       a9		      .byte.b	%10101001
  32430  8d3e		       0f		      .byte.b	%00001111
  32431  8d3f		       0f		      .byte.b	%00001111
  32432  8d40				  -	      if	(<*) > (<(*+7))
  32433  8d40				  -	      repeat	($100-<*)
  32434  8d40				  -	      .byte	0
  32435  8d40				  -	      repend
  32436  8d40					      endif
  32437  8d40				   playerL01265_1
  32438  8d40		       06		      .byte.b	%00000110
  32439  8d41		       07		      .byte.b	%00000111
  32440  8d42		       03		      .byte.b	%00000011
  32441  8d43		       a7		      .byte.b	%10100111
  32442  8d44		       4d		      .byte.b	%01001101
  32443  8d45		       a9		      .byte.b	%10101001
  32444  8d46		       0f		      .byte.b	%00001111
  32445  8d47		       06		      .byte.b	%00000110
  32446  8d48				  -	      if	(<*) > (<(*+12))
  32447  8d48				  -	      repeat	($100-<*)
  32448  8d48				  -	      .byte	0
  32449  8d48				  -	      repend
  32450  8d48					      endif
  32451  8d48				   playercolorL01267_0
  32452  8d48		       44		      .byte.b	$44
  32453  8d49		       44		      .byte.b	$44
  32454  8d4a		       3e		      .byte.b	$3E
  32455  8d4b		       44		      .byte.b	$44
  32456  8d4c		       44		      .byte.b	$44
  32457  8d4d		       44		      .byte.b	$44
  32458  8d4e		       3e		      .byte.b	$3E
  32459  8d4f		       3e		      .byte.b	$3E
  32460  8d50		       3e		      .byte.b	$3E
  32461  8d51		       3e		      .byte.b	$3E
  32462  8d52		       3e		      .byte.b	$3E
  32463  8d53		       44		      .byte.b	$44
  32464  8d54		       44		      .byte.b	$44
  32465  8d55				  -	      if	(<*) > (<(*+12))
  32466  8d55				  -	      repeat	($100-<*)
  32467  8d55				  -	      .byte	0
  32468  8d55				  -	      repend
  32469  8d55					      endif
  32470  8d55				   playerL01268_0
  32471  8d55		       7c		      .byte.b	%01111100
  32472  8d56		       78		      .byte.b	%01111000
  32473  8d57		       64		      .byte.b	%01100100
  32474  8d58		       f0		      .byte.b	%11110000
  32475  8d59		       f6		      .byte.b	%11110110
  32476  8d5a		       6c		      .byte.b	%01101100
  32477  8d5b		       3e		      .byte.b	%00111110
  32478  8d5c		       70		      .byte.b	%01110000
  32479  8d5d		       db		      .byte.b	%11011011
  32480  8d5e		       97		      .byte.b	%10010111
  32481  8d5f		       34		      .byte.b	%00110100
  32482  8d60		       ff		      .byte.b	%11111111
  32483  8d61		       7c		      .byte.b	%01111100
  32484  8d62				  -	      if	(<*) > (<(*+7))
  32485  8d62				  -	      repeat	($100-<*)
  32486  8d62				  -	      .byte	0
  32487  8d62				  -	      repend
  32488  8d62					      endif
  32489  8d62				   playerL01270_0
  32490  8d62		       c8		      .byte.b	%11001000
  32491  8d63		       aa		      .byte.b	%10101010
  32492  8d64		       aa		      .byte.b	%10101010
  32493  8d65		       aa		      .byte.b	%10101010
  32494  8d66		       8e		      .byte.b	%10001110
  32495  8d67		       8a		      .byte.b	%10001010
  32496  8d68		       8a		      .byte.b	%10001010
  32497  8d69		       66		      .byte.b	%01100110
  32498  8d6a				  -	      if	(<*) > (<(*+7))
  32499  8d6a				  -	      repeat	($100-<*)
  32500  8d6a				  -	      .byte	0
  32501  8d6a				  -	      repend
  32502  8d6a					      endif
  32503  8d6a				   playerL01272_1
  32504  8d6a		       93		      .byte.b	%10010011
  32505  8d6b		       8a		      .byte.b	%10001010
  32506  8d6c		       8a		      .byte.b	%10001010
  32507  8d6d		       8a		      .byte.b	%10001010
  32508  8d6e		       ab		      .byte.b	%10101011
  32509  8d6f		       aa		      .byte.b	%10101010
  32510  8d70		       fa		      .byte.b	%11111010
  32511  8d71		       79		      .byte.b	%01111001
  32512  8d72				  -	      if	(<*) > (<(*+7))
  32513  8d72				  -	      repeat	($100-<*)
  32514  8d72				  -	      .byte	0
  32515  8d72				  -	      repend
  32516  8d72					      endif
  32517  8d72				   playerL01274_0
  32518  8d72		       cc		      .byte.b	%11001100
  32519  8d73		       aa		      .byte.b	%10101010
  32520  8d74		       aa		      .byte.b	%10101010
  32521  8d75		       aa		      .byte.b	%10101010
  32522  8d76		       aa		      .byte.b	%10101010
  32523  8d77		       aa		      .byte.b	%10101010
  32524  8d78		       aa		      .byte.b	%10101010
  32525  8d79		       62		      .byte.b	%01100010
  32526  8d7a				  -	      if	(<*) > (<(*+7))
  32527  8d7a				  -	      repeat	($100-<*)
  32528  8d7a				  -	      .byte	0
  32529  8d7a				  -	      repend
  32530  8d7a					      endif
  32531  8d7a				   playerL01276_1
  32532  8d7a		       c8		      .byte.b	%11001000
  32533  8d7b		       8a		      .byte.b	%10001010
  32534  8d7c		       8a		      .byte.b	%10001010
  32535  8d7d		       8a		      .byte.b	%10001010
  32536  8d7e		       ec		      .byte.b	%11101100
  32537  8d7f		       8a		      .byte.b	%10001010
  32538  8d80		       8a		      .byte.b	%10001010
  32539  8d81		       6e		      .byte.b	%01101110
  32540  8d82				  -	      if	(<*) > (<(*+23))
  32541  8d82				  -	      repeat	($100-<*)
  32542  8d82				  -	      .byte	0
  32543  8d82				  -	      repend
  32544  8d82					      endif
  32545  8d82				   playercolorL01278_1
  32546  8d82		       1a		      .byte.b	$1A
  32547  8d83		       1e		      .byte.b	$1E
  32548  8d84		       1e		      .byte.b	$1E
  32549  8d85		       0e		      .byte.b	$0E
  32550  8d86		       2a		      .byte.b	$2A
  32551  8d87		       1e		      .byte.b	$1E
  32552  8d88		       1e		      .byte.b	$1E
  32553  8d89		       2a		      .byte.b	$2A
  32554  8d8a		       2e		      .byte.b	$2E
  32555  8d8b		       2a		      .byte.b	$2A
  32556  8d8c		       2e		      .byte.b	$2E
  32557  8d8d		       2a		      .byte.b	$2A
  32558  8d8e		       0c		      .byte.b	$0C
  32559  8d8f		       2e		      .byte.b	$2E
  32560  8d90		       2e		      .byte.b	$2E
  32561  8d91		       2e		      .byte.b	$2E
  32562  8d92		       2e		      .byte.b	$2E
  32563  8d93		       c6		      .byte.b	$C6
  32564  8d94		       c6		      .byte.b	$C6
  32565  8d95		       44		      .byte.b	$44
  32566  8d96		       44		      .byte.b	$44
  32567  8d97		       46		      .byte.b	$46
  32568  8d98		       46		      .byte.b	$46
  32569  8d99		       46		      .byte.b	$46
  32570  8d9a				  -	      if	(<*) > (<(*+20))
  32571  8d9a				  -	      repeat	($100-<*)
  32572  8d9a				  -	      .byte	0
  32573  8d9a				  -	      repend
  32574  8d9a					      endif
  32575  8d9a				   playercolorL01280_1
  32576  8d9a		       1a		      .byte.b	$1A
  32577  8d9b		       1c		      .byte.b	$1C
  32578  8d9c		       1e		      .byte.b	$1E
  32579  8d9d		       0e		      .byte.b	$0E
  32580  8d9e		       c2		      .byte.b	$C2
  32581  8d9f		       c4		      .byte.b	$C4
  32582  8da0		       c6		      .byte.b	$C6
  32583  8da1		       c6		      .byte.b	$C6
  32584  8da2		       c6		      .byte.b	$C6
  32585  8da3		       c6		      .byte.b	$C6
  32586  8da4		       c8		      .byte.b	$C8
  32587  8da5		       c8		      .byte.b	$C8
  32588  8da6		       c6		      .byte.b	$C6
  32589  8da7		       c6		      .byte.b	$C6
  32590  8da8		       c6		      .byte.b	$C6
  32591  8da9		       c6		      .byte.b	$C6
  32592  8daa		       c4		      .byte.b	$C4
  32593  8dab		       c2		      .byte.b	$C2
  32594  8dac		       42		      .byte.b	$42
  32595  8dad		       44		      .byte.b	$44
  32596  8dae		       46		      .byte.b	$46
  32597  8daf				  -	      if	(<*) > (<(*+23))
  32598  8daf				  -	      repeat	($100-<*)
  32599  8daf				  -	      .byte	0
  32600  8daf				  -	      repend
  32601  8daf					      endif
  32602  8daf				   playerL01282_1
  32603  8daf		       77		      .byte.b	%01110111
  32604  8db0		       36		      .byte.b	%00110110
  32605  8db1		       14		      .byte.b	%00010100
  32606  8db2		       14		      .byte.b	%00010100
  32607  8db3		       38		      .byte.b	%00111000
  32608  8db4		       62		      .byte.b	%01100010
  32609  8db5		       66		      .byte.b	%01100110
  32610  8db6		       76		      .byte.b	%01110110
  32611  8db7		       76		      .byte.b	%01110110
  32612  8db8		       76		      .byte.b	%01110110
  32613  8db9		       3a		      .byte.b	%00111010
  32614  8dba		       3c		      .byte.b	%00111100
  32615  8dbb		       14		      .byte.b	%00010100
  32616  8dbc		       7c		      .byte.b	%01111100
  32617  8dbd		       16		      .byte.b	%00010110
  32618  8dbe		       e7		      .byte.b	%11100111
  32619  8dbf		       fe		      .byte.b	%11111110
  32620  8dc0		       6c		      .byte.b	%01101100
  32621  8dc1		       28		      .byte.b	%00101000
  32622  8dc2		       76		      .byte.b	%01110110
  32623  8dc3		       57		      .byte.b	%01010111
  32624  8dc4		       06		      .byte.b	%00000110
  32625  8dc5		       03		      .byte.b	%00000011
  32626  8dc6		       02		      .byte.b	%00000010
  32627  8dc7				  -	      if	(<*) > (<(*+23))
  32628  8dc7				  -	      repeat	($100-<*)
  32629  8dc7				  -	      .byte	0
  32630  8dc7				  -	      repend
  32631  8dc7					      endif
  32632  8dc7				   playerL01284_1
  32633  8dc7		       66		      .byte.b	%01100110
  32634  8dc8		       e7		      .byte.b	%11100111
  32635  8dc9		       c3		      .byte.b	%11000011
  32636  8dca		       22		      .byte.b	%00100010
  32637  8dcb		       18		      .byte.b	%00011000
  32638  8dcc		       b1		      .byte.b	%10110001
  32639  8dcd		       b3		      .byte.b	%10110011
  32640  8dce		       73		      .byte.b	%01110011
  32641  8dcf		       77		      .byte.b	%01110111
  32642  8dd0		       76		      .byte.b	%01110110
  32643  8dd1		       3a		      .byte.b	%00111010
  32644  8dd2		       3c		      .byte.b	%00111100
  32645  8dd3		       28		      .byte.b	%00101000
  32646  8dd4		       7c		      .byte.b	%01111100
  32647  8dd5		       16		      .byte.b	%00010110
  32648  8dd6		       e7		      .byte.b	%11100111
  32649  8dd7		       fe		      .byte.b	%11111110
  32650  8dd8		       6c		      .byte.b	%01101100
  32651  8dd9		       28		      .byte.b	%00101000
  32652  8dda		       77		      .byte.b	%01110111
  32653  8ddb		       56		      .byte.b	%01010110
  32654  8ddc		       03		      .byte.b	%00000011
  32655  8ddd		       02		      .byte.b	%00000010
  32656  8dde		       01		      .byte.b	%00000001
  32657  8ddf				  -	      if	(<*) > (<(*+19))
  32658  8ddf				  -	      repeat	($100-<*)
  32659  8ddf				  -	      .byte	0
  32660  8ddf				  -	      repend
  32661  8ddf					      endif
  32662  8ddf				   playercolorL01286_1
  32663  8ddf		       1a		      .byte.b	$1A
  32664  8de0		       1c		      .byte.b	$1C
  32665  8de1		       1e		      .byte.b	$1E
  32666  8de2		       0c		      .byte.b	$0C
  32667  8de3		       1e		      .byte.b	$1E
  32668  8de4		       2a		      .byte.b	$2A
  32669  8de5		       2e		      .byte.b	$2E
  32670  8de6		       2a		      .byte.b	$2A
  32671  8de7		       2e		      .byte.b	$2E
  32672  8de8		       0c		      .byte.b	$0C
  32673  8de9		       2e		      .byte.b	$2E
  32674  8dea		       2e		      .byte.b	$2E
  32675  8deb		       2e		      .byte.b	$2E
  32676  8dec		       2e		      .byte.b	$2E
  32677  8ded		       c6		      .byte.b	$C6
  32678  8dee		       c6		      .byte.b	$C6
  32679  8def		       44		      .byte.b	$44
  32680  8df0		       44		      .byte.b	$44
  32681  8df1		       46		      .byte.b	$46
  32682  8df2		       46		      .byte.b	$46
  32683  8df3					      if	(<*) > (<(*+19))
  32684  8df3					      repeat	($100-<*)
  32685  8df3		       00		      .byte.b	0
  32684  8df3					      repend
  32685  8df4		       00		      .byte.b	0
  32684  8df4					      repend
  32685  8df5		       00		      .byte.b	0
  32684  8df5					      repend
  32685  8df6		       00		      .byte.b	0
  32684  8df6					      repend
  32685  8df7		       00		      .byte.b	0
  32684  8df7					      repend
  32685  8df8		       00		      .byte.b	0
  32684  8df8					      repend
  32685  8df9		       00		      .byte.b	0
  32684  8df9					      repend
  32685  8dfa		       00		      .byte.b	0
  32684  8dfa					      repend
  32685  8dfb		       00		      .byte.b	0
  32684  8dfb					      repend
  32685  8dfc		       00		      .byte.b	0
  32684  8dfc					      repend
  32685  8dfd		       00		      .byte.b	0
  32684  8dfd					      repend
  32685  8dfe		       00		      .byte.b	0
  32684  8dfe					      repend
  32685  8dff		       00		      .byte.b	0
  32686  8e00					      repend
  32687  8e00					      endif
  32688  8e00				   playerL01288_1
  32689  8e00		       ef		      .byte.b	%11101111
  32690  8e01		       f7		      .byte.b	%11110111
  32691  8e02		       66		      .byte.b	%01100110
  32692  8e03		       24		      .byte.b	%00100100
  32693  8e04		       ac		      .byte.b	%10101100
  32694  8e05		       76		      .byte.b	%01110110
  32695  8e06		       76		      .byte.b	%01110110
  32696  8e07		       7b		      .byte.b	%01111011
  32697  8e08		       3b		      .byte.b	%00111011
  32698  8e09		       14		      .byte.b	%00010100
  32699  8e0a		       7c		      .byte.b	%01111100
  32700  8e0b		       16		      .byte.b	%00010110
  32701  8e0c		       ef		      .byte.b	%11101111
  32702  8e0d		       fe		      .byte.b	%11111110
  32703  8e0e		       6c		      .byte.b	%01101100
  32704  8e0f		       3c		      .byte.b	%00111100
  32705  8e10		       76		      .byte.b	%01110110
  32706  8e11		       54		      .byte.b	%01010100
  32707  8e12		       06		      .byte.b	%00000110
  32708  8e13		       0c		      .byte.b	%00001100
  32709  8e14				  -	      if	(<*) > (<(*+24))
  32710  8e14				  -	      repeat	($100-<*)
  32711  8e14				  -	      .byte	0
  32712  8e14				  -	      repend
  32713  8e14					      endif
  32714  8e14				   playercolorL01290_1
  32715  8e14		       1e		      .byte.b	$1E
  32716  8e15		       1a		      .byte.b	$1A
  32717  8e16		       1e		      .byte.b	$1E
  32718  8e17		       1e		      .byte.b	$1E
  32719  8e18		       0e		      .byte.b	$0E
  32720  8e19		       2a		      .byte.b	$2A
  32721  8e1a		       1e		      .byte.b	$1E
  32722  8e1b		       1e		      .byte.b	$1E
  32723  8e1c		       2e		      .byte.b	$2E
  32724  8e1d		       2a		      .byte.b	$2A
  32725  8e1e		       2e		      .byte.b	$2E
  32726  8e1f		       2a		      .byte.b	$2A
  32727  8e20		       d6		      .byte.b	$D6
  32728  8e21		       0c		      .byte.b	$0C
  32729  8e22		       2e		      .byte.b	$2E
  32730  8e23		       2e		      .byte.b	$2E
  32731  8e24		       2e		      .byte.b	$2E
  32732  8e25		       2e		      .byte.b	$2E
  32733  8e26		       c6		      .byte.b	$C6
  32734  8e27		       c6		      .byte.b	$C6
  32735  8e28		       44		      .byte.b	$44
  32736  8e29		       44		      .byte.b	$44
  32737  8e2a		       2e		      .byte.b	$2E
  32738  8e2b		       1e		      .byte.b	$1E
  32739  8e2c		       1e		      .byte.b	$1E
  32740  8e2d				  -	      if	(<*) > (<(*+24))
  32741  8e2d				  -	      repeat	($100-<*)
  32742  8e2d				  -	      .byte	0
  32743  8e2d				  -	      repend
  32744  8e2d					      endif
  32745  8e2d				   playerL01292_1
  32746  8e2d		       1b		      .byte.b	%00011011
  32747  8e2e		       1b		      .byte.b	%00011011
  32748  8e2f		       1b		      .byte.b	%00011011
  32749  8e30		       36		      .byte.b	%00110110
  32750  8e31		       24		      .byte.b	%00100100
  32751  8e32		       3c		      .byte.b	%00111100
  32752  8e33		       39		      .byte.b	%00111001
  32753  8e34		       3b		      .byte.b	%00111011
  32754  8e35		       7b		      .byte.b	%01111011
  32755  8e36		       7b		      .byte.b	%01111011
  32756  8e37		       76		      .byte.b	%01110110
  32757  8e38		       76		      .byte.b	%01110110
  32758  8e39		       3c		      .byte.b	%00111100
  32759  8e3a		       14		      .byte.b	%00010100
  32760  8e3b		       3e		      .byte.b	%00111110
  32761  8e3c		       17		      .byte.b	%00010111
  32762  8e3d		       6f		      .byte.b	%01101111
  32763  8e3e		       7f		      .byte.b	%01111111
  32764  8e3f		       36		      .byte.b	%00110110
  32765  8e40		       15		      .byte.b	%00010101
  32766  8e41		       3b		      .byte.b	%00111011
  32767  8e42		       2b		      .byte.b	%00101011
  32768  8e43		       c0		      .byte.b	%11000000
  32769  8e44		       c0		      .byte.b	%11000000
  32770  8e45		       e0		      .byte.b	%11100000
  32771  8e46				  -	      if	(<*) > (<(*+20))
  32772  8e46				  -	      repeat	($100-<*)
  32773  8e46				  -	      .byte	0
  32774  8e46				  -	      repend
  32775  8e46					      endif
  32776  8e46				   playercolorL01294_1
  32777  8e46		       1a		      .byte.b	$1A
  32778  8e47		       1c		      .byte.b	$1C
  32779  8e48		       1e		      .byte.b	$1E
  32780  8e49		       0e		      .byte.b	$0E
  32781  8e4a		       c2		      .byte.b	$C2
  32782  8e4b		       c4		      .byte.b	$C4
  32783  8e4c		       c6		      .byte.b	$C6
  32784  8e4d		       c6		      .byte.b	$C6
  32785  8e4e		       c6		      .byte.b	$C6
  32786  8e4f		       c6		      .byte.b	$C6
  32787  8e50		       c8		      .byte.b	$C8
  32788  8e51		       c8		      .byte.b	$C8
  32789  8e52		       c6		      .byte.b	$C6
  32790  8e53		       c6		      .byte.b	$C6
  32791  8e54		       c6		      .byte.b	$C6
  32792  8e55		       c6		      .byte.b	$C6
  32793  8e56		       c4		      .byte.b	$C4
  32794  8e57		       c2		      .byte.b	$C2
  32795  8e58		       42		      .byte.b	$42
  32796  8e59		       44		      .byte.b	$44
  32797  8e5a		       46		      .byte.b	$46
  32798  8e5b				  -	      if	(<*) > (<(*+20))
  32799  8e5b				  -	      repeat	($100-<*)
  32800  8e5b				  -	      .byte	0
  32801  8e5b				  -	      repend
  32802  8e5b					      endif
  32803  8e5b				   playerL01296_1
  32804  8e5b		       2b		      .byte.b	%00101011
  32805  8e5c		       36		      .byte.b	%00110110
  32806  8e5d		       14		      .byte.b	%00010100
  32807  8e5e		       1a		      .byte.b	%00011010
  32808  8e5f		       1c		      .byte.b	%00011100
  32809  8e60		       2a		      .byte.b	%00101010
  32810  8e61		       56		      .byte.b	%01010110
  32811  8e62		       55		      .byte.b	%01010101
  32812  8e63		       ab		      .byte.b	%10101011
  32813  8e64		       ab		      .byte.b	%10101011
  32814  8e65		       55		      .byte.b	%01010101
  32815  8e66		       55		      .byte.b	%01010101
  32816  8e67		       ab		      .byte.b	%10101011
  32817  8e68		       ab		      .byte.b	%10101011
  32818  8e69		       55		      .byte.b	%01010101
  32819  8e6a		       56		      .byte.b	%01010110
  32820  8e6b		       2a		      .byte.b	%00101010
  32821  8e6c		       1c		      .byte.b	%00011100
  32822  8e6d		       0f		      .byte.b	%00001111
  32823  8e6e		       06		      .byte.b	%00000110
  32824  8e6f		       0c		      .byte.b	%00001100
  32825  8e70				  -	      if	(<*) > (<(*+7))
  32826  8e70				  -	      repeat	($100-<*)
  32827  8e70				  -	      .byte	0
  32828  8e70				  -	      repend
  32829  8e70					      endif
  32830  8e70				   playercolorL01298_1
  32831  8e70		       2e		      .byte.b	$2E
  32832  8e71		       2e		      .byte.b	$2E
  32833  8e72		       c8		      .byte.b	$C8
  32834  8e73		       ca		      .byte.b	$CA
  32835  8e74		       ca		      .byte.b	$CA
  32836  8e75		       c8		      .byte.b	$C8
  32837  8e76		       c8		      .byte.b	$C8
  32838  8e77		       c6		      .byte.b	$C6
  32839  8e78				  -	      if	(<*) > (<(*+7))
  32840  8e78				  -	      repeat	($100-<*)
  32841  8e78				  -	      .byte	0
  32842  8e78				  -	      repend
  32843  8e78					      endif
  32844  8e78				   playerL01300_1
  32845  8e78		       24		      .byte.b	%00100100
  32846  8e79		       5a		      .byte.b	%01011010
  32847  8e7a		       bd		      .byte.b	%10111101
  32848  8e7b		       db		      .byte.b	%11011011
  32849  8e7c		       66		      .byte.b	%01100110
  32850  8e7d		       5a		      .byte.b	%01011010
  32851  8e7e		       3c		      .byte.b	%00111100
  32852  8e7f		       18		      .byte.b	%00011000
  32853  8e80				  -	      if	(<*) > (<(*+15))
  32854  8e80				  -	      repeat	($100-<*)
  32855  8e80				  -	      .byte	0
  32856  8e80				  -	      repend
  32857  8e80					      endif
  32858  8e80				   playercolorL01525_1
  32859  8e80		       0e		      .byte.b	$0E
  32860  8e81		       0c		      .byte.b	$0C
  32861  8e82		       0a		      .byte.b	$0A
  32862  8e83		       04		      .byte.b	$04
  32863  8e84		       06		      .byte.b	$06
  32864  8e85		       08		      .byte.b	$08
  32865  8e86		       08		      .byte.b	$08
  32866  8e87		       08		      .byte.b	$08
  32867  8e88		       08		      .byte.b	$08
  32868  8e89		       06		      .byte.b	$06
  32869  8e8a		       0a		      .byte.b	$0A
  32870  8e8b		       0e		      .byte.b	$0E
  32871  8e8c		       0e		      .byte.b	$0E
  32872  8e8d		       0a		      .byte.b	$0A
  32873  8e8e		       0c		      .byte.b	$0C
  32874  8e8f		       0e		      .byte.b	$0E
  32875  8e90				  -	      if	(<*) > (<(*+15))
  32876  8e90				  -	      repeat	($100-<*)
  32877  8e90				  -	      .byte	0
  32878  8e90				  -	      repend
  32879  8e90					      endif
  32880  8e90				   playerL01527_1
  32881  8e90		       db		      .byte.b	%11011011
  32882  8e91		       db		      .byte.b	%11011011
  32883  8e92		       81		      .byte.b	%10000001
  32884  8e93		       7e		      .byte.b	%01111110
  32885  8e94		       ff		      .byte.b	%11111111
  32886  8e95		       5a		      .byte.b	%01011010
  32887  8e96		       e7		      .byte.b	%11100111
  32888  8e97		       7e		      .byte.b	%01111110
  32889  8e98		       7e		      .byte.b	%01111110
  32890  8e99		       99		      .byte.b	%10011001
  32891  8e9a		       7e		      .byte.b	%01111110
  32892  8e9b		       ff		      .byte.b	%11111111
  32893  8e9c		       66		      .byte.b	%01100110
  32894  8e9d		       99		      .byte.b	%10011001
  32895  8e9e		       db		      .byte.b	%11011011
  32896  8e9f		       db		      .byte.b	%11011011
  32897  8ea0				  -	      if	(<*) > (<(*+15))
  32898  8ea0				  -	      repeat	($100-<*)
  32899  8ea0				  -	      .byte	0
  32900  8ea0				  -	      repend
  32901  8ea0					      endif
  32902  8ea0				   playerL01529_1
  32903  8ea0		       db		      .byte.b	%11011011
  32904  8ea1		       db		      .byte.b	%11011011
  32905  8ea2		       81		      .byte.b	%10000001
  32906  8ea3		       7e		      .byte.b	%01111110
  32907  8ea4		       bd		      .byte.b	%10111101
  32908  8ea5		       bd		      .byte.b	%10111101
  32909  8ea6		       c3		      .byte.b	%11000011
  32910  8ea7		       7e		      .byte.b	%01111110
  32911  8ea8		       5a		      .byte.b	%01011010
  32912  8ea9		       c3		      .byte.b	%11000011
  32913  8eaa		       18		      .byte.b	%00011000
  32914  8eab		       ff		      .byte.b	%11111111
  32915  8eac		       66		      .byte.b	%01100110
  32916  8ead		       99		      .byte.b	%10011001
  32917  8eae		       db		      .byte.b	%11011011
  32918  8eaf		       db		      .byte.b	%11011011
  32919  8eb0				  -	      if	(<*) > (<(*+23))
  32920  8eb0				  -	      repeat	($100-<*)
  32921  8eb0				  -	      .byte	0
  32922  8eb0				  -	      repend
  32923  8eb0					      endif
  32924  8eb0				   playercolorL01594_1
  32925  8eb0		       0c		      .byte.b	$0C
  32926  8eb1		       0c		      .byte.b	$0C
  32927  8eb2		       4a		      .byte.b	$4A
  32928  8eb3		       4a		      .byte.b	$4A
  32929  8eb4		       4a		      .byte.b	$4A
  32930  8eb5		       48		      .byte.b	$48
  32931  8eb6		       0c		      .byte.b	$0C
  32932  8eb7		       0c		      .byte.b	$0C
  32933  8eb8		       0a		      .byte.b	$0A
  32934  8eb9		       4a		      .byte.b	$4A
  32935  8eba		       4a		      .byte.b	$4A
  32936  8ebb		       48		      .byte.b	$48
  32937  8ebc		       28		      .byte.b	$28
  32938  8ebd		       3c		      .byte.b	$3C
  32939  8ebe		       3c		      .byte.b	$3C
  32940  8ebf		       3c		      .byte.b	$3C
  32941  8ec0		       3c		      .byte.b	$3C
  32942  8ec1		       3c		      .byte.b	$3C
  32943  8ec2		       3c		      .byte.b	$3C
  32944  8ec3		       2c		      .byte.b	$2C
  32945  8ec4		       2a		      .byte.b	$2A
  32946  8ec5		       28		      .byte.b	$28
  32947  8ec6		       1c		      .byte.b	$1C
  32948  8ec7		       1e		      .byte.b	$1E
  32949  8ec8				  -	      if	(<*) > (<(*+23))
  32950  8ec8				  -	      repeat	($100-<*)
  32951  8ec8				  -	      .byte	0
  32952  8ec8				  -	      repend
  32953  8ec8					      endif
  32954  8ec8				   playerL01596_1
  32955  8ec8		       ff		      .byte.b	%11111111
  32956  8ec9		       3c		      .byte.b	%00111100
  32957  8eca		       c3		      .byte.b	%11000011
  32958  8ecb		       ff		      .byte.b	%11111111
  32959  8ecc		       7e		      .byte.b	%01111110
  32960  8ecd		       7e		      .byte.b	%01111110
  32961  8ece		       b0		      .byte.b	%10110000
  32962  8ecf		       5c		      .byte.b	%01011100
  32963  8ed0		       0c		      .byte.b	%00001100
  32964  8ed1		       32		      .byte.b	%00110010
  32965  8ed2		       7e		      .byte.b	%01111110
  32966  8ed3		       3c		      .byte.b	%00111100
  32967  8ed4		       06		      .byte.b	%00000110
  32968  8ed5		       33		      .byte.b	%00110011
  32969  8ed6		       5b		      .byte.b	%01011011
  32970  8ed7		       7d		      .byte.b	%01111101
  32971  8ed8		       2d		      .byte.b	%00101101
  32972  8ed9		       2b		      .byte.b	%00101011
  32973  8eda		       5b		      .byte.b	%01011011
  32974  8edb		       a7		      .byte.b	%10100111
  32975  8edc		       ff		      .byte.b	%11111111
  32976  8edd		       7e		      .byte.b	%01111110
  32977  8ede		       6c		      .byte.b	%01101100
  32978  8edf		       54		      .byte.b	%01010100
  32979  8ee0				  -	      if	(<*) > (<(*+23))
  32980  8ee0				  -	      repeat	($100-<*)
  32981  8ee0				  -	      .byte	0
  32982  8ee0				  -	      repend
  32983  8ee0					      endif
  32984  8ee0				   playerL01598_1
  32985  8ee0		       ff		      .byte.b	%11111111
  32986  8ee1		       3c		      .byte.b	%00111100
  32987  8ee2		       c3		      .byte.b	%11000011
  32988  8ee3		       ff		      .byte.b	%11111111
  32989  8ee4		       7e		      .byte.b	%01111110
  32990  8ee5		       7e		      .byte.b	%01111110
  32991  8ee6		       00		      .byte.b	%00000000
  32992  8ee7		       5c		      .byte.b	%01011100
  32993  8ee8		       ac		      .byte.b	%10101100
  32994  8ee9		       32		      .byte.b	%00110010
  32995  8eea		       7e		      .byte.b	%01111110
  32996  8eeb		       3c		      .byte.b	%00111100
  32997  8eec		       06		      .byte.b	%00000110
  32998  8eed		       3b		      .byte.b	%00111011
  32999  8eee		       7b		      .byte.b	%01111011
  33000  8eef		       75		      .byte.b	%01110101
  33001  8ef0		       25		      .byte.b	%00100101
  33002  8ef1		       5b		      .byte.b	%01011011
  33003  8ef2		       a7		      .byte.b	%10100111
  33004  8ef3		       ff		      .byte.b	%11111111
  33005  8ef4		       ff		      .byte.b	%11111111
  33006  8ef5		       7e		      .byte.b	%01111110
  33007  8ef6		       6c		      .byte.b	%01101100
  33008  8ef7		       54		      .byte.b	%01010100
  33009  8ef8					      if	ECHOFIRST
      124 bytes of ROM space left in bank 8
  33010  8ef8					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 8")
  33011  8ef8					      endif
  33012  8ef8		       00 01	   ECHOFIRST  =	1
  33013  8ef8
  33014  8ef8
  33015  8ef8							; Provided under the CC0 license. See the included LICENSE.txt for details.
  33016  8ef8
  33017  8ef8							; feel free to modify the score graphics - just keep each digit 8 high
  33018  8ef8							; and keep the conditional compilation stuff intact
  33019  8ef8				  -	      ifconst	ROM2k
  33020  8ef8				  -	      ORG	$F7AC-8
  33021  8ef8					      else
  33022  8ef8					      ifconst	bankswitch
  33023  8ef8				  -	      if	bankswitch == 8
  33024  8ef8				  -	      ORG	$2F94-bscode_length
  33025  8ef8				  -	      RORG	$FF94-bscode_length
  33026  8ef8					      endif
  33027  8ef8				  -	      if	bankswitch == 16
  33028  8ef8				  -	      ORG	$4F94-bscode_length
  33029  8ef8				  -	      RORG	$FF94-bscode_length
  33030  8ef8					      endif
  33031  8ef8					      if	bankswitch == 32
  33032  8f74					      ORG	$8F94-bscode_length
  33033  8f74					      RORG	$FF94-bscode_length
  33034  8f74					      endif
  33035  8f74				  -	      if	bankswitch == 64
  33036  8f74				  -	      ORG	$10F80-bscode_length
  33037  8f74				  -	      RORG	$1FF80-bscode_length
  33038  8f74					      endif
  33039  8f74				  -	      else
  33040  8f74				  -	      ORG	$FF9C
  33041  8f74					      endif
  33042  8f74					      endif
  33043  8f74
  33044  8f74							; font equates
  33045  8f74		       00 01	   .21stcentury =	1
  33046  8f74		       00 02	   alarmclock =	2
  33047  8f74		       00 03	   handwritten =	3
  33048  8f74		       00 04	   interrupted =	4
  33049  8f74		       00 05	   retroputer =	5
  33050  8f74		       00 06	   whimsey    =	6
  33051  8f74		       00 07	   tiny       =	7
  33052  8f74		       00 08	   hex	      =	8
  33053  8f74
  33054  8f74				  -	      ifconst	font
  33055  8f74				  -	      if	font == hex
  33056  8f74				  -	      ORG	. - 48
  33057  8f74				  -	      endif
  33058  8f74					      endif
  33059  8f74
  33060  8f74				   scoretable
  33061  8f74
  33062  8f74				  -	      ifconst	font
  33063  8f74				  -	      if	font == .21stcentury
  33064  8f74				  -	      include	"score_graphics.asm.21stcentury"
  33065  8f74				  -	      endif
  33066  8f74				  -	      if	font == alarmclock
  33067  8f74				  -	      include	"score_graphics.asm.alarmclock"
  33068  8f74				  -	      endif
  33069  8f74				  -	      if	font == handwritten
  33070  8f74				  -	      include	"score_graphics.asm.handwritten"
  33071  8f74				  -	      endif
  33072  8f74				  -	      if	font == interrupted
  33073  8f74				  -	      include	"score_graphics.asm.interrupted"
  33074  8f74				  -	      endif
  33075  8f74				  -	      if	font == retroputer
  33076  8f74				  -	      include	"score_graphics.asm.retroputer"
  33077  8f74				  -	      endif
  33078  8f74				  -	      if	font == whimsey
  33079  8f74				  -	      include	"score_graphics.asm.whimsey"
  33080  8f74				  -	      endif
  33081  8f74				  -	      if	font == tiny
  33082  8f74				  -	      include	"score_graphics.asm.tiny"
  33083  8f74				  -	      endif
  33084  8f74				  -	      if	font == hex
  33085  8f74				  -	      include	"score_graphics.asm.hex"
  33086  8f74				  -	      endif
  33087  8f74					      else		; default font
  33088  8f74
  33089  8f74		       3c		      .byte.b	%00111100
  33090  8f75		       66		      .byte.b	%01100110
  33091  8f76		       66		      .byte.b	%01100110
  33092  8f77		       66		      .byte.b	%01100110
  33093  8f78		       66		      .byte.b	%01100110
  33094  8f79		       66		      .byte.b	%01100110
  33095  8f7a		       66		      .byte.b	%01100110
  33096  8f7b		       3c		      .byte.b	%00111100
  33097  8f7c
  33098  8f7c		       7e		      .byte.b	%01111110
  33099  8f7d		       18		      .byte.b	%00011000
  33100  8f7e		       18		      .byte.b	%00011000
  33101  8f7f		       18		      .byte.b	%00011000
  33102  8f80		       18		      .byte.b	%00011000
  33103  8f81		       38		      .byte.b	%00111000
  33104  8f82		       18		      .byte.b	%00011000
  33105  8f83		       08		      .byte.b	%00001000
  33106  8f84
  33107  8f84		       7e		      .byte.b	%01111110
  33108  8f85		       60		      .byte.b	%01100000
  33109  8f86		       60		      .byte.b	%01100000
  33110  8f87		       3c		      .byte.b	%00111100
  33111  8f88		       06		      .byte.b	%00000110
  33112  8f89		       06		      .byte.b	%00000110
  33113  8f8a		       46		      .byte.b	%01000110
  33114  8f8b		       3c		      .byte.b	%00111100
  33115  8f8c
  33116  8f8c		       3c		      .byte.b	%00111100
  33117  8f8d		       46		      .byte.b	%01000110
  33118  8f8e		       06		      .byte.b	%00000110
  33119  8f8f		       06		      .byte.b	%00000110
  33120  8f90		       1c		      .byte.b	%00011100
  33121  8f91		       06		      .byte.b	%00000110
  33122  8f92		       46		      .byte.b	%01000110
  33123  8f93		       3c		      .byte.b	%00111100
  33124  8f94
  33125  8f94		       0c		      .byte.b	%00001100
  33126  8f95		       0c		      .byte.b	%00001100
  33127  8f96		       7e		      .byte.b	%01111110
  33128  8f97		       4c		      .byte.b	%01001100
  33129  8f98		       4c		      .byte.b	%01001100
  33130  8f99		       2c		      .byte.b	%00101100
  33131  8f9a		       1c		      .byte.b	%00011100
  33132  8f9b		       0c		      .byte.b	%00001100
  33133  8f9c
  33134  8f9c		       3c		      .byte.b	%00111100
  33135  8f9d		       46		      .byte.b	%01000110
  33136  8f9e		       06		      .byte.b	%00000110
  33137  8f9f		       06		      .byte.b	%00000110
  33138  8fa0		       3c		      .byte.b	%00111100
  33139  8fa1		       60		      .byte.b	%01100000
  33140  8fa2		       60		      .byte.b	%01100000
  33141  8fa3		       7e		      .byte.b	%01111110
  33142  8fa4
  33143  8fa4		       3c		      .byte.b	%00111100
  33144  8fa5		       66		      .byte.b	%01100110
  33145  8fa6		       66		      .byte.b	%01100110
  33146  8fa7		       66		      .byte.b	%01100110
  33147  8fa8		       7c		      .byte.b	%01111100
  33148  8fa9		       60		      .byte.b	%01100000
  33149  8faa		       62		      .byte.b	%01100010
  33150  8fab		       3c		      .byte.b	%00111100
  33151  8fac
  33152  8fac		       30		      .byte.b	%00110000
  33153  8fad		       30		      .byte.b	%00110000
  33154  8fae		       30		      .byte.b	%00110000
  33155  8faf		       18		      .byte.b	%00011000
  33156  8fb0		       0c		      .byte.b	%00001100
  33157  8fb1		       06		      .byte.b	%00000110
  33158  8fb2		       42		      .byte.b	%01000010
  33159  8fb3		       3e		      .byte.b	%00111110
  33160  8fb4
  33161  8fb4		       3c		      .byte.b	%00111100
  33162  8fb5		       66		      .byte.b	%01100110
  33163  8fb6		       66		      .byte.b	%01100110
  33164  8fb7		       66		      .byte.b	%01100110
  33165  8fb8		       3c		      .byte.b	%00111100
  33166  8fb9		       66		      .byte.b	%01100110
  33167  8fba		       66		      .byte.b	%01100110
  33168  8fbb		       3c		      .byte.b	%00111100
  33169  8fbc
  33170  8fbc		       3c		      .byte.b	%00111100
  33171  8fbd		       46		      .byte.b	%01000110
  33172  8fbe		       06		      .byte.b	%00000110
  33173  8fbf		       3e		      .byte.b	%00111110
  33174  8fc0		       66		      .byte.b	%01100110
  33175  8fc1		       66		      .byte.b	%01100110
  33176  8fc2		       66		      .byte.b	%01100110
  33177  8fc3		       3c		      .byte.b	%00111100
  33178  8fc4
  33179  8fc4					      ifnconst	DPC_kernel_options
  33180  8fc4
  33181  8fc4		       00		      .byte.b	%00000000
  33182  8fc5		       00		      .byte.b	%00000000
  33183  8fc6		       00		      .byte.b	%00000000
  33184  8fc7		       00		      .byte.b	%00000000
  33185  8fc8		       00		      .byte.b	%00000000
  33186  8fc9		       00		      .byte.b	%00000000
  33187  8fca		       00		      .byte.b	%00000000
  33188  8fcb		       00		      .byte.b	%00000000
  33189  8fcc
  33190  8fcc					      endif
  33191  8fcc
  33192  8fcc					      endif
  33193  8fcc
  33194  8fcc				  -	      ifconst	ROM2k
  33195  8fcc				  -	      ORG	$F7FC
  33196  8fcc					      else
  33197  8fcc					      ifconst	bankswitch
  33198  8fcc				  -	      if	bankswitch == 8
  33199  8fcc				  -	      ORG	$2FF4-bscode_length
  33200  8fcc				  -	      RORG	$FFF4-bscode_length
  33201  8fcc					      endif
  33202  8fcc				  -	      if	bankswitch == 16
  33203  8fcc				  -	      ORG	$4FF4-bscode_length
  33204  8fcc				  -	      RORG	$FFF4-bscode_length
  33205  8fcc					      endif
  33206  8fcc					      if	bankswitch == 32
  33207  8fd4					      ORG	$8FF4-bscode_length
  33208  8fd4					      RORG	$FFF4-bscode_length
  33209  8fd4					      endif
  33210  8fd4				  -	      if	bankswitch == 64
  33211  8fd4				  -	      ORG	$10FE0-bscode_length
  33212  8fd4				  -	      RORG	$1FFE0-bscode_length
  33213  8fd4					      endif
  33214  8fd4				  -	      else
  33215  8fd4				  -	      ORG	$FFFC
  33216  8fd4					      endif
  33217  8fd4					      endif
  33218  8fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  33219  8fd4
  33220  8fd4							; every bank has this stuff at the same place
  33221  8fd4							; this code can switch to/from any bank at any entry point
  33222  8fd4							; and can preserve register values
  33223  8fd4							; note: lines not starting with a space are not placed in all banks
  33224  8fd4							;
  33225  8fd4							; line below tells the compiler how long this is - do not remove
  33226  8fd4							;size=32
  33227  8fd4
  33228  8fd4				   begin_bscode
  33229  8fd4		       a2 ff		      ldx	#$ff
  33230  8fd6				  -	      ifconst	FASTFETCH	; using DPC+
  33231  8fd6				  -	      stx	FASTFETCH
  33232  8fd6					      endif
  33233  8fd6		       9a		      txs
  33234  8fd7				  -	      if	bankswitch == 64
  33235  8fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  33236  8fd7					      else
  33237  8fd7		       a9 f2		      lda	#>(start-1)
  33238  8fd9					      endif
  33239  8fd9		       48		      pha
  33240  8fda		       a9 51		      lda	#<(start-1)
  33241  8fdc		       48		      pha
  33242  8fdd
  33243  8fdd				   BS_return
  33244  8fdd		       48		      pha
  33245  8fde		       8a		      txa
  33246  8fdf		       48		      pha
  33247  8fe0		       ba		      tsx
  33248  8fe1
  33249  8fe1					      if	bankswitch != 64
  33250  8fe1		       b5 04		      lda	4,x	; get high byte of return address
  33251  8fe3
  33252  8fe3		       2a		      rol
  33253  8fe4		       2a		      rol
  33254  8fe5		       2a		      rol
  33255  8fe6		       2a		      rol
  33256  8fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  33257  8fe9		       aa		      tax
  33258  8fea		       e8		      inx
  33259  8feb				  -	      else
  33260  8feb				  -	      lda	4,x	; get high byte of return address
  33261  8feb				  -	      tay
  33262  8feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  33263  8feb				  -	      sta	4,x
  33264  8feb				  -	      tya
  33265  8feb				  -	      lsr
  33266  8feb				  -	      lsr
  33267  8feb				  -	      lsr
  33268  8feb				  -	      lsr
  33269  8feb				  -	      tax
  33270  8feb				  -	      inx
  33271  8feb					      endif
  33272  8feb
  33273  8feb				   BS_jsr
  33274  8feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  33275  8fee		       68		      pla
  33276  8fef		       aa		      tax
  33277  8ff0		       68		      pla
  33278  8ff1		       60		      rts
  33279  8ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  33280  8ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  33281  8ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  33282  8ff2					      endif
  33283  8ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
  33284  8ff2
  33285  8ff2					      ifconst	bankswitch
  33286  8ff2				  -	      if	bankswitch == 8
  33287  8ff2				  -	      ORG	$2FFC
  33288  8ff2				  -	      RORG	$FFFC
  33289  8ff2					      endif
  33290  8ff2				  -	      if	bankswitch == 16
  33291  8ff2				  -	      ORG	$4FFC
  33292  8ff2				  -	      RORG	$FFFC
  33293  8ff2					      endif
  33294  8ff2					      if	bankswitch == 32
  33295  8ffc					      ORG	$8FFC
  33296  8ffc					      RORG	$FFFC
  33297  8ffc					      endif
  33298  8ffc				  -	      if	bankswitch == 64
  33299  8ffc				  -	      ORG	$10FF0
  33300  8ffc				  -	      RORG	$1FFF0
  33301  8ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
  33302  8ffc				  -	      ORG	$10FF8
  33303  8ffc				  -	      RORG	$1FFF8
  33304  8ffc				  -	      ifconst	superchip
  33305  8ffc				  -	      .byte	"E","F","S","C"
  33306  8ffc				  -	      else
  33307  8ffc				  -	      .byte	"E","F","E","F"
  33308  8ffc				  -	      endif
  33309  8ffc				  -	      ORG	$10FFC
  33310  8ffc				  -	      RORG	$1FFFC
  33311  8ffc					      endif
  33312  8ffc				  -	      else
  33313  8ffc				  -	      ifconst	ROM2k
  33314  8ffc				  -	      ORG	$F7FC
  33315  8ffc				  -	      else
  33316  8ffc				  -	      ORG	$FFFC
  33317  8ffc				  -	      endif
  33318  8ffc					      endif
  33319  8ffc		       52 f2		      .word.w	(start & $ffff)
  33320  8ffe		       52 f2		      .word.w	(start & $ffff)

------- FILE e:\Documents\bB\demos\ex_karl_g_16x16_world_bankswitched.bas.asm LEVEL 1 PASS 2
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE e:\Documents\bB\demos\ex_karl_g_16x16_world_bankswitched.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE e:\Documents\bB\demos\ex_karl_g_16x16_world_bankswitched.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   _Data_Under_Foreground_Color_length =	.skipL0467-_Data_Under_Foreground_Color
      4  5000 ????
      5  5000 ????	       00 20	   _Data_Under_Background_Color_length =	.skipL0466-_Data_Under_Background_Color
      6  5000 ????
      7  5000 ????	       00 20	   _Data_Over_Foreground_Color_length =	.skipL0389-_Data_Over_Foreground_Color
      8  5000 ????
      9  5000 ????	       00 20	   _Data_Over_Background_Color_length =	.skipL0388-_Data_Over_Background_Color
     10  5000 ????
     11  5000 ????	       00 20	   bscode_length =	32
     12  5000 ????	       00 fe	   _FE	      =	$FE
     13  5000 ????
     14  5000 ????	       00 fc	   _FC	      =	$FC
     15  5000 ????
     16  5000 ????	       00 fa	   _FA	      =	$FA
     17  5000 ????
     18  5000 ????	       00 f8	   _F8	      =	$F8
     19  5000 ????
     20  5000 ????	       00 f6	   _F6	      =	$F6
     21  5000 ????
     22  5000 ????	       00 f4	   _F4	      =	$F4
     23  5000 ????
     24  5000 ????	       00 f2	   _F2	      =	$F2
     25  5000 ????
     26  5000 ????	       00 f0	   _F0	      =	$F0
     27  5000 ????
     28  5000 ????	       00 ee	   _EE	      =	$EE
     29  5000 ????
     30  5000 ????	       00 ec	   _EC	      =	$EC
     31  5000 ????
     32  5000 ????	       00 ea	   _EA	      =	$EA
     33  5000 ????
     34  5000 ????	       00 e8	   _E8	      =	$E8
     35  5000 ????
     36  5000 ????	       00 e6	   _E6	      =	$E6
     37  5000 ????
     38  5000 ????	       00 e4	   _E4	      =	$E4
     39  5000 ????
     40  5000 ????	       00 e2	   _E2	      =	$E2
     41  5000 ????
     42  5000 ????	       00 e0	   _E0	      =	$E0
     43  5000 ????
     44  5000 ????	       00 de	   _DE	      =	$DE
     45  5000 ????
     46  5000 ????	       00 dc	   _DC	      =	$DC
     47  5000 ????
     48  5000 ????	       00 da	   _DA	      =	$DA
     49  5000 ????
     50  5000 ????	       00 d8	   _D8	      =	$D8
     51  5000 ????
     52  5000 ????	       00 d6	   _D6	      =	$D6
     53  5000 ????
     54  5000 ????	       00 d4	   _D4	      =	$D4
     55  5000 ????
     56  5000 ????	       00 d2	   _D2	      =	$D2
     57  5000 ????
     58  5000 ????	       00 d0	   _D0	      =	$D0
     59  5000 ????
     60  5000 ????	       00 ce	   _CE	      =	$CE
     61  5000 ????
     62  5000 ????	       00 cc	   _CC	      =	$CC
     63  5000 ????
     64  5000 ????	       00 ca	   _CA	      =	$CA
     65  5000 ????
     66  5000 ????	       00 c8	   _C8	      =	$C8
     67  5000 ????
     68  5000 ????	       00 c6	   _C6	      =	$C6
     69  5000 ????
     70  5000 ????	       00 c4	   _C4	      =	$C4
     71  5000 ????
     72  5000 ????	       00 c2	   _C2	      =	$C2
     73  5000 ????
     74  5000 ????	       00 c0	   _C0	      =	$C0
     75  5000 ????
     76  5000 ????	       00 be	   _BE	      =	$BE
     77  5000 ????
     78  5000 ????	       00 bc	   _BC	      =	$BC
     79  5000 ????
     80  5000 ????	       00 ba	   _BA	      =	$BA
     81  5000 ????
     82  5000 ????	       00 b8	   _B8	      =	$B8
     83  5000 ????
     84  5000 ????	       00 b6	   _B6	      =	$B6
     85  5000 ????
     86  5000 ????	       00 b4	   _B4	      =	$B4
     87  5000 ????
     88  5000 ????	       00 b2	   _B2	      =	$B2
     89  5000 ????
     90  5000 ????	       00 b0	   _B0	      =	$B0
     91  5000 ????
     92  5000 ????	       00 ae	   _AE	      =	$AE
     93  5000 ????
     94  5000 ????	       00 ac	   _AC	      =	$AC
     95  5000 ????
     96  5000 ????	       00 aa	   _AA	      =	$AA
     97  5000 ????
     98  5000 ????	       00 a8	   _A8	      =	$A8
     99  5000 ????
    100  5000 ????	       00 a6	   _A6	      =	$A6
    101  5000 ????
    102  5000 ????	       00 a4	   _A4	      =	$A4
    103  5000 ????
    104  5000 ????	       00 a2	   _A2	      =	$A2
    105  5000 ????
    106  5000 ????	       00 a0	   _A0	      =	$A0
    107  5000 ????
    108  5000 ????	       00 9e	   _9E	      =	$9E
    109  5000 ????
    110  5000 ????	       00 9c	   _9C	      =	$9C
    111  5000 ????
    112  5000 ????	       00 9a	   _9A	      =	$9A
    113  5000 ????
    114  5000 ????	       00 98	   _98	      =	$98
    115  5000 ????
    116  5000 ????	       00 96	   _96	      =	$96
    117  5000 ????
    118  5000 ????	       00 94	   _94	      =	$94
    119  5000 ????
    120  5000 ????	       00 92	   _92	      =	$92
    121  5000 ????
    122  5000 ????	       00 90	   _90	      =	$90
    123  5000 ????
    124  5000 ????	       00 8e	   _8E	      =	$8E
    125  5000 ????
    126  5000 ????	       00 8c	   _8C	      =	$8C
    127  5000 ????
    128  5000 ????	       00 8a	   _8A	      =	$8A
    129  5000 ????
    130  5000 ????	       00 88	   _88	      =	$88
    131  5000 ????
    132  5000 ????	       00 86	   _86	      =	$86
    133  5000 ????
    134  5000 ????	       00 84	   _84	      =	$84
    135  5000 ????
    136  5000 ????	       00 82	   _82	      =	$82
    137  5000 ????
    138  5000 ????	       00 80	   _80	      =	$80
    139  5000 ????
    140  5000 ????	       00 7e	   _7E	      =	$7E
    141  5000 ????
    142  5000 ????	       00 7c	   _7C	      =	$7C
    143  5000 ????
    144  5000 ????	       00 7a	   _7A	      =	$7A
    145  5000 ????
    146  5000 ????	       00 78	   _78	      =	$78
    147  5000 ????
    148  5000 ????	       00 76	   _76	      =	$76
    149  5000 ????
    150  5000 ????	       00 74	   _74	      =	$74
    151  5000 ????
    152  5000 ????	       00 72	   _72	      =	$72
    153  5000 ????
    154  5000 ????	       00 70	   _70	      =	$70
    155  5000 ????
    156  5000 ????	       00 6e	   _6E	      =	$6E
    157  5000 ????
    158  5000 ????	       00 6c	   _6C	      =	$6C
    159  5000 ????
    160  5000 ????	       00 6a	   _6A	      =	$6A
    161  5000 ????
    162  5000 ????	       00 68	   _68	      =	$68
    163  5000 ????
    164  5000 ????	       00 66	   _66	      =	$66
    165  5000 ????
    166  5000 ????	       00 64	   _64	      =	$64
    167  5000 ????
    168  5000 ????	       00 62	   _62	      =	$62
    169  5000 ????
    170  5000 ????	       00 60	   _60	      =	$60
    171  5000 ????
    172  5000 ????	       00 5e	   _5E	      =	$5E
    173  5000 ????
    174  5000 ????	       00 5c	   _5C	      =	$5C
    175  5000 ????
    176  5000 ????	       00 5a	   _5A	      =	$5A
    177  5000 ????
    178  5000 ????	       00 58	   _58	      =	$58
    179  5000 ????
    180  5000 ????	       00 56	   _56	      =	$56
    181  5000 ????
    182  5000 ????	       00 54	   _54	      =	$54
    183  5000 ????
    184  5000 ????	       00 52	   _52	      =	$52
    185  5000 ????
    186  5000 ????	       00 50	   _50	      =	$50
    187  5000 ????
    188  5000 ????	       00 4e	   _4E	      =	$4E
    189  5000 ????
    190  5000 ????	       00 4c	   _4C	      =	$4C
    191  5000 ????
    192  5000 ????	       00 4a	   _4A	      =	$4A
    193  5000 ????
    194  5000 ????	       00 48	   _48	      =	$48
    195  5000 ????
    196  5000 ????	       00 46	   _46	      =	$46
    197  5000 ????
    198  5000 ????	       00 44	   _44	      =	$44
    199  5000 ????
    200  5000 ????	       00 42	   _42	      =	$42
    201  5000 ????
    202  5000 ????	       00 40	   _40	      =	$40
    203  5000 ????
    204  5000 ????	       00 3e	   _3E	      =	$3E
    205  5000 ????
    206  5000 ????	       00 3c	   _3C	      =	$3C
    207  5000 ????
    208  5000 ????	       00 3a	   _3A	      =	$3A
    209  5000 ????
    210  5000 ????	       00 38	   _38	      =	$38
    211  5000 ????
    212  5000 ????	       00 36	   _36	      =	$36
    213  5000 ????
    214  5000 ????	       00 34	   _34	      =	$34
    215  5000 ????
    216  5000 ????	       00 32	   _32	      =	$32
    217  5000 ????
    218  5000 ????	       00 30	   _30	      =	$30
    219  5000 ????
    220  5000 ????	       00 2e	   _2E	      =	$2E
    221  5000 ????
    222  5000 ????	       00 2c	   _2C	      =	$2C
    223  5000 ????
    224  5000 ????	       00 2a	   _2A	      =	$2A
    225  5000 ????
    226  5000 ????	       00 28	   _28	      =	$28
    227  5000 ????
    228  5000 ????	       00 26	   _26	      =	$26
    229  5000 ????
    230  5000 ????	       00 24	   _24	      =	$24
    231  5000 ????
    232  5000 ????	       00 22	   _22	      =	$22
    233  5000 ????
    234  5000 ????	       00 20	   _20	      =	$20
    235  5000 ????
    236  5000 ????	       00 1e	   _1E	      =	$1E
    237  5000 ????
    238  5000 ????	       00 1c	   _1C	      =	$1C
    239  5000 ????
    240  5000 ????	       00 1a	   _1A	      =	$1A
    241  5000 ????
    242  5000 ????	       00 18	   _18	      =	$18
    243  5000 ????
    244  5000 ????	       00 16	   _16	      =	$16
    245  5000 ????
    246  5000 ????	       00 14	   _14	      =	$14
    247  5000 ????
    248  5000 ????	       00 12	   _12	      =	$12
    249  5000 ????
    250  5000 ????	       00 10	   _10	      =	$10
    251  5000 ????
    252  5000 ????	       00 0e	   _0E	      =	$0E
    253  5000 ????
    254  5000 ????	       00 0c	   _0C	      =	$0C
    255  5000 ????
    256  5000 ????	       00 0a	   _0A	      =	$0A
    257  5000 ????
    258  5000 ????	       00 08	   _08	      =	$08
    259  5000 ????
    260  5000 ????	       00 06	   _06	      =	$06
    261  5000 ????
    262  5000 ????	       00 04	   _04	      =	$04
    263  5000 ????
    264  5000 ????	       00 02	   _02	      =	$02
    265  5000 ????
    266  5000 ????	       00 00	   _00	      =	$00
    267  5000 ????
    268  5000 ????	       00 0f	   _c_World_Limit_Right =	15
    269  5000 ????
    270  5000 ????	       00 00	   _c_World_Limit_Left =	0
    271  5000 ????
    272  5000 ????	       00 0f	   _c_World_Limit_Bottom =	15
    273  5000 ????
    274  5000 ????	       00 00	   _c_World_Limit_Top =	0
    275  5000 ????
    276  5000 ????	       00 99	   _c_Edge_Right =	153
    277  5000 ????
    278  5000 ????	       00 02	   _c_Edge_Left =	2
    279  5000 ????
    280  5000 ????	       00 58	   _c_Edge_Bottom =	88
    281  5000 ????
    282  5000 ????	       00 0a	   _c_Edge_Top =	10
    283  5000 ????
    284  5000 ????	       00 95	   _sc3       =	score + 2
    285  5000 ????
    286  5000 ????	       00 94	   _sc2       =	score + 1
    287  5000 ????
    288  5000 ????	       00 93	   _sc1       =	score
    289  5000 ????
    290  5000 ????	       00 ed	   rand16     =	z
    291  5000 ????
    292  5000 ????	       00 ec	   _RoomRand  =	y
    293  5000 ????
    294  5000 ????	       00 86	   _P1_Up_Down =	player1y
    295  5000 ????	       00 81	   _P1_Left_Right =	player1x
    296  5000 ????	       00 da	   _Bit7_Over_Under =	g
    297  5000 ????
    298  5000 ????	       00 da	   _Bit6_LR_Joy_Movement =	g
    299  5000 ????
    300  5000 ????	       00 da	   _Bit5_UD_Joy_Movement =	g
    301  5000 ????
    302  5000 ????	       00 da	   _Bit4_Next_Room_Right =	g
    303  5000 ????
    304  5000 ????	       00 da	   _Bit3_Next_Room_Left =	g
    305  5000 ????
    306  5000 ????	       00 da	   _Bit2_Next_Room_Down =	g
    307  5000 ????
    308  5000 ????	       00 da	   _Bit1_Next_Room_Up =	g
    309  5000 ????
    310  5000 ????	       00 da	   _Bit0_Reset_Restrainer =	g
    311  5000 ????
    312  5000 ????	       00 da	   _BitOp_01  =	g
    313  5000 ????
    314  5000 ????	       00 d9	   _Frame_Counter =	f
    315  5000 ????
    316  5000 ????	       00 d8	   _Master_Counter =	e
    317  5000 ????
    318  5000 ????	       00 d7	   _Temp      =	d
    319  5000 ????
    320  5000 ????	       00 d6	   _TS_Slowdown =	c
    321  5000 ????
    322  5000 ????	       00 d6	   _CurrentScene =	c
    323  5000 ????
    324  5000 ????	       00 d5	   _YRoom     =	b
    325  5000 ????
    326  5000 ????	       00 d4	   _XRoom     =	a
    327  5000 ????
    328  5000 ????	       00 03	   bs_mask    =	3
    329  5000 ????	       00 10	   bankswitch =	16
    330  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    331  5000 ????	       00 01	   no_blank_lines =	1
    332  5000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????			  -	      ifconst	superchip
    199  5000 ????			  -playfieldbase =	$10D0
    200  5000 ????			  -	      include	superchip.h
    201  5000 ????				      else
    202  5000 ????	       00 a4	   playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       00 a4	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE e:\Documents\bB\demos\ex_karl_g_16x16_world_bankswitched.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   _Data_Under_Foreground_Color_length =	.skipL0467-_Data_Under_Foreground_Color
      4  5000 ????
      5  5000 ????	       00 20	   _Data_Under_Background_Color_length =	.skipL0466-_Data_Under_Background_Color
      6  5000 ????
      7  5000 ????	       00 20	   _Data_Over_Foreground_Color_length =	.skipL0389-_Data_Over_Foreground_Color
      8  5000 ????
      9  5000 ????	       00 20	   _Data_Over_Background_Color_length =	.skipL0388-_Data_Over_Background_Color
     10  5000 ????
     11  5000 ????	       00 20	   bscode_length =	32
     12  5000 ????	       00 fe	   _FE	      =	$FE
     13  5000 ????
     14  5000 ????	       00 fc	   _FC	      =	$FC
     15  5000 ????
     16  5000 ????	       00 fa	   _FA	      =	$FA
     17  5000 ????
     18  5000 ????	       00 f8	   _F8	      =	$F8
     19  5000 ????
     20  5000 ????	       00 f6	   _F6	      =	$F6
     21  5000 ????
     22  5000 ????	       00 f4	   _F4	      =	$F4
     23  5000 ????
     24  5000 ????	       00 f2	   _F2	      =	$F2
     25  5000 ????
     26  5000 ????	       00 f0	   _F0	      =	$F0
     27  5000 ????
     28  5000 ????	       00 ee	   _EE	      =	$EE
     29  5000 ????
     30  5000 ????	       00 ec	   _EC	      =	$EC
     31  5000 ????
     32  5000 ????	       00 ea	   _EA	      =	$EA
     33  5000 ????
     34  5000 ????	       00 e8	   _E8	      =	$E8
     35  5000 ????
     36  5000 ????	       00 e6	   _E6	      =	$E6
     37  5000 ????
     38  5000 ????	       00 e4	   _E4	      =	$E4
     39  5000 ????
     40  5000 ????	       00 e2	   _E2	      =	$E2
     41  5000 ????
     42  5000 ????	       00 e0	   _E0	      =	$E0
     43  5000 ????
     44  5000 ????	       00 de	   _DE	      =	$DE
     45  5000 ????
     46  5000 ????	       00 dc	   _DC	      =	$DC
     47  5000 ????
     48  5000 ????	       00 da	   _DA	      =	$DA
     49  5000 ????
     50  5000 ????	       00 d8	   _D8	      =	$D8
     51  5000 ????
     52  5000 ????	       00 d6	   _D6	      =	$D6
     53  5000 ????
     54  5000 ????	       00 d4	   _D4	      =	$D4
     55  5000 ????
     56  5000 ????	       00 d2	   _D2	      =	$D2
     57  5000 ????
     58  5000 ????	       00 d0	   _D0	      =	$D0
     59  5000 ????
     60  5000 ????	       00 ce	   _CE	      =	$CE
     61  5000 ????
     62  5000 ????	       00 cc	   _CC	      =	$CC
     63  5000 ????
     64  5000 ????	       00 ca	   _CA	      =	$CA
     65  5000 ????
     66  5000 ????	       00 c8	   _C8	      =	$C8
     67  5000 ????
     68  5000 ????	       00 c6	   _C6	      =	$C6
     69  5000 ????
     70  5000 ????	       00 c4	   _C4	      =	$C4
     71  5000 ????
     72  5000 ????	       00 c2	   _C2	      =	$C2
     73  5000 ????
     74  5000 ????	       00 c0	   _C0	      =	$C0
     75  5000 ????
     76  5000 ????	       00 be	   _BE	      =	$BE
     77  5000 ????
     78  5000 ????	       00 bc	   _BC	      =	$BC
     79  5000 ????
     80  5000 ????	       00 ba	   _BA	      =	$BA
     81  5000 ????
     82  5000 ????	       00 b8	   _B8	      =	$B8
     83  5000 ????
     84  5000 ????	       00 b6	   _B6	      =	$B6
     85  5000 ????
     86  5000 ????	       00 b4	   _B4	      =	$B4
     87  5000 ????
     88  5000 ????	       00 b2	   _B2	      =	$B2
     89  5000 ????
     90  5000 ????	       00 b0	   _B0	      =	$B0
     91  5000 ????
     92  5000 ????	       00 ae	   _AE	      =	$AE
     93  5000 ????
     94  5000 ????	       00 ac	   _AC	      =	$AC
     95  5000 ????
     96  5000 ????	       00 aa	   _AA	      =	$AA
     97  5000 ????
     98  5000 ????	       00 a8	   _A8	      =	$A8
     99  5000 ????
    100  5000 ????	       00 a6	   _A6	      =	$A6
    101  5000 ????
    102  5000 ????	       00 a4	   _A4	      =	$A4
    103  5000 ????
    104  5000 ????	       00 a2	   _A2	      =	$A2
    105  5000 ????
    106  5000 ????	       00 a0	   _A0	      =	$A0
    107  5000 ????
    108  5000 ????	       00 9e	   _9E	      =	$9E
    109  5000 ????
    110  5000 ????	       00 9c	   _9C	      =	$9C
    111  5000 ????
    112  5000 ????	       00 9a	   _9A	      =	$9A
    113  5000 ????
    114  5000 ????	       00 98	   _98	      =	$98
    115  5000 ????
    116  5000 ????	       00 96	   _96	      =	$96
    117  5000 ????
    118  5000 ????	       00 94	   _94	      =	$94
    119  5000 ????
    120  5000 ????	       00 92	   _92	      =	$92
    121  5000 ????
    122  5000 ????	       00 90	   _90	      =	$90
    123  5000 ????
    124  5000 ????	       00 8e	   _8E	      =	$8E
    125  5000 ????
    126  5000 ????	       00 8c	   _8C	      =	$8C
    127  5000 ????
    128  5000 ????	       00 8a	   _8A	      =	$8A
    129  5000 ????
    130  5000 ????	       00 88	   _88	      =	$88
    131  5000 ????
    132  5000 ????	       00 86	   _86	      =	$86
    133  5000 ????
    134  5000 ????	       00 84	   _84	      =	$84
    135  5000 ????
    136  5000 ????	       00 82	   _82	      =	$82
    137  5000 ????
    138  5000 ????	       00 80	   _80	      =	$80
    139  5000 ????
    140  5000 ????	       00 7e	   _7E	      =	$7E
    141  5000 ????
    142  5000 ????	       00 7c	   _7C	      =	$7C
    143  5000 ????
    144  5000 ????	       00 7a	   _7A	      =	$7A
    145  5000 ????
    146  5000 ????	       00 78	   _78	      =	$78
    147  5000 ????
    148  5000 ????	       00 76	   _76	      =	$76
    149  5000 ????
    150  5000 ????	       00 74	   _74	      =	$74
    151  5000 ????
    152  5000 ????	       00 72	   _72	      =	$72
    153  5000 ????
    154  5000 ????	       00 70	   _70	      =	$70
    155  5000 ????
    156  5000 ????	       00 6e	   _6E	      =	$6E
    157  5000 ????
    158  5000 ????	       00 6c	   _6C	      =	$6C
    159  5000 ????
    160  5000 ????	       00 6a	   _6A	      =	$6A
    161  5000 ????
    162  5000 ????	       00 68	   _68	      =	$68
    163  5000 ????
    164  5000 ????	       00 66	   _66	      =	$66
    165  5000 ????
    166  5000 ????	       00 64	   _64	      =	$64
    167  5000 ????
    168  5000 ????	       00 62	   _62	      =	$62
    169  5000 ????
    170  5000 ????	       00 60	   _60	      =	$60
    171  5000 ????
    172  5000 ????	       00 5e	   _5E	      =	$5E
    173  5000 ????
    174  5000 ????	       00 5c	   _5C	      =	$5C
    175  5000 ????
    176  5000 ????	       00 5a	   _5A	      =	$5A
    177  5000 ????
    178  5000 ????	       00 58	   _58	      =	$58
    179  5000 ????
    180  5000 ????	       00 56	   _56	      =	$56
    181  5000 ????
    182  5000 ????	       00 54	   _54	      =	$54
    183  5000 ????
    184  5000 ????	       00 52	   _52	      =	$52
    185  5000 ????
    186  5000 ????	       00 50	   _50	      =	$50
    187  5000 ????
    188  5000 ????	       00 4e	   _4E	      =	$4E
    189  5000 ????
    190  5000 ????	       00 4c	   _4C	      =	$4C
    191  5000 ????
    192  5000 ????	       00 4a	   _4A	      =	$4A
    193  5000 ????
    194  5000 ????	       00 48	   _48	      =	$48
    195  5000 ????
    196  5000 ????	       00 46	   _46	      =	$46
    197  5000 ????
    198  5000 ????	       00 44	   _44	      =	$44
    199  5000 ????
    200  5000 ????	       00 42	   _42	      =	$42
    201  5000 ????
    202  5000 ????	       00 40	   _40	      =	$40
    203  5000 ????
    204  5000 ????	       00 3e	   _3E	      =	$3E
    205  5000 ????
    206  5000 ????	       00 3c	   _3C	      =	$3C
    207  5000 ????
    208  5000 ????	       00 3a	   _3A	      =	$3A
    209  5000 ????
    210  5000 ????	       00 38	   _38	      =	$38
    211  5000 ????
    212  5000 ????	       00 36	   _36	      =	$36
    213  5000 ????
    214  5000 ????	       00 34	   _34	      =	$34
    215  5000 ????
    216  5000 ????	       00 32	   _32	      =	$32
    217  5000 ????
    218  5000 ????	       00 30	   _30	      =	$30
    219  5000 ????
    220  5000 ????	       00 2e	   _2E	      =	$2E
    221  5000 ????
    222  5000 ????	       00 2c	   _2C	      =	$2C
    223  5000 ????
    224  5000 ????	       00 2a	   _2A	      =	$2A
    225  5000 ????
    226  5000 ????	       00 28	   _28	      =	$28
    227  5000 ????
    228  5000 ????	       00 26	   _26	      =	$26
    229  5000 ????
    230  5000 ????	       00 24	   _24	      =	$24
    231  5000 ????
    232  5000 ????	       00 22	   _22	      =	$22
    233  5000 ????
    234  5000 ????	       00 20	   _20	      =	$20
    235  5000 ????
    236  5000 ????	       00 1e	   _1E	      =	$1E
    237  5000 ????
    238  5000 ????	       00 1c	   _1C	      =	$1C
    239  5000 ????
    240  5000 ????	       00 1a	   _1A	      =	$1A
    241  5000 ????
    242  5000 ????	       00 18	   _18	      =	$18
    243  5000 ????
    244  5000 ????	       00 16	   _16	      =	$16
    245  5000 ????
    246  5000 ????	       00 14	   _14	      =	$14
    247  5000 ????
    248  5000 ????	       00 12	   _12	      =	$12
    249  5000 ????
    250  5000 ????	       00 10	   _10	      =	$10
    251  5000 ????
    252  5000 ????	       00 0e	   _0E	      =	$0E
    253  5000 ????
    254  5000 ????	       00 0c	   _0C	      =	$0C
    255  5000 ????
    256  5000 ????	       00 0a	   _0A	      =	$0A
    257  5000 ????
    258  5000 ????	       00 08	   _08	      =	$08
    259  5000 ????
    260  5000 ????	       00 06	   _06	      =	$06
    261  5000 ????
    262  5000 ????	       00 04	   _04	      =	$04
    263  5000 ????
    264  5000 ????	       00 02	   _02	      =	$02
    265  5000 ????
    266  5000 ????	       00 00	   _00	      =	$00
    267  5000 ????
    268  5000 ????	       00 0f	   _c_World_Limit_Right =	15
    269  5000 ????
    270  5000 ????	       00 00	   _c_World_Limit_Left =	0
    271  5000 ????
    272  5000 ????	       00 0f	   _c_World_Limit_Bottom =	15
    273  5000 ????
    274  5000 ????	       00 00	   _c_World_Limit_Top =	0
    275  5000 ????
    276  5000 ????	       00 99	   _c_Edge_Right =	153
    277  5000 ????
    278  5000 ????	       00 02	   _c_Edge_Left =	2
    279  5000 ????
    280  5000 ????	       00 58	   _c_Edge_Bottom =	88
    281  5000 ????
    282  5000 ????	       00 0a	   _c_Edge_Top =	10
    283  5000 ????
    284  5000 ????	       00 95	   _sc3       =	score + 2
    285  5000 ????
    286  5000 ????	       00 94	   _sc2       =	score + 1
    287  5000 ????
    288  5000 ????	       00 93	   _sc1       =	score
    289  5000 ????
    290  5000 ????	       00 ed	   rand16     =	z
    291  5000 ????
    292  5000 ????	       00 ec	   _RoomRand  =	y
    293  5000 ????
    294  5000 ????	       00 86	   _P1_Up_Down =	player1y
    295  5000 ????	       00 81	   _P1_Left_Right =	player1x
    296  5000 ????	       00 da	   _Bit7_Over_Under =	g
    297  5000 ????
    298  5000 ????	       00 da	   _Bit6_LR_Joy_Movement =	g
    299  5000 ????
    300  5000 ????	       00 da	   _Bit5_UD_Joy_Movement =	g
    301  5000 ????
    302  5000 ????	       00 da	   _Bit4_Next_Room_Right =	g
    303  5000 ????
    304  5000 ????	       00 da	   _Bit3_Next_Room_Left =	g
    305  5000 ????
    306  5000 ????	       00 da	   _Bit2_Next_Room_Down =	g
    307  5000 ????
    308  5000 ????	       00 da	   _Bit1_Next_Room_Up =	g
    309  5000 ????
    310  5000 ????	       00 da	   _Bit0_Reset_Restrainer =	g
    311  5000 ????
    312  5000 ????	       00 da	   _BitOp_01  =	g
    313  5000 ????
    314  5000 ????	       00 d9	   _Frame_Counter =	f
    315  5000 ????
    316  5000 ????	       00 d8	   _Master_Counter =	e
    317  5000 ????
    318  5000 ????	       00 d7	   _Temp      =	d
    319  5000 ????
    320  5000 ????	       00 d6	   _TS_Slowdown =	c
    321  5000 ????
    322  5000 ????	       00 d6	   _CurrentScene =	c
    323  5000 ????
    324  5000 ????	       00 d5	   _YRoom     =	b
    325  5000 ????
    326  5000 ????	       00 d4	   _XRoom     =	a
    327  5000 ????
    328  5000 ????	       00 03	   bs_mask    =	3
    329  5000 ????	       00 10	   bankswitch =	16
    330  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    331  5000 ????	       00 01	   no_blank_lines =	1
    332  5000 ????	       00 01	   player1colors =	1
------- FILE e:\Documents\bB\demos\ex_karl_g_16x16_world_bankswitched.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .
     39  1000							; 
     40  1000
     41  1000				   .
     42  1000							; 
     43  1000
     44  1000				   .
     45  1000							; 
     46  1000
     47  1000				   .
     48  1000							; 
     49  1000
     50  1000				   .
     51  1000							; 
     52  1000
     53  1000				   .
     54  1000							; 
     55  1000
     56  1000				   .
     57  1000							; 
     58  1000
     59  1000				   .
     60  1000							; 
     61  1000
     62  1000				   .
     63  1000							; 
     64  1000
     65  1000				   .
     66  1000							; 
     67  1000
     68  1000				   .
     69  1000							; 
     70  1000
     71  1000				   .
     72  1000							; 
     73  1000
     74  1000				   .
     75  1000							; 
     76  1000
     77  1000				   .
     78  1000							; 
     79  1000
     80  1000				   .
     81  1000							; 
     82  1000
     83  1000				   .
     84  1000							; 
     85  1000
     86  1000				   .
     87  1000							; 
     88  1000
     89  1000				   .
     90  1000							; 
     91  1000
     92  1000				   .
     93  1000							; 
     94  1000
     95  1000				   .
     96  1000							; 
     97  1000
     98  1000				   .
     99  1000							; 
    100  1000
    101  1000				   .
    102  1000							; 
    103  1000
    104  1000				   .
    105  1000							; 
    106  1000
    107  1000				   .
    108  1000							; 
    109  1000
    110  1000				   .
    111  1000							; 
    112  1000
    113  1000				   .
    114  1000							; 
    115  1000
    116  1000				   .
    117  1000							; 
    118  1000
    119  1000				   .
    120  1000							; 
    121  1000
    122  1000				   .
    123  1000							; 
    124  1000
    125  1000				   .
    126  1000							; 
    127  1000
    128  1000				   .
    129  1000							; 
    130  1000
    131  1000				   .
    132  1000							; 
    133  1000
    134  1000				   .
    135  1000							; 
    136  1000
    137  1000				   .
    138  1000							; 
    139  1000
    140  1000				   .
    141  1000							; 
    142  1000
    143  1000				   .
    144  1000							; 
    145  1000
    146  1000				   .
    147  1000							; 
    148  1000
    149  1000				   .
    150  1000							; 
    151  1000
    152  1000				   .
    153  1000							; 
    154  1000
    155  1000				   .
    156  1000							; 
    157  1000
    158  1000				   .
    159  1000							; 
    160  1000
    161  1000				   .
    162  1000							; 
    163  1000
    164  1000				   .
    165  1000							; 
    166  1000
    167  1000				   .
    168  1000							; 
    169  1000
    170  1000				   .
    171  1000							; 
    172  1000
    173  1000				   .
    174  1000							; 
    175  1000
    176  1000				   .L00 		;  set kernel_options player1colors no_blank_lines
    177  1000
    178  1000				   .
    179  1000							; 
    180  1000
    181  1000				   .
    182  1000							; 
    183  1000
    184  1000				   .
    185  1000							; 
    186  1000
    187  1000				   .
    188  1000							; 
    189  1000
    190  1000				   .
    191  1000							; 
    192  1000
    193  1000				   .
    194  1000							; 
    195  1000
    196  1000				   .
    197  1000							; 
    198  1000
    199  1000				   .L01 		;  set romsize 16k
    200  1000
    201  1000				   .
    202  1000							; 
    203  1000
    204  1000				   .
    205  1000							; 
    206  1000
    207  1000				   .
    208  1000							; 
    209  1000
    210  1000				   .
    211  1000							; 
    212  1000
    213  1000				   .
    214  1000							; 
    215  1000
    216  1000				   .
    217  1000							; 
    218  1000
    219  1000				   .
    220  1000							; 
    221  1000
    222  1000				   .
    223  1000							; 
    224  1000
    225  1000				   .L02 		;  set optimization inlinerand
    226  1000
    227  1000				   .
    228  1000							; 
    229  1000
    230  1000				   .
    231  1000							; 
    232  1000
    233  1000				   .
    234  1000							; 
    235  1000
    236  1000				   .
    237  1000							; 
    238  1000
    239  1000				   .
    240  1000							; 
    241  1000
    242  1000				   .
    243  1000							; 
    244  1000
    245  1000				   .
    246  1000							; 
    247  1000
    248  1000				   .
    249  1000							; 
    250  1000
    251  1000				   .
    252  1000							; 
    253  1000
    254  1000				   .
    255  1000							; 
    256  1000
    257  1000				   .
    258  1000							; 
    259  1000
    260  1000				   .
    261  1000							; 
    262  1000
    263  1000				   .
    264  1000							; 
    265  1000
    266  1000				   .
    267  1000							; 
    268  1000
    269  1000				   .
    270  1000							; 
    271  1000
    272  1000				   .
    273  1000							; 
    274  1000
    275  1000				   .
    276  1000							; 
    277  1000
    278  1000				   .
    279  1000							; 
    280  1000
    281  1000				   .
    282  1000							; 
    283  1000
    284  1000				   .
    285  1000							; 
    286  1000
    287  1000				   .
    288  1000							; 
    289  1000
    290  1000				   .
    291  1000							; 
    292  1000
    293  1000				   .
    294  1000							; 
    295  1000
    296  1000				   .
    297  1000							; 
    298  1000
    299  1000				   .
    300  1000							; 
    301  1000
    302  1000				   .
    303  1000							; 
    304  1000
    305  1000				   .
    306  1000							; 
    307  1000
    308  1000				   .
    309  1000							; 
    310  1000
    311  1000				   .
    312  1000							; 
    313  1000
    314  1000				   .L03 		;  dim _XRoom	=  a
    315  1000
    316  1000				   .L04 		;  dim _YRoom	=  b
    317  1000
    318  1000				   .
    319  1000							; 
    320  1000
    321  1000				   .
    322  1000							; 
    323  1000
    324  1000				   .
    325  1000							; 
    326  1000
    327  1000				   .
    328  1000							; 
    329  1000
    330  1000				   .L05 		;  dim _CurrentScene  =  c
    331  1000
    332  1000				   .
    333  1000							; 
    334  1000
    335  1000				   .
    336  1000							; 
    337  1000
    338  1000				   .
    339  1000							; 
    340  1000
    341  1000				   .
    342  1000							; 
    343  1000
    344  1000				   .L06 		;  dim _TS_Slowdown  =  c
    345  1000
    346  1000				   .
    347  1000							; 
    348  1000
    349  1000				   .
    350  1000							; 
    351  1000
    352  1000				   .
    353  1000							; 
    354  1000
    355  1000				   .
    356  1000							; 
    357  1000
    358  1000				   .L07 		;  dim _Temp  =  d
    359  1000
    360  1000				   .
    361  1000							; 
    362  1000
    363  1000				   .
    364  1000							; 
    365  1000
    366  1000				   .
    367  1000							; 
    368  1000
    369  1000				   .
    370  1000							; 
    371  1000
    372  1000				   .
    373  1000							; 
    374  1000
    375  1000				   .
    376  1000							; 
    377  1000
    378  1000				   .L08 		;  dim _Master_Counter  =  e
    379  1000
    380  1000				   .L09 		;  dim _Frame_Counter	=  f
    381  1000
    382  1000				   .
    383  1000							; 
    384  1000
    385  1000				   .
    386  1000							; 
    387  1000
    388  1000				   .
    389  1000							; 
    390  1000
    391  1000				   .
    392  1000							; 
    393  1000
    394  1000				   .
    395  1000							; 
    396  1000
    397  1000				   .L010		;  dim _BitOp_01  =  g
    398  1000
    399  1000				   .L011		;  dim _Bit0_Reset_Restrainer	=  g
    400  1000
    401  1000				   .L012		;  dim _Bit1_Next_Room_Up  =  g
    402  1000
    403  1000				   .L013		;  dim _Bit2_Next_Room_Down  =  g
    404  1000
    405  1000				   .L014		;  dim _Bit3_Next_Room_Left  =  g
    406  1000
    407  1000				   .L015		;  dim _Bit4_Next_Room_Right  =  g
    408  1000
    409  1000				   .L016		;  dim _Bit5_UD_Joy_Movement  =  g
    410  1000
    411  1000				   .L017		;  dim _Bit6_LR_Joy_Movement  =  g
    412  1000
    413  1000				   .L018		;  dim _Bit7_Over_Under  =  g
    414  1000
    415  1000				   .
    416  1000							; 
    417  1000
    418  1000				   .
    419  1000							; 
    420  1000
    421  1000				   .
    422  1000							; 
    423  1000
    424  1000				   .
    425  1000							; 
    426  1000
    427  1000				   .L019		;  dim _P1_Left_Right	=  player1x.h
    428  1000
    429  1000				   .
    430  1000							; 
    431  1000
    432  1000				   .
    433  1000							; 
    434  1000
    435  1000				   .
    436  1000							; 
    437  1000
    438  1000				   .
    439  1000							; 
    440  1000
    441  1000				   .L020		;  dim _P1_Up_Down  =	player1y.i
    442  1000
    443  1000				   .
    444  1000							; 
    445  1000
    446  1000				   .
    447  1000							; 
    448  1000
    449  1000				   .
    450  1000							; 
    451  1000
    452  1000				   .
    453  1000							; 
    454  1000
    455  1000				   .L021		;  dim _RoomRand  =  y
    456  1000
    457  1000				   .
    458  1000							; 
    459  1000
    460  1000				   .
    461  1000							; 
    462  1000
    463  1000				   .
    464  1000							; 
    465  1000
    466  1000				   .
    467  1000							; 
    468  1000
    469  1000				   .L022		;  dim rand16	=  z
    470  1000
    471  1000				   .
    472  1000							; 
    473  1000
    474  1000				   .
    475  1000							; 
    476  1000
    477  1000				   .
    478  1000							; 
    479  1000
    480  1000				   .
    481  1000							; 
    482  1000
    483  1000				   .L023		;  dim _sc1  =  score
    484  1000
    485  1000				   .L024		;  dim _sc2  =  score + 1
    486  1000
    487  1000				   .L025		;  dim _sc3  =  score + 2
    488  1000
    489  1000				   .
    490  1000							; 
    491  1000
    492  1000				   .
    493  1000							; 
    494  1000
    495  1000				   .
    496  1000							; 
    497  1000
    498  1000				   .
    499  1000							; 
    500  1000
    501  1000				   .
    502  1000							; 
    503  1000
    504  1000				   .
    505  1000							; 
    506  1000
    507  1000				   .
    508  1000							; 
    509  1000
    510  1000				   .
    511  1000							; 
    512  1000
    513  1000				   .
    514  1000							; 
    515  1000
    516  1000				   .L026		;  const _c_Edge_Top  =  10
    517  1000
    518  1000				   .L027		;  const _c_Edge_Bottom  =  88
    519  1000
    520  1000				   .L028		;  const _c_Edge_Left	=  2
    521  1000
    522  1000				   .L029		;  const _c_Edge_Right  =  153
    523  1000
    524  1000				   .
    525  1000							; 
    526  1000
    527  1000				   .
    528  1000							; 
    529  1000
    530  1000				   .
    531  1000							; 
    532  1000
    533  1000				   .
    534  1000							; 
    535  1000
    536  1000				   .
    537  1000							; 
    538  1000
    539  1000				   .
    540  1000							; 
    541  1000
    542  1000				   .
    543  1000							; 
    544  1000
    545  1000				   .
    546  1000							; 
    547  1000
    548  1000				   .
    549  1000							; 
    550  1000
    551  1000				   .L030		;  const _c_World_Limit_Top  =  0
    552  1000
    553  1000				   .L031		;  const _c_World_Limit_Bottom  =  15
    554  1000
    555  1000				   .L032		;  const _c_World_Limit_Left  =  0
    556  1000
    557  1000				   .L033		;  const _c_World_Limit_Right	=  15
    558  1000
    559  1000				   .
    560  1000							; 
    561  1000
    562  1000				   .
    563  1000							; 
    564  1000
    565  1000				   .
    566  1000							; 
    567  1000
    568  1000				   .
    569  1000							; 
    570  1000
    571  1000				   .
    572  1000							; 
    573  1000
    574  1000				   .
    575  1000							; 
    576  1000
    577  1000				   .
    578  1000							; 
    579  1000
    580  1000				   .
    581  1000							; 
    582  1000
    583  1000				   .
    584  1000							; 
    585  1000
    586  1000				   .
    587  1000							; 
    588  1000
    589  1000				   .
    590  1000							; 
    591  1000
    592  1000				   .
    593  1000							; 
    594  1000
    595  1000				   .L034		;  const _00  =  $00
    596  1000
    597  1000				   .L035		;  const _02  =  $02
    598  1000
    599  1000				   .L036		;  const _04  =  $04
    600  1000
    601  1000				   .L037		;  const _06  =  $06
    602  1000
    603  1000				   .L038		;  const _08  =  $08
    604  1000
    605  1000				   .L039		;  const _0A  =  $0A
    606  1000
    607  1000				   .L040		;  const _0C  =  $0C
    608  1000
    609  1000				   .L041		;  const _0E  =  $0E
    610  1000
    611  1000				   .L042		;  const _10  =  $10
    612  1000
    613  1000				   .L043		;  const _12  =  $12
    614  1000
    615  1000				   .L044		;  const _14  =  $14
    616  1000
    617  1000				   .L045		;  const _16  =  $16
    618  1000
    619  1000				   .L046		;  const _18  =  $18
    620  1000
    621  1000				   .L047		;  const _1A  =  $1A
    622  1000
    623  1000				   .L048		;  const _1C  =  $1C
    624  1000
    625  1000				   .L049		;  const _1E  =  $1E
    626  1000
    627  1000				   .L050		;  const _20  =  $20
    628  1000
    629  1000				   .L051		;  const _22  =  $22
    630  1000
    631  1000				   .L052		;  const _24  =  $24
    632  1000
    633  1000				   .L053		;  const _26  =  $26
    634  1000
    635  1000				   .L054		;  const _28  =  $28
    636  1000
    637  1000				   .L055		;  const _2A  =  $2A
    638  1000
    639  1000				   .L056		;  const _2C  =  $2C
    640  1000
    641  1000				   .L057		;  const _2E  =  $2E
    642  1000
    643  1000				   .L058		;  const _30  =  $30
    644  1000
    645  1000				   .L059		;  const _32  =  $32
    646  1000
    647  1000				   .L060		;  const _34  =  $34
    648  1000
    649  1000				   .L061		;  const _36  =  $36
    650  1000
    651  1000				   .L062		;  const _38  =  $38
    652  1000
    653  1000				   .L063		;  const _3A  =  $3A
    654  1000
    655  1000				   .L064		;  const _3C  =  $3C
    656  1000
    657  1000				   .L065		;  const _3E  =  $3E
    658  1000
    659  1000				   .L066		;  const _40  =  $40
    660  1000
    661  1000				   .L067		;  const _42  =  $42
    662  1000
    663  1000				   .L068		;  const _44  =  $44
    664  1000
    665  1000				   .L069		;  const _46  =  $46
    666  1000
    667  1000				   .L070		;  const _48  =  $48
    668  1000
    669  1000				   .L071		;  const _4A  =  $4A
    670  1000
    671  1000				   .L072		;  const _4C  =  $4C
    672  1000
    673  1000				   .L073		;  const _4E  =  $4E
    674  1000
    675  1000				   .L074		;  const _50  =  $50
    676  1000
    677  1000				   .L075		;  const _52  =  $52
    678  1000
    679  1000				   .L076		;  const _54  =  $54
    680  1000
    681  1000				   .L077		;  const _56  =  $56
    682  1000
    683  1000				   .L078		;  const _58  =  $58
    684  1000
    685  1000				   .L079		;  const _5A  =  $5A
    686  1000
    687  1000				   .L080		;  const _5C  =  $5C
    688  1000
    689  1000				   .L081		;  const _5E  =  $5E
    690  1000
    691  1000				   .L082		;  const _60  =  $60
    692  1000
    693  1000				   .L083		;  const _62  =  $62
    694  1000
    695  1000				   .L084		;  const _64  =  $64
    696  1000
    697  1000				   .L085		;  const _66  =  $66
    698  1000
    699  1000				   .L086		;  const _68  =  $68
    700  1000
    701  1000				   .L087		;  const _6A  =  $6A
    702  1000
    703  1000				   .L088		;  const _6C  =  $6C
    704  1000
    705  1000				   .L089		;  const _6E  =  $6E
    706  1000
    707  1000				   .L090		;  const _70  =  $70
    708  1000
    709  1000				   .L091		;  const _72  =  $72
    710  1000
    711  1000				   .L092		;  const _74  =  $74
    712  1000
    713  1000				   .L093		;  const _76  =  $76
    714  1000
    715  1000				   .L094		;  const _78  =  $78
    716  1000
    717  1000				   .L095		;  const _7A  =  $7A
    718  1000
    719  1000				   .L096		;  const _7C  =  $7C
    720  1000
    721  1000				   .L097		;  const _7E  =  $7E
    722  1000
    723  1000				   .L098		;  const _80  =  $80
    724  1000
    725  1000				   .L099		;  const _82  =  $82
    726  1000
    727  1000				   .L0100		;  const _84  =  $84
    728  1000
    729  1000				   .L0101		;  const _86  =  $86
    730  1000
    731  1000				   .L0102		;  const _88  =  $88
    732  1000
    733  1000				   .L0103		;  const _8A  =  $8A
    734  1000
    735  1000				   .L0104		;  const _8C  =  $8C
    736  1000
    737  1000				   .L0105		;  const _8E  =  $8E
    738  1000
    739  1000				   .L0106		;  const _90  =  $90
    740  1000
    741  1000				   .L0107		;  const _92  =  $92
    742  1000
    743  1000				   .L0108		;  const _94  =  $94
    744  1000
    745  1000				   .L0109		;  const _96  =  $96
    746  1000
    747  1000				   .L0110		;  const _98  =  $98
    748  1000
    749  1000				   .L0111		;  const _9A  =  $9A
    750  1000
    751  1000				   .L0112		;  const _9C  =  $9C
    752  1000
    753  1000				   .L0113		;  const _9E  =  $9E
    754  1000
    755  1000				   .L0114		;  const _A0  =  $A0
    756  1000
    757  1000				   .L0115		;  const _A2  =  $A2
    758  1000
    759  1000				   .L0116		;  const _A4  =  $A4
    760  1000
    761  1000				   .L0117		;  const _A6  =  $A6
    762  1000
    763  1000				   .L0118		;  const _A8  =  $A8
    764  1000
    765  1000				   .L0119		;  const _AA  =  $AA
    766  1000
    767  1000				   .L0120		;  const _AC  =  $AC
    768  1000
    769  1000				   .L0121		;  const _AE  =  $AE
    770  1000
    771  1000				   .L0122		;  const _B0  =  $B0
    772  1000
    773  1000				   .L0123		;  const _B2  =  $B2
    774  1000
    775  1000				   .L0124		;  const _B4  =  $B4
    776  1000
    777  1000				   .L0125		;  const _B6  =  $B6
    778  1000
    779  1000				   .L0126		;  const _B8  =  $B8
    780  1000
    781  1000				   .L0127		;  const _BA  =  $BA
    782  1000
    783  1000				   .L0128		;  const _BC  =  $BC
    784  1000
    785  1000				   .L0129		;  const _BE  =  $BE
    786  1000
    787  1000				   .L0130		;  const _C0  =  $C0
    788  1000
    789  1000				   .L0131		;  const _C2  =  $C2
    790  1000
    791  1000				   .L0132		;  const _C4  =  $C4
    792  1000
    793  1000				   .L0133		;  const _C6  =  $C6
    794  1000
    795  1000				   .L0134		;  const _C8  =  $C8
    796  1000
    797  1000				   .L0135		;  const _CA  =  $CA
    798  1000
    799  1000				   .L0136		;  const _CC  =  $CC
    800  1000
    801  1000				   .L0137		;  const _CE  =  $CE
    802  1000
    803  1000				   .L0138		;  const _D0  =  $D0
    804  1000
    805  1000				   .L0139		;  const _D2  =  $D2
    806  1000
    807  1000				   .L0140		;  const _D4  =  $D4
    808  1000
    809  1000				   .L0141		;  const _D6  =  $D6
    810  1000
    811  1000				   .L0142		;  const _D8  =  $D8
    812  1000
    813  1000				   .L0143		;  const _DA  =  $DA
    814  1000
    815  1000				   .L0144		;  const _DC  =  $DC
    816  1000
    817  1000				   .L0145		;  const _DE  =  $DE
    818  1000
    819  1000				   .L0146		;  const _E0  =  $E0
    820  1000
    821  1000				   .L0147		;  const _E2  =  $E2
    822  1000
    823  1000				   .L0148		;  const _E4  =  $E4
    824  1000
    825  1000				   .L0149		;  const _E6  =  $E6
    826  1000
    827  1000				   .L0150		;  const _E8  =  $E8
    828  1000
    829  1000				   .L0151		;  const _EA  =  $EA
    830  1000
    831  1000				   .L0152		;  const _EC  =  $EC
    832  1000
    833  1000				   .L0153		;  const _EE  =  $EE
    834  1000
    835  1000				   .L0154		;  const _F0  =  $F0
    836  1000
    837  1000				   .L0155		;  const _F2  =  $F2
    838  1000
    839  1000				   .L0156		;  const _F4  =  $F4
    840  1000
    841  1000				   .L0157		;  const _F6  =  $F6
    842  1000
    843  1000				   .L0158		;  const _F8  =  $F8
    844  1000
    845  1000				   .L0159		;  const _FA  =  $FA
    846  1000
    847  1000				   .L0160		;  const _FC  =  $FC
    848  1000
    849  1000				   .L0161		;  const _FE  =  $FE
    850  1000
    851  1000				   .
    852  1000							; 
    853  1000
    854  1000				   .
    855  1000							; 
    856  1000
    857  1000				   .
    858  1000							; 
    859  1000
    860  1000				   .
    861  1000							; 
    862  1000
    863  1000				   .
    864  1000							; 
    865  1000
    866  1000				   .
    867  1000							; 
    868  1000
    869  1000				   .
    870  1000							; 
    871  1000
    872  1000				   .
    873  1000							; 
    874  1000
    875  1000				   .
    876  1000							; 
    877  1000
    878  1000				   .
    879  1000							; 
    880  1000
    881  1000				   .__Start_Restart
    882  1000							; __Start_Restart
    883  1000
    884  1000				   .
    885  1000							; 
    886  1000
    887  1000				   .
    888  1000							; 
    889  1000
    890  1000				   .
    891  1000							; 
    892  1000
    893  1000				   .
    894  1000							; 
    895  1000
    896  1000				   .
    897  1000							; 
    898  1000
    899  1000				   .
    900  1000							; 
    901  1000
    902  1000				   .L0162		;  AUDV0  =  0  :  AUDV1  =  0
    903  1000
    904  1000		       a9 00		      LDA	#0
    905  1002		       85 19		      STA	AUDV0
    906  1004		       85 1a		      STA	AUDV1
    907  1006				   .
    908  1006							; 
    909  1006
    910  1006				   .
    911  1006							; 
    912  1006
    913  1006				   .
    914  1006							; 
    915  1006
    916  1006				   .
    917  1006							; 
    918  1006
    919  1006				   .
    920  1006							; 
    921  1006
    922  1006				   .
    923  1006							; 
    924  1006
    925  1006				   .L0163		;  player1y  =  150  :  player0y  =  150
    926  1006
    927  1006		       a9 96		      LDA	#150
    928  1008		       85 86		      STA	player1y
    929  100a		       85 85		      STA	player0y
    930  100c				   .
    931  100c							; 
    932  100c
    933  100c				   .
    934  100c							; 
    935  100c
    936  100c				   .
    937  100c							; 
    938  100c
    939  100c				   .
    940  100c							; 
    941  100c
    942  100c				   .
    943  100c							; 
    944  100c
    945  100c				   .
    946  100c							; 
    947  100c
    948  100c				   .L0164		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
    949  100c
    950  100c		       a9 00		      LDA	#0
    951  100e		       85 d4		      STA	a
    952  1010		       85 d5		      STA	b
    953  1012		       85 d6		      STA	c
    954  1014		       85 d7		      STA	d
    955  1016		       85 d8		      STA	e
    956  1018		       85 d9		      STA	f
    957  101a		       85 da		      STA	g
    958  101c		       85 db		      STA	h
    959  101e		       85 dc		      STA	i
    960  1020				   .L0165		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
    961  1020
    962  1020		       a9 00		      LDA	#0
    963  1022		       85 dd		      STA	j
    964  1024		       85 de		      STA	k
    965  1026		       85 df		      STA	l
    966  1028		       85 e0		      STA	m
    967  102a		       85 e1		      STA	n
    968  102c		       85 e2		      STA	o
    969  102e		       85 e3		      STA	p
    970  1030		       85 e4		      STA	q
    971  1032		       85 e5		      STA	r
    972  1034				   .L0166		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0
    973  1034
    974  1034		       a9 00		      LDA	#0
    975  1036		       85 e6		      STA	s
    976  1038		       85 e7		      STA	t
    977  103a		       85 e8		      STA	u
    978  103c		       85 e9		      STA	v
    979  103e		       85 ea		      STA	w
    980  1040		       85 eb		      STA	x
    981  1042				   .
    982  1042							; 
    983  1042
    984  1042				   .
    985  1042							; 
    986  1042
    987  1042				   .
    988  1042							; 
    989  1042
    990  1042				   .
    991  1042							; 
    992  1042
    993  1042				   .
    994  1042							; 
    995  1042
    996  1042				   .
    997  1042							; 
    998  1042
    999  1042				   .
   1000  1042							; 
   1001  1042
   1002  1042				   .
   1003  1042							; 
   1004  1042
   1005  1042				   .
   1006  1042							; 
   1007  1042
   1008  1042				   .
   1009  1042							; 
   1010  1042
   1011  1042				   .
   1012  1042							; 
   1013  1042
   1014  1042				   .__Title_Screen_Setup
   1015  1042							; __Title_Screen_Setup
   1016  1042
   1017  1042				   .
   1018  1042							; 
   1019  1042
   1020  1042				   .
   1021  1042							; 
   1022  1042
   1023  1042				   .
   1024  1042							; 
   1025  1042
   1026  1042				   .
   1027  1042							; 
   1028  1042
   1029  1042				   .
   1030  1042							; 
   1031  1042
   1032  1042				   .
   1033  1042							; 
   1034  1042
   1035  1042				   .L0167		;  scorecolor	=  _1C
   1036  1042
   1037  1042		       a9 1c		      LDA	#_1C
   1038  1044		       85 a3		      STA	scorecolor
   1039  1046				   .
   1040  1046							; 
   1041  1046
   1042  1046				   .
   1043  1046							; 
   1044  1046
   1045  1046				   .
   1046  1046							; 
   1047  1046
   1048  1046				   .
   1049  1046							; 
   1050  1046
   1051  1046				   .
   1052  1046							; 
   1053  1046
   1054  1046				   .
   1055  1046							; 
   1056  1046
   1057  1046				   .L0168		;  score  =  0  :  _RoomRand  =  0
   1058  1046
   1059  1046		       a9 00		      LDA	#$00
   1060  1048		       85 95		      STA	score+2
   1061  104a		       a9 00		      LDA	#$00
   1062  104c		       85 94		      STA	score+1
   1063  104e		       a9 00		      LDA	#$00
   1064  1050		       85 93		      STA	score
   1065  1052		       a9 00		      LDA	#0
   1066  1054		       85 ec		      STA	_RoomRand
   1067  1056				   .
   1068  1056							; 
   1069  1056
   1070  1056				   .
   1071  1056							; 
   1072  1056
   1073  1056				   .
   1074  1056							; 
   1075  1056
   1076  1056				   .
   1077  1056							; 
   1078  1056
   1079  1056				   .
   1080  1056							; 
   1081  1056
   1082  1056				   .
   1083  1056							; 
   1084  1056
   1085  1056				   .L0169		;  COLUBK  =  _00
   1086  1056
   1087  1056		       a9 00		      LDA	#_00
   1088  1058		       85 09		      STA	COLUBK
   1089  105a				   .
   1090  105a							; 
   1091  105a
   1092  105a				   .
   1093  105a							; 
   1094  105a
   1095  105a				   .
   1096  105a							; 
   1097  105a
   1098  105a				   .
   1099  105a							; 
   1100  105a
   1101  105a				   .
   1102  105a							; 
   1103  105a
   1104  105a				   .
   1105  105a							; 
   1106  105a
   1107  105a				   .L0170		;  COLUPF  =  _08
   1108  105a
   1109  105a		       a9 08		      LDA	#_08
   1110  105c		       85 08		      STA	COLUPF
   1111  105e				   .
   1112  105e							; 
   1113  105e
   1114  105e				   .
   1115  105e							; 
   1116  105e
   1117  105e				   .
   1118  105e							; 
   1119  105e
   1120  105e				   .
   1121  105e							; 
   1122  105e
   1123  105e				   .
   1124  105e							; 
   1125  105e
   1126  105e				   .
   1127  105e							; 
   1128  105e
   1129  105e				   .
   1130  105e							; 
   1131  105e
   1132  105e				   .
   1133  105e							; 
   1134  105e
   1135  105e				   .
   1136  105e							; 
   1137  105e
   1138  105e				   .
   1139  105e							; 
   1140  105e
   1141  105e				   .
   1142  105e							; 
   1143  105e
   1144  105e				   .L0171		;  _Bit0_Reset_Restrainer{0}  =  1
   1145  105e
   1146  105e		       a5 da		      LDA	_Bit0_Reset_Restrainer
   1147  1060		       09 01		      ORA	#1
   1148  1062		       85 da		      STA	_Bit0_Reset_Restrainer
   1149  1064				   .
   1150  1064							; 
   1151  1064
   1152  1064				   .
   1153  1064							; 
   1154  1064
   1155  1064				   .
   1156  1064							; 
   1157  1064
   1158  1064				   .
   1159  1064							; 
   1160  1064
   1161  1064				   .
   1162  1064							; 
   1163  1064
   1164  1064				   .
   1165  1064							; 
   1166  1064
   1167  1064				   .L0172		;  playfield:
   1168  1064
   1169  1064				  -	      ifconst	pfres
   1170  1064				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1171  1064					      else
   1172  1064		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1173  1066					      endif
   1174  1066		       4c 95 90 	      jmp	pflabel0
   1175  1069				   PF_data0
   1176  1069		       7d 37		      .byte.b	%01111101, %00110111
   1177  106b					      if	(pfwidth>2)
   1178  106b		       7b 7b		      .byte.b	%01111011, %01111011
   1179  106d					      endif
   1180  106d		       61 31		      .byte.b	%01100001, %00110001
   1181  106f					      if	(pfwidth>2)
   1182  106f		       63 30		      .byte.b	%01100011, %00110000
   1183  1071					      endif
   1184  1071		       7d 37		      .byte.b	%01111101, %00110111
   1185  1073					      if	(pfwidth>2)
   1186  1073		       7b 30		      .byte.b	%01111011, %00110000
   1187  1075					      endif
   1188  1075		       0d 31		      .byte.b	%00001101, %00110001
   1189  1077					      if	(pfwidth>2)
   1190  1077		       63 30		      .byte.b	%01100011, %00110000
   1191  1079					      endif
   1192  1079		       7d f7		      .byte.b	%01111101, %11110111
   1193  107b					      if	(pfwidth>2)
   1194  107b		       7b 33		      .byte.b	%01111011, %00110011
   1195  107d					      endif
   1196  107d		       00 00		      .byte.b	%00000000, %00000000
   1197  107f					      if	(pfwidth>2)
   1198  107f		       00 00		      .byte.b	%00000000, %00000000
   1199  1081					      endif
   1200  1081		       fb 7b		      .byte.b	%11111011, %01111011
   1201  1083					      if	(pfwidth>2)
   1202  1083		       f8 36		      .byte.b	%11111000, %00110110
   1203  1085					      endif
   1204  1085		       c3 18		      .byte.b	%11000011, %00011000
   1205  1087					      if	(pfwidth>2)
   1206  1087		       cc 7f		      .byte.b	%11001100, %01111111
   1207  1089					      endif
   1208  1089		       fb 7b		      .byte.b	%11111011, %01111011
   1209  108b					      if	(pfwidth>2)
   1210  108b		       cc 36		      .byte.b	%11001100, %00110110
   1211  108d					      endif
   1212  108d		       1b 18		      .byte.b	%00011011, %00011000
   1213  108f					      if	(pfwidth>2)
   1214  108f		       cc 7f		      .byte.b	%11001100, %01111111
   1215  1091					      endif
   1216  1091		       fb 7b		      .byte.b	%11111011, %01111011
   1217  1093					      if	(pfwidth>2)
   1218  1093		       f8 36		      .byte.b	%11111000, %00110110
   1219  1095					      endif
   1220  1095				   pflabel0
   1221  1095		       bd 69 90 	      lda	PF_data0,x
   1222  1098		       95 a4		      sta	playfield,x
   1223  109a		       ca		      dex
   1224  109b		       10 f8		      bpl	pflabel0
   1225  109d				   .
   1226  109d							; 
   1227  109d
   1228  109d				   .
   1229  109d							; 
   1230  109d
   1231  109d				   .
   1232  109d							; 
   1233  109d
   1234  109d				   .
   1235  109d							; 
   1236  109d
   1237  109d				   .
   1238  109d							; 
   1239  109d
   1240  109d				   .
   1241  109d							; 
   1242  109d
   1243  109d				   .
   1244  109d							; 
   1245  109d
   1246  109d				   .
   1247  109d							; 
   1248  109d
   1249  109d				   .
   1250  109d							; 
   1251  109d
   1252  109d				   .
   1253  109d							; 
   1254  109d
   1255  109d				   .
   1256  109d							; 
   1257  109d
   1258  109d				   .__Title_Screen_Loop
   1259  109d							; __Title_Screen_Loop
   1260  109d
   1261  109d				   .
   1262  109d							; 
   1263  109d
   1264  109d				   .
   1265  109d							; 
   1266  109d
   1267  109d				   .
   1268  109d							; 
   1269  109d
   1270  109d				   .
   1271  109d							; 
   1272  109d
   1273  109d				   .
   1274  109d							; 
   1275  109d
   1276  109d				   .
   1277  109d							; 
   1278  109d
   1279  109d				   .
   1280  109d							; 
   1281  109d
   1282  109d				   .
   1283  109d							; 
   1284  109d
   1285  109d				   .
   1286  109d							; 
   1287  109d
   1288  109d				   .
   1289  109d							; 
   1290  109d
   1291  109d				   .L0173		;  _Master_Counter  =	_Master_Counter  +  1
   1292  109d
   1293  109d		       e6 d8		      INC	_Master_Counter
   1294  109f				   .
   1295  109f							; 
   1296  109f
   1297  109f				   .
   1298  109f							; 
   1299  109f
   1300  109f				   .
   1301  109f							; 
   1302  109f
   1303  109f				   .
   1304  109f							; 
   1305  109f
   1306  109f				   .L0174		;  if _Master_Counter	<  _TS_Slowdown then goto __Skip_TS_Counter
   1307  109f
   1308  109f		       a5 d8		      LDA	_Master_Counter
   1309  10a1		       c5 d6		      CMP	_TS_Slowdown
   1310  10a3		       b0 03		      BCS	.skipL0174
   1311  10a5				   .condpart0
   1312  10a5		       4c 48 91 	      jmp	.__Skip_TS_Counter
   1313  10a8
   1314  10a8				   .skipL0174
   1315  10a8				   .
   1316  10a8							; 
   1317  10a8
   1318  10a8				   .
   1319  10a8							; 
   1320  10a8
   1321  10a8				   .
   1322  10a8							; 
   1323  10a8
   1324  10a8				   .
   1325  10a8							; 
   1326  10a8
   1327  10a8				   .L0175		;  if joy0right  &&  _RoomRand  <  255 then score  =  score  +  1  :  _RoomRand  =  _RoomRand	+  1  :  _TS_Slowdown  =  11
   1328  10a8
   1329  10a8		       2c 80 02 	      bit	SWCHA
   1330  10ab		       30 21		      BMI	.skipL0175
   1331  10ad				   .condpart1
   1332  10ad		       a5 ec		      LDA	_RoomRand
   1333  10af		       c9 ff		      CMP	#255
   1334  10b1		       b0 1b		      BCS	.skip1then
   1335  10b3				   .condpart2
   1336  10b3		       f8		      SED
   1337  10b4		       18		      CLC
   1338  10b5		       a5 95		      LDA	score+2
   1339  10b7		       69 01		      ADC	#$01
   1340  10b9		       85 95		      STA	score+2
   1341  10bb		       a5 94		      LDA	score+1
   1342  10bd		       69 00		      ADC	#$00
   1343  10bf		       85 94		      STA	score+1
   1344  10c1		       a5 93		      LDA	score
   1345  10c3		       69 00		      ADC	#$00
   1346  10c5		       85 93		      STA	score
   1347  10c7		       d8		      CLD
   1348  10c8		       e6 ec		      INC	_RoomRand
   1349  10ca		       a9 0b		      LDA	#11
   1350  10cc		       85 d6		      STA	_TS_Slowdown
   1351  10ce				   .skip1then
   1352  10ce				   .skipL0175
   1353  10ce				   .L0176		;  if joy0left  &&  _RoomRand	>  0 then score  =  score  -  1  :  _RoomRand  =  _RoomRand  -	1  :  _TS_Slowdown  =  11
   1354  10ce
   1355  10ce		       2c 80 02 	      bit	SWCHA
   1356  10d1		       70 21		      BVS	.skipL0176
   1357  10d3				   .condpart3
   1358  10d3		       a9 00		      LDA	#0
   1359  10d5		       c5 ec		      CMP	_RoomRand
   1360  10d7		       b0 1b		      BCS	.skip3then
   1361  10d9				   .condpart4
   1362  10d9		       f8		      SED
   1363  10da		       38		      SEC
   1364  10db		       a5 95		      LDA	score+2
   1365  10dd		       e9 01		      SBC	#$01
   1366  10df		       85 95		      STA	score+2
   1367  10e1		       a5 94		      LDA	score+1
   1368  10e3		       e9 00		      SBC	#$00
   1369  10e5		       85 94		      STA	score+1
   1370  10e7		       a5 93		      LDA	score
   1371  10e9		       e9 00		      SBC	#$00
   1372  10eb		       85 93		      STA	score
   1373  10ed		       d8		      CLD
   1374  10ee		       c6 ec		      DEC	_RoomRand
   1375  10f0		       a9 0b		      LDA	#11
   1376  10f2		       85 d6		      STA	_TS_Slowdown
   1377  10f4				   .skip3then
   1378  10f4				   .skipL0176
   1379  10f4				   .L0177		;  if joy0up  &&  _RoomRand  <  255 then score  =  score  +  1  :  _RoomRand  =  _RoomRand  +	1  :  _TS_Slowdown  =  2
   1380  10f4
   1381  10f4		       a9 10		      lda	#$10
   1382  10f6		       2c 80 02 	      bit	SWCHA
   1383  10f9		       d0 21		      BNE	.skipL0177
   1384  10fb				   .condpart5
   1385  10fb		       a5 ec		      LDA	_RoomRand
   1386  10fd		       c9 ff		      CMP	#255
   1387  10ff		       b0 1b		      BCS	.skip5then
   1388  1101				   .condpart6
   1389  1101		       f8		      SED
   1390  1102		       18		      CLC
   1391  1103		       a5 95		      LDA	score+2
   1392  1105		       69 01		      ADC	#$01
   1393  1107		       85 95		      STA	score+2
   1394  1109		       a5 94		      LDA	score+1
   1395  110b		       69 00		      ADC	#$00
   1396  110d		       85 94		      STA	score+1
   1397  110f		       a5 93		      LDA	score
   1398  1111		       69 00		      ADC	#$00
   1399  1113		       85 93		      STA	score
   1400  1115		       d8		      CLD
   1401  1116		       e6 ec		      INC	_RoomRand
   1402  1118		       a9 02		      LDA	#2
   1403  111a		       85 d6		      STA	_TS_Slowdown
   1404  111c				   .skip5then
   1405  111c				   .skipL0177
   1406  111c				   .L0178		;  if joy0down  &&  _RoomRand	>  0 then score  =  score  -  1  :  _RoomRand  =  _RoomRand  -	1  :  _TS_Slowdown  =  2
   1407  111c
   1408  111c		       a9 20		      lda	#$20
   1409  111e		       2c 80 02 	      bit	SWCHA
   1410  1121		       d0 21		      BNE	.skipL0178
   1411  1123				   .condpart7
   1412  1123		       a9 00		      LDA	#0
   1413  1125		       c5 ec		      CMP	_RoomRand
   1414  1127		       b0 1b		      BCS	.skip7then
   1415  1129				   .condpart8
   1416  1129		       f8		      SED
   1417  112a		       38		      SEC
   1418  112b		       a5 95		      LDA	score+2
   1419  112d		       e9 01		      SBC	#$01
   1420  112f		       85 95		      STA	score+2
   1421  1131		       a5 94		      LDA	score+1
   1422  1133		       e9 00		      SBC	#$00
   1423  1135		       85 94		      STA	score+1
   1424  1137		       a5 93		      LDA	score
   1425  1139		       e9 00		      SBC	#$00
   1426  113b		       85 93		      STA	score
   1427  113d		       d8		      CLD
   1428  113e		       c6 ec		      DEC	_RoomRand
   1429  1140		       a9 02		      LDA	#2
   1430  1142		       85 d6		      STA	_TS_Slowdown
   1431  1144				   .skip7then
   1432  1144				   .skipL0178
   1433  1144				   .
   1434  1144							; 
   1435  1144
   1436  1144				   .
   1437  1144							; 
   1438  1144
   1439  1144				   .
   1440  1144							; 
   1441  1144
   1442  1144				   .
   1443  1144							; 
   1444  1144
   1445  1144				   .L0179		;  _Master_Counter  =	0
   1446  1144
   1447  1144		       a9 00		      LDA	#0
   1448  1146		       85 d8		      STA	_Master_Counter
   1449  1148				   .
   1450  1148							; 
   1451  1148
   1452  1148				   .__Skip_TS_Counter
   1453  1148							; __Skip_TS_Counter
   1454  1148
   1455  1148				   .
   1456  1148							; 
   1457  1148
   1458  1148				   .
   1459  1148							; 
   1460  1148
   1461  1148				   .
   1462  1148							; 
   1463  1148
   1464  1148				   .
   1465  1148							; 
   1466  1148
   1467  1148				   .
   1468  1148							; 
   1469  1148
   1470  1148				   .
   1471  1148							; 
   1472  1148
   1473  1148				   .
   1474  1148							; 
   1475  1148
   1476  1148				   .L0180		;  drawscreen
   1477  1148
   1478  1148		       85 ee		      sta	temp7
   1479  114a		       a9 91		      lda	#>(ret_point1-1)
   1480  114c		       48		      pha
   1481  114d		       a9 5f		      lda	#<(ret_point1-1)
   1482  114f		       48		      pha
   1483  1150		       a9 f4		      lda	#>(drawscreen-1)
   1484  1152		       48		      pha
   1485  1153		       a9 39		      lda	#<(drawscreen-1)
   1486  1155		       48		      pha
   1487  1156		       a5 ee		      lda	temp7
   1488  1158		       48		      pha
   1489  1159		       8a		      txa
   1490  115a		       48		      pha
   1491  115b		       a2 04		      ldx	#4
   1492  115d		       4c eb ff 	      jmp	BS_jsr
   1493  1160				   ret_point1
   1494  1160				   .
   1495  1160							; 
   1496  1160
   1497  1160				   .
   1498  1160							; 
   1499  1160
   1500  1160				   .
   1501  1160							; 
   1502  1160
   1503  1160				   .
   1504  1160							; 
   1505  1160
   1506  1160				   .
   1507  1160							; 
   1508  1160
   1509  1160				   .
   1510  1160							; 
   1511  1160
   1512  1160				   .
   1513  1160							; 
   1514  1160
   1515  1160				   .
   1516  1160							; 
   1517  1160
   1518  1160				   .
   1519  1160							; 
   1520  1160
   1521  1160				   .
   1522  1160							; 
   1523  1160
   1524  1160				   .
   1525  1160							; 
   1526  1160
   1527  1160				   .
   1528  1160							; 
   1529  1160
   1530  1160				   .
   1531  1160							; 
   1532  1160
   1533  1160				   .
   1534  1160							; 
   1535  1160
   1536  1160				   .L0181		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
   1537  1160
   1538  1160		       a9 01		      lda	#1
   1539  1162		       2c 82 02 	      bit	SWCHB
   1540  1165		       f0 0d		      BEQ	.skipL0181
   1541  1167				   .condpart9
   1542  1167		       24 0c		      bit	INPT4
   1543  1169		       10 09		      BPL	.skip9then
   1544  116b				   .condpart10
   1545  116b		       a5 da		      LDA	_Bit0_Reset_Restrainer
   1546  116d		       29 fe		      AND	#254
   1547  116f		       85 da		      STA	_Bit0_Reset_Restrainer
   1548  1171		       4c 9d 90 	      jmp	.__Title_Screen_Loop
   1549  1174
   1550  1174				   .skip9then
   1551  1174				   .skipL0181
   1552  1174				   .
   1553  1174							; 
   1554  1174
   1555  1174				   .
   1556  1174							; 
   1557  1174
   1558  1174				   .
   1559  1174							; 
   1560  1174
   1561  1174				   .
   1562  1174							; 
   1563  1174
   1564  1174				   .
   1565  1174							; 
   1566  1174
   1567  1174				   .L0182		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   1568  1174
   1569  1174		       a5 da		      LDA	_Bit0_Reset_Restrainer
   1570  1176		       4a		      LSR
   1571  1177		       90 03		      BCC	.skipL0182
   1572  1179				   .condpart11
   1573  1179		       4c 9d 90 	      jmp	.__Title_Screen_Loop
   1574  117c
   1575  117c				   .skipL0182
   1576  117c				   .
   1577  117c							; 
   1578  117c
   1579  117c				   .
   1580  117c							; 
   1581  117c
   1582  117c				   .
   1583  117c							; 
   1584  117c
   1585  117c				   .
   1586  117c							; 
   1587  117c
   1588  117c				   .L0183		;  goto __Main_Loop_Setup
   1589  117c
   1590  117c		       4c 7f 91 	      jmp	.__Main_Loop_Setup
   1591  117f
   1592  117f				   .
   1593  117f							; 
   1594  117f
   1595  117f				   .
   1596  117f							; 
   1597  117f
   1598  117f				   .
   1599  117f							; 
   1600  117f
   1601  117f				   .
   1602  117f							; 
   1603  117f
   1604  117f				   .
   1605  117f							; 
   1606  117f
   1607  117f				   .
   1608  117f							; 
   1609  117f
   1610  117f				   .
   1611  117f							; 
   1612  117f
   1613  117f				   .
   1614  117f							; 
   1615  117f
   1616  117f				   .
   1617  117f							; 
   1618  117f
   1619  117f				   .
   1620  117f							; 
   1621  117f
   1622  117f				   .
   1623  117f							; 
   1624  117f
   1625  117f				   .__Main_Loop_Setup
   1626  117f							; __Main_Loop_Setup
   1627  117f
   1628  117f				   .
   1629  117f							; 
   1630  117f
   1631  117f				   .
   1632  117f							; 
   1633  117f
   1634  117f				   .
   1635  117f							; 
   1636  117f
   1637  117f				   .
   1638  117f							; 
   1639  117f
   1640  117f				   .
   1641  117f							; 
   1642  117f
   1643  117f				   .
   1644  117f							; 
   1645  117f
   1646  117f				   .L0184		;  player1x  =  17  :	player1y  =  15
   1647  117f
   1648  117f		       a9 11		      LDA	#17
   1649  1181		       85 81		      STA	player1x
   1650  1183		       a9 0f		      LDA	#15
   1651  1185		       85 86		      STA	player1y
   1652  1187				   .
   1653  1187							; 
   1654  1187
   1655  1187				   .
   1656  1187							; 
   1657  1187
   1658  1187				   .
   1659  1187							; 
   1660  1187
   1661  1187				   .
   1662  1187							; 
   1663  1187
   1664  1187				   .
   1665  1187							; 
   1666  1187
   1667  1187				   .
   1668  1187							; 
   1669  1187
   1670  1187				   .
   1671  1187							; 
   1672  1187
   1673  1187				   .
   1674  1187							; 
   1675  1187
   1676  1187				   .
   1677  1187							; 
   1678  1187
   1679  1187				   .L0185		;  _Bit0_Reset_Restrainer{0}  =  1
   1680  1187
   1681  1187		       a5 da		      LDA	_Bit0_Reset_Restrainer
   1682  1189		       09 01		      ORA	#1
   1683  118b		       85 da		      STA	_Bit0_Reset_Restrainer
   1684  118d				   .
   1685  118d							; 
   1686  118d
   1687  118d				   .
   1688  118d							; 
   1689  118d
   1690  118d				   .
   1691  118d							; 
   1692  118d
   1693  118d				   .
   1694  118d							; 
   1695  118d
   1696  118d				   .
   1697  118d							; 
   1698  118d
   1699  118d				   .
   1700  118d							; 
   1701  118d
   1702  118d				   .
   1703  118d							; 
   1704  118d
   1705  118d				   .
   1706  118d							; 
   1707  118d
   1708  118d				   .
   1709  118d							; 
   1710  118d
   1711  118d				   .L0186		;  if _RoomRand then goto __Skip_Rand_World
   1712  118d
   1713  118d		       a5 ec		      LDA	_RoomRand
   1714  118f		       f0 03		      BEQ	.skipL0186
   1715  1191				   .condpart12
   1716  1191		       4c 2d 92 	      jmp	.__Skip_Rand_World
   1717  1194
   1718  1194				   .skipL0186
   1719  1194				   .
   1720  1194							; 
   1721  1194
   1722  1194				   .
   1723  1194							; 
   1724  1194
   1725  1194				   .
   1726  1194							; 
   1727  1194
   1728  1194				   .
   1729  1194							; 
   1730  1194
   1731  1194				   .L0187		;  _RoomRand  =  rand	:  if !_RoomRand then _RoomRand  =  1
   1732  1194
   1733  1194		       a5 a2		      lda	rand
   1734  1196		       4a		      lsr
   1735  1197					      ifconst	rand16
   1736  1197		       26 ed		      rol	rand16
   1737  1199					      endif
   1738  1199		       90 02		      bcc	*+4
   1739  119b		       49 b4		      eor	#$B4
   1740  119d		       85 a2		      sta	rand
   1741  119f					      ifconst	rand16
   1742  119f		       45 ed		      eor	rand16
   1743  11a1					      endif
   1744  11a1		       85 ec		      STA	_RoomRand
   1745  11a3		       a5 ec		      LDA	_RoomRand
   1746  11a5		       d0 04		      BNE	.skipL0187
   1747  11a7				   .condpart13
   1748  11a7		       a9 01		      LDA	#1
   1749  11a9		       85 ec		      STA	_RoomRand
   1750  11ab				   .skipL0187
   1751  11ab				   .
   1752  11ab							; 
   1753  11ab
   1754  11ab				   .
   1755  11ab							; 
   1756  11ab
   1757  11ab				   .
   1758  11ab							; 
   1759  11ab
   1760  11ab				   .
   1761  11ab							; 
   1762  11ab
   1763  11ab				   .L0188		;  temp4  =  _RoomRand
   1764  11ab
   1765  11ab		       a5 ec		      LDA	_RoomRand
   1766  11ad		       85 9f		      STA	temp4
   1767  11af				   .
   1768  11af							; 
   1769  11af
   1770  11af				   .L0189		;  _sc2  =  _sc2  &  240  :  _sc3  =  0
   1771  11af
   1772  11af		       a5 94		      LDA	_sc2
   1773  11b1		       29 f0		      AND	#240
   1774  11b3		       85 94		      STA	_sc2
   1775  11b5		       a9 00		      LDA	#0
   1776  11b7		       85 95		      STA	_sc3
   1777  11b9				   .L0190		;  if temp4  >=  100 then _sc2  =  _sc2  +  1	:  temp4  =  temp4  -  100
   1778  11b9
   1779  11b9		       a5 9f		      LDA	temp4
   1780  11bb		       c9 64		      CMP	#100
   1781  11bd		       90 09		      BCC	.skipL0190
   1782  11bf				   .condpart14
   1783  11bf		       e6 94		      INC	_sc2
   1784  11c1		       a5 9f		      LDA	temp4
   1785  11c3		       38		      SEC
   1786  11c4		       e9 64		      SBC	#100
   1787  11c6		       85 9f		      STA	temp4
   1788  11c8				   .skipL0190
   1789  11c8				   .L0191		;  if temp4  >=  100 then _sc2  =  _sc2  +  1	:  temp4  =  temp4  -  100
   1790  11c8
   1791  11c8		       a5 9f		      LDA	temp4
   1792  11ca		       c9 64		      CMP	#100
   1793  11cc		       90 09		      BCC	.skipL0191
   1794  11ce				   .condpart15
   1795  11ce		       e6 94		      INC	_sc2
   1796  11d0		       a5 9f		      LDA	temp4
   1797  11d2		       38		      SEC
   1798  11d3		       e9 64		      SBC	#100
   1799  11d5		       85 9f		      STA	temp4
   1800  11d7				   .skipL0191
   1801  11d7				   .L0192		;  if temp4  >=  50 then _sc3	=  _sc3  +  80	:  temp4  =  temp4  -  50
   1802  11d7
   1803  11d7		       a5 9f		      LDA	temp4
   1804  11d9		       c9 32		      CMP	#50
   1805  11db		       90 0e		      BCC	.skipL0192
   1806  11dd				   .condpart16
   1807  11dd		       a5 95		      LDA	_sc3
   1808  11df		       18		      CLC
   1809  11e0		       69 50		      ADC	#80
   1810  11e2		       85 95		      STA	_sc3
   1811  11e4		       a5 9f		      LDA	temp4
   1812  11e6		       38		      SEC
   1813  11e7		       e9 32		      SBC	#50
   1814  11e9		       85 9f		      STA	temp4
   1815  11eb				   .skipL0192
   1816  11eb				   .L0193		;  if temp4  >=  30 then _sc3	=  _sc3  +  48	:  temp4  =  temp4  -  30
   1817  11eb
   1818  11eb		       a5 9f		      LDA	temp4
   1819  11ed		       c9 1e		      CMP	#30
   1820  11ef		       90 0e		      BCC	.skipL0193
   1821  11f1				   .condpart17
   1822  11f1		       a5 95		      LDA	_sc3
   1823  11f3		       18		      CLC
   1824  11f4		       69 30		      ADC	#48
   1825  11f6		       85 95		      STA	_sc3
   1826  11f8		       a5 9f		      LDA	temp4
   1827  11fa		       38		      SEC
   1828  11fb		       e9 1e		      SBC	#30
   1829  11fd		       85 9f		      STA	temp4
   1830  11ff				   .skipL0193
   1831  11ff				   .L0194		;  if temp4  >=  20 then _sc3	=  _sc3  +  32	:  temp4  =  temp4  -  20
   1832  11ff
   1833  11ff		       a5 9f		      LDA	temp4
   1834  1201		       c9 14		      CMP	#20
   1835  1203		       90 0e		      BCC	.skipL0194
   1836  1205				   .condpart18
   1837  1205		       a5 95		      LDA	_sc3
   1838  1207		       18		      CLC
   1839  1208		       69 20		      ADC	#32
   1840  120a		       85 95		      STA	_sc3
   1841  120c		       a5 9f		      LDA	temp4
   1842  120e		       38		      SEC
   1843  120f		       e9 14		      SBC	#20
   1844  1211		       85 9f		      STA	temp4
   1845  1213				   .skipL0194
   1846  1213				   .L0195		;  if temp4  >=  10 then _sc3	=  _sc3  +  16	:  temp4  =  temp4  -  10
   1847  1213
   1848  1213		       a5 9f		      LDA	temp4
   1849  1215		       c9 0a		      CMP	#10
   1850  1217		       90 0e		      BCC	.skipL0195
   1851  1219				   .condpart19
   1852  1219		       a5 95		      LDA	_sc3
   1853  121b		       18		      CLC
   1854  121c		       69 10		      ADC	#16
   1855  121e		       85 95		      STA	_sc3
   1856  1220		       a5 9f		      LDA	temp4
   1857  1222		       38		      SEC
   1858  1223		       e9 0a		      SBC	#10
   1859  1225		       85 9f		      STA	temp4
   1860  1227				   .skipL0195
   1861  1227				   .L0196		;  _sc3  =  _sc3  |  temp4
   1862  1227
   1863  1227		       a5 95		      LDA	_sc3
   1864  1229		       05 9f		      ORA	temp4
   1865  122b		       85 95		      STA	_sc3
   1866  122d				   .
   1867  122d							; 
   1868  122d
   1869  122d				   .__Skip_Rand_World
   1870  122d							; __Skip_Rand_World
   1871  122d
   1872  122d				   .
   1873  122d							; 
   1874  122d
   1875  122d				   .
   1876  122d							; 
   1877  122d
   1878  122d				   .
   1879  122d							; 
   1880  122d
   1881  122d				   .
   1882  122d							; 
   1883  122d
   1884  122d				   .
   1885  122d							; 
   1886  122d
   1887  122d				   .
   1888  122d							; 
   1889  122d
   1890  122d				   .L0197		;  goto __Special_Rand bank2
   1891  122d
   1892  122d		       85 ee		      sta	temp7
   1893  122f		       a9 b0		      lda	#>(.__Special_Rand-1)
   1894  1231		       48		      pha
   1895  1232		       a9 4b		      lda	#<(.__Special_Rand-1)
   1896  1234		       48		      pha
   1897  1235		       a5 ee		      lda	temp7
   1898  1237		       48		      pha
   1899  1238		       8a		      txa
   1900  1239		       48		      pha
   1901  123a		       a2 02		      ldx	#2
   1902  123c		       4c eb ff 	      jmp	BS_jsr
   1903  123f				   .
   1904  123f							; 
   1905  123f
   1906  123f				   .
   1907  123f							; 
   1908  123f
   1909  123f				   .
   1910  123f							; 
   1911  123f
   1912  123f				   .
   1913  123f							; 
   1914  123f
   1915  123f				   .
   1916  123f							; 
   1917  123f
   1918  123f				   .
   1919  123f							; 
   1920  123f
   1921  123f				   .
   1922  123f							; 
   1923  123f
   1924  123f				   .
   1925  123f							; 
   1926  123f
   1927  123f				   .
   1928  123f							; 
   1929  123f
   1930  123f				   .
   1931  123f							; 
   1932  123f
   1933  123f				   .
   1934  123f							; 
   1935  123f
   1936  123f				   .__Main_Loop
   1937  123f							; __Main_Loop
   1938  123f
   1939  123f				   .
   1940  123f							; 
   1941  123f
   1942  123f				   .
   1943  123f							; 
   1944  123f
   1945  123f				   .
   1946  123f							; 
   1947  123f
   1948  123f				   .
   1949  123f							; 
   1950  123f
   1951  123f				   .
   1952  123f							; 
   1953  123f
   1954  123f				   .
   1955  123f							; 
   1956  123f
   1957  123f				   .
   1958  123f							; 
   1959  123f
   1960  123f				   .L0198		;  COLUP0  =  _1A
   1961  123f
   1962  123f		       a9 1a		      LDA	#_1A
   1963  1241		       85 06		      STA	COLUP0
   1964  1243				   .
   1965  1243							; 
   1966  1243
   1967  1243				   .
   1968  1243							; 
   1969  1243
   1970  1243				   .
   1971  1243							; 
   1972  1243
   1973  1243				   .
   1974  1243							; 
   1975  1243
   1976  1243				   .
   1977  1243							; 
   1978  1243
   1979  1243				   .
   1980  1243							; 
   1981  1243
   1982  1243				   .
   1983  1243							; 
   1984  1243
   1985  1243				   .
   1986  1243							; 
   1987  1243
   1988  1243				   .
   1989  1243							; 
   1990  1243
   1991  1243				   .
   1992  1243							; 
   1993  1243
   1994  1243				   .
   1995  1243							; 
   1996  1243
   1997  1243				   .
   1998  1243							; 
   1999  1243
   2000  1243				   .L0199		;  _Master_Counter  =	_Master_Counter  +  1
   2001  1243
   2002  1243		       e6 d8		      INC	_Master_Counter
   2003  1245				   .
   2004  1245							; 
   2005  1245
   2006  1245				   .
   2007  1245							; 
   2008  1245
   2009  1245				   .
   2010  1245							; 
   2011  1245
   2012  1245				   .
   2013  1245							; 
   2014  1245
   2015  1245				   .L0200		;  if _Master_Counter	<  5 then goto __Skip_Frame_Counter
   2016  1245
   2017  1245		       a5 d8		      LDA	_Master_Counter
   2018  1247		       c9 05		      CMP	#5
   2019  1249		       b0 03		      BCS	.skipL0200
   2020  124b				   .condpart20
   2021  124b		       4c 5e 92 	      jmp	.__Skip_Frame_Counter
   2022  124e
   2023  124e				   .skipL0200
   2024  124e				   .
   2025  124e							; 
   2026  124e
   2027  124e				   .
   2028  124e							; 
   2029  124e
   2030  124e				   .
   2031  124e							; 
   2032  124e
   2033  124e				   .
   2034  124e							; 
   2035  124e
   2036  124e				   .L0201		;  _Frame_Counter  =  _Frame_Counter  +  1
   2037  124e
   2038  124e		       e6 d9		      INC	_Frame_Counter
   2039  1250				   .
   2040  1250							; 
   2041  1250
   2042  1250				   .
   2043  1250							; 
   2044  1250
   2045  1250				   .
   2046  1250							; 
   2047  1250
   2048  1250				   .
   2049  1250							; 
   2050  1250
   2051  1250				   .L0202		;  _Master_Counter  =	0
   2052  1250
   2053  1250		       a9 00		      LDA	#0
   2054  1252		       85 d8		      STA	_Master_Counter
   2055  1254				   .
   2056  1254							; 
   2057  1254
   2058  1254				   .
   2059  1254							; 
   2060  1254
   2061  1254				   .
   2062  1254							; 
   2063  1254
   2064  1254				   .
   2065  1254							; 
   2066  1254
   2067  1254				   .L0203		;  if _Frame_Counter  =  4 then _Frame_Counter  =  0
   2068  1254
   2069  1254		       a5 d9		      LDA	_Frame_Counter
   2070  1256		       c9 04		      CMP	#4
   2071  1258		       d0 04		      BNE	.skipL0203
   2072  125a				   .condpart21
   2073  125a		       a9 00		      LDA	#0
   2074  125c		       85 d9		      STA	_Frame_Counter
   2075  125e				   .skipL0203
   2076  125e				   .
   2077  125e							; 
   2078  125e
   2079  125e				   .__Skip_Frame_Counter
   2080  125e							; __Skip_Frame_Counter
   2081  125e
   2082  125e				   .
   2083  125e							; 
   2084  125e
   2085  125e				   .
   2086  125e							; 
   2087  125e
   2088  125e				   .
   2089  125e							; 
   2090  125e
   2091  125e				   .
   2092  125e							; 
   2093  125e
   2094  125e				   .
   2095  125e							; 
   2096  125e
   2097  125e				   .
   2098  125e							; 
   2099  125e
   2100  125e				   .
   2101  125e							; 
   2102  125e
   2103  125e				   .L0204		;  _Bit5_UD_Joy_Movement{5}  =  0  :  _Bit6_LR_Joy_Movement{6}  =  0  :  _Bit1_Next_Room_Up{1}  =  0  :  _Bit2_Next_Room_Down{2}  =  0  :  _Bit3_Next_Room_Left{3}  =	0  :  _Bit4_Next_Room_Right{4}	=  0
   2104  125e
   2105  125e		       a5 da		      LDA	_Bit5_UD_Joy_Movement
   2106  1260		       29 df		      AND	#223
   2107  1262		       85 da		      STA	_Bit5_UD_Joy_Movement
   2108  1264		       a5 da		      LDA	_Bit6_LR_Joy_Movement
   2109  1266		       29 bf		      AND	#191
   2110  1268		       85 da		      STA	_Bit6_LR_Joy_Movement
   2111  126a		       a5 da		      LDA	_Bit1_Next_Room_Up
   2112  126c		       29 fd		      AND	#253
   2113  126e		       85 da		      STA	_Bit1_Next_Room_Up
   2114  1270		       a5 da		      LDA	_Bit2_Next_Room_Down
   2115  1272		       29 fb		      AND	#251
   2116  1274		       85 da		      STA	_Bit2_Next_Room_Down
   2117  1276		       a5 da		      LDA	_Bit3_Next_Room_Left
   2118  1278		       29 f7		      AND	#247
   2119  127a		       85 da		      STA	_Bit3_Next_Room_Left
   2120  127c		       a5 da		      LDA	_Bit4_Next_Room_Right
   2121  127e		       29 ef		      AND	#239
   2122  1280		       85 da		      STA	_Bit4_Next_Room_Right
   2123  1282				   .
   2124  1282							; 
   2125  1282
   2126  1282				   .
   2127  1282							; 
   2128  1282
   2129  1282				   .
   2130  1282							; 
   2131  1282
   2132  1282				   .
   2133  1282							; 
   2134  1282
   2135  1282				   .
   2136  1282							; 
   2137  1282
   2138  1282				   .
   2139  1282							; 
   2140  1282
   2141  1282				   .
   2142  1282							; 
   2143  1282
   2144  1282				   .L0205		;  player1color:
   2145  1282
   2146  1282		       a2 da		      LDX	#<playercolorL0205_1
   2147  1284		       86 87		      STX	player1color
   2148  1286		       a9 f4		      LDA	#>playercolorL0205_1
   2149  1288		       85 88		      STA	player1color+1
   2150  128a				   .
   2151  128a							; 
   2152  128a
   2153  128a				   .L0206		;  player1:
   2154  128a
   2155  128a		       a2 e4		      LDX	#<playerL0206_1
   2156  128c		       86 8c		      STX	player1pointerlo
   2157  128e		       a9 f4		      LDA	#>playerL0206_1
   2158  1290		       85 8d		      STA	player1pointerhi
   2159  1292		       a9 09		      LDA	#9
   2160  1294		       85 8f		      STA	player1height
   2161  1296				   .
   2162  1296							; 
   2163  1296
   2164  1296				   .
   2165  1296							; 
   2166  1296
   2167  1296				   .
   2168  1296							; 
   2169  1296
   2170  1296				   .
   2171  1296							; 
   2172  1296
   2173  1296				   .
   2174  1296							; 
   2175  1296
   2176  1296				   .
   2177  1296							; 
   2178  1296
   2179  1296				   .
   2180  1296							; 
   2181  1296
   2182  1296				   .
   2183  1296							; 
   2184  1296
   2185  1296				   .
   2186  1296							; 
   2187  1296
   2188  1296				   .
   2189  1296							; 
   2190  1296
   2191  1296				   .L0207		;  if !joy0up then goto __Skip_Joy0_Up
   2192  1296
   2193  1296		       a9 10		      lda	#$10
   2194  1298		       2c 80 02 	      bit	SWCHA
   2195  129b		       f0 03		      BEQ	.skipL0207
   2196  129d				   .condpart22
   2197  129d		       4c 75 93 	      jmp	.__Skip_Joy0_Up
   2198  12a0
   2199  12a0				   .skipL0207
   2200  12a0				   .
   2201  12a0							; 
   2202  12a0
   2203  12a0				   .
   2204  12a0							; 
   2205  12a0
   2206  12a0				   .
   2207  12a0							; 
   2208  12a0
   2209  12a0				   .
   2210  12a0							; 
   2211  12a0
   2212  12a0				   .L0208		;  temp5  =   ( player1x - 11 )  / 4
   2213  12a0
   2214  12a0							; complex statement detected
   2215  12a0		       a5 81		      LDA	player1x
   2216  12a2		       38		      SEC
   2217  12a3		       e9 0b		      SBC	#11
   2218  12a5		       4a		      lsr
   2219  12a6		       4a		      lsr
   2220  12a7		       85 a0		      STA	temp5
   2221  12a9				   .
   2222  12a9							; 
   2223  12a9
   2224  12a9				   .L0209		;  temp6  =   ( player1y - 11 )  / 8
   2225  12a9
   2226  12a9							; complex statement detected
   2227  12a9		       a5 86		      LDA	player1y
   2228  12ab		       38		      SEC
   2229  12ac		       e9 0b		      SBC	#11
   2230  12ae		       4a		      lsr
   2231  12af		       4a		      lsr
   2232  12b0		       4a		      lsr
   2233  12b1		       85 a1		      STA	temp6
   2234  12b3				   .
   2235  12b3							; 
   2236  12b3
   2237  12b3				   .L0210		;  if temp5  <  32 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   2238  12b3
   2239  12b3		       a5 a0		      LDA	temp5
   2240  12b5		       c9 20		      CMP	#32
   2241  12b7		       b0 21		      BCS	.skipL0210
   2242  12b9				   .condpart23
   2243  12b9		       a5 a0		      LDA	temp5
   2244  12bb		       a4 a1		      LDY	temp6
   2245  12bd		       85 ee		      sta	temp7
   2246  12bf		       a9 92		      lda	#>(ret_point2-1)
   2247  12c1		       48		      pha
   2248  12c2		       a9 d4		      lda	#<(ret_point2-1)
   2249  12c4		       48		      pha
   2250  12c5		       a9 f2		      lda	#>(pfread-1)
   2251  12c7		       48		      pha
   2252  12c8		       a9 a9		      lda	#<(pfread-1)
   2253  12ca		       48		      pha
   2254  12cb		       a5 ee		      lda	temp7
   2255  12cd		       48		      pha
   2256  12ce		       8a		      txa
   2257  12cf		       48		      pha
   2258  12d0		       a2 04		      ldx	#4
   2259  12d2		       4c eb ff 	      jmp	BS_jsr
   2260  12d5				   ret_point2
   2261  12d5		       d0 03		      BNE	.skip23then
   2262  12d7				   .condpart24
   2263  12d7		       4c 75 93 	      jmp	.__Skip_Joy0_Up
   2264  12da
   2265  12da				   .skip23then
   2266  12da				   .skipL0210
   2267  12da				   .
   2268  12da							; 
   2269  12da
   2270  12da				   .L0211		;  temp4  =   ( player1x - 16 )  / 4
   2271  12da
   2272  12da							; complex statement detected
   2273  12da		       a5 81		      LDA	player1x
   2274  12dc		       38		      SEC
   2275  12dd		       e9 10		      SBC	#16
   2276  12df		       4a		      lsr
   2277  12e0		       4a		      lsr
   2278  12e1		       85 9f		      STA	temp4
   2279  12e3				   .
   2280  12e3							; 
   2281  12e3
   2282  12e3				   .L0212		;  if temp4  <  32 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   2283  12e3
   2284  12e3		       a5 9f		      LDA	temp4
   2285  12e5		       c9 20		      CMP	#32
   2286  12e7		       b0 21		      BCS	.skipL0212
   2287  12e9				   .condpart25
   2288  12e9		       a5 9f		      LDA	temp4
   2289  12eb		       a4 a1		      LDY	temp6
   2290  12ed		       85 ee		      sta	temp7
   2291  12ef		       a9 93		      lda	#>(ret_point3-1)
   2292  12f1		       48		      pha
   2293  12f2		       a9 04		      lda	#<(ret_point3-1)
   2294  12f4		       48		      pha
   2295  12f5		       a9 f2		      lda	#>(pfread-1)
   2296  12f7		       48		      pha
   2297  12f8		       a9 a9		      lda	#<(pfread-1)
   2298  12fa		       48		      pha
   2299  12fb		       a5 ee		      lda	temp7
   2300  12fd		       48		      pha
   2301  12fe		       8a		      txa
   2302  12ff		       48		      pha
   2303  1300		       a2 04		      ldx	#4
   2304  1302		       4c eb ff 	      jmp	BS_jsr
   2305  1305				   ret_point3
   2306  1305		       d0 03		      BNE	.skip25then
   2307  1307				   .condpart26
   2308  1307		       4c 75 93 	      jmp	.__Skip_Joy0_Up
   2309  130a
   2310  130a				   .skip25then
   2311  130a				   .skipL0212
   2312  130a				   .
   2313  130a							; 
   2314  130a
   2315  130a				   .L0213		;  temp3  =  temp5  -	1
   2316  130a
   2317  130a		       a5 a0		      LDA	temp5
   2318  130c		       38		      SEC
   2319  130d		       e9 01		      SBC	#1
   2320  130f		       85 9e		      STA	temp3
   2321  1311				   .
   2322  1311							; 
   2323  1311
   2324  1311				   .L0214		;  if temp3  <  32 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   2325  1311
   2326  1311		       a5 9e		      LDA	temp3
   2327  1313		       c9 20		      CMP	#32
   2328  1315		       b0 21		      BCS	.skipL0214
   2329  1317				   .condpart27
   2330  1317		       a5 9e		      LDA	temp3
   2331  1319		       a4 a1		      LDY	temp6
   2332  131b		       85 ee		      sta	temp7
   2333  131d		       a9 93		      lda	#>(ret_point4-1)
   2334  131f		       48		      pha
   2335  1320		       a9 32		      lda	#<(ret_point4-1)
   2336  1322		       48		      pha
   2337  1323		       a9 f2		      lda	#>(pfread-1)
   2338  1325		       48		      pha
   2339  1326		       a9 a9		      lda	#<(pfread-1)
   2340  1328		       48		      pha
   2341  1329		       a5 ee		      lda	temp7
   2342  132b		       48		      pha
   2343  132c		       8a		      txa
   2344  132d		       48		      pha
   2345  132e		       a2 04		      ldx	#4
   2346  1330		       4c eb ff 	      jmp	BS_jsr
   2347  1333				   ret_point4
   2348  1333		       d0 03		      BNE	.skip27then
   2349  1335				   .condpart28
   2350  1335		       4c 75 93 	      jmp	.__Skip_Joy0_Up
   2351  1338
   2352  1338				   .skip27then
   2353  1338				   .skipL0214
   2354  1338				   .
   2355  1338							; 
   2356  1338
   2357  1338				   .
   2358  1338							; 
   2359  1338
   2360  1338				   .
   2361  1338							; 
   2362  1338
   2363  1338				   .
   2364  1338							; 
   2365  1338
   2366  1338				   .L0215		;  _Bit5_UD_Joy_Movement{5}  =  1
   2367  1338
   2368  1338		       a5 da		      LDA	_Bit5_UD_Joy_Movement
   2369  133a		       09 20		      ORA	#32
   2370  133c		       85 da		      STA	_Bit5_UD_Joy_Movement
   2371  133e				   .
   2372  133e							; 
   2373  133e
   2374  133e				   .
   2375  133e							; 
   2376  133e
   2377  133e				   .
   2378  133e							; 
   2379  133e
   2380  133e				   .
   2381  133e							; 
   2382  133e
   2383  133e				   .L0216		;  _P1_Up_Down  =  _P1_Up_Down  -  1.18
   2384  133e
   2385  133e		       a5 dc		      LDA	i
   2386  1340		       38		      SEC
   2387  1341		       e9 2e		      SBC	#46
   2388  1343		       85 dc		      STA	i
   2389  1345		       a5 86		      LDA	_P1_Up_Down
   2390  1347		       e9 01		      SBC	#1
   2391  1349		       85 86		      STA	_P1_Up_Down
   2392  134b				   .
   2393  134b							; 
   2394  134b
   2395  134b				   .
   2396  134b							; 
   2397  134b
   2398  134b				   .
   2399  134b							; 
   2400  134b
   2401  134b				   .
   2402  134b							; 
   2403  134b
   2404  134b				   .L0217		;  player1color:
   2405  134b
   2406  134b		       a2 ee		      LDX	#<playercolorL0217_1
   2407  134d		       86 87		      STX	player1color
   2408  134f		       a9 f4		      LDA	#>playercolorL0217_1
   2409  1351		       85 88		      STA	player1color+1
   2410  1353				   .
   2411  1353							; 
   2412  1353
   2413  1353				   .
   2414  1353							; 
   2415  1353
   2416  1353				   .
   2417  1353							; 
   2418  1353
   2419  1353				   .
   2420  1353							; 
   2421  1353
   2422  1353				   .L0218		;  if player1y  >=  _c_Edge_Top then goto __Skip_Joy0_Up
   2423  1353
   2424  1353		       a5 86		      LDA	player1y
   2425  1355		       c9 0a		      CMP	#_c_Edge_Top
   2426  1357		       90 03		      BCC	.skipL0218
   2427  1359				   .condpart29
   2428  1359		       4c 75 93 	      jmp	.__Skip_Joy0_Up
   2429  135c
   2430  135c				   .skipL0218
   2431  135c				   .
   2432  135c							; 
   2433  135c
   2434  135c				   .
   2435  135c							; 
   2436  135c
   2437  135c				   .
   2438  135c							; 
   2439  135c
   2440  135c				   .
   2441  135c							; 
   2442  135c
   2443  135c				   .L0219		;  if _YRoom  =  _c_World_Limit_Top then player1y  =  _c_Edge_Top  :  goto __Skip_Joy0_Up
   2444  135c
   2445  135c		       a5 d5		      LDA	_YRoom
   2446  135e		       c9 00		      CMP	#_c_World_Limit_Top
   2447  1360		       d0 07		      BNE	.skipL0219
   2448  1362				   .condpart30
   2449  1362		       a9 0a		      LDA	#_c_Edge_Top
   2450  1364		       85 86		      STA	player1y
   2451  1366		       4c 75 93 	      jmp	.__Skip_Joy0_Up
   2452  1369
   2453  1369				   .skipL0219
   2454  1369				   .
   2455  1369							; 
   2456  1369
   2457  1369				   .
   2458  1369							; 
   2459  1369
   2460  1369				   .
   2461  1369							; 
   2462  1369
   2463  1369				   .
   2464  1369							; 
   2465  1369
   2466  1369				   .L0220		;  player1y  =  _c_Edge_Bottom
   2467  1369
   2468  1369		       a9 58		      LDA	#_c_Edge_Bottom
   2469  136b		       85 86		      STA	player1y
   2470  136d				   .
   2471  136d							; 
   2472  136d
   2473  136d				   .
   2474  136d							; 
   2475  136d
   2476  136d				   .
   2477  136d							; 
   2478  136d
   2479  136d				   .
   2480  136d							; 
   2481  136d
   2482  136d				   .L0221		;  _YRoom  =  _YRoom  -  1
   2483  136d
   2484  136d		       c6 d5		      DEC	_YRoom
   2485  136f				   .
   2486  136f							; 
   2487  136f
   2488  136f				   .L0222		;  _Bit1_Next_Room_Up{1}  =  1
   2489  136f
   2490  136f		       a5 da		      LDA	_Bit1_Next_Room_Up
   2491  1371		       09 02		      ORA	#2
   2492  1373		       85 da		      STA	_Bit1_Next_Room_Up
   2493  1375				   .
   2494  1375							; 
   2495  1375
   2496  1375				   .__Skip_Joy0_Up
   2497  1375							; __Skip_Joy0_Up
   2498  1375
   2499  1375				   .
   2500  1375							; 
   2501  1375
   2502  1375				   .
   2503  1375							; 
   2504  1375
   2505  1375				   .
   2506  1375							; 
   2507  1375
   2508  1375				   .
   2509  1375							; 
   2510  1375
   2511  1375				   .
   2512  1375							; 
   2513  1375
   2514  1375				   .
   2515  1375							; 
   2516  1375
   2517  1375				   .
   2518  1375							; 
   2519  1375
   2520  1375				   .
   2521  1375							; 
   2522  1375
   2523  1375				   .
   2524  1375							; 
   2525  1375
   2526  1375				   .
   2527  1375							; 
   2528  1375
   2529  1375				   .L0223		;  if !joy0down then goto __Skip_Joy0_Down
   2530  1375
   2531  1375		       a9 20		      lda	#$20
   2532  1377		       2c 80 02 	      bit	SWCHA
   2533  137a		       f0 03		      BEQ	.skipL0223
   2534  137c				   .condpart31
   2535  137c		       4c 4c 94 	      jmp	.__Skip_Joy0_Down
   2536  137f
   2537  137f				   .skipL0223
   2538  137f				   .
   2539  137f							; 
   2540  137f
   2541  137f				   .
   2542  137f							; 
   2543  137f
   2544  137f				   .
   2545  137f							; 
   2546  137f
   2547  137f				   .
   2548  137f							; 
   2549  137f
   2550  137f				   .L0224		;  temp5  =   ( player1x - 11 )  / 4
   2551  137f
   2552  137f							; complex statement detected
   2553  137f		       a5 81		      LDA	player1x
   2554  1381		       38		      SEC
   2555  1382		       e9 0b		      SBC	#11
   2556  1384		       4a		      lsr
   2557  1385		       4a		      lsr
   2558  1386		       85 a0		      STA	temp5
   2559  1388				   .
   2560  1388							; 
   2561  1388
   2562  1388				   .L0225		;  temp6  =   ( player1y + 1 )  / 8
   2563  1388
   2564  1388							; complex statement detected
   2565  1388		       a5 86		      LDA	player1y
   2566  138a		       18		      CLC
   2567  138b		       69 01		      ADC	#1
   2568  138d		       4a		      lsr
   2569  138e		       4a		      lsr
   2570  138f		       4a		      lsr
   2571  1390		       85 a1		      STA	temp6
   2572  1392				   .
   2573  1392							; 
   2574  1392
   2575  1392				   .L0226		;  if temp5  <  32 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   2576  1392
   2577  1392		       a5 a0		      LDA	temp5
   2578  1394		       c9 20		      CMP	#32
   2579  1396		       b0 21		      BCS	.skipL0226
   2580  1398				   .condpart32
   2581  1398		       a5 a0		      LDA	temp5
   2582  139a		       a4 a1		      LDY	temp6
   2583  139c		       85 ee		      sta	temp7
   2584  139e		       a9 93		      lda	#>(ret_point5-1)
   2585  13a0		       48		      pha
   2586  13a1		       a9 b3		      lda	#<(ret_point5-1)
   2587  13a3		       48		      pha
   2588  13a4		       a9 f2		      lda	#>(pfread-1)
   2589  13a6		       48		      pha
   2590  13a7		       a9 a9		      lda	#<(pfread-1)
   2591  13a9		       48		      pha
   2592  13aa		       a5 ee		      lda	temp7
   2593  13ac		       48		      pha
   2594  13ad		       8a		      txa
   2595  13ae		       48		      pha
   2596  13af		       a2 04		      ldx	#4
   2597  13b1		       4c eb ff 	      jmp	BS_jsr
   2598  13b4				   ret_point5
   2599  13b4		       d0 03		      BNE	.skip32then
   2600  13b6				   .condpart33
   2601  13b6		       4c 4c 94 	      jmp	.__Skip_Joy0_Down
   2602  13b9
   2603  13b9				   .skip32then
   2604  13b9				   .skipL0226
   2605  13b9				   .
   2606  13b9							; 
   2607  13b9
   2608  13b9				   .L0227		;  temp4  =   ( player1x - 16 )  / 4
   2609  13b9
   2610  13b9							; complex statement detected
   2611  13b9		       a5 81		      LDA	player1x
   2612  13bb		       38		      SEC
   2613  13bc		       e9 10		      SBC	#16
   2614  13be		       4a		      lsr
   2615  13bf		       4a		      lsr
   2616  13c0		       85 9f		      STA	temp4
   2617  13c2				   .
   2618  13c2							; 
   2619  13c2
   2620  13c2				   .L0228		;  if temp4  <  32 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   2621  13c2
   2622  13c2		       a5 9f		      LDA	temp4
   2623  13c4		       c9 20		      CMP	#32
   2624  13c6		       b0 21		      BCS	.skipL0228
   2625  13c8				   .condpart34
   2626  13c8		       a5 9f		      LDA	temp4
   2627  13ca		       a4 a1		      LDY	temp6
   2628  13cc		       85 ee		      sta	temp7
   2629  13ce		       a9 93		      lda	#>(ret_point6-1)
   2630  13d0		       48		      pha
   2631  13d1		       a9 e3		      lda	#<(ret_point6-1)
   2632  13d3		       48		      pha
   2633  13d4		       a9 f2		      lda	#>(pfread-1)
   2634  13d6		       48		      pha
   2635  13d7		       a9 a9		      lda	#<(pfread-1)
   2636  13d9		       48		      pha
   2637  13da		       a5 ee		      lda	temp7
   2638  13dc		       48		      pha
   2639  13dd		       8a		      txa
   2640  13de		       48		      pha
   2641  13df		       a2 04		      ldx	#4
   2642  13e1		       4c eb ff 	      jmp	BS_jsr
   2643  13e4				   ret_point6
   2644  13e4		       d0 03		      BNE	.skip34then
   2645  13e6				   .condpart35
   2646  13e6		       4c 4c 94 	      jmp	.__Skip_Joy0_Down
   2647  13e9
   2648  13e9				   .skip34then
   2649  13e9				   .skipL0228
   2650  13e9				   .
   2651  13e9							; 
   2652  13e9
   2653  13e9				   .L0229		;  temp3  =  temp5  -	1
   2654  13e9
   2655  13e9		       a5 a0		      LDA	temp5
   2656  13eb		       38		      SEC
   2657  13ec		       e9 01		      SBC	#1
   2658  13ee		       85 9e		      STA	temp3
   2659  13f0				   .
   2660  13f0							; 
   2661  13f0
   2662  13f0				   .L0230		;  if temp3  <  32 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   2663  13f0
   2664  13f0		       a5 9e		      LDA	temp3
   2665  13f2		       c9 20		      CMP	#32
   2666  13f4		       b0 21		      BCS	.skipL0230
   2667  13f6				   .condpart36
   2668  13f6		       a5 9e		      LDA	temp3
   2669  13f8		       a4 a1		      LDY	temp6
   2670  13fa		       85 ee		      sta	temp7
   2671  13fc		       a9 94		      lda	#>(ret_point7-1)
   2672  13fe		       48		      pha
   2673  13ff		       a9 11		      lda	#<(ret_point7-1)
   2674  1401		       48		      pha
   2675  1402		       a9 f2		      lda	#>(pfread-1)
   2676  1404		       48		      pha
   2677  1405		       a9 a9		      lda	#<(pfread-1)
   2678  1407		       48		      pha
   2679  1408		       a5 ee		      lda	temp7
   2680  140a		       48		      pha
   2681  140b		       8a		      txa
   2682  140c		       48		      pha
   2683  140d		       a2 04		      ldx	#4
   2684  140f		       4c eb ff 	      jmp	BS_jsr
   2685  1412				   ret_point7
   2686  1412		       d0 03		      BNE	.skip36then
   2687  1414				   .condpart37
   2688  1414		       4c 4c 94 	      jmp	.__Skip_Joy0_Down
   2689  1417
   2690  1417				   .skip36then
   2691  1417				   .skipL0230
   2692  1417				   .
   2693  1417							; 
   2694  1417
   2695  1417				   .
   2696  1417							; 
   2697  1417
   2698  1417				   .
   2699  1417							; 
   2700  1417
   2701  1417				   .
   2702  1417							; 
   2703  1417
   2704  1417				   .L0231		;  _Bit5_UD_Joy_Movement{5}  =  1
   2705  1417
   2706  1417		       a5 da		      LDA	_Bit5_UD_Joy_Movement
   2707  1419		       09 20		      ORA	#32
   2708  141b		       85 da		      STA	_Bit5_UD_Joy_Movement
   2709  141d				   .
   2710  141d							; 
   2711  141d
   2712  141d				   .
   2713  141d							; 
   2714  141d
   2715  141d				   .
   2716  141d							; 
   2717  141d
   2718  141d				   .
   2719  141d							; 
   2720  141d
   2721  141d				   .L0232		;  _P1_Up_Down  =  _P1_Up_Down  +  1.18
   2722  141d
   2723  141d		       a5 dc		      LDA	i
   2724  141f		       18		      CLC
   2725  1420		       69 2e		      ADC	#46
   2726  1422		       85 dc		      STA	i
   2727  1424		       a5 86		      LDA	_P1_Up_Down
   2728  1426		       69 01		      ADC	#1
   2729  1428		       85 86		      STA	_P1_Up_Down
   2730  142a				   .
   2731  142a							; 
   2732  142a
   2733  142a				   .
   2734  142a							; 
   2735  142a
   2736  142a				   .
   2737  142a							; 
   2738  142a
   2739  142a				   .
   2740  142a							; 
   2741  142a
   2742  142a				   .L0233		;  if player1y  <=  _c_Edge_Bottom then goto __Skip_Joy0_Down
   2743  142a
   2744  142a		       a9 58		      LDA	#_c_Edge_Bottom
   2745  142c		       c5 86		      CMP	player1y
   2746  142e		       90 03		      BCC	.skipL0233
   2747  1430				   .condpart38
   2748  1430		       4c 4c 94 	      jmp	.__Skip_Joy0_Down
   2749  1433
   2750  1433				   .skipL0233
   2751  1433				   .
   2752  1433							; 
   2753  1433
   2754  1433				   .
   2755  1433							; 
   2756  1433
   2757  1433				   .
   2758  1433							; 
   2759  1433
   2760  1433				   .
   2761  1433							; 
   2762  1433
   2763  1433				   .L0234		;  if _YRoom  =  _c_World_Limit_Bottom then player1y  =  _c_Edge_Bottom  :  goto __Skip_Joy0_Down
   2764  1433
   2765  1433		       a5 d5		      LDA	_YRoom
   2766  1435		       c9 0f		      CMP	#_c_World_Limit_Bottom
   2767  1437		       d0 07		      BNE	.skipL0234
   2768  1439				   .condpart39
   2769  1439		       a9 58		      LDA	#_c_Edge_Bottom
   2770  143b		       85 86		      STA	player1y
   2771  143d		       4c 4c 94 	      jmp	.__Skip_Joy0_Down
   2772  1440
   2773  1440				   .skipL0234
   2774  1440				   .
   2775  1440							; 
   2776  1440
   2777  1440				   .
   2778  1440							; 
   2779  1440
   2780  1440				   .
   2781  1440							; 
   2782  1440
   2783  1440				   .
   2784  1440							; 
   2785  1440
   2786  1440				   .L0235		;  player1y  =  _c_Edge_Top
   2787  1440
   2788  1440		       a9 0a		      LDA	#_c_Edge_Top
   2789  1442		       85 86		      STA	player1y
   2790  1444				   .
   2791  1444							; 
   2792  1444
   2793  1444				   .
   2794  1444							; 
   2795  1444
   2796  1444				   .
   2797  1444							; 
   2798  1444
   2799  1444				   .
   2800  1444							; 
   2801  1444
   2802  1444				   .L0236		;  _YRoom  =  _YRoom  +  1
   2803  1444
   2804  1444		       e6 d5		      INC	_YRoom
   2805  1446				   .
   2806  1446							; 
   2807  1446
   2808  1446				   .L0237		;  _Bit2_Next_Room_Down{2}  =	1
   2809  1446
   2810  1446		       a5 da		      LDA	_Bit2_Next_Room_Down
   2811  1448		       09 04		      ORA	#4
   2812  144a		       85 da		      STA	_Bit2_Next_Room_Down
   2813  144c				   .
   2814  144c							; 
   2815  144c
   2816  144c				   .__Skip_Joy0_Down
   2817  144c							; __Skip_Joy0_Down
   2818  144c
   2819  144c				   .
   2820  144c							; 
   2821  144c
   2822  144c				   .
   2823  144c							; 
   2824  144c
   2825  144c				   .
   2826  144c							; 
   2827  144c
   2828  144c				   .
   2829  144c							; 
   2830  144c
   2831  144c				   .
   2832  144c							; 
   2833  144c
   2834  144c				   .
   2835  144c							; 
   2836  144c
   2837  144c				   .
   2838  144c							; 
   2839  144c
   2840  144c				   .
   2841  144c							; 
   2842  144c
   2843  144c				   .
   2844  144c							; 
   2845  144c
   2846  144c				   .
   2847  144c							; 
   2848  144c
   2849  144c				   .L0238		;  if !joy0left then goto __Skip_Joy0_Left
   2850  144c
   2851  144c		       2c 80 02 	      bit	SWCHA
   2852  144f		       50 03		      BVC	.skipL0238
   2853  1451				   .condpart40
   2854  1451		       4c 01 95 	      jmp	.__Skip_Joy0_Left
   2855  1454
   2856  1454				   .skipL0238
   2857  1454				   .
   2858  1454							; 
   2859  1454
   2860  1454				   .
   2861  1454							; 
   2862  1454
   2863  1454				   .
   2864  1454							; 
   2865  1454
   2866  1454				   .
   2867  1454							; 
   2868  1454
   2869  1454				   .L0239		;  temp5  =   ( player1y - 1 )  / 8
   2870  1454
   2871  1454							; complex statement detected
   2872  1454		       a5 86		      LDA	player1y
   2873  1456		       38		      SEC
   2874  1457		       e9 01		      SBC	#1
   2875  1459		       4a		      lsr
   2876  145a		       4a		      lsr
   2877  145b		       4a		      lsr
   2878  145c		       85 a0		      STA	temp5
   2879  145e				   .
   2880  145e							; 
   2881  145e
   2882  145e				   .L0240		;  temp6  =   ( player1x - 18 )  / 4
   2883  145e
   2884  145e							; complex statement detected
   2885  145e		       a5 81		      LDA	player1x
   2886  1460		       38		      SEC
   2887  1461		       e9 12		      SBC	#18
   2888  1463		       4a		      lsr
   2889  1464		       4a		      lsr
   2890  1465		       85 a1		      STA	temp6
   2891  1467				   .
   2892  1467							; 
   2893  1467
   2894  1467				   .L0241		;  if temp6  <  32 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   2895  1467
   2896  1467		       a5 a1		      LDA	temp6
   2897  1469		       c9 20		      CMP	#32
   2898  146b		       b0 21		      BCS	.skipL0241
   2899  146d				   .condpart41
   2900  146d		       a5 a1		      LDA	temp6
   2901  146f		       a4 a0		      LDY	temp5
   2902  1471		       85 ee		      sta	temp7
   2903  1473		       a9 94		      lda	#>(ret_point8-1)
   2904  1475		       48		      pha
   2905  1476		       a9 88		      lda	#<(ret_point8-1)
   2906  1478		       48		      pha
   2907  1479		       a9 f2		      lda	#>(pfread-1)
   2908  147b		       48		      pha
   2909  147c		       a9 a9		      lda	#<(pfread-1)
   2910  147e		       48		      pha
   2911  147f		       a5 ee		      lda	temp7
   2912  1481		       48		      pha
   2913  1482		       8a		      txa
   2914  1483		       48		      pha
   2915  1484		       a2 04		      ldx	#4
   2916  1486		       4c eb ff 	      jmp	BS_jsr
   2917  1489				   ret_point8
   2918  1489		       d0 03		      BNE	.skip41then
   2919  148b				   .condpart42
   2920  148b		       4c 01 95 	      jmp	.__Skip_Joy0_Left
   2921  148e
   2922  148e				   .skip41then
   2923  148e				   .skipL0241
   2924  148e				   .
   2925  148e							; 
   2926  148e
   2927  148e				   .L0242		;  temp3  =   ( player1y - 9 )  / 8
   2928  148e
   2929  148e							; complex statement detected
   2930  148e		       a5 86		      LDA	player1y
   2931  1490		       38		      SEC
   2932  1491		       e9 09		      SBC	#9
   2933  1493		       4a		      lsr
   2934  1494		       4a		      lsr
   2935  1495		       4a		      lsr
   2936  1496		       85 9e		      STA	temp3
   2937  1498				   .
   2938  1498							; 
   2939  1498
   2940  1498				   .L0243		;  if temp6  <  32 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   2941  1498
   2942  1498		       a5 a1		      LDA	temp6
   2943  149a		       c9 20		      CMP	#32
   2944  149c		       b0 21		      BCS	.skipL0243
   2945  149e				   .condpart43
   2946  149e		       a5 a1		      LDA	temp6
   2947  14a0		       a4 9e		      LDY	temp3
   2948  14a2		       85 ee		      sta	temp7
   2949  14a4		       a9 94		      lda	#>(ret_point9-1)
   2950  14a6		       48		      pha
   2951  14a7		       a9 b9		      lda	#<(ret_point9-1)
   2952  14a9		       48		      pha
   2953  14aa		       a9 f2		      lda	#>(pfread-1)
   2954  14ac		       48		      pha
   2955  14ad		       a9 a9		      lda	#<(pfread-1)
   2956  14af		       48		      pha
   2957  14b0		       a5 ee		      lda	temp7
   2958  14b2		       48		      pha
   2959  14b3		       8a		      txa
   2960  14b4		       48		      pha
   2961  14b5		       a2 04		      ldx	#4
   2962  14b7		       4c eb ff 	      jmp	BS_jsr
   2963  14ba				   ret_point9
   2964  14ba		       d0 03		      BNE	.skip43then
   2965  14bc				   .condpart44
   2966  14bc		       4c 01 95 	      jmp	.__Skip_Joy0_Left
   2967  14bf
   2968  14bf				   .skip43then
   2969  14bf				   .skipL0243
   2970  14bf				   .
   2971  14bf							; 
   2972  14bf
   2973  14bf				   .
   2974  14bf							; 
   2975  14bf
   2976  14bf				   .
   2977  14bf							; 
   2978  14bf
   2979  14bf				   .
   2980  14bf							; 
   2981  14bf
   2982  14bf				   .L0244		;  _Bit6_LR_Joy_Movement{6}  =  1
   2983  14bf
   2984  14bf		       a5 da		      LDA	_Bit6_LR_Joy_Movement
   2985  14c1		       09 40		      ORA	#64
   2986  14c3		       85 da		      STA	_Bit6_LR_Joy_Movement
   2987  14c5				   .
   2988  14c5							; 
   2989  14c5
   2990  14c5				   .
   2991  14c5							; 
   2992  14c5
   2993  14c5				   .
   2994  14c5							; 
   2995  14c5
   2996  14c5				   .
   2997  14c5							; 
   2998  14c5
   2999  14c5				   .L0245		;  _P1_Left_Right  =  _P1_Left_Right  -  1.48
   3000  14c5
   3001  14c5		       a5 db		      LDA	h
   3002  14c7		       38		      SEC
   3003  14c8		       e9 7a		      SBC	#122
   3004  14ca		       85 db		      STA	h
   3005  14cc		       a5 81		      LDA	_P1_Left_Right
   3006  14ce		       e9 01		      SBC	#1
   3007  14d0		       85 81		      STA	_P1_Left_Right
   3008  14d2				   .
   3009  14d2							; 
   3010  14d2
   3011  14d2				   .
   3012  14d2							; 
   3013  14d2
   3014  14d2				   .
   3015  14d2							; 
   3016  14d2
   3017  14d2				   .
   3018  14d2							; 
   3019  14d2
   3020  14d2				   .L0246		;  REFP1  =  0
   3021  14d2
   3022  14d2		       a9 00		      LDA	#0
   3023  14d4		       85 0c		      STA	REFP1
   3024  14d6				   .
   3025  14d6							; 
   3026  14d6
   3027  14d6				   .
   3028  14d6							; 
   3029  14d6
   3030  14d6				   .
   3031  14d6							; 
   3032  14d6
   3033  14d6				   .
   3034  14d6							; 
   3035  14d6
   3036  14d6				   .L0247		;  if player1x  >=  _c_Edge_Left then goto __Skip_Joy0_Left
   3037  14d6
   3038  14d6		       a5 81		      LDA	player1x
   3039  14d8		       c9 02		      CMP	#_c_Edge_Left
   3040  14da		       90 03		      BCC	.skipL0247
   3041  14dc				   .condpart45
   3042  14dc		       4c 01 95 	      jmp	.__Skip_Joy0_Left
   3043  14df
   3044  14df				   .skipL0247
   3045  14df				   .
   3046  14df							; 
   3047  14df
   3048  14df				   .
   3049  14df							; 
   3050  14df
   3051  14df				   .
   3052  14df							; 
   3053  14df
   3054  14df				   .
   3055  14df							; 
   3056  14df
   3057  14df				   .L0248		;  if _XRoom  =  _c_World_Limit_Left then player1x  =	_c_Edge_Left  :  goto __Skip_Joy0_Left
   3058  14df
   3059  14df		       a5 d4		      LDA	_XRoom
   3060  14e1		       c9 00		      CMP	#_c_World_Limit_Left
   3061  14e3		       d0 07		      BNE	.skipL0248
   3062  14e5				   .condpart46
   3063  14e5		       a9 02		      LDA	#_c_Edge_Left
   3064  14e7		       85 81		      STA	player1x
   3065  14e9		       4c 01 95 	      jmp	.__Skip_Joy0_Left
   3066  14ec
   3067  14ec				   .skipL0248
   3068  14ec				   .
   3069  14ec							; 
   3070  14ec
   3071  14ec				   .
   3072  14ec							; 
   3073  14ec
   3074  14ec				   .
   3075  14ec							; 
   3076  14ec
   3077  14ec				   .
   3078  14ec							; 
   3079  14ec
   3080  14ec				   .L0249		;  if _Bit1_Next_Room_Up{1} then goto __Skip_Joy0_Left
   3081  14ec
   3082  14ec		       a5 da		      LDA	_Bit1_Next_Room_Up
   3083  14ee		       29 02		      AND	#2
   3084  14f0		       f0 03		      BEQ	.skipL0249
   3085  14f2				   .condpart47
   3086  14f2		       4c 01 95 	      jmp	.__Skip_Joy0_Left
   3087  14f5
   3088  14f5				   .skipL0249
   3089  14f5				   .
   3090  14f5							; 
   3091  14f5
   3092  14f5				   .
   3093  14f5							; 
   3094  14f5
   3095  14f5				   .
   3096  14f5							; 
   3097  14f5
   3098  14f5				   .
   3099  14f5							; 
   3100  14f5
   3101  14f5				   .L0250		;  player1x  =  _c_Edge_Right
   3102  14f5
   3103  14f5		       a9 99		      LDA	#_c_Edge_Right
   3104  14f7		       85 81		      STA	player1x
   3105  14f9				   .
   3106  14f9							; 
   3107  14f9
   3108  14f9				   .
   3109  14f9							; 
   3110  14f9
   3111  14f9				   .
   3112  14f9							; 
   3113  14f9
   3114  14f9				   .
   3115  14f9							; 
   3116  14f9
   3117  14f9				   .L0251		;  _XRoom  =  _XRoom  -  1
   3118  14f9
   3119  14f9		       c6 d4		      DEC	_XRoom
   3120  14fb				   .
   3121  14fb							; 
   3122  14fb
   3123  14fb				   .L0252		;  _Bit3_Next_Room_Left{3}  =	1
   3124  14fb
   3125  14fb		       a5 da		      LDA	_Bit3_Next_Room_Left
   3126  14fd		       09 08		      ORA	#8
   3127  14ff		       85 da		      STA	_Bit3_Next_Room_Left
   3128  1501				   .
   3129  1501							; 
   3130  1501
   3131  1501				   .__Skip_Joy0_Left
   3132  1501							; __Skip_Joy0_Left
   3133  1501
   3134  1501				   .
   3135  1501							; 
   3136  1501
   3137  1501				   .
   3138  1501							; 
   3139  1501
   3140  1501				   .
   3141  1501							; 
   3142  1501
   3143  1501				   .
   3144  1501							; 
   3145  1501
   3146  1501				   .
   3147  1501							; 
   3148  1501
   3149  1501				   .
   3150  1501							; 
   3151  1501
   3152  1501				   .
   3153  1501							; 
   3154  1501
   3155  1501				   .
   3156  1501							; 
   3157  1501
   3158  1501				   .
   3159  1501							; 
   3160  1501
   3161  1501				   .
   3162  1501							; 
   3163  1501
   3164  1501				   .L0253		;  if !joy0right then goto __Skip_Joy0_Right
   3165  1501
   3166  1501		       2c 80 02 	      bit	SWCHA
   3167  1504		       10 03		      BPL	.skipL0253
   3168  1506				   .condpart48
   3169  1506		       4c b6 95 	      jmp	.__Skip_Joy0_Right
   3170  1509
   3171  1509				   .skipL0253
   3172  1509				   .
   3173  1509							; 
   3174  1509
   3175  1509				   .
   3176  1509							; 
   3177  1509
   3178  1509				   .
   3179  1509							; 
   3180  1509
   3181  1509				   .
   3182  1509							; 
   3183  1509
   3184  1509				   .L0254		;  temp5  =   ( player1y - 1 )  / 8
   3185  1509
   3186  1509							; complex statement detected
   3187  1509		       a5 86		      LDA	player1y
   3188  150b		       38		      SEC
   3189  150c		       e9 01		      SBC	#1
   3190  150e		       4a		      lsr
   3191  150f		       4a		      lsr
   3192  1510		       4a		      lsr
   3193  1511		       85 a0		      STA	temp5
   3194  1513				   .
   3195  1513							; 
   3196  1513
   3197  1513				   .L0255		;  temp6  =   ( player1x - 9 )  / 4
   3198  1513
   3199  1513							; complex statement detected
   3200  1513		       a5 81		      LDA	player1x
   3201  1515		       38		      SEC
   3202  1516		       e9 09		      SBC	#9
   3203  1518		       4a		      lsr
   3204  1519		       4a		      lsr
   3205  151a		       85 a1		      STA	temp6
   3206  151c				   .
   3207  151c							; 
   3208  151c
   3209  151c				   .L0256		;  if temp6  <  32 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   3210  151c
   3211  151c		       a5 a1		      LDA	temp6
   3212  151e		       c9 20		      CMP	#32
   3213  1520		       b0 21		      BCS	.skipL0256
   3214  1522				   .condpart49
   3215  1522		       a5 a1		      LDA	temp6
   3216  1524		       a4 a0		      LDY	temp5
   3217  1526		       85 ee		      sta	temp7
   3218  1528		       a9 95		      lda	#>(ret_point10-1)
   3219  152a		       48		      pha
   3220  152b		       a9 3d		      lda	#<(ret_point10-1)
   3221  152d		       48		      pha
   3222  152e		       a9 f2		      lda	#>(pfread-1)
   3223  1530		       48		      pha
   3224  1531		       a9 a9		      lda	#<(pfread-1)
   3225  1533		       48		      pha
   3226  1534		       a5 ee		      lda	temp7
   3227  1536		       48		      pha
   3228  1537		       8a		      txa
   3229  1538		       48		      pha
   3230  1539		       a2 04		      ldx	#4
   3231  153b		       4c eb ff 	      jmp	BS_jsr
   3232  153e				   ret_point10
   3233  153e		       d0 03		      BNE	.skip49then
   3234  1540				   .condpart50
   3235  1540		       4c b6 95 	      jmp	.__Skip_Joy0_Right
   3236  1543
   3237  1543				   .skip49then
   3238  1543				   .skipL0256
   3239  1543				   .
   3240  1543							; 
   3241  1543
   3242  1543				   .L0257		;  temp3  =   ( player1y - 9 )  / 8
   3243  1543
   3244  1543							; complex statement detected
   3245  1543		       a5 86		      LDA	player1y
   3246  1545		       38		      SEC
   3247  1546		       e9 09		      SBC	#9
   3248  1548		       4a		      lsr
   3249  1549		       4a		      lsr
   3250  154a		       4a		      lsr
   3251  154b		       85 9e		      STA	temp3
   3252  154d				   .
   3253  154d							; 
   3254  154d
   3255  154d				   .L0258		;  if temp6  <  32 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   3256  154d
   3257  154d		       a5 a1		      LDA	temp6
   3258  154f		       c9 20		      CMP	#32
   3259  1551		       b0 21		      BCS	.skipL0258
   3260  1553				   .condpart51
   3261  1553		       a5 a1		      LDA	temp6
   3262  1555		       a4 9e		      LDY	temp3
   3263  1557		       85 ee		      sta	temp7
   3264  1559		       a9 95		      lda	#>(ret_point11-1)
   3265  155b		       48		      pha
   3266  155c		       a9 6e		      lda	#<(ret_point11-1)
   3267  155e		       48		      pha
   3268  155f		       a9 f2		      lda	#>(pfread-1)
   3269  1561		       48		      pha
   3270  1562		       a9 a9		      lda	#<(pfread-1)
   3271  1564		       48		      pha
   3272  1565		       a5 ee		      lda	temp7
   3273  1567		       48		      pha
   3274  1568		       8a		      txa
   3275  1569		       48		      pha
   3276  156a		       a2 04		      ldx	#4
   3277  156c		       4c eb ff 	      jmp	BS_jsr
   3278  156f				   ret_point11
   3279  156f		       d0 03		      BNE	.skip51then
   3280  1571				   .condpart52
   3281  1571		       4c b6 95 	      jmp	.__Skip_Joy0_Right
   3282  1574
   3283  1574				   .skip51then
   3284  1574				   .skipL0258
   3285  1574				   .
   3286  1574							; 
   3287  1574
   3288  1574				   .
   3289  1574							; 
   3290  1574
   3291  1574				   .
   3292  1574							; 
   3293  1574
   3294  1574				   .
   3295  1574							; 
   3296  1574
   3297  1574				   .L0259		;  _Bit6_LR_Joy_Movement{6}  =  1
   3298  1574
   3299  1574		       a5 da		      LDA	_Bit6_LR_Joy_Movement
   3300  1576		       09 40		      ORA	#64
   3301  1578		       85 da		      STA	_Bit6_LR_Joy_Movement
   3302  157a				   .
   3303  157a							; 
   3304  157a
   3305  157a				   .
   3306  157a							; 
   3307  157a
   3308  157a				   .
   3309  157a							; 
   3310  157a
   3311  157a				   .
   3312  157a							; 
   3313  157a
   3314  157a				   .L0260		;  _P1_Left_Right  =  _P1_Left_Right  +  1.48
   3315  157a
   3316  157a		       a5 db		      LDA	h
   3317  157c		       18		      CLC
   3318  157d		       69 7a		      ADC	#122
   3319  157f		       85 db		      STA	h
   3320  1581		       a5 81		      LDA	_P1_Left_Right
   3321  1583		       69 01		      ADC	#1
   3322  1585		       85 81		      STA	_P1_Left_Right
   3323  1587				   .
   3324  1587							; 
   3325  1587
   3326  1587				   .
   3327  1587							; 
   3328  1587
   3329  1587				   .
   3330  1587							; 
   3331  1587
   3332  1587				   .
   3333  1587							; 
   3334  1587
   3335  1587				   .L0261		;  REFP1  =  8
   3336  1587
   3337  1587		       a9 08		      LDA	#8
   3338  1589		       85 0c		      STA	REFP1
   3339  158b				   .
   3340  158b							; 
   3341  158b
   3342  158b				   .
   3343  158b							; 
   3344  158b
   3345  158b				   .
   3346  158b							; 
   3347  158b
   3348  158b				   .
   3349  158b							; 
   3350  158b
   3351  158b				   .L0262		;  if player1x  <=  _c_Edge_Right then goto __Skip_Joy0_Right
   3352  158b
   3353  158b		       a9 99		      LDA	#_c_Edge_Right
   3354  158d		       c5 81		      CMP	player1x
   3355  158f		       90 03		      BCC	.skipL0262
   3356  1591				   .condpart53
   3357  1591		       4c b6 95 	      jmp	.__Skip_Joy0_Right
   3358  1594
   3359  1594				   .skipL0262
   3360  1594				   .
   3361  1594							; 
   3362  1594
   3363  1594				   .
   3364  1594							; 
   3365  1594
   3366  1594				   .
   3367  1594							; 
   3368  1594
   3369  1594				   .
   3370  1594							; 
   3371  1594
   3372  1594				   .L0263		;  if _XRoom  =  _c_World_Limit_Right then player1x  =  _c_Edge_Right	:  goto __Skip_Joy0_Right
   3373  1594
   3374  1594		       a5 d4		      LDA	_XRoom
   3375  1596		       c9 0f		      CMP	#_c_World_Limit_Right
   3376  1598		       d0 07		      BNE	.skipL0263
   3377  159a				   .condpart54
   3378  159a		       a9 99		      LDA	#_c_Edge_Right
   3379  159c		       85 81		      STA	player1x
   3380  159e		       4c b6 95 	      jmp	.__Skip_Joy0_Right
   3381  15a1
   3382  15a1				   .skipL0263
   3383  15a1				   .
   3384  15a1							; 
   3385  15a1
   3386  15a1				   .
   3387  15a1							; 
   3388  15a1
   3389  15a1				   .
   3390  15a1							; 
   3391  15a1
   3392  15a1				   .
   3393  15a1							; 
   3394  15a1
   3395  15a1				   .L0264		;  if _Bit2_Next_Room_Down{2} then goto __Skip_Joy0_Right
   3396  15a1
   3397  15a1		       a5 da		      LDA	_Bit2_Next_Room_Down
   3398  15a3		       29 04		      AND	#4
   3399  15a5		       f0 03		      BEQ	.skipL0264
   3400  15a7				   .condpart55
   3401  15a7		       4c b6 95 	      jmp	.__Skip_Joy0_Right
   3402  15aa
   3403  15aa				   .skipL0264
   3404  15aa				   .
   3405  15aa							; 
   3406  15aa
   3407  15aa				   .
   3408  15aa							; 
   3409  15aa
   3410  15aa				   .
   3411  15aa							; 
   3412  15aa
   3413  15aa				   .
   3414  15aa							; 
   3415  15aa
   3416  15aa				   .L0265		;  player1x  =  _c_Edge_Left
   3417  15aa
   3418  15aa		       a9 02		      LDA	#_c_Edge_Left
   3419  15ac		       85 81		      STA	player1x
   3420  15ae				   .
   3421  15ae							; 
   3422  15ae
   3423  15ae				   .
   3424  15ae							; 
   3425  15ae
   3426  15ae				   .
   3427  15ae							; 
   3428  15ae
   3429  15ae				   .
   3430  15ae							; 
   3431  15ae
   3432  15ae				   .L0266		;  _XRoom  =  _XRoom  +  1
   3433  15ae
   3434  15ae		       e6 d4		      INC	_XRoom
   3435  15b0				   .
   3436  15b0							; 
   3437  15b0
   3438  15b0				   .L0267		;  _Bit4_Next_Room_Right{4}  =  1
   3439  15b0
   3440  15b0		       a5 da		      LDA	_Bit4_Next_Room_Right
   3441  15b2		       09 10		      ORA	#16
   3442  15b4		       85 da		      STA	_Bit4_Next_Room_Right
   3443  15b6				   .
   3444  15b6							; 
   3445  15b6
   3446  15b6				   .__Skip_Joy0_Right
   3447  15b6							; __Skip_Joy0_Right
   3448  15b6
   3449  15b6				   .
   3450  15b6							; 
   3451  15b6
   3452  15b6				   .
   3453  15b6							; 
   3454  15b6
   3455  15b6				   .
   3456  15b6							; 
   3457  15b6
   3458  15b6				   .
   3459  15b6							; 
   3460  15b6
   3461  15b6				   .
   3462  15b6							; 
   3463  15b6
   3464  15b6				   .
   3465  15b6							; 
   3466  15b6
   3467  15b6				   .
   3468  15b6							; 
   3469  15b6
   3470  15b6				   .
   3471  15b6							; 
   3472  15b6
   3473  15b6				   .
   3474  15b6							; 
   3475  15b6
   3476  15b6				   .
   3477  15b6							; 
   3478  15b6
   3479  15b6				   .L0268		;  if !_Bit5_UD_Joy_Movement{5} then goto __Done_UD_Anim
   3480  15b6
   3481  15b6		       a5 da		      LDA	_Bit5_UD_Joy_Movement
   3482  15b8		       29 20		      AND	#32
   3483  15ba		       d0 03		      BNE	.skipL0268
   3484  15bc				   .condpart56
   3485  15bc		       4c d2 95 	      jmp	.__Done_UD_Anim
   3486  15bf
   3487  15bf				   .skipL0268
   3488  15bf				   .
   3489  15bf							; 
   3490  15bf
   3491  15bf				   .
   3492  15bf							; 
   3493  15bf
   3494  15bf				   .
   3495  15bf							; 
   3496  15bf
   3497  15bf				   .
   3498  15bf							; 
   3499  15bf
   3500  15bf				   .L0269		;  on _Frame_Counter goto __FrameD0 __FrameD1 __FrameD2 __FrameD3
   3501  15bf
   3502  15bf		       a6 d9		      LDX	_Frame_Counter
   3503  15c1		       bd ca 95 	      LDA	.L0269jumptablehi,x
   3504  15c4		       48		      PHA
   3505  15c5		       bd ce 95 	      LDA	.L0269jumptablelo,x
   3506  15c8		       48		      PHA
   3507  15c9		       60		      RTS
   3508  15ca				   .L0269jumptablehi
   3509  15ca		       96		      .byte.b	>(.__FrameD0-1)
   3510  15cb		       96		      .byte.b	>(.__FrameD1-1)
   3511  15cc		       96		      .byte.b	>(.__FrameD2-1)
   3512  15cd		       96		      .byte.b	>(.__FrameD3-1)
   3513  15ce				   .L0269jumptablelo
   3514  15ce		       41		      .byte.b	<(.__FrameD0-1)
   3515  15cf		       50		      .byte.b	<(.__FrameD1-1)
   3516  15d0		       5f		      .byte.b	<(.__FrameD2-1)
   3517  15d1		       6e		      .byte.b	<(.__FrameD3-1)
   3518  15d2				   .
   3519  15d2							; 
   3520  15d2
   3521  15d2				   .__Done_UD_Anim
   3522  15d2							; __Done_UD_Anim
   3523  15d2
   3524  15d2				   .
   3525  15d2							; 
   3526  15d2
   3527  15d2				   .
   3528  15d2							; 
   3529  15d2
   3530  15d2				   .
   3531  15d2							; 
   3532  15d2
   3533  15d2				   .
   3534  15d2							; 
   3535  15d2
   3536  15d2				   .
   3537  15d2							; 
   3538  15d2
   3539  15d2				   .
   3540  15d2							; 
   3541  15d2
   3542  15d2				   .
   3543  15d2							; 
   3544  15d2
   3545  15d2				   .
   3546  15d2							; 
   3547  15d2
   3548  15d2				   .
   3549  15d2							; 
   3550  15d2
   3551  15d2				   .
   3552  15d2							; 
   3553  15d2
   3554  15d2				   .L0270		;  if !_Bit6_LR_Joy_Movement{6} then goto __Done_LR_Anim
   3555  15d2
   3556  15d2		       24 da		      BIT	_Bit6_LR_Joy_Movement
   3557  15d4		       70 03		      BVS	.skipL0270
   3558  15d6				   .condpart57
   3559  15d6		       4c f4 95 	      jmp	.__Done_LR_Anim
   3560  15d9
   3561  15d9				   .skipL0270
   3562  15d9				   .
   3563  15d9							; 
   3564  15d9
   3565  15d9				   .
   3566  15d9							; 
   3567  15d9
   3568  15d9				   .
   3569  15d9							; 
   3570  15d9
   3571  15d9				   .
   3572  15d9							; 
   3573  15d9
   3574  15d9				   .L0271		;  player1color:
   3575  15d9
   3576  15d9		       a2 00		      LDX	#<playercolorL0271_1
   3577  15db		       86 87		      STX	player1color
   3578  15dd		       a9 f5		      LDA	#>playercolorL0271_1
   3579  15df		       85 88		      STA	player1color+1
   3580  15e1				   .
   3581  15e1							; 
   3582  15e1
   3583  15e1				   .
   3584  15e1							; 
   3585  15e1
   3586  15e1				   .
   3587  15e1							; 
   3588  15e1
   3589  15e1				   .
   3590  15e1							; 
   3591  15e1
   3592  15e1				   .L0272		;  on _Frame_Counter goto __FrameLR0 __FrameLR1 __FrameLR2 __FrameLR3
   3593  15e1
   3594  15e1		       a6 d9		      LDX	_Frame_Counter
   3595  15e3		       bd ec 95 	      LDA	.L0272jumptablehi,x
   3596  15e6		       48		      PHA
   3597  15e7		       bd f0 95 	      LDA	.L0272jumptablelo,x
   3598  15ea		       48		      PHA
   3599  15eb		       60		      RTS
   3600  15ec				   .L0272jumptablehi
   3601  15ec		       96		      .byte.b	>(.__FrameLR0-1)
   3602  15ed		       96		      .byte.b	>(.__FrameLR1-1)
   3603  15ee		       96		      .byte.b	>(.__FrameLR2-1)
   3604  15ef		       96		      .byte.b	>(.__FrameLR3-1)
   3605  15f0				   .L0272jumptablelo
   3606  15f0		       05		      .byte.b	<(.__FrameLR0-1)
   3607  15f1		       14		      .byte.b	<(.__FrameLR1-1)
   3608  15f2		       23		      .byte.b	<(.__FrameLR2-1)
   3609  15f3		       32		      .byte.b	<(.__FrameLR3-1)
   3610  15f4				   .
   3611  15f4							; 
   3612  15f4
   3613  15f4				   .__Done_LR_Anim
   3614  15f4							; __Done_LR_Anim
   3615  15f4
   3616  15f4				   .
   3617  15f4							; 
   3618  15f4
   3619  15f4				   .
   3620  15f4							; 
   3621  15f4
   3622  15f4				   .
   3623  15f4							; 
   3624  15f4
   3625  15f4				   .
   3626  15f4							; 
   3627  15f4
   3628  15f4				   .
   3629  15f4							; 
   3630  15f4
   3631  15f4				   .
   3632  15f4							; 
   3633  15f4
   3634  15f4				   .
   3635  15f4							; 
   3636  15f4
   3637  15f4				   .
   3638  15f4							; 
   3639  15f4
   3640  15f4				   .
   3641  15f4							; 
   3642  15f4
   3643  15f4				   .
   3644  15f4							; 
   3645  15f4
   3646  15f4				   .
   3647  15f4							; 
   3648  15f4
   3649  15f4				   .
   3650  15f4							; 
   3651  15f4
   3652  15f4				   .
   3653  15f4							; 
   3654  15f4
   3655  15f4				   .
   3656  15f4							; 
   3657  15f4
   3658  15f4				   .
   3659  15f4							; 
   3660  15f4
   3661  15f4				   .L0273		;  goto __Continue_in_Bank_2 bank2
   3662  15f4
   3663  15f4		       85 ee		      sta	temp7
   3664  15f6		       a9 af		      lda	#>(.__Continue_in_Bank_2-1)
   3665  15f8		       48		      pha
   3666  15f9		       a9 ff		      lda	#<(.__Continue_in_Bank_2-1)
   3667  15fb		       48		      pha
   3668  15fc		       a5 ee		      lda	temp7
   3669  15fe		       48		      pha
   3670  15ff		       8a		      txa
   3671  1600		       48		      pha
   3672  1601		       a2 02		      ldx	#2
   3673  1603		       4c eb ff 	      jmp	BS_jsr
   3674  1606				   .
   3675  1606							; 
   3676  1606
   3677  1606				   .
   3678  1606							; 
   3679  1606
   3680  1606				   .
   3681  1606							; 
   3682  1606
   3683  1606				   .
   3684  1606							; 
   3685  1606
   3686  1606				   .
   3687  1606							; 
   3688  1606
   3689  1606				   .
   3690  1606							; 
   3691  1606
   3692  1606				   .
   3693  1606							; 
   3694  1606
   3695  1606				   .
   3696  1606							; 
   3697  1606
   3698  1606				   .
   3699  1606							; 
   3700  1606
   3701  1606				   .
   3702  1606							; 
   3703  1606
   3704  1606				   .__FrameLR0
   3705  1606							; __FrameLR0
   3706  1606
   3707  1606				   .L0274		;  player1:
   3708  1606
   3709  1606		       a2 0a		      LDX	#<playerL0274_1
   3710  1608		       86 8c		      STX	player1pointerlo
   3711  160a		       a9 f5		      LDA	#>playerL0274_1
   3712  160c		       85 8d		      STA	player1pointerhi
   3713  160e		       a9 09		      LDA	#9
   3714  1610		       85 8f		      STA	player1height
   3715  1612				   .
   3716  1612							; 
   3717  1612
   3718  1612				   .L0275		;  goto __Done_LR_Anim
   3719  1612
   3720  1612		       4c f4 95 	      jmp	.__Done_LR_Anim
   3721  1615
   3722  1615				   .
   3723  1615							; 
   3724  1615
   3725  1615				   .
   3726  1615							; 
   3727  1615
   3728  1615				   .__FrameLR1
   3729  1615							; __FrameLR1
   3730  1615
   3731  1615				   .L0276		;  player1:
   3732  1615
   3733  1615		       a2 14		      LDX	#<playerL0276_1
   3734  1617		       86 8c		      STX	player1pointerlo
   3735  1619		       a9 f5		      LDA	#>playerL0276_1
   3736  161b		       85 8d		      STA	player1pointerhi
   3737  161d		       a9 09		      LDA	#9
   3738  161f		       85 8f		      STA	player1height
   3739  1621				   .
   3740  1621							; 
   3741  1621
   3742  1621				   .L0277		;  goto __Done_LR_Anim
   3743  1621
   3744  1621		       4c f4 95 	      jmp	.__Done_LR_Anim
   3745  1624
   3746  1624				   .
   3747  1624							; 
   3748  1624
   3749  1624				   .
   3750  1624							; 
   3751  1624
   3752  1624				   .__FrameLR2
   3753  1624							; __FrameLR2
   3754  1624
   3755  1624				   .L0278		;  player1:
   3756  1624
   3757  1624		       a2 1e		      LDX	#<playerL0278_1
   3758  1626		       86 8c		      STX	player1pointerlo
   3759  1628		       a9 f5		      LDA	#>playerL0278_1
   3760  162a		       85 8d		      STA	player1pointerhi
   3761  162c		       a9 09		      LDA	#9
   3762  162e		       85 8f		      STA	player1height
   3763  1630				   .
   3764  1630							; 
   3765  1630
   3766  1630				   .L0279		;  goto __Done_LR_Anim
   3767  1630
   3768  1630		       4c f4 95 	      jmp	.__Done_LR_Anim
   3769  1633
   3770  1633				   .
   3771  1633							; 
   3772  1633
   3773  1633				   .
   3774  1633							; 
   3775  1633
   3776  1633				   .__FrameLR3
   3777  1633							; __FrameLR3
   3778  1633
   3779  1633				   .L0280		;  player1:
   3780  1633
   3781  1633		       a2 28		      LDX	#<playerL0280_1
   3782  1635		       86 8c		      STX	player1pointerlo
   3783  1637		       a9 f5		      LDA	#>playerL0280_1
   3784  1639		       85 8d		      STA	player1pointerhi
   3785  163b		       a9 09		      LDA	#9
   3786  163d		       85 8f		      STA	player1height
   3787  163f				   .
   3788  163f							; 
   3789  163f
   3790  163f				   .L0281		;  goto __Done_LR_Anim
   3791  163f
   3792  163f		       4c f4 95 	      jmp	.__Done_LR_Anim
   3793  1642
   3794  1642				   .
   3795  1642							; 
   3796  1642
   3797  1642				   .
   3798  1642							; 
   3799  1642
   3800  1642				   .
   3801  1642							; 
   3802  1642
   3803  1642				   .
   3804  1642							; 
   3805  1642
   3806  1642				   .
   3807  1642							; 
   3808  1642
   3809  1642				   .
   3810  1642							; 
   3811  1642
   3812  1642				   .
   3813  1642							; 
   3814  1642
   3815  1642				   .
   3816  1642							; 
   3817  1642
   3818  1642				   .__FrameD0
   3819  1642							; __FrameD0
   3820  1642
   3821  1642				   .L0282		;  player1:
   3822  1642
   3823  1642		       a2 32		      LDX	#<playerL0282_1
   3824  1644		       86 8c		      STX	player1pointerlo
   3825  1646		       a9 f5		      LDA	#>playerL0282_1
   3826  1648		       85 8d		      STA	player1pointerhi
   3827  164a		       a9 09		      LDA	#9
   3828  164c		       85 8f		      STA	player1height
   3829  164e				   .
   3830  164e							; 
   3831  164e
   3832  164e				   .L0283		;  goto __Done_UD_Anim
   3833  164e
   3834  164e		       4c d2 95 	      jmp	.__Done_UD_Anim
   3835  1651
   3836  1651				   .__FrameD1
   3837  1651							; __FrameD1
   3838  1651
   3839  1651				   .L0284		;  player1:
   3840  1651
   3841  1651		       a2 3c		      LDX	#<playerL0284_1
   3842  1653		       86 8c		      STX	player1pointerlo
   3843  1655		       a9 f5		      LDA	#>playerL0284_1
   3844  1657		       85 8d		      STA	player1pointerhi
   3845  1659		       a9 09		      LDA	#9
   3846  165b		       85 8f		      STA	player1height
   3847  165d				   .
   3848  165d							; 
   3849  165d
   3850  165d				   .L0285		;  goto __Done_UD_Anim
   3851  165d
   3852  165d		       4c d2 95 	      jmp	.__Done_UD_Anim
   3853  1660
   3854  1660				   .
   3855  1660							; 
   3856  1660
   3857  1660				   .
   3858  1660							; 
   3859  1660
   3860  1660				   .__FrameD2
   3861  1660							; __FrameD2
   3862  1660
   3863  1660				   .L0286		;  player1:
   3864  1660
   3865  1660		       a2 46		      LDX	#<playerL0286_1
   3866  1662		       86 8c		      STX	player1pointerlo
   3867  1664		       a9 f5		      LDA	#>playerL0286_1
   3868  1666		       85 8d		      STA	player1pointerhi
   3869  1668		       a9 09		      LDA	#9
   3870  166a		       85 8f		      STA	player1height
   3871  166c				   .
   3872  166c							; 
   3873  166c
   3874  166c				   .L0287		;  goto __Done_UD_Anim
   3875  166c
   3876  166c		       4c d2 95 	      jmp	.__Done_UD_Anim
   3877  166f
   3878  166f				   .
   3879  166f							; 
   3880  166f
   3881  166f				   .
   3882  166f							; 
   3883  166f
   3884  166f				   .__FrameD3
   3885  166f							; __FrameD3
   3886  166f
   3887  166f				   .L0288		;  player1:
   3888  166f
   3889  166f		       a2 50		      LDX	#<playerL0288_1
   3890  1671		       86 8c		      STX	player1pointerlo
   3891  1673		       a9 f5		      LDA	#>playerL0288_1
   3892  1675		       85 8d		      STA	player1pointerhi
   3893  1677		       a9 09		      LDA	#9
   3894  1679		       85 8f		      STA	player1height
   3895  167b				   .
   3896  167b							; 
   3897  167b
   3898  167b				   .L0289		;  goto __Done_UD_Anim
   3899  167b
   3900  167b		       4c d2 95 	      jmp	.__Done_UD_Anim
   3901  167e
   3902  167e				   .
   3903  167e							; 
   3904  167e
   3905  167e				   .
   3906  167e							; 
   3907  167e
   3908  167e				   .
   3909  167e							; 
   3910  167e
   3911  167e				   .
   3912  167e							; 
   3913  167e
   3914  167e				   .
   3915  167e							; 
   3916  167e
   3917  167e				   .L0290		;  bank 2
   3918  167e
   3919  167e					      if	ECHO1
      2390 bytes of ROM space left in bank 1
   3920  167e					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   3921  167e					      endif
   3922  167e		       00 01	   ECHO1      =	1
   3923  1fd4					      ORG	$1FF4-bscode_length
   3924  1fd4					      RORG	$9FF4-bscode_length
   3925  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   3926  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3927  1fd6				  -	      stx	FASTFETCH
   3928  1fd6					      endif
   3929  1fd6		       9a		      txs
   3930  1fd7				  -	      if	bankswitch == 64
   3931  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3932  1fd7					      else
   3933  1fd7		       a9 f2		      lda	#>(start-1)
   3934  1fd9					      endif
   3935  1fd9		       48		      pha
   3936  1fda		       a9 4f		      lda	#<(start-1)
   3937  1fdc		       48		      pha
   3938  1fdd		       48		      pha
   3939  1fde		       8a		      txa
   3940  1fdf		       48		      pha
   3941  1fe0		       ba		      tsx
   3942  1fe1					      if	bankswitch != 64
   3943  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   3944  1fe3		       2a		      rol
   3945  1fe4		       2a		      rol
   3946  1fe5		       2a		      rol
   3947  1fe6		       2a		      rol
   3948  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3949  1fe9		       aa		      tax
   3950  1fea		       e8		      inx
   3951  1feb				  -	      else
   3952  1feb				  -	      lda	4,x	; get high byte of return address
   3953  1feb				  -	      tay
   3954  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3955  1feb				  -	      sta	4,x
   3956  1feb				  -	      tya
   3957  1feb				  -	      lsr
   3958  1feb				  -	      lsr
   3959  1feb				  -	      lsr
   3960  1feb				  -	      lsr
   3961  1feb				  -	      tax
   3962  1feb				  -	      inx
   3963  1feb					      endif
   3964  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3965  1fee		       68		      pla
   3966  1fef		       aa		      tax
   3967  1ff0		       68		      pla
   3968  1ff1		       60		      rts
   3969  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3970  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3971  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3972  1ff2					      endif
   3973  1ffc					      ORG	$1FFC
   3974  1ffc					      RORG	$9FFC
   3975  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
   3976  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
   3977  2000					      ORG	$2000
   3978  2000					      RORG	$B000
   3979  2000				   .
   3980  2000							; 
   3981  2000
   3982  2000				   .
   3983  2000							; 
   3984  2000
   3985  2000				   .
   3986  2000							; 
   3987  2000
   3988  2000				   .
   3989  2000							; 
   3990  2000
   3991  2000				   .
   3992  2000							; 
   3993  2000
   3994  2000				   .__Continue_in_Bank_2
   3995  2000							; __Continue_in_Bank_2
   3996  2000
   3997  2000				   .
   3998  2000							; 
   3999  2000
   4000  2000				   .
   4001  2000							; 
   4002  2000
   4003  2000				   .
   4004  2000							; 
   4005  2000
   4006  2000				   .
   4007  2000							; 
   4008  2000
   4009  2000				   .
   4010  2000							; 
   4011  2000
   4012  2000				   .
   4013  2000							; 
   4014  2000
   4015  2000				   .
   4016  2000							; 
   4017  2000
   4018  2000				   .
   4019  2000							; 
   4020  2000
   4021  2000				   .
   4022  2000							; 
   4023  2000
   4024  2000				   .
   4025  2000							; 
   4026  2000
   4027  2000				   .
   4028  2000							; 
   4029  2000
   4030  2000				   .
   4031  2000							; 
   4032  2000
   4033  2000				   .
   4034  2000							; 
   4035  2000
   4036  2000				   .
   4037  2000							; 
   4038  2000
   4039  2000				   .
   4040  2000							; 
   4041  2000
   4042  2000				   .
   4043  2000							; 
   4044  2000
   4045  2000				   .
   4046  2000							; 
   4047  2000
   4048  2000				   .
   4049  2000							; 
   4050  2000
   4051  2000				   .L0291		;  if !collision(player0,player1) then goto __Skip_Stairs_Collision
   4052  2000
   4053  2000		       24 07		      bit	CXPPMM
   4054  2002		       30 03		      BMI	.skipL0291
   4055  2004				   .condpart58
   4056  2004		       4c 22 b0 	      jmp	.__Skip_Stairs_Collision
   4057  2007
   4058  2007				   .skipL0291
   4059  2007				   .
   4060  2007							; 
   4061  2007
   4062  2007				   .
   4063  2007							; 
   4064  2007
   4065  2007				   .
   4066  2007							; 
   4067  2007
   4068  2007				   .
   4069  2007							; 
   4070  2007
   4071  2007				   .L0292		;  player0y  =  150
   4072  2007
   4073  2007		       a9 96		      LDA	#150
   4074  2009		       85 85		      STA	player0y
   4075  200b				   .
   4076  200b							; 
   4077  200b
   4078  200b				   .
   4079  200b							; 
   4080  200b
   4081  200b				   .
   4082  200b							; 
   4083  200b
   4084  200b				   .
   4085  200b							; 
   4086  200b
   4087  200b				   .L0293		;  _Bit7_Over_Under{7}  =  !_Bit7_Over_Under{7}
   4088  200b
   4089  200b		       a5 da		      LDA	_Bit7_Over_Under
   4090  200d		       29 80		      AND	#128
   4091  200f		       08		      PHP
   4092  2010		       a5 da		      LDA	_Bit7_Over_Under
   4093  2012		       29 7f		      AND	#127
   4094  2014		       28		      PLP
   4095  2015		       d0 02		      .byte.b	$D0, $02
   4096  2017		       09 80		      ORA	#128
   4097  2019		       85 da		      STA	_Bit7_Over_Under
   4098  201b				   .
   4099  201b							; 
   4100  201b
   4101  201b				   .
   4102  201b							; 
   4103  201b
   4104  201b				   .
   4105  201b							; 
   4106  201b
   4107  201b				   .
   4108  201b							; 
   4109  201b
   4110  201b				   .L0294		;  player1y  =  _c_Edge_Bottom
   4111  201b
   4112  201b		       a9 58		      LDA	#_c_Edge_Bottom
   4113  201d		       85 86		      STA	player1y
   4114  201f				   .
   4115  201f							; 
   4116  201f
   4117  201f				   .
   4118  201f							; 
   4119  201f
   4120  201f				   .
   4121  201f							; 
   4122  201f
   4123  201f				   .
   4124  201f							; 
   4125  201f
   4126  201f				   .L0295		;  goto __Skip_UnRand
   4127  201f
   4128  201f		       4c df b0 	      jmp	.__Skip_UnRand
   4129  2022
   4130  2022				   .
   4131  2022							; 
   4132  2022
   4133  2022				   .__Skip_Stairs_Collision
   4134  2022							; __Skip_Stairs_Collision
   4135  2022
   4136  2022				   .
   4137  2022							; 
   4138  2022
   4139  2022				   .
   4140  2022							; 
   4141  2022
   4142  2022				   .
   4143  2022							; 
   4144  2022
   4145  2022				   .
   4146  2022							; 
   4147  2022
   4148  2022				   .
   4149  2022							; 
   4150  2022
   4151  2022				   .
   4152  2022							; 
   4153  2022
   4154  2022				   .
   4155  2022							; 
   4156  2022
   4157  2022				   .
   4158  2022							; 
   4159  2022
   4160  2022				   .
   4161  2022							; 
   4162  2022
   4163  2022				   .
   4164  2022							; 
   4165  2022
   4166  2022				   .L0296		;  if !_Bit1_Next_Room_Up{1}  &&  !_Bit2_Next_Room_Down{2}  &&  !_Bit3_Next_Room_Left{3}  &&  !_Bit4_Next_Room_Right{4} then goto __Done_Next_Room
   4167  2022
   4168  2022		       a5 da		      LDA	_Bit1_Next_Room_Up
   4169  2024		       29 02		      AND	#2
   4170  2026		       d0 15		      BNE	.skipL0296
   4171  2028				   .condpart59
   4172  2028		       a5 da		      LDA	_Bit2_Next_Room_Down
   4173  202a		       29 04		      AND	#4
   4174  202c		       d0 0f		      BNE	.skip59then
   4175  202e				   .condpart60
   4176  202e		       a5 da		      LDA	_Bit3_Next_Room_Left
   4177  2030		       29 08		      AND	#8
   4178  2032		       d0 09		      BNE	.skip60then
   4179  2034				   .condpart61
   4180  2034		       a5 da		      LDA	_Bit4_Next_Room_Right
   4181  2036		       29 10		      AND	#16
   4182  2038		       d0 03		      BNE	.skip61then
   4183  203a				   .condpart62
   4184  203a		       4c 11 b1 	      jmp	.__Done_Next_Room
   4185  203d
   4186  203d				   .skip61then
   4187  203d				   .skip60then
   4188  203d				   .skip59then
   4189  203d				   .skipL0296
   4190  203d				   .
   4191  203d							; 
   4192  203d
   4193  203d				   .
   4194  203d							; 
   4195  203d
   4196  203d				   .
   4197  203d							; 
   4198  203d
   4199  203d				   .
   4200  203d							; 
   4201  203d
   4202  203d				   .L0297		;  if !_Bit4_Next_Room_Right{4}  &&  !_Bit2_Next_Room_Down{2} then goto __Skip_bBRand
   4203  203d
   4204  203d		       a5 da		      LDA	_Bit4_Next_Room_Right
   4205  203f		       29 10		      AND	#16
   4206  2041		       d0 09		      BNE	.skipL0297
   4207  2043				   .condpart63
   4208  2043		       a5 da		      LDA	_Bit2_Next_Room_Down
   4209  2045		       29 04		      AND	#4
   4210  2047		       d0 03		      BNE	.skip63then
   4211  2049				   .condpart64
   4212  2049		       4c 8f b0 	      jmp	.__Skip_bBRand
   4213  204c
   4214  204c				   .skip63then
   4215  204c				   .skipL0297
   4216  204c				   .
   4217  204c							; 
   4218  204c
   4219  204c				   .__Special_Rand
   4220  204c							; __Special_Rand
   4221  204c
   4222  204c				   .
   4223  204c							; 
   4224  204c
   4225  204c				   .L0298		;  _Temp  =  0
   4226  204c
   4227  204c		       a9 00		      LDA	#0
   4228  204e		       85 d7		      STA	_Temp
   4229  2050				   .
   4230  2050							; 
   4231  2050
   4232  2050				   .
   4233  2050							; 
   4234  2050
   4235  2050				   .
   4236  2050							; 
   4237  2050
   4238  2050				   .
   4239  2050							; 
   4240  2050
   4241  2050				   .__bBRand
   4242  2050							; __bBRand
   4243  2050
   4244  2050				   .L0299		;  asm
   4245  2050
   4246  2050		       a5 ec		      lda	_RoomRand
   4247  2052
   4248  2052		       4a		      lsr
   4249  2053
   4250  2053		       90 02		      bcc	__bB_Rand_no_eor
   4251  2055
   4252  2055		       49 b4		      eor	#$B4
   4253  2057
   4254  2057				   __bB_Rand_no_eor
   4255  2057
   4256  2057		       85 ec		      sta	_RoomRand
   4257  2059
   4258  2059				   .
   4259  2059							; 
   4260  2059
   4261  2059				   .
   4262  2059							; 
   4263  2059
   4264  2059				   .
   4265  2059							; 
   4266  2059
   4267  2059				   .
   4268  2059							; 
   4269  2059
   4270  2059				   .L0300		;  if _Temp  <>  7 then goto __Skip_bBRand_Drawscreen
   4271  2059
   4272  2059		       a5 d7		      LDA	_Temp
   4273  205b		       c9 07		      CMP	#7
   4274  205d		       f0 03		      BEQ	.skipL0300
   4275  205f				   .condpart65
   4276  205f		       4c 7a b0 	      jmp	.__Skip_bBRand_Drawscreen
   4277  2062
   4278  2062				   .skipL0300
   4279  2062				   .
   4280  2062							; 
   4281  2062
   4282  2062				   .
   4283  2062							; 
   4284  2062
   4285  2062				   .
   4286  2062							; 
   4287  2062
   4288  2062				   .
   4289  2062							; 
   4290  2062
   4291  2062				   .L0301		;  drawscreen
   4292  2062
   4293  2062		       85 ee		      sta	temp7
   4294  2064		       a9 b0		      lda	#>(ret_point12-1)
   4295  2066		       48		      pha
   4296  2067		       a9 79		      lda	#<(ret_point12-1)
   4297  2069		       48		      pha
   4298  206a		       a9 f4		      lda	#>(drawscreen-1)
   4299  206c		       48		      pha
   4300  206d		       a9 39		      lda	#<(drawscreen-1)
   4301  206f		       48		      pha
   4302  2070		       a5 ee		      lda	temp7
   4303  2072		       48		      pha
   4304  2073		       8a		      txa
   4305  2074		       48		      pha
   4306  2075		       a2 04		      ldx	#4
   4307  2077		       4c eb ff 	      jmp	BS_jsr
   4308  207a				   ret_point12
   4309  207a				   .
   4310  207a							; 
   4311  207a
   4312  207a				   .__Skip_bBRand_Drawscreen
   4313  207a							; __Skip_bBRand_Drawscreen
   4314  207a
   4315  207a				   .
   4316  207a							; 
   4317  207a
   4318  207a				   .
   4319  207a							; 
   4320  207a
   4321  207a				   .
   4322  207a							; 
   4323  207a
   4324  207a				   .
   4325  207a							; 
   4326  207a
   4327  207a				   .L0302		;  if _Bit2_Next_Room_Down{2} then _Temp  =  _Temp  +	1  :  if _Temp	<=  _c_World_Limit_Right then goto __bBRand
   4328  207a
   4329  207a		       a5 da		      LDA	_Bit2_Next_Room_Down
   4330  207c		       29 04		      AND	#4
   4331  207e		       f0 0b		      BEQ	.skipL0302
   4332  2080				   .condpart66
   4333  2080		       e6 d7		      INC	_Temp
   4334  2082		       a9 0f		      LDA	#_c_World_Limit_Right
   4335  2084		       c5 d7		      CMP	_Temp
   4336  2086		       90 03		      BCC	.skip66then
   4337  2088				   .condpart67
   4338  2088		       4c 50 b0 	      jmp	.__bBRand
   4339  208b
   4340  208b				   .skip66then
   4341  208b				   .skipL0302
   4342  208b				   .
   4343  208b							; 
   4344  208b
   4345  208b				   .
   4346  208b							; 
   4347  208b
   4348  208b				   .
   4349  208b							; 
   4350  208b
   4351  208b				   .
   4352  208b							; 
   4353  208b
   4354  208b				   .L0303		;  _CurrentScene  =  _RoomRand
   4355  208b
   4356  208b		       a5 ec		      LDA	_RoomRand
   4357  208d		       85 d6		      STA	_CurrentScene
   4358  208f				   .
   4359  208f							; 
   4360  208f
   4361  208f				   .__Skip_bBRand
   4362  208f							; __Skip_bBRand
   4363  208f
   4364  208f				   .
   4365  208f							; 
   4366  208f
   4367  208f				   .
   4368  208f							; 
   4369  208f
   4370  208f				   .
   4371  208f							; 
   4372  208f
   4373  208f				   .
   4374  208f							; 
   4375  208f
   4376  208f				   .L0304		;  if !_Bit1_Next_Room_Up{1}  &&  !_Bit3_Next_Room_Left{3} then goto __Skip_UnRand
   4377  208f
   4378  208f		       a5 da		      LDA	_Bit1_Next_Room_Up
   4379  2091		       29 02		      AND	#2
   4380  2093		       d0 09		      BNE	.skipL0304
   4381  2095				   .condpart68
   4382  2095		       a5 da		      LDA	_Bit3_Next_Room_Left
   4383  2097		       29 08		      AND	#8
   4384  2099		       d0 03		      BNE	.skip68then
   4385  209b				   .condpart69
   4386  209b		       4c df b0 	      jmp	.__Skip_UnRand
   4387  209e
   4388  209e				   .skip68then
   4389  209e				   .skipL0304
   4390  209e				   .
   4391  209e							; 
   4392  209e
   4393  209e				   .L0305		;  _Temp  =  0
   4394  209e
   4395  209e		       a9 00		      LDA	#0
   4396  20a0		       85 d7		      STA	_Temp
   4397  20a2				   .
   4398  20a2							; 
   4399  20a2
   4400  20a2				   .
   4401  20a2							; 
   4402  20a2
   4403  20a2				   .
   4404  20a2							; 
   4405  20a2
   4406  20a2				   .
   4407  20a2							; 
   4408  20a2
   4409  20a2				   .__UnRand
   4410  20a2							; __UnRand
   4411  20a2
   4412  20a2				   .L0306		;  asm
   4413  20a2
   4414  20a2		       a5 ec		      LDA	_RoomRand
   4415  20a4
   4416  20a4		       0a		      ASL
   4417  20a5
   4418  20a5		       90 02		      BCC	__UnRand_no_eor
   4419  20a7
   4420  20a7		       49 69		      EOR	#$69
   4421  20a9
   4422  20a9				   __UnRand_no_eor
   4423  20a9
   4424  20a9		       85 ec		      STA	_RoomRand
   4425  20ab
   4426  20ab		       85 d6		      STA	_CurrentScene
   4427  20ad
   4428  20ad				   .
   4429  20ad							; 
   4430  20ad
   4431  20ad				   .
   4432  20ad							; 
   4433  20ad
   4434  20ad				   .
   4435  20ad							; 
   4436  20ad
   4437  20ad				   .
   4438  20ad							; 
   4439  20ad
   4440  20ad				   .L0307		;  if _Temp  <>  7 then goto __Skip_UnRand_Drawscreen
   4441  20ad
   4442  20ad		       a5 d7		      LDA	_Temp
   4443  20af		       c9 07		      CMP	#7
   4444  20b1		       f0 03		      BEQ	.skipL0307
   4445  20b3				   .condpart70
   4446  20b3		       4c ce b0 	      jmp	.__Skip_UnRand_Drawscreen
   4447  20b6
   4448  20b6				   .skipL0307
   4449  20b6				   .
   4450  20b6							; 
   4451  20b6
   4452  20b6				   .
   4453  20b6							; 
   4454  20b6
   4455  20b6				   .
   4456  20b6							; 
   4457  20b6
   4458  20b6				   .
   4459  20b6							; 
   4460  20b6
   4461  20b6				   .L0308		;  drawscreen
   4462  20b6
   4463  20b6		       85 ee		      sta	temp7
   4464  20b8		       a9 b0		      lda	#>(ret_point13-1)
   4465  20ba		       48		      pha
   4466  20bb		       a9 cd		      lda	#<(ret_point13-1)
   4467  20bd		       48		      pha
   4468  20be		       a9 f4		      lda	#>(drawscreen-1)
   4469  20c0		       48		      pha
   4470  20c1		       a9 39		      lda	#<(drawscreen-1)
   4471  20c3		       48		      pha
   4472  20c4		       a5 ee		      lda	temp7
   4473  20c6		       48		      pha
   4474  20c7		       8a		      txa
   4475  20c8		       48		      pha
   4476  20c9		       a2 04		      ldx	#4
   4477  20cb		       4c eb ff 	      jmp	BS_jsr
   4478  20ce				   ret_point13
   4479  20ce				   .
   4480  20ce							; 
   4481  20ce
   4482  20ce				   .__Skip_UnRand_Drawscreen
   4483  20ce							; __Skip_UnRand_Drawscreen
   4484  20ce
   4485  20ce				   .
   4486  20ce							; 
   4487  20ce
   4488  20ce				   .
   4489  20ce							; 
   4490  20ce
   4491  20ce				   .
   4492  20ce							; 
   4493  20ce
   4494  20ce				   .
   4495  20ce							; 
   4496  20ce
   4497  20ce				   .L0309		;  if _Bit1_Next_Room_Up{1} then _Temp  =  _Temp  +  1  :  if _Temp  <=  _c_World_Limit_Right then goto __UnRand
   4498  20ce
   4499  20ce		       a5 da		      LDA	_Bit1_Next_Room_Up
   4500  20d0		       29 02		      AND	#2
   4501  20d2		       f0 0b		      BEQ	.skipL0309
   4502  20d4				   .condpart71
   4503  20d4		       e6 d7		      INC	_Temp
   4504  20d6		       a9 0f		      LDA	#_c_World_Limit_Right
   4505  20d8		       c5 d7		      CMP	_Temp
   4506  20da		       90 03		      BCC	.skip71then
   4507  20dc				   .condpart72
   4508  20dc		       4c a2 b0 	      jmp	.__UnRand
   4509  20df
   4510  20df				   .skip71then
   4511  20df				   .skipL0309
   4512  20df				   .
   4513  20df							; 
   4514  20df
   4515  20df				   .__Skip_UnRand
   4516  20df							; __Skip_UnRand
   4517  20df
   4518  20df				   .
   4519  20df							; 
   4520  20df
   4521  20df				   .
   4522  20df							; 
   4523  20df
   4524  20df				   .
   4525  20df							; 
   4526  20df
   4527  20df				   .
   4528  20df							; 
   4529  20df
   4530  20df				   .L0310		;  player0y  =  150
   4531  20df
   4532  20df		       a9 96		      LDA	#150
   4533  20e1		       85 85		      STA	player0y
   4534  20e3				   .
   4535  20e3							; 
   4536  20e3
   4537  20e3				   .
   4538  20e3							; 
   4539  20e3
   4540  20e3				   .
   4541  20e3							; 
   4542  20e3
   4543  20e3				   .
   4544  20e3							; 
   4545  20e3
   4546  20e3				   .L0311		;  _CurrentScene  =  _RoomRand
   4547  20e3
   4548  20e3		       a5 ec		      LDA	_RoomRand
   4549  20e5		       85 d6		      STA	_CurrentScene
   4550  20e7				   .
   4551  20e7							; 
   4552  20e7
   4553  20e7				   .
   4554  20e7							; 
   4555  20e7
   4556  20e7				   .
   4557  20e7							; 
   4558  20e7
   4559  20e7				   .
   4560  20e7							; 
   4561  20e7
   4562  20e7				   .
   4563  20e7							; 
   4564  20e7
   4565  20e7				   .
   4566  20e7							; 
   4567  20e7
   4568  20e7				   .L0312		;  if !_Bit7_Over_Under{7} then _CurrentScene	=   ( _CurrentScene & 31 )   :	goto __Set_Overworld_Scene
   4569  20e7
   4570  20e7		       24 da		      BIT	_Bit7_Over_Under
   4571  20e9		       30 09		      BMI	.skipL0312
   4572  20eb				   .condpart73
   4573  20eb							; complex statement detected
   4574  20eb		       a5 d6		      LDA	_CurrentScene
   4575  20ed		       29 1f		      AND	#31
   4576  20ef		       85 d6		      STA	_CurrentScene
   4577  20f1		       4c 3b b1 	      jmp	.__Set_Overworld_Scene
   4578  20f4
   4579  20f4				   .skipL0312
   4580  20f4				   .L0313		;  if _Bit7_Over_Under{7} then _CurrentScene  =   ( _CurrentScene / 8 )   :  goto __Set_Underworld_Scene bank3
   4581  20f4
   4582  20f4		       24 da		      BIT	_Bit7_Over_Under
   4583  20f6		       10 19		      BPL	.skipL0313
   4584  20f8				   .condpart74
   4585  20f8							; complex statement detected
   4586  20f8		       a5 d6		      LDA	_CurrentScene
   4587  20fa		       4a		      lsr
   4588  20fb		       4a		      lsr
   4589  20fc		       4a		      lsr
   4590  20fd		       85 d6		      STA	_CurrentScene
   4591  20ff		       85 ee		      sta	temp7
   4592  2101		       a9 d0		      lda	#>(.__Set_Underworld_Scene-1)
   4593  2103		       48		      pha
   4594  2104		       a9 47		      lda	#<(.__Set_Underworld_Scene-1)
   4595  2106		       48		      pha
   4596  2107		       a5 ee		      lda	temp7
   4597  2109		       48		      pha
   4598  210a		       8a		      txa
   4599  210b		       48		      pha
   4600  210c		       a2 03		      ldx	#3
   4601  210e		       4c eb ff 	      jmp	BS_jsr
   4602  2111				   .skipL0313
   4603  2111				   .
   4604  2111							; 
   4605  2111
   4606  2111				   .__Done_Next_Room
   4607  2111							; __Done_Next_Room
   4608  2111
   4609  2111				   .
   4610  2111							; 
   4611  2111
   4612  2111				   .
   4613  2111							; 
   4614  2111
   4615  2111				   .
   4616  2111							; 
   4617  2111
   4618  2111				   .
   4619  2111							; 
   4620  2111
   4621  2111				   .
   4622  2111							; 
   4623  2111
   4624  2111				   .
   4625  2111							; 
   4626  2111
   4627  2111				   .
   4628  2111							; 
   4629  2111
   4630  2111				   .
   4631  2111							; 
   4632  2111
   4633  2111				   .
   4634  2111							; 
   4635  2111
   4636  2111				   .
   4637  2111							; 
   4638  2111
   4639  2111				   .
   4640  2111							; 
   4641  2111
   4642  2111				   .
   4643  2111							; 
   4644  2111
   4645  2111				   .
   4646  2111							; 
   4647  2111
   4648  2111				   .
   4649  2111							; 
   4650  2111
   4651  2111				   .
   4652  2111							; 
   4653  2111
   4654  2111				   .L0314		;  drawscreen
   4655  2111
   4656  2111		       85 ee		      sta	temp7
   4657  2113		       a9 b1		      lda	#>(ret_point14-1)
   4658  2115		       48		      pha
   4659  2116		       a9 28		      lda	#<(ret_point14-1)
   4660  2118		       48		      pha
   4661  2119		       a9 f4		      lda	#>(drawscreen-1)
   4662  211b		       48		      pha
   4663  211c		       a9 39		      lda	#<(drawscreen-1)
   4664  211e		       48		      pha
   4665  211f		       a5 ee		      lda	temp7
   4666  2121		       48		      pha
   4667  2122		       8a		      txa
   4668  2123		       48		      pha
   4669  2124		       a2 04		      ldx	#4
   4670  2126		       4c eb ff 	      jmp	BS_jsr
   4671  2129				   ret_point14
   4672  2129				   .
   4673  2129							; 
   4674  2129
   4675  2129				   .
   4676  2129							; 
   4677  2129
   4678  2129				   .
   4679  2129							; 
   4680  2129
   4681  2129				   .
   4682  2129							; 
   4683  2129
   4684  2129				   .
   4685  2129							; 
   4686  2129
   4687  2129				   .
   4688  2129							; 
   4689  2129
   4690  2129				   .
   4691  2129							; 
   4692  2129
   4693  2129				   .L0315		;  goto __Continue_in_Bank_3 bank3
   4694  2129
   4695  2129		       85 ee		      sta	temp7
   4696  212b		       a9 cf		      lda	#>(.__Continue_in_Bank_3-1)
   4697  212d		       48		      pha
   4698  212e		       a9 ff		      lda	#<(.__Continue_in_Bank_3-1)
   4699  2130		       48		      pha
   4700  2131		       a5 ee		      lda	temp7
   4701  2133		       48		      pha
   4702  2134		       8a		      txa
   4703  2135		       48		      pha
   4704  2136		       a2 03		      ldx	#3
   4705  2138		       4c eb ff 	      jmp	BS_jsr
   4706  213b				   .
   4707  213b							; 
   4708  213b
   4709  213b				   .
   4710  213b							; 
   4711  213b
   4712  213b				   .
   4713  213b							; 
   4714  213b
   4715  213b				   .
   4716  213b							; 
   4717  213b
   4718  213b				   .
   4719  213b							; 
   4720  213b
   4721  213b				   .
   4722  213b							; 
   4723  213b
   4724  213b				   .
   4725  213b							; 
   4726  213b
   4727  213b				   .
   4728  213b							; 
   4729  213b
   4730  213b				   .
   4731  213b							; 
   4732  213b
   4733  213b				   .
   4734  213b							; 
   4735  213b
   4736  213b				   .__Set_Overworld_Scene
   4737  213b							; __Set_Overworld_Scene
   4738  213b
   4739  213b				   .
   4740  213b							; 
   4741  213b
   4742  213b				   .
   4743  213b							; 
   4744  213b
   4745  213b				   .
   4746  213b							; 
   4747  213b
   4748  213b				   .
   4749  213b							; 
   4750  213b
   4751  213b				   .L0316		;  player0:
   4752  213b
   4753  213b		       a2 5a		      LDX	#<playerL0316_0
   4754  213d		       86 8a		      STX	player0pointerlo
   4755  213f		       a9 f5		      LDA	#>playerL0316_0
   4756  2141		       85 8b		      STA	player0pointerhi
   4757  2143		       a9 07		      LDA	#7
   4758  2145		       85 8e		      STA	player0height
   4759  2147				   .
   4760  2147							; 
   4761  2147
   4762  2147				   .
   4763  2147							; 
   4764  2147
   4765  2147				   .
   4766  2147							; 
   4767  2147
   4768  2147				   .
   4769  2147							; 
   4770  2147
   4771  2147				   .L0317		;  COLUBK  =  _Data_Over_Background_Color[_CurrentScene]
   4772  2147
   4773  2147		       a6 d6		      LDX	_CurrentScene
   4774  2149		       bd 43 b9 	      LDA	_Data_Over_Background_Color,x
   4775  214c		       85 09		      STA	COLUBK
   4776  214e				   .L0318		;  COLUPF  =  _Data_Over_Foreground_Color[_CurrentScene]
   4777  214e
   4778  214e		       a6 d6		      LDX	_CurrentScene
   4779  2150		       bd 66 b9 	      LDA	_Data_Over_Foreground_Color,x
   4780  2153		       85 08		      STA	COLUPF
   4781  2155				   .
   4782  2155							; 
   4783  2155
   4784  2155				   .
   4785  2155							; 
   4786  2155
   4787  2155				   .
   4788  2155							; 
   4789  2155
   4790  2155				   .
   4791  2155							; 
   4792  2155
   4793  2155				   .L0319		;  on _CurrentScene goto __s0 __s1 __s2 __s3 __s4 __s5 __s6 __s7 __s8 __s9 __sA __sB __sC __sD __sE __sF __sG __sH __sI __sJ __sK __sL __sM __sN __sO __sP __sQ __sR __sS __sT __sU __sV
   4794  2155
   4795  2155		       a6 d6		      LDX	_CurrentScene
   4796  2157		       bd 60 b1 	      LDA	.L0319jumptablehi,x
   4797  215a		       48		      PHA
   4798  215b		       bd 80 b1 	      LDA	.L0319jumptablelo,x
   4799  215e		       48		      PHA
   4800  215f		       60		      RTS
   4801  2160				   .L0319jumptablehi
   4802  2160		       b1		      .byte.b	>(.__s0-1)
   4803  2161		       b1		      .byte.b	>(.__s1-1)
   4804  2162		       b2		      .byte.b	>(.__s2-1)
   4805  2163		       b2		      .byte.b	>(.__s3-1)
   4806  2164		       b2		      .byte.b	>(.__s4-1)
   4807  2165		       b2		      .byte.b	>(.__s5-1)
   4808  2166		       b3		      .byte.b	>(.__s6-1)
   4809  2167		       b3		      .byte.b	>(.__s7-1)
   4810  2168		       b3		      .byte.b	>(.__s8-1)
   4811  2169		       b3		      .byte.b	>(.__s9-1)
   4812  216a		       b3		      .byte.b	>(.__sA-1)
   4813  216b		       b4		      .byte.b	>(.__sB-1)
   4814  216c		       b4		      .byte.b	>(.__sC-1)
   4815  216d		       b4		      .byte.b	>(.__sD-1)
   4816  216e		       b4		      .byte.b	>(.__sE-1)
   4817  216f		       b5		      .byte.b	>(.__sF-1)
   4818  2170		       b5		      .byte.b	>(.__sG-1)
   4819  2171		       b5		      .byte.b	>(.__sH-1)
   4820  2172		       b5		      .byte.b	>(.__sI-1)
   4821  2173		       b6		      .byte.b	>(.__sJ-1)
   4822  2174		       b6		      .byte.b	>(.__sK-1)
   4823  2175		       b6		      .byte.b	>(.__sL-1)
   4824  2176		       b6		      .byte.b	>(.__sM-1)
   4825  2177		       b7		      .byte.b	>(.__sN-1)
   4826  2178		       b7		      .byte.b	>(.__sO-1)
   4827  2179		       b7		      .byte.b	>(.__sP-1)
   4828  217a		       b7		      .byte.b	>(.__sQ-1)
   4829  217b		       b8		      .byte.b	>(.__sR-1)
   4830  217c		       b8		      .byte.b	>(.__sS-1)
   4831  217d		       b8		      .byte.b	>(.__sT-1)
   4832  217e		       b8		      .byte.b	>(.__sU-1)
   4833  217f		       b9		      .byte.b	>(.__sV-1)
   4834  2180				   .L0319jumptablelo
   4835  2180		       9f		      .byte.b	<(.__s0-1)
   4836  2181		       db		      .byte.b	<(.__s1-1)
   4837  2182		       17		      .byte.b	<(.__s2-1)
   4838  2183		       53		      .byte.b	<(.__s3-1)
   4839  2184		       8f		      .byte.b	<(.__s4-1)
   4840  2185		       cb		      .byte.b	<(.__s5-1)
   4841  2186		       07		      .byte.b	<(.__s6-1)
   4842  2187		       43		      .byte.b	<(.__s7-1)
   4843  2188		       7f		      .byte.b	<(.__s8-1)
   4844  2189		       c3		      .byte.b	<(.__s9-1)
   4845  218a		       ff		      .byte.b	<(.__sA-1)
   4846  218b		       3b		      .byte.b	<(.__sB-1)
   4847  218c		       77		      .byte.b	<(.__sC-1)
   4848  218d		       b3		      .byte.b	<(.__sD-1)
   4849  218e		       f7		      .byte.b	<(.__sE-1)
   4850  218f		       33		      .byte.b	<(.__sF-1)
   4851  2190		       6f		      .byte.b	<(.__sG-1)
   4852  2191		       ab		      .byte.b	<(.__sH-1)
   4853  2192		       e7		      .byte.b	<(.__sI-1)
   4854  2193		       23		      .byte.b	<(.__sJ-1)
   4855  2194		       5f		      .byte.b	<(.__sK-1)
   4856  2195		       9b		      .byte.b	<(.__sL-1)
   4857  2196		       d7		      .byte.b	<(.__sM-1)
   4858  2197		       1b		      .byte.b	<(.__sN-1)
   4859  2198		       5f		      .byte.b	<(.__sO-1)
   4860  2199		       9b		      .byte.b	<(.__sP-1)
   4861  219a		       d7		      .byte.b	<(.__sQ-1)
   4862  219b		       13		      .byte.b	<(.__sR-1)
   4863  219c		       4f		      .byte.b	<(.__sS-1)
   4864  219d		       8b		      .byte.b	<(.__sT-1)
   4865  219e		       c7		      .byte.b	<(.__sU-1)
   4866  219f		       03		      .byte.b	<(.__sV-1)
   4867  21a0				   .
   4868  21a0							; 
   4869  21a0
   4870  21a0				   .
   4871  21a0							; 
   4872  21a0
   4873  21a0				   .__s0
   4874  21a0							; __s0
   4875  21a0
   4876  21a0				   .L0320		;  playfield:
   4877  21a0
   4878  21a0				  -	      ifconst	pfres
   4879  21a0				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   4880  21a0					      else
   4881  21a0		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   4882  21a2					      endif
   4883  21a2		       4c d1 b1 	      jmp	pflabel1
   4884  21a5				   PF_data1
   4885  21a5		       00 00		      .byte.b	%00000000, %00000000
   4886  21a7					      if	(pfwidth>2)
   4887  21a7		       00 00		      .byte.b	%00000000, %00000000
   4888  21a9					      endif
   4889  21a9		       00 00		      .byte.b	%00000000, %00000000
   4890  21ab					      if	(pfwidth>2)
   4891  21ab		       00 00		      .byte.b	%00000000, %00000000
   4892  21ad					      endif
   4893  21ad		       00 40		      .byte.b	%00000000, %01000000
   4894  21af					      if	(pfwidth>2)
   4895  21af		       00 00		      .byte.b	%00000000, %00000000
   4896  21b1					      endif
   4897  21b1		       00 e0		      .byte.b	%00000000, %11100000
   4898  21b3					      if	(pfwidth>2)
   4899  21b3		       01 00		      .byte.b	%00000001, %00000000
   4900  21b5					      endif
   4901  21b5		       00 f0		      .byte.b	%00000000, %11110000
   4902  21b7					      if	(pfwidth>2)
   4903  21b7		       83 01		      .byte.b	%10000011, %00000001
   4904  21b9					      endif
   4905  21b9		       02 00		      .byte.b	%00000010, %00000000
   4906  21bb					      if	(pfwidth>2)
   4907  21bb		       07 03		      .byte.b	%00000111, %00000011
   4908  21bd					      endif
   4909  21bd		       07 00		      .byte.b	%00000111, %00000000
   4910  21bf					      if	(pfwidth>2)
   4911  21bf		       0f 07		      .byte.b	%00001111, %00000111
   4912  21c1					      endif
   4913  21c1		       0f 01		      .byte.b	%00001111, %00000001
   4914  21c3					      if	(pfwidth>2)
   4915  21c3		       1f 0f		      .byte.b	%00011111, %00001111
   4916  21c5					      endif
   4917  21c5		       1f 03		      .byte.b	%00011111, %00000011
   4918  21c7					      if	(pfwidth>2)
   4919  21c7		       00 00		      .byte.b	%00000000, %00000000
   4920  21c9					      endif
   4921  21c9		       00 00		      .byte.b	%00000000, %00000000
   4922  21cb					      if	(pfwidth>2)
   4923  21cb		       00 00		      .byte.b	%00000000, %00000000
   4924  21cd					      endif
   4925  21cd		       00 00		      .byte.b	%00000000, %00000000
   4926  21cf					      if	(pfwidth>2)
   4927  21cf		       00 00		      .byte.b	%00000000, %00000000
   4928  21d1					      endif
   4929  21d1				   pflabel1
   4930  21d1		       bd a5 b1 	      lda	PF_data1,x
   4931  21d4		       95 a4		      sta	playfield,x
   4932  21d6		       ca		      dex
   4933  21d7		       10 f8		      bpl	pflabel1
   4934  21d9				   .
   4935  21d9							; 
   4936  21d9
   4937  21d9				   .L0321		;  goto __Done_Next_Room
   4938  21d9
   4939  21d9		       4c 11 b1 	      jmp	.__Done_Next_Room
   4940  21dc
   4941  21dc				   .
   4942  21dc							; 
   4943  21dc
   4944  21dc				   .
   4945  21dc							; 
   4946  21dc
   4947  21dc				   .__s1
   4948  21dc							; __s1
   4949  21dc
   4950  21dc				   .L0322		;  playfield:
   4951  21dc
   4952  21dc				  -	      ifconst	pfres
   4953  21dc				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   4954  21dc					      else
   4955  21dc		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   4956  21de					      endif
   4957  21de		       4c 0d b2 	      jmp	pflabel2
   4958  21e1				   PF_data2
   4959  21e1		       00 00		      .byte.b	%00000000, %00000000
   4960  21e3					      if	(pfwidth>2)
   4961  21e3		       00 00		      .byte.b	%00000000, %00000000
   4962  21e5					      endif
   4963  21e5		       00 00		      .byte.b	%00000000, %00000000
   4964  21e7					      if	(pfwidth>2)
   4965  21e7		       00 00		      .byte.b	%00000000, %00000000
   4966  21e9					      endif
   4967  21e9		       0f f8		      .byte.b	%00001111, %11111000
   4968  21eb					      if	(pfwidth>2)
   4969  21eb		       f8 0f		      .byte.b	%11111000, %00001111
   4970  21ed					      endif
   4971  21ed		       00 00		      .byte.b	%00000000, %00000000
   4972  21ef					      if	(pfwidth>2)
   4973  21ef		       00 00		      .byte.b	%00000000, %00000000
   4974  21f1					      endif
   4975  21f1		       00 00		      .byte.b	%00000000, %00000000
   4976  21f3					      if	(pfwidth>2)
   4977  21f3		       00 00		      .byte.b	%00000000, %00000000
   4978  21f5					      endif
   4979  21f5		       0f ff		      .byte.b	%00001111, %11111111
   4980  21f7					      if	(pfwidth>2)
   4981  21f7		       ff 0f		      .byte.b	%11111111, %00001111
   4982  21f9					      endif
   4983  21f9		       00 00		      .byte.b	%00000000, %00000000
   4984  21fb					      if	(pfwidth>2)
   4985  21fb		       00 00		      .byte.b	%00000000, %00000000
   4986  21fd					      endif
   4987  21fd		       00 00		      .byte.b	%00000000, %00000000
   4988  21ff					      if	(pfwidth>2)
   4989  21ff		       00 00		      .byte.b	%00000000, %00000000
   4990  2201					      endif
   4991  2201		       0f f8		      .byte.b	%00001111, %11111000
   4992  2203					      if	(pfwidth>2)
   4993  2203		       f8 0f		      .byte.b	%11111000, %00001111
   4994  2205					      endif
   4995  2205		       00 00		      .byte.b	%00000000, %00000000
   4996  2207					      if	(pfwidth>2)
   4997  2207		       00 00		      .byte.b	%00000000, %00000000
   4998  2209					      endif
   4999  2209		       00 00		      .byte.b	%00000000, %00000000
   5000  220b					      if	(pfwidth>2)
   5001  220b		       00 00		      .byte.b	%00000000, %00000000
   5002  220d					      endif
   5003  220d				   pflabel2
   5004  220d		       bd e1 b1 	      lda	PF_data2,x
   5005  2210		       95 a4		      sta	playfield,x
   5006  2212		       ca		      dex
   5007  2213		       10 f8		      bpl	pflabel2
   5008  2215				   .
   5009  2215							; 
   5010  2215
   5011  2215				   .L0323		;  goto __Done_Next_Room
   5012  2215
   5013  2215		       4c 11 b1 	      jmp	.__Done_Next_Room
   5014  2218
   5015  2218				   .
   5016  2218							; 
   5017  2218
   5018  2218				   .
   5019  2218							; 
   5020  2218
   5021  2218				   .__s2
   5022  2218							; __s2
   5023  2218
   5024  2218				   .L0324		;  playfield:
   5025  2218
   5026  2218				  -	      ifconst	pfres
   5027  2218				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5028  2218					      else
   5029  2218		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5030  221a					      endif
   5031  221a		       4c 49 b2 	      jmp	pflabel3
   5032  221d				   PF_data3
   5033  221d		       00 00		      .byte.b	%00000000, %00000000
   5034  221f					      if	(pfwidth>2)
   5035  221f		       00 00		      .byte.b	%00000000, %00000000
   5036  2221					      endif
   5037  2221		       00 00		      .byte.b	%00000000, %00000000
   5038  2223					      if	(pfwidth>2)
   5039  2223		       00 00		      .byte.b	%00000000, %00000000
   5040  2225					      endif
   5041  2225		       01 03		      .byte.b	%00000001, %00000011
   5042  2227					      if	(pfwidth>2)
   5043  2227		       03 01		      .byte.b	%00000011, %00000001
   5044  2229					      endif
   5045  2229		       03 07		      .byte.b	%00000011, %00000111
   5046  222b					      if	(pfwidth>2)
   5047  222b		       07 03		      .byte.b	%00000111, %00000011
   5048  222d					      endif
   5049  222d		       01 03		      .byte.b	%00000001, %00000011
   5050  222f					      if	(pfwidth>2)
   5051  222f		       03 01		      .byte.b	%00000011, %00000001
   5052  2231					      endif
   5053  2231		       00 00		      .byte.b	%00000000, %00000000
   5054  2233					      if	(pfwidth>2)
   5055  2233		       00 00		      .byte.b	%00000000, %00000000
   5056  2235					      endif
   5057  2235		       00 c0		      .byte.b	%00000000, %11000000
   5058  2237					      if	(pfwidth>2)
   5059  2237		       c0 00		      .byte.b	%11000000, %00000000
   5060  2239					      endif
   5061  2239		       00 e0		      .byte.b	%00000000, %11100000
   5062  223b					      if	(pfwidth>2)
   5063  223b		       e0 00		      .byte.b	%11100000, %00000000
   5064  223d					      endif
   5065  223d		       00 c0		      .byte.b	%00000000, %11000000
   5066  223f					      if	(pfwidth>2)
   5067  223f		       c0 00		      .byte.b	%11000000, %00000000
   5068  2241					      endif
   5069  2241		       00 00		      .byte.b	%00000000, %00000000
   5070  2243					      if	(pfwidth>2)
   5071  2243		       00 00		      .byte.b	%00000000, %00000000
   5072  2245					      endif
   5073  2245		       00 00		      .byte.b	%00000000, %00000000
   5074  2247					      if	(pfwidth>2)
   5075  2247		       00 00		      .byte.b	%00000000, %00000000
   5076  2249					      endif
   5077  2249				   pflabel3
   5078  2249		       bd 1d b2 	      lda	PF_data3,x
   5079  224c		       95 a4		      sta	playfield,x
   5080  224e		       ca		      dex
   5081  224f		       10 f8		      bpl	pflabel3
   5082  2251				   .
   5083  2251							; 
   5084  2251
   5085  2251				   .L0325		;  goto __Done_Next_Room
   5086  2251
   5087  2251		       4c 11 b1 	      jmp	.__Done_Next_Room
   5088  2254
   5089  2254				   .
   5090  2254							; 
   5091  2254
   5092  2254				   .
   5093  2254							; 
   5094  2254
   5095  2254				   .__s3
   5096  2254							; __s3
   5097  2254
   5098  2254				   .L0326		;  playfield:
   5099  2254
   5100  2254				  -	      ifconst	pfres
   5101  2254				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5102  2254					      else
   5103  2254		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5104  2256					      endif
   5105  2256		       4c 85 b2 	      jmp	pflabel4
   5106  2259				   PF_data4
   5107  2259		       00 00		      .byte.b	%00000000, %00000000
   5108  225b					      if	(pfwidth>2)
   5109  225b		       00 00		      .byte.b	%00000000, %00000000
   5110  225d					      endif
   5111  225d		       00 00		      .byte.b	%00000000, %00000000
   5112  225f					      if	(pfwidth>2)
   5113  225f		       00 00		      .byte.b	%00000000, %00000000
   5114  2261					      endif
   5115  2261		       0f f1		      .byte.b	%00001111, %11110001
   5116  2263					      if	(pfwidth>2)
   5117  2263		       e3 0f		      .byte.b	%11100011, %00001111
   5118  2265					      endif
   5119  2265		       0f f1		      .byte.b	%00001111, %11110001
   5120  2267					      if	(pfwidth>2)
   5121  2267		       e3 0f		      .byte.b	%11100011, %00001111
   5122  2269					      endif
   5123  2269		       00 00		      .byte.b	%00000000, %00000000
   5124  226b					      if	(pfwidth>2)
   5125  226b		       00 00		      .byte.b	%00000000, %00000000
   5126  226d					      endif
   5127  226d		       00 00		      .byte.b	%00000000, %00000000
   5128  226f					      if	(pfwidth>2)
   5129  226f		       00 00		      .byte.b	%00000000, %00000000
   5130  2271					      endif
   5131  2271		       00 00		      .byte.b	%00000000, %00000000
   5132  2273					      if	(pfwidth>2)
   5133  2273		       00 00		      .byte.b	%00000000, %00000000
   5134  2275					      endif
   5135  2275		       0f f1		      .byte.b	%00001111, %11110001
   5136  2277					      if	(pfwidth>2)
   5137  2277		       e3 0f		      .byte.b	%11100011, %00001111
   5138  2279					      endif
   5139  2279		       0f f1		      .byte.b	%00001111, %11110001
   5140  227b					      if	(pfwidth>2)
   5141  227b		       e3 0f		      .byte.b	%11100011, %00001111
   5142  227d					      endif
   5143  227d		       00 00		      .byte.b	%00000000, %00000000
   5144  227f					      if	(pfwidth>2)
   5145  227f		       00 00		      .byte.b	%00000000, %00000000
   5146  2281					      endif
   5147  2281		       00 00		      .byte.b	%00000000, %00000000
   5148  2283					      if	(pfwidth>2)
   5149  2283		       00 00		      .byte.b	%00000000, %00000000
   5150  2285					      endif
   5151  2285				   pflabel4
   5152  2285		       bd 59 b2 	      lda	PF_data4,x
   5153  2288		       95 a4		      sta	playfield,x
   5154  228a		       ca		      dex
   5155  228b		       10 f8		      bpl	pflabel4
   5156  228d				   .
   5157  228d							; 
   5158  228d
   5159  228d				   .L0327		;  goto __Done_Next_Room
   5160  228d
   5161  228d		       4c 11 b1 	      jmp	.__Done_Next_Room
   5162  2290
   5163  2290				   .
   5164  2290							; 
   5165  2290
   5166  2290				   .
   5167  2290							; 
   5168  2290
   5169  2290				   .__s4
   5170  2290							; __s4
   5171  2290
   5172  2290				   .L0328		;  playfield:
   5173  2290
   5174  2290				  -	      ifconst	pfres
   5175  2290				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5176  2290					      else
   5177  2290		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5178  2292					      endif
   5179  2292		       4c c1 b2 	      jmp	pflabel5
   5180  2295				   PF_data5
   5181  2295		       00 00		      .byte.b	%00000000, %00000000
   5182  2297					      if	(pfwidth>2)
   5183  2297		       00 00		      .byte.b	%00000000, %00000000
   5184  2299					      endif
   5185  2299		       00 00		      .byte.b	%00000000, %00000000
   5186  229b					      if	(pfwidth>2)
   5187  229b		       00 00		      .byte.b	%00000000, %00000000
   5188  229d					      endif
   5189  229d		       00 80		      .byte.b	%00000000, %10000000
   5190  229f					      if	(pfwidth>2)
   5191  229f		       00 00		      .byte.b	%00000000, %00000000
   5192  22a1					      endif
   5193  22a1		       00 c0		      .byte.b	%00000000, %11000000
   5194  22a3					      if	(pfwidth>2)
   5195  22a3		       80 00		      .byte.b	%10000000, %00000000
   5196  22a5					      endif
   5197  22a5		       00 e0		      .byte.b	%00000000, %11100000
   5198  22a7					      if	(pfwidth>2)
   5199  22a7		       c0 00		      .byte.b	%11000000, %00000000
   5200  22a9					      endif
   5201  22a9		       00 f8		      .byte.b	%00000000, %11111000
   5202  22ab					      if	(pfwidth>2)
   5203  22ab		       f0 00		      .byte.b	%11110000, %00000000
   5204  22ad					      endif
   5205  22ad		       00 fe		      .byte.b	%00000000, %11111110
   5206  22af					      if	(pfwidth>2)
   5207  22af		       fc 00		      .byte.b	%11111100, %00000000
   5208  22b1					      endif
   5209  22b1		       01 ff		      .byte.b	%00000001, %11111111
   5210  22b3					      if	(pfwidth>2)
   5211  22b3		       ff 00		      .byte.b	%11111111, %00000000
   5212  22b5					      endif
   5213  22b5		       07 ff		      .byte.b	%00000111, %11111111
   5214  22b7					      if	(pfwidth>2)
   5215  22b7		       ff 03		      .byte.b	%11111111, %00000011
   5216  22b9					      endif
   5217  22b9		       00 00		      .byte.b	%00000000, %00000000
   5218  22bb					      if	(pfwidth>2)
   5219  22bb		       00 00		      .byte.b	%00000000, %00000000
   5220  22bd					      endif
   5221  22bd		       00 00		      .byte.b	%00000000, %00000000
   5222  22bf					      if	(pfwidth>2)
   5223  22bf		       00 00		      .byte.b	%00000000, %00000000
   5224  22c1					      endif
   5225  22c1				   pflabel5
   5226  22c1		       bd 95 b2 	      lda	PF_data5,x
   5227  22c4		       95 a4		      sta	playfield,x
   5228  22c6		       ca		      dex
   5229  22c7		       10 f8		      bpl	pflabel5
   5230  22c9				   .
   5231  22c9							; 
   5232  22c9
   5233  22c9				   .L0329		;  goto __Done_Next_Room
   5234  22c9
   5235  22c9		       4c 11 b1 	      jmp	.__Done_Next_Room
   5236  22cc
   5237  22cc				   .
   5238  22cc							; 
   5239  22cc
   5240  22cc				   .
   5241  22cc							; 
   5242  22cc
   5243  22cc				   .__s5
   5244  22cc							; __s5
   5245  22cc
   5246  22cc				   .L0330		;  playfield:
   5247  22cc
   5248  22cc				  -	      ifconst	pfres
   5249  22cc				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5250  22cc					      else
   5251  22cc		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5252  22ce					      endif
   5253  22ce		       4c fd b2 	      jmp	pflabel6
   5254  22d1				   PF_data6
   5255  22d1		       00 00		      .byte.b	%00000000, %00000000
   5256  22d3					      if	(pfwidth>2)
   5257  22d3		       00 00		      .byte.b	%00000000, %00000000
   5258  22d5					      endif
   5259  22d5		       00 00		      .byte.b	%00000000, %00000000
   5260  22d7					      if	(pfwidth>2)
   5261  22d7		       00 00		      .byte.b	%00000000, %00000000
   5262  22d9					      endif
   5263  22d9		       08 04		      .byte.b	%00001000, %00000100
   5264  22db					      if	(pfwidth>2)
   5265  22db		       00 00		      .byte.b	%00000000, %00000000
   5266  22dd					      endif
   5267  22dd		       1c 0e		      .byte.b	%00011100, %00001110
   5268  22df					      if	(pfwidth>2)
   5269  22df		       04 00		      .byte.b	%00000100, %00000000
   5270  22e1					      endif
   5271  22e1		       08 04		      .byte.b	%00001000, %00000100
   5272  22e3					      if	(pfwidth>2)
   5273  22e3		       0e 00		      .byte.b	%00001110, %00000000
   5274  22e5					      endif
   5275  22e5		       00 00		      .byte.b	%00000000, %00000000
   5276  22e7					      if	(pfwidth>2)
   5277  22e7		       04 00		      .byte.b	%00000100, %00000000
   5278  22e9					      endif
   5279  22e9		       00 80		      .byte.b	%00000000, %10000000
   5280  22eb					      if	(pfwidth>2)
   5281  22eb		       00 04		      .byte.b	%00000000, %00000100
   5282  22ed					      endif
   5283  22ed		       00 c0		      .byte.b	%00000000, %11000000
   5284  22ef					      if	(pfwidth>2)
   5285  22ef		       80 0e		      .byte.b	%10000000, %00001110
   5286  22f1					      endif
   5287  22f1		       00 80		      .byte.b	%00000000, %10000000
   5288  22f3					      if	(pfwidth>2)
   5289  22f3		       00 04		      .byte.b	%00000000, %00000100
   5290  22f5					      endif
   5291  22f5		       00 00		      .byte.b	%00000000, %00000000
   5292  22f7					      if	(pfwidth>2)
   5293  22f7		       00 00		      .byte.b	%00000000, %00000000
   5294  22f9					      endif
   5295  22f9		       00 00		      .byte.b	%00000000, %00000000
   5296  22fb					      if	(pfwidth>2)
   5297  22fb		       00 00		      .byte.b	%00000000, %00000000
   5298  22fd					      endif
   5299  22fd				   pflabel6
   5300  22fd		       bd d1 b2 	      lda	PF_data6,x
   5301  2300		       95 a4		      sta	playfield,x
   5302  2302		       ca		      dex
   5303  2303		       10 f8		      bpl	pflabel6
   5304  2305				   .
   5305  2305							; 
   5306  2305
   5307  2305				   .L0331		;  goto __Done_Next_Room
   5308  2305
   5309  2305		       4c 11 b1 	      jmp	.__Done_Next_Room
   5310  2308
   5311  2308				   .
   5312  2308							; 
   5313  2308
   5314  2308				   .
   5315  2308							; 
   5316  2308
   5317  2308				   .__s6
   5318  2308							; __s6
   5319  2308
   5320  2308				   .L0332		;  playfield:
   5321  2308
   5322  2308				  -	      ifconst	pfres
   5323  2308				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5324  2308					      else
   5325  2308		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5326  230a					      endif
   5327  230a		       4c 39 b3 	      jmp	pflabel7
   5328  230d				   PF_data7
   5329  230d		       00 00		      .byte.b	%00000000, %00000000
   5330  230f					      if	(pfwidth>2)
   5331  230f		       00 00		      .byte.b	%00000000, %00000000
   5332  2311					      endif
   5333  2311		       00 00		      .byte.b	%00000000, %00000000
   5334  2313					      if	(pfwidth>2)
   5335  2313		       00 00		      .byte.b	%00000000, %00000000
   5336  2315					      endif
   5337  2315		       00 30		      .byte.b	%00000000, %00110000
   5338  2317					      if	(pfwidth>2)
   5339  2317		       30 00		      .byte.b	%00110000, %00000000
   5340  2319					      endif
   5341  2319		       00 30		      .byte.b	%00000000, %00110000
   5342  231b					      if	(pfwidth>2)
   5343  231b		       30 00		      .byte.b	%00110000, %00000000
   5344  231d					      endif
   5345  231d		       0f 03		      .byte.b	%00001111, %00000011
   5346  231f					      if	(pfwidth>2)
   5347  231f		       03 0f		      .byte.b	%00000011, %00001111
   5348  2321					      endif
   5349  2321		       0f 03		      .byte.b	%00001111, %00000011
   5350  2323					      if	(pfwidth>2)
   5351  2323		       03 0f		      .byte.b	%00000011, %00001111
   5352  2325					      endif
   5353  2325		       0f 03		      .byte.b	%00001111, %00000011
   5354  2327					      if	(pfwidth>2)
   5355  2327		       03 0f		      .byte.b	%00000011, %00001111
   5356  2329					      endif
   5357  2329		       00 30		      .byte.b	%00000000, %00110000
   5358  232b					      if	(pfwidth>2)
   5359  232b		       30 00		      .byte.b	%00110000, %00000000
   5360  232d					      endif
   5361  232d		       00 30		      .byte.b	%00000000, %00110000
   5362  232f					      if	(pfwidth>2)
   5363  232f		       30 00		      .byte.b	%00110000, %00000000
   5364  2331					      endif
   5365  2331		       00 00		      .byte.b	%00000000, %00000000
   5366  2333					      if	(pfwidth>2)
   5367  2333		       00 00		      .byte.b	%00000000, %00000000
   5368  2335					      endif
   5369  2335		       00 00		      .byte.b	%00000000, %00000000
   5370  2337					      if	(pfwidth>2)
   5371  2337		       00 00		      .byte.b	%00000000, %00000000
   5372  2339					      endif
   5373  2339				   pflabel7
   5374  2339		       bd 0d b3 	      lda	PF_data7,x
   5375  233c		       95 a4		      sta	playfield,x
   5376  233e		       ca		      dex
   5377  233f		       10 f8		      bpl	pflabel7
   5378  2341				   .
   5379  2341							; 
   5380  2341
   5381  2341				   .L0333		;  goto __Done_Next_Room
   5382  2341
   5383  2341		       4c 11 b1 	      jmp	.__Done_Next_Room
   5384  2344
   5385  2344				   .
   5386  2344							; 
   5387  2344
   5388  2344				   .
   5389  2344							; 
   5390  2344
   5391  2344				   .__s7
   5392  2344							; __s7
   5393  2344
   5394  2344				   .L0334		;  playfield:
   5395  2344
   5396  2344				  -	      ifconst	pfres
   5397  2344				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5398  2344					      else
   5399  2344		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5400  2346					      endif
   5401  2346		       4c 75 b3 	      jmp	pflabel8
   5402  2349				   PF_data8
   5403  2349		       00 00		      .byte.b	%00000000, %00000000
   5404  234b					      if	(pfwidth>2)
   5405  234b		       00 00		      .byte.b	%00000000, %00000000
   5406  234d					      endif
   5407  234d		       00 00		      .byte.b	%00000000, %00000000
   5408  234f					      if	(pfwidth>2)
   5409  234f		       00 00		      .byte.b	%00000000, %00000000
   5410  2351					      endif
   5411  2351		       00 00		      .byte.b	%00000000, %00000000
   5412  2353					      if	(pfwidth>2)
   5413  2353		       ff 00		      .byte.b	%11111111, %00000000
   5414  2355					      endif
   5415  2355		       00 fc		      .byte.b	%00000000, %11111100
   5416  2357					      if	(pfwidth>2)
   5417  2357		       ff 01		      .byte.b	%11111111, %00000001
   5418  2359					      endif
   5419  2359		       00 fe		      .byte.b	%00000000, %11111110
   5420  235b					      if	(pfwidth>2)
   5421  235b		       fe 00		      .byte.b	%11111110, %00000000
   5422  235d					      endif
   5423  235d		       00 ff		      .byte.b	%00000000, %11111111
   5424  235f					      if	(pfwidth>2)
   5425  235f		       fe 00		      .byte.b	%11111110, %00000000
   5426  2361					      endif
   5427  2361		       00 ff		      .byte.b	%00000000, %11111111
   5428  2363					      if	(pfwidth>2)
   5429  2363		       ff 03		      .byte.b	%11111111, %00000011
   5430  2365					      endif
   5431  2365		       00 fe		      .byte.b	%00000000, %11111110
   5432  2367					      if	(pfwidth>2)
   5433  2367		       ff 03		      .byte.b	%11111111, %00000011
   5434  2369					      endif
   5435  2369		       00 f0		      .byte.b	%00000000, %11110000
   5436  236b					      if	(pfwidth>2)
   5437  236b		       9f 01		      .byte.b	%10011111, %00000001
   5438  236d					      endif
   5439  236d		       00 00		      .byte.b	%00000000, %00000000
   5440  236f					      if	(pfwidth>2)
   5441  236f		       00 00		      .byte.b	%00000000, %00000000
   5442  2371					      endif
   5443  2371		       00 00		      .byte.b	%00000000, %00000000
   5444  2373					      if	(pfwidth>2)
   5445  2373		       00 00		      .byte.b	%00000000, %00000000
   5446  2375					      endif
   5447  2375				   pflabel8
   5448  2375		       bd 49 b3 	      lda	PF_data8,x
   5449  2378		       95 a4		      sta	playfield,x
   5450  237a		       ca		      dex
   5451  237b		       10 f8		      bpl	pflabel8
   5452  237d				   .
   5453  237d							; 
   5454  237d
   5455  237d				   .L0335		;  goto __Done_Next_Room
   5456  237d
   5457  237d		       4c 11 b1 	      jmp	.__Done_Next_Room
   5458  2380
   5459  2380				   .
   5460  2380							; 
   5461  2380
   5462  2380				   .
   5463  2380							; 
   5464  2380
   5465  2380				   .__s8
   5466  2380							; __s8
   5467  2380
   5468  2380				   .
   5469  2380							; 
   5470  2380
   5471  2380				   .L0336		;  player0x  =  49  :	player0y  =  56
   5472  2380
   5473  2380		       a9 31		      LDA	#49
   5474  2382		       85 80		      STA	player0x
   5475  2384		       a9 38		      LDA	#56
   5476  2386		       85 85		      STA	player0y
   5477  2388				   .
   5478  2388							; 
   5479  2388
   5480  2388				   .L0337		;  playfield:
   5481  2388
   5482  2388				  -	      ifconst	pfres
   5483  2388				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5484  2388					      else
   5485  2388		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5486  238a					      endif
   5487  238a		       4c b9 b3 	      jmp	pflabel9
   5488  238d				   PF_data9
   5489  238d		       00 00		      .byte.b	%00000000, %00000000
   5490  238f					      if	(pfwidth>2)
   5491  238f		       00 00		      .byte.b	%00000000, %00000000
   5492  2391					      endif
   5493  2391		       00 00		      .byte.b	%00000000, %00000000
   5494  2393					      if	(pfwidth>2)
   5495  2393		       00 00		      .byte.b	%00000000, %00000000
   5496  2395					      endif
   5497  2395		       00 ff		      .byte.b	%00000000, %11111111
   5498  2397					      if	(pfwidth>2)
   5499  2397		       80 02		      .byte.b	%10000000, %00000010
   5500  2399					      endif
   5501  2399		       03 ff		      .byte.b	%00000011, %11111111
   5502  239b					      if	(pfwidth>2)
   5503  239b		       c0 07		      .byte.b	%11000000, %00000111
   5504  239d					      endif
   5505  239d		       07 ff		      .byte.b	%00000111, %11111111
   5506  239f					      if	(pfwidth>2)
   5507  239f		       c1 0f		      .byte.b	%11000001, %00001111
   5508  23a1					      endif
   5509  23a1		       07 ff		      .byte.b	%00000111, %11111111
   5510  23a3					      if	(pfwidth>2)
   5511  23a3		       83 1f		      .byte.b	%10000011, %00011111
   5512  23a5					      endif
   5513  23a5		       03 fc		      .byte.b	%00000011, %11111100
   5514  23a7					      if	(pfwidth>2)
   5515  23a7		       80 02		      .byte.b	%10000000, %00000010
   5516  23a9					      endif
   5517  23a9		       03 fc		      .byte.b	%00000011, %11111100
   5518  23ab					      if	(pfwidth>2)
   5519  23ab		       00 02		      .byte.b	%00000000, %00000010
   5520  23ad					      endif
   5521  23ad		       00 00		      .byte.b	%00000000, %00000000
   5522  23af					      if	(pfwidth>2)
   5523  23af		       00 00		      .byte.b	%00000000, %00000000
   5524  23b1					      endif
   5525  23b1		       00 00		      .byte.b	%00000000, %00000000
   5526  23b3					      if	(pfwidth>2)
   5527  23b3		       00 00		      .byte.b	%00000000, %00000000
   5528  23b5					      endif
   5529  23b5		       00 00		      .byte.b	%00000000, %00000000
   5530  23b7					      if	(pfwidth>2)
   5531  23b7		       00 00		      .byte.b	%00000000, %00000000
   5532  23b9					      endif
   5533  23b9				   pflabel9
   5534  23b9		       bd 8d b3 	      lda	PF_data9,x
   5535  23bc		       95 a4		      sta	playfield,x
   5536  23be		       ca		      dex
   5537  23bf		       10 f8		      bpl	pflabel9
   5538  23c1				   .
   5539  23c1							; 
   5540  23c1
   5541  23c1				   .L0338		;  goto __Done_Next_Room
   5542  23c1
   5543  23c1		       4c 11 b1 	      jmp	.__Done_Next_Room
   5544  23c4
   5545  23c4				   .
   5546  23c4							; 
   5547  23c4
   5548  23c4				   .
   5549  23c4							; 
   5550  23c4
   5551  23c4				   .__s9
   5552  23c4							; __s9
   5553  23c4
   5554  23c4				   .L0339		;  playfield:
   5555  23c4
   5556  23c4				  -	      ifconst	pfres
   5557  23c4				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5558  23c4					      else
   5559  23c4		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5560  23c6					      endif
   5561  23c6		       4c f5 b3 	      jmp	pflabel10
   5562  23c9				   PF_data10
   5563  23c9		       00 00		      .byte.b	%00000000, %00000000
   5564  23cb					      if	(pfwidth>2)
   5565  23cb		       00 00		      .byte.b	%00000000, %00000000
   5566  23cd					      endif
   5567  23cd		       00 00		      .byte.b	%00000000, %00000000
   5568  23cf					      if	(pfwidth>2)
   5569  23cf		       00 00		      .byte.b	%00000000, %00000000
   5570  23d1					      endif
   5571  23d1		       00 00		      .byte.b	%00000000, %00000000
   5572  23d3					      if	(pfwidth>2)
   5573  23d3		       00 00		      .byte.b	%00000000, %00000000
   5574  23d5					      endif
   5575  23d5		       07 00		      .byte.b	%00000111, %00000000
   5576  23d7					      if	(pfwidth>2)
   5577  23d7		       00 00		      .byte.b	%00000000, %00000000
   5578  23d9					      endif
   5579  23d9		       0f 01		      .byte.b	%00001111, %00000001
   5580  23db					      if	(pfwidth>2)
   5581  23db		       0e 00		      .byte.b	%00001110, %00000000
   5582  23dd					      endif
   5583  23dd		       0f 01		      .byte.b	%00001111, %00000001
   5584  23df					      if	(pfwidth>2)
   5585  23df		       1f 00		      .byte.b	%00011111, %00000000
   5586  23e1					      endif
   5587  23e1		       07 00		      .byte.b	%00000111, %00000000
   5588  23e3					      if	(pfwidth>2)
   5589  23e3		       1f 00		      .byte.b	%00011111, %00000000
   5590  23e5					      endif
   5591  23e5		       00 00		      .byte.b	%00000000, %00000000
   5592  23e7					      if	(pfwidth>2)
   5593  23e7		       0e 00		      .byte.b	%00001110, %00000000
   5594  23e9					      endif
   5595  23e9		       00 00		      .byte.b	%00000000, %00000000
   5596  23eb					      if	(pfwidth>2)
   5597  23eb		       00 00		      .byte.b	%00000000, %00000000
   5598  23ed					      endif
   5599  23ed		       00 00		      .byte.b	%00000000, %00000000
   5600  23ef					      if	(pfwidth>2)
   5601  23ef		       00 00		      .byte.b	%00000000, %00000000
   5602  23f1					      endif
   5603  23f1		       00 00		      .byte.b	%00000000, %00000000
   5604  23f3					      if	(pfwidth>2)
   5605  23f3		       00 00		      .byte.b	%00000000, %00000000
   5606  23f5					      endif
   5607  23f5				   pflabel10
   5608  23f5		       bd c9 b3 	      lda	PF_data10,x
   5609  23f8		       95 a4		      sta	playfield,x
   5610  23fa		       ca		      dex
   5611  23fb		       10 f8		      bpl	pflabel10
   5612  23fd				   .
   5613  23fd							; 
   5614  23fd
   5615  23fd				   .L0340		;  goto __Done_Next_Room
   5616  23fd
   5617  23fd		       4c 11 b1 	      jmp	.__Done_Next_Room
   5618  2400
   5619  2400				   .
   5620  2400							; 
   5621  2400
   5622  2400				   .
   5623  2400							; 
   5624  2400
   5625  2400				   .__sA
   5626  2400							; __sA
   5627  2400
   5628  2400				   .L0341		;  playfield:
   5629  2400
   5630  2400				  -	      ifconst	pfres
   5631  2400				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5632  2400					      else
   5633  2400		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5634  2402					      endif
   5635  2402		       4c 31 b4 	      jmp	pflabel11
   5636  2405				   PF_data11
   5637  2405		       00 00		      .byte.b	%00000000, %00000000
   5638  2407					      if	(pfwidth>2)
   5639  2407		       00 00		      .byte.b	%00000000, %00000000
   5640  2409					      endif
   5641  2409		       00 00		      .byte.b	%00000000, %00000000
   5642  240b					      if	(pfwidth>2)
   5643  240b		       00 00		      .byte.b	%00000000, %00000000
   5644  240d					      endif
   5645  240d		       0f f3		      .byte.b	%00001111, %11110011
   5646  240f					      if	(pfwidth>2)
   5647  240f		       f3 0f		      .byte.b	%11110011, %00001111
   5648  2411					      endif
   5649  2411		       0c 00		      .byte.b	%00001100, %00000000
   5650  2413					      if	(pfwidth>2)
   5651  2413		       00 0c		      .byte.b	%00000000, %00001100
   5652  2415					      endif
   5653  2415		       0c 00		      .byte.b	%00001100, %00000000
   5654  2417					      if	(pfwidth>2)
   5655  2417		       00 0c		      .byte.b	%00000000, %00001100
   5656  2419					      endif
   5657  2419		       00 00		      .byte.b	%00000000, %00000000
   5658  241b					      if	(pfwidth>2)
   5659  241b		       00 00		      .byte.b	%00000000, %00000000
   5660  241d					      endif
   5661  241d		       00 00		      .byte.b	%00000000, %00000000
   5662  241f					      if	(pfwidth>2)
   5663  241f		       00 00		      .byte.b	%00000000, %00000000
   5664  2421					      endif
   5665  2421		       0c 00		      .byte.b	%00001100, %00000000
   5666  2423					      if	(pfwidth>2)
   5667  2423		       00 0c		      .byte.b	%00000000, %00001100
   5668  2425					      endif
   5669  2425		       0f f3		      .byte.b	%00001111, %11110011
   5670  2427					      if	(pfwidth>2)
   5671  2427		       f3 0f		      .byte.b	%11110011, %00001111
   5672  2429					      endif
   5673  2429		       00 00		      .byte.b	%00000000, %00000000
   5674  242b					      if	(pfwidth>2)
   5675  242b		       00 00		      .byte.b	%00000000, %00000000
   5676  242d					      endif
   5677  242d		       00 00		      .byte.b	%00000000, %00000000
   5678  242f					      if	(pfwidth>2)
   5679  242f		       00 00		      .byte.b	%00000000, %00000000
   5680  2431					      endif
   5681  2431				   pflabel11
   5682  2431		       bd 05 b4 	      lda	PF_data11,x
   5683  2434		       95 a4		      sta	playfield,x
   5684  2436		       ca		      dex
   5685  2437		       10 f8		      bpl	pflabel11
   5686  2439				   .L0342		;  goto __Done_Next_Room
   5687  2439
   5688  2439		       4c 11 b1 	      jmp	.__Done_Next_Room
   5689  243c
   5690  243c				   .
   5691  243c							; 
   5692  243c
   5693  243c				   .
   5694  243c							; 
   5695  243c
   5696  243c				   .__sB
   5697  243c							; __sB
   5698  243c
   5699  243c				   .L0343		;  playfield:
   5700  243c
   5701  243c				  -	      ifconst	pfres
   5702  243c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5703  243c					      else
   5704  243c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5705  243e					      endif
   5706  243e		       4c 6d b4 	      jmp	pflabel12
   5707  2441				   PF_data12
   5708  2441		       00 00		      .byte.b	%00000000, %00000000
   5709  2443					      if	(pfwidth>2)
   5710  2443		       00 00		      .byte.b	%00000000, %00000000
   5711  2445					      endif
   5712  2445		       00 00		      .byte.b	%00000000, %00000000
   5713  2447					      if	(pfwidth>2)
   5714  2447		       00 00		      .byte.b	%00000000, %00000000
   5715  2449					      endif
   5716  2449		       01 07		      .byte.b	%00000001, %00000111
   5717  244b					      if	(pfwidth>2)
   5718  244b		       00 00		      .byte.b	%00000000, %00000000
   5719  244d					      endif
   5720  244d		       07 1f		      .byte.b	%00000111, %00011111
   5721  244f					      if	(pfwidth>2)
   5722  244f		       00 00		      .byte.b	%00000000, %00000000
   5723  2451					      endif
   5724  2451		       1f 7f		      .byte.b	%00011111, %01111111
   5725  2453					      if	(pfwidth>2)
   5726  2453		       00 00		      .byte.b	%00000000, %00000000
   5727  2455					      endif
   5728  2455		       07 1f		      .byte.b	%00000111, %00011111
   5729  2457					      if	(pfwidth>2)
   5730  2457		       00 00		      .byte.b	%00000000, %00000000
   5731  2459					      endif
   5732  2459		       01 07		      .byte.b	%00000001, %00000111
   5733  245b					      if	(pfwidth>2)
   5734  245b		       01 03		      .byte.b	%00000001, %00000011
   5735  245d					      endif
   5736  245d		       00 00		      .byte.b	%00000000, %00000000
   5737  245f					      if	(pfwidth>2)
   5738  245f		       03 07		      .byte.b	%00000011, %00000111
   5739  2461					      endif
   5740  2461		       00 00		      .byte.b	%00000000, %00000000
   5741  2463					      if	(pfwidth>2)
   5742  2463		       01 03		      .byte.b	%00000001, %00000011
   5743  2465					      endif
   5744  2465		       00 00		      .byte.b	%00000000, %00000000
   5745  2467					      if	(pfwidth>2)
   5746  2467		       00 00		      .byte.b	%00000000, %00000000
   5747  2469					      endif
   5748  2469		       00 00		      .byte.b	%00000000, %00000000
   5749  246b					      if	(pfwidth>2)
   5750  246b		       00 00		      .byte.b	%00000000, %00000000
   5751  246d					      endif
   5752  246d				   pflabel12
   5753  246d		       bd 41 b4 	      lda	PF_data12,x
   5754  2470		       95 a4		      sta	playfield,x
   5755  2472		       ca		      dex
   5756  2473		       10 f8		      bpl	pflabel12
   5757  2475				   .
   5758  2475							; 
   5759  2475
   5760  2475				   .L0344		;  goto __Done_Next_Room
   5761  2475
   5762  2475		       4c 11 b1 	      jmp	.__Done_Next_Room
   5763  2478
   5764  2478				   .
   5765  2478							; 
   5766  2478
   5767  2478				   .
   5768  2478							; 
   5769  2478
   5770  2478				   .__sC
   5771  2478							; __sC
   5772  2478
   5773  2478				   .L0345		;  playfield:
   5774  2478
   5775  2478				  -	      ifconst	pfres
   5776  2478				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5777  2478					      else
   5778  2478		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5779  247a					      endif
   5780  247a		       4c a9 b4 	      jmp	pflabel13
   5781  247d				   PF_data13
   5782  247d		       00 00		      .byte.b	%00000000, %00000000
   5783  247f					      if	(pfwidth>2)
   5784  247f		       00 00		      .byte.b	%00000000, %00000000
   5785  2481					      endif
   5786  2481		       00 00		      .byte.b	%00000000, %00000000
   5787  2483					      if	(pfwidth>2)
   5788  2483		       00 00		      .byte.b	%00000000, %00000000
   5789  2485					      endif
   5790  2485		       03 f1		      .byte.b	%00000011, %11110001
   5791  2487					      if	(pfwidth>2)
   5792  2487		       f1 03		      .byte.b	%11110001, %00000011
   5793  2489					      endif
   5794  2489		       0f c3		      .byte.b	%00001111, %11000011
   5795  248b					      if	(pfwidth>2)
   5796  248b		       c3 0f		      .byte.b	%11000011, %00001111
   5797  248d					      endif
   5798  248d		       1f c3		      .byte.b	%00011111, %11000011
   5799  248f					      if	(pfwidth>2)
   5800  248f		       c3 1f		      .byte.b	%11000011, %00011111
   5801  2491					      endif
   5802  2491		       1f c1		      .byte.b	%00011111, %11000001
   5803  2493					      if	(pfwidth>2)
   5804  2493		       c1 1f		      .byte.b	%11000001, %00011111
   5805  2495					      endif
   5806  2495		       0f c0		      .byte.b	%00001111, %11000000
   5807  2497					      if	(pfwidth>2)
   5808  2497		       c0 0f		      .byte.b	%11000000, %00001111
   5809  2499					      endif
   5810  2499		       0e f0		      .byte.b	%00001110, %11110000
   5811  249b					      if	(pfwidth>2)
   5812  249b		       f0 0e		      .byte.b	%11110000, %00001110
   5813  249d					      endif
   5814  249d		       0f f8		      .byte.b	%00001111, %11111000
   5815  249f					      if	(pfwidth>2)
   5816  249f		       f8 0f		      .byte.b	%11111000, %00001111
   5817  24a1					      endif
   5818  24a1		       00 00		      .byte.b	%00000000, %00000000
   5819  24a3					      if	(pfwidth>2)
   5820  24a3		       00 00		      .byte.b	%00000000, %00000000
   5821  24a5					      endif
   5822  24a5		       00 00		      .byte.b	%00000000, %00000000
   5823  24a7					      if	(pfwidth>2)
   5824  24a7		       00 00		      .byte.b	%00000000, %00000000
   5825  24a9					      endif
   5826  24a9				   pflabel13
   5827  24a9		       bd 7d b4 	      lda	PF_data13,x
   5828  24ac		       95 a4		      sta	playfield,x
   5829  24ae		       ca		      dex
   5830  24af		       10 f8		      bpl	pflabel13
   5831  24b1				   .
   5832  24b1							; 
   5833  24b1
   5834  24b1				   .L0346		;  goto __Done_Next_Room
   5835  24b1
   5836  24b1		       4c 11 b1 	      jmp	.__Done_Next_Room
   5837  24b4
   5838  24b4				   .
   5839  24b4							; 
   5840  24b4
   5841  24b4				   .
   5842  24b4							; 
   5843  24b4
   5844  24b4				   .__sD
   5845  24b4							; __sD
   5846  24b4
   5847  24b4				   .
   5848  24b4							; 
   5849  24b4
   5850  24b4				   .L0347		;  player0x  =  89  :	player0y  =  64
   5851  24b4
   5852  24b4		       a9 59		      LDA	#89
   5853  24b6		       85 80		      STA	player0x
   5854  24b8		       a9 40		      LDA	#64
   5855  24ba		       85 85		      STA	player0y
   5856  24bc				   .
   5857  24bc							; 
   5858  24bc
   5859  24bc				   .L0348		;  playfield:
   5860  24bc
   5861  24bc				  -	      ifconst	pfres
   5862  24bc				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5863  24bc					      else
   5864  24bc		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5865  24be					      endif
   5866  24be		       4c ed b4 	      jmp	pflabel14
   5867  24c1				   PF_data14
   5868  24c1		       00 00		      .byte.b	%00000000, %00000000
   5869  24c3					      if	(pfwidth>2)
   5870  24c3		       00 00		      .byte.b	%00000000, %00000000
   5871  24c5					      endif
   5872  24c5		       00 00		      .byte.b	%00000000, %00000000
   5873  24c7					      if	(pfwidth>2)
   5874  24c7		       00 00		      .byte.b	%00000000, %00000000
   5875  24c9					      endif
   5876  24c9		       00 fc		      .byte.b	%00000000, %11111100
   5877  24cb					      if	(pfwidth>2)
   5878  24cb		       fc 00		      .byte.b	%11111100, %00000000
   5879  24cd					      endif
   5880  24cd		       00 ff		      .byte.b	%00000000, %11111111
   5881  24cf					      if	(pfwidth>2)
   5882  24cf		       ff 00		      .byte.b	%11111111, %00000000
   5883  24d1					      endif
   5884  24d1		       00 ff		      .byte.b	%00000000, %11111111
   5885  24d3					      if	(pfwidth>2)
   5886  24d3		       ff 00		      .byte.b	%11111111, %00000000
   5887  24d5					      endif
   5888  24d5		       00 ff		      .byte.b	%00000000, %11111111
   5889  24d7					      if	(pfwidth>2)
   5890  24d7		       ff 00		      .byte.b	%11111111, %00000000
   5891  24d9					      endif
   5892  24d9		       00 ff		      .byte.b	%00000000, %11111111
   5893  24db					      if	(pfwidth>2)
   5894  24db		       ff 00		      .byte.b	%11111111, %00000000
   5895  24dd					      endif
   5896  24dd		       00 ff		      .byte.b	%00000000, %11111111
   5897  24df					      if	(pfwidth>2)
   5898  24df		       cf 00		      .byte.b	%11001111, %00000000
   5899  24e1					      endif
   5900  24e1		       00 fc		      .byte.b	%00000000, %11111100
   5901  24e3					      if	(pfwidth>2)
   5902  24e3		       ce 00		      .byte.b	%11001110, %00000000
   5903  24e5					      endif
   5904  24e5		       00 00		      .byte.b	%00000000, %00000000
   5905  24e7					      if	(pfwidth>2)
   5906  24e7		       00 00		      .byte.b	%00000000, %00000000
   5907  24e9					      endif
   5908  24e9		       00 00		      .byte.b	%00000000, %00000000
   5909  24eb					      if	(pfwidth>2)
   5910  24eb		       00 00		      .byte.b	%00000000, %00000000
   5911  24ed					      endif
   5912  24ed				   pflabel14
   5913  24ed		       bd c1 b4 	      lda	PF_data14,x
   5914  24f0		       95 a4		      sta	playfield,x
   5915  24f2		       ca		      dex
   5916  24f3		       10 f8		      bpl	pflabel14
   5917  24f5				   .
   5918  24f5							; 
   5919  24f5
   5920  24f5				   .L0349		;  goto __Done_Next_Room
   5921  24f5
   5922  24f5		       4c 11 b1 	      jmp	.__Done_Next_Room
   5923  24f8
   5924  24f8				   .
   5925  24f8							; 
   5926  24f8
   5927  24f8				   .
   5928  24f8							; 
   5929  24f8
   5930  24f8				   .__sE
   5931  24f8							; __sE
   5932  24f8
   5933  24f8				   .L0350		;  playfield:
   5934  24f8
   5935  24f8				  -	      ifconst	pfres
   5936  24f8				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5937  24f8					      else
   5938  24f8		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5939  24fa					      endif
   5940  24fa		       4c 29 b5 	      jmp	pflabel15
   5941  24fd				   PF_data15
   5942  24fd		       00 00		      .byte.b	%00000000, %00000000
   5943  24ff					      if	(pfwidth>2)
   5944  24ff		       00 00		      .byte.b	%00000000, %00000000
   5945  2501					      endif
   5946  2501		       00 00		      .byte.b	%00000000, %00000000
   5947  2503					      if	(pfwidth>2)
   5948  2503		       00 00		      .byte.b	%00000000, %00000000
   5949  2505					      endif
   5950  2505		       0f 3f		      .byte.b	%00001111, %00111111
   5951  2507					      if	(pfwidth>2)
   5952  2507		       3f 0f		      .byte.b	%00111111, %00001111
   5953  2509					      endif
   5954  2509		       0c 00		      .byte.b	%00001100, %00000000
   5955  250b					      if	(pfwidth>2)
   5956  250b		       00 0c		      .byte.b	%00000000, %00001100
   5957  250d					      endif
   5958  250d		       0c 00		      .byte.b	%00001100, %00000000
   5959  250f					      if	(pfwidth>2)
   5960  250f		       00 0c		      .byte.b	%00000000, %00001100
   5961  2511					      endif
   5962  2511		       0c 00		      .byte.b	%00001100, %00000000
   5963  2513					      if	(pfwidth>2)
   5964  2513		       00 0c		      .byte.b	%00000000, %00001100
   5965  2515					      endif
   5966  2515		       00 70		      .byte.b	%00000000, %01110000
   5967  2517					      if	(pfwidth>2)
   5968  2517		       70 00		      .byte.b	%01110000, %00000000
   5969  2519					      endif
   5970  2519		       00 70		      .byte.b	%00000000, %01110000
   5971  251b					      if	(pfwidth>2)
   5972  251b		       70 00		      .byte.b	%01110000, %00000000
   5973  251d					      endif
   5974  251d		       0f 73		      .byte.b	%00001111, %01110011
   5975  251f					      if	(pfwidth>2)
   5976  251f		       73 0f		      .byte.b	%01110011, %00001111
   5977  2521					      endif
   5978  2521		       00 00		      .byte.b	%00000000, %00000000
   5979  2523					      if	(pfwidth>2)
   5980  2523		       00 00		      .byte.b	%00000000, %00000000
   5981  2525					      endif
   5982  2525		       00 00		      .byte.b	%00000000, %00000000
   5983  2527					      if	(pfwidth>2)
   5984  2527		       00 00		      .byte.b	%00000000, %00000000
   5985  2529					      endif
   5986  2529				   pflabel15
   5987  2529		       bd fd b4 	      lda	PF_data15,x
   5988  252c		       95 a4		      sta	playfield,x
   5989  252e		       ca		      dex
   5990  252f		       10 f8		      bpl	pflabel15
   5991  2531				   .
   5992  2531							; 
   5993  2531
   5994  2531				   .L0351		;  goto __Done_Next_Room
   5995  2531
   5996  2531		       4c 11 b1 	      jmp	.__Done_Next_Room
   5997  2534
   5998  2534				   .
   5999  2534							; 
   6000  2534
   6001  2534				   .
   6002  2534							; 
   6003  2534
   6004  2534				   .__sF
   6005  2534							; __sF
   6006  2534
   6007  2534				   .L0352		;  playfield:
   6008  2534
   6009  2534				  -	      ifconst	pfres
   6010  2534				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6011  2534					      else
   6012  2534		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6013  2536					      endif
   6014  2536		       4c 65 b5 	      jmp	pflabel16
   6015  2539				   PF_data16
   6016  2539		       00 00		      .byte.b	%00000000, %00000000
   6017  253b					      if	(pfwidth>2)
   6018  253b		       00 00		      .byte.b	%00000000, %00000000
   6019  253d					      endif
   6020  253d		       00 00		      .byte.b	%00000000, %00000000
   6021  253f					      if	(pfwidth>2)
   6022  253f		       00 00		      .byte.b	%00000000, %00000000
   6023  2541					      endif
   6024  2541		       00 fc		      .byte.b	%00000000, %11111100
   6025  2543					      if	(pfwidth>2)
   6026  2543		       80 00		      .byte.b	%10000000, %00000000
   6027  2545					      endif
   6028  2545		       00 fe		      .byte.b	%00000000, %11111110
   6029  2547					      if	(pfwidth>2)
   6030  2547		       e0 00		      .byte.b	%11100000, %00000000
   6031  2549					      endif
   6032  2549		       01 ff		      .byte.b	%00000001, %11111111
   6033  254b					      if	(pfwidth>2)
   6034  254b		       f8 00		      .byte.b	%11111000, %00000000
   6035  254d					      endif
   6036  254d		       03 ff		      .byte.b	%00000011, %11111111
   6037  254f					      if	(pfwidth>2)
   6038  254f		       f8 00		      .byte.b	%11111000, %00000000
   6039  2551					      endif
   6040  2551		       01 ff		      .byte.b	%00000001, %11111111
   6041  2553					      if	(pfwidth>2)
   6042  2553		       f0 00		      .byte.b	%11110000, %00000000
   6043  2555					      endif
   6044  2555		       00 fc		      .byte.b	%00000000, %11111100
   6045  2557					      if	(pfwidth>2)
   6046  2557		       80 00		      .byte.b	%10000000, %00000000
   6047  2559					      endif
   6048  2559		       00 00		      .byte.b	%00000000, %00000000
   6049  255b					      if	(pfwidth>2)
   6050  255b		       00 00		      .byte.b	%00000000, %00000000
   6051  255d					      endif
   6052  255d		       00 00		      .byte.b	%00000000, %00000000
   6053  255f					      if	(pfwidth>2)
   6054  255f		       00 00		      .byte.b	%00000000, %00000000
   6055  2561					      endif
   6056  2561		       00 00		      .byte.b	%00000000, %00000000
   6057  2563					      if	(pfwidth>2)
   6058  2563		       00 00		      .byte.b	%00000000, %00000000
   6059  2565					      endif
   6060  2565				   pflabel16
   6061  2565		       bd 39 b5 	      lda	PF_data16,x
   6062  2568		       95 a4		      sta	playfield,x
   6063  256a		       ca		      dex
   6064  256b		       10 f8		      bpl	pflabel16
   6065  256d				   .
   6066  256d							; 
   6067  256d
   6068  256d				   .L0353		;  goto __Done_Next_Room
   6069  256d
   6070  256d		       4c 11 b1 	      jmp	.__Done_Next_Room
   6071  2570
   6072  2570				   .
   6073  2570							; 
   6074  2570
   6075  2570				   .
   6076  2570							; 
   6077  2570
   6078  2570				   .__sG
   6079  2570							; __sG
   6080  2570
   6081  2570				   .L0354		;  playfield:
   6082  2570
   6083  2570				  -	      ifconst	pfres
   6084  2570				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6085  2570					      else
   6086  2570		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6087  2572					      endif
   6088  2572		       4c a1 b5 	      jmp	pflabel17
   6089  2575				   PF_data17
   6090  2575		       00 00		      .byte.b	%00000000, %00000000
   6091  2577					      if	(pfwidth>2)
   6092  2577		       00 00		      .byte.b	%00000000, %00000000
   6093  2579					      endif
   6094  2579		       00 00		      .byte.b	%00000000, %00000000
   6095  257b					      if	(pfwidth>2)
   6096  257b		       00 00		      .byte.b	%00000000, %00000000
   6097  257d					      endif
   6098  257d		       0f 00		      .byte.b	%00001111, %00000000
   6099  257f					      if	(pfwidth>2)
   6100  257f		       00 0f		      .byte.b	%00000000, %00001111
   6101  2581					      endif
   6102  2581		       0f 00		      .byte.b	%00001111, %00000000
   6103  2583					      if	(pfwidth>2)
   6104  2583		       00 0f		      .byte.b	%00000000, %00001111
   6105  2585					      endif
   6106  2585		       0f 00		      .byte.b	%00001111, %00000000
   6107  2587					      if	(pfwidth>2)
   6108  2587		       00 0f		      .byte.b	%00000000, %00001111
   6109  2589					      endif
   6110  2589		       0f 1f		      .byte.b	%00001111, %00011111
   6111  258b					      if	(pfwidth>2)
   6112  258b		       1f 0f		      .byte.b	%00011111, %00001111
   6113  258d					      endif
   6114  258d		       00 00		      .byte.b	%00000000, %00000000
   6115  258f					      if	(pfwidth>2)
   6116  258f		       00 00		      .byte.b	%00000000, %00000000
   6117  2591					      endif
   6118  2591		       00 00		      .byte.b	%00000000, %00000000
   6119  2593					      if	(pfwidth>2)
   6120  2593		       00 00		      .byte.b	%00000000, %00000000
   6121  2595					      endif
   6122  2595		       0f 1f		      .byte.b	%00001111, %00011111
   6123  2597					      if	(pfwidth>2)
   6124  2597		       1f 0f		      .byte.b	%00011111, %00001111
   6125  2599					      endif
   6126  2599		       00 00		      .byte.b	%00000000, %00000000
   6127  259b					      if	(pfwidth>2)
   6128  259b		       00 00		      .byte.b	%00000000, %00000000
   6129  259d					      endif
   6130  259d		       00 00		      .byte.b	%00000000, %00000000
   6131  259f					      if	(pfwidth>2)
   6132  259f		       00 00		      .byte.b	%00000000, %00000000
   6133  25a1					      endif
   6134  25a1				   pflabel17
   6135  25a1		       bd 75 b5 	      lda	PF_data17,x
   6136  25a4		       95 a4		      sta	playfield,x
   6137  25a6		       ca		      dex
   6138  25a7		       10 f8		      bpl	pflabel17
   6139  25a9				   .
   6140  25a9							; 
   6141  25a9
   6142  25a9				   .L0355		;  goto __Done_Next_Room
   6143  25a9
   6144  25a9		       4c 11 b1 	      jmp	.__Done_Next_Room
   6145  25ac
   6146  25ac				   .
   6147  25ac							; 
   6148  25ac
   6149  25ac				   .
   6150  25ac							; 
   6151  25ac
   6152  25ac				   .__sH
   6153  25ac							; __sH
   6154  25ac
   6155  25ac				   .L0356		;  playfield:
   6156  25ac
   6157  25ac				  -	      ifconst	pfres
   6158  25ac				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6159  25ac					      else
   6160  25ac		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6161  25ae					      endif
   6162  25ae		       4c dd b5 	      jmp	pflabel18
   6163  25b1				   PF_data18
   6164  25b1		       00 00		      .byte.b	%00000000, %00000000
   6165  25b3					      if	(pfwidth>2)
   6166  25b3		       00 00		      .byte.b	%00000000, %00000000
   6167  25b5					      endif
   6168  25b5		       00 00		      .byte.b	%00000000, %00000000
   6169  25b7					      if	(pfwidth>2)
   6170  25b7		       00 00		      .byte.b	%00000000, %00000000
   6171  25b9					      endif
   6172  25b9		       1f 03		      .byte.b	%00011111, %00000011
   6173  25bb					      if	(pfwidth>2)
   6174  25bb		       00 00		      .byte.b	%00000000, %00000000
   6175  25bd					      endif
   6176  25bd		       0f 01		      .byte.b	%00001111, %00000001
   6177  25bf					      if	(pfwidth>2)
   6178  25bf		       1f 0f		      .byte.b	%00011111, %00001111
   6179  25c1					      endif
   6180  25c1		       07 00		      .byte.b	%00000111, %00000000
   6181  25c3					      if	(pfwidth>2)
   6182  25c3		       0f 07		      .byte.b	%00001111, %00000111
   6183  25c5					      endif
   6184  25c5		       02 00		      .byte.b	%00000010, %00000000
   6185  25c7					      if	(pfwidth>2)
   6186  25c7		       07 03		      .byte.b	%00000111, %00000011
   6187  25c9					      endif
   6188  25c9		       00 f0		      .byte.b	%00000000, %11110000
   6189  25cb					      if	(pfwidth>2)
   6190  25cb		       83 01		      .byte.b	%10000011, %00000001
   6191  25cd					      endif
   6192  25cd		       00 e0		      .byte.b	%00000000, %11100000
   6193  25cf					      if	(pfwidth>2)
   6194  25cf		       01 00		      .byte.b	%00000001, %00000000
   6195  25d1					      endif
   6196  25d1		       00 40		      .byte.b	%00000000, %01000000
   6197  25d3					      if	(pfwidth>2)
   6198  25d3		       00 00		      .byte.b	%00000000, %00000000
   6199  25d5					      endif
   6200  25d5		       00 00		      .byte.b	%00000000, %00000000
   6201  25d7					      if	(pfwidth>2)
   6202  25d7		       00 00		      .byte.b	%00000000, %00000000
   6203  25d9					      endif
   6204  25d9		       00 00		      .byte.b	%00000000, %00000000
   6205  25db					      if	(pfwidth>2)
   6206  25db		       00 00		      .byte.b	%00000000, %00000000
   6207  25dd					      endif
   6208  25dd				   pflabel18
   6209  25dd		       bd b1 b5 	      lda	PF_data18,x
   6210  25e0		       95 a4		      sta	playfield,x
   6211  25e2		       ca		      dex
   6212  25e3		       10 f8		      bpl	pflabel18
   6213  25e5				   .
   6214  25e5							; 
   6215  25e5
   6216  25e5				   .L0357		;  goto __Done_Next_Room
   6217  25e5
   6218  25e5		       4c 11 b1 	      jmp	.__Done_Next_Room
   6219  25e8
   6220  25e8				   .
   6221  25e8							; 
   6222  25e8
   6223  25e8				   .
   6224  25e8							; 
   6225  25e8
   6226  25e8				   .__sI
   6227  25e8							; __sI
   6228  25e8
   6229  25e8				   .L0358		;  playfield:
   6230  25e8
   6231  25e8				  -	      ifconst	pfres
   6232  25e8				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6233  25e8					      else
   6234  25e8		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6235  25ea					      endif
   6236  25ea		       4c 19 b6 	      jmp	pflabel19
   6237  25ed				   PF_data19
   6238  25ed		       00 00		      .byte.b	%00000000, %00000000
   6239  25ef					      if	(pfwidth>2)
   6240  25ef		       00 00		      .byte.b	%00000000, %00000000
   6241  25f1					      endif
   6242  25f1		       00 00		      .byte.b	%00000000, %00000000
   6243  25f3					      if	(pfwidth>2)
   6244  25f3		       00 00		      .byte.b	%00000000, %00000000
   6245  25f5					      endif
   6246  25f5		       0f 99		      .byte.b	%00001111, %10011001
   6247  25f7					      if	(pfwidth>2)
   6248  25f7		       99 0f		      .byte.b	%10011001, %00001111
   6249  25f9					      endif
   6250  25f9		       0f 99		      .byte.b	%00001111, %10011001
   6251  25fb					      if	(pfwidth>2)
   6252  25fb		       99 0f		      .byte.b	%10011001, %00001111
   6253  25fd					      endif
   6254  25fd		       0f 99		      .byte.b	%00001111, %10011001
   6255  25ff					      if	(pfwidth>2)
   6256  25ff		       99 0f		      .byte.b	%10011001, %00001111
   6257  2601					      endif
   6258  2601		       0f 99		      .byte.b	%00001111, %10011001
   6259  2603					      if	(pfwidth>2)
   6260  2603		       99 0f		      .byte.b	%10011001, %00001111
   6261  2605					      endif
   6262  2605		       00 98		      .byte.b	%00000000, %10011000
   6263  2607					      if	(pfwidth>2)
   6264  2607		       98 00		      .byte.b	%10011000, %00000000
   6265  2609					      endif
   6266  2609		       00 98		      .byte.b	%00000000, %10011000
   6267  260b					      if	(pfwidth>2)
   6268  260b		       98 00		      .byte.b	%10011000, %00000000
   6269  260d					      endif
   6270  260d		       0f 9f		      .byte.b	%00001111, %10011111
   6271  260f					      if	(pfwidth>2)
   6272  260f		       9f 0f		      .byte.b	%10011111, %00001111
   6273  2611					      endif
   6274  2611		       00 00		      .byte.b	%00000000, %00000000
   6275  2613					      if	(pfwidth>2)
   6276  2613		       00 00		      .byte.b	%00000000, %00000000
   6277  2615					      endif
   6278  2615		       00 00		      .byte.b	%00000000, %00000000
   6279  2617					      if	(pfwidth>2)
   6280  2617		       00 00		      .byte.b	%00000000, %00000000
   6281  2619					      endif
   6282  2619				   pflabel19
   6283  2619		       bd ed b5 	      lda	PF_data19,x
   6284  261c		       95 a4		      sta	playfield,x
   6285  261e		       ca		      dex
   6286  261f		       10 f8		      bpl	pflabel19
   6287  2621				   .
   6288  2621							; 
   6289  2621
   6290  2621				   .L0359		;  goto __Done_Next_Room
   6291  2621
   6292  2621		       4c 11 b1 	      jmp	.__Done_Next_Room
   6293  2624
   6294  2624				   .
   6295  2624							; 
   6296  2624
   6297  2624				   .
   6298  2624							; 
   6299  2624
   6300  2624				   .__sJ
   6301  2624							; __sJ
   6302  2624
   6303  2624				   .L0360		;  playfield:
   6304  2624
   6305  2624				  -	      ifconst	pfres
   6306  2624				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6307  2624					      else
   6308  2624		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6309  2626					      endif
   6310  2626		       4c 55 b6 	      jmp	pflabel20
   6311  2629				   PF_data20
   6312  2629		       00 00		      .byte.b	%00000000, %00000000
   6313  262b					      if	(pfwidth>2)
   6314  262b		       00 00		      .byte.b	%00000000, %00000000
   6315  262d					      endif
   6316  262d		       00 00		      .byte.b	%00000000, %00000000
   6317  262f					      if	(pfwidth>2)
   6318  262f		       00 00		      .byte.b	%00000000, %00000000
   6319  2631					      endif
   6320  2631		       00 00		      .byte.b	%00000000, %00000000
   6321  2633					      if	(pfwidth>2)
   6322  2633		       18 00		      .byte.b	%00011000, %00000000
   6323  2635					      endif
   6324  2635		       00 00		      .byte.b	%00000000, %00000000
   6325  2637					      if	(pfwidth>2)
   6326  2637		       3c 00		      .byte.b	%00111100, %00000000
   6327  2639					      endif
   6328  2639		       00 00		      .byte.b	%00000000, %00000000
   6329  263b					      if	(pfwidth>2)
   6330  263b		       7e 00		      .byte.b	%01111110, %00000000
   6331  263d					      endif
   6332  263d		       03 00		      .byte.b	%00000011, %00000000
   6333  263f					      if	(pfwidth>2)
   6334  263f		       66 00		      .byte.b	%01100110, %00000000
   6335  2641					      endif
   6336  2641		       07 01		      .byte.b	%00000111, %00000001
   6337  2643					      if	(pfwidth>2)
   6338  2643		       00 00		      .byte.b	%00000000, %00000000
   6339  2645					      endif
   6340  2645		       0f 03		      .byte.b	%00001111, %00000011
   6341  2647					      if	(pfwidth>2)
   6342  2647		       00 00		      .byte.b	%00000000, %00000000
   6343  2649					      endif
   6344  2649		       0c 03		      .byte.b	%00001100, %00000011
   6345  264b					      if	(pfwidth>2)
   6346  264b		       00 00		      .byte.b	%00000000, %00000000
   6347  264d					      endif
   6348  264d		       00 00		      .byte.b	%00000000, %00000000
   6349  264f					      if	(pfwidth>2)
   6350  264f		       00 00		      .byte.b	%00000000, %00000000
   6351  2651					      endif
   6352  2651		       00 00		      .byte.b	%00000000, %00000000
   6353  2653					      if	(pfwidth>2)
   6354  2653		       00 00		      .byte.b	%00000000, %00000000
   6355  2655					      endif
   6356  2655				   pflabel20
   6357  2655		       bd 29 b6 	      lda	PF_data20,x
   6358  2658		       95 a4		      sta	playfield,x
   6359  265a		       ca		      dex
   6360  265b		       10 f8		      bpl	pflabel20
   6361  265d				   .
   6362  265d							; 
   6363  265d
   6364  265d				   .L0361		;  goto __Done_Next_Room
   6365  265d
   6366  265d		       4c 11 b1 	      jmp	.__Done_Next_Room
   6367  2660
   6368  2660				   .
   6369  2660							; 
   6370  2660
   6371  2660				   .
   6372  2660							; 
   6373  2660
   6374  2660				   .__sK
   6375  2660							; __sK
   6376  2660
   6377  2660				   .L0362		;  playfield:
   6378  2660
   6379  2660				  -	      ifconst	pfres
   6380  2660				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6381  2660					      else
   6382  2660		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6383  2662					      endif
   6384  2662		       4c 91 b6 	      jmp	pflabel21
   6385  2665				   PF_data21
   6386  2665		       00 00		      .byte.b	%00000000, %00000000
   6387  2667					      if	(pfwidth>2)
   6388  2667		       00 00		      .byte.b	%00000000, %00000000
   6389  2669					      endif
   6390  2669		       00 00		      .byte.b	%00000000, %00000000
   6391  266b					      if	(pfwidth>2)
   6392  266b		       00 00		      .byte.b	%00000000, %00000000
   6393  266d					      endif
   6394  266d		       00 c0		      .byte.b	%00000000, %11000000
   6395  266f					      if	(pfwidth>2)
   6396  266f		       80 00		      .byte.b	%10000000, %00000000
   6397  2671					      endif
   6398  2671		       00 e0		      .byte.b	%00000000, %11100000
   6399  2673					      if	(pfwidth>2)
   6400  2673		       c0 00		      .byte.b	%11000000, %00000000
   6401  2675					      endif
   6402  2675		       00 c0		      .byte.b	%00000000, %11000000
   6403  2677					      if	(pfwidth>2)
   6404  2677		       80 00		      .byte.b	%10000000, %00000000
   6405  2679					      endif
   6406  2679		       00 00		      .byte.b	%00000000, %00000000
   6407  267b					      if	(pfwidth>2)
   6408  267b		       00 00		      .byte.b	%00000000, %00000000
   6409  267d					      endif
   6410  267d		       01 03		      .byte.b	%00000001, %00000011
   6411  267f					      if	(pfwidth>2)
   6412  267f		       07 00		      .byte.b	%00000111, %00000000
   6413  2681					      endif
   6414  2681		       03 07		      .byte.b	%00000011, %00000111
   6415  2683					      if	(pfwidth>2)
   6416  2683		       0f 01		      .byte.b	%00001111, %00000001
   6417  2685					      endif
   6418  2685		       01 03		      .byte.b	%00000001, %00000011
   6419  2687					      if	(pfwidth>2)
   6420  2687		       07 00		      .byte.b	%00000111, %00000000
   6421  2689					      endif
   6422  2689		       00 00		      .byte.b	%00000000, %00000000
   6423  268b					      if	(pfwidth>2)
   6424  268b		       00 00		      .byte.b	%00000000, %00000000
   6425  268d					      endif
   6426  268d		       00 00		      .byte.b	%00000000, %00000000
   6427  268f					      if	(pfwidth>2)
   6428  268f		       00 00		      .byte.b	%00000000, %00000000
   6429  2691					      endif
   6430  2691				   pflabel21
   6431  2691		       bd 65 b6 	      lda	PF_data21,x
   6432  2694		       95 a4		      sta	playfield,x
   6433  2696		       ca		      dex
   6434  2697		       10 f8		      bpl	pflabel21
   6435  2699				   .
   6436  2699							; 
   6437  2699
   6438  2699				   .L0363		;  goto __Done_Next_Room
   6439  2699
   6440  2699		       4c 11 b1 	      jmp	.__Done_Next_Room
   6441  269c
   6442  269c				   .
   6443  269c							; 
   6444  269c
   6445  269c				   .
   6446  269c							; 
   6447  269c
   6448  269c				   .__sL
   6449  269c							; __sL
   6450  269c
   6451  269c				   .L0364		;  playfield:
   6452  269c
   6453  269c				  -	      ifconst	pfres
   6454  269c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6455  269c					      else
   6456  269c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6457  269e					      endif
   6458  269e		       4c cd b6 	      jmp	pflabel22
   6459  26a1				   PF_data22
   6460  26a1		       00 00		      .byte.b	%00000000, %00000000
   6461  26a3					      if	(pfwidth>2)
   6462  26a3		       00 00		      .byte.b	%00000000, %00000000
   6463  26a5					      endif
   6464  26a5		       00 00		      .byte.b	%00000000, %00000000
   6465  26a7					      if	(pfwidth>2)
   6466  26a7		       00 00		      .byte.b	%00000000, %00000000
   6467  26a9					      endif
   6468  26a9		       06 fe		      .byte.b	%00000110, %11111110
   6469  26ab					      if	(pfwidth>2)
   6470  26ab		       ff 07		      .byte.b	%11111111, %00000111
   6471  26ad					      endif
   6472  26ad		       06 06		      .byte.b	%00000110, %00000110
   6473  26af					      if	(pfwidth>2)
   6474  26af		       00 00		      .byte.b	%00000000, %00000000
   6475  26b1					      endif
   6476  26b1		       06 06		      .byte.b	%00000110, %00000110
   6477  26b3					      if	(pfwidth>2)
   6478  26b3		       00 00		      .byte.b	%00000000, %00000000
   6479  26b5					      endif
   6480  26b5		       06 c6		      .byte.b	%00000110, %11000110
   6481  26b7					      if	(pfwidth>2)
   6482  26b7		       ff 07		      .byte.b	%11111111, %00000111
   6483  26b9					      endif
   6484  26b9		       06 c6		      .byte.b	%00000110, %11000110
   6485  26bb					      if	(pfwidth>2)
   6486  26bb		       00 06		      .byte.b	%00000000, %00000110
   6487  26bd					      endif
   6488  26bd		       06 c6		      .byte.b	%00000110, %11000110
   6489  26bf					      if	(pfwidth>2)
   6490  26bf		       00 06		      .byte.b	%00000000, %00000110
   6491  26c1					      endif
   6492  26c1		       06 c6		      .byte.b	%00000110, %11000110
   6493  26c3					      if	(pfwidth>2)
   6494  26c3		       3e 06		      .byte.b	%00111110, %00000110
   6495  26c5					      endif
   6496  26c5		       00 00		      .byte.b	%00000000, %00000000
   6497  26c7					      if	(pfwidth>2)
   6498  26c7		       00 00		      .byte.b	%00000000, %00000000
   6499  26c9					      endif
   6500  26c9		       00 00		      .byte.b	%00000000, %00000000
   6501  26cb					      if	(pfwidth>2)
   6502  26cb		       00 00		      .byte.b	%00000000, %00000000
   6503  26cd					      endif
   6504  26cd				   pflabel22
   6505  26cd		       bd a1 b6 	      lda	PF_data22,x
   6506  26d0		       95 a4		      sta	playfield,x
   6507  26d2		       ca		      dex
   6508  26d3		       10 f8		      bpl	pflabel22
   6509  26d5				   .
   6510  26d5							; 
   6511  26d5
   6512  26d5				   .L0365		;  goto __Done_Next_Room
   6513  26d5
   6514  26d5		       4c 11 b1 	      jmp	.__Done_Next_Room
   6515  26d8
   6516  26d8				   .
   6517  26d8							; 
   6518  26d8
   6519  26d8				   .
   6520  26d8							; 
   6521  26d8
   6522  26d8				   .__sM
   6523  26d8							; __sM
   6524  26d8
   6525  26d8				   .
   6526  26d8							; 
   6527  26d8
   6528  26d8				   .L0366		;  player0x  =  49  :	player0y  =  56
   6529  26d8
   6530  26d8		       a9 31		      LDA	#49
   6531  26da		       85 80		      STA	player0x
   6532  26dc		       a9 38		      LDA	#56
   6533  26de		       85 85		      STA	player0y
   6534  26e0				   .
   6535  26e0							; 
   6536  26e0
   6537  26e0				   .L0367		;  playfield:
   6538  26e0
   6539  26e0				  -	      ifconst	pfres
   6540  26e0				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6541  26e0					      else
   6542  26e0		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6543  26e2					      endif
   6544  26e2		       4c 11 b7 	      jmp	pflabel23
   6545  26e5				   PF_data23
   6546  26e5		       00 00		      .byte.b	%00000000, %00000000
   6547  26e7					      if	(pfwidth>2)
   6548  26e7		       00 00		      .byte.b	%00000000, %00000000
   6549  26e9					      endif
   6550  26e9		       00 00		      .byte.b	%00000000, %00000000
   6551  26eb					      if	(pfwidth>2)
   6552  26eb		       00 00		      .byte.b	%00000000, %00000000
   6553  26ed					      endif
   6554  26ed		       01 ff		      .byte.b	%00000001, %11111111
   6555  26ef					      if	(pfwidth>2)
   6556  26ef		       80 00		      .byte.b	%10000000, %00000000
   6557  26f1					      endif
   6558  26f1		       07 ff		      .byte.b	%00000111, %11111111
   6559  26f3					      if	(pfwidth>2)
   6560  26f3		       c0 00		      .byte.b	%11000000, %00000000
   6561  26f5					      endif
   6562  26f5		       07 ff		      .byte.b	%00000111, %11111111
   6563  26f7					      if	(pfwidth>2)
   6564  26f7		       c0 00		      .byte.b	%11000000, %00000000
   6565  26f9					      endif
   6566  26f9		       07 ff		      .byte.b	%00000111, %11111111
   6567  26fb					      if	(pfwidth>2)
   6568  26fb		       c0 00		      .byte.b	%11000000, %00000000
   6569  26fd					      endif
   6570  26fd		       07 fc		      .byte.b	%00000111, %11111100
   6571  26ff					      if	(pfwidth>2)
   6572  26ff		       c0 0e		      .byte.b	%11000000, %00001110
   6573  2701					      endif
   6574  2701		       03 fc		      .byte.b	%00000011, %11111100
   6575  2703					      if	(pfwidth>2)
   6576  2703		       80 0e		      .byte.b	%10000000, %00001110
   6577  2705					      endif
   6578  2705		       00 00		      .byte.b	%00000000, %00000000
   6579  2707					      if	(pfwidth>2)
   6580  2707		       00 00		      .byte.b	%00000000, %00000000
   6581  2709					      endif
   6582  2709		       00 00		      .byte.b	%00000000, %00000000
   6583  270b					      if	(pfwidth>2)
   6584  270b		       00 00		      .byte.b	%00000000, %00000000
   6585  270d					      endif
   6586  270d		       00 00		      .byte.b	%00000000, %00000000
   6587  270f					      if	(pfwidth>2)
   6588  270f		       00 00		      .byte.b	%00000000, %00000000
   6589  2711					      endif
   6590  2711				   pflabel23
   6591  2711		       bd e5 b6 	      lda	PF_data23,x
   6592  2714		       95 a4		      sta	playfield,x
   6593  2716		       ca		      dex
   6594  2717		       10 f8		      bpl	pflabel23
   6595  2719				   .
   6596  2719							; 
   6597  2719
   6598  2719				   .
   6599  2719							; 
   6600  2719
   6601  2719				   .L0368		;  goto __Done_Next_Room
   6602  2719
   6603  2719		       4c 11 b1 	      jmp	.__Done_Next_Room
   6604  271c
   6605  271c				   .
   6606  271c							; 
   6607  271c
   6608  271c				   .
   6609  271c							; 
   6610  271c
   6611  271c				   .__sN
   6612  271c							; __sN
   6613  271c
   6614  271c				   .
   6615  271c							; 
   6616  271c
   6617  271c				   .L0369		;  player0x  =  85  :	player0y  =  56
   6618  271c
   6619  271c		       a9 55		      LDA	#85
   6620  271e		       85 80		      STA	player0x
   6621  2720		       a9 38		      LDA	#56
   6622  2722		       85 85		      STA	player0y
   6623  2724				   .
   6624  2724							; 
   6625  2724
   6626  2724				   .L0370		;  playfield:
   6627  2724
   6628  2724				  -	      ifconst	pfres
   6629  2724				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6630  2724					      else
   6631  2724		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6632  2726					      endif
   6633  2726		       4c 55 b7 	      jmp	pflabel24
   6634  2729				   PF_data24
   6635  2729		       00 00		      .byte.b	%00000000, %00000000
   6636  272b					      if	(pfwidth>2)
   6637  272b		       00 00		      .byte.b	%00000000, %00000000
   6638  272d					      endif
   6639  272d		       00 00		      .byte.b	%00000000, %00000000
   6640  272f					      if	(pfwidth>2)
   6641  272f		       00 00		      .byte.b	%00000000, %00000000
   6642  2731					      endif
   6643  2731		       02 00		      .byte.b	%00000010, %00000000
   6644  2733					      if	(pfwidth>2)
   6645  2733		       fe 00		      .byte.b	%11111110, %00000000
   6646  2735					      endif
   6647  2735		       07 c0		      .byte.b	%00000111, %11000000
   6648  2737					      if	(pfwidth>2)
   6649  2737		       ff 01		      .byte.b	%11111111, %00000001
   6650  2739					      endif
   6651  2739		       0f c1		      .byte.b	%00001111, %11000001
   6652  273b					      if	(pfwidth>2)
   6653  273b		       ff 03		      .byte.b	%11111111, %00000011
   6654  273d					      endif
   6655  273d		       1f c3		      .byte.b	%00011111, %11000011
   6656  273f					      if	(pfwidth>2)
   6657  273f		       ff 03		      .byte.b	%11111111, %00000011
   6658  2741					      endif
   6659  2741		       02 c0		      .byte.b	%00000010, %11000000
   6660  2743					      if	(pfwidth>2)
   6661  2743		       9f 03		      .byte.b	%10011111, %00000011
   6662  2745					      endif
   6663  2745		       02 80		      .byte.b	%00000010, %10000000
   6664  2747					      if	(pfwidth>2)
   6665  2747		       9f 01		      .byte.b	%10011111, %00000001
   6666  2749					      endif
   6667  2749		       00 00		      .byte.b	%00000000, %00000000
   6668  274b					      if	(pfwidth>2)
   6669  274b		       00 00		      .byte.b	%00000000, %00000000
   6670  274d					      endif
   6671  274d		       00 00		      .byte.b	%00000000, %00000000
   6672  274f					      if	(pfwidth>2)
   6673  274f		       00 00		      .byte.b	%00000000, %00000000
   6674  2751					      endif
   6675  2751		       00 00		      .byte.b	%00000000, %00000000
   6676  2753					      if	(pfwidth>2)
   6677  2753		       00 00		      .byte.b	%00000000, %00000000
   6678  2755					      endif
   6679  2755				   pflabel24
   6680  2755		       bd 29 b7 	      lda	PF_data24,x
   6681  2758		       95 a4		      sta	playfield,x
   6682  275a		       ca		      dex
   6683  275b		       10 f8		      bpl	pflabel24
   6684  275d				   .
   6685  275d							; 
   6686  275d
   6687  275d				   .L0371		;  goto __Done_Next_Room
   6688  275d
   6689  275d		       4c 11 b1 	      jmp	.__Done_Next_Room
   6690  2760
   6691  2760				   .
   6692  2760							; 
   6693  2760
   6694  2760				   .
   6695  2760							; 
   6696  2760
   6697  2760				   .__sO
   6698  2760							; __sO
   6699  2760
   6700  2760				   .L0372		;  playfield:
   6701  2760
   6702  2760				  -	      ifconst	pfres
   6703  2760				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6704  2760					      else
   6705  2760		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6706  2762					      endif
   6707  2762		       4c 91 b7 	      jmp	pflabel25
   6708  2765				   PF_data25
   6709  2765		       00 00		      .byte.b	%00000000, %00000000
   6710  2767					      if	(pfwidth>2)
   6711  2767		       00 00		      .byte.b	%00000000, %00000000
   6712  2769					      endif
   6713  2769		       00 00		      .byte.b	%00000000, %00000000
   6714  276b					      if	(pfwidth>2)
   6715  276b		       00 00		      .byte.b	%00000000, %00000000
   6716  276d					      endif
   6717  276d		       00 00		      .byte.b	%00000000, %00000000
   6718  276f					      if	(pfwidth>2)
   6719  276f		       3e 00		      .byte.b	%00111110, %00000000
   6720  2771					      endif
   6721  2771		       00 00		      .byte.b	%00000000, %00000000
   6722  2773					      if	(pfwidth>2)
   6723  2773		       3f 01		      .byte.b	%00111111, %00000001
   6724  2775					      endif
   6725  2775		       00 00		      .byte.b	%00000000, %00000000
   6726  2777					      if	(pfwidth>2)
   6727  2777		       1f 00		      .byte.b	%00011111, %00000000
   6728  2779					      endif
   6729  2779		       00 00		      .byte.b	%00000000, %00000000
   6730  277b					      if	(pfwidth>2)
   6731  277b		       00 00		      .byte.b	%00000000, %00000000
   6732  277d					      endif
   6733  277d		       00 3e		      .byte.b	%00000000, %00111110
   6734  277f					      if	(pfwidth>2)
   6735  277f		       00 00		      .byte.b	%00000000, %00000000
   6736  2781					      endif
   6737  2781		       01 3f		      .byte.b	%00000001, %00111111
   6738  2783					      if	(pfwidth>2)
   6739  2783		       00 00		      .byte.b	%00000000, %00000000
   6740  2785					      endif
   6741  2785		       00 1f		      .byte.b	%00000000, %00011111
   6742  2787					      if	(pfwidth>2)
   6743  2787		       00 00		      .byte.b	%00000000, %00000000
   6744  2789					      endif
   6745  2789		       00 00		      .byte.b	%00000000, %00000000
   6746  278b					      if	(pfwidth>2)
   6747  278b		       00 00		      .byte.b	%00000000, %00000000
   6748  278d					      endif
   6749  278d		       00 00		      .byte.b	%00000000, %00000000
   6750  278f					      if	(pfwidth>2)
   6751  278f		       00 00		      .byte.b	%00000000, %00000000
   6752  2791					      endif
   6753  2791				   pflabel25
   6754  2791		       bd 65 b7 	      lda	PF_data25,x
   6755  2794		       95 a4		      sta	playfield,x
   6756  2796		       ca		      dex
   6757  2797		       10 f8		      bpl	pflabel25
   6758  2799				   .
   6759  2799							; 
   6760  2799
   6761  2799				   .L0373		;  goto __Done_Next_Room
   6762  2799
   6763  2799		       4c 11 b1 	      jmp	.__Done_Next_Room
   6764  279c
   6765  279c				   .
   6766  279c							; 
   6767  279c
   6768  279c				   .
   6769  279c							; 
   6770  279c
   6771  279c				   .__sP
   6772  279c							; __sP
   6773  279c
   6774  279c				   .L0374		;  playfield:
   6775  279c
   6776  279c				  -	      ifconst	pfres
   6777  279c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6778  279c					      else
   6779  279c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6780  279e					      endif
   6781  279e		       4c cd b7 	      jmp	pflabel26
   6782  27a1				   PF_data26
   6783  27a1		       00 00		      .byte.b	%00000000, %00000000
   6784  27a3					      if	(pfwidth>2)
   6785  27a3		       00 00		      .byte.b	%00000000, %00000000
   6786  27a5					      endif
   6787  27a5		       00 00		      .byte.b	%00000000, %00000000
   6788  27a7					      if	(pfwidth>2)
   6789  27a7		       00 00		      .byte.b	%00000000, %00000000
   6790  27a9					      endif
   6791  27a9		       07 ff		      .byte.b	%00000111, %11111111
   6792  27ab					      if	(pfwidth>2)
   6793  27ab		       ff 07		      .byte.b	%11111111, %00000111
   6794  27ad					      endif
   6795  27ad		       07 00		      .byte.b	%00000111, %00000000
   6796  27af					      if	(pfwidth>2)
   6797  27af		       00 07		      .byte.b	%00000000, %00000111
   6798  27b1					      endif
   6799  27b1		       07 00		      .byte.b	%00000111, %00000000
   6800  27b3					      if	(pfwidth>2)
   6801  27b3		       00 07		      .byte.b	%00000000, %00000111
   6802  27b5					      endif
   6803  27b5		       07 fc		      .byte.b	%00000111, %11111100
   6804  27b7					      if	(pfwidth>2)
   6805  27b7		       fc 07		      .byte.b	%11111100, %00000111
   6806  27b9					      endif
   6807  27b9		       07 fc		      .byte.b	%00000111, %11111100
   6808  27bb					      if	(pfwidth>2)
   6809  27bb		       fc 07		      .byte.b	%11111100, %00000111
   6810  27bd					      endif
   6811  27bd		       07 fc		      .byte.b	%00000111, %11111100
   6812  27bf					      if	(pfwidth>2)
   6813  27bf		       fc 07		      .byte.b	%11111100, %00000111
   6814  27c1					      endif
   6815  27c1		       00 00		      .byte.b	%00000000, %00000000
   6816  27c3					      if	(pfwidth>2)
   6817  27c3		       00 00		      .byte.b	%00000000, %00000000
   6818  27c5					      endif
   6819  27c5		       00 00		      .byte.b	%00000000, %00000000
   6820  27c7					      if	(pfwidth>2)
   6821  27c7		       00 00		      .byte.b	%00000000, %00000000
   6822  27c9					      endif
   6823  27c9		       00 00		      .byte.b	%00000000, %00000000
   6824  27cb					      if	(pfwidth>2)
   6825  27cb		       00 00		      .byte.b	%00000000, %00000000
   6826  27cd					      endif
   6827  27cd				   pflabel26
   6828  27cd		       bd a1 b7 	      lda	PF_data26,x
   6829  27d0		       95 a4		      sta	playfield,x
   6830  27d2		       ca		      dex
   6831  27d3		       10 f8		      bpl	pflabel26
   6832  27d5				   .
   6833  27d5							; 
   6834  27d5
   6835  27d5				   .L0375		;  goto __Done_Next_Room
   6836  27d5
   6837  27d5		       4c 11 b1 	      jmp	.__Done_Next_Room
   6838  27d8
   6839  27d8				   .
   6840  27d8							; 
   6841  27d8
   6842  27d8				   .
   6843  27d8							; 
   6844  27d8
   6845  27d8				   .__sQ
   6846  27d8							; __sQ
   6847  27d8
   6848  27d8				   .L0376		;  playfield:
   6849  27d8
   6850  27d8				  -	      ifconst	pfres
   6851  27d8				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6852  27d8					      else
   6853  27d8		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6854  27da					      endif
   6855  27da		       4c 09 b8 	      jmp	pflabel27
   6856  27dd				   PF_data27
   6857  27dd		       00 00		      .byte.b	%00000000, %00000000
   6858  27df					      if	(pfwidth>2)
   6859  27df		       00 00		      .byte.b	%00000000, %00000000
   6860  27e1					      endif
   6861  27e1		       00 00		      .byte.b	%00000000, %00000000
   6862  27e3					      if	(pfwidth>2)
   6863  27e3		       00 00		      .byte.b	%00000000, %00000000
   6864  27e5					      endif
   6865  27e5		       00 0e		      .byte.b	%00000000, %00001110
   6866  27e7					      if	(pfwidth>2)
   6867  27e7		       0e 00		      .byte.b	%00001110, %00000000
   6868  27e9					      endif
   6869  27e9		       01 3f		      .byte.b	%00000001, %00111111
   6870  27eb					      if	(pfwidth>2)
   6871  27eb		       3f 01		      .byte.b	%00111111, %00000001
   6872  27ed					      endif
   6873  27ed		       00 00		      .byte.b	%00000000, %00000000
   6874  27ef					      if	(pfwidth>2)
   6875  27ef		       00 00		      .byte.b	%00000000, %00000000
   6876  27f1					      endif
   6877  27f1		       00 00		      .byte.b	%00000000, %00000000
   6878  27f3					      if	(pfwidth>2)
   6879  27f3		       00 00		      .byte.b	%00000000, %00000000
   6880  27f5					      endif
   6881  27f5		       00 00		      .byte.b	%00000000, %00000000
   6882  27f7					      if	(pfwidth>2)
   6883  27f7		       00 00		      .byte.b	%00000000, %00000000
   6884  27f9					      endif
   6885  27f9		       01 3f		      .byte.b	%00000001, %00111111
   6886  27fb					      if	(pfwidth>2)
   6887  27fb		       3f 01		      .byte.b	%00111111, %00000001
   6888  27fd					      endif
   6889  27fd		       00 0e		      .byte.b	%00000000, %00001110
   6890  27ff					      if	(pfwidth>2)
   6891  27ff		       0e 00		      .byte.b	%00001110, %00000000
   6892  2801					      endif
   6893  2801		       00 00		      .byte.b	%00000000, %00000000
   6894  2803					      if	(pfwidth>2)
   6895  2803		       00 00		      .byte.b	%00000000, %00000000
   6896  2805					      endif
   6897  2805		       00 00		      .byte.b	%00000000, %00000000
   6898  2807					      if	(pfwidth>2)
   6899  2807		       00 00		      .byte.b	%00000000, %00000000
   6900  2809					      endif
   6901  2809				   pflabel27
   6902  2809		       bd dd b7 	      lda	PF_data27,x
   6903  280c		       95 a4		      sta	playfield,x
   6904  280e		       ca		      dex
   6905  280f		       10 f8		      bpl	pflabel27
   6906  2811				   .
   6907  2811							; 
   6908  2811
   6909  2811				   .L0377		;  goto __Done_Next_Room
   6910  2811
   6911  2811		       4c 11 b1 	      jmp	.__Done_Next_Room
   6912  2814
   6913  2814				   .
   6914  2814							; 
   6915  2814
   6916  2814				   .
   6917  2814							; 
   6918  2814
   6919  2814				   .__sR
   6920  2814							; __sR
   6921  2814
   6922  2814				   .L0378		;  playfield:
   6923  2814
   6924  2814				  -	      ifconst	pfres
   6925  2814				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6926  2814					      else
   6927  2814		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6928  2816					      endif
   6929  2816		       4c 45 b8 	      jmp	pflabel28
   6930  2819				   PF_data28
   6931  2819		       00 00		      .byte.b	%00000000, %00000000
   6932  281b					      if	(pfwidth>2)
   6933  281b		       00 00		      .byte.b	%00000000, %00000000
   6934  281d					      endif
   6935  281d		       00 00		      .byte.b	%00000000, %00000000
   6936  281f					      if	(pfwidth>2)
   6937  281f		       00 00		      .byte.b	%00000000, %00000000
   6938  2821					      endif
   6939  2821		       07 7f		      .byte.b	%00000111, %01111111
   6940  2823					      if	(pfwidth>2)
   6941  2823		       79 07		      .byte.b	%01111001, %00000111
   6942  2825					      endif
   6943  2825		       07 7f		      .byte.b	%00000111, %01111111
   6944  2827					      if	(pfwidth>2)
   6945  2827		       79 07		      .byte.b	%01111001, %00000111
   6946  2829					      endif
   6947  2829		       00 00		      .byte.b	%00000000, %00000000
   6948  282b					      if	(pfwidth>2)
   6949  282b		       79 07		      .byte.b	%01111001, %00000111
   6950  282d					      endif
   6951  282d		       00 00		      .byte.b	%00000000, %00000000
   6952  282f					      if	(pfwidth>2)
   6953  282f		       79 07		      .byte.b	%01111001, %00000111
   6954  2831					      endif
   6955  2831		       07 7f		      .byte.b	%00000111, %01111111
   6956  2833					      if	(pfwidth>2)
   6957  2833		       79 07		      .byte.b	%01111001, %00000111
   6958  2835					      endif
   6959  2835		       07 7f		      .byte.b	%00000111, %01111111
   6960  2837					      if	(pfwidth>2)
   6961  2837		       79 07		      .byte.b	%01111001, %00000111
   6962  2839					      endif
   6963  2839		       00 00		      .byte.b	%00000000, %00000000
   6964  283b					      if	(pfwidth>2)
   6965  283b		       00 00		      .byte.b	%00000000, %00000000
   6966  283d					      endif
   6967  283d		       00 00		      .byte.b	%00000000, %00000000
   6968  283f					      if	(pfwidth>2)
   6969  283f		       00 00		      .byte.b	%00000000, %00000000
   6970  2841					      endif
   6971  2841		       00 00		      .byte.b	%00000000, %00000000
   6972  2843					      if	(pfwidth>2)
   6973  2843		       00 00		      .byte.b	%00000000, %00000000
   6974  2845					      endif
   6975  2845				   pflabel28
   6976  2845		       bd 19 b8 	      lda	PF_data28,x
   6977  2848		       95 a4		      sta	playfield,x
   6978  284a		       ca		      dex
   6979  284b		       10 f8		      bpl	pflabel28
   6980  284d				   .
   6981  284d							; 
   6982  284d
   6983  284d				   .L0379		;  goto __Done_Next_Room
   6984  284d
   6985  284d		       4c 11 b1 	      jmp	.__Done_Next_Room
   6986  2850
   6987  2850				   .
   6988  2850							; 
   6989  2850
   6990  2850				   .
   6991  2850							; 
   6992  2850
   6993  2850				   .__sS
   6994  2850							; __sS
   6995  2850
   6996  2850				   .L0380		;  playfield:
   6997  2850
   6998  2850				  -	      ifconst	pfres
   6999  2850				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   7000  2850					      else
   7001  2850		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   7002  2852					      endif
   7003  2852		       4c 81 b8 	      jmp	pflabel29
   7004  2855				   PF_data29
   7005  2855		       00 00		      .byte.b	%00000000, %00000000
   7006  2857					      if	(pfwidth>2)
   7007  2857		       00 00		      .byte.b	%00000000, %00000000
   7008  2859					      endif
   7009  2859		       00 00		      .byte.b	%00000000, %00000000
   7010  285b					      if	(pfwidth>2)
   7011  285b		       00 00		      .byte.b	%00000000, %00000000
   7012  285d					      endif
   7013  285d		       00 70		      .byte.b	%00000000, %01110000
   7014  285f					      if	(pfwidth>2)
   7015  285f		       70 00		      .byte.b	%01110000, %00000000
   7016  2861					      endif
   7017  2861		       00 7c		      .byte.b	%00000000, %01111100
   7018  2863					      if	(pfwidth>2)
   7019  2863		       7c 00		      .byte.b	%01111100, %00000000
   7020  2865					      endif
   7021  2865		       00 00		      .byte.b	%00000000, %00000000
   7022  2867					      if	(pfwidth>2)
   7023  2867		       00 00		      .byte.b	%00000000, %00000000
   7024  2869					      endif
   7025  2869		       00 00		      .byte.b	%00000000, %00000000
   7026  286b					      if	(pfwidth>2)
   7027  286b		       00 00		      .byte.b	%00000000, %00000000
   7028  286d					      endif
   7029  286d		       00 00		      .byte.b	%00000000, %00000000
   7030  286f					      if	(pfwidth>2)
   7031  286f		       00 00		      .byte.b	%00000000, %00000000
   7032  2871					      endif
   7033  2871		       00 7c		      .byte.b	%00000000, %01111100
   7034  2873					      if	(pfwidth>2)
   7035  2873		       7c 00		      .byte.b	%01111100, %00000000
   7036  2875					      endif
   7037  2875		       00 70		      .byte.b	%00000000, %01110000
   7038  2877					      if	(pfwidth>2)
   7039  2877		       70 00		      .byte.b	%01110000, %00000000
   7040  2879					      endif
   7041  2879		       00 00		      .byte.b	%00000000, %00000000
   7042  287b					      if	(pfwidth>2)
   7043  287b		       00 00		      .byte.b	%00000000, %00000000
   7044  287d					      endif
   7045  287d		       00 00		      .byte.b	%00000000, %00000000
   7046  287f					      if	(pfwidth>2)
   7047  287f		       00 00		      .byte.b	%00000000, %00000000
   7048  2881					      endif
   7049  2881				   pflabel29
   7050  2881		       bd 55 b8 	      lda	PF_data29,x
   7051  2884		       95 a4		      sta	playfield,x
   7052  2886		       ca		      dex
   7053  2887		       10 f8		      bpl	pflabel29
   7054  2889				   .
   7055  2889							; 
   7056  2889
   7057  2889				   .L0381		;  goto __Done_Next_Room
   7058  2889
   7059  2889		       4c 11 b1 	      jmp	.__Done_Next_Room
   7060  288c
   7061  288c				   .
   7062  288c							; 
   7063  288c
   7064  288c				   .
   7065  288c							; 
   7066  288c
   7067  288c				   .__sT
   7068  288c							; __sT
   7069  288c
   7070  288c				   .L0382		;  playfield:
   7071  288c
   7072  288c				  -	      ifconst	pfres
   7073  288c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   7074  288c					      else
   7075  288c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   7076  288e					      endif
   7077  288e		       4c bd b8 	      jmp	pflabel30
   7078  2891				   PF_data30
   7079  2891		       00 00		      .byte.b	%00000000, %00000000
   7080  2893					      if	(pfwidth>2)
   7081  2893		       00 00		      .byte.b	%00000000, %00000000
   7082  2895					      endif
   7083  2895		       00 00		      .byte.b	%00000000, %00000000
   7084  2897					      if	(pfwidth>2)
   7085  2897		       00 00		      .byte.b	%00000000, %00000000
   7086  2899					      endif
   7087  2899		       07 3c		      .byte.b	%00000111, %00111100
   7088  289b					      if	(pfwidth>2)
   7089  289b		       3c 07		      .byte.b	%00111100, %00000111
   7090  289d					      endif
   7091  289d		       07 fc		      .byte.b	%00000111, %11111100
   7092  289f					      if	(pfwidth>2)
   7093  289f		       fc 07		      .byte.b	%11111100, %00000111
   7094  28a1					      endif
   7095  28a1		       00 00		      .byte.b	%00000000, %00000000
   7096  28a3					      if	(pfwidth>2)
   7097  28a3		       00 00		      .byte.b	%00000000, %00000000
   7098  28a5					      endif
   7099  28a5		       00 00		      .byte.b	%00000000, %00000000
   7100  28a7					      if	(pfwidth>2)
   7101  28a7		       00 00		      .byte.b	%00000000, %00000000
   7102  28a9					      endif
   7103  28a9		       07 fc		      .byte.b	%00000111, %11111100
   7104  28ab					      if	(pfwidth>2)
   7105  28ab		       fc 07		      .byte.b	%11111100, %00000111
   7106  28ad					      endif
   7107  28ad		       07 3c		      .byte.b	%00000111, %00111100
   7108  28af					      if	(pfwidth>2)
   7109  28af		       3c 07		      .byte.b	%00111100, %00000111
   7110  28b1					      endif
   7111  28b1		       07 3c		      .byte.b	%00000111, %00111100
   7112  28b3					      if	(pfwidth>2)
   7113  28b3		       3c 07		      .byte.b	%00111100, %00000111
   7114  28b5					      endif
   7115  28b5		       00 00		      .byte.b	%00000000, %00000000
   7116  28b7					      if	(pfwidth>2)
   7117  28b7		       00 00		      .byte.b	%00000000, %00000000
   7118  28b9					      endif
   7119  28b9		       00 00		      .byte.b	%00000000, %00000000
   7120  28bb					      if	(pfwidth>2)
   7121  28bb		       00 00		      .byte.b	%00000000, %00000000
   7122  28bd					      endif
   7123  28bd				   pflabel30
   7124  28bd		       bd 91 b8 	      lda	PF_data30,x
   7125  28c0		       95 a4		      sta	playfield,x
   7126  28c2		       ca		      dex
   7127  28c3		       10 f8		      bpl	pflabel30
   7128  28c5				   .
   7129  28c5							; 
   7130  28c5
   7131  28c5				   .L0383		;  goto __Done_Next_Room
   7132  28c5
   7133  28c5		       4c 11 b1 	      jmp	.__Done_Next_Room
   7134  28c8
   7135  28c8				   .
   7136  28c8							; 
   7137  28c8
   7138  28c8				   .
   7139  28c8							; 
   7140  28c8
   7141  28c8				   .__sU
   7142  28c8							; __sU
   7143  28c8
   7144  28c8				   .L0384		;  playfield:
   7145  28c8
   7146  28c8				  -	      ifconst	pfres
   7147  28c8				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   7148  28c8					      else
   7149  28c8		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   7150  28ca					      endif
   7151  28ca		       4c f9 b8 	      jmp	pflabel31
   7152  28cd				   PF_data31
   7153  28cd		       00 00		      .byte.b	%00000000, %00000000
   7154  28cf					      if	(pfwidth>2)
   7155  28cf		       00 00		      .byte.b	%00000000, %00000000
   7156  28d1					      endif
   7157  28d1		       00 00		      .byte.b	%00000000, %00000000
   7158  28d3					      if	(pfwidth>2)
   7159  28d3		       00 00		      .byte.b	%00000000, %00000000
   7160  28d5					      endif
   7161  28d5		       00 70		      .byte.b	%00000000, %01110000
   7162  28d7					      if	(pfwidth>2)
   7163  28d7		       70 00		      .byte.b	%01110000, %00000000
   7164  28d9					      endif
   7165  28d9		       00 7c		      .byte.b	%00000000, %01111100
   7166  28db					      if	(pfwidth>2)
   7167  28db		       7c 00		      .byte.b	%01111100, %00000000
   7168  28dd					      endif
   7169  28dd		       00 7e		      .byte.b	%00000000, %01111110
   7170  28df					      if	(pfwidth>2)
   7171  28df		       7e 00		      .byte.b	%01111110, %00000000
   7172  28e1					      endif
   7173  28e1		       00 7f		      .byte.b	%00000000, %01111111
   7174  28e3					      if	(pfwidth>2)
   7175  28e3		       7f 00		      .byte.b	%01111111, %00000000
   7176  28e5					      endif
   7177  28e5		       00 7e		      .byte.b	%00000000, %01111110
   7178  28e7					      if	(pfwidth>2)
   7179  28e7		       7e 00		      .byte.b	%01111110, %00000000
   7180  28e9					      endif
   7181  28e9		       00 7c		      .byte.b	%00000000, %01111100
   7182  28eb					      if	(pfwidth>2)
   7183  28eb		       7c 00		      .byte.b	%01111100, %00000000
   7184  28ed					      endif
   7185  28ed		       00 70		      .byte.b	%00000000, %01110000
   7186  28ef					      if	(pfwidth>2)
   7187  28ef		       70 00		      .byte.b	%01110000, %00000000
   7188  28f1					      endif
   7189  28f1		       00 00		      .byte.b	%00000000, %00000000
   7190  28f3					      if	(pfwidth>2)
   7191  28f3		       00 00		      .byte.b	%00000000, %00000000
   7192  28f5					      endif
   7193  28f5		       00 00		      .byte.b	%00000000, %00000000
   7194  28f7					      if	(pfwidth>2)
   7195  28f7		       00 00		      .byte.b	%00000000, %00000000
   7196  28f9					      endif
   7197  28f9				   pflabel31
   7198  28f9		       bd cd b8 	      lda	PF_data31,x
   7199  28fc		       95 a4		      sta	playfield,x
   7200  28fe		       ca		      dex
   7201  28ff		       10 f8		      bpl	pflabel31
   7202  2901				   .
   7203  2901							; 
   7204  2901
   7205  2901				   .L0385		;  goto __Done_Next_Room
   7206  2901
   7207  2901		       4c 11 b1 	      jmp	.__Done_Next_Room
   7208  2904
   7209  2904				   .
   7210  2904							; 
   7211  2904
   7212  2904				   .
   7213  2904							; 
   7214  2904
   7215  2904				   .__sV
   7216  2904							; __sV
   7217  2904
   7218  2904				   .L0386		;  playfield:
   7219  2904
   7220  2904				  -	      ifconst	pfres
   7221  2904				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   7222  2904					      else
   7223  2904		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   7224  2906					      endif
   7225  2906		       4c 35 b9 	      jmp	pflabel32
   7226  2909				   PF_data32
   7227  2909		       00 00		      .byte.b	%00000000, %00000000
   7228  290b					      if	(pfwidth>2)
   7229  290b		       00 00		      .byte.b	%00000000, %00000000
   7230  290d					      endif
   7231  290d		       00 00		      .byte.b	%00000000, %00000000
   7232  290f					      if	(pfwidth>2)
   7233  290f		       00 00		      .byte.b	%00000000, %00000000
   7234  2911					      endif
   7235  2911		       07 3f		      .byte.b	%00000111, %00111111
   7236  2913					      if	(pfwidth>2)
   7237  2913		       3f 07		      .byte.b	%00111111, %00000111
   7238  2915					      endif
   7239  2915		       07 3f		      .byte.b	%00000111, %00111111
   7240  2917					      if	(pfwidth>2)
   7241  2917		       3f 07		      .byte.b	%00111111, %00000111
   7242  2919					      endif
   7243  2919		       07 01		      .byte.b	%00000111, %00000001
   7244  291b					      if	(pfwidth>2)
   7245  291b		       01 07		      .byte.b	%00000001, %00000111
   7246  291d					      endif
   7247  291d		       00 00		      .byte.b	%00000000, %00000000
   7248  291f					      if	(pfwidth>2)
   7249  291f		       00 00		      .byte.b	%00000000, %00000000
   7250  2921					      endif
   7251  2921		       00 38		      .byte.b	%00000000, %00111000
   7252  2923					      if	(pfwidth>2)
   7253  2923		       38 00		      .byte.b	%00111000, %00000000
   7254  2925					      endif
   7255  2925		       00 38		      .byte.b	%00000000, %00111000
   7256  2927					      if	(pfwidth>2)
   7257  2927		       38 00		      .byte.b	%00111000, %00000000
   7258  2929					      endif
   7259  2929		       07 3f		      .byte.b	%00000111, %00111111
   7260  292b					      if	(pfwidth>2)
   7261  292b		       3f 07		      .byte.b	%00111111, %00000111
   7262  292d					      endif
   7263  292d		       00 00		      .byte.b	%00000000, %00000000
   7264  292f					      if	(pfwidth>2)
   7265  292f		       00 00		      .byte.b	%00000000, %00000000
   7266  2931					      endif
   7267  2931		       00 00		      .byte.b	%00000000, %00000000
   7268  2933					      if	(pfwidth>2)
   7269  2933		       00 00		      .byte.b	%00000000, %00000000
   7270  2935					      endif
   7271  2935				   pflabel32
   7272  2935		       bd 09 b9 	      lda	PF_data32,x
   7273  2938		       95 a4		      sta	playfield,x
   7274  293a		       ca		      dex
   7275  293b		       10 f8		      bpl	pflabel32
   7276  293d				   .
   7277  293d							; 
   7278  293d
   7279  293d				   .L0387		;  goto __Done_Next_Room
   7280  293d
   7281  293d		       4c 11 b1 	      jmp	.__Done_Next_Room
   7282  2940
   7283  2940				   .
   7284  2940							; 
   7285  2940
   7286  2940				   .
   7287  2940							; 
   7288  2940
   7289  2940				   .
   7290  2940							; 
   7291  2940
   7292  2940				   .
   7293  2940							; 
   7294  2940
   7295  2940				   .
   7296  2940							; 
   7297  2940
   7298  2940				   .
   7299  2940							; 
   7300  2940
   7301  2940				   .
   7302  2940							; 
   7303  2940
   7304  2940				   .
   7305  2940							; 
   7306  2940
   7307  2940				   .
   7308  2940							; 
   7309  2940
   7310  2940				   .
   7311  2940							; 
   7312  2940
   7313  2940				   .L0388		;  data _Data_Over_Background_Color
   7314  2940
   7315  2940		       4c 63 b9 	      JMP	.skipL0388
   7316  2943				   _Data_Over_Background_Color
   7317  2943		       20		      .byte.b	_20
   7318  2944
   7319  2944		       30		      .byte.b	_30
   7320  2945
   7321  2945		       50		      .byte.b	_50
   7322  2946
   7323  2946		       b0		      .byte.b	_B0
   7324  2947
   7325  2947		       c0		      .byte.b	_C0
   7326  2948
   7327  2948		       d0		      .byte.b	_D0
   7328  2949
   7329  2949		       e0		      .byte.b	_E0
   7330  294a
   7331  294a		       f0		      .byte.b	_F0
   7332  294b
   7333  294b		       80		      .byte.b	_80
   7334  294c
   7335  294c		       62		      .byte.b	_62
   7336  294d
   7337  294d		       c2		      .byte.b	_C2
   7338  294e
   7339  294e		       60		      .byte.b	_60
   7340  294f
   7341  294f		       40		      .byte.b	_40
   7342  2950
   7343  2950		       d2		      .byte.b	_D2
   7344  2951
   7345  2951		       30		      .byte.b	_30
   7346  2952
   7347  2952		       d0		      .byte.b	_D0
   7348  2953
   7349  2953		       62		      .byte.b	_62
   7350  2954
   7351  2954		       62		      .byte.b	_62
   7352  2955
   7353  2955		       90		      .byte.b	_90
   7354  2956
   7355  2956		       90		      .byte.b	_90
   7356  2957
   7357  2957		       d0		      .byte.b	_D0
   7358  2958
   7359  2958		       d0		      .byte.b	_D0
   7360  2959
   7361  2959		       40		      .byte.b	_40
   7362  295a
   7363  295a		       40		      .byte.b	_40
   7364  295b
   7365  295b		       c2		      .byte.b	_C2
   7366  295c
   7367  295c		       c0		      .byte.b	_C0
   7368  295d
   7369  295d		       20		      .byte.b	_20
   7370  295e
   7371  295e		       22		      .byte.b	_22
   7372  295f
   7373  295f		       22		      .byte.b	_22
   7374  2960
   7375  2960		       d2		      .byte.b	_D2
   7376  2961
   7377  2961		       c2		      .byte.b	_C2
   7378  2962
   7379  2962		       22		      .byte.b	_22
   7380  2963
   7381  2963				   .skipL0388
   7382  2963				   .
   7383  2963							; 
   7384  2963
   7385  2963				   .
   7386  2963							; 
   7387  2963
   7388  2963				   .
   7389  2963							; 
   7390  2963
   7391  2963				   .
   7392  2963							; 
   7393  2963
   7394  2963				   .
   7395  2963							; 
   7396  2963
   7397  2963				   .
   7398  2963							; 
   7399  2963
   7400  2963				   .
   7401  2963							; 
   7402  2963
   7403  2963				   .
   7404  2963							; 
   7405  2963
   7406  2963				   .L0389		;  data _Data_Over_Foreground_Color
   7407  2963
   7408  2963		       4c 86 b9 	      JMP	.skipL0389
   7409  2966				   _Data_Over_Foreground_Color
   7410  2966		       bc		      .byte.b	_BC
   7411  2967
   7412  2967		       3c		      .byte.b	_3C
   7413  2968
   7414  2968		       bc		      .byte.b	_BC
   7415  2969
   7416  2969		       cc		      .byte.b	_CC
   7417  296a
   7418  296a		       2c		      .byte.b	_2C
   7419  296b
   7420  296b		       0c		      .byte.b	_0C
   7421  296c
   7422  296c		       bc		      .byte.b	_BC
   7423  296d
   7424  296d		       ac		      .byte.b	_AC
   7425  296e
   7426  296e		       9c		      .byte.b	_9C
   7427  296f
   7428  296f		       6c		      .byte.b	_6C
   7429  2970
   7430  2970		       cc		      .byte.b	_CC
   7431  2971
   7432  2971		       3c		      .byte.b	_3C
   7433  2972
   7434  2972		       cc		      .byte.b	_CC
   7435  2973
   7436  2973		       9c		      .byte.b	_9C
   7437  2974
   7438  2974		       cc		      .byte.b	_CC
   7439  2975
   7440  2975		       2c		      .byte.b	_2C
   7441  2976
   7442  2976		       5c		      .byte.b	_5C
   7443  2977
   7444  2977		       9c		      .byte.b	_9C
   7445  2978
   7446  2978		       bc		      .byte.b	_BC
   7447  2979
   7448  2979		       5c		      .byte.b	_5C
   7449  297a
   7450  297a		       2c		      .byte.b	_2C
   7451  297b
   7452  297b		       4c		      .byte.b	_4C
   7453  297c
   7454  297c		       0c		      .byte.b	_0C
   7455  297d
   7456  297d		       3c		      .byte.b	_3C
   7457  297e
   7458  297e		       0c		      .byte.b	_0C
   7459  297f
   7460  297f		       ac		      .byte.b	_AC
   7461  2980
   7462  2980		       cc		      .byte.b	_CC
   7463  2981
   7464  2981		       4c		      .byte.b	_4C
   7465  2982
   7466  2982		       3c		      .byte.b	_3C
   7467  2983
   7468  2983		       ec		      .byte.b	_EC
   7469  2984
   7470  2984		       4c		      .byte.b	_4C
   7471  2985
   7472  2985		       2e		      .byte.b	_2E
   7473  2986
   7474  2986				   .skipL0389
   7475  2986				   .
   7476  2986							; 
   7477  2986
   7478  2986				   .
   7479  2986							; 
   7480  2986
   7481  2986				   .
   7482  2986							; 
   7483  2986
   7484  2986				   .
   7485  2986							; 
   7486  2986
   7487  2986				   .
   7488  2986							; 
   7489  2986
   7490  2986				   .L0390		;  bank 3
   7491  2986
   7492  2986					      if	ECHO2
      1614 bytes of ROM space left in bank 2
   7493  2986					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   7494  2986					      endif
   7495  2986		       00 01	   ECHO2      =	1
   7496  2fd4					      ORG	$2FF4-bscode_length
   7497  2fd4					      RORG	$BFF4-bscode_length
   7498  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   7499  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   7500  2fd6				  -	      stx	FASTFETCH
   7501  2fd6					      endif
   7502  2fd6		       9a		      txs
   7503  2fd7				  -	      if	bankswitch == 64
   7504  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7505  2fd7					      else
   7506  2fd7		       a9 f2		      lda	#>(start-1)
   7507  2fd9					      endif
   7508  2fd9		       48		      pha
   7509  2fda		       a9 4f		      lda	#<(start-1)
   7510  2fdc		       48		      pha
   7511  2fdd		       48		      pha
   7512  2fde		       8a		      txa
   7513  2fdf		       48		      pha
   7514  2fe0		       ba		      tsx
   7515  2fe1					      if	bankswitch != 64
   7516  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   7517  2fe3		       2a		      rol
   7518  2fe4		       2a		      rol
   7519  2fe5		       2a		      rol
   7520  2fe6		       2a		      rol
   7521  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7522  2fe9		       aa		      tax
   7523  2fea		       e8		      inx
   7524  2feb				  -	      else
   7525  2feb				  -	      lda	4,x	; get high byte of return address
   7526  2feb				  -	      tay
   7527  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7528  2feb				  -	      sta	4,x
   7529  2feb				  -	      tya
   7530  2feb				  -	      lsr
   7531  2feb				  -	      lsr
   7532  2feb				  -	      lsr
   7533  2feb				  -	      lsr
   7534  2feb				  -	      tax
   7535  2feb				  -	      inx
   7536  2feb					      endif
   7537  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7538  2fee		       68		      pla
   7539  2fef		       aa		      tax
   7540  2ff0		       68		      pla
   7541  2ff1		       60		      rts
   7542  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7543  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7544  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7545  2ff2					      endif
   7546  2ffc					      ORG	$2FFC
   7547  2ffc					      RORG	$BFFC
   7548  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
   7549  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
   7550  3000					      ORG	$3000
   7551  3000					      RORG	$D000
   7552  3000				   .
   7553  3000							; 
   7554  3000
   7555  3000				   .
   7556  3000							; 
   7557  3000
   7558  3000				   .
   7559  3000							; 
   7560  3000
   7561  3000				   .
   7562  3000							; 
   7563  3000
   7564  3000				   .
   7565  3000							; 
   7566  3000
   7567  3000				   .__Continue_in_Bank_3
   7568  3000							; __Continue_in_Bank_3
   7569  3000
   7570  3000				   .
   7571  3000							; 
   7572  3000
   7573  3000				   .
   7574  3000							; 
   7575  3000
   7576  3000				   .
   7577  3000							; 
   7578  3000
   7579  3000				   .
   7580  3000							; 
   7581  3000
   7582  3000				   .
   7583  3000							; 
   7584  3000
   7585  3000				   .
   7586  3000							; 
   7587  3000
   7588  3000				   .
   7589  3000							; 
   7590  3000
   7591  3000				   .
   7592  3000							; 
   7593  3000
   7594  3000				   .
   7595  3000							; 
   7596  3000
   7597  3000				   .
   7598  3000							; 
   7599  3000
   7600  3000				   .
   7601  3000							; 
   7602  3000
   7603  3000				   .
   7604  3000							; 
   7605  3000
   7606  3000				   .
   7607  3000							; 
   7608  3000
   7609  3000				   .
   7610  3000							; 
   7611  3000
   7612  3000				   .
   7613  3000							; 
   7614  3000
   7615  3000				   .
   7616  3000							; 
   7617  3000
   7618  3000				   .
   7619  3000							; 
   7620  3000
   7621  3000				   .
   7622  3000							; 
   7623  3000
   7624  3000				   .
   7625  3000							; 
   7626  3000
   7627  3000				   .
   7628  3000							; 
   7629  3000
   7630  3000				   .
   7631  3000							; 
   7632  3000
   7633  3000				   .
   7634  3000							; 
   7635  3000
   7636  3000				   .
   7637  3000							; 
   7638  3000
   7639  3000				   .L0391		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop bank1
   7640  3000
   7641  3000		       a9 01		      lda	#1
   7642  3002		       2c 82 02 	      bit	SWCHB
   7643  3005		       f0 18		      BEQ	.skipL0391
   7644  3007				   .condpart75
   7645  3007		       a5 da		      LDA	_Bit0_Reset_Restrainer
   7646  3009		       29 fe		      AND	#254
   7647  300b		       85 da		      STA	_Bit0_Reset_Restrainer
   7648  300d		       85 ee		      sta	temp7
   7649  300f		       a9 92		      lda	#>(.__Main_Loop-1)
   7650  3011		       48		      pha
   7651  3012		       a9 3e		      lda	#<(.__Main_Loop-1)
   7652  3014		       48		      pha
   7653  3015		       a5 ee		      lda	temp7
   7654  3017		       48		      pha
   7655  3018		       8a		      txa
   7656  3019		       48		      pha
   7657  301a		       a2 01		      ldx	#1
   7658  301c		       4c eb ff 	      jmp	BS_jsr
   7659  301f				   .skipL0391
   7660  301f				   .
   7661  301f							; 
   7662  301f
   7663  301f				   .
   7664  301f							; 
   7665  301f
   7666  301f				   .
   7667  301f							; 
   7668  301f
   7669  301f				   .
   7670  301f							; 
   7671  301f
   7672  301f				   .
   7673  301f							; 
   7674  301f
   7675  301f				   .L0392		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop bank1
   7676  301f
   7677  301f		       a5 da		      LDA	_Bit0_Reset_Restrainer
   7678  3021		       4a		      LSR
   7679  3022		       90 12		      BCC	.skipL0392
   7680  3024				   .condpart76
   7681  3024		       85 ee		      sta	temp7
   7682  3026		       a9 92		      lda	#>(.__Main_Loop-1)
   7683  3028		       48		      pha
   7684  3029		       a9 3e		      lda	#<(.__Main_Loop-1)
   7685  302b		       48		      pha
   7686  302c		       a5 ee		      lda	temp7
   7687  302e		       48		      pha
   7688  302f		       8a		      txa
   7689  3030		       48		      pha
   7690  3031		       a2 01		      ldx	#1
   7691  3033		       4c eb ff 	      jmp	BS_jsr
   7692  3036				   .skipL0392
   7693  3036				   .
   7694  3036							; 
   7695  3036
   7696  3036				   .
   7697  3036							; 
   7698  3036
   7699  3036				   .
   7700  3036							; 
   7701  3036
   7702  3036				   .
   7703  3036							; 
   7704  3036
   7705  3036				   .L0393		;  goto __Start_Restart bank1
   7706  3036
   7707  3036		       85 ee		      sta	temp7
   7708  3038		       a9 8f		      lda	#>(.__Start_Restart-1)
   7709  303a		       48		      pha
   7710  303b		       a9 ff		      lda	#<(.__Start_Restart-1)
   7711  303d		       48		      pha
   7712  303e		       a5 ee		      lda	temp7
   7713  3040		       48		      pha
   7714  3041		       8a		      txa
   7715  3042		       48		      pha
   7716  3043		       a2 01		      ldx	#1
   7717  3045		       4c eb ff 	      jmp	BS_jsr
   7718  3048				   .
   7719  3048							; 
   7720  3048
   7721  3048				   .
   7722  3048							; 
   7723  3048
   7724  3048				   .
   7725  3048							; 
   7726  3048
   7727  3048				   .
   7728  3048							; 
   7729  3048
   7730  3048				   .
   7731  3048							; 
   7732  3048
   7733  3048				   .
   7734  3048							; 
   7735  3048
   7736  3048				   .
   7737  3048							; 
   7738  3048
   7739  3048				   .
   7740  3048							; 
   7741  3048
   7742  3048				   .
   7743  3048							; 
   7744  3048
   7745  3048				   .
   7746  3048							; 
   7747  3048
   7748  3048				   .__Set_Underworld_Scene
   7749  3048							; __Set_Underworld_Scene
   7750  3048
   7751  3048				   .
   7752  3048							; 
   7753  3048
   7754  3048				   .
   7755  3048							; 
   7756  3048
   7757  3048				   .
   7758  3048							; 
   7759  3048
   7760  3048				   .
   7761  3048							; 
   7762  3048
   7763  3048				   .L0394		;  player0:
   7764  3048
   7765  3048		       a2 62		      LDX	#<playerL0394_0
   7766  304a		       86 8a		      STX	player0pointerlo
   7767  304c		       a9 f5		      LDA	#>playerL0394_0
   7768  304e		       85 8b		      STA	player0pointerhi
   7769  3050		       a9 07		      LDA	#7
   7770  3052		       85 8e		      STA	player0height
   7771  3054				   .
   7772  3054							; 
   7773  3054
   7774  3054				   .
   7775  3054							; 
   7776  3054
   7777  3054				   .
   7778  3054							; 
   7779  3054
   7780  3054				   .
   7781  3054							; 
   7782  3054
   7783  3054				   .L0395		;  COLUBK  =  _Data_Under_Background_Color[_CurrentScene]
   7784  3054
   7785  3054		       a6 d6		      LDX	_CurrentScene
   7786  3056		       bd 30 da 	      LDA	_Data_Under_Background_Color,x
   7787  3059		       85 09		      STA	COLUBK
   7788  305b				   .L0396		;  COLUPF  =  _Data_Under_Foreground_Color[_CurrentScene]
   7789  305b
   7790  305b		       a6 d6		      LDX	_CurrentScene
   7791  305d		       bd 53 da 	      LDA	_Data_Under_Foreground_Color,x
   7792  3060		       85 08		      STA	COLUPF
   7793  3062				   .
   7794  3062							; 
   7795  3062
   7796  3062				   .
   7797  3062							; 
   7798  3062
   7799  3062				   .
   7800  3062							; 
   7801  3062
   7802  3062				   .
   7803  3062							; 
   7804  3062
   7805  3062				   .L0397		;  on _CurrentScene goto __u0 __u1 __u2 __u3 __u4 __u5 __u6 __u7 __u8 __u9 __uA __uB __uC __uD __uE __uF __uG __uH __uI __uJ __uK __uL __uM __uN __uO __uP __uQ __uR __uS __uT __uU __uV
   7806  3062
   7807  3062		       a6 d6		      LDX	_CurrentScene
   7808  3064		       bd 6d d0 	      LDA	.L0397jumptablehi,x
   7809  3067		       48		      PHA
   7810  3068		       bd 8d d0 	      LDA	.L0397jumptablelo,x
   7811  306b		       48		      PHA
   7812  306c		       60		      RTS
   7813  306d				   .L0397jumptablehi
   7814  306d		       d0		      .byte.b	>(.__u0-1)
   7815  306e		       d0		      .byte.b	>(.__u1-1)
   7816  306f		       d1		      .byte.b	>(.__u2-1)
   7817  3070		       d1		      .byte.b	>(.__u3-1)
   7818  3071		       d1		      .byte.b	>(.__u4-1)
   7819  3072		       d2		      .byte.b	>(.__u5-1)
   7820  3073		       d2		      .byte.b	>(.__u6-1)
   7821  3074		       d2		      .byte.b	>(.__u7-1)
   7822  3075		       d3		      .byte.b	>(.__u8-1)
   7823  3076		       d3		      .byte.b	>(.__u9-1)
   7824  3077		       d3		      .byte.b	>(.__uA-1)
   7825  3078		       d3		      .byte.b	>(.__uB-1)
   7826  3079		       d4		      .byte.b	>(.__uC-1)
   7827  307a		       d4		      .byte.b	>(.__uD-1)
   7828  307b		       d4		      .byte.b	>(.__uE-1)
   7829  307c		       d5		      .byte.b	>(.__uF-1)
   7830  307d		       d5		      .byte.b	>(.__uG-1)
   7831  307e		       d5		      .byte.b	>(.__uH-1)
   7832  307f		       d6		      .byte.b	>(.__uI-1)
   7833  3080		       d6		      .byte.b	>(.__uJ-1)
   7834  3081		       d6		      .byte.b	>(.__uK-1)
   7835  3082		       d6		      .byte.b	>(.__uL-1)
   7836  3083		       d7		      .byte.b	>(.__uM-1)
   7837  3084		       d7		      .byte.b	>(.__uN-1)
   7838  3085		       d7		      .byte.b	>(.__uO-1)
   7839  3086		       d8		      .byte.b	>(.__uP-1)
   7840  3087		       d8		      .byte.b	>(.__uQ-1)
   7841  3088		       d8		      .byte.b	>(.__uR-1)
   7842  3089		       d9		      .byte.b	>(.__uS-1)
   7843  308a		       d9		      .byte.b	>(.__uT-1)
   7844  308b		       d9		      .byte.b	>(.__uU-1)
   7845  308c		       d9		      .byte.b	>(.__uV-1)
   7846  308d				   .L0397jumptablelo
   7847  308d		       ac		      .byte.b	<(.__u0-1)
   7848  308e		       f7		      .byte.b	<(.__u1-1)
   7849  308f		       42		      .byte.b	<(.__u2-1)
   7850  3090		       8d		      .byte.b	<(.__u3-1)
   7851  3091		       d8		      .byte.b	<(.__u4-1)
   7852  3092		       23		      .byte.b	<(.__u5-1)
   7853  3093		       6e		      .byte.b	<(.__u6-1)
   7854  3094		       b9		      .byte.b	<(.__u7-1)
   7855  3095		       04		      .byte.b	<(.__u8-1)
   7856  3096		       57		      .byte.b	<(.__u9-1)
   7857  3097		       a2		      .byte.b	<(.__uA-1)
   7858  3098		       ed		      .byte.b	<(.__uB-1)
   7859  3099		       38		      .byte.b	<(.__uC-1)
   7860  309a		       83		      .byte.b	<(.__uD-1)
   7861  309b		       d6		      .byte.b	<(.__uE-1)
   7862  309c		       21		      .byte.b	<(.__uF-1)
   7863  309d		       6c		      .byte.b	<(.__uG-1)
   7864  309e		       b7		      .byte.b	<(.__uH-1)
   7865  309f		       02		      .byte.b	<(.__uI-1)
   7866  30a0		       4d		      .byte.b	<(.__uJ-1)
   7867  30a1		       98		      .byte.b	<(.__uK-1)
   7868  30a2		       e3		      .byte.b	<(.__uL-1)
   7869  30a3		       2e		      .byte.b	<(.__uM-1)
   7870  30a4		       81		      .byte.b	<(.__uN-1)
   7871  30a5		       d4		      .byte.b	<(.__uO-1)
   7872  30a6		       1f		      .byte.b	<(.__uP-1)
   7873  30a7		       6a		      .byte.b	<(.__uQ-1)
   7874  30a8		       b5		      .byte.b	<(.__uR-1)
   7875  30a9		       00		      .byte.b	<(.__uS-1)
   7876  30aa		       4b		      .byte.b	<(.__uT-1)
   7877  30ab		       96		      .byte.b	<(.__uU-1)
   7878  30ac		       e1		      .byte.b	<(.__uV-1)
   7879  30ad				   .
   7880  30ad							; 
   7881  30ad
   7882  30ad				   .
   7883  30ad							; 
   7884  30ad
   7885  30ad				   .__u0
   7886  30ad							; __u0
   7887  30ad
   7888  30ad				   .L0398		;  playfield:
   7889  30ad
   7890  30ad				  -	      ifconst	pfres
   7891  30ad				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   7892  30ad					      else
   7893  30ad		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   7894  30af					      endif
   7895  30af		       4c de d0 	      jmp	pflabel33
   7896  30b2				   PF_data33
   7897  30b2		       00 00		      .byte.b	%00000000, %00000000
   7898  30b4					      if	(pfwidth>2)
   7899  30b4		       00 00		      .byte.b	%00000000, %00000000
   7900  30b6					      endif
   7901  30b6		       00 00		      .byte.b	%00000000, %00000000
   7902  30b8					      if	(pfwidth>2)
   7903  30b8		       00 00		      .byte.b	%00000000, %00000000
   7904  30ba					      endif
   7905  30ba		       00 00		      .byte.b	%00000000, %00000000
   7906  30bc					      if	(pfwidth>2)
   7907  30bc		       0e 00		      .byte.b	%00001110, %00000000
   7908  30be					      endif
   7909  30be		       00 00		      .byte.b	%00000000, %00000000
   7910  30c0					      if	(pfwidth>2)
   7911  30c0		       1f 01		      .byte.b	%00011111, %00000001
   7912  30c2					      endif
   7913  30c2		       01 01		      .byte.b	%00000001, %00000001
   7914  30c4					      if	(pfwidth>2)
   7915  30c4		       3f 03		      .byte.b	%00111111, %00000011
   7916  30c6					      endif
   7917  30c6		       03 03		      .byte.b	%00000011, %00000011
   7918  30c8					      if	(pfwidth>2)
   7919  30c8		       3f 07		      .byte.b	%00111111, %00000111
   7920  30ca					      endif
   7921  30ca		       07 07		      .byte.b	%00000111, %00000111
   7922  30cc					      if	(pfwidth>2)
   7923  30cc		       1f 03		      .byte.b	%00011111, %00000011
   7924  30ce					      endif
   7925  30ce		       07 0f		      .byte.b	%00000111, %00001111
   7926  30d0					      if	(pfwidth>2)
   7927  30d0		       0f 00		      .byte.b	%00001111, %00000000
   7928  30d2					      endif
   7929  30d2		       03 07		      .byte.b	%00000011, %00000111
   7930  30d4					      if	(pfwidth>2)
   7931  30d4		       00 00		      .byte.b	%00000000, %00000000
   7932  30d6					      endif
   7933  30d6		       00 00		      .byte.b	%00000000, %00000000
   7934  30d8					      if	(pfwidth>2)
   7935  30d8		       00 00		      .byte.b	%00000000, %00000000
   7936  30da					      endif
   7937  30da		       00 00		      .byte.b	%00000000, %00000000
   7938  30dc					      if	(pfwidth>2)
   7939  30dc		       00 00		      .byte.b	%00000000, %00000000
   7940  30de					      endif
   7941  30de				   pflabel33
   7942  30de		       bd b2 d0 	      lda	PF_data33,x
   7943  30e1		       95 a4		      sta	playfield,x
   7944  30e3		       ca		      dex
   7945  30e4		       10 f8		      bpl	pflabel33
   7946  30e6				   .
   7947  30e6							; 
   7948  30e6
   7949  30e6				   .L0399		;  goto __Done_Next_Room bank2
   7950  30e6
   7951  30e6		       85 ee		      sta	temp7
   7952  30e8		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   7953  30ea		       48		      pha
   7954  30eb		       a9 10		      lda	#<(.__Done_Next_Room-1)
   7955  30ed		       48		      pha
   7956  30ee		       a5 ee		      lda	temp7
   7957  30f0		       48		      pha
   7958  30f1		       8a		      txa
   7959  30f2		       48		      pha
   7960  30f3		       a2 02		      ldx	#2
   7961  30f5		       4c eb ff 	      jmp	BS_jsr
   7962  30f8				   .
   7963  30f8							; 
   7964  30f8
   7965  30f8				   .
   7966  30f8							; 
   7967  30f8
   7968  30f8				   .__u1
   7969  30f8							; __u1
   7970  30f8
   7971  30f8				   .L0400		;  playfield:
   7972  30f8
   7973  30f8				  -	      ifconst	pfres
   7974  30f8				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   7975  30f8					      else
   7976  30f8		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   7977  30fa					      endif
   7978  30fa		       4c 29 d1 	      jmp	pflabel34
   7979  30fd				   PF_data34
   7980  30fd		       00 00		      .byte.b	%00000000, %00000000
   7981  30ff					      if	(pfwidth>2)
   7982  30ff		       00 00		      .byte.b	%00000000, %00000000
   7983  3101					      endif
   7984  3101		       00 00		      .byte.b	%00000000, %00000000
   7985  3103					      if	(pfwidth>2)
   7986  3103		       00 00		      .byte.b	%00000000, %00000000
   7987  3105					      endif
   7988  3105		       0f 78		      .byte.b	%00001111, %01111000
   7989  3107					      if	(pfwidth>2)
   7990  3107		       38 0f		      .byte.b	%00111000, %00001111
   7991  3109					      endif
   7992  3109		       00 40		      .byte.b	%00000000, %01000000
   7993  310b					      if	(pfwidth>2)
   7994  310b		       20 00		      .byte.b	%00100000, %00000000
   7995  310d					      endif
   7996  310d		       00 40		      .byte.b	%00000000, %01000000
   7997  310f					      if	(pfwidth>2)
   7998  310f		       20 00		      .byte.b	%00100000, %00000000
   7999  3111					      endif
   8000  3111		       0f 7f		      .byte.b	%00001111, %01111111
   8001  3113					      if	(pfwidth>2)
   8002  3113		       3f 0f		      .byte.b	%00111111, %00001111
   8003  3115					      endif
   8004  3115		       00 00		      .byte.b	%00000000, %00000000
   8005  3117					      if	(pfwidth>2)
   8006  3117		       00 00		      .byte.b	%00000000, %00000000
   8007  3119					      endif
   8008  3119		       00 00		      .byte.b	%00000000, %00000000
   8009  311b					      if	(pfwidth>2)
   8010  311b		       00 00		      .byte.b	%00000000, %00000000
   8011  311d					      endif
   8012  311d		       0f ff		      .byte.b	%00001111, %11111111
   8013  311f					      if	(pfwidth>2)
   8014  311f		       ff 0f		      .byte.b	%11111111, %00001111
   8015  3121					      endif
   8016  3121		       00 00		      .byte.b	%00000000, %00000000
   8017  3123					      if	(pfwidth>2)
   8018  3123		       00 00		      .byte.b	%00000000, %00000000
   8019  3125					      endif
   8020  3125		       00 00		      .byte.b	%00000000, %00000000
   8021  3127					      if	(pfwidth>2)
   8022  3127		       00 00		      .byte.b	%00000000, %00000000
   8023  3129					      endif
   8024  3129				   pflabel34
   8025  3129		       bd fd d0 	      lda	PF_data34,x
   8026  312c		       95 a4		      sta	playfield,x
   8027  312e		       ca		      dex
   8028  312f		       10 f8		      bpl	pflabel34
   8029  3131				   .
   8030  3131							; 
   8031  3131
   8032  3131				   .L0401		;  goto __Done_Next_Room bank2
   8033  3131
   8034  3131		       85 ee		      sta	temp7
   8035  3133		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8036  3135		       48		      pha
   8037  3136		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8038  3138		       48		      pha
   8039  3139		       a5 ee		      lda	temp7
   8040  313b		       48		      pha
   8041  313c		       8a		      txa
   8042  313d		       48		      pha
   8043  313e		       a2 02		      ldx	#2
   8044  3140		       4c eb ff 	      jmp	BS_jsr
   8045  3143				   .
   8046  3143							; 
   8047  3143
   8048  3143				   .
   8049  3143							; 
   8050  3143
   8051  3143				   .__u2
   8052  3143							; __u2
   8053  3143
   8054  3143				   .L0402		;  playfield:
   8055  3143
   8056  3143				  -	      ifconst	pfres
   8057  3143				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8058  3143					      else
   8059  3143		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8060  3145					      endif
   8061  3145		       4c 74 d1 	      jmp	pflabel35
   8062  3148				   PF_data35
   8063  3148		       00 00		      .byte.b	%00000000, %00000000
   8064  314a					      if	(pfwidth>2)
   8065  314a		       00 00		      .byte.b	%00000000, %00000000
   8066  314c					      endif
   8067  314c		       00 00		      .byte.b	%00000000, %00000000
   8068  314e					      if	(pfwidth>2)
   8069  314e		       00 00		      .byte.b	%00000000, %00000000
   8070  3150					      endif
   8071  3150		       00 00		      .byte.b	%00000000, %00000000
   8072  3152					      if	(pfwidth>2)
   8073  3152		       00 00		      .byte.b	%00000000, %00000000
   8074  3154					      endif
   8075  3154		       03 07		      .byte.b	%00000011, %00000111
   8076  3156					      if	(pfwidth>2)
   8077  3156		       0f 01		      .byte.b	%00001111, %00000001
   8078  3158					      endif
   8079  3158		       00 00		      .byte.b	%00000000, %00000000
   8080  315a					      if	(pfwidth>2)
   8081  315a		       00 00		      .byte.b	%00000000, %00000000
   8082  315c					      endif
   8083  315c		       00 00		      .byte.b	%00000000, %00000000
   8084  315e					      if	(pfwidth>2)
   8085  315e		       00 00		      .byte.b	%00000000, %00000000
   8086  3160					      endif
   8087  3160		       00 00		      .byte.b	%00000000, %00000000
   8088  3162					      if	(pfwidth>2)
   8089  3162		       00 00		      .byte.b	%00000000, %00000000
   8090  3164					      endif
   8091  3164		       00 e0		      .byte.b	%00000000, %11100000
   8092  3166					      if	(pfwidth>2)
   8093  3166		       c0 00		      .byte.b	%11000000, %00000000
   8094  3168					      endif
   8095  3168		       00 00		      .byte.b	%00000000, %00000000
   8096  316a					      if	(pfwidth>2)
   8097  316a		       00 00		      .byte.b	%00000000, %00000000
   8098  316c					      endif
   8099  316c		       00 00		      .byte.b	%00000000, %00000000
   8100  316e					      if	(pfwidth>2)
   8101  316e		       00 00		      .byte.b	%00000000, %00000000
   8102  3170					      endif
   8103  3170		       00 00		      .byte.b	%00000000, %00000000
   8104  3172					      if	(pfwidth>2)
   8105  3172		       00 00		      .byte.b	%00000000, %00000000
   8106  3174					      endif
   8107  3174				   pflabel35
   8108  3174		       bd 48 d1 	      lda	PF_data35,x
   8109  3177		       95 a4		      sta	playfield,x
   8110  3179		       ca		      dex
   8111  317a		       10 f8		      bpl	pflabel35
   8112  317c				   .
   8113  317c							; 
   8114  317c
   8115  317c				   .L0403		;  goto __Done_Next_Room bank2
   8116  317c
   8117  317c		       85 ee		      sta	temp7
   8118  317e		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8119  3180		       48		      pha
   8120  3181		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8121  3183		       48		      pha
   8122  3184		       a5 ee		      lda	temp7
   8123  3186		       48		      pha
   8124  3187		       8a		      txa
   8125  3188		       48		      pha
   8126  3189		       a2 02		      ldx	#2
   8127  318b		       4c eb ff 	      jmp	BS_jsr
   8128  318e				   .
   8129  318e							; 
   8130  318e
   8131  318e				   .
   8132  318e							; 
   8133  318e
   8134  318e				   .__u3
   8135  318e							; __u3
   8136  318e
   8137  318e				   .L0404		;  playfield:
   8138  318e
   8139  318e				  -	      ifconst	pfres
   8140  318e				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8141  318e					      else
   8142  318e		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8143  3190					      endif
   8144  3190		       4c bf d1 	      jmp	pflabel36
   8145  3193				   PF_data36
   8146  3193		       00 00		      .byte.b	%00000000, %00000000
   8147  3195					      if	(pfwidth>2)
   8148  3195		       00 00		      .byte.b	%00000000, %00000000
   8149  3197					      endif
   8150  3197		       00 00		      .byte.b	%00000000, %00000000
   8151  3199					      if	(pfwidth>2)
   8152  3199		       00 00		      .byte.b	%00000000, %00000000
   8153  319b					      endif
   8154  319b		       0f f9		      .byte.b	%00001111, %11111001
   8155  319d					      if	(pfwidth>2)
   8156  319d		       f3 0f		      .byte.b	%11110011, %00001111
   8157  319f					      endif
   8158  319f		       0f f9		      .byte.b	%00001111, %11111001
   8159  31a1					      if	(pfwidth>2)
   8160  31a1		       f3 0f		      .byte.b	%11110011, %00001111
   8161  31a3					      endif
   8162  31a3		       00 18		      .byte.b	%00000000, %00011000
   8163  31a5					      if	(pfwidth>2)
   8164  31a5		       30 00		      .byte.b	%00110000, %00000000
   8165  31a7					      endif
   8166  31a7		       00 18		      .byte.b	%00000000, %00011000
   8167  31a9					      if	(pfwidth>2)
   8168  31a9		       30 00		      .byte.b	%00110000, %00000000
   8169  31ab					      endif
   8170  31ab		       00 18		      .byte.b	%00000000, %00011000
   8171  31ad					      if	(pfwidth>2)
   8172  31ad		       30 00		      .byte.b	%00110000, %00000000
   8173  31af					      endif
   8174  31af		       0f f9		      .byte.b	%00001111, %11111001
   8175  31b1					      if	(pfwidth>2)
   8176  31b1		       f3 0f		      .byte.b	%11110011, %00001111
   8177  31b3					      endif
   8178  31b3		       0f f9		      .byte.b	%00001111, %11111001
   8179  31b5					      if	(pfwidth>2)
   8180  31b5		       f3 0f		      .byte.b	%11110011, %00001111
   8181  31b7					      endif
   8182  31b7		       00 00		      .byte.b	%00000000, %00000000
   8183  31b9					      if	(pfwidth>2)
   8184  31b9		       00 00		      .byte.b	%00000000, %00000000
   8185  31bb					      endif
   8186  31bb		       00 00		      .byte.b	%00000000, %00000000
   8187  31bd					      if	(pfwidth>2)
   8188  31bd		       00 00		      .byte.b	%00000000, %00000000
   8189  31bf					      endif
   8190  31bf				   pflabel36
   8191  31bf		       bd 93 d1 	      lda	PF_data36,x
   8192  31c2		       95 a4		      sta	playfield,x
   8193  31c4		       ca		      dex
   8194  31c5		       10 f8		      bpl	pflabel36
   8195  31c7				   .
   8196  31c7							; 
   8197  31c7
   8198  31c7				   .L0405		;  goto __Done_Next_Room bank2
   8199  31c7
   8200  31c7		       85 ee		      sta	temp7
   8201  31c9		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8202  31cb		       48		      pha
   8203  31cc		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8204  31ce		       48		      pha
   8205  31cf		       a5 ee		      lda	temp7
   8206  31d1		       48		      pha
   8207  31d2		       8a		      txa
   8208  31d3		       48		      pha
   8209  31d4		       a2 02		      ldx	#2
   8210  31d6		       4c eb ff 	      jmp	BS_jsr
   8211  31d9				   .
   8212  31d9							; 
   8213  31d9
   8214  31d9				   .
   8215  31d9							; 
   8216  31d9
   8217  31d9				   .__u4
   8218  31d9							; __u4
   8219  31d9
   8220  31d9				   .L0406		;  playfield:
   8221  31d9
   8222  31d9				  -	      ifconst	pfres
   8223  31d9				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8224  31d9					      else
   8225  31d9		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8226  31db					      endif
   8227  31db		       4c 0a d2 	      jmp	pflabel37
   8228  31de				   PF_data37
   8229  31de		       00 00		      .byte.b	%00000000, %00000000
   8230  31e0					      if	(pfwidth>2)
   8231  31e0		       00 00		      .byte.b	%00000000, %00000000
   8232  31e2					      endif
   8233  31e2		       00 00		      .byte.b	%00000000, %00000000
   8234  31e4					      if	(pfwidth>2)
   8235  31e4		       00 00		      .byte.b	%00000000, %00000000
   8236  31e6					      endif
   8237  31e6		       00 00		      .byte.b	%00000000, %00000000
   8238  31e8					      if	(pfwidth>2)
   8239  31e8		       00 00		      .byte.b	%00000000, %00000000
   8240  31ea					      endif
   8241  31ea		       07 7f		      .byte.b	%00000111, %01111111
   8242  31ec					      if	(pfwidth>2)
   8243  31ec		       7f 07		      .byte.b	%01111111, %00000111
   8244  31ee					      endif
   8245  31ee		       00 78		      .byte.b	%00000000, %01111000
   8246  31f0					      if	(pfwidth>2)
   8247  31f0		       78 00		      .byte.b	%01111000, %00000000
   8248  31f2					      endif
   8249  31f2		       00 78		      .byte.b	%00000000, %01111000
   8250  31f4					      if	(pfwidth>2)
   8251  31f4		       78 00		      .byte.b	%01111000, %00000000
   8252  31f6					      endif
   8253  31f6		       00 7e		      .byte.b	%00000000, %01111110
   8254  31f8					      if	(pfwidth>2)
   8255  31f8		       7e 00		      .byte.b	%01111110, %00000000
   8256  31fa					      endif
   8257  31fa		       01 7f		      .byte.b	%00000001, %01111111
   8258  31fc					      if	(pfwidth>2)
   8259  31fc		       7f 01		      .byte.b	%01111111, %00000001
   8260  31fe					      endif
   8261  31fe		       07 7f		      .byte.b	%00000111, %01111111
   8262  3200					      if	(pfwidth>2)
   8263  3200		       7f 07		      .byte.b	%01111111, %00000111
   8264  3202					      endif
   8265  3202		       00 00		      .byte.b	%00000000, %00000000
   8266  3204					      if	(pfwidth>2)
   8267  3204		       00 00		      .byte.b	%00000000, %00000000
   8268  3206					      endif
   8269  3206		       00 00		      .byte.b	%00000000, %00000000
   8270  3208					      if	(pfwidth>2)
   8271  3208		       00 00		      .byte.b	%00000000, %00000000
   8272  320a					      endif
   8273  320a				   pflabel37
   8274  320a		       bd de d1 	      lda	PF_data37,x
   8275  320d		       95 a4		      sta	playfield,x
   8276  320f		       ca		      dex
   8277  3210		       10 f8		      bpl	pflabel37
   8278  3212				   .
   8279  3212							; 
   8280  3212
   8281  3212				   .L0407		;  goto __Done_Next_Room bank2
   8282  3212
   8283  3212		       85 ee		      sta	temp7
   8284  3214		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8285  3216		       48		      pha
   8286  3217		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8287  3219		       48		      pha
   8288  321a		       a5 ee		      lda	temp7
   8289  321c		       48		      pha
   8290  321d		       8a		      txa
   8291  321e		       48		      pha
   8292  321f		       a2 02		      ldx	#2
   8293  3221		       4c eb ff 	      jmp	BS_jsr
   8294  3224				   .
   8295  3224							; 
   8296  3224
   8297  3224				   .
   8298  3224							; 
   8299  3224
   8300  3224				   .__u5
   8301  3224							; __u5
   8302  3224
   8303  3224				   .L0408		;  playfield:
   8304  3224
   8305  3224				  -	      ifconst	pfres
   8306  3224				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8307  3224					      else
   8308  3224		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8309  3226					      endif
   8310  3226		       4c 55 d2 	      jmp	pflabel38
   8311  3229				   PF_data38
   8312  3229		       00 00		      .byte.b	%00000000, %00000000
   8313  322b					      if	(pfwidth>2)
   8314  322b		       00 00		      .byte.b	%00000000, %00000000
   8315  322d					      endif
   8316  322d		       00 00		      .byte.b	%00000000, %00000000
   8317  322f					      if	(pfwidth>2)
   8318  322f		       00 00		      .byte.b	%00000000, %00000000
   8319  3231					      endif
   8320  3231		       0f ff		      .byte.b	%00001111, %11111111
   8321  3233					      if	(pfwidth>2)
   8322  3233		       98 00		      .byte.b	%10011000, %00000000
   8323  3235					      endif
   8324  3235		       00 80		      .byte.b	%00000000, %10000000
   8325  3237					      if	(pfwidth>2)
   8326  3237		       98 00		      .byte.b	%10011000, %00000000
   8327  3239					      endif
   8328  3239		       00 80		      .byte.b	%00000000, %10000000
   8329  323b					      if	(pfwidth>2)
   8330  323b		       9f 0f		      .byte.b	%10011111, %00001111
   8331  323d					      endif
   8332  323d		       0f 9f		      .byte.b	%00001111, %10011111
   8333  323f					      if	(pfwidth>2)
   8334  323f		       80 0c		      .byte.b	%10000000, %00001100
   8335  3241					      endif
   8336  3241		       00 80		      .byte.b	%00000000, %10000000
   8337  3243					      if	(pfwidth>2)
   8338  3243		       80 0c		      .byte.b	%10000000, %00001100
   8339  3245					      endif
   8340  3245		       00 80		      .byte.b	%00000000, %10000000
   8341  3247					      if	(pfwidth>2)
   8342  3247		       80 0c		      .byte.b	%10000000, %00001100
   8343  3249					      endif
   8344  3249		       0f ff		      .byte.b	%00001111, %11111111
   8345  324b					      if	(pfwidth>2)
   8346  324b		       9f 0f		      .byte.b	%10011111, %00001111
   8347  324d					      endif
   8348  324d		       00 00		      .byte.b	%00000000, %00000000
   8349  324f					      if	(pfwidth>2)
   8350  324f		       00 00		      .byte.b	%00000000, %00000000
   8351  3251					      endif
   8352  3251		       00 00		      .byte.b	%00000000, %00000000
   8353  3253					      if	(pfwidth>2)
   8354  3253		       00 00		      .byte.b	%00000000, %00000000
   8355  3255					      endif
   8356  3255				   pflabel38
   8357  3255		       bd 29 d2 	      lda	PF_data38,x
   8358  3258		       95 a4		      sta	playfield,x
   8359  325a		       ca		      dex
   8360  325b		       10 f8		      bpl	pflabel38
   8361  325d				   .
   8362  325d							; 
   8363  325d
   8364  325d				   .L0409		;  goto __Done_Next_Room bank2
   8365  325d
   8366  325d		       85 ee		      sta	temp7
   8367  325f		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8368  3261		       48		      pha
   8369  3262		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8370  3264		       48		      pha
   8371  3265		       a5 ee		      lda	temp7
   8372  3267		       48		      pha
   8373  3268		       8a		      txa
   8374  3269		       48		      pha
   8375  326a		       a2 02		      ldx	#2
   8376  326c		       4c eb ff 	      jmp	BS_jsr
   8377  326f				   .
   8378  326f							; 
   8379  326f
   8380  326f				   .
   8381  326f							; 
   8382  326f
   8383  326f				   .__u6
   8384  326f							; __u6
   8385  326f
   8386  326f				   .L0410		;  playfield:
   8387  326f
   8388  326f				  -	      ifconst	pfres
   8389  326f				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8390  326f					      else
   8391  326f		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8392  3271					      endif
   8393  3271		       4c a0 d2 	      jmp	pflabel39
   8394  3274				   PF_data39
   8395  3274		       00 00		      .byte.b	%00000000, %00000000
   8396  3276					      if	(pfwidth>2)
   8397  3276		       00 00		      .byte.b	%00000000, %00000000
   8398  3278					      endif
   8399  3278		       00 00		      .byte.b	%00000000, %00000000
   8400  327a					      if	(pfwidth>2)
   8401  327a		       00 00		      .byte.b	%00000000, %00000000
   8402  327c					      endif
   8403  327c		       00 73		      .byte.b	%00000000, %01110011
   8404  327e					      if	(pfwidth>2)
   8405  327e		       73 00		      .byte.b	%01110011, %00000000
   8406  3280					      endif
   8407  3280		       00 73		      .byte.b	%00000000, %01110011
   8408  3282					      if	(pfwidth>2)
   8409  3282		       73 00		      .byte.b	%01110011, %00000000
   8410  3284					      endif
   8411  3284		       0f 73		      .byte.b	%00001111, %01110011
   8412  3286					      if	(pfwidth>2)
   8413  3286		       73 0f		      .byte.b	%01110011, %00001111
   8414  3288					      endif
   8415  3288		       0f 73		      .byte.b	%00001111, %01110011
   8416  328a					      if	(pfwidth>2)
   8417  328a		       73 0f		      .byte.b	%01110011, %00001111
   8418  328c					      endif
   8419  328c		       0f 73		      .byte.b	%00001111, %01110011
   8420  328e					      if	(pfwidth>2)
   8421  328e		       73 0f		      .byte.b	%01110011, %00001111
   8422  3290					      endif
   8423  3290		       00 73		      .byte.b	%00000000, %01110011
   8424  3292					      if	(pfwidth>2)
   8425  3292		       73 00		      .byte.b	%01110011, %00000000
   8426  3294					      endif
   8427  3294		       00 73		      .byte.b	%00000000, %01110011
   8428  3296					      if	(pfwidth>2)
   8429  3296		       73 00		      .byte.b	%01110011, %00000000
   8430  3298					      endif
   8431  3298		       00 00		      .byte.b	%00000000, %00000000
   8432  329a					      if	(pfwidth>2)
   8433  329a		       00 00		      .byte.b	%00000000, %00000000
   8434  329c					      endif
   8435  329c		       00 00		      .byte.b	%00000000, %00000000
   8436  329e					      if	(pfwidth>2)
   8437  329e		       00 00		      .byte.b	%00000000, %00000000
   8438  32a0					      endif
   8439  32a0				   pflabel39
   8440  32a0		       bd 74 d2 	      lda	PF_data39,x
   8441  32a3		       95 a4		      sta	playfield,x
   8442  32a5		       ca		      dex
   8443  32a6		       10 f8		      bpl	pflabel39
   8444  32a8				   .
   8445  32a8							; 
   8446  32a8
   8447  32a8				   .L0411		;  goto __Done_Next_Room bank2
   8448  32a8
   8449  32a8		       85 ee		      sta	temp7
   8450  32aa		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8451  32ac		       48		      pha
   8452  32ad		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8453  32af		       48		      pha
   8454  32b0		       a5 ee		      lda	temp7
   8455  32b2		       48		      pha
   8456  32b3		       8a		      txa
   8457  32b4		       48		      pha
   8458  32b5		       a2 02		      ldx	#2
   8459  32b7		       4c eb ff 	      jmp	BS_jsr
   8460  32ba				   .
   8461  32ba							; 
   8462  32ba
   8463  32ba				   .
   8464  32ba							; 
   8465  32ba
   8466  32ba				   .__u7
   8467  32ba							; __u7
   8468  32ba
   8469  32ba				   .L0412		;  playfield:
   8470  32ba
   8471  32ba				  -	      ifconst	pfres
   8472  32ba				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8473  32ba					      else
   8474  32ba		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8475  32bc					      endif
   8476  32bc		       4c eb d2 	      jmp	pflabel40
   8477  32bf				   PF_data40
   8478  32bf		       00 00		      .byte.b	%00000000, %00000000
   8479  32c1					      if	(pfwidth>2)
   8480  32c1		       00 00		      .byte.b	%00000000, %00000000
   8481  32c3					      endif
   8482  32c3		       00 00		      .byte.b	%00000000, %00000000
   8483  32c5					      if	(pfwidth>2)
   8484  32c5		       00 00		      .byte.b	%00000000, %00000000
   8485  32c7					      endif
   8486  32c7		       07 3f		      .byte.b	%00000111, %00111111
   8487  32c9					      if	(pfwidth>2)
   8488  32c9		       f0 00		      .byte.b	%11110000, %00000000
   8489  32cb					      endif
   8490  32cb		       03 3f		      .byte.b	%00000011, %00111111
   8491  32cd					      if	(pfwidth>2)
   8492  32cd		       f0 00		      .byte.b	%11110000, %00000000
   8493  32cf					      endif
   8494  32cf		       01 3f		      .byte.b	%00000001, %00111111
   8495  32d1					      if	(pfwidth>2)
   8496  32d1		       f2 00		      .byte.b	%11110010, %00000000
   8497  32d3					      endif
   8498  32d3		       00 3f		      .byte.b	%00000000, %00111111
   8499  32d5					      if	(pfwidth>2)
   8500  32d5		       f3 00		      .byte.b	%11110011, %00000000
   8501  32d7					      endif
   8502  32d7		       00 3e		      .byte.b	%00000000, %00111110
   8503  32d9					      if	(pfwidth>2)
   8504  32d9		       f3 01		      .byte.b	%11110011, %00000001
   8505  32db					      endif
   8506  32db		       00 3c		      .byte.b	%00000000, %00111100
   8507  32dd					      if	(pfwidth>2)
   8508  32dd		       f3 03		      .byte.b	%11110011, %00000011
   8509  32df					      endif
   8510  32df		       00 38		      .byte.b	%00000000, %00111000
   8511  32e1					      if	(pfwidth>2)
   8512  32e1		       f3 07		      .byte.b	%11110011, %00000111
   8513  32e3					      endif
   8514  32e3		       00 00		      .byte.b	%00000000, %00000000
   8515  32e5					      if	(pfwidth>2)
   8516  32e5		       00 00		      .byte.b	%00000000, %00000000
   8517  32e7					      endif
   8518  32e7		       00 00		      .byte.b	%00000000, %00000000
   8519  32e9					      if	(pfwidth>2)
   8520  32e9		       00 00		      .byte.b	%00000000, %00000000
   8521  32eb					      endif
   8522  32eb				   pflabel40
   8523  32eb		       bd bf d2 	      lda	PF_data40,x
   8524  32ee		       95 a4		      sta	playfield,x
   8525  32f0		       ca		      dex
   8526  32f1		       10 f8		      bpl	pflabel40
   8527  32f3				   .
   8528  32f3							; 
   8529  32f3
   8530  32f3				   .L0413		;  goto __Done_Next_Room bank2
   8531  32f3
   8532  32f3		       85 ee		      sta	temp7
   8533  32f5		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8534  32f7		       48		      pha
   8535  32f8		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8536  32fa		       48		      pha
   8537  32fb		       a5 ee		      lda	temp7
   8538  32fd		       48		      pha
   8539  32fe		       8a		      txa
   8540  32ff		       48		      pha
   8541  3300		       a2 02		      ldx	#2
   8542  3302		       4c eb ff 	      jmp	BS_jsr
   8543  3305				   .
   8544  3305							; 
   8545  3305
   8546  3305				   .
   8547  3305							; 
   8548  3305
   8549  3305				   .__u8
   8550  3305							; __u8
   8551  3305
   8552  3305				   .
   8553  3305							; 
   8554  3305
   8555  3305				   .L0414		;  player0x  =  49  :	player0y  =  56
   8556  3305
   8557  3305		       a9 31		      LDA	#49
   8558  3307		       85 80		      STA	player0x
   8559  3309		       a9 38		      LDA	#56
   8560  330b		       85 85		      STA	player0y
   8561  330d				   .
   8562  330d							; 
   8563  330d
   8564  330d				   .L0415		;  playfield:
   8565  330d
   8566  330d				  -	      ifconst	pfres
   8567  330d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8568  330d					      else
   8569  330d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8570  330f					      endif
   8571  330f		       4c 3e d3 	      jmp	pflabel41
   8572  3312				   PF_data41
   8573  3312		       00 00		      .byte.b	%00000000, %00000000
   8574  3314					      if	(pfwidth>2)
   8575  3314		       00 00		      .byte.b	%00000000, %00000000
   8576  3316					      endif
   8577  3316		       00 00		      .byte.b	%00000000, %00000000
   8578  3318					      if	(pfwidth>2)
   8579  3318		       00 00		      .byte.b	%00000000, %00000000
   8580  331a					      endif
   8581  331a		       07 ff		      .byte.b	%00000111, %11111111
   8582  331c					      if	(pfwidth>2)
   8583  331c		       ff 03		      .byte.b	%11111111, %00000011
   8584  331e					      endif
   8585  331e		       07 ff		      .byte.b	%00000111, %11111111
   8586  3320					      if	(pfwidth>2)
   8587  3320		       ff 03		      .byte.b	%11111111, %00000011
   8588  3322					      endif
   8589  3322		       07 ff		      .byte.b	%00000111, %11111111
   8590  3324					      if	(pfwidth>2)
   8591  3324		       ff 03		      .byte.b	%11111111, %00000011
   8592  3326					      endif
   8593  3326		       07 ff		      .byte.b	%00000111, %11111111
   8594  3328					      if	(pfwidth>2)
   8595  3328		       ff 03		      .byte.b	%11111111, %00000011
   8596  332a					      endif
   8597  332a		       07 fc		      .byte.b	%00000111, %11111100
   8598  332c					      if	(pfwidth>2)
   8599  332c		       ff 03		      .byte.b	%11111111, %00000011
   8600  332e					      endif
   8601  332e		       07 fc		      .byte.b	%00000111, %11111100
   8602  3330					      if	(pfwidth>2)
   8603  3330		       ff 03		      .byte.b	%11111111, %00000011
   8604  3332					      endif
   8605  3332		       00 00		      .byte.b	%00000000, %00000000
   8606  3334					      if	(pfwidth>2)
   8607  3334		       00 00		      .byte.b	%00000000, %00000000
   8608  3336					      endif
   8609  3336		       00 00		      .byte.b	%00000000, %00000000
   8610  3338					      if	(pfwidth>2)
   8611  3338		       00 00		      .byte.b	%00000000, %00000000
   8612  333a					      endif
   8613  333a		       00 00		      .byte.b	%00000000, %00000000
   8614  333c					      if	(pfwidth>2)
   8615  333c		       00 00		      .byte.b	%00000000, %00000000
   8616  333e					      endif
   8617  333e				   pflabel41
   8618  333e		       bd 12 d3 	      lda	PF_data41,x
   8619  3341		       95 a4		      sta	playfield,x
   8620  3343		       ca		      dex
   8621  3344		       10 f8		      bpl	pflabel41
   8622  3346				   .
   8623  3346							; 
   8624  3346
   8625  3346				   .L0416		;  goto __Done_Next_Room bank2
   8626  3346
   8627  3346		       85 ee		      sta	temp7
   8628  3348		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8629  334a		       48		      pha
   8630  334b		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8631  334d		       48		      pha
   8632  334e		       a5 ee		      lda	temp7
   8633  3350		       48		      pha
   8634  3351		       8a		      txa
   8635  3352		       48		      pha
   8636  3353		       a2 02		      ldx	#2
   8637  3355		       4c eb ff 	      jmp	BS_jsr
   8638  3358				   .
   8639  3358							; 
   8640  3358
   8641  3358				   .
   8642  3358							; 
   8643  3358
   8644  3358				   .__u9
   8645  3358							; __u9
   8646  3358
   8647  3358				   .L0417		;  playfield:
   8648  3358
   8649  3358				  -	      ifconst	pfres
   8650  3358				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8651  3358					      else
   8652  3358		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8653  335a					      endif
   8654  335a		       4c 89 d3 	      jmp	pflabel42
   8655  335d				   PF_data42
   8656  335d		       00 00		      .byte.b	%00000000, %00000000
   8657  335f					      if	(pfwidth>2)
   8658  335f		       00 00		      .byte.b	%00000000, %00000000
   8659  3361					      endif
   8660  3361		       00 00		      .byte.b	%00000000, %00000000
   8661  3363					      if	(pfwidth>2)
   8662  3363		       00 00		      .byte.b	%00000000, %00000000
   8663  3365					      endif
   8664  3365		       07 00		      .byte.b	%00000111, %00000000
   8665  3367					      if	(pfwidth>2)
   8666  3367		       01 03		      .byte.b	%00000001, %00000011
   8667  3369					      endif
   8668  3369		       0f 01		      .byte.b	%00001111, %00000001
   8669  336b					      if	(pfwidth>2)
   8670  336b		       03 07		      .byte.b	%00000011, %00000111
   8671  336d					      endif
   8672  336d		       0f 01		      .byte.b	%00001111, %00000001
   8673  336f					      if	(pfwidth>2)
   8674  336f		       03 07		      .byte.b	%00000011, %00000111
   8675  3371					      endif
   8676  3371		       07 80		      .byte.b	%00000111, %10000000
   8677  3373					      if	(pfwidth>2)
   8678  3373		       c1 03		      .byte.b	%11000001, %00000011
   8679  3375					      endif
   8680  3375		       00 c0		      .byte.b	%00000000, %11000000
   8681  3377					      if	(pfwidth>2)
   8682  3377		       e0 00		      .byte.b	%11100000, %00000000
   8683  3379					      endif
   8684  3379		       00 c0		      .byte.b	%00000000, %11000000
   8685  337b					      if	(pfwidth>2)
   8686  337b		       e0 00		      .byte.b	%11100000, %00000000
   8687  337d					      endif
   8688  337d		       00 80		      .byte.b	%00000000, %10000000
   8689  337f					      if	(pfwidth>2)
   8690  337f		       c0 00		      .byte.b	%11000000, %00000000
   8691  3381					      endif
   8692  3381		       00 00		      .byte.b	%00000000, %00000000
   8693  3383					      if	(pfwidth>2)
   8694  3383		       00 00		      .byte.b	%00000000, %00000000
   8695  3385					      endif
   8696  3385		       00 00		      .byte.b	%00000000, %00000000
   8697  3387					      if	(pfwidth>2)
   8698  3387		       00 00		      .byte.b	%00000000, %00000000
   8699  3389					      endif
   8700  3389				   pflabel42
   8701  3389		       bd 5d d3 	      lda	PF_data42,x
   8702  338c		       95 a4		      sta	playfield,x
   8703  338e		       ca		      dex
   8704  338f		       10 f8		      bpl	pflabel42
   8705  3391				   .
   8706  3391							; 
   8707  3391
   8708  3391				   .L0418		;  goto __Done_Next_Room bank2
   8709  3391
   8710  3391		       85 ee		      sta	temp7
   8711  3393		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8712  3395		       48		      pha
   8713  3396		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8714  3398		       48		      pha
   8715  3399		       a5 ee		      lda	temp7
   8716  339b		       48		      pha
   8717  339c		       8a		      txa
   8718  339d		       48		      pha
   8719  339e		       a2 02		      ldx	#2
   8720  33a0		       4c eb ff 	      jmp	BS_jsr
   8721  33a3				   .
   8722  33a3							; 
   8723  33a3
   8724  33a3				   .
   8725  33a3							; 
   8726  33a3
   8727  33a3				   .__uA
   8728  33a3							; __uA
   8729  33a3
   8730  33a3				   .L0419		;  playfield:
   8731  33a3
   8732  33a3				  -	      ifconst	pfres
   8733  33a3				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8734  33a3					      else
   8735  33a3		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8736  33a5					      endif
   8737  33a5		       4c d4 d3 	      jmp	pflabel43
   8738  33a8				   PF_data43
   8739  33a8		       00 00		      .byte.b	%00000000, %00000000
   8740  33aa					      if	(pfwidth>2)
   8741  33aa		       00 00		      .byte.b	%00000000, %00000000
   8742  33ac					      endif
   8743  33ac		       00 00		      .byte.b	%00000000, %00000000
   8744  33ae					      if	(pfwidth>2)
   8745  33ae		       00 00		      .byte.b	%00000000, %00000000
   8746  33b0					      endif
   8747  33b0		       0f 73		      .byte.b	%00001111, %01110011
   8748  33b2					      if	(pfwidth>2)
   8749  33b2		       73 0f		      .byte.b	%01110011, %00001111
   8750  33b4					      endif
   8751  33b4		       0f 73		      .byte.b	%00001111, %01110011
   8752  33b6					      if	(pfwidth>2)
   8753  33b6		       73 0f		      .byte.b	%01110011, %00001111
   8754  33b8					      endif
   8755  33b8		       0f 73		      .byte.b	%00001111, %01110011
   8756  33ba					      if	(pfwidth>2)
   8757  33ba		       73 0f		      .byte.b	%01110011, %00001111
   8758  33bc					      endif
   8759  33bc		       00 70		      .byte.b	%00000000, %01110000
   8760  33be					      if	(pfwidth>2)
   8761  33be		       70 00		      .byte.b	%01110000, %00000000
   8762  33c0					      endif
   8763  33c0		       00 70		      .byte.b	%00000000, %01110000
   8764  33c2					      if	(pfwidth>2)
   8765  33c2		       70 00		      .byte.b	%01110000, %00000000
   8766  33c4					      endif
   8767  33c4		       0f 73		      .byte.b	%00001111, %01110011
   8768  33c6					      if	(pfwidth>2)
   8769  33c6		       73 0f		      .byte.b	%01110011, %00001111
   8770  33c8					      endif
   8771  33c8		       0f 73		      .byte.b	%00001111, %01110011
   8772  33ca					      if	(pfwidth>2)
   8773  33ca		       73 0f		      .byte.b	%01110011, %00001111
   8774  33cc					      endif
   8775  33cc		       00 00		      .byte.b	%00000000, %00000000
   8776  33ce					      if	(pfwidth>2)
   8777  33ce		       00 00		      .byte.b	%00000000, %00000000
   8778  33d0					      endif
   8779  33d0		       00 00		      .byte.b	%00000000, %00000000
   8780  33d2					      if	(pfwidth>2)
   8781  33d2		       00 00		      .byte.b	%00000000, %00000000
   8782  33d4					      endif
   8783  33d4				   pflabel43
   8784  33d4		       bd a8 d3 	      lda	PF_data43,x
   8785  33d7		       95 a4		      sta	playfield,x
   8786  33d9		       ca		      dex
   8787  33da		       10 f8		      bpl	pflabel43
   8788  33dc				   .
   8789  33dc							; 
   8790  33dc
   8791  33dc				   .L0420		;  goto __Done_Next_Room bank2
   8792  33dc
   8793  33dc		       85 ee		      sta	temp7
   8794  33de		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8795  33e0		       48		      pha
   8796  33e1		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8797  33e3		       48		      pha
   8798  33e4		       a5 ee		      lda	temp7
   8799  33e6		       48		      pha
   8800  33e7		       8a		      txa
   8801  33e8		       48		      pha
   8802  33e9		       a2 02		      ldx	#2
   8803  33eb		       4c eb ff 	      jmp	BS_jsr
   8804  33ee				   .
   8805  33ee							; 
   8806  33ee
   8807  33ee				   .
   8808  33ee							; 
   8809  33ee
   8810  33ee				   .__uB
   8811  33ee							; __uB
   8812  33ee
   8813  33ee				   .L0421		;  playfield:
   8814  33ee
   8815  33ee				  -	      ifconst	pfres
   8816  33ee				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8817  33ee					      else
   8818  33ee		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8819  33f0					      endif
   8820  33f0		       4c 1f d4 	      jmp	pflabel44
   8821  33f3				   PF_data44
   8822  33f3		       00 00		      .byte.b	%00000000, %00000000
   8823  33f5					      if	(pfwidth>2)
   8824  33f5		       00 00		      .byte.b	%00000000, %00000000
   8825  33f7					      endif
   8826  33f7		       00 00		      .byte.b	%00000000, %00000000
   8827  33f9					      if	(pfwidth>2)
   8828  33f9		       00 00		      .byte.b	%00000000, %00000000
   8829  33fb					      endif
   8830  33fb		       0f ff		      .byte.b	%00001111, %11111111
   8831  33fd					      if	(pfwidth>2)
   8832  33fd		       9f 07		      .byte.b	%10011111, %00000111
   8833  33ff					      endif
   8834  33ff		       0f ff		      .byte.b	%00001111, %11111111
   8835  3401					      if	(pfwidth>2)
   8836  3401		       9f 07		      .byte.b	%10011111, %00000111
   8837  3403					      endif
   8838  3403		       00 80		      .byte.b	%00000000, %10000000
   8839  3405					      if	(pfwidth>2)
   8840  3405		       98 00		      .byte.b	%10011000, %00000000
   8841  3407					      endif
   8842  3407		       00 80		      .byte.b	%00000000, %10000000
   8843  3409					      if	(pfwidth>2)
   8844  3409		       98 00		      .byte.b	%10011000, %00000000
   8845  340b					      endif
   8846  340b		       00 80		      .byte.b	%00000000, %10000000
   8847  340d					      if	(pfwidth>2)
   8848  340d		       98 00		      .byte.b	%10011000, %00000000
   8849  340f					      endif
   8850  340f		       0f ff		      .byte.b	%00001111, %11111111
   8851  3411					      if	(pfwidth>2)
   8852  3411		       9f 07		      .byte.b	%10011111, %00000111
   8853  3413					      endif
   8854  3413		       0f ff		      .byte.b	%00001111, %11111111
   8855  3415					      if	(pfwidth>2)
   8856  3415		       9f 07		      .byte.b	%10011111, %00000111
   8857  3417					      endif
   8858  3417		       00 00		      .byte.b	%00000000, %00000000
   8859  3419					      if	(pfwidth>2)
   8860  3419		       00 00		      .byte.b	%00000000, %00000000
   8861  341b					      endif
   8862  341b		       00 00		      .byte.b	%00000000, %00000000
   8863  341d					      if	(pfwidth>2)
   8864  341d		       00 00		      .byte.b	%00000000, %00000000
   8865  341f					      endif
   8866  341f				   pflabel44
   8867  341f		       bd f3 d3 	      lda	PF_data44,x
   8868  3422		       95 a4		      sta	playfield,x
   8869  3424		       ca		      dex
   8870  3425		       10 f8		      bpl	pflabel44
   8871  3427				   .
   8872  3427							; 
   8873  3427
   8874  3427				   .L0422		;  goto __Done_Next_Room bank2
   8875  3427
   8876  3427		       85 ee		      sta	temp7
   8877  3429		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8878  342b		       48		      pha
   8879  342c		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8880  342e		       48		      pha
   8881  342f		       a5 ee		      lda	temp7
   8882  3431		       48		      pha
   8883  3432		       8a		      txa
   8884  3433		       48		      pha
   8885  3434		       a2 02		      ldx	#2
   8886  3436		       4c eb ff 	      jmp	BS_jsr
   8887  3439				   .
   8888  3439							; 
   8889  3439
   8890  3439				   .
   8891  3439							; 
   8892  3439
   8893  3439				   .__uC
   8894  3439							; __uC
   8895  3439
   8896  3439				   .L0423		;  playfield:
   8897  3439
   8898  3439				  -	      ifconst	pfres
   8899  3439				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8900  3439					      else
   8901  3439		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8902  343b					      endif
   8903  343b		       4c 6a d4 	      jmp	pflabel45
   8904  343e				   PF_data45
   8905  343e		       00 00		      .byte.b	%00000000, %00000000
   8906  3440					      if	(pfwidth>2)
   8907  3440		       00 00		      .byte.b	%00000000, %00000000
   8908  3442					      endif
   8909  3442		       00 00		      .byte.b	%00000000, %00000000
   8910  3444					      if	(pfwidth>2)
   8911  3444		       00 00		      .byte.b	%00000000, %00000000
   8912  3446					      endif
   8913  3446		       0f f3		      .byte.b	%00001111, %11110011
   8914  3448					      if	(pfwidth>2)
   8915  3448		       f3 0f		      .byte.b	%11110011, %00001111
   8916  344a					      endif
   8917  344a		       00 02		      .byte.b	%00000000, %00000010
   8918  344c					      if	(pfwidth>2)
   8919  344c		       02 00		      .byte.b	%00000010, %00000000
   8920  344e					      endif
   8921  344e		       00 02		      .byte.b	%00000000, %00000010
   8922  3450					      if	(pfwidth>2)
   8923  3450		       02 00		      .byte.b	%00000010, %00000000
   8924  3452					      endif
   8925  3452		       0f ff		      .byte.b	%00001111, %11111111
   8926  3454					      if	(pfwidth>2)
   8927  3454		       ff 0f		      .byte.b	%11111111, %00001111
   8928  3456					      endif
   8929  3456		       08 10		      .byte.b	%00001000, %00010000
   8930  3458					      if	(pfwidth>2)
   8931  3458		       10 08		      .byte.b	%00010000, %00001000
   8932  345a					      endif
   8933  345a		       08 10		      .byte.b	%00001000, %00010000
   8934  345c					      if	(pfwidth>2)
   8935  345c		       10 08		      .byte.b	%00010000, %00001000
   8936  345e					      endif
   8937  345e		       0f f3		      .byte.b	%00001111, %11110011
   8938  3460					      if	(pfwidth>2)
   8939  3460		       f3 0f		      .byte.b	%11110011, %00001111
   8940  3462					      endif
   8941  3462		       00 00		      .byte.b	%00000000, %00000000
   8942  3464					      if	(pfwidth>2)
   8943  3464		       00 00		      .byte.b	%00000000, %00000000
   8944  3466					      endif
   8945  3466		       00 00		      .byte.b	%00000000, %00000000
   8946  3468					      if	(pfwidth>2)
   8947  3468		       00 00		      .byte.b	%00000000, %00000000
   8948  346a					      endif
   8949  346a				   pflabel45
   8950  346a		       bd 3e d4 	      lda	PF_data45,x
   8951  346d		       95 a4		      sta	playfield,x
   8952  346f		       ca		      dex
   8953  3470		       10 f8		      bpl	pflabel45
   8954  3472				   .
   8955  3472							; 
   8956  3472
   8957  3472				   .L0424		;  goto __Done_Next_Room bank2
   8958  3472
   8959  3472		       85 ee		      sta	temp7
   8960  3474		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   8961  3476		       48		      pha
   8962  3477		       a9 10		      lda	#<(.__Done_Next_Room-1)
   8963  3479		       48		      pha
   8964  347a		       a5 ee		      lda	temp7
   8965  347c		       48		      pha
   8966  347d		       8a		      txa
   8967  347e		       48		      pha
   8968  347f		       a2 02		      ldx	#2
   8969  3481		       4c eb ff 	      jmp	BS_jsr
   8970  3484				   .
   8971  3484							; 
   8972  3484
   8973  3484				   .
   8974  3484							; 
   8975  3484
   8976  3484				   .__uD
   8977  3484							; __uD
   8978  3484
   8979  3484				   .
   8980  3484							; 
   8981  3484
   8982  3484				   .L0425		;  player0x  =  89  :	player0y  =  64
   8983  3484
   8984  3484		       a9 59		      LDA	#89
   8985  3486		       85 80		      STA	player0x
   8986  3488		       a9 40		      LDA	#64
   8987  348a		       85 85		      STA	player0y
   8988  348c				   .
   8989  348c							; 
   8990  348c
   8991  348c				   .L0426		;  playfield:
   8992  348c
   8993  348c				  -	      ifconst	pfres
   8994  348c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   8995  348c					      else
   8996  348c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   8997  348e					      endif
   8998  348e		       4c bd d4 	      jmp	pflabel46
   8999  3491				   PF_data46
   9000  3491		       00 00		      .byte.b	%00000000, %00000000
   9001  3493					      if	(pfwidth>2)
   9002  3493		       00 00		      .byte.b	%00000000, %00000000
   9003  3495					      endif
   9004  3495		       00 00		      .byte.b	%00000000, %00000000
   9005  3497					      if	(pfwidth>2)
   9006  3497		       00 00		      .byte.b	%00000000, %00000000
   9007  3499					      endif
   9008  3499		       00 80		      .byte.b	%00000000, %10000000
   9009  349b					      if	(pfwidth>2)
   9010  349b		       f8 00		      .byte.b	%11111000, %00000000
   9011  349d					      endif
   9012  349d		       00 e0		      .byte.b	%00000000, %11100000
   9013  349f					      if	(pfwidth>2)
   9014  349f		       fe 00		      .byte.b	%11111110, %00000000
   9015  34a1					      endif
   9016  34a1		       00 f0		      .byte.b	%00000000, %11110000
   9017  34a3					      if	(pfwidth>2)
   9018  34a3		       ff 00		      .byte.b	%11111111, %00000000
   9019  34a5					      endif
   9020  34a5		       00 f8		      .byte.b	%00000000, %11111000
   9021  34a7					      if	(pfwidth>2)
   9022  34a7		       ff 00		      .byte.b	%11111111, %00000000
   9023  34a9					      endif
   9024  34a9		       00 fc		      .byte.b	%00000000, %11111100
   9025  34ab					      if	(pfwidth>2)
   9026  34ab		       ff 00		      .byte.b	%11111111, %00000000
   9027  34ad					      endif
   9028  34ad		       00 fc		      .byte.b	%00000000, %11111100
   9029  34af					      if	(pfwidth>2)
   9030  34af		       cf 00		      .byte.b	%11001111, %00000000
   9031  34b1					      endif
   9032  34b1		       00 fc		      .byte.b	%00000000, %11111100
   9033  34b3					      if	(pfwidth>2)
   9034  34b3		       ce 00		      .byte.b	%11001110, %00000000
   9035  34b5					      endif
   9036  34b5		       00 00		      .byte.b	%00000000, %00000000
   9037  34b7					      if	(pfwidth>2)
   9038  34b7		       00 00		      .byte.b	%00000000, %00000000
   9039  34b9					      endif
   9040  34b9		       00 00		      .byte.b	%00000000, %00000000
   9041  34bb					      if	(pfwidth>2)
   9042  34bb		       00 00		      .byte.b	%00000000, %00000000
   9043  34bd					      endif
   9044  34bd				   pflabel46
   9045  34bd		       bd 91 d4 	      lda	PF_data46,x
   9046  34c0		       95 a4		      sta	playfield,x
   9047  34c2		       ca		      dex
   9048  34c3		       10 f8		      bpl	pflabel46
   9049  34c5				   .
   9050  34c5							; 
   9051  34c5
   9052  34c5				   .L0427		;  goto __Done_Next_Room bank2
   9053  34c5
   9054  34c5		       85 ee		      sta	temp7
   9055  34c7		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9056  34c9		       48		      pha
   9057  34ca		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9058  34cc		       48		      pha
   9059  34cd		       a5 ee		      lda	temp7
   9060  34cf		       48		      pha
   9061  34d0		       8a		      txa
   9062  34d1		       48		      pha
   9063  34d2		       a2 02		      ldx	#2
   9064  34d4		       4c eb ff 	      jmp	BS_jsr
   9065  34d7				   .
   9066  34d7							; 
   9067  34d7
   9068  34d7				   .
   9069  34d7							; 
   9070  34d7
   9071  34d7				   .__uE
   9072  34d7							; __uE
   9073  34d7
   9074  34d7				   .L0428		;  playfield:
   9075  34d7
   9076  34d7				  -	      ifconst	pfres
   9077  34d7				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9078  34d7					      else
   9079  34d7		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9080  34d9					      endif
   9081  34d9		       4c 08 d5 	      jmp	pflabel47
   9082  34dc				   PF_data47
   9083  34dc		       00 00		      .byte.b	%00000000, %00000000
   9084  34de					      if	(pfwidth>2)
   9085  34de		       00 00		      .byte.b	%00000000, %00000000
   9086  34e0					      endif
   9087  34e0		       00 00		      .byte.b	%00000000, %00000000
   9088  34e2					      if	(pfwidth>2)
   9089  34e2		       00 00		      .byte.b	%00000000, %00000000
   9090  34e4					      endif
   9091  34e4		       09 fc		      .byte.b	%00001001, %11111100
   9092  34e6					      if	(pfwidth>2)
   9093  34e6		       fc 09		      .byte.b	%11111100, %00001001
   9094  34e8					      endif
   9095  34e8		       09 00		      .byte.b	%00001001, %00000000
   9096  34ea					      if	(pfwidth>2)
   9097  34ea		       00 09		      .byte.b	%00000000, %00001001
   9098  34ec					      endif
   9099  34ec		       09 00		      .byte.b	%00001001, %00000000
   9100  34ee					      if	(pfwidth>2)
   9101  34ee		       00 09		      .byte.b	%00000000, %00001001
   9102  34f0					      endif
   9103  34f0		       09 fc		      .byte.b	%00001001, %11111100
   9104  34f2					      if	(pfwidth>2)
   9105  34f2		       fc 09		      .byte.b	%11111100, %00001001
   9106  34f4					      endif
   9107  34f4		       00 00		      .byte.b	%00000000, %00000000
   9108  34f6					      if	(pfwidth>2)
   9109  34f6		       00 00		      .byte.b	%00000000, %00000000
   9110  34f8					      endif
   9111  34f8		       00 00		      .byte.b	%00000000, %00000000
   9112  34fa					      if	(pfwidth>2)
   9113  34fa		       00 00		      .byte.b	%00000000, %00000000
   9114  34fc					      endif
   9115  34fc		       0f 7f		      .byte.b	%00001111, %01111111
   9116  34fe					      if	(pfwidth>2)
   9117  34fe		       7f 0f		      .byte.b	%01111111, %00001111
   9118  3500					      endif
   9119  3500		       00 00		      .byte.b	%00000000, %00000000
   9120  3502					      if	(pfwidth>2)
   9121  3502		       00 00		      .byte.b	%00000000, %00000000
   9122  3504					      endif
   9123  3504		       00 00		      .byte.b	%00000000, %00000000
   9124  3506					      if	(pfwidth>2)
   9125  3506		       00 00		      .byte.b	%00000000, %00000000
   9126  3508					      endif
   9127  3508				   pflabel47
   9128  3508		       bd dc d4 	      lda	PF_data47,x
   9129  350b		       95 a4		      sta	playfield,x
   9130  350d		       ca		      dex
   9131  350e		       10 f8		      bpl	pflabel47
   9132  3510				   .
   9133  3510							; 
   9134  3510
   9135  3510				   .L0429		;  goto __Done_Next_Room bank2
   9136  3510
   9137  3510		       85 ee		      sta	temp7
   9138  3512		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9139  3514		       48		      pha
   9140  3515		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9141  3517		       48		      pha
   9142  3518		       a5 ee		      lda	temp7
   9143  351a		       48		      pha
   9144  351b		       8a		      txa
   9145  351c		       48		      pha
   9146  351d		       a2 02		      ldx	#2
   9147  351f		       4c eb ff 	      jmp	BS_jsr
   9148  3522				   .
   9149  3522							; 
   9150  3522
   9151  3522				   .
   9152  3522							; 
   9153  3522
   9154  3522				   .__uF
   9155  3522							; __uF
   9156  3522
   9157  3522				   .L0430		;  playfield:
   9158  3522
   9159  3522				  -	      ifconst	pfres
   9160  3522				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9161  3522					      else
   9162  3522		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9163  3524					      endif
   9164  3524		       4c 53 d5 	      jmp	pflabel48
   9165  3527				   PF_data48
   9166  3527		       00 00		      .byte.b	%00000000, %00000000
   9167  3529					      if	(pfwidth>2)
   9168  3529		       00 00		      .byte.b	%00000000, %00000000
   9169  352b					      endif
   9170  352b		       00 00		      .byte.b	%00000000, %00000000
   9171  352d					      if	(pfwidth>2)
   9172  352d		       00 00		      .byte.b	%00000000, %00000000
   9173  352f					      endif
   9174  352f		       03 ff		      .byte.b	%00000011, %11111111
   9175  3531					      if	(pfwidth>2)
   9176  3531		       f0 00		      .byte.b	%11110000, %00000000
   9177  3533					      endif
   9178  3533		       03 07		      .byte.b	%00000011, %00000111
   9179  3535					      if	(pfwidth>2)
   9180  3535		       00 00		      .byte.b	%00000000, %00000000
   9181  3537					      endif
   9182  3537		       03 07		      .byte.b	%00000011, %00000111
   9183  3539					      if	(pfwidth>2)
   9184  3539		       00 00		      .byte.b	%00000000, %00000000
   9185  353b					      endif
   9186  353b		       03 e7		      .byte.b	%00000011, %11100111
   9187  353d					      if	(pfwidth>2)
   9188  353d		       f0 00		      .byte.b	%11110000, %00000000
   9189  353f					      endif
   9190  353f		       03 e7		      .byte.b	%00000011, %11100111
   9191  3541					      if	(pfwidth>2)
   9192  3541		       f0 00		      .byte.b	%11110000, %00000000
   9193  3543					      endif
   9194  3543		       03 e7		      .byte.b	%00000011, %11100111
   9195  3545					      if	(pfwidth>2)
   9196  3545		       f0 00		      .byte.b	%11110000, %00000000
   9197  3547					      endif
   9198  3547		       00 00		      .byte.b	%00000000, %00000000
   9199  3549					      if	(pfwidth>2)
   9200  3549		       00 00		      .byte.b	%00000000, %00000000
   9201  354b					      endif
   9202  354b		       00 00		      .byte.b	%00000000, %00000000
   9203  354d					      if	(pfwidth>2)
   9204  354d		       00 00		      .byte.b	%00000000, %00000000
   9205  354f					      endif
   9206  354f		       00 00		      .byte.b	%00000000, %00000000
   9207  3551					      if	(pfwidth>2)
   9208  3551		       00 00		      .byte.b	%00000000, %00000000
   9209  3553					      endif
   9210  3553				   pflabel48
   9211  3553		       bd 27 d5 	      lda	PF_data48,x
   9212  3556		       95 a4		      sta	playfield,x
   9213  3558		       ca		      dex
   9214  3559		       10 f8		      bpl	pflabel48
   9215  355b				   .
   9216  355b							; 
   9217  355b
   9218  355b				   .L0431		;  goto __Done_Next_Room bank2
   9219  355b
   9220  355b		       85 ee		      sta	temp7
   9221  355d		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9222  355f		       48		      pha
   9223  3560		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9224  3562		       48		      pha
   9225  3563		       a5 ee		      lda	temp7
   9226  3565		       48		      pha
   9227  3566		       8a		      txa
   9228  3567		       48		      pha
   9229  3568		       a2 02		      ldx	#2
   9230  356a		       4c eb ff 	      jmp	BS_jsr
   9231  356d				   .
   9232  356d							; 
   9233  356d
   9234  356d				   .
   9235  356d							; 
   9236  356d
   9237  356d				   .__uG
   9238  356d							; __uG
   9239  356d
   9240  356d				   .L0432		;  playfield:
   9241  356d
   9242  356d				  -	      ifconst	pfres
   9243  356d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9244  356d					      else
   9245  356d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9246  356f					      endif
   9247  356f		       4c 9e d5 	      jmp	pflabel49
   9248  3572				   PF_data49
   9249  3572		       00 00		      .byte.b	%00000000, %00000000
   9250  3574					      if	(pfwidth>2)
   9251  3574		       00 00		      .byte.b	%00000000, %00000000
   9252  3576					      endif
   9253  3576		       00 00		      .byte.b	%00000000, %00000000
   9254  3578					      if	(pfwidth>2)
   9255  3578		       00 00		      .byte.b	%00000000, %00000000
   9256  357a					      endif
   9257  357a		       0f ff		      .byte.b	%00001111, %11111111
   9258  357c					      if	(pfwidth>2)
   9259  357c		       f3 0c		      .byte.b	%11110011, %00001100
   9260  357e					      endif
   9261  357e		       0c 00		      .byte.b	%00001100, %00000000
   9262  3580					      if	(pfwidth>2)
   9263  3580		       03 0c		      .byte.b	%00000011, %00001100
   9264  3582					      endif
   9265  3582		       0c 00		      .byte.b	%00001100, %00000000
   9266  3584					      if	(pfwidth>2)
   9267  3584		       03 0c		      .byte.b	%00000011, %00001100
   9268  3586					      endif
   9269  3586		       0c ff		      .byte.b	%00001100, %11111111
   9270  3588					      if	(pfwidth>2)
   9271  3588		       ff 0c		      .byte.b	%11111111, %00001100
   9272  358a					      endif
   9273  358a		       0c 00		      .byte.b	%00001100, %00000000
   9274  358c					      if	(pfwidth>2)
   9275  358c		       00 0c		      .byte.b	%00000000, %00001100
   9276  358e					      endif
   9277  358e		       0c 00		      .byte.b	%00001100, %00000000
   9278  3590					      if	(pfwidth>2)
   9279  3590		       00 0c		      .byte.b	%00000000, %00001100
   9280  3592					      endif
   9281  3592		       0f ff		      .byte.b	%00001111, %11111111
   9282  3594					      if	(pfwidth>2)
   9283  3594		       ff 0f		      .byte.b	%11111111, %00001111
   9284  3596					      endif
   9285  3596		       00 00		      .byte.b	%00000000, %00000000
   9286  3598					      if	(pfwidth>2)
   9287  3598		       00 00		      .byte.b	%00000000, %00000000
   9288  359a					      endif
   9289  359a		       00 00		      .byte.b	%00000000, %00000000
   9290  359c					      if	(pfwidth>2)
   9291  359c		       00 00		      .byte.b	%00000000, %00000000
   9292  359e					      endif
   9293  359e				   pflabel49
   9294  359e		       bd 72 d5 	      lda	PF_data49,x
   9295  35a1		       95 a4		      sta	playfield,x
   9296  35a3		       ca		      dex
   9297  35a4		       10 f8		      bpl	pflabel49
   9298  35a6				   .
   9299  35a6							; 
   9300  35a6
   9301  35a6				   .L0433		;  goto __Done_Next_Room bank2
   9302  35a6
   9303  35a6		       85 ee		      sta	temp7
   9304  35a8		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9305  35aa		       48		      pha
   9306  35ab		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9307  35ad		       48		      pha
   9308  35ae		       a5 ee		      lda	temp7
   9309  35b0		       48		      pha
   9310  35b1		       8a		      txa
   9311  35b2		       48		      pha
   9312  35b3		       a2 02		      ldx	#2
   9313  35b5		       4c eb ff 	      jmp	BS_jsr
   9314  35b8				   .
   9315  35b8							; 
   9316  35b8
   9317  35b8				   .
   9318  35b8							; 
   9319  35b8
   9320  35b8				   .__uH
   9321  35b8							; __uH
   9322  35b8
   9323  35b8				   .L0434		;  playfield:
   9324  35b8
   9325  35b8				  -	      ifconst	pfres
   9326  35b8				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9327  35b8					      else
   9328  35b8		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9329  35ba					      endif
   9330  35ba		       4c e9 d5 	      jmp	pflabel50
   9331  35bd				   PF_data50
   9332  35bd		       00 00		      .byte.b	%00000000, %00000000
   9333  35bf					      if	(pfwidth>2)
   9334  35bf		       00 00		      .byte.b	%00000000, %00000000
   9335  35c1					      endif
   9336  35c1		       00 00		      .byte.b	%00000000, %00000000
   9337  35c3					      if	(pfwidth>2)
   9338  35c3		       00 00		      .byte.b	%00000000, %00000000
   9339  35c5					      endif
   9340  35c5		       1f f9		      .byte.b	%00011111, %11111001
   9341  35c7					      if	(pfwidth>2)
   9342  35c7		       00 00		      .byte.b	%00000000, %00000000
   9343  35c9					      endif
   9344  35c9		       1f 01		      .byte.b	%00011111, %00000001
   9345  35cb					      if	(pfwidth>2)
   9346  35cb		       3f 07		      .byte.b	%00111111, %00000111
   9347  35cd					      endif
   9348  35cd		       1f 01		      .byte.b	%00011111, %00000001
   9349  35cf					      if	(pfwidth>2)
   9350  35cf		       3f 07		      .byte.b	%00111111, %00000111
   9351  35d1					      endif
   9352  35d1		       1f f9		      .byte.b	%00011111, %11111001
   9353  35d3					      if	(pfwidth>2)
   9354  35d3		       3f 07		      .byte.b	%00111111, %00000111
   9355  35d5					      endif
   9356  35d5		       00 f8		      .byte.b	%00000000, %11111000
   9357  35d7					      if	(pfwidth>2)
   9358  35d7		       3f 07		      .byte.b	%00111111, %00000111
   9359  35d9					      endif
   9360  35d9		       00 f8		      .byte.b	%00000000, %11111000
   9361  35db					      if	(pfwidth>2)
   9362  35db		       3f 07		      .byte.b	%00111111, %00000111
   9363  35dd					      endif
   9364  35dd		       00 f8		      .byte.b	%00000000, %11111000
   9365  35df					      if	(pfwidth>2)
   9366  35df		       00 00		      .byte.b	%00000000, %00000000
   9367  35e1					      endif
   9368  35e1		       00 00		      .byte.b	%00000000, %00000000
   9369  35e3					      if	(pfwidth>2)
   9370  35e3		       00 00		      .byte.b	%00000000, %00000000
   9371  35e5					      endif
   9372  35e5		       00 00		      .byte.b	%00000000, %00000000
   9373  35e7					      if	(pfwidth>2)
   9374  35e7		       00 00		      .byte.b	%00000000, %00000000
   9375  35e9					      endif
   9376  35e9				   pflabel50
   9377  35e9		       bd bd d5 	      lda	PF_data50,x
   9378  35ec		       95 a4		      sta	playfield,x
   9379  35ee		       ca		      dex
   9380  35ef		       10 f8		      bpl	pflabel50
   9381  35f1				   .
   9382  35f1							; 
   9383  35f1
   9384  35f1				   .L0435		;  goto __Done_Next_Room bank2
   9385  35f1
   9386  35f1		       85 ee		      sta	temp7
   9387  35f3		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9388  35f5		       48		      pha
   9389  35f6		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9390  35f8		       48		      pha
   9391  35f9		       a5 ee		      lda	temp7
   9392  35fb		       48		      pha
   9393  35fc		       8a		      txa
   9394  35fd		       48		      pha
   9395  35fe		       a2 02		      ldx	#2
   9396  3600		       4c eb ff 	      jmp	BS_jsr
   9397  3603				   .
   9398  3603							; 
   9399  3603
   9400  3603				   .
   9401  3603							; 
   9402  3603
   9403  3603				   .__uI
   9404  3603							; __uI
   9405  3603
   9406  3603				   .L0436		;  playfield:
   9407  3603
   9408  3603				  -	      ifconst	pfres
   9409  3603				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9410  3603					      else
   9411  3603		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9412  3605					      endif
   9413  3605		       4c 34 d6 	      jmp	pflabel51
   9414  3608				   PF_data51
   9415  3608		       00 00		      .byte.b	%00000000, %00000000
   9416  360a					      if	(pfwidth>2)
   9417  360a		       00 00		      .byte.b	%00000000, %00000000
   9418  360c					      endif
   9419  360c		       00 00		      .byte.b	%00000000, %00000000
   9420  360e					      if	(pfwidth>2)
   9421  360e		       00 00		      .byte.b	%00000000, %00000000
   9422  3610					      endif
   9423  3610		       09 f9		      .byte.b	%00001001, %11111001
   9424  3612					      if	(pfwidth>2)
   9425  3612		       f9 09		      .byte.b	%11111001, %00001001
   9426  3614					      endif
   9427  3614		       09 19		      .byte.b	%00001001, %00011001
   9428  3616					      if	(pfwidth>2)
   9429  3616		       19 09		      .byte.b	%00011001, %00001001
   9430  3618					      endif
   9431  3618		       09 19		      .byte.b	%00001001, %00011001
   9432  361a					      if	(pfwidth>2)
   9433  361a		       19 09		      .byte.b	%00011001, %00001001
   9434  361c					      endif
   9435  361c		       09 99		      .byte.b	%00001001, %10011001
   9436  361e					      if	(pfwidth>2)
   9437  361e		       99 09		      .byte.b	%10011001, %00001001
   9438  3620					      endif
   9439  3620		       08 98		      .byte.b	%00001000, %10011000
   9440  3622					      if	(pfwidth>2)
   9441  3622		       98 08		      .byte.b	%10011000, %00001000
   9442  3624					      endif
   9443  3624		       08 98		      .byte.b	%00001000, %10011000
   9444  3626					      if	(pfwidth>2)
   9445  3626		       98 08		      .byte.b	%10011000, %00001000
   9446  3628					      endif
   9447  3628		       0f 9f		      .byte.b	%00001111, %10011111
   9448  362a					      if	(pfwidth>2)
   9449  362a		       9f 0f		      .byte.b	%10011111, %00001111
   9450  362c					      endif
   9451  362c		       00 00		      .byte.b	%00000000, %00000000
   9452  362e					      if	(pfwidth>2)
   9453  362e		       00 00		      .byte.b	%00000000, %00000000
   9454  3630					      endif
   9455  3630		       00 00		      .byte.b	%00000000, %00000000
   9456  3632					      if	(pfwidth>2)
   9457  3632		       00 00		      .byte.b	%00000000, %00000000
   9458  3634					      endif
   9459  3634				   pflabel51
   9460  3634		       bd 08 d6 	      lda	PF_data51,x
   9461  3637		       95 a4		      sta	playfield,x
   9462  3639		       ca		      dex
   9463  363a		       10 f8		      bpl	pflabel51
   9464  363c				   .
   9465  363c							; 
   9466  363c
   9467  363c				   .L0437		;  goto __Done_Next_Room bank2
   9468  363c
   9469  363c		       85 ee		      sta	temp7
   9470  363e		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9471  3640		       48		      pha
   9472  3641		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9473  3643		       48		      pha
   9474  3644		       a5 ee		      lda	temp7
   9475  3646		       48		      pha
   9476  3647		       8a		      txa
   9477  3648		       48		      pha
   9478  3649		       a2 02		      ldx	#2
   9479  364b		       4c eb ff 	      jmp	BS_jsr
   9480  364e				   .
   9481  364e							; 
   9482  364e
   9483  364e				   .
   9484  364e							; 
   9485  364e
   9486  364e				   .__uJ
   9487  364e							; __uJ
   9488  364e
   9489  364e				   .L0438		;  playfield:
   9490  364e
   9491  364e				  -	      ifconst	pfres
   9492  364e				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9493  364e					      else
   9494  364e		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9495  3650					      endif
   9496  3650		       4c 7f d6 	      jmp	pflabel52
   9497  3653				   PF_data52
   9498  3653		       00 00		      .byte.b	%00000000, %00000000
   9499  3655					      if	(pfwidth>2)
   9500  3655		       00 00		      .byte.b	%00000000, %00000000
   9501  3657					      endif
   9502  3657		       00 00		      .byte.b	%00000000, %00000000
   9503  3659					      if	(pfwidth>2)
   9504  3659		       00 00		      .byte.b	%00000000, %00000000
   9505  365b					      endif
   9506  365b		       01 03		      .byte.b	%00000001, %00000011
   9507  365d					      if	(pfwidth>2)
   9508  365d		       00 00		      .byte.b	%00000000, %00000000
   9509  365f					      endif
   9510  365f		       01 03		      .byte.b	%00000001, %00000011
   9511  3661					      if	(pfwidth>2)
   9512  3661		       00 00		      .byte.b	%00000000, %00000000
   9513  3663					      endif
   9514  3663		       01 03		      .byte.b	%00000001, %00000011
   9515  3665					      if	(pfwidth>2)
   9516  3665		       07 00		      .byte.b	%00000111, %00000000
   9517  3667					      endif
   9518  3667		       0f 1f		      .byte.b	%00001111, %00011111
   9519  3669					      if	(pfwidth>2)
   9520  3669		       07 00		      .byte.b	%00000111, %00000000
   9521  366b					      endif
   9522  366b		       0f 1f		      .byte.b	%00001111, %00011111
   9523  366d					      if	(pfwidth>2)
   9524  366d		       07 00		      .byte.b	%00000111, %00000000
   9525  366f					      endif
   9526  366f		       00 00		      .byte.b	%00000000, %00000000
   9527  3671					      if	(pfwidth>2)
   9528  3671		       3f 07		      .byte.b	%00111111, %00000111
   9529  3673					      endif
   9530  3673		       00 00		      .byte.b	%00000000, %00000000
   9531  3675					      if	(pfwidth>2)
   9532  3675		       3f 07		      .byte.b	%00111111, %00000111
   9533  3677					      endif
   9534  3677		       00 00		      .byte.b	%00000000, %00000000
   9535  3679					      if	(pfwidth>2)
   9536  3679		       00 00		      .byte.b	%00000000, %00000000
   9537  367b					      endif
   9538  367b		       00 00		      .byte.b	%00000000, %00000000
   9539  367d					      if	(pfwidth>2)
   9540  367d		       00 00		      .byte.b	%00000000, %00000000
   9541  367f					      endif
   9542  367f				   pflabel52
   9543  367f		       bd 53 d6 	      lda	PF_data52,x
   9544  3682		       95 a4		      sta	playfield,x
   9545  3684		       ca		      dex
   9546  3685		       10 f8		      bpl	pflabel52
   9547  3687				   .
   9548  3687							; 
   9549  3687
   9550  3687				   .L0439		;  goto __Done_Next_Room bank2
   9551  3687
   9552  3687		       85 ee		      sta	temp7
   9553  3689		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9554  368b		       48		      pha
   9555  368c		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9556  368e		       48		      pha
   9557  368f		       a5 ee		      lda	temp7
   9558  3691		       48		      pha
   9559  3692		       8a		      txa
   9560  3693		       48		      pha
   9561  3694		       a2 02		      ldx	#2
   9562  3696		       4c eb ff 	      jmp	BS_jsr
   9563  3699				   .
   9564  3699							; 
   9565  3699
   9566  3699				   .
   9567  3699							; 
   9568  3699
   9569  3699				   .__uK
   9570  3699							; __uK
   9571  3699
   9572  3699				   .L0440		;  playfield:
   9573  3699
   9574  3699				  -	      ifconst	pfres
   9575  3699				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9576  3699					      else
   9577  3699		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9578  369b					      endif
   9579  369b		       4c ca d6 	      jmp	pflabel53
   9580  369e				   PF_data53
   9581  369e		       00 00		      .byte.b	%00000000, %00000000
   9582  36a0					      if	(pfwidth>2)
   9583  36a0		       00 00		      .byte.b	%00000000, %00000000
   9584  36a2					      endif
   9585  36a2		       00 00		      .byte.b	%00000000, %00000000
   9586  36a4					      if	(pfwidth>2)
   9587  36a4		       00 00		      .byte.b	%00000000, %00000000
   9588  36a6					      endif
   9589  36a6		       03 7f		      .byte.b	%00000011, %01111111
   9590  36a8					      if	(pfwidth>2)
   9591  36a8		       7f 03		      .byte.b	%01111111, %00000011
   9592  36aa					      endif
   9593  36aa		       00 70		      .byte.b	%00000000, %01110000
   9594  36ac					      if	(pfwidth>2)
   9595  36ac		       70 00		      .byte.b	%01110000, %00000000
   9596  36ae					      endif
   9597  36ae		       00 70		      .byte.b	%00000000, %01110000
   9598  36b0					      if	(pfwidth>2)
   9599  36b0		       70 00		      .byte.b	%01110000, %00000000
   9600  36b2					      endif
   9601  36b2		       03 73		      .byte.b	%00000011, %01110011
   9602  36b4					      if	(pfwidth>2)
   9603  36b4		       73 03		      .byte.b	%01110011, %00000011
   9604  36b6					      endif
   9605  36b6		       03 73		      .byte.b	%00000011, %01110011
   9606  36b8					      if	(pfwidth>2)
   9607  36b8		       73 03		      .byte.b	%01110011, %00000011
   9608  36ba					      endif
   9609  36ba		       03 73		      .byte.b	%00000011, %01110011
   9610  36bc					      if	(pfwidth>2)
   9611  36bc		       73 03		      .byte.b	%01110011, %00000011
   9612  36be					      endif
   9613  36be		       03 73		      .byte.b	%00000011, %01110011
   9614  36c0					      if	(pfwidth>2)
   9615  36c0		       73 03		      .byte.b	%01110011, %00000011
   9616  36c2					      endif
   9617  36c2		       00 00		      .byte.b	%00000000, %00000000
   9618  36c4					      if	(pfwidth>2)
   9619  36c4		       00 00		      .byte.b	%00000000, %00000000
   9620  36c6					      endif
   9621  36c6		       00 00		      .byte.b	%00000000, %00000000
   9622  36c8					      if	(pfwidth>2)
   9623  36c8		       00 00		      .byte.b	%00000000, %00000000
   9624  36ca					      endif
   9625  36ca				   pflabel53
   9626  36ca		       bd 9e d6 	      lda	PF_data53,x
   9627  36cd		       95 a4		      sta	playfield,x
   9628  36cf		       ca		      dex
   9629  36d0		       10 f8		      bpl	pflabel53
   9630  36d2				   .
   9631  36d2							; 
   9632  36d2
   9633  36d2				   .L0441		;  goto __Done_Next_Room bank2
   9634  36d2
   9635  36d2		       85 ee		      sta	temp7
   9636  36d4		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9637  36d6		       48		      pha
   9638  36d7		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9639  36d9		       48		      pha
   9640  36da		       a5 ee		      lda	temp7
   9641  36dc		       48		      pha
   9642  36dd		       8a		      txa
   9643  36de		       48		      pha
   9644  36df		       a2 02		      ldx	#2
   9645  36e1		       4c eb ff 	      jmp	BS_jsr
   9646  36e4				   .
   9647  36e4							; 
   9648  36e4
   9649  36e4				   .
   9650  36e4							; 
   9651  36e4
   9652  36e4				   .__uL
   9653  36e4							; __uL
   9654  36e4
   9655  36e4				   .L0442		;  playfield:
   9656  36e4
   9657  36e4				  -	      ifconst	pfres
   9658  36e4				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9659  36e4					      else
   9660  36e4		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9661  36e6					      endif
   9662  36e6		       4c 15 d7 	      jmp	pflabel54
   9663  36e9				   PF_data54
   9664  36e9		       00 00		      .byte.b	%00000000, %00000000
   9665  36eb					      if	(pfwidth>2)
   9666  36eb		       00 00		      .byte.b	%00000000, %00000000
   9667  36ed					      endif
   9668  36ed		       00 00		      .byte.b	%00000000, %00000000
   9669  36ef					      if	(pfwidth>2)
   9670  36ef		       00 00		      .byte.b	%00000000, %00000000
   9671  36f1					      endif
   9672  36f1		       00 00		      .byte.b	%00000000, %00000000
   9673  36f3					      if	(pfwidth>2)
   9674  36f3		       00 00		      .byte.b	%00000000, %00000000
   9675  36f5					      endif
   9676  36f5		       07 ff		      .byte.b	%00000111, %11111111
   9677  36f7					      if	(pfwidth>2)
   9678  36f7		       fe 06		      .byte.b	%11111110, %00000110
   9679  36f9					      endif
   9680  36f9		       06 00		      .byte.b	%00000110, %00000000
   9681  36fb					      if	(pfwidth>2)
   9682  36fb		       00 06		      .byte.b	%00000000, %00000110
   9683  36fd					      endif
   9684  36fd		       06 00		      .byte.b	%00000110, %00000000
   9685  36ff					      if	(pfwidth>2)
   9686  36ff		       00 06		      .byte.b	%00000000, %00000110
   9687  3701					      endif
   9688  3701		       06 00		      .byte.b	%00000110, %00000000
   9689  3703					      if	(pfwidth>2)
   9690  3703		       06 06		      .byte.b	%00000110, %00000110
   9691  3705					      endif
   9692  3705		       06 00		      .byte.b	%00000110, %00000000
   9693  3707					      if	(pfwidth>2)
   9694  3707		       06 06		      .byte.b	%00000110, %00000110
   9695  3709					      endif
   9696  3709		       06 fe		      .byte.b	%00000110, %11111110
   9697  370b					      if	(pfwidth>2)
   9698  370b		       fe 06		      .byte.b	%11111110, %00000110
   9699  370d					      endif
   9700  370d		       00 00		      .byte.b	%00000000, %00000000
   9701  370f					      if	(pfwidth>2)
   9702  370f		       00 00		      .byte.b	%00000000, %00000000
   9703  3711					      endif
   9704  3711		       00 00		      .byte.b	%00000000, %00000000
   9705  3713					      if	(pfwidth>2)
   9706  3713		       00 00		      .byte.b	%00000000, %00000000
   9707  3715					      endif
   9708  3715				   pflabel54
   9709  3715		       bd e9 d6 	      lda	PF_data54,x
   9710  3718		       95 a4		      sta	playfield,x
   9711  371a		       ca		      dex
   9712  371b		       10 f8		      bpl	pflabel54
   9713  371d				   .
   9714  371d							; 
   9715  371d
   9716  371d				   .L0443		;  goto __Done_Next_Room bank2
   9717  371d
   9718  371d		       85 ee		      sta	temp7
   9719  371f		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9720  3721		       48		      pha
   9721  3722		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9722  3724		       48		      pha
   9723  3725		       a5 ee		      lda	temp7
   9724  3727		       48		      pha
   9725  3728		       8a		      txa
   9726  3729		       48		      pha
   9727  372a		       a2 02		      ldx	#2
   9728  372c		       4c eb ff 	      jmp	BS_jsr
   9729  372f				   .
   9730  372f							; 
   9731  372f
   9732  372f				   .
   9733  372f							; 
   9734  372f
   9735  372f				   .__uM
   9736  372f							; __uM
   9737  372f
   9738  372f				   .
   9739  372f							; 
   9740  372f
   9741  372f				   .L0444		;  player0x  =  49  :	player0y  =  56
   9742  372f
   9743  372f		       a9 31		      LDA	#49
   9744  3731		       85 80		      STA	player0x
   9745  3733		       a9 38		      LDA	#56
   9746  3735		       85 85		      STA	player0y
   9747  3737				   .
   9748  3737							; 
   9749  3737
   9750  3737				   .L0445		;  playfield:
   9751  3737
   9752  3737				  -	      ifconst	pfres
   9753  3737				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9754  3737					      else
   9755  3737		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9756  3739					      endif
   9757  3739		       4c 68 d7 	      jmp	pflabel55
   9758  373c				   PF_data55
   9759  373c		       00 00		      .byte.b	%00000000, %00000000
   9760  373e					      if	(pfwidth>2)
   9761  373e		       00 00		      .byte.b	%00000000, %00000000
   9762  3740					      endif
   9763  3740		       00 00		      .byte.b	%00000000, %00000000
   9764  3742					      if	(pfwidth>2)
   9765  3742		       00 00		      .byte.b	%00000000, %00000000
   9766  3744					      endif
   9767  3744		       01 ff		      .byte.b	%00000001, %11111111
   9768  3746					      if	(pfwidth>2)
   9769  3746		       00 00		      .byte.b	%00000000, %00000000
   9770  3748					      endif
   9771  3748		       07 ff		      .byte.b	%00000111, %11111111
   9772  374a					      if	(pfwidth>2)
   9773  374a		       c0 00		      .byte.b	%11000000, %00000000
   9774  374c					      endif
   9775  374c		       07 ff		      .byte.b	%00000111, %11111111
   9776  374e					      if	(pfwidth>2)
   9777  374e		       c0 00		      .byte.b	%11000000, %00000000
   9778  3750					      endif
   9779  3750		       07 ff		      .byte.b	%00000111, %11111111
   9780  3752					      if	(pfwidth>2)
   9781  3752		       c0 07		      .byte.b	%11000000, %00000111
   9782  3754					      endif
   9783  3754		       07 fc		      .byte.b	%00000111, %11111100
   9784  3756					      if	(pfwidth>2)
   9785  3756		       81 0f		      .byte.b	%10000001, %00001111
   9786  3758					      endif
   9787  3758		       03 fc		      .byte.b	%00000011, %11111100
   9788  375a					      if	(pfwidth>2)
   9789  375a		       01 0f		      .byte.b	%00000001, %00001111
   9790  375c					      endif
   9791  375c		       00 00		      .byte.b	%00000000, %00000000
   9792  375e					      if	(pfwidth>2)
   9793  375e		       00 00		      .byte.b	%00000000, %00000000
   9794  3760					      endif
   9795  3760		       00 00		      .byte.b	%00000000, %00000000
   9796  3762					      if	(pfwidth>2)
   9797  3762		       00 00		      .byte.b	%00000000, %00000000
   9798  3764					      endif
   9799  3764		       00 00		      .byte.b	%00000000, %00000000
   9800  3766					      if	(pfwidth>2)
   9801  3766		       00 00		      .byte.b	%00000000, %00000000
   9802  3768					      endif
   9803  3768				   pflabel55
   9804  3768		       bd 3c d7 	      lda	PF_data55,x
   9805  376b		       95 a4		      sta	playfield,x
   9806  376d		       ca		      dex
   9807  376e		       10 f8		      bpl	pflabel55
   9808  3770				   .
   9809  3770							; 
   9810  3770
   9811  3770				   .L0446		;  goto __Done_Next_Room bank2
   9812  3770
   9813  3770		       85 ee		      sta	temp7
   9814  3772		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9815  3774		       48		      pha
   9816  3775		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9817  3777		       48		      pha
   9818  3778		       a5 ee		      lda	temp7
   9819  377a		       48		      pha
   9820  377b		       8a		      txa
   9821  377c		       48		      pha
   9822  377d		       a2 02		      ldx	#2
   9823  377f		       4c eb ff 	      jmp	BS_jsr
   9824  3782				   .
   9825  3782							; 
   9826  3782
   9827  3782				   .
   9828  3782							; 
   9829  3782
   9830  3782				   .__uN
   9831  3782							; __uN
   9832  3782
   9833  3782				   .
   9834  3782							; 
   9835  3782
   9836  3782				   .L0447		;  player0x  =  85  :	player0y  =  56
   9837  3782
   9838  3782		       a9 55		      LDA	#85
   9839  3784		       85 80		      STA	player0x
   9840  3786		       a9 38		      LDA	#56
   9841  3788		       85 85		      STA	player0y
   9842  378a				   .
   9843  378a							; 
   9844  378a
   9845  378a				   .L0448		;  playfield:
   9846  378a
   9847  378a				  -	      ifconst	pfres
   9848  378a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9849  378a					      else
   9850  378a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9851  378c					      endif
   9852  378c		       4c bb d7 	      jmp	pflabel56
   9853  378f				   PF_data56
   9854  378f		       00 00		      .byte.b	%00000000, %00000000
   9855  3791					      if	(pfwidth>2)
   9856  3791		       00 00		      .byte.b	%00000000, %00000000
   9857  3793					      endif
   9858  3793		       00 00		      .byte.b	%00000000, %00000000
   9859  3795					      if	(pfwidth>2)
   9860  3795		       00 00		      .byte.b	%00000000, %00000000
   9861  3797					      endif
   9862  3797		       00 00		      .byte.b	%00000000, %00000000
   9863  3799					      if	(pfwidth>2)
   9864  3799		       7e 00		      .byte.b	%01111110, %00000000
   9865  379b					      endif
   9866  379b		       00 80		      .byte.b	%00000000, %10000000
   9867  379d					      if	(pfwidth>2)
   9868  379d		       ff 01		      .byte.b	%11111111, %00000001
   9869  379f					      endif
   9870  379f		       00 c0		      .byte.b	%00000000, %11000000
   9871  37a1					      if	(pfwidth>2)
   9872  37a1		       ff 03		      .byte.b	%11111111, %00000011
   9873  37a3					      endif
   9874  37a3		       06 c0		      .byte.b	%00000110, %11000000
   9875  37a5					      if	(pfwidth>2)
   9876  37a5		       ff 03		      .byte.b	%11111111, %00000011
   9877  37a7					      endif
   9878  37a7		       0f c0		      .byte.b	%00001111, %11000000
   9879  37a9					      if	(pfwidth>2)
   9880  37a9		       9f 03		      .byte.b	%10011111, %00000011
   9881  37ab					      endif
   9882  37ab		       06 80		      .byte.b	%00000110, %10000000
   9883  37ad					      if	(pfwidth>2)
   9884  37ad		       9f 01		      .byte.b	%10011111, %00000001
   9885  37af					      endif
   9886  37af		       00 00		      .byte.b	%00000000, %00000000
   9887  37b1					      if	(pfwidth>2)
   9888  37b1		       00 00		      .byte.b	%00000000, %00000000
   9889  37b3					      endif
   9890  37b3		       00 00		      .byte.b	%00000000, %00000000
   9891  37b5					      if	(pfwidth>2)
   9892  37b5		       00 00		      .byte.b	%00000000, %00000000
   9893  37b7					      endif
   9894  37b7		       00 00		      .byte.b	%00000000, %00000000
   9895  37b9					      if	(pfwidth>2)
   9896  37b9		       00 00		      .byte.b	%00000000, %00000000
   9897  37bb					      endif
   9898  37bb				   pflabel56
   9899  37bb		       bd 8f d7 	      lda	PF_data56,x
   9900  37be		       95 a4		      sta	playfield,x
   9901  37c0		       ca		      dex
   9902  37c1		       10 f8		      bpl	pflabel56
   9903  37c3				   .
   9904  37c3							; 
   9905  37c3
   9906  37c3				   .L0449		;  goto __Done_Next_Room bank2
   9907  37c3
   9908  37c3		       85 ee		      sta	temp7
   9909  37c5		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9910  37c7		       48		      pha
   9911  37c8		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9912  37ca		       48		      pha
   9913  37cb		       a5 ee		      lda	temp7
   9914  37cd		       48		      pha
   9915  37ce		       8a		      txa
   9916  37cf		       48		      pha
   9917  37d0		       a2 02		      ldx	#2
   9918  37d2		       4c eb ff 	      jmp	BS_jsr
   9919  37d5				   .
   9920  37d5							; 
   9921  37d5
   9922  37d5				   .
   9923  37d5							; 
   9924  37d5
   9925  37d5				   .__uO
   9926  37d5							; __uO
   9927  37d5
   9928  37d5				   .L0450		;  playfield:
   9929  37d5
   9930  37d5				  -	      ifconst	pfres
   9931  37d5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   9932  37d5					      else
   9933  37d5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   9934  37d7					      endif
   9935  37d7		       4c 06 d8 	      jmp	pflabel57
   9936  37da				   PF_data57
   9937  37da		       00 00		      .byte.b	%00000000, %00000000
   9938  37dc					      if	(pfwidth>2)
   9939  37dc		       00 00		      .byte.b	%00000000, %00000000
   9940  37de					      endif
   9941  37de		       00 00		      .byte.b	%00000000, %00000000
   9942  37e0					      if	(pfwidth>2)
   9943  37e0		       00 00		      .byte.b	%00000000, %00000000
   9944  37e2					      endif
   9945  37e2		       00 00		      .byte.b	%00000000, %00000000
   9946  37e4					      if	(pfwidth>2)
   9947  37e4		       07 03		      .byte.b	%00000111, %00000011
   9948  37e6					      endif
   9949  37e6		       00 00		      .byte.b	%00000000, %00000000
   9950  37e8					      if	(pfwidth>2)
   9951  37e8		       0f 07		      .byte.b	%00001111, %00000111
   9952  37ea					      endif
   9953  37ea		       01 0f		      .byte.b	%00000001, %00001111
   9954  37ec					      if	(pfwidth>2)
   9955  37ec		       1f 07		      .byte.b	%00011111, %00000111
   9956  37ee					      endif
   9957  37ee		       03 1f		      .byte.b	%00000011, %00011111
   9958  37f0					      if	(pfwidth>2)
   9959  37f0		       1f 03		      .byte.b	%00011111, %00000011
   9960  37f2					      endif
   9961  37f2		       03 3f		      .byte.b	%00000011, %00111111
   9962  37f4					      if	(pfwidth>2)
   9963  37f4		       0f 01		      .byte.b	%00001111, %00000001
   9964  37f6					      endif
   9965  37f6		       01 3f		      .byte.b	%00000001, %00111111
   9966  37f8					      if	(pfwidth>2)
   9967  37f8		       00 00		      .byte.b	%00000000, %00000000
   9968  37fa					      endif
   9969  37fa		       00 1f		      .byte.b	%00000000, %00011111
   9970  37fc					      if	(pfwidth>2)
   9971  37fc		       00 00		      .byte.b	%00000000, %00000000
   9972  37fe					      endif
   9973  37fe		       00 00		      .byte.b	%00000000, %00000000
   9974  3800					      if	(pfwidth>2)
   9975  3800		       00 00		      .byte.b	%00000000, %00000000
   9976  3802					      endif
   9977  3802		       00 00		      .byte.b	%00000000, %00000000
   9978  3804					      if	(pfwidth>2)
   9979  3804		       00 00		      .byte.b	%00000000, %00000000
   9980  3806					      endif
   9981  3806				   pflabel57
   9982  3806		       bd da d7 	      lda	PF_data57,x
   9983  3809		       95 a4		      sta	playfield,x
   9984  380b		       ca		      dex
   9985  380c		       10 f8		      bpl	pflabel57
   9986  380e				   .
   9987  380e							; 
   9988  380e
   9989  380e				   .L0451		;  goto __Done_Next_Room bank2
   9990  380e
   9991  380e		       85 ee		      sta	temp7
   9992  3810		       a9 b1		      lda	#>(.__Done_Next_Room-1)
   9993  3812		       48		      pha
   9994  3813		       a9 10		      lda	#<(.__Done_Next_Room-1)
   9995  3815		       48		      pha
   9996  3816		       a5 ee		      lda	temp7
   9997  3818		       48		      pha
   9998  3819		       8a		      txa
   9999  381a		       48		      pha
  10000  381b		       a2 02		      ldx	#2
  10001  381d		       4c eb ff 	      jmp	BS_jsr
  10002  3820				   .
  10003  3820							; 
  10004  3820
  10005  3820				   .
  10006  3820							; 
  10007  3820
  10008  3820				   .__uP
  10009  3820							; __uP
  10010  3820
  10011  3820				   .L0452		;  playfield:
  10012  3820
  10013  3820				  -	      ifconst	pfres
  10014  3820				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  10015  3820					      else
  10016  3820		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  10017  3822					      endif
  10018  3822		       4c 51 d8 	      jmp	pflabel58
  10019  3825				   PF_data58
  10020  3825		       00 00		      .byte.b	%00000000, %00000000
  10021  3827					      if	(pfwidth>2)
  10022  3827		       00 00		      .byte.b	%00000000, %00000000
  10023  3829					      endif
  10024  3829		       00 00		      .byte.b	%00000000, %00000000
  10025  382b					      if	(pfwidth>2)
  10026  382b		       00 00		      .byte.b	%00000000, %00000000
  10027  382d					      endif
  10028  382d		       07 fc		      .byte.b	%00000111, %11111100
  10029  382f					      if	(pfwidth>2)
  10030  382f		       fc 07		      .byte.b	%11111100, %00000111
  10031  3831					      endif
  10032  3831		       07 fc		      .byte.b	%00000111, %11111100
  10033  3833					      if	(pfwidth>2)
  10034  3833		       fc 07		      .byte.b	%11111100, %00000111
  10035  3835					      endif
  10036  3835		       07 fc		      .byte.b	%00000111, %11111100
  10037  3837					      if	(pfwidth>2)
  10038  3837		       fc 07		      .byte.b	%11111100, %00000111
  10039  3839					      endif
  10040  3839		       07 00		      .byte.b	%00000111, %00000000
  10041  383b					      if	(pfwidth>2)
  10042  383b		       00 07		      .byte.b	%00000000, %00000111
  10043  383d					      endif
  10044  383d		       07 00		      .byte.b	%00000111, %00000000
  10045  383f					      if	(pfwidth>2)
  10046  383f		       00 07		      .byte.b	%00000000, %00000111
  10047  3841					      endif
  10048  3841		       07 ff		      .byte.b	%00000111, %11111111
  10049  3843					      if	(pfwidth>2)
  10050  3843		       ff 07		      .byte.b	%11111111, %00000111
  10051  3845					      endif
  10052  3845		       00 00		      .byte.b	%00000000, %00000000
  10053  3847					      if	(pfwidth>2)
  10054  3847		       00 00		      .byte.b	%00000000, %00000000
  10055  3849					      endif
  10056  3849		       00 00		      .byte.b	%00000000, %00000000
  10057  384b					      if	(pfwidth>2)
  10058  384b		       00 00		      .byte.b	%00000000, %00000000
  10059  384d					      endif
  10060  384d		       00 00		      .byte.b	%00000000, %00000000
  10061  384f					      if	(pfwidth>2)
  10062  384f		       00 00		      .byte.b	%00000000, %00000000
  10063  3851					      endif
  10064  3851				   pflabel58
  10065  3851		       bd 25 d8 	      lda	PF_data58,x
  10066  3854		       95 a4		      sta	playfield,x
  10067  3856		       ca		      dex
  10068  3857		       10 f8		      bpl	pflabel58
  10069  3859				   .
  10070  3859							; 
  10071  3859
  10072  3859				   .L0453		;  goto __Done_Next_Room bank2
  10073  3859
  10074  3859		       85 ee		      sta	temp7
  10075  385b		       a9 b1		      lda	#>(.__Done_Next_Room-1)
  10076  385d		       48		      pha
  10077  385e		       a9 10		      lda	#<(.__Done_Next_Room-1)
  10078  3860		       48		      pha
  10079  3861		       a5 ee		      lda	temp7
  10080  3863		       48		      pha
  10081  3864		       8a		      txa
  10082  3865		       48		      pha
  10083  3866		       a2 02		      ldx	#2
  10084  3868		       4c eb ff 	      jmp	BS_jsr
  10085  386b				   .
  10086  386b							; 
  10087  386b
  10088  386b				   .
  10089  386b							; 
  10090  386b
  10091  386b				   .__uQ
  10092  386b							; __uQ
  10093  386b
  10094  386b				   .L0454		;  playfield:
  10095  386b
  10096  386b				  -	      ifconst	pfres
  10097  386b				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  10098  386b					      else
  10099  386b		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  10100  386d					      endif
  10101  386d		       4c 9c d8 	      jmp	pflabel59
  10102  3870				   PF_data59
  10103  3870		       00 00		      .byte.b	%00000000, %00000000
  10104  3872					      if	(pfwidth>2)
  10105  3872		       00 00		      .byte.b	%00000000, %00000000
  10106  3874					      endif
  10107  3874		       00 00		      .byte.b	%00000000, %00000000
  10108  3876					      if	(pfwidth>2)
  10109  3876		       00 00		      .byte.b	%00000000, %00000000
  10110  3878					      endif
  10111  3878		       00 0e		      .byte.b	%00000000, %00001110
  10112  387a					      if	(pfwidth>2)
  10113  387a		       0e 00		      .byte.b	%00001110, %00000000
  10114  387c					      endif
  10115  387c		       01 3f		      .byte.b	%00000001, %00111111
  10116  387e					      if	(pfwidth>2)
  10117  387e		       3f 01		      .byte.b	%00111111, %00000001
  10118  3880					      endif
  10119  3880		       01 31		      .byte.b	%00000001, %00110001
  10120  3882					      if	(pfwidth>2)
  10121  3882		       31 01		      .byte.b	%00110001, %00000001
  10122  3884					      endif
  10123  3884		       01 31		      .byte.b	%00000001, %00110001
  10124  3886					      if	(pfwidth>2)
  10125  3886		       31 01		      .byte.b	%00110001, %00000001
  10126  3888					      endif
  10127  3888		       01 31		      .byte.b	%00000001, %00110001
  10128  388a					      if	(pfwidth>2)
  10129  388a		       31 01		      .byte.b	%00110001, %00000001
  10130  388c					      endif
  10131  388c		       01 3f		      .byte.b	%00000001, %00111111
  10132  388e					      if	(pfwidth>2)
  10133  388e		       3f 01		      .byte.b	%00111111, %00000001
  10134  3890					      endif
  10135  3890		       00 0e		      .byte.b	%00000000, %00001110
  10136  3892					      if	(pfwidth>2)
  10137  3892		       0e 00		      .byte.b	%00001110, %00000000
  10138  3894					      endif
  10139  3894		       00 00		      .byte.b	%00000000, %00000000
  10140  3896					      if	(pfwidth>2)
  10141  3896		       00 00		      .byte.b	%00000000, %00000000
  10142  3898					      endif
  10143  3898		       00 00		      .byte.b	%00000000, %00000000
  10144  389a					      if	(pfwidth>2)
  10145  389a		       00 00		      .byte.b	%00000000, %00000000
  10146  389c					      endif
  10147  389c				   pflabel59
  10148  389c		       bd 70 d8 	      lda	PF_data59,x
  10149  389f		       95 a4		      sta	playfield,x
  10150  38a1		       ca		      dex
  10151  38a2		       10 f8		      bpl	pflabel59
  10152  38a4				   .
  10153  38a4							; 
  10154  38a4
  10155  38a4				   .L0455		;  goto __Done_Next_Room bank2
  10156  38a4
  10157  38a4		       85 ee		      sta	temp7
  10158  38a6		       a9 b1		      lda	#>(.__Done_Next_Room-1)
  10159  38a8		       48		      pha
  10160  38a9		       a9 10		      lda	#<(.__Done_Next_Room-1)
  10161  38ab		       48		      pha
  10162  38ac		       a5 ee		      lda	temp7
  10163  38ae		       48		      pha
  10164  38af		       8a		      txa
  10165  38b0		       48		      pha
  10166  38b1		       a2 02		      ldx	#2
  10167  38b3		       4c eb ff 	      jmp	BS_jsr
  10168  38b6				   .
  10169  38b6							; 
  10170  38b6
  10171  38b6				   .
  10172  38b6							; 
  10173  38b6
  10174  38b6				   .__uR
  10175  38b6							; __uR
  10176  38b6
  10177  38b6				   .L0456		;  playfield:
  10178  38b6
  10179  38b6				  -	      ifconst	pfres
  10180  38b6				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  10181  38b6					      else
  10182  38b6		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  10183  38b8					      endif
  10184  38b8		       4c e7 d8 	      jmp	pflabel60
  10185  38bb				   PF_data60
  10186  38bb		       00 00		      .byte.b	%00000000, %00000000
  10187  38bd					      if	(pfwidth>2)
  10188  38bd		       00 00		      .byte.b	%00000000, %00000000
  10189  38bf					      endif
  10190  38bf		       00 00		      .byte.b	%00000000, %00000000
  10191  38c1					      if	(pfwidth>2)
  10192  38c1		       00 00		      .byte.b	%00000000, %00000000
  10193  38c3					      endif
  10194  38c3		       07 79		      .byte.b	%00000111, %01111001
  10195  38c5					      if	(pfwidth>2)
  10196  38c5		       7f 07		      .byte.b	%01111111, %00000111
  10197  38c7					      endif
  10198  38c7		       07 79		      .byte.b	%00000111, %01111001
  10199  38c9					      if	(pfwidth>2)
  10200  38c9		       7f 07		      .byte.b	%01111111, %00000111
  10201  38cb					      endif
  10202  38cb		       01 19		      .byte.b	%00000001, %00011001
  10203  38cd					      if	(pfwidth>2)
  10204  38cd		       00 00		      .byte.b	%00000000, %00000000
  10205  38cf					      endif
  10206  38cf		       01 19		      .byte.b	%00000001, %00011001
  10207  38d1					      if	(pfwidth>2)
  10208  38d1		       00 00		      .byte.b	%00000000, %00000000
  10209  38d3					      endif
  10210  38d3		       07 79		      .byte.b	%00000111, %01111001
  10211  38d5					      if	(pfwidth>2)
  10212  38d5		       7f 07		      .byte.b	%01111111, %00000111
  10213  38d7					      endif
  10214  38d7		       07 79		      .byte.b	%00000111, %01111001
  10215  38d9					      if	(pfwidth>2)
  10216  38d9		       7f 07		      .byte.b	%01111111, %00000111
  10217  38db					      endif
  10218  38db		       00 00		      .byte.b	%00000000, %00000000
  10219  38dd					      if	(pfwidth>2)
  10220  38dd		       00 00		      .byte.b	%00000000, %00000000
  10221  38df					      endif
  10222  38df		       00 00		      .byte.b	%00000000, %00000000
  10223  38e1					      if	(pfwidth>2)
  10224  38e1		       00 00		      .byte.b	%00000000, %00000000
  10225  38e3					      endif
  10226  38e3		       00 00		      .byte.b	%00000000, %00000000
  10227  38e5					      if	(pfwidth>2)
  10228  38e5		       00 00		      .byte.b	%00000000, %00000000
  10229  38e7					      endif
  10230  38e7				   pflabel60
  10231  38e7		       bd bb d8 	      lda	PF_data60,x
  10232  38ea		       95 a4		      sta	playfield,x
  10233  38ec		       ca		      dex
  10234  38ed		       10 f8		      bpl	pflabel60
  10235  38ef				   .
  10236  38ef							; 
  10237  38ef
  10238  38ef				   .L0457		;  goto __Done_Next_Room bank2
  10239  38ef
  10240  38ef		       85 ee		      sta	temp7
  10241  38f1		       a9 b1		      lda	#>(.__Done_Next_Room-1)
  10242  38f3		       48		      pha
  10243  38f4		       a9 10		      lda	#<(.__Done_Next_Room-1)
  10244  38f6		       48		      pha
  10245  38f7		       a5 ee		      lda	temp7
  10246  38f9		       48		      pha
  10247  38fa		       8a		      txa
  10248  38fb		       48		      pha
  10249  38fc		       a2 02		      ldx	#2
  10250  38fe		       4c eb ff 	      jmp	BS_jsr
  10251  3901				   .
  10252  3901							; 
  10253  3901
  10254  3901				   .
  10255  3901							; 
  10256  3901
  10257  3901				   .__uS
  10258  3901							; __uS
  10259  3901
  10260  3901				   .L0458		;  playfield:
  10261  3901
  10262  3901				  -	      ifconst	pfres
  10263  3901				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  10264  3901					      else
  10265  3901		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  10266  3903					      endif
  10267  3903		       4c 32 d9 	      jmp	pflabel61
  10268  3906				   PF_data61
  10269  3906		       00 00		      .byte.b	%00000000, %00000000
  10270  3908					      if	(pfwidth>2)
  10271  3908		       00 00		      .byte.b	%00000000, %00000000
  10272  390a					      endif
  10273  390a		       00 00		      .byte.b	%00000000, %00000000
  10274  390c					      if	(pfwidth>2)
  10275  390c		       00 00		      .byte.b	%00000000, %00000000
  10276  390e					      endif
  10277  390e		       07 7f		      .byte.b	%00000111, %01111111
  10278  3910					      if	(pfwidth>2)
  10279  3910		       7f 07		      .byte.b	%01111111, %00000111
  10280  3912					      endif
  10281  3912		       07 7f		      .byte.b	%00000111, %01111111
  10282  3914					      if	(pfwidth>2)
  10283  3914		       7f 07		      .byte.b	%01111111, %00000111
  10284  3916					      endif
  10285  3916		       00 70		      .byte.b	%00000000, %01110000
  10286  3918					      if	(pfwidth>2)
  10287  3918		       70 00		      .byte.b	%01110000, %00000000
  10288  391a					      endif
  10289  391a		       00 70		      .byte.b	%00000000, %01110000
  10290  391c					      if	(pfwidth>2)
  10291  391c		       70 00		      .byte.b	%01110000, %00000000
  10292  391e					      endif
  10293  391e		       07 7f		      .byte.b	%00000111, %01111111
  10294  3920					      if	(pfwidth>2)
  10295  3920		       7f 07		      .byte.b	%01111111, %00000111
  10296  3922					      endif
  10297  3922		       00 78		      .byte.b	%00000000, %01111000
  10298  3924					      if	(pfwidth>2)
  10299  3924		       78 00		      .byte.b	%01111000, %00000000
  10300  3926					      endif
  10301  3926		       00 70		      .byte.b	%00000000, %01110000
  10302  3928					      if	(pfwidth>2)
  10303  3928		       70 00		      .byte.b	%01110000, %00000000
  10304  392a					      endif
  10305  392a		       00 00		      .byte.b	%00000000, %00000000
  10306  392c					      if	(pfwidth>2)
  10307  392c		       00 00		      .byte.b	%00000000, %00000000
  10308  392e					      endif
  10309  392e		       00 00		      .byte.b	%00000000, %00000000
  10310  3930					      if	(pfwidth>2)
  10311  3930		       00 00		      .byte.b	%00000000, %00000000
  10312  3932					      endif
  10313  3932				   pflabel61
  10314  3932		       bd 06 d9 	      lda	PF_data61,x
  10315  3935		       95 a4		      sta	playfield,x
  10316  3937		       ca		      dex
  10317  3938		       10 f8		      bpl	pflabel61
  10318  393a				   .
  10319  393a							; 
  10320  393a
  10321  393a				   .L0459		;  goto __Done_Next_Room bank2
  10322  393a
  10323  393a		       85 ee		      sta	temp7
  10324  393c		       a9 b1		      lda	#>(.__Done_Next_Room-1)
  10325  393e		       48		      pha
  10326  393f		       a9 10		      lda	#<(.__Done_Next_Room-1)
  10327  3941		       48		      pha
  10328  3942		       a5 ee		      lda	temp7
  10329  3944		       48		      pha
  10330  3945		       8a		      txa
  10331  3946		       48		      pha
  10332  3947		       a2 02		      ldx	#2
  10333  3949		       4c eb ff 	      jmp	BS_jsr
  10334  394c				   .
  10335  394c							; 
  10336  394c
  10337  394c				   .
  10338  394c							; 
  10339  394c
  10340  394c				   .__uT
  10341  394c							; __uT
  10342  394c
  10343  394c				   .L0460		;  playfield:
  10344  394c
  10345  394c				  -	      ifconst	pfres
  10346  394c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  10347  394c					      else
  10348  394c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  10349  394e					      endif
  10350  394e		       4c 7d d9 	      jmp	pflabel62
  10351  3951				   PF_data62
  10352  3951		       00 00		      .byte.b	%00000000, %00000000
  10353  3953					      if	(pfwidth>2)
  10354  3953		       00 00		      .byte.b	%00000000, %00000000
  10355  3955					      endif
  10356  3955		       00 00		      .byte.b	%00000000, %00000000
  10357  3957					      if	(pfwidth>2)
  10358  3957		       00 00		      .byte.b	%00000000, %00000000
  10359  3959					      endif
  10360  3959		       07 7c		      .byte.b	%00000111, %01111100
  10361  395b					      if	(pfwidth>2)
  10362  395b		       7c 07		      .byte.b	%01111100, %00000111
  10363  395d					      endif
  10364  395d		       07 7c		      .byte.b	%00000111, %01111100
  10365  395f					      if	(pfwidth>2)
  10366  395f		       7c 07		      .byte.b	%01111100, %00000111
  10367  3961					      endif
  10368  3961		       00 44		      .byte.b	%00000000, %01000100
  10369  3963					      if	(pfwidth>2)
  10370  3963		       44 00		      .byte.b	%01000100, %00000000
  10371  3965					      endif
  10372  3965		       00 44		      .byte.b	%00000000, %01000100
  10373  3967					      if	(pfwidth>2)
  10374  3967		       44 00		      .byte.b	%01000100, %00000000
  10375  3969					      endif
  10376  3969		       07 7c		      .byte.b	%00000111, %01111100
  10377  396b					      if	(pfwidth>2)
  10378  396b		       7c 07		      .byte.b	%01111100, %00000111
  10379  396d					      endif
  10380  396d		       07 7c		      .byte.b	%00000111, %01111100
  10381  396f					      if	(pfwidth>2)
  10382  396f		       7c 07		      .byte.b	%01111100, %00000111
  10383  3971					      endif
  10384  3971		       07 7c		      .byte.b	%00000111, %01111100
  10385  3973					      if	(pfwidth>2)
  10386  3973		       7c 07		      .byte.b	%01111100, %00000111
  10387  3975					      endif
  10388  3975		       00 00		      .byte.b	%00000000, %00000000
  10389  3977					      if	(pfwidth>2)
  10390  3977		       00 00		      .byte.b	%00000000, %00000000
  10391  3979					      endif
  10392  3979		       00 00		      .byte.b	%00000000, %00000000
  10393  397b					      if	(pfwidth>2)
  10394  397b		       00 00		      .byte.b	%00000000, %00000000
  10395  397d					      endif
  10396  397d				   pflabel62
  10397  397d		       bd 51 d9 	      lda	PF_data62,x
  10398  3980		       95 a4		      sta	playfield,x
  10399  3982		       ca		      dex
  10400  3983		       10 f8		      bpl	pflabel62
  10401  3985				   .
  10402  3985							; 
  10403  3985
  10404  3985				   .L0461		;  goto __Done_Next_Room bank2
  10405  3985
  10406  3985		       85 ee		      sta	temp7
  10407  3987		       a9 b1		      lda	#>(.__Done_Next_Room-1)
  10408  3989		       48		      pha
  10409  398a		       a9 10		      lda	#<(.__Done_Next_Room-1)
  10410  398c		       48		      pha
  10411  398d		       a5 ee		      lda	temp7
  10412  398f		       48		      pha
  10413  3990		       8a		      txa
  10414  3991		       48		      pha
  10415  3992		       a2 02		      ldx	#2
  10416  3994		       4c eb ff 	      jmp	BS_jsr
  10417  3997				   .
  10418  3997							; 
  10419  3997
  10420  3997				   .
  10421  3997							; 
  10422  3997
  10423  3997				   .__uU
  10424  3997							; __uU
  10425  3997
  10426  3997				   .L0462		;  playfield:
  10427  3997
  10428  3997				  -	      ifconst	pfres
  10429  3997				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  10430  3997					      else
  10431  3997		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  10432  3999					      endif
  10433  3999		       4c c8 d9 	      jmp	pflabel63
  10434  399c				   PF_data63
  10435  399c		       00 00		      .byte.b	%00000000, %00000000
  10436  399e					      if	(pfwidth>2)
  10437  399e		       00 00		      .byte.b	%00000000, %00000000
  10438  39a0					      endif
  10439  39a0		       00 00		      .byte.b	%00000000, %00000000
  10440  39a2					      if	(pfwidth>2)
  10441  39a2		       00 00		      .byte.b	%00000000, %00000000
  10442  39a4					      endif
  10443  39a4		       00 67		      .byte.b	%00000000, %01100111
  10444  39a6					      if	(pfwidth>2)
  10445  39a6		       67 00		      .byte.b	%01100111, %00000000
  10446  39a8					      endif
  10447  39a8		       03 67		      .byte.b	%00000011, %01100111
  10448  39aa					      if	(pfwidth>2)
  10449  39aa		       67 03		      .byte.b	%01100111, %00000011
  10450  39ac					      endif
  10451  39ac		       07 67		      .byte.b	%00000111, %01100111
  10452  39ae					      if	(pfwidth>2)
  10453  39ae		       67 07		      .byte.b	%01100111, %00000111
  10454  39b0					      endif
  10455  39b0		       0f 67		      .byte.b	%00001111, %01100111
  10456  39b2					      if	(pfwidth>2)
  10457  39b2		       67 0f		      .byte.b	%01100111, %00001111
  10458  39b4					      endif
  10459  39b4		       07 67		      .byte.b	%00000111, %01100111
  10460  39b6					      if	(pfwidth>2)
  10461  39b6		       67 07		      .byte.b	%01100111, %00000111
  10462  39b8					      endif
  10463  39b8		       03 67		      .byte.b	%00000011, %01100111
  10464  39ba					      if	(pfwidth>2)
  10465  39ba		       67 03		      .byte.b	%01100111, %00000011
  10466  39bc					      endif
  10467  39bc		       00 67		      .byte.b	%00000000, %01100111
  10468  39be					      if	(pfwidth>2)
  10469  39be		       67 00		      .byte.b	%01100111, %00000000
  10470  39c0					      endif
  10471  39c0		       00 00		      .byte.b	%00000000, %00000000
  10472  39c2					      if	(pfwidth>2)
  10473  39c2		       00 00		      .byte.b	%00000000, %00000000
  10474  39c4					      endif
  10475  39c4		       00 00		      .byte.b	%00000000, %00000000
  10476  39c6					      if	(pfwidth>2)
  10477  39c6		       00 00		      .byte.b	%00000000, %00000000
  10478  39c8					      endif
  10479  39c8				   pflabel63
  10480  39c8		       bd 9c d9 	      lda	PF_data63,x
  10481  39cb		       95 a4		      sta	playfield,x
  10482  39cd		       ca		      dex
  10483  39ce		       10 f8		      bpl	pflabel63
  10484  39d0				   .
  10485  39d0							; 
  10486  39d0
  10487  39d0				   .L0463		;  goto __Done_Next_Room bank2
  10488  39d0
  10489  39d0		       85 ee		      sta	temp7
  10490  39d2		       a9 b1		      lda	#>(.__Done_Next_Room-1)
  10491  39d4		       48		      pha
  10492  39d5		       a9 10		      lda	#<(.__Done_Next_Room-1)
  10493  39d7		       48		      pha
  10494  39d8		       a5 ee		      lda	temp7
  10495  39da		       48		      pha
  10496  39db		       8a		      txa
  10497  39dc		       48		      pha
  10498  39dd		       a2 02		      ldx	#2
  10499  39df		       4c eb ff 	      jmp	BS_jsr
  10500  39e2				   .
  10501  39e2							; 
  10502  39e2
  10503  39e2				   .
  10504  39e2							; 
  10505  39e2
  10506  39e2				   .__uV
  10507  39e2							; __uV
  10508  39e2
  10509  39e2				   .L0464		;  playfield:
  10510  39e2
  10511  39e2				  -	      ifconst	pfres
  10512  39e2				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
  10513  39e2					      else
  10514  39e2		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
  10515  39e4					      endif
  10516  39e4		       4c 13 da 	      jmp	pflabel64
  10517  39e7				   PF_data64
  10518  39e7		       00 00		      .byte.b	%00000000, %00000000
  10519  39e9					      if	(pfwidth>2)
  10520  39e9		       00 00		      .byte.b	%00000000, %00000000
  10521  39eb					      endif
  10522  39eb		       00 00		      .byte.b	%00000000, %00000000
  10523  39ed					      if	(pfwidth>2)
  10524  39ed		       00 00		      .byte.b	%00000000, %00000000
  10525  39ef					      endif
  10526  39ef		       07 7f		      .byte.b	%00000111, %01111111
  10527  39f1					      if	(pfwidth>2)
  10528  39f1		       7f 07		      .byte.b	%01111111, %00000111
  10529  39f3					      endif
  10530  39f3		       06 40		      .byte.b	%00000110, %01000000
  10531  39f5					      if	(pfwidth>2)
  10532  39f5		       40 06		      .byte.b	%01000000, %00000110
  10533  39f7					      endif
  10534  39f7		       06 40		      .byte.b	%00000110, %01000000
  10535  39f9					      if	(pfwidth>2)
  10536  39f9		       40 06		      .byte.b	%01000000, %00000110
  10537  39fb					      endif
  10538  39fb		       00 40		      .byte.b	%00000000, %01000000
  10539  39fd					      if	(pfwidth>2)
  10540  39fd		       40 00		      .byte.b	%01000000, %00000000
  10541  39ff					      endif
  10542  39ff		       00 40		      .byte.b	%00000000, %01000000
  10543  3a01					      if	(pfwidth>2)
  10544  3a01		       40 00		      .byte.b	%01000000, %00000000
  10545  3a03					      endif
  10546  3a03		       06 40		      .byte.b	%00000110, %01000000
  10547  3a05					      if	(pfwidth>2)
  10548  3a05		       40 06		      .byte.b	%01000000, %00000110
  10549  3a07					      endif
  10550  3a07		       07 7f		      .byte.b	%00000111, %01111111
  10551  3a09					      if	(pfwidth>2)
  10552  3a09		       7f 07		      .byte.b	%01111111, %00000111
  10553  3a0b					      endif
  10554  3a0b		       00 00		      .byte.b	%00000000, %00000000
  10555  3a0d					      if	(pfwidth>2)
  10556  3a0d		       00 00		      .byte.b	%00000000, %00000000
  10557  3a0f					      endif
  10558  3a0f		       00 00		      .byte.b	%00000000, %00000000
  10559  3a11					      if	(pfwidth>2)
  10560  3a11		       00 00		      .byte.b	%00000000, %00000000
  10561  3a13					      endif
  10562  3a13				   pflabel64
  10563  3a13		       bd e7 d9 	      lda	PF_data64,x
  10564  3a16		       95 a4		      sta	playfield,x
  10565  3a18		       ca		      dex
  10566  3a19		       10 f8		      bpl	pflabel64
  10567  3a1b				   .
  10568  3a1b							; 
  10569  3a1b
  10570  3a1b				   .L0465		;  goto __Done_Next_Room bank2
  10571  3a1b
  10572  3a1b		       85 ee		      sta	temp7
  10573  3a1d		       a9 b1		      lda	#>(.__Done_Next_Room-1)
  10574  3a1f		       48		      pha
  10575  3a20		       a9 10		      lda	#<(.__Done_Next_Room-1)
  10576  3a22		       48		      pha
  10577  3a23		       a5 ee		      lda	temp7
  10578  3a25		       48		      pha
  10579  3a26		       8a		      txa
  10580  3a27		       48		      pha
  10581  3a28		       a2 02		      ldx	#2
  10582  3a2a		       4c eb ff 	      jmp	BS_jsr
  10583  3a2d				   .
  10584  3a2d							; 
  10585  3a2d
  10586  3a2d				   .
  10587  3a2d							; 
  10588  3a2d
  10589  3a2d				   .
  10590  3a2d							; 
  10591  3a2d
  10592  3a2d				   .
  10593  3a2d							; 
  10594  3a2d
  10595  3a2d				   .
  10596  3a2d							; 
  10597  3a2d
  10598  3a2d				   .
  10599  3a2d							; 
  10600  3a2d
  10601  3a2d				   .
  10602  3a2d							; 
  10603  3a2d
  10604  3a2d				   .
  10605  3a2d							; 
  10606  3a2d
  10607  3a2d				   .
  10608  3a2d							; 
  10609  3a2d
  10610  3a2d				   .
  10611  3a2d							; 
  10612  3a2d
  10613  3a2d				   .L0466		;  data _Data_Under_Background_Color
  10614  3a2d
  10615  3a2d		       4c 50 da 	      JMP	.skipL0466
  10616  3a30				   _Data_Under_Background_Color
  10617  3a30		       00		      .byte.b	_00
  10618  3a31
  10619  3a31		       00		      .byte.b	_00
  10620  3a32
  10621  3a32		       02		      .byte.b	_02
  10622  3a33
  10623  3a33		       02		      .byte.b	_02
  10624  3a34
  10625  3a34		       00		      .byte.b	_00
  10626  3a35
  10627  3a35		       00		      .byte.b	_00
  10628  3a36
  10629  3a36		       02		      .byte.b	_02
  10630  3a37
  10631  3a37		       02		      .byte.b	_02
  10632  3a38
  10633  3a38		       00		      .byte.b	_00
  10634  3a39
  10635  3a39		       00		      .byte.b	_00
  10636  3a3a
  10637  3a3a		       02		      .byte.b	_02
  10638  3a3b
  10639  3a3b		       02		      .byte.b	_02
  10640  3a3c
  10641  3a3c		       00		      .byte.b	_00
  10642  3a3d
  10643  3a3d		       00		      .byte.b	_00
  10644  3a3e
  10645  3a3e		       02		      .byte.b	_02
  10646  3a3f
  10647  3a3f		       02		      .byte.b	_02
  10648  3a40
  10649  3a40		       00		      .byte.b	_00
  10650  3a41
  10651  3a41		       00		      .byte.b	_00
  10652  3a42
  10653  3a42		       02		      .byte.b	_02
  10654  3a43
  10655  3a43		       02		      .byte.b	_02
  10656  3a44
  10657  3a44		       00		      .byte.b	_00
  10658  3a45
  10659  3a45		       00		      .byte.b	_00
  10660  3a46
  10661  3a46		       02		      .byte.b	_02
  10662  3a47
  10663  3a47		       02		      .byte.b	_02
  10664  3a48
  10665  3a48		       00		      .byte.b	_00
  10666  3a49
  10667  3a49		       00		      .byte.b	_00
  10668  3a4a
  10669  3a4a		       02		      .byte.b	_02
  10670  3a4b
  10671  3a4b		       02		      .byte.b	_02
  10672  3a4c
  10673  3a4c		       00		      .byte.b	_00
  10674  3a4d
  10675  3a4d		       00		      .byte.b	_00
  10676  3a4e
  10677  3a4e		       02		      .byte.b	_02
  10678  3a4f
  10679  3a4f		       02		      .byte.b	_02
  10680  3a50
  10681  3a50				   .skipL0466
  10682  3a50				   .
  10683  3a50							; 
  10684  3a50
  10685  3a50				   .
  10686  3a50							; 
  10687  3a50
  10688  3a50				   .
  10689  3a50							; 
  10690  3a50
  10691  3a50				   .
  10692  3a50							; 
  10693  3a50
  10694  3a50				   .
  10695  3a50							; 
  10696  3a50
  10697  3a50				   .
  10698  3a50							; 
  10699  3a50
  10700  3a50				   .
  10701  3a50							; 
  10702  3a50
  10703  3a50				   .
  10704  3a50							; 
  10705  3a50
  10706  3a50				   .L0467		;  data _Data_Under_Foreground_Color
  10707  3a50
  10708  3a50		       4c 73 da 	      JMP	.skipL0467
  10709  3a53				   _Data_Under_Foreground_Color
  10710  3a53		       b6		      .byte.b	_B6
  10711  3a54
  10712  3a54		       36		      .byte.b	_36
  10713  3a55
  10714  3a55		       e6		      .byte.b	_E6
  10715  3a56
  10716  3a56		       06		      .byte.b	_06
  10717  3a57
  10718  3a57		       16		      .byte.b	_16
  10719  3a58
  10720  3a58		       b6		      .byte.b	_B6
  10721  3a59
  10722  3a59		       c6		      .byte.b	_C6
  10723  3a5a
  10724  3a5a		       96		      .byte.b	_96
  10725  3a5b
  10726  3a5b		       96		      .byte.b	_96
  10727  3a5c
  10728  3a5c		       66		      .byte.b	_66
  10729  3a5d
  10730  3a5d		       c6		      .byte.b	_C6
  10731  3a5e
  10732  3a5e		       36		      .byte.b	_36
  10733  3a5f
  10734  3a5f		       06		      .byte.b	_06
  10735  3a60
  10736  3a60		       96		      .byte.b	_96
  10737  3a61
  10738  3a61		       c6		      .byte.b	_C6
  10739  3a62
  10740  3a62		       26		      .byte.b	_26
  10741  3a63
  10742  3a63		       16		      .byte.b	_16
  10743  3a64
  10744  3a64		       96		      .byte.b	_96
  10745  3a65
  10746  3a65		       b6		      .byte.b	_B6
  10747  3a66
  10748  3a66		       c6		      .byte.b	_C6
  10749  3a67
  10750  3a67		       26		      .byte.b	_26
  10751  3a68
  10752  3a68		       46		      .byte.b	_46
  10753  3a69
  10754  3a69		       66		      .byte.b	_66
  10755  3a6a
  10756  3a6a		       36		      .byte.b	_36
  10757  3a6b
  10758  3a6b		       06		      .byte.b	_06
  10759  3a6c
  10760  3a6c		       16		      .byte.b	_16
  10761  3a6d
  10762  3a6d		       96		      .byte.b	_96
  10763  3a6e
  10764  3a6e		       46		      .byte.b	_46
  10765  3a6f
  10766  3a6f		       36		      .byte.b	_36
  10767  3a70
  10768  3a70		       e6		      .byte.b	_E6
  10769  3a71
  10770  3a71		       46		      .byte.b	_46
  10771  3a72
  10772  3a72		       26		      .byte.b	_26
  10773  3a73
  10774  3a73				   .skipL0467
  10775  3a73				   .
  10776  3a73							; 
  10777  3a73
  10778  3a73				   .
  10779  3a73							; 
  10780  3a73
  10781  3a73				   .
  10782  3a73							; 
  10783  3a73
  10784  3a73				   .
  10785  3a73							; 
  10786  3a73
  10787  3a73				   .L0468		;  bank 4
  10788  3a73
  10789  3a73					      if	ECHO3
      1377 bytes of ROM space left in bank 3
  10790  3a73					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
  10791  3a73					      endif
  10792  3a73		       00 01	   ECHO3      =	1
  10793  3fd4					      ORG	$3FF4-bscode_length
  10794  3fd4					      RORG	$DFF4-bscode_length
  10795  3fd4		       a2 ff	   start_bank3 ldx	#$ff
  10796  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
  10797  3fd6				  -	      stx	FASTFETCH
  10798  3fd6					      endif
  10799  3fd6		       9a		      txs
  10800  3fd7				  -	      if	bankswitch == 64
  10801  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10802  3fd7					      else
  10803  3fd7		       a9 f2		      lda	#>(start-1)
  10804  3fd9					      endif
  10805  3fd9		       48		      pha
  10806  3fda		       a9 4f		      lda	#<(start-1)
  10807  3fdc		       48		      pha
  10808  3fdd		       48		      pha
  10809  3fde		       8a		      txa
  10810  3fdf		       48		      pha
  10811  3fe0		       ba		      tsx
  10812  3fe1					      if	bankswitch != 64
  10813  3fe1		       b5 04		      lda	4,x	; get high byte of return address
  10814  3fe3		       2a		      rol
  10815  3fe4		       2a		      rol
  10816  3fe5		       2a		      rol
  10817  3fe6		       2a		      rol
  10818  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10819  3fe9		       aa		      tax
  10820  3fea		       e8		      inx
  10821  3feb				  -	      else
  10822  3feb				  -	      lda	4,x	; get high byte of return address
  10823  3feb				  -	      tay
  10824  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10825  3feb				  -	      sta	4,x
  10826  3feb				  -	      tya
  10827  3feb				  -	      lsr
  10828  3feb				  -	      lsr
  10829  3feb				  -	      lsr
  10830  3feb				  -	      lsr
  10831  3feb				  -	      tax
  10832  3feb				  -	      inx
  10833  3feb					      endif
  10834  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
  10835  3fee		       68		      pla
  10836  3fef		       aa		      tax
  10837  3ff0		       68		      pla
  10838  3ff1		       60		      rts
  10839  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10840  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10841  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10842  3ff2					      endif
  10843  3ffc					      ORG	$3FFC
  10844  3ffc					      RORG	$DFFC
  10845  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
  10846  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
  10847  4000					      ORG	$4000
  10848  4000					      RORG	$F000
  10849  4000							; Provided under the CC0 license. See the included LICENSE.txt for details.
  10850  4000
  10851  4000							; This is a 2-line kernel!
  10852  4000					      ifnconst	vertical_reflect
  10853  4000				   kernel
  10854  4000					      endif
  10855  4000		       85 02		      sta	WSYNC
  10856  4002		       a9 ff		      lda	#255
  10857  4004		       8d 96 02 	      sta	TIM64T
  10858  4007
  10859  4007		       a9 01		      lda	#1
  10860  4009		       85 27		      sta	VDELBL
  10861  400b		       85 25		      sta	VDELP0
  10862  400d		       a6 92		      ldx	ballheight
  10863  400f		       e8		      inx
  10864  4010		       e8		      inx
  10865  4011		       86 9f		      stx	temp4
  10866  4013		       a5 86		      lda	player1y
  10867  4015		       85 9e		      sta	temp3
  10868  4017
  10869  4017				  -	      ifconst	shakescreen
  10870  4017				  -	      jsr	doshakescreen
  10871  4017					      else
  10872  4017		       a6 90		      ldx	missile0height
  10873  4019		       e8		      inx
  10874  401a					      endif
  10875  401a
  10876  401a		       e8		      inx
  10877  401b		       86 f6		      stx	stack1
  10878  401d
  10879  401d		       a5 89		      lda	bally
  10880  401f		       85 f7		      sta	stack2
  10881  4021
  10882  4021		       a5 85		      lda	player0y
  10883  4023		       a2 00		      ldx	#0
  10884  4025		       85 02		      sta	WSYNC
  10885  4027		       86 1b		      stx	GRP0
  10886  4029		       86 1c		      stx	GRP1
  10887  402b		       86 0e		      stx	PF1L
  10888  402d		       86 0f		      stx	PF2
  10889  402f		       86 2c		      stx	CXCLR
  10890  4031				  -	      ifconst	readpaddle
  10891  4031				  -	      stx	paddle
  10892  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
  10894  4033					      endif
  10895  4033
  10896  4033		       95 9d		      sta	temp2,x
  10897  4035
  10898  4035							;store these so they can be retrieved later
  10899  4035					      ifnconst	pfres
  10900  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
  10901  4037				  -	      else
  10902  4037				  -	      ldx	#132-pfres*pfwidth
  10903  4037					      endif
  10904  4037
  10905  4037		       c6 85		      dec	player0y
  10906  4039
  10907  4039		       a5 91		      lda	missile0y
  10908  403b		       85 a0		      sta	temp5
  10909  403d		       a5 88		      lda	missile1y
  10910  403f		       85 a1		      sta	temp6
  10911  4041
  10912  4041		       a5 ef		      lda	playfieldpos
  10913  4043		       85 9c		      sta	temp1
  10914  4045
  10915  4045				  -	      ifconst	pfrowheight
  10916  4045				  -	      lda	#pfrowheight+2
  10917  4045					      else
  10918  4045					      ifnconst	pfres
  10919  4045		       a9 0a		      lda	#10
  10920  4047				  -	      else
  10921  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  10922  4047					      endif
  10923  4047					      endif
  10924  4047		       18		      clc
  10925  4048		       e5 ef		      sbc	playfieldpos
  10926  404a		       85 ef		      sta	playfieldpos
  10927  404c		       4c 74 f0 	      jmp	.startkernel
  10928  404f
  10929  404f				   .skipDrawP0
  10930  404f		       a9 00		      lda	#0
  10931  4051		       a8		      tay
  10932  4052		       4c a2 f0 	      jmp	.continueP0
  10933  4055
  10934  4055				   .skipDrawP1
  10935  4055		       a9 00		      lda	#0
  10936  4057		       a8		      tay
  10937  4058		       4c 7e f0 	      jmp	.continueP1
  10938  405b
  10939  405b				   .kerloop		; enter at cycle 59??
  10940  405b
  10941  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
  10943  405c				   continuekernel2
  10944  405c		       a5 92		      lda	ballheight
  10945  405e
  10946  405e				  -	      ifconst	pfres
  10947  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
  10948  405e				  -	      sty	PF1L	;3
  10949  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
  10950  405e				  -	      sty	PF2L	;3
  10951  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
  10952  405e				  -	      sty	PF1R	; 3 too early?
  10953  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
  10954  405e				  -	      sty	PF2R	;3
  10955  405e					      else
  10956  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
  10957  4060		       84 0e		      sty	PF1L	;3
  10958  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  10959  4064		       84 0f		      sty	PF2L	;3
  10960  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
  10961  4068		       84 0e		      sty	PF1R	; 3 too early?
  10962  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  10963  406c		       84 0f		      sty	PF2R	;3
  10964  406e					      endif
  10965  406e
  10966  406e							; should be playfield+$38 for width=2
  10967  406e
  10968  406e		       c7 89		      dcp	bally
  10969  4070		       2a		      rol
  10970  4071		       2a		      rol
  10971  4072							; rol
  10972  4072							; rol
  10973  4072				   goback
  10974  4072		       85 1f		      sta	ENABL
  10975  4074				   .startkernel
  10976  4074		       a5 8f		      lda	player1height	;3
  10977  4076		       c7 86		      dcp	player1y	;5
  10978  4078		       90 db		      bcc	.skipDrawP1	;2
  10979  407a		       a4 86		      ldy	player1y	;3
  10980  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  10981  407e							; so it doesn't cross a page boundary!
  10982  407e
  10983  407e				   .continueP1
  10984  407e		       85 1c		      sta	GRP1	;3
  10985  4080
  10986  4080				  -	      ifnconst	player1colors
  10987  4080				  -	      lda	missile1height	;3
  10988  4080				  -	      dcp	missile1y	;5
  10989  4080				  -	      rol		;2
  10990  4080				  -	      rol		;2
  10991  4080				  -	      sta	ENAM1	;3
  10992  4080					      else
  10993  4080		       b1 87		      lda	(player1color),y
  10994  4082		       85 07		      sta	COLUP1
  10995  4084					      ifnconst	playercolors
      0  4084					      sleep	7
      1  4084				   .CYCLES    SET	7
      2  4084
      3  4084				  -	      IF	.CYCLES < 2
      4  4084				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4084				  -	      ERR
      6  4084					      ENDIF
      7  4084
      8  4084					      IF	.CYCLES & 1
      9  4084					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4084		       04 00		      nop	0
     11  4086				  -	      ELSE
     12  4086				  -	      bit	VSYNC
     13  4086					      ENDIF
     14  4086				   .CYCLES    SET	.CYCLES - 3
     15  4086					      ENDIF
     16  4086
     17  4086					      REPEAT	.CYCLES / 2
     18  4086		       ea		      nop
     17  4086					      REPEND
     18  4087		       ea		      nop
     19  4088					      REPEND
  10997  4088				  -	      else
  10998  4088				  -	      lda.w	player0colorstore
  10999  4088				  -	      sta	COLUP0
  11000  4088					      endif
  11001  4088					      endif
  11002  4088
  11003  4088				  -	      ifconst	pfres
  11004  4088				  -	      lda	playfield+pfres*pfwidth-132,x
  11005  4088				  -	      sta	PF1L	;3
  11006  4088				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
  11007  4088				  -	      sta	PF2L	;3
  11008  4088				  -	      lda	playfield+pfres*pfwidth-129,x
  11009  4088				  -	      sta	PF1R	; 3 too early?
  11010  4088				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
  11011  4088				  -	      sta	PF2R	;3
  11012  4088					      else
  11013  4088		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
  11014  408a		       85 0e		      sta	PF1L	;3
  11015  408c		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  11016  408e		       85 0f		      sta	PF2L	;3
  11017  4090		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
  11018  4092		       85 0e		      sta	PF1R	; 3 too early?
  11019  4094		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  11020  4096		       85 0f		      sta	PF2R	;3
  11021  4098					      endif
  11022  4098							; sleep 3
  11023  4098
  11024  4098		       a5 8e		      lda	player0height
  11025  409a		       c7 85		      dcp	player0y
  11026  409c		       90 b1		      bcc	.skipDrawP0
  11027  409e		       a4 85		      ldy	player0y
  11028  40a0		       b1 8a		      lda	(player0pointer),y
  11029  40a2				   .continueP0
  11030  40a2		       85 1b		      sta	GRP0
  11031  40a4
  11032  40a4				  -	      ifnconst	no_blank_lines
  11033  40a4				  -	      ifnconst	playercolors
  11034  40a4				  -	      lda	missile0height	;3
  11035  40a4				  -	      dcp	missile0y	;5
  11036  40a4				  -	      sbc	stack1
  11037  40a4				  -	      sta	ENAM0	;3
  11038  40a4				  -	      else
  11039  40a4				  -	      lda	(player0color),y
  11040  40a4				  -	      sta	player0colorstore
  11041  40a4				  -	      sleep	6
  11042  40a4				  -	      endif
  11043  40a4				  -	      dec	temp1
  11044  40a4				  -	      bne	continuekernel
  11045  40a4					      else
  11046  40a4		       c6 9c		      dec	temp1
  11047  40a6		       f0 09		      beq	altkernel2
  11048  40a8				  -	      ifconst	readpaddle
  11049  40a8				  -	      ldy	currentpaddle
  11050  40a8				  -	      lda	INPT0,y
  11051  40a8				  -	      bpl	noreadpaddle
  11052  40a8				  -	      inc	paddle
  11053  40a8				  -	      jmp	continuekernel2
  11054  40a8				  -noreadpaddle
  11055  40a8				  -	      sleep	2
  11056  40a8				  -	      jmp	continuekernel
  11057  40a8					      else
  11058  40a8					      ifnconst	playercolors
  11059  40a8				  -	      ifconst	PFcolors
  11060  40a8				  -	      txa
  11061  40a8				  -	      tay
  11062  40a8				  -	      lda	(pfcolortable),y
  11063  40a8				  -	      ifnconst	backgroundchange
  11064  40a8				  -	      sta	COLUPF
  11065  40a8				  -	      else
  11066  40a8				  -	      sta	COLUBK
  11067  40a8				  -	      endif
  11068  40a8				  -	      jmp	continuekernel
  11069  40a8					      else
  11070  40a8				  -	      ifconst	kernelmacrodef
  11071  40a8				  -	      kernelmacro
  11072  40a8					      else
      0  40a8					      sleep	12
      1  40a8				   .CYCLES    SET	12
      2  40a8
      3  40a8				  -	      IF	.CYCLES < 2
      4  40a8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40a8				  -	      ERR
      6  40a8					      ENDIF
      7  40a8
      8  40a8				  -	      IF	.CYCLES & 1
      9  40a8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40a8				  -	      nop	0
     11  40a8				  -	      ELSE
     12  40a8				  -	      bit	VSYNC
     13  40a8				  -	      ENDIF
     14  40a8				  -.CYCLES    SET	.CYCLES - 3
     15  40a8					      ENDIF
     16  40a8
     17  40a8					      REPEAT	.CYCLES / 2
     18  40a8		       ea		      nop
     17  40a8					      REPEND
     18  40a9		       ea		      nop
     17  40a9					      REPEND
     18  40aa		       ea		      nop
     17  40aa					      REPEND
     18  40ab		       ea		      nop
     17  40ab					      REPEND
     18  40ac		       ea		      nop
     17  40ac					      REPEND
     18  40ad		       ea		      nop
     19  40ae					      REPEND
  11074  40ae					      endif
  11075  40ae					      endif
  11076  40ae				  -	      else
  11077  40ae				  -	      lda	(player0color),y
  11078  40ae				  -	      sta	player0colorstore
  11079  40ae				  -	      sleep	4
  11080  40ae					      endif
  11081  40ae		       4c 5b f0 	      jmp	continuekernel
  11082  40b1					      endif
  11083  40b1				   altkernel2
  11084  40b1		       8a		      txa
  11085  40b2					      ifnconst	vertical_reflect
  11086  40b2		       cb fc		      sbx	#256-pfwidth
  11087  40b4				  -	      else
  11088  40b4				  -	      sbx	#256-pfwidth/2
  11089  40b4					      endif
  11090  40b4		       30 1b		      bmi	lastkernelline
  11091  40b6				  -	      ifconst	pfrowheight
  11092  40b6				  -	      lda	#pfrowheight
  11093  40b6					      else
  11094  40b6					      ifnconst	pfres
  11095  40b6		       a9 08		      lda	#8
  11096  40b8				  -	      else
  11097  40b8				  -	      lda	#(96/pfres)	; try to come close to the real size
  11098  40b8					      endif
  11099  40b8					      endif
  11100  40b8		       85 9c		      sta	temp1
  11101  40ba		       4c 5b f0 	      jmp	continuekernel
  11102  40bd					      endif
  11103  40bd
  11104  40bd				   altkernel
  11105  40bd
  11106  40bd				  -	      ifconst	PFmaskvalue
  11107  40bd				  -	      lda	#PFmaskvalue
  11108  40bd					      else
  11109  40bd		       a9 00		      lda	#0
  11110  40bf					      endif
  11111  40bf		       85 0e		      sta	PF1L
  11112  40c1		       85 0f		      sta	PF2
  11113  40c3
  11114  40c3
  11115  40c3							;sleep 3
  11116  40c3
  11117  40c3							;28 cycles to fix things
  11118  40c3							;minus 11=17
  11119  40c3
  11120  40c3							; lax temp4
  11121  40c3							; clc
  11122  40c3		       8a		      txa
  11123  40c4					      ifnconst	vertical_reflect
  11124  40c4		       cb fc		      sbx	#256-pfwidth
  11125  40c6				  -	      else
  11126  40c6				  -	      sbx	#256-pfwidth/2
  11127  40c6					      endif
  11128  40c6
  11129  40c6		       30 09		      bmi	lastkernelline
  11130  40c8
  11131  40c8				  -	      ifconst	PFcolorandheight
  11132  40c8				  -	      ifconst	pfres
  11133  40c8				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
  11134  40c8				  -	      else
  11135  40c8				  -	      ldy	playfieldcolorandheight-87,x
  11136  40c8				  -	      endif
  11137  40c8				  -	      ifnconst	backgroundchange
  11138  40c8				  -	      sty	COLUPF
  11139  40c8				  -	      else
  11140  40c8				  -	      sty	COLUBK
  11141  40c8				  -	      endif
  11142  40c8				  -	      ifconst	pfres
  11143  40c8				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
  11144  40c8				  -	      else
  11145  40c8				  -	      lda	playfieldcolorandheight-88,x
  11146  40c8				  -	      endif
  11147  40c8				  -	      sta.w	temp1
  11148  40c8					      endif
  11149  40c8				  -	      ifconst	PFheights
  11150  40c8				  -	      lsr
  11151  40c8				  -	      lsr
  11152  40c8				  -	      tay
  11153  40c8				  -	      lda	(pfheighttable),y
  11154  40c8				  -	      sta.w	temp1
  11155  40c8					      endif
  11156  40c8				  -	      ifconst	PFcolors
  11157  40c8				  -	      tay
  11158  40c8				  -	      lda	(pfcolortable),y
  11159  40c8				  -	      ifnconst	backgroundchange
  11160  40c8				  -	      sta	COLUPF
  11161  40c8				  -	      else
  11162  40c8				  -	      sta	COLUBK
  11163  40c8				  -	      endif
  11164  40c8				  -	      ifconst	pfrowheight
  11165  40c8				  -	      lda	#pfrowheight
  11166  40c8				  -	      else
  11167  40c8				  -	      ifnconst	pfres
  11168  40c8				  -	      lda	#8
  11169  40c8				  -	      else
  11170  40c8				  -	      lda	#(96/pfres)	; try to come close to the real size
  11171  40c8				  -	      endif
  11172  40c8				  -	      endif
  11173  40c8				  -	      sta	temp1
  11174  40c8					      endif
  11175  40c8					      ifnconst	PFcolorandheight
  11176  40c8					      ifnconst	PFcolors
  11177  40c8					      ifnconst	PFheights
  11178  40c8				  -	      ifnconst	no_blank_lines
  11179  40c8				  -			; read paddle 0
  11180  40c8				  -			; lo-res paddle read
  11181  40c8				  -			; bit INPT0
  11182  40c8				  -			; bmi paddleskipread
  11183  40c8				  -			; inc paddle0
  11184  40c8				  -			;donepaddleskip
  11185  40c8				  -	      sleep	10
  11186  40c8				  -	      ifconst	pfrowheight
  11187  40c8				  -	      lda	#pfrowheight
  11188  40c8				  -	      else
  11189  40c8				  -	      ifnconst	pfres
  11190  40c8				  -	      lda	#8
  11191  40c8				  -	      else
  11192  40c8				  -	      lda	#(96/pfres)	; try to come close to the real size
  11193  40c8				  -	      endif
  11194  40c8				  -	      endif
  11195  40c8				  -	      sta	temp1
  11196  40c8					      endif
  11197  40c8					      endif
  11198  40c8					      endif
  11199  40c8					      endif
  11200  40c8
  11201  40c8
  11202  40c8		       a5 92		      lda	ballheight
  11203  40ca		       c7 89		      dcp	bally
  11204  40cc		       e5 9f		      sbc	temp4
  11205  40ce
  11206  40ce
  11207  40ce		       4c 72 f0 	      jmp	goback
  11208  40d1
  11209  40d1
  11210  40d1				  -	      ifnconst	no_blank_lines
  11211  40d1				  -lastkernelline
  11212  40d1				  -	      ifnconst	PFcolors
  11213  40d1				  -	      sleep	10
  11214  40d1				  -	      else
  11215  40d1				  -	      ldy	#124
  11216  40d1				  -	      lda	(pfcolortable),y
  11217  40d1				  -	      sta	COLUPF
  11218  40d1				  -	      endif
  11219  40d1				  -
  11220  40d1				  -	      ifconst	PFheights
  11221  40d1				  -	      ldx	#1
  11222  40d1				  -			;sleep 4
  11223  40d1				  -	      sleep	3	; this was over 1 cycle
  11224  40d1				  -	      else
  11225  40d1				  -	      ldx	playfieldpos
  11226  40d1				  -			;sleep 3
  11227  40d1				  -	      sleep	2	; this was over 1 cycle
  11228  40d1				  -	      endif
  11229  40d1				  -
  11230  40d1				  -	      jmp	enterlastkernel
  11231  40d1				  -
  11232  40d1					      else
  11233  40d1				   lastkernelline
  11234  40d1
  11235  40d1				  -	      ifconst	PFheights
  11236  40d1				  -	      ldx	#1
  11237  40d1				  -			;sleep 5
  11238  40d1				  -	      sleep	4	; this was over 1 cycle
  11239  40d1					      else
  11240  40d1		       a6 ef		      ldx	playfieldpos
  11241  40d3							;sleep 4
      0  40d3					      sleep	3	; this was over 1 cycle
      1  40d3				   .CYCLES    SET	3
      2  40d3
      3  40d3				  -	      IF	.CYCLES < 2
      4  40d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d3				  -	      ERR
      6  40d3					      ENDIF
      7  40d3
      8  40d3					      IF	.CYCLES & 1
      9  40d3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d3		       04 00		      nop	0
     11  40d5				  -	      ELSE
     12  40d5				  -	      bit	VSYNC
     13  40d5					      ENDIF
     14  40d5				   .CYCLES    SET	.CYCLES - 3
     15  40d5					      ENDIF
     16  40d5
     17  40d5				  -	      REPEAT	.CYCLES / 2
     18  40d5				  -	      nop
     19  40d5					      REPEND
  11243  40d5					      endif
  11244  40d5
  11245  40d5		       e0 00		      cpx	#0
  11246  40d7		       d0 2e		      bne	.enterfromNBL
  11247  40d9		       4c 68 f1 	      jmp	no_blank_lines_bailout
  11248  40dc					      endif
  11249  40dc
  11250  40dc					      if	((<*)>$d5)
  11251  4100		       00 00 00 00*	      align	256
  11252  4100					      endif
  11253  4100							; this is a kludge to prevent page wrapping - fix!!!
  11254  4100
  11255  4100				   .skipDrawlastP1
  11256  4100		       a9 00		      lda	#0
  11257  4102		       a8		      tay		; added so we don't cross a page
  11258  4103		       4c 2d f1 	      jmp	.continuelastP1
  11259  4106
  11260  4106				   .endkerloop		; enter at cycle 59??
  11261  4106
  11262  4106		       ea		      nop
  11263  4107
  11264  4107				   .enterfromNBL
  11265  4107				  -	      ifconst	pfres
  11266  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
  11267  4107				  -	      sty	PF1L	;3
  11268  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  11269  4107				  -	      sty	PF2L	;3
  11270  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
  11271  4107				  -	      sty	PF1R	; possibly too early?
  11272  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  11273  4107				  -	      sty	PF2R	;3
  11274  4107					      else
  11275  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  11276  410a		       84 0e		      sty	PF1L	;3
  11277  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  11278  410f		       84 0f		      sty	PF2L	;3
  11279  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  11280  4114		       84 0e		      sty	PF1R	; possibly too early?
  11281  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  11282  4119		       84 0f		      sty	PF2R	;3
  11283  411b					      endif
  11284  411b
  11285  411b				   enterlastkernel
  11286  411b		       a5 92		      lda	ballheight
  11287  411d
  11288  411d							; tya
  11289  411d		       c7 89		      dcp	bally
  11290  411f							; sleep 4
  11291  411f
  11292  411f							; sbc stack3
  11293  411f		       2a		      rol
  11294  4120		       2a		      rol
  11295  4121		       85 1f		      sta	ENABL
  11296  4123
  11297  4123		       a5 8f		      lda	player1height	;3
  11298  4125		       c7 86		      dcp	player1y	;5
  11299  4127		       90 d7		      bcc	.skipDrawlastP1
  11300  4129		       a4 86		      ldy	player1y	;3
  11301  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  11302  412d							; so it doesn't cross a page boundary!
  11303  412d
  11304  412d				   .continuelastP1
  11305  412d		       85 1c		      sta	GRP1	;3
  11306  412f
  11307  412f				  -	      ifnconst	player1colors
  11308  412f				  -	      lda	missile1height	;3
  11309  412f				  -	      dcp	missile1y	;5
  11310  412f					      else
  11311  412f		       b1 87		      lda	(player1color),y
  11312  4131		       85 07		      sta	COLUP1
  11313  4133					      endif
  11314  4133
  11315  4133		       ca		      dex
  11316  4134							;dec temp4 ; might try putting this above PF writes
  11317  4134		       f0 34		      beq	endkernel
  11318  4136
  11319  4136
  11320  4136				  -	      ifconst	pfres
  11321  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
  11322  4136				  -	      sty	PF1L	;3
  11323  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  11324  4136				  -	      sty	PF2L	;3
  11325  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
  11326  4136				  -	      sty	PF1R	; possibly too early?
  11327  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  11328  4136				  -	      sty	PF2R	;3
  11329  4136					      else
  11330  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
  11331  4139		       84 0e		      sty	PF1L	;3
  11332  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  11333  413e		       84 0f		      sty	PF2L	;3
  11334  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
  11335  4143		       84 0e		      sty	PF1R	; possibly too early?
  11336  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  11337  4148		       84 0f		      sty	PF2R	;3
  11338  414a					      endif
  11339  414a
  11340  414a				  -	      ifnconst	player1colors
  11341  414a				  -	      rol		;2
  11342  414a				  -	      rol		;2
  11343  414a				  -	      sta	ENAM1	;3
  11344  414a					      else
  11345  414a					      ifnconst	playercolors
      0  414a					      sleep	7
      1  414a				   .CYCLES    SET	7
      2  414a
      3  414a				  -	      IF	.CYCLES < 2
      4  414a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  414a				  -	      ERR
      6  414a					      ENDIF
      7  414a
      8  414a					      IF	.CYCLES & 1
      9  414a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  414a		       04 00		      nop	0
     11  414c				  -	      ELSE
     12  414c				  -	      bit	VSYNC
     13  414c					      ENDIF
     14  414c				   .CYCLES    SET	.CYCLES - 3
     15  414c					      ENDIF
     16  414c
     17  414c					      REPEAT	.CYCLES / 2
     18  414c		       ea		      nop
     17  414c					      REPEND
     18  414d		       ea		      nop
     19  414e					      REPEND
  11347  414e				  -	      else
  11348  414e				  -	      lda.w	player0colorstore
  11349  414e				  -	      sta	COLUP0
  11350  414e					      endif
  11351  414e					      endif
  11352  414e
  11353  414e		       ad 8e 00 	      lda.w	player0height
  11354  4151		       c7 85		      dcp	player0y
  11355  4153		       90 0d		      bcc	.skipDrawlastP0
  11356  4155		       a4 85		      ldy	player0y
  11357  4157		       b1 8a		      lda	(player0pointer),y
  11358  4159				   .continuelastP0
  11359  4159		       85 1b		      sta	GRP0
  11360  415b
  11361  415b
  11362  415b
  11363  415b				  -	      ifnconst	no_blank_lines
  11364  415b				  -	      lda	missile0height	;3
  11365  415b				  -	      dcp	missile0y	;5
  11366  415b				  -	      sbc	stack1
  11367  415b				  -	      sta	ENAM0	;3
  11368  415b				  -	      jmp	.endkerloop
  11369  415b					      else
  11370  415b				  -	      ifconst	readpaddle
  11371  415b				  -	      ldy	currentpaddle
  11372  415b				  -	      lda	INPT0,y
  11373  415b				  -	      bpl	noreadpaddle2
  11374  415b				  -	      inc	paddle
  11375  415b				  -	      jmp	.endkerloop
  11376  415b				  -noreadpaddle2
  11377  415b				  -	      sleep	4
  11378  415b				  -	      jmp	.endkerloop
  11379  415b					      else		; no_blank_lines and no paddle reading
  11380  415b		       68		      pla
  11381  415c		       48		      pha		; 14 cycles in 4 bytes
  11382  415d		       68		      pla
  11383  415e		       48		      pha
  11384  415f							; sleep 14
  11385  415f		       4c 06 f1 	      jmp	.endkerloop
  11386  4162					      endif
  11387  4162					      endif
  11388  4162
  11389  4162
  11390  4162							; ifconst donepaddleskip
  11391  4162							;paddleskipread
  11392  4162							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
  11393  4162							; plus we get a lo-res paddle read
  11394  4162							; bmi donepaddleskip
  11395  4162							; endif
  11396  4162
  11397  4162				   .skipDrawlastP0
  11398  4162		       a9 00		      lda	#0
  11399  4164		       a8		      tay
  11400  4165		       4c 59 f1 	      jmp	.continuelastP0
  11401  4168
  11402  4168					      ifconst	no_blank_lines
  11403  4168				   no_blank_lines_bailout
  11404  4168		       a2 00		      ldx	#0
  11405  416a					      endif
  11406  416a
  11407  416a				   endkernel
  11408  416a							; 6 digit score routine
  11409  416a		       86 0e		      stx	PF1
  11410  416c		       86 0f		      stx	PF2
  11411  416e		       86 0d		      stx	PF0
  11412  4170		       18		      clc
  11413  4171
  11414  4171				  -	      ifconst	pfrowheight
  11415  4171				  -	      lda	#pfrowheight+2
  11416  4171					      else
  11417  4171					      ifnconst	pfres
  11418  4171		       a9 0a		      lda	#10
  11419  4173				  -	      else
  11420  4173				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  11421  4173					      endif
  11422  4173					      endif
  11423  4173
  11424  4173		       e5 ef		      sbc	playfieldpos
  11425  4175		       85 ef		      sta	playfieldpos
  11426  4177		       8a		      txa
  11427  4178
  11428  4178				  -	      ifconst	shakescreen
  11429  4178				  -	      bit	shakescreen
  11430  4178				  -	      bmi	noshakescreen2
  11431  4178				  -	      ldx	#$3D
  11432  4178				  -noshakescreen2
  11433  4178					      endif
  11434  4178
  11435  4178		       95 02		      sta	WSYNC,x
  11436  417a
  11437  417a							; STA WSYNC ;first one, need one more
  11438  417a		       85 0b		      sta	REFP0
  11439  417c		       85 0c		      sta	REFP1
  11440  417e		       85 1b		      STA	GRP0
  11441  4180		       85 1c		      STA	GRP1
  11442  4182							; STA PF1
  11443  4182							; STA PF2
  11444  4182		       85 2b		      sta	HMCLR
  11445  4184		       85 1d		      sta	ENAM0
  11446  4186		       85 1e		      sta	ENAM1
  11447  4188		       85 1f		      sta	ENABL
  11448  418a
  11449  418a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
  11450  418c		       85 85		      sta	player0y
  11451  418e		       a5 9e		      lda	temp3
  11452  4190		       85 86		      sta	player1y
  11453  4192				  -	      ifnconst	player1colors
  11454  4192				  -	      lda	temp6
  11455  4192				  -	      sta	missile1y
  11456  4192					      endif
  11457  4192					      ifnconst	playercolors
  11458  4192					      ifnconst	readpaddle
  11459  4192		       a5 a0		      lda	temp5
  11460  4194		       85 91		      sta	missile0y
  11461  4196					      endif
  11462  4196					      endif
  11463  4196		       a5 f7		      lda	stack2
  11464  4198		       85 89		      sta	bally
  11465  419a
  11466  419a							; strangely, this isn't required any more. might have
  11467  419a							; resulted from the no_blank_lines score bounce fix
  11468  419a							;ifconst no_blank_lines
  11469  419a							;sta WSYNC
  11470  419a							;endif
  11471  419a
  11472  419a		       ad 84 02 	      lda	INTIM
  11473  419d		       18		      clc
  11474  419e					      ifnconst	vblank_time
  11475  419e		       69 8e		      adc	#43+12+87
  11476  41a0				  -	      else
  11477  41a0				  -	      adc	#vblank_time+12+87
  11478  41a0				  -
  11479  41a0					      endif
  11480  41a0							; sta WSYNC
  11481  41a0		       8d 96 02 	      sta	TIM64T
  11482  41a3
  11483  41a3				  -	      ifconst	minikernel
  11484  41a3				  -	      jsr	minikernel
  11485  41a3					      endif
  11486  41a3
  11487  41a3							; now reassign temp vars for score pointers
  11488  41a3
  11489  41a3							; score pointers contain:
  11490  41a3							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
  11491  41a3							; swap lo2->temp1
  11492  41a3							; swap lo4->temp3
  11493  41a3							; swap lo6->temp5
  11494  41a3					      ifnconst	noscore
  11495  41a3		       a5 97		      lda	scorepointers+1
  11496  41a5							; ldy temp1
  11497  41a5		       85 9c		      sta	temp1
  11498  41a7							; sty scorepointers+1
  11499  41a7
  11500  41a7		       a5 99		      lda	scorepointers+3
  11501  41a9							; ldy temp3
  11502  41a9		       85 9e		      sta	temp3
  11503  41ab							; sty scorepointers+3
  11504  41ab
  11505  41ab
  11506  41ab		       85 2b		      sta	HMCLR
  11507  41ad		       ba		      tsx
  11508  41ae		       86 f6		      stx	stack1
  11509  41b0		       a2 e0		      ldx	#$E0
  11510  41b2		       86 20		      stx	HMP0
  11511  41b4
  11512  41b4		       a5 a3		      LDA	scorecolor
  11513  41b6		       85 06		      STA	COLUP0
  11514  41b8		       85 07		      STA	COLUP1
  11515  41ba				  -	      ifconst	scorefade
  11516  41ba				  -	      STA	stack2
  11517  41ba					      endif
  11518  41ba				  -	      ifconst	pfscore
  11519  41ba				  -	      lda	pfscorecolor
  11520  41ba				  -	      sta	COLUPF
  11521  41ba					      endif
  11522  41ba		       85 02		      sta	WSYNC
  11523  41bc		       a2 00		      ldx	#0
  11524  41be		       86 1b		      STx	GRP0
  11525  41c0		       86 1c		      STx	GRP1	; seems to be needed because of vdel
  11526  41c2
  11527  41c2		       a5 9b		      lda	scorepointers+5
  11528  41c4							; ldy temp5
  11529  41c4		       95 a0		      sta	temp5,x
  11530  41c6							; sty scorepointers+5
  11531  41c6		       a9 ff		      lda	#>scoretable
  11532  41c8		       85 97		      sta	scorepointers+1
  11533  41ca		       85 99		      sta	scorepointers+3
  11534  41cc		       85 9b		      sta	scorepointers+5
  11535  41ce		       85 9d		      sta	temp2
  11536  41d0		       85 9f		      sta	temp4
  11537  41d2		       85 a1		      sta	temp6
  11538  41d4		       a0 07		      LDY	#7
  11539  41d6		       84 25		      STY	VDELP0
  11540  41d8		       85 10		      STA	RESP0
  11541  41da		       85 11		      STA	RESP1
  11542  41dc
  11543  41dc
  11544  41dc		       a9 03		      LDA	#$03
  11545  41de		       85 04		      STA	NUSIZ0
  11546  41e0		       85 05		      STA	NUSIZ1
  11547  41e2		       85 26		      STA	VDELP1
  11548  41e4		       a9 f0		      LDA	#$F0
  11549  41e6		       85 21		      STA	HMP1
  11550  41e8		       b1 96		      lda	(scorepointers),y
  11551  41ea		       85 1b		      sta	GRP0
  11552  41ec		       85 2a		      STA	HMOVE	; cycle 73 ?
  11553  41ee		       4c 08 f2 	      jmp	beginscore
  11554  41f1
  11555  41f1
  11556  41f1					      if	((<*)>$d4)
  11557  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
  11558  4200					      endif
  11559  4200
  11560  4200				   loop2
  11561  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
  11562  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
  11563  4204				  -	      ifconst	pfscore
  11564  4204				  -	      lda.w	pfscore1
  11565  4204				  -	      sta	PF1
  11566  4204					      else
  11567  4204				  -	      ifconst	scorefade
  11568  4204				  -	      sleep	2
  11569  4204				  -	      dec	stack2	; decrement the temporary scorecolor
  11570  4204					      else
      0  4204					      sleep	7
      1  4204				   .CYCLES    SET	7
      2  4204
      3  4204				  -	      IF	.CYCLES < 2
      4  4204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4204				  -	      ERR
      6  4204					      ENDIF
      7  4204
      8  4204					      IF	.CYCLES & 1
      9  4204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4204		       04 00		      nop	0
     11  4206				  -	      ELSE
     12  4206				  -	      bit	VSYNC
     13  4206					      ENDIF
     14  4206				   .CYCLES    SET	.CYCLES - 3
     15  4206					      ENDIF
     16  4206
     17  4206					      REPEAT	.CYCLES / 2
     18  4206		       ea		      nop
     17  4206					      REPEND
     18  4207		       ea		      nop
     19  4208					      REPEND
  11572  4208					      endif
  11573  4208					      endif
  11574  4208							; cycle 0
  11575  4208				   beginscore
  11576  4208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
  11577  420a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
  11578  420c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
  11579  420e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
  11580  4210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
  11581  4212		       9a		      txs
  11582  4213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
  11583  4215				  -	      ifconst	scorefade
  11584  4215				  -	      lda	stack2
  11585  4215					      else
      0  4215					      sleep	3
      1  4215				   .CYCLES    SET	3
      2  4215
      3  4215				  -	      IF	.CYCLES < 2
      4  4215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4215				  -	      ERR
      6  4215					      ENDIF
      7  4215
      8  4215					      IF	.CYCLES & 1
      9  4215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4215		       04 00		      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217					      ENDIF
     14  4217				   .CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217				  -	      REPEAT	.CYCLES / 2
     18  4217				  -	      nop
     19  4217					      REPEND
  11587  4217					      endif
  11588  4217
  11589  4217				  -	      ifconst	pfscore
  11590  4217				  -	      lda	pfscore2
  11591  4217				  -	      sta	PF1
  11592  4217					      else
  11593  4217				  -	      ifconst	scorefade
  11594  4217				  -	      sta	COLUP0
  11595  4217				  -	      sta	COLUP1
  11596  4217					      else
      0  4217					      sleep	6
      1  4217				   .CYCLES    SET	6
      2  4217
      3  4217				  -	      IF	.CYCLES < 2
      4  4217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4217				  -	      ERR
      6  4217					      ENDIF
      7  4217
      8  4217				  -	      IF	.CYCLES & 1
      9  4217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4217				  -	      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217				  -	      ENDIF
     14  4217				  -.CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217					      REPEAT	.CYCLES / 2
     18  4217		       ea		      nop
     17  4217					      REPEND
     18  4218		       ea		      nop
     17  4218					      REPEND
     18  4219		       ea		      nop
     19  421a					      REPEND
  11598  421a					      endif
  11599  421a					      endif
  11600  421a
  11601  421a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
  11602  421c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
  11603  421e		       ba		      tsx
  11604  421f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
  11605  4221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
  11606  4223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
  11607  4225		       88		      dey
  11608  4226		       10 d8		      bpl	loop2	;+2 60 180
  11609  4228
  11610  4228		       a6 f6		      ldx	stack1
  11611  422a		       9a		      txs
  11612  422b							; lda scorepointers+1
  11613  422b		       a4 9c		      ldy	temp1
  11614  422d							; sta temp1
  11615  422d		       84 97		      sty	scorepointers+1
  11616  422f
  11617  422f		       a9 00		      LDA	#0
  11618  4231		       85 0e		      sta	PF1
  11619  4233		       85 1b		      STA	GRP0
  11620  4235		       85 1c		      STA	GRP1
  11621  4237		       85 25		      STA	VDELP0
  11622  4239		       85 26		      STA	VDELP1	;do we need these
  11623  423b		       85 04		      STA	NUSIZ0
  11624  423d		       85 05		      STA	NUSIZ1
  11625  423f
  11626  423f							; lda scorepointers+3
  11627  423f		       a4 9e		      ldy	temp3
  11628  4241							; sta temp3
  11629  4241		       84 99		      sty	scorepointers+3
  11630  4243
  11631  4243							; lda scorepointers+5
  11632  4243		       a4 a0		      ldy	temp5
  11633  4245							; sta temp5
  11634  4245		       84 9b		      sty	scorepointers+5
  11635  4247					      endif		;noscore
  11636  4247				  -	      ifconst	readpaddle
  11637  4247				  -	      lda	#%11000010
  11638  4247					      else
  11639  4247				  -	      ifconst	qtcontroller
  11640  4247				  -	      lda	qtcontroller
  11641  4247				  -	      lsr		; bit 0 in carry
  11642  4247				  -	      lda	#4
  11643  4247				  -	      ror		; carry into top of A
  11644  4247					      else
  11645  4247		       a9 02		      lda	#2
  11646  4249					      endif		; qtcontroller
  11647  4249					      endif		; readpaddle
  11648  4249		       85 02		      sta	WSYNC
  11649  424b		       85 01		      sta	VBLANK
      0  424d					      RETURN
      1  424d				  -	      ifnconst	bankswitch
      2  424d				  -	      rts
      3  424d					      else
      4  424d		       4c dd ff 	      jmp	BS_return
      5  4250					      endif
  11651  4250				  -	      ifconst	shakescreen
  11652  4250				  -doshakescreen
  11653  4250				  -	      bit	shakescreen
  11654  4250				  -	      bmi	noshakescreen
  11655  4250				  -	      sta	WSYNC
  11656  4250				  -noshakescreen
  11657  4250				  -	      ldx	missile0height
  11658  4250				  -	      inx
  11659  4250				  -	      rts
  11660  4250					      endif
  11661  4250
  11662  4250							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11663  4250
  11664  4250				   start
  11665  4250		       78		      sei
  11666  4251		       d8		      cld
  11667  4252		       a0 00		      ldy	#0
  11668  4254		       a5 d0		      lda	$D0
  11669  4256		       c9 2c		      cmp	#$2C	;check RAM location #1
  11670  4258		       d0 07		      bne	MachineIs2600
  11671  425a		       a5 d1		      lda	$D1
  11672  425c		       c9 a9		      cmp	#$A9	;check RAM location #2
  11673  425e		       d0 01		      bne	MachineIs2600
  11674  4260		       88		      dey
  11675  4261				   MachineIs2600
  11676  4261		       a2 00		      ldx	#0
  11677  4263		       8a		      txa
  11678  4264				   clearmem
  11679  4264		       e8		      inx
  11680  4265		       9a		      txs
  11681  4266		       48		      pha
  11682  4267		       d0 fb		      bne	clearmem
  11683  4269		       84 9c		      sty	temp1
  11684  426b					      ifnconst	multisprite
  11685  426b				  -	      ifconst	pfrowheight
  11686  426b				  -	      lda	#pfrowheight
  11687  426b					      else
  11688  426b				  -	      ifconst	pfres
  11689  426b				  -	      lda	#(96/pfres)
  11690  426b					      else
  11691  426b		       a9 08		      lda	#8
  11692  426d					      endif
  11693  426d					      endif
  11694  426d		       85 ef		      sta	playfieldpos
  11695  426f					      endif
  11696  426f		       a2 05		      ldx	#5
  11697  4271				   initscore
  11698  4271		       a9 74		      lda	#<scoretable
  11699  4273		       95 96		      sta	scorepointers,x
  11700  4275		       ca		      dex
  11701  4276		       10 f9		      bpl	initscore
  11702  4278		       a9 01		      lda	#1
  11703  427a		       85 0a		      sta	CTRLPF
  11704  427c		       0d 84 02 	      ora	INTIM
  11705  427f		       85 a2		      sta	rand
  11706  4281
  11707  4281				  -	      ifconst	multisprite
  11708  4281				  -	      jsr	multisprite_setup
  11709  4281					      endif
  11710  4281
  11711  4281				  -	      ifnconst	bankswitch
  11712  4281				  -	      jmp	game
  11713  4281					      else
  11714  4281		       a9 8f		      lda	#>(game-1)
  11715  4283		       48		      pha
  11716  4284		       a9 ff		      lda	#<(game-1)
  11717  4286		       48		      pha
  11718  4287		       48		      pha
  11719  4288		       48		      pha
  11720  4289		       a2 01		      ldx	#1
  11721  428b		       4c eb ff 	      jmp	BS_jsr
  11722  428e					      endif
  11723  428e							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11724  428e
  11725  428e							; playfield drawing routines
  11726  428e							; you get a 32x12 bitmapped display in a single color :)
  11727  428e							; 0-31 and 0-11
  11728  428e
  11729  428e				   pfclear		; clears playfield - or fill with pattern
  11730  428e				  -	      ifconst	pfres
  11731  428e				  -	      ldx	#pfres*pfwidth-1
  11732  428e					      else
  11733  428e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
  11734  4290					      endif
  11735  4290				   pfclear_loop
  11736  4290					      ifnconst	superchip
  11737  4290		       95 a4		      sta	playfield,x
  11738  4292				  -	      else
  11739  4292				  -	      sta	playfield-128,x
  11740  4292					      endif
  11741  4292		       ca		      dex
  11742  4293		       10 fb		      bpl	pfclear_loop
      0  4295					      RETURN
      1  4295				  -	      ifnconst	bankswitch
      2  4295				  -	      rts
      3  4295					      else
      4  4295		       4c dd ff 	      jmp	BS_return
      5  4298					      endif
  11744  4298
  11745  4298				   setuppointers
  11746  4298		       86 9d		      stx	temp2	; store on.off.flip value
  11747  429a		       aa		      tax		; put x-value in x 
  11748  429b		       4a		      lsr
  11749  429c		       4a		      lsr
  11750  429d		       4a		      lsr		; divide x pos by 8 
  11751  429e		       85 9c		      sta	temp1
  11752  42a0		       98		      tya
  11753  42a1		       0a		      asl
  11754  42a2					      if	pfwidth=4
  11755  42a2		       0a		      asl		; multiply y pos by 4
  11756  42a3					      endif		; else multiply by 2
  11757  42a3		       18		      clc
  11758  42a4		       65 9c		      adc	temp1	; add them together to get actual memory location offset
  11759  42a6		       a8		      tay		; put the value in y
  11760  42a7		       a5 9d		      lda	temp2	; restore on.off.flip value
  11761  42a9		       60		      rts
  11762  42aa
  11763  42aa				   pfread
  11764  42aa							;x=xvalue, y=yvalue
  11765  42aa		       20 98 f2 	      jsr	setuppointers
  11766  42ad		       bd 42 f3 	      lda	setbyte,x
  11767  42b0		       39 a4 00 	      and	playfield,y
  11768  42b3		       5d 42 f3 	      eor	setbyte,x
  11769  42b6							; beq readzero
  11770  42b6							; lda #1
  11771  42b6							; readzero
      0  42b6					      RETURN
      1  42b6				  -	      ifnconst	bankswitch
      2  42b6				  -	      rts
      3  42b6					      else
      4  42b6		       4c dd ff 	      jmp	BS_return
      5  42b9					      endif
  11773  42b9
  11774  42b9				   pfpixel
  11775  42b9							;x=xvalue, y=yvalue, a=0,1,2
  11776  42b9		       20 98 f2 	      jsr	setuppointers
  11777  42bc
  11778  42bc					      ifconst	bankswitch
  11779  42bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  11780  42be		       f0 0f		      beq	pixelon_r	; if "on" go to on
  11781  42c0		       4a		      lsr
  11782  42c1		       b0 18		      bcs	pixeloff_r	; value is 1 if true
  11783  42c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  11784  42c6		       5d 42 f3 	      eor	setbyte,x
  11785  42c9				  -	      ifconst	superchip
  11786  42c9				  -	      sta	playfield-128,y
  11787  42c9					      else
  11788  42c9		       99 a4 00 	      sta	playfield,y
  11789  42cc					      endif
      0  42cc					      RETURN
      1  42cc				  -	      ifnconst	bankswitch
      2  42cc				  -	      rts
      3  42cc					      else
      4  42cc		       4c dd ff 	      jmp	BS_return
      5  42cf					      endif
  11791  42cf				   pixelon_r
  11792  42cf		       b9 a4 00 	      lda	playfield,y
  11793  42d2		       1d 42 f3 	      ora	setbyte,x
  11794  42d5				  -	      ifconst	superchip
  11795  42d5				  -	      sta	playfield-128,y
  11796  42d5					      else
  11797  42d5		       99 a4 00 	      sta	playfield,y
  11798  42d8					      endif
      0  42d8					      RETURN
      1  42d8				  -	      ifnconst	bankswitch
      2  42d8				  -	      rts
      3  42d8					      else
      4  42d8		       4c dd ff 	      jmp	BS_return
      5  42db					      endif
  11800  42db				   pixeloff_r
  11801  42db		       bd 42 f3 	      lda	setbyte,x
  11802  42de		       49 ff		      eor	#$ff
  11803  42e0		       39 a4 00 	      and	playfield,y
  11804  42e3				  -	      ifconst	superchip
  11805  42e3				  -	      sta	playfield-128,y
  11806  42e3					      else
  11807  42e3		       99 a4 00 	      sta	playfield,y
  11808  42e6					      endif
      0  42e6					      RETURN
      1  42e6				  -	      ifnconst	bankswitch
      2  42e6				  -	      rts
      3  42e6					      else
      4  42e6		       4c dd ff 	      jmp	BS_return
      5  42e9					      endif
  11810  42e9
  11811  42e9				  -	      else
  11812  42e9				  -	      jmp	plotpoint
  11813  42e9					      endif
  11814  42e9
  11815  42e9				   pfhline
  11816  42e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  11817  42e9		       20 98 f2 	      jsr	setuppointers
  11818  42ec		       4c f6 f2 	      jmp	noinc
  11819  42ef				   keepgoing
  11820  42ef		       e8		      inx
  11821  42f0		       8a		      txa
  11822  42f1		       29 07		      and	#7
  11823  42f3		       d0 01		      bne	noinc
  11824  42f5		       c8		      iny
  11825  42f6				   noinc
  11826  42f6		       20 1b f3 	      jsr	plotpoint
  11827  42f9		       e4 9e		      cpx	temp3
  11828  42fb		       30 f2		      bmi	keepgoing
      0  42fd					      RETURN
      1  42fd				  -	      ifnconst	bankswitch
      2  42fd				  -	      rts
      3  42fd					      else
      4  42fd		       4c dd ff 	      jmp	BS_return
      5  4300					      endif
  11830  4300
  11831  4300				   pfvline
  11832  4300							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  11833  4300		       20 98 f2 	      jsr	setuppointers
  11834  4303		       84 9c		      sty	temp1	; store memory location offset
  11835  4305		       e6 9e		      inc	temp3	; increase final x by 1 
  11836  4307		       a5 9e		      lda	temp3
  11837  4309		       0a		      asl
  11838  430a					      if	pfwidth=4
  11839  430a		       0a		      asl		; multiply by 4
  11840  430b					      endif		; else multiply by 2
  11841  430b		       85 9e		      sta	temp3	; store it
  11842  430d							; Thanks to Michael Rideout for fixing a bug in this code
  11843  430d							; right now, temp1=y=starting memory location, temp3=final
  11844  430d							; x should equal original x value
  11845  430d				   keepgoingy
  11846  430d		       20 1b f3 	      jsr	plotpoint
  11847  4310		       c8		      iny
  11848  4311		       c8		      iny
  11849  4312					      if	pfwidth=4
  11850  4312		       c8		      iny
  11851  4313		       c8		      iny
  11852  4314					      endif
  11853  4314		       c4 9e		      cpy	temp3
  11854  4316		       30 f5		      bmi	keepgoingy
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c dd ff 	      jmp	BS_return
      5  431b					      endif
  11856  431b
  11857  431b				   plotpoint
  11858  431b		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  11859  431d		       f0 0d		      beq	pixelon	; if "on" go to on
  11860  431f		       4a		      lsr
  11861  4320		       b0 14		      bcs	pixeloff	; value is 1 if true
  11862  4322		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
  11863  4325		       5d 42 f3 	      eor	setbyte,x
  11864  4328				  -	      ifconst	superchip
  11865  4328				  -	      sta	playfield-128,y
  11866  4328					      else
  11867  4328		       99 a4 00 	      sta	playfield,y
  11868  432b					      endif
  11869  432b		       60		      rts
  11870  432c				   pixelon
  11871  432c		       b9 a4 00 	      lda	playfield,y
  11872  432f		       1d 42 f3 	      ora	setbyte,x
  11873  4332				  -	      ifconst	superchip
  11874  4332				  -	      sta	playfield-128,y
  11875  4332					      else
  11876  4332		       99 a4 00 	      sta	playfield,y
  11877  4335					      endif
  11878  4335		       60		      rts
  11879  4336				   pixeloff
  11880  4336		       bd 42 f3 	      lda	setbyte,x
  11881  4339		       49 ff		      eor	#$ff
  11882  433b		       39 a4 00 	      and	playfield,y
  11883  433e				  -	      ifconst	superchip
  11884  433e				  -	      sta	playfield-128,y
  11885  433e					      else
  11886  433e		       99 a4 00 	      sta	playfield,y
  11887  4341					      endif
  11888  4341		       60		      rts
  11889  4342
  11890  4342				   setbyte
  11891  4342					      ifnconst	pfcenter
  11892  4342		       80		      .byte.b	$80
  11893  4343		       40		      .byte.b	$40
  11894  4344		       20		      .byte.b	$20
  11895  4345		       10		      .byte.b	$10
  11896  4346		       08		      .byte.b	$08
  11897  4347		       04		      .byte.b	$04
  11898  4348		       02		      .byte.b	$02
  11899  4349		       01		      .byte.b	$01
  11900  434a					      endif
  11901  434a		       01		      .byte.b	$01
  11902  434b		       02		      .byte.b	$02
  11903  434c		       04		      .byte.b	$04
  11904  434d		       08		      .byte.b	$08
  11905  434e		       10		      .byte.b	$10
  11906  434f		       20		      .byte.b	$20
  11907  4350		       40		      .byte.b	$40
  11908  4351		       80		      .byte.b	$80
  11909  4352		       80		      .byte.b	$80
  11910  4353		       40		      .byte.b	$40
  11911  4354		       20		      .byte.b	$20
  11912  4355		       10		      .byte.b	$10
  11913  4356		       08		      .byte.b	$08
  11914  4357		       04		      .byte.b	$04
  11915  4358		       02		      .byte.b	$02
  11916  4359		       01		      .byte.b	$01
  11917  435a		       01		      .byte.b	$01
  11918  435b		       02		      .byte.b	$02
  11919  435c		       04		      .byte.b	$04
  11920  435d		       08		      .byte.b	$08
  11921  435e		       10		      .byte.b	$10
  11922  435f		       20		      .byte.b	$20
  11923  4360		       40		      .byte.b	$40
  11924  4361		       80		      .byte.b	$80
  11925  4362							; Provided under the CC0 license. See the included LICENSE.txt for details.
  11926  4362
  11927  4362				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
  11928  4362		       d0 15		      bne	notleft
  11929  4364							;left
  11930  4364				  -	      ifconst	pfres
  11931  4364				  -	      ldx	#pfres*4
  11932  4364					      else
  11933  4364		       a2 30		      ldx	#48
  11934  4366					      endif
  11935  4366				   leftloop
  11936  4366		       b5 a3		      lda	playfield-1,x
  11937  4368		       4a		      lsr
  11938  4369
  11939  4369				  -	      ifconst	superchip
  11940  4369				  -	      lda	playfield-2,x
  11941  4369				  -	      rol
  11942  4369				  -	      sta	playfield-130,x
  11943  4369				  -	      lda	playfield-3,x
  11944  4369				  -	      ror
  11945  4369				  -	      sta	playfield-131,x
  11946  4369				  -	      lda	playfield-4,x
  11947  4369				  -	      rol
  11948  4369				  -	      sta	playfield-132,x
  11949  4369				  -	      lda	playfield-1,x
  11950  4369				  -	      ror
  11951  4369				  -	      sta	playfield-129,x
  11952  4369					      else
  11953  4369		       36 a2		      rol	playfield-2,x
  11954  436b		       76 a1		      ror	playfield-3,x
  11955  436d		       36 a0		      rol	playfield-4,x
  11956  436f		       76 a3		      ror	playfield-1,x
  11957  4371					      endif
  11958  4371
  11959  4371		       8a		      txa
  11960  4372		       cb 04		      sbx	#4
  11961  4374		       d0 f0		      bne	leftloop
      0  4376					      RETURN
      1  4376				  -	      ifnconst	bankswitch
      2  4376				  -	      rts
      3  4376					      else
      4  4376		       4c dd ff 	      jmp	BS_return
      5  4379					      endif
  11963  4379
  11964  4379				   notleft
  11965  4379		       4a		      lsr
  11966  437a		       90 15		      bcc	notright
  11967  437c							;right
  11968  437c
  11969  437c				  -	      ifconst	pfres
  11970  437c				  -	      ldx	#pfres*4
  11971  437c					      else
  11972  437c		       a2 30		      ldx	#48
  11973  437e					      endif
  11974  437e				   rightloop
  11975  437e		       b5 a0		      lda	playfield-4,x
  11976  4380		       4a		      lsr
  11977  4381				  -	      ifconst	superchip
  11978  4381				  -	      lda	playfield-3,x
  11979  4381				  -	      rol
  11980  4381				  -	      sta	playfield-131,x
  11981  4381				  -	      lda	playfield-2,x
  11982  4381				  -	      ror
  11983  4381				  -	      sta	playfield-130,x
  11984  4381				  -	      lda	playfield-1,x
  11985  4381				  -	      rol
  11986  4381				  -	      sta	playfield-129,x
  11987  4381				  -	      lda	playfield-4,x
  11988  4381				  -	      ror
  11989  4381				  -	      sta	playfield-132,x
  11990  4381					      else
  11991  4381		       36 a1		      rol	playfield-3,x
  11992  4383		       76 a2		      ror	playfield-2,x
  11993  4385		       36 a3		      rol	playfield-1,x
  11994  4387		       76 a0		      ror	playfield-4,x
  11995  4389					      endif
  11996  4389		       8a		      txa
  11997  438a		       cb 04		      sbx	#4
  11998  438c		       d0 f0		      bne	rightloop
      0  438e					      RETURN
      1  438e				  -	      ifnconst	bankswitch
      2  438e				  -	      rts
      3  438e					      else
      4  438e		       4c dd ff 	      jmp	BS_return
      5  4391					      endif
  12000  4391
  12001  4391				   notright
  12002  4391		       4a		      lsr
  12003  4392		       90 4b		      bcc	notup
  12004  4394							;up
  12005  4394		       4a		      lsr
  12006  4395		       90 02		      bcc	onedecup
  12007  4397		       c6 ef		      dec	playfieldpos
  12008  4399				   onedecup
  12009  4399		       c6 ef		      dec	playfieldpos
  12010  439b		       f0 02		      beq	shiftdown
  12011  439d		       10 3d		      bpl	noshiftdown2
  12012  439f				   shiftdown
  12013  439f				  -	      ifconst	pfrowheight
  12014  439f				  -	      lda	#pfrowheight
  12015  439f					      else
  12016  439f					      ifnconst	pfres
  12017  439f		       a9 08		      lda	#8
  12018  43a1				  -	      else
  12019  43a1				  -	      lda	#(96/pfres)	; try to come close to the real size
  12020  43a1					      endif
  12021  43a1					      endif
  12022  43a1
  12023  43a1		       85 ef		      sta	playfieldpos
  12024  43a3		       a5 a7		      lda	playfield+3
  12025  43a5		       85 9f		      sta	temp4
  12026  43a7		       a5 a6		      lda	playfield+2
  12027  43a9		       85 9e		      sta	temp3
  12028  43ab		       a5 a5		      lda	playfield+1
  12029  43ad		       85 9d		      sta	temp2
  12030  43af		       a5 a4		      lda	playfield
  12031  43b1		       85 9c		      sta	temp1
  12032  43b3		       a2 00		      ldx	#0
  12033  43b5				   up2
  12034  43b5		       b5 a8		      lda	playfield+4,x
  12035  43b7				  -	      ifconst	superchip
  12036  43b7				  -	      sta	playfield-128,x
  12037  43b7				  -	      lda	playfield+5,x
  12038  43b7				  -	      sta	playfield-127,x
  12039  43b7				  -	      lda	playfield+6,x
  12040  43b7				  -	      sta	playfield-126,x
  12041  43b7				  -	      lda	playfield+7,x
  12042  43b7				  -	      sta	playfield-125,x
  12043  43b7					      else
  12044  43b7		       95 a4		      sta	playfield,x
  12045  43b9		       b5 a9		      lda	playfield+5,x
  12046  43bb		       95 a5		      sta	playfield+1,x
  12047  43bd		       b5 aa		      lda	playfield+6,x
  12048  43bf		       95 a6		      sta	playfield+2,x
  12049  43c1		       b5 ab		      lda	playfield+7,x
  12050  43c3		       95 a7		      sta	playfield+3,x
  12051  43c5					      endif
  12052  43c5		       8a		      txa
  12053  43c6		       cb fc		      sbx	#252
  12054  43c8				  -	      ifconst	pfres
  12055  43c8				  -	      cpx	#(pfres-1)*4
  12056  43c8					      else
  12057  43c8		       e0 2c		      cpx	#44
  12058  43ca					      endif
  12059  43ca		       d0 e9		      bne	up2
  12060  43cc
  12061  43cc		       a5 9f		      lda	temp4
  12062  43ce
  12063  43ce				  -	      ifconst	superchip
  12064  43ce				  -	      ifconst	pfres
  12065  43ce				  -	      sta	playfield+pfres*4-129
  12066  43ce				  -	      lda	temp3
  12067  43ce				  -	      sta	playfield+pfres*4-130
  12068  43ce				  -	      lda	temp2
  12069  43ce				  -	      sta	playfield+pfres*4-131
  12070  43ce				  -	      lda	temp1
  12071  43ce				  -	      sta	playfield+pfres*4-132
  12072  43ce				  -	      else
  12073  43ce				  -	      sta	playfield+47-128
  12074  43ce				  -	      lda	temp3
  12075  43ce				  -	      sta	playfield+46-128
  12076  43ce				  -	      lda	temp2
  12077  43ce				  -	      sta	playfield+45-128
  12078  43ce				  -	      lda	temp1
  12079  43ce				  -	      sta	playfield+44-128
  12080  43ce				  -	      endif
  12081  43ce					      else
  12082  43ce				  -	      ifconst	pfres
  12083  43ce				  -	      sta	playfield+pfres*4-1
  12084  43ce				  -	      lda	temp3
  12085  43ce				  -	      sta	playfield+pfres*4-2
  12086  43ce				  -	      lda	temp2
  12087  43ce				  -	      sta	playfield+pfres*4-3
  12088  43ce				  -	      lda	temp1
  12089  43ce				  -	      sta	playfield+pfres*4-4
  12090  43ce					      else
  12091  43ce		       85 d3		      sta	playfield+47
  12092  43d0		       a5 9e		      lda	temp3
  12093  43d2		       85 d2		      sta	playfield+46
  12094  43d4		       a5 9d		      lda	temp2
  12095  43d6		       85 d1		      sta	playfield+45
  12096  43d8		       a5 9c		      lda	temp1
  12097  43da		       85 d0		      sta	playfield+44
  12098  43dc					      endif
  12099  43dc					      endif
  12100  43dc				   noshiftdown2
      0  43dc					      RETURN
      1  43dc				  -	      ifnconst	bankswitch
      2  43dc				  -	      rts
      3  43dc					      else
      4  43dc		       4c dd ff 	      jmp	BS_return
      5  43df					      endif
  12102  43df
  12103  43df
  12104  43df				   notup
  12105  43df							;down
  12106  43df		       4a		      lsr
  12107  43e0		       b0 02		      bcs	oneincup
  12108  43e2		       e6 ef		      inc	playfieldpos
  12109  43e4				   oneincup
  12110  43e4		       e6 ef		      inc	playfieldpos
  12111  43e6		       a5 ef		      lda	playfieldpos
  12112  43e8
  12113  43e8				  -	      ifconst	pfrowheight
  12114  43e8				  -	      cmp	#pfrowheight+1
  12115  43e8					      else
  12116  43e8					      ifnconst	pfres
  12117  43e8		       c9 09		      cmp	#9
  12118  43ea				  -	      else
  12119  43ea				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
  12120  43ea					      endif
  12121  43ea					      endif
  12122  43ea
  12123  43ea		       90 3b		      bcc	noshiftdown
  12124  43ec		       a9 01		      lda	#1
  12125  43ee		       85 ef		      sta	playfieldpos
  12126  43f0
  12127  43f0				  -	      ifconst	pfres
  12128  43f0				  -	      lda	playfield+pfres*4-1
  12129  43f0				  -	      sta	temp4
  12130  43f0				  -	      lda	playfield+pfres*4-2
  12131  43f0				  -	      sta	temp3
  12132  43f0				  -	      lda	playfield+pfres*4-3
  12133  43f0				  -	      sta	temp2
  12134  43f0				  -	      lda	playfield+pfres*4-4
  12135  43f0					      else
  12136  43f0		       a5 d3		      lda	playfield+47
  12137  43f2		       85 9f		      sta	temp4
  12138  43f4		       a5 d2		      lda	playfield+46
  12139  43f6		       85 9e		      sta	temp3
  12140  43f8		       a5 d1		      lda	playfield+45
  12141  43fa		       85 9d		      sta	temp2
  12142  43fc		       a5 d0		      lda	playfield+44
  12143  43fe					      endif
  12144  43fe
  12145  43fe		       85 9c		      sta	temp1
  12146  4400
  12147  4400				  -	      ifconst	pfres
  12148  4400				  -	      ldx	#(pfres-1)*4
  12149  4400					      else
  12150  4400		       a2 2c		      ldx	#44
  12151  4402					      endif
  12152  4402				   down2
  12153  4402		       b5 a3		      lda	playfield-1,x
  12154  4404				  -	      ifconst	superchip
  12155  4404				  -	      sta	playfield-125,x
  12156  4404				  -	      lda	playfield-2,x
  12157  4404				  -	      sta	playfield-126,x
  12158  4404				  -	      lda	playfield-3,x
  12159  4404				  -	      sta	playfield-127,x
  12160  4404				  -	      lda	playfield-4,x
  12161  4404				  -	      sta	playfield-128,x
  12162  4404					      else
  12163  4404		       95 a7		      sta	playfield+3,x
  12164  4406		       b5 a2		      lda	playfield-2,x
  12165  4408		       95 a6		      sta	playfield+2,x
  12166  440a		       b5 a1		      lda	playfield-3,x
  12167  440c		       95 a5		      sta	playfield+1,x
  12168  440e		       b5 a0		      lda	playfield-4,x
  12169  4410		       95 a4		      sta	playfield,x
  12170  4412					      endif
  12171  4412		       8a		      txa
  12172  4413		       cb 04		      sbx	#4
  12173  4415		       d0 eb		      bne	down2
  12174  4417
  12175  4417		       a5 9f		      lda	temp4
  12176  4419				  -	      ifconst	superchip
  12177  4419				  -	      sta	playfield-125
  12178  4419				  -	      lda	temp3
  12179  4419				  -	      sta	playfield-126
  12180  4419				  -	      lda	temp2
  12181  4419				  -	      sta	playfield-127
  12182  4419				  -	      lda	temp1
  12183  4419				  -	      sta	playfield-128
  12184  4419					      else
  12185  4419		       85 a7		      sta	playfield+3
  12186  441b		       a5 9e		      lda	temp3
  12187  441d		       85 a6		      sta	playfield+2
  12188  441f		       a5 9d		      lda	temp2
  12189  4421		       85 a5		      sta	playfield+1
  12190  4423		       a5 9c		      lda	temp1
  12191  4425		       85 a4		      sta	playfield
  12192  4427					      endif
  12193  4427				   noshiftdown
      0  4427					      RETURN
      1  4427				  -	      ifnconst	bankswitch
      2  4427				  -	      rts
      3  4427					      else
      4  4427		       4c dd ff 	      jmp	BS_return
      5  442a					      endif
  12195  442a							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12196  442a
  12197  442a							;standard routines needed for pretty much all games
  12198  442a							; just the random number generator is left - maybe we should remove this asm file altogether?
  12199  442a							; repositioning code and score pointer setup moved to overscan
  12200  442a							; read switches, joysticks now compiler generated (more efficient)
  12201  442a
  12202  442a				   randomize
  12203  442a		       a5 a2		      lda	rand
  12204  442c		       4a		      lsr
  12205  442d					      ifconst	rand16
  12206  442d		       26 ed		      rol	rand16
  12207  442f					      endif
  12208  442f		       90 02		      bcc	noeor
  12209  4431		       49 b4		      eor	#$B4
  12210  4433				   noeor
  12211  4433		       85 a2		      sta	rand
  12212  4435					      ifconst	rand16
  12213  4435		       45 ed		      eor	rand16
  12214  4437					      endif
      0  4437					      RETURN
      1  4437				  -	      ifnconst	bankswitch
      2  4437				  -	      rts
      3  4437					      else
      4  4437		       4c dd ff 	      jmp	BS_return
      5  443a					      endif
  12216  443a							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12217  443a
  12218  443a				   drawscreen
  12219  443a				  -	      ifconst	debugscore
  12220  443a				  -	      ldx	#14
  12221  443a				  -	      lda	INTIM	; display # cycles left in the score
  12222  443a				  -
  12223  443a				  -	      ifconst	mincycles
  12224  443a				  -	      lda	mincycles
  12225  443a				  -	      cmp	INTIM
  12226  443a				  -	      lda	mincycles
  12227  443a				  -	      bcc	nochange
  12228  443a				  -	      lda	INTIM
  12229  443a				  -	      sta	mincycles
  12230  443a				  -nochange
  12231  443a				  -	      endif
  12232  443a				  -
  12233  443a				  -			; cmp #$2B
  12234  443a				  -			; bcs no_cycles_left
  12235  443a				  -	      bmi	cycles_left
  12236  443a				  -	      ldx	#64
  12237  443a				  -	      eor	#$ff	;make negative
  12238  443a				  -cycles_left
  12239  443a				  -	      stx	scorecolor
  12240  443a				  -	      and	#$7f	; clear sign bit
  12241  443a				  -	      tax
  12242  443a				  -	      lda	scorebcd,x
  12243  443a				  -	      sta	score+2
  12244  443a				  -	      lda	scorebcd1,x
  12245  443a				  -	      sta	score+1
  12246  443a				  -	      jmp	done_debugscore
  12247  443a				  -scorebcd
  12248  443a				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
  12249  443a				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
  12250  443a				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
  12251  443a				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
  12252  443a				  -scorebcd1
  12253  443a				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
  12254  443a				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
  12255  443a				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
  12256  443a				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
  12257  443a				  -done_debugscore
  12258  443a					      endif
  12259  443a
  12260  443a				  -	      ifconst	debugcycles
  12261  443a				  -	      lda	INTIM	; if we go over, it mucks up the background color
  12262  443a				  -			; cmp #$2B
  12263  443a				  -			; BCC overscan
  12264  443a				  -	      bmi	overscan
  12265  443a				  -	      sta	COLUBK
  12266  443a				  -	      bcs	doneoverscan
  12267  443a					      endif
  12268  443a
  12269  443a				   overscan
  12270  443a				  -	      ifconst	interlaced
  12271  443a				  -	      PHP
  12272  443a				  -	      PLA
  12273  443a				  -	      EOR	#4	; flip interrupt bit
  12274  443a				  -	      PHA
  12275  443a				  -	      PLP
  12276  443a				  -	      AND	#4	; isolate the interrupt bit
  12277  443a				  -	      TAX		; save it for later
  12278  443a					      endif
  12279  443a
  12280  443a				   overscanloop
  12281  443a		       ad 84 02 	      lda	INTIM	;wait for sync
  12282  443d		       30 fb		      bmi	overscanloop
  12283  443f				   doneoverscan
  12284  443f
  12285  443f							;do VSYNC
  12286  443f
  12287  443f				  -	      ifconst	interlaced
  12288  443f				  -	      CPX	#4
  12289  443f				  -	      BNE	oddframevsync
  12290  443f					      endif
  12291  443f
  12292  443f		       a9 02		      lda	#2
  12293  4441		       85 02		      sta	WSYNC
  12294  4443		       85 00		      sta	VSYNC
  12295  4445		       85 02		      STA	WSYNC
  12296  4447		       85 02		      STA	WSYNC
  12297  4449		       4a		      lsr
  12298  444a		       85 02		      STA	WSYNC
  12299  444c		       85 00		      STA	VSYNC
  12300  444e		       85 01		      sta	VBLANK
  12301  4450					      ifnconst	overscan_time
  12302  4450		       a9 a5		      lda	#37+128
  12303  4452				  -	      else
  12304  4452				  -	      lda	#overscan_time+128
  12305  4452					      endif
  12306  4452		       8d 96 02 	      sta	TIM64T
  12307  4455
  12308  4455				  -	      ifconst	interlaced
  12309  4455				  -	      jmp	postsync
  12310  4455				  -
  12311  4455				  -oddframevsync
  12312  4455				  -	      sta	WSYNC
  12313  4455				  -
  12314  4455				  -	      LDA	($80,X)	; 11 waste
  12315  4455				  -	      LDA	($80,X)	; 11 waste
  12316  4455				  -	      LDA	($80,X)	; 11 waste
  12317  4455				  -
  12318  4455				  -	      lda	#2
  12319  4455				  -	      sta	VSYNC
  12320  4455				  -	      sta	WSYNC
  12321  4455				  -	      sta	WSYNC
  12322  4455				  -	      sta	WSYNC
  12323  4455				  -
  12324  4455				  -	      LDA	($80,X)	; 11 waste
  12325  4455				  -	      LDA	($80,X)	; 11 waste
  12326  4455				  -	      LDA	($80,X)	; 11 waste
  12327  4455				  -
  12328  4455				  -	      lda	#0
  12329  4455				  -	      sta	VSYNC
  12330  4455				  -	      sta	VBLANK
  12331  4455				  -	      ifnconst	overscan_time
  12332  4455				  -	      lda	#37+128
  12333  4455				  -	      else
  12334  4455				  -	      lda	#overscan_time+128
  12335  4455				  -	      endif
  12336  4455				  -	      sta	TIM64T
  12337  4455				  -
  12338  4455				  -postsync
  12339  4455					      endif
  12340  4455
  12341  4455				  -	      ifconst	legacy
  12342  4455				  -	      if	legacy < 100
  12343  4455				  -	      ldx	#4
  12344  4455				  -adjustloop
  12345  4455				  -	      lda	player0x,x
  12346  4455				  -	      sec
  12347  4455				  -	      sbc	#14	;?
  12348  4455				  -	      sta	player0x,x
  12349  4455				  -	      dex
  12350  4455				  -	      bpl	adjustloop
  12351  4455				  -	      endif
  12352  4455					      endif
  12353  4455				  -	      if	((<*)>$e9)&&((<*)<$fa)
  12354  4455				  -	      repeat	($fa-(<*))
  12355  4455				  -	      nop
  12356  4455				  -	      repend
  12357  4455					      endif
  12358  4455		       85 02		      sta	WSYNC
  12359  4457		       a2 04		      ldx	#4
      0  4459					      SLEEP	3
      1  4459				   .CYCLES    SET	3
      2  4459
      3  4459				  -	      IF	.CYCLES < 2
      4  4459				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4459				  -	      ERR
      6  4459					      ENDIF
      7  4459
      8  4459					      IF	.CYCLES & 1
      9  4459					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4459		       04 00		      nop	0
     11  445b				  -	      ELSE
     12  445b				  -	      bit	VSYNC
     13  445b					      ENDIF
     14  445b				   .CYCLES    SET	.CYCLES - 3
     15  445b					      ENDIF
     16  445b
     17  445b				  -	      REPEAT	.CYCLES / 2
     18  445b				  -	      nop
     19  445b					      REPEND
  12361  445b				   HorPosLoop		; 5
  12362  445b		       b5 80		      lda	player0x,X	;+4 9
  12363  445d		       38		      sec		;+2 11
  12364  445e				   DivideLoop
  12365  445e		       e9 0f		      sbc	#15
  12366  4460		       b0 fc		      bcs	DivideLoop	;+4 15
  12367  4462		       95 9c		      sta	temp1,X	;+4 19
  12368  4464		       95 10		      sta	RESP0,X	;+4 23
  12369  4466		       85 02		      sta	WSYNC
  12370  4468		       ca		      dex
  12371  4469		       10 f0		      bpl	HorPosLoop	;+5 5
  12372  446b							; 4
  12373  446b
  12374  446b		       a2 04		      ldx	#4
  12375  446d		       b4 9c		      ldy	temp1,X
  12376  446f		       b9 cb f3 	      lda	repostable-256,Y
  12377  4472		       95 20		      sta	HMP0,X	;+14 18
  12378  4474
  12379  4474		       ca		      dex
  12380  4475		       b4 9c		      ldy	temp1,X
  12381  4477		       b9 cb f3 	      lda	repostable-256,Y
  12382  447a		       95 20		      sta	HMP0,X	;+14 32
  12383  447c
  12384  447c		       ca		      dex
  12385  447d		       b4 9c		      ldy	temp1,X
  12386  447f		       b9 cb f3 	      lda	repostable-256,Y
  12387  4482		       95 20		      sta	HMP0,X	;+14 46
  12388  4484
  12389  4484		       ca		      dex
  12390  4485		       b4 9c		      ldy	temp1,X
  12391  4487		       b9 cb f3 	      lda	repostable-256,Y
  12392  448a		       95 20		      sta	HMP0,X	;+14 60
  12393  448c
  12394  448c		       ca		      dex
  12395  448d		       b4 9c		      ldy	temp1,X
  12396  448f		       b9 cb f3 	      lda	repostable-256,Y
  12397  4492		       95 20		      sta	HMP0,X	;+14 74
  12398  4494
  12399  4494		       85 02		      sta	WSYNC
  12400  4496
  12401  4496		       85 2a		      sta	HMOVE	;+3 3
  12402  4498
  12403  4498
  12404  4498				  -	      ifconst	legacy
  12405  4498				  -	      if	legacy < 100
  12406  4498				  -	      ldx	#4
  12407  4498				  -adjustloop2
  12408  4498				  -	      lda	player0x,x
  12409  4498				  -	      clc
  12410  4498				  -	      adc	#14	;?
  12411  4498				  -	      sta	player0x,x
  12412  4498				  -	      dex
  12413  4498				  -	      bpl	adjustloop2
  12414  4498				  -	      endif
  12415  4498					      endif
  12416  4498
  12417  4498
  12418  4498
  12419  4498
  12420  4498							;set score pointers
  12421  4498		       a7 95		      lax	score+2
  12422  449a		       20 cb f4 	      jsr	scorepointerset
  12423  449d		       84 9b		      sty	scorepointers+5
  12424  449f		       86 98		      stx	scorepointers+2
  12425  44a1		       a7 94		      lax	score+1
  12426  44a3		       20 cb f4 	      jsr	scorepointerset
  12427  44a6		       84 9a		      sty	scorepointers+4
  12428  44a8		       86 97		      stx	scorepointers+1
  12429  44aa		       a7 93		      lax	score
  12430  44ac		       20 cb f4 	      jsr	scorepointerset
  12431  44af		       84 99		      sty	scorepointers+3
  12432  44b1		       86 96		      stx	scorepointers
  12433  44b3
  12434  44b3				   vblk
  12435  44b3							; run possible vblank bB code
  12436  44b3				  -	      ifconst	vblank_bB_code
  12437  44b3				  -	      jsr	vblank_bB_code
  12438  44b3					      endif
  12439  44b3				   vblk2
  12440  44b3		       ad 84 02 	      LDA	INTIM
  12441  44b6		       30 fb		      bmi	vblk2
  12442  44b8		       4c 00 f0 	      jmp	kernel
  12443  44bb
  12444  44bb
  12445  44bb		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
  12446  44c4		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
  12447  44cb				   repostable
  12448  44cb
  12449  44cb				   scorepointerset
  12450  44cb		       29 0f		      and	#$0F
  12451  44cd		       0a		      asl
  12452  44ce		       0a		      asl
  12453  44cf		       0a		      asl
  12454  44d0		       69 74		      adc	#<scoretable
  12455  44d2		       a8		      tay
  12456  44d3		       8a		      txa
  12457  44d4							; and #$F0
  12458  44d4							; lsr
  12459  44d4		       4b f0		      asr	#$F0
  12460  44d6		       69 74		      adc	#<scoretable
  12461  44d8		       aa		      tax
  12462  44d9		       60		      rts
  12463  44da							;bB.asm
  12464  44da							; bB.asm file is split here
  12465  44da				  -	      if	(<*) > (<(*+9))
  12466  44da				  -	      repeat	($100-<*)
  12467  44da				  -	      .byte	0
  12468  44da				  -	      repend
  12469  44da					      endif
  12470  44da				   playercolorL0205_1
  12471  44da		       26		      .byte.b	_26
  12472  44db		       9c		      .byte.b	_9C
  12473  44dc		       9c		      .byte.b	_9C
  12474  44dd		       9c		      .byte.b	_9C
  12475  44de		       da		      .byte.b	_DA
  12476  44df		       da		      .byte.b	_DA
  12477  44e0		       3c		      .byte.b	_3C
  12478  44e1		       3c		      .byte.b	_3C
  12479  44e2		       3c		      .byte.b	_3C
  12480  44e3		       26		      .byte.b	_26
  12481  44e4				  -	      if	(<*) > (<(*+9))
  12482  44e4				  -	      repeat	($100-<*)
  12483  44e4				  -	      .byte	0
  12484  44e4				  -	      repend
  12485  44e4					      endif
  12486  44e4				   playerL0206_1
  12487  44e4		       66		      .byte.b	%01100110
  12488  44e5		       24		      .byte.b	%00100100
  12489  44e6		       3c		      .byte.b	%00111100
  12490  44e7		       18		      .byte.b	%00011000
  12491  44e8		       5a		      .byte.b	%01011010
  12492  44e9		       3c		      .byte.b	%00111100
  12493  44ea		       18		      .byte.b	%00011000
  12494  44eb		       3c		      .byte.b	%00111100
  12495  44ec		       3c		      .byte.b	%00111100
  12496  44ed		       18		      .byte.b	%00011000
  12497  44ee				  -	      if	(<*) > (<(*+9))
  12498  44ee				  -	      repeat	($100-<*)
  12499  44ee				  -	      .byte	0
  12500  44ee				  -	      repend
  12501  44ee					      endif
  12502  44ee				   playercolorL0217_1
  12503  44ee		       26		      .byte.b	_26
  12504  44ef		       9c		      .byte.b	_9C
  12505  44f0		       9c		      .byte.b	_9C
  12506  44f1		       9c		      .byte.b	_9C
  12507  44f2		       da		      .byte.b	_DA
  12508  44f3		       da		      .byte.b	_DA
  12509  44f4		       3c		      .byte.b	_3C
  12510  44f5		       26		      .byte.b	_26
  12511  44f6		       26		      .byte.b	_26
  12512  44f7		       26		      .byte.b	_26
  12513  44f8					      if	(<*) > (<(*+9))
  12514  44f8					      repeat	($100-<*)
  12515  44f8		       00		      .byte.b	0
  12514  44f8					      repend
  12515  44f9		       00		      .byte.b	0
  12514  44f9					      repend
  12515  44fa		       00		      .byte.b	0
  12514  44fa					      repend
  12515  44fb		       00		      .byte.b	0
  12514  44fb					      repend
  12515  44fc		       00		      .byte.b	0
  12514  44fc					      repend
  12515  44fd		       00		      .byte.b	0
  12514  44fd					      repend
  12515  44fe		       00		      .byte.b	0
  12514  44fe					      repend
  12515  44ff		       00		      .byte.b	0
  12516  4500					      repend
  12517  4500					      endif
  12518  4500				   playercolorL0271_1
  12519  4500		       26		      .byte.b	_26
  12520  4501		       9c		      .byte.b	_9C
  12521  4502		       9c		      .byte.b	_9C
  12522  4503		       9c		      .byte.b	_9C
  12523  4504		       da		      .byte.b	_DA
  12524  4505		       da		      .byte.b	_DA
  12525  4506		       3c		      .byte.b	_3C
  12526  4507		       3c		      .byte.b	_3C
  12527  4508		       3c		      .byte.b	_3C
  12528  4509		       26		      .byte.b	_26
  12529  450a				  -	      if	(<*) > (<(*+9))
  12530  450a				  -	      repeat	($100-<*)
  12531  450a				  -	      .byte	0
  12532  450a				  -	      repend
  12533  450a					      endif
  12534  450a				   playerL0274_1
  12535  450a		       66		      .byte.b	%01100110
  12536  450b		       66		      .byte.b	%01100110
  12537  450c		       3c		      .byte.b	%00111100
  12538  450d		       0c		      .byte.b	%00001100
  12539  450e		       3c		      .byte.b	%00111100
  12540  450f		       1c		      .byte.b	%00011100
  12541  4510		       18		      .byte.b	%00011000
  12542  4511		       3c		      .byte.b	%00111100
  12543  4512		       3c		      .byte.b	%00111100
  12544  4513		       18		      .byte.b	%00011000
  12545  4514				  -	      if	(<*) > (<(*+9))
  12546  4514				  -	      repeat	($100-<*)
  12547  4514				  -	      .byte	0
  12548  4514				  -	      repend
  12549  4514					      endif
  12550  4514				   playerL0276_1
  12551  4514		       c3		      .byte.b	%11000011
  12552  4515		       63		      .byte.b	%01100011
  12553  4516		       3e		      .byte.b	%00111110
  12554  4517		       1c		      .byte.b	%00011100
  12555  4518		       3c		      .byte.b	%00111100
  12556  4519		       5e		      .byte.b	%01011110
  12557  451a		       18		      .byte.b	%00011000
  12558  451b		       3c		      .byte.b	%00111100
  12559  451c		       3c		      .byte.b	%00111100
  12560  451d		       18		      .byte.b	%00011000
  12561  451e				  -	      if	(<*) > (<(*+9))
  12562  451e				  -	      repeat	($100-<*)
  12563  451e				  -	      .byte	0
  12564  451e				  -	      repend
  12565  451e					      endif
  12566  451e				   playerL0278_1
  12567  451e		       36		      .byte.b	%00110110
  12568  451f		       36		      .byte.b	%00110110
  12569  4520		       1c		      .byte.b	%00011100
  12570  4521		       0c		      .byte.b	%00001100
  12571  4522		       3c		      .byte.b	%00111100
  12572  4523		       1c		      .byte.b	%00011100
  12573  4524		       18		      .byte.b	%00011000
  12574  4525		       3c		      .byte.b	%00111100
  12575  4526		       3c		      .byte.b	%00111100
  12576  4527		       18		      .byte.b	%00011000
  12577  4528				  -	      if	(<*) > (<(*+9))
  12578  4528				  -	      repeat	($100-<*)
  12579  4528				  -	      .byte	0
  12580  4528				  -	      repend
  12581  4528					      endif
  12582  4528				   playerL0280_1
  12583  4528		       3c		      .byte.b	%00111100
  12584  4529		       1c		      .byte.b	%00011100
  12585  452a		       1c		      .byte.b	%00011100
  12586  452b		       04		      .byte.b	%00000100
  12587  452c		       1c		      .byte.b	%00011100
  12588  452d		       1c		      .byte.b	%00011100
  12589  452e		       18		      .byte.b	%00011000
  12590  452f		       3c		      .byte.b	%00111100
  12591  4530		       3c		      .byte.b	%00111100
  12592  4531		       18		      .byte.b	%00011000
  12593  4532				  -	      if	(<*) > (<(*+9))
  12594  4532				  -	      repeat	($100-<*)
  12595  4532				  -	      .byte	0
  12596  4532				  -	      repend
  12597  4532					      endif
  12598  4532				   playerL0282_1
  12599  4532		       66		      .byte.b	%01100110
  12600  4533		       24		      .byte.b	%00100100
  12601  4534		       1c		      .byte.b	%00011100
  12602  4535		       18		      .byte.b	%00011000
  12603  4536		       7a		      .byte.b	%01111010
  12604  4537		       3c		      .byte.b	%00111100
  12605  4538		       18		      .byte.b	%00011000
  12606  4539		       3c		      .byte.b	%00111100
  12607  453a		       3c		      .byte.b	%00111100
  12608  453b		       18		      .byte.b	%00011000
  12609  453c				  -	      if	(<*) > (<(*+9))
  12610  453c				  -	      repeat	($100-<*)
  12611  453c				  -	      .byte	0
  12612  453c				  -	      repend
  12613  453c					      endif
  12614  453c				   playerL0284_1
  12615  453c		       60		      .byte.b	%01100000
  12616  453d		       26		      .byte.b	%00100110
  12617  453e		       3c		      .byte.b	%00111100
  12618  453f		       18		      .byte.b	%00011000
  12619  4540		       3e		      .byte.b	%00111110
  12620  4541		       3e		      .byte.b	%00111110
  12621  4542		       18		      .byte.b	%00011000
  12622  4543		       3c		      .byte.b	%00111100
  12623  4544		       3c		      .byte.b	%00111100
  12624  4545		       18		      .byte.b	%00011000
  12625  4546				  -	      if	(<*) > (<(*+9))
  12626  4546				  -	      repeat	($100-<*)
  12627  4546				  -	      .byte	0
  12628  4546				  -	      repend
  12629  4546					      endif
  12630  4546				   playerL0286_1
  12631  4546		       66		      .byte.b	%01100110
  12632  4547		       24		      .byte.b	%00100100
  12633  4548		       38		      .byte.b	%00111000
  12634  4549		       18		      .byte.b	%00011000
  12635  454a		       5e		      .byte.b	%01011110
  12636  454b		       3c		      .byte.b	%00111100
  12637  454c		       18		      .byte.b	%00011000
  12638  454d		       3c		      .byte.b	%00111100
  12639  454e		       3c		      .byte.b	%00111100
  12640  454f		       18		      .byte.b	%00011000
  12641  4550				  -	      if	(<*) > (<(*+9))
  12642  4550				  -	      repeat	($100-<*)
  12643  4550				  -	      .byte	0
  12644  4550				  -	      repend
  12645  4550					      endif
  12646  4550				   playerL0288_1
  12647  4550		       06		      .byte.b	%00000110
  12648  4551		       64		      .byte.b	%01100100
  12649  4552		       3c		      .byte.b	%00111100
  12650  4553		       18		      .byte.b	%00011000
  12651  4554		       7c		      .byte.b	%01111100
  12652  4555		       7c		      .byte.b	%01111100
  12653  4556		       18		      .byte.b	%00011000
  12654  4557		       3c		      .byte.b	%00111100
  12655  4558		       3c		      .byte.b	%00111100
  12656  4559		       18		      .byte.b	%00011000
  12657  455a				  -	      if	(<*) > (<(*+7))
  12658  455a				  -	      repeat	($100-<*)
  12659  455a				  -	      .byte	0
  12660  455a				  -	      repend
  12661  455a					      endif
  12662  455a				   playerL0316_0
  12663  455a		       ff		      .byte.b	%11111111
  12664  455b		       ff		      .byte.b	%11111111
  12665  455c		       ff		      .byte.b	%11111111
  12666  455d		       00		      .byte.b	%00000000
  12667  455e		       7e		      .byte.b	%01111110
  12668  455f		       7e		      .byte.b	%01111110
  12669  4560		       00		      .byte.b	%00000000
  12670  4561		       3c		      .byte.b	%00111100
  12671  4562				  -	      if	(<*) > (<(*+7))
  12672  4562				  -	      repeat	($100-<*)
  12673  4562				  -	      .byte	0
  12674  4562				  -	      repend
  12675  4562					      endif
  12676  4562				   playerL0394_0
  12677  4562		       3c		      .byte.b	%00111100
  12678  4563		       00		      .byte.b	%00000000
  12679  4564		       7e		      .byte.b	%01111110
  12680  4565		       7e		      .byte.b	%01111110
  12681  4566		       00		      .byte.b	%00000000
  12682  4567		       ff		      .byte.b	%11111111
  12683  4568		       ff		      .byte.b	%11111111
  12684  4569		       ff		      .byte.b	%11111111
  12685  456a					      if	ECHOFIRST
      2570 bytes of ROM space left in bank 4
  12686  456a					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
  12687  456a					      endif
  12688  456a		       00 01	   ECHOFIRST  =	1
  12689  456a
  12690  456a
  12691  456a							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12692  456a
  12693  456a							; feel free to modify the score graphics - just keep each digit 8 high
  12694  456a							; and keep the conditional compilation stuff intact
  12695  456a				  -	      ifconst	ROM2k
  12696  456a				  -	      ORG	$F7AC-8
  12697  456a					      else
  12698  456a					      ifconst	bankswitch
  12699  456a				  -	      if	bankswitch == 8
  12700  456a				  -	      ORG	$2F94-bscode_length
  12701  456a				  -	      RORG	$FF94-bscode_length
  12702  456a					      endif
  12703  456a					      if	bankswitch == 16
  12704  4f74					      ORG	$4F94-bscode_length
  12705  4f74					      RORG	$FF94-bscode_length
  12706  4f74					      endif
  12707  4f74				  -	      if	bankswitch == 32
  12708  4f74				  -	      ORG	$8F94-bscode_length
  12709  4f74				  -	      RORG	$FF94-bscode_length
  12710  4f74					      endif
  12711  4f74				  -	      if	bankswitch == 64
  12712  4f74				  -	      ORG	$10F80-bscode_length
  12713  4f74				  -	      RORG	$1FF80-bscode_length
  12714  4f74					      endif
  12715  4f74				  -	      else
  12716  4f74				  -	      ORG	$FF9C
  12717  4f74					      endif
  12718  4f74					      endif
  12719  4f74
  12720  4f74							; font equates
  12721  4f74		       00 01	   .21stcentury =	1
  12722  4f74		       00 02	   alarmclock =	2
  12723  4f74		       00 03	   handwritten =	3
  12724  4f74		       00 04	   interrupted =	4
  12725  4f74		       00 05	   retroputer =	5
  12726  4f74		       00 06	   whimsey    =	6
  12727  4f74		       00 07	   tiny       =	7
  12728  4f74		       00 08	   hex	      =	8
  12729  4f74
  12730  4f74				  -	      ifconst	font
  12731  4f74				  -	      if	font == hex
  12732  4f74				  -	      ORG	. - 48
  12733  4f74				  -	      endif
  12734  4f74					      endif
  12735  4f74
  12736  4f74				   scoretable
  12737  4f74
  12738  4f74				  -	      ifconst	font
  12739  4f74				  -	      if	font == .21stcentury
  12740  4f74				  -	      include	"score_graphics.asm.21stcentury"
  12741  4f74				  -	      endif
  12742  4f74				  -	      if	font == alarmclock
  12743  4f74				  -	      include	"score_graphics.asm.alarmclock"
  12744  4f74				  -	      endif
  12745  4f74				  -	      if	font == handwritten
  12746  4f74				  -	      include	"score_graphics.asm.handwritten"
  12747  4f74				  -	      endif
  12748  4f74				  -	      if	font == interrupted
  12749  4f74				  -	      include	"score_graphics.asm.interrupted"
  12750  4f74				  -	      endif
  12751  4f74				  -	      if	font == retroputer
  12752  4f74				  -	      include	"score_graphics.asm.retroputer"
  12753  4f74				  -	      endif
  12754  4f74				  -	      if	font == whimsey
  12755  4f74				  -	      include	"score_graphics.asm.whimsey"
  12756  4f74				  -	      endif
  12757  4f74				  -	      if	font == tiny
  12758  4f74				  -	      include	"score_graphics.asm.tiny"
  12759  4f74				  -	      endif
  12760  4f74				  -	      if	font == hex
  12761  4f74				  -	      include	"score_graphics.asm.hex"
  12762  4f74				  -	      endif
  12763  4f74					      else		; default font
  12764  4f74
  12765  4f74		       3c		      .byte.b	%00111100
  12766  4f75		       66		      .byte.b	%01100110
  12767  4f76		       66		      .byte.b	%01100110
  12768  4f77		       66		      .byte.b	%01100110
  12769  4f78		       66		      .byte.b	%01100110
  12770  4f79		       66		      .byte.b	%01100110
  12771  4f7a		       66		      .byte.b	%01100110
  12772  4f7b		       3c		      .byte.b	%00111100
  12773  4f7c
  12774  4f7c		       7e		      .byte.b	%01111110
  12775  4f7d		       18		      .byte.b	%00011000
  12776  4f7e		       18		      .byte.b	%00011000
  12777  4f7f		       18		      .byte.b	%00011000
  12778  4f80		       18		      .byte.b	%00011000
  12779  4f81		       38		      .byte.b	%00111000
  12780  4f82		       18		      .byte.b	%00011000
  12781  4f83		       08		      .byte.b	%00001000
  12782  4f84
  12783  4f84		       7e		      .byte.b	%01111110
  12784  4f85		       60		      .byte.b	%01100000
  12785  4f86		       60		      .byte.b	%01100000
  12786  4f87		       3c		      .byte.b	%00111100
  12787  4f88		       06		      .byte.b	%00000110
  12788  4f89		       06		      .byte.b	%00000110
  12789  4f8a		       46		      .byte.b	%01000110
  12790  4f8b		       3c		      .byte.b	%00111100
  12791  4f8c
  12792  4f8c		       3c		      .byte.b	%00111100
  12793  4f8d		       46		      .byte.b	%01000110
  12794  4f8e		       06		      .byte.b	%00000110
  12795  4f8f		       06		      .byte.b	%00000110
  12796  4f90		       1c		      .byte.b	%00011100
  12797  4f91		       06		      .byte.b	%00000110
  12798  4f92		       46		      .byte.b	%01000110
  12799  4f93		       3c		      .byte.b	%00111100
  12800  4f94
  12801  4f94		       0c		      .byte.b	%00001100
  12802  4f95		       0c		      .byte.b	%00001100
  12803  4f96		       7e		      .byte.b	%01111110
  12804  4f97		       4c		      .byte.b	%01001100
  12805  4f98		       4c		      .byte.b	%01001100
  12806  4f99		       2c		      .byte.b	%00101100
  12807  4f9a		       1c		      .byte.b	%00011100
  12808  4f9b		       0c		      .byte.b	%00001100
  12809  4f9c
  12810  4f9c		       3c		      .byte.b	%00111100
  12811  4f9d		       46		      .byte.b	%01000110
  12812  4f9e		       06		      .byte.b	%00000110
  12813  4f9f		       06		      .byte.b	%00000110
  12814  4fa0		       3c		      .byte.b	%00111100
  12815  4fa1		       60		      .byte.b	%01100000
  12816  4fa2		       60		      .byte.b	%01100000
  12817  4fa3		       7e		      .byte.b	%01111110
  12818  4fa4
  12819  4fa4		       3c		      .byte.b	%00111100
  12820  4fa5		       66		      .byte.b	%01100110
  12821  4fa6		       66		      .byte.b	%01100110
  12822  4fa7		       66		      .byte.b	%01100110
  12823  4fa8		       7c		      .byte.b	%01111100
  12824  4fa9		       60		      .byte.b	%01100000
  12825  4faa		       62		      .byte.b	%01100010
  12826  4fab		       3c		      .byte.b	%00111100
  12827  4fac
  12828  4fac		       30		      .byte.b	%00110000
  12829  4fad		       30		      .byte.b	%00110000
  12830  4fae		       30		      .byte.b	%00110000
  12831  4faf		       18		      .byte.b	%00011000
  12832  4fb0		       0c		      .byte.b	%00001100
  12833  4fb1		       06		      .byte.b	%00000110
  12834  4fb2		       42		      .byte.b	%01000010
  12835  4fb3		       3e		      .byte.b	%00111110
  12836  4fb4
  12837  4fb4		       3c		      .byte.b	%00111100
  12838  4fb5		       66		      .byte.b	%01100110
  12839  4fb6		       66		      .byte.b	%01100110
  12840  4fb7		       66		      .byte.b	%01100110
  12841  4fb8		       3c		      .byte.b	%00111100
  12842  4fb9		       66		      .byte.b	%01100110
  12843  4fba		       66		      .byte.b	%01100110
  12844  4fbb		       3c		      .byte.b	%00111100
  12845  4fbc
  12846  4fbc		       3c		      .byte.b	%00111100
  12847  4fbd		       46		      .byte.b	%01000110
  12848  4fbe		       06		      .byte.b	%00000110
  12849  4fbf		       3e		      .byte.b	%00111110
  12850  4fc0		       66		      .byte.b	%01100110
  12851  4fc1		       66		      .byte.b	%01100110
  12852  4fc2		       66		      .byte.b	%01100110
  12853  4fc3		       3c		      .byte.b	%00111100
  12854  4fc4
  12855  4fc4					      ifnconst	DPC_kernel_options
  12856  4fc4
  12857  4fc4		       00		      .byte.b	%00000000
  12858  4fc5		       00		      .byte.b	%00000000
  12859  4fc6		       00		      .byte.b	%00000000
  12860  4fc7		       00		      .byte.b	%00000000
  12861  4fc8		       00		      .byte.b	%00000000
  12862  4fc9		       00		      .byte.b	%00000000
  12863  4fca		       00		      .byte.b	%00000000
  12864  4fcb		       00		      .byte.b	%00000000
  12865  4fcc
  12866  4fcc					      endif
  12867  4fcc
  12868  4fcc					      endif
  12869  4fcc
  12870  4fcc				  -	      ifconst	ROM2k
  12871  4fcc				  -	      ORG	$F7FC
  12872  4fcc					      else
  12873  4fcc					      ifconst	bankswitch
  12874  4fcc				  -	      if	bankswitch == 8
  12875  4fcc				  -	      ORG	$2FF4-bscode_length
  12876  4fcc				  -	      RORG	$FFF4-bscode_length
  12877  4fcc					      endif
  12878  4fcc					      if	bankswitch == 16
  12879  4fd4					      ORG	$4FF4-bscode_length
  12880  4fd4					      RORG	$FFF4-bscode_length
  12881  4fd4					      endif
  12882  4fd4				  -	      if	bankswitch == 32
  12883  4fd4				  -	      ORG	$8FF4-bscode_length
  12884  4fd4				  -	      RORG	$FFF4-bscode_length
  12885  4fd4					      endif
  12886  4fd4				  -	      if	bankswitch == 64
  12887  4fd4				  -	      ORG	$10FE0-bscode_length
  12888  4fd4				  -	      RORG	$1FFE0-bscode_length
  12889  4fd4					      endif
  12890  4fd4				  -	      else
  12891  4fd4				  -	      ORG	$FFFC
  12892  4fd4					      endif
  12893  4fd4					      endif
  12894  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12895  4fd4
  12896  4fd4							; every bank has this stuff at the same place
  12897  4fd4							; this code can switch to/from any bank at any entry point
  12898  4fd4							; and can preserve register values
  12899  4fd4							; note: lines not starting with a space are not placed in all banks
  12900  4fd4							;
  12901  4fd4							; line below tells the compiler how long this is - do not remove
  12902  4fd4							;size=32
  12903  4fd4
  12904  4fd4				   begin_bscode
  12905  4fd4		       a2 ff		      ldx	#$ff
  12906  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
  12907  4fd6				  -	      stx	FASTFETCH
  12908  4fd6					      endif
  12909  4fd6		       9a		      txs
  12910  4fd7				  -	      if	bankswitch == 64
  12911  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  12912  4fd7					      else
  12913  4fd7		       a9 f2		      lda	#>(start-1)
  12914  4fd9					      endif
  12915  4fd9		       48		      pha
  12916  4fda		       a9 4f		      lda	#<(start-1)
  12917  4fdc		       48		      pha
  12918  4fdd
  12919  4fdd				   BS_return
  12920  4fdd		       48		      pha
  12921  4fde		       8a		      txa
  12922  4fdf		       48		      pha
  12923  4fe0		       ba		      tsx
  12924  4fe1
  12925  4fe1					      if	bankswitch != 64
  12926  4fe1		       b5 04		      lda	4,x	; get high byte of return address
  12927  4fe3
  12928  4fe3		       2a		      rol
  12929  4fe4		       2a		      rol
  12930  4fe5		       2a		      rol
  12931  4fe6		       2a		      rol
  12932  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  12933  4fe9		       aa		      tax
  12934  4fea		       e8		      inx
  12935  4feb				  -	      else
  12936  4feb				  -	      lda	4,x	; get high byte of return address
  12937  4feb				  -	      tay
  12938  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  12939  4feb				  -	      sta	4,x
  12940  4feb				  -	      tya
  12941  4feb				  -	      lsr
  12942  4feb				  -	      lsr
  12943  4feb				  -	      lsr
  12944  4feb				  -	      lsr
  12945  4feb				  -	      tax
  12946  4feb				  -	      inx
  12947  4feb					      endif
  12948  4feb
  12949  4feb				   BS_jsr
  12950  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
  12951  4fee		       68		      pla
  12952  4fef		       aa		      tax
  12953  4ff0		       68		      pla
  12954  4ff1		       60		      rts
  12955  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  12956  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  12957  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  12958  4ff2					      endif
  12959  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
  12960  4ff2
  12961  4ff2					      ifconst	bankswitch
  12962  4ff2				  -	      if	bankswitch == 8
  12963  4ff2				  -	      ORG	$2FFC
  12964  4ff2				  -	      RORG	$FFFC
  12965  4ff2					      endif
  12966  4ff2					      if	bankswitch == 16
  12967  4ffc					      ORG	$4FFC
  12968  4ffc					      RORG	$FFFC
  12969  4ffc					      endif
  12970  4ffc				  -	      if	bankswitch == 32
  12971  4ffc				  -	      ORG	$8FFC
  12972  4ffc				  -	      RORG	$FFFC
  12973  4ffc					      endif
  12974  4ffc				  -	      if	bankswitch == 64
  12975  4ffc				  -	      ORG	$10FF0
  12976  4ffc				  -	      RORG	$1FFF0
  12977  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
  12978  4ffc				  -	      ORG	$10FF8
  12979  4ffc				  -	      RORG	$1FFF8
  12980  4ffc				  -	      ifconst	superchip
  12981  4ffc				  -	      .byte	"E","F","S","C"
  12982  4ffc				  -	      else
  12983  4ffc				  -	      .byte	"E","F","E","F"
  12984  4ffc				  -	      endif
  12985  4ffc				  -	      ORG	$10FFC
  12986  4ffc				  -	      RORG	$1FFFC
  12987  4ffc					      endif
  12988  4ffc				  -	      else
  12989  4ffc				  -	      ifconst	ROM2k
  12990  4ffc				  -	      ORG	$F7FC
  12991  4ffc				  -	      else
  12992  4ffc				  -	      ORG	$FFFC
  12993  4ffc				  -	      endif
  12994  4ffc					      endif
  12995  4ffc		       50 f2		      .word.w	(start & $ffff)
  12996  4ffe		       50 f2		      .word.w	(start & $ffff)

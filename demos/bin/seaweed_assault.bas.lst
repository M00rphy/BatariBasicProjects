------- FILE e:\Documents\bB\demos\seaweed_assault.bas.asm LEVEL 1 PASS 3
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE e:\Documents\bB\demos\seaweed_assault.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE e:\Documents\bB\demos\seaweed_assault.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  9000 ????				      include	"2600basic.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 19	   _SD_Gyvolver_length =	.skipL01371-_SD_Gyvolver
      4  9000 ????
      5  9000 ????	       00 b9	   _SD_Over_length =	.skipL01370-_SD_Over
      6  9000 ????
      7  9000 ????	       00 8d	   _SD_Corroded_Chase_length =	.skipL01228-_SD_Corroded_Chase
      8  9000 ????
      9  9000 ????	       00 65	   _SD_Corroded_Hit_Ship_length =	.skipL01227-_SD_Corroded_Hit_Ship
     10  9000 ????
     11  9000 ????	       00 49	   _SD_Corroded_Seaweed_Moosh_length =	.skipL01226-_SD_Corroded_Seaweed_Moosh
     12  9000 ????
     13  9000 ????	       00 69	   _SD_Corroded_Tick_Down_length =	.skipL01225-_SD_Corroded_Tick_Down
     14  9000 ????
     15  9000 ????	       00 61	   _SD_Health_Can_length =	.skipL01224-_SD_Health_Can
     16  9000 ????
     17  9000 ????	       00 69	   _SD_Bonus_Get_length =	.skipL01223-_SD_Bonus_Get
     18  9000 ????
     19  9000 ????	       00 d5	   _SD_1000_Health_length =	.skipL01222-_SD_1000_Health
     20  9000 ????
     21  9000 ????	       00 91	   _SD_Ship_Drop_In_length =	.skipL01221-_SD_Ship_Drop_In
     22  9000 ????
     23  9000 ????	       00 8d	   _SD_Wroth_length =	.skipL01220-_SD_Wroth
     24  9000 ????
     25  9000 ????	       00 25	   _SD_Grab_length =	.skipL01219-_SD_Grab
     26  9000 ????
     27  9000 ????	       00 2d	   _SD_Shoot_length =	.skipL01218-_SD_Shoot
     28  9000 ????
     29  9000 ????	       00 31	   _SD_Ouch_length =	.skipL01217-_SD_Ouch
     30  9000 ????
     31  9000 ????	       00 31	   _SD_M_H_02_length =	.skipL01216-_SD_M_H_02
     32  9000 ????
     33  9000 ????	       00 2d	   _SD_M_Hit_length =	.skipL01215-_SD_M_Hit
     34  9000 ????
     35  9000 ????	       00 24	   _D_Homing_H_length =	.skipL0916-_D_Homing_H
     36  9000 ????
     37  9000 ????	       00 20	   bscode_length =	32
     38  9000 ????	       00 25	   _SD_Title_Seaweed_length =	.skipL0231-_SD_Title_Seaweed
     39  9000 ????
     40  9000 ????	       00 0b	   _c_MLS_Seaweed_Close_In =	11
     41  9000 ????
     42  9000 ????	       00 0a	   _c_GO_Seaweed_Attack =	10
     43  9000 ????
     44  9000 ????	       00 09	   _c_Corroded_Hit_Ship =	9
     45  9000 ????
     46  9000 ????	       00 08	   _c_Corroded_Chase =	8
     47  9000 ????
     48  9000 ????	       00 07	   _c_Corroded_Seaweed_Moosh =	7
     49  9000 ????
     50  9000 ????	       00 06	   _c_Corroded_Tick_Down =	6
     51  9000 ????
     52  9000 ????	       00 05	   _c_Canister_Touched =	5
     53  9000 ????
     54  9000 ????	       00 04	   _c_Canister_Appear =	4
     55  9000 ????
     56  9000 ????	       00 03	   _c_Wrothopod =	3
     57  9000 ????
     58  9000 ????	       00 02	   _c_Tentacle_Reaching_Up =	2
     59  9000 ????
     60  9000 ????	       00 01	   _c_Ship_Drop_In =	1
     61  9000 ????
     62  9000 ????	       00 07	   _c_Gyvolver =	7
     63  9000 ????
     64  9000 ????	       00 06	   _c_Game_Over =	6
     65  9000 ????
     66  9000 ????	       00 05	   _c_1000_Health =	5
     67  9000 ????
     68  9000 ????	       00 04	   _c_Shoot   =	4
     69  9000 ????
     70  9000 ????	       00 03	   _c_Ship_Bounce =	3
     71  9000 ????
     72  9000 ????	       00 02	   _c_Torp_Hit_Seaweed_02 =	2
     73  9000 ????
     74  9000 ????	       00 01	   _c_Torp_Hit_Seaweed_01 =	1
     75  9000 ????
     76  9000 ????	       00 01	   pfscore    =	1
     77  9000 ????
     78  9000 ????	       00 95	   _sc3       =	score + 2
     79  9000 ????
     80  9000 ????	       00 94	   _sc2       =	score + 1
     81  9000 ????
     82  9000 ????	       00 93	   _sc1       =	score
     83  9000 ????
     84  9000 ????	       00 d3	   rand16     =	var47
     85  9000 ????
     86  9000 ????	       00 d2	   _Bit2_Right_Left_Hand =	var46
     87  9000 ????
     88  9000 ????	       00 d2	   _Bit1_Auto_Play =	var46
     89  9000 ????
     90  9000 ????	       00 d2	   _Bit0_Game_Control =	var46
     91  9000 ????
     92  9000 ????	       00 d1	   _SC_Back   =	var45
     93  9000 ????
     94  9000 ????	       00 d0	   _Replication_Rate_Storage =	var44
     95  9000 ????
     96  9000 ????	       00 c7	   _Bit7_Tentacle_Touched =	var35
     97  9000 ????
     98  9000 ????	       00 c7	   _Bit6_Manatee_Moved_Away =	var35
     99  9000 ????
    100  9000 ????	       00 c7	   _Bit5_Manatee_Health_Color =	var35
    101  9000 ????
    102  9000 ????	       00 c7	   _Bit4_Manatee_Hurt_Color =	var35
    103  9000 ????
    104  9000 ????	       00 c7	   _Bit3_Easter_Egg =	var35
    105  9000 ????
    106  9000 ????	       00 c7	   _Bit2_1000_On =	var35
    107  9000 ????
    108  9000 ????	       00 c7	   _Bit1_Pause_Check =	var35
    109  9000 ????
    110  9000 ????	       00 c7	   _Bit0_Pause_Position =	var35
    111  9000 ????
    112  9000 ????	       00 c6	   _Bit7_Select_Restrainer =	var34
    113  9000 ????
    114  9000 ????	       00 c6	   _Bit6_Homing_Color_Cycle_On =	var34
    115  9000 ????
    116  9000 ????	       00 c6	   _Bit5_Bonus_500_Trigger =	var34
    117  9000 ????
    118  9000 ????	       00 c6	   _Bit4_Corrdd_Can_Swd_Shot =	var34
    119  9000 ????
    120  9000 ????	       00 c6	   _Bit3_Corroded_Can_Chase_Player =	var34
    121  9000 ????
    122  9000 ????	       00 c6	   _Bit2_Corrdd_Can_On =	var34
    123  9000 ????
    124  9000 ????	       00 c6	   _Bit1_Canister_Trigger =	var34
    125  9000 ????
    126  9000 ????	       00 c6	   _Bit0_Thousand_Bonus_Later =	var34
    127  9000 ????
    128  9000 ????	       00 c5	   _Bit7_Vblank02 =	var33
    129  9000 ????
    130  9000 ????	       00 c5	   _Bit6_Wroth_Touched =	var33
    131  9000 ????
    132  9000 ????	       00 c5	   _Bit5_Wroth_Mad =	var33
    133  9000 ????
    134  9000 ????	       00 c5	   _Bit4_Bonus_500_On =	var33
    135  9000 ????
    136  9000 ????	       00 c5	   _Bit3_Canister_Later =	var33
    137  9000 ????
    138  9000 ????	       00 c5	   _Bit2_Wroth_Flip =	var33
    139  9000 ????
    140  9000 ????	       00 c5	   _Bit1_Wrothopod_On =	var33
    141  9000 ????
    142  9000 ????	       00 c5	   _Bit0_Canister_P1_On =	var33
    143  9000 ????
    144  9000 ????	       00 c4	   _Bit7_Vblank01 =	var32
    145  9000 ????
    146  9000 ????	       00 c4	   _Bit6_Swap_Scores =	var32
    147  9000 ????
    148  9000 ????	       00 c4	   _Bit5_Sound_Alt_Torpedo_Hit =	var32
    149  9000 ????
    150  9000 ????	       00 c4	   _Bit4_Game_Started =	var32
    151  9000 ????
    152  9000 ????	       00 c4	   _Bit3_Ship_Yanked_Down =	var32
    153  9000 ????
    154  9000 ????	       00 c4	   _Bit2_Move_Tentacle_Up =	var32
    155  9000 ????
    156  9000 ????	       00 c4	   _Bit1_Tmp_Ship_On_Screen =	var32
    157  9000 ????
    158  9000 ????	       00 c4	   _Bit1_Joystick_Restrainer_Tmp =	var32
    159  9000 ????
    160  9000 ????	       00 c4	   _Bit1_FireB_Restrainer =	var32
    161  9000 ????
    162  9000 ????	       00 c4	   _Bit0_Reset_Restrainer =	var32
    163  9000 ????
    164  9000 ????	       00 c3	   _Bit7_Ship_Restrainer_DR =	var31
    165  9000 ????
    166  9000 ????	       00 c3	   _Bit6_Ship_Restrainer_DL =	var31
    167  9000 ????
    168  9000 ????	       00 c3	   _Bit5_Ship_Restrainer_UR =	var31
    169  9000 ????
    170  9000 ????	       00 c3	   _Bit4_Ship_Restrainer_UL =	var31
    171  9000 ????
    172  9000 ????	       00 c3	   _Bit3_Ship_Restrainer_R =	var31
    173  9000 ????
    174  9000 ????	       00 c3	   _Bit2_Ship_Restrainer_L =	var31
    175  9000 ????
    176  9000 ????	       00 c3	   _Bit1_Ship_Restrainer_D =	var31
    177  9000 ????
    178  9000 ????	       00 c3	   _Bit0_Ship_Restrainer_U =	var31
    179  9000 ????
    180  9000 ????	       00 c3	   _Bitop_Ship_Restrainer =	var31
    181  9000 ????
    182  9000 ????	       00 c2	   _Bit7_Shot_R_Snapshot =	var30
    183  9000 ????
    184  9000 ????	       00 c2	   _Bit6_Shot_L_Snapshot =	var30
    185  9000 ????
    186  9000 ????	       00 c2	   _Bit5_Shot_D_Snapshot =	var30
    187  9000 ????
    188  9000 ????	       00 c2	   _Bit4_Shot_U_Snapshot =	var30
    189  9000 ????
    190  9000 ????	       00 c2	   _Bit3_Flip_P0 =	var30
    191  9000 ????
    192  9000 ????	       00 c2	   _Bit2_Bonus_Limit =	var30
    193  9000 ????
    194  9000 ????	       00 c2	   _Bit1_P0_Hit_Seaweed =	var30
    195  9000 ????
    196  9000 ????	       00 c2	   _Bit0_Shot_Moving =	var30
    197  9000 ????
    198  9000 ????	       00 c2	   _Bitop_Misc_Snapshot =	var30
    199  9000 ????
    200  9000 ????	       00 c1	   _Bit7_Ship_R_Slide =	var29
    201  9000 ????
    202  9000 ????	       00 c1	   _Bit6_Ship_L_Slide =	var29
    203  9000 ????
    204  9000 ????	       00 c1	   _Bit5_Ship_D_Slide =	var29
    205  9000 ????
    206  9000 ????	       00 c1	   _Bit4_Ship_U_Slide =	var29
    207  9000 ????
    208  9000 ????	       00 c1	   _Bit3_Ship_Facing_Right =	var29
    209  9000 ????
    210  9000 ????	       00 c1	   _Bit2_Ship_Facing_Left =	var29
    211  9000 ????
    212  9000 ????	       00 c1	   _Bit1_Ship_Facing_Down =	var29
    213  9000 ????
    214  9000 ????	       00 c1	   _Bit0_Ship_Facing_Up =	var29
    215  9000 ????
    216  9000 ????	       00 c1	   _BitOp_Ship =	var29
    217  9000 ????
    218  9000 ????	       00 c0	   _Corroded_Anim_Frame =	var28
    219  9000 ????
    220  9000 ????	       00 bf	   _GmOvr_Tmp_GOAnim_Counter =	var27
    221  9000 ????
    222  9000 ????	       00 bf	   _Plop_Timer =	var27
    223  9000 ????
    224  9000 ????	       00 be	   _Level_Counter =	var26
    225  9000 ????
    226  9000 ????	       00 bd	   _Corrdd_Y_Shot_Mem =	var25
    227  9000 ????
    228  9000 ????	       00 bc	   _Corrdd_X_Shot_Mem =	var24
    229  9000 ????
    230  9000 ????	       00 bb	   _GmOvr_Tmp_8_Scroll_Counter =	var23
    231  9000 ????
    232  9000 ????	       00 bb	   _GmOvr_Tmp_x_Fill_Counter =	var23
    233  9000 ????
    234  9000 ????	       00 bb	   _MLSetup_Tmp_Close_In_Counter =	var23
    235  9000 ????
    236  9000 ????	       00 bb	   _MyTemp_04 =	var23
    237  9000 ????
    238  9000 ????	       00 ba	   _GmOvr_Tmp_Scroll_Counter =	var22
    239  9000 ????
    240  9000 ????	       00 ba	   _GmOvr_Tmp_Y_Fill_Counter =	var22
    241  9000 ????
    242  9000 ????	       00 ba	   _AP_2_Sec_Score_Flip =	var22
    243  9000 ????
    244  9000 ????	       00 ba	   _MLSet_Tone_Flip_Cntr_Tmp =	var22
    245  9000 ????
    246  9000 ????	       00 ba	   _MyTemp_03 =	var22
    247  9000 ????
    248  9000 ????	       00 b9	   _GmOvr_Tmp_Frame_Counter =	var21
    249  9000 ????
    250  9000 ????	       00 b9	   _MLoop_Tmp_Corrdd_Anim_Count =	var21
    251  9000 ????
    252  9000 ????	       00 b9	   _MLSetup_Tmp_Close_In_02 =	var21
    253  9000 ????
    254  9000 ????	       00 b9	   _MyTemp_02 =	var21
    255  9000 ????
    256  9000 ????	       00 b8	   _GmOvr_Tmp_Anim_Counter =	var20
    257  9000 ????
    258  9000 ????	       00 b8	   _GmOvr_Tmp_Tone_Flip_Counter =	var20
    259  9000 ????
    260  9000 ????	       00 b8	   _ML_Tmp_AP_Ship_Dir =	var20
    261  9000 ????
    262  9000 ????	       00 b8	   _MLSetup_Tmp_Close_In_01 =	var20
    263  9000 ????
    264  9000 ????	       00 b8	   _MyTemp_01 =	var20
    265  9000 ????
    266  9000 ????	       00 b7	   _Select_Timer =	var19
    267  9000 ????
    268  9000 ????	       00 89	   _Ball_Y    =	bally
    269  9000 ????	       00 b5	   _Wroth_Color_Mem =	var17
    270  9000 ????
    271  9000 ????	       00 b4	   _1000_Counter =	var16
    272  9000 ????
    273  9000 ????	       00 b3	   _Pause_Mem_Missile0y =	var15
    274  9000 ????
    275  9000 ????	       00 b2	   _Pause_Mem_No_Repeat =	var14
    276  9000 ????
    277  9000 ????	       00 b1	   _Pause_Mem_Sprite0_Color =	var13
    278  9000 ????
    279  9000 ????	       00 b0	   _Pause_Mem_Score_Color =	var12
    280  9000 ????
    281  9000 ????	       00 af	   _Pause_Mem_SCBack_Color =	var11
    282  9000 ????
    283  9000 ????	       00 ae	   _Pause_Mem_Health_Color =	var10
    284  9000 ????
    285  9000 ????	       00 ad	   _Pause_Mem_Sprite1_LR =	var9
    286  9000 ????
    287  9000 ????	       00 ac	   _Pause_Mem_Sprite1_UD =	var8
    288  9000 ????
    289  9000 ????	       00 ab	   _Pause_Counter =	var7
    290  9000 ????
    291  9000 ????	       00 aa	   _Score3_Mem =	var6
    292  9000 ????
    293  9000 ????	       00 a9	   _Score2_Mem =	var5
    294  9000 ????
    295  9000 ????	       00 a8	   _Score1_Mem =	var4
    296  9000 ????
    297  9000 ????	       00 a7	   _High_Score3 =	var3
    298  9000 ????
    299  9000 ????	       00 a6	   _High_Score2 =	var2
    300  9000 ????
    301  9000 ????	       00 a5	   _High_Score1 =	var1
    302  9000 ????
    303  9000 ????	       00 a4	   _Manatee_Health_Counter =	var0
    304  9000 ????
    305  9000 ????	       00 ed	   _Manatee_Hurt_Counter =	z
    306  9000 ????
    307  9000 ????	       00 ec	   _Corrdd_Shot_Counter =	y
    308  9000 ????
    309  9000 ????	       00 eb	   _Corrdd_Timer =	x
    310  9000 ????
    311  9000 ????	       00 ea	   _Corrdd_App_Counter =	w
    312  9000 ????
    313  9000 ????	       00 e8	   _Homing_Sc_Bck_Cntr =	u
    314  9000 ????	       00 e7	   _Wrothopod_Counter =	t
    315  9000 ????
    316  9000 ????	       00 e6	   _Tentacle_Grab_Counter =	s
    317  9000 ????
    318  9000 ????	       00 e5	   _Points_Roll_Up =	r
    319  9000 ????
    320  9000 ????	       00 e4	   _Shot_Bonus_Counter =	q
    321  9000 ????
    322  9000 ????	       00 e3	   _Plop_Rate =	p
    323  9000 ????
    324  9000 ????	       00 e2	   _Seaweed_Shot =	o
    325  9000 ????
    326  9000 ????	       00 e1	   _Slide_Speed =	n
    327  9000 ????
    328  9000 ????	       00 e0	   _Slide_Counter =	m
    329  9000 ????
    330  9000 ????	       00 df	   _Ch1_Counter =	l
    331  9000 ????
    332  9000 ????	       00 de	   _Ch1_Duration =	k
    333  9000 ????
    334  9000 ????	       00 dd	   _Ch1_Sound =	j
    335  9000 ????
    336  9000 ????	       00 dc	   _Ch0_Counter =	i
    337  9000 ????
    338  9000 ????	       00 db	   _Ch0_Duration =	h
    339  9000 ????
    340  9000 ????	       00 da	   _Ch0_Sound =	g
    341  9000 ????
    342  9000 ????	       00 d9	   _Frame_Counter =	f
    343  9000 ????
    344  9000 ????	       00 d8	   _Master_Counter =	e
    345  9000 ????
    346  9000 ????	       00 81	   _P1_Left_Right =	player1x
    347  9000 ????	       00 86	   _P1_Up_Down =	player1y
    348  9000 ????	       00 85	   _P0_Up_Down =	player0y
    349  9000 ????	       00 80	   _P0_Left_Right =	player0x
    350  9000 ????	       00 01	   superchip  =	1
    351  9000 ????	       00 07	   bs_mask    =	7
    352  9000 ????	       00 20	   bankswitch =	32
    353  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    354  9000 ????	       00 01	   PFcolors   =	1
    355  9000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  9000 ????
      8  9000 ????	       00 80	   player0x   =	$80
      9  9000 ????	       00 81	   player1x   =	$81
     10  9000 ????	       00 82	   missile0x  =	$82
     11  9000 ????	       00 83	   missile1x  =	$83
     12  9000 ????	       00 84	   ballx      =	$84
     13  9000 ????
     14  9000 ????	       00 85	   objecty    =	$85
     15  9000 ????	       00 85	   player0y   =	$85
     16  9000 ????	       00 86	   player1y   =	$86
     17  9000 ????	       00 87	   missile1height =	$87
     18  9000 ????	       00 88	   missile1y  =	$88
     19  9000 ????	       00 89	   bally      =	$89
     20  9000 ????
     21  9000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  9000 ????
     23  9000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  9000 ????	       00 8a	   player0pointerlo =	$8A
     25  9000 ????	       00 8b	   player0pointerhi =	$8B
     26  9000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  9000 ????	       00 8c	   player1pointerlo =	$8C
     28  9000 ????	       00 8d	   player1pointerhi =	$8D
     29  9000 ????
     30  9000 ????	       00 8e	   player0height =	$8E
     31  9000 ????	       00 8f	   player1height =	$8F
     32  9000 ????	       00 90	   missile0height =	$90
     33  9000 ????	       00 91	   missile0y  =	$91
     34  9000 ????	       00 92	   ballheight =	$92
     35  9000 ????
     36  9000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  9000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  9000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  9000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  9000 ????
     41  9000 ????	       00 93	   score      =	$93	; $93-$95
     42  9000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  9000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  9000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  9000 ????	       00 9e	   temp3      =	$9E
     46  9000 ????	       00 9f	   temp4      =	$9F
     47  9000 ????	       00 a0	   temp5      =	$A0
     48  9000 ????	       00 a1	   temp6      =	$A1
     49  9000 ????
     50  9000 ????	       00 a2	   rand       =	$A2
     51  9000 ????	       00 a3	   scorecolor =	$A3
     52  9000 ????
     53  9000 ????	       00 a4	   var0       =	$A4
     54  9000 ????	       00 a5	   var1       =	$A5
     55  9000 ????	       00 a6	   var2       =	$A6
     56  9000 ????	       00 a7	   var3       =	$A7
     57  9000 ????	       00 a8	   var4       =	$A8
     58  9000 ????	       00 a9	   var5       =	$A9
     59  9000 ????	       00 aa	   var6       =	$AA
     60  9000 ????	       00 ab	   var7       =	$AB
     61  9000 ????	       00 ac	   var8       =	$AC
     62  9000 ????	       00 ad	   var9       =	$AD
     63  9000 ????	       00 ae	   var10      =	$AE
     64  9000 ????	       00 af	   var11      =	$AF
     65  9000 ????	       00 b0	   var12      =	$B0
     66  9000 ????	       00 b1	   var13      =	$B1
     67  9000 ????	       00 b2	   var14      =	$B2
     68  9000 ????	       00 b3	   var15      =	$B3
     69  9000 ????	       00 b4	   var16      =	$B4
     70  9000 ????	       00 b5	   var17      =	$B5
     71  9000 ????	       00 b6	   var18      =	$B6
     72  9000 ????	       00 b7	   var19      =	$B7
     73  9000 ????	       00 b8	   var20      =	$B8
     74  9000 ????	       00 b9	   var21      =	$B9
     75  9000 ????	       00 ba	   var22      =	$BA
     76  9000 ????	       00 bb	   var23      =	$BB
     77  9000 ????	       00 bc	   var24      =	$BC
     78  9000 ????	       00 bd	   var25      =	$BD
     79  9000 ????	       00 be	   var26      =	$BE
     80  9000 ????	       00 bf	   var27      =	$BF
     81  9000 ????	       00 c0	   var28      =	$C0
     82  9000 ????	       00 c1	   var29      =	$C1
     83  9000 ????	       00 c2	   var30      =	$C2
     84  9000 ????	       00 c3	   var31      =	$C3
     85  9000 ????	       00 c4	   var32      =	$C4
     86  9000 ????	       00 c5	   var33      =	$C5
     87  9000 ????	       00 c6	   var34      =	$C6
     88  9000 ????	       00 c7	   var35      =	$C7
     89  9000 ????	       00 c8	   var36      =	$C8
     90  9000 ????	       00 c9	   var37      =	$C9
     91  9000 ????	       00 ca	   var38      =	$CA
     92  9000 ????	       00 cb	   var39      =	$CB
     93  9000 ????	       00 cc	   var40      =	$CC
     94  9000 ????	       00 cd	   var41      =	$CD
     95  9000 ????	       00 ce	   var42      =	$CE
     96  9000 ????	       00 cf	   var43      =	$CF
     97  9000 ????	       00 d0	   var44      =	$D0
     98  9000 ????	       00 d1	   var45      =	$D1
     99  9000 ????	       00 d2	   var46      =	$D2
    100  9000 ????	       00 d3	   var47      =	$D3
    101  9000 ????
    102  9000 ????	       00 d4	   A	      =	$d4
    103  9000 ????	       00 d4	   a	      =	$d4
    104  9000 ????	       00 d5	   B	      =	$d5
    105  9000 ????	       00 d5	   b	      =	$d5
    106  9000 ????	       00 d6	   C	      =	$d6
    107  9000 ????	       00 d6	   c	      =	$d6
    108  9000 ????	       00 d7	   D	      =	$d7
    109  9000 ????	       00 d7	   d	      =	$d7
    110  9000 ????	       00 d8	   E	      =	$d8
    111  9000 ????	       00 d8	   e	      =	$d8
    112  9000 ????	       00 d9	   F	      =	$d9
    113  9000 ????	       00 d9	   f	      =	$d9
    114  9000 ????	       00 da	   G	      =	$da
    115  9000 ????	       00 da	   g	      =	$da
    116  9000 ????	       00 db	   H	      =	$db
    117  9000 ????	       00 db	   h	      =	$db
    118  9000 ????	       00 dc	   I	      =	$dc
    119  9000 ????	       00 dc	   i	      =	$dc
    120  9000 ????	       00 dd	   J	      =	$dd
    121  9000 ????	       00 dd	   j	      =	$dd
    122  9000 ????	       00 de	   K	      =	$de
    123  9000 ????	       00 de	   k	      =	$de
    124  9000 ????	       00 df	   L	      =	$df
    125  9000 ????	       00 df	   l	      =	$df
    126  9000 ????	       00 e0	   M	      =	$e0
    127  9000 ????	       00 e0	   m	      =	$e0
    128  9000 ????	       00 e1	   N	      =	$e1
    129  9000 ????	       00 e1	   n	      =	$e1
    130  9000 ????	       00 e2	   O	      =	$e2
    131  9000 ????	       00 e2	   o	      =	$e2
    132  9000 ????	       00 e3	   P	      =	$e3
    133  9000 ????	       00 e3	   p	      =	$e3
    134  9000 ????	       00 e4	   Q	      =	$e4
    135  9000 ????	       00 e4	   q	      =	$e4
    136  9000 ????	       00 e5	   R	      =	$e5
    137  9000 ????	       00 e5	   r	      =	$e5
    138  9000 ????	       00 e6	   S	      =	$e6
    139  9000 ????	       00 e6	   s	      =	$e6
    140  9000 ????	       00 e7	   T	      =	$e7
    141  9000 ????	       00 e7	   t	      =	$e7
    142  9000 ????	       00 e8	   U	      =	$e8
    143  9000 ????	       00 e8	   u	      =	$e8
    144  9000 ????	       00 e9	   V	      =	$e9
    145  9000 ????	       00 e9	   v	      =	$e9
    146  9000 ????	       00 ea	   W	      =	$ea
    147  9000 ????	       00 ea	   w	      =	$ea
    148  9000 ????	       00 eb	   X	      =	$eb
    149  9000 ????	       00 eb	   x	      =	$eb
    150  9000 ????	       00 ec	   Y	      =	$ec
    151  9000 ????	       00 ec	   y	      =	$ec
    152  9000 ????	       00 ed	   Z	      =	$ed
    153  9000 ????	       00 ed	   z	      =	$ed
    154  9000 ????
    155  9000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  9000 ????	       00 ef	   playfieldpos =	$ef
    157  9000 ????
    158  9000 ????						; available for other uses, or if unused, provide more stack space
    159  9000 ????
    160  9000 ????	       00 f0	   aux1       =	$f0
    161  9000 ????	       00 f1	   aux2       =	$f1
    162  9000 ????	       00 f2	   aux3       =	$f2
    163  9000 ????	       00 f3	   aux4       =	$f3
    164  9000 ????	       00 f4	   aux5       =	$f4
    165  9000 ????	       00 f5	   aux6       =	$f5
    166  9000 ????
    167  9000 ????						; playfield color/height pointers
    168  9000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  9000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  9000 ????						; the above pointers are the same because if color and height are both used together,
    171  9000 ????						; they must used absolute indexed and cannot use pointers
    172  9000 ????
    173  9000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  9000 ????						; upper 3 bits of $f2 contain the number of lives
    175  9000 ????	       00 f4	   lifecolor  =	$f4
    176  9000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  9000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  9000 ????
    179  9000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  9000 ????	       00 f3	   pfscore2   =	$f3
    181  9000 ????	       00 f4	   pfscorecolor =	$f4
    182  9000 ????
    183  9000 ????	       00 f6	   stack1     =	$f6
    184  9000 ????	       00 f7	   stack2     =	$f7
    185  9000 ????	       00 f8	   stack3     =	$f8
    186  9000 ????	       00 f9	   stack4     =	$f9
    187  9000 ????						; the stack bytes above may be used in the kernel
    188  9000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  9000 ????
    190  9000 ????				      MAC	return
    191  9000 ????				      ifnconst	bankswitch
    192  9000 ????				      rts
    193  9000 ????				      else
    194  9000 ????				      jmp	BS_return
    195  9000 ????				      endif
    196  9000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  9000 ????
    198  9000 ????				      ifconst	superchip
    199  9000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  9000 ????				      include	superchip.h
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????	       f0 00	   write_RAM  =	$F000
      4  9000 ????	       f0 00	   wRAM       =	$F000
      5  9000 ????	       f0 00	   w000       =	$F000
      6  9000 ????	       f0 01	   w001       =	$F001
      7  9000 ????	       f0 02	   w002       =	$F002
      8  9000 ????	       f0 03	   w003       =	$F003
      9  9000 ????	       f0 04	   w004       =	$F004
     10  9000 ????	       f0 05	   w005       =	$F005
     11  9000 ????	       f0 06	   w006       =	$F006
     12  9000 ????	       f0 07	   w007       =	$F007
     13  9000 ????	       f0 08	   w008       =	$F008
     14  9000 ????	       f0 09	   w009       =	$F009
     15  9000 ????	       f0 0a	   w010       =	$F00A
     16  9000 ????	       f0 0b	   w011       =	$F00B
     17  9000 ????	       f0 0c	   w012       =	$F00C
     18  9000 ????	       f0 0d	   w013       =	$F00D
     19  9000 ????	       f0 0e	   w014       =	$F00E
     20  9000 ????	       f0 0f	   w015       =	$F00F
     21  9000 ????	       f0 10	   w016       =	$F010
     22  9000 ????	       f0 11	   w017       =	$F011
     23  9000 ????	       f0 12	   w018       =	$F012
     24  9000 ????	       f0 13	   w019       =	$F013
     25  9000 ????	       f0 14	   w020       =	$F014
     26  9000 ????	       f0 15	   w021       =	$F015
     27  9000 ????	       f0 16	   w022       =	$F016
     28  9000 ????	       f0 17	   w023       =	$F017
     29  9000 ????	       f0 18	   w024       =	$F018
     30  9000 ????	       f0 19	   w025       =	$F019
     31  9000 ????	       f0 1a	   w026       =	$F01A
     32  9000 ????	       f0 1b	   w027       =	$F01B
     33  9000 ????	       f0 1c	   w028       =	$F01C
     34  9000 ????	       f0 1d	   w029       =	$F01D
     35  9000 ????	       f0 1e	   w030       =	$F01E
     36  9000 ????	       f0 1f	   w031       =	$F01F
     37  9000 ????	       f0 20	   w032       =	$F020
     38  9000 ????	       f0 21	   w033       =	$F021
     39  9000 ????	       f0 22	   w034       =	$F022
     40  9000 ????	       f0 23	   w035       =	$F023
     41  9000 ????	       f0 24	   w036       =	$F024
     42  9000 ????	       f0 25	   w037       =	$F025
     43  9000 ????	       f0 26	   w038       =	$F026
     44  9000 ????	       f0 27	   w039       =	$F027
     45  9000 ????	       f0 28	   w040       =	$F028
     46  9000 ????	       f0 29	   w041       =	$F029
     47  9000 ????	       f0 2a	   w042       =	$F02A
     48  9000 ????	       f0 2b	   w043       =	$F02B
     49  9000 ????	       f0 2c	   w044       =	$F02C
     50  9000 ????	       f0 2d	   w045       =	$F02D
     51  9000 ????	       f0 2e	   w046       =	$F02E
     52  9000 ????	       f0 2f	   w047       =	$F02F
     53  9000 ????	       f0 30	   w048       =	$F030
     54  9000 ????	       f0 31	   w049       =	$F031
     55  9000 ????	       f0 32	   w050       =	$F032
     56  9000 ????	       f0 33	   w051       =	$F033
     57  9000 ????	       f0 34	   w052       =	$F034
     58  9000 ????	       f0 35	   w053       =	$F035
     59  9000 ????	       f0 36	   w054       =	$F036
     60  9000 ????	       f0 37	   w055       =	$F037
     61  9000 ????	       f0 38	   w056       =	$F038
     62  9000 ????	       f0 39	   w057       =	$F039
     63  9000 ????	       f0 3a	   w058       =	$F03A
     64  9000 ????	       f0 3b	   w059       =	$F03B
     65  9000 ????	       f0 3c	   w060       =	$F03C
     66  9000 ????	       f0 3d	   w061       =	$F03D
     67  9000 ????	       f0 3e	   w062       =	$F03E
     68  9000 ????	       f0 3f	   w063       =	$F03F
     69  9000 ????	       f0 40	   w064       =	$F040
     70  9000 ????	       f0 41	   w065       =	$F041
     71  9000 ????	       f0 42	   w066       =	$F042
     72  9000 ????	       f0 43	   w067       =	$F043
     73  9000 ????	       f0 44	   w068       =	$F044
     74  9000 ????	       f0 45	   w069       =	$F045
     75  9000 ????	       f0 46	   w070       =	$F046
     76  9000 ????	       f0 47	   w071       =	$F047
     77  9000 ????	       f0 48	   w072       =	$F048
     78  9000 ????	       f0 49	   w073       =	$F049
     79  9000 ????	       f0 4a	   w074       =	$F04A
     80  9000 ????	       f0 4b	   w075       =	$F04B
     81  9000 ????	       f0 4c	   w076       =	$F04C
     82  9000 ????	       f0 4d	   w077       =	$F04D
     83  9000 ????	       f0 4e	   w078       =	$F04E
     84  9000 ????	       f0 4f	   w079       =	$F04F
     85  9000 ????	       f0 50	   w080       =	$F050
     86  9000 ????	       f0 51	   w081       =	$F051
     87  9000 ????	       f0 52	   w082       =	$F052
     88  9000 ????	       f0 53	   w083       =	$F053
     89  9000 ????	       f0 54	   w084       =	$F054
     90  9000 ????	       f0 55	   w085       =	$F055
     91  9000 ????	       f0 56	   w086       =	$F056
     92  9000 ????	       f0 57	   w087       =	$F057
     93  9000 ????	       f0 58	   w088       =	$F058
     94  9000 ????	       f0 59	   w089       =	$F059
     95  9000 ????	       f0 5a	   w090       =	$F05A
     96  9000 ????	       f0 5b	   w091       =	$F05B
     97  9000 ????	       f0 5c	   w092       =	$F05C
     98  9000 ????	       f0 5d	   w093       =	$F05D
     99  9000 ????	       f0 5e	   w094       =	$F05E
    100  9000 ????	       f0 5f	   w095       =	$F05F
    101  9000 ????	       f0 60	   w096       =	$F060
    102  9000 ????	       f0 61	   w097       =	$F061
    103  9000 ????	       f0 62	   w098       =	$F062
    104  9000 ????	       f0 63	   w099       =	$F063
    105  9000 ????	       f0 64	   w100       =	$F064
    106  9000 ????	       f0 65	   w101       =	$F065
    107  9000 ????	       f0 66	   w102       =	$F066
    108  9000 ????	       f0 67	   w103       =	$F067
    109  9000 ????	       f0 68	   w104       =	$F068
    110  9000 ????	       f0 69	   w105       =	$F069
    111  9000 ????	       f0 6a	   w106       =	$F06A
    112  9000 ????	       f0 6b	   w107       =	$F06B
    113  9000 ????	       f0 6c	   w108       =	$F06C
    114  9000 ????	       f0 6d	   w109       =	$F06D
    115  9000 ????	       f0 6e	   w110       =	$F06E
    116  9000 ????	       f0 6f	   w111       =	$F06F
    117  9000 ????	       f0 70	   w112       =	$F070
    118  9000 ????	       f0 71	   w113       =	$F071
    119  9000 ????	       f0 72	   w114       =	$F072
    120  9000 ????	       f0 73	   w115       =	$F073
    121  9000 ????	       f0 74	   w116       =	$F074
    122  9000 ????	       f0 75	   w117       =	$F075
    123  9000 ????	       f0 76	   w118       =	$F076
    124  9000 ????	       f0 77	   w119       =	$F077
    125  9000 ????	       f0 78	   w120       =	$F078
    126  9000 ????	       f0 79	   w121       =	$F079
    127  9000 ????	       f0 7a	   w122       =	$F07A
    128  9000 ????	       f0 7b	   w123       =	$F07B
    129  9000 ????	       f0 7c	   w124       =	$F07C
    130  9000 ????	       f0 7d	   w125       =	$F07D
    131  9000 ????	       f0 7e	   w126       =	$F07E
    132  9000 ????	       f0 7f	   w127       =	$F07F
    133  9000 ????
    134  9000 ????	       f0 80	   read_RAM   =	$F080
    135  9000 ????	       f0 80	   rRAM       =	$F080
    136  9000 ????	       f0 80	   r000       =	$F080
    137  9000 ????	       f0 81	   r001       =	$F081
    138  9000 ????	       f0 82	   r002       =	$F082
    139  9000 ????	       f0 83	   r003       =	$F083
    140  9000 ????	       f0 84	   r004       =	$F084
    141  9000 ????	       f0 85	   r005       =	$F085
    142  9000 ????	       f0 86	   r006       =	$F086
    143  9000 ????	       f0 87	   r007       =	$F087
    144  9000 ????	       f0 88	   r008       =	$F088
    145  9000 ????	       f0 89	   r009       =	$F089
    146  9000 ????	       f0 8a	   r010       =	$F08A
    147  9000 ????	       f0 8b	   r011       =	$F08B
    148  9000 ????	       f0 8c	   r012       =	$F08C
    149  9000 ????	       f0 8d	   r013       =	$F08D
    150  9000 ????	       f0 8e	   r014       =	$F08E
    151  9000 ????	       f0 8f	   r015       =	$F08F
    152  9000 ????	       f0 90	   r016       =	$F090
    153  9000 ????	       f0 91	   r017       =	$F091
    154  9000 ????	       f0 92	   r018       =	$F092
    155  9000 ????	       f0 93	   r019       =	$F093
    156  9000 ????	       f0 94	   r020       =	$F094
    157  9000 ????	       f0 95	   r021       =	$F095
    158  9000 ????	       f0 96	   r022       =	$F096
    159  9000 ????	       f0 97	   r023       =	$F097
    160  9000 ????	       f0 98	   r024       =	$F098
    161  9000 ????	       f0 99	   r025       =	$F099
    162  9000 ????	       f0 9a	   r026       =	$F09A
    163  9000 ????	       f0 9b	   r027       =	$F09B
    164  9000 ????	       f0 9c	   r028       =	$F09C
    165  9000 ????	       f0 9d	   r029       =	$F09D
    166  9000 ????	       f0 9e	   r030       =	$F09E
    167  9000 ????	       f0 9f	   r031       =	$F09F
    168  9000 ????	       f0 a0	   r032       =	$F0A0
    169  9000 ????	       f0 a1	   r033       =	$F0A1
    170  9000 ????	       f0 a2	   r034       =	$F0A2
    171  9000 ????	       f0 a3	   r035       =	$F0A3
    172  9000 ????	       f0 a4	   r036       =	$F0A4
    173  9000 ????	       f0 a5	   r037       =	$F0A5
    174  9000 ????	       f0 a6	   r038       =	$F0A6
    175  9000 ????	       f0 a7	   r039       =	$F0A7
    176  9000 ????	       f0 a8	   r040       =	$F0A8
    177  9000 ????	       f0 a9	   r041       =	$F0A9
    178  9000 ????	       f0 aa	   r042       =	$F0AA
    179  9000 ????	       f0 ab	   r043       =	$F0AB
    180  9000 ????	       f0 ac	   r044       =	$F0AC
    181  9000 ????	       f0 ad	   r045       =	$F0AD
    182  9000 ????	       f0 ae	   r046       =	$F0AE
    183  9000 ????	       f0 af	   r047       =	$F0AF
    184  9000 ????	       f0 b0	   r048       =	$F0B0
    185  9000 ????	       f0 b1	   r049       =	$F0B1
    186  9000 ????	       f0 b2	   r050       =	$F0B2
    187  9000 ????	       f0 b3	   r051       =	$F0B3
    188  9000 ????	       f0 b4	   r052       =	$F0B4
    189  9000 ????	       f0 b5	   r053       =	$F0B5
    190  9000 ????	       f0 b6	   r054       =	$F0B6
    191  9000 ????	       f0 b7	   r055       =	$F0B7
    192  9000 ????	       f0 b8	   r056       =	$F0B8
    193  9000 ????	       f0 b9	   r057       =	$F0B9
    194  9000 ????	       f0 ba	   r058       =	$F0BA
    195  9000 ????	       f0 bb	   r059       =	$F0BB
    196  9000 ????	       f0 bc	   r060       =	$F0BC
    197  9000 ????	       f0 bd	   r061       =	$F0BD
    198  9000 ????	       f0 be	   r062       =	$F0BE
    199  9000 ????	       f0 bf	   r063       =	$F0BF
    200  9000 ????	       f0 c0	   r064       =	$F0C0
    201  9000 ????	       f0 c1	   r065       =	$F0C1
    202  9000 ????	       f0 c2	   r066       =	$F0C2
    203  9000 ????	       f0 c3	   r067       =	$F0C3
    204  9000 ????	       f0 c4	   r068       =	$F0C4
    205  9000 ????	       f0 c5	   r069       =	$F0C5
    206  9000 ????	       f0 c6	   r070       =	$F0C6
    207  9000 ????	       f0 c7	   r071       =	$F0C7
    208  9000 ????	       f0 c8	   r072       =	$F0C8
    209  9000 ????	       f0 c9	   r073       =	$F0C9
    210  9000 ????	       f0 ca	   r074       =	$F0CA
    211  9000 ????	       f0 cb	   r075       =	$F0CB
    212  9000 ????	       f0 cc	   r076       =	$F0CC
    213  9000 ????	       f0 cd	   r077       =	$F0CD
    214  9000 ????	       f0 ce	   r078       =	$F0CE
    215  9000 ????	       f0 cf	   r079       =	$F0CF
    216  9000 ????	       f0 d0	   r080       =	$F0D0
    217  9000 ????	       f0 d1	   r081       =	$F0D1
    218  9000 ????	       f0 d2	   r082       =	$F0D2
    219  9000 ????	       f0 d3	   r083       =	$F0D3
    220  9000 ????	       f0 d4	   r084       =	$F0D4
    221  9000 ????	       f0 d5	   r085       =	$F0D5
    222  9000 ????	       f0 d6	   r086       =	$F0D6
    223  9000 ????	       f0 d7	   r087       =	$F0D7
    224  9000 ????	       f0 d8	   r088       =	$F0D8
    225  9000 ????	       f0 d9	   r089       =	$F0D9
    226  9000 ????	       f0 da	   r090       =	$F0DA
    227  9000 ????	       f0 db	   r091       =	$F0DB
    228  9000 ????	       f0 dc	   r092       =	$F0DC
    229  9000 ????	       f0 dd	   r093       =	$F0DD
    230  9000 ????	       f0 de	   r094       =	$F0DE
    231  9000 ????	       f0 df	   r095       =	$F0DF
    232  9000 ????	       f0 e0	   r096       =	$F0E0
    233  9000 ????	       f0 e1	   r097       =	$F0E1
    234  9000 ????	       f0 e2	   r098       =	$F0E2
    235  9000 ????	       f0 e3	   r099       =	$F0E3
    236  9000 ????	       f0 e4	   r100       =	$F0E4
    237  9000 ????	       f0 e5	   r101       =	$F0E5
    238  9000 ????	       f0 e6	   r102       =	$F0E6
    239  9000 ????	       f0 e7	   r103       =	$F0E7
    240  9000 ????	       f0 e8	   r104       =	$F0E8
    241  9000 ????	       f0 e9	   r105       =	$F0E9
    242  9000 ????	       f0 ea	   r106       =	$F0EA
    243  9000 ????	       f0 eb	   r107       =	$F0EB
    244  9000 ????	       f0 ec	   r108       =	$F0EC
    245  9000 ????	       f0 ed	   r109       =	$F0ED
    246  9000 ????	       f0 ee	   r110       =	$F0EE
    247  9000 ????	       f0 ef	   r111       =	$F0EF
    248  9000 ????	       f0 f0	   r112       =	$F0F0
    249  9000 ????	       f0 f1	   r113       =	$F0F1
    250  9000 ????	       f0 f2	   r114       =	$F0F2
    251  9000 ????	       f0 f3	   r115       =	$F0F3
    252  9000 ????	       f0 f4	   r116       =	$F0F4
    253  9000 ????	       f0 f5	   r117       =	$F0F5
    254  9000 ????	       f0 f6	   r118       =	$F0F6
    255  9000 ????	       f0 f7	   r119       =	$F0F7
    256  9000 ????	       f0 f8	   r120       =	$F0F8
    257  9000 ????	       f0 f9	   r121       =	$F0F9
    258  9000 ????	       f0 fa	   r122       =	$F0FA
    259  9000 ????	       f0 fb	   r123       =	$F0FB
    260  9000 ????	       f0 fc	   r124       =	$F0FC
    261  9000 ????	       f0 fd	   r125       =	$F0FD
    262  9000 ????	       f0 fe	   r126       =	$F0FE
    263  9000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  9000 ????			  -	      else
    202  9000 ????			  -playfieldbase =	$A4
    203  9000 ????				      endif
    204  9000 ????
    205  9000 ????				      ifnconst	pfhalfwidth
    206  9000 ????	       00 04	   pfwidth    =	4
    207  9000 ????	       00 0e	   PF1L       =	PF1
    208  9000 ????	       00 0f	   PF2L       =	PF2
    209  9000 ????	       00 0e	   PF1R       =	PF1
    210  9000 ????	       00 0f	   PF2R       =	PF2
    211  9000 ????	       00 00	   pfadjust   =	0
    212  9000 ????			  -	      else
    213  9000 ????			  -pfwidth    =	2
    214  9000 ????			  -	      ifconst	pfcenter
    215  9000 ????			  -PF1L       =	$3F	; no effect
    216  9000 ????			  -PF2L       =	PF2
    217  9000 ????			  -PF1R       =	$3F
    218  9000 ????			  -PF2R       =	PF2	; no effect
    219  9000 ????			  -pfadjust   =	1
    220  9000 ????			  -	      else
    221  9000 ????			  -PF1L       =	PF1
    222  9000 ????			  -PF2L       =	PF2
    223  9000 ????			  -PF1R       =	$3F	; no effect
    224  9000 ????			  -PF2R       =	$3F	; no effect
    225  9000 ????			  -pfadjust   =	0
    226  9000 ????			  -	      endif
    227  9000 ????				      endif
    228  9000 ????
    229  9000 ????						; define playfield start based on height
    230  9000 ????				      ifnconst	pfres
    231  9000 ????	       10 d0	   playfield  =	playfieldbase
    232  9000 ????			  -	      else
    233  9000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  9000 ????				      endif
------- FILE e:\Documents\bB\demos\seaweed_assault.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 19	   _SD_Gyvolver_length =	.skipL01371-_SD_Gyvolver
      4  9000 ????
      5  9000 ????	       00 b9	   _SD_Over_length =	.skipL01370-_SD_Over
      6  9000 ????
      7  9000 ????	       00 8d	   _SD_Corroded_Chase_length =	.skipL01228-_SD_Corroded_Chase
      8  9000 ????
      9  9000 ????	       00 65	   _SD_Corroded_Hit_Ship_length =	.skipL01227-_SD_Corroded_Hit_Ship
     10  9000 ????
     11  9000 ????	       00 49	   _SD_Corroded_Seaweed_Moosh_length =	.skipL01226-_SD_Corroded_Seaweed_Moosh
     12  9000 ????
     13  9000 ????	       00 69	   _SD_Corroded_Tick_Down_length =	.skipL01225-_SD_Corroded_Tick_Down
     14  9000 ????
     15  9000 ????	       00 61	   _SD_Health_Can_length =	.skipL01224-_SD_Health_Can
     16  9000 ????
     17  9000 ????	       00 69	   _SD_Bonus_Get_length =	.skipL01223-_SD_Bonus_Get
     18  9000 ????
     19  9000 ????	       00 d5	   _SD_1000_Health_length =	.skipL01222-_SD_1000_Health
     20  9000 ????
     21  9000 ????	       00 91	   _SD_Ship_Drop_In_length =	.skipL01221-_SD_Ship_Drop_In
     22  9000 ????
     23  9000 ????	       00 8d	   _SD_Wroth_length =	.skipL01220-_SD_Wroth
     24  9000 ????
     25  9000 ????	       00 25	   _SD_Grab_length =	.skipL01219-_SD_Grab
     26  9000 ????
     27  9000 ????	       00 2d	   _SD_Shoot_length =	.skipL01218-_SD_Shoot
     28  9000 ????
     29  9000 ????	       00 31	   _SD_Ouch_length =	.skipL01217-_SD_Ouch
     30  9000 ????
     31  9000 ????	       00 31	   _SD_M_H_02_length =	.skipL01216-_SD_M_H_02
     32  9000 ????
     33  9000 ????	       00 2d	   _SD_M_Hit_length =	.skipL01215-_SD_M_Hit
     34  9000 ????
     35  9000 ????	       00 24	   _D_Homing_H_length =	.skipL0916-_D_Homing_H
     36  9000 ????
     37  9000 ????	       00 20	   bscode_length =	32
     38  9000 ????	       00 25	   _SD_Title_Seaweed_length =	.skipL0231-_SD_Title_Seaweed
     39  9000 ????
     40  9000 ????	       00 0b	   _c_MLS_Seaweed_Close_In =	11
     41  9000 ????
     42  9000 ????	       00 0a	   _c_GO_Seaweed_Attack =	10
     43  9000 ????
     44  9000 ????	       00 09	   _c_Corroded_Hit_Ship =	9
     45  9000 ????
     46  9000 ????	       00 08	   _c_Corroded_Chase =	8
     47  9000 ????
     48  9000 ????	       00 07	   _c_Corroded_Seaweed_Moosh =	7
     49  9000 ????
     50  9000 ????	       00 06	   _c_Corroded_Tick_Down =	6
     51  9000 ????
     52  9000 ????	       00 05	   _c_Canister_Touched =	5
     53  9000 ????
     54  9000 ????	       00 04	   _c_Canister_Appear =	4
     55  9000 ????
     56  9000 ????	       00 03	   _c_Wrothopod =	3
     57  9000 ????
     58  9000 ????	       00 02	   _c_Tentacle_Reaching_Up =	2
     59  9000 ????
     60  9000 ????	       00 01	   _c_Ship_Drop_In =	1
     61  9000 ????
     62  9000 ????	       00 07	   _c_Gyvolver =	7
     63  9000 ????
     64  9000 ????	       00 06	   _c_Game_Over =	6
     65  9000 ????
     66  9000 ????	       00 05	   _c_1000_Health =	5
     67  9000 ????
     68  9000 ????	       00 04	   _c_Shoot   =	4
     69  9000 ????
     70  9000 ????	       00 03	   _c_Ship_Bounce =	3
     71  9000 ????
     72  9000 ????	       00 02	   _c_Torp_Hit_Seaweed_02 =	2
     73  9000 ????
     74  9000 ????	       00 01	   _c_Torp_Hit_Seaweed_01 =	1
     75  9000 ????
     76  9000 ????	       00 01	   pfscore    =	1
     77  9000 ????
     78  9000 ????	       00 95	   _sc3       =	score + 2
     79  9000 ????
     80  9000 ????	       00 94	   _sc2       =	score + 1
     81  9000 ????
     82  9000 ????	       00 93	   _sc1       =	score
     83  9000 ????
     84  9000 ????	       00 d3	   rand16     =	var47
     85  9000 ????
     86  9000 ????	       00 d2	   _Bit2_Right_Left_Hand =	var46
     87  9000 ????
     88  9000 ????	       00 d2	   _Bit1_Auto_Play =	var46
     89  9000 ????
     90  9000 ????	       00 d2	   _Bit0_Game_Control =	var46
     91  9000 ????
     92  9000 ????	       00 d1	   _SC_Back   =	var45
     93  9000 ????
     94  9000 ????	       00 d0	   _Replication_Rate_Storage =	var44
     95  9000 ????
     96  9000 ????	       00 c7	   _Bit7_Tentacle_Touched =	var35
     97  9000 ????
     98  9000 ????	       00 c7	   _Bit6_Manatee_Moved_Away =	var35
     99  9000 ????
    100  9000 ????	       00 c7	   _Bit5_Manatee_Health_Color =	var35
    101  9000 ????
    102  9000 ????	       00 c7	   _Bit4_Manatee_Hurt_Color =	var35
    103  9000 ????
    104  9000 ????	       00 c7	   _Bit3_Easter_Egg =	var35
    105  9000 ????
    106  9000 ????	       00 c7	   _Bit2_1000_On =	var35
    107  9000 ????
    108  9000 ????	       00 c7	   _Bit1_Pause_Check =	var35
    109  9000 ????
    110  9000 ????	       00 c7	   _Bit0_Pause_Position =	var35
    111  9000 ????
    112  9000 ????	       00 c6	   _Bit7_Select_Restrainer =	var34
    113  9000 ????
    114  9000 ????	       00 c6	   _Bit6_Homing_Color_Cycle_On =	var34
    115  9000 ????
    116  9000 ????	       00 c6	   _Bit5_Bonus_500_Trigger =	var34
    117  9000 ????
    118  9000 ????	       00 c6	   _Bit4_Corrdd_Can_Swd_Shot =	var34
    119  9000 ????
    120  9000 ????	       00 c6	   _Bit3_Corroded_Can_Chase_Player =	var34
    121  9000 ????
    122  9000 ????	       00 c6	   _Bit2_Corrdd_Can_On =	var34
    123  9000 ????
    124  9000 ????	       00 c6	   _Bit1_Canister_Trigger =	var34
    125  9000 ????
    126  9000 ????	       00 c6	   _Bit0_Thousand_Bonus_Later =	var34
    127  9000 ????
    128  9000 ????	       00 c5	   _Bit7_Vblank02 =	var33
    129  9000 ????
    130  9000 ????	       00 c5	   _Bit6_Wroth_Touched =	var33
    131  9000 ????
    132  9000 ????	       00 c5	   _Bit5_Wroth_Mad =	var33
    133  9000 ????
    134  9000 ????	       00 c5	   _Bit4_Bonus_500_On =	var33
    135  9000 ????
    136  9000 ????	       00 c5	   _Bit3_Canister_Later =	var33
    137  9000 ????
    138  9000 ????	       00 c5	   _Bit2_Wroth_Flip =	var33
    139  9000 ????
    140  9000 ????	       00 c5	   _Bit1_Wrothopod_On =	var33
    141  9000 ????
    142  9000 ????	       00 c5	   _Bit0_Canister_P1_On =	var33
    143  9000 ????
    144  9000 ????	       00 c4	   _Bit7_Vblank01 =	var32
    145  9000 ????
    146  9000 ????	       00 c4	   _Bit6_Swap_Scores =	var32
    147  9000 ????
    148  9000 ????	       00 c4	   _Bit5_Sound_Alt_Torpedo_Hit =	var32
    149  9000 ????
    150  9000 ????	       00 c4	   _Bit4_Game_Started =	var32
    151  9000 ????
    152  9000 ????	       00 c4	   _Bit3_Ship_Yanked_Down =	var32
    153  9000 ????
    154  9000 ????	       00 c4	   _Bit2_Move_Tentacle_Up =	var32
    155  9000 ????
    156  9000 ????	       00 c4	   _Bit1_Tmp_Ship_On_Screen =	var32
    157  9000 ????
    158  9000 ????	       00 c4	   _Bit1_Joystick_Restrainer_Tmp =	var32
    159  9000 ????
    160  9000 ????	       00 c4	   _Bit1_FireB_Restrainer =	var32
    161  9000 ????
    162  9000 ????	       00 c4	   _Bit0_Reset_Restrainer =	var32
    163  9000 ????
    164  9000 ????	       00 c3	   _Bit7_Ship_Restrainer_DR =	var31
    165  9000 ????
    166  9000 ????	       00 c3	   _Bit6_Ship_Restrainer_DL =	var31
    167  9000 ????
    168  9000 ????	       00 c3	   _Bit5_Ship_Restrainer_UR =	var31
    169  9000 ????
    170  9000 ????	       00 c3	   _Bit4_Ship_Restrainer_UL =	var31
    171  9000 ????
    172  9000 ????	       00 c3	   _Bit3_Ship_Restrainer_R =	var31
    173  9000 ????
    174  9000 ????	       00 c3	   _Bit2_Ship_Restrainer_L =	var31
    175  9000 ????
    176  9000 ????	       00 c3	   _Bit1_Ship_Restrainer_D =	var31
    177  9000 ????
    178  9000 ????	       00 c3	   _Bit0_Ship_Restrainer_U =	var31
    179  9000 ????
    180  9000 ????	       00 c3	   _Bitop_Ship_Restrainer =	var31
    181  9000 ????
    182  9000 ????	       00 c2	   _Bit7_Shot_R_Snapshot =	var30
    183  9000 ????
    184  9000 ????	       00 c2	   _Bit6_Shot_L_Snapshot =	var30
    185  9000 ????
    186  9000 ????	       00 c2	   _Bit5_Shot_D_Snapshot =	var30
    187  9000 ????
    188  9000 ????	       00 c2	   _Bit4_Shot_U_Snapshot =	var30
    189  9000 ????
    190  9000 ????	       00 c2	   _Bit3_Flip_P0 =	var30
    191  9000 ????
    192  9000 ????	       00 c2	   _Bit2_Bonus_Limit =	var30
    193  9000 ????
    194  9000 ????	       00 c2	   _Bit1_P0_Hit_Seaweed =	var30
    195  9000 ????
    196  9000 ????	       00 c2	   _Bit0_Shot_Moving =	var30
    197  9000 ????
    198  9000 ????	       00 c2	   _Bitop_Misc_Snapshot =	var30
    199  9000 ????
    200  9000 ????	       00 c1	   _Bit7_Ship_R_Slide =	var29
    201  9000 ????
    202  9000 ????	       00 c1	   _Bit6_Ship_L_Slide =	var29
    203  9000 ????
    204  9000 ????	       00 c1	   _Bit5_Ship_D_Slide =	var29
    205  9000 ????
    206  9000 ????	       00 c1	   _Bit4_Ship_U_Slide =	var29
    207  9000 ????
    208  9000 ????	       00 c1	   _Bit3_Ship_Facing_Right =	var29
    209  9000 ????
    210  9000 ????	       00 c1	   _Bit2_Ship_Facing_Left =	var29
    211  9000 ????
    212  9000 ????	       00 c1	   _Bit1_Ship_Facing_Down =	var29
    213  9000 ????
    214  9000 ????	       00 c1	   _Bit0_Ship_Facing_Up =	var29
    215  9000 ????
    216  9000 ????	       00 c1	   _BitOp_Ship =	var29
    217  9000 ????
    218  9000 ????	       00 c0	   _Corroded_Anim_Frame =	var28
    219  9000 ????
    220  9000 ????	       00 bf	   _GmOvr_Tmp_GOAnim_Counter =	var27
    221  9000 ????
    222  9000 ????	       00 bf	   _Plop_Timer =	var27
    223  9000 ????
    224  9000 ????	       00 be	   _Level_Counter =	var26
    225  9000 ????
    226  9000 ????	       00 bd	   _Corrdd_Y_Shot_Mem =	var25
    227  9000 ????
    228  9000 ????	       00 bc	   _Corrdd_X_Shot_Mem =	var24
    229  9000 ????
    230  9000 ????	       00 bb	   _GmOvr_Tmp_8_Scroll_Counter =	var23
    231  9000 ????
    232  9000 ????	       00 bb	   _GmOvr_Tmp_x_Fill_Counter =	var23
    233  9000 ????
    234  9000 ????	       00 bb	   _MLSetup_Tmp_Close_In_Counter =	var23
    235  9000 ????
    236  9000 ????	       00 bb	   _MyTemp_04 =	var23
    237  9000 ????
    238  9000 ????	       00 ba	   _GmOvr_Tmp_Scroll_Counter =	var22
    239  9000 ????
    240  9000 ????	       00 ba	   _GmOvr_Tmp_Y_Fill_Counter =	var22
    241  9000 ????
    242  9000 ????	       00 ba	   _AP_2_Sec_Score_Flip =	var22
    243  9000 ????
    244  9000 ????	       00 ba	   _MLSet_Tone_Flip_Cntr_Tmp =	var22
    245  9000 ????
    246  9000 ????	       00 ba	   _MyTemp_03 =	var22
    247  9000 ????
    248  9000 ????	       00 b9	   _GmOvr_Tmp_Frame_Counter =	var21
    249  9000 ????
    250  9000 ????	       00 b9	   _MLoop_Tmp_Corrdd_Anim_Count =	var21
    251  9000 ????
    252  9000 ????	       00 b9	   _MLSetup_Tmp_Close_In_02 =	var21
    253  9000 ????
    254  9000 ????	       00 b9	   _MyTemp_02 =	var21
    255  9000 ????
    256  9000 ????	       00 b8	   _GmOvr_Tmp_Anim_Counter =	var20
    257  9000 ????
    258  9000 ????	       00 b8	   _GmOvr_Tmp_Tone_Flip_Counter =	var20
    259  9000 ????
    260  9000 ????	       00 b8	   _ML_Tmp_AP_Ship_Dir =	var20
    261  9000 ????
    262  9000 ????	       00 b8	   _MLSetup_Tmp_Close_In_01 =	var20
    263  9000 ????
    264  9000 ????	       00 b8	   _MyTemp_01 =	var20
    265  9000 ????
    266  9000 ????	       00 b7	   _Select_Timer =	var19
    267  9000 ????
    268  9000 ????	       00 89	   _Ball_Y    =	bally
    269  9000 ????	       00 b5	   _Wroth_Color_Mem =	var17
    270  9000 ????
    271  9000 ????	       00 b4	   _1000_Counter =	var16
    272  9000 ????
    273  9000 ????	       00 b3	   _Pause_Mem_Missile0y =	var15
    274  9000 ????
    275  9000 ????	       00 b2	   _Pause_Mem_No_Repeat =	var14
    276  9000 ????
    277  9000 ????	       00 b1	   _Pause_Mem_Sprite0_Color =	var13
    278  9000 ????
    279  9000 ????	       00 b0	   _Pause_Mem_Score_Color =	var12
    280  9000 ????
    281  9000 ????	       00 af	   _Pause_Mem_SCBack_Color =	var11
    282  9000 ????
    283  9000 ????	       00 ae	   _Pause_Mem_Health_Color =	var10
    284  9000 ????
    285  9000 ????	       00 ad	   _Pause_Mem_Sprite1_LR =	var9
    286  9000 ????
    287  9000 ????	       00 ac	   _Pause_Mem_Sprite1_UD =	var8
    288  9000 ????
    289  9000 ????	       00 ab	   _Pause_Counter =	var7
    290  9000 ????
    291  9000 ????	       00 aa	   _Score3_Mem =	var6
    292  9000 ????
    293  9000 ????	       00 a9	   _Score2_Mem =	var5
    294  9000 ????
    295  9000 ????	       00 a8	   _Score1_Mem =	var4
    296  9000 ????
    297  9000 ????	       00 a7	   _High_Score3 =	var3
    298  9000 ????
    299  9000 ????	       00 a6	   _High_Score2 =	var2
    300  9000 ????
    301  9000 ????	       00 a5	   _High_Score1 =	var1
    302  9000 ????
    303  9000 ????	       00 a4	   _Manatee_Health_Counter =	var0
    304  9000 ????
    305  9000 ????	       00 ed	   _Manatee_Hurt_Counter =	z
    306  9000 ????
    307  9000 ????	       00 ec	   _Corrdd_Shot_Counter =	y
    308  9000 ????
    309  9000 ????	       00 eb	   _Corrdd_Timer =	x
    310  9000 ????
    311  9000 ????	       00 ea	   _Corrdd_App_Counter =	w
    312  9000 ????
    313  9000 ????	       00 e8	   _Homing_Sc_Bck_Cntr =	u
    314  9000 ????	       00 e7	   _Wrothopod_Counter =	t
    315  9000 ????
    316  9000 ????	       00 e6	   _Tentacle_Grab_Counter =	s
    317  9000 ????
    318  9000 ????	       00 e5	   _Points_Roll_Up =	r
    319  9000 ????
    320  9000 ????	       00 e4	   _Shot_Bonus_Counter =	q
    321  9000 ????
    322  9000 ????	       00 e3	   _Plop_Rate =	p
    323  9000 ????
    324  9000 ????	       00 e2	   _Seaweed_Shot =	o
    325  9000 ????
    326  9000 ????	       00 e1	   _Slide_Speed =	n
    327  9000 ????
    328  9000 ????	       00 e0	   _Slide_Counter =	m
    329  9000 ????
    330  9000 ????	       00 df	   _Ch1_Counter =	l
    331  9000 ????
    332  9000 ????	       00 de	   _Ch1_Duration =	k
    333  9000 ????
    334  9000 ????	       00 dd	   _Ch1_Sound =	j
    335  9000 ????
    336  9000 ????	       00 dc	   _Ch0_Counter =	i
    337  9000 ????
    338  9000 ????	       00 db	   _Ch0_Duration =	h
    339  9000 ????
    340  9000 ????	       00 da	   _Ch0_Sound =	g
    341  9000 ????
    342  9000 ????	       00 d9	   _Frame_Counter =	f
    343  9000 ????
    344  9000 ????	       00 d8	   _Master_Counter =	e
    345  9000 ????
    346  9000 ????	       00 81	   _P1_Left_Right =	player1x
    347  9000 ????	       00 86	   _P1_Up_Down =	player1y
    348  9000 ????	       00 85	   _P0_Up_Down =	player0y
    349  9000 ????	       00 80	   _P0_Left_Right =	player0x
    350  9000 ????	       00 01	   superchip  =	1
    351  9000 ????	       00 07	   bs_mask    =	7
    352  9000 ????	       00 20	   bankswitch =	32
    353  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    354  9000 ????	       00 01	   PFcolors   =	1
    355  9000 ????	       00 01	   player1colors =	1
------- FILE e:\Documents\bB\demos\seaweed_assault.bas.asm
      8  9000 ????				      ifconst	bankswitch
      9  9000 ????			  -	      if	bankswitch == 8
     10  9000 ????			  -	      ORG	$1000
     11  9000 ????			  -	      RORG	$D000
     12  9000 ????				      endif
     13  9000 ????			  -	      if	bankswitch == 16
     14  9000 ????			  -	      ORG	$1000
     15  9000 ????			  -	      RORG	$9000
     16  9000 ????				      endif
     17  9000 ????				      if	bankswitch == 32
     18  1000					      ORG	$1000
     19  1000					      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .
     33  1100							; 
     34  1100
     35  1100				   .
     36  1100							; 
     37  1100
     38  1100				   .
     39  1100							; 
     40  1100
     41  1100				   .
     42  1100							; 
     43  1100
     44  1100				   .
     45  1100							; 
     46  1100
     47  1100				   .
     48  1100							; 
     49  1100
     50  1100				   .
     51  1100							; 
     52  1100
     53  1100				   .
     54  1100							; 
     55  1100
     56  1100				   .
     57  1100							; 
     58  1100
     59  1100				   .
     60  1100							; 
     61  1100
     62  1100				   .
     63  1100							; 
     64  1100
     65  1100				   .
     66  1100							; 
     67  1100
     68  1100				   .
     69  1100							; 
     70  1100
     71  1100				   .
     72  1100							; 
     73  1100
     74  1100				   .
     75  1100							; 
     76  1100
     77  1100				   .
     78  1100							; 
     79  1100
     80  1100				   .
     81  1100							; 
     82  1100
     83  1100				   .
     84  1100							; 
     85  1100
     86  1100				   .
     87  1100							; 
     88  1100
     89  1100				   .
     90  1100							; 
     91  1100
     92  1100				   .
     93  1100							; 
     94  1100
     95  1100				   .
     96  1100							; 
     97  1100
     98  1100				   .
     99  1100							; 
    100  1100
    101  1100				   .
    102  1100							; 
    103  1100
    104  1100				   .
    105  1100							; 
    106  1100
    107  1100				   .
    108  1100							; 
    109  1100
    110  1100				   .
    111  1100							; 
    112  1100
    113  1100				   .
    114  1100							; 
    115  1100
    116  1100				   .
    117  1100							; 
    118  1100
    119  1100				   .L00 		;  set kernel_options player1colors pfcolors
    120  1100
    121  1100				   .
    122  1100							; 
    123  1100
    124  1100				   .
    125  1100							; 
    126  1100
    127  1100				   .
    128  1100							; 
    129  1100
    130  1100				   .
    131  1100							; 
    132  1100
    133  1100				   .
    134  1100							; 
    135  1100
    136  1100				   .
    137  1100							; 
    138  1100
    139  1100				   .
    140  1100							; 
    141  1100
    142  1100				   .L01 		;  set romsize 32kSC
    143  1100
    144  1100				   .
    145  1100							; 
    146  1100
    147  1100				   .
    148  1100							; 
    149  1100
    150  1100				   .
    151  1100							; 
    152  1100
    153  1100				   .
    154  1100							; 
    155  1100
    156  1100				   .
    157  1100							; 
    158  1100
    159  1100				   .
    160  1100							; 
    161  1100
    162  1100				   .
    163  1100							; 
    164  1100
    165  1100				   .
    166  1100							; 
    167  1100
    168  1100				   .L02 		;  set optimization inlinerand
    169  1100
    170  1100				   .
    171  1100							; 
    172  1100
    173  1100				   .
    174  1100							; 
    175  1100
    176  1100				   .
    177  1100							; 
    178  1100
    179  1100				   .
    180  1100							; 
    181  1100
    182  1100				   .
    183  1100							; 
    184  1100
    185  1100				   .
    186  1100							; 
    187  1100
    188  1100				   .
    189  1100							; 
    190  1100
    191  1100				   .
    192  1100							; 
    193  1100
    194  1100				   .
    195  1100							; 
    196  1100
    197  1100				   .
    198  1100							; 
    199  1100
    200  1100				   .
    201  1100							; 
    202  1100
    203  1100				   .
    204  1100							; 
    205  1100
    206  1100				   .
    207  1100							; 
    208  1100
    209  1100				   .
    210  1100							; 
    211  1100
    212  1100				   .
    213  1100							; 
    214  1100
    215  1100				   .
    216  1100							; 
    217  1100
    218  1100				   .
    219  1100							; 
    220  1100
    221  1100				   .
    222  1100							; 
    223  1100
    224  1100				   .
    225  1100							; 
    226  1100
    227  1100				   .
    228  1100							; 
    229  1100
    230  1100				   .
    231  1100							; 
    232  1100
    233  1100				   .
    234  1100							; 
    235  1100
    236  1100				   .
    237  1100							; 
    238  1100
    239  1100				   .
    240  1100							; 
    241  1100
    242  1100				   .
    243  1100							; 
    244  1100
    245  1100				   .
    246  1100							; 
    247  1100
    248  1100				   .
    249  1100							; 
    250  1100
    251  1100				   .
    252  1100							; 
    253  1100
    254  1100				   .
    255  1100							; 
    256  1100
    257  1100				   .L03 		;  dim _P0_Left_Right	=  player0x.a
    258  1100
    259  1100				   .
    260  1100							; 
    261  1100
    262  1100				   .L04 		;  dim _P0_Up_Down  =	player0y.b
    263  1100
    264  1100				   .
    265  1100							; 
    266  1100
    267  1100				   .
    268  1100							; 
    269  1100
    270  1100				   .
    271  1100							; 
    272  1100
    273  1100				   .
    274  1100							; 
    275  1100
    276  1100				   .L05 		;  dim _P1_Up_Down  =	player1y.c
    277  1100
    278  1100				   .
    279  1100							; 
    280  1100
    281  1100				   .L06 		;  dim _P1_Left_Right	=  player1x.d
    282  1100
    283  1100				   .
    284  1100							; 
    285  1100
    286  1100				   .
    287  1100							; 
    288  1100
    289  1100				   .
    290  1100							; 
    291  1100
    292  1100				   .
    293  1100							; 
    294  1100
    295  1100				   .
    296  1100							; 
    297  1100
    298  1100				   .
    299  1100							; 
    300  1100
    301  1100				   .L07 		;  dim _Master_Counter  =  e
    302  1100
    303  1100				   .L08 		;  dim _Frame_Counter	=  f
    304  1100
    305  1100				   .
    306  1100							; 
    307  1100
    308  1100				   .
    309  1100							; 
    310  1100
    311  1100				   .
    312  1100							; 
    313  1100
    314  1100				   .
    315  1100							; 
    316  1100
    317  1100				   .L09 		;  dim _Ch0_Sound  =  g
    318  1100
    319  1100				   .L010		;  dim _Ch0_Duration  =  h
    320  1100
    321  1100				   .L011		;  dim _Ch0_Counter  =  i
    322  1100
    323  1100				   .
    324  1100							; 
    325  1100
    326  1100				   .
    327  1100							; 
    328  1100
    329  1100				   .
    330  1100							; 
    331  1100
    332  1100				   .
    333  1100							; 
    334  1100
    335  1100				   .L012		;  dim _Ch1_Sound  =  j
    336  1100
    337  1100				   .L013		;  dim _Ch1_Duration  =  k
    338  1100
    339  1100				   .L014		;  dim _Ch1_Counter  =  l
    340  1100
    341  1100				   .
    342  1100							; 
    343  1100
    344  1100				   .
    345  1100							; 
    346  1100
    347  1100				   .
    348  1100							; 
    349  1100
    350  1100				   .
    351  1100							; 
    352  1100
    353  1100				   .L015		;  dim _Slide_Counter	=  m
    354  1100
    355  1100				   .
    356  1100							; 
    357  1100
    358  1100				   .
    359  1100							; 
    360  1100
    361  1100				   .
    362  1100							; 
    363  1100
    364  1100				   .
    365  1100							; 
    366  1100
    367  1100				   .L016		;  dim _Slide_Speed  =  n
    368  1100
    369  1100				   .
    370  1100							; 
    371  1100
    372  1100				   .
    373  1100							; 
    374  1100
    375  1100				   .
    376  1100							; 
    377  1100
    378  1100				   .
    379  1100							; 
    380  1100
    381  1100				   .L017		;  dim _Seaweed_Shot  =  o
    382  1100
    383  1100				   .
    384  1100							; 
    385  1100
    386  1100				   .
    387  1100							; 
    388  1100
    389  1100				   .
    390  1100							; 
    391  1100
    392  1100				   .
    393  1100							; 
    394  1100
    395  1100				   .L018		;  dim _Plop_Rate  =  p
    396  1100
    397  1100				   .
    398  1100							; 
    399  1100
    400  1100				   .
    401  1100							; 
    402  1100
    403  1100				   .
    404  1100							; 
    405  1100
    406  1100				   .
    407  1100							; 
    408  1100
    409  1100				   .L019		;  dim _Shot_Bonus_Counter  =	q
    410  1100
    411  1100				   .L020		;  dim _Points_Roll_Up  =  r
    412  1100
    413  1100				   .
    414  1100							; 
    415  1100
    416  1100				   .
    417  1100							; 
    418  1100
    419  1100				   .
    420  1100							; 
    421  1100
    422  1100				   .
    423  1100							; 
    424  1100
    425  1100				   .L021		;  dim _Tentacle_Grab_Counter	=  s
    426  1100
    427  1100				   .
    428  1100							; 
    429  1100
    430  1100				   .
    431  1100							; 
    432  1100
    433  1100				   .
    434  1100							; 
    435  1100
    436  1100				   .
    437  1100							; 
    438  1100
    439  1100				   .L022		;  dim _Wrothopod_Counter  =  t
    440  1100
    441  1100				   .
    442  1100							; 
    443  1100
    444  1100				   .
    445  1100							; 
    446  1100
    447  1100				   .
    448  1100							; 
    449  1100
    450  1100				   .
    451  1100							; 
    452  1100
    453  1100				   .L023		;  dim _Homing_Sc_Bck_Cntr  =	u.v
    454  1100
    455  1100				   .
    456  1100							; 
    457  1100
    458  1100				   .
    459  1100							; 
    460  1100
    461  1100				   .
    462  1100							; 
    463  1100
    464  1100				   .
    465  1100							; 
    466  1100
    467  1100				   .L024		;  dim _Corrdd_App_Counter  =	w
    468  1100
    469  1100				   .
    470  1100							; 
    471  1100
    472  1100				   .
    473  1100							; 
    474  1100
    475  1100				   .
    476  1100							; 
    477  1100
    478  1100				   .
    479  1100							; 
    480  1100
    481  1100				   .L025		;  dim _Corrdd_Timer  =  x
    482  1100
    483  1100				   .
    484  1100							; 
    485  1100
    486  1100				   .
    487  1100							; 
    488  1100
    489  1100				   .
    490  1100							; 
    491  1100
    492  1100				   .
    493  1100							; 
    494  1100
    495  1100				   .L026		;  dim _Corrdd_Shot_Counter  =  y
    496  1100
    497  1100				   .
    498  1100							; 
    499  1100
    500  1100				   .
    501  1100							; 
    502  1100
    503  1100				   .
    504  1100							; 
    505  1100
    506  1100				   .
    507  1100							; 
    508  1100
    509  1100				   .L027		;  dim _Manatee_Hurt_Counter  =  z
    510  1100
    511  1100				   .
    512  1100							; 
    513  1100
    514  1100				   .
    515  1100							; 
    516  1100
    517  1100				   .
    518  1100							; 
    519  1100
    520  1100				   .
    521  1100							; 
    522  1100
    523  1100				   .L028		;  dim _Manatee_Health_Counter  =  var0
    524  1100
    525  1100				   .
    526  1100							; 
    527  1100
    528  1100				   .
    529  1100							; 
    530  1100
    531  1100				   .
    532  1100							; 
    533  1100
    534  1100				   .
    535  1100							; 
    536  1100
    537  1100				   .
    538  1100							; 
    539  1100
    540  1100				   .
    541  1100							; 
    542  1100
    543  1100				   .
    544  1100							; 
    545  1100
    546  1100				   .
    547  1100							; 
    548  1100
    549  1100				   .L029		;  dim _High_Score1  =  var1
    550  1100
    551  1100				   .L030		;  dim _High_Score2  =  var2
    552  1100
    553  1100				   .L031		;  dim _High_Score3  =  var3
    554  1100
    555  1100				   .
    556  1100							; 
    557  1100
    558  1100				   .
    559  1100							; 
    560  1100
    561  1100				   .
    562  1100							; 
    563  1100
    564  1100				   .
    565  1100							; 
    566  1100
    567  1100				   .
    568  1100							; 
    569  1100
    570  1100				   .L032		;  dim _Score1_Mem  =	var4
    571  1100
    572  1100				   .L033		;  dim _Score2_Mem  =	var5
    573  1100
    574  1100				   .L034		;  dim _Score3_Mem  =	var6
    575  1100
    576  1100				   .
    577  1100							; 
    578  1100
    579  1100				   .
    580  1100							; 
    581  1100
    582  1100				   .
    583  1100							; 
    584  1100
    585  1100				   .
    586  1100							; 
    587  1100
    588  1100				   .L035		;  dim _Pause_Counter	=  var7
    589  1100
    590  1100				   .
    591  1100							; 
    592  1100
    593  1100				   .L036		;  dim _Pause_Mem_Sprite1_UD  =  var8
    594  1100
    595  1100				   .
    596  1100							; 
    597  1100
    598  1100				   .L037		;  dim _Pause_Mem_Sprite1_LR  =  var9
    599  1100
    600  1100				   .
    601  1100							; 
    602  1100
    603  1100				   .L038		;  dim _Pause_Mem_Health_Color  =  var10
    604  1100
    605  1100				   .
    606  1100							; 
    607  1100
    608  1100				   .L039		;  dim _Pause_Mem_SCBack_Color  =  var11
    609  1100
    610  1100				   .
    611  1100							; 
    612  1100
    613  1100				   .L040		;  dim _Pause_Mem_Score_Color	=  var12
    614  1100
    615  1100				   .
    616  1100							; 
    617  1100
    618  1100				   .L041		;  dim _Pause_Mem_Sprite0_Color  =  var13
    619  1100
    620  1100				   .
    621  1100							; 
    622  1100
    623  1100				   .L042		;  dim _Pause_Mem_No_Repeat  =  var14
    624  1100
    625  1100				   .
    626  1100							; 
    627  1100
    628  1100				   .L043		;  dim _Pause_Mem_Missile0y  =  var15
    629  1100
    630  1100				   .
    631  1100							; 
    632  1100
    633  1100				   .
    634  1100							; 
    635  1100
    636  1100				   .
    637  1100							; 
    638  1100
    639  1100				   .
    640  1100							; 
    641  1100
    642  1100				   .L044		;  dim _1000_Counter  =  var16
    643  1100
    644  1100				   .
    645  1100							; 
    646  1100
    647  1100				   .
    648  1100							; 
    649  1100
    650  1100				   .
    651  1100							; 
    652  1100
    653  1100				   .
    654  1100							; 
    655  1100
    656  1100				   .L045		;  dim _Wroth_Color_Mem  =  var17
    657  1100
    658  1100				   .
    659  1100							; 
    660  1100
    661  1100				   .
    662  1100							; 
    663  1100
    664  1100				   .
    665  1100							; 
    666  1100
    667  1100				   .
    668  1100							; 
    669  1100
    670  1100				   .L046		;  dim _Ball_Y  =  bally.var18
    671  1100
    672  1100				   .
    673  1100							; 
    674  1100
    675  1100				   .
    676  1100							; 
    677  1100
    678  1100				   .
    679  1100							; 
    680  1100
    681  1100				   .
    682  1100							; 
    683  1100
    684  1100				   .
    685  1100							; 
    686  1100
    687  1100				   .L047		;  dim _Select_Timer  =  var19
    688  1100
    689  1100				   .
    690  1100							; 
    691  1100
    692  1100				   .
    693  1100							; 
    694  1100
    695  1100				   .
    696  1100							; 
    697  1100
    698  1100				   .
    699  1100							; 
    700  1100
    701  1100				   .L048		;  dim _MyTemp_01  =  var20
    702  1100
    703  1100				   .
    704  1100							; 
    705  1100
    706  1100				   .L049		;  dim _MLSetup_Tmp_Close_In_01  =  var20
    707  1100
    708  1100				   .
    709  1100							; 
    710  1100
    711  1100				   .L050		;  dim _ML_Tmp_AP_Ship_Dir  =	var20
    712  1100
    713  1100				   .
    714  1100							; 
    715  1100
    716  1100				   .L051		;  dim _GmOvr_Tmp_Tone_Flip_Counter  =  var20
    717  1100
    718  1100				   .
    719  1100							; 
    720  1100
    721  1100				   .L052		;  dim _GmOvr_Tmp_Anim_Counter  =  var20
    722  1100
    723  1100				   .
    724  1100							; 
    725  1100
    726  1100				   .
    727  1100							; 
    728  1100
    729  1100				   .
    730  1100							; 
    731  1100
    732  1100				   .
    733  1100							; 
    734  1100
    735  1100				   .L053		;  dim _MyTemp_02  =  var21
    736  1100
    737  1100				   .
    738  1100							; 
    739  1100
    740  1100				   .L054		;  dim _MLSetup_Tmp_Close_In_02  =  var21
    741  1100
    742  1100				   .
    743  1100							; 
    744  1100
    745  1100				   .L055		;  dim _MLoop_Tmp_Corrdd_Anim_Count  =  var21
    746  1100
    747  1100				   .
    748  1100							; 
    749  1100
    750  1100				   .L056		;  dim _GmOvr_Tmp_Frame_Counter  =  var21
    751  1100
    752  1100				   .
    753  1100							; 
    754  1100
    755  1100				   .
    756  1100							; 
    757  1100
    758  1100				   .
    759  1100							; 
    760  1100
    761  1100				   .
    762  1100							; 
    763  1100
    764  1100				   .L057		;  dim _MyTemp_03  =  var22
    765  1100
    766  1100				   .
    767  1100							; 
    768  1100
    769  1100				   .L058		;  dim _MLSet_Tone_Flip_Cntr_Tmp  =  var22
    770  1100
    771  1100				   .
    772  1100							; 
    773  1100
    774  1100				   .L059		;  dim _AP_2_Sec_Score_Flip  =  var22
    775  1100
    776  1100				   .
    777  1100							; 
    778  1100
    779  1100				   .L060		;  dim _GmOvr_Tmp_Y_Fill_Counter  =  var22
    780  1100
    781  1100				   .
    782  1100							; 
    783  1100
    784  1100				   .L061		;  dim _GmOvr_Tmp_Scroll_Counter  =  var22
    785  1100
    786  1100				   .
    787  1100							; 
    788  1100
    789  1100				   .
    790  1100							; 
    791  1100
    792  1100				   .
    793  1100							; 
    794  1100
    795  1100				   .
    796  1100							; 
    797  1100
    798  1100				   .L062		;  dim _MyTemp_04  =  var23
    799  1100
    800  1100				   .
    801  1100							; 
    802  1100
    803  1100				   .L063		;  dim _MLSetup_Tmp_Close_In_Counter  =  var23
    804  1100
    805  1100				   .
    806  1100							; 
    807  1100
    808  1100				   .L064		;  dim _GmOvr_Tmp_x_Fill_Counter  =  var23
    809  1100
    810  1100				   .
    811  1100							; 
    812  1100
    813  1100				   .L065		;  dim _GmOvr_Tmp_8_Scroll_Counter  =	var23
    814  1100
    815  1100				   .
    816  1100							; 
    817  1100
    818  1100				   .
    819  1100							; 
    820  1100
    821  1100				   .
    822  1100							; 
    823  1100
    824  1100				   .
    825  1100							; 
    826  1100
    827  1100				   .L066		;  dim _Corrdd_X_Shot_Mem  =  var24
    828  1100
    829  1100				   .
    830  1100							; 
    831  1100
    832  1100				   .L067		;  dim _Corrdd_Y_Shot_Mem  =  var25
    833  1100
    834  1100				   .
    835  1100							; 
    836  1100
    837  1100				   .
    838  1100							; 
    839  1100
    840  1100				   .
    841  1100							; 
    842  1100
    843  1100				   .
    844  1100							; 
    845  1100
    846  1100				   .L068		;  dim _Level_Counter	=  var26
    847  1100
    848  1100				   .
    849  1100							; 
    850  1100
    851  1100				   .
    852  1100							; 
    853  1100
    854  1100				   .
    855  1100							; 
    856  1100
    857  1100				   .
    858  1100							; 
    859  1100
    860  1100				   .L069		;  dim _Plop_Timer  =	var27
    861  1100
    862  1100				   .
    863  1100							; 
    864  1100
    865  1100				   .L070		;  dim _GmOvr_Tmp_GOAnim_Counter  =  var27
    866  1100
    867  1100				   .
    868  1100							; 
    869  1100
    870  1100				   .
    871  1100							; 
    872  1100
    873  1100				   .
    874  1100							; 
    875  1100
    876  1100				   .
    877  1100							; 
    878  1100
    879  1100				   .L071		;  dim _Corroded_Anim_Frame  =  var28
    880  1100
    881  1100				   .
    882  1100							; 
    883  1100
    884  1100				   .
    885  1100							; 
    886  1100
    887  1100				   .
    888  1100							; 
    889  1100
    890  1100				   .
    891  1100							; 
    892  1100
    893  1100				   .
    894  1100							; 
    895  1100
    896  1100				   .L072		;  dim _BitOp_Ship  =	var29
    897  1100
    898  1100				   .
    899  1100							; 
    900  1100
    901  1100				   .
    902  1100							; 
    903  1100
    904  1100				   .
    905  1100							; 
    906  1100
    907  1100				   .
    908  1100							; 
    909  1100
    910  1100				   .L073		;  dim _Bit0_Ship_Facing_Up  =  var29
    911  1100
    912  1100				   .L074		;  dim _Bit1_Ship_Facing_Down	=  var29
    913  1100
    914  1100				   .L075		;  dim _Bit2_Ship_Facing_Left	=  var29
    915  1100
    916  1100				   .L076		;  dim _Bit3_Ship_Facing_Right  =  var29
    917  1100
    918  1100				   .
    919  1100							; 
    920  1100
    921  1100				   .
    922  1100							; 
    923  1100
    924  1100				   .
    925  1100							; 
    926  1100
    927  1100				   .
    928  1100							; 
    929  1100
    930  1100				   .L077		;  dim _Bit4_Ship_U_Slide  =  var29
    931  1100
    932  1100				   .L078		;  dim _Bit5_Ship_D_Slide  =  var29
    933  1100
    934  1100				   .L079		;  dim _Bit6_Ship_L_Slide  =  var29
    935  1100
    936  1100				   .L080		;  dim _Bit7_Ship_R_Slide  =  var29
    937  1100
    938  1100				   .
    939  1100							; 
    940  1100
    941  1100				   .
    942  1100							; 
    943  1100
    944  1100				   .
    945  1100							; 
    946  1100
    947  1100				   .
    948  1100							; 
    949  1100
    950  1100				   .
    951  1100							; 
    952  1100
    953  1100				   .
    954  1100							; 
    955  1100
    956  1100				   .L081		;  dim _Bitop_Misc_Snapshot  =  var30
    957  1100
    958  1100				   .
    959  1100							; 
    960  1100
    961  1100				   .
    962  1100							; 
    963  1100
    964  1100				   .
    965  1100							; 
    966  1100
    967  1100				   .
    968  1100							; 
    969  1100
    970  1100				   .L082		;  dim _Bit0_Shot_Moving  =  var30
    971  1100
    972  1100				   .
    973  1100							; 
    974  1100
    975  1100				   .
    976  1100							; 
    977  1100
    978  1100				   .
    979  1100							; 
    980  1100
    981  1100				   .
    982  1100							; 
    983  1100
    984  1100				   .L083		;  dim _Bit1_P0_Hit_Seaweed  =  var30
    985  1100
    986  1100				   .
    987  1100							; 
    988  1100
    989  1100				   .
    990  1100							; 
    991  1100
    992  1100				   .
    993  1100							; 
    994  1100
    995  1100				   .
    996  1100							; 
    997  1100
    998  1100				   .L084		;  dim _Bit2_Bonus_Limit  =  var30
    999  1100
   1000  1100				   .
   1001  1100							; 
   1002  1100
   1003  1100				   .
   1004  1100							; 
   1005  1100
   1006  1100				   .
   1007  1100							; 
   1008  1100
   1009  1100				   .
   1010  1100							; 
   1011  1100
   1012  1100				   .L085		;  dim _Bit3_Flip_P0  =  var30
   1013  1100
   1014  1100				   .
   1015  1100							; 
   1016  1100
   1017  1100				   .
   1018  1100							; 
   1019  1100
   1020  1100				   .
   1021  1100							; 
   1022  1100
   1023  1100				   .
   1024  1100							; 
   1025  1100
   1026  1100				   .
   1027  1100							; 
   1028  1100
   1029  1100				   .L086		;  dim _Bit4_Shot_U_Snapshot  =  var30
   1030  1100
   1031  1100				   .L087		;  dim _Bit5_Shot_D_Snapshot  =  var30
   1032  1100
   1033  1100				   .L088		;  dim _Bit6_Shot_L_Snapshot  =  var30
   1034  1100
   1035  1100				   .L089		;  dim _Bit7_Shot_R_Snapshot  =  var30
   1036  1100
   1037  1100				   .
   1038  1100							; 
   1039  1100
   1040  1100				   .
   1041  1100							; 
   1042  1100
   1043  1100				   .
   1044  1100							; 
   1045  1100
   1046  1100				   .
   1047  1100							; 
   1048  1100
   1049  1100				   .
   1050  1100							; 
   1051  1100
   1052  1100				   .
   1053  1100							; 
   1054  1100
   1055  1100				   .
   1056  1100							; 
   1057  1100
   1058  1100				   .
   1059  1100							; 
   1060  1100
   1061  1100				   .
   1062  1100							; 
   1063  1100
   1064  1100				   .L090		;  dim _Bitop_Ship_Restrainer	=  var31
   1065  1100
   1066  1100				   .L091		;  dim _Bit0_Ship_Restrainer_U  =  var31
   1067  1100
   1068  1100				   .L092		;  dim _Bit1_Ship_Restrainer_D  =  var31
   1069  1100
   1070  1100				   .L093		;  dim _Bit2_Ship_Restrainer_L  =  var31
   1071  1100
   1072  1100				   .L094		;  dim _Bit3_Ship_Restrainer_R  =  var31
   1073  1100
   1074  1100				   .L095		;  dim _Bit4_Ship_Restrainer_UL  =  var31
   1075  1100
   1076  1100				   .L096		;  dim _Bit5_Ship_Restrainer_UR  =  var31
   1077  1100
   1078  1100				   .L097		;  dim _Bit6_Ship_Restrainer_DL  =  var31
   1079  1100
   1080  1100				   .L098		;  dim _Bit7_Ship_Restrainer_DR  =  var31
   1081  1100
   1082  1100				   .
   1083  1100							; 
   1084  1100
   1085  1100				   .
   1086  1100							; 
   1087  1100
   1088  1100				   .
   1089  1100							; 
   1090  1100
   1091  1100				   .
   1092  1100							; 
   1093  1100
   1094  1100				   .
   1095  1100							; 
   1096  1100
   1097  1100				   .
   1098  1100							; 
   1099  1100
   1100  1100				   .
   1101  1100							; 
   1102  1100
   1103  1100				   .
   1104  1100							; 
   1105  1100
   1106  1100				   .L099		;  dim _Bit0_Reset_Restrainer	=  var32
   1107  1100
   1108  1100				   .
   1109  1100							; 
   1110  1100
   1111  1100				   .
   1112  1100							; 
   1113  1100
   1114  1100				   .
   1115  1100							; 
   1116  1100
   1117  1100				   .
   1118  1100							; 
   1119  1100
   1120  1100				   .
   1121  1100							; 
   1122  1100
   1123  1100				   .L0100		;  dim _Bit1_FireB_Restrainer	=  var32
   1124  1100
   1125  1100				   .
   1126  1100							; 
   1127  1100
   1128  1100				   .
   1129  1100							; 
   1130  1100
   1131  1100				   .
   1132  1100							; 
   1133  1100
   1134  1100				   .
   1135  1100							; 
   1136  1100
   1137  1100				   .
   1138  1100							; 
   1139  1100
   1140  1100				   .L0101		;  dim _Bit1_Joystick_Restrainer_Tmp  =  var32
   1141  1100
   1142  1100				   .
   1143  1100							; 
   1144  1100
   1145  1100				   .
   1146  1100							; 
   1147  1100
   1148  1100				   .
   1149  1100							; 
   1150  1100
   1151  1100				   .
   1152  1100							; 
   1153  1100
   1154  1100				   .L0102		;  dim _Bit1_Tmp_Ship_On_Screen  =  var32
   1155  1100
   1156  1100				   .
   1157  1100							; 
   1158  1100
   1159  1100				   .
   1160  1100							; 
   1161  1100
   1162  1100				   .
   1163  1100							; 
   1164  1100
   1165  1100				   .
   1166  1100							; 
   1167  1100
   1168  1100				   .L0103		;  dim _Bit2_Move_Tentacle_Up	=  var32
   1169  1100
   1170  1100				   .
   1171  1100							; 
   1172  1100
   1173  1100				   .
   1174  1100							; 
   1175  1100
   1176  1100				   .
   1177  1100							; 
   1178  1100
   1179  1100				   .
   1180  1100							; 
   1181  1100
   1182  1100				   .L0104		;  dim _Bit3_Ship_Yanked_Down	=  var32
   1183  1100
   1184  1100				   .
   1185  1100							; 
   1186  1100
   1187  1100				   .
   1188  1100							; 
   1189  1100
   1190  1100				   .
   1191  1100							; 
   1192  1100
   1193  1100				   .
   1194  1100							; 
   1195  1100
   1196  1100				   .L0105		;  dim _Bit4_Game_Started  =  var32
   1197  1100
   1198  1100				   .
   1199  1100							; 
   1200  1100
   1201  1100				   .
   1202  1100							; 
   1203  1100
   1204  1100				   .
   1205  1100							; 
   1206  1100
   1207  1100				   .
   1208  1100							; 
   1209  1100
   1210  1100				   .L0106		;  dim _Bit5_Sound_Alt_Torpedo_Hit  =	var32
   1211  1100
   1212  1100				   .
   1213  1100							; 
   1214  1100
   1215  1100				   .
   1216  1100							; 
   1217  1100
   1218  1100				   .
   1219  1100							; 
   1220  1100
   1221  1100				   .
   1222  1100							; 
   1223  1100
   1224  1100				   .L0107		;  dim _Bit6_Swap_Scores  =  var32
   1225  1100
   1226  1100				   .
   1227  1100							; 
   1228  1100
   1229  1100				   .
   1230  1100							; 
   1231  1100
   1232  1100				   .
   1233  1100							; 
   1234  1100
   1235  1100				   .
   1236  1100							; 
   1237  1100
   1238  1100				   .L0108		;  dim _Bit7_Vblank01	=  var32
   1239  1100
   1240  1100				   .
   1241  1100							; 
   1242  1100
   1243  1100				   .
   1244  1100							; 
   1245  1100
   1246  1100				   .
   1247  1100							; 
   1248  1100
   1249  1100				   .
   1250  1100							; 
   1251  1100
   1252  1100				   .
   1253  1100							; 
   1254  1100
   1255  1100				   .L0109		;  dim _Bit0_Canister_P1_On  =  var33
   1256  1100
   1257  1100				   .
   1258  1100							; 
   1259  1100
   1260  1100				   .
   1261  1100							; 
   1262  1100
   1263  1100				   .
   1264  1100							; 
   1265  1100
   1266  1100				   .
   1267  1100							; 
   1268  1100
   1269  1100				   .L0110		;  dim _Bit1_Wrothopod_On  =  var33
   1270  1100
   1271  1100				   .
   1272  1100							; 
   1273  1100
   1274  1100				   .
   1275  1100							; 
   1276  1100
   1277  1100				   .
   1278  1100							; 
   1279  1100
   1280  1100				   .
   1281  1100							; 
   1282  1100
   1283  1100				   .L0111		;  dim _Bit2_Wroth_Flip  =  var33
   1284  1100
   1285  1100				   .
   1286  1100							; 
   1287  1100
   1288  1100				   .
   1289  1100							; 
   1290  1100
   1291  1100				   .
   1292  1100							; 
   1293  1100
   1294  1100				   .
   1295  1100							; 
   1296  1100
   1297  1100				   .
   1298  1100							; 
   1299  1100
   1300  1100				   .L0112		;  dim _Bit3_Canister_Later  =  var33
   1301  1100
   1302  1100				   .
   1303  1100							; 
   1304  1100
   1305  1100				   .
   1306  1100							; 
   1307  1100
   1308  1100				   .
   1309  1100							; 
   1310  1100
   1311  1100				   .
   1312  1100							; 
   1313  1100
   1314  1100				   .L0113		;  dim _Bit4_Bonus_500_On  =  var33
   1315  1100
   1316  1100				   .
   1317  1100							; 
   1318  1100
   1319  1100				   .
   1320  1100							; 
   1321  1100
   1322  1100				   .
   1323  1100							; 
   1324  1100
   1325  1100				   .
   1326  1100							; 
   1327  1100
   1328  1100				   .L0114		;  dim _Bit5_Wroth_Mad  =  var33
   1329  1100
   1330  1100				   .
   1331  1100							; 
   1332  1100
   1333  1100				   .
   1334  1100							; 
   1335  1100
   1336  1100				   .
   1337  1100							; 
   1338  1100
   1339  1100				   .
   1340  1100							; 
   1341  1100
   1342  1100				   .L0115		;  dim _Bit6_Wroth_Touched  =	var33
   1343  1100
   1344  1100				   .
   1345  1100							; 
   1346  1100
   1347  1100				   .
   1348  1100							; 
   1349  1100
   1350  1100				   .
   1351  1100							; 
   1352  1100
   1353  1100				   .
   1354  1100							; 
   1355  1100
   1356  1100				   .L0116		;  dim _Bit7_Vblank02	=  var33
   1357  1100
   1358  1100				   .
   1359  1100							; 
   1360  1100
   1361  1100				   .
   1362  1100							; 
   1363  1100
   1364  1100				   .
   1365  1100							; 
   1366  1100
   1367  1100				   .
   1368  1100							; 
   1369  1100
   1370  1100				   .
   1371  1100							; 
   1372  1100
   1373  1100				   .L0117		;  dim _Bit0_Thousand_Bonus_Later  =  var34
   1374  1100
   1375  1100				   .
   1376  1100							; 
   1377  1100
   1378  1100				   .
   1379  1100							; 
   1380  1100
   1381  1100				   .
   1382  1100							; 
   1383  1100
   1384  1100				   .
   1385  1100							; 
   1386  1100
   1387  1100				   .L0118		;  dim _Bit1_Canister_Trigger	=  var34
   1388  1100
   1389  1100				   .
   1390  1100							; 
   1391  1100
   1392  1100				   .
   1393  1100							; 
   1394  1100
   1395  1100				   .
   1396  1100							; 
   1397  1100
   1398  1100				   .
   1399  1100							; 
   1400  1100
   1401  1100				   .L0119		;  dim _Bit2_Corrdd_Can_On  =	var34
   1402  1100
   1403  1100				   .
   1404  1100							; 
   1405  1100
   1406  1100				   .
   1407  1100							; 
   1408  1100
   1409  1100				   .
   1410  1100							; 
   1411  1100
   1412  1100				   .
   1413  1100							; 
   1414  1100
   1415  1100				   .L0120		;  dim _Bit3_Corroded_Can_Chase_Player  =  var34
   1416  1100
   1417  1100				   .
   1418  1100							; 
   1419  1100
   1420  1100				   .
   1421  1100							; 
   1422  1100
   1423  1100				   .
   1424  1100							; 
   1425  1100
   1426  1100				   .
   1427  1100							; 
   1428  1100
   1429  1100				   .L0121		;  dim _Bit4_Corrdd_Can_Swd_Shot  =  var34
   1430  1100
   1431  1100				   .
   1432  1100							; 
   1433  1100
   1434  1100				   .
   1435  1100							; 
   1436  1100
   1437  1100				   .
   1438  1100							; 
   1439  1100
   1440  1100				   .
   1441  1100							; 
   1442  1100
   1443  1100				   .L0122		;  dim _Bit5_Bonus_500_Trigger  =  var34
   1444  1100
   1445  1100				   .
   1446  1100							; 
   1447  1100
   1448  1100				   .
   1449  1100							; 
   1450  1100
   1451  1100				   .
   1452  1100							; 
   1453  1100
   1454  1100				   .
   1455  1100							; 
   1456  1100
   1457  1100				   .L0123		;  dim _Bit6_Homing_Color_Cycle_On  =	var34
   1458  1100
   1459  1100				   .
   1460  1100							; 
   1461  1100
   1462  1100				   .
   1463  1100							; 
   1464  1100
   1465  1100				   .
   1466  1100							; 
   1467  1100
   1468  1100				   .
   1469  1100							; 
   1470  1100
   1471  1100				   .L0124		;  dim _Bit7_Select_Restrainer  =  var34
   1472  1100
   1473  1100				   .
   1474  1100							; 
   1475  1100
   1476  1100				   .
   1477  1100							; 
   1478  1100
   1479  1100				   .
   1480  1100							; 
   1481  1100
   1482  1100				   .
   1483  1100							; 
   1484  1100
   1485  1100				   .
   1486  1100							; 
   1487  1100
   1488  1100				   .L0125		;  dim _Bit0_Pause_Position  =  var35
   1489  1100
   1490  1100				   .
   1491  1100							; 
   1492  1100
   1493  1100				   .
   1494  1100							; 
   1495  1100
   1496  1100				   .
   1497  1100							; 
   1498  1100
   1499  1100				   .
   1500  1100							; 
   1501  1100
   1502  1100				   .L0126		;  dim _Bit1_Pause_Check  =  var35
   1503  1100
   1504  1100				   .
   1505  1100							; 
   1506  1100
   1507  1100				   .
   1508  1100							; 
   1509  1100
   1510  1100				   .
   1511  1100							; 
   1512  1100
   1513  1100				   .
   1514  1100							; 
   1515  1100
   1516  1100				   .L0127		;  dim _Bit2_1000_On  =  var35
   1517  1100
   1518  1100				   .
   1519  1100							; 
   1520  1100
   1521  1100				   .
   1522  1100							; 
   1523  1100
   1524  1100				   .
   1525  1100							; 
   1526  1100
   1527  1100				   .
   1528  1100							; 
   1529  1100
   1530  1100				   .L0128		;  dim _Bit3_Easter_Egg  =  var35
   1531  1100
   1532  1100				   .
   1533  1100							; 
   1534  1100
   1535  1100				   .
   1536  1100							; 
   1537  1100
   1538  1100				   .
   1539  1100							; 
   1540  1100
   1541  1100				   .
   1542  1100							; 
   1543  1100
   1544  1100				   .L0129		;  dim _Bit4_Manatee_Hurt_Color  =  var35
   1545  1100
   1546  1100				   .
   1547  1100							; 
   1548  1100
   1549  1100				   .
   1550  1100							; 
   1551  1100
   1552  1100				   .
   1553  1100							; 
   1554  1100
   1555  1100				   .
   1556  1100							; 
   1557  1100
   1558  1100				   .L0130		;  dim _Bit5_Manatee_Health_Color  =  var35
   1559  1100
   1560  1100				   .
   1561  1100							; 
   1562  1100
   1563  1100				   .
   1564  1100							; 
   1565  1100
   1566  1100				   .
   1567  1100							; 
   1568  1100
   1569  1100				   .
   1570  1100							; 
   1571  1100
   1572  1100				   .L0131		;  dim _Bit6_Manatee_Moved_Away  =  var35
   1573  1100
   1574  1100				   .
   1575  1100							; 
   1576  1100
   1577  1100				   .
   1578  1100							; 
   1579  1100
   1580  1100				   .
   1581  1100							; 
   1582  1100
   1583  1100				   .
   1584  1100							; 
   1585  1100
   1586  1100				   .L0132		;  dim _Bit7_Tentacle_Touched	=  var35
   1587  1100
   1588  1100				   .
   1589  1100							; 
   1590  1100
   1591  1100				   .
   1592  1100							; 
   1593  1100
   1594  1100				   .
   1595  1100							; 
   1596  1100
   1597  1100				   .
   1598  1100							; 
   1599  1100
   1600  1100				   .
   1601  1100							; 
   1602  1100
   1603  1100				   .L0133		;  dim _Replication_Rate_Storage  =  var44
   1604  1100
   1605  1100				   .
   1606  1100							; 
   1607  1100
   1608  1100				   .
   1609  1100							; 
   1610  1100
   1611  1100				   .
   1612  1100							; 
   1613  1100
   1614  1100				   .
   1615  1100							; 
   1616  1100
   1617  1100				   .L0134		;  dim _SC_Back  =  var45
   1618  1100
   1619  1100				   .
   1620  1100							; 
   1621  1100
   1622  1100				   .
   1623  1100							; 
   1624  1100
   1625  1100				   .
   1626  1100							; 
   1627  1100
   1628  1100				   .
   1629  1100							; 
   1630  1100
   1631  1100				   .
   1632  1100							; 
   1633  1100
   1634  1100				   .
   1635  1100							; 
   1636  1100
   1637  1100				   .
   1638  1100							; 
   1639  1100
   1640  1100				   .
   1641  1100							; 
   1642  1100
   1643  1100				   .
   1644  1100							; 
   1645  1100
   1646  1100				   .
   1647  1100							; 
   1648  1100
   1649  1100				   .
   1650  1100							; 
   1651  1100
   1652  1100				   .
   1653  1100							; 
   1654  1100
   1655  1100				   .
   1656  1100							; 
   1657  1100
   1658  1100				   .
   1659  1100							; 
   1660  1100
   1661  1100				   .
   1662  1100							; 
   1663  1100
   1664  1100				   .
   1665  1100							; 
   1666  1100
   1667  1100				   .
   1668  1100							; 
   1669  1100
   1670  1100				   .
   1671  1100							; 
   1672  1100
   1673  1100				   .
   1674  1100							; 
   1675  1100
   1676  1100				   .
   1677  1100							; 
   1678  1100
   1679  1100				   .L0135		;  dim _Bit0_Game_Control  =  var46
   1680  1100
   1681  1100				   .
   1682  1100							; 
   1683  1100
   1684  1100				   .
   1685  1100							; 
   1686  1100
   1687  1100				   .
   1688  1100							; 
   1689  1100
   1690  1100				   .
   1691  1100							; 
   1692  1100
   1693  1100				   .L0136		;  dim _Bit1_Auto_Play  =  var46
   1694  1100
   1695  1100				   .
   1696  1100							; 
   1697  1100
   1698  1100				   .
   1699  1100							; 
   1700  1100
   1701  1100				   .
   1702  1100							; 
   1703  1100
   1704  1100				   .
   1705  1100							; 
   1706  1100
   1707  1100				   .L0137		;  dim _Bit2_Right_Left_Hand  =  var46
   1708  1100
   1709  1100				   .
   1710  1100							; 
   1711  1100
   1712  1100				   .
   1713  1100							; 
   1714  1100
   1715  1100				   .
   1716  1100							; 
   1717  1100
   1718  1100				   .
   1719  1100							; 
   1720  1100
   1721  1100				   .
   1722  1100							; 
   1723  1100
   1724  1100				   .L0138		;  dim rand16	=  var47
   1725  1100
   1726  1100				   .
   1727  1100							; 
   1728  1100
   1729  1100				   .
   1730  1100							; 
   1731  1100
   1732  1100				   .
   1733  1100							; 
   1734  1100
   1735  1100				   .
   1736  1100							; 
   1737  1100
   1738  1100				   .
   1739  1100							; 
   1740  1100
   1741  1100				   .
   1742  1100							; 
   1743  1100
   1744  1100				   .
   1745  1100							; 
   1746  1100
   1747  1100				   .
   1748  1100							; 
   1749  1100
   1750  1100				   .
   1751  1100							; 
   1752  1100
   1753  1100				   .L0139		;  dim _sc1  =  score
   1754  1100
   1755  1100				   .L0140		;  dim _sc2  =  score + 1
   1756  1100
   1757  1100				   .L0141		;  dim _sc3  =  score + 2
   1758  1100
   1759  1100				   .
   1760  1100							; 
   1761  1100
   1762  1100				   .
   1763  1100							; 
   1764  1100
   1765  1100				   .
   1766  1100							; 
   1767  1100
   1768  1100				   .
   1769  1100							; 
   1770  1100
   1771  1100				   .
   1772  1100							; 
   1773  1100
   1774  1100				   .
   1775  1100							; 
   1776  1100
   1777  1100				   .
   1778  1100							; 
   1779  1100
   1780  1100				   .
   1781  1100							; 
   1782  1100
   1783  1100				   .L0142		;  const pfscore  =  1
   1784  1100
   1785  1100				   .
   1786  1100							; 
   1787  1100
   1788  1100				   .
   1789  1100							; 
   1790  1100
   1791  1100				   .
   1792  1100							; 
   1793  1100
   1794  1100				   .
   1795  1100							; 
   1796  1100
   1797  1100				   .
   1798  1100							; 
   1799  1100
   1800  1100				   .
   1801  1100							; 
   1802  1100
   1803  1100				   .
   1804  1100							; 
   1805  1100
   1806  1100				   .
   1807  1100							; 
   1808  1100
   1809  1100				   .
   1810  1100							; 
   1811  1100
   1812  1100				   .
   1813  1100							; 
   1814  1100
   1815  1100				   .L0143		;  const _c_Torp_Hit_Seaweed_01  =  1
   1816  1100
   1817  1100				   .L0144		;  const _c_Torp_Hit_Seaweed_02  =  2
   1818  1100
   1819  1100				   .L0145		;  const _c_Ship_Bounce  =  3
   1820  1100
   1821  1100				   .L0146		;  const _c_Shoot  =  4
   1822  1100
   1823  1100				   .L0147		;  const _c_1000_Health  =  5
   1824  1100
   1825  1100				   .L0148		;  const _c_Game_Over	=  6
   1826  1100
   1827  1100				   .L0149		;  const _c_Gyvolver  =  7
   1828  1100
   1829  1100				   .
   1830  1100							; 
   1831  1100
   1832  1100				   .
   1833  1100							; 
   1834  1100
   1835  1100				   .
   1836  1100							; 
   1837  1100
   1838  1100				   .
   1839  1100							; 
   1840  1100
   1841  1100				   .
   1842  1100							; 
   1843  1100
   1844  1100				   .
   1845  1100							; 
   1846  1100
   1847  1100				   .
   1848  1100							; 
   1849  1100
   1850  1100				   .
   1851  1100							; 
   1852  1100
   1853  1100				   .L0150		;  const _c_Ship_Drop_In  =  1
   1854  1100
   1855  1100				   .L0151		;  const _c_Tentacle_Reaching_Up  =  2
   1856  1100
   1857  1100				   .L0152		;  const _c_Wrothopod	=  3
   1858  1100
   1859  1100				   .L0153		;  const _c_Canister_Appear  =  4
   1860  1100
   1861  1100				   .L0154		;  const _c_Canister_Touched  =  5
   1862  1100
   1863  1100				   .L0155		;  const _c_Corroded_Tick_Down  =  6
   1864  1100
   1865  1100				   .L0156		;  const _c_Corroded_Seaweed_Moosh  =	7
   1866  1100
   1867  1100				   .L0157		;  const _c_Corroded_Chase  =	8
   1868  1100
   1869  1100				   .L0158		;  const _c_Corroded_Hit_Ship	=  9
   1870  1100
   1871  1100				   .L0159		;  const _c_GO_Seaweed_Attack	=  10
   1872  1100
   1873  1100				   .L0160		;  const _c_MLS_Seaweed_Close_In  =  11
   1874  1100
   1875  1100				   .
   1876  1100							; 
   1877  1100
   1878  1100				   .
   1879  1100							; 
   1880  1100
   1881  1100				   .
   1882  1100							; 
   1883  1100
   1884  1100				   .
   1885  1100							; 
   1886  1100
   1887  1100				   .
   1888  1100							; 
   1889  1100
   1890  1100				   .
   1891  1100							; 
   1892  1100
   1893  1100				   .
   1894  1100							; 
   1895  1100
   1896  1100				   .
   1897  1100							; 
   1898  1100
   1899  1100				   .
   1900  1100							; 
   1901  1100
   1902  1100				   .L0161		;  score  =  0
   1903  1100
   1904  1100		       a9 00		      LDA	#$00
   1905  1102		       85 95		      STA	score+2
   1906  1104		       a9 00		      LDA	#$00
   1907  1106		       85 94		      STA	score+1
   1908  1108		       a9 00		      LDA	#$00
   1909  110a		       85 93		      STA	score
   1910  110c				   .
   1911  110c							; 
   1912  110c
   1913  110c				   .
   1914  110c							; 
   1915  110c
   1916  110c				   .
   1917  110c							; 
   1918  110c
   1919  110c				   .
   1920  110c							; 
   1921  110c
   1922  110c				   .
   1923  110c							; 
   1924  110c
   1925  110c				   .
   1926  110c							; 
   1927  110c
   1928  110c				   .
   1929  110c							; 
   1930  110c
   1931  110c				   .L0162		;  _Bit2_Right_Left_Hand{2}  =  1
   1932  110c
   1933  110c		       a5 d2		      LDA	_Bit2_Right_Left_Hand
   1934  110e		       09 04		      ORA	#4
   1935  1110		       85 d2		      STA	_Bit2_Right_Left_Hand
   1936  1112				   .
   1937  1112							; 
   1938  1112
   1939  1112				   .
   1940  1112							; 
   1941  1112
   1942  1112				   .
   1943  1112							; 
   1944  1112
   1945  1112				   .
   1946  1112							; 
   1947  1112
   1948  1112				   .
   1949  1112							; 
   1950  1112
   1951  1112				   .
   1952  1112							; 
   1953  1112
   1954  1112				   .
   1955  1112							; 
   1956  1112
   1957  1112				   .
   1958  1112							; 
   1959  1112
   1960  1112				   .
   1961  1112							; 
   1962  1112
   1963  1112				   .
   1964  1112							; 
   1965  1112
   1966  1112				   .
   1967  1112							; 
   1968  1112
   1969  1112				   .__Start_Restart
   1970  1112							; __Start_Restart
   1971  1112
   1972  1112				   .
   1973  1112							; 
   1974  1112
   1975  1112				   .
   1976  1112							; 
   1977  1112
   1978  1112				   .
   1979  1112							; 
   1980  1112
   1981  1112				   .
   1982  1112							; 
   1983  1112
   1984  1112				   .
   1985  1112							; 
   1986  1112
   1987  1112				   .
   1988  1112							; 
   1989  1112
   1990  1112				   .L0163		;  AUDV0  =  0  :  AUDV1  =  0
   1991  1112
   1992  1112		       a9 00		      LDA	#0
   1993  1114		       85 19		      STA	AUDV0
   1994  1116		       85 1a		      STA	AUDV1
   1995  1118				   .
   1996  1118							; 
   1997  1118
   1998  1118				   .
   1999  1118							; 
   2000  1118
   2001  1118				   .
   2002  1118							; 
   2003  1118
   2004  1118				   .
   2005  1118							; 
   2006  1118
   2007  1118				   .
   2008  1118							; 
   2009  1118
   2010  1118				   .
   2011  1118							; 
   2012  1118
   2013  1118				   .L0164		;  player0y  =  200  :  player1y  =  200  :  missile0y  =  200  :  bally  =  200
   2014  1118
   2015  1118		       a9 c8		      LDA	#200
   2016  111a		       85 85		      STA	player0y
   2017  111c		       85 86		      STA	player1y
   2018  111e		       85 91		      STA	missile0y
   2019  1120		       85 89		      STA	bally
   2020  1122				   .
   2021  1122							; 
   2022  1122
   2023  1122				   .
   2024  1122							; 
   2025  1122
   2026  1122				   .
   2027  1122							; 
   2028  1122
   2029  1122				   .
   2030  1122							; 
   2031  1122
   2032  1122				   .
   2033  1122							; 
   2034  1122
   2035  1122				   .
   2036  1122							; 
   2037  1122
   2038  1122				   .L0165		;  pfclear
   2039  1122
   2040  1122		       a9 00		      LDA	#0
   2041  1124		       85 ee		      sta	temp7
   2042  1126		       a9 11		      lda	#>(ret_point1-1)
   2043  1128		       48		      pha
   2044  1129		       a9 3b		      lda	#<(ret_point1-1)
   2045  112b		       48		      pha
   2046  112c		       a9 f3		      lda	#>(pfclear-1)
   2047  112e		       48		      pha
   2048  112f		       a9 8f		      lda	#<(pfclear-1)
   2049  1131		       48		      pha
   2050  1132		       a5 ee		      lda	temp7
   2051  1134		       48		      pha
   2052  1135		       8a		      txa
   2053  1136		       48		      pha
   2054  1137		       a2 08		      ldx	#8
   2055  1139		       4c eb ff 	      jmp	BS_jsr
   2056  113c				   ret_point1
   2057  113c				   .
   2058  113c							; 
   2059  113c
   2060  113c				   .
   2061  113c							; 
   2062  113c
   2063  113c				   .
   2064  113c							; 
   2065  113c
   2066  113c				   .
   2067  113c							; 
   2068  113c
   2069  113c				   .
   2070  113c							; 
   2071  113c
   2072  113c				   .
   2073  113c							; 
   2074  113c
   2075  113c				   .L0166		;  COLUBK  =  0
   2076  113c
   2077  113c		       a9 00		      LDA	#0
   2078  113e		       85 09		      STA	COLUBK
   2079  1140				   .
   2080  1140							; 
   2081  1140
   2082  1140				   .
   2083  1140							; 
   2084  1140
   2085  1140				   .
   2086  1140							; 
   2087  1140
   2088  1140				   .
   2089  1140							; 
   2090  1140
   2091  1140				   .
   2092  1140							; 
   2093  1140
   2094  1140				   .
   2095  1140							; 
   2096  1140
   2097  1140				   .L0167		;  drawscreen
   2098  1140
   2099  1140		       85 ee		      sta	temp7
   2100  1142		       a9 11		      lda	#>(ret_point2-1)
   2101  1144		       48		      pha
   2102  1145		       a9 57		      lda	#<(ret_point2-1)
   2103  1147		       48		      pha
   2104  1148		       a9 f5		      lda	#>(drawscreen-1)
   2105  114a		       48		      pha
   2106  114b		       a9 86		      lda	#<(drawscreen-1)
   2107  114d		       48		      pha
   2108  114e		       a5 ee		      lda	temp7
   2109  1150		       48		      pha
   2110  1151		       8a		      txa
   2111  1152		       48		      pha
   2112  1153		       a2 08		      ldx	#8
   2113  1155		       4c eb ff 	      jmp	BS_jsr
   2114  1158				   ret_point2
   2115  1158				   .
   2116  1158							; 
   2117  1158
   2118  1158				   .
   2119  1158							; 
   2120  1158
   2121  1158				   .
   2122  1158							; 
   2123  1158
   2124  1158				   .
   2125  1158							; 
   2126  1158
   2127  1158				   .
   2128  1158							; 
   2129  1158
   2130  1158				   .
   2131  1158							; 
   2132  1158
   2133  1158				   .
   2134  1158							; 
   2135  1158
   2136  1158				   .
   2137  1158							; 
   2138  1158
   2139  1158				   .L0168		;  gosub __Clear_and_Set
   2140  1158
   2141  1158		       20 7f 16 	      jsr	.__Clear_and_Set
   2142  115b
   2143  115b				   .
   2144  115b							; 
   2145  115b
   2146  115b				   .
   2147  115b							; 
   2148  115b
   2149  115b				   .
   2150  115b							; 
   2151  115b
   2152  115b				   .
   2153  115b							; 
   2154  115b
   2155  115b				   .
   2156  115b							; 
   2157  115b
   2158  115b				   .
   2159  115b							; 
   2160  115b
   2161  115b				   .
   2162  115b							; 
   2163  115b
   2164  115b				   .
   2165  115b							; 
   2166  115b
   2167  115b				   .
   2168  115b							; 
   2169  115b
   2170  115b				   .
   2171  115b							; 
   2172  115b
   2173  115b				   .L0169		;  if _Bit0_Game_Control{0} then goto __Main_Loop_Setup
   2174  115b
   2175  115b		       a5 d2		      LDA	_Bit0_Game_Control
   2176  115d		       4a		      LSR
   2177  115e		       90 03		      BCC	.skipL0169
   2178  1160				   .condpart0
   2179  1160		       4c 2d 14 	      jmp	.__Main_Loop_Setup
   2180  1163
   2181  1163				   .skipL0169
   2182  1163				   .
   2183  1163							; 
   2184  1163
   2185  1163				   .
   2186  1163							; 
   2187  1163
   2188  1163				   .
   2189  1163							; 
   2190  1163
   2191  1163				   .
   2192  1163							; 
   2193  1163
   2194  1163				   .
   2195  1163							; 
   2196  1163
   2197  1163				   .
   2198  1163							; 
   2199  1163
   2200  1163				   .
   2201  1163							; 
   2202  1163
   2203  1163				   .
   2204  1163							; 
   2205  1163
   2206  1163				   .
   2207  1163							; 
   2208  1163
   2209  1163				   .
   2210  1163							; 
   2211  1163
   2212  1163				   .__Title_Screen_Setup
   2213  1163							; __Title_Screen_Setup
   2214  1163
   2215  1163				   .
   2216  1163							; 
   2217  1163
   2218  1163				   .
   2219  1163							; 
   2220  1163
   2221  1163				   .
   2222  1163							; 
   2223  1163
   2224  1163				   .
   2225  1163							; 
   2226  1163
   2227  1163				   .
   2228  1163							; 
   2229  1163
   2230  1163				   .
   2231  1163							; 
   2232  1163
   2233  1163				   .
   2234  1163							; 
   2235  1163
   2236  1163				   .
   2237  1163							; 
   2238  1163
   2239  1163				   .
   2240  1163							; 
   2241  1163
   2242  1163				   .
   2243  1163							; 
   2244  1163
   2245  1163				   .
   2246  1163							; 
   2247  1163
   2248  1163				   .L0170		;  _Bit0_Reset_Restrainer{0}  =  1
   2249  1163
   2250  1163		       a5 c4		      LDA	_Bit0_Reset_Restrainer
   2251  1165		       09 01		      ORA	#1
   2252  1167		       85 c4		      STA	_Bit0_Reset_Restrainer
   2253  1169				   .
   2254  1169							; 
   2255  1169
   2256  1169				   .
   2257  1169							; 
   2258  1169
   2259  1169				   .
   2260  1169							; 
   2261  1169
   2262  1169				   .
   2263  1169							; 
   2264  1169
   2265  1169				   .
   2266  1169							; 
   2267  1169
   2268  1169				   .
   2269  1169							; 
   2270  1169
   2271  1169				   .L0171		;  _Bit7_Select_Restrainer{7}	=  1
   2272  1169
   2273  1169		       a5 c6		      LDA	_Bit7_Select_Restrainer
   2274  116b		       09 80		      ORA	#128
   2275  116d		       85 c6		      STA	_Bit7_Select_Restrainer
   2276  116f				   .
   2277  116f							; 
   2278  116f
   2279  116f				   .
   2280  116f							; 
   2281  116f
   2282  116f				   .
   2283  116f							; 
   2284  116f
   2285  116f				   .
   2286  116f							; 
   2287  116f
   2288  116f				   .
   2289  116f							; 
   2290  116f
   2291  116f				   .
   2292  116f							; 
   2293  116f
   2294  116f				   .L0172		;  _Bit1_Joystick_Restrainer_Tmp{1}  =  0  :  _Master_Counter	=  0  :  _Frame_Counter  =  0
   2295  116f
   2296  116f		       a5 c4		      LDA	_Bit1_Joystick_Restrainer_Tmp
   2297  1171		       29 fd		      AND	#253
   2298  1173		       85 c4		      STA	_Bit1_Joystick_Restrainer_Tmp
   2299  1175		       a9 00		      LDA	#0
   2300  1177		       85 d8		      STA	_Master_Counter
   2301  1179		       85 d9		      STA	_Frame_Counter
   2302  117b				   .
   2303  117b							; 
   2304  117b
   2305  117b				   .
   2306  117b							; 
   2307  117b
   2308  117b				   .
   2309  117b							; 
   2310  117b
   2311  117b				   .
   2312  117b							; 
   2313  117b
   2314  117b				   .
   2315  117b							; 
   2316  117b
   2317  117b				   .
   2318  117b							; 
   2319  117b
   2320  117b				   .__Title_Screen_Playfield
   2321  117b							; __Title_Screen_Playfield
   2322  117b
   2323  117b				   .
   2324  117b							; 
   2325  117b
   2326  117b				   .L0173		;  playfield:
   2327  117b
   2328  117b				  -	      ifconst	pfres
   2329  117b				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2330  117b					      else
   2331  117b		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2332  117d					      endif
   2333  117d		       4c ac 11 	      jmp	pflabel0
   2334  1180				   PF_data0
   2335  1180		       77 4c		      .byte.b	%01110111, %01001100
   2336  1182					      if	(pfwidth>2)
   2337  1182		       2e 77		      .byte.b	%00101110, %01110111
   2338  1184					      endif
   2339  1184		       84 52		      .byte.b	%10000100, %01010010
   2340  1186					      if	(pfwidth>2)
   2341  1186		       28 91		      .byte.b	%00101000, %10010001
   2342  1188					      endif
   2343  1188		       67 5e		      .byte.b	%01100111, %01011110
   2344  118a					      if	(pfwidth>2)
   2345  118a		       ae 97		      .byte.b	%10101110, %10010111
   2346  118c					      endif
   2347  118c		       14 d2		      .byte.b	%00010100, %11010010
   2348  118e					      if	(pfwidth>2)
   2349  118e		       68 91		      .byte.b	%01101000, %10010001
   2350  1190					      endif
   2351  1190		       e7 52		      .byte.b	%11100111, %01010010
   2352  1192					      if	(pfwidth>2)
   2353  1192		       2e 77		      .byte.b	%00101110, %01110111
   2354  1194					      endif
   2355  1194		       00 00		      .byte.b	%00000000, %00000000
   2356  1196					      if	(pfwidth>2)
   2357  1196		       00 00		      .byte.b	%00000000, %00000000
   2358  1198					      endif
   2359  1198		       63 39		      .byte.b	%01100011, %00111001
   2360  119a					      if	(pfwidth>2)
   2361  119a		       c9 fa		      .byte.b	%11001001, %11111010
   2362  119c					      endif
   2363  119c		       94 84		      .byte.b	%10010100, %10000100
   2364  119e					      if	(pfwidth>2)
   2365  119e		       29 22		      .byte.b	%00101001, %00100010
   2366  11a0					      endif
   2367  11a0		       f3 98		      .byte.b	%11110011, %10011000
   2368  11a2					      if	(pfwidth>2)
   2369  11a2		       e9 22		      .byte.b	%11101001, %00100010
   2370  11a4					      endif
   2371  11a4		       90 a1		      .byte.b	%10010000, %10100001
   2372  11a6					      if	(pfwidth>2)
   2373  11a6		       29 22		      .byte.b	%00101001, %00100010
   2374  11a8					      endif
   2375  11a8		       97 9c		      .byte.b	%10010111, %10011100
   2376  11aa					      if	(pfwidth>2)
   2377  11aa		       26 2e		      .byte.b	%00100110, %00101110
   2378  11ac					      endif
   2379  11ac				   pflabel0
   2380  11ac		       bd 80 11 	      lda	PF_data0,x
   2381  11af		       9d 50 10 	      sta	playfield-128,x
   2382  11b2		       ca		      dex
   2383  11b3		       10 f7		      bpl	pflabel0
   2384  11b5				   .
   2385  11b5							; 
   2386  11b5
   2387  11b5				   .
   2388  11b5							; 
   2389  11b5
   2390  11b5				   .
   2391  11b5							; 
   2392  11b5
   2393  11b5				   .
   2394  11b5							; 
   2395  11b5
   2396  11b5				   .
   2397  11b5							; 
   2398  11b5
   2399  11b5				   .
   2400  11b5							; 
   2401  11b5
   2402  11b5				   .L0174		;  player0y  =  200  :  player1y  =  200  :  missile0y  =  200  :  bally  =  200
   2403  11b5
   2404  11b5		       a9 c8		      LDA	#200
   2405  11b7		       85 85		      STA	player0y
   2406  11b9		       85 86		      STA	player1y
   2407  11bb		       85 91		      STA	missile0y
   2408  11bd		       85 89		      STA	bally
   2409  11bf				   .
   2410  11bf							; 
   2411  11bf
   2412  11bf				   .
   2413  11bf							; 
   2414  11bf
   2415  11bf				   .
   2416  11bf							; 
   2417  11bf
   2418  11bf				   .
   2419  11bf							; 
   2420  11bf
   2421  11bf				   .
   2422  11bf							; 
   2423  11bf
   2424  11bf				   .
   2425  11bf							; 
   2426  11bf
   2427  11bf				   .
   2428  11bf							; 
   2429  11bf
   2430  11bf				   .
   2431  11bf							; 
   2432  11bf
   2433  11bf				   .
   2434  11bf							; 
   2435  11bf
   2436  11bf				   .
   2437  11bf							; 
   2438  11bf
   2439  11bf				   .__Title_Screen_Loop
   2440  11bf							; __Title_Screen_Loop
   2441  11bf
   2442  11bf				   .
   2443  11bf							; 
   2444  11bf
   2445  11bf				   .
   2446  11bf							; 
   2447  11bf
   2448  11bf				   .
   2449  11bf							; 
   2450  11bf
   2451  11bf				   .
   2452  11bf							; 
   2453  11bf
   2454  11bf				   .
   2455  11bf							; 
   2456  11bf
   2457  11bf				   .
   2458  11bf							; 
   2459  11bf
   2460  11bf				   .
   2461  11bf							; 
   2462  11bf
   2463  11bf				   .L0175		;  COLUBK  =  0  :  scorecolor  =  0  :  _SC_Back  =  0  :  pfscorecolor  =  0
   2464  11bf
   2465  11bf		       a9 00		      LDA	#0
   2466  11c1		       85 09		      STA	COLUBK
   2467  11c3		       85 a3		      STA	scorecolor
   2468  11c5		       85 d1		      STA	_SC_Back
   2469  11c7		       85 f4		      STA	pfscorecolor
   2470  11c9				   .
   2471  11c9							; 
   2472  11c9
   2473  11c9				   .
   2474  11c9							; 
   2475  11c9
   2476  11c9				   .
   2477  11c9							; 
   2478  11c9
   2479  11c9				   .
   2480  11c9							; 
   2481  11c9
   2482  11c9				   .
   2483  11c9							; 
   2484  11c9
   2485  11c9				   .
   2486  11c9							; 
   2487  11c9
   2488  11c9				   .
   2489  11c9							; 
   2490  11c9
   2491  11c9				   .L0176		;  pfcolors:
   2492  11c9
   2493  11c9		       a9 9e		      lda	# $9E
   2494  11cb		       85 08		      sta	COLUPF
   2495  11cd				  -	      ifconst	pfres
   2496  11cd				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   2497  11cd					      else
   2498  11cd		       a9 f6		      lda	#>(pfcolorlabel13-84)
   2499  11cf					      endif
   2500  11cf		       85 f1		      sta	pfcolortable+1
   2501  11d1				  -	      ifconst	pfres
   2502  11d1				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   2503  11d1					      else
   2504  11d1		       a9 3e		      lda	#<(pfcolorlabel13-84)
   2505  11d3					      endif
   2506  11d3		       85 f0		      sta	pfcolortable
   2507  11d5				   .
   2508  11d5							; 
   2509  11d5
   2510  11d5				   .
   2511  11d5							; 
   2512  11d5
   2513  11d5				   .
   2514  11d5							; 
   2515  11d5
   2516  11d5				   .
   2517  11d5							; 
   2518  11d5
   2519  11d5				   .
   2520  11d5							; 
   2521  11d5
   2522  11d5				   .
   2523  11d5							; 
   2524  11d5
   2525  11d5				   .
   2526  11d5							; 
   2527  11d5
   2528  11d5				   .L0177		;  drawscreen
   2529  11d5
   2530  11d5		       85 ee		      sta	temp7
   2531  11d7		       a9 11		      lda	#>(ret_point3-1)
   2532  11d9		       48		      pha
   2533  11da		       a9 ec		      lda	#<(ret_point3-1)
   2534  11dc		       48		      pha
   2535  11dd		       a9 f5		      lda	#>(drawscreen-1)
   2536  11df		       48		      pha
   2537  11e0		       a9 86		      lda	#<(drawscreen-1)
   2538  11e2		       48		      pha
   2539  11e3		       a5 ee		      lda	temp7
   2540  11e5		       48		      pha
   2541  11e6		       8a		      txa
   2542  11e7		       48		      pha
   2543  11e8		       a2 08		      ldx	#8
   2544  11ea		       4c eb ff 	      jmp	BS_jsr
   2545  11ed				   ret_point3
   2546  11ed				   .
   2547  11ed							; 
   2548  11ed
   2549  11ed				   .
   2550  11ed							; 
   2551  11ed
   2552  11ed				   .
   2553  11ed							; 
   2554  11ed
   2555  11ed				   .
   2556  11ed							; 
   2557  11ed
   2558  11ed				   .
   2559  11ed							; 
   2560  11ed
   2561  11ed				   .
   2562  11ed							; 
   2563  11ed
   2564  11ed				   .
   2565  11ed							; 
   2566  11ed
   2567  11ed				   .
   2568  11ed							; 
   2569  11ed
   2570  11ed				   .
   2571  11ed							; 
   2572  11ed
   2573  11ed				   .L0178		;  if !joy0up	&&  !joy0left  &&  !joy0right  &&  !joy0down then goto __TS_Skip_Joy_Sound
   2574  11ed
   2575  11ed		       a9 10		      lda	#$10
   2576  11ef		       2c 80 02 	      bit	SWCHA
   2577  11f2		       f0 14		      BEQ	.skipL0178
   2578  11f4				   .condpart1
   2579  11f4		       2c 80 02 	      bit	SWCHA
   2580  11f7		       50 0f		      BVC	.skip1then
   2581  11f9				   .condpart2
   2582  11f9		       2c 80 02 	      bit	SWCHA
   2583  11fc		       10 0a		      BPL	.skip2then
   2584  11fe				   .condpart3
   2585  11fe		       a9 20		      lda	#$20
   2586  1200		       2c 80 02 	      bit	SWCHA
   2587  1203		       f0 03		      BEQ	.skip3then
   2588  1205				   .condpart4
   2589  1205		       4c 25 12 	      jmp	.__TS_Skip_Joy_Sound
   2590  1208
   2591  1208				   .skip3then
   2592  1208				   .skip2then
   2593  1208				   .skip1then
   2594  1208				   .skipL0178
   2595  1208				   .
   2596  1208							; 
   2597  1208
   2598  1208				   .
   2599  1208							; 
   2600  1208
   2601  1208				   .
   2602  1208							; 
   2603  1208
   2604  1208				   .
   2605  1208							; 
   2606  1208
   2607  1208				   .L0179		;  if _Bit1_Joystick_Restrainer_Tmp{1} then goto __TS_Skip_Joy_Sound
   2608  1208
   2609  1208		       a5 c4		      LDA	_Bit1_Joystick_Restrainer_Tmp
   2610  120a		       29 02		      AND	#2
   2611  120c		       f0 03		      BEQ	.skipL0179
   2612  120e				   .condpart5
   2613  120e		       4c 25 12 	      jmp	.__TS_Skip_Joy_Sound
   2614  1211
   2615  1211				   .skipL0179
   2616  1211				   .
   2617  1211							; 
   2618  1211
   2619  1211				   .
   2620  1211							; 
   2621  1211
   2622  1211				   .
   2623  1211							; 
   2624  1211
   2625  1211				   .
   2626  1211							; 
   2627  1211
   2628  1211				   .L0180		;  _Ch0_Sound	=  _c_Tentacle_Reaching_Up
   2629  1211
   2630  1211		       a9 02		      LDA	#_c_Tentacle_Reaching_Up
   2631  1213		       85 da		      STA	_Ch0_Sound
   2632  1215				   .
   2633  1215							; 
   2634  1215
   2635  1215				   .L0181		;  _Frame_Counter  =  0  :  _Ch0_Counter  =  0
   2636  1215
   2637  1215		       a9 00		      LDA	#0
   2638  1217		       85 d9		      STA	_Frame_Counter
   2639  1219		       85 dc		      STA	_Ch0_Counter
   2640  121b				   .
   2641  121b							; 
   2642  121b
   2643  121b				   .L0182		;  _Ch0_Duration  =  1  :  _Bit1_Joystick_Restrainer_Tmp{1}  =  1
   2644  121b
   2645  121b		       a9 01		      LDA	#1
   2646  121d		       85 db		      STA	_Ch0_Duration
   2647  121f		       a5 c4		      LDA	_Bit1_Joystick_Restrainer_Tmp
   2648  1221		       09 02		      ORA	#2
   2649  1223		       85 c4		      STA	_Bit1_Joystick_Restrainer_Tmp
   2650  1225				   .
   2651  1225							; 
   2652  1225
   2653  1225				   .__TS_Skip_Joy_Sound
   2654  1225							; __TS_Skip_Joy_Sound
   2655  1225
   2656  1225				   .
   2657  1225							; 
   2658  1225
   2659  1225				   .
   2660  1225							; 
   2661  1225
   2662  1225				   .
   2663  1225							; 
   2664  1225
   2665  1225				   .
   2666  1225							; 
   2667  1225
   2668  1225				   .
   2669  1225							; 
   2670  1225
   2671  1225				   .
   2672  1225							; 
   2673  1225
   2674  1225				   .
   2675  1225							; 
   2676  1225
   2677  1225				   .
   2678  1225							; 
   2679  1225
   2680  1225				   .
   2681  1225							; 
   2682  1225
   2683  1225				   .
   2684  1225							; 
   2685  1225
   2686  1225				   .L0183		;  if !_Ch0_Sound then goto __TS_Skip_Ch_0
   2687  1225
   2688  1225		       a5 da		      LDA	_Ch0_Sound
   2689  1227		       d0 03		      BNE	.skipL0183
   2690  1229				   .condpart6
   2691  1229		       4c 8f 12 	      jmp	.__TS_Skip_Ch_0
   2692  122c
   2693  122c				   .skipL0183
   2694  122c				   .
   2695  122c							; 
   2696  122c
   2697  122c				   .
   2698  122c							; 
   2699  122c
   2700  122c				   .
   2701  122c							; 
   2702  122c
   2703  122c				   .
   2704  122c							; 
   2705  122c
   2706  122c				   .L0184		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   2707  122c
   2708  122c		       c6 db		      DEC	_Ch0_Duration
   2709  122e				   .
   2710  122e							; 
   2711  122e
   2712  122e				   .
   2713  122e							; 
   2714  122e
   2715  122e				   .
   2716  122e							; 
   2717  122e
   2718  122e				   .
   2719  122e							; 
   2720  122e
   2721  122e				   .
   2722  122e							; 
   2723  122e
   2724  122e				   .L0185		;  if _Ch0_Duration then goto __TS_Skip_Ch_0
   2725  122e
   2726  122e		       a5 db		      LDA	_Ch0_Duration
   2727  1230		       f0 03		      BEQ	.skipL0185
   2728  1232				   .condpart7
   2729  1232		       4c 8f 12 	      jmp	.__TS_Skip_Ch_0
   2730  1235
   2731  1235				   .skipL0185
   2732  1235				   .
   2733  1235							; 
   2734  1235
   2735  1235				   .
   2736  1235							; 
   2737  1235
   2738  1235				   .
   2739  1235							; 
   2740  1235
   2741  1235				   .
   2742  1235							; 
   2743  1235
   2744  1235				   .
   2745  1235							; 
   2746  1235
   2747  1235				   .
   2748  1235							; 
   2749  1235
   2750  1235				   .
   2751  1235							; 
   2752  1235
   2753  1235				   .
   2754  1235							; 
   2755  1235
   2756  1235				   .
   2757  1235							; 
   2758  1235
   2759  1235				   .
   2760  1235							; 
   2761  1235
   2762  1235				   .
   2763  1235							; 
   2764  1235
   2765  1235				   .
   2766  1235							; 
   2767  1235
   2768  1235				   .L0186		;  if _Ch0_Sound  <>  _c_Tentacle_Reaching_Up then goto __TS_Skip_Ch0_Sound_001
   2769  1235
   2770  1235		       a5 da		      LDA	_Ch0_Sound
   2771  1237		       c9 02		      CMP	#_c_Tentacle_Reaching_Up
   2772  1239		       f0 03		      BEQ	.skipL0186
   2773  123b				   .condpart8
   2774  123b		       4c 7a 12 	      jmp	.__TS_Skip_Ch0_Sound_001
   2775  123e
   2776  123e				   .skipL0186
   2777  123e				   .
   2778  123e							; 
   2779  123e
   2780  123e				   .
   2781  123e							; 
   2782  123e
   2783  123e				   .
   2784  123e							; 
   2785  123e
   2786  123e				   .
   2787  123e							; 
   2788  123e
   2789  123e				   .L0187		;  temp4  =  _SD_Title_Seaweed[_Ch0_Counter]
   2790  123e
   2791  123e		       a6 dc		      LDX	_Ch0_Counter
   2792  1240		       bd 08 14 	      LDA	_SD_Title_Seaweed,x
   2793  1243		       85 9f		      STA	temp4
   2794  1245				   .
   2795  1245							; 
   2796  1245
   2797  1245				   .
   2798  1245							; 
   2799  1245
   2800  1245				   .
   2801  1245							; 
   2802  1245
   2803  1245				   .
   2804  1245							; 
   2805  1245
   2806  1245				   .L0188		;  if temp4  =  255 then goto __TS_Clear_Ch_0
   2807  1245
   2808  1245		       a5 9f		      LDA	temp4
   2809  1247		       c9 ff		      CMP	#255
   2810  1249		       d0 03		      BNE	.skipL0188
   2811  124b				   .condpart9
   2812  124b		       4c 7d 12 	      jmp	.__TS_Clear_Ch_0
   2813  124e
   2814  124e				   .skipL0188
   2815  124e				   .
   2816  124e							; 
   2817  124e
   2818  124e				   .
   2819  124e							; 
   2820  124e
   2821  124e				   .
   2822  124e							; 
   2823  124e
   2824  124e				   .
   2825  124e							; 
   2826  124e
   2827  124e				   .L0189		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   2828  124e
   2829  124e		       e6 dc		      INC	_Ch0_Counter
   2830  1250				   .L0190		;  temp5  =  _SD_Title_Seaweed[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   2831  1250
   2832  1250		       a6 dc		      LDX	_Ch0_Counter
   2833  1252		       bd 08 14 	      LDA	_SD_Title_Seaweed,x
   2834  1255		       85 a0		      STA	temp5
   2835  1257		       e6 dc		      INC	_Ch0_Counter
   2836  1259				   .L0191		;  temp6  =  _SD_Title_Seaweed[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   2837  1259
   2838  1259		       a6 dc		      LDX	_Ch0_Counter
   2839  125b		       bd 08 14 	      LDA	_SD_Title_Seaweed,x
   2840  125e		       85 a1		      STA	temp6
   2841  1260		       e6 dc		      INC	_Ch0_Counter
   2842  1262				   .
   2843  1262							; 
   2844  1262
   2845  1262				   .
   2846  1262							; 
   2847  1262
   2848  1262				   .
   2849  1262							; 
   2850  1262
   2851  1262				   .
   2852  1262							; 
   2853  1262
   2854  1262				   .L0192		;  AUDV0  =  temp4
   2855  1262
   2856  1262		       a5 9f		      LDA	temp4
   2857  1264		       85 19		      STA	AUDV0
   2858  1266				   .L0193		;  AUDC0  =  temp5
   2859  1266
   2860  1266		       a5 a0		      LDA	temp5
   2861  1268		       85 15		      STA	AUDC0
   2862  126a				   .L0194		;  AUDF0  =  temp6
   2863  126a
   2864  126a		       a5 a1		      LDA	temp6
   2865  126c		       85 17		      STA	AUDF0
   2866  126e				   .
   2867  126e							; 
   2868  126e
   2869  126e				   .
   2870  126e							; 
   2871  126e
   2872  126e				   .
   2873  126e							; 
   2874  126e
   2875  126e				   .
   2876  126e							; 
   2877  126e
   2878  126e				   .L0195		;  _Ch0_Duration =  _SD_Title_Seaweed[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   2879  126e
   2880  126e		       a6 dc		      LDX	_Ch0_Counter
   2881  1270		       bd 08 14 	      LDA	_SD_Title_Seaweed,x
   2882  1273		       85 db		      STA	_Ch0_Duration
   2883  1275		       e6 dc		      INC	_Ch0_Counter
   2884  1277				   .
   2885  1277							; 
   2886  1277
   2887  1277				   .
   2888  1277							; 
   2889  1277
   2890  1277				   .
   2891  1277							; 
   2892  1277
   2893  1277				   .
   2894  1277							; 
   2895  1277
   2896  1277				   .L0196		;  goto __TS_Skip_Ch_0
   2897  1277
   2898  1277		       4c 8f 12 	      jmp	.__TS_Skip_Ch_0
   2899  127a
   2900  127a				   .
   2901  127a							; 
   2902  127a
   2903  127a				   .__TS_Skip_Ch0_Sound_001
   2904  127a							; __TS_Skip_Ch0_Sound_001
   2905  127a
   2906  127a				   .
   2907  127a							; 
   2908  127a
   2909  127a				   .
   2910  127a							; 
   2911  127a
   2912  127a				   .
   2913  127a							; 
   2914  127a
   2915  127a				   .
   2916  127a							; 
   2917  127a
   2918  127a				   .
   2919  127a							; 
   2920  127a
   2921  127a				   .
   2922  127a							; 
   2923  127a
   2924  127a				   .
   2925  127a							; 
   2926  127a
   2927  127a				   .L0197		;  goto __TS_Skip_Ch_0
   2928  127a
   2929  127a		       4c 8f 12 	      jmp	.__TS_Skip_Ch_0
   2930  127d
   2931  127d				   .
   2932  127d							; 
   2933  127d
   2934  127d				   .
   2935  127d							; 
   2936  127d
   2937  127d				   .
   2938  127d							; 
   2939  127d
   2940  127d				   .
   2941  127d							; 
   2942  127d
   2943  127d				   .
   2944  127d							; 
   2945  127d
   2946  127d				   .
   2947  127d							; 
   2948  127d
   2949  127d				   .
   2950  127d							; 
   2951  127d
   2952  127d				   .__TS_Clear_Ch_0
   2953  127d							; __TS_Clear_Ch_0
   2954  127d
   2955  127d				   .
   2956  127d							; 
   2957  127d
   2958  127d				   .L0198		;  _Ch0_Duration  =  1
   2959  127d
   2960  127d		       a9 01		      LDA	#1
   2961  127f		       85 db		      STA	_Ch0_Duration
   2962  1281				   .
   2963  1281							; 
   2964  1281
   2965  1281				   .L0199		;  _Ch0_Sound	=  0  :  _Ch0_Counter  =  0  :	AUDV0  =  0  :	_Bit1_Joystick_Restrainer_Tmp{1}  =  0
   2966  1281
   2967  1281		       a9 00		      LDA	#0
   2968  1283		       85 da		      STA	_Ch0_Sound
   2969  1285		       85 dc		      STA	_Ch0_Counter
   2970  1287		       85 19		      STA	AUDV0
   2971  1289		       a5 c4		      LDA	_Bit1_Joystick_Restrainer_Tmp
   2972  128b		       29 fd		      AND	#253
   2973  128d		       85 c4		      STA	_Bit1_Joystick_Restrainer_Tmp
   2974  128f				   .
   2975  128f							; 
   2976  128f
   2977  128f				   .
   2978  128f							; 
   2979  128f
   2980  128f				   .
   2981  128f							; 
   2982  128f
   2983  128f				   .
   2984  128f							; 
   2985  128f
   2986  128f				   .
   2987  128f							; 
   2988  128f
   2989  128f				   .
   2990  128f							; 
   2991  128f
   2992  128f				   .
   2993  128f							; 
   2994  128f
   2995  128f				   .__TS_Skip_Ch_0
   2996  128f							; __TS_Skip_Ch_0
   2997  128f
   2998  128f				   .
   2999  128f							; 
   3000  128f
   3001  128f				   .
   3002  128f							; 
   3003  128f
   3004  128f				   .
   3005  128f							; 
   3006  128f
   3007  128f				   .
   3008  128f							; 
   3009  128f
   3010  128f				   .
   3011  128f							; 
   3012  128f
   3013  128f				   .
   3014  128f							; 
   3015  128f
   3016  128f				   .
   3017  128f							; 
   3018  128f
   3019  128f				   .
   3020  128f							; 
   3021  128f
   3022  128f				   .
   3023  128f							; 
   3024  128f
   3025  128f				   .
   3026  128f							; 
   3027  128f
   3028  128f				   .
   3029  128f							; 
   3030  128f
   3031  128f				   .
   3032  128f							; 
   3033  128f
   3034  128f				   .
   3035  128f							; 
   3036  128f
   3037  128f				   .L0200		;  _Master_Counter  =	_Master_Counter  +  1
   3038  128f
   3039  128f		       e6 d8		      INC	_Master_Counter
   3040  1291				   .
   3041  1291							; 
   3042  1291
   3043  1291				   .
   3044  1291							; 
   3045  1291
   3046  1291				   .
   3047  1291							; 
   3048  1291
   3049  1291				   .
   3050  1291							; 
   3051  1291
   3052  1291				   .L0201		;  if _Master_Counter	<  60 then goto __TS_AP_Skip
   3053  1291
   3054  1291		       a5 d8		      LDA	_Master_Counter
   3055  1293		       c9 3c		      CMP	#60
   3056  1295		       b0 03		      BCS	.skipL0201
   3057  1297				   .condpart10
   3058  1297		       4c af 12 	      jmp	.__TS_AP_Skip
   3059  129a
   3060  129a				   .skipL0201
   3061  129a				   .
   3062  129a							; 
   3063  129a
   3064  129a				   .
   3065  129a							; 
   3066  129a
   3067  129a				   .
   3068  129a							; 
   3069  129a
   3070  129a				   .
   3071  129a							; 
   3072  129a
   3073  129a				   .L0202		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   3074  129a
   3075  129a		       e6 d9		      INC	_Frame_Counter
   3076  129c		       a9 00		      LDA	#0
   3077  129e		       85 d8		      STA	_Master_Counter
   3078  12a0				   .
   3079  12a0							; 
   3080  12a0
   3081  12a0				   .
   3082  12a0							; 
   3083  12a0
   3084  12a0				   .
   3085  12a0							; 
   3086  12a0
   3087  12a0				   .
   3088  12a0							; 
   3089  12a0
   3090  12a0				   .
   3091  12a0							; 
   3092  12a0
   3093  12a0				   .
   3094  12a0							; 
   3095  12a0
   3096  12a0				   .
   3097  12a0							; 
   3098  12a0
   3099  12a0				   .L0203		;  if _Frame_Counter  >  9 then _Bit1_Auto_Play{1}  =	1  :  goto __Main_Loop_Setup
   3100  12a0
   3101  12a0		       a9 09		      LDA	#9
   3102  12a2		       c5 d9		      CMP	_Frame_Counter
   3103  12a4		       b0 09		      BCS	.skipL0203
   3104  12a6				   .condpart11
   3105  12a6		       a5 d2		      LDA	_Bit1_Auto_Play
   3106  12a8		       09 02		      ORA	#2
   3107  12aa		       85 d2		      STA	_Bit1_Auto_Play
   3108  12ac		       4c 2d 14 	      jmp	.__Main_Loop_Setup
   3109  12af
   3110  12af				   .skipL0203
   3111  12af				   .
   3112  12af							; 
   3113  12af
   3114  12af				   .__TS_AP_Skip
   3115  12af							; __TS_AP_Skip
   3116  12af
   3117  12af				   .
   3118  12af							; 
   3119  12af
   3120  12af				   .
   3121  12af							; 
   3122  12af
   3123  12af				   .
   3124  12af							; 
   3125  12af
   3126  12af				   .
   3127  12af							; 
   3128  12af
   3129  12af				   .
   3130  12af							; 
   3131  12af
   3132  12af				   .
   3133  12af							; 
   3134  12af
   3135  12af				   .
   3136  12af							; 
   3137  12af
   3138  12af				   .
   3139  12af							; 
   3140  12af
   3141  12af				   .
   3142  12af							; 
   3143  12af
   3144  12af				   .
   3145  12af							; 
   3146  12af
   3147  12af				   .
   3148  12af							; 
   3149  12af
   3150  12af				   .
   3151  12af							; 
   3152  12af
   3153  12af				   .L0204		;  if !switchselect then _Bit7_Select_Restrainer{7}  =  0  :  goto __TS_Skip_Select
   3154  12af
   3155  12af		       a9 02		      lda	#2
   3156  12b1		       2c 82 02 	      bit	SWCHB
   3157  12b4		       f0 09		      BEQ	.skipL0204
   3158  12b6				   .condpart12
   3159  12b6		       a5 c6		      LDA	_Bit7_Select_Restrainer
   3160  12b8		       29 7f		      AND	#127
   3161  12ba		       85 c6		      STA	_Bit7_Select_Restrainer
   3162  12bc		       4c 34 13 	      jmp	.__TS_Skip_Select
   3163  12bf
   3164  12bf				   .skipL0204
   3165  12bf				   .
   3166  12bf							; 
   3167  12bf
   3168  12bf				   .
   3169  12bf							; 
   3170  12bf
   3171  12bf				   .
   3172  12bf							; 
   3173  12bf
   3174  12bf				   .
   3175  12bf							; 
   3176  12bf
   3177  12bf				   .
   3178  12bf							; 
   3179  12bf
   3180  12bf				   .L0205		;  if _Bit7_Select_Restrainer{7} then goto __TS_Skip_Select
   3181  12bf
   3182  12bf		       24 c6		      BIT	_Bit7_Select_Restrainer
   3183  12c1		       10 03		      BPL	.skipL0205
   3184  12c3				   .condpart13
   3185  12c3		       4c 34 13 	      jmp	.__TS_Skip_Select
   3186  12c6
   3187  12c6				   .skipL0205
   3188  12c6				   .
   3189  12c6							; 
   3190  12c6
   3191  12c6				   .
   3192  12c6							; 
   3193  12c6
   3194  12c6				   .
   3195  12c6							; 
   3196  12c6
   3197  12c6				   .
   3198  12c6							; 
   3199  12c6
   3200  12c6				   .
   3201  12c6							; 
   3202  12c6
   3203  12c6				   .
   3204  12c6							; 
   3205  12c6
   3206  12c6				   .__Skip_to_Select
   3207  12c6							; __Skip_to_Select
   3208  12c6
   3209  12c6				   .
   3210  12c6							; 
   3211  12c6
   3212  12c6				   .
   3213  12c6							; 
   3214  12c6
   3215  12c6				   .
   3216  12c6							; 
   3217  12c6
   3218  12c6				   .
   3219  12c6							; 
   3220  12c6
   3221  12c6				   .L0206		;  _Bit2_Right_Left_Hand{2}  =  !_Bit2_Right_Left_Hand{2}
   3222  12c6
   3223  12c6		       a5 d2		      LDA	_Bit2_Right_Left_Hand
   3224  12c8		       29 04		      AND	#4
   3225  12ca		       08		      PHP
   3226  12cb		       a5 d2		      LDA	_Bit2_Right_Left_Hand
   3227  12cd		       29 fb		      AND	#251
   3228  12cf		       28		      PLP
   3229  12d0		       d0 02		      .byte.b	$D0, $02
   3230  12d2		       09 04		      ORA	#4
   3231  12d4		       85 d2		      STA	_Bit2_Right_Left_Hand
   3232  12d6				   .
   3233  12d6							; 
   3234  12d6
   3235  12d6				   .
   3236  12d6							; 
   3237  12d6
   3238  12d6				   .
   3239  12d6							; 
   3240  12d6
   3241  12d6				   .
   3242  12d6							; 
   3243  12d6
   3244  12d6				   .L0207		;  player1y  =  200  :  missile0y  =  200  :  bally  =  200
   3245  12d6
   3246  12d6		       a9 c8		      LDA	#200
   3247  12d8		       85 86		      STA	player1y
   3248  12da		       85 91		      STA	missile0y
   3249  12dc		       85 89		      STA	bally
   3250  12de				   .
   3251  12de							; 
   3252  12de
   3253  12de				   .
   3254  12de							; 
   3255  12de
   3256  12de				   .
   3257  12de							; 
   3258  12de
   3259  12de				   .
   3260  12de							; 
   3261  12de
   3262  12de				   .L0208		;  COLUBK  =  0  :  _SC_Back  =  0  :	pfscorecolor  =  0  :  scorecolor  =  0  :  _Frame_Counter  =  0
   3263  12de
   3264  12de		       a9 00		      LDA	#0
   3265  12e0		       85 09		      STA	COLUBK
   3266  12e2		       85 d1		      STA	_SC_Back
   3267  12e4		       85 f4		      STA	pfscorecolor
   3268  12e6		       85 a3		      STA	scorecolor
   3269  12e8		       85 d9		      STA	_Frame_Counter
   3270  12ea				   .
   3271  12ea							; 
   3272  12ea
   3273  12ea				   .
   3274  12ea							; 
   3275  12ea
   3276  12ea				   .
   3277  12ea							; 
   3278  12ea
   3279  12ea				   .
   3280  12ea							; 
   3281  12ea
   3282  12ea				   .L0209		;  _Bit7_Select_Restrainer{7}	=  1
   3283  12ea
   3284  12ea		       a5 c6		      LDA	_Bit7_Select_Restrainer
   3285  12ec		       09 80		      ORA	#128
   3286  12ee		       85 c6		      STA	_Bit7_Select_Restrainer
   3287  12f0				   .
   3288  12f0							; 
   3289  12f0
   3290  12f0				   .
   3291  12f0							; 
   3292  12f0
   3293  12f0				   .
   3294  12f0							; 
   3295  12f0
   3296  12f0				   .
   3297  12f0							; 
   3298  12f0
   3299  12f0				   .L0210		;  pfclear
   3300  12f0
   3301  12f0		       a9 00		      LDA	#0
   3302  12f2		       85 ee		      sta	temp7
   3303  12f4		       a9 13		      lda	#>(ret_point4-1)
   3304  12f6		       48		      pha
   3305  12f7		       a9 09		      lda	#<(ret_point4-1)
   3306  12f9		       48		      pha
   3307  12fa		       a9 f3		      lda	#>(pfclear-1)
   3308  12fc		       48		      pha
   3309  12fd		       a9 8f		      lda	#<(pfclear-1)
   3310  12ff		       48		      pha
   3311  1300		       a5 ee		      lda	temp7
   3312  1302		       48		      pha
   3313  1303		       8a		      txa
   3314  1304		       48		      pha
   3315  1305		       a2 08		      ldx	#8
   3316  1307		       4c eb ff 	      jmp	BS_jsr
   3317  130a				   ret_point4
   3318  130a				   .
   3319  130a							; 
   3320  130a
   3321  130a				   .
   3322  130a							; 
   3323  130a
   3324  130a				   .
   3325  130a							; 
   3326  130a
   3327  130a				   .
   3328  130a							; 
   3329  130a
   3330  130a				   .L0211		;  drawscreen
   3331  130a
   3332  130a		       85 ee		      sta	temp7
   3333  130c		       a9 13		      lda	#>(ret_point5-1)
   3334  130e		       48		      pha
   3335  130f		       a9 21		      lda	#<(ret_point5-1)
   3336  1311		       48		      pha
   3337  1312		       a9 f5		      lda	#>(drawscreen-1)
   3338  1314		       48		      pha
   3339  1315		       a9 86		      lda	#<(drawscreen-1)
   3340  1317		       48		      pha
   3341  1318		       a5 ee		      lda	temp7
   3342  131a		       48		      pha
   3343  131b		       8a		      txa
   3344  131c		       48		      pha
   3345  131d		       a2 08		      ldx	#8
   3346  131f		       4c eb ff 	      jmp	BS_jsr
   3347  1322				   ret_point5
   3348  1322				   .
   3349  1322							; 
   3350  1322
   3351  1322				   .
   3352  1322							; 
   3353  1322
   3354  1322				   .
   3355  1322							; 
   3356  1322
   3357  1322				   .
   3358  1322							; 
   3359  1322
   3360  1322				   .L0212		;  if _Bit2_Right_Left_Hand{2} then goto __Right_Handed_Setup
   3361  1322
   3362  1322		       a5 d2		      LDA	_Bit2_Right_Left_Hand
   3363  1324		       29 04		      AND	#4
   3364  1326		       f0 03		      BEQ	.skipL0212
   3365  1328				   .condpart14
   3366  1328		       4c 59 13 	      jmp	.__Right_Handed_Setup
   3367  132b
   3368  132b				   .skipL0212
   3369  132b				   .
   3370  132b							; 
   3371  132b
   3372  132b				   .
   3373  132b							; 
   3374  132b
   3375  132b				   .
   3376  132b							; 
   3377  132b
   3378  132b				   .
   3379  132b							; 
   3380  132b
   3381  132b				   .L0213		;  if !_Bit2_Right_Left_Hand{2} then goto __Left_Handed_Setup
   3382  132b
   3383  132b		       a5 d2		      LDA	_Bit2_Right_Left_Hand
   3384  132d		       29 04		      AND	#4
   3385  132f		       d0 03		      BNE	.skipL0213
   3386  1331				   .condpart15
   3387  1331		       4c af 13 	      jmp	.__Left_Handed_Setup
   3388  1334
   3389  1334				   .skipL0213
   3390  1334				   .
   3391  1334							; 
   3392  1334
   3393  1334				   .__TS_Skip_Select
   3394  1334							; __TS_Skip_Select
   3395  1334
   3396  1334				   .
   3397  1334							; 
   3398  1334
   3399  1334				   .
   3400  1334							; 
   3401  1334
   3402  1334				   .
   3403  1334							; 
   3404  1334
   3405  1334				   .
   3406  1334							; 
   3407  1334
   3408  1334				   .
   3409  1334							; 
   3410  1334
   3411  1334				   .
   3412  1334							; 
   3413  1334
   3414  1334				   .
   3415  1334							; 
   3416  1334
   3417  1334				   .
   3418  1334							; 
   3419  1334
   3420  1334				   .
   3421  1334							; 
   3422  1334
   3423  1334				   .
   3424  1334							; 
   3425  1334
   3426  1334				   .
   3427  1334							; 
   3428  1334
   3429  1334				   .
   3430  1334							; 
   3431  1334
   3432  1334				   .
   3433  1334							; 
   3434  1334
   3435  1334				   .
   3436  1334							; 
   3437  1334
   3438  1334				   .L0214		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
   3439  1334
   3440  1334		       a9 01		      lda	#1
   3441  1336		       2c 82 02 	      bit	SWCHB
   3442  1339		       f0 0d		      BEQ	.skipL0214
   3443  133b				   .condpart16
   3444  133b		       24 0c		      bit	INPT4
   3445  133d		       10 09		      BPL	.skip16then
   3446  133f				   .condpart17
   3447  133f		       a5 c4		      LDA	_Bit0_Reset_Restrainer
   3448  1341		       29 fe		      AND	#254
   3449  1343		       85 c4		      STA	_Bit0_Reset_Restrainer
   3450  1345		       4c bf 11 	      jmp	.__Title_Screen_Loop
   3451  1348
   3452  1348				   .skip16then
   3453  1348				   .skipL0214
   3454  1348				   .
   3455  1348							; 
   3456  1348
   3457  1348				   .
   3458  1348							; 
   3459  1348
   3460  1348				   .
   3461  1348							; 
   3462  1348
   3463  1348				   .
   3464  1348							; 
   3465  1348
   3466  1348				   .
   3467  1348							; 
   3468  1348
   3469  1348				   .L0215		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   3470  1348
   3471  1348		       a5 c4		      LDA	_Bit0_Reset_Restrainer
   3472  134a		       4a		      LSR
   3473  134b		       90 03		      BCC	.skipL0215
   3474  134d				   .condpart18
   3475  134d		       4c bf 11 	      jmp	.__Title_Screen_Loop
   3476  1350
   3477  1350				   .skipL0215
   3478  1350				   .
   3479  1350							; 
   3480  1350
   3481  1350				   .
   3482  1350							; 
   3483  1350
   3484  1350				   .
   3485  1350							; 
   3486  1350
   3487  1350				   .
   3488  1350							; 
   3489  1350
   3490  1350				   .
   3491  1350							; 
   3492  1350
   3493  1350				   .L0216		;  _Bit1_Auto_Play{1}	=  0  :  goto __Main_Loop_Setup
   3494  1350
   3495  1350		       a5 d2		      LDA	_Bit1_Auto_Play
   3496  1352		       29 fd		      AND	#253
   3497  1354		       85 d2		      STA	_Bit1_Auto_Play
   3498  1356		       4c 2d 14 	      jmp	.__Main_Loop_Setup
   3499  1359
   3500  1359				   .
   3501  1359							; 
   3502  1359
   3503  1359				   .
   3504  1359							; 
   3505  1359
   3506  1359				   .
   3507  1359							; 
   3508  1359
   3509  1359				   .
   3510  1359							; 
   3511  1359
   3512  1359				   .
   3513  1359							; 
   3514  1359
   3515  1359				   .
   3516  1359							; 
   3517  1359
   3518  1359				   .
   3519  1359							; 
   3520  1359
   3521  1359				   .
   3522  1359							; 
   3523  1359
   3524  1359				   .
   3525  1359							; 
   3526  1359
   3527  1359				   .
   3528  1359							; 
   3529  1359
   3530  1359				   .
   3531  1359							; 
   3532  1359
   3533  1359				   .
   3534  1359							; 
   3535  1359
   3536  1359				   .
   3537  1359							; 
   3538  1359
   3539  1359				   .
   3540  1359							; 
   3541  1359
   3542  1359				   .
   3543  1359							; 
   3544  1359
   3545  1359				   .
   3546  1359							; 
   3547  1359
   3548  1359				   .
   3549  1359							; 
   3550  1359
   3551  1359				   .
   3552  1359							; 
   3553  1359
   3554  1359				   .
   3555  1359							; 
   3556  1359
   3557  1359				   .
   3558  1359							; 
   3559  1359
   3560  1359				   .
   3561  1359							; 
   3562  1359
   3563  1359				   .
   3564  1359							; 
   3565  1359
   3566  1359				   .
   3567  1359							; 
   3568  1359
   3569  1359				   .__Right_Handed_Setup
   3570  1359							; __Right_Handed_Setup
   3571  1359
   3572  1359				   .
   3573  1359							; 
   3574  1359
   3575  1359				   .L0217		;  player0x  =  65  :	player0y  =  50  :  _Select_Timer  =  0
   3576  1359
   3577  1359		       a9 41		      LDA	#65
   3578  135b		       85 80		      STA	player0x
   3579  135d		       a9 32		      LDA	#50
   3580  135f		       85 85		      STA	player0y
   3581  1361		       a9 00		      LDA	#0
   3582  1363		       85 b7		      STA	_Select_Timer
   3583  1365				   .
   3584  1365							; 
   3585  1365
   3586  1365				   .L0218		;  player0:
   3587  1365
   3588  1365		       a2 ba		      LDX	#<playerL0218_0
   3589  1367		       86 8a		      STX	player0pointerlo
   3590  1369		       a9 f6		      LDA	#>playerL0218_0
   3591  136b		       85 8b		      STA	player0pointerhi
   3592  136d		       a9 04		      LDA	#4
   3593  136f		       85 8e		      STA	player0height
   3594  1371				   .
   3595  1371							; 
   3596  1371
   3597  1371				   .
   3598  1371							; 
   3599  1371
   3600  1371				   .
   3601  1371							; 
   3602  1371
   3603  1371				   .
   3604  1371							; 
   3605  1371
   3606  1371				   .
   3607  1371							; 
   3608  1371
   3609  1371				   .
   3610  1371							; 
   3611  1371
   3612  1371				   .
   3613  1371							; 
   3614  1371
   3615  1371				   .
   3616  1371							; 
   3617  1371
   3618  1371				   .
   3619  1371							; 
   3620  1371
   3621  1371				   .
   3622  1371							; 
   3623  1371
   3624  1371				   .
   3625  1371							; 
   3626  1371
   3627  1371				   .__Right_Handed_Loop
   3628  1371							; __Right_Handed_Loop
   3629  1371
   3630  1371				   .
   3631  1371							; 
   3632  1371
   3633  1371				   .
   3634  1371							; 
   3635  1371
   3636  1371				   .
   3637  1371							; 
   3638  1371
   3639  1371				   .
   3640  1371							; 
   3641  1371
   3642  1371				   .
   3643  1371							; 
   3644  1371
   3645  1371				   .
   3646  1371							; 
   3647  1371
   3648  1371				   .
   3649  1371							; 
   3650  1371
   3651  1371				   .L0219		;  CTRLPF  =  $21  :  NUSIZ0  =  $07  :  NUSIZ1  =  $07  :  REFP0  =  0  :  REFP1  =  0  :  COLUP0  =	$9E  :	COLUBK	=  0
   3652  1371
   3653  1371		       a9 21		      LDA	#$21
   3654  1373		       85 0a		      STA	CTRLPF
   3655  1375		       a9 07		      LDA	#$07
   3656  1377		       85 04		      STA	NUSIZ0
   3657  1379		       85 05		      STA	NUSIZ1
   3658  137b		       a9 00		      LDA	#0
   3659  137d		       85 0b		      STA	REFP0
   3660  137f		       85 0c		      STA	REFP1
   3661  1381		       a9 9e		      LDA	#$9E
   3662  1383		       85 06		      STA	COLUP0
   3663  1385		       a9 00		      LDA	#0
   3664  1387		       85 09		      STA	COLUBK
   3665  1389				   .
   3666  1389							; 
   3667  1389
   3668  1389				   .
   3669  1389							; 
   3670  1389
   3671  1389				   .
   3672  1389							; 
   3673  1389
   3674  1389				   .
   3675  1389							; 
   3676  1389
   3677  1389				   .
   3678  1389							; 
   3679  1389
   3680  1389				   .
   3681  1389							; 
   3682  1389
   3683  1389				   .
   3684  1389							; 
   3685  1389
   3686  1389				   .L0220		;  _Select_Timer  =  _Select_Timer  +	1
   3687  1389
   3688  1389		       e6 b7		      INC	_Select_Timer
   3689  138b				   .
   3690  138b							; 
   3691  138b
   3692  138b				   .
   3693  138b							; 
   3694  138b
   3695  138b				   .
   3696  138b							; 
   3697  138b
   3698  138b				   .
   3699  138b							; 
   3700  138b
   3701  138b				   .
   3702  138b							; 
   3703  138b
   3704  138b				   .
   3705  138b							; 
   3706  138b
   3707  138b				   .
   3708  138b							; 
   3709  138b
   3710  138b				   .L0221		;  drawscreen
   3711  138b
   3712  138b		       85 ee		      sta	temp7
   3713  138d		       a9 13		      lda	#>(ret_point6-1)
   3714  138f		       48		      pha
   3715  1390		       a9 a2		      lda	#<(ret_point6-1)
   3716  1392		       48		      pha
   3717  1393		       a9 f5		      lda	#>(drawscreen-1)
   3718  1395		       48		      pha
   3719  1396		       a9 86		      lda	#<(drawscreen-1)
   3720  1398		       48		      pha
   3721  1399		       a5 ee		      lda	temp7
   3722  139b		       48		      pha
   3723  139c		       8a		      txa
   3724  139d		       48		      pha
   3725  139e		       a2 08		      ldx	#8
   3726  13a0		       4c eb ff 	      jmp	BS_jsr
   3727  13a3				   ret_point6
   3728  13a3				   .
   3729  13a3							; 
   3730  13a3
   3731  13a3				   .
   3732  13a3							; 
   3733  13a3
   3734  13a3				   .
   3735  13a3							; 
   3736  13a3
   3737  13a3				   .
   3738  13a3							; 
   3739  13a3
   3740  13a3				   .
   3741  13a3							; 
   3742  13a3
   3743  13a3				   .
   3744  13a3							; 
   3745  13a3
   3746  13a3				   .
   3747  13a3							; 
   3748  13a3
   3749  13a3				   .L0222		;  if _Select_Timer  >  59 then goto __Title_Screen_Playfield
   3750  13a3
   3751  13a3		       a9 3b		      LDA	#59
   3752  13a5		       c5 b7		      CMP	_Select_Timer
   3753  13a7		       b0 03		      BCS	.skipL0222
   3754  13a9				   .condpart19
   3755  13a9		       4c 7b 11 	      jmp	.__Title_Screen_Playfield
   3756  13ac
   3757  13ac				   .skipL0222
   3758  13ac				   .
   3759  13ac							; 
   3760  13ac
   3761  13ac				   .
   3762  13ac							; 
   3763  13ac
   3764  13ac				   .
   3765  13ac							; 
   3766  13ac
   3767  13ac				   .L0223		;  goto __Right_Handed_Loop
   3768  13ac
   3769  13ac		       4c 71 13 	      jmp	.__Right_Handed_Loop
   3770  13af
   3771  13af				   .
   3772  13af							; 
   3773  13af
   3774  13af				   .
   3775  13af							; 
   3776  13af
   3777  13af				   .
   3778  13af							; 
   3779  13af
   3780  13af				   .
   3781  13af							; 
   3782  13af
   3783  13af				   .
   3784  13af							; 
   3785  13af
   3786  13af				   .
   3787  13af							; 
   3788  13af
   3789  13af				   .
   3790  13af							; 
   3791  13af
   3792  13af				   .
   3793  13af							; 
   3794  13af
   3795  13af				   .
   3796  13af							; 
   3797  13af
   3798  13af				   .
   3799  13af							; 
   3800  13af
   3801  13af				   .
   3802  13af							; 
   3803  13af
   3804  13af				   .__Left_Handed_Setup
   3805  13af							; __Left_Handed_Setup
   3806  13af
   3807  13af				   .
   3808  13af							; 
   3809  13af
   3810  13af				   .L0224		;  player0x  =  65  :	player0y  =  50  :  _Select_Timer  =  0
   3811  13af
   3812  13af		       a9 41		      LDA	#65
   3813  13b1		       85 80		      STA	player0x
   3814  13b3		       a9 32		      LDA	#50
   3815  13b5		       85 85		      STA	player0y
   3816  13b7		       a9 00		      LDA	#0
   3817  13b9		       85 b7		      STA	_Select_Timer
   3818  13bb				   .
   3819  13bb							; 
   3820  13bb
   3821  13bb				   .
   3822  13bb							; 
   3823  13bb
   3824  13bb				   .L0225		;  player0:
   3825  13bb
   3826  13bb		       a2 bf		      LDX	#<playerL0225_0
   3827  13bd		       86 8a		      STX	player0pointerlo
   3828  13bf		       a9 f6		      LDA	#>playerL0225_0
   3829  13c1		       85 8b		      STA	player0pointerhi
   3830  13c3		       a9 04		      LDA	#4
   3831  13c5		       85 8e		      STA	player0height
   3832  13c7				   .
   3833  13c7							; 
   3834  13c7
   3835  13c7				   .
   3836  13c7							; 
   3837  13c7
   3838  13c7				   .
   3839  13c7							; 
   3840  13c7
   3841  13c7				   .
   3842  13c7							; 
   3843  13c7
   3844  13c7				   .
   3845  13c7							; 
   3846  13c7
   3847  13c7				   .
   3848  13c7							; 
   3849  13c7
   3850  13c7				   .
   3851  13c7							; 
   3852  13c7
   3853  13c7				   .
   3854  13c7							; 
   3855  13c7
   3856  13c7				   .
   3857  13c7							; 
   3858  13c7
   3859  13c7				   .
   3860  13c7							; 
   3861  13c7
   3862  13c7				   .
   3863  13c7							; 
   3864  13c7
   3865  13c7				   .__Left_Handed_Loop
   3866  13c7							; __Left_Handed_Loop
   3867  13c7
   3868  13c7				   .
   3869  13c7							; 
   3870  13c7
   3871  13c7				   .
   3872  13c7							; 
   3873  13c7
   3874  13c7				   .
   3875  13c7							; 
   3876  13c7
   3877  13c7				   .
   3878  13c7							; 
   3879  13c7
   3880  13c7				   .
   3881  13c7							; 
   3882  13c7
   3883  13c7				   .
   3884  13c7							; 
   3885  13c7
   3886  13c7				   .
   3887  13c7							; 
   3888  13c7
   3889  13c7				   .L0226		;  CTRLPF  =  $21  :  NUSIZ0  =  $07  :  NUSIZ1  =  $07  :  REFP0  =  0  :  REFP1  =  0  :  COLUP0  =	$3E  :	COLUBK	=  0
   3890  13c7
   3891  13c7		       a9 21		      LDA	#$21
   3892  13c9		       85 0a		      STA	CTRLPF
   3893  13cb		       a9 07		      LDA	#$07
   3894  13cd		       85 04		      STA	NUSIZ0
   3895  13cf		       85 05		      STA	NUSIZ1
   3896  13d1		       a9 00		      LDA	#0
   3897  13d3		       85 0b		      STA	REFP0
   3898  13d5		       85 0c		      STA	REFP1
   3899  13d7		       a9 3e		      LDA	#$3E
   3900  13d9		       85 06		      STA	COLUP0
   3901  13db		       a9 00		      LDA	#0
   3902  13dd		       85 09		      STA	COLUBK
   3903  13df				   .
   3904  13df							; 
   3905  13df
   3906  13df				   .
   3907  13df							; 
   3908  13df
   3909  13df				   .
   3910  13df							; 
   3911  13df
   3912  13df				   .
   3913  13df							; 
   3914  13df
   3915  13df				   .
   3916  13df							; 
   3917  13df
   3918  13df				   .
   3919  13df							; 
   3920  13df
   3921  13df				   .
   3922  13df							; 
   3923  13df
   3924  13df				   .L0227		;  _Select_Timer  =  _Select_Timer  +	1
   3925  13df
   3926  13df		       e6 b7		      INC	_Select_Timer
   3927  13e1				   .
   3928  13e1							; 
   3929  13e1
   3930  13e1				   .
   3931  13e1							; 
   3932  13e1
   3933  13e1				   .
   3934  13e1							; 
   3935  13e1
   3936  13e1				   .
   3937  13e1							; 
   3938  13e1
   3939  13e1				   .
   3940  13e1							; 
   3941  13e1
   3942  13e1				   .
   3943  13e1							; 
   3944  13e1
   3945  13e1				   .
   3946  13e1							; 
   3947  13e1
   3948  13e1				   .L0228		;  drawscreen
   3949  13e1
   3950  13e1		       85 ee		      sta	temp7
   3951  13e3		       a9 13		      lda	#>(ret_point7-1)
   3952  13e5		       48		      pha
   3953  13e6		       a9 f8		      lda	#<(ret_point7-1)
   3954  13e8		       48		      pha
   3955  13e9		       a9 f5		      lda	#>(drawscreen-1)
   3956  13eb		       48		      pha
   3957  13ec		       a9 86		      lda	#<(drawscreen-1)
   3958  13ee		       48		      pha
   3959  13ef		       a5 ee		      lda	temp7
   3960  13f1		       48		      pha
   3961  13f2		       8a		      txa
   3962  13f3		       48		      pha
   3963  13f4		       a2 08		      ldx	#8
   3964  13f6		       4c eb ff 	      jmp	BS_jsr
   3965  13f9				   ret_point7
   3966  13f9				   .
   3967  13f9							; 
   3968  13f9
   3969  13f9				   .
   3970  13f9							; 
   3971  13f9
   3972  13f9				   .
   3973  13f9							; 
   3974  13f9
   3975  13f9				   .
   3976  13f9							; 
   3977  13f9
   3978  13f9				   .
   3979  13f9							; 
   3980  13f9
   3981  13f9				   .
   3982  13f9							; 
   3983  13f9
   3984  13f9				   .
   3985  13f9							; 
   3986  13f9
   3987  13f9				   .L0229		;  if _Select_Timer  >  59 then goto __Title_Screen_Playfield
   3988  13f9
   3989  13f9		       a9 3b		      LDA	#59
   3990  13fb		       c5 b7		      CMP	_Select_Timer
   3991  13fd		       b0 03		      BCS	.skipL0229
   3992  13ff				   .condpart20
   3993  13ff		       4c 7b 11 	      jmp	.__Title_Screen_Playfield
   3994  1402
   3995  1402				   .skipL0229
   3996  1402				   .
   3997  1402							; 
   3998  1402
   3999  1402				   .
   4000  1402							; 
   4001  1402
   4002  1402				   .
   4003  1402							; 
   4004  1402
   4005  1402				   .L0230		;  goto __Left_Handed_Loop
   4006  1402
   4007  1402		       4c c7 13 	      jmp	.__Left_Handed_Loop
   4008  1405
   4009  1405				   .
   4010  1405							; 
   4011  1405
   4012  1405				   .
   4013  1405							; 
   4014  1405
   4015  1405				   .
   4016  1405							; 
   4017  1405
   4018  1405				   .
   4019  1405							; 
   4020  1405
   4021  1405				   .
   4022  1405							; 
   4023  1405
   4024  1405				   .
   4025  1405							; 
   4026  1405
   4027  1405				   .
   4028  1405							; 
   4029  1405
   4030  1405				   .
   4031  1405							; 
   4032  1405
   4033  1405				   .
   4034  1405							; 
   4035  1405
   4036  1405				   .
   4037  1405							; 
   4038  1405
   4039  1405				   .L0231		;  data _SD_Title_Seaweed
   4040  1405
   4041  1405		       4c 2d 14 	      JMP	.skipL0231
   4042  1408				   _SD_Title_Seaweed
   4043  1408		       02 0e 05 	      .byte.b	2,14,5
   4044  140b
   4045  140b		       01		      .byte.b	1
   4046  140c
   4047  140c		       0e 0e 05 	      .byte.b	14,14,5
   4048  140f
   4049  140f		       08		      .byte.b	8
   4050  1410
   4051  1410		       02 0e 05 	      .byte.b	2,14,5
   4052  1413
   4053  1413		       08		      .byte.b	8
   4054  1414
   4055  1414		       02 0e 03 	      .byte.b	2,14,3
   4056  1417
   4057  1417		       01		      .byte.b	1
   4058  1418
   4059  1418		       0e 0e 03 	      .byte.b	14,14,3
   4060  141b
   4061  141b		       0c		      .byte.b	12
   4062  141c
   4063  141c		       02 0e 03 	      .byte.b	2,14,3
   4064  141f
   4065  141f		       08		      .byte.b	8
   4066  1420
   4067  1420		       02 0e 04 	      .byte.b	2,14,4
   4068  1423
   4069  1423		       01		      .byte.b	1
   4070  1424
   4071  1424		       0e 0e 04 	      .byte.b	14,14,4
   4072  1427
   4073  1427		       0c		      .byte.b	12
   4074  1428
   4075  1428		       02 0e 04 	      .byte.b	2,14,4
   4076  142b
   4077  142b		       18		      .byte.b	24
   4078  142c
   4079  142c		       ff		      .byte.b	255
   4080  142d
   4081  142d				   .skipL0231
   4082  142d				   .
   4083  142d							; 
   4084  142d
   4085  142d				   .
   4086  142d							; 
   4087  142d
   4088  142d				   .
   4089  142d							; 
   4090  142d
   4091  142d				   .
   4092  142d							; 
   4093  142d
   4094  142d				   .
   4095  142d							; 
   4096  142d
   4097  142d				   .
   4098  142d							; 
   4099  142d
   4100  142d				   .
   4101  142d							; 
   4102  142d
   4103  142d				   .
   4104  142d							; 
   4105  142d
   4106  142d				   .
   4107  142d							; 
   4108  142d
   4109  142d				   .
   4110  142d							; 
   4111  142d
   4112  142d				   .
   4113  142d							; 
   4114  142d
   4115  142d				   .__Main_Loop_Setup
   4116  142d							; __Main_Loop_Setup
   4117  142d
   4118  142d				   .
   4119  142d							; 
   4120  142d
   4121  142d				   .
   4122  142d							; 
   4123  142d
   4124  142d				   .
   4125  142d							; 
   4126  142d
   4127  142d				   .
   4128  142d							; 
   4129  142d
   4130  142d				   .
   4131  142d							; 
   4132  142d
   4133  142d				   .
   4134  142d							; 
   4135  142d
   4136  142d				   .
   4137  142d							; 
   4138  142d
   4139  142d				   .
   4140  142d							; 
   4141  142d
   4142  142d				   .
   4143  142d							; 
   4144  142d
   4145  142d				   .
   4146  142d							; 
   4147  142d
   4148  142d				   .L0232		;  _Bit0_Game_Control{0}  =  0
   4149  142d
   4150  142d		       a5 d2		      LDA	_Bit0_Game_Control
   4151  142f		       29 fe		      AND	#254
   4152  1431		       85 d2		      STA	_Bit0_Game_Control
   4153  1433				   .
   4154  1433							; 
   4155  1433
   4156  1433				   .
   4157  1433							; 
   4158  1433
   4159  1433				   .
   4160  1433							; 
   4161  1433
   4162  1433				   .
   4163  1433							; 
   4164  1433
   4165  1433				   .
   4166  1433							; 
   4167  1433
   4168  1433				   .
   4169  1433							; 
   4170  1433
   4171  1433				   .L0233		;  player0y  =  200  :  player1y  =  200
   4172  1433
   4173  1433		       a9 c8		      LDA	#200
   4174  1435		       85 85		      STA	player0y
   4175  1437		       85 86		      STA	player1y
   4176  1439				   .
   4177  1439							; 
   4178  1439
   4179  1439				   .
   4180  1439							; 
   4181  1439
   4182  1439				   .
   4183  1439							; 
   4184  1439
   4185  1439				   .
   4186  1439							; 
   4187  1439
   4188  1439				   .
   4189  1439							; 
   4190  1439
   4191  1439				   .
   4192  1439							; 
   4193  1439
   4194  1439				   .L0234		;  pfclear
   4195  1439
   4196  1439		       a9 00		      LDA	#0
   4197  143b		       85 ee		      sta	temp7
   4198  143d		       a9 14		      lda	#>(ret_point8-1)
   4199  143f		       48		      pha
   4200  1440		       a9 52		      lda	#<(ret_point8-1)
   4201  1442		       48		      pha
   4202  1443		       a9 f3		      lda	#>(pfclear-1)
   4203  1445		       48		      pha
   4204  1446		       a9 8f		      lda	#<(pfclear-1)
   4205  1448		       48		      pha
   4206  1449		       a5 ee		      lda	temp7
   4207  144b		       48		      pha
   4208  144c		       8a		      txa
   4209  144d		       48		      pha
   4210  144e		       a2 08		      ldx	#8
   4211  1450		       4c eb ff 	      jmp	BS_jsr
   4212  1453				   ret_point8
   4213  1453				   .
   4214  1453							; 
   4215  1453
   4216  1453				   .
   4217  1453							; 
   4218  1453
   4219  1453				   .
   4220  1453							; 
   4221  1453
   4222  1453				   .
   4223  1453							; 
   4224  1453
   4225  1453				   .
   4226  1453							; 
   4227  1453
   4228  1453				   .
   4229  1453							; 
   4230  1453
   4231  1453				   .L0235		;  COLUBK  =  $80
   4232  1453
   4233  1453		       a9 80		      LDA	#$80
   4234  1455		       85 09		      STA	COLUBK
   4235  1457				   .
   4236  1457							; 
   4237  1457
   4238  1457				   .
   4239  1457							; 
   4240  1457
   4241  1457				   .
   4242  1457							; 
   4243  1457
   4244  1457				   .
   4245  1457							; 
   4246  1457
   4247  1457				   .
   4248  1457							; 
   4249  1457
   4250  1457				   .
   4251  1457							; 
   4252  1457
   4253  1457				   .L0236		;  drawscreen
   4254  1457
   4255  1457		       85 ee		      sta	temp7
   4256  1459		       a9 14		      lda	#>(ret_point9-1)
   4257  145b		       48		      pha
   4258  145c		       a9 6e		      lda	#<(ret_point9-1)
   4259  145e		       48		      pha
   4260  145f		       a9 f5		      lda	#>(drawscreen-1)
   4261  1461		       48		      pha
   4262  1462		       a9 86		      lda	#<(drawscreen-1)
   4263  1464		       48		      pha
   4264  1465		       a5 ee		      lda	temp7
   4265  1467		       48		      pha
   4266  1468		       8a		      txa
   4267  1469		       48		      pha
   4268  146a		       a2 08		      ldx	#8
   4269  146c		       4c eb ff 	      jmp	BS_jsr
   4270  146f				   ret_point9
   4271  146f				   .
   4272  146f							; 
   4273  146f
   4274  146f				   .
   4275  146f							; 
   4276  146f
   4277  146f				   .
   4278  146f							; 
   4279  146f
   4280  146f				   .
   4281  146f							; 
   4282  146f
   4283  146f				   .
   4284  146f							; 
   4285  146f
   4286  146f				   .
   4287  146f							; 
   4288  146f
   4289  146f				   .L0237		;  gosub __Clear_and_Set
   4290  146f
   4291  146f		       20 7f 16 	      jsr	.__Clear_and_Set
   4292  1472
   4293  1472				   .
   4294  1472							; 
   4295  1472
   4296  1472				   .
   4297  1472							; 
   4298  1472
   4299  1472				   .
   4300  1472							; 
   4301  1472
   4302  1472				   .
   4303  1472							; 
   4304  1472
   4305  1472				   .
   4306  1472							; 
   4307  1472
   4308  1472				   .
   4309  1472							; 
   4310  1472
   4311  1472				   .L0238		;  CTRLPF  =  $21
   4312  1472
   4313  1472		       a9 21		      LDA	#$21
   4314  1474		       85 0a		      STA	CTRLPF
   4315  1476				   .
   4316  1476							; 
   4317  1476
   4318  1476				   .
   4319  1476							; 
   4320  1476
   4321  1476				   .
   4322  1476							; 
   4323  1476
   4324  1476				   .
   4325  1476							; 
   4326  1476
   4327  1476				   .
   4328  1476							; 
   4329  1476
   4330  1476				   .L0239		;  ballheight	=  0
   4331  1476
   4332  1476		       a9 00		      LDA	#0
   4333  1478		       85 92		      STA	ballheight
   4334  147a				   .
   4335  147a							; 
   4336  147a
   4337  147a				   .
   4338  147a							; 
   4339  147a
   4340  147a				   .
   4341  147a							; 
   4342  147a
   4343  147a				   .
   4344  147a							; 
   4345  147a
   4346  147a				   .
   4347  147a							; 
   4348  147a
   4349  147a				   .
   4350  147a							; 
   4351  147a
   4352  147a				   .L0240		;  _SC_Back  =  $C4
   4353  147a
   4354  147a		       a9 c4		      LDA	#$C4
   4355  147c		       85 d1		      STA	_SC_Back
   4356  147e				   .
   4357  147e							; 
   4358  147e
   4359  147e				   .
   4360  147e							; 
   4361  147e
   4362  147e				   .
   4363  147e							; 
   4364  147e
   4365  147e				   .
   4366  147e							; 
   4367  147e
   4368  147e				   .
   4369  147e							; 
   4370  147e
   4371  147e				   .
   4372  147e							; 
   4373  147e
   4374  147e				   .L0241		;  pfscore1  =  0  :  pfscore2  =  0  :  pfscorecolor	=  $C4
   4375  147e
   4376  147e		       a9 00		      LDA	#0
   4377  1480		       85 f2		      STA	pfscore1
   4378  1482		       85 f3		      STA	pfscore2
   4379  1484		       a9 c4		      LDA	#$C4
   4380  1486		       85 f4		      STA	pfscorecolor
   4381  1488				   .
   4382  1488							; 
   4383  1488
   4384  1488				   .
   4385  1488							; 
   4386  1488
   4387  1488				   .
   4388  1488							; 
   4389  1488
   4390  1488				   .
   4391  1488							; 
   4392  1488
   4393  1488				   .
   4394  1488							; 
   4395  1488
   4396  1488				   .
   4397  1488							; 
   4398  1488
   4399  1488				   .L0242		;  if _Bit1_Auto_Play{1} then _SC_Back  =  $C4  :  goto __Main_Loop_Setup_02
   4400  1488
   4401  1488		       a5 d2		      LDA	_Bit1_Auto_Play
   4402  148a		       29 02		      AND	#2
   4403  148c		       f0 07		      BEQ	.skipL0242
   4404  148e				   .condpart21
   4405  148e		       a9 c4		      LDA	#$C4
   4406  1490		       85 d1		      STA	_SC_Back
   4407  1492		       4c e9 15 	      jmp	.__Main_Loop_Setup_02
   4408  1495
   4409  1495				   .skipL0242
   4410  1495				   .
   4411  1495							; 
   4412  1495
   4413  1495				   .
   4414  1495							; 
   4415  1495
   4416  1495				   .
   4417  1495							; 
   4418  1495
   4419  1495				   .
   4420  1495							; 
   4421  1495
   4422  1495				   .
   4423  1495							; 
   4424  1495
   4425  1495				   .
   4426  1495							; 
   4427  1495
   4428  1495				   .L0243		;  _Ch1_Sound	=  _c_MLS_Seaweed_Close_In
   4429  1495
   4430  1495		       a9 0b		      LDA	#_c_MLS_Seaweed_Close_In
   4431  1497		       85 dd		      STA	_Ch1_Sound
   4432  1499				   .
   4433  1499							; 
   4434  1499
   4435  1499				   .
   4436  1499							; 
   4437  1499
   4438  1499				   .
   4439  1499							; 
   4440  1499
   4441  1499				   .
   4442  1499							; 
   4443  1499
   4444  1499				   .
   4445  1499							; 
   4446  1499
   4447  1499				   .
   4448  1499							; 
   4449  1499
   4450  1499				   .L0244		;  ballx  =  158  :  bally  =	87
   4451  1499
   4452  1499		       a9 9e		      LDA	#158
   4453  149b		       85 84		      STA	ballx
   4454  149d		       a9 57		      LDA	#87
   4455  149f		       85 89		      STA	bally
   4456  14a1				   .
   4457  14a1							; 
   4458  14a1
   4459  14a1				   .
   4460  14a1							; 
   4461  14a1
   4462  14a1				   .
   4463  14a1							; 
   4464  14a1
   4465  14a1				   .
   4466  14a1							; 
   4467  14a1
   4468  14a1				   .
   4469  14a1							; 
   4470  14a1
   4471  14a1				   .
   4472  14a1							; 
   4473  14a1
   4474  14a1				   .L0245		;  player1x  =  1  :  player1y  =  190
   4475  14a1
   4476  14a1		       a9 01		      LDA	#1
   4477  14a3		       85 81		      STA	player1x
   4478  14a5		       a9 be		      LDA	#190
   4479  14a7		       85 86		      STA	player1y
   4480  14a9				   .
   4481  14a9							; 
   4482  14a9
   4483  14a9				   .
   4484  14a9							; 
   4485  14a9
   4486  14a9				   .
   4487  14a9							; 
   4488  14a9
   4489  14a9				   .
   4490  14a9							; 
   4491  14a9
   4492  14a9				   .
   4493  14a9							; 
   4494  14a9
   4495  14a9				   .
   4496  14a9							; 
   4497  14a9
   4498  14a9				   .L0246		;  player1color:
   4499  14a9
   4500  14a9		       a2 00		      LDX	#<playercolorL0246_1
   4501  14ab		       86 87		      STX	player1color
   4502  14ad		       a9 f7		      LDA	#>playercolorL0246_1
   4503  14af		       85 88		      STA	player1color+1
   4504  14b1				   .
   4505  14b1							; 
   4506  14b1
   4507  14b1				   .
   4508  14b1							; 
   4509  14b1
   4510  14b1				   .
   4511  14b1							; 
   4512  14b1
   4513  14b1				   .
   4514  14b1							; 
   4515  14b1
   4516  14b1				   .
   4517  14b1							; 
   4518  14b1
   4519  14b1				   .
   4520  14b1							; 
   4521  14b1
   4522  14b1				   .L0247		;  player1:
   4523  14b1
   4524  14b1		       a2 65		      LDX	#<playerL0247_1
   4525  14b3		       86 8c		      STX	player1pointerlo
   4526  14b5		       a9 f7		      LDA	#>playerL0247_1
   4527  14b7		       85 8d		      STA	player1pointerhi
   4528  14b9		       a9 64		      LDA	#100
   4529  14bb		       85 8f		      STA	player1height
   4530  14bd				   .
   4531  14bd							; 
   4532  14bd
   4533  14bd				   .
   4534  14bd							; 
   4535  14bd
   4536  14bd				   .
   4537  14bd							; 
   4538  14bd
   4539  14bd				   .
   4540  14bd							; 
   4541  14bd
   4542  14bd				   .
   4543  14bd							; 
   4544  14bd
   4545  14bd				   .
   4546  14bd							; 
   4547  14bd
   4548  14bd				   .L0248		;  player0:
   4549  14bd
   4550  14bd		       a2 ca		      LDX	#<playerL0248_0
   4551  14bf		       86 8a		      STX	player0pointerlo
   4552  14c1		       a9 f7		      LDA	#>playerL0248_0
   4553  14c3		       85 8b		      STA	player0pointerhi
   4554  14c5		       a9 02		      LDA	#2
   4555  14c7		       85 8e		      STA	player0height
   4556  14c9				   .
   4557  14c9							; 
   4558  14c9
   4559  14c9				   .
   4560  14c9							; 
   4561  14c9
   4562  14c9				   .
   4563  14c9							; 
   4564  14c9
   4565  14c9				   .
   4566  14c9							; 
   4567  14c9
   4568  14c9				   .
   4569  14c9							; 
   4570  14c9
   4571  14c9				   .
   4572  14c9							; 
   4573  14c9
   4574  14c9				   .L0249		;  player0x  =  144  :  player0y  =  90
   4575  14c9
   4576  14c9		       a9 90		      LDA	#144
   4577  14cb		       85 80		      STA	player0x
   4578  14cd		       a9 5a		      LDA	#90
   4579  14cf		       85 85		      STA	player0y
   4580  14d1				   .
   4581  14d1							; 
   4582  14d1
   4583  14d1				   .
   4584  14d1							; 
   4585  14d1
   4586  14d1				   .
   4587  14d1							; 
   4588  14d1
   4589  14d1				   .
   4590  14d1							; 
   4591  14d1
   4592  14d1				   .
   4593  14d1							; 
   4594  14d1
   4595  14d1				   .
   4596  14d1							; 
   4597  14d1
   4598  14d1				   .
   4599  14d1							; 
   4600  14d1
   4601  14d1				   .
   4602  14d1							; 
   4603  14d1
   4604  14d1				   .
   4605  14d1							; 
   4606  14d1
   4607  14d1				   .
   4608  14d1							; 
   4609  14d1
   4610  14d1				   .
   4611  14d1							; 
   4612  14d1
   4613  14d1				   .__Close_In_Loop
   4614  14d1							; __Close_In_Loop
   4615  14d1
   4616  14d1				   .
   4617  14d1							; 
   4618  14d1
   4619  14d1				   .
   4620  14d1							; 
   4621  14d1
   4622  14d1				   .
   4623  14d1							; 
   4624  14d1
   4625  14d1				   .
   4626  14d1							; 
   4627  14d1
   4628  14d1				   .
   4629  14d1							; 
   4630  14d1
   4631  14d1				   .
   4632  14d1							; 
   4633  14d1
   4634  14d1				   .
   4635  14d1							; 
   4636  14d1
   4637  14d1				   .L0250		;  scorecolor	=  $1C	:  COLUP0  =  $80  :  COLUBK  =  $80
   4638  14d1
   4639  14d1		       a9 1c		      LDA	#$1C
   4640  14d3		       85 a3		      STA	scorecolor
   4641  14d5		       a9 80		      LDA	#$80
   4642  14d7		       85 06		      STA	COLUP0
   4643  14d9		       85 09		      STA	COLUBK
   4644  14db				   .
   4645  14db							; 
   4646  14db
   4647  14db				   .
   4648  14db							; 
   4649  14db
   4650  14db				   .
   4651  14db							; 
   4652  14db
   4653  14db				   .
   4654  14db							; 
   4655  14db
   4656  14db				   .
   4657  14db							; 
   4658  14db
   4659  14db				   .
   4660  14db							; 
   4661  14db
   4662  14db				   .
   4663  14db							; 
   4664  14db
   4665  14db				   .L0251		;  NUSIZ0  =  $17
   4666  14db
   4667  14db		       a9 17		      LDA	#$17
   4668  14dd		       85 04		      STA	NUSIZ0
   4669  14df				   .
   4670  14df							; 
   4671  14df
   4672  14df				   .
   4673  14df							; 
   4674  14df
   4675  14df				   .
   4676  14df							; 
   4677  14df
   4678  14df				   .
   4679  14df							; 
   4680  14df
   4681  14df				   .
   4682  14df							; 
   4683  14df
   4684  14df				   .
   4685  14df							; 
   4686  14df
   4687  14df				   .
   4688  14df							; 
   4689  14df
   4690  14df				   .
   4691  14df							; 
   4692  14df
   4693  14df				   .
   4694  14df							; 
   4695  14df
   4696  14df				   .
   4697  14df							; 
   4698  14df
   4699  14df				   .L0252		;  _Master_Counter  =	_Master_Counter  +  1
   4700  14df
   4701  14df		       e6 d8		      INC	_Master_Counter
   4702  14e1				   .
   4703  14e1							; 
   4704  14e1
   4705  14e1				   .
   4706  14e1							; 
   4707  14e1
   4708  14e1				   .
   4709  14e1							; 
   4710  14e1
   4711  14e1				   .
   4712  14e1							; 
   4713  14e1
   4714  14e1				   .L0253		;  if _MLSetup_Tmp_Close_In_Counter  <  4 then ballheight  =  ballheight  +  6  :  player1y  =  player1y  -  6
   4715  14e1
   4716  14e1		       a5 bb		      LDA	_MLSetup_Tmp_Close_In_Counter
   4717  14e3		       c9 04		      CMP	#4
   4718  14e5		       b0 0e		      BCS	.skipL0253
   4719  14e7				   .condpart22
   4720  14e7		       a5 92		      LDA	ballheight
   4721  14e9		       18		      CLC
   4722  14ea		       69 06		      ADC	#6
   4723  14ec		       85 92		      STA	ballheight
   4724  14ee		       a5 86		      LDA	player1y
   4725  14f0		       38		      SEC
   4726  14f1		       e9 06		      SBC	#6
   4727  14f3		       85 86		      STA	player1y
   4728  14f5				   .skipL0253
   4729  14f5				   .
   4730  14f5							; 
   4731  14f5
   4732  14f5				   .
   4733  14f5							; 
   4734  14f5
   4735  14f5				   .
   4736  14f5							; 
   4737  14f5
   4738  14f5				   .
   4739  14f5							; 
   4740  14f5
   4741  14f5				   .L0254		;  if _Master_Counter	<  15 then goto __Skip_All_Close_In_Counters
   4742  14f5
   4743  14f5		       a5 d8		      LDA	_Master_Counter
   4744  14f7		       c9 0f		      CMP	#15
   4745  14f9		       b0 03		      BCS	.skipL0254
   4746  14fb				   .condpart23
   4747  14fb		       4c 5a 15 	      jmp	.__Skip_All_Close_In_Counters
   4748  14fe
   4749  14fe				   .skipL0254
   4750  14fe				   .
   4751  14fe							; 
   4752  14fe
   4753  14fe				   .
   4754  14fe							; 
   4755  14fe
   4756  14fe				   .
   4757  14fe							; 
   4758  14fe
   4759  14fe				   .
   4760  14fe							; 
   4761  14fe
   4762  14fe				   .L0255		;  _Master_Counter  =	0  :  _MLSetup_Tmp_Close_In_Counter  =	_MLSetup_Tmp_Close_In_Counter  +  1
   4763  14fe
   4764  14fe		       a9 00		      LDA	#0
   4765  1500		       85 d8		      STA	_Master_Counter
   4766  1502		       e6 bb		      INC	_MLSetup_Tmp_Close_In_Counter
   4767  1504				   .
   4768  1504							; 
   4769  1504
   4770  1504				   .
   4771  1504							; 
   4772  1504
   4773  1504				   .
   4774  1504							; 
   4775  1504
   4776  1504				   .
   4777  1504							; 
   4778  1504
   4779  1504				   .L0256		;  player1y  =  190  :  player1x  =  player1x	+  4  :  if ballx  >  146 then ballheight  =  0  :  ballx  =  ballx  -	4
   4780  1504
   4781  1504		       a9 be		      LDA	#190
   4782  1506		       85 86		      STA	player1y
   4783  1508		       a5 81		      LDA	player1x
   4784  150a		       18		      CLC
   4785  150b		       69 04		      ADC	#4
   4786  150d		       85 81		      STA	player1x
   4787  150f		       a9 92		      LDA	#146
   4788  1511		       c5 84		      CMP	ballx
   4789  1513		       b0 0b		      BCS	.skipL0256
   4790  1515				   .condpart24
   4791  1515		       a9 00		      LDA	#0
   4792  1517		       85 92		      STA	ballheight
   4793  1519		       a5 84		      LDA	ballx
   4794  151b		       38		      SEC
   4795  151c		       e9 04		      SBC	#4
   4796  151e		       85 84		      STA	ballx
   4797  1520				   .skipL0256
   4798  1520				   .
   4799  1520							; 
   4800  1520
   4801  1520				   .
   4802  1520							; 
   4803  1520
   4804  1520				   .
   4805  1520							; 
   4806  1520
   4807  1520				   .
   4808  1520							; 
   4809  1520
   4810  1520				   .L0257		;  if _MLSetup_Tmp_Close_In_Counter  =  1 then _MLSetup_Tmp_Close_In_01  =  16  :  _MLSetup_Tmp_Close_In_02  =  16  :	goto __Skip_Close_In_Count
   4811  1520
   4812  1520		       a5 bb		      LDA	_MLSetup_Tmp_Close_In_Counter
   4813  1522		       c9 01		      CMP	#1
   4814  1524		       d0 09		      BNE	.skipL0257
   4815  1526				   .condpart25
   4816  1526		       a9 10		      LDA	#16
   4817  1528		       85 b8		      STA	_MLSetup_Tmp_Close_In_01
   4818  152a		       85 b9		      STA	_MLSetup_Tmp_Close_In_02
   4819  152c		       4c 48 15 	      jmp	.__Skip_Close_In_Count
   4820  152f
   4821  152f				   .skipL0257
   4822  152f				   .
   4823  152f							; 
   4824  152f
   4825  152f				   .
   4826  152f							; 
   4827  152f
   4828  152f				   .
   4829  152f							; 
   4830  152f
   4831  152f				   .
   4832  152f							; 
   4833  152f
   4834  152f				   .L0258		;  if _MLSetup_Tmp_Close_In_02  >=  240 then goto __Skip_Close_In_Count
   4835  152f
   4836  152f		       a5 b9		      LDA	_MLSetup_Tmp_Close_In_02
   4837  1531		       c9 f0		      CMP	#240
   4838  1533		       90 03		      BCC	.skipL0258
   4839  1535				   .condpart26
   4840  1535		       4c 48 15 	      jmp	.__Skip_Close_In_Count
   4841  1538
   4842  1538				   .skipL0258
   4843  1538				   .
   4844  1538							; 
   4845  1538
   4846  1538				   .
   4847  1538							; 
   4848  1538
   4849  1538				   .
   4850  1538							; 
   4851  1538
   4852  1538				   .
   4853  1538							; 
   4854  1538
   4855  1538				   .L0259		;  _MLSetup_Tmp_Close_In_01  =   ( _MLSetup_Tmp_Close_In_01 )	* 2
   4856  1538
   4857  1538							; complex statement detected
   4858  1538		       a5 b8		      LDA	_MLSetup_Tmp_Close_In_01
   4859  153a		       0a		      asl
   4860  153b		       85 b8		      STA	_MLSetup_Tmp_Close_In_01
   4861  153d				   .
   4862  153d							; 
   4863  153d
   4864  153d				   .L0260		;  temp5  =  _MLSetup_Tmp_Close_In_02
   4865  153d
   4866  153d		       a5 b9		      LDA	_MLSetup_Tmp_Close_In_02
   4867  153f		       85 a0		      STA	temp5
   4868  1541				   .
   4869  1541							; 
   4870  1541
   4871  1541				   .L0261		;  _MLSetup_Tmp_Close_In_02  =  _MLSetup_Tmp_Close_In_01  +  temp5
   4872  1541
   4873  1541		       a5 b8		      LDA	_MLSetup_Tmp_Close_In_01
   4874  1543		       18		      CLC
   4875  1544		       65 a0		      ADC	temp5
   4876  1546		       85 b9		      STA	_MLSetup_Tmp_Close_In_02
   4877  1548				   .
   4878  1548							; 
   4879  1548
   4880  1548				   .__Skip_Close_In_Count
   4881  1548							; __Skip_Close_In_Count
   4882  1548
   4883  1548				   .
   4884  1548							; 
   4885  1548
   4886  1548				   .
   4887  1548							; 
   4888  1548
   4889  1548				   .
   4890  1548							; 
   4891  1548
   4892  1548				   .
   4893  1548							; 
   4894  1548
   4895  1548				   .L0262		;  if _MLSetup_Tmp_Close_In_02  <  240 then _Ch1_Sound  =  _c_MLS_Seaweed_Close_In  :	AUDV0  =  0  :	_Ch0_Counter  =  0  :  _MLSet_Tone_Flip_Cntr_Tmp  =  0
   4896  1548
   4897  1548		       a5 b9		      LDA	_MLSetup_Tmp_Close_In_02
   4898  154a		       c9 f0		      CMP	#240
   4899  154c		       b0 0c		      BCS	.skipL0262
   4900  154e				   .condpart27
   4901  154e		       a9 0b		      LDA	#_c_MLS_Seaweed_Close_In
   4902  1550		       85 dd		      STA	_Ch1_Sound
   4903  1552		       a9 00		      LDA	#0
   4904  1554		       85 19		      STA	AUDV0
   4905  1556		       85 dc		      STA	_Ch0_Counter
   4906  1558		       85 ba		      STA	_MLSet_Tone_Flip_Cntr_Tmp
   4907  155a				   .skipL0262
   4908  155a				   .
   4909  155a							; 
   4910  155a
   4911  155a				   .__Skip_All_Close_In_Counters
   4912  155a							; __Skip_All_Close_In_Counters
   4913  155a
   4914  155a				   .
   4915  155a							; 
   4916  155a
   4917  155a				   .
   4918  155a							; 
   4919  155a
   4920  155a				   .
   4921  155a							; 
   4922  155a
   4923  155a				   .
   4924  155a							; 
   4925  155a
   4926  155a				   .L0263		;  PF0  =  _MLSetup_Tmp_Close_In_02
   4927  155a
   4928  155a		       a5 b9		      LDA	_MLSetup_Tmp_Close_In_02
   4929  155c		       85 0d		      STA	PF0
   4930  155e				   .
   4931  155e							; 
   4932  155e
   4933  155e				   .
   4934  155e							; 
   4935  155e
   4936  155e				   .
   4937  155e							; 
   4938  155e
   4939  155e				   .
   4940  155e							; 
   4941  155e
   4942  155e				   .
   4943  155e							; 
   4944  155e
   4945  155e				   .
   4946  155e							; 
   4947  155e
   4948  155e				   .
   4949  155e							; 
   4950  155e
   4951  155e				   .
   4952  155e							; 
   4953  155e
   4954  155e				   .
   4955  155e							; 
   4956  155e
   4957  155e				   .
   4958  155e							; 
   4959  155e
   4960  155e				   .L0264		;  if _Ch1_Sound  <>  _c_MLS_Seaweed_Close_In then goto __Skip_Close_In_Sound
   4961  155e
   4962  155e		       a5 dd		      LDA	_Ch1_Sound
   4963  1560		       c9 0b		      CMP	#_c_MLS_Seaweed_Close_In
   4964  1562		       f0 03		      BEQ	.skipL0264
   4965  1564				   .condpart28
   4966  1564		       4c 8c 15 	      jmp	.__Skip_Close_In_Sound
   4967  1567
   4968  1567				   .skipL0264
   4969  1567				   .
   4970  1567							; 
   4971  1567
   4972  1567				   .
   4973  1567							; 
   4974  1567
   4975  1567				   .
   4976  1567							; 
   4977  1567
   4978  1567				   .
   4979  1567							; 
   4980  1567
   4981  1567				   .L0265		;  AUDV0  =  8  :  AUDC0  =  8
   4982  1567
   4983  1567		       a9 08		      LDA	#8
   4984  1569		       85 19		      STA	AUDV0
   4985  156b		       85 15		      STA	AUDC0
   4986  156d				   .
   4987  156d							; 
   4988  156d
   4989  156d				   .
   4990  156d							; 
   4991  156d
   4992  156d				   .
   4993  156d							; 
   4994  156d
   4995  156d				   .
   4996  156d							; 
   4997  156d
   4998  156d				   .L0266		;  _MLSet_Tone_Flip_Cntr_Tmp  =  _MLSet_Tone_Flip_Cntr_Tmp  +	1
   4999  156d
   5000  156d		       e6 ba		      INC	_MLSet_Tone_Flip_Cntr_Tmp
   5001  156f				   .
   5002  156f							; 
   5003  156f
   5004  156f				   .
   5005  156f							; 
   5006  156f
   5007  156f				   .
   5008  156f							; 
   5009  156f
   5010  156f				   .
   5011  156f							; 
   5012  156f
   5013  156f				   .L0267		;  if _MLSet_Tone_Flip_Cntr_Tmp{0} then AUDC0	=  14
   5014  156f
   5015  156f		       a5 ba		      LDA	_MLSet_Tone_Flip_Cntr_Tmp
   5016  1571		       4a		      LSR
   5017  1572		       90 04		      BCC	.skipL0267
   5018  1574				   .condpart29
   5019  1574		       a9 0e		      LDA	#14
   5020  1576		       85 15		      STA	AUDC0
   5021  1578				   .skipL0267
   5022  1578				   .
   5023  1578							; 
   5024  1578
   5025  1578				   .
   5026  1578							; 
   5027  1578
   5028  1578				   .
   5029  1578							; 
   5030  1578
   5031  1578				   .
   5032  1578							; 
   5033  1578
   5034  1578				   .L0268		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   5035  1578
   5036  1578		       e6 dc		      INC	_Ch0_Counter
   5037  157a				   .
   5038  157a							; 
   5039  157a
   5040  157a				   .
   5041  157a							; 
   5042  157a
   5043  157a				   .
   5044  157a							; 
   5045  157a
   5046  157a				   .
   5047  157a							; 
   5048  157a
   5049  157a				   .L0269		;  if _Ch0_Counter  =	31 then AUDV0  =  0  :	_Ch1_Sound  =  0  :  _Ch0_Counter  =  0
   5050  157a
   5051  157a		       a5 dc		      LDA	_Ch0_Counter
   5052  157c		       c9 1f		      CMP	#31
   5053  157e		       d0 08		      BNE	.skipL0269
   5054  1580				   .condpart30
   5055  1580		       a9 00		      LDA	#0
   5056  1582		       85 19		      STA	AUDV0
   5057  1584		       85 dd		      STA	_Ch1_Sound
   5058  1586		       85 dc		      STA	_Ch0_Counter
   5059  1588				   .skipL0269
   5060  1588				   .
   5061  1588							; 
   5062  1588
   5063  1588				   .
   5064  1588							; 
   5065  1588
   5066  1588				   .
   5067  1588							; 
   5068  1588
   5069  1588				   .
   5070  1588							; 
   5071  1588
   5072  1588				   .L0270		;  AUDF0  =  _Ch0_Counter
   5073  1588
   5074  1588		       a5 dc		      LDA	_Ch0_Counter
   5075  158a		       85 17		      STA	AUDF0
   5076  158c				   .
   5077  158c							; 
   5078  158c
   5079  158c				   .__Skip_Close_In_Sound
   5080  158c							; __Skip_Close_In_Sound
   5081  158c
   5082  158c				   .
   5083  158c							; 
   5084  158c
   5085  158c				   .
   5086  158c							; 
   5087  158c
   5088  158c				   .
   5089  158c							; 
   5090  158c
   5091  158c				   .
   5092  158c							; 
   5093  158c
   5094  158c				   .
   5095  158c							; 
   5096  158c
   5097  158c				   .
   5098  158c							; 
   5099  158c
   5100  158c				   .
   5101  158c							; 
   5102  158c
   5103  158c				   .L0271		;  pfcolors:
   5104  158c
   5105  158c		       a9 ce		      lda	# $CE
   5106  158e		       85 08		      sta	COLUPF
   5107  1590				  -	      ifconst	pfres
   5108  1590				  -	      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   5109  1590					      else
   5110  1590		       a9 f6		      lda	#>(pfcolorlabel13-83)
   5111  1592					      endif
   5112  1592		       85 f1		      sta	pfcolortable+1
   5113  1594				  -	      ifconst	pfres
   5114  1594				  -	      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   5115  1594					      else
   5116  1594		       a9 3f		      lda	#<(pfcolorlabel13-83)
   5117  1596					      endif
   5118  1596		       85 f0		      sta	pfcolortable
   5119  1598				   .
   5120  1598							; 
   5121  1598
   5122  1598				   .
   5123  1598							; 
   5124  1598
   5125  1598				   .
   5126  1598							; 
   5127  1598
   5128  1598				   .
   5129  1598							; 
   5130  1598
   5131  1598				   .
   5132  1598							; 
   5133  1598
   5134  1598				   .
   5135  1598							; 
   5136  1598
   5137  1598				   .
   5138  1598							; 
   5139  1598
   5140  1598				   .L0272		;  if ballx  <  150 then COLUP0  =  $C4
   5141  1598
   5142  1598		       a5 84		      LDA	ballx
   5143  159a		       c9 96		      CMP	#150
   5144  159c		       b0 04		      BCS	.skipL0272
   5145  159e				   .condpart31
   5146  159e		       a9 c4		      LDA	#$C4
   5147  15a0		       85 06		      STA	COLUP0
   5148  15a2				   .skipL0272
   5149  15a2				   .
   5150  15a2							; 
   5151  15a2
   5152  15a2				   .
   5153  15a2							; 
   5154  15a2
   5155  15a2				   .
   5156  15a2							; 
   5157  15a2
   5158  15a2				   .
   5159  15a2							; 
   5160  15a2
   5161  15a2				   .
   5162  15a2							; 
   5163  15a2
   5164  15a2				   .
   5165  15a2							; 
   5166  15a2
   5167  15a2				   .
   5168  15a2							; 
   5169  15a2
   5170  15a2				   .L0273		;  drawscreen
   5171  15a2
   5172  15a2		       85 ee		      sta	temp7
   5173  15a4		       a9 15		      lda	#>(ret_point10-1)
   5174  15a6		       48		      pha
   5175  15a7		       a9 b9		      lda	#<(ret_point10-1)
   5176  15a9		       48		      pha
   5177  15aa		       a9 f5		      lda	#>(drawscreen-1)
   5178  15ac		       48		      pha
   5179  15ad		       a9 86		      lda	#<(drawscreen-1)
   5180  15af		       48		      pha
   5181  15b0		       a5 ee		      lda	temp7
   5182  15b2		       48		      pha
   5183  15b3		       8a		      txa
   5184  15b4		       48		      pha
   5185  15b5		       a2 08		      ldx	#8
   5186  15b7		       4c eb ff 	      jmp	BS_jsr
   5187  15ba				   ret_point10
   5188  15ba				   .
   5189  15ba							; 
   5190  15ba
   5191  15ba				   .
   5192  15ba							; 
   5193  15ba
   5194  15ba				   .
   5195  15ba							; 
   5196  15ba
   5197  15ba				   .
   5198  15ba							; 
   5199  15ba
   5200  15ba				   .
   5201  15ba							; 
   5202  15ba
   5203  15ba				   .
   5204  15ba							; 
   5205  15ba
   5206  15ba				   .
   5207  15ba							; 
   5208  15ba
   5209  15ba				   .L0274		;  if _MLSetup_Tmp_Close_In_Counter  <  4 then goto __Close_In_Loop
   5210  15ba
   5211  15ba		       a5 bb		      LDA	_MLSetup_Tmp_Close_In_Counter
   5212  15bc		       c9 04		      CMP	#4
   5213  15be		       b0 03		      BCS	.skipL0274
   5214  15c0				   .condpart32
   5215  15c0		       4c d1 14 	      jmp	.__Close_In_Loop
   5216  15c3
   5217  15c3				   .skipL0274
   5218  15c3				   .
   5219  15c3							; 
   5220  15c3
   5221  15c3				   .
   5222  15c3							; 
   5223  15c3
   5224  15c3				   .
   5225  15c3							; 
   5226  15c3
   5227  15c3				   .
   5228  15c3							; 
   5229  15c3
   5230  15c3				   .
   5231  15c3							; 
   5232  15c3
   5233  15c3				   .
   5234  15c3							; 
   5235  15c3
   5236  15c3				   .
   5237  15c3							; 
   5238  15c3
   5239  15c3				   .L0275		;  if _Ch0_Counter  <	30 then goto __Close_In_Loop
   5240  15c3
   5241  15c3		       a5 dc		      LDA	_Ch0_Counter
   5242  15c5		       c9 1e		      CMP	#30
   5243  15c7		       b0 03		      BCS	.skipL0275
   5244  15c9				   .condpart33
   5245  15c9		       4c d1 14 	      jmp	.__Close_In_Loop
   5246  15cc
   5247  15cc				   .skipL0275
   5248  15cc				   .
   5249  15cc							; 
   5250  15cc
   5251  15cc				   .
   5252  15cc							; 
   5253  15cc
   5254  15cc				   .
   5255  15cc							; 
   5256  15cc
   5257  15cc				   .
   5258  15cc							; 
   5259  15cc
   5260  15cc				   .
   5261  15cc							; 
   5262  15cc
   5263  15cc				   .
   5264  15cc							; 
   5265  15cc
   5266  15cc				   .
   5267  15cc							; 
   5268  15cc
   5269  15cc				   .L0276		;  gosub __Clear_and_Set
   5270  15cc
   5271  15cc		       20 7f 16 	      jsr	.__Clear_and_Set
   5272  15cf
   5273  15cf				   .
   5274  15cf							; 
   5275  15cf
   5276  15cf				   .
   5277  15cf							; 
   5278  15cf
   5279  15cf				   .
   5280  15cf							; 
   5281  15cf
   5282  15cf				   .
   5283  15cf							; 
   5284  15cf
   5285  15cf				   .
   5286  15cf							; 
   5287  15cf
   5288  15cf				   .
   5289  15cf							; 
   5290  15cf
   5291  15cf				   .
   5292  15cf							; 
   5293  15cf
   5294  15cf				   .L0277		;  _Bit1_Auto_Play{1}	=  0
   5295  15cf
   5296  15cf		       a5 d2		      LDA	_Bit1_Auto_Play
   5297  15d1		       29 fd		      AND	#253
   5298  15d3		       85 d2		      STA	_Bit1_Auto_Play
   5299  15d5				   .
   5300  15d5							; 
   5301  15d5
   5302  15d5				   .
   5303  15d5							; 
   5304  15d5
   5305  15d5				   .
   5306  15d5							; 
   5307  15d5
   5308  15d5				   .
   5309  15d5							; 
   5310  15d5
   5311  15d5				   .
   5312  15d5							; 
   5313  15d5
   5314  15d5				   .
   5315  15d5							; 
   5316  15d5
   5317  15d5				   .
   5318  15d5							; 
   5319  15d5
   5320  15d5				   .L0278		;  player1y  =  200
   5321  15d5
   5322  15d5		       a9 c8		      LDA	#200
   5323  15d7		       85 86		      STA	player1y
   5324  15d9				   .
   5325  15d9							; 
   5326  15d9
   5327  15d9				   .
   5328  15d9							; 
   5329  15d9
   5330  15d9				   .
   5331  15d9							; 
   5332  15d9
   5333  15d9				   .
   5334  15d9							; 
   5335  15d9
   5336  15d9				   .
   5337  15d9							; 
   5338  15d9
   5339  15d9				   .
   5340  15d9							; 
   5341  15d9
   5342  15d9				   .
   5343  15d9							; 
   5344  15d9
   5345  15d9				   .L0279		;  player1:
   5346  15d9
   5347  15d9		       a2 cd		      LDX	#<playerL0279_1
   5348  15db		       86 8c		      STX	player1pointerlo
   5349  15dd		       a9 f7		      LDA	#>playerL0279_1
   5350  15df		       85 8d		      STA	player1pointerhi
   5351  15e1		       a9 00		      LDA	#0
   5352  15e3		       85 8f		      STA	player1height
   5353  15e5				   .
   5354  15e5							; 
   5355  15e5
   5356  15e5				   .
   5357  15e5							; 
   5358  15e5
   5359  15e5				   .
   5360  15e5							; 
   5361  15e5
   5362  15e5				   .
   5363  15e5							; 
   5364  15e5
   5365  15e5				   .
   5366  15e5							; 
   5367  15e5
   5368  15e5				   .
   5369  15e5							; 
   5370  15e5
   5371  15e5				   .
   5372  15e5							; 
   5373  15e5
   5374  15e5				   .L0280		;  _SC_Back  =  $C8
   5375  15e5
   5376  15e5		       a9 c8		      LDA	#$C8
   5377  15e7		       85 d1		      STA	_SC_Back
   5378  15e9				   .
   5379  15e9							; 
   5380  15e9
   5381  15e9				   .
   5382  15e9							; 
   5383  15e9
   5384  15e9				   .
   5385  15e9							; 
   5386  15e9
   5387  15e9				   .
   5388  15e9							; 
   5389  15e9
   5390  15e9				   .
   5391  15e9							; 
   5392  15e9
   5393  15e9				   .
   5394  15e9							; 
   5395  15e9
   5396  15e9				   .
   5397  15e9							; 
   5398  15e9
   5399  15e9				   .
   5400  15e9							; 
   5401  15e9
   5402  15e9				   .
   5403  15e9							; 
   5404  15e9
   5405  15e9				   .
   5406  15e9							; 
   5407  15e9
   5408  15e9				   .
   5409  15e9							; 
   5410  15e9
   5411  15e9				   .
   5412  15e9							; 
   5413  15e9
   5414  15e9				   .
   5415  15e9							; 
   5416  15e9
   5417  15e9				   .__Main_Loop_Setup_02
   5418  15e9							; __Main_Loop_Setup_02
   5419  15e9
   5420  15e9				   .
   5421  15e9							; 
   5422  15e9
   5423  15e9				   .
   5424  15e9							; 
   5425  15e9
   5426  15e9				   .
   5427  15e9							; 
   5428  15e9
   5429  15e9				   .
   5430  15e9							; 
   5431  15e9
   5432  15e9				   .
   5433  15e9							; 
   5434  15e9
   5435  15e9				   .
   5436  15e9							; 
   5437  15e9
   5438  15e9				   .L0281		;  pfcolors:
   5439  15e9
   5440  15e9		       a9 ce		      lda	# $CE
   5441  15eb		       85 08		      sta	COLUPF
   5442  15ed				  -	      ifconst	pfres
   5443  15ed				  -	      lda	#>(pfcolorlabel13-130+pfres*pfwidth)
   5444  15ed					      else
   5445  15ed		       a9 f6		      lda	#>(pfcolorlabel13-82)
   5446  15ef					      endif
   5447  15ef		       85 f1		      sta	pfcolortable+1
   5448  15f1				  -	      ifconst	pfres
   5449  15f1				  -	      lda	#<(pfcolorlabel13-130+pfres*pfwidth)
   5450  15f1					      else
   5451  15f1		       a9 40		      lda	#<(pfcolorlabel13-82)
   5452  15f3					      endif
   5453  15f3		       85 f0		      sta	pfcolortable
   5454  15f5				   .
   5455  15f5							; 
   5456  15f5
   5457  15f5				   .
   5458  15f5							; 
   5459  15f5
   5460  15f5				   .
   5461  15f5							; 
   5462  15f5
   5463  15f5				   .
   5464  15f5							; 
   5465  15f5
   5466  15f5				   .
   5467  15f5							; 
   5468  15f5
   5469  15f5				   .
   5470  15f5							; 
   5471  15f5
   5472  15f5				   .L0282		;  pfscore1  =  255  :  pfscore2  =  255  :  pfscorecolor  =  $AE
   5473  15f5
   5474  15f5		       a9 ff		      LDA	#255
   5475  15f7		       85 f2		      STA	pfscore1
   5476  15f9		       85 f3		      STA	pfscore2
   5477  15fb		       a9 ae		      LDA	#$AE
   5478  15fd		       85 f4		      STA	pfscorecolor
   5479  15ff				   .
   5480  15ff							; 
   5481  15ff
   5482  15ff				   .
   5483  15ff							; 
   5484  15ff
   5485  15ff				   .
   5486  15ff							; 
   5487  15ff
   5488  15ff				   .
   5489  15ff							; 
   5490  15ff
   5491  15ff				   .
   5492  15ff							; 
   5493  15ff
   5494  15ff				   .
   5495  15ff							; 
   5496  15ff
   5497  15ff				   .
   5498  15ff							; 
   5499  15ff
   5500  15ff				   .L0283		;  CTRLPF  =  $25
   5501  15ff
   5502  15ff		       a9 25		      LDA	#$25
   5503  1601		       85 0a		      STA	CTRLPF
   5504  1603				   .
   5505  1603							; 
   5506  1603
   5507  1603				   .
   5508  1603							; 
   5509  1603
   5510  1603				   .
   5511  1603							; 
   5512  1603
   5513  1603				   .
   5514  1603							; 
   5515  1603
   5516  1603				   .
   5517  1603							; 
   5518  1603
   5519  1603				   .
   5520  1603							; 
   5521  1603
   5522  1603				   .L0284		;  player0x  =  80  :	player0y  =  0
   5523  1603
   5524  1603		       a9 50		      LDA	#80
   5525  1605		       85 80		      STA	player0x
   5526  1607		       a9 00		      LDA	#0
   5527  1609		       85 85		      STA	player0y
   5528  160b				   .
   5529  160b							; 
   5530  160b
   5531  160b				   .
   5532  160b							; 
   5533  160b
   5534  160b				   .
   5535  160b							; 
   5536  160b
   5537  160b				   .
   5538  160b							; 
   5539  160b
   5540  160b				   .
   5541  160b							; 
   5542  160b
   5543  160b				   .
   5544  160b							; 
   5545  160b
   5546  160b				   .L0285		;  _Bit4_Game_Started{4}  =  1  :  _Bit1_Ship_Restrainer_D{1}	=  1  :  _Bit1_FireB_Restrainer{1}  =  1  :  _Bit0_Reset_Restrainer{0}	=  1
   5547  160b
   5548  160b		       a5 c4		      LDA	_Bit4_Game_Started
   5549  160d		       09 10		      ORA	#16
   5550  160f		       85 c4		      STA	_Bit4_Game_Started
   5551  1611		       a5 c3		      LDA	_Bit1_Ship_Restrainer_D
   5552  1613		       09 02		      ORA	#2
   5553  1615		       85 c3		      STA	_Bit1_Ship_Restrainer_D
   5554  1617		       a5 c4		      LDA	_Bit1_FireB_Restrainer
   5555  1619		       09 02		      ORA	#2
   5556  161b		       85 c4		      STA	_Bit1_FireB_Restrainer
   5557  161d		       a5 c4		      LDA	_Bit0_Reset_Restrainer
   5558  161f		       09 01		      ORA	#1
   5559  1621		       85 c4		      STA	_Bit0_Reset_Restrainer
   5560  1623				   .
   5561  1623							; 
   5562  1623
   5563  1623				   .
   5564  1623							; 
   5565  1623
   5566  1623				   .
   5567  1623							; 
   5568  1623
   5569  1623				   .
   5570  1623							; 
   5571  1623
   5572  1623				   .
   5573  1623							; 
   5574  1623
   5575  1623				   .
   5576  1623							; 
   5577  1623
   5578  1623				   .L0286		;  _Bit0_Pause_Position{0}  =	0
   5579  1623
   5580  1623		       a5 c7		      LDA	_Bit0_Pause_Position
   5581  1625		       29 fe		      AND	#254
   5582  1627		       85 c7		      STA	_Bit0_Pause_Position
   5583  1629				   .
   5584  1629							; 
   5585  1629
   5586  1629				   .L0287		;  if switchbw then _Bit0_Pause_Position{0}  =  1
   5587  1629
   5588  1629		       a9 08		      lda	#8
   5589  162b		       2c 82 02 	      bit	SWCHB
   5590  162e		       d0 06		      BNE	.skipL0287
   5591  1630				   .condpart34
   5592  1630		       a5 c7		      LDA	_Bit0_Pause_Position
   5593  1632		       09 01		      ORA	#1
   5594  1634		       85 c7		      STA	_Bit0_Pause_Position
   5595  1636				   .skipL0287
   5596  1636				   .
   5597  1636							; 
   5598  1636
   5599  1636				   .
   5600  1636							; 
   5601  1636
   5602  1636				   .
   5603  1636							; 
   5604  1636
   5605  1636				   .
   5606  1636							; 
   5607  1636
   5608  1636				   .
   5609  1636							; 
   5610  1636
   5611  1636				   .
   5612  1636							; 
   5613  1636
   5614  1636				   .L0288		;  _Ch1_Sound	=  _c_Ship_Drop_In  :  _Ch1_Counter  =	0  :  _Ch1_Duration  =	1
   5615  1636
   5616  1636		       a9 01		      LDA	#_c_Ship_Drop_In
   5617  1638		       85 dd		      STA	_Ch1_Sound
   5618  163a		       a9 00		      LDA	#0
   5619  163c		       85 df		      STA	_Ch1_Counter
   5620  163e		       a9 01		      LDA	#1
   5621  1640		       85 de		      STA	_Ch1_Duration
   5622  1642				   .
   5623  1642							; 
   5624  1642
   5625  1642				   .
   5626  1642							; 
   5627  1642
   5628  1642				   .
   5629  1642							; 
   5630  1642
   5631  1642				   .
   5632  1642							; 
   5633  1642
   5634  1642				   .
   5635  1642							; 
   5636  1642
   5637  1642				   .
   5638  1642							; 
   5639  1642
   5640  1642				   .
   5641  1642							; 
   5642  1642
   5643  1642				   .
   5644  1642							; 
   5645  1642
   5646  1642				   .
   5647  1642							; 
   5648  1642
   5649  1642				   .L0289		;  if !_Bit1_Auto_Play{1} then score  =  0  :	goto __AP_Skip_AP_Setup
   5650  1642
   5651  1642		       a5 d2		      LDA	_Bit1_Auto_Play
   5652  1644		       29 02		      AND	#2
   5653  1646		       d0 0f		      BNE	.skipL0289
   5654  1648				   .condpart35
   5655  1648		       a9 00		      LDA	#$00
   5656  164a		       85 95		      STA	score+2
   5657  164c		       a9 00		      LDA	#$00
   5658  164e		       85 94		      STA	score+1
   5659  1650		       a9 00		      LDA	#$00
   5660  1652		       85 93		      STA	score
   5661  1654		       4c 6d 16 	      jmp	.__AP_Skip_AP_Setup
   5662  1657
   5663  1657				   .skipL0289
   5664  1657				   .
   5665  1657							; 
   5666  1657
   5667  1657				   .
   5668  1657							; 
   5669  1657
   5670  1657				   .
   5671  1657							; 
   5672  1657
   5673  1657				   .
   5674  1657							; 
   5675  1657
   5676  1657				   .L0290		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   5677  1657
   5678  1657		       a5 93		      LDA	_sc1
   5679  1659		       85 a8		      STA	_Score1_Mem
   5680  165b		       a5 94		      LDA	_sc2
   5681  165d		       85 a9		      STA	_Score2_Mem
   5682  165f		       a5 95		      LDA	_sc3
   5683  1661		       85 aa		      STA	_Score3_Mem
   5684  1663				   .
   5685  1663							; 
   5686  1663
   5687  1663				   .L0291		;  _MLSet_Tone_Flip_Cntr_Tmp  =  0  :	_Bit6_Swap_Scores{6}  =  0
   5688  1663
   5689  1663		       a9 00		      LDA	#0
   5690  1665		       85 ba		      STA	_MLSet_Tone_Flip_Cntr_Tmp
   5691  1667		       a5 c4		      LDA	_Bit6_Swap_Scores
   5692  1669		       29 bf		      AND	#191
   5693  166b		       85 c4		      STA	_Bit6_Swap_Scores
   5694  166d				   .
   5695  166d							; 
   5696  166d
   5697  166d				   .__AP_Skip_AP_Setup
   5698  166d							; __AP_Skip_AP_Setup
   5699  166d
   5700  166d				   .
   5701  166d							; 
   5702  166d
   5703  166d				   .
   5704  166d							; 
   5705  166d
   5706  166d				   .L0292		;  goto __Main_Loop bank2
   5707  166d
   5708  166d		       85 ee		      sta	temp7
   5709  166f		       a9 30		      lda	#>(.__Main_Loop-1)
   5710  1671		       48		      pha
   5711  1672		       a9 ff		      lda	#<(.__Main_Loop-1)
   5712  1674		       48		      pha
   5713  1675		       a5 ee		      lda	temp7
   5714  1677		       48		      pha
   5715  1678		       8a		      txa
   5716  1679		       48		      pha
   5717  167a		       a2 02		      ldx	#2
   5718  167c		       4c eb ff 	      jmp	BS_jsr
   5719  167f				   .
   5720  167f							; 
   5721  167f
   5722  167f				   .
   5723  167f							; 
   5724  167f
   5725  167f				   .
   5726  167f							; 
   5727  167f
   5728  167f				   .
   5729  167f							; 
   5730  167f
   5731  167f				   .
   5732  167f							; 
   5733  167f
   5734  167f				   .
   5735  167f							; 
   5736  167f
   5737  167f				   .
   5738  167f							; 
   5739  167f
   5740  167f				   .
   5741  167f							; 
   5742  167f
   5743  167f				   .
   5744  167f							; 
   5745  167f
   5746  167f				   .
   5747  167f							; 
   5748  167f
   5749  167f				   .
   5750  167f							; 
   5751  167f
   5752  167f				   .
   5753  167f							; 
   5754  167f
   5755  167f				   .
   5756  167f							; 
   5757  167f
   5758  167f				   .
   5759  167f							; 
   5760  167f
   5761  167f				   .__Clear_and_Set
   5762  167f							; __Clear_and_Set
   5763  167f
   5764  167f				   .
   5765  167f							; 
   5766  167f
   5767  167f				   .
   5768  167f							; 
   5769  167f
   5770  167f				   .
   5771  167f							; 
   5772  167f
   5773  167f				   .
   5774  167f							; 
   5775  167f
   5776  167f				   .L0293		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   5777  167f
   5778  167f		       a9 00		      LDA	#0
   5779  1681		       85 d4		      STA	a
   5780  1683		       85 d5		      STA	b
   5781  1685		       85 d6		      STA	c
   5782  1687		       85 d7		      STA	d
   5783  1689		       85 d8		      STA	e
   5784  168b		       85 d9		      STA	f
   5785  168d		       85 da		      STA	g
   5786  168f		       85 db		      STA	h
   5787  1691		       85 dc		      STA	i
   5788  1693				   .L0294		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   5789  1693
   5790  1693		       a9 00		      LDA	#0
   5791  1695		       85 dd		      STA	j
   5792  1697		       85 de		      STA	k
   5793  1699		       85 df		      STA	l
   5794  169b		       85 e0		      STA	m
   5795  169d		       85 e1		      STA	n
   5796  169f		       85 e2		      STA	o
   5797  16a1		       85 e3		      STA	p
   5798  16a3		       85 e4		      STA	q
   5799  16a5		       85 e5		      STA	r
   5800  16a7				   .L0295		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0
   5801  16a7
   5802  16a7		       a9 00		      LDA	#0
   5803  16a9		       85 e6		      STA	s
   5804  16ab		       85 e7		      STA	t
   5805  16ad		       85 e8		      STA	u
   5806  16af		       85 e9		      STA	v
   5807  16b1		       85 ea		      STA	w
   5808  16b3		       85 eb		      STA	x
   5809  16b5		       85 ec		      STA	y
   5810  16b7		       85 ed		      STA	z
   5811  16b9				   .
   5812  16b9							; 
   5813  16b9
   5814  16b9				   .L0296		;  var4  =  0	:  var5  =  0  :  var6	=  0  :  var7  =  0  :	var8  =  0
   5815  16b9
   5816  16b9		       a9 00		      LDA	#0
   5817  16bb		       85 a8		      STA	var4
   5818  16bd		       85 a9		      STA	var5
   5819  16bf		       85 aa		      STA	var6
   5820  16c1		       85 ab		      STA	var7
   5821  16c3		       85 ac		      STA	var8
   5822  16c5				   .L0297		;  var9  =  0	:  var10  =  0	:  var11  =  0	:  var12  =  0	:  var13  =  0	:  var14  =  0
   5823  16c5
   5824  16c5		       a9 00		      LDA	#0
   5825  16c7		       85 ad		      STA	var9
   5826  16c9		       85 ae		      STA	var10
   5827  16cb		       85 af		      STA	var11
   5828  16cd		       85 b0		      STA	var12
   5829  16cf		       85 b1		      STA	var13
   5830  16d1		       85 b2		      STA	var14
   5831  16d3				   .L0298		;  var15  =  0  :  var16  =  0  :  var17  =  0  :  var18  =  0  :  var19  =  0  :  var20  =  0
   5832  16d3
   5833  16d3		       a9 00		      LDA	#0
   5834  16d5		       85 b3		      STA	var15
   5835  16d7		       85 b4		      STA	var16
   5836  16d9		       85 b5		      STA	var17
   5837  16db		       85 b6		      STA	var18
   5838  16dd		       85 b7		      STA	var19
   5839  16df		       85 b8		      STA	var20
   5840  16e1				   .L0299		;  var21  =  0  :  var22  =  0  :  var23  =  0  :  var24  =  0  :  var25  =  0  :  var26  =  0
   5841  16e1
   5842  16e1		       a9 00		      LDA	#0
   5843  16e3		       85 b9		      STA	var21
   5844  16e5		       85 ba		      STA	var22
   5845  16e7		       85 bb		      STA	var23
   5846  16e9		       85 bc		      STA	var24
   5847  16eb		       85 bd		      STA	var25
   5848  16ed		       85 be		      STA	var26
   5849  16ef				   .L0300		;  var27  =  0  :  var28  =  0  :  var29  =  0  :  var30  =  0  :  var31  =  0  :  var32  =  0
   5850  16ef
   5851  16ef		       a9 00		      LDA	#0
   5852  16f1		       85 bf		      STA	var27
   5853  16f3		       85 c0		      STA	var28
   5854  16f5		       85 c1		      STA	var29
   5855  16f7		       85 c2		      STA	var30
   5856  16f9		       85 c3		      STA	var31
   5857  16fb		       85 c4		      STA	var32
   5858  16fd				   .L0301		;  var33  =  0  :  var34  =  0  :  var35  =  0  :  var36  =  0  :  var37  =  0  :  var38  =  0
   5859  16fd
   5860  16fd		       a9 00		      LDA	#0
   5861  16ff		       85 c5		      STA	var33
   5862  1701		       85 c6		      STA	var34
   5863  1703		       85 c7		      STA	var35
   5864  1705		       85 c8		      STA	var36
   5865  1707		       85 c9		      STA	var37
   5866  1709		       85 ca		      STA	var38
   5867  170b				   .L0302		;  var39  =  0  :  var40  =  0  :  var41  =  0  :  var42  =  0  :  var43  =  0
   5868  170b
   5869  170b		       a9 00		      LDA	#0
   5870  170d		       85 cb		      STA	var39
   5871  170f		       85 cc		      STA	var40
   5872  1711		       85 cd		      STA	var41
   5873  1713		       85 ce		      STA	var42
   5874  1715		       85 cf		      STA	var43
   5875  1717				   .
   5876  1717							; 
   5877  1717
   5878  1717				   .
   5879  1717							; 
   5880  1717
   5881  1717				   .
   5882  1717							; 
   5883  1717
   5884  1717				   .
   5885  1717							; 
   5886  1717
   5887  1717				   .L0303		;  missile0y  =  200  :  bally  =  200
   5888  1717
   5889  1717		       a9 c8		      LDA	#200
   5890  1719		       85 91		      STA	missile0y
   5891  171b		       85 89		      STA	bally
   5892  171d				   .
   5893  171d							; 
   5894  171d
   5895  171d				   .
   5896  171d							; 
   5897  171d
   5898  171d				   .
   5899  171d							; 
   5900  171d
   5901  171d				   .
   5902  171d							; 
   5903  171d
   5904  171d				   .L0304		;  missile0height  =  1
   5905  171d
   5906  171d		       a9 01		      LDA	#1
   5907  171f		       85 90		      STA	missile0height
   5908  1721				   .
   5909  1721							; 
   5910  1721
   5911  1721				   .
   5912  1721							; 
   5913  1721
   5914  1721				   .
   5915  1721							; 
   5916  1721
   5917  1721				   .
   5918  1721							; 
   5919  1721
   5920  1721				   .L0305		;  ballheight	=  100
   5921  1721
   5922  1721		       a9 64		      LDA	#100
   5923  1723		       85 92		      STA	ballheight
   5924  1725				   .
   5925  1725							; 
   5926  1725
   5927  1725				   .
   5928  1725							; 
   5929  1725
   5930  1725				   .
   5931  1725							; 
   5932  1725
   5933  1725				   .
   5934  1725							; 
   5935  1725
   5936  1725				   .L0306		;  scorecolor	=  28
   5937  1725
   5938  1725		       a9 1c		      LDA	#28
   5939  1727		       85 a3		      STA	scorecolor
   5940  1729				   .
   5941  1729							; 
   5942  1729
   5943  1729				   .
   5944  1729							; 
   5945  1729
   5946  1729				   .
   5947  1729							; 
   5948  1729
   5949  1729				   .
   5950  1729							; 
   5951  1729
   5952  1729				   .L0307		;  AUDV0  =  0  :  AUDV1  =  0
   5953  1729
   5954  1729		       a9 00		      LDA	#0
   5955  172b		       85 19		      STA	AUDV0
   5956  172d		       85 1a		      STA	AUDV1
   5957  172f				   .
   5958  172f							; 
   5959  172f
   5960  172f				   .
   5961  172f							; 
   5962  172f
   5963  172f				   .
   5964  172f							; 
   5965  172f
   5966  172f				   .
   5967  172f							; 
   5968  172f
   5969  172f				   .
   5970  172f							; 
   5971  172f
   5972  172f				   .
   5973  172f							; 
   5974  172f
   5975  172f				   .L0308		;  _Plop_Rate	=  1  :  _Plop_Timer  =  1
   5976  172f
   5977  172f		       a9 01		      LDA	#1
   5978  1731		       85 e3		      STA	_Plop_Rate
   5979  1733		       85 bf		      STA	_Plop_Timer
   5980  1735				   .
   5981  1735							; 
   5982  1735
   5983  1735				   .L0309		;  return thisbank
   5984  1735
   5985  1735		       60		      RTS
   5986  1736				   .
   5987  1736							; 
   5988  1736
   5989  1736				   .
   5990  1736							; 
   5991  1736
   5992  1736				   .
   5993  1736							; 
   5994  1736
   5995  1736				   .
   5996  1736							; 
   5997  1736
   5998  1736				   .
   5999  1736							; 
   6000  1736
   6001  1736				   .
   6002  1736							; 
   6003  1736
   6004  1736				   .
   6005  1736							; 
   6006  1736
   6007  1736				   .
   6008  1736							; 
   6009  1736
   6010  1736				   .
   6011  1736							; 
   6012  1736
   6013  1736				   .
   6014  1736							; 
   6015  1736
   6016  1736				   .__Pause_Setup
   6017  1736							; __Pause_Setup
   6018  1736
   6019  1736				   .
   6020  1736							; 
   6021  1736
   6022  1736				   .
   6023  1736							; 
   6024  1736
   6025  1736				   .
   6026  1736							; 
   6027  1736
   6028  1736				   .
   6029  1736							; 
   6030  1736
   6031  1736				   .
   6032  1736							; 
   6033  1736
   6034  1736				   .
   6035  1736							; 
   6036  1736
   6037  1736				   .
   6038  1736							; 
   6039  1736
   6040  1736				   .
   6041  1736							; 
   6042  1736
   6043  1736				   .
   6044  1736							; 
   6045  1736
   6046  1736				   .L0310		;  _Pause_Mem_Sprite1_UD  =  _P1_Up_Down
   6047  1736
   6048  1736		       a5 86		      LDA	_P1_Up_Down
   6049  1738		       85 ac		      STA	_Pause_Mem_Sprite1_UD
   6050  173a				   .L0311		;  _Pause_Mem_Sprite1_LR  =  _P1_Left_Right
   6051  173a
   6052  173a		       a5 81		      LDA	_P1_Left_Right
   6053  173c		       85 ad		      STA	_Pause_Mem_Sprite1_LR
   6054  173e				   .
   6055  173e							; 
   6056  173e
   6057  173e				   .
   6058  173e							; 
   6059  173e
   6060  173e				   .
   6061  173e							; 
   6062  173e
   6063  173e				   .
   6064  173e							; 
   6065  173e
   6066  173e				   .L0312		;  _Pause_Mem_Missile0y  =  missile0y
   6067  173e
   6068  173e		       a5 91		      LDA	missile0y
   6069  1740		       85 b3		      STA	_Pause_Mem_Missile0y
   6070  1742				   .
   6071  1742							; 
   6072  1742
   6073  1742				   .
   6074  1742							; 
   6075  1742
   6076  1742				   .
   6077  1742							; 
   6078  1742
   6079  1742				   .
   6080  1742							; 
   6081  1742
   6082  1742				   .L0313		;  _Pause_Mem_Health_Color  =	pfscorecolor
   6083  1742
   6084  1742		       a5 f4		      LDA	pfscorecolor
   6085  1744		       85 ae		      STA	_Pause_Mem_Health_Color
   6086  1746				   .L0314		;  _Pause_Mem_Score_Color  =  scorecolor
   6087  1746
   6088  1746		       a5 a3		      LDA	scorecolor
   6089  1748		       85 b0		      STA	_Pause_Mem_Score_Color
   6090  174a				   .L0315		;  _Pause_Mem_SCBack_Color  =	_SC_Back
   6091  174a
   6092  174a		       a5 d1		      LDA	_SC_Back
   6093  174c		       85 af		      STA	_Pause_Mem_SCBack_Color
   6094  174e				   .
   6095  174e							; 
   6096  174e
   6097  174e				   .
   6098  174e							; 
   6099  174e
   6100  174e				   .
   6101  174e							; 
   6102  174e
   6103  174e				   .
   6104  174e							; 
   6105  174e
   6106  174e				   .
   6107  174e							; 
   6108  174e
   6109  174e				   .
   6110  174e							; 
   6111  174e
   6112  174e				   .L0316		;  player1y  =  200  :  missile0y  =  250
   6113  174e
   6114  174e		       a9 c8		      LDA	#200
   6115  1750		       85 86		      STA	player1y
   6116  1752		       a9 fa		      LDA	#250
   6117  1754		       85 91		      STA	missile0y
   6118  1756				   .
   6119  1756							; 
   6120  1756
   6121  1756				   .
   6122  1756							; 
   6123  1756
   6124  1756				   .
   6125  1756							; 
   6126  1756
   6127  1756				   .
   6128  1756							; 
   6129  1756
   6130  1756				   .
   6131  1756							; 
   6132  1756
   6133  1756				   .
   6134  1756							; 
   6135  1756
   6136  1756				   .L0317		;  AUDV0  =  0  :  AUDV1  =  0
   6137  1756
   6138  1756		       a9 00		      LDA	#0
   6139  1758		       85 19		      STA	AUDV0
   6140  175a		       85 1a		      STA	AUDV1
   6141  175c				   .
   6142  175c							; 
   6143  175c
   6144  175c				   .
   6145  175c							; 
   6146  175c
   6147  175c				   .
   6148  175c							; 
   6149  175c
   6150  175c				   .
   6151  175c							; 
   6152  175c
   6153  175c				   .
   6154  175c							; 
   6155  175c
   6156  175c				   .
   6157  175c							; 
   6158  175c
   6159  175c				   .L0318		;  _Bit1_FireB_Restrainer{1}  =  1
   6160  175c
   6161  175c		       a5 c4		      LDA	_Bit1_FireB_Restrainer
   6162  175e		       09 02		      ORA	#2
   6163  1760		       85 c4		      STA	_Bit1_FireB_Restrainer
   6164  1762				   .
   6165  1762							; 
   6166  1762
   6167  1762				   .
   6168  1762							; 
   6169  1762
   6170  1762				   .
   6171  1762							; 
   6172  1762
   6173  1762				   .
   6174  1762							; 
   6175  1762
   6176  1762				   .
   6177  1762							; 
   6178  1762
   6179  1762				   .
   6180  1762							; 
   6181  1762
   6182  1762				   .L0319		;  temp5  =   ( rand & 7 ) 
   6183  1762
   6184  1762							; complex statement detected
   6185  1762		       a5 a2		      lda	rand
   6186  1764		       4a		      lsr
   6187  1765					      ifconst	rand16
   6188  1765		       26 d3		      rol	rand16
   6189  1767					      endif
   6190  1767		       90 02		      bcc	*+4
   6191  1769		       49 b4		      eor	#$B4
   6192  176b		       85 a2		      sta	rand
   6193  176d					      ifconst	rand16
   6194  176d		       45 d3		      eor	rand16
   6195  176f					      endif
   6196  176f		       29 07		      AND	#7
   6197  1771		       85 a0		      STA	temp5
   6198  1773				   .
   6199  1773							; 
   6200  1773
   6201  1773				   .L0320		;  _Pause_Mem_No_Repeat  =  temp5
   6202  1773
   6203  1773		       a5 a0		      LDA	temp5
   6204  1775		       85 b2		      STA	_Pause_Mem_No_Repeat
   6205  1777				   .
   6206  1777							; 
   6207  1777
   6208  1777				   .L0321		;  on temp5 gosub __Pause0 __Pause1 __Pause2 __Pause3 __Pause4 __Pause5 __Pause6 __Pause7
   6209  1777
   6210  1777		       a9 17		      lda	#>(ongosub0-1)
   6211  1779		       48		      PHA
   6212  177a		       a9 97		      lda	#<(ongosub0-1)
   6213  177c		       48		      PHA
   6214  177d		       a6 a0		      LDX	temp5
   6215  177f		       bd 88 17 	      LDA	.L0321jumptablehi,x
   6216  1782		       48		      PHA
   6217  1783		       bd 90 17 	      LDA	.L0321jumptablelo,x
   6218  1786		       48		      PHA
   6219  1787		       60		      RTS
   6220  1788				   .L0321jumptablehi
   6221  1788		       18		      .byte.b	>(.__Pause0-1)
   6222  1789		       18		      .byte.b	>(.__Pause1-1)
   6223  178a		       18		      .byte.b	>(.__Pause2-1)
   6224  178b		       19		      .byte.b	>(.__Pause3-1)
   6225  178c		       19		      .byte.b	>(.__Pause4-1)
   6226  178d		       19		      .byte.b	>(.__Pause5-1)
   6227  178e		       19		      .byte.b	>(.__Pause6-1)
   6228  178f		       19		      .byte.b	>(.__Pause7-1)
   6229  1790				   .L0321jumptablelo
   6230  1790		       ae		      .byte.b	<(.__Pause0-1)
   6231  1791		       cf		      .byte.b	<(.__Pause1-1)
   6232  1792		       f0		      .byte.b	<(.__Pause2-1)
   6233  1793		       11		      .byte.b	<(.__Pause3-1)
   6234  1794		       32		      .byte.b	<(.__Pause4-1)
   6235  1795		       53		      .byte.b	<(.__Pause5-1)
   6236  1796		       74		      .byte.b	<(.__Pause6-1)
   6237  1797		       95		      .byte.b	<(.__Pause7-1)
   6238  1798				   ongosub0
   6239  1798				   .
   6240  1798							; 
   6241  1798
   6242  1798				   .
   6243  1798							; 
   6244  1798
   6245  1798				   .
   6246  1798							; 
   6247  1798
   6248  1798				   .
   6249  1798							; 
   6250  1798
   6251  1798				   .
   6252  1798							; 
   6253  1798
   6254  1798				   .
   6255  1798							; 
   6256  1798
   6257  1798				   .L0322		;  if _Bit3_Flip_P0{3} then REFP0  =  8
   6258  1798
   6259  1798		       a5 c2		      LDA	_Bit3_Flip_P0
   6260  179a		       29 08		      AND	#8
   6261  179c		       f0 04		      BEQ	.skipL0322
   6262  179e				   .condpart36
   6263  179e		       a9 08		      LDA	#8
   6264  17a0		       85 0b		      STA	REFP0
   6265  17a2				   .skipL0322
   6266  17a2				   .
   6267  17a2							; 
   6268  17a2
   6269  17a2				   .
   6270  17a2							; 
   6271  17a2
   6272  17a2				   .
   6273  17a2							; 
   6274  17a2
   6275  17a2				   .
   6276  17a2							; 
   6277  17a2
   6278  17a2				   .
   6279  17a2							; 
   6280  17a2
   6281  17a2				   .
   6282  17a2							; 
   6283  17a2
   6284  17a2				   .L0323		;  drawscreen
   6285  17a2
   6286  17a2		       85 ee		      sta	temp7
   6287  17a4		       a9 17		      lda	#>(ret_point11-1)
   6288  17a6		       48		      pha
   6289  17a7		       a9 b9		      lda	#<(ret_point11-1)
   6290  17a9		       48		      pha
   6291  17aa		       a9 f5		      lda	#>(drawscreen-1)
   6292  17ac		       48		      pha
   6293  17ad		       a9 86		      lda	#<(drawscreen-1)
   6294  17af		       48		      pha
   6295  17b0		       a5 ee		      lda	temp7
   6296  17b2		       48		      pha
   6297  17b3		       8a		      txa
   6298  17b4		       48		      pha
   6299  17b5		       a2 08		      ldx	#8
   6300  17b7		       4c eb ff 	      jmp	BS_jsr
   6301  17ba				   ret_point11
   6302  17ba				   .
   6303  17ba							; 
   6304  17ba
   6305  17ba				   .
   6306  17ba							; 
   6307  17ba
   6308  17ba				   .
   6309  17ba							; 
   6310  17ba
   6311  17ba				   .
   6312  17ba							; 
   6313  17ba
   6314  17ba				   .
   6315  17ba							; 
   6316  17ba
   6317  17ba				   .
   6318  17ba							; 
   6319  17ba
   6320  17ba				   .
   6321  17ba							; 
   6322  17ba
   6323  17ba				   .
   6324  17ba							; 
   6325  17ba
   6326  17ba				   .
   6327  17ba							; 
   6328  17ba
   6329  17ba				   .__Pause_Game
   6330  17ba							; __Pause_Game
   6331  17ba
   6332  17ba				   .
   6333  17ba							; 
   6334  17ba
   6335  17ba				   .
   6336  17ba							; 
   6337  17ba
   6338  17ba				   .
   6339  17ba							; 
   6340  17ba
   6341  17ba				   .
   6342  17ba							; 
   6343  17ba
   6344  17ba				   .
   6345  17ba							; 
   6346  17ba
   6347  17ba				   .
   6348  17ba							; 
   6349  17ba
   6350  17ba				   .
   6351  17ba							; 
   6352  17ba
   6353  17ba				   .
   6354  17ba							; 
   6355  17ba
   6356  17ba				   .
   6357  17ba							; 
   6358  17ba
   6359  17ba				   .L0324		;  _Pause_Counter  =  _Pause_Counter  +  1
   6360  17ba
   6361  17ba		       e6 ab		      INC	_Pause_Counter
   6362  17bc				   .
   6363  17bc							; 
   6364  17bc
   6365  17bc				   .
   6366  17bc							; 
   6367  17bc
   6368  17bc				   .
   6369  17bc							; 
   6370  17bc
   6371  17bc				   .
   6372  17bc							; 
   6373  17bc
   6374  17bc				   .L0325		;  if _Pause_Counter  <  240 then goto __Skip_Pause_Counter
   6375  17bc
   6376  17bc		       a5 ab		      LDA	_Pause_Counter
   6377  17be		       c9 f0		      CMP	#240
   6378  17c0		       b0 03		      BCS	.skipL0325
   6379  17c2				   .condpart37
   6380  17c2		       4c 14 18 	      jmp	.__Skip_Pause_Counter
   6381  17c5
   6382  17c5				   .skipL0325
   6383  17c5				   .
   6384  17c5							; 
   6385  17c5
   6386  17c5				   .
   6387  17c5							; 
   6388  17c5
   6389  17c5				   .
   6390  17c5							; 
   6391  17c5
   6392  17c5				   .
   6393  17c5							; 
   6394  17c5
   6395  17c5				   .L0326		;  _Pause_Counter  =  0
   6396  17c5
   6397  17c5		       a9 00		      LDA	#0
   6398  17c7		       85 ab		      STA	_Pause_Counter
   6399  17c9				   .
   6400  17c9							; 
   6401  17c9
   6402  17c9				   .
   6403  17c9							; 
   6404  17c9
   6405  17c9				   .
   6406  17c9							; 
   6407  17c9
   6408  17c9				   .
   6409  17c9							; 
   6410  17c9
   6411  17c9				   .L0327		;  temp5  =   ( rand & 7 ) 
   6412  17c9
   6413  17c9							; complex statement detected
   6414  17c9		       a5 a2		      lda	rand
   6415  17cb		       4a		      lsr
   6416  17cc					      ifconst	rand16
   6417  17cc		       26 d3		      rol	rand16
   6418  17ce					      endif
   6419  17ce		       90 02		      bcc	*+4
   6420  17d0		       49 b4		      eor	#$B4
   6421  17d2		       85 a2		      sta	rand
   6422  17d4					      ifconst	rand16
   6423  17d4		       45 d3		      eor	rand16
   6424  17d6					      endif
   6425  17d6		       29 07		      AND	#7
   6426  17d8		       85 a0		      STA	temp5
   6427  17da				   .
   6428  17da							; 
   6429  17da
   6430  17da				   .
   6431  17da							; 
   6432  17da
   6433  17da				   .
   6434  17da							; 
   6435  17da
   6436  17da				   .
   6437  17da							; 
   6438  17da
   6439  17da				   .L0328		;  if _Pause_Mem_No_Repeat  <>  temp5 then goto __Skip_Color_Repeat_Check
   6440  17da
   6441  17da		       a5 b2		      LDA	_Pause_Mem_No_Repeat
   6442  17dc		       c5 a0		      CMP	temp5
   6443  17de		       f0 03		      BEQ	.skipL0328
   6444  17e0				   .condpart38
   6445  17e0		       4c ef 17 	      jmp	.__Skip_Color_Repeat_Check
   6446  17e3
   6447  17e3				   .skipL0328
   6448  17e3				   .
   6449  17e3							; 
   6450  17e3
   6451  17e3				   .
   6452  17e3							; 
   6453  17e3
   6454  17e3				   .
   6455  17e3							; 
   6456  17e3
   6457  17e3				   .
   6458  17e3							; 
   6459  17e3
   6460  17e3				   .L0329		;  temp5  =  temp5  +	1
   6461  17e3
   6462  17e3		       e6 a0		      INC	temp5
   6463  17e5				   .
   6464  17e5							; 
   6465  17e5
   6466  17e5				   .
   6467  17e5							; 
   6468  17e5
   6469  17e5				   .
   6470  17e5							; 
   6471  17e5
   6472  17e5				   .
   6473  17e5							; 
   6474  17e5
   6475  17e5				   .L0330		;  if temp5  >  7 then temp5  =  0
   6476  17e5
   6477  17e5		       a9 07		      LDA	#7
   6478  17e7		       c5 a0		      CMP	temp5
   6479  17e9		       b0 04		      BCS	.skipL0330
   6480  17eb				   .condpart39
   6481  17eb		       a9 00		      LDA	#0
   6482  17ed		       85 a0		      STA	temp5
   6483  17ef				   .skipL0330
   6484  17ef				   .
   6485  17ef							; 
   6486  17ef
   6487  17ef				   .__Skip_Color_Repeat_Check
   6488  17ef							; __Skip_Color_Repeat_Check
   6489  17ef
   6490  17ef				   .
   6491  17ef							; 
   6492  17ef
   6493  17ef				   .
   6494  17ef							; 
   6495  17ef
   6496  17ef				   .
   6497  17ef							; 
   6498  17ef
   6499  17ef				   .
   6500  17ef							; 
   6501  17ef
   6502  17ef				   .L0331		;  _Pause_Mem_No_Repeat  =  temp5
   6503  17ef
   6504  17ef		       a5 a0		      LDA	temp5
   6505  17f1		       85 b2		      STA	_Pause_Mem_No_Repeat
   6506  17f3				   .
   6507  17f3							; 
   6508  17f3
   6509  17f3				   .
   6510  17f3							; 
   6511  17f3
   6512  17f3				   .
   6513  17f3							; 
   6514  17f3
   6515  17f3				   .
   6516  17f3							; 
   6517  17f3
   6518  17f3				   .L0332		;  on temp5 gosub __Pause0 __Pause1 __Pause2 __Pause3 __Pause4 __Pause5 __Pause6 __Pause7
   6519  17f3
   6520  17f3		       a9 18		      lda	#>(ongosub1-1)
   6521  17f5		       48		      PHA
   6522  17f6		       a9 13		      lda	#<(ongosub1-1)
   6523  17f8		       48		      PHA
   6524  17f9		       a6 a0		      LDX	temp5
   6525  17fb		       bd 04 18 	      LDA	.L0332jumptablehi,x
   6526  17fe		       48		      PHA
   6527  17ff		       bd 0c 18 	      LDA	.L0332jumptablelo,x
   6528  1802		       48		      PHA
   6529  1803		       60		      RTS
   6530  1804				   .L0332jumptablehi
   6531  1804		       18		      .byte.b	>(.__Pause0-1)
   6532  1805		       18		      .byte.b	>(.__Pause1-1)
   6533  1806		       18		      .byte.b	>(.__Pause2-1)
   6534  1807		       19		      .byte.b	>(.__Pause3-1)
   6535  1808		       19		      .byte.b	>(.__Pause4-1)
   6536  1809		       19		      .byte.b	>(.__Pause5-1)
   6537  180a		       19		      .byte.b	>(.__Pause6-1)
   6538  180b		       19		      .byte.b	>(.__Pause7-1)
   6539  180c				   .L0332jumptablelo
   6540  180c		       ae		      .byte.b	<(.__Pause0-1)
   6541  180d		       cf		      .byte.b	<(.__Pause1-1)
   6542  180e		       f0		      .byte.b	<(.__Pause2-1)
   6543  180f		       11		      .byte.b	<(.__Pause3-1)
   6544  1810		       32		      .byte.b	<(.__Pause4-1)
   6545  1811		       53		      .byte.b	<(.__Pause5-1)
   6546  1812		       74		      .byte.b	<(.__Pause6-1)
   6547  1813		       95		      .byte.b	<(.__Pause7-1)
   6548  1814				   ongosub1
   6549  1814				   .
   6550  1814							; 
   6551  1814
   6552  1814				   .
   6553  1814							; 
   6554  1814
   6555  1814				   .__Skip_Pause_Counter
   6556  1814							; __Skip_Pause_Counter
   6557  1814
   6558  1814				   .
   6559  1814							; 
   6560  1814
   6561  1814				   .
   6562  1814							; 
   6563  1814
   6564  1814				   .
   6565  1814							; 
   6566  1814
   6567  1814				   .
   6568  1814							; 
   6569  1814
   6570  1814				   .
   6571  1814							; 
   6572  1814
   6573  1814				   .
   6574  1814							; 
   6575  1814
   6576  1814				   .
   6577  1814							; 
   6578  1814
   6579  1814				   .L0333		;  if _Bit3_Flip_P0{3} then REFP0  =  8
   6580  1814
   6581  1814		       a5 c2		      LDA	_Bit3_Flip_P0
   6582  1816		       29 08		      AND	#8
   6583  1818		       f0 04		      BEQ	.skipL0333
   6584  181a				   .condpart40
   6585  181a		       a9 08		      LDA	#8
   6586  181c		       85 0b		      STA	REFP0
   6587  181e				   .skipL0333
   6588  181e				   .
   6589  181e							; 
   6590  181e
   6591  181e				   .
   6592  181e							; 
   6593  181e
   6594  181e				   .
   6595  181e							; 
   6596  181e
   6597  181e				   .
   6598  181e							; 
   6599  181e
   6600  181e				   .
   6601  181e							; 
   6602  181e
   6603  181e				   .
   6604  181e							; 
   6605  181e
   6606  181e				   .
   6607  181e							; 
   6608  181e
   6609  181e				   .L0334		;  COLUP0  =  _Pause_Mem_Sprite0_Color
   6610  181e
   6611  181e		       a5 b1		      LDA	_Pause_Mem_Sprite0_Color
   6612  1820		       85 06		      STA	COLUP0
   6613  1822				   .
   6614  1822							; 
   6615  1822
   6616  1822				   .
   6617  1822							; 
   6618  1822
   6619  1822				   .
   6620  1822							; 
   6621  1822
   6622  1822				   .
   6623  1822							; 
   6624  1822
   6625  1822				   .
   6626  1822							; 
   6627  1822
   6628  1822				   .
   6629  1822							; 
   6630  1822
   6631  1822				   .
   6632  1822							; 
   6633  1822
   6634  1822				   .L0335		;  drawscreen
   6635  1822
   6636  1822		       85 ee		      sta	temp7
   6637  1824		       a9 18		      lda	#>(ret_point12-1)
   6638  1826		       48		      pha
   6639  1827		       a9 39		      lda	#<(ret_point12-1)
   6640  1829		       48		      pha
   6641  182a		       a9 f5		      lda	#>(drawscreen-1)
   6642  182c		       48		      pha
   6643  182d		       a9 86		      lda	#<(drawscreen-1)
   6644  182f		       48		      pha
   6645  1830		       a5 ee		      lda	temp7
   6646  1832		       48		      pha
   6647  1833		       8a		      txa
   6648  1834		       48		      pha
   6649  1835		       a2 08		      ldx	#8
   6650  1837		       4c eb ff 	      jmp	BS_jsr
   6651  183a				   ret_point12
   6652  183a				   .
   6653  183a							; 
   6654  183a
   6655  183a				   .
   6656  183a							; 
   6657  183a
   6658  183a				   .
   6659  183a							; 
   6660  183a
   6661  183a				   .
   6662  183a							; 
   6663  183a
   6664  183a				   .
   6665  183a							; 
   6666  183a
   6667  183a				   .
   6668  183a							; 
   6669  183a
   6670  183a				   .
   6671  183a							; 
   6672  183a
   6673  183a				   .
   6674  183a							; 
   6675  183a
   6676  183a				   .
   6677  183a							; 
   6678  183a
   6679  183a				   .
   6680  183a							; 
   6681  183a
   6682  183a				   .
   6683  183a							; 
   6684  183a
   6685  183a				   .L0336		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Pause_Game
   6686  183a
   6687  183a		       24 0c		      bit	INPT4
   6688  183c		       10 09		      BPL	.skipL0336
   6689  183e				   .condpart41
   6690  183e		       a5 c4		      LDA	_Bit1_FireB_Restrainer
   6691  1840		       29 fd		      AND	#253
   6692  1842		       85 c4		      STA	_Bit1_FireB_Restrainer
   6693  1844		       4c ba 17 	      jmp	.__Pause_Game
   6694  1847
   6695  1847				   .skipL0336
   6696  1847				   .
   6697  1847							; 
   6698  1847
   6699  1847				   .
   6700  1847							; 
   6701  1847
   6702  1847				   .
   6703  1847							; 
   6704  1847
   6705  1847				   .
   6706  1847							; 
   6707  1847
   6708  1847				   .
   6709  1847							; 
   6710  1847
   6711  1847				   .L0337		;  if _Bit1_FireB_Restrainer{1} then goto __Pause_Game
   6712  1847
   6713  1847		       a5 c4		      LDA	_Bit1_FireB_Restrainer
   6714  1849		       29 02		      AND	#2
   6715  184b		       f0 03		      BEQ	.skipL0337
   6716  184d				   .condpart42
   6717  184d		       4c ba 17 	      jmp	.__Pause_Game
   6718  1850
   6719  1850				   .skipL0337
   6720  1850				   .
   6721  1850							; 
   6722  1850
   6723  1850				   .
   6724  1850							; 
   6725  1850
   6726  1850				   .
   6727  1850							; 
   6728  1850
   6729  1850				   .
   6730  1850							; 
   6731  1850
   6732  1850				   .L0338		;  _Bit0_Pause_Position{0}  =	0  :  if switchbw then _Bit0_Pause_Position{0}	=  1
   6733  1850
   6734  1850		       a5 c7		      LDA	_Bit0_Pause_Position
   6735  1852		       29 fe		      AND	#254
   6736  1854		       85 c7		      STA	_Bit0_Pause_Position
   6737  1856		       a9 08		      lda	#8
   6738  1858		       2c 82 02 	      bit	SWCHB
   6739  185b		       d0 06		      BNE	.skipL0338
   6740  185d				   .condpart43
   6741  185d		       a5 c7		      LDA	_Bit0_Pause_Position
   6742  185f		       09 01		      ORA	#1
   6743  1861		       85 c7		      STA	_Bit0_Pause_Position
   6744  1863				   .skipL0338
   6745  1863				   .
   6746  1863							; 
   6747  1863
   6748  1863				   .
   6749  1863							; 
   6750  1863
   6751  1863				   .
   6752  1863							; 
   6753  1863
   6754  1863				   .
   6755  1863							; 
   6756  1863
   6757  1863				   .
   6758  1863							; 
   6759  1863
   6760  1863				   .
   6761  1863							; 
   6762  1863
   6763  1863				   .
   6764  1863							; 
   6765  1863
   6766  1863				   .
   6767  1863							; 
   6768  1863
   6769  1863				   .
   6770  1863							; 
   6771  1863
   6772  1863				   .
   6773  1863							; 
   6774  1863
   6775  1863				   .
   6776  1863							; 
   6777  1863
   6778  1863				   .
   6779  1863							; 
   6780  1863
   6781  1863				   .
   6782  1863							; 
   6783  1863
   6784  1863				   .
   6785  1863							; 
   6786  1863
   6787  1863				   .
   6788  1863							; 
   6789  1863
   6790  1863				   .
   6791  1863							; 
   6792  1863
   6793  1863				   .
   6794  1863							; 
   6795  1863
   6796  1863				   .
   6797  1863							; 
   6798  1863
   6799  1863				   .
   6800  1863							; 
   6801  1863
   6802  1863				   .
   6803  1863							; 
   6804  1863
   6805  1863				   .
   6806  1863							; 
   6807  1863
   6808  1863				   .
   6809  1863							; 
   6810  1863
   6811  1863				   .
   6812  1863							; 
   6813  1863
   6814  1863				   .
   6815  1863							; 
   6816  1863
   6817  1863				   .__Restore_Game_from_Pause
   6818  1863							; __Restore_Game_from_Pause
   6819  1863
   6820  1863				   .
   6821  1863							; 
   6822  1863
   6823  1863				   .
   6824  1863							; 
   6825  1863
   6826  1863				   .
   6827  1863							; 
   6828  1863
   6829  1863				   .
   6830  1863							; 
   6831  1863
   6832  1863				   .
   6833  1863							; 
   6834  1863
   6835  1863				   .
   6836  1863							; 
   6837  1863
   6838  1863				   .L0339		;  _Bit1_FireB_Restrainer{1}  =  1
   6839  1863
   6840  1863		       a5 c4		      LDA	_Bit1_FireB_Restrainer
   6841  1865		       09 02		      ORA	#2
   6842  1867		       85 c4		      STA	_Bit1_FireB_Restrainer
   6843  1869				   .
   6844  1869							; 
   6845  1869
   6846  1869				   .
   6847  1869							; 
   6848  1869
   6849  1869				   .
   6850  1869							; 
   6851  1869
   6852  1869				   .
   6853  1869							; 
   6854  1869
   6855  1869				   .
   6856  1869							; 
   6857  1869
   6858  1869				   .
   6859  1869							; 
   6860  1869
   6861  1869				   .L0340		;  COLUBK  =  $80  :  COLUP0  =  $0A
   6862  1869
   6863  1869		       a9 80		      LDA	#$80
   6864  186b		       85 09		      STA	COLUBK
   6865  186d		       a9 0a		      LDA	#$0A
   6866  186f		       85 06		      STA	COLUP0
   6867  1871				   .
   6868  1871							; 
   6869  1871
   6870  1871				   .
   6871  1871							; 
   6872  1871
   6873  1871				   .
   6874  1871							; 
   6875  1871
   6876  1871				   .
   6877  1871							; 
   6878  1871
   6879  1871				   .
   6880  1871							; 
   6881  1871
   6882  1871				   .
   6883  1871							; 
   6884  1871
   6885  1871				   .
   6886  1871							; 
   6887  1871
   6888  1871				   .
   6889  1871							; 
   6890  1871
   6891  1871				   .
   6892  1871							; 
   6893  1871
   6894  1871				   .L0341		;  _P1_Up_Down  =  _Pause_Mem_Sprite1_UD
   6895  1871
   6896  1871		       a9 00		      LDA	#0
   6897  1873		       85 d6		      STA	c
   6898  1875		       a5 ac		      LDA	_Pause_Mem_Sprite1_UD
   6899  1877		       85 86		      STA	_P1_Up_Down
   6900  1879				   .L0342		;  _P1_Left_Right  =  _Pause_Mem_Sprite1_LR
   6901  1879
   6902  1879		       a9 00		      LDA	#0
   6903  187b		       85 d7		      STA	d
   6904  187d		       a5 ad		      LDA	_Pause_Mem_Sprite1_LR
   6905  187f		       85 81		      STA	_P1_Left_Right
   6906  1881				   .
   6907  1881							; 
   6908  1881
   6909  1881				   .
   6910  1881							; 
   6911  1881
   6912  1881				   .
   6913  1881							; 
   6914  1881
   6915  1881				   .
   6916  1881							; 
   6917  1881
   6918  1881				   .L0343		;  missile0y  =  _Pause_Mem_Missile0y
   6919  1881
   6920  1881		       a5 b3		      LDA	_Pause_Mem_Missile0y
   6921  1883		       85 91		      STA	missile0y
   6922  1885				   .
   6923  1885							; 
   6924  1885
   6925  1885				   .
   6926  1885							; 
   6927  1885
   6928  1885				   .
   6929  1885							; 
   6930  1885
   6931  1885				   .
   6932  1885							; 
   6933  1885
   6934  1885				   .L0344		;  pfscorecolor  =  _Pause_Mem_Health_Color
   6935  1885
   6936  1885		       a5 ae		      LDA	_Pause_Mem_Health_Color
   6937  1887		       85 f4		      STA	pfscorecolor
   6938  1889				   .L0345		;  scorecolor	=  _Pause_Mem_Score_Color
   6939  1889
   6940  1889		       a5 b0		      LDA	_Pause_Mem_Score_Color
   6941  188b		       85 a3		      STA	scorecolor
   6942  188d				   .L0346		;  _SC_Back  =  _Pause_Mem_SCBack_Color
   6943  188d
   6944  188d		       a5 af		      LDA	_Pause_Mem_SCBack_Color
   6945  188f		       85 d1		      STA	_SC_Back
   6946  1891				   .
   6947  1891							; 
   6948  1891
   6949  1891				   .
   6950  1891							; 
   6951  1891
   6952  1891				   .
   6953  1891							; 
   6954  1891
   6955  1891				   .
   6956  1891							; 
   6957  1891
   6958  1891				   .
   6959  1891							; 
   6960  1891
   6961  1891				   .
   6962  1891							; 
   6963  1891
   6964  1891				   .L0347		;  pfcolors:
   6965  1891
   6966  1891		       a9 ce		      lda	# $CE
   6967  1893		       85 08		      sta	COLUPF
   6968  1895				  -	      ifconst	pfres
   6969  1895				  -	      lda	#>(pfcolorlabel13-129+pfres*pfwidth)
   6970  1895					      else
   6971  1895		       a9 f6		      lda	#>(pfcolorlabel13-81)
   6972  1897					      endif
   6973  1897		       85 f1		      sta	pfcolortable+1
   6974  1899				  -	      ifconst	pfres
   6975  1899				  -	      lda	#<(pfcolorlabel13-129+pfres*pfwidth)
   6976  1899					      else
   6977  1899		       a9 41		      lda	#<(pfcolorlabel13-81)
   6978  189b					      endif
   6979  189b		       85 f0		      sta	pfcolortable
   6980  189d				   .
   6981  189d							; 
   6982  189d
   6983  189d				   .
   6984  189d							; 
   6985  189d
   6986  189d				   .L0348		;  goto __Main_Loop bank2
   6987  189d
   6988  189d		       85 ee		      sta	temp7
   6989  189f		       a9 30		      lda	#>(.__Main_Loop-1)
   6990  18a1		       48		      pha
   6991  18a2		       a9 ff		      lda	#<(.__Main_Loop-1)
   6992  18a4		       48		      pha
   6993  18a5		       a5 ee		      lda	temp7
   6994  18a7		       48		      pha
   6995  18a8		       8a		      txa
   6996  18a9		       48		      pha
   6997  18aa		       a2 02		      ldx	#2
   6998  18ac		       4c eb ff 	      jmp	BS_jsr
   6999  18af				   .
   7000  18af							; 
   7001  18af
   7002  18af				   .
   7003  18af							; 
   7004  18af
   7005  18af				   .
   7006  18af							; 
   7007  18af
   7008  18af				   .
   7009  18af							; 
   7010  18af
   7011  18af				   .
   7012  18af							; 
   7013  18af
   7014  18af				   .
   7015  18af							; 
   7016  18af
   7017  18af				   .
   7018  18af							; 
   7019  18af
   7020  18af				   .
   7021  18af							; 
   7022  18af
   7023  18af				   .
   7024  18af							; 
   7025  18af
   7026  18af				   .__Pause0
   7027  18af							; __Pause0
   7028  18af
   7029  18af				   .
   7030  18af							; 
   7031  18af
   7032  18af				   .L0349		;  pfcolors:
   7033  18af
   7034  18af		       a9 1a		      lda	# $1A
   7035  18b1		       85 08		      sta	COLUPF
   7036  18b3				  -	      ifconst	pfres
   7037  18b3				  -	      lda	#>(pfcolorlabel277-132+pfres*pfwidth)
   7038  18b3					      else
   7039  18b3		       a9 f7		      lda	#>(pfcolorlabel277-84)
   7040  18b5					      endif
   7041  18b5		       85 f1		      sta	pfcolortable+1
   7042  18b7				  -	      ifconst	pfres
   7043  18b7				  -	      lda	#<(pfcolorlabel277-132+pfres*pfwidth)
   7044  18b7					      else
   7045  18b7		       a9 7a		      lda	#<(pfcolorlabel277-84)
   7046  18b9					      endif
   7047  18b9		       85 f0		      sta	pfcolortable
   7048  18bb				   .
   7049  18bb							; 
   7050  18bb
   7051  18bb				   .L0350		;  _Pause_Mem_Sprite0_Color  =  $1C
   7052  18bb
   7053  18bb		       a9 1c		      LDA	#$1C
   7054  18bd		       85 b1		      STA	_Pause_Mem_Sprite0_Color
   7055  18bf				   .
   7056  18bf							; 
   7057  18bf
   7058  18bf				   .L0351		;  COLUBK  =  $1A
   7059  18bf
   7060  18bf		       a9 1a		      LDA	#$1A
   7061  18c1		       85 09		      STA	COLUBK
   7062  18c3				   .
   7063  18c3							; 
   7064  18c3
   7065  18c3				   .L0352		;  scorecolor	=  $1C
   7066  18c3
   7067  18c3		       a9 1c		      LDA	#$1C
   7068  18c5		       85 a3		      STA	scorecolor
   7069  18c7				   .
   7070  18c7							; 
   7071  18c7
   7072  18c7				   .L0353		;  pfscorecolor  =  $1A
   7073  18c7
   7074  18c7		       a9 1a		      LDA	#$1A
   7075  18c9		       85 f4		      STA	pfscorecolor
   7076  18cb				   .
   7077  18cb							; 
   7078  18cb
   7079  18cb				   .L0354		;  _SC_Back  =  $1A
   7080  18cb
   7081  18cb		       a9 1a		      LDA	#$1A
   7082  18cd		       85 d1		      STA	_SC_Back
   7083  18cf				   .
   7084  18cf							; 
   7085  18cf
   7086  18cf				   .L0355		;  return thisbank
   7087  18cf
   7088  18cf		       60		      RTS
   7089  18d0				   .
   7090  18d0							; 
   7091  18d0
   7092  18d0				   .
   7093  18d0							; 
   7094  18d0
   7095  18d0				   .
   7096  18d0							; 
   7097  18d0
   7098  18d0				   .
   7099  18d0							; 
   7100  18d0
   7101  18d0				   .
   7102  18d0							; 
   7103  18d0
   7104  18d0				   .
   7105  18d0							; 
   7106  18d0
   7107  18d0				   .
   7108  18d0							; 
   7109  18d0
   7110  18d0				   .__Pause1
   7111  18d0							; __Pause1
   7112  18d0
   7113  18d0				   .
   7114  18d0							; 
   7115  18d0
   7116  18d0				   .L0356		;  pfcolors:
   7117  18d0
   7118  18d0		       a9 3a		      lda	# $3A
   7119  18d2		       85 08		      sta	COLUPF
   7120  18d4				  -	      ifconst	pfres
   7121  18d4				  -	      lda	#>(pfcolorlabel277-131+pfres*pfwidth)
   7122  18d4					      else
   7123  18d4		       a9 f7		      lda	#>(pfcolorlabel277-83)
   7124  18d6					      endif
   7125  18d6		       85 f1		      sta	pfcolortable+1
   7126  18d8				  -	      ifconst	pfres
   7127  18d8				  -	      lda	#<(pfcolorlabel277-131+pfres*pfwidth)
   7128  18d8					      else
   7129  18d8		       a9 7b		      lda	#<(pfcolorlabel277-83)
   7130  18da					      endif
   7131  18da		       85 f0		      sta	pfcolortable
   7132  18dc				   .
   7133  18dc							; 
   7134  18dc
   7135  18dc				   .L0357		;  _Pause_Mem_Sprite0_Color  =  $3C
   7136  18dc
   7137  18dc		       a9 3c		      LDA	#$3C
   7138  18de		       85 b1		      STA	_Pause_Mem_Sprite0_Color
   7139  18e0				   .
   7140  18e0							; 
   7141  18e0
   7142  18e0				   .L0358		;  COLUBK  =  $3A
   7143  18e0
   7144  18e0		       a9 3a		      LDA	#$3A
   7145  18e2		       85 09		      STA	COLUBK
   7146  18e4				   .
   7147  18e4							; 
   7148  18e4
   7149  18e4				   .L0359		;  scorecolor	=  $3C
   7150  18e4
   7151  18e4		       a9 3c		      LDA	#$3C
   7152  18e6		       85 a3		      STA	scorecolor
   7153  18e8				   .
   7154  18e8							; 
   7155  18e8
   7156  18e8				   .L0360		;  pfscorecolor  =  $3A
   7157  18e8
   7158  18e8		       a9 3a		      LDA	#$3A
   7159  18ea		       85 f4		      STA	pfscorecolor
   7160  18ec				   .
   7161  18ec							; 
   7162  18ec
   7163  18ec				   .L0361		;  _SC_Back  =  $3A
   7164  18ec
   7165  18ec		       a9 3a		      LDA	#$3A
   7166  18ee		       85 d1		      STA	_SC_Back
   7167  18f0				   .
   7168  18f0							; 
   7169  18f0
   7170  18f0				   .L0362		;  return thisbank
   7171  18f0
   7172  18f0		       60		      RTS
   7173  18f1				   .
   7174  18f1							; 
   7175  18f1
   7176  18f1				   .
   7177  18f1							; 
   7178  18f1
   7179  18f1				   .
   7180  18f1							; 
   7181  18f1
   7182  18f1				   .
   7183  18f1							; 
   7184  18f1
   7185  18f1				   .
   7186  18f1							; 
   7187  18f1
   7188  18f1				   .
   7189  18f1							; 
   7190  18f1
   7191  18f1				   .
   7192  18f1							; 
   7193  18f1
   7194  18f1				   .__Pause2
   7195  18f1							; __Pause2
   7196  18f1
   7197  18f1				   .
   7198  18f1							; 
   7199  18f1
   7200  18f1				   .L0363		;  pfcolors:
   7201  18f1
   7202  18f1		       a9 6a		      lda	# $6A
   7203  18f3		       85 08		      sta	COLUPF
   7204  18f5				  -	      ifconst	pfres
   7205  18f5				  -	      lda	#>(pfcolorlabel277-130+pfres*pfwidth)
   7206  18f5					      else
   7207  18f5		       a9 f7		      lda	#>(pfcolorlabel277-82)
   7208  18f7					      endif
   7209  18f7		       85 f1		      sta	pfcolortable+1
   7210  18f9				  -	      ifconst	pfres
   7211  18f9				  -	      lda	#<(pfcolorlabel277-130+pfres*pfwidth)
   7212  18f9					      else
   7213  18f9		       a9 7c		      lda	#<(pfcolorlabel277-82)
   7214  18fb					      endif
   7215  18fb		       85 f0		      sta	pfcolortable
   7216  18fd				   .
   7217  18fd							; 
   7218  18fd
   7219  18fd				   .L0364		;  _Pause_Mem_Sprite0_Color  =  $6C
   7220  18fd
   7221  18fd		       a9 6c		      LDA	#$6C
   7222  18ff		       85 b1		      STA	_Pause_Mem_Sprite0_Color
   7223  1901				   .
   7224  1901							; 
   7225  1901
   7226  1901				   .L0365		;  COLUBK  =  $6A
   7227  1901
   7228  1901		       a9 6a		      LDA	#$6A
   7229  1903		       85 09		      STA	COLUBK
   7230  1905				   .
   7231  1905							; 
   7232  1905
   7233  1905				   .L0366		;  scorecolor	=  $6C
   7234  1905
   7235  1905		       a9 6c		      LDA	#$6C
   7236  1907		       85 a3		      STA	scorecolor
   7237  1909				   .
   7238  1909							; 
   7239  1909
   7240  1909				   .L0367		;  pfscorecolor  =  $6A
   7241  1909
   7242  1909		       a9 6a		      LDA	#$6A
   7243  190b		       85 f4		      STA	pfscorecolor
   7244  190d				   .
   7245  190d							; 
   7246  190d
   7247  190d				   .L0368		;  _SC_Back  =  $6A
   7248  190d
   7249  190d		       a9 6a		      LDA	#$6A
   7250  190f		       85 d1		      STA	_SC_Back
   7251  1911				   .
   7252  1911							; 
   7253  1911
   7254  1911				   .L0369		;  return thisbank
   7255  1911
   7256  1911		       60		      RTS
   7257  1912				   .
   7258  1912							; 
   7259  1912
   7260  1912				   .
   7261  1912							; 
   7262  1912
   7263  1912				   .
   7264  1912							; 
   7265  1912
   7266  1912				   .
   7267  1912							; 
   7268  1912
   7269  1912				   .
   7270  1912							; 
   7271  1912
   7272  1912				   .
   7273  1912							; 
   7274  1912
   7275  1912				   .
   7276  1912							; 
   7277  1912
   7278  1912				   .__Pause3
   7279  1912							; __Pause3
   7280  1912
   7281  1912				   .
   7282  1912							; 
   7283  1912
   7284  1912				   .L0370		;  pfcolors:
   7285  1912
   7286  1912		       a9 9a		      lda	# $9A
   7287  1914		       85 08		      sta	COLUPF
   7288  1916				  -	      ifconst	pfres
   7289  1916				  -	      lda	#>(pfcolorlabel277-129+pfres*pfwidth)
   7290  1916					      else
   7291  1916		       a9 f7		      lda	#>(pfcolorlabel277-81)
   7292  1918					      endif
   7293  1918		       85 f1		      sta	pfcolortable+1
   7294  191a				  -	      ifconst	pfres
   7295  191a				  -	      lda	#<(pfcolorlabel277-129+pfres*pfwidth)
   7296  191a					      else
   7297  191a		       a9 7d		      lda	#<(pfcolorlabel277-81)
   7298  191c					      endif
   7299  191c		       85 f0		      sta	pfcolortable
   7300  191e				   .
   7301  191e							; 
   7302  191e
   7303  191e				   .L0371		;  _Pause_Mem_Sprite0_Color  =  $9C
   7304  191e
   7305  191e		       a9 9c		      LDA	#$9C
   7306  1920		       85 b1		      STA	_Pause_Mem_Sprite0_Color
   7307  1922				   .
   7308  1922							; 
   7309  1922
   7310  1922				   .L0372		;  COLUBK  =  $9A
   7311  1922
   7312  1922		       a9 9a		      LDA	#$9A
   7313  1924		       85 09		      STA	COLUBK
   7314  1926				   .
   7315  1926							; 
   7316  1926
   7317  1926				   .L0373		;  scorecolor	=  $9C
   7318  1926
   7319  1926		       a9 9c		      LDA	#$9C
   7320  1928		       85 a3		      STA	scorecolor
   7321  192a				   .
   7322  192a							; 
   7323  192a
   7324  192a				   .L0374		;  pfscorecolor  =  $9A
   7325  192a
   7326  192a		       a9 9a		      LDA	#$9A
   7327  192c		       85 f4		      STA	pfscorecolor
   7328  192e				   .
   7329  192e							; 
   7330  192e
   7331  192e				   .L0375		;  _SC_Back  =  $9A
   7332  192e
   7333  192e		       a9 9a		      LDA	#$9A
   7334  1930		       85 d1		      STA	_SC_Back
   7335  1932				   .
   7336  1932							; 
   7337  1932
   7338  1932				   .L0376		;  return thisbank
   7339  1932
   7340  1932		       60		      RTS
   7341  1933				   .
   7342  1933							; 
   7343  1933
   7344  1933				   .
   7345  1933							; 
   7346  1933
   7347  1933				   .
   7348  1933							; 
   7349  1933
   7350  1933				   .
   7351  1933							; 
   7352  1933
   7353  1933				   .
   7354  1933							; 
   7355  1933
   7356  1933				   .
   7357  1933							; 
   7358  1933
   7359  1933				   .
   7360  1933							; 
   7361  1933
   7362  1933				   .__Pause4
   7363  1933							; __Pause4
   7364  1933
   7365  1933				   .
   7366  1933							; 
   7367  1933
   7368  1933				   .L0377		;  pfcolors:
   7369  1933
   7370  1933		       a9 ca		      lda	# $CA
   7371  1935		       85 08		      sta	COLUPF
   7372  1937				  -	      ifconst	pfres
   7373  1937				  -	      lda	#>(pfcolorlabel302-132+pfres*pfwidth)
   7374  1937					      else
   7375  1937		       a9 f8		      lda	#>(pfcolorlabel302-84)
   7376  1939					      endif
   7377  1939		       85 f1		      sta	pfcolortable+1
   7378  193b				  -	      ifconst	pfres
   7379  193b				  -	      lda	#<(pfcolorlabel302-132+pfres*pfwidth)
   7380  193b					      else
   7381  193b		       a9 04		      lda	#<(pfcolorlabel302-84)
   7382  193d					      endif
   7383  193d		       85 f0		      sta	pfcolortable
   7384  193f				   .
   7385  193f							; 
   7386  193f
   7387  193f				   .L0378		;  _Pause_Mem_Sprite0_Color  =  $CC
   7388  193f
   7389  193f		       a9 cc		      LDA	#$CC
   7390  1941		       85 b1		      STA	_Pause_Mem_Sprite0_Color
   7391  1943				   .
   7392  1943							; 
   7393  1943
   7394  1943				   .L0379		;  COLUBK  =  $CA
   7395  1943
   7396  1943		       a9 ca		      LDA	#$CA
   7397  1945		       85 09		      STA	COLUBK
   7398  1947				   .
   7399  1947							; 
   7400  1947
   7401  1947				   .L0380		;  scorecolor	=  $CC
   7402  1947
   7403  1947		       a9 cc		      LDA	#$CC
   7404  1949		       85 a3		      STA	scorecolor
   7405  194b				   .
   7406  194b							; 
   7407  194b
   7408  194b				   .L0381		;  pfscorecolor  =  $CA
   7409  194b
   7410  194b		       a9 ca		      LDA	#$CA
   7411  194d		       85 f4		      STA	pfscorecolor
   7412  194f				   .
   7413  194f							; 
   7414  194f
   7415  194f				   .L0382		;  _SC_Back  =  $CA
   7416  194f
   7417  194f		       a9 ca		      LDA	#$CA
   7418  1951		       85 d1		      STA	_SC_Back
   7419  1953				   .
   7420  1953							; 
   7421  1953
   7422  1953				   .L0383		;  return thisbank
   7423  1953
   7424  1953		       60		      RTS
   7425  1954				   .
   7426  1954							; 
   7427  1954
   7428  1954				   .
   7429  1954							; 
   7430  1954
   7431  1954				   .
   7432  1954							; 
   7433  1954
   7434  1954				   .
   7435  1954							; 
   7436  1954
   7437  1954				   .
   7438  1954							; 
   7439  1954
   7440  1954				   .
   7441  1954							; 
   7442  1954
   7443  1954				   .
   7444  1954							; 
   7445  1954
   7446  1954				   .__Pause5
   7447  1954							; __Pause5
   7448  1954
   7449  1954				   .
   7450  1954							; 
   7451  1954
   7452  1954				   .L0384		;  pfcolors:
   7453  1954
   7454  1954		       a9 fa		      lda	# $FA
   7455  1956		       85 08		      sta	COLUPF
   7456  1958				  -	      ifconst	pfres
   7457  1958				  -	      lda	#>(pfcolorlabel302-131+pfres*pfwidth)
   7458  1958					      else
   7459  1958		       a9 f8		      lda	#>(pfcolorlabel302-83)
   7460  195a					      endif
   7461  195a		       85 f1		      sta	pfcolortable+1
   7462  195c				  -	      ifconst	pfres
   7463  195c				  -	      lda	#<(pfcolorlabel302-131+pfres*pfwidth)
   7464  195c					      else
   7465  195c		       a9 05		      lda	#<(pfcolorlabel302-83)
   7466  195e					      endif
   7467  195e		       85 f0		      sta	pfcolortable
   7468  1960				   .
   7469  1960							; 
   7470  1960
   7471  1960				   .L0385		;  _Pause_Mem_Sprite0_Color  =  $FC
   7472  1960
   7473  1960		       a9 fc		      LDA	#$FC
   7474  1962		       85 b1		      STA	_Pause_Mem_Sprite0_Color
   7475  1964				   .
   7476  1964							; 
   7477  1964
   7478  1964				   .L0386		;  COLUBK  =  $FA
   7479  1964
   7480  1964		       a9 fa		      LDA	#$FA
   7481  1966		       85 09		      STA	COLUBK
   7482  1968				   .
   7483  1968							; 
   7484  1968
   7485  1968				   .L0387		;  scorecolor	=  $FC
   7486  1968
   7487  1968		       a9 fc		      LDA	#$FC
   7488  196a		       85 a3		      STA	scorecolor
   7489  196c				   .
   7490  196c							; 
   7491  196c
   7492  196c				   .L0388		;  pfscorecolor  =  $FA
   7493  196c
   7494  196c		       a9 fa		      LDA	#$FA
   7495  196e		       85 f4		      STA	pfscorecolor
   7496  1970				   .
   7497  1970							; 
   7498  1970
   7499  1970				   .L0389		;  _SC_Back  =  $FA
   7500  1970
   7501  1970		       a9 fa		      LDA	#$FA
   7502  1972		       85 d1		      STA	_SC_Back
   7503  1974				   .
   7504  1974							; 
   7505  1974
   7506  1974				   .L0390		;  return thisbank
   7507  1974
   7508  1974		       60		      RTS
   7509  1975				   .
   7510  1975							; 
   7511  1975
   7512  1975				   .
   7513  1975							; 
   7514  1975
   7515  1975				   .
   7516  1975							; 
   7517  1975
   7518  1975				   .
   7519  1975							; 
   7520  1975
   7521  1975				   .
   7522  1975							; 
   7523  1975
   7524  1975				   .
   7525  1975							; 
   7526  1975
   7527  1975				   .
   7528  1975							; 
   7529  1975
   7530  1975				   .__Pause6
   7531  1975							; __Pause6
   7532  1975
   7533  1975				   .
   7534  1975							; 
   7535  1975
   7536  1975				   .L0391		;  pfcolors:
   7537  1975
   7538  1975		       a9 8a		      lda	# $8A
   7539  1977		       85 08		      sta	COLUPF
   7540  1979				  -	      ifconst	pfres
   7541  1979				  -	      lda	#>(pfcolorlabel302-130+pfres*pfwidth)
   7542  1979					      else
   7543  1979		       a9 f8		      lda	#>(pfcolorlabel302-82)
   7544  197b					      endif
   7545  197b		       85 f1		      sta	pfcolortable+1
   7546  197d				  -	      ifconst	pfres
   7547  197d				  -	      lda	#<(pfcolorlabel302-130+pfres*pfwidth)
   7548  197d					      else
   7549  197d		       a9 06		      lda	#<(pfcolorlabel302-82)
   7550  197f					      endif
   7551  197f		       85 f0		      sta	pfcolortable
   7552  1981				   .
   7553  1981							; 
   7554  1981
   7555  1981				   .L0392		;  _Pause_Mem_Sprite0_Color  =  $8C
   7556  1981
   7557  1981		       a9 8c		      LDA	#$8C
   7558  1983		       85 b1		      STA	_Pause_Mem_Sprite0_Color
   7559  1985				   .
   7560  1985							; 
   7561  1985
   7562  1985				   .L0393		;  COLUBK  =  $8A
   7563  1985
   7564  1985		       a9 8a		      LDA	#$8A
   7565  1987		       85 09		      STA	COLUBK
   7566  1989				   .
   7567  1989							; 
   7568  1989
   7569  1989				   .L0394		;  scorecolor	=  $8C
   7570  1989
   7571  1989		       a9 8c		      LDA	#$8C
   7572  198b		       85 a3		      STA	scorecolor
   7573  198d				   .
   7574  198d							; 
   7575  198d
   7576  198d				   .L0395		;  pfscorecolor  =  $8A
   7577  198d
   7578  198d		       a9 8a		      LDA	#$8A
   7579  198f		       85 f4		      STA	pfscorecolor
   7580  1991				   .
   7581  1991							; 
   7582  1991
   7583  1991				   .L0396		;  _SC_Back  =  $8A
   7584  1991
   7585  1991		       a9 8a		      LDA	#$8A
   7586  1993		       85 d1		      STA	_SC_Back
   7587  1995				   .
   7588  1995							; 
   7589  1995
   7590  1995				   .L0397		;  return thisbank
   7591  1995
   7592  1995		       60		      RTS
   7593  1996				   .
   7594  1996							; 
   7595  1996
   7596  1996				   .
   7597  1996							; 
   7598  1996
   7599  1996				   .
   7600  1996							; 
   7601  1996
   7602  1996				   .
   7603  1996							; 
   7604  1996
   7605  1996				   .
   7606  1996							; 
   7607  1996
   7608  1996				   .
   7609  1996							; 
   7610  1996
   7611  1996				   .
   7612  1996							; 
   7613  1996
   7614  1996				   .__Pause7
   7615  1996							; __Pause7
   7616  1996
   7617  1996				   .
   7618  1996							; 
   7619  1996
   7620  1996				   .L0398		;  pfcolors:
   7621  1996
   7622  1996		       a9 2a		      lda	# $2A
   7623  1998		       85 08		      sta	COLUPF
   7624  199a				  -	      ifconst	pfres
   7625  199a				  -	      lda	#>(pfcolorlabel302-129+pfres*pfwidth)
   7626  199a					      else
   7627  199a		       a9 f8		      lda	#>(pfcolorlabel302-81)
   7628  199c					      endif
   7629  199c		       85 f1		      sta	pfcolortable+1
   7630  199e				  -	      ifconst	pfres
   7631  199e				  -	      lda	#<(pfcolorlabel302-129+pfres*pfwidth)
   7632  199e					      else
   7633  199e		       a9 07		      lda	#<(pfcolorlabel302-81)
   7634  19a0					      endif
   7635  19a0		       85 f0		      sta	pfcolortable
   7636  19a2				   .
   7637  19a2							; 
   7638  19a2
   7639  19a2				   .L0399		;  _Pause_Mem_Sprite0_Color  =  $2C
   7640  19a2
   7641  19a2		       a9 2c		      LDA	#$2C
   7642  19a4		       85 b1		      STA	_Pause_Mem_Sprite0_Color
   7643  19a6				   .
   7644  19a6							; 
   7645  19a6
   7646  19a6				   .L0400		;  COLUBK  =  $2A
   7647  19a6
   7648  19a6		       a9 2a		      LDA	#$2A
   7649  19a8		       85 09		      STA	COLUBK
   7650  19aa				   .
   7651  19aa							; 
   7652  19aa
   7653  19aa				   .L0401		;  scorecolor	=  $2C
   7654  19aa
   7655  19aa		       a9 2c		      LDA	#$2C
   7656  19ac		       85 a3		      STA	scorecolor
   7657  19ae				   .
   7658  19ae							; 
   7659  19ae
   7660  19ae				   .L0402		;  pfscorecolor  =  $2A
   7661  19ae
   7662  19ae		       a9 2a		      LDA	#$2A
   7663  19b0		       85 f4		      STA	pfscorecolor
   7664  19b2				   .
   7665  19b2							; 
   7666  19b2
   7667  19b2				   .L0403		;  _SC_Back  =  $2A
   7668  19b2
   7669  19b2		       a9 2a		      LDA	#$2A
   7670  19b4		       85 d1		      STA	_SC_Back
   7671  19b6				   .
   7672  19b6							; 
   7673  19b6
   7674  19b6				   .L0404		;  return thisbank
   7675  19b6
   7676  19b6		       60		      RTS
   7677  19b7				   .
   7678  19b7							; 
   7679  19b7
   7680  19b7				   .
   7681  19b7							; 
   7682  19b7
   7683  19b7				   .
   7684  19b7							; 
   7685  19b7
   7686  19b7				   .
   7687  19b7							; 
   7688  19b7
   7689  19b7				   .
   7690  19b7							; 
   7691  19b7
   7692  19b7				   .
   7693  19b7							; 
   7694  19b7
   7695  19b7				   .
   7696  19b7							; 
   7697  19b7
   7698  19b7				   .
   7699  19b7							; 
   7700  19b7
   7701  19b7				   .L0405		;  bank 2
   7702  19b7
   7703  19b7					      if	ECHO1
      1565 bytes of ROM space left in bank 1
   7704  19b7					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   7705  19b7					      endif
   7706  19b7		       00 01	   ECHO1      =	1
   7707  1fd4					      ORG	$1FF4-bscode_length
   7708  1fd4					      RORG	$1FF4-bscode_length
   7709  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   7710  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   7711  1fd6				  -	      stx	FASTFETCH
   7712  1fd6					      endif
   7713  1fd6		       9a		      txs
   7714  1fd7				  -	      if	bankswitch == 64
   7715  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7716  1fd7					      else
   7717  1fd7		       a9 f3		      lda	#>(start-1)
   7718  1fd9					      endif
   7719  1fd9		       48		      pha
   7720  1fda		       a9 51		      lda	#<(start-1)
   7721  1fdc		       48		      pha
   7722  1fdd		       48		      pha
   7723  1fde		       8a		      txa
   7724  1fdf		       48		      pha
   7725  1fe0		       ba		      tsx
   7726  1fe1					      if	bankswitch != 64
   7727  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   7728  1fe3		       2a		      rol
   7729  1fe4		       2a		      rol
   7730  1fe5		       2a		      rol
   7731  1fe6		       2a		      rol
   7732  1fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7733  1fe9		       aa		      tax
   7734  1fea		       e8		      inx
   7735  1feb				  -	      else
   7736  1feb				  -	      lda	4,x	; get high byte of return address
   7737  1feb				  -	      tay
   7738  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7739  1feb				  -	      sta	4,x
   7740  1feb				  -	      tya
   7741  1feb				  -	      lsr
   7742  1feb				  -	      lsr
   7743  1feb				  -	      lsr
   7744  1feb				  -	      lsr
   7745  1feb				  -	      tax
   7746  1feb				  -	      inx
   7747  1feb					      endif
   7748  1feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   7749  1fee		       68		      pla
   7750  1fef		       aa		      tax
   7751  1ff0		       68		      pla
   7752  1ff1		       60		      rts
   7753  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7754  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7755  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7756  1ff2					      endif
   7757  1ffc					      ORG	$1FFC
   7758  1ffc					      RORG	$1FFC
   7759  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   7760  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   7761  2000					      ORG	$2000
   7762  2000					      RORG	$3000
   7763  2000					      repeat	256
   7764  2000		       ff		      .byte.b	$ff
   7763  2000					      repend
   7764  2001		       ff		      .byte.b	$ff
   7763  2001					      repend
   7764  2002		       ff		      .byte.b	$ff
   7763  2002					      repend
   7764  2003		       ff		      .byte.b	$ff
   7763  2003					      repend
   7764  2004		       ff		      .byte.b	$ff
   7763  2004					      repend
   7764  2005		       ff		      .byte.b	$ff
   7763  2005					      repend
   7764  2006		       ff		      .byte.b	$ff
   7763  2006					      repend
   7764  2007		       ff		      .byte.b	$ff
   7763  2007					      repend
   7764  2008		       ff		      .byte.b	$ff
   7763  2008					      repend
   7764  2009		       ff		      .byte.b	$ff
   7763  2009					      repend
   7764  200a		       ff		      .byte.b	$ff
   7763  200a					      repend
   7764  200b		       ff		      .byte.b	$ff
   7763  200b					      repend
   7764  200c		       ff		      .byte.b	$ff
   7763  200c					      repend
   7764  200d		       ff		      .byte.b	$ff
   7763  200d					      repend
   7764  200e		       ff		      .byte.b	$ff
   7763  200e					      repend
   7764  200f		       ff		      .byte.b	$ff
   7763  200f					      repend
   7764  2010		       ff		      .byte.b	$ff
   7763  2010					      repend
   7764  2011		       ff		      .byte.b	$ff
   7763  2011					      repend
   7764  2012		       ff		      .byte.b	$ff
   7763  2012					      repend
   7764  2013		       ff		      .byte.b	$ff
   7763  2013					      repend
   7764  2014		       ff		      .byte.b	$ff
   7763  2014					      repend
   7764  2015		       ff		      .byte.b	$ff
   7763  2015					      repend
   7764  2016		       ff		      .byte.b	$ff
   7763  2016					      repend
   7764  2017		       ff		      .byte.b	$ff
   7763  2017					      repend
   7764  2018		       ff		      .byte.b	$ff
   7763  2018					      repend
   7764  2019		       ff		      .byte.b	$ff
   7763  2019					      repend
   7764  201a		       ff		      .byte.b	$ff
   7763  201a					      repend
   7764  201b		       ff		      .byte.b	$ff
   7763  201b					      repend
   7764  201c		       ff		      .byte.b	$ff
   7763  201c					      repend
   7764  201d		       ff		      .byte.b	$ff
   7763  201d					      repend
   7764  201e		       ff		      .byte.b	$ff
   7763  201e					      repend
   7764  201f		       ff		      .byte.b	$ff
   7763  201f					      repend
   7764  2020		       ff		      .byte.b	$ff
   7763  2020					      repend
   7764  2021		       ff		      .byte.b	$ff
   7763  2021					      repend
   7764  2022		       ff		      .byte.b	$ff
   7763  2022					      repend
   7764  2023		       ff		      .byte.b	$ff
   7763  2023					      repend
   7764  2024		       ff		      .byte.b	$ff
   7763  2024					      repend
   7764  2025		       ff		      .byte.b	$ff
   7763  2025					      repend
   7764  2026		       ff		      .byte.b	$ff
   7763  2026					      repend
   7764  2027		       ff		      .byte.b	$ff
   7763  2027					      repend
   7764  2028		       ff		      .byte.b	$ff
   7763  2028					      repend
   7764  2029		       ff		      .byte.b	$ff
   7763  2029					      repend
   7764  202a		       ff		      .byte.b	$ff
   7763  202a					      repend
   7764  202b		       ff		      .byte.b	$ff
   7763  202b					      repend
   7764  202c		       ff		      .byte.b	$ff
   7763  202c					      repend
   7764  202d		       ff		      .byte.b	$ff
   7763  202d					      repend
   7764  202e		       ff		      .byte.b	$ff
   7763  202e					      repend
   7764  202f		       ff		      .byte.b	$ff
   7763  202f					      repend
   7764  2030		       ff		      .byte.b	$ff
   7763  2030					      repend
   7764  2031		       ff		      .byte.b	$ff
   7763  2031					      repend
   7764  2032		       ff		      .byte.b	$ff
   7763  2032					      repend
   7764  2033		       ff		      .byte.b	$ff
   7763  2033					      repend
   7764  2034		       ff		      .byte.b	$ff
   7763  2034					      repend
   7764  2035		       ff		      .byte.b	$ff
   7763  2035					      repend
   7764  2036		       ff		      .byte.b	$ff
   7763  2036					      repend
   7764  2037		       ff		      .byte.b	$ff
   7763  2037					      repend
   7764  2038		       ff		      .byte.b	$ff
   7763  2038					      repend
   7764  2039		       ff		      .byte.b	$ff
   7763  2039					      repend
   7764  203a		       ff		      .byte.b	$ff
   7763  203a					      repend
   7764  203b		       ff		      .byte.b	$ff
   7763  203b					      repend
   7764  203c		       ff		      .byte.b	$ff
   7763  203c					      repend
   7764  203d		       ff		      .byte.b	$ff
   7763  203d					      repend
   7764  203e		       ff		      .byte.b	$ff
   7763  203e					      repend
   7764  203f		       ff		      .byte.b	$ff
   7763  203f					      repend
   7764  2040		       ff		      .byte.b	$ff
   7763  2040					      repend
   7764  2041		       ff		      .byte.b	$ff
   7763  2041					      repend
   7764  2042		       ff		      .byte.b	$ff
   7763  2042					      repend
   7764  2043		       ff		      .byte.b	$ff
   7763  2043					      repend
   7764  2044		       ff		      .byte.b	$ff
   7763  2044					      repend
   7764  2045		       ff		      .byte.b	$ff
   7763  2045					      repend
   7764  2046		       ff		      .byte.b	$ff
   7763  2046					      repend
   7764  2047		       ff		      .byte.b	$ff
   7763  2047					      repend
   7764  2048		       ff		      .byte.b	$ff
   7763  2048					      repend
   7764  2049		       ff		      .byte.b	$ff
   7763  2049					      repend
   7764  204a		       ff		      .byte.b	$ff
   7763  204a					      repend
   7764  204b		       ff		      .byte.b	$ff
   7763  204b					      repend
   7764  204c		       ff		      .byte.b	$ff
   7763  204c					      repend
   7764  204d		       ff		      .byte.b	$ff
   7763  204d					      repend
   7764  204e		       ff		      .byte.b	$ff
   7763  204e					      repend
   7764  204f		       ff		      .byte.b	$ff
   7763  204f					      repend
   7764  2050		       ff		      .byte.b	$ff
   7763  2050					      repend
   7764  2051		       ff		      .byte.b	$ff
   7763  2051					      repend
   7764  2052		       ff		      .byte.b	$ff
   7763  2052					      repend
   7764  2053		       ff		      .byte.b	$ff
   7763  2053					      repend
   7764  2054		       ff		      .byte.b	$ff
   7763  2054					      repend
   7764  2055		       ff		      .byte.b	$ff
   7763  2055					      repend
   7764  2056		       ff		      .byte.b	$ff
   7763  2056					      repend
   7764  2057		       ff		      .byte.b	$ff
   7763  2057					      repend
   7764  2058		       ff		      .byte.b	$ff
   7763  2058					      repend
   7764  2059		       ff		      .byte.b	$ff
   7763  2059					      repend
   7764  205a		       ff		      .byte.b	$ff
   7763  205a					      repend
   7764  205b		       ff		      .byte.b	$ff
   7763  205b					      repend
   7764  205c		       ff		      .byte.b	$ff
   7763  205c					      repend
   7764  205d		       ff		      .byte.b	$ff
   7763  205d					      repend
   7764  205e		       ff		      .byte.b	$ff
   7763  205e					      repend
   7764  205f		       ff		      .byte.b	$ff
   7763  205f					      repend
   7764  2060		       ff		      .byte.b	$ff
   7763  2060					      repend
   7764  2061		       ff		      .byte.b	$ff
   7763  2061					      repend
   7764  2062		       ff		      .byte.b	$ff
   7763  2062					      repend
   7764  2063		       ff		      .byte.b	$ff
   7763  2063					      repend
   7764  2064		       ff		      .byte.b	$ff
   7763  2064					      repend
   7764  2065		       ff		      .byte.b	$ff
   7763  2065					      repend
   7764  2066		       ff		      .byte.b	$ff
   7763  2066					      repend
   7764  2067		       ff		      .byte.b	$ff
   7763  2067					      repend
   7764  2068		       ff		      .byte.b	$ff
   7763  2068					      repend
   7764  2069		       ff		      .byte.b	$ff
   7763  2069					      repend
   7764  206a		       ff		      .byte.b	$ff
   7763  206a					      repend
   7764  206b		       ff		      .byte.b	$ff
   7763  206b					      repend
   7764  206c		       ff		      .byte.b	$ff
   7763  206c					      repend
   7764  206d		       ff		      .byte.b	$ff
   7763  206d					      repend
   7764  206e		       ff		      .byte.b	$ff
   7763  206e					      repend
   7764  206f		       ff		      .byte.b	$ff
   7763  206f					      repend
   7764  2070		       ff		      .byte.b	$ff
   7763  2070					      repend
   7764  2071		       ff		      .byte.b	$ff
   7763  2071					      repend
   7764  2072		       ff		      .byte.b	$ff
   7763  2072					      repend
   7764  2073		       ff		      .byte.b	$ff
   7763  2073					      repend
   7764  2074		       ff		      .byte.b	$ff
   7763  2074					      repend
   7764  2075		       ff		      .byte.b	$ff
   7763  2075					      repend
   7764  2076		       ff		      .byte.b	$ff
   7763  2076					      repend
   7764  2077		       ff		      .byte.b	$ff
   7763  2077					      repend
   7764  2078		       ff		      .byte.b	$ff
   7763  2078					      repend
   7764  2079		       ff		      .byte.b	$ff
   7763  2079					      repend
   7764  207a		       ff		      .byte.b	$ff
   7763  207a					      repend
   7764  207b		       ff		      .byte.b	$ff
   7763  207b					      repend
   7764  207c		       ff		      .byte.b	$ff
   7763  207c					      repend
   7764  207d		       ff		      .byte.b	$ff
   7763  207d					      repend
   7764  207e		       ff		      .byte.b	$ff
   7763  207e					      repend
   7764  207f		       ff		      .byte.b	$ff
   7763  207f					      repend
   7764  2080		       ff		      .byte.b	$ff
   7763  2080					      repend
   7764  2081		       ff		      .byte.b	$ff
   7763  2081					      repend
   7764  2082		       ff		      .byte.b	$ff
   7763  2082					      repend
   7764  2083		       ff		      .byte.b	$ff
   7763  2083					      repend
   7764  2084		       ff		      .byte.b	$ff
   7763  2084					      repend
   7764  2085		       ff		      .byte.b	$ff
   7763  2085					      repend
   7764  2086		       ff		      .byte.b	$ff
   7763  2086					      repend
   7764  2087		       ff		      .byte.b	$ff
   7763  2087					      repend
   7764  2088		       ff		      .byte.b	$ff
   7763  2088					      repend
   7764  2089		       ff		      .byte.b	$ff
   7763  2089					      repend
   7764  208a		       ff		      .byte.b	$ff
   7763  208a					      repend
   7764  208b		       ff		      .byte.b	$ff
   7763  208b					      repend
   7764  208c		       ff		      .byte.b	$ff
   7763  208c					      repend
   7764  208d		       ff		      .byte.b	$ff
   7763  208d					      repend
   7764  208e		       ff		      .byte.b	$ff
   7763  208e					      repend
   7764  208f		       ff		      .byte.b	$ff
   7763  208f					      repend
   7764  2090		       ff		      .byte.b	$ff
   7763  2090					      repend
   7764  2091		       ff		      .byte.b	$ff
   7763  2091					      repend
   7764  2092		       ff		      .byte.b	$ff
   7763  2092					      repend
   7764  2093		       ff		      .byte.b	$ff
   7763  2093					      repend
   7764  2094		       ff		      .byte.b	$ff
   7763  2094					      repend
   7764  2095		       ff		      .byte.b	$ff
   7763  2095					      repend
   7764  2096		       ff		      .byte.b	$ff
   7763  2096					      repend
   7764  2097		       ff		      .byte.b	$ff
   7763  2097					      repend
   7764  2098		       ff		      .byte.b	$ff
   7763  2098					      repend
   7764  2099		       ff		      .byte.b	$ff
   7763  2099					      repend
   7764  209a		       ff		      .byte.b	$ff
   7763  209a					      repend
   7764  209b		       ff		      .byte.b	$ff
   7763  209b					      repend
   7764  209c		       ff		      .byte.b	$ff
   7763  209c					      repend
   7764  209d		       ff		      .byte.b	$ff
   7763  209d					      repend
   7764  209e		       ff		      .byte.b	$ff
   7763  209e					      repend
   7764  209f		       ff		      .byte.b	$ff
   7763  209f					      repend
   7764  20a0		       ff		      .byte.b	$ff
   7763  20a0					      repend
   7764  20a1		       ff		      .byte.b	$ff
   7763  20a1					      repend
   7764  20a2		       ff		      .byte.b	$ff
   7763  20a2					      repend
   7764  20a3		       ff		      .byte.b	$ff
   7763  20a3					      repend
   7764  20a4		       ff		      .byte.b	$ff
   7763  20a4					      repend
   7764  20a5		       ff		      .byte.b	$ff
   7763  20a5					      repend
   7764  20a6		       ff		      .byte.b	$ff
   7763  20a6					      repend
   7764  20a7		       ff		      .byte.b	$ff
   7763  20a7					      repend
   7764  20a8		       ff		      .byte.b	$ff
   7763  20a8					      repend
   7764  20a9		       ff		      .byte.b	$ff
   7763  20a9					      repend
   7764  20aa		       ff		      .byte.b	$ff
   7763  20aa					      repend
   7764  20ab		       ff		      .byte.b	$ff
   7763  20ab					      repend
   7764  20ac		       ff		      .byte.b	$ff
   7763  20ac					      repend
   7764  20ad		       ff		      .byte.b	$ff
   7763  20ad					      repend
   7764  20ae		       ff		      .byte.b	$ff
   7763  20ae					      repend
   7764  20af		       ff		      .byte.b	$ff
   7763  20af					      repend
   7764  20b0		       ff		      .byte.b	$ff
   7763  20b0					      repend
   7764  20b1		       ff		      .byte.b	$ff
   7763  20b1					      repend
   7764  20b2		       ff		      .byte.b	$ff
   7763  20b2					      repend
   7764  20b3		       ff		      .byte.b	$ff
   7763  20b3					      repend
   7764  20b4		       ff		      .byte.b	$ff
   7763  20b4					      repend
   7764  20b5		       ff		      .byte.b	$ff
   7763  20b5					      repend
   7764  20b6		       ff		      .byte.b	$ff
   7763  20b6					      repend
   7764  20b7		       ff		      .byte.b	$ff
   7763  20b7					      repend
   7764  20b8		       ff		      .byte.b	$ff
   7763  20b8					      repend
   7764  20b9		       ff		      .byte.b	$ff
   7763  20b9					      repend
   7764  20ba		       ff		      .byte.b	$ff
   7763  20ba					      repend
   7764  20bb		       ff		      .byte.b	$ff
   7763  20bb					      repend
   7764  20bc		       ff		      .byte.b	$ff
   7763  20bc					      repend
   7764  20bd		       ff		      .byte.b	$ff
   7763  20bd					      repend
   7764  20be		       ff		      .byte.b	$ff
   7763  20be					      repend
   7764  20bf		       ff		      .byte.b	$ff
   7763  20bf					      repend
   7764  20c0		       ff		      .byte.b	$ff
   7763  20c0					      repend
   7764  20c1		       ff		      .byte.b	$ff
   7763  20c1					      repend
   7764  20c2		       ff		      .byte.b	$ff
   7763  20c2					      repend
   7764  20c3		       ff		      .byte.b	$ff
   7763  20c3					      repend
   7764  20c4		       ff		      .byte.b	$ff
   7763  20c4					      repend
   7764  20c5		       ff		      .byte.b	$ff
   7763  20c5					      repend
   7764  20c6		       ff		      .byte.b	$ff
   7763  20c6					      repend
   7764  20c7		       ff		      .byte.b	$ff
   7763  20c7					      repend
   7764  20c8		       ff		      .byte.b	$ff
   7763  20c8					      repend
   7764  20c9		       ff		      .byte.b	$ff
   7763  20c9					      repend
   7764  20ca		       ff		      .byte.b	$ff
   7763  20ca					      repend
   7764  20cb		       ff		      .byte.b	$ff
   7763  20cb					      repend
   7764  20cc		       ff		      .byte.b	$ff
   7763  20cc					      repend
   7764  20cd		       ff		      .byte.b	$ff
   7763  20cd					      repend
   7764  20ce		       ff		      .byte.b	$ff
   7763  20ce					      repend
   7764  20cf		       ff		      .byte.b	$ff
   7763  20cf					      repend
   7764  20d0		       ff		      .byte.b	$ff
   7763  20d0					      repend
   7764  20d1		       ff		      .byte.b	$ff
   7763  20d1					      repend
   7764  20d2		       ff		      .byte.b	$ff
   7763  20d2					      repend
   7764  20d3		       ff		      .byte.b	$ff
   7763  20d3					      repend
   7764  20d4		       ff		      .byte.b	$ff
   7763  20d4					      repend
   7764  20d5		       ff		      .byte.b	$ff
   7763  20d5					      repend
   7764  20d6		       ff		      .byte.b	$ff
   7763  20d6					      repend
   7764  20d7		       ff		      .byte.b	$ff
   7763  20d7					      repend
   7764  20d8		       ff		      .byte.b	$ff
   7763  20d8					      repend
   7764  20d9		       ff		      .byte.b	$ff
   7763  20d9					      repend
   7764  20da		       ff		      .byte.b	$ff
   7763  20da					      repend
   7764  20db		       ff		      .byte.b	$ff
   7763  20db					      repend
   7764  20dc		       ff		      .byte.b	$ff
   7763  20dc					      repend
   7764  20dd		       ff		      .byte.b	$ff
   7763  20dd					      repend
   7764  20de		       ff		      .byte.b	$ff
   7763  20de					      repend
   7764  20df		       ff		      .byte.b	$ff
   7763  20df					      repend
   7764  20e0		       ff		      .byte.b	$ff
   7763  20e0					      repend
   7764  20e1		       ff		      .byte.b	$ff
   7763  20e1					      repend
   7764  20e2		       ff		      .byte.b	$ff
   7763  20e2					      repend
   7764  20e3		       ff		      .byte.b	$ff
   7763  20e3					      repend
   7764  20e4		       ff		      .byte.b	$ff
   7763  20e4					      repend
   7764  20e5		       ff		      .byte.b	$ff
   7763  20e5					      repend
   7764  20e6		       ff		      .byte.b	$ff
   7763  20e6					      repend
   7764  20e7		       ff		      .byte.b	$ff
   7763  20e7					      repend
   7764  20e8		       ff		      .byte.b	$ff
   7763  20e8					      repend
   7764  20e9		       ff		      .byte.b	$ff
   7763  20e9					      repend
   7764  20ea		       ff		      .byte.b	$ff
   7763  20ea					      repend
   7764  20eb		       ff		      .byte.b	$ff
   7763  20eb					      repend
   7764  20ec		       ff		      .byte.b	$ff
   7763  20ec					      repend
   7764  20ed		       ff		      .byte.b	$ff
   7763  20ed					      repend
   7764  20ee		       ff		      .byte.b	$ff
   7763  20ee					      repend
   7764  20ef		       ff		      .byte.b	$ff
   7763  20ef					      repend
   7764  20f0		       ff		      .byte.b	$ff
   7763  20f0					      repend
   7764  20f1		       ff		      .byte.b	$ff
   7763  20f1					      repend
   7764  20f2		       ff		      .byte.b	$ff
   7763  20f2					      repend
   7764  20f3		       ff		      .byte.b	$ff
   7763  20f3					      repend
   7764  20f4		       ff		      .byte.b	$ff
   7763  20f4					      repend
   7764  20f5		       ff		      .byte.b	$ff
   7763  20f5					      repend
   7764  20f6		       ff		      .byte.b	$ff
   7763  20f6					      repend
   7764  20f7		       ff		      .byte.b	$ff
   7763  20f7					      repend
   7764  20f8		       ff		      .byte.b	$ff
   7763  20f8					      repend
   7764  20f9		       ff		      .byte.b	$ff
   7763  20f9					      repend
   7764  20fa		       ff		      .byte.b	$ff
   7763  20fa					      repend
   7764  20fb		       ff		      .byte.b	$ff
   7763  20fb					      repend
   7764  20fc		       ff		      .byte.b	$ff
   7763  20fc					      repend
   7764  20fd		       ff		      .byte.b	$ff
   7763  20fd					      repend
   7764  20fe		       ff		      .byte.b	$ff
   7763  20fe					      repend
   7764  20ff		       ff		      .byte.b	$ff
   7765  2100					      repend
   7766  2100				   .
   7767  2100							; 
   7768  2100
   7769  2100				   .
   7770  2100							; 
   7771  2100
   7772  2100				   .
   7773  2100							; 
   7774  2100
   7775  2100				   .
   7776  2100							; 
   7777  2100
   7778  2100				   .
   7779  2100							; 
   7780  2100
   7781  2100				   .
   7782  2100							; 
   7783  2100
   7784  2100				   .
   7785  2100							; 
   7786  2100
   7787  2100				   .
   7788  2100							; 
   7789  2100
   7790  2100				   .
   7791  2100							; 
   7792  2100
   7793  2100				   .
   7794  2100							; 
   7795  2100
   7796  2100				   .
   7797  2100							; 
   7798  2100
   7799  2100				   .
   7800  2100							; 
   7801  2100
   7802  2100				   .
   7803  2100							; 
   7804  2100
   7805  2100				   .__Main_Loop
   7806  2100							; __Main_Loop
   7807  2100
   7808  2100				   .
   7809  2100							; 
   7810  2100
   7811  2100				   .
   7812  2100							; 
   7813  2100
   7814  2100				   .
   7815  2100							; 
   7816  2100
   7817  2100				   .
   7818  2100							; 
   7819  2100
   7820  2100				   .
   7821  2100							; 
   7822  2100
   7823  2100				   .
   7824  2100							; 
   7825  2100
   7826  2100				   .
   7827  2100							; 
   7828  2100
   7829  2100				   .
   7830  2100							; 
   7831  2100
   7832  2100				   .
   7833  2100							; 
   7834  2100
   7835  2100				   .
   7836  2100							; 
   7837  2100
   7838  2100				   .
   7839  2100							; 
   7840  2100
   7841  2100				   .
   7842  2100							; 
   7843  2100
   7844  2100				   .L0406		;  _Master_Counter  =	_Master_Counter  +  1
   7845  2100
   7846  2100		       e6 d8		      INC	_Master_Counter
   7847  2102				   .
   7848  2102							; 
   7849  2102
   7850  2102				   .
   7851  2102							; 
   7852  2102
   7853  2102				   .
   7854  2102							; 
   7855  2102
   7856  2102				   .
   7857  2102							; 
   7858  2102
   7859  2102				   .L0407		;  if _Master_Counter	<  7 then goto __Skip_Frame_Counter
   7860  2102
   7861  2102		       a5 d8		      LDA	_Master_Counter
   7862  2104		       c9 07		      CMP	#7
   7863  2106		       b0 03		      BCS	.skipL0407
   7864  2108				   .condpart44
   7865  2108		       4c 23 31 	      jmp	.__Skip_Frame_Counter
   7866  210b
   7867  210b				   .skipL0407
   7868  210b				   .
   7869  210b							; 
   7870  210b
   7871  210b				   .
   7872  210b							; 
   7873  210b
   7874  210b				   .
   7875  210b							; 
   7876  210b
   7877  210b				   .
   7878  210b							; 
   7879  210b
   7880  210b				   .L0408		;  _Frame_Counter  =  _Frame_Counter  +  1
   7881  210b
   7882  210b		       e6 d9		      INC	_Frame_Counter
   7883  210d				   .
   7884  210d							; 
   7885  210d
   7886  210d				   .
   7887  210d							; 
   7888  210d
   7889  210d				   .
   7890  210d							; 
   7891  210d
   7892  210d				   .
   7893  210d							; 
   7894  210d
   7895  210d				   .L0409		;  _Tentacle_Grab_Counter  =  _Tentacle_Grab_Counter  +  1
   7896  210d
   7897  210d		       e6 e6		      INC	_Tentacle_Grab_Counter
   7898  210f				   .
   7899  210f							; 
   7900  210f
   7901  210f				   .
   7902  210f							; 
   7903  210f
   7904  210f				   .
   7905  210f							; 
   7906  210f
   7907  210f				   .
   7908  210f							; 
   7909  210f
   7910  210f				   .L0410		;  _Corrdd_App_Counter  =  _Corrdd_App_Counter  +  1
   7911  210f
   7912  210f		       e6 ea		      INC	_Corrdd_App_Counter
   7913  2111				   .
   7914  2111							; 
   7915  2111
   7916  2111				   .
   7917  2111							; 
   7918  2111
   7919  2111				   .
   7920  2111							; 
   7921  2111
   7922  2111				   .
   7923  2111							; 
   7924  2111
   7925  2111				   .L0411		;  _Level_Counter  =  _Level_Counter  +  1
   7926  2111
   7927  2111		       e6 be		      INC	_Level_Counter
   7928  2113				   .
   7929  2113							; 
   7930  2113
   7931  2113				   .
   7932  2113							; 
   7933  2113
   7934  2113				   .
   7935  2113							; 
   7936  2113
   7937  2113				   .
   7938  2113							; 
   7939  2113
   7940  2113				   .L0412		;  _Master_Counter  =	0
   7941  2113
   7942  2113		       a9 00		      LDA	#0
   7943  2115		       85 d8		      STA	_Master_Counter
   7944  2117				   .
   7945  2117							; 
   7946  2117
   7947  2117				   .
   7948  2117							; 
   7949  2117
   7950  2117				   .
   7951  2117							; 
   7952  2117
   7953  2117				   .
   7954  2117							; 
   7955  2117
   7956  2117				   .
   7957  2117							; 
   7958  2117
   7959  2117				   .L0413		;  if _Frame_Counter  =  4 then _Frame_Counter  =  0  :  _Wrothopod_Counter  =  _Wrothopod_Counter  +	1
   7960  2117
   7961  2117		       a5 d9		      LDA	_Frame_Counter
   7962  2119		       c9 04		      CMP	#4
   7963  211b		       d0 06		      BNE	.skipL0413
   7964  211d				   .condpart45
   7965  211d		       a9 00		      LDA	#0
   7966  211f		       85 d9		      STA	_Frame_Counter
   7967  2121		       e6 e7		      INC	_Wrothopod_Counter
   7968  2123				   .skipL0413
   7969  2123				   .
   7970  2123							; 
   7971  2123
   7972  2123				   .__Skip_Frame_Counter
   7973  2123							; __Skip_Frame_Counter
   7974  2123
   7975  2123				   .
   7976  2123							; 
   7977  2123
   7978  2123				   .
   7979  2123							; 
   7980  2123
   7981  2123				   .
   7982  2123							; 
   7983  2123
   7984  2123				   .
   7985  2123							; 
   7986  2123
   7987  2123				   .
   7988  2123							; 
   7989  2123
   7990  2123				   .
   7991  2123							; 
   7992  2123
   7993  2123				   .
   7994  2123							; 
   7995  2123
   7996  2123				   .
   7997  2123							; 
   7998  2123
   7999  2123				   .
   8000  2123							; 
   8001  2123
   8002  2123				   .
   8003  2123							; 
   8004  2123
   8005  2123				   .
   8006  2123							; 
   8007  2123
   8008  2123				   .
   8009  2123							; 
   8010  2123
   8011  2123				   .
   8012  2123							; 
   8013  2123
   8014  2123				   .
   8015  2123							; 
   8016  2123
   8017  2123				   .L0414		;  if !_Bit4_Game_Started{4} then goto __Skip_Game_Started
   8018  2123
   8019  2123		       a5 c4		      LDA	_Bit4_Game_Started
   8020  2125		       29 10		      AND	#16
   8021  2127		       d0 03		      BNE	.skipL0414
   8022  2129				   .condpart46
   8023  2129		       4c 3b 31 	      jmp	.__Skip_Game_Started
   8024  212c
   8025  212c				   .skipL0414
   8026  212c				   .
   8027  212c							; 
   8028  212c
   8029  212c				   .
   8030  212c							; 
   8031  212c
   8032  212c				   .
   8033  212c							; 
   8034  212c
   8035  212c				   .
   8036  212c							; 
   8037  212c
   8038  212c				   .L0415		;  if player0y  >  35 then _Bit4_Game_Started{4}  =  0
   8039  212c
   8040  212c		       a9 23		      LDA	#35
   8041  212e		       c5 85		      CMP	player0y
   8042  2130		       b0 06		      BCS	.skipL0415
   8043  2132				   .condpart47
   8044  2132		       a5 c4		      LDA	_Bit4_Game_Started
   8045  2134		       29 ef		      AND	#239
   8046  2136		       85 c4		      STA	_Bit4_Game_Started
   8047  2138				   .skipL0415
   8048  2138				   .
   8049  2138							; 
   8050  2138
   8051  2138				   .L0416		;  goto __GoD
   8052  2138
   8053  2138		       4c 94 38 	      jmp	.__GoD
   8054  213b
   8055  213b				   .
   8056  213b							; 
   8057  213b
   8058  213b				   .__Skip_Game_Started
   8059  213b							; __Skip_Game_Started
   8060  213b
   8061  213b				   .
   8062  213b							; 
   8063  213b
   8064  213b				   .
   8065  213b							; 
   8066  213b
   8067  213b				   .
   8068  213b							; 
   8069  213b
   8070  213b				   .
   8071  213b							; 
   8072  213b
   8073  213b				   .
   8074  213b							; 
   8075  213b
   8076  213b				   .
   8077  213b							; 
   8078  213b
   8079  213b				   .
   8080  213b							; 
   8081  213b
   8082  213b				   .
   8083  213b							; 
   8084  213b
   8085  213b				   .
   8086  213b							; 
   8087  213b
   8088  213b				   .
   8089  213b							; 
   8090  213b
   8091  213b				   .
   8092  213b							; 
   8093  213b
   8094  213b				   .L0417		;  temp5  =  SWCHA / 16
   8095  213b
   8096  213b		       ad 80 02 	      LDA	SWCHA
   8097  213e		       4a		      lsr
   8098  213f		       4a		      lsr
   8099  2140		       4a		      lsr
   8100  2141		       4a		      lsr
   8101  2142		       85 a0		      STA	temp5
   8102  2144				   .
   8103  2144							; 
   8104  2144
   8105  2144				   .
   8106  2144							; 
   8107  2144
   8108  2144				   .
   8109  2144							; 
   8110  2144
   8111  2144				   .
   8112  2144							; 
   8113  2144
   8114  2144				   .L0418		;  if !_Bit1_Auto_Play{1} then goto __AP_Skip_Joy
   8115  2144
   8116  2144		       a5 d2		      LDA	_Bit1_Auto_Play
   8117  2146		       29 02		      AND	#2
   8118  2148		       d0 03		      BNE	.skipL0418
   8119  214a				   .condpart48
   8120  214a		       4c 2e 32 	      jmp	.__AP_Skip_Joy
   8121  214d
   8122  214d				   .skipL0418
   8123  214d				   .
   8124  214d							; 
   8125  214d
   8126  214d				   .
   8127  214d							; 
   8128  214d
   8129  214d				   .
   8130  214d							; 
   8131  214d
   8132  214d				   .
   8133  214d							; 
   8134  214d
   8135  214d				   .L0419		;  if switchselect then _sc1 = _Score1_Mem  :	_sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem  :  goto __Skip_to_Select bank1
   8136  214d
   8137  214d		       a9 02		      lda	#2
   8138  214f		       2c 82 02 	      bit	SWCHB
   8139  2152		       d0 1e		      BNE	.skipL0419
   8140  2154				   .condpart49
   8141  2154		       a5 a8		      LDA	_Score1_Mem
   8142  2156		       85 93		      STA	_sc1
   8143  2158		       a5 a9		      LDA	_Score2_Mem
   8144  215a		       85 94		      STA	_sc2
   8145  215c		       a5 aa		      LDA	_Score3_Mem
   8146  215e		       85 95		      STA	_sc3
   8147  2160		       85 ee		      sta	temp7
   8148  2162		       a9 12		      lda	#>(.__Skip_to_Select-1)
   8149  2164		       48		      pha
   8150  2165		       a9 c5		      lda	#<(.__Skip_to_Select-1)
   8151  2167		       48		      pha
   8152  2168		       a5 ee		      lda	temp7
   8153  216a		       48		      pha
   8154  216b		       8a		      txa
   8155  216c		       48		      pha
   8156  216d		       a2 01		      ldx	#1
   8157  216f		       4c eb ff 	      jmp	BS_jsr
   8158  2172				   .skipL0419
   8159  2172				   .
   8160  2172							; 
   8161  2172
   8162  2172				   .
   8163  2172							; 
   8164  2172
   8165  2172				   .
   8166  2172							; 
   8167  2172
   8168  2172				   .
   8169  2172							; 
   8170  2172
   8171  2172				   .L0420		;  temp5  =  rand
   8172  2172
   8173  2172		       a5 a2		      lda	rand
   8174  2174		       4a		      lsr
   8175  2175					      ifconst	rand16
   8176  2175		       26 d3		      rol	rand16
   8177  2177					      endif
   8178  2177		       90 02		      bcc	*+4
   8179  2179		       49 b4		      eor	#$B4
   8180  217b		       85 a2		      sta	rand
   8181  217d					      ifconst	rand16
   8182  217d		       45 d3		      eor	rand16
   8183  217f					      endif
   8184  217f		       85 a0		      STA	temp5
   8185  2181				   .
   8186  2181							; 
   8187  2181
   8188  2181				   .
   8189  2181							; 
   8190  2181
   8191  2181				   .
   8192  2181							; 
   8193  2181
   8194  2181				   .
   8195  2181							; 
   8196  2181
   8197  2181				   .L0421		;  if _Frame_Counter  =  0  &&  temp5	>  220 then _ML_Tmp_AP_Ship_Dir  =   ( rand & 15 ) 
   8198  2181
   8199  2181		       a5 d9		      LDA	_Frame_Counter
   8200  2183		       c9 00		      CMP	#0
   8201  2185		       d0 17		      BNE	.skipL0421
   8202  2187				   .condpart50
   8203  2187		       a9 dc		      LDA	#220
   8204  2189		       c5 a0		      CMP	temp5
   8205  218b		       b0 11		      BCS	.skip50then
   8206  218d				   .condpart51
   8207  218d							; complex statement detected
   8208  218d		       a5 a2		      lda	rand
   8209  218f		       4a		      lsr
   8210  2190					      ifconst	rand16
   8211  2190		       26 d3		      rol	rand16
   8212  2192					      endif
   8213  2192		       90 02		      bcc	*+4
   8214  2194		       49 b4		      eor	#$B4
   8215  2196		       85 a2		      sta	rand
   8216  2198					      ifconst	rand16
   8217  2198		       45 d3		      eor	rand16
   8218  219a					      endif
   8219  219a		       29 0f		      AND	#15
   8220  219c		       85 b8		      STA	_ML_Tmp_AP_Ship_Dir
   8221  219e				   .skip50then
   8222  219e				   .skipL0421
   8223  219e				   .
   8224  219e							; 
   8225  219e
   8226  219e				   .
   8227  219e							; 
   8228  219e
   8229  219e				   .
   8230  219e							; 
   8231  219e
   8232  219e				   .
   8233  219e							; 
   8234  219e
   8235  219e				   .L0422		;  if player0y  >  80 then _ML_Tmp_AP_Ship_Dir  =  14	:  temp6  =  rand  :  if temp6	>  128 then _ML_Tmp_AP_Ship_Dir  =  7
   8236  219e
   8237  219e		       a9 50		      LDA	#80
   8238  21a0		       c5 85		      CMP	player0y
   8239  21a2		       b0 1d		      BCS	.skipL0422
   8240  21a4				   .condpart52
   8241  21a4		       a9 0e		      LDA	#14
   8242  21a6		       85 b8		      STA	_ML_Tmp_AP_Ship_Dir
   8243  21a8		       a5 a2		      lda	rand
   8244  21aa		       4a		      lsr
   8245  21ab					      ifconst	rand16
   8246  21ab		       26 d3		      rol	rand16
   8247  21ad					      endif
   8248  21ad		       90 02		      bcc	*+4
   8249  21af		       49 b4		      eor	#$B4
   8250  21b1		       85 a2		      sta	rand
   8251  21b3					      ifconst	rand16
   8252  21b3		       45 d3		      eor	rand16
   8253  21b5					      endif
   8254  21b5		       85 a1		      STA	temp6
   8255  21b7		       a9 80		      LDA	#128
   8256  21b9		       c5 a1		      CMP	temp6
   8257  21bb		       b0 04		      BCS	.skip52then
   8258  21bd				   .condpart53
   8259  21bd		       a9 07		      LDA	#7
   8260  21bf		       85 b8		      STA	_ML_Tmp_AP_Ship_Dir
   8261  21c1				   .skip52then
   8262  21c1				   .skipL0422
   8263  21c1				   .
   8264  21c1							; 
   8265  21c1
   8266  21c1				   .
   8267  21c1							; 
   8268  21c1
   8269  21c1				   .
   8270  21c1							; 
   8271  21c1
   8272  21c1				   .
   8273  21c1							; 
   8274  21c1
   8275  21c1				   .L0423		;  if player0y  <  15 then _ML_Tmp_AP_Ship_Dir  =  13	:  temp6  =  rand  :  if temp6	>  128 then _ML_Tmp_AP_Ship_Dir  =  9
   8276  21c1
   8277  21c1		       a5 85		      LDA	player0y
   8278  21c3		       c9 0f		      CMP	#15
   8279  21c5		       b0 1d		      BCS	.skipL0423
   8280  21c7				   .condpart54
   8281  21c7		       a9 0d		      LDA	#13
   8282  21c9		       85 b8		      STA	_ML_Tmp_AP_Ship_Dir
   8283  21cb		       a5 a2		      lda	rand
   8284  21cd		       4a		      lsr
   8285  21ce					      ifconst	rand16
   8286  21ce		       26 d3		      rol	rand16
   8287  21d0					      endif
   8288  21d0		       90 02		      bcc	*+4
   8289  21d2		       49 b4		      eor	#$B4
   8290  21d4		       85 a2		      sta	rand
   8291  21d6					      ifconst	rand16
   8292  21d6		       45 d3		      eor	rand16
   8293  21d8					      endif
   8294  21d8		       85 a1		      STA	temp6
   8295  21da		       a9 80		      LDA	#128
   8296  21dc		       c5 a1		      CMP	temp6
   8297  21de		       b0 04		      BCS	.skip54then
   8298  21e0				   .condpart55
   8299  21e0		       a9 09		      LDA	#9
   8300  21e2		       85 b8		      STA	_ML_Tmp_AP_Ship_Dir
   8301  21e4				   .skip54then
   8302  21e4				   .skipL0423
   8303  21e4				   .
   8304  21e4							; 
   8305  21e4
   8306  21e4				   .
   8307  21e4							; 
   8308  21e4
   8309  21e4				   .
   8310  21e4							; 
   8311  21e4
   8312  21e4				   .
   8313  21e4							; 
   8314  21e4
   8315  21e4				   .L0424		;  if player0x  >  130 then _ML_Tmp_AP_Ship_Dir  =  11  :  temp6  =  rand  :  if temp6  >  128 then _ML_Tmp_AP_Ship_Dir  =  9
   8316  21e4
   8317  21e4		       a9 82		      LDA	#130
   8318  21e6		       c5 80		      CMP	player0x
   8319  21e8		       b0 1d		      BCS	.skipL0424
   8320  21ea				   .condpart56
   8321  21ea		       a9 0b		      LDA	#11
   8322  21ec		       85 b8		      STA	_ML_Tmp_AP_Ship_Dir
   8323  21ee		       a5 a2		      lda	rand
   8324  21f0		       4a		      lsr
   8325  21f1					      ifconst	rand16
   8326  21f1		       26 d3		      rol	rand16
   8327  21f3					      endif
   8328  21f3		       90 02		      bcc	*+4
   8329  21f5		       49 b4		      eor	#$B4
   8330  21f7		       85 a2		      sta	rand
   8331  21f9					      ifconst	rand16
   8332  21f9		       45 d3		      eor	rand16
   8333  21fb					      endif
   8334  21fb		       85 a1		      STA	temp6
   8335  21fd		       a9 80		      LDA	#128
   8336  21ff		       c5 a1		      CMP	temp6
   8337  2201		       b0 04		      BCS	.skip56then
   8338  2203				   .condpart57
   8339  2203		       a9 09		      LDA	#9
   8340  2205		       85 b8		      STA	_ML_Tmp_AP_Ship_Dir
   8341  2207				   .skip56then
   8342  2207				   .skipL0424
   8343  2207				   .
   8344  2207							; 
   8345  2207
   8346  2207				   .
   8347  2207							; 
   8348  2207
   8349  2207				   .
   8350  2207							; 
   8351  2207
   8352  2207				   .
   8353  2207							; 
   8354  2207
   8355  2207				   .L0425		;  if player0x  <  22 then _ML_Tmp_AP_Ship_Dir  =  7  :  temp6  =  rand  :  if temp6  >  128 then _ML_Tmp_AP_Ship_Dir	=  5
   8356  2207
   8357  2207		       a5 80		      LDA	player0x
   8358  2209		       c9 16		      CMP	#22
   8359  220b		       b0 1d		      BCS	.skipL0425
   8360  220d				   .condpart58
   8361  220d		       a9 07		      LDA	#7
   8362  220f		       85 b8		      STA	_ML_Tmp_AP_Ship_Dir
   8363  2211		       a5 a2		      lda	rand
   8364  2213		       4a		      lsr
   8365  2214					      ifconst	rand16
   8366  2214		       26 d3		      rol	rand16
   8367  2216					      endif
   8368  2216		       90 02		      bcc	*+4
   8369  2218		       49 b4		      eor	#$B4
   8370  221a		       85 a2		      sta	rand
   8371  221c					      ifconst	rand16
   8372  221c		       45 d3		      eor	rand16
   8373  221e					      endif
   8374  221e		       85 a1		      STA	temp6
   8375  2220		       a9 80		      LDA	#128
   8376  2222		       c5 a1		      CMP	temp6
   8377  2224		       b0 04		      BCS	.skip58then
   8378  2226				   .condpart59
   8379  2226		       a9 05		      LDA	#5
   8380  2228		       85 b8		      STA	_ML_Tmp_AP_Ship_Dir
   8381  222a				   .skip58then
   8382  222a				   .skipL0425
   8383  222a				   .
   8384  222a							; 
   8385  222a
   8386  222a				   .
   8387  222a							; 
   8388  222a
   8389  222a				   .
   8390  222a							; 
   8391  222a
   8392  222a				   .
   8393  222a							; 
   8394  222a
   8395  222a				   .L0426		;  temp5  =  _ML_Tmp_AP_Ship_Dir
   8396  222a
   8397  222a		       a5 b8		      LDA	_ML_Tmp_AP_Ship_Dir
   8398  222c		       85 a0		      STA	temp5
   8399  222e				   .
   8400  222e							; 
   8401  222e
   8402  222e				   .__AP_Skip_Joy
   8403  222e							; __AP_Skip_Joy
   8404  222e
   8405  222e				   .
   8406  222e							; 
   8407  222e
   8408  222e				   .
   8409  222e							; 
   8410  222e
   8411  222e				   .
   8412  222e							; 
   8413  222e
   8414  222e				   .
   8415  222e							; 
   8416  222e
   8417  222e				   .
   8418  222e							; 
   8419  222e
   8420  222e				   .
   8421  222e							; 
   8422  222e
   8423  222e				   .
   8424  222e							; 
   8425  222e
   8426  222e				   .
   8427  222e							; 
   8428  222e
   8429  222e				   .
   8430  222e							; 
   8431  222e
   8432  222e				   .
   8433  222e							; 
   8434  222e
   8435  222e				   .L0427		;  if _Bit1_Auto_Play{1} then goto __AP_Joystick
   8436  222e
   8437  222e		       a5 d2		      LDA	_Bit1_Auto_Play
   8438  2230		       29 02		      AND	#2
   8439  2232		       f0 03		      BEQ	.skipL0427
   8440  2234				   .condpart60
   8441  2234		       4c 40 32 	      jmp	.__AP_Joystick
   8442  2237
   8443  2237				   .skipL0427
   8444  2237				   .
   8445  2237							; 
   8446  2237
   8447  2237				   .
   8448  2237							; 
   8449  2237
   8450  2237				   .
   8451  2237							; 
   8452  2237
   8453  2237				   .
   8454  2237							; 
   8455  2237
   8456  2237				   .
   8457  2237							; 
   8458  2237
   8459  2237				   .L0428		;  if !_Bit2_Right_Left_Hand{2} then goto __Skip_Right_Hand
   8460  2237
   8461  2237		       a5 d2		      LDA	_Bit2_Right_Left_Hand
   8462  2239		       29 04		      AND	#4
   8463  223b		       d0 03		      BNE	.skipL0428
   8464  223d				   .condpart61
   8465  223d		       4c 6b 32 	      jmp	.__Skip_Right_Hand
   8466  2240
   8467  2240				   .skipL0428
   8468  2240				   .
   8469  2240							; 
   8470  2240
   8471  2240				   .__AP_Joystick
   8472  2240							; __AP_Joystick
   8473  2240
   8474  2240				   .
   8475  2240							; 
   8476  2240
   8477  2240				   .
   8478  2240							; 
   8479  2240
   8480  2240				   .
   8481  2240							; 
   8482  2240
   8483  2240				   .
   8484  2240							; 
   8485  2240
   8486  2240				   .L0429		;  on temp5 goto __Slide __Slide __Slide __Slide __Slide __GoDR __GoUR __GoR __Slide __GoDL __GoUL __GoL __Slide __GoD __GoU __Slide
   8487  2240
   8488  2240		       a6 a0		      LDX	temp5
   8489  2242		       bd 4b 32 	      LDA	.L0429jumptablehi,x
   8490  2245		       48		      PHA
   8491  2246		       bd 5b 32 	      LDA	.L0429jumptablelo,x
   8492  2249		       48		      PHA
   8493  224a		       60		      RTS
   8494  224b				   .L0429jumptablehi
   8495  224b		       32		      .byte.b	>(.__Slide-1)
   8496  224c		       32		      .byte.b	>(.__Slide-1)
   8497  224d		       32		      .byte.b	>(.__Slide-1)
   8498  224e		       32		      .byte.b	>(.__Slide-1)
   8499  224f		       32		      .byte.b	>(.__Slide-1)
   8500  2250		       3a		      .byte.b	>(.__GoDR-1)
   8501  2251		       39		      .byte.b	>(.__GoUR-1)
   8502  2252		       39		      .byte.b	>(.__GoR-1)
   8503  2253		       32		      .byte.b	>(.__Slide-1)
   8504  2254		       3a		      .byte.b	>(.__GoDL-1)
   8505  2255		       39		      .byte.b	>(.__GoUL-1)
   8506  2256		       38		      .byte.b	>(.__GoL-1)
   8507  2257		       32		      .byte.b	>(.__Slide-1)
   8508  2258		       38		      .byte.b	>(.__GoD-1)
   8509  2259		       38		      .byte.b	>(.__GoU-1)
   8510  225a		       32		      .byte.b	>(.__Slide-1)
   8511  225b				   .L0429jumptablelo
   8512  225b		       9e		      .byte.b	<(.__Slide-1)
   8513  225c		       9e		      .byte.b	<(.__Slide-1)
   8514  225d		       9e		      .byte.b	<(.__Slide-1)
   8515  225e		       9e		      .byte.b	<(.__Slide-1)
   8516  225f		       9e		      .byte.b	<(.__Slide-1)
   8517  2260		       c8		      .byte.b	<(.__GoDR-1)
   8518  2261		       fa		      .byte.b	<(.__GoUR-1)
   8519  2262		       3d		      .byte.b	<(.__GoR-1)
   8520  2263		       9e		      .byte.b	<(.__Slide-1)
   8521  2264		       62		      .byte.b	<(.__GoDL-1)
   8522  2265		       92		      .byte.b	<(.__GoUL-1)
   8523  2266		       e8		      .byte.b	<(.__GoL-1)
   8524  2267		       9e		      .byte.b	<(.__Slide-1)
   8525  2268		       93		      .byte.b	<(.__GoD-1)
   8526  2269		       3f		      .byte.b	<(.__GoU-1)
   8527  226a		       9e		      .byte.b	<(.__Slide-1)
   8528  226b				   .
   8529  226b							; 
   8530  226b
   8531  226b				   .__Skip_Right_Hand
   8532  226b							; __Skip_Right_Hand
   8533  226b
   8534  226b				   .
   8535  226b							; 
   8536  226b
   8537  226b				   .
   8538  226b							; 
   8539  226b
   8540  226b				   .
   8541  226b							; 
   8542  226b
   8543  226b				   .
   8544  226b							; 
   8545  226b
   8546  226b				   .L0430		;  if _Bit2_Right_Left_Hand{2} then goto __Skip_Left_Hand
   8547  226b
   8548  226b		       a5 d2		      LDA	_Bit2_Right_Left_Hand
   8549  226d		       29 04		      AND	#4
   8550  226f		       f0 03		      BEQ	.skipL0430
   8551  2271				   .condpart62
   8552  2271		       4c 9f 32 	      jmp	.__Skip_Left_Hand
   8553  2274
   8554  2274				   .skipL0430
   8555  2274				   .
   8556  2274							; 
   8557  2274
   8558  2274				   .
   8559  2274							; 
   8560  2274
   8561  2274				   .
   8562  2274							; 
   8563  2274
   8564  2274				   .
   8565  2274							; 
   8566  2274
   8567  2274				   .L0431		;  on temp5 goto __Slide __Slide __Slide __Slide __Slide __GoDL __GoDR __GoD __Slide __GoUL __GoUR __GoU __Slide __GoL __GoR __Slide
   8568  2274
   8569  2274		       a6 a0		      LDX	temp5
   8570  2276		       bd 7f 32 	      LDA	.L0431jumptablehi,x
   8571  2279		       48		      PHA
   8572  227a		       bd 8f 32 	      LDA	.L0431jumptablelo,x
   8573  227d		       48		      PHA
   8574  227e		       60		      RTS
   8575  227f				   .L0431jumptablehi
   8576  227f		       32		      .byte.b	>(.__Slide-1)
   8577  2280		       32		      .byte.b	>(.__Slide-1)
   8578  2281		       32		      .byte.b	>(.__Slide-1)
   8579  2282		       32		      .byte.b	>(.__Slide-1)
   8580  2283		       32		      .byte.b	>(.__Slide-1)
   8581  2284		       3a		      .byte.b	>(.__GoDL-1)
   8582  2285		       3a		      .byte.b	>(.__GoDR-1)
   8583  2286		       38		      .byte.b	>(.__GoD-1)
   8584  2287		       32		      .byte.b	>(.__Slide-1)
   8585  2288		       39		      .byte.b	>(.__GoUL-1)
   8586  2289		       39		      .byte.b	>(.__GoUR-1)
   8587  228a		       38		      .byte.b	>(.__GoU-1)
   8588  228b		       32		      .byte.b	>(.__Slide-1)
   8589  228c		       38		      .byte.b	>(.__GoL-1)
   8590  228d		       39		      .byte.b	>(.__GoR-1)
   8591  228e		       32		      .byte.b	>(.__Slide-1)
   8592  228f				   .L0431jumptablelo
   8593  228f		       9e		      .byte.b	<(.__Slide-1)
   8594  2290		       9e		      .byte.b	<(.__Slide-1)
   8595  2291		       9e		      .byte.b	<(.__Slide-1)
   8596  2292		       9e		      .byte.b	<(.__Slide-1)
   8597  2293		       9e		      .byte.b	<(.__Slide-1)
   8598  2294		       62		      .byte.b	<(.__GoDL-1)
   8599  2295		       c8		      .byte.b	<(.__GoDR-1)
   8600  2296		       93		      .byte.b	<(.__GoD-1)
   8601  2297		       9e		      .byte.b	<(.__Slide-1)
   8602  2298		       92		      .byte.b	<(.__GoUL-1)
   8603  2299		       fa		      .byte.b	<(.__GoUR-1)
   8604  229a		       3f		      .byte.b	<(.__GoU-1)
   8605  229b		       9e		      .byte.b	<(.__Slide-1)
   8606  229c		       e8		      .byte.b	<(.__GoL-1)
   8607  229d		       3d		      .byte.b	<(.__GoR-1)
   8608  229e		       9e		      .byte.b	<(.__Slide-1)
   8609  229f				   .
   8610  229f							; 
   8611  229f
   8612  229f				   .__Skip_Left_Hand
   8613  229f							; __Skip_Left_Hand
   8614  229f
   8615  229f				   .
   8616  229f							; 
   8617  229f
   8618  229f				   .
   8619  229f							; 
   8620  229f
   8621  229f				   .
   8622  229f							; 
   8623  229f
   8624  229f				   .
   8625  229f							; 
   8626  229f
   8627  229f				   .
   8628  229f							; 
   8629  229f
   8630  229f				   .
   8631  229f							; 
   8632  229f
   8633  229f				   .
   8634  229f							; 
   8635  229f
   8636  229f				   .
   8637  229f							; 
   8638  229f
   8639  229f				   .
   8640  229f							; 
   8641  229f
   8642  229f				   .
   8643  229f							; 
   8644  229f
   8645  229f				   .
   8646  229f							; 
   8647  229f
   8648  229f				   .__Slide
   8649  229f							; __Slide
   8650  229f
   8651  229f				   .
   8652  229f							; 
   8653  229f
   8654  229f				   .
   8655  229f							; 
   8656  229f
   8657  229f				   .
   8658  229f							; 
   8659  229f
   8660  229f				   .
   8661  229f							; 
   8662  229f
   8663  229f				   .L0432		;  if !_Slide_Speed then goto __Done_Slide
   8664  229f
   8665  229f		       a5 e1		      LDA	_Slide_Speed
   8666  22a1		       d0 03		      BNE	.skipL0432
   8667  22a3				   .condpart63
   8668  22a3		       4c 43 34 	      jmp	.__Done_Slide
   8669  22a6
   8670  22a6				   .skipL0432
   8671  22a6				   .
   8672  22a6							; 
   8673  22a6
   8674  22a6				   .
   8675  22a6							; 
   8676  22a6
   8677  22a6				   .
   8678  22a6							; 
   8679  22a6
   8680  22a6				   .
   8681  22a6							; 
   8682  22a6
   8683  22a6				   .L0433		;  _Slide_Counter  =  _Slide_Counter  +  1
   8684  22a6
   8685  22a6		       e6 e0		      INC	_Slide_Counter
   8686  22a8				   .
   8687  22a8							; 
   8688  22a8
   8689  22a8				   .
   8690  22a8							; 
   8691  22a8
   8692  22a8				   .
   8693  22a8							; 
   8694  22a8
   8695  22a8				   .
   8696  22a8							; 
   8697  22a8
   8698  22a8				   .L0434		;  if _Slide_Counter  <  _Slide_Speed then goto __Done_Slide
   8699  22a8
   8700  22a8		       a5 e0		      LDA	_Slide_Counter
   8701  22aa		       c5 e1		      CMP	_Slide_Speed
   8702  22ac		       b0 03		      BCS	.skipL0434
   8703  22ae				   .condpart64
   8704  22ae		       4c 43 34 	      jmp	.__Done_Slide
   8705  22b1
   8706  22b1				   .skipL0434
   8707  22b1				   .
   8708  22b1							; 
   8709  22b1
   8710  22b1				   .
   8711  22b1							; 
   8712  22b1
   8713  22b1				   .
   8714  22b1							; 
   8715  22b1
   8716  22b1				   .
   8717  22b1							; 
   8718  22b1
   8719  22b1				   .L0435		;  _Slide_Speed  =  _Slide_Speed  *  2
   8720  22b1
   8721  22b1		       a5 e1		      LDA	_Slide_Speed
   8722  22b3		       0a		      asl
   8723  22b4		       85 e1		      STA	_Slide_Speed
   8724  22b6				   .
   8725  22b6							; 
   8726  22b6
   8727  22b6				   .
   8728  22b6							; 
   8729  22b6
   8730  22b6				   .
   8731  22b6							; 
   8732  22b6
   8733  22b6				   .
   8734  22b6							; 
   8735  22b6
   8736  22b6				   .L0436		;  if !_Bit3_Ship_Yanked_Down{3} then goto __Skip_Grab_Slide
   8737  22b6
   8738  22b6		       a5 c4		      LDA	_Bit3_Ship_Yanked_Down
   8739  22b8		       29 08		      AND	#8
   8740  22ba		       d0 03		      BNE	.skipL0436
   8741  22bc				   .condpart65
   8742  22bc		       4c da 32 	      jmp	.__Skip_Grab_Slide
   8743  22bf
   8744  22bf				   .skipL0436
   8745  22bf				   .
   8746  22bf							; 
   8747  22bf
   8748  22bf				   .
   8749  22bf							; 
   8750  22bf
   8751  22bf				   .
   8752  22bf							; 
   8753  22bf
   8754  22bf				   .
   8755  22bf							; 
   8756  22bf
   8757  22bf				   .L0437		;  _Bit4_Ship_U_Slide{4}  =  0  :  _Bit5_Ship_D_Slide{5}  =  1
   8758  22bf
   8759  22bf		       a5 c1		      LDA	_Bit4_Ship_U_Slide
   8760  22c1		       29 ef		      AND	#239
   8761  22c3		       85 c1		      STA	_Bit4_Ship_U_Slide
   8762  22c5		       a5 c1		      LDA	_Bit5_Ship_D_Slide
   8763  22c7		       09 20		      ORA	#32
   8764  22c9		       85 c1		      STA	_Bit5_Ship_D_Slide
   8765  22cb				   .
   8766  22cb							; 
   8767  22cb
   8768  22cb				   .L0438		;  _Bit6_Ship_L_Slide{6}  =  0  :  _Bit7_Ship_R_Slide{7}  =  0
   8769  22cb
   8770  22cb		       a5 c1		      LDA	_Bit6_Ship_L_Slide
   8771  22cd		       29 bf		      AND	#191
   8772  22cf		       85 c1		      STA	_Bit6_Ship_L_Slide
   8773  22d1		       a5 c1		      LDA	_Bit7_Ship_R_Slide
   8774  22d3		       29 7f		      AND	#127
   8775  22d5		       85 c1		      STA	_Bit7_Ship_R_Slide
   8776  22d7				   .
   8777  22d7							; 
   8778  22d7
   8779  22d7				   .L0439		;  goto __Skip_Normal_Slide_Setup
   8780  22d7
   8781  22d7		       4c 66 33 	      jmp	.__Skip_Normal_Slide_Setup
   8782  22da
   8783  22da				   .
   8784  22da							; 
   8785  22da
   8786  22da				   .__Skip_Grab_Slide
   8787  22da							; __Skip_Grab_Slide
   8788  22da
   8789  22da				   .
   8790  22da							; 
   8791  22da
   8792  22da				   .
   8793  22da							; 
   8794  22da
   8795  22da				   .
   8796  22da							; 
   8797  22da
   8798  22da				   .
   8799  22da							; 
   8800  22da
   8801  22da				   .
   8802  22da							; 
   8803  22da
   8804  22da				   .
   8805  22da							; 
   8806  22da
   8807  22da				   .L0440		;  if !_Bit1_P0_Hit_Seaweed{1} then goto __Skip_Reverse_Bounce_Slide
   8808  22da
   8809  22da		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
   8810  22dc		       29 02		      AND	#2
   8811  22de		       d0 03		      BNE	.skipL0440
   8812  22e0				   .condpart66
   8813  22e0		       4c 26 33 	      jmp	.__Skip_Reverse_Bounce_Slide
   8814  22e3
   8815  22e3				   .skipL0440
   8816  22e3				   .
   8817  22e3							; 
   8818  22e3
   8819  22e3				   .
   8820  22e3							; 
   8821  22e3
   8822  22e3				   .
   8823  22e3							; 
   8824  22e3
   8825  22e3				   .
   8826  22e3							; 
   8827  22e3
   8828  22e3				   .L0441		;  _Bit4_Ship_U_Slide{4}  =  !_Bit0_Ship_Facing_Up{0}	:  _Bit5_Ship_D_Slide{5}  =  !_Bit1_Ship_Facing_Down{1}
   8829  22e3
   8830  22e3		       a5 c1		      LDA	_Bit0_Ship_Facing_Up
   8831  22e5		       29 01		      AND	#1
   8832  22e7		       08		      PHP
   8833  22e8		       a5 c1		      LDA	_Bit4_Ship_U_Slide
   8834  22ea		       29 ef		      AND	#239
   8835  22ec		       28		      PLP
   8836  22ed		       d0 02		      .byte.b	$D0, $02
   8837  22ef		       09 10		      ORA	#16
   8838  22f1		       85 c1		      STA	_Bit4_Ship_U_Slide
   8839  22f3		       a5 c1		      LDA	_Bit1_Ship_Facing_Down
   8840  22f5		       29 02		      AND	#2
   8841  22f7		       08		      PHP
   8842  22f8		       a5 c1		      LDA	_Bit5_Ship_D_Slide
   8843  22fa		       29 df		      AND	#223
   8844  22fc		       28		      PLP
   8845  22fd		       d0 02		      .byte.b	$D0, $02
   8846  22ff		       09 20		      ORA	#32
   8847  2301		       85 c1		      STA	_Bit5_Ship_D_Slide
   8848  2303				   .
   8849  2303							; 
   8850  2303
   8851  2303				   .L0442		;  _Bit6_Ship_L_Slide{6}  =  !_Bit2_Ship_Facing_Left{2}  :  _Bit7_Ship_R_Slide{7}  =  !_Bit3_Ship_Facing_Right{3}
   8852  2303
   8853  2303		       a5 c1		      LDA	_Bit2_Ship_Facing_Left
   8854  2305		       29 04		      AND	#4
   8855  2307		       08		      PHP
   8856  2308		       a5 c1		      LDA	_Bit6_Ship_L_Slide
   8857  230a		       29 bf		      AND	#191
   8858  230c		       28		      PLP
   8859  230d		       d0 02		      .byte.b	$D0, $02
   8860  230f		       09 40		      ORA	#64
   8861  2311		       85 c1		      STA	_Bit6_Ship_L_Slide
   8862  2313		       a5 c1		      LDA	_Bit3_Ship_Facing_Right
   8863  2315		       29 08		      AND	#8
   8864  2317		       08		      PHP
   8865  2318		       a5 c1		      LDA	_Bit7_Ship_R_Slide
   8866  231a		       29 7f		      AND	#127
   8867  231c		       28		      PLP
   8868  231d		       d0 02		      .byte.b	$D0, $02
   8869  231f		       09 80		      ORA	#128
   8870  2321		       85 c1		      STA	_Bit7_Ship_R_Slide
   8871  2323				   .
   8872  2323							; 
   8873  2323
   8874  2323				   .L0443		;  goto __Skip_Normal_Slide_Setup
   8875  2323
   8876  2323		       4c 66 33 	      jmp	.__Skip_Normal_Slide_Setup
   8877  2326
   8878  2326				   .
   8879  2326							; 
   8880  2326
   8881  2326				   .__Skip_Reverse_Bounce_Slide
   8882  2326							; __Skip_Reverse_Bounce_Slide
   8883  2326
   8884  2326				   .
   8885  2326							; 
   8886  2326
   8887  2326				   .
   8888  2326							; 
   8889  2326
   8890  2326				   .
   8891  2326							; 
   8892  2326
   8893  2326				   .
   8894  2326							; 
   8895  2326
   8896  2326				   .
   8897  2326							; 
   8898  2326
   8899  2326				   .
   8900  2326							; 
   8901  2326
   8902  2326				   .L0444		;  _Bit4_Ship_U_Slide{4}  =  _Bit0_Ship_Facing_Up{0}  :  _Bit5_Ship_D_Slide{5}  =  _Bit1_Ship_Facing_Down{1}
   8903  2326
   8904  2326		       a5 c1		      LDA	_Bit0_Ship_Facing_Up
   8905  2328		       29 01		      AND	#1
   8906  232a		       08		      PHP
   8907  232b		       a5 c1		      LDA	_Bit4_Ship_U_Slide
   8908  232d		       29 ef		      AND	#239
   8909  232f		       28		      PLP
   8910  2330		       f0 02		      .byte.b	$F0, $02
   8911  2332		       09 10		      ORA	#16
   8912  2334		       85 c1		      STA	_Bit4_Ship_U_Slide
   8913  2336		       a5 c1		      LDA	_Bit1_Ship_Facing_Down
   8914  2338		       29 02		      AND	#2
   8915  233a		       08		      PHP
   8916  233b		       a5 c1		      LDA	_Bit5_Ship_D_Slide
   8917  233d		       29 df		      AND	#223
   8918  233f		       28		      PLP
   8919  2340		       f0 02		      .byte.b	$F0, $02
   8920  2342		       09 20		      ORA	#32
   8921  2344		       85 c1		      STA	_Bit5_Ship_D_Slide
   8922  2346				   .L0445		;  _Bit6_Ship_L_Slide{6}  =  _Bit2_Ship_Facing_Left{2}  :  _Bit7_Ship_R_Slide{7}  =  _Bit3_Ship_Facing_Right{3}
   8923  2346
   8924  2346		       a5 c1		      LDA	_Bit2_Ship_Facing_Left
   8925  2348		       29 04		      AND	#4
   8926  234a		       08		      PHP
   8927  234b		       a5 c1		      LDA	_Bit6_Ship_L_Slide
   8928  234d		       29 bf		      AND	#191
   8929  234f		       28		      PLP
   8930  2350		       f0 02		      .byte.b	$F0, $02
   8931  2352		       09 40		      ORA	#64
   8932  2354		       85 c1		      STA	_Bit6_Ship_L_Slide
   8933  2356		       a5 c1		      LDA	_Bit3_Ship_Facing_Right
   8934  2358		       29 08		      AND	#8
   8935  235a		       08		      PHP
   8936  235b		       a5 c1		      LDA	_Bit7_Ship_R_Slide
   8937  235d		       29 7f		      AND	#127
   8938  235f		       28		      PLP
   8939  2360		       f0 02		      .byte.b	$F0, $02
   8940  2362		       09 80		      ORA	#128
   8941  2364		       85 c1		      STA	_Bit7_Ship_R_Slide
   8942  2366				   .
   8943  2366							; 
   8944  2366
   8945  2366				   .__Skip_Normal_Slide_Setup
   8946  2366							; __Skip_Normal_Slide_Setup
   8947  2366
   8948  2366				   .
   8949  2366							; 
   8950  2366
   8951  2366				   .
   8952  2366							; 
   8953  2366
   8954  2366				   .
   8955  2366							; 
   8956  2366
   8957  2366				   .
   8958  2366							; 
   8959  2366
   8960  2366				   .
   8961  2366							; 
   8962  2366
   8963  2366				   .
   8964  2366							; 
   8965  2366
   8966  2366				   .
   8967  2366							; 
   8968  2366
   8969  2366				   .
   8970  2366							; 
   8971  2366
   8972  2366				   .
   8973  2366							; 
   8974  2366
   8975  2366				   .
   8976  2366							; 
   8977  2366
   8978  2366				   .L0446		;  if _Bit4_Ship_U_Slide{4}  &&  _P0_Up_Down  >  10 then _P0_Up_Down = _P0_Up_Down  -	1.02
   8979  2366
   8980  2366		       a5 c1		      LDA	_Bit4_Ship_U_Slide
   8981  2368		       29 10		      AND	#16
   8982  236a		       f0 13		      BEQ	.skipL0446
   8983  236c				   .condpart67
   8984  236c		       a9 0a		      LDA	#10
   8985  236e		       c5 85		      CMP	_P0_Up_Down
   8986  2370		       b0 0d		      BCS	.skip67then
   8987  2372				   .condpart68
   8988  2372		       a5 d5		      LDA	b
   8989  2374		       38		      SEC
   8990  2375		       e9 05		      SBC	#5
   8991  2377		       85 d5		      STA	b
   8992  2379		       a5 85		      LDA	_P0_Up_Down
   8993  237b		       e9 01		      SBC	#1
   8994  237d		       85 85		      STA	_P0_Up_Down
   8995  237f				   .skip67then
   8996  237f				   .skipL0446
   8997  237f				   .
   8998  237f							; 
   8999  237f
   9000  237f				   .L0447		;  if _Bit5_Ship_D_Slide{5}  &&  _P0_Up_Down  <  84 then _P0_Up_Down = _P0_Up_Down  +	1.02
   9001  237f
   9002  237f		       a5 c1		      LDA	_Bit5_Ship_D_Slide
   9003  2381		       29 20		      AND	#32
   9004  2383		       f0 13		      BEQ	.skipL0447
   9005  2385				   .condpart69
   9006  2385		       a5 85		      LDA	_P0_Up_Down
   9007  2387		       c9 54		      CMP	#84
   9008  2389		       b0 0d		      BCS	.skip69then
   9009  238b				   .condpart70
   9010  238b		       a5 d5		      LDA	b
   9011  238d		       18		      CLC
   9012  238e		       69 05		      ADC	#5
   9013  2390		       85 d5		      STA	b
   9014  2392		       a5 85		      LDA	_P0_Up_Down
   9015  2394		       69 01		      ADC	#1
   9016  2396		       85 85		      STA	_P0_Up_Down
   9017  2398				   .skip69then
   9018  2398				   .skipL0447
   9019  2398				   .
   9020  2398							; 
   9021  2398
   9022  2398				   .L0448		;  if _Bit6_Ship_L_Slide{6}  &&  _P0_Left_Right  >  18 then _P0_Left_Right = _P0_Left_Right  -  1.02
   9023  2398
   9024  2398		       24 c1		      BIT	_Bit6_Ship_L_Slide
   9025  239a		       50 13		      BVC	.skipL0448
   9026  239c				   .condpart71
   9027  239c		       a9 12		      LDA	#18
   9028  239e		       c5 80		      CMP	_P0_Left_Right
   9029  23a0		       b0 0d		      BCS	.skip71then
   9030  23a2				   .condpart72
   9031  23a2		       a5 d4		      LDA	a
   9032  23a4		       38		      SEC
   9033  23a5		       e9 05		      SBC	#5
   9034  23a7		       85 d4		      STA	a
   9035  23a9		       a5 80		      LDA	_P0_Left_Right
   9036  23ab		       e9 01		      SBC	#1
   9037  23ad		       85 80		      STA	_P0_Left_Right
   9038  23af				   .skip71then
   9039  23af				   .skipL0448
   9040  23af				   .
   9041  23af							; 
   9042  23af
   9043  23af				   .L0449		;  if _Bit7_Ship_R_Slide{7}  &&  _P0_Left_Right  <  137 then _P0_Left_Right = _P0_Left_Right  +  1.02
   9044  23af
   9045  23af		       24 c1		      BIT	_Bit7_Ship_R_Slide
   9046  23b1		       10 13		      BPL	.skipL0449
   9047  23b3				   .condpart73
   9048  23b3		       a5 80		      LDA	_P0_Left_Right
   9049  23b5		       c9 89		      CMP	#137
   9050  23b7		       b0 0d		      BCS	.skip73then
   9051  23b9				   .condpart74
   9052  23b9		       a5 d4		      LDA	a
   9053  23bb		       18		      CLC
   9054  23bc		       69 05		      ADC	#5
   9055  23be		       85 d4		      STA	a
   9056  23c0		       a5 80		      LDA	_P0_Left_Right
   9057  23c2		       69 01		      ADC	#1
   9058  23c4		       85 80		      STA	_P0_Left_Right
   9059  23c6				   .skip73then
   9060  23c6				   .skipL0449
   9061  23c6				   .
   9062  23c6							; 
   9063  23c6
   9064  23c6				   .
   9065  23c6							; 
   9066  23c6
   9067  23c6				   .
   9068  23c6							; 
   9069  23c6
   9070  23c6				   .
   9071  23c6							; 
   9072  23c6
   9073  23c6				   .L0450		;  if _Slide_Speed  =	128 then _Slide_Speed  =  0  :	_Bit1_P0_Hit_Seaweed{1}  =  0  :  _Bit3_Ship_Yanked_Down{3}  =	0
   9074  23c6
   9075  23c6		       a5 e1		      LDA	_Slide_Speed
   9076  23c8		       c9 80		      CMP	#128
   9077  23ca		       d0 10		      BNE	.skipL0450
   9078  23cc				   .condpart75
   9079  23cc		       a9 00		      LDA	#0
   9080  23ce		       85 e1		      STA	_Slide_Speed
   9081  23d0		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
   9082  23d2		       29 fd		      AND	#253
   9083  23d4		       85 c2		      STA	_Bit1_P0_Hit_Seaweed
   9084  23d6		       a5 c4		      LDA	_Bit3_Ship_Yanked_Down
   9085  23d8		       29 f7		      AND	#247
   9086  23da		       85 c4		      STA	_Bit3_Ship_Yanked_Down
   9087  23dc				   .skipL0450
   9088  23dc				   .
   9089  23dc							; 
   9090  23dc
   9091  23dc				   .L0451		;  goto __Done_Slide
   9092  23dc
   9093  23dc		       4c 43 34 	      jmp	.__Done_Slide
   9094  23df
   9095  23df				   .
   9096  23df							; 
   9097  23df
   9098  23df				   .__Done_Joystick0
   9099  23df							; __Done_Joystick0
   9100  23df
   9101  23df				   .
   9102  23df							; 
   9103  23df
   9104  23df				   .
   9105  23df							; 
   9106  23df
   9107  23df				   .
   9108  23df							; 
   9109  23df
   9110  23df				   .
   9111  23df							; 
   9112  23df
   9113  23df				   .
   9114  23df							; 
   9115  23df
   9116  23df				   .
   9117  23df							; 
   9118  23df
   9119  23df				   .
   9120  23df							; 
   9121  23df
   9122  23df				   .
   9123  23df							; 
   9124  23df
   9125  23df				   .
   9126  23df							; 
   9127  23df
   9128  23df				   .
   9129  23df							; 
   9130  23df
   9131  23df				   .L0452		;  _Slide_Counter  =  0  :  _Bit1_P0_Hit_Seaweed{1}  =  0
   9132  23df
   9133  23df		       a9 00		      LDA	#0
   9134  23e1		       85 e0		      STA	_Slide_Counter
   9135  23e3		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
   9136  23e5		       29 fd		      AND	#253
   9137  23e7		       85 c2		      STA	_Bit1_P0_Hit_Seaweed
   9138  23e9				   .
   9139  23e9							; 
   9140  23e9
   9141  23e9				   .L0453		;  _Slide_Speed  =  1
   9142  23e9
   9143  23e9		       a9 01		      LDA	#1
   9144  23eb		       85 e1		      STA	_Slide_Speed
   9145  23ed				   .
   9146  23ed							; 
   9147  23ed
   9148  23ed				   .
   9149  23ed							; 
   9150  23ed
   9151  23ed				   .
   9152  23ed							; 
   9153  23ed
   9154  23ed				   .
   9155  23ed							; 
   9156  23ed
   9157  23ed				   .L0454		;  if _Bit0_Ship_Restrainer_U{0}  &&  _P0_Up_Down  <  11 then goto __Done_Slide
   9158  23ed
   9159  23ed		       a5 c3		      LDA	_Bit0_Ship_Restrainer_U
   9160  23ef		       4a		      LSR
   9161  23f0		       90 09		      BCC	.skipL0454
   9162  23f2				   .condpart76
   9163  23f2		       a5 85		      LDA	_P0_Up_Down
   9164  23f4		       c9 0b		      CMP	#11
   9165  23f6		       b0 03		      BCS	.skip76then
   9166  23f8				   .condpart77
   9167  23f8		       4c 43 34 	      jmp	.__Done_Slide
   9168  23fb
   9169  23fb				   .skip76then
   9170  23fb				   .skipL0454
   9171  23fb				   .
   9172  23fb							; 
   9173  23fb
   9174  23fb				   .L0455		;  if _Bit1_Ship_Restrainer_D{1}  &&  _P0_Up_Down  >  85 then goto __Done_Slide
   9175  23fb
   9176  23fb		       a5 c3		      LDA	_Bit1_Ship_Restrainer_D
   9177  23fd		       29 02		      AND	#2
   9178  23ff		       f0 09		      BEQ	.skipL0455
   9179  2401				   .condpart78
   9180  2401		       a9 55		      LDA	#85
   9181  2403		       c5 85		      CMP	_P0_Up_Down
   9182  2405		       b0 03		      BCS	.skip78then
   9183  2407				   .condpart79
   9184  2407		       4c 43 34 	      jmp	.__Done_Slide
   9185  240a
   9186  240a				   .skip78then
   9187  240a				   .skipL0455
   9188  240a				   .
   9189  240a							; 
   9190  240a
   9191  240a				   .
   9192  240a							; 
   9193  240a
   9194  240a				   .
   9195  240a							; 
   9196  240a
   9197  240a				   .
   9198  240a							; 
   9199  240a
   9200  240a				   .
   9201  240a							; 
   9202  240a
   9203  240a				   .
   9204  240a							; 
   9205  240a
   9206  240a				   .
   9207  240a							; 
   9208  240a
   9209  240a				   .
   9210  240a							; 
   9211  240a
   9212  240a				   .L0456		;  if !_Bit2_Move_Tentacle_Up{2} then goto __Skip_Up_Down_Check
   9213  240a
   9214  240a		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
   9215  240c		       29 04		      AND	#4
   9216  240e		       d0 03		      BNE	.skipL0456
   9217  2410				   .condpart80
   9218  2410		       4c 24 34 	      jmp	.__Skip_Up_Down_Check
   9219  2413
   9220  2413				   .skipL0456
   9221  2413				   .
   9222  2413							; 
   9223  2413
   9224  2413				   .L0457		;  if _Bit0_Ship_Restrainer_U{0}  ||  _Bit1_Ship_Restrainer_D{1} then goto __Done_Slide
   9225  2413
   9226  2413		       a5 c3		      LDA	_Bit0_Ship_Restrainer_U
   9227  2415		       4a		      LSR
   9228  2416		       90 03		      BCC	.skipL0457
   9229  2418				   .condpart81
   9230  2418		       4c 21 34 	      jmp	.condpart82
   9231  241b				   .skipL0457
   9232  241b		       a5 c3		      LDA	_Bit1_Ship_Restrainer_D
   9233  241d		       29 02		      AND	#2
   9234  241f		       f0 03		      BEQ	.skip11OR
   9235  2421				   .condpart82
   9236  2421		       4c 43 34 	      jmp	.__Done_Slide
   9237  2424
   9238  2424				   .skip11OR
   9239  2424				   .
   9240  2424							; 
   9241  2424
   9242  2424				   .__Skip_Up_Down_Check
   9243  2424							; __Skip_Up_Down_Check
   9244  2424
   9245  2424				   .
   9246  2424							; 
   9247  2424
   9248  2424				   .
   9249  2424							; 
   9250  2424
   9251  2424				   .
   9252  2424							; 
   9253  2424
   9254  2424				   .
   9255  2424							; 
   9256  2424
   9257  2424				   .
   9258  2424							; 
   9259  2424
   9260  2424				   .
   9261  2424							; 
   9262  2424
   9263  2424				   .L0458		;  if !_Bit2_Move_Tentacle_Up{2} then _Tentacle_Grab_Counter  =  0  :	_Bit2_Move_Tentacle_Up{2}  =  0  :  _Bit3_Ship_Yanked_Down{3}  =  0  :	goto __Skip_Tentacle_LR_Check
   9264  2424
   9265  2424		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
   9266  2426		       29 04		      AND	#4
   9267  2428		       d0 13		      BNE	.skipL0458
   9268  242a				   .condpart83
   9269  242a		       a9 00		      LDA	#0
   9270  242c		       85 e6		      STA	_Tentacle_Grab_Counter
   9271  242e		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
   9272  2430		       29 fb		      AND	#251
   9273  2432		       85 c4		      STA	_Bit2_Move_Tentacle_Up
   9274  2434		       a5 c4		      LDA	_Bit3_Ship_Yanked_Down
   9275  2436		       29 f7		      AND	#247
   9276  2438		       85 c4		      STA	_Bit3_Ship_Yanked_Down
   9277  243a		       4c 43 34 	      jmp	.__Skip_Tentacle_LR_Check
   9278  243d
   9279  243d				   .skipL0458
   9280  243d				   .
   9281  243d							; 
   9282  243d
   9283  243d				   .L0459		;  _Bit6_Manatee_Moved_Away{6}  =  1
   9284  243d
   9285  243d		       a5 c7		      LDA	_Bit6_Manatee_Moved_Away
   9286  243f		       09 40		      ORA	#64
   9287  2441		       85 c7		      STA	_Bit6_Manatee_Moved_Away
   9288  2443				   .
   9289  2443							; 
   9290  2443
   9291  2443				   .__Skip_Tentacle_LR_Check
   9292  2443							; __Skip_Tentacle_LR_Check
   9293  2443
   9294  2443				   .
   9295  2443							; 
   9296  2443
   9297  2443				   .__Done_Slide
   9298  2443							; __Done_Slide
   9299  2443
   9300  2443				   .
   9301  2443							; 
   9302  2443
   9303  2443				   .
   9304  2443							; 
   9305  2443
   9306  2443				   .
   9307  2443							; 
   9308  2443
   9309  2443				   .
   9310  2443							; 
   9311  2443
   9312  2443				   .
   9313  2443							; 
   9314  2443
   9315  2443				   .
   9316  2443							; 
   9317  2443
   9318  2443				   .
   9319  2443							; 
   9320  2443
   9321  2443				   .L0460		;  if _Bit3_Flip_P0{3} then REFP0  =  8
   9322  2443
   9323  2443		       a5 c2		      LDA	_Bit3_Flip_P0
   9324  2445		       29 08		      AND	#8
   9325  2447		       f0 04		      BEQ	.skipL0460
   9326  2449				   .condpart84
   9327  2449		       a9 08		      LDA	#8
   9328  244b		       85 0b		      STA	REFP0
   9329  244d				   .skipL0460
   9330  244d				   .
   9331  244d							; 
   9332  244d
   9333  244d				   .
   9334  244d							; 
   9335  244d
   9336  244d				   .
   9337  244d							; 
   9338  244d
   9339  244d				   .
   9340  244d							; 
   9341  244d
   9342  244d				   .
   9343  244d							; 
   9344  244d
   9345  244d				   .
   9346  244d							; 
   9347  244d
   9348  244d				   .
   9349  244d							; 
   9350  244d
   9351  244d				   .
   9352  244d							; 
   9353  244d
   9354  244d				   .
   9355  244d							; 
   9356  244d
   9357  244d				   .
   9358  244d							; 
   9359  244d
   9360  244d				   .L0461		;  if !_Bit1_Wrothopod_On{1} then goto __Done_Enemy_Anim
   9361  244d
   9362  244d		       a5 c5		      LDA	_Bit1_Wrothopod_On
   9363  244f		       29 02		      AND	#2
   9364  2451		       d0 03		      BNE	.skipL0461
   9365  2453				   .condpart85
   9366  2453		       4c 69 34 	      jmp	.__Done_Enemy_Anim
   9367  2456
   9368  2456				   .skipL0461
   9369  2456				   .
   9370  2456							; 
   9371  2456
   9372  2456				   .
   9373  2456							; 
   9374  2456
   9375  2456				   .
   9376  2456							; 
   9377  2456
   9378  2456				   .
   9379  2456							; 
   9380  2456
   9381  2456				   .L0462		;  on _Frame_Counter goto __P1_Plain __P1_Move01 __P1_Move02 __P1_Move01
   9382  2456
   9383  2456		       a6 d9		      LDX	_Frame_Counter
   9384  2458		       bd 61 34 	      LDA	.L0462jumptablehi,x
   9385  245b		       48		      PHA
   9386  245c		       bd 65 34 	      LDA	.L0462jumptablelo,x
   9387  245f		       48		      PHA
   9388  2460		       60		      RTS
   9389  2461				   .L0462jumptablehi
   9390  2461		       3c		      .byte.b	>(.__P1_Plain-1)
   9391  2462		       3c		      .byte.b	>(.__P1_Move01-1)
   9392  2463		       3c		      .byte.b	>(.__P1_Move02-1)
   9393  2464		       3c		      .byte.b	>(.__P1_Move01-1)
   9394  2465				   .L0462jumptablelo
   9395  2465		       5a		      .byte.b	<(.__P1_Plain-1)
   9396  2466		       79		      .byte.b	<(.__P1_Move01-1)
   9397  2467		       88		      .byte.b	<(.__P1_Move02-1)
   9398  2468		       79		      .byte.b	<(.__P1_Move01-1)
   9399  2469				   .
   9400  2469							; 
   9401  2469
   9402  2469				   .__Done_Enemy_Anim
   9403  2469							; __Done_Enemy_Anim
   9404  2469
   9405  2469				   .
   9406  2469							; 
   9407  2469
   9408  2469				   .
   9409  2469							; 
   9410  2469
   9411  2469				   .
   9412  2469							; 
   9413  2469
   9414  2469				   .
   9415  2469							; 
   9416  2469
   9417  2469				   .
   9418  2469							; 
   9419  2469
   9420  2469				   .
   9421  2469							; 
   9422  2469
   9423  2469				   .
   9424  2469							; 
   9425  2469
   9426  2469				   .
   9427  2469							; 
   9428  2469
   9429  2469				   .
   9430  2469							; 
   9431  2469
   9432  2469				   .
   9433  2469							; 
   9434  2469
   9435  2469				   .
   9436  2469							; 
   9437  2469
   9438  2469				   .
   9439  2469							; 
   9440  2469
   9441  2469				   .L0463		;  if !_Bit1_Auto_Play{1} then goto __AP_Skip_Fire_Torpedo
   9442  2469
   9443  2469		       a5 d2		      LDA	_Bit1_Auto_Play
   9444  246b		       29 02		      AND	#2
   9445  246d		       d0 03		      BNE	.skipL0463
   9446  246f				   .condpart86
   9447  246f		       4c 8d 34 	      jmp	.__AP_Skip_Fire_Torpedo
   9448  2472
   9449  2472				   .skipL0463
   9450  2472				   .
   9451  2472							; 
   9452  2472
   9453  2472				   .
   9454  2472							; 
   9455  2472
   9456  2472				   .
   9457  2472							; 
   9458  2472
   9459  2472				   .
   9460  2472							; 
   9461  2472
   9462  2472				   .L0464		;  temp5  =  rand  :  if temp5  >  20 then goto __Done_Fire
   9463  2472
   9464  2472		       a5 a2		      lda	rand
   9465  2474		       4a		      lsr
   9466  2475					      ifconst	rand16
   9467  2475		       26 d3		      rol	rand16
   9468  2477					      endif
   9469  2477		       90 02		      bcc	*+4
   9470  2479		       49 b4		      eor	#$B4
   9471  247b		       85 a2		      sta	rand
   9472  247d					      ifconst	rand16
   9473  247d		       45 d3		      eor	rand16
   9474  247f					      endif
   9475  247f		       85 a0		      STA	temp5
   9476  2481		       a9 14		      LDA	#20
   9477  2483		       c5 a0		      CMP	temp5
   9478  2485		       b0 03		      BCS	.skipL0464
   9479  2487				   .condpart87
   9480  2487		       4c 92 35 	      jmp	.__Done_Fire
   9481  248a
   9482  248a				   .skipL0464
   9483  248a				   .
   9484  248a							; 
   9485  248a
   9486  248a				   .L0465		;  goto __AP_Fire
   9487  248a
   9488  248a		       4c a3 34 	      jmp	.__AP_Fire
   9489  248d
   9490  248d				   .
   9491  248d							; 
   9492  248d
   9493  248d				   .__AP_Skip_Fire_Torpedo
   9494  248d							; __AP_Skip_Fire_Torpedo
   9495  248d
   9496  248d				   .
   9497  248d							; 
   9498  248d
   9499  248d				   .
   9500  248d							; 
   9501  248d
   9502  248d				   .
   9503  248d							; 
   9504  248d
   9505  248d				   .
   9506  248d							; 
   9507  248d
   9508  248d				   .L0466		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Done_Fire
   9509  248d
   9510  248d		       24 0c		      bit	INPT4
   9511  248f		       10 09		      BPL	.skipL0466
   9512  2491				   .condpart88
   9513  2491		       a5 c4		      LDA	_Bit1_FireB_Restrainer
   9514  2493		       29 fd		      AND	#253
   9515  2495		       85 c4		      STA	_Bit1_FireB_Restrainer
   9516  2497		       4c 92 35 	      jmp	.__Done_Fire
   9517  249a
   9518  249a				   .skipL0466
   9519  249a				   .
   9520  249a							; 
   9521  249a
   9522  249a				   .
   9523  249a							; 
   9524  249a
   9525  249a				   .
   9526  249a							; 
   9527  249a
   9528  249a				   .
   9529  249a							; 
   9530  249a
   9531  249a				   .
   9532  249a							; 
   9533  249a
   9534  249a				   .L0467		;  if _Bit1_FireB_Restrainer{1} then goto __Done_Fire
   9535  249a
   9536  249a		       a5 c4		      LDA	_Bit1_FireB_Restrainer
   9537  249c		       29 02		      AND	#2
   9538  249e		       f0 03		      BEQ	.skipL0467
   9539  24a0				   .condpart89
   9540  24a0		       4c 92 35 	      jmp	.__Done_Fire
   9541  24a3
   9542  24a3				   .skipL0467
   9543  24a3				   .
   9544  24a3							; 
   9545  24a3
   9546  24a3				   .__AP_Fire
   9547  24a3							; __AP_Fire
   9548  24a3
   9549  24a3				   .
   9550  24a3							; 
   9551  24a3
   9552  24a3				   .
   9553  24a3							; 
   9554  24a3
   9555  24a3				   .
   9556  24a3							; 
   9557  24a3
   9558  24a3				   .
   9559  24a3							; 
   9560  24a3
   9561  24a3				   .L0468		;  if _Bit0_Shot_Moving{0} then goto __Done_Fire
   9562  24a3
   9563  24a3		       a5 c2		      LDA	_Bit0_Shot_Moving
   9564  24a5		       4a		      LSR
   9565  24a6		       90 03		      BCC	.skipL0468
   9566  24a8				   .condpart90
   9567  24a8		       4c 92 35 	      jmp	.__Done_Fire
   9568  24ab
   9569  24ab				   .skipL0468
   9570  24ab				   .
   9571  24ab							; 
   9572  24ab
   9573  24ab				   .
   9574  24ab							; 
   9575  24ab
   9576  24ab				   .
   9577  24ab							; 
   9578  24ab
   9579  24ab				   .
   9580  24ab							; 
   9581  24ab
   9582  24ab				   .L0469		;  _Bit0_Shot_Moving{0}  =  1	:  _Shot_Bonus_Counter	=  0
   9583  24ab
   9584  24ab		       a5 c2		      LDA	_Bit0_Shot_Moving
   9585  24ad		       09 01		      ORA	#1
   9586  24af		       85 c2		      STA	_Bit0_Shot_Moving
   9587  24b1		       a9 00		      LDA	#0
   9588  24b3		       85 e4		      STA	_Shot_Bonus_Counter
   9589  24b5				   .
   9590  24b5							; 
   9591  24b5
   9592  24b5				   .
   9593  24b5							; 
   9594  24b5
   9595  24b5				   .
   9596  24b5							; 
   9597  24b5
   9598  24b5				   .
   9599  24b5							; 
   9600  24b5
   9601  24b5				   .L0470		;  _Bit2_Bonus_Limit{2}  =  0
   9602  24b5
   9603  24b5		       a5 c2		      LDA	_Bit2_Bonus_Limit
   9604  24b7		       29 fb		      AND	#251
   9605  24b9		       85 c2		      STA	_Bit2_Bonus_Limit
   9606  24bb				   .
   9607  24bb							; 
   9608  24bb
   9609  24bb				   .
   9610  24bb							; 
   9611  24bb
   9612  24bb				   .
   9613  24bb							; 
   9614  24bb
   9615  24bb				   .
   9616  24bb							; 
   9617  24bb
   9618  24bb				   .L0471		;  if _Bit0_Ship_Restrainer_U{0} then temp5  =  4  :  temp6  =  250
   9619  24bb
   9620  24bb		       a5 c3		      LDA	_Bit0_Ship_Restrainer_U
   9621  24bd		       4a		      LSR
   9622  24be		       90 08		      BCC	.skipL0471
   9623  24c0				   .condpart91
   9624  24c0		       a9 04		      LDA	#4
   9625  24c2		       85 a0		      STA	temp5
   9626  24c4		       a9 fa		      LDA	#250
   9627  24c6		       85 a1		      STA	temp6
   9628  24c8				   .skipL0471
   9629  24c8				   .L0472		;  if _Bit1_Ship_Restrainer_D{1} then temp5  =  4  :  temp6  =  255
   9630  24c8
   9631  24c8		       a5 c3		      LDA	_Bit1_Ship_Restrainer_D
   9632  24ca		       29 02		      AND	#2
   9633  24cc		       f0 08		      BEQ	.skipL0472
   9634  24ce				   .condpart92
   9635  24ce		       a9 04		      LDA	#4
   9636  24d0		       85 a0		      STA	temp5
   9637  24d2		       a9 ff		      LDA	#255
   9638  24d4		       85 a1		      STA	temp6
   9639  24d6				   .skipL0472
   9640  24d6				   .L0473		;  if _Bit2_Ship_Restrainer_L{2} then temp5  =  1  :  temp6  =  252
   9641  24d6
   9642  24d6		       a5 c3		      LDA	_Bit2_Ship_Restrainer_L
   9643  24d8		       29 04		      AND	#4
   9644  24da		       f0 08		      BEQ	.skipL0473
   9645  24dc				   .condpart93
   9646  24dc		       a9 01		      LDA	#1
   9647  24de		       85 a0		      STA	temp5
   9648  24e0		       a9 fc		      LDA	#252
   9649  24e2		       85 a1		      STA	temp6
   9650  24e4				   .skipL0473
   9651  24e4				   .L0474		;  if _Bit3_Ship_Restrainer_R{3} then temp5  =  7  :  temp6  =  252
   9652  24e4
   9653  24e4		       a5 c3		      LDA	_Bit3_Ship_Restrainer_R
   9654  24e6		       29 08		      AND	#8
   9655  24e8		       f0 08		      BEQ	.skipL0474
   9656  24ea				   .condpart94
   9657  24ea		       a9 07		      LDA	#7
   9658  24ec		       85 a0		      STA	temp5
   9659  24ee		       a9 fc		      LDA	#252
   9660  24f0		       85 a1		      STA	temp6
   9661  24f2				   .skipL0474
   9662  24f2				   .L0475		;  if _Bit4_Ship_Restrainer_UL{4} then temp5  =  1  :	temp6  =  250
   9663  24f2
   9664  24f2		       a5 c3		      LDA	_Bit4_Ship_Restrainer_UL
   9665  24f4		       29 10		      AND	#16
   9666  24f6		       f0 08		      BEQ	.skipL0475
   9667  24f8				   .condpart95
   9668  24f8		       a9 01		      LDA	#1
   9669  24fa		       85 a0		      STA	temp5
   9670  24fc		       a9 fa		      LDA	#250
   9671  24fe		       85 a1		      STA	temp6
   9672  2500				   .skipL0475
   9673  2500				   .L0476		;  if _Bit5_Ship_Restrainer_UR{5} then temp5  =  7  :	temp6  =  250
   9674  2500
   9675  2500		       a5 c3		      LDA	_Bit5_Ship_Restrainer_UR
   9676  2502		       29 20		      AND	#32
   9677  2504		       f0 08		      BEQ	.skipL0476
   9678  2506				   .condpart96
   9679  2506		       a9 07		      LDA	#7
   9680  2508		       85 a0		      STA	temp5
   9681  250a		       a9 fa		      LDA	#250
   9682  250c		       85 a1		      STA	temp6
   9683  250e				   .skipL0476
   9684  250e				   .L0477		;  if _Bit6_Ship_Restrainer_DL{6} then temp5  =  1  :	temp6  =  255
   9685  250e
   9686  250e		       24 c3		      BIT	_Bit6_Ship_Restrainer_DL
   9687  2510		       50 08		      BVC	.skipL0477
   9688  2512				   .condpart97
   9689  2512		       a9 01		      LDA	#1
   9690  2514		       85 a0		      STA	temp5
   9691  2516		       a9 ff		      LDA	#255
   9692  2518		       85 a1		      STA	temp6
   9693  251a				   .skipL0477
   9694  251a				   .L0478		;  if _Bit7_Ship_Restrainer_DR{7} then temp5  =  7  :	temp6  =  255
   9695  251a
   9696  251a		       24 c3		      BIT	_Bit7_Ship_Restrainer_DR
   9697  251c		       10 08		      BPL	.skipL0478
   9698  251e				   .condpart98
   9699  251e		       a9 07		      LDA	#7
   9700  2520		       85 a0		      STA	temp5
   9701  2522		       a9 ff		      LDA	#255
   9702  2524		       85 a1		      STA	temp6
   9703  2526				   .skipL0478
   9704  2526				   .
   9705  2526							; 
   9706  2526
   9707  2526				   .L0479		;  missile0x  =  player0x  +  temp5  :  missile0y  =  player0y  +  temp6
   9708  2526
   9709  2526		       a5 80		      LDA	player0x
   9710  2528		       18		      CLC
   9711  2529		       65 a0		      ADC	temp5
   9712  252b		       85 82		      STA	missile0x
   9713  252d		       a5 85		      LDA	player0y
   9714  252f		       18		      CLC
   9715  2530		       65 a1		      ADC	temp6
   9716  2532		       85 91		      STA	missile0y
   9717  2534				   .
   9718  2534							; 
   9719  2534
   9720  2534				   .
   9721  2534							; 
   9722  2534
   9723  2534				   .
   9724  2534							; 
   9725  2534
   9726  2534				   .
   9727  2534							; 
   9728  2534
   9729  2534				   .
   9730  2534							; 
   9731  2534
   9732  2534				   .L0480		;  _Bit4_Shot_U_Snapshot{4}  =  _Bit0_Ship_Facing_Up{0}
   9733  2534
   9734  2534		       a5 c1		      LDA	_Bit0_Ship_Facing_Up
   9735  2536		       29 01		      AND	#1
   9736  2538		       08		      PHP
   9737  2539		       a5 c2		      LDA	_Bit4_Shot_U_Snapshot
   9738  253b		       29 ef		      AND	#239
   9739  253d		       28		      PLP
   9740  253e		       f0 02		      .byte.b	$F0, $02
   9741  2540		       09 10		      ORA	#16
   9742  2542		       85 c2		      STA	_Bit4_Shot_U_Snapshot
   9743  2544				   .L0481		;  _Bit5_Shot_D_Snapshot{5}  =  _Bit1_Ship_Facing_Down{1}
   9744  2544
   9745  2544		       a5 c1		      LDA	_Bit1_Ship_Facing_Down
   9746  2546		       29 02		      AND	#2
   9747  2548		       08		      PHP
   9748  2549		       a5 c2		      LDA	_Bit5_Shot_D_Snapshot
   9749  254b		       29 df		      AND	#223
   9750  254d		       28		      PLP
   9751  254e		       f0 02		      .byte.b	$F0, $02
   9752  2550		       09 20		      ORA	#32
   9753  2552		       85 c2		      STA	_Bit5_Shot_D_Snapshot
   9754  2554				   .L0482		;  _Bit6_Shot_L_Snapshot{6}  =  _Bit2_Ship_Facing_Left{2}
   9755  2554
   9756  2554		       a5 c1		      LDA	_Bit2_Ship_Facing_Left
   9757  2556		       29 04		      AND	#4
   9758  2558		       08		      PHP
   9759  2559		       a5 c2		      LDA	_Bit6_Shot_L_Snapshot
   9760  255b		       29 bf		      AND	#191
   9761  255d		       28		      PLP
   9762  255e		       f0 02		      .byte.b	$F0, $02
   9763  2560		       09 40		      ORA	#64
   9764  2562		       85 c2		      STA	_Bit6_Shot_L_Snapshot
   9765  2564				   .L0483		;  _Bit7_Shot_R_Snapshot{7}  =  _Bit3_Ship_Facing_Right{3}
   9766  2564
   9767  2564		       a5 c1		      LDA	_Bit3_Ship_Facing_Right
   9768  2566		       29 08		      AND	#8
   9769  2568		       08		      PHP
   9770  2569		       a5 c2		      LDA	_Bit7_Shot_R_Snapshot
   9771  256b		       29 7f		      AND	#127
   9772  256d		       28		      PLP
   9773  256e		       f0 02		      .byte.b	$F0, $02
   9774  2570		       09 80		      ORA	#128
   9775  2572		       85 c2		      STA	_Bit7_Shot_R_Snapshot
   9776  2574				   .
   9777  2574							; 
   9778  2574
   9779  2574				   .
   9780  2574							; 
   9781  2574
   9782  2574				   .
   9783  2574							; 
   9784  2574
   9785  2574				   .
   9786  2574							; 
   9787  2574
   9788  2574				   .L0484		;  if _Ch0_Sound  =  _c_Ship_Bounce then goto __Done_Fire
   9789  2574
   9790  2574		       a5 da		      LDA	_Ch0_Sound
   9791  2576		       c9 03		      CMP	#_c_Ship_Bounce
   9792  2578		       d0 03		      BNE	.skipL0484
   9793  257a				   .condpart99
   9794  257a		       4c 92 35 	      jmp	.__Done_Fire
   9795  257d
   9796  257d				   .skipL0484
   9797  257d				   .
   9798  257d							; 
   9799  257d
   9800  257d				   .L0485		;  if _Ch0_Sound  =  _c_1000_Health then goto __Done_Fire
   9801  257d
   9802  257d		       a5 da		      LDA	_Ch0_Sound
   9803  257f		       c9 05		      CMP	#_c_1000_Health
   9804  2581		       d0 03		      BNE	.skipL0485
   9805  2583				   .condpart100
   9806  2583		       4c 92 35 	      jmp	.__Done_Fire
   9807  2586
   9808  2586				   .skipL0485
   9809  2586				   .
   9810  2586							; 
   9811  2586
   9812  2586				   .L0486		;  _Ch0_Counter  =  0	:  _Ch0_Sound  =  _c_Shoot  :  _Ch0_Duration  =  1
   9813  2586
   9814  2586		       a9 00		      LDA	#0
   9815  2588		       85 dc		      STA	_Ch0_Counter
   9816  258a		       a9 04		      LDA	#_c_Shoot
   9817  258c		       85 da		      STA	_Ch0_Sound
   9818  258e		       a9 01		      LDA	#1
   9819  2590		       85 db		      STA	_Ch0_Duration
   9820  2592				   .
   9821  2592							; 
   9822  2592
   9823  2592				   .__Done_Fire
   9824  2592							; __Done_Fire
   9825  2592
   9826  2592				   .
   9827  2592							; 
   9828  2592
   9829  2592				   .
   9830  2592							; 
   9831  2592
   9832  2592				   .
   9833  2592							; 
   9834  2592
   9835  2592				   .
   9836  2592							; 
   9837  2592
   9838  2592				   .
   9839  2592							; 
   9840  2592
   9841  2592				   .
   9842  2592							; 
   9843  2592
   9844  2592				   .
   9845  2592							; 
   9846  2592
   9847  2592				   .
   9848  2592							; 
   9849  2592
   9850  2592				   .
   9851  2592							; 
   9852  2592
   9853  2592				   .L0487		;  _Bit7_Vblank01{7}  =  1
   9854  2592
   9855  2592		       a5 c4		      LDA	_Bit7_Vblank01
   9856  2594		       09 80		      ORA	#128
   9857  2596		       85 c4		      STA	_Bit7_Vblank01
   9858  2598				   .
   9859  2598							; 
   9860  2598
   9861  2598				   .
   9862  2598							; 
   9863  2598
   9864  2598				   .
   9865  2598							; 
   9866  2598
   9867  2598				   .
   9868  2598							; 
   9869  2598
   9870  2598				   .
   9871  2598							; 
   9872  2598
   9873  2598				   .
   9874  2598							; 
   9875  2598
   9876  2598				   .
   9877  2598							; 
   9878  2598
   9879  2598				   .L0488		;  drawscreen
   9880  2598
   9881  2598		       85 ee		      sta	temp7
   9882  259a		       a9 35		      lda	#>(ret_point13-1)
   9883  259c		       48		      pha
   9884  259d		       a9 af		      lda	#<(ret_point13-1)
   9885  259f		       48		      pha
   9886  25a0		       a9 f5		      lda	#>(drawscreen-1)
   9887  25a2		       48		      pha
   9888  25a3		       a9 86		      lda	#<(drawscreen-1)
   9889  25a5		       48		      pha
   9890  25a6		       a5 ee		      lda	temp7
   9891  25a8		       48		      pha
   9892  25a9		       8a		      txa
   9893  25aa		       48		      pha
   9894  25ab		       a2 08		      ldx	#8
   9895  25ad		       4c eb ff 	      jmp	BS_jsr
   9896  25b0				   ret_point13
   9897  25b0				   .
   9898  25b0							; 
   9899  25b0
   9900  25b0				   .
   9901  25b0							; 
   9902  25b0
   9903  25b0				   .
   9904  25b0							; 
   9905  25b0
   9906  25b0				   .
   9907  25b0							; 
   9908  25b0
   9909  25b0				   .
   9910  25b0							; 
   9911  25b0
   9912  25b0				   .
   9913  25b0							; 
   9914  25b0
   9915  25b0				   .
   9916  25b0							; 
   9917  25b0
   9918  25b0				   .L0489		;  _Bit4_Corrdd_Can_Swd_Shot{4}  =  0
   9919  25b0
   9920  25b0		       a5 c6		      LDA	_Bit4_Corrdd_Can_Swd_Shot
   9921  25b2		       29 ef		      AND	#239
   9922  25b4		       85 c6		      STA	_Bit4_Corrdd_Can_Swd_Shot
   9923  25b6				   .
   9924  25b6							; 
   9925  25b6
   9926  25b6				   .
   9927  25b6							; 
   9928  25b6
   9929  25b6				   .
   9930  25b6							; 
   9931  25b6
   9932  25b6				   .
   9933  25b6							; 
   9934  25b6
   9935  25b6				   .
   9936  25b6							; 
   9937  25b6
   9938  25b6				   .
   9939  25b6							; 
   9940  25b6
   9941  25b6				   .
   9942  25b6							; 
   9943  25b6
   9944  25b6				   .
   9945  25b6							; 
   9946  25b6
   9947  25b6				   .
   9948  25b6							; 
   9949  25b6
   9950  25b6				   .
   9951  25b6							; 
   9952  25b6
   9953  25b6				   .
   9954  25b6							; 
   9955  25b6
   9956  25b6				   .L0490		;  if !collision(playfield,missile0) then goto __Skip_Missl_Pixl_Collisn
   9957  25b6
   9958  25b6		       24 04		      bit	CXM0FB
   9959  25b8		       30 03		      BMI	.skipL0490
   9960  25ba				   .condpart101
   9961  25ba		       4c ad 36 	      jmp	.__Skip_Missl_Pixl_Collisn
   9962  25bd
   9963  25bd				   .skipL0490
   9964  25bd				   .
   9965  25bd							; 
   9966  25bd
   9967  25bd				   .
   9968  25bd							; 
   9969  25bd
   9970  25bd				   .
   9971  25bd							; 
   9972  25bd
   9973  25bd				   .
   9974  25bd							; 
   9975  25bd
   9976  25bd				   .L0491		;  temp5  =   ( missile0x - 17 )  / 4	:  temp6  =   ( missile0y )  / 8
   9977  25bd
   9978  25bd							; complex statement detected
   9979  25bd		       a5 82		      LDA	missile0x
   9980  25bf		       38		      SEC
   9981  25c0		       e9 11		      SBC	#17
   9982  25c2		       4a		      lsr
   9983  25c3		       4a		      lsr
   9984  25c4		       85 a0		      STA	temp5
   9985  25c6							; complex statement detected
   9986  25c6		       a5 91		      LDA	missile0y
   9987  25c8		       4a		      lsr
   9988  25c9		       4a		      lsr
   9989  25ca		       4a		      lsr
   9990  25cb		       85 a1		      STA	temp6
   9991  25cd				   .
   9992  25cd							; 
   9993  25cd
   9994  25cd				   .
   9995  25cd							; 
   9996  25cd
   9997  25cd				   .
   9998  25cd							; 
   9999  25cd
  10000  25cd				   .
  10001  25cd							; 
  10002  25cd
  10003  25cd				   .L0492		;  if temp5  >  31 then goto __Skip_Missl_Pixl_Collisn
  10004  25cd
  10005  25cd		       a9 1f		      LDA	#31
  10006  25cf		       c5 a0		      CMP	temp5
  10007  25d1		       b0 03		      BCS	.skipL0492
  10008  25d3				   .condpart102
  10009  25d3		       4c ad 36 	      jmp	.__Skip_Missl_Pixl_Collisn
  10010  25d6
  10011  25d6				   .skipL0492
  10012  25d6				   .
  10013  25d6							; 
  10014  25d6
  10015  25d6				   .L0493		;  if temp6  >  10 then goto __Skip_Missl_Pixl_Collisn
  10016  25d6
  10017  25d6		       a9 0a		      LDA	#10
  10018  25d8		       c5 a1		      CMP	temp6
  10019  25da		       b0 03		      BCS	.skipL0493
  10020  25dc				   .condpart103
  10021  25dc		       4c ad 36 	      jmp	.__Skip_Missl_Pixl_Collisn
  10022  25df
  10023  25df				   .skipL0493
  10024  25df				   .
  10025  25df							; 
  10026  25df
  10027  25df				   .
  10028  25df							; 
  10029  25df
  10030  25df				   .
  10031  25df							; 
  10032  25df
  10033  25df				   .
  10034  25df							; 
  10035  25df
  10036  25df				   .L0494		;  if !pfread ( temp5 , temp6 )  then goto __Skip_Missl_Pixl_Collisn
  10037  25df
  10038  25df		       a5 a0		      LDA	temp5
  10039  25e1		       a4 a1		      LDY	temp6
  10040  25e3		       85 ee		      sta	temp7
  10041  25e5		       a9 35		      lda	#>(ret_point14-1)
  10042  25e7		       48		      pha
  10043  25e8		       a9 fa		      lda	#<(ret_point14-1)
  10044  25ea		       48		      pha
  10045  25eb		       a9 f3		      lda	#>(pfread-1)
  10046  25ed		       48		      pha
  10047  25ee		       a9 ac		      lda	#<(pfread-1)
  10048  25f0		       48		      pha
  10049  25f1		       a5 ee		      lda	temp7
  10050  25f3		       48		      pha
  10051  25f4		       8a		      txa
  10052  25f5		       48		      pha
  10053  25f6		       a2 08		      ldx	#8
  10054  25f8		       4c eb ff 	      jmp	BS_jsr
  10055  25fb				   ret_point14
  10056  25fb		       f0 03		      BEQ	.skipL0494
  10057  25fd				   .condpart104
  10058  25fd		       4c ad 36 	      jmp	.__Skip_Missl_Pixl_Collisn
  10059  2600
  10060  2600				   .skipL0494
  10061  2600				   .
  10062  2600							; 
  10063  2600
  10064  2600				   .
  10065  2600							; 
  10066  2600
  10067  2600				   .
  10068  2600							; 
  10069  2600
  10070  2600				   .
  10071  2600							; 
  10072  2600
  10073  2600				   .L0495		;  pfpixel temp5 temp6 off
  10074  2600
  10075  2600		       a2 01		      LDX	#1
  10076  2602		       a4 a1		      LDY	temp6
  10077  2604		       a5 a0		      LDA	temp5
  10078  2606		       85 ee		      sta	temp7
  10079  2608		       a9 36		      lda	#>(ret_point15-1)
  10080  260a		       48		      pha
  10081  260b		       a9 1d		      lda	#<(ret_point15-1)
  10082  260d		       48		      pha
  10083  260e		       a9 f3		      lda	#>(pfpixel-1)
  10084  2610		       48		      pha
  10085  2611		       a9 bb		      lda	#<(pfpixel-1)
  10086  2613		       48		      pha
  10087  2614		       a5 ee		      lda	temp7
  10088  2616		       48		      pha
  10089  2617		       8a		      txa
  10090  2618		       48		      pha
  10091  2619		       a2 08		      ldx	#8
  10092  261b		       4c eb ff 	      jmp	BS_jsr
  10093  261e				   ret_point15
  10094  261e				   .
  10095  261e							; 
  10096  261e
  10097  261e				   .
  10098  261e							; 
  10099  261e
  10100  261e				   .
  10101  261e							; 
  10102  261e
  10103  261e				   .
  10104  261e							; 
  10105  261e
  10106  261e				   .L0496		;  if _Bit1_Auto_Play{1} then goto __AP_Skip_Points
  10107  261e
  10108  261e		       a5 d2		      LDA	_Bit1_Auto_Play
  10109  2620		       29 02		      AND	#2
  10110  2622		       f0 03		      BEQ	.skipL0496
  10111  2624				   .condpart105
  10112  2624		       4c 46 36 	      jmp	.__AP_Skip_Points
  10113  2627
  10114  2627				   .skipL0496
  10115  2627				   .
  10116  2627							; 
  10117  2627
  10118  2627				   .
  10119  2627							; 
  10120  2627
  10121  2627				   .
  10122  2627							; 
  10123  2627
  10124  2627				   .
  10125  2627							; 
  10126  2627
  10127  2627				   .L0497		;  if !_Bit2_Bonus_Limit{2} then _Shot_Bonus_Counter  =  _Shot_Bonus_Counter  +  1
  10128  2627
  10129  2627		       a5 c2		      LDA	_Bit2_Bonus_Limit
  10130  2629		       29 04		      AND	#4
  10131  262b		       d0 02		      BNE	.skipL0497
  10132  262d				   .condpart106
  10133  262d		       e6 e4		      INC	_Shot_Bonus_Counter
  10134  262f				   .skipL0497
  10135  262f				   .
  10136  262f							; 
  10137  262f
  10138  262f				   .
  10139  262f							; 
  10140  262f
  10141  262f				   .
  10142  262f							; 
  10143  262f
  10144  262f				   .
  10145  262f							; 
  10146  262f
  10147  262f				   .L0498		;  if _Shot_Bonus_Counter  >  10 then _Shot_Bonus_Counter  =  10  :  _Bit2_Bonus_Limit{2}  =  1
  10148  262f
  10149  262f		       a9 0a		      LDA	#10
  10150  2631		       c5 e4		      CMP	_Shot_Bonus_Counter
  10151  2633		       b0 0a		      BCS	.skipL0498
  10152  2635				   .condpart107
  10153  2635		       a9 0a		      LDA	#10
  10154  2637		       85 e4		      STA	_Shot_Bonus_Counter
  10155  2639		       a5 c2		      LDA	_Bit2_Bonus_Limit
  10156  263b		       09 04		      ORA	#4
  10157  263d		       85 c2		      STA	_Bit2_Bonus_Limit
  10158  263f				   .skipL0498
  10159  263f				   .
  10160  263f							; 
  10161  263f
  10162  263f				   .
  10163  263f							; 
  10164  263f
  10165  263f				   .
  10166  263f							; 
  10167  263f
  10168  263f				   .
  10169  263f							; 
  10170  263f
  10171  263f				   .L0499		;  _Points_Roll_Up  =	_Points_Roll_Up  +  _Shot_Bonus_Counter
  10172  263f
  10173  263f		       a5 e5		      LDA	_Points_Roll_Up
  10174  2641		       18		      CLC
  10175  2642		       65 e4		      ADC	_Shot_Bonus_Counter
  10176  2644		       85 e5		      STA	_Points_Roll_Up
  10177  2646				   .
  10178  2646							; 
  10179  2646
  10180  2646				   .__AP_Skip_Points
  10181  2646							; __AP_Skip_Points
  10182  2646
  10183  2646				   .
  10184  2646							; 
  10185  2646
  10186  2646				   .
  10187  2646							; 
  10188  2646
  10189  2646				   .
  10190  2646							; 
  10191  2646
  10192  2646				   .
  10193  2646							; 
  10194  2646
  10195  2646				   .
  10196  2646							; 
  10197  2646
  10198  2646				   .L0500		;  if !_Bit4_Corrdd_Can_Swd_Shot{4}  &&  !_Bit2_Corrdd_Can_On{2} then _Corrdd_X_Shot_Mem  =  temp5  :	_Corrdd_Y_Shot_Mem  =  temp6
  10199  2646
  10200  2646		       a5 c6		      LDA	_Bit4_Corrdd_Can_Swd_Shot
  10201  2648		       29 10		      AND	#16
  10202  264a		       d0 0e		      BNE	.skipL0500
  10203  264c				   .condpart108
  10204  264c		       a5 c6		      LDA	_Bit2_Corrdd_Can_On
  10205  264e		       29 04		      AND	#4
  10206  2650		       d0 08		      BNE	.skip108then
  10207  2652				   .condpart109
  10208  2652		       a5 a0		      LDA	temp5
  10209  2654		       85 bc		      STA	_Corrdd_X_Shot_Mem
  10210  2656		       a5 a1		      LDA	temp6
  10211  2658		       85 bd		      STA	_Corrdd_Y_Shot_Mem
  10212  265a				   .skip108then
  10213  265a				   .skipL0500
  10214  265a				   .
  10215  265a							; 
  10216  265a
  10217  265a				   .
  10218  265a							; 
  10219  265a
  10220  265a				   .
  10221  265a							; 
  10222  265a
  10223  265a				   .
  10224  265a							; 
  10225  265a
  10226  265a				   .L0501		;  _Seaweed_Shot  =  _Seaweed_Shot  +	1
  10227  265a
  10228  265a		       e6 e2		      INC	_Seaweed_Shot
  10229  265c				   .
  10230  265c							; 
  10231  265c
  10232  265c				   .
  10233  265c							; 
  10234  265c
  10235  265c				   .
  10236  265c							; 
  10237  265c
  10238  265c				   .
  10239  265c							; 
  10240  265c
  10241  265c				   .
  10242  265c							; 
  10243  265c
  10244  265c				   .
  10245  265c							; 
  10246  265c
  10247  265c				   .L0502		;  _Corrdd_Shot_Counter  =  _Corrdd_Shot_Counter  +  1
  10248  265c
  10249  265c		       e6 ec		      INC	_Corrdd_Shot_Counter
  10250  265e				   .
  10251  265e							; 
  10252  265e
  10253  265e				   .
  10254  265e							; 
  10255  265e
  10256  265e				   .
  10257  265e							; 
  10258  265e
  10259  265e				   .
  10260  265e							; 
  10261  265e
  10262  265e				   .L0503		;  _Bit4_Corrdd_Can_Swd_Shot{4}  =  1
  10263  265e
  10264  265e		       a5 c6		      LDA	_Bit4_Corrdd_Can_Swd_Shot
  10265  2660		       09 10		      ORA	#16
  10266  2662		       85 c6		      STA	_Bit4_Corrdd_Can_Swd_Shot
  10267  2664				   .
  10268  2664							; 
  10269  2664
  10270  2664				   .
  10271  2664							; 
  10272  2664
  10273  2664				   .
  10274  2664							; 
  10275  2664
  10276  2664				   .
  10277  2664							; 
  10278  2664
  10279  2664				   .L0504		;  _Bit7_Vblank02{7}  =  1
  10280  2664
  10281  2664		       a5 c5		      LDA	_Bit7_Vblank02
  10282  2666		       09 80		      ORA	#128
  10283  2668		       85 c5		      STA	_Bit7_Vblank02
  10284  266a				   .
  10285  266a							; 
  10286  266a
  10287  266a				   .
  10288  266a							; 
  10289  266a
  10290  266a				   .
  10291  266a							; 
  10292  266a
  10293  266a				   .
  10294  266a							; 
  10295  266a
  10296  266a				   .L0505		;  if _Ch0_Sound  =  _c_Ship_Bounce then goto __Skip_Missl_Pixl_Collisn
  10297  266a
  10298  266a		       a5 da		      LDA	_Ch0_Sound
  10299  266c		       c9 03		      CMP	#_c_Ship_Bounce
  10300  266e		       d0 03		      BNE	.skipL0505
  10301  2670				   .condpart110
  10302  2670		       4c ad 36 	      jmp	.__Skip_Missl_Pixl_Collisn
  10303  2673
  10304  2673				   .skipL0505
  10305  2673				   .
  10306  2673							; 
  10307  2673
  10308  2673				   .L0506		;  if _Ch0_Sound  =  _c_1000_Health then goto __Skip_Missl_Pixl_Collisn
  10309  2673
  10310  2673		       a5 da		      LDA	_Ch0_Sound
  10311  2675		       c9 05		      CMP	#_c_1000_Health
  10312  2677		       d0 03		      BNE	.skipL0506
  10313  2679				   .condpart111
  10314  2679		       4c ad 36 	      jmp	.__Skip_Missl_Pixl_Collisn
  10315  267c
  10316  267c				   .skipL0506
  10317  267c				   .
  10318  267c							; 
  10319  267c
  10320  267c				   .
  10321  267c							; 
  10322  267c
  10323  267c				   .
  10324  267c							; 
  10325  267c
  10326  267c				   .
  10327  267c							; 
  10328  267c
  10329  267c				   .L0507		;  _Ch0_Sound	=  0  :  _Ch0_Counter  =  0
  10330  267c
  10331  267c		       a9 00		      LDA	#0
  10332  267e		       85 da		      STA	_Ch0_Sound
  10333  2680		       85 dc		      STA	_Ch0_Counter
  10334  2682				   .
  10335  2682							; 
  10336  2682
  10337  2682				   .L0508		;  _Ch0_Duration  =  1
  10338  2682
  10339  2682		       a9 01		      LDA	#1
  10340  2684		       85 db		      STA	_Ch0_Duration
  10341  2686				   .
  10342  2686							; 
  10343  2686
  10344  2686				   .
  10345  2686							; 
  10346  2686
  10347  2686				   .
  10348  2686							; 
  10349  2686
  10350  2686				   .
  10351  2686							; 
  10352  2686
  10353  2686				   .L0509		;  _Bit5_Sound_Alt_Torpedo_Hit{5}  =  !_Bit5_Sound_Alt_Torpedo_Hit{5}
  10354  2686
  10355  2686		       a5 c4		      LDA	_Bit5_Sound_Alt_Torpedo_Hit
  10356  2688		       29 20		      AND	#32
  10357  268a		       08		      PHP
  10358  268b		       a5 c4		      LDA	_Bit5_Sound_Alt_Torpedo_Hit
  10359  268d		       29 df		      AND	#223
  10360  268f		       28		      PLP
  10361  2690		       d0 02		      .byte.b	$D0, $02
  10362  2692		       09 20		      ORA	#32
  10363  2694		       85 c4		      STA	_Bit5_Sound_Alt_Torpedo_Hit
  10364  2696				   .
  10365  2696							; 
  10366  2696
  10367  2696				   .
  10368  2696							; 
  10369  2696
  10370  2696				   .
  10371  2696							; 
  10372  2696
  10373  2696				   .
  10374  2696							; 
  10375  2696
  10376  2696				   .L0510		;  if _Bit5_Sound_Alt_Torpedo_Hit{5} then _Ch0_Sound  =  _c_Torp_Hit_Seaweed_01  :  goto __Skip_Missl_Pixl_Collisn
  10377  2696
  10378  2696		       a5 c4		      LDA	_Bit5_Sound_Alt_Torpedo_Hit
  10379  2698		       29 20		      AND	#32
  10380  269a		       f0 07		      BEQ	.skipL0510
  10381  269c				   .condpart112
  10382  269c		       a9 01		      LDA	#_c_Torp_Hit_Seaweed_01
  10383  269e		       85 da		      STA	_Ch0_Sound
  10384  26a0		       4c ad 36 	      jmp	.__Skip_Missl_Pixl_Collisn
  10385  26a3
  10386  26a3				   .skipL0510
  10387  26a3				   .
  10388  26a3							; 
  10389  26a3
  10390  26a3				   .L0511		;  if !_Bit5_Sound_Alt_Torpedo_Hit{5} then _Ch0_Sound	=  _c_Torp_Hit_Seaweed_02
  10391  26a3
  10392  26a3		       a5 c4		      LDA	_Bit5_Sound_Alt_Torpedo_Hit
  10393  26a5		       29 20		      AND	#32
  10394  26a7		       d0 04		      BNE	.skipL0511
  10395  26a9				   .condpart113
  10396  26a9		       a9 02		      LDA	#_c_Torp_Hit_Seaweed_02
  10397  26ab		       85 da		      STA	_Ch0_Sound
  10398  26ad				   .skipL0511
  10399  26ad				   .
  10400  26ad							; 
  10401  26ad
  10402  26ad				   .__Skip_Missl_Pixl_Collisn
  10403  26ad							; __Skip_Missl_Pixl_Collisn
  10404  26ad
  10405  26ad				   .
  10406  26ad							; 
  10407  26ad
  10408  26ad				   .
  10409  26ad							; 
  10410  26ad
  10411  26ad				   .
  10412  26ad							; 
  10413  26ad
  10414  26ad				   .
  10415  26ad							; 
  10416  26ad
  10417  26ad				   .
  10418  26ad							; 
  10419  26ad
  10420  26ad				   .
  10421  26ad							; 
  10422  26ad
  10423  26ad				   .
  10424  26ad							; 
  10425  26ad
  10426  26ad				   .
  10427  26ad							; 
  10428  26ad
  10429  26ad				   .
  10430  26ad							; 
  10431  26ad
  10432  26ad				   .
  10433  26ad							; 
  10434  26ad
  10435  26ad				   .
  10436  26ad							; 
  10437  26ad
  10438  26ad				   .
  10439  26ad							; 
  10440  26ad
  10441  26ad				   .L0512		;  if !_Bit1_Auto_Play{1} then goto __AP_Skip_Flip
  10442  26ad
  10443  26ad		       a5 d2		      LDA	_Bit1_Auto_Play
  10444  26af		       29 02		      AND	#2
  10445  26b1		       d0 03		      BNE	.skipL0512
  10446  26b3				   .condpart114
  10447  26b3		       4c 02 37 	      jmp	.__AP_Skip_Flip
  10448  26b6
  10449  26b6				   .skipL0512
  10450  26b6				   .
  10451  26b6							; 
  10452  26b6
  10453  26b6				   .
  10454  26b6							; 
  10455  26b6
  10456  26b6				   .
  10457  26b6							; 
  10458  26b6
  10459  26b6				   .
  10460  26b6							; 
  10461  26b6
  10462  26b6				   .L0513		;  _AP_2_Sec_Score_Flip  =  _AP_2_Sec_Score_Flip  +  1
  10463  26b6
  10464  26b6		       e6 ba		      INC	_AP_2_Sec_Score_Flip
  10465  26b8				   .
  10466  26b8							; 
  10467  26b8
  10468  26b8				   .
  10469  26b8							; 
  10470  26b8
  10471  26b8				   .
  10472  26b8							; 
  10473  26b8
  10474  26b8				   .
  10475  26b8							; 
  10476  26b8
  10477  26b8				   .
  10478  26b8							; 
  10479  26b8
  10480  26b8				   .L0514		;  if _AP_2_Sec_Score_Flip  <	120 then goto __AP_Skip_Score
  10481  26b8
  10482  26b8		       a5 ba		      LDA	_AP_2_Sec_Score_Flip
  10483  26ba		       c9 78		      CMP	#120
  10484  26bc		       b0 03		      BCS	.skipL0514
  10485  26be				   .condpart115
  10486  26be		       4c 5e 37 	      jmp	.__AP_Skip_Score
  10487  26c1
  10488  26c1				   .skipL0514
  10489  26c1				   .
  10490  26c1							; 
  10491  26c1
  10492  26c1				   .
  10493  26c1							; 
  10494  26c1
  10495  26c1				   .
  10496  26c1							; 
  10497  26c1
  10498  26c1				   .
  10499  26c1							; 
  10500  26c1
  10501  26c1				   .L0515		;  _AP_2_Sec_Score_Flip  =  0	:  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
  10502  26c1
  10503  26c1		       a9 00		      LDA	#0
  10504  26c3		       85 ba		      STA	_AP_2_Sec_Score_Flip
  10505  26c5		       a5 c4		      LDA	_Bit6_Swap_Scores
  10506  26c7		       29 40		      AND	#64
  10507  26c9		       08		      PHP
  10508  26ca		       a5 c4		      LDA	_Bit6_Swap_Scores
  10509  26cc		       29 bf		      AND	#191
  10510  26ce		       28		      PLP
  10511  26cf		       d0 02		      .byte.b	$D0, $02
  10512  26d1		       09 40		      ORA	#64
  10513  26d3		       85 c4		      STA	_Bit6_Swap_Scores
  10514  26d5				   .
  10515  26d5							; 
  10516  26d5
  10517  26d5				   .
  10518  26d5							; 
  10519  26d5
  10520  26d5				   .
  10521  26d5							; 
  10522  26d5
  10523  26d5				   .
  10524  26d5							; 
  10525  26d5
  10526  26d5				   .L0516		;  if !_Bit6_Swap_Scores{6} then goto __AP_Skip_HiScore_Swap
  10527  26d5
  10528  26d5		       24 c4		      BIT	_Bit6_Swap_Scores
  10529  26d7		       70 03		      BVS	.skipL0516
  10530  26d9				   .condpart116
  10531  26d9		       4c ef 36 	      jmp	.__AP_Skip_HiScore_Swap
  10532  26dc
  10533  26dc				   .skipL0516
  10534  26dc				   .
  10535  26dc							; 
  10536  26dc
  10537  26dc				   .
  10538  26dc							; 
  10539  26dc
  10540  26dc				   .
  10541  26dc							; 
  10542  26dc
  10543  26dc				   .
  10544  26dc							; 
  10545  26dc
  10546  26dc				   .L0517		;  scorecolor	=  $BE
  10547  26dc
  10548  26dc		       a9 be		      LDA	#$BE
  10549  26de		       85 a3		      STA	scorecolor
  10550  26e0				   .
  10551  26e0							; 
  10552  26e0
  10553  26e0				   .L0518		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
  10554  26e0
  10555  26e0		       a5 a5		      LDA	_High_Score1
  10556  26e2		       85 93		      STA	_sc1
  10557  26e4		       a5 a6		      LDA	_High_Score2
  10558  26e6		       85 94		      STA	_sc2
  10559  26e8		       a5 a7		      LDA	_High_Score3
  10560  26ea		       85 95		      STA	_sc3
  10561  26ec				   .
  10562  26ec							; 
  10563  26ec
  10564  26ec				   .L0519		;  goto __AP_Skip_Score
  10565  26ec
  10566  26ec		       4c 5e 37 	      jmp	.__AP_Skip_Score
  10567  26ef
  10568  26ef				   .
  10569  26ef							; 
  10570  26ef
  10571  26ef				   .__AP_Skip_HiScore_Swap
  10572  26ef							; __AP_Skip_HiScore_Swap
  10573  26ef
  10574  26ef				   .
  10575  26ef							; 
  10576  26ef
  10577  26ef				   .
  10578  26ef							; 
  10579  26ef
  10580  26ef				   .
  10581  26ef							; 
  10582  26ef
  10583  26ef				   .
  10584  26ef							; 
  10585  26ef
  10586  26ef				   .L0520		;  scorecolor	=  $1C
  10587  26ef
  10588  26ef		       a9 1c		      LDA	#$1C
  10589  26f1		       85 a3		      STA	scorecolor
  10590  26f3				   .
  10591  26f3							; 
  10592  26f3
  10593  26f3				   .L0521		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
  10594  26f3
  10595  26f3		       a5 a8		      LDA	_Score1_Mem
  10596  26f5		       85 93		      STA	_sc1
  10597  26f7		       a5 a9		      LDA	_Score2_Mem
  10598  26f9		       85 94		      STA	_sc2
  10599  26fb		       a5 aa		      LDA	_Score3_Mem
  10600  26fd		       85 95		      STA	_sc3
  10601  26ff				   .
  10602  26ff							; 
  10603  26ff
  10604  26ff				   .L0522		;  goto __AP_Skip_Score
  10605  26ff
  10606  26ff		       4c 5e 37 	      jmp	.__AP_Skip_Score
  10607  2702
  10608  2702				   .
  10609  2702							; 
  10610  2702
  10611  2702				   .__AP_Skip_Flip
  10612  2702							; __AP_Skip_Flip
  10613  2702
  10614  2702				   .
  10615  2702							; 
  10616  2702
  10617  2702				   .
  10618  2702							; 
  10619  2702
  10620  2702				   .
  10621  2702							; 
  10622  2702
  10623  2702				   .
  10624  2702							; 
  10625  2702
  10626  2702				   .
  10627  2702							; 
  10628  2702
  10629  2702				   .
  10630  2702							; 
  10631  2702
  10632  2702				   .
  10633  2702							; 
  10634  2702
  10635  2702				   .
  10636  2702							; 
  10637  2702
  10638  2702				   .
  10639  2702							; 
  10640  2702
  10641  2702				   .
  10642  2702							; 
  10643  2702
  10644  2702				   .
  10645  2702							; 
  10646  2702
  10647  2702				   .
  10648  2702							; 
  10649  2702
  10650  2702				   .L0523		;  temp5  =   ( _sc2  &  $F0 ) 
  10651  2702
  10652  2702							; complex statement detected
  10653  2702		       a5 94		      LDA	_sc2
  10654  2704		       29 f0		      AND	#$F0
  10655  2706		       85 a0		      STA	temp5
  10656  2708				   .
  10657  2708							; 
  10658  2708
  10659  2708				   .
  10660  2708							; 
  10661  2708
  10662  2708				   .
  10663  2708							; 
  10664  2708
  10665  2708				   .
  10666  2708							; 
  10667  2708
  10668  2708				   .
  10669  2708							; 
  10670  2708
  10671  2708				   .
  10672  2708							; 
  10673  2708
  10674  2708				   .L0524		;  asm
  10675  2708
  10676  2708		       a5 e5		      lda	_Points_Roll_Up
  10677  270a
  10678  270a		       f0 17		      beq	__No_Points_To_Add
  10679  270c
  10680  270c		       c6 e5		      dec	_Points_Roll_Up
  10681  270e
  10682  270e		       f8		      sed
  10683  270f
  10684  270f		       18		      clc
  10685  2710
  10686  2710		       a5 95		      lda	_sc3
  10687  2712
  10688  2712		       69 01		      adc	#1
  10689  2714
  10690  2714		       85 95		      sta	_sc3
  10691  2716
  10692  2716		       a5 94		      lda	_sc2
  10693  2718
  10694  2718		       69 00		      adc	#0
  10695  271a
  10696  271a		       85 94		      sta	_sc2
  10697  271c
  10698  271c		       a5 93		      lda	_sc1
  10699  271e
  10700  271e		       69 00		      adc	#0
  10701  2720
  10702  2720		       85 93		      sta	_sc1
  10703  2722
  10704  2722		       d8		      cld
  10705  2723
  10706  2723				   __No_Points_To_Add
  10707  2723
  10708  2723				   .
  10709  2723							; 
  10710  2723
  10711  2723				   .
  10712  2723							; 
  10713  2723
  10714  2723				   .
  10715  2723							; 
  10716  2723
  10717  2723				   .
  10718  2723							; 
  10719  2723
  10720  2723				   .
  10721  2723							; 
  10722  2723
  10723  2723				   .
  10724  2723							; 
  10725  2723
  10726  2723				   .L0525		;  temp6  =   ( _sc2  &  $F0 ) 
  10727  2723
  10728  2723							; complex statement detected
  10729  2723		       a5 94		      LDA	_sc2
  10730  2725		       29 f0		      AND	#$F0
  10731  2727		       85 a1		      STA	temp6
  10732  2729				   .
  10733  2729							; 
  10734  2729
  10735  2729				   .
  10736  2729							; 
  10737  2729
  10738  2729				   .
  10739  2729							; 
  10740  2729
  10741  2729				   .
  10742  2729							; 
  10743  2729
  10744  2729				   .L0526		;  if temp5  =  temp6 then goto __Skip_Thousand_Test
  10745  2729
  10746  2729		       a5 a0		      LDA	temp5
  10747  272b		       c5 a1		      CMP	temp6
  10748  272d		       d0 03		      BNE	.skipL0526
  10749  272f				   .condpart117
  10750  272f		       4c 5e 37 	      jmp	.__Skip_Thousand_Test
  10751  2732
  10752  2732				   .skipL0526
  10753  2732				   .
  10754  2732							; 
  10755  2732
  10756  2732				   .
  10757  2732							; 
  10758  2732
  10759  2732				   .
  10760  2732							; 
  10761  2732
  10762  2732				   .
  10763  2732							; 
  10764  2732
  10765  2732				   .L0527		;  _Bit2_1000_On{2}  =  1  :  _1000_Counter  =  0
  10766  2732
  10767  2732		       a5 c7		      LDA	_Bit2_1000_On
  10768  2734		       09 04		      ORA	#4
  10769  2736		       85 c7		      STA	_Bit2_1000_On
  10770  2738		       a9 00		      LDA	#0
  10771  273a		       85 b4		      STA	_1000_Counter
  10772  273c				   .
  10773  273c							; 
  10774  273c
  10775  273c				   .
  10776  273c							; 
  10777  273c
  10778  273c				   .
  10779  273c							; 
  10780  273c
  10781  273c				   .
  10782  273c							; 
  10783  273c
  10784  273c				   .L0528		;  pfscore1  =  255  :  pfscore2  =  255  :  pfscorecolor  =  $AE
  10785  273c
  10786  273c		       a9 ff		      LDA	#255
  10787  273e		       85 f2		      STA	pfscore1
  10788  2740		       85 f3		      STA	pfscore2
  10789  2742		       a9 ae		      LDA	#$AE
  10790  2744		       85 f4		      STA	pfscorecolor
  10791  2746				   .
  10792  2746							; 
  10793  2746
  10794  2746				   .
  10795  2746							; 
  10796  2746
  10797  2746				   .
  10798  2746							; 
  10799  2746
  10800  2746				   .
  10801  2746							; 
  10802  2746
  10803  2746				   .L0529		;  _Bit5_Manatee_Health_Color{5}  =  1
  10804  2746
  10805  2746		       a5 c7		      LDA	_Bit5_Manatee_Health_Color
  10806  2748		       09 20		      ORA	#32
  10807  274a		       85 c7		      STA	_Bit5_Manatee_Health_Color
  10808  274c				   .
  10809  274c							; 
  10810  274c
  10811  274c				   .
  10812  274c							; 
  10813  274c
  10814  274c				   .
  10815  274c							; 
  10816  274c
  10817  274c				   .
  10818  274c							; 
  10819  274c
  10820  274c				   .
  10821  274c							; 
  10822  274c
  10823  274c				   .
  10824  274c							; 
  10825  274c
  10826  274c				   .
  10827  274c							; 
  10828  274c
  10829  274c				   .L0530		;  _Bit0_Game_Control{0}  =  0
  10830  274c
  10831  274c		       a5 d2		      LDA	_Bit0_Game_Control
  10832  274e		       29 fe		      AND	#254
  10833  2750		       85 d2		      STA	_Bit0_Game_Control
  10834  2752				   .
  10835  2752							; 
  10836  2752
  10837  2752				   .
  10838  2752							; 
  10839  2752
  10840  2752				   .
  10841  2752							; 
  10842  2752
  10843  2752				   .
  10844  2752							; 
  10845  2752
  10846  2752				   .L0531		;  _Ch0_Counter  =  0	:  _Ch0_Sound  =  _c_1000_Health  :  _Ch0_Duration  =  1
  10847  2752
  10848  2752		       a9 00		      LDA	#0
  10849  2754		       85 dc		      STA	_Ch0_Counter
  10850  2756		       a9 05		      LDA	#_c_1000_Health
  10851  2758		       85 da		      STA	_Ch0_Sound
  10852  275a		       a9 01		      LDA	#1
  10853  275c		       85 db		      STA	_Ch0_Duration
  10854  275e				   .
  10855  275e							; 
  10856  275e
  10857  275e				   .__Skip_Thousand_Test
  10858  275e							; __Skip_Thousand_Test
  10859  275e
  10860  275e				   .
  10861  275e							; 
  10862  275e
  10863  275e				   .__AP_Skip_Score
  10864  275e							; __AP_Skip_Score
  10865  275e
  10866  275e				   .
  10867  275e							; 
  10868  275e
  10869  275e				   .
  10870  275e							; 
  10871  275e
  10872  275e				   .
  10873  275e							; 
  10874  275e
  10875  275e				   .
  10876  275e							; 
  10877  275e
  10878  275e				   .
  10879  275e							; 
  10880  275e
  10881  275e				   .
  10882  275e							; 
  10883  275e
  10884  275e				   .
  10885  275e							; 
  10886  275e
  10887  275e				   .
  10888  275e							; 
  10889  275e
  10890  275e				   .
  10891  275e							; 
  10892  275e
  10893  275e				   .
  10894  275e							; 
  10895  275e
  10896  275e				   .
  10897  275e							; 
  10898  275e
  10899  275e				   .L0532		;  if _Bit1_P0_Hit_Seaweed{1} then goto __Skip_Player0_Pixel_Hit
  10900  275e
  10901  275e		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  10902  2760		       29 02		      AND	#2
  10903  2762		       f0 03		      BEQ	.skipL0532
  10904  2764				   .condpart118
  10905  2764		       4c 2e 38 	      jmp	.__Skip_Player0_Pixel_Hit
  10906  2767
  10907  2767				   .skipL0532
  10908  2767				   .
  10909  2767							; 
  10910  2767
  10911  2767				   .
  10912  2767							; 
  10913  2767
  10914  2767				   .
  10915  2767							; 
  10916  2767
  10917  2767				   .
  10918  2767							; 
  10919  2767
  10920  2767				   .L0533		;  if !collision(playfield,player0) then goto __Skip_Player0_Pixel_Hit
  10921  2767
  10922  2767		       24 02		      bit	CXP0FB
  10923  2769		       30 03		      BMI	.skipL0533
  10924  276b				   .condpart119
  10925  276b		       4c 2e 38 	      jmp	.__Skip_Player0_Pixel_Hit
  10926  276e
  10927  276e				   .skipL0533
  10928  276e				   .
  10929  276e							; 
  10930  276e
  10931  276e				   .
  10932  276e							; 
  10933  276e
  10934  276e				   .
  10935  276e							; 
  10936  276e
  10937  276e				   .
  10938  276e							; 
  10939  276e
  10940  276e				   .L0534		;  if !_Bit0_Ship_Facing_Up{0} then if _P0_Up_Down  >	11 then _P0_Up_Down = _P0_Up_Down  -  2.02
  10941  276e
  10942  276e		       a5 c1		      LDA	_Bit0_Ship_Facing_Up
  10943  2770		       4a		      LSR
  10944  2771		       b0 13		      BCS	.skipL0534
  10945  2773				   .condpart120
  10946  2773		       a9 0b		      LDA	#11
  10947  2775		       c5 85		      CMP	_P0_Up_Down
  10948  2777		       b0 0d		      BCS	.skip120then
  10949  2779				   .condpart121
  10950  2779		       a5 d5		      LDA	b
  10951  277b		       38		      SEC
  10952  277c		       e9 05		      SBC	#5
  10953  277e		       85 d5		      STA	b
  10954  2780		       a5 85		      LDA	_P0_Up_Down
  10955  2782		       e9 02		      SBC	#2
  10956  2784		       85 85		      STA	_P0_Up_Down
  10957  2786				   .skip120then
  10958  2786				   .skipL0534
  10959  2786				   .
  10960  2786							; 
  10961  2786
  10962  2786				   .L0535		;  if !_Bit1_Ship_Facing_Down{1} then if _P0_Up_Down  <  83 then _P0_Up_Down = _P0_Up_Down  +	2.02
  10963  2786
  10964  2786		       a5 c1		      LDA	_Bit1_Ship_Facing_Down
  10965  2788		       29 02		      AND	#2
  10966  278a		       d0 13		      BNE	.skipL0535
  10967  278c				   .condpart122
  10968  278c		       a5 85		      LDA	_P0_Up_Down
  10969  278e		       c9 53		      CMP	#83
  10970  2790		       b0 0d		      BCS	.skip122then
  10971  2792				   .condpart123
  10972  2792		       a5 d5		      LDA	b
  10973  2794		       18		      CLC
  10974  2795		       69 05		      ADC	#5
  10975  2797		       85 d5		      STA	b
  10976  2799		       a5 85		      LDA	_P0_Up_Down
  10977  279b		       69 02		      ADC	#2
  10978  279d		       85 85		      STA	_P0_Up_Down
  10979  279f				   .skip122then
  10980  279f				   .skipL0535
  10981  279f				   .
  10982  279f							; 
  10983  279f
  10984  279f				   .L0536		;  if !_Bit2_Ship_Facing_Left{2} then if _P0_Left_Right  >  19 then _P0_Left_Right = _P0_Left_Right  -  2.02
  10985  279f
  10986  279f		       a5 c1		      LDA	_Bit2_Ship_Facing_Left
  10987  27a1		       29 04		      AND	#4
  10988  27a3		       d0 13		      BNE	.skipL0536
  10989  27a5				   .condpart124
  10990  27a5		       a9 13		      LDA	#19
  10991  27a7		       c5 80		      CMP	_P0_Left_Right
  10992  27a9		       b0 0d		      BCS	.skip124then
  10993  27ab				   .condpart125
  10994  27ab		       a5 d4		      LDA	a
  10995  27ad		       38		      SEC
  10996  27ae		       e9 05		      SBC	#5
  10997  27b0		       85 d4		      STA	a
  10998  27b2		       a5 80		      LDA	_P0_Left_Right
  10999  27b4		       e9 02		      SBC	#2
  11000  27b6		       85 80		      STA	_P0_Left_Right
  11001  27b8				   .skip124then
  11002  27b8				   .skipL0536
  11003  27b8				   .
  11004  27b8							; 
  11005  27b8
  11006  27b8				   .L0537		;  if !_Bit3_Ship_Facing_Right{3} then if _P0_Left_Right  <  136 then _P0_Left_Right = _P0_Left_Right	+  2.02
  11007  27b8
  11008  27b8		       a5 c1		      LDA	_Bit3_Ship_Facing_Right
  11009  27ba		       29 08		      AND	#8
  11010  27bc		       d0 13		      BNE	.skipL0537
  11011  27be				   .condpart126
  11012  27be		       a5 80		      LDA	_P0_Left_Right
  11013  27c0		       c9 88		      CMP	#136
  11014  27c2		       b0 0d		      BCS	.skip126then
  11015  27c4				   .condpart127
  11016  27c4		       a5 d4		      LDA	a
  11017  27c6		       18		      CLC
  11018  27c7		       69 05		      ADC	#5
  11019  27c9		       85 d4		      STA	a
  11020  27cb		       a5 80		      LDA	_P0_Left_Right
  11021  27cd		       69 02		      ADC	#2
  11022  27cf		       85 80		      STA	_P0_Left_Right
  11023  27d1				   .skip126then
  11024  27d1				   .skipL0537
  11025  27d1				   .
  11026  27d1							; 
  11027  27d1
  11028  27d1				   .
  11029  27d1							; 
  11030  27d1
  11031  27d1				   .
  11032  27d1							; 
  11033  27d1
  11034  27d1				   .
  11035  27d1							; 
  11036  27d1
  11037  27d1				   .L0538		;  if pfscore1  =  0 then pfscore2  =	pfscore2 / 2
  11038  27d1
  11039  27d1		       a5 f2		      LDA	pfscore1
  11040  27d3		       c9 00		      CMP	#0
  11041  27d5		       d0 05		      BNE	.skipL0538
  11042  27d7				   .condpart128
  11043  27d7		       a5 f3		      LDA	pfscore2
  11044  27d9		       4a		      lsr
  11045  27da		       85 f3		      STA	pfscore2
  11046  27dc				   .skipL0538
  11047  27dc				   .
  11048  27dc							; 
  11049  27dc
  11050  27dc				   .L0539		;  if pfscore1  >  0  &&  pfscore2  =	255 then pfscore1  =  pfscore1 / 2
  11051  27dc
  11052  27dc		       a9 00		      LDA	#0
  11053  27de		       c5 f2		      CMP	pfscore1
  11054  27e0		       b0 0b		      BCS	.skipL0539
  11055  27e2				   .condpart129
  11056  27e2		       a5 f3		      LDA	pfscore2
  11057  27e4		       c9 ff		      CMP	#255
  11058  27e6		       d0 05		      BNE	.skip129then
  11059  27e8				   .condpart130
  11060  27e8		       a5 f2		      LDA	pfscore1
  11061  27ea		       4a		      lsr
  11062  27eb		       85 f2		      STA	pfscore1
  11063  27ed				   .skip129then
  11064  27ed				   .skipL0539
  11065  27ed				   .
  11066  27ed							; 
  11067  27ed
  11068  27ed				   .
  11069  27ed							; 
  11070  27ed
  11071  27ed				   .
  11072  27ed							; 
  11073  27ed
  11074  27ed				   .
  11075  27ed							; 
  11076  27ed
  11077  27ed				   .L0540		;  _Bit1_P0_Hit_Seaweed{1}  =	1  :  _Bit4_Manatee_Hurt_Color{4}  =  1
  11078  27ed
  11079  27ed		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  11080  27ef		       09 02		      ORA	#2
  11081  27f1		       85 c2		      STA	_Bit1_P0_Hit_Seaweed
  11082  27f3		       a5 c7		      LDA	_Bit4_Manatee_Hurt_Color
  11083  27f5		       09 10		      ORA	#16
  11084  27f7		       85 c7		      STA	_Bit4_Manatee_Hurt_Color
  11085  27f9				   .
  11086  27f9							; 
  11087  27f9
  11088  27f9				   .
  11089  27f9							; 
  11090  27f9
  11091  27f9				   .
  11092  27f9							; 
  11093  27f9
  11094  27f9				   .
  11095  27f9							; 
  11096  27f9
  11097  27f9				   .
  11098  27f9							; 
  11099  27f9
  11100  27f9				   .
  11101  27f9							; 
  11102  27f9
  11103  27f9				   .
  11104  27f9							; 
  11105  27f9
  11106  27f9				   .L0541		;  if pfscore2  <  16 then pfscorecolor  =  $1C
  11107  27f9
  11108  27f9		       a5 f3		      LDA	pfscore2
  11109  27fb		       c9 10		      CMP	#16
  11110  27fd		       b0 04		      BCS	.skipL0541
  11111  27ff				   .condpart131
  11112  27ff		       a9 1c		      LDA	#$1C
  11113  2801		       85 f4		      STA	pfscorecolor
  11114  2803				   .skipL0541
  11115  2803				   .
  11116  2803							; 
  11117  2803
  11118  2803				   .L0542		;  if pfscore2  <  3 then pfscorecolor  =  $42
  11119  2803
  11120  2803		       a5 f3		      LDA	pfscore2
  11121  2805		       c9 03		      CMP	#3
  11122  2807		       b0 04		      BCS	.skipL0542
  11123  2809				   .condpart132
  11124  2809		       a9 42		      LDA	#$42
  11125  280b		       85 f4		      STA	pfscorecolor
  11126  280d				   .skipL0542
  11127  280d				   .
  11128  280d							; 
  11129  280d
  11130  280d				   .L0543		;  if pfscore2  <  1 then _Bit0_Game_Control{0}  =  1
  11131  280d
  11132  280d		       a5 f3		      LDA	pfscore2
  11133  280f		       c9 01		      CMP	#1
  11134  2811		       b0 06		      BCS	.skipL0543
  11135  2813				   .condpart133
  11136  2813		       a5 d2		      LDA	_Bit0_Game_Control
  11137  2815		       09 01		      ORA	#1
  11138  2817		       85 d2		      STA	_Bit0_Game_Control
  11139  2819				   .skipL0543
  11140  2819				   .
  11141  2819							; 
  11142  2819
  11143  2819				   .
  11144  2819							; 
  11145  2819
  11146  2819				   .
  11147  2819							; 
  11148  2819
  11149  2819				   .
  11150  2819							; 
  11151  2819
  11152  2819				   .L0544		;  if _Ch0_Sound  =  _c_1000_Health then goto __Skip_Ouch_Sound_02
  11153  2819
  11154  2819		       a5 da		      LDA	_Ch0_Sound
  11155  281b		       c9 05		      CMP	#_c_1000_Health
  11156  281d		       d0 03		      BNE	.skipL0544
  11157  281f				   .condpart134
  11158  281f		       4c 2e 38 	      jmp	.__Skip_Ouch_Sound_02
  11159  2822
  11160  2822				   .skipL0544
  11161  2822				   .
  11162  2822							; 
  11163  2822
  11164  2822				   .L0545		;  _Ch0_Sound	=  _c_Ship_Bounce  :  _Ch0_Counter  =  0  :  _Ch0_Duration  =  1
  11165  2822
  11166  2822		       a9 03		      LDA	#_c_Ship_Bounce
  11167  2824		       85 da		      STA	_Ch0_Sound
  11168  2826		       a9 00		      LDA	#0
  11169  2828		       85 dc		      STA	_Ch0_Counter
  11170  282a		       a9 01		      LDA	#1
  11171  282c		       85 db		      STA	_Ch0_Duration
  11172  282e				   .
  11173  282e							; 
  11174  282e
  11175  282e				   .__Skip_Ouch_Sound_02
  11176  282e							; __Skip_Ouch_Sound_02
  11177  282e
  11178  282e				   .
  11179  282e							; 
  11180  282e
  11181  282e				   .__Skip_Player0_Pixel_Hit
  11182  282e							; __Skip_Player0_Pixel_Hit
  11183  282e
  11184  282e				   .
  11185  282e							; 
  11186  282e
  11187  282e				   .
  11188  282e							; 
  11189  282e
  11190  282e				   .
  11191  282e							; 
  11192  282e
  11193  282e				   .
  11194  282e							; 
  11195  282e
  11196  282e				   .
  11197  282e							; 
  11198  282e
  11199  282e				   .
  11200  282e							; 
  11201  282e
  11202  282e				   .
  11203  282e							; 
  11204  282e
  11205  282e				   .L0546		;  goto __Code_Section_2 bank3
  11206  282e
  11207  282e		       85 ee		      sta	temp7
  11208  2830		       a9 50		      lda	#>(.__Code_Section_2-1)
  11209  2832		       48		      pha
  11210  2833		       a9 ff		      lda	#<(.__Code_Section_2-1)
  11211  2835		       48		      pha
  11212  2836		       a5 ee		      lda	temp7
  11213  2838		       48		      pha
  11214  2839		       8a		      txa
  11215  283a		       48		      pha
  11216  283b		       a2 03		      ldx	#3
  11217  283d		       4c eb ff 	      jmp	BS_jsr
  11218  2840				   .
  11219  2840							; 
  11220  2840
  11221  2840				   .
  11222  2840							; 
  11223  2840
  11224  2840				   .
  11225  2840							; 
  11226  2840
  11227  2840				   .
  11228  2840							; 
  11229  2840
  11230  2840				   .
  11231  2840							; 
  11232  2840
  11233  2840				   .
  11234  2840							; 
  11235  2840
  11236  2840				   .
  11237  2840							; 
  11238  2840
  11239  2840				   .
  11240  2840							; 
  11241  2840
  11242  2840				   .
  11243  2840							; 
  11244  2840
  11245  2840				   .
  11246  2840							; 
  11247  2840
  11248  2840				   .
  11249  2840							; 
  11250  2840
  11251  2840				   .
  11252  2840							; 
  11253  2840
  11254  2840				   .
  11255  2840							; 
  11256  2840
  11257  2840				   .
  11258  2840							; 
  11259  2840
  11260  2840				   .
  11261  2840							; 
  11262  2840
  11263  2840				   .
  11264  2840							; 
  11265  2840
  11266  2840				   .
  11267  2840							; 
  11268  2840
  11269  2840				   .
  11270  2840							; 
  11271  2840
  11272  2840				   .
  11273  2840							; 
  11274  2840
  11275  2840				   .
  11276  2840							; 
  11277  2840
  11278  2840				   .
  11279  2840							; 
  11280  2840
  11281  2840				   .
  11282  2840							; 
  11283  2840
  11284  2840				   .
  11285  2840							; 
  11286  2840
  11287  2840				   .
  11288  2840							; 
  11289  2840
  11290  2840				   .
  11291  2840							; 
  11292  2840
  11293  2840				   .
  11294  2840							; 
  11295  2840
  11296  2840				   .
  11297  2840							; 
  11298  2840
  11299  2840				   .__GoU
  11300  2840							; __GoU
  11301  2840
  11302  2840				   .
  11303  2840							; 
  11304  2840
  11305  2840				   .
  11306  2840							; 
  11307  2840
  11308  2840				   .
  11309  2840							; 
  11310  2840
  11311  2840				   .
  11312  2840							; 
  11313  2840
  11314  2840				   .L0547		;  if _Bit0_Ship_Restrainer_U{0}  &&  _Bit1_P0_Hit_Seaweed{1} then if _Slide_Speed  >	0 then goto __Slide
  11315  2840
  11316  2840		       a5 c3		      LDA	_Bit0_Ship_Restrainer_U
  11317  2842		       4a		      LSR
  11318  2843		       90 0f		      BCC	.skipL0547
  11319  2845				   .condpart135
  11320  2845		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  11321  2847		       29 02		      AND	#2
  11322  2849		       f0 09		      BEQ	.skip135then
  11323  284b				   .condpart136
  11324  284b		       a9 00		      LDA	#0
  11325  284d		       c5 e1		      CMP	_Slide_Speed
  11326  284f		       b0 03		      BCS	.skip136then
  11327  2851				   .condpart137
  11328  2851		       4c 9f 32 	      jmp	.__Slide
  11329  2854
  11330  2854				   .skip136then
  11331  2854				   .skip135then
  11332  2854				   .skipL0547
  11333  2854				   .
  11334  2854							; 
  11335  2854
  11336  2854				   .
  11337  2854							; 
  11338  2854
  11339  2854				   .
  11340  2854							; 
  11341  2854
  11342  2854				   .
  11343  2854							; 
  11344  2854
  11345  2854				   .L0548		;  if _P0_Up_Down  >  10 then _P0_Up_Down  =  _P0_Up_Down  -  1.42
  11346  2854
  11347  2854		       a9 0a		      LDA	#10
  11348  2856		       c5 85		      CMP	_P0_Up_Down
  11349  2858		       b0 0d		      BCS	.skipL0548
  11350  285a				   .condpart138
  11351  285a		       a5 d5		      LDA	b
  11352  285c		       38		      SEC
  11353  285d		       e9 6b		      SBC	#107
  11354  285f		       85 d5		      STA	b
  11355  2861		       a5 85		      LDA	_P0_Up_Down
  11356  2863		       e9 01		      SBC	#1
  11357  2865		       85 85		      STA	_P0_Up_Down
  11358  2867				   .skipL0548
  11359  2867				   .
  11360  2867							; 
  11361  2867
  11362  2867				   .
  11363  2867							; 
  11364  2867
  11365  2867				   .
  11366  2867							; 
  11367  2867
  11368  2867				   .
  11369  2867							; 
  11370  2867
  11371  2867				   .
  11372  2867							; 
  11373  2867
  11374  2867				   .
  11375  2867							; 
  11376  2867
  11377  2867				   .L0549		;  _BitOp_Ship  =  0  :  _BitOp_Ship  =  _BitOp_Ship  |  %00000001
  11378  2867
  11379  2867		       a9 00		      LDA	#0
  11380  2869		       85 c1		      STA	_BitOp_Ship
  11381  286b		       a5 c1		      LDA	_BitOp_Ship
  11382  286d		       09 01		      ORA	#%00000001
  11383  286f		       85 c1		      STA	_BitOp_Ship
  11384  2871				   .L0550		;  _Bitop_Ship_Restrainer  =  0  :  _Bit0_Ship_Restrainer_U{0}  =  1
  11385  2871
  11386  2871		       a9 00		      LDA	#0
  11387  2873		       85 c3		      STA	_Bitop_Ship_Restrainer
  11388  2875		       a5 c3		      LDA	_Bit0_Ship_Restrainer_U
  11389  2877		       09 01		      ORA	#1
  11390  2879		       85 c3		      STA	_Bit0_Ship_Restrainer_U
  11391  287b				   .
  11392  287b							; 
  11393  287b
  11394  287b				   .
  11395  287b							; 
  11396  287b
  11397  287b				   .
  11398  287b							; 
  11399  287b
  11400  287b				   .
  11401  287b							; 
  11402  287b
  11403  287b				   .L0551		;  _Bit3_Flip_P0{3}  =  0
  11404  287b
  11405  287b		       a5 c2		      LDA	_Bit3_Flip_P0
  11406  287d		       29 f7		      AND	#247
  11407  287f		       85 c2		      STA	_Bit3_Flip_P0
  11408  2881				   .
  11409  2881							; 
  11410  2881
  11411  2881				   .
  11412  2881							; 
  11413  2881
  11414  2881				   .
  11415  2881							; 
  11416  2881
  11417  2881				   .
  11418  2881							; 
  11419  2881
  11420  2881				   .L0552		;  on _Frame_Counter goto __P0_U_00 __P0_U_01 __P0_U_02 __P0_U_03
  11421  2881
  11422  2881		       a6 d9		      LDX	_Frame_Counter
  11423  2883		       bd 8c 38 	      LDA	.L0552jumptablehi,x
  11424  2886		       48		      PHA
  11425  2887		       bd 90 38 	      LDA	.L0552jumptablelo,x
  11426  288a		       48		      PHA
  11427  288b		       60		      RTS
  11428  288c				   .L0552jumptablehi
  11429  288c		       3b		      .byte.b	>(.__P0_U_00-1)
  11430  288d		       3b		      .byte.b	>(.__P0_U_01-1)
  11431  288e		       3b		      .byte.b	>(.__P0_U_02-1)
  11432  288f		       3b		      .byte.b	>(.__P0_U_03-1)
  11433  2890				   .L0552jumptablelo
  11434  2890		       2e		      .byte.b	<(.__P0_U_00-1)
  11435  2891		       3d		      .byte.b	<(.__P0_U_01-1)
  11436  2892		       4c		      .byte.b	<(.__P0_U_02-1)
  11437  2893		       5b		      .byte.b	<(.__P0_U_03-1)
  11438  2894				   .
  11439  2894							; 
  11440  2894
  11441  2894				   .
  11442  2894							; 
  11443  2894
  11444  2894				   .
  11445  2894							; 
  11446  2894
  11447  2894				   .
  11448  2894							; 
  11449  2894
  11450  2894				   .
  11451  2894							; 
  11452  2894
  11453  2894				   .
  11454  2894							; 
  11455  2894
  11456  2894				   .
  11457  2894							; 
  11458  2894
  11459  2894				   .
  11460  2894							; 
  11461  2894
  11462  2894				   .__GoD
  11463  2894							; __GoD
  11464  2894
  11465  2894				   .
  11466  2894							; 
  11467  2894
  11468  2894				   .
  11469  2894							; 
  11470  2894
  11471  2894				   .
  11472  2894							; 
  11473  2894
  11474  2894				   .
  11475  2894							; 
  11476  2894
  11477  2894				   .L0553		;  if _Bit1_Ship_Restrainer_D{1}  &&  _Bit1_P0_Hit_Seaweed{1}	&&  _Slide_Speed  >  0 then goto __Slide
  11478  2894
  11479  2894		       a5 c3		      LDA	_Bit1_Ship_Restrainer_D
  11480  2896		       29 02		      AND	#2
  11481  2898		       f0 0f		      BEQ	.skipL0553
  11482  289a				   .condpart139
  11483  289a		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  11484  289c		       29 02		      AND	#2
  11485  289e		       f0 09		      BEQ	.skip139then
  11486  28a0				   .condpart140
  11487  28a0		       a9 00		      LDA	#0
  11488  28a2		       c5 e1		      CMP	_Slide_Speed
  11489  28a4		       b0 03		      BCS	.skip140then
  11490  28a6				   .condpart141
  11491  28a6		       4c 9f 32 	      jmp	.__Slide
  11492  28a9
  11493  28a9				   .skip140then
  11494  28a9				   .skip139then
  11495  28a9				   .skipL0553
  11496  28a9				   .
  11497  28a9							; 
  11498  28a9
  11499  28a9				   .
  11500  28a9							; 
  11501  28a9
  11502  28a9				   .
  11503  28a9							; 
  11504  28a9
  11505  28a9				   .
  11506  28a9							; 
  11507  28a9
  11508  28a9				   .L0554		;  if _P0_Up_Down  <  86 then _P0_Up_Down  =  _P0_Up_Down  +  1.42
  11509  28a9
  11510  28a9		       a5 85		      LDA	_P0_Up_Down
  11511  28ab		       c9 56		      CMP	#86
  11512  28ad		       b0 0d		      BCS	.skipL0554
  11513  28af				   .condpart142
  11514  28af		       a5 d5		      LDA	b
  11515  28b1		       18		      CLC
  11516  28b2		       69 6b		      ADC	#107
  11517  28b4		       85 d5		      STA	b
  11518  28b6		       a5 85		      LDA	_P0_Up_Down
  11519  28b8		       69 01		      ADC	#1
  11520  28ba		       85 85		      STA	_P0_Up_Down
  11521  28bc				   .skipL0554
  11522  28bc				   .
  11523  28bc							; 
  11524  28bc
  11525  28bc				   .
  11526  28bc							; 
  11527  28bc
  11528  28bc				   .
  11529  28bc							; 
  11530  28bc
  11531  28bc				   .
  11532  28bc							; 
  11533  28bc
  11534  28bc				   .
  11535  28bc							; 
  11536  28bc
  11537  28bc				   .
  11538  28bc							; 
  11539  28bc
  11540  28bc				   .L0555		;  _BitOp_Ship  =  0  :  _BitOp_Ship  =  _BitOp_Ship  |  %00000010
  11541  28bc
  11542  28bc		       a9 00		      LDA	#0
  11543  28be		       85 c1		      STA	_BitOp_Ship
  11544  28c0		       a5 c1		      LDA	_BitOp_Ship
  11545  28c2		       09 02		      ORA	#%00000010
  11546  28c4		       85 c1		      STA	_BitOp_Ship
  11547  28c6				   .L0556		;  _Bitop_Ship_Restrainer  =  0  :  _Bit1_Ship_Restrainer_D{1}  =  1
  11548  28c6
  11549  28c6		       a9 00		      LDA	#0
  11550  28c8		       85 c3		      STA	_Bitop_Ship_Restrainer
  11551  28ca		       a5 c3		      LDA	_Bit1_Ship_Restrainer_D
  11552  28cc		       09 02		      ORA	#2
  11553  28ce		       85 c3		      STA	_Bit1_Ship_Restrainer_D
  11554  28d0				   .
  11555  28d0							; 
  11556  28d0
  11557  28d0				   .
  11558  28d0							; 
  11559  28d0
  11560  28d0				   .
  11561  28d0							; 
  11562  28d0
  11563  28d0				   .
  11564  28d0							; 
  11565  28d0
  11566  28d0				   .L0557		;  _Bit3_Flip_P0{3}  =  0
  11567  28d0
  11568  28d0		       a5 c2		      LDA	_Bit3_Flip_P0
  11569  28d2		       29 f7		      AND	#247
  11570  28d4		       85 c2		      STA	_Bit3_Flip_P0
  11571  28d6				   .
  11572  28d6							; 
  11573  28d6
  11574  28d6				   .
  11575  28d6							; 
  11576  28d6
  11577  28d6				   .
  11578  28d6							; 
  11579  28d6
  11580  28d6				   .
  11581  28d6							; 
  11582  28d6
  11583  28d6				   .L0558		;  on _Frame_Counter goto __P0_D_00 __P0_D_01 __P0_D_02 __P0_D_03
  11584  28d6
  11585  28d6		       a6 d9		      LDX	_Frame_Counter
  11586  28d8		       bd e1 38 	      LDA	.L0558jumptablehi,x
  11587  28db		       48		      PHA
  11588  28dc		       bd e5 38 	      LDA	.L0558jumptablelo,x
  11589  28df		       48		      PHA
  11590  28e0		       60		      RTS
  11591  28e1				   .L0558jumptablehi
  11592  28e1		       3b		      .byte.b	>(.__P0_D_00-1)
  11593  28e2		       3b		      .byte.b	>(.__P0_D_01-1)
  11594  28e3		       3b		      .byte.b	>(.__P0_D_02-1)
  11595  28e4		       3b		      .byte.b	>(.__P0_D_03-1)
  11596  28e5				   .L0558jumptablelo
  11597  28e5		       6a		      .byte.b	<(.__P0_D_00-1)
  11598  28e6		       79		      .byte.b	<(.__P0_D_01-1)
  11599  28e7		       88		      .byte.b	<(.__P0_D_02-1)
  11600  28e8		       97		      .byte.b	<(.__P0_D_03-1)
  11601  28e9				   .
  11602  28e9							; 
  11603  28e9
  11604  28e9				   .
  11605  28e9							; 
  11606  28e9
  11607  28e9				   .
  11608  28e9							; 
  11609  28e9
  11610  28e9				   .
  11611  28e9							; 
  11612  28e9
  11613  28e9				   .
  11614  28e9							; 
  11615  28e9
  11616  28e9				   .
  11617  28e9							; 
  11618  28e9
  11619  28e9				   .
  11620  28e9							; 
  11621  28e9
  11622  28e9				   .
  11623  28e9							; 
  11624  28e9
  11625  28e9				   .__GoL
  11626  28e9							; __GoL
  11627  28e9
  11628  28e9				   .
  11629  28e9							; 
  11630  28e9
  11631  28e9				   .
  11632  28e9							; 
  11633  28e9
  11634  28e9				   .
  11635  28e9							; 
  11636  28e9
  11637  28e9				   .
  11638  28e9							; 
  11639  28e9
  11640  28e9				   .L0559		;  if _Bit2_Ship_Restrainer_L{2}  &&  _Bit1_P0_Hit_Seaweed{1}	&&  _Slide_Speed  >  0 then goto __Slide
  11641  28e9
  11642  28e9		       a5 c3		      LDA	_Bit2_Ship_Restrainer_L
  11643  28eb		       29 04		      AND	#4
  11644  28ed		       f0 0f		      BEQ	.skipL0559
  11645  28ef				   .condpart143
  11646  28ef		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  11647  28f1		       29 02		      AND	#2
  11648  28f3		       f0 09		      BEQ	.skip143then
  11649  28f5				   .condpart144
  11650  28f5		       a9 00		      LDA	#0
  11651  28f7		       c5 e1		      CMP	_Slide_Speed
  11652  28f9		       b0 03		      BCS	.skip144then
  11653  28fb				   .condpart145
  11654  28fb		       4c 9f 32 	      jmp	.__Slide
  11655  28fe
  11656  28fe				   .skip144then
  11657  28fe				   .skip143then
  11658  28fe				   .skipL0559
  11659  28fe				   .
  11660  28fe							; 
  11661  28fe
  11662  28fe				   .
  11663  28fe							; 
  11664  28fe
  11665  28fe				   .
  11666  28fe							; 
  11667  28fe
  11668  28fe				   .
  11669  28fe							; 
  11670  28fe
  11671  28fe				   .L0560		;  if _P0_Left_Right  >  16 then _P0_Left_Right  =  _P0_Left_Right  -	1.42
  11672  28fe
  11673  28fe		       a9 10		      LDA	#16
  11674  2900		       c5 80		      CMP	_P0_Left_Right
  11675  2902		       b0 0d		      BCS	.skipL0560
  11676  2904				   .condpart146
  11677  2904		       a5 d4		      LDA	a
  11678  2906		       38		      SEC
  11679  2907		       e9 6b		      SBC	#107
  11680  2909		       85 d4		      STA	a
  11681  290b		       a5 80		      LDA	_P0_Left_Right
  11682  290d		       e9 01		      SBC	#1
  11683  290f		       85 80		      STA	_P0_Left_Right
  11684  2911				   .skipL0560
  11685  2911				   .
  11686  2911							; 
  11687  2911
  11688  2911				   .
  11689  2911							; 
  11690  2911
  11691  2911				   .
  11692  2911							; 
  11693  2911
  11694  2911				   .
  11695  2911							; 
  11696  2911
  11697  2911				   .
  11698  2911							; 
  11699  2911
  11700  2911				   .
  11701  2911							; 
  11702  2911
  11703  2911				   .L0561		;  _BitOp_Ship  =  0  :  _BitOp_Ship  =  _BitOp_Ship  |  %00000100
  11704  2911
  11705  2911		       a9 00		      LDA	#0
  11706  2913		       85 c1		      STA	_BitOp_Ship
  11707  2915		       a5 c1		      LDA	_BitOp_Ship
  11708  2917		       09 04		      ORA	#%00000100
  11709  2919		       85 c1		      STA	_BitOp_Ship
  11710  291b				   .L0562		;  _Bitop_Ship_Restrainer  =  0  :  _Bit2_Ship_Restrainer_L{2}  =  1
  11711  291b
  11712  291b		       a9 00		      LDA	#0
  11713  291d		       85 c3		      STA	_Bitop_Ship_Restrainer
  11714  291f		       a5 c3		      LDA	_Bit2_Ship_Restrainer_L
  11715  2921		       09 04		      ORA	#4
  11716  2923		       85 c3		      STA	_Bit2_Ship_Restrainer_L
  11717  2925				   .
  11718  2925							; 
  11719  2925
  11720  2925				   .
  11721  2925							; 
  11722  2925
  11723  2925				   .
  11724  2925							; 
  11725  2925
  11726  2925				   .
  11727  2925							; 
  11728  2925
  11729  2925				   .L0563		;  _Bit3_Flip_P0{3}  =  0
  11730  2925
  11731  2925		       a5 c2		      LDA	_Bit3_Flip_P0
  11732  2927		       29 f7		      AND	#247
  11733  2929		       85 c2		      STA	_Bit3_Flip_P0
  11734  292b				   .
  11735  292b							; 
  11736  292b
  11737  292b				   .
  11738  292b							; 
  11739  292b
  11740  292b				   .
  11741  292b							; 
  11742  292b
  11743  292b				   .
  11744  292b							; 
  11745  292b
  11746  292b				   .L0564		;  on _Frame_Counter goto __P0_L_00 __P0_L_01 __P0_L_02 __P0_L_03
  11747  292b
  11748  292b		       a6 d9		      LDX	_Frame_Counter
  11749  292d		       bd 36 39 	      LDA	.L0564jumptablehi,x
  11750  2930		       48		      PHA
  11751  2931		       bd 3a 39 	      LDA	.L0564jumptablelo,x
  11752  2934		       48		      PHA
  11753  2935		       60		      RTS
  11754  2936				   .L0564jumptablehi
  11755  2936		       3b		      .byte.b	>(.__P0_L_00-1)
  11756  2937		       3b		      .byte.b	>(.__P0_L_01-1)
  11757  2938		       3b		      .byte.b	>(.__P0_L_02-1)
  11758  2939		       3b		      .byte.b	>(.__P0_L_03-1)
  11759  293a				   .L0564jumptablelo
  11760  293a		       a6		      .byte.b	<(.__P0_L_00-1)
  11761  293b		       b5		      .byte.b	<(.__P0_L_01-1)
  11762  293c		       c4		      .byte.b	<(.__P0_L_02-1)
  11763  293d		       d3		      .byte.b	<(.__P0_L_03-1)
  11764  293e				   .
  11765  293e							; 
  11766  293e
  11767  293e				   .
  11768  293e							; 
  11769  293e
  11770  293e				   .
  11771  293e							; 
  11772  293e
  11773  293e				   .
  11774  293e							; 
  11775  293e
  11776  293e				   .
  11777  293e							; 
  11778  293e
  11779  293e				   .
  11780  293e							; 
  11781  293e
  11782  293e				   .
  11783  293e							; 
  11784  293e
  11785  293e				   .
  11786  293e							; 
  11787  293e
  11788  293e				   .__GoR
  11789  293e							; __GoR
  11790  293e
  11791  293e				   .
  11792  293e							; 
  11793  293e
  11794  293e				   .
  11795  293e							; 
  11796  293e
  11797  293e				   .
  11798  293e							; 
  11799  293e
  11800  293e				   .
  11801  293e							; 
  11802  293e
  11803  293e				   .L0565		;  if _Bit3_Ship_Restrainer_R{3}  &&  _Bit1_P0_Hit_Seaweed{1}	&&  _Slide_Speed  >  0 then goto __Slide
  11804  293e
  11805  293e		       a5 c3		      LDA	_Bit3_Ship_Restrainer_R
  11806  2940		       29 08		      AND	#8
  11807  2942		       f0 0f		      BEQ	.skipL0565
  11808  2944				   .condpart147
  11809  2944		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  11810  2946		       29 02		      AND	#2
  11811  2948		       f0 09		      BEQ	.skip147then
  11812  294a				   .condpart148
  11813  294a		       a9 00		      LDA	#0
  11814  294c		       c5 e1		      CMP	_Slide_Speed
  11815  294e		       b0 03		      BCS	.skip148then
  11816  2950				   .condpart149
  11817  2950		       4c 9f 32 	      jmp	.__Slide
  11818  2953
  11819  2953				   .skip148then
  11820  2953				   .skip147then
  11821  2953				   .skipL0565
  11822  2953				   .
  11823  2953							; 
  11824  2953
  11825  2953				   .
  11826  2953							; 
  11827  2953
  11828  2953				   .
  11829  2953							; 
  11830  2953
  11831  2953				   .
  11832  2953							; 
  11833  2953
  11834  2953				   .L0566		;  if _P0_Left_Right  <  138 then _P0_Left_Right = _P0_Left_Right + 1.42
  11835  2953
  11836  2953		       a5 80		      LDA	_P0_Left_Right
  11837  2955		       c9 8a		      CMP	#138
  11838  2957		       b0 0d		      BCS	.skipL0566
  11839  2959				   .condpart150
  11840  2959		       a5 d4		      LDA	a
  11841  295b		       18		      CLC
  11842  295c		       69 6b		      ADC	#107
  11843  295e		       85 d4		      STA	a
  11844  2960		       a5 80		      LDA	_P0_Left_Right
  11845  2962		       69 01		      ADC	#1
  11846  2964		       85 80		      STA	_P0_Left_Right
  11847  2966				   .skipL0566
  11848  2966				   .
  11849  2966							; 
  11850  2966
  11851  2966				   .
  11852  2966							; 
  11853  2966
  11854  2966				   .
  11855  2966							; 
  11856  2966
  11857  2966				   .
  11858  2966							; 
  11859  2966
  11860  2966				   .
  11861  2966							; 
  11862  2966
  11863  2966				   .
  11864  2966							; 
  11865  2966
  11866  2966				   .L0567		;  _BitOp_Ship  =  0  :  _BitOp_Ship  =  _BitOp_Ship  |  %00001000
  11867  2966
  11868  2966		       a9 00		      LDA	#0
  11869  2968		       85 c1		      STA	_BitOp_Ship
  11870  296a		       a5 c1		      LDA	_BitOp_Ship
  11871  296c		       09 08		      ORA	#%00001000
  11872  296e		       85 c1		      STA	_BitOp_Ship
  11873  2970				   .L0568		;  _Bitop_Ship_Restrainer  =  0  :  _Bit3_Ship_Restrainer_R{3}  =  1
  11874  2970
  11875  2970		       a9 00		      LDA	#0
  11876  2972		       85 c3		      STA	_Bitop_Ship_Restrainer
  11877  2974		       a5 c3		      LDA	_Bit3_Ship_Restrainer_R
  11878  2976		       09 08		      ORA	#8
  11879  2978		       85 c3		      STA	_Bit3_Ship_Restrainer_R
  11880  297a				   .
  11881  297a							; 
  11882  297a
  11883  297a				   .
  11884  297a							; 
  11885  297a
  11886  297a				   .
  11887  297a							; 
  11888  297a
  11889  297a				   .
  11890  297a							; 
  11891  297a
  11892  297a				   .L0569		;  _Bit3_Flip_P0{3}  =  1
  11893  297a
  11894  297a		       a5 c2		      LDA	_Bit3_Flip_P0
  11895  297c		       09 08		      ORA	#8
  11896  297e		       85 c2		      STA	_Bit3_Flip_P0
  11897  2980				   .
  11898  2980							; 
  11899  2980
  11900  2980				   .
  11901  2980							; 
  11902  2980
  11903  2980				   .
  11904  2980							; 
  11905  2980
  11906  2980				   .
  11907  2980							; 
  11908  2980
  11909  2980				   .L0570		;  on _Frame_Counter goto __P0_L_00 __P0_L_01 __P0_L_02 __P0_L_03
  11910  2980
  11911  2980		       a6 d9		      LDX	_Frame_Counter
  11912  2982		       bd 8b 39 	      LDA	.L0570jumptablehi,x
  11913  2985		       48		      PHA
  11914  2986		       bd 8f 39 	      LDA	.L0570jumptablelo,x
  11915  2989		       48		      PHA
  11916  298a		       60		      RTS
  11917  298b				   .L0570jumptablehi
  11918  298b		       3b		      .byte.b	>(.__P0_L_00-1)
  11919  298c		       3b		      .byte.b	>(.__P0_L_01-1)
  11920  298d		       3b		      .byte.b	>(.__P0_L_02-1)
  11921  298e		       3b		      .byte.b	>(.__P0_L_03-1)
  11922  298f				   .L0570jumptablelo
  11923  298f		       a6		      .byte.b	<(.__P0_L_00-1)
  11924  2990		       b5		      .byte.b	<(.__P0_L_01-1)
  11925  2991		       c4		      .byte.b	<(.__P0_L_02-1)
  11926  2992		       d3		      .byte.b	<(.__P0_L_03-1)
  11927  2993				   .
  11928  2993							; 
  11929  2993
  11930  2993				   .
  11931  2993							; 
  11932  2993
  11933  2993				   .
  11934  2993							; 
  11935  2993
  11936  2993				   .
  11937  2993							; 
  11938  2993
  11939  2993				   .
  11940  2993							; 
  11941  2993
  11942  2993				   .
  11943  2993							; 
  11944  2993
  11945  2993				   .
  11946  2993							; 
  11947  2993
  11948  2993				   .
  11949  2993							; 
  11950  2993
  11951  2993				   .__GoUL
  11952  2993							; __GoUL
  11953  2993
  11954  2993				   .
  11955  2993							; 
  11956  2993
  11957  2993				   .
  11958  2993							; 
  11959  2993
  11960  2993				   .
  11961  2993							; 
  11962  2993
  11963  2993				   .
  11964  2993							; 
  11965  2993
  11966  2993				   .L0571		;  if _Bit4_Ship_Restrainer_UL{4}  &&	_Bit1_P0_Hit_Seaweed{1} then if _Slide_Speed  >  0 then goto __Slide
  11967  2993
  11968  2993		       a5 c3		      LDA	_Bit4_Ship_Restrainer_UL
  11969  2995		       29 10		      AND	#16
  11970  2997		       f0 0f		      BEQ	.skipL0571
  11971  2999				   .condpart151
  11972  2999		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  11973  299b		       29 02		      AND	#2
  11974  299d		       f0 09		      BEQ	.skip151then
  11975  299f				   .condpart152
  11976  299f		       a9 00		      LDA	#0
  11977  29a1		       c5 e1		      CMP	_Slide_Speed
  11978  29a3		       b0 03		      BCS	.skip152then
  11979  29a5				   .condpart153
  11980  29a5		       4c 9f 32 	      jmp	.__Slide
  11981  29a8
  11982  29a8				   .skip152then
  11983  29a8				   .skip151then
  11984  29a8				   .skipL0571
  11985  29a8				   .
  11986  29a8							; 
  11987  29a8
  11988  29a8				   .
  11989  29a8							; 
  11990  29a8
  11991  29a8				   .
  11992  29a8							; 
  11993  29a8
  11994  29a8				   .
  11995  29a8							; 
  11996  29a8
  11997  29a8				   .L0572		;  if _P0_Up_Down  >  10 then _P0_Up_Down  =  _P0_Up_Down  -  1.42
  11998  29a8
  11999  29a8		       a9 0a		      LDA	#10
  12000  29aa		       c5 85		      CMP	_P0_Up_Down
  12001  29ac		       b0 0d		      BCS	.skipL0572
  12002  29ae				   .condpart154
  12003  29ae		       a5 d5		      LDA	b
  12004  29b0		       38		      SEC
  12005  29b1		       e9 6b		      SBC	#107
  12006  29b3		       85 d5		      STA	b
  12007  29b5		       a5 85		      LDA	_P0_Up_Down
  12008  29b7		       e9 01		      SBC	#1
  12009  29b9		       85 85		      STA	_P0_Up_Down
  12010  29bb				   .skipL0572
  12011  29bb				   .L0573		;  if _P0_Left_Right  >  2 then _P0_Left_Right  =  _P0_Left_Right  -  1.42
  12012  29bb
  12013  29bb		       a9 02		      LDA	#2
  12014  29bd		       c5 80		      CMP	_P0_Left_Right
  12015  29bf		       b0 0d		      BCS	.skipL0573
  12016  29c1				   .condpart155
  12017  29c1		       a5 d4		      LDA	a
  12018  29c3		       38		      SEC
  12019  29c4		       e9 6b		      SBC	#107
  12020  29c6		       85 d4		      STA	a
  12021  29c8		       a5 80		      LDA	_P0_Left_Right
  12022  29ca		       e9 01		      SBC	#1
  12023  29cc		       85 80		      STA	_P0_Left_Right
  12024  29ce				   .skipL0573
  12025  29ce				   .
  12026  29ce							; 
  12027  29ce
  12028  29ce				   .
  12029  29ce							; 
  12030  29ce
  12031  29ce				   .
  12032  29ce							; 
  12033  29ce
  12034  29ce				   .
  12035  29ce							; 
  12036  29ce
  12037  29ce				   .
  12038  29ce							; 
  12039  29ce
  12040  29ce				   .
  12041  29ce							; 
  12042  29ce
  12043  29ce				   .L0574		;  _BitOp_Ship  =  0  :  _BitOp_Ship  =  _BitOp_Ship  |  %00000101
  12044  29ce
  12045  29ce		       a9 00		      LDA	#0
  12046  29d0		       85 c1		      STA	_BitOp_Ship
  12047  29d2		       a5 c1		      LDA	_BitOp_Ship
  12048  29d4		       09 05		      ORA	#%00000101
  12049  29d6		       85 c1		      STA	_BitOp_Ship
  12050  29d8				   .L0575		;  _Bitop_Ship_Restrainer  =  0  :  _Bit4_Ship_Restrainer_UL{4}  =  1
  12051  29d8
  12052  29d8		       a9 00		      LDA	#0
  12053  29da		       85 c3		      STA	_Bitop_Ship_Restrainer
  12054  29dc		       a5 c3		      LDA	_Bit4_Ship_Restrainer_UL
  12055  29de		       09 10		      ORA	#16
  12056  29e0		       85 c3		      STA	_Bit4_Ship_Restrainer_UL
  12057  29e2				   .
  12058  29e2							; 
  12059  29e2
  12060  29e2				   .
  12061  29e2							; 
  12062  29e2
  12063  29e2				   .
  12064  29e2							; 
  12065  29e2
  12066  29e2				   .
  12067  29e2							; 
  12068  29e2
  12069  29e2				   .L0576		;  _Bit3_Flip_P0{3}  =  0
  12070  29e2
  12071  29e2		       a5 c2		      LDA	_Bit3_Flip_P0
  12072  29e4		       29 f7		      AND	#247
  12073  29e6		       85 c2		      STA	_Bit3_Flip_P0
  12074  29e8				   .
  12075  29e8							; 
  12076  29e8
  12077  29e8				   .
  12078  29e8							; 
  12079  29e8
  12080  29e8				   .
  12081  29e8							; 
  12082  29e8
  12083  29e8				   .
  12084  29e8							; 
  12085  29e8
  12086  29e8				   .L0577		;  on _Frame_Counter goto __P0_UL_00 __P0_UL_01 __P0_UL_02 __P0_UL_03
  12087  29e8
  12088  29e8		       a6 d9		      LDX	_Frame_Counter
  12089  29ea		       bd f3 39 	      LDA	.L0577jumptablehi,x
  12090  29ed		       48		      PHA
  12091  29ee		       bd f7 39 	      LDA	.L0577jumptablelo,x
  12092  29f1		       48		      PHA
  12093  29f2		       60		      RTS
  12094  29f3				   .L0577jumptablehi
  12095  29f3		       3b		      .byte.b	>(.__P0_UL_00-1)
  12096  29f4		       3b		      .byte.b	>(.__P0_UL_01-1)
  12097  29f5		       3c		      .byte.b	>(.__P0_UL_02-1)
  12098  29f6		       3c		      .byte.b	>(.__P0_UL_03-1)
  12099  29f7				   .L0577jumptablelo
  12100  29f7		       e2		      .byte.b	<(.__P0_UL_00-1)
  12101  29f8		       f1		      .byte.b	<(.__P0_UL_01-1)
  12102  29f9		       00		      .byte.b	<(.__P0_UL_02-1)
  12103  29fa		       0f		      .byte.b	<(.__P0_UL_03-1)
  12104  29fb				   .
  12105  29fb							; 
  12106  29fb
  12107  29fb				   .
  12108  29fb							; 
  12109  29fb
  12110  29fb				   .
  12111  29fb							; 
  12112  29fb
  12113  29fb				   .
  12114  29fb							; 
  12115  29fb
  12116  29fb				   .
  12117  29fb							; 
  12118  29fb
  12119  29fb				   .
  12120  29fb							; 
  12121  29fb
  12122  29fb				   .
  12123  29fb							; 
  12124  29fb
  12125  29fb				   .
  12126  29fb							; 
  12127  29fb
  12128  29fb				   .__GoUR
  12129  29fb							; __GoUR
  12130  29fb
  12131  29fb				   .
  12132  29fb							; 
  12133  29fb
  12134  29fb				   .
  12135  29fb							; 
  12136  29fb
  12137  29fb				   .
  12138  29fb							; 
  12139  29fb
  12140  29fb				   .
  12141  29fb							; 
  12142  29fb
  12143  29fb				   .L0578		;  if _Bit5_Ship_Restrainer_UR{5}  &&	_Bit1_P0_Hit_Seaweed{1} then if _Slide_Speed  >  0 then goto __Slide
  12144  29fb
  12145  29fb		       a5 c3		      LDA	_Bit5_Ship_Restrainer_UR
  12146  29fd		       29 20		      AND	#32
  12147  29ff		       f0 0f		      BEQ	.skipL0578
  12148  2a01				   .condpart156
  12149  2a01		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  12150  2a03		       29 02		      AND	#2
  12151  2a05		       f0 09		      BEQ	.skip156then
  12152  2a07				   .condpart157
  12153  2a07		       a9 00		      LDA	#0
  12154  2a09		       c5 e1		      CMP	_Slide_Speed
  12155  2a0b		       b0 03		      BCS	.skip157then
  12156  2a0d				   .condpart158
  12157  2a0d		       4c 9f 32 	      jmp	.__Slide
  12158  2a10
  12159  2a10				   .skip157then
  12160  2a10				   .skip156then
  12161  2a10				   .skipL0578
  12162  2a10				   .
  12163  2a10							; 
  12164  2a10
  12165  2a10				   .
  12166  2a10							; 
  12167  2a10
  12168  2a10				   .
  12169  2a10							; 
  12170  2a10
  12171  2a10				   .
  12172  2a10							; 
  12173  2a10
  12174  2a10				   .L0579		;  if _P0_Up_Down  >  10 then _P0_Up_Down  =  _P0_Up_Down  -  1.42
  12175  2a10
  12176  2a10		       a9 0a		      LDA	#10
  12177  2a12		       c5 85		      CMP	_P0_Up_Down
  12178  2a14		       b0 0d		      BCS	.skipL0579
  12179  2a16				   .condpart159
  12180  2a16		       a5 d5		      LDA	b
  12181  2a18		       38		      SEC
  12182  2a19		       e9 6b		      SBC	#107
  12183  2a1b		       85 d5		      STA	b
  12184  2a1d		       a5 85		      LDA	_P0_Up_Down
  12185  2a1f		       e9 01		      SBC	#1
  12186  2a21		       85 85		      STA	_P0_Up_Down
  12187  2a23				   .skipL0579
  12188  2a23				   .
  12189  2a23							; 
  12190  2a23
  12191  2a23				   .L0580		;  if _P0_Left_Right  <  152 then _P0_Left_Right  =  _P0_Left_Right  +  1.42
  12192  2a23
  12193  2a23		       a5 80		      LDA	_P0_Left_Right
  12194  2a25		       c9 98		      CMP	#152
  12195  2a27		       b0 0d		      BCS	.skipL0580
  12196  2a29				   .condpart160
  12197  2a29		       a5 d4		      LDA	a
  12198  2a2b		       18		      CLC
  12199  2a2c		       69 6b		      ADC	#107
  12200  2a2e		       85 d4		      STA	a
  12201  2a30		       a5 80		      LDA	_P0_Left_Right
  12202  2a32		       69 01		      ADC	#1
  12203  2a34		       85 80		      STA	_P0_Left_Right
  12204  2a36				   .skipL0580
  12205  2a36				   .
  12206  2a36							; 
  12207  2a36
  12208  2a36				   .
  12209  2a36							; 
  12210  2a36
  12211  2a36				   .
  12212  2a36							; 
  12213  2a36
  12214  2a36				   .
  12215  2a36							; 
  12216  2a36
  12217  2a36				   .
  12218  2a36							; 
  12219  2a36
  12220  2a36				   .
  12221  2a36							; 
  12222  2a36
  12223  2a36				   .L0581		;  _BitOp_Ship  =  0  :  _BitOp_Ship  =  _BitOp_Ship  |  %00001001
  12224  2a36
  12225  2a36		       a9 00		      LDA	#0
  12226  2a38		       85 c1		      STA	_BitOp_Ship
  12227  2a3a		       a5 c1		      LDA	_BitOp_Ship
  12228  2a3c		       09 09		      ORA	#%00001001
  12229  2a3e		       85 c1		      STA	_BitOp_Ship
  12230  2a40				   .L0582		;  _Bitop_Ship_Restrainer  =  0  :  _Bit5_Ship_Restrainer_UR{5}  =  1
  12231  2a40
  12232  2a40		       a9 00		      LDA	#0
  12233  2a42		       85 c3		      STA	_Bitop_Ship_Restrainer
  12234  2a44		       a5 c3		      LDA	_Bit5_Ship_Restrainer_UR
  12235  2a46		       09 20		      ORA	#32
  12236  2a48		       85 c3		      STA	_Bit5_Ship_Restrainer_UR
  12237  2a4a				   .
  12238  2a4a							; 
  12239  2a4a
  12240  2a4a				   .
  12241  2a4a							; 
  12242  2a4a
  12243  2a4a				   .
  12244  2a4a							; 
  12245  2a4a
  12246  2a4a				   .
  12247  2a4a							; 
  12248  2a4a
  12249  2a4a				   .L0583		;  _Bit3_Flip_P0{3}  =  1
  12250  2a4a
  12251  2a4a		       a5 c2		      LDA	_Bit3_Flip_P0
  12252  2a4c		       09 08		      ORA	#8
  12253  2a4e		       85 c2		      STA	_Bit3_Flip_P0
  12254  2a50				   .
  12255  2a50							; 
  12256  2a50
  12257  2a50				   .
  12258  2a50							; 
  12259  2a50
  12260  2a50				   .
  12261  2a50							; 
  12262  2a50
  12263  2a50				   .
  12264  2a50							; 
  12265  2a50
  12266  2a50				   .L0584		;  on _Frame_Counter goto __P0_UL_00 __P0_UL_01 __P0_UL_02 __P0_UL_03
  12267  2a50
  12268  2a50		       a6 d9		      LDX	_Frame_Counter
  12269  2a52		       bd 5b 3a 	      LDA	.L0584jumptablehi,x
  12270  2a55		       48		      PHA
  12271  2a56		       bd 5f 3a 	      LDA	.L0584jumptablelo,x
  12272  2a59		       48		      PHA
  12273  2a5a		       60		      RTS
  12274  2a5b				   .L0584jumptablehi
  12275  2a5b		       3b		      .byte.b	>(.__P0_UL_00-1)
  12276  2a5c		       3b		      .byte.b	>(.__P0_UL_01-1)
  12277  2a5d		       3c		      .byte.b	>(.__P0_UL_02-1)
  12278  2a5e		       3c		      .byte.b	>(.__P0_UL_03-1)
  12279  2a5f				   .L0584jumptablelo
  12280  2a5f		       e2		      .byte.b	<(.__P0_UL_00-1)
  12281  2a60		       f1		      .byte.b	<(.__P0_UL_01-1)
  12282  2a61		       00		      .byte.b	<(.__P0_UL_02-1)
  12283  2a62		       0f		      .byte.b	<(.__P0_UL_03-1)
  12284  2a63				   .
  12285  2a63							; 
  12286  2a63
  12287  2a63				   .
  12288  2a63							; 
  12289  2a63
  12290  2a63				   .
  12291  2a63							; 
  12292  2a63
  12293  2a63				   .
  12294  2a63							; 
  12295  2a63
  12296  2a63				   .
  12297  2a63							; 
  12298  2a63
  12299  2a63				   .
  12300  2a63							; 
  12301  2a63
  12302  2a63				   .
  12303  2a63							; 
  12304  2a63
  12305  2a63				   .
  12306  2a63							; 
  12307  2a63
  12308  2a63				   .__GoDL
  12309  2a63							; __GoDL
  12310  2a63
  12311  2a63				   .
  12312  2a63							; 
  12313  2a63
  12314  2a63				   .
  12315  2a63							; 
  12316  2a63
  12317  2a63				   .
  12318  2a63							; 
  12319  2a63
  12320  2a63				   .
  12321  2a63							; 
  12322  2a63
  12323  2a63				   .L0585		;  if _Bit6_Ship_Restrainer_DL{6}  &&	_Bit1_P0_Hit_Seaweed{1} then if _Slide_Speed  >  0 then goto __Slide
  12324  2a63
  12325  2a63		       24 c3		      BIT	_Bit6_Ship_Restrainer_DL
  12326  2a65		       50 0f		      BVC	.skipL0585
  12327  2a67				   .condpart161
  12328  2a67		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  12329  2a69		       29 02		      AND	#2
  12330  2a6b		       f0 09		      BEQ	.skip161then
  12331  2a6d				   .condpart162
  12332  2a6d		       a9 00		      LDA	#0
  12333  2a6f		       c5 e1		      CMP	_Slide_Speed
  12334  2a71		       b0 03		      BCS	.skip162then
  12335  2a73				   .condpart163
  12336  2a73		       4c 9f 32 	      jmp	.__Slide
  12337  2a76
  12338  2a76				   .skip162then
  12339  2a76				   .skip161then
  12340  2a76				   .skipL0585
  12341  2a76				   .
  12342  2a76							; 
  12343  2a76
  12344  2a76				   .
  12345  2a76							; 
  12346  2a76
  12347  2a76				   .
  12348  2a76							; 
  12349  2a76
  12350  2a76				   .
  12351  2a76							; 
  12352  2a76
  12353  2a76				   .L0586		;  if _P0_Up_Down  <  86 then _P0_Up_Down  =  _P0_Up_Down  +  1.42
  12354  2a76
  12355  2a76		       a5 85		      LDA	_P0_Up_Down
  12356  2a78		       c9 56		      CMP	#86
  12357  2a7a		       b0 0d		      BCS	.skipL0586
  12358  2a7c				   .condpart164
  12359  2a7c		       a5 d5		      LDA	b
  12360  2a7e		       18		      CLC
  12361  2a7f		       69 6b		      ADC	#107
  12362  2a81		       85 d5		      STA	b
  12363  2a83		       a5 85		      LDA	_P0_Up_Down
  12364  2a85		       69 01		      ADC	#1
  12365  2a87		       85 85		      STA	_P0_Up_Down
  12366  2a89				   .skipL0586
  12367  2a89				   .L0587		;  if _P0_Left_Right  >  2 then _P0_Left_Right  =  _P0_Left_Right  -  1.42
  12368  2a89
  12369  2a89		       a9 02		      LDA	#2
  12370  2a8b		       c5 80		      CMP	_P0_Left_Right
  12371  2a8d		       b0 0d		      BCS	.skipL0587
  12372  2a8f				   .condpart165
  12373  2a8f		       a5 d4		      LDA	a
  12374  2a91		       38		      SEC
  12375  2a92		       e9 6b		      SBC	#107
  12376  2a94		       85 d4		      STA	a
  12377  2a96		       a5 80		      LDA	_P0_Left_Right
  12378  2a98		       e9 01		      SBC	#1
  12379  2a9a		       85 80		      STA	_P0_Left_Right
  12380  2a9c				   .skipL0587
  12381  2a9c				   .
  12382  2a9c							; 
  12383  2a9c
  12384  2a9c				   .
  12385  2a9c							; 
  12386  2a9c
  12387  2a9c				   .
  12388  2a9c							; 
  12389  2a9c
  12390  2a9c				   .
  12391  2a9c							; 
  12392  2a9c
  12393  2a9c				   .
  12394  2a9c							; 
  12395  2a9c
  12396  2a9c				   .
  12397  2a9c							; 
  12398  2a9c
  12399  2a9c				   .L0588		;  _BitOp_Ship  =  0  :  _BitOp_Ship  =  _BitOp_Ship  |  %00000110
  12400  2a9c
  12401  2a9c		       a9 00		      LDA	#0
  12402  2a9e		       85 c1		      STA	_BitOp_Ship
  12403  2aa0		       a5 c1		      LDA	_BitOp_Ship
  12404  2aa2		       09 06		      ORA	#%00000110
  12405  2aa4		       85 c1		      STA	_BitOp_Ship
  12406  2aa6				   .L0589		;  _Bitop_Ship_Restrainer  =  0  :  _Bit6_Ship_Restrainer_DL{6}  =  1
  12407  2aa6
  12408  2aa6		       a9 00		      LDA	#0
  12409  2aa8		       85 c3		      STA	_Bitop_Ship_Restrainer
  12410  2aaa		       a5 c3		      LDA	_Bit6_Ship_Restrainer_DL
  12411  2aac		       09 40		      ORA	#64
  12412  2aae		       85 c3		      STA	_Bit6_Ship_Restrainer_DL
  12413  2ab0				   .
  12414  2ab0							; 
  12415  2ab0
  12416  2ab0				   .
  12417  2ab0							; 
  12418  2ab0
  12419  2ab0				   .
  12420  2ab0							; 
  12421  2ab0
  12422  2ab0				   .
  12423  2ab0							; 
  12424  2ab0
  12425  2ab0				   .L0590		;  _Bit3_Flip_P0{3}  =  0
  12426  2ab0
  12427  2ab0		       a5 c2		      LDA	_Bit3_Flip_P0
  12428  2ab2		       29 f7		      AND	#247
  12429  2ab4		       85 c2		      STA	_Bit3_Flip_P0
  12430  2ab6				   .
  12431  2ab6							; 
  12432  2ab6
  12433  2ab6				   .
  12434  2ab6							; 
  12435  2ab6
  12436  2ab6				   .
  12437  2ab6							; 
  12438  2ab6
  12439  2ab6				   .
  12440  2ab6							; 
  12441  2ab6
  12442  2ab6				   .L0591		;  on _Frame_Counter goto __P0_DL_00 __P0_DL_01 __P0_DL_02 __P0_DL_03
  12443  2ab6
  12444  2ab6		       a6 d9		      LDX	_Frame_Counter
  12445  2ab8		       bd c1 3a 	      LDA	.L0591jumptablehi,x
  12446  2abb		       48		      PHA
  12447  2abc		       bd c5 3a 	      LDA	.L0591jumptablelo,x
  12448  2abf		       48		      PHA
  12449  2ac0		       60		      RTS
  12450  2ac1				   .L0591jumptablehi
  12451  2ac1		       3c		      .byte.b	>(.__P0_DL_00-1)
  12452  2ac2		       3c		      .byte.b	>(.__P0_DL_01-1)
  12453  2ac3		       3c		      .byte.b	>(.__P0_DL_02-1)
  12454  2ac4		       3c		      .byte.b	>(.__P0_DL_03-1)
  12455  2ac5				   .L0591jumptablelo
  12456  2ac5		       1e		      .byte.b	<(.__P0_DL_00-1)
  12457  2ac6		       2d		      .byte.b	<(.__P0_DL_01-1)
  12458  2ac7		       3c		      .byte.b	<(.__P0_DL_02-1)
  12459  2ac8		       4b		      .byte.b	<(.__P0_DL_03-1)
  12460  2ac9				   .
  12461  2ac9							; 
  12462  2ac9
  12463  2ac9				   .
  12464  2ac9							; 
  12465  2ac9
  12466  2ac9				   .
  12467  2ac9							; 
  12468  2ac9
  12469  2ac9				   .
  12470  2ac9							; 
  12471  2ac9
  12472  2ac9				   .
  12473  2ac9							; 
  12474  2ac9
  12475  2ac9				   .
  12476  2ac9							; 
  12477  2ac9
  12478  2ac9				   .
  12479  2ac9							; 
  12480  2ac9
  12481  2ac9				   .
  12482  2ac9							; 
  12483  2ac9
  12484  2ac9				   .__GoDR
  12485  2ac9							; __GoDR
  12486  2ac9
  12487  2ac9				   .
  12488  2ac9							; 
  12489  2ac9
  12490  2ac9				   .
  12491  2ac9							; 
  12492  2ac9
  12493  2ac9				   .
  12494  2ac9							; 
  12495  2ac9
  12496  2ac9				   .
  12497  2ac9							; 
  12498  2ac9
  12499  2ac9				   .L0592		;  if _Bit7_Ship_Restrainer_DR{7}  &&	_Bit1_P0_Hit_Seaweed{1} then if _Slide_Speed  >  0 then goto __Slide
  12500  2ac9
  12501  2ac9		       24 c3		      BIT	_Bit7_Ship_Restrainer_DR
  12502  2acb		       10 0f		      BPL	.skipL0592
  12503  2acd				   .condpart166
  12504  2acd		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  12505  2acf		       29 02		      AND	#2
  12506  2ad1		       f0 09		      BEQ	.skip166then
  12507  2ad3				   .condpart167
  12508  2ad3		       a9 00		      LDA	#0
  12509  2ad5		       c5 e1		      CMP	_Slide_Speed
  12510  2ad7		       b0 03		      BCS	.skip167then
  12511  2ad9				   .condpart168
  12512  2ad9		       4c 9f 32 	      jmp	.__Slide
  12513  2adc
  12514  2adc				   .skip167then
  12515  2adc				   .skip166then
  12516  2adc				   .skipL0592
  12517  2adc				   .
  12518  2adc							; 
  12519  2adc
  12520  2adc				   .
  12521  2adc							; 
  12522  2adc
  12523  2adc				   .
  12524  2adc							; 
  12525  2adc
  12526  2adc				   .
  12527  2adc							; 
  12528  2adc
  12529  2adc				   .L0593		;  if _P0_Up_Down  <  86 then _P0_Up_Down  =  _P0_Up_Down  +  1.42
  12530  2adc
  12531  2adc		       a5 85		      LDA	_P0_Up_Down
  12532  2ade		       c9 56		      CMP	#86
  12533  2ae0		       b0 0d		      BCS	.skipL0593
  12534  2ae2				   .condpart169
  12535  2ae2		       a5 d5		      LDA	b
  12536  2ae4		       18		      CLC
  12537  2ae5		       69 6b		      ADC	#107
  12538  2ae7		       85 d5		      STA	b
  12539  2ae9		       a5 85		      LDA	_P0_Up_Down
  12540  2aeb		       69 01		      ADC	#1
  12541  2aed		       85 85		      STA	_P0_Up_Down
  12542  2aef				   .skipL0593
  12543  2aef				   .L0594		;  if _P0_Left_Right  <  152 then _P0_Left_Right  =  _P0_Left_Right  +  1.42
  12544  2aef
  12545  2aef		       a5 80		      LDA	_P0_Left_Right
  12546  2af1		       c9 98		      CMP	#152
  12547  2af3		       b0 0d		      BCS	.skipL0594
  12548  2af5				   .condpart170
  12549  2af5		       a5 d4		      LDA	a
  12550  2af7		       18		      CLC
  12551  2af8		       69 6b		      ADC	#107
  12552  2afa		       85 d4		      STA	a
  12553  2afc		       a5 80		      LDA	_P0_Left_Right
  12554  2afe		       69 01		      ADC	#1
  12555  2b00		       85 80		      STA	_P0_Left_Right
  12556  2b02				   .skipL0594
  12557  2b02				   .
  12558  2b02							; 
  12559  2b02
  12560  2b02				   .
  12561  2b02							; 
  12562  2b02
  12563  2b02				   .
  12564  2b02							; 
  12565  2b02
  12566  2b02				   .
  12567  2b02							; 
  12568  2b02
  12569  2b02				   .
  12570  2b02							; 
  12571  2b02
  12572  2b02				   .
  12573  2b02							; 
  12574  2b02
  12575  2b02				   .L0595		;  _BitOp_Ship  =  0  :  _BitOp_Ship  =  _BitOp_Ship  |  %00001010
  12576  2b02
  12577  2b02		       a9 00		      LDA	#0
  12578  2b04		       85 c1		      STA	_BitOp_Ship
  12579  2b06		       a5 c1		      LDA	_BitOp_Ship
  12580  2b08		       09 0a		      ORA	#%00001010
  12581  2b0a		       85 c1		      STA	_BitOp_Ship
  12582  2b0c				   .L0596		;  _Bitop_Ship_Restrainer  =  0  :  _Bit7_Ship_Restrainer_DR{7}  =  1
  12583  2b0c
  12584  2b0c		       a9 00		      LDA	#0
  12585  2b0e		       85 c3		      STA	_Bitop_Ship_Restrainer
  12586  2b10		       a5 c3		      LDA	_Bit7_Ship_Restrainer_DR
  12587  2b12		       09 80		      ORA	#128
  12588  2b14		       85 c3		      STA	_Bit7_Ship_Restrainer_DR
  12589  2b16				   .
  12590  2b16							; 
  12591  2b16
  12592  2b16				   .
  12593  2b16							; 
  12594  2b16
  12595  2b16				   .
  12596  2b16							; 
  12597  2b16
  12598  2b16				   .
  12599  2b16							; 
  12600  2b16
  12601  2b16				   .L0597		;  _Bit3_Flip_P0{3}  =  1
  12602  2b16
  12603  2b16		       a5 c2		      LDA	_Bit3_Flip_P0
  12604  2b18		       09 08		      ORA	#8
  12605  2b1a		       85 c2		      STA	_Bit3_Flip_P0
  12606  2b1c				   .
  12607  2b1c							; 
  12608  2b1c
  12609  2b1c				   .
  12610  2b1c							; 
  12611  2b1c
  12612  2b1c				   .
  12613  2b1c							; 
  12614  2b1c
  12615  2b1c				   .
  12616  2b1c							; 
  12617  2b1c
  12618  2b1c				   .L0598		;  on _Frame_Counter goto __P0_DL_00 __P0_DL_01 __P0_DL_02 __P0_DL_03
  12619  2b1c
  12620  2b1c		       a6 d9		      LDX	_Frame_Counter
  12621  2b1e		       bd 27 3b 	      LDA	.L0598jumptablehi,x
  12622  2b21		       48		      PHA
  12623  2b22		       bd 2b 3b 	      LDA	.L0598jumptablelo,x
  12624  2b25		       48		      PHA
  12625  2b26		       60		      RTS
  12626  2b27				   .L0598jumptablehi
  12627  2b27		       3c		      .byte.b	>(.__P0_DL_00-1)
  12628  2b28		       3c		      .byte.b	>(.__P0_DL_01-1)
  12629  2b29		       3c		      .byte.b	>(.__P0_DL_02-1)
  12630  2b2a		       3c		      .byte.b	>(.__P0_DL_03-1)
  12631  2b2b				   .L0598jumptablelo
  12632  2b2b		       1e		      .byte.b	<(.__P0_DL_00-1)
  12633  2b2c		       2d		      .byte.b	<(.__P0_DL_01-1)
  12634  2b2d		       3c		      .byte.b	<(.__P0_DL_02-1)
  12635  2b2e		       4b		      .byte.b	<(.__P0_DL_03-1)
  12636  2b2f				   .
  12637  2b2f							; 
  12638  2b2f
  12639  2b2f				   .
  12640  2b2f							; 
  12641  2b2f
  12642  2b2f				   .
  12643  2b2f							; 
  12644  2b2f
  12645  2b2f				   .
  12646  2b2f							; 
  12647  2b2f
  12648  2b2f				   .
  12649  2b2f							; 
  12650  2b2f
  12651  2b2f				   .
  12652  2b2f							; 
  12653  2b2f
  12654  2b2f				   .
  12655  2b2f							; 
  12656  2b2f
  12657  2b2f				   .
  12658  2b2f							; 
  12659  2b2f
  12660  2b2f				   .
  12661  2b2f							; 
  12662  2b2f
  12663  2b2f				   .
  12664  2b2f							; 
  12665  2b2f
  12666  2b2f				   .__P0_U_00
  12667  2b2f							; __P0_U_00
  12668  2b2f
  12669  2b2f				   .L0599		;  player0:
  12670  2b2f
  12671  2b2f		       a2 84		      LDX	#<playerL0599_0
  12672  2b31		       86 8a		      STX	player0pointerlo
  12673  2b33		       a9 f8		      LDA	#>playerL0599_0
  12674  2b35		       85 8b		      STA	player0pointerhi
  12675  2b37		       a9 07		      LDA	#7
  12676  2b39		       85 8e		      STA	player0height
  12677  2b3b				   .L0600		;  goto __Done_Joystick0
  12678  2b3b
  12679  2b3b		       4c df 33 	      jmp	.__Done_Joystick0
  12680  2b3e
  12681  2b3e				   .
  12682  2b3e							; 
  12683  2b3e
  12684  2b3e				   .
  12685  2b3e							; 
  12686  2b3e
  12687  2b3e				   .__P0_U_01
  12688  2b3e							; __P0_U_01
  12689  2b3e
  12690  2b3e				   .L0601		;  player0:
  12691  2b3e
  12692  2b3e		       a2 8c		      LDX	#<playerL0601_0
  12693  2b40		       86 8a		      STX	player0pointerlo
  12694  2b42		       a9 f8		      LDA	#>playerL0601_0
  12695  2b44		       85 8b		      STA	player0pointerhi
  12696  2b46		       a9 07		      LDA	#7
  12697  2b48		       85 8e		      STA	player0height
  12698  2b4a				   .L0602		;  goto __Done_Joystick0
  12699  2b4a
  12700  2b4a		       4c df 33 	      jmp	.__Done_Joystick0
  12701  2b4d
  12702  2b4d				   .
  12703  2b4d							; 
  12704  2b4d
  12705  2b4d				   .
  12706  2b4d							; 
  12707  2b4d
  12708  2b4d				   .__P0_U_02
  12709  2b4d							; __P0_U_02
  12710  2b4d
  12711  2b4d				   .L0603		;  player0:
  12712  2b4d
  12713  2b4d		       a2 94		      LDX	#<playerL0603_0
  12714  2b4f		       86 8a		      STX	player0pointerlo
  12715  2b51		       a9 f8		      LDA	#>playerL0603_0
  12716  2b53		       85 8b		      STA	player0pointerhi
  12717  2b55		       a9 07		      LDA	#7
  12718  2b57		       85 8e		      STA	player0height
  12719  2b59				   .L0604		;  goto __Done_Joystick0
  12720  2b59
  12721  2b59		       4c df 33 	      jmp	.__Done_Joystick0
  12722  2b5c
  12723  2b5c				   .
  12724  2b5c							; 
  12725  2b5c
  12726  2b5c				   .
  12727  2b5c							; 
  12728  2b5c
  12729  2b5c				   .__P0_U_03
  12730  2b5c							; __P0_U_03
  12731  2b5c
  12732  2b5c				   .L0605		;  player0:
  12733  2b5c
  12734  2b5c		       a2 9c		      LDX	#<playerL0605_0
  12735  2b5e		       86 8a		      STX	player0pointerlo
  12736  2b60		       a9 f8		      LDA	#>playerL0605_0
  12737  2b62		       85 8b		      STA	player0pointerhi
  12738  2b64		       a9 07		      LDA	#7
  12739  2b66		       85 8e		      STA	player0height
  12740  2b68				   .L0606		;  goto __Done_Joystick0
  12741  2b68
  12742  2b68		       4c df 33 	      jmp	.__Done_Joystick0
  12743  2b6b
  12744  2b6b				   .
  12745  2b6b							; 
  12746  2b6b
  12747  2b6b				   .
  12748  2b6b							; 
  12749  2b6b
  12750  2b6b				   .__P0_D_00
  12751  2b6b							; __P0_D_00
  12752  2b6b
  12753  2b6b				   .L0607		;  player0:
  12754  2b6b
  12755  2b6b		       a2 a4		      LDX	#<playerL0607_0
  12756  2b6d		       86 8a		      STX	player0pointerlo
  12757  2b6f		       a9 f8		      LDA	#>playerL0607_0
  12758  2b71		       85 8b		      STA	player0pointerhi
  12759  2b73		       a9 07		      LDA	#7
  12760  2b75		       85 8e		      STA	player0height
  12761  2b77				   .L0608		;  goto __Done_Joystick0
  12762  2b77
  12763  2b77		       4c df 33 	      jmp	.__Done_Joystick0
  12764  2b7a
  12765  2b7a				   .
  12766  2b7a							; 
  12767  2b7a
  12768  2b7a				   .
  12769  2b7a							; 
  12770  2b7a
  12771  2b7a				   .__P0_D_01
  12772  2b7a							; __P0_D_01
  12773  2b7a
  12774  2b7a				   .L0609		;  player0:
  12775  2b7a
  12776  2b7a		       a2 ac		      LDX	#<playerL0609_0
  12777  2b7c		       86 8a		      STX	player0pointerlo
  12778  2b7e		       a9 f8		      LDA	#>playerL0609_0
  12779  2b80		       85 8b		      STA	player0pointerhi
  12780  2b82		       a9 07		      LDA	#7
  12781  2b84		       85 8e		      STA	player0height
  12782  2b86				   .L0610		;  goto __Done_Joystick0
  12783  2b86
  12784  2b86		       4c df 33 	      jmp	.__Done_Joystick0
  12785  2b89
  12786  2b89				   .
  12787  2b89							; 
  12788  2b89
  12789  2b89				   .
  12790  2b89							; 
  12791  2b89
  12792  2b89				   .__P0_D_02
  12793  2b89							; __P0_D_02
  12794  2b89
  12795  2b89				   .L0611		;  player0:
  12796  2b89
  12797  2b89		       a2 b4		      LDX	#<playerL0611_0
  12798  2b8b		       86 8a		      STX	player0pointerlo
  12799  2b8d		       a9 f8		      LDA	#>playerL0611_0
  12800  2b8f		       85 8b		      STA	player0pointerhi
  12801  2b91		       a9 07		      LDA	#7
  12802  2b93		       85 8e		      STA	player0height
  12803  2b95				   .L0612		;  goto __Done_Joystick0
  12804  2b95
  12805  2b95		       4c df 33 	      jmp	.__Done_Joystick0
  12806  2b98
  12807  2b98				   .
  12808  2b98							; 
  12809  2b98
  12810  2b98				   .
  12811  2b98							; 
  12812  2b98
  12813  2b98				   .__P0_D_03
  12814  2b98							; __P0_D_03
  12815  2b98
  12816  2b98				   .L0613		;  player0:
  12817  2b98
  12818  2b98		       a2 bc		      LDX	#<playerL0613_0
  12819  2b9a		       86 8a		      STX	player0pointerlo
  12820  2b9c		       a9 f8		      LDA	#>playerL0613_0
  12821  2b9e		       85 8b		      STA	player0pointerhi
  12822  2ba0		       a9 07		      LDA	#7
  12823  2ba2		       85 8e		      STA	player0height
  12824  2ba4				   .L0614		;  goto __Done_Joystick0
  12825  2ba4
  12826  2ba4		       4c df 33 	      jmp	.__Done_Joystick0
  12827  2ba7
  12828  2ba7				   .
  12829  2ba7							; 
  12830  2ba7
  12831  2ba7				   .
  12832  2ba7							; 
  12833  2ba7
  12834  2ba7				   .__P0_L_00
  12835  2ba7							; __P0_L_00
  12836  2ba7
  12837  2ba7				   .L0615		;  player0:
  12838  2ba7
  12839  2ba7		       a2 c4		      LDX	#<playerL0615_0
  12840  2ba9		       86 8a		      STX	player0pointerlo
  12841  2bab		       a9 f8		      LDA	#>playerL0615_0
  12842  2bad		       85 8b		      STA	player0pointerhi
  12843  2baf		       a9 07		      LDA	#7
  12844  2bb1		       85 8e		      STA	player0height
  12845  2bb3				   .L0616		;  goto __Done_Joystick0
  12846  2bb3
  12847  2bb3		       4c df 33 	      jmp	.__Done_Joystick0
  12848  2bb6
  12849  2bb6				   .
  12850  2bb6							; 
  12851  2bb6
  12852  2bb6				   .
  12853  2bb6							; 
  12854  2bb6
  12855  2bb6				   .__P0_L_01
  12856  2bb6							; __P0_L_01
  12857  2bb6
  12858  2bb6				   .L0617		;  player0:
  12859  2bb6
  12860  2bb6		       a2 cc		      LDX	#<playerL0617_0
  12861  2bb8		       86 8a		      STX	player0pointerlo
  12862  2bba		       a9 f8		      LDA	#>playerL0617_0
  12863  2bbc		       85 8b		      STA	player0pointerhi
  12864  2bbe		       a9 07		      LDA	#7
  12865  2bc0		       85 8e		      STA	player0height
  12866  2bc2				   .L0618		;  goto __Done_Joystick0
  12867  2bc2
  12868  2bc2		       4c df 33 	      jmp	.__Done_Joystick0
  12869  2bc5
  12870  2bc5				   .
  12871  2bc5							; 
  12872  2bc5
  12873  2bc5				   .
  12874  2bc5							; 
  12875  2bc5
  12876  2bc5				   .__P0_L_02
  12877  2bc5							; __P0_L_02
  12878  2bc5
  12879  2bc5				   .L0619		;  player0:
  12880  2bc5
  12881  2bc5		       a2 d4		      LDX	#<playerL0619_0
  12882  2bc7		       86 8a		      STX	player0pointerlo
  12883  2bc9		       a9 f8		      LDA	#>playerL0619_0
  12884  2bcb		       85 8b		      STA	player0pointerhi
  12885  2bcd		       a9 07		      LDA	#7
  12886  2bcf		       85 8e		      STA	player0height
  12887  2bd1				   .L0620		;  goto __Done_Joystick0
  12888  2bd1
  12889  2bd1		       4c df 33 	      jmp	.__Done_Joystick0
  12890  2bd4
  12891  2bd4				   .
  12892  2bd4							; 
  12893  2bd4
  12894  2bd4				   .
  12895  2bd4							; 
  12896  2bd4
  12897  2bd4				   .__P0_L_03
  12898  2bd4							; __P0_L_03
  12899  2bd4
  12900  2bd4				   .L0621		;  player0:
  12901  2bd4
  12902  2bd4		       a2 dc		      LDX	#<playerL0621_0
  12903  2bd6		       86 8a		      STX	player0pointerlo
  12904  2bd8		       a9 f8		      LDA	#>playerL0621_0
  12905  2bda		       85 8b		      STA	player0pointerhi
  12906  2bdc		       a9 07		      LDA	#7
  12907  2bde		       85 8e		      STA	player0height
  12908  2be0				   .L0622		;  goto __Done_Joystick0
  12909  2be0
  12910  2be0		       4c df 33 	      jmp	.__Done_Joystick0
  12911  2be3
  12912  2be3				   .
  12913  2be3							; 
  12914  2be3
  12915  2be3				   .
  12916  2be3							; 
  12917  2be3
  12918  2be3				   .__P0_UL_00
  12919  2be3							; __P0_UL_00
  12920  2be3
  12921  2be3				   .L0623		;  player0:
  12922  2be3
  12923  2be3		       a2 e4		      LDX	#<playerL0623_0
  12924  2be5		       86 8a		      STX	player0pointerlo
  12925  2be7		       a9 f8		      LDA	#>playerL0623_0
  12926  2be9		       85 8b		      STA	player0pointerhi
  12927  2beb		       a9 07		      LDA	#7
  12928  2bed		       85 8e		      STA	player0height
  12929  2bef				   .L0624		;  goto __Done_Joystick0
  12930  2bef
  12931  2bef		       4c df 33 	      jmp	.__Done_Joystick0
  12932  2bf2
  12933  2bf2				   .
  12934  2bf2							; 
  12935  2bf2
  12936  2bf2				   .
  12937  2bf2							; 
  12938  2bf2
  12939  2bf2				   .__P0_UL_01
  12940  2bf2							; __P0_UL_01
  12941  2bf2
  12942  2bf2				   .L0625		;  player0:
  12943  2bf2
  12944  2bf2		       a2 ec		      LDX	#<playerL0625_0
  12945  2bf4		       86 8a		      STX	player0pointerlo
  12946  2bf6		       a9 f8		      LDA	#>playerL0625_0
  12947  2bf8		       85 8b		      STA	player0pointerhi
  12948  2bfa		       a9 07		      LDA	#7
  12949  2bfc		       85 8e		      STA	player0height
  12950  2bfe				   .L0626		;  goto __Done_Joystick0
  12951  2bfe
  12952  2bfe		       4c df 33 	      jmp	.__Done_Joystick0
  12953  2c01
  12954  2c01				   .
  12955  2c01							; 
  12956  2c01
  12957  2c01				   .
  12958  2c01							; 
  12959  2c01
  12960  2c01				   .__P0_UL_02
  12961  2c01							; __P0_UL_02
  12962  2c01
  12963  2c01				   .L0627		;  player0:
  12964  2c01
  12965  2c01		       a2 f4		      LDX	#<playerL0627_0
  12966  2c03		       86 8a		      STX	player0pointerlo
  12967  2c05		       a9 f8		      LDA	#>playerL0627_0
  12968  2c07		       85 8b		      STA	player0pointerhi
  12969  2c09		       a9 07		      LDA	#7
  12970  2c0b		       85 8e		      STA	player0height
  12971  2c0d				   .L0628		;  goto __Done_Joystick0
  12972  2c0d
  12973  2c0d		       4c df 33 	      jmp	.__Done_Joystick0
  12974  2c10
  12975  2c10				   .
  12976  2c10							; 
  12977  2c10
  12978  2c10				   .
  12979  2c10							; 
  12980  2c10
  12981  2c10				   .__P0_UL_03
  12982  2c10							; __P0_UL_03
  12983  2c10
  12984  2c10				   .L0629		;  player0:
  12985  2c10
  12986  2c10		       a2 00		      LDX	#<playerL0629_0
  12987  2c12		       86 8a		      STX	player0pointerlo
  12988  2c14		       a9 f9		      LDA	#>playerL0629_0
  12989  2c16		       85 8b		      STA	player0pointerhi
  12990  2c18		       a9 07		      LDA	#7
  12991  2c1a		       85 8e		      STA	player0height
  12992  2c1c				   .L0630		;  goto __Done_Joystick0
  12993  2c1c
  12994  2c1c		       4c df 33 	      jmp	.__Done_Joystick0
  12995  2c1f
  12996  2c1f				   .
  12997  2c1f							; 
  12998  2c1f
  12999  2c1f				   .
  13000  2c1f							; 
  13001  2c1f
  13002  2c1f				   .__P0_DL_00
  13003  2c1f							; __P0_DL_00
  13004  2c1f
  13005  2c1f				   .L0631		;  player0:
  13006  2c1f
  13007  2c1f		       a2 08		      LDX	#<playerL0631_0
  13008  2c21		       86 8a		      STX	player0pointerlo
  13009  2c23		       a9 f9		      LDA	#>playerL0631_0
  13010  2c25		       85 8b		      STA	player0pointerhi
  13011  2c27		       a9 07		      LDA	#7
  13012  2c29		       85 8e		      STA	player0height
  13013  2c2b				   .L0632		;  goto __Done_Joystick0
  13014  2c2b
  13015  2c2b		       4c df 33 	      jmp	.__Done_Joystick0
  13016  2c2e
  13017  2c2e				   .
  13018  2c2e							; 
  13019  2c2e
  13020  2c2e				   .
  13021  2c2e							; 
  13022  2c2e
  13023  2c2e				   .__P0_DL_01
  13024  2c2e							; __P0_DL_01
  13025  2c2e
  13026  2c2e				   .L0633		;  player0:
  13027  2c2e
  13028  2c2e		       a2 10		      LDX	#<playerL0633_0
  13029  2c30		       86 8a		      STX	player0pointerlo
  13030  2c32		       a9 f9		      LDA	#>playerL0633_0
  13031  2c34		       85 8b		      STA	player0pointerhi
  13032  2c36		       a9 07		      LDA	#7
  13033  2c38		       85 8e		      STA	player0height
  13034  2c3a				   .L0634		;  goto __Done_Joystick0
  13035  2c3a
  13036  2c3a		       4c df 33 	      jmp	.__Done_Joystick0
  13037  2c3d
  13038  2c3d				   .
  13039  2c3d							; 
  13040  2c3d
  13041  2c3d				   .
  13042  2c3d							; 
  13043  2c3d
  13044  2c3d				   .__P0_DL_02
  13045  2c3d							; __P0_DL_02
  13046  2c3d
  13047  2c3d				   .L0635		;  player0:
  13048  2c3d
  13049  2c3d		       a2 18		      LDX	#<playerL0635_0
  13050  2c3f		       86 8a		      STX	player0pointerlo
  13051  2c41		       a9 f9		      LDA	#>playerL0635_0
  13052  2c43		       85 8b		      STA	player0pointerhi
  13053  2c45		       a9 07		      LDA	#7
  13054  2c47		       85 8e		      STA	player0height
  13055  2c49				   .L0636		;  goto __Done_Joystick0
  13056  2c49
  13057  2c49		       4c df 33 	      jmp	.__Done_Joystick0
  13058  2c4c
  13059  2c4c				   .
  13060  2c4c							; 
  13061  2c4c
  13062  2c4c				   .
  13063  2c4c							; 
  13064  2c4c
  13065  2c4c				   .__P0_DL_03
  13066  2c4c							; __P0_DL_03
  13067  2c4c
  13068  2c4c				   .L0637		;  player0:
  13069  2c4c
  13070  2c4c		       a2 20		      LDX	#<playerL0637_0
  13071  2c4e		       86 8a		      STX	player0pointerlo
  13072  2c50		       a9 f9		      LDA	#>playerL0637_0
  13073  2c52		       85 8b		      STA	player0pointerhi
  13074  2c54		       a9 07		      LDA	#7
  13075  2c56		       85 8e		      STA	player0height
  13076  2c58				   .L0638		;  goto __Done_Joystick0
  13077  2c58
  13078  2c58		       4c df 33 	      jmp	.__Done_Joystick0
  13079  2c5b
  13080  2c5b				   .
  13081  2c5b							; 
  13082  2c5b
  13083  2c5b				   .
  13084  2c5b							; 
  13085  2c5b
  13086  2c5b				   .
  13087  2c5b							; 
  13088  2c5b
  13089  2c5b				   .
  13090  2c5b							; 
  13091  2c5b
  13092  2c5b				   .
  13093  2c5b							; 
  13094  2c5b
  13095  2c5b				   .
  13096  2c5b							; 
  13097  2c5b
  13098  2c5b				   .
  13099  2c5b							; 
  13100  2c5b
  13101  2c5b				   .
  13102  2c5b							; 
  13103  2c5b
  13104  2c5b				   .
  13105  2c5b							; 
  13106  2c5b
  13107  2c5b				   .
  13108  2c5b							; 
  13109  2c5b
  13110  2c5b				   .__P1_Plain
  13111  2c5b							; __P1_Plain
  13112  2c5b
  13113  2c5b				   .L0639		;  player1:
  13114  2c5b
  13115  2c5b		       a2 28		      LDX	#<playerL0639_1
  13116  2c5d		       86 8c		      STX	player1pointerlo
  13117  2c5f		       a9 f9		      LDA	#>playerL0639_1
  13118  2c61		       85 8d		      STA	player1pointerhi
  13119  2c63		       a9 07		      LDA	#7
  13120  2c65		       85 8f		      STA	player1height
  13121  2c67				   .L0640		;  _Bit2_Wroth_Flip{2} =  !_Bit2_Wroth_Flip{2}
  13122  2c67
  13123  2c67		       a5 c5		      LDA	_Bit2_Wroth_Flip
  13124  2c69		       29 04		      AND	#4
  13125  2c6b		       08		      PHP
  13126  2c6c		       a5 c5		      LDA	_Bit2_Wroth_Flip
  13127  2c6e		       29 fb		      AND	#251
  13128  2c70		       28		      PLP
  13129  2c71		       d0 02		      .byte.b	$D0, $02
  13130  2c73		       09 04		      ORA	#4
  13131  2c75		       85 c5		      STA	_Bit2_Wroth_Flip
  13132  2c77				   .
  13133  2c77							; 
  13134  2c77
  13135  2c77				   .L0641		;  goto __Done_Enemy_Anim
  13136  2c77
  13137  2c77		       4c 69 34 	      jmp	.__Done_Enemy_Anim
  13138  2c7a
  13139  2c7a				   .
  13140  2c7a							; 
  13141  2c7a
  13142  2c7a				   .
  13143  2c7a							; 
  13144  2c7a
  13145  2c7a				   .__P1_Move01
  13146  2c7a							; __P1_Move01
  13147  2c7a
  13148  2c7a				   .L0642		;  player1:
  13149  2c7a
  13150  2c7a		       a2 30		      LDX	#<playerL0642_1
  13151  2c7c		       86 8c		      STX	player1pointerlo
  13152  2c7e		       a9 f9		      LDA	#>playerL0642_1
  13153  2c80		       85 8d		      STA	player1pointerhi
  13154  2c82		       a9 07		      LDA	#7
  13155  2c84		       85 8f		      STA	player1height
  13156  2c86				   .L0643		;  goto __Done_Enemy_Anim
  13157  2c86
  13158  2c86		       4c 69 34 	      jmp	.__Done_Enemy_Anim
  13159  2c89
  13160  2c89				   .
  13161  2c89							; 
  13162  2c89
  13163  2c89				   .
  13164  2c89							; 
  13165  2c89
  13166  2c89				   .__P1_Move02
  13167  2c89							; __P1_Move02
  13168  2c89
  13169  2c89				   .
  13170  2c89							; 
  13171  2c89
  13172  2c89				   .L0644		;  player1:
  13173  2c89
  13174  2c89		       a2 38		      LDX	#<playerL0644_1
  13175  2c8b		       86 8c		      STX	player1pointerlo
  13176  2c8d		       a9 f9		      LDA	#>playerL0644_1
  13177  2c8f		       85 8d		      STA	player1pointerhi
  13178  2c91		       a9 07		      LDA	#7
  13179  2c93		       85 8f		      STA	player1height
  13180  2c95				   .
  13181  2c95							; 
  13182  2c95
  13183  2c95				   .L0645		;  goto __Done_Enemy_Anim
  13184  2c95
  13185  2c95		       4c 69 34 	      jmp	.__Done_Enemy_Anim
  13186  2c98
  13187  2c98				   .
  13188  2c98							; 
  13189  2c98
  13190  2c98				   .
  13191  2c98							; 
  13192  2c98
  13193  2c98				   .
  13194  2c98							; 
  13195  2c98
  13196  2c98				   .
  13197  2c98							; 
  13198  2c98
  13199  2c98				   .
  13200  2c98							; 
  13201  2c98
  13202  2c98				   .
  13203  2c98							; 
  13204  2c98
  13205  2c98				   .
  13206  2c98							; 
  13207  2c98
  13208  2c98				   .L0646		;  bank 3
  13209  2c98
  13210  2c98					      if	ECHO2
      828 bytes of ROM space left in bank 2
  13211  2c98					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
  13212  2c98					      endif
  13213  2c98		       00 01	   ECHO2      =	1
  13214  2fd4					      ORG	$2FF4-bscode_length
  13215  2fd4					      RORG	$3FF4-bscode_length
  13216  2fd4		       a2 ff	   start_bank2 ldx	#$ff
  13217  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
  13218  2fd6				  -	      stx	FASTFETCH
  13219  2fd6					      endif
  13220  2fd6		       9a		      txs
  13221  2fd7				  -	      if	bankswitch == 64
  13222  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  13223  2fd7					      else
  13224  2fd7		       a9 f3		      lda	#>(start-1)
  13225  2fd9					      endif
  13226  2fd9		       48		      pha
  13227  2fda		       a9 51		      lda	#<(start-1)
  13228  2fdc		       48		      pha
  13229  2fdd		       48		      pha
  13230  2fde		       8a		      txa
  13231  2fdf		       48		      pha
  13232  2fe0		       ba		      tsx
  13233  2fe1					      if	bankswitch != 64
  13234  2fe1		       b5 04		      lda	4,x	; get high byte of return address
  13235  2fe3		       2a		      rol
  13236  2fe4		       2a		      rol
  13237  2fe5		       2a		      rol
  13238  2fe6		       2a		      rol
  13239  2fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  13240  2fe9		       aa		      tax
  13241  2fea		       e8		      inx
  13242  2feb				  -	      else
  13243  2feb				  -	      lda	4,x	; get high byte of return address
  13244  2feb				  -	      tay
  13245  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  13246  2feb				  -	      sta	4,x
  13247  2feb				  -	      tya
  13248  2feb				  -	      lsr
  13249  2feb				  -	      lsr
  13250  2feb				  -	      lsr
  13251  2feb				  -	      lsr
  13252  2feb				  -	      tax
  13253  2feb				  -	      inx
  13254  2feb					      endif
  13255  2feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  13256  2fee		       68		      pla
  13257  2fef		       aa		      tax
  13258  2ff0		       68		      pla
  13259  2ff1		       60		      rts
  13260  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  13261  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  13262  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  13263  2ff2					      endif
  13264  2ffc					      ORG	$2FFC
  13265  2ffc					      RORG	$3FFC
  13266  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
  13267  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
  13268  3000					      ORG	$3000
  13269  3000					      RORG	$5000
  13270  3000					      repeat	256
  13271  3000		       ff		      .byte.b	$ff
  13270  3000					      repend
  13271  3001		       ff		      .byte.b	$ff
  13270  3001					      repend
  13271  3002		       ff		      .byte.b	$ff
  13270  3002					      repend
  13271  3003		       ff		      .byte.b	$ff
  13270  3003					      repend
  13271  3004		       ff		      .byte.b	$ff
  13270  3004					      repend
  13271  3005		       ff		      .byte.b	$ff
  13270  3005					      repend
  13271  3006		       ff		      .byte.b	$ff
  13270  3006					      repend
  13271  3007		       ff		      .byte.b	$ff
  13270  3007					      repend
  13271  3008		       ff		      .byte.b	$ff
  13270  3008					      repend
  13271  3009		       ff		      .byte.b	$ff
  13270  3009					      repend
  13271  300a		       ff		      .byte.b	$ff
  13270  300a					      repend
  13271  300b		       ff		      .byte.b	$ff
  13270  300b					      repend
  13271  300c		       ff		      .byte.b	$ff
  13270  300c					      repend
  13271  300d		       ff		      .byte.b	$ff
  13270  300d					      repend
  13271  300e		       ff		      .byte.b	$ff
  13270  300e					      repend
  13271  300f		       ff		      .byte.b	$ff
  13270  300f					      repend
  13271  3010		       ff		      .byte.b	$ff
  13270  3010					      repend
  13271  3011		       ff		      .byte.b	$ff
  13270  3011					      repend
  13271  3012		       ff		      .byte.b	$ff
  13270  3012					      repend
  13271  3013		       ff		      .byte.b	$ff
  13270  3013					      repend
  13271  3014		       ff		      .byte.b	$ff
  13270  3014					      repend
  13271  3015		       ff		      .byte.b	$ff
  13270  3015					      repend
  13271  3016		       ff		      .byte.b	$ff
  13270  3016					      repend
  13271  3017		       ff		      .byte.b	$ff
  13270  3017					      repend
  13271  3018		       ff		      .byte.b	$ff
  13270  3018					      repend
  13271  3019		       ff		      .byte.b	$ff
  13270  3019					      repend
  13271  301a		       ff		      .byte.b	$ff
  13270  301a					      repend
  13271  301b		       ff		      .byte.b	$ff
  13270  301b					      repend
  13271  301c		       ff		      .byte.b	$ff
  13270  301c					      repend
  13271  301d		       ff		      .byte.b	$ff
  13270  301d					      repend
  13271  301e		       ff		      .byte.b	$ff
  13270  301e					      repend
  13271  301f		       ff		      .byte.b	$ff
  13270  301f					      repend
  13271  3020		       ff		      .byte.b	$ff
  13270  3020					      repend
  13271  3021		       ff		      .byte.b	$ff
  13270  3021					      repend
  13271  3022		       ff		      .byte.b	$ff
  13270  3022					      repend
  13271  3023		       ff		      .byte.b	$ff
  13270  3023					      repend
  13271  3024		       ff		      .byte.b	$ff
  13270  3024					      repend
  13271  3025		       ff		      .byte.b	$ff
  13270  3025					      repend
  13271  3026		       ff		      .byte.b	$ff
  13270  3026					      repend
  13271  3027		       ff		      .byte.b	$ff
  13270  3027					      repend
  13271  3028		       ff		      .byte.b	$ff
  13270  3028					      repend
  13271  3029		       ff		      .byte.b	$ff
  13270  3029					      repend
  13271  302a		       ff		      .byte.b	$ff
  13270  302a					      repend
  13271  302b		       ff		      .byte.b	$ff
  13270  302b					      repend
  13271  302c		       ff		      .byte.b	$ff
  13270  302c					      repend
  13271  302d		       ff		      .byte.b	$ff
  13270  302d					      repend
  13271  302e		       ff		      .byte.b	$ff
  13270  302e					      repend
  13271  302f		       ff		      .byte.b	$ff
  13270  302f					      repend
  13271  3030		       ff		      .byte.b	$ff
  13270  3030					      repend
  13271  3031		       ff		      .byte.b	$ff
  13270  3031					      repend
  13271  3032		       ff		      .byte.b	$ff
  13270  3032					      repend
  13271  3033		       ff		      .byte.b	$ff
  13270  3033					      repend
  13271  3034		       ff		      .byte.b	$ff
  13270  3034					      repend
  13271  3035		       ff		      .byte.b	$ff
  13270  3035					      repend
  13271  3036		       ff		      .byte.b	$ff
  13270  3036					      repend
  13271  3037		       ff		      .byte.b	$ff
  13270  3037					      repend
  13271  3038		       ff		      .byte.b	$ff
  13270  3038					      repend
  13271  3039		       ff		      .byte.b	$ff
  13270  3039					      repend
  13271  303a		       ff		      .byte.b	$ff
  13270  303a					      repend
  13271  303b		       ff		      .byte.b	$ff
  13270  303b					      repend
  13271  303c		       ff		      .byte.b	$ff
  13270  303c					      repend
  13271  303d		       ff		      .byte.b	$ff
  13270  303d					      repend
  13271  303e		       ff		      .byte.b	$ff
  13270  303e					      repend
  13271  303f		       ff		      .byte.b	$ff
  13270  303f					      repend
  13271  3040		       ff		      .byte.b	$ff
  13270  3040					      repend
  13271  3041		       ff		      .byte.b	$ff
  13270  3041					      repend
  13271  3042		       ff		      .byte.b	$ff
  13270  3042					      repend
  13271  3043		       ff		      .byte.b	$ff
  13270  3043					      repend
  13271  3044		       ff		      .byte.b	$ff
  13270  3044					      repend
  13271  3045		       ff		      .byte.b	$ff
  13270  3045					      repend
  13271  3046		       ff		      .byte.b	$ff
  13270  3046					      repend
  13271  3047		       ff		      .byte.b	$ff
  13270  3047					      repend
  13271  3048		       ff		      .byte.b	$ff
  13270  3048					      repend
  13271  3049		       ff		      .byte.b	$ff
  13270  3049					      repend
  13271  304a		       ff		      .byte.b	$ff
  13270  304a					      repend
  13271  304b		       ff		      .byte.b	$ff
  13270  304b					      repend
  13271  304c		       ff		      .byte.b	$ff
  13270  304c					      repend
  13271  304d		       ff		      .byte.b	$ff
  13270  304d					      repend
  13271  304e		       ff		      .byte.b	$ff
  13270  304e					      repend
  13271  304f		       ff		      .byte.b	$ff
  13270  304f					      repend
  13271  3050		       ff		      .byte.b	$ff
  13270  3050					      repend
  13271  3051		       ff		      .byte.b	$ff
  13270  3051					      repend
  13271  3052		       ff		      .byte.b	$ff
  13270  3052					      repend
  13271  3053		       ff		      .byte.b	$ff
  13270  3053					      repend
  13271  3054		       ff		      .byte.b	$ff
  13270  3054					      repend
  13271  3055		       ff		      .byte.b	$ff
  13270  3055					      repend
  13271  3056		       ff		      .byte.b	$ff
  13270  3056					      repend
  13271  3057		       ff		      .byte.b	$ff
  13270  3057					      repend
  13271  3058		       ff		      .byte.b	$ff
  13270  3058					      repend
  13271  3059		       ff		      .byte.b	$ff
  13270  3059					      repend
  13271  305a		       ff		      .byte.b	$ff
  13270  305a					      repend
  13271  305b		       ff		      .byte.b	$ff
  13270  305b					      repend
  13271  305c		       ff		      .byte.b	$ff
  13270  305c					      repend
  13271  305d		       ff		      .byte.b	$ff
  13270  305d					      repend
  13271  305e		       ff		      .byte.b	$ff
  13270  305e					      repend
  13271  305f		       ff		      .byte.b	$ff
  13270  305f					      repend
  13271  3060		       ff		      .byte.b	$ff
  13270  3060					      repend
  13271  3061		       ff		      .byte.b	$ff
  13270  3061					      repend
  13271  3062		       ff		      .byte.b	$ff
  13270  3062					      repend
  13271  3063		       ff		      .byte.b	$ff
  13270  3063					      repend
  13271  3064		       ff		      .byte.b	$ff
  13270  3064					      repend
  13271  3065		       ff		      .byte.b	$ff
  13270  3065					      repend
  13271  3066		       ff		      .byte.b	$ff
  13270  3066					      repend
  13271  3067		       ff		      .byte.b	$ff
  13270  3067					      repend
  13271  3068		       ff		      .byte.b	$ff
  13270  3068					      repend
  13271  3069		       ff		      .byte.b	$ff
  13270  3069					      repend
  13271  306a		       ff		      .byte.b	$ff
  13270  306a					      repend
  13271  306b		       ff		      .byte.b	$ff
  13270  306b					      repend
  13271  306c		       ff		      .byte.b	$ff
  13270  306c					      repend
  13271  306d		       ff		      .byte.b	$ff
  13270  306d					      repend
  13271  306e		       ff		      .byte.b	$ff
  13270  306e					      repend
  13271  306f		       ff		      .byte.b	$ff
  13270  306f					      repend
  13271  3070		       ff		      .byte.b	$ff
  13270  3070					      repend
  13271  3071		       ff		      .byte.b	$ff
  13270  3071					      repend
  13271  3072		       ff		      .byte.b	$ff
  13270  3072					      repend
  13271  3073		       ff		      .byte.b	$ff
  13270  3073					      repend
  13271  3074		       ff		      .byte.b	$ff
  13270  3074					      repend
  13271  3075		       ff		      .byte.b	$ff
  13270  3075					      repend
  13271  3076		       ff		      .byte.b	$ff
  13270  3076					      repend
  13271  3077		       ff		      .byte.b	$ff
  13270  3077					      repend
  13271  3078		       ff		      .byte.b	$ff
  13270  3078					      repend
  13271  3079		       ff		      .byte.b	$ff
  13270  3079					      repend
  13271  307a		       ff		      .byte.b	$ff
  13270  307a					      repend
  13271  307b		       ff		      .byte.b	$ff
  13270  307b					      repend
  13271  307c		       ff		      .byte.b	$ff
  13270  307c					      repend
  13271  307d		       ff		      .byte.b	$ff
  13270  307d					      repend
  13271  307e		       ff		      .byte.b	$ff
  13270  307e					      repend
  13271  307f		       ff		      .byte.b	$ff
  13270  307f					      repend
  13271  3080		       ff		      .byte.b	$ff
  13270  3080					      repend
  13271  3081		       ff		      .byte.b	$ff
  13270  3081					      repend
  13271  3082		       ff		      .byte.b	$ff
  13270  3082					      repend
  13271  3083		       ff		      .byte.b	$ff
  13270  3083					      repend
  13271  3084		       ff		      .byte.b	$ff
  13270  3084					      repend
  13271  3085		       ff		      .byte.b	$ff
  13270  3085					      repend
  13271  3086		       ff		      .byte.b	$ff
  13270  3086					      repend
  13271  3087		       ff		      .byte.b	$ff
  13270  3087					      repend
  13271  3088		       ff		      .byte.b	$ff
  13270  3088					      repend
  13271  3089		       ff		      .byte.b	$ff
  13270  3089					      repend
  13271  308a		       ff		      .byte.b	$ff
  13270  308a					      repend
  13271  308b		       ff		      .byte.b	$ff
  13270  308b					      repend
  13271  308c		       ff		      .byte.b	$ff
  13270  308c					      repend
  13271  308d		       ff		      .byte.b	$ff
  13270  308d					      repend
  13271  308e		       ff		      .byte.b	$ff
  13270  308e					      repend
  13271  308f		       ff		      .byte.b	$ff
  13270  308f					      repend
  13271  3090		       ff		      .byte.b	$ff
  13270  3090					      repend
  13271  3091		       ff		      .byte.b	$ff
  13270  3091					      repend
  13271  3092		       ff		      .byte.b	$ff
  13270  3092					      repend
  13271  3093		       ff		      .byte.b	$ff
  13270  3093					      repend
  13271  3094		       ff		      .byte.b	$ff
  13270  3094					      repend
  13271  3095		       ff		      .byte.b	$ff
  13270  3095					      repend
  13271  3096		       ff		      .byte.b	$ff
  13270  3096					      repend
  13271  3097		       ff		      .byte.b	$ff
  13270  3097					      repend
  13271  3098		       ff		      .byte.b	$ff
  13270  3098					      repend
  13271  3099		       ff		      .byte.b	$ff
  13270  3099					      repend
  13271  309a		       ff		      .byte.b	$ff
  13270  309a					      repend
  13271  309b		       ff		      .byte.b	$ff
  13270  309b					      repend
  13271  309c		       ff		      .byte.b	$ff
  13270  309c					      repend
  13271  309d		       ff		      .byte.b	$ff
  13270  309d					      repend
  13271  309e		       ff		      .byte.b	$ff
  13270  309e					      repend
  13271  309f		       ff		      .byte.b	$ff
  13270  309f					      repend
  13271  30a0		       ff		      .byte.b	$ff
  13270  30a0					      repend
  13271  30a1		       ff		      .byte.b	$ff
  13270  30a1					      repend
  13271  30a2		       ff		      .byte.b	$ff
  13270  30a2					      repend
  13271  30a3		       ff		      .byte.b	$ff
  13270  30a3					      repend
  13271  30a4		       ff		      .byte.b	$ff
  13270  30a4					      repend
  13271  30a5		       ff		      .byte.b	$ff
  13270  30a5					      repend
  13271  30a6		       ff		      .byte.b	$ff
  13270  30a6					      repend
  13271  30a7		       ff		      .byte.b	$ff
  13270  30a7					      repend
  13271  30a8		       ff		      .byte.b	$ff
  13270  30a8					      repend
  13271  30a9		       ff		      .byte.b	$ff
  13270  30a9					      repend
  13271  30aa		       ff		      .byte.b	$ff
  13270  30aa					      repend
  13271  30ab		       ff		      .byte.b	$ff
  13270  30ab					      repend
  13271  30ac		       ff		      .byte.b	$ff
  13270  30ac					      repend
  13271  30ad		       ff		      .byte.b	$ff
  13270  30ad					      repend
  13271  30ae		       ff		      .byte.b	$ff
  13270  30ae					      repend
  13271  30af		       ff		      .byte.b	$ff
  13270  30af					      repend
  13271  30b0		       ff		      .byte.b	$ff
  13270  30b0					      repend
  13271  30b1		       ff		      .byte.b	$ff
  13270  30b1					      repend
  13271  30b2		       ff		      .byte.b	$ff
  13270  30b2					      repend
  13271  30b3		       ff		      .byte.b	$ff
  13270  30b3					      repend
  13271  30b4		       ff		      .byte.b	$ff
  13270  30b4					      repend
  13271  30b5		       ff		      .byte.b	$ff
  13270  30b5					      repend
  13271  30b6		       ff		      .byte.b	$ff
  13270  30b6					      repend
  13271  30b7		       ff		      .byte.b	$ff
  13270  30b7					      repend
  13271  30b8		       ff		      .byte.b	$ff
  13270  30b8					      repend
  13271  30b9		       ff		      .byte.b	$ff
  13270  30b9					      repend
  13271  30ba		       ff		      .byte.b	$ff
  13270  30ba					      repend
  13271  30bb		       ff		      .byte.b	$ff
  13270  30bb					      repend
  13271  30bc		       ff		      .byte.b	$ff
  13270  30bc					      repend
  13271  30bd		       ff		      .byte.b	$ff
  13270  30bd					      repend
  13271  30be		       ff		      .byte.b	$ff
  13270  30be					      repend
  13271  30bf		       ff		      .byte.b	$ff
  13270  30bf					      repend
  13271  30c0		       ff		      .byte.b	$ff
  13270  30c0					      repend
  13271  30c1		       ff		      .byte.b	$ff
  13270  30c1					      repend
  13271  30c2		       ff		      .byte.b	$ff
  13270  30c2					      repend
  13271  30c3		       ff		      .byte.b	$ff
  13270  30c3					      repend
  13271  30c4		       ff		      .byte.b	$ff
  13270  30c4					      repend
  13271  30c5		       ff		      .byte.b	$ff
  13270  30c5					      repend
  13271  30c6		       ff		      .byte.b	$ff
  13270  30c6					      repend
  13271  30c7		       ff		      .byte.b	$ff
  13270  30c7					      repend
  13271  30c8		       ff		      .byte.b	$ff
  13270  30c8					      repend
  13271  30c9		       ff		      .byte.b	$ff
  13270  30c9					      repend
  13271  30ca		       ff		      .byte.b	$ff
  13270  30ca					      repend
  13271  30cb		       ff		      .byte.b	$ff
  13270  30cb					      repend
  13271  30cc		       ff		      .byte.b	$ff
  13270  30cc					      repend
  13271  30cd		       ff		      .byte.b	$ff
  13270  30cd					      repend
  13271  30ce		       ff		      .byte.b	$ff
  13270  30ce					      repend
  13271  30cf		       ff		      .byte.b	$ff
  13270  30cf					      repend
  13271  30d0		       ff		      .byte.b	$ff
  13270  30d0					      repend
  13271  30d1		       ff		      .byte.b	$ff
  13270  30d1					      repend
  13271  30d2		       ff		      .byte.b	$ff
  13270  30d2					      repend
  13271  30d3		       ff		      .byte.b	$ff
  13270  30d3					      repend
  13271  30d4		       ff		      .byte.b	$ff
  13270  30d4					      repend
  13271  30d5		       ff		      .byte.b	$ff
  13270  30d5					      repend
  13271  30d6		       ff		      .byte.b	$ff
  13270  30d6					      repend
  13271  30d7		       ff		      .byte.b	$ff
  13270  30d7					      repend
  13271  30d8		       ff		      .byte.b	$ff
  13270  30d8					      repend
  13271  30d9		       ff		      .byte.b	$ff
  13270  30d9					      repend
  13271  30da		       ff		      .byte.b	$ff
  13270  30da					      repend
  13271  30db		       ff		      .byte.b	$ff
  13270  30db					      repend
  13271  30dc		       ff		      .byte.b	$ff
  13270  30dc					      repend
  13271  30dd		       ff		      .byte.b	$ff
  13270  30dd					      repend
  13271  30de		       ff		      .byte.b	$ff
  13270  30de					      repend
  13271  30df		       ff		      .byte.b	$ff
  13270  30df					      repend
  13271  30e0		       ff		      .byte.b	$ff
  13270  30e0					      repend
  13271  30e1		       ff		      .byte.b	$ff
  13270  30e1					      repend
  13271  30e2		       ff		      .byte.b	$ff
  13270  30e2					      repend
  13271  30e3		       ff		      .byte.b	$ff
  13270  30e3					      repend
  13271  30e4		       ff		      .byte.b	$ff
  13270  30e4					      repend
  13271  30e5		       ff		      .byte.b	$ff
  13270  30e5					      repend
  13271  30e6		       ff		      .byte.b	$ff
  13270  30e6					      repend
  13271  30e7		       ff		      .byte.b	$ff
  13270  30e7					      repend
  13271  30e8		       ff		      .byte.b	$ff
  13270  30e8					      repend
  13271  30e9		       ff		      .byte.b	$ff
  13270  30e9					      repend
  13271  30ea		       ff		      .byte.b	$ff
  13270  30ea					      repend
  13271  30eb		       ff		      .byte.b	$ff
  13270  30eb					      repend
  13271  30ec		       ff		      .byte.b	$ff
  13270  30ec					      repend
  13271  30ed		       ff		      .byte.b	$ff
  13270  30ed					      repend
  13271  30ee		       ff		      .byte.b	$ff
  13270  30ee					      repend
  13271  30ef		       ff		      .byte.b	$ff
  13270  30ef					      repend
  13271  30f0		       ff		      .byte.b	$ff
  13270  30f0					      repend
  13271  30f1		       ff		      .byte.b	$ff
  13270  30f1					      repend
  13271  30f2		       ff		      .byte.b	$ff
  13270  30f2					      repend
  13271  30f3		       ff		      .byte.b	$ff
  13270  30f3					      repend
  13271  30f4		       ff		      .byte.b	$ff
  13270  30f4					      repend
  13271  30f5		       ff		      .byte.b	$ff
  13270  30f5					      repend
  13271  30f6		       ff		      .byte.b	$ff
  13270  30f6					      repend
  13271  30f7		       ff		      .byte.b	$ff
  13270  30f7					      repend
  13271  30f8		       ff		      .byte.b	$ff
  13270  30f8					      repend
  13271  30f9		       ff		      .byte.b	$ff
  13270  30f9					      repend
  13271  30fa		       ff		      .byte.b	$ff
  13270  30fa					      repend
  13271  30fb		       ff		      .byte.b	$ff
  13270  30fb					      repend
  13271  30fc		       ff		      .byte.b	$ff
  13270  30fc					      repend
  13271  30fd		       ff		      .byte.b	$ff
  13270  30fd					      repend
  13271  30fe		       ff		      .byte.b	$ff
  13270  30fe					      repend
  13271  30ff		       ff		      .byte.b	$ff
  13272  3100					      repend
  13273  3100				   .
  13274  3100							; 
  13275  3100
  13276  3100				   .
  13277  3100							; 
  13278  3100
  13279  3100				   .
  13280  3100							; 
  13281  3100
  13282  3100				   .
  13283  3100							; 
  13284  3100
  13285  3100				   .
  13286  3100							; 
  13287  3100
  13288  3100				   .
  13289  3100							; 
  13290  3100
  13291  3100				   .
  13292  3100							; 
  13293  3100
  13294  3100				   .
  13295  3100							; 
  13296  3100
  13297  3100				   .
  13298  3100							; 
  13299  3100
  13300  3100				   .
  13301  3100							; 
  13302  3100
  13303  3100				   .
  13304  3100							; 
  13305  3100
  13306  3100				   .
  13307  3100							; 
  13308  3100
  13309  3100				   .__Code_Section_2
  13310  3100							; __Code_Section_2
  13311  3100
  13312  3100				   .
  13313  3100							; 
  13314  3100
  13315  3100				   .
  13316  3100							; 
  13317  3100
  13318  3100				   .
  13319  3100							; 
  13320  3100
  13321  3100				   .
  13322  3100							; 
  13323  3100
  13324  3100				   .
  13325  3100							; 
  13326  3100
  13327  3100				   .
  13328  3100							; 
  13329  3100
  13330  3100				   .
  13331  3100							; 
  13332  3100
  13333  3100				   .
  13334  3100							; 
  13335  3100
  13336  3100				   .
  13337  3100							; 
  13338  3100
  13339  3100				   .
  13340  3100							; 
  13341  3100
  13342  3100				   .
  13343  3100							; 
  13344  3100
  13345  3100				   .L0647		;  if _Bit1_Auto_Play{1} then if _Seaweed_Shot  >  4 then goto __AP_Canister_Appearance
  13346  3100
  13347  3100		       a5 d2		      LDA	_Bit1_Auto_Play
  13348  3102		       29 02		      AND	#2
  13349  3104		       f0 09		      BEQ	.skipL0647
  13350  3106				   .condpart171
  13351  3106		       a9 04		      LDA	#4
  13352  3108		       c5 e2		      CMP	_Seaweed_Shot
  13353  310a		       b0 03		      BCS	.skip171then
  13354  310c				   .condpart172
  13355  310c		       4c 21 51 	      jmp	.__AP_Canister_Appearance
  13356  310f
  13357  310f				   .skip171then
  13358  310f				   .skipL0647
  13359  310f				   .
  13360  310f							; 
  13361  310f
  13362  310f				   .
  13363  310f							; 
  13364  310f
  13365  310f				   .
  13366  310f							; 
  13367  310f
  13368  310f				   .
  13369  310f							; 
  13370  310f
  13371  310f				   .L0648		;  if _Bit1_Auto_Play{1} then goto __Skip_100_Shot
  13372  310f
  13373  310f		       a5 d2		      LDA	_Bit1_Auto_Play
  13374  3111		       29 02		      AND	#2
  13375  3113		       f0 03		      BEQ	.skipL0648
  13376  3115				   .condpart173
  13377  3115		       4c 87 51 	      jmp	.__Skip_100_Shot
  13378  3118
  13379  3118				   .skipL0648
  13380  3118				   .
  13381  3118							; 
  13382  3118
  13383  3118				   .
  13384  3118							; 
  13385  3118
  13386  3118				   .
  13387  3118							; 
  13388  3118
  13389  3118				   .
  13390  3118							; 
  13391  3118
  13392  3118				   .L0649		;  if _Seaweed_Shot  <  100 then goto __Skip_100_Shot
  13393  3118
  13394  3118		       a5 e2		      LDA	_Seaweed_Shot
  13395  311a		       c9 64		      CMP	#100
  13396  311c		       b0 03		      BCS	.skipL0649
  13397  311e				   .condpart174
  13398  311e		       4c 87 51 	      jmp	.__Skip_100_Shot
  13399  3121
  13400  3121				   .skipL0649
  13401  3121				   .
  13402  3121							; 
  13403  3121
  13404  3121				   .__AP_Canister_Appearance
  13405  3121							; __AP_Canister_Appearance
  13406  3121
  13407  3121				   .
  13408  3121							; 
  13409  3121
  13410  3121				   .
  13411  3121							; 
  13412  3121
  13413  3121				   .
  13414  3121							; 
  13415  3121
  13416  3121				   .
  13417  3121							; 
  13418  3121
  13419  3121				   .L0650		;  if _Plop_Rate{0} then goto __Canister_is_Odd
  13420  3121
  13421  3121		       a5 e3		      LDA	_Plop_Rate
  13422  3123		       4a		      LSR
  13423  3124		       90 03		      BCC	.skipL0650
  13424  3126				   .condpart175
  13425  3126		       4c 46 51 	      jmp	.__Canister_is_Odd
  13426  3129
  13427  3129				   .skipL0650
  13428  3129				   .
  13429  3129							; 
  13430  3129
  13431  3129				   .
  13432  3129							; 
  13433  3129
  13434  3129				   .
  13435  3129							; 
  13436  3129
  13437  3129				   .
  13438  3129							; 
  13439  3129
  13440  3129				   .
  13441  3129							; 
  13442  3129
  13443  3129				   .L0651		;  temp5  =   ( rand & 15 ) 
  13444  3129
  13445  3129							; complex statement detected
  13446  3129		       a5 a2		      lda	rand
  13447  312b		       4a		      lsr
  13448  312c					      ifconst	rand16
  13449  312c		       26 d3		      rol	rand16
  13450  312e					      endif
  13451  312e		       90 02		      bcc	*+4
  13452  3130		       49 b4		      eor	#$B4
  13453  3132		       85 a2		      sta	rand
  13454  3134					      ifconst	rand16
  13455  3134		       45 d3		      eor	rand16
  13456  3136					      endif
  13457  3136		       29 0f		      AND	#15
  13458  3138		       85 a0		      STA	temp5
  13459  313a				   .
  13460  313a							; 
  13461  313a
  13462  313a				   .
  13463  313a							; 
  13464  313a
  13465  313a				   .
  13466  313a							; 
  13467  313a
  13468  313a				   .
  13469  313a							; 
  13470  313a
  13471  313a				   .L0652		;  if temp5  <=  10 then goto __Activate_Homing_Canister
  13472  313a
  13473  313a		       a9 0a		      LDA	#10
  13474  313c		       c5 a0		      CMP	temp5
  13475  313e		       90 03		      BCC	.skipL0652
  13476  3140				   .condpart176
  13477  3140		       4c 60 51 	      jmp	.__Activate_Homing_Canister
  13478  3143
  13479  3143				   .skipL0652
  13480  3143				   .
  13481  3143							; 
  13482  3143
  13483  3143				   .L0653		;  goto __Skip_Homing_Canister
  13484  3143
  13485  3143		       4c 75 51 	      jmp	.__Skip_Homing_Canister
  13486  3146
  13487  3146				   .
  13488  3146							; 
  13489  3146
  13490  3146				   .
  13491  3146							; 
  13492  3146
  13493  3146				   .
  13494  3146							; 
  13495  3146
  13496  3146				   .
  13497  3146							; 
  13498  3146
  13499  3146				   .__Canister_is_Odd
  13500  3146							; __Canister_is_Odd
  13501  3146
  13502  3146				   .
  13503  3146							; 
  13504  3146
  13505  3146				   .
  13506  3146							; 
  13507  3146
  13508  3146				   .
  13509  3146							; 
  13510  3146
  13511  3146				   .
  13512  3146							; 
  13513  3146
  13514  3146				   .L0654		;  temp5  =   ( rand & 15 ) 
  13515  3146
  13516  3146							; complex statement detected
  13517  3146		       a5 a2		      lda	rand
  13518  3148		       4a		      lsr
  13519  3149					      ifconst	rand16
  13520  3149		       26 d3		      rol	rand16
  13521  314b					      endif
  13522  314b		       90 02		      bcc	*+4
  13523  314d		       49 b4		      eor	#$B4
  13524  314f		       85 a2		      sta	rand
  13525  3151					      ifconst	rand16
  13526  3151		       45 d3		      eor	rand16
  13527  3153					      endif
  13528  3153		       29 0f		      AND	#15
  13529  3155		       85 a0		      STA	temp5
  13530  3157				   .
  13531  3157							; 
  13532  3157
  13533  3157				   .
  13534  3157							; 
  13535  3157
  13536  3157				   .
  13537  3157							; 
  13538  3157
  13539  3157				   .
  13540  3157							; 
  13541  3157
  13542  3157				   .L0655		;  if temp5  <  11 then goto __Skip_Homing_Canister
  13543  3157
  13544  3157		       a5 a0		      LDA	temp5
  13545  3159		       c9 0b		      CMP	#11
  13546  315b		       b0 03		      BCS	.skipL0655
  13547  315d				   .condpart177
  13548  315d		       4c 75 51 	      jmp	.__Skip_Homing_Canister
  13549  3160
  13550  3160				   .skipL0655
  13551  3160				   .
  13552  3160							; 
  13553  3160
  13554  3160				   .
  13555  3160							; 
  13556  3160
  13557  3160				   .
  13558  3160							; 
  13559  3160
  13560  3160				   .
  13561  3160							; 
  13562  3160
  13563  3160				   .__Activate_Homing_Canister
  13564  3160							; __Activate_Homing_Canister
  13565  3160
  13566  3160				   .
  13567  3160							; 
  13568  3160
  13569  3160				   .
  13570  3160							; 
  13571  3160
  13572  3160				   .
  13573  3160							; 
  13574  3160
  13575  3160				   .
  13576  3160							; 
  13577  3160
  13578  3160				   .L0656		;  _Bit5_Bonus_500_Trigger{5}	=  1
  13579  3160
  13580  3160		       a5 c6		      LDA	_Bit5_Bonus_500_Trigger
  13581  3162		       09 20		      ORA	#32
  13582  3164		       85 c6		      STA	_Bit5_Bonus_500_Trigger
  13583  3166				   .
  13584  3166							; 
  13585  3166
  13586  3166				   .
  13587  3166							; 
  13588  3166
  13589  3166				   .
  13590  3166							; 
  13591  3166
  13592  3166				   .
  13593  3166							; 
  13594  3166
  13595  3166				   .
  13596  3166							; 
  13597  3166
  13598  3166				   .L0657		;  _Seaweed_Shot  =  0  :  _Homing_Sc_Bck_Cntr  =  0
  13599  3166
  13600  3166		       a9 00		      LDA	#0
  13601  3168		       85 e2		      STA	_Seaweed_Shot
  13602  316a		       a9 00		      LDA	#0
  13603  316c		       85 e9		      STA	v
  13604  316e		       a9 00		      LDA	#0
  13605  3170		       85 e8		      STA	_Homing_Sc_Bck_Cntr
  13606  3172				   .
  13607  3172							; 
  13608  3172
  13609  3172				   .L0658		;  goto __Skip_100_Shot
  13610  3172
  13611  3172		       4c 87 51 	      jmp	.__Skip_100_Shot
  13612  3175
  13613  3175				   .
  13614  3175							; 
  13615  3175
  13616  3175				   .__Skip_Homing_Canister
  13617  3175							; __Skip_Homing_Canister
  13618  3175
  13619  3175				   .
  13620  3175							; 
  13621  3175
  13622  3175				   .
  13623  3175							; 
  13624  3175
  13625  3175				   .
  13626  3175							; 
  13627  3175
  13628  3175				   .
  13629  3175							; 
  13630  3175
  13631  3175				   .L0659		;  _Bit1_Canister_Trigger{1}  =  1
  13632  3175
  13633  3175		       a5 c6		      LDA	_Bit1_Canister_Trigger
  13634  3177		       09 02		      ORA	#2
  13635  3179		       85 c6		      STA	_Bit1_Canister_Trigger
  13636  317b				   .
  13637  317b							; 
  13638  317b
  13639  317b				   .
  13640  317b							; 
  13641  317b
  13642  317b				   .
  13643  317b							; 
  13644  317b
  13645  317b				   .
  13646  317b							; 
  13647  317b
  13648  317b				   .
  13649  317b							; 
  13650  317b
  13651  317b				   .L0660		;  _Seaweed_Shot  =  0  :  _Homing_Sc_Bck_Cntr  =  0
  13652  317b
  13653  317b		       a9 00		      LDA	#0
  13654  317d		       85 e2		      STA	_Seaweed_Shot
  13655  317f		       a9 00		      LDA	#0
  13656  3181		       85 e9		      STA	v
  13657  3183		       a9 00		      LDA	#0
  13658  3185		       85 e8		      STA	_Homing_Sc_Bck_Cntr
  13659  3187				   .
  13660  3187							; 
  13661  3187
  13662  3187				   .
  13663  3187							; 
  13664  3187
  13665  3187				   .__Skip_100_Shot
  13666  3187							; __Skip_100_Shot
  13667  3187
  13668  3187				   .
  13669  3187							; 
  13670  3187
  13671  3187				   .
  13672  3187							; 
  13673  3187
  13674  3187				   .
  13675  3187							; 
  13676  3187
  13677  3187				   .
  13678  3187							; 
  13679  3187
  13680  3187				   .
  13681  3187							; 
  13682  3187
  13683  3187				   .
  13684  3187							; 
  13685  3187
  13686  3187				   .
  13687  3187							; 
  13688  3187
  13689  3187				   .
  13690  3187							; 
  13691  3187
  13692  3187				   .
  13693  3187							; 
  13694  3187
  13695  3187				   .
  13696  3187							; 
  13697  3187
  13698  3187				   .
  13699  3187							; 
  13700  3187
  13701  3187				   .
  13702  3187							; 
  13703  3187
  13704  3187				   .
  13705  3187							; 
  13706  3187
  13707  3187				   .L0661		;  if _Bit1_Wrothopod_On{1} then goto __Skip_Memory_Check
  13708  3187
  13709  3187		       a5 c5		      LDA	_Bit1_Wrothopod_On
  13710  3189		       29 02		      AND	#2
  13711  318b		       f0 03		      BEQ	.skipL0661
  13712  318d				   .condpart178
  13713  318d		       4c d0 51 	      jmp	.__Skip_Memory_Check
  13714  3190
  13715  3190				   .skipL0661
  13716  3190				   .
  13717  3190							; 
  13718  3190
  13719  3190				   .L0662		;  if _Bit2_Corrdd_Can_On{2} then goto __Skip_Memory_Check
  13720  3190
  13721  3190		       a5 c6		      LDA	_Bit2_Corrdd_Can_On
  13722  3192		       29 04		      AND	#4
  13723  3194		       f0 03		      BEQ	.skipL0662
  13724  3196				   .condpart179
  13725  3196		       4c d0 51 	      jmp	.__Skip_Memory_Check
  13726  3199
  13727  3199				   .skipL0662
  13728  3199				   .
  13729  3199							; 
  13730  3199
  13731  3199				   .L0663		;  if _Bit0_Canister_P1_On{0} then goto __Skip_Memory_Check
  13732  3199
  13733  3199		       a5 c5		      LDA	_Bit0_Canister_P1_On
  13734  319b		       4a		      LSR
  13735  319c		       90 03		      BCC	.skipL0663
  13736  319e				   .condpart180
  13737  319e		       4c d0 51 	      jmp	.__Skip_Memory_Check
  13738  31a1
  13739  31a1				   .skipL0663
  13740  31a1				   .
  13741  31a1							; 
  13742  31a1
  13743  31a1				   .L0664		;  if _Bit4_Bonus_500_On{4} then goto __Skip_Memory_Check
  13744  31a1
  13745  31a1		       a5 c5		      LDA	_Bit4_Bonus_500_On
  13746  31a3		       29 10		      AND	#16
  13747  31a5		       f0 03		      BEQ	.skipL0664
  13748  31a7				   .condpart181
  13749  31a7		       4c d0 51 	      jmp	.__Skip_Memory_Check
  13750  31aa
  13751  31aa				   .skipL0664
  13752  31aa				   .
  13753  31aa							; 
  13754  31aa
  13755  31aa				   .
  13756  31aa							; 
  13757  31aa
  13758  31aa				   .
  13759  31aa							; 
  13760  31aa
  13761  31aa				   .
  13762  31aa							; 
  13763  31aa
  13764  31aa				   .
  13765  31aa							; 
  13766  31aa
  13767  31aa				   .L0665		;  if _Bit3_Canister_Later{3} then _Bit3_Canister_Later{3}  =	0  :  _Bit1_Canister_Trigger{1}  =  1
  13768  31aa
  13769  31aa		       a5 c5		      LDA	_Bit3_Canister_Later
  13770  31ac		       29 08		      AND	#8
  13771  31ae		       f0 0c		      BEQ	.skipL0665
  13772  31b0				   .condpart182
  13773  31b0		       a5 c5		      LDA	_Bit3_Canister_Later
  13774  31b2		       29 f7		      AND	#247
  13775  31b4		       85 c5		      STA	_Bit3_Canister_Later
  13776  31b6		       a5 c6		      LDA	_Bit1_Canister_Trigger
  13777  31b8		       09 02		      ORA	#2
  13778  31ba		       85 c6		      STA	_Bit1_Canister_Trigger
  13779  31bc				   .skipL0665
  13780  31bc				   .
  13781  31bc							; 
  13782  31bc
  13783  31bc				   .
  13784  31bc							; 
  13785  31bc
  13786  31bc				   .
  13787  31bc							; 
  13788  31bc
  13789  31bc				   .
  13790  31bc							; 
  13791  31bc
  13792  31bc				   .
  13793  31bc							; 
  13794  31bc
  13795  31bc				   .L0666		;  if _Bit0_Thousand_Bonus_Later{0} then _Bit0_Thousand_Bonus_Later{0}  =  0  :  _Bit5_Bonus_500_Trigger{5}  =  1
  13796  31bc
  13797  31bc		       a5 c6		      LDA	_Bit0_Thousand_Bonus_Later
  13798  31be		       4a		      LSR
  13799  31bf		       90 0c		      BCC	.skipL0666
  13800  31c1				   .condpart183
  13801  31c1		       a5 c6		      LDA	_Bit0_Thousand_Bonus_Later
  13802  31c3		       29 fe		      AND	#254
  13803  31c5		       85 c6		      STA	_Bit0_Thousand_Bonus_Later
  13804  31c7		       a5 c6		      LDA	_Bit5_Bonus_500_Trigger
  13805  31c9		       09 20		      ORA	#32
  13806  31cb		       85 c6		      STA	_Bit5_Bonus_500_Trigger
  13807  31cd				   .skipL0666
  13808  31cd				   .
  13809  31cd							; 
  13810  31cd
  13811  31cd				   .L0667		;  goto __Move_or_New_Canister_Check
  13812  31cd
  13813  31cd		       4c 09 52 	      jmp	.__Move_or_New_Canister_Check
  13814  31d0
  13815  31d0				   .
  13816  31d0							; 
  13817  31d0
  13818  31d0				   .__Skip_Memory_Check
  13819  31d0							; __Skip_Memory_Check
  13820  31d0
  13821  31d0				   .
  13822  31d0							; 
  13823  31d0
  13824  31d0				   .
  13825  31d0							; 
  13826  31d0
  13827  31d0				   .
  13828  31d0							; 
  13829  31d0
  13830  31d0				   .
  13831  31d0							; 
  13832  31d0
  13833  31d0				   .L0668		;  if _Bit1_Canister_Trigger{1}  ||  _Bit5_Bonus_500_Trigger{5} then goto __Remember_Bonus
  13834  31d0
  13835  31d0		       a5 c6		      LDA	_Bit1_Canister_Trigger
  13836  31d2		       29 02		      AND	#2
  13837  31d4		       f0 03		      BEQ	.skipL0668
  13838  31d6				   .condpart184
  13839  31d6		       4c df 51 	      jmp	.condpart185
  13840  31d9				   .skipL0668
  13841  31d9		       a5 c6		      LDA	_Bit5_Bonus_500_Trigger
  13842  31db		       29 20		      AND	#32
  13843  31dd		       f0 03		      BEQ	.skip25OR
  13844  31df				   .condpart185
  13845  31df		       4c e5 51 	      jmp	.__Remember_Bonus
  13846  31e2
  13847  31e2				   .skip25OR
  13848  31e2				   .
  13849  31e2							; 
  13850  31e2
  13851  31e2				   .L0669		;  goto __Move_or_New_Canister_Check
  13852  31e2
  13853  31e2		       4c 09 52 	      jmp	.__Move_or_New_Canister_Check
  13854  31e5
  13855  31e5				   .
  13856  31e5							; 
  13857  31e5
  13858  31e5				   .__Remember_Bonus
  13859  31e5							; __Remember_Bonus
  13860  31e5
  13861  31e5				   .
  13862  31e5							; 
  13863  31e5
  13864  31e5				   .
  13865  31e5							; 
  13866  31e5
  13867  31e5				   .
  13868  31e5							; 
  13869  31e5
  13870  31e5				   .
  13871  31e5							; 
  13872  31e5
  13873  31e5				   .L0670		;  if _Bit1_Canister_Trigger{1} then _Bit1_Canister_Trigger{1}  =  0  :  _Bit3_Canister_Later{3}  =  1
  13874  31e5
  13875  31e5		       a5 c6		      LDA	_Bit1_Canister_Trigger
  13876  31e7		       29 02		      AND	#2
  13877  31e9		       f0 0c		      BEQ	.skipL0670
  13878  31eb				   .condpart186
  13879  31eb		       a5 c6		      LDA	_Bit1_Canister_Trigger
  13880  31ed		       29 fd		      AND	#253
  13881  31ef		       85 c6		      STA	_Bit1_Canister_Trigger
  13882  31f1		       a5 c5		      LDA	_Bit3_Canister_Later
  13883  31f3		       09 08		      ORA	#8
  13884  31f5		       85 c5		      STA	_Bit3_Canister_Later
  13885  31f7				   .skipL0670
  13886  31f7				   .
  13887  31f7							; 
  13888  31f7
  13889  31f7				   .L0671		;  if _Bit5_Bonus_500_Trigger{5} then _Bit5_Bonus_500_Trigger{5}  =  0  :  _Bit0_Thousand_Bonus_Later{0}  =  1
  13890  31f7
  13891  31f7		       a5 c6		      LDA	_Bit5_Bonus_500_Trigger
  13892  31f9		       29 20		      AND	#32
  13893  31fb		       f0 0c		      BEQ	.skipL0671
  13894  31fd				   .condpart187
  13895  31fd		       a5 c6		      LDA	_Bit5_Bonus_500_Trigger
  13896  31ff		       29 df		      AND	#223
  13897  3201		       85 c6		      STA	_Bit5_Bonus_500_Trigger
  13898  3203		       a5 c6		      LDA	_Bit0_Thousand_Bonus_Later
  13899  3205		       09 01		      ORA	#1
  13900  3207		       85 c6		      STA	_Bit0_Thousand_Bonus_Later
  13901  3209				   .skipL0671
  13902  3209				   .
  13903  3209							; 
  13904  3209
  13905  3209				   .
  13906  3209							; 
  13907  3209
  13908  3209				   .
  13909  3209							; 
  13910  3209
  13911  3209				   .
  13912  3209							; 
  13913  3209
  13914  3209				   .
  13915  3209							; 
  13916  3209
  13917  3209				   .
  13918  3209							; 
  13919  3209
  13920  3209				   .
  13921  3209							; 
  13922  3209
  13923  3209				   .
  13924  3209							; 
  13925  3209
  13926  3209				   .__Move_or_New_Canister_Check
  13927  3209							; __Move_or_New_Canister_Check
  13928  3209
  13929  3209				   .
  13930  3209							; 
  13931  3209
  13932  3209				   .
  13933  3209							; 
  13934  3209
  13935  3209				   .
  13936  3209							; 
  13937  3209
  13938  3209				   .
  13939  3209							; 
  13940  3209
  13941  3209				   .
  13942  3209							; 
  13943  3209
  13944  3209				   .
  13945  3209							; 
  13946  3209
  13947  3209				   .L0672		;  if _Bit0_Canister_P1_On{0} then goto __Canister_Move
  13948  3209
  13949  3209		       a5 c5		      LDA	_Bit0_Canister_P1_On
  13950  320b		       4a		      LSR
  13951  320c		       90 03		      BCC	.skipL0672
  13952  320e				   .condpart188
  13953  320e		       4c b6 52 	      jmp	.__Canister_Move
  13954  3211
  13955  3211				   .skipL0672
  13956  3211				   .
  13957  3211							; 
  13958  3211
  13959  3211				   .
  13960  3211							; 
  13961  3211
  13962  3211				   .
  13963  3211							; 
  13964  3211
  13965  3211				   .
  13966  3211							; 
  13967  3211
  13968  3211				   .
  13969  3211							; 
  13970  3211
  13971  3211				   .
  13972  3211							; 
  13973  3211
  13974  3211				   .L0673		;  if _Bit1_Canister_Trigger{1}  ||  _Bit5_Bonus_500_Trigger{5} then goto __New_Canister
  13975  3211
  13976  3211		       a5 c6		      LDA	_Bit1_Canister_Trigger
  13977  3213		       29 02		      AND	#2
  13978  3215		       f0 03		      BEQ	.skipL0673
  13979  3217				   .condpart189
  13980  3217		       4c 20 52 	      jmp	.condpart190
  13981  321a				   .skipL0673
  13982  321a		       a5 c6		      LDA	_Bit5_Bonus_500_Trigger
  13983  321c		       29 20		      AND	#32
  13984  321e		       f0 03		      BEQ	.skip26OR
  13985  3220				   .condpart190
  13986  3220		       4c 26 52 	      jmp	.__New_Canister
  13987  3223
  13988  3223				   .skip26OR
  13989  3223				   .
  13990  3223							; 
  13991  3223
  13992  3223				   .L0674		;  goto __Canister_Section_End
  13993  3223
  13994  3223		       4c eb 54 	      jmp	.__Canister_Section_End
  13995  3226
  13996  3226				   .
  13997  3226							; 
  13998  3226
  13999  3226				   .
  14000  3226							; 
  14001  3226
  14002  3226				   .
  14003  3226							; 
  14004  3226
  14005  3226				   .
  14006  3226							; 
  14007  3226
  14008  3226				   .
  14009  3226							; 
  14010  3226
  14011  3226				   .
  14012  3226							; 
  14013  3226
  14014  3226				   .
  14015  3226							; 
  14016  3226
  14017  3226				   .__New_Canister
  14018  3226							; __New_Canister
  14019  3226
  14020  3226				   .
  14021  3226							; 
  14022  3226
  14023  3226				   .
  14024  3226							; 
  14025  3226
  14026  3226				   .
  14027  3226							; 
  14028  3226
  14029  3226				   .
  14030  3226							; 
  14031  3226
  14032  3226				   .L0675		;  if !_Bit5_Bonus_500_Trigger{5} then goto __Skip_500_Canister_Check
  14033  3226
  14034  3226		       a5 c6		      LDA	_Bit5_Bonus_500_Trigger
  14035  3228		       29 20		      AND	#32
  14036  322a		       d0 03		      BNE	.skipL0675
  14037  322c				   .condpart191
  14038  322c		       4c 3b 52 	      jmp	.__Skip_500_Canister_Check
  14039  322f
  14040  322f				   .skipL0675
  14041  322f				   .
  14042  322f							; 
  14043  322f
  14044  322f				   .
  14045  322f							; 
  14046  322f
  14047  322f				   .
  14048  322f							; 
  14049  322f
  14050  322f				   .
  14051  322f							; 
  14052  322f
  14053  322f				   .L0676		;  _Bit4_Bonus_500_On{4}  =  1
  14054  322f
  14055  322f		       a5 c5		      LDA	_Bit4_Bonus_500_On
  14056  3231		       09 10		      ORA	#16
  14057  3233		       85 c5		      STA	_Bit4_Bonus_500_On
  14058  3235				   .
  14059  3235							; 
  14060  3235
  14061  3235				   .L0677		;  _Bit5_Bonus_500_Trigger{5}	=  0
  14062  3235
  14063  3235		       a5 c6		      LDA	_Bit5_Bonus_500_Trigger
  14064  3237		       29 df		      AND	#223
  14065  3239		       85 c6		      STA	_Bit5_Bonus_500_Trigger
  14066  323b				   .
  14067  323b							; 
  14068  323b
  14069  323b				   .__Skip_500_Canister_Check
  14070  323b							; __Skip_500_Canister_Check
  14071  323b
  14072  323b				   .
  14073  323b							; 
  14074  323b
  14075  323b				   .
  14076  323b							; 
  14077  323b
  14078  323b				   .
  14079  323b							; 
  14080  323b
  14081  323b				   .
  14082  323b							; 
  14083  323b
  14084  323b				   .L0678		;  _Bit6_Homing_Color_Cycle_On{6}  =  1
  14085  323b
  14086  323b		       a5 c6		      LDA	_Bit6_Homing_Color_Cycle_On
  14087  323d		       09 40		      ORA	#64
  14088  323f		       85 c6		      STA	_Bit6_Homing_Color_Cycle_On
  14089  3241				   .
  14090  3241							; 
  14091  3241
  14092  3241				   .
  14093  3241							; 
  14094  3241
  14095  3241				   .
  14096  3241							; 
  14097  3241
  14098  3241				   .
  14099  3241							; 
  14100  3241
  14101  3241				   .L0679		;  if _Plop_Rate  <  14 then _Plop_Rate  =  _Plop_Rate  +  1
  14102  3241
  14103  3241		       a5 e3		      LDA	_Plop_Rate
  14104  3243		       c9 0e		      CMP	#14
  14105  3245		       b0 02		      BCS	.skipL0679
  14106  3247				   .condpart192
  14107  3247		       e6 e3		      INC	_Plop_Rate
  14108  3249				   .skipL0679
  14109  3249				   .
  14110  3249							; 
  14111  3249
  14112  3249				   .
  14113  3249							; 
  14114  3249
  14115  3249				   .
  14116  3249							; 
  14117  3249
  14118  3249				   .
  14119  3249							; 
  14120  3249
  14121  3249				   .
  14122  3249							; 
  14123  3249
  14124  3249				   .L0680		;  _Bit0_Canister_P1_On{0}  =	1
  14125  3249
  14126  3249		       a5 c5		      LDA	_Bit0_Canister_P1_On
  14127  324b		       09 01		      ORA	#1
  14128  324d		       85 c5		      STA	_Bit0_Canister_P1_On
  14129  324f				   .
  14130  324f							; 
  14131  324f
  14132  324f				   .L0681		;  player1y  =  0  :  _Bit1_Canister_Trigger{1}  =  0
  14133  324f
  14134  324f		       a9 00		      LDA	#0
  14135  3251		       85 86		      STA	player1y
  14136  3253		       a5 c6		      LDA	_Bit1_Canister_Trigger
  14137  3255		       29 fd		      AND	#253
  14138  3257		       85 c6		      STA	_Bit1_Canister_Trigger
  14139  3259				   .
  14140  3259							; 
  14141  3259
  14142  3259				   .
  14143  3259							; 
  14144  3259
  14145  3259				   .
  14146  3259							; 
  14147  3259
  14148  3259				   .
  14149  3259							; 
  14150  3259
  14151  3259				   .L0682		;  _Ch1_Sound	=  _c_Canister_Appear  :  _Ch1_Duration  =  1
  14152  3259
  14153  3259		       a9 04		      LDA	#_c_Canister_Appear
  14154  325b		       85 dd		      STA	_Ch1_Sound
  14155  325d		       a9 01		      LDA	#1
  14156  325f		       85 de		      STA	_Ch1_Duration
  14157  3261				   .
  14158  3261							; 
  14159  3261
  14160  3261				   .
  14161  3261							; 
  14162  3261
  14163  3261				   .
  14164  3261							; 
  14165  3261
  14166  3261				   .
  14167  3261							; 
  14168  3261
  14169  3261				   .L0683		;  _Ch1_Counter  =  24
  14170  3261
  14171  3261		       a9 18		      LDA	#24
  14172  3263		       85 df		      STA	_Ch1_Counter
  14173  3265				   .
  14174  3265							; 
  14175  3265
  14176  3265				   .
  14177  3265							; 
  14178  3265
  14179  3265				   .
  14180  3265							; 
  14181  3265
  14182  3265				   .
  14183  3265							; 
  14184  3265
  14185  3265				   .L0684		;  if _Bit4_Bonus_500_On{4} then _Ch1_Counter	=  0
  14186  3265
  14187  3265		       a5 c5		      LDA	_Bit4_Bonus_500_On
  14188  3267		       29 10		      AND	#16
  14189  3269		       f0 04		      BEQ	.skipL0684
  14190  326b				   .condpart193
  14191  326b		       a9 00		      LDA	#0
  14192  326d		       85 df		      STA	_Ch1_Counter
  14193  326f				   .skipL0684
  14194  326f				   .
  14195  326f							; 
  14196  326f
  14197  326f				   .
  14198  326f							; 
  14199  326f
  14200  326f				   .
  14201  326f							; 
  14202  326f
  14203  326f				   .
  14204  326f							; 
  14205  326f
  14206  326f				   .L0685		;  player1:
  14207  326f
  14208  326f		       a2 40		      LDX	#<playerL0685_1
  14209  3271		       86 8c		      STX	player1pointerlo
  14210  3273		       a9 f9		      LDA	#>playerL0685_1
  14211  3275		       85 8d		      STA	player1pointerhi
  14212  3277		       a9 05		      LDA	#5
  14213  3279		       85 8f		      STA	player1height
  14214  327b				   .
  14215  327b							; 
  14216  327b
  14217  327b				   .
  14218  327b							; 
  14219  327b
  14220  327b				   .
  14221  327b							; 
  14222  327b
  14223  327b				   .
  14224  327b							; 
  14225  327b
  14226  327b				   .L0686		;  if player0x  <  80 then temp5  =   ( rand / 8 )   :  player1x  =  temp5  +	93  :  goto __Canister_Move
  14227  327b
  14228  327b		       a5 80		      LDA	player0x
  14229  327d		       c9 50		      CMP	#80
  14230  327f		       b0 1c		      BCS	.skipL0686
  14231  3281				   .condpart194
  14232  3281							; complex statement detected
  14233  3281		       a5 a2		      lda	rand
  14234  3283		       4a		      lsr
  14235  3284					      ifconst	rand16
  14236  3284		       26 d3		      rol	rand16
  14237  3286					      endif
  14238  3286		       90 02		      bcc	*+4
  14239  3288		       49 b4		      eor	#$B4
  14240  328a		       85 a2		      sta	rand
  14241  328c					      ifconst	rand16
  14242  328c		       45 d3		      eor	rand16
  14243  328e					      endif
  14244  328e		       4a		      lsr
  14245  328f		       4a		      lsr
  14246  3290		       4a		      lsr
  14247  3291		       85 a0		      STA	temp5
  14248  3293		       a5 a0		      LDA	temp5
  14249  3295		       18		      CLC
  14250  3296		       69 5d		      ADC	#93
  14251  3298		       85 81		      STA	player1x
  14252  329a		       4c b6 52 	      jmp	.__Canister_Move
  14253  329d
  14254  329d				   .skipL0686
  14255  329d				   .
  14256  329d							; 
  14257  329d
  14258  329d				   .
  14259  329d							; 
  14260  329d
  14261  329d				   .
  14262  329d							; 
  14263  329d
  14264  329d				   .
  14265  329d							; 
  14266  329d
  14267  329d				   .L0687		;  temp5  =   ( rand / 8 )   :  player1x  =  temp5  +	30
  14268  329d
  14269  329d							; complex statement detected
  14270  329d		       a5 a2		      lda	rand
  14271  329f		       4a		      lsr
  14272  32a0					      ifconst	rand16
  14273  32a0		       26 d3		      rol	rand16
  14274  32a2					      endif
  14275  32a2		       90 02		      bcc	*+4
  14276  32a4		       49 b4		      eor	#$B4
  14277  32a6		       85 a2		      sta	rand
  14278  32a8					      ifconst	rand16
  14279  32a8		       45 d3		      eor	rand16
  14280  32aa					      endif
  14281  32aa		       4a		      lsr
  14282  32ab		       4a		      lsr
  14283  32ac		       4a		      lsr
  14284  32ad		       85 a0		      STA	temp5
  14285  32af		       a5 a0		      LDA	temp5
  14286  32b1		       18		      CLC
  14287  32b2		       69 1e		      ADC	#30
  14288  32b4		       85 81		      STA	player1x
  14289  32b6				   .
  14290  32b6							; 
  14291  32b6
  14292  32b6				   .__Canister_Move
  14293  32b6							; __Canister_Move
  14294  32b6
  14295  32b6				   .
  14296  32b6							; 
  14297  32b6
  14298  32b6				   .
  14299  32b6							; 
  14300  32b6
  14301  32b6				   .
  14302  32b6							; 
  14303  32b6
  14304  32b6				   .
  14305  32b6							; 
  14306  32b6
  14307  32b6				   .
  14308  32b6							; 
  14309  32b6
  14310  32b6				   .
  14311  32b6							; 
  14312  32b6
  14313  32b6				   .
  14314  32b6							; 
  14315  32b6
  14316  32b6				   .
  14317  32b6							; 
  14318  32b6
  14319  32b6				   .
  14320  32b6							; 
  14321  32b6
  14322  32b6				   .
  14323  32b6							; 
  14324  32b6
  14325  32b6				   .L0688		;  if _Bit4_Bonus_500_On{4} then if _Ch1_Sound  =  _c_Canister_Appear	&&  _Ch1_Counter  <  48 then goto __Skip_Canister_Move
  14326  32b6
  14327  32b6		       a5 c5		      LDA	_Bit4_Bonus_500_On
  14328  32b8		       29 10		      AND	#16
  14329  32ba		       f0 0f		      BEQ	.skipL0688
  14330  32bc				   .condpart195
  14331  32bc		       a5 dd		      LDA	_Ch1_Sound
  14332  32be		       c9 04		      CMP	#_c_Canister_Appear
  14333  32c0		       d0 09		      BNE	.skip195then
  14334  32c2				   .condpart196
  14335  32c2		       a5 df		      LDA	_Ch1_Counter
  14336  32c4		       c9 30		      CMP	#48
  14337  32c6		       b0 03		      BCS	.skip196then
  14338  32c8				   .condpart197
  14339  32c8		       4c 1c 53 	      jmp	.__Skip_Canister_Move
  14340  32cb
  14341  32cb				   .skip196then
  14342  32cb				   .skip195then
  14343  32cb				   .skipL0688
  14344  32cb				   .
  14345  32cb							; 
  14346  32cb
  14347  32cb				   .
  14348  32cb							; 
  14349  32cb
  14350  32cb				   .
  14351  32cb							; 
  14352  32cb
  14353  32cb				   .
  14354  32cb							; 
  14355  32cb
  14356  32cb				   .
  14357  32cb							; 
  14358  32cb
  14359  32cb				   .
  14360  32cb							; 
  14361  32cb
  14362  32cb				   .L0689		;  if !_Bit4_Bonus_500_On{4} then if _Ch1_Sound  =  _c_Canister_Appear  &&  _Ch1_Counter  <  72 then goto __Skip_Canister_Move
  14363  32cb
  14364  32cb		       a5 c5		      LDA	_Bit4_Bonus_500_On
  14365  32cd		       29 10		      AND	#16
  14366  32cf		       d0 0f		      BNE	.skipL0689
  14367  32d1				   .condpart198
  14368  32d1		       a5 dd		      LDA	_Ch1_Sound
  14369  32d3		       c9 04		      CMP	#_c_Canister_Appear
  14370  32d5		       d0 09		      BNE	.skip198then
  14371  32d7				   .condpart199
  14372  32d7		       a5 df		      LDA	_Ch1_Counter
  14373  32d9		       c9 48		      CMP	#72
  14374  32db		       b0 03		      BCS	.skip199then
  14375  32dd				   .condpart200
  14376  32dd		       4c 1c 53 	      jmp	.__Skip_Canister_Move
  14377  32e0
  14378  32e0				   .skip199then
  14379  32e0				   .skip198then
  14380  32e0				   .skipL0689
  14381  32e0				   .
  14382  32e0							; 
  14383  32e0
  14384  32e0				   .
  14385  32e0							; 
  14386  32e0
  14387  32e0				   .
  14388  32e0							; 
  14389  32e0
  14390  32e0				   .
  14391  32e0							; 
  14392  32e0
  14393  32e0				   .L0690		;  _P1_Up_Down  =  _P1_Up_Down  +  0.42
  14394  32e0
  14395  32e0		       a5 d6		      LDA	c
  14396  32e2		       18		      CLC
  14397  32e3		       69 6b		      ADC	#107
  14398  32e5		       85 d6		      STA	c
  14399  32e7		       a5 86		      LDA	_P1_Up_Down
  14400  32e9		       69 00		      ADC	#0
  14401  32eb		       85 86		      STA	_P1_Up_Down
  14402  32ed				   .
  14403  32ed							; 
  14404  32ed
  14405  32ed				   .
  14406  32ed							; 
  14407  32ed
  14408  32ed				   .
  14409  32ed							; 
  14410  32ed
  14411  32ed				   .
  14412  32ed							; 
  14413  32ed
  14414  32ed				   .L0691		;  if !_Bit4_Bonus_500_On{4} then goto __Skip_Canister_Move
  14415  32ed
  14416  32ed		       a5 c5		      LDA	_Bit4_Bonus_500_On
  14417  32ef		       29 10		      AND	#16
  14418  32f1		       d0 03		      BNE	.skipL0691
  14419  32f3				   .condpart201
  14420  32f3		       4c 1c 53 	      jmp	.__Skip_Canister_Move
  14421  32f6
  14422  32f6				   .skipL0691
  14423  32f6				   .
  14424  32f6							; 
  14425  32f6
  14426  32f6				   .L0692		;  if player1x  <  player0x then _P1_Left_Right  =  _P1_Left_Right  +	0.72
  14427  32f6
  14428  32f6		       a5 81		      LDA	player1x
  14429  32f8		       c5 80		      CMP	player0x
  14430  32fa		       b0 0d		      BCS	.skipL0692
  14431  32fc				   .condpart202
  14432  32fc		       a5 d7		      LDA	d
  14433  32fe		       18		      CLC
  14434  32ff		       69 b8		      ADC	#184
  14435  3301		       85 d7		      STA	d
  14436  3303		       a5 81		      LDA	_P1_Left_Right
  14437  3305		       69 00		      ADC	#0
  14438  3307		       85 81		      STA	_P1_Left_Right
  14439  3309				   .skipL0692
  14440  3309				   .
  14441  3309							; 
  14442  3309
  14443  3309				   .L0693		;  if player1x  >  player0x then _P1_Left_Right  =  _P1_Left_Right  -	0.72
  14444  3309
  14445  3309		       a5 80		      LDA	player0x
  14446  330b		       c5 81		      CMP	player1x
  14447  330d		       b0 0d		      BCS	.skipL0693
  14448  330f				   .condpart203
  14449  330f		       a5 d7		      LDA	d
  14450  3311		       38		      SEC
  14451  3312		       e9 b8		      SBC	#184
  14452  3314		       85 d7		      STA	d
  14453  3316		       a5 81		      LDA	_P1_Left_Right
  14454  3318		       e9 00		      SBC	#0
  14455  331a		       85 81		      STA	_P1_Left_Right
  14456  331c				   .skipL0693
  14457  331c				   .
  14458  331c							; 
  14459  331c
  14460  331c				   .__Skip_Canister_Move
  14461  331c							; __Skip_Canister_Move
  14462  331c
  14463  331c				   .
  14464  331c							; 
  14465  331c
  14466  331c				   .
  14467  331c							; 
  14468  331c
  14469  331c				   .
  14470  331c							; 
  14471  331c
  14472  331c				   .
  14473  331c							; 
  14474  331c
  14475  331c				   .L0694		;  if player1y  <  100 then goto __Skip_Player1_Position_Check
  14476  331c
  14477  331c		       a5 86		      LDA	player1y
  14478  331e		       c9 64		      CMP	#100
  14479  3320		       b0 03		      BCS	.skipL0694
  14480  3322				   .condpart204
  14481  3322		       4c 28 53 	      jmp	.__Skip_Player1_Position_Check
  14482  3325
  14483  3325				   .skipL0694
  14484  3325				   .
  14485  3325							; 
  14486  3325
  14487  3325				   .L0695		;  goto __Canister_Off_Screen
  14488  3325
  14489  3325		       4c d5 54 	      jmp	.__Canister_Off_Screen
  14490  3328
  14491  3328				   .
  14492  3328							; 
  14493  3328
  14494  3328				   .__Skip_Player1_Position_Check
  14495  3328							; __Skip_Player1_Position_Check
  14496  3328
  14497  3328				   .
  14498  3328							; 
  14499  3328
  14500  3328				   .
  14501  3328							; 
  14502  3328
  14503  3328				   .
  14504  3328							; 
  14505  3328
  14506  3328				   .
  14507  3328							; 
  14508  3328
  14509  3328				   .
  14510  3328							; 
  14511  3328
  14512  3328				   .
  14513  3328							; 
  14514  3328
  14515  3328				   .
  14516  3328							; 
  14517  3328
  14518  3328				   .
  14519  3328							; 
  14520  3328
  14521  3328				   .L0696		;  if player1y  >  33 then goto __Skip_Top_3rd
  14522  3328
  14523  3328		       a9 21		      LDA	#33
  14524  332a		       c5 86		      CMP	player1y
  14525  332c		       b0 03		      BCS	.skipL0696
  14526  332e				   .condpart205
  14527  332e		       4c c1 53 	      jmp	.__Skip_Top_3rd
  14528  3331
  14529  3331				   .skipL0696
  14530  3331				   .
  14531  3331							; 
  14532  3331
  14533  3331				   .
  14534  3331							; 
  14535  3331
  14536  3331				   .
  14537  3331							; 
  14538  3331
  14539  3331				   .
  14540  3331							; 
  14541  3331
  14542  3331				   .L0697		;  player1color:
  14543  3331
  14544  3331		       a2 46		      LDX	#<playercolorL0697_1
  14545  3333		       86 87		      STX	player1color
  14546  3335		       a9 f9		      LDA	#>playercolorL0697_1
  14547  3337		       85 88		      STA	player1color+1
  14548  3339				   .
  14549  3339							; 
  14550  3339
  14551  3339				   .
  14552  3339							; 
  14553  3339
  14554  3339				   .
  14555  3339							; 
  14556  3339
  14557  3339				   .
  14558  3339							; 
  14559  3339
  14560  3339				   .L0698		;  if !collision(player1,player0) then goto __Canister_Section_End
  14561  3339
  14562  3339		       24 07		      bit	CXPPMM
  14563  333b		       30 03		      BMI	.skipL0698
  14564  333d				   .condpart206
  14565  333d		       4c eb 54 	      jmp	.__Canister_Section_End
  14566  3340
  14567  3340				   .skipL0698
  14568  3340				   .
  14569  3340							; 
  14570  3340
  14571  3340				   .
  14572  3340							; 
  14573  3340
  14574  3340				   .
  14575  3340							; 
  14576  3340
  14577  3340				   .
  14578  3340							; 
  14579  3340
  14580  3340				   .
  14581  3340							; 
  14582  3340
  14583  3340				   .
  14584  3340							; 
  14585  3340
  14586  3340				   .
  14587  3340							; 
  14588  3340
  14589  3340				   .L0699		;  _Bit0_Game_Control{0}  =  0
  14590  3340
  14591  3340		       a5 d2		      LDA	_Bit0_Game_Control
  14592  3342		       29 fe		      AND	#254
  14593  3344		       85 d2		      STA	_Bit0_Game_Control
  14594  3346				   .
  14595  3346							; 
  14596  3346
  14597  3346				   .
  14598  3346							; 
  14599  3346
  14600  3346				   .
  14601  3346							; 
  14602  3346
  14603  3346				   .
  14604  3346							; 
  14605  3346
  14606  3346				   .L0700		;  _Points_Roll_Up  =	_Points_Roll_Up  +  50
  14607  3346
  14608  3346		       a5 e5		      LDA	_Points_Roll_Up
  14609  3348		       18		      CLC
  14610  3349		       69 32		      ADC	#50
  14611  334b		       85 e5		      STA	_Points_Roll_Up
  14612  334d				   .
  14613  334d							; 
  14614  334d
  14615  334d				   .
  14616  334d							; 
  14617  334d
  14618  334d				   .
  14619  334d							; 
  14620  334d
  14621  334d				   .
  14622  334d							; 
  14623  334d
  14624  334d				   .L0701		;  _Bit5_Manatee_Health_Color{5}  =  1
  14625  334d
  14626  334d		       a5 c7		      LDA	_Bit5_Manatee_Health_Color
  14627  334f		       09 20		      ORA	#32
  14628  3351		       85 c7		      STA	_Bit5_Manatee_Health_Color
  14629  3353				   .
  14630  3353							; 
  14631  3353
  14632  3353				   .
  14633  3353							; 
  14634  3353
  14635  3353				   .
  14636  3353							; 
  14637  3353
  14638  3353				   .
  14639  3353							; 
  14640  3353
  14641  3353				   .L0702		;  temp5  =  0
  14642  3353
  14643  3353		       a9 00		      LDA	#0
  14644  3355		       85 a0		      STA	temp5
  14645  3357				   .
  14646  3357							; 
  14647  3357
  14648  3357				   .__Top_3rd_Score_Test_Loop
  14649  3357							; __Top_3rd_Score_Test_Loop
  14650  3357
  14651  3357				   .
  14652  3357							; 
  14653  3357
  14654  3357				   .
  14655  3357							; 
  14656  3357
  14657  3357				   .
  14658  3357							; 
  14659  3357
  14660  3357				   .
  14661  3357							; 
  14662  3357
  14663  3357				   .L0703		;  temp5  =  temp5  +	1
  14664  3357
  14665  3357		       e6 a0		      INC	temp5
  14666  3359				   .
  14667  3359							; 
  14668  3359
  14669  3359				   .
  14670  3359							; 
  14671  3359
  14672  3359				   .
  14673  3359							; 
  14674  3359
  14675  3359				   .
  14676  3359							; 
  14677  3359
  14678  3359				   .L0704		;  if pfscore2  =  255  &&  pfscore1  =  255 then goto __Top_Both_Full
  14679  3359
  14680  3359		       a5 f3		      LDA	pfscore2
  14681  335b		       c9 ff		      CMP	#255
  14682  335d		       d0 09		      BNE	.skipL0704
  14683  335f				   .condpart207
  14684  335f		       a5 f2		      LDA	pfscore1
  14685  3361		       c9 ff		      CMP	#255
  14686  3363		       d0 03		      BNE	.skip207then
  14687  3365				   .condpart208
  14688  3365		       4c 6b 53 	      jmp	.__Top_Both_Full
  14689  3368
  14690  3368				   .skip207then
  14691  3368				   .skipL0704
  14692  3368				   .
  14693  3368							; 
  14694  3368
  14695  3368				   .L0705		;  goto __Skip_Top_Both_Full
  14696  3368
  14697  3368		       4c 95 53 	      jmp	.__Skip_Top_Both_Full
  14698  336b
  14699  336b				   .
  14700  336b							; 
  14701  336b
  14702  336b				   .__Top_Both_Full
  14703  336b							; __Top_Both_Full
  14704  336b
  14705  336b				   .
  14706  336b							; 
  14707  336b
  14708  336b				   .
  14709  336b							; 
  14710  336b
  14711  336b				   .
  14712  336b							; 
  14713  336b
  14714  336b				   .
  14715  336b							; 
  14716  336b
  14717  336b				   .L0706		;  if temp5  =  1 then _Points_Roll_Up  =  _Points_Roll_Up  +	25  :  goto __Skip_Clear_Can
  14718  336b
  14719  336b		       a5 a0		      LDA	temp5
  14720  336d		       c9 01		      CMP	#1
  14721  336f		       d0 0a		      BNE	.skipL0706
  14722  3371				   .condpart209
  14723  3371		       a5 e5		      LDA	_Points_Roll_Up
  14724  3373		       18		      CLC
  14725  3374		       69 19		      ADC	#25
  14726  3376		       85 e5		      STA	_Points_Roll_Up
  14727  3378		       4c ab 54 	      jmp	.__Skip_Clear_Can
  14728  337b
  14729  337b				   .skipL0706
  14730  337b				   .
  14731  337b							; 
  14732  337b
  14733  337b				   .L0707		;  if temp5  =  2 then _Points_Roll_Up  =  _Points_Roll_Up  +	10  :  goto __Skip_Clear_Can
  14734  337b
  14735  337b		       a5 a0		      LDA	temp5
  14736  337d		       c9 02		      CMP	#2
  14737  337f		       d0 0a		      BNE	.skipL0707
  14738  3381				   .condpart210
  14739  3381		       a5 e5		      LDA	_Points_Roll_Up
  14740  3383		       18		      CLC
  14741  3384		       69 0a		      ADC	#10
  14742  3386		       85 e5		      STA	_Points_Roll_Up
  14743  3388		       4c ab 54 	      jmp	.__Skip_Clear_Can
  14744  338b
  14745  338b				   .skipL0707
  14746  338b				   .
  14747  338b							; 
  14748  338b
  14749  338b				   .L0708		;  _Points_Roll_Up  =	_Points_Roll_Up  +  5  :  goto __Skip_Clear_Can
  14750  338b
  14751  338b		       a5 e5		      LDA	_Points_Roll_Up
  14752  338d		       18		      CLC
  14753  338e		       69 05		      ADC	#5
  14754  3390		       85 e5		      STA	_Points_Roll_Up
  14755  3392		       4c ab 54 	      jmp	.__Skip_Clear_Can
  14756  3395
  14757  3395				   .
  14758  3395							; 
  14759  3395
  14760  3395				   .__Skip_Top_Both_Full
  14761  3395							; __Skip_Top_Both_Full
  14762  3395
  14763  3395				   .
  14764  3395							; 
  14765  3395
  14766  3395				   .
  14767  3395							; 
  14768  3395
  14769  3395				   .
  14770  3395							; 
  14771  3395
  14772  3395				   .
  14773  3395							; 
  14774  3395
  14775  3395				   .
  14776  3395							; 
  14777  3395
  14778  3395				   .L0709		;  if pfscore2  =  255 then if pfscore1  <=  127 then pfscore1  =  pfscore1 * 2 | 1
  14779  3395
  14780  3395		       a5 f3		      LDA	pfscore2
  14781  3397		       c9 ff		      CMP	#255
  14782  3399		       d0 0d		      BNE	.skipL0709
  14783  339b				   .condpart211
  14784  339b		       a9 7f		      LDA	#127
  14785  339d		       c5 f2		      CMP	pfscore1
  14786  339f		       90 07		      BCC	.skip211then
  14787  33a1				   .condpart212
  14788  33a1							; complex statement detected
  14789  33a1		       a5 f2		      LDA	pfscore1
  14790  33a3		       0a		      asl
  14791  33a4		       09 01		      ORA	#1
  14792  33a6		       85 f2		      STA	pfscore1
  14793  33a8				   .skip211then
  14794  33a8				   .skipL0709
  14795  33a8				   .
  14796  33a8							; 
  14797  33a8
  14798  33a8				   .
  14799  33a8							; 
  14800  33a8
  14801  33a8				   .
  14802  33a8							; 
  14803  33a8
  14804  33a8				   .
  14805  33a8							; 
  14806  33a8
  14807  33a8				   .L0710		;  if pfscore2  <  128 then pfscore2  =  pfscore2 * 2 | 1
  14808  33a8
  14809  33a8		       a5 f3		      LDA	pfscore2
  14810  33aa		       c9 80		      CMP	#128
  14811  33ac		       b0 07		      BCS	.skipL0710
  14812  33ae				   .condpart213
  14813  33ae							; complex statement detected
  14814  33ae		       a5 f3		      LDA	pfscore2
  14815  33b0		       0a		      asl
  14816  33b1		       09 01		      ORA	#1
  14817  33b3		       85 f3		      STA	pfscore2
  14818  33b5				   .skipL0710
  14819  33b5				   .
  14820  33b5							; 
  14821  33b5
  14822  33b5				   .
  14823  33b5							; 
  14824  33b5
  14825  33b5				   .
  14826  33b5							; 
  14827  33b5
  14828  33b5				   .
  14829  33b5							; 
  14830  33b5
  14831  33b5				   .L0711		;  if temp5  <  3 then goto __Top_3rd_Score_Test_Loop
  14832  33b5
  14833  33b5		       a5 a0		      LDA	temp5
  14834  33b7		       c9 03		      CMP	#3
  14835  33b9		       b0 03		      BCS	.skipL0711
  14836  33bb				   .condpart214
  14837  33bb		       4c 57 53 	      jmp	.__Top_3rd_Score_Test_Loop
  14838  33be
  14839  33be				   .skipL0711
  14840  33be				   .
  14841  33be							; 
  14842  33be
  14843  33be				   .L0712		;  goto __Skip_Clear_Can
  14844  33be
  14845  33be		       4c ab 54 	      jmp	.__Skip_Clear_Can
  14846  33c1
  14847  33c1				   .
  14848  33c1							; 
  14849  33c1
  14850  33c1				   .__Skip_Top_3rd
  14851  33c1							; __Skip_Top_3rd
  14852  33c1
  14853  33c1				   .
  14854  33c1							; 
  14855  33c1
  14856  33c1				   .
  14857  33c1							; 
  14858  33c1
  14859  33c1				   .
  14860  33c1							; 
  14861  33c1
  14862  33c1				   .
  14863  33c1							; 
  14864  33c1
  14865  33c1				   .
  14866  33c1							; 
  14867  33c1
  14868  33c1				   .
  14869  33c1							; 
  14870  33c1
  14871  33c1				   .
  14872  33c1							; 
  14873  33c1
  14874  33c1				   .
  14875  33c1							; 
  14876  33c1
  14877  33c1				   .L0713		;  if player1y  >  59 then goto __Skip_Middle_3rd
  14878  33c1
  14879  33c1		       a9 3b		      LDA	#59
  14880  33c3		       c5 86		      CMP	player1y
  14881  33c5		       b0 03		      BCS	.skipL0713
  14882  33c7				   .condpart215
  14883  33c7		       4c 4a 54 	      jmp	.__Skip_Middle_3rd
  14884  33ca
  14885  33ca				   .skipL0713
  14886  33ca				   .
  14887  33ca							; 
  14888  33ca
  14889  33ca				   .
  14890  33ca							; 
  14891  33ca
  14892  33ca				   .
  14893  33ca							; 
  14894  33ca
  14895  33ca				   .
  14896  33ca							; 
  14897  33ca
  14898  33ca				   .L0714		;  player1color:
  14899  33ca
  14900  33ca		       a2 4c		      LDX	#<playercolorL0714_1
  14901  33cc		       86 87		      STX	player1color
  14902  33ce		       a9 f9		      LDA	#>playercolorL0714_1
  14903  33d0		       85 88		      STA	player1color+1
  14904  33d2				   .
  14905  33d2							; 
  14906  33d2
  14907  33d2				   .
  14908  33d2							; 
  14909  33d2
  14910  33d2				   .
  14911  33d2							; 
  14912  33d2
  14913  33d2				   .
  14914  33d2							; 
  14915  33d2
  14916  33d2				   .L0715		;  if !collision(player1,player0) then goto __Canister_Section_End
  14917  33d2
  14918  33d2		       24 07		      bit	CXPPMM
  14919  33d4		       30 03		      BMI	.skipL0715
  14920  33d6				   .condpart216
  14921  33d6		       4c eb 54 	      jmp	.__Canister_Section_End
  14922  33d9
  14923  33d9				   .skipL0715
  14924  33d9				   .
  14925  33d9							; 
  14926  33d9
  14927  33d9				   .
  14928  33d9							; 
  14929  33d9
  14930  33d9				   .
  14931  33d9							; 
  14932  33d9
  14933  33d9				   .
  14934  33d9							; 
  14935  33d9
  14936  33d9				   .
  14937  33d9							; 
  14938  33d9
  14939  33d9				   .
  14940  33d9							; 
  14941  33d9
  14942  33d9				   .
  14943  33d9							; 
  14944  33d9
  14945  33d9				   .L0716		;  _Bit0_Game_Control{0}  =  0
  14946  33d9
  14947  33d9		       a5 d2		      LDA	_Bit0_Game_Control
  14948  33db		       29 fe		      AND	#254
  14949  33dd		       85 d2		      STA	_Bit0_Game_Control
  14950  33df				   .
  14951  33df							; 
  14952  33df
  14953  33df				   .
  14954  33df							; 
  14955  33df
  14956  33df				   .
  14957  33df							; 
  14958  33df
  14959  33df				   .
  14960  33df							; 
  14961  33df
  14962  33df				   .L0717		;  _Points_Roll_Up  =	_Points_Roll_Up  +  25
  14963  33df
  14964  33df		       a5 e5		      LDA	_Points_Roll_Up
  14965  33e1		       18		      CLC
  14966  33e2		       69 19		      ADC	#25
  14967  33e4		       85 e5		      STA	_Points_Roll_Up
  14968  33e6				   .
  14969  33e6							; 
  14970  33e6
  14971  33e6				   .
  14972  33e6							; 
  14973  33e6
  14974  33e6				   .
  14975  33e6							; 
  14976  33e6
  14977  33e6				   .
  14978  33e6							; 
  14979  33e6
  14980  33e6				   .L0718		;  _Bit5_Manatee_Health_Color{5}  =  1
  14981  33e6
  14982  33e6		       a5 c7		      LDA	_Bit5_Manatee_Health_Color
  14983  33e8		       09 20		      ORA	#32
  14984  33ea		       85 c7		      STA	_Bit5_Manatee_Health_Color
  14985  33ec				   .
  14986  33ec							; 
  14987  33ec
  14988  33ec				   .
  14989  33ec							; 
  14990  33ec
  14991  33ec				   .
  14992  33ec							; 
  14993  33ec
  14994  33ec				   .
  14995  33ec							; 
  14996  33ec
  14997  33ec				   .L0719		;  temp5  =  0
  14998  33ec
  14999  33ec		       a9 00		      LDA	#0
  15000  33ee		       85 a0		      STA	temp5
  15001  33f0				   .
  15002  33f0							; 
  15003  33f0
  15004  33f0				   .__Middle_3rd_Score_Test_Loop
  15005  33f0							; __Middle_3rd_Score_Test_Loop
  15006  33f0
  15007  33f0				   .
  15008  33f0							; 
  15009  33f0
  15010  33f0				   .
  15011  33f0							; 
  15012  33f0
  15013  33f0				   .
  15014  33f0							; 
  15015  33f0
  15016  33f0				   .
  15017  33f0							; 
  15018  33f0
  15019  33f0				   .L0720		;  temp5  =  temp5  +	1
  15020  33f0
  15021  33f0		       e6 a0		      INC	temp5
  15022  33f2				   .
  15023  33f2							; 
  15024  33f2
  15025  33f2				   .
  15026  33f2							; 
  15027  33f2
  15028  33f2				   .
  15029  33f2							; 
  15030  33f2
  15031  33f2				   .
  15032  33f2							; 
  15033  33f2
  15034  33f2				   .L0721		;  if pfscore2  =  255  &&  pfscore1  =  255 then goto __Middle_Both_Full
  15035  33f2
  15036  33f2		       a5 f3		      LDA	pfscore2
  15037  33f4		       c9 ff		      CMP	#255
  15038  33f6		       d0 09		      BNE	.skipL0721
  15039  33f8				   .condpart217
  15040  33f8		       a5 f2		      LDA	pfscore1
  15041  33fa		       c9 ff		      CMP	#255
  15042  33fc		       d0 03		      BNE	.skip217then
  15043  33fe				   .condpart218
  15044  33fe		       4c 04 54 	      jmp	.__Middle_Both_Full
  15045  3401
  15046  3401				   .skip217then
  15047  3401				   .skipL0721
  15048  3401				   .
  15049  3401							; 
  15050  3401
  15051  3401				   .L0722		;  goto __Skip_Middle_Both_Full
  15052  3401
  15053  3401		       4c 1e 54 	      jmp	.__Skip_Middle_Both_Full
  15054  3404
  15055  3404				   .
  15056  3404							; 
  15057  3404
  15058  3404				   .__Middle_Both_Full
  15059  3404							; __Middle_Both_Full
  15060  3404
  15061  3404				   .
  15062  3404							; 
  15063  3404
  15064  3404				   .
  15065  3404							; 
  15066  3404
  15067  3404				   .
  15068  3404							; 
  15069  3404
  15070  3404				   .
  15071  3404							; 
  15072  3404
  15073  3404				   .L0723		;  if temp5  =  1 then _Points_Roll_Up  =  _Points_Roll_Up  +	10  :  goto __Skip_Clear_Can
  15074  3404
  15075  3404		       a5 a0		      LDA	temp5
  15076  3406		       c9 01		      CMP	#1
  15077  3408		       d0 0a		      BNE	.skipL0723
  15078  340a				   .condpart219
  15079  340a		       a5 e5		      LDA	_Points_Roll_Up
  15080  340c		       18		      CLC
  15081  340d		       69 0a		      ADC	#10
  15082  340f		       85 e5		      STA	_Points_Roll_Up
  15083  3411		       4c ab 54 	      jmp	.__Skip_Clear_Can
  15084  3414
  15085  3414				   .skipL0723
  15086  3414				   .
  15087  3414							; 
  15088  3414
  15089  3414				   .L0724		;  _Points_Roll_Up  =	_Points_Roll_Up  +  5  :  goto __Skip_Clear_Can
  15090  3414
  15091  3414		       a5 e5		      LDA	_Points_Roll_Up
  15092  3416		       18		      CLC
  15093  3417		       69 05		      ADC	#5
  15094  3419		       85 e5		      STA	_Points_Roll_Up
  15095  341b		       4c ab 54 	      jmp	.__Skip_Clear_Can
  15096  341e
  15097  341e				   .
  15098  341e							; 
  15099  341e
  15100  341e				   .__Skip_Middle_Both_Full
  15101  341e							; __Skip_Middle_Both_Full
  15102  341e
  15103  341e				   .
  15104  341e							; 
  15105  341e
  15106  341e				   .
  15107  341e							; 
  15108  341e
  15109  341e				   .
  15110  341e							; 
  15111  341e
  15112  341e				   .
  15113  341e							; 
  15114  341e
  15115  341e				   .
  15116  341e							; 
  15117  341e
  15118  341e				   .L0725		;  if pfscore2  =  255 then if pfscore1  <=  127 then pfscore1  =  pfscore1 * 2 | 1
  15119  341e
  15120  341e		       a5 f3		      LDA	pfscore2
  15121  3420		       c9 ff		      CMP	#255
  15122  3422		       d0 0d		      BNE	.skipL0725
  15123  3424				   .condpart220
  15124  3424		       a9 7f		      LDA	#127
  15125  3426		       c5 f2		      CMP	pfscore1
  15126  3428		       90 07		      BCC	.skip220then
  15127  342a				   .condpart221
  15128  342a							; complex statement detected
  15129  342a		       a5 f2		      LDA	pfscore1
  15130  342c		       0a		      asl
  15131  342d		       09 01		      ORA	#1
  15132  342f		       85 f2		      STA	pfscore1
  15133  3431				   .skip220then
  15134  3431				   .skipL0725
  15135  3431				   .
  15136  3431							; 
  15137  3431
  15138  3431				   .
  15139  3431							; 
  15140  3431
  15141  3431				   .
  15142  3431							; 
  15143  3431
  15144  3431				   .
  15145  3431							; 
  15146  3431
  15147  3431				   .L0726		;  if pfscore2  <  128 then pfscore2  =  pfscore2 * 2 | 1
  15148  3431
  15149  3431		       a5 f3		      LDA	pfscore2
  15150  3433		       c9 80		      CMP	#128
  15151  3435		       b0 07		      BCS	.skipL0726
  15152  3437				   .condpart222
  15153  3437							; complex statement detected
  15154  3437		       a5 f3		      LDA	pfscore2
  15155  3439		       0a		      asl
  15156  343a		       09 01		      ORA	#1
  15157  343c		       85 f3		      STA	pfscore2
  15158  343e				   .skipL0726
  15159  343e				   .
  15160  343e							; 
  15161  343e
  15162  343e				   .
  15163  343e							; 
  15164  343e
  15165  343e				   .
  15166  343e							; 
  15167  343e
  15168  343e				   .
  15169  343e							; 
  15170  343e
  15171  343e				   .L0727		;  if temp5  <  2 then goto __Middle_3rd_Score_Test_Loop
  15172  343e
  15173  343e		       a5 a0		      LDA	temp5
  15174  3440		       c9 02		      CMP	#2
  15175  3442		       b0 03		      BCS	.skipL0727
  15176  3444				   .condpart223
  15177  3444		       4c f0 53 	      jmp	.__Middle_3rd_Score_Test_Loop
  15178  3447
  15179  3447				   .skipL0727
  15180  3447				   .
  15181  3447							; 
  15182  3447
  15183  3447				   .L0728		;  goto __Skip_Clear_Can
  15184  3447
  15185  3447		       4c ab 54 	      jmp	.__Skip_Clear_Can
  15186  344a
  15187  344a				   .
  15188  344a							; 
  15189  344a
  15190  344a				   .__Skip_Middle_3rd
  15191  344a							; __Skip_Middle_3rd
  15192  344a
  15193  344a				   .
  15194  344a							; 
  15195  344a
  15196  344a				   .
  15197  344a							; 
  15198  344a
  15199  344a				   .
  15200  344a							; 
  15201  344a
  15202  344a				   .
  15203  344a							; 
  15204  344a
  15205  344a				   .
  15206  344a							; 
  15207  344a
  15208  344a				   .
  15209  344a							; 
  15210  344a
  15211  344a				   .
  15212  344a							; 
  15213  344a
  15214  344a				   .
  15215  344a							; 
  15216  344a
  15217  344a				   .L0729		;  if player1y  <  60 then goto __Canister_Section_End
  15218  344a
  15219  344a		       a5 86		      LDA	player1y
  15220  344c		       c9 3c		      CMP	#60
  15221  344e		       b0 03		      BCS	.skipL0729
  15222  3450				   .condpart224
  15223  3450		       4c eb 54 	      jmp	.__Canister_Section_End
  15224  3453
  15225  3453				   .skipL0729
  15226  3453				   .
  15227  3453							; 
  15228  3453
  15229  3453				   .
  15230  3453							; 
  15231  3453
  15232  3453				   .
  15233  3453							; 
  15234  3453
  15235  3453				   .
  15236  3453							; 
  15237  3453
  15238  3453				   .L0730		;  player1color:
  15239  3453
  15240  3453		       a2 52		      LDX	#<playercolorL0730_1
  15241  3455		       86 87		      STX	player1color
  15242  3457		       a9 f9		      LDA	#>playercolorL0730_1
  15243  3459		       85 88		      STA	player1color+1
  15244  345b				   .
  15245  345b							; 
  15246  345b
  15247  345b				   .
  15248  345b							; 
  15249  345b
  15250  345b				   .
  15251  345b							; 
  15252  345b
  15253  345b				   .
  15254  345b							; 
  15255  345b
  15256  345b				   .L0731		;  if !collision(player1,player0) then goto __Canister_Section_End
  15257  345b
  15258  345b		       24 07		      bit	CXPPMM
  15259  345d		       30 03		      BMI	.skipL0731
  15260  345f				   .condpart225
  15261  345f		       4c eb 54 	      jmp	.__Canister_Section_End
  15262  3462
  15263  3462				   .skipL0731
  15264  3462				   .
  15265  3462							; 
  15266  3462
  15267  3462				   .
  15268  3462							; 
  15269  3462
  15270  3462				   .
  15271  3462							; 
  15272  3462
  15273  3462				   .
  15274  3462							; 
  15275  3462
  15276  3462				   .
  15277  3462							; 
  15278  3462
  15279  3462				   .
  15280  3462							; 
  15281  3462
  15282  3462				   .
  15283  3462							; 
  15284  3462
  15285  3462				   .L0732		;  _Bit0_Game_Control{0}  =  0
  15286  3462
  15287  3462		       a5 d2		      LDA	_Bit0_Game_Control
  15288  3464		       29 fe		      AND	#254
  15289  3466		       85 d2		      STA	_Bit0_Game_Control
  15290  3468				   .
  15291  3468							; 
  15292  3468
  15293  3468				   .
  15294  3468							; 
  15295  3468
  15296  3468				   .
  15297  3468							; 
  15298  3468
  15299  3468				   .
  15300  3468							; 
  15301  3468
  15302  3468				   .L0733		;  _Points_Roll_Up  =	_Points_Roll_Up  +  10
  15303  3468
  15304  3468		       a5 e5		      LDA	_Points_Roll_Up
  15305  346a		       18		      CLC
  15306  346b		       69 0a		      ADC	#10
  15307  346d		       85 e5		      STA	_Points_Roll_Up
  15308  346f				   .
  15309  346f							; 
  15310  346f
  15311  346f				   .
  15312  346f							; 
  15313  346f
  15314  346f				   .
  15315  346f							; 
  15316  346f
  15317  346f				   .
  15318  346f							; 
  15319  346f
  15320  346f				   .L0734		;  _Bit5_Manatee_Health_Color{5}  =  1
  15321  346f
  15322  346f		       a5 c7		      LDA	_Bit5_Manatee_Health_Color
  15323  3471		       09 20		      ORA	#32
  15324  3473		       85 c7		      STA	_Bit5_Manatee_Health_Color
  15325  3475				   .
  15326  3475							; 
  15327  3475
  15328  3475				   .
  15329  3475							; 
  15330  3475
  15331  3475				   .
  15332  3475							; 
  15333  3475
  15334  3475				   .
  15335  3475							; 
  15336  3475
  15337  3475				   .L0735		;  if pfscore2  =  255  &&  pfscore1  =  255 then _Points_Roll_Up  =  _Points_Roll_Up	+  5  :  goto __Skip_Clear_Can
  15338  3475
  15339  3475		       a5 f3		      LDA	pfscore2
  15340  3477		       c9 ff		      CMP	#255
  15341  3479		       d0 10		      BNE	.skipL0735
  15342  347b				   .condpart226
  15343  347b		       a5 f2		      LDA	pfscore1
  15344  347d		       c9 ff		      CMP	#255
  15345  347f		       d0 0a		      BNE	.skip226then
  15346  3481				   .condpart227
  15347  3481		       a5 e5		      LDA	_Points_Roll_Up
  15348  3483		       18		      CLC
  15349  3484		       69 05		      ADC	#5
  15350  3486		       85 e5		      STA	_Points_Roll_Up
  15351  3488		       4c ab 54 	      jmp	.__Skip_Clear_Can
  15352  348b
  15353  348b				   .skip226then
  15354  348b				   .skipL0735
  15355  348b				   .
  15356  348b							; 
  15357  348b
  15358  348b				   .
  15359  348b							; 
  15360  348b
  15361  348b				   .
  15362  348b							; 
  15363  348b
  15364  348b				   .
  15365  348b							; 
  15366  348b
  15367  348b				   .
  15368  348b							; 
  15369  348b
  15370  348b				   .L0736		;  if pfscore2  =  255 then if pfscore1  <=  127 then pfscore1  =  pfscore1 * 2 | 1
  15371  348b
  15372  348b		       a5 f3		      LDA	pfscore2
  15373  348d		       c9 ff		      CMP	#255
  15374  348f		       d0 0d		      BNE	.skipL0736
  15375  3491				   .condpart228
  15376  3491		       a9 7f		      LDA	#127
  15377  3493		       c5 f2		      CMP	pfscore1
  15378  3495		       90 07		      BCC	.skip228then
  15379  3497				   .condpart229
  15380  3497							; complex statement detected
  15381  3497		       a5 f2		      LDA	pfscore1
  15382  3499		       0a		      asl
  15383  349a		       09 01		      ORA	#1
  15384  349c		       85 f2		      STA	pfscore1
  15385  349e				   .skip228then
  15386  349e				   .skipL0736
  15387  349e				   .
  15388  349e							; 
  15389  349e
  15390  349e				   .
  15391  349e							; 
  15392  349e
  15393  349e				   .
  15394  349e							; 
  15395  349e
  15396  349e				   .
  15397  349e							; 
  15398  349e
  15399  349e				   .L0737		;  if pfscore2  <  128 then pfscore2  =  pfscore2 * 2 | 1
  15400  349e
  15401  349e		       a5 f3		      LDA	pfscore2
  15402  34a0		       c9 80		      CMP	#128
  15403  34a2		       b0 07		      BCS	.skipL0737
  15404  34a4				   .condpart230
  15405  34a4							; complex statement detected
  15406  34a4		       a5 f3		      LDA	pfscore2
  15407  34a6		       0a		      asl
  15408  34a7		       09 01		      ORA	#1
  15409  34a9		       85 f3		      STA	pfscore2
  15410  34ab				   .skipL0737
  15411  34ab				   .
  15412  34ab							; 
  15413  34ab
  15414  34ab				   .
  15415  34ab							; 
  15416  34ab
  15417  34ab				   .__Skip_Clear_Can
  15418  34ab							; __Skip_Clear_Can
  15419  34ab
  15420  34ab				   .
  15421  34ab							; 
  15422  34ab
  15423  34ab				   .
  15424  34ab							; 
  15425  34ab
  15426  34ab				   .
  15427  34ab							; 
  15428  34ab
  15429  34ab				   .
  15430  34ab							; 
  15431  34ab
  15432  34ab				   .L0738		;  if pfscore2  >  15 then pfscorecolor  =  $AE
  15433  34ab
  15434  34ab		       a9 0f		      LDA	#15
  15435  34ad		       c5 f3		      CMP	pfscore2
  15436  34af		       b0 04		      BCS	.skipL0738
  15437  34b1				   .condpart231
  15438  34b1		       a9 ae		      LDA	#$AE
  15439  34b3		       85 f4		      STA	pfscorecolor
  15440  34b5				   .skipL0738
  15441  34b5				   .
  15442  34b5							; 
  15443  34b5
  15444  34b5				   .L0739		;  if pfscore2  <  16 then pfscorecolor  =  $1C
  15445  34b5
  15446  34b5		       a5 f3		      LDA	pfscore2
  15447  34b7		       c9 10		      CMP	#16
  15448  34b9		       b0 04		      BCS	.skipL0739
  15449  34bb				   .condpart232
  15450  34bb		       a9 1c		      LDA	#$1C
  15451  34bd		       85 f4		      STA	pfscorecolor
  15452  34bf				   .skipL0739
  15453  34bf				   .
  15454  34bf							; 
  15455  34bf
  15456  34bf				   .L0740		;  if pfscore2  <  3 then pfscorecolor  =  $32
  15457  34bf
  15458  34bf		       a5 f3		      LDA	pfscore2
  15459  34c1		       c9 03		      CMP	#3
  15460  34c3		       b0 04		      BCS	.skipL0740
  15461  34c5				   .condpart233
  15462  34c5		       a9 32		      LDA	#$32
  15463  34c7		       85 f4		      STA	pfscorecolor
  15464  34c9				   .skipL0740
  15465  34c9				   .
  15466  34c9							; 
  15467  34c9
  15468  34c9				   .
  15469  34c9							; 
  15470  34c9
  15471  34c9				   .
  15472  34c9							; 
  15473  34c9
  15474  34c9				   .
  15475  34c9							; 
  15476  34c9
  15477  34c9				   .L0741		;  _Ch1_Sound	=  _c_Canister_Touched	:  _Ch1_Counter  =  0  :  _Ch1_Duration  =  1
  15478  34c9
  15479  34c9		       a9 05		      LDA	#_c_Canister_Touched
  15480  34cb		       85 dd		      STA	_Ch1_Sound
  15481  34cd		       a9 00		      LDA	#0
  15482  34cf		       85 df		      STA	_Ch1_Counter
  15483  34d1		       a9 01		      LDA	#1
  15484  34d3		       85 de		      STA	_Ch1_Duration
  15485  34d5				   .
  15486  34d5							; 
  15487  34d5
  15488  34d5				   .__Canister_Off_Screen
  15489  34d5							; __Canister_Off_Screen
  15490  34d5
  15491  34d5				   .
  15492  34d5							; 
  15493  34d5
  15494  34d5				   .
  15495  34d5							; 
  15496  34d5
  15497  34d5				   .
  15498  34d5							; 
  15499  34d5
  15500  34d5				   .
  15501  34d5							; 
  15502  34d5
  15503  34d5				   .L0742		;  player1y  =  200
  15504  34d5
  15505  34d5		       a9 c8		      LDA	#200
  15506  34d7		       85 86		      STA	player1y
  15507  34d9				   .
  15508  34d9							; 
  15509  34d9
  15510  34d9				   .
  15511  34d9							; 
  15512  34d9
  15513  34d9				   .
  15514  34d9							; 
  15515  34d9
  15516  34d9				   .
  15517  34d9							; 
  15518  34d9
  15519  34d9				   .L0743		;  _Bit0_Canister_P1_On{0}  =	0
  15520  34d9
  15521  34d9		       a5 c5		      LDA	_Bit0_Canister_P1_On
  15522  34db		       29 fe		      AND	#254
  15523  34dd		       85 c5		      STA	_Bit0_Canister_P1_On
  15524  34df				   .
  15525  34df							; 
  15526  34df
  15527  34df				   .
  15528  34df							; 
  15529  34df
  15530  34df				   .
  15531  34df							; 
  15532  34df
  15533  34df				   .
  15534  34df							; 
  15535  34df
  15536  34df				   .L0744		;  if _Bit4_Bonus_500_On{4} then _Bit4_Bonus_500_On{4}  =  0
  15537  34df
  15538  34df		       a5 c5		      LDA	_Bit4_Bonus_500_On
  15539  34e1		       29 10		      AND	#16
  15540  34e3		       f0 06		      BEQ	.skipL0744
  15541  34e5				   .condpart234
  15542  34e5		       a5 c5		      LDA	_Bit4_Bonus_500_On
  15543  34e7		       29 ef		      AND	#239
  15544  34e9		       85 c5		      STA	_Bit4_Bonus_500_On
  15545  34eb				   .skipL0744
  15546  34eb				   .
  15547  34eb							; 
  15548  34eb
  15549  34eb				   .
  15550  34eb							; 
  15551  34eb
  15552  34eb				   .__Canister_Section_End
  15553  34eb							; __Canister_Section_End
  15554  34eb
  15555  34eb				   .
  15556  34eb							; 
  15557  34eb
  15558  34eb				   .
  15559  34eb							; 
  15560  34eb
  15561  34eb				   .
  15562  34eb							; 
  15563  34eb
  15564  34eb				   .
  15565  34eb							; 
  15566  34eb
  15567  34eb				   .
  15568  34eb							; 
  15569  34eb
  15570  34eb				   .
  15571  34eb							; 
  15572  34eb
  15573  34eb				   .
  15574  34eb							; 
  15575  34eb
  15576  34eb				   .
  15577  34eb							; 
  15578  34eb
  15579  34eb				   .
  15580  34eb							; 
  15581  34eb
  15582  34eb				   .
  15583  34eb							; 
  15584  34eb
  15585  34eb				   .L0745		;  if _Bit0_Canister_P1_On{0} then goto __Skip_Enemy_Drop
  15586  34eb
  15587  34eb		       a5 c5		      LDA	_Bit0_Canister_P1_On
  15588  34ed		       4a		      LSR
  15589  34ee		       90 03		      BCC	.skipL0745
  15590  34f0				   .condpart235
  15591  34f0		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  15592  34f3
  15593  34f3				   .skipL0745
  15594  34f3				   .
  15595  34f3							; 
  15596  34f3
  15597  34f3				   .
  15598  34f3							; 
  15599  34f3
  15600  34f3				   .
  15601  34f3							; 
  15602  34f3
  15603  34f3				   .
  15604  34f3							; 
  15605  34f3
  15606  34f3				   .
  15607  34f3							; 
  15608  34f3
  15609  34f3				   .L0746		;  if _Bit2_Corrdd_Can_On{2} then goto __Skip_Enemy_Drop
  15610  34f3
  15611  34f3		       a5 c6		      LDA	_Bit2_Corrdd_Can_On
  15612  34f5		       29 04		      AND	#4
  15613  34f7		       f0 03		      BEQ	.skipL0746
  15614  34f9				   .condpart236
  15615  34f9		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  15616  34fc
  15617  34fc				   .skipL0746
  15618  34fc				   .
  15619  34fc							; 
  15620  34fc
  15621  34fc				   .L0747		;  if _Ch1_Sound  =  _c_Corroded_Hit_Ship then goto __Skip_Enemy_Drop
  15622  34fc
  15623  34fc		       a5 dd		      LDA	_Ch1_Sound
  15624  34fe		       c9 09		      CMP	#_c_Corroded_Hit_Ship
  15625  3500		       d0 03		      BNE	.skipL0747
  15626  3502				   .condpart237
  15627  3502		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  15628  3505
  15629  3505				   .skipL0747
  15630  3505				   .
  15631  3505							; 
  15632  3505
  15633  3505				   .L0748		;  if _Ch1_Sound  =  _c_Canister_Touched then goto __Skip_Enemy_Drop
  15634  3505
  15635  3505		       a5 dd		      LDA	_Ch1_Sound
  15636  3507		       c9 05		      CMP	#_c_Canister_Touched
  15637  3509		       d0 03		      BNE	.skipL0748
  15638  350b				   .condpart238
  15639  350b		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  15640  350e
  15641  350e				   .skipL0748
  15642  350e				   .
  15643  350e							; 
  15644  350e
  15645  350e				   .L0749		;  if _Ch1_Sound  =  _c_Corroded_Seaweed_Moosh then goto __Skip_Enemy_Drop
  15646  350e
  15647  350e		       a5 dd		      LDA	_Ch1_Sound
  15648  3510		       c9 07		      CMP	#_c_Corroded_Seaweed_Moosh
  15649  3512		       d0 03		      BNE	.skipL0749
  15650  3514				   .condpart239
  15651  3514		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  15652  3517
  15653  3517				   .skipL0749
  15654  3517				   .
  15655  3517							; 
  15656  3517
  15657  3517				   .
  15658  3517							; 
  15659  3517
  15660  3517				   .
  15661  3517							; 
  15662  3517
  15663  3517				   .
  15664  3517							; 
  15665  3517
  15666  3517				   .L0750		;  if _Bit1_Wrothopod_On{1} then goto __Wrothopod_Move
  15667  3517
  15668  3517		       a5 c5		      LDA	_Bit1_Wrothopod_On
  15669  3519		       29 02		      AND	#2
  15670  351b		       f0 03		      BEQ	.skipL0750
  15671  351d				   .condpart240
  15672  351d		       4c 7a 56 	      jmp	.__Wrothopod_Move
  15673  3520
  15674  3520				   .skipL0750
  15675  3520				   .
  15676  3520							; 
  15677  3520
  15678  3520				   .
  15679  3520							; 
  15680  3520
  15681  3520				   .
  15682  3520							; 
  15683  3520
  15684  3520				   .
  15685  3520							; 
  15686  3520
  15687  3520				   .L0751		;  if _Wrothopod_Counter  <  37 then goto __Skip_Enemy_Drop
  15688  3520
  15689  3520		       a5 e7		      LDA	_Wrothopod_Counter
  15690  3522		       c9 25		      CMP	#37
  15691  3524		       b0 03		      BCS	.skipL0751
  15692  3526				   .condpart241
  15693  3526		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  15694  3529
  15695  3529				   .skipL0751
  15696  3529				   .
  15697  3529							; 
  15698  3529
  15699  3529				   .
  15700  3529							; 
  15701  3529
  15702  3529				   .
  15703  3529							; 
  15704  3529
  15705  3529				   .
  15706  3529							; 
  15707  3529
  15708  3529				   .L0752		;  if pfscore2  >  2 then temp5  =  rand  :  temp4  =	_Plop_Rate  *  4  :  temp6  =  86  -  temp4
  15709  3529
  15710  3529		       a9 02		      LDA	#2
  15711  352b		       c5 f3		      CMP	pfscore2
  15712  352d		       b0 1c		      BCS	.skipL0752
  15713  352f				   .condpart242
  15714  352f		       a5 a2		      lda	rand
  15715  3531		       4a		      lsr
  15716  3532					      ifconst	rand16
  15717  3532		       26 d3		      rol	rand16
  15718  3534					      endif
  15719  3534		       90 02		      bcc	*+4
  15720  3536		       49 b4		      eor	#$B4
  15721  3538		       85 a2		      sta	rand
  15722  353a					      ifconst	rand16
  15723  353a		       45 d3		      eor	rand16
  15724  353c					      endif
  15725  353c		       85 a0		      STA	temp5
  15726  353e		       a5 e3		      LDA	_Plop_Rate
  15727  3540		       0a		      asl
  15728  3541		       0a		      asl
  15729  3542		       85 9f		      STA	temp4
  15730  3544		       a9 56		      LDA	#86
  15731  3546		       38		      SEC
  15732  3547		       e5 9f		      SBC	temp4
  15733  3549		       85 a1		      STA	temp6
  15734  354b				   .skipL0752
  15735  354b				   .
  15736  354b							; 
  15737  354b
  15738  354b				   .L0753		;  if pfscore2  <  3 then temp5  =  rand  :  temp4  =	_Plop_Rate  *  2  :  temp6  =  86  -  temp4
  15739  354b
  15740  354b		       a5 f3		      LDA	pfscore2
  15741  354d		       c9 03		      CMP	#3
  15742  354f		       b0 1b		      BCS	.skipL0753
  15743  3551				   .condpart243
  15744  3551		       a5 a2		      lda	rand
  15745  3553		       4a		      lsr
  15746  3554					      ifconst	rand16
  15747  3554		       26 d3		      rol	rand16
  15748  3556					      endif
  15749  3556		       90 02		      bcc	*+4
  15750  3558		       49 b4		      eor	#$B4
  15751  355a		       85 a2		      sta	rand
  15752  355c					      ifconst	rand16
  15753  355c		       45 d3		      eor	rand16
  15754  355e					      endif
  15755  355e		       85 a0		      STA	temp5
  15756  3560		       a5 e3		      LDA	_Plop_Rate
  15757  3562		       0a		      asl
  15758  3563		       85 9f		      STA	temp4
  15759  3565		       a9 56		      LDA	#86
  15760  3567		       38		      SEC
  15761  3568		       e5 9f		      SBC	temp4
  15762  356a		       85 a1		      STA	temp6
  15763  356c				   .skipL0753
  15764  356c				   .
  15765  356c							; 
  15766  356c
  15767  356c				   .
  15768  356c							; 
  15769  356c
  15770  356c				   .
  15771  356c							; 
  15772  356c
  15773  356c				   .
  15774  356c							; 
  15775  356c
  15776  356c				   .L0754		;  if temp5  >  temp6 then goto __Skip_Enemy_Drop
  15777  356c
  15778  356c		       a5 a1		      LDA	temp6
  15779  356e		       c5 a0		      CMP	temp5
  15780  3570		       b0 03		      BCS	.skipL0754
  15781  3572				   .condpart244
  15782  3572		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  15783  3575
  15784  3575				   .skipL0754
  15785  3575				   .
  15786  3575							; 
  15787  3575
  15788  3575				   .
  15789  3575							; 
  15790  3575
  15791  3575				   .
  15792  3575							; 
  15793  3575
  15794  3575				   .
  15795  3575							; 
  15796  3575
  15797  3575				   .L0755		;  _Bit1_Wrothopod_On{1}  =  1  :  player1y  =  0
  15798  3575
  15799  3575		       a5 c5		      LDA	_Bit1_Wrothopod_On
  15800  3577		       09 02		      ORA	#2
  15801  3579		       85 c5		      STA	_Bit1_Wrothopod_On
  15802  357b		       a9 00		      LDA	#0
  15803  357d		       85 86		      STA	player1y
  15804  357f				   .
  15805  357f							; 
  15806  357f
  15807  357f				   .
  15808  357f							; 
  15809  357f
  15810  357f				   .
  15811  357f							; 
  15812  357f
  15813  357f				   .
  15814  357f							; 
  15815  357f
  15816  357f				   .L0756		;  temp5  =   ( rand & 31 ) 
  15817  357f
  15818  357f							; complex statement detected
  15819  357f		       a5 a2		      lda	rand
  15820  3581		       4a		      lsr
  15821  3582					      ifconst	rand16
  15822  3582		       26 d3		      rol	rand16
  15823  3584					      endif
  15824  3584		       90 02		      bcc	*+4
  15825  3586		       49 b4		      eor	#$B4
  15826  3588		       85 a2		      sta	rand
  15827  358a					      ifconst	rand16
  15828  358a		       45 d3		      eor	rand16
  15829  358c					      endif
  15830  358c		       29 1f		      AND	#31
  15831  358e		       85 a0		      STA	temp5
  15832  3590				   .
  15833  3590							; 
  15834  3590
  15835  3590				   .
  15836  3590							; 
  15837  3590
  15838  3590				   .
  15839  3590							; 
  15840  3590
  15841  3590				   .
  15842  3590							; 
  15843  3590
  15844  3590				   .L0757		;  if _Wroth_Color_Mem  <>  temp5 then goto __Skip_Wroth_Repeat_Check
  15845  3590
  15846  3590		       a5 b5		      LDA	_Wroth_Color_Mem
  15847  3592		       c5 a0		      CMP	temp5
  15848  3594		       f0 03		      BEQ	.skipL0757
  15849  3596				   .condpart245
  15850  3596		       4c a5 55 	      jmp	.__Skip_Wroth_Repeat_Check
  15851  3599
  15852  3599				   .skipL0757
  15853  3599				   .
  15854  3599							; 
  15855  3599
  15856  3599				   .
  15857  3599							; 
  15858  3599
  15859  3599				   .
  15860  3599							; 
  15861  3599
  15862  3599				   .
  15863  3599							; 
  15864  3599
  15865  3599				   .L0758		;  temp5  =  temp5  +	1
  15866  3599
  15867  3599		       e6 a0		      INC	temp5
  15868  359b				   .
  15869  359b							; 
  15870  359b
  15871  359b				   .
  15872  359b							; 
  15873  359b
  15874  359b				   .
  15875  359b							; 
  15876  359b
  15877  359b				   .
  15878  359b							; 
  15879  359b
  15880  359b				   .L0759		;  if temp5  >  31 then temp5	=  0
  15881  359b
  15882  359b		       a9 1f		      LDA	#31
  15883  359d		       c5 a0		      CMP	temp5
  15884  359f		       b0 04		      BCS	.skipL0759
  15885  35a1				   .condpart246
  15886  35a1		       a9 00		      LDA	#0
  15887  35a3		       85 a0		      STA	temp5
  15888  35a5				   .skipL0759
  15889  35a5				   .
  15890  35a5							; 
  15891  35a5
  15892  35a5				   .__Skip_Wroth_Repeat_Check
  15893  35a5							; __Skip_Wroth_Repeat_Check
  15894  35a5
  15895  35a5				   .
  15896  35a5							; 
  15897  35a5
  15898  35a5				   .
  15899  35a5							; 
  15900  35a5
  15901  35a5				   .
  15902  35a5							; 
  15903  35a5
  15904  35a5				   .
  15905  35a5							; 
  15906  35a5
  15907  35a5				   .L0760		;  _Wroth_Color_Mem  =  temp5
  15908  35a5
  15909  35a5		       a5 a0		      LDA	temp5
  15910  35a7		       85 b5		      STA	_Wroth_Color_Mem
  15911  35a9				   .
  15912  35a9							; 
  15913  35a9
  15914  35a9				   .
  15915  35a9							; 
  15916  35a9
  15917  35a9				   .
  15918  35a9							; 
  15919  35a9
  15920  35a9				   .
  15921  35a9							; 
  15922  35a9
  15923  35a9				   .L0761		;  if temp5  <  10 then on temp5 goto __W_Clr_0 __W_Clr_1 __W_Clr_2 __W_Clr_3 __W_Clr_4 __W_Clr_5 __W_Clr_6 __W_Clr_7 __W_Clr_8 __W_Clr_9
  15924  35a9
  15925  35a9		       a5 a0		      LDA	temp5
  15926  35ab		       c9 0a		      CMP	#10
  15927  35ad		       b0 1f		      BCS	.skipL0761
  15928  35af				   .condpart247
  15929  35af		       a6 a0		      LDX	temp5
  15930  35b1		       bd ba 55 	      LDA	.247thenjumptablehi,x
  15931  35b4		       48		      PHA
  15932  35b5		       bd c4 55 	      LDA	.247thenjumptablelo,x
  15933  35b8		       48		      PHA
  15934  35b9		       60		      RTS
  15935  35ba				   .247thenjumptablehi
  15936  35ba		       5d		      .byte.b	>(.__W_Clr_0-1)
  15937  35bb		       5d		      .byte.b	>(.__W_Clr_1-1)
  15938  35bc		       5d		      .byte.b	>(.__W_Clr_2-1)
  15939  35bd		       5d		      .byte.b	>(.__W_Clr_3-1)
  15940  35be		       5d		      .byte.b	>(.__W_Clr_4-1)
  15941  35bf		       5d		      .byte.b	>(.__W_Clr_5-1)
  15942  35c0		       5d		      .byte.b	>(.__W_Clr_6-1)
  15943  35c1		       5d		      .byte.b	>(.__W_Clr_7-1)
  15944  35c2		       5d		      .byte.b	>(.__W_Clr_8-1)
  15945  35c3		       5d		      .byte.b	>(.__W_Clr_9-1)
  15946  35c4				   .247thenjumptablelo
  15947  35c4		       67		      .byte.b	<(.__W_Clr_0-1)
  15948  35c5		       72		      .byte.b	<(.__W_Clr_1-1)
  15949  35c6		       7d		      .byte.b	<(.__W_Clr_2-1)
  15950  35c7		       88		      .byte.b	<(.__W_Clr_3-1)
  15951  35c8		       93		      .byte.b	<(.__W_Clr_4-1)
  15952  35c9		       9e		      .byte.b	<(.__W_Clr_5-1)
  15953  35ca		       a9		      .byte.b	<(.__W_Clr_6-1)
  15954  35cb		       b4		      .byte.b	<(.__W_Clr_7-1)
  15955  35cc		       bf		      .byte.b	<(.__W_Clr_8-1)
  15956  35cd		       ca		      .byte.b	<(.__W_Clr_9-1)
  15957  35ce				   .skipL0761
  15958  35ce				   .
  15959  35ce							; 
  15960  35ce
  15961  35ce				   .L0762		;  temp6  =  temp5  -	10
  15962  35ce
  15963  35ce		       a5 a0		      LDA	temp5
  15964  35d0		       38		      SEC
  15965  35d1		       e9 0a		      SBC	#10
  15966  35d3		       85 a1		      STA	temp6
  15967  35d5				   .
  15968  35d5							; 
  15969  35d5
  15970  35d5				   .L0763		;  if temp6  <  10 then on temp6 goto __W_Clr_10 __W_Clr_11 __W_Clr_12 __W_Clr_13 __W_Clr_14 __W_Clr_15 __W_Clr_16 __W_Clr_17 __W_Clr_18 __W_Clr_19
  15971  35d5
  15972  35d5		       a5 a1		      LDA	temp6
  15973  35d7		       c9 0a		      CMP	#10
  15974  35d9		       b0 1f		      BCS	.skipL0763
  15975  35db				   .condpart248
  15976  35db		       a6 a1		      LDX	temp6
  15977  35dd		       bd e6 55 	      LDA	.248thenjumptablehi,x
  15978  35e0		       48		      PHA
  15979  35e1		       bd f0 55 	      LDA	.248thenjumptablelo,x
  15980  35e4		       48		      PHA
  15981  35e5		       60		      RTS
  15982  35e6				   .248thenjumptablehi
  15983  35e6		       5d		      .byte.b	>(.__W_Clr_10-1)
  15984  35e7		       5d		      .byte.b	>(.__W_Clr_11-1)
  15985  35e8		       5d		      .byte.b	>(.__W_Clr_12-1)
  15986  35e9		       5d		      .byte.b	>(.__W_Clr_13-1)
  15987  35ea		       5e		      .byte.b	>(.__W_Clr_14-1)
  15988  35eb		       5e		      .byte.b	>(.__W_Clr_15-1)
  15989  35ec		       5e		      .byte.b	>(.__W_Clr_16-1)
  15990  35ed		       5e		      .byte.b	>(.__W_Clr_17-1)
  15991  35ee		       5e		      .byte.b	>(.__W_Clr_18-1)
  15992  35ef		       5e		      .byte.b	>(.__W_Clr_19-1)
  15993  35f0				   .248thenjumptablelo
  15994  35f0		       d5		      .byte.b	<(.__W_Clr_10-1)
  15995  35f1		       e0		      .byte.b	<(.__W_Clr_11-1)
  15996  35f2		       eb		      .byte.b	<(.__W_Clr_12-1)
  15997  35f3		       f6		      .byte.b	<(.__W_Clr_13-1)
  15998  35f4		       01		      .byte.b	<(.__W_Clr_14-1)
  15999  35f5		       0c		      .byte.b	<(.__W_Clr_15-1)
  16000  35f6		       17		      .byte.b	<(.__W_Clr_16-1)
  16001  35f7		       22		      .byte.b	<(.__W_Clr_17-1)
  16002  35f8		       2d		      .byte.b	<(.__W_Clr_18-1)
  16003  35f9		       38		      .byte.b	<(.__W_Clr_19-1)
  16004  35fa				   .skipL0763
  16005  35fa				   .
  16006  35fa							; 
  16007  35fa
  16008  35fa				   .L0764		;  temp6  =  temp5  -	20
  16009  35fa
  16010  35fa		       a5 a0		      LDA	temp5
  16011  35fc		       38		      SEC
  16012  35fd		       e9 14		      SBC	#20
  16013  35ff		       85 a1		      STA	temp6
  16014  3601				   .
  16015  3601							; 
  16016  3601
  16017  3601				   .L0765		;  if temp6  <  12 then on temp6 goto __W_Clr_20 __W_Clr_21 __W_Clr_22 __W_Clr_23 __W_Clr_24 __W_Clr_25 __W_Clr_26 __W_Clr_27 __W_Clr_28 __W_Clr_29 __W_Clr_30 __W_Clr_31
  16018  3601
  16019  3601		       a5 a1		      LDA	temp6
  16020  3603		       c9 0c		      CMP	#12
  16021  3605		       b0 23		      BCS	.skipL0765
  16022  3607				   .condpart249
  16023  3607		       a6 a1		      LDX	temp6
  16024  3609		       bd 12 56 	      LDA	.249thenjumptablehi,x
  16025  360c		       48		      PHA
  16026  360d		       bd 1e 56 	      LDA	.249thenjumptablelo,x
  16027  3610		       48		      PHA
  16028  3611		       60		      RTS
  16029  3612				   .249thenjumptablehi
  16030  3612		       5e		      .byte.b	>(.__W_Clr_20-1)
  16031  3613		       5e		      .byte.b	>(.__W_Clr_21-1)
  16032  3614		       5e		      .byte.b	>(.__W_Clr_22-1)
  16033  3615		       5e		      .byte.b	>(.__W_Clr_23-1)
  16034  3616		       5e		      .byte.b	>(.__W_Clr_24-1)
  16035  3617		       5e		      .byte.b	>(.__W_Clr_25-1)
  16036  3618		       5e		      .byte.b	>(.__W_Clr_26-1)
  16037  3619		       5e		      .byte.b	>(.__W_Clr_27-1)
  16038  361a		       5e		      .byte.b	>(.__W_Clr_28-1)
  16039  361b		       5e		      .byte.b	>(.__W_Clr_29-1)
  16040  361c		       5e		      .byte.b	>(.__W_Clr_30-1)
  16041  361d		       5e		      .byte.b	>(.__W_Clr_31-1)
  16042  361e				   .249thenjumptablelo
  16043  361e		       43		      .byte.b	<(.__W_Clr_20-1)
  16044  361f		       4e		      .byte.b	<(.__W_Clr_21-1)
  16045  3620		       59		      .byte.b	<(.__W_Clr_22-1)
  16046  3621		       64		      .byte.b	<(.__W_Clr_23-1)
  16047  3622		       6f		      .byte.b	<(.__W_Clr_24-1)
  16048  3623		       7a		      .byte.b	<(.__W_Clr_25-1)
  16049  3624		       85		      .byte.b	<(.__W_Clr_26-1)
  16050  3625		       90		      .byte.b	<(.__W_Clr_27-1)
  16051  3626		       9b		      .byte.b	<(.__W_Clr_28-1)
  16052  3627		       a6		      .byte.b	<(.__W_Clr_29-1)
  16053  3628		       b1		      .byte.b	<(.__W_Clr_30-1)
  16054  3629		       bc		      .byte.b	<(.__W_Clr_31-1)
  16055  362a				   .skipL0765
  16056  362a				   .
  16057  362a							; 
  16058  362a
  16059  362a				   .__Wroth_Color_Done
  16060  362a							; __Wroth_Color_Done
  16061  362a
  16062  362a				   .
  16063  362a							; 
  16064  362a
  16065  362a				   .
  16066  362a							; 
  16067  362a
  16068  362a				   .
  16069  362a							; 
  16070  362a
  16071  362a				   .
  16072  362a							; 
  16073  362a
  16074  362a				   .L0766		;  _Ch1_Sound	=  _c_Wrothopod  :  _Ch1_Counter  =  0	:  _Ch1_Duration  =  1
  16075  362a
  16076  362a		       a9 03		      LDA	#_c_Wrothopod
  16077  362c		       85 dd		      STA	_Ch1_Sound
  16078  362e		       a9 00		      LDA	#0
  16079  3630		       85 df		      STA	_Ch1_Counter
  16080  3632		       a9 01		      LDA	#1
  16081  3634		       85 de		      STA	_Ch1_Duration
  16082  3636				   .
  16083  3636							; 
  16084  3636
  16085  3636				   .
  16086  3636							; 
  16087  3636
  16088  3636				   .
  16089  3636							; 
  16090  3636
  16091  3636				   .
  16092  3636							; 
  16093  3636
  16094  3636				   .
  16095  3636							; 
  16096  3636
  16097  3636				   .
  16098  3636							; 
  16099  3636
  16100  3636				   .
  16101  3636							; 
  16102  3636
  16103  3636				   .
  16104  3636							; 
  16105  3636
  16106  3636				   .
  16107  3636							; 
  16108  3636
  16109  3636				   .
  16110  3636							; 
  16111  3636
  16112  3636				   .L0767		;  if player0x  <  80 then temp5  =   ( rand / 8 )   :  player1x  =  temp5  +	30  :  goto __Wrothopod_Move
  16113  3636
  16114  3636		       a5 80		      LDA	player0x
  16115  3638		       c9 50		      CMP	#80
  16116  363a		       b0 1c		      BCS	.skipL0767
  16117  363c				   .condpart250
  16118  363c							; complex statement detected
  16119  363c		       a5 a2		      lda	rand
  16120  363e		       4a		      lsr
  16121  363f					      ifconst	rand16
  16122  363f		       26 d3		      rol	rand16
  16123  3641					      endif
  16124  3641		       90 02		      bcc	*+4
  16125  3643		       49 b4		      eor	#$B4
  16126  3645		       85 a2		      sta	rand
  16127  3647					      ifconst	rand16
  16128  3647		       45 d3		      eor	rand16
  16129  3649					      endif
  16130  3649		       4a		      lsr
  16131  364a		       4a		      lsr
  16132  364b		       4a		      lsr
  16133  364c		       85 a0		      STA	temp5
  16134  364e		       a5 a0		      LDA	temp5
  16135  3650		       18		      CLC
  16136  3651		       69 1e		      ADC	#30
  16137  3653		       85 81		      STA	player1x
  16138  3655		       4c 7a 56 	      jmp	.__Wrothopod_Move
  16139  3658
  16140  3658				   .skipL0767
  16141  3658				   .
  16142  3658							; 
  16143  3658
  16144  3658				   .
  16145  3658							; 
  16146  3658
  16147  3658				   .
  16148  3658							; 
  16149  3658
  16150  3658				   .
  16151  3658							; 
  16152  3658
  16153  3658				   .L0768		;  if player0x  >  79 then temp5  =   ( rand / 8 )   :  player1x  =  temp5  +	93  :  goto __Wrothopod_Move
  16154  3658
  16155  3658		       a9 4f		      LDA	#79
  16156  365a		       c5 80		      CMP	player0x
  16157  365c		       b0 1c		      BCS	.skipL0768
  16158  365e				   .condpart251
  16159  365e							; complex statement detected
  16160  365e		       a5 a2		      lda	rand
  16161  3660		       4a		      lsr
  16162  3661					      ifconst	rand16
  16163  3661		       26 d3		      rol	rand16
  16164  3663					      endif
  16165  3663		       90 02		      bcc	*+4
  16166  3665		       49 b4		      eor	#$B4
  16167  3667		       85 a2		      sta	rand
  16168  3669					      ifconst	rand16
  16169  3669		       45 d3		      eor	rand16
  16170  366b					      endif
  16171  366b		       4a		      lsr
  16172  366c		       4a		      lsr
  16173  366d		       4a		      lsr
  16174  366e		       85 a0		      STA	temp5
  16175  3670		       a5 a0		      LDA	temp5
  16176  3672		       18		      CLC
  16177  3673		       69 5d		      ADC	#93
  16178  3675		       85 81		      STA	player1x
  16179  3677		       4c 7a 56 	      jmp	.__Wrothopod_Move
  16180  367a
  16181  367a				   .skipL0768
  16182  367a				   .
  16183  367a							; 
  16184  367a
  16185  367a				   .__Wrothopod_Move
  16186  367a							; __Wrothopod_Move
  16187  367a
  16188  367a				   .
  16189  367a							; 
  16190  367a
  16191  367a				   .
  16192  367a							; 
  16193  367a
  16194  367a				   .
  16195  367a							; 
  16196  367a
  16197  367a				   .
  16198  367a							; 
  16199  367a
  16200  367a				   .
  16201  367a							; 
  16202  367a
  16203  367a				   .
  16204  367a							; 
  16205  367a
  16206  367a				   .
  16207  367a							; 
  16208  367a
  16209  367a				   .
  16210  367a							; 
  16211  367a
  16212  367a				   .L0769		;  if !collision(missile0,player1) then goto __Skip_Wroth_Shot
  16213  367a
  16214  367a		       24 00		      bit	CXM0P
  16215  367c		       30 03		      BMI	.skipL0769
  16216  367e				   .condpart252
  16217  367e		       4c ac 56 	      jmp	.__Skip_Wroth_Shot
  16218  3681
  16219  3681				   .skipL0769
  16220  3681				   .
  16221  3681							; 
  16222  3681
  16223  3681				   .
  16224  3681							; 
  16225  3681
  16226  3681				   .
  16227  3681							; 
  16228  3681
  16229  3681				   .
  16230  3681							; 
  16231  3681
  16232  3681				   .L0770		;  missile0y  =  250  :  _Bit5_Wroth_Mad{5}  =  1
  16233  3681
  16234  3681		       a9 fa		      LDA	#250
  16235  3683		       85 91		      STA	missile0y
  16236  3685		       a5 c5		      LDA	_Bit5_Wroth_Mad
  16237  3687		       09 20		      ORA	#32
  16238  3689		       85 c5		      STA	_Bit5_Wroth_Mad
  16239  368b				   .
  16240  368b							; 
  16241  368b
  16242  368b				   .
  16243  368b							; 
  16244  368b
  16245  368b				   .
  16246  368b							; 
  16247  368b
  16248  368b				   .
  16249  368b							; 
  16250  368b
  16251  368b				   .L0771		;  gosub __Ouch_Dec_Health_01
  16252  368b
  16253  368b		       20 7d 5c 	      jsr	.__Ouch_Dec_Health_01
  16254  368e
  16255  368e				   .
  16256  368e							; 
  16257  368e
  16258  368e				   .
  16259  368e							; 
  16260  368e
  16261  368e				   .
  16262  368e							; 
  16263  368e
  16264  368e				   .
  16265  368e							; 
  16266  368e
  16267  368e				   .L0772		;  if !_Bit1_Auto_Play{1} then if pfscore2  =	0 then _Bit3_Easter_Egg{3}  =  1
  16268  368e
  16269  368e		       a5 d2		      LDA	_Bit1_Auto_Play
  16270  3690		       29 02		      AND	#2
  16271  3692		       d0 0c		      BNE	.skipL0772
  16272  3694				   .condpart253
  16273  3694		       a5 f3		      LDA	pfscore2
  16274  3696		       c9 00		      CMP	#0
  16275  3698		       d0 06		      BNE	.skip253then
  16276  369a				   .condpart254
  16277  369a		       a5 c7		      LDA	_Bit3_Easter_Egg
  16278  369c		       09 08		      ORA	#8
  16279  369e		       85 c7		      STA	_Bit3_Easter_Egg
  16280  36a0				   .skip253then
  16281  36a0				   .skipL0772
  16282  36a0				   .
  16283  36a0							; 
  16284  36a0
  16285  36a0				   .
  16286  36a0							; 
  16287  36a0
  16288  36a0				   .
  16289  36a0							; 
  16290  36a0
  16291  36a0				   .
  16292  36a0							; 
  16293  36a0
  16294  36a0				   .
  16295  36a0							; 
  16296  36a0
  16297  36a0				   .
  16298  36a0							; 
  16299  36a0
  16300  36a0				   .
  16301  36a0							; 
  16302  36a0
  16303  36a0				   .
  16304  36a0							; 
  16305  36a0
  16306  36a0				   .
  16307  36a0							; 
  16308  36a0
  16309  36a0				   .
  16310  36a0							; 
  16311  36a0
  16312  36a0				   .L0773		;  _Ch1_Sound	=  _c_Wrothopod  :  _Ch1_Counter  =  28  :  _Ch1_Duration  =  1
  16313  36a0
  16314  36a0		       a9 03		      LDA	#_c_Wrothopod
  16315  36a2		       85 dd		      STA	_Ch1_Sound
  16316  36a4		       a9 1c		      LDA	#28
  16317  36a6		       85 df		      STA	_Ch1_Counter
  16318  36a8		       a9 01		      LDA	#1
  16319  36aa		       85 de		      STA	_Ch1_Duration
  16320  36ac				   .
  16321  36ac							; 
  16322  36ac
  16323  36ac				   .__Skip_Wroth_Shot
  16324  36ac							; __Skip_Wroth_Shot
  16325  36ac
  16326  36ac				   .
  16327  36ac							; 
  16328  36ac
  16329  36ac				   .
  16330  36ac							; 
  16331  36ac
  16332  36ac				   .
  16333  36ac							; 
  16334  36ac
  16335  36ac				   .
  16336  36ac							; 
  16337  36ac
  16338  36ac				   .
  16339  36ac							; 
  16340  36ac
  16341  36ac				   .
  16342  36ac							; 
  16343  36ac
  16344  36ac				   .
  16345  36ac							; 
  16346  36ac
  16347  36ac				   .
  16348  36ac							; 
  16349  36ac
  16350  36ac				   .L0774		;  if _Bit6_Wroth_Touched{6} then goto __Skip_Wroth_Ouch
  16351  36ac
  16352  36ac		       24 c5		      BIT	_Bit6_Wroth_Touched
  16353  36ae		       50 03		      BVC	.skipL0774
  16354  36b0				   .condpart255
  16355  36b0		       4c f1 56 	      jmp	.__Skip_Wroth_Ouch
  16356  36b3
  16357  36b3				   .skipL0774
  16358  36b3				   .
  16359  36b3							; 
  16360  36b3
  16361  36b3				   .
  16362  36b3							; 
  16363  36b3
  16364  36b3				   .
  16365  36b3							; 
  16366  36b3
  16367  36b3				   .
  16368  36b3							; 
  16369  36b3
  16370  36b3				   .L0775		;  if !collision(player0,player1) then goto __Skip_Wroth_Ouch
  16371  36b3
  16372  36b3		       24 07		      bit	CXPPMM
  16373  36b5		       30 03		      BMI	.skipL0775
  16374  36b7				   .condpart256
  16375  36b7		       4c f1 56 	      jmp	.__Skip_Wroth_Ouch
  16376  36ba
  16377  36ba				   .skipL0775
  16378  36ba				   .
  16379  36ba							; 
  16380  36ba
  16381  36ba				   .
  16382  36ba							; 
  16383  36ba
  16384  36ba				   .
  16385  36ba							; 
  16386  36ba
  16387  36ba				   .
  16388  36ba							; 
  16389  36ba
  16390  36ba				   .L0776		;  _Bit6_Wroth_Touched{6}  =  1
  16391  36ba
  16392  36ba		       a5 c5		      LDA	_Bit6_Wroth_Touched
  16393  36bc		       09 40		      ORA	#64
  16394  36be		       85 c5		      STA	_Bit6_Wroth_Touched
  16395  36c0				   .
  16396  36c0							; 
  16397  36c0
  16398  36c0				   .
  16399  36c0							; 
  16400  36c0
  16401  36c0				   .
  16402  36c0							; 
  16403  36c0
  16404  36c0				   .
  16405  36c0							; 
  16406  36c0
  16407  36c0				   .
  16408  36c0							; 
  16409  36c0
  16410  36c0				   .L0777		;  if _P0_Up_Down  >  83 then goto __Skip_Wroth_Move_Ship_Down
  16411  36c0
  16412  36c0		       a9 53		      LDA	#83
  16413  36c2		       c5 85		      CMP	_P0_Up_Down
  16414  36c4		       b0 03		      BCS	.skipL0777
  16415  36c6				   .condpart257
  16416  36c6		       4c d6 56 	      jmp	.__Skip_Wroth_Move_Ship_Down
  16417  36c9
  16418  36c9				   .skipL0777
  16419  36c9				   .
  16420  36c9							; 
  16421  36c9
  16422  36c9				   .
  16423  36c9							; 
  16424  36c9
  16425  36c9				   .
  16426  36c9							; 
  16427  36c9
  16428  36c9				   .
  16429  36c9							; 
  16430  36c9
  16431  36c9				   .L0778		;  _P0_Up_Down  =  _P0_Up_Down  +  2.02
  16432  36c9
  16433  36c9		       a5 d5		      LDA	b
  16434  36cb		       18		      CLC
  16435  36cc		       69 05		      ADC	#5
  16436  36ce		       85 d5		      STA	b
  16437  36d0		       a5 85		      LDA	_P0_Up_Down
  16438  36d2		       69 02		      ADC	#2
  16439  36d4		       85 85		      STA	_P0_Up_Down
  16440  36d6				   .
  16441  36d6							; 
  16442  36d6
  16443  36d6				   .__Skip_Wroth_Move_Ship_Down
  16444  36d6							; __Skip_Wroth_Move_Ship_Down
  16445  36d6
  16446  36d6				   .
  16447  36d6							; 
  16448  36d6
  16449  36d6				   .
  16450  36d6							; 
  16451  36d6
  16452  36d6				   .
  16453  36d6							; 
  16454  36d6
  16455  36d6				   .
  16456  36d6							; 
  16457  36d6
  16458  36d6				   .L0779		;  _Slide_Counter  =  0
  16459  36d6
  16460  36d6		       a9 00		      LDA	#0
  16461  36d8		       85 e0		      STA	_Slide_Counter
  16462  36da				   .
  16463  36da							; 
  16464  36da
  16465  36da				   .L0780		;  _Bit3_Ship_Yanked_Down{3}  =  1  :	_Slide_Speed  =  1  :  _Ch1_Duration  =  1
  16466  36da
  16467  36da		       a5 c4		      LDA	_Bit3_Ship_Yanked_Down
  16468  36dc		       09 08		      ORA	#8
  16469  36de		       85 c4		      STA	_Bit3_Ship_Yanked_Down
  16470  36e0		       a9 01		      LDA	#1
  16471  36e2		       85 e1		      STA	_Slide_Speed
  16472  36e4		       85 de		      STA	_Ch1_Duration
  16473  36e6				   .
  16474  36e6							; 
  16475  36e6
  16476  36e6				   .L0781		;  _Ch1_Counter  =  28  :  _Ch1_Sound	=  _c_Wrothopod
  16477  36e6
  16478  36e6		       a9 1c		      LDA	#28
  16479  36e8		       85 df		      STA	_Ch1_Counter
  16480  36ea		       a9 03		      LDA	#_c_Wrothopod
  16481  36ec		       85 dd		      STA	_Ch1_Sound
  16482  36ee				   .
  16483  36ee							; 
  16484  36ee
  16485  36ee				   .
  16486  36ee							; 
  16487  36ee
  16488  36ee				   .
  16489  36ee							; 
  16490  36ee
  16491  36ee				   .
  16492  36ee							; 
  16493  36ee
  16494  36ee				   .L0782		;  gosub __Ouch_Dec_Health_01
  16495  36ee
  16496  36ee		       20 7d 5c 	      jsr	.__Ouch_Dec_Health_01
  16497  36f1
  16498  36f1				   .
  16499  36f1							; 
  16500  36f1
  16501  36f1				   .__Skip_Wroth_Ouch
  16502  36f1							; __Skip_Wroth_Ouch
  16503  36f1
  16504  36f1				   .
  16505  36f1							; 
  16506  36f1
  16507  36f1				   .
  16508  36f1							; 
  16509  36f1
  16510  36f1				   .
  16511  36f1							; 
  16512  36f1
  16513  36f1				   .
  16514  36f1							; 
  16515  36f1
  16516  36f1				   .L0783		;  if player1y  <  100 then goto __Skip_Wroth_Bottom
  16517  36f1
  16518  36f1		       a5 86		      LDA	player1y
  16519  36f3		       c9 64		      CMP	#100
  16520  36f5		       b0 03		      BCS	.skipL0783
  16521  36f7				   .condpart258
  16522  36f7		       4c 13 57 	      jmp	.__Skip_Wroth_Bottom
  16523  36fa
  16524  36fa				   .skipL0783
  16525  36fa				   .
  16526  36fa							; 
  16527  36fa
  16528  36fa				   .
  16529  36fa							; 
  16530  36fa
  16531  36fa				   .
  16532  36fa							; 
  16533  36fa
  16534  36fa				   .
  16535  36fa							; 
  16536  36fa
  16537  36fa				   .
  16538  36fa							; 
  16539  36fa
  16540  36fa				   .
  16541  36fa							; 
  16542  36fa
  16543  36fa				   .L0784		;  _Wrothopod_Counter	=  0  :  _Bit1_Wrothopod_On{1}	=  0  :  _Bit5_Wroth_Mad{5}  =	0  :  _Bit6_Wroth_Touched{6}  =  0
  16544  36fa
  16545  36fa		       a9 00		      LDA	#0
  16546  36fc		       85 e7		      STA	_Wrothopod_Counter
  16547  36fe		       a5 c5		      LDA	_Bit1_Wrothopod_On
  16548  3700		       29 fd		      AND	#253
  16549  3702		       85 c5		      STA	_Bit1_Wrothopod_On
  16550  3704		       a5 c5		      LDA	_Bit5_Wroth_Mad
  16551  3706		       29 df		      AND	#223
  16552  3708		       85 c5		      STA	_Bit5_Wroth_Mad
  16553  370a		       a5 c5		      LDA	_Bit6_Wroth_Touched
  16554  370c		       29 bf		      AND	#191
  16555  370e		       85 c5		      STA	_Bit6_Wroth_Touched
  16556  3710				   .
  16557  3710							; 
  16558  3710
  16559  3710				   .L0785		;  goto __Skip_Enemy_Drop
  16560  3710
  16561  3710		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  16562  3713
  16563  3713				   .
  16564  3713							; 
  16565  3713
  16566  3713				   .__Skip_Wroth_Bottom
  16567  3713							; __Skip_Wroth_Bottom
  16568  3713
  16569  3713				   .
  16570  3713							; 
  16571  3713
  16572  3713				   .
  16573  3713							; 
  16574  3713
  16575  3713				   .
  16576  3713							; 
  16577  3713
  16578  3713				   .
  16579  3713							; 
  16580  3713
  16581  3713				   .L0786		;  if _Bit5_Wroth_Mad{5} then goto __Wroth_Swim
  16582  3713
  16583  3713		       a5 c5		      LDA	_Bit5_Wroth_Mad
  16584  3715		       29 20		      AND	#32
  16585  3717		       f0 03		      BEQ	.skipL0786
  16586  3719				   .condpart259
  16587  3719		       4c 3b 57 	      jmp	.__Wroth_Swim
  16588  371c
  16589  371c				   .skipL0786
  16590  371c				   .
  16591  371c							; 
  16592  371c
  16593  371c				   .
  16594  371c							; 
  16595  371c
  16596  371c				   .
  16597  371c							; 
  16598  371c
  16599  371c				   .
  16600  371c							; 
  16601  371c
  16602  371c				   .L0787		;  if _Ch1_Sound  =  _c_Tentacle_Reaching_Up  ||  _Bit6_Wroth_Touched{6} then goto __Wroth_Swim
  16603  371c
  16604  371c		       a5 dd		      LDA	_Ch1_Sound
  16605  371e		       c9 02		      CMP	#_c_Tentacle_Reaching_Up
  16606  3720		       d0 03		      BNE	.skipL0787
  16607  3722				   .condpart260
  16608  3722		       4c 29 57 	      jmp	.condpart261
  16609  3725				   .skipL0787
  16610  3725		       24 c5		      BIT	_Bit6_Wroth_Touched
  16611  3727		       50 03		      BVC	.skip32OR
  16612  3729				   .condpart261
  16613  3729		       4c 3b 57 	      jmp	.__Wroth_Swim
  16614  372c
  16615  372c				   .skip32OR
  16616  372c				   .
  16617  372c							; 
  16618  372c
  16619  372c				   .
  16620  372c							; 
  16621  372c
  16622  372c				   .
  16623  372c							; 
  16624  372c
  16625  372c				   .
  16626  372c							; 
  16627  372c
  16628  372c				   .
  16629  372c							; 
  16630  372c
  16631  372c				   .L0788		;  if _Ch1_Sound  =  _c_Wrothopod  &&	_Ch1_Counter  <  136 then goto __Skip_Enemy_Drop
  16632  372c
  16633  372c		       a5 dd		      LDA	_Ch1_Sound
  16634  372e		       c9 03		      CMP	#_c_Wrothopod
  16635  3730		       d0 09		      BNE	.skipL0788
  16636  3732				   .condpart262
  16637  3732		       a5 df		      LDA	_Ch1_Counter
  16638  3734		       c9 88		      CMP	#136
  16639  3736		       b0 03		      BCS	.skip262then
  16640  3738				   .condpart263
  16641  3738		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  16642  373b
  16643  373b				   .skip262then
  16644  373b				   .skipL0788
  16645  373b				   .
  16646  373b							; 
  16647  373b
  16648  373b				   .__Wroth_Swim
  16649  373b							; __Wroth_Swim
  16650  373b
  16651  373b				   .
  16652  373b							; 
  16653  373b
  16654  373b				   .
  16655  373b							; 
  16656  373b
  16657  373b				   .
  16658  373b							; 
  16659  373b
  16660  373b				   .
  16661  373b							; 
  16662  373b
  16663  373b				   .
  16664  373b							; 
  16665  373b
  16666  373b				   .
  16667  373b							; 
  16668  373b
  16669  373b				   .
  16670  373b							; 
  16671  373b
  16672  373b				   .
  16673  373b							; 
  16674  373b
  16675  373b				   .L0789		;  if _Frame_Counter  =  1  ||  _Frame_Counter  =  3 then _P1_Up_Down	=  _P1_Up_Down	+  0.52  :  goto __Skip_Swim
  16676  373b
  16677  373b		       a5 d9		      LDA	_Frame_Counter
  16678  373d		       c9 01		      CMP	#1
  16679  373f		       d0 03		      BNE	.skipL0789
  16680  3741				   .condpart264
  16681  3741		       4c 4a 57 	      jmp	.condpart265
  16682  3744				   .skipL0789
  16683  3744		       a5 d9		      LDA	_Frame_Counter
  16684  3746		       c9 03		      CMP	#3
  16685  3748		       d0 10		      BNE	.skip34OR
  16686  374a				   .condpart265
  16687  374a		       a5 d6		      LDA	c
  16688  374c		       18		      CLC
  16689  374d		       69 85		      ADC	#133
  16690  374f		       85 d6		      STA	c
  16691  3751		       a5 86		      LDA	_P1_Up_Down
  16692  3753		       69 00		      ADC	#0
  16693  3755		       85 86		      STA	_P1_Up_Down
  16694  3757		       4c 7d 57 	      jmp	.__Skip_Swim
  16695  375a
  16696  375a				   .skip34OR
  16697  375a				   .
  16698  375a							; 
  16699  375a
  16700  375a				   .
  16701  375a							; 
  16702  375a
  16703  375a				   .
  16704  375a							; 
  16705  375a
  16706  375a				   .
  16707  375a							; 
  16708  375a
  16709  375a				   .L0790		;  if _Frame_Counter  =  2 then _P1_Up_Down  =  _P1_Up_Down  +  0.72  :  goto __Skip_Swim
  16710  375a
  16711  375a		       a5 d9		      LDA	_Frame_Counter
  16712  375c		       c9 02		      CMP	#2
  16713  375e		       d0 10		      BNE	.skipL0790
  16714  3760				   .condpart266
  16715  3760		       a5 d6		      LDA	c
  16716  3762		       18		      CLC
  16717  3763		       69 b8		      ADC	#184
  16718  3765		       85 d6		      STA	c
  16719  3767		       a5 86		      LDA	_P1_Up_Down
  16720  3769		       69 00		      ADC	#0
  16721  376b		       85 86		      STA	_P1_Up_Down
  16722  376d		       4c 7d 57 	      jmp	.__Skip_Swim
  16723  3770
  16724  3770				   .skipL0790
  16725  3770				   .
  16726  3770							; 
  16727  3770
  16728  3770				   .
  16729  3770							; 
  16730  3770
  16731  3770				   .
  16732  3770							; 
  16733  3770
  16734  3770				   .
  16735  3770							; 
  16736  3770
  16737  3770				   .L0791		;  _P1_Up_Down  =  _P1_Up_Down  +  0.32
  16738  3770
  16739  3770		       a5 d6		      LDA	c
  16740  3772		       18		      CLC
  16741  3773		       69 51		      ADC	#81
  16742  3775		       85 d6		      STA	c
  16743  3777		       a5 86		      LDA	_P1_Up_Down
  16744  3779		       69 00		      ADC	#0
  16745  377b		       85 86		      STA	_P1_Up_Down
  16746  377d				   .
  16747  377d							; 
  16748  377d
  16749  377d				   .__Skip_Swim
  16750  377d							; __Skip_Swim
  16751  377d
  16752  377d				   .
  16753  377d							; 
  16754  377d
  16755  377d				   .
  16756  377d							; 
  16757  377d
  16758  377d				   .
  16759  377d							; 
  16760  377d
  16761  377d				   .
  16762  377d							; 
  16763  377d
  16764  377d				   .
  16765  377d							; 
  16766  377d
  16767  377d				   .
  16768  377d							; 
  16769  377d
  16770  377d				   .
  16771  377d							; 
  16772  377d
  16773  377d				   .
  16774  377d							; 
  16775  377d
  16776  377d				   .L0792		;  if _Bit5_Wroth_Mad{5} then goto __Angry_Wrothopod
  16777  377d
  16778  377d		       a5 c5		      LDA	_Bit5_Wroth_Mad
  16779  377f		       29 20		      AND	#32
  16780  3781		       f0 03		      BEQ	.skipL0792
  16781  3783				   .condpart267
  16782  3783		       4c b8 57 	      jmp	.__Angry_Wrothopod
  16783  3786
  16784  3786				   .skipL0792
  16785  3786				   .
  16786  3786							; 
  16787  3786
  16788  3786				   .
  16789  3786							; 
  16790  3786
  16791  3786				   .
  16792  3786							; 
  16793  3786
  16794  3786				   .
  16795  3786							; 
  16796  3786
  16797  3786				   .L0793		;  if player1y  >  player0y then goto __Skip_Enemy_Drop
  16798  3786
  16799  3786		       a5 85		      LDA	player0y
  16800  3788		       c5 86		      CMP	player1y
  16801  378a		       b0 03		      BCS	.skipL0793
  16802  378c				   .condpart268
  16803  378c		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  16804  378f
  16805  378f				   .skipL0793
  16806  378f				   .
  16807  378f							; 
  16808  378f
  16809  378f				   .
  16810  378f							; 
  16811  378f
  16812  378f				   .
  16813  378f							; 
  16814  378f
  16815  378f				   .
  16816  378f							; 
  16817  378f
  16818  378f				   .L0794		;  if player1x  <  player0x then _P1_Left_Right  =  _P1_Left_Right  +	0.82
  16819  378f
  16820  378f		       a5 81		      LDA	player1x
  16821  3791		       c5 80		      CMP	player0x
  16822  3793		       b0 0d		      BCS	.skipL0794
  16823  3795				   .condpart269
  16824  3795		       a5 d7		      LDA	d
  16825  3797		       18		      CLC
  16826  3798		       69 d1		      ADC	#209
  16827  379a		       85 d7		      STA	d
  16828  379c		       a5 81		      LDA	_P1_Left_Right
  16829  379e		       69 00		      ADC	#0
  16830  37a0		       85 81		      STA	_P1_Left_Right
  16831  37a2				   .skipL0794
  16832  37a2				   .
  16833  37a2							; 
  16834  37a2
  16835  37a2				   .L0795		;  if player1x  >  player0x then _P1_Left_Right  =  _P1_Left_Right  -	0.82
  16836  37a2
  16837  37a2		       a5 80		      LDA	player0x
  16838  37a4		       c5 81		      CMP	player1x
  16839  37a6		       b0 0d		      BCS	.skipL0795
  16840  37a8				   .condpart270
  16841  37a8		       a5 d7		      LDA	d
  16842  37aa		       38		      SEC
  16843  37ab		       e9 d1		      SBC	#209
  16844  37ad		       85 d7		      STA	d
  16845  37af		       a5 81		      LDA	_P1_Left_Right
  16846  37b1		       e9 00		      SBC	#0
  16847  37b3		       85 81		      STA	_P1_Left_Right
  16848  37b5				   .skipL0795
  16849  37b5				   .
  16850  37b5							; 
  16851  37b5
  16852  37b5				   .L0796		;  goto __Skip_Enemy_Drop
  16853  37b5
  16854  37b5		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  16855  37b8
  16856  37b8				   .
  16857  37b8							; 
  16858  37b8
  16859  37b8				   .__Angry_Wrothopod
  16860  37b8							; __Angry_Wrothopod
  16861  37b8
  16862  37b8				   .
  16863  37b8							; 
  16864  37b8
  16865  37b8				   .
  16866  37b8							; 
  16867  37b8
  16868  37b8				   .
  16869  37b8							; 
  16870  37b8
  16871  37b8				   .
  16872  37b8							; 
  16873  37b8
  16874  37b8				   .
  16875  37b8							; 
  16876  37b8
  16877  37b8				   .
  16878  37b8							; 
  16879  37b8
  16880  37b8				   .
  16881  37b8							; 
  16882  37b8
  16883  37b8				   .
  16884  37b8							; 
  16885  37b8
  16886  37b8				   .L0797		;  player1color:
  16887  37b8
  16888  37b8		       a2 58		      LDX	#<playercolorL0797_1
  16889  37ba		       86 87		      STX	player1color
  16890  37bc		       a9 f9		      LDA	#>playercolorL0797_1
  16891  37be		       85 88		      STA	player1color+1
  16892  37c0				   .
  16893  37c0							; 
  16894  37c0
  16895  37c0				   .
  16896  37c0							; 
  16897  37c0
  16898  37c0				   .
  16899  37c0							; 
  16900  37c0
  16901  37c0				   .
  16902  37c0							; 
  16903  37c0
  16904  37c0				   .L0798		;  _P1_Up_Down  =  _P1_Up_Down  +  0.32
  16905  37c0
  16906  37c0		       a5 d6		      LDA	c
  16907  37c2		       18		      CLC
  16908  37c3		       69 51		      ADC	#81
  16909  37c5		       85 d6		      STA	c
  16910  37c7		       a5 86		      LDA	_P1_Up_Down
  16911  37c9		       69 00		      ADC	#0
  16912  37cb		       85 86		      STA	_P1_Up_Down
  16913  37cd				   .
  16914  37cd							; 
  16915  37cd
  16916  37cd				   .
  16917  37cd							; 
  16918  37cd
  16919  37cd				   .
  16920  37cd							; 
  16921  37cd
  16922  37cd				   .
  16923  37cd							; 
  16924  37cd
  16925  37cd				   .L0799		;  if player1y  >  player0y then goto __Skip_Enemy_Drop
  16926  37cd
  16927  37cd		       a5 85		      LDA	player0y
  16928  37cf		       c5 86		      CMP	player1y
  16929  37d1		       b0 03		      BCS	.skipL0799
  16930  37d3				   .condpart271
  16931  37d3		       4c fc 57 	      jmp	.__Skip_Enemy_Drop
  16932  37d6
  16933  37d6				   .skipL0799
  16934  37d6				   .
  16935  37d6							; 
  16936  37d6
  16937  37d6				   .
  16938  37d6							; 
  16939  37d6
  16940  37d6				   .
  16941  37d6							; 
  16942  37d6
  16943  37d6				   .
  16944  37d6							; 
  16945  37d6
  16946  37d6				   .L0800		;  if player1x  <  player0x then _P1_Left_Right  =  _P1_Left_Right  +	1.12
  16947  37d6
  16948  37d6		       a5 81		      LDA	player1x
  16949  37d8		       c5 80		      CMP	player0x
  16950  37da		       b0 0d		      BCS	.skipL0800
  16951  37dc				   .condpart272
  16952  37dc		       a5 d7		      LDA	d
  16953  37de		       18		      CLC
  16954  37df		       69 1e		      ADC	#30
  16955  37e1		       85 d7		      STA	d
  16956  37e3		       a5 81		      LDA	_P1_Left_Right
  16957  37e5		       69 01		      ADC	#1
  16958  37e7		       85 81		      STA	_P1_Left_Right
  16959  37e9				   .skipL0800
  16960  37e9				   .
  16961  37e9							; 
  16962  37e9
  16963  37e9				   .L0801		;  if player1x  >  player0x then _P1_Left_Right  =  _P1_Left_Right  -	1.12
  16964  37e9
  16965  37e9		       a5 80		      LDA	player0x
  16966  37eb		       c5 81		      CMP	player1x
  16967  37ed		       b0 0d		      BCS	.skipL0801
  16968  37ef				   .condpart273
  16969  37ef		       a5 d7		      LDA	d
  16970  37f1		       38		      SEC
  16971  37f2		       e9 1e		      SBC	#30
  16972  37f4		       85 d7		      STA	d
  16973  37f6		       a5 81		      LDA	_P1_Left_Right
  16974  37f8		       e9 01		      SBC	#1
  16975  37fa		       85 81		      STA	_P1_Left_Right
  16976  37fc				   .skipL0801
  16977  37fc				   .
  16978  37fc							; 
  16979  37fc
  16980  37fc				   .__Skip_Enemy_Drop
  16981  37fc							; __Skip_Enemy_Drop
  16982  37fc
  16983  37fc				   .
  16984  37fc							; 
  16985  37fc
  16986  37fc				   .
  16987  37fc							; 
  16988  37fc
  16989  37fc				   .
  16990  37fc							; 
  16991  37fc
  16992  37fc				   .
  16993  37fc							; 
  16994  37fc
  16995  37fc				   .
  16996  37fc							; 
  16997  37fc
  16998  37fc				   .
  16999  37fc							; 
  17000  37fc
  17001  37fc				   .
  17002  37fc							; 
  17003  37fc
  17004  37fc				   .
  17005  37fc							; 
  17006  37fc
  17007  37fc				   .
  17008  37fc							; 
  17009  37fc
  17010  37fc				   .
  17011  37fc							; 
  17012  37fc
  17013  37fc				   .L0802		;  if _Bit0_Canister_P1_On{0} then goto __Clear_Corroded
  17014  37fc
  17015  37fc		       a5 c5		      LDA	_Bit0_Canister_P1_On
  17016  37fe		       4a		      LSR
  17017  37ff		       90 03		      BCC	.skipL0802
  17018  3801				   .condpart274
  17019  3801		       4c 83 5a 	      jmp	.__Clear_Corroded
  17020  3804
  17021  3804				   .skipL0802
  17022  3804				   .
  17023  3804							; 
  17024  3804
  17025  3804				   .
  17026  3804							; 
  17027  3804
  17028  3804				   .
  17029  3804							; 
  17030  3804
  17031  3804				   .
  17032  3804							; 
  17033  3804
  17034  3804				   .L0803		;  if _Bit1_Wrothopod_On{1} then goto __Clear_Corroded
  17035  3804
  17036  3804		       a5 c5		      LDA	_Bit1_Wrothopod_On
  17037  3806		       29 02		      AND	#2
  17038  3808		       f0 03		      BEQ	.skipL0803
  17039  380a				   .condpart275
  17040  380a		       4c 83 5a 	      jmp	.__Clear_Corroded
  17041  380d
  17042  380d				   .skipL0803
  17043  380d				   .
  17044  380d							; 
  17045  380d
  17046  380d				   .
  17047  380d							; 
  17048  380d
  17049  380d				   .
  17050  380d							; 
  17051  380d
  17052  380d				   .
  17053  380d							; 
  17054  380d
  17055  380d				   .L0804		;  if !_Bit2_Corrdd_Can_On{2}	&&  _Bit2_Move_Tentacle_Up{2} then goto __Skip_Corroded_Canister
  17056  380d
  17057  380d		       a5 c6		      LDA	_Bit2_Corrdd_Can_On
  17058  380f		       29 04		      AND	#4
  17059  3811		       d0 09		      BNE	.skipL0804
  17060  3813				   .condpart276
  17061  3813		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  17062  3815		       29 04		      AND	#4
  17063  3817		       f0 03		      BEQ	.skip276then
  17064  3819				   .condpart277
  17065  3819		       4c 97 5a 	      jmp	.__Skip_Corroded_Canister
  17066  381c
  17067  381c				   .skip276then
  17068  381c				   .skipL0804
  17069  381c				   .
  17070  381c							; 
  17071  381c
  17072  381c				   .
  17073  381c							; 
  17074  381c
  17075  381c				   .
  17076  381c							; 
  17077  381c
  17078  381c				   .
  17079  381c							; 
  17080  381c
  17081  381c				   .L0805		;  if _Bit2_Corrdd_Can_On{2} then goto __Canister_Activated
  17082  381c
  17083  381c		       a5 c6		      LDA	_Bit2_Corrdd_Can_On
  17084  381e		       29 04		      AND	#4
  17085  3820		       f0 03		      BEQ	.skipL0805
  17086  3822				   .condpart278
  17087  3822		       4c 15 59 	      jmp	.__Canister_Activated
  17088  3825
  17089  3825				   .skipL0805
  17090  3825				   .
  17091  3825							; 
  17092  3825
  17093  3825				   .
  17094  3825							; 
  17095  3825
  17096  3825				   .
  17097  3825							; 
  17098  3825
  17099  3825				   .
  17100  3825							; 
  17101  3825
  17102  3825				   .
  17103  3825							; 
  17104  3825
  17105  3825				   .L0806		;  if _Bit2_Move_Tentacle_Up{2} then goto __Clear_Corroded
  17106  3825
  17107  3825		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  17108  3827		       29 04		      AND	#4
  17109  3829		       f0 03		      BEQ	.skipL0806
  17110  382b				   .condpart279
  17111  382b		       4c 83 5a 	      jmp	.__Clear_Corroded
  17112  382e
  17113  382e				   .skipL0806
  17114  382e				   .
  17115  382e							; 
  17116  382e
  17117  382e				   .
  17118  382e							; 
  17119  382e
  17120  382e				   .
  17121  382e							; 
  17122  382e
  17123  382e				   .
  17124  382e							; 
  17125  382e
  17126  382e				   .L0807		;  if _Bit1_Auto_Play{1} then goto __AP_Corroded
  17127  382e
  17128  382e		       a5 d2		      LDA	_Bit1_Auto_Play
  17129  3830		       29 02		      AND	#2
  17130  3832		       f0 03		      BEQ	.skipL0807
  17131  3834				   .condpart280
  17132  3834		       4c 62 58 	      jmp	.__AP_Corroded
  17133  3837
  17134  3837				   .skipL0807
  17135  3837				   .
  17136  3837							; 
  17137  3837
  17138  3837				   .
  17139  3837							; 
  17140  3837
  17141  3837				   .
  17142  3837							; 
  17143  3837
  17144  3837				   .
  17145  3837							; 
  17146  3837
  17147  3837				   .
  17148  3837							; 
  17149  3837
  17150  3837				   .L0808		;  if _Corrdd_App_Counter  <  25 then goto __Skip_Corroded_Canister
  17151  3837
  17152  3837		       a5 ea		      LDA	_Corrdd_App_Counter
  17153  3839		       c9 19		      CMP	#25
  17154  383b		       b0 03		      BCS	.skipL0808
  17155  383d				   .condpart281
  17156  383d		       4c 97 5a 	      jmp	.__Skip_Corroded_Canister
  17157  3840
  17158  3840				   .skipL0808
  17159  3840				   .
  17160  3840							; 
  17161  3840
  17162  3840				   .
  17163  3840							; 
  17164  3840
  17165  3840				   .
  17166  3840							; 
  17167  3840
  17168  3840				   .
  17169  3840							; 
  17170  3840
  17171  3840				   .L0809		;  temp5  =  5  +  _Plop_Rate
  17172  3840
  17173  3840		       a9 05		      LDA	#5
  17174  3842		       18		      CLC
  17175  3843		       65 e3		      ADC	_Plop_Rate
  17176  3845		       85 a0		      STA	temp5
  17177  3847				   .
  17178  3847							; 
  17179  3847
  17180  3847				   .
  17181  3847							; 
  17182  3847
  17183  3847				   .
  17184  3847							; 
  17185  3847
  17186  3847				   .
  17187  3847							; 
  17188  3847
  17189  3847				   .
  17190  3847							; 
  17191  3847
  17192  3847				   .L0810		;  if pfscore2  <  16 then temp6  =  _Plop_Rate / 2  :  temp5	=  5  +  temp6
  17193  3847
  17194  3847		       a5 f3		      LDA	pfscore2
  17195  3849		       c9 10		      CMP	#16
  17196  384b		       b0 0c		      BCS	.skipL0810
  17197  384d				   .condpart282
  17198  384d		       a5 e3		      LDA	_Plop_Rate
  17199  384f		       4a		      lsr
  17200  3850		       85 a1		      STA	temp6
  17201  3852		       a9 05		      LDA	#5
  17202  3854		       18		      CLC
  17203  3855		       65 a1		      ADC	temp6
  17204  3857		       85 a0		      STA	temp5
  17205  3859				   .skipL0810
  17206  3859				   .
  17207  3859							; 
  17208  3859
  17209  3859				   .
  17210  3859							; 
  17211  3859
  17212  3859				   .
  17213  3859							; 
  17214  3859
  17215  3859				   .
  17216  3859							; 
  17217  3859
  17218  3859				   .L0811		;  if _Corrdd_Shot_Counter  <	temp5 then goto __Skip_Corroded_Canister
  17219  3859
  17220  3859		       a5 ec		      LDA	_Corrdd_Shot_Counter
  17221  385b		       c5 a0		      CMP	temp5
  17222  385d		       b0 03		      BCS	.skipL0811
  17223  385f				   .condpart283
  17224  385f		       4c 97 5a 	      jmp	.__Skip_Corroded_Canister
  17225  3862
  17226  3862				   .skipL0811
  17227  3862				   .
  17228  3862							; 
  17229  3862
  17230  3862				   .__AP_Corroded
  17231  3862							; __AP_Corroded
  17232  3862
  17233  3862				   .
  17234  3862							; 
  17235  3862
  17236  3862				   .
  17237  3862							; 
  17238  3862
  17239  3862				   .
  17240  3862							; 
  17241  3862
  17242  3862				   .
  17243  3862							; 
  17244  3862
  17245  3862				   .L0812		;  if !_Bit4_Corrdd_Can_Swd_Shot{4} then goto __Skip_Corroded_Canister
  17246  3862
  17247  3862		       a5 c6		      LDA	_Bit4_Corrdd_Can_Swd_Shot
  17248  3864		       29 10		      AND	#16
  17249  3866		       d0 03		      BNE	.skipL0812
  17250  3868				   .condpart284
  17251  3868		       4c 97 5a 	      jmp	.__Skip_Corroded_Canister
  17252  386b
  17253  386b				   .skipL0812
  17254  386b				   .
  17255  386b							; 
  17256  386b
  17257  386b				   .
  17258  386b							; 
  17259  386b
  17260  386b				   .
  17261  386b							; 
  17262  386b
  17263  386b				   .
  17264  386b							; 
  17265  386b
  17266  386b				   .L0813		;  if pfscore2  >  15 then temp5  =  rand  :  temp4  =  _Plop_Rate  *	4  :  temp6  =	86  -  temp4
  17267  386b
  17268  386b		       a9 0f		      LDA	#15
  17269  386d		       c5 f3		      CMP	pfscore2
  17270  386f		       b0 1c		      BCS	.skipL0813
  17271  3871				   .condpart285
  17272  3871		       a5 a2		      lda	rand
  17273  3873		       4a		      lsr
  17274  3874					      ifconst	rand16
  17275  3874		       26 d3		      rol	rand16
  17276  3876					      endif
  17277  3876		       90 02		      bcc	*+4
  17278  3878		       49 b4		      eor	#$B4
  17279  387a		       85 a2		      sta	rand
  17280  387c					      ifconst	rand16
  17281  387c		       45 d3		      eor	rand16
  17282  387e					      endif
  17283  387e		       85 a0		      STA	temp5
  17284  3880		       a5 e3		      LDA	_Plop_Rate
  17285  3882		       0a		      asl
  17286  3883		       0a		      asl
  17287  3884		       85 9f		      STA	temp4
  17288  3886		       a9 56		      LDA	#86
  17289  3888		       38		      SEC
  17290  3889		       e5 9f		      SBC	temp4
  17291  388b		       85 a1		      STA	temp6
  17292  388d				   .skipL0813
  17293  388d				   .
  17294  388d							; 
  17295  388d
  17296  388d				   .
  17297  388d							; 
  17298  388d
  17299  388d				   .
  17300  388d							; 
  17301  388d
  17302  388d				   .
  17303  388d							; 
  17304  388d
  17305  388d				   .L0814		;  if pfscore2  <  16 then temp4  =  _Plop_Rate  *  2	:  temp6  =  86  -  temp4
  17306  388d
  17307  388d		       a5 f3		      LDA	pfscore2
  17308  388f		       c9 10		      CMP	#16
  17309  3891		       b0 0c		      BCS	.skipL0814
  17310  3893				   .condpart286
  17311  3893		       a5 e3		      LDA	_Plop_Rate
  17312  3895		       0a		      asl
  17313  3896		       85 9f		      STA	temp4
  17314  3898		       a9 56		      LDA	#86
  17315  389a		       38		      SEC
  17316  389b		       e5 9f		      SBC	temp4
  17317  389d		       85 a1		      STA	temp6
  17318  389f				   .skipL0814
  17319  389f				   .
  17320  389f							; 
  17321  389f
  17322  389f				   .
  17323  389f							; 
  17324  389f
  17325  389f				   .
  17326  389f							; 
  17327  389f
  17328  389f				   .
  17329  389f							; 
  17330  389f
  17331  389f				   .L0815		;  if temp5  >  temp6 then goto __Skip_Corroded_Canister
  17332  389f
  17333  389f		       a5 a1		      LDA	temp6
  17334  38a1		       c5 a0		      CMP	temp5
  17335  38a3		       b0 03		      BCS	.skipL0815
  17336  38a5				   .condpart287
  17337  38a5		       4c 97 5a 	      jmp	.__Skip_Corroded_Canister
  17338  38a8
  17339  38a8				   .skipL0815
  17340  38a8				   .
  17341  38a8							; 
  17342  38a8
  17343  38a8				   .
  17344  38a8							; 
  17345  38a8
  17346  38a8				   .
  17347  38a8							; 
  17348  38a8
  17349  38a8				   .
  17350  38a8							; 
  17351  38a8
  17352  38a8				   .L0816		;  _Corrdd_App_Counter  =  30	:  _Corrdd_Shot_Counter  =  20
  17353  38a8
  17354  38a8		       a9 1e		      LDA	#30
  17355  38aa		       85 ea		      STA	_Corrdd_App_Counter
  17356  38ac		       a9 14		      LDA	#20
  17357  38ae		       85 ec		      STA	_Corrdd_Shot_Counter
  17358  38b0				   .
  17359  38b0							; 
  17360  38b0
  17361  38b0				   .L0817		;  _Bit2_Corrdd_Can_On{2}  =  1
  17362  38b0
  17363  38b0		       a5 c6		      LDA	_Bit2_Corrdd_Can_On
  17364  38b2		       09 04		      ORA	#4
  17365  38b4		       85 c6		      STA	_Bit2_Corrdd_Can_On
  17366  38b6				   .
  17367  38b6							; 
  17368  38b6
  17369  38b6				   .L0818		;  _MLoop_Tmp_Corrdd_Anim_Count  =  0	:  _Corroded_Anim_Frame  =  0
  17370  38b6
  17371  38b6		       a9 00		      LDA	#0
  17372  38b8		       85 b9		      STA	_MLoop_Tmp_Corrdd_Anim_Count
  17373  38ba		       85 c0		      STA	_Corroded_Anim_Frame
  17374  38bc				   .
  17375  38bc							; 
  17376  38bc
  17377  38bc				   .
  17378  38bc							; 
  17379  38bc
  17380  38bc				   .
  17381  38bc							; 
  17382  38bc
  17383  38bc				   .
  17384  38bc							; 
  17385  38bc
  17386  38bc				   .L0819		;  player1color:
  17387  38bc
  17388  38bc		       a2 60		      LDX	#<playercolorL0819_1
  17389  38be		       86 87		      STX	player1color
  17390  38c0		       a9 f9		      LDA	#>playercolorL0819_1
  17391  38c2		       85 88		      STA	player1color+1
  17392  38c4				   .
  17393  38c4							; 
  17394  38c4
  17395  38c4				   .
  17396  38c4							; 
  17397  38c4
  17398  38c4				   .
  17399  38c4							; 
  17400  38c4
  17401  38c4				   .
  17402  38c4							; 
  17403  38c4
  17404  38c4				   .L0820		;  temp5  =   ( rand & 7 ) 
  17405  38c4
  17406  38c4							; complex statement detected
  17407  38c4		       a5 a2		      lda	rand
  17408  38c6		       4a		      lsr
  17409  38c7					      ifconst	rand16
  17410  38c7		       26 d3		      rol	rand16
  17411  38c9					      endif
  17412  38c9		       90 02		      bcc	*+4
  17413  38cb		       49 b4		      eor	#$B4
  17414  38cd		       85 a2		      sta	rand
  17415  38cf					      ifconst	rand16
  17416  38cf		       45 d3		      eor	rand16
  17417  38d1					      endif
  17418  38d1		       29 07		      AND	#7
  17419  38d3		       85 a0		      STA	temp5
  17420  38d5				   .
  17421  38d5							; 
  17422  38d5
  17423  38d5				   .
  17424  38d5							; 
  17425  38d5
  17426  38d5				   .
  17427  38d5							; 
  17428  38d5
  17429  38d5				   .
  17430  38d5							; 
  17431  38d5
  17432  38d5				   .L0821		;  on temp5 gosub __Cor_Anim_0 __Cor_Anim_1 __Cor_Anim_2 __Cor_Anim_0 __Cor_Anim_4 __Cor_Anim_5 __Cor_Anim_1 __Cor_Anim_5
  17433  38d5
  17434  38d5		       a9 58		      lda	#>(ongosub2-1)
  17435  38d7		       48		      PHA
  17436  38d8		       a9 f5		      lda	#<(ongosub2-1)
  17437  38da		       48		      PHA
  17438  38db		       a6 a0		      LDX	temp5
  17439  38dd		       bd e6 58 	      LDA	.L0821jumptablehi,x
  17440  38e0		       48		      PHA
  17441  38e1		       bd ee 58 	      LDA	.L0821jumptablelo,x
  17442  38e4		       48		      PHA
  17443  38e5		       60		      RTS
  17444  38e6				   .L0821jumptablehi
  17445  38e6		       5d		      .byte.b	>(.__Cor_Anim_0-1)
  17446  38e7		       5d		      .byte.b	>(.__Cor_Anim_1-1)
  17447  38e8		       5d		      .byte.b	>(.__Cor_Anim_2-1)
  17448  38e9		       5d		      .byte.b	>(.__Cor_Anim_0-1)
  17449  38ea		       5d		      .byte.b	>(.__Cor_Anim_4-1)
  17450  38eb		       5d		      .byte.b	>(.__Cor_Anim_5-1)
  17451  38ec		       5d		      .byte.b	>(.__Cor_Anim_1-1)
  17452  38ed		       5d		      .byte.b	>(.__Cor_Anim_5-1)
  17453  38ee				   .L0821jumptablelo
  17454  38ee		       01		      .byte.b	<(.__Cor_Anim_0-1)
  17455  38ef		       12		      .byte.b	<(.__Cor_Anim_1-1)
  17456  38f0		       23		      .byte.b	<(.__Cor_Anim_2-1)
  17457  38f1		       01		      .byte.b	<(.__Cor_Anim_0-1)
  17458  38f2		       45		      .byte.b	<(.__Cor_Anim_4-1)
  17459  38f3		       56		      .byte.b	<(.__Cor_Anim_5-1)
  17460  38f4		       12		      .byte.b	<(.__Cor_Anim_1-1)
  17461  38f5		       56		      .byte.b	<(.__Cor_Anim_5-1)
  17462  38f6				   ongosub2
  17463  38f6				   .
  17464  38f6							; 
  17465  38f6
  17466  38f6				   .
  17467  38f6							; 
  17468  38f6
  17469  38f6				   .
  17470  38f6							; 
  17471  38f6
  17472  38f6				   .
  17473  38f6							; 
  17474  38f6
  17475  38f6				   .L0822		;  player1x  =   ( _Corrdd_X_Shot_Mem * 4 )  + 17
  17476  38f6
  17477  38f6							; complex statement detected
  17478  38f6		       a5 bc		      LDA	_Corrdd_X_Shot_Mem
  17479  38f8		       0a		      asl
  17480  38f9		       0a		      asl
  17481  38fa		       18		      CLC
  17482  38fb		       69 11		      ADC	#17
  17483  38fd		       85 81		      STA	player1x
  17484  38ff				   .
  17485  38ff							; 
  17486  38ff
  17487  38ff				   .L0823		;  player1y  =   ( _Corrdd_Y_Shot_Mem * 8 )  + 6
  17488  38ff
  17489  38ff							; complex statement detected
  17490  38ff		       a5 bd		      LDA	_Corrdd_Y_Shot_Mem
  17491  3901		       0a		      asl
  17492  3902		       0a		      asl
  17493  3903		       0a		      asl
  17494  3904		       18		      CLC
  17495  3905		       69 06		      ADC	#6
  17496  3907		       85 86		      STA	player1y
  17497  3909				   .
  17498  3909							; 
  17499  3909
  17500  3909				   .
  17501  3909							; 
  17502  3909
  17503  3909				   .
  17504  3909							; 
  17505  3909
  17506  3909				   .
  17507  3909							; 
  17508  3909
  17509  3909				   .L0824		;  _Ch1_Sound	=  _c_Corroded_Tick_Down  :  _Ch1_Counter  =  0  :  _Ch1_Duration  =  1
  17510  3909
  17511  3909		       a9 06		      LDA	#_c_Corroded_Tick_Down
  17512  390b		       85 dd		      STA	_Ch1_Sound
  17513  390d		       a9 00		      LDA	#0
  17514  390f		       85 df		      STA	_Ch1_Counter
  17515  3911		       a9 01		      LDA	#1
  17516  3913		       85 de		      STA	_Ch1_Duration
  17517  3915				   .
  17518  3915							; 
  17519  3915
  17520  3915				   .__Canister_Activated
  17521  3915							; __Canister_Activated
  17522  3915
  17523  3915				   .
  17524  3915							; 
  17525  3915
  17526  3915				   .
  17527  3915							; 
  17528  3915
  17529  3915				   .
  17530  3915							; 
  17531  3915
  17532  3915				   .
  17533  3915							; 
  17534  3915
  17535  3915				   .L0825		;  if _Bit3_Corroded_Can_Chase_Player{3} then goto __Cor_Can_Chase_Player
  17536  3915
  17537  3915		       a5 c6		      LDA	_Bit3_Corroded_Can_Chase_Player
  17538  3917		       29 08		      AND	#8
  17539  3919		       f0 03		      BEQ	.skipL0825
  17540  391b				   .condpart288
  17541  391b		       4c b0 59 	      jmp	.__Cor_Can_Chase_Player
  17542  391e
  17543  391e				   .skipL0825
  17544  391e				   .
  17545  391e							; 
  17546  391e
  17547  391e				   .
  17548  391e							; 
  17549  391e
  17550  391e				   .
  17551  391e							; 
  17552  391e
  17553  391e				   .
  17554  391e							; 
  17555  391e
  17556  391e				   .L0826		;  _Corrdd_Timer  =  _Corrdd_Timer  +	1
  17557  391e
  17558  391e		       e6 eb		      INC	_Corrdd_Timer
  17559  3920				   .
  17560  3920							; 
  17561  3920
  17562  3920				   .
  17563  3920							; 
  17564  3920
  17565  3920				   .
  17566  3920							; 
  17567  3920
  17568  3920				   .
  17569  3920							; 
  17570  3920
  17571  3920				   .L0827		;  if !collision(player0,player1) then goto __Skip_Corroded_Activated_Collision
  17572  3920
  17573  3920		       24 07		      bit	CXPPMM
  17574  3922		       30 03		      BMI	.skipL0827
  17575  3924				   .condpart289
  17576  3924		       4c a1 59 	      jmp	.__Skip_Corroded_Activated_Collision
  17577  3927
  17578  3927				   .skipL0827
  17579  3927				   .
  17580  3927							; 
  17581  3927
  17582  3927				   .
  17583  3927							; 
  17584  3927
  17585  3927				   .
  17586  3927							; 
  17587  3927
  17588  3927				   .
  17589  3927							; 
  17590  3927
  17591  3927				   .L0828		;  player1y  =  200
  17592  3927
  17593  3927		       a9 c8		      LDA	#200
  17594  3929		       85 86		      STA	player1y
  17595  392b				   .
  17596  392b							; 
  17597  392b
  17598  392b				   .L0829		;  _Ch1_Sound	=  _c_Canister_Touched	:  _Ch1_Counter  =  0  :  _Ch1_Duration  =  1
  17599  392b
  17600  392b		       a9 05		      LDA	#_c_Canister_Touched
  17601  392d		       85 dd		      STA	_Ch1_Sound
  17602  392f		       a9 00		      LDA	#0
  17603  3931		       85 df		      STA	_Ch1_Counter
  17604  3933		       a9 01		      LDA	#1
  17605  3935		       85 de		      STA	_Ch1_Duration
  17606  3937				   .
  17607  3937							; 
  17608  3937
  17609  3937				   .
  17610  3937							; 
  17611  3937
  17612  3937				   .
  17613  3937							; 
  17614  3937
  17615  3937				   .
  17616  3937							; 
  17617  3937
  17618  3937				   .
  17619  3937							; 
  17620  3937
  17621  3937				   .
  17622  3937							; 
  17623  3937
  17624  3937				   .
  17625  3937							; 
  17626  3937
  17627  3937				   .L0830		;  _Bit0_Game_Control{0}  =  0
  17628  3937
  17629  3937		       a5 d2		      LDA	_Bit0_Game_Control
  17630  3939		       29 fe		      AND	#254
  17631  393b		       85 d2		      STA	_Bit0_Game_Control
  17632  393d				   .
  17633  393d							; 
  17634  393d
  17635  393d				   .
  17636  393d							; 
  17637  393d
  17638  393d				   .
  17639  393d							; 
  17640  393d
  17641  393d				   .
  17642  393d							; 
  17643  393d
  17644  393d				   .L0831		;  _Points_Roll_Up  =	_Points_Roll_Up  +  10
  17645  393d
  17646  393d		       a5 e5		      LDA	_Points_Roll_Up
  17647  393f		       18		      CLC
  17648  3940		       69 0a		      ADC	#10
  17649  3942		       85 e5		      STA	_Points_Roll_Up
  17650  3944				   .
  17651  3944							; 
  17652  3944
  17653  3944				   .
  17654  3944							; 
  17655  3944
  17656  3944				   .
  17657  3944							; 
  17658  3944
  17659  3944				   .
  17660  3944							; 
  17661  3944
  17662  3944				   .L0832		;  _Bit5_Manatee_Health_Color{5}  =  1
  17663  3944
  17664  3944		       a5 c7		      LDA	_Bit5_Manatee_Health_Color
  17665  3946		       09 20		      ORA	#32
  17666  3948		       85 c7		      STA	_Bit5_Manatee_Health_Color
  17667  394a				   .
  17668  394a							; 
  17669  394a
  17670  394a				   .
  17671  394a							; 
  17672  394a
  17673  394a				   .
  17674  394a							; 
  17675  394a
  17676  394a				   .
  17677  394a							; 
  17678  394a
  17679  394a				   .L0833		;  if pfscore2  =  255  &&  pfscore1  =  255 then _Points_Roll_Up  =  _Points_Roll_Up	+  5  :  goto __Clear_Corroded
  17680  394a
  17681  394a		       a5 f3		      LDA	pfscore2
  17682  394c		       c9 ff		      CMP	#255
  17683  394e		       d0 10		      BNE	.skipL0833
  17684  3950				   .condpart290
  17685  3950		       a5 f2		      LDA	pfscore1
  17686  3952		       c9 ff		      CMP	#255
  17687  3954		       d0 0a		      BNE	.skip290then
  17688  3956				   .condpart291
  17689  3956		       a5 e5		      LDA	_Points_Roll_Up
  17690  3958		       18		      CLC
  17691  3959		       69 05		      ADC	#5
  17692  395b		       85 e5		      STA	_Points_Roll_Up
  17693  395d		       4c 83 5a 	      jmp	.__Clear_Corroded
  17694  3960
  17695  3960				   .skip290then
  17696  3960				   .skipL0833
  17697  3960				   .
  17698  3960							; 
  17699  3960
  17700  3960				   .
  17701  3960							; 
  17702  3960
  17703  3960				   .
  17704  3960							; 
  17705  3960
  17706  3960				   .
  17707  3960							; 
  17708  3960
  17709  3960				   .
  17710  3960							; 
  17711  3960
  17712  3960				   .L0834		;  if pfscore2  =  255 then if pfscore1  <  128 then pfscore1	=  pfscore1 * 2 | 1
  17713  3960
  17714  3960		       a5 f3		      LDA	pfscore2
  17715  3962		       c9 ff		      CMP	#255
  17716  3964		       d0 0d		      BNE	.skipL0834
  17717  3966				   .condpart292
  17718  3966		       a5 f2		      LDA	pfscore1
  17719  3968		       c9 80		      CMP	#128
  17720  396a		       b0 07		      BCS	.skip292then
  17721  396c				   .condpart293
  17722  396c							; complex statement detected
  17723  396c		       a5 f2		      LDA	pfscore1
  17724  396e		       0a		      asl
  17725  396f		       09 01		      ORA	#1
  17726  3971		       85 f2		      STA	pfscore1
  17727  3973				   .skip292then
  17728  3973				   .skipL0834
  17729  3973				   .
  17730  3973							; 
  17731  3973
  17732  3973				   .
  17733  3973							; 
  17734  3973
  17735  3973				   .
  17736  3973							; 
  17737  3973
  17738  3973				   .
  17739  3973							; 
  17740  3973
  17741  3973				   .L0835		;  if pfscore2  <  128 then pfscore2  =  pfscore2 * 2 | 1
  17742  3973
  17743  3973		       a5 f3		      LDA	pfscore2
  17744  3975		       c9 80		      CMP	#128
  17745  3977		       b0 07		      BCS	.skipL0835
  17746  3979				   .condpart294
  17747  3979							; complex statement detected
  17748  3979		       a5 f3		      LDA	pfscore2
  17749  397b		       0a		      asl
  17750  397c		       09 01		      ORA	#1
  17751  397e		       85 f3		      STA	pfscore2
  17752  3980				   .skipL0835
  17753  3980				   .
  17754  3980							; 
  17755  3980
  17756  3980				   .
  17757  3980							; 
  17758  3980
  17759  3980				   .
  17760  3980							; 
  17761  3980
  17762  3980				   .
  17763  3980							; 
  17764  3980
  17765  3980				   .L0836		;  if pfscore2  >  15 then pfscorecolor  =  $AE
  17766  3980
  17767  3980		       a9 0f		      LDA	#15
  17768  3982		       c5 f3		      CMP	pfscore2
  17769  3984		       b0 04		      BCS	.skipL0836
  17770  3986				   .condpart295
  17771  3986		       a9 ae		      LDA	#$AE
  17772  3988		       85 f4		      STA	pfscorecolor
  17773  398a				   .skipL0836
  17774  398a				   .
  17775  398a							; 
  17776  398a
  17777  398a				   .L0837		;  if pfscore2  <  16 then pfscorecolor  =  $1C
  17778  398a
  17779  398a		       a5 f3		      LDA	pfscore2
  17780  398c		       c9 10		      CMP	#16
  17781  398e		       b0 04		      BCS	.skipL0837
  17782  3990				   .condpart296
  17783  3990		       a9 1c		      LDA	#$1C
  17784  3992		       85 f4		      STA	pfscorecolor
  17785  3994				   .skipL0837
  17786  3994				   .
  17787  3994							; 
  17788  3994
  17789  3994				   .L0838		;  if pfscore2  <  3 then pfscorecolor  =  $32
  17790  3994
  17791  3994		       a5 f3		      LDA	pfscore2
  17792  3996		       c9 03		      CMP	#3
  17793  3998		       b0 04		      BCS	.skipL0838
  17794  399a				   .condpart297
  17795  399a		       a9 32		      LDA	#$32
  17796  399c		       85 f4		      STA	pfscorecolor
  17797  399e				   .skipL0838
  17798  399e				   .
  17799  399e							; 
  17800  399e
  17801  399e				   .L0839		;  goto __Clear_Corroded
  17802  399e
  17803  399e		       4c 83 5a 	      jmp	.__Clear_Corroded
  17804  39a1
  17805  39a1				   .
  17806  39a1							; 
  17807  39a1
  17808  39a1				   .__Skip_Corroded_Activated_Collision
  17809  39a1							; __Skip_Corroded_Activated_Collision
  17810  39a1
  17811  39a1				   .
  17812  39a1							; 
  17813  39a1
  17814  39a1				   .
  17815  39a1							; 
  17816  39a1
  17817  39a1				   .
  17818  39a1							; 
  17819  39a1
  17820  39a1				   .
  17821  39a1							; 
  17822  39a1
  17823  39a1				   .L0840		;  if _Corrdd_Timer  <  205 then goto __Skip_Corroded_Canister
  17824  39a1
  17825  39a1		       a5 eb		      LDA	_Corrdd_Timer
  17826  39a3		       c9 cd		      CMP	#205
  17827  39a5		       b0 03		      BCS	.skipL0840
  17828  39a7				   .condpart298
  17829  39a7		       4c 97 5a 	      jmp	.__Skip_Corroded_Canister
  17830  39aa
  17831  39aa				   .skipL0840
  17832  39aa				   .
  17833  39aa							; 
  17834  39aa
  17835  39aa				   .
  17836  39aa							; 
  17837  39aa
  17838  39aa				   .
  17839  39aa							; 
  17840  39aa
  17841  39aa				   .
  17842  39aa							; 
  17843  39aa
  17844  39aa				   .L0841		;  _Bit3_Corroded_Can_Chase_Player{3}	=  1
  17845  39aa
  17846  39aa		       a5 c6		      LDA	_Bit3_Corroded_Can_Chase_Player
  17847  39ac		       09 08		      ORA	#8
  17848  39ae		       85 c6		      STA	_Bit3_Corroded_Can_Chase_Player
  17849  39b0				   .
  17850  39b0							; 
  17851  39b0
  17852  39b0				   .__Cor_Can_Chase_Player
  17853  39b0							; __Cor_Can_Chase_Player
  17854  39b0
  17855  39b0				   .
  17856  39b0							; 
  17857  39b0
  17858  39b0				   .
  17859  39b0							; 
  17860  39b0
  17861  39b0				   .
  17862  39b0							; 
  17863  39b0
  17864  39b0				   .
  17865  39b0							; 
  17866  39b0
  17867  39b0				   .L0842		;  if _Ch1_Sound  =  _c_Corroded_Chase then goto __Skip_Chase_Sound
  17868  39b0
  17869  39b0		       a5 dd		      LDA	_Ch1_Sound
  17870  39b2		       c9 08		      CMP	#_c_Corroded_Chase
  17871  39b4		       d0 03		      BNE	.skipL0842
  17872  39b6				   .condpart299
  17873  39b6		       4c c5 59 	      jmp	.__Skip_Chase_Sound
  17874  39b9
  17875  39b9				   .skipL0842
  17876  39b9				   .
  17877  39b9							; 
  17878  39b9
  17879  39b9				   .L0843		;  _Ch1_Sound	=  _c_Corroded_Chase  :  _Ch1_Counter  =  0  :	_Ch1_Duration  =  1
  17880  39b9
  17881  39b9		       a9 08		      LDA	#_c_Corroded_Chase
  17882  39bb		       85 dd		      STA	_Ch1_Sound
  17883  39bd		       a9 00		      LDA	#0
  17884  39bf		       85 df		      STA	_Ch1_Counter
  17885  39c1		       a9 01		      LDA	#1
  17886  39c3		       85 de		      STA	_Ch1_Duration
  17887  39c5				   .
  17888  39c5							; 
  17889  39c5
  17890  39c5				   .__Skip_Chase_Sound
  17891  39c5							; __Skip_Chase_Sound
  17892  39c5
  17893  39c5				   .
  17894  39c5							; 
  17895  39c5
  17896  39c5				   .
  17897  39c5							; 
  17898  39c5
  17899  39c5				   .
  17900  39c5							; 
  17901  39c5
  17902  39c5				   .
  17903  39c5							; 
  17904  39c5
  17905  39c5				   .L0844		;  _MLoop_Tmp_Corrdd_Anim_Count  =  _MLoop_Tmp_Corrdd_Anim_Count  +  1
  17906  39c5
  17907  39c5		       e6 b9		      INC	_MLoop_Tmp_Corrdd_Anim_Count
  17908  39c7				   .
  17909  39c7							; 
  17910  39c7
  17911  39c7				   .L0845		;  if _MLoop_Tmp_Corrdd_Anim_Count  <	7 then goto __Skip_Corroded_Anim
  17912  39c7
  17913  39c7		       a5 b9		      LDA	_MLoop_Tmp_Corrdd_Anim_Count
  17914  39c9		       c9 07		      CMP	#7
  17915  39cb		       b0 03		      BCS	.skipL0845
  17916  39cd				   .condpart300
  17917  39cd		       4c fd 59 	      jmp	.__Skip_Corroded_Anim
  17918  39d0
  17919  39d0				   .skipL0845
  17920  39d0				   .
  17921  39d0							; 
  17922  39d0
  17923  39d0				   .L0846		;  _Corroded_Anim_Frame  =  _Corroded_Anim_Frame  +  1  :  _MLoop_Tmp_Corrdd_Anim_Count  =  0
  17924  39d0
  17925  39d0		       e6 c0		      INC	_Corroded_Anim_Frame
  17926  39d2		       a9 00		      LDA	#0
  17927  39d4		       85 b9		      STA	_MLoop_Tmp_Corrdd_Anim_Count
  17928  39d6				   .
  17929  39d6							; 
  17930  39d6
  17931  39d6				   .L0847		;  if _Corroded_Anim_Frame  >	5 then _Corroded_Anim_Frame  =	0
  17932  39d6
  17933  39d6		       a9 05		      LDA	#5
  17934  39d8		       c5 c0		      CMP	_Corroded_Anim_Frame
  17935  39da		       b0 04		      BCS	.skipL0847
  17936  39dc				   .condpart301
  17937  39dc		       a9 00		      LDA	#0
  17938  39de		       85 c0		      STA	_Corroded_Anim_Frame
  17939  39e0				   .skipL0847
  17940  39e0				   .
  17941  39e0							; 
  17942  39e0
  17943  39e0				   .L0848		;  on _Corroded_Anim_Frame gosub __Cor_Anim_0 __Cor_Anim_1 __Cor_Anim_2 __Cor_Anim_3 __Cor_Anim_4 __Cor_Anim_5
  17944  39e0
  17945  39e0		       a9 59		      lda	#>(ongosub3-1)
  17946  39e2		       48		      PHA
  17947  39e3		       a9 fc		      lda	#<(ongosub3-1)
  17948  39e5		       48		      PHA
  17949  39e6		       a6 c0		      LDX	_Corroded_Anim_Frame
  17950  39e8		       bd f1 59 	      LDA	.L0848jumptablehi,x
  17951  39eb		       48		      PHA
  17952  39ec		       bd f7 59 	      LDA	.L0848jumptablelo,x
  17953  39ef		       48		      PHA
  17954  39f0		       60		      RTS
  17955  39f1				   .L0848jumptablehi
  17956  39f1		       5d		      .byte.b	>(.__Cor_Anim_0-1)
  17957  39f2		       5d		      .byte.b	>(.__Cor_Anim_1-1)
  17958  39f3		       5d		      .byte.b	>(.__Cor_Anim_2-1)
  17959  39f4		       5d		      .byte.b	>(.__Cor_Anim_3-1)
  17960  39f5		       5d		      .byte.b	>(.__Cor_Anim_4-1)
  17961  39f6		       5d		      .byte.b	>(.__Cor_Anim_5-1)
  17962  39f7				   .L0848jumptablelo
  17963  39f7		       01		      .byte.b	<(.__Cor_Anim_0-1)
  17964  39f8		       12		      .byte.b	<(.__Cor_Anim_1-1)
  17965  39f9		       23		      .byte.b	<(.__Cor_Anim_2-1)
  17966  39fa		       34		      .byte.b	<(.__Cor_Anim_3-1)
  17967  39fb		       45		      .byte.b	<(.__Cor_Anim_4-1)
  17968  39fc		       56		      .byte.b	<(.__Cor_Anim_5-1)
  17969  39fd				   ongosub3
  17970  39fd				   .
  17971  39fd							; 
  17972  39fd
  17973  39fd				   .__Skip_Corroded_Anim
  17974  39fd							; __Skip_Corroded_Anim
  17975  39fd
  17976  39fd				   .
  17977  39fd							; 
  17978  39fd
  17979  39fd				   .
  17980  39fd							; 
  17981  39fd
  17982  39fd				   .
  17983  39fd							; 
  17984  39fd
  17985  39fd				   .
  17986  39fd							; 
  17987  39fd
  17988  39fd				   .L0849		;  if player1x  <  player0x then _P1_Left_Right  =  _P1_Left_Right  +	1.08
  17989  39fd
  17990  39fd		       a5 81		      LDA	player1x
  17991  39ff		       c5 80		      CMP	player0x
  17992  3a01		       b0 0d		      BCS	.skipL0849
  17993  3a03				   .condpart302
  17994  3a03		       a5 d7		      LDA	d
  17995  3a05		       18		      CLC
  17996  3a06		       69 14		      ADC	#20
  17997  3a08		       85 d7		      STA	d
  17998  3a0a		       a5 81		      LDA	_P1_Left_Right
  17999  3a0c		       69 01		      ADC	#1
  18000  3a0e		       85 81		      STA	_P1_Left_Right
  18001  3a10				   .skipL0849
  18002  3a10				   .L0850		;  if player1x  >  player0x then _P1_Left_Right  =  _P1_Left_Right  -	1.08
  18003  3a10
  18004  3a10		       a5 80		      LDA	player0x
  18005  3a12		       c5 81		      CMP	player1x
  18006  3a14		       b0 0d		      BCS	.skipL0850
  18007  3a16				   .condpart303
  18008  3a16		       a5 d7		      LDA	d
  18009  3a18		       38		      SEC
  18010  3a19		       e9 14		      SBC	#20
  18011  3a1b		       85 d7		      STA	d
  18012  3a1d		       a5 81		      LDA	_P1_Left_Right
  18013  3a1f		       e9 01		      SBC	#1
  18014  3a21		       85 81		      STA	_P1_Left_Right
  18015  3a23				   .skipL0850
  18016  3a23				   .
  18017  3a23							; 
  18018  3a23
  18019  3a23				   .L0851		;  if player1y  <  player0y then _P1_Up_Down  =  _P1_Up_Down  +  1.10
  18020  3a23
  18021  3a23		       a5 86		      LDA	player1y
  18022  3a25		       c5 85		      CMP	player0y
  18023  3a27		       b0 0d		      BCS	.skipL0851
  18024  3a29				   .condpart304
  18025  3a29		       a5 d6		      LDA	c
  18026  3a2b		       18		      CLC
  18027  3a2c		       69 19		      ADC	#25
  18028  3a2e		       85 d6		      STA	c
  18029  3a30		       a5 86		      LDA	_P1_Up_Down
  18030  3a32		       69 01		      ADC	#1
  18031  3a34		       85 86		      STA	_P1_Up_Down
  18032  3a36				   .skipL0851
  18033  3a36				   .L0852		;  if player1y  >  player0y then _P1_Up_Down  =  _P1_Up_Down  -  1.10
  18034  3a36
  18035  3a36		       a5 85		      LDA	player0y
  18036  3a38		       c5 86		      CMP	player1y
  18037  3a3a		       b0 0d		      BCS	.skipL0852
  18038  3a3c				   .condpart305
  18039  3a3c		       a5 d6		      LDA	c
  18040  3a3e		       38		      SEC
  18041  3a3f		       e9 19		      SBC	#25
  18042  3a41		       85 d6		      STA	c
  18043  3a43		       a5 86		      LDA	_P1_Up_Down
  18044  3a45		       e9 01		      SBC	#1
  18045  3a47		       85 86		      STA	_P1_Up_Down
  18046  3a49				   .skipL0852
  18047  3a49				   .
  18048  3a49							; 
  18049  3a49
  18050  3a49				   .
  18051  3a49							; 
  18052  3a49
  18053  3a49				   .
  18054  3a49							; 
  18055  3a49
  18056  3a49				   .
  18057  3a49							; 
  18058  3a49
  18059  3a49				   .L0853		;  if !collision(playfield,player1) then goto __Next_Corroded_Collision_Check
  18060  3a49
  18061  3a49		       24 03		      bit	CXP1FB
  18062  3a4b		       30 03		      BMI	.skipL0853
  18063  3a4d				   .condpart306
  18064  3a4d		       4c 63 5a 	      jmp	.__Next_Corroded_Collision_Check
  18065  3a50
  18066  3a50				   .skipL0853
  18067  3a50				   .
  18068  3a50							; 
  18069  3a50
  18070  3a50				   .
  18071  3a50							; 
  18072  3a50
  18073  3a50				   .
  18074  3a50							; 
  18075  3a50
  18076  3a50				   .
  18077  3a50							; 
  18078  3a50
  18079  3a50				   .L0854		;  player1y  =  200
  18080  3a50
  18081  3a50		       a9 c8		      LDA	#200
  18082  3a52		       85 86		      STA	player1y
  18083  3a54				   .
  18084  3a54							; 
  18085  3a54
  18086  3a54				   .
  18087  3a54							; 
  18088  3a54
  18089  3a54				   .
  18090  3a54							; 
  18091  3a54
  18092  3a54				   .
  18093  3a54							; 
  18094  3a54
  18095  3a54				   .L0855		;  _Ch1_Sound	=  _c_Corroded_Seaweed_Moosh  :  _Ch1_Counter  =  0  :	_Ch1_Duration  =  1
  18096  3a54
  18097  3a54		       a9 07		      LDA	#_c_Corroded_Seaweed_Moosh
  18098  3a56		       85 dd		      STA	_Ch1_Sound
  18099  3a58		       a9 00		      LDA	#0
  18100  3a5a		       85 df		      STA	_Ch1_Counter
  18101  3a5c		       a9 01		      LDA	#1
  18102  3a5e		       85 de		      STA	_Ch1_Duration
  18103  3a60				   .
  18104  3a60							; 
  18105  3a60
  18106  3a60				   .L0856		;  goto __Clear_Corroded
  18107  3a60
  18108  3a60		       4c 83 5a 	      jmp	.__Clear_Corroded
  18109  3a63
  18110  3a63				   .
  18111  3a63							; 
  18112  3a63
  18113  3a63				   .__Next_Corroded_Collision_Check
  18114  3a63							; __Next_Corroded_Collision_Check
  18115  3a63
  18116  3a63				   .
  18117  3a63							; 
  18118  3a63
  18119  3a63				   .
  18120  3a63							; 
  18121  3a63
  18122  3a63				   .
  18123  3a63							; 
  18124  3a63
  18125  3a63				   .
  18126  3a63							; 
  18127  3a63
  18128  3a63				   .L0857		;  if !collision(player0,player1) then goto __Skip_Corroded_Canister
  18129  3a63
  18130  3a63		       24 07		      bit	CXPPMM
  18131  3a65		       30 03		      BMI	.skipL0857
  18132  3a67				   .condpart307
  18133  3a67		       4c 97 5a 	      jmp	.__Skip_Corroded_Canister
  18134  3a6a
  18135  3a6a				   .skipL0857
  18136  3a6a				   .
  18137  3a6a							; 
  18138  3a6a
  18139  3a6a				   .
  18140  3a6a							; 
  18141  3a6a
  18142  3a6a				   .
  18143  3a6a							; 
  18144  3a6a
  18145  3a6a				   .
  18146  3a6a							; 
  18147  3a6a
  18148  3a6a				   .L0858		;  player1y  =  200
  18149  3a6a
  18150  3a6a		       a9 c8		      LDA	#200
  18151  3a6c		       85 86		      STA	player1y
  18152  3a6e				   .
  18153  3a6e							; 
  18154  3a6e
  18155  3a6e				   .
  18156  3a6e							; 
  18157  3a6e
  18158  3a6e				   .
  18159  3a6e							; 
  18160  3a6e
  18161  3a6e				   .
  18162  3a6e							; 
  18163  3a6e
  18164  3a6e				   .L0859		;  _Ch1_Sound	=  _c_Corroded_Hit_Ship  :  _Ch1_Counter  =  0	:  _Ch1_Duration  =  1
  18165  3a6e
  18166  3a6e		       a9 09		      LDA	#_c_Corroded_Hit_Ship
  18167  3a70		       85 dd		      STA	_Ch1_Sound
  18168  3a72		       a9 00		      LDA	#0
  18169  3a74		       85 df		      STA	_Ch1_Counter
  18170  3a76		       a9 01		      LDA	#1
  18171  3a78		       85 de		      STA	_Ch1_Duration
  18172  3a7a				   .
  18173  3a7a							; 
  18174  3a7a
  18175  3a7a				   .
  18176  3a7a							; 
  18177  3a7a
  18178  3a7a				   .
  18179  3a7a							; 
  18180  3a7a
  18181  3a7a				   .
  18182  3a7a							; 
  18183  3a7a
  18184  3a7a				   .L0860		;  gosub __Ouch_Dec_Health_01	:  _Bit1_P0_Hit_Seaweed{1}  =  0
  18185  3a7a
  18186  3a7a		       20 7d 5c 	      jsr	.__Ouch_Dec_Health_01
  18187  3a7d		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  18188  3a7f		       29 fd		      AND	#253
  18189  3a81		       85 c2		      STA	_Bit1_P0_Hit_Seaweed
  18190  3a83				   .
  18191  3a83							; 
  18192  3a83
  18193  3a83				   .__Clear_Corroded
  18194  3a83							; __Clear_Corroded
  18195  3a83
  18196  3a83				   .
  18197  3a83							; 
  18198  3a83
  18199  3a83				   .
  18200  3a83							; 
  18201  3a83
  18202  3a83				   .
  18203  3a83							; 
  18204  3a83
  18205  3a83				   .
  18206  3a83							; 
  18207  3a83
  18208  3a83				   .L0861		;  _Corrdd_App_Counter  =  0  :  _Corrdd_Timer  =  0  :  _Corrdd_Shot_Counter	=  0
  18209  3a83
  18210  3a83		       a9 00		      LDA	#0
  18211  3a85		       85 ea		      STA	_Corrdd_App_Counter
  18212  3a87		       85 eb		      STA	_Corrdd_Timer
  18213  3a89		       85 ec		      STA	_Corrdd_Shot_Counter
  18214  3a8b				   .
  18215  3a8b							; 
  18216  3a8b
  18217  3a8b				   .L0862		;  _Bit2_Corrdd_Can_On{2}  =  0  :  _Bit3_Corroded_Can_Chase_Player{3}  =  0
  18218  3a8b
  18219  3a8b		       a5 c6		      LDA	_Bit2_Corrdd_Can_On
  18220  3a8d		       29 fb		      AND	#251
  18221  3a8f		       85 c6		      STA	_Bit2_Corrdd_Can_On
  18222  3a91		       a5 c6		      LDA	_Bit3_Corroded_Can_Chase_Player
  18223  3a93		       29 f7		      AND	#247
  18224  3a95		       85 c6		      STA	_Bit3_Corroded_Can_Chase_Player
  18225  3a97				   .
  18226  3a97							; 
  18227  3a97
  18228  3a97				   .__Skip_Corroded_Canister
  18229  3a97							; __Skip_Corroded_Canister
  18230  3a97
  18231  3a97				   .
  18232  3a97							; 
  18233  3a97
  18234  3a97				   .
  18235  3a97							; 
  18236  3a97
  18237  3a97				   .
  18238  3a97							; 
  18239  3a97
  18240  3a97				   .
  18241  3a97							; 
  18242  3a97
  18243  3a97				   .
  18244  3a97							; 
  18245  3a97
  18246  3a97				   .
  18247  3a97							; 
  18248  3a97
  18249  3a97				   .
  18250  3a97							; 
  18251  3a97
  18252  3a97				   .
  18253  3a97							; 
  18254  3a97
  18255  3a97				   .
  18256  3a97							; 
  18257  3a97
  18258  3a97				   .
  18259  3a97							; 
  18260  3a97
  18261  3a97				   .
  18262  3a97							; 
  18263  3a97
  18264  3a97				   .
  18265  3a97							; 
  18266  3a97
  18267  3a97				   .L0863		;  if _Bit2_Move_Tentacle_Up{2} then goto __Skip_Tentacle_Activation
  18268  3a97
  18269  3a97		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  18270  3a99		       29 04		      AND	#4
  18271  3a9b		       f0 03		      BEQ	.skipL0863
  18272  3a9d				   .condpart308
  18273  3a9d		       4c e3 5a 	      jmp	.__Skip_Tentacle_Activation
  18274  3aa0
  18275  3aa0				   .skipL0863
  18276  3aa0				   .
  18277  3aa0							; 
  18278  3aa0
  18279  3aa0				   .
  18280  3aa0							; 
  18281  3aa0
  18282  3aa0				   .
  18283  3aa0							; 
  18284  3aa0
  18285  3aa0				   .
  18286  3aa0							; 
  18287  3aa0
  18288  3aa0				   .L0864		;  if _Tentacle_Grab_Counter  <>  8 then goto __Skip_Tentacle_Activation
  18289  3aa0
  18290  3aa0		       a5 e6		      LDA	_Tentacle_Grab_Counter
  18291  3aa2		       c9 08		      CMP	#8
  18292  3aa4		       f0 03		      BEQ	.skipL0864
  18293  3aa6				   .condpart309
  18294  3aa6		       4c e3 5a 	      jmp	.__Skip_Tentacle_Activation
  18295  3aa9
  18296  3aa9				   .skipL0864
  18297  3aa9				   .
  18298  3aa9							; 
  18299  3aa9
  18300  3aa9				   .
  18301  3aa9							; 
  18302  3aa9
  18303  3aa9				   .
  18304  3aa9							; 
  18305  3aa9
  18306  3aa9				   .
  18307  3aa9							; 
  18308  3aa9
  18309  3aa9				   .L0865		;  if bally  <  200 then goto __Skip_Tentacle_Activation
  18310  3aa9
  18311  3aa9		       a5 89		      LDA	bally
  18312  3aab		       c9 c8		      CMP	#200
  18313  3aad		       b0 03		      BCS	.skipL0865
  18314  3aaf				   .condpart310
  18315  3aaf		       4c e3 5a 	      jmp	.__Skip_Tentacle_Activation
  18316  3ab2
  18317  3ab2				   .skipL0865
  18318  3ab2				   .
  18319  3ab2							; 
  18320  3ab2
  18321  3ab2				   .
  18322  3ab2							; 
  18323  3ab2
  18324  3ab2				   .
  18325  3ab2							; 
  18326  3ab2
  18327  3ab2				   .
  18328  3ab2							; 
  18329  3ab2
  18330  3ab2				   .L0866		;  _Tentacle_Grab_Counter  =  0
  18331  3ab2
  18332  3ab2		       a9 00		      LDA	#0
  18333  3ab4		       85 e6		      STA	_Tentacle_Grab_Counter
  18334  3ab6				   .
  18335  3ab6							; 
  18336  3ab6
  18337  3ab6				   .
  18338  3ab6							; 
  18339  3ab6
  18340  3ab6				   .
  18341  3ab6							; 
  18342  3ab6
  18343  3ab6				   .
  18344  3ab6							; 
  18345  3ab6
  18346  3ab6				   .L0867		;  if _Bit1_Auto_Play{1} then goto __Activate_Tentacle
  18347  3ab6
  18348  3ab6		       a5 d2		      LDA	_Bit1_Auto_Play
  18349  3ab8		       29 02		      AND	#2
  18350  3aba		       f0 03		      BEQ	.skipL0867
  18351  3abc				   .condpart311
  18352  3abc		       4c c6 5a 	      jmp	.__Activate_Tentacle
  18353  3abf
  18354  3abf				   .skipL0867
  18355  3abf				   .
  18356  3abf							; 
  18357  3abf
  18358  3abf				   .
  18359  3abf							; 
  18360  3abf
  18361  3abf				   .
  18362  3abf							; 
  18363  3abf
  18364  3abf				   .
  18365  3abf							; 
  18366  3abf
  18367  3abf				   .L0868		;  if _Ch1_Sound then goto __Skip_Tentacle_Activation
  18368  3abf
  18369  3abf		       a5 dd		      LDA	_Ch1_Sound
  18370  3ac1		       f0 03		      BEQ	.skipL0868
  18371  3ac3				   .condpart312
  18372  3ac3		       4c e3 5a 	      jmp	.__Skip_Tentacle_Activation
  18373  3ac6
  18374  3ac6				   .skipL0868
  18375  3ac6				   .
  18376  3ac6							; 
  18377  3ac6
  18378  3ac6				   .__Activate_Tentacle
  18379  3ac6							; __Activate_Tentacle
  18380  3ac6
  18381  3ac6				   .
  18382  3ac6							; 
  18383  3ac6
  18384  3ac6				   .
  18385  3ac6							; 
  18386  3ac6
  18387  3ac6				   .
  18388  3ac6							; 
  18389  3ac6
  18390  3ac6				   .
  18391  3ac6							; 
  18392  3ac6
  18393  3ac6				   .L0869		;  _Tentacle_Grab_Counter  =  20  :  _Bit2_Move_Tentacle_Up{2}  =  1  :  ballx  =  player0x  +  3
  18394  3ac6
  18395  3ac6		       a9 14		      LDA	#20
  18396  3ac8		       85 e6		      STA	_Tentacle_Grab_Counter
  18397  3aca		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  18398  3acc		       09 04		      ORA	#4
  18399  3ace		       85 c4		      STA	_Bit2_Move_Tentacle_Up
  18400  3ad0		       a5 80		      LDA	player0x
  18401  3ad2		       18		      CLC
  18402  3ad3		       69 03		      ADC	#3
  18403  3ad5		       85 84		      STA	ballx
  18404  3ad7				   .
  18405  3ad7							; 
  18406  3ad7
  18407  3ad7				   .
  18408  3ad7							; 
  18409  3ad7
  18410  3ad7				   .
  18411  3ad7							; 
  18412  3ad7
  18413  3ad7				   .
  18414  3ad7							; 
  18415  3ad7
  18416  3ad7				   .L0870		;  _Ch1_Sound	=  _c_Tentacle_Reaching_Up  :  _Ch1_Counter  =	0  :  _Ch1_Duration  =	1
  18417  3ad7
  18418  3ad7		       a9 02		      LDA	#_c_Tentacle_Reaching_Up
  18419  3ad9		       85 dd		      STA	_Ch1_Sound
  18420  3adb		       a9 00		      LDA	#0
  18421  3add		       85 df		      STA	_Ch1_Counter
  18422  3adf		       a9 01		      LDA	#1
  18423  3ae1		       85 de		      STA	_Ch1_Duration
  18424  3ae3				   .
  18425  3ae3							; 
  18426  3ae3
  18427  3ae3				   .__Skip_Tentacle_Activation
  18428  3ae3							; __Skip_Tentacle_Activation
  18429  3ae3
  18430  3ae3				   .
  18431  3ae3							; 
  18432  3ae3
  18433  3ae3				   .
  18434  3ae3							; 
  18435  3ae3
  18436  3ae3				   .
  18437  3ae3							; 
  18438  3ae3
  18439  3ae3				   .
  18440  3ae3							; 
  18441  3ae3
  18442  3ae3				   .
  18443  3ae3							; 
  18444  3ae3
  18445  3ae3				   .
  18446  3ae3							; 
  18447  3ae3
  18448  3ae3				   .
  18449  3ae3							; 
  18450  3ae3
  18451  3ae3				   .
  18452  3ae3							; 
  18453  3ae3
  18454  3ae3				   .
  18455  3ae3							; 
  18456  3ae3
  18457  3ae3				   .
  18458  3ae3							; 
  18459  3ae3
  18460  3ae3				   .
  18461  3ae3							; 
  18462  3ae3
  18463  3ae3				   .
  18464  3ae3							; 
  18465  3ae3
  18466  3ae3				   .L0871		;  if !_Bit2_Move_Tentacle_Up{2} then if bally  <  200 then goto __Skip_Tentacle_Reach
  18467  3ae3
  18468  3ae3		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  18469  3ae5		       29 04		      AND	#4
  18470  3ae7		       d0 09		      BNE	.skipL0871
  18471  3ae9				   .condpart313
  18472  3ae9		       a5 89		      LDA	bally
  18473  3aeb		       c9 c8		      CMP	#200
  18474  3aed		       b0 03		      BCS	.skip313then
  18475  3aef				   .condpart314
  18476  3aef		       4c 53 5b 	      jmp	.__Skip_Tentacle_Reach
  18477  3af2
  18478  3af2				   .skip313then
  18479  3af2				   .skipL0871
  18480  3af2				   .
  18481  3af2							; 
  18482  3af2
  18483  3af2				   .
  18484  3af2							; 
  18485  3af2
  18486  3af2				   .
  18487  3af2							; 
  18488  3af2
  18489  3af2				   .
  18490  3af2							; 
  18491  3af2
  18492  3af2				   .L0872		;  if !_Bit2_Move_Tentacle_Up{2} then _Bit7_Tentacle_Touched{7}  =  0	:  goto __Skip_Grab
  18493  3af2
  18494  3af2		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  18495  3af4		       29 04		      AND	#4
  18496  3af6		       d0 09		      BNE	.skipL0872
  18497  3af8				   .condpart315
  18498  3af8		       a5 c7		      LDA	_Bit7_Tentacle_Touched
  18499  3afa		       29 7f		      AND	#127
  18500  3afc		       85 c7		      STA	_Bit7_Tentacle_Touched
  18501  3afe		       4c e5 5b 	      jmp	.__Skip_Grab
  18502  3b01
  18503  3b01				   .skipL0872
  18504  3b01				   .
  18505  3b01							; 
  18506  3b01
  18507  3b01				   .
  18508  3b01							; 
  18509  3b01
  18510  3b01				   .
  18511  3b01							; 
  18512  3b01
  18513  3b01				   .
  18514  3b01							; 
  18515  3b01
  18516  3b01				   .
  18517  3b01							; 
  18518  3b01
  18519  3b01				   .
  18520  3b01							; 
  18521  3b01
  18522  3b01				   .
  18523  3b01							; 
  18524  3b01
  18525  3b01				   .L0873		;  if _Ch1_Sound  <>  _c_Tentacle_Reaching_Up then goto __Skip_Grab_Sound_Test
  18526  3b01
  18527  3b01		       a5 dd		      LDA	_Ch1_Sound
  18528  3b03		       c9 02		      CMP	#_c_Tentacle_Reaching_Up
  18529  3b05		       f0 03		      BEQ	.skipL0873
  18530  3b07				   .condpart316
  18531  3b07		       4c 22 5b 	      jmp	.__Skip_Grab_Sound_Test
  18532  3b0a
  18533  3b0a				   .skipL0873
  18534  3b0a				   .
  18535  3b0a							; 
  18536  3b0a
  18537  3b0a				   .
  18538  3b0a							; 
  18539  3b0a
  18540  3b0a				   .
  18541  3b0a							; 
  18542  3b0a
  18543  3b0a				   .
  18544  3b0a							; 
  18545  3b0a
  18546  3b0a				   .L0874		;  if _Bit1_Auto_Play{1} then goto __Skip_Grab_Sound_Test
  18547  3b0a
  18548  3b0a		       a5 d2		      LDA	_Bit1_Auto_Play
  18549  3b0c		       29 02		      AND	#2
  18550  3b0e		       f0 03		      BEQ	.skipL0874
  18551  3b10				   .condpart317
  18552  3b10		       4c 22 5b 	      jmp	.__Skip_Grab_Sound_Test
  18553  3b13
  18554  3b13				   .skipL0874
  18555  3b13				   .
  18556  3b13							; 
  18557  3b13
  18558  3b13				   .
  18559  3b13							; 
  18560  3b13
  18561  3b13				   .
  18562  3b13							; 
  18563  3b13
  18564  3b13				   .
  18565  3b13							; 
  18566  3b13
  18567  3b13				   .
  18568  3b13							; 
  18569  3b13
  18570  3b13				   .L0875		;  if player0y  >  59 then if _Ch1_Counter  <	17 then goto __Skip_Grab
  18571  3b13
  18572  3b13		       a9 3b		      LDA	#59
  18573  3b15		       c5 85		      CMP	player0y
  18574  3b17		       b0 09		      BCS	.skipL0875
  18575  3b19				   .condpart318
  18576  3b19		       a5 df		      LDA	_Ch1_Counter
  18577  3b1b		       c9 11		      CMP	#17
  18578  3b1d		       b0 03		      BCS	.skip318then
  18579  3b1f				   .condpart319
  18580  3b1f		       4c e5 5b 	      jmp	.__Skip_Grab
  18581  3b22
  18582  3b22				   .skip318then
  18583  3b22				   .skipL0875
  18584  3b22				   .
  18585  3b22							; 
  18586  3b22
  18587  3b22				   .__Skip_Grab_Sound_Test
  18588  3b22							; __Skip_Grab_Sound_Test
  18589  3b22
  18590  3b22				   .
  18591  3b22							; 
  18592  3b22
  18593  3b22				   .
  18594  3b22							; 
  18595  3b22
  18596  3b22				   .
  18597  3b22							; 
  18598  3b22
  18599  3b22				   .
  18600  3b22							; 
  18601  3b22
  18602  3b22				   .
  18603  3b22							; 
  18604  3b22
  18605  3b22				   .
  18606  3b22							; 
  18607  3b22
  18608  3b22				   .
  18609  3b22							; 
  18610  3b22
  18611  3b22				   .L0876		;  _Ball_Y  =	_Ball_Y  -  1.00
  18612  3b22
  18613  3b22		       a5 b6		      LDA	var18
  18614  3b24		       38		      SEC
  18615  3b25		       e9 00		      SBC	#0
  18616  3b27		       85 b6		      STA	var18
  18617  3b29		       a5 89		      LDA	_Ball_Y
  18618  3b2b		       e9 01		      SBC	#1
  18619  3b2d		       85 89		      STA	_Ball_Y
  18620  3b2f				   .
  18621  3b2f							; 
  18622  3b2f
  18623  3b2f				   .
  18624  3b2f							; 
  18625  3b2f
  18626  3b2f				   .
  18627  3b2f							; 
  18628  3b2f
  18629  3b2f				   .
  18630  3b2f							; 
  18631  3b2f
  18632  3b2f				   .L0877		;  if player0y  <  60 then _Ball_Y  =	_Ball_Y  -  0.32
  18633  3b2f
  18634  3b2f		       a5 85		      LDA	player0y
  18635  3b31		       c9 3c		      CMP	#60
  18636  3b33		       b0 0d		      BCS	.skipL0877
  18637  3b35				   .condpart320
  18638  3b35		       a5 b6		      LDA	var18
  18639  3b37		       38		      SEC
  18640  3b38		       e9 51		      SBC	#81
  18641  3b3a		       85 b6		      STA	var18
  18642  3b3c		       a5 89		      LDA	_Ball_Y
  18643  3b3e		       e9 00		      SBC	#0
  18644  3b40		       85 89		      STA	_Ball_Y
  18645  3b42				   .skipL0877
  18646  3b42				   .
  18647  3b42							; 
  18648  3b42
  18649  3b42				   .
  18650  3b42							; 
  18651  3b42
  18652  3b42				   .
  18653  3b42							; 
  18654  3b42
  18655  3b42				   .
  18656  3b42							; 
  18657  3b42
  18658  3b42				   .L0878		;  if _Bit6_Manatee_Moved_Away{6} then _Ball_Y  =  _Ball_Y  -	3.00
  18659  3b42
  18660  3b42		       24 c7		      BIT	_Bit6_Manatee_Moved_Away
  18661  3b44		       50 0d		      BVC	.skipL0878
  18662  3b46				   .condpart321
  18663  3b46		       a5 b6		      LDA	var18
  18664  3b48		       38		      SEC
  18665  3b49		       e9 00		      SBC	#0
  18666  3b4b		       85 b6		      STA	var18
  18667  3b4d		       a5 89		      LDA	_Ball_Y
  18668  3b4f		       e9 03		      SBC	#3
  18669  3b51		       85 89		      STA	_Ball_Y
  18670  3b53				   .skipL0878
  18671  3b53				   .
  18672  3b53							; 
  18673  3b53
  18674  3b53				   .__Skip_Tentacle_Reach
  18675  3b53							; __Skip_Tentacle_Reach
  18676  3b53
  18677  3b53				   .
  18678  3b53							; 
  18679  3b53
  18680  3b53				   .
  18681  3b53							; 
  18682  3b53
  18683  3b53				   .
  18684  3b53							; 
  18685  3b53
  18686  3b53				   .
  18687  3b53							; 
  18688  3b53
  18689  3b53				   .
  18690  3b53							; 
  18691  3b53
  18692  3b53				   .
  18693  3b53							; 
  18694  3b53
  18695  3b53				   .
  18696  3b53							; 
  18697  3b53
  18698  3b53				   .
  18699  3b53							; 
  18700  3b53
  18701  3b53				   .L0879		;  if _Bit7_Tentacle_Touched{7} then _Bit2_Move_Tentacle_Up{2}  =  0  :  goto __Skip_Tentacle_Collision
  18702  3b53
  18703  3b53		       24 c7		      BIT	_Bit7_Tentacle_Touched
  18704  3b55		       10 09		      BPL	.skipL0879
  18705  3b57				   .condpart322
  18706  3b57		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  18707  3b59		       29 fb		      AND	#251
  18708  3b5b		       85 c4		      STA	_Bit2_Move_Tentacle_Up
  18709  3b5d		       4c a0 5b 	      jmp	.__Skip_Tentacle_Collision
  18710  3b60
  18711  3b60				   .skipL0879
  18712  3b60				   .
  18713  3b60							; 
  18714  3b60
  18715  3b60				   .
  18716  3b60							; 
  18717  3b60
  18718  3b60				   .
  18719  3b60							; 
  18720  3b60
  18721  3b60				   .
  18722  3b60							; 
  18723  3b60
  18724  3b60				   .L0880		;  if !collision(ball,player0) then goto __Skip_Tentacle_Collision
  18725  3b60
  18726  3b60		       24 02		      bit	CXP0FB
  18727  3b62		       70 03		      BVS	.skipL0880
  18728  3b64				   .condpart323
  18729  3b64		       4c a0 5b 	      jmp	.__Skip_Tentacle_Collision
  18730  3b67
  18731  3b67				   .skipL0880
  18732  3b67				   .
  18733  3b67							; 
  18734  3b67
  18735  3b67				   .
  18736  3b67							; 
  18737  3b67
  18738  3b67				   .
  18739  3b67							; 
  18740  3b67
  18741  3b67				   .
  18742  3b67							; 
  18743  3b67
  18744  3b67				   .
  18745  3b67							; 
  18746  3b67
  18747  3b67				   .L0881		;  _Bit2_Move_Tentacle_Up{2}  =  0  :	_Bit7_Tentacle_Touched{7}  =  1
  18748  3b67
  18749  3b67		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  18750  3b69		       29 fb		      AND	#251
  18751  3b6b		       85 c4		      STA	_Bit2_Move_Tentacle_Up
  18752  3b6d		       a5 c7		      LDA	_Bit7_Tentacle_Touched
  18753  3b6f		       09 80		      ORA	#128
  18754  3b71		       85 c7		      STA	_Bit7_Tentacle_Touched
  18755  3b73				   .
  18756  3b73							; 
  18757  3b73
  18758  3b73				   .
  18759  3b73							; 
  18760  3b73
  18761  3b73				   .
  18762  3b73							; 
  18763  3b73
  18764  3b73				   .
  18765  3b73							; 
  18766  3b73
  18767  3b73				   .
  18768  3b73							; 
  18769  3b73
  18770  3b73				   .L0882		;  if _P0_Up_Down  >  83 then gosub __Ouch_Dec_Health_01  :  goto __Check_Grab_Position
  18771  3b73
  18772  3b73		       a9 53		      LDA	#83
  18773  3b75		       c5 85		      CMP	_P0_Up_Down
  18774  3b77		       b0 06		      BCS	.skipL0882
  18775  3b79				   .condpart324
  18776  3b79		       20 7d 5c 	      jsr	.__Ouch_Dec_Health_01
  18777  3b7c		       4c b6 5b 	      jmp	.__Check_Grab_Position
  18778  3b7f
  18779  3b7f				   .skipL0882
  18780  3b7f				   .
  18781  3b7f							; 
  18782  3b7f
  18783  3b7f				   .
  18784  3b7f							; 
  18785  3b7f
  18786  3b7f				   .
  18787  3b7f							; 
  18788  3b7f
  18789  3b7f				   .
  18790  3b7f							; 
  18791  3b7f
  18792  3b7f				   .L0883		;  _Slide_Counter  =  0
  18793  3b7f
  18794  3b7f		       a9 00		      LDA	#0
  18795  3b81		       85 e0		      STA	_Slide_Counter
  18796  3b83				   .
  18797  3b83							; 
  18798  3b83
  18799  3b83				   .L0884		;  _Slide_Speed  =  1	:  _Bit3_Ship_Yanked_Down{3}  =  1
  18800  3b83
  18801  3b83		       a9 01		      LDA	#1
  18802  3b85		       85 e1		      STA	_Slide_Speed
  18803  3b87		       a5 c4		      LDA	_Bit3_Ship_Yanked_Down
  18804  3b89		       09 08		      ORA	#8
  18805  3b8b		       85 c4		      STA	_Bit3_Ship_Yanked_Down
  18806  3b8d				   .
  18807  3b8d							; 
  18808  3b8d
  18809  3b8d				   .L0885		;  _P0_Up_Down  =  _P0_Up_Down  +  4.02
  18810  3b8d
  18811  3b8d		       a5 d5		      LDA	b
  18812  3b8f		       18		      CLC
  18813  3b90		       69 05		      ADC	#5
  18814  3b92		       85 d5		      STA	b
  18815  3b94		       a5 85		      LDA	_P0_Up_Down
  18816  3b96		       69 04		      ADC	#4
  18817  3b98		       85 85		      STA	_P0_Up_Down
  18818  3b9a				   .
  18819  3b9a							; 
  18820  3b9a
  18821  3b9a				   .L0886		;  gosub __Ouch_Dec_Health_01
  18822  3b9a
  18823  3b9a		       20 7d 5c 	      jsr	.__Ouch_Dec_Health_01
  18824  3b9d
  18825  3b9d				   .
  18826  3b9d							; 
  18827  3b9d
  18828  3b9d				   .L0887		;  goto __Check_Grab_Position
  18829  3b9d
  18830  3b9d		       4c b6 5b 	      jmp	.__Check_Grab_Position
  18831  3ba0
  18832  3ba0				   .
  18833  3ba0							; 
  18834  3ba0
  18835  3ba0				   .__Skip_Tentacle_Collision
  18836  3ba0							; __Skip_Tentacle_Collision
  18837  3ba0
  18838  3ba0				   .
  18839  3ba0							; 
  18840  3ba0
  18841  3ba0				   .
  18842  3ba0							; 
  18843  3ba0
  18844  3ba0				   .
  18845  3ba0							; 
  18846  3ba0
  18847  3ba0				   .
  18848  3ba0							; 
  18849  3ba0
  18850  3ba0				   .L0888		;  if bally  <  103 then _Tentacle_Grab_Counter  =  0	:  _Bit2_Move_Tentacle_Up{2}  =  0  :  _Bit6_Manatee_Moved_Away{6}  =  0
  18851  3ba0
  18852  3ba0		       a5 89		      LDA	bally
  18853  3ba2		       c9 67		      CMP	#103
  18854  3ba4		       b0 10		      BCS	.skipL0888
  18855  3ba6				   .condpart325
  18856  3ba6		       a9 00		      LDA	#0
  18857  3ba8		       85 e6		      STA	_Tentacle_Grab_Counter
  18858  3baa		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  18859  3bac		       29 fb		      AND	#251
  18860  3bae		       85 c4		      STA	_Bit2_Move_Tentacle_Up
  18861  3bb0		       a5 c7		      LDA	_Bit6_Manatee_Moved_Away
  18862  3bb2		       29 bf		      AND	#191
  18863  3bb4		       85 c7		      STA	_Bit6_Manatee_Moved_Away
  18864  3bb6				   .skipL0888
  18865  3bb6				   .
  18866  3bb6							; 
  18867  3bb6
  18868  3bb6				   .__Check_Grab_Position
  18869  3bb6							; __Check_Grab_Position
  18870  3bb6
  18871  3bb6				   .
  18872  3bb6							; 
  18873  3bb6
  18874  3bb6				   .
  18875  3bb6							; 
  18876  3bb6
  18877  3bb6				   .
  18878  3bb6							; 
  18879  3bb6
  18880  3bb6				   .
  18881  3bb6							; 
  18882  3bb6
  18883  3bb6				   .L0889		;  if _Bit2_Move_Tentacle_Up{2} then goto __Skip_Grab
  18884  3bb6
  18885  3bb6		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  18886  3bb8		       29 04		      AND	#4
  18887  3bba		       f0 03		      BEQ	.skipL0889
  18888  3bbc				   .condpart326
  18889  3bbc		       4c e5 5b 	      jmp	.__Skip_Grab
  18890  3bbf
  18891  3bbf				   .skipL0889
  18892  3bbf				   .
  18893  3bbf							; 
  18894  3bbf
  18895  3bbf				   .
  18896  3bbf							; 
  18897  3bbf
  18898  3bbf				   .
  18899  3bbf							; 
  18900  3bbf
  18901  3bbf				   .
  18902  3bbf							; 
  18903  3bbf
  18904  3bbf				   .
  18905  3bbf							; 
  18906  3bbf
  18907  3bbf				   .
  18908  3bbf							; 
  18909  3bbf
  18910  3bbf				   .
  18911  3bbf							; 
  18912  3bbf
  18913  3bbf				   .
  18914  3bbf							; 
  18915  3bbf
  18916  3bbf				   .
  18917  3bbf							; 
  18918  3bbf
  18919  3bbf				   .
  18920  3bbf							; 
  18921  3bbf
  18922  3bbf				   .
  18923  3bbf							; 
  18924  3bbf
  18925  3bbf				   .L0890		;  if bally  >  199 then goto __Skip_Grab
  18926  3bbf
  18927  3bbf		       a9 c7		      LDA	#199
  18928  3bc1		       c5 89		      CMP	bally
  18929  3bc3		       b0 03		      BCS	.skipL0890
  18930  3bc5				   .condpart327
  18931  3bc5		       4c e5 5b 	      jmp	.__Skip_Grab
  18932  3bc8
  18933  3bc8				   .skipL0890
  18934  3bc8				   .
  18935  3bc8							; 
  18936  3bc8
  18937  3bc8				   .
  18938  3bc8							; 
  18939  3bc8
  18940  3bc8				   .
  18941  3bc8							; 
  18942  3bc8
  18943  3bc8				   .
  18944  3bc8							; 
  18945  3bc8
  18946  3bc8				   .L0891		;  _Bit2_Move_Tentacle_Up{2}  =  0  :	_Bit6_Manatee_Moved_Away{6}  =	0  :  _Tentacle_Grab_Counter  =  0
  18947  3bc8
  18948  3bc8		       a5 c4		      LDA	_Bit2_Move_Tentacle_Up
  18949  3bca		       29 fb		      AND	#251
  18950  3bcc		       85 c4		      STA	_Bit2_Move_Tentacle_Up
  18951  3bce		       a5 c7		      LDA	_Bit6_Manatee_Moved_Away
  18952  3bd0		       29 bf		      AND	#191
  18953  3bd2		       85 c7		      STA	_Bit6_Manatee_Moved_Away
  18954  3bd4		       a9 00		      LDA	#0
  18955  3bd6		       85 e6		      STA	_Tentacle_Grab_Counter
  18956  3bd8				   .
  18957  3bd8							; 
  18958  3bd8
  18959  3bd8				   .
  18960  3bd8							; 
  18961  3bd8
  18962  3bd8				   .
  18963  3bd8							; 
  18964  3bd8
  18965  3bd8				   .
  18966  3bd8							; 
  18967  3bd8
  18968  3bd8				   .L0892		;  _Ball_Y  =	_Ball_Y  +  2.00
  18969  3bd8
  18970  3bd8		       a5 b6		      LDA	var18
  18971  3bda		       18		      CLC
  18972  3bdb		       69 00		      ADC	#0
  18973  3bdd		       85 b6		      STA	var18
  18974  3bdf		       a5 89		      LDA	_Ball_Y
  18975  3be1		       69 02		      ADC	#2
  18976  3be3		       85 89		      STA	_Ball_Y
  18977  3be5				   .
  18978  3be5							; 
  18979  3be5
  18980  3be5				   .__Skip_Grab
  18981  3be5							; __Skip_Grab
  18982  3be5
  18983  3be5				   .
  18984  3be5							; 
  18985  3be5
  18986  3be5				   .
  18987  3be5							; 
  18988  3be5
  18989  3be5				   .
  18990  3be5							; 
  18991  3be5
  18992  3be5				   .
  18993  3be5							; 
  18994  3be5
  18995  3be5				   .
  18996  3be5							; 
  18997  3be5
  18998  3be5				   .
  18999  3be5							; 
  19000  3be5
  19001  3be5				   .
  19002  3be5							; 
  19003  3be5
  19004  3be5				   .
  19005  3be5							; 
  19006  3be5
  19007  3be5				   .
  19008  3be5							; 
  19009  3be5
  19010  3be5				   .
  19011  3be5							; 
  19012  3be5
  19013  3be5				   .L0893		;  if _Bit1_Auto_Play{1} then goto __Skip_Homing_Cycle
  19014  3be5
  19015  3be5		       a5 d2		      LDA	_Bit1_Auto_Play
  19016  3be7		       29 02		      AND	#2
  19017  3be9		       f0 03		      BEQ	.skipL0893
  19018  3beb				   .condpart328
  19019  3beb		       4c 6b 5c 	      jmp	.__Skip_Homing_Cycle
  19020  3bee
  19021  3bee				   .skipL0893
  19022  3bee				   .
  19023  3bee							; 
  19024  3bee
  19025  3bee				   .
  19026  3bee							; 
  19027  3bee
  19028  3bee				   .
  19029  3bee							; 
  19030  3bee
  19031  3bee				   .
  19032  3bee							; 
  19033  3bee
  19034  3bee				   .L0894		;  if !_Bit6_Homing_Color_Cycle_On{6} then goto __Skip_Homing_Cycle
  19035  3bee
  19036  3bee		       24 c6		      BIT	_Bit6_Homing_Color_Cycle_On
  19037  3bf0		       70 03		      BVS	.skipL0894
  19038  3bf2				   .condpart329
  19039  3bf2		       4c 6b 5c 	      jmp	.__Skip_Homing_Cycle
  19040  3bf5
  19041  3bf5				   .skipL0894
  19042  3bf5				   .
  19043  3bf5							; 
  19044  3bf5
  19045  3bf5				   .
  19046  3bf5							; 
  19047  3bf5
  19048  3bf5				   .
  19049  3bf5							; 
  19050  3bf5
  19051  3bf5				   .
  19052  3bf5							; 
  19053  3bf5
  19054  3bf5				   .L0895		;  temp5  =  _D_Homing_H[_Homing_Sc_Bck_Cntr]
  19055  3bf5
  19056  3bf5		       a6 e8		      LDX	_Homing_Sc_Bck_Cntr
  19057  3bf7		       bd de 5c 	      LDA	_D_Homing_H,x
  19058  3bfa		       85 a0		      STA	temp5
  19059  3bfc				   .
  19060  3bfc							; 
  19061  3bfc
  19062  3bfc				   .
  19063  3bfc							; 
  19064  3bfc
  19065  3bfc				   .
  19066  3bfc							; 
  19067  3bfc
  19068  3bfc				   .
  19069  3bfc							; 
  19070  3bfc
  19071  3bfc				   .L0896		;  if temp5  <  255 then goto __Skip_Homing_End
  19072  3bfc
  19073  3bfc		       a5 a0		      LDA	temp5
  19074  3bfe		       c9 ff		      CMP	#255
  19075  3c00		       b0 03		      BCS	.skipL0896
  19076  3c02				   .condpart330
  19077  3c02		       4c 5a 5c 	      jmp	.__Skip_Homing_End
  19078  3c05
  19079  3c05				   .skipL0896
  19080  3c05				   .
  19081  3c05							; 
  19082  3c05
  19083  3c05				   .
  19084  3c05							; 
  19085  3c05
  19086  3c05				   .
  19087  3c05							; 
  19088  3c05
  19089  3c05				   .
  19090  3c05							; 
  19091  3c05
  19092  3c05				   .
  19093  3c05							; 
  19094  3c05
  19095  3c05				   .
  19096  3c05							; 
  19097  3c05
  19098  3c05				   .L0897		;  _Bit6_Homing_Color_Cycle_On{6}  =  0  :  _Homing_Sc_Bck_Cntr  =  0
  19099  3c05
  19100  3c05		       a5 c6		      LDA	_Bit6_Homing_Color_Cycle_On
  19101  3c07		       29 bf		      AND	#191
  19102  3c09		       85 c6		      STA	_Bit6_Homing_Color_Cycle_On
  19103  3c0b		       a9 00		      LDA	#0
  19104  3c0d		       85 e9		      STA	v
  19105  3c0f		       a9 00		      LDA	#0
  19106  3c11		       85 e8		      STA	_Homing_Sc_Bck_Cntr
  19107  3c13				   .
  19108  3c13							; 
  19109  3c13
  19110  3c13				   .
  19111  3c13							; 
  19112  3c13
  19113  3c13				   .
  19114  3c13							; 
  19115  3c13
  19116  3c13				   .
  19117  3c13							; 
  19118  3c13
  19119  3c13				   .L0898		;  if _Seaweed_Shot  <  20 then _SC_Back  =  $C8
  19120  3c13
  19121  3c13		       a5 e2		      LDA	_Seaweed_Shot
  19122  3c15		       c9 14		      CMP	#20
  19123  3c17		       b0 04		      BCS	.skipL0898
  19124  3c19				   .condpart331
  19125  3c19		       a9 c8		      LDA	#$C8
  19126  3c1b		       85 d1		      STA	_SC_Back
  19127  3c1d				   .skipL0898
  19128  3c1d				   .
  19129  3c1d							; 
  19130  3c1d
  19131  3c1d				   .L0899		;  if _Seaweed_Shot  >  19  &&  _Seaweed_Shot	<  40 then _SC_Back  =	$C6
  19132  3c1d
  19133  3c1d		       a9 13		      LDA	#19
  19134  3c1f		       c5 e2		      CMP	_Seaweed_Shot
  19135  3c21		       b0 0a		      BCS	.skipL0899
  19136  3c23				   .condpart332
  19137  3c23		       a5 e2		      LDA	_Seaweed_Shot
  19138  3c25		       c9 28		      CMP	#40
  19139  3c27		       b0 04		      BCS	.skip332then
  19140  3c29				   .condpart333
  19141  3c29		       a9 c6		      LDA	#$C6
  19142  3c2b		       85 d1		      STA	_SC_Back
  19143  3c2d				   .skip332then
  19144  3c2d				   .skipL0899
  19145  3c2d				   .
  19146  3c2d							; 
  19147  3c2d
  19148  3c2d				   .L0900		;  if _Seaweed_Shot  >  39  &&  _Seaweed_Shot	<  60 then _SC_Back  =	$C4
  19149  3c2d
  19150  3c2d		       a9 27		      LDA	#39
  19151  3c2f		       c5 e2		      CMP	_Seaweed_Shot
  19152  3c31		       b0 0a		      BCS	.skipL0900
  19153  3c33				   .condpart334
  19154  3c33		       a5 e2		      LDA	_Seaweed_Shot
  19155  3c35		       c9 3c		      CMP	#60
  19156  3c37		       b0 04		      BCS	.skip334then
  19157  3c39				   .condpart335
  19158  3c39		       a9 c4		      LDA	#$C4
  19159  3c3b		       85 d1		      STA	_SC_Back
  19160  3c3d				   .skip334then
  19161  3c3d				   .skipL0900
  19162  3c3d				   .
  19163  3c3d							; 
  19164  3c3d
  19165  3c3d				   .L0901		;  if _Seaweed_Shot  >  59  &&  _Seaweed_Shot	<  80 then _SC_Back  =	$C2
  19166  3c3d
  19167  3c3d		       a9 3b		      LDA	#59
  19168  3c3f		       c5 e2		      CMP	_Seaweed_Shot
  19169  3c41		       b0 0a		      BCS	.skipL0901
  19170  3c43				   .condpart336
  19171  3c43		       a5 e2		      LDA	_Seaweed_Shot
  19172  3c45		       c9 50		      CMP	#80
  19173  3c47		       b0 04		      BCS	.skip336then
  19174  3c49				   .condpart337
  19175  3c49		       a9 c2		      LDA	#$C2
  19176  3c4b		       85 d1		      STA	_SC_Back
  19177  3c4d				   .skip336then
  19178  3c4d				   .skipL0901
  19179  3c4d				   .
  19180  3c4d							; 
  19181  3c4d
  19182  3c4d				   .L0902		;  if _Seaweed_Shot  >  79 then _SC_Back  =  $C0
  19183  3c4d
  19184  3c4d		       a9 4f		      LDA	#79
  19185  3c4f		       c5 e2		      CMP	_Seaweed_Shot
  19186  3c51		       b0 04		      BCS	.skipL0902
  19187  3c53				   .condpart338
  19188  3c53		       a9 c0		      LDA	#$C0
  19189  3c55		       85 d1		      STA	_SC_Back
  19190  3c57				   .skipL0902
  19191  3c57				   .
  19192  3c57							; 
  19193  3c57
  19194  3c57				   .L0903		;  goto __Skip_Homing_Cycle
  19195  3c57
  19196  3c57		       4c 6b 5c 	      jmp	.__Skip_Homing_Cycle
  19197  3c5a
  19198  3c5a				   .
  19199  3c5a							; 
  19200  3c5a
  19201  3c5a				   .__Skip_Homing_End
  19202  3c5a							; __Skip_Homing_End
  19203  3c5a
  19204  3c5a				   .
  19205  3c5a							; 
  19206  3c5a
  19207  3c5a				   .
  19208  3c5a							; 
  19209  3c5a
  19210  3c5a				   .
  19211  3c5a							; 
  19212  3c5a
  19213  3c5a				   .
  19214  3c5a							; 
  19215  3c5a
  19216  3c5a				   .L0904		;  _SC_Back  =  temp5
  19217  3c5a
  19218  3c5a		       a5 a0		      LDA	temp5
  19219  3c5c		       85 d1		      STA	_SC_Back
  19220  3c5e				   .
  19221  3c5e							; 
  19222  3c5e
  19223  3c5e				   .
  19224  3c5e							; 
  19225  3c5e
  19226  3c5e				   .
  19227  3c5e							; 
  19228  3c5e
  19229  3c5e				   .
  19230  3c5e							; 
  19231  3c5e
  19232  3c5e				   .L0905		;  _Homing_Sc_Bck_Cntr  =  _Homing_Sc_Bck_Cntr  +  0.4
  19233  3c5e
  19234  3c5e		       a5 e9		      LDA	v
  19235  3c60		       18		      CLC
  19236  3c61		       69 66		      ADC	#102
  19237  3c63		       85 e9		      STA	v
  19238  3c65		       a5 e8		      LDA	_Homing_Sc_Bck_Cntr
  19239  3c67		       69 00		      ADC	#0
  19240  3c69		       85 e8		      STA	_Homing_Sc_Bck_Cntr
  19241  3c6b				   .
  19242  3c6b							; 
  19243  3c6b
  19244  3c6b				   .__Skip_Homing_Cycle
  19245  3c6b							; __Skip_Homing_Cycle
  19246  3c6b
  19247  3c6b				   .
  19248  3c6b							; 
  19249  3c6b
  19250  3c6b				   .
  19251  3c6b							; 
  19252  3c6b
  19253  3c6b				   .
  19254  3c6b							; 
  19255  3c6b
  19256  3c6b				   .
  19257  3c6b							; 
  19258  3c6b
  19259  3c6b				   .
  19260  3c6b							; 
  19261  3c6b
  19262  3c6b				   .
  19263  3c6b							; 
  19264  3c6b
  19265  3c6b				   .
  19266  3c6b							; 
  19267  3c6b
  19268  3c6b				   .L0906		;  goto __Code_Section_3 bank4
  19269  3c6b
  19270  3c6b		       85 ee		      sta	temp7
  19271  3c6d		       a9 70		      lda	#>(.__Code_Section_3-1)
  19272  3c6f		       48		      pha
  19273  3c70		       a9 ff		      lda	#<(.__Code_Section_3-1)
  19274  3c72		       48		      pha
  19275  3c73		       a5 ee		      lda	temp7
  19276  3c75		       48		      pha
  19277  3c76		       8a		      txa
  19278  3c77		       48		      pha
  19279  3c78		       a2 04		      ldx	#4
  19280  3c7a		       4c eb ff 	      jmp	BS_jsr
  19281  3c7d				   .
  19282  3c7d							; 
  19283  3c7d
  19284  3c7d				   .
  19285  3c7d							; 
  19286  3c7d
  19287  3c7d				   .
  19288  3c7d							; 
  19289  3c7d
  19290  3c7d				   .
  19291  3c7d							; 
  19292  3c7d
  19293  3c7d				   .
  19294  3c7d							; 
  19295  3c7d
  19296  3c7d				   .
  19297  3c7d							; 
  19298  3c7d
  19299  3c7d				   .
  19300  3c7d							; 
  19301  3c7d
  19302  3c7d				   .
  19303  3c7d							; 
  19304  3c7d
  19305  3c7d				   .
  19306  3c7d							; 
  19307  3c7d
  19308  3c7d				   .
  19309  3c7d							; 
  19310  3c7d
  19311  3c7d				   .
  19312  3c7d							; 
  19313  3c7d
  19314  3c7d				   .
  19315  3c7d							; 
  19316  3c7d
  19317  3c7d				   .
  19318  3c7d							; 
  19319  3c7d
  19320  3c7d				   .
  19321  3c7d							; 
  19322  3c7d
  19323  3c7d				   .
  19324  3c7d							; 
  19325  3c7d
  19326  3c7d				   .
  19327  3c7d							; 
  19328  3c7d
  19329  3c7d				   .
  19330  3c7d							; 
  19331  3c7d
  19332  3c7d				   .
  19333  3c7d							; 
  19334  3c7d
  19335  3c7d				   .
  19336  3c7d							; 
  19337  3c7d
  19338  3c7d				   .
  19339  3c7d							; 
  19340  3c7d
  19341  3c7d				   .
  19342  3c7d							; 
  19343  3c7d
  19344  3c7d				   .
  19345  3c7d							; 
  19346  3c7d
  19347  3c7d				   .
  19348  3c7d							; 
  19349  3c7d
  19350  3c7d				   .
  19351  3c7d							; 
  19352  3c7d
  19353  3c7d				   .__Ouch_Dec_Health_01
  19354  3c7d							; __Ouch_Dec_Health_01
  19355  3c7d
  19356  3c7d				   .
  19357  3c7d							; 
  19358  3c7d
  19359  3c7d				   .
  19360  3c7d							; 
  19361  3c7d
  19362  3c7d				   .
  19363  3c7d							; 
  19364  3c7d
  19365  3c7d				   .
  19366  3c7d							; 
  19367  3c7d
  19368  3c7d				   .L0907		;  if pfscore1  =  0 then pfscore2  =	pfscore2 / 2
  19369  3c7d
  19370  3c7d		       a5 f2		      LDA	pfscore1
  19371  3c7f		       c9 00		      CMP	#0
  19372  3c81		       d0 05		      BNE	.skipL0907
  19373  3c83				   .condpart339
  19374  3c83		       a5 f3		      LDA	pfscore2
  19375  3c85		       4a		      lsr
  19376  3c86		       85 f3		      STA	pfscore2
  19377  3c88				   .skipL0907
  19378  3c88				   .
  19379  3c88							; 
  19380  3c88
  19381  3c88				   .
  19382  3c88							; 
  19383  3c88
  19384  3c88				   .
  19385  3c88							; 
  19386  3c88
  19387  3c88				   .
  19388  3c88							; 
  19389  3c88
  19390  3c88				   .
  19391  3c88							; 
  19392  3c88
  19393  3c88				   .L0908		;  if pfscore1  >  0  &&  pfscore2  =	255 then pfscore1  =  pfscore1 / 2
  19394  3c88
  19395  3c88		       a9 00		      LDA	#0
  19396  3c8a		       c5 f2		      CMP	pfscore1
  19397  3c8c		       b0 0b		      BCS	.skipL0908
  19398  3c8e				   .condpart340
  19399  3c8e		       a5 f3		      LDA	pfscore2
  19400  3c90		       c9 ff		      CMP	#255
  19401  3c92		       d0 05		      BNE	.skip340then
  19402  3c94				   .condpart341
  19403  3c94		       a5 f2		      LDA	pfscore1
  19404  3c96		       4a		      lsr
  19405  3c97		       85 f2		      STA	pfscore1
  19406  3c99				   .skip340then
  19407  3c99				   .skipL0908
  19408  3c99				   .
  19409  3c99							; 
  19410  3c99
  19411  3c99				   .
  19412  3c99							; 
  19413  3c99
  19414  3c99				   .
  19415  3c99							; 
  19416  3c99
  19417  3c99				   .
  19418  3c99							; 
  19419  3c99
  19420  3c99				   .L0909		;  _Bit1_P0_Hit_Seaweed{1}  =	1  :  _Bit4_Manatee_Hurt_Color{4}  =  1
  19421  3c99
  19422  3c99		       a5 c2		      LDA	_Bit1_P0_Hit_Seaweed
  19423  3c9b		       09 02		      ORA	#2
  19424  3c9d		       85 c2		      STA	_Bit1_P0_Hit_Seaweed
  19425  3c9f		       a5 c7		      LDA	_Bit4_Manatee_Hurt_Color
  19426  3ca1		       09 10		      ORA	#16
  19427  3ca3		       85 c7		      STA	_Bit4_Manatee_Hurt_Color
  19428  3ca5				   .
  19429  3ca5							; 
  19430  3ca5
  19431  3ca5				   .
  19432  3ca5							; 
  19433  3ca5
  19434  3ca5				   .
  19435  3ca5							; 
  19436  3ca5
  19437  3ca5				   .
  19438  3ca5							; 
  19439  3ca5
  19440  3ca5				   .
  19441  3ca5							; 
  19442  3ca5
  19443  3ca5				   .
  19444  3ca5							; 
  19445  3ca5
  19446  3ca5				   .
  19447  3ca5							; 
  19448  3ca5
  19449  3ca5				   .L0910		;  if pfscore2  <  16 then pfscorecolor  =  $1C
  19450  3ca5
  19451  3ca5		       a5 f3		      LDA	pfscore2
  19452  3ca7		       c9 10		      CMP	#16
  19453  3ca9		       b0 04		      BCS	.skipL0910
  19454  3cab				   .condpart342
  19455  3cab		       a9 1c		      LDA	#$1C
  19456  3cad		       85 f4		      STA	pfscorecolor
  19457  3caf				   .skipL0910
  19458  3caf				   .
  19459  3caf							; 
  19460  3caf
  19461  3caf				   .L0911		;  if pfscore2  <  3 then pfscorecolor  =  $42
  19462  3caf
  19463  3caf		       a5 f3		      LDA	pfscore2
  19464  3cb1		       c9 03		      CMP	#3
  19465  3cb3		       b0 04		      BCS	.skipL0911
  19466  3cb5				   .condpart343
  19467  3cb5		       a9 42		      LDA	#$42
  19468  3cb7		       85 f4		      STA	pfscorecolor
  19469  3cb9				   .skipL0911
  19470  3cb9				   .
  19471  3cb9							; 
  19472  3cb9
  19473  3cb9				   .L0912		;  if pfscore2  <  1 then _Bit0_Game_Control{0}  =  1
  19474  3cb9
  19475  3cb9		       a5 f3		      LDA	pfscore2
  19476  3cbb		       c9 01		      CMP	#1
  19477  3cbd		       b0 06		      BCS	.skipL0912
  19478  3cbf				   .condpart344
  19479  3cbf		       a5 d2		      LDA	_Bit0_Game_Control
  19480  3cc1		       09 01		      ORA	#1
  19481  3cc3		       85 d2		      STA	_Bit0_Game_Control
  19482  3cc5				   .skipL0912
  19483  3cc5				   .
  19484  3cc5							; 
  19485  3cc5
  19486  3cc5				   .
  19487  3cc5							; 
  19488  3cc5
  19489  3cc5				   .
  19490  3cc5							; 
  19491  3cc5
  19492  3cc5				   .
  19493  3cc5							; 
  19494  3cc5
  19495  3cc5				   .L0913		;  if _Ch0_Sound  =  _c_1000_Health then goto __Skip_Ouch_Sound
  19496  3cc5
  19497  3cc5		       a5 da		      LDA	_Ch0_Sound
  19498  3cc7		       c9 05		      CMP	#_c_1000_Health
  19499  3cc9		       d0 03		      BNE	.skipL0913
  19500  3ccb				   .condpart345
  19501  3ccb		       4c da 5c 	      jmp	.__Skip_Ouch_Sound
  19502  3cce
  19503  3cce				   .skipL0913
  19504  3cce				   .
  19505  3cce							; 
  19506  3cce
  19507  3cce				   .L0914		;  _Ch0_Counter  =  0	:  _Ch0_Sound  =  _c_Ship_Bounce  :  _Ch0_Duration  =  1
  19508  3cce
  19509  3cce		       a9 00		      LDA	#0
  19510  3cd0		       85 dc		      STA	_Ch0_Counter
  19511  3cd2		       a9 03		      LDA	#_c_Ship_Bounce
  19512  3cd4		       85 da		      STA	_Ch0_Sound
  19513  3cd6		       a9 01		      LDA	#1
  19514  3cd8		       85 db		      STA	_Ch0_Duration
  19515  3cda				   .
  19516  3cda							; 
  19517  3cda
  19518  3cda				   .__Skip_Ouch_Sound
  19519  3cda							; __Skip_Ouch_Sound
  19520  3cda
  19521  3cda				   .
  19522  3cda							; 
  19523  3cda
  19524  3cda				   .L0915		;  return thisbank
  19525  3cda
  19526  3cda		       60		      RTS
  19527  3cdb				   .
  19528  3cdb							; 
  19529  3cdb
  19530  3cdb				   .
  19531  3cdb							; 
  19532  3cdb
  19533  3cdb				   .
  19534  3cdb							; 
  19535  3cdb
  19536  3cdb				   .
  19537  3cdb							; 
  19538  3cdb
  19539  3cdb				   .
  19540  3cdb							; 
  19541  3cdb
  19542  3cdb				   .
  19543  3cdb							; 
  19544  3cdb
  19545  3cdb				   .
  19546  3cdb							; 
  19547  3cdb
  19548  3cdb				   .
  19549  3cdb							; 
  19550  3cdb
  19551  3cdb				   .L0916		;  data _D_Homing_H
  19552  3cdb
  19553  3cdb		       4c 02 5d 	      JMP	.skipL0916
  19554  3cde				   _D_Homing_H
  19555  3cde		       80 82 84 86*	      .byte.b	$80,$82,$84,$86,$88,$8A,$8C,$8E,$8C,$8A,$88,$86,$84,$82
  19556  3cec
  19557  3cec		       80 82 84 86*	      .byte.b	$80,$82,$84,$86,$88,$8A,$8C,$8E,$8C,$8A,$88,$86,$84,$82
  19558  3cfa
  19559  3cfa		       80 c0 c0 c2*	      .byte.b	$80,$C0,$C0,$C2,$C4,$C6,$C8,255
  19560  3d02
  19561  3d02				   .skipL0916
  19562  3d02				   .
  19563  3d02							; 
  19564  3d02
  19565  3d02				   .
  19566  3d02							; 
  19567  3d02
  19568  3d02				   .
  19569  3d02							; 
  19570  3d02
  19571  3d02				   .
  19572  3d02							; 
  19573  3d02
  19574  3d02				   .
  19575  3d02							; 
  19576  3d02
  19577  3d02				   .
  19578  3d02							; 
  19579  3d02
  19580  3d02				   .
  19581  3d02							; 
  19582  3d02
  19583  3d02				   .
  19584  3d02							; 
  19585  3d02
  19586  3d02				   .
  19587  3d02							; 
  19588  3d02
  19589  3d02				   .__Cor_Anim_0
  19590  3d02							; __Cor_Anim_0
  19591  3d02
  19592  3d02				   .
  19593  3d02							; 
  19594  3d02
  19595  3d02				   .L0917		;  _Corroded_Anim_Frame  =  0
  19596  3d02
  19597  3d02		       a9 00		      LDA	#0
  19598  3d04		       85 c0		      STA	_Corroded_Anim_Frame
  19599  3d06				   .
  19600  3d06							; 
  19601  3d06
  19602  3d06				   .L0918		;  player1:
  19603  3d06
  19604  3d06		       a2 66		      LDX	#<playerL0918_1
  19605  3d08		       86 8c		      STX	player1pointerlo
  19606  3d0a		       a9 f9		      LDA	#>playerL0918_1
  19607  3d0c		       85 8d		      STA	player1pointerhi
  19608  3d0e		       a9 05		      LDA	#5
  19609  3d10		       85 8f		      STA	player1height
  19610  3d12				   .
  19611  3d12							; 
  19612  3d12
  19613  3d12				   .L0919		;  return thisbank
  19614  3d12
  19615  3d12		       60		      RTS
  19616  3d13				   .
  19617  3d13							; 
  19618  3d13
  19619  3d13				   .
  19620  3d13							; 
  19621  3d13
  19622  3d13				   .__Cor_Anim_1
  19623  3d13							; __Cor_Anim_1
  19624  3d13
  19625  3d13				   .
  19626  3d13							; 
  19627  3d13
  19628  3d13				   .L0920		;  _Corroded_Anim_Frame  =  1
  19629  3d13
  19630  3d13		       a9 01		      LDA	#1
  19631  3d15		       85 c0		      STA	_Corroded_Anim_Frame
  19632  3d17				   .
  19633  3d17							; 
  19634  3d17
  19635  3d17				   .L0921		;  player1:
  19636  3d17
  19637  3d17		       a2 6c		      LDX	#<playerL0921_1
  19638  3d19		       86 8c		      STX	player1pointerlo
  19639  3d1b		       a9 f9		      LDA	#>playerL0921_1
  19640  3d1d		       85 8d		      STA	player1pointerhi
  19641  3d1f		       a9 05		      LDA	#5
  19642  3d21		       85 8f		      STA	player1height
  19643  3d23				   .
  19644  3d23							; 
  19645  3d23
  19646  3d23				   .L0922		;  return thisbank
  19647  3d23
  19648  3d23		       60		      RTS
  19649  3d24				   .
  19650  3d24							; 
  19651  3d24
  19652  3d24				   .
  19653  3d24							; 
  19654  3d24
  19655  3d24				   .__Cor_Anim_2
  19656  3d24							; __Cor_Anim_2
  19657  3d24
  19658  3d24				   .
  19659  3d24							; 
  19660  3d24
  19661  3d24				   .L0923		;  _Corroded_Anim_Frame  =  2
  19662  3d24
  19663  3d24		       a9 02		      LDA	#2
  19664  3d26		       85 c0		      STA	_Corroded_Anim_Frame
  19665  3d28				   .
  19666  3d28							; 
  19667  3d28
  19668  3d28				   .L0924		;  player1:
  19669  3d28
  19670  3d28		       a2 72		      LDX	#<playerL0924_1
  19671  3d2a		       86 8c		      STX	player1pointerlo
  19672  3d2c		       a9 f9		      LDA	#>playerL0924_1
  19673  3d2e		       85 8d		      STA	player1pointerhi
  19674  3d30		       a9 05		      LDA	#5
  19675  3d32		       85 8f		      STA	player1height
  19676  3d34				   .
  19677  3d34							; 
  19678  3d34
  19679  3d34				   .L0925		;  return thisbank
  19680  3d34
  19681  3d34		       60		      RTS
  19682  3d35				   .
  19683  3d35							; 
  19684  3d35
  19685  3d35				   .
  19686  3d35							; 
  19687  3d35
  19688  3d35				   .__Cor_Anim_3
  19689  3d35							; __Cor_Anim_3
  19690  3d35
  19691  3d35				   .
  19692  3d35							; 
  19693  3d35
  19694  3d35				   .L0926		;  _Corroded_Anim_Frame  =  3
  19695  3d35
  19696  3d35		       a9 03		      LDA	#3
  19697  3d37		       85 c0		      STA	_Corroded_Anim_Frame
  19698  3d39				   .
  19699  3d39							; 
  19700  3d39
  19701  3d39				   .L0927		;  player1:
  19702  3d39
  19703  3d39		       a2 78		      LDX	#<playerL0927_1
  19704  3d3b		       86 8c		      STX	player1pointerlo
  19705  3d3d		       a9 f9		      LDA	#>playerL0927_1
  19706  3d3f		       85 8d		      STA	player1pointerhi
  19707  3d41		       a9 05		      LDA	#5
  19708  3d43		       85 8f		      STA	player1height
  19709  3d45				   .
  19710  3d45							; 
  19711  3d45
  19712  3d45				   .L0928		;  return thisbank
  19713  3d45
  19714  3d45		       60		      RTS
  19715  3d46				   .
  19716  3d46							; 
  19717  3d46
  19718  3d46				   .
  19719  3d46							; 
  19720  3d46
  19721  3d46				   .__Cor_Anim_4
  19722  3d46							; __Cor_Anim_4
  19723  3d46
  19724  3d46				   .
  19725  3d46							; 
  19726  3d46
  19727  3d46				   .L0929		;  _Corroded_Anim_Frame  =  4
  19728  3d46
  19729  3d46		       a9 04		      LDA	#4
  19730  3d48		       85 c0		      STA	_Corroded_Anim_Frame
  19731  3d4a				   .
  19732  3d4a							; 
  19733  3d4a
  19734  3d4a				   .L0930		;  player1:
  19735  3d4a
  19736  3d4a		       a2 7e		      LDX	#<playerL0930_1
  19737  3d4c		       86 8c		      STX	player1pointerlo
  19738  3d4e		       a9 f9		      LDA	#>playerL0930_1
  19739  3d50		       85 8d		      STA	player1pointerhi
  19740  3d52		       a9 05		      LDA	#5
  19741  3d54		       85 8f		      STA	player1height
  19742  3d56				   .
  19743  3d56							; 
  19744  3d56
  19745  3d56				   .L0931		;  return thisbank
  19746  3d56
  19747  3d56		       60		      RTS
  19748  3d57				   .
  19749  3d57							; 
  19750  3d57
  19751  3d57				   .
  19752  3d57							; 
  19753  3d57
  19754  3d57				   .__Cor_Anim_5
  19755  3d57							; __Cor_Anim_5
  19756  3d57
  19757  3d57				   .
  19758  3d57							; 
  19759  3d57
  19760  3d57				   .L0932		;  _Corroded_Anim_Frame  =  5
  19761  3d57
  19762  3d57		       a9 05		      LDA	#5
  19763  3d59		       85 c0		      STA	_Corroded_Anim_Frame
  19764  3d5b				   .
  19765  3d5b							; 
  19766  3d5b
  19767  3d5b				   .L0933		;  player1:
  19768  3d5b
  19769  3d5b		       a2 84		      LDX	#<playerL0933_1
  19770  3d5d		       86 8c		      STX	player1pointerlo
  19771  3d5f		       a9 f9		      LDA	#>playerL0933_1
  19772  3d61		       85 8d		      STA	player1pointerhi
  19773  3d63		       a9 05		      LDA	#5
  19774  3d65		       85 8f		      STA	player1height
  19775  3d67				   .
  19776  3d67							; 
  19777  3d67
  19778  3d67				   .L0934		;  return thisbank
  19779  3d67
  19780  3d67		       60		      RTS
  19781  3d68				   .
  19782  3d68							; 
  19783  3d68
  19784  3d68				   .
  19785  3d68							; 
  19786  3d68
  19787  3d68				   .
  19788  3d68							; 
  19789  3d68
  19790  3d68				   .
  19791  3d68							; 
  19792  3d68
  19793  3d68				   .
  19794  3d68							; 
  19795  3d68
  19796  3d68				   .
  19797  3d68							; 
  19798  3d68
  19799  3d68				   .
  19800  3d68							; 
  19801  3d68
  19802  3d68				   .
  19803  3d68							; 
  19804  3d68
  19805  3d68				   .
  19806  3d68							; 
  19807  3d68
  19808  3d68				   .__W_Clr_0
  19809  3d68							; __W_Clr_0
  19810  3d68
  19811  3d68				   .
  19812  3d68							; 
  19813  3d68
  19814  3d68				   .L0935		;  player1color:
  19815  3d68
  19816  3d68		       a2 8a		      LDX	#<playercolorL0935_1
  19817  3d6a		       86 87		      STX	player1color
  19818  3d6c		       a9 f9		      LDA	#>playercolorL0935_1
  19819  3d6e		       85 88		      STA	player1color+1
  19820  3d70				   .
  19821  3d70							; 
  19822  3d70
  19823  3d70				   .L0936		;  goto __Wroth_Color_Done
  19824  3d70
  19825  3d70		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  19826  3d73
  19827  3d73				   .
  19828  3d73							; 
  19829  3d73
  19830  3d73				   .
  19831  3d73							; 
  19832  3d73
  19833  3d73				   .__W_Clr_1
  19834  3d73							; __W_Clr_1
  19835  3d73
  19836  3d73				   .
  19837  3d73							; 
  19838  3d73
  19839  3d73				   .L0937		;  player1color:
  19840  3d73
  19841  3d73		       a2 92		      LDX	#<playercolorL0937_1
  19842  3d75		       86 87		      STX	player1color
  19843  3d77		       a9 f9		      LDA	#>playercolorL0937_1
  19844  3d79		       85 88		      STA	player1color+1
  19845  3d7b				   .
  19846  3d7b							; 
  19847  3d7b
  19848  3d7b				   .L0938		;  goto __Wroth_Color_Done
  19849  3d7b
  19850  3d7b		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  19851  3d7e
  19852  3d7e				   .
  19853  3d7e							; 
  19854  3d7e
  19855  3d7e				   .
  19856  3d7e							; 
  19857  3d7e
  19858  3d7e				   .__W_Clr_2
  19859  3d7e							; __W_Clr_2
  19860  3d7e
  19861  3d7e				   .
  19862  3d7e							; 
  19863  3d7e
  19864  3d7e				   .L0939		;  player1color:
  19865  3d7e
  19866  3d7e		       a2 9a		      LDX	#<playercolorL0939_1
  19867  3d80		       86 87		      STX	player1color
  19868  3d82		       a9 f9		      LDA	#>playercolorL0939_1
  19869  3d84		       85 88		      STA	player1color+1
  19870  3d86				   .
  19871  3d86							; 
  19872  3d86
  19873  3d86				   .L0940		;  goto __Wroth_Color_Done
  19874  3d86
  19875  3d86		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  19876  3d89
  19877  3d89				   .
  19878  3d89							; 
  19879  3d89
  19880  3d89				   .
  19881  3d89							; 
  19882  3d89
  19883  3d89				   .__W_Clr_3
  19884  3d89							; __W_Clr_3
  19885  3d89
  19886  3d89				   .
  19887  3d89							; 
  19888  3d89
  19889  3d89				   .L0941		;  player1color:
  19890  3d89
  19891  3d89		       a2 a2		      LDX	#<playercolorL0941_1
  19892  3d8b		       86 87		      STX	player1color
  19893  3d8d		       a9 f9		      LDA	#>playercolorL0941_1
  19894  3d8f		       85 88		      STA	player1color+1
  19895  3d91				   .
  19896  3d91							; 
  19897  3d91
  19898  3d91				   .L0942		;  goto __Wroth_Color_Done
  19899  3d91
  19900  3d91		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  19901  3d94
  19902  3d94				   .
  19903  3d94							; 
  19904  3d94
  19905  3d94				   .
  19906  3d94							; 
  19907  3d94
  19908  3d94				   .__W_Clr_4
  19909  3d94							; __W_Clr_4
  19910  3d94
  19911  3d94				   .
  19912  3d94							; 
  19913  3d94
  19914  3d94				   .L0943		;  player1color:
  19915  3d94
  19916  3d94		       a2 aa		      LDX	#<playercolorL0943_1
  19917  3d96		       86 87		      STX	player1color
  19918  3d98		       a9 f9		      LDA	#>playercolorL0943_1
  19919  3d9a		       85 88		      STA	player1color+1
  19920  3d9c				   .
  19921  3d9c							; 
  19922  3d9c
  19923  3d9c				   .L0944		;  goto __Wroth_Color_Done
  19924  3d9c
  19925  3d9c		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  19926  3d9f
  19927  3d9f				   .
  19928  3d9f							; 
  19929  3d9f
  19930  3d9f				   .
  19931  3d9f							; 
  19932  3d9f
  19933  3d9f				   .__W_Clr_5
  19934  3d9f							; __W_Clr_5
  19935  3d9f
  19936  3d9f				   .
  19937  3d9f							; 
  19938  3d9f
  19939  3d9f				   .L0945		;  player1color:
  19940  3d9f
  19941  3d9f		       a2 b2		      LDX	#<playercolorL0945_1
  19942  3da1		       86 87		      STX	player1color
  19943  3da3		       a9 f9		      LDA	#>playercolorL0945_1
  19944  3da5		       85 88		      STA	player1color+1
  19945  3da7				   .
  19946  3da7							; 
  19947  3da7
  19948  3da7				   .L0946		;  goto __Wroth_Color_Done
  19949  3da7
  19950  3da7		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  19951  3daa
  19952  3daa				   .
  19953  3daa							; 
  19954  3daa
  19955  3daa				   .
  19956  3daa							; 
  19957  3daa
  19958  3daa				   .__W_Clr_6
  19959  3daa							; __W_Clr_6
  19960  3daa
  19961  3daa				   .
  19962  3daa							; 
  19963  3daa
  19964  3daa				   .L0947		;  player1color:
  19965  3daa
  19966  3daa		       a2 ba		      LDX	#<playercolorL0947_1
  19967  3dac		       86 87		      STX	player1color
  19968  3dae		       a9 f9		      LDA	#>playercolorL0947_1
  19969  3db0		       85 88		      STA	player1color+1
  19970  3db2				   .
  19971  3db2							; 
  19972  3db2
  19973  3db2				   .L0948		;  goto __Wroth_Color_Done
  19974  3db2
  19975  3db2		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  19976  3db5
  19977  3db5				   .
  19978  3db5							; 
  19979  3db5
  19980  3db5				   .
  19981  3db5							; 
  19982  3db5
  19983  3db5				   .__W_Clr_7
  19984  3db5							; __W_Clr_7
  19985  3db5
  19986  3db5				   .
  19987  3db5							; 
  19988  3db5
  19989  3db5				   .L0949		;  player1color:
  19990  3db5
  19991  3db5		       a2 c2		      LDX	#<playercolorL0949_1
  19992  3db7		       86 87		      STX	player1color
  19993  3db9		       a9 f9		      LDA	#>playercolorL0949_1
  19994  3dbb		       85 88		      STA	player1color+1
  19995  3dbd				   .
  19996  3dbd							; 
  19997  3dbd
  19998  3dbd				   .L0950		;  goto __Wroth_Color_Done
  19999  3dbd
  20000  3dbd		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20001  3dc0
  20002  3dc0				   .
  20003  3dc0							; 
  20004  3dc0
  20005  3dc0				   .
  20006  3dc0							; 
  20007  3dc0
  20008  3dc0				   .__W_Clr_8
  20009  3dc0							; __W_Clr_8
  20010  3dc0
  20011  3dc0				   .
  20012  3dc0							; 
  20013  3dc0
  20014  3dc0				   .L0951		;  player1color:
  20015  3dc0
  20016  3dc0		       a2 ca		      LDX	#<playercolorL0951_1
  20017  3dc2		       86 87		      STX	player1color
  20018  3dc4		       a9 f9		      LDA	#>playercolorL0951_1
  20019  3dc6		       85 88		      STA	player1color+1
  20020  3dc8				   .
  20021  3dc8							; 
  20022  3dc8
  20023  3dc8				   .L0952		;  goto __Wroth_Color_Done
  20024  3dc8
  20025  3dc8		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20026  3dcb
  20027  3dcb				   .
  20028  3dcb							; 
  20029  3dcb
  20030  3dcb				   .
  20031  3dcb							; 
  20032  3dcb
  20033  3dcb				   .__W_Clr_9
  20034  3dcb							; __W_Clr_9
  20035  3dcb
  20036  3dcb				   .
  20037  3dcb							; 
  20038  3dcb
  20039  3dcb				   .L0953		;  player1color:
  20040  3dcb
  20041  3dcb		       a2 d2		      LDX	#<playercolorL0953_1
  20042  3dcd		       86 87		      STX	player1color
  20043  3dcf		       a9 f9		      LDA	#>playercolorL0953_1
  20044  3dd1		       85 88		      STA	player1color+1
  20045  3dd3				   .
  20046  3dd3							; 
  20047  3dd3
  20048  3dd3				   .L0954		;  goto __Wroth_Color_Done
  20049  3dd3
  20050  3dd3		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20051  3dd6
  20052  3dd6				   .
  20053  3dd6							; 
  20054  3dd6
  20055  3dd6				   .
  20056  3dd6							; 
  20057  3dd6
  20058  3dd6				   .__W_Clr_10
  20059  3dd6							; __W_Clr_10
  20060  3dd6
  20061  3dd6				   .
  20062  3dd6							; 
  20063  3dd6
  20064  3dd6				   .L0955		;  player1color:
  20065  3dd6
  20066  3dd6		       a2 da		      LDX	#<playercolorL0955_1
  20067  3dd8		       86 87		      STX	player1color
  20068  3dda		       a9 f9		      LDA	#>playercolorL0955_1
  20069  3ddc		       85 88		      STA	player1color+1
  20070  3dde				   .
  20071  3dde							; 
  20072  3dde
  20073  3dde				   .L0956		;  goto __Wroth_Color_Done
  20074  3dde
  20075  3dde		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20076  3de1
  20077  3de1				   .
  20078  3de1							; 
  20079  3de1
  20080  3de1				   .
  20081  3de1							; 
  20082  3de1
  20083  3de1				   .__W_Clr_11
  20084  3de1							; __W_Clr_11
  20085  3de1
  20086  3de1				   .
  20087  3de1							; 
  20088  3de1
  20089  3de1				   .L0957		;  player1color:
  20090  3de1
  20091  3de1		       a2 e2		      LDX	#<playercolorL0957_1
  20092  3de3		       86 87		      STX	player1color
  20093  3de5		       a9 f9		      LDA	#>playercolorL0957_1
  20094  3de7		       85 88		      STA	player1color+1
  20095  3de9				   .
  20096  3de9							; 
  20097  3de9
  20098  3de9				   .L0958		;  goto __Wroth_Color_Done
  20099  3de9
  20100  3de9		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20101  3dec
  20102  3dec				   .
  20103  3dec							; 
  20104  3dec
  20105  3dec				   .
  20106  3dec							; 
  20107  3dec
  20108  3dec				   .__W_Clr_12
  20109  3dec							; __W_Clr_12
  20110  3dec
  20111  3dec				   .
  20112  3dec							; 
  20113  3dec
  20114  3dec				   .L0959		;  player1color:
  20115  3dec
  20116  3dec		       a2 ea		      LDX	#<playercolorL0959_1
  20117  3dee		       86 87		      STX	player1color
  20118  3df0		       a9 f9		      LDA	#>playercolorL0959_1
  20119  3df2		       85 88		      STA	player1color+1
  20120  3df4				   .
  20121  3df4							; 
  20122  3df4
  20123  3df4				   .L0960		;  goto __Wroth_Color_Done
  20124  3df4
  20125  3df4		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20126  3df7
  20127  3df7				   .
  20128  3df7							; 
  20129  3df7
  20130  3df7				   .
  20131  3df7							; 
  20132  3df7
  20133  3df7				   .__W_Clr_13
  20134  3df7							; __W_Clr_13
  20135  3df7
  20136  3df7				   .
  20137  3df7							; 
  20138  3df7
  20139  3df7				   .L0961		;  player1color:
  20140  3df7
  20141  3df7		       a2 f2		      LDX	#<playercolorL0961_1
  20142  3df9		       86 87		      STX	player1color
  20143  3dfb		       a9 f9		      LDA	#>playercolorL0961_1
  20144  3dfd		       85 88		      STA	player1color+1
  20145  3dff				   .
  20146  3dff							; 
  20147  3dff
  20148  3dff				   .L0962		;  goto __Wroth_Color_Done
  20149  3dff
  20150  3dff		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20151  3e02
  20152  3e02				   .
  20153  3e02							; 
  20154  3e02
  20155  3e02				   .
  20156  3e02							; 
  20157  3e02
  20158  3e02				   .__W_Clr_14
  20159  3e02							; __W_Clr_14
  20160  3e02
  20161  3e02				   .
  20162  3e02							; 
  20163  3e02
  20164  3e02				   .L0963		;  player1color:
  20165  3e02
  20166  3e02		       a2 00		      LDX	#<playercolorL0963_1
  20167  3e04		       86 87		      STX	player1color
  20168  3e06		       a9 fa		      LDA	#>playercolorL0963_1
  20169  3e08		       85 88		      STA	player1color+1
  20170  3e0a				   .
  20171  3e0a							; 
  20172  3e0a
  20173  3e0a				   .L0964		;  goto __Wroth_Color_Done
  20174  3e0a
  20175  3e0a		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20176  3e0d
  20177  3e0d				   .
  20178  3e0d							; 
  20179  3e0d
  20180  3e0d				   .
  20181  3e0d							; 
  20182  3e0d
  20183  3e0d				   .__W_Clr_15
  20184  3e0d							; __W_Clr_15
  20185  3e0d
  20186  3e0d				   .
  20187  3e0d							; 
  20188  3e0d
  20189  3e0d				   .L0965		;  player1color:
  20190  3e0d
  20191  3e0d		       a2 08		      LDX	#<playercolorL0965_1
  20192  3e0f		       86 87		      STX	player1color
  20193  3e11		       a9 fa		      LDA	#>playercolorL0965_1
  20194  3e13		       85 88		      STA	player1color+1
  20195  3e15				   .
  20196  3e15							; 
  20197  3e15
  20198  3e15				   .L0966		;  goto __Wroth_Color_Done
  20199  3e15
  20200  3e15		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20201  3e18
  20202  3e18				   .
  20203  3e18							; 
  20204  3e18
  20205  3e18				   .
  20206  3e18							; 
  20207  3e18
  20208  3e18				   .__W_Clr_16
  20209  3e18							; __W_Clr_16
  20210  3e18
  20211  3e18				   .
  20212  3e18							; 
  20213  3e18
  20214  3e18				   .L0967		;  player1color:
  20215  3e18
  20216  3e18		       a2 10		      LDX	#<playercolorL0967_1
  20217  3e1a		       86 87		      STX	player1color
  20218  3e1c		       a9 fa		      LDA	#>playercolorL0967_1
  20219  3e1e		       85 88		      STA	player1color+1
  20220  3e20				   .
  20221  3e20							; 
  20222  3e20
  20223  3e20				   .L0968		;  goto __Wroth_Color_Done
  20224  3e20
  20225  3e20		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20226  3e23
  20227  3e23				   .
  20228  3e23							; 
  20229  3e23
  20230  3e23				   .
  20231  3e23							; 
  20232  3e23
  20233  3e23				   .__W_Clr_17
  20234  3e23							; __W_Clr_17
  20235  3e23
  20236  3e23				   .
  20237  3e23							; 
  20238  3e23
  20239  3e23				   .L0969		;  player1color:
  20240  3e23
  20241  3e23		       a2 18		      LDX	#<playercolorL0969_1
  20242  3e25		       86 87		      STX	player1color
  20243  3e27		       a9 fa		      LDA	#>playercolorL0969_1
  20244  3e29		       85 88		      STA	player1color+1
  20245  3e2b				   .
  20246  3e2b							; 
  20247  3e2b
  20248  3e2b				   .L0970		;  goto __Wroth_Color_Done
  20249  3e2b
  20250  3e2b		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20251  3e2e
  20252  3e2e				   .
  20253  3e2e							; 
  20254  3e2e
  20255  3e2e				   .
  20256  3e2e							; 
  20257  3e2e
  20258  3e2e				   .__W_Clr_18
  20259  3e2e							; __W_Clr_18
  20260  3e2e
  20261  3e2e				   .
  20262  3e2e							; 
  20263  3e2e
  20264  3e2e				   .L0971		;  player1color:
  20265  3e2e
  20266  3e2e		       a2 20		      LDX	#<playercolorL0971_1
  20267  3e30		       86 87		      STX	player1color
  20268  3e32		       a9 fa		      LDA	#>playercolorL0971_1
  20269  3e34		       85 88		      STA	player1color+1
  20270  3e36				   .
  20271  3e36							; 
  20272  3e36
  20273  3e36				   .L0972		;  goto __Wroth_Color_Done
  20274  3e36
  20275  3e36		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20276  3e39
  20277  3e39				   .
  20278  3e39							; 
  20279  3e39
  20280  3e39				   .
  20281  3e39							; 
  20282  3e39
  20283  3e39				   .__W_Clr_19
  20284  3e39							; __W_Clr_19
  20285  3e39
  20286  3e39				   .
  20287  3e39							; 
  20288  3e39
  20289  3e39				   .L0973		;  player1color:
  20290  3e39
  20291  3e39		       a2 28		      LDX	#<playercolorL0973_1
  20292  3e3b		       86 87		      STX	player1color
  20293  3e3d		       a9 fa		      LDA	#>playercolorL0973_1
  20294  3e3f		       85 88		      STA	player1color+1
  20295  3e41				   .
  20296  3e41							; 
  20297  3e41
  20298  3e41				   .L0974		;  goto __Wroth_Color_Done
  20299  3e41
  20300  3e41		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20301  3e44
  20302  3e44				   .
  20303  3e44							; 
  20304  3e44
  20305  3e44				   .
  20306  3e44							; 
  20307  3e44
  20308  3e44				   .__W_Clr_20
  20309  3e44							; __W_Clr_20
  20310  3e44
  20311  3e44				   .
  20312  3e44							; 
  20313  3e44
  20314  3e44				   .L0975		;  player1color:
  20315  3e44
  20316  3e44		       a2 30		      LDX	#<playercolorL0975_1
  20317  3e46		       86 87		      STX	player1color
  20318  3e48		       a9 fa		      LDA	#>playercolorL0975_1
  20319  3e4a		       85 88		      STA	player1color+1
  20320  3e4c				   .
  20321  3e4c							; 
  20322  3e4c
  20323  3e4c				   .L0976		;  goto __Wroth_Color_Done
  20324  3e4c
  20325  3e4c		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20326  3e4f
  20327  3e4f				   .
  20328  3e4f							; 
  20329  3e4f
  20330  3e4f				   .
  20331  3e4f							; 
  20332  3e4f
  20333  3e4f				   .__W_Clr_21
  20334  3e4f							; __W_Clr_21
  20335  3e4f
  20336  3e4f				   .
  20337  3e4f							; 
  20338  3e4f
  20339  3e4f				   .L0977		;  player1color:
  20340  3e4f
  20341  3e4f		       a2 38		      LDX	#<playercolorL0977_1
  20342  3e51		       86 87		      STX	player1color
  20343  3e53		       a9 fa		      LDA	#>playercolorL0977_1
  20344  3e55		       85 88		      STA	player1color+1
  20345  3e57				   .
  20346  3e57							; 
  20347  3e57
  20348  3e57				   .L0978		;  goto __Wroth_Color_Done
  20349  3e57
  20350  3e57		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20351  3e5a
  20352  3e5a				   .
  20353  3e5a							; 
  20354  3e5a
  20355  3e5a				   .
  20356  3e5a							; 
  20357  3e5a
  20358  3e5a				   .__W_Clr_22
  20359  3e5a							; __W_Clr_22
  20360  3e5a
  20361  3e5a				   .
  20362  3e5a							; 
  20363  3e5a
  20364  3e5a				   .L0979		;  player1color:
  20365  3e5a
  20366  3e5a		       a2 40		      LDX	#<playercolorL0979_1
  20367  3e5c		       86 87		      STX	player1color
  20368  3e5e		       a9 fa		      LDA	#>playercolorL0979_1
  20369  3e60		       85 88		      STA	player1color+1
  20370  3e62				   .
  20371  3e62							; 
  20372  3e62
  20373  3e62				   .L0980		;  goto __Wroth_Color_Done
  20374  3e62
  20375  3e62		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20376  3e65
  20377  3e65				   .
  20378  3e65							; 
  20379  3e65
  20380  3e65				   .
  20381  3e65							; 
  20382  3e65
  20383  3e65				   .__W_Clr_23
  20384  3e65							; __W_Clr_23
  20385  3e65
  20386  3e65				   .
  20387  3e65							; 
  20388  3e65
  20389  3e65				   .L0981		;  player1color:
  20390  3e65
  20391  3e65		       a2 48		      LDX	#<playercolorL0981_1
  20392  3e67		       86 87		      STX	player1color
  20393  3e69		       a9 fa		      LDA	#>playercolorL0981_1
  20394  3e6b		       85 88		      STA	player1color+1
  20395  3e6d				   .
  20396  3e6d							; 
  20397  3e6d
  20398  3e6d				   .L0982		;  goto __Wroth_Color_Done
  20399  3e6d
  20400  3e6d		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20401  3e70
  20402  3e70				   .
  20403  3e70							; 
  20404  3e70
  20405  3e70				   .
  20406  3e70							; 
  20407  3e70
  20408  3e70				   .__W_Clr_24
  20409  3e70							; __W_Clr_24
  20410  3e70
  20411  3e70				   .
  20412  3e70							; 
  20413  3e70
  20414  3e70				   .L0983		;  player1color:
  20415  3e70
  20416  3e70		       a2 50		      LDX	#<playercolorL0983_1
  20417  3e72		       86 87		      STX	player1color
  20418  3e74		       a9 fa		      LDA	#>playercolorL0983_1
  20419  3e76		       85 88		      STA	player1color+1
  20420  3e78				   .
  20421  3e78							; 
  20422  3e78
  20423  3e78				   .L0984		;  goto __Wroth_Color_Done
  20424  3e78
  20425  3e78		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20426  3e7b
  20427  3e7b				   .
  20428  3e7b							; 
  20429  3e7b
  20430  3e7b				   .
  20431  3e7b							; 
  20432  3e7b
  20433  3e7b				   .__W_Clr_25
  20434  3e7b							; __W_Clr_25
  20435  3e7b
  20436  3e7b				   .
  20437  3e7b							; 
  20438  3e7b
  20439  3e7b				   .L0985		;  player1color:
  20440  3e7b
  20441  3e7b		       a2 58		      LDX	#<playercolorL0985_1
  20442  3e7d		       86 87		      STX	player1color
  20443  3e7f		       a9 fa		      LDA	#>playercolorL0985_1
  20444  3e81		       85 88		      STA	player1color+1
  20445  3e83				   .
  20446  3e83							; 
  20447  3e83
  20448  3e83				   .L0986		;  goto __Wroth_Color_Done
  20449  3e83
  20450  3e83		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20451  3e86
  20452  3e86				   .
  20453  3e86							; 
  20454  3e86
  20455  3e86				   .
  20456  3e86							; 
  20457  3e86
  20458  3e86				   .__W_Clr_26
  20459  3e86							; __W_Clr_26
  20460  3e86
  20461  3e86				   .
  20462  3e86							; 
  20463  3e86
  20464  3e86				   .L0987		;  player1color:
  20465  3e86
  20466  3e86		       a2 60		      LDX	#<playercolorL0987_1
  20467  3e88		       86 87		      STX	player1color
  20468  3e8a		       a9 fa		      LDA	#>playercolorL0987_1
  20469  3e8c		       85 88		      STA	player1color+1
  20470  3e8e				   .
  20471  3e8e							; 
  20472  3e8e
  20473  3e8e				   .L0988		;  goto __Wroth_Color_Done
  20474  3e8e
  20475  3e8e		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20476  3e91
  20477  3e91				   .
  20478  3e91							; 
  20479  3e91
  20480  3e91				   .
  20481  3e91							; 
  20482  3e91
  20483  3e91				   .__W_Clr_27
  20484  3e91							; __W_Clr_27
  20485  3e91
  20486  3e91				   .
  20487  3e91							; 
  20488  3e91
  20489  3e91				   .L0989		;  player1color:
  20490  3e91
  20491  3e91		       a2 68		      LDX	#<playercolorL0989_1
  20492  3e93		       86 87		      STX	player1color
  20493  3e95		       a9 fa		      LDA	#>playercolorL0989_1
  20494  3e97		       85 88		      STA	player1color+1
  20495  3e99				   .
  20496  3e99							; 
  20497  3e99
  20498  3e99				   .L0990		;  goto __Wroth_Color_Done
  20499  3e99
  20500  3e99		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20501  3e9c
  20502  3e9c				   .
  20503  3e9c							; 
  20504  3e9c
  20505  3e9c				   .
  20506  3e9c							; 
  20507  3e9c
  20508  3e9c				   .__W_Clr_28
  20509  3e9c							; __W_Clr_28
  20510  3e9c
  20511  3e9c				   .
  20512  3e9c							; 
  20513  3e9c
  20514  3e9c				   .L0991		;  player1color:
  20515  3e9c
  20516  3e9c		       a2 70		      LDX	#<playercolorL0991_1
  20517  3e9e		       86 87		      STX	player1color
  20518  3ea0		       a9 fa		      LDA	#>playercolorL0991_1
  20519  3ea2		       85 88		      STA	player1color+1
  20520  3ea4				   .
  20521  3ea4							; 
  20522  3ea4
  20523  3ea4				   .L0992		;  goto __Wroth_Color_Done
  20524  3ea4
  20525  3ea4		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20526  3ea7
  20527  3ea7				   .
  20528  3ea7							; 
  20529  3ea7
  20530  3ea7				   .
  20531  3ea7							; 
  20532  3ea7
  20533  3ea7				   .__W_Clr_29
  20534  3ea7							; __W_Clr_29
  20535  3ea7
  20536  3ea7				   .
  20537  3ea7							; 
  20538  3ea7
  20539  3ea7				   .L0993		;  player1color:
  20540  3ea7
  20541  3ea7		       a2 78		      LDX	#<playercolorL0993_1
  20542  3ea9		       86 87		      STX	player1color
  20543  3eab		       a9 fa		      LDA	#>playercolorL0993_1
  20544  3ead		       85 88		      STA	player1color+1
  20545  3eaf				   .
  20546  3eaf							; 
  20547  3eaf
  20548  3eaf				   .L0994		;  goto __Wroth_Color_Done
  20549  3eaf
  20550  3eaf		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20551  3eb2
  20552  3eb2				   .
  20553  3eb2							; 
  20554  3eb2
  20555  3eb2				   .
  20556  3eb2							; 
  20557  3eb2
  20558  3eb2				   .__W_Clr_30
  20559  3eb2							; __W_Clr_30
  20560  3eb2
  20561  3eb2				   .
  20562  3eb2							; 
  20563  3eb2
  20564  3eb2				   .L0995		;  player1color:
  20565  3eb2
  20566  3eb2		       a2 80		      LDX	#<playercolorL0995_1
  20567  3eb4		       86 87		      STX	player1color
  20568  3eb6		       a9 fa		      LDA	#>playercolorL0995_1
  20569  3eb8		       85 88		      STA	player1color+1
  20570  3eba				   .
  20571  3eba							; 
  20572  3eba
  20573  3eba				   .L0996		;  goto __Wroth_Color_Done
  20574  3eba
  20575  3eba		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20576  3ebd
  20577  3ebd				   .
  20578  3ebd							; 
  20579  3ebd
  20580  3ebd				   .
  20581  3ebd							; 
  20582  3ebd
  20583  3ebd				   .__W_Clr_31
  20584  3ebd							; __W_Clr_31
  20585  3ebd
  20586  3ebd				   .
  20587  3ebd							; 
  20588  3ebd
  20589  3ebd				   .L0997		;  player1color:
  20590  3ebd
  20591  3ebd		       a2 88		      LDX	#<playercolorL0997_1
  20592  3ebf		       86 87		      STX	player1color
  20593  3ec1		       a9 fa		      LDA	#>playercolorL0997_1
  20594  3ec3		       85 88		      STA	player1color+1
  20595  3ec5				   .
  20596  3ec5							; 
  20597  3ec5
  20598  3ec5				   .L0998		;  goto __Wroth_Color_Done
  20599  3ec5
  20600  3ec5		       4c 2a 56 	      jmp	.__Wroth_Color_Done
  20601  3ec8
  20602  3ec8				   .
  20603  3ec8							; 
  20604  3ec8
  20605  3ec8				   .
  20606  3ec8							; 
  20607  3ec8
  20608  3ec8				   .
  20609  3ec8							; 
  20610  3ec8
  20611  3ec8				   .
  20612  3ec8							; 
  20613  3ec8
  20614  3ec8				   .
  20615  3ec8							; 
  20616  3ec8
  20617  3ec8				   .
  20618  3ec8							; 
  20619  3ec8
  20620  3ec8				   .
  20621  3ec8							; 
  20622  3ec8
  20623  3ec8				   .L0999		;  bank 4
  20624  3ec8
  20625  3ec8					      if	ECHO3
      268 bytes of ROM space left in bank 3
  20626  3ec8					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
  20627  3ec8					      endif
  20628  3ec8		       00 01	   ECHO3      =	1
  20629  3fd4					      ORG	$3FF4-bscode_length
  20630  3fd4					      RORG	$5FF4-bscode_length
  20631  3fd4		       a2 ff	   start_bank3 ldx	#$ff
  20632  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
  20633  3fd6				  -	      stx	FASTFETCH
  20634  3fd6					      endif
  20635  3fd6		       9a		      txs
  20636  3fd7				  -	      if	bankswitch == 64
  20637  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  20638  3fd7					      else
  20639  3fd7		       a9 f3		      lda	#>(start-1)
  20640  3fd9					      endif
  20641  3fd9		       48		      pha
  20642  3fda		       a9 51		      lda	#<(start-1)
  20643  3fdc		       48		      pha
  20644  3fdd		       48		      pha
  20645  3fde		       8a		      txa
  20646  3fdf		       48		      pha
  20647  3fe0		       ba		      tsx
  20648  3fe1					      if	bankswitch != 64
  20649  3fe1		       b5 04		      lda	4,x	; get high byte of return address
  20650  3fe3		       2a		      rol
  20651  3fe4		       2a		      rol
  20652  3fe5		       2a		      rol
  20653  3fe6		       2a		      rol
  20654  3fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  20655  3fe9		       aa		      tax
  20656  3fea		       e8		      inx
  20657  3feb				  -	      else
  20658  3feb				  -	      lda	4,x	; get high byte of return address
  20659  3feb				  -	      tay
  20660  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  20661  3feb				  -	      sta	4,x
  20662  3feb				  -	      tya
  20663  3feb				  -	      lsr
  20664  3feb				  -	      lsr
  20665  3feb				  -	      lsr
  20666  3feb				  -	      lsr
  20667  3feb				  -	      tax
  20668  3feb				  -	      inx
  20669  3feb					      endif
  20670  3feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  20671  3fee		       68		      pla
  20672  3fef		       aa		      tax
  20673  3ff0		       68		      pla
  20674  3ff1		       60		      rts
  20675  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  20676  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  20677  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  20678  3ff2					      endif
  20679  3ffc					      ORG	$3FFC
  20680  3ffc					      RORG	$5FFC
  20681  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
  20682  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
  20683  4000					      ORG	$4000
  20684  4000					      RORG	$7000
  20685  4000					      repeat	256
  20686  4000		       ff		      .byte.b	$ff
  20685  4000					      repend
  20686  4001		       ff		      .byte.b	$ff
  20685  4001					      repend
  20686  4002		       ff		      .byte.b	$ff
  20685  4002					      repend
  20686  4003		       ff		      .byte.b	$ff
  20685  4003					      repend
  20686  4004		       ff		      .byte.b	$ff
  20685  4004					      repend
  20686  4005		       ff		      .byte.b	$ff
  20685  4005					      repend
  20686  4006		       ff		      .byte.b	$ff
  20685  4006					      repend
  20686  4007		       ff		      .byte.b	$ff
  20685  4007					      repend
  20686  4008		       ff		      .byte.b	$ff
  20685  4008					      repend
  20686  4009		       ff		      .byte.b	$ff
  20685  4009					      repend
  20686  400a		       ff		      .byte.b	$ff
  20685  400a					      repend
  20686  400b		       ff		      .byte.b	$ff
  20685  400b					      repend
  20686  400c		       ff		      .byte.b	$ff
  20685  400c					      repend
  20686  400d		       ff		      .byte.b	$ff
  20685  400d					      repend
  20686  400e		       ff		      .byte.b	$ff
  20685  400e					      repend
  20686  400f		       ff		      .byte.b	$ff
  20685  400f					      repend
  20686  4010		       ff		      .byte.b	$ff
  20685  4010					      repend
  20686  4011		       ff		      .byte.b	$ff
  20685  4011					      repend
  20686  4012		       ff		      .byte.b	$ff
  20685  4012					      repend
  20686  4013		       ff		      .byte.b	$ff
  20685  4013					      repend
  20686  4014		       ff		      .byte.b	$ff
  20685  4014					      repend
  20686  4015		       ff		      .byte.b	$ff
  20685  4015					      repend
  20686  4016		       ff		      .byte.b	$ff
  20685  4016					      repend
  20686  4017		       ff		      .byte.b	$ff
  20685  4017					      repend
  20686  4018		       ff		      .byte.b	$ff
  20685  4018					      repend
  20686  4019		       ff		      .byte.b	$ff
  20685  4019					      repend
  20686  401a		       ff		      .byte.b	$ff
  20685  401a					      repend
  20686  401b		       ff		      .byte.b	$ff
  20685  401b					      repend
  20686  401c		       ff		      .byte.b	$ff
  20685  401c					      repend
  20686  401d		       ff		      .byte.b	$ff
  20685  401d					      repend
  20686  401e		       ff		      .byte.b	$ff
  20685  401e					      repend
  20686  401f		       ff		      .byte.b	$ff
  20685  401f					      repend
  20686  4020		       ff		      .byte.b	$ff
  20685  4020					      repend
  20686  4021		       ff		      .byte.b	$ff
  20685  4021					      repend
  20686  4022		       ff		      .byte.b	$ff
  20685  4022					      repend
  20686  4023		       ff		      .byte.b	$ff
  20685  4023					      repend
  20686  4024		       ff		      .byte.b	$ff
  20685  4024					      repend
  20686  4025		       ff		      .byte.b	$ff
  20685  4025					      repend
  20686  4026		       ff		      .byte.b	$ff
  20685  4026					      repend
  20686  4027		       ff		      .byte.b	$ff
  20685  4027					      repend
  20686  4028		       ff		      .byte.b	$ff
  20685  4028					      repend
  20686  4029		       ff		      .byte.b	$ff
  20685  4029					      repend
  20686  402a		       ff		      .byte.b	$ff
  20685  402a					      repend
  20686  402b		       ff		      .byte.b	$ff
  20685  402b					      repend
  20686  402c		       ff		      .byte.b	$ff
  20685  402c					      repend
  20686  402d		       ff		      .byte.b	$ff
  20685  402d					      repend
  20686  402e		       ff		      .byte.b	$ff
  20685  402e					      repend
  20686  402f		       ff		      .byte.b	$ff
  20685  402f					      repend
  20686  4030		       ff		      .byte.b	$ff
  20685  4030					      repend
  20686  4031		       ff		      .byte.b	$ff
  20685  4031					      repend
  20686  4032		       ff		      .byte.b	$ff
  20685  4032					      repend
  20686  4033		       ff		      .byte.b	$ff
  20685  4033					      repend
  20686  4034		       ff		      .byte.b	$ff
  20685  4034					      repend
  20686  4035		       ff		      .byte.b	$ff
  20685  4035					      repend
  20686  4036		       ff		      .byte.b	$ff
  20685  4036					      repend
  20686  4037		       ff		      .byte.b	$ff
  20685  4037					      repend
  20686  4038		       ff		      .byte.b	$ff
  20685  4038					      repend
  20686  4039		       ff		      .byte.b	$ff
  20685  4039					      repend
  20686  403a		       ff		      .byte.b	$ff
  20685  403a					      repend
  20686  403b		       ff		      .byte.b	$ff
  20685  403b					      repend
  20686  403c		       ff		      .byte.b	$ff
  20685  403c					      repend
  20686  403d		       ff		      .byte.b	$ff
  20685  403d					      repend
  20686  403e		       ff		      .byte.b	$ff
  20685  403e					      repend
  20686  403f		       ff		      .byte.b	$ff
  20685  403f					      repend
  20686  4040		       ff		      .byte.b	$ff
  20685  4040					      repend
  20686  4041		       ff		      .byte.b	$ff
  20685  4041					      repend
  20686  4042		       ff		      .byte.b	$ff
  20685  4042					      repend
  20686  4043		       ff		      .byte.b	$ff
  20685  4043					      repend
  20686  4044		       ff		      .byte.b	$ff
  20685  4044					      repend
  20686  4045		       ff		      .byte.b	$ff
  20685  4045					      repend
  20686  4046		       ff		      .byte.b	$ff
  20685  4046					      repend
  20686  4047		       ff		      .byte.b	$ff
  20685  4047					      repend
  20686  4048		       ff		      .byte.b	$ff
  20685  4048					      repend
  20686  4049		       ff		      .byte.b	$ff
  20685  4049					      repend
  20686  404a		       ff		      .byte.b	$ff
  20685  404a					      repend
  20686  404b		       ff		      .byte.b	$ff
  20685  404b					      repend
  20686  404c		       ff		      .byte.b	$ff
  20685  404c					      repend
  20686  404d		       ff		      .byte.b	$ff
  20685  404d					      repend
  20686  404e		       ff		      .byte.b	$ff
  20685  404e					      repend
  20686  404f		       ff		      .byte.b	$ff
  20685  404f					      repend
  20686  4050		       ff		      .byte.b	$ff
  20685  4050					      repend
  20686  4051		       ff		      .byte.b	$ff
  20685  4051					      repend
  20686  4052		       ff		      .byte.b	$ff
  20685  4052					      repend
  20686  4053		       ff		      .byte.b	$ff
  20685  4053					      repend
  20686  4054		       ff		      .byte.b	$ff
  20685  4054					      repend
  20686  4055		       ff		      .byte.b	$ff
  20685  4055					      repend
  20686  4056		       ff		      .byte.b	$ff
  20685  4056					      repend
  20686  4057		       ff		      .byte.b	$ff
  20685  4057					      repend
  20686  4058		       ff		      .byte.b	$ff
  20685  4058					      repend
  20686  4059		       ff		      .byte.b	$ff
  20685  4059					      repend
  20686  405a		       ff		      .byte.b	$ff
  20685  405a					      repend
  20686  405b		       ff		      .byte.b	$ff
  20685  405b					      repend
  20686  405c		       ff		      .byte.b	$ff
  20685  405c					      repend
  20686  405d		       ff		      .byte.b	$ff
  20685  405d					      repend
  20686  405e		       ff		      .byte.b	$ff
  20685  405e					      repend
  20686  405f		       ff		      .byte.b	$ff
  20685  405f					      repend
  20686  4060		       ff		      .byte.b	$ff
  20685  4060					      repend
  20686  4061		       ff		      .byte.b	$ff
  20685  4061					      repend
  20686  4062		       ff		      .byte.b	$ff
  20685  4062					      repend
  20686  4063		       ff		      .byte.b	$ff
  20685  4063					      repend
  20686  4064		       ff		      .byte.b	$ff
  20685  4064					      repend
  20686  4065		       ff		      .byte.b	$ff
  20685  4065					      repend
  20686  4066		       ff		      .byte.b	$ff
  20685  4066					      repend
  20686  4067		       ff		      .byte.b	$ff
  20685  4067					      repend
  20686  4068		       ff		      .byte.b	$ff
  20685  4068					      repend
  20686  4069		       ff		      .byte.b	$ff
  20685  4069					      repend
  20686  406a		       ff		      .byte.b	$ff
  20685  406a					      repend
  20686  406b		       ff		      .byte.b	$ff
  20685  406b					      repend
  20686  406c		       ff		      .byte.b	$ff
  20685  406c					      repend
  20686  406d		       ff		      .byte.b	$ff
  20685  406d					      repend
  20686  406e		       ff		      .byte.b	$ff
  20685  406e					      repend
  20686  406f		       ff		      .byte.b	$ff
  20685  406f					      repend
  20686  4070		       ff		      .byte.b	$ff
  20685  4070					      repend
  20686  4071		       ff		      .byte.b	$ff
  20685  4071					      repend
  20686  4072		       ff		      .byte.b	$ff
  20685  4072					      repend
  20686  4073		       ff		      .byte.b	$ff
  20685  4073					      repend
  20686  4074		       ff		      .byte.b	$ff
  20685  4074					      repend
  20686  4075		       ff		      .byte.b	$ff
  20685  4075					      repend
  20686  4076		       ff		      .byte.b	$ff
  20685  4076					      repend
  20686  4077		       ff		      .byte.b	$ff
  20685  4077					      repend
  20686  4078		       ff		      .byte.b	$ff
  20685  4078					      repend
  20686  4079		       ff		      .byte.b	$ff
  20685  4079					      repend
  20686  407a		       ff		      .byte.b	$ff
  20685  407a					      repend
  20686  407b		       ff		      .byte.b	$ff
  20685  407b					      repend
  20686  407c		       ff		      .byte.b	$ff
  20685  407c					      repend
  20686  407d		       ff		      .byte.b	$ff
  20685  407d					      repend
  20686  407e		       ff		      .byte.b	$ff
  20685  407e					      repend
  20686  407f		       ff		      .byte.b	$ff
  20685  407f					      repend
  20686  4080		       ff		      .byte.b	$ff
  20685  4080					      repend
  20686  4081		       ff		      .byte.b	$ff
  20685  4081					      repend
  20686  4082		       ff		      .byte.b	$ff
  20685  4082					      repend
  20686  4083		       ff		      .byte.b	$ff
  20685  4083					      repend
  20686  4084		       ff		      .byte.b	$ff
  20685  4084					      repend
  20686  4085		       ff		      .byte.b	$ff
  20685  4085					      repend
  20686  4086		       ff		      .byte.b	$ff
  20685  4086					      repend
  20686  4087		       ff		      .byte.b	$ff
  20685  4087					      repend
  20686  4088		       ff		      .byte.b	$ff
  20685  4088					      repend
  20686  4089		       ff		      .byte.b	$ff
  20685  4089					      repend
  20686  408a		       ff		      .byte.b	$ff
  20685  408a					      repend
  20686  408b		       ff		      .byte.b	$ff
  20685  408b					      repend
  20686  408c		       ff		      .byte.b	$ff
  20685  408c					      repend
  20686  408d		       ff		      .byte.b	$ff
  20685  408d					      repend
  20686  408e		       ff		      .byte.b	$ff
  20685  408e					      repend
  20686  408f		       ff		      .byte.b	$ff
  20685  408f					      repend
  20686  4090		       ff		      .byte.b	$ff
  20685  4090					      repend
  20686  4091		       ff		      .byte.b	$ff
  20685  4091					      repend
  20686  4092		       ff		      .byte.b	$ff
  20685  4092					      repend
  20686  4093		       ff		      .byte.b	$ff
  20685  4093					      repend
  20686  4094		       ff		      .byte.b	$ff
  20685  4094					      repend
  20686  4095		       ff		      .byte.b	$ff
  20685  4095					      repend
  20686  4096		       ff		      .byte.b	$ff
  20685  4096					      repend
  20686  4097		       ff		      .byte.b	$ff
  20685  4097					      repend
  20686  4098		       ff		      .byte.b	$ff
  20685  4098					      repend
  20686  4099		       ff		      .byte.b	$ff
  20685  4099					      repend
  20686  409a		       ff		      .byte.b	$ff
  20685  409a					      repend
  20686  409b		       ff		      .byte.b	$ff
  20685  409b					      repend
  20686  409c		       ff		      .byte.b	$ff
  20685  409c					      repend
  20686  409d		       ff		      .byte.b	$ff
  20685  409d					      repend
  20686  409e		       ff		      .byte.b	$ff
  20685  409e					      repend
  20686  409f		       ff		      .byte.b	$ff
  20685  409f					      repend
  20686  40a0		       ff		      .byte.b	$ff
  20685  40a0					      repend
  20686  40a1		       ff		      .byte.b	$ff
  20685  40a1					      repend
  20686  40a2		       ff		      .byte.b	$ff
  20685  40a2					      repend
  20686  40a3		       ff		      .byte.b	$ff
  20685  40a3					      repend
  20686  40a4		       ff		      .byte.b	$ff
  20685  40a4					      repend
  20686  40a5		       ff		      .byte.b	$ff
  20685  40a5					      repend
  20686  40a6		       ff		      .byte.b	$ff
  20685  40a6					      repend
  20686  40a7		       ff		      .byte.b	$ff
  20685  40a7					      repend
  20686  40a8		       ff		      .byte.b	$ff
  20685  40a8					      repend
  20686  40a9		       ff		      .byte.b	$ff
  20685  40a9					      repend
  20686  40aa		       ff		      .byte.b	$ff
  20685  40aa					      repend
  20686  40ab		       ff		      .byte.b	$ff
  20685  40ab					      repend
  20686  40ac		       ff		      .byte.b	$ff
  20685  40ac					      repend
  20686  40ad		       ff		      .byte.b	$ff
  20685  40ad					      repend
  20686  40ae		       ff		      .byte.b	$ff
  20685  40ae					      repend
  20686  40af		       ff		      .byte.b	$ff
  20685  40af					      repend
  20686  40b0		       ff		      .byte.b	$ff
  20685  40b0					      repend
  20686  40b1		       ff		      .byte.b	$ff
  20685  40b1					      repend
  20686  40b2		       ff		      .byte.b	$ff
  20685  40b2					      repend
  20686  40b3		       ff		      .byte.b	$ff
  20685  40b3					      repend
  20686  40b4		       ff		      .byte.b	$ff
  20685  40b4					      repend
  20686  40b5		       ff		      .byte.b	$ff
  20685  40b5					      repend
  20686  40b6		       ff		      .byte.b	$ff
  20685  40b6					      repend
  20686  40b7		       ff		      .byte.b	$ff
  20685  40b7					      repend
  20686  40b8		       ff		      .byte.b	$ff
  20685  40b8					      repend
  20686  40b9		       ff		      .byte.b	$ff
  20685  40b9					      repend
  20686  40ba		       ff		      .byte.b	$ff
  20685  40ba					      repend
  20686  40bb		       ff		      .byte.b	$ff
  20685  40bb					      repend
  20686  40bc		       ff		      .byte.b	$ff
  20685  40bc					      repend
  20686  40bd		       ff		      .byte.b	$ff
  20685  40bd					      repend
  20686  40be		       ff		      .byte.b	$ff
  20685  40be					      repend
  20686  40bf		       ff		      .byte.b	$ff
  20685  40bf					      repend
  20686  40c0		       ff		      .byte.b	$ff
  20685  40c0					      repend
  20686  40c1		       ff		      .byte.b	$ff
  20685  40c1					      repend
  20686  40c2		       ff		      .byte.b	$ff
  20685  40c2					      repend
  20686  40c3		       ff		      .byte.b	$ff
  20685  40c3					      repend
  20686  40c4		       ff		      .byte.b	$ff
  20685  40c4					      repend
  20686  40c5		       ff		      .byte.b	$ff
  20685  40c5					      repend
  20686  40c6		       ff		      .byte.b	$ff
  20685  40c6					      repend
  20686  40c7		       ff		      .byte.b	$ff
  20685  40c7					      repend
  20686  40c8		       ff		      .byte.b	$ff
  20685  40c8					      repend
  20686  40c9		       ff		      .byte.b	$ff
  20685  40c9					      repend
  20686  40ca		       ff		      .byte.b	$ff
  20685  40ca					      repend
  20686  40cb		       ff		      .byte.b	$ff
  20685  40cb					      repend
  20686  40cc		       ff		      .byte.b	$ff
  20685  40cc					      repend
  20686  40cd		       ff		      .byte.b	$ff
  20685  40cd					      repend
  20686  40ce		       ff		      .byte.b	$ff
  20685  40ce					      repend
  20686  40cf		       ff		      .byte.b	$ff
  20685  40cf					      repend
  20686  40d0		       ff		      .byte.b	$ff
  20685  40d0					      repend
  20686  40d1		       ff		      .byte.b	$ff
  20685  40d1					      repend
  20686  40d2		       ff		      .byte.b	$ff
  20685  40d2					      repend
  20686  40d3		       ff		      .byte.b	$ff
  20685  40d3					      repend
  20686  40d4		       ff		      .byte.b	$ff
  20685  40d4					      repend
  20686  40d5		       ff		      .byte.b	$ff
  20685  40d5					      repend
  20686  40d6		       ff		      .byte.b	$ff
  20685  40d6					      repend
  20686  40d7		       ff		      .byte.b	$ff
  20685  40d7					      repend
  20686  40d8		       ff		      .byte.b	$ff
  20685  40d8					      repend
  20686  40d9		       ff		      .byte.b	$ff
  20685  40d9					      repend
  20686  40da		       ff		      .byte.b	$ff
  20685  40da					      repend
  20686  40db		       ff		      .byte.b	$ff
  20685  40db					      repend
  20686  40dc		       ff		      .byte.b	$ff
  20685  40dc					      repend
  20686  40dd		       ff		      .byte.b	$ff
  20685  40dd					      repend
  20686  40de		       ff		      .byte.b	$ff
  20685  40de					      repend
  20686  40df		       ff		      .byte.b	$ff
  20685  40df					      repend
  20686  40e0		       ff		      .byte.b	$ff
  20685  40e0					      repend
  20686  40e1		       ff		      .byte.b	$ff
  20685  40e1					      repend
  20686  40e2		       ff		      .byte.b	$ff
  20685  40e2					      repend
  20686  40e3		       ff		      .byte.b	$ff
  20685  40e3					      repend
  20686  40e4		       ff		      .byte.b	$ff
  20685  40e4					      repend
  20686  40e5		       ff		      .byte.b	$ff
  20685  40e5					      repend
  20686  40e6		       ff		      .byte.b	$ff
  20685  40e6					      repend
  20686  40e7		       ff		      .byte.b	$ff
  20685  40e7					      repend
  20686  40e8		       ff		      .byte.b	$ff
  20685  40e8					      repend
  20686  40e9		       ff		      .byte.b	$ff
  20685  40e9					      repend
  20686  40ea		       ff		      .byte.b	$ff
  20685  40ea					      repend
  20686  40eb		       ff		      .byte.b	$ff
  20685  40eb					      repend
  20686  40ec		       ff		      .byte.b	$ff
  20685  40ec					      repend
  20686  40ed		       ff		      .byte.b	$ff
  20685  40ed					      repend
  20686  40ee		       ff		      .byte.b	$ff
  20685  40ee					      repend
  20686  40ef		       ff		      .byte.b	$ff
  20685  40ef					      repend
  20686  40f0		       ff		      .byte.b	$ff
  20685  40f0					      repend
  20686  40f1		       ff		      .byte.b	$ff
  20685  40f1					      repend
  20686  40f2		       ff		      .byte.b	$ff
  20685  40f2					      repend
  20686  40f3		       ff		      .byte.b	$ff
  20685  40f3					      repend
  20686  40f4		       ff		      .byte.b	$ff
  20685  40f4					      repend
  20686  40f5		       ff		      .byte.b	$ff
  20685  40f5					      repend
  20686  40f6		       ff		      .byte.b	$ff
  20685  40f6					      repend
  20686  40f7		       ff		      .byte.b	$ff
  20685  40f7					      repend
  20686  40f8		       ff		      .byte.b	$ff
  20685  40f8					      repend
  20686  40f9		       ff		      .byte.b	$ff
  20685  40f9					      repend
  20686  40fa		       ff		      .byte.b	$ff
  20685  40fa					      repend
  20686  40fb		       ff		      .byte.b	$ff
  20685  40fb					      repend
  20686  40fc		       ff		      .byte.b	$ff
  20685  40fc					      repend
  20686  40fd		       ff		      .byte.b	$ff
  20685  40fd					      repend
  20686  40fe		       ff		      .byte.b	$ff
  20685  40fe					      repend
  20686  40ff		       ff		      .byte.b	$ff
  20687  4100					      repend
  20688  4100				   .
  20689  4100							; 
  20690  4100
  20691  4100				   .
  20692  4100							; 
  20693  4100
  20694  4100				   .
  20695  4100							; 
  20696  4100
  20697  4100				   .
  20698  4100							; 
  20699  4100
  20700  4100				   .
  20701  4100							; 
  20702  4100
  20703  4100				   .
  20704  4100							; 
  20705  4100
  20706  4100				   .
  20707  4100							; 
  20708  4100
  20709  4100				   .
  20710  4100							; 
  20711  4100
  20712  4100				   .
  20713  4100							; 
  20714  4100
  20715  4100				   .
  20716  4100							; 
  20717  4100
  20718  4100				   .
  20719  4100							; 
  20720  4100
  20721  4100				   .
  20722  4100							; 
  20723  4100
  20724  4100				   .__Code_Section_3
  20725  4100							; __Code_Section_3
  20726  4100
  20727  4100				   .
  20728  4100							; 
  20729  4100
  20730  4100				   .
  20731  4100							; 
  20732  4100
  20733  4100				   .
  20734  4100							; 
  20735  4100
  20736  4100				   .
  20737  4100							; 
  20738  4100
  20739  4100				   .
  20740  4100							; 
  20741  4100
  20742  4100				   .
  20743  4100							; 
  20744  4100
  20745  4100				   .
  20746  4100							; 
  20747  4100
  20748  4100				   .
  20749  4100							; 
  20750  4100
  20751  4100				   .L01000		;  if _Bit2_1000_On{2} then goto __Skip_Normal_Colors
  20752  4100
  20753  4100		       a5 c7		      LDA	_Bit2_1000_On
  20754  4102		       29 04		      AND	#4
  20755  4104		       f0 03		      BEQ	.skipL01000
  20756  4106				   .condpart346
  20757  4106		       4c 15 71 	      jmp	.__Skip_Normal_Colors
  20758  4109
  20759  4109				   .skipL01000
  20760  4109				   .
  20761  4109							; 
  20762  4109
  20763  4109				   .L01001		;  pfcolors:
  20764  4109
  20765  4109		       a9 ce		      lda	# $CE
  20766  410b		       85 08		      sta	COLUPF
  20767  410d				  -	      ifconst	pfres
  20768  410d				  -	      lda	#>(pfcolorlabel1109-132+pfres*pfwidth)
  20769  410d					      else
  20770  410d		       a9 fa		      lda	#>(pfcolorlabel1109-84)
  20771  410f					      endif
  20772  410f		       85 f1		      sta	pfcolortable+1
  20773  4111				  -	      ifconst	pfres
  20774  4111				  -	      lda	#<(pfcolorlabel1109-132+pfres*pfwidth)
  20775  4111					      else
  20776  4111		       a9 3c		      lda	#<(pfcolorlabel1109-84)
  20777  4113					      endif
  20778  4113		       85 f0		      sta	pfcolortable
  20779  4115				   .
  20780  4115							; 
  20781  4115
  20782  4115				   .__Skip_Normal_Colors
  20783  4115							; __Skip_Normal_Colors
  20784  4115
  20785  4115				   .
  20786  4115							; 
  20787  4115
  20788  4115				   .
  20789  4115							; 
  20790  4115
  20791  4115				   .
  20792  4115							; 
  20793  4115
  20794  4115				   .
  20795  4115							; 
  20796  4115
  20797  4115				   .
  20798  4115							; 
  20799  4115
  20800  4115				   .
  20801  4115							; 
  20802  4115
  20803  4115				   .
  20804  4115							; 
  20805  4115
  20806  4115				   .
  20807  4115							; 
  20808  4115
  20809  4115				   .
  20810  4115							; 
  20811  4115
  20812  4115				   .
  20813  4115							; 
  20814  4115
  20815  4115				   .L01002		;  if !_Bit2_1000_On{2} then goto __Skip_1000_Bonus
  20816  4115
  20817  4115		       a5 c7		      LDA	_Bit2_1000_On
  20818  4117		       29 04		      AND	#4
  20819  4119		       d0 03		      BNE	.skipL01002
  20820  411b				   .condpart347
  20821  411b		       4c 65 71 	      jmp	.__Skip_1000_Bonus
  20822  411e
  20823  411e				   .skipL01002
  20824  411e				   .
  20825  411e							; 
  20826  411e
  20827  411e				   .
  20828  411e							; 
  20829  411e
  20830  411e				   .
  20831  411e							; 
  20832  411e
  20833  411e				   .
  20834  411e							; 
  20835  411e
  20836  411e				   .L01003		;  on _1000_Counter gosub __1k_Color00 __1k_Color01 __1k_Color02 __1k_Color03 __1k_Color04 __1k_Color05 __1k_Color06 __1k_Color07 __1k_Color08 __1k_Color09 __1k_Color10 __1k_Color11
  20837  411e
  20838  411e		       a9 71		      lda	#>(ongosub4-1)
  20839  4120		       48		      PHA
  20840  4121		       a9 46		      lda	#<(ongosub4-1)
  20841  4123		       48		      PHA
  20842  4124		       a6 b4		      LDX	_1000_Counter
  20843  4126		       bd 2f 71 	      LDA	.L01003jumptablehi,x
  20844  4129		       48		      PHA
  20845  412a		       bd 3b 71 	      LDA	.L01003jumptablelo,x
  20846  412d		       48		      PHA
  20847  412e		       60		      RTS
  20848  412f				   .L01003jumptablehi
  20849  412f		       76		      .byte.b	>(.__1k_Color00-1)
  20850  4130		       76		      .byte.b	>(.__1k_Color01-1)
  20851  4131		       76		      .byte.b	>(.__1k_Color02-1)
  20852  4132		       76		      .byte.b	>(.__1k_Color03-1)
  20853  4133		       76		      .byte.b	>(.__1k_Color04-1)
  20854  4134		       76		      .byte.b	>(.__1k_Color05-1)
  20855  4135		       76		      .byte.b	>(.__1k_Color06-1)
  20856  4136		       77		      .byte.b	>(.__1k_Color07-1)
  20857  4137		       77		      .byte.b	>(.__1k_Color08-1)
  20858  4138		       77		      .byte.b	>(.__1k_Color09-1)
  20859  4139		       77		      .byte.b	>(.__1k_Color10-1)
  20860  413a		       77		      .byte.b	>(.__1k_Color11-1)
  20861  413b				   .L01003jumptablelo
  20862  413b		       a5		      .byte.b	<(.__1k_Color00-1)
  20863  413c		       b2		      .byte.b	<(.__1k_Color01-1)
  20864  413d		       bf		      .byte.b	<(.__1k_Color02-1)
  20865  413e		       cc		      .byte.b	<(.__1k_Color03-1)
  20866  413f		       d9		      .byte.b	<(.__1k_Color04-1)
  20867  4140		       e6		      .byte.b	<(.__1k_Color05-1)
  20868  4141		       f3		      .byte.b	<(.__1k_Color06-1)
  20869  4142		       00		      .byte.b	<(.__1k_Color07-1)
  20870  4143		       0d		      .byte.b	<(.__1k_Color08-1)
  20871  4144		       1a		      .byte.b	<(.__1k_Color09-1)
  20872  4145		       27		      .byte.b	<(.__1k_Color10-1)
  20873  4146		       34		      .byte.b	<(.__1k_Color11-1)
  20874  4147				   ongosub4
  20875  4147				   .
  20876  4147							; 
  20877  4147
  20878  4147				   .
  20879  4147							; 
  20880  4147
  20881  4147				   .
  20882  4147							; 
  20883  4147
  20884  4147				   .
  20885  4147							; 
  20886  4147
  20887  4147				   .L01004		;  if _Master_Counter	<  3 then goto __Skip_1000_Bonus
  20888  4147
  20889  4147		       a5 d8		      LDA	_Master_Counter
  20890  4149		       c9 03		      CMP	#3
  20891  414b		       b0 03		      BCS	.skipL01004
  20892  414d				   .condpart348
  20893  414d		       4c 65 71 	      jmp	.__Skip_1000_Bonus
  20894  4150
  20895  4150				   .skipL01004
  20896  4150				   .
  20897  4150							; 
  20898  4150
  20899  4150				   .
  20900  4150							; 
  20901  4150
  20902  4150				   .
  20903  4150							; 
  20904  4150
  20905  4150				   .
  20906  4150							; 
  20907  4150
  20908  4150				   .L01005		;  _1000_Counter  =  _1000_Counter  +	1
  20909  4150
  20910  4150		       e6 b4		      INC	_1000_Counter
  20911  4152				   .
  20912  4152							; 
  20913  4152
  20914  4152				   .
  20915  4152							; 
  20916  4152
  20917  4152				   .
  20918  4152							; 
  20919  4152
  20920  4152				   .
  20921  4152							; 
  20922  4152
  20923  4152				   .L01006		;  if _1000_Counter  <  12 then goto __Skip_1000_Bonus
  20924  4152
  20925  4152		       a5 b4		      LDA	_1000_Counter
  20926  4154		       c9 0c		      CMP	#12
  20927  4156		       b0 03		      BCS	.skipL01006
  20928  4158				   .condpart349
  20929  4158		       4c 65 71 	      jmp	.__Skip_1000_Bonus
  20930  415b
  20931  415b				   .skipL01006
  20932  415b				   .
  20933  415b							; 
  20934  415b
  20935  415b				   .
  20936  415b							; 
  20937  415b
  20938  415b				   .
  20939  415b							; 
  20940  415b
  20941  415b				   .
  20942  415b							; 
  20943  415b
  20944  415b				   .L01007		;  _Bit2_1000_On{2}  =  0  :  _1000_Counter  =  0
  20945  415b
  20946  415b		       a5 c7		      LDA	_Bit2_1000_On
  20947  415d		       29 fb		      AND	#251
  20948  415f		       85 c7		      STA	_Bit2_1000_On
  20949  4161		       a9 00		      LDA	#0
  20950  4163		       85 b4		      STA	_1000_Counter
  20951  4165				   .
  20952  4165							; 
  20953  4165
  20954  4165				   .__Skip_1000_Bonus
  20955  4165							; __Skip_1000_Bonus
  20956  4165
  20957  4165				   .
  20958  4165							; 
  20959  4165
  20960  4165				   .
  20961  4165							; 
  20962  4165
  20963  4165				   .
  20964  4165							; 
  20965  4165
  20966  4165				   .
  20967  4165							; 
  20968  4165
  20969  4165				   .
  20970  4165							; 
  20971  4165
  20972  4165				   .
  20973  4165							; 
  20974  4165
  20975  4165				   .
  20976  4165							; 
  20977  4165
  20978  4165				   .
  20979  4165							; 
  20980  4165
  20981  4165				   .
  20982  4165							; 
  20983  4165
  20984  4165				   .
  20985  4165							; 
  20986  4165
  20987  4165				   .
  20988  4165							; 
  20989  4165
  20990  4165				   .
  20991  4165							; 
  20992  4165
  20993  4165				   .
  20994  4165							; 
  20995  4165
  20996  4165				   .
  20997  4165							; 
  20998  4165
  20999  4165				   .L01008		;  if !_Bit1_Auto_Play{1} then goto __AP_Skip_Reset
  21000  4165
  21001  4165		       a5 d2		      LDA	_Bit1_Auto_Play
  21002  4167		       29 02		      AND	#2
  21003  4169		       d0 03		      BNE	.skipL01008
  21004  416b				   .condpart350
  21005  416b		       4c 94 71 	      jmp	.__AP_Skip_Reset
  21006  416e
  21007  416e				   .skipL01008
  21008  416e				   .
  21009  416e							; 
  21010  416e
  21011  416e				   .
  21012  416e							; 
  21013  416e
  21014  416e				   .
  21015  416e							; 
  21016  416e
  21017  416e				   .
  21018  416e							; 
  21019  416e
  21020  416e				   .
  21021  416e							; 
  21022  416e
  21023  416e				   .L01009		;  if switchreset  ||	joy0fire then _Bit1_Auto_Play{1}  =  0	:  goto __Main_Loop_Setup bank1
  21024  416e
  21025  416e		       a9 01		      lda	#1
  21026  4170		       2c 82 02 	      bit	SWCHB
  21027  4173		       d0 03		      BNE	.skipL01009
  21028  4175				   .condpart351
  21029  4175		       4c 7c 71 	      jmp	.condpart352
  21030  4178				   .skipL01009
  21031  4178		       24 0c		      bit	INPT4
  21032  417a		       30 18		      BMI	.skip41OR
  21033  417c				   .condpart352
  21034  417c		       a5 d2		      LDA	_Bit1_Auto_Play
  21035  417e		       29 fd		      AND	#253
  21036  4180		       85 d2		      STA	_Bit1_Auto_Play
  21037  4182		       85 ee		      sta	temp7
  21038  4184		       a9 14		      lda	#>(.__Main_Loop_Setup-1)
  21039  4186		       48		      pha
  21040  4187		       a9 2c		      lda	#<(.__Main_Loop_Setup-1)
  21041  4189		       48		      pha
  21042  418a		       a5 ee		      lda	temp7
  21043  418c		       48		      pha
  21044  418d		       8a		      txa
  21045  418e		       48		      pha
  21046  418f		       a2 01		      ldx	#1
  21047  4191		       4c eb ff 	      jmp	BS_jsr
  21048  4194				   .skip41OR
  21049  4194				   .
  21050  4194							; 
  21051  4194
  21052  4194				   .__AP_Skip_Reset
  21053  4194							; __AP_Skip_Reset
  21054  4194
  21055  4194				   .
  21056  4194							; 
  21057  4194
  21058  4194				   .
  21059  4194							; 
  21060  4194
  21061  4194				   .
  21062  4194							; 
  21063  4194
  21064  4194				   .
  21065  4194							; 
  21066  4194
  21067  4194				   .
  21068  4194							; 
  21069  4194
  21070  4194				   .L01010		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Skip_Main_Reset
  21071  4194
  21072  4194		       a9 01		      lda	#1
  21073  4196		       2c 82 02 	      bit	SWCHB
  21074  4199		       f0 09		      BEQ	.skipL01010
  21075  419b				   .condpart353
  21076  419b		       a5 c4		      LDA	_Bit0_Reset_Restrainer
  21077  419d		       29 fe		      AND	#254
  21078  419f		       85 c4		      STA	_Bit0_Reset_Restrainer
  21079  41a1		       4c c4 71 	      jmp	.__Skip_Main_Reset
  21080  41a4
  21081  41a4				   .skipL01010
  21082  41a4				   .
  21083  41a4							; 
  21084  41a4
  21085  41a4				   .
  21086  41a4							; 
  21087  41a4
  21088  41a4				   .
  21089  41a4							; 
  21090  41a4
  21091  41a4				   .
  21092  41a4							; 
  21093  41a4
  21094  41a4				   .
  21095  41a4							; 
  21096  41a4
  21097  41a4				   .L01011		;  if _Bit0_Reset_Restrainer{0} then goto __Skip_Main_Reset
  21098  41a4
  21099  41a4		       a5 c4		      LDA	_Bit0_Reset_Restrainer
  21100  41a6		       4a		      LSR
  21101  41a7		       90 03		      BCC	.skipL01011
  21102  41a9				   .condpart354
  21103  41a9		       4c c4 71 	      jmp	.__Skip_Main_Reset
  21104  41ac
  21105  41ac				   .skipL01011
  21106  41ac				   .
  21107  41ac							; 
  21108  41ac
  21109  41ac				   .
  21110  41ac							; 
  21111  41ac
  21112  41ac				   .
  21113  41ac							; 
  21114  41ac
  21115  41ac				   .
  21116  41ac							; 
  21117  41ac
  21118  41ac				   .L01012		;  _Bit0_Game_Control{0}  =  0
  21119  41ac
  21120  41ac		       a5 d2		      LDA	_Bit0_Game_Control
  21121  41ae		       29 fe		      AND	#254
  21122  41b0		       85 d2		      STA	_Bit0_Game_Control
  21123  41b2				   .
  21124  41b2							; 
  21125  41b2
  21126  41b2				   .
  21127  41b2							; 
  21128  41b2
  21129  41b2				   .
  21130  41b2							; 
  21131  41b2
  21132  41b2				   .
  21133  41b2							; 
  21134  41b2
  21135  41b2				   .
  21136  41b2							; 
  21137  41b2
  21138  41b2				   .L01013		;  goto __Game_Over_Setup bank5
  21139  41b2
  21140  41b2		       85 ee		      sta	temp7
  21141  41b4		       a9 90		      lda	#>(.__Game_Over_Setup-1)
  21142  41b6		       48		      pha
  21143  41b7		       a9 ff		      lda	#<(.__Game_Over_Setup-1)
  21144  41b9		       48		      pha
  21145  41ba		       a5 ee		      lda	temp7
  21146  41bc		       48		      pha
  21147  41bd		       8a		      txa
  21148  41be		       48		      pha
  21149  41bf		       a2 05		      ldx	#5
  21150  41c1		       4c eb ff 	      jmp	BS_jsr
  21151  41c4				   .
  21152  41c4							; 
  21153  41c4
  21154  41c4				   .__Skip_Main_Reset
  21155  41c4							; __Skip_Main_Reset
  21156  41c4
  21157  41c4				   .
  21158  41c4							; 
  21159  41c4
  21160  41c4				   .
  21161  41c4							; 
  21162  41c4
  21163  41c4				   .
  21164  41c4							; 
  21165  41c4
  21166  41c4				   .
  21167  41c4							; 
  21168  41c4
  21169  41c4				   .
  21170  41c4							; 
  21171  41c4
  21172  41c4				   .
  21173  41c4							; 
  21174  41c4
  21175  41c4				   .
  21176  41c4							; 
  21177  41c4
  21178  41c4				   .
  21179  41c4							; 
  21180  41c4
  21181  41c4				   .
  21182  41c4							; 
  21183  41c4
  21184  41c4				   .
  21185  41c4							; 
  21186  41c4
  21187  41c4				   .
  21188  41c4							; 
  21189  41c4
  21190  41c4				   .
  21191  41c4							; 
  21192  41c4
  21193  41c4				   .
  21194  41c4							; 
  21195  41c4
  21196  41c4				   .
  21197  41c4							; 
  21198  41c4
  21199  41c4				   .
  21200  41c4							; 
  21201  41c4
  21202  41c4				   .L01014		;  if !_Bit0_Game_Control{0} then goto __Skip_Check_G_Over
  21203  41c4
  21204  41c4		       a5 d2		      LDA	_Bit0_Game_Control
  21205  41c6		       4a		      LSR
  21206  41c7		       b0 03		      BCS	.skipL01014
  21207  41c9				   .condpart355
  21208  41c9		       4c 02 72 	      jmp	.__Skip_Check_G_Over
  21209  41cc
  21210  41cc				   .skipL01014
  21211  41cc				   .
  21212  41cc							; 
  21213  41cc
  21214  41cc				   .
  21215  41cc							; 
  21216  41cc
  21217  41cc				   .
  21218  41cc							; 
  21219  41cc
  21220  41cc				   .
  21221  41cc							; 
  21222  41cc
  21223  41cc				   .
  21224  41cc							; 
  21225  41cc
  21226  41cc				   .L01015		;  if _Bit1_Auto_Play{1} then _sc1  =	_Score1_Mem  :	_sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem  :  goto __Title_Screen_Setup bank1
  21227  41cc
  21228  41cc		       a5 d2		      LDA	_Bit1_Auto_Play
  21229  41ce		       29 02		      AND	#2
  21230  41d0		       f0 1e		      BEQ	.skipL01015
  21231  41d2				   .condpart356
  21232  41d2		       a5 a8		      LDA	_Score1_Mem
  21233  41d4		       85 93		      STA	_sc1
  21234  41d6		       a5 a9		      LDA	_Score2_Mem
  21235  41d8		       85 94		      STA	_sc2
  21236  41da		       a5 aa		      LDA	_Score3_Mem
  21237  41dc		       85 95		      STA	_sc3
  21238  41de		       85 ee		      sta	temp7
  21239  41e0		       a9 11		      lda	#>(.__Title_Screen_Setup-1)
  21240  41e2		       48		      pha
  21241  41e3		       a9 62		      lda	#<(.__Title_Screen_Setup-1)
  21242  41e5		       48		      pha
  21243  41e6		       a5 ee		      lda	temp7
  21244  41e8		       48		      pha
  21245  41e9		       8a		      txa
  21246  41ea		       48		      pha
  21247  41eb		       a2 01		      ldx	#1
  21248  41ed		       4c eb ff 	      jmp	BS_jsr
  21249  41f0				   .skipL01015
  21250  41f0				   .
  21251  41f0							; 
  21252  41f0
  21253  41f0				   .
  21254  41f0							; 
  21255  41f0
  21256  41f0				   .
  21257  41f0							; 
  21258  41f0
  21259  41f0				   .
  21260  41f0							; 
  21261  41f0
  21262  41f0				   .L01016		;  goto __Game_Over_Setup bank5
  21263  41f0
  21264  41f0		       85 ee		      sta	temp7
  21265  41f2		       a9 90		      lda	#>(.__Game_Over_Setup-1)
  21266  41f4		       48		      pha
  21267  41f5		       a9 ff		      lda	#<(.__Game_Over_Setup-1)
  21268  41f7		       48		      pha
  21269  41f8		       a5 ee		      lda	temp7
  21270  41fa		       48		      pha
  21271  41fb		       8a		      txa
  21272  41fc		       48		      pha
  21273  41fd		       a2 05		      ldx	#5
  21274  41ff		       4c eb ff 	      jmp	BS_jsr
  21275  4202				   .
  21276  4202							; 
  21277  4202
  21278  4202				   .__Skip_Check_G_Over
  21279  4202							; __Skip_Check_G_Over
  21280  4202
  21281  4202				   .
  21282  4202							; 
  21283  4202
  21284  4202				   .
  21285  4202							; 
  21286  4202
  21287  4202				   .
  21288  4202							; 
  21289  4202
  21290  4202				   .
  21291  4202							; 
  21292  4202
  21293  4202				   .
  21294  4202							; 
  21295  4202
  21296  4202				   .
  21297  4202							; 
  21298  4202
  21299  4202				   .
  21300  4202							; 
  21301  4202
  21302  4202				   .
  21303  4202							; 
  21304  4202
  21305  4202				   .
  21306  4202							; 
  21307  4202
  21308  4202				   .
  21309  4202							; 
  21310  4202
  21311  4202				   .L01017		;  if _Bit1_Auto_Play{1} then goto __AP_Skip_Pause
  21312  4202
  21313  4202		       a5 d2		      LDA	_Bit1_Auto_Play
  21314  4204		       29 02		      AND	#2
  21315  4206		       f0 03		      BEQ	.skipL01017
  21316  4208				   .condpart357
  21317  4208		       4c 74 72 	      jmp	.__AP_Skip_Pause
  21318  420b
  21319  420b				   .skipL01017
  21320  420b				   .
  21321  420b							; 
  21322  420b
  21323  420b				   .
  21324  420b							; 
  21325  420b
  21326  420b				   .
  21327  420b							; 
  21328  420b
  21329  420b				   .
  21330  420b							; 
  21331  420b
  21332  420b				   .L01018		;  _Bit1_Pause_Check{1}  =  0
  21333  420b
  21334  420b		       a5 c7		      LDA	_Bit1_Pause_Check
  21335  420d		       29 fd		      AND	#253
  21336  420f		       85 c7		      STA	_Bit1_Pause_Check
  21337  4211				   .
  21338  4211							; 
  21339  4211
  21340  4211				   .L01019		;  if switchbw then _Bit1_Pause_Check{1}  =  1
  21341  4211
  21342  4211		       a9 08		      lda	#8
  21343  4213		       2c 82 02 	      bit	SWCHB
  21344  4216		       d0 06		      BNE	.skipL01019
  21345  4218				   .condpart358
  21346  4218		       a5 c7		      LDA	_Bit1_Pause_Check
  21347  421a		       09 02		      ORA	#2
  21348  421c		       85 c7		      STA	_Bit1_Pause_Check
  21349  421e				   .skipL01019
  21350  421e				   .
  21351  421e							; 
  21352  421e
  21353  421e				   .
  21354  421e							; 
  21355  421e
  21356  421e				   .
  21357  421e							; 
  21358  421e
  21359  421e				   .
  21360  421e							; 
  21361  421e
  21362  421e				   .
  21363  421e							; 
  21364  421e
  21365  421e				   .L01020		;  if _Bit0_Pause_Position{0} then if !_Bit1_Pause_Check{1} then goto __Pause_Setup bank1
  21366  421e
  21367  421e		       a5 c7		      LDA	_Bit0_Pause_Position
  21368  4220		       4a		      LSR
  21369  4221		       90 18		      BCC	.skipL01020
  21370  4223				   .condpart359
  21371  4223		       a5 c7		      LDA	_Bit1_Pause_Check
  21372  4225		       29 02		      AND	#2
  21373  4227		       d0 12		      BNE	.skip359then
  21374  4229				   .condpart360
  21375  4229		       85 ee		      sta	temp7
  21376  422b		       a9 17		      lda	#>(.__Pause_Setup-1)
  21377  422d		       48		      pha
  21378  422e		       a9 35		      lda	#<(.__Pause_Setup-1)
  21379  4230		       48		      pha
  21380  4231		       a5 ee		      lda	temp7
  21381  4233		       48		      pha
  21382  4234		       8a		      txa
  21383  4235		       48		      pha
  21384  4236		       a2 01		      ldx	#1
  21385  4238		       4c eb ff 	      jmp	BS_jsr
  21386  423b				   .skip359then
  21387  423b				   .skipL01020
  21388  423b				   .
  21389  423b							; 
  21390  423b
  21391  423b				   .L01021		;  if !_Bit0_Pause_Position{0} then if _Bit1_Pause_Check{1} then goto __Pause_Setup bank1
  21392  423b
  21393  423b		       a5 c7		      LDA	_Bit0_Pause_Position
  21394  423d		       4a		      LSR
  21395  423e		       b0 18		      BCS	.skipL01021
  21396  4240				   .condpart361
  21397  4240		       a5 c7		      LDA	_Bit1_Pause_Check
  21398  4242		       29 02		      AND	#2
  21399  4244		       f0 12		      BEQ	.skip361then
  21400  4246				   .condpart362
  21401  4246		       85 ee		      sta	temp7
  21402  4248		       a9 17		      lda	#>(.__Pause_Setup-1)
  21403  424a		       48		      pha
  21404  424b		       a9 35		      lda	#<(.__Pause_Setup-1)
  21405  424d		       48		      pha
  21406  424e		       a5 ee		      lda	temp7
  21407  4250		       48		      pha
  21408  4251		       8a		      txa
  21409  4252		       48		      pha
  21410  4253		       a2 01		      ldx	#1
  21411  4255		       4c eb ff 	      jmp	BS_jsr
  21412  4258				   .skip361then
  21413  4258				   .skipL01021
  21414  4258				   .
  21415  4258							; 
  21416  4258
  21417  4258				   .
  21418  4258							; 
  21419  4258
  21420  4258				   .
  21421  4258							; 
  21422  4258
  21423  4258				   .
  21424  4258							; 
  21425  4258
  21426  4258				   .L01022		;  if joy1fire  &&  !_Bit1_FireB_Restrainer{1} then goto __Pause_Setup bank1
  21427  4258
  21428  4258		       24 0d		      bit	INPT5
  21429  425a		       30 18		      BMI	.skipL01022
  21430  425c				   .condpart363
  21431  425c		       a5 c4		      LDA	_Bit1_FireB_Restrainer
  21432  425e		       29 02		      AND	#2
  21433  4260		       d0 12		      BNE	.skip363then
  21434  4262				   .condpart364
  21435  4262		       85 ee		      sta	temp7
  21436  4264		       a9 17		      lda	#>(.__Pause_Setup-1)
  21437  4266		       48		      pha
  21438  4267		       a9 35		      lda	#<(.__Pause_Setup-1)
  21439  4269		       48		      pha
  21440  426a		       a5 ee		      lda	temp7
  21441  426c		       48		      pha
  21442  426d		       8a		      txa
  21443  426e		       48		      pha
  21444  426f		       a2 01		      ldx	#1
  21445  4271		       4c eb ff 	      jmp	BS_jsr
  21446  4274				   .skip363then
  21447  4274				   .skipL01022
  21448  4274				   .
  21449  4274							; 
  21450  4274
  21451  4274				   .__AP_Skip_Pause
  21452  4274							; __AP_Skip_Pause
  21453  4274
  21454  4274				   .
  21455  4274							; 
  21456  4274
  21457  4274				   .
  21458  4274							; 
  21459  4274
  21460  4274				   .
  21461  4274							; 
  21462  4274
  21463  4274				   .
  21464  4274							; 
  21465  4274
  21466  4274				   .
  21467  4274							; 
  21468  4274
  21469  4274				   .
  21470  4274							; 
  21471  4274
  21472  4274				   .
  21473  4274							; 
  21474  4274
  21475  4274				   .L01023		;  if _Bit1_Auto_Play{1} then goto __Main_Loop bank2
  21476  4274
  21477  4274		       a5 d2		      LDA	_Bit1_Auto_Play
  21478  4276		       29 02		      AND	#2
  21479  4278		       f0 12		      BEQ	.skipL01023
  21480  427a				   .condpart365
  21481  427a		       85 ee		      sta	temp7
  21482  427c		       a9 30		      lda	#>(.__Main_Loop-1)
  21483  427e		       48		      pha
  21484  427f		       a9 ff		      lda	#<(.__Main_Loop-1)
  21485  4281		       48		      pha
  21486  4282		       a5 ee		      lda	temp7
  21487  4284		       48		      pha
  21488  4285		       8a		      txa
  21489  4286		       48		      pha
  21490  4287		       a2 02		      ldx	#2
  21491  4289		       4c eb ff 	      jmp	BS_jsr
  21492  428c				   .skipL01023
  21493  428c				   .
  21494  428c							; 
  21495  428c
  21496  428c				   .
  21497  428c							; 
  21498  428c
  21499  428c				   .
  21500  428c							; 
  21501  428c
  21502  428c				   .
  21503  428c							; 
  21504  428c
  21505  428c				   .
  21506  428c							; 
  21507  428c
  21508  428c				   .
  21509  428c							; 
  21510  428c
  21511  428c				   .
  21512  428c							; 
  21513  428c
  21514  428c				   .
  21515  428c							; 
  21516  428c
  21517  428c				   .
  21518  428c							; 
  21519  428c
  21520  428c				   .
  21521  428c							; 
  21522  428c
  21523  428c				   .
  21524  428c							; 
  21525  428c
  21526  428c				   .
  21527  428c							; 
  21528  428c
  21529  428c				   .L01024		;  if !_Ch0_Sound then goto __ML_Skip_Ch_0
  21530  428c
  21531  428c		       a5 da		      LDA	_Ch0_Sound
  21532  428e		       d0 03		      BNE	.skipL01024
  21533  4290				   .condpart366
  21534  4290		       4c 06 74 	      jmp	.__ML_Skip_Ch_0
  21535  4293
  21536  4293				   .skipL01024
  21537  4293				   .
  21538  4293							; 
  21539  4293
  21540  4293				   .
  21541  4293							; 
  21542  4293
  21543  4293				   .
  21544  4293							; 
  21545  4293
  21546  4293				   .
  21547  4293							; 
  21548  4293
  21549  4293				   .L01025		;  _Ch0_Duration  =  _Ch0_Duration  -	1
  21550  4293
  21551  4293		       c6 db		      DEC	_Ch0_Duration
  21552  4295				   .
  21553  4295							; 
  21554  4295
  21555  4295				   .
  21556  4295							; 
  21557  4295
  21558  4295				   .
  21559  4295							; 
  21560  4295
  21561  4295				   .
  21562  4295							; 
  21563  4295
  21564  4295				   .
  21565  4295							; 
  21566  4295
  21567  4295				   .L01026		;  if _Ch0_Duration  >  0 then goto __ML_Skip_Ch_0
  21568  4295
  21569  4295		       a9 00		      LDA	#0
  21570  4297		       c5 db		      CMP	_Ch0_Duration
  21571  4299		       b0 03		      BCS	.skipL01026
  21572  429b				   .condpart367
  21573  429b		       4c 06 74 	      jmp	.__ML_Skip_Ch_0
  21574  429e
  21575  429e				   .skipL01026
  21576  429e				   .
  21577  429e							; 
  21578  429e
  21579  429e				   .
  21580  429e							; 
  21581  429e
  21582  429e				   .
  21583  429e							; 
  21584  429e
  21585  429e				   .
  21586  429e							; 
  21587  429e
  21588  429e				   .
  21589  429e							; 
  21590  429e
  21591  429e				   .
  21592  429e							; 
  21593  429e
  21594  429e				   .
  21595  429e							; 
  21596  429e
  21597  429e				   .
  21598  429e							; 
  21599  429e
  21600  429e				   .
  21601  429e							; 
  21602  429e
  21603  429e				   .
  21604  429e							; 
  21605  429e
  21606  429e				   .L01027		;  if _Ch0_Sound  <>  _c_Torp_Hit_Seaweed_01 then goto __Skip_Sound_Torpedo_Hit
  21607  429e
  21608  429e		       a5 da		      LDA	_Ch0_Sound
  21609  42a0		       c9 01		      CMP	#_c_Torp_Hit_Seaweed_01
  21610  42a2		       f0 03		      BEQ	.skipL01027
  21611  42a4				   .condpart368
  21612  42a4		       4c e3 72 	      jmp	.__Skip_Sound_Torpedo_Hit
  21613  42a7
  21614  42a7				   .skipL01027
  21615  42a7				   .
  21616  42a7							; 
  21617  42a7
  21618  42a7				   .
  21619  42a7							; 
  21620  42a7
  21621  42a7				   .
  21622  42a7							; 
  21623  42a7
  21624  42a7				   .
  21625  42a7							; 
  21626  42a7
  21627  42a7				   .L01028		;  temp4  =  _SD_M_Hit[_Ch0_Counter]
  21628  42a7
  21629  42a7		       a6 dc		      LDX	_Ch0_Counter
  21630  42a9		       bd 45 77 	      LDA	_SD_M_Hit,x
  21631  42ac		       85 9f		      STA	temp4
  21632  42ae				   .
  21633  42ae							; 
  21634  42ae
  21635  42ae				   .
  21636  42ae							; 
  21637  42ae
  21638  42ae				   .
  21639  42ae							; 
  21640  42ae
  21641  42ae				   .
  21642  42ae							; 
  21643  42ae
  21644  42ae				   .L01029		;  if temp4  =  255 then goto __ML_Clear_Ch_0
  21645  42ae
  21646  42ae		       a5 9f		      LDA	temp4
  21647  42b0		       c9 ff		      CMP	#255
  21648  42b2		       d0 03		      BNE	.skipL01029
  21649  42b4				   .condpart369
  21650  42b4		       4c fa 73 	      jmp	.__ML_Clear_Ch_0
  21651  42b7
  21652  42b7				   .skipL01029
  21653  42b7				   .
  21654  42b7							; 
  21655  42b7
  21656  42b7				   .
  21657  42b7							; 
  21658  42b7
  21659  42b7				   .
  21660  42b7							; 
  21661  42b7
  21662  42b7				   .
  21663  42b7							; 
  21664  42b7
  21665  42b7				   .L01030		;  _Ch0_Counter  =  _Ch0_Counter  +  1
  21666  42b7
  21667  42b7		       e6 dc		      INC	_Ch0_Counter
  21668  42b9				   .L01031		;  temp5  =  _SD_M_Hit[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
  21669  42b9
  21670  42b9		       a6 dc		      LDX	_Ch0_Counter
  21671  42bb		       bd 45 77 	      LDA	_SD_M_Hit,x
  21672  42be		       85 a0		      STA	temp5
  21673  42c0		       e6 dc		      INC	_Ch0_Counter
  21674  42c2				   .L01032		;  temp6  =  _SD_M_Hit[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
  21675  42c2
  21676  42c2		       a6 dc		      LDX	_Ch0_Counter
  21677  42c4		       bd 45 77 	      LDA	_SD_M_Hit,x
  21678  42c7		       85 a1		      STA	temp6
  21679  42c9		       e6 dc		      INC	_Ch0_Counter
  21680  42cb				   .
  21681  42cb							; 
  21682  42cb
  21683  42cb				   .
  21684  42cb							; 
  21685  42cb
  21686  42cb				   .
  21687  42cb							; 
  21688  42cb
  21689  42cb				   .
  21690  42cb							; 
  21691  42cb
  21692  42cb				   .L01033		;  AUDV0  =  temp4
  21693  42cb
  21694  42cb		       a5 9f		      LDA	temp4
  21695  42cd		       85 19		      STA	AUDV0
  21696  42cf				   .L01034		;  AUDC0  =  temp5
  21697  42cf
  21698  42cf		       a5 a0		      LDA	temp5
  21699  42d1		       85 15		      STA	AUDC0
  21700  42d3				   .L01035		;  AUDF0  =  temp6
  21701  42d3
  21702  42d3		       a5 a1		      LDA	temp6
  21703  42d5		       85 17		      STA	AUDF0
  21704  42d7				   .
  21705  42d7							; 
  21706  42d7
  21707  42d7				   .
  21708  42d7							; 
  21709  42d7
  21710  42d7				   .
  21711  42d7							; 
  21712  42d7
  21713  42d7				   .
  21714  42d7							; 
  21715  42d7
  21716  42d7				   .L01036		;  _Ch0_Duration  =  _SD_M_Hit[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
  21717  42d7
  21718  42d7		       a6 dc		      LDX	_Ch0_Counter
  21719  42d9		       bd 45 77 	      LDA	_SD_M_Hit,x
  21720  42dc		       85 db		      STA	_Ch0_Duration
  21721  42de		       e6 dc		      INC	_Ch0_Counter
  21722  42e0				   .
  21723  42e0							; 
  21724  42e0
  21725  42e0				   .
  21726  42e0							; 
  21727  42e0
  21728  42e0				   .
  21729  42e0							; 
  21730  42e0
  21731  42e0				   .
  21732  42e0							; 
  21733  42e0
  21734  42e0				   .L01037		;  goto __ML_Skip_Ch_0
  21735  42e0
  21736  42e0		       4c 06 74 	      jmp	.__ML_Skip_Ch_0
  21737  42e3
  21738  42e3				   .
  21739  42e3							; 
  21740  42e3
  21741  42e3				   .__Skip_Sound_Torpedo_Hit
  21742  42e3							; __Skip_Sound_Torpedo_Hit
  21743  42e3
  21744  42e3				   .
  21745  42e3							; 
  21746  42e3
  21747  42e3				   .
  21748  42e3							; 
  21749  42e3
  21750  42e3				   .
  21751  42e3							; 
  21752  42e3
  21753  42e3				   .
  21754  42e3							; 
  21755  42e3
  21756  42e3				   .
  21757  42e3							; 
  21758  42e3
  21759  42e3				   .
  21760  42e3							; 
  21761  42e3
  21762  42e3				   .
  21763  42e3							; 
  21764  42e3
  21765  42e3				   .
  21766  42e3							; 
  21767  42e3
  21768  42e3				   .
  21769  42e3							; 
  21770  42e3
  21771  42e3				   .
  21772  42e3							; 
  21773  42e3
  21774  42e3				   .L01038		;  if _Ch0_Sound  <>  _c_Ship_Bounce then goto __Skip_Sound_Ship_Ouch
  21775  42e3
  21776  42e3		       a5 da		      LDA	_Ch0_Sound
  21777  42e5		       c9 03		      CMP	#_c_Ship_Bounce
  21778  42e7		       f0 03		      BEQ	.skipL01038
  21779  42e9				   .condpart370
  21780  42e9		       4c 28 73 	      jmp	.__Skip_Sound_Ship_Ouch
  21781  42ec
  21782  42ec				   .skipL01038
  21783  42ec				   .
  21784  42ec							; 
  21785  42ec
  21786  42ec				   .
  21787  42ec							; 
  21788  42ec
  21789  42ec				   .
  21790  42ec							; 
  21791  42ec
  21792  42ec				   .
  21793  42ec							; 
  21794  42ec
  21795  42ec				   .L01039		;  temp4  =  _SD_Ouch[_Ch0_Counter]
  21796  42ec
  21797  42ec		       a6 dc		      LDX	_Ch0_Counter
  21798  42ee		       bd a9 77 	      LDA	_SD_Ouch,x
  21799  42f1		       85 9f		      STA	temp4
  21800  42f3				   .
  21801  42f3							; 
  21802  42f3
  21803  42f3				   .
  21804  42f3							; 
  21805  42f3
  21806  42f3				   .
  21807  42f3							; 
  21808  42f3
  21809  42f3				   .
  21810  42f3							; 
  21811  42f3
  21812  42f3				   .L01040		;  if temp4  =  255 then goto __ML_Clear_Ch_0
  21813  42f3
  21814  42f3		       a5 9f		      LDA	temp4
  21815  42f5		       c9 ff		      CMP	#255
  21816  42f7		       d0 03		      BNE	.skipL01040
  21817  42f9				   .condpart371
  21818  42f9		       4c fa 73 	      jmp	.__ML_Clear_Ch_0
  21819  42fc
  21820  42fc				   .skipL01040
  21821  42fc				   .
  21822  42fc							; 
  21823  42fc
  21824  42fc				   .
  21825  42fc							; 
  21826  42fc
  21827  42fc				   .
  21828  42fc							; 
  21829  42fc
  21830  42fc				   .
  21831  42fc							; 
  21832  42fc
  21833  42fc				   .L01041		;  _Ch0_Counter  =  _Ch0_Counter  +  1
  21834  42fc
  21835  42fc		       e6 dc		      INC	_Ch0_Counter
  21836  42fe				   .L01042		;  temp5  =  _SD_Ouch[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
  21837  42fe
  21838  42fe		       a6 dc		      LDX	_Ch0_Counter
  21839  4300		       bd a9 77 	      LDA	_SD_Ouch,x
  21840  4303		       85 a0		      STA	temp5
  21841  4305		       e6 dc		      INC	_Ch0_Counter
  21842  4307				   .L01043		;  temp6  =  _SD_Ouch[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
  21843  4307
  21844  4307		       a6 dc		      LDX	_Ch0_Counter
  21845  4309		       bd a9 77 	      LDA	_SD_Ouch,x
  21846  430c		       85 a1		      STA	temp6
  21847  430e		       e6 dc		      INC	_Ch0_Counter
  21848  4310				   .
  21849  4310							; 
  21850  4310
  21851  4310				   .
  21852  4310							; 
  21853  4310
  21854  4310				   .
  21855  4310							; 
  21856  4310
  21857  4310				   .
  21858  4310							; 
  21859  4310
  21860  4310				   .L01044		;  AUDV0  =  temp4
  21861  4310
  21862  4310		       a5 9f		      LDA	temp4
  21863  4312		       85 19		      STA	AUDV0
  21864  4314				   .L01045		;  AUDC0  =  temp5
  21865  4314
  21866  4314		       a5 a0		      LDA	temp5
  21867  4316		       85 15		      STA	AUDC0
  21868  4318				   .L01046		;  AUDF0  =  temp6
  21869  4318
  21870  4318		       a5 a1		      LDA	temp6
  21871  431a		       85 17		      STA	AUDF0
  21872  431c				   .
  21873  431c							; 
  21874  431c
  21875  431c				   .
  21876  431c							; 
  21877  431c
  21878  431c				   .
  21879  431c							; 
  21880  431c
  21881  431c				   .
  21882  431c							; 
  21883  431c
  21884  431c				   .L01047		;  _Ch0_Duration =  _SD_Ouch[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
  21885  431c
  21886  431c		       a6 dc		      LDX	_Ch0_Counter
  21887  431e		       bd a9 77 	      LDA	_SD_Ouch,x
  21888  4321		       85 db		      STA	_Ch0_Duration
  21889  4323		       e6 dc		      INC	_Ch0_Counter
  21890  4325				   .
  21891  4325							; 
  21892  4325
  21893  4325				   .
  21894  4325							; 
  21895  4325
  21896  4325				   .
  21897  4325							; 
  21898  4325
  21899  4325				   .
  21900  4325							; 
  21901  4325
  21902  4325				   .L01048		;  goto __ML_Skip_Ch_0
  21903  4325
  21904  4325		       4c 06 74 	      jmp	.__ML_Skip_Ch_0
  21905  4328
  21906  4328				   .
  21907  4328							; 
  21908  4328
  21909  4328				   .__Skip_Sound_Ship_Ouch
  21910  4328							; __Skip_Sound_Ship_Ouch
  21911  4328
  21912  4328				   .
  21913  4328							; 
  21914  4328
  21915  4328				   .
  21916  4328							; 
  21917  4328
  21918  4328				   .
  21919  4328							; 
  21920  4328
  21921  4328				   .
  21922  4328							; 
  21923  4328
  21924  4328				   .
  21925  4328							; 
  21926  4328
  21927  4328				   .
  21928  4328							; 
  21929  4328
  21930  4328				   .
  21931  4328							; 
  21932  4328
  21933  4328				   .
  21934  4328							; 
  21935  4328
  21936  4328				   .
  21937  4328							; 
  21938  4328
  21939  4328				   .
  21940  4328							; 
  21941  4328
  21942  4328				   .L01049		;  if _Ch0_Sound  <>  _c_Shoot then goto __Skip_Sound_Effect_Torpedo_Shoot
  21943  4328
  21944  4328		       a5 da		      LDA	_Ch0_Sound
  21945  432a		       c9 04		      CMP	#_c_Shoot
  21946  432c		       f0 03		      BEQ	.skipL01049
  21947  432e				   .condpart372
  21948  432e		       4c 6d 73 	      jmp	.__Skip_Sound_Effect_Torpedo_Shoot
  21949  4331
  21950  4331				   .skipL01049
  21951  4331				   .
  21952  4331							; 
  21953  4331
  21954  4331				   .
  21955  4331							; 
  21956  4331
  21957  4331				   .
  21958  4331							; 
  21959  4331
  21960  4331				   .
  21961  4331							; 
  21962  4331
  21963  4331				   .L01050		;  temp4  =  _SD_Shoot[_Ch0_Counter]
  21964  4331
  21965  4331		       a6 dc		      LDX	_Ch0_Counter
  21966  4333		       bd dd 77 	      LDA	_SD_Shoot,x
  21967  4336		       85 9f		      STA	temp4
  21968  4338				   .
  21969  4338							; 
  21970  4338
  21971  4338				   .
  21972  4338							; 
  21973  4338
  21974  4338				   .
  21975  4338							; 
  21976  4338
  21977  4338				   .
  21978  4338							; 
  21979  4338
  21980  4338				   .L01051		;  if temp4  =  255 then goto __ML_Clear_Ch_0
  21981  4338
  21982  4338		       a5 9f		      LDA	temp4
  21983  433a		       c9 ff		      CMP	#255
  21984  433c		       d0 03		      BNE	.skipL01051
  21985  433e				   .condpart373
  21986  433e		       4c fa 73 	      jmp	.__ML_Clear_Ch_0
  21987  4341
  21988  4341				   .skipL01051
  21989  4341				   .
  21990  4341							; 
  21991  4341
  21992  4341				   .
  21993  4341							; 
  21994  4341
  21995  4341				   .
  21996  4341							; 
  21997  4341
  21998  4341				   .
  21999  4341							; 
  22000  4341
  22001  4341				   .L01052		;  _Ch0_Counter  =  _Ch0_Counter  +  1
  22002  4341
  22003  4341		       e6 dc		      INC	_Ch0_Counter
  22004  4343				   .L01053		;  temp5  =  _SD_Shoot[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
  22005  4343
  22006  4343		       a6 dc		      LDX	_Ch0_Counter
  22007  4345		       bd dd 77 	      LDA	_SD_Shoot,x
  22008  4348		       85 a0		      STA	temp5
  22009  434a		       e6 dc		      INC	_Ch0_Counter
  22010  434c				   .L01054		;  temp6  =  _SD_Shoot[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
  22011  434c
  22012  434c		       a6 dc		      LDX	_Ch0_Counter
  22013  434e		       bd dd 77 	      LDA	_SD_Shoot,x
  22014  4351		       85 a1		      STA	temp6
  22015  4353		       e6 dc		      INC	_Ch0_Counter
  22016  4355				   .
  22017  4355							; 
  22018  4355
  22019  4355				   .
  22020  4355							; 
  22021  4355
  22022  4355				   .
  22023  4355							; 
  22024  4355
  22025  4355				   .
  22026  4355							; 
  22027  4355
  22028  4355				   .L01055		;  AUDV0  =  temp4
  22029  4355
  22030  4355		       a5 9f		      LDA	temp4
  22031  4357		       85 19		      STA	AUDV0
  22032  4359				   .L01056		;  AUDC0  =  temp5
  22033  4359
  22034  4359		       a5 a0		      LDA	temp5
  22035  435b		       85 15		      STA	AUDC0
  22036  435d				   .L01057		;  AUDF0  =  temp6
  22037  435d
  22038  435d		       a5 a1		      LDA	temp6
  22039  435f		       85 17		      STA	AUDF0
  22040  4361				   .
  22041  4361							; 
  22042  4361
  22043  4361				   .
  22044  4361							; 
  22045  4361
  22046  4361				   .
  22047  4361							; 
  22048  4361
  22049  4361				   .
  22050  4361							; 
  22051  4361
  22052  4361				   .L01058		;  _Ch0_Duration  =  _SD_Shoot[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
  22053  4361
  22054  4361		       a6 dc		      LDX	_Ch0_Counter
  22055  4363		       bd dd 77 	      LDA	_SD_Shoot,x
  22056  4366		       85 db		      STA	_Ch0_Duration
  22057  4368		       e6 dc		      INC	_Ch0_Counter
  22058  436a				   .
  22059  436a							; 
  22060  436a
  22061  436a				   .
  22062  436a							; 
  22063  436a
  22064  436a				   .
  22065  436a							; 
  22066  436a
  22067  436a				   .
  22068  436a							; 
  22069  436a
  22070  436a				   .L01059		;  goto __ML_Skip_Ch_0
  22071  436a
  22072  436a		       4c 06 74 	      jmp	.__ML_Skip_Ch_0
  22073  436d
  22074  436d				   .
  22075  436d							; 
  22076  436d
  22077  436d				   .__Skip_Sound_Effect_Torpedo_Shoot
  22078  436d							; __Skip_Sound_Effect_Torpedo_Shoot
  22079  436d
  22080  436d				   .
  22081  436d							; 
  22082  436d
  22083  436d				   .
  22084  436d							; 
  22085  436d
  22086  436d				   .
  22087  436d							; 
  22088  436d
  22089  436d				   .
  22090  436d							; 
  22091  436d
  22092  436d				   .
  22093  436d							; 
  22094  436d
  22095  436d				   .
  22096  436d							; 
  22097  436d
  22098  436d				   .
  22099  436d							; 
  22100  436d
  22101  436d				   .
  22102  436d							; 
  22103  436d
  22104  436d				   .
  22105  436d							; 
  22106  436d
  22107  436d				   .
  22108  436d							; 
  22109  436d
  22110  436d				   .L01060		;  if _Ch0_Sound  <>  _c_Torp_Hit_Seaweed_02 then goto __Skip_Sound_Effect_Torpedo_Hit_02
  22111  436d
  22112  436d		       a5 da		      LDA	_Ch0_Sound
  22113  436f		       c9 02		      CMP	#_c_Torp_Hit_Seaweed_02
  22114  4371		       f0 03		      BEQ	.skipL01060
  22115  4373				   .condpart374
  22116  4373		       4c b2 73 	      jmp	.__Skip_Sound_Effect_Torpedo_Hit_02
  22117  4376
  22118  4376				   .skipL01060
  22119  4376				   .
  22120  4376							; 
  22121  4376
  22122  4376				   .
  22123  4376							; 
  22124  4376
  22125  4376				   .
  22126  4376							; 
  22127  4376
  22128  4376				   .
  22129  4376							; 
  22130  4376
  22131  4376				   .L01061		;  temp4  =  _SD_M_H_02[_Ch0_Counter]
  22132  4376
  22133  4376		       a6 dc		      LDX	_Ch0_Counter
  22134  4378		       bd 75 77 	      LDA	_SD_M_H_02,x
  22135  437b		       85 9f		      STA	temp4
  22136  437d				   .
  22137  437d							; 
  22138  437d
  22139  437d				   .
  22140  437d							; 
  22141  437d
  22142  437d				   .
  22143  437d							; 
  22144  437d
  22145  437d				   .
  22146  437d							; 
  22147  437d
  22148  437d				   .L01062		;  if temp4  =  255 then goto __ML_Clear_Ch_0
  22149  437d
  22150  437d		       a5 9f		      LDA	temp4
  22151  437f		       c9 ff		      CMP	#255
  22152  4381		       d0 03		      BNE	.skipL01062
  22153  4383				   .condpart375
  22154  4383		       4c fa 73 	      jmp	.__ML_Clear_Ch_0
  22155  4386
  22156  4386				   .skipL01062
  22157  4386				   .
  22158  4386							; 
  22159  4386
  22160  4386				   .
  22161  4386							; 
  22162  4386
  22163  4386				   .
  22164  4386							; 
  22165  4386
  22166  4386				   .
  22167  4386							; 
  22168  4386
  22169  4386				   .L01063		;  _Ch0_Counter  =  _Ch0_Counter  +  1
  22170  4386
  22171  4386		       e6 dc		      INC	_Ch0_Counter
  22172  4388				   .L01064		;  temp5  =  _SD_M_H_02[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
  22173  4388
  22174  4388		       a6 dc		      LDX	_Ch0_Counter
  22175  438a		       bd 75 77 	      LDA	_SD_M_H_02,x
  22176  438d		       85 a0		      STA	temp5
  22177  438f		       e6 dc		      INC	_Ch0_Counter
  22178  4391				   .L01065		;  temp6  =  _SD_M_H_02[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
  22179  4391
  22180  4391		       a6 dc		      LDX	_Ch0_Counter
  22181  4393		       bd 75 77 	      LDA	_SD_M_H_02,x
  22182  4396		       85 a1		      STA	temp6
  22183  4398		       e6 dc		      INC	_Ch0_Counter
  22184  439a				   .
  22185  439a							; 
  22186  439a
  22187  439a				   .
  22188  439a							; 
  22189  439a
  22190  439a				   .
  22191  439a							; 
  22192  439a
  22193  439a				   .
  22194  439a							; 
  22195  439a
  22196  439a				   .L01066		;  AUDV0  =  temp4
  22197  439a
  22198  439a		       a5 9f		      LDA	temp4
  22199  439c		       85 19		      STA	AUDV0
  22200  439e				   .L01067		;  AUDC0  =  temp5
  22201  439e
  22202  439e		       a5 a0		      LDA	temp5
  22203  43a0		       85 15		      STA	AUDC0
  22204  43a2				   .L01068		;  AUDF0  =  temp6
  22205  43a2
  22206  43a2		       a5 a1		      LDA	temp6
  22207  43a4		       85 17		      STA	AUDF0
  22208  43a6				   .
  22209  43a6							; 
  22210  43a6
  22211  43a6				   .
  22212  43a6							; 
  22213  43a6
  22214  43a6				   .
  22215  43a6							; 
  22216  43a6
  22217  43a6				   .
  22218  43a6							; 
  22219  43a6
  22220  43a6				   .L01069		;  _Ch0_Duration  =  _SD_M_H_02[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
  22221  43a6
  22222  43a6		       a6 dc		      LDX	_Ch0_Counter
  22223  43a8		       bd 75 77 	      LDA	_SD_M_H_02,x
  22224  43ab		       85 db		      STA	_Ch0_Duration
  22225  43ad		       e6 dc		      INC	_Ch0_Counter
  22226  43af				   .
  22227  43af							; 
  22228  43af
  22229  43af				   .
  22230  43af							; 
  22231  43af
  22232  43af				   .
  22233  43af							; 
  22234  43af
  22235  43af				   .
  22236  43af							; 
  22237  43af
  22238  43af				   .L01070		;  goto __ML_Skip_Ch_0
  22239  43af
  22240  43af		       4c 06 74 	      jmp	.__ML_Skip_Ch_0
  22241  43b2
  22242  43b2				   .
  22243  43b2							; 
  22244  43b2
  22245  43b2				   .__Skip_Sound_Effect_Torpedo_Hit_02
  22246  43b2							; __Skip_Sound_Effect_Torpedo_Hit_02
  22247  43b2
  22248  43b2				   .
  22249  43b2							; 
  22250  43b2
  22251  43b2				   .
  22252  43b2							; 
  22253  43b2
  22254  43b2				   .
  22255  43b2							; 
  22256  43b2
  22257  43b2				   .
  22258  43b2							; 
  22259  43b2
  22260  43b2				   .
  22261  43b2							; 
  22262  43b2
  22263  43b2				   .
  22264  43b2							; 
  22265  43b2
  22266  43b2				   .
  22267  43b2							; 
  22268  43b2
  22269  43b2				   .
  22270  43b2							; 
  22271  43b2
  22272  43b2				   .
  22273  43b2							; 
  22274  43b2
  22275  43b2				   .
  22276  43b2							; 
  22277  43b2
  22278  43b2				   .L01071		;  if _Ch0_Sound  <>  _c_1000_Health then goto __Skip_Sound_Effect_1000_Health
  22279  43b2
  22280  43b2		       a5 da		      LDA	_Ch0_Sound
  22281  43b4		       c9 05		      CMP	#_c_1000_Health
  22282  43b6		       f0 03		      BEQ	.skipL01071
  22283  43b8				   .condpart376
  22284  43b8		       4c f7 73 	      jmp	.__Skip_Sound_Effect_1000_Health
  22285  43bb
  22286  43bb				   .skipL01071
  22287  43bb				   .
  22288  43bb							; 
  22289  43bb
  22290  43bb				   .
  22291  43bb							; 
  22292  43bb
  22293  43bb				   .
  22294  43bb							; 
  22295  43bb
  22296  43bb				   .
  22297  43bb							; 
  22298  43bb
  22299  43bb				   .L01072		;  temp4  =  _SD_1000_Health[_Ch0_Counter]
  22300  43bb
  22301  43bb		       a6 dc		      LDX	_Ch0_Counter
  22302  43bd		       bd 59 79 	      LDA	_SD_1000_Health,x
  22303  43c0		       85 9f		      STA	temp4
  22304  43c2				   .
  22305  43c2							; 
  22306  43c2
  22307  43c2				   .
  22308  43c2							; 
  22309  43c2
  22310  43c2				   .
  22311  43c2							; 
  22312  43c2
  22313  43c2				   .
  22314  43c2							; 
  22315  43c2
  22316  43c2				   .L01073		;  if temp4  =  255 then goto __ML_Clear_Ch_0
  22317  43c2
  22318  43c2		       a5 9f		      LDA	temp4
  22319  43c4		       c9 ff		      CMP	#255
  22320  43c6		       d0 03		      BNE	.skipL01073
  22321  43c8				   .condpart377
  22322  43c8		       4c fa 73 	      jmp	.__ML_Clear_Ch_0
  22323  43cb
  22324  43cb				   .skipL01073
  22325  43cb				   .
  22326  43cb							; 
  22327  43cb
  22328  43cb				   .
  22329  43cb							; 
  22330  43cb
  22331  43cb				   .
  22332  43cb							; 
  22333  43cb
  22334  43cb				   .
  22335  43cb							; 
  22336  43cb
  22337  43cb				   .L01074		;  _Ch0_Counter  =  _Ch0_Counter  +  1
  22338  43cb
  22339  43cb		       e6 dc		      INC	_Ch0_Counter
  22340  43cd				   .L01075		;  temp5  =  _SD_1000_Health[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
  22341  43cd
  22342  43cd		       a6 dc		      LDX	_Ch0_Counter
  22343  43cf		       bd 59 79 	      LDA	_SD_1000_Health,x
  22344  43d2		       85 a0		      STA	temp5
  22345  43d4		       e6 dc		      INC	_Ch0_Counter
  22346  43d6				   .L01076		;  temp6  =  _SD_1000_Health[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
  22347  43d6
  22348  43d6		       a6 dc		      LDX	_Ch0_Counter
  22349  43d8		       bd 59 79 	      LDA	_SD_1000_Health,x
  22350  43db		       85 a1		      STA	temp6
  22351  43dd		       e6 dc		      INC	_Ch0_Counter
  22352  43df				   .
  22353  43df							; 
  22354  43df
  22355  43df				   .
  22356  43df							; 
  22357  43df
  22358  43df				   .
  22359  43df							; 
  22360  43df
  22361  43df				   .
  22362  43df							; 
  22363  43df
  22364  43df				   .L01077		;  AUDV0  =  temp4
  22365  43df
  22366  43df		       a5 9f		      LDA	temp4
  22367  43e1		       85 19		      STA	AUDV0
  22368  43e3				   .L01078		;  AUDC0  =  temp5
  22369  43e3
  22370  43e3		       a5 a0		      LDA	temp5
  22371  43e5		       85 15		      STA	AUDC0
  22372  43e7				   .L01079		;  AUDF0  =  temp6
  22373  43e7
  22374  43e7		       a5 a1		      LDA	temp6
  22375  43e9		       85 17		      STA	AUDF0
  22376  43eb				   .
  22377  43eb							; 
  22378  43eb
  22379  43eb				   .
  22380  43eb							; 
  22381  43eb
  22382  43eb				   .
  22383  43eb							; 
  22384  43eb
  22385  43eb				   .
  22386  43eb							; 
  22387  43eb
  22388  43eb				   .L01080		;  _Ch0_Duration  =  _SD_1000_Health[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
  22389  43eb
  22390  43eb		       a6 dc		      LDX	_Ch0_Counter
  22391  43ed		       bd 59 79 	      LDA	_SD_1000_Health,x
  22392  43f0		       85 db		      STA	_Ch0_Duration
  22393  43f2		       e6 dc		      INC	_Ch0_Counter
  22394  43f4				   .
  22395  43f4							; 
  22396  43f4
  22397  43f4				   .
  22398  43f4							; 
  22399  43f4
  22400  43f4				   .
  22401  43f4							; 
  22402  43f4
  22403  43f4				   .
  22404  43f4							; 
  22405  43f4
  22406  43f4				   .L01081		;  goto __ML_Skip_Ch_0
  22407  43f4
  22408  43f4		       4c 06 74 	      jmp	.__ML_Skip_Ch_0
  22409  43f7
  22410  43f7				   .
  22411  43f7							; 
  22412  43f7
  22413  43f7				   .__Skip_Sound_Effect_1000_Health
  22414  43f7							; __Skip_Sound_Effect_1000_Health
  22415  43f7
  22416  43f7				   .
  22417  43f7							; 
  22418  43f7
  22419  43f7				   .
  22420  43f7							; 
  22421  43f7
  22422  43f7				   .
  22423  43f7							; 
  22424  43f7
  22425  43f7				   .
  22426  43f7							; 
  22427  43f7
  22428  43f7				   .
  22429  43f7							; 
  22430  43f7
  22431  43f7				   .
  22432  43f7							; 
  22433  43f7
  22434  43f7				   .
  22435  43f7							; 
  22436  43f7
  22437  43f7				   .L01082		;  goto __ML_Skip_Ch_0
  22438  43f7
  22439  43f7		       4c 06 74 	      jmp	.__ML_Skip_Ch_0
  22440  43fa
  22441  43fa				   .
  22442  43fa							; 
  22443  43fa
  22444  43fa				   .
  22445  43fa							; 
  22446  43fa
  22447  43fa				   .
  22448  43fa							; 
  22449  43fa
  22450  43fa				   .
  22451  43fa							; 
  22452  43fa
  22453  43fa				   .
  22454  43fa							; 
  22455  43fa
  22456  43fa				   .
  22457  43fa							; 
  22458  43fa
  22459  43fa				   .
  22460  43fa							; 
  22461  43fa
  22462  43fa				   .__ML_Clear_Ch_0
  22463  43fa							; __ML_Clear_Ch_0
  22464  43fa
  22465  43fa				   .
  22466  43fa							; 
  22467  43fa
  22468  43fa				   .L01083		;  _Ch0_Duration  =  1
  22469  43fa
  22470  43fa		       a9 01		      LDA	#1
  22471  43fc		       85 db		      STA	_Ch0_Duration
  22472  43fe				   .
  22473  43fe							; 
  22474  43fe
  22475  43fe				   .L01084		;  _Ch0_Sound	=  0  :  _Ch0_Counter  =  0  :	AUDV0  =  0
  22476  43fe
  22477  43fe		       a9 00		      LDA	#0
  22478  4400		       85 da		      STA	_Ch0_Sound
  22479  4402		       85 dc		      STA	_Ch0_Counter
  22480  4404		       85 19		      STA	AUDV0
  22481  4406				   .
  22482  4406							; 
  22483  4406
  22484  4406				   .
  22485  4406							; 
  22486  4406
  22487  4406				   .
  22488  4406							; 
  22489  4406
  22490  4406				   .
  22491  4406							; 
  22492  4406
  22493  4406				   .
  22494  4406							; 
  22495  4406
  22496  4406				   .
  22497  4406							; 
  22498  4406
  22499  4406				   .
  22500  4406							; 
  22501  4406
  22502  4406				   .__ML_Skip_Ch_0
  22503  4406							; __ML_Skip_Ch_0
  22504  4406
  22505  4406				   .
  22506  4406							; 
  22507  4406
  22508  4406				   .
  22509  4406							; 
  22510  4406
  22511  4406				   .
  22512  4406							; 
  22513  4406
  22514  4406				   .
  22515  4406							; 
  22516  4406
  22517  4406				   .
  22518  4406							; 
  22519  4406
  22520  4406				   .
  22521  4406							; 
  22522  4406
  22523  4406				   .
  22524  4406							; 
  22525  4406
  22526  4406				   .
  22527  4406							; 
  22528  4406
  22529  4406				   .
  22530  4406							; 
  22531  4406
  22532  4406				   .
  22533  4406							; 
  22534  4406
  22535  4406				   .
  22536  4406							; 
  22537  4406
  22538  4406				   .
  22539  4406							; 
  22540  4406
  22541  4406				   .L01085		;  if !_Ch1_Sound then goto __ML_Skip_Ch_1
  22542  4406
  22543  4406		       a5 dd		      LDA	_Ch1_Sound
  22544  4408		       d0 03		      BNE	.skipL01085
  22545  440a				   .condpart378
  22546  440a		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  22547  440d
  22548  440d				   .skipL01085
  22549  440d				   .
  22550  440d							; 
  22551  440d
  22552  440d				   .
  22553  440d							; 
  22554  440d
  22555  440d				   .
  22556  440d							; 
  22557  440d
  22558  440d				   .
  22559  440d							; 
  22560  440d
  22561  440d				   .L01086		;  _Ch1_Duration  =  _Ch1_Duration  -	1
  22562  440d
  22563  440d		       c6 de		      DEC	_Ch1_Duration
  22564  440f				   .
  22565  440f							; 
  22566  440f
  22567  440f				   .
  22568  440f							; 
  22569  440f
  22570  440f				   .
  22571  440f							; 
  22572  440f
  22573  440f				   .
  22574  440f							; 
  22575  440f
  22576  440f				   .
  22577  440f							; 
  22578  440f
  22579  440f				   .L01087		;  if _Ch1_Duration  >  0 then goto __ML_Skip_Ch_1
  22580  440f
  22581  440f		       a9 00		      LDA	#0
  22582  4411		       c5 de		      CMP	_Ch1_Duration
  22583  4413		       b0 03		      BCS	.skipL01087
  22584  4415				   .condpart379
  22585  4415		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  22586  4418
  22587  4418				   .skipL01087
  22588  4418				   .
  22589  4418							; 
  22590  4418
  22591  4418				   .
  22592  4418							; 
  22593  4418
  22594  4418				   .
  22595  4418							; 
  22596  4418
  22597  4418				   .
  22598  4418							; 
  22599  4418
  22600  4418				   .
  22601  4418							; 
  22602  4418
  22603  4418				   .
  22604  4418							; 
  22605  4418
  22606  4418				   .
  22607  4418							; 
  22608  4418
  22609  4418				   .
  22610  4418							; 
  22611  4418
  22612  4418				   .
  22613  4418							; 
  22614  4418
  22615  4418				   .
  22616  4418							; 
  22617  4418
  22618  4418				   .L01088		;  if _Ch1_Sound  <>  _c_Tentacle_Reaching_Up then goto __Skip_Sound_Effect_Tent_Reach
  22619  4418
  22620  4418		       a5 dd		      LDA	_Ch1_Sound
  22621  441a		       c9 02		      CMP	#_c_Tentacle_Reaching_Up
  22622  441c		       f0 03		      BEQ	.skipL01088
  22623  441e				   .condpart380
  22624  441e		       4c 5d 74 	      jmp	.__Skip_Sound_Effect_Tent_Reach
  22625  4421
  22626  4421				   .skipL01088
  22627  4421				   .
  22628  4421							; 
  22629  4421
  22630  4421				   .
  22631  4421							; 
  22632  4421
  22633  4421				   .
  22634  4421							; 
  22635  4421
  22636  4421				   .
  22637  4421							; 
  22638  4421
  22639  4421				   .L01089		;  temp4  =  _SD_Grab[_Ch1_Counter]
  22640  4421
  22641  4421		       a6 df		      LDX	_Ch1_Counter
  22642  4423		       bd 0d 78 	      LDA	_SD_Grab,x
  22643  4426		       85 9f		      STA	temp4
  22644  4428				   .
  22645  4428							; 
  22646  4428
  22647  4428				   .
  22648  4428							; 
  22649  4428
  22650  4428				   .
  22651  4428							; 
  22652  4428
  22653  4428				   .
  22654  4428							; 
  22655  4428
  22656  4428				   .L01090		;  if temp4  =  255 then goto __ML_Clear_Ch_1
  22657  4428
  22658  4428		       a5 9f		      LDA	temp4
  22659  442a		       c9 ff		      CMP	#255
  22660  442c		       d0 03		      BNE	.skipL01090
  22661  442e				   .condpart381
  22662  442e		       4c 88 76 	      jmp	.__ML_Clear_Ch_1
  22663  4431
  22664  4431				   .skipL01090
  22665  4431				   .
  22666  4431							; 
  22667  4431
  22668  4431				   .
  22669  4431							; 
  22670  4431
  22671  4431				   .
  22672  4431							; 
  22673  4431
  22674  4431				   .
  22675  4431							; 
  22676  4431
  22677  4431				   .L01091		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  22678  4431
  22679  4431		       e6 df		      INC	_Ch1_Counter
  22680  4433				   .L01092		;  temp5  =  _SD_Grab[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter	+  1
  22681  4433
  22682  4433		       a6 df		      LDX	_Ch1_Counter
  22683  4435		       bd 0d 78 	      LDA	_SD_Grab,x
  22684  4438		       85 a0		      STA	temp5
  22685  443a		       e6 df		      INC	_Ch1_Counter
  22686  443c				   .L01093		;  temp6  =  _SD_Grab[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter	+  1
  22687  443c
  22688  443c		       a6 df		      LDX	_Ch1_Counter
  22689  443e		       bd 0d 78 	      LDA	_SD_Grab,x
  22690  4441		       85 a1		      STA	temp6
  22691  4443		       e6 df		      INC	_Ch1_Counter
  22692  4445				   .
  22693  4445							; 
  22694  4445
  22695  4445				   .
  22696  4445							; 
  22697  4445
  22698  4445				   .
  22699  4445							; 
  22700  4445
  22701  4445				   .
  22702  4445							; 
  22703  4445
  22704  4445				   .L01094		;  AUDV1  =  temp4
  22705  4445
  22706  4445		       a5 9f		      LDA	temp4
  22707  4447		       85 1a		      STA	AUDV1
  22708  4449				   .L01095		;  AUDC1  =  temp5
  22709  4449
  22710  4449		       a5 a0		      LDA	temp5
  22711  444b		       85 16		      STA	AUDC1
  22712  444d				   .L01096		;  AUDF1  =  temp6
  22713  444d
  22714  444d		       a5 a1		      LDA	temp6
  22715  444f		       85 18		      STA	AUDF1
  22716  4451				   .
  22717  4451							; 
  22718  4451
  22719  4451				   .
  22720  4451							; 
  22721  4451
  22722  4451				   .
  22723  4451							; 
  22724  4451
  22725  4451				   .
  22726  4451							; 
  22727  4451
  22728  4451				   .L01097		;  _Ch1_Duration  =  _SD_Grab[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter	+  1
  22729  4451
  22730  4451		       a6 df		      LDX	_Ch1_Counter
  22731  4453		       bd 0d 78 	      LDA	_SD_Grab,x
  22732  4456		       85 de		      STA	_Ch1_Duration
  22733  4458		       e6 df		      INC	_Ch1_Counter
  22734  445a				   .
  22735  445a							; 
  22736  445a
  22737  445a				   .
  22738  445a							; 
  22739  445a
  22740  445a				   .
  22741  445a							; 
  22742  445a
  22743  445a				   .
  22744  445a							; 
  22745  445a
  22746  445a				   .L01098		;  goto __ML_Skip_Ch_1
  22747  445a
  22748  445a		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  22749  445d
  22750  445d				   .
  22751  445d							; 
  22752  445d
  22753  445d				   .__Skip_Sound_Effect_Tent_Reach
  22754  445d							; __Skip_Sound_Effect_Tent_Reach
  22755  445d
  22756  445d				   .
  22757  445d							; 
  22758  445d
  22759  445d				   .
  22760  445d							; 
  22761  445d
  22762  445d				   .
  22763  445d							; 
  22764  445d
  22765  445d				   .
  22766  445d							; 
  22767  445d
  22768  445d				   .
  22769  445d							; 
  22770  445d
  22771  445d				   .
  22772  445d							; 
  22773  445d
  22774  445d				   .
  22775  445d							; 
  22776  445d
  22777  445d				   .
  22778  445d							; 
  22779  445d
  22780  445d				   .
  22781  445d							; 
  22782  445d
  22783  445d				   .
  22784  445d							; 
  22785  445d
  22786  445d				   .L01099		;  if _Ch1_Sound  <>  _c_Ship_Drop_In then goto __Skip_Sound_Effect_Drop
  22787  445d
  22788  445d		       a5 dd		      LDA	_Ch1_Sound
  22789  445f		       c9 01		      CMP	#_c_Ship_Drop_In
  22790  4461		       f0 03		      BEQ	.skipL01099
  22791  4463				   .condpart382
  22792  4463		       4c a2 74 	      jmp	.__Skip_Sound_Effect_Drop
  22793  4466
  22794  4466				   .skipL01099
  22795  4466				   .
  22796  4466							; 
  22797  4466
  22798  4466				   .
  22799  4466							; 
  22800  4466
  22801  4466				   .
  22802  4466							; 
  22803  4466
  22804  4466				   .
  22805  4466							; 
  22806  4466
  22807  4466				   .L01100		;  temp4  =  _SD_Ship_Drop_In[_Ch1_Counter]
  22808  4466
  22809  4466		       a6 df		      LDX	_Ch1_Counter
  22810  4468		       bd c5 78 	      LDA	_SD_Ship_Drop_In,x
  22811  446b		       85 9f		      STA	temp4
  22812  446d				   .
  22813  446d							; 
  22814  446d
  22815  446d				   .
  22816  446d							; 
  22817  446d
  22818  446d				   .
  22819  446d							; 
  22820  446d
  22821  446d				   .
  22822  446d							; 
  22823  446d
  22824  446d				   .L01101		;  if temp4  =  255 then goto __ML_Clear_Ch_1
  22825  446d
  22826  446d		       a5 9f		      LDA	temp4
  22827  446f		       c9 ff		      CMP	#255
  22828  4471		       d0 03		      BNE	.skipL01101
  22829  4473				   .condpart383
  22830  4473		       4c 88 76 	      jmp	.__ML_Clear_Ch_1
  22831  4476
  22832  4476				   .skipL01101
  22833  4476				   .
  22834  4476							; 
  22835  4476
  22836  4476				   .
  22837  4476							; 
  22838  4476
  22839  4476				   .
  22840  4476							; 
  22841  4476
  22842  4476				   .
  22843  4476							; 
  22844  4476
  22845  4476				   .L01102		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  22846  4476
  22847  4476		       e6 df		      INC	_Ch1_Counter
  22848  4478				   .L01103		;  temp5  =  _SD_Ship_Drop_In[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter	+  1
  22849  4478
  22850  4478		       a6 df		      LDX	_Ch1_Counter
  22851  447a		       bd c5 78 	      LDA	_SD_Ship_Drop_In,x
  22852  447d		       85 a0		      STA	temp5
  22853  447f		       e6 df		      INC	_Ch1_Counter
  22854  4481				   .L01104		;  temp6  =  _SD_Ship_Drop_In[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter	+  1
  22855  4481
  22856  4481		       a6 df		      LDX	_Ch1_Counter
  22857  4483		       bd c5 78 	      LDA	_SD_Ship_Drop_In,x
  22858  4486		       85 a1		      STA	temp6
  22859  4488		       e6 df		      INC	_Ch1_Counter
  22860  448a				   .
  22861  448a							; 
  22862  448a
  22863  448a				   .
  22864  448a							; 
  22865  448a
  22866  448a				   .
  22867  448a							; 
  22868  448a
  22869  448a				   .
  22870  448a							; 
  22871  448a
  22872  448a				   .L01105		;  AUDV1  =  temp4
  22873  448a
  22874  448a		       a5 9f		      LDA	temp4
  22875  448c		       85 1a		      STA	AUDV1
  22876  448e				   .L01106		;  AUDC1  =  temp5
  22877  448e
  22878  448e		       a5 a0		      LDA	temp5
  22879  4490		       85 16		      STA	AUDC1
  22880  4492				   .L01107		;  AUDF1  =  temp6
  22881  4492
  22882  4492		       a5 a1		      LDA	temp6
  22883  4494		       85 18		      STA	AUDF1
  22884  4496				   .
  22885  4496							; 
  22886  4496
  22887  4496				   .
  22888  4496							; 
  22889  4496
  22890  4496				   .
  22891  4496							; 
  22892  4496
  22893  4496				   .
  22894  4496							; 
  22895  4496
  22896  4496				   .L01108		;  _Ch1_Duration  =  _SD_Ship_Drop_In[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter	+  1
  22897  4496
  22898  4496		       a6 df		      LDX	_Ch1_Counter
  22899  4498		       bd c5 78 	      LDA	_SD_Ship_Drop_In,x
  22900  449b		       85 de		      STA	_Ch1_Duration
  22901  449d		       e6 df		      INC	_Ch1_Counter
  22902  449f				   .
  22903  449f							; 
  22904  449f
  22905  449f				   .
  22906  449f							; 
  22907  449f
  22908  449f				   .
  22909  449f							; 
  22910  449f
  22911  449f				   .
  22912  449f							; 
  22913  449f
  22914  449f				   .L01109		;  goto __ML_Skip_Ch_1
  22915  449f
  22916  449f		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  22917  44a2
  22918  44a2				   .
  22919  44a2							; 
  22920  44a2
  22921  44a2				   .__Skip_Sound_Effect_Drop
  22922  44a2							; __Skip_Sound_Effect_Drop
  22923  44a2
  22924  44a2				   .
  22925  44a2							; 
  22926  44a2
  22927  44a2				   .
  22928  44a2							; 
  22929  44a2
  22930  44a2				   .
  22931  44a2							; 
  22932  44a2
  22933  44a2				   .
  22934  44a2							; 
  22935  44a2
  22936  44a2				   .
  22937  44a2							; 
  22938  44a2
  22939  44a2				   .
  22940  44a2							; 
  22941  44a2
  22942  44a2				   .
  22943  44a2							; 
  22944  44a2
  22945  44a2				   .
  22946  44a2							; 
  22947  44a2
  22948  44a2				   .
  22949  44a2							; 
  22950  44a2
  22951  44a2				   .
  22952  44a2							; 
  22953  44a2
  22954  44a2				   .L01110		;  if _Ch1_Sound  <>  _c_Canister_Touched then goto __Skip_Sound_Effect_Canister_Touch
  22955  44a2
  22956  44a2		       a5 dd		      LDA	_Ch1_Sound
  22957  44a4		       c9 05		      CMP	#_c_Canister_Touched
  22958  44a6		       f0 03		      BEQ	.skipL01110
  22959  44a8				   .condpart384
  22960  44a8		       4c e7 74 	      jmp	.__Skip_Sound_Effect_Canister_Touch
  22961  44ab
  22962  44ab				   .skipL01110
  22963  44ab				   .
  22964  44ab							; 
  22965  44ab
  22966  44ab				   .
  22967  44ab							; 
  22968  44ab
  22969  44ab				   .
  22970  44ab							; 
  22971  44ab
  22972  44ab				   .
  22973  44ab							; 
  22974  44ab
  22975  44ab				   .L01111		;  temp4  =  _SD_Bonus_Get[_Ch1_Counter]
  22976  44ab
  22977  44ab		       a6 df		      LDX	_Ch1_Counter
  22978  44ad		       bd 31 7a 	      LDA	_SD_Bonus_Get,x
  22979  44b0		       85 9f		      STA	temp4
  22980  44b2				   .
  22981  44b2							; 
  22982  44b2
  22983  44b2				   .
  22984  44b2							; 
  22985  44b2
  22986  44b2				   .
  22987  44b2							; 
  22988  44b2
  22989  44b2				   .
  22990  44b2							; 
  22991  44b2
  22992  44b2				   .L01112		;  if temp4  =  255 then goto __ML_Clear_Ch_1
  22993  44b2
  22994  44b2		       a5 9f		      LDA	temp4
  22995  44b4		       c9 ff		      CMP	#255
  22996  44b6		       d0 03		      BNE	.skipL01112
  22997  44b8				   .condpart385
  22998  44b8		       4c 88 76 	      jmp	.__ML_Clear_Ch_1
  22999  44bb
  23000  44bb				   .skipL01112
  23001  44bb				   .
  23002  44bb							; 
  23003  44bb
  23004  44bb				   .
  23005  44bb							; 
  23006  44bb
  23007  44bb				   .
  23008  44bb							; 
  23009  44bb
  23010  44bb				   .
  23011  44bb							; 
  23012  44bb
  23013  44bb				   .L01113		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  23014  44bb
  23015  44bb		       e6 df		      INC	_Ch1_Counter
  23016  44bd				   .L01114		;  temp5  =  _SD_Bonus_Get[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +	1
  23017  44bd
  23018  44bd		       a6 df		      LDX	_Ch1_Counter
  23019  44bf		       bd 31 7a 	      LDA	_SD_Bonus_Get,x
  23020  44c2		       85 a0		      STA	temp5
  23021  44c4		       e6 df		      INC	_Ch1_Counter
  23022  44c6				   .L01115		;  temp6  =  _SD_Bonus_Get[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +	1
  23023  44c6
  23024  44c6		       a6 df		      LDX	_Ch1_Counter
  23025  44c8		       bd 31 7a 	      LDA	_SD_Bonus_Get,x
  23026  44cb		       85 a1		      STA	temp6
  23027  44cd		       e6 df		      INC	_Ch1_Counter
  23028  44cf				   .
  23029  44cf							; 
  23030  44cf
  23031  44cf				   .
  23032  44cf							; 
  23033  44cf
  23034  44cf				   .
  23035  44cf							; 
  23036  44cf
  23037  44cf				   .
  23038  44cf							; 
  23039  44cf
  23040  44cf				   .L01116		;  AUDV1  =  temp4
  23041  44cf
  23042  44cf		       a5 9f		      LDA	temp4
  23043  44d1		       85 1a		      STA	AUDV1
  23044  44d3				   .L01117		;  AUDC1  =  temp5
  23045  44d3
  23046  44d3		       a5 a0		      LDA	temp5
  23047  44d5		       85 16		      STA	AUDC1
  23048  44d7				   .L01118		;  AUDF1  =  temp6
  23049  44d7
  23050  44d7		       a5 a1		      LDA	temp6
  23051  44d9		       85 18		      STA	AUDF1
  23052  44db				   .
  23053  44db							; 
  23054  44db
  23055  44db				   .
  23056  44db							; 
  23057  44db
  23058  44db				   .
  23059  44db							; 
  23060  44db
  23061  44db				   .
  23062  44db							; 
  23063  44db
  23064  44db				   .L01119		;  _Ch1_Duration =  _SD_Bonus_Get[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +  1
  23065  44db
  23066  44db		       a6 df		      LDX	_Ch1_Counter
  23067  44dd		       bd 31 7a 	      LDA	_SD_Bonus_Get,x
  23068  44e0		       85 de		      STA	_Ch1_Duration
  23069  44e2		       e6 df		      INC	_Ch1_Counter
  23070  44e4				   .
  23071  44e4							; 
  23072  44e4
  23073  44e4				   .
  23074  44e4							; 
  23075  44e4
  23076  44e4				   .
  23077  44e4							; 
  23078  44e4
  23079  44e4				   .
  23080  44e4							; 
  23081  44e4
  23082  44e4				   .L01120		;  goto __ML_Skip_Ch_1
  23083  44e4
  23084  44e4		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  23085  44e7
  23086  44e7				   .
  23087  44e7							; 
  23088  44e7
  23089  44e7				   .__Skip_Sound_Effect_Canister_Touch
  23090  44e7							; __Skip_Sound_Effect_Canister_Touch
  23091  44e7
  23092  44e7				   .
  23093  44e7							; 
  23094  44e7
  23095  44e7				   .
  23096  44e7							; 
  23097  44e7
  23098  44e7				   .
  23099  44e7							; 
  23100  44e7
  23101  44e7				   .
  23102  44e7							; 
  23103  44e7
  23104  44e7				   .
  23105  44e7							; 
  23106  44e7
  23107  44e7				   .
  23108  44e7							; 
  23109  44e7
  23110  44e7				   .
  23111  44e7							; 
  23112  44e7
  23113  44e7				   .
  23114  44e7							; 
  23115  44e7
  23116  44e7				   .
  23117  44e7							; 
  23118  44e7
  23119  44e7				   .
  23120  44e7							; 
  23121  44e7
  23122  44e7				   .L01121		;  if _Ch1_Sound  <>  _c_Canister_Appear then goto __Skip_Sound_Effect_Canister_Drop
  23123  44e7
  23124  44e7		       a5 dd		      LDA	_Ch1_Sound
  23125  44e9		       c9 04		      CMP	#_c_Canister_Appear
  23126  44eb		       f0 03		      BEQ	.skipL01121
  23127  44ed				   .condpart386
  23128  44ed		       4c 2c 75 	      jmp	.__Skip_Sound_Effect_Canister_Drop
  23129  44f0
  23130  44f0				   .skipL01121
  23131  44f0				   .
  23132  44f0							; 
  23133  44f0
  23134  44f0				   .
  23135  44f0							; 
  23136  44f0
  23137  44f0				   .
  23138  44f0							; 
  23139  44f0
  23140  44f0				   .
  23141  44f0							; 
  23142  44f0
  23143  44f0				   .L01122		;  temp4  =  _SD_Health_Can[_Ch1_Counter]
  23144  44f0
  23145  44f0		       a6 df		      LDX	_Ch1_Counter
  23146  44f2		       bd 9d 7a 	      LDA	_SD_Health_Can,x
  23147  44f5		       85 9f		      STA	temp4
  23148  44f7				   .
  23149  44f7							; 
  23150  44f7
  23151  44f7				   .
  23152  44f7							; 
  23153  44f7
  23154  44f7				   .
  23155  44f7							; 
  23156  44f7
  23157  44f7				   .
  23158  44f7							; 
  23159  44f7
  23160  44f7				   .L01123		;  if temp4  =  255 then goto __ML_Clear_Ch_1
  23161  44f7
  23162  44f7		       a5 9f		      LDA	temp4
  23163  44f9		       c9 ff		      CMP	#255
  23164  44fb		       d0 03		      BNE	.skipL01123
  23165  44fd				   .condpart387
  23166  44fd		       4c 88 76 	      jmp	.__ML_Clear_Ch_1
  23167  4500
  23168  4500				   .skipL01123
  23169  4500				   .
  23170  4500							; 
  23171  4500
  23172  4500				   .
  23173  4500							; 
  23174  4500
  23175  4500				   .
  23176  4500							; 
  23177  4500
  23178  4500				   .
  23179  4500							; 
  23180  4500
  23181  4500				   .L01124		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  23182  4500
  23183  4500		       e6 df		      INC	_Ch1_Counter
  23184  4502				   .L01125		;  temp5  =  _SD_Health_Can[_Ch1_Counter]  :  _Ch1_Counter  =	_Ch1_Counter  +  1
  23185  4502
  23186  4502		       a6 df		      LDX	_Ch1_Counter
  23187  4504		       bd 9d 7a 	      LDA	_SD_Health_Can,x
  23188  4507		       85 a0		      STA	temp5
  23189  4509		       e6 df		      INC	_Ch1_Counter
  23190  450b				   .L01126		;  temp6  =  _SD_Health_Can[_Ch1_Counter]  :  _Ch1_Counter  =	_Ch1_Counter  +  1
  23191  450b
  23192  450b		       a6 df		      LDX	_Ch1_Counter
  23193  450d		       bd 9d 7a 	      LDA	_SD_Health_Can,x
  23194  4510		       85 a1		      STA	temp6
  23195  4512		       e6 df		      INC	_Ch1_Counter
  23196  4514				   .
  23197  4514							; 
  23198  4514
  23199  4514				   .
  23200  4514							; 
  23201  4514
  23202  4514				   .
  23203  4514							; 
  23204  4514
  23205  4514				   .
  23206  4514							; 
  23207  4514
  23208  4514				   .L01127		;  AUDV1  =  temp4
  23209  4514
  23210  4514		       a5 9f		      LDA	temp4
  23211  4516		       85 1a		      STA	AUDV1
  23212  4518				   .L01128		;  AUDC1  =  temp5
  23213  4518
  23214  4518		       a5 a0		      LDA	temp5
  23215  451a		       85 16		      STA	AUDC1
  23216  451c				   .L01129		;  AUDF1  =  temp6
  23217  451c
  23218  451c		       a5 a1		      LDA	temp6
  23219  451e		       85 18		      STA	AUDF1
  23220  4520				   .
  23221  4520							; 
  23222  4520
  23223  4520				   .
  23224  4520							; 
  23225  4520
  23226  4520				   .
  23227  4520							; 
  23228  4520
  23229  4520				   .
  23230  4520							; 
  23231  4520
  23232  4520				   .L01130		;  _Ch1_Duration =  _SD_Health_Can[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +	1
  23233  4520
  23234  4520		       a6 df		      LDX	_Ch1_Counter
  23235  4522		       bd 9d 7a 	      LDA	_SD_Health_Can,x
  23236  4525		       85 de		      STA	_Ch1_Duration
  23237  4527		       e6 df		      INC	_Ch1_Counter
  23238  4529				   .
  23239  4529							; 
  23240  4529
  23241  4529				   .
  23242  4529							; 
  23243  4529
  23244  4529				   .
  23245  4529							; 
  23246  4529
  23247  4529				   .
  23248  4529							; 
  23249  4529
  23250  4529				   .L01131		;  goto __ML_Skip_Ch_1
  23251  4529
  23252  4529		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  23253  452c
  23254  452c				   .
  23255  452c							; 
  23256  452c
  23257  452c				   .__Skip_Sound_Effect_Canister_Drop
  23258  452c							; __Skip_Sound_Effect_Canister_Drop
  23259  452c
  23260  452c				   .
  23261  452c							; 
  23262  452c
  23263  452c				   .
  23264  452c							; 
  23265  452c
  23266  452c				   .
  23267  452c							; 
  23268  452c
  23269  452c				   .
  23270  452c							; 
  23271  452c
  23272  452c				   .
  23273  452c							; 
  23274  452c
  23275  452c				   .
  23276  452c							; 
  23277  452c
  23278  452c				   .
  23279  452c							; 
  23280  452c
  23281  452c				   .
  23282  452c							; 
  23283  452c
  23284  452c				   .
  23285  452c							; 
  23286  452c
  23287  452c				   .
  23288  452c							; 
  23289  452c
  23290  452c				   .L01132		;  if _Ch1_Sound  <>  _c_Wrothopod then goto __Skip_Sound_Effect_Wroth_Coming
  23291  452c
  23292  452c		       a5 dd		      LDA	_Ch1_Sound
  23293  452e		       c9 03		      CMP	#_c_Wrothopod
  23294  4530		       f0 03		      BEQ	.skipL01132
  23295  4532				   .condpart388
  23296  4532		       4c 71 75 	      jmp	.__Skip_Sound_Effect_Wroth_Coming
  23297  4535
  23298  4535				   .skipL01132
  23299  4535				   .
  23300  4535							; 
  23301  4535
  23302  4535				   .
  23303  4535							; 
  23304  4535
  23305  4535				   .
  23306  4535							; 
  23307  4535
  23308  4535				   .
  23309  4535							; 
  23310  4535
  23311  4535				   .L01133		;  temp4  =  _SD_Wroth[_Ch1_Counter]
  23312  4535
  23313  4535		       a6 df		      LDX	_Ch1_Counter
  23314  4537		       bd 35 78 	      LDA	_SD_Wroth,x
  23315  453a		       85 9f		      STA	temp4
  23316  453c				   .
  23317  453c							; 
  23318  453c
  23319  453c				   .
  23320  453c							; 
  23321  453c
  23322  453c				   .
  23323  453c							; 
  23324  453c
  23325  453c				   .
  23326  453c							; 
  23327  453c
  23328  453c				   .L01134		;  if temp4  =  255 then goto __ML_Clear_Ch_1
  23329  453c
  23330  453c		       a5 9f		      LDA	temp4
  23331  453e		       c9 ff		      CMP	#255
  23332  4540		       d0 03		      BNE	.skipL01134
  23333  4542				   .condpart389
  23334  4542		       4c 88 76 	      jmp	.__ML_Clear_Ch_1
  23335  4545
  23336  4545				   .skipL01134
  23337  4545				   .
  23338  4545							; 
  23339  4545
  23340  4545				   .
  23341  4545							; 
  23342  4545
  23343  4545				   .
  23344  4545							; 
  23345  4545
  23346  4545				   .
  23347  4545							; 
  23348  4545
  23349  4545				   .L01135		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  23350  4545
  23351  4545		       e6 df		      INC	_Ch1_Counter
  23352  4547				   .L01136		;  temp5  =  _SD_Wroth[_Ch1_Counter]  :  _Ch1_Counter	=  _Ch1_Counter  +  1
  23353  4547
  23354  4547		       a6 df		      LDX	_Ch1_Counter
  23355  4549		       bd 35 78 	      LDA	_SD_Wroth,x
  23356  454c		       85 a0		      STA	temp5
  23357  454e		       e6 df		      INC	_Ch1_Counter
  23358  4550				   .L01137		;  temp6  =  _SD_Wroth[_Ch1_Counter]  :  _Ch1_Counter	=  _Ch1_Counter  +  1
  23359  4550
  23360  4550		       a6 df		      LDX	_Ch1_Counter
  23361  4552		       bd 35 78 	      LDA	_SD_Wroth,x
  23362  4555		       85 a1		      STA	temp6
  23363  4557		       e6 df		      INC	_Ch1_Counter
  23364  4559				   .
  23365  4559							; 
  23366  4559
  23367  4559				   .
  23368  4559							; 
  23369  4559
  23370  4559				   .
  23371  4559							; 
  23372  4559
  23373  4559				   .
  23374  4559							; 
  23375  4559
  23376  4559				   .L01138		;  AUDV1  =  temp4
  23377  4559
  23378  4559		       a5 9f		      LDA	temp4
  23379  455b		       85 1a		      STA	AUDV1
  23380  455d				   .L01139		;  AUDC1  =  temp5
  23381  455d
  23382  455d		       a5 a0		      LDA	temp5
  23383  455f		       85 16		      STA	AUDC1
  23384  4561				   .L01140		;  AUDF1  =  temp6
  23385  4561
  23386  4561		       a5 a1		      LDA	temp6
  23387  4563		       85 18		      STA	AUDF1
  23388  4565				   .
  23389  4565							; 
  23390  4565
  23391  4565				   .
  23392  4565							; 
  23393  4565
  23394  4565				   .
  23395  4565							; 
  23396  4565
  23397  4565				   .
  23398  4565							; 
  23399  4565
  23400  4565				   .L01141		;  _Ch1_Duration  =  _SD_Wroth[_Ch1_Counter]  :  _Ch1_Counter	=  _Ch1_Counter  +  1
  23401  4565
  23402  4565		       a6 df		      LDX	_Ch1_Counter
  23403  4567		       bd 35 78 	      LDA	_SD_Wroth,x
  23404  456a		       85 de		      STA	_Ch1_Duration
  23405  456c		       e6 df		      INC	_Ch1_Counter
  23406  456e				   .
  23407  456e							; 
  23408  456e
  23409  456e				   .
  23410  456e							; 
  23411  456e
  23412  456e				   .
  23413  456e							; 
  23414  456e
  23415  456e				   .
  23416  456e							; 
  23417  456e
  23418  456e				   .L01142		;  goto __ML_Skip_Ch_1
  23419  456e
  23420  456e		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  23421  4571
  23422  4571				   .
  23423  4571							; 
  23424  4571
  23425  4571				   .__Skip_Sound_Effect_Wroth_Coming
  23426  4571							; __Skip_Sound_Effect_Wroth_Coming
  23427  4571
  23428  4571				   .
  23429  4571							; 
  23430  4571
  23431  4571				   .
  23432  4571							; 
  23433  4571
  23434  4571				   .
  23435  4571							; 
  23436  4571
  23437  4571				   .
  23438  4571							; 
  23439  4571
  23440  4571				   .
  23441  4571							; 
  23442  4571
  23443  4571				   .
  23444  4571							; 
  23445  4571
  23446  4571				   .
  23447  4571							; 
  23448  4571
  23449  4571				   .
  23450  4571							; 
  23451  4571
  23452  4571				   .
  23453  4571							; 
  23454  4571
  23455  4571				   .
  23456  4571							; 
  23457  4571
  23458  4571				   .L01143		;  if _Ch1_Sound  <>  _c_Corroded_Tick_Down then goto __Skip_Sound_Effect_Corroded_Tick_Down
  23459  4571
  23460  4571		       a5 dd		      LDA	_Ch1_Sound
  23461  4573		       c9 06		      CMP	#_c_Corroded_Tick_Down
  23462  4575		       f0 03		      BEQ	.skipL01143
  23463  4577				   .condpart390
  23464  4577		       4c b6 75 	      jmp	.__Skip_Sound_Effect_Corroded_Tick_Down
  23465  457a
  23466  457a				   .skipL01143
  23467  457a				   .
  23468  457a							; 
  23469  457a
  23470  457a				   .
  23471  457a							; 
  23472  457a
  23473  457a				   .
  23474  457a							; 
  23475  457a
  23476  457a				   .
  23477  457a							; 
  23478  457a
  23479  457a				   .L01144		;  temp4  =  _SD_Corroded_Tick_Down[_Ch1_Counter]
  23480  457a
  23481  457a		       a6 df		      LDX	_Ch1_Counter
  23482  457c		       bd 01 7b 	      LDA	_SD_Corroded_Tick_Down,x
  23483  457f		       85 9f		      STA	temp4
  23484  4581				   .
  23485  4581							; 
  23486  4581
  23487  4581				   .
  23488  4581							; 
  23489  4581
  23490  4581				   .
  23491  4581							; 
  23492  4581
  23493  4581				   .
  23494  4581							; 
  23495  4581
  23496  4581				   .L01145		;  if temp4  =  255 then goto __ML_Clear_Ch_1
  23497  4581
  23498  4581		       a5 9f		      LDA	temp4
  23499  4583		       c9 ff		      CMP	#255
  23500  4585		       d0 03		      BNE	.skipL01145
  23501  4587				   .condpart391
  23502  4587		       4c 88 76 	      jmp	.__ML_Clear_Ch_1
  23503  458a
  23504  458a				   .skipL01145
  23505  458a				   .
  23506  458a							; 
  23507  458a
  23508  458a				   .
  23509  458a							; 
  23510  458a
  23511  458a				   .
  23512  458a							; 
  23513  458a
  23514  458a				   .
  23515  458a							; 
  23516  458a
  23517  458a				   .L01146		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  23518  458a
  23519  458a		       e6 df		      INC	_Ch1_Counter
  23520  458c				   .L01147		;  temp5  =  _SD_Corroded_Tick_Down[_Ch1_Counter]  :  _Ch1_Counter  =	_Ch1_Counter  +  1
  23521  458c
  23522  458c		       a6 df		      LDX	_Ch1_Counter
  23523  458e		       bd 01 7b 	      LDA	_SD_Corroded_Tick_Down,x
  23524  4591		       85 a0		      STA	temp5
  23525  4593		       e6 df		      INC	_Ch1_Counter
  23526  4595				   .L01148		;  temp6  =  _SD_Corroded_Tick_Down[_Ch1_Counter]  :  _Ch1_Counter  =	_Ch1_Counter  +  1
  23527  4595
  23528  4595		       a6 df		      LDX	_Ch1_Counter
  23529  4597		       bd 01 7b 	      LDA	_SD_Corroded_Tick_Down,x
  23530  459a		       85 a1		      STA	temp6
  23531  459c		       e6 df		      INC	_Ch1_Counter
  23532  459e				   .
  23533  459e							; 
  23534  459e
  23535  459e				   .
  23536  459e							; 
  23537  459e
  23538  459e				   .
  23539  459e							; 
  23540  459e
  23541  459e				   .
  23542  459e							; 
  23543  459e
  23544  459e				   .L01149		;  AUDV1  =  temp4
  23545  459e
  23546  459e		       a5 9f		      LDA	temp4
  23547  45a0		       85 1a		      STA	AUDV1
  23548  45a2				   .L01150		;  AUDC1  =  temp5
  23549  45a2
  23550  45a2		       a5 a0		      LDA	temp5
  23551  45a4		       85 16		      STA	AUDC1
  23552  45a6				   .L01151		;  AUDF1  =  temp6
  23553  45a6
  23554  45a6		       a5 a1		      LDA	temp6
  23555  45a8		       85 18		      STA	AUDF1
  23556  45aa				   .
  23557  45aa							; 
  23558  45aa
  23559  45aa				   .
  23560  45aa							; 
  23561  45aa
  23562  45aa				   .
  23563  45aa							; 
  23564  45aa
  23565  45aa				   .
  23566  45aa							; 
  23567  45aa
  23568  45aa				   .L01152		;  _Ch1_Duration  =  _SD_Corroded_Tick_Down[_Ch1_Counter]  :  _Ch1_Counter  =	_Ch1_Counter  +  1
  23569  45aa
  23570  45aa		       a6 df		      LDX	_Ch1_Counter
  23571  45ac		       bd 01 7b 	      LDA	_SD_Corroded_Tick_Down,x
  23572  45af		       85 de		      STA	_Ch1_Duration
  23573  45b1		       e6 df		      INC	_Ch1_Counter
  23574  45b3				   .
  23575  45b3							; 
  23576  45b3
  23577  45b3				   .
  23578  45b3							; 
  23579  45b3
  23580  45b3				   .
  23581  45b3							; 
  23582  45b3
  23583  45b3				   .
  23584  45b3							; 
  23585  45b3
  23586  45b3				   .L01153		;  goto __ML_Skip_Ch_1
  23587  45b3
  23588  45b3		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  23589  45b6
  23590  45b6				   .
  23591  45b6							; 
  23592  45b6
  23593  45b6				   .__Skip_Sound_Effect_Corroded_Tick_Down
  23594  45b6							; __Skip_Sound_Effect_Corroded_Tick_Down
  23595  45b6
  23596  45b6				   .
  23597  45b6							; 
  23598  45b6
  23599  45b6				   .
  23600  45b6							; 
  23601  45b6
  23602  45b6				   .
  23603  45b6							; 
  23604  45b6
  23605  45b6				   .
  23606  45b6							; 
  23607  45b6
  23608  45b6				   .
  23609  45b6							; 
  23610  45b6
  23611  45b6				   .
  23612  45b6							; 
  23613  45b6
  23614  45b6				   .
  23615  45b6							; 
  23616  45b6
  23617  45b6				   .
  23618  45b6							; 
  23619  45b6
  23620  45b6				   .
  23621  45b6							; 
  23622  45b6
  23623  45b6				   .
  23624  45b6							; 
  23625  45b6
  23626  45b6				   .L01154		;  if _Ch1_Sound  <>  _c_Corroded_Seaweed_Moosh then goto __Skip_Sound_Effect_Corroded_Seaweed_Moosh
  23627  45b6
  23628  45b6		       a5 dd		      LDA	_Ch1_Sound
  23629  45b8		       c9 07		      CMP	#_c_Corroded_Seaweed_Moosh
  23630  45ba		       f0 03		      BEQ	.skipL01154
  23631  45bc				   .condpart392
  23632  45bc		       4c fb 75 	      jmp	.__Skip_Sound_Effect_Corroded_Seaweed_Moosh
  23633  45bf
  23634  45bf				   .skipL01154
  23635  45bf				   .
  23636  45bf							; 
  23637  45bf
  23638  45bf				   .
  23639  45bf							; 
  23640  45bf
  23641  45bf				   .
  23642  45bf							; 
  23643  45bf
  23644  45bf				   .
  23645  45bf							; 
  23646  45bf
  23647  45bf				   .L01155		;  temp4  =  _SD_Corroded_Seaweed_Moosh[_Ch1_Counter]
  23648  45bf
  23649  45bf		       a6 df		      LDX	_Ch1_Counter
  23650  45c1		       bd 6d 7b 	      LDA	_SD_Corroded_Seaweed_Moosh,x
  23651  45c4		       85 9f		      STA	temp4
  23652  45c6				   .
  23653  45c6							; 
  23654  45c6
  23655  45c6				   .
  23656  45c6							; 
  23657  45c6
  23658  45c6				   .
  23659  45c6							; 
  23660  45c6
  23661  45c6				   .
  23662  45c6							; 
  23663  45c6
  23664  45c6				   .L01156		;  if temp4  =  255 then goto __ML_Clear_Ch_1
  23665  45c6
  23666  45c6		       a5 9f		      LDA	temp4
  23667  45c8		       c9 ff		      CMP	#255
  23668  45ca		       d0 03		      BNE	.skipL01156
  23669  45cc				   .condpart393
  23670  45cc		       4c 88 76 	      jmp	.__ML_Clear_Ch_1
  23671  45cf
  23672  45cf				   .skipL01156
  23673  45cf				   .
  23674  45cf							; 
  23675  45cf
  23676  45cf				   .
  23677  45cf							; 
  23678  45cf
  23679  45cf				   .
  23680  45cf							; 
  23681  45cf
  23682  45cf				   .
  23683  45cf							; 
  23684  45cf
  23685  45cf				   .L01157		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  23686  45cf
  23687  45cf		       e6 df		      INC	_Ch1_Counter
  23688  45d1				   .L01158		;  temp5  =  _SD_Corroded_Seaweed_Moosh[_Ch1_Counter]	:  _Ch1_Counter  =  _Ch1_Counter  +  1
  23689  45d1
  23690  45d1		       a6 df		      LDX	_Ch1_Counter
  23691  45d3		       bd 6d 7b 	      LDA	_SD_Corroded_Seaweed_Moosh,x
  23692  45d6		       85 a0		      STA	temp5
  23693  45d8		       e6 df		      INC	_Ch1_Counter
  23694  45da				   .L01159		;  temp6  =  _SD_Corroded_Seaweed_Moosh[_Ch1_Counter]	:  _Ch1_Counter  =  _Ch1_Counter  +  1
  23695  45da
  23696  45da		       a6 df		      LDX	_Ch1_Counter
  23697  45dc		       bd 6d 7b 	      LDA	_SD_Corroded_Seaweed_Moosh,x
  23698  45df		       85 a1		      STA	temp6
  23699  45e1		       e6 df		      INC	_Ch1_Counter
  23700  45e3				   .
  23701  45e3							; 
  23702  45e3
  23703  45e3				   .
  23704  45e3							; 
  23705  45e3
  23706  45e3				   .
  23707  45e3							; 
  23708  45e3
  23709  45e3				   .
  23710  45e3							; 
  23711  45e3
  23712  45e3				   .L01160		;  AUDV1  =  temp4
  23713  45e3
  23714  45e3		       a5 9f		      LDA	temp4
  23715  45e5		       85 1a		      STA	AUDV1
  23716  45e7				   .L01161		;  AUDC1  =  temp5
  23717  45e7
  23718  45e7		       a5 a0		      LDA	temp5
  23719  45e9		       85 16		      STA	AUDC1
  23720  45eb				   .L01162		;  AUDF1  =  temp6
  23721  45eb
  23722  45eb		       a5 a1		      LDA	temp6
  23723  45ed		       85 18		      STA	AUDF1
  23724  45ef				   .
  23725  45ef							; 
  23726  45ef
  23727  45ef				   .
  23728  45ef							; 
  23729  45ef
  23730  45ef				   .
  23731  45ef							; 
  23732  45ef
  23733  45ef				   .
  23734  45ef							; 
  23735  45ef
  23736  45ef				   .L01163		;  _Ch1_Duration  =  _SD_Corroded_Seaweed_Moosh[_Ch1_Counter]	:  _Ch1_Counter  =  _Ch1_Counter  +  1
  23737  45ef
  23738  45ef		       a6 df		      LDX	_Ch1_Counter
  23739  45f1		       bd 6d 7b 	      LDA	_SD_Corroded_Seaweed_Moosh,x
  23740  45f4		       85 de		      STA	_Ch1_Duration
  23741  45f6		       e6 df		      INC	_Ch1_Counter
  23742  45f8				   .
  23743  45f8							; 
  23744  45f8
  23745  45f8				   .
  23746  45f8							; 
  23747  45f8
  23748  45f8				   .
  23749  45f8							; 
  23750  45f8
  23751  45f8				   .
  23752  45f8							; 
  23753  45f8
  23754  45f8				   .L01164		;  goto __ML_Skip_Ch_1
  23755  45f8
  23756  45f8		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  23757  45fb
  23758  45fb				   .
  23759  45fb							; 
  23760  45fb
  23761  45fb				   .__Skip_Sound_Effect_Corroded_Seaweed_Moosh
  23762  45fb							; __Skip_Sound_Effect_Corroded_Seaweed_Moosh
  23763  45fb
  23764  45fb				   .
  23765  45fb							; 
  23766  45fb
  23767  45fb				   .
  23768  45fb							; 
  23769  45fb
  23770  45fb				   .
  23771  45fb							; 
  23772  45fb
  23773  45fb				   .
  23774  45fb							; 
  23775  45fb
  23776  45fb				   .
  23777  45fb							; 
  23778  45fb
  23779  45fb				   .
  23780  45fb							; 
  23781  45fb
  23782  45fb				   .
  23783  45fb							; 
  23784  45fb
  23785  45fb				   .
  23786  45fb							; 
  23787  45fb
  23788  45fb				   .
  23789  45fb							; 
  23790  45fb
  23791  45fb				   .
  23792  45fb							; 
  23793  45fb
  23794  45fb				   .L01165		;  if _Ch1_Sound  <>  _c_Corroded_Hit_Ship then goto __Skip_Sound_Effect_Corroded_Hit_Ship
  23795  45fb
  23796  45fb		       a5 dd		      LDA	_Ch1_Sound
  23797  45fd		       c9 09		      CMP	#_c_Corroded_Hit_Ship
  23798  45ff		       f0 03		      BEQ	.skipL01165
  23799  4601				   .condpart394
  23800  4601		       4c 40 76 	      jmp	.__Skip_Sound_Effect_Corroded_Hit_Ship
  23801  4604
  23802  4604				   .skipL01165
  23803  4604				   .
  23804  4604							; 
  23805  4604
  23806  4604				   .
  23807  4604							; 
  23808  4604
  23809  4604				   .
  23810  4604							; 
  23811  4604
  23812  4604				   .
  23813  4604							; 
  23814  4604
  23815  4604				   .L01166		;  temp4  =  _SD_Corroded_Hit_Ship[_Ch1_Counter]
  23816  4604
  23817  4604		       a6 df		      LDX	_Ch1_Counter
  23818  4606		       bd b9 7b 	      LDA	_SD_Corroded_Hit_Ship,x
  23819  4609		       85 9f		      STA	temp4
  23820  460b				   .
  23821  460b							; 
  23822  460b
  23823  460b				   .
  23824  460b							; 
  23825  460b
  23826  460b				   .
  23827  460b							; 
  23828  460b
  23829  460b				   .
  23830  460b							; 
  23831  460b
  23832  460b				   .L01167		;  if temp4  =  255 then goto __ML_Clear_Ch_1
  23833  460b
  23834  460b		       a5 9f		      LDA	temp4
  23835  460d		       c9 ff		      CMP	#255
  23836  460f		       d0 03		      BNE	.skipL01167
  23837  4611				   .condpart395
  23838  4611		       4c 88 76 	      jmp	.__ML_Clear_Ch_1
  23839  4614
  23840  4614				   .skipL01167
  23841  4614				   .
  23842  4614							; 
  23843  4614
  23844  4614				   .
  23845  4614							; 
  23846  4614
  23847  4614				   .
  23848  4614							; 
  23849  4614
  23850  4614				   .
  23851  4614							; 
  23852  4614
  23853  4614				   .L01168		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  23854  4614
  23855  4614		       e6 df		      INC	_Ch1_Counter
  23856  4616				   .L01169		;  temp5  =  _SD_Corroded_Hit_Ship[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +	1
  23857  4616
  23858  4616		       a6 df		      LDX	_Ch1_Counter
  23859  4618		       bd b9 7b 	      LDA	_SD_Corroded_Hit_Ship,x
  23860  461b		       85 a0		      STA	temp5
  23861  461d		       e6 df		      INC	_Ch1_Counter
  23862  461f				   .L01170		;  temp6  =  _SD_Corroded_Hit_Ship[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +	1
  23863  461f
  23864  461f		       a6 df		      LDX	_Ch1_Counter
  23865  4621		       bd b9 7b 	      LDA	_SD_Corroded_Hit_Ship,x
  23866  4624		       85 a1		      STA	temp6
  23867  4626		       e6 df		      INC	_Ch1_Counter
  23868  4628				   .
  23869  4628							; 
  23870  4628
  23871  4628				   .
  23872  4628							; 
  23873  4628
  23874  4628				   .
  23875  4628							; 
  23876  4628
  23877  4628				   .
  23878  4628							; 
  23879  4628
  23880  4628				   .L01171		;  AUDV1  =  temp4
  23881  4628
  23882  4628		       a5 9f		      LDA	temp4
  23883  462a		       85 1a		      STA	AUDV1
  23884  462c				   .L01172		;  AUDC1  =  temp5
  23885  462c
  23886  462c		       a5 a0		      LDA	temp5
  23887  462e		       85 16		      STA	AUDC1
  23888  4630				   .L01173		;  AUDF1  =  temp6
  23889  4630
  23890  4630		       a5 a1		      LDA	temp6
  23891  4632		       85 18		      STA	AUDF1
  23892  4634				   .
  23893  4634							; 
  23894  4634
  23895  4634				   .
  23896  4634							; 
  23897  4634
  23898  4634				   .
  23899  4634							; 
  23900  4634
  23901  4634				   .
  23902  4634							; 
  23903  4634
  23904  4634				   .L01174		;  _Ch1_Duration  =  _SD_Corroded_Hit_Ship[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +	1
  23905  4634
  23906  4634		       a6 df		      LDX	_Ch1_Counter
  23907  4636		       bd b9 7b 	      LDA	_SD_Corroded_Hit_Ship,x
  23908  4639		       85 de		      STA	_Ch1_Duration
  23909  463b		       e6 df		      INC	_Ch1_Counter
  23910  463d				   .
  23911  463d							; 
  23912  463d
  23913  463d				   .
  23914  463d							; 
  23915  463d
  23916  463d				   .
  23917  463d							; 
  23918  463d
  23919  463d				   .
  23920  463d							; 
  23921  463d
  23922  463d				   .L01175		;  goto __ML_Skip_Ch_1
  23923  463d
  23924  463d		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  23925  4640
  23926  4640				   .
  23927  4640							; 
  23928  4640
  23929  4640				   .__Skip_Sound_Effect_Corroded_Hit_Ship
  23930  4640							; __Skip_Sound_Effect_Corroded_Hit_Ship
  23931  4640
  23932  4640				   .
  23933  4640							; 
  23934  4640
  23935  4640				   .
  23936  4640							; 
  23937  4640
  23938  4640				   .
  23939  4640							; 
  23940  4640
  23941  4640				   .
  23942  4640							; 
  23943  4640
  23944  4640				   .
  23945  4640							; 
  23946  4640
  23947  4640				   .
  23948  4640							; 
  23949  4640
  23950  4640				   .
  23951  4640							; 
  23952  4640
  23953  4640				   .
  23954  4640							; 
  23955  4640
  23956  4640				   .
  23957  4640							; 
  23958  4640
  23959  4640				   .
  23960  4640							; 
  23961  4640
  23962  4640				   .L01176		;  if _Ch1_Sound  <>  _c_Corroded_Chase then goto __Skip_Sound_Effect_Corroded_Chase
  23963  4640
  23964  4640		       a5 dd		      LDA	_Ch1_Sound
  23965  4642		       c9 08		      CMP	#_c_Corroded_Chase
  23966  4644		       f0 03		      BEQ	.skipL01176
  23967  4646				   .condpart396
  23968  4646		       4c 85 76 	      jmp	.__Skip_Sound_Effect_Corroded_Chase
  23969  4649
  23970  4649				   .skipL01176
  23971  4649				   .
  23972  4649							; 
  23973  4649
  23974  4649				   .
  23975  4649							; 
  23976  4649
  23977  4649				   .
  23978  4649							; 
  23979  4649
  23980  4649				   .
  23981  4649							; 
  23982  4649
  23983  4649				   .L01177		;  temp4  =  _SD_Corroded_Chase[_Ch1_Counter]
  23984  4649
  23985  4649		       a6 df		      LDX	_Ch1_Counter
  23986  464b		       bd 21 7c 	      LDA	_SD_Corroded_Chase,x
  23987  464e		       85 9f		      STA	temp4
  23988  4650				   .
  23989  4650							; 
  23990  4650
  23991  4650				   .
  23992  4650							; 
  23993  4650
  23994  4650				   .
  23995  4650							; 
  23996  4650
  23997  4650				   .
  23998  4650							; 
  23999  4650
  24000  4650				   .L01178		;  if temp4  =  255 then goto __ML_Clear_Ch_1
  24001  4650
  24002  4650		       a5 9f		      LDA	temp4
  24003  4652		       c9 ff		      CMP	#255
  24004  4654		       d0 03		      BNE	.skipL01178
  24005  4656				   .condpart397
  24006  4656		       4c 88 76 	      jmp	.__ML_Clear_Ch_1
  24007  4659
  24008  4659				   .skipL01178
  24009  4659				   .
  24010  4659							; 
  24011  4659
  24012  4659				   .
  24013  4659							; 
  24014  4659
  24015  4659				   .
  24016  4659							; 
  24017  4659
  24018  4659				   .
  24019  4659							; 
  24020  4659
  24021  4659				   .L01179		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  24022  4659
  24023  4659		       e6 df		      INC	_Ch1_Counter
  24024  465b				   .L01180		;  temp5  =  _SD_Corroded_Chase[_Ch1_Counter]	:  _Ch1_Counter  =  _Ch1_Counter  +  1
  24025  465b
  24026  465b		       a6 df		      LDX	_Ch1_Counter
  24027  465d		       bd 21 7c 	      LDA	_SD_Corroded_Chase,x
  24028  4660		       85 a0		      STA	temp5
  24029  4662		       e6 df		      INC	_Ch1_Counter
  24030  4664				   .L01181		;  temp6  =  _SD_Corroded_Chase[_Ch1_Counter]	:  _Ch1_Counter  =  _Ch1_Counter  +  1
  24031  4664
  24032  4664		       a6 df		      LDX	_Ch1_Counter
  24033  4666		       bd 21 7c 	      LDA	_SD_Corroded_Chase,x
  24034  4669		       85 a1		      STA	temp6
  24035  466b		       e6 df		      INC	_Ch1_Counter
  24036  466d				   .
  24037  466d							; 
  24038  466d
  24039  466d				   .
  24040  466d							; 
  24041  466d
  24042  466d				   .
  24043  466d							; 
  24044  466d
  24045  466d				   .
  24046  466d							; 
  24047  466d
  24048  466d				   .L01182		;  AUDV1  =  temp4
  24049  466d
  24050  466d		       a5 9f		      LDA	temp4
  24051  466f		       85 1a		      STA	AUDV1
  24052  4671				   .L01183		;  AUDC1  =  temp5
  24053  4671
  24054  4671		       a5 a0		      LDA	temp5
  24055  4673		       85 16		      STA	AUDC1
  24056  4675				   .L01184		;  AUDF1  =  temp6
  24057  4675
  24058  4675		       a5 a1		      LDA	temp6
  24059  4677		       85 18		      STA	AUDF1
  24060  4679				   .
  24061  4679							; 
  24062  4679
  24063  4679				   .
  24064  4679							; 
  24065  4679
  24066  4679				   .
  24067  4679							; 
  24068  4679
  24069  4679				   .
  24070  4679							; 
  24071  4679
  24072  4679				   .L01185		;  _Ch1_Duration  =  _SD_Corroded_Chase[_Ch1_Counter]	:  _Ch1_Counter  =  _Ch1_Counter  +  1
  24073  4679
  24074  4679		       a6 df		      LDX	_Ch1_Counter
  24075  467b		       bd 21 7c 	      LDA	_SD_Corroded_Chase,x
  24076  467e		       85 de		      STA	_Ch1_Duration
  24077  4680		       e6 df		      INC	_Ch1_Counter
  24078  4682				   .
  24079  4682							; 
  24080  4682
  24081  4682				   .
  24082  4682							; 
  24083  4682
  24084  4682				   .
  24085  4682							; 
  24086  4682
  24087  4682				   .
  24088  4682							; 
  24089  4682
  24090  4682				   .L01186		;  goto __ML_Skip_Ch_1
  24091  4682
  24092  4682		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  24093  4685
  24094  4685				   .
  24095  4685							; 
  24096  4685
  24097  4685				   .__Skip_Sound_Effect_Corroded_Chase
  24098  4685							; __Skip_Sound_Effect_Corroded_Chase
  24099  4685
  24100  4685				   .
  24101  4685							; 
  24102  4685
  24103  4685				   .
  24104  4685							; 
  24105  4685
  24106  4685				   .
  24107  4685							; 
  24108  4685
  24109  4685				   .
  24110  4685							; 
  24111  4685
  24112  4685				   .
  24113  4685							; 
  24114  4685
  24115  4685				   .
  24116  4685							; 
  24117  4685
  24118  4685				   .
  24119  4685							; 
  24120  4685
  24121  4685				   .L01187		;  goto __ML_Skip_Ch_1
  24122  4685
  24123  4685		       4c 94 76 	      jmp	.__ML_Skip_Ch_1
  24124  4688
  24125  4688				   .
  24126  4688							; 
  24127  4688
  24128  4688				   .
  24129  4688							; 
  24130  4688
  24131  4688				   .
  24132  4688							; 
  24133  4688
  24134  4688				   .
  24135  4688							; 
  24136  4688
  24137  4688				   .
  24138  4688							; 
  24139  4688
  24140  4688				   .
  24141  4688							; 
  24142  4688
  24143  4688				   .
  24144  4688							; 
  24145  4688
  24146  4688				   .__ML_Clear_Ch_1
  24147  4688							; __ML_Clear_Ch_1
  24148  4688
  24149  4688				   .
  24150  4688							; 
  24151  4688
  24152  4688				   .L01188		;  _Ch1_Duration  =  1
  24153  4688
  24154  4688		       a9 01		      LDA	#1
  24155  468a		       85 de		      STA	_Ch1_Duration
  24156  468c				   .
  24157  468c							; 
  24158  468c
  24159  468c				   .L01189		;  _Ch1_Sound	=  0  :  _Ch1_Counter  =  0  :	AUDV1  =  0
  24160  468c
  24161  468c		       a9 00		      LDA	#0
  24162  468e		       85 dd		      STA	_Ch1_Sound
  24163  4690		       85 df		      STA	_Ch1_Counter
  24164  4692		       85 1a		      STA	AUDV1
  24165  4694				   .
  24166  4694							; 
  24167  4694
  24168  4694				   .
  24169  4694							; 
  24170  4694
  24171  4694				   .
  24172  4694							; 
  24173  4694
  24174  4694				   .
  24175  4694							; 
  24176  4694
  24177  4694				   .
  24178  4694							; 
  24179  4694
  24180  4694				   .
  24181  4694							; 
  24182  4694
  24183  4694				   .
  24184  4694							; 
  24185  4694
  24186  4694				   .__ML_Skip_Ch_1
  24187  4694							; __ML_Skip_Ch_1
  24188  4694
  24189  4694				   .
  24190  4694							; 
  24191  4694
  24192  4694				   .
  24193  4694							; 
  24194  4694
  24195  4694				   .L01190		;  goto __Main_Loop bank2
  24196  4694
  24197  4694		       85 ee		      sta	temp7
  24198  4696		       a9 30		      lda	#>(.__Main_Loop-1)
  24199  4698		       48		      pha
  24200  4699		       a9 ff		      lda	#<(.__Main_Loop-1)
  24201  469b		       48		      pha
  24202  469c		       a5 ee		      lda	temp7
  24203  469e		       48		      pha
  24204  469f		       8a		      txa
  24205  46a0		       48		      pha
  24206  46a1		       a2 02		      ldx	#2
  24207  46a3		       4c eb ff 	      jmp	BS_jsr
  24208  46a6				   .
  24209  46a6							; 
  24210  46a6
  24211  46a6				   .
  24212  46a6							; 
  24213  46a6
  24214  46a6				   .
  24215  46a6							; 
  24216  46a6
  24217  46a6				   .
  24218  46a6							; 
  24219  46a6
  24220  46a6				   .
  24221  46a6							; 
  24222  46a6
  24223  46a6				   .
  24224  46a6							; 
  24225  46a6
  24226  46a6				   .
  24227  46a6							; 
  24228  46a6
  24229  46a6				   .
  24230  46a6							; 
  24231  46a6
  24232  46a6				   .
  24233  46a6							; 
  24234  46a6
  24235  46a6				   .
  24236  46a6							; 
  24237  46a6
  24238  46a6				   .
  24239  46a6							; 
  24240  46a6
  24241  46a6				   .
  24242  46a6							; 
  24243  46a6
  24244  46a6				   .
  24245  46a6							; 
  24246  46a6
  24247  46a6				   .
  24248  46a6							; 
  24249  46a6
  24250  46a6				   .
  24251  46a6							; 
  24252  46a6
  24253  46a6				   .
  24254  46a6							; 
  24255  46a6
  24256  46a6				   .
  24257  46a6							; 
  24258  46a6
  24259  46a6				   .
  24260  46a6							; 
  24261  46a6
  24262  46a6				   .
  24263  46a6							; 
  24264  46a6
  24265  46a6				   .
  24266  46a6							; 
  24267  46a6
  24268  46a6				   .
  24269  46a6							; 
  24270  46a6
  24271  46a6				   .
  24272  46a6							; 
  24273  46a6
  24274  46a6				   .__1k_Color00
  24275  46a6							; __1k_Color00
  24276  46a6
  24277  46a6				   .
  24278  46a6							; 
  24279  46a6
  24280  46a6				   .L01191		;  pfcolors:
  24281  46a6
  24282  46a6		       a9 ae		      lda	# $AE
  24283  46a8		       85 08		      sta	COLUPF
  24284  46aa				  -	      ifconst	pfres
  24285  46aa				  -	      lda	#>(pfcolorlabel1109-131+pfres*pfwidth)
  24286  46aa					      else
  24287  46aa		       a9 fa		      lda	#>(pfcolorlabel1109-83)
  24288  46ac					      endif
  24289  46ac		       85 f1		      sta	pfcolortable+1
  24290  46ae				  -	      ifconst	pfres
  24291  46ae				  -	      lda	#<(pfcolorlabel1109-131+pfres*pfwidth)
  24292  46ae					      else
  24293  46ae		       a9 3d		      lda	#<(pfcolorlabel1109-83)
  24294  46b0					      endif
  24295  46b0		       85 f0		      sta	pfcolortable
  24296  46b2				   .
  24297  46b2							; 
  24298  46b2
  24299  46b2				   .L01192		;  return thisbank
  24300  46b2
  24301  46b2		       60		      RTS
  24302  46b3				   .
  24303  46b3							; 
  24304  46b3
  24305  46b3				   .
  24306  46b3							; 
  24307  46b3
  24308  46b3				   .__1k_Color01
  24309  46b3							; __1k_Color01
  24310  46b3
  24311  46b3				   .
  24312  46b3							; 
  24313  46b3
  24314  46b3				   .L01193		;  pfcolors:
  24315  46b3
  24316  46b3		       a9 ae		      lda	# $AE
  24317  46b5		       85 08		      sta	COLUPF
  24318  46b7				  -	      ifconst	pfres
  24319  46b7				  -	      lda	#>(pfcolorlabel1109-130+pfres*pfwidth)
  24320  46b7					      else
  24321  46b7		       a9 fa		      lda	#>(pfcolorlabel1109-82)
  24322  46b9					      endif
  24323  46b9		       85 f1		      sta	pfcolortable+1
  24324  46bb				  -	      ifconst	pfres
  24325  46bb				  -	      lda	#<(pfcolorlabel1109-130+pfres*pfwidth)
  24326  46bb					      else
  24327  46bb		       a9 3e		      lda	#<(pfcolorlabel1109-82)
  24328  46bd					      endif
  24329  46bd		       85 f0		      sta	pfcolortable
  24330  46bf				   .
  24331  46bf							; 
  24332  46bf
  24333  46bf				   .L01194		;  return thisbank
  24334  46bf
  24335  46bf		       60		      RTS
  24336  46c0				   .
  24337  46c0							; 
  24338  46c0
  24339  46c0				   .
  24340  46c0							; 
  24341  46c0
  24342  46c0				   .__1k_Color02
  24343  46c0							; __1k_Color02
  24344  46c0
  24345  46c0				   .
  24346  46c0							; 
  24347  46c0
  24348  46c0				   .L01195		;  pfcolors:
  24349  46c0
  24350  46c0		       a9 ce		      lda	# $CE
  24351  46c2		       85 08		      sta	COLUPF
  24352  46c4				  -	      ifconst	pfres
  24353  46c4				  -	      lda	#>(pfcolorlabel1109-129+pfres*pfwidth)
  24354  46c4					      else
  24355  46c4		       a9 fa		      lda	#>(pfcolorlabel1109-81)
  24356  46c6					      endif
  24357  46c6		       85 f1		      sta	pfcolortable+1
  24358  46c8				  -	      ifconst	pfres
  24359  46c8				  -	      lda	#<(pfcolorlabel1109-129+pfres*pfwidth)
  24360  46c8					      else
  24361  46c8		       a9 3f		      lda	#<(pfcolorlabel1109-81)
  24362  46ca					      endif
  24363  46ca		       85 f0		      sta	pfcolortable
  24364  46cc				   .
  24365  46cc							; 
  24366  46cc
  24367  46cc				   .L01196		;  return thisbank
  24368  46cc
  24369  46cc		       60		      RTS
  24370  46cd				   .
  24371  46cd							; 
  24372  46cd
  24373  46cd				   .
  24374  46cd							; 
  24375  46cd
  24376  46cd				   .__1k_Color03
  24377  46cd							; __1k_Color03
  24378  46cd
  24379  46cd				   .
  24380  46cd							; 
  24381  46cd
  24382  46cd				   .L01197		;  pfcolors:
  24383  46cd
  24384  46cd		       a9 ce		      lda	# $CE
  24385  46cf		       85 08		      sta	COLUPF
  24386  46d1				  -	      ifconst	pfres
  24387  46d1				  -	      lda	#>(pfcolorlabel1134-132+pfres*pfwidth)
  24388  46d1					      else
  24389  46d1		       a9 fa		      lda	#>(pfcolorlabel1134-84)
  24390  46d3					      endif
  24391  46d3		       85 f1		      sta	pfcolortable+1
  24392  46d5				  -	      ifconst	pfres
  24393  46d5				  -	      lda	#<(pfcolorlabel1134-132+pfres*pfwidth)
  24394  46d5					      else
  24395  46d5		       a9 68		      lda	#<(pfcolorlabel1134-84)
  24396  46d7					      endif
  24397  46d7		       85 f0		      sta	pfcolortable
  24398  46d9				   .
  24399  46d9							; 
  24400  46d9
  24401  46d9				   .L01198		;  return thisbank
  24402  46d9
  24403  46d9		       60		      RTS
  24404  46da				   .
  24405  46da							; 
  24406  46da
  24407  46da				   .
  24408  46da							; 
  24409  46da
  24410  46da				   .__1k_Color04
  24411  46da							; __1k_Color04
  24412  46da
  24413  46da				   .
  24414  46da							; 
  24415  46da
  24416  46da				   .L01199		;  pfcolors:
  24417  46da
  24418  46da		       a9 ce		      lda	# $CE
  24419  46dc		       85 08		      sta	COLUPF
  24420  46de				  -	      ifconst	pfres
  24421  46de				  -	      lda	#>(pfcolorlabel1134-131+pfres*pfwidth)
  24422  46de					      else
  24423  46de		       a9 fa		      lda	#>(pfcolorlabel1134-83)
  24424  46e0					      endif
  24425  46e0		       85 f1		      sta	pfcolortable+1
  24426  46e2				  -	      ifconst	pfres
  24427  46e2				  -	      lda	#<(pfcolorlabel1134-131+pfres*pfwidth)
  24428  46e2					      else
  24429  46e2		       a9 69		      lda	#<(pfcolorlabel1134-83)
  24430  46e4					      endif
  24431  46e4		       85 f0		      sta	pfcolortable
  24432  46e6				   .
  24433  46e6							; 
  24434  46e6
  24435  46e6				   .L01200		;  return thisbank
  24436  46e6
  24437  46e6		       60		      RTS
  24438  46e7				   .
  24439  46e7							; 
  24440  46e7
  24441  46e7				   .
  24442  46e7							; 
  24443  46e7
  24444  46e7				   .__1k_Color05
  24445  46e7							; __1k_Color05
  24446  46e7
  24447  46e7				   .
  24448  46e7							; 
  24449  46e7
  24450  46e7				   .L01201		;  pfcolors:
  24451  46e7
  24452  46e7		       a9 ce		      lda	# $CE
  24453  46e9		       85 08		      sta	COLUPF
  24454  46eb				  -	      ifconst	pfres
  24455  46eb				  -	      lda	#>(pfcolorlabel1134-130+pfres*pfwidth)
  24456  46eb					      else
  24457  46eb		       a9 fa		      lda	#>(pfcolorlabel1134-82)
  24458  46ed					      endif
  24459  46ed		       85 f1		      sta	pfcolortable+1
  24460  46ef				  -	      ifconst	pfres
  24461  46ef				  -	      lda	#<(pfcolorlabel1134-130+pfres*pfwidth)
  24462  46ef					      else
  24463  46ef		       a9 6a		      lda	#<(pfcolorlabel1134-82)
  24464  46f1					      endif
  24465  46f1		       85 f0		      sta	pfcolortable
  24466  46f3				   .
  24467  46f3							; 
  24468  46f3
  24469  46f3				   .L01202		;  return thisbank
  24470  46f3
  24471  46f3		       60		      RTS
  24472  46f4				   .
  24473  46f4							; 
  24474  46f4
  24475  46f4				   .
  24476  46f4							; 
  24477  46f4
  24478  46f4				   .__1k_Color06
  24479  46f4							; __1k_Color06
  24480  46f4
  24481  46f4				   .
  24482  46f4							; 
  24483  46f4
  24484  46f4				   .L01203		;  pfcolors:
  24485  46f4
  24486  46f4		       a9 ce		      lda	# $CE
  24487  46f6		       85 08		      sta	COLUPF
  24488  46f8				  -	      ifconst	pfres
  24489  46f8				  -	      lda	#>(pfcolorlabel1134-129+pfres*pfwidth)
  24490  46f8					      else
  24491  46f8		       a9 fa		      lda	#>(pfcolorlabel1134-81)
  24492  46fa					      endif
  24493  46fa		       85 f1		      sta	pfcolortable+1
  24494  46fc				  -	      ifconst	pfres
  24495  46fc				  -	      lda	#<(pfcolorlabel1134-129+pfres*pfwidth)
  24496  46fc					      else
  24497  46fc		       a9 6b		      lda	#<(pfcolorlabel1134-81)
  24498  46fe					      endif
  24499  46fe		       85 f0		      sta	pfcolortable
  24500  4700				   .
  24501  4700							; 
  24502  4700
  24503  4700				   .L01204		;  return thisbank
  24504  4700
  24505  4700		       60		      RTS
  24506  4701				   .
  24507  4701							; 
  24508  4701
  24509  4701				   .
  24510  4701							; 
  24511  4701
  24512  4701				   .__1k_Color07
  24513  4701							; __1k_Color07
  24514  4701
  24515  4701				   .
  24516  4701							; 
  24517  4701
  24518  4701				   .L01205		;  pfcolors:
  24519  4701
  24520  4701		       a9 ce		      lda	# $CE
  24521  4703		       85 08		      sta	COLUPF
  24522  4705				  -	      ifconst	pfres
  24523  4705				  -	      lda	#>(pfcolorlabel1159-132+pfres*pfwidth)
  24524  4705					      else
  24525  4705		       a9 fb		      lda	#>(pfcolorlabel1159-84)
  24526  4707					      endif
  24527  4707		       85 f1		      sta	pfcolortable+1
  24528  4709				  -	      ifconst	pfres
  24529  4709				  -	      lda	#<(pfcolorlabel1159-132+pfres*pfwidth)
  24530  4709					      else
  24531  4709		       a9 04		      lda	#<(pfcolorlabel1159-84)
  24532  470b					      endif
  24533  470b		       85 f0		      sta	pfcolortable
  24534  470d				   .
  24535  470d							; 
  24536  470d
  24537  470d				   .L01206		;  return thisbank
  24538  470d
  24539  470d		       60		      RTS
  24540  470e				   .
  24541  470e							; 
  24542  470e
  24543  470e				   .
  24544  470e							; 
  24545  470e
  24546  470e				   .__1k_Color08
  24547  470e							; __1k_Color08
  24548  470e
  24549  470e				   .
  24550  470e							; 
  24551  470e
  24552  470e				   .L01207		;  pfcolors:
  24553  470e
  24554  470e		       a9 ce		      lda	# $CE
  24555  4710		       85 08		      sta	COLUPF
  24556  4712				  -	      ifconst	pfres
  24557  4712				  -	      lda	#>(pfcolorlabel1159-131+pfres*pfwidth)
  24558  4712					      else
  24559  4712		       a9 fb		      lda	#>(pfcolorlabel1159-83)
  24560  4714					      endif
  24561  4714		       85 f1		      sta	pfcolortable+1
  24562  4716				  -	      ifconst	pfres
  24563  4716				  -	      lda	#<(pfcolorlabel1159-131+pfres*pfwidth)
  24564  4716					      else
  24565  4716		       a9 05		      lda	#<(pfcolorlabel1159-83)
  24566  4718					      endif
  24567  4718		       85 f0		      sta	pfcolortable
  24568  471a				   .
  24569  471a							; 
  24570  471a
  24571  471a				   .L01208		;  return thisbank
  24572  471a
  24573  471a		       60		      RTS
  24574  471b				   .
  24575  471b							; 
  24576  471b
  24577  471b				   .
  24578  471b							; 
  24579  471b
  24580  471b				   .__1k_Color09
  24581  471b							; __1k_Color09
  24582  471b
  24583  471b				   .
  24584  471b							; 
  24585  471b
  24586  471b				   .L01209		;  pfcolors:
  24587  471b
  24588  471b		       a9 ce		      lda	# $CE
  24589  471d		       85 08		      sta	COLUPF
  24590  471f				  -	      ifconst	pfres
  24591  471f				  -	      lda	#>(pfcolorlabel1159-130+pfres*pfwidth)
  24592  471f					      else
  24593  471f		       a9 fb		      lda	#>(pfcolorlabel1159-82)
  24594  4721					      endif
  24595  4721		       85 f1		      sta	pfcolortable+1
  24596  4723				  -	      ifconst	pfres
  24597  4723				  -	      lda	#<(pfcolorlabel1159-130+pfres*pfwidth)
  24598  4723					      else
  24599  4723		       a9 06		      lda	#<(pfcolorlabel1159-82)
  24600  4725					      endif
  24601  4725		       85 f0		      sta	pfcolortable
  24602  4727				   .
  24603  4727							; 
  24604  4727
  24605  4727				   .L01210		;  return thisbank
  24606  4727
  24607  4727		       60		      RTS
  24608  4728				   .
  24609  4728							; 
  24610  4728
  24611  4728				   .
  24612  4728							; 
  24613  4728
  24614  4728				   .__1k_Color10
  24615  4728							; __1k_Color10
  24616  4728
  24617  4728				   .
  24618  4728							; 
  24619  4728
  24620  4728				   .L01211		;  pfcolors:
  24621  4728
  24622  4728		       a9 ce		      lda	# $CE
  24623  472a		       85 08		      sta	COLUPF
  24624  472c				  -	      ifconst	pfres
  24625  472c				  -	      lda	#>(pfcolorlabel1159-129+pfres*pfwidth)
  24626  472c					      else
  24627  472c		       a9 fb		      lda	#>(pfcolorlabel1159-81)
  24628  472e					      endif
  24629  472e		       85 f1		      sta	pfcolortable+1
  24630  4730				  -	      ifconst	pfres
  24631  4730				  -	      lda	#<(pfcolorlabel1159-129+pfres*pfwidth)
  24632  4730					      else
  24633  4730		       a9 07		      lda	#<(pfcolorlabel1159-81)
  24634  4732					      endif
  24635  4732		       85 f0		      sta	pfcolortable
  24636  4734				   .
  24637  4734							; 
  24638  4734
  24639  4734				   .L01212		;  return thisbank
  24640  4734
  24641  4734		       60		      RTS
  24642  4735				   .
  24643  4735							; 
  24644  4735
  24645  4735				   .
  24646  4735							; 
  24647  4735
  24648  4735				   .__1k_Color11
  24649  4735							; __1k_Color11
  24650  4735
  24651  4735				   .
  24652  4735							; 
  24653  4735
  24654  4735				   .L01213		;  pfcolors:
  24655  4735
  24656  4735		       a9 ce		      lda	# $CE
  24657  4737		       85 08		      sta	COLUPF
  24658  4739				  -	      ifconst	pfres
  24659  4739				  -	      lda	#>(pfcolorlabel1184-132+pfres*pfwidth)
  24660  4739					      else
  24661  4739		       a9 fb		      lda	#>(pfcolorlabel1184-84)
  24662  473b					      endif
  24663  473b		       85 f1		      sta	pfcolortable+1
  24664  473d				  -	      ifconst	pfres
  24665  473d				  -	      lda	#<(pfcolorlabel1184-132+pfres*pfwidth)
  24666  473d					      else
  24667  473d		       a9 30		      lda	#<(pfcolorlabel1184-84)
  24668  473f					      endif
  24669  473f		       85 f0		      sta	pfcolortable
  24670  4741				   .
  24671  4741							; 
  24672  4741
  24673  4741				   .L01214		;  return thisbank
  24674  4741
  24675  4741		       60		      RTS
  24676  4742				   .
  24677  4742							; 
  24678  4742
  24679  4742				   .
  24680  4742							; 
  24681  4742
  24682  4742				   .
  24683  4742							; 
  24684  4742
  24685  4742				   .
  24686  4742							; 
  24687  4742
  24688  4742				   .
  24689  4742							; 
  24690  4742
  24691  4742				   .
  24692  4742							; 
  24693  4742
  24694  4742				   .
  24695  4742							; 
  24696  4742
  24697  4742				   .
  24698  4742							; 
  24699  4742
  24700  4742				   .
  24701  4742							; 
  24702  4742
  24703  4742				   .
  24704  4742							; 
  24705  4742
  24706  4742				   .
  24707  4742							; 
  24708  4742
  24709  4742				   .
  24710  4742							; 
  24711  4742
  24712  4742				   .
  24713  4742							; 
  24714  4742
  24715  4742				   .
  24716  4742							; 
  24717  4742
  24718  4742				   .L01215		;  data _SD_M_Hit
  24719  4742
  24720  4742		       4c 72 77 	      JMP	.skipL01215
  24721  4745				   _SD_M_Hit
  24722  4745		       08 06 01 	      .byte.b	8,6,1
  24723  4748
  24724  4748		       01		      .byte.b	1
  24725  4749
  24726  4749		       08 06 02 	      .byte.b	8,6,2
  24727  474c
  24728  474c		       01		      .byte.b	1
  24729  474d
  24730  474d		       06 06 01 	      .byte.b	6,6,1
  24731  4750
  24732  4750		       01		      .byte.b	1
  24733  4751
  24734  4751		       08 06 03 	      .byte.b	8,6,3
  24735  4754
  24736  4754		       01		      .byte.b	1
  24737  4755
  24738  4755		       05 06 00 	      .byte.b	5,6,0
  24739  4758
  24740  4758		       01		      .byte.b	1
  24741  4759
  24742  4759		       07 06 04 	      .byte.b	7,6,4
  24743  475c
  24744  475c		       01		      .byte.b	1
  24745  475d
  24746  475d		       07 06 05 	      .byte.b	7,6,5
  24747  4760
  24748  4760		       01		      .byte.b	1
  24749  4761
  24750  4761		       07 06 06 	      .byte.b	7,6,6
  24751  4764
  24752  4764		       01		      .byte.b	1
  24753  4765
  24754  4765		       06 06 07 	      .byte.b	6,6,7
  24755  4768
  24756  4768		       01		      .byte.b	1
  24757  4769
  24758  4769		       06 06 08 	      .byte.b	6,6,8
  24759  476c
  24760  476c		       01		      .byte.b	1
  24761  476d
  24762  476d		       06 06 09 	      .byte.b	6,6,9
  24763  4770
  24764  4770		       01		      .byte.b	1
  24765  4771
  24766  4771		       ff		      .byte.b	255
  24767  4772
  24768  4772				   .skipL01215
  24769  4772				   .
  24770  4772							; 
  24771  4772
  24772  4772				   .
  24773  4772							; 
  24774  4772
  24775  4772				   .
  24776  4772							; 
  24777  4772
  24778  4772				   .
  24779  4772							; 
  24780  4772
  24781  4772				   .
  24782  4772							; 
  24783  4772
  24784  4772				   .
  24785  4772							; 
  24786  4772
  24787  4772				   .
  24788  4772							; 
  24789  4772
  24790  4772				   .
  24791  4772							; 
  24792  4772
  24793  4772				   .L01216		;  data _SD_M_H_02
  24794  4772
  24795  4772		       4c a6 77 	      JMP	.skipL01216
  24796  4775				   _SD_M_H_02
  24797  4775		       08 06 1e 	      .byte.b	8,6,30
  24798  4778
  24799  4778		       01		      .byte.b	1
  24800  4779
  24801  4779		       08 06 1f 	      .byte.b	8,6,31
  24802  477c
  24803  477c		       01		      .byte.b	1
  24804  477d
  24805  477d		       06 06 00 	      .byte.b	6,6,0
  24806  4780
  24807  4780		       01		      .byte.b	1
  24808  4781
  24809  4781		       08 06 01 	      .byte.b	8,6,1
  24810  4784
  24811  4784		       01		      .byte.b	1
  24812  4785
  24813  4785		       08 06 02 	      .byte.b	8,6,2
  24814  4788
  24815  4788		       01		      .byte.b	1
  24816  4789
  24817  4789		       08 06 03 	      .byte.b	8,6,3
  24818  478c
  24819  478c		       01		      .byte.b	1
  24820  478d
  24821  478d		       08 06 04 	      .byte.b	8,6,4
  24822  4790
  24823  4790		       01		      .byte.b	1
  24824  4791
  24825  4791		       08 06 05 	      .byte.b	8,6,5
  24826  4794
  24827  4794		       01		      .byte.b	1
  24828  4795
  24829  4795		       08 06 06 	      .byte.b	8,6,6
  24830  4798
  24831  4798		       01		      .byte.b	1
  24832  4799
  24833  4799		       07 06 07 	      .byte.b	7,6,7
  24834  479c
  24835  479c		       01		      .byte.b	1
  24836  479d
  24837  479d		       07 06 08 	      .byte.b	7,6,8
  24838  47a0
  24839  47a0		       01		      .byte.b	1
  24840  47a1
  24841  47a1		       06 06 09 	      .byte.b	6,6,9
  24842  47a4
  24843  47a4		       01		      .byte.b	1
  24844  47a5
  24845  47a5		       ff		      .byte.b	255
  24846  47a6
  24847  47a6				   .skipL01216
  24848  47a6				   .
  24849  47a6							; 
  24850  47a6
  24851  47a6				   .
  24852  47a6							; 
  24853  47a6
  24854  47a6				   .
  24855  47a6							; 
  24856  47a6
  24857  47a6				   .
  24858  47a6							; 
  24859  47a6
  24860  47a6				   .
  24861  47a6							; 
  24862  47a6
  24863  47a6				   .
  24864  47a6							; 
  24865  47a6
  24866  47a6				   .
  24867  47a6							; 
  24868  47a6
  24869  47a6				   .
  24870  47a6							; 
  24871  47a6
  24872  47a6				   .L01217		;  data _SD_Ouch
  24873  47a6
  24874  47a6		       4c da 77 	      JMP	.skipL01217
  24875  47a9				   _SD_Ouch
  24876  47a9		       08 0c 11 	      .byte.b	8,12,17
  24877  47ac
  24878  47ac		       01		      .byte.b	1
  24879  47ad
  24880  47ad		       08 0c 12 	      .byte.b	8,12,18
  24881  47b0
  24882  47b0		       01		      .byte.b	1
  24883  47b1
  24884  47b1		       08 0c 11 	      .byte.b	8,12,17
  24885  47b4
  24886  47b4		       01		      .byte.b	1
  24887  47b5
  24888  47b5		       08 0c 13 	      .byte.b	8,12,19
  24889  47b8
  24890  47b8		       01		      .byte.b	1
  24891  47b9
  24892  47b9		       08 0c 11 	      .byte.b	8,12,17
  24893  47bc
  24894  47bc		       01		      .byte.b	1
  24895  47bd
  24896  47bd		       08 0c 14 	      .byte.b	8,12,20
  24897  47c0
  24898  47c0		       01		      .byte.b	1
  24899  47c1
  24900  47c1		       08 0c 15 	      .byte.b	8,12,21
  24901  47c4
  24902  47c4		       01		      .byte.b	1
  24903  47c5
  24904  47c5		       08 0c 16 	      .byte.b	8,12,22
  24905  47c8
  24906  47c8		       01		      .byte.b	1
  24907  47c9
  24908  47c9		       08 0c 17 	      .byte.b	8,12,23
  24909  47cc
  24910  47cc		       01		      .byte.b	1
  24911  47cd
  24912  47cd		       08 0c 18 	      .byte.b	8,12,24
  24913  47d0
  24914  47d0		       01		      .byte.b	1
  24915  47d1
  24916  47d1		       06 0c 19 	      .byte.b	6,12,25
  24917  47d4
  24918  47d4		       01		      .byte.b	1
  24919  47d5
  24920  47d5		       04 0c 1a 	      .byte.b	4,12,26
  24921  47d8
  24922  47d8		       01		      .byte.b	1
  24923  47d9
  24924  47d9		       ff		      .byte.b	255
  24925  47da
  24926  47da				   .skipL01217
  24927  47da				   .
  24928  47da							; 
  24929  47da
  24930  47da				   .
  24931  47da							; 
  24932  47da
  24933  47da				   .
  24934  47da							; 
  24935  47da
  24936  47da				   .
  24937  47da							; 
  24938  47da
  24939  47da				   .
  24940  47da							; 
  24941  47da
  24942  47da				   .
  24943  47da							; 
  24944  47da
  24945  47da				   .
  24946  47da							; 
  24947  47da
  24948  47da				   .
  24949  47da							; 
  24950  47da
  24951  47da				   .L01218		;  data _SD_Shoot
  24952  47da
  24953  47da		       4c 0a 78 	      JMP	.skipL01218
  24954  47dd				   _SD_Shoot
  24955  47dd		       08 0e 00 	      .byte.b	8,14,0
  24956  47e0
  24957  47e0		       01		      .byte.b	1
  24958  47e1
  24959  47e1		       08 0e 01 	      .byte.b	8,14,1
  24960  47e4
  24961  47e4		       01		      .byte.b	1
  24962  47e5
  24963  47e5		       08 0e 00 	      .byte.b	8,14,0
  24964  47e8
  24965  47e8		       01		      .byte.b	1
  24966  47e9
  24967  47e9		       08 0e 02 	      .byte.b	8,14,2
  24968  47ec
  24969  47ec		       01		      .byte.b	1
  24970  47ed
  24971  47ed		       08 0e 01 	      .byte.b	8,14,1
  24972  47f0
  24973  47f0		       01		      .byte.b	1
  24974  47f1
  24975  47f1		       07 0e 03 	      .byte.b	7,14,3
  24976  47f4
  24977  47f4		       01		      .byte.b	1
  24978  47f5
  24979  47f5		       06 0e 02 	      .byte.b	6,14,2
  24980  47f8
  24981  47f8		       01		      .byte.b	1
  24982  47f9
  24983  47f9		       05 0e 04 	      .byte.b	5,14,4
  24984  47fc
  24985  47fc		       01		      .byte.b	1
  24986  47fd
  24987  47fd		       04 0e 03 	      .byte.b	4,14,3
  24988  4800
  24989  4800		       01		      .byte.b	1
  24990  4801
  24991  4801		       03 0e 05 	      .byte.b	3,14,5
  24992  4804
  24993  4804		       01		      .byte.b	1
  24994  4805
  24995  4805		       02 0e 04 	      .byte.b	2,14,4
  24996  4808
  24997  4808		       04		      .byte.b	4
  24998  4809
  24999  4809		       ff		      .byte.b	255
  25000  480a
  25001  480a				   .skipL01218
  25002  480a				   .
  25003  480a							; 
  25004  480a
  25005  480a				   .
  25006  480a							; 
  25007  480a
  25008  480a				   .
  25009  480a							; 
  25010  480a
  25011  480a				   .
  25012  480a							; 
  25013  480a
  25014  480a				   .
  25015  480a							; 
  25016  480a
  25017  480a				   .
  25018  480a							; 
  25019  480a
  25020  480a				   .
  25021  480a							; 
  25022  480a
  25023  480a				   .
  25024  480a							; 
  25025  480a
  25026  480a				   .L01219		;  data _SD_Grab
  25027  480a
  25028  480a		       4c 32 78 	      JMP	.skipL01219
  25029  480d				   _SD_Grab
  25030  480d		       02 0e 05 	      .byte.b	2,14,5
  25031  4810
  25032  4810		       01		      .byte.b	1
  25033  4811
  25034  4811		       0e 0e 05 	      .byte.b	14,14,5
  25035  4814
  25036  4814		       08		      .byte.b	8
  25037  4815
  25038  4815		       02 0e 05 	      .byte.b	2,14,5
  25039  4818
  25040  4818		       08		      .byte.b	8
  25041  4819
  25042  4819		       02 0e 03 	      .byte.b	2,14,3
  25043  481c
  25044  481c		       01		      .byte.b	1
  25045  481d
  25046  481d		       0e 0e 03 	      .byte.b	14,14,3
  25047  4820
  25048  4820		       0c		      .byte.b	12
  25049  4821
  25050  4821		       02 0e 03 	      .byte.b	2,14,3
  25051  4824
  25052  4824		       08		      .byte.b	8
  25053  4825
  25054  4825		       02 0e 04 	      .byte.b	2,14,4
  25055  4828
  25056  4828		       01		      .byte.b	1
  25057  4829
  25058  4829		       0e 0e 04 	      .byte.b	14,14,4
  25059  482c
  25060  482c		       0c		      .byte.b	12
  25061  482d
  25062  482d		       02 0e 04 	      .byte.b	2,14,4
  25063  4830
  25064  4830		       18		      .byte.b	24
  25065  4831
  25066  4831		       ff		      .byte.b	255
  25067  4832
  25068  4832				   .skipL01219
  25069  4832				   .
  25070  4832							; 
  25071  4832
  25072  4832				   .
  25073  4832							; 
  25074  4832
  25075  4832				   .
  25076  4832							; 
  25077  4832
  25078  4832				   .
  25079  4832							; 
  25080  4832
  25081  4832				   .
  25082  4832							; 
  25083  4832
  25084  4832				   .
  25085  4832							; 
  25086  4832
  25087  4832				   .
  25088  4832							; 
  25089  4832
  25090  4832				   .
  25091  4832							; 
  25092  4832
  25093  4832				   .L01220		;  data _SD_Wroth
  25094  4832
  25095  4832		       4c c2 78 	      JMP	.skipL01220
  25096  4835				   _SD_Wroth
  25097  4835		       06 04 12 	      .byte.b	6,4,18
  25098  4838
  25099  4838		       01		      .byte.b	1
  25100  4839
  25101  4839		       08 04 14 	      .byte.b	8,4,20
  25102  483c
  25103  483c		       01		      .byte.b	1
  25104  483d
  25105  483d		       08 04 13 	      .byte.b	8,4,19
  25106  4840
  25107  4840		       01		      .byte.b	1
  25108  4841
  25109  4841		       08 04 15 	      .byte.b	8,4,21
  25110  4844
  25111  4844		       01		      .byte.b	1
  25112  4845
  25113  4845		       08 04 14 	      .byte.b	8,4,20
  25114  4848
  25115  4848		       01		      .byte.b	1
  25116  4849
  25117  4849		       08 04 16 	      .byte.b	8,4,22
  25118  484c
  25119  484c		       01		      .byte.b	1
  25120  484d
  25121  484d		       06 04 15 	      .byte.b	6,4,21
  25122  4850
  25123  4850		       01		      .byte.b	1
  25124  4851
  25125  4851		       08 04 11 	      .byte.b	8,4,17
  25126  4854
  25127  4854		       01		      .byte.b	1
  25128  4855
  25129  4855		       08 04 12 	      .byte.b	8,4,18
  25130  4858
  25131  4858		       01		      .byte.b	1
  25132  4859
  25133  4859		       08 04 11 	      .byte.b	8,4,17
  25134  485c
  25135  485c		       01		      .byte.b	1
  25136  485d
  25137  485d		       08 04 13 	      .byte.b	8,4,19
  25138  4860
  25139  4860		       01		      .byte.b	1
  25140  4861
  25141  4861		       07 04 12 	      .byte.b	7,4,18
  25142  4864
  25143  4864		       01		      .byte.b	1
  25144  4865
  25145  4865		       07 04 14 	      .byte.b	7,4,20
  25146  4868
  25147  4868		       01		      .byte.b	1
  25148  4869
  25149  4869		       07 04 13 	      .byte.b	7,4,19
  25150  486c
  25151  486c		       01		      .byte.b	1
  25152  486d
  25153  486d		       07 04 15 	      .byte.b	7,4,21
  25154  4870
  25155  4870		       01		      .byte.b	1
  25156  4871
  25157  4871		       06 04 14 	      .byte.b	6,4,20
  25158  4874
  25159  4874		       01		      .byte.b	1
  25160  4875
  25161  4875		       06 04 16 	      .byte.b	6,4,22
  25162  4878
  25163  4878		       01		      .byte.b	1
  25164  4879
  25165  4879		       06 04 15 	      .byte.b	6,4,21
  25166  487c
  25167  487c		       01		      .byte.b	1
  25168  487d
  25169  487d		       06 04 17 	      .byte.b	6,4,23
  25170  4880
  25171  4880		       01		      .byte.b	1
  25172  4881
  25173  4881		       05 04 16 	      .byte.b	5,4,22
  25174  4884
  25175  4884		       01		      .byte.b	1
  25176  4885
  25177  4885		       05 04 18 	      .byte.b	5,4,24
  25178  4888
  25179  4888		       01		      .byte.b	1
  25180  4889
  25181  4889		       05 04 17 	      .byte.b	5,4,23
  25182  488c
  25183  488c		       01		      .byte.b	1
  25184  488d
  25185  488d		       05 04 19 	      .byte.b	5,4,25
  25186  4890
  25187  4890		       01		      .byte.b	1
  25188  4891
  25189  4891		       04 04 18 	      .byte.b	4,4,24
  25190  4894
  25191  4894		       01		      .byte.b	1
  25192  4895
  25193  4895		       04 04 1a 	      .byte.b	4,4,26
  25194  4898
  25195  4898		       01		      .byte.b	1
  25196  4899
  25197  4899		       04 04 19 	      .byte.b	4,4,25
  25198  489c
  25199  489c		       01		      .byte.b	1
  25200  489d
  25201  489d		       04 04 1b 	      .byte.b	4,4,27
  25202  48a0
  25203  48a0		       01		      .byte.b	1
  25204  48a1
  25205  48a1		       03 04 1a 	      .byte.b	3,4,26
  25206  48a4
  25207  48a4		       01		      .byte.b	1
  25208  48a5
  25209  48a5		       03 04 1c 	      .byte.b	3,4,28
  25210  48a8
  25211  48a8		       01		      .byte.b	1
  25212  48a9
  25213  48a9		       03 04 1b 	      .byte.b	3,4,27
  25214  48ac
  25215  48ac		       01		      .byte.b	1
  25216  48ad
  25217  48ad		       03 04 1d 	      .byte.b	3,4,29
  25218  48b0
  25219  48b0		       01		      .byte.b	1
  25220  48b1
  25221  48b1		       02 04 1c 	      .byte.b	2,4,28
  25222  48b4
  25223  48b4		       01		      .byte.b	1
  25224  48b5
  25225  48b5		       02 04 1e 	      .byte.b	2,4,30
  25226  48b8
  25227  48b8		       01		      .byte.b	1
  25228  48b9
  25229  48b9		       01 04 1f 	      .byte.b	1,4,31
  25230  48bc
  25231  48bc		       01		      .byte.b	1
  25232  48bd
  25233  48bd		       01 04 1e 	      .byte.b	1,4,30
  25234  48c0
  25235  48c0		       01		      .byte.b	1
  25236  48c1
  25237  48c1		       ff		      .byte.b	255
  25238  48c2
  25239  48c2				   .skipL01220
  25240  48c2				   .
  25241  48c2							; 
  25242  48c2
  25243  48c2				   .
  25244  48c2							; 
  25245  48c2
  25246  48c2				   .
  25247  48c2							; 
  25248  48c2
  25249  48c2				   .
  25250  48c2							; 
  25251  48c2
  25252  48c2				   .
  25253  48c2							; 
  25254  48c2
  25255  48c2				   .
  25256  48c2							; 
  25257  48c2
  25258  48c2				   .
  25259  48c2							; 
  25260  48c2
  25261  48c2				   .
  25262  48c2							; 
  25263  48c2
  25264  48c2				   .L01221		;  data _SD_Ship_Drop_In
  25265  48c2
  25266  48c2		       4c 56 79 	      JMP	.skipL01221
  25267  48c5				   _SD_Ship_Drop_In
  25268  48c5		       0c 06 1e 	      .byte.b	12,6,30
  25269  48c8
  25270  48c8		       01		      .byte.b	1
  25271  48c9
  25272  48c9		       09 0e 1f 	      .byte.b	9,14,31
  25273  48cc
  25274  48cc		       01		      .byte.b	1
  25275  48cd
  25276  48cd		       09 0e 00 	      .byte.b	9,14,0
  25277  48d0
  25278  48d0		       01		      .byte.b	1
  25279  48d1
  25280  48d1		       08 06 01 	      .byte.b	8,6,1
  25281  48d4
  25282  48d4		       01		      .byte.b	1
  25283  48d5
  25284  48d5		       06 06 02 	      .byte.b	6,6,2
  25285  48d8
  25286  48d8		       01		      .byte.b	1
  25287  48d9
  25288  48d9		       03 06 03 	      .byte.b	3,6,3
  25289  48dc
  25290  48dc		       01		      .byte.b	1
  25291  48dd
  25292  48dd		       03 06 04 	      .byte.b	3,6,4
  25293  48e0
  25294  48e0		       01		      .byte.b	1
  25295  48e1
  25296  48e1		       03 06 03 	      .byte.b	3,6,3
  25297  48e4
  25298  48e4		       01		      .byte.b	1
  25299  48e5
  25300  48e5		       02 06 05 	      .byte.b	2,6,5
  25301  48e8
  25302  48e8		       01		      .byte.b	1
  25303  48e9
  25304  48e9		       01 06 06 	      .byte.b	1,6,6
  25305  48ec
  25306  48ec		       01		      .byte.b	1
  25307  48ed
  25308  48ed		       0c 06 07 	      .byte.b	12,6,7
  25309  48f0
  25310  48f0		       01		      .byte.b	1
  25311  48f1
  25312  48f1		       0c 06 08 	      .byte.b	12,6,8
  25313  48f4
  25314  48f4		       01		      .byte.b	1
  25315  48f5
  25316  48f5		       0b 06 09 	      .byte.b	11,6,9
  25317  48f8
  25318  48f8		       01		      .byte.b	1
  25319  48f9
  25320  48f9		       09 06 0a 	      .byte.b	9,6,10
  25321  48fc
  25322  48fc		       01		      .byte.b	1
  25323  48fd
  25324  48fd		       06 06 0b 	      .byte.b	6,6,11
  25325  4900
  25326  4900		       01		      .byte.b	1
  25327  4901
  25328  4901		       06 06 0c 	      .byte.b	6,6,12
  25329  4904
  25330  4904		       01		      .byte.b	1
  25331  4905
  25332  4905		       05 06 0d 	      .byte.b	5,6,13
  25333  4908
  25334  4908		       01		      .byte.b	1
  25335  4909
  25336  4909		       03 06 0e 	      .byte.b	3,6,14
  25337  490c
  25338  490c		       01		      .byte.b	1
  25339  490d
  25340  490d		       04 06 0d 	      .byte.b	4,6,13
  25341  4910
  25342  4910		       01		      .byte.b	1
  25343  4911
  25344  4911		       04 06 0c 	      .byte.b	4,6,12
  25345  4914
  25346  4914		       01		      .byte.b	1
  25347  4915
  25348  4915		       04 06 0b 	      .byte.b	4,6,11
  25349  4918
  25350  4918		       01		      .byte.b	1
  25351  4919
  25352  4919		       04 06 0a 	      .byte.b	4,6,10
  25353  491c
  25354  491c		       01		      .byte.b	1
  25355  491d
  25356  491d		       05 06 09 	      .byte.b	5,6,9
  25357  4920
  25358  4920		       01		      .byte.b	1
  25359  4921
  25360  4921		       05 06 08 	      .byte.b	5,6,8
  25361  4924
  25362  4924		       01		      .byte.b	1
  25363  4925
  25364  4925		       05 06 07 	      .byte.b	5,6,7
  25365  4928
  25366  4928		       01		      .byte.b	1
  25367  4929
  25368  4929		       05 06 06 	      .byte.b	5,6,6
  25369  492c
  25370  492c		       01		      .byte.b	1
  25371  492d
  25372  492d		       05 06 07 	      .byte.b	5,6,7
  25373  4930
  25374  4930		       01		      .byte.b	1
  25375  4931
  25376  4931		       06 06 05 	      .byte.b	6,6,5
  25377  4934
  25378  4934		       01		      .byte.b	1
  25379  4935
  25380  4935		       06 06 04 	      .byte.b	6,6,4
  25381  4938
  25382  4938		       01		      .byte.b	1
  25383  4939
  25384  4939		       06 06 05 	      .byte.b	6,6,5
  25385  493c
  25386  493c		       01		      .byte.b	1
  25387  493d
  25388  493d		       06 06 03 	      .byte.b	6,6,3
  25389  4940
  25390  4940		       01		      .byte.b	1
  25391  4941
  25392  4941		       06 06 02 	      .byte.b	6,6,2
  25393  4944
  25394  4944		       01		      .byte.b	1
  25395  4945
  25396  4945		       07 06 01 	      .byte.b	7,6,1
  25397  4948
  25398  4948		       01		      .byte.b	1
  25399  4949
  25400  4949		       07 0e 00 	      .byte.b	7,14,0
  25401  494c
  25402  494c		       01		      .byte.b	1
  25403  494d
  25404  494d		       07 0e 1f 	      .byte.b	7,14,31
  25405  4950
  25406  4950		       01		      .byte.b	1
  25407  4951
  25408  4951		       02 0e 1f 	      .byte.b	2,14,31
  25409  4954
  25410  4954		       01		      .byte.b	1
  25411  4955
  25412  4955		       ff		      .byte.b	255
  25413  4956
  25414  4956				   .skipL01221
  25415  4956				   .
  25416  4956							; 
  25417  4956
  25418  4956				   .
  25419  4956							; 
  25420  4956
  25421  4956				   .
  25422  4956							; 
  25423  4956
  25424  4956				   .
  25425  4956							; 
  25426  4956
  25427  4956				   .
  25428  4956							; 
  25429  4956
  25430  4956				   .
  25431  4956							; 
  25432  4956
  25433  4956				   .
  25434  4956							; 
  25435  4956
  25436  4956				   .
  25437  4956							; 
  25438  4956
  25439  4956				   .L01222		;  data _SD_1000_Health
  25440  4956
  25441  4956		       4c 2e 7a 	      JMP	.skipL01222
  25442  4959				   _SD_1000_Health
  25443  4959		       08 08 1a 	      .byte.b	8,8,26
  25444  495c
  25445  495c		       01		      .byte.b	1
  25446  495d
  25447  495d		       08 08 19 	      .byte.b	8,8,25
  25448  4960
  25449  4960		       01		      .byte.b	1
  25450  4961
  25451  4961		       08 08 1a 	      .byte.b	8,8,26
  25452  4964
  25453  4964		       01		      .byte.b	1
  25454  4965
  25455  4965		       08 08 18 	      .byte.b	8,8,24
  25456  4968
  25457  4968		       01		      .byte.b	1
  25458  4969
  25459  4969		       08 08 19 	      .byte.b	8,8,25
  25460  496c
  25461  496c		       01		      .byte.b	1
  25462  496d
  25463  496d		       08 08 17 	      .byte.b	8,8,23
  25464  4970
  25465  4970		       01		      .byte.b	1
  25466  4971
  25467  4971		       08 08 18 	      .byte.b	8,8,24
  25468  4974
  25469  4974		       01		      .byte.b	1
  25470  4975
  25471  4975		       08 08 16 	      .byte.b	8,8,22
  25472  4978
  25473  4978		       01		      .byte.b	1
  25474  4979
  25475  4979		       08 08 17 	      .byte.b	8,8,23
  25476  497c
  25477  497c		       01		      .byte.b	1
  25478  497d
  25479  497d		       08 08 15 	      .byte.b	8,8,21
  25480  4980
  25481  4980		       01		      .byte.b	1
  25482  4981
  25483  4981		       08 08 16 	      .byte.b	8,8,22
  25484  4984
  25485  4984		       01		      .byte.b	1
  25486  4985
  25487  4985		       08 08 14 	      .byte.b	8,8,20
  25488  4988
  25489  4988		       01		      .byte.b	1
  25490  4989
  25491  4989		       08 08 15 	      .byte.b	8,8,21
  25492  498c
  25493  498c		       01		      .byte.b	1
  25494  498d
  25495  498d		       08 08 13 	      .byte.b	8,8,19
  25496  4990
  25497  4990		       01		      .byte.b	1
  25498  4991
  25499  4991		       08 08 14 	      .byte.b	8,8,20
  25500  4994
  25501  4994		       01		      .byte.b	1
  25502  4995
  25503  4995		       08 08 12 	      .byte.b	8,8,18
  25504  4998
  25505  4998		       01		      .byte.b	1
  25506  4999
  25507  4999		       08 08 13 	      .byte.b	8,8,19
  25508  499c
  25509  499c		       01		      .byte.b	1
  25510  499d
  25511  499d		       08 08 11 	      .byte.b	8,8,17
  25512  49a0
  25513  49a0		       01		      .byte.b	1
  25514  49a1
  25515  49a1		       08 08 12 	      .byte.b	8,8,18
  25516  49a4
  25517  49a4		       01		      .byte.b	1
  25518  49a5
  25519  49a5		       08 08 10 	      .byte.b	8,8,16
  25520  49a8
  25521  49a8		       01		      .byte.b	1
  25522  49a9
  25523  49a9		       08 08 11 	      .byte.b	8,8,17
  25524  49ac
  25525  49ac		       01		      .byte.b	1
  25526  49ad
  25527  49ad		       08 08 0f 	      .byte.b	8,8,15
  25528  49b0
  25529  49b0		       01		      .byte.b	1
  25530  49b1
  25531  49b1		       08 08 10 	      .byte.b	8,8,16
  25532  49b4
  25533  49b4		       01		      .byte.b	1
  25534  49b5
  25535  49b5		       08 08 0e 	      .byte.b	8,8,14
  25536  49b8
  25537  49b8		       01		      .byte.b	1
  25538  49b9
  25539  49b9		       08 08 0f 	      .byte.b	8,8,15
  25540  49bc
  25541  49bc		       01		      .byte.b	1
  25542  49bd
  25543  49bd		       08 08 0d 	      .byte.b	8,8,13
  25544  49c0
  25545  49c0		       01		      .byte.b	1
  25546  49c1
  25547  49c1		       08 08 0e 	      .byte.b	8,8,14
  25548  49c4
  25549  49c4		       01		      .byte.b	1
  25550  49c5
  25551  49c5		       08 08 0c 	      .byte.b	8,8,12
  25552  49c8
  25553  49c8		       01		      .byte.b	1
  25554  49c9
  25555  49c9		       08 08 0d 	      .byte.b	8,8,13
  25556  49cc
  25557  49cc		       01		      .byte.b	1
  25558  49cd
  25559  49cd		       08 08 0b 	      .byte.b	8,8,11
  25560  49d0
  25561  49d0		       01		      .byte.b	1
  25562  49d1
  25563  49d1		       08 08 0c 	      .byte.b	8,8,12
  25564  49d4
  25565  49d4		       01		      .byte.b	1
  25566  49d5
  25567  49d5		       08 08 0a 	      .byte.b	8,8,10
  25568  49d8
  25569  49d8		       01		      .byte.b	1
  25570  49d9
  25571  49d9		       08 08 0b 	      .byte.b	8,8,11
  25572  49dc
  25573  49dc		       01		      .byte.b	1
  25574  49dd
  25575  49dd		       08 08 09 	      .byte.b	8,8,9
  25576  49e0
  25577  49e0		       01		      .byte.b	1
  25578  49e1
  25579  49e1		       08 08 0a 	      .byte.b	8,8,10
  25580  49e4
  25581  49e4		       01		      .byte.b	1
  25582  49e5
  25583  49e5		       08 08 08 	      .byte.b	8,8,8
  25584  49e8
  25585  49e8		       01		      .byte.b	1
  25586  49e9
  25587  49e9		       08 08 09 	      .byte.b	8,8,9
  25588  49ec
  25589  49ec		       01		      .byte.b	1
  25590  49ed
  25591  49ed		       08 08 07 	      .byte.b	8,8,7
  25592  49f0
  25593  49f0		       01		      .byte.b	1
  25594  49f1
  25595  49f1		       08 08 08 	      .byte.b	8,8,8
  25596  49f4
  25597  49f4		       01		      .byte.b	1
  25598  49f5
  25599  49f5		       08 08 06 	      .byte.b	8,8,6
  25600  49f8
  25601  49f8		       01		      .byte.b	1
  25602  49f9
  25603  49f9		       08 08 07 	      .byte.b	8,8,7
  25604  49fc
  25605  49fc		       01		      .byte.b	1
  25606  49fd
  25607  49fd		       08 08 05 	      .byte.b	8,8,5
  25608  4a00
  25609  4a00		       01		      .byte.b	1
  25610  4a01
  25611  4a01		       08 08 06 	      .byte.b	8,8,6
  25612  4a04
  25613  4a04		       01		      .byte.b	1
  25614  4a05
  25615  4a05		       08 08 04 	      .byte.b	8,8,4
  25616  4a08
  25617  4a08		       01		      .byte.b	1
  25618  4a09
  25619  4a09		       08 08 05 	      .byte.b	8,8,5
  25620  4a0c
  25621  4a0c		       01		      .byte.b	1
  25622  4a0d
  25623  4a0d		       08 08 03 	      .byte.b	8,8,3
  25624  4a10
  25625  4a10		       01		      .byte.b	1
  25626  4a11
  25627  4a11		       08 08 04 	      .byte.b	8,8,4
  25628  4a14
  25629  4a14		       01		      .byte.b	1
  25630  4a15
  25631  4a15		       08 08 02 	      .byte.b	8,8,2
  25632  4a18
  25633  4a18		       01		      .byte.b	1
  25634  4a19
  25635  4a19		       08 08 03 	      .byte.b	8,8,3
  25636  4a1c
  25637  4a1c		       01		      .byte.b	1
  25638  4a1d
  25639  4a1d		       08 08 01 	      .byte.b	8,8,1
  25640  4a20
  25641  4a20		       01		      .byte.b	1
  25642  4a21
  25643  4a21		       08 08 02 	      .byte.b	8,8,2
  25644  4a24
  25645  4a24		       01		      .byte.b	1
  25646  4a25
  25647  4a25		       08 08 00 	      .byte.b	8,8,0
  25648  4a28
  25649  4a28		       01		      .byte.b	1
  25650  4a29
  25651  4a29		       08 08 01 	      .byte.b	8,8,1
  25652  4a2c
  25653  4a2c		       01		      .byte.b	1
  25654  4a2d
  25655  4a2d		       ff		      .byte.b	255
  25656  4a2e
  25657  4a2e				   .skipL01222
  25658  4a2e				   .
  25659  4a2e							; 
  25660  4a2e
  25661  4a2e				   .
  25662  4a2e							; 
  25663  4a2e
  25664  4a2e				   .
  25665  4a2e							; 
  25666  4a2e
  25667  4a2e				   .
  25668  4a2e							; 
  25669  4a2e
  25670  4a2e				   .
  25671  4a2e							; 
  25672  4a2e
  25673  4a2e				   .
  25674  4a2e							; 
  25675  4a2e
  25676  4a2e				   .
  25677  4a2e							; 
  25678  4a2e
  25679  4a2e				   .
  25680  4a2e							; 
  25681  4a2e
  25682  4a2e				   .L01223		;  data _SD_Bonus_Get
  25683  4a2e
  25684  4a2e		       4c 9a 7a 	      JMP	.skipL01223
  25685  4a31				   _SD_Bonus_Get
  25686  4a31		       08 06 1d 	      .byte.b	8,6,29
  25687  4a34
  25688  4a34		       01		      .byte.b	1
  25689  4a35
  25690  4a35		       06 06 1e 	      .byte.b	6,6,30
  25691  4a38
  25692  4a38		       01		      .byte.b	1
  25693  4a39
  25694  4a39		       08 06 1f 	      .byte.b	8,6,31
  25695  4a3c
  25696  4a3c		       01		      .byte.b	1
  25697  4a3d
  25698  4a3d		       08 06 00 	      .byte.b	8,6,0
  25699  4a40
  25700  4a40		       01		      .byte.b	1
  25701  4a41
  25702  4a41		       08 06 01 	      .byte.b	8,6,1
  25703  4a44
  25704  4a44		       01		      .byte.b	1
  25705  4a45
  25706  4a45		       06 06 00 	      .byte.b	6,6,0
  25707  4a48
  25708  4a48		       01		      .byte.b	1
  25709  4a49
  25710  4a49		       08 06 02 	      .byte.b	8,6,2
  25711  4a4c
  25712  4a4c		       01		      .byte.b	1
  25713  4a4d
  25714  4a4d		       08 06 01 	      .byte.b	8,6,1
  25715  4a50
  25716  4a50		       01		      .byte.b	1
  25717  4a51
  25718  4a51		       08 06 03 	      .byte.b	8,6,3
  25719  4a54
  25720  4a54		       01		      .byte.b	1
  25721  4a55
  25722  4a55		       08 06 02 	      .byte.b	8,6,2
  25723  4a58
  25724  4a58		       01		      .byte.b	1
  25725  4a59
  25726  4a59		       07 06 04 	      .byte.b	7,6,4
  25727  4a5c
  25728  4a5c		       01		      .byte.b	1
  25729  4a5d
  25730  4a5d		       07 06 03 	      .byte.b	7,6,3
  25731  4a60
  25732  4a60		       01		      .byte.b	1
  25733  4a61
  25734  4a61		       06 06 05 	      .byte.b	6,6,5
  25735  4a64
  25736  4a64		       01		      .byte.b	1
  25737  4a65
  25738  4a65		       06 06 04 	      .byte.b	6,6,4
  25739  4a68
  25740  4a68		       01		      .byte.b	1
  25741  4a69
  25742  4a69		       05 06 06 	      .byte.b	5,6,6
  25743  4a6c
  25744  4a6c		       01		      .byte.b	1
  25745  4a6d
  25746  4a6d		       04 06 05 	      .byte.b	4,6,5
  25747  4a70
  25748  4a70		       01		      .byte.b	1
  25749  4a71
  25750  4a71		       04 06 07 	      .byte.b	4,6,7
  25751  4a74
  25752  4a74		       01		      .byte.b	1
  25753  4a75
  25754  4a75		       05 06 06 	      .byte.b	5,6,6
  25755  4a78
  25756  4a78		       01		      .byte.b	1
  25757  4a79
  25758  4a79		       05 06 05 	      .byte.b	5,6,5
  25759  4a7c
  25760  4a7c		       01		      .byte.b	1
  25761  4a7d
  25762  4a7d		       06 06 04 	      .byte.b	6,6,4
  25763  4a80
  25764  4a80		       01		      .byte.b	1
  25765  4a81
  25766  4a81		       06 06 05 	      .byte.b	6,6,5
  25767  4a84
  25768  4a84		       01		      .byte.b	1
  25769  4a85
  25770  4a85		       07 06 03 	      .byte.b	7,6,3
  25771  4a88
  25772  4a88		       01		      .byte.b	1
  25773  4a89
  25774  4a89		       07 06 02 	      .byte.b	7,6,2
  25775  4a8c
  25776  4a8c		       01		      .byte.b	1
  25777  4a8d
  25778  4a8d		       06 06 01 	      .byte.b	6,6,1
  25779  4a90
  25780  4a90		       01		      .byte.b	1
  25781  4a91
  25782  4a91		       03 06 02 	      .byte.b	3,6,2
  25783  4a94
  25784  4a94		       01		      .byte.b	1
  25785  4a95
  25786  4a95		       02 06 00 	      .byte.b	2,6,0
  25787  4a98
  25788  4a98		       01		      .byte.b	1
  25789  4a99
  25790  4a99		       ff		      .byte.b	255
  25791  4a9a
  25792  4a9a				   .skipL01223
  25793  4a9a				   .
  25794  4a9a							; 
  25795  4a9a
  25796  4a9a				   .
  25797  4a9a							; 
  25798  4a9a
  25799  4a9a				   .
  25800  4a9a							; 
  25801  4a9a
  25802  4a9a				   .
  25803  4a9a							; 
  25804  4a9a
  25805  4a9a				   .
  25806  4a9a							; 
  25807  4a9a
  25808  4a9a				   .
  25809  4a9a							; 
  25810  4a9a
  25811  4a9a				   .
  25812  4a9a							; 
  25813  4a9a
  25814  4a9a				   .
  25815  4a9a							; 
  25816  4a9a
  25817  4a9a				   .L01224		;  data _SD_Health_Can
  25818  4a9a
  25819  4a9a		       4c fe 7a 	      JMP	.skipL01224
  25820  4a9d				   _SD_Health_Can
  25821  4a9d		       08 04 1a 	      .byte.b	8,4,26
  25822  4aa0
  25823  4aa0		       02		      .byte.b	2
  25824  4aa1
  25825  4aa1		       08 04 1a 	      .byte.b	8,4,26
  25826  4aa4
  25827  4aa4		       02		      .byte.b	2
  25828  4aa5
  25829  4aa5		       01 04 1a 	      .byte.b	1,4,26
  25830  4aa8
  25831  4aa8		       01		      .byte.b	1
  25832  4aa9
  25833  4aa9		       02 04 1a 	      .byte.b	2,4,26
  25834  4aac
  25835  4aac		       02		      .byte.b	2
  25836  4aad
  25837  4aad		       04 04 1a 	      .byte.b	4,4,26
  25838  4ab0
  25839  4ab0		       02		      .byte.b	2
  25840  4ab1
  25841  4ab1		       02 04 1a 	      .byte.b	2,4,26
  25842  4ab4
  25843  4ab4		       04		      .byte.b	4
  25844  4ab5
  25845  4ab5		       08 04 17 	      .byte.b	8,4,23
  25846  4ab8
  25847  4ab8		       02		      .byte.b	2
  25848  4ab9
  25849  4ab9		       08 04 17 	      .byte.b	8,4,23
  25850  4abc
  25851  4abc		       02		      .byte.b	2
  25852  4abd
  25853  4abd		       01 04 17 	      .byte.b	1,4,23
  25854  4ac0
  25855  4ac0		       01		      .byte.b	1
  25856  4ac1
  25857  4ac1		       02 04 17 	      .byte.b	2,4,23
  25858  4ac4
  25859  4ac4		       02		      .byte.b	2
  25860  4ac5
  25861  4ac5		       04 04 17 	      .byte.b	4,4,23
  25862  4ac8
  25863  4ac8		       02		      .byte.b	2
  25864  4ac9
  25865  4ac9		       02 04 17 	      .byte.b	2,4,23
  25866  4acc
  25867  4acc		       04		      .byte.b	4
  25868  4acd
  25869  4acd		       08 04 0f 	      .byte.b	8,4,15
  25870  4ad0
  25871  4ad0		       02		      .byte.b	2
  25872  4ad1
  25873  4ad1		       08 04 0f 	      .byte.b	8,4,15
  25874  4ad4
  25875  4ad4		       02		      .byte.b	2
  25876  4ad5
  25877  4ad5		       01 04 0f 	      .byte.b	1,4,15
  25878  4ad8
  25879  4ad8		       01		      .byte.b	1
  25880  4ad9
  25881  4ad9		       02 04 0f 	      .byte.b	2,4,15
  25882  4adc
  25883  4adc		       02		      .byte.b	2
  25884  4add
  25885  4add		       04 04 0f 	      .byte.b	4,4,15
  25886  4ae0
  25887  4ae0		       02		      .byte.b	2
  25888  4ae1
  25889  4ae1		       02 04 0f 	      .byte.b	2,4,15
  25890  4ae4
  25891  4ae4		       04		      .byte.b	4
  25892  4ae5
  25893  4ae5		       08 04 13 	      .byte.b	8,4,19
  25894  4ae8
  25895  4ae8		       02		      .byte.b	2
  25896  4ae9
  25897  4ae9		       08 04 13 	      .byte.b	8,4,19
  25898  4aec
  25899  4aec		       02		      .byte.b	2
  25900  4aed
  25901  4aed		       01 04 13 	      .byte.b	1,4,19
  25902  4af0
  25903  4af0		       01		      .byte.b	1
  25904  4af1
  25905  4af1		       02 04 13 	      .byte.b	2,4,19
  25906  4af4
  25907  4af4		       02		      .byte.b	2
  25908  4af5
  25909  4af5		       04 04 13 	      .byte.b	4,4,19
  25910  4af8
  25911  4af8		       02		      .byte.b	2
  25912  4af9
  25913  4af9		       02 04 13 	      .byte.b	2,4,19
  25914  4afc
  25915  4afc		       08		      .byte.b	8
  25916  4afd
  25917  4afd		       ff		      .byte.b	255
  25918  4afe
  25919  4afe				   .skipL01224
  25920  4afe				   .
  25921  4afe							; 
  25922  4afe
  25923  4afe				   .
  25924  4afe							; 
  25925  4afe
  25926  4afe				   .
  25927  4afe							; 
  25928  4afe
  25929  4afe				   .
  25930  4afe							; 
  25931  4afe
  25932  4afe				   .
  25933  4afe							; 
  25934  4afe
  25935  4afe				   .
  25936  4afe							; 
  25937  4afe
  25938  4afe				   .
  25939  4afe							; 
  25940  4afe
  25941  4afe				   .
  25942  4afe							; 
  25943  4afe
  25944  4afe				   .L01225		;  data _SD_Corroded_Tick_Down
  25945  4afe
  25946  4afe		       4c 6a 7b 	      JMP	.skipL01225
  25947  4b01				   _SD_Corroded_Tick_Down
  25948  4b01		       00 00 00 	      .byte.b	0,0,0
  25949  4b04
  25950  4b04		       19		      .byte.b	25
  25951  4b05
  25952  4b05		       02 0c 12 	      .byte.b	2,12,18
  25953  4b08
  25954  4b08		       01		      .byte.b	1
  25955  4b09
  25956  4b09		       07 0c 12 	      .byte.b	7,12,18
  25957  4b0c
  25958  4b0c		       01		      .byte.b	1
  25959  4b0d
  25960  4b0d		       04 0c 12 	      .byte.b	4,12,18
  25961  4b10
  25962  4b10		       01		      .byte.b	1
  25963  4b11
  25964  4b11		       07 0c 12 	      .byte.b	7,12,18
  25965  4b14
  25966  4b14		       01		      .byte.b	1
  25967  4b15
  25968  4b15		       04 0c 12 	      .byte.b	4,12,18
  25969  4b18
  25970  4b18		       06		      .byte.b	6
  25971  4b19
  25972  4b19		       02 0c 12 	      .byte.b	2,12,18
  25973  4b1c
  25974  4b1c		       02		      .byte.b	2
  25975  4b1d
  25976  4b1d		       02 0c 12 	      .byte.b	2,12,18
  25977  4b20
  25978  4b20		       01		      .byte.b	1
  25979  4b21
  25980  4b21		       07 0c 12 	      .byte.b	7,12,18
  25981  4b24
  25982  4b24		       01		      .byte.b	1
  25983  4b25
  25984  4b25		       04 0c 12 	      .byte.b	4,12,18
  25985  4b28
  25986  4b28		       01		      .byte.b	1
  25987  4b29
  25988  4b29		       07 0c 12 	      .byte.b	7,12,18
  25989  4b2c
  25990  4b2c		       01		      .byte.b	1
  25991  4b2d
  25992  4b2d		       04 0c 12 	      .byte.b	4,12,18
  25993  4b30
  25994  4b30		       06		      .byte.b	6
  25995  4b31
  25996  4b31		       02 0c 12 	      .byte.b	2,12,18
  25997  4b34
  25998  4b34		       08		      .byte.b	8
  25999  4b35
  26000  4b35		       00 00 00 	      .byte.b	0,0,0
  26001  4b38
  26002  4b38		       3c		      .byte.b	60
  26003  4b39
  26004  4b39		       02 0c 12 	      .byte.b	2,12,18
  26005  4b3c
  26006  4b3c		       01		      .byte.b	1
  26007  4b3d
  26008  4b3d		       07 0c 12 	      .byte.b	7,12,18
  26009  4b40
  26010  4b40		       01		      .byte.b	1
  26011  4b41
  26012  4b41		       04 0c 12 	      .byte.b	4,12,18
  26013  4b44
  26014  4b44		       01		      .byte.b	1
  26015  4b45
  26016  4b45		       07 0c 12 	      .byte.b	7,12,18
  26017  4b48
  26018  4b48		       01		      .byte.b	1
  26019  4b49
  26020  4b49		       04 0c 12 	      .byte.b	4,12,18
  26021  4b4c
  26022  4b4c		       06		      .byte.b	6
  26023  4b4d
  26024  4b4d		       02 0c 12 	      .byte.b	2,12,18
  26025  4b50
  26026  4b50		       02		      .byte.b	2
  26027  4b51
  26028  4b51		       02 0c 12 	      .byte.b	2,12,18
  26029  4b54
  26030  4b54		       01		      .byte.b	1
  26031  4b55
  26032  4b55		       07 0c 12 	      .byte.b	7,12,18
  26033  4b58
  26034  4b58		       01		      .byte.b	1
  26035  4b59
  26036  4b59		       04 0c 12 	      .byte.b	4,12,18
  26037  4b5c
  26038  4b5c		       01		      .byte.b	1
  26039  4b5d
  26040  4b5d		       07 0c 12 	      .byte.b	7,12,18
  26041  4b60
  26042  4b60		       01		      .byte.b	1
  26043  4b61
  26044  4b61		       04 0c 12 	      .byte.b	4,12,18
  26045  4b64
  26046  4b64		       06		      .byte.b	6
  26047  4b65
  26048  4b65		       02 0c 12 	      .byte.b	2,12,18
  26049  4b68
  26050  4b68		       08		      .byte.b	8
  26051  4b69
  26052  4b69		       ff		      .byte.b	255
  26053  4b6a
  26054  4b6a				   .skipL01225
  26055  4b6a				   .
  26056  4b6a							; 
  26057  4b6a
  26058  4b6a				   .
  26059  4b6a							; 
  26060  4b6a
  26061  4b6a				   .
  26062  4b6a							; 
  26063  4b6a
  26064  4b6a				   .
  26065  4b6a							; 
  26066  4b6a
  26067  4b6a				   .
  26068  4b6a							; 
  26069  4b6a
  26070  4b6a				   .
  26071  4b6a							; 
  26072  4b6a
  26073  4b6a				   .
  26074  4b6a							; 
  26075  4b6a
  26076  4b6a				   .
  26077  4b6a							; 
  26078  4b6a
  26079  4b6a				   .L01226		;  data _SD_Corroded_Seaweed_Moosh
  26080  4b6a
  26081  4b6a		       4c b6 7b 	      JMP	.skipL01226
  26082  4b6d				   _SD_Corroded_Seaweed_Moosh
  26083  4b6d		       02 08 10 	      .byte.b	2,8,16
  26084  4b70
  26085  4b70		       01		      .byte.b	1
  26086  4b71
  26087  4b71		       04 08 0f 	      .byte.b	4,8,15
  26088  4b74
  26089  4b74		       01		      .byte.b	1
  26090  4b75
  26091  4b75		       06 08 10 	      .byte.b	6,8,16
  26092  4b78
  26093  4b78		       01		      .byte.b	1
  26094  4b79
  26095  4b79		       08 08 0e 	      .byte.b	8,8,14
  26096  4b7c
  26097  4b7c		       01		      .byte.b	1
  26098  4b7d
  26099  4b7d		       04 08 0f 	      .byte.b	4,8,15
  26100  4b80
  26101  4b80		       01		      .byte.b	1
  26102  4b81
  26103  4b81		       08 08 0d 	      .byte.b	8,8,13
  26104  4b84
  26105  4b84		       01		      .byte.b	1
  26106  4b85
  26107  4b85		       04 08 0e 	      .byte.b	4,8,14
  26108  4b88
  26109  4b88		       01		      .byte.b	1
  26110  4b89
  26111  4b89		       08 08 0c 	      .byte.b	8,8,12
  26112  4b8c
  26113  4b8c		       01		      .byte.b	1
  26114  4b8d
  26115  4b8d		       04 08 0b 	      .byte.b	4,8,11
  26116  4b90
  26117  4b90		       01		      .byte.b	1
  26118  4b91
  26119  4b91		       08 08 0a 	      .byte.b	8,8,10
  26120  4b94
  26121  4b94		       01		      .byte.b	1
  26122  4b95
  26123  4b95		       04 08 09 	      .byte.b	4,8,9
  26124  4b98
  26125  4b98		       01		      .byte.b	1
  26126  4b99
  26127  4b99		       08 08 08 	      .byte.b	8,8,8
  26128  4b9c
  26129  4b9c		       01		      .byte.b	1
  26130  4b9d
  26131  4b9d		       07 08 07 	      .byte.b	7,8,7
  26132  4ba0
  26133  4ba0		       01		      .byte.b	1
  26134  4ba1
  26135  4ba1		       06 08 06 	      .byte.b	6,8,6
  26136  4ba4
  26137  4ba4		       01		      .byte.b	1
  26138  4ba5
  26139  4ba5		       05 08 05 	      .byte.b	5,8,5
  26140  4ba8
  26141  4ba8		       01		      .byte.b	1
  26142  4ba9
  26143  4ba9		       04 08 04 	      .byte.b	4,8,4
  26144  4bac
  26145  4bac		       01		      .byte.b	1
  26146  4bad
  26147  4bad		       03 08 03 	      .byte.b	3,8,3
  26148  4bb0
  26149  4bb0		       01		      .byte.b	1
  26150  4bb1
  26151  4bb1		       02 08 02 	      .byte.b	2,8,2
  26152  4bb4
  26153  4bb4		       01		      .byte.b	1
  26154  4bb5
  26155  4bb5		       ff		      .byte.b	255
  26156  4bb6
  26157  4bb6				   .skipL01226
  26158  4bb6				   .
  26159  4bb6							; 
  26160  4bb6
  26161  4bb6				   .
  26162  4bb6							; 
  26163  4bb6
  26164  4bb6				   .
  26165  4bb6							; 
  26166  4bb6
  26167  4bb6				   .
  26168  4bb6							; 
  26169  4bb6
  26170  4bb6				   .
  26171  4bb6							; 
  26172  4bb6
  26173  4bb6				   .
  26174  4bb6							; 
  26175  4bb6
  26176  4bb6				   .
  26177  4bb6							; 
  26178  4bb6
  26179  4bb6				   .
  26180  4bb6							; 
  26181  4bb6
  26182  4bb6				   .L01227		;  data _SD_Corroded_Hit_Ship
  26183  4bb6
  26184  4bb6		       4c 1e 7c 	      JMP	.skipL01227
  26185  4bb9				   _SD_Corroded_Hit_Ship
  26186  4bb9		       08 08 09 	      .byte.b	8,8,9
  26187  4bbc
  26188  4bbc		       01		      .byte.b	1
  26189  4bbd
  26190  4bbd		       05 08 0a 	      .byte.b	5,8,10
  26191  4bc0
  26192  4bc0		       01		      .byte.b	1
  26193  4bc1
  26194  4bc1		       08 08 0b 	      .byte.b	8,8,11
  26195  4bc4
  26196  4bc4		       01		      .byte.b	1
  26197  4bc5
  26198  4bc5		       07 08 0c 	      .byte.b	7,8,12
  26199  4bc8
  26200  4bc8		       01		      .byte.b	1
  26201  4bc9
  26202  4bc9		       08 08 0d 	      .byte.b	8,8,13
  26203  4bcc
  26204  4bcc		       01		      .byte.b	1
  26205  4bcd
  26206  4bcd		       05 08 0e 	      .byte.b	5,8,14
  26207  4bd0
  26208  4bd0		       01		      .byte.b	1
  26209  4bd1
  26210  4bd1		       08 08 0f 	      .byte.b	8,8,15
  26211  4bd4
  26212  4bd4		       01		      .byte.b	1
  26213  4bd5
  26214  4bd5		       07 08 10 	      .byte.b	7,8,16
  26215  4bd8
  26216  4bd8		       01		      .byte.b	1
  26217  4bd9
  26218  4bd9		       08 08 11 	      .byte.b	8,8,17
  26219  4bdc
  26220  4bdc		       01		      .byte.b	1
  26221  4bdd
  26222  4bdd		       05 08 12 	      .byte.b	5,8,18
  26223  4be0
  26224  4be0		       01		      .byte.b	1
  26225  4be1
  26226  4be1		       08 08 13 	      .byte.b	8,8,19
  26227  4be4
  26228  4be4		       01		      .byte.b	1
  26229  4be5
  26230  4be5		       07 08 14 	      .byte.b	7,8,20
  26231  4be8
  26232  4be8		       01		      .byte.b	1
  26233  4be9
  26234  4be9		       08 08 15 	      .byte.b	8,8,21
  26235  4bec
  26236  4bec		       01		      .byte.b	1
  26237  4bed
  26238  4bed		       05 08 16 	      .byte.b	5,8,22
  26239  4bf0
  26240  4bf0		       01		      .byte.b	1
  26241  4bf1
  26242  4bf1		       08 08 17 	      .byte.b	8,8,23
  26243  4bf4
  26244  4bf4		       01		      .byte.b	1
  26245  4bf5
  26246  4bf5		       07 08 18 	      .byte.b	7,8,24
  26247  4bf8
  26248  4bf8		       01		      .byte.b	1
  26249  4bf9
  26250  4bf9		       08 08 19 	      .byte.b	8,8,25
  26251  4bfc
  26252  4bfc		       01		      .byte.b	1
  26253  4bfd
  26254  4bfd		       05 08 1a 	      .byte.b	5,8,26
  26255  4c00
  26256  4c00		       01		      .byte.b	1
  26257  4c01
  26258  4c01		       08 08 1b 	      .byte.b	8,8,27
  26259  4c04
  26260  4c04		       01		      .byte.b	1
  26261  4c05
  26262  4c05		       07 08 1c 	      .byte.b	7,8,28
  26263  4c08
  26264  4c08		       01		      .byte.b	1
  26265  4c09
  26266  4c09		       04 08 1d 	      .byte.b	4,8,29
  26267  4c0c
  26268  4c0c		       01		      .byte.b	1
  26269  4c0d
  26270  4c0d		       03 08 1e 	      .byte.b	3,8,30
  26271  4c10
  26272  4c10		       01		      .byte.b	1
  26273  4c11
  26274  4c11		       02 08 1f 	      .byte.b	2,8,31
  26275  4c14
  26276  4c14		       01		      .byte.b	1
  26277  4c15
  26278  4c15		       02 08 1e 	      .byte.b	2,8,30
  26279  4c18
  26280  4c18		       01		      .byte.b	1
  26281  4c19
  26282  4c19		       02 08 1f 	      .byte.b	2,8,31
  26283  4c1c
  26284  4c1c		       01		      .byte.b	1
  26285  4c1d
  26286  4c1d		       ff		      .byte.b	255
  26287  4c1e
  26288  4c1e				   .skipL01227
  26289  4c1e				   .
  26290  4c1e							; 
  26291  4c1e
  26292  4c1e				   .
  26293  4c1e							; 
  26294  4c1e
  26295  4c1e				   .
  26296  4c1e							; 
  26297  4c1e
  26298  4c1e				   .
  26299  4c1e							; 
  26300  4c1e
  26301  4c1e				   .
  26302  4c1e							; 
  26303  4c1e
  26304  4c1e				   .
  26305  4c1e							; 
  26306  4c1e
  26307  4c1e				   .
  26308  4c1e							; 
  26309  4c1e
  26310  4c1e				   .
  26311  4c1e							; 
  26312  4c1e
  26313  4c1e				   .L01228		;  data _SD_Corroded_Chase
  26314  4c1e
  26315  4c1e		       4c ae 7c 	      JMP	.skipL01228
  26316  4c21				   _SD_Corroded_Chase
  26317  4c21		       02 0c 12 	      .byte.b	2,12,18
  26318  4c24
  26319  4c24		       01		      .byte.b	1
  26320  4c25
  26321  4c25		       04 0c 13 	      .byte.b	4,12,19
  26322  4c28
  26323  4c28		       01		      .byte.b	1
  26324  4c29
  26325  4c29		       08 0c 0f 	      .byte.b	8,12,15
  26326  4c2c
  26327  4c2c		       01		      .byte.b	1
  26328  4c2d
  26329  4c2d		       08 0c 12 	      .byte.b	8,12,18
  26330  4c30
  26331  4c30		       01		      .byte.b	1
  26332  4c31
  26333  4c31		       08 0c 13 	      .byte.b	8,12,19
  26334  4c34
  26335  4c34		       01		      .byte.b	1
  26336  4c35
  26337  4c35		       08 0c 0f 	      .byte.b	8,12,15
  26338  4c38
  26339  4c38		       01		      .byte.b	1
  26340  4c39
  26341  4c39		       08 0c 12 	      .byte.b	8,12,18
  26342  4c3c
  26343  4c3c		       01		      .byte.b	1
  26344  4c3d
  26345  4c3d		       08 0c 13 	      .byte.b	8,12,19
  26346  4c40
  26347  4c40		       01		      .byte.b	1
  26348  4c41
  26349  4c41		       08 0c 0f 	      .byte.b	8,12,15
  26350  4c44
  26351  4c44		       01		      .byte.b	1
  26352  4c45
  26353  4c45		       08 0c 12 	      .byte.b	8,12,18
  26354  4c48
  26355  4c48		       01		      .byte.b	1
  26356  4c49
  26357  4c49		       07 0c 13 	      .byte.b	7,12,19
  26358  4c4c
  26359  4c4c		       01		      .byte.b	1
  26360  4c4d
  26361  4c4d		       06 0c 0f 	      .byte.b	6,12,15
  26362  4c50
  26363  4c50		       01		      .byte.b	1
  26364  4c51
  26365  4c51		       05 0c 12 	      .byte.b	5,12,18
  26366  4c54
  26367  4c54		       01		      .byte.b	1
  26368  4c55
  26369  4c55		       04 0c 13 	      .byte.b	4,12,19
  26370  4c58
  26371  4c58		       01		      .byte.b	1
  26372  4c59
  26373  4c59		       03 0c 0f 	      .byte.b	3,12,15
  26374  4c5c
  26375  4c5c		       01		      .byte.b	1
  26376  4c5d
  26377  4c5d		       02 0c 12 	      .byte.b	2,12,18
  26378  4c60
  26379  4c60		       01		      .byte.b	1
  26380  4c61
  26381  4c61		       01 0c 13 	      .byte.b	1,12,19
  26382  4c64
  26383  4c64		       01		      .byte.b	1
  26384  4c65
  26385  4c65		       02 06 1c 	      .byte.b	2,6,28
  26386  4c68
  26387  4c68		       01		      .byte.b	1
  26388  4c69
  26389  4c69		       04 06 1e 	      .byte.b	4,6,30
  26390  4c6c
  26391  4c6c		       01		      .byte.b	1
  26392  4c6d
  26393  4c6d		       06 06 18 	      .byte.b	6,6,24
  26394  4c70
  26395  4c70		       01		      .byte.b	1
  26396  4c71
  26397  4c71		       08 06 1c 	      .byte.b	8,6,28
  26398  4c74
  26399  4c74		       01		      .byte.b	1
  26400  4c75
  26401  4c75		       0a 06 1e 	      .byte.b	10,6,30
  26402  4c78
  26403  4c78		       01		      .byte.b	1
  26404  4c79
  26405  4c79		       0a 06 18 	      .byte.b	10,6,24
  26406  4c7c
  26407  4c7c		       01		      .byte.b	1
  26408  4c7d
  26409  4c7d		       0a 06 1c 	      .byte.b	10,6,28
  26410  4c80
  26411  4c80		       01		      .byte.b	1
  26412  4c81
  26413  4c81		       08 06 1e 	      .byte.b	8,6,30
  26414  4c84
  26415  4c84		       01		      .byte.b	1
  26416  4c85
  26417  4c85		       0a 06 18 	      .byte.b	10,6,24
  26418  4c88
  26419  4c88		       01		      .byte.b	1
  26420  4c89
  26421  4c89		       08 06 1c 	      .byte.b	8,6,28
  26422  4c8c
  26423  4c8c		       01		      .byte.b	1
  26424  4c8d
  26425  4c8d		       07 06 1e 	      .byte.b	7,6,30
  26426  4c90
  26427  4c90		       01		      .byte.b	1
  26428  4c91
  26429  4c91		       06 06 18 	      .byte.b	6,6,24
  26430  4c94
  26431  4c94		       01		      .byte.b	1
  26432  4c95
  26433  4c95		       05 06 1c 	      .byte.b	5,6,28
  26434  4c98
  26435  4c98		       01		      .byte.b	1
  26436  4c99
  26437  4c99		       04 06 1e 	      .byte.b	4,6,30
  26438  4c9c
  26439  4c9c		       01		      .byte.b	1
  26440  4c9d
  26441  4c9d		       03 06 18 	      .byte.b	3,6,24
  26442  4ca0
  26443  4ca0		       01		      .byte.b	1
  26444  4ca1
  26445  4ca1		       02 06 1c 	      .byte.b	2,6,28
  26446  4ca4
  26447  4ca4		       01		      .byte.b	1
  26448  4ca5
  26449  4ca5		       01 06 1e 	      .byte.b	1,6,30
  26450  4ca8
  26451  4ca8		       01		      .byte.b	1
  26452  4ca9
  26453  4ca9		       00 00 00 	      .byte.b	0,0,0
  26454  4cac
  26455  4cac		       0a		      .byte.b	10
  26456  4cad
  26457  4cad		       ff		      .byte.b	255
  26458  4cae
  26459  4cae				   .skipL01228
  26460  4cae				   .
  26461  4cae							; 
  26462  4cae
  26463  4cae				   .
  26464  4cae							; 
  26465  4cae
  26466  4cae				   .
  26467  4cae							; 
  26468  4cae
  26469  4cae				   .
  26470  4cae							; 
  26471  4cae
  26472  4cae				   .
  26473  4cae							; 
  26474  4cae
  26475  4cae				   .
  26476  4cae							; 
  26477  4cae
  26478  4cae				   .
  26479  4cae							; 
  26480  4cae
  26481  4cae				   .L01229		;  bank 5
  26482  4cae
  26483  4cae					      if	ECHO4
      806 bytes of ROM space left in bank 4
  26484  4cae					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
  26485  4cae					      endif
  26486  4cae		       00 01	   ECHO4      =	1
  26487  4fd4					      ORG	$4FF4-bscode_length
  26488  4fd4					      RORG	$7FF4-bscode_length
  26489  4fd4		       a2 ff	   start_bank4 ldx	#$ff
  26490  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
  26491  4fd6				  -	      stx	FASTFETCH
  26492  4fd6					      endif
  26493  4fd6		       9a		      txs
  26494  4fd7				  -	      if	bankswitch == 64
  26495  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  26496  4fd7					      else
  26497  4fd7		       a9 f3		      lda	#>(start-1)
  26498  4fd9					      endif
  26499  4fd9		       48		      pha
  26500  4fda		       a9 51		      lda	#<(start-1)
  26501  4fdc		       48		      pha
  26502  4fdd		       48		      pha
  26503  4fde		       8a		      txa
  26504  4fdf		       48		      pha
  26505  4fe0		       ba		      tsx
  26506  4fe1					      if	bankswitch != 64
  26507  4fe1		       b5 04		      lda	4,x	; get high byte of return address
  26508  4fe3		       2a		      rol
  26509  4fe4		       2a		      rol
  26510  4fe5		       2a		      rol
  26511  4fe6		       2a		      rol
  26512  4fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  26513  4fe9		       aa		      tax
  26514  4fea		       e8		      inx
  26515  4feb				  -	      else
  26516  4feb				  -	      lda	4,x	; get high byte of return address
  26517  4feb				  -	      tay
  26518  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  26519  4feb				  -	      sta	4,x
  26520  4feb				  -	      tya
  26521  4feb				  -	      lsr
  26522  4feb				  -	      lsr
  26523  4feb				  -	      lsr
  26524  4feb				  -	      lsr
  26525  4feb				  -	      tax
  26526  4feb				  -	      inx
  26527  4feb					      endif
  26528  4feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  26529  4fee		       68		      pla
  26530  4fef		       aa		      tax
  26531  4ff0		       68		      pla
  26532  4ff1		       60		      rts
  26533  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  26534  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  26535  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  26536  4ff2					      endif
  26537  4ffc					      ORG	$4FFC
  26538  4ffc					      RORG	$7FFC
  26539  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
  26540  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
  26541  5000					      ORG	$5000
  26542  5000					      RORG	$9000
  26543  5000					      repeat	256
  26544  5000		       ff		      .byte.b	$ff
  26543  5000					      repend
  26544  5001		       ff		      .byte.b	$ff
  26543  5001					      repend
  26544  5002		       ff		      .byte.b	$ff
  26543  5002					      repend
  26544  5003		       ff		      .byte.b	$ff
  26543  5003					      repend
  26544  5004		       ff		      .byte.b	$ff
  26543  5004					      repend
  26544  5005		       ff		      .byte.b	$ff
  26543  5005					      repend
  26544  5006		       ff		      .byte.b	$ff
  26543  5006					      repend
  26544  5007		       ff		      .byte.b	$ff
  26543  5007					      repend
  26544  5008		       ff		      .byte.b	$ff
  26543  5008					      repend
  26544  5009		       ff		      .byte.b	$ff
  26543  5009					      repend
  26544  500a		       ff		      .byte.b	$ff
  26543  500a					      repend
  26544  500b		       ff		      .byte.b	$ff
  26543  500b					      repend
  26544  500c		       ff		      .byte.b	$ff
  26543  500c					      repend
  26544  500d		       ff		      .byte.b	$ff
  26543  500d					      repend
  26544  500e		       ff		      .byte.b	$ff
  26543  500e					      repend
  26544  500f		       ff		      .byte.b	$ff
  26543  500f					      repend
  26544  5010		       ff		      .byte.b	$ff
  26543  5010					      repend
  26544  5011		       ff		      .byte.b	$ff
  26543  5011					      repend
  26544  5012		       ff		      .byte.b	$ff
  26543  5012					      repend
  26544  5013		       ff		      .byte.b	$ff
  26543  5013					      repend
  26544  5014		       ff		      .byte.b	$ff
  26543  5014					      repend
  26544  5015		       ff		      .byte.b	$ff
  26543  5015					      repend
  26544  5016		       ff		      .byte.b	$ff
  26543  5016					      repend
  26544  5017		       ff		      .byte.b	$ff
  26543  5017					      repend
  26544  5018		       ff		      .byte.b	$ff
  26543  5018					      repend
  26544  5019		       ff		      .byte.b	$ff
  26543  5019					      repend
  26544  501a		       ff		      .byte.b	$ff
  26543  501a					      repend
  26544  501b		       ff		      .byte.b	$ff
  26543  501b					      repend
  26544  501c		       ff		      .byte.b	$ff
  26543  501c					      repend
  26544  501d		       ff		      .byte.b	$ff
  26543  501d					      repend
  26544  501e		       ff		      .byte.b	$ff
  26543  501e					      repend
  26544  501f		       ff		      .byte.b	$ff
  26543  501f					      repend
  26544  5020		       ff		      .byte.b	$ff
  26543  5020					      repend
  26544  5021		       ff		      .byte.b	$ff
  26543  5021					      repend
  26544  5022		       ff		      .byte.b	$ff
  26543  5022					      repend
  26544  5023		       ff		      .byte.b	$ff
  26543  5023					      repend
  26544  5024		       ff		      .byte.b	$ff
  26543  5024					      repend
  26544  5025		       ff		      .byte.b	$ff
  26543  5025					      repend
  26544  5026		       ff		      .byte.b	$ff
  26543  5026					      repend
  26544  5027		       ff		      .byte.b	$ff
  26543  5027					      repend
  26544  5028		       ff		      .byte.b	$ff
  26543  5028					      repend
  26544  5029		       ff		      .byte.b	$ff
  26543  5029					      repend
  26544  502a		       ff		      .byte.b	$ff
  26543  502a					      repend
  26544  502b		       ff		      .byte.b	$ff
  26543  502b					      repend
  26544  502c		       ff		      .byte.b	$ff
  26543  502c					      repend
  26544  502d		       ff		      .byte.b	$ff
  26543  502d					      repend
  26544  502e		       ff		      .byte.b	$ff
  26543  502e					      repend
  26544  502f		       ff		      .byte.b	$ff
  26543  502f					      repend
  26544  5030		       ff		      .byte.b	$ff
  26543  5030					      repend
  26544  5031		       ff		      .byte.b	$ff
  26543  5031					      repend
  26544  5032		       ff		      .byte.b	$ff
  26543  5032					      repend
  26544  5033		       ff		      .byte.b	$ff
  26543  5033					      repend
  26544  5034		       ff		      .byte.b	$ff
  26543  5034					      repend
  26544  5035		       ff		      .byte.b	$ff
  26543  5035					      repend
  26544  5036		       ff		      .byte.b	$ff
  26543  5036					      repend
  26544  5037		       ff		      .byte.b	$ff
  26543  5037					      repend
  26544  5038		       ff		      .byte.b	$ff
  26543  5038					      repend
  26544  5039		       ff		      .byte.b	$ff
  26543  5039					      repend
  26544  503a		       ff		      .byte.b	$ff
  26543  503a					      repend
  26544  503b		       ff		      .byte.b	$ff
  26543  503b					      repend
  26544  503c		       ff		      .byte.b	$ff
  26543  503c					      repend
  26544  503d		       ff		      .byte.b	$ff
  26543  503d					      repend
  26544  503e		       ff		      .byte.b	$ff
  26543  503e					      repend
  26544  503f		       ff		      .byte.b	$ff
  26543  503f					      repend
  26544  5040		       ff		      .byte.b	$ff
  26543  5040					      repend
  26544  5041		       ff		      .byte.b	$ff
  26543  5041					      repend
  26544  5042		       ff		      .byte.b	$ff
  26543  5042					      repend
  26544  5043		       ff		      .byte.b	$ff
  26543  5043					      repend
  26544  5044		       ff		      .byte.b	$ff
  26543  5044					      repend
  26544  5045		       ff		      .byte.b	$ff
  26543  5045					      repend
  26544  5046		       ff		      .byte.b	$ff
  26543  5046					      repend
  26544  5047		       ff		      .byte.b	$ff
  26543  5047					      repend
  26544  5048		       ff		      .byte.b	$ff
  26543  5048					      repend
  26544  5049		       ff		      .byte.b	$ff
  26543  5049					      repend
  26544  504a		       ff		      .byte.b	$ff
  26543  504a					      repend
  26544  504b		       ff		      .byte.b	$ff
  26543  504b					      repend
  26544  504c		       ff		      .byte.b	$ff
  26543  504c					      repend
  26544  504d		       ff		      .byte.b	$ff
  26543  504d					      repend
  26544  504e		       ff		      .byte.b	$ff
  26543  504e					      repend
  26544  504f		       ff		      .byte.b	$ff
  26543  504f					      repend
  26544  5050		       ff		      .byte.b	$ff
  26543  5050					      repend
  26544  5051		       ff		      .byte.b	$ff
  26543  5051					      repend
  26544  5052		       ff		      .byte.b	$ff
  26543  5052					      repend
  26544  5053		       ff		      .byte.b	$ff
  26543  5053					      repend
  26544  5054		       ff		      .byte.b	$ff
  26543  5054					      repend
  26544  5055		       ff		      .byte.b	$ff
  26543  5055					      repend
  26544  5056		       ff		      .byte.b	$ff
  26543  5056					      repend
  26544  5057		       ff		      .byte.b	$ff
  26543  5057					      repend
  26544  5058		       ff		      .byte.b	$ff
  26543  5058					      repend
  26544  5059		       ff		      .byte.b	$ff
  26543  5059					      repend
  26544  505a		       ff		      .byte.b	$ff
  26543  505a					      repend
  26544  505b		       ff		      .byte.b	$ff
  26543  505b					      repend
  26544  505c		       ff		      .byte.b	$ff
  26543  505c					      repend
  26544  505d		       ff		      .byte.b	$ff
  26543  505d					      repend
  26544  505e		       ff		      .byte.b	$ff
  26543  505e					      repend
  26544  505f		       ff		      .byte.b	$ff
  26543  505f					      repend
  26544  5060		       ff		      .byte.b	$ff
  26543  5060					      repend
  26544  5061		       ff		      .byte.b	$ff
  26543  5061					      repend
  26544  5062		       ff		      .byte.b	$ff
  26543  5062					      repend
  26544  5063		       ff		      .byte.b	$ff
  26543  5063					      repend
  26544  5064		       ff		      .byte.b	$ff
  26543  5064					      repend
  26544  5065		       ff		      .byte.b	$ff
  26543  5065					      repend
  26544  5066		       ff		      .byte.b	$ff
  26543  5066					      repend
  26544  5067		       ff		      .byte.b	$ff
  26543  5067					      repend
  26544  5068		       ff		      .byte.b	$ff
  26543  5068					      repend
  26544  5069		       ff		      .byte.b	$ff
  26543  5069					      repend
  26544  506a		       ff		      .byte.b	$ff
  26543  506a					      repend
  26544  506b		       ff		      .byte.b	$ff
  26543  506b					      repend
  26544  506c		       ff		      .byte.b	$ff
  26543  506c					      repend
  26544  506d		       ff		      .byte.b	$ff
  26543  506d					      repend
  26544  506e		       ff		      .byte.b	$ff
  26543  506e					      repend
  26544  506f		       ff		      .byte.b	$ff
  26543  506f					      repend
  26544  5070		       ff		      .byte.b	$ff
  26543  5070					      repend
  26544  5071		       ff		      .byte.b	$ff
  26543  5071					      repend
  26544  5072		       ff		      .byte.b	$ff
  26543  5072					      repend
  26544  5073		       ff		      .byte.b	$ff
  26543  5073					      repend
  26544  5074		       ff		      .byte.b	$ff
  26543  5074					      repend
  26544  5075		       ff		      .byte.b	$ff
  26543  5075					      repend
  26544  5076		       ff		      .byte.b	$ff
  26543  5076					      repend
  26544  5077		       ff		      .byte.b	$ff
  26543  5077					      repend
  26544  5078		       ff		      .byte.b	$ff
  26543  5078					      repend
  26544  5079		       ff		      .byte.b	$ff
  26543  5079					      repend
  26544  507a		       ff		      .byte.b	$ff
  26543  507a					      repend
  26544  507b		       ff		      .byte.b	$ff
  26543  507b					      repend
  26544  507c		       ff		      .byte.b	$ff
  26543  507c					      repend
  26544  507d		       ff		      .byte.b	$ff
  26543  507d					      repend
  26544  507e		       ff		      .byte.b	$ff
  26543  507e					      repend
  26544  507f		       ff		      .byte.b	$ff
  26543  507f					      repend
  26544  5080		       ff		      .byte.b	$ff
  26543  5080					      repend
  26544  5081		       ff		      .byte.b	$ff
  26543  5081					      repend
  26544  5082		       ff		      .byte.b	$ff
  26543  5082					      repend
  26544  5083		       ff		      .byte.b	$ff
  26543  5083					      repend
  26544  5084		       ff		      .byte.b	$ff
  26543  5084					      repend
  26544  5085		       ff		      .byte.b	$ff
  26543  5085					      repend
  26544  5086		       ff		      .byte.b	$ff
  26543  5086					      repend
  26544  5087		       ff		      .byte.b	$ff
  26543  5087					      repend
  26544  5088		       ff		      .byte.b	$ff
  26543  5088					      repend
  26544  5089		       ff		      .byte.b	$ff
  26543  5089					      repend
  26544  508a		       ff		      .byte.b	$ff
  26543  508a					      repend
  26544  508b		       ff		      .byte.b	$ff
  26543  508b					      repend
  26544  508c		       ff		      .byte.b	$ff
  26543  508c					      repend
  26544  508d		       ff		      .byte.b	$ff
  26543  508d					      repend
  26544  508e		       ff		      .byte.b	$ff
  26543  508e					      repend
  26544  508f		       ff		      .byte.b	$ff
  26543  508f					      repend
  26544  5090		       ff		      .byte.b	$ff
  26543  5090					      repend
  26544  5091		       ff		      .byte.b	$ff
  26543  5091					      repend
  26544  5092		       ff		      .byte.b	$ff
  26543  5092					      repend
  26544  5093		       ff		      .byte.b	$ff
  26543  5093					      repend
  26544  5094		       ff		      .byte.b	$ff
  26543  5094					      repend
  26544  5095		       ff		      .byte.b	$ff
  26543  5095					      repend
  26544  5096		       ff		      .byte.b	$ff
  26543  5096					      repend
  26544  5097		       ff		      .byte.b	$ff
  26543  5097					      repend
  26544  5098		       ff		      .byte.b	$ff
  26543  5098					      repend
  26544  5099		       ff		      .byte.b	$ff
  26543  5099					      repend
  26544  509a		       ff		      .byte.b	$ff
  26543  509a					      repend
  26544  509b		       ff		      .byte.b	$ff
  26543  509b					      repend
  26544  509c		       ff		      .byte.b	$ff
  26543  509c					      repend
  26544  509d		       ff		      .byte.b	$ff
  26543  509d					      repend
  26544  509e		       ff		      .byte.b	$ff
  26543  509e					      repend
  26544  509f		       ff		      .byte.b	$ff
  26543  509f					      repend
  26544  50a0		       ff		      .byte.b	$ff
  26543  50a0					      repend
  26544  50a1		       ff		      .byte.b	$ff
  26543  50a1					      repend
  26544  50a2		       ff		      .byte.b	$ff
  26543  50a2					      repend
  26544  50a3		       ff		      .byte.b	$ff
  26543  50a3					      repend
  26544  50a4		       ff		      .byte.b	$ff
  26543  50a4					      repend
  26544  50a5		       ff		      .byte.b	$ff
  26543  50a5					      repend
  26544  50a6		       ff		      .byte.b	$ff
  26543  50a6					      repend
  26544  50a7		       ff		      .byte.b	$ff
  26543  50a7					      repend
  26544  50a8		       ff		      .byte.b	$ff
  26543  50a8					      repend
  26544  50a9		       ff		      .byte.b	$ff
  26543  50a9					      repend
  26544  50aa		       ff		      .byte.b	$ff
  26543  50aa					      repend
  26544  50ab		       ff		      .byte.b	$ff
  26543  50ab					      repend
  26544  50ac		       ff		      .byte.b	$ff
  26543  50ac					      repend
  26544  50ad		       ff		      .byte.b	$ff
  26543  50ad					      repend
  26544  50ae		       ff		      .byte.b	$ff
  26543  50ae					      repend
  26544  50af		       ff		      .byte.b	$ff
  26543  50af					      repend
  26544  50b0		       ff		      .byte.b	$ff
  26543  50b0					      repend
  26544  50b1		       ff		      .byte.b	$ff
  26543  50b1					      repend
  26544  50b2		       ff		      .byte.b	$ff
  26543  50b2					      repend
  26544  50b3		       ff		      .byte.b	$ff
  26543  50b3					      repend
  26544  50b4		       ff		      .byte.b	$ff
  26543  50b4					      repend
  26544  50b5		       ff		      .byte.b	$ff
  26543  50b5					      repend
  26544  50b6		       ff		      .byte.b	$ff
  26543  50b6					      repend
  26544  50b7		       ff		      .byte.b	$ff
  26543  50b7					      repend
  26544  50b8		       ff		      .byte.b	$ff
  26543  50b8					      repend
  26544  50b9		       ff		      .byte.b	$ff
  26543  50b9					      repend
  26544  50ba		       ff		      .byte.b	$ff
  26543  50ba					      repend
  26544  50bb		       ff		      .byte.b	$ff
  26543  50bb					      repend
  26544  50bc		       ff		      .byte.b	$ff
  26543  50bc					      repend
  26544  50bd		       ff		      .byte.b	$ff
  26543  50bd					      repend
  26544  50be		       ff		      .byte.b	$ff
  26543  50be					      repend
  26544  50bf		       ff		      .byte.b	$ff
  26543  50bf					      repend
  26544  50c0		       ff		      .byte.b	$ff
  26543  50c0					      repend
  26544  50c1		       ff		      .byte.b	$ff
  26543  50c1					      repend
  26544  50c2		       ff		      .byte.b	$ff
  26543  50c2					      repend
  26544  50c3		       ff		      .byte.b	$ff
  26543  50c3					      repend
  26544  50c4		       ff		      .byte.b	$ff
  26543  50c4					      repend
  26544  50c5		       ff		      .byte.b	$ff
  26543  50c5					      repend
  26544  50c6		       ff		      .byte.b	$ff
  26543  50c6					      repend
  26544  50c7		       ff		      .byte.b	$ff
  26543  50c7					      repend
  26544  50c8		       ff		      .byte.b	$ff
  26543  50c8					      repend
  26544  50c9		       ff		      .byte.b	$ff
  26543  50c9					      repend
  26544  50ca		       ff		      .byte.b	$ff
  26543  50ca					      repend
  26544  50cb		       ff		      .byte.b	$ff
  26543  50cb					      repend
  26544  50cc		       ff		      .byte.b	$ff
  26543  50cc					      repend
  26544  50cd		       ff		      .byte.b	$ff
  26543  50cd					      repend
  26544  50ce		       ff		      .byte.b	$ff
  26543  50ce					      repend
  26544  50cf		       ff		      .byte.b	$ff
  26543  50cf					      repend
  26544  50d0		       ff		      .byte.b	$ff
  26543  50d0					      repend
  26544  50d1		       ff		      .byte.b	$ff
  26543  50d1					      repend
  26544  50d2		       ff		      .byte.b	$ff
  26543  50d2					      repend
  26544  50d3		       ff		      .byte.b	$ff
  26543  50d3					      repend
  26544  50d4		       ff		      .byte.b	$ff
  26543  50d4					      repend
  26544  50d5		       ff		      .byte.b	$ff
  26543  50d5					      repend
  26544  50d6		       ff		      .byte.b	$ff
  26543  50d6					      repend
  26544  50d7		       ff		      .byte.b	$ff
  26543  50d7					      repend
  26544  50d8		       ff		      .byte.b	$ff
  26543  50d8					      repend
  26544  50d9		       ff		      .byte.b	$ff
  26543  50d9					      repend
  26544  50da		       ff		      .byte.b	$ff
  26543  50da					      repend
  26544  50db		       ff		      .byte.b	$ff
  26543  50db					      repend
  26544  50dc		       ff		      .byte.b	$ff
  26543  50dc					      repend
  26544  50dd		       ff		      .byte.b	$ff
  26543  50dd					      repend
  26544  50de		       ff		      .byte.b	$ff
  26543  50de					      repend
  26544  50df		       ff		      .byte.b	$ff
  26543  50df					      repend
  26544  50e0		       ff		      .byte.b	$ff
  26543  50e0					      repend
  26544  50e1		       ff		      .byte.b	$ff
  26543  50e1					      repend
  26544  50e2		       ff		      .byte.b	$ff
  26543  50e2					      repend
  26544  50e3		       ff		      .byte.b	$ff
  26543  50e3					      repend
  26544  50e4		       ff		      .byte.b	$ff
  26543  50e4					      repend
  26544  50e5		       ff		      .byte.b	$ff
  26543  50e5					      repend
  26544  50e6		       ff		      .byte.b	$ff
  26543  50e6					      repend
  26544  50e7		       ff		      .byte.b	$ff
  26543  50e7					      repend
  26544  50e8		       ff		      .byte.b	$ff
  26543  50e8					      repend
  26544  50e9		       ff		      .byte.b	$ff
  26543  50e9					      repend
  26544  50ea		       ff		      .byte.b	$ff
  26543  50ea					      repend
  26544  50eb		       ff		      .byte.b	$ff
  26543  50eb					      repend
  26544  50ec		       ff		      .byte.b	$ff
  26543  50ec					      repend
  26544  50ed		       ff		      .byte.b	$ff
  26543  50ed					      repend
  26544  50ee		       ff		      .byte.b	$ff
  26543  50ee					      repend
  26544  50ef		       ff		      .byte.b	$ff
  26543  50ef					      repend
  26544  50f0		       ff		      .byte.b	$ff
  26543  50f0					      repend
  26544  50f1		       ff		      .byte.b	$ff
  26543  50f1					      repend
  26544  50f2		       ff		      .byte.b	$ff
  26543  50f2					      repend
  26544  50f3		       ff		      .byte.b	$ff
  26543  50f3					      repend
  26544  50f4		       ff		      .byte.b	$ff
  26543  50f4					      repend
  26544  50f5		       ff		      .byte.b	$ff
  26543  50f5					      repend
  26544  50f6		       ff		      .byte.b	$ff
  26543  50f6					      repend
  26544  50f7		       ff		      .byte.b	$ff
  26543  50f7					      repend
  26544  50f8		       ff		      .byte.b	$ff
  26543  50f8					      repend
  26544  50f9		       ff		      .byte.b	$ff
  26543  50f9					      repend
  26544  50fa		       ff		      .byte.b	$ff
  26543  50fa					      repend
  26544  50fb		       ff		      .byte.b	$ff
  26543  50fb					      repend
  26544  50fc		       ff		      .byte.b	$ff
  26543  50fc					      repend
  26544  50fd		       ff		      .byte.b	$ff
  26543  50fd					      repend
  26544  50fe		       ff		      .byte.b	$ff
  26543  50fe					      repend
  26544  50ff		       ff		      .byte.b	$ff
  26545  5100					      repend
  26546  5100				   .
  26547  5100							; 
  26548  5100
  26549  5100				   .
  26550  5100							; 
  26551  5100
  26552  5100				   .
  26553  5100							; 
  26554  5100
  26555  5100				   .
  26556  5100							; 
  26557  5100
  26558  5100				   .
  26559  5100							; 
  26560  5100
  26561  5100				   .
  26562  5100							; 
  26563  5100
  26564  5100				   .
  26565  5100							; 
  26566  5100
  26567  5100				   .
  26568  5100							; 
  26569  5100
  26570  5100				   .
  26571  5100							; 
  26572  5100
  26573  5100				   .
  26574  5100							; 
  26575  5100
  26576  5100				   .
  26577  5100							; 
  26578  5100
  26579  5100				   .
  26580  5100							; 
  26581  5100
  26582  5100				   .
  26583  5100							; 
  26584  5100
  26585  5100				   .__Game_Over_Setup
  26586  5100							; __Game_Over_Setup
  26587  5100
  26588  5100				   .
  26589  5100							; 
  26590  5100
  26591  5100				   .
  26592  5100							; 
  26593  5100
  26594  5100				   .
  26595  5100							; 
  26596  5100
  26597  5100				   .
  26598  5100							; 
  26599  5100
  26600  5100				   .
  26601  5100							; 
  26602  5100
  26603  5100				   .
  26604  5100							; 
  26605  5100
  26606  5100				   .
  26607  5100							; 
  26608  5100
  26609  5100				   .
  26610  5100							; 
  26611  5100
  26612  5100				   .
  26613  5100							; 
  26614  5100
  26615  5100				   .
  26616  5100							; 
  26617  5100
  26618  5100				   .
  26619  5100							; 
  26620  5100
  26621  5100				   .L01230		;  if _sc1  >	_High_Score1 then goto __New_High_Score
  26622  5100
  26623  5100		       a5 a5		      LDA	_High_Score1
  26624  5102		       c5 93		      CMP	_sc1
  26625  5104		       b0 03		      BCS	.skipL01230
  26626  5106				   .condpart398
  26627  5106		       4c 39 91 	      jmp	.__New_High_Score
  26628  5109
  26629  5109				   .skipL01230
  26630  5109				   .L01231		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
  26631  5109
  26632  5109		       a5 93		      LDA	_sc1
  26633  510b		       c5 a5		      CMP	_High_Score1
  26634  510d		       b0 03		      BCS	.skipL01231
  26635  510f				   .condpart399
  26636  510f		       4c 45 91 	      jmp	.__Skip_High_Score
  26637  5112
  26638  5112				   .skipL01231
  26639  5112				   .
  26640  5112							; 
  26641  5112
  26642  5112				   .
  26643  5112							; 
  26644  5112
  26645  5112				   .
  26646  5112							; 
  26647  5112
  26648  5112				   .
  26649  5112							; 
  26650  5112
  26651  5112				   .L01232		;  if _sc2  >	_High_Score2 then goto __New_High_Score
  26652  5112
  26653  5112		       a5 a6		      LDA	_High_Score2
  26654  5114		       c5 94		      CMP	_sc2
  26655  5116		       b0 03		      BCS	.skipL01232
  26656  5118				   .condpart400
  26657  5118		       4c 39 91 	      jmp	.__New_High_Score
  26658  511b
  26659  511b				   .skipL01232
  26660  511b				   .L01233		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
  26661  511b
  26662  511b		       a5 94		      LDA	_sc2
  26663  511d		       c5 a6		      CMP	_High_Score2
  26664  511f		       b0 03		      BCS	.skipL01233
  26665  5121				   .condpart401
  26666  5121		       4c 45 91 	      jmp	.__Skip_High_Score
  26667  5124
  26668  5124				   .skipL01233
  26669  5124				   .
  26670  5124							; 
  26671  5124
  26672  5124				   .
  26673  5124							; 
  26674  5124
  26675  5124				   .
  26676  5124							; 
  26677  5124
  26678  5124				   .
  26679  5124							; 
  26680  5124
  26681  5124				   .L01234		;  if _sc3  >	_High_Score3 then goto __New_High_Score
  26682  5124
  26683  5124		       a5 a7		      LDA	_High_Score3
  26684  5126		       c5 95		      CMP	_sc3
  26685  5128		       b0 03		      BCS	.skipL01234
  26686  512a				   .condpart402
  26687  512a		       4c 39 91 	      jmp	.__New_High_Score
  26688  512d
  26689  512d				   .skipL01234
  26690  512d				   .L01235		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
  26691  512d
  26692  512d		       a5 95		      LDA	_sc3
  26693  512f		       c5 a7		      CMP	_High_Score3
  26694  5131		       b0 03		      BCS	.skipL01235
  26695  5133				   .condpart403
  26696  5133		       4c 45 91 	      jmp	.__Skip_High_Score
  26697  5136
  26698  5136				   .skipL01235
  26699  5136				   .
  26700  5136							; 
  26701  5136
  26702  5136				   .
  26703  5136							; 
  26704  5136
  26705  5136				   .
  26706  5136							; 
  26707  5136
  26708  5136				   .
  26709  5136							; 
  26710  5136
  26711  5136				   .L01236		;  goto __Skip_High_Score
  26712  5136
  26713  5136		       4c 45 91 	      jmp	.__Skip_High_Score
  26714  5139
  26715  5139				   .
  26716  5139							; 
  26717  5139
  26718  5139				   .
  26719  5139							; 
  26720  5139
  26721  5139				   .
  26722  5139							; 
  26723  5139
  26724  5139				   .
  26725  5139							; 
  26726  5139
  26727  5139				   .__New_High_Score
  26728  5139							; __New_High_Score
  26729  5139
  26730  5139				   .
  26731  5139							; 
  26732  5139
  26733  5139				   .L01237		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
  26734  5139
  26735  5139		       a5 93		      LDA	_sc1
  26736  513b		       85 a5		      STA	_High_Score1
  26737  513d		       a5 94		      LDA	_sc2
  26738  513f		       85 a6		      STA	_High_Score2
  26739  5141		       a5 95		      LDA	_sc3
  26740  5143		       85 a7		      STA	_High_Score3
  26741  5145				   .
  26742  5145							; 
  26743  5145
  26744  5145				   .__Skip_High_Score
  26745  5145							; __Skip_High_Score
  26746  5145
  26747  5145				   .
  26748  5145							; 
  26749  5145
  26750  5145				   .
  26751  5145							; 
  26752  5145
  26753  5145				   .
  26754  5145							; 
  26755  5145
  26756  5145				   .
  26757  5145							; 
  26758  5145
  26759  5145				   .
  26760  5145							; 
  26761  5145
  26762  5145				   .L01238		;  if !_Bit0_Game_Control{0} then goto __Start_Restart bank1
  26763  5145
  26764  5145		       a5 d2		      LDA	_Bit0_Game_Control
  26765  5147		       4a		      LSR
  26766  5148		       b0 12		      BCS	.skipL01238
  26767  514a				   .condpart404
  26768  514a		       85 ee		      sta	temp7
  26769  514c		       a9 11		      lda	#>(.__Start_Restart-1)
  26770  514e		       48		      pha
  26771  514f		       a9 11		      lda	#<(.__Start_Restart-1)
  26772  5151		       48		      pha
  26773  5152		       a5 ee		      lda	temp7
  26774  5154		       48		      pha
  26775  5155		       8a		      txa
  26776  5156		       48		      pha
  26777  5157		       a2 01		      ldx	#1
  26778  5159		       4c eb ff 	      jmp	BS_jsr
  26779  515c				   .skipL01238
  26780  515c				   .
  26781  515c							; 
  26782  515c
  26783  515c				   .
  26784  515c							; 
  26785  515c
  26786  515c				   .
  26787  515c							; 
  26788  515c
  26789  515c				   .
  26790  515c							; 
  26791  515c
  26792  515c				   .
  26793  515c							; 
  26794  515c
  26795  515c				   .
  26796  515c							; 
  26797  515c
  26798  515c				   .L01239		;  AUDV0 = 0  :  AUDV1 = 0  :	_Ch0_Counter  =  0  :  _Ch1_Counter  =	0  :  _Master_Counter  =  0  :	_Frame_Counter	=  0  :  _Bit6_Swap_Scores{6}  =  0
  26799  515c
  26800  515c		       a9 00		      LDA	#0
  26801  515e		       85 19		      STA	AUDV0
  26802  5160		       85 1a		      STA	AUDV1
  26803  5162		       85 dc		      STA	_Ch0_Counter
  26804  5164		       85 df		      STA	_Ch1_Counter
  26805  5166		       85 d8		      STA	_Master_Counter
  26806  5168		       85 d9		      STA	_Frame_Counter
  26807  516a		       a5 c4		      LDA	_Bit6_Swap_Scores
  26808  516c		       29 bf		      AND	#191
  26809  516e		       85 c4		      STA	_Bit6_Swap_Scores
  26810  5170				   .
  26811  5170							; 
  26812  5170
  26813  5170				   .L01240		;  _GmOvr_Tmp_x_Fill_Counter  =  0  :	_GmOvr_Tmp_Frame_Counter  =  0	:  _GmOvr_Tmp_Tone_Flip_Counter  =  0
  26814  5170
  26815  5170		       a9 00		      LDA	#0
  26816  5172		       85 bb		      STA	_GmOvr_Tmp_x_Fill_Counter
  26817  5174		       85 b9		      STA	_GmOvr_Tmp_Frame_Counter
  26818  5176		       85 b8		      STA	_GmOvr_Tmp_Tone_Flip_Counter
  26819  5178				   .
  26820  5178							; 
  26821  5178
  26822  5178				   .L01241		;  _Ch0_Sound	=  0  :  _GmOvr_Tmp_GOAnim_Counter  =  0
  26823  5178
  26824  5178		       a9 00		      LDA	#0
  26825  517a		       85 da		      STA	_Ch0_Sound
  26826  517c		       85 bf		      STA	_GmOvr_Tmp_GOAnim_Counter
  26827  517e				   .
  26828  517e							; 
  26829  517e
  26830  517e				   .
  26831  517e							; 
  26832  517e
  26833  517e				   .
  26834  517e							; 
  26835  517e
  26836  517e				   .
  26837  517e							; 
  26838  517e
  26839  517e				   .
  26840  517e							; 
  26841  517e
  26842  517e				   .
  26843  517e							; 
  26844  517e
  26845  517e				   .L01242		;  _Ch0_Sound	=  _c_Game_Over
  26846  517e
  26847  517e		       a9 06		      LDA	#_c_Game_Over
  26848  5180		       85 da		      STA	_Ch0_Sound
  26849  5182				   .
  26850  5182							; 
  26851  5182
  26852  5182				   .L01243		;  _Ch0_Duration  =  1  :  _Ch1_Duration  =  1  :  _Bit0_Reset_Restrainer{0}  =  1
  26853  5182
  26854  5182		       a9 01		      LDA	#1
  26855  5184		       85 db		      STA	_Ch0_Duration
  26856  5186		       85 de		      STA	_Ch1_Duration
  26857  5188		       a5 c4		      LDA	_Bit0_Reset_Restrainer
  26858  518a		       09 01		      ORA	#1
  26859  518c		       85 c4		      STA	_Bit0_Reset_Restrainer
  26860  518e				   .
  26861  518e							; 
  26862  518e
  26863  518e				   .L01244		;  _Bit1_Tmp_Ship_On_Screen{1}  =  1  :  _Bit6_Homing_Color_Cycle_On{6}  =  1
  26864  518e
  26865  518e		       a5 c4		      LDA	_Bit1_Tmp_Ship_On_Screen
  26866  5190		       09 02		      ORA	#2
  26867  5192		       85 c4		      STA	_Bit1_Tmp_Ship_On_Screen
  26868  5194		       a5 c6		      LDA	_Bit6_Homing_Color_Cycle_On
  26869  5196		       09 40		      ORA	#64
  26870  5198		       85 c6		      STA	_Bit6_Homing_Color_Cycle_On
  26871  519a				   .
  26872  519a							; 
  26873  519a
  26874  519a				   .L01245		;  _Ch1_Sound	=  _c_GO_Seaweed_Attack  :  _GmOvr_Tmp_Y_Fill_Counter  =  11
  26875  519a
  26876  519a		       a9 0a		      LDA	#_c_GO_Seaweed_Attack
  26877  519c		       85 dd		      STA	_Ch1_Sound
  26878  519e		       a9 0b		      LDA	#11
  26879  51a0		       85 ba		      STA	_GmOvr_Tmp_Y_Fill_Counter
  26880  51a2				   .
  26881  51a2							; 
  26882  51a2
  26883  51a2				   .L01246		;  if _Bit3_Easter_Egg{3} then _GmOvr_Tmp_Y_Fill_Counter  =  12
  26884  51a2
  26885  51a2		       a5 c7		      LDA	_Bit3_Easter_Egg
  26886  51a4		       29 08		      AND	#8
  26887  51a6		       f0 04		      BEQ	.skipL01246
  26888  51a8				   .condpart405
  26889  51a8		       a9 0c		      LDA	#12
  26890  51aa		       85 ba		      STA	_GmOvr_Tmp_Y_Fill_Counter
  26891  51ac				   .skipL01246
  26892  51ac				   .
  26893  51ac							; 
  26894  51ac
  26895  51ac				   .L01247		;  _Homing_Sc_Bck_Cntr  =  0  :  missile0y  =	250
  26896  51ac
  26897  51ac		       a9 00		      LDA	#0
  26898  51ae		       85 e9		      STA	v
  26899  51b0		       a9 00		      LDA	#0
  26900  51b2		       85 e8		      STA	_Homing_Sc_Bck_Cntr
  26901  51b4		       a9 fa		      LDA	#250
  26902  51b6		       85 91		      STA	missile0y
  26903  51b8				   .
  26904  51b8							; 
  26905  51b8
  26906  51b8				   .
  26907  51b8							; 
  26908  51b8
  26909  51b8				   .
  26910  51b8							; 
  26911  51b8
  26912  51b8				   .
  26913  51b8							; 
  26914  51b8
  26915  51b8				   .
  26916  51b8							; 
  26917  51b8
  26918  51b8				   .
  26919  51b8							; 
  26920  51b8
  26921  51b8				   .L01248		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
  26922  51b8
  26923  51b8		       a5 93		      LDA	_sc1
  26924  51ba		       85 a8		      STA	_Score1_Mem
  26925  51bc		       a5 94		      LDA	_sc2
  26926  51be		       85 a9		      STA	_Score2_Mem
  26927  51c0		       a5 95		      LDA	_sc3
  26928  51c2		       85 aa		      STA	_Score3_Mem
  26929  51c4				   .
  26930  51c4							; 
  26931  51c4
  26932  51c4				   .
  26933  51c4							; 
  26934  51c4
  26935  51c4				   .
  26936  51c4							; 
  26937  51c4
  26938  51c4				   .
  26939  51c4							; 
  26940  51c4
  26941  51c4				   .
  26942  51c4							; 
  26943  51c4
  26944  51c4				   .
  26945  51c4							; 
  26946  51c4
  26947  51c4				   .L01249		;  pfscore1  =  0  :  pfscore2  =  0
  26948  51c4
  26949  51c4		       a9 00		      LDA	#0
  26950  51c6		       85 f2		      STA	pfscore1
  26951  51c8		       85 f3		      STA	pfscore2
  26952  51ca				   .
  26953  51ca							; 
  26954  51ca
  26955  51ca				   .
  26956  51ca							; 
  26957  51ca
  26958  51ca				   .
  26959  51ca							; 
  26960  51ca
  26961  51ca				   .
  26962  51ca							; 
  26963  51ca
  26964  51ca				   .
  26965  51ca							; 
  26966  51ca
  26967  51ca				   .
  26968  51ca							; 
  26969  51ca
  26970  51ca				   .L01250		;  _SC_Back  =  $44
  26971  51ca
  26972  51ca		       a9 44		      LDA	#$44
  26973  51cc		       85 d1		      STA	_SC_Back
  26974  51ce				   .
  26975  51ce							; 
  26976  51ce
  26977  51ce				   .
  26978  51ce							; 
  26979  51ce
  26980  51ce				   .
  26981  51ce							; 
  26982  51ce
  26983  51ce				   .
  26984  51ce							; 
  26985  51ce
  26986  51ce				   .
  26987  51ce							; 
  26988  51ce
  26989  51ce				   .
  26990  51ce							; 
  26991  51ce
  26992  51ce				   .
  26993  51ce							; 
  26994  51ce
  26995  51ce				   .
  26996  51ce							; 
  26997  51ce
  26998  51ce				   .
  26999  51ce							; 
  27000  51ce
  27001  51ce				   .L01251		;  if !_Bit0_Canister_P1_On{0} then goto __GmOvrSetup_Wroth
  27002  51ce
  27003  51ce		       a5 c5		      LDA	_Bit0_Canister_P1_On
  27004  51d0		       4a		      LSR
  27005  51d1		       b0 03		      BCS	.skipL01251
  27006  51d3				   .condpart406
  27007  51d3		       4c e1 91 	      jmp	.__GmOvrSetup_Wroth
  27008  51d6
  27009  51d6				   .skipL01251
  27010  51d6				   .
  27011  51d6							; 
  27012  51d6
  27013  51d6				   .
  27014  51d6							; 
  27015  51d6
  27016  51d6				   .
  27017  51d6							; 
  27018  51d6
  27019  51d6				   .
  27020  51d6							; 
  27021  51d6
  27022  51d6				   .L01252		;  player1color:
  27023  51d6
  27024  51d6		       a2 b0		      LDX	#<playercolorL01252_1
  27025  51d8		       86 87		      STX	player1color
  27026  51da		       a9 fb		      LDA	#>playercolorL01252_1
  27027  51dc		       85 88		      STA	player1color+1
  27028  51de				   .
  27029  51de							; 
  27030  51de
  27031  51de				   .
  27032  51de							; 
  27033  51de
  27034  51de				   .
  27035  51de							; 
  27036  51de
  27037  51de				   .
  27038  51de							; 
  27039  51de
  27040  51de				   .L01253		;  goto __Game_Over_Loop
  27041  51de
  27042  51de		       4c fe 91 	      jmp	.__Game_Over_Loop
  27043  51e1
  27044  51e1				   .
  27045  51e1							; 
  27046  51e1
  27047  51e1				   .__GmOvrSetup_Wroth
  27048  51e1							; __GmOvrSetup_Wroth
  27049  51e1
  27050  51e1				   .
  27051  51e1							; 
  27052  51e1
  27053  51e1				   .
  27054  51e1							; 
  27055  51e1
  27056  51e1				   .
  27057  51e1							; 
  27058  51e1
  27059  51e1				   .
  27060  51e1							; 
  27061  51e1
  27062  51e1				   .L01254		;  if !_Bit1_Wrothopod_On{1} then goto __Game_Over_Loop
  27063  51e1
  27064  51e1		       a5 c5		      LDA	_Bit1_Wrothopod_On
  27065  51e3		       29 02		      AND	#2
  27066  51e5		       d0 03		      BNE	.skipL01254
  27067  51e7				   .condpart407
  27068  51e7		       4c fe 91 	      jmp	.__Game_Over_Loop
  27069  51ea
  27070  51ea				   .skipL01254
  27071  51ea				   .
  27072  51ea							; 
  27073  51ea
  27074  51ea				   .
  27075  51ea							; 
  27076  51ea
  27077  51ea				   .
  27078  51ea							; 
  27079  51ea
  27080  51ea				   .
  27081  51ea							; 
  27082  51ea
  27083  51ea				   .L01255		;  player1:
  27084  51ea
  27085  51ea		       a2 b6		      LDX	#<playerL01255_1
  27086  51ec		       86 8c		      STX	player1pointerlo
  27087  51ee		       a9 fb		      LDA	#>playerL01255_1
  27088  51f0		       85 8d		      STA	player1pointerhi
  27089  51f2		       a9 07		      LDA	#7
  27090  51f4		       85 8f		      STA	player1height
  27091  51f6				   .
  27092  51f6							; 
  27093  51f6
  27094  51f6				   .L01256		;  player1color:
  27095  51f6
  27096  51f6		       a2 be		      LDX	#<playercolorL01256_1
  27097  51f8		       86 87		      STX	player1color
  27098  51fa		       a9 fb		      LDA	#>playercolorL01256_1
  27099  51fc		       85 88		      STA	player1color+1
  27100  51fe				   .
  27101  51fe							; 
  27102  51fe
  27103  51fe				   .
  27104  51fe							; 
  27105  51fe
  27106  51fe				   .
  27107  51fe							; 
  27108  51fe
  27109  51fe				   .
  27110  51fe							; 
  27111  51fe
  27112  51fe				   .
  27113  51fe							; 
  27114  51fe
  27115  51fe				   .
  27116  51fe							; 
  27117  51fe
  27118  51fe				   .
  27119  51fe							; 
  27120  51fe
  27121  51fe				   .
  27122  51fe							; 
  27123  51fe
  27124  51fe				   .
  27125  51fe							; 
  27126  51fe
  27127  51fe				   .
  27128  51fe							; 
  27129  51fe
  27130  51fe				   .__Game_Over_Loop
  27131  51fe							; __Game_Over_Loop
  27132  51fe
  27133  51fe				   .
  27134  51fe							; 
  27135  51fe
  27136  51fe				   .
  27137  51fe							; 
  27138  51fe
  27139  51fe				   .
  27140  51fe							; 
  27141  51fe
  27142  51fe				   .
  27143  51fe							; 
  27144  51fe
  27145  51fe				   .
  27146  51fe							; 
  27147  51fe
  27148  51fe				   .
  27149  51fe							; 
  27150  51fe
  27151  51fe				   .
  27152  51fe							; 
  27153  51fe
  27154  51fe				   .
  27155  51fe							; 
  27156  51fe
  27157  51fe				   .
  27158  51fe							; 
  27159  51fe
  27160  51fe				   .
  27161  51fe							; 
  27162  51fe
  27163  51fe				   .L01257		;  COLUP0  =  $48  :  COLUPF  =  $CE  :  COLUBK  =  $80  :  PF0  =  %11110000
  27164  51fe
  27165  51fe		       a9 48		      LDA	#$48
  27166  5200		       85 06		      STA	COLUP0
  27167  5202		       a9 ce		      LDA	#$CE
  27168  5204		       85 08		      STA	COLUPF
  27169  5206		       a9 80		      LDA	#$80
  27170  5208		       85 09		      STA	COLUBK
  27171  520a		       a9 f0		      LDA	#%11110000
  27172  520c		       85 0d		      STA	PF0
  27173  520e				   .
  27174  520e							; 
  27175  520e
  27176  520e				   .
  27177  520e							; 
  27178  520e
  27179  520e				   .
  27180  520e							; 
  27181  520e
  27182  520e				   .
  27183  520e							; 
  27184  520e
  27185  520e				   .
  27186  520e							; 
  27187  520e
  27188  520e				   .
  27189  520e							; 
  27190  520e
  27191  520e				   .
  27192  520e							; 
  27193  520e
  27194  520e				   .L01258		;  if _Bit3_Flip_P0{3} then REFP0  =  8
  27195  520e
  27196  520e		       a5 c2		      LDA	_Bit3_Flip_P0
  27197  5210		       29 08		      AND	#8
  27198  5212		       f0 04		      BEQ	.skipL01258
  27199  5214				   .condpart408
  27200  5214		       a9 08		      LDA	#8
  27201  5216		       85 0b		      STA	REFP0
  27202  5218				   .skipL01258
  27203  5218				   .
  27204  5218							; 
  27205  5218
  27206  5218				   .
  27207  5218							; 
  27208  5218
  27209  5218				   .
  27210  5218							; 
  27211  5218
  27212  5218				   .
  27213  5218							; 
  27214  5218
  27215  5218				   .
  27216  5218							; 
  27217  5218
  27218  5218				   .
  27219  5218							; 
  27220  5218
  27221  5218				   .
  27222  5218							; 
  27223  5218
  27224  5218				   .
  27225  5218							; 
  27226  5218
  27227  5218				   .
  27228  5218							; 
  27229  5218
  27230  5218				   .
  27231  5218							; 
  27232  5218
  27233  5218				   .
  27234  5218							; 
  27235  5218
  27236  5218				   .
  27237  5218							; 
  27238  5218
  27239  5218				   .
  27240  5218							; 
  27241  5218
  27242  5218				   .L01259		;  _Master_Counter  =	_Master_Counter  +  1
  27243  5218
  27244  5218		       e6 d8		      INC	_Master_Counter
  27245  521a				   .
  27246  521a							; 
  27247  521a
  27248  521a				   .
  27249  521a							; 
  27250  521a
  27251  521a				   .
  27252  521a							; 
  27253  521a
  27254  521a				   .
  27255  521a							; 
  27256  521a
  27257  521a				   .L01260		;  if _Master_Counter	<  120 then goto __Skip_20_Second_Counter
  27258  521a
  27259  521a		       a5 d8		      LDA	_Master_Counter
  27260  521c		       c9 78		      CMP	#120
  27261  521e		       b0 03		      BCS	.skipL01260
  27262  5220				   .condpart409
  27263  5220		       4c 8d 92 	      jmp	.__Skip_20_Second_Counter
  27264  5223
  27265  5223				   .skipL01260
  27266  5223				   .
  27267  5223							; 
  27268  5223
  27269  5223				   .
  27270  5223							; 
  27271  5223
  27272  5223				   .
  27273  5223							; 
  27274  5223
  27275  5223				   .
  27276  5223							; 
  27277  5223
  27278  5223				   .
  27279  5223							; 
  27280  5223
  27281  5223				   .L01261		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
  27282  5223
  27283  5223		       e6 d9		      INC	_Frame_Counter
  27284  5225		       a9 00		      LDA	#0
  27285  5227		       85 d8		      STA	_Master_Counter
  27286  5229				   .
  27287  5229							; 
  27288  5229
  27289  5229				   .
  27290  5229							; 
  27291  5229
  27292  5229				   .
  27293  5229							; 
  27294  5229
  27295  5229				   .
  27296  5229							; 
  27297  5229
  27298  5229				   .L01262		;  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
  27299  5229
  27300  5229		       a5 c4		      LDA	_Bit6_Swap_Scores
  27301  522b		       29 40		      AND	#64
  27302  522d		       08		      PHP
  27303  522e		       a5 c4		      LDA	_Bit6_Swap_Scores
  27304  5230		       29 bf		      AND	#191
  27305  5232		       28		      PLP
  27306  5233		       d0 02		      .byte.b	$D0, $02
  27307  5235		       09 40		      ORA	#64
  27308  5237		       85 c4		      STA	_Bit6_Swap_Scores
  27309  5239				   .
  27310  5239							; 
  27311  5239
  27312  5239				   .
  27313  5239							; 
  27314  5239
  27315  5239				   .
  27316  5239							; 
  27317  5239
  27318  5239				   .
  27319  5239							; 
  27320  5239
  27321  5239				   .
  27322  5239							; 
  27323  5239
  27324  5239				   .
  27325  5239							; 
  27326  5239
  27327  5239				   .
  27328  5239							; 
  27329  5239
  27330  5239				   .
  27331  5239							; 
  27332  5239
  27333  5239				   .L01263		;  if _Frame_Counter  >  9 then _Bit0_Game_Control{0}	=  0  :  _sc1 = _Score1_Mem  :	_sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem :  goto __Start_Restart bank1
  27334  5239
  27335  5239		       a9 09		      LDA	#9
  27336  523b		       c5 d9		      CMP	_Frame_Counter
  27337  523d		       b0 24		      BCS	.skipL01263
  27338  523f				   .condpart410
  27339  523f		       a5 d2		      LDA	_Bit0_Game_Control
  27340  5241		       29 fe		      AND	#254
  27341  5243		       85 d2		      STA	_Bit0_Game_Control
  27342  5245		       a5 a8		      LDA	_Score1_Mem
  27343  5247		       85 93		      STA	_sc1
  27344  5249		       a5 a9		      LDA	_Score2_Mem
  27345  524b		       85 94		      STA	_sc2
  27346  524d		       a5 aa		      LDA	_Score3_Mem
  27347  524f		       85 95		      STA	_sc3
  27348  5251		       85 ee		      sta	temp7
  27349  5253		       a9 11		      lda	#>(.__Start_Restart-1)
  27350  5255		       48		      pha
  27351  5256		       a9 11		      lda	#<(.__Start_Restart-1)
  27352  5258		       48		      pha
  27353  5259		       a5 ee		      lda	temp7
  27354  525b		       48		      pha
  27355  525c		       8a		      txa
  27356  525d		       48		      pha
  27357  525e		       a2 01		      ldx	#1
  27358  5260		       4c eb ff 	      jmp	BS_jsr
  27359  5263				   .skipL01263
  27360  5263				   .
  27361  5263							; 
  27362  5263
  27363  5263				   .
  27364  5263							; 
  27365  5263
  27366  5263				   .
  27367  5263							; 
  27368  5263
  27369  5263				   .
  27370  5263							; 
  27371  5263
  27372  5263				   .L01264		;  if !_Bit6_Swap_Scores{6} then goto __Skip_GmOver_High_Score_Swap
  27373  5263
  27374  5263		       24 c4		      BIT	_Bit6_Swap_Scores
  27375  5265		       70 03		      BVS	.skipL01264
  27376  5267				   .condpart411
  27377  5267		       4c 7d 92 	      jmp	.__Skip_GmOver_High_Score_Swap
  27378  526a
  27379  526a				   .skipL01264
  27380  526a				   .
  27381  526a							; 
  27382  526a
  27383  526a				   .
  27384  526a							; 
  27385  526a
  27386  526a				   .
  27387  526a							; 
  27388  526a
  27389  526a				   .
  27390  526a							; 
  27391  526a
  27392  526a				   .L01265		;  scorecolor	=  $BE
  27393  526a
  27394  526a		       a9 be		      LDA	#$BE
  27395  526c		       85 a3		      STA	scorecolor
  27396  526e				   .
  27397  526e							; 
  27398  526e
  27399  526e				   .L01266		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
  27400  526e
  27401  526e		       a5 a5		      LDA	_High_Score1
  27402  5270		       85 93		      STA	_sc1
  27403  5272		       a5 a6		      LDA	_High_Score2
  27404  5274		       85 94		      STA	_sc2
  27405  5276		       a5 a7		      LDA	_High_Score3
  27406  5278		       85 95		      STA	_sc3
  27407  527a				   .
  27408  527a							; 
  27409  527a
  27410  527a				   .L01267		;  goto __Skip_20_Second_Counter
  27411  527a
  27412  527a		       4c 8d 92 	      jmp	.__Skip_20_Second_Counter
  27413  527d
  27414  527d				   .
  27415  527d							; 
  27416  527d
  27417  527d				   .__Skip_GmOver_High_Score_Swap
  27418  527d							; __Skip_GmOver_High_Score_Swap
  27419  527d
  27420  527d				   .
  27421  527d							; 
  27422  527d
  27423  527d				   .
  27424  527d							; 
  27425  527d
  27426  527d				   .
  27427  527d							; 
  27428  527d
  27429  527d				   .
  27430  527d							; 
  27431  527d
  27432  527d				   .L01268		;  scorecolor	=  $1C
  27433  527d
  27434  527d		       a9 1c		      LDA	#$1C
  27435  527f		       85 a3		      STA	scorecolor
  27436  5281				   .
  27437  5281							; 
  27438  5281
  27439  5281				   .L01269		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
  27440  5281
  27441  5281		       a5 a8		      LDA	_Score1_Mem
  27442  5283		       85 93		      STA	_sc1
  27443  5285		       a5 a9		      LDA	_Score2_Mem
  27444  5287		       85 94		      STA	_sc2
  27445  5289		       a5 aa		      LDA	_Score3_Mem
  27446  528b		       85 95		      STA	_sc3
  27447  528d				   .
  27448  528d							; 
  27449  528d
  27450  528d				   .__Skip_20_Second_Counter
  27451  528d							; __Skip_20_Second_Counter
  27452  528d
  27453  528d				   .
  27454  528d							; 
  27455  528d
  27456  528d				   .
  27457  528d							; 
  27458  528d
  27459  528d				   .
  27460  528d							; 
  27461  528d
  27462  528d				   .
  27463  528d							; 
  27464  528d
  27465  528d				   .
  27466  528d							; 
  27467  528d
  27468  528d				   .
  27469  528d							; 
  27470  528d
  27471  528d				   .
  27472  528d							; 
  27473  528d
  27474  528d				   .
  27475  528d							; 
  27476  528d
  27477  528d				   .
  27478  528d							; 
  27479  528d
  27480  528d				   .
  27481  528d							; 
  27482  528d
  27483  528d				   .L01270		;  if !_Bit3_Easter_Egg{3} then goto __Skip_Scroll_Screen
  27484  528d
  27485  528d		       a5 c7		      LDA	_Bit3_Easter_Egg
  27486  528f		       29 08		      AND	#8
  27487  5291		       d0 03		      BNE	.skipL01270
  27488  5293				   .condpart412
  27489  5293		       4c d5 92 	      jmp	.__Skip_Scroll_Screen
  27490  5296
  27491  5296				   .skipL01270
  27492  5296				   .
  27493  5296							; 
  27494  5296
  27495  5296				   .
  27496  5296							; 
  27497  5296
  27498  5296				   .
  27499  5296							; 
  27500  5296
  27501  5296				   .
  27502  5296							; 
  27503  5296
  27504  5296				   .L01271		;  if _GmOvr_Tmp_Scroll_Counter  <  1 then goto __Skip_Scroll_Screen
  27505  5296
  27506  5296		       a5 ba		      LDA	_GmOvr_Tmp_Scroll_Counter
  27507  5298		       c9 01		      CMP	#1
  27508  529a		       b0 03		      BCS	.skipL01271
  27509  529c				   .condpart413
  27510  529c		       4c d5 92 	      jmp	.__Skip_Scroll_Screen
  27511  529f
  27512  529f				   .skipL01271
  27513  529f				   .
  27514  529f							; 
  27515  529f
  27516  529f				   .
  27517  529f							; 
  27518  529f
  27519  529f				   .
  27520  529f							; 
  27521  529f
  27522  529f				   .
  27523  529f							; 
  27524  529f
  27525  529f				   .L01272		;  _GmOvr_Tmp_8_Scroll_Counter  =  _GmOvr_Tmp_8_Scroll_Counter  +  1
  27526  529f
  27527  529f		       e6 bb		      INC	_GmOvr_Tmp_8_Scroll_Counter
  27528  52a1				   .
  27529  52a1							; 
  27530  52a1
  27531  52a1				   .
  27532  52a1							; 
  27533  52a1
  27534  52a1				   .
  27535  52a1							; 
  27536  52a1
  27537  52a1				   .
  27538  52a1							; 
  27539  52a1
  27540  52a1				   .
  27541  52a1							; 
  27542  52a1
  27543  52a1				   .L01273		;  if _GmOvr_Tmp_8_Scroll_Counter  =  8 then _GmOvr_Tmp_8_Scroll_Counter  =  0  :  _GmOvr_Tmp_Scroll_Counter  =  _GmOvr_Tmp_Scroll_Counter  -	1
  27544  52a1
  27545  52a1		       a5 bb		      LDA	_GmOvr_Tmp_8_Scroll_Counter
  27546  52a3		       c9 08		      CMP	#8
  27547  52a5		       d0 06		      BNE	.skipL01273
  27548  52a7				   .condpart414
  27549  52a7		       a9 00		      LDA	#0
  27550  52a9		       85 bb		      STA	_GmOvr_Tmp_8_Scroll_Counter
  27551  52ab		       c6 ba		      DEC	_GmOvr_Tmp_Scroll_Counter
  27552  52ad				   .skipL01273
  27553  52ad				   .
  27554  52ad							; 
  27555  52ad
  27556  52ad				   .
  27557  52ad							; 
  27558  52ad
  27559  52ad				   .
  27560  52ad							; 
  27561  52ad
  27562  52ad				   .
  27563  52ad							; 
  27564  52ad
  27565  52ad				   .L01274		;  pfscroll down
  27566  52ad
  27567  52ad		       a9 04		      LDA	#4
  27568  52af		       85 ee		      sta	temp7
  27569  52b1		       a9 92		      lda	#>(ret_point16-1)
  27570  52b3		       48		      pha
  27571  52b4		       a9 c6		      lda	#<(ret_point16-1)
  27572  52b6		       48		      pha
  27573  52b7		       a9 f4		      lda	#>(pfscroll-1)
  27574  52b9		       48		      pha
  27575  52ba		       a9 64		      lda	#<(pfscroll-1)
  27576  52bc		       48		      pha
  27577  52bd		       a5 ee		      lda	temp7
  27578  52bf		       48		      pha
  27579  52c0		       8a		      txa
  27580  52c1		       48		      pha
  27581  52c2		       a2 08		      ldx	#8
  27582  52c4		       4c eb ff 	      jmp	BS_jsr
  27583  52c7				   ret_point16
  27584  52c7				   .
  27585  52c7							; 
  27586  52c7
  27587  52c7				   .
  27588  52c7							; 
  27589  52c7
  27590  52c7				   .
  27591  52c7							; 
  27592  52c7
  27593  52c7				   .
  27594  52c7							; 
  27595  52c7
  27596  52c7				   .L01275		;  w124  =  0	:  w125  =  0  :  w126	=  0  :  w127  =  0
  27597  52c7
  27598  52c7		       a9 00		      LDA	#0
  27599  52c9		       8d 7c f0 	      STA	w124
  27600  52cc		       8d 7d f0 	      STA	w125
  27601  52cf		       8d 7e f0 	      STA	w126
  27602  52d2		       8d 7f f0 	      STA	w127
  27603  52d5				   .
  27604  52d5							; 
  27605  52d5
  27606  52d5				   .__Skip_Scroll_Screen
  27607  52d5							; __Skip_Scroll_Screen
  27608  52d5
  27609  52d5				   .
  27610  52d5							; 
  27611  52d5
  27612  52d5				   .
  27613  52d5							; 
  27614  52d5
  27615  52d5				   .
  27616  52d5							; 
  27617  52d5
  27618  52d5				   .
  27619  52d5							; 
  27620  52d5
  27621  52d5				   .
  27622  52d5							; 
  27623  52d5
  27624  52d5				   .
  27625  52d5							; 
  27626  52d5
  27627  52d5				   .
  27628  52d5							; 
  27629  52d5
  27630  52d5				   .
  27631  52d5							; 
  27632  52d5
  27633  52d5				   .
  27634  52d5							; 
  27635  52d5
  27636  52d5				   .
  27637  52d5							; 
  27638  52d5
  27639  52d5				   .L01276		;  if !_Bit3_Easter_Egg{3} then goto __Skip_Gyvolver
  27640  52d5
  27641  52d5		       a5 c7		      LDA	_Bit3_Easter_Egg
  27642  52d7		       29 08		      AND	#8
  27643  52d9		       d0 03		      BNE	.skipL01276
  27644  52db				   .condpart415
  27645  52db		       4c 2d 93 	      jmp	.__Skip_Gyvolver
  27646  52de
  27647  52de				   .skipL01276
  27648  52de				   .
  27649  52de							; 
  27650  52de
  27651  52de				   .
  27652  52de							; 
  27653  52de
  27654  52de				   .
  27655  52de							; 
  27656  52de
  27657  52de				   .
  27658  52de							; 
  27659  52de
  27660  52de				   .L01277		;  if _GmOvr_Tmp_Scroll_Counter  >  0 then goto __Skip_Gyvolver
  27661  52de
  27662  52de		       a9 00		      LDA	#0
  27663  52e0		       c5 ba		      CMP	_GmOvr_Tmp_Scroll_Counter
  27664  52e2		       b0 03		      BCS	.skipL01277
  27665  52e4				   .condpart416
  27666  52e4		       4c 2d 93 	      jmp	.__Skip_Gyvolver
  27667  52e7
  27668  52e7				   .skipL01277
  27669  52e7				   .
  27670  52e7							; 
  27671  52e7
  27672  52e7				   .
  27673  52e7							; 
  27674  52e7
  27675  52e7				   .
  27676  52e7							; 
  27677  52e7
  27678  52e7				   .
  27679  52e7							; 
  27680  52e7
  27681  52e7				   .L01278		;  if player1y  <  1 then goto __Skip_Gyvolver
  27682  52e7
  27683  52e7		       a5 86		      LDA	player1y
  27684  52e9		       c9 01		      CMP	#1
  27685  52eb		       b0 03		      BCS	.skipL01278
  27686  52ed				   .condpart417
  27687  52ed		       4c 2d 93 	      jmp	.__Skip_Gyvolver
  27688  52f0
  27689  52f0				   .skipL01278
  27690  52f0				   .
  27691  52f0							; 
  27692  52f0
  27693  52f0				   .
  27694  52f0							; 
  27695  52f0
  27696  52f0				   .
  27697  52f0							; 
  27698  52f0
  27699  52f0				   .
  27700  52f0							; 
  27701  52f0
  27702  52f0				   .L01279		;  _P1_Up_Down  =  _P1_Up_Down  -  0.60
  27703  52f0
  27704  52f0		       a5 d6		      LDA	c
  27705  52f2		       38		      SEC
  27706  52f3		       e9 99		      SBC	#153
  27707  52f5		       85 d6		      STA	c
  27708  52f7		       a5 86		      LDA	_P1_Up_Down
  27709  52f9		       e9 00		      SBC	#0
  27710  52fb		       85 86		      STA	_P1_Up_Down
  27711  52fd				   .
  27712  52fd							; 
  27713  52fd
  27714  52fd				   .
  27715  52fd							; 
  27716  52fd
  27717  52fd				   .
  27718  52fd							; 
  27719  52fd
  27720  52fd				   .
  27721  52fd							; 
  27722  52fd
  27723  52fd				   .L01280		;  _GmOvr_Tmp_Anim_Counter  =	_GmOvr_Tmp_Anim_Counter  +  1
  27724  52fd
  27725  52fd		       e6 b8		      INC	_GmOvr_Tmp_Anim_Counter
  27726  52ff				   .
  27727  52ff							; 
  27728  52ff
  27729  52ff				   .
  27730  52ff							; 
  27731  52ff
  27732  52ff				   .
  27733  52ff							; 
  27734  52ff
  27735  52ff				   .
  27736  52ff							; 
  27737  52ff
  27738  52ff				   .
  27739  52ff							; 
  27740  52ff
  27741  52ff				   .L01281		;  if _GmOvr_Tmp_Anim_Counter	<  4 then goto __Skip_Gyvolver
  27742  52ff
  27743  52ff		       a5 b8		      LDA	_GmOvr_Tmp_Anim_Counter
  27744  5301		       c9 04		      CMP	#4
  27745  5303		       b0 03		      BCS	.skipL01281
  27746  5305				   .condpart418
  27747  5305		       4c 2d 93 	      jmp	.__Skip_Gyvolver
  27748  5308
  27749  5308				   .skipL01281
  27750  5308				   .
  27751  5308							; 
  27752  5308
  27753  5308				   .
  27754  5308							; 
  27755  5308
  27756  5308				   .
  27757  5308							; 
  27758  5308
  27759  5308				   .
  27760  5308							; 
  27761  5308
  27762  5308				   .L01282		;  _GmOvr_Tmp_Anim_Counter  =	0
  27763  5308
  27764  5308		       a9 00		      LDA	#0
  27765  530a		       85 b8		      STA	_GmOvr_Tmp_Anim_Counter
  27766  530c				   .
  27767  530c							; 
  27768  530c
  27769  530c				   .
  27770  530c							; 
  27771  530c
  27772  530c				   .
  27773  530c							; 
  27774  530c
  27775  530c				   .
  27776  530c							; 
  27777  530c
  27778  530c				   .L01283		;  player1color:
  27779  530c
  27780  530c		       a2 c6		      LDX	#<playercolorL01283_1
  27781  530e		       86 87		      STX	player1color
  27782  5310		       a9 fb		      LDA	#>playercolorL01283_1
  27783  5312		       85 88		      STA	player1color+1
  27784  5314				   .
  27785  5314							; 
  27786  5314
  27787  5314				   .
  27788  5314							; 
  27789  5314
  27790  5314				   .
  27791  5314							; 
  27792  5314
  27793  5314				   .
  27794  5314							; 
  27795  5314
  27796  5314				   .L01284		;  on _GmOvr_Tmp_Frame_Counter goto __Gy_Anim_00 __Gy_Anim_01 __Gy_Anim_02 __Gy_Anim_03 __Gy_Anim_04 __Gy_Anim_05
  27797  5314
  27798  5314		       a6 b9		      LDX	_GmOvr_Tmp_Frame_Counter
  27799  5316		       bd 1f 93 	      LDA	.L01284jumptablehi,x
  27800  5319		       48		      PHA
  27801  531a		       bd 25 93 	      LDA	.L01284jumptablelo,x
  27802  531d		       48		      PHA
  27803  531e		       60		      RTS
  27804  531f				   .L01284jumptablehi
  27805  531f		       97		      .byte.b	>(.__Gy_Anim_00-1)
  27806  5320		       97		      .byte.b	>(.__Gy_Anim_01-1)
  27807  5321		       97		      .byte.b	>(.__Gy_Anim_02-1)
  27808  5322		       97		      .byte.b	>(.__Gy_Anim_03-1)
  27809  5323		       97		      .byte.b	>(.__Gy_Anim_04-1)
  27810  5324		       97		      .byte.b	>(.__Gy_Anim_05-1)
  27811  5325				   .L01284jumptablelo
  27812  5325		       52		      .byte.b	<(.__Gy_Anim_00-1)
  27813  5326		       61		      .byte.b	<(.__Gy_Anim_01-1)
  27814  5327		       70		      .byte.b	<(.__Gy_Anim_02-1)
  27815  5328		       7f		      .byte.b	<(.__Gy_Anim_03-1)
  27816  5329		       8e		      .byte.b	<(.__Gy_Anim_04-1)
  27817  532a		       9d		      .byte.b	<(.__Gy_Anim_05-1)
  27818  532b				   .
  27819  532b							; 
  27820  532b
  27821  532b				   .__Gy_Anim_Done
  27822  532b							; __Gy_Anim_Done
  27823  532b
  27824  532b				   .
  27825  532b							; 
  27826  532b
  27827  532b				   .
  27828  532b							; 
  27829  532b
  27830  532b				   .
  27831  532b							; 
  27832  532b
  27833  532b				   .
  27834  532b							; 
  27835  532b
  27836  532b				   .L01285		;  _GmOvr_Tmp_Frame_Counter  =  _GmOvr_Tmp_Frame_Counter  +  1
  27837  532b
  27838  532b		       e6 b9		      INC	_GmOvr_Tmp_Frame_Counter
  27839  532d				   .
  27840  532d							; 
  27841  532d
  27842  532d				   .__Skip_Gyvolver
  27843  532d							; __Skip_Gyvolver
  27844  532d
  27845  532d				   .
  27846  532d							; 
  27847  532d
  27848  532d				   .
  27849  532d							; 
  27850  532d
  27851  532d				   .
  27852  532d							; 
  27853  532d
  27854  532d				   .
  27855  532d							; 
  27856  532d
  27857  532d				   .
  27858  532d							; 
  27859  532d
  27860  532d				   .
  27861  532d							; 
  27862  532d
  27863  532d				   .
  27864  532d							; 
  27865  532d
  27866  532d				   .
  27867  532d							; 
  27868  532d
  27869  532d				   .
  27870  532d							; 
  27871  532d
  27872  532d				   .
  27873  532d							; 
  27874  532d
  27875  532d				   .
  27876  532d							; 
  27877  532d
  27878  532d				   .
  27879  532d							; 
  27880  532d
  27881  532d				   .L01286		;  if _Bit3_Easter_Egg{3} then goto __Skip_All_GmOver_Pixels
  27882  532d
  27883  532d		       a5 c7		      LDA	_Bit3_Easter_Egg
  27884  532f		       29 08		      AND	#8
  27885  5331		       f0 03		      BEQ	.skipL01286
  27886  5333				   .condpart419
  27887  5333		       4c ff 93 	      jmp	.__Skip_All_GmOver_Pixels
  27888  5336
  27889  5336				   .skipL01286
  27890  5336				   .
  27891  5336							; 
  27892  5336
  27893  5336				   .
  27894  5336							; 
  27895  5336
  27896  5336				   .
  27897  5336							; 
  27898  5336
  27899  5336				   .
  27900  5336							; 
  27901  5336
  27902  5336				   .L01287		;  if _GmOvr_Tmp_x_Fill_Counter  >  15  &&  _GmOvr_Tmp_Y_Fill_Counter	>  10 then goto __Skip_Pixel_Fill
  27903  5336
  27904  5336		       a9 0f		      LDA	#15
  27905  5338		       c5 bb		      CMP	_GmOvr_Tmp_x_Fill_Counter
  27906  533a		       b0 09		      BCS	.skipL01287
  27907  533c				   .condpart420
  27908  533c		       a9 0a		      LDA	#10
  27909  533e		       c5 ba		      CMP	_GmOvr_Tmp_Y_Fill_Counter
  27910  5340		       b0 03		      BCS	.skip420then
  27911  5342				   .condpart421
  27912  5342		       4c a5 93 	      jmp	.__Skip_Pixel_Fill
  27913  5345
  27914  5345				   .skip420then
  27915  5345				   .skipL01287
  27916  5345				   .
  27917  5345							; 
  27918  5345
  27919  5345				   .
  27920  5345							; 
  27921  5345
  27922  5345				   .
  27923  5345							; 
  27924  5345
  27925  5345				   .
  27926  5345							; 
  27927  5345
  27928  5345				   .L01288		;  _GmOvr_Tmp_Y_Fill_Counter  =  _GmOvr_Tmp_Y_Fill_Counter  -	1
  27929  5345
  27930  5345		       c6 ba		      DEC	_GmOvr_Tmp_Y_Fill_Counter
  27931  5347				   .
  27932  5347							; 
  27933  5347
  27934  5347				   .
  27935  5347							; 
  27936  5347
  27937  5347				   .
  27938  5347							; 
  27939  5347
  27940  5347				   .
  27941  5347							; 
  27942  5347
  27943  5347				   .L01289		;  pfpixel _GmOvr_Tmp_x_Fill_Counter _GmOvr_Tmp_Y_Fill_Counter on
  27944  5347
  27945  5347		       a2 00		      LDX	#0
  27946  5349		       a4 ba		      LDY	_GmOvr_Tmp_Y_Fill_Counter
  27947  534b		       a5 bb		      LDA	_GmOvr_Tmp_x_Fill_Counter
  27948  534d		       85 ee		      sta	temp7
  27949  534f		       a9 93		      lda	#>(ret_point17-1)
  27950  5351		       48		      pha
  27951  5352		       a9 64		      lda	#<(ret_point17-1)
  27952  5354		       48		      pha
  27953  5355		       a9 f3		      lda	#>(pfpixel-1)
  27954  5357		       48		      pha
  27955  5358		       a9 bb		      lda	#<(pfpixel-1)
  27956  535a		       48		      pha
  27957  535b		       a5 ee		      lda	temp7
  27958  535d		       48		      pha
  27959  535e		       8a		      txa
  27960  535f		       48		      pha
  27961  5360		       a2 08		      ldx	#8
  27962  5362		       4c eb ff 	      jmp	BS_jsr
  27963  5365				   ret_point17
  27964  5365				   .
  27965  5365							; 
  27966  5365
  27967  5365				   .
  27968  5365							; 
  27969  5365
  27970  5365				   .
  27971  5365							; 
  27972  5365
  27973  5365				   .
  27974  5365							; 
  27975  5365
  27976  5365				   .L01290		;  temp5  =  31  -  _GmOvr_Tmp_x_Fill_Counter
  27977  5365
  27978  5365		       a9 1f		      LDA	#31
  27979  5367		       38		      SEC
  27980  5368		       e5 bb		      SBC	_GmOvr_Tmp_x_Fill_Counter
  27981  536a		       85 a0		      STA	temp5
  27982  536c				   .
  27983  536c							; 
  27984  536c
  27985  536c				   .
  27986  536c							; 
  27987  536c
  27988  536c				   .
  27989  536c							; 
  27990  536c
  27991  536c				   .
  27992  536c							; 
  27993  536c
  27994  536c				   .L01291		;  pfpixel temp5 _GmOvr_Tmp_Y_Fill_Counter on
  27995  536c
  27996  536c		       a2 00		      LDX	#0
  27997  536e		       a4 ba		      LDY	_GmOvr_Tmp_Y_Fill_Counter
  27998  5370		       a5 a0		      LDA	temp5
  27999  5372		       85 ee		      sta	temp7
  28000  5374		       a9 93		      lda	#>(ret_point18-1)
  28001  5376		       48		      pha
  28002  5377		       a9 89		      lda	#<(ret_point18-1)
  28003  5379		       48		      pha
  28004  537a		       a9 f3		      lda	#>(pfpixel-1)
  28005  537c		       48		      pha
  28006  537d		       a9 bb		      lda	#<(pfpixel-1)
  28007  537f		       48		      pha
  28008  5380		       a5 ee		      lda	temp7
  28009  5382		       48		      pha
  28010  5383		       8a		      txa
  28011  5384		       48		      pha
  28012  5385		       a2 08		      ldx	#8
  28013  5387		       4c eb ff 	      jmp	BS_jsr
  28014  538a				   ret_point18
  28015  538a				   .
  28016  538a							; 
  28017  538a
  28018  538a				   .
  28019  538a							; 
  28020  538a
  28021  538a				   .
  28022  538a							; 
  28023  538a
  28024  538a				   .
  28025  538a							; 
  28026  538a
  28027  538a				   .L01292		;  if _GmOvr_Tmp_Y_Fill_Counter  <>  0 then goto __Skip_Pixel_Fill
  28028  538a
  28029  538a		       a5 ba		      LDA	_GmOvr_Tmp_Y_Fill_Counter
  28030  538c		       c9 00		      CMP	#0
  28031  538e		       f0 03		      BEQ	.skipL01292
  28032  5390				   .condpart422
  28033  5390		       4c a5 93 	      jmp	.__Skip_Pixel_Fill
  28034  5393
  28035  5393				   .skipL01292
  28036  5393				   .
  28037  5393							; 
  28038  5393
  28039  5393				   .
  28040  5393							; 
  28041  5393
  28042  5393				   .
  28043  5393							; 
  28044  5393
  28045  5393				   .
  28046  5393							; 
  28047  5393
  28048  5393				   .L01293		;  _GmOvr_Tmp_Y_Fill_Counter  =  11
  28049  5393
  28050  5393		       a9 0b		      LDA	#11
  28051  5395		       85 ba		      STA	_GmOvr_Tmp_Y_Fill_Counter
  28052  5397				   .
  28053  5397							; 
  28054  5397
  28055  5397				   .
  28056  5397							; 
  28057  5397
  28058  5397				   .
  28059  5397							; 
  28060  5397
  28061  5397				   .
  28062  5397							; 
  28063  5397
  28064  5397				   .L01294		;  _GmOvr_Tmp_x_Fill_Counter  =  _GmOvr_Tmp_x_Fill_Counter  +	1
  28065  5397
  28066  5397		       e6 bb		      INC	_GmOvr_Tmp_x_Fill_Counter
  28067  5399				   .
  28068  5399							; 
  28069  5399
  28070  5399				   .
  28071  5399							; 
  28072  5399
  28073  5399				   .
  28074  5399							; 
  28075  5399
  28076  5399				   .
  28077  5399							; 
  28078  5399
  28079  5399				   .L01295		;  _Ch1_Sound	=  _c_GO_Seaweed_Attack
  28080  5399
  28081  5399		       a9 0a		      LDA	#_c_GO_Seaweed_Attack
  28082  539b		       85 dd		      STA	_Ch1_Sound
  28083  539d				   .
  28084  539d							; 
  28085  539d
  28086  539d				   .L01296		;  AUDV0  =  0  :  _Ch0_Counter  =  0	:  _GmOvr_Tmp_Tone_Flip_Counter  =  0
  28087  539d
  28088  539d		       a9 00		      LDA	#0
  28089  539f		       85 19		      STA	AUDV0
  28090  53a1		       85 dc		      STA	_Ch0_Counter
  28091  53a3		       85 b8		      STA	_GmOvr_Tmp_Tone_Flip_Counter
  28092  53a5				   .
  28093  53a5							; 
  28094  53a5
  28095  53a5				   .__Skip_Pixel_Fill
  28096  53a5							; __Skip_Pixel_Fill
  28097  53a5
  28098  53a5				   .
  28099  53a5							; 
  28100  53a5
  28101  53a5				   .
  28102  53a5							; 
  28103  53a5
  28104  53a5				   .
  28105  53a5							; 
  28106  53a5
  28107  53a5				   .
  28108  53a5							; 
  28109  53a5
  28110  53a5				   .L01297		;  temp5  =   ( rand & 31 )   :  temp6  =   ( rand & 7 )   +	( rand / 64 ) 
  28111  53a5
  28112  53a5							; complex statement detected
  28113  53a5		       a5 a2		      lda	rand
  28114  53a7		       4a		      lsr
  28115  53a8					      ifconst	rand16
  28116  53a8		       26 d3		      rol	rand16
  28117  53aa					      endif
  28118  53aa		       90 02		      bcc	*+4
  28119  53ac		       49 b4		      eor	#$B4
  28120  53ae		       85 a2		      sta	rand
  28121  53b0					      ifconst	rand16
  28122  53b0		       45 d3		      eor	rand16
  28123  53b2					      endif
  28124  53b2		       29 1f		      AND	#31
  28125  53b4		       85 a0		      STA	temp5
  28126  53b6							; complex statement detected
  28127  53b6		       a5 a2		      lda	rand
  28128  53b8		       4a		      lsr
  28129  53b9					      ifconst	rand16
  28130  53b9		       26 d3		      rol	rand16
  28131  53bb					      endif
  28132  53bb		       90 02		      bcc	*+4
  28133  53bd		       49 b4		      eor	#$B4
  28134  53bf		       85 a2		      sta	rand
  28135  53c1					      ifconst	rand16
  28136  53c1		       45 d3		      eor	rand16
  28137  53c3					      endif
  28138  53c3		       29 07		      AND	#7
  28139  53c5		       48		      PHA
  28140  53c6		       a5 a2		      lda	rand
  28141  53c8		       4a		      lsr
  28142  53c9					      ifconst	rand16
  28143  53c9		       26 d3		      rol	rand16
  28144  53cb					      endif
  28145  53cb		       90 02		      bcc	*+4
  28146  53cd		       49 b4		      eor	#$B4
  28147  53cf		       85 a2		      sta	rand
  28148  53d1					      ifconst	rand16
  28149  53d1		       45 d3		      eor	rand16
  28150  53d3					      endif
  28151  53d3		       4a		      lsr
  28152  53d4		       4a		      lsr
  28153  53d5		       4a		      lsr
  28154  53d6		       4a		      lsr
  28155  53d7		       4a		      lsr
  28156  53d8		       4a		      lsr
  28157  53d9		       ba		      TSX
  28158  53da		       e8		      INX
  28159  53db		       9a		      TXS
  28160  53dc		       18		      CLC
  28161  53dd		       75 00		      ADC	$00,x
  28162  53df		       85 a1		      STA	temp6
  28163  53e1				   .
  28164  53e1							; 
  28165  53e1
  28166  53e1				   .
  28167  53e1							; 
  28168  53e1
  28169  53e1				   .
  28170  53e1							; 
  28171  53e1
  28172  53e1				   .
  28173  53e1							; 
  28174  53e1
  28175  53e1				   .L01298		;  pfpixel temp5 temp6 on
  28176  53e1
  28177  53e1		       a2 00		      LDX	#0
  28178  53e3		       a4 a1		      LDY	temp6
  28179  53e5		       a5 a0		      LDA	temp5
  28180  53e7		       85 ee		      sta	temp7
  28181  53e9		       a9 93		      lda	#>(ret_point19-1)
  28182  53eb		       48		      pha
  28183  53ec		       a9 fe		      lda	#<(ret_point19-1)
  28184  53ee		       48		      pha
  28185  53ef		       a9 f3		      lda	#>(pfpixel-1)
  28186  53f1		       48		      pha
  28187  53f2		       a9 bb		      lda	#<(pfpixel-1)
  28188  53f4		       48		      pha
  28189  53f5		       a5 ee		      lda	temp7
  28190  53f7		       48		      pha
  28191  53f8		       8a		      txa
  28192  53f9		       48		      pha
  28193  53fa		       a2 08		      ldx	#8
  28194  53fc		       4c eb ff 	      jmp	BS_jsr
  28195  53ff				   ret_point19
  28196  53ff				   .
  28197  53ff							; 
  28198  53ff
  28199  53ff				   .__Skip_All_GmOver_Pixels
  28200  53ff							; __Skip_All_GmOver_Pixels
  28201  53ff
  28202  53ff				   .
  28203  53ff							; 
  28204  53ff
  28205  53ff				   .
  28206  53ff							; 
  28207  53ff
  28208  53ff				   .
  28209  53ff							; 
  28210  53ff
  28211  53ff				   .
  28212  53ff							; 
  28213  53ff
  28214  53ff				   .
  28215  53ff							; 
  28216  53ff
  28217  53ff				   .
  28218  53ff							; 
  28219  53ff
  28220  53ff				   .
  28221  53ff							; 
  28222  53ff
  28223  53ff				   .
  28224  53ff							; 
  28225  53ff
  28226  53ff				   .
  28227  53ff							; 
  28228  53ff
  28229  53ff				   .
  28230  53ff							; 
  28231  53ff
  28232  53ff				   .L01299		;  if _Bit3_Easter_Egg{3} then goto __Skip_GmOver_Close_In_Sound
  28233  53ff
  28234  53ff		       a5 c7		      LDA	_Bit3_Easter_Egg
  28235  5401		       29 08		      AND	#8
  28236  5403		       f0 03		      BEQ	.skipL01299
  28237  5405				   .condpart423
  28238  5405		       4c 60 94 	      jmp	.__Skip_GmOver_Close_In_Sound
  28239  5408
  28240  5408				   .skipL01299
  28241  5408				   .
  28242  5408							; 
  28243  5408
  28244  5408				   .
  28245  5408							; 
  28246  5408
  28247  5408				   .
  28248  5408							; 
  28249  5408
  28250  5408				   .
  28251  5408							; 
  28252  5408
  28253  5408				   .L01300		;  if _Ch1_Sound  <>  _c_GO_Seaweed_Attack then goto __Skip_GmOver_Close_In_Sound
  28254  5408
  28255  5408		       a5 dd		      LDA	_Ch1_Sound
  28256  540a		       c9 0a		      CMP	#_c_GO_Seaweed_Attack
  28257  540c		       f0 03		      BEQ	.skipL01300
  28258  540e				   .condpart424
  28259  540e		       4c 60 94 	      jmp	.__Skip_GmOver_Close_In_Sound
  28260  5411
  28261  5411				   .skipL01300
  28262  5411				   .
  28263  5411							; 
  28264  5411
  28265  5411				   .
  28266  5411							; 
  28267  5411
  28268  5411				   .
  28269  5411							; 
  28270  5411
  28271  5411				   .
  28272  5411							; 
  28273  5411
  28274  5411				   .L01301		;  AUDV0  =  3
  28275  5411
  28276  5411		       a9 03		      LDA	#3
  28277  5413		       85 19		      STA	AUDV0
  28278  5415				   .
  28279  5415							; 
  28280  5415
  28281  5415				   .L01302		;  if _Ch1_Counter  >	48 then AUDV0  =  4
  28282  5415
  28283  5415		       a9 30		      LDA	#48
  28284  5417		       c5 df		      CMP	_Ch1_Counter
  28285  5419		       b0 04		      BCS	.skipL01302
  28286  541b				   .condpart425
  28287  541b		       a9 04		      LDA	#4
  28288  541d		       85 19		      STA	AUDV0
  28289  541f				   .skipL01302
  28290  541f				   .
  28291  541f							; 
  28292  541f
  28293  541f				   .L01303		;  if _Ch1_Counter  >	96 then AUDV0  =  5
  28294  541f
  28295  541f		       a9 60		      LDA	#96
  28296  5421		       c5 df		      CMP	_Ch1_Counter
  28297  5423		       b0 04		      BCS	.skipL01303
  28298  5425				   .condpart426
  28299  5425		       a9 05		      LDA	#5
  28300  5427		       85 19		      STA	AUDV0
  28301  5429				   .skipL01303
  28302  5429				   .
  28303  5429							; 
  28304  5429
  28305  5429				   .L01304		;  if _Ch1_Counter  >	140 then AUDV0	=  6
  28306  5429
  28307  5429		       a9 8c		      LDA	#140
  28308  542b		       c5 df		      CMP	_Ch1_Counter
  28309  542d		       b0 04		      BCS	.skipL01304
  28310  542f				   .condpart427
  28311  542f		       a9 06		      LDA	#6
  28312  5431		       85 19		      STA	AUDV0
  28313  5433				   .skipL01304
  28314  5433				   .
  28315  5433							; 
  28316  5433
  28317  5433				   .L01305		;  if _Ch0_Sound  <>  _c_Game_Over then AUDV0	=  7
  28318  5433
  28319  5433		       a5 da		      LDA	_Ch0_Sound
  28320  5435		       c9 06		      CMP	#_c_Game_Over
  28321  5437		       f0 04		      BEQ	.skipL01305
  28322  5439				   .condpart428
  28323  5439		       a9 07		      LDA	#7
  28324  543b		       85 19		      STA	AUDV0
  28325  543d				   .skipL01305
  28326  543d				   .
  28327  543d							; 
  28328  543d
  28329  543d				   .L01306		;  AUDC0  =  8
  28330  543d
  28331  543d		       a9 08		      LDA	#8
  28332  543f		       85 15		      STA	AUDC0
  28333  5441				   .
  28334  5441							; 
  28335  5441
  28336  5441				   .
  28337  5441							; 
  28338  5441
  28339  5441				   .
  28340  5441							; 
  28341  5441
  28342  5441				   .
  28343  5441							; 
  28344  5441
  28345  5441				   .L01307		;  _GmOvr_Tmp_Tone_Flip_Counter  =  _GmOvr_Tmp_Tone_Flip_Counter  +  1
  28346  5441
  28347  5441		       e6 b8		      INC	_GmOvr_Tmp_Tone_Flip_Counter
  28348  5443				   .
  28349  5443							; 
  28350  5443
  28351  5443				   .
  28352  5443							; 
  28353  5443
  28354  5443				   .
  28355  5443							; 
  28356  5443
  28357  5443				   .
  28358  5443							; 
  28359  5443
  28360  5443				   .L01308		;  if _GmOvr_Tmp_Tone_Flip_Counter{0} then AUDC0  =  14
  28361  5443
  28362  5443		       a5 b8		      LDA	_GmOvr_Tmp_Tone_Flip_Counter
  28363  5445		       4a		      LSR
  28364  5446		       90 04		      BCC	.skipL01308
  28365  5448				   .condpart429
  28366  5448		       a9 0e		      LDA	#14
  28367  544a		       85 15		      STA	AUDC0
  28368  544c				   .skipL01308
  28369  544c				   .
  28370  544c							; 
  28371  544c
  28372  544c				   .
  28373  544c							; 
  28374  544c
  28375  544c				   .
  28376  544c							; 
  28377  544c
  28378  544c				   .
  28379  544c							; 
  28380  544c
  28381  544c				   .L01309		;  _Ch0_Counter  =  _Ch0_Counter  +  1
  28382  544c
  28383  544c		       e6 dc		      INC	_Ch0_Counter
  28384  544e				   .
  28385  544e							; 
  28386  544e
  28387  544e				   .
  28388  544e							; 
  28389  544e
  28390  544e				   .
  28391  544e							; 
  28392  544e
  28393  544e				   .
  28394  544e							; 
  28395  544e
  28396  544e				   .L01310		;  if _Ch0_Counter  =	31 then AUDV0  =  0  :	_Ch1_Sound  =  0  :  _Ch0_Counter  =  0
  28397  544e
  28398  544e		       a5 dc		      LDA	_Ch0_Counter
  28399  5450		       c9 1f		      CMP	#31
  28400  5452		       d0 08		      BNE	.skipL01310
  28401  5454				   .condpart430
  28402  5454		       a9 00		      LDA	#0
  28403  5456		       85 19		      STA	AUDV0
  28404  5458		       85 dd		      STA	_Ch1_Sound
  28405  545a		       85 dc		      STA	_Ch0_Counter
  28406  545c				   .skipL01310
  28407  545c				   .
  28408  545c							; 
  28409  545c
  28410  545c				   .
  28411  545c							; 
  28412  545c
  28413  545c				   .
  28414  545c							; 
  28415  545c
  28416  545c				   .
  28417  545c							; 
  28418  545c
  28419  545c				   .L01311		;  AUDF0  =  _Ch0_Counter
  28420  545c
  28421  545c		       a5 dc		      LDA	_Ch0_Counter
  28422  545e		       85 17		      STA	AUDF0
  28423  5460				   .
  28424  5460							; 
  28425  5460
  28426  5460				   .__Skip_GmOver_Close_In_Sound
  28427  5460							; __Skip_GmOver_Close_In_Sound
  28428  5460
  28429  5460				   .
  28430  5460							; 
  28431  5460
  28432  5460				   .
  28433  5460							; 
  28434  5460
  28435  5460				   .
  28436  5460							; 
  28437  5460
  28438  5460				   .
  28439  5460							; 
  28440  5460
  28441  5460				   .
  28442  5460							; 
  28443  5460
  28444  5460				   .
  28445  5460							; 
  28446  5460
  28447  5460				   .
  28448  5460							; 
  28449  5460
  28450  5460				   .
  28451  5460							; 
  28452  5460
  28453  5460				   .
  28454  5460							; 
  28455  5460
  28456  5460				   .
  28457  5460							; 
  28458  5460
  28459  5460				   .
  28460  5460							; 
  28461  5460
  28462  5460				   .
  28463  5460							; 
  28464  5460
  28465  5460				   .L01312		;  if !_Ch1_Sound then goto __GO_Skip_Ch_1
  28466  5460
  28467  5460		       a5 dd		      LDA	_Ch1_Sound
  28468  5462		       d0 03		      BNE	.skipL01312
  28469  5464				   .condpart431
  28470  5464		       4c 1f 95 	      jmp	.__GO_Skip_Ch_1
  28471  5467
  28472  5467				   .skipL01312
  28473  5467				   .
  28474  5467							; 
  28475  5467
  28476  5467				   .
  28477  5467							; 
  28478  5467
  28479  5467				   .
  28480  5467							; 
  28481  5467
  28482  5467				   .
  28483  5467							; 
  28484  5467
  28485  5467				   .L01313		;  _Ch1_Duration  =  _Ch1_Duration  -	1
  28486  5467
  28487  5467		       c6 de		      DEC	_Ch1_Duration
  28488  5469				   .
  28489  5469							; 
  28490  5469
  28491  5469				   .
  28492  5469							; 
  28493  5469
  28494  5469				   .
  28495  5469							; 
  28496  5469
  28497  5469				   .
  28498  5469							; 
  28499  5469
  28500  5469				   .
  28501  5469							; 
  28502  5469
  28503  5469				   .L01314		;  if _Ch1_Duration  >  0 then goto __GO_Skip_Ch_1
  28504  5469
  28505  5469		       a9 00		      LDA	#0
  28506  546b		       c5 de		      CMP	_Ch1_Duration
  28507  546d		       b0 03		      BCS	.skipL01314
  28508  546f				   .condpart432
  28509  546f		       4c 1f 95 	      jmp	.__GO_Skip_Ch_1
  28510  5472
  28511  5472				   .skipL01314
  28512  5472				   .
  28513  5472							; 
  28514  5472
  28515  5472				   .
  28516  5472							; 
  28517  5472
  28518  5472				   .
  28519  5472							; 
  28520  5472
  28521  5472				   .
  28522  5472							; 
  28523  5472
  28524  5472				   .
  28525  5472							; 
  28526  5472
  28527  5472				   .
  28528  5472							; 
  28529  5472
  28530  5472				   .
  28531  5472							; 
  28532  5472
  28533  5472				   .
  28534  5472							; 
  28535  5472
  28536  5472				   .
  28537  5472							; 
  28538  5472
  28539  5472				   .
  28540  5472							; 
  28541  5472
  28542  5472				   .L01315		;  if _Ch0_Sound  <>  _c_Game_Over then goto __GO_Skip_End_Sound
  28543  5472
  28544  5472		       a5 da		      LDA	_Ch0_Sound
  28545  5474		       c9 06		      CMP	#_c_Game_Over
  28546  5476		       f0 03		      BEQ	.skipL01315
  28547  5478				   .condpart433
  28548  5478		       4c b7 94 	      jmp	.__GO_Skip_End_Sound
  28549  547b
  28550  547b				   .skipL01315
  28551  547b				   .
  28552  547b							; 
  28553  547b
  28554  547b				   .
  28555  547b							; 
  28556  547b
  28557  547b				   .
  28558  547b							; 
  28559  547b
  28560  547b				   .
  28561  547b							; 
  28562  547b
  28563  547b				   .L01316		;  temp4  =  _SD_Over[_Ch1_Counter]
  28564  547b
  28565  547b		       a6 df		      LDX	_Ch1_Counter
  28566  547d		       bd 7e 96 	      LDA	_SD_Over,x
  28567  5480		       85 9f		      STA	temp4
  28568  5482				   .
  28569  5482							; 
  28570  5482
  28571  5482				   .
  28572  5482							; 
  28573  5482
  28574  5482				   .
  28575  5482							; 
  28576  5482
  28577  5482				   .
  28578  5482							; 
  28579  5482
  28580  5482				   .L01317		;  if temp4  =  255 then goto __GO_Clear_Ch_1
  28581  5482
  28582  5482		       a5 9f		      LDA	temp4
  28583  5484		       c9 ff		      CMP	#255
  28584  5486		       d0 03		      BNE	.skipL01317
  28585  5488				   .condpart434
  28586  5488		       4c 11 95 	      jmp	.__GO_Clear_Ch_1
  28587  548b
  28588  548b				   .skipL01317
  28589  548b				   .
  28590  548b							; 
  28591  548b
  28592  548b				   .
  28593  548b							; 
  28594  548b
  28595  548b				   .
  28596  548b							; 
  28597  548b
  28598  548b				   .
  28599  548b							; 
  28600  548b
  28601  548b				   .L01318		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  28602  548b
  28603  548b		       e6 df		      INC	_Ch1_Counter
  28604  548d				   .L01319		;  temp5  =  _SD_Over[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter	+  1
  28605  548d
  28606  548d		       a6 df		      LDX	_Ch1_Counter
  28607  548f		       bd 7e 96 	      LDA	_SD_Over,x
  28608  5492		       85 a0		      STA	temp5
  28609  5494		       e6 df		      INC	_Ch1_Counter
  28610  5496				   .L01320		;  temp6  =  _SD_Over[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter	+  1
  28611  5496
  28612  5496		       a6 df		      LDX	_Ch1_Counter
  28613  5498		       bd 7e 96 	      LDA	_SD_Over,x
  28614  549b		       85 a1		      STA	temp6
  28615  549d		       e6 df		      INC	_Ch1_Counter
  28616  549f				   .
  28617  549f							; 
  28618  549f
  28619  549f				   .
  28620  549f							; 
  28621  549f
  28622  549f				   .
  28623  549f							; 
  28624  549f
  28625  549f				   .
  28626  549f							; 
  28627  549f
  28628  549f				   .L01321		;  AUDV1  =  temp4
  28629  549f
  28630  549f		       a5 9f		      LDA	temp4
  28631  54a1		       85 1a		      STA	AUDV1
  28632  54a3				   .L01322		;  AUDC1  =  temp5
  28633  54a3
  28634  54a3		       a5 a0		      LDA	temp5
  28635  54a5		       85 16		      STA	AUDC1
  28636  54a7				   .L01323		;  AUDF1  =  temp6
  28637  54a7
  28638  54a7		       a5 a1		      LDA	temp6
  28639  54a9		       85 18		      STA	AUDF1
  28640  54ab				   .
  28641  54ab							; 
  28642  54ab
  28643  54ab				   .
  28644  54ab							; 
  28645  54ab
  28646  54ab				   .
  28647  54ab							; 
  28648  54ab
  28649  54ab				   .
  28650  54ab							; 
  28651  54ab
  28652  54ab				   .L01324		;  _Ch1_Duration  =  _SD_Over[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter	+  1
  28653  54ab
  28654  54ab		       a6 df		      LDX	_Ch1_Counter
  28655  54ad		       bd 7e 96 	      LDA	_SD_Over,x
  28656  54b0		       85 de		      STA	_Ch1_Duration
  28657  54b2		       e6 df		      INC	_Ch1_Counter
  28658  54b4				   .
  28659  54b4							; 
  28660  54b4
  28661  54b4				   .
  28662  54b4							; 
  28663  54b4
  28664  54b4				   .
  28665  54b4							; 
  28666  54b4
  28667  54b4				   .
  28668  54b4							; 
  28669  54b4
  28670  54b4				   .L01325		;  goto __GO_Skip_Ch_1
  28671  54b4
  28672  54b4		       4c 1f 95 	      jmp	.__GO_Skip_Ch_1
  28673  54b7
  28674  54b7				   .
  28675  54b7							; 
  28676  54b7
  28677  54b7				   .__GO_Skip_End_Sound
  28678  54b7							; __GO_Skip_End_Sound
  28679  54b7
  28680  54b7				   .
  28681  54b7							; 
  28682  54b7
  28683  54b7				   .
  28684  54b7							; 
  28685  54b7
  28686  54b7				   .
  28687  54b7							; 
  28688  54b7
  28689  54b7				   .
  28690  54b7							; 
  28691  54b7
  28692  54b7				   .
  28693  54b7							; 
  28694  54b7
  28695  54b7				   .
  28696  54b7							; 
  28697  54b7
  28698  54b7				   .
  28699  54b7							; 
  28700  54b7
  28701  54b7				   .
  28702  54b7							; 
  28703  54b7
  28704  54b7				   .
  28705  54b7							; 
  28706  54b7
  28707  54b7				   .
  28708  54b7							; 
  28709  54b7
  28710  54b7				   .L01326		;  if !_Bit3_Easter_Egg{3} then goto __GO_Skip_Gyvolver_Sound
  28711  54b7
  28712  54b7		       a5 c7		      LDA	_Bit3_Easter_Egg
  28713  54b9		       29 08		      AND	#8
  28714  54bb		       d0 03		      BNE	.skipL01326
  28715  54bd				   .condpart435
  28716  54bd		       4c 0e 95 	      jmp	.__GO_Skip_Gyvolver_Sound
  28717  54c0
  28718  54c0				   .skipL01326
  28719  54c0				   .
  28720  54c0							; 
  28721  54c0
  28722  54c0				   .
  28723  54c0							; 
  28724  54c0
  28725  54c0				   .
  28726  54c0							; 
  28727  54c0
  28728  54c0				   .
  28729  54c0							; 
  28730  54c0
  28731  54c0				   .L01327		;  if _Ch0_Sound  =  _c_Game_Over then goto __GO_Skip_Gyvolver_Sound
  28732  54c0
  28733  54c0		       a5 da		      LDA	_Ch0_Sound
  28734  54c2		       c9 06		      CMP	#_c_Game_Over
  28735  54c4		       d0 03		      BNE	.skipL01327
  28736  54c6				   .condpart436
  28737  54c6		       4c 0e 95 	      jmp	.__GO_Skip_Gyvolver_Sound
  28738  54c9
  28739  54c9				   .skipL01327
  28740  54c9				   .
  28741  54c9							; 
  28742  54c9
  28743  54c9				   .
  28744  54c9							; 
  28745  54c9
  28746  54c9				   .
  28747  54c9							; 
  28748  54c9
  28749  54c9				   .
  28750  54c9							; 
  28751  54c9
  28752  54c9				   .L01328		;  if _Ch0_Sound  <>  _c_Gyvolver then goto __GO_Skip_Gyvolver_Sound
  28753  54c9
  28754  54c9		       a5 da		      LDA	_Ch0_Sound
  28755  54cb		       c9 07		      CMP	#_c_Gyvolver
  28756  54cd		       f0 03		      BEQ	.skipL01328
  28757  54cf				   .condpart437
  28758  54cf		       4c 0e 95 	      jmp	.__GO_Skip_Gyvolver_Sound
  28759  54d2
  28760  54d2				   .skipL01328
  28761  54d2				   .
  28762  54d2							; 
  28763  54d2
  28764  54d2				   .
  28765  54d2							; 
  28766  54d2
  28767  54d2				   .
  28768  54d2							; 
  28769  54d2
  28770  54d2				   .
  28771  54d2							; 
  28772  54d2
  28773  54d2				   .L01329		;  temp4  =  _SD_Gyvolver[_Ch1_Counter]
  28774  54d2
  28775  54d2		       a6 df		      LDX	_Ch1_Counter
  28776  54d4		       bd 3a 97 	      LDA	_SD_Gyvolver,x
  28777  54d7		       85 9f		      STA	temp4
  28778  54d9				   .
  28779  54d9							; 
  28780  54d9
  28781  54d9				   .
  28782  54d9							; 
  28783  54d9
  28784  54d9				   .
  28785  54d9							; 
  28786  54d9
  28787  54d9				   .
  28788  54d9							; 
  28789  54d9
  28790  54d9				   .L01330		;  if temp4  =  255 then goto __GO_Clear_Ch_1
  28791  54d9
  28792  54d9		       a5 9f		      LDA	temp4
  28793  54db		       c9 ff		      CMP	#255
  28794  54dd		       d0 03		      BNE	.skipL01330
  28795  54df				   .condpart438
  28796  54df		       4c 11 95 	      jmp	.__GO_Clear_Ch_1
  28797  54e2
  28798  54e2				   .skipL01330
  28799  54e2				   .
  28800  54e2							; 
  28801  54e2
  28802  54e2				   .
  28803  54e2							; 
  28804  54e2
  28805  54e2				   .
  28806  54e2							; 
  28807  54e2
  28808  54e2				   .
  28809  54e2							; 
  28810  54e2
  28811  54e2				   .L01331		;  _Ch1_Counter  =  _Ch1_Counter  +  1
  28812  54e2
  28813  54e2		       e6 df		      INC	_Ch1_Counter
  28814  54e4				   .L01332		;  temp5  =  _SD_Gyvolver[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +  1
  28815  54e4
  28816  54e4		       a6 df		      LDX	_Ch1_Counter
  28817  54e6		       bd 3a 97 	      LDA	_SD_Gyvolver,x
  28818  54e9		       85 a0		      STA	temp5
  28819  54eb		       e6 df		      INC	_Ch1_Counter
  28820  54ed				   .L01333		;  temp6  =  _SD_Gyvolver[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +  1
  28821  54ed
  28822  54ed		       a6 df		      LDX	_Ch1_Counter
  28823  54ef		       bd 3a 97 	      LDA	_SD_Gyvolver,x
  28824  54f2		       85 a1		      STA	temp6
  28825  54f4		       e6 df		      INC	_Ch1_Counter
  28826  54f6				   .
  28827  54f6							; 
  28828  54f6
  28829  54f6				   .
  28830  54f6							; 
  28831  54f6
  28832  54f6				   .
  28833  54f6							; 
  28834  54f6
  28835  54f6				   .
  28836  54f6							; 
  28837  54f6
  28838  54f6				   .L01334		;  AUDV1  =  temp4
  28839  54f6
  28840  54f6		       a5 9f		      LDA	temp4
  28841  54f8		       85 1a		      STA	AUDV1
  28842  54fa				   .L01335		;  AUDC1  =  temp5
  28843  54fa
  28844  54fa		       a5 a0		      LDA	temp5
  28845  54fc		       85 16		      STA	AUDC1
  28846  54fe				   .L01336		;  AUDF1  =  temp6
  28847  54fe
  28848  54fe		       a5 a1		      LDA	temp6
  28849  5500		       85 18		      STA	AUDF1
  28850  5502				   .
  28851  5502							; 
  28852  5502
  28853  5502				   .
  28854  5502							; 
  28855  5502
  28856  5502				   .
  28857  5502							; 
  28858  5502
  28859  5502				   .
  28860  5502							; 
  28861  5502
  28862  5502				   .L01337		;  _Ch1_Duration  =  _SD_Gyvolver[_Ch1_Counter]  :  _Ch1_Counter  =  _Ch1_Counter  +  1
  28863  5502
  28864  5502		       a6 df		      LDX	_Ch1_Counter
  28865  5504		       bd 3a 97 	      LDA	_SD_Gyvolver,x
  28866  5507		       85 de		      STA	_Ch1_Duration
  28867  5509		       e6 df		      INC	_Ch1_Counter
  28868  550b				   .
  28869  550b							; 
  28870  550b
  28871  550b				   .
  28872  550b							; 
  28873  550b
  28874  550b				   .
  28875  550b							; 
  28876  550b
  28877  550b				   .
  28878  550b							; 
  28879  550b
  28880  550b				   .L01338		;  goto __GO_Skip_Ch_1
  28881  550b
  28882  550b		       4c 1f 95 	      jmp	.__GO_Skip_Ch_1
  28883  550e
  28884  550e				   .
  28885  550e							; 
  28886  550e
  28887  550e				   .__GO_Skip_Gyvolver_Sound
  28888  550e							; __GO_Skip_Gyvolver_Sound
  28889  550e
  28890  550e				   .
  28891  550e							; 
  28892  550e
  28893  550e				   .
  28894  550e							; 
  28895  550e
  28896  550e				   .
  28897  550e							; 
  28898  550e
  28899  550e				   .
  28900  550e							; 
  28901  550e
  28902  550e				   .
  28903  550e							; 
  28904  550e
  28905  550e				   .
  28906  550e							; 
  28907  550e
  28908  550e				   .
  28909  550e							; 
  28910  550e
  28911  550e				   .L01339		;  goto __GO_Skip_Ch_1
  28912  550e
  28913  550e		       4c 1f 95 	      jmp	.__GO_Skip_Ch_1
  28914  5511
  28915  5511				   .
  28916  5511							; 
  28917  5511
  28918  5511				   .
  28919  5511							; 
  28920  5511
  28921  5511				   .
  28922  5511							; 
  28923  5511
  28924  5511				   .
  28925  5511							; 
  28926  5511
  28927  5511				   .
  28928  5511							; 
  28929  5511
  28930  5511				   .
  28931  5511							; 
  28932  5511
  28933  5511				   .
  28934  5511							; 
  28935  5511
  28936  5511				   .__GO_Clear_Ch_1
  28937  5511							; __GO_Clear_Ch_1
  28938  5511
  28939  5511				   .
  28940  5511							; 
  28941  5511
  28942  5511				   .L01340		;  AUDV1  =  0  :  _Ch0_Sound	=  0
  28943  5511
  28944  5511		       a9 00		      LDA	#0
  28945  5513		       85 1a		      STA	AUDV1
  28946  5515		       85 da		      STA	_Ch0_Sound
  28947  5517				   .
  28948  5517							; 
  28949  5517
  28950  5517				   .L01341		;  _Ch1_Duration  =  1  :  _Ch1_Counter  =  200
  28951  5517
  28952  5517		       a9 01		      LDA	#1
  28953  5519		       85 de		      STA	_Ch1_Duration
  28954  551b		       a9 c8		      LDA	#200
  28955  551d		       85 df		      STA	_Ch1_Counter
  28956  551f				   .
  28957  551f							; 
  28958  551f
  28959  551f				   .
  28960  551f							; 
  28961  551f
  28962  551f				   .
  28963  551f							; 
  28964  551f
  28965  551f				   .
  28966  551f							; 
  28967  551f
  28968  551f				   .
  28969  551f							; 
  28970  551f
  28971  551f				   .
  28972  551f							; 
  28973  551f
  28974  551f				   .
  28975  551f							; 
  28976  551f
  28977  551f				   .__GO_Skip_Ch_1
  28978  551f							; __GO_Skip_Ch_1
  28979  551f
  28980  551f				   .
  28981  551f							; 
  28982  551f
  28983  551f				   .
  28984  551f							; 
  28985  551f
  28986  551f				   .
  28987  551f							; 
  28988  551f
  28989  551f				   .
  28990  551f							; 
  28991  551f
  28992  551f				   .
  28993  551f							; 
  28994  551f
  28995  551f				   .
  28996  551f							; 
  28997  551f
  28998  551f				   .
  28999  551f							; 
  29000  551f
  29001  551f				   .L01342		;  if bally  <  200 then bally  =  bally  +  1
  29002  551f
  29003  551f		       a5 89		      LDA	bally
  29004  5521		       c9 c8		      CMP	#200
  29005  5523		       b0 02		      BCS	.skipL01342
  29006  5525				   .condpart439
  29007  5525		       e6 89		      INC	bally
  29008  5527				   .skipL01342
  29009  5527				   .
  29010  5527							; 
  29011  5527
  29012  5527				   .
  29013  5527							; 
  29014  5527
  29015  5527				   .
  29016  5527							; 
  29017  5527
  29018  5527				   .
  29019  5527							; 
  29020  5527
  29021  5527				   .
  29022  5527							; 
  29023  5527
  29024  5527				   .
  29025  5527							; 
  29026  5527
  29027  5527				   .
  29028  5527							; 
  29029  5527
  29030  5527				   .L01343		;  if _Bit1_Tmp_Ship_On_Screen{1}  &&	player1y  <  200 then _P1_Up_Down  =  _P1_Up_Down  +  0.98
  29031  5527
  29032  5527		       a5 c4		      LDA	_Bit1_Tmp_Ship_On_Screen
  29033  5529		       29 02		      AND	#2
  29034  552b		       f0 13		      BEQ	.skipL01343
  29035  552d				   .condpart440
  29036  552d		       a5 86		      LDA	player1y
  29037  552f		       c9 c8		      CMP	#200
  29038  5531		       b0 0d		      BCS	.skip440then
  29039  5533				   .condpart441
  29040  5533		       a5 d6		      LDA	c
  29041  5535		       18		      CLC
  29042  5536		       69 fa		      ADC	#250
  29043  5538		       85 d6		      STA	c
  29044  553a		       a5 86		      LDA	_P1_Up_Down
  29045  553c		       69 00		      ADC	#0
  29046  553e		       85 86		      STA	_P1_Up_Down
  29047  5540				   .skip440then
  29048  5540				   .skipL01343
  29049  5540				   .
  29050  5540							; 
  29051  5540
  29052  5540				   .
  29053  5540							; 
  29054  5540
  29055  5540				   .
  29056  5540							; 
  29057  5540
  29058  5540				   .
  29059  5540							; 
  29060  5540
  29061  5540				   .
  29062  5540							; 
  29063  5540
  29064  5540				   .
  29065  5540							; 
  29066  5540
  29067  5540				   .
  29068  5540							; 
  29069  5540
  29070  5540				   .L01344		;  if _Bit1_Tmp_Ship_On_Screen{1} then if player0y  <	150 then _P0_Up_Down  =  _P0_Up_Down  +  0.80
  29071  5540
  29072  5540		       a5 c4		      LDA	_Bit1_Tmp_Ship_On_Screen
  29073  5542		       29 02		      AND	#2
  29074  5544		       f0 13		      BEQ	.skipL01344
  29075  5546				   .condpart442
  29076  5546		       a5 85		      LDA	player0y
  29077  5548		       c9 96		      CMP	#150
  29078  554a		       b0 0d		      BCS	.skip442then
  29079  554c				   .condpart443
  29080  554c		       a5 d5		      LDA	b
  29081  554e		       18		      CLC
  29082  554f		       69 cc		      ADC	#204
  29083  5551		       85 d5		      STA	b
  29084  5553		       a5 85		      LDA	_P0_Up_Down
  29085  5555		       69 00		      ADC	#0
  29086  5557		       85 85		      STA	_P0_Up_Down
  29087  5559				   .skip442then
  29088  5559				   .skipL01344
  29089  5559				   .
  29090  5559							; 
  29091  5559
  29092  5559				   .
  29093  5559							; 
  29094  5559
  29095  5559				   .
  29096  5559							; 
  29097  5559
  29098  5559				   .
  29099  5559							; 
  29100  5559
  29101  5559				   .
  29102  5559							; 
  29103  5559
  29104  5559				   .
  29105  5559							; 
  29106  5559
  29107  5559				   .
  29108  5559							; 
  29109  5559
  29110  5559				   .
  29111  5559							; 
  29112  5559
  29113  5559				   .
  29114  5559							; 
  29115  5559
  29116  5559				   .
  29117  5559							; 
  29118  5559
  29119  5559				   .L01345		;  if !_Bit3_Easter_Egg{3} then goto __Skip_Gyvolver_Activation
  29120  5559
  29121  5559		       a5 c7		      LDA	_Bit3_Easter_Egg
  29122  555b		       29 08		      AND	#8
  29123  555d		       d0 03		      BNE	.skipL01345
  29124  555f				   .condpart444
  29125  555f		       4c 89 95 	      jmp	.__Skip_Gyvolver_Activation
  29126  5562
  29127  5562				   .skipL01345
  29128  5562				   .
  29129  5562							; 
  29130  5562
  29131  5562				   .
  29132  5562							; 
  29133  5562
  29134  5562				   .
  29135  5562							; 
  29136  5562
  29137  5562				   .
  29138  5562							; 
  29139  5562
  29140  5562				   .
  29141  5562							; 
  29142  5562
  29143  5562				   .L01346		;  if player0y  <>  120 then goto __Skip_Gyvolver_Activation
  29144  5562
  29145  5562		       a5 85		      LDA	player0y
  29146  5564		       c9 78		      CMP	#120
  29147  5566		       f0 03		      BEQ	.skipL01346
  29148  5568				   .condpart445
  29149  5568		       4c 89 95 	      jmp	.__Skip_Gyvolver_Activation
  29150  556b
  29151  556b				   .skipL01346
  29152  556b				   .
  29153  556b							; 
  29154  556b
  29155  556b				   .
  29156  556b							; 
  29157  556b
  29158  556b				   .
  29159  556b							; 
  29160  556b
  29161  556b				   .
  29162  556b							; 
  29163  556b
  29164  556b				   .L01347		;  _Bit1_Tmp_Ship_On_Screen{1}  =  0  :  _Ch1_Counter	=  0
  29165  556b
  29166  556b		       a5 c4		      LDA	_Bit1_Tmp_Ship_On_Screen
  29167  556d		       29 fd		      AND	#253
  29168  556f		       85 c4		      STA	_Bit1_Tmp_Ship_On_Screen
  29169  5571		       a9 00		      LDA	#0
  29170  5573		       85 df		      STA	_Ch1_Counter
  29171  5575				   .
  29172  5575							; 
  29173  5575
  29174  5575				   .L01348		;  _Ch0_Sound	=  _c_Gyvolver	:  _Ch1_Duration  =  1
  29175  5575
  29176  5575		       a9 07		      LDA	#_c_Gyvolver
  29177  5577		       85 da		      STA	_Ch0_Sound
  29178  5579		       a9 01		      LDA	#1
  29179  557b		       85 de		      STA	_Ch1_Duration
  29180  557d				   .
  29181  557d							; 
  29182  557d
  29183  557d				   .L01349		;  player1x  =  80  :	player1y  =  100  :  player0y  =  150
  29184  557d
  29185  557d		       a9 50		      LDA	#80
  29186  557f		       85 81		      STA	player1x
  29187  5581		       a9 64		      LDA	#100
  29188  5583		       85 86		      STA	player1y
  29189  5585		       a9 96		      LDA	#150
  29190  5587		       85 85		      STA	player0y
  29191  5589				   .
  29192  5589							; 
  29193  5589
  29194  5589				   .__Skip_Gyvolver_Activation
  29195  5589							; __Skip_Gyvolver_Activation
  29196  5589
  29197  5589				   .
  29198  5589							; 
  29199  5589
  29200  5589				   .
  29201  5589							; 
  29202  5589
  29203  5589				   .
  29204  5589							; 
  29205  5589
  29206  5589				   .
  29207  5589							; 
  29208  5589
  29209  5589				   .
  29210  5589							; 
  29211  5589
  29212  5589				   .
  29213  5589							; 
  29214  5589
  29215  5589				   .
  29216  5589							; 
  29217  5589
  29218  5589				   .
  29219  5589							; 
  29220  5589
  29221  5589				   .
  29222  5589							; 
  29223  5589
  29224  5589				   .
  29225  5589							; 
  29226  5589
  29227  5589				   .L01350		;  if _Bit3_Easter_Egg{3} then goto __Skip_Game_Over_Message
  29228  5589
  29229  5589		       a5 c7		      LDA	_Bit3_Easter_Egg
  29230  558b		       29 08		      AND	#8
  29231  558d		       f0 03		      BEQ	.skipL01350
  29232  558f				   .condpart446
  29233  558f		       4c 2c 96 	      jmp	.__Skip_Game_Over_Message
  29234  5592
  29235  5592				   .skipL01350
  29236  5592				   .
  29237  5592							; 
  29238  5592
  29239  5592				   .
  29240  5592							; 
  29241  5592
  29242  5592				   .
  29243  5592							; 
  29244  5592
  29245  5592				   .
  29246  5592							; 
  29247  5592
  29248  5592				   .L01351		;  if _Bit1_Tmp_Ship_On_Screen{1}  &&	player0y  <  100 then goto __Skip_Game_Over_Message
  29249  5592
  29250  5592		       a5 c4		      LDA	_Bit1_Tmp_Ship_On_Screen
  29251  5594		       29 02		      AND	#2
  29252  5596		       f0 09		      BEQ	.skipL01351
  29253  5598				   .condpart447
  29254  5598		       a5 85		      LDA	player0y
  29255  559a		       c9 64		      CMP	#100
  29256  559c		       b0 03		      BCS	.skip447then
  29257  559e				   .condpart448
  29258  559e		       4c 2c 96 	      jmp	.__Skip_Game_Over_Message
  29259  55a1
  29260  55a1				   .skip447then
  29261  55a1				   .skipL01351
  29262  55a1				   .
  29263  55a1							; 
  29264  55a1
  29265  55a1				   .
  29266  55a1							; 
  29267  55a1
  29268  55a1				   .
  29269  55a1							; 
  29270  55a1
  29271  55a1				   .
  29272  55a1							; 
  29273  55a1
  29274  55a1				   .L01352		;  NUSIZ0  =  $07  :  NUSIZ1  =  $07  :  REFP0  =  0  :  COLUP0  =  $44
  29275  55a1
  29276  55a1		       a9 07		      LDA	#$07
  29277  55a3		       85 04		      STA	NUSIZ0
  29278  55a5		       85 05		      STA	NUSIZ1
  29279  55a7		       a9 00		      LDA	#0
  29280  55a9		       85 0b		      STA	REFP0
  29281  55ab		       a9 44		      LDA	#$44
  29282  55ad		       85 06		      STA	COLUP0
  29283  55af				   .
  29284  55af							; 
  29285  55af
  29286  55af				   .
  29287  55af							; 
  29288  55af
  29289  55af				   .
  29290  55af							; 
  29291  55af
  29292  55af				   .
  29293  55af							; 
  29294  55af
  29295  55af				   .
  29296  55af							; 
  29297  55af
  29298  55af				   .
  29299  55af							; 
  29300  55af
  29301  55af				   .L01353		;  if player0y  >  56 then if _Master_Counter{0} then player0y  =  player0y  -  1  :  player1y  =  player1y  -  1
  29302  55af
  29303  55af		       a9 38		      LDA	#56
  29304  55b1		       c5 85		      CMP	player0y
  29305  55b3		       b0 09		      BCS	.skipL01353
  29306  55b5				   .condpart449
  29307  55b5		       a5 d8		      LDA	_Master_Counter
  29308  55b7		       4a		      LSR
  29309  55b8		       90 04		      BCC	.skip449then
  29310  55ba				   .condpart450
  29311  55ba		       c6 85		      DEC	player0y
  29312  55bc		       c6 86		      DEC	player1y
  29313  55be				   .skip449then
  29314  55be				   .skipL01353
  29315  55be				   .
  29316  55be							; 
  29317  55be
  29318  55be				   .
  29319  55be							; 
  29320  55be
  29321  55be				   .
  29322  55be							; 
  29323  55be
  29324  55be				   .
  29325  55be							; 
  29326  55be
  29327  55be				   .L01354		;  _GmOvr_Tmp_GOAnim_Counter  =  _GmOvr_Tmp_GOAnim_Counter  +	1
  29328  55be
  29329  55be		       e6 bf		      INC	_GmOvr_Tmp_GOAnim_Counter
  29330  55c0				   .
  29331  55c0							; 
  29332  55c0
  29333  55c0				   .
  29334  55c0							; 
  29335  55c0
  29336  55c0				   .
  29337  55c0							; 
  29338  55c0
  29339  55c0				   .
  29340  55c0							; 
  29341  55c0
  29342  55c0				   .
  29343  55c0							; 
  29344  55c0
  29345  55c0				   .L01355		;  if _GmOvr_Tmp_GOAnim_Counter  <  13 then goto __Skip_Game_Over_Message
  29346  55c0
  29347  55c0		       a5 bf		      LDA	_GmOvr_Tmp_GOAnim_Counter
  29348  55c2		       c9 0d		      CMP	#13
  29349  55c4		       b0 03		      BCS	.skipL01355
  29350  55c6				   .condpart451
  29351  55c6		       4c 2c 96 	      jmp	.__Skip_Game_Over_Message
  29352  55c9
  29353  55c9				   .skipL01355
  29354  55c9				   .
  29355  55c9							; 
  29356  55c9
  29357  55c9				   .
  29358  55c9							; 
  29359  55c9
  29360  55c9				   .
  29361  55c9							; 
  29362  55c9
  29363  55c9				   .
  29364  55c9							; 
  29365  55c9
  29366  55c9				   .L01356		;  _GmOvr_Tmp_GOAnim_Counter  =  0
  29367  55c9
  29368  55c9		       a9 00		      LDA	#0
  29369  55cb		       85 bf		      STA	_GmOvr_Tmp_GOAnim_Counter
  29370  55cd				   .
  29371  55cd							; 
  29372  55cd
  29373  55cd				   .
  29374  55cd							; 
  29375  55cd
  29376  55cd				   .
  29377  55cd							; 
  29378  55cd
  29379  55cd				   .
  29380  55cd							; 
  29381  55cd
  29382  55cd				   .L01357		;  on _GmOvr_Tmp_Frame_Counter goto __GOAn_00 __GOAn_01 __GOAn_02 __GOAn_03 __GOAn_04 __GOAn_05
  29383  55cd
  29384  55cd		       a6 b9		      LDX	_GmOvr_Tmp_Frame_Counter
  29385  55cf		       bd d8 95 	      LDA	.L01357jumptablehi,x
  29386  55d2		       48		      PHA
  29387  55d3		       bd de 95 	      LDA	.L01357jumptablelo,x
  29388  55d6		       48		      PHA
  29389  55d7		       60		      RTS
  29390  55d8				   .L01357jumptablehi
  29391  55d8		       97		      .byte.b	>(.__GOAn_00-1)
  29392  55d9		       97		      .byte.b	>(.__GOAn_01-1)
  29393  55da		       97		      .byte.b	>(.__GOAn_02-1)
  29394  55db		       98		      .byte.b	>(.__GOAn_03-1)
  29395  55dc		       98		      .byte.b	>(.__GOAn_04-1)
  29396  55dd		       98		      .byte.b	>(.__GOAn_05-1)
  29397  55de				   .L01357jumptablelo
  29398  55de		       b0		      .byte.b	<(.__GOAn_00-1)
  29399  55df		       cb		      .byte.b	<(.__GOAn_01-1)
  29400  55e0		       e6		      .byte.b	<(.__GOAn_02-1)
  29401  55e1		       01		      .byte.b	<(.__GOAn_03-1)
  29402  55e2		       1c		      .byte.b	<(.__GOAn_04-1)
  29403  55e3		       37		      .byte.b	<(.__GOAn_05-1)
  29404  55e4				   .
  29405  55e4							; 
  29406  55e4
  29407  55e4				   .__Game_Over_Anim_Done
  29408  55e4							; __Game_Over_Anim_Done
  29409  55e4
  29410  55e4				   .
  29411  55e4							; 
  29412  55e4
  29413  55e4				   .
  29414  55e4							; 
  29415  55e4
  29416  55e4				   .
  29417  55e4							; 
  29418  55e4
  29419  55e4				   .
  29420  55e4							; 
  29421  55e4
  29422  55e4				   .L01358		;  _GmOvr_Tmp_Frame_Counter  =  _GmOvr_Tmp_Frame_Counter  +  1
  29423  55e4
  29424  55e4		       e6 b9		      INC	_GmOvr_Tmp_Frame_Counter
  29425  55e6				   .
  29426  55e6							; 
  29427  55e6
  29428  55e6				   .__Game_Over_Anim_Done_02
  29429  55e6							; __Game_Over_Anim_Done_02
  29430  55e6
  29431  55e6				   .
  29432  55e6							; 
  29433  55e6
  29434  55e6				   .
  29435  55e6							; 
  29436  55e6
  29437  55e6				   .
  29438  55e6							; 
  29439  55e6
  29440  55e6				   .
  29441  55e6							; 
  29442  55e6
  29443  55e6				   .L01359		;  if !_Bit1_Tmp_Ship_On_Screen{1} then goto __Skip_Game_Over_Message
  29444  55e6
  29445  55e6		       a5 c4		      LDA	_Bit1_Tmp_Ship_On_Screen
  29446  55e8		       29 02		      AND	#2
  29447  55ea		       d0 03		      BNE	.skipL01359
  29448  55ec				   .condpart452
  29449  55ec		       4c 2c 96 	      jmp	.__Skip_Game_Over_Message
  29450  55ef
  29451  55ef				   .skipL01359
  29452  55ef				   .
  29453  55ef							; 
  29454  55ef
  29455  55ef				   .
  29456  55ef							; 
  29457  55ef
  29458  55ef				   .
  29459  55ef							; 
  29460  55ef
  29461  55ef				   .
  29462  55ef							; 
  29463  55ef
  29464  55ef				   .L01360		;  _Bit1_Tmp_Ship_On_Screen{1}  =  0
  29465  55ef
  29466  55ef		       a5 c4		      LDA	_Bit1_Tmp_Ship_On_Screen
  29467  55f1		       29 fd		      AND	#253
  29468  55f3		       85 c4		      STA	_Bit1_Tmp_Ship_On_Screen
  29469  55f5				   .
  29470  55f5							; 
  29471  55f5
  29472  55f5				   .
  29473  55f5							; 
  29474  55f5
  29475  55f5				   .
  29476  55f5							; 
  29477  55f5
  29478  55f5				   .
  29479  55f5							; 
  29480  55f5
  29481  55f5				   .L01361		;  CTRLPF  =  $21  :  player0x  =  48	:  player0y  =	120  :	player1x  =  player0x  +  32 :	player1y  =  120
  29482  55f5
  29483  55f5		       a9 21		      LDA	#$21
  29484  55f7		       85 0a		      STA	CTRLPF
  29485  55f9		       a9 30		      LDA	#48
  29486  55fb		       85 80		      STA	player0x
  29487  55fd		       a9 78		      LDA	#120
  29488  55ff		       85 85		      STA	player0y
  29489  5601		       a5 80		      LDA	player0x
  29490  5603		       18		      CLC
  29491  5604		       69 20		      ADC	#32
  29492  5606		       85 81		      STA	player1x
  29493  5608		       a9 78		      LDA	#120
  29494  560a		       85 86		      STA	player1y
  29495  560c				   .
  29496  560c							; 
  29497  560c
  29498  560c				   .L01362		;  player1color:
  29499  560c
  29500  560c		       a2 ce		      LDX	#<playercolorL01362_1
  29501  560e		       86 87		      STX	player1color
  29502  5610		       a9 fb		      LDA	#>playercolorL01362_1
  29503  5612		       85 88		      STA	player1color+1
  29504  5614				   .
  29505  5614							; 
  29506  5614
  29507  5614				   .L01363		;  player0:
  29508  5614
  29509  5614		       a2 e6		      LDX	#<playerL01363_0
  29510  5616		       86 8a		      STX	player0pointerlo
  29511  5618		       a9 fb		      LDA	#>playerL01363_0
  29512  561a		       85 8b		      STA	player0pointerhi
  29513  561c		       a9 00		      LDA	#0
  29514  561e		       85 8e		      STA	player0height
  29515  5620				   .
  29516  5620							; 
  29517  5620
  29518  5620				   .L01364		;  player1:
  29519  5620
  29520  5620		       a2 e7		      LDX	#<playerL01364_1
  29521  5622		       86 8c		      STX	player1pointerlo
  29522  5624		       a9 fb		      LDA	#>playerL01364_1
  29523  5626		       85 8d		      STA	player1pointerhi
  29524  5628		       a9 00		      LDA	#0
  29525  562a		       85 8f		      STA	player1height
  29526  562c				   .
  29527  562c							; 
  29528  562c
  29529  562c				   .__Skip_Game_Over_Message
  29530  562c							; __Skip_Game_Over_Message
  29531  562c
  29532  562c				   .
  29533  562c							; 
  29534  562c
  29535  562c				   .
  29536  562c							; 
  29537  562c
  29538  562c				   .
  29539  562c							; 
  29540  562c
  29541  562c				   .
  29542  562c							; 
  29543  562c
  29544  562c				   .
  29545  562c							; 
  29546  562c
  29547  562c				   .
  29548  562c							; 
  29549  562c
  29550  562c				   .
  29551  562c							; 
  29552  562c
  29553  562c				   .L01365		;  drawscreen
  29554  562c
  29555  562c		       85 ee		      sta	temp7
  29556  562e		       a9 96		      lda	#>(ret_point20-1)
  29557  5630		       48		      pha
  29558  5631		       a9 43		      lda	#<(ret_point20-1)
  29559  5633		       48		      pha
  29560  5634		       a9 f5		      lda	#>(drawscreen-1)
  29561  5636		       48		      pha
  29562  5637		       a9 86		      lda	#<(drawscreen-1)
  29563  5639		       48		      pha
  29564  563a		       a5 ee		      lda	temp7
  29565  563c		       48		      pha
  29566  563d		       8a		      txa
  29567  563e		       48		      pha
  29568  563f		       a2 08		      ldx	#8
  29569  5641		       4c eb ff 	      jmp	BS_jsr
  29570  5644				   ret_point20
  29571  5644				   .
  29572  5644							; 
  29573  5644
  29574  5644				   .
  29575  5644							; 
  29576  5644
  29577  5644				   .
  29578  5644							; 
  29579  5644
  29580  5644				   .
  29581  5644							; 
  29582  5644
  29583  5644				   .
  29584  5644							; 
  29585  5644
  29586  5644				   .
  29587  5644							; 
  29588  5644
  29589  5644				   .
  29590  5644							; 
  29591  5644
  29592  5644				   .
  29593  5644							; 
  29594  5644
  29595  5644				   .
  29596  5644							; 
  29597  5644
  29598  5644				   .
  29599  5644							; 
  29600  5644
  29601  5644				   .
  29602  5644							; 
  29603  5644
  29604  5644				   .
  29605  5644							; 
  29606  5644
  29607  5644				   .
  29608  5644							; 
  29609  5644
  29610  5644				   .
  29611  5644							; 
  29612  5644
  29613  5644				   .L01366		;  if _Frame_Counter  =  0 then goto __Game_Over_Loop
  29614  5644
  29615  5644		       a5 d9		      LDA	_Frame_Counter
  29616  5646		       c9 00		      CMP	#0
  29617  5648		       d0 03		      BNE	.skipL01366
  29618  564a				   .condpart453
  29619  564a		       4c fe 91 	      jmp	.__Game_Over_Loop
  29620  564d
  29621  564d				   .skipL01366
  29622  564d				   .
  29623  564d							; 
  29624  564d
  29625  564d				   .
  29626  564d							; 
  29627  564d
  29628  564d				   .
  29629  564d							; 
  29630  564d
  29631  564d				   .
  29632  564d							; 
  29633  564d
  29634  564d				   .
  29635  564d							; 
  29636  564d
  29637  564d				   .L01367		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Game_Over_Loop
  29638  564d
  29639  564d		       a9 01		      lda	#1
  29640  564f		       2c 82 02 	      bit	SWCHB
  29641  5652		       f0 0d		      BEQ	.skipL01367
  29642  5654				   .condpart454
  29643  5654		       24 0c		      bit	INPT4
  29644  5656		       10 09		      BPL	.skip454then
  29645  5658				   .condpart455
  29646  5658		       a5 c4		      LDA	_Bit0_Reset_Restrainer
  29647  565a		       29 fe		      AND	#254
  29648  565c		       85 c4		      STA	_Bit0_Reset_Restrainer
  29649  565e		       4c fe 91 	      jmp	.__Game_Over_Loop
  29650  5661
  29651  5661				   .skip454then
  29652  5661				   .skipL01367
  29653  5661				   .
  29654  5661							; 
  29655  5661
  29656  5661				   .
  29657  5661							; 
  29658  5661
  29659  5661				   .
  29660  5661							; 
  29661  5661
  29662  5661				   .
  29663  5661							; 
  29664  5661
  29665  5661				   .
  29666  5661							; 
  29667  5661
  29668  5661				   .L01368		;  if _Bit0_Reset_Restrainer{0} then goto __Game_Over_Loop
  29669  5661
  29670  5661		       a5 c4		      LDA	_Bit0_Reset_Restrainer
  29671  5663		       4a		      LSR
  29672  5664		       90 03		      BCC	.skipL01368
  29673  5666				   .condpart456
  29674  5666		       4c fe 91 	      jmp	.__Game_Over_Loop
  29675  5669
  29676  5669				   .skipL01368
  29677  5669				   .
  29678  5669							; 
  29679  5669
  29680  5669				   .
  29681  5669							; 
  29682  5669
  29683  5669				   .
  29684  5669							; 
  29685  5669
  29686  5669				   .
  29687  5669							; 
  29688  5669
  29689  5669				   .L01369		;  goto __Start_Restart bank1
  29690  5669
  29691  5669		       85 ee		      sta	temp7
  29692  566b		       a9 11		      lda	#>(.__Start_Restart-1)
  29693  566d		       48		      pha
  29694  566e		       a9 11		      lda	#<(.__Start_Restart-1)
  29695  5670		       48		      pha
  29696  5671		       a5 ee		      lda	temp7
  29697  5673		       48		      pha
  29698  5674		       8a		      txa
  29699  5675		       48		      pha
  29700  5676		       a2 01		      ldx	#1
  29701  5678		       4c eb ff 	      jmp	BS_jsr
  29702  567b				   .
  29703  567b							; 
  29704  567b
  29705  567b				   .
  29706  567b							; 
  29707  567b
  29708  567b				   .
  29709  567b							; 
  29710  567b
  29711  567b				   .
  29712  567b							; 
  29713  567b
  29714  567b				   .
  29715  567b							; 
  29716  567b
  29717  567b				   .
  29718  567b							; 
  29719  567b
  29720  567b				   .
  29721  567b							; 
  29722  567b
  29723  567b				   .
  29724  567b							; 
  29725  567b
  29726  567b				   .
  29727  567b							; 
  29728  567b
  29729  567b				   .
  29730  567b							; 
  29731  567b
  29732  567b				   .
  29733  567b							; 
  29734  567b
  29735  567b				   .
  29736  567b							; 
  29737  567b
  29738  567b				   .
  29739  567b							; 
  29740  567b
  29741  567b				   .
  29742  567b							; 
  29743  567b
  29744  567b				   .
  29745  567b							; 
  29746  567b
  29747  567b				   .
  29748  567b							; 
  29749  567b
  29750  567b				   .
  29751  567b							; 
  29752  567b
  29753  567b				   .
  29754  567b							; 
  29755  567b
  29756  567b				   .
  29757  567b							; 
  29758  567b
  29759  567b				   .
  29760  567b							; 
  29761  567b
  29762  567b				   .
  29763  567b							; 
  29764  567b
  29765  567b				   .L01370		;  data _SD_Over
  29766  567b
  29767  567b		       4c 37 97 	      JMP	.skipL01370
  29768  567e				   _SD_Over
  29769  567e		       08 08 01 	      .byte.b	8,8,1
  29770  5681
  29771  5681		       01		      .byte.b	1
  29772  5682
  29773  5682		       08 0e 0a 	      .byte.b	8,14,10
  29774  5685
  29775  5685		       01		      .byte.b	1
  29776  5686
  29777  5686		       08 08 02 	      .byte.b	8,8,2
  29778  5689
  29779  5689		       01		      .byte.b	1
  29780  568a
  29781  568a		       08 08 03 	      .byte.b	8,8,3
  29782  568d
  29783  568d		       01		      .byte.b	1
  29784  568e
  29785  568e		       08 0e 0a 	      .byte.b	8,14,10
  29786  5691
  29787  5691		       01		      .byte.b	1
  29788  5692
  29789  5692		       08 08 04 	      .byte.b	8,8,4
  29790  5695
  29791  5695		       01		      .byte.b	1
  29792  5696
  29793  5696		       08 08 05 	      .byte.b	8,8,5
  29794  5699
  29795  5699		       01		      .byte.b	1
  29796  569a
  29797  569a		       08 0e 0a 	      .byte.b	8,14,10
  29798  569d
  29799  569d		       01		      .byte.b	1
  29800  569e
  29801  569e		       08 08 06 	      .byte.b	8,8,6
  29802  56a1
  29803  56a1		       01		      .byte.b	1
  29804  56a2
  29805  56a2		       08 08 07 	      .byte.b	8,8,7
  29806  56a5
  29807  56a5		       01		      .byte.b	1
  29808  56a6
  29809  56a6		       08 0e 0a 	      .byte.b	8,14,10
  29810  56a9
  29811  56a9		       01		      .byte.b	1
  29812  56aa
  29813  56aa		       08 08 08 	      .byte.b	8,8,8
  29814  56ad
  29815  56ad		       01		      .byte.b	1
  29816  56ae
  29817  56ae		       08 08 09 	      .byte.b	8,8,9
  29818  56b1
  29819  56b1		       01		      .byte.b	1
  29820  56b2
  29821  56b2		       08 0e 0a 	      .byte.b	8,14,10
  29822  56b5
  29823  56b5		       01		      .byte.b	1
  29824  56b6
  29825  56b6		       08 08 0a 	      .byte.b	8,8,10
  29826  56b9
  29827  56b9		       01		      .byte.b	1
  29828  56ba
  29829  56ba		       08 08 0b 	      .byte.b	8,8,11
  29830  56bd
  29831  56bd		       01		      .byte.b	1
  29832  56be
  29833  56be		       08 0e 0a 	      .byte.b	8,14,10
  29834  56c1
  29835  56c1		       01		      .byte.b	1
  29836  56c2
  29837  56c2		       08 08 0c 	      .byte.b	8,8,12
  29838  56c5
  29839  56c5		       01		      .byte.b	1
  29840  56c6
  29841  56c6		       08 08 0d 	      .byte.b	8,8,13
  29842  56c9
  29843  56c9		       01		      .byte.b	1
  29844  56ca
  29845  56ca		       08 0e 0a 	      .byte.b	8,14,10
  29846  56cd
  29847  56cd		       01		      .byte.b	1
  29848  56ce
  29849  56ce		       08 08 0e 	      .byte.b	8,8,14
  29850  56d1
  29851  56d1		       01		      .byte.b	1
  29852  56d2
  29853  56d2		       08 08 0f 	      .byte.b	8,8,15
  29854  56d5
  29855  56d5		       01		      .byte.b	1
  29856  56d6
  29857  56d6		       08 0e 0a 	      .byte.b	8,14,10
  29858  56d9
  29859  56d9		       01		      .byte.b	1
  29860  56da
  29861  56da		       08 08 10 	      .byte.b	8,8,16
  29862  56dd
  29863  56dd		       01		      .byte.b	1
  29864  56de
  29865  56de		       08 08 11 	      .byte.b	8,8,17
  29866  56e1
  29867  56e1		       01		      .byte.b	1
  29868  56e2
  29869  56e2		       08 0e 0a 	      .byte.b	8,14,10
  29870  56e5
  29871  56e5		       01		      .byte.b	1
  29872  56e6
  29873  56e6		       08 08 12 	      .byte.b	8,8,18
  29874  56e9
  29875  56e9		       01		      .byte.b	1
  29876  56ea
  29877  56ea		       08 08 13 	      .byte.b	8,8,19
  29878  56ed
  29879  56ed		       01		      .byte.b	1
  29880  56ee
  29881  56ee		       08 0e 0a 	      .byte.b	8,14,10
  29882  56f1
  29883  56f1		       01		      .byte.b	1
  29884  56f2
  29885  56f2		       08 08 14 	      .byte.b	8,8,20
  29886  56f5
  29887  56f5		       01		      .byte.b	1
  29888  56f6
  29889  56f6		       08 08 15 	      .byte.b	8,8,21
  29890  56f9
  29891  56f9		       01		      .byte.b	1
  29892  56fa
  29893  56fa		       08 0e 0a 	      .byte.b	8,14,10
  29894  56fd
  29895  56fd		       01		      .byte.b	1
  29896  56fe
  29897  56fe		       08 08 16 	      .byte.b	8,8,22
  29898  5701
  29899  5701		       01		      .byte.b	1
  29900  5702
  29901  5702		       08 08 17 	      .byte.b	8,8,23
  29902  5705
  29903  5705		       01		      .byte.b	1
  29904  5706
  29905  5706		       08 0e 0a 	      .byte.b	8,14,10
  29906  5709
  29907  5709		       01		      .byte.b	1
  29908  570a
  29909  570a		       08 08 18 	      .byte.b	8,8,24
  29910  570d
  29911  570d		       01		      .byte.b	1
  29912  570e
  29913  570e		       08 08 19 	      .byte.b	8,8,25
  29914  5711
  29915  5711		       01		      .byte.b	1
  29916  5712
  29917  5712		       08 0e 0a 	      .byte.b	8,14,10
  29918  5715
  29919  5715		       01		      .byte.b	1
  29920  5716
  29921  5716		       08 08 1a 	      .byte.b	8,8,26
  29922  5719
  29923  5719		       01		      .byte.b	1
  29924  571a
  29925  571a		       08 08 1b 	      .byte.b	8,8,27
  29926  571d
  29927  571d		       01		      .byte.b	1
  29928  571e
  29929  571e		       08 0e 0a 	      .byte.b	8,14,10
  29930  5721
  29931  5721		       01		      .byte.b	1
  29932  5722
  29933  5722		       08 08 1c 	      .byte.b	8,8,28
  29934  5725
  29935  5725		       01		      .byte.b	1
  29936  5726
  29937  5726		       08 08 1d 	      .byte.b	8,8,29
  29938  5729
  29939  5729		       01		      .byte.b	1
  29940  572a
  29941  572a		       08 0e 0a 	      .byte.b	8,14,10
  29942  572d
  29943  572d		       01		      .byte.b	1
  29944  572e
  29945  572e		       08 08 1e 	      .byte.b	8,8,30
  29946  5731
  29947  5731		       01		      .byte.b	1
  29948  5732
  29949  5732		       08 0e 0a 	      .byte.b	8,14,10
  29950  5735
  29951  5735		       01		      .byte.b	1
  29952  5736
  29953  5736		       ff		      .byte.b	255
  29954  5737
  29955  5737				   .skipL01370
  29956  5737				   .
  29957  5737							; 
  29958  5737
  29959  5737				   .
  29960  5737							; 
  29961  5737
  29962  5737				   .
  29963  5737							; 
  29964  5737
  29965  5737				   .
  29966  5737							; 
  29967  5737
  29968  5737				   .
  29969  5737							; 
  29970  5737
  29971  5737				   .
  29972  5737							; 
  29973  5737
  29974  5737				   .
  29975  5737							; 
  29976  5737
  29977  5737				   .
  29978  5737							; 
  29979  5737
  29980  5737				   .
  29981  5737							; 
  29982  5737
  29983  5737				   .
  29984  5737							; 
  29985  5737
  29986  5737				   .L01371		;  data _SD_Gyvolver
  29987  5737
  29988  5737		       4c 53 97 	      JMP	.skipL01371
  29989  573a				   _SD_Gyvolver
  29990  573a		       08 0c 11 	      .byte.b	8,12,17
  29991  573d
  29992  573d		       02		      .byte.b	2
  29993  573e
  29994  573e		       02 0c 11 	      .byte.b	2,12,17
  29995  5741
  29996  5741		       08		      .byte.b	8
  29997  5742
  29998  5742		       08 0c 13 	      .byte.b	8,12,19
  29999  5745
  30000  5745		       02		      .byte.b	2
  30001  5746
  30002  5746		       02 0c 13 	      .byte.b	2,12,19
  30003  5749
  30004  5749		       08		      .byte.b	8
  30005  574a
  30006  574a		       08 0c 1d 	      .byte.b	8,12,29
  30007  574d
  30008  574d		       02		      .byte.b	2
  30009  574e
  30010  574e		       02 0c 1d 	      .byte.b	2,12,29
  30011  5751
  30012  5751		       08		      .byte.b	8
  30013  5752
  30014  5752		       ff		      .byte.b	255
  30015  5753
  30016  5753				   .skipL01371
  30017  5753				   .
  30018  5753							; 
  30019  5753
  30020  5753				   .
  30021  5753							; 
  30022  5753
  30023  5753				   .
  30024  5753							; 
  30025  5753
  30026  5753				   .
  30027  5753							; 
  30028  5753
  30029  5753				   .
  30030  5753							; 
  30031  5753
  30032  5753				   .
  30033  5753							; 
  30034  5753
  30035  5753				   .
  30036  5753							; 
  30037  5753
  30038  5753				   .
  30039  5753							; 
  30040  5753
  30041  5753				   .
  30042  5753							; 
  30043  5753
  30044  5753				   .
  30045  5753							; 
  30046  5753
  30047  5753				   .
  30048  5753							; 
  30049  5753
  30050  5753				   .__Gy_Anim_00
  30051  5753							; __Gy_Anim_00
  30052  5753
  30053  5753				   .L01372		;  player1:
  30054  5753
  30055  5753		       a2 e8		      LDX	#<playerL01372_1
  30056  5755		       86 8c		      STX	player1pointerlo
  30057  5757		       a9 fb		      LDA	#>playerL01372_1
  30058  5759		       85 8d		      STA	player1pointerhi
  30059  575b		       a9 07		      LDA	#7
  30060  575d		       85 8f		      STA	player1height
  30061  575f				   .L01373		;  goto __Gy_Anim_Done
  30062  575f
  30063  575f		       4c 2b 93 	      jmp	.__Gy_Anim_Done
  30064  5762
  30065  5762				   .
  30066  5762							; 
  30067  5762
  30068  5762				   .
  30069  5762							; 
  30070  5762
  30071  5762				   .__Gy_Anim_01
  30072  5762							; __Gy_Anim_01
  30073  5762
  30074  5762				   .L01374		;  player1:
  30075  5762
  30076  5762		       a2 f0		      LDX	#<playerL01374_1
  30077  5764		       86 8c		      STX	player1pointerlo
  30078  5766		       a9 fb		      LDA	#>playerL01374_1
  30079  5768		       85 8d		      STA	player1pointerhi
  30080  576a		       a9 07		      LDA	#7
  30081  576c		       85 8f		      STA	player1height
  30082  576e				   .L01375		;  goto __Gy_Anim_Done
  30083  576e
  30084  576e		       4c 2b 93 	      jmp	.__Gy_Anim_Done
  30085  5771
  30086  5771				   .
  30087  5771							; 
  30088  5771
  30089  5771				   .
  30090  5771							; 
  30091  5771
  30092  5771				   .__Gy_Anim_02
  30093  5771							; __Gy_Anim_02
  30094  5771
  30095  5771				   .L01376		;  player1:
  30096  5771
  30097  5771		       a2 f8		      LDX	#<playerL01376_1
  30098  5773		       86 8c		      STX	player1pointerlo
  30099  5775		       a9 fb		      LDA	#>playerL01376_1
  30100  5777		       85 8d		      STA	player1pointerhi
  30101  5779		       a9 07		      LDA	#7
  30102  577b		       85 8f		      STA	player1height
  30103  577d				   .L01377		;  goto __Gy_Anim_Done
  30104  577d
  30105  577d		       4c 2b 93 	      jmp	.__Gy_Anim_Done
  30106  5780
  30107  5780				   .
  30108  5780							; 
  30109  5780
  30110  5780				   .
  30111  5780							; 
  30112  5780
  30113  5780				   .__Gy_Anim_03
  30114  5780							; __Gy_Anim_03
  30115  5780
  30116  5780				   .L01378		;  player1:
  30117  5780
  30118  5780		       a2 00		      LDX	#<playerL01378_1
  30119  5782		       86 8c		      STX	player1pointerlo
  30120  5784		       a9 fc		      LDA	#>playerL01378_1
  30121  5786		       85 8d		      STA	player1pointerhi
  30122  5788		       a9 07		      LDA	#7
  30123  578a		       85 8f		      STA	player1height
  30124  578c				   .L01379		;  goto __Gy_Anim_Done
  30125  578c
  30126  578c		       4c 2b 93 	      jmp	.__Gy_Anim_Done
  30127  578f
  30128  578f				   .
  30129  578f							; 
  30130  578f
  30131  578f				   .
  30132  578f							; 
  30133  578f
  30134  578f				   .__Gy_Anim_04
  30135  578f							; __Gy_Anim_04
  30136  578f
  30137  578f				   .L01380		;  player1:
  30138  578f
  30139  578f		       a2 08		      LDX	#<playerL01380_1
  30140  5791		       86 8c		      STX	player1pointerlo
  30141  5793		       a9 fc		      LDA	#>playerL01380_1
  30142  5795		       85 8d		      STA	player1pointerhi
  30143  5797		       a9 07		      LDA	#7
  30144  5799		       85 8f		      STA	player1height
  30145  579b				   .L01381		;  goto __Gy_Anim_Done
  30146  579b
  30147  579b		       4c 2b 93 	      jmp	.__Gy_Anim_Done
  30148  579e
  30149  579e				   .
  30150  579e							; 
  30151  579e
  30152  579e				   .
  30153  579e							; 
  30154  579e
  30155  579e				   .__Gy_Anim_05
  30156  579e							; __Gy_Anim_05
  30157  579e
  30158  579e				   .L01382		;  player1:
  30159  579e
  30160  579e		       a2 10		      LDX	#<playerL01382_1
  30161  57a0		       86 8c		      STX	player1pointerlo
  30162  57a2		       a9 fc		      LDA	#>playerL01382_1
  30163  57a4		       85 8d		      STA	player1pointerhi
  30164  57a6		       a9 07		      LDA	#7
  30165  57a8		       85 8f		      STA	player1height
  30166  57aa				   .
  30167  57aa							; 
  30168  57aa
  30169  57aa				   .
  30170  57aa							; 
  30171  57aa
  30172  57aa				   .
  30173  57aa							; 
  30174  57aa
  30175  57aa				   .
  30176  57aa							; 
  30177  57aa
  30178  57aa				   .L01383		;  _GmOvr_Tmp_Frame_Counter  =  0
  30179  57aa
  30180  57aa		       a9 00		      LDA	#0
  30181  57ac		       85 b9		      STA	_GmOvr_Tmp_Frame_Counter
  30182  57ae				   .
  30183  57ae							; 
  30184  57ae
  30185  57ae				   .L01384		;  goto __Skip_Gyvolver
  30186  57ae
  30187  57ae		       4c 2d 93 	      jmp	.__Skip_Gyvolver
  30188  57b1
  30189  57b1				   .
  30190  57b1							; 
  30191  57b1
  30192  57b1				   .
  30193  57b1							; 
  30194  57b1
  30195  57b1				   .
  30196  57b1							; 
  30197  57b1
  30198  57b1				   .
  30199  57b1							; 
  30200  57b1
  30201  57b1				   .
  30202  57b1							; 
  30203  57b1
  30204  57b1				   .
  30205  57b1							; 
  30206  57b1
  30207  57b1				   .
  30208  57b1							; 
  30209  57b1
  30210  57b1				   .
  30211  57b1							; 
  30212  57b1
  30213  57b1				   .
  30214  57b1							; 
  30215  57b1
  30216  57b1				   .
  30217  57b1							; 
  30218  57b1
  30219  57b1				   .
  30220  57b1							; 
  30221  57b1
  30222  57b1				   .__GOAn_00
  30223  57b1							; __GOAn_00
  30224  57b1
  30225  57b1				   .L01385		;  player0:
  30226  57b1
  30227  57b1		       a2 18		      LDX	#<playerL01385_0
  30228  57b3		       86 8a		      STX	player0pointerlo
  30229  57b5		       a9 fc		      LDA	#>playerL01385_0
  30230  57b7		       85 8b		      STA	player0pointerhi
  30231  57b9		       a9 17		      LDA	#23
  30232  57bb		       85 8e		      STA	player0height
  30233  57bd				   .
  30234  57bd							; 
  30235  57bd
  30236  57bd				   .L01386		;  player1:
  30237  57bd
  30238  57bd		       a2 30		      LDX	#<playerL01386_1
  30239  57bf		       86 8c		      STX	player1pointerlo
  30240  57c1		       a9 fc		      LDA	#>playerL01386_1
  30241  57c3		       85 8d		      STA	player1pointerhi
  30242  57c5		       a9 17		      LDA	#23
  30243  57c7		       85 8f		      STA	player1height
  30244  57c9				   .
  30245  57c9							; 
  30246  57c9
  30247  57c9				   .L01387		;  goto __Game_Over_Anim_Done
  30248  57c9
  30249  57c9		       4c e4 95 	      jmp	.__Game_Over_Anim_Done
  30250  57cc
  30251  57cc				   .
  30252  57cc							; 
  30253  57cc
  30254  57cc				   .
  30255  57cc							; 
  30256  57cc
  30257  57cc				   .__GOAn_01
  30258  57cc							; __GOAn_01
  30259  57cc
  30260  57cc				   .L01388		;  player0:
  30261  57cc
  30262  57cc		       a2 48		      LDX	#<playerL01388_0
  30263  57ce		       86 8a		      STX	player0pointerlo
  30264  57d0		       a9 fc		      LDA	#>playerL01388_0
  30265  57d2		       85 8b		      STA	player0pointerhi
  30266  57d4		       a9 17		      LDA	#23
  30267  57d6		       85 8e		      STA	player0height
  30268  57d8				   .
  30269  57d8							; 
  30270  57d8
  30271  57d8				   .L01389		;  player1:
  30272  57d8
  30273  57d8		       a2 60		      LDX	#<playerL01389_1
  30274  57da		       86 8c		      STX	player1pointerlo
  30275  57dc		       a9 fc		      LDA	#>playerL01389_1
  30276  57de		       85 8d		      STA	player1pointerhi
  30277  57e0		       a9 17		      LDA	#23
  30278  57e2		       85 8f		      STA	player1height
  30279  57e4				   .
  30280  57e4							; 
  30281  57e4
  30282  57e4				   .L01390		;  goto __Game_Over_Anim_Done
  30283  57e4
  30284  57e4		       4c e4 95 	      jmp	.__Game_Over_Anim_Done
  30285  57e7
  30286  57e7				   .
  30287  57e7							; 
  30288  57e7
  30289  57e7				   .
  30290  57e7							; 
  30291  57e7
  30292  57e7				   .__GOAn_02
  30293  57e7							; __GOAn_02
  30294  57e7
  30295  57e7				   .L01391		;  player0:
  30296  57e7
  30297  57e7		       a2 78		      LDX	#<playerL01391_0
  30298  57e9		       86 8a		      STX	player0pointerlo
  30299  57eb		       a9 fc		      LDA	#>playerL01391_0
  30300  57ed		       85 8b		      STA	player0pointerhi
  30301  57ef		       a9 17		      LDA	#23
  30302  57f1		       85 8e		      STA	player0height
  30303  57f3				   .
  30304  57f3							; 
  30305  57f3
  30306  57f3				   .L01392		;  player1:
  30307  57f3
  30308  57f3		       a2 90		      LDX	#<playerL01392_1
  30309  57f5		       86 8c		      STX	player1pointerlo
  30310  57f7		       a9 fc		      LDA	#>playerL01392_1
  30311  57f9		       85 8d		      STA	player1pointerhi
  30312  57fb		       a9 17		      LDA	#23
  30313  57fd		       85 8f		      STA	player1height
  30314  57ff				   .
  30315  57ff							; 
  30316  57ff
  30317  57ff				   .L01393		;  goto __Game_Over_Anim_Done
  30318  57ff
  30319  57ff		       4c e4 95 	      jmp	.__Game_Over_Anim_Done
  30320  5802
  30321  5802				   .
  30322  5802							; 
  30323  5802
  30324  5802				   .
  30325  5802							; 
  30326  5802
  30327  5802				   .__GOAn_03
  30328  5802							; __GOAn_03
  30329  5802
  30330  5802				   .L01394		;  player0:
  30331  5802
  30332  5802		       a2 a8		      LDX	#<playerL01394_0
  30333  5804		       86 8a		      STX	player0pointerlo
  30334  5806		       a9 fc		      LDA	#>playerL01394_0
  30335  5808		       85 8b		      STA	player0pointerhi
  30336  580a		       a9 17		      LDA	#23
  30337  580c		       85 8e		      STA	player0height
  30338  580e				   .
  30339  580e							; 
  30340  580e
  30341  580e				   .L01395		;  player1:
  30342  580e
  30343  580e		       a2 c0		      LDX	#<playerL01395_1
  30344  5810		       86 8c		      STX	player1pointerlo
  30345  5812		       a9 fc		      LDA	#>playerL01395_1
  30346  5814		       85 8d		      STA	player1pointerhi
  30347  5816		       a9 17		      LDA	#23
  30348  5818		       85 8f		      STA	player1height
  30349  581a				   .
  30350  581a							; 
  30351  581a
  30352  581a				   .L01396		;  goto __Game_Over_Anim_Done
  30353  581a
  30354  581a		       4c e4 95 	      jmp	.__Game_Over_Anim_Done
  30355  581d
  30356  581d				   .
  30357  581d							; 
  30358  581d
  30359  581d				   .
  30360  581d							; 
  30361  581d
  30362  581d				   .__GOAn_04
  30363  581d							; __GOAn_04
  30364  581d
  30365  581d				   .L01397		;  player0:
  30366  581d
  30367  581d		       a2 d8		      LDX	#<playerL01397_0
  30368  581f		       86 8a		      STX	player0pointerlo
  30369  5821		       a9 fc		      LDA	#>playerL01397_0
  30370  5823		       85 8b		      STA	player0pointerhi
  30371  5825		       a9 17		      LDA	#23
  30372  5827		       85 8e		      STA	player0height
  30373  5829				   .
  30374  5829							; 
  30375  5829
  30376  5829				   .L01398		;  player1:
  30377  5829
  30378  5829		       a2 00		      LDX	#<playerL01398_1
  30379  582b		       86 8c		      STX	player1pointerlo
  30380  582d		       a9 fd		      LDA	#>playerL01398_1
  30381  582f		       85 8d		      STA	player1pointerhi
  30382  5831		       a9 17		      LDA	#23
  30383  5833		       85 8f		      STA	player1height
  30384  5835				   .
  30385  5835							; 
  30386  5835
  30387  5835				   .L01399		;  goto __Game_Over_Anim_Done
  30388  5835
  30389  5835		       4c e4 95 	      jmp	.__Game_Over_Anim_Done
  30390  5838
  30391  5838				   .
  30392  5838							; 
  30393  5838
  30394  5838				   .
  30395  5838							; 
  30396  5838
  30397  5838				   .__GOAn_05
  30398  5838							; __GOAn_05
  30399  5838
  30400  5838				   .L01400		;  player0:
  30401  5838
  30402  5838		       a2 18		      LDX	#<playerL01400_0
  30403  583a		       86 8a		      STX	player0pointerlo
  30404  583c		       a9 fd		      LDA	#>playerL01400_0
  30405  583e		       85 8b		      STA	player0pointerhi
  30406  5840		       a9 17		      LDA	#23
  30407  5842		       85 8e		      STA	player0height
  30408  5844				   .
  30409  5844							; 
  30410  5844
  30411  5844				   .L01401		;  player1:
  30412  5844
  30413  5844		       a2 30		      LDX	#<playerL01401_1
  30414  5846		       86 8c		      STX	player1pointerlo
  30415  5848		       a9 fd		      LDA	#>playerL01401_1
  30416  584a		       85 8d		      STA	player1pointerhi
  30417  584c		       a9 17		      LDA	#23
  30418  584e		       85 8f		      STA	player1height
  30419  5850				   .
  30420  5850							; 
  30421  5850
  30422  5850				   .
  30423  5850							; 
  30424  5850
  30425  5850				   .
  30426  5850							; 
  30427  5850
  30428  5850				   .
  30429  5850							; 
  30430  5850
  30431  5850				   .L01402		;  _GmOvr_Tmp_Frame_Counter  =  0
  30432  5850
  30433  5850		       a9 00		      LDA	#0
  30434  5852		       85 b9		      STA	_GmOvr_Tmp_Frame_Counter
  30435  5854				   .
  30436  5854							; 
  30437  5854
  30438  5854				   .L01403		;  goto __Game_Over_Anim_Done_02
  30439  5854
  30440  5854		       4c e6 95 	      jmp	.__Game_Over_Anim_Done_02
  30441  5857
  30442  5857				   .
  30443  5857							; 
  30444  5857
  30445  5857				   .
  30446  5857							; 
  30447  5857
  30448  5857				   .
  30449  5857							; 
  30450  5857
  30451  5857				   .
  30452  5857							; 
  30453  5857
  30454  5857				   .
  30455  5857							; 
  30456  5857
  30457  5857				   .
  30458  5857							; 
  30459  5857
  30460  5857				   .
  30461  5857							; 
  30462  5857
  30463  5857				   .L01404		;  bank 6
  30464  5857
  30465  5857					      if	ECHO5
      1917 bytes of ROM space left in bank 5
  30466  5857					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
  30467  5857					      endif
  30468  5857		       00 01	   ECHO5      =	1
  30469  5fd4					      ORG	$5FF4-bscode_length
  30470  5fd4					      RORG	$9FF4-bscode_length
  30471  5fd4		       a2 ff	   start_bank5 ldx	#$ff
  30472  5fd6				  -	      ifconst	FASTFETCH	; using DPC+
  30473  5fd6				  -	      stx	FASTFETCH
  30474  5fd6					      endif
  30475  5fd6		       9a		      txs
  30476  5fd7				  -	      if	bankswitch == 64
  30477  5fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  30478  5fd7					      else
  30479  5fd7		       a9 f3		      lda	#>(start-1)
  30480  5fd9					      endif
  30481  5fd9		       48		      pha
  30482  5fda		       a9 51		      lda	#<(start-1)
  30483  5fdc		       48		      pha
  30484  5fdd		       48		      pha
  30485  5fde		       8a		      txa
  30486  5fdf		       48		      pha
  30487  5fe0		       ba		      tsx
  30488  5fe1					      if	bankswitch != 64
  30489  5fe1		       b5 04		      lda	4,x	; get high byte of return address
  30490  5fe3		       2a		      rol
  30491  5fe4		       2a		      rol
  30492  5fe5		       2a		      rol
  30493  5fe6		       2a		      rol
  30494  5fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  30495  5fe9		       aa		      tax
  30496  5fea		       e8		      inx
  30497  5feb				  -	      else
  30498  5feb				  -	      lda	4,x	; get high byte of return address
  30499  5feb				  -	      tay
  30500  5feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  30501  5feb				  -	      sta	4,x
  30502  5feb				  -	      tya
  30503  5feb				  -	      lsr
  30504  5feb				  -	      lsr
  30505  5feb				  -	      lsr
  30506  5feb				  -	      lsr
  30507  5feb				  -	      tax
  30508  5feb				  -	      inx
  30509  5feb					      endif
  30510  5feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  30511  5fee		       68		      pla
  30512  5fef		       aa		      tax
  30513  5ff0		       68		      pla
  30514  5ff1		       60		      rts
  30515  5ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  30516  5ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  30517  5ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  30518  5ff2					      endif
  30519  5ffc					      ORG	$5FFC
  30520  5ffc					      RORG	$9FFC
  30521  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
  30522  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
  30523  6000					      ORG	$6000
  30524  6000					      RORG	$B000
  30525  6000					      repeat	256
  30526  6000		       ff		      .byte.b	$ff
  30525  6000					      repend
  30526  6001		       ff		      .byte.b	$ff
  30525  6001					      repend
  30526  6002		       ff		      .byte.b	$ff
  30525  6002					      repend
  30526  6003		       ff		      .byte.b	$ff
  30525  6003					      repend
  30526  6004		       ff		      .byte.b	$ff
  30525  6004					      repend
  30526  6005		       ff		      .byte.b	$ff
  30525  6005					      repend
  30526  6006		       ff		      .byte.b	$ff
  30525  6006					      repend
  30526  6007		       ff		      .byte.b	$ff
  30525  6007					      repend
  30526  6008		       ff		      .byte.b	$ff
  30525  6008					      repend
  30526  6009		       ff		      .byte.b	$ff
  30525  6009					      repend
  30526  600a		       ff		      .byte.b	$ff
  30525  600a					      repend
  30526  600b		       ff		      .byte.b	$ff
  30525  600b					      repend
  30526  600c		       ff		      .byte.b	$ff
  30525  600c					      repend
  30526  600d		       ff		      .byte.b	$ff
  30525  600d					      repend
  30526  600e		       ff		      .byte.b	$ff
  30525  600e					      repend
  30526  600f		       ff		      .byte.b	$ff
  30525  600f					      repend
  30526  6010		       ff		      .byte.b	$ff
  30525  6010					      repend
  30526  6011		       ff		      .byte.b	$ff
  30525  6011					      repend
  30526  6012		       ff		      .byte.b	$ff
  30525  6012					      repend
  30526  6013		       ff		      .byte.b	$ff
  30525  6013					      repend
  30526  6014		       ff		      .byte.b	$ff
  30525  6014					      repend
  30526  6015		       ff		      .byte.b	$ff
  30525  6015					      repend
  30526  6016		       ff		      .byte.b	$ff
  30525  6016					      repend
  30526  6017		       ff		      .byte.b	$ff
  30525  6017					      repend
  30526  6018		       ff		      .byte.b	$ff
  30525  6018					      repend
  30526  6019		       ff		      .byte.b	$ff
  30525  6019					      repend
  30526  601a		       ff		      .byte.b	$ff
  30525  601a					      repend
  30526  601b		       ff		      .byte.b	$ff
  30525  601b					      repend
  30526  601c		       ff		      .byte.b	$ff
  30525  601c					      repend
  30526  601d		       ff		      .byte.b	$ff
  30525  601d					      repend
  30526  601e		       ff		      .byte.b	$ff
  30525  601e					      repend
  30526  601f		       ff		      .byte.b	$ff
  30525  601f					      repend
  30526  6020		       ff		      .byte.b	$ff
  30525  6020					      repend
  30526  6021		       ff		      .byte.b	$ff
  30525  6021					      repend
  30526  6022		       ff		      .byte.b	$ff
  30525  6022					      repend
  30526  6023		       ff		      .byte.b	$ff
  30525  6023					      repend
  30526  6024		       ff		      .byte.b	$ff
  30525  6024					      repend
  30526  6025		       ff		      .byte.b	$ff
  30525  6025					      repend
  30526  6026		       ff		      .byte.b	$ff
  30525  6026					      repend
  30526  6027		       ff		      .byte.b	$ff
  30525  6027					      repend
  30526  6028		       ff		      .byte.b	$ff
  30525  6028					      repend
  30526  6029		       ff		      .byte.b	$ff
  30525  6029					      repend
  30526  602a		       ff		      .byte.b	$ff
  30525  602a					      repend
  30526  602b		       ff		      .byte.b	$ff
  30525  602b					      repend
  30526  602c		       ff		      .byte.b	$ff
  30525  602c					      repend
  30526  602d		       ff		      .byte.b	$ff
  30525  602d					      repend
  30526  602e		       ff		      .byte.b	$ff
  30525  602e					      repend
  30526  602f		       ff		      .byte.b	$ff
  30525  602f					      repend
  30526  6030		       ff		      .byte.b	$ff
  30525  6030					      repend
  30526  6031		       ff		      .byte.b	$ff
  30525  6031					      repend
  30526  6032		       ff		      .byte.b	$ff
  30525  6032					      repend
  30526  6033		       ff		      .byte.b	$ff
  30525  6033					      repend
  30526  6034		       ff		      .byte.b	$ff
  30525  6034					      repend
  30526  6035		       ff		      .byte.b	$ff
  30525  6035					      repend
  30526  6036		       ff		      .byte.b	$ff
  30525  6036					      repend
  30526  6037		       ff		      .byte.b	$ff
  30525  6037					      repend
  30526  6038		       ff		      .byte.b	$ff
  30525  6038					      repend
  30526  6039		       ff		      .byte.b	$ff
  30525  6039					      repend
  30526  603a		       ff		      .byte.b	$ff
  30525  603a					      repend
  30526  603b		       ff		      .byte.b	$ff
  30525  603b					      repend
  30526  603c		       ff		      .byte.b	$ff
  30525  603c					      repend
  30526  603d		       ff		      .byte.b	$ff
  30525  603d					      repend
  30526  603e		       ff		      .byte.b	$ff
  30525  603e					      repend
  30526  603f		       ff		      .byte.b	$ff
  30525  603f					      repend
  30526  6040		       ff		      .byte.b	$ff
  30525  6040					      repend
  30526  6041		       ff		      .byte.b	$ff
  30525  6041					      repend
  30526  6042		       ff		      .byte.b	$ff
  30525  6042					      repend
  30526  6043		       ff		      .byte.b	$ff
  30525  6043					      repend
  30526  6044		       ff		      .byte.b	$ff
  30525  6044					      repend
  30526  6045		       ff		      .byte.b	$ff
  30525  6045					      repend
  30526  6046		       ff		      .byte.b	$ff
  30525  6046					      repend
  30526  6047		       ff		      .byte.b	$ff
  30525  6047					      repend
  30526  6048		       ff		      .byte.b	$ff
  30525  6048					      repend
  30526  6049		       ff		      .byte.b	$ff
  30525  6049					      repend
  30526  604a		       ff		      .byte.b	$ff
  30525  604a					      repend
  30526  604b		       ff		      .byte.b	$ff
  30525  604b					      repend
  30526  604c		       ff		      .byte.b	$ff
  30525  604c					      repend
  30526  604d		       ff		      .byte.b	$ff
  30525  604d					      repend
  30526  604e		       ff		      .byte.b	$ff
  30525  604e					      repend
  30526  604f		       ff		      .byte.b	$ff
  30525  604f					      repend
  30526  6050		       ff		      .byte.b	$ff
  30525  6050					      repend
  30526  6051		       ff		      .byte.b	$ff
  30525  6051					      repend
  30526  6052		       ff		      .byte.b	$ff
  30525  6052					      repend
  30526  6053		       ff		      .byte.b	$ff
  30525  6053					      repend
  30526  6054		       ff		      .byte.b	$ff
  30525  6054					      repend
  30526  6055		       ff		      .byte.b	$ff
  30525  6055					      repend
  30526  6056		       ff		      .byte.b	$ff
  30525  6056					      repend
  30526  6057		       ff		      .byte.b	$ff
  30525  6057					      repend
  30526  6058		       ff		      .byte.b	$ff
  30525  6058					      repend
  30526  6059		       ff		      .byte.b	$ff
  30525  6059					      repend
  30526  605a		       ff		      .byte.b	$ff
  30525  605a					      repend
  30526  605b		       ff		      .byte.b	$ff
  30525  605b					      repend
  30526  605c		       ff		      .byte.b	$ff
  30525  605c					      repend
  30526  605d		       ff		      .byte.b	$ff
  30525  605d					      repend
  30526  605e		       ff		      .byte.b	$ff
  30525  605e					      repend
  30526  605f		       ff		      .byte.b	$ff
  30525  605f					      repend
  30526  6060		       ff		      .byte.b	$ff
  30525  6060					      repend
  30526  6061		       ff		      .byte.b	$ff
  30525  6061					      repend
  30526  6062		       ff		      .byte.b	$ff
  30525  6062					      repend
  30526  6063		       ff		      .byte.b	$ff
  30525  6063					      repend
  30526  6064		       ff		      .byte.b	$ff
  30525  6064					      repend
  30526  6065		       ff		      .byte.b	$ff
  30525  6065					      repend
  30526  6066		       ff		      .byte.b	$ff
  30525  6066					      repend
  30526  6067		       ff		      .byte.b	$ff
  30525  6067					      repend
  30526  6068		       ff		      .byte.b	$ff
  30525  6068					      repend
  30526  6069		       ff		      .byte.b	$ff
  30525  6069					      repend
  30526  606a		       ff		      .byte.b	$ff
  30525  606a					      repend
  30526  606b		       ff		      .byte.b	$ff
  30525  606b					      repend
  30526  606c		       ff		      .byte.b	$ff
  30525  606c					      repend
  30526  606d		       ff		      .byte.b	$ff
  30525  606d					      repend
  30526  606e		       ff		      .byte.b	$ff
  30525  606e					      repend
  30526  606f		       ff		      .byte.b	$ff
  30525  606f					      repend
  30526  6070		       ff		      .byte.b	$ff
  30525  6070					      repend
  30526  6071		       ff		      .byte.b	$ff
  30525  6071					      repend
  30526  6072		       ff		      .byte.b	$ff
  30525  6072					      repend
  30526  6073		       ff		      .byte.b	$ff
  30525  6073					      repend
  30526  6074		       ff		      .byte.b	$ff
  30525  6074					      repend
  30526  6075		       ff		      .byte.b	$ff
  30525  6075					      repend
  30526  6076		       ff		      .byte.b	$ff
  30525  6076					      repend
  30526  6077		       ff		      .byte.b	$ff
  30525  6077					      repend
  30526  6078		       ff		      .byte.b	$ff
  30525  6078					      repend
  30526  6079		       ff		      .byte.b	$ff
  30525  6079					      repend
  30526  607a		       ff		      .byte.b	$ff
  30525  607a					      repend
  30526  607b		       ff		      .byte.b	$ff
  30525  607b					      repend
  30526  607c		       ff		      .byte.b	$ff
  30525  607c					      repend
  30526  607d		       ff		      .byte.b	$ff
  30525  607d					      repend
  30526  607e		       ff		      .byte.b	$ff
  30525  607e					      repend
  30526  607f		       ff		      .byte.b	$ff
  30525  607f					      repend
  30526  6080		       ff		      .byte.b	$ff
  30525  6080					      repend
  30526  6081		       ff		      .byte.b	$ff
  30525  6081					      repend
  30526  6082		       ff		      .byte.b	$ff
  30525  6082					      repend
  30526  6083		       ff		      .byte.b	$ff
  30525  6083					      repend
  30526  6084		       ff		      .byte.b	$ff
  30525  6084					      repend
  30526  6085		       ff		      .byte.b	$ff
  30525  6085					      repend
  30526  6086		       ff		      .byte.b	$ff
  30525  6086					      repend
  30526  6087		       ff		      .byte.b	$ff
  30525  6087					      repend
  30526  6088		       ff		      .byte.b	$ff
  30525  6088					      repend
  30526  6089		       ff		      .byte.b	$ff
  30525  6089					      repend
  30526  608a		       ff		      .byte.b	$ff
  30525  608a					      repend
  30526  608b		       ff		      .byte.b	$ff
  30525  608b					      repend
  30526  608c		       ff		      .byte.b	$ff
  30525  608c					      repend
  30526  608d		       ff		      .byte.b	$ff
  30525  608d					      repend
  30526  608e		       ff		      .byte.b	$ff
  30525  608e					      repend
  30526  608f		       ff		      .byte.b	$ff
  30525  608f					      repend
  30526  6090		       ff		      .byte.b	$ff
  30525  6090					      repend
  30526  6091		       ff		      .byte.b	$ff
  30525  6091					      repend
  30526  6092		       ff		      .byte.b	$ff
  30525  6092					      repend
  30526  6093		       ff		      .byte.b	$ff
  30525  6093					      repend
  30526  6094		       ff		      .byte.b	$ff
  30525  6094					      repend
  30526  6095		       ff		      .byte.b	$ff
  30525  6095					      repend
  30526  6096		       ff		      .byte.b	$ff
  30525  6096					      repend
  30526  6097		       ff		      .byte.b	$ff
  30525  6097					      repend
  30526  6098		       ff		      .byte.b	$ff
  30525  6098					      repend
  30526  6099		       ff		      .byte.b	$ff
  30525  6099					      repend
  30526  609a		       ff		      .byte.b	$ff
  30525  609a					      repend
  30526  609b		       ff		      .byte.b	$ff
  30525  609b					      repend
  30526  609c		       ff		      .byte.b	$ff
  30525  609c					      repend
  30526  609d		       ff		      .byte.b	$ff
  30525  609d					      repend
  30526  609e		       ff		      .byte.b	$ff
  30525  609e					      repend
  30526  609f		       ff		      .byte.b	$ff
  30525  609f					      repend
  30526  60a0		       ff		      .byte.b	$ff
  30525  60a0					      repend
  30526  60a1		       ff		      .byte.b	$ff
  30525  60a1					      repend
  30526  60a2		       ff		      .byte.b	$ff
  30525  60a2					      repend
  30526  60a3		       ff		      .byte.b	$ff
  30525  60a3					      repend
  30526  60a4		       ff		      .byte.b	$ff
  30525  60a4					      repend
  30526  60a5		       ff		      .byte.b	$ff
  30525  60a5					      repend
  30526  60a6		       ff		      .byte.b	$ff
  30525  60a6					      repend
  30526  60a7		       ff		      .byte.b	$ff
  30525  60a7					      repend
  30526  60a8		       ff		      .byte.b	$ff
  30525  60a8					      repend
  30526  60a9		       ff		      .byte.b	$ff
  30525  60a9					      repend
  30526  60aa		       ff		      .byte.b	$ff
  30525  60aa					      repend
  30526  60ab		       ff		      .byte.b	$ff
  30525  60ab					      repend
  30526  60ac		       ff		      .byte.b	$ff
  30525  60ac					      repend
  30526  60ad		       ff		      .byte.b	$ff
  30525  60ad					      repend
  30526  60ae		       ff		      .byte.b	$ff
  30525  60ae					      repend
  30526  60af		       ff		      .byte.b	$ff
  30525  60af					      repend
  30526  60b0		       ff		      .byte.b	$ff
  30525  60b0					      repend
  30526  60b1		       ff		      .byte.b	$ff
  30525  60b1					      repend
  30526  60b2		       ff		      .byte.b	$ff
  30525  60b2					      repend
  30526  60b3		       ff		      .byte.b	$ff
  30525  60b3					      repend
  30526  60b4		       ff		      .byte.b	$ff
  30525  60b4					      repend
  30526  60b5		       ff		      .byte.b	$ff
  30525  60b5					      repend
  30526  60b6		       ff		      .byte.b	$ff
  30525  60b6					      repend
  30526  60b7		       ff		      .byte.b	$ff
  30525  60b7					      repend
  30526  60b8		       ff		      .byte.b	$ff
  30525  60b8					      repend
  30526  60b9		       ff		      .byte.b	$ff
  30525  60b9					      repend
  30526  60ba		       ff		      .byte.b	$ff
  30525  60ba					      repend
  30526  60bb		       ff		      .byte.b	$ff
  30525  60bb					      repend
  30526  60bc		       ff		      .byte.b	$ff
  30525  60bc					      repend
  30526  60bd		       ff		      .byte.b	$ff
  30525  60bd					      repend
  30526  60be		       ff		      .byte.b	$ff
  30525  60be					      repend
  30526  60bf		       ff		      .byte.b	$ff
  30525  60bf					      repend
  30526  60c0		       ff		      .byte.b	$ff
  30525  60c0					      repend
  30526  60c1		       ff		      .byte.b	$ff
  30525  60c1					      repend
  30526  60c2		       ff		      .byte.b	$ff
  30525  60c2					      repend
  30526  60c3		       ff		      .byte.b	$ff
  30525  60c3					      repend
  30526  60c4		       ff		      .byte.b	$ff
  30525  60c4					      repend
  30526  60c5		       ff		      .byte.b	$ff
  30525  60c5					      repend
  30526  60c6		       ff		      .byte.b	$ff
  30525  60c6					      repend
  30526  60c7		       ff		      .byte.b	$ff
  30525  60c7					      repend
  30526  60c8		       ff		      .byte.b	$ff
  30525  60c8					      repend
  30526  60c9		       ff		      .byte.b	$ff
  30525  60c9					      repend
  30526  60ca		       ff		      .byte.b	$ff
  30525  60ca					      repend
  30526  60cb		       ff		      .byte.b	$ff
  30525  60cb					      repend
  30526  60cc		       ff		      .byte.b	$ff
  30525  60cc					      repend
  30526  60cd		       ff		      .byte.b	$ff
  30525  60cd					      repend
  30526  60ce		       ff		      .byte.b	$ff
  30525  60ce					      repend
  30526  60cf		       ff		      .byte.b	$ff
  30525  60cf					      repend
  30526  60d0		       ff		      .byte.b	$ff
  30525  60d0					      repend
  30526  60d1		       ff		      .byte.b	$ff
  30525  60d1					      repend
  30526  60d2		       ff		      .byte.b	$ff
  30525  60d2					      repend
  30526  60d3		       ff		      .byte.b	$ff
  30525  60d3					      repend
  30526  60d4		       ff		      .byte.b	$ff
  30525  60d4					      repend
  30526  60d5		       ff		      .byte.b	$ff
  30525  60d5					      repend
  30526  60d6		       ff		      .byte.b	$ff
  30525  60d6					      repend
  30526  60d7		       ff		      .byte.b	$ff
  30525  60d7					      repend
  30526  60d8		       ff		      .byte.b	$ff
  30525  60d8					      repend
  30526  60d9		       ff		      .byte.b	$ff
  30525  60d9					      repend
  30526  60da		       ff		      .byte.b	$ff
  30525  60da					      repend
  30526  60db		       ff		      .byte.b	$ff
  30525  60db					      repend
  30526  60dc		       ff		      .byte.b	$ff
  30525  60dc					      repend
  30526  60dd		       ff		      .byte.b	$ff
  30525  60dd					      repend
  30526  60de		       ff		      .byte.b	$ff
  30525  60de					      repend
  30526  60df		       ff		      .byte.b	$ff
  30525  60df					      repend
  30526  60e0		       ff		      .byte.b	$ff
  30525  60e0					      repend
  30526  60e1		       ff		      .byte.b	$ff
  30525  60e1					      repend
  30526  60e2		       ff		      .byte.b	$ff
  30525  60e2					      repend
  30526  60e3		       ff		      .byte.b	$ff
  30525  60e3					      repend
  30526  60e4		       ff		      .byte.b	$ff
  30525  60e4					      repend
  30526  60e5		       ff		      .byte.b	$ff
  30525  60e5					      repend
  30526  60e6		       ff		      .byte.b	$ff
  30525  60e6					      repend
  30526  60e7		       ff		      .byte.b	$ff
  30525  60e7					      repend
  30526  60e8		       ff		      .byte.b	$ff
  30525  60e8					      repend
  30526  60e9		       ff		      .byte.b	$ff
  30525  60e9					      repend
  30526  60ea		       ff		      .byte.b	$ff
  30525  60ea					      repend
  30526  60eb		       ff		      .byte.b	$ff
  30525  60eb					      repend
  30526  60ec		       ff		      .byte.b	$ff
  30525  60ec					      repend
  30526  60ed		       ff		      .byte.b	$ff
  30525  60ed					      repend
  30526  60ee		       ff		      .byte.b	$ff
  30525  60ee					      repend
  30526  60ef		       ff		      .byte.b	$ff
  30525  60ef					      repend
  30526  60f0		       ff		      .byte.b	$ff
  30525  60f0					      repend
  30526  60f1		       ff		      .byte.b	$ff
  30525  60f1					      repend
  30526  60f2		       ff		      .byte.b	$ff
  30525  60f2					      repend
  30526  60f3		       ff		      .byte.b	$ff
  30525  60f3					      repend
  30526  60f4		       ff		      .byte.b	$ff
  30525  60f4					      repend
  30526  60f5		       ff		      .byte.b	$ff
  30525  60f5					      repend
  30526  60f6		       ff		      .byte.b	$ff
  30525  60f6					      repend
  30526  60f7		       ff		      .byte.b	$ff
  30525  60f7					      repend
  30526  60f8		       ff		      .byte.b	$ff
  30525  60f8					      repend
  30526  60f9		       ff		      .byte.b	$ff
  30525  60f9					      repend
  30526  60fa		       ff		      .byte.b	$ff
  30525  60fa					      repend
  30526  60fb		       ff		      .byte.b	$ff
  30525  60fb					      repend
  30526  60fc		       ff		      .byte.b	$ff
  30525  60fc					      repend
  30526  60fd		       ff		      .byte.b	$ff
  30525  60fd					      repend
  30526  60fe		       ff		      .byte.b	$ff
  30525  60fe					      repend
  30526  60ff		       ff		      .byte.b	$ff
  30527  6100					      repend
  30528  6100				   .
  30529  6100							; 
  30530  6100
  30531  6100				   .
  30532  6100							; 
  30533  6100
  30534  6100				   .
  30535  6100							; 
  30536  6100
  30537  6100				   .
  30538  6100							; 
  30539  6100
  30540  6100				   .
  30541  6100							; 
  30542  6100
  30543  6100				   .
  30544  6100							; 
  30545  6100
  30546  6100				   .
  30547  6100							; 
  30548  6100
  30549  6100				   .
  30550  6100							; 
  30551  6100
  30552  6100				   .
  30553  6100							; 
  30554  6100
  30555  6100				   .
  30556  6100							; 
  30557  6100
  30558  6100				   .
  30559  6100							; 
  30560  6100
  30561  6100				   .
  30562  6100							; 
  30563  6100
  30564  6100				   .__VBLANK_Code
  30565  6100							; __VBLANK_Code
  30566  6100
  30567  6100				   .
  30568  6100							; 
  30569  6100
  30570  6100				   .
  30571  6100							; 
  30572  6100
  30573  6100				   .
  30574  6100							; 
  30575  6100
  30576  6100				   .
  30577  6100							; 
  30578  6100
  30579  6100				   .
  30580  6100							; 
  30581  6100
  30582  6100				   .
  30583  6100							; 
  30584  6100
  30585  6100				   .L01405		;  if !_Bit1_Auto_Play{1} then scorecolor  =  28
  30586  6100
  30587  6100		       a5 d2		      LDA	_Bit1_Auto_Play
  30588  6102		       29 02		      AND	#2
  30589  6104		       d0 04		      BNE	.skipL01405
  30590  6106				   .condpart457
  30591  6106		       a9 1c		      LDA	#28
  30592  6108		       85 a3		      STA	scorecolor
  30593  610a				   .skipL01405
  30594  610a				   .
  30595  610a							; 
  30596  610a
  30597  610a				   .L01406		;  COLUP0  =  $0A  :  COLUBK  =  $80  :  PF0  =  %11110000
  30598  610a
  30599  610a		       a9 0a		      LDA	#$0A
  30600  610c		       85 06		      STA	COLUP0
  30601  610e		       a9 80		      LDA	#$80
  30602  6110		       85 09		      STA	COLUBK
  30603  6112		       a9 f0		      LDA	#%11110000
  30604  6114		       85 0d		      STA	PF0
  30605  6116				   .
  30606  6116							; 
  30607  6116
  30608  6116				   .
  30609  6116							; 
  30610  6116
  30611  6116				   .
  30612  6116							; 
  30613  6116
  30614  6116				   .
  30615  6116							; 
  30616  6116
  30617  6116				   .
  30618  6116							; 
  30619  6116
  30620  6116				   .
  30621  6116							; 
  30622  6116
  30623  6116				   .
  30624  6116							; 
  30625  6116
  30626  6116				   .L01407		;  NUSIZ0  =  $10
  30627  6116
  30628  6116		       a9 10		      LDA	#$10
  30629  6118		       85 04		      STA	NUSIZ0
  30630  611a				   .
  30631  611a							; 
  30632  611a
  30633  611a				   .
  30634  611a							; 
  30635  611a
  30636  611a				   .
  30637  611a							; 
  30638  611a
  30639  611a				   .
  30640  611a							; 
  30641  611a
  30642  611a				   .
  30643  611a							; 
  30644  611a
  30645  611a				   .
  30646  611a							; 
  30647  611a
  30648  611a				   .
  30649  611a							; 
  30650  611a
  30651  611a				   .L01408		;  if _Bit1_Wrothopod_On{1}  &&  _Bit2_Wroth_Flip{2} then REFP1  =  8
  30652  611a
  30653  611a		       a5 c5		      LDA	_Bit1_Wrothopod_On
  30654  611c		       29 02		      AND	#2
  30655  611e		       f0 0a		      BEQ	.skipL01408
  30656  6120				   .condpart458
  30657  6120		       a5 c5		      LDA	_Bit2_Wroth_Flip
  30658  6122		       29 04		      AND	#4
  30659  6124		       f0 04		      BEQ	.skip458then
  30660  6126				   .condpart459
  30661  6126		       a9 08		      LDA	#8
  30662  6128		       85 0c		      STA	REFP1
  30663  612a				   .skip458then
  30664  612a				   .skipL01408
  30665  612a				   .
  30666  612a							; 
  30667  612a
  30668  612a				   .
  30669  612a							; 
  30670  612a
  30671  612a				   .
  30672  612a							; 
  30673  612a
  30674  612a				   .
  30675  612a							; 
  30676  612a
  30677  612a				   .
  30678  612a							; 
  30679  612a
  30680  612a				   .
  30681  612a							; 
  30682  612a
  30683  612a				   .
  30684  612a							; 
  30685  612a
  30686  612a				   .
  30687  612a							; 
  30688  612a
  30689  612a				   .
  30690  612a							; 
  30691  612a
  30692  612a				   .
  30693  612a							; 
  30694  612a
  30695  612a				   .L01409		;  if !_Bit0_Shot_Moving{0} then goto __Done_Shot
  30696  612a
  30697  612a		       a5 c2		      LDA	_Bit0_Shot_Moving
  30698  612c		       4a		      LSR
  30699  612d		       b0 03		      BCS	.skipL01409
  30700  612f				   .condpart460
  30701  612f		       4c 99 b1 	      jmp	.__Done_Shot
  30702  6132
  30703  6132				   .skipL01409
  30704  6132				   .
  30705  6132							; 
  30706  6132
  30707  6132				   .
  30708  6132							; 
  30709  6132
  30710  6132				   .
  30711  6132							; 
  30712  6132
  30713  6132				   .
  30714  6132							; 
  30715  6132
  30716  6132				   .L01410		;  if missile0y  <  3	||  missile0y  >  86 then goto __Border_Hit
  30717  6132
  30718  6132		       a5 91		      LDA	missile0y
  30719  6134		       c9 03		      CMP	#3
  30720  6136		       b0 03		      BCS	.skipL01410
  30721  6138				   .condpart461
  30722  6138		       4c 41 b1 	      jmp	.condpart462
  30723  613b				   .skipL01410
  30724  613b		       a9 56		      LDA	#86
  30725  613d		       c5 91		      CMP	missile0y
  30726  613f		       b0 03		      BCS	.skip48OR
  30727  6141				   .condpart462
  30728  6141		       4c 89 b1 	      jmp	.__Border_Hit
  30729  6144
  30730  6144				   .skip48OR
  30731  6144				   .L01411		;  if missile0x  <  16  ||  missile0x	>  147 then goto __Border_Hit
  30732  6144
  30733  6144		       a5 82		      LDA	missile0x
  30734  6146		       c9 10		      CMP	#16
  30735  6148		       b0 03		      BCS	.skipL01411
  30736  614a				   .condpart463
  30737  614a		       4c 53 b1 	      jmp	.condpart464
  30738  614d				   .skipL01411
  30739  614d		       a9 93		      LDA	#147
  30740  614f		       c5 82		      CMP	missile0x
  30741  6151		       b0 03		      BCS	.skip49OR
  30742  6153				   .condpart464
  30743  6153		       4c 89 b1 	      jmp	.__Border_Hit
  30744  6156
  30745  6156				   .skip49OR
  30746  6156				   .
  30747  6156							; 
  30748  6156
  30749  6156				   .
  30750  6156							; 
  30751  6156
  30752  6156				   .
  30753  6156							; 
  30754  6156
  30755  6156				   .
  30756  6156							; 
  30757  6156
  30758  6156				   .L01412		;  if _Bit4_Shot_U_Snapshot{4} then missile0y	=  missile0y  -  2
  30759  6156
  30760  6156		       a5 c2		      LDA	_Bit4_Shot_U_Snapshot
  30761  6158		       29 10		      AND	#16
  30762  615a		       f0 07		      BEQ	.skipL01412
  30763  615c				   .condpart465
  30764  615c		       a5 91		      LDA	missile0y
  30765  615e		       38		      SEC
  30766  615f		       e9 02		      SBC	#2
  30767  6161		       85 91		      STA	missile0y
  30768  6163				   .skipL01412
  30769  6163				   .L01413		;  if _Bit5_Shot_D_Snapshot{5} then missile0y	=  missile0y  +  2
  30770  6163
  30771  6163		       a5 c2		      LDA	_Bit5_Shot_D_Snapshot
  30772  6165		       29 20		      AND	#32
  30773  6167		       f0 07		      BEQ	.skipL01413
  30774  6169				   .condpart466
  30775  6169		       a5 91		      LDA	missile0y
  30776  616b		       18		      CLC
  30777  616c		       69 02		      ADC	#2
  30778  616e		       85 91		      STA	missile0y
  30779  6170				   .skipL01413
  30780  6170				   .L01414		;  if _Bit6_Shot_L_Snapshot{6} then missile0x	=  missile0x  -  2
  30781  6170
  30782  6170		       24 c2		      BIT	_Bit6_Shot_L_Snapshot
  30783  6172		       50 07		      BVC	.skipL01414
  30784  6174				   .condpart467
  30785  6174		       a5 82		      LDA	missile0x
  30786  6176		       38		      SEC
  30787  6177		       e9 02		      SBC	#2
  30788  6179		       85 82		      STA	missile0x
  30789  617b				   .skipL01414
  30790  617b				   .L01415		;  if _Bit7_Shot_R_Snapshot{7} then missile0x	=  missile0x  +  2
  30791  617b
  30792  617b		       24 c2		      BIT	_Bit7_Shot_R_Snapshot
  30793  617d		       10 07		      BPL	.skipL01415
  30794  617f				   .condpart468
  30795  617f		       a5 82		      LDA	missile0x
  30796  6181		       18		      CLC
  30797  6182		       69 02		      ADC	#2
  30798  6184		       85 82		      STA	missile0x
  30799  6186				   .skipL01415
  30800  6186				   .
  30801  6186							; 
  30802  6186
  30803  6186				   .L01416		;  goto __Done_Shot
  30804  6186
  30805  6186		       4c 99 b1 	      jmp	.__Done_Shot
  30806  6189
  30807  6189				   .
  30808  6189							; 
  30809  6189
  30810  6189				   .__Border_Hit
  30811  6189							; __Border_Hit
  30812  6189
  30813  6189				   .
  30814  6189							; 
  30815  6189
  30816  6189				   .
  30817  6189							; 
  30818  6189
  30819  6189				   .
  30820  6189							; 
  30821  6189
  30822  6189				   .
  30823  6189							; 
  30824  6189
  30825  6189				   .L01417		;  _Bit0_Shot_Moving{0} = 0  :  missile0y = 200
  30826  6189
  30827  6189		       a5 c2		      LDA	_Bit0_Shot_Moving
  30828  618b		       29 fe		      AND	#254
  30829  618d		       85 c2		      STA	_Bit0_Shot_Moving
  30830  618f		       a9 c8		      LDA	#200
  30831  6191		       85 91		      STA	missile0y
  30832  6193				   .
  30833  6193							; 
  30834  6193
  30835  6193				   .L01418		;  _Bitop_Misc_Snapshot  =  _Bitop_Misc_Snapshot  &  %00001111
  30836  6193
  30837  6193		       a5 c2		      LDA	_Bitop_Misc_Snapshot
  30838  6195		       29 0f		      AND	#%00001111
  30839  6197		       85 c2		      STA	_Bitop_Misc_Snapshot
  30840  6199				   .
  30841  6199							; 
  30842  6199
  30843  6199				   .__Done_Shot
  30844  6199							; __Done_Shot
  30845  6199
  30846  6199				   .
  30847  6199							; 
  30848  6199
  30849  6199				   .
  30850  6199							; 
  30851  6199
  30852  6199				   .
  30853  6199							; 
  30854  6199
  30855  6199				   .
  30856  6199							; 
  30857  6199
  30858  6199				   .
  30859  6199							; 
  30860  6199
  30861  6199				   .
  30862  6199							; 
  30863  6199
  30864  6199				   .
  30865  6199							; 
  30866  6199
  30867  6199				   .
  30868  6199							; 
  30869  6199
  30870  6199				   .
  30871  6199							; 
  30872  6199
  30873  6199				   .
  30874  6199							; 
  30875  6199
  30876  6199				   .L01419		;  if _Bit4_Manatee_Hurt_Color{4} then goto __Skip_Health_Color
  30877  6199
  30878  6199		       a5 c7		      LDA	_Bit4_Manatee_Hurt_Color
  30879  619b		       29 10		      AND	#16
  30880  619d		       f0 03		      BEQ	.skipL01419
  30881  619f				   .condpart469
  30882  619f		       4c f7 b1 	      jmp	.__Skip_Health_Color
  30883  61a2
  30884  61a2				   .skipL01419
  30885  61a2				   .
  30886  61a2							; 
  30887  61a2
  30888  61a2				   .
  30889  61a2							; 
  30890  61a2
  30891  61a2				   .
  30892  61a2							; 
  30893  61a2
  30894  61a2				   .
  30895  61a2							; 
  30896  61a2
  30897  61a2				   .L01420		;  if !_Bit5_Manatee_Health_Color{5} then goto __Skip_Health_Color
  30898  61a2
  30899  61a2		       a5 c7		      LDA	_Bit5_Manatee_Health_Color
  30900  61a4		       29 20		      AND	#32
  30901  61a6		       d0 03		      BNE	.skipL01420
  30902  61a8				   .condpart470
  30903  61a8		       4c f7 b1 	      jmp	.__Skip_Health_Color
  30904  61ab
  30905  61ab				   .skipL01420
  30906  61ab				   .
  30907  61ab							; 
  30908  61ab
  30909  61ab				   .
  30910  61ab							; 
  30911  61ab
  30912  61ab				   .
  30913  61ab							; 
  30914  61ab
  30915  61ab				   .
  30916  61ab							; 
  30917  61ab
  30918  61ab				   .L01421		;  if _Manatee_Health_Counter	<  6 then COLUP0  =  $AE
  30919  61ab
  30920  61ab		       a5 a4		      LDA	_Manatee_Health_Counter
  30921  61ad		       c9 06		      CMP	#6
  30922  61af		       b0 04		      BCS	.skipL01421
  30923  61b1				   .condpart471
  30924  61b1		       a9 ae		      LDA	#$AE
  30925  61b3		       85 06		      STA	COLUP0
  30926  61b5				   .skipL01421
  30927  61b5				   .
  30928  61b5							; 
  30929  61b5
  30930  61b5				   .L01422		;  if _Manatee_Health_Counter	>  5  &&  _Manatee_Health_Counter  <  11 then COLUP0  =  $AA
  30931  61b5
  30932  61b5		       a9 05		      LDA	#5
  30933  61b7		       c5 a4		      CMP	_Manatee_Health_Counter
  30934  61b9		       b0 0a		      BCS	.skipL01422
  30935  61bb				   .condpart472
  30936  61bb		       a5 a4		      LDA	_Manatee_Health_Counter
  30937  61bd		       c9 0b		      CMP	#11
  30938  61bf		       b0 04		      BCS	.skip472then
  30939  61c1				   .condpart473
  30940  61c1		       a9 aa		      LDA	#$AA
  30941  61c3		       85 06		      STA	COLUP0
  30942  61c5				   .skip472then
  30943  61c5				   .skipL01422
  30944  61c5				   .
  30945  61c5							; 
  30946  61c5
  30947  61c5				   .L01423		;  if _Manatee_Health_Counter	>  10  &&  _Manatee_Health_Counter  <  16 then COLUP0  =  $A6
  30948  61c5
  30949  61c5		       a9 0a		      LDA	#10
  30950  61c7		       c5 a4		      CMP	_Manatee_Health_Counter
  30951  61c9		       b0 0a		      BCS	.skipL01423
  30952  61cb				   .condpart474
  30953  61cb		       a5 a4		      LDA	_Manatee_Health_Counter
  30954  61cd		       c9 10		      CMP	#16
  30955  61cf		       b0 04		      BCS	.skip474then
  30956  61d1				   .condpart475
  30957  61d1		       a9 a6		      LDA	#$A6
  30958  61d3		       85 06		      STA	COLUP0
  30959  61d5				   .skip474then
  30960  61d5				   .skipL01423
  30961  61d5				   .
  30962  61d5							; 
  30963  61d5
  30964  61d5				   .L01424		;  if _Manatee_Health_Counter	>  15  &&  _Manatee_Health_Counter  <  21 then COLUP0  =  $A4
  30965  61d5
  30966  61d5		       a9 0f		      LDA	#15
  30967  61d7		       c5 a4		      CMP	_Manatee_Health_Counter
  30968  61d9		       b0 0a		      BCS	.skipL01424
  30969  61db				   .condpart476
  30970  61db		       a5 a4		      LDA	_Manatee_Health_Counter
  30971  61dd		       c9 15		      CMP	#21
  30972  61df		       b0 04		      BCS	.skip476then
  30973  61e1				   .condpart477
  30974  61e1		       a9 a4		      LDA	#$A4
  30975  61e3		       85 06		      STA	COLUP0
  30976  61e5				   .skip476then
  30977  61e5				   .skipL01424
  30978  61e5				   .
  30979  61e5							; 
  30980  61e5
  30981  61e5				   .
  30982  61e5							; 
  30983  61e5
  30984  61e5				   .
  30985  61e5							; 
  30986  61e5
  30987  61e5				   .
  30988  61e5							; 
  30989  61e5
  30990  61e5				   .L01425		;  _Manatee_Health_Counter  =	_Manatee_Health_Counter  +  1
  30991  61e5
  30992  61e5		       e6 a4		      INC	_Manatee_Health_Counter
  30993  61e7				   .
  30994  61e7							; 
  30995  61e7
  30996  61e7				   .
  30997  61e7							; 
  30998  61e7
  30999  61e7				   .
  31000  61e7							; 
  31001  61e7
  31002  61e7				   .
  31003  61e7							; 
  31004  61e7
  31005  61e7				   .L01426		;  if _Manatee_Health_Counter	>  20 then _Bit5_Manatee_Health_Color{5}  =  0	:  _Manatee_Health_Counter  =  0
  31006  61e7
  31007  61e7		       a9 14		      LDA	#20
  31008  61e9		       c5 a4		      CMP	_Manatee_Health_Counter
  31009  61eb		       b0 0a		      BCS	.skipL01426
  31010  61ed				   .condpart478
  31011  61ed		       a5 c7		      LDA	_Bit5_Manatee_Health_Color
  31012  61ef		       29 df		      AND	#223
  31013  61f1		       85 c7		      STA	_Bit5_Manatee_Health_Color
  31014  61f3		       a9 00		      LDA	#0
  31015  61f5		       85 a4		      STA	_Manatee_Health_Counter
  31016  61f7				   .skipL01426
  31017  61f7				   .
  31018  61f7							; 
  31019  61f7
  31020  61f7				   .__Skip_Health_Color
  31021  61f7							; __Skip_Health_Color
  31022  61f7
  31023  61f7				   .
  31024  61f7							; 
  31025  61f7
  31026  61f7				   .
  31027  61f7							; 
  31028  61f7
  31029  61f7				   .
  31030  61f7							; 
  31031  61f7
  31032  61f7				   .
  31033  61f7							; 
  31034  61f7
  31035  61f7				   .
  31036  61f7							; 
  31037  61f7
  31038  61f7				   .
  31039  61f7							; 
  31040  61f7
  31041  61f7				   .
  31042  61f7							; 
  31043  61f7
  31044  61f7				   .
  31045  61f7							; 
  31046  61f7
  31047  61f7				   .
  31048  61f7							; 
  31049  61f7
  31050  61f7				   .
  31051  61f7							; 
  31052  61f7
  31053  61f7				   .L01427		;  if !_Bit4_Manatee_Hurt_Color{4} then goto __Skip_Hurt_Color
  31054  61f7
  31055  61f7		       a5 c7		      LDA	_Bit4_Manatee_Hurt_Color
  31056  61f9		       29 10		      AND	#16
  31057  61fb		       d0 03		      BNE	.skipL01427
  31058  61fd				   .condpart479
  31059  61fd		       4c 16 b2 	      jmp	.__Skip_Hurt_Color
  31060  6200
  31061  6200				   .skipL01427
  31062  6200				   .
  31063  6200							; 
  31064  6200
  31065  6200				   .
  31066  6200							; 
  31067  6200
  31068  6200				   .
  31069  6200							; 
  31070  6200
  31071  6200				   .
  31072  6200							; 
  31073  6200
  31074  6200				   .L01428		;  COLUP0  =  $48
  31075  6200
  31076  6200		       a9 48		      LDA	#$48
  31077  6202		       85 06		      STA	COLUP0
  31078  6204				   .
  31079  6204							; 
  31080  6204
  31081  6204				   .
  31082  6204							; 
  31083  6204
  31084  6204				   .
  31085  6204							; 
  31086  6204
  31087  6204				   .
  31088  6204							; 
  31089  6204
  31090  6204				   .L01429		;  _Manatee_Hurt_Counter  =  _Manatee_Hurt_Counter  +	1
  31091  6204
  31092  6204		       e6 ed		      INC	_Manatee_Hurt_Counter
  31093  6206				   .
  31094  6206							; 
  31095  6206
  31096  6206				   .
  31097  6206							; 
  31098  6206
  31099  6206				   .
  31100  6206							; 
  31101  6206
  31102  6206				   .
  31103  6206							; 
  31104  6206
  31105  6206				   .L01430		;  if _Manatee_Hurt_Counter  >  15 then _Bit4_Manatee_Hurt_Color{4}  =  0  :  _Manatee_Hurt_Counter  =  0
  31106  6206
  31107  6206		       a9 0f		      LDA	#15
  31108  6208		       c5 ed		      CMP	_Manatee_Hurt_Counter
  31109  620a		       b0 0a		      BCS	.skipL01430
  31110  620c				   .condpart480
  31111  620c		       a5 c7		      LDA	_Bit4_Manatee_Hurt_Color
  31112  620e		       29 ef		      AND	#239
  31113  6210		       85 c7		      STA	_Bit4_Manatee_Hurt_Color
  31114  6212		       a9 00		      LDA	#0
  31115  6214		       85 ed		      STA	_Manatee_Hurt_Counter
  31116  6216				   .skipL01430
  31117  6216				   .
  31118  6216							; 
  31119  6216
  31120  6216				   .__Skip_Hurt_Color
  31121  6216							; __Skip_Hurt_Color
  31122  6216
  31123  6216				   .
  31124  6216							; 
  31125  6216
  31126  6216				   .
  31127  6216							; 
  31128  6216
  31129  6216				   .
  31130  6216							; 
  31131  6216
  31132  6216				   .
  31133  6216							; 
  31134  6216
  31135  6216				   .
  31136  6216							; 
  31137  6216
  31138  6216				   .
  31139  6216							; 
  31140  6216
  31141  6216				   .
  31142  6216							; 
  31143  6216
  31144  6216				   .
  31145  6216							; 
  31146  6216
  31147  6216				   .
  31148  6216							; 
  31149  6216
  31150  6216				   .
  31151  6216							; 
  31152  6216
  31153  6216				   .
  31154  6216							; 
  31155  6216
  31156  6216				   .
  31157  6216							; 
  31158  6216
  31159  6216				   .L01431		;  if _Level_Counter  <  _Plop_Timer then goto __Skip_Pixel_Plop
  31160  6216
  31161  6216		       a5 be		      LDA	_Level_Counter
  31162  6218		       c5 bf		      CMP	_Plop_Timer
  31163  621a		       b0 03		      BCS	.skipL01431
  31164  621c				   .condpart481
  31165  621c		       4c 4e b3 	      jmp	.__Skip_Pixel_Plop
  31166  621f
  31167  621f				   .skipL01431
  31168  621f				   .
  31169  621f							; 
  31170  621f
  31171  621f				   .
  31172  621f							; 
  31173  621f
  31174  621f				   .
  31175  621f							; 
  31176  621f
  31177  621f				   .
  31178  621f							; 
  31179  621f
  31180  621f				   .L01432		;  _Level_Counter  =  0
  31181  621f
  31182  621f		       a9 00		      LDA	#0
  31183  6221		       85 be		      STA	_Level_Counter
  31184  6223				   .
  31185  6223							; 
  31186  6223
  31187  6223				   .
  31188  6223							; 
  31189  6223
  31190  6223				   .
  31191  6223							; 
  31192  6223
  31193  6223				   .
  31194  6223							; 
  31195  6223
  31196  6223				   .L01433		;  _Plop_Timer  =  _Plop_Timer  ^  3
  31197  6223
  31198  6223		       a5 bf		      LDA	_Plop_Timer
  31199  6225		       49 03		      EOR	#3
  31200  6227		       85 bf		      STA	_Plop_Timer
  31201  6229				   .
  31202  6229							; 
  31203  6229
  31204  6229				   .
  31205  6229							; 
  31206  6229
  31207  6229				   .
  31208  6229							; 
  31209  6229
  31210  6229				   .
  31211  6229							; 
  31212  6229
  31213  6229				   .L01434		;  if _Plop_Rate  =  1 then _Plop_Timer  =  1
  31214  6229
  31215  6229		       a5 e3		      LDA	_Plop_Rate
  31216  622b		       c9 01		      CMP	#1
  31217  622d		       d0 04		      BNE	.skipL01434
  31218  622f				   .condpart482
  31219  622f		       a9 01		      LDA	#1
  31220  6231		       85 bf		      STA	_Plop_Timer
  31221  6233				   .skipL01434
  31222  6233				   .
  31223  6233							; 
  31224  6233
  31225  6233				   .
  31226  6233							; 
  31227  6233
  31228  6233				   .
  31229  6233							; 
  31230  6233
  31231  6233				   .
  31232  6233							; 
  31233  6233
  31234  6233				   .L01435		;  temp6  =   ( rand & 1 ) 
  31235  6233
  31236  6233							; complex statement detected
  31237  6233		       a5 a2		      lda	rand
  31238  6235		       4a		      lsr
  31239  6236					      ifconst	rand16
  31240  6236		       26 d3		      rol	rand16
  31241  6238					      endif
  31242  6238		       90 02		      bcc	*+4
  31243  623a		       49 b4		      eor	#$B4
  31244  623c		       85 a2		      sta	rand
  31245  623e					      ifconst	rand16
  31246  623e		       45 d3		      eor	rand16
  31247  6240					      endif
  31248  6240		       29 01		      AND	#1
  31249  6242		       85 a1		      STA	temp6
  31250  6244				   .
  31251  6244							; 
  31252  6244
  31253  6244				   .L01436		;  if temp6  =  0 then temp5  =   ( rand / 16 ) 
  31254  6244
  31255  6244		       a5 a1		      LDA	temp6
  31256  6246		       c9 00		      CMP	#0
  31257  6248		       d0 13		      BNE	.skipL01436
  31258  624a				   .condpart483
  31259  624a							; complex statement detected
  31260  624a		       a5 a2		      lda	rand
  31261  624c		       4a		      lsr
  31262  624d					      ifconst	rand16
  31263  624d		       26 d3		      rol	rand16
  31264  624f					      endif
  31265  624f		       90 02		      bcc	*+4
  31266  6251		       49 b4		      eor	#$B4
  31267  6253		       85 a2		      sta	rand
  31268  6255					      ifconst	rand16
  31269  6255		       45 d3		      eor	rand16
  31270  6257					      endif
  31271  6257		       4a		      lsr
  31272  6258		       4a		      lsr
  31273  6259		       4a		      lsr
  31274  625a		       4a		      lsr
  31275  625b		       85 a0		      STA	temp5
  31276  625d				   .skipL01436
  31277  625d				   .
  31278  625d							; 
  31279  625d
  31280  625d				   .L01437		;  if temp6  =  1 then temp5  =   ( rand & 15 ) 
  31281  625d
  31282  625d		       a5 a1		      LDA	temp6
  31283  625f		       c9 01		      CMP	#1
  31284  6261		       d0 11		      BNE	.skipL01437
  31285  6263				   .condpart484
  31286  6263							; complex statement detected
  31287  6263		       a5 a2		      lda	rand
  31288  6265		       4a		      lsr
  31289  6266					      ifconst	rand16
  31290  6266		       26 d3		      rol	rand16
  31291  6268					      endif
  31292  6268		       90 02		      bcc	*+4
  31293  626a		       49 b4		      eor	#$B4
  31294  626c		       85 a2		      sta	rand
  31295  626e					      ifconst	rand16
  31296  626e		       45 d3		      eor	rand16
  31297  6270					      endif
  31298  6270		       29 0f		      AND	#15
  31299  6272		       85 a0		      STA	temp5
  31300  6274				   .skipL01437
  31301  6274				   .
  31302  6274							; 
  31303  6274
  31304  6274				   .L01438		;  if temp5  >  _Plop_Rate then goto __Skip_Pixel_Plop
  31305  6274
  31306  6274		       a5 e3		      LDA	_Plop_Rate
  31307  6276		       c5 a0		      CMP	temp5
  31308  6278		       b0 03		      BCS	.skipL01438
  31309  627a				   .condpart485
  31310  627a		       4c 4e b3 	      jmp	.__Skip_Pixel_Plop
  31311  627d
  31312  627d				   .skipL01438
  31313  627d				   .
  31314  627d							; 
  31315  627d
  31316  627d				   .
  31317  627d							; 
  31318  627d
  31319  627d				   .
  31320  627d							; 
  31321  627d
  31322  627d				   .
  31323  627d							; 
  31324  627d
  31325  627d				   .
  31326  627d							; 
  31327  627d
  31328  627d				   .
  31329  627d							; 
  31330  627d
  31331  627d				   .
  31332  627d							; 
  31333  627d
  31334  627d				   .
  31335  627d							; 
  31336  627d
  31337  627d				   .L01439		;  temp5  =   ( rand & 31 )   :  temp6  =   ( rand & 7 )   +	( rand / 64 ) 
  31338  627d
  31339  627d							; complex statement detected
  31340  627d		       a5 a2		      lda	rand
  31341  627f		       4a		      lsr
  31342  6280					      ifconst	rand16
  31343  6280		       26 d3		      rol	rand16
  31344  6282					      endif
  31345  6282		       90 02		      bcc	*+4
  31346  6284		       49 b4		      eor	#$B4
  31347  6286		       85 a2		      sta	rand
  31348  6288					      ifconst	rand16
  31349  6288		       45 d3		      eor	rand16
  31350  628a					      endif
  31351  628a		       29 1f		      AND	#31
  31352  628c		       85 a0		      STA	temp5
  31353  628e							; complex statement detected
  31354  628e		       a5 a2		      lda	rand
  31355  6290		       4a		      lsr
  31356  6291					      ifconst	rand16
  31357  6291		       26 d3		      rol	rand16
  31358  6293					      endif
  31359  6293		       90 02		      bcc	*+4
  31360  6295		       49 b4		      eor	#$B4
  31361  6297		       85 a2		      sta	rand
  31362  6299					      ifconst	rand16
  31363  6299		       45 d3		      eor	rand16
  31364  629b					      endif
  31365  629b		       29 07		      AND	#7
  31366  629d		       48		      PHA
  31367  629e		       a5 a2		      lda	rand
  31368  62a0		       4a		      lsr
  31369  62a1					      ifconst	rand16
  31370  62a1		       26 d3		      rol	rand16
  31371  62a3					      endif
  31372  62a3		       90 02		      bcc	*+4
  31373  62a5		       49 b4		      eor	#$B4
  31374  62a7		       85 a2		      sta	rand
  31375  62a9					      ifconst	rand16
  31376  62a9		       45 d3		      eor	rand16
  31377  62ab					      endif
  31378  62ab		       4a		      lsr
  31379  62ac		       4a		      lsr
  31380  62ad		       4a		      lsr
  31381  62ae		       4a		      lsr
  31382  62af		       4a		      lsr
  31383  62b0		       4a		      lsr
  31384  62b1		       ba		      TSX
  31385  62b2		       e8		      INX
  31386  62b3		       9a		      TXS
  31387  62b4		       18		      CLC
  31388  62b5		       75 00		      ADC	$00,x
  31389  62b7		       85 a1		      STA	temp6
  31390  62b9				   .
  31391  62b9							; 
  31392  62b9
  31393  62b9				   .
  31394  62b9							; 
  31395  62b9
  31396  62b9				   .
  31397  62b9							; 
  31398  62b9
  31399  62b9				   .
  31400  62b9							; 
  31401  62b9
  31402  62b9				   .
  31403  62b9							; 
  31404  62b9
  31405  62b9				   .
  31406  62b9							; 
  31407  62b9
  31408  62b9				   .
  31409  62b9							; 
  31410  62b9
  31411  62b9				   .
  31412  62b9							; 
  31413  62b9
  31414  62b9				   .
  31415  62b9							; 
  31416  62b9
  31417  62b9				   .
  31418  62b9							; 
  31419  62b9
  31420  62b9				   .
  31421  62b9							; 
  31422  62b9
  31423  62b9				   .L01440		;  temp3  =   (  ( player0x  -  17 )  / 4 )   -  5  :	if temp3  >  200 then temp3  =	0
  31424  62b9
  31425  62b9							; complex statement detected
  31426  62b9		       a5 80		      LDA	player0x
  31427  62bb		       38		      SEC
  31428  62bc		       e9 11		      SBC	#17
  31429  62be		       4a		      lsr
  31430  62bf		       4a		      lsr
  31431  62c0		       38		      SEC
  31432  62c1		       e9 05		      SBC	#5
  31433  62c3		       85 9e		      STA	temp3
  31434  62c5		       a9 c8		      LDA	#200
  31435  62c7		       c5 9e		      CMP	temp3
  31436  62c9		       b0 04		      BCS	.skipL01440
  31437  62cb				   .condpart486
  31438  62cb		       a9 00		      LDA	#0
  31439  62cd		       85 9e		      STA	temp3
  31440  62cf				   .skipL01440
  31441  62cf				   .L01441		;  temp4  =  temp3  +	12
  31442  62cf
  31443  62cf		       a5 9e		      LDA	temp3
  31444  62d1		       18		      CLC
  31445  62d2		       69 0c		      ADC	#12
  31446  62d4		       85 9f		      STA	temp4
  31447  62d6				   .
  31448  62d6							; 
  31449  62d6
  31450  62d6				   .
  31451  62d6							; 
  31452  62d6
  31453  62d6				   .
  31454  62d6							; 
  31455  62d6
  31456  62d6				   .
  31457  62d6							; 
  31458  62d6
  31459  62d6				   .
  31460  62d6							; 
  31461  62d6
  31462  62d6				   .
  31463  62d6							; 
  31464  62d6
  31465  62d6				   .L01442		;  temp1  =   (  ( player0y  -  7 )  / 8 )   -  2  :  if temp1  >  200 then temp1  =  0
  31466  62d6
  31467  62d6							; complex statement detected
  31468  62d6		       a5 85		      LDA	player0y
  31469  62d8		       38		      SEC
  31470  62d9		       e9 07		      SBC	#7
  31471  62db		       4a		      lsr
  31472  62dc		       4a		      lsr
  31473  62dd		       4a		      lsr
  31474  62de		       38		      SEC
  31475  62df		       e9 02		      SBC	#2
  31476  62e1		       85 9c		      STA	temp1
  31477  62e3		       a9 c8		      LDA	#200
  31478  62e5		       c5 9c		      CMP	temp1
  31479  62e7		       b0 04		      BCS	.skipL01442
  31480  62e9				   .condpart487
  31481  62e9		       a9 00		      LDA	#0
  31482  62eb		       85 9c		      STA	temp1
  31483  62ed				   .skipL01442
  31484  62ed				   .L01443		;  temp2  =  temp1  +	5
  31485  62ed
  31486  62ed		       a5 9c		      LDA	temp1
  31487  62ef		       18		      CLC
  31488  62f0		       69 05		      ADC	#5
  31489  62f2		       85 9d		      STA	temp2
  31490  62f4				   .
  31491  62f4							; 
  31492  62f4
  31493  62f4				   .
  31494  62f4							; 
  31495  62f4
  31496  62f4				   .
  31497  62f4							; 
  31498  62f4
  31499  62f4				   .
  31500  62f4							; 
  31501  62f4
  31502  62f4				   .L01444		;  if _Bit2_Corrdd_Can_On{2} then if _Corrdd_X_Shot_Mem  =  temp5  &&	_Corrdd_Y_Shot_Mem  =  temp6 then goto __Skip_Pixel_Plop
  31503  62f4
  31504  62f4		       a5 c6		      LDA	_Bit2_Corrdd_Can_On
  31505  62f6		       29 04		      AND	#4
  31506  62f8		       f0 0f		      BEQ	.skipL01444
  31507  62fa				   .condpart488
  31508  62fa		       a5 bc		      LDA	_Corrdd_X_Shot_Mem
  31509  62fc		       c5 a0		      CMP	temp5
  31510  62fe		       d0 09		      BNE	.skip488then
  31511  6300				   .condpart489
  31512  6300		       a5 bd		      LDA	_Corrdd_Y_Shot_Mem
  31513  6302		       c5 a1		      CMP	temp6
  31514  6304		       d0 03		      BNE	.skip489then
  31515  6306				   .condpart490
  31516  6306		       4c 4e b3 	      jmp	.__Skip_Pixel_Plop
  31517  6309
  31518  6309				   .skip489then
  31519  6309				   .skip488then
  31520  6309				   .skipL01444
  31521  6309				   .
  31522  6309							; 
  31523  6309
  31524  6309				   .
  31525  6309							; 
  31526  6309
  31527  6309				   .
  31528  6309							; 
  31529  6309
  31530  6309				   .
  31531  6309							; 
  31532  6309
  31533  6309				   .L01445		;  if temp5  <  temp3	||  temp5  >  temp4 then goto __Plop_Pixel
  31534  6309
  31535  6309		       a5 a0		      LDA	temp5
  31536  630b		       c5 9e		      CMP	temp3
  31537  630d		       b0 03		      BCS	.skipL01445
  31538  630f				   .condpart491
  31539  630f		       4c 18 b3 	      jmp	.condpart492
  31540  6312				   .skipL01445
  31541  6312		       a5 9f		      LDA	temp4
  31542  6314		       c5 a0		      CMP	temp5
  31543  6316		       b0 03		      BCS	.skip54OR
  31544  6318				   .condpart492
  31545  6318		       4c 30 b3 	      jmp	.__Plop_Pixel
  31546  631b
  31547  631b				   .skip54OR
  31548  631b				   .
  31549  631b							; 
  31550  631b
  31551  631b				   .L01446		;  if temp6  <  temp1	||  temp6  >  temp2 then goto __Plop_Pixel
  31552  631b
  31553  631b		       a5 a1		      LDA	temp6
  31554  631d		       c5 9c		      CMP	temp1
  31555  631f		       b0 03		      BCS	.skipL01446
  31556  6321				   .condpart493
  31557  6321		       4c 2a b3 	      jmp	.condpart494
  31558  6324				   .skipL01446
  31559  6324		       a5 9d		      LDA	temp2
  31560  6326		       c5 a1		      CMP	temp6
  31561  6328		       b0 03		      BCS	.skip55OR
  31562  632a				   .condpart494
  31563  632a		       4c 30 b3 	      jmp	.__Plop_Pixel
  31564  632d
  31565  632d				   .skip55OR
  31566  632d				   .
  31567  632d							; 
  31568  632d
  31569  632d				   .L01447		;  goto __Skip_Pixel_Plop
  31570  632d
  31571  632d		       4c 4e b3 	      jmp	.__Skip_Pixel_Plop
  31572  6330
  31573  6330				   .
  31574  6330							; 
  31575  6330
  31576  6330				   .__Plop_Pixel
  31577  6330							; __Plop_Pixel
  31578  6330
  31579  6330				   .
  31580  6330							; 
  31581  6330
  31582  6330				   .
  31583  6330							; 
  31584  6330
  31585  6330				   .
  31586  6330							; 
  31587  6330
  31588  6330				   .
  31589  6330							; 
  31590  6330
  31591  6330				   .L01448		;  pfpixel temp5 temp6 on
  31592  6330
  31593  6330		       a2 00		      LDX	#0
  31594  6332		       a4 a1		      LDY	temp6
  31595  6334		       a5 a0		      LDA	temp5
  31596  6336		       85 ee		      sta	temp7
  31597  6338		       a9 b3		      lda	#>(ret_point21-1)
  31598  633a		       48		      pha
  31599  633b		       a9 4d		      lda	#<(ret_point21-1)
  31600  633d		       48		      pha
  31601  633e		       a9 f3		      lda	#>(pfpixel-1)
  31602  6340		       48		      pha
  31603  6341		       a9 bb		      lda	#<(pfpixel-1)
  31604  6343		       48		      pha
  31605  6344		       a5 ee		      lda	temp7
  31606  6346		       48		      pha
  31607  6347		       8a		      txa
  31608  6348		       48		      pha
  31609  6349		       a2 08		      ldx	#8
  31610  634b		       4c eb ff 	      jmp	BS_jsr
  31611  634e				   ret_point21
  31612  634e				   .
  31613  634e							; 
  31614  634e
  31615  634e				   .__Skip_Pixel_Plop
  31616  634e							; __Skip_Pixel_Plop
  31617  634e
  31618  634e				   .
  31619  634e							; 
  31620  634e
  31621  634e				   .
  31622  634e							; 
  31623  634e
  31624  634e				   .L01449		;  goto __Skip_Vblank_01 bank8
  31625  634e
  31626  634e		       85 ee		      sta	temp7
  31627  6350		       a9 f6		      lda	#>(.__Skip_Vblank_01-1)
  31628  6352		       48		      pha
  31629  6353		       a9 42		      lda	#<(.__Skip_Vblank_01-1)
  31630  6355		       48		      pha
  31631  6356		       a5 ee		      lda	temp7
  31632  6358		       48		      pha
  31633  6359		       8a		      txa
  31634  635a		       48		      pha
  31635  635b		       a2 08		      ldx	#8
  31636  635d		       4c eb ff 	      jmp	BS_jsr
  31637  6360				   .
  31638  6360							; 
  31639  6360
  31640  6360				   .
  31641  6360							; 
  31642  6360
  31643  6360				   .
  31644  6360							; 
  31645  6360
  31646  6360				   .
  31647  6360							; 
  31648  6360
  31649  6360				   .
  31650  6360							; 
  31651  6360
  31652  6360				   .
  31653  6360							; 
  31654  6360
  31655  6360				   .
  31656  6360							; 
  31657  6360
  31658  6360				   .L01450		;  bank 7
  31659  6360
  31660  6360					      if	ECHO6
      3188 bytes of ROM space left in bank 6
  31661  6360					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
  31662  6360					      endif
  31663  6360		       00 01	   ECHO6      =	1
  31664  6fd4					      ORG	$6FF4-bscode_length
  31665  6fd4					      RORG	$BFF4-bscode_length
  31666  6fd4		       a2 ff	   start_bank6 ldx	#$ff
  31667  6fd6				  -	      ifconst	FASTFETCH	; using DPC+
  31668  6fd6				  -	      stx	FASTFETCH
  31669  6fd6					      endif
  31670  6fd6		       9a		      txs
  31671  6fd7				  -	      if	bankswitch == 64
  31672  6fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  31673  6fd7					      else
  31674  6fd7		       a9 f3		      lda	#>(start-1)
  31675  6fd9					      endif
  31676  6fd9		       48		      pha
  31677  6fda		       a9 51		      lda	#<(start-1)
  31678  6fdc		       48		      pha
  31679  6fdd		       48		      pha
  31680  6fde		       8a		      txa
  31681  6fdf		       48		      pha
  31682  6fe0		       ba		      tsx
  31683  6fe1					      if	bankswitch != 64
  31684  6fe1		       b5 04		      lda	4,x	; get high byte of return address
  31685  6fe3		       2a		      rol
  31686  6fe4		       2a		      rol
  31687  6fe5		       2a		      rol
  31688  6fe6		       2a		      rol
  31689  6fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  31690  6fe9		       aa		      tax
  31691  6fea		       e8		      inx
  31692  6feb				  -	      else
  31693  6feb				  -	      lda	4,x	; get high byte of return address
  31694  6feb				  -	      tay
  31695  6feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  31696  6feb				  -	      sta	4,x
  31697  6feb				  -	      tya
  31698  6feb				  -	      lsr
  31699  6feb				  -	      lsr
  31700  6feb				  -	      lsr
  31701  6feb				  -	      lsr
  31702  6feb				  -	      tax
  31703  6feb				  -	      inx
  31704  6feb					      endif
  31705  6feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  31706  6fee		       68		      pla
  31707  6fef		       aa		      tax
  31708  6ff0		       68		      pla
  31709  6ff1		       60		      rts
  31710  6ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  31711  6ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  31712  6ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  31713  6ff2					      endif
  31714  6ffc					      ORG	$6FFC
  31715  6ffc					      RORG	$BFFC
  31716  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
  31717  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
  31718  7000					      ORG	$7000
  31719  7000					      RORG	$D000
  31720  7000					      repeat	256
  31721  7000		       ff		      .byte.b	$ff
  31720  7000					      repend
  31721  7001		       ff		      .byte.b	$ff
  31720  7001					      repend
  31721  7002		       ff		      .byte.b	$ff
  31720  7002					      repend
  31721  7003		       ff		      .byte.b	$ff
  31720  7003					      repend
  31721  7004		       ff		      .byte.b	$ff
  31720  7004					      repend
  31721  7005		       ff		      .byte.b	$ff
  31720  7005					      repend
  31721  7006		       ff		      .byte.b	$ff
  31720  7006					      repend
  31721  7007		       ff		      .byte.b	$ff
  31720  7007					      repend
  31721  7008		       ff		      .byte.b	$ff
  31720  7008					      repend
  31721  7009		       ff		      .byte.b	$ff
  31720  7009					      repend
  31721  700a		       ff		      .byte.b	$ff
  31720  700a					      repend
  31721  700b		       ff		      .byte.b	$ff
  31720  700b					      repend
  31721  700c		       ff		      .byte.b	$ff
  31720  700c					      repend
  31721  700d		       ff		      .byte.b	$ff
  31720  700d					      repend
  31721  700e		       ff		      .byte.b	$ff
  31720  700e					      repend
  31721  700f		       ff		      .byte.b	$ff
  31720  700f					      repend
  31721  7010		       ff		      .byte.b	$ff
  31720  7010					      repend
  31721  7011		       ff		      .byte.b	$ff
  31720  7011					      repend
  31721  7012		       ff		      .byte.b	$ff
  31720  7012					      repend
  31721  7013		       ff		      .byte.b	$ff
  31720  7013					      repend
  31721  7014		       ff		      .byte.b	$ff
  31720  7014					      repend
  31721  7015		       ff		      .byte.b	$ff
  31720  7015					      repend
  31721  7016		       ff		      .byte.b	$ff
  31720  7016					      repend
  31721  7017		       ff		      .byte.b	$ff
  31720  7017					      repend
  31721  7018		       ff		      .byte.b	$ff
  31720  7018					      repend
  31721  7019		       ff		      .byte.b	$ff
  31720  7019					      repend
  31721  701a		       ff		      .byte.b	$ff
  31720  701a					      repend
  31721  701b		       ff		      .byte.b	$ff
  31720  701b					      repend
  31721  701c		       ff		      .byte.b	$ff
  31720  701c					      repend
  31721  701d		       ff		      .byte.b	$ff
  31720  701d					      repend
  31721  701e		       ff		      .byte.b	$ff
  31720  701e					      repend
  31721  701f		       ff		      .byte.b	$ff
  31720  701f					      repend
  31721  7020		       ff		      .byte.b	$ff
  31720  7020					      repend
  31721  7021		       ff		      .byte.b	$ff
  31720  7021					      repend
  31721  7022		       ff		      .byte.b	$ff
  31720  7022					      repend
  31721  7023		       ff		      .byte.b	$ff
  31720  7023					      repend
  31721  7024		       ff		      .byte.b	$ff
  31720  7024					      repend
  31721  7025		       ff		      .byte.b	$ff
  31720  7025					      repend
  31721  7026		       ff		      .byte.b	$ff
  31720  7026					      repend
  31721  7027		       ff		      .byte.b	$ff
  31720  7027					      repend
  31721  7028		       ff		      .byte.b	$ff
  31720  7028					      repend
  31721  7029		       ff		      .byte.b	$ff
  31720  7029					      repend
  31721  702a		       ff		      .byte.b	$ff
  31720  702a					      repend
  31721  702b		       ff		      .byte.b	$ff
  31720  702b					      repend
  31721  702c		       ff		      .byte.b	$ff
  31720  702c					      repend
  31721  702d		       ff		      .byte.b	$ff
  31720  702d					      repend
  31721  702e		       ff		      .byte.b	$ff
  31720  702e					      repend
  31721  702f		       ff		      .byte.b	$ff
  31720  702f					      repend
  31721  7030		       ff		      .byte.b	$ff
  31720  7030					      repend
  31721  7031		       ff		      .byte.b	$ff
  31720  7031					      repend
  31721  7032		       ff		      .byte.b	$ff
  31720  7032					      repend
  31721  7033		       ff		      .byte.b	$ff
  31720  7033					      repend
  31721  7034		       ff		      .byte.b	$ff
  31720  7034					      repend
  31721  7035		       ff		      .byte.b	$ff
  31720  7035					      repend
  31721  7036		       ff		      .byte.b	$ff
  31720  7036					      repend
  31721  7037		       ff		      .byte.b	$ff
  31720  7037					      repend
  31721  7038		       ff		      .byte.b	$ff
  31720  7038					      repend
  31721  7039		       ff		      .byte.b	$ff
  31720  7039					      repend
  31721  703a		       ff		      .byte.b	$ff
  31720  703a					      repend
  31721  703b		       ff		      .byte.b	$ff
  31720  703b					      repend
  31721  703c		       ff		      .byte.b	$ff
  31720  703c					      repend
  31721  703d		       ff		      .byte.b	$ff
  31720  703d					      repend
  31721  703e		       ff		      .byte.b	$ff
  31720  703e					      repend
  31721  703f		       ff		      .byte.b	$ff
  31720  703f					      repend
  31721  7040		       ff		      .byte.b	$ff
  31720  7040					      repend
  31721  7041		       ff		      .byte.b	$ff
  31720  7041					      repend
  31721  7042		       ff		      .byte.b	$ff
  31720  7042					      repend
  31721  7043		       ff		      .byte.b	$ff
  31720  7043					      repend
  31721  7044		       ff		      .byte.b	$ff
  31720  7044					      repend
  31721  7045		       ff		      .byte.b	$ff
  31720  7045					      repend
  31721  7046		       ff		      .byte.b	$ff
  31720  7046					      repend
  31721  7047		       ff		      .byte.b	$ff
  31720  7047					      repend
  31721  7048		       ff		      .byte.b	$ff
  31720  7048					      repend
  31721  7049		       ff		      .byte.b	$ff
  31720  7049					      repend
  31721  704a		       ff		      .byte.b	$ff
  31720  704a					      repend
  31721  704b		       ff		      .byte.b	$ff
  31720  704b					      repend
  31721  704c		       ff		      .byte.b	$ff
  31720  704c					      repend
  31721  704d		       ff		      .byte.b	$ff
  31720  704d					      repend
  31721  704e		       ff		      .byte.b	$ff
  31720  704e					      repend
  31721  704f		       ff		      .byte.b	$ff
  31720  704f					      repend
  31721  7050		       ff		      .byte.b	$ff
  31720  7050					      repend
  31721  7051		       ff		      .byte.b	$ff
  31720  7051					      repend
  31721  7052		       ff		      .byte.b	$ff
  31720  7052					      repend
  31721  7053		       ff		      .byte.b	$ff
  31720  7053					      repend
  31721  7054		       ff		      .byte.b	$ff
  31720  7054					      repend
  31721  7055		       ff		      .byte.b	$ff
  31720  7055					      repend
  31721  7056		       ff		      .byte.b	$ff
  31720  7056					      repend
  31721  7057		       ff		      .byte.b	$ff
  31720  7057					      repend
  31721  7058		       ff		      .byte.b	$ff
  31720  7058					      repend
  31721  7059		       ff		      .byte.b	$ff
  31720  7059					      repend
  31721  705a		       ff		      .byte.b	$ff
  31720  705a					      repend
  31721  705b		       ff		      .byte.b	$ff
  31720  705b					      repend
  31721  705c		       ff		      .byte.b	$ff
  31720  705c					      repend
  31721  705d		       ff		      .byte.b	$ff
  31720  705d					      repend
  31721  705e		       ff		      .byte.b	$ff
  31720  705e					      repend
  31721  705f		       ff		      .byte.b	$ff
  31720  705f					      repend
  31721  7060		       ff		      .byte.b	$ff
  31720  7060					      repend
  31721  7061		       ff		      .byte.b	$ff
  31720  7061					      repend
  31721  7062		       ff		      .byte.b	$ff
  31720  7062					      repend
  31721  7063		       ff		      .byte.b	$ff
  31720  7063					      repend
  31721  7064		       ff		      .byte.b	$ff
  31720  7064					      repend
  31721  7065		       ff		      .byte.b	$ff
  31720  7065					      repend
  31721  7066		       ff		      .byte.b	$ff
  31720  7066					      repend
  31721  7067		       ff		      .byte.b	$ff
  31720  7067					      repend
  31721  7068		       ff		      .byte.b	$ff
  31720  7068					      repend
  31721  7069		       ff		      .byte.b	$ff
  31720  7069					      repend
  31721  706a		       ff		      .byte.b	$ff
  31720  706a					      repend
  31721  706b		       ff		      .byte.b	$ff
  31720  706b					      repend
  31721  706c		       ff		      .byte.b	$ff
  31720  706c					      repend
  31721  706d		       ff		      .byte.b	$ff
  31720  706d					      repend
  31721  706e		       ff		      .byte.b	$ff
  31720  706e					      repend
  31721  706f		       ff		      .byte.b	$ff
  31720  706f					      repend
  31721  7070		       ff		      .byte.b	$ff
  31720  7070					      repend
  31721  7071		       ff		      .byte.b	$ff
  31720  7071					      repend
  31721  7072		       ff		      .byte.b	$ff
  31720  7072					      repend
  31721  7073		       ff		      .byte.b	$ff
  31720  7073					      repend
  31721  7074		       ff		      .byte.b	$ff
  31720  7074					      repend
  31721  7075		       ff		      .byte.b	$ff
  31720  7075					      repend
  31721  7076		       ff		      .byte.b	$ff
  31720  7076					      repend
  31721  7077		       ff		      .byte.b	$ff
  31720  7077					      repend
  31721  7078		       ff		      .byte.b	$ff
  31720  7078					      repend
  31721  7079		       ff		      .byte.b	$ff
  31720  7079					      repend
  31721  707a		       ff		      .byte.b	$ff
  31720  707a					      repend
  31721  707b		       ff		      .byte.b	$ff
  31720  707b					      repend
  31721  707c		       ff		      .byte.b	$ff
  31720  707c					      repend
  31721  707d		       ff		      .byte.b	$ff
  31720  707d					      repend
  31721  707e		       ff		      .byte.b	$ff
  31720  707e					      repend
  31721  707f		       ff		      .byte.b	$ff
  31720  707f					      repend
  31721  7080		       ff		      .byte.b	$ff
  31720  7080					      repend
  31721  7081		       ff		      .byte.b	$ff
  31720  7081					      repend
  31721  7082		       ff		      .byte.b	$ff
  31720  7082					      repend
  31721  7083		       ff		      .byte.b	$ff
  31720  7083					      repend
  31721  7084		       ff		      .byte.b	$ff
  31720  7084					      repend
  31721  7085		       ff		      .byte.b	$ff
  31720  7085					      repend
  31721  7086		       ff		      .byte.b	$ff
  31720  7086					      repend
  31721  7087		       ff		      .byte.b	$ff
  31720  7087					      repend
  31721  7088		       ff		      .byte.b	$ff
  31720  7088					      repend
  31721  7089		       ff		      .byte.b	$ff
  31720  7089					      repend
  31721  708a		       ff		      .byte.b	$ff
  31720  708a					      repend
  31721  708b		       ff		      .byte.b	$ff
  31720  708b					      repend
  31721  708c		       ff		      .byte.b	$ff
  31720  708c					      repend
  31721  708d		       ff		      .byte.b	$ff
  31720  708d					      repend
  31721  708e		       ff		      .byte.b	$ff
  31720  708e					      repend
  31721  708f		       ff		      .byte.b	$ff
  31720  708f					      repend
  31721  7090		       ff		      .byte.b	$ff
  31720  7090					      repend
  31721  7091		       ff		      .byte.b	$ff
  31720  7091					      repend
  31721  7092		       ff		      .byte.b	$ff
  31720  7092					      repend
  31721  7093		       ff		      .byte.b	$ff
  31720  7093					      repend
  31721  7094		       ff		      .byte.b	$ff
  31720  7094					      repend
  31721  7095		       ff		      .byte.b	$ff
  31720  7095					      repend
  31721  7096		       ff		      .byte.b	$ff
  31720  7096					      repend
  31721  7097		       ff		      .byte.b	$ff
  31720  7097					      repend
  31721  7098		       ff		      .byte.b	$ff
  31720  7098					      repend
  31721  7099		       ff		      .byte.b	$ff
  31720  7099					      repend
  31721  709a		       ff		      .byte.b	$ff
  31720  709a					      repend
  31721  709b		       ff		      .byte.b	$ff
  31720  709b					      repend
  31721  709c		       ff		      .byte.b	$ff
  31720  709c					      repend
  31721  709d		       ff		      .byte.b	$ff
  31720  709d					      repend
  31721  709e		       ff		      .byte.b	$ff
  31720  709e					      repend
  31721  709f		       ff		      .byte.b	$ff
  31720  709f					      repend
  31721  70a0		       ff		      .byte.b	$ff
  31720  70a0					      repend
  31721  70a1		       ff		      .byte.b	$ff
  31720  70a1					      repend
  31721  70a2		       ff		      .byte.b	$ff
  31720  70a2					      repend
  31721  70a3		       ff		      .byte.b	$ff
  31720  70a3					      repend
  31721  70a4		       ff		      .byte.b	$ff
  31720  70a4					      repend
  31721  70a5		       ff		      .byte.b	$ff
  31720  70a5					      repend
  31721  70a6		       ff		      .byte.b	$ff
  31720  70a6					      repend
  31721  70a7		       ff		      .byte.b	$ff
  31720  70a7					      repend
  31721  70a8		       ff		      .byte.b	$ff
  31720  70a8					      repend
  31721  70a9		       ff		      .byte.b	$ff
  31720  70a9					      repend
  31721  70aa		       ff		      .byte.b	$ff
  31720  70aa					      repend
  31721  70ab		       ff		      .byte.b	$ff
  31720  70ab					      repend
  31721  70ac		       ff		      .byte.b	$ff
  31720  70ac					      repend
  31721  70ad		       ff		      .byte.b	$ff
  31720  70ad					      repend
  31721  70ae		       ff		      .byte.b	$ff
  31720  70ae					      repend
  31721  70af		       ff		      .byte.b	$ff
  31720  70af					      repend
  31721  70b0		       ff		      .byte.b	$ff
  31720  70b0					      repend
  31721  70b1		       ff		      .byte.b	$ff
  31720  70b1					      repend
  31721  70b2		       ff		      .byte.b	$ff
  31720  70b2					      repend
  31721  70b3		       ff		      .byte.b	$ff
  31720  70b3					      repend
  31721  70b4		       ff		      .byte.b	$ff
  31720  70b4					      repend
  31721  70b5		       ff		      .byte.b	$ff
  31720  70b5					      repend
  31721  70b6		       ff		      .byte.b	$ff
  31720  70b6					      repend
  31721  70b7		       ff		      .byte.b	$ff
  31720  70b7					      repend
  31721  70b8		       ff		      .byte.b	$ff
  31720  70b8					      repend
  31721  70b9		       ff		      .byte.b	$ff
  31720  70b9					      repend
  31721  70ba		       ff		      .byte.b	$ff
  31720  70ba					      repend
  31721  70bb		       ff		      .byte.b	$ff
  31720  70bb					      repend
  31721  70bc		       ff		      .byte.b	$ff
  31720  70bc					      repend
  31721  70bd		       ff		      .byte.b	$ff
  31720  70bd					      repend
  31721  70be		       ff		      .byte.b	$ff
  31720  70be					      repend
  31721  70bf		       ff		      .byte.b	$ff
  31720  70bf					      repend
  31721  70c0		       ff		      .byte.b	$ff
  31720  70c0					      repend
  31721  70c1		       ff		      .byte.b	$ff
  31720  70c1					      repend
  31721  70c2		       ff		      .byte.b	$ff
  31720  70c2					      repend
  31721  70c3		       ff		      .byte.b	$ff
  31720  70c3					      repend
  31721  70c4		       ff		      .byte.b	$ff
  31720  70c4					      repend
  31721  70c5		       ff		      .byte.b	$ff
  31720  70c5					      repend
  31721  70c6		       ff		      .byte.b	$ff
  31720  70c6					      repend
  31721  70c7		       ff		      .byte.b	$ff
  31720  70c7					      repend
  31721  70c8		       ff		      .byte.b	$ff
  31720  70c8					      repend
  31721  70c9		       ff		      .byte.b	$ff
  31720  70c9					      repend
  31721  70ca		       ff		      .byte.b	$ff
  31720  70ca					      repend
  31721  70cb		       ff		      .byte.b	$ff
  31720  70cb					      repend
  31721  70cc		       ff		      .byte.b	$ff
  31720  70cc					      repend
  31721  70cd		       ff		      .byte.b	$ff
  31720  70cd					      repend
  31721  70ce		       ff		      .byte.b	$ff
  31720  70ce					      repend
  31721  70cf		       ff		      .byte.b	$ff
  31720  70cf					      repend
  31721  70d0		       ff		      .byte.b	$ff
  31720  70d0					      repend
  31721  70d1		       ff		      .byte.b	$ff
  31720  70d1					      repend
  31721  70d2		       ff		      .byte.b	$ff
  31720  70d2					      repend
  31721  70d3		       ff		      .byte.b	$ff
  31720  70d3					      repend
  31721  70d4		       ff		      .byte.b	$ff
  31720  70d4					      repend
  31721  70d5		       ff		      .byte.b	$ff
  31720  70d5					      repend
  31721  70d6		       ff		      .byte.b	$ff
  31720  70d6					      repend
  31721  70d7		       ff		      .byte.b	$ff
  31720  70d7					      repend
  31721  70d8		       ff		      .byte.b	$ff
  31720  70d8					      repend
  31721  70d9		       ff		      .byte.b	$ff
  31720  70d9					      repend
  31721  70da		       ff		      .byte.b	$ff
  31720  70da					      repend
  31721  70db		       ff		      .byte.b	$ff
  31720  70db					      repend
  31721  70dc		       ff		      .byte.b	$ff
  31720  70dc					      repend
  31721  70dd		       ff		      .byte.b	$ff
  31720  70dd					      repend
  31721  70de		       ff		      .byte.b	$ff
  31720  70de					      repend
  31721  70df		       ff		      .byte.b	$ff
  31720  70df					      repend
  31721  70e0		       ff		      .byte.b	$ff
  31720  70e0					      repend
  31721  70e1		       ff		      .byte.b	$ff
  31720  70e1					      repend
  31721  70e2		       ff		      .byte.b	$ff
  31720  70e2					      repend
  31721  70e3		       ff		      .byte.b	$ff
  31720  70e3					      repend
  31721  70e4		       ff		      .byte.b	$ff
  31720  70e4					      repend
  31721  70e5		       ff		      .byte.b	$ff
  31720  70e5					      repend
  31721  70e6		       ff		      .byte.b	$ff
  31720  70e6					      repend
  31721  70e7		       ff		      .byte.b	$ff
  31720  70e7					      repend
  31721  70e8		       ff		      .byte.b	$ff
  31720  70e8					      repend
  31721  70e9		       ff		      .byte.b	$ff
  31720  70e9					      repend
  31721  70ea		       ff		      .byte.b	$ff
  31720  70ea					      repend
  31721  70eb		       ff		      .byte.b	$ff
  31720  70eb					      repend
  31721  70ec		       ff		      .byte.b	$ff
  31720  70ec					      repend
  31721  70ed		       ff		      .byte.b	$ff
  31720  70ed					      repend
  31721  70ee		       ff		      .byte.b	$ff
  31720  70ee					      repend
  31721  70ef		       ff		      .byte.b	$ff
  31720  70ef					      repend
  31721  70f0		       ff		      .byte.b	$ff
  31720  70f0					      repend
  31721  70f1		       ff		      .byte.b	$ff
  31720  70f1					      repend
  31721  70f2		       ff		      .byte.b	$ff
  31720  70f2					      repend
  31721  70f3		       ff		      .byte.b	$ff
  31720  70f3					      repend
  31721  70f4		       ff		      .byte.b	$ff
  31720  70f4					      repend
  31721  70f5		       ff		      .byte.b	$ff
  31720  70f5					      repend
  31721  70f6		       ff		      .byte.b	$ff
  31720  70f6					      repend
  31721  70f7		       ff		      .byte.b	$ff
  31720  70f7					      repend
  31721  70f8		       ff		      .byte.b	$ff
  31720  70f8					      repend
  31721  70f9		       ff		      .byte.b	$ff
  31720  70f9					      repend
  31721  70fa		       ff		      .byte.b	$ff
  31720  70fa					      repend
  31721  70fb		       ff		      .byte.b	$ff
  31720  70fb					      repend
  31721  70fc		       ff		      .byte.b	$ff
  31720  70fc					      repend
  31721  70fd		       ff		      .byte.b	$ff
  31720  70fd					      repend
  31721  70fe		       ff		      .byte.b	$ff
  31720  70fe					      repend
  31721  70ff		       ff		      .byte.b	$ff
  31722  7100					      repend
  31723  7100				   .
  31724  7100							; 
  31725  7100
  31726  7100				   .
  31727  7100							; 
  31728  7100
  31729  7100				   .
  31730  7100							; 
  31731  7100
  31732  7100				   .
  31733  7100							; 
  31734  7100
  31735  7100				   .
  31736  7100							; 
  31737  7100
  31738  7100				   .
  31739  7100							; 
  31740  7100
  31741  7100				   .
  31742  7100							; 
  31743  7100
  31744  7100				   .
  31745  7100							; 
  31746  7100
  31747  7100				   .
  31748  7100							; 
  31749  7100
  31750  7100				   .L01451		;  bank 8
  31751  7100
  31752  7100					      if	ECHO7
      3796 bytes of ROM space left in bank 7
  31753  7100					      echo	"    ",[(start_bank7 - *)]d , "bytes of ROM space left in bank 7")
  31754  7100					      endif
  31755  7100		       00 01	   ECHO7      =	1
  31756  7fd4					      ORG	$7FF4-bscode_length
  31757  7fd4					      RORG	$DFF4-bscode_length
  31758  7fd4		       a2 ff	   start_bank7 ldx	#$ff
  31759  7fd6				  -	      ifconst	FASTFETCH	; using DPC+
  31760  7fd6				  -	      stx	FASTFETCH
  31761  7fd6					      endif
  31762  7fd6		       9a		      txs
  31763  7fd7				  -	      if	bankswitch == 64
  31764  7fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  31765  7fd7					      else
  31766  7fd7		       a9 f3		      lda	#>(start-1)
  31767  7fd9					      endif
  31768  7fd9		       48		      pha
  31769  7fda		       a9 51		      lda	#<(start-1)
  31770  7fdc		       48		      pha
  31771  7fdd		       48		      pha
  31772  7fde		       8a		      txa
  31773  7fdf		       48		      pha
  31774  7fe0		       ba		      tsx
  31775  7fe1					      if	bankswitch != 64
  31776  7fe1		       b5 04		      lda	4,x	; get high byte of return address
  31777  7fe3		       2a		      rol
  31778  7fe4		       2a		      rol
  31779  7fe5		       2a		      rol
  31780  7fe6		       2a		      rol
  31781  7fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  31782  7fe9		       aa		      tax
  31783  7fea		       e8		      inx
  31784  7feb				  -	      else
  31785  7feb				  -	      lda	4,x	; get high byte of return address
  31786  7feb				  -	      tay
  31787  7feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  31788  7feb				  -	      sta	4,x
  31789  7feb				  -	      tya
  31790  7feb				  -	      lsr
  31791  7feb				  -	      lsr
  31792  7feb				  -	      lsr
  31793  7feb				  -	      lsr
  31794  7feb				  -	      tax
  31795  7feb				  -	      inx
  31796  7feb					      endif
  31797  7feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  31798  7fee		       68		      pla
  31799  7fef		       aa		      tax
  31800  7ff0		       68		      pla
  31801  7ff1		       60		      rts
  31802  7ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  31803  7ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  31804  7ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  31805  7ff2					      endif
  31806  7ffc					      ORG	$7FFC
  31807  7ffc					      RORG	$DFFC
  31808  7ffc		       d4 df		      .word.w	(start_bank7 & $ffff)
  31809  7ffe		       d4 df		      .word.w	(start_bank7 & $ffff)
  31810  8000					      ORG	$8000
  31811  8000					      RORG	$F000
  31812  8000					      repeat	256
  31813  8000		       ff		      .byte.b	$ff
  31812  8000					      repend
  31813  8001		       ff		      .byte.b	$ff
  31812  8001					      repend
  31813  8002		       ff		      .byte.b	$ff
  31812  8002					      repend
  31813  8003		       ff		      .byte.b	$ff
  31812  8003					      repend
  31813  8004		       ff		      .byte.b	$ff
  31812  8004					      repend
  31813  8005		       ff		      .byte.b	$ff
  31812  8005					      repend
  31813  8006		       ff		      .byte.b	$ff
  31812  8006					      repend
  31813  8007		       ff		      .byte.b	$ff
  31812  8007					      repend
  31813  8008		       ff		      .byte.b	$ff
  31812  8008					      repend
  31813  8009		       ff		      .byte.b	$ff
  31812  8009					      repend
  31813  800a		       ff		      .byte.b	$ff
  31812  800a					      repend
  31813  800b		       ff		      .byte.b	$ff
  31812  800b					      repend
  31813  800c		       ff		      .byte.b	$ff
  31812  800c					      repend
  31813  800d		       ff		      .byte.b	$ff
  31812  800d					      repend
  31813  800e		       ff		      .byte.b	$ff
  31812  800e					      repend
  31813  800f		       ff		      .byte.b	$ff
  31812  800f					      repend
  31813  8010		       ff		      .byte.b	$ff
  31812  8010					      repend
  31813  8011		       ff		      .byte.b	$ff
  31812  8011					      repend
  31813  8012		       ff		      .byte.b	$ff
  31812  8012					      repend
  31813  8013		       ff		      .byte.b	$ff
  31812  8013					      repend
  31813  8014		       ff		      .byte.b	$ff
  31812  8014					      repend
  31813  8015		       ff		      .byte.b	$ff
  31812  8015					      repend
  31813  8016		       ff		      .byte.b	$ff
  31812  8016					      repend
  31813  8017		       ff		      .byte.b	$ff
  31812  8017					      repend
  31813  8018		       ff		      .byte.b	$ff
  31812  8018					      repend
  31813  8019		       ff		      .byte.b	$ff
  31812  8019					      repend
  31813  801a		       ff		      .byte.b	$ff
  31812  801a					      repend
  31813  801b		       ff		      .byte.b	$ff
  31812  801b					      repend
  31813  801c		       ff		      .byte.b	$ff
  31812  801c					      repend
  31813  801d		       ff		      .byte.b	$ff
  31812  801d					      repend
  31813  801e		       ff		      .byte.b	$ff
  31812  801e					      repend
  31813  801f		       ff		      .byte.b	$ff
  31812  801f					      repend
  31813  8020		       ff		      .byte.b	$ff
  31812  8020					      repend
  31813  8021		       ff		      .byte.b	$ff
  31812  8021					      repend
  31813  8022		       ff		      .byte.b	$ff
  31812  8022					      repend
  31813  8023		       ff		      .byte.b	$ff
  31812  8023					      repend
  31813  8024		       ff		      .byte.b	$ff
  31812  8024					      repend
  31813  8025		       ff		      .byte.b	$ff
  31812  8025					      repend
  31813  8026		       ff		      .byte.b	$ff
  31812  8026					      repend
  31813  8027		       ff		      .byte.b	$ff
  31812  8027					      repend
  31813  8028		       ff		      .byte.b	$ff
  31812  8028					      repend
  31813  8029		       ff		      .byte.b	$ff
  31812  8029					      repend
  31813  802a		       ff		      .byte.b	$ff
  31812  802a					      repend
  31813  802b		       ff		      .byte.b	$ff
  31812  802b					      repend
  31813  802c		       ff		      .byte.b	$ff
  31812  802c					      repend
  31813  802d		       ff		      .byte.b	$ff
  31812  802d					      repend
  31813  802e		       ff		      .byte.b	$ff
  31812  802e					      repend
  31813  802f		       ff		      .byte.b	$ff
  31812  802f					      repend
  31813  8030		       ff		      .byte.b	$ff
  31812  8030					      repend
  31813  8031		       ff		      .byte.b	$ff
  31812  8031					      repend
  31813  8032		       ff		      .byte.b	$ff
  31812  8032					      repend
  31813  8033		       ff		      .byte.b	$ff
  31812  8033					      repend
  31813  8034		       ff		      .byte.b	$ff
  31812  8034					      repend
  31813  8035		       ff		      .byte.b	$ff
  31812  8035					      repend
  31813  8036		       ff		      .byte.b	$ff
  31812  8036					      repend
  31813  8037		       ff		      .byte.b	$ff
  31812  8037					      repend
  31813  8038		       ff		      .byte.b	$ff
  31812  8038					      repend
  31813  8039		       ff		      .byte.b	$ff
  31812  8039					      repend
  31813  803a		       ff		      .byte.b	$ff
  31812  803a					      repend
  31813  803b		       ff		      .byte.b	$ff
  31812  803b					      repend
  31813  803c		       ff		      .byte.b	$ff
  31812  803c					      repend
  31813  803d		       ff		      .byte.b	$ff
  31812  803d					      repend
  31813  803e		       ff		      .byte.b	$ff
  31812  803e					      repend
  31813  803f		       ff		      .byte.b	$ff
  31812  803f					      repend
  31813  8040		       ff		      .byte.b	$ff
  31812  8040					      repend
  31813  8041		       ff		      .byte.b	$ff
  31812  8041					      repend
  31813  8042		       ff		      .byte.b	$ff
  31812  8042					      repend
  31813  8043		       ff		      .byte.b	$ff
  31812  8043					      repend
  31813  8044		       ff		      .byte.b	$ff
  31812  8044					      repend
  31813  8045		       ff		      .byte.b	$ff
  31812  8045					      repend
  31813  8046		       ff		      .byte.b	$ff
  31812  8046					      repend
  31813  8047		       ff		      .byte.b	$ff
  31812  8047					      repend
  31813  8048		       ff		      .byte.b	$ff
  31812  8048					      repend
  31813  8049		       ff		      .byte.b	$ff
  31812  8049					      repend
  31813  804a		       ff		      .byte.b	$ff
  31812  804a					      repend
  31813  804b		       ff		      .byte.b	$ff
  31812  804b					      repend
  31813  804c		       ff		      .byte.b	$ff
  31812  804c					      repend
  31813  804d		       ff		      .byte.b	$ff
  31812  804d					      repend
  31813  804e		       ff		      .byte.b	$ff
  31812  804e					      repend
  31813  804f		       ff		      .byte.b	$ff
  31812  804f					      repend
  31813  8050		       ff		      .byte.b	$ff
  31812  8050					      repend
  31813  8051		       ff		      .byte.b	$ff
  31812  8051					      repend
  31813  8052		       ff		      .byte.b	$ff
  31812  8052					      repend
  31813  8053		       ff		      .byte.b	$ff
  31812  8053					      repend
  31813  8054		       ff		      .byte.b	$ff
  31812  8054					      repend
  31813  8055		       ff		      .byte.b	$ff
  31812  8055					      repend
  31813  8056		       ff		      .byte.b	$ff
  31812  8056					      repend
  31813  8057		       ff		      .byte.b	$ff
  31812  8057					      repend
  31813  8058		       ff		      .byte.b	$ff
  31812  8058					      repend
  31813  8059		       ff		      .byte.b	$ff
  31812  8059					      repend
  31813  805a		       ff		      .byte.b	$ff
  31812  805a					      repend
  31813  805b		       ff		      .byte.b	$ff
  31812  805b					      repend
  31813  805c		       ff		      .byte.b	$ff
  31812  805c					      repend
  31813  805d		       ff		      .byte.b	$ff
  31812  805d					      repend
  31813  805e		       ff		      .byte.b	$ff
  31812  805e					      repend
  31813  805f		       ff		      .byte.b	$ff
  31812  805f					      repend
  31813  8060		       ff		      .byte.b	$ff
  31812  8060					      repend
  31813  8061		       ff		      .byte.b	$ff
  31812  8061					      repend
  31813  8062		       ff		      .byte.b	$ff
  31812  8062					      repend
  31813  8063		       ff		      .byte.b	$ff
  31812  8063					      repend
  31813  8064		       ff		      .byte.b	$ff
  31812  8064					      repend
  31813  8065		       ff		      .byte.b	$ff
  31812  8065					      repend
  31813  8066		       ff		      .byte.b	$ff
  31812  8066					      repend
  31813  8067		       ff		      .byte.b	$ff
  31812  8067					      repend
  31813  8068		       ff		      .byte.b	$ff
  31812  8068					      repend
  31813  8069		       ff		      .byte.b	$ff
  31812  8069					      repend
  31813  806a		       ff		      .byte.b	$ff
  31812  806a					      repend
  31813  806b		       ff		      .byte.b	$ff
  31812  806b					      repend
  31813  806c		       ff		      .byte.b	$ff
  31812  806c					      repend
  31813  806d		       ff		      .byte.b	$ff
  31812  806d					      repend
  31813  806e		       ff		      .byte.b	$ff
  31812  806e					      repend
  31813  806f		       ff		      .byte.b	$ff
  31812  806f					      repend
  31813  8070		       ff		      .byte.b	$ff
  31812  8070					      repend
  31813  8071		       ff		      .byte.b	$ff
  31812  8071					      repend
  31813  8072		       ff		      .byte.b	$ff
  31812  8072					      repend
  31813  8073		       ff		      .byte.b	$ff
  31812  8073					      repend
  31813  8074		       ff		      .byte.b	$ff
  31812  8074					      repend
  31813  8075		       ff		      .byte.b	$ff
  31812  8075					      repend
  31813  8076		       ff		      .byte.b	$ff
  31812  8076					      repend
  31813  8077		       ff		      .byte.b	$ff
  31812  8077					      repend
  31813  8078		       ff		      .byte.b	$ff
  31812  8078					      repend
  31813  8079		       ff		      .byte.b	$ff
  31812  8079					      repend
  31813  807a		       ff		      .byte.b	$ff
  31812  807a					      repend
  31813  807b		       ff		      .byte.b	$ff
  31812  807b					      repend
  31813  807c		       ff		      .byte.b	$ff
  31812  807c					      repend
  31813  807d		       ff		      .byte.b	$ff
  31812  807d					      repend
  31813  807e		       ff		      .byte.b	$ff
  31812  807e					      repend
  31813  807f		       ff		      .byte.b	$ff
  31812  807f					      repend
  31813  8080		       ff		      .byte.b	$ff
  31812  8080					      repend
  31813  8081		       ff		      .byte.b	$ff
  31812  8081					      repend
  31813  8082		       ff		      .byte.b	$ff
  31812  8082					      repend
  31813  8083		       ff		      .byte.b	$ff
  31812  8083					      repend
  31813  8084		       ff		      .byte.b	$ff
  31812  8084					      repend
  31813  8085		       ff		      .byte.b	$ff
  31812  8085					      repend
  31813  8086		       ff		      .byte.b	$ff
  31812  8086					      repend
  31813  8087		       ff		      .byte.b	$ff
  31812  8087					      repend
  31813  8088		       ff		      .byte.b	$ff
  31812  8088					      repend
  31813  8089		       ff		      .byte.b	$ff
  31812  8089					      repend
  31813  808a		       ff		      .byte.b	$ff
  31812  808a					      repend
  31813  808b		       ff		      .byte.b	$ff
  31812  808b					      repend
  31813  808c		       ff		      .byte.b	$ff
  31812  808c					      repend
  31813  808d		       ff		      .byte.b	$ff
  31812  808d					      repend
  31813  808e		       ff		      .byte.b	$ff
  31812  808e					      repend
  31813  808f		       ff		      .byte.b	$ff
  31812  808f					      repend
  31813  8090		       ff		      .byte.b	$ff
  31812  8090					      repend
  31813  8091		       ff		      .byte.b	$ff
  31812  8091					      repend
  31813  8092		       ff		      .byte.b	$ff
  31812  8092					      repend
  31813  8093		       ff		      .byte.b	$ff
  31812  8093					      repend
  31813  8094		       ff		      .byte.b	$ff
  31812  8094					      repend
  31813  8095		       ff		      .byte.b	$ff
  31812  8095					      repend
  31813  8096		       ff		      .byte.b	$ff
  31812  8096					      repend
  31813  8097		       ff		      .byte.b	$ff
  31812  8097					      repend
  31813  8098		       ff		      .byte.b	$ff
  31812  8098					      repend
  31813  8099		       ff		      .byte.b	$ff
  31812  8099					      repend
  31813  809a		       ff		      .byte.b	$ff
  31812  809a					      repend
  31813  809b		       ff		      .byte.b	$ff
  31812  809b					      repend
  31813  809c		       ff		      .byte.b	$ff
  31812  809c					      repend
  31813  809d		       ff		      .byte.b	$ff
  31812  809d					      repend
  31813  809e		       ff		      .byte.b	$ff
  31812  809e					      repend
  31813  809f		       ff		      .byte.b	$ff
  31812  809f					      repend
  31813  80a0		       ff		      .byte.b	$ff
  31812  80a0					      repend
  31813  80a1		       ff		      .byte.b	$ff
  31812  80a1					      repend
  31813  80a2		       ff		      .byte.b	$ff
  31812  80a2					      repend
  31813  80a3		       ff		      .byte.b	$ff
  31812  80a3					      repend
  31813  80a4		       ff		      .byte.b	$ff
  31812  80a4					      repend
  31813  80a5		       ff		      .byte.b	$ff
  31812  80a5					      repend
  31813  80a6		       ff		      .byte.b	$ff
  31812  80a6					      repend
  31813  80a7		       ff		      .byte.b	$ff
  31812  80a7					      repend
  31813  80a8		       ff		      .byte.b	$ff
  31812  80a8					      repend
  31813  80a9		       ff		      .byte.b	$ff
  31812  80a9					      repend
  31813  80aa		       ff		      .byte.b	$ff
  31812  80aa					      repend
  31813  80ab		       ff		      .byte.b	$ff
  31812  80ab					      repend
  31813  80ac		       ff		      .byte.b	$ff
  31812  80ac					      repend
  31813  80ad		       ff		      .byte.b	$ff
  31812  80ad					      repend
  31813  80ae		       ff		      .byte.b	$ff
  31812  80ae					      repend
  31813  80af		       ff		      .byte.b	$ff
  31812  80af					      repend
  31813  80b0		       ff		      .byte.b	$ff
  31812  80b0					      repend
  31813  80b1		       ff		      .byte.b	$ff
  31812  80b1					      repend
  31813  80b2		       ff		      .byte.b	$ff
  31812  80b2					      repend
  31813  80b3		       ff		      .byte.b	$ff
  31812  80b3					      repend
  31813  80b4		       ff		      .byte.b	$ff
  31812  80b4					      repend
  31813  80b5		       ff		      .byte.b	$ff
  31812  80b5					      repend
  31813  80b6		       ff		      .byte.b	$ff
  31812  80b6					      repend
  31813  80b7		       ff		      .byte.b	$ff
  31812  80b7					      repend
  31813  80b8		       ff		      .byte.b	$ff
  31812  80b8					      repend
  31813  80b9		       ff		      .byte.b	$ff
  31812  80b9					      repend
  31813  80ba		       ff		      .byte.b	$ff
  31812  80ba					      repend
  31813  80bb		       ff		      .byte.b	$ff
  31812  80bb					      repend
  31813  80bc		       ff		      .byte.b	$ff
  31812  80bc					      repend
  31813  80bd		       ff		      .byte.b	$ff
  31812  80bd					      repend
  31813  80be		       ff		      .byte.b	$ff
  31812  80be					      repend
  31813  80bf		       ff		      .byte.b	$ff
  31812  80bf					      repend
  31813  80c0		       ff		      .byte.b	$ff
  31812  80c0					      repend
  31813  80c1		       ff		      .byte.b	$ff
  31812  80c1					      repend
  31813  80c2		       ff		      .byte.b	$ff
  31812  80c2					      repend
  31813  80c3		       ff		      .byte.b	$ff
  31812  80c3					      repend
  31813  80c4		       ff		      .byte.b	$ff
  31812  80c4					      repend
  31813  80c5		       ff		      .byte.b	$ff
  31812  80c5					      repend
  31813  80c6		       ff		      .byte.b	$ff
  31812  80c6					      repend
  31813  80c7		       ff		      .byte.b	$ff
  31812  80c7					      repend
  31813  80c8		       ff		      .byte.b	$ff
  31812  80c8					      repend
  31813  80c9		       ff		      .byte.b	$ff
  31812  80c9					      repend
  31813  80ca		       ff		      .byte.b	$ff
  31812  80ca					      repend
  31813  80cb		       ff		      .byte.b	$ff
  31812  80cb					      repend
  31813  80cc		       ff		      .byte.b	$ff
  31812  80cc					      repend
  31813  80cd		       ff		      .byte.b	$ff
  31812  80cd					      repend
  31813  80ce		       ff		      .byte.b	$ff
  31812  80ce					      repend
  31813  80cf		       ff		      .byte.b	$ff
  31812  80cf					      repend
  31813  80d0		       ff		      .byte.b	$ff
  31812  80d0					      repend
  31813  80d1		       ff		      .byte.b	$ff
  31812  80d1					      repend
  31813  80d2		       ff		      .byte.b	$ff
  31812  80d2					      repend
  31813  80d3		       ff		      .byte.b	$ff
  31812  80d3					      repend
  31813  80d4		       ff		      .byte.b	$ff
  31812  80d4					      repend
  31813  80d5		       ff		      .byte.b	$ff
  31812  80d5					      repend
  31813  80d6		       ff		      .byte.b	$ff
  31812  80d6					      repend
  31813  80d7		       ff		      .byte.b	$ff
  31812  80d7					      repend
  31813  80d8		       ff		      .byte.b	$ff
  31812  80d8					      repend
  31813  80d9		       ff		      .byte.b	$ff
  31812  80d9					      repend
  31813  80da		       ff		      .byte.b	$ff
  31812  80da					      repend
  31813  80db		       ff		      .byte.b	$ff
  31812  80db					      repend
  31813  80dc		       ff		      .byte.b	$ff
  31812  80dc					      repend
  31813  80dd		       ff		      .byte.b	$ff
  31812  80dd					      repend
  31813  80de		       ff		      .byte.b	$ff
  31812  80de					      repend
  31813  80df		       ff		      .byte.b	$ff
  31812  80df					      repend
  31813  80e0		       ff		      .byte.b	$ff
  31812  80e0					      repend
  31813  80e1		       ff		      .byte.b	$ff
  31812  80e1					      repend
  31813  80e2		       ff		      .byte.b	$ff
  31812  80e2					      repend
  31813  80e3		       ff		      .byte.b	$ff
  31812  80e3					      repend
  31813  80e4		       ff		      .byte.b	$ff
  31812  80e4					      repend
  31813  80e5		       ff		      .byte.b	$ff
  31812  80e5					      repend
  31813  80e6		       ff		      .byte.b	$ff
  31812  80e6					      repend
  31813  80e7		       ff		      .byte.b	$ff
  31812  80e7					      repend
  31813  80e8		       ff		      .byte.b	$ff
  31812  80e8					      repend
  31813  80e9		       ff		      .byte.b	$ff
  31812  80e9					      repend
  31813  80ea		       ff		      .byte.b	$ff
  31812  80ea					      repend
  31813  80eb		       ff		      .byte.b	$ff
  31812  80eb					      repend
  31813  80ec		       ff		      .byte.b	$ff
  31812  80ec					      repend
  31813  80ed		       ff		      .byte.b	$ff
  31812  80ed					      repend
  31813  80ee		       ff		      .byte.b	$ff
  31812  80ee					      repend
  31813  80ef		       ff		      .byte.b	$ff
  31812  80ef					      repend
  31813  80f0		       ff		      .byte.b	$ff
  31812  80f0					      repend
  31813  80f1		       ff		      .byte.b	$ff
  31812  80f1					      repend
  31813  80f2		       ff		      .byte.b	$ff
  31812  80f2					      repend
  31813  80f3		       ff		      .byte.b	$ff
  31812  80f3					      repend
  31813  80f4		       ff		      .byte.b	$ff
  31812  80f4					      repend
  31813  80f5		       ff		      .byte.b	$ff
  31812  80f5					      repend
  31813  80f6		       ff		      .byte.b	$ff
  31812  80f6					      repend
  31813  80f7		       ff		      .byte.b	$ff
  31812  80f7					      repend
  31813  80f8		       ff		      .byte.b	$ff
  31812  80f8					      repend
  31813  80f9		       ff		      .byte.b	$ff
  31812  80f9					      repend
  31813  80fa		       ff		      .byte.b	$ff
  31812  80fa					      repend
  31813  80fb		       ff		      .byte.b	$ff
  31812  80fb					      repend
  31813  80fc		       ff		      .byte.b	$ff
  31812  80fc					      repend
  31813  80fd		       ff		      .byte.b	$ff
  31812  80fd					      repend
  31813  80fe		       ff		      .byte.b	$ff
  31812  80fe					      repend
  31813  80ff		       ff		      .byte.b	$ff
  31814  8100					      repend
  31815  8100							; Provided under the CC0 license. See the included LICENSE.txt for details.
  31816  8100
  31817  8100							; This is a 2-line kernel!
  31818  8100					      ifnconst	vertical_reflect
  31819  8100				   kernel
  31820  8100					      endif
  31821  8100		       85 02		      sta	WSYNC
  31822  8102		       a9 ff		      lda	#255
  31823  8104		       8d 96 02 	      sta	TIM64T
  31824  8107
  31825  8107		       a9 01		      lda	#1
  31826  8109		       85 27		      sta	VDELBL
  31827  810b		       85 25		      sta	VDELP0
  31828  810d		       a6 92		      ldx	ballheight
  31829  810f		       e8		      inx
  31830  8110		       e8		      inx
  31831  8111		       86 9f		      stx	temp4
  31832  8113		       a5 86		      lda	player1y
  31833  8115		       85 9e		      sta	temp3
  31834  8117
  31835  8117				  -	      ifconst	shakescreen
  31836  8117				  -	      jsr	doshakescreen
  31837  8117					      else
  31838  8117		       a6 90		      ldx	missile0height
  31839  8119		       e8		      inx
  31840  811a					      endif
  31841  811a
  31842  811a		       e8		      inx
  31843  811b		       86 f6		      stx	stack1
  31844  811d
  31845  811d		       a5 89		      lda	bally
  31846  811f		       85 f7		      sta	stack2
  31847  8121
  31848  8121		       a5 85		      lda	player0y
  31849  8123		       a2 00		      ldx	#0
  31850  8125		       85 02		      sta	WSYNC
  31851  8127		       86 1b		      stx	GRP0
  31852  8129		       86 1c		      stx	GRP1
  31853  812b		       86 0e		      stx	PF1L
  31854  812d		       86 0f		      stx	PF2
  31855  812f		       86 2c		      stx	CXCLR
  31856  8131				  -	      ifconst	readpaddle
  31857  8131				  -	      stx	paddle
  31858  8131					      else
      0  8131					      sleep	3
      1  8131				   .CYCLES    SET	3
      2  8131
      3  8131				  -	      IF	.CYCLES < 2
      4  8131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8131				  -	      ERR
      6  8131					      ENDIF
      7  8131
      8  8131					      IF	.CYCLES & 1
      9  8131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8131		       04 00		      nop	0
     11  8133				  -	      ELSE
     12  8133				  -	      bit	VSYNC
     13  8133					      ENDIF
     14  8133				   .CYCLES    SET	.CYCLES - 3
     15  8133					      ENDIF
     16  8133
     17  8133				  -	      REPEAT	.CYCLES / 2
     18  8133				  -	      nop
     19  8133					      REPEND
  31860  8133					      endif
  31861  8133
  31862  8133		       95 9d		      sta	temp2,x
  31863  8135
  31864  8135							;store these so they can be retrieved later
  31865  8135					      ifnconst	pfres
  31866  8135		       a2 54		      ldx	#128-44+(4-pfwidth)*12
  31867  8137				  -	      else
  31868  8137				  -	      ldx	#132-pfres*pfwidth
  31869  8137					      endif
  31870  8137
  31871  8137		       c6 85		      dec	player0y
  31872  8139
  31873  8139		       a5 91		      lda	missile0y
  31874  813b		       85 a0		      sta	temp5
  31875  813d		       a5 88		      lda	missile1y
  31876  813f		       85 a1		      sta	temp6
  31877  8141
  31878  8141		       a5 ef		      lda	playfieldpos
  31879  8143		       85 9c		      sta	temp1
  31880  8145
  31881  8145				  -	      ifconst	pfrowheight
  31882  8145				  -	      lda	#pfrowheight+2
  31883  8145					      else
  31884  8145					      ifnconst	pfres
  31885  8145		       a9 0a		      lda	#10
  31886  8147				  -	      else
  31887  8147				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  31888  8147					      endif
  31889  8147					      endif
  31890  8147		       18		      clc
  31891  8148		       e5 ef		      sbc	playfieldpos
  31892  814a		       85 ef		      sta	playfieldpos
  31893  814c		       4c 78 f1 	      jmp	.startkernel
  31894  814f
  31895  814f				   .skipDrawP0
  31896  814f		       a9 00		      lda	#0
  31897  8151		       a8		      tay
  31898  8152		       4c aa f1 	      jmp	.continueP0
  31899  8155
  31900  8155				   .skipDrawP1
  31901  8155		       a9 00		      lda	#0
  31902  8157		       a8		      tay
  31903  8158		       4c 82 f1 	      jmp	.continueP1
  31904  815b
  31905  815b				   .kerloop		; enter at cycle 59??
  31906  815b
  31907  815b				   continuekernel
      0  815b					      sleep	2
      1  815b				   .CYCLES    SET	2
      2  815b
      3  815b				  -	      IF	.CYCLES < 2
      4  815b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  815b				  -	      ERR
      6  815b					      ENDIF
      7  815b
      8  815b				  -	      IF	.CYCLES & 1
      9  815b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  815b				  -	      nop	0
     11  815b				  -	      ELSE
     12  815b				  -	      bit	VSYNC
     13  815b				  -	      ENDIF
     14  815b				  -.CYCLES    SET	.CYCLES - 3
     15  815b					      ENDIF
     16  815b
     17  815b					      REPEAT	.CYCLES / 2
     18  815b		       ea		      nop
     19  815c					      REPEND
  31909  815c				   continuekernel2
  31910  815c		       a5 92		      lda	ballheight
  31911  815e
  31912  815e				  -	      ifconst	pfres
  31913  815e				  -	      ldy	playfield+pfres*pfwidth-132,x
  31914  815e				  -	      sty	PF1L	;3
  31915  815e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
  31916  815e				  -	      sty	PF2L	;3
  31917  815e				  -	      ldy	playfield+pfres*pfwidth-129,x
  31918  815e				  -	      sty	PF1R	; 3 too early?
  31919  815e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
  31920  815e				  -	      sty	PF2R	;3
  31921  815e					      else
  31922  815e		       bc 7c 10 	      ldy	playfield-48+pfwidth*12+44-128,x
  31923  8161		       84 0e		      sty	PF1L	;3
  31924  8163		       bc 7d 10 	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  31925  8166		       84 0f		      sty	PF2L	;3
  31926  8168		       bc 7f 10 	      ldy	playfield-48+pfwidth*12+47-128,x	;4
  31927  816b		       84 0e		      sty	PF1R	; 3 too early?
  31928  816d		       bc 7e 10 	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  31929  8170		       84 0f		      sty	PF2R	;3
  31930  8172					      endif
  31931  8172
  31932  8172							; should be playfield+$38 for width=2
  31933  8172
  31934  8172		       c7 89		      dcp	bally
  31935  8174		       2a		      rol
  31936  8175		       2a		      rol
  31937  8176							; rol
  31938  8176							; rol
  31939  8176				   goback
  31940  8176		       85 1f		      sta	ENABL
  31941  8178				   .startkernel
  31942  8178		       a5 8f		      lda	player1height	;3
  31943  817a		       c7 86		      dcp	player1y	;5
  31944  817c		       90 d7		      bcc	.skipDrawP1	;2
  31945  817e		       a4 86		      ldy	player1y	;3
  31946  8180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  31947  8182							; so it doesn't cross a page boundary!
  31948  8182
  31949  8182				   .continueP1
  31950  8182		       85 1c		      sta	GRP1	;3
  31951  8184
  31952  8184				  -	      ifnconst	player1colors
  31953  8184				  -	      lda	missile1height	;3
  31954  8184				  -	      dcp	missile1y	;5
  31955  8184				  -	      rol		;2
  31956  8184				  -	      rol		;2
  31957  8184				  -	      sta	ENAM1	;3
  31958  8184					      else
  31959  8184		       b1 87		      lda	(player1color),y
  31960  8186		       85 07		      sta	COLUP1
  31961  8188					      ifnconst	playercolors
      0  8188					      sleep	7
      1  8188				   .CYCLES    SET	7
      2  8188
      3  8188				  -	      IF	.CYCLES < 2
      4  8188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8188				  -	      ERR
      6  8188					      ENDIF
      7  8188
      8  8188					      IF	.CYCLES & 1
      9  8188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8188		       04 00		      nop	0
     11  818a				  -	      ELSE
     12  818a				  -	      bit	VSYNC
     13  818a					      ENDIF
     14  818a				   .CYCLES    SET	.CYCLES - 3
     15  818a					      ENDIF
     16  818a
     17  818a					      REPEAT	.CYCLES / 2
     18  818a		       ea		      nop
     17  818a					      REPEND
     18  818b		       ea		      nop
     19  818c					      REPEND
  31963  818c				  -	      else
  31964  818c				  -	      lda.w	player0colorstore
  31965  818c				  -	      sta	COLUP0
  31966  818c					      endif
  31967  818c					      endif
  31968  818c
  31969  818c				  -	      ifconst	pfres
  31970  818c				  -	      lda	playfield+pfres*pfwidth-132,x
  31971  818c				  -	      sta	PF1L	;3
  31972  818c				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
  31973  818c				  -	      sta	PF2L	;3
  31974  818c				  -	      lda	playfield+pfres*pfwidth-129,x
  31975  818c				  -	      sta	PF1R	; 3 too early?
  31976  818c				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
  31977  818c				  -	      sta	PF2R	;3
  31978  818c					      else
  31979  818c		       bd 7c 10 	      lda	playfield-48+pfwidth*12+44-128,x	;4
  31980  818f		       85 0e		      sta	PF1L	;3
  31981  8191		       bd 7d 10 	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
  31982  8194		       85 0f		      sta	PF2L	;3
  31983  8196		       bd 7f 10 	      lda	playfield-48+pfwidth*12+47-128,x	;4
  31984  8199		       85 0e		      sta	PF1R	; 3 too early?
  31985  819b		       bd 7e 10 	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
  31986  819e		       85 0f		      sta	PF2R	;3
  31987  81a0					      endif
  31988  81a0							; sleep 3
  31989  81a0
  31990  81a0		       a5 8e		      lda	player0height
  31991  81a2		       c7 85		      dcp	player0y
  31992  81a4		       90 a9		      bcc	.skipDrawP0
  31993  81a6		       a4 85		      ldy	player0y
  31994  81a8		       b1 8a		      lda	(player0pointer),y
  31995  81aa				   .continueP0
  31996  81aa		       85 1b		      sta	GRP0
  31997  81ac
  31998  81ac					      ifnconst	no_blank_lines
  31999  81ac					      ifnconst	playercolors
  32000  81ac		       a5 90		      lda	missile0height	;3
  32001  81ae		       c7 91		      dcp	missile0y	;5
  32002  81b0		       e5 f6		      sbc	stack1
  32003  81b2		       85 1d		      sta	ENAM0	;3
  32004  81b4				  -	      else
  32005  81b4				  -	      lda	(player0color),y
  32006  81b4				  -	      sta	player0colorstore
  32007  81b4				  -	      sleep	6
  32008  81b4					      endif
  32009  81b4		       c6 9c		      dec	temp1
  32010  81b6		       d0 a3		      bne	continuekernel
  32011  81b8				  -	      else
  32012  81b8				  -	      dec	temp1
  32013  81b8				  -	      beq	altkernel2
  32014  81b8				  -	      ifconst	readpaddle
  32015  81b8				  -	      ldy	currentpaddle
  32016  81b8				  -	      lda	INPT0,y
  32017  81b8				  -	      bpl	noreadpaddle
  32018  81b8				  -	      inc	paddle
  32019  81b8				  -	      jmp	continuekernel2
  32020  81b8				  -noreadpaddle
  32021  81b8				  -	      sleep	2
  32022  81b8				  -	      jmp	continuekernel
  32023  81b8				  -	      else
  32024  81b8				  -	      ifnconst	playercolors
  32025  81b8				  -	      ifconst	PFcolors
  32026  81b8				  -	      txa
  32027  81b8				  -	      tay
  32028  81b8				  -	      lda	(pfcolortable),y
  32029  81b8				  -	      ifnconst	backgroundchange
  32030  81b8				  -	      sta	COLUPF
  32031  81b8				  -	      else
  32032  81b8				  -	      sta	COLUBK
  32033  81b8				  -	      endif
  32034  81b8				  -	      jmp	continuekernel
  32035  81b8				  -	      else
  32036  81b8				  -	      ifconst	kernelmacrodef
  32037  81b8				  -	      kernelmacro
  32038  81b8				  -	      else
  32039  81b8				  -	      sleep	12
  32040  81b8				  -	      endif
  32041  81b8				  -	      endif
  32042  81b8				  -	      else
  32043  81b8				  -	      lda	(player0color),y
  32044  81b8				  -	      sta	player0colorstore
  32045  81b8				  -	      sleep	4
  32046  81b8				  -	      endif
  32047  81b8				  -	      jmp	continuekernel
  32048  81b8				  -	      endif
  32049  81b8				  -altkernel2
  32050  81b8				  -	      txa
  32051  81b8				  -	      ifnconst	vertical_reflect
  32052  81b8				  -	      sbx	#256-pfwidth
  32053  81b8				  -	      else
  32054  81b8				  -	      sbx	#256-pfwidth/2
  32055  81b8				  -	      endif
  32056  81b8				  -	      bmi	lastkernelline
  32057  81b8				  -	      ifconst	pfrowheight
  32058  81b8				  -	      lda	#pfrowheight
  32059  81b8				  -	      else
  32060  81b8				  -	      ifnconst	pfres
  32061  81b8				  -	      lda	#8
  32062  81b8				  -	      else
  32063  81b8				  -	      lda	#(96/pfres)	; try to come close to the real size
  32064  81b8				  -	      endif
  32065  81b8				  -	      endif
  32066  81b8				  -	      sta	temp1
  32067  81b8				  -	      jmp	continuekernel
  32068  81b8					      endif
  32069  81b8
  32070  81b8				   altkernel
  32071  81b8
  32072  81b8				  -	      ifconst	PFmaskvalue
  32073  81b8				  -	      lda	#PFmaskvalue
  32074  81b8					      else
  32075  81b8		       a9 00		      lda	#0
  32076  81ba					      endif
  32077  81ba		       85 0e		      sta	PF1L
  32078  81bc		       85 0f		      sta	PF2
  32079  81be
  32080  81be
  32081  81be							;sleep 3
  32082  81be
  32083  81be							;28 cycles to fix things
  32084  81be							;minus 11=17
  32085  81be
  32086  81be							; lax temp4
  32087  81be							; clc
  32088  81be		       8a		      txa
  32089  81bf					      ifnconst	vertical_reflect
  32090  81bf		       cb fc		      sbx	#256-pfwidth
  32091  81c1				  -	      else
  32092  81c1				  -	      sbx	#256-pfwidth/2
  32093  81c1					      endif
  32094  81c1
  32095  81c1		       30 12		      bmi	lastkernelline
  32096  81c3
  32097  81c3				  -	      ifconst	PFcolorandheight
  32098  81c3				  -	      ifconst	pfres
  32099  81c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
  32100  81c3				  -	      else
  32101  81c3				  -	      ldy	playfieldcolorandheight-87,x
  32102  81c3				  -	      endif
  32103  81c3				  -	      ifnconst	backgroundchange
  32104  81c3				  -	      sty	COLUPF
  32105  81c3				  -	      else
  32106  81c3				  -	      sty	COLUBK
  32107  81c3				  -	      endif
  32108  81c3				  -	      ifconst	pfres
  32109  81c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
  32110  81c3				  -	      else
  32111  81c3				  -	      lda	playfieldcolorandheight-88,x
  32112  81c3				  -	      endif
  32113  81c3				  -	      sta.w	temp1
  32114  81c3					      endif
  32115  81c3				  -	      ifconst	PFheights
  32116  81c3				  -	      lsr
  32117  81c3				  -	      lsr
  32118  81c3				  -	      tay
  32119  81c3				  -	      lda	(pfheighttable),y
  32120  81c3				  -	      sta.w	temp1
  32121  81c3					      endif
  32122  81c3					      ifconst	PFcolors
  32123  81c3		       a8		      tay
  32124  81c4		       b1 f0		      lda	(pfcolortable),y
  32125  81c6					      ifnconst	backgroundchange
  32126  81c6		       85 08		      sta	COLUPF
  32127  81c8				  -	      else
  32128  81c8				  -	      sta	COLUBK
  32129  81c8					      endif
  32130  81c8				  -	      ifconst	pfrowheight
  32131  81c8				  -	      lda	#pfrowheight
  32132  81c8					      else
  32133  81c8					      ifnconst	pfres
  32134  81c8		       a9 08		      lda	#8
  32135  81ca				  -	      else
  32136  81ca				  -	      lda	#(96/pfres)	; try to come close to the real size
  32137  81ca					      endif
  32138  81ca					      endif
  32139  81ca		       85 9c		      sta	temp1
  32140  81cc					      endif
  32141  81cc					      ifnconst	PFcolorandheight
  32142  81cc				  -	      ifnconst	PFcolors
  32143  81cc				  -	      ifnconst	PFheights
  32144  81cc				  -	      ifnconst	no_blank_lines
  32145  81cc				  -			; read paddle 0
  32146  81cc				  -			; lo-res paddle read
  32147  81cc				  -			; bit INPT0
  32148  81cc				  -			; bmi paddleskipread
  32149  81cc				  -			; inc paddle0
  32150  81cc				  -			;donepaddleskip
  32151  81cc				  -	      sleep	10
  32152  81cc				  -	      ifconst	pfrowheight
  32153  81cc				  -	      lda	#pfrowheight
  32154  81cc				  -	      else
  32155  81cc				  -	      ifnconst	pfres
  32156  81cc				  -	      lda	#8
  32157  81cc				  -	      else
  32158  81cc				  -	      lda	#(96/pfres)	; try to come close to the real size
  32159  81cc				  -	      endif
  32160  81cc				  -	      endif
  32161  81cc				  -	      sta	temp1
  32162  81cc				  -	      endif
  32163  81cc				  -	      endif
  32164  81cc					      endif
  32165  81cc					      endif
  32166  81cc
  32167  81cc
  32168  81cc		       a5 92		      lda	ballheight
  32169  81ce		       c7 89		      dcp	bally
  32170  81d0		       e5 9f		      sbc	temp4
  32171  81d2
  32172  81d2
  32173  81d2		       4c 76 f1 	      jmp	goback
  32174  81d5
  32175  81d5
  32176  81d5					      ifnconst	no_blank_lines
  32177  81d5				   lastkernelline
  32178  81d5				  -	      ifnconst	PFcolors
  32179  81d5				  -	      sleep	10
  32180  81d5					      else
  32181  81d5		       a0 7c		      ldy	#124
  32182  81d7		       b1 f0		      lda	(pfcolortable),y
  32183  81d9		       85 08		      sta	COLUPF
  32184  81db					      endif
  32185  81db
  32186  81db				  -	      ifconst	PFheights
  32187  81db				  -	      ldx	#1
  32188  81db				  -			;sleep 4
  32189  81db				  -	      sleep	3	; this was over 1 cycle
  32190  81db					      else
  32191  81db		       a6 ef		      ldx	playfieldpos
  32192  81dd							;sleep 3
      0  81dd					      sleep	2	; this was over 1 cycle
      1  81dd				   .CYCLES    SET	2
      2  81dd
      3  81dd				  -	      IF	.CYCLES < 2
      4  81dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  81dd				  -	      ERR
      6  81dd					      ENDIF
      7  81dd
      8  81dd				  -	      IF	.CYCLES & 1
      9  81dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  81dd				  -	      nop	0
     11  81dd				  -	      ELSE
     12  81dd				  -	      bit	VSYNC
     13  81dd				  -	      ENDIF
     14  81dd				  -.CYCLES    SET	.CYCLES - 3
     15  81dd					      ENDIF
     16  81dd
     17  81dd					      REPEAT	.CYCLES / 2
     18  81dd		       ea		      nop
     19  81de					      REPEND
  32194  81de					      endif
  32195  81de
  32196  81de		       4c 1b f2 	      jmp	enterlastkernel
  32197  81e1
  32198  81e1				  -	      else
  32199  81e1				  -lastkernelline
  32200  81e1				  -
  32201  81e1				  -	      ifconst	PFheights
  32202  81e1				  -	      ldx	#1
  32203  81e1				  -			;sleep 5
  32204  81e1				  -	      sleep	4	; this was over 1 cycle
  32205  81e1				  -	      else
  32206  81e1				  -	      ldx	playfieldpos
  32207  81e1				  -			;sleep 4
  32208  81e1				  -	      sleep	3	; this was over 1 cycle
  32209  81e1				  -	      endif
  32210  81e1				  -
  32211  81e1				  -	      cpx	#0
  32212  81e1				  -	      bne	.enterfromNBL
  32213  81e1				  -	      jmp	no_blank_lines_bailout
  32214  81e1					      endif
  32215  81e1
  32216  81e1					      if	((<*)>$d5)
  32217  8200		       00 00 00 00*	      align	256
  32218  8200					      endif
  32219  8200							; this is a kludge to prevent page wrapping - fix!!!
  32220  8200
  32221  8200				   .skipDrawlastP1
  32222  8200		       a9 00		      lda	#0
  32223  8202		       a8		      tay		; added so we don't cross a page
  32224  8203		       4c 2d f2 	      jmp	.continuelastP1
  32225  8206
  32226  8206				   .endkerloop		; enter at cycle 59??
  32227  8206
  32228  8206		       ea		      nop
  32229  8207
  32230  8207				   .enterfromNBL
  32231  8207				  -	      ifconst	pfres
  32232  8207				  -	      ldy.w	playfield+pfres*pfwidth-4
  32233  8207				  -	      sty	PF1L	;3
  32234  8207				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  32235  8207				  -	      sty	PF2L	;3
  32236  8207				  -	      ldy.w	playfield+pfres*pfwidth-1
  32237  8207				  -	      sty	PF1R	; possibly too early?
  32238  8207				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  32239  8207				  -	      sty	PF2R	;3
  32240  8207					      else
  32241  8207		       ac fc 10 	      ldy.w	playfield-48+pfwidth*12+44
  32242  820a		       84 0e		      sty	PF1L	;3
  32243  820c		       ac fd 10 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  32244  820f		       84 0f		      sty	PF2L	;3
  32245  8211		       ac ff 10 	      ldy.w	playfield-48+pfwidth*12+47
  32246  8214		       84 0e		      sty	PF1R	; possibly too early?
  32247  8216		       ac fe 10 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  32248  8219		       84 0f		      sty	PF2R	;3
  32249  821b					      endif
  32250  821b
  32251  821b				   enterlastkernel
  32252  821b		       a5 92		      lda	ballheight
  32253  821d
  32254  821d							; tya
  32255  821d		       c7 89		      dcp	bally
  32256  821f							; sleep 4
  32257  821f
  32258  821f							; sbc stack3
  32259  821f		       2a		      rol
  32260  8220		       2a		      rol
  32261  8221		       85 1f		      sta	ENABL
  32262  8223
  32263  8223		       a5 8f		      lda	player1height	;3
  32264  8225		       c7 86		      dcp	player1y	;5
  32265  8227		       90 d7		      bcc	.skipDrawlastP1
  32266  8229		       a4 86		      ldy	player1y	;3
  32267  822b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
  32268  822d							; so it doesn't cross a page boundary!
  32269  822d
  32270  822d				   .continuelastP1
  32271  822d		       85 1c		      sta	GRP1	;3
  32272  822f
  32273  822f				  -	      ifnconst	player1colors
  32274  822f				  -	      lda	missile1height	;3
  32275  822f				  -	      dcp	missile1y	;5
  32276  822f					      else
  32277  822f		       b1 87		      lda	(player1color),y
  32278  8231		       85 07		      sta	COLUP1
  32279  8233					      endif
  32280  8233
  32281  8233		       ca		      dex
  32282  8234							;dec temp4 ; might try putting this above PF writes
  32283  8234		       f0 36		      beq	endkernel
  32284  8236
  32285  8236
  32286  8236				  -	      ifconst	pfres
  32287  8236				  -	      ldy.w	playfield+pfres*pfwidth-4
  32288  8236				  -	      sty	PF1L	;3
  32289  8236				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
  32290  8236				  -	      sty	PF2L	;3
  32291  8236				  -	      ldy.w	playfield+pfres*pfwidth-1
  32292  8236				  -	      sty	PF1R	; possibly too early?
  32293  8236				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
  32294  8236				  -	      sty	PF2R	;3
  32295  8236					      else
  32296  8236		       ac fc 10 	      ldy.w	playfield-48+pfwidth*12+44
  32297  8239		       84 0e		      sty	PF1L	;3
  32298  823b		       ac fd 10 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
  32299  823e		       84 0f		      sty	PF2L	;3
  32300  8240		       ac ff 10 	      ldy.w	playfield-48+pfwidth*12+47
  32301  8243		       84 0e		      sty	PF1R	; possibly too early?
  32302  8245		       ac fe 10 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
  32303  8248		       84 0f		      sty	PF2R	;3
  32304  824a					      endif
  32305  824a
  32306  824a				  -	      ifnconst	player1colors
  32307  824a				  -	      rol		;2
  32308  824a				  -	      rol		;2
  32309  824a				  -	      sta	ENAM1	;3
  32310  824a					      else
  32311  824a					      ifnconst	playercolors
      0  824a					      sleep	7
      1  824a				   .CYCLES    SET	7
      2  824a
      3  824a				  -	      IF	.CYCLES < 2
      4  824a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  824a				  -	      ERR
      6  824a					      ENDIF
      7  824a
      8  824a					      IF	.CYCLES & 1
      9  824a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  824a		       04 00		      nop	0
     11  824c				  -	      ELSE
     12  824c				  -	      bit	VSYNC
     13  824c					      ENDIF
     14  824c				   .CYCLES    SET	.CYCLES - 3
     15  824c					      ENDIF
     16  824c
     17  824c					      REPEAT	.CYCLES / 2
     18  824c		       ea		      nop
     17  824c					      REPEND
     18  824d		       ea		      nop
     19  824e					      REPEND
  32313  824e				  -	      else
  32314  824e				  -	      lda.w	player0colorstore
  32315  824e				  -	      sta	COLUP0
  32316  824e					      endif
  32317  824e					      endif
  32318  824e
  32319  824e		       ad 8e 00 	      lda.w	player0height
  32320  8251		       c7 85		      dcp	player0y
  32321  8253		       90 11		      bcc	.skipDrawlastP0
  32322  8255		       a4 85		      ldy	player0y
  32323  8257		       b1 8a		      lda	(player0pointer),y
  32324  8259				   .continuelastP0
  32325  8259		       85 1b		      sta	GRP0
  32326  825b
  32327  825b
  32328  825b
  32329  825b					      ifnconst	no_blank_lines
  32330  825b		       a5 90		      lda	missile0height	;3
  32331  825d		       c7 91		      dcp	missile0y	;5
  32332  825f		       e5 f6		      sbc	stack1
  32333  8261		       85 1d		      sta	ENAM0	;3
  32334  8263		       4c 06 f2 	      jmp	.endkerloop
  32335  8266				  -	      else
  32336  8266				  -	      ifconst	readpaddle
  32337  8266				  -	      ldy	currentpaddle
  32338  8266				  -	      lda	INPT0,y
  32339  8266				  -	      bpl	noreadpaddle2
  32340  8266				  -	      inc	paddle
  32341  8266				  -	      jmp	.endkerloop
  32342  8266				  -noreadpaddle2
  32343  8266				  -	      sleep	4
  32344  8266				  -	      jmp	.endkerloop
  32345  8266				  -	      else		; no_blank_lines and no paddle reading
  32346  8266				  -	      pla
  32347  8266				  -	      pha		; 14 cycles in 4 bytes
  32348  8266				  -	      pla
  32349  8266				  -	      pha
  32350  8266				  -			; sleep 14
  32351  8266				  -	      jmp	.endkerloop
  32352  8266				  -	      endif
  32353  8266					      endif
  32354  8266
  32355  8266
  32356  8266							; ifconst donepaddleskip
  32357  8266							;paddleskipread
  32358  8266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
  32359  8266							; plus we get a lo-res paddle read
  32360  8266							; bmi donepaddleskip
  32361  8266							; endif
  32362  8266
  32363  8266				   .skipDrawlastP0
  32364  8266		       a9 00		      lda	#0
  32365  8268		       a8		      tay
  32366  8269		       4c 59 f2 	      jmp	.continuelastP0
  32367  826c
  32368  826c				  -	      ifconst	no_blank_lines
  32369  826c				  -no_blank_lines_bailout
  32370  826c				  -	      ldx	#0
  32371  826c					      endif
  32372  826c
  32373  826c				   endkernel
  32374  826c							; 6 digit score routine
  32375  826c		       86 0e		      stx	PF1
  32376  826e		       86 0f		      stx	PF2
  32377  8270		       86 0d		      stx	PF0
  32378  8272		       18		      clc
  32379  8273
  32380  8273				  -	      ifconst	pfrowheight
  32381  8273				  -	      lda	#pfrowheight+2
  32382  8273					      else
  32383  8273					      ifnconst	pfres
  32384  8273		       a9 0a		      lda	#10
  32385  8275				  -	      else
  32386  8275				  -	      lda	#(96/pfres)+2	; try to come close to the real size
  32387  8275					      endif
  32388  8275					      endif
  32389  8275
  32390  8275		       e5 ef		      sbc	playfieldpos
  32391  8277		       85 ef		      sta	playfieldpos
  32392  8279		       8a		      txa
  32393  827a
  32394  827a				  -	      ifconst	shakescreen
  32395  827a				  -	      bit	shakescreen
  32396  827a				  -	      bmi	noshakescreen2
  32397  827a				  -	      ldx	#$3D
  32398  827a				  -noshakescreen2
  32399  827a					      endif
  32400  827a
  32401  827a		       95 02		      sta	WSYNC,x
  32402  827c
  32403  827c							; STA WSYNC ;first one, need one more
  32404  827c		       85 0b		      sta	REFP0
  32405  827e		       85 0c		      sta	REFP1
  32406  8280		       85 1b		      STA	GRP0
  32407  8282		       85 1c		      STA	GRP1
  32408  8284							; STA PF1
  32409  8284							; STA PF2
  32410  8284		       85 2b		      sta	HMCLR
  32411  8286		       85 1d		      sta	ENAM0
  32412  8288		       85 1e		      sta	ENAM1
  32413  828a		       85 1f		      sta	ENABL
  32414  828c
  32415  828c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
  32416  828e		       85 85		      sta	player0y
  32417  8290		       a5 9e		      lda	temp3
  32418  8292		       85 86		      sta	player1y
  32419  8294				  -	      ifnconst	player1colors
  32420  8294				  -	      lda	temp6
  32421  8294				  -	      sta	missile1y
  32422  8294					      endif
  32423  8294					      ifnconst	playercolors
  32424  8294					      ifnconst	readpaddle
  32425  8294		       a5 a0		      lda	temp5
  32426  8296		       85 91		      sta	missile0y
  32427  8298					      endif
  32428  8298					      endif
  32429  8298		       a5 f7		      lda	stack2
  32430  829a		       85 89		      sta	bally
  32431  829c
  32432  829c							; strangely, this isn't required any more. might have
  32433  829c							; resulted from the no_blank_lines score bounce fix
  32434  829c							;ifconst no_blank_lines
  32435  829c							;sta WSYNC
  32436  829c							;endif
  32437  829c
  32438  829c		       ad 84 02 	      lda	INTIM
  32439  829f		       18		      clc
  32440  82a0					      ifnconst	vblank_time
  32441  82a0		       69 8e		      adc	#43+12+87
  32442  82a2				  -	      else
  32443  82a2				  -	      adc	#vblank_time+12+87
  32444  82a2				  -
  32445  82a2					      endif
  32446  82a2							; sta WSYNC
  32447  82a2		       8d 96 02 	      sta	TIM64T
  32448  82a5
  32449  82a5					      ifconst	minikernel
  32450  82a5		       20 8b f6 	      jsr	minikernel
  32451  82a8					      endif
  32452  82a8
  32453  82a8							; now reassign temp vars for score pointers
  32454  82a8
  32455  82a8							; score pointers contain:
  32456  82a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
  32457  82a8							; swap lo2->temp1
  32458  82a8							; swap lo4->temp3
  32459  82a8							; swap lo6->temp5
  32460  82a8					      ifnconst	noscore
  32461  82a8		       a5 97		      lda	scorepointers+1
  32462  82aa							; ldy temp1
  32463  82aa		       85 9c		      sta	temp1
  32464  82ac							; sty scorepointers+1
  32465  82ac
  32466  82ac		       a5 99		      lda	scorepointers+3
  32467  82ae							; ldy temp3
  32468  82ae		       85 9e		      sta	temp3
  32469  82b0							; sty scorepointers+3
  32470  82b0
  32471  82b0
  32472  82b0		       85 2b		      sta	HMCLR
  32473  82b2		       ba		      tsx
  32474  82b3		       86 f6		      stx	stack1
  32475  82b5		       a2 e0		      ldx	#$E0
  32476  82b7		       86 20		      stx	HMP0
  32477  82b9
  32478  82b9		       a5 a3		      LDA	scorecolor
  32479  82bb		       85 06		      STA	COLUP0
  32480  82bd		       85 07		      STA	COLUP1
  32481  82bf				  -	      ifconst	scorefade
  32482  82bf				  -	      STA	stack2
  32483  82bf					      endif
  32484  82bf					      ifconst	pfscore
  32485  82bf		       a5 f4		      lda	pfscorecolor
  32486  82c1		       85 08		      sta	COLUPF
  32487  82c3					      endif
  32488  82c3		       85 02		      sta	WSYNC
  32489  82c5		       a2 00		      ldx	#0
  32490  82c7		       86 1b		      STx	GRP0
  32491  82c9		       86 1c		      STx	GRP1	; seems to be needed because of vdel
  32492  82cb
  32493  82cb		       a5 9b		      lda	scorepointers+5
  32494  82cd							; ldy temp5
  32495  82cd		       95 a0		      sta	temp5,x
  32496  82cf							; sty scorepointers+5
  32497  82cf		       a9 ff		      lda	#>scoretable
  32498  82d1		       85 97		      sta	scorepointers+1
  32499  82d3		       85 99		      sta	scorepointers+3
  32500  82d5		       85 9b		      sta	scorepointers+5
  32501  82d7		       85 9d		      sta	temp2
  32502  82d9		       85 9f		      sta	temp4
  32503  82db		       85 a1		      sta	temp6
  32504  82dd		       a0 07		      LDY	#7
  32505  82df		       84 25		      STY	VDELP0
  32506  82e1		       85 10		      STA	RESP0
  32507  82e3		       85 11		      STA	RESP1
  32508  82e5
  32509  82e5
  32510  82e5		       a9 03		      LDA	#$03
  32511  82e7		       85 04		      STA	NUSIZ0
  32512  82e9		       85 05		      STA	NUSIZ1
  32513  82eb		       85 26		      STA	VDELP1
  32514  82ed		       a9 f0		      LDA	#$F0
  32515  82ef		       85 21		      STA	HMP1
  32516  82f1		       b1 96		      lda	(scorepointers),y
  32517  82f3		       85 1b		      sta	GRP0
  32518  82f5		       85 2a		      STA	HMOVE	; cycle 73 ?
  32519  82f7		       4c 09 f3 	      jmp	beginscore
  32520  82fa
  32521  82fa
  32522  82fa					      if	((<*)>$d4)
  32523  8300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
  32524  8300					      endif
  32525  8300
  32526  8300				   loop2
  32527  8300		       b1 96		      lda	(scorepointers),y	;+5 68 204
  32528  8302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
  32529  8304					      ifconst	pfscore
  32530  8304		       ad f2 00 	      lda.w	pfscore1
  32531  8307		       85 0e		      sta	PF1
  32532  8309				  -	      else
  32533  8309				  -	      ifconst	scorefade
  32534  8309				  -	      sleep	2
  32535  8309				  -	      dec	stack2	; decrement the temporary scorecolor
  32536  8309				  -	      else
  32537  8309				  -	      sleep	7
  32538  8309				  -	      endif
  32539  8309					      endif
  32540  8309							; cycle 0
  32541  8309				   beginscore
  32542  8309		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
  32543  830b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
  32544  830d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
  32545  830f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
  32546  8311		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
  32547  8313		       9a		      txs
  32548  8314		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
  32549  8316				  -	      ifconst	scorefade
  32550  8316				  -	      lda	stack2
  32551  8316					      else
      0  8316					      sleep	3
      1  8316				   .CYCLES    SET	3
      2  8316
      3  8316				  -	      IF	.CYCLES < 2
      4  8316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8316				  -	      ERR
      6  8316					      ENDIF
      7  8316
      8  8316					      IF	.CYCLES & 1
      9  8316					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8316		       04 00		      nop	0
     11  8318				  -	      ELSE
     12  8318				  -	      bit	VSYNC
     13  8318					      ENDIF
     14  8318				   .CYCLES    SET	.CYCLES - 3
     15  8318					      ENDIF
     16  8318
     17  8318				  -	      REPEAT	.CYCLES / 2
     18  8318				  -	      nop
     19  8318					      REPEND
  32553  8318					      endif
  32554  8318
  32555  8318					      ifconst	pfscore
  32556  8318		       a5 f3		      lda	pfscore2
  32557  831a		       85 0e		      sta	PF1
  32558  831c				  -	      else
  32559  831c				  -	      ifconst	scorefade
  32560  831c				  -	      sta	COLUP0
  32561  831c				  -	      sta	COLUP1
  32562  831c				  -	      else
  32563  831c				  -	      sleep	6
  32564  831c				  -	      endif
  32565  831c					      endif
  32566  831c
  32567  831c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
  32568  831e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
  32569  8320		       ba		      tsx
  32570  8321		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
  32571  8323		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
  32572  8325		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
  32573  8327		       88		      dey
  32574  8328		       10 d6		      bpl	loop2	;+2 60 180
  32575  832a
  32576  832a		       a6 f6		      ldx	stack1
  32577  832c		       9a		      txs
  32578  832d							; lda scorepointers+1
  32579  832d		       a4 9c		      ldy	temp1
  32580  832f							; sta temp1
  32581  832f		       84 97		      sty	scorepointers+1
  32582  8331
  32583  8331		       a9 00		      LDA	#0
  32584  8333		       85 0e		      sta	PF1
  32585  8335		       85 1b		      STA	GRP0
  32586  8337		       85 1c		      STA	GRP1
  32587  8339		       85 25		      STA	VDELP0
  32588  833b		       85 26		      STA	VDELP1	;do we need these
  32589  833d		       85 04		      STA	NUSIZ0
  32590  833f		       85 05		      STA	NUSIZ1
  32591  8341
  32592  8341							; lda scorepointers+3
  32593  8341		       a4 9e		      ldy	temp3
  32594  8343							; sta temp3
  32595  8343		       84 99		      sty	scorepointers+3
  32596  8345
  32597  8345							; lda scorepointers+5
  32598  8345		       a4 a0		      ldy	temp5
  32599  8347							; sta temp5
  32600  8347		       84 9b		      sty	scorepointers+5
  32601  8349					      endif		;noscore
  32602  8349				  -	      ifconst	readpaddle
  32603  8349				  -	      lda	#%11000010
  32604  8349					      else
  32605  8349				  -	      ifconst	qtcontroller
  32606  8349				  -	      lda	qtcontroller
  32607  8349				  -	      lsr		; bit 0 in carry
  32608  8349				  -	      lda	#4
  32609  8349				  -	      ror		; carry into top of A
  32610  8349					      else
  32611  8349		       a9 02		      lda	#2
  32612  834b					      endif		; qtcontroller
  32613  834b					      endif		; readpaddle
  32614  834b		       85 02		      sta	WSYNC
  32615  834d		       85 01		      sta	VBLANK
      0  834f					      RETURN
      1  834f				  -	      ifnconst	bankswitch
      2  834f				  -	      rts
      3  834f					      else
      4  834f		       4c dd ff 	      jmp	BS_return
      5  8352					      endif
  32617  8352				  -	      ifconst	shakescreen
  32618  8352				  -doshakescreen
  32619  8352				  -	      bit	shakescreen
  32620  8352				  -	      bmi	noshakescreen
  32621  8352				  -	      sta	WSYNC
  32622  8352				  -noshakescreen
  32623  8352				  -	      ldx	missile0height
  32624  8352				  -	      inx
  32625  8352				  -	      rts
  32626  8352					      endif
  32627  8352
  32628  8352							; Provided under the CC0 license. See the included LICENSE.txt for details.
  32629  8352
  32630  8352				   start
  32631  8352		       78		      sei
  32632  8353		       d8		      cld
  32633  8354		       a0 00		      ldy	#0
  32634  8356		       a5 d0		      lda	$D0
  32635  8358		       c9 2c		      cmp	#$2C	;check RAM location #1
  32636  835a		       d0 07		      bne	MachineIs2600
  32637  835c		       a5 d1		      lda	$D1
  32638  835e		       c9 a9		      cmp	#$A9	;check RAM location #2
  32639  8360		       d0 01		      bne	MachineIs2600
  32640  8362		       88		      dey
  32641  8363				   MachineIs2600
  32642  8363		       a2 00		      ldx	#0
  32643  8365		       8a		      txa
  32644  8366				   clearmem
  32645  8366		       e8		      inx
  32646  8367		       9a		      txs
  32647  8368		       48		      pha
  32648  8369		       d0 fb		      bne	clearmem
  32649  836b		       84 9c		      sty	temp1
  32650  836d					      ifnconst	multisprite
  32651  836d				  -	      ifconst	pfrowheight
  32652  836d				  -	      lda	#pfrowheight
  32653  836d					      else
  32654  836d				  -	      ifconst	pfres
  32655  836d				  -	      lda	#(96/pfres)
  32656  836d					      else
  32657  836d		       a9 08		      lda	#8
  32658  836f					      endif
  32659  836f					      endif
  32660  836f		       85 ef		      sta	playfieldpos
  32661  8371					      endif
  32662  8371		       a2 05		      ldx	#5
  32663  8373				   initscore
  32664  8373		       a9 74		      lda	#<scoretable
  32665  8375		       95 96		      sta	scorepointers,x
  32666  8377		       ca		      dex
  32667  8378		       10 f9		      bpl	initscore
  32668  837a		       a9 01		      lda	#1
  32669  837c		       85 0a		      sta	CTRLPF
  32670  837e		       0d 84 02 	      ora	INTIM
  32671  8381		       85 a2		      sta	rand
  32672  8383
  32673  8383				  -	      ifconst	multisprite
  32674  8383				  -	      jsr	multisprite_setup
  32675  8383					      endif
  32676  8383
  32677  8383				  -	      ifnconst	bankswitch
  32678  8383				  -	      jmp	game
  32679  8383					      else
  32680  8383		       a9 10		      lda	#>(game-1)
  32681  8385		       48		      pha
  32682  8386		       a9 ff		      lda	#<(game-1)
  32683  8388		       48		      pha
  32684  8389		       48		      pha
  32685  838a		       48		      pha
  32686  838b		       a2 01		      ldx	#1
  32687  838d		       4c eb ff 	      jmp	BS_jsr
  32688  8390					      endif
  32689  8390							; Provided under the CC0 license. See the included LICENSE.txt for details.
  32690  8390
  32691  8390							; playfield drawing routines
  32692  8390							; you get a 32x12 bitmapped display in a single color :)
  32693  8390							; 0-31 and 0-11
  32694  8390
  32695  8390				   pfclear		; clears playfield - or fill with pattern
  32696  8390				  -	      ifconst	pfres
  32697  8390				  -	      ldx	#pfres*pfwidth-1
  32698  8390					      else
  32699  8390		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
  32700  8392					      endif
  32701  8392				   pfclear_loop
  32702  8392				  -	      ifnconst	superchip
  32703  8392				  -	      sta	playfield,x
  32704  8392					      else
  32705  8392		       9d 50 10 	      sta	playfield-128,x
  32706  8395					      endif
  32707  8395		       ca		      dex
  32708  8396		       10 fa		      bpl	pfclear_loop
      0  8398					      RETURN
      1  8398				  -	      ifnconst	bankswitch
      2  8398				  -	      rts
      3  8398					      else
      4  8398		       4c dd ff 	      jmp	BS_return
      5  839b					      endif
  32710  839b
  32711  839b				   setuppointers
  32712  839b		       86 9d		      stx	temp2	; store on.off.flip value
  32713  839d		       aa		      tax		; put x-value in x 
  32714  839e		       4a		      lsr
  32715  839f		       4a		      lsr
  32716  83a0		       4a		      lsr		; divide x pos by 8 
  32717  83a1		       85 9c		      sta	temp1
  32718  83a3		       98		      tya
  32719  83a4		       0a		      asl
  32720  83a5					      if	pfwidth=4
  32721  83a5		       0a		      asl		; multiply y pos by 4
  32722  83a6					      endif		; else multiply by 2
  32723  83a6		       18		      clc
  32724  83a7		       65 9c		      adc	temp1	; add them together to get actual memory location offset
  32725  83a9		       a8		      tay		; put the value in y
  32726  83aa		       a5 9d		      lda	temp2	; restore on.off.flip value
  32727  83ac		       60		      rts
  32728  83ad
  32729  83ad				   pfread
  32730  83ad							;x=xvalue, y=yvalue
  32731  83ad		       20 9b f3 	      jsr	setuppointers
  32732  83b0		       bd 45 f4 	      lda	setbyte,x
  32733  83b3		       39 d0 10 	      and	playfield,y
  32734  83b6		       5d 45 f4 	      eor	setbyte,x
  32735  83b9							; beq readzero
  32736  83b9							; lda #1
  32737  83b9							; readzero
      0  83b9					      RETURN
      1  83b9				  -	      ifnconst	bankswitch
      2  83b9				  -	      rts
      3  83b9					      else
      4  83b9		       4c dd ff 	      jmp	BS_return
      5  83bc					      endif
  32739  83bc
  32740  83bc				   pfpixel
  32741  83bc							;x=xvalue, y=yvalue, a=0,1,2
  32742  83bc		       20 9b f3 	      jsr	setuppointers
  32743  83bf
  32744  83bf					      ifconst	bankswitch
  32745  83bf		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  32746  83c1		       f0 0f		      beq	pixelon_r	; if "on" go to on
  32747  83c3		       4a		      lsr
  32748  83c4		       b0 18		      bcs	pixeloff_r	; value is 1 if true
  32749  83c6		       b9 d0 10 	      lda	playfield,y	; if here, it's "flip"
  32750  83c9		       5d 45 f4 	      eor	setbyte,x
  32751  83cc					      ifconst	superchip
  32752  83cc		       99 50 10 	      sta	playfield-128,y
  32753  83cf				  -	      else
  32754  83cf				  -	      sta	playfield,y
  32755  83cf					      endif
      0  83cf					      RETURN
      1  83cf				  -	      ifnconst	bankswitch
      2  83cf				  -	      rts
      3  83cf					      else
      4  83cf		       4c dd ff 	      jmp	BS_return
      5  83d2					      endif
  32757  83d2				   pixelon_r
  32758  83d2		       b9 d0 10 	      lda	playfield,y
  32759  83d5		       1d 45 f4 	      ora	setbyte,x
  32760  83d8					      ifconst	superchip
  32761  83d8		       99 50 10 	      sta	playfield-128,y
  32762  83db				  -	      else
  32763  83db				  -	      sta	playfield,y
  32764  83db					      endif
      0  83db					      RETURN
      1  83db				  -	      ifnconst	bankswitch
      2  83db				  -	      rts
      3  83db					      else
      4  83db		       4c dd ff 	      jmp	BS_return
      5  83de					      endif
  32766  83de				   pixeloff_r
  32767  83de		       bd 45 f4 	      lda	setbyte,x
  32768  83e1		       49 ff		      eor	#$ff
  32769  83e3		       39 d0 10 	      and	playfield,y
  32770  83e6					      ifconst	superchip
  32771  83e6		       99 50 10 	      sta	playfield-128,y
  32772  83e9				  -	      else
  32773  83e9				  -	      sta	playfield,y
  32774  83e9					      endif
      0  83e9					      RETURN
      1  83e9				  -	      ifnconst	bankswitch
      2  83e9				  -	      rts
      3  83e9					      else
      4  83e9		       4c dd ff 	      jmp	BS_return
      5  83ec					      endif
  32776  83ec
  32777  83ec				  -	      else
  32778  83ec				  -	      jmp	plotpoint
  32779  83ec					      endif
  32780  83ec
  32781  83ec				   pfhline
  32782  83ec							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  32783  83ec		       20 9b f3 	      jsr	setuppointers
  32784  83ef		       4c f9 f3 	      jmp	noinc
  32785  83f2				   keepgoing
  32786  83f2		       e8		      inx
  32787  83f3		       8a		      txa
  32788  83f4		       29 07		      and	#7
  32789  83f6		       d0 01		      bne	noinc
  32790  83f8		       c8		      iny
  32791  83f9				   noinc
  32792  83f9		       20 1e f4 	      jsr	plotpoint
  32793  83fc		       e4 9e		      cpx	temp3
  32794  83fe		       30 f2		      bmi	keepgoing
      0  8400					      RETURN
      1  8400				  -	      ifnconst	bankswitch
      2  8400				  -	      rts
      3  8400					      else
      4  8400		       4c dd ff 	      jmp	BS_return
      5  8403					      endif
  32796  8403
  32797  8403				   pfvline
  32798  8403							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
  32799  8403		       20 9b f3 	      jsr	setuppointers
  32800  8406		       84 9c		      sty	temp1	; store memory location offset
  32801  8408		       e6 9e		      inc	temp3	; increase final x by 1 
  32802  840a		       a5 9e		      lda	temp3
  32803  840c		       0a		      asl
  32804  840d					      if	pfwidth=4
  32805  840d		       0a		      asl		; multiply by 4
  32806  840e					      endif		; else multiply by 2
  32807  840e		       85 9e		      sta	temp3	; store it
  32808  8410							; Thanks to Michael Rideout for fixing a bug in this code
  32809  8410							; right now, temp1=y=starting memory location, temp3=final
  32810  8410							; x should equal original x value
  32811  8410				   keepgoingy
  32812  8410		       20 1e f4 	      jsr	plotpoint
  32813  8413		       c8		      iny
  32814  8414		       c8		      iny
  32815  8415					      if	pfwidth=4
  32816  8415		       c8		      iny
  32817  8416		       c8		      iny
  32818  8417					      endif
  32819  8417		       c4 9e		      cpy	temp3
  32820  8419		       30 f5		      bmi	keepgoingy
      0  841b					      RETURN
      1  841b				  -	      ifnconst	bankswitch
      2  841b				  -	      rts
      3  841b					      else
      4  841b		       4c dd ff 	      jmp	BS_return
      5  841e					      endif
  32822  841e
  32823  841e				   plotpoint
  32824  841e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
  32825  8420		       f0 0d		      beq	pixelon	; if "on" go to on
  32826  8422		       4a		      lsr
  32827  8423		       b0 14		      bcs	pixeloff	; value is 1 if true
  32828  8425		       b9 d0 10 	      lda	playfield,y	; if here, it's "flip"
  32829  8428		       5d 45 f4 	      eor	setbyte,x
  32830  842b					      ifconst	superchip
  32831  842b		       99 50 10 	      sta	playfield-128,y
  32832  842e				  -	      else
  32833  842e				  -	      sta	playfield,y
  32834  842e					      endif
  32835  842e		       60		      rts
  32836  842f				   pixelon
  32837  842f		       b9 d0 10 	      lda	playfield,y
  32838  8432		       1d 45 f4 	      ora	setbyte,x
  32839  8435					      ifconst	superchip
  32840  8435		       99 50 10 	      sta	playfield-128,y
  32841  8438				  -	      else
  32842  8438				  -	      sta	playfield,y
  32843  8438					      endif
  32844  8438		       60		      rts
  32845  8439				   pixeloff
  32846  8439		       bd 45 f4 	      lda	setbyte,x
  32847  843c		       49 ff		      eor	#$ff
  32848  843e		       39 d0 10 	      and	playfield,y
  32849  8441					      ifconst	superchip
  32850  8441		       99 50 10 	      sta	playfield-128,y
  32851  8444				  -	      else
  32852  8444				  -	      sta	playfield,y
  32853  8444					      endif
  32854  8444		       60		      rts
  32855  8445
  32856  8445				   setbyte
  32857  8445					      ifnconst	pfcenter
  32858  8445		       80		      .byte.b	$80
  32859  8446		       40		      .byte.b	$40
  32860  8447		       20		      .byte.b	$20
  32861  8448		       10		      .byte.b	$10
  32862  8449		       08		      .byte.b	$08
  32863  844a		       04		      .byte.b	$04
  32864  844b		       02		      .byte.b	$02
  32865  844c		       01		      .byte.b	$01
  32866  844d					      endif
  32867  844d		       01		      .byte.b	$01
  32868  844e		       02		      .byte.b	$02
  32869  844f		       04		      .byte.b	$04
  32870  8450		       08		      .byte.b	$08
  32871  8451		       10		      .byte.b	$10
  32872  8452		       20		      .byte.b	$20
  32873  8453		       40		      .byte.b	$40
  32874  8454		       80		      .byte.b	$80
  32875  8455		       80		      .byte.b	$80
  32876  8456		       40		      .byte.b	$40
  32877  8457		       20		      .byte.b	$20
  32878  8458		       10		      .byte.b	$10
  32879  8459		       08		      .byte.b	$08
  32880  845a		       04		      .byte.b	$04
  32881  845b		       02		      .byte.b	$02
  32882  845c		       01		      .byte.b	$01
  32883  845d		       01		      .byte.b	$01
  32884  845e		       02		      .byte.b	$02
  32885  845f		       04		      .byte.b	$04
  32886  8460		       08		      .byte.b	$08
  32887  8461		       10		      .byte.b	$10
  32888  8462		       20		      .byte.b	$20
  32889  8463		       40		      .byte.b	$40
  32890  8464		       80		      .byte.b	$80
  32891  8465							; Provided under the CC0 license. See the included LICENSE.txt for details.
  32892  8465
  32893  8465				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
  32894  8465		       d0 2a		      bne	notleft
  32895  8467							;left
  32896  8467				  -	      ifconst	pfres
  32897  8467				  -	      ldx	#pfres*4
  32898  8467					      else
  32899  8467		       a2 30		      ldx	#48
  32900  8469					      endif
  32901  8469				   leftloop
  32902  8469		       bd cf 10 	      lda	playfield-1,x
  32903  846c		       4a		      lsr
  32904  846d
  32905  846d					      ifconst	superchip
  32906  846d		       bd ce 10 	      lda	playfield-2,x
  32907  8470		       2a		      rol
  32908  8471		       9d 4e 10 	      sta	playfield-130,x
  32909  8474		       bd cd 10 	      lda	playfield-3,x
  32910  8477		       6a		      ror
  32911  8478		       9d 4d 10 	      sta	playfield-131,x
  32912  847b		       bd cc 10 	      lda	playfield-4,x
  32913  847e		       2a		      rol
  32914  847f		       9d 4c 10 	      sta	playfield-132,x
  32915  8482		       bd cf 10 	      lda	playfield-1,x
  32916  8485		       6a		      ror
  32917  8486		       9d 4f 10 	      sta	playfield-129,x
  32918  8489				  -	      else
  32919  8489				  -	      rol	playfield-2,x
  32920  8489				  -	      ror	playfield-3,x
  32921  8489				  -	      rol	playfield-4,x
  32922  8489				  -	      ror	playfield-1,x
  32923  8489					      endif
  32924  8489
  32925  8489		       8a		      txa
  32926  848a		       cb 04		      sbx	#4
  32927  848c		       d0 db		      bne	leftloop
      0  848e					      RETURN
      1  848e				  -	      ifnconst	bankswitch
      2  848e				  -	      rts
      3  848e					      else
      4  848e		       4c dd ff 	      jmp	BS_return
      5  8491					      endif
  32929  8491
  32930  8491				   notleft
  32931  8491		       4a		      lsr
  32932  8492		       90 2a		      bcc	notright
  32933  8494							;right
  32934  8494
  32935  8494				  -	      ifconst	pfres
  32936  8494				  -	      ldx	#pfres*4
  32937  8494					      else
  32938  8494		       a2 30		      ldx	#48
  32939  8496					      endif
  32940  8496				   rightloop
  32941  8496		       bd cc 10 	      lda	playfield-4,x
  32942  8499		       4a		      lsr
  32943  849a					      ifconst	superchip
  32944  849a		       bd cd 10 	      lda	playfield-3,x
  32945  849d		       2a		      rol
  32946  849e		       9d 4d 10 	      sta	playfield-131,x
  32947  84a1		       bd ce 10 	      lda	playfield-2,x
  32948  84a4		       6a		      ror
  32949  84a5		       9d 4e 10 	      sta	playfield-130,x
  32950  84a8		       bd cf 10 	      lda	playfield-1,x
  32951  84ab		       2a		      rol
  32952  84ac		       9d 4f 10 	      sta	playfield-129,x
  32953  84af		       bd cc 10 	      lda	playfield-4,x
  32954  84b2		       6a		      ror
  32955  84b3		       9d 4c 10 	      sta	playfield-132,x
  32956  84b6				  -	      else
  32957  84b6				  -	      rol	playfield-3,x
  32958  84b6				  -	      ror	playfield-2,x
  32959  84b6				  -	      rol	playfield-1,x
  32960  84b6				  -	      ror	playfield-4,x
  32961  84b6					      endif
  32962  84b6		       8a		      txa
  32963  84b7		       cb 04		      sbx	#4
  32964  84b9		       d0 db		      bne	rightloop
      0  84bb					      RETURN
      1  84bb				  -	      ifnconst	bankswitch
      2  84bb				  -	      rts
      3  84bb					      else
      4  84bb		       4c dd ff 	      jmp	BS_return
      5  84be					      endif
  32966  84be
  32967  84be				   notright
  32968  84be		       4a		      lsr
  32969  84bf		       90 5b		      bcc	notup
  32970  84c1							;up
  32971  84c1		       4a		      lsr
  32972  84c2		       90 02		      bcc	onedecup
  32973  84c4		       c6 ef		      dec	playfieldpos
  32974  84c6				   onedecup
  32975  84c6		       c6 ef		      dec	playfieldpos
  32976  84c8		       f0 02		      beq	shiftdown
  32977  84ca		       10 4d		      bpl	noshiftdown2
  32978  84cc				   shiftdown
  32979  84cc				  -	      ifconst	pfrowheight
  32980  84cc				  -	      lda	#pfrowheight
  32981  84cc					      else
  32982  84cc					      ifnconst	pfres
  32983  84cc		       a9 08		      lda	#8
  32984  84ce				  -	      else
  32985  84ce				  -	      lda	#(96/pfres)	; try to come close to the real size
  32986  84ce					      endif
  32987  84ce					      endif
  32988  84ce
  32989  84ce		       85 ef		      sta	playfieldpos
  32990  84d0		       ad d3 10 	      lda	playfield+3
  32991  84d3		       85 9f		      sta	temp4
  32992  84d5		       ad d2 10 	      lda	playfield+2
  32993  84d8		       85 9e		      sta	temp3
  32994  84da		       ad d1 10 	      lda	playfield+1
  32995  84dd		       85 9d		      sta	temp2
  32996  84df		       ad d0 10 	      lda	playfield
  32997  84e2		       85 9c		      sta	temp1
  32998  84e4		       a2 00		      ldx	#0
  32999  84e6				   up2
  33000  84e6		       bd d4 10 	      lda	playfield+4,x
  33001  84e9					      ifconst	superchip
  33002  84e9		       9d 50 10 	      sta	playfield-128,x
  33003  84ec		       bd d5 10 	      lda	playfield+5,x
  33004  84ef		       9d 51 10 	      sta	playfield-127,x
  33005  84f2		       bd d6 10 	      lda	playfield+6,x
  33006  84f5		       9d 52 10 	      sta	playfield-126,x
  33007  84f8		       bd d7 10 	      lda	playfield+7,x
  33008  84fb		       9d 53 10 	      sta	playfield-125,x
  33009  84fe				  -	      else
  33010  84fe				  -	      sta	playfield,x
  33011  84fe				  -	      lda	playfield+5,x
  33012  84fe				  -	      sta	playfield+1,x
  33013  84fe				  -	      lda	playfield+6,x
  33014  84fe				  -	      sta	playfield+2,x
  33015  84fe				  -	      lda	playfield+7,x
  33016  84fe				  -	      sta	playfield+3,x
  33017  84fe					      endif
  33018  84fe		       8a		      txa
  33019  84ff		       cb fc		      sbx	#252
  33020  8501				  -	      ifconst	pfres
  33021  8501				  -	      cpx	#(pfres-1)*4
  33022  8501					      else
  33023  8501		       e0 2c		      cpx	#44
  33024  8503					      endif
  33025  8503		       d0 e1		      bne	up2
  33026  8505
  33027  8505		       a5 9f		      lda	temp4
  33028  8507
  33029  8507					      ifconst	superchip
  33030  8507				  -	      ifconst	pfres
  33031  8507				  -	      sta	playfield+pfres*4-129
  33032  8507				  -	      lda	temp3
  33033  8507				  -	      sta	playfield+pfres*4-130
  33034  8507				  -	      lda	temp2
  33035  8507				  -	      sta	playfield+pfres*4-131
  33036  8507				  -	      lda	temp1
  33037  8507				  -	      sta	playfield+pfres*4-132
  33038  8507					      else
  33039  8507		       8d 7f 10 	      sta	playfield+47-128
  33040  850a		       a5 9e		      lda	temp3
  33041  850c		       8d 7e 10 	      sta	playfield+46-128
  33042  850f		       a5 9d		      lda	temp2
  33043  8511		       8d 7d 10 	      sta	playfield+45-128
  33044  8514		       a5 9c		      lda	temp1
  33045  8516		       8d 7c 10 	      sta	playfield+44-128
  33046  8519					      endif
  33047  8519				  -	      else
  33048  8519				  -	      ifconst	pfres
  33049  8519				  -	      sta	playfield+pfres*4-1
  33050  8519				  -	      lda	temp3
  33051  8519				  -	      sta	playfield+pfres*4-2
  33052  8519				  -	      lda	temp2
  33053  8519				  -	      sta	playfield+pfres*4-3
  33054  8519				  -	      lda	temp1
  33055  8519				  -	      sta	playfield+pfres*4-4
  33056  8519				  -	      else
  33057  8519				  -	      sta	playfield+47
  33058  8519				  -	      lda	temp3
  33059  8519				  -	      sta	playfield+46
  33060  8519				  -	      lda	temp2
  33061  8519				  -	      sta	playfield+45
  33062  8519				  -	      lda	temp1
  33063  8519				  -	      sta	playfield+44
  33064  8519				  -	      endif
  33065  8519					      endif
  33066  8519				   noshiftdown2
      0  8519					      RETURN
      1  8519				  -	      ifnconst	bankswitch
      2  8519				  -	      rts
      3  8519					      else
      4  8519		       4c dd ff 	      jmp	BS_return
      5  851c					      endif
  33068  851c
  33069  851c
  33070  851c				   notup
  33071  851c							;down
  33072  851c		       4a		      lsr
  33073  851d		       b0 02		      bcs	oneincup
  33074  851f		       e6 ef		      inc	playfieldpos
  33075  8521				   oneincup
  33076  8521		       e6 ef		      inc	playfieldpos
  33077  8523		       a5 ef		      lda	playfieldpos
  33078  8525
  33079  8525				  -	      ifconst	pfrowheight
  33080  8525				  -	      cmp	#pfrowheight+1
  33081  8525					      else
  33082  8525					      ifnconst	pfres
  33083  8525		       c9 09		      cmp	#9
  33084  8527				  -	      else
  33085  8527				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
  33086  8527					      endif
  33087  8527					      endif
  33088  8527
  33089  8527		       90 4b		      bcc	noshiftdown
  33090  8529		       a9 01		      lda	#1
  33091  852b		       85 ef		      sta	playfieldpos
  33092  852d
  33093  852d				  -	      ifconst	pfres
  33094  852d				  -	      lda	playfield+pfres*4-1
  33095  852d				  -	      sta	temp4
  33096  852d				  -	      lda	playfield+pfres*4-2
  33097  852d				  -	      sta	temp3
  33098  852d				  -	      lda	playfield+pfres*4-3
  33099  852d				  -	      sta	temp2
  33100  852d				  -	      lda	playfield+pfres*4-4
  33101  852d					      else
  33102  852d		       ad ff 10 	      lda	playfield+47
  33103  8530		       85 9f		      sta	temp4
  33104  8532		       ad fe 10 	      lda	playfield+46
  33105  8535		       85 9e		      sta	temp3
  33106  8537		       ad fd 10 	      lda	playfield+45
  33107  853a		       85 9d		      sta	temp2
  33108  853c		       ad fc 10 	      lda	playfield+44
  33109  853f					      endif
  33110  853f
  33111  853f		       85 9c		      sta	temp1
  33112  8541
  33113  8541				  -	      ifconst	pfres
  33114  8541				  -	      ldx	#(pfres-1)*4
  33115  8541					      else
  33116  8541		       a2 2c		      ldx	#44
  33117  8543					      endif
  33118  8543				   down2
  33119  8543		       bd cf 10 	      lda	playfield-1,x
  33120  8546					      ifconst	superchip
  33121  8546		       9d 53 10 	      sta	playfield-125,x
  33122  8549		       bd ce 10 	      lda	playfield-2,x
  33123  854c		       9d 52 10 	      sta	playfield-126,x
  33124  854f		       bd cd 10 	      lda	playfield-3,x
  33125  8552		       9d 51 10 	      sta	playfield-127,x
  33126  8555		       bd cc 10 	      lda	playfield-4,x
  33127  8558		       9d 50 10 	      sta	playfield-128,x
  33128  855b				  -	      else
  33129  855b				  -	      sta	playfield+3,x
  33130  855b				  -	      lda	playfield-2,x
  33131  855b				  -	      sta	playfield+2,x
  33132  855b				  -	      lda	playfield-3,x
  33133  855b				  -	      sta	playfield+1,x
  33134  855b				  -	      lda	playfield-4,x
  33135  855b				  -	      sta	playfield,x
  33136  855b					      endif
  33137  855b		       8a		      txa
  33138  855c		       cb 04		      sbx	#4
  33139  855e		       d0 e3		      bne	down2
  33140  8560
  33141  8560		       a5 9f		      lda	temp4
  33142  8562					      ifconst	superchip
  33143  8562		       8d 53 10 	      sta	playfield-125
  33144  8565		       a5 9e		      lda	temp3
  33145  8567		       8d 52 10 	      sta	playfield-126
  33146  856a		       a5 9d		      lda	temp2
  33147  856c		       8d 51 10 	      sta	playfield-127
  33148  856f		       a5 9c		      lda	temp1
  33149  8571		       8d 50 10 	      sta	playfield-128
  33150  8574				  -	      else
  33151  8574				  -	      sta	playfield+3
  33152  8574				  -	      lda	temp3
  33153  8574				  -	      sta	playfield+2
  33154  8574				  -	      lda	temp2
  33155  8574				  -	      sta	playfield+1
  33156  8574				  -	      lda	temp1
  33157  8574				  -	      sta	playfield
  33158  8574					      endif
  33159  8574				   noshiftdown
      0  8574					      RETURN
      1  8574				  -	      ifnconst	bankswitch
      2  8574				  -	      rts
      3  8574					      else
      4  8574		       4c dd ff 	      jmp	BS_return
      5  8577					      endif
  33161  8577							; Provided under the CC0 license. See the included LICENSE.txt for details.
  33162  8577
  33163  8577							;standard routines needed for pretty much all games
  33164  8577							; just the random number generator is left - maybe we should remove this asm file altogether?
  33165  8577							; repositioning code and score pointer setup moved to overscan
  33166  8577							; read switches, joysticks now compiler generated (more efficient)
  33167  8577
  33168  8577				   randomize
  33169  8577		       a5 a2		      lda	rand
  33170  8579		       4a		      lsr
  33171  857a					      ifconst	rand16
  33172  857a		       26 d3		      rol	rand16
  33173  857c					      endif
  33174  857c		       90 02		      bcc	noeor
  33175  857e		       49 b4		      eor	#$B4
  33176  8580				   noeor
  33177  8580		       85 a2		      sta	rand
  33178  8582					      ifconst	rand16
  33179  8582		       45 d3		      eor	rand16
  33180  8584					      endif
      0  8584					      RETURN
      1  8584				  -	      ifnconst	bankswitch
      2  8584				  -	      rts
      3  8584					      else
      4  8584		       4c dd ff 	      jmp	BS_return
      5  8587					      endif
  33182  8587							; Provided under the CC0 license. See the included LICENSE.txt for details.
  33183  8587
  33184  8587				   drawscreen
  33185  8587				  -	      ifconst	debugscore
  33186  8587				  -	      ldx	#14
  33187  8587				  -	      lda	INTIM	; display # cycles left in the score
  33188  8587				  -
  33189  8587				  -	      ifconst	mincycles
  33190  8587				  -	      lda	mincycles
  33191  8587				  -	      cmp	INTIM
  33192  8587				  -	      lda	mincycles
  33193  8587				  -	      bcc	nochange
  33194  8587				  -	      lda	INTIM
  33195  8587				  -	      sta	mincycles
  33196  8587				  -nochange
  33197  8587				  -	      endif
  33198  8587				  -
  33199  8587				  -			; cmp #$2B
  33200  8587				  -			; bcs no_cycles_left
  33201  8587				  -	      bmi	cycles_left
  33202  8587				  -	      ldx	#64
  33203  8587				  -	      eor	#$ff	;make negative
  33204  8587				  -cycles_left
  33205  8587				  -	      stx	scorecolor
  33206  8587				  -	      and	#$7f	; clear sign bit
  33207  8587				  -	      tax
  33208  8587				  -	      lda	scorebcd,x
  33209  8587				  -	      sta	score+2
  33210  8587				  -	      lda	scorebcd1,x
  33211  8587				  -	      sta	score+1
  33212  8587				  -	      jmp	done_debugscore
  33213  8587				  -scorebcd
  33214  8587				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
  33215  8587				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
  33216  8587				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
  33217  8587				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
  33218  8587				  -scorebcd1
  33219  8587				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
  33220  8587				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
  33221  8587				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
  33222  8587				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
  33223  8587				  -done_debugscore
  33224  8587					      endif
  33225  8587
  33226  8587				  -	      ifconst	debugcycles
  33227  8587				  -	      lda	INTIM	; if we go over, it mucks up the background color
  33228  8587				  -			; cmp #$2B
  33229  8587				  -			; BCC overscan
  33230  8587				  -	      bmi	overscan
  33231  8587				  -	      sta	COLUBK
  33232  8587				  -	      bcs	doneoverscan
  33233  8587					      endif
  33234  8587
  33235  8587				   overscan
  33236  8587				  -	      ifconst	interlaced
  33237  8587				  -	      PHP
  33238  8587				  -	      PLA
  33239  8587				  -	      EOR	#4	; flip interrupt bit
  33240  8587				  -	      PHA
  33241  8587				  -	      PLP
  33242  8587				  -	      AND	#4	; isolate the interrupt bit
  33243  8587				  -	      TAX		; save it for later
  33244  8587					      endif
  33245  8587
  33246  8587				   overscanloop
  33247  8587		       ad 84 02 	      lda	INTIM	;wait for sync
  33248  858a		       30 fb		      bmi	overscanloop
  33249  858c				   doneoverscan
  33250  858c
  33251  858c							;do VSYNC
  33252  858c
  33253  858c				  -	      ifconst	interlaced
  33254  858c				  -	      CPX	#4
  33255  858c				  -	      BNE	oddframevsync
  33256  858c					      endif
  33257  858c
  33258  858c		       a9 02		      lda	#2
  33259  858e		       85 02		      sta	WSYNC
  33260  8590		       85 00		      sta	VSYNC
  33261  8592		       85 02		      STA	WSYNC
  33262  8594		       85 02		      STA	WSYNC
  33263  8596		       4a		      lsr
  33264  8597		       85 02		      STA	WSYNC
  33265  8599		       85 00		      STA	VSYNC
  33266  859b		       85 01		      sta	VBLANK
  33267  859d					      ifnconst	overscan_time
  33268  859d		       a9 a5		      lda	#37+128
  33269  859f				  -	      else
  33270  859f				  -	      lda	#overscan_time+128
  33271  859f					      endif
  33272  859f		       8d 96 02 	      sta	TIM64T
  33273  85a2
  33274  85a2				  -	      ifconst	interlaced
  33275  85a2				  -	      jmp	postsync
  33276  85a2				  -
  33277  85a2				  -oddframevsync
  33278  85a2				  -	      sta	WSYNC
  33279  85a2				  -
  33280  85a2				  -	      LDA	($80,X)	; 11 waste
  33281  85a2				  -	      LDA	($80,X)	; 11 waste
  33282  85a2				  -	      LDA	($80,X)	; 11 waste
  33283  85a2				  -
  33284  85a2				  -	      lda	#2
  33285  85a2				  -	      sta	VSYNC
  33286  85a2				  -	      sta	WSYNC
  33287  85a2				  -	      sta	WSYNC
  33288  85a2				  -	      sta	WSYNC
  33289  85a2				  -
  33290  85a2				  -	      LDA	($80,X)	; 11 waste
  33291  85a2				  -	      LDA	($80,X)	; 11 waste
  33292  85a2				  -	      LDA	($80,X)	; 11 waste
  33293  85a2				  -
  33294  85a2				  -	      lda	#0
  33295  85a2				  -	      sta	VSYNC
  33296  85a2				  -	      sta	VBLANK
  33297  85a2				  -	      ifnconst	overscan_time
  33298  85a2				  -	      lda	#37+128
  33299  85a2				  -	      else
  33300  85a2				  -	      lda	#overscan_time+128
  33301  85a2				  -	      endif
  33302  85a2				  -	      sta	TIM64T
  33303  85a2				  -
  33304  85a2				  -postsync
  33305  85a2					      endif
  33306  85a2
  33307  85a2				  -	      ifconst	legacy
  33308  85a2				  -	      if	legacy < 100
  33309  85a2				  -	      ldx	#4
  33310  85a2				  -adjustloop
  33311  85a2				  -	      lda	player0x,x
  33312  85a2				  -	      sec
  33313  85a2				  -	      sbc	#14	;?
  33314  85a2				  -	      sta	player0x,x
  33315  85a2				  -	      dex
  33316  85a2				  -	      bpl	adjustloop
  33317  85a2				  -	      endif
  33318  85a2					      endif
  33319  85a2				  -	      if	((<*)>$e9)&&((<*)<$fa)
  33320  85a2				  -	      repeat	($fa-(<*))
  33321  85a2				  -	      nop
  33322  85a2				  -	      repend
  33323  85a2					      endif
  33324  85a2		       85 02		      sta	WSYNC
  33325  85a4		       a2 04		      ldx	#4
      0  85a6					      SLEEP	3
      1  85a6				   .CYCLES    SET	3
      2  85a6
      3  85a6				  -	      IF	.CYCLES < 2
      4  85a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  85a6				  -	      ERR
      6  85a6					      ENDIF
      7  85a6
      8  85a6					      IF	.CYCLES & 1
      9  85a6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  85a6		       04 00		      nop	0
     11  85a8				  -	      ELSE
     12  85a8				  -	      bit	VSYNC
     13  85a8					      ENDIF
     14  85a8				   .CYCLES    SET	.CYCLES - 3
     15  85a8					      ENDIF
     16  85a8
     17  85a8				  -	      REPEAT	.CYCLES / 2
     18  85a8				  -	      nop
     19  85a8					      REPEND
  33327  85a8				   HorPosLoop		; 5
  33328  85a8		       b5 80		      lda	player0x,X	;+4 9
  33329  85aa		       38		      sec		;+2 11
  33330  85ab				   DivideLoop
  33331  85ab		       e9 0f		      sbc	#15
  33332  85ad		       b0 fc		      bcs	DivideLoop	;+4 15
  33333  85af		       95 9c		      sta	temp1,X	;+4 19
  33334  85b1		       95 10		      sta	RESP0,X	;+4 23
  33335  85b3		       85 02		      sta	WSYNC
  33336  85b5		       ca		      dex
  33337  85b6		       10 f0		      bpl	HorPosLoop	;+5 5
  33338  85b8							; 4
  33339  85b8
  33340  85b8		       a2 04		      ldx	#4
  33341  85ba		       b4 9c		      ldy	temp1,X
  33342  85bc		       b9 1b f5 	      lda	repostable-256,Y
  33343  85bf		       95 20		      sta	HMP0,X	;+14 18
  33344  85c1
  33345  85c1		       ca		      dex
  33346  85c2		       b4 9c		      ldy	temp1,X
  33347  85c4		       b9 1b f5 	      lda	repostable-256,Y
  33348  85c7		       95 20		      sta	HMP0,X	;+14 32
  33349  85c9
  33350  85c9		       ca		      dex
  33351  85ca		       b4 9c		      ldy	temp1,X
  33352  85cc		       b9 1b f5 	      lda	repostable-256,Y
  33353  85cf		       95 20		      sta	HMP0,X	;+14 46
  33354  85d1
  33355  85d1		       ca		      dex
  33356  85d2		       b4 9c		      ldy	temp1,X
  33357  85d4		       b9 1b f5 	      lda	repostable-256,Y
  33358  85d7		       95 20		      sta	HMP0,X	;+14 60
  33359  85d9
  33360  85d9		       ca		      dex
  33361  85da		       b4 9c		      ldy	temp1,X
  33362  85dc		       b9 1b f5 	      lda	repostable-256,Y
  33363  85df		       95 20		      sta	HMP0,X	;+14 74
  33364  85e1
  33365  85e1		       85 02		      sta	WSYNC
  33366  85e3
  33367  85e3		       85 2a		      sta	HMOVE	;+3 3
  33368  85e5
  33369  85e5
  33370  85e5				  -	      ifconst	legacy
  33371  85e5				  -	      if	legacy < 100
  33372  85e5				  -	      ldx	#4
  33373  85e5				  -adjustloop2
  33374  85e5				  -	      lda	player0x,x
  33375  85e5				  -	      clc
  33376  85e5				  -	      adc	#14	;?
  33377  85e5				  -	      sta	player0x,x
  33378  85e5				  -	      dex
  33379  85e5				  -	      bpl	adjustloop2
  33380  85e5				  -	      endif
  33381  85e5					      endif
  33382  85e5
  33383  85e5
  33384  85e5
  33385  85e5
  33386  85e5							;set score pointers
  33387  85e5		       a7 95		      lax	score+2
  33388  85e7		       20 1b f6 	      jsr	scorepointerset
  33389  85ea		       84 9b		      sty	scorepointers+5
  33390  85ec		       86 98		      stx	scorepointers+2
  33391  85ee		       a7 94		      lax	score+1
  33392  85f0		       20 1b f6 	      jsr	scorepointerset
  33393  85f3		       84 9a		      sty	scorepointers+4
  33394  85f5		       86 97		      stx	scorepointers+1
  33395  85f7		       a7 93		      lax	score
  33396  85f9		       20 1b f6 	      jsr	scorepointerset
  33397  85fc		       84 99		      sty	scorepointers+3
  33398  85fe		       86 96		      stx	scorepointers
  33399  8600
  33400  8600				   vblk
  33401  8600							; run possible vblank bB code
  33402  8600					      ifconst	vblank_bB_code
  33403  8600		       20 2a f6 	      jsr	vblank_bB_code
  33404  8603					      endif
  33405  8603				   vblk2
  33406  8603		       ad 84 02 	      LDA	INTIM
  33407  8606		       30 fb		      bmi	vblk2
  33408  8608		       4c 00 f1 	      jmp	kernel
  33409  860b
  33410  860b
  33411  860b		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
  33412  8614		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
  33413  861b				   repostable
  33414  861b
  33415  861b				   scorepointerset
  33416  861b		       29 0f		      and	#$0F
  33417  861d		       0a		      asl
  33418  861e		       0a		      asl
  33419  861f		       0a		      asl
  33420  8620		       69 74		      adc	#<scoretable
  33421  8622		       a8		      tay
  33422  8623		       8a		      txa
  33423  8624							; and #$F0
  33424  8624							; lsr
  33425  8624		       4b f0		      asr	#$F0
  33426  8626		       69 74		      adc	#<scoretable
  33427  8628		       aa		      tax
  33428  8629		       60		      rts
  33429  862a							;bB.asm
  33430  862a							; bB.asm file is split here
  33431  862a				   .
  33432  862a							; 
  33433  862a
  33434  862a				   .
  33435  862a							; 
  33436  862a
  33437  862a				   .
  33438  862a							; 
  33439  862a
  33440  862a				   .
  33441  862a							; 
  33442  862a
  33443  862a				   .
  33444  862a							; 
  33445  862a
  33446  862a				   .
  33447  862a							; 
  33448  862a
  33449  862a				   .
  33450  862a							; 
  33451  862a
  33452  862a				   .
  33453  862a							; 
  33454  862a
  33455  862a				   .
  33456  862a							; 
  33457  862a
  33458  862a				   .
  33459  862a							; 
  33460  862a
  33461  862a				   .
  33462  862a							; 
  33463  862a
  33464  862a				   .
  33465  862a							; 
  33466  862a
  33467  862a				   .
  33468  862a							; 
  33469  862a
  33470  862a				   .
  33471  862a							; 
  33472  862a
  33473  862a				   .
  33474  862a							; 
  33475  862a
  33476  862a				   .
  33477  862a							; 
  33478  862a
  33479  862a				   .
  33480  862a							; 
  33481  862a
  33482  862a				   .
  33483  862a							; 
  33484  862a
  33485  862a				   .
  33486  862a							; 
  33487  862a
  33488  862a				   .
  33489  862a							; 
  33490  862a
  33491  862a				   .
  33492  862a							; 
  33493  862a
  33494  862a				   .
  33495  862a							; 
  33496  862a
  33497  862a				   .
  33498  862a							; 
  33499  862a
  33500  862a				   .
  33501  862a							; 
  33502  862a
  33503  862a				   .L01452		;  vblank
  33504  862a
  33505  862a				   vblank_bB_code
  33506  862a				   .
  33507  862a							; 
  33508  862a
  33509  862a				   .
  33510  862a							; 
  33511  862a
  33512  862a				   .
  33513  862a							; 
  33514  862a
  33515  862a				   .
  33516  862a							; 
  33517  862a
  33518  862a				   .L01453		;  if !_Bit7_Vblank01{7} then goto __Skip_Vblank_01
  33519  862a
  33520  862a		       24 c4		      BIT	_Bit7_Vblank01
  33521  862c		       30 03		      BMI	.skipL01453
  33522  862e				   .condpart495
  33523  862e		       4c 43 f6 	      jmp	.__Skip_Vblank_01
  33524  8631
  33525  8631				   .skipL01453
  33526  8631				   .
  33527  8631							; 
  33528  8631
  33529  8631				   .
  33530  8631							; 
  33531  8631
  33532  8631				   .
  33533  8631							; 
  33534  8631
  33535  8631				   .
  33536  8631							; 
  33537  8631
  33538  8631				   .L01454		;  goto __VBLANK_Code bank6
  33539  8631
  33540  8631		       85 ee		      sta	temp7
  33541  8633		       a9 b0		      lda	#>(.__VBLANK_Code-1)
  33542  8635		       48		      pha
  33543  8636		       a9 ff		      lda	#<(.__VBLANK_Code-1)
  33544  8638		       48		      pha
  33545  8639		       a5 ee		      lda	temp7
  33546  863b		       48		      pha
  33547  863c		       8a		      txa
  33548  863d		       48		      pha
  33549  863e		       a2 06		      ldx	#6
  33550  8640		       4c eb ff 	      jmp	BS_jsr
  33551  8643				   .
  33552  8643							; 
  33553  8643
  33554  8643				   .__Skip_Vblank_01
  33555  8643							; __Skip_Vblank_01
  33556  8643
  33557  8643				   .
  33558  8643							; 
  33559  8643
  33560  8643				   .
  33561  8643							; 
  33562  8643
  33563  8643				   .
  33564  8643							; 
  33565  8643
  33566  8643				   .
  33567  8643							; 
  33568  8643
  33569  8643				   .L01455		;  _Bit7_Vblank01{7}  =  0
  33570  8643
  33571  8643		       a5 c4		      LDA	_Bit7_Vblank01
  33572  8645		       29 7f		      AND	#127
  33573  8647		       85 c4		      STA	_Bit7_Vblank01
  33574  8649				   .
  33575  8649							; 
  33576  8649
  33577  8649				   .
  33578  8649							; 
  33579  8649
  33580  8649				   .
  33581  8649							; 
  33582  8649
  33583  8649				   .
  33584  8649							; 
  33585  8649
  33586  8649				   .
  33587  8649							; 
  33588  8649
  33589  8649				   .
  33590  8649							; 
  33591  8649
  33592  8649				   .
  33593  8649							; 
  33594  8649
  33595  8649				   .L01456		;  if !_Bit7_Vblank02{7} then goto __Skip_Second_Vblank
  33596  8649
  33597  8649		       24 c5		      BIT	_Bit7_Vblank02
  33598  864b		       30 03		      BMI	.skipL01456
  33599  864d				   .condpart496
  33600  864d		       4c 78 f6 	      jmp	.__Skip_Second_Vblank
  33601  8650
  33602  8650				   .skipL01456
  33603  8650				   .
  33604  8650							; 
  33605  8650
  33606  8650				   .
  33607  8650							; 
  33608  8650
  33609  8650				   .
  33610  8650							; 
  33611  8650
  33612  8650				   .
  33613  8650							; 
  33614  8650
  33615  8650				   .L01457		;  if _Seaweed_Shot  =  20 then _SC_Back  =  $C6
  33616  8650
  33617  8650		       a5 e2		      LDA	_Seaweed_Shot
  33618  8652		       c9 14		      CMP	#20
  33619  8654		       d0 04		      BNE	.skipL01457
  33620  8656				   .condpart497
  33621  8656		       a9 c6		      LDA	#$C6
  33622  8658		       85 d1		      STA	_SC_Back
  33623  865a				   .skipL01457
  33624  865a				   .
  33625  865a							; 
  33626  865a
  33627  865a				   .L01458		;  if _Seaweed_Shot  =  40 then _SC_Back  =  $C4
  33628  865a
  33629  865a		       a5 e2		      LDA	_Seaweed_Shot
  33630  865c		       c9 28		      CMP	#40
  33631  865e		       d0 04		      BNE	.skipL01458
  33632  8660				   .condpart498
  33633  8660		       a9 c4		      LDA	#$C4
  33634  8662		       85 d1		      STA	_SC_Back
  33635  8664				   .skipL01458
  33636  8664				   .
  33637  8664							; 
  33638  8664
  33639  8664				   .L01459		;  if _Seaweed_Shot  =  60 then _SC_Back  =  $C2
  33640  8664
  33641  8664		       a5 e2		      LDA	_Seaweed_Shot
  33642  8666		       c9 3c		      CMP	#60
  33643  8668		       d0 04		      BNE	.skipL01459
  33644  866a				   .condpart499
  33645  866a		       a9 c2		      LDA	#$C2
  33646  866c		       85 d1		      STA	_SC_Back
  33647  866e				   .skipL01459
  33648  866e				   .
  33649  866e							; 
  33650  866e
  33651  866e				   .L01460		;  if _Seaweed_Shot  =  80 then _SC_Back  =  $C0
  33652  866e
  33653  866e		       a5 e2		      LDA	_Seaweed_Shot
  33654  8670		       c9 50		      CMP	#80
  33655  8672		       d0 04		      BNE	.skipL01460
  33656  8674				   .condpart500
  33657  8674		       a9 c0		      LDA	#$C0
  33658  8676		       85 d1		      STA	_SC_Back
  33659  8678				   .skipL01460
  33660  8678				   .
  33661  8678							; 
  33662  8678
  33663  8678				   .__Skip_Second_Vblank
  33664  8678							; __Skip_Second_Vblank
  33665  8678
  33666  8678				   .
  33667  8678							; 
  33668  8678
  33669  8678				   .
  33670  8678							; 
  33671  8678
  33672  8678				   .
  33673  8678							; 
  33674  8678
  33675  8678				   .
  33676  8678							; 
  33677  8678
  33678  8678				   .L01461		;  _Bit7_Vblank02{7}  =  0
  33679  8678
  33680  8678		       a5 c5		      LDA	_Bit7_Vblank02
  33681  867a		       29 7f		      AND	#127
  33682  867c		       85 c5		      STA	_Bit7_Vblank02
  33683  867e				   .
  33684  867e							; 
  33685  867e
  33686  867e				   .L01462		;  return
  33687  867e
  33688  867e		       ba		      tsx
  33689  867f		       b5 02		      lda	2,x	; check return address
  33690  8681		       49 f6		      eor	#(>*)	; vs. current PCH
  33691  8683		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  33692  8685		       f0 03		      beq	*+5	; if equal, do normal return
  33693  8687		       4c dd ff 	      JMP	BS_return
  33694  868a		       60		      RTS
  33695  868b				   .
  33696  868b							; 
  33697  868b
  33698  868b				   .
  33699  868b							; 
  33700  868b
  33701  868b				   .
  33702  868b							; 
  33703  868b
  33704  868b				   .
  33705  868b							; 
  33706  868b
  33707  868b				   .
  33708  868b							; 
  33709  868b
  33710  868b				   .
  33711  868b							; 
  33712  868b
  33713  868b				   .
  33714  868b							; 
  33715  868b
  33716  868b				   .
  33717  868b							; 
  33718  868b
  33719  868b				   .
  33720  868b							; 
  33721  868b
  33722  868b				   .L01463		;  asm
  33723  868b
  33724  868b				   minikernel
  33725  868b
  33726  868b		       85 02		      sta	WSYNC
  33727  868d
  33728  868d		       a5 d1		      lda	_SC_Back
  33729  868f
  33730  868f		       85 09		      sta	COLUBK
  33731  8691
  33732  8691		       60		      rts
  33733  8692
  33734  8692				  -	      ifconst	pfres
  33735  8692				  -	      if	(<*) > (254-pfres*pfwidth)
  33736  8692				  -	      align	256
  33737  8692				  -	      endif
  33738  8692				  -	      if	(<*) < (136-pfres*pfwidth)
  33739  8692				  -	      repeat	((136-pfres*pfwidth)-(<*))
  33740  8692				  -	      .byte	0
  33741  8692				  -	      repend
  33742  8692				  -	      endif
  33743  8692					      else
  33744  8692				  -	      if	(<*) > 206
  33745  8692				  -	      align	256
  33746  8692					      endif
  33747  8692				  -	      if	(<*) < 88
  33748  8692				  -	      repeat	(88-(<*))
  33749  8692				  -	      .byte	0
  33750  8692				  -	      repend
  33751  8692					      endif
  33752  8692					      endif
  33753  8692				   pfcolorlabel13
  33754  8692		       9c cc cc cc	      .byte.b	$9C, $CC, $CC, $CC
  33755  8696		       9a cc cc cc	      .byte.b	$9A, $CC, $CC, $CC
  33756  869a		       98 ca ca ca	      .byte.b	$98, $CA, $CA, $CA
  33757  869e		       96 ca ca ca	      .byte.b	$96, $CA, $CA, $CA
  33758  86a2		       1c c8 c8 c8	      .byte.b	$1C, $C8, $C8, $C8
  33759  86a6		       9e c8 c8 c8	      .byte.b	$9E, $C8, $C8, $C8
  33760  86aa		       9c c6 c6 c6	      .byte.b	$9C, $C6, $C6, $C6
  33761  86ae		       9a c6 c6 c6	      .byte.b	$9A, $C6, $C6, $C6
  33762  86b2		       98 c4 c4 c4	      .byte.b	$98, $C4, $C4, $C4
  33763  86b6		       96 c4 c4 c4	      .byte.b	$96, $C4, $C4, $C4
  33764  86ba				  -	      if	(<*) > (<(*+4))
  33765  86ba				  -196	      $C4,	$C4, $C4 repeat ($100-<*)
  33766  86ba				  -	      .byte	0
  33767  86ba					      repend
  33768  86ba					      endif
  33769  86ba				   playerL0218_0
  33770  86ba		       aa		      .byte.b	%10101010
  33771  86bb		       ca		      .byte.b	%11001010
  33772  86bc		       ce		      .byte.b	%11001110
  33773  86bd		       aa		      .byte.b	%10101010
  33774  86be		       ca		      .byte.b	%11001010
  33775  86bf				  -	      if	(<*) > (<(*+4))
  33776  86bf				  -	      repeat	($100-<*)
  33777  86bf				  -	      .byte	0
  33778  86bf				  -	      repend
  33779  86bf					      endif
  33780  86bf				   playerL0225_0
  33781  86bf		       ea		      .byte.b	%11101010
  33782  86c0		       8a		      .byte.b	%10001010
  33783  86c1		       8e		      .byte.b	%10001110
  33784  86c2		       8a		      .byte.b	%10001010
  33785  86c3		       8a		      .byte.b	%10001010
  33786  86c4					      if	(<*) > (<(*+100))
  33787  86c4					      repeat	($100-<*)
  33788  86c4		       00		      .byte.b	0
  33787  86c4					      repend
  33788  86c5		       00		      .byte.b	0
  33787  86c5					      repend
  33788  86c6		       00		      .byte.b	0
  33787  86c6					      repend
  33788  86c7		       00		      .byte.b	0
  33787  86c7					      repend
  33788  86c8		       00		      .byte.b	0
  33787  86c8					      repend
  33788  86c9		       00		      .byte.b	0
  33787  86c9					      repend
  33788  86ca		       00		      .byte.b	0
  33787  86ca					      repend
  33788  86cb		       00		      .byte.b	0
  33787  86cb					      repend
  33788  86cc		       00		      .byte.b	0
  33787  86cc					      repend
  33788  86cd		       00		      .byte.b	0
  33787  86cd					      repend
  33788  86ce		       00		      .byte.b	0
  33787  86ce					      repend
  33788  86cf		       00		      .byte.b	0
  33787  86cf					      repend
  33788  86d0		       00		      .byte.b	0
  33787  86d0					      repend
  33788  86d1		       00		      .byte.b	0
  33787  86d1					      repend
  33788  86d2		       00		      .byte.b	0
  33787  86d2					      repend
  33788  86d3		       00		      .byte.b	0
  33787  86d3					      repend
  33788  86d4		       00		      .byte.b	0
  33787  86d4					      repend
  33788  86d5		       00		      .byte.b	0
  33787  86d5					      repend
  33788  86d6		       00		      .byte.b	0
  33787  86d6					      repend
  33788  86d7		       00		      .byte.b	0
  33787  86d7					      repend
  33788  86d8		       00		      .byte.b	0
  33787  86d8					      repend
  33788  86d9		       00		      .byte.b	0
  33787  86d9					      repend
  33788  86da		       00		      .byte.b	0
  33787  86da					      repend
  33788  86db		       00		      .byte.b	0
  33787  86db					      repend
  33788  86dc		       00		      .byte.b	0
  33787  86dc					      repend
  33788  86dd		       00		      .byte.b	0
  33787  86dd					      repend
  33788  86de		       00		      .byte.b	0
  33787  86de					      repend
  33788  86df		       00		      .byte.b	0
  33787  86df					      repend
  33788  86e0		       00		      .byte.b	0
  33787  86e0					      repend
  33788  86e1		       00		      .byte.b	0
  33787  86e1					      repend
  33788  86e2		       00		      .byte.b	0
  33787  86e2					      repend
  33788  86e3		       00		      .byte.b	0
  33787  86e3					      repend
  33788  86e4		       00		      .byte.b	0
  33787  86e4					      repend
  33788  86e5		       00		      .byte.b	0
  33787  86e5					      repend
  33788  86e6		       00		      .byte.b	0
  33787  86e6					      repend
  33788  86e7		       00		      .byte.b	0
  33787  86e7					      repend
  33788  86e8		       00		      .byte.b	0
  33787  86e8					      repend
  33788  86e9		       00		      .byte.b	0
  33787  86e9					      repend
  33788  86ea		       00		      .byte.b	0
  33787  86ea					      repend
  33788  86eb		       00		      .byte.b	0
  33787  86eb					      repend
  33788  86ec		       00		      .byte.b	0
  33787  86ec					      repend
  33788  86ed		       00		      .byte.b	0
  33787  86ed					      repend
  33788  86ee		       00		      .byte.b	0
  33787  86ee					      repend
  33788  86ef		       00		      .byte.b	0
  33787  86ef					      repend
  33788  86f0		       00		      .byte.b	0
  33787  86f0					      repend
  33788  86f1		       00		      .byte.b	0
  33787  86f1					      repend
  33788  86f2		       00		      .byte.b	0
  33787  86f2					      repend
  33788  86f3		       00		      .byte.b	0
  33787  86f3					      repend
  33788  86f4		       00		      .byte.b	0
  33787  86f4					      repend
  33788  86f5		       00		      .byte.b	0
  33787  86f5					      repend
  33788  86f6		       00		      .byte.b	0
  33787  86f6					      repend
  33788  86f7		       00		      .byte.b	0
  33787  86f7					      repend
  33788  86f8		       00		      .byte.b	0
  33787  86f8					      repend
  33788  86f9		       00		      .byte.b	0
  33787  86f9					      repend
  33788  86fa		       00		      .byte.b	0
  33787  86fa					      repend
  33788  86fb		       00		      .byte.b	0
  33787  86fb					      repend
  33788  86fc		       00		      .byte.b	0
  33787  86fc					      repend
  33788  86fd		       00		      .byte.b	0
  33787  86fd					      repend
  33788  86fe		       00		      .byte.b	0
  33787  86fe					      repend
  33788  86ff		       00		      .byte.b	0
  33789  8700					      repend
  33790  8700					      endif
  33791  8700				   playercolorL0246_1
  33792  8700		       c4		      .byte.b	$C4
  33793  8701		       c4		      .byte.b	$C4
  33794  8702		       c4		      .byte.b	$C4
  33795  8703		       c4		      .byte.b	$C4
  33796  8704		       c4		      .byte.b	$C4
  33797  8705		       c4		      .byte.b	$C4
  33798  8706		       c4		      .byte.b	$C4
  33799  8707		       c4		      .byte.b	$C4
  33800  8708		       c4		      .byte.b	$C4
  33801  8709		       c4		      .byte.b	$C4
  33802  870a		       c4		      .byte.b	$C4
  33803  870b		       c4		      .byte.b	$C4
  33804  870c		       c4		      .byte.b	$C4
  33805  870d		       c4		      .byte.b	$C4
  33806  870e		       c4		      .byte.b	$C4
  33807  870f		       c4		      .byte.b	$C4
  33808  8710		       c4		      .byte.b	$C4
  33809  8711		       c4		      .byte.b	$C4
  33810  8712		       c4		      .byte.b	$C4
  33811  8713		       c4		      .byte.b	$C4
  33812  8714		       c4		      .byte.b	$C4
  33813  8715		       c4		      .byte.b	$C4
  33814  8716		       c4		      .byte.b	$C4
  33815  8717		       c4		      .byte.b	$C4
  33816  8718		       c4		      .byte.b	$C4
  33817  8719		       c4		      .byte.b	$C4
  33818  871a		       c4		      .byte.b	$C4
  33819  871b		       c4		      .byte.b	$C4
  33820  871c		       c4		      .byte.b	$C4
  33821  871d		       c4		      .byte.b	$C4
  33822  871e		       c4		      .byte.b	$C4
  33823  871f		       c4		      .byte.b	$C4
  33824  8720		       c4		      .byte.b	$C4
  33825  8721		       c4		      .byte.b	$C4
  33826  8722		       c4		      .byte.b	$C4
  33827  8723		       c4		      .byte.b	$C4
  33828  8724		       c4		      .byte.b	$C4
  33829  8725		       c4		      .byte.b	$C4
  33830  8726		       c4		      .byte.b	$C4
  33831  8727		       c4		      .byte.b	$C4
  33832  8728		       c4		      .byte.b	$C4
  33833  8729		       c4		      .byte.b	$C4
  33834  872a		       c4		      .byte.b	$C4
  33835  872b		       c4		      .byte.b	$C4
  33836  872c		       c4		      .byte.b	$C4
  33837  872d		       c4		      .byte.b	$C4
  33838  872e		       c4		      .byte.b	$C4
  33839  872f		       c4		      .byte.b	$C4
  33840  8730		       c4		      .byte.b	$C4
  33841  8731		       c4		      .byte.b	$C4
  33842  8732		       c4		      .byte.b	$C4
  33843  8733		       c4		      .byte.b	$C4
  33844  8734		       c4		      .byte.b	$C4
  33845  8735		       c4		      .byte.b	$C4
  33846  8736		       c4		      .byte.b	$C4
  33847  8737		       c4		      .byte.b	$C4
  33848  8738		       c4		      .byte.b	$C4
  33849  8739		       c4		      .byte.b	$C4
  33850  873a		       c4		      .byte.b	$C4
  33851  873b		       c4		      .byte.b	$C4
  33852  873c		       c6		      .byte.b	$C6
  33853  873d		       c6		      .byte.b	$C6
  33854  873e		       c6		      .byte.b	$C6
  33855  873f		       c6		      .byte.b	$C6
  33856  8740		       c6		      .byte.b	$C6
  33857  8741		       c6		      .byte.b	$C6
  33858  8742		       c6		      .byte.b	$C6
  33859  8743		       c6		      .byte.b	$C6
  33860  8744		       c6		      .byte.b	$C6
  33861  8745		       c6		      .byte.b	$C6
  33862  8746		       c6		      .byte.b	$C6
  33863  8747		       c6		      .byte.b	$C6
  33864  8748		       c6		      .byte.b	$C6
  33865  8749		       c6		      .byte.b	$C6
  33866  874a		       c6		      .byte.b	$C6
  33867  874b		       c6		      .byte.b	$C6
  33868  874c		       c6		      .byte.b	$C6
  33869  874d		       c6		      .byte.b	$C6
  33870  874e		       c6		      .byte.b	$C6
  33871  874f		       c6		      .byte.b	$C6
  33872  8750		       c6		      .byte.b	$C6
  33873  8751		       c6		      .byte.b	$C6
  33874  8752		       c6		      .byte.b	$C6
  33875  8753		       c6		      .byte.b	$C6
  33876  8754		       c6		      .byte.b	$C6
  33877  8755		       c6		      .byte.b	$C6
  33878  8756		       c6		      .byte.b	$C6
  33879  8757		       c6		      .byte.b	$C6
  33880  8758		       c6		      .byte.b	$C6
  33881  8759		       c6		      .byte.b	$C6
  33882  875a		       c6		      .byte.b	$C6
  33883  875b		       c6		      .byte.b	$C6
  33884  875c		       c6		      .byte.b	$C6
  33885  875d		       c6		      .byte.b	$C6
  33886  875e		       c6		      .byte.b	$C6
  33887  875f		       c6		      .byte.b	$C6
  33888  8760		       c6		      .byte.b	$C6
  33889  8761		       c6		      .byte.b	$C6
  33890  8762		       c6		      .byte.b	$C6
  33891  8763		       c6		      .byte.b	$C6
  33892  8764		       c6		      .byte.b	$C6
  33893  8765				  -	      if	(<*) > (<(*+100))
  33894  8765				  -	      repeat	($100-<*)
  33895  8765				  -	      .byte	0
  33896  8765				  -	      repend
  33897  8765					      endif
  33898  8765				   playerL0247_1
  33899  8765		       f0		      .byte.b	%11110000
  33900  8766		       f0		      .byte.b	%11110000
  33901  8767		       f0		      .byte.b	%11110000
  33902  8768		       f0		      .byte.b	%11110000
  33903  8769		       f0		      .byte.b	%11110000
  33904  876a		       f0		      .byte.b	%11110000
  33905  876b		       f0		      .byte.b	%11110000
  33906  876c		       f0		      .byte.b	%11110000
  33907  876d		       f0		      .byte.b	%11110000
  33908  876e		       f0		      .byte.b	%11110000
  33909  876f		       f0		      .byte.b	%11110000
  33910  8770		       f0		      .byte.b	%11110000
  33911  8771		       f0		      .byte.b	%11110000
  33912  8772		       f0		      .byte.b	%11110000
  33913  8773		       f0		      .byte.b	%11110000
  33914  8774		       f0		      .byte.b	%11110000
  33915  8775		       f0		      .byte.b	%11110000
  33916  8776		       f0		      .byte.b	%11110000
  33917  8777		       f0		      .byte.b	%11110000
  33918  8778		       f0		      .byte.b	%11110000
  33919  8779		       f0		      .byte.b	%11110000
  33920  877a		       f0		      .byte.b	%11110000
  33921  877b		       f0		      .byte.b	%11110000
  33922  877c		       f0		      .byte.b	%11110000
  33923  877d		       f0		      .byte.b	%11110000
  33924  877e		       f0		      .byte.b	%11110000
  33925  877f		       f0		      .byte.b	%11110000
  33926  8780		       f0		      .byte.b	%11110000
  33927  8781		       f0		      .byte.b	%11110000
  33928  8782		       f0		      .byte.b	%11110000
  33929  8783		       f0		      .byte.b	%11110000
  33930  8784		       f0		      .byte.b	%11110000
  33931  8785		       f0		      .byte.b	%11110000
  33932  8786		       f0		      .byte.b	%11110000
  33933  8787		       f0		      .byte.b	%11110000
  33934  8788		       f0		      .byte.b	%11110000
  33935  8789		       f0		      .byte.b	%11110000
  33936  878a		       f0		      .byte.b	%11110000
  33937  878b		       f0		      .byte.b	%11110000
  33938  878c		       f0		      .byte.b	%11110000
  33939  878d		       f0		      .byte.b	%11110000
  33940  878e		       f0		      .byte.b	%11110000
  33941  878f		       f0		      .byte.b	%11110000
  33942  8790		       f0		      .byte.b	%11110000
  33943  8791		       f0		      .byte.b	%11110000
  33944  8792		       f0		      .byte.b	%11110000
  33945  8793		       f0		      .byte.b	%11110000
  33946  8794		       f0		      .byte.b	%11110000
  33947  8795		       f0		      .byte.b	%11110000
  33948  8796		       f0		      .byte.b	%11110000
  33949  8797		       f0		      .byte.b	%11110000
  33950  8798		       f0		      .byte.b	%11110000
  33951  8799		       f0		      .byte.b	%11110000
  33952  879a		       f0		      .byte.b	%11110000
  33953  879b		       f0		      .byte.b	%11110000
  33954  879c		       f0		      .byte.b	%11110000
  33955  879d		       f0		      .byte.b	%11110000
  33956  879e		       f0		      .byte.b	%11110000
  33957  879f		       f0		      .byte.b	%11110000
  33958  87a0		       f0		      .byte.b	%11110000
  33959  87a1		       f0		      .byte.b	%11110000
  33960  87a2		       f0		      .byte.b	%11110000
  33961  87a3		       f0		      .byte.b	%11110000
  33962  87a4		       f0		      .byte.b	%11110000
  33963  87a5		       f0		      .byte.b	%11110000
  33964  87a6		       f0		      .byte.b	%11110000
  33965  87a7		       f0		      .byte.b	%11110000
  33966  87a8		       f0		      .byte.b	%11110000
  33967  87a9		       f0		      .byte.b	%11110000
  33968  87aa		       f0		      .byte.b	%11110000
  33969  87ab		       f0		      .byte.b	%11110000
  33970  87ac		       f0		      .byte.b	%11110000
  33971  87ad		       f0		      .byte.b	%11110000
  33972  87ae		       f0		      .byte.b	%11110000
  33973  87af		       f0		      .byte.b	%11110000
  33974  87b0		       f0		      .byte.b	%11110000
  33975  87b1		       f0		      .byte.b	%11110000
  33976  87b2		       f0		      .byte.b	%11110000
  33977  87b3		       f0		      .byte.b	%11110000
  33978  87b4		       f0		      .byte.b	%11110000
  33979  87b5		       f0		      .byte.b	%11110000
  33980  87b6		       f0		      .byte.b	%11110000
  33981  87b7		       f0		      .byte.b	%11110000
  33982  87b8		       f0		      .byte.b	%11110000
  33983  87b9		       f0		      .byte.b	%11110000
  33984  87ba		       f0		      .byte.b	%11110000
  33985  87bb		       f0		      .byte.b	%11110000
  33986  87bc		       f0		      .byte.b	%11110000
  33987  87bd		       f0		      .byte.b	%11110000
  33988  87be		       f0		      .byte.b	%11110000
  33989  87bf		       f0		      .byte.b	%11110000
  33990  87c0		       f0		      .byte.b	%11110000
  33991  87c1		       f0		      .byte.b	%11110000
  33992  87c2		       f0		      .byte.b	%11110000
  33993  87c3		       f0		      .byte.b	%11110000
  33994  87c4		       f0		      .byte.b	%11110000
  33995  87c5		       f0		      .byte.b	%11110000
  33996  87c6		       f0		      .byte.b	%11110000
  33997  87c7		       f0		      .byte.b	%11110000
  33998  87c8		       f0		      .byte.b	%11110000
  33999  87c9		       f0		      .byte.b	%11110000
  34000  87ca				  -	      if	(<*) > (<(*+2))
  34001  87ca				  -	      repeat	($100-<*)
  34002  87ca				  -	      .byte	0
  34003  87ca				  -	      repend
  34004  87ca					      endif
  34005  87ca				   playerL0248_0
  34006  87ca		       ff		      .byte.b	%11111111
  34007  87cb		       ff		      .byte.b	%11111111
  34008  87cc		       ff		      .byte.b	%11111111
  34009  87cd				  -	      if	(<*) > (<(*+0))
  34010  87cd				  -	      repeat	($100-<*)
  34011  87cd				  -	      .byte	0
  34012  87cd				  -	      repend
  34013  87cd					      endif
  34014  87cd				   playerL0279_1
  34015  87cd		       00		      .byte.b	%00000000
  34016  87ce				  -	      ifconst	pfres
  34017  87ce				  -	      if	(<*) > (254-pfres*pfwidth)
  34018  87ce				  -	      align	256
  34019  87ce				  -	      endif
  34020  87ce				  -	      if	(<*) < (136-pfres*pfwidth)
  34021  87ce				  -	      repeat	((136-pfres*pfwidth)-(<*))
  34022  87ce				  -	      .byte	0
  34023  87ce				  -	      repend
  34024  87ce				  -	      endif
  34025  87ce					      else
  34026  87ce				  -	      if	(<*) > 206
  34027  87ce				  -	      align	256
  34028  87ce					      endif
  34029  87ce				  -	      if	(<*) < 88
  34030  87ce				  -	      repeat	(88-(<*))
  34031  87ce				  -	      .byte	0
  34032  87ce				  -	      repend
  34033  87ce					      endif
  34034  87ce					      endif
  34035  87ce				   pfcolorlabel277
  34036  87ce		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34037  87d2		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34038  87d6		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34039  87da		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34040  87de		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34041  87e2		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34042  87e6		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34043  87ea		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34044  87ee		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34045  87f2		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34046  87f6		       1a 3a 6a 9a	      .byte.b	$1A, $3A, $6A, $9A
  34047  87fa				  -	      ifconst	pfres
  34048  87fa				  -	      if	(<*) > (254-pfres*pfwidth)
  34049  87fa				  -	      align	256
  34050  87fa				  -	      endif
  34051  87fa				  -	      if	(<*) < (136-pfres*pfwidth)
  34052  87fa				  -	      repeat	((136-pfres*pfwidth)-(<*))
  34053  87fa				  -	      .byte	0
  34054  87fa				  -	      repend
  34055  87fa				  -	      endif
  34056  87fa					      else
  34057  87fa					      if	(<*) > 206
  34058  8800		       00 00 00 00*	      align	256
  34059  8800					      endif
  34060  8800					      if	(<*) < 88
  34061  8800					      repeat	(88-(<*))
  34062  8800		       00		      .byte.b	0
  34061  8800					      repend
  34062  8801		       00		      .byte.b	0
  34061  8801					      repend
  34062  8802		       00		      .byte.b	0
  34061  8802					      repend
  34062  8803		       00		      .byte.b	0
  34061  8803					      repend
  34062  8804		       00		      .byte.b	0
  34061  8804					      repend
  34062  8805		       00		      .byte.b	0
  34061  8805					      repend
  34062  8806		       00		      .byte.b	0
  34061  8806					      repend
  34062  8807		       00		      .byte.b	0
  34061  8807					      repend
  34062  8808		       00		      .byte.b	0
  34061  8808					      repend
  34062  8809		       00		      .byte.b	0
  34061  8809					      repend
  34062  880a		       00		      .byte.b	0
  34061  880a					      repend
  34062  880b		       00		      .byte.b	0
  34061  880b					      repend
  34062  880c		       00		      .byte.b	0
  34061  880c					      repend
  34062  880d		       00		      .byte.b	0
  34061  880d					      repend
  34062  880e		       00		      .byte.b	0
  34061  880e					      repend
  34062  880f		       00		      .byte.b	0
  34061  880f					      repend
  34062  8810		       00		      .byte.b	0
  34061  8810					      repend
  34062  8811		       00		      .byte.b	0
  34061  8811					      repend
  34062  8812		       00		      .byte.b	0
  34061  8812					      repend
  34062  8813		       00		      .byte.b	0
  34061  8813					      repend
  34062  8814		       00		      .byte.b	0
  34061  8814					      repend
  34062  8815		       00		      .byte.b	0
  34061  8815					      repend
  34062  8816		       00		      .byte.b	0
  34061  8816					      repend
  34062  8817		       00		      .byte.b	0
  34061  8817					      repend
  34062  8818		       00		      .byte.b	0
  34061  8818					      repend
  34062  8819		       00		      .byte.b	0
  34061  8819					      repend
  34062  881a		       00		      .byte.b	0
  34061  881a					      repend
  34062  881b		       00		      .byte.b	0
  34061  881b					      repend
  34062  881c		       00		      .byte.b	0
  34061  881c					      repend
  34062  881d		       00		      .byte.b	0
  34061  881d					      repend
  34062  881e		       00		      .byte.b	0
  34061  881e					      repend
  34062  881f		       00		      .byte.b	0
  34061  881f					      repend
  34062  8820		       00		      .byte.b	0
  34061  8820					      repend
  34062  8821		       00		      .byte.b	0
  34061  8821					      repend
  34062  8822		       00		      .byte.b	0
  34061  8822					      repend
  34062  8823		       00		      .byte.b	0
  34061  8823					      repend
  34062  8824		       00		      .byte.b	0
  34061  8824					      repend
  34062  8825		       00		      .byte.b	0
  34061  8825					      repend
  34062  8826		       00		      .byte.b	0
  34061  8826					      repend
  34062  8827		       00		      .byte.b	0
  34061  8827					      repend
  34062  8828		       00		      .byte.b	0
  34061  8828					      repend
  34062  8829		       00		      .byte.b	0
  34061  8829					      repend
  34062  882a		       00		      .byte.b	0
  34061  882a					      repend
  34062  882b		       00		      .byte.b	0
  34061  882b					      repend
  34062  882c		       00		      .byte.b	0
  34061  882c					      repend
  34062  882d		       00		      .byte.b	0
  34061  882d					      repend
  34062  882e		       00		      .byte.b	0
  34061  882e					      repend
  34062  882f		       00		      .byte.b	0
  34061  882f					      repend
  34062  8830		       00		      .byte.b	0
  34061  8830					      repend
  34062  8831		       00		      .byte.b	0
  34061  8831					      repend
  34062  8832		       00		      .byte.b	0
  34061  8832					      repend
  34062  8833		       00		      .byte.b	0
  34061  8833					      repend
  34062  8834		       00		      .byte.b	0
  34061  8834					      repend
  34062  8835		       00		      .byte.b	0
  34061  8835					      repend
  34062  8836		       00		      .byte.b	0
  34061  8836					      repend
  34062  8837		       00		      .byte.b	0
  34061  8837					      repend
  34062  8838		       00		      .byte.b	0
  34061  8838					      repend
  34062  8839		       00		      .byte.b	0
  34061  8839					      repend
  34062  883a		       00		      .byte.b	0
  34061  883a					      repend
  34062  883b		       00		      .byte.b	0
  34061  883b					      repend
  34062  883c		       00		      .byte.b	0
  34061  883c					      repend
  34062  883d		       00		      .byte.b	0
  34061  883d					      repend
  34062  883e		       00		      .byte.b	0
  34061  883e					      repend
  34062  883f		       00		      .byte.b	0
  34061  883f					      repend
  34062  8840		       00		      .byte.b	0
  34061  8840					      repend
  34062  8841		       00		      .byte.b	0
  34061  8841					      repend
  34062  8842		       00		      .byte.b	0
  34061  8842					      repend
  34062  8843		       00		      .byte.b	0
  34061  8843					      repend
  34062  8844		       00		      .byte.b	0
  34061  8844					      repend
  34062  8845		       00		      .byte.b	0
  34061  8845					      repend
  34062  8846		       00		      .byte.b	0
  34061  8846					      repend
  34062  8847		       00		      .byte.b	0
  34061  8847					      repend
  34062  8848		       00		      .byte.b	0
  34061  8848					      repend
  34062  8849		       00		      .byte.b	0
  34061  8849					      repend
  34062  884a		       00		      .byte.b	0
  34061  884a					      repend
  34062  884b		       00		      .byte.b	0
  34061  884b					      repend
  34062  884c		       00		      .byte.b	0
  34061  884c					      repend
  34062  884d		       00		      .byte.b	0
  34061  884d					      repend
  34062  884e		       00		      .byte.b	0
  34061  884e					      repend
  34062  884f		       00		      .byte.b	0
  34061  884f					      repend
  34062  8850		       00		      .byte.b	0
  34061  8850					      repend
  34062  8851		       00		      .byte.b	0
  34061  8851					      repend
  34062  8852		       00		      .byte.b	0
  34061  8852					      repend
  34062  8853		       00		      .byte.b	0
  34061  8853					      repend
  34062  8854		       00		      .byte.b	0
  34061  8854					      repend
  34062  8855		       00		      .byte.b	0
  34061  8855					      repend
  34062  8856		       00		      .byte.b	0
  34061  8856					      repend
  34062  8857		       00		      .byte.b	0
  34063  8858					      repend
  34064  8858					      endif
  34065  8858					      endif
  34066  8858				   pfcolorlabel302
  34067  8858		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34068  885c		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34069  8860		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34070  8864		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34071  8868		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34072  886c		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34073  8870		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34074  8874		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34075  8878		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34076  887c		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34077  8880		       ca fa 8a 2a	      .byte.b	$CA, $FA, $8A, $2A
  34078  8884				  -	      if	(<*) > (<(*+7))
  34079  8884				  -	      repeat	($100-<*)
  34080  8884				  -	      .byte	0
  34081  8884				  -	      repend
  34082  8884					      endif
  34083  8884				   playerL0599_0
  34084  8884		       5a		      .byte.b	%01011010
  34085  8885		       66		      .byte.b	%01100110
  34086  8886		       3c		      .byte.b	%00111100
  34087  8887		       7e		      .byte.b	%01111110
  34088  8888		       ff		      .byte.b	%11111111
  34089  8889		       18		      .byte.b	%00011000
  34090  888a		       18		      .byte.b	%00011000
  34091  888b		       18		      .byte.b	%00011000
  34092  888c				  -	      if	(<*) > (<(*+7))
  34093  888c				  -	      repeat	($100-<*)
  34094  888c				  -	      .byte	0
  34095  888c				  -	      repend
  34096  888c					      endif
  34097  888c				   playerL0601_0
  34098  888c		       66		      .byte.b	%01100110
  34099  888d		       42		      .byte.b	%01000010
  34100  888e		       bd		      .byte.b	%10111101
  34101  888f		       7e		      .byte.b	%01111110
  34102  8890		       ff		      .byte.b	%11111111
  34103  8891		       18		      .byte.b	%00011000
  34104  8892		       18		      .byte.b	%00011000
  34105  8893		       18		      .byte.b	%00011000
  34106  8894				  -	      if	(<*) > (<(*+7))
  34107  8894				  -	      repeat	($100-<*)
  34108  8894				  -	      .byte	0
  34109  8894				  -	      repend
  34110  8894					      endif
  34111  8894				   playerL0603_0
  34112  8894		       42		      .byte.b	%01000010
  34113  8895		       c3		      .byte.b	%11000011
  34114  8896		       bd		      .byte.b	%10111101
  34115  8897		       7e		      .byte.b	%01111110
  34116  8898		       ff		      .byte.b	%11111111
  34117  8899		       18		      .byte.b	%00011000
  34118  889a		       18		      .byte.b	%00011000
  34119  889b		       18		      .byte.b	%00011000
  34120  889c				  -	      if	(<*) > (<(*+7))
  34121  889c				  -	      repeat	($100-<*)
  34122  889c				  -	      .byte	0
  34123  889c				  -	      repend
  34124  889c					      endif
  34125  889c				   playerL0605_0
  34126  889c		       e7		      .byte.b	%11100111
  34127  889d		       c3		      .byte.b	%11000011
  34128  889e		       bd		      .byte.b	%10111101
  34129  889f		       7e		      .byte.b	%01111110
  34130  88a0		       ff		      .byte.b	%11111111
  34131  88a1		       18		      .byte.b	%00011000
  34132  88a2		       18		      .byte.b	%00011000
  34133  88a3		       18		      .byte.b	%00011000
  34134  88a4				  -	      if	(<*) > (<(*+7))
  34135  88a4				  -	      repeat	($100-<*)
  34136  88a4				  -	      .byte	0
  34137  88a4				  -	      repend
  34138  88a4					      endif
  34139  88a4				   playerL0607_0
  34140  88a4		       18		      .byte.b	%00011000
  34141  88a5		       18		      .byte.b	%00011000
  34142  88a6		       18		      .byte.b	%00011000
  34143  88a7		       ff		      .byte.b	%11111111
  34144  88a8		       7e		      .byte.b	%01111110
  34145  88a9		       3c		      .byte.b	%00111100
  34146  88aa		       66		      .byte.b	%01100110
  34147  88ab		       5a		      .byte.b	%01011010
  34148  88ac				  -	      if	(<*) > (<(*+7))
  34149  88ac				  -	      repeat	($100-<*)
  34150  88ac				  -	      .byte	0
  34151  88ac				  -	      repend
  34152  88ac					      endif
  34153  88ac				   playerL0609_0
  34154  88ac		       18		      .byte.b	%00011000
  34155  88ad		       18		      .byte.b	%00011000
  34156  88ae		       18		      .byte.b	%00011000
  34157  88af		       ff		      .byte.b	%11111111
  34158  88b0		       7e		      .byte.b	%01111110
  34159  88b1		       bd		      .byte.b	%10111101
  34160  88b2		       42		      .byte.b	%01000010
  34161  88b3		       66		      .byte.b	%01100110
  34162  88b4				  -	      if	(<*) > (<(*+7))
  34163  88b4				  -	      repeat	($100-<*)
  34164  88b4				  -	      .byte	0
  34165  88b4				  -	      repend
  34166  88b4					      endif
  34167  88b4				   playerL0611_0
  34168  88b4		       18		      .byte.b	%00011000
  34169  88b5		       18		      .byte.b	%00011000
  34170  88b6		       18		      .byte.b	%00011000
  34171  88b7		       ff		      .byte.b	%11111111
  34172  88b8		       7e		      .byte.b	%01111110
  34173  88b9		       bd		      .byte.b	%10111101
  34174  88ba		       c3		      .byte.b	%11000011
  34175  88bb		       42		      .byte.b	%01000010
  34176  88bc				  -	      if	(<*) > (<(*+7))
  34177  88bc				  -	      repeat	($100-<*)
  34178  88bc				  -	      .byte	0
  34179  88bc				  -	      repend
  34180  88bc					      endif
  34181  88bc				   playerL0613_0
  34182  88bc		       18		      .byte.b	%00011000
  34183  88bd		       18		      .byte.b	%00011000
  34184  88be		       18		      .byte.b	%00011000
  34185  88bf		       ff		      .byte.b	%11111111
  34186  88c0		       7e		      .byte.b	%01111110
  34187  88c1		       bd		      .byte.b	%10111101
  34188  88c2		       c3		      .byte.b	%11000011
  34189  88c3		       e7		      .byte.b	%11100111
  34190  88c4				  -	      if	(<*) > (<(*+7))
  34191  88c4				  -	      repeat	($100-<*)
  34192  88c4				  -	      .byte	0
  34193  88c4				  -	      repend
  34194  88c4					      endif
  34195  88c4				   playerL0615_0
  34196  88c4		       10		      .byte.b	%00010000
  34197  88c5		       1b		      .byte.b	%00011011
  34198  88c6		       1e		      .byte.b	%00011110
  34199  88c7		       fd		      .byte.b	%11111101
  34200  88c8		       fd		      .byte.b	%11111101
  34201  88c9		       1e		      .byte.b	%00011110
  34202  88ca		       1b		      .byte.b	%00011011
  34203  88cb		       10		      .byte.b	%00010000
  34204  88cc				  -	      if	(<*) > (<(*+7))
  34205  88cc				  -	      repeat	($100-<*)
  34206  88cc				  -	      .byte	0
  34207  88cc				  -	      repend
  34208  88cc					      endif
  34209  88cc				   playerL0617_0
  34210  88cc		       14		      .byte.b	%00010100
  34211  88cd		       1b		      .byte.b	%00011011
  34212  88ce		       1d		      .byte.b	%00011101
  34213  88cf		       fc		      .byte.b	%11111100
  34214  88d0		       fc		      .byte.b	%11111100
  34215  88d1		       1d		      .byte.b	%00011101
  34216  88d2		       1b		      .byte.b	%00011011
  34217  88d3		       14		      .byte.b	%00010100
  34218  88d4				  -	      if	(<*) > (<(*+7))
  34219  88d4				  -	      repeat	($100-<*)
  34220  88d4				  -	      .byte	0
  34221  88d4				  -	      repend
  34222  88d4					      endif
  34223  88d4				   playerL0619_0
  34224  88d4		       16		      .byte.b	%00010110
  34225  88d5		       1b		      .byte.b	%00011011
  34226  88d6		       1c		      .byte.b	%00011100
  34227  88d7		       fc		      .byte.b	%11111100
  34228  88d8		       fc		      .byte.b	%11111100
  34229  88d9		       1c		      .byte.b	%00011100
  34230  88da		       1b		      .byte.b	%00011011
  34231  88db		       16		      .byte.b	%00010110
  34232  88dc				  -	      if	(<*) > (<(*+7))
  34233  88dc				  -	      repeat	($100-<*)
  34234  88dc				  -	      .byte	0
  34235  88dc				  -	      repend
  34236  88dc					      endif
  34237  88dc				   playerL0621_0
  34238  88dc		       17		      .byte.b	%00010111
  34239  88dd		       1b		      .byte.b	%00011011
  34240  88de		       1d		      .byte.b	%00011101
  34241  88df		       fc		      .byte.b	%11111100
  34242  88e0		       fc		      .byte.b	%11111100
  34243  88e1		       1d		      .byte.b	%00011101
  34244  88e2		       1b		      .byte.b	%00011011
  34245  88e3		       17		      .byte.b	%00010111
  34246  88e4				  -	      if	(<*) > (<(*+7))
  34247  88e4				  -	      repeat	($100-<*)
  34248  88e4				  -	      .byte	0
  34249  88e4				  -	      repend
  34250  88e4					      endif
  34251  88e4				   playerL0623_0
  34252  88e4		       08		      .byte.b	%00001000
  34253  88e5		       92		      .byte.b	%10010010
  34254  88e6		       f8		      .byte.b	%11111000
  34255  88e7		       7d		      .byte.b	%01111101
  34256  88e8		       3e		      .byte.b	%00111110
  34257  88e9		       7c		      .byte.b	%01111100
  34258  88ea		       ec		      .byte.b	%11101100
  34259  88eb		       c6		      .byte.b	%11000110
  34260  88ec				  -	      if	(<*) > (<(*+7))
  34261  88ec				  -	      repeat	($100-<*)
  34262  88ec				  -	      .byte	0
  34263  88ec				  -	      repend
  34264  88ec					      endif
  34265  88ec				   playerL0625_0
  34266  88ec		       0c		      .byte.b	%00001100
  34267  88ed		       d0		      .byte.b	%11010000
  34268  88ee		       f9		      .byte.b	%11111001
  34269  88ef		       7d		      .byte.b	%01111101
  34270  88f0		       3e		      .byte.b	%00111110
  34271  88f1		       7e		      .byte.b	%01111110
  34272  88f2		       ec		      .byte.b	%11101100
  34273  88f3		       c6		      .byte.b	%11000110
  34274  88f4				  -	      if	(<*) > (<(*+7))
  34275  88f4				  -	      repeat	($100-<*)
  34276  88f4				  -	      .byte	0
  34277  88f4				  -	      repend
  34278  88f4					      endif
  34279  88f4				   playerL0627_0
  34280  88f4		       28		      .byte.b	%00101000
  34281  88f5		       d0		      .byte.b	%11010000
  34282  88f6		       f8		      .byte.b	%11111000
  34283  88f7		       7d		      .byte.b	%01111101
  34284  88f8		       3e		      .byte.b	%00111110
  34285  88f9		       7f		      .byte.b	%01111111
  34286  88fa		       ec		      .byte.b	%11101100
  34287  88fb		       c6		      .byte.b	%11000110
  34288  88fc					      if	(<*) > (<(*+7))
  34289  88fc					      repeat	($100-<*)
  34290  88fc		       00		      .byte.b	0
  34289  88fc					      repend
  34290  88fd		       00		      .byte.b	0
  34289  88fd					      repend
  34290  88fe		       00		      .byte.b	0
  34289  88fe					      repend
  34290  88ff		       00		      .byte.b	0
  34291  8900					      repend
  34292  8900					      endif
  34293  8900				   playerL0629_0
  34294  8900		       3c		      .byte.b	%00111100
  34295  8901		       f0		      .byte.b	%11110000
  34296  8902		       f9		      .byte.b	%11111001
  34297  8903		       7d		      .byte.b	%01111101
  34298  8904		       3f		      .byte.b	%00111111
  34299  8905		       7f		      .byte.b	%01111111
  34300  8906		       ec		      .byte.b	%11101100
  34301  8907		       c6		      .byte.b	%11000110
  34302  8908				  -	      if	(<*) > (<(*+7))
  34303  8908				  -	      repeat	($100-<*)
  34304  8908				  -	      .byte	0
  34305  8908				  -	      repend
  34306  8908					      endif
  34307  8908				   playerL0631_0
  34308  8908		       c6		      .byte.b	%11000110
  34309  8909		       ec		      .byte.b	%11101100
  34310  890a		       7c		      .byte.b	%01111100
  34311  890b		       3e		      .byte.b	%00111110
  34312  890c		       7d		      .byte.b	%01111101
  34313  890d		       f8		      .byte.b	%11111000
  34314  890e		       92		      .byte.b	%10010010
  34315  890f		       08		      .byte.b	%00001000
  34316  8910				  -	      if	(<*) > (<(*+7))
  34317  8910				  -	      repeat	($100-<*)
  34318  8910				  -	      .byte	0
  34319  8910				  -	      repend
  34320  8910					      endif
  34321  8910				   playerL0633_0
  34322  8910		       c6		      .byte.b	%11000110
  34323  8911		       ec		      .byte.b	%11101100
  34324  8912		       7e		      .byte.b	%01111110
  34325  8913		       3e		      .byte.b	%00111110
  34326  8914		       7d		      .byte.b	%01111101
  34327  8915		       f9		      .byte.b	%11111001
  34328  8916		       d0		      .byte.b	%11010000
  34329  8917		       0c		      .byte.b	%00001100
  34330  8918				  -	      if	(<*) > (<(*+7))
  34331  8918				  -	      repeat	($100-<*)
  34332  8918				  -	      .byte	0
  34333  8918				  -	      repend
  34334  8918					      endif
  34335  8918				   playerL0635_0
  34336  8918		       c6		      .byte.b	%11000110
  34337  8919		       ec		      .byte.b	%11101100
  34338  891a		       7f		      .byte.b	%01111111
  34339  891b		       3e		      .byte.b	%00111110
  34340  891c		       7d		      .byte.b	%01111101
  34341  891d		       f8		      .byte.b	%11111000
  34342  891e		       d0		      .byte.b	%11010000
  34343  891f		       28		      .byte.b	%00101000
  34344  8920				  -	      if	(<*) > (<(*+7))
  34345  8920				  -	      repeat	($100-<*)
  34346  8920				  -	      .byte	0
  34347  8920				  -	      repend
  34348  8920					      endif
  34349  8920				   playerL0637_0
  34350  8920		       c6		      .byte.b	%11000110
  34351  8921		       ec		      .byte.b	%11101100
  34352  8922		       7f		      .byte.b	%01111111
  34353  8923		       3f		      .byte.b	%00111111
  34354  8924		       7d		      .byte.b	%01111101
  34355  8925		       f9		      .byte.b	%11111001
  34356  8926		       f0		      .byte.b	%11110000
  34357  8927		       3c		      .byte.b	%00111100
  34358  8928				  -	      if	(<*) > (<(*+7))
  34359  8928				  -	      repeat	($100-<*)
  34360  8928				  -	      .byte	0
  34361  8928				  -	      repend
  34362  8928					      endif
  34363  8928				   playerL0639_1
  34364  8928		       ff		      .byte.b	%11111111
  34365  8929		       ff		      .byte.b	%11111111
  34366  892a		       3c		      .byte.b	%00111100
  34367  892b		       7e		      .byte.b	%01111110
  34368  892c		       ff		      .byte.b	%11111111
  34369  892d		       bd		      .byte.b	%10111101
  34370  892e		       a5		      .byte.b	%10100101
  34371  892f		       a5		      .byte.b	%10100101
  34372  8930				  -	      if	(<*) > (<(*+7))
  34373  8930				  -	      repeat	($100-<*)
  34374  8930				  -	      .byte	0
  34375  8930				  -	      repend
  34376  8930					      endif
  34377  8930				   playerL0642_1
  34378  8930		       ff		      .byte.b	%11111111
  34379  8931		       ff		      .byte.b	%11111111
  34380  8932		       3c		      .byte.b	%00111100
  34381  8933		       7e		      .byte.b	%01111110
  34382  8934		       ff		      .byte.b	%11111111
  34383  8935		       bd		      .byte.b	%10111101
  34384  8936		       a5		      .byte.b	%10100101
  34385  8937		       55		      .byte.b	%01010101
  34386  8938				  -	      if	(<*) > (<(*+7))
  34387  8938				  -	      repeat	($100-<*)
  34388  8938				  -	      .byte	0
  34389  8938				  -	      repend
  34390  8938					      endif
  34391  8938				   playerL0644_1
  34392  8938		       ff		      .byte.b	%11111111
  34393  8939		       ff		      .byte.b	%11111111
  34394  893a		       3c		      .byte.b	%00111100
  34395  893b		       7e		      .byte.b	%01111110
  34396  893c		       ff		      .byte.b	%11111111
  34397  893d		       bd		      .byte.b	%10111101
  34398  893e		       55		      .byte.b	%01010101
  34399  893f		       2d		      .byte.b	%00101101
  34400  8940				  -	      if	(<*) > (<(*+5))
  34401  8940				  -	      repeat	($100-<*)
  34402  8940				  -	      .byte	0
  34403  8940				  -	      repend
  34404  8940					      endif
  34405  8940				   playerL0685_1
  34406  8940		       f0		      .byte.b	%11110000
  34407  8941		       f0		      .byte.b	%11110000
  34408  8942		       60		      .byte.b	%01100000
  34409  8943		       60		      .byte.b	%01100000
  34410  8944		       f0		      .byte.b	%11110000
  34411  8945		       f0		      .byte.b	%11110000
  34412  8946				  -	      if	(<*) > (<(*+5))
  34413  8946				  -	      repeat	($100-<*)
  34414  8946				  -	      .byte	0
  34415  8946				  -	      repend
  34416  8946					      endif
  34417  8946				   playercolorL0697_1
  34418  8946		       aa		      .byte.b	$AA
  34419  8947		       ae		      .byte.b	$AE
  34420  8948		       aa		      .byte.b	$AA
  34421  8949		       a6		      .byte.b	$A6
  34422  894a		       aa		      .byte.b	$AA
  34423  894b		       ae		      .byte.b	$AE
  34424  894c				  -	      if	(<*) > (<(*+5))
  34425  894c				  -	      repeat	($100-<*)
  34426  894c				  -	      .byte	0
  34427  894c				  -	      repend
  34428  894c					      endif
  34429  894c				   playercolorL0714_1
  34430  894c		       fa		      .byte.b	$FA
  34431  894d		       fe		      .byte.b	$FE
  34432  894e		       fa		      .byte.b	$FA
  34433  894f		       f6		      .byte.b	$F6
  34434  8950		       fa		      .byte.b	$FA
  34435  8951		       fe		      .byte.b	$FE
  34436  8952				  -	      if	(<*) > (<(*+5))
  34437  8952				  -	      repeat	($100-<*)
  34438  8952				  -	      .byte	0
  34439  8952				  -	      repend
  34440  8952					      endif
  34441  8952				   playercolorL0730_1
  34442  8952		       4a		      .byte.b	$4A
  34443  8953		       4e		      .byte.b	$4E
  34444  8954		       4a		      .byte.b	$4A
  34445  8955		       46		      .byte.b	$46
  34446  8956		       4a		      .byte.b	$4A
  34447  8957		       4e		      .byte.b	$4E
  34448  8958				  -	      if	(<*) > (<(*+7))
  34449  8958				  -	      repeat	($100-<*)
  34450  8958				  -	      .byte	0
  34451  8958				  -	      repend
  34452  8958					      endif
  34453  8958				   playercolorL0797_1
  34454  8958		       4c		      .byte.b	$4C
  34455  8959		       4e		      .byte.b	$4E
  34456  895a		       48		      .byte.b	$48
  34457  895b		       4e		      .byte.b	$4E
  34458  895c		       4c		      .byte.b	$4C
  34459  895d		       4a		      .byte.b	$4A
  34460  895e		       48		      .byte.b	$48
  34461  895f		       46		      .byte.b	$46
  34462  8960				  -	      if	(<*) > (<(*+5))
  34463  8960				  -	      repeat	($100-<*)
  34464  8960				  -	      .byte	0
  34465  8960				  -	      repend
  34466  8960					      endif
  34467  8960				   playercolorL0819_1
  34468  8960		       36		      .byte.b	$36
  34469  8961		       3a		      .byte.b	$3A
  34470  8962		       36		      .byte.b	$36
  34471  8963		       32		      .byte.b	$32
  34472  8964		       36		      .byte.b	$36
  34473  8965		       3a		      .byte.b	$3A
  34474  8966				  -	      if	(<*) > (<(*+5))
  34475  8966				  -	      repeat	($100-<*)
  34476  8966				  -	      .byte	0
  34477  8966				  -	      repend
  34478  8966					      endif
  34479  8966				   playerL0918_1
  34480  8966		       d0		      .byte.b	%11010000
  34481  8967		       f0		      .byte.b	%11110000
  34482  8968		       60		      .byte.b	%01100000
  34483  8969		       60		      .byte.b	%01100000
  34484  896a		       f0		      .byte.b	%11110000
  34485  896b		       b0		      .byte.b	%10110000
  34486  896c				  -	      if	(<*) > (<(*+5))
  34487  896c				  -	      repeat	($100-<*)
  34488  896c				  -	      .byte	0
  34489  896c				  -	      repend
  34490  896c					      endif
  34491  896c				   playerL0921_1
  34492  896c		       b0		      .byte.b	%10110000
  34493  896d		       f0		      .byte.b	%11110000
  34494  896e		       60		      .byte.b	%01100000
  34495  896f		       60		      .byte.b	%01100000
  34496  8970		       f0		      .byte.b	%11110000
  34497  8971		       70		      .byte.b	%01110000
  34498  8972				  -	      if	(<*) > (<(*+5))
  34499  8972				  -	      repeat	($100-<*)
  34500  8972				  -	      .byte	0
  34501  8972				  -	      repend
  34502  8972					      endif
  34503  8972				   playerL0924_1
  34504  8972		       70		      .byte.b	%01110000
  34505  8973		       f0		      .byte.b	%11110000
  34506  8974		       60		      .byte.b	%01100000
  34507  8975		       60		      .byte.b	%01100000
  34508  8976		       f0		      .byte.b	%11110000
  34509  8977		       f0		      .byte.b	%11110000
  34510  8978				  -	      if	(<*) > (<(*+5))
  34511  8978				  -	      repeat	($100-<*)
  34512  8978				  -	      .byte	0
  34513  8978				  -	      repend
  34514  8978					      endif
  34515  8978				   playerL0927_1
  34516  8978		       f0		      .byte.b	%11110000
  34517  8979		       f0		      .byte.b	%11110000
  34518  897a		       60		      .byte.b	%01100000
  34519  897b		       60		      .byte.b	%01100000
  34520  897c		       f0		      .byte.b	%11110000
  34521  897d		       f0		      .byte.b	%11110000
  34522  897e				  -	      if	(<*) > (<(*+5))
  34523  897e				  -	      repeat	($100-<*)
  34524  897e				  -	      .byte	0
  34525  897e				  -	      repend
  34526  897e					      endif
  34527  897e				   playerL0930_1
  34528  897e		       f0		      .byte.b	%11110000
  34529  897f		       f0		      .byte.b	%11110000
  34530  8980		       60		      .byte.b	%01100000
  34531  8981		       60		      .byte.b	%01100000
  34532  8982		       f0		      .byte.b	%11110000
  34533  8983		       e0		      .byte.b	%11100000
  34534  8984				  -	      if	(<*) > (<(*+5))
  34535  8984				  -	      repeat	($100-<*)
  34536  8984				  -	      .byte	0
  34537  8984				  -	      repend
  34538  8984					      endif
  34539  8984				   playerL0933_1
  34540  8984		       e0		      .byte.b	%11100000
  34541  8985		       f0		      .byte.b	%11110000
  34542  8986		       60		      .byte.b	%01100000
  34543  8987		       60		      .byte.b	%01100000
  34544  8988		       f0		      .byte.b	%11110000
  34545  8989		       d0		      .byte.b	%11010000
  34546  898a				  -	      if	(<*) > (<(*+7))
  34547  898a				  -	      repeat	($100-<*)
  34548  898a				  -	      .byte	0
  34549  898a				  -	      repend
  34550  898a					      endif
  34551  898a				   playercolorL0935_1
  34552  898a		       78		      .byte.b	$78
  34553  898b		       7e		      .byte.b	$7E
  34554  898c		       66		      .byte.b	$66
  34555  898d		       7e		      .byte.b	$7E
  34556  898e		       7c		      .byte.b	$7C
  34557  898f		       7a		      .byte.b	$7A
  34558  8990		       8a		      .byte.b	$8A
  34559  8991		       78		      .byte.b	$78
  34560  8992				  -	      if	(<*) > (<(*+7))
  34561  8992				  -	      repeat	($100-<*)
  34562  8992				  -	      .byte	0
  34563  8992				  -	      repend
  34564  8992					      endif
  34565  8992				   playercolorL0937_1
  34566  8992		       78		      .byte.b	$78
  34567  8993		       1c		      .byte.b	$1C
  34568  8994		       66		      .byte.b	$66
  34569  8995		       1c		      .byte.b	$1C
  34570  8996		       1a		      .byte.b	$1A
  34571  8997		       18		      .byte.b	$18
  34572  8998		       7c		      .byte.b	$7C
  34573  8999		       78		      .byte.b	$78
  34574  899a				  -	      if	(<*) > (<(*+7))
  34575  899a				  -	      repeat	($100-<*)
  34576  899a				  -	      .byte	0
  34577  899a				  -	      repend
  34578  899a					      endif
  34579  899a				   playercolorL0939_1
  34580  899a		       78		      .byte.b	$78
  34581  899b		       2e		      .byte.b	$2E
  34582  899c		       66		      .byte.b	$66
  34583  899d		       dc		      .byte.b	$DC
  34584  899e		       d8		      .byte.b	$D8
  34585  899f		       d6		      .byte.b	$D6
  34586  89a0		       da		      .byte.b	$DA
  34587  89a1		       d6		      .byte.b	$D6
  34588  89a2				  -	      if	(<*) > (<(*+7))
  34589  89a2				  -	      repeat	($100-<*)
  34590  89a2				  -	      .byte	0
  34591  89a2				  -	      repend
  34592  89a2					      endif
  34593  89a2				   playercolorL0941_1
  34594  89a2		       78		      .byte.b	$78
  34595  89a3		       1c		      .byte.b	$1C
  34596  89a4		       66		      .byte.b	$66
  34597  89a5		       7e		      .byte.b	$7E
  34598  89a6		       7c		      .byte.b	$7C
  34599  89a7		       7a		      .byte.b	$7A
  34600  89a8		       ca		      .byte.b	$CA
  34601  89a9		       a6		      .byte.b	$A6
  34602  89aa				  -	      if	(<*) > (<(*+7))
  34603  89aa				  -	      repeat	($100-<*)
  34604  89aa				  -	      .byte	0
  34605  89aa				  -	      repend
  34606  89aa					      endif
  34607  89aa				   playercolorL0943_1
  34608  89aa		       78		      .byte.b	$78
  34609  89ab		       1c		      .byte.b	$1C
  34610  89ac		       66		      .byte.b	$66
  34611  89ad		       ae		      .byte.b	$AE
  34612  89ae		       aa		      .byte.b	$AA
  34613  89af		       a8		      .byte.b	$A8
  34614  89b0		       aa		      .byte.b	$AA
  34615  89b1		       a6		      .byte.b	$A6
  34616  89b2				  -	      if	(<*) > (<(*+7))
  34617  89b2				  -	      repeat	($100-<*)
  34618  89b2				  -	      .byte	0
  34619  89b2				  -	      repend
  34620  89b2					      endif
  34621  89b2				   playercolorL0945_1
  34622  89b2		       78		      .byte.b	$78
  34623  89b3		       0c		      .byte.b	$0C
  34624  89b4		       66		      .byte.b	$66
  34625  89b5		       0c		      .byte.b	$0C
  34626  89b6		       da		      .byte.b	$DA
  34627  89b7		       d8		      .byte.b	$D8
  34628  89b8		       da		      .byte.b	$DA
  34629  89b9		       d6		      .byte.b	$D6
  34630  89ba				  -	      if	(<*) > (<(*+7))
  34631  89ba				  -	      repeat	($100-<*)
  34632  89ba				  -	      .byte	0
  34633  89ba				  -	      repend
  34634  89ba					      endif
  34635  89ba				   playercolorL0947_1
  34636  89ba		       78		      .byte.b	$78
  34637  89bb		       9e		      .byte.b	$9E
  34638  89bc		       66		      .byte.b	$66
  34639  89bd		       7e		      .byte.b	$7E
  34640  89be		       7c		      .byte.b	$7C
  34641  89bf		       7a		      .byte.b	$7A
  34642  89c0		       9a		      .byte.b	$9A
  34643  89c1		       98		      .byte.b	$98
  34644  89c2				  -	      if	(<*) > (<(*+7))
  34645  89c2				  -	      repeat	($100-<*)
  34646  89c2				  -	      .byte	0
  34647  89c2				  -	      repend
  34648  89c2					      endif
  34649  89c2				   playercolorL0949_1
  34650  89c2		       78		      .byte.b	$78
  34651  89c3		       7e		      .byte.b	$7E
  34652  89c4		       66		      .byte.b	$66
  34653  89c5		       7e		      .byte.b	$7E
  34654  89c6		       7a		      .byte.b	$7A
  34655  89c7		       78		      .byte.b	$78
  34656  89c8		       9a		      .byte.b	$9A
  34657  89c9		       98		      .byte.b	$98
  34658  89ca				  -	      if	(<*) > (<(*+7))
  34659  89ca				  -	      repeat	($100-<*)
  34660  89ca				  -	      .byte	0
  34661  89ca				  -	      repend
  34662  89ca					      endif
  34663  89ca				   playercolorL0951_1
  34664  89ca		       78		      .byte.b	$78
  34665  89cb		       ae		      .byte.b	$AE
  34666  89cc		       66		      .byte.b	$66
  34667  89cd		       ac		      .byte.b	$AC
  34668  89ce		       aa		      .byte.b	$AA
  34669  89cf		       a8		      .byte.b	$A8
  34670  89d0		       78		      .byte.b	$78
  34671  89d1		       a6		      .byte.b	$A6
  34672  89d2				  -	      if	(<*) > (<(*+7))
  34673  89d2				  -	      repeat	($100-<*)
  34674  89d2				  -	      .byte	0
  34675  89d2				  -	      repend
  34676  89d2					      endif
  34677  89d2				   playercolorL0953_1
  34678  89d2		       78		      .byte.b	$78
  34679  89d3		       cc		      .byte.b	$CC
  34680  89d4		       66		      .byte.b	$66
  34681  89d5		       bc		      .byte.b	$BC
  34682  89d6		       b8		      .byte.b	$B8
  34683  89d7		       b6		      .byte.b	$B6
  34684  89d8		       ba		      .byte.b	$BA
  34685  89d9		       d6		      .byte.b	$D6
  34686  89da				  -	      if	(<*) > (<(*+7))
  34687  89da				  -	      repeat	($100-<*)
  34688  89da				  -	      .byte	0
  34689  89da				  -	      repend
  34690  89da					      endif
  34691  89da				   playercolorL0955_1
  34692  89da		       78		      .byte.b	$78
  34693  89db		       de		      .byte.b	$DE
  34694  89dc		       66		      .byte.b	$66
  34695  89dd		       da		      .byte.b	$DA
  34696  89de		       d8		      .byte.b	$D8
  34697  89df		       d6		      .byte.b	$D6
  34698  89e0		       78		      .byte.b	$78
  34699  89e1		       d6		      .byte.b	$D6
  34700  89e2				  -	      if	(<*) > (<(*+7))
  34701  89e2				  -	      repeat	($100-<*)
  34702  89e2				  -	      .byte	0
  34703  89e2				  -	      repend
  34704  89e2					      endif
  34705  89e2				   playercolorL0957_1
  34706  89e2		       78		      .byte.b	$78
  34707  89e3		       1a		      .byte.b	$1A
  34708  89e4		       66		      .byte.b	$66
  34709  89e5		       fa		      .byte.b	$FA
  34710  89e6		       f8		      .byte.b	$F8
  34711  89e7		       f6		      .byte.b	$F6
  34712  89e8		       16		      .byte.b	$16
  34713  89e9		       d6		      .byte.b	$D6
  34714  89ea				  -	      if	(<*) > (<(*+7))
  34715  89ea				  -	      repeat	($100-<*)
  34716  89ea				  -	      .byte	0
  34717  89ea				  -	      repend
  34718  89ea					      endif
  34719  89ea				   playercolorL0959_1
  34720  89ea		       78		      .byte.b	$78
  34721  89eb		       7e		      .byte.b	$7E
  34722  89ec		       66		      .byte.b	$66
  34723  89ed		       1c		      .byte.b	$1C
  34724  89ee		       18		      .byte.b	$18
  34725  89ef		       16		      .byte.b	$16
  34726  89f0		       d8		      .byte.b	$D8
  34727  89f1		       f8		      .byte.b	$F8
  34728  89f2				  -	      if	(<*) > (<(*+7))
  34729  89f2				  -	      repeat	($100-<*)
  34730  89f2				  -	      .byte	0
  34731  89f2				  -	      repend
  34732  89f2					      endif
  34733  89f2				   playercolorL0961_1
  34734  89f2		       78		      .byte.b	$78
  34735  89f3		       1c		      .byte.b	$1C
  34736  89f4		       66		      .byte.b	$66
  34737  89f5		       1a		      .byte.b	$1A
  34738  89f6		       dc		      .byte.b	$DC
  34739  89f7		       d8		      .byte.b	$D8
  34740  89f8		       18		      .byte.b	$18
  34741  89f9		       68		      .byte.b	$68
  34742  89fa					      if	(<*) > (<(*+7))
  34743  89fa					      repeat	($100-<*)
  34744  89fa		       00		      .byte.b	0
  34743  89fa					      repend
  34744  89fb		       00		      .byte.b	0
  34743  89fb					      repend
  34744  89fc		       00		      .byte.b	0
  34743  89fc					      repend
  34744  89fd		       00		      .byte.b	0
  34743  89fd					      repend
  34744  89fe		       00		      .byte.b	0
  34743  89fe					      repend
  34744  89ff		       00		      .byte.b	0
  34745  8a00					      repend
  34746  8a00					      endif
  34747  8a00				   playercolorL0963_1
  34748  8a00		       78		      .byte.b	$78
  34749  8a01		       ac		      .byte.b	$AC
  34750  8a02		       66		      .byte.b	$66
  34751  8a03		       1c		      .byte.b	$1C
  34752  8a04		       18		      .byte.b	$18
  34753  8a05		       16		      .byte.b	$16
  34754  8a06		       aa		      .byte.b	$AA
  34755  8a07		       a6		      .byte.b	$A6
  34756  8a08				  -	      if	(<*) > (<(*+7))
  34757  8a08				  -	      repeat	($100-<*)
  34758  8a08				  -	      .byte	0
  34759  8a08				  -	      repend
  34760  8a08					      endif
  34761  8a08				   playercolorL0965_1
  34762  8a08		       78		      .byte.b	$78
  34763  8a09		       0a		      .byte.b	$0A
  34764  8a0a		       66		      .byte.b	$66
  34765  8a0b		       0a		      .byte.b	$0A
  34766  8a0c		       08		      .byte.b	$08
  34767  8a0d		       06		      .byte.b	$06
  34768  8a0e		       da		      .byte.b	$DA
  34769  8a0f		       d6		      .byte.b	$D6
  34770  8a10				  -	      if	(<*) > (<(*+7))
  34771  8a10				  -	      repeat	($100-<*)
  34772  8a10				  -	      .byte	0
  34773  8a10				  -	      repend
  34774  8a10					      endif
  34775  8a10				   playercolorL0967_1
  34776  8a10		       78		      .byte.b	$78
  34777  8a11		       1c		      .byte.b	$1C
  34778  8a12		       66		      .byte.b	$66
  34779  8a13		       1c		      .byte.b	$1C
  34780  8a14		       1a		      .byte.b	$1A
  34781  8a15		       18		      .byte.b	$18
  34782  8a16		       ba		      .byte.b	$BA
  34783  8a17		       d6		      .byte.b	$D6
  34784  8a18				  -	      if	(<*) > (<(*+7))
  34785  8a18				  -	      repeat	($100-<*)
  34786  8a18				  -	      .byte	0
  34787  8a18				  -	      repend
  34788  8a18					      endif
  34789  8a18				   playercolorL0969_1
  34790  8a18		       78		      .byte.b	$78
  34791  8a19		       cc		      .byte.b	$CC
  34792  8a1a		       66		      .byte.b	$66
  34793  8a1b		       0a		      .byte.b	$0A
  34794  8a1c		       08		      .byte.b	$08
  34795  8a1d		       06		      .byte.b	$06
  34796  8a1e		       9a		      .byte.b	$9A
  34797  8a1f		       98		      .byte.b	$98
  34798  8a20				  -	      if	(<*) > (<(*+7))
  34799  8a20				  -	      repeat	($100-<*)
  34800  8a20				  -	      .byte	0
  34801  8a20				  -	      repend
  34802  8a20					      endif
  34803  8a20				   playercolorL0971_1
  34804  8a20		       78		      .byte.b	$78
  34805  8a21		       cc		      .byte.b	$CC
  34806  8a22		       66		      .byte.b	$66
  34807  8a23		       bc		      .byte.b	$BC
  34808  8a24		       b8		      .byte.b	$B8
  34809  8a25		       b6		      .byte.b	$B6
  34810  8a26		       18		      .byte.b	$18
  34811  8a27		       68		      .byte.b	$68
  34812  8a28				  -	      if	(<*) > (<(*+7))
  34813  8a28				  -	      repeat	($100-<*)
  34814  8a28				  -	      .byte	0
  34815  8a28				  -	      repend
  34816  8a28					      endif
  34817  8a28				   playercolorL0973_1
  34818  8a28		       78		      .byte.b	$78
  34819  8a29		       de		      .byte.b	$DE
  34820  8a2a		       66		      .byte.b	$66
  34821  8a2b		       fa		      .byte.b	$FA
  34822  8a2c		       f8		      .byte.b	$F8
  34823  8a2d		       f6		      .byte.b	$F6
  34824  8a2e		       aa		      .byte.b	$AA
  34825  8a2f		       a6		      .byte.b	$A6
  34826  8a30				  -	      if	(<*) > (<(*+7))
  34827  8a30				  -	      repeat	($100-<*)
  34828  8a30				  -	      .byte	0
  34829  8a30				  -	      repend
  34830  8a30					      endif
  34831  8a30				   playercolorL0975_1
  34832  8a30		       78		      .byte.b	$78
  34833  8a31		       0a		      .byte.b	$0A
  34834  8a32		       66		      .byte.b	$66
  34835  8a33		       7e		      .byte.b	$7E
  34836  8a34		       7c		      .byte.b	$7C
  34837  8a35		       7a		      .byte.b	$7A
  34838  8a36		       9a		      .byte.b	$9A
  34839  8a37		       98		      .byte.b	$98
  34840  8a38				  -	      if	(<*) > (<(*+7))
  34841  8a38				  -	      repeat	($100-<*)
  34842  8a38				  -	      .byte	0
  34843  8a38				  -	      repend
  34844  8a38					      endif
  34845  8a38				   playercolorL0977_1
  34846  8a38		       78		      .byte.b	$78
  34847  8a39		       0a		      .byte.b	$0A
  34848  8a3a		       66		      .byte.b	$66
  34849  8a3b		       0a		      .byte.b	$0A
  34850  8a3c		       08		      .byte.b	$08
  34851  8a3d		       06		      .byte.b	$06
  34852  8a3e		       7c		      .byte.b	$7C
  34853  8a3f		       78		      .byte.b	$78
  34854  8a40				  -	      if	(<*) > (<(*+7))
  34855  8a40				  -	      repeat	($100-<*)
  34856  8a40				  -	      .byte	0
  34857  8a40				  -	      repend
  34858  8a40					      endif
  34859  8a40				   playercolorL0979_1
  34860  8a40		       78		      .byte.b	$78
  34861  8a41		       1c		      .byte.b	$1C
  34862  8a42		       66		      .byte.b	$66
  34863  8a43		       1c		      .byte.b	$1C
  34864  8a44		       1a		      .byte.b	$1A
  34865  8a45		       18		      .byte.b	$18
  34866  8a46		       78		      .byte.b	$78
  34867  8a47		       a6		      .byte.b	$A6
  34868  8a48				  -	      if	(<*) > (<(*+7))
  34869  8a48				  -	      repeat	($100-<*)
  34870  8a48				  -	      .byte	0
  34871  8a48				  -	      repend
  34872  8a48					      endif
  34873  8a48				   playercolorL0981_1
  34874  8a48		       78		      .byte.b	$78
  34875  8a49		       ae		      .byte.b	$AE
  34876  8a4a		       66		      .byte.b	$66
  34877  8a4b		       dc		      .byte.b	$DC
  34878  8a4c		       d8		      .byte.b	$D8
  34879  8a4d		       d6		      .byte.b	$D6
  34880  8a4e		       da		      .byte.b	$DA
  34881  8a4f		       d6		      .byte.b	$D6
  34882  8a50				  -	      if	(<*) > (<(*+7))
  34883  8a50				  -	      repeat	($100-<*)
  34884  8a50				  -	      .byte	0
  34885  8a50				  -	      repend
  34886  8a50					      endif
  34887  8a50				   playercolorL0983_1
  34888  8a50		       78		      .byte.b	$78
  34889  8a51		       7e		      .byte.b	$7E
  34890  8a52		       66		      .byte.b	$66
  34891  8a53		       ac		      .byte.b	$AC
  34892  8a54		       aa		      .byte.b	$AA
  34893  8a55		       a8		      .byte.b	$A8
  34894  8a56		       78		      .byte.b	$78
  34895  8a57		       a6		      .byte.b	$A6
  34896  8a58				  -	      if	(<*) > (<(*+7))
  34897  8a58				  -	      repeat	($100-<*)
  34898  8a58				  -	      .byte	0
  34899  8a58				  -	      repend
  34900  8a58					      endif
  34901  8a58				   playercolorL0985_1
  34902  8a58		       78		      .byte.b	$78
  34903  8a59		       7e		      .byte.b	$7E
  34904  8a5a		       66		      .byte.b	$66
  34905  8a5b		       7e		      .byte.b	$7E
  34906  8a5c		       7c		      .byte.b	$7C
  34907  8a5d		       7a		      .byte.b	$7A
  34908  8a5e		       08		      .byte.b	$08
  34909  8a5f		       68		      .byte.b	$68
  34910  8a60				  -	      if	(<*) > (<(*+7))
  34911  8a60				  -	      repeat	($100-<*)
  34912  8a60				  -	      .byte	0
  34913  8a60				  -	      repend
  34914  8a60					      endif
  34915  8a60				   playercolorL0987_1
  34916  8a60		       78		      .byte.b	$78
  34917  8a61		       1a		      .byte.b	$1A
  34918  8a62		       66		      .byte.b	$66
  34919  8a63		       0a		      .byte.b	$0A
  34920  8a64		       08		      .byte.b	$08
  34921  8a65		       06		      .byte.b	$06
  34922  8a66		       d8		      .byte.b	$D8
  34923  8a67		       f8		      .byte.b	$F8
  34924  8a68				  -	      if	(<*) > (<(*+7))
  34925  8a68				  -	      repeat	($100-<*)
  34926  8a68				  -	      .byte	0
  34927  8a68				  -	      repend
  34928  8a68					      endif
  34929  8a68				   playercolorL0989_1
  34930  8a68		       78		      .byte.b	$78
  34931  8a69		       1a		      .byte.b	$1A
  34932  8a6a		       66		      .byte.b	$66
  34933  8a6b		       7e		      .byte.b	$7E
  34934  8a6c		       7c		      .byte.b	$7C
  34935  8a6d		       7a		      .byte.b	$7A
  34936  8a6e		       8a		      .byte.b	$8A
  34937  8a6f		       78		      .byte.b	$78
  34938  8a70				  -	      if	(<*) > (<(*+7))
  34939  8a70				  -	      repeat	($100-<*)
  34940  8a70				  -	      .byte	0
  34941  8a70				  -	      repend
  34942  8a70					      endif
  34943  8a70				   playercolorL0991_1
  34944  8a70		       78		      .byte.b	$78
  34945  8a71		       0a		      .byte.b	$0A
  34946  8a72		       66		      .byte.b	$66
  34947  8a73		       7e		      .byte.b	$7E
  34948  8a74		       7a		      .byte.b	$7A
  34949  8a75		       78		      .byte.b	$78
  34950  8a76		       18		      .byte.b	$18
  34951  8a77		       68		      .byte.b	$68
  34952  8a78				  -	      if	(<*) > (<(*+7))
  34953  8a78				  -	      repeat	($100-<*)
  34954  8a78				  -	      .byte	0
  34955  8a78				  -	      repend
  34956  8a78					      endif
  34957  8a78				   playercolorL0993_1
  34958  8a78		       78		      .byte.b	$78
  34959  8a79		       ac		      .byte.b	$AC
  34960  8a7a		       66		      .byte.b	$66
  34961  8a7b		       fa		      .byte.b	$FA
  34962  8a7c		       f8		      .byte.b	$F8
  34963  8a7d		       f6		      .byte.b	$F6
  34964  8a7e		       16		      .byte.b	$16
  34965  8a7f		       d6		      .byte.b	$D6
  34966  8a80				  -	      if	(<*) > (<(*+7))
  34967  8a80				  -	      repeat	($100-<*)
  34968  8a80				  -	      .byte	0
  34969  8a80				  -	      repend
  34970  8a80					      endif
  34971  8a80				   playercolorL0995_1
  34972  8a80		       78		      .byte.b	$78
  34973  8a81		       ac		      .byte.b	$AC
  34974  8a82		       66		      .byte.b	$66
  34975  8a83		       0a		      .byte.b	$0A
  34976  8a84		       08		      .byte.b	$08
  34977  8a85		       06		      .byte.b	$06
  34978  8a86		       16		      .byte.b	$16
  34979  8a87		       d6		      .byte.b	$D6
  34980  8a88				  -	      if	(<*) > (<(*+7))
  34981  8a88				  -	      repeat	($100-<*)
  34982  8a88				  -	      .byte	0
  34983  8a88				  -	      repend
  34984  8a88					      endif
  34985  8a88				   playercolorL0997_1
  34986  8a88		       78		      .byte.b	$78
  34987  8a89		       0a		      .byte.b	$0A
  34988  8a8a		       66		      .byte.b	$66
  34989  8a8b		       ac		      .byte.b	$AC
  34990  8a8c		       aa		      .byte.b	$AA
  34991  8a8d		       a8		      .byte.b	$A8
  34992  8a8e		       78		      .byte.b	$78
  34993  8a8f		       a6		      .byte.b	$A6
  34994  8a90				  -	      ifconst	pfres
  34995  8a90				  -	      if	(<*) > (254-pfres*pfwidth)
  34996  8a90				  -	      align	256
  34997  8a90				  -	      endif
  34998  8a90				  -	      if	(<*) < (136-pfres*pfwidth)
  34999  8a90				  -	      repeat	((136-pfres*pfwidth)-(<*))
  35000  8a90				  -	      .byte	0
  35001  8a90				  -	      repend
  35002  8a90				  -	      endif
  35003  8a90					      else
  35004  8a90				  -	      if	(<*) > 206
  35005  8a90				  -	      align	256
  35006  8a90					      endif
  35007  8a90				  -	      if	(<*) < 88
  35008  8a90				  -	      repeat	(88-(<*))
  35009  8a90				  -	      .byte	0
  35010  8a90				  -	      repend
  35011  8a90					      endif
  35012  8a90					      endif
  35013  8a90				   pfcolorlabel1109
  35014  8a90		       cc cc ae ae	      .byte.b	$CC, $CC, $AE, $AE
  35015  8a94		       cc cc cc ae	      .byte.b	$CC, $CC, $CC, $AE
  35016  8a98		       ca ca ca ca	      .byte.b	$CA, $CA, $CA, $CA
  35017  8a9c		       ca ca ca ca	      .byte.b	$CA, $CA, $CA, $CA
  35018  8aa0		       c8 c8 c8 c8	      .byte.b	$C8, $C8, $C8, $C8
  35019  8aa4		       c8 c8 c8 c8	      .byte.b	$C8, $C8, $C8, $C8
  35020  8aa8		       c6 c6 c6 c6	      .byte.b	$C6, $C6, $C6, $C6
  35021  8aac		       c6 c6 c6 c6	      .byte.b	$C6, $C6, $C6, $C6
  35022  8ab0		       c4 c4 c4 c4	      .byte.b	$C4, $C4, $C4, $C4
  35023  8ab4		       c4 c4 c4 c4	      .byte.b	$C4, $C4, $C4, $C4
  35024  8ab8		       c4 c4 c4 c4	      .byte.b	$C4, $C4, $C4, $C4
  35025  8abc				  -	      ifconst	pfres
  35026  8abc				  -	      if	(<*) > (254-pfres*pfwidth)
  35027  8abc				  -	      align	256
  35028  8abc				  -	      endif
  35029  8abc				  -	      if	(<*) < (136-pfres*pfwidth)
  35030  8abc				  -	      repeat	((136-pfres*pfwidth)-(<*))
  35031  8abc				  -	      .byte	0
  35032  8abc				  -	      repend
  35033  8abc				  -	      endif
  35034  8abc					      else
  35035  8abc				  -	      if	(<*) > 206
  35036  8abc				  -	      align	256
  35037  8abc					      endif
  35038  8abc				  -	      if	(<*) < 88
  35039  8abc				  -	      repeat	(88-(<*))
  35040  8abc				  -	      .byte	0
  35041  8abc				  -	      repend
  35042  8abc					      endif
  35043  8abc					      endif
  35044  8abc				   pfcolorlabel1134
  35045  8abc		       cc cc cc cc	      .byte.b	$CC, $CC, $CC, $CC
  35046  8ac0		       cc cc cc cc	      .byte.b	$CC, $CC, $CC, $CC
  35047  8ac4		       ae ca ca ca	      .byte.b	$AE, $CA, $CA, $CA
  35048  8ac8		       ae ae ca ca	      .byte.b	$AE, $AE, $CA, $CA
  35049  8acc		       c8 ae ae c8	      .byte.b	$C8, $AE, $AE, $C8
  35050  8ad0		       c8 c8 ae ae	      .byte.b	$C8, $C8, $AE, $AE
  35051  8ad4		       c6 c6 c6 ae	      .byte.b	$C6, $C6, $C6, $AE
  35052  8ad8		       c6 c6 c6 c6	      .byte.b	$C6, $C6, $C6, $C6
  35053  8adc		       c4 c4 c4 c4	      .byte.b	$C4, $C4, $C4, $C4
  35054  8ae0		       c4 c4 c4 c4	      .byte.b	$C4, $C4, $C4, $C4
  35055  8ae4		       c4 c4 c4 c4	      .byte.b	$C4, $C4, $C4, $C4
  35056  8ae8				  -	      ifconst	pfres
  35057  8ae8				  -	      if	(<*) > (254-pfres*pfwidth)
  35058  8ae8				  -	      align	256
  35059  8ae8				  -	      endif
  35060  8ae8				  -	      if	(<*) < (136-pfres*pfwidth)
  35061  8ae8				  -	      repeat	((136-pfres*pfwidth)-(<*))
  35062  8ae8				  -	      .byte	0
  35063  8ae8				  -	      repend
  35064  8ae8				  -	      endif
  35065  8ae8					      else
  35066  8ae8					      if	(<*) > 206
  35067  8b00		       00 00 00 00*	      align	256
  35068  8b00					      endif
  35069  8b00					      if	(<*) < 88
  35070  8b00					      repeat	(88-(<*))
  35071  8b00		       00		      .byte.b	0
  35070  8b00					      repend
  35071  8b01		       00		      .byte.b	0
  35070  8b01					      repend
  35071  8b02		       00		      .byte.b	0
  35070  8b02					      repend
  35071  8b03		       00		      .byte.b	0
  35070  8b03					      repend
  35071  8b04		       00		      .byte.b	0
  35070  8b04					      repend
  35071  8b05		       00		      .byte.b	0
  35070  8b05					      repend
  35071  8b06		       00		      .byte.b	0
  35070  8b06					      repend
  35071  8b07		       00		      .byte.b	0
  35070  8b07					      repend
  35071  8b08		       00		      .byte.b	0
  35070  8b08					      repend
  35071  8b09		       00		      .byte.b	0
  35070  8b09					      repend
  35071  8b0a		       00		      .byte.b	0
  35070  8b0a					      repend
  35071  8b0b		       00		      .byte.b	0
  35070  8b0b					      repend
  35071  8b0c		       00		      .byte.b	0
  35070  8b0c					      repend
  35071  8b0d		       00		      .byte.b	0
  35070  8b0d					      repend
  35071  8b0e		       00		      .byte.b	0
  35070  8b0e					      repend
  35071  8b0f		       00		      .byte.b	0
  35070  8b0f					      repend
  35071  8b10		       00		      .byte.b	0
  35070  8b10					      repend
  35071  8b11		       00		      .byte.b	0
  35070  8b11					      repend
  35071  8b12		       00		      .byte.b	0
  35070  8b12					      repend
  35071  8b13		       00		      .byte.b	0
  35070  8b13					      repend
  35071  8b14		       00		      .byte.b	0
  35070  8b14					      repend
  35071  8b15		       00		      .byte.b	0
  35070  8b15					      repend
  35071  8b16		       00		      .byte.b	0
  35070  8b16					      repend
  35071  8b17		       00		      .byte.b	0
  35070  8b17					      repend
  35071  8b18		       00		      .byte.b	0
  35070  8b18					      repend
  35071  8b19		       00		      .byte.b	0
  35070  8b19					      repend
  35071  8b1a		       00		      .byte.b	0
  35070  8b1a					      repend
  35071  8b1b		       00		      .byte.b	0
  35070  8b1b					      repend
  35071  8b1c		       00		      .byte.b	0
  35070  8b1c					      repend
  35071  8b1d		       00		      .byte.b	0
  35070  8b1d					      repend
  35071  8b1e		       00		      .byte.b	0
  35070  8b1e					      repend
  35071  8b1f		       00		      .byte.b	0
  35070  8b1f					      repend
  35071  8b20		       00		      .byte.b	0
  35070  8b20					      repend
  35071  8b21		       00		      .byte.b	0
  35070  8b21					      repend
  35071  8b22		       00		      .byte.b	0
  35070  8b22					      repend
  35071  8b23		       00		      .byte.b	0
  35070  8b23					      repend
  35071  8b24		       00		      .byte.b	0
  35070  8b24					      repend
  35071  8b25		       00		      .byte.b	0
  35070  8b25					      repend
  35071  8b26		       00		      .byte.b	0
  35070  8b26					      repend
  35071  8b27		       00		      .byte.b	0
  35070  8b27					      repend
  35071  8b28		       00		      .byte.b	0
  35070  8b28					      repend
  35071  8b29		       00		      .byte.b	0
  35070  8b29					      repend
  35071  8b2a		       00		      .byte.b	0
  35070  8b2a					      repend
  35071  8b2b		       00		      .byte.b	0
  35070  8b2b					      repend
  35071  8b2c		       00		      .byte.b	0
  35070  8b2c					      repend
  35071  8b2d		       00		      .byte.b	0
  35070  8b2d					      repend
  35071  8b2e		       00		      .byte.b	0
  35070  8b2e					      repend
  35071  8b2f		       00		      .byte.b	0
  35070  8b2f					      repend
  35071  8b30		       00		      .byte.b	0
  35070  8b30					      repend
  35071  8b31		       00		      .byte.b	0
  35070  8b31					      repend
  35071  8b32		       00		      .byte.b	0
  35070  8b32					      repend
  35071  8b33		       00		      .byte.b	0
  35070  8b33					      repend
  35071  8b34		       00		      .byte.b	0
  35070  8b34					      repend
  35071  8b35		       00		      .byte.b	0
  35070  8b35					      repend
  35071  8b36		       00		      .byte.b	0
  35070  8b36					      repend
  35071  8b37		       00		      .byte.b	0
  35070  8b37					      repend
  35071  8b38		       00		      .byte.b	0
  35070  8b38					      repend
  35071  8b39		       00		      .byte.b	0
  35070  8b39					      repend
  35071  8b3a		       00		      .byte.b	0
  35070  8b3a					      repend
  35071  8b3b		       00		      .byte.b	0
  35070  8b3b					      repend
  35071  8b3c		       00		      .byte.b	0
  35070  8b3c					      repend
  35071  8b3d		       00		      .byte.b	0
  35070  8b3d					      repend
  35071  8b3e		       00		      .byte.b	0
  35070  8b3e					      repend
  35071  8b3f		       00		      .byte.b	0
  35070  8b3f					      repend
  35071  8b40		       00		      .byte.b	0
  35070  8b40					      repend
  35071  8b41		       00		      .byte.b	0
  35070  8b41					      repend
  35071  8b42		       00		      .byte.b	0
  35070  8b42					      repend
  35071  8b43		       00		      .byte.b	0
  35070  8b43					      repend
  35071  8b44		       00		      .byte.b	0
  35070  8b44					      repend
  35071  8b45		       00		      .byte.b	0
  35070  8b45					      repend
  35071  8b46		       00		      .byte.b	0
  35070  8b46					      repend
  35071  8b47		       00		      .byte.b	0
  35070  8b47					      repend
  35071  8b48		       00		      .byte.b	0
  35070  8b48					      repend
  35071  8b49		       00		      .byte.b	0
  35070  8b49					      repend
  35071  8b4a		       00		      .byte.b	0
  35070  8b4a					      repend
  35071  8b4b		       00		      .byte.b	0
  35070  8b4b					      repend
  35071  8b4c		       00		      .byte.b	0
  35070  8b4c					      repend
  35071  8b4d		       00		      .byte.b	0
  35070  8b4d					      repend
  35071  8b4e		       00		      .byte.b	0
  35070  8b4e					      repend
  35071  8b4f		       00		      .byte.b	0
  35070  8b4f					      repend
  35071  8b50		       00		      .byte.b	0
  35070  8b50					      repend
  35071  8b51		       00		      .byte.b	0
  35070  8b51					      repend
  35071  8b52		       00		      .byte.b	0
  35070  8b52					      repend
  35071  8b53		       00		      .byte.b	0
  35070  8b53					      repend
  35071  8b54		       00		      .byte.b	0
  35070  8b54					      repend
  35071  8b55		       00		      .byte.b	0
  35070  8b55					      repend
  35071  8b56		       00		      .byte.b	0
  35070  8b56					      repend
  35071  8b57		       00		      .byte.b	0
  35072  8b58					      repend
  35073  8b58					      endif
  35074  8b58					      endif
  35075  8b58				   pfcolorlabel1159
  35076  8b58		       cc cc cc cc	      .byte.b	$CC, $CC, $CC, $CC
  35077  8b5c		       cc cc cc cc	      .byte.b	$CC, $CC, $CC, $CC
  35078  8b60		       ca ca ca ca	      .byte.b	$CA, $CA, $CA, $CA
  35079  8b64		       ca ca ca ca	      .byte.b	$CA, $CA, $CA, $CA
  35080  8b68		       c8 c8 c8 c8	      .byte.b	$C8, $C8, $C8, $C8
  35081  8b6c		       c8 c8 c8 c8	      .byte.b	$C8, $C8, $C8, $C8
  35082  8b70		       ae c6 c6 c6	      .byte.b	$AE, $C6, $C6, $C6
  35083  8b74		       ae ae c6 c6	      .byte.b	$AE, $AE, $C6, $C6
  35084  8b78		       c4 a6 ac c4	      .byte.b	$C4, $A6, $AC, $C4
  35085  8b7c		       c4 c4 ae ae	      .byte.b	$C4, $C4, $AE, $AE
  35086  8b80		       c4 c4 c4 c4	      .byte.b	$C4, $C4, $C4, $C4
  35087  8b84				  -	      ifconst	pfres
  35088  8b84				  -	      if	(<*) > (254-pfres*pfwidth)
  35089  8b84				  -	      align	256
  35090  8b84				  -	      endif
  35091  8b84				  -	      if	(<*) < (136-pfres*pfwidth)
  35092  8b84				  -	      repeat	((136-pfres*pfwidth)-(<*))
  35093  8b84				  -	      .byte	0
  35094  8b84				  -	      repend
  35095  8b84				  -	      endif
  35096  8b84					      else
  35097  8b84				  -	      if	(<*) > 206
  35098  8b84				  -	      align	256
  35099  8b84					      endif
  35100  8b84				  -	      if	(<*) < 88
  35101  8b84				  -	      repeat	(88-(<*))
  35102  8b84				  -	      .byte	0
  35103  8b84				  -	      repend
  35104  8b84					      endif
  35105  8b84					      endif
  35106  8b84				   pfcolorlabel1184
  35107  8b84		       cc 00 00 00	      .byte.b	$CC,0,0,0
  35108  8b88		       cc 00 00 00	      .byte.b	$CC,0,0,0
  35109  8b8c		       ca 00 00 00	      .byte.b	$CA,0,0,0
  35110  8b90		       ca 00 00 00	      .byte.b	$CA,0,0,0
  35111  8b94		       c8 00 00 00	      .byte.b	$C8,0,0,0
  35112  8b98		       c8 00 00 00	      .byte.b	$C8,0,0,0
  35113  8b9c		       c6 00 00 00	      .byte.b	$C6,0,0,0
  35114  8ba0		       c6 00 00 00	      .byte.b	$C6,0,0,0
  35115  8ba4		       c4 00 00 00	      .byte.b	$C4,0,0,0
  35116  8ba8		       c4 00 00 00	      .byte.b	$C4,0,0,0
  35117  8bac		       c4 00 00 00	      .byte.b	$C4,0,0,0
  35118  8bb0				  -	      if	(<*) > (<(*+5))
  35119  8bb0				  -	      repeat	($100-<*)
  35120  8bb0				  -	      .byte	0
  35121  8bb0				  -	      repend
  35122  8bb0					      endif
  35123  8bb0				   playercolorL01252_1
  35124  8bb0		       4a		      .byte.b	$4A
  35125  8bb1		       4e		      .byte.b	$4E
  35126  8bb2		       4a		      .byte.b	$4A
  35127  8bb3		       46		      .byte.b	$46
  35128  8bb4		       4a		      .byte.b	$4A
  35129  8bb5		       4e		      .byte.b	$4E
  35130  8bb6				  -	      if	(<*) > (<(*+7))
  35131  8bb6				  -	      repeat	($100-<*)
  35132  8bb6				  -	      .byte	0
  35133  8bb6				  -	      repend
  35134  8bb6					      endif
  35135  8bb6				   playerL01255_1
  35136  8bb6		       ff		      .byte.b	%11111111
  35137  8bb7		       ff		      .byte.b	%11111111
  35138  8bb8		       3c		      .byte.b	%00111100
  35139  8bb9		       7e		      .byte.b	%01111110
  35140  8bba		       ff		      .byte.b	%11111111
  35141  8bbb		       bd		      .byte.b	%10111101
  35142  8bbc		       a5		      .byte.b	%10100101
  35143  8bbd		       a5		      .byte.b	%10100101
  35144  8bbe				  -	      if	(<*) > (<(*+7))
  35145  8bbe				  -	      repeat	($100-<*)
  35146  8bbe				  -	      .byte	0
  35147  8bbe				  -	      repend
  35148  8bbe					      endif
  35149  8bbe				   playercolorL01256_1
  35150  8bbe		       4c		      .byte.b	$4C
  35151  8bbf		       4e		      .byte.b	$4E
  35152  8bc0		       48		      .byte.b	$48
  35153  8bc1		       4e		      .byte.b	$4E
  35154  8bc2		       4c		      .byte.b	$4C
  35155  8bc3		       4a		      .byte.b	$4A
  35156  8bc4		       48		      .byte.b	$48
  35157  8bc5		       46		      .byte.b	$46
  35158  8bc6				  -	      if	(<*) > (<(*+7))
  35159  8bc6				  -	      repeat	($100-<*)
  35160  8bc6				  -	      .byte	0
  35161  8bc6				  -	      repend
  35162  8bc6					      endif
  35163  8bc6				   playercolorL01283_1
  35164  8bc6		       00		      .byte.b	$00
  35165  8bc7		       42		      .byte.b	$42
  35166  8bc8		       f6		      .byte.b	$F6
  35167  8bc9		       c6		      .byte.b	$C6
  35168  8bca		       c8		      .byte.b	$C8
  35169  8bcb		       ca		      .byte.b	$CA
  35170  8bcc		       fe		      .byte.b	$FE
  35171  8bcd		       46		      .byte.b	$46
  35172  8bce				  -	      if	(<*) > (<(*+23))
  35173  8bce				  -	      repeat	($100-<*)
  35174  8bce				  -	      .byte	0
  35175  8bce				  -	      repend
  35176  8bce					      endif
  35177  8bce				   playercolorL01362_1
  35178  8bce		       44		      .byte.b	$44
  35179  8bcf		       44		      .byte.b	$44
  35180  8bd0		       44		      .byte.b	$44
  35181  8bd1		       44		      .byte.b	$44
  35182  8bd2		       44		      .byte.b	$44
  35183  8bd3		       44		      .byte.b	$44
  35184  8bd4		       44		      .byte.b	$44
  35185  8bd5		       44		      .byte.b	$44
  35186  8bd6		       44		      .byte.b	$44
  35187  8bd7		       44		      .byte.b	$44
  35188  8bd8		       44		      .byte.b	$44
  35189  8bd9		       44		      .byte.b	$44
  35190  8bda		       44		      .byte.b	$44
  35191  8bdb		       44		      .byte.b	$44
  35192  8bdc		       44		      .byte.b	$44
  35193  8bdd		       44		      .byte.b	$44
  35194  8bde		       44		      .byte.b	$44
  35195  8bdf		       44		      .byte.b	$44
  35196  8be0		       44		      .byte.b	$44
  35197  8be1		       44		      .byte.b	$44
  35198  8be2		       44		      .byte.b	$44
  35199  8be3		       44		      .byte.b	$44
  35200  8be4		       44		      .byte.b	$44
  35201  8be5		       44		      .byte.b	$44
  35202  8be6				  -	      if	(<*) > (<(*+0))
  35203  8be6				  -	      repeat	($100-<*)
  35204  8be6				  -	      .byte	0
  35205  8be6				  -	      repend
  35206  8be6					      endif
  35207  8be6				   playerL01363_0
  35208  8be6		       00		      .byte.b	%00000000
  35209  8be7				  -	      if	(<*) > (<(*+0))
  35210  8be7				  -	      repeat	($100-<*)
  35211  8be7				  -	      .byte	0
  35212  8be7				  -	      repend
  35213  8be7					      endif
  35214  8be7				   playerL01364_1
  35215  8be7		       00		      .byte.b	%00000000
  35216  8be8				  -	      if	(<*) > (<(*+7))
  35217  8be8				  -	      repeat	($100-<*)
  35218  8be8				  -	      .byte	0
  35219  8be8				  -	      repend
  35220  8be8					      endif
  35221  8be8				   playerL01372_1
  35222  8be8		       00		      .byte.b	%00000000
  35223  8be9		       82		      .byte.b	%10000010
  35224  8bea		       82		      .byte.b	%10000010
  35225  8beb		       ba		      .byte.b	%10111010
  35226  8bec		       be		      .byte.b	%10111110
  35227  8bed		       7c		      .byte.b	%01111100
  35228  8bee		       d6		      .byte.b	%11010110
  35229  8bef		       44		      .byte.b	%01000100
  35230  8bf0				  -	      if	(<*) > (<(*+7))
  35231  8bf0				  -	      repeat	($100-<*)
  35232  8bf0				  -	      .byte	0
  35233  8bf0				  -	      repend
  35234  8bf0					      endif
  35235  8bf0				   playerL01374_1
  35236  8bf0		       00		      .byte.b	%00000000
  35237  8bf1		       44		      .byte.b	%01000100
  35238  8bf2		       44		      .byte.b	%01000100
  35239  8bf3		       5c		      .byte.b	%01011100
  35240  8bf4		       5c		      .byte.b	%01011100
  35241  8bf5		       7c		      .byte.b	%01111100
  35242  8bf6		       d6		      .byte.b	%11010110
  35243  8bf7		       44		      .byte.b	%01000100
  35244  8bf8				  -	      if	(<*) > (<(*+7))
  35245  8bf8				  -	      repeat	($100-<*)
  35246  8bf8				  -	      .byte	0
  35247  8bf8				  -	      repend
  35248  8bf8					      endif
  35249  8bf8				   playerL01376_1
  35250  8bf8		       00		      .byte.b	%00000000
  35251  8bf9		       28		      .byte.b	%00101000
  35252  8bfa		       28		      .byte.b	%00101000
  35253  8bfb		       28		      .byte.b	%00101000
  35254  8bfc		       6c		      .byte.b	%01101100
  35255  8bfd		       7c		      .byte.b	%01111100
  35256  8bfe		       d6		      .byte.b	%11010110
  35257  8bff		       44		      .byte.b	%01000100
  35258  8c00				  -	      if	(<*) > (<(*+7))
  35259  8c00				  -	      repeat	($100-<*)
  35260  8c00				  -	      .byte	0
  35261  8c00				  -	      repend
  35262  8c00					      endif
  35263  8c00				   playerL01378_1
  35264  8c00		       00		      .byte.b	%00000000
  35265  8c01		       10		      .byte.b	%00010000
  35266  8c02		       10		      .byte.b	%00010000
  35267  8c03		       30		      .byte.b	%00110000
  35268  8c04		       74		      .byte.b	%01110100
  35269  8c05		       7c		      .byte.b	%01111100
  35270  8c06		       d6		      .byte.b	%11010110
  35271  8c07		       44		      .byte.b	%01000100
  35272  8c08				  -	      if	(<*) > (<(*+7))
  35273  8c08				  -	      repeat	($100-<*)
  35274  8c08				  -	      .byte	0
  35275  8c08				  -	      repend
  35276  8c08					      endif
  35277  8c08				   playerL01380_1
  35278  8c08		       00		      .byte.b	%00000000
  35279  8c09		       28		      .byte.b	%00101000
  35280  8c0a		       28		      .byte.b	%00101000
  35281  8c0b		       28		      .byte.b	%00101000
  35282  8c0c		       78		      .byte.b	%01111000
  35283  8c0d		       7c		      .byte.b	%01111100
  35284  8c0e		       d6		      .byte.b	%11010110
  35285  8c0f		       44		      .byte.b	%01000100
  35286  8c10				  -	      if	(<*) > (<(*+7))
  35287  8c10				  -	      repeat	($100-<*)
  35288  8c10				  -	      .byte	0
  35289  8c10				  -	      repend
  35290  8c10					      endif
  35291  8c10				   playerL01382_1
  35292  8c10		       00		      .byte.b	%00000000
  35293  8c11		       44		      .byte.b	%01000100
  35294  8c12		       44		      .byte.b	%01000100
  35295  8c13		       7c		      .byte.b	%01111100
  35296  8c14		       7c		      .byte.b	%01111100
  35297  8c15		       7c		      .byte.b	%01111100
  35298  8c16		       d6		      .byte.b	%11010110
  35299  8c17		       44		      .byte.b	%01000100
  35300  8c18				  -	      if	(<*) > (<(*+23))
  35301  8c18				  -	      repeat	($100-<*)
  35302  8c18				  -	      .byte	0
  35303  8c18				  -	      repend
  35304  8c18					      endif
  35305  8c18				   playerL01385_0
  35306  8c18		       02		      .byte.b	%00000010
  35307  8c19		       22		      .byte.b	%00100010
  35308  8c1a		       25		      .byte.b	%00100101
  35309  8c1b		       55		      .byte.b	%01010101
  35310  8c1c		       55		      .byte.b	%01010101
  35311  8c1d		       55		      .byte.b	%01010101
  35312  8c1e		       55		      .byte.b	%01010101
  35313  8c1f		       55		      .byte.b	%01010101
  35314  8c20		       55		      .byte.b	%01010101
  35315  8c21		       25		      .byte.b	%00100101
  35316  8c22		       20		      .byte.b	%00100000
  35317  8c23		       00		      .byte.b	%00000000
  35318  8c24		       00		      .byte.b	%00000000
  35319  8c25		       0a		      .byte.b	%00001010
  35320  8c26		       6a		      .byte.b	%01101010
  35321  8c27		       6a		      .byte.b	%01101010
  35322  8c28		       aa		      .byte.b	%10101010
  35323  8c29		       ae		      .byte.b	%10101110
  35324  8c2a		       ae		      .byte.b	%10101110
  35325  8c2b		       aa		      .byte.b	%10101010
  35326  8c2c		       8a		      .byte.b	%10001010
  35327  8c2d		       84		      .byte.b	%10000100
  35328  8c2e		       64		      .byte.b	%01100100
  35329  8c2f		       60		      .byte.b	%01100000
  35330  8c30				  -	      if	(<*) > (<(*+23))
  35331  8c30				  -	      repeat	($100-<*)
  35332  8c30				  -	      .byte	0
  35333  8c30				  -	      repend
  35334  8c30					      endif
  35335  8c30				   playerL01386_1
  35336  8c30		       0a		      .byte.b	%00001010
  35337  8c31		       6a		      .byte.b	%01101010
  35338  8c32		       6c		      .byte.b	%01101100
  35339  8c33		       4c		      .byte.b	%01001100
  35340  8c34		       4c		      .byte.b	%01001100
  35341  8c35		       6c		      .byte.b	%01101100
  35342  8c36		       6a		      .byte.b	%01101010
  35343  8c37		       4a		      .byte.b	%01001010
  35344  8c38		       4c		      .byte.b	%01001100
  35345  8c39		       6c		      .byte.b	%01101100
  35346  8c3a		       60		      .byte.b	%01100000
  35347  8c3b		       00		      .byte.b	%00000000
  35348  8c3c		       00		      .byte.b	%00000000
  35349  8c3d		       03		      .byte.b	%00000011
  35350  8c3e		       8b		      .byte.b	%10001011
  35351  8c3f		       8a		      .byte.b	%10001010
  35352  8c40		       8a		      .byte.b	%10001010
  35353  8c41		       8b		      .byte.b	%10001011
  35354  8c42		       ab		      .byte.b	%10101011
  35355  8c43		       aa		      .byte.b	%10101010
  35356  8c44		       da		      .byte.b	%11011010
  35357  8c45		       db		      .byte.b	%11011011
  35358  8c46		       8b		      .byte.b	%10001011
  35359  8c47		       88		      .byte.b	%10001000
  35360  8c48				  -	      if	(<*) > (<(*+23))
  35361  8c48				  -	      repeat	($100-<*)
  35362  8c48				  -	      .byte	0
  35363  8c48				  -	      repend
  35364  8c48					      endif
  35365  8c48				   playerL01388_0
  35366  8c48		       00		      .byte.b	%00000000
  35367  8c49		       22		      .byte.b	%00100010
  35368  8c4a		       67		      .byte.b	%01100111
  35369  8c4b		       55		      .byte.b	%01010101
  35370  8c4c		       55		      .byte.b	%01010101
  35371  8c4d		       55		      .byte.b	%01010101
  35372  8c4e		       55		      .byte.b	%01010101
  35373  8c4f		       55		      .byte.b	%01010101
  35374  8c50		       15		      .byte.b	%00010101
  35375  8c51		       25		      .byte.b	%00100101
  35376  8c52		       20		      .byte.b	%00100000
  35377  8c53		       00		      .byte.b	%00000000
  35378  8c54		       00		      .byte.b	%00000000
  35379  8c55		       0a		      .byte.b	%00001010
  35380  8c56		       6a		      .byte.b	%01101010
  35381  8c57		       ea		      .byte.b	%11101010
  35382  8c58		       aa		      .byte.b	%10101010
  35383  8c59		       aa		      .byte.b	%10101010
  35384  8c5a		       ae		      .byte.b	%10101110
  35385  8c5b		       ae		      .byte.b	%10101110
  35386  8c5c		       8a		      .byte.b	%10001010
  35387  8c5d		       00		      .byte.b	%00000000
  35388  8c5e		       64		      .byte.b	%01100100
  35389  8c5f		       64		      .byte.b	%01100100
  35390  8c60				  -	      if	(<*) > (<(*+23))
  35391  8c60				  -	      repeat	($100-<*)
  35392  8c60				  -	      .byte	0
  35393  8c60				  -	      repend
  35394  8c60					      endif
  35395  8c60				   playerL01389_1
  35396  8c60		       4a		      .byte.b	%01001010
  35397  8c61		       6a		      .byte.b	%01101010
  35398  8c62		       68		      .byte.b	%01101000
  35399  8c63		       4c		      .byte.b	%01001100
  35400  8c64		       4c		      .byte.b	%01001100
  35401  8c65		       6c		      .byte.b	%01101100
  35402  8c66		       6e		      .byte.b	%01101110
  35403  8c67		       4a		      .byte.b	%01001010
  35404  8c68		       48		      .byte.b	%01001000
  35405  8c69		       6c		      .byte.b	%01101100
  35406  8c6a		       24		      .byte.b	%00100100
  35407  8c6b		       00		      .byte.b	%00000000
  35408  8c6c		       00		      .byte.b	%00000000
  35409  8c6d		       81		      .byte.b	%10000001
  35410  8c6e		       8b		      .byte.b	%10001011
  35411  8c6f		       8a		      .byte.b	%10001010
  35412  8c70		       8a		      .byte.b	%10001010
  35413  8c71		       8b		      .byte.b	%10001011
  35414  8c72		       ab		      .byte.b	%10101011
  35415  8c73		       ea		      .byte.b	%11101010
  35416  8c74		       da		      .byte.b	%11011010
  35417  8c75		       9b		      .byte.b	%10011011
  35418  8c76		       8b		      .byte.b	%10001011
  35419  8c77		       0a		      .byte.b	%00001010
  35420  8c78				  -	      if	(<*) > (<(*+23))
  35421  8c78				  -	      repeat	($100-<*)
  35422  8c78				  -	      .byte	0
  35423  8c78				  -	      repend
  35424  8c78					      endif
  35425  8c78				   playerL01391_0
  35426  8c78		       20		      .byte.b	%00100000
  35427  8c79		       22		      .byte.b	%00100010
  35428  8c7a		       43		      .byte.b	%01000011
  35429  8c7b		       55		      .byte.b	%01010101
  35430  8c7c		       55		      .byte.b	%01010101
  35431  8c7d		       55		      .byte.b	%01010101
  35432  8c7e		       55		      .byte.b	%01010101
  35433  8c7f		       55		      .byte.b	%01010101
  35434  8c80		       35		      .byte.b	%00110101
  35435  8c81		       25		      .byte.b	%00100101
  35436  8c82		       04		      .byte.b	%00000100
  35437  8c83		       00		      .byte.b	%00000000
  35438  8c84		       00		      .byte.b	%00000000
  35439  8c85		       42		      .byte.b	%01000010
  35440  8c86		       6a		      .byte.b	%01101010
  35441  8c87		       aa		      .byte.b	%10101010
  35442  8c88		       aa		      .byte.b	%10101010
  35443  8c89		       aa		      .byte.b	%10101010
  35444  8c8a		       ae		      .byte.b	%10101110
  35445  8c8b		       ae		      .byte.b	%10101110
  35446  8c8c		       8a		      .byte.b	%10001010
  35447  8c8d		       48		      .byte.b	%01001000
  35448  8c8e		       64		      .byte.b	%01100100
  35449  8c8f		       24		      .byte.b	%00100100
  35450  8c90				  -	      if	(<*) > (<(*+23))
  35451  8c90				  -	      repeat	($100-<*)
  35452  8c90				  -	      .byte	0
  35453  8c90				  -	      repend
  35454  8c90					      endif
  35455  8c90				   playerL01392_1
  35456  8c90		       62		      .byte.b	%01100010
  35457  8c91		       6a		      .byte.b	%01101010
  35458  8c92		       68		      .byte.b	%01101000
  35459  8c93		       4c		      .byte.b	%01001100
  35460  8c94		       6c		      .byte.b	%01101100
  35461  8c95		       6c		      .byte.b	%01101100
  35462  8c96		       6e		      .byte.b	%01101110
  35463  8c97		       4a		      .byte.b	%01001010
  35464  8c98		       68		      .byte.b	%01101000
  35465  8c99		       6c		      .byte.b	%01101100
  35466  8c9a		       2c		      .byte.b	%00101100
  35467  8c9b		       00		      .byte.b	%00000000
  35468  8c9c		       00		      .byte.b	%00000000
  35469  8c9d		       81		      .byte.b	%10000001
  35470  8c9e		       8b		      .byte.b	%10001011
  35471  8c9f		       8b		      .byte.b	%10001011
  35472  8ca0		       8a		      .byte.b	%10001010
  35473  8ca1		       ab		      .byte.b	%10101011
  35474  8ca2		       ab		      .byte.b	%10101011
  35475  8ca3		       cb		      .byte.b	%11001011
  35476  8ca4		       da		      .byte.b	%11011010
  35477  8ca5		       9b		      .byte.b	%10011011
  35478  8ca6		       8b		      .byte.b	%10001011
  35479  8ca7		       0b		      .byte.b	%00001011
  35480  8ca8				  -	      if	(<*) > (<(*+23))
  35481  8ca8				  -	      repeat	($100-<*)
  35482  8ca8				  -	      .byte	0
  35483  8ca8				  -	      repend
  35484  8ca8					      endif
  35485  8ca8				   playerL01394_0
  35486  8ca8		       20		      .byte.b	%00100000
  35487  8ca9		       22		      .byte.b	%00100010
  35488  8caa		       52		      .byte.b	%01010010
  35489  8cab		       55		      .byte.b	%01010101
  35490  8cac		       55		      .byte.b	%01010101
  35491  8cad		       55		      .byte.b	%01010101
  35492  8cae		       55		      .byte.b	%01010101
  35493  8caf		       55		      .byte.b	%01010101
  35494  8cb0		       25		      .byte.b	%00100101
  35495  8cb1		       25		      .byte.b	%00100101
  35496  8cb2		       05		      .byte.b	%00000101
  35497  8cb3		       00		      .byte.b	%00000000
  35498  8cb4		       00		      .byte.b	%00000000
  35499  8cb5		       60		      .byte.b	%01100000
  35500  8cb6		       6a		      .byte.b	%01101010
  35501  8cb7		       aa		      .byte.b	%10101010
  35502  8cb8		       aa		      .byte.b	%10101010
  35503  8cb9		       aa		      .byte.b	%10101010
  35504  8cba		       ae		      .byte.b	%10101110
  35505  8cbb		       8e		      .byte.b	%10001110
  35506  8cbc		       8a		      .byte.b	%10001010
  35507  8cbd		       6a		      .byte.b	%01101010
  35508  8cbe		       64		      .byte.b	%01100100
  35509  8cbf		       04		      .byte.b	%00000100
  35510  8cc0				  -	      if	(<*) > (<(*+23))
  35511  8cc0				  -	      repeat	($100-<*)
  35512  8cc0				  -	      .byte	0
  35513  8cc0				  -	      repend
  35514  8cc0					      endif
  35515  8cc0				   playerL01395_1
  35516  8cc0		       60		      .byte.b	%01100000
  35517  8cc1		       6a		      .byte.b	%01101010
  35518  8cc2		       4a		      .byte.b	%01001010
  35519  8cc3		       4c		      .byte.b	%01001100
  35520  8cc4		       6c		      .byte.b	%01101100
  35521  8cc5		       6c		      .byte.b	%01101100
  35522  8cc6		       4c		      .byte.b	%01001100
  35523  8cc7		       4a		      .byte.b	%01001010
  35524  8cc8		       6a		      .byte.b	%01101010
  35525  8cc9		       6c		      .byte.b	%01101100
  35526  8cca		       0c		      .byte.b	%00001100
  35527  8ccb		       00		      .byte.b	%00000000
  35528  8ccc		       00		      .byte.b	%00000000
  35529  8ccd		       88		      .byte.b	%10001000
  35530  8cce		       8b		      .byte.b	%10001011
  35531  8ccf		       8b		      .byte.b	%10001011
  35532  8cd0		       8a		      .byte.b	%10001010
  35533  8cd1		       aa		      .byte.b	%10101010
  35534  8cd2		       ab		      .byte.b	%10101011
  35535  8cd3		       db		      .byte.b	%11011011
  35536  8cd4		       da		      .byte.b	%11011010
  35537  8cd5		       8a		      .byte.b	%10001010
  35538  8cd6		       8b		      .byte.b	%10001011
  35539  8cd7		       03		      .byte.b	%00000011
  35540  8cd8				  -	      if	(<*) > (<(*+23))
  35541  8cd8				  -	      repeat	($100-<*)
  35542  8cd8				  -	      .byte	0
  35543  8cd8				  -	      repend
  35544  8cd8					      endif
  35545  8cd8				   playerL01397_0
  35546  8cd8		       00		      .byte.b	%00000000
  35547  8cd9		       22		      .byte.b	%00100010
  35548  8cda		       76		      .byte.b	%01110110
  35549  8cdb		       55		      .byte.b	%01010101
  35550  8cdc		       55		      .byte.b	%01010101
  35551  8cdd		       55		      .byte.b	%01010101
  35552  8cde		       55		      .byte.b	%01010101
  35553  8cdf		       55		      .byte.b	%01010101
  35554  8ce0		       05		      .byte.b	%00000101
  35555  8ce1		       25		      .byte.b	%00100101
  35556  8ce2		       21		      .byte.b	%00100001
  35557  8ce3		       00		      .byte.b	%00000000
  35558  8ce4		       00		      .byte.b	%00000000
  35559  8ce5		       28		      .byte.b	%00101000
  35560  8ce6		       6a		      .byte.b	%01101010
  35561  8ce7		       ea		      .byte.b	%11101010
  35562  8ce8		       aa		      .byte.b	%10101010
  35563  8ce9		       aa		      .byte.b	%10101010
  35564  8cea		       ae		      .byte.b	%10101110
  35565  8ceb		       8e		      .byte.b	%10001110
  35566  8cec		       8a		      .byte.b	%10001010
  35567  8ced		       22		      .byte.b	%00100010
  35568  8cee		       64		      .byte.b	%01100100
  35569  8cef		       44		      .byte.b	%01000100
  35570  8cf0					      if	(<*) > (<(*+23))
  35571  8cf0					      repeat	($100-<*)
  35572  8cf0		       00		      .byte.b	0
  35571  8cf0					      repend
  35572  8cf1		       00		      .byte.b	0
  35571  8cf1					      repend
  35572  8cf2		       00		      .byte.b	0
  35571  8cf2					      repend
  35572  8cf3		       00		      .byte.b	0
  35571  8cf3					      repend
  35572  8cf4		       00		      .byte.b	0
  35571  8cf4					      repend
  35572  8cf5		       00		      .byte.b	0
  35571  8cf5					      repend
  35572  8cf6		       00		      .byte.b	0
  35571  8cf6					      repend
  35572  8cf7		       00		      .byte.b	0
  35571  8cf7					      repend
  35572  8cf8		       00		      .byte.b	0
  35571  8cf8					      repend
  35572  8cf9		       00		      .byte.b	0
  35571  8cf9					      repend
  35572  8cfa		       00		      .byte.b	0
  35571  8cfa					      repend
  35572  8cfb		       00		      .byte.b	0
  35571  8cfb					      repend
  35572  8cfc		       00		      .byte.b	0
  35571  8cfc					      repend
  35572  8cfd		       00		      .byte.b	0
  35571  8cfd					      repend
  35572  8cfe		       00		      .byte.b	0
  35571  8cfe					      repend
  35572  8cff		       00		      .byte.b	0
  35573  8d00					      repend
  35574  8d00					      endif
  35575  8d00				   playerL01398_1
  35576  8d00		       28		      .byte.b	%00101000
  35577  8d01		       6a		      .byte.b	%01101010
  35578  8d02		       4a		      .byte.b	%01001010
  35579  8d03		       4c		      .byte.b	%01001100
  35580  8d04		       6c		      .byte.b	%01101100
  35581  8d05		       6c		      .byte.b	%01101100
  35582  8d06		       4c		      .byte.b	%01001100
  35583  8d07		       4a		      .byte.b	%01001010
  35584  8d08		       6a		      .byte.b	%01101010
  35585  8d09		       6c		      .byte.b	%01101100
  35586  8d0a		       44		      .byte.b	%01000100
  35587  8d0b		       00		      .byte.b	%00000000
  35588  8d0c		       00		      .byte.b	%00000000
  35589  8d0d		       8a		      .byte.b	%10001010
  35590  8d0e		       8b		      .byte.b	%10001011
  35591  8d0f		       8b		      .byte.b	%10001011
  35592  8d10		       8a		      .byte.b	%10001010
  35593  8d11		       8a		      .byte.b	%10001010
  35594  8d12		       ab		      .byte.b	%10101011
  35595  8d13		       fb		      .byte.b	%11111011
  35596  8d14		       da		      .byte.b	%11011010
  35597  8d15		       8a		      .byte.b	%10001010
  35598  8d16		       8b		      .byte.b	%10001011
  35599  8d17		       01		      .byte.b	%00000001
  35600  8d18				  -	      if	(<*) > (<(*+23))
  35601  8d18				  -	      repeat	($100-<*)
  35602  8d18				  -	      .byte	0
  35603  8d18				  -	      repend
  35604  8d18					      endif
  35605  8d18				   playerL01400_0
  35606  8d18		       02		      .byte.b	%00000010
  35607  8d19		       22		      .byte.b	%00100010
  35608  8d1a		       34		      .byte.b	%00110100
  35609  8d1b		       55		      .byte.b	%01010101
  35610  8d1c		       55		      .byte.b	%01010101
  35611  8d1d		       55		      .byte.b	%01010101
  35612  8d1e		       55		      .byte.b	%01010101
  35613  8d1f		       55		      .byte.b	%01010101
  35614  8d20		       45		      .byte.b	%01000101
  35615  8d21		       25		      .byte.b	%00100101
  35616  8d22		       21		      .byte.b	%00100001
  35617  8d23		       00		      .byte.b	%00000000
  35618  8d24		       00		      .byte.b	%00000000
  35619  8d25		       28		      .byte.b	%00101000
  35620  8d26		       6a		      .byte.b	%01101010
  35621  8d27		       6a		      .byte.b	%01101010
  35622  8d28		       aa		      .byte.b	%10101010
  35623  8d29		       ae		      .byte.b	%10101110
  35624  8d2a		       ae		      .byte.b	%10101110
  35625  8d2b		       8a		      .byte.b	%10001010
  35626  8d2c		       8a		      .byte.b	%10001010
  35627  8d2d		       a6		      .byte.b	%10100110
  35628  8d2e		       64		      .byte.b	%01100100
  35629  8d2f		       40		      .byte.b	%01000000
  35630  8d30				  -	      if	(<*) > (<(*+23))
  35631  8d30				  -	      repeat	($100-<*)
  35632  8d30				  -	      .byte	0
  35633  8d30				  -	      repend
  35634  8d30					      endif
  35635  8d30				   playerL01401_1
  35636  8d30		       28		      .byte.b	%00101000
  35637  8d31		       6a		      .byte.b	%01101010
  35638  8d32		       6e		      .byte.b	%01101110
  35639  8d33		       4c		      .byte.b	%01001100
  35640  8d34		       6c		      .byte.b	%01101100
  35641  8d35		       6c		      .byte.b	%01101100
  35642  8d36		       68		      .byte.b	%01101000
  35643  8d37		       4a		      .byte.b	%01001010
  35644  8d38		       6e		      .byte.b	%01101110
  35645  8d39		       6c		      .byte.b	%01101100
  35646  8d3a		       60		      .byte.b	%01100000
  35647  8d3b		       00		      .byte.b	%00000000
  35648  8d3c		       00		      .byte.b	%00000000
  35649  8d3d		       0b		      .byte.b	%00001011
  35650  8d3e		       8b		      .byte.b	%10001011
  35651  8d3f		       8b		      .byte.b	%10001011
  35652  8d40		       8a		      .byte.b	%10001010
  35653  8d41		       8b		      .byte.b	%10001011
  35654  8d42		       ab		      .byte.b	%10101011
  35655  8d43		       bb		      .byte.b	%10111011
  35656  8d44		       da		      .byte.b	%11011010
  35657  8d45		       cb		      .byte.b	%11001011
  35658  8d46		       8b		      .byte.b	%10001011
  35659  8d47		       81		      .byte.b	%10000001
  35660  8d48					      if	ECHOFIRST
      556 bytes of ROM space left in bank 8
  35661  8d48					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 8")
  35662  8d48					      endif
  35663  8d48		       00 01	   ECHOFIRST  =	1
  35664  8d48
  35665  8d48
  35666  8d48							; Provided under the CC0 license. See the included LICENSE.txt for details.
  35667  8d48
  35668  8d48							; feel free to modify the score graphics - just keep each digit 8 high
  35669  8d48							; and keep the conditional compilation stuff intact
  35670  8d48				  -	      ifconst	ROM2k
  35671  8d48				  -	      ORG	$F7AC-8
  35672  8d48					      else
  35673  8d48					      ifconst	bankswitch
  35674  8d48				  -	      if	bankswitch == 8
  35675  8d48				  -	      ORG	$2F94-bscode_length
  35676  8d48				  -	      RORG	$FF94-bscode_length
  35677  8d48					      endif
  35678  8d48				  -	      if	bankswitch == 16
  35679  8d48				  -	      ORG	$4F94-bscode_length
  35680  8d48				  -	      RORG	$FF94-bscode_length
  35681  8d48					      endif
  35682  8d48					      if	bankswitch == 32
  35683  8f74					      ORG	$8F94-bscode_length
  35684  8f74					      RORG	$FF94-bscode_length
  35685  8f74					      endif
  35686  8f74				  -	      if	bankswitch == 64
  35687  8f74				  -	      ORG	$10F80-bscode_length
  35688  8f74				  -	      RORG	$1FF80-bscode_length
  35689  8f74					      endif
  35690  8f74				  -	      else
  35691  8f74				  -	      ORG	$FF9C
  35692  8f74					      endif
  35693  8f74					      endif
  35694  8f74
  35695  8f74							; font equates
  35696  8f74		       00 01	   .21stcentury =	1
  35697  8f74		       00 02	   alarmclock =	2
  35698  8f74		       00 03	   handwritten =	3
  35699  8f74		       00 04	   interrupted =	4
  35700  8f74		       00 05	   retroputer =	5
  35701  8f74		       00 06	   whimsey    =	6
  35702  8f74		       00 07	   tiny       =	7
  35703  8f74		       00 08	   hex	      =	8
  35704  8f74
  35705  8f74				  -	      ifconst	font
  35706  8f74				  -	      if	font == hex
  35707  8f74				  -	      ORG	. - 48
  35708  8f74				  -	      endif
  35709  8f74					      endif
  35710  8f74
  35711  8f74				   scoretable
  35712  8f74
  35713  8f74				  -	      ifconst	font
  35714  8f74				  -	      if	font == .21stcentury
  35715  8f74				  -	      include	"score_graphics.asm.21stcentury"
  35716  8f74				  -	      endif
  35717  8f74				  -	      if	font == alarmclock
  35718  8f74				  -	      include	"score_graphics.asm.alarmclock"
  35719  8f74				  -	      endif
  35720  8f74				  -	      if	font == handwritten
  35721  8f74				  -	      include	"score_graphics.asm.handwritten"
  35722  8f74				  -	      endif
  35723  8f74				  -	      if	font == interrupted
  35724  8f74				  -	      include	"score_graphics.asm.interrupted"
  35725  8f74				  -	      endif
  35726  8f74				  -	      if	font == retroputer
  35727  8f74				  -	      include	"score_graphics.asm.retroputer"
  35728  8f74				  -	      endif
  35729  8f74				  -	      if	font == whimsey
  35730  8f74				  -	      include	"score_graphics.asm.whimsey"
  35731  8f74				  -	      endif
  35732  8f74				  -	      if	font == tiny
  35733  8f74				  -	      include	"score_graphics.asm.tiny"
  35734  8f74				  -	      endif
  35735  8f74				  -	      if	font == hex
  35736  8f74				  -	      include	"score_graphics.asm.hex"
  35737  8f74				  -	      endif
  35738  8f74					      else		; default font
  35739  8f74
  35740  8f74		       3c		      .byte.b	%00111100
  35741  8f75		       66		      .byte.b	%01100110
  35742  8f76		       66		      .byte.b	%01100110
  35743  8f77		       66		      .byte.b	%01100110
  35744  8f78		       66		      .byte.b	%01100110
  35745  8f79		       66		      .byte.b	%01100110
  35746  8f7a		       66		      .byte.b	%01100110
  35747  8f7b		       3c		      .byte.b	%00111100
  35748  8f7c
  35749  8f7c		       7e		      .byte.b	%01111110
  35750  8f7d		       18		      .byte.b	%00011000
  35751  8f7e		       18		      .byte.b	%00011000
  35752  8f7f		       18		      .byte.b	%00011000
  35753  8f80		       18		      .byte.b	%00011000
  35754  8f81		       38		      .byte.b	%00111000
  35755  8f82		       18		      .byte.b	%00011000
  35756  8f83		       08		      .byte.b	%00001000
  35757  8f84
  35758  8f84		       7e		      .byte.b	%01111110
  35759  8f85		       60		      .byte.b	%01100000
  35760  8f86		       60		      .byte.b	%01100000
  35761  8f87		       3c		      .byte.b	%00111100
  35762  8f88		       06		      .byte.b	%00000110
  35763  8f89		       06		      .byte.b	%00000110
  35764  8f8a		       46		      .byte.b	%01000110
  35765  8f8b		       3c		      .byte.b	%00111100
  35766  8f8c
  35767  8f8c		       3c		      .byte.b	%00111100
  35768  8f8d		       46		      .byte.b	%01000110
  35769  8f8e		       06		      .byte.b	%00000110
  35770  8f8f		       06		      .byte.b	%00000110
  35771  8f90		       1c		      .byte.b	%00011100
  35772  8f91		       06		      .byte.b	%00000110
  35773  8f92		       46		      .byte.b	%01000110
  35774  8f93		       3c		      .byte.b	%00111100
  35775  8f94
  35776  8f94		       0c		      .byte.b	%00001100
  35777  8f95		       0c		      .byte.b	%00001100
  35778  8f96		       7e		      .byte.b	%01111110
  35779  8f97		       4c		      .byte.b	%01001100
  35780  8f98		       4c		      .byte.b	%01001100
  35781  8f99		       2c		      .byte.b	%00101100
  35782  8f9a		       1c		      .byte.b	%00011100
  35783  8f9b		       0c		      .byte.b	%00001100
  35784  8f9c
  35785  8f9c		       3c		      .byte.b	%00111100
  35786  8f9d		       46		      .byte.b	%01000110
  35787  8f9e		       06		      .byte.b	%00000110
  35788  8f9f		       06		      .byte.b	%00000110
  35789  8fa0		       3c		      .byte.b	%00111100
  35790  8fa1		       60		      .byte.b	%01100000
  35791  8fa2		       60		      .byte.b	%01100000
  35792  8fa3		       7e		      .byte.b	%01111110
  35793  8fa4
  35794  8fa4		       3c		      .byte.b	%00111100
  35795  8fa5		       66		      .byte.b	%01100110
  35796  8fa6		       66		      .byte.b	%01100110
  35797  8fa7		       66		      .byte.b	%01100110
  35798  8fa8		       7c		      .byte.b	%01111100
  35799  8fa9		       60		      .byte.b	%01100000
  35800  8faa		       62		      .byte.b	%01100010
  35801  8fab		       3c		      .byte.b	%00111100
  35802  8fac
  35803  8fac		       30		      .byte.b	%00110000
  35804  8fad		       30		      .byte.b	%00110000
  35805  8fae		       30		      .byte.b	%00110000
  35806  8faf		       18		      .byte.b	%00011000
  35807  8fb0		       0c		      .byte.b	%00001100
  35808  8fb1		       06		      .byte.b	%00000110
  35809  8fb2		       42		      .byte.b	%01000010
  35810  8fb3		       3e		      .byte.b	%00111110
  35811  8fb4
  35812  8fb4		       3c		      .byte.b	%00111100
  35813  8fb5		       66		      .byte.b	%01100110
  35814  8fb6		       66		      .byte.b	%01100110
  35815  8fb7		       66		      .byte.b	%01100110
  35816  8fb8		       3c		      .byte.b	%00111100
  35817  8fb9		       66		      .byte.b	%01100110
  35818  8fba		       66		      .byte.b	%01100110
  35819  8fbb		       3c		      .byte.b	%00111100
  35820  8fbc
  35821  8fbc		       3c		      .byte.b	%00111100
  35822  8fbd		       46		      .byte.b	%01000110
  35823  8fbe		       06		      .byte.b	%00000110
  35824  8fbf		       3e		      .byte.b	%00111110
  35825  8fc0		       66		      .byte.b	%01100110
  35826  8fc1		       66		      .byte.b	%01100110
  35827  8fc2		       66		      .byte.b	%01100110
  35828  8fc3		       3c		      .byte.b	%00111100
  35829  8fc4
  35830  8fc4					      ifnconst	DPC_kernel_options
  35831  8fc4
  35832  8fc4		       00		      .byte.b	%00000000
  35833  8fc5		       00		      .byte.b	%00000000
  35834  8fc6		       00		      .byte.b	%00000000
  35835  8fc7		       00		      .byte.b	%00000000
  35836  8fc8		       00		      .byte.b	%00000000
  35837  8fc9		       00		      .byte.b	%00000000
  35838  8fca		       00		      .byte.b	%00000000
  35839  8fcb		       00		      .byte.b	%00000000
  35840  8fcc
  35841  8fcc					      endif
  35842  8fcc
  35843  8fcc					      endif
  35844  8fcc
  35845  8fcc				  -	      ifconst	ROM2k
  35846  8fcc				  -	      ORG	$F7FC
  35847  8fcc					      else
  35848  8fcc					      ifconst	bankswitch
  35849  8fcc				  -	      if	bankswitch == 8
  35850  8fcc				  -	      ORG	$2FF4-bscode_length
  35851  8fcc				  -	      RORG	$FFF4-bscode_length
  35852  8fcc					      endif
  35853  8fcc				  -	      if	bankswitch == 16
  35854  8fcc				  -	      ORG	$4FF4-bscode_length
  35855  8fcc				  -	      RORG	$FFF4-bscode_length
  35856  8fcc					      endif
  35857  8fcc					      if	bankswitch == 32
  35858  8fd4					      ORG	$8FF4-bscode_length
  35859  8fd4					      RORG	$FFF4-bscode_length
  35860  8fd4					      endif
  35861  8fd4				  -	      if	bankswitch == 64
  35862  8fd4				  -	      ORG	$10FE0-bscode_length
  35863  8fd4				  -	      RORG	$1FFE0-bscode_length
  35864  8fd4					      endif
  35865  8fd4				  -	      else
  35866  8fd4				  -	      ORG	$FFFC
  35867  8fd4					      endif
  35868  8fd4					      endif
  35869  8fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
  35870  8fd4
  35871  8fd4							; every bank has this stuff at the same place
  35872  8fd4							; this code can switch to/from any bank at any entry point
  35873  8fd4							; and can preserve register values
  35874  8fd4							; note: lines not starting with a space are not placed in all banks
  35875  8fd4							;
  35876  8fd4							; line below tells the compiler how long this is - do not remove
  35877  8fd4							;size=32
  35878  8fd4
  35879  8fd4				   begin_bscode
  35880  8fd4		       a2 ff		      ldx	#$ff
  35881  8fd6				  -	      ifconst	FASTFETCH	; using DPC+
  35882  8fd6				  -	      stx	FASTFETCH
  35883  8fd6					      endif
  35884  8fd6		       9a		      txs
  35885  8fd7				  -	      if	bankswitch == 64
  35886  8fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  35887  8fd7					      else
  35888  8fd7		       a9 f3		      lda	#>(start-1)
  35889  8fd9					      endif
  35890  8fd9		       48		      pha
  35891  8fda		       a9 51		      lda	#<(start-1)
  35892  8fdc		       48		      pha
  35893  8fdd
  35894  8fdd				   BS_return
  35895  8fdd		       48		      pha
  35896  8fde		       8a		      txa
  35897  8fdf		       48		      pha
  35898  8fe0		       ba		      tsx
  35899  8fe1
  35900  8fe1					      if	bankswitch != 64
  35901  8fe1		       b5 04		      lda	4,x	; get high byte of return address
  35902  8fe3
  35903  8fe3		       2a		      rol
  35904  8fe4		       2a		      rol
  35905  8fe5		       2a		      rol
  35906  8fe6		       2a		      rol
  35907  8fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  35908  8fe9		       aa		      tax
  35909  8fea		       e8		      inx
  35910  8feb				  -	      else
  35911  8feb				  -	      lda	4,x	; get high byte of return address
  35912  8feb				  -	      tay
  35913  8feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  35914  8feb				  -	      sta	4,x
  35915  8feb				  -	      tya
  35916  8feb				  -	      lsr
  35917  8feb				  -	      lsr
  35918  8feb				  -	      lsr
  35919  8feb				  -	      lsr
  35920  8feb				  -	      tax
  35921  8feb				  -	      inx
  35922  8feb					      endif
  35923  8feb
  35924  8feb				   BS_jsr
  35925  8feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  35926  8fee		       68		      pla
  35927  8fef		       aa		      tax
  35928  8ff0		       68		      pla
  35929  8ff1		       60		      rts
  35930  8ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  35931  8ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  35932  8ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  35933  8ff2					      endif
  35934  8ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
  35935  8ff2
  35936  8ff2					      ifconst	bankswitch
  35937  8ff2				  -	      if	bankswitch == 8
  35938  8ff2				  -	      ORG	$2FFC
  35939  8ff2				  -	      RORG	$FFFC
  35940  8ff2					      endif
  35941  8ff2				  -	      if	bankswitch == 16
  35942  8ff2				  -	      ORG	$4FFC
  35943  8ff2				  -	      RORG	$FFFC
  35944  8ff2					      endif
  35945  8ff2					      if	bankswitch == 32
  35946  8ffc					      ORG	$8FFC
  35947  8ffc					      RORG	$FFFC
  35948  8ffc					      endif
  35949  8ffc				  -	      if	bankswitch == 64
  35950  8ffc				  -	      ORG	$10FF0
  35951  8ffc				  -	      RORG	$1FFF0
  35952  8ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
  35953  8ffc				  -	      ORG	$10FF8
  35954  8ffc				  -	      RORG	$1FFF8
  35955  8ffc				  -	      ifconst	superchip
  35956  8ffc				  -	      .byte	"E","F","S","C"
  35957  8ffc				  -	      else
  35958  8ffc				  -	      .byte	"E","F","E","F"
  35959  8ffc				  -	      endif
  35960  8ffc				  -	      ORG	$10FFC
  35961  8ffc				  -	      RORG	$1FFFC
  35962  8ffc					      endif
  35963  8ffc				  -	      else
  35964  8ffc				  -	      ifconst	ROM2k
  35965  8ffc				  -	      ORG	$F7FC
  35966  8ffc				  -	      else
  35967  8ffc				  -	      ORG	$FFFC
  35968  8ffc				  -	      endif
  35969  8ffc					      endif
  35970  8ffc		       52 f3		      .word.w	(start & $ffff)
  35971  8ffe		       52 f3		      .word.w	(start & $ffff)

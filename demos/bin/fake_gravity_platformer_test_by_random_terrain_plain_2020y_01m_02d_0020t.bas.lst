------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_by_random_terrain_plain_2020y_01m_02d_0020t.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_by_random_terrain_plain_2020y_01m_02d_0020t.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_by_random_terrain_plain_2020y_01m_02d_0020t.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 55	    _SD_Slide_length =	.skipL0175-_SD_Slide
      4  10000 ????
      5  10000 ????		00 81	    _SD_Fall_length =	.skipL0174-_SD_Fall
      6  10000 ????
      7  10000 ????		00 51	    _SD_Jump_length =	.skipL0173-_SD_Jump
      8  10000 ????
      9  10000 ????		00 03	    _c_Slide_Sound =	3
     10  10000 ????
     11  10000 ????		00 02	    _c_Fall_Sound =	2
     12  10000 ????
     13  10000 ????		00 01	    _c_Jump_Sound =	1
     14  10000 ????
     15  10000 ????		00 ec	    _Bit7_Reset_Restrainer =	y
     16  10000 ????
     17  10000 ????		00 ec	    _Bit6_Duck_in_Progress =	y
     18  10000 ????
     19  10000 ????		00 ec	    _Bit5_Ground_Slide_in_Progress =	y
     20  10000 ????
     21  10000 ????		00 ec	    _Bit4_Flip_P1 =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit3_FireB_Restrainer =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit2_Slide_Right_in_Progress =	y
     26  10000 ????
     27  10000 ????		00 ec	    _Bit1_Slide_Left_in_Progress =	y
     28  10000 ????
     29  10000 ????		00 ec	    _Bit0_Fall_in_Progress =	y
     30  10000 ????
     31  10000 ????		00 ec	    _BitOp_01  =	y
     32  10000 ????
     33  10000 ????		00 eb	    _Bit6_LR_Joy_Movement =	x
     34  10000 ????
     35  10000 ????		00 eb	    _BitOp_02  =	x
     36  10000 ????
     37  10000 ????		00 e0	    _Ch0_Counter =	m
     38  10000 ????
     39  10000 ????		00 df	    _Ch0_Duration =	l
     40  10000 ????
     41  10000 ????		00 de	    _Ch0_Sound =	k
     42  10000 ????
     43  10000 ????		00 dd	    _Frame_Counter =	j
     44  10000 ????
     45  10000 ????		00 dc	    _Master_Counter =	i
     46  10000 ????
     47  10000 ????		00 db	    _Slide_Limit =	h
     48  10000 ????
     49  10000 ????		00 da	    _Slide_Speed =	g
     50  10000 ????
     51  10000 ????		00 d9	    _Slide_Counter =	f
     52  10000 ????
     53  10000 ????		00 d8	    _Fall_Gravity_Counter =	e
     54  10000 ????
     55  10000 ????		00 d7	    _Jump_Gravity_Counter =	d
     56  10000 ????
     57  10000 ????		00 d6	    _Convert_Y =	c
     58  10000 ????
     59  10000 ????		00 d5	    _Convert_X =	b
     60  10000 ????
     61  10000 ????		00 81	    _P1_Left_Right =	player1x
     62  10000 ????		00 01	    PFcolors   =	1
     63  10000 ????		00 01	    no_blank_lines =	1
     64  10000 ????		00 01	    player1colors =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_by_random_terrain_plain_2020y_01m_02d_0020t.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 55	    _SD_Slide_length =	.skipL0175-_SD_Slide
      4  10000 ????
      5  10000 ????		00 81	    _SD_Fall_length =	.skipL0174-_SD_Fall
      6  10000 ????
      7  10000 ????		00 51	    _SD_Jump_length =	.skipL0173-_SD_Jump
      8  10000 ????
      9  10000 ????		00 03	    _c_Slide_Sound =	3
     10  10000 ????
     11  10000 ????		00 02	    _c_Fall_Sound =	2
     12  10000 ????
     13  10000 ????		00 01	    _c_Jump_Sound =	1
     14  10000 ????
     15  10000 ????		00 ec	    _Bit7_Reset_Restrainer =	y
     16  10000 ????
     17  10000 ????		00 ec	    _Bit6_Duck_in_Progress =	y
     18  10000 ????
     19  10000 ????		00 ec	    _Bit5_Ground_Slide_in_Progress =	y
     20  10000 ????
     21  10000 ????		00 ec	    _Bit4_Flip_P1 =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit3_FireB_Restrainer =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit2_Slide_Right_in_Progress =	y
     26  10000 ????
     27  10000 ????		00 ec	    _Bit1_Slide_Left_in_Progress =	y
     28  10000 ????
     29  10000 ????		00 ec	    _Bit0_Fall_in_Progress =	y
     30  10000 ????
     31  10000 ????		00 ec	    _BitOp_01  =	y
     32  10000 ????
     33  10000 ????		00 eb	    _Bit6_LR_Joy_Movement =	x
     34  10000 ????
     35  10000 ????		00 eb	    _BitOp_02  =	x
     36  10000 ????
     37  10000 ????		00 e0	    _Ch0_Counter =	m
     38  10000 ????
     39  10000 ????		00 df	    _Ch0_Duration =	l
     40  10000 ????
     41  10000 ????		00 de	    _Ch0_Sound =	k
     42  10000 ????
     43  10000 ????		00 dd	    _Frame_Counter =	j
     44  10000 ????
     45  10000 ????		00 dc	    _Master_Counter =	i
     46  10000 ????
     47  10000 ????		00 db	    _Slide_Limit =	h
     48  10000 ????
     49  10000 ????		00 da	    _Slide_Speed =	g
     50  10000 ????
     51  10000 ????		00 d9	    _Slide_Counter =	f
     52  10000 ????
     53  10000 ????		00 d8	    _Fall_Gravity_Counter =	e
     54  10000 ????
     55  10000 ????		00 d7	    _Jump_Gravity_Counter =	d
     56  10000 ????
     57  10000 ????		00 d6	    _Convert_Y =	c
     58  10000 ????
     59  10000 ????		00 d5	    _Convert_X =	b
     60  10000 ????
     61  10000 ????		00 81	    _P1_Left_Right =	player1x
     62  10000 ????		00 01	    PFcolors   =	1
     63  10000 ????		00 01	    no_blank_lines =	1
     64  10000 ????		00 01	    player1colors =	1
------- FILE e:\Documents\bB\demos\fake_gravity_platformer_test_by_random_terrain_plain_2020y_01m_02d_0020t.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 67 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4				  -	      ifnconst	player1colors
    233  f0b4				  -	      lda	missile1height	;3
    234  f0b4				  -	      dcp	missile1y	;5
    235  f0b4				  -	      rol		;2
    236  f0b4				  -	      rol		;2
    237  f0b4				  -	      sta	ENAM1	;3
    238  f0b4					      else
    239  f0b4		       b1 87		      lda	(player1color),y
    240  f0b6		       85 07		      sta	COLUP1
    241  f0b8					      ifnconst	playercolors
      0  f0b8					      sleep	7
      1  f0b8				   .CYCLES    SET	7
      2  f0b8
      3  f0b8				  -	      IF	.CYCLES < 2
      4  f0b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b8				  -	      ERR
      6  f0b8					      ENDIF
      7  f0b8
      8  f0b8					      IF	.CYCLES & 1
      9  f0b8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b8		       04 00		      nop	0
     11  f0ba				  -	      ELSE
     12  f0ba				  -	      bit	VSYNC
     13  f0ba					      ENDIF
     14  f0ba				   .CYCLES    SET	.CYCLES - 3
     15  f0ba					      ENDIF
     16  f0ba
     17  f0ba					      REPEAT	.CYCLES / 2
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     19  f0bc					      REPEND
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc					      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 0c		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc					      ifconst	PFcolors
    306  f0dc		       8a		      txa
    307  f0dd		       a8		      tay
    308  f0de		       b1 f0		      lda	(pfcolortable),y
    309  f0e0					      ifnconst	backgroundchange
    310  f0e0		       85 08		      sta	COLUPF
    311  f0e2				  -	      else
    312  f0e2				  -	      sta	COLUBK
    313  f0e2					      endif
    314  f0e2		       4c 8f f0 	      jmp	continuekernel
    315  f0e5				  -	      else
    316  f0e5				  -	      ifconst	kernelmacrodef
    317  f0e5				  -	      kernelmacro
    318  f0e5				  -	      else
    319  f0e5				  -	      sleep	12
    320  f0e5				  -	      endif
    321  f0e5					      endif
    322  f0e5				  -	      else
    323  f0e5				  -	      lda	(player0color),y
    324  f0e5				  -	      sta	player0colorstore
    325  f0e5				  -	      sleep	4
    326  f0e5					      endif
    327  f0e5		       4c 8f f0 	      jmp	continuekernel
    328  f0e8					      endif
    329  f0e8				   altkernel2
    330  f0e8		       8a		      txa
    331  f0e9					      ifnconst	vertical_reflect
    332  f0e9		       cb fc		      sbx	#256-pfwidth
    333  f0eb				  -	      else
    334  f0eb				  -	      sbx	#256-pfwidth/2
    335  f0eb					      endif
    336  f0eb		       30 24		      bmi	lastkernelline
    337  f0ed				  -	      ifconst	pfrowheight
    338  f0ed				  -	      lda	#pfrowheight
    339  f0ed					      else
    340  f0ed					      ifnconst	pfres
    341  f0ed		       a9 08		      lda	#8
    342  f0ef				  -	      else
    343  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ef					      endif
    345  f0ef					      endif
    346  f0ef		       85 9c		      sta	temp1
    347  f0f1		       4c 8f f0 	      jmp	continuekernel
    348  f0f4					      endif
    349  f0f4
    350  f0f4				   altkernel
    351  f0f4
    352  f0f4				  -	      ifconst	PFmaskvalue
    353  f0f4				  -	      lda	#PFmaskvalue
    354  f0f4					      else
    355  f0f4		       a9 00		      lda	#0
    356  f0f6					      endif
    357  f0f6		       85 0e		      sta	PF1L
    358  f0f8		       85 0f		      sta	PF2
    359  f0fa
    360  f0fa
    361  f0fa							;sleep 3
    362  f0fa
    363  f0fa							;28 cycles to fix things
    364  f0fa							;minus 11=17
    365  f0fa
    366  f0fa							; lax temp4
    367  f0fa							; clc
    368  f0fa		       8a		      txa
    369  f0fb					      ifnconst	vertical_reflect
    370  f0fb		       cb fc		      sbx	#256-pfwidth
    371  f0fd				  -	      else
    372  f0fd				  -	      sbx	#256-pfwidth/2
    373  f0fd					      endif
    374  f0fd
    375  f0fd		       30 12		      bmi	lastkernelline
    376  f0ff
    377  f0ff				  -	      ifconst	PFcolorandheight
    378  f0ff				  -	      ifconst	pfres
    379  f0ff				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ff				  -	      else
    381  f0ff				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ff				  -	      endif
    383  f0ff				  -	      ifnconst	backgroundchange
    384  f0ff				  -	      sty	COLUPF
    385  f0ff				  -	      else
    386  f0ff				  -	      sty	COLUBK
    387  f0ff				  -	      endif
    388  f0ff				  -	      ifconst	pfres
    389  f0ff				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ff				  -	      else
    391  f0ff				  -	      lda	playfieldcolorandheight-88,x
    392  f0ff				  -	      endif
    393  f0ff				  -	      sta.w	temp1
    394  f0ff					      endif
    395  f0ff				  -	      ifconst	PFheights
    396  f0ff				  -	      lsr
    397  f0ff				  -	      lsr
    398  f0ff				  -	      tay
    399  f0ff				  -	      lda	(pfheighttable),y
    400  f0ff				  -	      sta.w	temp1
    401  f0ff					      endif
    402  f0ff					      ifconst	PFcolors
    403  f0ff		       a8		      tay
    404  f100		       b1 f0		      lda	(pfcolortable),y
    405  f102					      ifnconst	backgroundchange
    406  f102		       85 08		      sta	COLUPF
    407  f104				  -	      else
    408  f104				  -	      sta	COLUBK
    409  f104					      endif
    410  f104				  -	      ifconst	pfrowheight
    411  f104				  -	      lda	#pfrowheight
    412  f104					      else
    413  f104					      ifnconst	pfres
    414  f104		       a9 08		      lda	#8
    415  f106				  -	      else
    416  f106				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f106					      endif
    418  f106					      endif
    419  f106		       85 9c		      sta	temp1
    420  f108					      endif
    421  f108					      ifnconst	PFcolorandheight
    422  f108				  -	      ifnconst	PFcolors
    423  f108				  -	      ifnconst	PFheights
    424  f108				  -	      ifnconst	no_blank_lines
    425  f108				  -			; read paddle 0
    426  f108				  -			; lo-res paddle read
    427  f108				  -			; bit INPT0
    428  f108				  -			; bmi paddleskipread
    429  f108				  -			; inc paddle0
    430  f108				  -			;donepaddleskip
    431  f108				  -	      sleep	10
    432  f108				  -	      ifconst	pfrowheight
    433  f108				  -	      lda	#pfrowheight
    434  f108				  -	      else
    435  f108				  -	      ifnconst	pfres
    436  f108				  -	      lda	#8
    437  f108				  -	      else
    438  f108				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f108				  -	      endif
    440  f108				  -	      endif
    441  f108				  -	      sta	temp1
    442  f108				  -	      endif
    443  f108				  -	      endif
    444  f108					      endif
    445  f108					      endif
    446  f108
    447  f108
    448  f108		       a5 92		      lda	ballheight
    449  f10a		       c7 89		      dcp	bally
    450  f10c		       e5 9f		      sbc	temp4
    451  f10e
    452  f10e
    453  f10e		       4c a6 f0 	      jmp	goback
    454  f111
    455  f111
    456  f111				  -	      ifnconst	no_blank_lines
    457  f111				  -lastkernelline
    458  f111				  -	      ifnconst	PFcolors
    459  f111				  -	      sleep	10
    460  f111				  -	      else
    461  f111				  -	      ldy	#124
    462  f111				  -	      lda	(pfcolortable),y
    463  f111				  -	      sta	COLUPF
    464  f111				  -	      endif
    465  f111				  -
    466  f111				  -	      ifconst	PFheights
    467  f111				  -	      ldx	#1
    468  f111				  -			;sleep 4
    469  f111				  -	      sleep	3	; this was over 1 cycle
    470  f111				  -	      else
    471  f111				  -	      ldx	playfieldpos
    472  f111				  -			;sleep 3
    473  f111				  -	      sleep	2	; this was over 1 cycle
    474  f111				  -	      endif
    475  f111				  -
    476  f111				  -	      jmp	enterlastkernel
    477  f111				  -
    478  f111					      else
    479  f111				   lastkernelline
    480  f111
    481  f111				  -	      ifconst	PFheights
    482  f111				  -	      ldx	#1
    483  f111				  -			;sleep 5
    484  f111				  -	      sleep	4	; this was over 1 cycle
    485  f111					      else
    486  f111		       a6 ef		      ldx	playfieldpos
    487  f113							;sleep 4
      0  f113					      sleep	3	; this was over 1 cycle
      1  f113				   .CYCLES    SET	3
      2  f113
      3  f113				  -	      IF	.CYCLES < 2
      4  f113				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f113				  -	      ERR
      6  f113					      ENDIF
      7  f113
      8  f113					      IF	.CYCLES & 1
      9  f113					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f113		       04 00		      nop	0
     11  f115				  -	      ELSE
     12  f115				  -	      bit	VSYNC
     13  f115					      ENDIF
     14  f115				   .CYCLES    SET	.CYCLES - 3
     15  f115					      ENDIF
     16  f115
     17  f115				  -	      REPEAT	.CYCLES / 2
     18  f115				  -	      nop
     19  f115					      REPEND
    489  f115					      endif
    490  f115
    491  f115		       e0 00		      cpx	#0
    492  f117		       d0 0a		      bne	.enterfromNBL
    493  f119		       4c 84 f1 	      jmp	no_blank_lines_bailout
    494  f11c					      endif
    495  f11c
    496  f11c				  -	      if	((<*)>$d5)
    497  f11c				  -	      align	256
    498  f11c					      endif
    499  f11c							; this is a kludge to prevent page wrapping - fix!!!
    500  f11c
    501  f11c				   .skipDrawlastP1
    502  f11c		       a9 00		      lda	#0
    503  f11e		       a8		      tay		; added so we don't cross a page
    504  f11f		       4c 49 f1 	      jmp	.continuelastP1
    505  f122
    506  f122				   .endkerloop		; enter at cycle 59??
    507  f122
    508  f122		       ea		      nop
    509  f123
    510  f123				   .enterfromNBL
    511  f123				  -	      ifconst	pfres
    512  f123				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f123				  -	      sty	PF1L	;3
    514  f123				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f123				  -	      sty	PF2L	;3
    516  f123				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f123				  -	      sty	PF1R	; possibly too early?
    518  f123				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f123				  -	      sty	PF2R	;3
    520  f123					      else
    521  f123		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f126		       84 0e		      sty	PF1L	;3
    523  f128		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f12b		       84 0f		      sty	PF2L	;3
    525  f12d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f130		       84 0e		      sty	PF1R	; possibly too early?
    527  f132		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f135		       84 0f		      sty	PF2R	;3
    529  f137					      endif
    530  f137
    531  f137				   enterlastkernel
    532  f137		       a5 92		      lda	ballheight
    533  f139
    534  f139							; tya
    535  f139		       c7 89		      dcp	bally
    536  f13b							; sleep 4
    537  f13b
    538  f13b							; sbc stack3
    539  f13b		       2a		      rol
    540  f13c		       2a		      rol
    541  f13d		       85 1f		      sta	ENABL
    542  f13f
    543  f13f		       a5 8f		      lda	player1height	;3
    544  f141		       c7 86		      dcp	player1y	;5
    545  f143		       90 d7		      bcc	.skipDrawlastP1
    546  f145		       a4 86		      ldy	player1y	;3
    547  f147		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f149							; so it doesn't cross a page boundary!
    549  f149
    550  f149				   .continuelastP1
    551  f149		       85 1c		      sta	GRP1	;3
    552  f14b
    553  f14b				  -	      ifnconst	player1colors
    554  f14b				  -	      lda	missile1height	;3
    555  f14b				  -	      dcp	missile1y	;5
    556  f14b					      else
    557  f14b		       b1 87		      lda	(player1color),y
    558  f14d		       85 07		      sta	COLUP1
    559  f14f					      endif
    560  f14f
    561  f14f		       ca		      dex
    562  f150							;dec temp4 ; might try putting this above PF writes
    563  f150		       f0 34		      beq	endkernel
    564  f152
    565  f152
    566  f152				  -	      ifconst	pfres
    567  f152				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f152				  -	      sty	PF1L	;3
    569  f152				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f152				  -	      sty	PF2L	;3
    571  f152				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f152				  -	      sty	PF1R	; possibly too early?
    573  f152				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f152				  -	      sty	PF2R	;3
    575  f152					      else
    576  f152		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f155		       84 0e		      sty	PF1L	;3
    578  f157		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f15a		       84 0f		      sty	PF2L	;3
    580  f15c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f15f		       84 0e		      sty	PF1R	; possibly too early?
    582  f161		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f164		       84 0f		      sty	PF2R	;3
    584  f166					      endif
    585  f166
    586  f166				  -	      ifnconst	player1colors
    587  f166				  -	      rol		;2
    588  f166				  -	      rol		;2
    589  f166				  -	      sta	ENAM1	;3
    590  f166					      else
    591  f166					      ifnconst	playercolors
      0  f166					      sleep	7
      1  f166				   .CYCLES    SET	7
      2  f166
      3  f166				  -	      IF	.CYCLES < 2
      4  f166				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f166				  -	      ERR
      6  f166					      ENDIF
      7  f166
      8  f166					      IF	.CYCLES & 1
      9  f166					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f166		       04 00		      nop	0
     11  f168				  -	      ELSE
     12  f168				  -	      bit	VSYNC
     13  f168					      ENDIF
     14  f168				   .CYCLES    SET	.CYCLES - 3
     15  f168					      ENDIF
     16  f168
     17  f168					      REPEAT	.CYCLES / 2
     18  f168		       ea		      nop
     17  f168					      REPEND
     18  f169		       ea		      nop
     19  f16a					      REPEND
    593  f16a				  -	      else
    594  f16a				  -	      lda.w	player0colorstore
    595  f16a				  -	      sta	COLUP0
    596  f16a					      endif
    597  f16a					      endif
    598  f16a
    599  f16a		       ad 8e 00 	      lda.w	player0height
    600  f16d		       c7 85		      dcp	player0y
    601  f16f		       90 0d		      bcc	.skipDrawlastP0
    602  f171		       a4 85		      ldy	player0y
    603  f173		       b1 8a		      lda	(player0pointer),y
    604  f175				   .continuelastP0
    605  f175		       85 1b		      sta	GRP0
    606  f177
    607  f177
    608  f177
    609  f177				  -	      ifnconst	no_blank_lines
    610  f177				  -	      lda	missile0height	;3
    611  f177				  -	      dcp	missile0y	;5
    612  f177				  -	      sbc	stack1
    613  f177				  -	      sta	ENAM0	;3
    614  f177				  -	      jmp	.endkerloop
    615  f177					      else
    616  f177				  -	      ifconst	readpaddle
    617  f177				  -	      ldy	currentpaddle
    618  f177				  -	      lda	INPT0,y
    619  f177				  -	      bpl	noreadpaddle2
    620  f177				  -	      inc	paddle
    621  f177				  -	      jmp	.endkerloop
    622  f177				  -noreadpaddle2
    623  f177				  -	      sleep	4
    624  f177				  -	      jmp	.endkerloop
    625  f177					      else		; no_blank_lines and no paddle reading
    626  f177		       68		      pla
    627  f178		       48		      pha		; 14 cycles in 4 bytes
    628  f179		       68		      pla
    629  f17a		       48		      pha
    630  f17b							; sleep 14
    631  f17b		       4c 22 f1 	      jmp	.endkerloop
    632  f17e					      endif
    633  f17e					      endif
    634  f17e
    635  f17e
    636  f17e							; ifconst donepaddleskip
    637  f17e							;paddleskipread
    638  f17e							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f17e							; plus we get a lo-res paddle read
    640  f17e							; bmi donepaddleskip
    641  f17e							; endif
    642  f17e
    643  f17e				   .skipDrawlastP0
    644  f17e		       a9 00		      lda	#0
    645  f180		       a8		      tay
    646  f181		       4c 75 f1 	      jmp	.continuelastP0
    647  f184
    648  f184					      ifconst	no_blank_lines
    649  f184				   no_blank_lines_bailout
    650  f184		       a2 00		      ldx	#0
    651  f186					      endif
    652  f186
    653  f186				   endkernel
    654  f186							; 6 digit score routine
    655  f186		       86 0e		      stx	PF1
    656  f188		       86 0f		      stx	PF2
    657  f18a		       86 0d		      stx	PF0
    658  f18c		       18		      clc
    659  f18d
    660  f18d				  -	      ifconst	pfrowheight
    661  f18d				  -	      lda	#pfrowheight+2
    662  f18d					      else
    663  f18d					      ifnconst	pfres
    664  f18d		       a9 0a		      lda	#10
    665  f18f				  -	      else
    666  f18f				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f18f					      endif
    668  f18f					      endif
    669  f18f
    670  f18f		       e5 ef		      sbc	playfieldpos
    671  f191		       85 ef		      sta	playfieldpos
    672  f193		       8a		      txa
    673  f194
    674  f194				  -	      ifconst	shakescreen
    675  f194				  -	      bit	shakescreen
    676  f194				  -	      bmi	noshakescreen2
    677  f194				  -	      ldx	#$3D
    678  f194				  -noshakescreen2
    679  f194					      endif
    680  f194
    681  f194		       95 02		      sta	WSYNC,x
    682  f196
    683  f196							; STA WSYNC ;first one, need one more
    684  f196		       85 0b		      sta	REFP0
    685  f198		       85 0c		      sta	REFP1
    686  f19a		       85 1b		      STA	GRP0
    687  f19c		       85 1c		      STA	GRP1
    688  f19e							; STA PF1
    689  f19e							; STA PF2
    690  f19e		       85 2b		      sta	HMCLR
    691  f1a0		       85 1d		      sta	ENAM0
    692  f1a2		       85 1e		      sta	ENAM1
    693  f1a4		       85 1f		      sta	ENABL
    694  f1a6
    695  f1a6		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f1a8		       85 85		      sta	player0y
    697  f1aa		       a5 9e		      lda	temp3
    698  f1ac		       85 86		      sta	player1y
    699  f1ae				  -	      ifnconst	player1colors
    700  f1ae				  -	      lda	temp6
    701  f1ae				  -	      sta	missile1y
    702  f1ae					      endif
    703  f1ae					      ifnconst	playercolors
    704  f1ae					      ifnconst	readpaddle
    705  f1ae		       a5 a0		      lda	temp5
    706  f1b0		       85 91		      sta	missile0y
    707  f1b2					      endif
    708  f1b2					      endif
    709  f1b2		       a5 f7		      lda	stack2
    710  f1b4		       85 89		      sta	bally
    711  f1b6
    712  f1b6							; strangely, this isn't required any more. might have
    713  f1b6							; resulted from the no_blank_lines score bounce fix
    714  f1b6							;ifconst no_blank_lines
    715  f1b6							;sta WSYNC
    716  f1b6							;endif
    717  f1b6
    718  f1b6		       ad 84 02 	      lda	INTIM
    719  f1b9		       18		      clc
    720  f1ba					      ifnconst	vblank_time
    721  f1ba		       69 8e		      adc	#43+12+87
    722  f1bc				  -	      else
    723  f1bc				  -	      adc	#vblank_time+12+87
    724  f1bc				  -
    725  f1bc					      endif
    726  f1bc							; sta WSYNC
    727  f1bc		       8d 96 02 	      sta	TIM64T
    728  f1bf
    729  f1bf				  -	      ifconst	minikernel
    730  f1bf				  -	      jsr	minikernel
    731  f1bf					      endif
    732  f1bf
    733  f1bf							; now reassign temp vars for score pointers
    734  f1bf
    735  f1bf							; score pointers contain:
    736  f1bf							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1bf							; swap lo2->temp1
    738  f1bf							; swap lo4->temp3
    739  f1bf							; swap lo6->temp5
    740  f1bf					      ifnconst	noscore
    741  f1bf		       a5 97		      lda	scorepointers+1
    742  f1c1							; ldy temp1
    743  f1c1		       85 9c		      sta	temp1
    744  f1c3							; sty scorepointers+1
    745  f1c3
    746  f1c3		       a5 99		      lda	scorepointers+3
    747  f1c5							; ldy temp3
    748  f1c5		       85 9e		      sta	temp3
    749  f1c7							; sty scorepointers+3
    750  f1c7
    751  f1c7
    752  f1c7		       85 2b		      sta	HMCLR
    753  f1c9		       ba		      tsx
    754  f1ca		       86 f6		      stx	stack1
    755  f1cc		       a2 e0		      ldx	#$E0
    756  f1ce		       86 20		      stx	HMP0
    757  f1d0
    758  f1d0		       a5 a3		      LDA	scorecolor
    759  f1d2		       85 06		      STA	COLUP0
    760  f1d4		       85 07		      STA	COLUP1
    761  f1d6				  -	      ifconst	scorefade
    762  f1d6				  -	      STA	stack2
    763  f1d6					      endif
    764  f1d6				  -	      ifconst	pfscore
    765  f1d6				  -	      lda	pfscorecolor
    766  f1d6				  -	      sta	COLUPF
    767  f1d6					      endif
    768  f1d6		       85 02		      sta	WSYNC
    769  f1d8		       a2 00		      ldx	#0
    770  f1da		       86 1b		      STx	GRP0
    771  f1dc		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1de
    773  f1de		       a5 9b		      lda	scorepointers+5
    774  f1e0							; ldy temp5
    775  f1e0		       95 a0		      sta	temp5,x
    776  f1e2							; sty scorepointers+5
    777  f1e2		       a9 ff		      lda	#>scoretable
    778  f1e4		       85 97		      sta	scorepointers+1
    779  f1e6		       85 99		      sta	scorepointers+3
    780  f1e8		       85 9b		      sta	scorepointers+5
    781  f1ea		       85 9d		      sta	temp2
    782  f1ec		       85 9f		      sta	temp4
    783  f1ee		       85 a1		      sta	temp6
    784  f1f0		       a0 07		      LDY	#7
    785  f1f2		       84 25		      STY	VDELP0
    786  f1f4		       85 10		      STA	RESP0
    787  f1f6		       85 11		      STA	RESP1
    788  f1f8
    789  f1f8
    790  f1f8		       a9 03		      LDA	#$03
    791  f1fa		       85 04		      STA	NUSIZ0
    792  f1fc		       85 05		      STA	NUSIZ1
    793  f1fe		       85 26		      STA	VDELP1
    794  f200		       a9 f0		      LDA	#$F0
    795  f202		       85 21		      STA	HMP1
    796  f204		       b1 96		      lda	(scorepointers),y
    797  f206		       85 1b		      sta	GRP0
    798  f208		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f20a		       4c 15 f2 	      jmp	beginscore
    800  f20d
    801  f20d
    802  f20d				  -	      if	((<*)>$d4)
    803  f20d				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f20d					      endif
    805  f20d
    806  f20d				   loop2
    807  f20d		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f20f		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f211				  -	      ifconst	pfscore
    810  f211				  -	      lda.w	pfscore1
    811  f211				  -	      sta	PF1
    812  f211					      else
    813  f211				  -	      ifconst	scorefade
    814  f211				  -	      sleep	2
    815  f211				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f211					      else
      0  f211					      sleep	7
      1  f211				   .CYCLES    SET	7
      2  f211
      3  f211				  -	      IF	.CYCLES < 2
      4  f211				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f211				  -	      ERR
      6  f211					      ENDIF
      7  f211
      8  f211					      IF	.CYCLES & 1
      9  f211					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f211		       04 00		      nop	0
     11  f213				  -	      ELSE
     12  f213				  -	      bit	VSYNC
     13  f213					      ENDIF
     14  f213				   .CYCLES    SET	.CYCLES - 3
     15  f213					      ENDIF
     16  f213
     17  f213					      REPEAT	.CYCLES / 2
     18  f213		       ea		      nop
     17  f213					      REPEND
     18  f214		       ea		      nop
     19  f215					      REPEND
    818  f215					      endif
    819  f215					      endif
    820  f215							; cycle 0
    821  f215				   beginscore
    822  f215		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f217		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f219		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f21b		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f21d		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21f		       9a		      txs
    828  f220		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f222				  -	      ifconst	scorefade
    830  f222				  -	      lda	stack2
    831  f222					      else
      0  f222					      sleep	3
      1  f222				   .CYCLES    SET	3
      2  f222
      3  f222				  -	      IF	.CYCLES < 2
      4  f222				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f222				  -	      ERR
      6  f222					      ENDIF
      7  f222
      8  f222					      IF	.CYCLES & 1
      9  f222					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f222		       04 00		      nop	0
     11  f224				  -	      ELSE
     12  f224				  -	      bit	VSYNC
     13  f224					      ENDIF
     14  f224				   .CYCLES    SET	.CYCLES - 3
     15  f224					      ENDIF
     16  f224
     17  f224				  -	      REPEAT	.CYCLES / 2
     18  f224				  -	      nop
     19  f224					      REPEND
    833  f224					      endif
    834  f224
    835  f224				  -	      ifconst	pfscore
    836  f224				  -	      lda	pfscore2
    837  f224				  -	      sta	PF1
    838  f224					      else
    839  f224				  -	      ifconst	scorefade
    840  f224				  -	      sta	COLUP0
    841  f224				  -	      sta	COLUP1
    842  f224					      else
      0  f224					      sleep	6
      1  f224				   .CYCLES    SET	6
      2  f224
      3  f224				  -	      IF	.CYCLES < 2
      4  f224				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f224				  -	      ERR
      6  f224					      ENDIF
      7  f224
      8  f224				  -	      IF	.CYCLES & 1
      9  f224				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f224				  -	      nop	0
     11  f224				  -	      ELSE
     12  f224				  -	      bit	VSYNC
     13  f224				  -	      ENDIF
     14  f224				  -.CYCLES    SET	.CYCLES - 3
     15  f224					      ENDIF
     16  f224
     17  f224					      REPEAT	.CYCLES / 2
     18  f224		       ea		      nop
     17  f224					      REPEND
     18  f225		       ea		      nop
     17  f225					      REPEND
     18  f226		       ea		      nop
     19  f227					      REPEND
    844  f227					      endif
    845  f227					      endif
    846  f227
    847  f227		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f229		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f22b		       ba		      tsx
    850  f22c		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22e		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f230		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f232		       88		      dey
    854  f233		       10 d8		      bpl	loop2	;+2 60 180
    855  f235
    856  f235		       a6 f6		      ldx	stack1
    857  f237		       9a		      txs
    858  f238							; lda scorepointers+1
    859  f238		       a4 9c		      ldy	temp1
    860  f23a							; sta temp1
    861  f23a		       84 97		      sty	scorepointers+1
    862  f23c
    863  f23c		       a9 00		      LDA	#0
    864  f23e		       85 0e		      sta	PF1
    865  f240		       85 1b		      STA	GRP0
    866  f242		       85 1c		      STA	GRP1
    867  f244		       85 25		      STA	VDELP0
    868  f246		       85 26		      STA	VDELP1	;do we need these
    869  f248		       85 04		      STA	NUSIZ0
    870  f24a		       85 05		      STA	NUSIZ1
    871  f24c
    872  f24c							; lda scorepointers+3
    873  f24c		       a4 9e		      ldy	temp3
    874  f24e							; sta temp3
    875  f24e		       84 99		      sty	scorepointers+3
    876  f250
    877  f250							; lda scorepointers+5
    878  f250		       a4 a0		      ldy	temp5
    879  f252							; sta temp5
    880  f252		       84 9b		      sty	scorepointers+5
    881  f254					      endif		;noscore
    882  f254				  -	      ifconst	readpaddle
    883  f254				  -	      lda	#%11000010
    884  f254					      else
    885  f254				  -	      ifconst	qtcontroller
    886  f254				  -	      lda	qtcontroller
    887  f254				  -	      lsr		; bit 0 in carry
    888  f254				  -	      lda	#4
    889  f254				  -	      ror		; carry into top of A
    890  f254					      else
    891  f254		       a9 02		      lda	#2
    892  f256					      endif		; qtcontroller
    893  f256					      endif		; readpaddle
    894  f256		       85 02		      sta	WSYNC
    895  f258		       85 01		      sta	VBLANK
      0  f25a					      RETURN
      1  f25a					      ifnconst	bankswitch
      2  f25a		       60		      rts
      3  f25b				  -	      else
      4  f25b				  -	      jmp	BS_return
      5  f25b					      endif
    897  f25b				  -	      ifconst	shakescreen
    898  f25b				  -doshakescreen
    899  f25b				  -	      bit	shakescreen
    900  f25b				  -	      bmi	noshakescreen
    901  f25b				  -	      sta	WSYNC
    902  f25b				  -noshakescreen
    903  f25b				  -	      ldx	missile0height
    904  f25b				  -	      inx
    905  f25b				  -	      rts
    906  f25b					      endif
    907  f25b
    908  f25b							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f25b
    910  f25b							; playfield drawing routines
    911  f25b							; you get a 32x12 bitmapped display in a single color :)
    912  f25b							; 0-31 and 0-11
    913  f25b
    914  f25b				   pfclear		; clears playfield - or fill with pattern
    915  f25b				  -	      ifconst	pfres
    916  f25b				  -	      ldx	#pfres*pfwidth-1
    917  f25b					      else
    918  f25b		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f25d					      endif
    920  f25d				   pfclear_loop
    921  f25d					      ifnconst	superchip
    922  f25d		       95 a4		      sta	playfield,x
    923  f25f				  -	      else
    924  f25f				  -	      sta	playfield-128,x
    925  f25f					      endif
    926  f25f		       ca		      dex
    927  f260		       10 fb		      bpl	pfclear_loop
      0  f262					      RETURN
      1  f262					      ifnconst	bankswitch
      2  f262		       60		      rts
      3  f263				  -	      else
      4  f263				  -	      jmp	BS_return
      5  f263					      endif
    929  f263
    930  f263				   setuppointers
    931  f263		       86 9d		      stx	temp2	; store on.off.flip value
    932  f265		       aa		      tax		; put x-value in x 
    933  f266		       4a		      lsr
    934  f267		       4a		      lsr
    935  f268		       4a		      lsr		; divide x pos by 8 
    936  f269		       85 9c		      sta	temp1
    937  f26b		       98		      tya
    938  f26c		       0a		      asl
    939  f26d					      if	pfwidth=4
    940  f26d		       0a		      asl		; multiply y pos by 4
    941  f26e					      endif		; else multiply by 2
    942  f26e		       18		      clc
    943  f26f		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f271		       a8		      tay		; put the value in y
    945  f272		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f274		       60		      rts
    947  f275
    948  f275				   pfread
    949  f275							;x=xvalue, y=yvalue
    950  f275		       20 63 f2 	      jsr	setuppointers
    951  f278		       bd dd f2 	      lda	setbyte,x
    952  f27b		       39 a4 00 	      and	playfield,y
    953  f27e		       5d dd f2 	      eor	setbyte,x
    954  f281							; beq readzero
    955  f281							; lda #1
    956  f281							; readzero
      0  f281					      RETURN
      1  f281					      ifnconst	bankswitch
      2  f281		       60		      rts
      3  f282				  -	      else
      4  f282				  -	      jmp	BS_return
      5  f282					      endif
    958  f282
    959  f282				   pfpixel
    960  f282							;x=xvalue, y=yvalue, a=0,1,2
    961  f282		       20 63 f2 	      jsr	setuppointers
    962  f285
    963  f285				  -	      ifconst	bankswitch
    964  f285				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f285				  -	      beq	pixelon_r	; if "on" go to on
    966  f285				  -	      lsr
    967  f285				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f285				  -	      lda	playfield,y	; if here, it's "flip"
    969  f285				  -	      eor	setbyte,x
    970  f285				  -	      ifconst	superchip
    971  f285				  -	      sta	playfield-128,y
    972  f285				  -	      else
    973  f285				  -	      sta	playfield,y
    974  f285				  -	      endif
    975  f285				  -	      RETURN
    976  f285				  -pixelon_r
    977  f285				  -	      lda	playfield,y
    978  f285				  -	      ora	setbyte,x
    979  f285				  -	      ifconst	superchip
    980  f285				  -	      sta	playfield-128,y
    981  f285				  -	      else
    982  f285				  -	      sta	playfield,y
    983  f285				  -	      endif
    984  f285				  -	      RETURN
    985  f285				  -pixeloff_r
    986  f285				  -	      lda	setbyte,x
    987  f285				  -	      eor	#$ff
    988  f285				  -	      and	playfield,y
    989  f285				  -	      ifconst	superchip
    990  f285				  -	      sta	playfield-128,y
    991  f285				  -	      else
    992  f285				  -	      sta	playfield,y
    993  f285				  -	      endif
    994  f285				  -	      RETURN
    995  f285				  -
    996  f285					      else
    997  f285		       4c b6 f2 	      jmp	plotpoint
    998  f288					      endif
    999  f288
   1000  f288				   pfhline
   1001  f288							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f288		       20 63 f2 	      jsr	setuppointers
   1003  f28b		       4c 95 f2 	      jmp	noinc
   1004  f28e				   keepgoing
   1005  f28e		       e8		      inx
   1006  f28f		       8a		      txa
   1007  f290		       29 07		      and	#7
   1008  f292		       d0 01		      bne	noinc
   1009  f294		       c8		      iny
   1010  f295				   noinc
   1011  f295		       20 b6 f2 	      jsr	plotpoint
   1012  f298		       e4 9e		      cpx	temp3
   1013  f29a		       30 f2		      bmi	keepgoing
      0  f29c					      RETURN
      1  f29c					      ifnconst	bankswitch
      2  f29c		       60		      rts
      3  f29d				  -	      else
      4  f29d				  -	      jmp	BS_return
      5  f29d					      endif
   1015  f29d
   1016  f29d				   pfvline
   1017  f29d							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f29d		       20 63 f2 	      jsr	setuppointers
   1019  f2a0		       84 9c		      sty	temp1	; store memory location offset
   1020  f2a2		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a4		       a5 9e		      lda	temp3
   1022  f2a6		       0a		      asl
   1023  f2a7					      if	pfwidth=4
   1024  f2a7		       0a		      asl		; multiply by 4
   1025  f2a8					      endif		; else multiply by 2
   1026  f2a8		       85 9e		      sta	temp3	; store it
   1027  f2aa							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2aa							; right now, temp1=y=starting memory location, temp3=final
   1029  f2aa							; x should equal original x value
   1030  f2aa				   keepgoingy
   1031  f2aa		       20 b6 f2 	      jsr	plotpoint
   1032  f2ad		       c8		      iny
   1033  f2ae		       c8		      iny
   1034  f2af					      if	pfwidth=4
   1035  f2af		       c8		      iny
   1036  f2b0		       c8		      iny
   1037  f2b1					      endif
   1038  f2b1		       c4 9e		      cpy	temp3
   1039  f2b3		       30 f5		      bmi	keepgoingy
      0  f2b5					      RETURN
      1  f2b5					      ifnconst	bankswitch
      2  f2b5		       60		      rts
      3  f2b6				  -	      else
      4  f2b6				  -	      jmp	BS_return
      5  f2b6					      endif
   1041  f2b6
   1042  f2b6				   plotpoint
   1043  f2b6		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b8		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2ba		       4a		      lsr
   1046  f2bb		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2bd		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2c0		       5d dd f2 	      eor	setbyte,x
   1049  f2c3				  -	      ifconst	superchip
   1050  f2c3				  -	      sta	playfield-128,y
   1051  f2c3					      else
   1052  f2c3		       99 a4 00 	      sta	playfield,y
   1053  f2c6					      endif
   1054  f2c6		       60		      rts
   1055  f2c7				   pixelon
   1056  f2c7		       b9 a4 00 	      lda	playfield,y
   1057  f2ca		       1d dd f2 	      ora	setbyte,x
   1058  f2cd				  -	      ifconst	superchip
   1059  f2cd				  -	      sta	playfield-128,y
   1060  f2cd					      else
   1061  f2cd		       99 a4 00 	      sta	playfield,y
   1062  f2d0					      endif
   1063  f2d0		       60		      rts
   1064  f2d1				   pixeloff
   1065  f2d1		       bd dd f2 	      lda	setbyte,x
   1066  f2d4		       49 ff		      eor	#$ff
   1067  f2d6		       39 a4 00 	      and	playfield,y
   1068  f2d9				  -	      ifconst	superchip
   1069  f2d9				  -	      sta	playfield-128,y
   1070  f2d9					      else
   1071  f2d9		       99 a4 00 	      sta	playfield,y
   1072  f2dc					      endif
   1073  f2dc		       60		      rts
   1074  f2dd
   1075  f2dd				   setbyte
   1076  f2dd					      ifnconst	pfcenter
   1077  f2dd		       80		      .byte.b	$80
   1078  f2de		       40		      .byte.b	$40
   1079  f2df		       20		      .byte.b	$20
   1080  f2e0		       10		      .byte.b	$10
   1081  f2e1		       08		      .byte.b	$08
   1082  f2e2		       04		      .byte.b	$04
   1083  f2e3		       02		      .byte.b	$02
   1084  f2e4		       01		      .byte.b	$01
   1085  f2e5					      endif
   1086  f2e5		       01		      .byte.b	$01
   1087  f2e6		       02		      .byte.b	$02
   1088  f2e7		       04		      .byte.b	$04
   1089  f2e8		       08		      .byte.b	$08
   1090  f2e9		       10		      .byte.b	$10
   1091  f2ea		       20		      .byte.b	$20
   1092  f2eb		       40		      .byte.b	$40
   1093  f2ec		       80		      .byte.b	$80
   1094  f2ed		       80		      .byte.b	$80
   1095  f2ee		       40		      .byte.b	$40
   1096  f2ef		       20		      .byte.b	$20
   1097  f2f0		       10		      .byte.b	$10
   1098  f2f1		       08		      .byte.b	$08
   1099  f2f2		       04		      .byte.b	$04
   1100  f2f3		       02		      .byte.b	$02
   1101  f2f4		       01		      .byte.b	$01
   1102  f2f5		       01		      .byte.b	$01
   1103  f2f6		       02		      .byte.b	$02
   1104  f2f7		       04		      .byte.b	$04
   1105  f2f8		       08		      .byte.b	$08
   1106  f2f9		       10		      .byte.b	$10
   1107  f2fa		       20		      .byte.b	$20
   1108  f2fb		       40		      .byte.b	$40
   1109  f2fc		       80		      .byte.b	$80
   1110  f2fd							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2fd
   1112  f2fd				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2fd		       d0 13		      bne	notleft
   1114  f2ff							;left
   1115  f2ff				  -	      ifconst	pfres
   1116  f2ff				  -	      ldx	#pfres*4
   1117  f2ff					      else
   1118  f2ff		       a2 30		      ldx	#48
   1119  f301					      endif
   1120  f301				   leftloop
   1121  f301		       b5 a3		      lda	playfield-1,x
   1122  f303		       4a		      lsr
   1123  f304
   1124  f304				  -	      ifconst	superchip
   1125  f304				  -	      lda	playfield-2,x
   1126  f304				  -	      rol
   1127  f304				  -	      sta	playfield-130,x
   1128  f304				  -	      lda	playfield-3,x
   1129  f304				  -	      ror
   1130  f304				  -	      sta	playfield-131,x
   1131  f304				  -	      lda	playfield-4,x
   1132  f304				  -	      rol
   1133  f304				  -	      sta	playfield-132,x
   1134  f304				  -	      lda	playfield-1,x
   1135  f304				  -	      ror
   1136  f304				  -	      sta	playfield-129,x
   1137  f304					      else
   1138  f304		       36 a2		      rol	playfield-2,x
   1139  f306		       76 a1		      ror	playfield-3,x
   1140  f308		       36 a0		      rol	playfield-4,x
   1141  f30a		       76 a3		      ror	playfield-1,x
   1142  f30c					      endif
   1143  f30c
   1144  f30c		       8a		      txa
   1145  f30d		       cb 04		      sbx	#4
   1146  f30f		       d0 f0		      bne	leftloop
      0  f311					      RETURN
      1  f311					      ifnconst	bankswitch
      2  f311		       60		      rts
      3  f312				  -	      else
      4  f312				  -	      jmp	BS_return
      5  f312					      endif
   1148  f312
   1149  f312				   notleft
   1150  f312		       4a		      lsr
   1151  f313		       90 13		      bcc	notright
   1152  f315							;right
   1153  f315
   1154  f315				  -	      ifconst	pfres
   1155  f315				  -	      ldx	#pfres*4
   1156  f315					      else
   1157  f315		       a2 30		      ldx	#48
   1158  f317					      endif
   1159  f317				   rightloop
   1160  f317		       b5 a0		      lda	playfield-4,x
   1161  f319		       4a		      lsr
   1162  f31a				  -	      ifconst	superchip
   1163  f31a				  -	      lda	playfield-3,x
   1164  f31a				  -	      rol
   1165  f31a				  -	      sta	playfield-131,x
   1166  f31a				  -	      lda	playfield-2,x
   1167  f31a				  -	      ror
   1168  f31a				  -	      sta	playfield-130,x
   1169  f31a				  -	      lda	playfield-1,x
   1170  f31a				  -	      rol
   1171  f31a				  -	      sta	playfield-129,x
   1172  f31a				  -	      lda	playfield-4,x
   1173  f31a				  -	      ror
   1174  f31a				  -	      sta	playfield-132,x
   1175  f31a					      else
   1176  f31a		       36 a1		      rol	playfield-3,x
   1177  f31c		       76 a2		      ror	playfield-2,x
   1178  f31e		       36 a3		      rol	playfield-1,x
   1179  f320		       76 a0		      ror	playfield-4,x
   1180  f322					      endif
   1181  f322		       8a		      txa
   1182  f323		       cb 04		      sbx	#4
   1183  f325		       d0 f0		      bne	rightloop
      0  f327					      RETURN
      1  f327					      ifnconst	bankswitch
      2  f327		       60		      rts
      3  f328				  -	      else
      4  f328				  -	      jmp	BS_return
      5  f328					      endif
   1185  f328
   1186  f328				   notright
   1187  f328		       4a		      lsr
   1188  f329		       90 49		      bcc	notup
   1189  f32b							;up
   1190  f32b		       4a		      lsr
   1191  f32c		       90 02		      bcc	onedecup
   1192  f32e		       c6 ef		      dec	playfieldpos
   1193  f330				   onedecup
   1194  f330		       c6 ef		      dec	playfieldpos
   1195  f332		       f0 02		      beq	shiftdown
   1196  f334		       10 3d		      bpl	noshiftdown2
   1197  f336				   shiftdown
   1198  f336				  -	      ifconst	pfrowheight
   1199  f336				  -	      lda	#pfrowheight
   1200  f336					      else
   1201  f336					      ifnconst	pfres
   1202  f336		       a9 08		      lda	#8
   1203  f338				  -	      else
   1204  f338				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f338					      endif
   1206  f338					      endif
   1207  f338
   1208  f338		       85 ef		      sta	playfieldpos
   1209  f33a		       a5 a7		      lda	playfield+3
   1210  f33c		       85 9f		      sta	temp4
   1211  f33e		       a5 a6		      lda	playfield+2
   1212  f340		       85 9e		      sta	temp3
   1213  f342		       a5 a5		      lda	playfield+1
   1214  f344		       85 9d		      sta	temp2
   1215  f346		       a5 a4		      lda	playfield
   1216  f348		       85 9c		      sta	temp1
   1217  f34a		       a2 00		      ldx	#0
   1218  f34c				   up2
   1219  f34c		       b5 a8		      lda	playfield+4,x
   1220  f34e				  -	      ifconst	superchip
   1221  f34e				  -	      sta	playfield-128,x
   1222  f34e				  -	      lda	playfield+5,x
   1223  f34e				  -	      sta	playfield-127,x
   1224  f34e				  -	      lda	playfield+6,x
   1225  f34e				  -	      sta	playfield-126,x
   1226  f34e				  -	      lda	playfield+7,x
   1227  f34e				  -	      sta	playfield-125,x
   1228  f34e					      else
   1229  f34e		       95 a4		      sta	playfield,x
   1230  f350		       b5 a9		      lda	playfield+5,x
   1231  f352		       95 a5		      sta	playfield+1,x
   1232  f354		       b5 aa		      lda	playfield+6,x
   1233  f356		       95 a6		      sta	playfield+2,x
   1234  f358		       b5 ab		      lda	playfield+7,x
   1235  f35a		       95 a7		      sta	playfield+3,x
   1236  f35c					      endif
   1237  f35c		       8a		      txa
   1238  f35d		       cb fc		      sbx	#252
   1239  f35f				  -	      ifconst	pfres
   1240  f35f				  -	      cpx	#(pfres-1)*4
   1241  f35f					      else
   1242  f35f		       e0 2c		      cpx	#44
   1243  f361					      endif
   1244  f361		       d0 e9		      bne	up2
   1245  f363
   1246  f363		       a5 9f		      lda	temp4
   1247  f365
   1248  f365				  -	      ifconst	superchip
   1249  f365				  -	      ifconst	pfres
   1250  f365				  -	      sta	playfield+pfres*4-129
   1251  f365				  -	      lda	temp3
   1252  f365				  -	      sta	playfield+pfres*4-130
   1253  f365				  -	      lda	temp2
   1254  f365				  -	      sta	playfield+pfres*4-131
   1255  f365				  -	      lda	temp1
   1256  f365				  -	      sta	playfield+pfres*4-132
   1257  f365				  -	      else
   1258  f365				  -	      sta	playfield+47-128
   1259  f365				  -	      lda	temp3
   1260  f365				  -	      sta	playfield+46-128
   1261  f365				  -	      lda	temp2
   1262  f365				  -	      sta	playfield+45-128
   1263  f365				  -	      lda	temp1
   1264  f365				  -	      sta	playfield+44-128
   1265  f365				  -	      endif
   1266  f365					      else
   1267  f365				  -	      ifconst	pfres
   1268  f365				  -	      sta	playfield+pfres*4-1
   1269  f365				  -	      lda	temp3
   1270  f365				  -	      sta	playfield+pfres*4-2
   1271  f365				  -	      lda	temp2
   1272  f365				  -	      sta	playfield+pfres*4-3
   1273  f365				  -	      lda	temp1
   1274  f365				  -	      sta	playfield+pfres*4-4
   1275  f365					      else
   1276  f365		       85 d3		      sta	playfield+47
   1277  f367		       a5 9e		      lda	temp3
   1278  f369		       85 d2		      sta	playfield+46
   1279  f36b		       a5 9d		      lda	temp2
   1280  f36d		       85 d1		      sta	playfield+45
   1281  f36f		       a5 9c		      lda	temp1
   1282  f371		       85 d0		      sta	playfield+44
   1283  f373					      endif
   1284  f373					      endif
   1285  f373				   noshiftdown2
      0  f373					      RETURN
      1  f373					      ifnconst	bankswitch
      2  f373		       60		      rts
      3  f374				  -	      else
      4  f374				  -	      jmp	BS_return
      5  f374					      endif
   1287  f374
   1288  f374
   1289  f374				   notup
   1290  f374							;down
   1291  f374		       4a		      lsr
   1292  f375		       b0 02		      bcs	oneincup
   1293  f377		       e6 ef		      inc	playfieldpos
   1294  f379				   oneincup
   1295  f379		       e6 ef		      inc	playfieldpos
   1296  f37b		       a5 ef		      lda	playfieldpos
   1297  f37d
   1298  f37d				  -	      ifconst	pfrowheight
   1299  f37d				  -	      cmp	#pfrowheight+1
   1300  f37d					      else
   1301  f37d					      ifnconst	pfres
   1302  f37d		       c9 09		      cmp	#9
   1303  f37f				  -	      else
   1304  f37f				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f37f					      endif
   1306  f37f					      endif
   1307  f37f
   1308  f37f		       90 3b		      bcc	noshiftdown
   1309  f381		       a9 01		      lda	#1
   1310  f383		       85 ef		      sta	playfieldpos
   1311  f385
   1312  f385				  -	      ifconst	pfres
   1313  f385				  -	      lda	playfield+pfres*4-1
   1314  f385				  -	      sta	temp4
   1315  f385				  -	      lda	playfield+pfres*4-2
   1316  f385				  -	      sta	temp3
   1317  f385				  -	      lda	playfield+pfres*4-3
   1318  f385				  -	      sta	temp2
   1319  f385				  -	      lda	playfield+pfres*4-4
   1320  f385					      else
   1321  f385		       a5 d3		      lda	playfield+47
   1322  f387		       85 9f		      sta	temp4
   1323  f389		       a5 d2		      lda	playfield+46
   1324  f38b		       85 9e		      sta	temp3
   1325  f38d		       a5 d1		      lda	playfield+45
   1326  f38f		       85 9d		      sta	temp2
   1327  f391		       a5 d0		      lda	playfield+44
   1328  f393					      endif
   1329  f393
   1330  f393		       85 9c		      sta	temp1
   1331  f395
   1332  f395				  -	      ifconst	pfres
   1333  f395				  -	      ldx	#(pfres-1)*4
   1334  f395					      else
   1335  f395		       a2 2c		      ldx	#44
   1336  f397					      endif
   1337  f397				   down2
   1338  f397		       b5 a3		      lda	playfield-1,x
   1339  f399				  -	      ifconst	superchip
   1340  f399				  -	      sta	playfield-125,x
   1341  f399				  -	      lda	playfield-2,x
   1342  f399				  -	      sta	playfield-126,x
   1343  f399				  -	      lda	playfield-3,x
   1344  f399				  -	      sta	playfield-127,x
   1345  f399				  -	      lda	playfield-4,x
   1346  f399				  -	      sta	playfield-128,x
   1347  f399					      else
   1348  f399		       95 a7		      sta	playfield+3,x
   1349  f39b		       b5 a2		      lda	playfield-2,x
   1350  f39d		       95 a6		      sta	playfield+2,x
   1351  f39f		       b5 a1		      lda	playfield-3,x
   1352  f3a1		       95 a5		      sta	playfield+1,x
   1353  f3a3		       b5 a0		      lda	playfield-4,x
   1354  f3a5		       95 a4		      sta	playfield,x
   1355  f3a7					      endif
   1356  f3a7		       8a		      txa
   1357  f3a8		       cb 04		      sbx	#4
   1358  f3aa		       d0 eb		      bne	down2
   1359  f3ac
   1360  f3ac		       a5 9f		      lda	temp4
   1361  f3ae				  -	      ifconst	superchip
   1362  f3ae				  -	      sta	playfield-125
   1363  f3ae				  -	      lda	temp3
   1364  f3ae				  -	      sta	playfield-126
   1365  f3ae				  -	      lda	temp2
   1366  f3ae				  -	      sta	playfield-127
   1367  f3ae				  -	      lda	temp1
   1368  f3ae				  -	      sta	playfield-128
   1369  f3ae					      else
   1370  f3ae		       85 a7		      sta	playfield+3
   1371  f3b0		       a5 9e		      lda	temp3
   1372  f3b2		       85 a6		      sta	playfield+2
   1373  f3b4		       a5 9d		      lda	temp2
   1374  f3b6		       85 a5		      sta	playfield+1
   1375  f3b8		       a5 9c		      lda	temp1
   1376  f3ba		       85 a4		      sta	playfield
   1377  f3bc					      endif
   1378  f3bc				   noshiftdown
      0  f3bc					      RETURN
      1  f3bc					      ifnconst	bankswitch
      2  f3bc		       60		      rts
      3  f3bd				  -	      else
      4  f3bd				  -	      jmp	BS_return
      5  f3bd					      endif
   1380  f3bd							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3bd
   1382  f3bd							;standard routines needed for pretty much all games
   1383  f3bd							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3bd							; repositioning code and score pointer setup moved to overscan
   1385  f3bd							; read switches, joysticks now compiler generated (more efficient)
   1386  f3bd
   1387  f3bd				   randomize
   1388  f3bd		       a5 a2		      lda	rand
   1389  f3bf		       4a		      lsr
   1390  f3c0				  -	      ifconst	rand16
   1391  f3c0				  -	      rol	rand16
   1392  f3c0					      endif
   1393  f3c0		       90 02		      bcc	noeor
   1394  f3c2		       49 b4		      eor	#$B4
   1395  f3c4				   noeor
   1396  f3c4		       85 a2		      sta	rand
   1397  f3c6				  -	      ifconst	rand16
   1398  f3c6				  -	      eor	rand16
   1399  f3c6					      endif
      0  f3c6					      RETURN
      1  f3c6					      ifnconst	bankswitch
      2  f3c6		       60		      rts
      3  f3c7				  -	      else
      4  f3c7				  -	      jmp	BS_return
      5  f3c7					      endif
   1401  f3c7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c7
   1403  f3c7				   drawscreen
   1404  f3c7				  -	      ifconst	debugscore
   1405  f3c7				  -	      ldx	#14
   1406  f3c7				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c7				  -
   1408  f3c7				  -	      ifconst	mincycles
   1409  f3c7				  -	      lda	mincycles
   1410  f3c7				  -	      cmp	INTIM
   1411  f3c7				  -	      lda	mincycles
   1412  f3c7				  -	      bcc	nochange
   1413  f3c7				  -	      lda	INTIM
   1414  f3c7				  -	      sta	mincycles
   1415  f3c7				  -nochange
   1416  f3c7				  -	      endif
   1417  f3c7				  -
   1418  f3c7				  -			; cmp #$2B
   1419  f3c7				  -			; bcs no_cycles_left
   1420  f3c7				  -	      bmi	cycles_left
   1421  f3c7				  -	      ldx	#64
   1422  f3c7				  -	      eor	#$ff	;make negative
   1423  f3c7				  -cycles_left
   1424  f3c7				  -	      stx	scorecolor
   1425  f3c7				  -	      and	#$7f	; clear sign bit
   1426  f3c7				  -	      tax
   1427  f3c7				  -	      lda	scorebcd,x
   1428  f3c7				  -	      sta	score+2
   1429  f3c7				  -	      lda	scorebcd1,x
   1430  f3c7				  -	      sta	score+1
   1431  f3c7				  -	      jmp	done_debugscore
   1432  f3c7				  -scorebcd
   1433  f3c7				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c7				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c7				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c7				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c7				  -scorebcd1
   1438  f3c7				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c7				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c7				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c7				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c7				  -done_debugscore
   1443  f3c7					      endif
   1444  f3c7
   1445  f3c7				  -	      ifconst	debugcycles
   1446  f3c7				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c7				  -			; cmp #$2B
   1448  f3c7				  -			; BCC overscan
   1449  f3c7				  -	      bmi	overscan
   1450  f3c7				  -	      sta	COLUBK
   1451  f3c7				  -	      bcs	doneoverscan
   1452  f3c7					      endif
   1453  f3c7
   1454  f3c7				   overscan
   1455  f3c7				  -	      ifconst	interlaced
   1456  f3c7				  -	      PHP
   1457  f3c7				  -	      PLA
   1458  f3c7				  -	      EOR	#4	; flip interrupt bit
   1459  f3c7				  -	      PHA
   1460  f3c7				  -	      PLP
   1461  f3c7				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c7				  -	      TAX		; save it for later
   1463  f3c7					      endif
   1464  f3c7
   1465  f3c7				   overscanloop
   1466  f3c7		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3ca		       30 fb		      bmi	overscanloop
   1468  f3cc				   doneoverscan
   1469  f3cc
   1470  f3cc							;do VSYNC
   1471  f3cc
   1472  f3cc				  -	      ifconst	interlaced
   1473  f3cc				  -	      CPX	#4
   1474  f3cc				  -	      BNE	oddframevsync
   1475  f3cc					      endif
   1476  f3cc
   1477  f3cc		       a9 02		      lda	#2
   1478  f3ce		       85 02		      sta	WSYNC
   1479  f3d0		       85 00		      sta	VSYNC
   1480  f3d2		       85 02		      STA	WSYNC
   1481  f3d4		       85 02		      STA	WSYNC
   1482  f3d6		       4a		      lsr
   1483  f3d7		       85 02		      STA	WSYNC
   1484  f3d9		       85 00		      STA	VSYNC
   1485  f3db		       85 01		      sta	VBLANK
   1486  f3dd					      ifnconst	overscan_time
   1487  f3dd		       a9 a5		      lda	#37+128
   1488  f3df				  -	      else
   1489  f3df				  -	      lda	#overscan_time+128
   1490  f3df					      endif
   1491  f3df		       8d 96 02 	      sta	TIM64T
   1492  f3e2
   1493  f3e2				  -	      ifconst	interlaced
   1494  f3e2				  -	      jmp	postsync
   1495  f3e2				  -
   1496  f3e2				  -oddframevsync
   1497  f3e2				  -	      sta	WSYNC
   1498  f3e2				  -
   1499  f3e2				  -	      LDA	($80,X)	; 11 waste
   1500  f3e2				  -	      LDA	($80,X)	; 11 waste
   1501  f3e2				  -	      LDA	($80,X)	; 11 waste
   1502  f3e2				  -
   1503  f3e2				  -	      lda	#2
   1504  f3e2				  -	      sta	VSYNC
   1505  f3e2				  -	      sta	WSYNC
   1506  f3e2				  -	      sta	WSYNC
   1507  f3e2				  -	      sta	WSYNC
   1508  f3e2				  -
   1509  f3e2				  -	      LDA	($80,X)	; 11 waste
   1510  f3e2				  -	      LDA	($80,X)	; 11 waste
   1511  f3e2				  -	      LDA	($80,X)	; 11 waste
   1512  f3e2				  -
   1513  f3e2				  -	      lda	#0
   1514  f3e2				  -	      sta	VSYNC
   1515  f3e2				  -	      sta	VBLANK
   1516  f3e2				  -	      ifnconst	overscan_time
   1517  f3e2				  -	      lda	#37+128
   1518  f3e2				  -	      else
   1519  f3e2				  -	      lda	#overscan_time+128
   1520  f3e2				  -	      endif
   1521  f3e2				  -	      sta	TIM64T
   1522  f3e2				  -
   1523  f3e2				  -postsync
   1524  f3e2					      endif
   1525  f3e2
   1526  f3e2				  -	      ifconst	legacy
   1527  f3e2				  -	      if	legacy < 100
   1528  f3e2				  -	      ldx	#4
   1529  f3e2				  -adjustloop
   1530  f3e2				  -	      lda	player0x,x
   1531  f3e2				  -	      sec
   1532  f3e2				  -	      sbc	#14	;?
   1533  f3e2				  -	      sta	player0x,x
   1534  f3e2				  -	      dex
   1535  f3e2				  -	      bpl	adjustloop
   1536  f3e2				  -	      endif
   1537  f3e2					      endif
   1538  f3e2				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3e2				  -	      repeat	($fa-(<*))
   1540  f3e2				  -	      nop
   1541  f3e2				  -	      repend
   1542  f3e2					      endif
   1543  f3e2		       85 02		      sta	WSYNC
   1544  f3e4		       a2 04		      ldx	#4
      0  f3e6					      SLEEP	3
      1  f3e6				   .CYCLES    SET	3
      2  f3e6
      3  f3e6				  -	      IF	.CYCLES < 2
      4  f3e6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e6				  -	      ERR
      6  f3e6					      ENDIF
      7  f3e6
      8  f3e6					      IF	.CYCLES & 1
      9  f3e6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e6		       04 00		      nop	0
     11  f3e8				  -	      ELSE
     12  f3e8				  -	      bit	VSYNC
     13  f3e8					      ENDIF
     14  f3e8				   .CYCLES    SET	.CYCLES - 3
     15  f3e8					      ENDIF
     16  f3e8
     17  f3e8				  -	      REPEAT	.CYCLES / 2
     18  f3e8				  -	      nop
     19  f3e8					      REPEND
   1546  f3e8				   HorPosLoop		; 5
   1547  f3e8		       b5 80		      lda	player0x,X	;+4 9
   1548  f3ea		       38		      sec		;+2 11
   1549  f3eb				   DivideLoop
   1550  f3eb		       e9 0f		      sbc	#15
   1551  f3ed		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3ef		       95 9c		      sta	temp1,X	;+4 19
   1553  f3f1		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f3		       85 02		      sta	WSYNC
   1555  f3f5		       ca		      dex
   1556  f3f6		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f8							; 4
   1558  f3f8
   1559  f3f8		       a2 04		      ldx	#4
   1560  f3fa		       b4 9c		      ldy	temp1,X
   1561  f3fc		       b9 58 f3 	      lda	repostable-256,Y
   1562  f3ff		       95 20		      sta	HMP0,X	;+14 18
   1563  f401
   1564  f401		       ca		      dex
   1565  f402		       b4 9c		      ldy	temp1,X
   1566  f404		       b9 58 f3 	      lda	repostable-256,Y
   1567  f407		       95 20		      sta	HMP0,X	;+14 32
   1568  f409
   1569  f409		       ca		      dex
   1570  f40a		       b4 9c		      ldy	temp1,X
   1571  f40c		       b9 58 f3 	      lda	repostable-256,Y
   1572  f40f		       95 20		      sta	HMP0,X	;+14 46
   1573  f411
   1574  f411		       ca		      dex
   1575  f412		       b4 9c		      ldy	temp1,X
   1576  f414		       b9 58 f3 	      lda	repostable-256,Y
   1577  f417		       95 20		      sta	HMP0,X	;+14 60
   1578  f419
   1579  f419		       ca		      dex
   1580  f41a		       b4 9c		      ldy	temp1,X
   1581  f41c		       b9 58 f3 	      lda	repostable-256,Y
   1582  f41f		       95 20		      sta	HMP0,X	;+14 74
   1583  f421
   1584  f421		       85 02		      sta	WSYNC
   1585  f423
   1586  f423		       85 2a		      sta	HMOVE	;+3 3
   1587  f425
   1588  f425
   1589  f425				  -	      ifconst	legacy
   1590  f425				  -	      if	legacy < 100
   1591  f425				  -	      ldx	#4
   1592  f425				  -adjustloop2
   1593  f425				  -	      lda	player0x,x
   1594  f425				  -	      clc
   1595  f425				  -	      adc	#14	;?
   1596  f425				  -	      sta	player0x,x
   1597  f425				  -	      dex
   1598  f425				  -	      bpl	adjustloop2
   1599  f425				  -	      endif
   1600  f425					      endif
   1601  f425
   1602  f425
   1603  f425
   1604  f425
   1605  f425							;set score pointers
   1606  f425		       a7 95		      lax	score+2
   1607  f427		       20 58 f4 	      jsr	scorepointerset
   1608  f42a		       84 9b		      sty	scorepointers+5
   1609  f42c		       86 98		      stx	scorepointers+2
   1610  f42e		       a7 94		      lax	score+1
   1611  f430		       20 58 f4 	      jsr	scorepointerset
   1612  f433		       84 9a		      sty	scorepointers+4
   1613  f435		       86 97		      stx	scorepointers+1
   1614  f437		       a7 93		      lax	score
   1615  f439		       20 58 f4 	      jsr	scorepointerset
   1616  f43c		       84 99		      sty	scorepointers+3
   1617  f43e		       86 96		      stx	scorepointers
   1618  f440
   1619  f440				   vblk
   1620  f440							; run possible vblank bB code
   1621  f440				  -	      ifconst	vblank_bB_code
   1622  f440				  -	      jsr	vblank_bB_code
   1623  f440					      endif
   1624  f440				   vblk2
   1625  f440		       ad 84 02 	      LDA	INTIM
   1626  f443		       30 fb		      bmi	vblk2
   1627  f445		       4c 34 f0 	      jmp	kernel
   1628  f448
   1629  f448
   1630  f448		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f451		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f458				   repostable
   1633  f458
   1634  f458				   scorepointerset
   1635  f458		       29 0f		      and	#$0F
   1636  f45a		       0a		      asl
   1637  f45b		       0a		      asl
   1638  f45c		       0a		      asl
   1639  f45d		       69 9c		      adc	#<scoretable
   1640  f45f		       a8		      tay
   1641  f460		       8a		      txa
   1642  f461							; and #$F0
   1643  f461							; lsr
   1644  f461		       4b f0		      asr	#$F0
   1645  f463		       69 9c		      adc	#<scoretable
   1646  f465		       aa		      tax
   1647  f466		       60		      rts
   1648  f467				   game
   1649  f467				   .
   1650  f467							; 
   1651  f467
   1652  f467				   .
   1653  f467							; 
   1654  f467
   1655  f467				   .
   1656  f467							; 
   1657  f467
   1658  f467				   .
   1659  f467							; 
   1660  f467
   1661  f467				   .
   1662  f467							; 
   1663  f467
   1664  f467				   .
   1665  f467							; 
   1666  f467
   1667  f467				   .
   1668  f467							; 
   1669  f467
   1670  f467				   .
   1671  f467							; 
   1672  f467
   1673  f467				   .
   1674  f467							; 
   1675  f467
   1676  f467				   .
   1677  f467							; 
   1678  f467
   1679  f467				   .
   1680  f467							; 
   1681  f467
   1682  f467				   .
   1683  f467							; 
   1684  f467
   1685  f467				   .
   1686  f467							; 
   1687  f467
   1688  f467				   .
   1689  f467							; 
   1690  f467
   1691  f467				   .
   1692  f467							; 
   1693  f467
   1694  f467				   .
   1695  f467							; 
   1696  f467
   1697  f467				   .
   1698  f467							; 
   1699  f467
   1700  f467				   .
   1701  f467							; 
   1702  f467
   1703  f467				   .
   1704  f467							; 
   1705  f467
   1706  f467				   .
   1707  f467							; 
   1708  f467
   1709  f467				   .
   1710  f467							; 
   1711  f467
   1712  f467				   .
   1713  f467							; 
   1714  f467
   1715  f467				   .
   1716  f467							; 
   1717  f467
   1718  f467				   .
   1719  f467							; 
   1720  f467
   1721  f467				   .
   1722  f467							; 
   1723  f467
   1724  f467				   .
   1725  f467							; 
   1726  f467
   1727  f467				   .
   1728  f467							; 
   1729  f467
   1730  f467				   .
   1731  f467							; 
   1732  f467
   1733  f467				   .
   1734  f467							; 
   1735  f467
   1736  f467				   .
   1737  f467							; 
   1738  f467
   1739  f467				   .
   1740  f467							; 
   1741  f467
   1742  f467				   .
   1743  f467							; 
   1744  f467
   1745  f467				   .
   1746  f467							; 
   1747  f467
   1748  f467				   .L00 		;  set kernel_options player1colors pfcolors no_blank_lines
   1749  f467
   1750  f467				   .
   1751  f467							; 
   1752  f467
   1753  f467				   .
   1754  f467							; 
   1755  f467
   1756  f467				   .
   1757  f467							; 
   1758  f467
   1759  f467				   .
   1760  f467							; 
   1761  f467
   1762  f467				   .
   1763  f467							; 
   1764  f467
   1765  f467				   .
   1766  f467							; 
   1767  f467
   1768  f467				   .
   1769  f467							; 
   1770  f467
   1771  f467				   .
   1772  f467							; 
   1773  f467
   1774  f467				   .
   1775  f467							; 
   1776  f467
   1777  f467				   .
   1778  f467							; 
   1779  f467
   1780  f467				   .
   1781  f467							; 
   1782  f467
   1783  f467				   .
   1784  f467							; 
   1785  f467
   1786  f467				   .
   1787  f467							; 
   1788  f467
   1789  f467				   .
   1790  f467							; 
   1791  f467
   1792  f467				   .
   1793  f467							; 
   1794  f467
   1795  f467				   .
   1796  f467							; 
   1797  f467
   1798  f467				   .
   1799  f467							; 
   1800  f467
   1801  f467				   .
   1802  f467							; 
   1803  f467
   1804  f467				   .
   1805  f467							; 
   1806  f467
   1807  f467				   .
   1808  f467							; 
   1809  f467
   1810  f467				   .
   1811  f467							; 
   1812  f467
   1813  f467				   .
   1814  f467							; 
   1815  f467
   1816  f467				   .
   1817  f467							; 
   1818  f467
   1819  f467				   .
   1820  f467							; 
   1821  f467
   1822  f467				   .
   1823  f467							; 
   1824  f467
   1825  f467				   .
   1826  f467							; 
   1827  f467
   1828  f467				   .
   1829  f467							; 
   1830  f467
   1831  f467				   .
   1832  f467							; 
   1833  f467
   1834  f467				   .
   1835  f467							; 
   1836  f467
   1837  f467				   .L01 		;  dim _P1_Left_Right	=  player1x.a
   1838  f467
   1839  f467				   .
   1840  f467							; 
   1841  f467
   1842  f467				   .
   1843  f467							; 
   1844  f467
   1845  f467				   .
   1846  f467							; 
   1847  f467
   1848  f467				   .
   1849  f467							; 
   1850  f467
   1851  f467				   .L02 		;  dim _Convert_X  =  b
   1852  f467
   1853  f467				   .
   1854  f467							; 
   1855  f467
   1856  f467				   .
   1857  f467							; 
   1858  f467
   1859  f467				   .
   1860  f467							; 
   1861  f467
   1862  f467				   .
   1863  f467							; 
   1864  f467
   1865  f467				   .L03 		;  dim _Convert_Y  =  c
   1866  f467
   1867  f467				   .
   1868  f467							; 
   1869  f467
   1870  f467				   .
   1871  f467							; 
   1872  f467
   1873  f467				   .
   1874  f467							; 
   1875  f467
   1876  f467				   .
   1877  f467							; 
   1878  f467
   1879  f467				   .L04 		;  dim _Jump_Gravity_Counter  =  d
   1880  f467
   1881  f467				   .
   1882  f467							; 
   1883  f467
   1884  f467				   .
   1885  f467							; 
   1886  f467
   1887  f467				   .
   1888  f467							; 
   1889  f467
   1890  f467				   .
   1891  f467							; 
   1892  f467
   1893  f467				   .L05 		;  dim _Fall_Gravity_Counter  =  e
   1894  f467
   1895  f467				   .
   1896  f467							; 
   1897  f467
   1898  f467				   .
   1899  f467							; 
   1900  f467
   1901  f467				   .
   1902  f467							; 
   1903  f467
   1904  f467				   .
   1905  f467							; 
   1906  f467
   1907  f467				   .L06 		;  dim _Slide_Counter	=  f
   1908  f467
   1909  f467				   .
   1910  f467							; 
   1911  f467
   1912  f467				   .
   1913  f467							; 
   1914  f467
   1915  f467				   .
   1916  f467							; 
   1917  f467
   1918  f467				   .
   1919  f467							; 
   1920  f467
   1921  f467				   .L07 		;  dim _Slide_Speed  =  g
   1922  f467
   1923  f467				   .
   1924  f467							; 
   1925  f467
   1926  f467				   .
   1927  f467							; 
   1928  f467
   1929  f467				   .
   1930  f467							; 
   1931  f467
   1932  f467				   .
   1933  f467							; 
   1934  f467
   1935  f467				   .L08 		;  dim _Slide_Limit  =  h
   1936  f467
   1937  f467				   .
   1938  f467							; 
   1939  f467
   1940  f467				   .
   1941  f467							; 
   1942  f467
   1943  f467				   .
   1944  f467							; 
   1945  f467
   1946  f467				   .
   1947  f467							; 
   1948  f467
   1949  f467				   .L09 		;  dim _Master_Counter  =  i
   1950  f467
   1951  f467				   .
   1952  f467							; 
   1953  f467
   1954  f467				   .
   1955  f467							; 
   1956  f467
   1957  f467				   .
   1958  f467							; 
   1959  f467
   1960  f467				   .
   1961  f467							; 
   1962  f467
   1963  f467				   .L010		;  dim _Frame_Counter	=  j
   1964  f467
   1965  f467				   .
   1966  f467							; 
   1967  f467
   1968  f467				   .
   1969  f467							; 
   1970  f467
   1971  f467				   .
   1972  f467							; 
   1973  f467
   1974  f467				   .
   1975  f467							; 
   1976  f467
   1977  f467				   .L011		;  dim _Ch0_Sound  =  k
   1978  f467
   1979  f467				   .L012		;  dim _Ch0_Duration  =  l
   1980  f467
   1981  f467				   .L013		;  dim _Ch0_Counter  =  m
   1982  f467
   1983  f467				   .
   1984  f467							; 
   1985  f467
   1986  f467				   .
   1987  f467							; 
   1988  f467
   1989  f467				   .
   1990  f467							; 
   1991  f467
   1992  f467				   .
   1993  f467							; 
   1994  f467
   1995  f467				   .
   1996  f467							; 
   1997  f467
   1998  f467				   .L014		;  dim _BitOp_02  =  x
   1999  f467
   2000  f467				   .L015		;  dim _Bit6_LR_Joy_Movement  =  x
   2001  f467
   2002  f467				   .
   2003  f467							; 
   2004  f467
   2005  f467				   .
   2006  f467							; 
   2007  f467
   2008  f467				   .
   2009  f467							; 
   2010  f467
   2011  f467				   .
   2012  f467							; 
   2013  f467
   2014  f467				   .
   2015  f467							; 
   2016  f467
   2017  f467				   .L016		;  dim _BitOp_01  =  y
   2018  f467
   2019  f467				   .L017		;  dim _Bit0_Fall_in_Progress	=  y
   2020  f467
   2021  f467				   .L018		;  dim _Bit1_Slide_Left_in_Progress  =  y
   2022  f467
   2023  f467				   .L019		;  dim _Bit2_Slide_Right_in_Progress  =  y
   2024  f467
   2025  f467				   .L020		;  dim _Bit3_FireB_Restrainer	=  y
   2026  f467
   2027  f467				   .L021		;  dim _Bit4_Flip_P1  =  y
   2028  f467
   2029  f467				   .L022		;  dim _Bit5_Ground_Slide_in_Progress	=  y
   2030  f467
   2031  f467				   .L023		;  dim _Bit6_Duck_in_Progress	=  y
   2032  f467
   2033  f467				   .L024		;  dim _Bit7_Reset_Restrainer	=  y
   2034  f467
   2035  f467				   .
   2036  f467							; 
   2037  f467
   2038  f467				   .
   2039  f467							; 
   2040  f467
   2041  f467				   .
   2042  f467							; 
   2043  f467
   2044  f467				   .
   2045  f467							; 
   2046  f467
   2047  f467				   .
   2048  f467							; 
   2049  f467
   2050  f467				   .
   2051  f467							; 
   2052  f467
   2053  f467				   .
   2054  f467							; 
   2055  f467
   2056  f467				   .
   2057  f467							; 
   2058  f467
   2059  f467				   .L025		;  const _c_Jump_Sound  =  1
   2060  f467
   2061  f467				   .L026		;  const _c_Fall_Sound  =  2
   2062  f467
   2063  f467				   .L027		;  const _c_Slide_Sound  =  3
   2064  f467
   2065  f467				   .
   2066  f467							; 
   2067  f467
   2068  f467				   .
   2069  f467							; 
   2070  f467
   2071  f467				   .
   2072  f467							; 
   2073  f467
   2074  f467				   .
   2075  f467							; 
   2076  f467
   2077  f467				   .
   2078  f467							; 
   2079  f467
   2080  f467				   .
   2081  f467							; 
   2082  f467
   2083  f467				   .
   2084  f467							; 
   2085  f467
   2086  f467				   .
   2087  f467							; 
   2088  f467
   2089  f467				   .
   2090  f467							; 
   2091  f467
   2092  f467				   .
   2093  f467							; 
   2094  f467
   2095  f467				   .
   2096  f467							; 
   2097  f467
   2098  f467				   .__Start_Restart
   2099  f467							; __Start_Restart
   2100  f467
   2101  f467				   .
   2102  f467							; 
   2103  f467
   2104  f467				   .
   2105  f467							; 
   2106  f467
   2107  f467				   .
   2108  f467							; 
   2109  f467
   2110  f467				   .
   2111  f467							; 
   2112  f467
   2113  f467				   .
   2114  f467							; 
   2115  f467
   2116  f467				   .
   2117  f467							; 
   2118  f467
   2119  f467				   .L028		;  AUDV0  =  0  :  AUDV1  =  0
   2120  f467
   2121  f467		       a9 00		      LDA	#0
   2122  f469		       85 19		      STA	AUDV0
   2123  f46b		       85 1a		      STA	AUDV1
   2124  f46d				   .
   2125  f46d							; 
   2126  f46d
   2127  f46d				   .
   2128  f46d							; 
   2129  f46d
   2130  f46d				   .
   2131  f46d							; 
   2132  f46d
   2133  f46d				   .
   2134  f46d							; 
   2135  f46d
   2136  f46d				   .
   2137  f46d							; 
   2138  f46d
   2139  f46d				   .
   2140  f46d							; 
   2141  f46d
   2142  f46d				   .L029		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2143  f46d
   2144  f46d		       a9 00		      LDA	#0
   2145  f46f		       85 d4		      STA	a
   2146  f471		       85 d5		      STA	b
   2147  f473		       85 d6		      STA	c
   2148  f475		       85 d7		      STA	d
   2149  f477		       85 d8		      STA	e
   2150  f479		       85 d9		      STA	f
   2151  f47b		       85 da		      STA	g
   2152  f47d		       85 db		      STA	h
   2153  f47f		       85 dc		      STA	i
   2154  f481				   .L030		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2155  f481
   2156  f481		       a9 00		      LDA	#0
   2157  f483		       85 dd		      STA	j
   2158  f485		       85 de		      STA	k
   2159  f487		       85 df		      STA	l
   2160  f489		       85 e0		      STA	m
   2161  f48b		       85 e1		      STA	n
   2162  f48d		       85 e2		      STA	o
   2163  f48f		       85 e3		      STA	p
   2164  f491		       85 e4		      STA	q
   2165  f493		       85 e5		      STA	r
   2166  f495				   .L031		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0
   2167  f495
   2168  f495		       a9 00		      LDA	#0
   2169  f497		       85 e6		      STA	s
   2170  f499		       85 e7		      STA	t
   2171  f49b		       85 e8		      STA	u
   2172  f49d		       85 e9		      STA	v
   2173  f49f		       85 ea		      STA	w
   2174  f4a1		       85 eb		      STA	x
   2175  f4a3		       85 ec		      STA	y
   2176  f4a5		       85 ed		      STA	z
   2177  f4a7				   .
   2178  f4a7							; 
   2179  f4a7
   2180  f4a7				   .
   2181  f4a7							; 
   2182  f4a7
   2183  f4a7				   .
   2184  f4a7							; 
   2185  f4a7
   2186  f4a7				   .
   2187  f4a7							; 
   2188  f4a7
   2189  f4a7				   .
   2190  f4a7							; 
   2191  f4a7
   2192  f4a7				   .
   2193  f4a7							; 
   2194  f4a7
   2195  f4a7				   .L032		;  _Slide_Speed  =  1
   2196  f4a7
   2197  f4a7		       a9 01		      LDA	#1
   2198  f4a9		       85 da		      STA	_Slide_Speed
   2199  f4ab				   .
   2200  f4ab							; 
   2201  f4ab
   2202  f4ab				   .
   2203  f4ab							; 
   2204  f4ab
   2205  f4ab				   .
   2206  f4ab							; 
   2207  f4ab
   2208  f4ab				   .
   2209  f4ab							; 
   2210  f4ab
   2211  f4ab				   .
   2212  f4ab							; 
   2213  f4ab
   2214  f4ab				   .
   2215  f4ab							; 
   2216  f4ab
   2217  f4ab				   .L033		;  player1x  =  79  :	player1y  =  79
   2218  f4ab
   2219  f4ab		       a9 4f		      LDA	#79
   2220  f4ad		       85 81		      STA	player1x
   2221  f4af		       85 86		      STA	player1y
   2222  f4b1				   .
   2223  f4b1							; 
   2224  f4b1
   2225  f4b1				   .
   2226  f4b1							; 
   2227  f4b1
   2228  f4b1				   .
   2229  f4b1							; 
   2230  f4b1
   2231  f4b1				   .
   2232  f4b1							; 
   2233  f4b1
   2234  f4b1				   .
   2235  f4b1							; 
   2236  f4b1
   2237  f4b1				   .
   2238  f4b1							; 
   2239  f4b1
   2240  f4b1				   .
   2241  f4b1							; 
   2242  f4b1
   2243  f4b1				   .
   2244  f4b1							; 
   2245  f4b1
   2246  f4b1				   .
   2247  f4b1							; 
   2248  f4b1
   2249  f4b1				   .L034		;  _Bit7_Reset_Restrainer{7}  =  1
   2250  f4b1
   2251  f4b1		       a5 ec		      LDA	_Bit7_Reset_Restrainer
   2252  f4b3		       09 80		      ORA	#128
   2253  f4b5		       85 ec		      STA	_Bit7_Reset_Restrainer
   2254  f4b7				   .
   2255  f4b7							; 
   2256  f4b7
   2257  f4b7				   .
   2258  f4b7							; 
   2259  f4b7
   2260  f4b7				   .
   2261  f4b7							; 
   2262  f4b7
   2263  f4b7				   .
   2264  f4b7							; 
   2265  f4b7
   2266  f4b7				   .
   2267  f4b7							; 
   2268  f4b7
   2269  f4b7				   .
   2270  f4b7							; 
   2271  f4b7
   2272  f4b7				   .L035		;  playfield:
   2273  f4b7
   2274  f4b7				  -	      ifconst	pfres
   2275  f4b7				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2276  f4b7					      else
   2277  f4b7		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2278  f4b9					      endif
   2279  f4b9		       4c e8 f4 	      jmp	pflabel0
   2280  f4bc				   PF_data0
   2281  f4bc		       00 00		      .byte.b	%00000000, %00000000
   2282  f4be					      if	(pfwidth>2)
   2283  f4be		       00 00		      .byte.b	%00000000, %00000000
   2284  f4c0					      endif
   2285  f4c0		       00 00		      .byte.b	%00000000, %00000000
   2286  f4c2					      if	(pfwidth>2)
   2287  f4c2		       00 00		      .byte.b	%00000000, %00000000
   2288  f4c4					      endif
   2289  f4c4		       00 00		      .byte.b	%00000000, %00000000
   2290  f4c6					      if	(pfwidth>2)
   2291  f4c6		       00 00		      .byte.b	%00000000, %00000000
   2292  f4c8					      endif
   2293  f4c8		       00 00		      .byte.b	%00000000, %00000000
   2294  f4ca					      if	(pfwidth>2)
   2295  f4ca		       00 00		      .byte.b	%00000000, %00000000
   2296  f4cc					      endif
   2297  f4cc		       03 1f		      .byte.b	%00000011, %00011111
   2298  f4ce					      if	(pfwidth>2)
   2299  f4ce		       1f 03		      .byte.b	%00011111, %00000011
   2300  f4d0					      endif
   2301  f4d0		       00 00		      .byte.b	%00000000, %00000000
   2302  f4d2					      if	(pfwidth>2)
   2303  f4d2		       00 00		      .byte.b	%00000000, %00000000
   2304  f4d4					      endif
   2305  f4d4		       00 00		      .byte.b	%00000000, %00000000
   2306  f4d6					      if	(pfwidth>2)
   2307  f4d6		       00 00		      .byte.b	%00000000, %00000000
   2308  f4d8					      endif
   2309  f4d8		       00 fc		      .byte.b	%00000000, %11111100
   2310  f4da					      if	(pfwidth>2)
   2311  f4da		       fc 00		      .byte.b	%11111100, %00000000
   2312  f4dc					      endif
   2313  f4dc		       00 00		      .byte.b	%00000000, %00000000
   2314  f4de					      if	(pfwidth>2)
   2315  f4de		       00 00		      .byte.b	%00000000, %00000000
   2316  f4e0					      endif
   2317  f4e0		       00 00		      .byte.b	%00000000, %00000000
   2318  f4e2					      if	(pfwidth>2)
   2319  f4e2		       00 00		      .byte.b	%00000000, %00000000
   2320  f4e4					      endif
   2321  f4e4		       ff ff		      .byte.b	%11111111, %11111111
   2322  f4e6					      if	(pfwidth>2)
   2323  f4e6		       ff ff		      .byte.b	%11111111, %11111111
   2324  f4e8					      endif
   2325  f4e8				   pflabel0
   2326  f4e8		       bd bc f4 	      lda	PF_data0,x
   2327  f4eb		       95 a4		      sta	playfield,x
   2328  f4ed		       ca		      dex
   2329  f4ee		       10 f8		      bpl	pflabel0
   2330  f4f0				   .
   2331  f4f0							; 
   2332  f4f0
   2333  f4f0				   .
   2334  f4f0							; 
   2335  f4f0
   2336  f4f0				   .
   2337  f4f0							; 
   2338  f4f0
   2339  f4f0				   .
   2340  f4f0							; 
   2341  f4f0
   2342  f4f0				   .
   2343  f4f0							; 
   2344  f4f0
   2345  f4f0				   .
   2346  f4f0							; 
   2347  f4f0
   2348  f4f0				   .
   2349  f4f0							; 
   2350  f4f0
   2351  f4f0				   .
   2352  f4f0							; 
   2353  f4f0
   2354  f4f0				   .
   2355  f4f0							; 
   2356  f4f0
   2357  f4f0				   .
   2358  f4f0							; 
   2359  f4f0
   2360  f4f0				   .
   2361  f4f0							; 
   2362  f4f0
   2363  f4f0				   .__Main_Loop
   2364  f4f0							; __Main_Loop
   2365  f4f0
   2366  f4f0				   .
   2367  f4f0							; 
   2368  f4f0
   2369  f4f0				   .
   2370  f4f0							; 
   2371  f4f0
   2372  f4f0				   .
   2373  f4f0							; 
   2374  f4f0
   2375  f4f0				   .
   2376  f4f0							; 
   2377  f4f0
   2378  f4f0				   .
   2379  f4f0							; 
   2380  f4f0
   2381  f4f0				   .
   2382  f4f0							; 
   2383  f4f0
   2384  f4f0				   .
   2385  f4f0							; 
   2386  f4f0
   2387  f4f0				   .L036		;  COLUPF  =  $96  :  COLUBK  =  $00  :  COLUP1  =  $42
   2388  f4f0
   2389  f4f0		       a9 96		      LDA	#$96
   2390  f4f2		       85 08		      STA	COLUPF
   2391  f4f4		       a9 00		      LDA	#$00
   2392  f4f6		       85 09		      STA	COLUBK
   2393  f4f8		       a9 42		      LDA	#$42
   2394  f4fa		       85 07		      STA	COLUP1
   2395  f4fc				   .
   2396  f4fc							; 
   2397  f4fc
   2398  f4fc				   .
   2399  f4fc							; 
   2400  f4fc
   2401  f4fc				   .
   2402  f4fc							; 
   2403  f4fc
   2404  f4fc				   .
   2405  f4fc							; 
   2406  f4fc
   2407  f4fc				   .
   2408  f4fc							; 
   2409  f4fc
   2410  f4fc				   .
   2411  f4fc							; 
   2412  f4fc
   2413  f4fc				   .
   2414  f4fc							; 
   2415  f4fc
   2416  f4fc				   .L037		;  pfcolors:
   2417  f4fc
   2418  f4fc		       a9 0c		      lda	# $0C
   2419  f4fe		       85 08		      sta	COLUPF
   2420  f500				  -	      ifconst	pfres
   2421  f500				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   2422  f500					      else
   2423  f500		       a9 fc		      lda	#>(pfcolorlabel13-84)
   2424  f502					      endif
   2425  f502		       85 f1		      sta	pfcolortable+1
   2426  f504				  -	      ifconst	pfres
   2427  f504				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   2428  f504					      else
   2429  f504		       a9 04		      lda	#<(pfcolorlabel13-84)
   2430  f506					      endif
   2431  f506		       85 f0		      sta	pfcolortable
   2432  f508				   .
   2433  f508							; 
   2434  f508
   2435  f508				   .
   2436  f508							; 
   2437  f508
   2438  f508				   .
   2439  f508							; 
   2440  f508
   2441  f508				   .
   2442  f508							; 
   2443  f508
   2444  f508				   .
   2445  f508							; 
   2446  f508
   2447  f508				   .
   2448  f508							; 
   2449  f508
   2450  f508				   .
   2451  f508							; 
   2452  f508
   2453  f508				   .L038		;  _Convert_X	=   ( player1x - 14 )  / 4
   2454  f508
   2455  f508							; complex statement detected
   2456  f508		       a5 81		      LDA	player1x
   2457  f50a		       38		      SEC
   2458  f50b		       e9 0e		      SBC	#14
   2459  f50d		       4a		      lsr
   2460  f50e		       4a		      lsr
   2461  f50f		       85 d5		      STA	_Convert_X
   2462  f511				   .L039		;  _Convert_Y	=  player1y / 8
   2463  f511
   2464  f511		       a5 86		      LDA	player1y
   2465  f513		       4a		      lsr
   2466  f514		       4a		      lsr
   2467  f515		       4a		      lsr
   2468  f516		       85 d6		      STA	_Convert_Y
   2469  f518				   .
   2470  f518							; 
   2471  f518
   2472  f518				   .
   2473  f518							; 
   2474  f518
   2475  f518				   .
   2476  f518							; 
   2477  f518
   2478  f518				   .
   2479  f518							; 
   2480  f518
   2481  f518				   .
   2482  f518							; 
   2483  f518
   2484  f518				   .
   2485  f518							; 
   2486  f518
   2487  f518				   .
   2488  f518							; 
   2489  f518
   2490  f518				   .L040		;  _Master_Counter  =	_Master_Counter  +  1
   2491  f518
   2492  f518		       e6 dc		      INC	_Master_Counter
   2493  f51a				   .
   2494  f51a							; 
   2495  f51a
   2496  f51a				   .L041		;  if _Master_Counter	<  4 then goto __Skip_Frame_Counter
   2497  f51a
   2498  f51a		       a5 dc		      LDA	_Master_Counter
   2499  f51c		       c9 04		      CMP	#4
   2500  f51e		       b0 03		      BCS	.skipL041
   2501  f520				   .condpart0
   2502  f520		       4c 33 f5 	      jmp	.__Skip_Frame_Counter
   2503  f523
   2504  f523				   .skipL041
   2505  f523				   .
   2506  f523							; 
   2507  f523
   2508  f523				   .L042		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2509  f523
   2510  f523		       e6 dd		      INC	_Frame_Counter
   2511  f525		       a9 00		      LDA	#0
   2512  f527		       85 dc		      STA	_Master_Counter
   2513  f529				   .
   2514  f529							; 
   2515  f529
   2516  f529				   .L043		;  if _Frame_Counter  =  4 then _Frame_Counter  =  0
   2517  f529
   2518  f529		       a5 dd		      LDA	_Frame_Counter
   2519  f52b		       c9 04		      CMP	#4
   2520  f52d		       d0 04		      BNE	.skipL043
   2521  f52f				   .condpart1
   2522  f52f		       a9 00		      LDA	#0
   2523  f531		       85 dd		      STA	_Frame_Counter
   2524  f533				   .skipL043
   2525  f533				   .
   2526  f533							; 
   2527  f533
   2528  f533				   .__Skip_Frame_Counter
   2529  f533							; __Skip_Frame_Counter
   2530  f533
   2531  f533				   .
   2532  f533							; 
   2533  f533
   2534  f533				   .
   2535  f533							; 
   2536  f533
   2537  f533				   .
   2538  f533							; 
   2539  f533
   2540  f533				   .
   2541  f533							; 
   2542  f533
   2543  f533				   .
   2544  f533							; 
   2545  f533
   2546  f533				   .
   2547  f533							; 
   2548  f533
   2549  f533				   .
   2550  f533							; 
   2551  f533
   2552  f533				   .L044		;  player1color:
   2553  f533
   2554  f533		       a2 84		      LDX	#<playercolorL044_1
   2555  f535		       86 87		      STX	player1color
   2556  f537		       a9 fc		      LDA	#>playercolorL044_1
   2557  f539		       85 88		      STA	player1color+1
   2558  f53b				   .
   2559  f53b							; 
   2560  f53b
   2561  f53b				   .L045		;  player1:
   2562  f53b
   2563  f53b		       a2 8e		      LDX	#<playerL045_1
   2564  f53d		       86 8c		      STX	player1pointerlo
   2565  f53f		       a9 fc		      LDA	#>playerL045_1
   2566  f541		       85 8d		      STA	player1pointerhi
   2567  f543		       a9 09		      LDA	#9
   2568  f545		       85 8f		      STA	player1height
   2569  f547				   .
   2570  f547							; 
   2571  f547
   2572  f547				   .
   2573  f547							; 
   2574  f547
   2575  f547				   .
   2576  f547							; 
   2577  f547
   2578  f547				   .
   2579  f547							; 
   2580  f547
   2581  f547				   .
   2582  f547							; 
   2583  f547
   2584  f547				   .
   2585  f547							; 
   2586  f547
   2587  f547				   .
   2588  f547							; 
   2589  f547
   2590  f547				   .
   2591  f547							; 
   2592  f547
   2593  f547				   .
   2594  f547							; 
   2595  f547
   2596  f547				   .
   2597  f547							; 
   2598  f547
   2599  f547				   .L046		;  if !joy0fire then _Jump_Gravity_Counter  =	0  :  _Bit3_FireB_Restrainer{3}  =  0  :  goto __Skip_Jump
   2600  f547
   2601  f547		       24 0c		      bit	INPT4
   2602  f549		       10 0d		      BPL	.skipL046
   2603  f54b				   .condpart2
   2604  f54b		       a9 00		      LDA	#0
   2605  f54d		       85 d7		      STA	_Jump_Gravity_Counter
   2606  f54f		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2607  f551		       29 f7		      AND	#247
   2608  f553		       85 ec		      STA	_Bit3_FireB_Restrainer
   2609  f555		       4c 25 f6 	      jmp	.__Skip_Jump
   2610  f558
   2611  f558				   .skipL046
   2612  f558				   .
   2613  f558							; 
   2614  f558
   2615  f558				   .
   2616  f558							; 
   2617  f558
   2618  f558				   .
   2619  f558							; 
   2620  f558
   2621  f558				   .
   2622  f558							; 
   2623  f558
   2624  f558				   .L047		;  _Bit5_Ground_Slide_in_Progress{5}  =  0
   2625  f558
   2626  f558		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   2627  f55a		       29 df		      AND	#223
   2628  f55c		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   2629  f55e				   .
   2630  f55e							; 
   2631  f55e
   2632  f55e				   .
   2633  f55e							; 
   2634  f55e
   2635  f55e				   .
   2636  f55e							; 
   2637  f55e
   2638  f55e				   .
   2639  f55e							; 
   2640  f55e
   2641  f55e				   .L048		;  if !_Bit3_FireB_Restrainer{3} then player1:
   2642  f55e
   2643  f55e		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2644  f560		       29 08		      AND	#8
   2645  f562		       d0 0c		      BNE	.skipL048
   2646  f564				   .condpart3
   2647  f564		       a2 98		      LDX	#<player3then_1
   2648  f566		       86 8c		      STX	player1pointerlo
   2649  f568		       a9 fc		      LDA	#>player3then_1
   2650  f56a		       85 8d		      STA	player1pointerhi
   2651  f56c		       a9 09		      LDA	#9
   2652  f56e		       85 8f		      STA	player1height
   2653  f570				   .skipL048
   2654  f570				   .
   2655  f570							; 
   2656  f570
   2657  f570				   .
   2658  f570							; 
   2659  f570
   2660  f570				   .
   2661  f570							; 
   2662  f570
   2663  f570				   .
   2664  f570							; 
   2665  f570
   2666  f570				   .L049		;  if !joy0left  &&  !joy0right  &&  !_Bit3_FireB_Restrainer{3} then player1:
   2667  f570
   2668  f570		       2c 80 02 	      bit	SWCHA
   2669  f573		       50 17		      BVC	.skipL049
   2670  f575				   .condpart4
   2671  f575		       2c 80 02 	      bit	SWCHA
   2672  f578		       10 12		      BPL	.skip4then
   2673  f57a				   .condpart5
   2674  f57a		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2675  f57c		       29 08		      AND	#8
   2676  f57e		       d0 0c		      BNE	.skip5then
   2677  f580				   .condpart6
   2678  f580		       a2 a2		      LDX	#<player6then_1
   2679  f582		       86 8c		      STX	player1pointerlo
   2680  f584		       a9 fc		      LDA	#>player6then_1
   2681  f586		       85 8d		      STA	player1pointerhi
   2682  f588		       a9 09		      LDA	#9
   2683  f58a		       85 8f		      STA	player1height
   2684  f58c				   .skip5then
   2685  f58c				   .skip4then
   2686  f58c				   .skipL049
   2687  f58c				   .
   2688  f58c							; 
   2689  f58c
   2690  f58c				   .
   2691  f58c							; 
   2692  f58c
   2693  f58c				   .
   2694  f58c							; 
   2695  f58c
   2696  f58c				   .
   2697  f58c							; 
   2698  f58c
   2699  f58c				   .L050		;  if _Bit0_Fall_in_Progress{0} then goto __Skip_Jump
   2700  f58c
   2701  f58c		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   2702  f58e		       4a		      LSR
   2703  f58f		       90 03		      BCC	.skipL050
   2704  f591				   .condpart7
   2705  f591		       4c 25 f6 	      jmp	.__Skip_Jump
   2706  f594
   2707  f594				   .skipL050
   2708  f594				   .
   2709  f594							; 
   2710  f594
   2711  f594				   .
   2712  f594							; 
   2713  f594
   2714  f594				   .
   2715  f594							; 
   2716  f594
   2717  f594				   .
   2718  f594							; 
   2719  f594
   2720  f594				   .
   2721  f594							; 
   2722  f594
   2723  f594				   .
   2724  f594							; 
   2725  f594
   2726  f594				   .L051		;  if _Bit3_FireB_Restrainer{3}  &&  !_Bit0_Fall_in_Progress{0}  &&  !_Jump_Gravity_Counter then goto __Skip_Jump
   2727  f594
   2728  f594		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2729  f596		       29 08		      AND	#8
   2730  f598		       f0 0c		      BEQ	.skipL051
   2731  f59a				   .condpart8
   2732  f59a		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   2733  f59c		       4a		      LSR
   2734  f59d		       b0 07		      BCS	.skip8then
   2735  f59f				   .condpart9
   2736  f59f		       a5 d7		      LDA	_Jump_Gravity_Counter
   2737  f5a1		       d0 03		      BNE	.skip9then
   2738  f5a3				   .condpart10
   2739  f5a3		       4c 25 f6 	      jmp	.__Skip_Jump
   2740  f5a6
   2741  f5a6				   .skip9then
   2742  f5a6				   .skip8then
   2743  f5a6				   .skipL051
   2744  f5a6				   .
   2745  f5a6							; 
   2746  f5a6
   2747  f5a6				   .
   2748  f5a6							; 
   2749  f5a6
   2750  f5a6				   .
   2751  f5a6							; 
   2752  f5a6
   2753  f5a6				   .
   2754  f5a6							; 
   2755  f5a6
   2756  f5a6				   .L052		;  if !_Jump_Gravity_Counter then _Ch0_Sound  =  _c_Jump_Sound  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   2757  f5a6
   2758  f5a6		       a5 d7		      LDA	_Jump_Gravity_Counter
   2759  f5a8		       d0 0c		      BNE	.skipL052
   2760  f5aa				   .condpart11
   2761  f5aa		       a9 01		      LDA	#_c_Jump_Sound
   2762  f5ac		       85 de		      STA	_Ch0_Sound
   2763  f5ae		       a9 01		      LDA	#1
   2764  f5b0		       85 df		      STA	_Ch0_Duration
   2765  f5b2		       a9 00		      LDA	#0
   2766  f5b4		       85 e0		      STA	_Ch0_Counter
   2767  f5b6				   .skipL052
   2768  f5b6				   .
   2769  f5b6							; 
   2770  f5b6
   2771  f5b6				   .
   2772  f5b6							; 
   2773  f5b6
   2774  f5b6				   .
   2775  f5b6							; 
   2776  f5b6
   2777  f5b6				   .
   2778  f5b6							; 
   2779  f5b6
   2780  f5b6				   .L053		;  _Bit3_FireB_Restrainer{3}  =  1
   2781  f5b6
   2782  f5b6		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2783  f5b8		       09 08		      ORA	#8
   2784  f5ba		       85 ec		      STA	_Bit3_FireB_Restrainer
   2785  f5bc				   .
   2786  f5bc							; 
   2787  f5bc
   2788  f5bc				   .
   2789  f5bc							; 
   2790  f5bc
   2791  f5bc				   .
   2792  f5bc							; 
   2793  f5bc
   2794  f5bc				   .
   2795  f5bc							; 
   2796  f5bc
   2797  f5bc				   .L054		;  _Jump_Gravity_Counter  =  _Jump_Gravity_Counter  +	1
   2798  f5bc
   2799  f5bc		       e6 d7		      INC	_Jump_Gravity_Counter
   2800  f5be				   .
   2801  f5be							; 
   2802  f5be
   2803  f5be				   .
   2804  f5be							; 
   2805  f5be
   2806  f5be				   .
   2807  f5be							; 
   2808  f5be
   2809  f5be				   .
   2810  f5be							; 
   2811  f5be
   2812  f5be				   .L055		;  if _Jump_Gravity_Counter  >  12 then _Jump_Gravity_Counter	=  0  :  _Bit0_Fall_in_Progress{0}  =  1  :  goto __Skip_Jump
   2813  f5be
   2814  f5be		       a9 0c		      LDA	#12
   2815  f5c0		       c5 d7		      CMP	_Jump_Gravity_Counter
   2816  f5c2		       b0 0d		      BCS	.skipL055
   2817  f5c4				   .condpart12
   2818  f5c4		       a9 00		      LDA	#0
   2819  f5c6		       85 d7		      STA	_Jump_Gravity_Counter
   2820  f5c8		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   2821  f5ca		       09 01		      ORA	#1
   2822  f5cc		       85 ec		      STA	_Bit0_Fall_in_Progress
   2823  f5ce		       4c 25 f6 	      jmp	.__Skip_Jump
   2824  f5d1
   2825  f5d1				   .skipL055
   2826  f5d1				   .
   2827  f5d1							; 
   2828  f5d1
   2829  f5d1				   .
   2830  f5d1							; 
   2831  f5d1
   2832  f5d1				   .
   2833  f5d1							; 
   2834  f5d1
   2835  f5d1				   .
   2836  f5d1							; 
   2837  f5d1
   2838  f5d1				   .
   2839  f5d1							; 
   2840  f5d1
   2841  f5d1				   .
   2842  f5d1							; 
   2843  f5d1
   2844  f5d1				   .L056		;  if player1y  <  13 then goto __Skip_Jump
   2845  f5d1
   2846  f5d1		       a5 86		      LDA	player1y
   2847  f5d3		       c9 0d		      CMP	#13
   2848  f5d5		       b0 03		      BCS	.skipL056
   2849  f5d7				   .condpart13
   2850  f5d7		       4c 25 f6 	      jmp	.__Skip_Jump
   2851  f5da
   2852  f5da				   .skipL056
   2853  f5da				   .
   2854  f5da							; 
   2855  f5da
   2856  f5da				   .
   2857  f5da							; 
   2858  f5da
   2859  f5da				   .
   2860  f5da							; 
   2861  f5da
   2862  f5da				   .
   2863  f5da							; 
   2864  f5da
   2865  f5da				   .
   2866  f5da							; 
   2867  f5da
   2868  f5da				   .L057		;  if _Jump_Gravity_Counter  <=  7 then temp6	=  3
   2869  f5da
   2870  f5da		       a9 07		      LDA	#7
   2871  f5dc		       c5 d7		      CMP	_Jump_Gravity_Counter
   2872  f5de		       90 04		      BCC	.skipL057
   2873  f5e0				   .condpart14
   2874  f5e0		       a9 03		      LDA	#3
   2875  f5e2		       85 a1		      STA	temp6
   2876  f5e4				   .skipL057
   2877  f5e4				   .L058		;  if _Jump_Gravity_Counter  >  7  &&	_Jump_Gravity_Counter  <=  10 then temp6  =  2
   2878  f5e4
   2879  f5e4		       a9 07		      LDA	#7
   2880  f5e6		       c5 d7		      CMP	_Jump_Gravity_Counter
   2881  f5e8		       b0 0a		      BCS	.skipL058
   2882  f5ea				   .condpart15
   2883  f5ea		       a9 0a		      LDA	#10
   2884  f5ec		       c5 d7		      CMP	_Jump_Gravity_Counter
   2885  f5ee		       90 04		      BCC	.skip15then
   2886  f5f0				   .condpart16
   2887  f5f0		       a9 02		      LDA	#2
   2888  f5f2		       85 a1		      STA	temp6
   2889  f5f4				   .skip15then
   2890  f5f4				   .skipL058
   2891  f5f4				   .L059		;  if _Jump_Gravity_Counter  >  10 then temp6	=  1
   2892  f5f4
   2893  f5f4		       a9 0a		      LDA	#10
   2894  f5f6		       c5 d7		      CMP	_Jump_Gravity_Counter
   2895  f5f8		       b0 04		      BCS	.skipL059
   2896  f5fa				   .condpart17
   2897  f5fa		       a9 01		      LDA	#1
   2898  f5fc		       85 a1		      STA	temp6
   2899  f5fe				   .skipL059
   2900  f5fe				   .
   2901  f5fe							; 
   2902  f5fe
   2903  f5fe				   .
   2904  f5fe							; 
   2905  f5fe
   2906  f5fe				   .
   2907  f5fe							; 
   2908  f5fe
   2909  f5fe				   .
   2910  f5fe							; 
   2911  f5fe
   2912  f5fe				   .L060		;  player1y  =  player1y  -  temp6
   2913  f5fe
   2914  f5fe		       a5 86		      LDA	player1y
   2915  f600		       38		      SEC
   2916  f601		       e5 a1		      SBC	temp6
   2917  f603		       85 86		      STA	player1y
   2918  f605				   .
   2919  f605							; 
   2920  f605
   2921  f605				   .
   2922  f605							; 
   2923  f605
   2924  f605				   .
   2925  f605							; 
   2926  f605
   2927  f605				   .
   2928  f605							; 
   2929  f605
   2930  f605				   .L061		;  temp5  =   ( player1y - 5 )  / 8
   2931  f605
   2932  f605							; complex statement detected
   2933  f605		       a5 86		      LDA	player1y
   2934  f607		       38		      SEC
   2935  f608		       e9 05		      SBC	#5
   2936  f60a		       4a		      lsr
   2937  f60b		       4a		      lsr
   2938  f60c		       4a		      lsr
   2939  f60d		       85 a0		      STA	temp5
   2940  f60f				   .
   2941  f60f							; 
   2942  f60f
   2943  f60f				   .
   2944  f60f							; 
   2945  f60f
   2946  f60f				   .
   2947  f60f							; 
   2948  f60f
   2949  f60f				   .
   2950  f60f							; 
   2951  f60f
   2952  f60f				   .L062		;  if pfread ( _Convert_X , temp5 )  then _Jump_Gravity_Counter  =  0	:  _Bit0_Fall_in_Progress{0}  =  1  :  goto __Skip_Jump
   2953  f60f
   2954  f60f		       a5 d5		      LDA	_Convert_X
   2955  f611		       a4 a0		      LDY	temp5
   2956  f613		       20 75 f2 	      jsr	pfread
   2957  f616		       d0 0d		      BNE	.skipL062
   2958  f618				   .condpart18
   2959  f618		       a9 00		      LDA	#0
   2960  f61a		       85 d7		      STA	_Jump_Gravity_Counter
   2961  f61c		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   2962  f61e		       09 01		      ORA	#1
   2963  f620		       85 ec		      STA	_Bit0_Fall_in_Progress
   2964  f622		       4c 25 f6 	      jmp	.__Skip_Jump
   2965  f625
   2966  f625				   .skipL062
   2967  f625				   .
   2968  f625							; 
   2969  f625
   2970  f625				   .__Skip_Jump
   2971  f625							; __Skip_Jump
   2972  f625
   2973  f625				   .
   2974  f625							; 
   2975  f625
   2976  f625				   .
   2977  f625							; 
   2978  f625
   2979  f625				   .
   2980  f625							; 
   2981  f625
   2982  f625				   .
   2983  f625							; 
   2984  f625
   2985  f625				   .
   2986  f625							; 
   2987  f625
   2988  f625				   .
   2989  f625							; 
   2990  f625
   2991  f625				   .
   2992  f625							; 
   2993  f625
   2994  f625				   .
   2995  f625							; 
   2996  f625
   2997  f625				   .
   2998  f625							; 
   2999  f625
   3000  f625				   .
   3001  f625							; 
   3002  f625
   3003  f625				   .L063		;  temp5  =   ( player1y + 1 )  / 8
   3004  f625
   3005  f625							; complex statement detected
   3006  f625		       a5 86		      LDA	player1y
   3007  f627		       18		      CLC
   3008  f628		       69 01		      ADC	#1
   3009  f62a		       4a		      lsr
   3010  f62b		       4a		      lsr
   3011  f62c		       4a		      lsr
   3012  f62d		       85 a0		      STA	temp5
   3013  f62f				   .
   3014  f62f							; 
   3015  f62f
   3016  f62f				   .
   3017  f62f							; 
   3018  f62f
   3019  f62f				   .
   3020  f62f							; 
   3021  f62f
   3022  f62f				   .
   3023  f62f							; 
   3024  f62f
   3025  f62f				   .L064		;  if _Jump_Gravity_Counter  ||  pfread ( _Convert_X , temp5 )  then goto __Skip_Fall_01
   3026  f62f
   3027  f62f		       a5 d7		      LDA	_Jump_Gravity_Counter
   3028  f631		       f0 03		      BEQ	.skipL064
   3029  f633				   .condpart19
   3030  f633		       4c 3f f6 	      jmp	.condpart20
   3031  f636				   .skipL064
   3032  f636		       a5 d5		      LDA	_Convert_X
   3033  f638		       a4 a0		      LDY	temp5
   3034  f63a		       20 75 f2 	      jsr	pfread
   3035  f63d		       d0 03		      BNE	.skip5OR
   3036  f63f				   .condpart20
   3037  f63f		       4c e7 f6 	      jmp	.__Skip_Fall_01
   3038  f642
   3039  f642				   .skip5OR
   3040  f642				   .
   3041  f642							; 
   3042  f642
   3043  f642				   .
   3044  f642							; 
   3045  f642
   3046  f642				   .
   3047  f642							; 
   3048  f642
   3049  f642				   .
   3050  f642							; 
   3051  f642
   3052  f642				   .L065		;  player1:
   3053  f642
   3054  f642		       a2 ac		      LDX	#<playerL065_1
   3055  f644		       86 8c		      STX	player1pointerlo
   3056  f646		       a9 fc		      LDA	#>playerL065_1
   3057  f648		       85 8d		      STA	player1pointerhi
   3058  f64a		       a9 09		      LDA	#9
   3059  f64c		       85 8f		      STA	player1height
   3060  f64e				   .
   3061  f64e							; 
   3062  f64e
   3063  f64e				   .
   3064  f64e							; 
   3065  f64e
   3066  f64e				   .
   3067  f64e							; 
   3068  f64e
   3069  f64e				   .
   3070  f64e							; 
   3071  f64e
   3072  f64e				   .L066		;  if !joy0left  &&  !joy0right then player1:
   3073  f64e
   3074  f64e		       2c 80 02 	      bit	SWCHA
   3075  f651		       50 11		      BVC	.skipL066
   3076  f653				   .condpart21
   3077  f653		       2c 80 02 	      bit	SWCHA
   3078  f656		       10 0c		      BPL	.skip21then
   3079  f658				   .condpart22
   3080  f658		       a2 b6		      LDX	#<player22then_1
   3081  f65a		       86 8c		      STX	player1pointerlo
   3082  f65c		       a9 fc		      LDA	#>player22then_1
   3083  f65e		       85 8d		      STA	player1pointerhi
   3084  f660		       a9 09		      LDA	#9
   3085  f662		       85 8f		      STA	player1height
   3086  f664				   .skip21then
   3087  f664				   .skipL066
   3088  f664				   .
   3089  f664							; 
   3090  f664
   3091  f664				   .
   3092  f664							; 
   3093  f664
   3094  f664				   .
   3095  f664							; 
   3096  f664
   3097  f664				   .
   3098  f664							; 
   3099  f664
   3100  f664				   .L067		;  _Fall_Gravity_Counter  =  _Fall_Gravity_Counter  +	1
   3101  f664
   3102  f664		       e6 d8		      INC	_Fall_Gravity_Counter
   3103  f666				   .
   3104  f666							; 
   3105  f666
   3106  f666				   .
   3107  f666							; 
   3108  f666
   3109  f666				   .
   3110  f666							; 
   3111  f666
   3112  f666				   .
   3113  f666							; 
   3114  f666
   3115  f666				   .L068		;  temp6  =  0
   3116  f666
   3117  f666		       a9 00		      LDA	#0
   3118  f668		       85 a1		      STA	temp6
   3119  f66a				   .L069		;  if _Fall_Gravity_Counter  >  8  &&	_Jump_Gravity_Counter  <=  16 then temp6  =  1
   3120  f66a
   3121  f66a		       a9 08		      LDA	#8
   3122  f66c		       c5 d8		      CMP	_Fall_Gravity_Counter
   3123  f66e		       b0 0a		      BCS	.skipL069
   3124  f670				   .condpart23
   3125  f670		       a9 10		      LDA	#16
   3126  f672		       c5 d7		      CMP	_Jump_Gravity_Counter
   3127  f674		       90 04		      BCC	.skip23then
   3128  f676				   .condpart24
   3129  f676		       a9 01		      LDA	#1
   3130  f678		       85 a1		      STA	temp6
   3131  f67a				   .skip23then
   3132  f67a				   .skipL069
   3133  f67a				   .L070		;  if _Fall_Gravity_Counter  >  16  &&  _Jump_Gravity_Counter	<=  24 then temp6  =  2
   3134  f67a
   3135  f67a		       a9 10		      LDA	#16
   3136  f67c		       c5 d8		      CMP	_Fall_Gravity_Counter
   3137  f67e		       b0 0a		      BCS	.skipL070
   3138  f680				   .condpart25
   3139  f680		       a9 18		      LDA	#24
   3140  f682		       c5 d7		      CMP	_Jump_Gravity_Counter
   3141  f684		       90 04		      BCC	.skip25then
   3142  f686				   .condpart26
   3143  f686		       a9 02		      LDA	#2
   3144  f688		       85 a1		      STA	temp6
   3145  f68a				   .skip25then
   3146  f68a				   .skipL070
   3147  f68a				   .L071		;  if _Fall_Gravity_Counter  >  24  &&  _Jump_Gravity_Counter	<=  32 then temp6  =  3
   3148  f68a
   3149  f68a		       a9 18		      LDA	#24
   3150  f68c		       c5 d8		      CMP	_Fall_Gravity_Counter
   3151  f68e		       b0 0a		      BCS	.skipL071
   3152  f690				   .condpart27
   3153  f690		       a9 20		      LDA	#32
   3154  f692		       c5 d7		      CMP	_Jump_Gravity_Counter
   3155  f694		       90 04		      BCC	.skip27then
   3156  f696				   .condpart28
   3157  f696		       a9 03		      LDA	#3
   3158  f698		       85 a1		      STA	temp6
   3159  f69a				   .skip27then
   3160  f69a				   .skipL071
   3161  f69a				   .L072		;  if _Fall_Gravity_Counter  >  32 then temp6	=  4
   3162  f69a
   3163  f69a		       a9 20		      LDA	#32
   3164  f69c		       c5 d8		      CMP	_Fall_Gravity_Counter
   3165  f69e		       b0 04		      BCS	.skipL072
   3166  f6a0				   .condpart29
   3167  f6a0		       a9 04		      LDA	#4
   3168  f6a2		       85 a1		      STA	temp6
   3169  f6a4				   .skipL072
   3170  f6a4				   .
   3171  f6a4							; 
   3172  f6a4
   3173  f6a4				   .
   3174  f6a4							; 
   3175  f6a4
   3176  f6a4				   .
   3177  f6a4							; 
   3178  f6a4
   3179  f6a4				   .
   3180  f6a4							; 
   3181  f6a4
   3182  f6a4				   .L073		;  player1y  =  player1y  +  temp6
   3183  f6a4
   3184  f6a4		       a5 86		      LDA	player1y
   3185  f6a6		       18		      CLC
   3186  f6a7		       65 a1		      ADC	temp6
   3187  f6a9		       85 86		      STA	player1y
   3188  f6ab				   .
   3189  f6ab							; 
   3190  f6ab
   3191  f6ab				   .
   3192  f6ab							; 
   3193  f6ab
   3194  f6ab				   .
   3195  f6ab							; 
   3196  f6ab
   3197  f6ab				   .
   3198  f6ab							; 
   3199  f6ab
   3200  f6ab				   .L074		;  if _Ch0_Sound  =  _c_Jump_Sound  ||  _Ch0_Sound  =	_c_Fall_Sound then goto __Skip_Fall_Sound_Check
   3201  f6ab
   3202  f6ab		       a5 de		      LDA	_Ch0_Sound
   3203  f6ad		       c9 01		      CMP	#_c_Jump_Sound
   3204  f6af		       d0 03		      BNE	.skipL074
   3205  f6b1				   .condpart30
   3206  f6b1		       4c ba f6 	      jmp	.condpart31
   3207  f6b4				   .skipL074
   3208  f6b4		       a5 de		      LDA	_Ch0_Sound
   3209  f6b6		       c9 02		      CMP	#_c_Fall_Sound
   3210  f6b8		       d0 03		      BNE	.skip10OR
   3211  f6ba				   .condpart31
   3212  f6ba		       4c d8 f6 	      jmp	.__Skip_Fall_Sound_Check
   3213  f6bd
   3214  f6bd				   .skip10OR
   3215  f6bd				   .
   3216  f6bd							; 
   3217  f6bd
   3218  f6bd				   .
   3219  f6bd							; 
   3220  f6bd
   3221  f6bd				   .
   3222  f6bd							; 
   3223  f6bd
   3224  f6bd				   .
   3225  f6bd							; 
   3226  f6bd
   3227  f6bd				   .L075		;  if _Fall_Gravity_Counter  =  17  ||  _Fall_Gravity_Counter	=  27 then _Ch0_Sound  =  _c_Fall_Sound  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   3228  f6bd
   3229  f6bd		       a5 d8		      LDA	_Fall_Gravity_Counter
   3230  f6bf		       c9 11		      CMP	#17
   3231  f6c1		       d0 03		      BNE	.skipL075
   3232  f6c3				   .condpart32
   3233  f6c3		       4c cc f6 	      jmp	.condpart33
   3234  f6c6				   .skipL075
   3235  f6c6		       a5 d8		      LDA	_Fall_Gravity_Counter
   3236  f6c8		       c9 1b		      CMP	#27
   3237  f6ca		       d0 0c		      BNE	.skip11OR
   3238  f6cc				   .condpart33
   3239  f6cc		       a9 02		      LDA	#_c_Fall_Sound
   3240  f6ce		       85 de		      STA	_Ch0_Sound
   3241  f6d0		       a9 01		      LDA	#1
   3242  f6d2		       85 df		      STA	_Ch0_Duration
   3243  f6d4		       a9 00		      LDA	#0
   3244  f6d6		       85 e0		      STA	_Ch0_Counter
   3245  f6d8				   .skip11OR
   3246  f6d8				   .
   3247  f6d8							; 
   3248  f6d8
   3249  f6d8				   .__Skip_Fall_Sound_Check
   3250  f6d8							; __Skip_Fall_Sound_Check
   3251  f6d8
   3252  f6d8				   .
   3253  f6d8							; 
   3254  f6d8
   3255  f6d8				   .
   3256  f6d8							; 
   3257  f6d8
   3258  f6d8				   .
   3259  f6d8							; 
   3260  f6d8
   3261  f6d8				   .
   3262  f6d8							; 
   3263  f6d8
   3264  f6d8				   .L076		;  _Bit0_Fall_in_Progress{0}  =  1
   3265  f6d8
   3266  f6d8		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   3267  f6da		       09 01		      ORA	#1
   3268  f6dc		       85 ec		      STA	_Bit0_Fall_in_Progress
   3269  f6de				   .
   3270  f6de							; 
   3271  f6de
   3272  f6de				   .
   3273  f6de							; 
   3274  f6de
   3275  f6de				   .
   3276  f6de							; 
   3277  f6de
   3278  f6de				   .
   3279  f6de							; 
   3280  f6de
   3281  f6de				   .L077		;  _Bit5_Ground_Slide_in_Progress{5}  =  0
   3282  f6de
   3283  f6de		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   3284  f6e0		       29 df		      AND	#223
   3285  f6e2		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   3286  f6e4				   .
   3287  f6e4							; 
   3288  f6e4
   3289  f6e4				   .L078		;  goto __Skip_Fall_02
   3290  f6e4
   3291  f6e4		       4c 03 f7 	      jmp	.__Skip_Fall_02
   3292  f6e7
   3293  f6e7				   .
   3294  f6e7							; 
   3295  f6e7
   3296  f6e7				   .__Skip_Fall_01
   3297  f6e7							; __Skip_Fall_01
   3298  f6e7
   3299  f6e7				   .
   3300  f6e7							; 
   3301  f6e7
   3302  f6e7				   .
   3303  f6e7							; 
   3304  f6e7
   3305  f6e7				   .
   3306  f6e7							; 
   3307  f6e7
   3308  f6e7				   .
   3309  f6e7							; 
   3310  f6e7
   3311  f6e7				   .L079		;  _Bit0_Fall_in_Progress{0}  =  0  :	_Fall_Gravity_Counter  =  0
   3312  f6e7
   3313  f6e7		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   3314  f6e9		       29 fe		      AND	#254
   3315  f6eb		       85 ec		      STA	_Bit0_Fall_in_Progress
   3316  f6ed		       a9 00		      LDA	#0
   3317  f6ef		       85 d8		      STA	_Fall_Gravity_Counter
   3318  f6f1				   .
   3319  f6f1							; 
   3320  f6f1
   3321  f6f1				   .
   3322  f6f1							; 
   3323  f6f1
   3324  f6f1				   .
   3325  f6f1							; 
   3326  f6f1
   3327  f6f1				   .
   3328  f6f1							; 
   3329  f6f1
   3330  f6f1				   .L080		;  temp5  =   ( player1y )  / 8
   3331  f6f1
   3332  f6f1							; complex statement detected
   3333  f6f1		       a5 86		      LDA	player1y
   3334  f6f3		       4a		      lsr
   3335  f6f4		       4a		      lsr
   3336  f6f5		       4a		      lsr
   3337  f6f6		       85 a0		      STA	temp5
   3338  f6f8				   .
   3339  f6f8							; 
   3340  f6f8
   3341  f6f8				   .
   3342  f6f8							; 
   3343  f6f8
   3344  f6f8				   .
   3345  f6f8							; 
   3346  f6f8
   3347  f6f8				   .
   3348  f6f8							; 
   3349  f6f8
   3350  f6f8				   .L081		;  if pfread ( _Convert_X , temp5 )  then player1y  =	player1y  -  1
   3351  f6f8
   3352  f6f8		       a5 d5		      LDA	_Convert_X
   3353  f6fa		       a4 a0		      LDY	temp5
   3354  f6fc		       20 75 f2 	      jsr	pfread
   3355  f6ff		       d0 02		      BNE	.skipL081
   3356  f701				   .condpart34
   3357  f701		       c6 86		      DEC	player1y
   3358  f703				   .skipL081
   3359  f703				   .
   3360  f703							; 
   3361  f703
   3362  f703				   .__Skip_Fall_02
   3363  f703							; __Skip_Fall_02
   3364  f703
   3365  f703				   .
   3366  f703							; 
   3367  f703
   3368  f703				   .
   3369  f703							; 
   3370  f703
   3371  f703				   .
   3372  f703							; 
   3373  f703
   3374  f703				   .
   3375  f703							; 
   3376  f703
   3377  f703				   .L082		;  _Bit6_Duck_in_Progress{6}  =  0
   3378  f703
   3379  f703		       a5 ec		      LDA	_Bit6_Duck_in_Progress
   3380  f705		       29 bf		      AND	#191
   3381  f707		       85 ec		      STA	_Bit6_Duck_in_Progress
   3382  f709				   .
   3383  f709							; 
   3384  f709
   3385  f709				   .
   3386  f709							; 
   3387  f709
   3388  f709				   .
   3389  f709							; 
   3390  f709
   3391  f709				   .
   3392  f709							; 
   3393  f709
   3394  f709				   .
   3395  f709							; 
   3396  f709
   3397  f709				   .
   3398  f709							; 
   3399  f709
   3400  f709				   .
   3401  f709							; 
   3402  f709
   3403  f709				   .
   3404  f709							; 
   3405  f709
   3406  f709				   .
   3407  f709							; 
   3408  f709
   3409  f709				   .
   3410  f709							; 
   3411  f709
   3412  f709				   .L083		;  if !joy0down then goto __Skip_Duck
   3413  f709
   3414  f709		       a9 20		      lda	#$20
   3415  f70b		       2c 80 02 	      bit	SWCHA
   3416  f70e		       f0 03		      BEQ	.skipL083
   3417  f710				   .condpart35
   3418  f710		       4c 3c f7 	      jmp	.__Skip_Duck
   3419  f713
   3420  f713				   .skipL083
   3421  f713				   .
   3422  f713							; 
   3423  f713
   3424  f713				   .
   3425  f713							; 
   3426  f713
   3427  f713				   .
   3428  f713							; 
   3429  f713
   3430  f713				   .
   3431  f713							; 
   3432  f713
   3433  f713				   .L084		;  if _Bit0_Fall_in_Progress{0}  ||  _Jump_Gravity_Counter then goto __Skip_Duck
   3434  f713
   3435  f713		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   3436  f715		       4a		      LSR
   3437  f716		       90 03		      BCC	.skipL084
   3438  f718				   .condpart36
   3439  f718		       4c 1f f7 	      jmp	.condpart37
   3440  f71b				   .skipL084
   3441  f71b		       a5 d7		      LDA	_Jump_Gravity_Counter
   3442  f71d		       f0 03		      BEQ	.skip12OR
   3443  f71f				   .condpart37
   3444  f71f		       4c 3c f7 	      jmp	.__Skip_Duck
   3445  f722
   3446  f722				   .skip12OR
   3447  f722				   .
   3448  f722							; 
   3449  f722
   3450  f722				   .
   3451  f722							; 
   3452  f722
   3453  f722				   .
   3454  f722							; 
   3455  f722
   3456  f722				   .
   3457  f722							; 
   3458  f722
   3459  f722				   .L085		;  _Bit6_Duck_in_Progress{6}  =  1
   3460  f722
   3461  f722		       a5 ec		      LDA	_Bit6_Duck_in_Progress
   3462  f724		       09 40		      ORA	#64
   3463  f726		       85 ec		      STA	_Bit6_Duck_in_Progress
   3464  f728				   .
   3465  f728							; 
   3466  f728
   3467  f728				   .
   3468  f728							; 
   3469  f728
   3470  f728				   .
   3471  f728							; 
   3472  f728
   3473  f728				   .
   3474  f728							; 
   3475  f728
   3476  f728				   .L086		;  player1color:
   3477  f728
   3478  f728		       a2 c0		      LDX	#<playercolorL086_1
   3479  f72a		       86 87		      STX	player1color
   3480  f72c		       a9 fc		      LDA	#>playercolorL086_1
   3481  f72e		       85 88		      STA	player1color+1
   3482  f730				   .
   3483  f730							; 
   3484  f730
   3485  f730				   .L087		;  player1:
   3486  f730
   3487  f730		       a2 c8		      LDX	#<playerL087_1
   3488  f732		       86 8c		      STX	player1pointerlo
   3489  f734		       a9 fc		      LDA	#>playerL087_1
   3490  f736		       85 8d		      STA	player1pointerhi
   3491  f738		       a9 07		      LDA	#7
   3492  f73a		       85 8f		      STA	player1height
   3493  f73c				   .
   3494  f73c							; 
   3495  f73c
   3496  f73c				   .__Skip_Duck
   3497  f73c							; __Skip_Duck
   3498  f73c
   3499  f73c				   .
   3500  f73c							; 
   3501  f73c
   3502  f73c				   .
   3503  f73c							; 
   3504  f73c
   3505  f73c				   .
   3506  f73c							; 
   3507  f73c
   3508  f73c				   .
   3509  f73c							; 
   3510  f73c
   3511  f73c				   .
   3512  f73c							; 
   3513  f73c
   3514  f73c				   .
   3515  f73c							; 
   3516  f73c
   3517  f73c				   .
   3518  f73c							; 
   3519  f73c
   3520  f73c				   .L088		;  _Bit6_LR_Joy_Movement{6}  =  0
   3521  f73c
   3522  f73c		       a5 eb		      LDA	_Bit6_LR_Joy_Movement
   3523  f73e		       29 bf		      AND	#191
   3524  f740		       85 eb		      STA	_Bit6_LR_Joy_Movement
   3525  f742				   .
   3526  f742							; 
   3527  f742
   3528  f742				   .
   3529  f742							; 
   3530  f742
   3531  f742				   .
   3532  f742							; 
   3533  f742
   3534  f742				   .
   3535  f742							; 
   3536  f742
   3537  f742				   .
   3538  f742							; 
   3539  f742
   3540  f742				   .
   3541  f742							; 
   3542  f742
   3543  f742				   .
   3544  f742							; 
   3545  f742
   3546  f742				   .
   3547  f742							; 
   3548  f742
   3549  f742				   .
   3550  f742							; 
   3551  f742
   3552  f742				   .
   3553  f742							; 
   3554  f742
   3555  f742				   .L089		;  if !joy0left then goto __Skip_Joy0Left
   3556  f742
   3557  f742		       2c 80 02 	      bit	SWCHA
   3558  f745		       50 03		      BVC	.skipL089
   3559  f747				   .condpart38
   3560  f747		       4c d5 f7 	      jmp	.__Skip_Joy0Left
   3561  f74a
   3562  f74a				   .skipL089
   3563  f74a				   .
   3564  f74a							; 
   3565  f74a
   3566  f74a				   .
   3567  f74a							; 
   3568  f74a
   3569  f74a				   .
   3570  f74a							; 
   3571  f74a
   3572  f74a				   .
   3573  f74a							; 
   3574  f74a
   3575  f74a				   .
   3576  f74a							; 
   3577  f74a
   3578  f74a				   .
   3579  f74a							; 
   3580  f74a
   3581  f74a				   .L090		;  if _Bit0_Fall_in_Progress{0}  ||  _Jump_Gravity_Counter then _Bit5_Ground_Slide_in_Progress{5}  =  0  :  _Bit1_Slide_Left_in_Progress{1}  =  1  :  _Bit2_Slide_Right_in_Progress{2}  =  0  :  goto __Skip_Slide_Check_Left
   3582  f74a
   3583  f74a		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   3584  f74c		       4a		      LSR
   3585  f74d		       90 03		      BCC	.skipL090
   3586  f74f				   .condpart39
   3587  f74f		       4c 56 f7 	      jmp	.condpart40
   3588  f752				   .skipL090
   3589  f752		       a5 d7		      LDA	_Jump_Gravity_Counter
   3590  f754		       f0 15		      BEQ	.skip13OR
   3591  f756				   .condpart40
   3592  f756		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   3593  f758		       29 df		      AND	#223
   3594  f75a		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   3595  f75c		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   3596  f75e		       09 02		      ORA	#2
   3597  f760		       85 ec		      STA	_Bit1_Slide_Left_in_Progress
   3598  f762		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   3599  f764		       29 fb		      AND	#251
   3600  f766		       85 ec		      STA	_Bit2_Slide_Right_in_Progress
   3601  f768		       4c 9b f7 	      jmp	.__Skip_Slide_Check_Left
   3602  f76b
   3603  f76b				   .skip13OR
   3604  f76b				   .
   3605  f76b							; 
   3606  f76b
   3607  f76b				   .
   3608  f76b							; 
   3609  f76b
   3610  f76b				   .
   3611  f76b							; 
   3612  f76b
   3613  f76b				   .
   3614  f76b							; 
   3615  f76b
   3616  f76b				   .
   3617  f76b							; 
   3618  f76b
   3619  f76b				   .L091		;  if _Bit5_Ground_Slide_in_Progress{5} then _Bit5_Ground_Slide_in_Progress{5}  =  1  :  _Bit1_Slide_Left_in_Progress{1}  =  0  :  _Bit2_Slide_Right_in_Progress{2}  =  1  :  goto __Skip_Joy0Left
   3620  f76b
   3621  f76b		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   3622  f76d		       29 20		      AND	#32
   3623  f76f		       f0 15		      BEQ	.skipL091
   3624  f771				   .condpart41
   3625  f771		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   3626  f773		       09 20		      ORA	#32
   3627  f775		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   3628  f777		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   3629  f779		       29 fd		      AND	#253
   3630  f77b		       85 ec		      STA	_Bit1_Slide_Left_in_Progress
   3631  f77d		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   3632  f77f		       09 04		      ORA	#4
   3633  f781		       85 ec		      STA	_Bit2_Slide_Right_in_Progress
   3634  f783		       4c d5 f7 	      jmp	.__Skip_Joy0Left
   3635  f786
   3636  f786				   .skipL091
   3637  f786				   .
   3638  f786							; 
   3639  f786
   3640  f786				   .
   3641  f786							; 
   3642  f786
   3643  f786				   .
   3644  f786							; 
   3645  f786
   3646  f786				   .
   3647  f786							; 
   3648  f786
   3649  f786				   .
   3650  f786							; 
   3651  f786
   3652  f786				   .
   3653  f786							; 
   3654  f786
   3655  f786				   .L092		;  if _Bit2_Slide_Right_in_Progress{2} then _Bit5_Ground_Slide_in_Progress{5}	=  1  :  _Bit1_Slide_Left_in_Progress{1}  =  0	:  goto __Skip_Joy0Left
   3656  f786
   3657  f786		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   3658  f788		       29 04		      AND	#4
   3659  f78a		       f0 0f		      BEQ	.skipL092
   3660  f78c				   .condpart42
   3661  f78c		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   3662  f78e		       09 20		      ORA	#32
   3663  f790		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   3664  f792		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   3665  f794		       29 fd		      AND	#253
   3666  f796		       85 ec		      STA	_Bit1_Slide_Left_in_Progress
   3667  f798		       4c d5 f7 	      jmp	.__Skip_Joy0Left
   3668  f79b
   3669  f79b				   .skipL092
   3670  f79b				   .
   3671  f79b							; 
   3672  f79b
   3673  f79b				   .__Skip_Slide_Check_Left
   3674  f79b							; __Skip_Slide_Check_Left
   3675  f79b
   3676  f79b				   .
   3677  f79b							; 
   3678  f79b
   3679  f79b				   .
   3680  f79b							; 
   3681  f79b
   3682  f79b				   .
   3683  f79b							; 
   3684  f79b
   3685  f79b				   .
   3686  f79b							; 
   3687  f79b
   3688  f79b				   .L093		;  temp5  =   ( player1x - 18 )  / 4
   3689  f79b
   3690  f79b							; complex statement detected
   3691  f79b		       a5 81		      LDA	player1x
   3692  f79d		       38		      SEC
   3693  f79e		       e9 12		      SBC	#18
   3694  f7a0		       4a		      lsr
   3695  f7a1		       4a		      lsr
   3696  f7a2		       85 a0		      STA	temp5
   3697  f7a4				   .
   3698  f7a4							; 
   3699  f7a4
   3700  f7a4				   .
   3701  f7a4							; 
   3702  f7a4
   3703  f7a4				   .
   3704  f7a4							; 
   3705  f7a4
   3706  f7a4				   .
   3707  f7a4							; 
   3708  f7a4
   3709  f7a4				   .L094		;  if pfread ( temp5 , _Convert_Y )  then goto __Skip_Joy0Left
   3710  f7a4
   3711  f7a4		       a5 a0		      LDA	temp5
   3712  f7a6		       a4 d6		      LDY	_Convert_Y
   3713  f7a8		       20 75 f2 	      jsr	pfread
   3714  f7ab		       d0 03		      BNE	.skipL094
   3715  f7ad				   .condpart43
   3716  f7ad		       4c d5 f7 	      jmp	.__Skip_Joy0Left
   3717  f7b0
   3718  f7b0				   .skipL094
   3719  f7b0				   .
   3720  f7b0							; 
   3721  f7b0
   3722  f7b0				   .
   3723  f7b0							; 
   3724  f7b0
   3725  f7b0				   .
   3726  f7b0							; 
   3727  f7b0
   3728  f7b0				   .
   3729  f7b0							; 
   3730  f7b0
   3731  f7b0				   .L095		;  _Bit1_Slide_Left_in_Progress{1}  =	1  :  _Bit6_LR_Joy_Movement{6}	=  1
   3732  f7b0
   3733  f7b0		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   3734  f7b2		       09 02		      ORA	#2
   3735  f7b4		       85 ec		      STA	_Bit1_Slide_Left_in_Progress
   3736  f7b6		       a5 eb		      LDA	_Bit6_LR_Joy_Movement
   3737  f7b8		       09 40		      ORA	#64
   3738  f7ba		       85 eb		      STA	_Bit6_LR_Joy_Movement
   3739  f7bc				   .
   3740  f7bc							; 
   3741  f7bc
   3742  f7bc				   .
   3743  f7bc							; 
   3744  f7bc
   3745  f7bc				   .
   3746  f7bc							; 
   3747  f7bc
   3748  f7bc				   .
   3749  f7bc							; 
   3750  f7bc
   3751  f7bc				   .L096		;  if player1x  >  17 then _P1_Left_Right  =  _P1_Left_Right  -  1.38
   3752  f7bc
   3753  f7bc		       a9 11		      LDA	#17
   3754  f7be		       c5 81		      CMP	player1x
   3755  f7c0		       b0 0d		      BCS	.skipL096
   3756  f7c2				   .condpart44
   3757  f7c2		       a5 d4		      LDA	a
   3758  f7c4		       38		      SEC
   3759  f7c5		       e9 61		      SBC	#97
   3760  f7c7		       85 d4		      STA	a
   3761  f7c9		       a5 81		      LDA	_P1_Left_Right
   3762  f7cb		       e9 01		      SBC	#1
   3763  f7cd		       85 81		      STA	_P1_Left_Right
   3764  f7cf				   .skipL096
   3765  f7cf				   .
   3766  f7cf							; 
   3767  f7cf
   3768  f7cf				   .
   3769  f7cf							; 
   3770  f7cf
   3771  f7cf				   .
   3772  f7cf							; 
   3773  f7cf
   3774  f7cf				   .
   3775  f7cf							; 
   3776  f7cf
   3777  f7cf				   .L097		;  _Bit4_Flip_P1{4}  =  0
   3778  f7cf
   3779  f7cf		       a5 ec		      LDA	_Bit4_Flip_P1
   3780  f7d1		       29 ef		      AND	#239
   3781  f7d3		       85 ec		      STA	_Bit4_Flip_P1
   3782  f7d5				   .
   3783  f7d5							; 
   3784  f7d5
   3785  f7d5				   .__Skip_Joy0Left
   3786  f7d5							; __Skip_Joy0Left
   3787  f7d5
   3788  f7d5				   .
   3789  f7d5							; 
   3790  f7d5
   3791  f7d5				   .
   3792  f7d5							; 
   3793  f7d5
   3794  f7d5				   .
   3795  f7d5							; 
   3796  f7d5
   3797  f7d5				   .
   3798  f7d5							; 
   3799  f7d5
   3800  f7d5				   .
   3801  f7d5							; 
   3802  f7d5
   3803  f7d5				   .
   3804  f7d5							; 
   3805  f7d5
   3806  f7d5				   .
   3807  f7d5							; 
   3808  f7d5
   3809  f7d5				   .
   3810  f7d5							; 
   3811  f7d5
   3812  f7d5				   .
   3813  f7d5							; 
   3814  f7d5
   3815  f7d5				   .
   3816  f7d5							; 
   3817  f7d5
   3818  f7d5				   .L098		;  if !joy0right then goto __Skip_Joy0Right
   3819  f7d5
   3820  f7d5		       2c 80 02 	      bit	SWCHA
   3821  f7d8		       10 03		      BPL	.skipL098
   3822  f7da				   .condpart45
   3823  f7da		       4c 68 f8 	      jmp	.__Skip_Joy0Right
   3824  f7dd
   3825  f7dd				   .skipL098
   3826  f7dd				   .
   3827  f7dd							; 
   3828  f7dd
   3829  f7dd				   .
   3830  f7dd							; 
   3831  f7dd
   3832  f7dd				   .
   3833  f7dd							; 
   3834  f7dd
   3835  f7dd				   .
   3836  f7dd							; 
   3837  f7dd
   3838  f7dd				   .
   3839  f7dd							; 
   3840  f7dd
   3841  f7dd				   .
   3842  f7dd							; 
   3843  f7dd
   3844  f7dd				   .L099		;  if _Bit0_Fall_in_Progress{0}  ||  _Jump_Gravity_Counter then _Bit5_Ground_Slide_in_Progress{5}  =  0  :  _Bit2_Slide_Right_in_Progress{2}  =  1  :	_Bit1_Slide_Left_in_Progress{1}  =  0  :  goto __Skip_Slide_Check_Right
   3845  f7dd
   3846  f7dd		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   3847  f7df		       4a		      LSR
   3848  f7e0		       90 03		      BCC	.skipL099
   3849  f7e2				   .condpart46
   3850  f7e2		       4c e9 f7 	      jmp	.condpart47
   3851  f7e5				   .skipL099
   3852  f7e5		       a5 d7		      LDA	_Jump_Gravity_Counter
   3853  f7e7		       f0 15		      BEQ	.skip14OR
   3854  f7e9				   .condpart47
   3855  f7e9		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   3856  f7eb		       29 df		      AND	#223
   3857  f7ed		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   3858  f7ef		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   3859  f7f1		       09 04		      ORA	#4
   3860  f7f3		       85 ec		      STA	_Bit2_Slide_Right_in_Progress
   3861  f7f5		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   3862  f7f7		       29 fd		      AND	#253
   3863  f7f9		       85 ec		      STA	_Bit1_Slide_Left_in_Progress
   3864  f7fb		       4c 2e f8 	      jmp	.__Skip_Slide_Check_Right
   3865  f7fe
   3866  f7fe				   .skip14OR
   3867  f7fe				   .
   3868  f7fe							; 
   3869  f7fe
   3870  f7fe				   .
   3871  f7fe							; 
   3872  f7fe
   3873  f7fe				   .
   3874  f7fe							; 
   3875  f7fe
   3876  f7fe				   .
   3877  f7fe							; 
   3878  f7fe
   3879  f7fe				   .
   3880  f7fe							; 
   3881  f7fe
   3882  f7fe				   .L0100		;  if _Bit5_Ground_Slide_in_Progress{5} then _Bit5_Ground_Slide_in_Progress{5}  =  1  :  _Bit2_Slide_Right_in_Progress{2}  =  0  :  _Bit1_Slide_Left_in_Progress{1}  =  1  :  goto __Skip_Joy0Right
   3883  f7fe
   3884  f7fe		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   3885  f800		       29 20		      AND	#32
   3886  f802		       f0 15		      BEQ	.skipL0100
   3887  f804				   .condpart48
   3888  f804		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   3889  f806		       09 20		      ORA	#32
   3890  f808		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   3891  f80a		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   3892  f80c		       29 fb		      AND	#251
   3893  f80e		       85 ec		      STA	_Bit2_Slide_Right_in_Progress
   3894  f810		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   3895  f812		       09 02		      ORA	#2
   3896  f814		       85 ec		      STA	_Bit1_Slide_Left_in_Progress
   3897  f816		       4c 68 f8 	      jmp	.__Skip_Joy0Right
   3898  f819
   3899  f819				   .skipL0100
   3900  f819				   .
   3901  f819							; 
   3902  f819
   3903  f819				   .
   3904  f819							; 
   3905  f819
   3906  f819				   .
   3907  f819							; 
   3908  f819
   3909  f819				   .
   3910  f819							; 
   3911  f819
   3912  f819				   .
   3913  f819							; 
   3914  f819
   3915  f819				   .
   3916  f819							; 
   3917  f819
   3918  f819				   .L0101		;  if _Bit1_Slide_Left_in_Progress{1} then _Bit5_Ground_Slide_in_Progress{5}  =  1  :	_Bit2_Slide_Right_in_Progress{2}  =  0	:  goto __Skip_Joy0Right
   3919  f819
   3920  f819		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   3921  f81b		       29 02		      AND	#2
   3922  f81d		       f0 0f		      BEQ	.skipL0101
   3923  f81f				   .condpart49
   3924  f81f		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   3925  f821		       09 20		      ORA	#32
   3926  f823		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   3927  f825		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   3928  f827		       29 fb		      AND	#251
   3929  f829		       85 ec		      STA	_Bit2_Slide_Right_in_Progress
   3930  f82b		       4c 68 f8 	      jmp	.__Skip_Joy0Right
   3931  f82e
   3932  f82e				   .skipL0101
   3933  f82e				   .
   3934  f82e							; 
   3935  f82e
   3936  f82e				   .__Skip_Slide_Check_Right
   3937  f82e							; __Skip_Slide_Check_Right
   3938  f82e
   3939  f82e				   .
   3940  f82e							; 
   3941  f82e
   3942  f82e				   .
   3943  f82e							; 
   3944  f82e
   3945  f82e				   .
   3946  f82e							; 
   3947  f82e
   3948  f82e				   .
   3949  f82e							; 
   3950  f82e
   3951  f82e				   .L0102		;  temp5  =   ( player1x - 10 )  / 4
   3952  f82e
   3953  f82e							; complex statement detected
   3954  f82e		       a5 81		      LDA	player1x
   3955  f830		       38		      SEC
   3956  f831		       e9 0a		      SBC	#10
   3957  f833		       4a		      lsr
   3958  f834		       4a		      lsr
   3959  f835		       85 a0		      STA	temp5
   3960  f837				   .
   3961  f837							; 
   3962  f837
   3963  f837				   .
   3964  f837							; 
   3965  f837
   3966  f837				   .
   3967  f837							; 
   3968  f837
   3969  f837				   .
   3970  f837							; 
   3971  f837
   3972  f837				   .L0103		;  if pfread ( temp5 , _Convert_Y )  then goto __Skip_Joy0Right
   3973  f837
   3974  f837		       a5 a0		      LDA	temp5
   3975  f839		       a4 d6		      LDY	_Convert_Y
   3976  f83b		       20 75 f2 	      jsr	pfread
   3977  f83e		       d0 03		      BNE	.skipL0103
   3978  f840				   .condpart50
   3979  f840		       4c 68 f8 	      jmp	.__Skip_Joy0Right
   3980  f843
   3981  f843				   .skipL0103
   3982  f843				   .
   3983  f843							; 
   3984  f843
   3985  f843				   .
   3986  f843							; 
   3987  f843
   3988  f843				   .
   3989  f843							; 
   3990  f843
   3991  f843				   .
   3992  f843							; 
   3993  f843
   3994  f843				   .L0104		;  _Bit2_Slide_Right_in_Progress{2}  =  1  :  _Bit6_LR_Joy_Movement{6}  =  1
   3995  f843
   3996  f843		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   3997  f845		       09 04		      ORA	#4
   3998  f847		       85 ec		      STA	_Bit2_Slide_Right_in_Progress
   3999  f849		       a5 eb		      LDA	_Bit6_LR_Joy_Movement
   4000  f84b		       09 40		      ORA	#64
   4001  f84d		       85 eb		      STA	_Bit6_LR_Joy_Movement
   4002  f84f				   .
   4003  f84f							; 
   4004  f84f
   4005  f84f				   .
   4006  f84f							; 
   4007  f84f
   4008  f84f				   .
   4009  f84f							; 
   4010  f84f
   4011  f84f				   .
   4012  f84f							; 
   4013  f84f
   4014  f84f				   .L0105		;  if player1x  <  137 then _P1_Left_Right  =	_P1_Left_Right	+  1.38
   4015  f84f
   4016  f84f		       a5 81		      LDA	player1x
   4017  f851		       c9 89		      CMP	#137
   4018  f853		       b0 0d		      BCS	.skipL0105
   4019  f855				   .condpart51
   4020  f855		       a5 d4		      LDA	a
   4021  f857		       18		      CLC
   4022  f858		       69 61		      ADC	#97
   4023  f85a		       85 d4		      STA	a
   4024  f85c		       a5 81		      LDA	_P1_Left_Right
   4025  f85e		       69 01		      ADC	#1
   4026  f860		       85 81		      STA	_P1_Left_Right
   4027  f862				   .skipL0105
   4028  f862				   .
   4029  f862							; 
   4030  f862
   4031  f862				   .
   4032  f862							; 
   4033  f862
   4034  f862				   .
   4035  f862							; 
   4036  f862
   4037  f862				   .
   4038  f862							; 
   4039  f862
   4040  f862				   .L0106		;  _Bit4_Flip_P1{4}  =  1
   4041  f862
   4042  f862		       a5 ec		      LDA	_Bit4_Flip_P1
   4043  f864		       09 10		      ORA	#16
   4044  f866		       85 ec		      STA	_Bit4_Flip_P1
   4045  f868				   .
   4046  f868							; 
   4047  f868
   4048  f868				   .__Skip_Joy0Right
   4049  f868							; __Skip_Joy0Right
   4050  f868
   4051  f868				   .
   4052  f868							; 
   4053  f868
   4054  f868				   .
   4055  f868							; 
   4056  f868
   4057  f868				   .
   4058  f868							; 
   4059  f868
   4060  f868				   .
   4061  f868							; 
   4062  f868
   4063  f868				   .
   4064  f868							; 
   4065  f868
   4066  f868				   .
   4067  f868							; 
   4068  f868
   4069  f868				   .
   4070  f868							; 
   4071  f868
   4072  f868				   .
   4073  f868							; 
   4074  f868
   4075  f868				   .
   4076  f868							; 
   4077  f868
   4078  f868				   .
   4079  f868							; 
   4080  f868
   4081  f868				   .L0107		;  if !_Bit6_LR_Joy_Movement{6} then goto __Done_Anim_jump
   4082  f868
   4083  f868		       24 eb		      BIT	_Bit6_LR_Joy_Movement
   4084  f86a		       70 03		      BVS	.skipL0107
   4085  f86c				   .condpart52
   4086  f86c		       4c ab f8 	      jmp	.__Done_Anim_jump
   4087  f86f
   4088  f86f				   .skipL0107
   4089  f86f				   .
   4090  f86f							; 
   4091  f86f
   4092  f86f				   .
   4093  f86f							; 
   4094  f86f
   4095  f86f				   .
   4096  f86f							; 
   4097  f86f
   4098  f86f				   .
   4099  f86f							; 
   4100  f86f
   4101  f86f				   .L0108		;  if _Jump_Gravity_Counter  ||  _Bit0_Fall_in_Progress{0} then goto __Done_Anim_jump
   4102  f86f
   4103  f86f		       a5 d7		      LDA	_Jump_Gravity_Counter
   4104  f871		       f0 03		      BEQ	.skipL0108
   4105  f873				   .condpart53
   4106  f873		       4c 7b f8 	      jmp	.condpart54
   4107  f876				   .skipL0108
   4108  f876		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   4109  f878		       4a		      LSR
   4110  f879		       90 03		      BCC	.skip15OR
   4111  f87b				   .condpart54
   4112  f87b		       4c ab f8 	      jmp	.__Done_Anim_jump
   4113  f87e
   4114  f87e				   .skip15OR
   4115  f87e				   .
   4116  f87e							; 
   4117  f87e
   4118  f87e				   .
   4119  f87e							; 
   4120  f87e
   4121  f87e				   .
   4122  f87e							; 
   4123  f87e
   4124  f87e				   .
   4125  f87e							; 
   4126  f87e
   4127  f87e				   .L0109		;  if player1x  <  18	||  player1x  >  136 then goto __Done_Anim_jump
   4128  f87e
   4129  f87e		       a5 81		      LDA	player1x
   4130  f880		       c9 12		      CMP	#18
   4131  f882		       b0 03		      BCS	.skipL0109
   4132  f884				   .condpart55
   4133  f884		       4c 8d f8 	      jmp	.condpart56
   4134  f887				   .skipL0109
   4135  f887		       a9 88		      LDA	#136
   4136  f889		       c5 81		      CMP	player1x
   4137  f88b		       b0 03		      BCS	.skip16OR
   4138  f88d				   .condpart56
   4139  f88d		       4c ab f8 	      jmp	.__Done_Anim_jump
   4140  f890
   4141  f890				   .skip16OR
   4142  f890				   .
   4143  f890							; 
   4144  f890
   4145  f890				   .
   4146  f890							; 
   4147  f890
   4148  f890				   .
   4149  f890							; 
   4150  f890
   4151  f890				   .
   4152  f890							; 
   4153  f890
   4154  f890				   .L0110		;  player1color:
   4155  f890
   4156  f890		       a2 d0		      LDX	#<playercolorL0110_1
   4157  f892		       86 87		      STX	player1color
   4158  f894		       a9 fc		      LDA	#>playercolorL0110_1
   4159  f896		       85 88		      STA	player1color+1
   4160  f898				   .
   4161  f898							; 
   4162  f898
   4163  f898				   .
   4164  f898							; 
   4165  f898
   4166  f898				   .
   4167  f898							; 
   4168  f898
   4169  f898				   .
   4170  f898							; 
   4171  f898
   4172  f898				   .L0111		;  on _Frame_Counter goto __Frame0 __Frame1 __Frame0 __Frame2
   4173  f898
   4174  f898		       a6 dd		      LDX	_Frame_Counter
   4175  f89a		       bd a3 f8 	      LDA	.L0111jumptablehi,x
   4176  f89d		       48		      PHA
   4177  f89e		       bd a7 f8 	      LDA	.L0111jumptablelo,x
   4178  f8a1		       48		      PHA
   4179  f8a2		       60		      RTS
   4180  f8a3				   .L0111jumptablehi
   4181  f8a3		       fc		      .byte.b	>(.__Frame0-1)
   4182  f8a4		       fc		      .byte.b	>(.__Frame1-1)
   4183  f8a5		       fc		      .byte.b	>(.__Frame0-1)
   4184  f8a6		       fc		      .byte.b	>(.__Frame2-1)
   4185  f8a7				   .L0111jumptablelo
   4186  f8a7		       1c		      .byte.b	<(.__Frame0-1)
   4187  f8a8		       2b		      .byte.b	<(.__Frame1-1)
   4188  f8a9		       1c		      .byte.b	<(.__Frame0-1)
   4189  f8aa		       3a		      .byte.b	<(.__Frame2-1)
   4190  f8ab				   .
   4191  f8ab							; 
   4192  f8ab
   4193  f8ab				   .__Done_Anim_jump
   4194  f8ab							; __Done_Anim_jump
   4195  f8ab
   4196  f8ab				   .
   4197  f8ab							; 
   4198  f8ab
   4199  f8ab				   .
   4200  f8ab							; 
   4201  f8ab
   4202  f8ab				   .
   4203  f8ab							; 
   4204  f8ab
   4205  f8ab				   .
   4206  f8ab							; 
   4207  f8ab
   4208  f8ab				   .
   4209  f8ab							; 
   4210  f8ab
   4211  f8ab				   .
   4212  f8ab							; 
   4213  f8ab
   4214  f8ab				   .
   4215  f8ab							; 
   4216  f8ab
   4217  f8ab				   .
   4218  f8ab							; 
   4219  f8ab
   4220  f8ab				   .
   4221  f8ab							; 
   4222  f8ab
   4223  f8ab				   .
   4224  f8ab							; 
   4225  f8ab
   4226  f8ab				   .L0112		;  if _Bit5_Ground_Slide_in_Progress{5} then goto __Skip_Joy0_Slide_Check
   4227  f8ab
   4228  f8ab		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   4229  f8ad		       29 20		      AND	#32
   4230  f8af		       f0 03		      BEQ	.skipL0112
   4231  f8b1				   .condpart57
   4232  f8b1		       4c cc f8 	      jmp	.__Skip_Joy0_Slide_Check
   4233  f8b4
   4234  f8b4				   .skipL0112
   4235  f8b4				   .
   4236  f8b4							; 
   4237  f8b4
   4238  f8b4				   .
   4239  f8b4							; 
   4240  f8b4
   4241  f8b4				   .
   4242  f8b4							; 
   4243  f8b4
   4244  f8b4				   .
   4245  f8b4							; 
   4246  f8b4
   4247  f8b4				   .L0113		;  if joy0right  ||  joy0left then _Slide_Counter  =  0  :  _Slide_Speed  =  1  :  goto __Skip_Slide
   4248  f8b4
   4249  f8b4		       2c 80 02 	      bit	SWCHA
   4250  f8b7		       30 03		      BMI	.skipL0113
   4251  f8b9				   .condpart58
   4252  f8b9		       4c c1 f8 	      jmp	.condpart59
   4253  f8bc				   .skipL0113
   4254  f8bc		       2c 80 02 	      bit	SWCHA
   4255  f8bf		       70 0b		      BVS	.skip17OR
   4256  f8c1				   .condpart59
   4257  f8c1		       a9 00		      LDA	#0
   4258  f8c3		       85 d9		      STA	_Slide_Counter
   4259  f8c5		       a9 01		      LDA	#1
   4260  f8c7		       85 da		      STA	_Slide_Speed
   4261  f8c9		       4c de f9 	      jmp	.__Skip_Slide
   4262  f8cc
   4263  f8cc				   .skip17OR
   4264  f8cc				   .
   4265  f8cc							; 
   4266  f8cc
   4267  f8cc				   .__Skip_Joy0_Slide_Check
   4268  f8cc							; __Skip_Joy0_Slide_Check
   4269  f8cc
   4270  f8cc				   .
   4271  f8cc							; 
   4272  f8cc
   4273  f8cc				   .
   4274  f8cc							; 
   4275  f8cc
   4276  f8cc				   .
   4277  f8cc							; 
   4278  f8cc
   4279  f8cc				   .
   4280  f8cc							; 
   4281  f8cc
   4282  f8cc				   .L0114		;  if player1x  <  17 then _Slide_Counter  =  0  :  _Bit5_Ground_Slide_in_Progress{5}	=  0  :  _Bit1_Slide_Left_in_Progress{1}  =  0	:  _Slide_Speed  =  1  :  _Bit2_Slide_Right_in_Progress{2}  =  1  :  goto __Skip_Slide
   4283  f8cc
   4284  f8cc		       a5 81		      LDA	player1x
   4285  f8ce		       c9 11		      CMP	#17
   4286  f8d0		       b0 1d		      BCS	.skipL0114
   4287  f8d2				   .condpart60
   4288  f8d2		       a9 00		      LDA	#0
   4289  f8d4		       85 d9		      STA	_Slide_Counter
   4290  f8d6		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   4291  f8d8		       29 df		      AND	#223
   4292  f8da		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   4293  f8dc		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   4294  f8de		       29 fd		      AND	#253
   4295  f8e0		       85 ec		      STA	_Bit1_Slide_Left_in_Progress
   4296  f8e2		       a9 01		      LDA	#1
   4297  f8e4		       85 da		      STA	_Slide_Speed
   4298  f8e6		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   4299  f8e8		       09 04		      ORA	#4
   4300  f8ea		       85 ec		      STA	_Bit2_Slide_Right_in_Progress
   4301  f8ec		       4c de f9 	      jmp	.__Skip_Slide
   4302  f8ef
   4303  f8ef				   .skipL0114
   4304  f8ef				   .L0115		;  if player1x  >  137 then _Slide_Counter  =	0  :  _Bit5_Ground_Slide_in_Progress{5}  =  0  :  _Bit2_Slide_Right_in_Progress{2}  =  0  :  _Slide_Speed  =  1  :  _Bit1_Slide_Left_in_Progress{1}  =	1  :  goto __Skip_Slide
   4305  f8ef
   4306  f8ef		       a9 89		      LDA	#137
   4307  f8f1		       c5 81		      CMP	player1x
   4308  f8f3		       b0 1d		      BCS	.skipL0115
   4309  f8f5				   .condpart61
   4310  f8f5		       a9 00		      LDA	#0
   4311  f8f7		       85 d9		      STA	_Slide_Counter
   4312  f8f9		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   4313  f8fb		       29 df		      AND	#223
   4314  f8fd		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   4315  f8ff		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   4316  f901		       29 fb		      AND	#251
   4317  f903		       85 ec		      STA	_Bit2_Slide_Right_in_Progress
   4318  f905		       a9 01		      LDA	#1
   4319  f907		       85 da		      STA	_Slide_Speed
   4320  f909		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   4321  f90b		       09 02		      ORA	#2
   4322  f90d		       85 ec		      STA	_Bit1_Slide_Left_in_Progress
   4323  f90f		       4c de f9 	      jmp	.__Skip_Slide
   4324  f912
   4325  f912				   .skipL0115
   4326  f912				   .
   4327  f912							; 
   4328  f912
   4329  f912				   .
   4330  f912							; 
   4331  f912
   4332  f912				   .
   4333  f912							; 
   4334  f912
   4335  f912				   .
   4336  f912							; 
   4337  f912
   4338  f912				   .L0116		;  if !_Bit1_Slide_Left_in_Progress{1}  &&  !_Bit2_Slide_Right_in_Progress{2} then goto __Skip_Slide
   4339  f912
   4340  f912		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   4341  f914		       29 02		      AND	#2
   4342  f916		       d0 09		      BNE	.skipL0116
   4343  f918				   .condpart62
   4344  f918		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   4345  f91a		       29 04		      AND	#4
   4346  f91c		       d0 03		      BNE	.skip62then
   4347  f91e				   .condpart63
   4348  f91e		       4c de f9 	      jmp	.__Skip_Slide
   4349  f921
   4350  f921				   .skip62then
   4351  f921				   .skipL0116
   4352  f921				   .
   4353  f921							; 
   4354  f921
   4355  f921				   .
   4356  f921							; 
   4357  f921
   4358  f921				   .
   4359  f921							; 
   4360  f921
   4361  f921				   .
   4362  f921							; 
   4363  f921
   4364  f921				   .L0117		;  _Slide_Limit  =  31  :  _Bit5_Ground_Slide_in_Progress{5}  =  1
   4365  f921
   4366  f921		       a9 1f		      LDA	#31
   4367  f923		       85 db		      STA	_Slide_Limit
   4368  f925		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   4369  f927		       09 20		      ORA	#32
   4370  f929		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   4371  f92b				   .
   4372  f92b							; 
   4373  f92b
   4374  f92b				   .
   4375  f92b							; 
   4376  f92b
   4377  f92b				   .
   4378  f92b							; 
   4379  f92b
   4380  f92b				   .
   4381  f92b							; 
   4382  f92b
   4383  f92b				   .
   4384  f92b							; 
   4385  f92b
   4386  f92b				   .L0118		;  if _Bit0_Fall_in_Progress{0}  ||  _Jump_Gravity_Counter then _Slide_Limit  =  127  :  _Bit5_Ground_Slide_in_Progress{5}  =	0
   4387  f92b
   4388  f92b		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   4389  f92d		       4a		      LSR
   4390  f92e		       90 03		      BCC	.skipL0118
   4391  f930				   .condpart64
   4392  f930		       4c 37 f9 	      jmp	.condpart65
   4393  f933				   .skipL0118
   4394  f933		       a5 d7		      LDA	_Jump_Gravity_Counter
   4395  f935		       f0 0a		      BEQ	.skip19OR
   4396  f937				   .condpart65
   4397  f937		       a9 7f		      LDA	#127
   4398  f939		       85 db		      STA	_Slide_Limit
   4399  f93b		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   4400  f93d		       29 df		      AND	#223
   4401  f93f		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   4402  f941				   .skip19OR
   4403  f941				   .
   4404  f941							; 
   4405  f941
   4406  f941				   .
   4407  f941							; 
   4408  f941
   4409  f941				   .
   4410  f941							; 
   4411  f941
   4412  f941				   .
   4413  f941							; 
   4414  f941
   4415  f941				   .L0119		;  if _Bit6_Duck_in_Progress{6} then goto __Skip_Slide_Sprite
   4416  f941
   4417  f941		       24 ec		      BIT	_Bit6_Duck_in_Progress
   4418  f943		       50 03		      BVC	.skipL0119
   4419  f945				   .condpart66
   4420  f945		       4c 6b f9 	      jmp	.__Skip_Slide_Sprite
   4421  f948
   4422  f948				   .skipL0119
   4423  f948				   .
   4424  f948							; 
   4425  f948
   4426  f948				   .
   4427  f948							; 
   4428  f948
   4429  f948				   .
   4430  f948							; 
   4431  f948
   4432  f948				   .
   4433  f948							; 
   4434  f948
   4435  f948				   .L0120		;  if _Jump_Gravity_Counter  ||  _Bit0_Fall_in_Progress{0} then goto __Skip_Slide_Sprite
   4436  f948
   4437  f948		       a5 d7		      LDA	_Jump_Gravity_Counter
   4438  f94a		       f0 03		      BEQ	.skipL0120
   4439  f94c				   .condpart67
   4440  f94c		       4c 54 f9 	      jmp	.condpart68
   4441  f94f				   .skipL0120
   4442  f94f		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   4443  f951		       4a		      LSR
   4444  f952		       90 03		      BCC	.skip20OR
   4445  f954				   .condpart68
   4446  f954		       4c 6b f9 	      jmp	.__Skip_Slide_Sprite
   4447  f957
   4448  f957				   .skip20OR
   4449  f957				   .
   4450  f957							; 
   4451  f957
   4452  f957				   .
   4453  f957							; 
   4454  f957
   4455  f957				   .
   4456  f957							; 
   4457  f957
   4458  f957				   .
   4459  f957							; 
   4460  f957
   4461  f957				   .L0121		;  player1:
   4462  f957
   4463  f957		       a2 da		      LDX	#<playerL0121_1
   4464  f959		       86 8c		      STX	player1pointerlo
   4465  f95b		       a9 fc		      LDA	#>playerL0121_1
   4466  f95d		       85 8d		      STA	player1pointerhi
   4467  f95f		       a9 09		      LDA	#9
   4468  f961		       85 8f		      STA	player1height
   4469  f963				   .
   4470  f963							; 
   4471  f963
   4472  f963				   .L0122		;  player1color:
   4473  f963
   4474  f963		       a2 e4		      LDX	#<playercolorL0122_1
   4475  f965		       86 87		      STX	player1color
   4476  f967		       a9 fc		      LDA	#>playercolorL0122_1
   4477  f969		       85 88		      STA	player1color+1
   4478  f96b				   .
   4479  f96b							; 
   4480  f96b
   4481  f96b				   .__Skip_Slide_Sprite
   4482  f96b							; __Skip_Slide_Sprite
   4483  f96b
   4484  f96b				   .
   4485  f96b							; 
   4486  f96b
   4487  f96b				   .
   4488  f96b							; 
   4489  f96b
   4490  f96b				   .
   4491  f96b							; 
   4492  f96b
   4493  f96b				   .
   4494  f96b							; 
   4495  f96b
   4496  f96b				   .
   4497  f96b							; 
   4498  f96b
   4499  f96b				   .L0123		;  if _Slide_Counter  =  0  &&  _Ch0_Sound  =	0 then if !_Bit0_Fall_in_Progress{0} then _Ch0_Sound  =  _c_Slide_Sound  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   4500  f96b
   4501  f96b		       a5 d9		      LDA	_Slide_Counter
   4502  f96d		       c9 00		      CMP	#0
   4503  f96f		       d0 17		      BNE	.skipL0123
   4504  f971				   .condpart69
   4505  f971		       a5 de		      LDA	_Ch0_Sound
   4506  f973		       c9 00		      CMP	#0
   4507  f975		       d0 11		      BNE	.skip69then
   4508  f977				   .condpart70
   4509  f977		       a5 ec		      LDA	_Bit0_Fall_in_Progress
   4510  f979		       4a		      LSR
   4511  f97a		       b0 0c		      BCS	.skip70then
   4512  f97c				   .condpart71
   4513  f97c		       a9 03		      LDA	#_c_Slide_Sound
   4514  f97e		       85 de		      STA	_Ch0_Sound
   4515  f980		       a9 01		      LDA	#1
   4516  f982		       85 df		      STA	_Ch0_Duration
   4517  f984		       a9 00		      LDA	#0
   4518  f986		       85 e0		      STA	_Ch0_Counter
   4519  f988				   .skip70then
   4520  f988				   .skip69then
   4521  f988				   .skipL0123
   4522  f988				   .
   4523  f988							; 
   4524  f988
   4525  f988				   .
   4526  f988							; 
   4527  f988
   4528  f988				   .
   4529  f988							; 
   4530  f988
   4531  f988				   .
   4532  f988							; 
   4533  f988
   4534  f988				   .L0124		;  _Slide_Counter  =  _Slide_Counter  +  1
   4535  f988
   4536  f988		       e6 d9		      INC	_Slide_Counter
   4537  f98a				   .
   4538  f98a							; 
   4539  f98a
   4540  f98a				   .
   4541  f98a							; 
   4542  f98a
   4543  f98a				   .
   4544  f98a							; 
   4545  f98a
   4546  f98a				   .
   4547  f98a							; 
   4548  f98a
   4549  f98a				   .L0125		;  if _Slide_Counter  <  _Slide_Speed then goto __Skip_Slide
   4550  f98a
   4551  f98a		       a5 d9		      LDA	_Slide_Counter
   4552  f98c		       c5 da		      CMP	_Slide_Speed
   4553  f98e		       b0 03		      BCS	.skipL0125
   4554  f990				   .condpart72
   4555  f990		       4c de f9 	      jmp	.__Skip_Slide
   4556  f993
   4557  f993				   .skipL0125
   4558  f993				   .
   4559  f993							; 
   4560  f993
   4561  f993				   .
   4562  f993							; 
   4563  f993
   4564  f993				   .
   4565  f993							; 
   4566  f993
   4567  f993				   .
   4568  f993							; 
   4569  f993
   4570  f993				   .L0126		;  _Slide_Speed  =  _Slide_Speed  *  2
   4571  f993
   4572  f993		       a5 da		      LDA	_Slide_Speed
   4573  f995		       0a		      asl
   4574  f996		       85 da		      STA	_Slide_Speed
   4575  f998				   .
   4576  f998							; 
   4577  f998
   4578  f998				   .
   4579  f998							; 
   4580  f998
   4581  f998				   .
   4582  f998							; 
   4583  f998
   4584  f998				   .
   4585  f998							; 
   4586  f998
   4587  f998				   .L0127		;  if _Bit1_Slide_Left_in_Progress{1} then _P1_Left_Right  =  _P1_Left_Right  -  1.04
   4588  f998
   4589  f998		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   4590  f99a		       29 02		      AND	#2
   4591  f99c		       f0 0d		      BEQ	.skipL0127
   4592  f99e				   .condpart73
   4593  f99e		       a5 d4		      LDA	a
   4594  f9a0		       38		      SEC
   4595  f9a1		       e9 0a		      SBC	#10
   4596  f9a3		       85 d4		      STA	a
   4597  f9a5		       a5 81		      LDA	_P1_Left_Right
   4598  f9a7		       e9 01		      SBC	#1
   4599  f9a9		       85 81		      STA	_P1_Left_Right
   4600  f9ab				   .skipL0127
   4601  f9ab				   .L0128		;  if _Bit2_Slide_Right_in_Progress{2} then _P1_Left_Right  =	_P1_Left_Right	+  1.04
   4602  f9ab
   4603  f9ab		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   4604  f9ad		       29 04		      AND	#4
   4605  f9af		       f0 0d		      BEQ	.skipL0128
   4606  f9b1				   .condpart74
   4607  f9b1		       a5 d4		      LDA	a
   4608  f9b3		       18		      CLC
   4609  f9b4		       69 0a		      ADC	#10
   4610  f9b6		       85 d4		      STA	a
   4611  f9b8		       a5 81		      LDA	_P1_Left_Right
   4612  f9ba		       69 01		      ADC	#1
   4613  f9bc		       85 81		      STA	_P1_Left_Right
   4614  f9be				   .skipL0128
   4615  f9be				   .
   4616  f9be							; 
   4617  f9be
   4618  f9be				   .
   4619  f9be							; 
   4620  f9be
   4621  f9be				   .
   4622  f9be							; 
   4623  f9be
   4624  f9be				   .
   4625  f9be							; 
   4626  f9be
   4627  f9be				   .L0129		;  if _Slide_Speed  >	_Slide_Limit then _Slide_Speed	=  1  :  _Slide_Counter  =  0  :  _Bit1_Slide_Left_in_Progress{1}  =  0  :  _Bit2_Slide_Right_in_Progress{2}  =  0  :  _Bit5_Ground_Slide_in_Progress{5}  =  0
   4628  f9be
   4629  f9be		       a5 db		      LDA	_Slide_Limit
   4630  f9c0		       c5 da		      CMP	_Slide_Speed
   4631  f9c2		       b0 1a		      BCS	.skipL0129
   4632  f9c4				   .condpart75
   4633  f9c4		       a9 01		      LDA	#1
   4634  f9c6		       85 da		      STA	_Slide_Speed
   4635  f9c8		       a9 00		      LDA	#0
   4636  f9ca		       85 d9		      STA	_Slide_Counter
   4637  f9cc		       a5 ec		      LDA	_Bit1_Slide_Left_in_Progress
   4638  f9ce		       29 fd		      AND	#253
   4639  f9d0		       85 ec		      STA	_Bit1_Slide_Left_in_Progress
   4640  f9d2		       a5 ec		      LDA	_Bit2_Slide_Right_in_Progress
   4641  f9d4		       29 fb		      AND	#251
   4642  f9d6		       85 ec		      STA	_Bit2_Slide_Right_in_Progress
   4643  f9d8		       a5 ec		      LDA	_Bit5_Ground_Slide_in_Progress
   4644  f9da		       29 df		      AND	#223
   4645  f9dc		       85 ec		      STA	_Bit5_Ground_Slide_in_Progress
   4646  f9de				   .skipL0129
   4647  f9de				   .
   4648  f9de							; 
   4649  f9de
   4650  f9de				   .__Skip_Slide
   4651  f9de							; __Skip_Slide
   4652  f9de
   4653  f9de				   .
   4654  f9de							; 
   4655  f9de
   4656  f9de				   .
   4657  f9de							; 
   4658  f9de
   4659  f9de				   .
   4660  f9de							; 
   4661  f9de
   4662  f9de				   .
   4663  f9de							; 
   4664  f9de
   4665  f9de				   .
   4666  f9de							; 
   4667  f9de
   4668  f9de				   .
   4669  f9de							; 
   4670  f9de
   4671  f9de				   .
   4672  f9de							; 
   4673  f9de
   4674  f9de				   .L0130		;  if _Bit4_Flip_P1{4} then REFP1  =  8
   4675  f9de
   4676  f9de		       a5 ec		      LDA	_Bit4_Flip_P1
   4677  f9e0		       29 10		      AND	#16
   4678  f9e2		       f0 04		      BEQ	.skipL0130
   4679  f9e4				   .condpart76
   4680  f9e4		       a9 08		      LDA	#8
   4681  f9e6		       85 0c		      STA	REFP1
   4682  f9e8				   .skipL0130
   4683  f9e8				   .
   4684  f9e8							; 
   4685  f9e8
   4686  f9e8				   .
   4687  f9e8							; 
   4688  f9e8
   4689  f9e8				   .
   4690  f9e8							; 
   4691  f9e8
   4692  f9e8				   .
   4693  f9e8							; 
   4694  f9e8
   4695  f9e8				   .
   4696  f9e8							; 
   4697  f9e8
   4698  f9e8				   .
   4699  f9e8							; 
   4700  f9e8
   4701  f9e8				   .
   4702  f9e8							; 
   4703  f9e8
   4704  f9e8				   .
   4705  f9e8							; 
   4706  f9e8
   4707  f9e8				   .
   4708  f9e8							; 
   4709  f9e8
   4710  f9e8				   .
   4711  f9e8							; 
   4712  f9e8
   4713  f9e8				   .L0131		;  if !_Ch0_Sound then goto __Skip_Ch_0
   4714  f9e8
   4715  f9e8		       a5 de		      LDA	_Ch0_Sound
   4716  f9ea		       d0 03		      BNE	.skipL0131
   4717  f9ec				   .condpart77
   4718  f9ec		       4c d0 fa 	      jmp	.__Skip_Ch_0
   4719  f9ef
   4720  f9ef				   .skipL0131
   4721  f9ef				   .
   4722  f9ef							; 
   4723  f9ef
   4724  f9ef				   .
   4725  f9ef							; 
   4726  f9ef
   4727  f9ef				   .
   4728  f9ef							; 
   4729  f9ef
   4730  f9ef				   .
   4731  f9ef							; 
   4732  f9ef
   4733  f9ef				   .L0132		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   4734  f9ef
   4735  f9ef		       c6 df		      DEC	_Ch0_Duration
   4736  f9f1				   .
   4737  f9f1							; 
   4738  f9f1
   4739  f9f1				   .
   4740  f9f1							; 
   4741  f9f1
   4742  f9f1				   .
   4743  f9f1							; 
   4744  f9f1
   4745  f9f1				   .
   4746  f9f1							; 
   4747  f9f1
   4748  f9f1				   .
   4749  f9f1							; 
   4750  f9f1
   4751  f9f1				   .L0133		;  if _Ch0_Duration then goto __Skip_Ch_0
   4752  f9f1
   4753  f9f1		       a5 df		      LDA	_Ch0_Duration
   4754  f9f3		       f0 03		      BEQ	.skipL0133
   4755  f9f5				   .condpart78
   4756  f9f5		       4c d0 fa 	      jmp	.__Skip_Ch_0
   4757  f9f8
   4758  f9f8				   .skipL0133
   4759  f9f8				   .
   4760  f9f8							; 
   4761  f9f8
   4762  f9f8				   .
   4763  f9f8							; 
   4764  f9f8
   4765  f9f8				   .
   4766  f9f8							; 
   4767  f9f8
   4768  f9f8				   .
   4769  f9f8							; 
   4770  f9f8
   4771  f9f8				   .
   4772  f9f8							; 
   4773  f9f8
   4774  f9f8				   .
   4775  f9f8							; 
   4776  f9f8
   4777  f9f8				   .
   4778  f9f8							; 
   4779  f9f8
   4780  f9f8				   .
   4781  f9f8							; 
   4782  f9f8
   4783  f9f8				   .
   4784  f9f8							; 
   4785  f9f8
   4786  f9f8				   .
   4787  f9f8							; 
   4788  f9f8
   4789  f9f8				   .
   4790  f9f8							; 
   4791  f9f8
   4792  f9f8				   .
   4793  f9f8							; 
   4794  f9f8
   4795  f9f8				   .L0134		;  if _Ch0_Sound  <>  _c_Jump_Sound then goto __Skip_Ch0_Sound_001
   4796  f9f8
   4797  f9f8		       a5 de		      LDA	_Ch0_Sound
   4798  f9fa		       c9 01		      CMP	#_c_Jump_Sound
   4799  f9fc		       f0 03		      BEQ	.skipL0134
   4800  f9fe				   .condpart79
   4801  f9fe		       4c 3d fa 	      jmp	.__Skip_Ch0_Sound_001
   4802  fa01
   4803  fa01				   .skipL0134
   4804  fa01				   .
   4805  fa01							; 
   4806  fa01
   4807  fa01				   .
   4808  fa01							; 
   4809  fa01
   4810  fa01				   .
   4811  fa01							; 
   4812  fa01
   4813  fa01				   .
   4814  fa01							; 
   4815  fa01
   4816  fa01				   .L0135		;  temp4  =  _SD_Jump[_Ch0_Counter]
   4817  fa01
   4818  fa01		       a6 e0		      LDX	_Ch0_Counter
   4819  fa03		       bd f0 fa 	      LDA	_SD_Jump,x
   4820  fa06		       85 9f		      STA	temp4
   4821  fa08				   .
   4822  fa08							; 
   4823  fa08
   4824  fa08				   .
   4825  fa08							; 
   4826  fa08
   4827  fa08				   .
   4828  fa08							; 
   4829  fa08
   4830  fa08				   .
   4831  fa08							; 
   4832  fa08
   4833  fa08				   .L0136		;  if temp4  =  255 then goto __Clear_Ch_0
   4834  fa08
   4835  fa08		       a5 9f		      LDA	temp4
   4836  fa0a		       c9 ff		      CMP	#255
   4837  fa0c		       d0 03		      BNE	.skipL0136
   4838  fa0e				   .condpart80
   4839  fa0e		       4c ca fa 	      jmp	.__Clear_Ch_0
   4840  fa11
   4841  fa11				   .skipL0136
   4842  fa11				   .
   4843  fa11							; 
   4844  fa11
   4845  fa11				   .
   4846  fa11							; 
   4847  fa11
   4848  fa11				   .
   4849  fa11							; 
   4850  fa11
   4851  fa11				   .
   4852  fa11							; 
   4853  fa11
   4854  fa11				   .L0137		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4855  fa11
   4856  fa11		       e6 e0		      INC	_Ch0_Counter
   4857  fa13				   .L0138		;  temp5  =  _SD_Jump[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   4858  fa13
   4859  fa13		       a6 e0		      LDX	_Ch0_Counter
   4860  fa15		       bd f0 fa 	      LDA	_SD_Jump,x
   4861  fa18		       85 a0		      STA	temp5
   4862  fa1a		       e6 e0		      INC	_Ch0_Counter
   4863  fa1c				   .L0139		;  temp6  =  _SD_Jump[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   4864  fa1c
   4865  fa1c		       a6 e0		      LDX	_Ch0_Counter
   4866  fa1e		       bd f0 fa 	      LDA	_SD_Jump,x
   4867  fa21		       85 a1		      STA	temp6
   4868  fa23		       e6 e0		      INC	_Ch0_Counter
   4869  fa25				   .
   4870  fa25							; 
   4871  fa25
   4872  fa25				   .
   4873  fa25							; 
   4874  fa25
   4875  fa25				   .
   4876  fa25							; 
   4877  fa25
   4878  fa25				   .
   4879  fa25							; 
   4880  fa25
   4881  fa25				   .L0140		;  AUDV0  =  temp4
   4882  fa25
   4883  fa25		       a5 9f		      LDA	temp4
   4884  fa27		       85 19		      STA	AUDV0
   4885  fa29				   .L0141		;  AUDC0  =  temp5
   4886  fa29
   4887  fa29		       a5 a0		      LDA	temp5
   4888  fa2b		       85 15		      STA	AUDC0
   4889  fa2d				   .L0142		;  AUDF0  =  temp6
   4890  fa2d
   4891  fa2d		       a5 a1		      LDA	temp6
   4892  fa2f		       85 17		      STA	AUDF0
   4893  fa31				   .
   4894  fa31							; 
   4895  fa31
   4896  fa31				   .
   4897  fa31							; 
   4898  fa31
   4899  fa31				   .
   4900  fa31							; 
   4901  fa31
   4902  fa31				   .
   4903  fa31							; 
   4904  fa31
   4905  fa31				   .L0143		;  _Ch0_Duration  =  _SD_Jump[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   4906  fa31
   4907  fa31		       a6 e0		      LDX	_Ch0_Counter
   4908  fa33		       bd f0 fa 	      LDA	_SD_Jump,x
   4909  fa36		       85 df		      STA	_Ch0_Duration
   4910  fa38		       e6 e0		      INC	_Ch0_Counter
   4911  fa3a				   .
   4912  fa3a							; 
   4913  fa3a
   4914  fa3a				   .
   4915  fa3a							; 
   4916  fa3a
   4917  fa3a				   .
   4918  fa3a							; 
   4919  fa3a
   4920  fa3a				   .
   4921  fa3a							; 
   4922  fa3a
   4923  fa3a				   .L0144		;  goto __Skip_Ch_0
   4924  fa3a
   4925  fa3a		       4c d0 fa 	      jmp	.__Skip_Ch_0
   4926  fa3d
   4927  fa3d				   .
   4928  fa3d							; 
   4929  fa3d
   4930  fa3d				   .__Skip_Ch0_Sound_001
   4931  fa3d							; __Skip_Ch0_Sound_001
   4932  fa3d
   4933  fa3d				   .
   4934  fa3d							; 
   4935  fa3d
   4936  fa3d				   .
   4937  fa3d							; 
   4938  fa3d
   4939  fa3d				   .
   4940  fa3d							; 
   4941  fa3d
   4942  fa3d				   .
   4943  fa3d							; 
   4944  fa3d
   4945  fa3d				   .
   4946  fa3d							; 
   4947  fa3d
   4948  fa3d				   .
   4949  fa3d							; 
   4950  fa3d
   4951  fa3d				   .
   4952  fa3d							; 
   4953  fa3d
   4954  fa3d				   .
   4955  fa3d							; 
   4956  fa3d
   4957  fa3d				   .
   4958  fa3d							; 
   4959  fa3d
   4960  fa3d				   .
   4961  fa3d							; 
   4962  fa3d
   4963  fa3d				   .
   4964  fa3d							; 
   4965  fa3d
   4966  fa3d				   .
   4967  fa3d							; 
   4968  fa3d
   4969  fa3d				   .L0145		;  if _Ch0_Sound  <>  _c_Fall_Sound then goto __Skip_Ch0_Sound_002
   4970  fa3d
   4971  fa3d		       a5 de		      LDA	_Ch0_Sound
   4972  fa3f		       c9 02		      CMP	#_c_Fall_Sound
   4973  fa41		       f0 03		      BEQ	.skipL0145
   4974  fa43				   .condpart81
   4975  fa43		       4c 82 fa 	      jmp	.__Skip_Ch0_Sound_002
   4976  fa46
   4977  fa46				   .skipL0145
   4978  fa46				   .
   4979  fa46							; 
   4980  fa46
   4981  fa46				   .
   4982  fa46							; 
   4983  fa46
   4984  fa46				   .
   4985  fa46							; 
   4986  fa46
   4987  fa46				   .
   4988  fa46							; 
   4989  fa46
   4990  fa46				   .L0146		;  temp4  =  _SD_Fall[_Ch0_Counter]
   4991  fa46
   4992  fa46		       a6 e0		      LDX	_Ch0_Counter
   4993  fa48		       bd 44 fb 	      LDA	_SD_Fall,x
   4994  fa4b		       85 9f		      STA	temp4
   4995  fa4d				   .
   4996  fa4d							; 
   4997  fa4d
   4998  fa4d				   .
   4999  fa4d							; 
   5000  fa4d
   5001  fa4d				   .
   5002  fa4d							; 
   5003  fa4d
   5004  fa4d				   .
   5005  fa4d							; 
   5006  fa4d
   5007  fa4d				   .L0147		;  if temp4  =  255 then goto __Clear_Ch_0
   5008  fa4d
   5009  fa4d		       a5 9f		      LDA	temp4
   5010  fa4f		       c9 ff		      CMP	#255
   5011  fa51		       d0 03		      BNE	.skipL0147
   5012  fa53				   .condpart82
   5013  fa53		       4c ca fa 	      jmp	.__Clear_Ch_0
   5014  fa56
   5015  fa56				   .skipL0147
   5016  fa56				   .
   5017  fa56							; 
   5018  fa56
   5019  fa56				   .
   5020  fa56							; 
   5021  fa56
   5022  fa56				   .
   5023  fa56							; 
   5024  fa56
   5025  fa56				   .
   5026  fa56							; 
   5027  fa56
   5028  fa56				   .L0148		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   5029  fa56
   5030  fa56		       e6 e0		      INC	_Ch0_Counter
   5031  fa58				   .L0149		;  temp5  =  _SD_Fall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   5032  fa58
   5033  fa58		       a6 e0		      LDX	_Ch0_Counter
   5034  fa5a		       bd 44 fb 	      LDA	_SD_Fall,x
   5035  fa5d		       85 a0		      STA	temp5
   5036  fa5f		       e6 e0		      INC	_Ch0_Counter
   5037  fa61				   .L0150		;  temp6  =  _SD_Fall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   5038  fa61
   5039  fa61		       a6 e0		      LDX	_Ch0_Counter
   5040  fa63		       bd 44 fb 	      LDA	_SD_Fall,x
   5041  fa66		       85 a1		      STA	temp6
   5042  fa68		       e6 e0		      INC	_Ch0_Counter
   5043  fa6a				   .
   5044  fa6a							; 
   5045  fa6a
   5046  fa6a				   .
   5047  fa6a							; 
   5048  fa6a
   5049  fa6a				   .
   5050  fa6a							; 
   5051  fa6a
   5052  fa6a				   .
   5053  fa6a							; 
   5054  fa6a
   5055  fa6a				   .L0151		;  AUDV0  =  temp4
   5056  fa6a
   5057  fa6a		       a5 9f		      LDA	temp4
   5058  fa6c		       85 19		      STA	AUDV0
   5059  fa6e				   .L0152		;  AUDC0  =  temp5
   5060  fa6e
   5061  fa6e		       a5 a0		      LDA	temp5
   5062  fa70		       85 15		      STA	AUDC0
   5063  fa72				   .L0153		;  AUDF0  =  temp6
   5064  fa72
   5065  fa72		       a5 a1		      LDA	temp6
   5066  fa74		       85 17		      STA	AUDF0
   5067  fa76				   .
   5068  fa76							; 
   5069  fa76
   5070  fa76				   .
   5071  fa76							; 
   5072  fa76
   5073  fa76				   .
   5074  fa76							; 
   5075  fa76
   5076  fa76				   .
   5077  fa76							; 
   5078  fa76
   5079  fa76				   .L0154		;  _Ch0_Duration  =  _SD_Fall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   5080  fa76
   5081  fa76		       a6 e0		      LDX	_Ch0_Counter
   5082  fa78		       bd 44 fb 	      LDA	_SD_Fall,x
   5083  fa7b		       85 df		      STA	_Ch0_Duration
   5084  fa7d		       e6 e0		      INC	_Ch0_Counter
   5085  fa7f				   .
   5086  fa7f							; 
   5087  fa7f
   5088  fa7f				   .
   5089  fa7f							; 
   5090  fa7f
   5091  fa7f				   .
   5092  fa7f							; 
   5093  fa7f
   5094  fa7f				   .
   5095  fa7f							; 
   5096  fa7f
   5097  fa7f				   .L0155		;  goto __Skip_Ch_0
   5098  fa7f
   5099  fa7f		       4c d0 fa 	      jmp	.__Skip_Ch_0
   5100  fa82
   5101  fa82				   .
   5102  fa82							; 
   5103  fa82
   5104  fa82				   .__Skip_Ch0_Sound_002
   5105  fa82							; __Skip_Ch0_Sound_002
   5106  fa82
   5107  fa82				   .
   5108  fa82							; 
   5109  fa82
   5110  fa82				   .
   5111  fa82							; 
   5112  fa82
   5113  fa82				   .
   5114  fa82							; 
   5115  fa82
   5116  fa82				   .
   5117  fa82							; 
   5118  fa82
   5119  fa82				   .
   5120  fa82							; 
   5121  fa82
   5122  fa82				   .
   5123  fa82							; 
   5124  fa82
   5125  fa82				   .
   5126  fa82							; 
   5127  fa82
   5128  fa82				   .
   5129  fa82							; 
   5130  fa82
   5131  fa82				   .
   5132  fa82							; 
   5133  fa82
   5134  fa82				   .
   5135  fa82							; 
   5136  fa82
   5137  fa82				   .
   5138  fa82							; 
   5139  fa82
   5140  fa82				   .
   5141  fa82							; 
   5142  fa82
   5143  fa82				   .L0156		;  if _Ch0_Sound  <>  _c_Slide_Sound then goto __Skip_Ch0_Sound_003
   5144  fa82
   5145  fa82		       a5 de		      LDA	_Ch0_Sound
   5146  fa84		       c9 03		      CMP	#_c_Slide_Sound
   5147  fa86		       f0 03		      BEQ	.skipL0156
   5148  fa88				   .condpart83
   5149  fa88		       4c c7 fa 	      jmp	.__Skip_Ch0_Sound_003
   5150  fa8b
   5151  fa8b				   .skipL0156
   5152  fa8b				   .
   5153  fa8b							; 
   5154  fa8b
   5155  fa8b				   .
   5156  fa8b							; 
   5157  fa8b
   5158  fa8b				   .
   5159  fa8b							; 
   5160  fa8b
   5161  fa8b				   .
   5162  fa8b							; 
   5163  fa8b
   5164  fa8b				   .L0157		;  temp4  =  _SD_Slide[_Ch0_Counter]
   5165  fa8b
   5166  fa8b		       a6 e0		      LDX	_Ch0_Counter
   5167  fa8d		       bd c8 fb 	      LDA	_SD_Slide,x
   5168  fa90		       85 9f		      STA	temp4
   5169  fa92				   .
   5170  fa92							; 
   5171  fa92
   5172  fa92				   .
   5173  fa92							; 
   5174  fa92
   5175  fa92				   .
   5176  fa92							; 
   5177  fa92
   5178  fa92				   .
   5179  fa92							; 
   5180  fa92
   5181  fa92				   .L0158		;  if temp4  =  255 then goto __Clear_Ch_0
   5182  fa92
   5183  fa92		       a5 9f		      LDA	temp4
   5184  fa94		       c9 ff		      CMP	#255
   5185  fa96		       d0 03		      BNE	.skipL0158
   5186  fa98				   .condpart84
   5187  fa98		       4c ca fa 	      jmp	.__Clear_Ch_0
   5188  fa9b
   5189  fa9b				   .skipL0158
   5190  fa9b				   .
   5191  fa9b							; 
   5192  fa9b
   5193  fa9b				   .
   5194  fa9b							; 
   5195  fa9b
   5196  fa9b				   .
   5197  fa9b							; 
   5198  fa9b
   5199  fa9b				   .
   5200  fa9b							; 
   5201  fa9b
   5202  fa9b				   .L0159		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   5203  fa9b
   5204  fa9b		       e6 e0		      INC	_Ch0_Counter
   5205  fa9d				   .L0160		;  temp5  =  _SD_Slide[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   5206  fa9d
   5207  fa9d		       a6 e0		      LDX	_Ch0_Counter
   5208  fa9f		       bd c8 fb 	      LDA	_SD_Slide,x
   5209  faa2		       85 a0		      STA	temp5
   5210  faa4		       e6 e0		      INC	_Ch0_Counter
   5211  faa6				   .L0161		;  temp6  =  _SD_Slide[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   5212  faa6
   5213  faa6		       a6 e0		      LDX	_Ch0_Counter
   5214  faa8		       bd c8 fb 	      LDA	_SD_Slide,x
   5215  faab		       85 a1		      STA	temp6
   5216  faad		       e6 e0		      INC	_Ch0_Counter
   5217  faaf				   .
   5218  faaf							; 
   5219  faaf
   5220  faaf				   .
   5221  faaf							; 
   5222  faaf
   5223  faaf				   .
   5224  faaf							; 
   5225  faaf
   5226  faaf				   .
   5227  faaf							; 
   5228  faaf
   5229  faaf				   .L0162		;  AUDV0  =  temp4
   5230  faaf
   5231  faaf		       a5 9f		      LDA	temp4
   5232  fab1		       85 19		      STA	AUDV0
   5233  fab3				   .L0163		;  AUDC0  =  temp5
   5234  fab3
   5235  fab3		       a5 a0		      LDA	temp5
   5236  fab5		       85 15		      STA	AUDC0
   5237  fab7				   .L0164		;  AUDF0  =  temp6
   5238  fab7
   5239  fab7		       a5 a1		      LDA	temp6
   5240  fab9		       85 17		      STA	AUDF0
   5241  fabb				   .
   5242  fabb							; 
   5243  fabb
   5244  fabb				   .
   5245  fabb							; 
   5246  fabb
   5247  fabb				   .
   5248  fabb							; 
   5249  fabb
   5250  fabb				   .
   5251  fabb							; 
   5252  fabb
   5253  fabb				   .L0165		;  _Ch0_Duration  =  _SD_Slide[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   5254  fabb
   5255  fabb		       a6 e0		      LDX	_Ch0_Counter
   5256  fabd		       bd c8 fb 	      LDA	_SD_Slide,x
   5257  fac0		       85 df		      STA	_Ch0_Duration
   5258  fac2		       e6 e0		      INC	_Ch0_Counter
   5259  fac4				   .
   5260  fac4							; 
   5261  fac4
   5262  fac4				   .
   5263  fac4							; 
   5264  fac4
   5265  fac4				   .
   5266  fac4							; 
   5267  fac4
   5268  fac4				   .
   5269  fac4							; 
   5270  fac4
   5271  fac4				   .L0166		;  goto __Skip_Ch_0
   5272  fac4
   5273  fac4		       4c d0 fa 	      jmp	.__Skip_Ch_0
   5274  fac7
   5275  fac7				   .
   5276  fac7							; 
   5277  fac7
   5278  fac7				   .__Skip_Ch0_Sound_003
   5279  fac7							; __Skip_Ch0_Sound_003
   5280  fac7
   5281  fac7				   .
   5282  fac7							; 
   5283  fac7
   5284  fac7				   .
   5285  fac7							; 
   5286  fac7
   5287  fac7				   .
   5288  fac7							; 
   5289  fac7
   5290  fac7				   .
   5291  fac7							; 
   5292  fac7
   5293  fac7				   .
   5294  fac7							; 
   5295  fac7
   5296  fac7				   .
   5297  fac7							; 
   5298  fac7
   5299  fac7				   .
   5300  fac7							; 
   5301  fac7
   5302  fac7				   .
   5303  fac7							; 
   5304  fac7
   5305  fac7				   .
   5306  fac7							; 
   5307  fac7
   5308  fac7				   .
   5309  fac7							; 
   5310  fac7
   5311  fac7				   .
   5312  fac7							; 
   5313  fac7
   5314  fac7				   .
   5315  fac7							; 
   5316  fac7
   5317  fac7				   .
   5318  fac7							; 
   5319  fac7
   5320  fac7				   .
   5321  fac7							; 
   5322  fac7
   5323  fac7				   .
   5324  fac7							; 
   5325  fac7
   5326  fac7				   .
   5327  fac7							; 
   5328  fac7
   5329  fac7				   .
   5330  fac7							; 
   5331  fac7
   5332  fac7				   .L0167		;  goto __Skip_Ch_0
   5333  fac7
   5334  fac7		       4c d0 fa 	      jmp	.__Skip_Ch_0
   5335  faca
   5336  faca				   .
   5337  faca							; 
   5338  faca
   5339  faca				   .
   5340  faca							; 
   5341  faca
   5342  faca				   .
   5343  faca							; 
   5344  faca
   5345  faca				   .
   5346  faca							; 
   5347  faca
   5348  faca				   .
   5349  faca							; 
   5350  faca
   5351  faca				   .
   5352  faca							; 
   5353  faca
   5354  faca				   .
   5355  faca							; 
   5356  faca
   5357  faca				   .__Clear_Ch_0
   5358  faca							; __Clear_Ch_0
   5359  faca
   5360  faca				   .
   5361  faca							; 
   5362  faca
   5363  faca				   .L0168		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   5364  faca
   5365  faca		       a9 00		      LDA	#0
   5366  facc		       85 de		      STA	_Ch0_Sound
   5367  face		       85 19		      STA	AUDV0
   5368  fad0				   .
   5369  fad0							; 
   5370  fad0
   5371  fad0				   .
   5372  fad0							; 
   5373  fad0
   5374  fad0				   .
   5375  fad0							; 
   5376  fad0
   5377  fad0				   .
   5378  fad0							; 
   5379  fad0
   5380  fad0				   .
   5381  fad0							; 
   5382  fad0
   5383  fad0				   .
   5384  fad0							; 
   5385  fad0
   5386  fad0				   .
   5387  fad0							; 
   5388  fad0
   5389  fad0				   .__Skip_Ch_0
   5390  fad0							; __Skip_Ch_0
   5391  fad0
   5392  fad0				   .
   5393  fad0							; 
   5394  fad0
   5395  fad0				   .
   5396  fad0							; 
   5397  fad0
   5398  fad0				   .
   5399  fad0							; 
   5400  fad0
   5401  fad0				   .
   5402  fad0							; 
   5403  fad0
   5404  fad0				   .
   5405  fad0							; 
   5406  fad0
   5407  fad0				   .
   5408  fad0							; 
   5409  fad0
   5410  fad0				   .
   5411  fad0							; 
   5412  fad0
   5413  fad0				   .L0169		;  drawscreen
   5414  fad0
   5415  fad0		       20 c7 f3 	      jsr	drawscreen
   5416  fad3				   .
   5417  fad3							; 
   5418  fad3
   5419  fad3				   .
   5420  fad3							; 
   5421  fad3
   5422  fad3				   .
   5423  fad3							; 
   5424  fad3
   5425  fad3				   .
   5426  fad3							; 
   5427  fad3
   5428  fad3				   .
   5429  fad3							; 
   5430  fad3
   5431  fad3				   .
   5432  fad3							; 
   5433  fad3
   5434  fad3				   .
   5435  fad3							; 
   5436  fad3
   5437  fad3				   .
   5438  fad3							; 
   5439  fad3
   5440  fad3				   .
   5441  fad3							; 
   5442  fad3
   5443  fad3				   .
   5444  fad3							; 
   5445  fad3
   5446  fad3				   .
   5447  fad3							; 
   5448  fad3
   5449  fad3				   .
   5450  fad3							; 
   5451  fad3
   5452  fad3				   .
   5453  fad3							; 
   5454  fad3
   5455  fad3				   .
   5456  fad3							; 
   5457  fad3
   5458  fad3				   .
   5459  fad3							; 
   5460  fad3
   5461  fad3				   .L0170		;  if !switchreset then _Bit7_Reset_Restrainer{7}  =  0  :  goto __Main_Loop
   5462  fad3
   5463  fad3		       a9 01		      lda	#1
   5464  fad5		       2c 82 02 	      bit	SWCHB
   5465  fad8		       f0 09		      BEQ	.skipL0170
   5466  fada				   .condpart85
   5467  fada		       a5 ec		      LDA	_Bit7_Reset_Restrainer
   5468  fadc		       29 7f		      AND	#127
   5469  fade		       85 ec		      STA	_Bit7_Reset_Restrainer
   5470  fae0		       4c f0 f4 	      jmp	.__Main_Loop
   5471  fae3
   5472  fae3				   .skipL0170
   5473  fae3				   .
   5474  fae3							; 
   5475  fae3
   5476  fae3				   .
   5477  fae3							; 
   5478  fae3
   5479  fae3				   .
   5480  fae3							; 
   5481  fae3
   5482  fae3				   .
   5483  fae3							; 
   5484  fae3
   5485  fae3				   .
   5486  fae3							; 
   5487  fae3
   5488  fae3				   .L0171		;  if _Bit7_Reset_Restrainer{7} then goto __Main_Loop
   5489  fae3
   5490  fae3		       24 ec		      BIT	_Bit7_Reset_Restrainer
   5491  fae5		       10 03		      BPL	.skipL0171
   5492  fae7				   .condpart86
   5493  fae7		       4c f0 f4 	      jmp	.__Main_Loop
   5494  faea
   5495  faea				   .skipL0171
   5496  faea				   .
   5497  faea							; 
   5498  faea
   5499  faea				   .
   5500  faea							; 
   5501  faea
   5502  faea				   .
   5503  faea							; 
   5504  faea
   5505  faea				   .
   5506  faea							; 
   5507  faea
   5508  faea				   .L0172		;  goto __Start_Restart
   5509  faea
   5510  faea		       4c 67 f4 	      jmp	.__Start_Restart
   5511  faed
   5512  faed				   .
   5513  faed							; 
   5514  faed
   5515  faed				   .
   5516  faed							; 
   5517  faed
   5518  faed				   .
   5519  faed							; 
   5520  faed
   5521  faed				   .
   5522  faed							; 
   5523  faed
   5524  faed				   .
   5525  faed							; 
   5526  faed
   5527  faed				   .
   5528  faed							; 
   5529  faed
   5530  faed				   .
   5531  faed							; 
   5532  faed
   5533  faed				   .
   5534  faed							; 
   5535  faed
   5536  faed				   .
   5537  faed							; 
   5538  faed
   5539  faed				   .
   5540  faed							; 
   5541  faed
   5542  faed				   .
   5543  faed							; 
   5544  faed
   5545  faed				   .
   5546  faed							; 
   5547  faed
   5548  faed				   .
   5549  faed							; 
   5550  faed
   5551  faed				   .
   5552  faed							; 
   5553  faed
   5554  faed				   .
   5555  faed							; 
   5556  faed
   5557  faed				   .L0173		;  data _SD_Jump
   5558  faed
   5559  faed		       4c 41 fb 	      JMP	.skipL0173
   5560  faf0				   _SD_Jump
   5561  faf0		       01 0c 1f 	      .byte.b	1,12,31
   5562  faf3
   5563  faf3		       01		      .byte.b	1
   5564  faf4
   5565  faf4		       08 0c 1f 	      .byte.b	8,12,31
   5566  faf7
   5567  faf7		       01		      .byte.b	1
   5568  faf8
   5569  faf8		       06 0c 1f 	      .byte.b	6,12,31
   5570  fafb
   5571  fafb		       01		      .byte.b	1
   5572  fafc
   5573  fafc		       08 0c 1f 	      .byte.b	8,12,31
   5574  faff
   5575  faff		       01		      .byte.b	1
   5576  fb00
   5577  fb00		       08 0c 1e 	      .byte.b	8,12,30
   5578  fb03
   5579  fb03		       01		      .byte.b	1
   5580  fb04
   5581  fb04		       08 0c 1d 	      .byte.b	8,12,29
   5582  fb07
   5583  fb07		       01		      .byte.b	1
   5584  fb08
   5585  fb08		       08 0c 1c 	      .byte.b	8,12,28
   5586  fb0b
   5587  fb0b		       01		      .byte.b	1
   5588  fb0c
   5589  fb0c		       08 0c 1b 	      .byte.b	8,12,27
   5590  fb0f
   5591  fb0f		       01		      .byte.b	1
   5592  fb10
   5593  fb10		       08 0c 1a 	      .byte.b	8,12,26
   5594  fb13
   5595  fb13		       01		      .byte.b	1
   5596  fb14
   5597  fb14		       08 0c 19 	      .byte.b	8,12,25
   5598  fb17
   5599  fb17		       01		      .byte.b	1
   5600  fb18
   5601  fb18		       08 0c 18 	      .byte.b	8,12,24
   5602  fb1b
   5603  fb1b		       01		      .byte.b	1
   5604  fb1c
   5605  fb1c		       08 0c 17 	      .byte.b	8,12,23
   5606  fb1f
   5607  fb1f		       01		      .byte.b	1
   5608  fb20
   5609  fb20		       08 0c 16 	      .byte.b	8,12,22
   5610  fb23
   5611  fb23		       01		      .byte.b	1
   5612  fb24
   5613  fb24		       08 0c 15 	      .byte.b	8,12,21
   5614  fb27
   5615  fb27		       01		      .byte.b	1
   5616  fb28
   5617  fb28		       08 0c 14 	      .byte.b	8,12,20
   5618  fb2b
   5619  fb2b		       01		      .byte.b	1
   5620  fb2c
   5621  fb2c		       08 0c 13 	      .byte.b	8,12,19
   5622  fb2f
   5623  fb2f		       01		      .byte.b	1
   5624  fb30
   5625  fb30		       06 0c 12 	      .byte.b	6,12,18
   5626  fb33
   5627  fb33		       01		      .byte.b	1
   5628  fb34
   5629  fb34		       04 0c 11 	      .byte.b	4,12,17
   5630  fb37
   5631  fb37		       01		      .byte.b	1
   5632  fb38
   5633  fb38		       02 0c 10 	      .byte.b	2,12,16
   5634  fb3b
   5635  fb3b		       02		      .byte.b	2
   5636  fb3c
   5637  fb3c		       00 00 00 	      .byte.b	0,0,0
   5638  fb3f
   5639  fb3f		       08		      .byte.b	8
   5640  fb40
   5641  fb40		       ff		      .byte.b	255
   5642  fb41
   5643  fb41				   .skipL0173
   5644  fb41				   .
   5645  fb41							; 
   5646  fb41
   5647  fb41				   .
   5648  fb41							; 
   5649  fb41
   5650  fb41				   .
   5651  fb41							; 
   5652  fb41
   5653  fb41				   .
   5654  fb41							; 
   5655  fb41
   5656  fb41				   .
   5657  fb41							; 
   5658  fb41
   5659  fb41				   .
   5660  fb41							; 
   5661  fb41
   5662  fb41				   .
   5663  fb41							; 
   5664  fb41
   5665  fb41				   .
   5666  fb41							; 
   5667  fb41
   5668  fb41				   .L0174		;  data _SD_Fall
   5669  fb41
   5670  fb41		       4c c5 fb 	      JMP	.skipL0174
   5671  fb44				   _SD_Fall
   5672  fb44		       06 0c 10 	      .byte.b	6,12,16
   5673  fb47
   5674  fb47		       01		      .byte.b	1
   5675  fb48
   5676  fb48		       08 0c 10 	      .byte.b	8,12,16
   5677  fb4b
   5678  fb4b		       01		      .byte.b	1
   5679  fb4c
   5680  fb4c		       06 0c 11 	      .byte.b	6,12,17
   5681  fb4f
   5682  fb4f		       01		      .byte.b	1
   5683  fb50
   5684  fb50		       08 0c 11 	      .byte.b	8,12,17
   5685  fb53
   5686  fb53		       01		      .byte.b	1
   5687  fb54
   5688  fb54		       06 0c 12 	      .byte.b	6,12,18
   5689  fb57
   5690  fb57		       01		      .byte.b	1
   5691  fb58
   5692  fb58		       08 0c 12 	      .byte.b	8,12,18
   5693  fb5b
   5694  fb5b		       01		      .byte.b	1
   5695  fb5c
   5696  fb5c		       06 0c 13 	      .byte.b	6,12,19
   5697  fb5f
   5698  fb5f		       01		      .byte.b	1
   5699  fb60
   5700  fb60		       08 0c 13 	      .byte.b	8,12,19
   5701  fb63
   5702  fb63		       01		      .byte.b	1
   5703  fb64
   5704  fb64		       06 0c 14 	      .byte.b	6,12,20
   5705  fb67
   5706  fb67		       01		      .byte.b	1
   5707  fb68
   5708  fb68		       08 0c 14 	      .byte.b	8,12,20
   5709  fb6b
   5710  fb6b		       01		      .byte.b	1
   5711  fb6c
   5712  fb6c		       06 0c 15 	      .byte.b	6,12,21
   5713  fb6f
   5714  fb6f		       01		      .byte.b	1
   5715  fb70
   5716  fb70		       08 0c 15 	      .byte.b	8,12,21
   5717  fb73
   5718  fb73		       01		      .byte.b	1
   5719  fb74
   5720  fb74		       06 0c 16 	      .byte.b	6,12,22
   5721  fb77
   5722  fb77		       01		      .byte.b	1
   5723  fb78
   5724  fb78		       08 0c 16 	      .byte.b	8,12,22
   5725  fb7b
   5726  fb7b		       01		      .byte.b	1
   5727  fb7c
   5728  fb7c		       06 0c 17 	      .byte.b	6,12,23
   5729  fb7f
   5730  fb7f		       01		      .byte.b	1
   5731  fb80
   5732  fb80		       08 0c 17 	      .byte.b	8,12,23
   5733  fb83
   5734  fb83		       01		      .byte.b	1
   5735  fb84
   5736  fb84		       06 0c 18 	      .byte.b	6,12,24
   5737  fb87
   5738  fb87		       01		      .byte.b	1
   5739  fb88
   5740  fb88		       08 0c 18 	      .byte.b	8,12,24
   5741  fb8b
   5742  fb8b		       01		      .byte.b	1
   5743  fb8c
   5744  fb8c		       06 0c 19 	      .byte.b	6,12,25
   5745  fb8f
   5746  fb8f		       01		      .byte.b	1
   5747  fb90
   5748  fb90		       08 0c 19 	      .byte.b	8,12,25
   5749  fb93
   5750  fb93		       01		      .byte.b	1
   5751  fb94
   5752  fb94		       06 0c 1a 	      .byte.b	6,12,26
   5753  fb97
   5754  fb97		       01		      .byte.b	1
   5755  fb98
   5756  fb98		       08 0c 1a 	      .byte.b	8,12,26
   5757  fb9b
   5758  fb9b		       01		      .byte.b	1
   5759  fb9c
   5760  fb9c		       06 0c 1b 	      .byte.b	6,12,27
   5761  fb9f
   5762  fb9f		       01		      .byte.b	1
   5763  fba0
   5764  fba0		       08 0c 1b 	      .byte.b	8,12,27
   5765  fba3
   5766  fba3		       01		      .byte.b	1
   5767  fba4
   5768  fba4		       06 0c 1c 	      .byte.b	6,12,28
   5769  fba7
   5770  fba7		       01		      .byte.b	1
   5771  fba8
   5772  fba8		       08 0c 1c 	      .byte.b	8,12,28
   5773  fbab
   5774  fbab		       01		      .byte.b	1
   5775  fbac
   5776  fbac		       06 0c 1d 	      .byte.b	6,12,29
   5777  fbaf
   5778  fbaf		       01		      .byte.b	1
   5779  fbb0
   5780  fbb0		       08 0c 1d 	      .byte.b	8,12,29
   5781  fbb3
   5782  fbb3		       01		      .byte.b	1
   5783  fbb4
   5784  fbb4		       06 0c 1e 	      .byte.b	6,12,30
   5785  fbb7
   5786  fbb7		       01		      .byte.b	1
   5787  fbb8
   5788  fbb8		       08 0c 1e 	      .byte.b	8,12,30
   5789  fbbb
   5790  fbbb		       01		      .byte.b	1
   5791  fbbc
   5792  fbbc		       06 0c 1f 	      .byte.b	6,12,31
   5793  fbbf
   5794  fbbf		       01		      .byte.b	1
   5795  fbc0
   5796  fbc0		       02 0c 1f 	      .byte.b	2,12,31
   5797  fbc3
   5798  fbc3		       02		      .byte.b	2
   5799  fbc4
   5800  fbc4		       ff		      .byte.b	255
   5801  fbc5
   5802  fbc5				   .skipL0174
   5803  fbc5				   .
   5804  fbc5							; 
   5805  fbc5
   5806  fbc5				   .
   5807  fbc5							; 
   5808  fbc5
   5809  fbc5				   .
   5810  fbc5							; 
   5811  fbc5
   5812  fbc5				   .
   5813  fbc5							; 
   5814  fbc5
   5815  fbc5				   .
   5816  fbc5							; 
   5817  fbc5
   5818  fbc5				   .
   5819  fbc5							; 
   5820  fbc5
   5821  fbc5				   .
   5822  fbc5							; 
   5823  fbc5
   5824  fbc5				   .
   5825  fbc5							; 
   5826  fbc5
   5827  fbc5				   .L0175		;  data _SD_Slide
   5828  fbc5
   5829  fbc5		       4c 1d fc 	      JMP	.skipL0175
   5830  fbc8				   _SD_Slide
   5831  fbc8		       02 04 16 	      .byte.b	2,4,22
   5832  fbcb
   5833  fbcb		       01		      .byte.b	1
   5834  fbcc
   5835  fbcc		       01 04 15 	      .byte.b	1,4,21
   5836  fbcf
   5837  fbcf		       01		      .byte.b	1
   5838  fbd0
   5839  fbd0		       02 04 18 	      .byte.b	2,4,24
   5840  fbd3
   5841  fbd3		       01		      .byte.b	1
   5842  fbd4
   5843  fbd4		       01 04 14 	      .byte.b	1,4,20
   5844  fbd7
   5845  fbd7		       01		      .byte.b	1
   5846  fbd8
   5847  fbd8		       02 04 17 	      .byte.b	2,4,23
   5848  fbdb
   5849  fbdb		       01		      .byte.b	1
   5850  fbdc
   5851  fbdc		       01 04 19 	      .byte.b	1,4,25
   5852  fbdf
   5853  fbdf		       01		      .byte.b	1
   5854  fbe0
   5855  fbe0		       02 04 16 	      .byte.b	2,4,22
   5856  fbe3
   5857  fbe3		       01		      .byte.b	1
   5858  fbe4
   5859  fbe4		       01 04 14 	      .byte.b	1,4,20
   5860  fbe7
   5861  fbe7		       01		      .byte.b	1
   5862  fbe8
   5863  fbe8		       02 04 19 	      .byte.b	2,4,25
   5864  fbeb
   5865  fbeb		       01		      .byte.b	1
   5866  fbec
   5867  fbec		       01 04 15 	      .byte.b	1,4,21
   5868  fbef
   5869  fbef		       01		      .byte.b	1
   5870  fbf0
   5871  fbf0		       02 04 19 	      .byte.b	2,4,25
   5872  fbf3
   5873  fbf3		       01		      .byte.b	1
   5874  fbf4
   5875  fbf4		       01 04 16 	      .byte.b	1,4,22
   5876  fbf7
   5877  fbf7		       01		      .byte.b	1
   5878  fbf8
   5879  fbf8		       02 04 17 	      .byte.b	2,4,23
   5880  fbfb
   5881  fbfb		       01		      .byte.b	1
   5882  fbfc
   5883  fbfc		       01 04 16 	      .byte.b	1,4,22
   5884  fbff
   5885  fbff		       01		      .byte.b	1
   5886  fc00
   5887  fc00		       02 04 14 	      .byte.b	2,4,20
   5888  fc03
   5889  fc03		       01		      .byte.b	1
   5890  fc04
   5891  fc04		       01 04 18 	      .byte.b	1,4,24
   5892  fc07
   5893  fc07		       01		      .byte.b	1
   5894  fc08
   5895  fc08		       02 04 15 	      .byte.b	2,4,21
   5896  fc0b
   5897  fc0b		       01		      .byte.b	1
   5898  fc0c
   5899  fc0c		       01 04 17 	      .byte.b	1,4,23
   5900  fc0f
   5901  fc0f		       01		      .byte.b	1
   5902  fc10
   5903  fc10		       02 04 19 	      .byte.b	2,4,25
   5904  fc13
   5905  fc13		       01		      .byte.b	1
   5906  fc14
   5907  fc14		       01 04 18 	      .byte.b	1,4,24
   5908  fc17
   5909  fc17		       01		      .byte.b	1
   5910  fc18
   5911  fc18		       02 04 16 	      .byte.b	2,4,22
   5912  fc1b
   5913  fc1b		       01		      .byte.b	1
   5914  fc1c
   5915  fc1c		       ff		      .byte.b	255
   5916  fc1d
   5917  fc1d				   .skipL0175
   5918  fc1d				   .
   5919  fc1d							; 
   5920  fc1d
   5921  fc1d				   .
   5922  fc1d							; 
   5923  fc1d
   5924  fc1d				   .
   5925  fc1d							; 
   5926  fc1d
   5927  fc1d				   .
   5928  fc1d							; 
   5929  fc1d
   5930  fc1d				   .
   5931  fc1d							; 
   5932  fc1d
   5933  fc1d				   .
   5934  fc1d							; 
   5935  fc1d
   5936  fc1d				   .
   5937  fc1d							; 
   5938  fc1d
   5939  fc1d				   .
   5940  fc1d							; 
   5941  fc1d
   5942  fc1d				   .
   5943  fc1d							; 
   5944  fc1d
   5945  fc1d				   .
   5946  fc1d							; 
   5947  fc1d
   5948  fc1d				   .__Frame0
   5949  fc1d							; __Frame0
   5950  fc1d
   5951  fc1d				   .L0176		;  player1:
   5952  fc1d
   5953  fc1d		       a2 ee		      LDX	#<playerL0176_1
   5954  fc1f		       86 8c		      STX	player1pointerlo
   5955  fc21		       a9 fc		      LDA	#>playerL0176_1
   5956  fc23		       85 8d		      STA	player1pointerhi
   5957  fc25		       a9 09		      LDA	#9
   5958  fc27		       85 8f		      STA	player1height
   5959  fc29				   .
   5960  fc29							; 
   5961  fc29
   5962  fc29				   .L0177		;  goto __Done_Anim_jump
   5963  fc29
   5964  fc29		       4c ab f8 	      jmp	.__Done_Anim_jump
   5965  fc2c
   5966  fc2c				   .
   5967  fc2c							; 
   5968  fc2c
   5969  fc2c				   .
   5970  fc2c							; 
   5971  fc2c
   5972  fc2c				   .__Frame1
   5973  fc2c							; __Frame1
   5974  fc2c
   5975  fc2c				   .L0178		;  player1:
   5976  fc2c
   5977  fc2c		       a2 00		      LDX	#<playerL0178_1
   5978  fc2e		       86 8c		      STX	player1pointerlo
   5979  fc30		       a9 fd		      LDA	#>playerL0178_1
   5980  fc32		       85 8d		      STA	player1pointerhi
   5981  fc34		       a9 09		      LDA	#9
   5982  fc36		       85 8f		      STA	player1height
   5983  fc38				   .
   5984  fc38							; 
   5985  fc38
   5986  fc38				   .L0179		;  goto __Done_Anim_jump
   5987  fc38
   5988  fc38		       4c ab f8 	      jmp	.__Done_Anim_jump
   5989  fc3b
   5990  fc3b				   .
   5991  fc3b							; 
   5992  fc3b
   5993  fc3b				   .
   5994  fc3b							; 
   5995  fc3b
   5996  fc3b				   .__Frame2
   5997  fc3b							; __Frame2
   5998  fc3b
   5999  fc3b				   .L0180		;  player1:
   6000  fc3b
   6001  fc3b		       a2 0a		      LDX	#<playerL0180_1
   6002  fc3d		       86 8c		      STX	player1pointerlo
   6003  fc3f		       a9 fd		      LDA	#>playerL0180_1
   6004  fc41		       85 8d		      STA	player1pointerhi
   6005  fc43		       a9 09		      LDA	#9
   6006  fc45		       85 8f		      STA	player1height
   6007  fc47				   .
   6008  fc47							; 
   6009  fc47
   6010  fc47				   .L0181		;  goto __Done_Anim_jump
   6011  fc47		       4c ab f8 	      jmp	.__Done_Anim_jump
   6012  fc4a				  -	      ifconst	pfres
   6013  fc4a				  -	      if	(<*) > (254-pfres*pfwidth)
   6014  fc4a				  -	      align	256
   6015  fc4a				  -	      endif
   6016  fc4a				  -	      if	(<*) < (136-pfres*pfwidth)
   6017  fc4a				  -	      repeat	((136-pfres*pfwidth)-(<*))
   6018  fc4a				  -	      .byte	0
   6019  fc4a				  -	      repend
   6020  fc4a				  -	      endif
   6021  fc4a					      else
   6022  fc4a				  -	      if	(<*) > 206
   6023  fc4a				  -	      align	256
   6024  fc4a					      endif
   6025  fc4a					      if	(<*) < 88
   6026  fc4a					      repeat	(88-(<*))
   6027  fc4a		       00		      .byte.b	0
   6026  fc4a					      repend
   6027  fc4b		       00		      .byte.b	0
   6026  fc4b					      repend
   6027  fc4c		       00		      .byte.b	0
   6026  fc4c					      repend
   6027  fc4d		       00		      .byte.b	0
   6026  fc4d					      repend
   6027  fc4e		       00		      .byte.b	0
   6026  fc4e					      repend
   6027  fc4f		       00		      .byte.b	0
   6026  fc4f					      repend
   6027  fc50		       00		      .byte.b	0
   6026  fc50					      repend
   6027  fc51		       00		      .byte.b	0
   6026  fc51					      repend
   6027  fc52		       00		      .byte.b	0
   6026  fc52					      repend
   6027  fc53		       00		      .byte.b	0
   6026  fc53					      repend
   6027  fc54		       00		      .byte.b	0
   6026  fc54					      repend
   6027  fc55		       00		      .byte.b	0
   6026  fc55					      repend
   6027  fc56		       00		      .byte.b	0
   6026  fc56					      repend
   6027  fc57		       00		      .byte.b	0
   6028  fc58					      repend
   6029  fc58					      endif
   6030  fc58					      endif
   6031  fc58				   pfcolorlabel13
   6032  fc58		       0c 00 00 00	      .byte.b	$0C,0,0,0
   6033  fc5c		       0c 00 00 00	      .byte.b	$0C,0,0,0
   6034  fc60		       0c 00 00 00	      .byte.b	$0C,0,0,0
   6035  fc64		       1c 00 00 00	      .byte.b	$1C,0,0,0
   6036  fc68		       00 00 00 00	      .byte.b	$00,0,0,0
   6037  fc6c		       0c 00 00 00	      .byte.b	$0C,0,0,0
   6038  fc70		       3c 00 00 00	      .byte.b	$3C,0,0,0
   6039  fc74		       00 00 00 00	      .byte.b	$00,0,0,0
   6040  fc78		       0c 00 00 00	      .byte.b	$0C,0,0,0
   6041  fc7c		       cc 00 00 00	      .byte.b	$CC,0,0,0
   6042  fc80		       c6 00 00 00	      .byte.b	$C6,0,0,0
   6043  fc84				  -	      if	(<*) > (<(*+9))
   6044  fc84				  -	      repeat	($100-<*)
   6045  fc84				  -	      .byte	0
   6046  fc84				  -	      repend
   6047  fc84					      endif
   6048  fc84				   playercolorL044_1
   6049  fc84		       26		      .byte.b	$26
   6050  fc85		       9c		      .byte.b	$9C
   6051  fc86		       9c		      .byte.b	$9C
   6052  fc87		       9c		      .byte.b	$9C
   6053  fc88		       da		      .byte.b	$DA
   6054  fc89		       da		      .byte.b	$DA
   6055  fc8a		       3c		      .byte.b	$3C
   6056  fc8b		       3c		      .byte.b	$3C
   6057  fc8c		       3c		      .byte.b	$3C
   6058  fc8d		       26		      .byte.b	$26
   6059  fc8e				  -	      if	(<*) > (<(*+9))
   6060  fc8e				  -	      repeat	($100-<*)
   6061  fc8e				  -	      .byte	0
   6062  fc8e				  -	      repend
   6063  fc8e					      endif
   6064  fc8e				   playerL045_1
   6065  fc8e		       66		      .byte.b	%01100110
   6066  fc8f		       24		      .byte.b	%00100100
   6067  fc90		       3c		      .byte.b	%00111100
   6068  fc91		       18		      .byte.b	%00011000
   6069  fc92		       5a		      .byte.b	%01011010
   6070  fc93		       3c		      .byte.b	%00111100
   6071  fc94		       18		      .byte.b	%00011000
   6072  fc95		       3c		      .byte.b	%00111100
   6073  fc96		       3c		      .byte.b	%00111100
   6074  fc97		       18		      .byte.b	%00011000
   6075  fc98				  -	      if	(<*) > (<(*+9))
   6076  fc98				  -	      repeat	($100-<*)
   6077  fc98				  -	      .byte	0
   6078  fc98				  -	      repend
   6079  fc98					      endif
   6080  fc98				   player3then_1
   6081  fc98		       c3		      .byte.b	%11000011
   6082  fc99		       63		      .byte.b	%01100011
   6083  fc9a		       3e		      .byte.b	%00111110
   6084  fc9b		       1c		      .byte.b	%00011100
   6085  fc9c		       3d		      .byte.b	%00111101
   6086  fc9d		       5e		      .byte.b	%01011110
   6087  fc9e		       18		      .byte.b	%00011000
   6088  fc9f		       3c		      .byte.b	%00111100
   6089  fca0		       3c		      .byte.b	%00111100
   6090  fca1		       18		      .byte.b	%00011000
   6091  fca2				  -	      if	(<*) > (<(*+9))
   6092  fca2				  -	      repeat	($100-<*)
   6093  fca2				  -	      .byte	0
   6094  fca2				  -	      repend
   6095  fca2					      endif
   6096  fca2				   player6then_1
   6097  fca2		       66		      .byte.b	%01100110
   6098  fca3		       24		      .byte.b	%00100100
   6099  fca4		       3c		      .byte.b	%00111100
   6100  fca5		       18		      .byte.b	%00011000
   6101  fca6		       18		      .byte.b	%00011000
   6102  fca7		       7e		      .byte.b	%01111110
   6103  fca8		       99		      .byte.b	%10011001
   6104  fca9		       3c		      .byte.b	%00111100
   6105  fcaa		       3c		      .byte.b	%00111100
   6106  fcab		       18		      .byte.b	%00011000
   6107  fcac				  -	      if	(<*) > (<(*+9))
   6108  fcac				  -	      repeat	($100-<*)
   6109  fcac				  -	      .byte	0
   6110  fcac				  -	      repend
   6111  fcac					      endif
   6112  fcac				   playerL065_1
   6113  fcac		       c3		      .byte.b	%11000011
   6114  fcad		       63		      .byte.b	%01100011
   6115  fcae		       3e		      .byte.b	%00111110
   6116  fcaf		       1c		      .byte.b	%00011100
   6117  fcb0		       3d		      .byte.b	%00111101
   6118  fcb1		       5e		      .byte.b	%01011110
   6119  fcb2		       18		      .byte.b	%00011000
   6120  fcb3		       3c		      .byte.b	%00111100
   6121  fcb4		       3c		      .byte.b	%00111100
   6122  fcb5		       18		      .byte.b	%00011000
   6123  fcb6				  -	      if	(<*) > (<(*+9))
   6124  fcb6				  -	      repeat	($100-<*)
   6125  fcb6				  -	      .byte	0
   6126  fcb6				  -	      repend
   6127  fcb6					      endif
   6128  fcb6				   player22then_1
   6129  fcb6		       66		      .byte.b	%01100110
   6130  fcb7		       24		      .byte.b	%00100100
   6131  fcb8		       3c		      .byte.b	%00111100
   6132  fcb9		       18		      .byte.b	%00011000
   6133  fcba		       18		      .byte.b	%00011000
   6134  fcbb		       7e		      .byte.b	%01111110
   6135  fcbc		       99		      .byte.b	%10011001
   6136  fcbd		       3c		      .byte.b	%00111100
   6137  fcbe		       3c		      .byte.b	%00111100
   6138  fcbf		       18		      .byte.b	%00011000
   6139  fcc0				  -	      if	(<*) > (<(*+7))
   6140  fcc0				  -	      repeat	($100-<*)
   6141  fcc0				  -	      .byte	0
   6142  fcc0				  -	      repend
   6143  fcc0					      endif
   6144  fcc0				   playercolorL086_1
   6145  fcc0		       26		      .byte.b	$26
   6146  fcc1		       9c		      .byte.b	$9C
   6147  fcc2		       da		      .byte.b	$DA
   6148  fcc3		       da		      .byte.b	$DA
   6149  fcc4		       3c		      .byte.b	$3C
   6150  fcc5		       3c		      .byte.b	$3C
   6151  fcc6		       3c		      .byte.b	$3C
   6152  fcc7		       26		      .byte.b	$26
   6153  fcc8				  -	      if	(<*) > (<(*+7))
   6154  fcc8				  -	      repeat	($100-<*)
   6155  fcc8				  -	      .byte	0
   6156  fcc8				  -	      repend
   6157  fcc8					      endif
   6158  fcc8				   playerL087_1
   6159  fcc8		       66		      .byte.b	%01100110
   6160  fcc9		       7e		      .byte.b	%01111110
   6161  fcca		       5a		      .byte.b	%01011010
   6162  fccb		       3c		      .byte.b	%00111100
   6163  fccc		       18		      .byte.b	%00011000
   6164  fccd		       3c		      .byte.b	%00111100
   6165  fcce		       3c		      .byte.b	%00111100
   6166  fccf		       18		      .byte.b	%00011000
   6167  fcd0				  -	      if	(<*) > (<(*+9))
   6168  fcd0				  -	      repeat	($100-<*)
   6169  fcd0				  -	      .byte	0
   6170  fcd0				  -	      repend
   6171  fcd0					      endif
   6172  fcd0				   playercolorL0110_1
   6173  fcd0		       26		      .byte.b	$26
   6174  fcd1		       9c		      .byte.b	$9C
   6175  fcd2		       9c		      .byte.b	$9C
   6176  fcd3		       9c		      .byte.b	$9C
   6177  fcd4		       da		      .byte.b	$DA
   6178  fcd5		       da		      .byte.b	$DA
   6179  fcd6		       3c		      .byte.b	$3C
   6180  fcd7		       3c		      .byte.b	$3C
   6181  fcd8		       3c		      .byte.b	$3C
   6182  fcd9		       26		      .byte.b	$26
   6183  fcda				  -	      if	(<*) > (<(*+9))
   6184  fcda				  -	      repeat	($100-<*)
   6185  fcda				  -	      .byte	0
   6186  fcda				  -	      repend
   6187  fcda					      endif
   6188  fcda				   playerL0121_1
   6189  fcda		       63		      .byte.b	%01100011
   6190  fcdb		       36		      .byte.b	%00110110
   6191  fcdc		       1c		      .byte.b	%00011100
   6192  fcdd		       18		      .byte.b	%00011000
   6193  fcde		       ba		      .byte.b	%10111010
   6194  fcdf		       7c		      .byte.b	%01111100
   6195  fce0		       30		      .byte.b	%00110000
   6196  fce1		       78		      .byte.b	%01111000
   6197  fce2		       78		      .byte.b	%01111000
   6198  fce3		       30		      .byte.b	%00110000
   6199  fce4				  -	      if	(<*) > (<(*+9))
   6200  fce4				  -	      repeat	($100-<*)
   6201  fce4				  -	      .byte	0
   6202  fce4				  -	      repend
   6203  fce4					      endif
   6204  fce4				   playercolorL0122_1
   6205  fce4		       26		      .byte.b	$26
   6206  fce5		       9c		      .byte.b	$9C
   6207  fce6		       9c		      .byte.b	$9C
   6208  fce7		       9c		      .byte.b	$9C
   6209  fce8		       da		      .byte.b	$DA
   6210  fce9		       da		      .byte.b	$DA
   6211  fcea		       3c		      .byte.b	$3C
   6212  fceb		       3c		      .byte.b	$3C
   6213  fcec		       3c		      .byte.b	$3C
   6214  fced		       26		      .byte.b	$26
   6215  fcee				  -	      if	(<*) > (<(*+9))
   6216  fcee				  -	      repeat	($100-<*)
   6217  fcee				  -	      .byte	0
   6218  fcee				  -	      repend
   6219  fcee					      endif
   6220  fcee				   playerL0176_1
   6221  fcee		       66		      .byte.b	%01100110
   6222  fcef		       26		      .byte.b	%00100110
   6223  fcf0		       3c		      .byte.b	%00111100
   6224  fcf1		       1c		      .byte.b	%00011100
   6225  fcf2		       3c		      .byte.b	%00111100
   6226  fcf3		       1c		      .byte.b	%00011100
   6227  fcf4		       18		      .byte.b	%00011000
   6228  fcf5		       3c		      .byte.b	%00111100
   6229  fcf6		       3c		      .byte.b	%00111100
   6230  fcf7		       18		      .byte.b	%00011000
   6231  fcf8					      if	(<*) > (<(*+9))
   6232  fcf8					      repeat	($100-<*)
   6233  fcf8		       00		      .byte.b	0
   6232  fcf8					      repend
   6233  fcf9		       00		      .byte.b	0
   6232  fcf9					      repend
   6233  fcfa		       00		      .byte.b	0
   6232  fcfa					      repend
   6233  fcfb		       00		      .byte.b	0
   6232  fcfb					      repend
   6233  fcfc		       00		      .byte.b	0
   6232  fcfc					      repend
   6233  fcfd		       00		      .byte.b	0
   6232  fcfd					      repend
   6233  fcfe		       00		      .byte.b	0
   6232  fcfe					      repend
   6233  fcff		       00		      .byte.b	0
   6234  fd00					      repend
   6235  fd00					      endif
   6236  fd00				   playerL0178_1
   6237  fd00		       c3		      .byte.b	%11000011
   6238  fd01		       63		      .byte.b	%01100011
   6239  fd02		       3e		      .byte.b	%00111110
   6240  fd03		       1c		      .byte.b	%00011100
   6241  fd04		       3c		      .byte.b	%00111100
   6242  fd05		       5e		      .byte.b	%01011110
   6243  fd06		       18		      .byte.b	%00011000
   6244  fd07		       3c		      .byte.b	%00111100
   6245  fd08		       3c		      .byte.b	%00111100
   6246  fd09		       18		      .byte.b	%00011000
   6247  fd0a				  -	      if	(<*) > (<(*+9))
   6248  fd0a				  -	      repeat	($100-<*)
   6249  fd0a				  -	      .byte	0
   6250  fd0a				  -	      repend
   6251  fd0a					      endif
   6252  fd0a				   playerL0180_1
   6253  fd0a		       3c		      .byte.b	%00111100
   6254  fd0b		       1c		      .byte.b	%00011100
   6255  fd0c		       1c		      .byte.b	%00011100
   6256  fd0d		       1c		      .byte.b	%00011100
   6257  fd0e		       1c		      .byte.b	%00011100
   6258  fd0f		       1c		      .byte.b	%00011100
   6259  fd10		       18		      .byte.b	%00011000
   6260  fd11		       3c		      .byte.b	%00111100
   6261  fd12		       3c		      .byte.b	%00111100
   6262  fd13		       18		      .byte.b	%00011000
   6263  fd14					      if	ECHOFIRST
      648 bytes of ROM space left
   6264  fd14					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   6265  fd14					      endif
   6266  fd14		       00 01	   ECHOFIRST  =	1
   6267  fd14
   6268  fd14
   6269  fd14
   6270  fd14							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6271  fd14
   6272  fd14							; feel free to modify the score graphics - just keep each digit 8 high
   6273  fd14							; and keep the conditional compilation stuff intact
   6274  fd14				  -	      ifconst	ROM2k
   6275  fd14				  -	      ORG	$F7AC-8
   6276  fd14					      else
   6277  fd14				  -	      ifconst	bankswitch
   6278  fd14				  -	      if	bankswitch == 8
   6279  fd14				  -	      ORG	$2F94-bscode_length
   6280  fd14				  -	      RORG	$FF94-bscode_length
   6281  fd14				  -	      endif
   6282  fd14				  -	      if	bankswitch == 16
   6283  fd14				  -	      ORG	$4F94-bscode_length
   6284  fd14				  -	      RORG	$FF94-bscode_length
   6285  fd14				  -	      endif
   6286  fd14				  -	      if	bankswitch == 32
   6287  fd14				  -	      ORG	$8F94-bscode_length
   6288  fd14				  -	      RORG	$FF94-bscode_length
   6289  fd14				  -	      endif
   6290  fd14				  -	      if	bankswitch == 64
   6291  fd14				  -	      ORG	$10F80-bscode_length
   6292  fd14				  -	      RORG	$1FF80-bscode_length
   6293  fd14				  -	      endif
   6294  fd14					      else
   6295  ff9c					      ORG	$FF9C
   6296  ff9c					      endif
   6297  ff9c					      endif
   6298  ff9c
   6299  ff9c							; font equates
   6300  ff9c		       00 01	   .21stcentury =	1
   6301  ff9c		       00 02	   alarmclock =	2
   6302  ff9c		       00 03	   handwritten =	3
   6303  ff9c		       00 04	   interrupted =	4
   6304  ff9c		       00 05	   retroputer =	5
   6305  ff9c		       00 06	   whimsey    =	6
   6306  ff9c		       00 07	   tiny       =	7
   6307  ff9c		       00 08	   hex	      =	8
   6308  ff9c
   6309  ff9c				  -	      ifconst	font
   6310  ff9c				  -	      if	font == hex
   6311  ff9c				  -	      ORG	. - 48
   6312  ff9c				  -	      endif
   6313  ff9c					      endif
   6314  ff9c
   6315  ff9c				   scoretable
   6316  ff9c
   6317  ff9c				  -	      ifconst	font
   6318  ff9c				  -	      if	font == .21stcentury
   6319  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   6320  ff9c				  -	      endif
   6321  ff9c				  -	      if	font == alarmclock
   6322  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   6323  ff9c				  -	      endif
   6324  ff9c				  -	      if	font == handwritten
   6325  ff9c				  -	      include	"score_graphics.asm.handwritten"
   6326  ff9c				  -	      endif
   6327  ff9c				  -	      if	font == interrupted
   6328  ff9c				  -	      include	"score_graphics.asm.interrupted"
   6329  ff9c				  -	      endif
   6330  ff9c				  -	      if	font == retroputer
   6331  ff9c				  -	      include	"score_graphics.asm.retroputer"
   6332  ff9c				  -	      endif
   6333  ff9c				  -	      if	font == whimsey
   6334  ff9c				  -	      include	"score_graphics.asm.whimsey"
   6335  ff9c				  -	      endif
   6336  ff9c				  -	      if	font == tiny
   6337  ff9c				  -	      include	"score_graphics.asm.tiny"
   6338  ff9c				  -	      endif
   6339  ff9c				  -	      if	font == hex
   6340  ff9c				  -	      include	"score_graphics.asm.hex"
   6341  ff9c				  -	      endif
   6342  ff9c					      else		; default font
   6343  ff9c
   6344  ff9c		       3c		      .byte.b	%00111100
   6345  ff9d		       66		      .byte.b	%01100110
   6346  ff9e		       66		      .byte.b	%01100110
   6347  ff9f		       66		      .byte.b	%01100110
   6348  ffa0		       66		      .byte.b	%01100110
   6349  ffa1		       66		      .byte.b	%01100110
   6350  ffa2		       66		      .byte.b	%01100110
   6351  ffa3		       3c		      .byte.b	%00111100
   6352  ffa4
   6353  ffa4		       7e		      .byte.b	%01111110
   6354  ffa5		       18		      .byte.b	%00011000
   6355  ffa6		       18		      .byte.b	%00011000
   6356  ffa7		       18		      .byte.b	%00011000
   6357  ffa8		       18		      .byte.b	%00011000
   6358  ffa9		       38		      .byte.b	%00111000
   6359  ffaa		       18		      .byte.b	%00011000
   6360  ffab		       08		      .byte.b	%00001000
   6361  ffac
   6362  ffac		       7e		      .byte.b	%01111110
   6363  ffad		       60		      .byte.b	%01100000
   6364  ffae		       60		      .byte.b	%01100000
   6365  ffaf		       3c		      .byte.b	%00111100
   6366  ffb0		       06		      .byte.b	%00000110
   6367  ffb1		       06		      .byte.b	%00000110
   6368  ffb2		       46		      .byte.b	%01000110
   6369  ffb3		       3c		      .byte.b	%00111100
   6370  ffb4
   6371  ffb4		       3c		      .byte.b	%00111100
   6372  ffb5		       46		      .byte.b	%01000110
   6373  ffb6		       06		      .byte.b	%00000110
   6374  ffb7		       06		      .byte.b	%00000110
   6375  ffb8		       1c		      .byte.b	%00011100
   6376  ffb9		       06		      .byte.b	%00000110
   6377  ffba		       46		      .byte.b	%01000110
   6378  ffbb		       3c		      .byte.b	%00111100
   6379  ffbc
   6380  ffbc		       0c		      .byte.b	%00001100
   6381  ffbd		       0c		      .byte.b	%00001100
   6382  ffbe		       7e		      .byte.b	%01111110
   6383  ffbf		       4c		      .byte.b	%01001100
   6384  ffc0		       4c		      .byte.b	%01001100
   6385  ffc1		       2c		      .byte.b	%00101100
   6386  ffc2		       1c		      .byte.b	%00011100
   6387  ffc3		       0c		      .byte.b	%00001100
   6388  ffc4
   6389  ffc4		       3c		      .byte.b	%00111100
   6390  ffc5		       46		      .byte.b	%01000110
   6391  ffc6		       06		      .byte.b	%00000110
   6392  ffc7		       06		      .byte.b	%00000110
   6393  ffc8		       3c		      .byte.b	%00111100
   6394  ffc9		       60		      .byte.b	%01100000
   6395  ffca		       60		      .byte.b	%01100000
   6396  ffcb		       7e		      .byte.b	%01111110
   6397  ffcc
   6398  ffcc		       3c		      .byte.b	%00111100
   6399  ffcd		       66		      .byte.b	%01100110
   6400  ffce		       66		      .byte.b	%01100110
   6401  ffcf		       66		      .byte.b	%01100110
   6402  ffd0		       7c		      .byte.b	%01111100
   6403  ffd1		       60		      .byte.b	%01100000
   6404  ffd2		       62		      .byte.b	%01100010
   6405  ffd3		       3c		      .byte.b	%00111100
   6406  ffd4
   6407  ffd4		       30		      .byte.b	%00110000
   6408  ffd5		       30		      .byte.b	%00110000
   6409  ffd6		       30		      .byte.b	%00110000
   6410  ffd7		       18		      .byte.b	%00011000
   6411  ffd8		       0c		      .byte.b	%00001100
   6412  ffd9		       06		      .byte.b	%00000110
   6413  ffda		       42		      .byte.b	%01000010
   6414  ffdb		       3e		      .byte.b	%00111110
   6415  ffdc
   6416  ffdc		       3c		      .byte.b	%00111100
   6417  ffdd		       66		      .byte.b	%01100110
   6418  ffde		       66		      .byte.b	%01100110
   6419  ffdf		       66		      .byte.b	%01100110
   6420  ffe0		       3c		      .byte.b	%00111100
   6421  ffe1		       66		      .byte.b	%01100110
   6422  ffe2		       66		      .byte.b	%01100110
   6423  ffe3		       3c		      .byte.b	%00111100
   6424  ffe4
   6425  ffe4		       3c		      .byte.b	%00111100
   6426  ffe5		       46		      .byte.b	%01000110
   6427  ffe6		       06		      .byte.b	%00000110
   6428  ffe7		       3e		      .byte.b	%00111110
   6429  ffe8		       66		      .byte.b	%01100110
   6430  ffe9		       66		      .byte.b	%01100110
   6431  ffea		       66		      .byte.b	%01100110
   6432  ffeb		       3c		      .byte.b	%00111100
   6433  ffec
   6434  ffec					      ifnconst	DPC_kernel_options
   6435  ffec
   6436  ffec		       00		      .byte.b	%00000000
   6437  ffed		       00		      .byte.b	%00000000
   6438  ffee		       00		      .byte.b	%00000000
   6439  ffef		       00		      .byte.b	%00000000
   6440  fff0		       00		      .byte.b	%00000000
   6441  fff1		       00		      .byte.b	%00000000
   6442  fff2		       00		      .byte.b	%00000000
   6443  fff3		       00		      .byte.b	%00000000
   6444  fff4
   6445  fff4					      endif
   6446  fff4
   6447  fff4					      endif
   6448  fff4
   6449  fff4				  -	      ifconst	ROM2k
   6450  fff4				  -	      ORG	$F7FC
   6451  fff4					      else
   6452  fff4				  -	      ifconst	bankswitch
   6453  fff4				  -	      if	bankswitch == 8
   6454  fff4				  -	      ORG	$2FF4-bscode_length
   6455  fff4				  -	      RORG	$FFF4-bscode_length
   6456  fff4				  -	      endif
   6457  fff4				  -	      if	bankswitch == 16
   6458  fff4				  -	      ORG	$4FF4-bscode_length
   6459  fff4				  -	      RORG	$FFF4-bscode_length
   6460  fff4				  -	      endif
   6461  fff4				  -	      if	bankswitch == 32
   6462  fff4				  -	      ORG	$8FF4-bscode_length
   6463  fff4				  -	      RORG	$FFF4-bscode_length
   6464  fff4				  -	      endif
   6465  fff4				  -	      if	bankswitch == 64
   6466  fff4				  -	      ORG	$10FE0-bscode_length
   6467  fff4				  -	      RORG	$1FFE0-bscode_length
   6468  fff4				  -	      endif
   6469  fff4					      else
   6470  fffc					      ORG	$FFFC
   6471  fffc					      endif
   6472  fffc					      endif
   6473  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6474  fffc
   6475  fffc				  -	      ifconst	bankswitch
   6476  fffc				  -	      if	bankswitch == 8
   6477  fffc				  -	      ORG	$2FFC
   6478  fffc				  -	      RORG	$FFFC
   6479  fffc				  -	      endif
   6480  fffc				  -	      if	bankswitch == 16
   6481  fffc				  -	      ORG	$4FFC
   6482  fffc				  -	      RORG	$FFFC
   6483  fffc				  -	      endif
   6484  fffc				  -	      if	bankswitch == 32
   6485  fffc				  -	      ORG	$8FFC
   6486  fffc				  -	      RORG	$FFFC
   6487  fffc				  -	      endif
   6488  fffc				  -	      if	bankswitch == 64
   6489  fffc				  -	      ORG	$10FF0
   6490  fffc				  -	      RORG	$1FFF0
   6491  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   6492  fffc				  -	      ORG	$10FF8
   6493  fffc				  -	      RORG	$1FFF8
   6494  fffc				  -	      ifconst	superchip
   6495  fffc				  -	      .byte	"E","F","S","C"
   6496  fffc				  -	      else
   6497  fffc				  -	      .byte	"E","F","E","F"
   6498  fffc				  -	      endif
   6499  fffc				  -	      ORG	$10FFC
   6500  fffc				  -	      RORG	$1FFFC
   6501  fffc				  -	      endif
   6502  fffc					      else
   6503  fffc				  -	      ifconst	ROM2k
   6504  fffc				  -	      ORG	$F7FC
   6505  fffc					      else
   6506  fffc					      ORG	$FFFC
   6507  fffc					      endif
   6508  fffc					      endif
   6509  fffc		       00 f0		      .word.w	(start & $ffff)
   6510  fffe		       00 f0		      .word.w	(start & $ffff)

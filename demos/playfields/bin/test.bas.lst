------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\test.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\test.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\test.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 fe	    _FE        =	$FE
      4  10000 ????
      5  10000 ????		00 fc	    _FC        =	$FC
      6  10000 ????
      7  10000 ????		00 fa	    _FA        =	$FA
      8  10000 ????
      9  10000 ????		00 f8	    _F8        =	$F8
     10  10000 ????
     11  10000 ????		00 f6	    _F6        =	$F6
     12  10000 ????
     13  10000 ????		00 f4	    _F4        =	$F4
     14  10000 ????
     15  10000 ????		00 f2	    _F2        =	$F2
     16  10000 ????
     17  10000 ????		00 f0	    _F0        =	$F0
     18  10000 ????
     19  10000 ????		00 ee	    _EE        =	$EE
     20  10000 ????
     21  10000 ????		00 ec	    _EC        =	$EC
     22  10000 ????
     23  10000 ????		00 ea	    _EA        =	$EA
     24  10000 ????
     25  10000 ????		00 e8	    _E8        =	$E8
     26  10000 ????
     27  10000 ????		00 e6	    _E6        =	$E6
     28  10000 ????
     29  10000 ????		00 e4	    _E4        =	$E4
     30  10000 ????
     31  10000 ????		00 e2	    _E2        =	$E2
     32  10000 ????
     33  10000 ????		00 e0	    _E0        =	$E0
     34  10000 ????
     35  10000 ????		00 de	    _DE        =	$DE
     36  10000 ????
     37  10000 ????		00 dc	    _DC        =	$DC
     38  10000 ????
     39  10000 ????		00 da	    _DA        =	$DA
     40  10000 ????
     41  10000 ????		00 d8	    _D8        =	$D8
     42  10000 ????
     43  10000 ????		00 d6	    _D6        =	$D6
     44  10000 ????
     45  10000 ????		00 d4	    _D4        =	$D4
     46  10000 ????
     47  10000 ????		00 d2	    _D2        =	$D2
     48  10000 ????
     49  10000 ????		00 d0	    _D0        =	$D0
     50  10000 ????
     51  10000 ????		00 ce	    _CE        =	$CE
     52  10000 ????
     53  10000 ????		00 cc	    _CC        =	$CC
     54  10000 ????
     55  10000 ????		00 ca	    _CA        =	$CA
     56  10000 ????
     57  10000 ????		00 c8	    _C8        =	$C8
     58  10000 ????
     59  10000 ????		00 c6	    _C6        =	$C6
     60  10000 ????
     61  10000 ????		00 c4	    _C4        =	$C4
     62  10000 ????
     63  10000 ????		00 c2	    _C2        =	$C2
     64  10000 ????
     65  10000 ????		00 c0	    _C0        =	$C0
     66  10000 ????
     67  10000 ????		00 be	    _BE        =	$BE
     68  10000 ????
     69  10000 ????		00 bc	    _BC        =	$BC
     70  10000 ????
     71  10000 ????		00 ba	    _BA        =	$BA
     72  10000 ????
     73  10000 ????		00 b8	    _B8        =	$B8
     74  10000 ????
     75  10000 ????		00 b6	    _B6        =	$B6
     76  10000 ????
     77  10000 ????		00 b4	    _B4        =	$B4
     78  10000 ????
     79  10000 ????		00 b2	    _B2        =	$B2
     80  10000 ????
     81  10000 ????		00 b0	    _B0        =	$B0
     82  10000 ????
     83  10000 ????		00 ae	    _AE        =	$AE
     84  10000 ????
     85  10000 ????		00 ac	    _AC        =	$AC
     86  10000 ????
     87  10000 ????		00 aa	    _AA        =	$AA
     88  10000 ????
     89  10000 ????		00 a8	    _A8        =	$A8
     90  10000 ????
     91  10000 ????		00 a6	    _A6        =	$A6
     92  10000 ????
     93  10000 ????		00 a4	    _A4        =	$A4
     94  10000 ????
     95  10000 ????		00 a2	    _A2        =	$A2
     96  10000 ????
     97  10000 ????		00 a0	    _A0        =	$A0
     98  10000 ????
     99  10000 ????		00 9e	    _9E        =	$9E
    100  10000 ????
    101  10000 ????		00 9c	    _9C        =	$9C
    102  10000 ????
    103  10000 ????		00 9a	    _9A        =	$9A
    104  10000 ????
    105  10000 ????		00 98	    _98        =	$98
    106  10000 ????
    107  10000 ????		00 96	    _96        =	$96
    108  10000 ????
    109  10000 ????		00 94	    _94        =	$94
    110  10000 ????
    111  10000 ????		00 92	    _92        =	$92
    112  10000 ????
    113  10000 ????		00 90	    _90        =	$90
    114  10000 ????
    115  10000 ????		00 8e	    _8E        =	$8E
    116  10000 ????
    117  10000 ????		00 8c	    _8C        =	$8C
    118  10000 ????
    119  10000 ????		00 8a	    _8A        =	$8A
    120  10000 ????
    121  10000 ????		00 88	    _88        =	$88
    122  10000 ????
    123  10000 ????		00 86	    _86        =	$86
    124  10000 ????
    125  10000 ????		00 84	    _84        =	$84
    126  10000 ????
    127  10000 ????		00 82	    _82        =	$82
    128  10000 ????
    129  10000 ????		00 80	    _80        =	$80
    130  10000 ????
    131  10000 ????		00 7e	    _7E        =	$7E
    132  10000 ????
    133  10000 ????		00 7c	    _7C        =	$7C
    134  10000 ????
    135  10000 ????		00 7a	    _7A        =	$7A
    136  10000 ????
    137  10000 ????		00 78	    _78        =	$78
    138  10000 ????
    139  10000 ????		00 76	    _76        =	$76
    140  10000 ????
    141  10000 ????		00 74	    _74        =	$74
    142  10000 ????
    143  10000 ????		00 72	    _72        =	$72
    144  10000 ????
    145  10000 ????		00 70	    _70        =	$70
    146  10000 ????
    147  10000 ????		00 6e	    _6E        =	$6E
    148  10000 ????
    149  10000 ????		00 6c	    _6C        =	$6C
    150  10000 ????
    151  10000 ????		00 6a	    _6A        =	$6A
    152  10000 ????
    153  10000 ????		00 68	    _68        =	$68
    154  10000 ????
    155  10000 ????		00 66	    _66        =	$66
    156  10000 ????
    157  10000 ????		00 64	    _64        =	$64
    158  10000 ????
    159  10000 ????		00 62	    _62        =	$62
    160  10000 ????
    161  10000 ????		00 60	    _60        =	$60
    162  10000 ????
    163  10000 ????		00 5e	    _5E        =	$5E
    164  10000 ????
    165  10000 ????		00 5c	    _5C        =	$5C
    166  10000 ????
    167  10000 ????		00 5a	    _5A        =	$5A
    168  10000 ????
    169  10000 ????		00 58	    _58        =	$58
    170  10000 ????
    171  10000 ????		00 56	    _56        =	$56
    172  10000 ????
    173  10000 ????		00 54	    _54        =	$54
    174  10000 ????
    175  10000 ????		00 52	    _52        =	$52
    176  10000 ????
    177  10000 ????		00 50	    _50        =	$50
    178  10000 ????
    179  10000 ????		00 4e	    _4E        =	$4E
    180  10000 ????
    181  10000 ????		00 4c	    _4C        =	$4C
    182  10000 ????
    183  10000 ????		00 4a	    _4A        =	$4A
    184  10000 ????
    185  10000 ????		00 48	    _48        =	$48
    186  10000 ????
    187  10000 ????		00 46	    _46        =	$46
    188  10000 ????
    189  10000 ????		00 44	    _44        =	$44
    190  10000 ????
    191  10000 ????		00 42	    _42        =	$42
    192  10000 ????
    193  10000 ????		00 40	    _40        =	$40
    194  10000 ????
    195  10000 ????		00 3e	    _3E        =	$3E
    196  10000 ????
    197  10000 ????		00 3c	    _3C        =	$3C
    198  10000 ????
    199  10000 ????		00 3a	    _3A        =	$3A
    200  10000 ????
    201  10000 ????		00 38	    _38        =	$38
    202  10000 ????
    203  10000 ????		00 36	    _36        =	$36
    204  10000 ????
    205  10000 ????		00 34	    _34        =	$34
    206  10000 ????
    207  10000 ????		00 32	    _32        =	$32
    208  10000 ????
    209  10000 ????		00 30	    _30        =	$30
    210  10000 ????
    211  10000 ????		00 2e	    _2E        =	$2E
    212  10000 ????
    213  10000 ????		00 2c	    _2C        =	$2C
    214  10000 ????
    215  10000 ????		00 2a	    _2A        =	$2A
    216  10000 ????
    217  10000 ????		00 28	    _28        =	$28
    218  10000 ????
    219  10000 ????		00 26	    _26        =	$26
    220  10000 ????
    221  10000 ????		00 24	    _24        =	$24
    222  10000 ????
    223  10000 ????		00 22	    _22        =	$22
    224  10000 ????
    225  10000 ????		00 20	    _20        =	$20
    226  10000 ????
    227  10000 ????		00 1e	    _1E        =	$1E
    228  10000 ????
    229  10000 ????		00 1c	    _1C        =	$1C
    230  10000 ????
    231  10000 ????		00 1a	    _1A        =	$1A
    232  10000 ????
    233  10000 ????		00 18	    _18        =	$18
    234  10000 ????
    235  10000 ????		00 16	    _16        =	$16
    236  10000 ????
    237  10000 ????		00 14	    _14        =	$14
    238  10000 ????
    239  10000 ????		00 12	    _12        =	$12
    240  10000 ????
    241  10000 ????		00 10	    _10        =	$10
    242  10000 ????
    243  10000 ????		00 0e	    _0E        =	$0E
    244  10000 ????
    245  10000 ????		00 0c	    _0C        =	$0C
    246  10000 ????
    247  10000 ????		00 0a	    _0A        =	$0A
    248  10000 ????
    249  10000 ????		00 08	    _08        =	$08
    250  10000 ????
    251  10000 ????		00 06	    _06        =	$06
    252  10000 ????
    253  10000 ????		00 04	    _04        =	$04
    254  10000 ????
    255  10000 ????		00 02	    _02        =	$02
    256  10000 ????
    257  10000 ????		00 00	    _00        =	$00
    258  10000 ????
    259  10000 ????		00 2b	    vblank_time =	43
    260  10000 ????		00 25	    overscan_time =	37
    261  10000 ????		00 01	    PFcolors   =	1
    262  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\test.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 fe	    _FE        =	$FE
      4  10000 ????
      5  10000 ????		00 fc	    _FC        =	$FC
      6  10000 ????
      7  10000 ????		00 fa	    _FA        =	$FA
      8  10000 ????
      9  10000 ????		00 f8	    _F8        =	$F8
     10  10000 ????
     11  10000 ????		00 f6	    _F6        =	$F6
     12  10000 ????
     13  10000 ????		00 f4	    _F4        =	$F4
     14  10000 ????
     15  10000 ????		00 f2	    _F2        =	$F2
     16  10000 ????
     17  10000 ????		00 f0	    _F0        =	$F0
     18  10000 ????
     19  10000 ????		00 ee	    _EE        =	$EE
     20  10000 ????
     21  10000 ????		00 ec	    _EC        =	$EC
     22  10000 ????
     23  10000 ????		00 ea	    _EA        =	$EA
     24  10000 ????
     25  10000 ????		00 e8	    _E8        =	$E8
     26  10000 ????
     27  10000 ????		00 e6	    _E6        =	$E6
     28  10000 ????
     29  10000 ????		00 e4	    _E4        =	$E4
     30  10000 ????
     31  10000 ????		00 e2	    _E2        =	$E2
     32  10000 ????
     33  10000 ????		00 e0	    _E0        =	$E0
     34  10000 ????
     35  10000 ????		00 de	    _DE        =	$DE
     36  10000 ????
     37  10000 ????		00 dc	    _DC        =	$DC
     38  10000 ????
     39  10000 ????		00 da	    _DA        =	$DA
     40  10000 ????
     41  10000 ????		00 d8	    _D8        =	$D8
     42  10000 ????
     43  10000 ????		00 d6	    _D6        =	$D6
     44  10000 ????
     45  10000 ????		00 d4	    _D4        =	$D4
     46  10000 ????
     47  10000 ????		00 d2	    _D2        =	$D2
     48  10000 ????
     49  10000 ????		00 d0	    _D0        =	$D0
     50  10000 ????
     51  10000 ????		00 ce	    _CE        =	$CE
     52  10000 ????
     53  10000 ????		00 cc	    _CC        =	$CC
     54  10000 ????
     55  10000 ????		00 ca	    _CA        =	$CA
     56  10000 ????
     57  10000 ????		00 c8	    _C8        =	$C8
     58  10000 ????
     59  10000 ????		00 c6	    _C6        =	$C6
     60  10000 ????
     61  10000 ????		00 c4	    _C4        =	$C4
     62  10000 ????
     63  10000 ????		00 c2	    _C2        =	$C2
     64  10000 ????
     65  10000 ????		00 c0	    _C0        =	$C0
     66  10000 ????
     67  10000 ????		00 be	    _BE        =	$BE
     68  10000 ????
     69  10000 ????		00 bc	    _BC        =	$BC
     70  10000 ????
     71  10000 ????		00 ba	    _BA        =	$BA
     72  10000 ????
     73  10000 ????		00 b8	    _B8        =	$B8
     74  10000 ????
     75  10000 ????		00 b6	    _B6        =	$B6
     76  10000 ????
     77  10000 ????		00 b4	    _B4        =	$B4
     78  10000 ????
     79  10000 ????		00 b2	    _B2        =	$B2
     80  10000 ????
     81  10000 ????		00 b0	    _B0        =	$B0
     82  10000 ????
     83  10000 ????		00 ae	    _AE        =	$AE
     84  10000 ????
     85  10000 ????		00 ac	    _AC        =	$AC
     86  10000 ????
     87  10000 ????		00 aa	    _AA        =	$AA
     88  10000 ????
     89  10000 ????		00 a8	    _A8        =	$A8
     90  10000 ????
     91  10000 ????		00 a6	    _A6        =	$A6
     92  10000 ????
     93  10000 ????		00 a4	    _A4        =	$A4
     94  10000 ????
     95  10000 ????		00 a2	    _A2        =	$A2
     96  10000 ????
     97  10000 ????		00 a0	    _A0        =	$A0
     98  10000 ????
     99  10000 ????		00 9e	    _9E        =	$9E
    100  10000 ????
    101  10000 ????		00 9c	    _9C        =	$9C
    102  10000 ????
    103  10000 ????		00 9a	    _9A        =	$9A
    104  10000 ????
    105  10000 ????		00 98	    _98        =	$98
    106  10000 ????
    107  10000 ????		00 96	    _96        =	$96
    108  10000 ????
    109  10000 ????		00 94	    _94        =	$94
    110  10000 ????
    111  10000 ????		00 92	    _92        =	$92
    112  10000 ????
    113  10000 ????		00 90	    _90        =	$90
    114  10000 ????
    115  10000 ????		00 8e	    _8E        =	$8E
    116  10000 ????
    117  10000 ????		00 8c	    _8C        =	$8C
    118  10000 ????
    119  10000 ????		00 8a	    _8A        =	$8A
    120  10000 ????
    121  10000 ????		00 88	    _88        =	$88
    122  10000 ????
    123  10000 ????		00 86	    _86        =	$86
    124  10000 ????
    125  10000 ????		00 84	    _84        =	$84
    126  10000 ????
    127  10000 ????		00 82	    _82        =	$82
    128  10000 ????
    129  10000 ????		00 80	    _80        =	$80
    130  10000 ????
    131  10000 ????		00 7e	    _7E        =	$7E
    132  10000 ????
    133  10000 ????		00 7c	    _7C        =	$7C
    134  10000 ????
    135  10000 ????		00 7a	    _7A        =	$7A
    136  10000 ????
    137  10000 ????		00 78	    _78        =	$78
    138  10000 ????
    139  10000 ????		00 76	    _76        =	$76
    140  10000 ????
    141  10000 ????		00 74	    _74        =	$74
    142  10000 ????
    143  10000 ????		00 72	    _72        =	$72
    144  10000 ????
    145  10000 ????		00 70	    _70        =	$70
    146  10000 ????
    147  10000 ????		00 6e	    _6E        =	$6E
    148  10000 ????
    149  10000 ????		00 6c	    _6C        =	$6C
    150  10000 ????
    151  10000 ????		00 6a	    _6A        =	$6A
    152  10000 ????
    153  10000 ????		00 68	    _68        =	$68
    154  10000 ????
    155  10000 ????		00 66	    _66        =	$66
    156  10000 ????
    157  10000 ????		00 64	    _64        =	$64
    158  10000 ????
    159  10000 ????		00 62	    _62        =	$62
    160  10000 ????
    161  10000 ????		00 60	    _60        =	$60
    162  10000 ????
    163  10000 ????		00 5e	    _5E        =	$5E
    164  10000 ????
    165  10000 ????		00 5c	    _5C        =	$5C
    166  10000 ????
    167  10000 ????		00 5a	    _5A        =	$5A
    168  10000 ????
    169  10000 ????		00 58	    _58        =	$58
    170  10000 ????
    171  10000 ????		00 56	    _56        =	$56
    172  10000 ????
    173  10000 ????		00 54	    _54        =	$54
    174  10000 ????
    175  10000 ????		00 52	    _52        =	$52
    176  10000 ????
    177  10000 ????		00 50	    _50        =	$50
    178  10000 ????
    179  10000 ????		00 4e	    _4E        =	$4E
    180  10000 ????
    181  10000 ????		00 4c	    _4C        =	$4C
    182  10000 ????
    183  10000 ????		00 4a	    _4A        =	$4A
    184  10000 ????
    185  10000 ????		00 48	    _48        =	$48
    186  10000 ????
    187  10000 ????		00 46	    _46        =	$46
    188  10000 ????
    189  10000 ????		00 44	    _44        =	$44
    190  10000 ????
    191  10000 ????		00 42	    _42        =	$42
    192  10000 ????
    193  10000 ????		00 40	    _40        =	$40
    194  10000 ????
    195  10000 ????		00 3e	    _3E        =	$3E
    196  10000 ????
    197  10000 ????		00 3c	    _3C        =	$3C
    198  10000 ????
    199  10000 ????		00 3a	    _3A        =	$3A
    200  10000 ????
    201  10000 ????		00 38	    _38        =	$38
    202  10000 ????
    203  10000 ????		00 36	    _36        =	$36
    204  10000 ????
    205  10000 ????		00 34	    _34        =	$34
    206  10000 ????
    207  10000 ????		00 32	    _32        =	$32
    208  10000 ????
    209  10000 ????		00 30	    _30        =	$30
    210  10000 ????
    211  10000 ????		00 2e	    _2E        =	$2E
    212  10000 ????
    213  10000 ????		00 2c	    _2C        =	$2C
    214  10000 ????
    215  10000 ????		00 2a	    _2A        =	$2A
    216  10000 ????
    217  10000 ????		00 28	    _28        =	$28
    218  10000 ????
    219  10000 ????		00 26	    _26        =	$26
    220  10000 ????
    221  10000 ????		00 24	    _24        =	$24
    222  10000 ????
    223  10000 ????		00 22	    _22        =	$22
    224  10000 ????
    225  10000 ????		00 20	    _20        =	$20
    226  10000 ????
    227  10000 ????		00 1e	    _1E        =	$1E
    228  10000 ????
    229  10000 ????		00 1c	    _1C        =	$1C
    230  10000 ????
    231  10000 ????		00 1a	    _1A        =	$1A
    232  10000 ????
    233  10000 ????		00 18	    _18        =	$18
    234  10000 ????
    235  10000 ????		00 16	    _16        =	$16
    236  10000 ????
    237  10000 ????		00 14	    _14        =	$14
    238  10000 ????
    239  10000 ????		00 12	    _12        =	$12
    240  10000 ????
    241  10000 ????		00 10	    _10        =	$10
    242  10000 ????
    243  10000 ????		00 0e	    _0E        =	$0E
    244  10000 ????
    245  10000 ????		00 0c	    _0C        =	$0C
    246  10000 ????
    247  10000 ????		00 0a	    _0A        =	$0A
    248  10000 ????
    249  10000 ????		00 08	    _08        =	$08
    250  10000 ????
    251  10000 ????		00 06	    _06        =	$06
    252  10000 ????
    253  10000 ????		00 04	    _04        =	$04
    254  10000 ????
    255  10000 ????		00 02	    _02        =	$02
    256  10000 ????
    257  10000 ????		00 00	    _00        =	$00
    258  10000 ????
    259  10000 ????		00 2b	    vblank_time =	43
    260  10000 ????		00 25	    overscan_time =	37
    261  10000 ????		00 01	    PFcolors   =	1
    262  10000 ????		00 01	    no_blank_lines =	1
------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\test.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 6b f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 0c		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc					      ifconst	PFcolors
    306  f0dc		       8a		      txa
    307  f0dd		       a8		      tay
    308  f0de		       b1 f0		      lda	(pfcolortable),y
    309  f0e0					      ifnconst	backgroundchange
    310  f0e0		       85 08		      sta	COLUPF
    311  f0e2				  -	      else
    312  f0e2				  -	      sta	COLUBK
    313  f0e2					      endif
    314  f0e2		       4c 8f f0 	      jmp	continuekernel
    315  f0e5				  -	      else
    316  f0e5				  -	      ifconst	kernelmacrodef
    317  f0e5				  -	      kernelmacro
    318  f0e5				  -	      else
    319  f0e5				  -	      sleep	12
    320  f0e5				  -	      endif
    321  f0e5					      endif
    322  f0e5				  -	      else
    323  f0e5				  -	      lda	(player0color),y
    324  f0e5				  -	      sta	player0colorstore
    325  f0e5				  -	      sleep	4
    326  f0e5					      endif
    327  f0e5		       4c 8f f0 	      jmp	continuekernel
    328  f0e8					      endif
    329  f0e8				   altkernel2
    330  f0e8		       8a		      txa
    331  f0e9					      ifnconst	vertical_reflect
    332  f0e9		       cb fc		      sbx	#256-pfwidth
    333  f0eb				  -	      else
    334  f0eb				  -	      sbx	#256-pfwidth/2
    335  f0eb					      endif
    336  f0eb		       30 24		      bmi	lastkernelline
    337  f0ed				  -	      ifconst	pfrowheight
    338  f0ed				  -	      lda	#pfrowheight
    339  f0ed					      else
    340  f0ed					      ifnconst	pfres
    341  f0ed		       a9 08		      lda	#8
    342  f0ef				  -	      else
    343  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ef					      endif
    345  f0ef					      endif
    346  f0ef		       85 9c		      sta	temp1
    347  f0f1		       4c 8f f0 	      jmp	continuekernel
    348  f0f4					      endif
    349  f0f4
    350  f0f4				   altkernel
    351  f0f4
    352  f0f4				  -	      ifconst	PFmaskvalue
    353  f0f4				  -	      lda	#PFmaskvalue
    354  f0f4					      else
    355  f0f4		       a9 00		      lda	#0
    356  f0f6					      endif
    357  f0f6		       85 0e		      sta	PF1L
    358  f0f8		       85 0f		      sta	PF2
    359  f0fa
    360  f0fa
    361  f0fa							;sleep 3
    362  f0fa
    363  f0fa							;28 cycles to fix things
    364  f0fa							;minus 11=17
    365  f0fa
    366  f0fa							; lax temp4
    367  f0fa							; clc
    368  f0fa		       8a		      txa
    369  f0fb					      ifnconst	vertical_reflect
    370  f0fb		       cb fc		      sbx	#256-pfwidth
    371  f0fd				  -	      else
    372  f0fd				  -	      sbx	#256-pfwidth/2
    373  f0fd					      endif
    374  f0fd
    375  f0fd		       30 12		      bmi	lastkernelline
    376  f0ff
    377  f0ff				  -	      ifconst	PFcolorandheight
    378  f0ff				  -	      ifconst	pfres
    379  f0ff				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ff				  -	      else
    381  f0ff				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ff				  -	      endif
    383  f0ff				  -	      ifnconst	backgroundchange
    384  f0ff				  -	      sty	COLUPF
    385  f0ff				  -	      else
    386  f0ff				  -	      sty	COLUBK
    387  f0ff				  -	      endif
    388  f0ff				  -	      ifconst	pfres
    389  f0ff				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ff				  -	      else
    391  f0ff				  -	      lda	playfieldcolorandheight-88,x
    392  f0ff				  -	      endif
    393  f0ff				  -	      sta.w	temp1
    394  f0ff					      endif
    395  f0ff				  -	      ifconst	PFheights
    396  f0ff				  -	      lsr
    397  f0ff				  -	      lsr
    398  f0ff				  -	      tay
    399  f0ff				  -	      lda	(pfheighttable),y
    400  f0ff				  -	      sta.w	temp1
    401  f0ff					      endif
    402  f0ff					      ifconst	PFcolors
    403  f0ff		       a8		      tay
    404  f100		       b1 f0		      lda	(pfcolortable),y
    405  f102					      ifnconst	backgroundchange
    406  f102		       85 08		      sta	COLUPF
    407  f104				  -	      else
    408  f104				  -	      sta	COLUBK
    409  f104					      endif
    410  f104				  -	      ifconst	pfrowheight
    411  f104				  -	      lda	#pfrowheight
    412  f104					      else
    413  f104					      ifnconst	pfres
    414  f104		       a9 08		      lda	#8
    415  f106				  -	      else
    416  f106				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f106					      endif
    418  f106					      endif
    419  f106		       85 9c		      sta	temp1
    420  f108					      endif
    421  f108					      ifnconst	PFcolorandheight
    422  f108				  -	      ifnconst	PFcolors
    423  f108				  -	      ifnconst	PFheights
    424  f108				  -	      ifnconst	no_blank_lines
    425  f108				  -			; read paddle 0
    426  f108				  -			; lo-res paddle read
    427  f108				  -			; bit INPT0
    428  f108				  -			; bmi paddleskipread
    429  f108				  -			; inc paddle0
    430  f108				  -			;donepaddleskip
    431  f108				  -	      sleep	10
    432  f108				  -	      ifconst	pfrowheight
    433  f108				  -	      lda	#pfrowheight
    434  f108				  -	      else
    435  f108				  -	      ifnconst	pfres
    436  f108				  -	      lda	#8
    437  f108				  -	      else
    438  f108				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f108				  -	      endif
    440  f108				  -	      endif
    441  f108				  -	      sta	temp1
    442  f108				  -	      endif
    443  f108				  -	      endif
    444  f108					      endif
    445  f108					      endif
    446  f108
    447  f108
    448  f108		       a5 92		      lda	ballheight
    449  f10a		       c7 89		      dcp	bally
    450  f10c		       e5 9f		      sbc	temp4
    451  f10e
    452  f10e
    453  f10e		       4c a6 f0 	      jmp	goback
    454  f111
    455  f111
    456  f111				  -	      ifnconst	no_blank_lines
    457  f111				  -lastkernelline
    458  f111				  -	      ifnconst	PFcolors
    459  f111				  -	      sleep	10
    460  f111				  -	      else
    461  f111				  -	      ldy	#124
    462  f111				  -	      lda	(pfcolortable),y
    463  f111				  -	      sta	COLUPF
    464  f111				  -	      endif
    465  f111				  -
    466  f111				  -	      ifconst	PFheights
    467  f111				  -	      ldx	#1
    468  f111				  -			;sleep 4
    469  f111				  -	      sleep	3	; this was over 1 cycle
    470  f111				  -	      else
    471  f111				  -	      ldx	playfieldpos
    472  f111				  -			;sleep 3
    473  f111				  -	      sleep	2	; this was over 1 cycle
    474  f111				  -	      endif
    475  f111				  -
    476  f111				  -	      jmp	enterlastkernel
    477  f111				  -
    478  f111					      else
    479  f111				   lastkernelline
    480  f111
    481  f111				  -	      ifconst	PFheights
    482  f111				  -	      ldx	#1
    483  f111				  -			;sleep 5
    484  f111				  -	      sleep	4	; this was over 1 cycle
    485  f111					      else
    486  f111		       a6 ef		      ldx	playfieldpos
    487  f113							;sleep 4
      0  f113					      sleep	3	; this was over 1 cycle
      1  f113				   .CYCLES    SET	3
      2  f113
      3  f113				  -	      IF	.CYCLES < 2
      4  f113				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f113				  -	      ERR
      6  f113					      ENDIF
      7  f113
      8  f113					      IF	.CYCLES & 1
      9  f113					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f113		       04 00		      nop	0
     11  f115				  -	      ELSE
     12  f115				  -	      bit	VSYNC
     13  f115					      ENDIF
     14  f115				   .CYCLES    SET	.CYCLES - 3
     15  f115					      ENDIF
     16  f115
     17  f115				  -	      REPEAT	.CYCLES / 2
     18  f115				  -	      nop
     19  f115					      REPEND
    489  f115					      endif
    490  f115
    491  f115		       e0 00		      cpx	#0
    492  f117		       d0 0a		      bne	.enterfromNBL
    493  f119		       4c 84 f1 	      jmp	no_blank_lines_bailout
    494  f11c					      endif
    495  f11c
    496  f11c				  -	      if	((<*)>$d5)
    497  f11c				  -	      align	256
    498  f11c					      endif
    499  f11c							; this is a kludge to prevent page wrapping - fix!!!
    500  f11c
    501  f11c				   .skipDrawlastP1
    502  f11c		       a9 00		      lda	#0
    503  f11e		       a8		      tay		; added so we don't cross a page
    504  f11f		       4c 49 f1 	      jmp	.continuelastP1
    505  f122
    506  f122				   .endkerloop		; enter at cycle 59??
    507  f122
    508  f122		       ea		      nop
    509  f123
    510  f123				   .enterfromNBL
    511  f123				  -	      ifconst	pfres
    512  f123				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f123				  -	      sty	PF1L	;3
    514  f123				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f123				  -	      sty	PF2L	;3
    516  f123				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f123				  -	      sty	PF1R	; possibly too early?
    518  f123				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f123				  -	      sty	PF2R	;3
    520  f123					      else
    521  f123		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f126		       84 0e		      sty	PF1L	;3
    523  f128		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f12b		       84 0f		      sty	PF2L	;3
    525  f12d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f130		       84 0e		      sty	PF1R	; possibly too early?
    527  f132		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f135		       84 0f		      sty	PF2R	;3
    529  f137					      endif
    530  f137
    531  f137				   enterlastkernel
    532  f137		       a5 92		      lda	ballheight
    533  f139
    534  f139							; tya
    535  f139		       c7 89		      dcp	bally
    536  f13b							; sleep 4
    537  f13b
    538  f13b							; sbc stack3
    539  f13b		       2a		      rol
    540  f13c		       2a		      rol
    541  f13d		       85 1f		      sta	ENABL
    542  f13f
    543  f13f		       a5 8f		      lda	player1height	;3
    544  f141		       c7 86		      dcp	player1y	;5
    545  f143		       90 d7		      bcc	.skipDrawlastP1
    546  f145		       a4 86		      ldy	player1y	;3
    547  f147		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f149							; so it doesn't cross a page boundary!
    549  f149
    550  f149				   .continuelastP1
    551  f149		       85 1c		      sta	GRP1	;3
    552  f14b
    553  f14b					      ifnconst	player1colors
    554  f14b		       a5 87		      lda	missile1height	;3
    555  f14d		       c7 88		      dcp	missile1y	;5
    556  f14f				  -	      else
    557  f14f				  -	      lda	(player1color),y
    558  f14f				  -	      sta	COLUP1
    559  f14f					      endif
    560  f14f
    561  f14f		       ca		      dex
    562  f150							;dec temp4 ; might try putting this above PF writes
    563  f150		       f0 34		      beq	endkernel
    564  f152
    565  f152
    566  f152				  -	      ifconst	pfres
    567  f152				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f152				  -	      sty	PF1L	;3
    569  f152				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f152				  -	      sty	PF2L	;3
    571  f152				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f152				  -	      sty	PF1R	; possibly too early?
    573  f152				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f152				  -	      sty	PF2R	;3
    575  f152					      else
    576  f152		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f155		       84 0e		      sty	PF1L	;3
    578  f157		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f15a		       84 0f		      sty	PF2L	;3
    580  f15c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f15f		       84 0e		      sty	PF1R	; possibly too early?
    582  f161		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f164		       84 0f		      sty	PF2R	;3
    584  f166					      endif
    585  f166
    586  f166					      ifnconst	player1colors
    587  f166		       2a		      rol		;2
    588  f167		       2a		      rol		;2
    589  f168		       85 1e		      sta	ENAM1	;3
    590  f16a				  -	      else
    591  f16a				  -	      ifnconst	playercolors
    592  f16a				  -	      sleep	7
    593  f16a				  -	      else
    594  f16a				  -	      lda.w	player0colorstore
    595  f16a				  -	      sta	COLUP0
    596  f16a				  -	      endif
    597  f16a					      endif
    598  f16a
    599  f16a		       ad 8e 00 	      lda.w	player0height
    600  f16d		       c7 85		      dcp	player0y
    601  f16f		       90 0d		      bcc	.skipDrawlastP0
    602  f171		       a4 85		      ldy	player0y
    603  f173		       b1 8a		      lda	(player0pointer),y
    604  f175				   .continuelastP0
    605  f175		       85 1b		      sta	GRP0
    606  f177
    607  f177
    608  f177
    609  f177				  -	      ifnconst	no_blank_lines
    610  f177				  -	      lda	missile0height	;3
    611  f177				  -	      dcp	missile0y	;5
    612  f177				  -	      sbc	stack1
    613  f177				  -	      sta	ENAM0	;3
    614  f177				  -	      jmp	.endkerloop
    615  f177					      else
    616  f177				  -	      ifconst	readpaddle
    617  f177				  -	      ldy	currentpaddle
    618  f177				  -	      lda	INPT0,y
    619  f177				  -	      bpl	noreadpaddle2
    620  f177				  -	      inc	paddle
    621  f177				  -	      jmp	.endkerloop
    622  f177				  -noreadpaddle2
    623  f177				  -	      sleep	4
    624  f177				  -	      jmp	.endkerloop
    625  f177					      else		; no_blank_lines and no paddle reading
    626  f177		       68		      pla
    627  f178		       48		      pha		; 14 cycles in 4 bytes
    628  f179		       68		      pla
    629  f17a		       48		      pha
    630  f17b							; sleep 14
    631  f17b		       4c 22 f1 	      jmp	.endkerloop
    632  f17e					      endif
    633  f17e					      endif
    634  f17e
    635  f17e
    636  f17e							; ifconst donepaddleskip
    637  f17e							;paddleskipread
    638  f17e							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f17e							; plus we get a lo-res paddle read
    640  f17e							; bmi donepaddleskip
    641  f17e							; endif
    642  f17e
    643  f17e				   .skipDrawlastP0
    644  f17e		       a9 00		      lda	#0
    645  f180		       a8		      tay
    646  f181		       4c 75 f1 	      jmp	.continuelastP0
    647  f184
    648  f184					      ifconst	no_blank_lines
    649  f184				   no_blank_lines_bailout
    650  f184		       a2 00		      ldx	#0
    651  f186					      endif
    652  f186
    653  f186				   endkernel
    654  f186							; 6 digit score routine
    655  f186		       86 0e		      stx	PF1
    656  f188		       86 0f		      stx	PF2
    657  f18a		       86 0d		      stx	PF0
    658  f18c		       18		      clc
    659  f18d
    660  f18d				  -	      ifconst	pfrowheight
    661  f18d				  -	      lda	#pfrowheight+2
    662  f18d					      else
    663  f18d					      ifnconst	pfres
    664  f18d		       a9 0a		      lda	#10
    665  f18f				  -	      else
    666  f18f				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f18f					      endif
    668  f18f					      endif
    669  f18f
    670  f18f		       e5 ef		      sbc	playfieldpos
    671  f191		       85 ef		      sta	playfieldpos
    672  f193		       8a		      txa
    673  f194
    674  f194				  -	      ifconst	shakescreen
    675  f194				  -	      bit	shakescreen
    676  f194				  -	      bmi	noshakescreen2
    677  f194				  -	      ldx	#$3D
    678  f194				  -noshakescreen2
    679  f194					      endif
    680  f194
    681  f194		       95 02		      sta	WSYNC,x
    682  f196
    683  f196							; STA WSYNC ;first one, need one more
    684  f196		       85 0b		      sta	REFP0
    685  f198		       85 0c		      sta	REFP1
    686  f19a		       85 1b		      STA	GRP0
    687  f19c		       85 1c		      STA	GRP1
    688  f19e							; STA PF1
    689  f19e							; STA PF2
    690  f19e		       85 2b		      sta	HMCLR
    691  f1a0		       85 1d		      sta	ENAM0
    692  f1a2		       85 1e		      sta	ENAM1
    693  f1a4		       85 1f		      sta	ENABL
    694  f1a6
    695  f1a6		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f1a8		       85 85		      sta	player0y
    697  f1aa		       a5 9e		      lda	temp3
    698  f1ac		       85 86		      sta	player1y
    699  f1ae					      ifnconst	player1colors
    700  f1ae		       a5 a1		      lda	temp6
    701  f1b0		       85 88		      sta	missile1y
    702  f1b2					      endif
    703  f1b2					      ifnconst	playercolors
    704  f1b2					      ifnconst	readpaddle
    705  f1b2		       a5 a0		      lda	temp5
    706  f1b4		       85 91		      sta	missile0y
    707  f1b6					      endif
    708  f1b6					      endif
    709  f1b6		       a5 f7		      lda	stack2
    710  f1b8		       85 89		      sta	bally
    711  f1ba
    712  f1ba							; strangely, this isn't required any more. might have
    713  f1ba							; resulted from the no_blank_lines score bounce fix
    714  f1ba							;ifconst no_blank_lines
    715  f1ba							;sta WSYNC
    716  f1ba							;endif
    717  f1ba
    718  f1ba		       ad 84 02 	      lda	INTIM
    719  f1bd		       18		      clc
    720  f1be				  -	      ifnconst	vblank_time
    721  f1be				  -	      adc	#43+12+87
    722  f1be					      else
    723  f1be		       69 8e		      adc	#vblank_time+12+87
    724  f1c0
    725  f1c0					      endif
    726  f1c0							; sta WSYNC
    727  f1c0		       8d 96 02 	      sta	TIM64T
    728  f1c3
    729  f1c3				  -	      ifconst	minikernel
    730  f1c3				  -	      jsr	minikernel
    731  f1c3					      endif
    732  f1c3
    733  f1c3							; now reassign temp vars for score pointers
    734  f1c3
    735  f1c3							; score pointers contain:
    736  f1c3							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1c3							; swap lo2->temp1
    738  f1c3							; swap lo4->temp3
    739  f1c3							; swap lo6->temp5
    740  f1c3					      ifnconst	noscore
    741  f1c3		       a5 97		      lda	scorepointers+1
    742  f1c5							; ldy temp1
    743  f1c5		       85 9c		      sta	temp1
    744  f1c7							; sty scorepointers+1
    745  f1c7
    746  f1c7		       a5 99		      lda	scorepointers+3
    747  f1c9							; ldy temp3
    748  f1c9		       85 9e		      sta	temp3
    749  f1cb							; sty scorepointers+3
    750  f1cb
    751  f1cb
    752  f1cb		       85 2b		      sta	HMCLR
    753  f1cd		       ba		      tsx
    754  f1ce		       86 f6		      stx	stack1
    755  f1d0		       a2 e0		      ldx	#$E0
    756  f1d2		       86 20		      stx	HMP0
    757  f1d4
    758  f1d4		       a5 a3		      LDA	scorecolor
    759  f1d6		       85 06		      STA	COLUP0
    760  f1d8		       85 07		      STA	COLUP1
    761  f1da				  -	      ifconst	scorefade
    762  f1da				  -	      STA	stack2
    763  f1da					      endif
    764  f1da				  -	      ifconst	pfscore
    765  f1da				  -	      lda	pfscorecolor
    766  f1da				  -	      sta	COLUPF
    767  f1da					      endif
    768  f1da		       85 02		      sta	WSYNC
    769  f1dc		       a2 00		      ldx	#0
    770  f1de		       86 1b		      STx	GRP0
    771  f1e0		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1e2
    773  f1e2		       a5 9b		      lda	scorepointers+5
    774  f1e4							; ldy temp5
    775  f1e4		       95 a0		      sta	temp5,x
    776  f1e6							; sty scorepointers+5
    777  f1e6		       a9 ff		      lda	#>scoretable
    778  f1e8		       85 97		      sta	scorepointers+1
    779  f1ea		       85 99		      sta	scorepointers+3
    780  f1ec		       85 9b		      sta	scorepointers+5
    781  f1ee		       85 9d		      sta	temp2
    782  f1f0		       85 9f		      sta	temp4
    783  f1f2		       85 a1		      sta	temp6
    784  f1f4		       a0 07		      LDY	#7
    785  f1f6		       84 25		      STY	VDELP0
    786  f1f8		       85 10		      STA	RESP0
    787  f1fa		       85 11		      STA	RESP1
    788  f1fc
    789  f1fc
    790  f1fc		       a9 03		      LDA	#$03
    791  f1fe		       85 04		      STA	NUSIZ0
    792  f200		       85 05		      STA	NUSIZ1
    793  f202		       85 26		      STA	VDELP1
    794  f204		       a9 f0		      LDA	#$F0
    795  f206		       85 21		      STA	HMP1
    796  f208		       b1 96		      lda	(scorepointers),y
    797  f20a		       85 1b		      sta	GRP0
    798  f20c		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f20e		       4c 19 f2 	      jmp	beginscore
    800  f211
    801  f211
    802  f211				  -	      if	((<*)>$d4)
    803  f211				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f211					      endif
    805  f211
    806  f211				   loop2
    807  f211		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f213		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f215				  -	      ifconst	pfscore
    810  f215				  -	      lda.w	pfscore1
    811  f215				  -	      sta	PF1
    812  f215					      else
    813  f215				  -	      ifconst	scorefade
    814  f215				  -	      sleep	2
    815  f215				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f215					      else
      0  f215					      sleep	7
      1  f215				   .CYCLES    SET	7
      2  f215
      3  f215				  -	      IF	.CYCLES < 2
      4  f215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f215				  -	      ERR
      6  f215					      ENDIF
      7  f215
      8  f215					      IF	.CYCLES & 1
      9  f215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f215		       04 00		      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217					      ENDIF
     14  f217				   .CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217					      REPEAT	.CYCLES / 2
     18  f217		       ea		      nop
     17  f217					      REPEND
     18  f218		       ea		      nop
     19  f219					      REPEND
    818  f219					      endif
    819  f219					      endif
    820  f219							; cycle 0
    821  f219				   beginscore
    822  f219		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f21b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f21d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f21f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f221		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f223		       9a		      txs
    828  f224		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f226				  -	      ifconst	scorefade
    830  f226				  -	      lda	stack2
    831  f226					      else
      0  f226					      sleep	3
      1  f226				   .CYCLES    SET	3
      2  f226
      3  f226				  -	      IF	.CYCLES < 2
      4  f226				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f226				  -	      ERR
      6  f226					      ENDIF
      7  f226
      8  f226					      IF	.CYCLES & 1
      9  f226					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f226		       04 00		      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228					      ENDIF
     14  f228				   .CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228				  -	      REPEAT	.CYCLES / 2
     18  f228				  -	      nop
     19  f228					      REPEND
    833  f228					      endif
    834  f228
    835  f228				  -	      ifconst	pfscore
    836  f228				  -	      lda	pfscore2
    837  f228				  -	      sta	PF1
    838  f228					      else
    839  f228				  -	      ifconst	scorefade
    840  f228				  -	      sta	COLUP0
    841  f228				  -	      sta	COLUP1
    842  f228					      else
      0  f228					      sleep	6
      1  f228				   .CYCLES    SET	6
      2  f228
      3  f228				  -	      IF	.CYCLES < 2
      4  f228				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f228				  -	      ERR
      6  f228					      ENDIF
      7  f228
      8  f228				  -	      IF	.CYCLES & 1
      9  f228				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f228				  -	      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228				  -	      ENDIF
     14  f228				  -.CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228					      REPEAT	.CYCLES / 2
     18  f228		       ea		      nop
     17  f228					      REPEND
     18  f229		       ea		      nop
     17  f229					      REPEND
     18  f22a		       ea		      nop
     19  f22b					      REPEND
    844  f22b					      endif
    845  f22b					      endif
    846  f22b
    847  f22b		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f22d		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f22f		       ba		      tsx
    850  f230		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f232		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f234		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f236		       88		      dey
    854  f237		       10 d8		      bpl	loop2	;+2 60 180
    855  f239
    856  f239		       a6 f6		      ldx	stack1
    857  f23b		       9a		      txs
    858  f23c							; lda scorepointers+1
    859  f23c		       a4 9c		      ldy	temp1
    860  f23e							; sta temp1
    861  f23e		       84 97		      sty	scorepointers+1
    862  f240
    863  f240		       a9 00		      LDA	#0
    864  f242		       85 0e		      sta	PF1
    865  f244		       85 1b		      STA	GRP0
    866  f246		       85 1c		      STA	GRP1
    867  f248		       85 25		      STA	VDELP0
    868  f24a		       85 26		      STA	VDELP1	;do we need these
    869  f24c		       85 04		      STA	NUSIZ0
    870  f24e		       85 05		      STA	NUSIZ1
    871  f250
    872  f250							; lda scorepointers+3
    873  f250		       a4 9e		      ldy	temp3
    874  f252							; sta temp3
    875  f252		       84 99		      sty	scorepointers+3
    876  f254
    877  f254							; lda scorepointers+5
    878  f254		       a4 a0		      ldy	temp5
    879  f256							; sta temp5
    880  f256		       84 9b		      sty	scorepointers+5
    881  f258					      endif		;noscore
    882  f258				  -	      ifconst	readpaddle
    883  f258				  -	      lda	#%11000010
    884  f258					      else
    885  f258				  -	      ifconst	qtcontroller
    886  f258				  -	      lda	qtcontroller
    887  f258				  -	      lsr		; bit 0 in carry
    888  f258				  -	      lda	#4
    889  f258				  -	      ror		; carry into top of A
    890  f258					      else
    891  f258		       a9 02		      lda	#2
    892  f25a					      endif		; qtcontroller
    893  f25a					      endif		; readpaddle
    894  f25a		       85 02		      sta	WSYNC
    895  f25c		       85 01		      sta	VBLANK
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    897  f25f				  -	      ifconst	shakescreen
    898  f25f				  -doshakescreen
    899  f25f				  -	      bit	shakescreen
    900  f25f				  -	      bmi	noshakescreen
    901  f25f				  -	      sta	WSYNC
    902  f25f				  -noshakescreen
    903  f25f				  -	      ldx	missile0height
    904  f25f				  -	      inx
    905  f25f				  -	      rts
    906  f25f					      endif
    907  f25f
    908  f25f							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f25f
    910  f25f							; playfield drawing routines
    911  f25f							; you get a 32x12 bitmapped display in a single color :)
    912  f25f							; 0-31 and 0-11
    913  f25f
    914  f25f				   pfclear		; clears playfield - or fill with pattern
    915  f25f				  -	      ifconst	pfres
    916  f25f				  -	      ldx	#pfres*pfwidth-1
    917  f25f					      else
    918  f25f		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f261					      endif
    920  f261				   pfclear_loop
    921  f261					      ifnconst	superchip
    922  f261		       95 a4		      sta	playfield,x
    923  f263				  -	      else
    924  f263				  -	      sta	playfield-128,x
    925  f263					      endif
    926  f263		       ca		      dex
    927  f264		       10 fb		      bpl	pfclear_loop
      0  f266					      RETURN
      1  f266					      ifnconst	bankswitch
      2  f266		       60		      rts
      3  f267				  -	      else
      4  f267				  -	      jmp	BS_return
      5  f267					      endif
    929  f267
    930  f267				   setuppointers
    931  f267		       86 9d		      stx	temp2	; store on.off.flip value
    932  f269		       aa		      tax		; put x-value in x 
    933  f26a		       4a		      lsr
    934  f26b		       4a		      lsr
    935  f26c		       4a		      lsr		; divide x pos by 8 
    936  f26d		       85 9c		      sta	temp1
    937  f26f		       98		      tya
    938  f270		       0a		      asl
    939  f271					      if	pfwidth=4
    940  f271		       0a		      asl		; multiply y pos by 4
    941  f272					      endif		; else multiply by 2
    942  f272		       18		      clc
    943  f273		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f275		       a8		      tay		; put the value in y
    945  f276		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f278		       60		      rts
    947  f279
    948  f279				   pfread
    949  f279							;x=xvalue, y=yvalue
    950  f279		       20 67 f2 	      jsr	setuppointers
    951  f27c		       bd e1 f2 	      lda	setbyte,x
    952  f27f		       39 a4 00 	      and	playfield,y
    953  f282		       5d e1 f2 	      eor	setbyte,x
    954  f285							; beq readzero
    955  f285							; lda #1
    956  f285							; readzero
      0  f285					      RETURN
      1  f285					      ifnconst	bankswitch
      2  f285		       60		      rts
      3  f286				  -	      else
      4  f286				  -	      jmp	BS_return
      5  f286					      endif
    958  f286
    959  f286				   pfpixel
    960  f286							;x=xvalue, y=yvalue, a=0,1,2
    961  f286		       20 67 f2 	      jsr	setuppointers
    962  f289
    963  f289				  -	      ifconst	bankswitch
    964  f289				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f289				  -	      beq	pixelon_r	; if "on" go to on
    966  f289				  -	      lsr
    967  f289				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f289				  -	      lda	playfield,y	; if here, it's "flip"
    969  f289				  -	      eor	setbyte,x
    970  f289				  -	      ifconst	superchip
    971  f289				  -	      sta	playfield-128,y
    972  f289				  -	      else
    973  f289				  -	      sta	playfield,y
    974  f289				  -	      endif
    975  f289				  -	      RETURN
    976  f289				  -pixelon_r
    977  f289				  -	      lda	playfield,y
    978  f289				  -	      ora	setbyte,x
    979  f289				  -	      ifconst	superchip
    980  f289				  -	      sta	playfield-128,y
    981  f289				  -	      else
    982  f289				  -	      sta	playfield,y
    983  f289				  -	      endif
    984  f289				  -	      RETURN
    985  f289				  -pixeloff_r
    986  f289				  -	      lda	setbyte,x
    987  f289				  -	      eor	#$ff
    988  f289				  -	      and	playfield,y
    989  f289				  -	      ifconst	superchip
    990  f289				  -	      sta	playfield-128,y
    991  f289				  -	      else
    992  f289				  -	      sta	playfield,y
    993  f289				  -	      endif
    994  f289				  -	      RETURN
    995  f289				  -
    996  f289					      else
    997  f289		       4c ba f2 	      jmp	plotpoint
    998  f28c					      endif
    999  f28c
   1000  f28c				   pfhline
   1001  f28c							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f28c		       20 67 f2 	      jsr	setuppointers
   1003  f28f		       4c 99 f2 	      jmp	noinc
   1004  f292				   keepgoing
   1005  f292		       e8		      inx
   1006  f293		       8a		      txa
   1007  f294		       29 07		      and	#7
   1008  f296		       d0 01		      bne	noinc
   1009  f298		       c8		      iny
   1010  f299				   noinc
   1011  f299		       20 ba f2 	      jsr	plotpoint
   1012  f29c		       e4 9e		      cpx	temp3
   1013  f29e		       30 f2		      bmi	keepgoing
      0  f2a0					      RETURN
      1  f2a0					      ifnconst	bankswitch
      2  f2a0		       60		      rts
      3  f2a1				  -	      else
      4  f2a1				  -	      jmp	BS_return
      5  f2a1					      endif
   1015  f2a1
   1016  f2a1				   pfvline
   1017  f2a1							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f2a1		       20 67 f2 	      jsr	setuppointers
   1019  f2a4		       84 9c		      sty	temp1	; store memory location offset
   1020  f2a6		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a8		       a5 9e		      lda	temp3
   1022  f2aa		       0a		      asl
   1023  f2ab					      if	pfwidth=4
   1024  f2ab		       0a		      asl		; multiply by 4
   1025  f2ac					      endif		; else multiply by 2
   1026  f2ac		       85 9e		      sta	temp3	; store it
   1027  f2ae							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2ae							; right now, temp1=y=starting memory location, temp3=final
   1029  f2ae							; x should equal original x value
   1030  f2ae				   keepgoingy
   1031  f2ae		       20 ba f2 	      jsr	plotpoint
   1032  f2b1		       c8		      iny
   1033  f2b2		       c8		      iny
   1034  f2b3					      if	pfwidth=4
   1035  f2b3		       c8		      iny
   1036  f2b4		       c8		      iny
   1037  f2b5					      endif
   1038  f2b5		       c4 9e		      cpy	temp3
   1039  f2b7		       30 f5		      bmi	keepgoingy
      0  f2b9					      RETURN
      1  f2b9					      ifnconst	bankswitch
      2  f2b9		       60		      rts
      3  f2ba				  -	      else
      4  f2ba				  -	      jmp	BS_return
      5  f2ba					      endif
   1041  f2ba
   1042  f2ba				   plotpoint
   1043  f2ba		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2bc		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2be		       4a		      lsr
   1046  f2bf		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2c1		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2c4		       5d e1 f2 	      eor	setbyte,x
   1049  f2c7				  -	      ifconst	superchip
   1050  f2c7				  -	      sta	playfield-128,y
   1051  f2c7					      else
   1052  f2c7		       99 a4 00 	      sta	playfield,y
   1053  f2ca					      endif
   1054  f2ca		       60		      rts
   1055  f2cb				   pixelon
   1056  f2cb		       b9 a4 00 	      lda	playfield,y
   1057  f2ce		       1d e1 f2 	      ora	setbyte,x
   1058  f2d1				  -	      ifconst	superchip
   1059  f2d1				  -	      sta	playfield-128,y
   1060  f2d1					      else
   1061  f2d1		       99 a4 00 	      sta	playfield,y
   1062  f2d4					      endif
   1063  f2d4		       60		      rts
   1064  f2d5				   pixeloff
   1065  f2d5		       bd e1 f2 	      lda	setbyte,x
   1066  f2d8		       49 ff		      eor	#$ff
   1067  f2da		       39 a4 00 	      and	playfield,y
   1068  f2dd				  -	      ifconst	superchip
   1069  f2dd				  -	      sta	playfield-128,y
   1070  f2dd					      else
   1071  f2dd		       99 a4 00 	      sta	playfield,y
   1072  f2e0					      endif
   1073  f2e0		       60		      rts
   1074  f2e1
   1075  f2e1				   setbyte
   1076  f2e1					      ifnconst	pfcenter
   1077  f2e1		       80		      .byte.b	$80
   1078  f2e2		       40		      .byte.b	$40
   1079  f2e3		       20		      .byte.b	$20
   1080  f2e4		       10		      .byte.b	$10
   1081  f2e5		       08		      .byte.b	$08
   1082  f2e6		       04		      .byte.b	$04
   1083  f2e7		       02		      .byte.b	$02
   1084  f2e8		       01		      .byte.b	$01
   1085  f2e9					      endif
   1086  f2e9		       01		      .byte.b	$01
   1087  f2ea		       02		      .byte.b	$02
   1088  f2eb		       04		      .byte.b	$04
   1089  f2ec		       08		      .byte.b	$08
   1090  f2ed		       10		      .byte.b	$10
   1091  f2ee		       20		      .byte.b	$20
   1092  f2ef		       40		      .byte.b	$40
   1093  f2f0		       80		      .byte.b	$80
   1094  f2f1		       80		      .byte.b	$80
   1095  f2f2		       40		      .byte.b	$40
   1096  f2f3		       20		      .byte.b	$20
   1097  f2f4		       10		      .byte.b	$10
   1098  f2f5		       08		      .byte.b	$08
   1099  f2f6		       04		      .byte.b	$04
   1100  f2f7		       02		      .byte.b	$02
   1101  f2f8		       01		      .byte.b	$01
   1102  f2f9		       01		      .byte.b	$01
   1103  f2fa		       02		      .byte.b	$02
   1104  f2fb		       04		      .byte.b	$04
   1105  f2fc		       08		      .byte.b	$08
   1106  f2fd		       10		      .byte.b	$10
   1107  f2fe		       20		      .byte.b	$20
   1108  f2ff		       40		      .byte.b	$40
   1109  f300		       80		      .byte.b	$80
   1110  f301							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f301
   1112  f301				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f301		       d0 13		      bne	notleft
   1114  f303							;left
   1115  f303				  -	      ifconst	pfres
   1116  f303				  -	      ldx	#pfres*4
   1117  f303					      else
   1118  f303		       a2 30		      ldx	#48
   1119  f305					      endif
   1120  f305				   leftloop
   1121  f305		       b5 a3		      lda	playfield-1,x
   1122  f307		       4a		      lsr
   1123  f308
   1124  f308				  -	      ifconst	superchip
   1125  f308				  -	      lda	playfield-2,x
   1126  f308				  -	      rol
   1127  f308				  -	      sta	playfield-130,x
   1128  f308				  -	      lda	playfield-3,x
   1129  f308				  -	      ror
   1130  f308				  -	      sta	playfield-131,x
   1131  f308				  -	      lda	playfield-4,x
   1132  f308				  -	      rol
   1133  f308				  -	      sta	playfield-132,x
   1134  f308				  -	      lda	playfield-1,x
   1135  f308				  -	      ror
   1136  f308				  -	      sta	playfield-129,x
   1137  f308					      else
   1138  f308		       36 a2		      rol	playfield-2,x
   1139  f30a		       76 a1		      ror	playfield-3,x
   1140  f30c		       36 a0		      rol	playfield-4,x
   1141  f30e		       76 a3		      ror	playfield-1,x
   1142  f310					      endif
   1143  f310
   1144  f310		       8a		      txa
   1145  f311		       cb 04		      sbx	#4
   1146  f313		       d0 f0		      bne	leftloop
      0  f315					      RETURN
      1  f315					      ifnconst	bankswitch
      2  f315		       60		      rts
      3  f316				  -	      else
      4  f316				  -	      jmp	BS_return
      5  f316					      endif
   1148  f316
   1149  f316				   notleft
   1150  f316		       4a		      lsr
   1151  f317		       90 13		      bcc	notright
   1152  f319							;right
   1153  f319
   1154  f319				  -	      ifconst	pfres
   1155  f319				  -	      ldx	#pfres*4
   1156  f319					      else
   1157  f319		       a2 30		      ldx	#48
   1158  f31b					      endif
   1159  f31b				   rightloop
   1160  f31b		       b5 a0		      lda	playfield-4,x
   1161  f31d		       4a		      lsr
   1162  f31e				  -	      ifconst	superchip
   1163  f31e				  -	      lda	playfield-3,x
   1164  f31e				  -	      rol
   1165  f31e				  -	      sta	playfield-131,x
   1166  f31e				  -	      lda	playfield-2,x
   1167  f31e				  -	      ror
   1168  f31e				  -	      sta	playfield-130,x
   1169  f31e				  -	      lda	playfield-1,x
   1170  f31e				  -	      rol
   1171  f31e				  -	      sta	playfield-129,x
   1172  f31e				  -	      lda	playfield-4,x
   1173  f31e				  -	      ror
   1174  f31e				  -	      sta	playfield-132,x
   1175  f31e					      else
   1176  f31e		       36 a1		      rol	playfield-3,x
   1177  f320		       76 a2		      ror	playfield-2,x
   1178  f322		       36 a3		      rol	playfield-1,x
   1179  f324		       76 a0		      ror	playfield-4,x
   1180  f326					      endif
   1181  f326		       8a		      txa
   1182  f327		       cb 04		      sbx	#4
   1183  f329		       d0 f0		      bne	rightloop
      0  f32b					      RETURN
      1  f32b					      ifnconst	bankswitch
      2  f32b		       60		      rts
      3  f32c				  -	      else
      4  f32c				  -	      jmp	BS_return
      5  f32c					      endif
   1185  f32c
   1186  f32c				   notright
   1187  f32c		       4a		      lsr
   1188  f32d		       90 49		      bcc	notup
   1189  f32f							;up
   1190  f32f		       4a		      lsr
   1191  f330		       90 02		      bcc	onedecup
   1192  f332		       c6 ef		      dec	playfieldpos
   1193  f334				   onedecup
   1194  f334		       c6 ef		      dec	playfieldpos
   1195  f336		       f0 02		      beq	shiftdown
   1196  f338		       10 3d		      bpl	noshiftdown2
   1197  f33a				   shiftdown
   1198  f33a				  -	      ifconst	pfrowheight
   1199  f33a				  -	      lda	#pfrowheight
   1200  f33a					      else
   1201  f33a					      ifnconst	pfres
   1202  f33a		       a9 08		      lda	#8
   1203  f33c				  -	      else
   1204  f33c				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f33c					      endif
   1206  f33c					      endif
   1207  f33c
   1208  f33c		       85 ef		      sta	playfieldpos
   1209  f33e		       a5 a7		      lda	playfield+3
   1210  f340		       85 9f		      sta	temp4
   1211  f342		       a5 a6		      lda	playfield+2
   1212  f344		       85 9e		      sta	temp3
   1213  f346		       a5 a5		      lda	playfield+1
   1214  f348		       85 9d		      sta	temp2
   1215  f34a		       a5 a4		      lda	playfield
   1216  f34c		       85 9c		      sta	temp1
   1217  f34e		       a2 00		      ldx	#0
   1218  f350				   up2
   1219  f350		       b5 a8		      lda	playfield+4,x
   1220  f352				  -	      ifconst	superchip
   1221  f352				  -	      sta	playfield-128,x
   1222  f352				  -	      lda	playfield+5,x
   1223  f352				  -	      sta	playfield-127,x
   1224  f352				  -	      lda	playfield+6,x
   1225  f352				  -	      sta	playfield-126,x
   1226  f352				  -	      lda	playfield+7,x
   1227  f352				  -	      sta	playfield-125,x
   1228  f352					      else
   1229  f352		       95 a4		      sta	playfield,x
   1230  f354		       b5 a9		      lda	playfield+5,x
   1231  f356		       95 a5		      sta	playfield+1,x
   1232  f358		       b5 aa		      lda	playfield+6,x
   1233  f35a		       95 a6		      sta	playfield+2,x
   1234  f35c		       b5 ab		      lda	playfield+7,x
   1235  f35e		       95 a7		      sta	playfield+3,x
   1236  f360					      endif
   1237  f360		       8a		      txa
   1238  f361		       cb fc		      sbx	#252
   1239  f363				  -	      ifconst	pfres
   1240  f363				  -	      cpx	#(pfres-1)*4
   1241  f363					      else
   1242  f363		       e0 2c		      cpx	#44
   1243  f365					      endif
   1244  f365		       d0 e9		      bne	up2
   1245  f367
   1246  f367		       a5 9f		      lda	temp4
   1247  f369
   1248  f369				  -	      ifconst	superchip
   1249  f369				  -	      ifconst	pfres
   1250  f369				  -	      sta	playfield+pfres*4-129
   1251  f369				  -	      lda	temp3
   1252  f369				  -	      sta	playfield+pfres*4-130
   1253  f369				  -	      lda	temp2
   1254  f369				  -	      sta	playfield+pfres*4-131
   1255  f369				  -	      lda	temp1
   1256  f369				  -	      sta	playfield+pfres*4-132
   1257  f369				  -	      else
   1258  f369				  -	      sta	playfield+47-128
   1259  f369				  -	      lda	temp3
   1260  f369				  -	      sta	playfield+46-128
   1261  f369				  -	      lda	temp2
   1262  f369				  -	      sta	playfield+45-128
   1263  f369				  -	      lda	temp1
   1264  f369				  -	      sta	playfield+44-128
   1265  f369				  -	      endif
   1266  f369					      else
   1267  f369				  -	      ifconst	pfres
   1268  f369				  -	      sta	playfield+pfres*4-1
   1269  f369				  -	      lda	temp3
   1270  f369				  -	      sta	playfield+pfres*4-2
   1271  f369				  -	      lda	temp2
   1272  f369				  -	      sta	playfield+pfres*4-3
   1273  f369				  -	      lda	temp1
   1274  f369				  -	      sta	playfield+pfres*4-4
   1275  f369					      else
   1276  f369		       85 d3		      sta	playfield+47
   1277  f36b		       a5 9e		      lda	temp3
   1278  f36d		       85 d2		      sta	playfield+46
   1279  f36f		       a5 9d		      lda	temp2
   1280  f371		       85 d1		      sta	playfield+45
   1281  f373		       a5 9c		      lda	temp1
   1282  f375		       85 d0		      sta	playfield+44
   1283  f377					      endif
   1284  f377					      endif
   1285  f377				   noshiftdown2
      0  f377					      RETURN
      1  f377					      ifnconst	bankswitch
      2  f377		       60		      rts
      3  f378				  -	      else
      4  f378				  -	      jmp	BS_return
      5  f378					      endif
   1287  f378
   1288  f378
   1289  f378				   notup
   1290  f378							;down
   1291  f378		       4a		      lsr
   1292  f379		       b0 02		      bcs	oneincup
   1293  f37b		       e6 ef		      inc	playfieldpos
   1294  f37d				   oneincup
   1295  f37d		       e6 ef		      inc	playfieldpos
   1296  f37f		       a5 ef		      lda	playfieldpos
   1297  f381
   1298  f381				  -	      ifconst	pfrowheight
   1299  f381				  -	      cmp	#pfrowheight+1
   1300  f381					      else
   1301  f381					      ifnconst	pfres
   1302  f381		       c9 09		      cmp	#9
   1303  f383				  -	      else
   1304  f383				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f383					      endif
   1306  f383					      endif
   1307  f383
   1308  f383		       90 3b		      bcc	noshiftdown
   1309  f385		       a9 01		      lda	#1
   1310  f387		       85 ef		      sta	playfieldpos
   1311  f389
   1312  f389				  -	      ifconst	pfres
   1313  f389				  -	      lda	playfield+pfres*4-1
   1314  f389				  -	      sta	temp4
   1315  f389				  -	      lda	playfield+pfres*4-2
   1316  f389				  -	      sta	temp3
   1317  f389				  -	      lda	playfield+pfres*4-3
   1318  f389				  -	      sta	temp2
   1319  f389				  -	      lda	playfield+pfres*4-4
   1320  f389					      else
   1321  f389		       a5 d3		      lda	playfield+47
   1322  f38b		       85 9f		      sta	temp4
   1323  f38d		       a5 d2		      lda	playfield+46
   1324  f38f		       85 9e		      sta	temp3
   1325  f391		       a5 d1		      lda	playfield+45
   1326  f393		       85 9d		      sta	temp2
   1327  f395		       a5 d0		      lda	playfield+44
   1328  f397					      endif
   1329  f397
   1330  f397		       85 9c		      sta	temp1
   1331  f399
   1332  f399				  -	      ifconst	pfres
   1333  f399				  -	      ldx	#(pfres-1)*4
   1334  f399					      else
   1335  f399		       a2 2c		      ldx	#44
   1336  f39b					      endif
   1337  f39b				   down2
   1338  f39b		       b5 a3		      lda	playfield-1,x
   1339  f39d				  -	      ifconst	superchip
   1340  f39d				  -	      sta	playfield-125,x
   1341  f39d				  -	      lda	playfield-2,x
   1342  f39d				  -	      sta	playfield-126,x
   1343  f39d				  -	      lda	playfield-3,x
   1344  f39d				  -	      sta	playfield-127,x
   1345  f39d				  -	      lda	playfield-4,x
   1346  f39d				  -	      sta	playfield-128,x
   1347  f39d					      else
   1348  f39d		       95 a7		      sta	playfield+3,x
   1349  f39f		       b5 a2		      lda	playfield-2,x
   1350  f3a1		       95 a6		      sta	playfield+2,x
   1351  f3a3		       b5 a1		      lda	playfield-3,x
   1352  f3a5		       95 a5		      sta	playfield+1,x
   1353  f3a7		       b5 a0		      lda	playfield-4,x
   1354  f3a9		       95 a4		      sta	playfield,x
   1355  f3ab					      endif
   1356  f3ab		       8a		      txa
   1357  f3ac		       cb 04		      sbx	#4
   1358  f3ae		       d0 eb		      bne	down2
   1359  f3b0
   1360  f3b0		       a5 9f		      lda	temp4
   1361  f3b2				  -	      ifconst	superchip
   1362  f3b2				  -	      sta	playfield-125
   1363  f3b2				  -	      lda	temp3
   1364  f3b2				  -	      sta	playfield-126
   1365  f3b2				  -	      lda	temp2
   1366  f3b2				  -	      sta	playfield-127
   1367  f3b2				  -	      lda	temp1
   1368  f3b2				  -	      sta	playfield-128
   1369  f3b2					      else
   1370  f3b2		       85 a7		      sta	playfield+3
   1371  f3b4		       a5 9e		      lda	temp3
   1372  f3b6		       85 a6		      sta	playfield+2
   1373  f3b8		       a5 9d		      lda	temp2
   1374  f3ba		       85 a5		      sta	playfield+1
   1375  f3bc		       a5 9c		      lda	temp1
   1376  f3be		       85 a4		      sta	playfield
   1377  f3c0					      endif
   1378  f3c0				   noshiftdown
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1380  f3c1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3c1
   1382  f3c1							;standard routines needed for pretty much all games
   1383  f3c1							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3c1							; repositioning code and score pointer setup moved to overscan
   1385  f3c1							; read switches, joysticks now compiler generated (more efficient)
   1386  f3c1
   1387  f3c1				   randomize
   1388  f3c1		       a5 a2		      lda	rand
   1389  f3c3		       4a		      lsr
   1390  f3c4				  -	      ifconst	rand16
   1391  f3c4				  -	      rol	rand16
   1392  f3c4					      endif
   1393  f3c4		       90 02		      bcc	noeor
   1394  f3c6		       49 b4		      eor	#$B4
   1395  f3c8				   noeor
   1396  f3c8		       85 a2		      sta	rand
   1397  f3ca				  -	      ifconst	rand16
   1398  f3ca				  -	      eor	rand16
   1399  f3ca					      endif
      0  f3ca					      RETURN
      1  f3ca					      ifnconst	bankswitch
      2  f3ca		       60		      rts
      3  f3cb				  -	      else
      4  f3cb				  -	      jmp	BS_return
      5  f3cb					      endif
   1401  f3cb							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3cb
   1403  f3cb				   drawscreen
   1404  f3cb				  -	      ifconst	debugscore
   1405  f3cb				  -	      ldx	#14
   1406  f3cb				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3cb				  -
   1408  f3cb				  -	      ifconst	mincycles
   1409  f3cb				  -	      lda	mincycles
   1410  f3cb				  -	      cmp	INTIM
   1411  f3cb				  -	      lda	mincycles
   1412  f3cb				  -	      bcc	nochange
   1413  f3cb				  -	      lda	INTIM
   1414  f3cb				  -	      sta	mincycles
   1415  f3cb				  -nochange
   1416  f3cb				  -	      endif
   1417  f3cb				  -
   1418  f3cb				  -			; cmp #$2B
   1419  f3cb				  -			; bcs no_cycles_left
   1420  f3cb				  -	      bmi	cycles_left
   1421  f3cb				  -	      ldx	#64
   1422  f3cb				  -	      eor	#$ff	;make negative
   1423  f3cb				  -cycles_left
   1424  f3cb				  -	      stx	scorecolor
   1425  f3cb				  -	      and	#$7f	; clear sign bit
   1426  f3cb				  -	      tax
   1427  f3cb				  -	      lda	scorebcd,x
   1428  f3cb				  -	      sta	score+2
   1429  f3cb				  -	      lda	scorebcd1,x
   1430  f3cb				  -	      sta	score+1
   1431  f3cb				  -	      jmp	done_debugscore
   1432  f3cb				  -scorebcd
   1433  f3cb				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3cb				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3cb				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3cb				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3cb				  -scorebcd1
   1438  f3cb				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3cb				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3cb				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3cb				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3cb				  -done_debugscore
   1443  f3cb					      endif
   1444  f3cb
   1445  f3cb				  -	      ifconst	debugcycles
   1446  f3cb				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3cb				  -			; cmp #$2B
   1448  f3cb				  -			; BCC overscan
   1449  f3cb				  -	      bmi	overscan
   1450  f3cb				  -	      sta	COLUBK
   1451  f3cb				  -	      bcs	doneoverscan
   1452  f3cb					      endif
   1453  f3cb
   1454  f3cb				   overscan
   1455  f3cb				  -	      ifconst	interlaced
   1456  f3cb				  -	      PHP
   1457  f3cb				  -	      PLA
   1458  f3cb				  -	      EOR	#4	; flip interrupt bit
   1459  f3cb				  -	      PHA
   1460  f3cb				  -	      PLP
   1461  f3cb				  -	      AND	#4	; isolate the interrupt bit
   1462  f3cb				  -	      TAX		; save it for later
   1463  f3cb					      endif
   1464  f3cb
   1465  f3cb				   overscanloop
   1466  f3cb		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3ce		       30 fb		      bmi	overscanloop
   1468  f3d0				   doneoverscan
   1469  f3d0
   1470  f3d0							;do VSYNC
   1471  f3d0
   1472  f3d0				  -	      ifconst	interlaced
   1473  f3d0				  -	      CPX	#4
   1474  f3d0				  -	      BNE	oddframevsync
   1475  f3d0					      endif
   1476  f3d0
   1477  f3d0		       a9 02		      lda	#2
   1478  f3d2		       85 02		      sta	WSYNC
   1479  f3d4		       85 00		      sta	VSYNC
   1480  f3d6		       85 02		      STA	WSYNC
   1481  f3d8		       85 02		      STA	WSYNC
   1482  f3da		       4a		      lsr
   1483  f3db		       85 02		      STA	WSYNC
   1484  f3dd		       85 00		      STA	VSYNC
   1485  f3df		       85 01		      sta	VBLANK
   1486  f3e1				  -	      ifnconst	overscan_time
   1487  f3e1				  -	      lda	#37+128
   1488  f3e1					      else
   1489  f3e1		       a9 a5		      lda	#overscan_time+128
   1490  f3e3					      endif
   1491  f3e3		       8d 96 02 	      sta	TIM64T
   1492  f3e6
   1493  f3e6				  -	      ifconst	interlaced
   1494  f3e6				  -	      jmp	postsync
   1495  f3e6				  -
   1496  f3e6				  -oddframevsync
   1497  f3e6				  -	      sta	WSYNC
   1498  f3e6				  -
   1499  f3e6				  -	      LDA	($80,X)	; 11 waste
   1500  f3e6				  -	      LDA	($80,X)	; 11 waste
   1501  f3e6				  -	      LDA	($80,X)	; 11 waste
   1502  f3e6				  -
   1503  f3e6				  -	      lda	#2
   1504  f3e6				  -	      sta	VSYNC
   1505  f3e6				  -	      sta	WSYNC
   1506  f3e6				  -	      sta	WSYNC
   1507  f3e6				  -	      sta	WSYNC
   1508  f3e6				  -
   1509  f3e6				  -	      LDA	($80,X)	; 11 waste
   1510  f3e6				  -	      LDA	($80,X)	; 11 waste
   1511  f3e6				  -	      LDA	($80,X)	; 11 waste
   1512  f3e6				  -
   1513  f3e6				  -	      lda	#0
   1514  f3e6				  -	      sta	VSYNC
   1515  f3e6				  -	      sta	VBLANK
   1516  f3e6				  -	      ifnconst	overscan_time
   1517  f3e6				  -	      lda	#37+128
   1518  f3e6				  -	      else
   1519  f3e6				  -	      lda	#overscan_time+128
   1520  f3e6				  -	      endif
   1521  f3e6				  -	      sta	TIM64T
   1522  f3e6				  -
   1523  f3e6				  -postsync
   1524  f3e6					      endif
   1525  f3e6
   1526  f3e6				  -	      ifconst	legacy
   1527  f3e6				  -	      if	legacy < 100
   1528  f3e6				  -	      ldx	#4
   1529  f3e6				  -adjustloop
   1530  f3e6				  -	      lda	player0x,x
   1531  f3e6				  -	      sec
   1532  f3e6				  -	      sbc	#14	;?
   1533  f3e6				  -	      sta	player0x,x
   1534  f3e6				  -	      dex
   1535  f3e6				  -	      bpl	adjustloop
   1536  f3e6				  -	      endif
   1537  f3e6					      endif
   1538  f3e6				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3e6				  -	      repeat	($fa-(<*))
   1540  f3e6				  -	      nop
   1541  f3e6				  -	      repend
   1542  f3e6					      endif
   1543  f3e6		       85 02		      sta	WSYNC
   1544  f3e8		       a2 04		      ldx	#4
      0  f3ea					      SLEEP	3
      1  f3ea				   .CYCLES    SET	3
      2  f3ea
      3  f3ea				  -	      IF	.CYCLES < 2
      4  f3ea				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3ea				  -	      ERR
      6  f3ea					      ENDIF
      7  f3ea
      8  f3ea					      IF	.CYCLES & 1
      9  f3ea					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3ea		       04 00		      nop	0
     11  f3ec				  -	      ELSE
     12  f3ec				  -	      bit	VSYNC
     13  f3ec					      ENDIF
     14  f3ec				   .CYCLES    SET	.CYCLES - 3
     15  f3ec					      ENDIF
     16  f3ec
     17  f3ec				  -	      REPEAT	.CYCLES / 2
     18  f3ec				  -	      nop
     19  f3ec					      REPEND
   1546  f3ec				   HorPosLoop		; 5
   1547  f3ec		       b5 80		      lda	player0x,X	;+4 9
   1548  f3ee		       38		      sec		;+2 11
   1549  f3ef				   DivideLoop
   1550  f3ef		       e9 0f		      sbc	#15
   1551  f3f1		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3f3		       95 9c		      sta	temp1,X	;+4 19
   1553  f3f5		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f7		       85 02		      sta	WSYNC
   1555  f3f9		       ca		      dex
   1556  f3fa		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3fc							; 4
   1558  f3fc
   1559  f3fc		       a2 04		      ldx	#4
   1560  f3fe		       b4 9c		      ldy	temp1,X
   1561  f400		       b9 5c f3 	      lda	repostable-256,Y
   1562  f403		       95 20		      sta	HMP0,X	;+14 18
   1563  f405
   1564  f405		       ca		      dex
   1565  f406		       b4 9c		      ldy	temp1,X
   1566  f408		       b9 5c f3 	      lda	repostable-256,Y
   1567  f40b		       95 20		      sta	HMP0,X	;+14 32
   1568  f40d
   1569  f40d		       ca		      dex
   1570  f40e		       b4 9c		      ldy	temp1,X
   1571  f410		       b9 5c f3 	      lda	repostable-256,Y
   1572  f413		       95 20		      sta	HMP0,X	;+14 46
   1573  f415
   1574  f415		       ca		      dex
   1575  f416		       b4 9c		      ldy	temp1,X
   1576  f418		       b9 5c f3 	      lda	repostable-256,Y
   1577  f41b		       95 20		      sta	HMP0,X	;+14 60
   1578  f41d
   1579  f41d		       ca		      dex
   1580  f41e		       b4 9c		      ldy	temp1,X
   1581  f420		       b9 5c f3 	      lda	repostable-256,Y
   1582  f423		       95 20		      sta	HMP0,X	;+14 74
   1583  f425
   1584  f425		       85 02		      sta	WSYNC
   1585  f427
   1586  f427		       85 2a		      sta	HMOVE	;+3 3
   1587  f429
   1588  f429
   1589  f429				  -	      ifconst	legacy
   1590  f429				  -	      if	legacy < 100
   1591  f429				  -	      ldx	#4
   1592  f429				  -adjustloop2
   1593  f429				  -	      lda	player0x,x
   1594  f429				  -	      clc
   1595  f429				  -	      adc	#14	;?
   1596  f429				  -	      sta	player0x,x
   1597  f429				  -	      dex
   1598  f429				  -	      bpl	adjustloop2
   1599  f429				  -	      endif
   1600  f429					      endif
   1601  f429
   1602  f429
   1603  f429
   1604  f429
   1605  f429							;set score pointers
   1606  f429		       a7 95		      lax	score+2
   1607  f42b		       20 5c f4 	      jsr	scorepointerset
   1608  f42e		       84 9b		      sty	scorepointers+5
   1609  f430		       86 98		      stx	scorepointers+2
   1610  f432		       a7 94		      lax	score+1
   1611  f434		       20 5c f4 	      jsr	scorepointerset
   1612  f437		       84 9a		      sty	scorepointers+4
   1613  f439		       86 97		      stx	scorepointers+1
   1614  f43b		       a7 93		      lax	score
   1615  f43d		       20 5c f4 	      jsr	scorepointerset
   1616  f440		       84 99		      sty	scorepointers+3
   1617  f442		       86 96		      stx	scorepointers
   1618  f444
   1619  f444				   vblk
   1620  f444							; run possible vblank bB code
   1621  f444				  -	      ifconst	vblank_bB_code
   1622  f444				  -	      jsr	vblank_bB_code
   1623  f444					      endif
   1624  f444				   vblk2
   1625  f444		       ad 84 02 	      LDA	INTIM
   1626  f447		       30 fb		      bmi	vblk2
   1627  f449		       4c 34 f0 	      jmp	kernel
   1628  f44c
   1629  f44c
   1630  f44c		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f455		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f45c				   repostable
   1633  f45c
   1634  f45c				   scorepointerset
   1635  f45c		       29 0f		      and	#$0F
   1636  f45e		       0a		      asl
   1637  f45f		       0a		      asl
   1638  f460		       0a		      asl
   1639  f461		       69 9c		      adc	#<scoretable
   1640  f463		       a8		      tay
   1641  f464		       8a		      txa
   1642  f465							; and #$F0
   1643  f465							; lsr
   1644  f465		       4b f0		      asr	#$F0
   1645  f467		       69 9c		      adc	#<scoretable
   1646  f469		       aa		      tax
   1647  f46a		       60		      rts
   1648  f46b				   game
   1649  f46b				   .
   1650  f46b							; 
   1651  f46b
   1652  f46b				   .
   1653  f46b							; 
   1654  f46b
   1655  f46b				   .
   1656  f46b							; 
   1657  f46b
   1658  f46b				   .
   1659  f46b							; 
   1660  f46b
   1661  f46b				   .
   1662  f46b							; 
   1663  f46b
   1664  f46b				   .L00 		;  set kernel_options pfcolors no_blank_lines
   1665  f46b
   1666  f46b				   .
   1667  f46b							; 
   1668  f46b
   1669  f46b				   .
   1670  f46b							; 
   1671  f46b
   1672  f46b				   .
   1673  f46b							; 
   1674  f46b
   1675  f46b				   .
   1676  f46b							; 
   1677  f46b
   1678  f46b				   .
   1679  f46b							; 
   1680  f46b
   1681  f46b				   .
   1682  f46b							; 
   1683  f46b
   1684  f46b				   .L01 		;  set tv ntsc
   1685  f46b
   1686  f46b				   .
   1687  f46b							; 
   1688  f46b
   1689  f46b				   .
   1690  f46b							; 
   1691  f46b
   1692  f46b				   .
   1693  f46b							; 
   1694  f46b
   1695  f46b				   .
   1696  f46b							; 
   1697  f46b
   1698  f46b				   .
   1699  f46b							; 
   1700  f46b
   1701  f46b				   .
   1702  f46b							; 
   1703  f46b
   1704  f46b				   .
   1705  f46b							; 
   1706  f46b
   1707  f46b				   .
   1708  f46b							; 
   1709  f46b
   1710  f46b				   .
   1711  f46b							; 
   1712  f46b
   1713  f46b				   .
   1714  f46b							; 
   1715  f46b
   1716  f46b				   .
   1717  f46b							; 
   1718  f46b
   1719  f46b				   .L02 		;  const _00  =  $00
   1720  f46b
   1721  f46b				   .L03 		;  const _02  =  $02
   1722  f46b
   1723  f46b				   .L04 		;  const _04  =  $04
   1724  f46b
   1725  f46b				   .L05 		;  const _06  =  $06
   1726  f46b
   1727  f46b				   .L06 		;  const _08  =  $08
   1728  f46b
   1729  f46b				   .L07 		;  const _0A  =  $0A
   1730  f46b
   1731  f46b				   .L08 		;  const _0C  =  $0C
   1732  f46b
   1733  f46b				   .L09 		;  const _0E  =  $0E
   1734  f46b
   1735  f46b				   .L010		;  const _10  =  $10
   1736  f46b
   1737  f46b				   .L011		;  const _12  =  $12
   1738  f46b
   1739  f46b				   .L012		;  const _14  =  $14
   1740  f46b
   1741  f46b				   .L013		;  const _16  =  $16
   1742  f46b
   1743  f46b				   .L014		;  const _18  =  $18
   1744  f46b
   1745  f46b				   .L015		;  const _1A  =  $1A
   1746  f46b
   1747  f46b				   .L016		;  const _1C  =  $1C
   1748  f46b
   1749  f46b				   .L017		;  const _1E  =  $1E
   1750  f46b
   1751  f46b				   .L018		;  const _20  =  $20
   1752  f46b
   1753  f46b				   .L019		;  const _22  =  $22
   1754  f46b
   1755  f46b				   .L020		;  const _24  =  $24
   1756  f46b
   1757  f46b				   .L021		;  const _26  =  $26
   1758  f46b
   1759  f46b				   .L022		;  const _28  =  $28
   1760  f46b
   1761  f46b				   .L023		;  const _2A  =  $2A
   1762  f46b
   1763  f46b				   .L024		;  const _2C  =  $2C
   1764  f46b
   1765  f46b				   .L025		;  const _2E  =  $2E
   1766  f46b
   1767  f46b				   .L026		;  const _30  =  $30
   1768  f46b
   1769  f46b				   .L027		;  const _32  =  $32
   1770  f46b
   1771  f46b				   .L028		;  const _34  =  $34
   1772  f46b
   1773  f46b				   .L029		;  const _36  =  $36
   1774  f46b
   1775  f46b				   .L030		;  const _38  =  $38
   1776  f46b
   1777  f46b				   .L031		;  const _3A  =  $3A
   1778  f46b
   1779  f46b				   .L032		;  const _3C  =  $3C
   1780  f46b
   1781  f46b				   .L033		;  const _3E  =  $3E
   1782  f46b
   1783  f46b				   .L034		;  const _40  =  $40
   1784  f46b
   1785  f46b				   .L035		;  const _42  =  $42
   1786  f46b
   1787  f46b				   .L036		;  const _44  =  $44
   1788  f46b
   1789  f46b				   .L037		;  const _46  =  $46
   1790  f46b
   1791  f46b				   .L038		;  const _48  =  $48
   1792  f46b
   1793  f46b				   .L039		;  const _4A  =  $4A
   1794  f46b
   1795  f46b				   .L040		;  const _4C  =  $4C
   1796  f46b
   1797  f46b				   .L041		;  const _4E  =  $4E
   1798  f46b
   1799  f46b				   .L042		;  const _50  =  $50
   1800  f46b
   1801  f46b				   .L043		;  const _52  =  $52
   1802  f46b
   1803  f46b				   .L044		;  const _54  =  $54
   1804  f46b
   1805  f46b				   .L045		;  const _56  =  $56
   1806  f46b
   1807  f46b				   .L046		;  const _58  =  $58
   1808  f46b
   1809  f46b				   .L047		;  const _5A  =  $5A
   1810  f46b
   1811  f46b				   .L048		;  const _5C  =  $5C
   1812  f46b
   1813  f46b				   .L049		;  const _5E  =  $5E
   1814  f46b
   1815  f46b				   .L050		;  const _60  =  $60
   1816  f46b
   1817  f46b				   .L051		;  const _62  =  $62
   1818  f46b
   1819  f46b				   .L052		;  const _64  =  $64
   1820  f46b
   1821  f46b				   .L053		;  const _66  =  $66
   1822  f46b
   1823  f46b				   .L054		;  const _68  =  $68
   1824  f46b
   1825  f46b				   .L055		;  const _6A  =  $6A
   1826  f46b
   1827  f46b				   .L056		;  const _6C  =  $6C
   1828  f46b
   1829  f46b				   .L057		;  const _6E  =  $6E
   1830  f46b
   1831  f46b				   .L058		;  const _70  =  $70
   1832  f46b
   1833  f46b				   .L059		;  const _72  =  $72
   1834  f46b
   1835  f46b				   .L060		;  const _74  =  $74
   1836  f46b
   1837  f46b				   .L061		;  const _76  =  $76
   1838  f46b
   1839  f46b				   .L062		;  const _78  =  $78
   1840  f46b
   1841  f46b				   .L063		;  const _7A  =  $7A
   1842  f46b
   1843  f46b				   .L064		;  const _7C  =  $7C
   1844  f46b
   1845  f46b				   .L065		;  const _7E  =  $7E
   1846  f46b
   1847  f46b				   .L066		;  const _80  =  $80
   1848  f46b
   1849  f46b				   .L067		;  const _82  =  $82
   1850  f46b
   1851  f46b				   .L068		;  const _84  =  $84
   1852  f46b
   1853  f46b				   .L069		;  const _86  =  $86
   1854  f46b
   1855  f46b				   .L070		;  const _88  =  $88
   1856  f46b
   1857  f46b				   .L071		;  const _8A  =  $8A
   1858  f46b
   1859  f46b				   .L072		;  const _8C  =  $8C
   1860  f46b
   1861  f46b				   .L073		;  const _8E  =  $8E
   1862  f46b
   1863  f46b				   .L074		;  const _90  =  $90
   1864  f46b
   1865  f46b				   .L075		;  const _92  =  $92
   1866  f46b
   1867  f46b				   .L076		;  const _94  =  $94
   1868  f46b
   1869  f46b				   .L077		;  const _96  =  $96
   1870  f46b
   1871  f46b				   .L078		;  const _98  =  $98
   1872  f46b
   1873  f46b				   .L079		;  const _9A  =  $9A
   1874  f46b
   1875  f46b				   .L080		;  const _9C  =  $9C
   1876  f46b
   1877  f46b				   .L081		;  const _9E  =  $9E
   1878  f46b
   1879  f46b				   .L082		;  const _A0  =  $A0
   1880  f46b
   1881  f46b				   .L083		;  const _A2  =  $A2
   1882  f46b
   1883  f46b				   .L084		;  const _A4  =  $A4
   1884  f46b
   1885  f46b				   .L085		;  const _A6  =  $A6
   1886  f46b
   1887  f46b				   .L086		;  const _A8  =  $A8
   1888  f46b
   1889  f46b				   .L087		;  const _AA  =  $AA
   1890  f46b
   1891  f46b				   .L088		;  const _AC  =  $AC
   1892  f46b
   1893  f46b				   .L089		;  const _AE  =  $AE
   1894  f46b
   1895  f46b				   .L090		;  const _B0  =  $B0
   1896  f46b
   1897  f46b				   .L091		;  const _B2  =  $B2
   1898  f46b
   1899  f46b				   .L092		;  const _B4  =  $B4
   1900  f46b
   1901  f46b				   .L093		;  const _B6  =  $B6
   1902  f46b
   1903  f46b				   .L094		;  const _B8  =  $B8
   1904  f46b
   1905  f46b				   .L095		;  const _BA  =  $BA
   1906  f46b
   1907  f46b				   .L096		;  const _BC  =  $BC
   1908  f46b
   1909  f46b				   .L097		;  const _BE  =  $BE
   1910  f46b
   1911  f46b				   .L098		;  const _C0  =  $C0
   1912  f46b
   1913  f46b				   .L099		;  const _C2  =  $C2
   1914  f46b
   1915  f46b				   .L0100		;  const _C4  =  $C4
   1916  f46b
   1917  f46b				   .L0101		;  const _C6  =  $C6
   1918  f46b
   1919  f46b				   .L0102		;  const _C8  =  $C8
   1920  f46b
   1921  f46b				   .L0103		;  const _CA  =  $CA
   1922  f46b
   1923  f46b				   .L0104		;  const _CC  =  $CC
   1924  f46b
   1925  f46b				   .L0105		;  const _CE  =  $CE
   1926  f46b
   1927  f46b				   .L0106		;  const _D0  =  $D0
   1928  f46b
   1929  f46b				   .L0107		;  const _D2  =  $D2
   1930  f46b
   1931  f46b				   .L0108		;  const _D4  =  $D4
   1932  f46b
   1933  f46b				   .L0109		;  const _D6  =  $D6
   1934  f46b
   1935  f46b				   .L0110		;  const _D8  =  $D8
   1936  f46b
   1937  f46b				   .L0111		;  const _DA  =  $DA
   1938  f46b
   1939  f46b				   .L0112		;  const _DC  =  $DC
   1940  f46b
   1941  f46b				   .L0113		;  const _DE  =  $DE
   1942  f46b
   1943  f46b				   .L0114		;  const _E0  =  $E0
   1944  f46b
   1945  f46b				   .L0115		;  const _E2  =  $E2
   1946  f46b
   1947  f46b				   .L0116		;  const _E4  =  $E4
   1948  f46b
   1949  f46b				   .L0117		;  const _E6  =  $E6
   1950  f46b
   1951  f46b				   .L0118		;  const _E8  =  $E8
   1952  f46b
   1953  f46b				   .L0119		;  const _EA  =  $EA
   1954  f46b
   1955  f46b				   .L0120		;  const _EC  =  $EC
   1956  f46b
   1957  f46b				   .L0121		;  const _EE  =  $EE
   1958  f46b
   1959  f46b				   .L0122		;  const _F0  =  $F0
   1960  f46b
   1961  f46b				   .L0123		;  const _F2  =  $F2
   1962  f46b
   1963  f46b				   .L0124		;  const _F4  =  $F4
   1964  f46b
   1965  f46b				   .L0125		;  const _F6  =  $F6
   1966  f46b
   1967  f46b				   .L0126		;  const _F8  =  $F8
   1968  f46b
   1969  f46b				   .L0127		;  const _FA  =  $FA
   1970  f46b
   1971  f46b				   .L0128		;  const _FC  =  $FC
   1972  f46b
   1973  f46b				   .L0129		;  const _FE  =  $FE
   1974  f46b
   1975  f46b				   .
   1976  f46b							; 
   1977  f46b
   1978  f46b				   .
   1979  f46b							; 
   1980  f46b
   1981  f46b				   .L0130		;  playfield:
   1982  f46b
   1983  f46b				  -	      ifconst	pfres
   1984  f46b				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1985  f46b					      else
   1986  f46b		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1987  f46d					      endif
   1988  f46d		       4c 9c f4 	      jmp	pflabel0
   1989  f470				   PF_data0
   1990  f470		       f0 00		      .byte.b	%11110000, %00000000
   1991  f472					      if	(pfwidth>2)
   1992  f472		       00 f8		      .byte.b	%00000000, %11111000
   1993  f474					      endif
   1994  f474		       f7 01		      .byte.b	%11110111, %00000001
   1995  f476					      if	(pfwidth>2)
   1996  f476		       00 f8		      .byte.b	%00000000, %11111000
   1997  f478					      endif
   1998  f478		       f7 01		      .byte.b	%11110111, %00000001
   1999  f47a					      if	(pfwidth>2)
   2000  f47a		       00 f8		      .byte.b	%00000000, %11111000
   2001  f47c					      endif
   2002  f47c		       f7 39		      .byte.b	%11110111, %00111001
   2003  f47e					      if	(pfwidth>2)
   2004  f47e		       00 f8		      .byte.b	%00000000, %11111000
   2005  f480					      endif
   2006  f480		       f7 39		      .byte.b	%11110111, %00111001
   2007  f482					      if	(pfwidth>2)
   2008  f482		       00 f8		      .byte.b	%00000000, %11111000
   2009  f484					      endif
   2010  f484		       f7 39		      .byte.b	%11110111, %00111001
   2011  f486					      if	(pfwidth>2)
   2012  f486		       00 f8		      .byte.b	%00000000, %11111000
   2013  f488					      endif
   2014  f488		       f7 39		      .byte.b	%11110111, %00111001
   2015  f48a					      if	(pfwidth>2)
   2016  f48a		       00 f8		      .byte.b	%00000000, %11111000
   2017  f48c					      endif
   2018  f48c		       f7 39		      .byte.b	%11110111, %00111001
   2019  f48e					      if	(pfwidth>2)
   2020  f48e		       00 f8		      .byte.b	%00000000, %11111000
   2021  f490					      endif
   2022  f490		       f7 01		      .byte.b	%11110111, %00000001
   2023  f492					      if	(pfwidth>2)
   2024  f492		       00 f8		      .byte.b	%00000000, %11111000
   2025  f494					      endif
   2026  f494		       f7 01		      .byte.b	%11110111, %00000001
   2027  f496					      if	(pfwidth>2)
   2028  f496		       00 f8		      .byte.b	%00000000, %11111000
   2029  f498					      endif
   2030  f498		       f0 00		      .byte.b	%11110000, %00000000
   2031  f49a					      if	(pfwidth>2)
   2032  f49a		       00 f8		      .byte.b	%00000000, %11111000
   2033  f49c					      endif
   2034  f49c				   pflabel0
   2035  f49c		       bd 70 f4 	      lda	PF_data0,x
   2036  f49f		       95 a4		      sta	playfield,x
   2037  f4a1		       ca		      dex
   2038  f4a2		       10 f8		      bpl	pflabel0
   2039  f4a4				   .
   2040  f4a4							; 
   2041  f4a4
   2042  f4a4				   .
   2043  f4a4							; 
   2044  f4a4
   2045  f4a4				   .L0131		;  COLUBK  =  _0E
   2046  f4a4
   2047  f4a4		       a9 0e		      LDA	#_0E
   2048  f4a6		       85 09		      STA	COLUBK
   2049  f4a8				   .
   2050  f4a8							; 
   2051  f4a8
   2052  f4a8				   .
   2053  f4a8							; 
   2054  f4a8
   2055  f4a8				   .
   2056  f4a8							; 
   2057  f4a8
   2058  f4a8				   .__Main_Loop
   2059  f4a8							; __Main_Loop
   2060  f4a8
   2061  f4a8				   .
   2062  f4a8							; 
   2063  f4a8
   2064  f4a8				   .
   2065  f4a8							; 
   2066  f4a8
   2067  f4a8				   .L0132		;  pfcolors:
   2068  f4a8
   2069  f4a8		       a9 00		      lda	# _00
   2070  f4aa		       85 08		      sta	COLUPF
   2071  f4ac				  -	      ifconst	pfres
   2072  f4ac				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   2073  f4ac					      else
   2074  f4ac		       a9 f4		      lda	#>(pfcolorlabel13-84)
   2075  f4ae					      endif
   2076  f4ae		       85 f1		      sta	pfcolortable+1
   2077  f4b0				  -	      ifconst	pfres
   2078  f4b0				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   2079  f4b0					      else
   2080  f4b0		       a9 66		      lda	#<(pfcolorlabel13-84)
   2081  f4b2					      endif
   2082  f4b2		       85 f0		      sta	pfcolortable
   2083  f4b4				   .
   2084  f4b4							; 
   2085  f4b4
   2086  f4b4				   .
   2087  f4b4							; 
   2088  f4b4
   2089  f4b4				   .
   2090  f4b4							; 
   2091  f4b4
   2092  f4b4				   .
   2093  f4b4							; 
   2094  f4b4
   2095  f4b4				   .
   2096  f4b4							; 
   2097  f4b4
   2098  f4b4				   .
   2099  f4b4							; 
   2100  f4b4
   2101  f4b4				   .
   2102  f4b4							; 
   2103  f4b4
   2104  f4b4				   .L0133		;  drawscreen
   2105  f4b4
   2106  f4b4		       20 cb f3 	      jsr	drawscreen
   2107  f4b7				   .
   2108  f4b7							; 
   2109  f4b7
   2110  f4b7				   .
   2111  f4b7							; 
   2112  f4b7
   2113  f4b7				   .
   2114  f4b7							; 
   2115  f4b7
   2116  f4b7				   .L0134		;  goto __Main_Loop
   2117  f4b7
   2118  f4b7		       4c a8 f4 	      jmp	.__Main_Loop
   2119  f4ba
   2120  f4ba				   .
   2121  f4ba							; 
   2122  f4ba
   2123  f4ba				   .
   2124  f4ba							; 
   2125  f4ba
   2126  f4ba				  -	      ifconst	pfres
   2127  f4ba				  -	      if	(<*) > (254-pfres*pfwidth)
   2128  f4ba				  -	      align	256
   2129  f4ba				  -	      endif
   2130  f4ba				  -	      if	(<*) < (136-pfres*pfwidth)
   2131  f4ba				  -	      repeat	((136-pfres*pfwidth)-(<*))
   2132  f4ba				  -	      .byte	0
   2133  f4ba				  -	      repend
   2134  f4ba				  -	      endif
   2135  f4ba					      else
   2136  f4ba				  -	      if	(<*) > 206
   2137  f4ba				  -	      align	256
   2138  f4ba					      endif
   2139  f4ba				  -	      if	(<*) < 88
   2140  f4ba				  -	      repeat	(88-(<*))
   2141  f4ba				  -	      .byte	0
   2142  f4ba				  -	      repend
   2143  f4ba					      endif
   2144  f4ba					      endif
   2145  f4ba				   pfcolorlabel13
   2146  f4ba		       00 00 00 00	      .byte.b	_00,0,0,0
   2147  f4be		       00 00 00 00	      .byte.b	_00,0,0,0
   2148  f4c2		       00 00 00 00	      .byte.b	_00,0,0,0
   2149  f4c6		       00 00 00 00	      .byte.b	_00,0,0,0
   2150  f4ca		       00 00 00 00	      .byte.b	_00,0,0,0
   2151  f4ce		       00 00 00 00	      .byte.b	_00,0,0,0
   2152  f4d2		       00 00 00 00	      .byte.b	_00,0,0,0
   2153  f4d6		       00 00 00 00	      .byte.b	_00,0,0,0
   2154  f4da		       00 00 00 00	      .byte.b	_00,0,0,0
   2155  f4de		       00 00 00 00	      .byte.b	_00,0,0,0
   2156  f4e2		       00 00 00 00	      .byte.b	_00,0,0,0
   2157  f4e6					      if	ECHOFIRST
      2742 bytes of ROM space left
   2158  f4e6					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2159  f4e6					      endif
   2160  f4e6		       00 01	   ECHOFIRST  =	1
   2161  f4e6
   2162  f4e6
   2163  f4e6
   2164  f4e6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2165  f4e6
   2166  f4e6							; feel free to modify the score graphics - just keep each digit 8 high
   2167  f4e6							; and keep the conditional compilation stuff intact
   2168  f4e6				  -	      ifconst	ROM2k
   2169  f4e6				  -	      ORG	$F7AC-8
   2170  f4e6					      else
   2171  f4e6				  -	      ifconst	bankswitch
   2172  f4e6				  -	      if	bankswitch == 8
   2173  f4e6				  -	      ORG	$2F94-bscode_length
   2174  f4e6				  -	      RORG	$FF94-bscode_length
   2175  f4e6				  -	      endif
   2176  f4e6				  -	      if	bankswitch == 16
   2177  f4e6				  -	      ORG	$4F94-bscode_length
   2178  f4e6				  -	      RORG	$FF94-bscode_length
   2179  f4e6				  -	      endif
   2180  f4e6				  -	      if	bankswitch == 32
   2181  f4e6				  -	      ORG	$8F94-bscode_length
   2182  f4e6				  -	      RORG	$FF94-bscode_length
   2183  f4e6				  -	      endif
   2184  f4e6				  -	      if	bankswitch == 64
   2185  f4e6				  -	      ORG	$10F80-bscode_length
   2186  f4e6				  -	      RORG	$1FF80-bscode_length
   2187  f4e6				  -	      endif
   2188  f4e6					      else
   2189  ff9c					      ORG	$FF9C
   2190  ff9c					      endif
   2191  ff9c					      endif
   2192  ff9c
   2193  ff9c							; font equates
   2194  ff9c		       00 01	   .21stcentury =	1
   2195  ff9c		       00 02	   alarmclock =	2
   2196  ff9c		       00 03	   handwritten =	3
   2197  ff9c		       00 04	   interrupted =	4
   2198  ff9c		       00 05	   retroputer =	5
   2199  ff9c		       00 06	   whimsey    =	6
   2200  ff9c		       00 07	   tiny       =	7
   2201  ff9c		       00 08	   hex	      =	8
   2202  ff9c
   2203  ff9c				  -	      ifconst	font
   2204  ff9c				  -	      if	font == hex
   2205  ff9c				  -	      ORG	. - 48
   2206  ff9c				  -	      endif
   2207  ff9c					      endif
   2208  ff9c
   2209  ff9c				   scoretable
   2210  ff9c
   2211  ff9c				  -	      ifconst	font
   2212  ff9c				  -	      if	font == .21stcentury
   2213  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2214  ff9c				  -	      endif
   2215  ff9c				  -	      if	font == alarmclock
   2216  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2217  ff9c				  -	      endif
   2218  ff9c				  -	      if	font == handwritten
   2219  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2220  ff9c				  -	      endif
   2221  ff9c				  -	      if	font == interrupted
   2222  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2223  ff9c				  -	      endif
   2224  ff9c				  -	      if	font == retroputer
   2225  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2226  ff9c				  -	      endif
   2227  ff9c				  -	      if	font == whimsey
   2228  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2229  ff9c				  -	      endif
   2230  ff9c				  -	      if	font == tiny
   2231  ff9c				  -	      include	"score_graphics.asm.tiny"
   2232  ff9c				  -	      endif
   2233  ff9c				  -	      if	font == hex
   2234  ff9c				  -	      include	"score_graphics.asm.hex"
   2235  ff9c				  -	      endif
   2236  ff9c					      else		; default font
   2237  ff9c
   2238  ff9c		       3c		      .byte.b	%00111100
   2239  ff9d		       66		      .byte.b	%01100110
   2240  ff9e		       66		      .byte.b	%01100110
   2241  ff9f		       66		      .byte.b	%01100110
   2242  ffa0		       66		      .byte.b	%01100110
   2243  ffa1		       66		      .byte.b	%01100110
   2244  ffa2		       66		      .byte.b	%01100110
   2245  ffa3		       3c		      .byte.b	%00111100
   2246  ffa4
   2247  ffa4		       7e		      .byte.b	%01111110
   2248  ffa5		       18		      .byte.b	%00011000
   2249  ffa6		       18		      .byte.b	%00011000
   2250  ffa7		       18		      .byte.b	%00011000
   2251  ffa8		       18		      .byte.b	%00011000
   2252  ffa9		       38		      .byte.b	%00111000
   2253  ffaa		       18		      .byte.b	%00011000
   2254  ffab		       08		      .byte.b	%00001000
   2255  ffac
   2256  ffac		       7e		      .byte.b	%01111110
   2257  ffad		       60		      .byte.b	%01100000
   2258  ffae		       60		      .byte.b	%01100000
   2259  ffaf		       3c		      .byte.b	%00111100
   2260  ffb0		       06		      .byte.b	%00000110
   2261  ffb1		       06		      .byte.b	%00000110
   2262  ffb2		       46		      .byte.b	%01000110
   2263  ffb3		       3c		      .byte.b	%00111100
   2264  ffb4
   2265  ffb4		       3c		      .byte.b	%00111100
   2266  ffb5		       46		      .byte.b	%01000110
   2267  ffb6		       06		      .byte.b	%00000110
   2268  ffb7		       06		      .byte.b	%00000110
   2269  ffb8		       1c		      .byte.b	%00011100
   2270  ffb9		       06		      .byte.b	%00000110
   2271  ffba		       46		      .byte.b	%01000110
   2272  ffbb		       3c		      .byte.b	%00111100
   2273  ffbc
   2274  ffbc		       0c		      .byte.b	%00001100
   2275  ffbd		       0c		      .byte.b	%00001100
   2276  ffbe		       7e		      .byte.b	%01111110
   2277  ffbf		       4c		      .byte.b	%01001100
   2278  ffc0		       4c		      .byte.b	%01001100
   2279  ffc1		       2c		      .byte.b	%00101100
   2280  ffc2		       1c		      .byte.b	%00011100
   2281  ffc3		       0c		      .byte.b	%00001100
   2282  ffc4
   2283  ffc4		       3c		      .byte.b	%00111100
   2284  ffc5		       46		      .byte.b	%01000110
   2285  ffc6		       06		      .byte.b	%00000110
   2286  ffc7		       06		      .byte.b	%00000110
   2287  ffc8		       3c		      .byte.b	%00111100
   2288  ffc9		       60		      .byte.b	%01100000
   2289  ffca		       60		      .byte.b	%01100000
   2290  ffcb		       7e		      .byte.b	%01111110
   2291  ffcc
   2292  ffcc		       3c		      .byte.b	%00111100
   2293  ffcd		       66		      .byte.b	%01100110
   2294  ffce		       66		      .byte.b	%01100110
   2295  ffcf		       66		      .byte.b	%01100110
   2296  ffd0		       7c		      .byte.b	%01111100
   2297  ffd1		       60		      .byte.b	%01100000
   2298  ffd2		       62		      .byte.b	%01100010
   2299  ffd3		       3c		      .byte.b	%00111100
   2300  ffd4
   2301  ffd4		       30		      .byte.b	%00110000
   2302  ffd5		       30		      .byte.b	%00110000
   2303  ffd6		       30		      .byte.b	%00110000
   2304  ffd7		       18		      .byte.b	%00011000
   2305  ffd8		       0c		      .byte.b	%00001100
   2306  ffd9		       06		      .byte.b	%00000110
   2307  ffda		       42		      .byte.b	%01000010
   2308  ffdb		       3e		      .byte.b	%00111110
   2309  ffdc
   2310  ffdc		       3c		      .byte.b	%00111100
   2311  ffdd		       66		      .byte.b	%01100110
   2312  ffde		       66		      .byte.b	%01100110
   2313  ffdf		       66		      .byte.b	%01100110
   2314  ffe0		       3c		      .byte.b	%00111100
   2315  ffe1		       66		      .byte.b	%01100110
   2316  ffe2		       66		      .byte.b	%01100110
   2317  ffe3		       3c		      .byte.b	%00111100
   2318  ffe4
   2319  ffe4		       3c		      .byte.b	%00111100
   2320  ffe5		       46		      .byte.b	%01000110
   2321  ffe6		       06		      .byte.b	%00000110
   2322  ffe7		       3e		      .byte.b	%00111110
   2323  ffe8		       66		      .byte.b	%01100110
   2324  ffe9		       66		      .byte.b	%01100110
   2325  ffea		       66		      .byte.b	%01100110
   2326  ffeb		       3c		      .byte.b	%00111100
   2327  ffec
   2328  ffec					      ifnconst	DPC_kernel_options
   2329  ffec
   2330  ffec		       00		      .byte.b	%00000000
   2331  ffed		       00		      .byte.b	%00000000
   2332  ffee		       00		      .byte.b	%00000000
   2333  ffef		       00		      .byte.b	%00000000
   2334  fff0		       00		      .byte.b	%00000000
   2335  fff1		       00		      .byte.b	%00000000
   2336  fff2		       00		      .byte.b	%00000000
   2337  fff3		       00		      .byte.b	%00000000
   2338  fff4
   2339  fff4					      endif
   2340  fff4
   2341  fff4					      endif
   2342  fff4
   2343  fff4				  -	      ifconst	ROM2k
   2344  fff4				  -	      ORG	$F7FC
   2345  fff4					      else
   2346  fff4				  -	      ifconst	bankswitch
   2347  fff4				  -	      if	bankswitch == 8
   2348  fff4				  -	      ORG	$2FF4-bscode_length
   2349  fff4				  -	      RORG	$FFF4-bscode_length
   2350  fff4				  -	      endif
   2351  fff4				  -	      if	bankswitch == 16
   2352  fff4				  -	      ORG	$4FF4-bscode_length
   2353  fff4				  -	      RORG	$FFF4-bscode_length
   2354  fff4				  -	      endif
   2355  fff4				  -	      if	bankswitch == 32
   2356  fff4				  -	      ORG	$8FF4-bscode_length
   2357  fff4				  -	      RORG	$FFF4-bscode_length
   2358  fff4				  -	      endif
   2359  fff4				  -	      if	bankswitch == 64
   2360  fff4				  -	      ORG	$10FE0-bscode_length
   2361  fff4				  -	      RORG	$1FFE0-bscode_length
   2362  fff4				  -	      endif
   2363  fff4					      else
   2364  fffc					      ORG	$FFFC
   2365  fffc					      endif
   2366  fffc					      endif
   2367  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2368  fffc
   2369  fffc				  -	      ifconst	bankswitch
   2370  fffc				  -	      if	bankswitch == 8
   2371  fffc				  -	      ORG	$2FFC
   2372  fffc				  -	      RORG	$FFFC
   2373  fffc				  -	      endif
   2374  fffc				  -	      if	bankswitch == 16
   2375  fffc				  -	      ORG	$4FFC
   2376  fffc				  -	      RORG	$FFFC
   2377  fffc				  -	      endif
   2378  fffc				  -	      if	bankswitch == 32
   2379  fffc				  -	      ORG	$8FFC
   2380  fffc				  -	      RORG	$FFFC
   2381  fffc				  -	      endif
   2382  fffc				  -	      if	bankswitch == 64
   2383  fffc				  -	      ORG	$10FF0
   2384  fffc				  -	      RORG	$1FFF0
   2385  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2386  fffc				  -	      ORG	$10FF8
   2387  fffc				  -	      RORG	$1FFF8
   2388  fffc				  -	      ifconst	superchip
   2389  fffc				  -	      .byte	"E","F","S","C"
   2390  fffc				  -	      else
   2391  fffc				  -	      .byte	"E","F","E","F"
   2392  fffc				  -	      endif
   2393  fffc				  -	      ORG	$10FFC
   2394  fffc				  -	      RORG	$1FFFC
   2395  fffc				  -	      endif
   2396  fffc					      else
   2397  fffc				  -	      ifconst	ROM2k
   2398  fffc				  -	      ORG	$F7FC
   2399  fffc					      else
   2400  fffc					      ORG	$FFFC
   2401  fffc					      endif
   2402  fffc					      endif
   2403  fffc		       00 f0		      .word.w	(start & $ffff)
   2404  fffe		       00 f0		      .word.w	(start & $ffff)

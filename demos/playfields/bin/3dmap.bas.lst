------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\3dmap.bas.asm LEVEL 1 PASS 3
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"vcs.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; VCS.H
      4  8400 ????						; Version 1.05, 13/November/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_VCS =	105
      7  8400 ????
      8  8400 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines hardware registers and memory mapping for the
     13  8400 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  8400 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  8400 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  8400 ????						; with your views.  Please contribute, if you think you can improve this
     21  8400 ????						; file!
     22  8400 ????						;
     23  8400 ????						; Latest Revisions...
     24  8400 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  8400 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  8400 ????						;			    This will allow conditional code to verify VCS.H being
     27  8400 ????						;			    used for code assembly.
     28  8400 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  8400 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  8400 ????						;			 mirrored reading/writing differences.	This is more a 
     31  8400 ????						;			 readability issue, and binary compatibility with disassembled
     32  8400 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  8400 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  8400 ????						;			 which was broken by the use of segments in this file, as
     35  8400 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  8400 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  8400 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  8400 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  8400 ????						;						   it is safe to leave it undefined, and the base address will
     40  8400 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  8400 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  8400 ????						;			  - register definitions are now generated through assignment
     43  8400 ????						;			    in uninitialised segments.	This allows a changeable base
     44  8400 ????						;			    address architecture.
     45  8400 ????						; 1.0	22/MAR/2003		Initial release
     46  8400 ????
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????
     50  8400 ????						; TIA_BASE_ADDRESS
     51  8400 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  8400 ????						; Normally 0, the base address should (externally, before including this file)
     53  8400 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  8400 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  8400 ????						; < $40 as a bankswitch.
     56  8400 ????
     57  8400 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  8400 ????			  -TIA_BASE_ADDRESS =	0
     59  8400 ????				      ENDIF
     60  8400 ????
     61  8400 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  8400 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  8400 ????						; *OR* by declaring the label before including this file, eg:
     64  8400 ????						; TIA_BASE_ADDRESS = $40
     65  8400 ????						;   include "vcs.h"
     66  8400 ????
     67  8400 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  8400 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  8400 ????						; for the mirrored ROM hardware registers.
     70  8400 ????
     71  8400 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  8400 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  8400 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  8400 ????
     75  8400 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  8400 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  8400 ????				      ENDIF
     78  8400 ????
     79  8400 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  8400 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  8400 ????				      ENDIF
     82  8400 ????
     83  8400 ????						;-------------------------------------------------------------------------------
     84  8400 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  8400 ????				      SEG
    201  8400 ????
    202  8400 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\3dmap.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  8400 ????				      include	"macro.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; MACRO.H
      4  8400 ????						; Version 1.05, 13/NOVEMBER/2003
      5  8400 ????
      6  8400 ????	       00 69	   VERSION_MACRO =	105
      7  8400 ????
      8  8400 ????						;
      9  8400 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  8400 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  8400 ????						;
     12  8400 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  8400 ????						; It is distributed as a companion machine-specific support package
     14  8400 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  8400 ????						; available at at http://www.atari2600.org/dasm
     16  8400 ????						;
     17  8400 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  8400 ????						; contents, or would like to add something, please write to me
     19  8400 ????						; (atari2600@taswegian.com) with your contribution.
     20  8400 ????						;
     21  8400 ????						; Latest Revisions...
     22  8400 ????						;
     23  8400 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  8400 ????						;			    This will allow conditional code to verify MACRO.H being
     25  8400 ????						;			    used for code assembly.
     26  8400 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  8400 ????						;
     28  8400 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  8400 ????						;
     30  8400 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  8400 ????						;			   (standardised macro for vertical synch code)
     32  8400 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  8400 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  8400 ????						; 1.0	22/MAR/2003		Initial release
     35  8400 ????
     36  8400 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  8400 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  8400 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  8400 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  8400 ????						;   registers and require them to be defined first).
     41  8400 ????
     42  8400 ????						; Available macros...
     43  8400 ????						;   SLEEP n		 - sleep for n cycles
     44  8400 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  8400 ????						;   CLEAN_START	 - set machine to known state on startup
     46  8400 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  8400 ????
     48  8400 ????						;-------------------------------------------------------------------------------
     49  8400 ????						; SLEEP duration
     50  8400 ????						; Original author: Thomas Jentzsch
     51  8400 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  8400 ????						; useful for code where precise timing is required.
     53  8400 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  8400 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  8400 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  8400 ????
     57  8400 ????				      MAC	sleep
     58  8400 ????			   .CYCLES    SET	{1}
     59  8400 ????
     60  8400 ????				      IF	.CYCLES < 2
     61  8400 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  8400 ????				      ERR
     63  8400 ????				      ENDIF
     64  8400 ????
     65  8400 ????				      IF	.CYCLES & 1
     66  8400 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  8400 ????				      nop	0
     68  8400 ????				      ELSE
     69  8400 ????				      bit	VSYNC
     70  8400 ????				      ENDIF
     71  8400 ????			   .CYCLES    SET	.CYCLES - 3
     72  8400 ????				      ENDIF
     73  8400 ????
     74  8400 ????				      REPEAT	.CYCLES / 2
     75  8400 ????				      nop
     76  8400 ????				      REPEND
     77  8400 ????				      ENDM		;usage: SLEEP n (n>1)
     78  8400 ????
     79  8400 ????						;-------------------------------------------------------------------------------
     80  8400 ????						; VERTICAL_SYNC
     81  8400 ????						; Original author: Manuel Polik
     82  8400 ????						; Inserts the code required for a proper 3 scannline 
     83  8400 ????						; vertical sync sequence
     84  8400 ????						;
     85  8400 ????						; Note: Alters the accumulator
     86  8400 ????						;
     87  8400 ????						; IN:
     88  8400 ????						; OUT: A = 1
     89  8400 ????
     90  8400 ????				      MAC	vertical_sync
     91  8400 ????				      LDA	#$02	; A = VSYNC enable
     92  8400 ????				      STA	WSYNC	; Finish current line
     93  8400 ????				      STA	VSYNC	; Start vertical sync
     94  8400 ????				      STA	WSYNC	; 1st line vertical sync
     95  8400 ????				      STA	WSYNC	; 2nd line vertical sync
     96  8400 ????				      LSR		; A = VSYNC disable
     97  8400 ????				      STA	WSYNC	; 3rd line vertical sync
     98  8400 ????				      STA	VSYNC	; Stop vertical sync
     99  8400 ????				      ENDM
    100  8400 ????
    101  8400 ????						;-------------------------------------------------------------------------------
    102  8400 ????						; CLEAN_START
    103  8400 ????						; Original author: Andrew Davie
    104  8400 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  8400 ????						; Sets stack pointer to $FF, and all registers to 0
    106  8400 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  8400 ????						; Use as very first section of code on boot (ie: at reset)
    108  8400 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  8400 ????
    110  8400 ????				      MAC	clean_start
    111  8400 ????				      sei
    112  8400 ????				      cld
    113  8400 ????
    114  8400 ????				      ldx	#0
    115  8400 ????				      txa
    116  8400 ????				      tay
    117  8400 ????			   .CLEAR_STACK dex
    118  8400 ????				      txs
    119  8400 ????				      pha
    120  8400 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  8400 ????
    122  8400 ????				      ENDM
    123  8400 ????
    124  8400 ????						;-------------------------------------------------------
    125  8400 ????						; SET_POINTER
    126  8400 ????						; Original author: Manuel Rotschkar
    127  8400 ????						;
    128  8400 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  8400 ????						;
    130  8400 ????						; Usage: SET_POINTER pointer, address
    131  8400 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  8400 ????						;
    133  8400 ????						; Note: Alters the accumulator, NZ flags
    134  8400 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  8400 ????						; IN 2: absolute address
    136  8400 ????
    137  8400 ????				      MAC	set_pointer
    138  8400 ????			   .POINTER   SET	{1}
    139  8400 ????			   .ADDRESS   SET	{2}
    140  8400 ????
    141  8400 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  8400 ????				      STA	.POINTER	; Store in pointer
    143  8400 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  8400 ????				      STA	.POINTER+1	; Store in pointer+1
    145  8400 ????
    146  8400 ????				      ENDM
    147  8400 ????
    148  8400 ????						; EOF
------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\3dmap.bas.asm
------- FILE DPCplus.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplus.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3  8400 ????						; DPCplus.H - Display Processor Chip Plus Definitions
      4  8400 ????						; Chris Walton, Fred Quimby, Darrell Spice 2010
      5  8400 ????						; Version 0.00
      6  8400 ????
      7  8400 ????						; DPC Base Address
      8  8400 ????			  -	      IFNCONST	DPC_BASE_ADDRESS
      9  8400 ????			  -DPC_BASE_ADDRESS =	$1000
     10  8400 ????				      ENDIF
     11  8400 ????
     12  8400 ????						; DPC Read Base
     13  8400 ????			  -	      IFNCONST	DPC_BASE_READ_ADDRESS
     14  8400 ????			  -DPC_BASE_READ_ADDRESS =	DPC_BASE_ADDRESS
     15  8400 ????				      ENDIF
     16  8400 ????
     17  8400 ????						; DPC Write Base
     18  8400 ????			  -	      IFNCONST	DPC_BASE_WRITE_ADDRESS
     19  8400 ????			  -DPC_BASE_WRITE_ADDRESS =	DPC_BASE_ADDRESS+$28
     20  8400 ????				      ENDIF
     21  8400 ????
     22 U1028 ????				      SEG.U	DPC_REGISTERS_READ
     23 U1000					      ORG	DPC_BASE_READ_ADDRESS
     24 U1000
     25 U1000							;****************************************
     26 U1000							; DPC+ Read Registers
     27 U1000							;****************************************
     28 U1000							;
     29 U1000							;----------------------------------------
     30 U1000							; Random Numbers
     31 U1000							;----------------------------------------
     32 U1000							; DPC+ provides a 32 bit LFSR (Linear feedback shift register)
     33 U1000							; which is used as a random number generator.	Each individual byte of the
     34 U1000							; random number will return values from 0-255.  The random numbers will follow
     35 U1000							; an exact sequence, so it's best to clock them at least once per frame even if 
     36 U1000							; you don't need the value (this allows the amount of time it takes the user to
     37 U1000							; start the game to select a random starting point in the sequence)
     38 U1000							;----------------------------------------
     39 U1000		       00	   RANDOM0NEXT DS	1	; $00 clock next 32 bit number and returns byte 0
     40 U1001		       00	   RANDOM0PRIOR DS	1	; $01 clock prior 32 bit number and returns byte 0
     41 U1002		       00	   RANDOM1    DS	1	; $02 returns byte 1 of random number w/out clock
     42 U1003		       00	   RANDOM2    DS	1	; $03 returns byte 2 of random number w/out clock
     43 U1004		       00	   RANDOM3    DS	1	; $04 returns byte 3 of random number w/out clock
     44 U1005
     45 U1005							;----------------------------------------
     46 U1005							; Music Fetcher
     47 U1005							;----------------------------------------
     48 U1005							; When generating music, this value must be read every single scanline and
     49 U1005							; stored into AUDV0.
     50 U1005							;----------------------------------------
     51 U1005		       00	   AMPLITUDE  DS	1	; $05
     52 U1006
     53 U1006							;----------------------------------------
     54 U1006							; Reserved
     55 U1006							;----------------------------------------
     56 U1006		       00		      DS	1	; $06
     57 U1007		       00		      DS	1	; $07
     58 U1008
     59 U1008							;----------------------------------------
     60 U1008							; Data Fetcher
     61 U1008							;----------------------------------------
     62 U1008							; There are 8 Data Fetchers which are used to access data stored in the Display
     63 U1008							; Data bank.  Before using, you must point the Data Fetcher at the data to read
     64 U1008							; via DFxLOW and DFxHI.  After each read the Data Fetcher will update to point
     65 U1008							; to the next byte of data to return.
     66 U1008							;
     67 U1008							; psuedo code* to point Data Fetcher 1 to the color data
     68 U1008							;	lda #<(ColorDataPosition - HowFarDownScreen)
     69 U1008							;	sta DF1LOW
     70 U1008							;	lda #>(ColorDataPosition - HowFarDownScreen)
     71 U1008							;	sta DF1HI 
     72 U1008							;	....
     73 U1008							; then in the kernel read the Data Fetcher and update the color, takes 7 cycles
     74 U1008							;	LDA DF1DATA
     75 U1008							;	STA COLUP0
     76 U1008							;
     77 U1008							; * see DPCplus.asm for actual code
     78 U1008							;----------------------------------------
     79 U1008		       00	   DF0DATA    DS	1	; $08
     80 U1009		       00	   DF1DATA    DS	1	; $09
     81 U100a		       00	   DF2DATA    DS	1	; $0A
     82 U100b		       00	   DF3DATA    DS	1	; $0B
     83 U100c		       00	   DF4DATA    DS	1	; $0C
     84 U100d		       00	   DF5DATA    DS	1	; $0D
     85 U100e		       00	   DF6DATA    DS	1	; $0E
     86 U100f		       00	   DF7DATA    DS	1	; $0F
     87 U1010
     88 U1010							;----------------------------------------
     89 U1010							; Data Fetcher, Windowed
     90 U1010							;----------------------------------------
     91 U1010							; The 8 Data Fetchers can also be read in a "windowed" mode, which is most
     92 U1010							; commonly used to update sprites.  To use windowed mode, point the Data
     93 U1010							; Fetcher the same as above, but then also set the Top and Bottom of the
     94 U1010							; Window using DFxTOP and DFxBOT.  When reading via the DFxDATAW registers, a 0
     95 U1010							; value will be returned for anything that's outside of the window.
     96 U1010							;
     97 U1010							; psuedo code to point Data Fetcher0 to the sprite data
     98 U1010							;	lda #<(SpriteDataPosition - HowFarDownScreen)
     99 U1010							;	sta DF0LOW
    100 U1010							;	lda #>(SpriteDataPosition - HowFarDownScreen)
    101 U1010							;	sta DF0HI
    102 U1010							;	
    103 U1010							; set the window for Data Fetcher 0
    104 U1010							;	lda #<(SpriteDataPosition - 1)
    105 U1010							;	sta DF0TOP
    106 U1010							;	lda #<(SpriteDataPosition + ImageHeight)
    107 U1010							;	sta DF0BOT
    108 U1010							;	....
    109 U1010							; then in the kernel read the Data Fetcher and update the sprite, takes 7 cycles
    110 U1010							;	LDA DF0DATAW
    111 U1010							;	STA GRP0
    112 U1010							;----------------------------------------
    113 U1010		       00	   DF0DATAW   DS	1	; $10
    114 U1011		       00	   DF1DATAW   DS	1	; $11
    115 U1012		       00	   DF2DATAW   DS	1	; $12
    116 U1013		       00	   DF3DATAW   DS	1	; $13
    117 U1014		       00	   DF4DATAW   DS	1	; $14
    118 U1015		       00	   DF5DATAW   DS	1	; $15
    119 U1016		       00	   DF6DATAW   DS	1	; $16
    120 U1017		       00	   DF7DATAW   DS	1	; $17
    121 U1018
    122 U1018							;----------------------------------------
    123 U1018							; Fractional Data Fetcher
    124 U1018							;----------------------------------------
    125 U1018							; Another 8 Data Fetchers exist which work differently than the first 8.
    126 U1018							; These allow you to fractionally increment the Data Fetcher so a single
    127 U1018							; value can be read a set number of times before advancing to the next value.
    128 U1018							; This is commonly used to draw asymmetrical playfields without needing to 
    129 U1018							; use 1200 bytes of data (200 scanlines * 6 playfield updates).
    130 U1018							; Before using, you must point the Fractional Data Fetcher at the data to read
    131 U1018							; via DFxFRACLOW and DFxFRACHI.  You must also set the increment value via
    132 U1018							; DFxFRACINC.
    133 U1018							;
    134 U1018							; Set pointer
    135 U1018							;	LDA #<PlayfieldPF0l
    136 U1018							;	STA DF0FRACLOW
    137 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    138 U1018							;	lda #>PlayFieldPF0l
    139 U1018							;	STA DF0FRACHI
    140 U1018							;	... repeat for PF1l, PF2l, PF0r, PF1r and PF2r
    141 U1018							; Set the increment to repeat the value for x reads
    142 U1018							;	LDA #(256/x)
    143 U1018							;	STA DF0FRACINC
    144 U1018							;	 STA DF1FRACINC
    145 U1018							;	... repeat for 2-5
    146 U1018							;
    147 U1018							; Special Condition - IF you want to increment the pointer after every read 
    148 U1018							; (just like the normal Data Fetcher), then use the following to set the
    149 U1018							; increment AND prime the Fractional Data Fetcher
    150 U1018							;	LDA #255
    151 U1018							;	STA DF0FRACINC
    152 U1018							;	 STA DF1FRACINC
    153 U1018							;	... repeat for 2-5
    154 U1018							;	LDA DF0FRACDATA - priming read (first value will be read twice)
    155 U1018							;	LDA DF1FRACDATA - priming read (first value will be read twice)
    156 U1018							;	... repeat for 2-5
    157 U1018							;
    158 U1018							; then in the kernel read the Fractional Data Fetchers and update the playfield
    159 U1018							;	LDA DF0FRACDATA
    160 U1018							;	STA PF0
    161 U1018							;	LDA PF1FRACDATA
    162 U1018							;	STA PF1
    163 U1018							;	... repeat for Data Fetchers 2-5, putting them in PF2, PF0, PF1 and PF2
    164 U1018							;----------------------------------------
    165 U1018		       00	   DF0FRACDATA DS	1	; $18
    166 U1019		       00	   DF1FRACDATA DS	1	; $19
    167 U101a		       00	   DF2FRACDATA DS	1	; $1A
    168 U101b		       00	   DF3FRACDATA DS	1	; $1B
    169 U101c		       00	   DF4FRACDATA DS	1	; $1C
    170 U101d		       00	   DF5FRACDATA DS	1	; $1D
    171 U101e		       00	   DF6FRACDATA DS	1	; $1E
    172 U101f		       00	   DF7FRACDATA DS	1	; $1F
    173 U1020
    174 U1020							;----------------------------------------
    175 U1020							; Data Fetcher Window Flag
    176 U1020							;----------------------------------------
    177 U1020							; The Data Fetcher Window Flag allows you to dual-purpose the first four
    178 U1020							; Data Fetchers.  The Window is not required when a Data Fetcher is used to
    179 U1020							; update a sprite's color.  The Flag will return $FF if it's within the window,
    180 U1020							; or 0 if it's not - this value can be used to control the display of the ball
    181 U1020							; and missiles. The Data Fetcher will NOT increment when reading the flag.
    182 U1020							;
    183 U1020							; psuedo code to point Data Fetcher 1 to the color data
    184 U1020							;	lda #<(ColorDataPosition - HowFarDownScreen)
    185 U1020							;	sta DF1LOW
    186 U1020							;	lda #>(ColorDataPosition - HowFarDownScreen)
    187 U1020							;	sta DF1HI
    188 U1020							;
    189 U1020							; set the window based on the missile's Y position and height (number of
    190 U1020							; scanlines to draw missile on)
    191 U1020							;	lda #<(ColorDataPosition + MissileYposition - 1)
    192 U1020							;	sta DF1TOP
    193 U1020							;	lda #<(ColorDataPosition + MissileYposition + MissileHeight)
    194 U1020							;	sta DF1BOT
    195 U1020							;
    196 U1020							; then in the kernel read the Data Fetcher and update the color, then read the
    197 U1020							; flag and update the missile
    198 U1020							;	LDA DF1DATA
    199 U1020							;	STA COLUP0
    200 U1020							;	LDA DF1FLAG
    201 U1020							;	STA ENAM0
    202 U1020							;----------------------------------------
    203 U1020		       00	   DF0FLAG    DS	1	; $20
    204 U1021		       00	   DF1FLAG    DS	1	; $21
    205 U1022		       00	   DF2FLAG    DS	1	; $22
    206 U1023		       00	   DF3FLAG    DS	1	; $23
    207 U1024
    208 U1024							;----------------------------------------
    209 U1024							; Reserved
    210 U1024							;----------------------------------------
    211 U1024		       00		      DS	1	; $24
    212 U1025		       00		      DS	1	; $25
    213 U1026		       00		      DS	1	; $26
    214 U1027		       00		      DS	1	; $27
    215 U1028
    216 U1028
    217 U1080 ????				      SEG.U	DPC_REGISTERS_WRITE
    218 U1028					      ORG	DPC_BASE_WRITE_ADDRESS
    219 U1028
    220 U1028							;****************************************
    221 U1028							; SECTION 2 - DPC+ Write Registers
    222 U1028							;****************************************
    223 U1028							;
    224 U1028							;----------------------------------------
    225 U1028							; Fractional Data Fetcher, Low Pointer
    226 U1028							;----------------------------------------
    227 U1028							; These are used in conjunction with DFxFRACHI to point a Fractional Data
    228 U1028							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    229 U1028							; in SECTION 1.
    230 U1028							;----------------------------------------
    231 U1028		       00	   DF0FRACLOW DS	1	; $28
    232 U1029		       00	   DF1FRACLOW DS	1	; $29
    233 U102a		       00	   DF2FRACLOW DS	1	; $2A
    234 U102b		       00	   DF3FRACLOW DS	1	; $2B
    235 U102c		       00	   DF4FRACLOW DS	1	; $2C
    236 U102d		       00	   DF5FRACLOW DS	1	; $2D
    237 U102e		       00	   DF6FRACLOW DS	1	; $2E
    238 U102f		       00	   DF7FRACLOW DS	1	; $2F
    239 U1030
    240 U1030							;----------------------------------------
    241 U1030							; Fractional Data Fetcher, High Pointer
    242 U1030							;----------------------------------------
    243 U1030							; These are used in conjunction with DFxFRACLOW to point a Fractional Data
    244 U1030							; Fetcher to the data to read.  For usage, see "Fractional Data Fetcher"
    245 U1030							; in SECTION 1.
    246 U1030							;
    247 U1030							; NOTE: for only the lower 4 bits are used.
    248 U1030							;----------------------------------------
    249 U1030		       00	   DF0FRACHI  DS	1	; $30
    250 U1031		       00	   DF1FRACHI  DS	1	; $31
    251 U1032		       00	   DF2FRACHI  DS	1	; $32
    252 U1033		       00	   DF3FRACHI  DS	1	; $33
    253 U1034		       00	   DF4FRACHI  DS	1	; $34
    254 U1035		       00	   DF5FRACHI  DS	1	; $35 
    255 U1036		       00	   DF6FRACHI  DS	1	; $36 
    256 U1037		       00	   DF7FRACHI  DS	1	; $37 
    257 U1038
    258 U1038							;----------------------------------------
    259 U1038							; Fractional Data Fetcher, Increment
    260 U1038							;----------------------------------------
    261 U1038							; These are used to set the increment amount for the Fractional Data Fetcher.
    262 U1038							; To increment pointer after every Xth read use int(256/X)
    263 U1038							; For usage, see "Fractional Data Fetcher" in SECTION 1.
    264 U1038							;----------------------------------------
    265 U1038		       00	   DF0FRACINC DS	1	; $38
    266 U1039		       00	   DF1FRACINC DS	1	; $39
    267 U103a		       00	   DF2FRACINC DS	1	; $3A
    268 U103b		       00	   DF3FRACINC DS	1	; $3B
    269 U103c		       00	   DF4FRACINC DS	1	; $3C
    270 U103d		       00	   DF5FRACINC DS	1	; $3D
    271 U103e		       00	   DF6FRACINC DS	1	; $3E
    272 U103f		       00	   DF7FRACINC DS	1	; $3F
    273 U1040
    274 U1040							;----------------------------------------
    275 U1040							; Data Fetcher, Window Top
    276 U1040							;----------------------------------------
    277 U1040							; These are used with DFxBOT to define the Data Fetcher Window
    278 U1040							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    279 U1040							;----------------------------------------
    280 U1040		       00	   DF0TOP     DS	1	; $40
    281 U1041		       00	   DF1TOP     DS	1	; $41
    282 U1042		       00	   DF2TOP     DS	1	; $42
    283 U1043		       00	   DF3TOP     DS	1	; $43
    284 U1044		       00	   DF4TOP     DS	1	; $44
    285 U1045		       00	   DF5TOP     DS	1	; $45
    286 U1046		       00	   DF6TOP     DS	1	; $46
    287 U1047		       00	   DF7TOP     DS	1	; $47
    288 U1048
    289 U1048							;----------------------------------------
    290 U1048							; Data Fetcher, Window Bottom
    291 U1048							;----------------------------------------
    292 U1048							; These are used with DFxTOP to define the Data Fetcher Window
    293 U1048							; For usage, see "Data Fetcher, Windowed" in SECTION 1.
    294 U1048							;----------------------------------------
    295 U1048		       00	   DF0BOT     DS	1	; $48
    296 U1049		       00	   DF1BOT     DS	1	; $49
    297 U104a		       00	   DF2BOT     DS	1	; $4A
    298 U104b		       00	   DF3BOT     DS	1	; $4B
    299 U104c		       00	   DF4BOT     DS	1	; $4C
    300 U104d		       00	   DF5BOT     DS	1	; $4D
    301 U104e		       00	   DF6BOT     DS	1	; $4E
    302 U104f		       00	   DF7BOT     DS	1	; $4F
    303 U1050
    304 U1050							;----------------------------------------
    305 U1050							; Data Fetcher, Low Pointer
    306 U1050							;----------------------------------------
    307 U1050							; These are used in conjunction with DFxHI to point a Data Fetcher to the data
    308 U1050							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    309 U1050							;----------------------------------------
    310 U1050		       00	   DF0LOW     DS	1	; $50
    311 U1051		       00	   DF1LOW     DS	1	; $51
    312 U1052		       00	   DF2LOW     DS	1	; $52
    313 U1053		       00	   DF3LOW     DS	1	; $53
    314 U1054		       00	   DF4LOW     DS	1	; $54
    315 U1055		       00	   DF5LOW     DS	1	; $55
    316 U1056		       00	   DF6LOW     DS	1	; $56
    317 U1057		       00	   DF7LOW     DS	1	; $57
    318 U1058
    319 U1058							;----------------------------------------
    320 U1058							; Fast Fetch Mode
    321 U1058							;----------------------------------------
    322 U1058							; Fast Fetch Mode enables the fastest way to read DPC+ registers.  Normal
    323 U1058							; reads use LDA Absolute addressing (LDA DF0DATA) which takes 4 cycles to
    324 U1058							; process.  Fast Fetch Mode intercepts LDA Immediate addressing (LDA #<DF0DATA)
    325 U1058							; which takes only 2 cycles!  Only immediate values < $28 are intercepted
    326 U1058							; 
    327 U1058							; set Fast Fetch Mode
    328 U1058							;	LDA #0
    329 U1058							;	STA FASTFETCH
    330 U1058							;
    331 U1058							; then use immediate mode to read the registers, takes just 5 cycles to update
    332 U1058							; any TIA register
    333 U1058							;
    334 U1058							;	LDA #<DF0DATA
    335 U1058							;	STA GRP0
    336 U1058							;
    337 U1058							; when done, turn off Fast Fetch Mode using any non-zero value
    338 U1058							;	LDA #$FF
    339 U1058							;	STA FASTFETCH
    340 U1058							;
    341 U1058							; NOTE: if you forget to turn off FASTFETCH mode, then code like this will not
    342 U1058							;	 work as you expect
    343 U1058							;	LDA #0	; returns a RANDOM NUMBER, not 0.
    344 U1058							;	STA COLUPF
    345 U1058							;----------------------------------------
    346 U1058		       00	   FASTFETCH  DS	1	; $58
    347 U1059
    348 U1059							;----------------------------------------
    349 U1059							; Function Support
    350 U1059							;----------------------------------------
    351 U1059							; Currently only Function 255 is defined, and it is used to call user
    352 U1059							; written ARM routines (or C code compiled for the ARM processor.)
    353 U1059							;
    354 U1059							; PARAMETER is not used by function 255, it may be used by future functions.
    355 U1059							; 
    356 U1059							; call custom ARM routine
    357 U1059							;	LDA #$FF
    358 U1059							;	STA CALLFUNCTION
    359 U1059							;
    360 U1059							; A custom ARM demo will be released in the near future
    361 U1059							;----------------------------------------
    362 U1059		       00	   PARAMETER  DS	1	; $59
    363 U105a		       00	   CALLFUNCTION DS	1	; $5A
    364 U105b
    365 U105b							;----------------------------------------
    366 U105b							; Reserved
    367 U105b							;----------------------------------------
    368 U105b		       00		      DS	1	; $5B	 ; reserved
    369 U105c		       00		      DS	1	; $5C	 ; reserved
    370 U105d
    371 U105d							;----------------------------------------
    372 U105d							; Waveforms
    373 U105d							;----------------------------------------
    374 U105d							; Waveforms are 32 byte tables that define a waveform.  Waveforms must be 32
    375 U105d							; byte aligned, and can only be stored in the 4K Display Data Bank. You MUST
    376 U105d							; define an "OFF" waveform,  comprised of all zeros.  The sum of all waveforms
    377 U105d							; being played should be <= 15, so typically you'll use a maximum of 5 for any
    378 U105d							; given value.
    379 U105d							;
    380 U105d							; Valid values are 0-127 and point to the 4K Display Data bank.  The formula
    381 U105d							; (* & $1fff)/32 as shown below will calculate the value for you
    382 U105d							;
    383 U105d							;
    384 U105d							; example waveforms
    385 U105d							;	align 32		; forces the waveform to a 32 byte boundary
    386 U105d							;SOUND_OFF = (* & $1fff)/32	; calculates waveform pointer
    387 U105d							;	.byte 0,0,0,0,0,0,0,0
    388 U105d							;	.byte 0,0,0,0,0,0,0,0
    389 U105d							;	.byte 0,0,0,0,0,0,0,0
    390 U105d							;	.byte 0,0,0,0,0,0,0,0 
    391 U105d							; 
    392 U105d							;	align 32
    393 U105d							;SINE_WAVE = (* & $1fff)/32
    394 U105d							;	.byte 3,3,3,4,4,5,5,5
    395 U105d							;	.byte 5,5,5,5,4,4,3,3
    396 U105d							;	.byte 3,2,2,1,1,0,0,0
    397 U105d							;	.byte 0,0,0,0,1,1,2,2 
    398 U105d							;
    399 U105d							; usage, set voice 0 to Sine Wave, set voice 1 & 2 off
    400 U105d							;	LDA #SINE_WAVE
    401 U105d							;	STA WAVEFORM0
    402 U105d							;	LDA #SOUND_OFF
    403 U105d							;	STA WAVEFORM1
    404 U105d							;	STA WAVEFORM2	
    405 U105d							;----------------------------------------
    406 U105d		       00	   WAVEFORM0  DS	1	; $5D
    407 U105e		       00	   WAVEFORM1  DS	1	; $5E
    408 U105f		       00	   WAVEFORM2  DS	1	; $5F
    409 U1060
    410 U1060							;----------------------------------------
    411 U1060							; Data Fetcher Push (stack)
    412 U1060							;----------------------------------------
    413 U1060							; The Data Fetchers can also be used to update the contents of the 4K
    414 U1060							; Display Data bank.  Point the Data Fetcher to the data to change,
    415 U1060							; then Push to it.  The Data Fetcher's pointer will be decremented BEFORE
    416 U1060							; the data is written.
    417 U1060							;
    418 U1060							; point Data Fetcher 1 to the sprite data
    419 U1060							;	lda #<DisplayData
    420 U1060							;	sta DF1LOW
    421 U1060							;	lda #>DisplayData
    422 U1060							;	sta DF1HI 
    423 U1060							;
    424 U1060							; then update it
    425 U1060							;	LDA #$FF
    426 U1060							;	STA DF1PUSH ; changes data at DisplayData - 1
    427 U1060							;	LDA #$81
    428 U1060							;	STA DF1OUSH ; changes data at DisplayData - 2
    429 U1060							;----------------------------------------
    430 U1060		       00	   DF0PUSH    DS	1	; $60
    431 U1061		       00	   DF1PUSH    DS	1	; $61
    432 U1062		       00	   DF2PUSH    DS	1	; $62
    433 U1063		       00	   DF3PUSH    DS	1	; $63
    434 U1064		       00	   DF4PUSH    DS	1	; $64
    435 U1065		       00	   DF5PUSH    DS	1	; $65
    436 U1066		       00	   DF6PUSH    DS	1	; $66
    437 U1067		       00	   DF7PUSH    DS	1	; $67
    438 U1068
    439 U1068							;----------------------------------------
    440 U1068							; Data Fetcher, High Pointer
    441 U1068							;----------------------------------------
    442 U1068							; These are used in conjunction with DFxLOW to point a Data Fetcher to the data
    443 U1068							; to read.  For usage, see "Data Fetcher" in SECTION 1.
    444 U1068							;----------------------------------------
    445 U1068		       00	   DF0HI      DS	1	; $68
    446 U1069		       00	   DF1HI      DS	1	; $69
    447 U106a		       00	   DF2HI      DS	1	; $6A
    448 U106b		       00	   DF3HI      DS	1	; $6B
    449 U106c		       00	   DF4HI      DS	1	; $6C
    450 U106d		       00	   DF5HI      DS	1	; $6D 
    451 U106e		       00	   DF6HI      DS	1	; $6E 
    452 U106f		       00	   DF7HI      DS	1	; $6F 
    453 U1070
    454 U1070							;----------------------------------------
    455 U1070							; Random Number Initialization
    456 U1070							;----------------------------------------
    457 U1070							; The random number generate defaults to a value that spells out DPC+.
    458 U1070							; Store any value to RRESET to set the random number back to DPC+, or you
    459 U1070							; can use RWRITE0-3 to change the 32 bit value to anything you desire.
    460 U1070							;
    461 U1070							; reset random number
    462 U1070							;	LDA #0
    463 U1070							;	STA RRESET
    464 U1070							;
    465 U1070							; set a specific random number (spells out 2600)
    466 U1070							;	LDA #$32
    467 U1070							;	STA RWRITE0
    468 U1070							;	LDA #$36
    469 U1070							;	STA RWRITE1
    470 U1070							;	LDA #$30
    471 U1070							;	STA RWRITE2
    472 U1070							;	STA RWRITE3
    473 U1070							;
    474 U1070							; NOTE: do not set all 4 bytes to 0, as that will disable the generator.
    475 U1070							;----------------------------------------
    476 U1070		       00	   RRESET     DS	1	; $70
    477 U1071		       00	   RWRITE0    DS	1	; $71
    478 U1072		       00	   RWRITE1    DS	1	; $72
    479 U1073		       00	   RWRITE2    DS	1	; $73
    480 U1074		       00	   RWRITE3    DS	1	; $74
    481 U1075
    482 U1075							;----------------------------------------
    483 U1075							; Notes
    484 U1075							;----------------------------------------
    485 U1075							; These are used to select a value from the frequency table to play.
    486 U1075							; The default table, store in DPC_frequencies.h, only defines frequencies
    487 U1075							; for 1-88, which cover the keys of a piano.  You are free to add additional
    488 U1075							; frequencies from 88-255.  Piano keys are defined at the end of this file
    489 U1075							;
    490 U1075							; set voice 0 to middle C
    491 U1075							;	LDA #C4
    492 U1075							;	STA NOTE0
    493 U1075							;
    494 U1075							; Note: if you are using ARM USER CODE then you can only use notes to 128.
    495 U1075							;----------------------------------------
    496 U1075		       00	   NOTE0      DS	1	; $75
    497 U1076		       00	   NOTE1      DS	1	; $76
    498 U1077		       00	   NOTE2      DS	1	; $77
    499 U1078
    500 U1078							;----------------------------------------
    501 U1078							; Data Fetcher Write (queue)
    502 U1078							;----------------------------------------
    503 U1078							; The Data Fetchers can also be used to update the contents of the 4K
    504 U1078							; Display Data bank.  Point the Data Fetcher to the data to change,
    505 U1078							; then Write to it  The Data Fetcher's pointer will be incremented AFTER
    506 U1078							; the data is written.
    507 U1078							;
    508 U1078							; point Data Fetcher 1 to the sprite data
    509 U1078							;	lda #<SpriteData
    510 U1078							;	sta DF1LOW
    511 U1078							;	lda #>SpriteData
    512 U1078							;	sta DF1HI 
    513 U1078							;
    514 U1078							; then update it
    515 U1078							;	LDA #$FF
    516 U1078							;	STA DF1WRITE ; changes data at SpriteData
    517 U1078							;	LDA #$81
    518 U1078							;	STA DF1WRITE ; changes data at SpriteData + 1
    519 U1078							;----------------------------------------
    520 U1078		       00	   DF0WRITE   DS	1	; $78
    521 U1079		       00	   DF1WRITE   DS	1	; $79
    522 U107a		       00	   DF2WRITE   DS	1	; $7A
    523 U107b		       00	   DF3WRITE   DS	1	; $7B
    524 U107c		       00	   DF4WRITE   DS	1	; $7C
    525 U107d		       00	   DF5WRITE   DS	1	; $7D
    526 U107e		       00	   DF6WRITE   DS	1	; $7E
    527 U107f		       00	   DF7WRITE   DS	1	; $7F
    528 U1080
    529 U1080							;-------------------------------------------------------------------------------
    530 U1080							; The following required for back-compatibility with code which does not use
    531 U1080							; segments.
    532 U1080
    533  8400 ????				      SEG
------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\3dmap.bas.asm
------- FILE DPCplusbB.h LEVEL 2 PASS 3
      0  8400 ????				      include	"DPCplusbB.h"
      1  8400 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  8400 ????
      3 U00f5 ????				      SEG.U	vars
      4 U0080					      org	$80
      5 U0080		       00	   player0x   ds	1
      6 U0081		       00	   topP1x     ds	1
      7 U0082		       00	   missile0x  ds	1
      8 U0083		       00	   missile1x  ds	1
      9 U0084		       00	   ballx      ds	1
     10 U0085
     11 U0085		       00 00 00 00*SpriteGfxIndex ds	9
     12 U008e
     13 U008e		       00	   spritedisplay ds	1
     14 U008f
     15 U008f		       00	   player0xcoll ds	1	; to detect p0x colls
     16 U0090		       00	   NewSpriteX ds	1	;		X position
     17 U0090		       00 90	   player1x   =	NewSpriteX
     18 U0091		       00	   player2x   ds	1
     19 U0092		       00	   player3x   ds	1
     20 U0093		       00	   player4x   ds	1
     21 U0094		       00	   player5x   ds	1
     22 U0095		       00	   player6x   ds	1
     23 U0096		       00	   player7x   ds	1
     24 U0097		       00	   player8x   ds	1
     25 U0098		       00	   player9x   ds	1
     26 U0099
     27 U0099		       00	   player0y   ds	1
     28 U009a		       00	   NewSpriteY ds	1	;		Y position
     29 U009a		       00 9a	   player1y   =	NewSpriteY
     30 U009b		       00	   player2y   ds	1
     31 U009c		       00	   player3y   ds	1
     32 U009d		       00	   player4y   ds	1
     33 U009e		       00	   player5y   ds	1
     34 U009f		       00	   player6y   ds	1
     35 U00a0		       00	   player7y   ds	1
     36 U00a1		       00	   player8y   ds	1
     37 U00a2		       00	   player9y   ds	1
     38 U00a3
     39 U00a3		       00 00	   player0color ds	2
     40 U00a5
     41 U00a5		       00	   player0height ds	1
     42 U00a6		       00	   player1height ds	1
     43 U00a7		       00	   player2height ds	1
     44 U00a8		       00	   player3height ds	1
     45 U00a9		       00	   player4height ds	1
     46 U00aa		       00	   player5height ds	1
     47 U00ab		       00	   player6height ds	1
     48 U00ac		       00	   player7height ds	1
     49 U00ad		       00	   player8height ds	1
     50 U00ae		       00	   player9height ds	1
     51 U00af
     52 U00af		       00	   _NUSIZ1    ds	1
     53 U00b0		       00	   NUSIZ2     ds	1
     54 U00b1		       00	   NUSIZ3     ds	1
     55 U00b2		       00	   NUSIZ4     ds	1
     56 U00b3		       00	   NUSIZ5     ds	1
     57 U00b4		       00	   NUSIZ6     ds	1
     58 U00b5		       00	   NUSIZ7     ds	1
     59 U00b6		       00	   NUSIZ8     ds	1
     60 U00b7		       00	   NUSIZ9     ds	1
     61 U00b8
     62 U00b8		       00 00 00    score      ds	3
     63 U00bb		       00	   COLUM0     ds	1
     64 U00bc		       00	   COLUM1     ds	1
     65 U00bd		       00	   player0pointerlo ds	1
     66 U00be		       00	   player0pointerhi ds	1
     67 U00bf
     68 U00bf		       00 85	   RAMcopybegin =	SpriteGfxIndex
     69 U00bf		       00 3a	   RAMcopylength =	*-RAMcopybegin
     70 U00bf
     71 U00bf		       00	   missile0y  ds	1
     72 U00c0		       00	   missile1y  ds	1
     73 U00c1		       00	   bally      ds	1
     74 U00c2
     75 U00c2		       00	   missile0height ds	1
     76 U00c3		       00	   missile1height ds	1
     77 U00c4		       00	   ballheight ds	1
     78 U00c5
     79 U00c5		       00	   statusbarlength ds	1	; needed?
     80 U00c5		       00 c5	   aux3       =	statusbarlength
     81 U00c6
     82 U00c6		       00	   lifecolor  ds	1
     83 U00c6		       00 c6	   pfscorecolor =	lifecolor
     84 U00c7		       00	   aux4       ds	1
     85 U00c8
     86 U00c8		       00	   lifepointer ds	1
     87 U00c9		       00	   lives      ds	1
     88 U00c9		       00 c8	   pfscore1   =	lifepointer
     89 U00c9		       00 c9	   pfscore2   =	lives
     90 U00c9		       00 c8	   aux5       =	pfscore1
     91 U00c9		       00 c9	   aux6       =	pfscore2
     92 U00ca
     93 U00ca		       00	   playfieldpos ds	1
     94 U00cb
     95 U00cb		       00	   temp1      ds	1	; used in sprite flickering
     96 U00cc		       00	   temp2      ds	1	;are obliterated when drawscreen is called.
     97 U00cd		       00	   temp3      ds	1
     98 U00ce		       00	   temp4      ds	1
     99 U00cf		       00	   temp5      ds	1
    100 U00d0		       00	   temp6      ds	1
    101 U00d0		       00 81	   temp7      =	topP1x	; This is used to aid in bankswitching
    102 U00d1
    103 U00d1		       00	   A	      ds	1
    104 U00d1		       00 d1	   a	      =	A
    105 U00d2		       00	   B	      ds	1
    106 U00d2		       00 d2	   b	      =	B
    107 U00d3		       00	   C	      ds	1
    108 U00d3		       00 d3	   c	      =	C
    109 U00d4		       00	   D	      ds	1
    110 U00d4		       00 d4	   d	      =	D
    111 U00d5		       00	   E	      ds	1
    112 U00d5		       00 d5	   e	      =	E
    113 U00d6		       00	   F	      ds	1
    114 U00d6		       00 d6	   f	      =	F
    115 U00d7		       00	   G	      ds	1
    116 U00d7		       00 d7	   g	      =	G
    117 U00d8		       00	   H	      ds	1
    118 U00d8		       00 d8	   h	      =	H
    119 U00d9		       00	   I	      ds	1
    120 U00d9		       00 d9	   i	      =	I
    121 U00da		       00	   J	      ds	1
    122 U00da		       00 da	   j	      =	J
    123 U00db		       00	   K	      ds	1
    124 U00db		       00 db	   k	      =	K
    125 U00dc		       00	   L	      ds	1
    126 U00dc		       00 dc	   l	      =	L
    127 U00dd		       00	   M	      ds	1
    128 U00dd		       00 dd	   m	      =	M
    129 U00de		       00	   N	      ds	1
    130 U00de		       00 de	   n	      =	N
    131 U00df		       00	   O	      ds	1
    132 U00df		       00 df	   o	      =	O
    133 U00e0		       00	   P	      ds	1
    134 U00e0		       00 e0	   p	      =	P
    135 U00e1		       00	   Q	      ds	1
    136 U00e1		       00 e1	   q	      =	Q
    137 U00e2		       00	   R	      ds	1
    138 U00e2		       00 e2	   r	      =	R
    139 U00e3		       00	   S	      ds	1
    140 U00e3		       00 e3	   s	      =	S
    141 U00e4		       00	   T	      ds	1
    142 U00e4		       00 e4	   t	      =	T
    143 U00e5		       00	   U	      ds	1
    144 U00e5		       00 e5	   u	      =	U
    145 U00e6		       00	   V	      ds	1
    146 U00e6		       00 e6	   v	      =	V
    147 U00e7		       00	   W	      ds	1
    148 U00e7		       00 e7	   w	      =	W
    149 U00e8		       00	   X	      ds	1
    150 U00e8		       00 e8	   x	      =	X
    151 U00e9		       00	   Y	      ds	1
    152 U00e9		       00 e9	   y	      =	Y
    153 U00ea		       00	   Z	      ds	1
    154 U00ea		       00 ea	   z	      =	Z
    155 U00eb		       00	   scorecolor ds	1
    156 U00ec
    157 U00ec		       00	   var0       ds	1
    158 U00ed		       00	   var1       ds	1
    159 U00ee		       00	   var2       ds	1
    160 U00ef		       00	   var3       ds	1
    161 U00f0		       00	   var4       ds	1
    162 U00f1		       00	   var5       ds	1
    163 U00f2		       00	   var6       ds	1
    164 U00f3		       00	   var7       ds	1
    165 U00f4		       00	   var8       ds	1
    166 U00f5
 free ram: 0
    167 U00f5					      echo	"free ram:",($f5-*)d
    168 U00f5
    169 U00f5		       00 f6	   stack1     =	$f6
    170 U00f5		       00 f7	   stack2     =	$f7
    171 U00f5		       00 f8	   stack3     =	$f8
    172 U00f5		       00 f9	   stack4     =	$f9
    173 U00f5							; the stack bytes above may be used in the kernel
    174 U00f5							; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    175 U00f5
    176 U00f5					      MAC	return
    177 U00f5					      ifnconst	bankswitch
    178 U00f5					      rts
    179 U00f5					      else
    180 U00f5					      jmp	BS_return
    181 U00f5					      endif
    182 U00f5					      ENDM		; auto-return from either a regular or bankswitched module
    183  8400 ????				      seg
    184  8400 ????	       10 00	   rand       =	RANDOM0NEXT
    185  8400 ????	       00 d3	   KERNEL_LINES =	178*76/64	; warning: not all values will work
    186  8400 ????	       00 a7	   OVERSCAN_LINES =	128+33*76/64	; again, not all values work
    187  8400 ????	       d1 a4	   C_function =	FETCHER_BEGIN
    188  8400 ????	       d1 a8	   CcodeData  =	C_function + 4
    189  8400 ????	       d1 e2	   playerpointers =	CcodeData + RAMcopylength
    190  8400 ????	       d2 08	   P1GFX      =	playerpointers + 38
    191  8400 ????	       d3 08	   P1COLOR    =	P1GFX + 256
    192  8400 ????	       d4 08	   P0GFX      =	P1COLOR + 256
    193  8400 ????	       d5 08	   P0COLOR    =	P0GFX + 256
    194  8400 ????	       d6 08	   PF1L       =	P0COLOR + 256
    195  8400 ????	       d7 08	   PF2L       =	PF1L + 256
    196  8400 ????	       d8 08	   PF1R       =	PF2L + 256
    197  8400 ????	       d9 08	   PF2R       =	PF1R + 256
    198  8400 ????	       da 08	   PFCOLS     =	PF2R + 256
    199  8400 ????	       db 08	   JUMPTABLELO =	PFCOLS + 256
    200  8400 ????	       db 14	   JUMPTABLEHI =	JUMPTABLELO + 12
    201  8400 ????	       db 20	   P1HMP      =	JUMPTABLEHI + 12
    202  8400 ????	       db 2d	   P1SKIP     =	P1HMP + 13
    203  8400 ????	       db 39	   NUSIZREFP  =	P1SKIP + 12
    204  8400 ????	       db 45	   scoredata  =	NUSIZREFP + 12
    205  8400 ????	       db a5	   BKCOLS     =	scoredata + 96
    206  8400 ????	       dc a5	   STACKbegin =	BKCOLS + 256
    207  8400 ????	       dd a5	   USERSTACK  =	STACKbegin + 256	; stack starts here and goes down!!!!
 DPC free RAM= 603
    208  8400 ????				      echo	"DPC free RAM=",($1000-(USERSTACK&$0FFF))d
------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\3dmap.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  8400 ????				      include	"2600basic_variable_redefs.h"
      1  8400 ????						; This file contains variable mapping and other information for the current project.
      2  8400 ????
      3  8400 ????	       00 20	   bscode_length =	32
      4  8400 ????	       00 e9	   _Bit7_Flip_Scroll =	y
      5  8400 ????
      6  8400 ????	       00 e9	   _Bit0_Reset_Restrainer =	y
      7  8400 ????
      8  8400 ????	       00 d1	   _Scroll_Counter =	a
      9  8400 ????
     10  8400 ????	       00 2b	   vblank_time =	43
     11  8400 ????	       00 25	   overscan_time =	37
     12  8400 ????	       00 07	   bs_mask    =	7
     13  8400 ????	       00 1c	   bankswitch =	28
     14  8400 ????	       1f f6	   bankswitch_hotspot =	$1FF6
     15  8400 ????	       00 02	   multisprite =	2
------- FILE e:\Documents\bB\batariBasicGames\demos\playfields\3dmap.bas.asm
      9  0400					      ORG	$400
     10  0400					      RORG	$0
     11  0400					      incbin	DPCplus.arm
     12  1000					      ORG	$1000
     13  1000					      RORG	$1000
     14  1000					      incbin	custom/bin/custom2.bin
     15  1894							; assume custom2.bin > 128 bytes
     16  1894							; repeat $80
     17  1894							; .byte 0
     18  1894							; repend
     19  1894							; Provided under the CC0 license. See the included LICENSE.txt for details.
     20  1894
     21  1894							; feel free to modify the score graphics - just keep each digit 8 high
     22  1894							; and keep the conditional compilation stuff intact
     23  1894				  -	      ifconst	ROM2k
     24  1894				  -	      ORG	$F7AC-8
     25  1894					      else
     26  1894					      ifconst	bankswitch
     27  1894				  -	      if	bankswitch == 8
     28  1894				  -	      ORG	$2F94-bscode_length
     29  1894				  -	      RORG	$FF94-bscode_length
     30  1894					      endif
     31  1894				  -	      if	bankswitch == 16
     32  1894				  -	      ORG	$4F94-bscode_length
     33  1894				  -	      RORG	$FF94-bscode_length
     34  1894					      endif
     35  1894				  -	      if	bankswitch == 32
     36  1894				  -	      ORG	$8F94-bscode_length
     37  1894				  -	      RORG	$FF94-bscode_length
     38  1894					      endif
     39  1894				  -	      if	bankswitch == 64
     40  1894				  -	      ORG	$10F80-bscode_length
     41  1894				  -	      RORG	$1FF80-bscode_length
     42  1894					      endif
     43  1894				  -	      else
     44  1894				  -	      ORG	$FF9C
     45  1894					      endif
     46  1894					      endif
     47  1894
     48  1894							; font equates
     49  1894		       00 01	   .21stcentury =	1
     50  1894		       00 02	   alarmclock =	2
     51  1894		       00 03	   handwritten =	3
     52  1894		       00 04	   interrupted =	4
     53  1894		       00 05	   retroputer =	5
     54  1894		       00 06	   whimsey    =	6
     55  1894		       00 07	   tiny       =	7
     56  1894		       00 08	   hex	      =	8
     57  1894
     58  1894				  -	      ifconst	font
     59  1894				  -	      if	font == hex
     60  1894				  -	      ORG	. - 48
     61  1894				  -	      endif
     62  1894					      endif
     63  1894
     64  1894				   scoretable
     65  1894
     66  1894				  -	      ifconst	font
     67  1894				  -	      if	font == .21stcentury
     68  1894				  -	      include	"score_graphics.asm.21stcentury"
     69  1894				  -	      endif
     70  1894				  -	      if	font == alarmclock
     71  1894				  -	      include	"score_graphics.asm.alarmclock"
     72  1894				  -	      endif
     73  1894				  -	      if	font == handwritten
     74  1894				  -	      include	"score_graphics.asm.handwritten"
     75  1894				  -	      endif
     76  1894				  -	      if	font == interrupted
     77  1894				  -	      include	"score_graphics.asm.interrupted"
     78  1894				  -	      endif
     79  1894				  -	      if	font == retroputer
     80  1894				  -	      include	"score_graphics.asm.retroputer"
     81  1894				  -	      endif
     82  1894				  -	      if	font == whimsey
     83  1894				  -	      include	"score_graphics.asm.whimsey"
     84  1894				  -	      endif
     85  1894				  -	      if	font == tiny
     86  1894				  -	      include	"score_graphics.asm.tiny"
     87  1894				  -	      endif
     88  1894				  -	      if	font == hex
     89  1894				  -	      include	"score_graphics.asm.hex"
     90  1894				  -	      endif
     91  1894					      else		; default font
     92  1894
     93  1894		       3c		      .byte.b	%00111100
     94  1895		       66		      .byte.b	%01100110
     95  1896		       66		      .byte.b	%01100110
     96  1897		       66		      .byte.b	%01100110
     97  1898		       66		      .byte.b	%01100110
     98  1899		       66		      .byte.b	%01100110
     99  189a		       66		      .byte.b	%01100110
    100  189b		       3c		      .byte.b	%00111100
    101  189c
    102  189c		       7e		      .byte.b	%01111110
    103  189d		       18		      .byte.b	%00011000
    104  189e		       18		      .byte.b	%00011000
    105  189f		       18		      .byte.b	%00011000
    106  18a0		       18		      .byte.b	%00011000
    107  18a1		       38		      .byte.b	%00111000
    108  18a2		       18		      .byte.b	%00011000
    109  18a3		       08		      .byte.b	%00001000
    110  18a4
    111  18a4		       7e		      .byte.b	%01111110
    112  18a5		       60		      .byte.b	%01100000
    113  18a6		       60		      .byte.b	%01100000
    114  18a7		       3c		      .byte.b	%00111100
    115  18a8		       06		      .byte.b	%00000110
    116  18a9		       06		      .byte.b	%00000110
    117  18aa		       46		      .byte.b	%01000110
    118  18ab		       3c		      .byte.b	%00111100
    119  18ac
    120  18ac		       3c		      .byte.b	%00111100
    121  18ad		       46		      .byte.b	%01000110
    122  18ae		       06		      .byte.b	%00000110
    123  18af		       06		      .byte.b	%00000110
    124  18b0		       1c		      .byte.b	%00011100
    125  18b1		       06		      .byte.b	%00000110
    126  18b2		       46		      .byte.b	%01000110
    127  18b3		       3c		      .byte.b	%00111100
    128  18b4
    129  18b4		       0c		      .byte.b	%00001100
    130  18b5		       0c		      .byte.b	%00001100
    131  18b6		       7e		      .byte.b	%01111110
    132  18b7		       4c		      .byte.b	%01001100
    133  18b8		       4c		      .byte.b	%01001100
    134  18b9		       2c		      .byte.b	%00101100
    135  18ba		       1c		      .byte.b	%00011100
    136  18bb		       0c		      .byte.b	%00001100
    137  18bc
    138  18bc		       3c		      .byte.b	%00111100
    139  18bd		       46		      .byte.b	%01000110
    140  18be		       06		      .byte.b	%00000110
    141  18bf		       06		      .byte.b	%00000110
    142  18c0		       3c		      .byte.b	%00111100
    143  18c1		       60		      .byte.b	%01100000
    144  18c2		       60		      .byte.b	%01100000
    145  18c3		       7e		      .byte.b	%01111110
    146  18c4
    147  18c4		       3c		      .byte.b	%00111100
    148  18c5		       66		      .byte.b	%01100110
    149  18c6		       66		      .byte.b	%01100110
    150  18c7		       66		      .byte.b	%01100110
    151  18c8		       7c		      .byte.b	%01111100
    152  18c9		       60		      .byte.b	%01100000
    153  18ca		       62		      .byte.b	%01100010
    154  18cb		       3c		      .byte.b	%00111100
    155  18cc
    156  18cc		       30		      .byte.b	%00110000
    157  18cd		       30		      .byte.b	%00110000
    158  18ce		       30		      .byte.b	%00110000
    159  18cf		       18		      .byte.b	%00011000
    160  18d0		       0c		      .byte.b	%00001100
    161  18d1		       06		      .byte.b	%00000110
    162  18d2		       42		      .byte.b	%01000010
    163  18d3		       3e		      .byte.b	%00111110
    164  18d4
    165  18d4		       3c		      .byte.b	%00111100
    166  18d5		       66		      .byte.b	%01100110
    167  18d6		       66		      .byte.b	%01100110
    168  18d7		       66		      .byte.b	%01100110
    169  18d8		       3c		      .byte.b	%00111100
    170  18d9		       66		      .byte.b	%01100110
    171  18da		       66		      .byte.b	%01100110
    172  18db		       3c		      .byte.b	%00111100
    173  18dc
    174  18dc		       3c		      .byte.b	%00111100
    175  18dd		       46		      .byte.b	%01000110
    176  18de		       06		      .byte.b	%00000110
    177  18df		       3e		      .byte.b	%00111110
    178  18e0		       66		      .byte.b	%01100110
    179  18e1		       66		      .byte.b	%01100110
    180  18e2		       66		      .byte.b	%01100110
    181  18e3		       3c		      .byte.b	%00111100
    182  18e4
    183  18e4				  -	      ifnconst	DPC_kernel_options
    184  18e4				  -
    185  18e4				  -	      .byte	%00000000
    186  18e4				  -	      .byte	%00000000
    187  18e4				  -	      .byte	%00000000
    188  18e4				  -	      .byte	%00000000
    189  18e4				  -	      .byte	%00000000
    190  18e4				  -	      .byte	%00000000
    191  18e4				  -	      .byte	%00000000
    192  18e4				  -	      .byte	%00000000
    193  18e4				  -
    194  18e4					      endif
    195  18e4
    196  18e4					      endif
    197  18e4
    198  18e4				  -	      ifconst	ROM2k
    199  18e4				  -	      ORG	$F7FC
    200  18e4					      else
    201  18e4					      ifconst	bankswitch
    202  18e4				  -	      if	bankswitch == 8
    203  18e4				  -	      ORG	$2FF4-bscode_length
    204  18e4				  -	      RORG	$FFF4-bscode_length
    205  18e4					      endif
    206  18e4				  -	      if	bankswitch == 16
    207  18e4				  -	      ORG	$4FF4-bscode_length
    208  18e4				  -	      RORG	$FFF4-bscode_length
    209  18e4					      endif
    210  18e4				  -	      if	bankswitch == 32
    211  18e4				  -	      ORG	$8FF4-bscode_length
    212  18e4				  -	      RORG	$FFF4-bscode_length
    213  18e4					      endif
    214  18e4				  -	      if	bankswitch == 64
    215  18e4				  -	      ORG	$10FE0-bscode_length
    216  18e4				  -	      RORG	$1FFE0-bscode_length
    217  18e4					      endif
    218  18e4				  -	      else
    219  18e4				  -	      ORG	$FFFC
    220  18e4					      endif
    221  18e4					      endif
    222  18e4							; Provided under the CC0 license. See the included LICENSE.txt for details.
    223  18e4
    224  18e4				   start
    225  18e4		       78		      sei
    226  18e5		       d8		      cld
    227  18e6		       a0 00		      ldy	#0
    228  18e8		       a5 d0		      lda	$D0
    229  18ea		       c9 2c		      cmp	#$2C	;check RAM location #1
    230  18ec		       d0 07		      bne	MachineIs2600
    231  18ee		       a5 d1		      lda	$D1
    232  18f0		       c9 a9		      cmp	#$A9	;check RAM location #2
    233  18f2		       d0 01		      bne	MachineIs2600
    234  18f4		       88		      dey
    235  18f5				   MachineIs2600
    236  18f5		       a2 00		      ldx	#0
    237  18f7		       8a		      txa
    238  18f8				   clearmem
    239  18f8		       e8		      inx
    240  18f9		       9a		      txs
    241  18fa		       48		      pha
    242  18fb		       d0 fb		      bne	clearmem
    243  18fd		       84 cb		      sty	temp1
    244  18ff		       a2 08		      ldx	#8
    245  1901		       86 ca		      stx	playfieldpos
    246  1903		       8e 58 10 	      stx	FASTFETCH
    247  1906		       a2 08		      ldx	#8
    248  1908		       a9 e0		      lda	#224
    249  190a				   inityloop
    250  190a		       95 9a		      sta	player1y,x
    251  190c		       ca		      dex
    252  190d		       10 fb		      bpl	inityloop
    253  190f
    254  190f		       a9 01		      lda	#1
    255  1911		       85 0a		      sta	CTRLPF
    256  1913		       ad 84 02 	      lda	INTIM
    257  1916		       8d 71 10 	      sta	RWRITE0
    258  1919		       a9 00		      lda	#0
    259  191b		       8d 38 10 	      STA	DF0FRACINC
    260  191e		       8d 39 10 	      STA	DF1FRACINC
    261  1921		       8d 3a 10 	      STA	DF2FRACINC
    262  1924		       8d 3b 10 	      STA	DF3FRACINC
    263  1927		       8d 3c 10 	      STA	DF4FRACINC
    264  192a		       8d 3e 10 	      STA	DF6FRACINC
    265  192d		       a9 a5		      lda	#<USERSTACK
    266  192f		       8d 57 10 	      STA	DF7LOW
    267  1932		       a9 0d		      lda	#(>USERSTACK) & $0F
    268  1934		       8d 6f 10 	      STA	DF7HI
    269  1937		       a9 ff		      lda	#255
    270  1939		       8d 5a 10 	      sta	CALLFUNCTION	; zero-fill fetcher
    271  193c
    272  193c		       a9 1f		      lda	#>(game-1)
    273  193e		       48		      pha
    274  193f		       a9 90		      lda	#<(game-1)
    275  1941		       48		      pha
    276  1942		       48		      pha
    277  1943		       48		      pha
    278  1944		       a2 01		      ldx	#1
    279  1946		       4c ee df 	      jmp	BS_jsr
    280  1949				   drawscreen
    281  1949		       a9 01		      lda	#1
    282  194b		       85 2c		      sta	CXCLR
    283  194d		       85 09		      sta	COLUBK	; REVENG - don't start with the lastline color
    284  194f
    285  194f				   fufu
    286  194f		       ad 84 02 	      lda	INTIM
    287  1952		       30 fb		      bmi	fufu
    288  1954
      0  1954					      VERTICAL_SYNC
      1  1954		       a9 02		      LDA	#$02
      2  1956		       85 02		      STA	WSYNC
      3  1958		       85 00		      STA	VSYNC
      4  195a		       85 02		      STA	WSYNC
      5  195c		       85 02		      STA	WSYNC
      6  195e		       4a		      LSR
      7  195f		       85 02		      STA	WSYNC
      8  1961		       85 00		      STA	VSYNC
    290  1963
    291  1963		       a9 a9		      lda	#41+128	;was 37 - do more w/c code
    292  1965		       8d 96 02 	      sta	TIM64T
    293  1968
    294  1968							; adjust for pfpos?
    295  1968
    296  1968							; set zero to properly enter C code
    297  1968		       a9 a4		      lda	#<C_function
    298  196a		       8d 50 10 	      sta	DF0LOW
    299  196d		       a9 01		      lda	#(>C_function) & $0F
    300  196f		       8d 68 10 	      sta	DF0HI
    301  1972		       a9 00		      lda	#0
    302  1974		       8d 78 10 	      sta	DF0WRITE
    303  1977
    304  1977							; REVENG - pass the number of vsprites we want...
    305  1977					      ifnconst	dpcspritemax
    306  1977				  -	      ifconst	readpaddle
    307  1977				  -	      lda	#8
    308  1977					      else
    309  1977		       a9 09		      lda	#9
    310  1979					      endif
    311  1979				  -	      else
    312  1979				  -	      lda	#dpcspritemax
    313  1979					      endif
    314  1979		       8d 78 10 	      sta	DF0WRITE
    315  197c
    316  197c		       a5 80		      lda	player0x
    317  197e		       85 8f		      sta	player0xcoll	; detect p0x colls
    318  1980
    319  1980							; copy RAM to fetcher for C-code
    320  1980		       a9 e2		      lda	#<(CcodeData + RAMcopylength)
    321  1982		       8d 50 10 	      sta	DF0LOW
    322  1985		       a9 01		      lda	#(>(CcodeData + RAMcopylength)) & $0F
    323  1987		       8d 68 10 	      sta	DF0HI
    324  198a		       a2 39		      ldx	#RAMcopylength-1
    325  198c				   copy2fetcherloop
    326  198c		       b5 85		      lda	RAMcopybegin,x
    327  198e		       8d 60 10 	      sta	DF0PUSH
    328  1991		       ca		      dex
    329  1992		       10 f8		      bpl	copy2fetcherloop
    330  1994
    331  1994		       a9 ff		      lda	#255
    332  1996		       8d 5a 10 	      sta	CALLFUNCTION
    333  1999
    334  1999							; copy modified data back (just need first 6 bytes, which is sprite sort data)
    335  1999		       a2 ed		      ldx	#256-19
    336  199b				   copyfromfetcherloop
    337  199b		       ad 08 10 	      lda	DF0DATA
    338  199e		       95 98		      sta	RAMcopybegin+19,x
    339  19a0		       e8		      inx
    340  19a1		       30 f8		      bmi	copyfromfetcherloop
    341  19a3
    342  19a3		       20 3a 1e 	      jsr	kernel_setup
    343  19a6		       85 02		      sta	WSYNC
    344  19a8		       a0 80		      ldy	#$80
    345  19aa		       84 20		      sty	HMP0
    346  19ac		       84 21		      sty	HMP1
    347  19ae		       84 22		      sty	HMM0
    348  19b0		       84 23		      sty	HMM1
    349  19b2		       84 24		      sty	HMBL
    350  19b4
    351  19b4							; run possible vblank bB code
    352  19b4				  -	      ifconst	vblank_bB_code
    353  19b4				  -	      jsr	vblank_bB_code
    354  19b4					      endif
    355  19b4
    356  19b4		       20 02 1d 	      jsr	set_fetchers
    357  19b7
    358  19b7		       a2 07		      ldx	#7
    359  19b9				   setloopfrac
    360  19b9		       bd 7d 1d 	      lda	dffraclow,x
    361  19bc		       9d 28 10 	      sta	DF0FRACLOW,x
    362  19bf		       bd 85 1d 	      lda	dffrachi,x
    363  19c2		       9d 30 10 	      sta	DF0FRACHI,x
    364  19c5		       ca		      dex
    365  19c6		       10 f1		      bpl	setloopfrac
    366  19c8							; lda #255
    367  19c8		       8e 3d 10 	      STx	DF5FRACINC	; x=255 right now
    368  19cb		       8e 3f 10 	      STx	DF7FRACINC
    369  19ce		       ad 1d 10 	      lda	DF5FRACDATA	; priming read
    370  19d1		       ad 1f 10 	      lda	DF7FRACDATA	; priming read
    371  19d4
    372  19d4		       a6 85		      ldx	SpriteGfxIndex
    373  19d6		       b5 af		      lda	_NUSIZ1,x	; top NUSIZ/REFP
    374  19d8		       85 05		      sta	NUSIZ1
    375  19da		       85 0c		      sta	REFP1
    376  19dc
    377  19dc							;REVENG - allow P0 to wrap at the top
    378  19dc				   startwrapfix
    379  19dc		       a9 ff		      lda	#255
    380  19de		       85 cc		      sta	temp2
    381  19e0		       18		      clc
    382  19e1		       a5 99		      lda	player0y
    383  19e3		       65 a5		      adc	player0height
    384  19e5		       38		      sec
    385  19e6		       c5 a5		      cmp	player0height
    386  19e8		       90 04		      bcc	skipwrapfix
    387  19ea		       a9 00		      lda	#0
    388  19ec		       85 cc		      sta	temp2
    389  19ee				   skipwrapfix
    390  19ee
    391  19ee		       38		      sec
    392  19ef		       a9 08		      lda	#<P0GFX
    393  19f1		       e5 99		      sbc	player0y
    394  19f3		       8d 52 10 	      sta	DF2LOW
    395  19f6		       a9 d4		      lda	#>P0GFX
    396  19f8							;sbc #0
    397  19f8		       e5 cc		      sbc	temp2
    398  19fa		       8d 6a 10 	      sta	DF2HI
    399  19fd		       a9 07		      lda	#<(P0GFX-1)
    400  19ff		       8d 42 10 	      sta	DF2TOP
    401  1a02		       38		      sec
    402  1a03		       65 a5		      adc	player0height
    403  1a05		       8d 4a 10 	      sta	DF2BOT
    404  1a08
    405  1a08							;REVENG - 1/2 of the COLUM0 fix. the rest is in main.c
    406  1a08		       a9 08		      lda	#<(P0COLOR)
    407  1a0a		       8d 50 10 	      sta	DF0LOW
    408  1a0d		       85 cc		      sta	temp2
    409  1a0f		       a9 d5		      lda	#>(P0COLOR)
    410  1a11		       8d 68 10 	      sta	DF0HI
    411  1a14
    412  1a14							; ball
    413  1a14		       a9 07		      lda	#<(P1GFX-1)
    414  1a16		       18		      clc
    415  1a17		       65 c1		      adc	bally
    416  1a19		       8d 43 10 	      sta	DF3TOP
    417  1a1c		       38		      sec
    418  1a1d		       65 c4		      adc	ballheight
    419  1a1f		       8d 4b 10 	      sta	DF3BOT
    420  1a22
    421  1a22							; missile0
    422  1a22		       a5 cc		      lda	temp2
    423  1a24		       18		      clc
    424  1a25		       65 bf		      adc	missile0y
    425  1a27		       8d 40 10 	      sta	DF0TOP
    426  1a2a		       38		      sec
    427  1a2b		       65 c2		      adc	missile0height
    428  1a2d		       8d 48 10 	      sta	DF0BOT
    429  1a30
    430  1a30
    431  1a30				   fuu
    432  1a30		       ad 84 02 	      lda	INTIM
    433  1a33		       30 fb		      bmi	fuu
    434  1a35		       85 02		      sta	WSYNC
    435  1a37							;     ldy #$80
    436  1a37							;     sty HMP0
    437  1a37							;     sty HMP1
    438  1a37							;     sty HMM0 
    439  1a37							;     sty HMM1
    440  1a37							;     sty HMBL
    441  1a37							; relocated code above prior to vblank, to allow for Cosmic Ark starfield
    442  1a37							; and/or skewed players
      0  1a37					      sleep	17
      1  1a37				   .CYCLES    SET	17
      2  1a37
      3  1a37				  -	      IF	.CYCLES < 2
      4  1a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a37				  -	      ERR
      6  1a37					      ENDIF
      7  1a37
      8  1a37					      IF	.CYCLES & 1
      9  1a37					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a37		       04 00		      nop	0
     11  1a39				  -	      ELSE
     12  1a39				  -	      bit	VSYNC
     13  1a39					      ENDIF
     14  1a39				   .CYCLES    SET	.CYCLES - 3
     15  1a39					      ENDIF
     16  1a39
     17  1a39					      REPEAT	.CYCLES / 2
     18  1a39		       ea		      nop
     17  1a39					      REPEND
     18  1a3a		       ea		      nop
     17  1a3a					      REPEND
     18  1a3b		       ea		      nop
     17  1a3b					      REPEND
     18  1a3c		       ea		      nop
     17  1a3c					      REPEND
     18  1a3d		       ea		      nop
     17  1a3d					      REPEND
     18  1a3e		       ea		      nop
     17  1a3e					      REPEND
     18  1a3f		       ea		      nop
     19  1a40					      REPEND
    444  1a40
    445  1a40		       a9 d3		      lda	#KERNEL_LINES
    446  1a42		       8d 96 02 	      sta	TIM64T
    447  1a45		       a9 01		      lda	#1
    448  1a47		       85 27		      sta	VDELBL
    449  1a49		       85 25		      sta	VDELP0
    450  1a4b
    451  1a4b							; missile1
    452  1a4b		       a9 07		      lda	#<(P1COLOR-1)
    453  1a4d		       18		      clc
    454  1a4e		       65 c0		      adc	missile1y
    455  1a50		       8d 41 10 	      sta	DF1TOP
    456  1a53		       38		      sec
    457  1a54		       65 c3		      adc	missile1height
    458  1a56		       8d 49 10 	      sta	DF1BOT
    459  1a59
    460  1a59		       a9 00		      lda	#0
    461  1a5b		       85 01		      sta	VBLANK
    462  1a5d		       8d 58 10 	      sta	FASTFETCH
    463  1a60							;sleep 7
    464  1a60		       a9 12		      lda	#<DF2DATAW	; REVENG - added so GRP0 is at TOP
    465  1a62		       85 1b		      STA	GRP0	; 36 (VDEL)   ; ""
      0  1a64					      sleep	2	; ""
      1  1a64				   .CYCLES    SET	2
      2  1a64
      3  1a64				  -	      IF	.CYCLES < 2
      4  1a64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a64				  -	      ERR
      6  1a64					      ENDIF
      7  1a64
      8  1a64				  -	      IF	.CYCLES & 1
      9  1a64				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a64				  -	      nop	0
     11  1a64				  -	      ELSE
     12  1a64				  -	      bit	VSYNC
     13  1a64				  -	      ENDIF
     14  1a64				  -.CYCLES    SET	.CYCLES - 3
     15  1a64					      ENDIF
     16  1a64
     17  1a64					      REPEAT	.CYCLES / 2
     18  1a64		       ea		      nop
     19  1a65					      REPEND
    467  1a65
    468  1a65		       a9 18		      lda	#<DF0FRACDATA
    469  1a67		       85 0e		      sta	PF1	; (PF1L)
    470  1a69
    471  1a69							; enter at cycle ??
    472  1a69				   loop
    473  1a69		       a9 08		      lda	#<DF0DATA	;74
    474  1a6b		       85 06		      STA	COLUP0	; 1
    475  1a6d		       a9 09		      lda	#<DF1DATA	;3
    476  1a6f				   loop2
    477  1a6f		       85 07		      STA	COLUP1	; 6
    478  1a71		       a9 0b		      lda	#<DF3DATA
    479  1a73		       85 1c		      STA	GRP1	; 11
    480  1a75		       a9 20		      lda	#<DF0FLAG
    481  1a77		       85 1d		      STA	ENAM0	; 16
    482  1a79
    483  1a79		       a9 1e		      lda	#<DF6FRACDATA
    484  1a7b		       85 09		      sta	COLUBK	; 21
    485  1a7d		       a9 1c		      lda	#<DF4FRACDATA
    486  1a7f		       85 08		      sta	COLUPF	; 26
    487  1a81		       a9 19		      lda	#<DF1FRACDATA
    488  1a83		       85 0f		      sta	PF2	; 31 (PF2L)
    489  1a85				   loop3
    490  1a85		       a9 12		      lda	#<DF2DATAW
    491  1a87		       85 1b		      STA	GRP0	; 36 (VDEL)
    492  1a89		       a9 23		      lda	#<DF3FLAG
    493  1a8b		       85 1f		      STA	ENABL	; 41 (VDEL)
    494  1a8d		       a2 70		      ldx	#$70	;in case we get kernel 6
    495  1a8f		       a9 1a		      lda	#<DF2FRACDATA	;45
    496  1a91		       85 0f		      sta	PF2	; 48
    497  1a93		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    498  1a95		       a9 1b		      lda	#<DF3FRACDATA	;53
    499  1a97		       85 0e		      sta	PF1	; 56
    500  1a99		       a9 0c		      lda	#<DF4DATA	; 58 this is the repos info
    501  1a9b		       f0 4d		      beq	repo	;60/61
    502  1a9d				   norepo		; 60
    503  1a9d		       a8		      tay		; 62
    504  1a9e		       a9 08		      lda	#<DF0DATA	; 64
    505  1aa0
    506  1aa0		       ae 84 02 	      ldx	INTIM	; 68 timed for 192 lines
    507  1aa3		       f0 60		      beq	exitkernel	; 70/71
    508  1aa5		       85 2a		      sta	HMOVE	; 73
    509  1aa7
    510  1aa7		       85 06		      STA	COLUP0	; 0
    511  1aa9		       a9 09		      lda	#<DF1DATA	;2
    512  1aab		       85 07		      STA	COLUP1	;5
    513  1aad		       a9 0b		      lda	#<DF3DATA
    514  1aaf		       85 1c		      STA	GRP1	; 10
    515  1ab1		       a9 21		      lda	#<DF1FLAG
    516  1ab3		       85 1e		      STA	ENAM1	; 15
    517  1ab5		       a9 18		      lda	#<DF0FRACDATA
    518  1ab7		       85 0e		      sta	PF1	; 20 (PF1L)
    519  1ab9		       a9 19		      lda	#<DF1FRACDATA
    520  1abb		       85 0f		      sta	PF2	; 25 (PF2L)
    521  1abd		       a9 12		      lda	#<DF2DATAW
    522  1abf		       85 1b		      STA	GRP0	; 30 (VDEL)
    523  1ac1		       a9 23		      lda	#<DF3FLAG
    524  1ac3		       85 1f		      STA	ENABL	; 35 (VDEL)
    525  1ac5		       88		      dey		; 37
    526  1ac6		       8c 64 10 	      STY	DF4PUSH	; 41
    527  1ac9		       a0 80		      ldy	#$80	; 43 no movement next line
    528  1acb		       a9 1a		      lda	#<DF2FRACDATA	;45
    529  1acd		       85 0f		      sta	PF2	; 48
    530  1acf		       84 21		      sty	HMP1	; 51 ; from prev. cycle: $80=nomove
    531  1ad1		       a9 1b		      lda	#<DF3FRACDATA	;53
    532  1ad3		       85 0e		      sta	PF1	; 56
    533  1ad5				  -	      ifnconst	DPC_kernel_options
    534  1ad5				  -			;sleep 8 ; REVENG - timing is off - results in a garbled screen
    535  1ad5				  -	      sleep	5	; this is better
    536  1ad5					      else
    537  1ad5		       24 43		      bit	DPC_kernel_options
    538  1ad7					      if	(DPC_kernel_options > $3F)
    539  1ad7		       30 09		      bmi	COLfound
    540  1ad9				  -	      else
    541  1ad9				  -	      bpl	COLfound
    542  1ad9					      endif
    543  1ad9					      endif
    544  1ad9		       86 ce		      stx	temp4	; +3
    545  1adb
    546  1adb				   getbackearly
    547  1adb		       a9 18		      lda	#<DF0FRACDATA	; +2
    548  1add		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    549  1adf		       4c 69 5a 	      JMP	loop+$4000	; 72
    550  1ae2
    551  1ae2					      ifconst	DPC_kernel_options
    552  1ae2				   COLfound
    553  1ae2		       ad 18 10 	      lda	DF0FRACDATA
    554  1ae5		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    555  1ae7		       4c 69 5a 	      JMP	loop+$4000	; 72
    556  1aea					      endif
    557  1aea
    558  1aea				   repo
    559  1aea		       ac 1f 10 	      ldy	DF7FRACDATA	; 65
    560  1aed		       a9 18		      lda	#<DF0FRACDATA	; 67 preload PF1L for next line
    561  1aef				  -	      if	((>repo) > (>norepo))
    562  1aef				  -	      STA	PF1
    563  1aef					      else
    564  1aef		       8d 0e 00 	      STA.w	PF1	; 71 ; sta.w if page doesn't wrap
    565  1af2					      endif
    566  1af2		       a9 08		      lda	#<DF0DATA	;73
    567  1af4		       85 06		      STA	COLUP0	; 0
    568  1af6		       a9 09		      lda	#<DF1DATA
    569  1af8		       85 07		      STA	COLUP1	;5
    570  1afa		       a9 0b		      lda	#<DF3DATA
    571  1afc		       85 1c		      STA	GRP1	; 10
    572  1afe		       a9 21		      lda	#<DF1FLAG
    573  1b00		       85 1e		      STA	ENAM1	; 15
    574  1b02							; repos info holds HMMx
    575  1b02		       6c 0d 10 	      jmp	(DF5DATA)	; 20 grabs df6/df7=lo/hi
    576  1b05
    577  1b05				   exitkernel		; exit the kernel
    578  1b05		       20 c9 5e 	      jsr	scorekernel+$4000	; 1
    579  1b08				   exit
    580  1b08		       a2 ff		      ldx	#255
    581  1b0a		       8e 58 10 	      stx	FASTFETCH
    582  1b0d		       85 02		      sta	WSYNC
    583  1b0f				  -	      ifconst	qtcontroller
    584  1b0f				  -	      lda	qtcontroller
    585  1b0f				  -	      lsr		; bit 0 in carry
    586  1b0f				  -	      lda	#4
    587  1b0f				  -	      ror		; carry into top of A
    588  1b0f					      else
    589  1b0f		       a9 02		      lda	#2
    590  1b11					      endif		; qtcontroller
    591  1b11		       85 01		      STA	VBLANK
    592  1b13		       a9 a7		      lda	#OVERSCAN_LINES
    593  1b15		       8d 96 02 	      sta	TIM64T
    594  1b18		       38		      sec
    595  1b19		       a9 d3		      lda	#KERNEL_LINES
    596  1b1b		       e5 ce		      sbc	temp4
    597  1b1d		       aa		      tax
    598  1b1e		       4a		      lsr
    599  1b1f		       4a		      lsr
    600  1b20		       85 cd		      sta	temp3	; div4
    601  1b22		       4a		      lsr
    602  1b23		       4a		      lsr
    603  1b24		       85 cc		      sta	temp2	; div16
    604  1b26		       4a		      lsr
    605  1b27		       85 cb		      sta	temp1	; div32
    606  1b29		       18		      clc
    607  1b2a		       8a		      txa
    608  1b2b		       65 cc		      adc	temp2
    609  1b2d		       65 cb		      adc	temp1
    610  1b2f		       38		      sec
    611  1b30		       e5 cd		      sbc	temp3
    612  1b32		       85 ce		      sta	temp4	; approx line of first pf coll
      0  1b34					      RETURN
      1  1b34				  -	      ifnconst	bankswitch
      2  1b34				  -	      rts
      3  1b34					      else
      4  1b34		       4c e0 df 	      jmp	BS_return
      5  1b37					      endif
    614  1b37
    615  1b37							; jmp exit
    616  1b37
    617  1b37							; kernels resp1 23/28/33/38/43/48/53/58/63/68/73
    618  1b37
    619  1b37				   kernel1
    620  1b37		       85 11		      sta	RESP1	; 23
    621  1b39		       a9 12		      lda	#<DF2DATAW
    622  1b3b		       85 1b		      STA	GRP0	; 28 (VDEL)
    623  1b3d		       a9 19		      lda	#<DF1FRACDATA
    624  1b3f		       85 0f		      STA	PF2	; 33
    625  1b41		       a9 23		      lda	#<DF3FLAG
    626  1b43		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b45					      sleep	5
      1  1b45				   .CYCLES    SET	5
      2  1b45
      3  1b45				  -	      IF	.CYCLES < 2
      4  1b45				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b45				  -	      ERR
      6  1b45					      ENDIF
      7  1b45
      8  1b45					      IF	.CYCLES & 1
      9  1b45					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b45		       04 00		      nop	0
     11  1b47				  -	      ELSE
     12  1b47				  -	      bit	VSYNC
     13  1b47					      ENDIF
     14  1b47				   .CYCLES    SET	.CYCLES - 3
     15  1b47					      ENDIF
     16  1b47
     17  1b47					      REPEAT	.CYCLES / 2
     18  1b47		       ea		      nop
     19  1b48					      REPEND
    628  1b48		       a9 1a		      lda	#<DF2FRACDATA	;45
    629  1b4a		       85 0f		      sta	PF2	; 48
    630  1b4c		       a9 1b		      lda	#<DF3FRACDATA	;50
    631  1b4e		       85 0e		      sta	PF1	; 53
    632  1b50		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    633  1b52		       85 05		      STA	NUSIZ1	; 58
    634  1b54		       85 0c		      STA	REFP1	; 61
    635  1b56		       4c db 1a 	      jmp	getbackearly	;64
    636  1b59
    637  1b59				   kernel2
    638  1b59		       a9 12		      lda	#<DF2DATAW
    639  1b5b		       85 1b		      STA	GRP0	; 25 (VDEL)
    640  1b5d		       85 11		      sta	RESP1	;28
    641  1b5f		       a9 19		      lda	#<DF1FRACDATA
    642  1b61		       85 0f		      STA	PF2	; 33
    643  1b63		       a9 23		      lda	#<DF3FLAG
    644  1b65		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b67					      sleep	5
      1  1b67				   .CYCLES    SET	5
      2  1b67
      3  1b67				  -	      IF	.CYCLES < 2
      4  1b67				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b67				  -	      ERR
      6  1b67					      ENDIF
      7  1b67
      8  1b67					      IF	.CYCLES & 1
      9  1b67					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b67		       04 00		      nop	0
     11  1b69				  -	      ELSE
     12  1b69				  -	      bit	VSYNC
     13  1b69					      ENDIF
     14  1b69				   .CYCLES    SET	.CYCLES - 3
     15  1b69					      ENDIF
     16  1b69
     17  1b69					      REPEAT	.CYCLES / 2
     18  1b69		       ea		      nop
     19  1b6a					      REPEND
    646  1b6a		       a9 1a		      lda	#<DF2FRACDATA	;45
    647  1b6c		       85 0f		      sta	PF2	; 48
    648  1b6e		       a9 1b		      lda	#<DF3FRACDATA	;50
    649  1b70		       85 0e		      sta	PF1	; 53
    650  1b72		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    651  1b74		       85 05		      STA	NUSIZ1
    652  1b76		       85 0c		      STA	REFP1
    653  1b78		       4c db 1a 	      jmp	getbackearly	;64
    654  1b7b
    655  1b7b				   kernel3
    656  1b7b		       a9 12		      lda	#<DF2DATAW
    657  1b7d		       85 1b		      STA	GRP0	; 25 (VDEL)
    658  1b7f		       a9 19		      lda	#<DF1FRACDATA
    659  1b81		       85 0f		      STA	PF2	; 30
    660  1b83		       85 11		      sta	RESP1	;33
    661  1b85		       a9 23		      lda	#<DF3FLAG
    662  1b87		       85 1f		      STA	ENABL	; 38 (VDEL)
      0  1b89					      sleep	5
      1  1b89				   .CYCLES    SET	5
      2  1b89
      3  1b89				  -	      IF	.CYCLES < 2
      4  1b89				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b89				  -	      ERR
      6  1b89					      ENDIF
      7  1b89
      8  1b89					      IF	.CYCLES & 1
      9  1b89					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b89		       04 00		      nop	0
     11  1b8b				  -	      ELSE
     12  1b8b				  -	      bit	VSYNC
     13  1b8b					      ENDIF
     14  1b8b				   .CYCLES    SET	.CYCLES - 3
     15  1b8b					      ENDIF
     16  1b8b
     17  1b8b					      REPEAT	.CYCLES / 2
     18  1b8b		       ea		      nop
     19  1b8c					      REPEND
    664  1b8c		       a9 1a		      lda	#<DF2FRACDATA	;45
    665  1b8e		       85 0f		      sta	PF2	; 48
    666  1b90		       a9 1b		      lda	#<DF3FRACDATA	;50
    667  1b92		       85 0e		      sta	PF1	; 53
    668  1b94		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    669  1b96		       85 05		      STA	NUSIZ1
    670  1b98		       85 0c		      STA	REFP1
    671  1b9a		       4c db 1a 	      JMP	getbackearly	; 64
    672  1b9d
    673  1b9d				   kernel4
    674  1b9d		       a9 12		      lda	#<DF2DATAW
    675  1b9f		       85 1b		      STA	GRP0	; 25 (VDEL)
    676  1ba1		       a9 23		      lda	#<DF3FLAG
    677  1ba3		       85 1f		      STA	ENABL	; 30(VDEL)
    678  1ba5		       a9 19		      lda	#<DF1FRACDATA
    679  1ba7		       85 0f		      STA	PF2	; 35
    680  1ba9		       85 11		      sta	RESP1	;38
      0  1bab					      sleep	5
      1  1bab				   .CYCLES    SET	5
      2  1bab
      3  1bab				  -	      IF	.CYCLES < 2
      4  1bab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bab				  -	      ERR
      6  1bab					      ENDIF
      7  1bab
      8  1bab					      IF	.CYCLES & 1
      9  1bab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bab		       04 00		      nop	0
     11  1bad				  -	      ELSE
     12  1bad				  -	      bit	VSYNC
     13  1bad					      ENDIF
     14  1bad				   .CYCLES    SET	.CYCLES - 3
     15  1bad					      ENDIF
     16  1bad
     17  1bad					      REPEAT	.CYCLES / 2
     18  1bad		       ea		      nop
     19  1bae					      REPEND
    682  1bae		       a9 1a		      lda	#<DF2FRACDATA	;45
    683  1bb0		       85 0f		      sta	PF2	; 48
    684  1bb2		       a9 1b		      lda	#<DF3FRACDATA	;50
    685  1bb4		       85 0e		      sta	PF1	; 53
    686  1bb6		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    687  1bb8		       85 05		      STA	NUSIZ1	; 58
    688  1bba		       85 0c		      STA	REFP1	; 61
    689  1bbc		       4c db 1a 	      JMP	getbackearly	; 64
    690  1bbf
    691  1bbf				   kernel5
    692  1bbf		       a9 12		      lda	#<DF2DATAW
    693  1bc1		       85 1b		      STA	GRP0	; (VDEL)
    694  1bc3		       a9 23		      lda	#<DF3FLAG
    695  1bc5		       85 1f		      STA	ENABL	; (VDEL)
    696  1bc7		       a9 19		      lda	#<DF1FRACDATA
    697  1bc9		       85 0f		      STA	PF2	; 35
      0  1bcb					      sleep	5
      1  1bcb				   .CYCLES    SET	5
      2  1bcb
      3  1bcb				  -	      IF	.CYCLES < 2
      4  1bcb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1bcb				  -	      ERR
      6  1bcb					      ENDIF
      7  1bcb
      8  1bcb					      IF	.CYCLES & 1
      9  1bcb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1bcb		       04 00		      nop	0
     11  1bcd				  -	      ELSE
     12  1bcd				  -	      bit	VSYNC
     13  1bcd					      ENDIF
     14  1bcd				   .CYCLES    SET	.CYCLES - 3
     15  1bcd					      ENDIF
     16  1bcd
     17  1bcd					      REPEAT	.CYCLES / 2
     18  1bcd		       ea		      nop
     19  1bce					      REPEND
    699  1bce		       85 11		      sta	RESP1	;43
    700  1bd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    701  1bd2		       85 0f		      sta	PF2	; 48
    702  1bd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    703  1bd6		       85 0e		      sta	PF1	; 53
    704  1bd8		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    705  1bda		       85 05		      STA	NUSIZ1
    706  1bdc		       85 0c		      STA	REFP1
    707  1bde		       4c db 1a 	      JMP	getbackearly	; 64
    708  1be1
    709  1be1				   kernel6
    710  1be1		       a9 12		      lda	#<DF2DATAW
    711  1be3		       85 1b		      STA	GRP0	; 25 (VDEL)
    712  1be5		       a9 23		      lda	#<DF3FLAG
    713  1be7		       85 1f		      STA	ENABL	; 30 (VDEL)
    714  1be9		       a9 19		      lda	#<DF1FRACDATA
    715  1beb		       85 0f		      STA	PF2	; 35
    716  1bed		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    717  1bef		       85 05		      STA	NUSIZ1	; 40
    718  1bf1		       85 0c		      STA	REFP1	; 43
    719  1bf3		       a9 1a		      lda	#<DF2FRACDATA	;45
    720  1bf5		       85 0f		      sta	PF2	; 48
    721  1bf7		       a9 1b		      lda	#<DF3FRACDATA	;50
    722  1bf9		       85 11		      sta	RESP1	;53
    723  1bfb							; do a move right by 15
    724  1bfb		       85 0e		      sta	PF1	; 56
    725  1bfd		       86 21		      stx	HMP1	; 59
    726  1bff		       a9 19		      lda	#<DF1FRACDATA
    727  1c01		       85 0f		      sta	PF2	; 64 (PF2L)
    728  1c03		       a9 18		      lda	#<DF0FRACDATA
    729  1c05		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    730  1c07		       a9 08		      lda	#<DF0DATA	; 71
    731  1c09		       85 2a		      sta	HMOVE	; 74 adjust to +15 right
    732  1c0b
    733  1c0b		       85 06		      STA	COLUP0	; 1
    734  1c0d		       a9 09		      lda	#<DF1DATA
    735  1c0f		       85 07		      sta	COLUP1	; 6
    736  1c11		       a9 0b		      lda	#<DF3DATA
    737  1c13		       85 1c		      STA	GRP1	; 11
    738  1c15		       a9 20		      lda	#<DF0FLAG
    739  1c17		       85 1d		      STA	ENAM0	; 16
    740  1c19		       a9 1e		      lda	#<DF6FRACDATA
    741  1c1b		       85 09		      STA	COLUBK	; 21
    742  1c1d		       a9 1c		      lda	#<DF4FRACDATA
    743  1c1f		       85 08		      sta	COLUPF	; 26
      0  1c21					      sleep	2
      1  1c21				   .CYCLES    SET	2
      2  1c21
      3  1c21				  -	      IF	.CYCLES < 2
      4  1c21				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c21				  -	      ERR
      6  1c21					      ENDIF
      7  1c21
      8  1c21				  -	      IF	.CYCLES & 1
      9  1c21				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c21				  -	      nop	0
     11  1c21				  -	      ELSE
     12  1c21				  -	      bit	VSYNC
     13  1c21				  -	      ENDIF
     14  1c21				  -.CYCLES    SET	.CYCLES - 3
     15  1c21					      ENDIF
     16  1c21
     17  1c21					      REPEAT	.CYCLES / 2
     18  1c21		       ea		      nop
     19  1c22					      REPEND
    745  1c22		       4c 85 1a 	      jmp	loop3	; 31
    746  1c25
    747  1c25				   kernel7
    748  1c25		       a9 12		      lda	#<DF2DATAW
    749  1c27		       85 1b		      STA	GRP0	; 25 (VDEL)
    750  1c29		       a9 23		      lda	#<DF3FLAG
    751  1c2b		       85 1f		      STA	ENABL	; 30 (VDEL)
    752  1c2d		       a9 19		      lda	#<DF1FRACDATA
    753  1c2f		       85 0f		      STA	PF2	; 35
    754  1c31		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    755  1c33		       85 05		      STA	NUSIZ1	; 40
    756  1c35		       85 0c		      STA	REFP1	; 43
    757  1c37		       a9 1a		      lda	#<DF2FRACDATA	;45
    758  1c39		       85 0f		      sta	PF2	; 48
      0  1c3b					      sleep	2
      1  1c3b				   .CYCLES    SET	2
      2  1c3b
      3  1c3b				  -	      IF	.CYCLES < 2
      4  1c3b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c3b				  -	      ERR
      6  1c3b					      ENDIF
      7  1c3b
      8  1c3b				  -	      IF	.CYCLES & 1
      9  1c3b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c3b				  -	      nop	0
     11  1c3b				  -	      ELSE
     12  1c3b				  -	      bit	VSYNC
     13  1c3b				  -	      ENDIF
     14  1c3b				  -.CYCLES    SET	.CYCLES - 3
     15  1c3b					      ENDIF
     16  1c3b
     17  1c3b					      REPEAT	.CYCLES / 2
     18  1c3b		       ea		      nop
     19  1c3c					      REPEND
    760  1c3c		       85 11		      sta	RESP1	;53
    761  1c3e		       a9 1b		      lda	#<DF3FRACDATA	;55
    762  1c40		       85 0e		      sta	PF1	; 58
      0  1c42					      sleep	3
      1  1c42				   .CYCLES    SET	3
      2  1c42
      3  1c42				  -	      IF	.CYCLES < 2
      4  1c42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c42				  -	      ERR
      6  1c42					      ENDIF
      7  1c42
      8  1c42					      IF	.CYCLES & 1
      9  1c42					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c42		       04 00		      nop	0
     11  1c44				  -	      ELSE
     12  1c44				  -	      bit	VSYNC
     13  1c44					      ENDIF
     14  1c44				   .CYCLES    SET	.CYCLES - 3
     15  1c44					      ENDIF
     16  1c44
     17  1c44				  -	      REPEAT	.CYCLES / 2
     18  1c44				  -	      nop
     19  1c44					      REPEND
    764  1c44		       4c db 1a 	      JMP	getbackearly	; 64
    765  1c47
    766  1c47				   kernel8
    767  1c47		       a9 12		      lda	#<DF2DATAW
    768  1c49		       85 1b		      STA	GRP0	; (VDEL)
    769  1c4b		       a9 23		      lda	#<DF3FLAG
    770  1c4d		       85 1f		      STA	ENABL	; (VDEL)
    771  1c4f		       a9 19		      lda	#<DF1FRACDATA
    772  1c51		       85 0f		      STA	PF2	; 35
    773  1c53		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    774  1c55		       85 05		      STA	NUSIZ1	; 40
    775  1c57		       85 0c		      STA	REFP1	; 43
    776  1c59		       a9 1a		      lda	#<DF2FRACDATA	;45
    777  1c5b		       85 0f		      sta	PF2	; 48
    778  1c5d		       a9 1b		      lda	#<DF3FRACDATA	;50
    779  1c5f		       85 0e		      sta	PF1	; 53
      0  1c61					      sleep	2
      1  1c61				   .CYCLES    SET	2
      2  1c61
      3  1c61				  -	      IF	.CYCLES < 2
      4  1c61				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c61				  -	      ERR
      6  1c61					      ENDIF
      7  1c61
      8  1c61				  -	      IF	.CYCLES & 1
      9  1c61				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c61				  -	      nop	0
     11  1c61				  -	      ELSE
     12  1c61				  -	      bit	VSYNC
     13  1c61				  -	      ENDIF
     14  1c61				  -.CYCLES    SET	.CYCLES - 3
     15  1c61					      ENDIF
     16  1c61
     17  1c61					      REPEAT	.CYCLES / 2
     18  1c61		       ea		      nop
     19  1c62					      REPEND
    781  1c62		       85 11		      sta	RESP1	;58
      0  1c64					      sleep	3
      1  1c64				   .CYCLES    SET	3
      2  1c64
      3  1c64				  -	      IF	.CYCLES < 2
      4  1c64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c64				  -	      ERR
      6  1c64					      ENDIF
      7  1c64
      8  1c64					      IF	.CYCLES & 1
      9  1c64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c64		       04 00		      nop	0
     11  1c66				  -	      ELSE
     12  1c66				  -	      bit	VSYNC
     13  1c66					      ENDIF
     14  1c66				   .CYCLES    SET	.CYCLES - 3
     15  1c66					      ENDIF
     16  1c66
     17  1c66				  -	      REPEAT	.CYCLES / 2
     18  1c66				  -	      nop
     19  1c66					      REPEND
    783  1c66		       4c db 1a 	      JMP	getbackearly	; 64
    784  1c69
    785  1c69				   kernel9
    786  1c69		       a9 12		      lda	#<DF2DATAW
    787  1c6b		       85 1b		      STA	GRP0	; (VDEL)
    788  1c6d		       a9 23		      lda	#<DF3FLAG
    789  1c6f		       85 1f		      STA	ENABL	; (VDEL)
    790  1c71		       a9 19		      lda	#<DF1FRACDATA
    791  1c73		       85 0f		      STA	PF2	; 35
    792  1c75		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    793  1c77		       85 05		      STA	NUSIZ1	; 40
    794  1c79		       85 0c		      STA	REFP1	; 43
    795  1c7b		       a9 1a		      lda	#<DF2FRACDATA	;45
    796  1c7d		       85 0f		      sta	PF2	; 48
    797  1c7f		       a9 1b		      lda	#<DF3FRACDATA	;50
    798  1c81		       85 0e		      sta	PF1	; 53
      0  1c83					      sleep	5
      1  1c83				   .CYCLES    SET	5
      2  1c83
      3  1c83				  -	      IF	.CYCLES < 2
      4  1c83				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c83				  -	      ERR
      6  1c83					      ENDIF
      7  1c83
      8  1c83					      IF	.CYCLES & 1
      9  1c83					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c83		       04 00		      nop	0
     11  1c85				  -	      ELSE
     12  1c85				  -	      bit	VSYNC
     13  1c85					      ENDIF
     14  1c85				   .CYCLES    SET	.CYCLES - 3
     15  1c85					      ENDIF
     16  1c85
     17  1c85					      REPEAT	.CYCLES / 2
     18  1c85		       ea		      nop
     19  1c86					      REPEND
    800  1c86		       a9 18		      lda	#<DF0FRACDATA
    801  1c88		       85 11		      sta	RESP1	;63
      0  1c8a					      sleep	3
      1  1c8a				   .CYCLES    SET	3
      2  1c8a
      3  1c8a				  -	      IF	.CYCLES < 2
      4  1c8a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1c8a				  -	      ERR
      6  1c8a					      ENDIF
      7  1c8a
      8  1c8a					      IF	.CYCLES & 1
      9  1c8a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1c8a		       04 00		      nop	0
     11  1c8c				  -	      ELSE
     12  1c8c				  -	      bit	VSYNC
     13  1c8c					      ENDIF
     14  1c8c				   .CYCLES    SET	.CYCLES - 3
     15  1c8c					      ENDIF
     16  1c8c
     17  1c8c				  -	      REPEAT	.CYCLES / 2
     18  1c8c				  -	      nop
     19  1c8c					      REPEND
    803  1c8c		       85 0e		      sta	PF1	; 69 (PF1L) too early?
    804  1c8e		       4c 69 1a 	      jmp	loop	;72
    805  1c91
    806  1c91				   kernel10
    807  1c91		       a9 12		      lda	#<DF2DATAW
    808  1c93		       85 1b		      STA	GRP0	; 25 (VDEL)
    809  1c95		       a9 23		      lda	#<DF3FLAG
    810  1c97		       85 1f		      STA	ENABL	; 30 (VDEL)
    811  1c99		       a9 19		      lda	#<DF1FRACDATA
    812  1c9b		       85 0f		      STA	PF2	; 35
    813  1c9d		       a9 1d		      lda	#<DF5FRACDATA	; 37 NUSIZ/RESP info (OK here, GRP1 off)
    814  1c9f		       85 05		      STA	NUSIZ1	; 40
    815  1ca1		       85 0c		      STA	REFP1	; 43
    816  1ca3		       a9 1a		      lda	#<DF2FRACDATA	;45
    817  1ca5		       85 0f		      sta	PF2	; 48
    818  1ca7		       a9 1b		      lda	#<DF3FRACDATA	;50
    819  1ca9		       85 0e		      sta	PF1	; 53
      0  1cab					      sleep	6
      1  1cab				   .CYCLES    SET	6
      2  1cab
      3  1cab				  -	      IF	.CYCLES < 2
      4  1cab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cab				  -	      ERR
      6  1cab					      ENDIF
      7  1cab
      8  1cab				  -	      IF	.CYCLES & 1
      9  1cab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cab				  -	      nop	0
     11  1cab				  -	      ELSE
     12  1cab				  -	      bit	VSYNC
     13  1cab				  -	      ENDIF
     14  1cab				  -.CYCLES    SET	.CYCLES - 3
     15  1cab					      ENDIF
     16  1cab
     17  1cab					      REPEAT	.CYCLES / 2
     18  1cab		       ea		      nop
     17  1cab					      REPEND
     18  1cac		       ea		      nop
     17  1cac					      REPEND
     18  1cad		       ea		      nop
     19  1cae					      REPEND
    821  1cae		       a9 18		      lda	#<DF0FRACDATA
    822  1cb0		       ae 08 10 	      LDX	DF0DATA	; 65
    823  1cb3		       85 11		      sta	RESP1	; 68
    824  1cb5		       85 0e		      STA	PF1	; 71
    825  1cb7		       a9 09		      lda	#<DF1DATA	; 74
    826  1cb9		       86 06		      STX	COLUP0	; 0
    827  1cbb		       4c 6f 1a 	      jmp	loop2	; 3
    828  1cbe
    829  1cbe				   kernel11
    830  1cbe		       a9 12		      lda	#<DF2DATAW
    831  1cc0		       85 1b		      STA	GRP0	; (VDEL)
    832  1cc2		       a9 23		      lda	#<DF3FLAG
    833  1cc4		       85 1f		      STA	ENABL	; (VDEL)
    834  1cc6		       a9 19		      lda	#<DF1FRACDATA
    835  1cc8		       85 0f		      STA	PF2	; 35
    836  1cca		       a9 1d		      lda	#<DF5FRACDATA	; NUSIZ/RESP info (OK here, GRP1 off)
    837  1ccc		       85 05		      STA	NUSIZ1
    838  1cce		       85 0c		      STA	REFP1
    839  1cd0		       a9 1a		      lda	#<DF2FRACDATA	;45
    840  1cd2		       85 0f		      sta	PF2	; 48
    841  1cd4		       a9 1b		      lda	#<DF3FRACDATA	;50
    842  1cd6		       85 0e		      sta	PF1	; 53
      0  1cd8					      sleep	3
      1  1cd8				   .CYCLES    SET	3
      2  1cd8
      3  1cd8				  -	      IF	.CYCLES < 2
      4  1cd8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cd8				  -	      ERR
      6  1cd8					      ENDIF
      7  1cd8
      8  1cd8					      IF	.CYCLES & 1
      9  1cd8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cd8		       04 00		      nop	0
     11  1cda				  -	      ELSE
     12  1cda				  -	      bit	VSYNC
     13  1cda					      ENDIF
     14  1cda				   .CYCLES    SET	.CYCLES - 3
     15  1cda					      ENDIF
     16  1cda
     17  1cda				  -	      REPEAT	.CYCLES / 2
     18  1cda				  -	      nop
     19  1cda					      REPEND
    844  1cda		       a9 19		      lda	#<DF1FRACDATA	;45
    845  1cdc		       85 0f		      sta	PF2	; 61
    846  1cde		       ae 08 10 	      LDX	DF0DATA	; 65
    847  1ce1
    848  1ce1		       a9 18		      lda	#<DF0FRACDATA	; 67
    849  1ce3		       85 0e		      sta	PF1	; 70
    850  1ce5		       85 11		      sta	RESP1	; 73
    851  1ce7		       86 06		      STX	COLUP0	; 0
    852  1ce9		       a9 09		      lda	#<DF1DATA	; 2
    853  1ceb		       85 07		      sta	COLUP1	; 5
    854  1ced		       a9 0b		      lda	#<DF3DATA
    855  1cef		       85 1c		      STA	GRP1	; 10
    856  1cf1		       a9 20		      lda	#<DF0FLAG
    857  1cf3		       85 1d		      STA	ENAM0	; 25
    858  1cf5		       a9 1e		      lda	#<DF6FRACDATA
    859  1cf7		       85 09		      STA	COLUBK	; 20
    860  1cf9		       a9 1c		      lda	#<DF4FRACDATA
    861  1cfb		       85 08		      sta	COLUPF	; 25
      0  1cfd					      sleep	3
      1  1cfd				   .CYCLES    SET	3
      2  1cfd
      3  1cfd				  -	      IF	.CYCLES < 2
      4  1cfd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1cfd				  -	      ERR
      6  1cfd					      ENDIF
      7  1cfd
      8  1cfd					      IF	.CYCLES & 1
      9  1cfd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1cfd		       04 00		      nop	0
     11  1cff				  -	      ELSE
     12  1cff				  -	      bit	VSYNC
     13  1cff					      ENDIF
     14  1cff				   .CYCLES    SET	.CYCLES - 3
     15  1cff					      ENDIF
     16  1cff
     17  1cff				  -	      REPEAT	.CYCLES / 2
     18  1cff				  -	      nop
     19  1cff					      REPEND
    863  1cff		       4c 85 1a 	      jmp	loop3	; 31
    864  1d02
    865  1d02				   set_fetchers
    866  1d02		       ad 6d 1d 	      lda	dflow
    867  1d05		       8d 50 10 	      sta	DF0LOW
    868  1d08		       ad 75 1d 	      lda	dfhigh
    869  1d0b		       8d 68 10 	      sta	DF0HI
    870  1d0e
    871  1d0e		       ad 6e 1d 	      lda	dflow+1
    872  1d11		       8d 51 10 	      sta	DF1LOW
    873  1d14		       ad 76 1d 	      lda	dfhigh+1
    874  1d17		       8d 69 10 	      sta	DF1HI
    875  1d1a
    876  1d1a		       ad 6f 1d 	      lda	dflow+2
    877  1d1d		       8d 52 10 	      sta	DF2LOW
    878  1d20		       ad 77 1d 	      lda	dfhigh+2
    879  1d23		       8d 6a 10 	      sta	DF2HI
    880  1d26
    881  1d26				   set_fetchers36		; sets just 3-6
    882  1d26		       ad 70 1d 	      lda	dflow+3
    883  1d29		       8d 53 10 	      sta	DF3LOW
    884  1d2c		       ad 78 1d 	      lda	dfhigh+3
    885  1d2f		       8d 6b 10 	      sta	DF3HI
    886  1d32
    887  1d32		       ad 71 1d 	      lda	dflow+4
    888  1d35		       8d 54 10 	      sta	DF4LOW
    889  1d38		       ad 79 1d 	      lda	dfhigh+4
    890  1d3b		       8d 6c 10 	      sta	DF4HI
    891  1d3e
    892  1d3e		       ad 72 1d 	      lda	dflow+5
    893  1d41		       8d 55 10 	      sta	DF5LOW
    894  1d44		       ad 7a 1d 	      lda	dfhigh+5
    895  1d47		       8d 6d 10 	      sta	DF5HI
    896  1d4a
    897  1d4a		       ad 73 1d 	      lda	dflow+6
    898  1d4d		       8d 56 10 	      sta	DF6LOW
    899  1d50		       ad 7b 1d 	      lda	dfhigh+6
    900  1d53		       8d 6e 10 	      sta	DF6HI
    901  1d56
    902  1d56		       60		      rts
    903  1d57
    904  1d57							;9d bad
    905  1d57							; the below isn't quite right
    906  1d57							;DF0DATA: COLUP0
    907  1d57							;DF1DATA: COLUP1
    908  1d57							;DF2DATAW: GRP0
    909  1d57							;DF3DATA: GRP1 
    910  1d57							;DF4DATA: 2lk lines until repos/HMP1
    911  1d57							;DF5DATA: low byte of repo kernels (xpos mod 15)
    912  1d57							;DF6DATA: High byte of repo kernels (x pos div 15)
    913  1d57							;DF7DATA: Programmer's stack
    914  1d57							;DF0FRACDATA: PF1L
    915  1d57							;DF1FRACDATA: PF2L
    916  1d57							;DF4FRACDATA: COLUPF
    917  1d57							;DF2FRACDATA: PF2R
    918  1d57							;DF3FRACDATA: PF2L
    919  1d57							;DF5FRACDATA: Sprite NUSIZ1/REFP1 (only during repos)
    920  1d57							;DF6FRACDATA: COLUBK
    921  1d57							;DF7FRACDATA: HMP1
    922  1d57							;DF3FLAG: kernel exit loop ?? (use flags instead?)
    923  1d57							;DF0FLAG: ENAM0
    924  1d57							;DF1FLAG: ENAM1 
    925  1d57							;DF3FLAG: ENABL 
    926  1d57
    927  1d57				   fetcher_address_table
    928  1d57				   kernello
    929  1d57		       37		      .byte.b	<kernel1
    930  1d58		       59		      .byte.b	<kernel2
    931  1d59		       7b		      .byte.b	<kernel3
    932  1d5a		       9d		      .byte.b	<kernel4
    933  1d5b		       bf		      .byte.b	<kernel5
    934  1d5c		       e1		      .byte.b	<kernel6
    935  1d5d		       25		      .byte.b	<kernel7
    936  1d5e		       47		      .byte.b	<kernel8
    937  1d5f		       69		      .byte.b	<kernel9
    938  1d60		       91		      .byte.b	<kernel10
    939  1d61		       be		      .byte.b	<kernel11
    940  1d62				   kernelhi
    941  1d62		       1b		      .byte.b	>kernel1
    942  1d63		       1b		      .byte.b	>kernel2
    943  1d64		       1b		      .byte.b	>kernel3
    944  1d65		       1b		      .byte.b	>kernel4
    945  1d66		       1b		      .byte.b	>kernel5
    946  1d67		       1b		      .byte.b	>kernel6
    947  1d68		       1c		      .byte.b	>kernel7
    948  1d69		       1c		      .byte.b	>kernel8
    949  1d6a		       1c		      .byte.b	>kernel9
    950  1d6b		       1c		      .byte.b	>kernel10
    951  1d6c		       1c		      .byte.b	>kernel11
    952  1d6d				   dflow
    953  1d6d		       08		      .byte.b	<P0COLOR
    954  1d6e		       08		      .byte.b	<P1COLOR
    955  1d6f		       08		      .byte.b	<P0GFX
    956  1d70		       08		      .byte.b	<P1GFX
    957  1d71		       2d		      .byte.b	<P1SKIP
    958  1d72		       08		      .byte.b	<JUMPTABLELO
    959  1d73		       14		      .byte.b	<JUMPTABLEHI
    960  1d74		       a5		      .byte.b	<USERSTACK
    961  1d75				   dfhigh
    962  1d75		       05		      .byte.b	(>P0COLOR) & $0F
    963  1d76		       03		      .byte.b	(>P1COLOR) & $0F
    964  1d77		       04		      .byte.b	(>P0GFX) & $0F
    965  1d78		       02		      .byte.b	(>P1GFX) & $0F
    966  1d79		       0b		      .byte.b	(>P1SKIP) & $0F
    967  1d7a		       0b		      .byte.b	(>JUMPTABLELO) & $0F
    968  1d7b		       0b		      .byte.b	(>JUMPTABLEHI) & $0F
    969  1d7c		       0d		      .byte.b	(>USERSTACK) & $0F
    970  1d7d				   dffraclow
    971  1d7d		       08		      .byte.b	<PF1L
    972  1d7e		       08		      .byte.b	<PF2L
    973  1d7f		       08		      .byte.b	<PF1R
    974  1d80		       08		      .byte.b	<PF2R
    975  1d81		       08		      .byte.b	<PFCOLS
    976  1d82		       39		      .byte.b	<NUSIZREFP
    977  1d83		       a5		      .byte.b	<BKCOLS
    978  1d84		       20		      .byte.b	<P1HMP
    979  1d85				   dffrachi
    980  1d85		       06		      .byte.b	(>PF1L) & $0F
    981  1d86		       07		      .byte.b	(>PF2L) & $0F
    982  1d87		       08		      .byte.b	(>PF1R) & $0F
    983  1d88		       09		      .byte.b	(>PF2R) & $0F
    984  1d89		       0a		      .byte.b	(>PFCOLS) & $0F
    985  1d8a		       0b		      .byte.b	(>NUSIZREFP) & $0F
    986  1d8b		       0b		      .byte.b	(>BKCOLS) & $0F
    987  1d8c		       0b		      .byte.b	(>P1HMP) & $0F
    988  1d8d				   scorepointer
    989  1d8d		       94		      .byte.b	<scoretable
    990  1d8e		       08		      .byte.b	((>scoretable) & $0f) | (((>scoretable) / 2) & $70)
    991  1d8f				   scoresetup		; pointers to digit graphics
    992  1d8f		       45		      .byte.b	<scoredata
    993  1d90		       0b		      .byte.b	(>scoredata) & $0F
    994  1d91				   Hmval		; 112 wuz first
    995  1d91		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240
    996  1d99				   Hmval74
    997  1d99		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128
    998  1da0		       60 50 40 30*	      .byte.b	96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96
    999  1db0		       50 40 30 20*	      .byte.b	80, 64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80
   1000  1dc0		       40 30 20 10*	      .byte.b	64, 48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64
   1001  1dd0		       30 20 10 01*	      .byte.b	48, 32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48
   1002  1de0		       20 10 01 f0*	      .byte.b	32, 16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32
   1003  1df0		       10 01 f0 e0*	      .byte.b	16, 1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16
   1004  1e00		       01 f0 e0 d0*	      .byte.b	1, 240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1
   1005  1e10		       f0 e0 d0 c0*	      .byte.b	240, 224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240
   1006  1e20		       e0 d0 c0 b0*	      .byte.b	224, 208, 192, 176, 160, 144, 128, 96, 80, 64, 48, 32, 16, 1, 240, 224, 208, 192
   1007  1e32		       b0 a0 90 80*	      .byte.b	176,160,144,128,16,1,240,224
   1008  1e3a
   1009  1e3a
   1010  1e3a				   kernel_setup
   1011  1e3a							;--position P0, top P1, M0, M1, BL
   1012  1e3a		       a2 00		      ldx	#0	; first sprite displayed
   1013  1e3c		       b5 85		      lda	SpriteGfxIndex,x
   1014  1e3e		       aa		      tax
   1015  1e3f		       b5 90		      lda	player1x,x
   1016  1e41		       c9 a0		      cmp	#160
   1017  1e43		       90 0a		      bcc	nostorep1
   1018  1e45		       c9 d0		      cmp	#208
   1019  1e47		       b0 02		      bcs	ksadjustdown
   1020  1e49							; 160-208: minus 160
   1021  1e49							;add 160 is like minus 96
   1022  1e49							; so minus 64
   1023  1e49		       e9 3f		      sbc	#63	;cc
   1024  1e4b				   ksadjustdown
   1025  1e4b							; 209-255: add 160 
   1026  1e4b		       69 9f		      adc	#159	; cs
   1027  1e4d		       95 90		      sta	player1x,x
   1028  1e4f				   nostorep1
   1029  1e4f		       85 02		      sta	WSYNC
   1030  1e51		       a2 04		      ldx	#4
   1031  1e53		       85 81		      sta	topP1x	; cache top p1
   1032  1e55				   HorPosLoop
   1033  1e55		       b5 80		      lda	player0x,X
   1034  1e57		       38		      sec
   1035  1e58				   DivideLoop
   1036  1e58		       e9 0f		      sbc	#15
   1037  1e5a		       b0 fc		      bcs	DivideLoop
      0  1e5c					      sleep	4
      1  1e5c				   .CYCLES    SET	4
      2  1e5c
      3  1e5c				  -	      IF	.CYCLES < 2
      4  1e5c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1e5c				  -	      ERR
      6  1e5c					      ENDIF
      7  1e5c
      8  1e5c				  -	      IF	.CYCLES & 1
      9  1e5c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1e5c				  -	      nop	0
     11  1e5c				  -	      ELSE
     12  1e5c				  -	      bit	VSYNC
     13  1e5c				  -	      ENDIF
     14  1e5c				  -.CYCLES    SET	.CYCLES - 3
     15  1e5c					      ENDIF
     16  1e5c
     17  1e5c					      REPEAT	.CYCLES / 2
     18  1e5c		       ea		      nop
     17  1e5c					      REPEND
     18  1e5d		       ea		      nop
     19  1e5e					      REPEND
   1039  1e5e		       95 10		      sta	RESP0,X
   1040  1e60		       85 02		      sta	WSYNC
   1041  1e62		       ca		      dex		;2
   1042  1e63		       10 f0		      bpl	HorPosLoop	;4/5
   1043  1e65
   1044  1e65		       a4 80		      ldy	player0x	; 7
   1045  1e67		       b9 91 1d 	      lda	Hmval,y	; 11
   1046  1e6a		       85 20		      sta	HMP0	; 14
   1047  1e6c
   1048  1e6c		       a4 81		      ldy	player0x+1
   1049  1e6e		       b9 91 1d 	      lda	Hmval,y
   1050  1e71		       85 21		      sta	HMP0+1	; 24
   1051  1e73
   1052  1e73		       a4 82		      ldy	player0x+2
   1053  1e75		       b9 91 1d 	      lda	Hmval,y
   1054  1e78		       85 22		      sta	HMP0+2	; 34
   1055  1e7a
   1056  1e7a		       a4 83		      ldy	player0x+3
   1057  1e7c		       b9 91 1d 	      lda	Hmval,y
   1058  1e7f		       85 23		      sta	HMP0+3	; 44
   1059  1e81
   1060  1e81		       a4 84		      ldy	player0x+4
   1061  1e83		       b9 91 1d 	      lda	Hmval,y
   1062  1e86		       85 24		      sta	HMP0+4	; 54
   1063  1e88
   1064  1e88		       85 02		      sta	WSYNC
   1065  1e8a		       85 2a		      sta	HMOVE
   1066  1e8c
   1067  1e8c				   myrts
   1068  1e8c		       60		      rts
   1069  1e8d
   1070  1e8d
   1071  1e8d				   pfsetup
   1072  1e8d
   1073  1e8d		       84 cb		      sty	temp1
   1074  1e8f		       85 cc		      sta	temp2
   1075  1e91		       86 cd		      stx	temp3
   1076  1e93		       a2 03		      ldx	#3
   1077  1e95				   pfsetupp
   1078  1e95		       bd 7d 1d 	      lda	dffraclow,x
   1079  1e98		       9d 50 10 	      sta	DF0LOW,x
   1080  1e9b		       bd 85 1d 	      lda	dffrachi,x
   1081  1e9e		       9d 68 10 	      sta	DF0HI,x
   1082  1ea1		       a5 cc		      lda	temp2
   1083  1ea3		       8d 59 10 	      sta	PARAMETER
   1084  1ea6		       a5 cd		      lda	temp3
   1085  1ea8		       8d 59 10 	      sta	PARAMETER
   1086  1eab		       8e 59 10 	      stx	PARAMETER
   1087  1eae		       8c 59 10 	      sty	PARAMETER
   1088  1eb1		       a9 01		      LDA	#1
   1089  1eb3		       8d 5a 10 	      sta	CALLFUNCTION
   1090  1eb6		       18		      clc
   1091  1eb7		       a5 cc		      lda	temp2
   1092  1eb9		       65 cb		      adc	temp1
   1093  1ebb		       85 cc		      sta	temp2
   1094  1ebd		       a5 cd		      lda	temp3
   1095  1ebf		       69 00		      adc	#0
   1096  1ec1		       85 cd		      sta	temp3
   1097  1ec3		       ca		      dex
   1098  1ec4		       10 cf		      bpl	pfsetupp
      0  1ec6					      RETURN
      1  1ec6				  -	      ifnconst	bankswitch
      2  1ec6				  -	      rts
      3  1ec6					      else
      4  1ec6		       4c e0 df 	      jmp	BS_return
      5  1ec9					      endif
   1100  1ec9
   1101  1ec9
   1102  1ec9				   scorekernel
   1103  1ec9				  -	      ifconst	minikernel
   1104  1ec9				  -			;; disable fast fetch, call the minikernel, and re-enable fast fetch
   1105  1ec9				  -	      lda	#255
   1106  1ec9				  -	      sta	FASTFETCH
   1107  1ec9				  -	      jsr	minikernel
   1108  1ec9				  -	      lda	#0
   1109  1ec9				  -	      sta.w	FASTFETCH
   1110  1ec9					      endif
   1111  1ec9		       a6 eb		      ldx	scorecolor
   1112  1ecb		       86 06		      stx	COLUP0
   1113  1ecd		       86 07		      stx	COLUP1
   1114  1ecf		       a2 00		      ldx	#0
   1115  1ed1		       86 0e		      STx	PF1
   1116  1ed3		       86 0b		      stx	REFP0
   1117  1ed5		       86 0c		      stx	REFP1
   1118  1ed7		       86 1b		      STx	GRP0
   1119  1ed9		       86 1c		      STx	GRP1
   1120  1edb		       86 0f		      STx	PF2
   1121  1edd		       86 2b		      stx	HMCLR
   1122  1edf		       86 1d		      stx	ENAM0
   1123  1ee1		       86 1e		      stx	ENAM1
   1124  1ee3		       86 1f		      stx	ENABL
   1125  1ee5
   1126  1ee5
   1127  1ee5				  -	      ifconst	pfscore
   1128  1ee5				  -	      lda	pfscorecolor
   1129  1ee5				  -	      sta	COLUPF
   1130  1ee5					      endif
   1131  1ee5
   1132  1ee5				  -	      ifconst	noscore
   1133  1ee5				  -	      ldx	#10
   1134  1ee5				  -noscoreloop
   1135  1ee5				  -	      sta	WSYNC
   1136  1ee5				  -	      dex
   1137  1ee5				  -	      bpl	noscoreloop
   1138  1ee5				  -	      rts
   1139  1ee5					      else
   1140  1ee5
   1141  1ee5		       85 2b		      sta	HMCLR
   1142  1ee7		       a2 f0		      ldx	#$f0
   1143  1ee9		       86 20		      stx	HMP0
   1144  1eeb
   1145  1eeb							; set up fetchers 0-5 to handle score digits
   1146  1eeb		       a2 45		      ldx	#<(scoredata)
   1147  1eed		       8e 56 10 	      stx	DF6LOW
   1148  1ef0		       a2 0b		      ldx	#(>(scoredata)) & $0F
   1149  1ef2		       8e 6e 10 	      stx	DF6HI
   1150  1ef5		       a2 4d		      ldx	#<(scoredata+8)
   1151  1ef7		       8e 50 10 	      stx	DF0LOW
   1152  1efa		       a2 0b		      ldx	#(>(scoredata+8)) & $0F
   1153  1efc		       8e 68 10 	      stx	DF0HI
   1154  1eff		       a2 55		      ldx	#<(scoredata+16)
   1155  1f01		       8e 51 10 	      stx	DF1LOW
   1156  1f04							; cycle 0??
   1157  1f04		       a2 0b		      ldx	#(>(scoredata+16)) & $0F
   1158  1f06		       8e 69 10 	      stx	DF1HI
   1159  1f09		       a2 5d		      ldx	#<(scoredata+24)
   1160  1f0b		       8e 52 10 	      stx	DF2LOW
   1161  1f0e		       a2 0b		      ldx	#(>(scoredata+24)) & $0F
   1162  1f10		       8e 6a 10 	      stx	DF2HI
   1163  1f13
   1164  1f13		       85 02		      sta	WSYNC
   1165  1f15		       a2 00		      ldx	#0
   1166  1f17		       86 1b		      STx	GRP0
   1167  1f19		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1168  1f1b
   1169  1f1b		       a2 65		      ldx	#<(scoredata+32)
   1170  1f1d		       8e 53 10 	      stx	DF3LOW
   1171  1f20		       a2 0b		      ldx	#(>(scoredata+32)) & $0F
   1172  1f22		       8e 6b 10 	      stx	DF3HI
   1173  1f25		       a2 6d		      ldx	#<(scoredata+40)
   1174  1f27		       8e 54 10 	      stx	DF4LOW
   1175  1f2a		       a2 0b		      ldx	#(>(scoredata+40)) & $0F
   1176  1f2c		       8e 6c 10 	      stx	DF4HI
   1177  1f2f
   1178  1f2f		       a0 07		      LDY	#7
   1179  1f31		       a2 03		      LDx	#$03
   1180  1f33		       84 25		      STY	VDELP0
   1181  1f35		       85 10		      STA	RESP0
   1182  1f37		       85 11		      STA	RESP1
   1183  1f39		       84 cb		      sty	temp1
   1184  1f3b
   1185  1f3b		       86 04		      STx	NUSIZ0
   1186  1f3d		       86 05		      STx	NUSIZ1
   1187  1f3f		       86 26		      STx	VDELP1
   1188  1f41		       a2 75		      ldx	#<(scoredata+48)
   1189  1f43		       8e 55 10 	      stx	DF5LOW
   1190  1f46		       a2 0b		      ldx	#(>(scoredata+48)) & $0F
   1191  1f48		       8e 6d 10 	      stx	DF5HI
   1192  1f4b		       8d 2a 00 	      STA.w	HMOVE	; cycle 73 ?
   1193  1f4e				   scoreloop
   1194  1f4e		       a9 0e		      lda	#<DF6DATA	;59
   1195  1f50		       85 06		      sta	COLUP0	;62
   1196  1f52		       85 07		      sta	COLUP1	;65
   1197  1f54		       a9 09		      lda	#<DF1DATA	;75
   1198  1f56		       85 1b		      sta	GRP0	;2
   1199  1f58		       a9 08		      lda	#<DF0DATA	;4
   1200  1f5a		       85 1c		      sta	GRP1	;7
   1201  1f5c		       a9 0b		      lda	#<DF3DATA	;9
   1202  1f5e		       85 1b		      sta	GRP0	;12
   1203  1f60
   1204  1f60							; REVENG - rearranged to correct pf write timing and A register overwrite
   1205  1f60				  -	      ifconst	pfscore
   1206  1f60				  -	      lda	pfscore1
   1207  1f60				  -	      sta	PF1
   1208  1f60					      else
      0  1f60					      sleep	6
      1  1f60				   .CYCLES    SET	6
      2  1f60
      3  1f60				  -	      IF	.CYCLES < 2
      4  1f60				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f60				  -	      ERR
      6  1f60					      ENDIF
      7  1f60
      8  1f60				  -	      IF	.CYCLES & 1
      9  1f60				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f60				  -	      nop	0
     11  1f60				  -	      ELSE
     12  1f60				  -	      bit	VSYNC
     13  1f60				  -	      ENDIF
     14  1f60				  -.CYCLES    SET	.CYCLES - 3
     15  1f60					      ENDIF
     16  1f60
     17  1f60					      REPEAT	.CYCLES / 2
     18  1f60		       ea		      nop
     17  1f60					      REPEND
     18  1f61		       ea		      nop
     17  1f61					      REPEND
     18  1f62		       ea		      nop
     19  1f63					      REPEND
   1210  1f63					      endif
      0  1f63					      sleep	5
      1  1f63				   .CYCLES    SET	5
      2  1f63
      3  1f63				  -	      IF	.CYCLES < 2
      4  1f63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f63				  -	      ERR
      6  1f63					      ENDIF
      7  1f63
      8  1f63					      IF	.CYCLES & 1
      9  1f63					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f63		       04 00		      nop	0
     11  1f65				  -	      ELSE
     12  1f65				  -	      bit	VSYNC
     13  1f65					      ENDIF
     14  1f65				   .CYCLES    SET	.CYCLES - 3
     15  1f65					      ENDIF
     16  1f65
     17  1f65					      REPEAT	.CYCLES / 2
     18  1f65		       ea		      nop
     19  1f66					      REPEND
   1212  1f66		       ae 0a 10 	      ldx	DF2DATA	;16
   1213  1f69		       ac 0d 10 	      ldy	DF5DATA	;20
   1214  1f6c		       a9 0c		      lda	#<DF4DATA	;22 
   1215  1f6e
   1216  1f6e		       86 1c		      stx	GRP1	;40
   1217  1f70		       84 1b		      sty	GRP0	;43
   1218  1f72		       85 1c		      sta	GRP1	;46
   1219  1f74		       85 1b		      sta	GRP0	;49
   1220  1f76				  -	      ifconst	pfscore
   1221  1f76				  -	      lda	pfscore2
   1222  1f76				  -	      sta	PF1
   1223  1f76					      else
      0  1f76					      sleep	6
      1  1f76				   .CYCLES    SET	6
      2  1f76
      3  1f76				  -	      IF	.CYCLES < 2
      4  1f76				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f76				  -	      ERR
      6  1f76					      ENDIF
      7  1f76
      8  1f76				  -	      IF	.CYCLES & 1
      9  1f76				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f76				  -	      nop	0
     11  1f76				  -	      ELSE
     12  1f76				  -	      bit	VSYNC
     13  1f76				  -	      ENDIF
     14  1f76				  -.CYCLES    SET	.CYCLES - 3
     15  1f76					      ENDIF
     16  1f76
     17  1f76					      REPEAT	.CYCLES / 2
     18  1f76		       ea		      nop
     17  1f76					      REPEND
     18  1f77		       ea		      nop
     17  1f77					      REPEND
     18  1f78		       ea		      nop
     19  1f79					      REPEND
   1225  1f79					      endif
   1226  1f79							; sleep 2 ;57
      0  1f79					      sleep	6
      1  1f79				   .CYCLES    SET	6
      2  1f79
      3  1f79				  -	      IF	.CYCLES < 2
      4  1f79				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1f79				  -	      ERR
      6  1f79					      ENDIF
      7  1f79
      8  1f79				  -	      IF	.CYCLES & 1
      9  1f79				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1f79				  -	      nop	0
     11  1f79				  -	      ELSE
     12  1f79				  -	      bit	VSYNC
     13  1f79				  -	      ENDIF
     14  1f79				  -.CYCLES    SET	.CYCLES - 3
     15  1f79					      ENDIF
     16  1f79
     17  1f79					      REPEAT	.CYCLES / 2
     18  1f79		       ea		      nop
     17  1f79					      REPEND
     18  1f7a		       ea		      nop
     17  1f7a					      REPEND
     18  1f7b		       ea		      nop
     19  1f7c					      REPEND
   1228  1f7c		       c6 cb		      dec	temp1	;70
   1229  1f7e		       10 ce		      bpl	scoreloop	;72/73
   1230  1f80		       a2 00		      LDx	#0
   1231  1f82		       86 0e		      stx	PF1
   1232  1f84		       86 1b		      STx	GRP0
   1233  1f86		       86 1c		      STx	GRP1
   1234  1f88		       86 25		      STx	VDELP0
   1235  1f8a		       86 26		      STx	VDELP1	;do we need these
   1236  1f8c		       86 04		      STx	NUSIZ0
   1237  1f8e		       86 05		      STx	NUSIZ1
   1238  1f90
   1239  1f90		       60		      rts
   1240  1f91
   1241  1f91
   1242  1f91					      endif		; noscore
   1243  1f91				   game
   1244  1f91				   .
   1245  1f91							; 
   1246  1f91
   1247  1f91				   .
   1248  1f91							; 
   1249  1f91
   1250  1f91				   .
   1251  1f91							; 
   1252  1f91
   1253  1f91				   .
   1254  1f91							; 
   1255  1f91
   1256  1f91				   .L00 		;  set kernel DPC + 
   1257  1f91
   1258  1f91				   .
   1259  1f91							; 
   1260  1f91
   1261  1f91				   .
   1262  1f91							; 
   1263  1f91
   1264  1f91				   .
   1265  1f91							; 
   1266  1f91
   1267  1f91				   .
   1268  1f91							; 
   1269  1f91
   1270  1f91				   .
   1271  1f91							; 
   1272  1f91
   1273  1f91				   .
   1274  1f91							; 
   1275  1f91
   1276  1f91				   .L01 		;  set tv ntsc
   1277  1f91
   1278  1f91				   .
   1279  1f91							; 
   1280  1f91
   1281  1f91				   .
   1282  1f91							; 
   1283  1f91
   1284  1f91				   .
   1285  1f91							; 
   1286  1f91
   1287  1f91				   .
   1288  1f91							; 
   1289  1f91
   1290  1f91				   .
   1291  1f91							; 
   1292  1f91
   1293  1f91				   .
   1294  1f91							; 
   1295  1f91
   1296  1f91				   .L02 		;  set kernel_options collision(player1,playfield)
   1297  1f91
   1298  1f91		       00 43	   DPC_kernel_options =	CXP1FB+$40
   1299  1f91				   .
   1300  1f91							; 
   1301  1f91
   1302  1f91				   .
   1303  1f91							; 
   1304  1f91
   1305  1f91				   .
   1306  1f91							; 
   1307  1f91
   1308  1f91				   .
   1309  1f91							; 
   1310  1f91
   1311  1f91				   .
   1312  1f91							; 
   1313  1f91
   1314  1f91				   .
   1315  1f91							; 
   1316  1f91
   1317  1f91				   .
   1318  1f91							; 
   1319  1f91
   1320  1f91				   .
   1321  1f91							; 
   1322  1f91
   1323  1f91				   .
   1324  1f91							; 
   1325  1f91
   1326  1f91				   .
   1327  1f91							; 
   1328  1f91
   1329  1f91				   .
   1330  1f91							; 
   1331  1f91
   1332  1f91				   .
   1333  1f91							; 
   1334  1f91
   1335  1f91				   .
   1336  1f91							; 
   1337  1f91
   1338  1f91				   .L03 		;  dim _Scroll_Counter  =  a
   1339  1f91
   1340  1f91				   .
   1341  1f91							; 
   1342  1f91
   1343  1f91				   .
   1344  1f91							; 
   1345  1f91
   1346  1f91				   .
   1347  1f91							; 
   1348  1f91
   1349  1f91				   .
   1350  1f91							; 
   1351  1f91
   1352  1f91				   .L04 		;  dim _Bit0_Reset_Restrainer	=  y
   1353  1f91
   1354  1f91				   .L05 		;  dim _Bit7_Flip_Scroll  =  y
   1355  1f91
   1356  1f91				   .
   1357  1f91							; 
   1358  1f91
   1359  1f91				   .
   1360  1f91							; 
   1361  1f91
   1362  1f91				   .
   1363  1f91							; 
   1364  1f91
   1365  1f91				   .L06 		;  goto __Bank_2 bank2
   1366  1f91
   1367  1f91		       85 81		      sta	temp7
   1368  1f93		       a9 30		      lda	#>(.__Bank_2-1)
   1369  1f95		       48		      pha
   1370  1f96		       a9 a3		      lda	#<(.__Bank_2-1)
   1371  1f98		       48		      pha
   1372  1f99		       a5 81		      lda	temp7
   1373  1f9b		       48		      pha
   1374  1f9c		       8a		      txa
   1375  1f9d		       48		      pha
   1376  1f9e		       a2 02		      ldx	#2
   1377  1fa0		       4c ee df 	      jmp	BS_jsr
   1378  1fa3				   .
   1379  1fa3							; 
   1380  1fa3
   1381  1fa3				   .
   1382  1fa3							; 
   1383  1fa3
   1384  1fa3				   .
   1385  1fa3							; 
   1386  1fa3
   1387  1fa3				   .L07 		;  bank 2
   1388  1fa3
   1389  1fa3					      if	ECHO1
      49 bytes of ROM space left in bank 1
   1390  1fa3					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   1391  1fa3					      endif
   1392  1fa3		       00 01	   ECHO1      =	1
   1393  1fd4					      ORG	$1FF4-bscode_length
   1394  1fd4					      RORG	$1FF4-bscode_length
   1395  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   1396  1fd6					      ifconst	FASTFETCH	; using DPC+
   1397  1fd6		       8e 58 10 	      stx	FASTFETCH
   1398  1fd9					      endif
   1399  1fd9		       9a		      txs
   1400  1fda				  -	      if	bankswitch == 64
   1401  1fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1402  1fda					      else
   1403  1fda		       a9 18		      lda	#>(start-1)
   1404  1fdc					      endif
   1405  1fdc		       48		      pha
   1406  1fdd		       a9 e3		      lda	#<(start-1)
   1407  1fdf		       48		      pha
   1408  1fe0		       48		      pha
   1409  1fe1		       8a		      txa
   1410  1fe2		       48		      pha
   1411  1fe3		       ba		      tsx
   1412  1fe4					      if	bankswitch != 64
   1413  1fe4		       b5 04		      lda	4,x	; get high byte of return address
   1414  1fe6		       2a		      rol
   1415  1fe7		       2a		      rol
   1416  1fe8		       2a		      rol
   1417  1fe9		       2a		      rol
   1418  1fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1419  1fec		       aa		      tax
   1420  1fed		       e8		      inx
   1421  1fee				  -	      else
   1422  1fee				  -	      lda	4,x	; get high byte of return address
   1423  1fee				  -	      tay
   1424  1fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1425  1fee				  -	      sta	4,x
   1426  1fee				  -	      tya
   1427  1fee				  -	      lsr
   1428  1fee				  -	      lsr
   1429  1fee				  -	      lsr
   1430  1fee				  -	      lsr
   1431  1fee				  -	      tax
   1432  1fee				  -	      inx
   1433  1fee					      endif
   1434  1fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1435  1ff1		       68		      pla
   1436  1ff2		       aa		      tax
   1437  1ff3		       68		      pla
   1438  1ff4		       60		      rts
   1439  1ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1440  1ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1441  1ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1442  1ff5					      endif
   1443  1ffc					      ORG	$1FFC
   1444  1ffc					      RORG	$1FFC
   1445  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1446  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
   1447  2000					      ORG	$2000
   1448  2000					      RORG	$3000
   1449  2000				   HMdiv
   1450  2000		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0
   1451  2007		       01 01 01 01*	      .byte.b	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
   1452  2017		       02 02 02 02*	      .byte.b	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3
   1453  2027		       03 03 03 03*	      .byte.b	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4
   1454  2037		       04 04 04 04*	      .byte.b	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5
   1455  2047		       05 05 05 05*	      .byte.b	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6
   1456  2057		       06 06 06 06*	      .byte.b	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7
   1457  2067		       07 07 07 07*	      .byte.b	7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8
   1458  2077		       08 08 08 08*	      .byte.b	8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9
   1459  2087		       09 09 09 09*	      .byte.b	9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
   1460  2097		       0a 0a 0a 0a*	      .byte.b	10,10,10,10,10,10,0,0,0
   1461  20a0				   .L08 		;  temp1 = temp1
   1462  20a0
   1463  20a0		       a5 cb		      LDA	temp1
   1464  20a2		       85 cb		      STA	temp1
   1465  20a4				   .
   1466  20a4							; 
   1467  20a4
   1468  20a4				   .
   1469  20a4							; 
   1470  20a4
   1471  20a4				   .
   1472  20a4							; 
   1473  20a4
   1474  20a4				   .__Bank_2
   1475  20a4							; __Bank_2
   1476  20a4
   1477  20a4				   .
   1478  20a4							; 
   1479  20a4
   1480  20a4				   .
   1481  20a4							; 
   1482  20a4
   1483  20a4				   .
   1484  20a4							; 
   1485  20a4
   1486  20a4				   .
   1487  20a4							; 
   1488  20a4
   1489  20a4				   .
   1490  20a4							; 
   1491  20a4
   1492  20a4				   .
   1493  20a4							; 
   1494  20a4
   1495  20a4				   .
   1496  20a4							; 
   1497  20a4
   1498  20a4				   .
   1499  20a4							; 
   1500  20a4
   1501  20a4				   .__Start_Restart
   1502  20a4							; __Start_Restart
   1503  20a4
   1504  20a4				   .
   1505  20a4							; 
   1506  20a4
   1507  20a4				   .
   1508  20a4							; 
   1509  20a4
   1510  20a4				   .
   1511  20a4							; 
   1512  20a4
   1513  20a4				   .
   1514  20a4							; 
   1515  20a4
   1516  20a4				   .
   1517  20a4							; 
   1518  20a4
   1519  20a4				   .
   1520  20a4							; 
   1521  20a4
   1522  20a4				   .L09 		;  drawscreen
   1523  20a4
   1524  20a4		       85 81		      sta	temp7
   1525  20a6		       a9 30		      lda	#>(ret_point1-1)
   1526  20a8		       48		      pha
   1527  20a9		       a9 bb		      lda	#<(ret_point1-1)
   1528  20ab		       48		      pha
   1529  20ac		       a9 19		      lda	#>(drawscreen-1)
   1530  20ae		       48		      pha
   1531  20af		       a9 48		      lda	#<(drawscreen-1)
   1532  20b1		       48		      pha
   1533  20b2		       a5 81		      lda	temp7
   1534  20b4		       48		      pha
   1535  20b5		       8a		      txa
   1536  20b6		       48		      pha
   1537  20b7		       a2 01		      ldx	#1
   1538  20b9		       4c ee df 	      jmp	BS_jsr
   1539  20bc				   ret_point1
   1540  20bc				   .
   1541  20bc							; 
   1542  20bc
   1543  20bc				   .
   1544  20bc							; 
   1545  20bc
   1546  20bc				   .
   1547  20bc							; 
   1548  20bc
   1549  20bc				   .
   1550  20bc							; 
   1551  20bc
   1552  20bc				   .
   1553  20bc							; 
   1554  20bc
   1555  20bc				   .
   1556  20bc							; 
   1557  20bc
   1558  20bc				   .L010		;  pfclear
   1559  20bc
   1560  20bc		       a9 a4		      lda	#<C_function
   1561  20be		       8d 50 10 	      sta	DF0LOW
   1562  20c1		       a9 01		      lda	#(>C_function) & $0F
   1563  20c3		       8d 68 10 	      sta	DF0HI
   1564  20c6		       a2 1c		      ldx	#28
   1565  20c8		       8e 78 10 	      stx	DF0WRITE
   1566  20cb		       a9 00		      LDA	#0
   1567  20cd		       8d 78 10 	      sta	DF0WRITE
   1568  20d0		       a9 ff		      lda	#255
   1569  20d2		       8d 5a 10 	      sta	CALLFUNCTION
   1570  20d5				   .
   1571  20d5							; 
   1572  20d5
   1573  20d5				   .
   1574  20d5							; 
   1575  20d5
   1576  20d5				   .
   1577  20d5							; 
   1578  20d5
   1579  20d5				   .
   1580  20d5							; 
   1581  20d5
   1582  20d5				   .
   1583  20d5							; 
   1584  20d5
   1585  20d5				   .
   1586  20d5							; 
   1587  20d5
   1588  20d5				   .L011		;  AUDV0  =  0  :  AUDV1  =  0
   1589  20d5
   1590  20d5		       a9 00		      LDA	#0
   1591  20d7		       85 19		      STA	AUDV0
   1592  20d9		       85 1a		      STA	AUDV1
   1593  20db				   .
   1594  20db							; 
   1595  20db
   1596  20db				   .
   1597  20db							; 
   1598  20db
   1599  20db				   .
   1600  20db							; 
   1601  20db
   1602  20db				   .
   1603  20db							; 
   1604  20db
   1605  20db				   .
   1606  20db							; 
   1607  20db
   1608  20db				   .
   1609  20db							; 
   1610  20db
   1611  20db				   .L012		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1612  20db
   1613  20db		       a9 00		      LDA	#0
   1614  20dd		       85 d1		      STA	a
   1615  20df		       85 d2		      STA	b
   1616  20e1		       85 d3		      STA	c
   1617  20e3		       85 d4		      STA	d
   1618  20e5		       85 d5		      STA	e
   1619  20e7		       85 d6		      STA	f
   1620  20e9		       85 d7		      STA	g
   1621  20eb		       85 d8		      STA	h
   1622  20ed		       85 d9		      STA	i
   1623  20ef				   .L013		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1624  20ef
   1625  20ef		       a9 00		      LDA	#0
   1626  20f1		       85 da		      STA	j
   1627  20f3		       85 db		      STA	k
   1628  20f5		       85 dc		      STA	l
   1629  20f7		       85 dd		      STA	m
   1630  20f9		       85 de		      STA	n
   1631  20fb		       85 df		      STA	o
   1632  20fd		       85 e0		      STA	p
   1633  20ff		       85 e1		      STA	q
   1634  2101		       85 e2		      STA	r
   1635  2103				   .L014		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0
   1636  2103
   1637  2103		       a9 00		      LDA	#0
   1638  2105		       85 e3		      STA	s
   1639  2107		       85 e4		      STA	t
   1640  2109		       85 e5		      STA	u
   1641  210b		       85 e6		      STA	v
   1642  210d		       85 e7		      STA	w
   1643  210f		       85 e8		      STA	x
   1644  2111		       85 e9		      STA	y
   1645  2113		       85 ea		      STA	z
   1646  2115				   .L015		;  var0  =  0	:  var1  =  0  :  var2	=  0  :  var3  =  0  :	var4  =  0
   1647  2115
   1648  2115		       a9 00		      LDA	#0
   1649  2117		       85 ec		      STA	var0
   1650  2119		       85 ed		      STA	var1
   1651  211b		       85 ee		      STA	var2
   1652  211d		       85 ef		      STA	var3
   1653  211f		       85 f0		      STA	var4
   1654  2121				   .L016		;  var5  =  0	:  var6  =  0  :  var7	=  0  :  var8  =  0
   1655  2121
   1656  2121		       a9 00		      LDA	#0
   1657  2123		       85 f1		      STA	var5
   1658  2125		       85 f2		      STA	var6
   1659  2127		       85 f3		      STA	var7
   1660  2129		       85 f4		      STA	var8
   1661  212b				   .
   1662  212b							; 
   1663  212b
   1664  212b				   .
   1665  212b							; 
   1666  212b
   1667  212b				   .
   1668  212b							; 
   1669  212b
   1670  212b				   .
   1671  212b							; 
   1672  212b
   1673  212b				   .
   1674  212b							; 
   1675  212b
   1676  212b				   .
   1677  212b							; 
   1678  212b
   1679  212b				   .L017		;  playfield:
   1680  212b
   1681  212b		       a0 59		      ldy	#89
   1682  212d		       a9 a8		      LDA	#<PF_data1
   1683  212f		       a2 61		      LDX	#((>PF_data1) & $0f) | (((>PF_data1) / 2) & $70)
   1684  2131		       85 81		      sta	temp7
   1685  2133		       a9 31		      lda	#>(ret_point2-1)
   1686  2135		       48		      pha
   1687  2136		       a9 48		      lda	#<(ret_point2-1)
   1688  2138		       48		      pha
   1689  2139		       a9 1e		      lda	#>(pfsetup-1)
   1690  213b		       48		      pha
   1691  213c		       a9 8c		      lda	#<(pfsetup-1)
   1692  213e		       48		      pha
   1693  213f		       a5 81		      lda	temp7
   1694  2141		       48		      pha
   1695  2142		       8a		      txa
   1696  2143		       48		      pha
   1697  2144		       a2 01		      ldx	#1
   1698  2146		       4c ee df 	      jmp	BS_jsr
   1699  2149				   ret_point2
   1700  2149				   .
   1701  2149							; 
   1702  2149
   1703  2149				   .
   1704  2149							; 
   1705  2149
   1706  2149				   .
   1707  2149							; 
   1708  2149
   1709  2149				   .
   1710  2149							; 
   1711  2149
   1712  2149				   .
   1713  2149							; 
   1714  2149
   1715  2149				   .
   1716  2149							; 
   1717  2149
   1718  2149				   .L018		;  pfcolors:
   1719  2149
   1720  2149		       a9 08		      LDA	#<PFCOLS
   1721  214b		       8d 50 10 	      STA	DF0LOW
   1722  214e		       a9 0a		      LDA	#(>PFCOLS) & $0F
   1723  2150		       8d 68 10 	      STA	DF0HI
   1724  2153		       a9 0c		      LDA	#<playfieldcolorL018
   1725  2155		       8d 59 10 	      STA	PARAMETER
   1726  2158		       a9 63		      LDA	#((>playfieldcolorL018) & $0f) | (((>playfieldcolorL018) / 2) & $70)
   1727  215a		       8d 59 10 	      STA	PARAMETER
   1728  215d		       a9 00		      LDA	#0
   1729  215f		       8d 59 10 	      STA	PARAMETER
   1730  2162		       a9 78		      LDA	#120
   1731  2164		       8d 59 10 	      STA	PARAMETER
   1732  2167		       a9 01		      LDA	#1
   1733  2169		       8d 5a 10 	      STA	CALLFUNCTION
   1734  216c				   .
   1735  216c							; 
   1736  216c
   1737  216c				   .
   1738  216c							; 
   1739  216c
   1740  216c				   .
   1741  216c							; 
   1742  216c
   1743  216c				   .
   1744  216c							; 
   1745  216c
   1746  216c				   .
   1747  216c							; 
   1748  216c
   1749  216c				   .
   1750  216c							; 
   1751  216c
   1752  216c				   .L019		;  bkcolors:
   1753  216c
   1754  216c		       a9 a5		      LDA	#<BKCOLS
   1755  216e		       8d 50 10 	      STA	DF0LOW
   1756  2171		       a9 0b		      LDA	#(>BKCOLS) & $0F
   1757  2173		       8d 68 10 	      STA	DF0HI
   1758  2176		       a9 84		      LDA	#<backgroundcolorL019
   1759  2178		       8d 59 10 	      STA	PARAMETER
   1760  217b		       a9 63		      LDA	#((>backgroundcolorL019) & $0f) | (((>backgroundcolorL019) / 2) & $70)
   1761  217d		       8d 59 10 	      STA	PARAMETER
   1762  2180		       a9 00		      LDA	#0
   1763  2182		       8d 59 10 	      STA	PARAMETER
   1764  2185		       a9 58		      LDA	#88
   1765  2187		       8d 59 10 	      STA	PARAMETER
   1766  218a		       a9 01		      LDA	#1
   1767  218c		       8d 5a 10 	      STA	CALLFUNCTION
   1768  218f				   .
   1769  218f							; 
   1770  218f
   1771  218f				   .
   1772  218f							; 
   1773  218f
   1774  218f				   .
   1775  218f							; 
   1776  218f
   1777  218f				   .
   1778  218f							; 
   1779  218f
   1780  218f				   .
   1781  218f							; 
   1782  218f
   1783  218f				   .
   1784  218f							; 
   1785  218f
   1786  218f				   .L020		;  scorecolors:
   1787  218f
   1788  218f		       a9 45		      lda	#<scoredata
   1789  2191		       8d 50 10 	      STA	DF0LOW
   1790  2194		       a9 0b		      lda	#((>scoredata) & $0f)
   1791  2196		       8d 68 10 	      STA	DF0HI
   1792  2199		       a9 1e		      lda	#$1E
   1793  219b
   1794  219b		       8d 78 10 	      sta	DF0WRITE
   1795  219e		       a9 1c		      lda	#$1C
   1796  21a0
   1797  21a0		       8d 78 10 	      sta	DF0WRITE
   1798  21a3		       a9 1a		      lda	#$1A
   1799  21a5
   1800  21a5		       8d 78 10 	      sta	DF0WRITE
   1801  21a8		       a9 1a		      lda	#$1A
   1802  21aa
   1803  21aa		       8d 78 10 	      sta	DF0WRITE
   1804  21ad		       a9 18		      lda	#$18
   1805  21af
   1806  21af		       8d 78 10 	      sta	DF0WRITE
   1807  21b2		       a9 18		      lda	#$18
   1808  21b4
   1809  21b4		       8d 78 10 	      sta	DF0WRITE
   1810  21b7		       a9 16		      lda	#$16
   1811  21b9
   1812  21b9		       8d 78 10 	      sta	DF0WRITE
   1813  21bc		       a9 16		      lda	#$16
   1814  21be
   1815  21be		       8d 78 10 	      sta	DF0WRITE
   1816  21c1				   .
   1817  21c1							; 
   1818  21c1
   1819  21c1				   .
   1820  21c1							; 
   1821  21c1
   1822  21c1				   .
   1823  21c1							; 
   1824  21c1
   1825  21c1				   .
   1826  21c1							; 
   1827  21c1
   1828  21c1				   .
   1829  21c1							; 
   1830  21c1
   1831  21c1				   .
   1832  21c1							; 
   1833  21c1
   1834  21c1				   .
   1835  21c1							; 
   1836  21c1
   1837  21c1				   .
   1838  21c1							; 
   1839  21c1
   1840  21c1				   .
   1841  21c1							; 
   1842  21c1
   1843  21c1				   .L021		;  _Bit0_Reset_Restrainer{0}  =  1
   1844  21c1
   1845  21c1		       a5 e9		      LDA	_Bit0_Reset_Restrainer
   1846  21c3		       09 01		      ORA	#1
   1847  21c5		       85 e9		      STA	_Bit0_Reset_Restrainer
   1848  21c7				   .
   1849  21c7							; 
   1850  21c7
   1851  21c7				   .
   1852  21c7							; 
   1853  21c7
   1854  21c7				   .
   1855  21c7							; 
   1856  21c7
   1857  21c7				   .
   1858  21c7							; 
   1859  21c7
   1860  21c7				   .
   1861  21c7							; 
   1862  21c7
   1863  21c7				   .
   1864  21c7							; 
   1865  21c7
   1866  21c7				   .
   1867  21c7							; 
   1868  21c7
   1869  21c7				   .
   1870  21c7							; 
   1871  21c7
   1872  21c7				   .
   1873  21c7							; 
   1874  21c7
   1875  21c7				   .__Main_Loop
   1876  21c7							; __Main_Loop
   1877  21c7
   1878  21c7				   .
   1879  21c7							; 
   1880  21c7
   1881  21c7				   .
   1882  21c7							; 
   1883  21c7
   1884  21c7				   .
   1885  21c7							; 
   1886  21c7
   1887  21c7				   .
   1888  21c7							; 
   1889  21c7
   1890  21c7				   .
   1891  21c7							; 
   1892  21c7
   1893  21c7				   .
   1894  21c7							; 
   1895  21c7
   1896  21c7				   .
   1897  21c7							; 
   1898  21c7
   1899  21c7				   .
   1900  21c7							; 
   1901  21c7
   1902  21c7				   .
   1903  21c7							; 
   1904  21c7
   1905  21c7				   .
   1906  21c7							; 
   1907  21c7
   1908  21c7				   .
   1909  21c7							; 
   1910  21c7
   1911  21c7				   .
   1912  21c7							; 
   1913  21c7
   1914  21c7				   .
   1915  21c7							; 
   1916  21c7
   1917  21c7				   .
   1918  21c7							; 
   1919  21c7
   1920  21c7				   .
   1921  21c7							; 
   1922  21c7
   1923  21c7				   .
   1924  21c7							; 
   1925  21c7
   1926  21c7				   .
   1927  21c7							; 
   1928  21c7
   1929  21c7				   .L022		;  _Scroll_Counter  =	_Scroll_Counter  +  1
   1930  21c7
   1931  21c7		       e6 d1		      INC	_Scroll_Counter
   1932  21c9				   .
   1933  21c9							; 
   1934  21c9
   1935  21c9				   .L023		;  if _Bit7_Flip_Scroll{7} then pfscroll 255 4 4
   1936  21c9
   1937  21c9		       24 e9		      BIT	_Bit7_Flip_Scroll
   1938  21cb		       10 23		      BPL	.skipL023
   1939  21cd				   .condpart0
   1940  21cd		       a9 a4		      lda	#<C_function
   1941  21cf		       8d 50 10 	      sta	DF0LOW
   1942  21d2		       a9 01		      lda	#(>C_function) & $0F
   1943  21d4		       8d 68 10 	      sta	DF0HI
   1944  21d7		       a9 20		      lda	#32
   1945  21d9		       8d 78 10 	      sta	DF0WRITE
   1946  21dc		       a9 ff		      LDA	#255
   1947  21de		       8d 78 10 	      sta	DF0WRITE
   1948  21e1		       a9 04		      LDA	#4
   1949  21e3		       8d 78 10 	      sta	DF0WRITE
   1950  21e6		       a9 05		      LDA	#5
   1951  21e8		       8d 78 10 	      sta	DF0WRITE
   1952  21eb		       a9 ff		      lda	#255
   1953  21ed		       8d 5a 10 	      sta	CALLFUNCTION
   1954  21f0				   .skipL023
   1955  21f0				   .
   1956  21f0							; 
   1957  21f0
   1958  21f0				   .L024		;  if !_Bit7_Flip_Scroll{7} then pfscroll 1 4 4
   1959  21f0
   1960  21f0		       24 e9		      BIT	_Bit7_Flip_Scroll
   1961  21f2		       30 23		      BMI	.skipL024
   1962  21f4				   .condpart1
   1963  21f4		       a9 a4		      lda	#<C_function
   1964  21f6		       8d 50 10 	      sta	DF0LOW
   1965  21f9		       a9 01		      lda	#(>C_function) & $0F
   1966  21fb		       8d 68 10 	      sta	DF0HI
   1967  21fe		       a9 20		      lda	#32
   1968  2200		       8d 78 10 	      sta	DF0WRITE
   1969  2203		       a9 01		      LDA	#1
   1970  2205		       8d 78 10 	      sta	DF0WRITE
   1971  2208		       a9 04		      LDA	#4
   1972  220a		       8d 78 10 	      sta	DF0WRITE
   1973  220d		       a9 05		      LDA	#5
   1974  220f		       8d 78 10 	      sta	DF0WRITE
   1975  2212		       a9 ff		      lda	#255
   1976  2214		       8d 5a 10 	      sta	CALLFUNCTION
   1977  2217				   .skipL024
   1978  2217				   .
   1979  2217							; 
   1980  2217
   1981  2217				   .L025		;  if _Scroll_Counter	<  32 then goto __Skip_Scroll
   1982  2217
   1983  2217		       a5 d1		      LDA	_Scroll_Counter
   1984  2219		       c9 20		      CMP	#32
   1985  221b		       b0 03		      BCS	.skipL025
   1986  221d				   .condpart2
   1987  221d		       4c 34 32 	      jmp	.__Skip_Scroll
   1988  2220
   1989  2220				   .skipL025
   1990  2220				   .
   1991  2220							; 
   1992  2220
   1993  2220				   .L026		;  _Scroll_Counter  =	0
   1994  2220
   1995  2220		       a9 00		      LDA	#0
   1996  2222		       85 d1		      STA	_Scroll_Counter
   1997  2224				   .
   1998  2224							; 
   1999  2224
   2000  2224				   .L027		;  _Bit7_Flip_Scroll{7}  =  !_Bit7_Flip_Scroll{7}
   2001  2224
   2002  2224		       a5 e9		      LDA	_Bit7_Flip_Scroll
   2003  2226		       29 80		      AND	#128
   2004  2228		       08		      PHP
   2005  2229		       a5 e9		      LDA	_Bit7_Flip_Scroll
   2006  222b		       29 7f		      AND	#127
   2007  222d		       28		      PLP
   2008  222e		       d0 02		      .byte.b	$D0, $02
   2009  2230		       09 80		      ORA	#128
   2010  2232		       85 e9		      STA	_Bit7_Flip_Scroll
   2011  2234				   .
   2012  2234							; 
   2013  2234
   2014  2234				   .__Skip_Scroll
   2015  2234							; __Skip_Scroll
   2016  2234
   2017  2234				   .
   2018  2234							; 
   2019  2234
   2020  2234				   .
   2021  2234							; 
   2022  2234
   2023  2234				   .
   2024  2234							; 
   2025  2234
   2026  2234				   .
   2027  2234							; 
   2028  2234
   2029  2234				   .
   2030  2234							; 
   2031  2234
   2032  2234				   .
   2033  2234							; 
   2034  2234
   2035  2234				   .
   2036  2234							; 
   2037  2234
   2038  2234				   .L028		;  DF6FRACINC	=  255
   2039  2234
   2040  2234		       a9 ff		      LDA	#255
   2041  2236		       8d 3e 10 	      STA	DF6FRACINC
   2042  2239				   .L029		;  DF4FRACINC	=  255
   2043  2239
   2044  2239		       a9 ff		      LDA	#255
   2045  223b		       8d 3c 10 	      STA	DF4FRACINC
   2046  223e				   .
   2047  223e							; 
   2048  223e
   2049  223e				   .L030		;  DF0FRACINC	=  128
   2050  223e
   2051  223e		       a9 80		      LDA	#128
   2052  2240		       8d 38 10 	      STA	DF0FRACINC
   2053  2243				   .L031		;  DF1FRACINC	=  128
   2054  2243
   2055  2243		       a9 80		      LDA	#128
   2056  2245		       8d 39 10 	      STA	DF1FRACINC
   2057  2248				   .L032		;  DF2FRACINC	=  128
   2058  2248
   2059  2248		       a9 80		      LDA	#128
   2060  224a		       8d 3a 10 	      STA	DF2FRACINC
   2061  224d				   .L033		;  DF3FRACINC	=  128
   2062  224d
   2063  224d		       a9 80		      LDA	#128
   2064  224f		       8d 3b 10 	      STA	DF3FRACINC
   2065  2252				   .
   2066  2252							; 
   2067  2252
   2068  2252				   .
   2069  2252							; 
   2070  2252
   2071  2252				   .
   2072  2252							; 
   2073  2252
   2074  2252				   .
   2075  2252							; 
   2076  2252
   2077  2252				   .
   2078  2252							; 
   2079  2252
   2080  2252				   .
   2081  2252							; 
   2082  2252
   2083  2252				   .
   2084  2252							; 
   2085  2252
   2086  2252				   .L034		;  drawscreen
   2087  2252
   2088  2252		       85 81		      sta	temp7
   2089  2254		       a9 32		      lda	#>(ret_point3-1)
   2090  2256		       48		      pha
   2091  2257		       a9 69		      lda	#<(ret_point3-1)
   2092  2259		       48		      pha
   2093  225a		       a9 19		      lda	#>(drawscreen-1)
   2094  225c		       48		      pha
   2095  225d		       a9 48		      lda	#<(drawscreen-1)
   2096  225f		       48		      pha
   2097  2260		       a5 81		      lda	temp7
   2098  2262		       48		      pha
   2099  2263		       8a		      txa
   2100  2264		       48		      pha
   2101  2265		       a2 01		      ldx	#1
   2102  2267		       4c ee df 	      jmp	BS_jsr
   2103  226a				   ret_point3
   2104  226a				   .
   2105  226a							; 
   2106  226a
   2107  226a				   .
   2108  226a							; 
   2109  226a
   2110  226a				   .
   2111  226a							; 
   2112  226a
   2113  226a				   .
   2114  226a							; 
   2115  226a
   2116  226a				   .
   2117  226a							; 
   2118  226a
   2119  226a				   .
   2120  226a							; 
   2121  226a
   2122  226a				   .
   2123  226a							; 
   2124  226a
   2125  226a				   .
   2126  226a							; 
   2127  226a
   2128  226a				   .
   2129  226a							; 
   2130  226a
   2131  226a				   .
   2132  226a							; 
   2133  226a
   2134  226a				   .
   2135  226a							; 
   2136  226a
   2137  226a				   .
   2138  226a							; 
   2139  226a
   2140  226a				   .
   2141  226a							; 
   2142  226a
   2143  226a				   .
   2144  226a							; 
   2145  226a
   2146  226a				   .
   2147  226a							; 
   2148  226a
   2149  226a				   .L035		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   2150  226a
   2151  226a		       a9 01		      lda	#1
   2152  226c		       2c 82 02 	      bit	SWCHB
   2153  226f		       f0 09		      BEQ	.skipL035
   2154  2271				   .condpart3
   2155  2271		       a5 e9		      LDA	_Bit0_Reset_Restrainer
   2156  2273		       29 fe		      AND	#254
   2157  2275		       85 e9		      STA	_Bit0_Reset_Restrainer
   2158  2277		       4c c7 31 	      jmp	.__Main_Loop
   2159  227a
   2160  227a				   .skipL035
   2161  227a				   .
   2162  227a							; 
   2163  227a
   2164  227a				   .
   2165  227a							; 
   2166  227a
   2167  227a				   .
   2168  227a							; 
   2169  227a
   2170  227a				   .
   2171  227a							; 
   2172  227a
   2173  227a				   .
   2174  227a							; 
   2175  227a
   2176  227a				   .L036		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   2177  227a
   2178  227a		       a5 e9		      LDA	_Bit0_Reset_Restrainer
   2179  227c		       4a		      LSR
   2180  227d		       90 03		      BCC	.skipL036
   2181  227f				   .condpart4
   2182  227f		       4c c7 31 	      jmp	.__Main_Loop
   2183  2282
   2184  2282				   .skipL036
   2185  2282				   .
   2186  2282							; 
   2187  2282
   2188  2282				   .
   2189  2282							; 
   2190  2282
   2191  2282				   .
   2192  2282							; 
   2193  2282
   2194  2282				   .
   2195  2282							; 
   2196  2282
   2197  2282				   .L037		;  goto __Start_Restart
   2198  2282
   2199  2282		       4c a4 30 	      jmp	.__Start_Restart
   2200  2285
   2201  2285				   .
   2202  2285							; 
   2203  2285
   2204  2285				   .
   2205  2285							; 
   2206  2285
   2207  2285				   .
   2208  2285							; 
   2209  2285
   2210  2285				   .L038		;  bank 3
   2211  2285
   2212  2285					      if	ECHO2
      3407 bytes of ROM space left in bank 2
   2213  2285					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   2214  2285					      endif
   2215  2285		       00 01	   ECHO2      =	1
   2216  2fd4					      ORG	$2FF4-bscode_length
   2217  2fd4					      RORG	$3FF4-bscode_length
   2218  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   2219  2fd6					      ifconst	FASTFETCH	; using DPC+
   2220  2fd6		       8e 58 10 	      stx	FASTFETCH
   2221  2fd9					      endif
   2222  2fd9		       9a		      txs
   2223  2fda				  -	      if	bankswitch == 64
   2224  2fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2225  2fda					      else
   2226  2fda		       a9 18		      lda	#>(start-1)
   2227  2fdc					      endif
   2228  2fdc		       48		      pha
   2229  2fdd		       a9 e3		      lda	#<(start-1)
   2230  2fdf		       48		      pha
   2231  2fe0		       48		      pha
   2232  2fe1		       8a		      txa
   2233  2fe2		       48		      pha
   2234  2fe3		       ba		      tsx
   2235  2fe4					      if	bankswitch != 64
   2236  2fe4		       b5 04		      lda	4,x	; get high byte of return address
   2237  2fe6		       2a		      rol
   2238  2fe7		       2a		      rol
   2239  2fe8		       2a		      rol
   2240  2fe9		       2a		      rol
   2241  2fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2242  2fec		       aa		      tax
   2243  2fed		       e8		      inx
   2244  2fee				  -	      else
   2245  2fee				  -	      lda	4,x	; get high byte of return address
   2246  2fee				  -	      tay
   2247  2fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2248  2fee				  -	      sta	4,x
   2249  2fee				  -	      tya
   2250  2fee				  -	      lsr
   2251  2fee				  -	      lsr
   2252  2fee				  -	      lsr
   2253  2fee				  -	      lsr
   2254  2fee				  -	      tax
   2255  2fee				  -	      inx
   2256  2fee					      endif
   2257  2fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2258  2ff1		       68		      pla
   2259  2ff2		       aa		      tax
   2260  2ff3		       68		      pla
   2261  2ff4		       60		      rts
   2262  2ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2263  2ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2264  2ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2265  2ff5					      endif
   2266  2ffc					      ORG	$2FFC
   2267  2ffc					      RORG	$3FFC
   2268  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   2269  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   2270  3000					      ORG	$3000
   2271  3000					      RORG	$5000
   2272  3000					      repeat	129
   2273  3000		       00		      .byte.b	0
   2272  3000					      repend
   2273  3001		       00		      .byte.b	0
   2272  3001					      repend
   2273  3002		       00		      .byte.b	0
   2272  3002					      repend
   2273  3003		       00		      .byte.b	0
   2272  3003					      repend
   2273  3004		       00		      .byte.b	0
   2272  3004					      repend
   2273  3005		       00		      .byte.b	0
   2272  3005					      repend
   2273  3006		       00		      .byte.b	0
   2272  3006					      repend
   2273  3007		       00		      .byte.b	0
   2272  3007					      repend
   2273  3008		       00		      .byte.b	0
   2272  3008					      repend
   2273  3009		       00		      .byte.b	0
   2272  3009					      repend
   2273  300a		       00		      .byte.b	0
   2272  300a					      repend
   2273  300b		       00		      .byte.b	0
   2272  300b					      repend
   2273  300c		       00		      .byte.b	0
   2272  300c					      repend
   2273  300d		       00		      .byte.b	0
   2272  300d					      repend
   2273  300e		       00		      .byte.b	0
   2272  300e					      repend
   2273  300f		       00		      .byte.b	0
   2272  300f					      repend
   2273  3010		       00		      .byte.b	0
   2272  3010					      repend
   2273  3011		       00		      .byte.b	0
   2272  3011					      repend
   2273  3012		       00		      .byte.b	0
   2272  3012					      repend
   2273  3013		       00		      .byte.b	0
   2272  3013					      repend
   2273  3014		       00		      .byte.b	0
   2272  3014					      repend
   2273  3015		       00		      .byte.b	0
   2272  3015					      repend
   2273  3016		       00		      .byte.b	0
   2272  3016					      repend
   2273  3017		       00		      .byte.b	0
   2272  3017					      repend
   2273  3018		       00		      .byte.b	0
   2272  3018					      repend
   2273  3019		       00		      .byte.b	0
   2272  3019					      repend
   2273  301a		       00		      .byte.b	0
   2272  301a					      repend
   2273  301b		       00		      .byte.b	0
   2272  301b					      repend
   2273  301c		       00		      .byte.b	0
   2272  301c					      repend
   2273  301d		       00		      .byte.b	0
   2272  301d					      repend
   2273  301e		       00		      .byte.b	0
   2272  301e					      repend
   2273  301f		       00		      .byte.b	0
   2272  301f					      repend
   2273  3020		       00		      .byte.b	0
   2272  3020					      repend
   2273  3021		       00		      .byte.b	0
   2272  3021					      repend
   2273  3022		       00		      .byte.b	0
   2272  3022					      repend
   2273  3023		       00		      .byte.b	0
   2272  3023					      repend
   2273  3024		       00		      .byte.b	0
   2272  3024					      repend
   2273  3025		       00		      .byte.b	0
   2272  3025					      repend
   2273  3026		       00		      .byte.b	0
   2272  3026					      repend
   2273  3027		       00		      .byte.b	0
   2272  3027					      repend
   2273  3028		       00		      .byte.b	0
   2272  3028					      repend
   2273  3029		       00		      .byte.b	0
   2272  3029					      repend
   2273  302a		       00		      .byte.b	0
   2272  302a					      repend
   2273  302b		       00		      .byte.b	0
   2272  302b					      repend
   2273  302c		       00		      .byte.b	0
   2272  302c					      repend
   2273  302d		       00		      .byte.b	0
   2272  302d					      repend
   2273  302e		       00		      .byte.b	0
   2272  302e					      repend
   2273  302f		       00		      .byte.b	0
   2272  302f					      repend
   2273  3030		       00		      .byte.b	0
   2272  3030					      repend
   2273  3031		       00		      .byte.b	0
   2272  3031					      repend
   2273  3032		       00		      .byte.b	0
   2272  3032					      repend
   2273  3033		       00		      .byte.b	0
   2272  3033					      repend
   2273  3034		       00		      .byte.b	0
   2272  3034					      repend
   2273  3035		       00		      .byte.b	0
   2272  3035					      repend
   2273  3036		       00		      .byte.b	0
   2272  3036					      repend
   2273  3037		       00		      .byte.b	0
   2272  3037					      repend
   2273  3038		       00		      .byte.b	0
   2272  3038					      repend
   2273  3039		       00		      .byte.b	0
   2272  3039					      repend
   2273  303a		       00		      .byte.b	0
   2272  303a					      repend
   2273  303b		       00		      .byte.b	0
   2272  303b					      repend
   2273  303c		       00		      .byte.b	0
   2272  303c					      repend
   2273  303d		       00		      .byte.b	0
   2272  303d					      repend
   2273  303e		       00		      .byte.b	0
   2272  303e					      repend
   2273  303f		       00		      .byte.b	0
   2272  303f					      repend
   2273  3040		       00		      .byte.b	0
   2272  3040					      repend
   2273  3041		       00		      .byte.b	0
   2272  3041					      repend
   2273  3042		       00		      .byte.b	0
   2272  3042					      repend
   2273  3043		       00		      .byte.b	0
   2272  3043					      repend
   2273  3044		       00		      .byte.b	0
   2272  3044					      repend
   2273  3045		       00		      .byte.b	0
   2272  3045					      repend
   2273  3046		       00		      .byte.b	0
   2272  3046					      repend
   2273  3047		       00		      .byte.b	0
   2272  3047					      repend
   2273  3048		       00		      .byte.b	0
   2272  3048					      repend
   2273  3049		       00		      .byte.b	0
   2272  3049					      repend
   2273  304a		       00		      .byte.b	0
   2272  304a					      repend
   2273  304b		       00		      .byte.b	0
   2272  304b					      repend
   2273  304c		       00		      .byte.b	0
   2272  304c					      repend
   2273  304d		       00		      .byte.b	0
   2272  304d					      repend
   2273  304e		       00		      .byte.b	0
   2272  304e					      repend
   2273  304f		       00		      .byte.b	0
   2272  304f					      repend
   2273  3050		       00		      .byte.b	0
   2272  3050					      repend
   2273  3051		       00		      .byte.b	0
   2272  3051					      repend
   2273  3052		       00		      .byte.b	0
   2272  3052					      repend
   2273  3053		       00		      .byte.b	0
   2272  3053					      repend
   2273  3054		       00		      .byte.b	0
   2272  3054					      repend
   2273  3055		       00		      .byte.b	0
   2272  3055					      repend
   2273  3056		       00		      .byte.b	0
   2272  3056					      repend
   2273  3057		       00		      .byte.b	0
   2272  3057					      repend
   2273  3058		       00		      .byte.b	0
   2272  3058					      repend
   2273  3059		       00		      .byte.b	0
   2272  3059					      repend
   2273  305a		       00		      .byte.b	0
   2272  305a					      repend
   2273  305b		       00		      .byte.b	0
   2272  305b					      repend
   2273  305c		       00		      .byte.b	0
   2272  305c					      repend
   2273  305d		       00		      .byte.b	0
   2272  305d					      repend
   2273  305e		       00		      .byte.b	0
   2272  305e					      repend
   2273  305f		       00		      .byte.b	0
   2272  305f					      repend
   2273  3060		       00		      .byte.b	0
   2272  3060					      repend
   2273  3061		       00		      .byte.b	0
   2272  3061					      repend
   2273  3062		       00		      .byte.b	0
   2272  3062					      repend
   2273  3063		       00		      .byte.b	0
   2272  3063					      repend
   2273  3064		       00		      .byte.b	0
   2272  3064					      repend
   2273  3065		       00		      .byte.b	0
   2272  3065					      repend
   2273  3066		       00		      .byte.b	0
   2272  3066					      repend
   2273  3067		       00		      .byte.b	0
   2272  3067					      repend
   2273  3068		       00		      .byte.b	0
   2272  3068					      repend
   2273  3069		       00		      .byte.b	0
   2272  3069					      repend
   2273  306a		       00		      .byte.b	0
   2272  306a					      repend
   2273  306b		       00		      .byte.b	0
   2272  306b					      repend
   2273  306c		       00		      .byte.b	0
   2272  306c					      repend
   2273  306d		       00		      .byte.b	0
   2272  306d					      repend
   2273  306e		       00		      .byte.b	0
   2272  306e					      repend
   2273  306f		       00		      .byte.b	0
   2272  306f					      repend
   2273  3070		       00		      .byte.b	0
   2272  3070					      repend
   2273  3071		       00		      .byte.b	0
   2272  3071					      repend
   2273  3072		       00		      .byte.b	0
   2272  3072					      repend
   2273  3073		       00		      .byte.b	0
   2272  3073					      repend
   2273  3074		       00		      .byte.b	0
   2272  3074					      repend
   2273  3075		       00		      .byte.b	0
   2272  3075					      repend
   2273  3076		       00		      .byte.b	0
   2272  3076					      repend
   2273  3077		       00		      .byte.b	0
   2272  3077					      repend
   2273  3078		       00		      .byte.b	0
   2272  3078					      repend
   2273  3079		       00		      .byte.b	0
   2272  3079					      repend
   2273  307a		       00		      .byte.b	0
   2272  307a					      repend
   2273  307b		       00		      .byte.b	0
   2272  307b					      repend
   2273  307c		       00		      .byte.b	0
   2272  307c					      repend
   2273  307d		       00		      .byte.b	0
   2272  307d					      repend
   2273  307e		       00		      .byte.b	0
   2272  307e					      repend
   2273  307f		       00		      .byte.b	0
   2272  307f					      repend
   2273  3080		       00		      .byte.b	0
   2274  3081					      repend
   2275  3081				   .L039		;  temp1 = temp1
   2276  3081
   2277  3081		       a5 cb		      LDA	temp1
   2278  3083		       85 cb		      STA	temp1
   2279  3085				   .
   2280  3085							; 
   2281  3085
   2282  3085				   .
   2283  3085							; 
   2284  3085
   2285  3085				   .L040		;  bank 4
   2286  3085
   2287  3085					      if	ECHO3
      3919 bytes of ROM space left in bank 3
   2288  3085					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   2289  3085					      endif
   2290  3085		       00 01	   ECHO3      =	1
   2291  3fd4					      ORG	$3FF4-bscode_length
   2292  3fd4					      RORG	$5FF4-bscode_length
   2293  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   2294  3fd6					      ifconst	FASTFETCH	; using DPC+
   2295  3fd6		       8e 58 10 	      stx	FASTFETCH
   2296  3fd9					      endif
   2297  3fd9		       9a		      txs
   2298  3fda				  -	      if	bankswitch == 64
   2299  3fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2300  3fda					      else
   2301  3fda		       a9 18		      lda	#>(start-1)
   2302  3fdc					      endif
   2303  3fdc		       48		      pha
   2304  3fdd		       a9 e3		      lda	#<(start-1)
   2305  3fdf		       48		      pha
   2306  3fe0		       48		      pha
   2307  3fe1		       8a		      txa
   2308  3fe2		       48		      pha
   2309  3fe3		       ba		      tsx
   2310  3fe4					      if	bankswitch != 64
   2311  3fe4		       b5 04		      lda	4,x	; get high byte of return address
   2312  3fe6		       2a		      rol
   2313  3fe7		       2a		      rol
   2314  3fe8		       2a		      rol
   2315  3fe9		       2a		      rol
   2316  3fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2317  3fec		       aa		      tax
   2318  3fed		       e8		      inx
   2319  3fee				  -	      else
   2320  3fee				  -	      lda	4,x	; get high byte of return address
   2321  3fee				  -	      tay
   2322  3fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2323  3fee				  -	      sta	4,x
   2324  3fee				  -	      tya
   2325  3fee				  -	      lsr
   2326  3fee				  -	      lsr
   2327  3fee				  -	      lsr
   2328  3fee				  -	      lsr
   2329  3fee				  -	      tax
   2330  3fee				  -	      inx
   2331  3fee					      endif
   2332  3fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2333  3ff1		       68		      pla
   2334  3ff2		       aa		      tax
   2335  3ff3		       68		      pla
   2336  3ff4		       60		      rts
   2337  3ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2338  3ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2339  3ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2340  3ff5					      endif
   2341  3ffc					      ORG	$3FFC
   2342  3ffc					      RORG	$5FFC
   2343  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   2344  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   2345  4000					      ORG	$4000
   2346  4000					      RORG	$7000
   2347  4000					      repeat	129
   2348  4000		       00		      .byte.b	0
   2347  4000					      repend
   2348  4001		       00		      .byte.b	0
   2347  4001					      repend
   2348  4002		       00		      .byte.b	0
   2347  4002					      repend
   2348  4003		       00		      .byte.b	0
   2347  4003					      repend
   2348  4004		       00		      .byte.b	0
   2347  4004					      repend
   2348  4005		       00		      .byte.b	0
   2347  4005					      repend
   2348  4006		       00		      .byte.b	0
   2347  4006					      repend
   2348  4007		       00		      .byte.b	0
   2347  4007					      repend
   2348  4008		       00		      .byte.b	0
   2347  4008					      repend
   2348  4009		       00		      .byte.b	0
   2347  4009					      repend
   2348  400a		       00		      .byte.b	0
   2347  400a					      repend
   2348  400b		       00		      .byte.b	0
   2347  400b					      repend
   2348  400c		       00		      .byte.b	0
   2347  400c					      repend
   2348  400d		       00		      .byte.b	0
   2347  400d					      repend
   2348  400e		       00		      .byte.b	0
   2347  400e					      repend
   2348  400f		       00		      .byte.b	0
   2347  400f					      repend
   2348  4010		       00		      .byte.b	0
   2347  4010					      repend
   2348  4011		       00		      .byte.b	0
   2347  4011					      repend
   2348  4012		       00		      .byte.b	0
   2347  4012					      repend
   2348  4013		       00		      .byte.b	0
   2347  4013					      repend
   2348  4014		       00		      .byte.b	0
   2347  4014					      repend
   2348  4015		       00		      .byte.b	0
   2347  4015					      repend
   2348  4016		       00		      .byte.b	0
   2347  4016					      repend
   2348  4017		       00		      .byte.b	0
   2347  4017					      repend
   2348  4018		       00		      .byte.b	0
   2347  4018					      repend
   2348  4019		       00		      .byte.b	0
   2347  4019					      repend
   2348  401a		       00		      .byte.b	0
   2347  401a					      repend
   2348  401b		       00		      .byte.b	0
   2347  401b					      repend
   2348  401c		       00		      .byte.b	0
   2347  401c					      repend
   2348  401d		       00		      .byte.b	0
   2347  401d					      repend
   2348  401e		       00		      .byte.b	0
   2347  401e					      repend
   2348  401f		       00		      .byte.b	0
   2347  401f					      repend
   2348  4020		       00		      .byte.b	0
   2347  4020					      repend
   2348  4021		       00		      .byte.b	0
   2347  4021					      repend
   2348  4022		       00		      .byte.b	0
   2347  4022					      repend
   2348  4023		       00		      .byte.b	0
   2347  4023					      repend
   2348  4024		       00		      .byte.b	0
   2347  4024					      repend
   2348  4025		       00		      .byte.b	0
   2347  4025					      repend
   2348  4026		       00		      .byte.b	0
   2347  4026					      repend
   2348  4027		       00		      .byte.b	0
   2347  4027					      repend
   2348  4028		       00		      .byte.b	0
   2347  4028					      repend
   2348  4029		       00		      .byte.b	0
   2347  4029					      repend
   2348  402a		       00		      .byte.b	0
   2347  402a					      repend
   2348  402b		       00		      .byte.b	0
   2347  402b					      repend
   2348  402c		       00		      .byte.b	0
   2347  402c					      repend
   2348  402d		       00		      .byte.b	0
   2347  402d					      repend
   2348  402e		       00		      .byte.b	0
   2347  402e					      repend
   2348  402f		       00		      .byte.b	0
   2347  402f					      repend
   2348  4030		       00		      .byte.b	0
   2347  4030					      repend
   2348  4031		       00		      .byte.b	0
   2347  4031					      repend
   2348  4032		       00		      .byte.b	0
   2347  4032					      repend
   2348  4033		       00		      .byte.b	0
   2347  4033					      repend
   2348  4034		       00		      .byte.b	0
   2347  4034					      repend
   2348  4035		       00		      .byte.b	0
   2347  4035					      repend
   2348  4036		       00		      .byte.b	0
   2347  4036					      repend
   2348  4037		       00		      .byte.b	0
   2347  4037					      repend
   2348  4038		       00		      .byte.b	0
   2347  4038					      repend
   2348  4039		       00		      .byte.b	0
   2347  4039					      repend
   2348  403a		       00		      .byte.b	0
   2347  403a					      repend
   2348  403b		       00		      .byte.b	0
   2347  403b					      repend
   2348  403c		       00		      .byte.b	0
   2347  403c					      repend
   2348  403d		       00		      .byte.b	0
   2347  403d					      repend
   2348  403e		       00		      .byte.b	0
   2347  403e					      repend
   2348  403f		       00		      .byte.b	0
   2347  403f					      repend
   2348  4040		       00		      .byte.b	0
   2347  4040					      repend
   2348  4041		       00		      .byte.b	0
   2347  4041					      repend
   2348  4042		       00		      .byte.b	0
   2347  4042					      repend
   2348  4043		       00		      .byte.b	0
   2347  4043					      repend
   2348  4044		       00		      .byte.b	0
   2347  4044					      repend
   2348  4045		       00		      .byte.b	0
   2347  4045					      repend
   2348  4046		       00		      .byte.b	0
   2347  4046					      repend
   2348  4047		       00		      .byte.b	0
   2347  4047					      repend
   2348  4048		       00		      .byte.b	0
   2347  4048					      repend
   2348  4049		       00		      .byte.b	0
   2347  4049					      repend
   2348  404a		       00		      .byte.b	0
   2347  404a					      repend
   2348  404b		       00		      .byte.b	0
   2347  404b					      repend
   2348  404c		       00		      .byte.b	0
   2347  404c					      repend
   2348  404d		       00		      .byte.b	0
   2347  404d					      repend
   2348  404e		       00		      .byte.b	0
   2347  404e					      repend
   2348  404f		       00		      .byte.b	0
   2347  404f					      repend
   2348  4050		       00		      .byte.b	0
   2347  4050					      repend
   2348  4051		       00		      .byte.b	0
   2347  4051					      repend
   2348  4052		       00		      .byte.b	0
   2347  4052					      repend
   2348  4053		       00		      .byte.b	0
   2347  4053					      repend
   2348  4054		       00		      .byte.b	0
   2347  4054					      repend
   2348  4055		       00		      .byte.b	0
   2347  4055					      repend
   2348  4056		       00		      .byte.b	0
   2347  4056					      repend
   2348  4057		       00		      .byte.b	0
   2347  4057					      repend
   2348  4058		       00		      .byte.b	0
   2347  4058					      repend
   2348  4059		       00		      .byte.b	0
   2347  4059					      repend
   2348  405a		       00		      .byte.b	0
   2347  405a					      repend
   2348  405b		       00		      .byte.b	0
   2347  405b					      repend
   2348  405c		       00		      .byte.b	0
   2347  405c					      repend
   2348  405d		       00		      .byte.b	0
   2347  405d					      repend
   2348  405e		       00		      .byte.b	0
   2347  405e					      repend
   2348  405f		       00		      .byte.b	0
   2347  405f					      repend
   2348  4060		       00		      .byte.b	0
   2347  4060					      repend
   2348  4061		       00		      .byte.b	0
   2347  4061					      repend
   2348  4062		       00		      .byte.b	0
   2347  4062					      repend
   2348  4063		       00		      .byte.b	0
   2347  4063					      repend
   2348  4064		       00		      .byte.b	0
   2347  4064					      repend
   2348  4065		       00		      .byte.b	0
   2347  4065					      repend
   2348  4066		       00		      .byte.b	0
   2347  4066					      repend
   2348  4067		       00		      .byte.b	0
   2347  4067					      repend
   2348  4068		       00		      .byte.b	0
   2347  4068					      repend
   2348  4069		       00		      .byte.b	0
   2347  4069					      repend
   2348  406a		       00		      .byte.b	0
   2347  406a					      repend
   2348  406b		       00		      .byte.b	0
   2347  406b					      repend
   2348  406c		       00		      .byte.b	0
   2347  406c					      repend
   2348  406d		       00		      .byte.b	0
   2347  406d					      repend
   2348  406e		       00		      .byte.b	0
   2347  406e					      repend
   2348  406f		       00		      .byte.b	0
   2347  406f					      repend
   2348  4070		       00		      .byte.b	0
   2347  4070					      repend
   2348  4071		       00		      .byte.b	0
   2347  4071					      repend
   2348  4072		       00		      .byte.b	0
   2347  4072					      repend
   2348  4073		       00		      .byte.b	0
   2347  4073					      repend
   2348  4074		       00		      .byte.b	0
   2347  4074					      repend
   2348  4075		       00		      .byte.b	0
   2347  4075					      repend
   2348  4076		       00		      .byte.b	0
   2347  4076					      repend
   2348  4077		       00		      .byte.b	0
   2347  4077					      repend
   2348  4078		       00		      .byte.b	0
   2347  4078					      repend
   2348  4079		       00		      .byte.b	0
   2347  4079					      repend
   2348  407a		       00		      .byte.b	0
   2347  407a					      repend
   2348  407b		       00		      .byte.b	0
   2347  407b					      repend
   2348  407c		       00		      .byte.b	0
   2347  407c					      repend
   2348  407d		       00		      .byte.b	0
   2347  407d					      repend
   2348  407e		       00		      .byte.b	0
   2347  407e					      repend
   2348  407f		       00		      .byte.b	0
   2347  407f					      repend
   2348  4080		       00		      .byte.b	0
   2349  4081					      repend
   2350  4081				   .L041		;  temp1 = temp1
   2351  4081
   2352  4081		       a5 cb		      LDA	temp1
   2353  4083		       85 cb		      STA	temp1
   2354  4085				   .
   2355  4085							; 
   2356  4085
   2357  4085				   .
   2358  4085							; 
   2359  4085
   2360  4085				   .L042		;  bank 5
   2361  4085
   2362  4085					      if	ECHO4
      3919 bytes of ROM space left in bank 4
   2363  4085					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   2364  4085					      endif
   2365  4085		       00 01	   ECHO4      =	1
   2366  4fd4					      ORG	$4FF4-bscode_length
   2367  4fd4					      RORG	$7FF4-bscode_length
   2368  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   2369  4fd6					      ifconst	FASTFETCH	; using DPC+
   2370  4fd6		       8e 58 10 	      stx	FASTFETCH
   2371  4fd9					      endif
   2372  4fd9		       9a		      txs
   2373  4fda				  -	      if	bankswitch == 64
   2374  4fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2375  4fda					      else
   2376  4fda		       a9 18		      lda	#>(start-1)
   2377  4fdc					      endif
   2378  4fdc		       48		      pha
   2379  4fdd		       a9 e3		      lda	#<(start-1)
   2380  4fdf		       48		      pha
   2381  4fe0		       48		      pha
   2382  4fe1		       8a		      txa
   2383  4fe2		       48		      pha
   2384  4fe3		       ba		      tsx
   2385  4fe4					      if	bankswitch != 64
   2386  4fe4		       b5 04		      lda	4,x	; get high byte of return address
   2387  4fe6		       2a		      rol
   2388  4fe7		       2a		      rol
   2389  4fe8		       2a		      rol
   2390  4fe9		       2a		      rol
   2391  4fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2392  4fec		       aa		      tax
   2393  4fed		       e8		      inx
   2394  4fee				  -	      else
   2395  4fee				  -	      lda	4,x	; get high byte of return address
   2396  4fee				  -	      tay
   2397  4fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2398  4fee				  -	      sta	4,x
   2399  4fee				  -	      tya
   2400  4fee				  -	      lsr
   2401  4fee				  -	      lsr
   2402  4fee				  -	      lsr
   2403  4fee				  -	      lsr
   2404  4fee				  -	      tax
   2405  4fee				  -	      inx
   2406  4fee					      endif
   2407  4fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2408  4ff1		       68		      pla
   2409  4ff2		       aa		      tax
   2410  4ff3		       68		      pla
   2411  4ff4		       60		      rts
   2412  4ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2413  4ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2414  4ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2415  4ff5					      endif
   2416  4ffc					      ORG	$4FFC
   2417  4ffc					      RORG	$7FFC
   2418  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   2419  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   2420  5000					      ORG	$5000
   2421  5000					      RORG	$9000
   2422  5000					      repeat	129
   2423  5000		       00		      .byte.b	0
   2422  5000					      repend
   2423  5001		       00		      .byte.b	0
   2422  5001					      repend
   2423  5002		       00		      .byte.b	0
   2422  5002					      repend
   2423  5003		       00		      .byte.b	0
   2422  5003					      repend
   2423  5004		       00		      .byte.b	0
   2422  5004					      repend
   2423  5005		       00		      .byte.b	0
   2422  5005					      repend
   2423  5006		       00		      .byte.b	0
   2422  5006					      repend
   2423  5007		       00		      .byte.b	0
   2422  5007					      repend
   2423  5008		       00		      .byte.b	0
   2422  5008					      repend
   2423  5009		       00		      .byte.b	0
   2422  5009					      repend
   2423  500a		       00		      .byte.b	0
   2422  500a					      repend
   2423  500b		       00		      .byte.b	0
   2422  500b					      repend
   2423  500c		       00		      .byte.b	0
   2422  500c					      repend
   2423  500d		       00		      .byte.b	0
   2422  500d					      repend
   2423  500e		       00		      .byte.b	0
   2422  500e					      repend
   2423  500f		       00		      .byte.b	0
   2422  500f					      repend
   2423  5010		       00		      .byte.b	0
   2422  5010					      repend
   2423  5011		       00		      .byte.b	0
   2422  5011					      repend
   2423  5012		       00		      .byte.b	0
   2422  5012					      repend
   2423  5013		       00		      .byte.b	0
   2422  5013					      repend
   2423  5014		       00		      .byte.b	0
   2422  5014					      repend
   2423  5015		       00		      .byte.b	0
   2422  5015					      repend
   2423  5016		       00		      .byte.b	0
   2422  5016					      repend
   2423  5017		       00		      .byte.b	0
   2422  5017					      repend
   2423  5018		       00		      .byte.b	0
   2422  5018					      repend
   2423  5019		       00		      .byte.b	0
   2422  5019					      repend
   2423  501a		       00		      .byte.b	0
   2422  501a					      repend
   2423  501b		       00		      .byte.b	0
   2422  501b					      repend
   2423  501c		       00		      .byte.b	0
   2422  501c					      repend
   2423  501d		       00		      .byte.b	0
   2422  501d					      repend
   2423  501e		       00		      .byte.b	0
   2422  501e					      repend
   2423  501f		       00		      .byte.b	0
   2422  501f					      repend
   2423  5020		       00		      .byte.b	0
   2422  5020					      repend
   2423  5021		       00		      .byte.b	0
   2422  5021					      repend
   2423  5022		       00		      .byte.b	0
   2422  5022					      repend
   2423  5023		       00		      .byte.b	0
   2422  5023					      repend
   2423  5024		       00		      .byte.b	0
   2422  5024					      repend
   2423  5025		       00		      .byte.b	0
   2422  5025					      repend
   2423  5026		       00		      .byte.b	0
   2422  5026					      repend
   2423  5027		       00		      .byte.b	0
   2422  5027					      repend
   2423  5028		       00		      .byte.b	0
   2422  5028					      repend
   2423  5029		       00		      .byte.b	0
   2422  5029					      repend
   2423  502a		       00		      .byte.b	0
   2422  502a					      repend
   2423  502b		       00		      .byte.b	0
   2422  502b					      repend
   2423  502c		       00		      .byte.b	0
   2422  502c					      repend
   2423  502d		       00		      .byte.b	0
   2422  502d					      repend
   2423  502e		       00		      .byte.b	0
   2422  502e					      repend
   2423  502f		       00		      .byte.b	0
   2422  502f					      repend
   2423  5030		       00		      .byte.b	0
   2422  5030					      repend
   2423  5031		       00		      .byte.b	0
   2422  5031					      repend
   2423  5032		       00		      .byte.b	0
   2422  5032					      repend
   2423  5033		       00		      .byte.b	0
   2422  5033					      repend
   2423  5034		       00		      .byte.b	0
   2422  5034					      repend
   2423  5035		       00		      .byte.b	0
   2422  5035					      repend
   2423  5036		       00		      .byte.b	0
   2422  5036					      repend
   2423  5037		       00		      .byte.b	0
   2422  5037					      repend
   2423  5038		       00		      .byte.b	0
   2422  5038					      repend
   2423  5039		       00		      .byte.b	0
   2422  5039					      repend
   2423  503a		       00		      .byte.b	0
   2422  503a					      repend
   2423  503b		       00		      .byte.b	0
   2422  503b					      repend
   2423  503c		       00		      .byte.b	0
   2422  503c					      repend
   2423  503d		       00		      .byte.b	0
   2422  503d					      repend
   2423  503e		       00		      .byte.b	0
   2422  503e					      repend
   2423  503f		       00		      .byte.b	0
   2422  503f					      repend
   2423  5040		       00		      .byte.b	0
   2422  5040					      repend
   2423  5041		       00		      .byte.b	0
   2422  5041					      repend
   2423  5042		       00		      .byte.b	0
   2422  5042					      repend
   2423  5043		       00		      .byte.b	0
   2422  5043					      repend
   2423  5044		       00		      .byte.b	0
   2422  5044					      repend
   2423  5045		       00		      .byte.b	0
   2422  5045					      repend
   2423  5046		       00		      .byte.b	0
   2422  5046					      repend
   2423  5047		       00		      .byte.b	0
   2422  5047					      repend
   2423  5048		       00		      .byte.b	0
   2422  5048					      repend
   2423  5049		       00		      .byte.b	0
   2422  5049					      repend
   2423  504a		       00		      .byte.b	0
   2422  504a					      repend
   2423  504b		       00		      .byte.b	0
   2422  504b					      repend
   2423  504c		       00		      .byte.b	0
   2422  504c					      repend
   2423  504d		       00		      .byte.b	0
   2422  504d					      repend
   2423  504e		       00		      .byte.b	0
   2422  504e					      repend
   2423  504f		       00		      .byte.b	0
   2422  504f					      repend
   2423  5050		       00		      .byte.b	0
   2422  5050					      repend
   2423  5051		       00		      .byte.b	0
   2422  5051					      repend
   2423  5052		       00		      .byte.b	0
   2422  5052					      repend
   2423  5053		       00		      .byte.b	0
   2422  5053					      repend
   2423  5054		       00		      .byte.b	0
   2422  5054					      repend
   2423  5055		       00		      .byte.b	0
   2422  5055					      repend
   2423  5056		       00		      .byte.b	0
   2422  5056					      repend
   2423  5057		       00		      .byte.b	0
   2422  5057					      repend
   2423  5058		       00		      .byte.b	0
   2422  5058					      repend
   2423  5059		       00		      .byte.b	0
   2422  5059					      repend
   2423  505a		       00		      .byte.b	0
   2422  505a					      repend
   2423  505b		       00		      .byte.b	0
   2422  505b					      repend
   2423  505c		       00		      .byte.b	0
   2422  505c					      repend
   2423  505d		       00		      .byte.b	0
   2422  505d					      repend
   2423  505e		       00		      .byte.b	0
   2422  505e					      repend
   2423  505f		       00		      .byte.b	0
   2422  505f					      repend
   2423  5060		       00		      .byte.b	0
   2422  5060					      repend
   2423  5061		       00		      .byte.b	0
   2422  5061					      repend
   2423  5062		       00		      .byte.b	0
   2422  5062					      repend
   2423  5063		       00		      .byte.b	0
   2422  5063					      repend
   2423  5064		       00		      .byte.b	0
   2422  5064					      repend
   2423  5065		       00		      .byte.b	0
   2422  5065					      repend
   2423  5066		       00		      .byte.b	0
   2422  5066					      repend
   2423  5067		       00		      .byte.b	0
   2422  5067					      repend
   2423  5068		       00		      .byte.b	0
   2422  5068					      repend
   2423  5069		       00		      .byte.b	0
   2422  5069					      repend
   2423  506a		       00		      .byte.b	0
   2422  506a					      repend
   2423  506b		       00		      .byte.b	0
   2422  506b					      repend
   2423  506c		       00		      .byte.b	0
   2422  506c					      repend
   2423  506d		       00		      .byte.b	0
   2422  506d					      repend
   2423  506e		       00		      .byte.b	0
   2422  506e					      repend
   2423  506f		       00		      .byte.b	0
   2422  506f					      repend
   2423  5070		       00		      .byte.b	0
   2422  5070					      repend
   2423  5071		       00		      .byte.b	0
   2422  5071					      repend
   2423  5072		       00		      .byte.b	0
   2422  5072					      repend
   2423  5073		       00		      .byte.b	0
   2422  5073					      repend
   2423  5074		       00		      .byte.b	0
   2422  5074					      repend
   2423  5075		       00		      .byte.b	0
   2422  5075					      repend
   2423  5076		       00		      .byte.b	0
   2422  5076					      repend
   2423  5077		       00		      .byte.b	0
   2422  5077					      repend
   2423  5078		       00		      .byte.b	0
   2422  5078					      repend
   2423  5079		       00		      .byte.b	0
   2422  5079					      repend
   2423  507a		       00		      .byte.b	0
   2422  507a					      repend
   2423  507b		       00		      .byte.b	0
   2422  507b					      repend
   2423  507c		       00		      .byte.b	0
   2422  507c					      repend
   2423  507d		       00		      .byte.b	0
   2422  507d					      repend
   2423  507e		       00		      .byte.b	0
   2422  507e					      repend
   2423  507f		       00		      .byte.b	0
   2422  507f					      repend
   2423  5080		       00		      .byte.b	0
   2424  5081					      repend
   2425  5081				   .L043		;  temp1 = temp1
   2426  5081
   2427  5081		       a5 cb		      LDA	temp1
   2428  5083		       85 cb		      STA	temp1
   2429  5085				   .
   2430  5085							; 
   2431  5085
   2432  5085				   .
   2433  5085							; 
   2434  5085
   2435  5085				   .L044		;  bank 6
   2436  5085
   2437  5085					      if	ECHO5
      3919 bytes of ROM space left in bank 5
   2438  5085					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   2439  5085					      endif
   2440  5085		       00 01	   ECHO5      =	1
   2441  5fd4					      ORG	$5FF4-bscode_length
   2442  5fd4					      RORG	$9FF4-bscode_length
   2443  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   2444  5fd6					      ifconst	FASTFETCH	; using DPC+
   2445  5fd6		       8e 58 10 	      stx	FASTFETCH
   2446  5fd9					      endif
   2447  5fd9		       9a		      txs
   2448  5fda				  -	      if	bankswitch == 64
   2449  5fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2450  5fda					      else
   2451  5fda		       a9 18		      lda	#>(start-1)
   2452  5fdc					      endif
   2453  5fdc		       48		      pha
   2454  5fdd		       a9 e3		      lda	#<(start-1)
   2455  5fdf		       48		      pha
   2456  5fe0		       48		      pha
   2457  5fe1		       8a		      txa
   2458  5fe2		       48		      pha
   2459  5fe3		       ba		      tsx
   2460  5fe4					      if	bankswitch != 64
   2461  5fe4		       b5 04		      lda	4,x	; get high byte of return address
   2462  5fe6		       2a		      rol
   2463  5fe7		       2a		      rol
   2464  5fe8		       2a		      rol
   2465  5fe9		       2a		      rol
   2466  5fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2467  5fec		       aa		      tax
   2468  5fed		       e8		      inx
   2469  5fee				  -	      else
   2470  5fee				  -	      lda	4,x	; get high byte of return address
   2471  5fee				  -	      tay
   2472  5fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2473  5fee				  -	      sta	4,x
   2474  5fee				  -	      tya
   2475  5fee				  -	      lsr
   2476  5fee				  -	      lsr
   2477  5fee				  -	      lsr
   2478  5fee				  -	      lsr
   2479  5fee				  -	      tax
   2480  5fee				  -	      inx
   2481  5fee					      endif
   2482  5fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2483  5ff1		       68		      pla
   2484  5ff2		       aa		      tax
   2485  5ff3		       68		      pla
   2486  5ff4		       60		      rts
   2487  5ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2488  5ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2489  5ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2490  5ff5					      endif
   2491  5ffc					      ORG	$5FFC
   2492  5ffc					      RORG	$9FFC
   2493  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   2494  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   2495  6000					      ORG	$6000
   2496  6000					      RORG	$B000
   2497  6000					      repeat	129
   2498  6000		       00		      .byte.b	0
   2497  6000					      repend
   2498  6001		       00		      .byte.b	0
   2497  6001					      repend
   2498  6002		       00		      .byte.b	0
   2497  6002					      repend
   2498  6003		       00		      .byte.b	0
   2497  6003					      repend
   2498  6004		       00		      .byte.b	0
   2497  6004					      repend
   2498  6005		       00		      .byte.b	0
   2497  6005					      repend
   2498  6006		       00		      .byte.b	0
   2497  6006					      repend
   2498  6007		       00		      .byte.b	0
   2497  6007					      repend
   2498  6008		       00		      .byte.b	0
   2497  6008					      repend
   2498  6009		       00		      .byte.b	0
   2497  6009					      repend
   2498  600a		       00		      .byte.b	0
   2497  600a					      repend
   2498  600b		       00		      .byte.b	0
   2497  600b					      repend
   2498  600c		       00		      .byte.b	0
   2497  600c					      repend
   2498  600d		       00		      .byte.b	0
   2497  600d					      repend
   2498  600e		       00		      .byte.b	0
   2497  600e					      repend
   2498  600f		       00		      .byte.b	0
   2497  600f					      repend
   2498  6010		       00		      .byte.b	0
   2497  6010					      repend
   2498  6011		       00		      .byte.b	0
   2497  6011					      repend
   2498  6012		       00		      .byte.b	0
   2497  6012					      repend
   2498  6013		       00		      .byte.b	0
   2497  6013					      repend
   2498  6014		       00		      .byte.b	0
   2497  6014					      repend
   2498  6015		       00		      .byte.b	0
   2497  6015					      repend
   2498  6016		       00		      .byte.b	0
   2497  6016					      repend
   2498  6017		       00		      .byte.b	0
   2497  6017					      repend
   2498  6018		       00		      .byte.b	0
   2497  6018					      repend
   2498  6019		       00		      .byte.b	0
   2497  6019					      repend
   2498  601a		       00		      .byte.b	0
   2497  601a					      repend
   2498  601b		       00		      .byte.b	0
   2497  601b					      repend
   2498  601c		       00		      .byte.b	0
   2497  601c					      repend
   2498  601d		       00		      .byte.b	0
   2497  601d					      repend
   2498  601e		       00		      .byte.b	0
   2497  601e					      repend
   2498  601f		       00		      .byte.b	0
   2497  601f					      repend
   2498  6020		       00		      .byte.b	0
   2497  6020					      repend
   2498  6021		       00		      .byte.b	0
   2497  6021					      repend
   2498  6022		       00		      .byte.b	0
   2497  6022					      repend
   2498  6023		       00		      .byte.b	0
   2497  6023					      repend
   2498  6024		       00		      .byte.b	0
   2497  6024					      repend
   2498  6025		       00		      .byte.b	0
   2497  6025					      repend
   2498  6026		       00		      .byte.b	0
   2497  6026					      repend
   2498  6027		       00		      .byte.b	0
   2497  6027					      repend
   2498  6028		       00		      .byte.b	0
   2497  6028					      repend
   2498  6029		       00		      .byte.b	0
   2497  6029					      repend
   2498  602a		       00		      .byte.b	0
   2497  602a					      repend
   2498  602b		       00		      .byte.b	0
   2497  602b					      repend
   2498  602c		       00		      .byte.b	0
   2497  602c					      repend
   2498  602d		       00		      .byte.b	0
   2497  602d					      repend
   2498  602e		       00		      .byte.b	0
   2497  602e					      repend
   2498  602f		       00		      .byte.b	0
   2497  602f					      repend
   2498  6030		       00		      .byte.b	0
   2497  6030					      repend
   2498  6031		       00		      .byte.b	0
   2497  6031					      repend
   2498  6032		       00		      .byte.b	0
   2497  6032					      repend
   2498  6033		       00		      .byte.b	0
   2497  6033					      repend
   2498  6034		       00		      .byte.b	0
   2497  6034					      repend
   2498  6035		       00		      .byte.b	0
   2497  6035					      repend
   2498  6036		       00		      .byte.b	0
   2497  6036					      repend
   2498  6037		       00		      .byte.b	0
   2497  6037					      repend
   2498  6038		       00		      .byte.b	0
   2497  6038					      repend
   2498  6039		       00		      .byte.b	0
   2497  6039					      repend
   2498  603a		       00		      .byte.b	0
   2497  603a					      repend
   2498  603b		       00		      .byte.b	0
   2497  603b					      repend
   2498  603c		       00		      .byte.b	0
   2497  603c					      repend
   2498  603d		       00		      .byte.b	0
   2497  603d					      repend
   2498  603e		       00		      .byte.b	0
   2497  603e					      repend
   2498  603f		       00		      .byte.b	0
   2497  603f					      repend
   2498  6040		       00		      .byte.b	0
   2497  6040					      repend
   2498  6041		       00		      .byte.b	0
   2497  6041					      repend
   2498  6042		       00		      .byte.b	0
   2497  6042					      repend
   2498  6043		       00		      .byte.b	0
   2497  6043					      repend
   2498  6044		       00		      .byte.b	0
   2497  6044					      repend
   2498  6045		       00		      .byte.b	0
   2497  6045					      repend
   2498  6046		       00		      .byte.b	0
   2497  6046					      repend
   2498  6047		       00		      .byte.b	0
   2497  6047					      repend
   2498  6048		       00		      .byte.b	0
   2497  6048					      repend
   2498  6049		       00		      .byte.b	0
   2497  6049					      repend
   2498  604a		       00		      .byte.b	0
   2497  604a					      repend
   2498  604b		       00		      .byte.b	0
   2497  604b					      repend
   2498  604c		       00		      .byte.b	0
   2497  604c					      repend
   2498  604d		       00		      .byte.b	0
   2497  604d					      repend
   2498  604e		       00		      .byte.b	0
   2497  604e					      repend
   2498  604f		       00		      .byte.b	0
   2497  604f					      repend
   2498  6050		       00		      .byte.b	0
   2497  6050					      repend
   2498  6051		       00		      .byte.b	0
   2497  6051					      repend
   2498  6052		       00		      .byte.b	0
   2497  6052					      repend
   2498  6053		       00		      .byte.b	0
   2497  6053					      repend
   2498  6054		       00		      .byte.b	0
   2497  6054					      repend
   2498  6055		       00		      .byte.b	0
   2497  6055					      repend
   2498  6056		       00		      .byte.b	0
   2497  6056					      repend
   2498  6057		       00		      .byte.b	0
   2497  6057					      repend
   2498  6058		       00		      .byte.b	0
   2497  6058					      repend
   2498  6059		       00		      .byte.b	0
   2497  6059					      repend
   2498  605a		       00		      .byte.b	0
   2497  605a					      repend
   2498  605b		       00		      .byte.b	0
   2497  605b					      repend
   2498  605c		       00		      .byte.b	0
   2497  605c					      repend
   2498  605d		       00		      .byte.b	0
   2497  605d					      repend
   2498  605e		       00		      .byte.b	0
   2497  605e					      repend
   2498  605f		       00		      .byte.b	0
   2497  605f					      repend
   2498  6060		       00		      .byte.b	0
   2497  6060					      repend
   2498  6061		       00		      .byte.b	0
   2497  6061					      repend
   2498  6062		       00		      .byte.b	0
   2497  6062					      repend
   2498  6063		       00		      .byte.b	0
   2497  6063					      repend
   2498  6064		       00		      .byte.b	0
   2497  6064					      repend
   2498  6065		       00		      .byte.b	0
   2497  6065					      repend
   2498  6066		       00		      .byte.b	0
   2497  6066					      repend
   2498  6067		       00		      .byte.b	0
   2497  6067					      repend
   2498  6068		       00		      .byte.b	0
   2497  6068					      repend
   2498  6069		       00		      .byte.b	0
   2497  6069					      repend
   2498  606a		       00		      .byte.b	0
   2497  606a					      repend
   2498  606b		       00		      .byte.b	0
   2497  606b					      repend
   2498  606c		       00		      .byte.b	0
   2497  606c					      repend
   2498  606d		       00		      .byte.b	0
   2497  606d					      repend
   2498  606e		       00		      .byte.b	0
   2497  606e					      repend
   2498  606f		       00		      .byte.b	0
   2497  606f					      repend
   2498  6070		       00		      .byte.b	0
   2497  6070					      repend
   2498  6071		       00		      .byte.b	0
   2497  6071					      repend
   2498  6072		       00		      .byte.b	0
   2497  6072					      repend
   2498  6073		       00		      .byte.b	0
   2497  6073					      repend
   2498  6074		       00		      .byte.b	0
   2497  6074					      repend
   2498  6075		       00		      .byte.b	0
   2497  6075					      repend
   2498  6076		       00		      .byte.b	0
   2497  6076					      repend
   2498  6077		       00		      .byte.b	0
   2497  6077					      repend
   2498  6078		       00		      .byte.b	0
   2497  6078					      repend
   2498  6079		       00		      .byte.b	0
   2497  6079					      repend
   2498  607a		       00		      .byte.b	0
   2497  607a					      repend
   2498  607b		       00		      .byte.b	0
   2497  607b					      repend
   2498  607c		       00		      .byte.b	0
   2497  607c					      repend
   2498  607d		       00		      .byte.b	0
   2497  607d					      repend
   2498  607e		       00		      .byte.b	0
   2497  607e					      repend
   2498  607f		       00		      .byte.b	0
   2497  607f					      repend
   2498  6080		       00		      .byte.b	0
   2499  6081					      repend
   2500  6081				   .L045		;  temp1 = temp1
   2501  6081		       a5 cb		      LDA	temp1
   2502  6083		       85 cb		      STA	temp1
   2503  6085					      if	ECHO6
      3919 bytes of ROM space left in bank 6
   2504  6085					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   2505  6085					      endif
   2506  6085		       00 01	   ECHO6      =	1
   2507  6fd4					      ORG	$6FF4-bscode_length
   2508  6fd4					      RORG	$BFF4-bscode_length
   2509  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   2510  6fd6					      ifconst	FASTFETCH	; using DPC+
   2511  6fd6		       8e 58 10 	      stx	FASTFETCH
   2512  6fd9					      endif
   2513  6fd9		       9a		      txs
   2514  6fda				  -	      if	bankswitch == 64
   2515  6fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2516  6fda					      else
   2517  6fda		       a9 18		      lda	#>(start-1)
   2518  6fdc					      endif
   2519  6fdc		       48		      pha
   2520  6fdd		       a9 e3		      lda	#<(start-1)
   2521  6fdf		       48		      pha
   2522  6fe0		       48		      pha
   2523  6fe1		       8a		      txa
   2524  6fe2		       48		      pha
   2525  6fe3		       ba		      tsx
   2526  6fe4					      if	bankswitch != 64
   2527  6fe4		       b5 04		      lda	4,x	; get high byte of return address
   2528  6fe6		       2a		      rol
   2529  6fe7		       2a		      rol
   2530  6fe8		       2a		      rol
   2531  6fe9		       2a		      rol
   2532  6fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2533  6fec		       aa		      tax
   2534  6fed		       e8		      inx
   2535  6fee				  -	      else
   2536  6fee				  -	      lda	4,x	; get high byte of return address
   2537  6fee				  -	      tay
   2538  6fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2539  6fee				  -	      sta	4,x
   2540  6fee				  -	      tya
   2541  6fee				  -	      lsr
   2542  6fee				  -	      lsr
   2543  6fee				  -	      lsr
   2544  6fee				  -	      lsr
   2545  6fee				  -	      tax
   2546  6fee				  -	      inx
   2547  6fee					      endif
   2548  6fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2549  6ff1		       68		      pla
   2550  6ff2		       aa		      tax
   2551  6ff3		       68		      pla
   2552  6ff4		       60		      rts
   2553  6ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2554  6ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2555  6ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2556  6ff5					      endif
   2557  6ffc					      ORG	$6FFC
   2558  6ffc					      RORG	$BFFC
   2559  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   2560  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   2561  7000					      ORG	$7000
   2562  7000					      RORG	$D000
   2563  7000					      repeat	129
   2564  7000		       00		      .byte.b	0
   2563  7000					      repend
   2564  7001		       00		      .byte.b	0
   2563  7001					      repend
   2564  7002		       00		      .byte.b	0
   2563  7002					      repend
   2564  7003		       00		      .byte.b	0
   2563  7003					      repend
   2564  7004		       00		      .byte.b	0
   2563  7004					      repend
   2564  7005		       00		      .byte.b	0
   2563  7005					      repend
   2564  7006		       00		      .byte.b	0
   2563  7006					      repend
   2564  7007		       00		      .byte.b	0
   2563  7007					      repend
   2564  7008		       00		      .byte.b	0
   2563  7008					      repend
   2564  7009		       00		      .byte.b	0
   2563  7009					      repend
   2564  700a		       00		      .byte.b	0
   2563  700a					      repend
   2564  700b		       00		      .byte.b	0
   2563  700b					      repend
   2564  700c		       00		      .byte.b	0
   2563  700c					      repend
   2564  700d		       00		      .byte.b	0
   2563  700d					      repend
   2564  700e		       00		      .byte.b	0
   2563  700e					      repend
   2564  700f		       00		      .byte.b	0
   2563  700f					      repend
   2564  7010		       00		      .byte.b	0
   2563  7010					      repend
   2564  7011		       00		      .byte.b	0
   2563  7011					      repend
   2564  7012		       00		      .byte.b	0
   2563  7012					      repend
   2564  7013		       00		      .byte.b	0
   2563  7013					      repend
   2564  7014		       00		      .byte.b	0
   2563  7014					      repend
   2564  7015		       00		      .byte.b	0
   2563  7015					      repend
   2564  7016		       00		      .byte.b	0
   2563  7016					      repend
   2564  7017		       00		      .byte.b	0
   2563  7017					      repend
   2564  7018		       00		      .byte.b	0
   2563  7018					      repend
   2564  7019		       00		      .byte.b	0
   2563  7019					      repend
   2564  701a		       00		      .byte.b	0
   2563  701a					      repend
   2564  701b		       00		      .byte.b	0
   2563  701b					      repend
   2564  701c		       00		      .byte.b	0
   2563  701c					      repend
   2564  701d		       00		      .byte.b	0
   2563  701d					      repend
   2564  701e		       00		      .byte.b	0
   2563  701e					      repend
   2564  701f		       00		      .byte.b	0
   2563  701f					      repend
   2564  7020		       00		      .byte.b	0
   2563  7020					      repend
   2564  7021		       00		      .byte.b	0
   2563  7021					      repend
   2564  7022		       00		      .byte.b	0
   2563  7022					      repend
   2564  7023		       00		      .byte.b	0
   2563  7023					      repend
   2564  7024		       00		      .byte.b	0
   2563  7024					      repend
   2564  7025		       00		      .byte.b	0
   2563  7025					      repend
   2564  7026		       00		      .byte.b	0
   2563  7026					      repend
   2564  7027		       00		      .byte.b	0
   2563  7027					      repend
   2564  7028		       00		      .byte.b	0
   2563  7028					      repend
   2564  7029		       00		      .byte.b	0
   2563  7029					      repend
   2564  702a		       00		      .byte.b	0
   2563  702a					      repend
   2564  702b		       00		      .byte.b	0
   2563  702b					      repend
   2564  702c		       00		      .byte.b	0
   2563  702c					      repend
   2564  702d		       00		      .byte.b	0
   2563  702d					      repend
   2564  702e		       00		      .byte.b	0
   2563  702e					      repend
   2564  702f		       00		      .byte.b	0
   2563  702f					      repend
   2564  7030		       00		      .byte.b	0
   2563  7030					      repend
   2564  7031		       00		      .byte.b	0
   2563  7031					      repend
   2564  7032		       00		      .byte.b	0
   2563  7032					      repend
   2564  7033		       00		      .byte.b	0
   2563  7033					      repend
   2564  7034		       00		      .byte.b	0
   2563  7034					      repend
   2564  7035		       00		      .byte.b	0
   2563  7035					      repend
   2564  7036		       00		      .byte.b	0
   2563  7036					      repend
   2564  7037		       00		      .byte.b	0
   2563  7037					      repend
   2564  7038		       00		      .byte.b	0
   2563  7038					      repend
   2564  7039		       00		      .byte.b	0
   2563  7039					      repend
   2564  703a		       00		      .byte.b	0
   2563  703a					      repend
   2564  703b		       00		      .byte.b	0
   2563  703b					      repend
   2564  703c		       00		      .byte.b	0
   2563  703c					      repend
   2564  703d		       00		      .byte.b	0
   2563  703d					      repend
   2564  703e		       00		      .byte.b	0
   2563  703e					      repend
   2564  703f		       00		      .byte.b	0
   2563  703f					      repend
   2564  7040		       00		      .byte.b	0
   2563  7040					      repend
   2564  7041		       00		      .byte.b	0
   2563  7041					      repend
   2564  7042		       00		      .byte.b	0
   2563  7042					      repend
   2564  7043		       00		      .byte.b	0
   2563  7043					      repend
   2564  7044		       00		      .byte.b	0
   2563  7044					      repend
   2564  7045		       00		      .byte.b	0
   2563  7045					      repend
   2564  7046		       00		      .byte.b	0
   2563  7046					      repend
   2564  7047		       00		      .byte.b	0
   2563  7047					      repend
   2564  7048		       00		      .byte.b	0
   2563  7048					      repend
   2564  7049		       00		      .byte.b	0
   2563  7049					      repend
   2564  704a		       00		      .byte.b	0
   2563  704a					      repend
   2564  704b		       00		      .byte.b	0
   2563  704b					      repend
   2564  704c		       00		      .byte.b	0
   2563  704c					      repend
   2564  704d		       00		      .byte.b	0
   2563  704d					      repend
   2564  704e		       00		      .byte.b	0
   2563  704e					      repend
   2564  704f		       00		      .byte.b	0
   2563  704f					      repend
   2564  7050		       00		      .byte.b	0
   2563  7050					      repend
   2564  7051		       00		      .byte.b	0
   2563  7051					      repend
   2564  7052		       00		      .byte.b	0
   2563  7052					      repend
   2564  7053		       00		      .byte.b	0
   2563  7053					      repend
   2564  7054		       00		      .byte.b	0
   2563  7054					      repend
   2564  7055		       00		      .byte.b	0
   2563  7055					      repend
   2564  7056		       00		      .byte.b	0
   2563  7056					      repend
   2564  7057		       00		      .byte.b	0
   2563  7057					      repend
   2564  7058		       00		      .byte.b	0
   2563  7058					      repend
   2564  7059		       00		      .byte.b	0
   2563  7059					      repend
   2564  705a		       00		      .byte.b	0
   2563  705a					      repend
   2564  705b		       00		      .byte.b	0
   2563  705b					      repend
   2564  705c		       00		      .byte.b	0
   2563  705c					      repend
   2564  705d		       00		      .byte.b	0
   2563  705d					      repend
   2564  705e		       00		      .byte.b	0
   2563  705e					      repend
   2564  705f		       00		      .byte.b	0
   2563  705f					      repend
   2564  7060		       00		      .byte.b	0
   2563  7060					      repend
   2564  7061		       00		      .byte.b	0
   2563  7061					      repend
   2564  7062		       00		      .byte.b	0
   2563  7062					      repend
   2564  7063		       00		      .byte.b	0
   2563  7063					      repend
   2564  7064		       00		      .byte.b	0
   2563  7064					      repend
   2564  7065		       00		      .byte.b	0
   2563  7065					      repend
   2564  7066		       00		      .byte.b	0
   2563  7066					      repend
   2564  7067		       00		      .byte.b	0
   2563  7067					      repend
   2564  7068		       00		      .byte.b	0
   2563  7068					      repend
   2564  7069		       00		      .byte.b	0
   2563  7069					      repend
   2564  706a		       00		      .byte.b	0
   2563  706a					      repend
   2564  706b		       00		      .byte.b	0
   2563  706b					      repend
   2564  706c		       00		      .byte.b	0
   2563  706c					      repend
   2564  706d		       00		      .byte.b	0
   2563  706d					      repend
   2564  706e		       00		      .byte.b	0
   2563  706e					      repend
   2564  706f		       00		      .byte.b	0
   2563  706f					      repend
   2564  7070		       00		      .byte.b	0
   2563  7070					      repend
   2564  7071		       00		      .byte.b	0
   2563  7071					      repend
   2564  7072		       00		      .byte.b	0
   2563  7072					      repend
   2564  7073		       00		      .byte.b	0
   2563  7073					      repend
   2564  7074		       00		      .byte.b	0
   2563  7074					      repend
   2564  7075		       00		      .byte.b	0
   2563  7075					      repend
   2564  7076		       00		      .byte.b	0
   2563  7076					      repend
   2564  7077		       00		      .byte.b	0
   2563  7077					      repend
   2564  7078		       00		      .byte.b	0
   2563  7078					      repend
   2564  7079		       00		      .byte.b	0
   2563  7079					      repend
   2564  707a		       00		      .byte.b	0
   2563  707a					      repend
   2564  707b		       00		      .byte.b	0
   2563  707b					      repend
   2564  707c		       00		      .byte.b	0
   2563  707c					      repend
   2564  707d		       00		      .byte.b	0
   2563  707d					      repend
   2564  707e		       00		      .byte.b	0
   2563  707e					      repend
   2564  707f		       00		      .byte.b	0
   2563  707f					      repend
   2564  7080		       00		      .byte.b	0
   2565  7081					      repend
   2566  7081							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2567  7081
   2568  7081							;----------------------------------------
   2569  7081							; Display Data
   2570  7081							;----------------------------------------
   2571  7081							; The Display Data bank is copied into RAM when DPC+ initializes the cartridge.
   2572  7081							; This allows us to manipulate the data during run-time, but have a known
   2573  7081							; starting state when the Atari is first turned on.
   2574  7081							;
   2575  7081							; Unlike normal Atari VCS/2600 sprite definitions, the sprite data in the
   2576  7081							; Display Data bank is stored right-side-up.
   2577  7081							;
   2578  7081							;----------------------------------------
   2579  7081
   2580  7081				   Zeros32
   2581  7081		       00 84	   SOUND_OFF  =	(* & $1fff)/32
   2582  7081				   DisplayDataDigitBlank
   2583  7081		       00		      .byte.b	0	;--
   2584  7082		       00		      .byte.b	0	;--
   2585  7083		       00		      .byte.b	0	;--
   2586  7084		       00		      .byte.b	0	;--
   2587  7085		       00		      .byte.b	0	;--
   2588  7086		       00		      .byte.b	0	;--
   2589  7087		       00		      .byte.b	0	;--
   2590  7088		       00		      .byte.b	0	;--
   2591  7089
   2592  7089							;	align 32
   2593  7089							;Zeros32:
   2594  7089							;SOUND_OFF = (* & $1fff)/32
   2595  7089							;	.byte 0,0,0,0,0,0,0,0
   2596  7089		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2597  7091		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2598  7099		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2599  70a1
   2600  70a1		       00 85	   SINE_WAVE  =	(* & $1fff)/32
   2601  70a1		       03 03 03 04*	      .byte.b	3,3,3,4,4,5,5,5
   2602  70a9		       05 05 05 05*	      .byte.b	5,5,5,5,4,4,3,3
   2603  70b1		       03 02 02 01*	      .byte.b	3,2,2,1,1,0,0,0
   2604  70b9		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,2,2
   2605  70c1
   2606  70e0		       00 00 00 00*	      align	32
   2607  70e0		       00 87	   TRIANGLE_WAVE =	(* & $1fff)/32
   2608  70e0		       00 00 01 01*	      .byte.b	0,0,1,1,1,2,2,2
   2609  70e8		       03 03 03 04*	      .byte.b	3,3,3,4,4,4,5,5
   2610  70f0		       05 05 04 04*	      .byte.b	5,5,4,4,4,3,3,3
   2611  70f8		       02 02 02 01*	      .byte.b	2,2,2,1,1,1,0,0
   2612  7100
   2613  7100					      align	32
   2614  7100		       00 88	   SAWTOOTH_WAVE =	(* & $1fff)/32
   2615  7100		       00 00 00 00*	      .byte.b	0,0,0,0,1,1,1,1
   2616  7108		       01 01 02 02*	      .byte.b	1,1,2,2,2,2,2,2
   2617  7110		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,4,4
   2618  7118		       04 04 04 04*	      .byte.b	4,4,4,4,5,5,5,5
   2619  7120
   2620  7120					      align	32
   2621  7120		       00 89	   SQUARE_WAVE_VOL5 =	(* & $1fff)/32
   2622  7120		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2623  7128		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2624  7130		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   2625  7138		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5
   2626  7140
   2627  7140					      align	32
   2628  7140		       00 8a	   SQUARE_WAVE_VOL4 =	(* & $1fff)/32
   2629  7140		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2630  7148		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2631  7150		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   2632  7158		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4
   2633  7160
   2634  7160					      align	32
   2635  7160		       00 8b	   SQUARE_WAVE_VOL3 =	(* & $1fff)/32
   2636  7160		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2637  7168		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0
   2638  7170		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   2639  7178		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3
   2640  7180
   2641  7180					      align	32
   2642  7180		       00 8c	   NOISE_WAVE =	(* & $1fff)/32
   2643  7180		       07 01 09 0a*	      .byte.b	7, 1, 9,10, 2, 8, 8,14
   2644  7188		       03 0d 08 05*	      .byte.b	3,13, 8, 5,12, 2, 3, 7
   2645  7190		       07 01 08 04*	      .byte.b	7, 1, 8, 4,15, 1,13, 5
   2646  7198		       08 05 0b 06*	      .byte.b	8, 5,11, 6, 8, 7, 9, 2
   2647  71a0
   2648  71a0							; low and high byte of address table (for ROMdata array in C)
   2649  71a0		       57		      .byte.b	<fetcher_address_table
   2650  71a1		       0d		      .byte.b	((>fetcher_address_table) & $0f) | (((>fetcher_address_table) / 2) & $70)
   2651  71a2		       00		      .byte.b	0
   2652  71a3		       00		      .byte.b	0
   2653  71a4				   FETCHER_BEGIN
   2654  71a4		       10		      .byte.b	16
   2655  71a5		       10		      .byte.b	16
   2656  71a6		       10		      .byte.b	16
   2657  71a7		       10		      .byte.b	16	; to zero-fill on boot
   2658  71a8							;bB.asm
   2659  71a8							; bB.asm file is split here
   2660  71a8				   PF_data1
   2661  71a8		       7e		      .byte.b	%01111110
   2662  71a9		       42		      .byte.b	%01000010
   2663  71aa		       7e		      .byte.b	%01111110
   2664  71ab		       42		      .byte.b	%01000010
   2665  71ac		       7e		      .byte.b	%01111110
   2666  71ad		       42		      .byte.b	%01000010
   2667  71ae		       7e		      .byte.b	%01111110
   2668  71af		       42		      .byte.b	%01000010
   2669  71b0		       7e		      .byte.b	%01111110
   2670  71b1		       42		      .byte.b	%01000010
   2671  71b2		       7e		      .byte.b	%01111110
   2672  71b3		       42		      .byte.b	%01000010
   2673  71b4		       7e		      .byte.b	%01111110
   2674  71b5		       42		      .byte.b	%01000010
   2675  71b6		       7e		      .byte.b	%01111110
   2676  71b7		       42		      .byte.b	%01000010
   2677  71b8		       7e		      .byte.b	%01111110
   2678  71b9		       42		      .byte.b	%01000010
   2679  71ba		       7e		      .byte.b	%01111110
   2680  71bb		       42		      .byte.b	%01000010
   2681  71bc		       7e		      .byte.b	%01111110
   2682  71bd		       42		      .byte.b	%01000010
   2683  71be		       7e		      .byte.b	%01111110
   2684  71bf		       42		      .byte.b	%01000010
   2685  71c0		       7e		      .byte.b	%01111110
   2686  71c1		       42		      .byte.b	%01000010
   2687  71c2		       7e		      .byte.b	%01111110
   2688  71c3		       42		      .byte.b	%01000010
   2689  71c4		       7e		      .byte.b	%01111110
   2690  71c5		       42		      .byte.b	%01000010
   2691  71c6		       7e		      .byte.b	%01111110
   2692  71c7		       42		      .byte.b	%01000010
   2693  71c8		       7e		      .byte.b	%01111110
   2694  71c9		       42		      .byte.b	%01000010
   2695  71ca		       7e		      .byte.b	%01111110
   2696  71cb		       42		      .byte.b	%01000010
   2697  71cc		       7e		      .byte.b	%01111110
   2698  71cd		       42		      .byte.b	%01000010
   2699  71ce		       7e		      .byte.b	%01111110
   2700  71cf		       42		      .byte.b	%01000010
   2701  71d0		       7e		      .byte.b	%01111110
   2702  71d1		       42		      .byte.b	%01000010
   2703  71d2		       7e		      .byte.b	%01111110
   2704  71d3		       42		      .byte.b	%01000010
   2705  71d4		       7e		      .byte.b	%01111110
   2706  71d5		       42		      .byte.b	%01000010
   2707  71d6		       7e		      .byte.b	%01111110
   2708  71d7		       42		      .byte.b	%01000010
   2709  71d8		       7e		      .byte.b	%01111110
   2710  71d9		       42		      .byte.b	%01000010
   2711  71da		       7e		      .byte.b	%01111110
   2712  71db		       42		      .byte.b	%01000010
   2713  71dc		       7e		      .byte.b	%01111110
   2714  71dd		       42		      .byte.b	%01000010
   2715  71de		       7e		      .byte.b	%01111110
   2716  71df		       42		      .byte.b	%01000010
   2717  71e0		       7e		      .byte.b	%01111110
   2718  71e1		       42		      .byte.b	%01000010
   2719  71e2		       7e		      .byte.b	%01111110
   2720  71e3		       42		      .byte.b	%01000010
   2721  71e4		       7e		      .byte.b	%01111110
   2722  71e5		       42		      .byte.b	%01000010
   2723  71e6		       7e		      .byte.b	%01111110
   2724  71e7		       42		      .byte.b	%01000010
   2725  71e8		       7e		      .byte.b	%01111110
   2726  71e9		       42		      .byte.b	%01000010
   2727  71ea		       7e		      .byte.b	%01111110
   2728  71eb		       42		      .byte.b	%01000010
   2729  71ec		       7e		      .byte.b	%01111110
   2730  71ed		       42		      .byte.b	%01000010
   2731  71ee		       7e		      .byte.b	%01111110
   2732  71ef		       42		      .byte.b	%01000010
   2733  71f0		       7e		      .byte.b	%01111110
   2734  71f1		       42		      .byte.b	%01000010
   2735  71f2		       7e		      .byte.b	%01111110
   2736  71f3		       42		      .byte.b	%01000010
   2737  71f4		       7e		      .byte.b	%01111110
   2738  71f5		       42		      .byte.b	%01000010
   2739  71f6		       7e		      .byte.b	%01111110
   2740  71f7		       42		      .byte.b	%01000010
   2741  71f8		       7e		      .byte.b	%01111110
   2742  71f9		       42		      .byte.b	%01000010
   2743  71fa		       7e		      .byte.b	%01111110
   2744  71fb		       42		      .byte.b	%01000010
   2745  71fc		       7e		      .byte.b	%01111110
   2746  71fd		       42		      .byte.b	%01000010
   2747  71fe		       7e		      .byte.b	%01111110
   2748  71ff		       42		      .byte.b	%01000010
   2749  7200		       7e		      .byte.b	%01111110
   2750  7201		       7e		      .byte.b	%01111110
   2751  7202		       42		      .byte.b	%01000010
   2752  7203		       7e		      .byte.b	%01111110
   2753  7204		       42		      .byte.b	%01000010
   2754  7205		       7e		      .byte.b	%01111110
   2755  7206		       42		      .byte.b	%01000010
   2756  7207		       7e		      .byte.b	%01111110
   2757  7208		       42		      .byte.b	%01000010
   2758  7209		       7e		      .byte.b	%01111110
   2759  720a		       42		      .byte.b	%01000010
   2760  720b		       7e		      .byte.b	%01111110
   2761  720c		       42		      .byte.b	%01000010
   2762  720d		       7e		      .byte.b	%01111110
   2763  720e		       42		      .byte.b	%01000010
   2764  720f		       7e		      .byte.b	%01111110
   2765  7210		       42		      .byte.b	%01000010
   2766  7211		       7e		      .byte.b	%01111110
   2767  7212		       42		      .byte.b	%01000010
   2768  7213		       7e		      .byte.b	%01111110
   2769  7214		       42		      .byte.b	%01000010
   2770  7215		       7e		      .byte.b	%01111110
   2771  7216		       42		      .byte.b	%01000010
   2772  7217		       7e		      .byte.b	%01111110
   2773  7218		       42		      .byte.b	%01000010
   2774  7219		       7e		      .byte.b	%01111110
   2775  721a		       42		      .byte.b	%01000010
   2776  721b		       7e		      .byte.b	%01111110
   2777  721c		       42		      .byte.b	%01000010
   2778  721d		       7e		      .byte.b	%01111110
   2779  721e		       42		      .byte.b	%01000010
   2780  721f		       7e		      .byte.b	%01111110
   2781  7220		       42		      .byte.b	%01000010
   2782  7221		       7e		      .byte.b	%01111110
   2783  7222		       42		      .byte.b	%01000010
   2784  7223		       7e		      .byte.b	%01111110
   2785  7224		       42		      .byte.b	%01000010
   2786  7225		       7e		      .byte.b	%01111110
   2787  7226		       42		      .byte.b	%01000010
   2788  7227		       7e		      .byte.b	%01111110
   2789  7228		       42		      .byte.b	%01000010
   2790  7229		       7e		      .byte.b	%01111110
   2791  722a		       42		      .byte.b	%01000010
   2792  722b		       7e		      .byte.b	%01111110
   2793  722c		       42		      .byte.b	%01000010
   2794  722d		       7e		      .byte.b	%01111110
   2795  722e		       42		      .byte.b	%01000010
   2796  722f		       7e		      .byte.b	%01111110
   2797  7230		       42		      .byte.b	%01000010
   2798  7231		       7e		      .byte.b	%01111110
   2799  7232		       42		      .byte.b	%01000010
   2800  7233		       7e		      .byte.b	%01111110
   2801  7234		       42		      .byte.b	%01000010
   2802  7235		       7e		      .byte.b	%01111110
   2803  7236		       42		      .byte.b	%01000010
   2804  7237		       7e		      .byte.b	%01111110
   2805  7238		       42		      .byte.b	%01000010
   2806  7239		       7e		      .byte.b	%01111110
   2807  723a		       42		      .byte.b	%01000010
   2808  723b		       7e		      .byte.b	%01111110
   2809  723c		       42		      .byte.b	%01000010
   2810  723d		       7e		      .byte.b	%01111110
   2811  723e		       42		      .byte.b	%01000010
   2812  723f		       7e		      .byte.b	%01111110
   2813  7240		       42		      .byte.b	%01000010
   2814  7241		       7e		      .byte.b	%01111110
   2815  7242		       42		      .byte.b	%01000010
   2816  7243		       7e		      .byte.b	%01111110
   2817  7244		       42		      .byte.b	%01000010
   2818  7245		       7e		      .byte.b	%01111110
   2819  7246		       42		      .byte.b	%01000010
   2820  7247		       7e		      .byte.b	%01111110
   2821  7248		       42		      .byte.b	%01000010
   2822  7249		       7e		      .byte.b	%01111110
   2823  724a		       42		      .byte.b	%01000010
   2824  724b		       7e		      .byte.b	%01111110
   2825  724c		       42		      .byte.b	%01000010
   2826  724d		       7e		      .byte.b	%01111110
   2827  724e		       42		      .byte.b	%01000010
   2828  724f		       7e		      .byte.b	%01111110
   2829  7250		       42		      .byte.b	%01000010
   2830  7251		       7e		      .byte.b	%01111110
   2831  7252		       42		      .byte.b	%01000010
   2832  7253		       7e		      .byte.b	%01111110
   2833  7254		       42		      .byte.b	%01000010
   2834  7255		       7e		      .byte.b	%01111110
   2835  7256		       42		      .byte.b	%01000010
   2836  7257		       7e		      .byte.b	%01111110
   2837  7258		       42		      .byte.b	%01000010
   2838  7259		       7e		      .byte.b	%01111110
   2839  725a		       7e		      .byte.b	%01111110
   2840  725b		       42		      .byte.b	%01000010
   2841  725c		       7e		      .byte.b	%01111110
   2842  725d		       42		      .byte.b	%01000010
   2843  725e		       7e		      .byte.b	%01111110
   2844  725f		       42		      .byte.b	%01000010
   2845  7260		       7e		      .byte.b	%01111110
   2846  7261		       42		      .byte.b	%01000010
   2847  7262		       7e		      .byte.b	%01111110
   2848  7263		       42		      .byte.b	%01000010
   2849  7264		       7e		      .byte.b	%01111110
   2850  7265		       42		      .byte.b	%01000010
   2851  7266		       7e		      .byte.b	%01111110
   2852  7267		       42		      .byte.b	%01000010
   2853  7268		       7e		      .byte.b	%01111110
   2854  7269		       42		      .byte.b	%01000010
   2855  726a		       7e		      .byte.b	%01111110
   2856  726b		       42		      .byte.b	%01000010
   2857  726c		       7e		      .byte.b	%01111110
   2858  726d		       42		      .byte.b	%01000010
   2859  726e		       7e		      .byte.b	%01111110
   2860  726f		       42		      .byte.b	%01000010
   2861  7270		       7e		      .byte.b	%01111110
   2862  7271		       42		      .byte.b	%01000010
   2863  7272		       7e		      .byte.b	%01111110
   2864  7273		       42		      .byte.b	%01000010
   2865  7274		       7e		      .byte.b	%01111110
   2866  7275		       42		      .byte.b	%01000010
   2867  7276		       7e		      .byte.b	%01111110
   2868  7277		       42		      .byte.b	%01000010
   2869  7278		       7e		      .byte.b	%01111110
   2870  7279		       42		      .byte.b	%01000010
   2871  727a		       7e		      .byte.b	%01111110
   2872  727b		       42		      .byte.b	%01000010
   2873  727c		       7e		      .byte.b	%01111110
   2874  727d		       42		      .byte.b	%01000010
   2875  727e		       7e		      .byte.b	%01111110
   2876  727f		       42		      .byte.b	%01000010
   2877  7280		       7e		      .byte.b	%01111110
   2878  7281		       42		      .byte.b	%01000010
   2879  7282		       7e		      .byte.b	%01111110
   2880  7283		       42		      .byte.b	%01000010
   2881  7284		       7e		      .byte.b	%01111110
   2882  7285		       42		      .byte.b	%01000010
   2883  7286		       7e		      .byte.b	%01111110
   2884  7287		       42		      .byte.b	%01000010
   2885  7288		       7e		      .byte.b	%01111110
   2886  7289		       42		      .byte.b	%01000010
   2887  728a		       7e		      .byte.b	%01111110
   2888  728b		       42		      .byte.b	%01000010
   2889  728c		       7e		      .byte.b	%01111110
   2890  728d		       42		      .byte.b	%01000010
   2891  728e		       7e		      .byte.b	%01111110
   2892  728f		       42		      .byte.b	%01000010
   2893  7290		       7e		      .byte.b	%01111110
   2894  7291		       42		      .byte.b	%01000010
   2895  7292		       7e		      .byte.b	%01111110
   2896  7293		       42		      .byte.b	%01000010
   2897  7294		       7e		      .byte.b	%01111110
   2898  7295		       42		      .byte.b	%01000010
   2899  7296		       7e		      .byte.b	%01111110
   2900  7297		       42		      .byte.b	%01000010
   2901  7298		       7e		      .byte.b	%01111110
   2902  7299		       42		      .byte.b	%01000010
   2903  729a		       7e		      .byte.b	%01111110
   2904  729b		       42		      .byte.b	%01000010
   2905  729c		       7e		      .byte.b	%01111110
   2906  729d		       42		      .byte.b	%01000010
   2907  729e		       7e		      .byte.b	%01111110
   2908  729f		       42		      .byte.b	%01000010
   2909  72a0		       7e		      .byte.b	%01111110
   2910  72a1		       42		      .byte.b	%01000010
   2911  72a2		       7e		      .byte.b	%01111110
   2912  72a3		       42		      .byte.b	%01000010
   2913  72a4		       7e		      .byte.b	%01111110
   2914  72a5		       42		      .byte.b	%01000010
   2915  72a6		       7e		      .byte.b	%01111110
   2916  72a7		       42		      .byte.b	%01000010
   2917  72a8		       7e		      .byte.b	%01111110
   2918  72a9		       42		      .byte.b	%01000010
   2919  72aa		       7e		      .byte.b	%01111110
   2920  72ab		       42		      .byte.b	%01000010
   2921  72ac		       7e		      .byte.b	%01111110
   2922  72ad		       42		      .byte.b	%01000010
   2923  72ae		       7e		      .byte.b	%01111110
   2924  72af		       42		      .byte.b	%01000010
   2925  72b0		       7e		      .byte.b	%01111110
   2926  72b1		       42		      .byte.b	%01000010
   2927  72b2		       7e		      .byte.b	%01111110
   2928  72b3		       7e		      .byte.b	%01111110
   2929  72b4		       42		      .byte.b	%01000010
   2930  72b5		       7e		      .byte.b	%01111110
   2931  72b6		       42		      .byte.b	%01000010
   2932  72b7		       7e		      .byte.b	%01111110
   2933  72b8		       42		      .byte.b	%01000010
   2934  72b9		       7e		      .byte.b	%01111110
   2935  72ba		       42		      .byte.b	%01000010
   2936  72bb		       7e		      .byte.b	%01111110
   2937  72bc		       42		      .byte.b	%01000010
   2938  72bd		       7e		      .byte.b	%01111110
   2939  72be		       42		      .byte.b	%01000010
   2940  72bf		       7e		      .byte.b	%01111110
   2941  72c0		       42		      .byte.b	%01000010
   2942  72c1		       7e		      .byte.b	%01111110
   2943  72c2		       42		      .byte.b	%01000010
   2944  72c3		       7e		      .byte.b	%01111110
   2945  72c4		       42		      .byte.b	%01000010
   2946  72c5		       7e		      .byte.b	%01111110
   2947  72c6		       42		      .byte.b	%01000010
   2948  72c7		       7e		      .byte.b	%01111110
   2949  72c8		       42		      .byte.b	%01000010
   2950  72c9		       7e		      .byte.b	%01111110
   2951  72ca		       42		      .byte.b	%01000010
   2952  72cb		       7e		      .byte.b	%01111110
   2953  72cc		       42		      .byte.b	%01000010
   2954  72cd		       7e		      .byte.b	%01111110
   2955  72ce		       42		      .byte.b	%01000010
   2956  72cf		       7e		      .byte.b	%01111110
   2957  72d0		       42		      .byte.b	%01000010
   2958  72d1		       7e		      .byte.b	%01111110
   2959  72d2		       42		      .byte.b	%01000010
   2960  72d3		       7e		      .byte.b	%01111110
   2961  72d4		       42		      .byte.b	%01000010
   2962  72d5		       7e		      .byte.b	%01111110
   2963  72d6		       42		      .byte.b	%01000010
   2964  72d7		       7e		      .byte.b	%01111110
   2965  72d8		       42		      .byte.b	%01000010
   2966  72d9		       7e		      .byte.b	%01111110
   2967  72da		       42		      .byte.b	%01000010
   2968  72db		       7e		      .byte.b	%01111110
   2969  72dc		       42		      .byte.b	%01000010
   2970  72dd		       7e		      .byte.b	%01111110
   2971  72de		       42		      .byte.b	%01000010
   2972  72df		       7e		      .byte.b	%01111110
   2973  72e0		       42		      .byte.b	%01000010
   2974  72e1		       7e		      .byte.b	%01111110
   2975  72e2		       42		      .byte.b	%01000010
   2976  72e3		       7e		      .byte.b	%01111110
   2977  72e4		       42		      .byte.b	%01000010
   2978  72e5		       7e		      .byte.b	%01111110
   2979  72e6		       42		      .byte.b	%01000010
   2980  72e7		       7e		      .byte.b	%01111110
   2981  72e8		       42		      .byte.b	%01000010
   2982  72e9		       7e		      .byte.b	%01111110
   2983  72ea		       42		      .byte.b	%01000010
   2984  72eb		       7e		      .byte.b	%01111110
   2985  72ec		       42		      .byte.b	%01000010
   2986  72ed		       7e		      .byte.b	%01111110
   2987  72ee		       42		      .byte.b	%01000010
   2988  72ef		       7e		      .byte.b	%01111110
   2989  72f0		       42		      .byte.b	%01000010
   2990  72f1		       7e		      .byte.b	%01111110
   2991  72f2		       42		      .byte.b	%01000010
   2992  72f3		       7e		      .byte.b	%01111110
   2993  72f4		       42		      .byte.b	%01000010
   2994  72f5		       7e		      .byte.b	%01111110
   2995  72f6		       42		      .byte.b	%01000010
   2996  72f7		       7e		      .byte.b	%01111110
   2997  72f8		       42		      .byte.b	%01000010
   2998  72f9		       7e		      .byte.b	%01111110
   2999  72fa		       42		      .byte.b	%01000010
   3000  72fb		       7e		      .byte.b	%01111110
   3001  72fc		       42		      .byte.b	%01000010
   3002  72fd		       7e		      .byte.b	%01111110
   3003  72fe		       42		      .byte.b	%01000010
   3004  72ff		       7e		      .byte.b	%01111110
   3005  7300		       42		      .byte.b	%01000010
   3006  7301		       7e		      .byte.b	%01111110
   3007  7302		       42		      .byte.b	%01000010
   3008  7303		       7e		      .byte.b	%01111110
   3009  7304		       42		      .byte.b	%01000010
   3010  7305		       7e		      .byte.b	%01111110
   3011  7306		       42		      .byte.b	%01000010
   3012  7307		       7e		      .byte.b	%01111110
   3013  7308		       42		      .byte.b	%01000010
   3014  7309		       7e		      .byte.b	%01111110
   3015  730a		       42		      .byte.b	%01000010
   3016  730b		       7e		      .byte.b	%01111110
   3017  730c				   playfieldcolorL018
   3018  730c		       0e		      .byte.b	$0E
   3019  730d		       0c		      .byte.b	$0C
   3020  730e		       0a		      .byte.b	$0A
   3021  730f		       08		      .byte.b	$08
   3022  7310		       06		      .byte.b	$06
   3023  7311		       1e		      .byte.b	$1E
   3024  7312		       1c		      .byte.b	$1C
   3025  7313		       1a		      .byte.b	$1A
   3026  7314		       18		      .byte.b	$18
   3027  7315		       16		      .byte.b	$16
   3028  7316		       2e		      .byte.b	$2E
   3029  7317		       2c		      .byte.b	$2C
   3030  7318		       2a		      .byte.b	$2A
   3031  7319		       28		      .byte.b	$28
   3032  731a		       26		      .byte.b	$26
   3033  731b		       3e		      .byte.b	$3E
   3034  731c		       3c		      .byte.b	$3C
   3035  731d		       3a		      .byte.b	$3A
   3036  731e		       38		      .byte.b	$38
   3037  731f		       36		      .byte.b	$36
   3038  7320		       4e		      .byte.b	$4E
   3039  7321		       4c		      .byte.b	$4C
   3040  7322		       4a		      .byte.b	$4A
   3041  7323		       48		      .byte.b	$48
   3042  7324		       46		      .byte.b	$46
   3043  7325		       5e		      .byte.b	$5E
   3044  7326		       5c		      .byte.b	$5C
   3045  7327		       5a		      .byte.b	$5A
   3046  7328		       58		      .byte.b	$58
   3047  7329		       56		      .byte.b	$56
   3048  732a		       6e		      .byte.b	$6E
   3049  732b		       6c		      .byte.b	$6C
   3050  732c		       6a		      .byte.b	$6A
   3051  732d		       68		      .byte.b	$68
   3052  732e		       66		      .byte.b	$66
   3053  732f		       7e		      .byte.b	$7E
   3054  7330		       7c		      .byte.b	$7C
   3055  7331		       7a		      .byte.b	$7A
   3056  7332		       78		      .byte.b	$78
   3057  7333		       76		      .byte.b	$76
   3058  7334		       9e		      .byte.b	$9E
   3059  7335		       9c		      .byte.b	$9C
   3060  7336		       9a		      .byte.b	$9A
   3061  7337		       98		      .byte.b	$98
   3062  7338		       96		      .byte.b	$96
   3063  7339		       ae		      .byte.b	$AE
   3064  733a		       ac		      .byte.b	$AC
   3065  733b		       aa		      .byte.b	$AA
   3066  733c		       a8		      .byte.b	$A8
   3067  733d		       a6		      .byte.b	$A6
   3068  733e		       be		      .byte.b	$BE
   3069  733f		       bc		      .byte.b	$BC
   3070  7340		       ba		      .byte.b	$BA
   3071  7341		       b8		      .byte.b	$B8
   3072  7342		       b6		      .byte.b	$B6
   3073  7343		       ce		      .byte.b	$CE
   3074  7344		       cc		      .byte.b	$CC
   3075  7345		       ca		      .byte.b	$CA
   3076  7346		       c8		      .byte.b	$C8
   3077  7347		       c6		      .byte.b	$C6
   3078  7348		       de		      .byte.b	$DE
   3079  7349		       dc		      .byte.b	$DC
   3080  734a		       da		      .byte.b	$DA
   3081  734b		       d8		      .byte.b	$D8
   3082  734c		       d6		      .byte.b	$D6
   3083  734d		       ee		      .byte.b	$EE
   3084  734e		       ec		      .byte.b	$EC
   3085  734f		       ea		      .byte.b	$EA
   3086  7350		       e8		      .byte.b	$E8
   3087  7351		       e6		      .byte.b	$E6
   3088  7352		       3e		      .byte.b	$3E
   3089  7353		       3c		      .byte.b	$3C
   3090  7354		       3a		      .byte.b	$3A
   3091  7355		       38		      .byte.b	$38
   3092  7356		       36		      .byte.b	$36
   3093  7357		       4e		      .byte.b	$4E
   3094  7358		       4c		      .byte.b	$4C
   3095  7359		       4a		      .byte.b	$4A
   3096  735a		       48		      .byte.b	$48
   3097  735b		       46		      .byte.b	$46
   3098  735c		       5e		      .byte.b	$5E
   3099  735d		       5c		      .byte.b	$5C
   3100  735e		       5a		      .byte.b	$5A
   3101  735f		       58		      .byte.b	$58
   3102  7360		       56		      .byte.b	$56
   3103  7361		       6e		      .byte.b	$6E
   3104  7362		       6c		      .byte.b	$6C
   3105  7363		       6a		      .byte.b	$6A
   3106  7364		       68		      .byte.b	$68
   3107  7365		       66		      .byte.b	$66
   3108  7366		       7e		      .byte.b	$7E
   3109  7367		       7c		      .byte.b	$7C
   3110  7368		       7a		      .byte.b	$7A
   3111  7369		       78		      .byte.b	$78
   3112  736a		       76		      .byte.b	$76
   3113  736b		       8e		      .byte.b	$8E
   3114  736c		       8c		      .byte.b	$8C
   3115  736d		       8a		      .byte.b	$8A
   3116  736e		       88		      .byte.b	$88
   3117  736f		       86		      .byte.b	$86
   3118  7370		       9e		      .byte.b	$9E
   3119  7371		       9c		      .byte.b	$9C
   3120  7372		       9a		      .byte.b	$9A
   3121  7373		       98		      .byte.b	$98
   3122  7374		       96		      .byte.b	$96
   3123  7375		       be		      .byte.b	$BE
   3124  7376		       bc		      .byte.b	$BC
   3125  7377		       ba		      .byte.b	$BA
   3126  7378		       b8		      .byte.b	$B8
   3127  7379		       b6		      .byte.b	$B6
   3128  737a		       ce		      .byte.b	$CE
   3129  737b		       cc		      .byte.b	$CC
   3130  737c		       ca		      .byte.b	$CA
   3131  737d		       c8		      .byte.b	$C8
   3132  737e		       c6		      .byte.b	$C6
   3133  737f		       fe		      .byte.b	$FE
   3134  7380		       fc		      .byte.b	$FC
   3135  7381		       fa		      .byte.b	$FA
   3136  7382		       f8		      .byte.b	$F8
   3137  7383		       f6		      .byte.b	$F6
   3138  7384				   backgroundcolorL019
   3139  7384		       80		      .byte.b	$80
   3140  7385		       82		      .byte.b	$82
   3141  7386		       84		      .byte.b	$84
   3142  7387		       86		      .byte.b	$86
   3143  7388		       88		      .byte.b	$88
   3144  7389		       8a		      .byte.b	$8A
   3145  738a		       8c		      .byte.b	$8C
   3146  738b		       8e		      .byte.b	$8E
   3147  738c		       80		      .byte.b	$80
   3148  738d		       82		      .byte.b	$82
   3149  738e		       84		      .byte.b	$84
   3150  738f		       86		      .byte.b	$86
   3151  7390		       88		      .byte.b	$88
   3152  7391		       8a		      .byte.b	$8A
   3153  7392		       8c		      .byte.b	$8C
   3154  7393		       8e		      .byte.b	$8E
   3155  7394		       80		      .byte.b	$80
   3156  7395		       82		      .byte.b	$82
   3157  7396		       84		      .byte.b	$84
   3158  7397		       86		      .byte.b	$86
   3159  7398		       88		      .byte.b	$88
   3160  7399		       8a		      .byte.b	$8A
   3161  739a		       8c		      .byte.b	$8C
   3162  739b		       8e		      .byte.b	$8E
   3163  739c		       80		      .byte.b	$80
   3164  739d		       82		      .byte.b	$82
   3165  739e		       84		      .byte.b	$84
   3166  739f		       86		      .byte.b	$86
   3167  73a0		       88		      .byte.b	$88
   3168  73a1		       8a		      .byte.b	$8A
   3169  73a2		       8c		      .byte.b	$8C
   3170  73a3		       8e		      .byte.b	$8E
   3171  73a4		       80		      .byte.b	$80
   3172  73a5		       82		      .byte.b	$82
   3173  73a6		       84		      .byte.b	$84
   3174  73a7		       86		      .byte.b	$86
   3175  73a8		       88		      .byte.b	$88
   3176  73a9		       8a		      .byte.b	$8A
   3177  73aa		       8c		      .byte.b	$8C
   3178  73ab		       8e		      .byte.b	$8E
   3179  73ac		       80		      .byte.b	$80
   3180  73ad		       82		      .byte.b	$82
   3181  73ae		       84		      .byte.b	$84
   3182  73af		       86		      .byte.b	$86
   3183  73b0		       88		      .byte.b	$88
   3184  73b1		       8a		      .byte.b	$8A
   3185  73b2		       8c		      .byte.b	$8C
   3186  73b3		       8e		      .byte.b	$8E
   3187  73b4		       80		      .byte.b	$80
   3188  73b5		       82		      .byte.b	$82
   3189  73b6		       84		      .byte.b	$84
   3190  73b7		       86		      .byte.b	$86
   3191  73b8		       88		      .byte.b	$88
   3192  73b9		       8a		      .byte.b	$8A
   3193  73ba		       8c		      .byte.b	$8C
   3194  73bb		       8e		      .byte.b	$8E
   3195  73bc		       80		      .byte.b	$80
   3196  73bd		       82		      .byte.b	$82
   3197  73be		       84		      .byte.b	$84
   3198  73bf		       86		      .byte.b	$86
   3199  73c0		       88		      .byte.b	$88
   3200  73c1		       8a		      .byte.b	$8A
   3201  73c2		       8c		      .byte.b	$8C
   3202  73c3		       8e		      .byte.b	$8E
   3203  73c4		       80		      .byte.b	$80
   3204  73c5		       82		      .byte.b	$82
   3205  73c6		       84		      .byte.b	$84
   3206  73c7		       86		      .byte.b	$86
   3207  73c8		       88		      .byte.b	$88
   3208  73c9		       8a		      .byte.b	$8A
   3209  73ca		       8c		      .byte.b	$8C
   3210  73cb		       8e		      .byte.b	$8E
   3211  73cc		       80		      .byte.b	$80
   3212  73cd		       82		      .byte.b	$82
   3213  73ce		       84		      .byte.b	$84
   3214  73cf		       86		      .byte.b	$86
   3215  73d0		       88		      .byte.b	$88
   3216  73d1		       8a		      .byte.b	$8A
   3217  73d2		       8c		      .byte.b	$8C
   3218  73d3		       8e		      .byte.b	$8E
   3219  73d4		       80		      .byte.b	$80
   3220  73d5		       82		      .byte.b	$82
   3221  73d6		       84		      .byte.b	$84
   3222  73d7		       86		      .byte.b	$86
   3223  73d8		       88		      .byte.b	$88
   3224  73d9		       8a		      .byte.b	$8A
   3225  73da		       8c		      .byte.b	$8C
   3226  73db		       80		      .byte.b	$80
   3227  73dc					      if	ECHOFIRST
      3064 bytes of ROM space left in graphics bank
   3228  73dc					      echo	"    ",[(DPC_graphics_end - *)]d , "bytes of ROM space left in graphics bank")
   3229  73dc					      endif
   3230  73dc		       00 01	   ECHOFIRST  =	1
   3231  73dc
   3232  73dc
   3233  73dc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3234  73dc
   3235  7fd4					      ORG	$7FF4-bscode_length
   3236  7fd4					      RORG	$DFF4-bscode_length
   3237  7fd4				   DPC_graphics_end
   3238  7fd4
   3239  7fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3240  7fd4
   3241  7fd4							; every bank has this stuff at the same place
   3242  7fd4							; this code can switch to/from any bank at any entry point
   3243  7fd4							; and can preserve register values
   3244  7fd4							; note: lines not starting with a space are not placed in all banks
   3245  7fd4							;
   3246  7fd4							; line below tells the compiler how long this is - do not remove
   3247  7fd4							;size=32
   3248  7fd4
   3249  7fd4				   begin_bscode
   3250  7fd4		       a2 ff		      ldx	#$ff
   3251  7fd6					      ifconst	FASTFETCH	; using DPC+
   3252  7fd6		       8e 58 10 	      stx	FASTFETCH
   3253  7fd9					      endif
   3254  7fd9		       9a		      txs
   3255  7fda				  -	      if	bankswitch == 64
   3256  7fda				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3257  7fda					      else
   3258  7fda		       a9 18		      lda	#>(start-1)
   3259  7fdc					      endif
   3260  7fdc		       48		      pha
   3261  7fdd		       a9 e3		      lda	#<(start-1)
   3262  7fdf		       48		      pha
   3263  7fe0
   3264  7fe0				   BS_return
   3265  7fe0		       48		      pha
   3266  7fe1		       8a		      txa
   3267  7fe2		       48		      pha
   3268  7fe3		       ba		      tsx
   3269  7fe4
   3270  7fe4					      if	bankswitch != 64
   3271  7fe4		       b5 04		      lda	4,x	; get high byte of return address
   3272  7fe6
   3273  7fe6		       2a		      rol
   3274  7fe7		       2a		      rol
   3275  7fe8		       2a		      rol
   3276  7fe9		       2a		      rol
   3277  7fea		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3278  7fec		       aa		      tax
   3279  7fed		       e8		      inx
   3280  7fee				  -	      else
   3281  7fee				  -	      lda	4,x	; get high byte of return address
   3282  7fee				  -	      tay
   3283  7fee				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3284  7fee				  -	      sta	4,x
   3285  7fee				  -	      tya
   3286  7fee				  -	      lsr
   3287  7fee				  -	      lsr
   3288  7fee				  -	      lsr
   3289  7fee				  -	      lsr
   3290  7fee				  -	      tax
   3291  7fee				  -	      inx
   3292  7fee					      endif
   3293  7fee
   3294  7fee				   BS_jsr
   3295  7fee		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3296  7ff1		       68		      pla
   3297  7ff2		       aa		      tax
   3298  7ff3		       68		      pla
   3299  7ff4		       60		      rts
   3300  7ff5				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3301  7ff5				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3302  7ff5				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3303  7ff5					      endif
   3304  7ff5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3305  7ff5
   3306  8000					      org	$8000
   3307  8000					      rorg	$1000
   3308  8000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3309  8000
   3310  8000							; 1K Frequency Table.
   3311  8000							; Fred Quimby, Darrell Spice Jr, Chris Walton 2010
   3312  8000							;
   3313  8000							; The 1K Frequency Table can contain up to 256 frequency values
   3314  8000							;
   3315  8000							; Table entries are defined as 2^32*freq/20000
   3316  8000							;
   3317  8000							; If User ARM code is being used, then the last 512 bytes of the frequency
   3318  8000							; table will no longer be available, reducing the number of frequencies you can
   3319  8000							; use to 128.
   3320  8000
   3321  8000							; piano key frequencies (s = sharp)
   3322  8000
   3323  8000				   .freq_table_start
   3324  8000
   3325  8000		       00 00 00 00	      DC.L	0
   3326  8000		       00 01	   A0	      =	(* & $3ff)/4
   3327  8004		       ac 1c 5a 00	      DC.L	5905580
   3328  8008
   3329  8008		       00 02	   A0s	      =	(* & $3ff)/4
   3330  8008		       68 78 5f 00	      DC.L	6256744
   3331  800c
   3332  800c		       00 03	   B0	      =	(* & $3ff)/4
   3333  800c		       b5 25 65 00	      DC.L	6628789
   3334  8010
   3335  8010		       00 04	   C1	      =	(* & $3ff)/4
   3336  8010		       6e 29 6b 00	      DC.L	7022958
   3337  8014
   3338  8014		       00 05	   C1s	      =	(* & $3ff)/4
   3339  8014		       b5 88 71 00	      DC.L	7440565
   3340  8018
   3341  8018		       00 06	   D1	      =	(* & $3ff)/4
   3342  8018		       fc 48 78 00	      DC.L	7883004
   3343  801c
   3344  801c		       00 07	   D1s	      =	(* & $3ff)/4
   3345  801c		       07 70 7f 00	      DC.L	8351751
   3346  8020
   3347  8020		       00 08	   E1	      =	(* & $3ff)/4
   3348  8020		       f4 03 87 00	      DC.L	8848372
   3349  8024
   3350  8024		       00 09	   F1	      =	(* & $3ff)/4
   3351  8024		       3c 0b 8f 00	      DC.L	9374524
   3352  8028
   3353  8028		       00 0a	   F1s	      =	(* & $3ff)/4
   3354  8028		       ba 8c 97 00	      DC.L	9931962
   3355  802c
   3356  802c		       00 0b	   G1	      =	(* & $3ff)/4
   3357  802c		       b3 8f a0 00	      DC.L	10522547
   3358  8030
   3359  8030		       00 0c	   G1s	      =	(* & $3ff)/4
   3360  8030		       db 1b aa 00	      DC.L	11148251
   3361  8034
   3362  8034		       00 0d	   A1	      =	(* & $3ff)/4
   3363  8034		       58 39 b4 00	      DC.L	11811160
   3364  8038
   3365  8038		       00 0e	   A1s	      =	(* & $3ff)/4
   3366  8038		       d0 f0 be 00	      DC.L	12513488
   3367  803c
   3368  803c		       00 0f	   B1	      =	(* & $3ff)/4
   3369  803c		       6b 4b ca 00	      DC.L	13257579
   3370  8040
   3371  8040		       00 10	   C2	      =	(* & $3ff)/4
   3372  8040		       dc 52 d6 00	      DC.L	14045916
   3373  8044
   3374  8044		       00 11	   C2s	      =	(* & $3ff)/4
   3375  8044		       69 11 e3 00	      DC.L	14881129
   3376  8048
   3377  8048		       00 12	   D2	      =	(* & $3ff)/4
   3378  8048		       f7 91 f0 00	      DC.L	15766007
   3379  804c
   3380  804c		       00 13	   D2s	      =	(* & $3ff)/4
   3381  804c		       0f e0 fe 00	      DC.L	16703503
   3382  8050
   3383  8050		       00 14	   E2	      =	(* & $3ff)/4
   3384  8050		       e9 07 0e 01	      DC.L	17696745
   3385  8054
   3386  8054		       00 15	   F2	      =	(* & $3ff)/4
   3387  8054		       78 16 1e 01	      DC.L	18749048
   3388  8058
   3389  8058		       00 16	   F2s	      =	(* & $3ff)/4
   3390  8058		       74 19 2f 01	      DC.L	19863924
   3391  805c
   3392  805c		       00 17	   G2	      =	(* & $3ff)/4
   3393  805c		       67 1f 41 01	      DC.L	21045095
   3394  8060
   3395  8060		       00 18	   G2s	      =	(* & $3ff)/4
   3396  8060		       b5 37 54 01	      DC.L	22296501
   3397  8064
   3398  8064		       00 19	   A2	      =	(* & $3ff)/4
   3399  8064		       b0 72 68 01	      DC.L	23622320
   3400  8068
   3401  8068		       00 1a	   A2s	      =	(* & $3ff)/4
   3402  8068		       a0 e1 7d 01	      DC.L	25026976
   3403  806c
   3404  806c		       00 1b	   B2	      =	(* & $3ff)/4
   3405  806c		       d6 96 94 01	      DC.L	26515158
   3406  8070
   3407  8070		       00 1c	   C3	      =	(* & $3ff)/4
   3408  8070		       b7 a5 ac 01	      DC.L	28091831
   3409  8074
   3410  8074		       00 1d	   C3s	      =	(* & $3ff)/4
   3411  8074		       d2 22 c6 01	      DC.L	29762258
   3412  8078
   3413  8078		       00 1e	   D3	      =	(* & $3ff)/4
   3414  8078		       ee 23 e1 01	      DC.L	31532014
   3415  807c
   3416  807c		       00 1f	   D3s	      =	(* & $3ff)/4
   3417  807c		       1d c0 fd 01	      DC.L	33407005
   3418  8080
   3419  8080		       00 20	   E3	      =	(* & $3ff)/4
   3420  8080		       d1 0f 1c 02	      DC.L	35393489
   3421  8084
   3422  8084		       00 21	   F3	      =	(* & $3ff)/4
   3423  8084		       f0 2c 3c 02	      DC.L	37498096
   3424  8088
   3425  8088		       00 22	   F3s	      =	(* & $3ff)/4
   3426  8088		       e9 32 5e 02	      DC.L	39727849
   3427  808c
   3428  808c		       00 23	   G3	      =	(* & $3ff)/4
   3429  808c		       cd 3e 82 02	      DC.L	42090189
   3430  8090
   3431  8090		       00 24	   G3s	      =	(* & $3ff)/4
   3432  8090		       6a 6f a8 02	      DC.L	44593002
   3433  8094
   3434  8094		       00 25	   A3	      =	(* & $3ff)/4
   3435  8094		       60 e5 d0 02	      DC.L	47244640
   3436  8098
   3437  8098		       00 26	   A3s	      =	(* & $3ff)/4
   3438  8098		       41 c3 fb 02	      DC.L	50053953
   3439  809c
   3440  809c		       00 27	   B3	      =	(* & $3ff)/4
   3441  809c		       ac 2d 29 03	      DC.L	53030316
   3442  80a0
   3443  80a0		       00 28	   C4	      =	(* & $3ff)/4
   3444  80a0		       6e 4b 59 03	      DC.L	56183662
   3445  80a4
   3446  80a4		       00 29	   C4s	      =	(* & $3ff)/4
   3447  80a4		       a5 45 8c 03	      DC.L	59524517
   3448  80a8
   3449  80a8		       00 2a	   D4	      =	(* & $3ff)/4
   3450  80a8		       dd 47 c2 03	      DC.L	63064029
   3451  80ac
   3452  80ac		       00 2b	   D4s	      =	(* & $3ff)/4
   3453  80ac		       3b 80 fb 03	      DC.L	66814011
   3454  80b0
   3455  80b0		       00 2c	   E4	      =	(* & $3ff)/4
   3456  80b0		       a3 1f 38 04	      DC.L	70786979
   3457  80b4
   3458  80b4		       00 2d	   F4	      =	(* & $3ff)/4
   3459  80b4		       e0 59 78 04	      DC.L	74996192
   3460  80b8
   3461  80b8		       00 2e	   F4s	      =	(* & $3ff)/4
   3462  80b8		       d1 65 bc 04	      DC.L	79455697
   3463  80bc
   3464  80bc		       00 2f	   G4	      =	(* & $3ff)/4
   3465  80bc		       9b 7d 04 05	      DC.L	84180379
   3466  80c0
   3467  80c0		       00 30	   G4s	      =	(* & $3ff)/4
   3468  80c0		       d5 de 50 05	      DC.L	89186005
   3469  80c4
   3470  80c4		       00 31	   A4	      =	(* & $3ff)/4
   3471  80c4		       c1 ca a1 05	      DC.L	94489281
   3472  80c8
   3473  80c8		       00 32	   A4s	      =	(* & $3ff)/4
   3474  80c8		       82 86 f7 05	      DC.L	100107906
   3475  80cc
   3476  80cc		       00 33	   B4	      =	(* & $3ff)/4
   3477  80cc		       57 5b 52 06	      DC.L	106060631
   3478  80d0
   3479  80d0		       00 34	   C5	      =	(* & $3ff)/4
   3480  80d0		       dd 96 b2 06	      DC.L	112367325
   3481  80d4
   3482  80d4		       00 35	   C5s	      =	(* & $3ff)/4
   3483  80d4		       4a 8b 18 07	      DC.L	119049034
   3484  80d8
   3485  80d8		       00 36	   D5	      =	(* & $3ff)/4
   3486  80d8		       b9 8f 84 07	      DC.L	126128057
   3487  80dc
   3488  80dc		       00 37	   D5s	      =	(* & $3ff)/4
   3489  80dc		       76 00 f7 07	      DC.L	133628022
   3490  80e0
   3491  80e0		       00 38	   E5	      =	(* & $3ff)/4
   3492  80e0		       46 3f 70 08	      DC.L	141573958
   3493  80e4
   3494  80e4		       00 39	   F5	      =	(* & $3ff)/4
   3495  80e4		       bf b3 f0 08	      DC.L	149992383
   3496  80e8
   3497  80e8		       00 3a	   F5s	      =	(* & $3ff)/4
   3498  80e8		       a3 cb 78 09	      DC.L	158911395
   3499  80ec
   3500  80ec		       00 3b	   G5	      =	(* & $3ff)/4
   3501  80ec		       36 fb 08 0a	      DC.L	168360758
   3502  80f0
   3503  80f0		       00 3c	   G5s	      =	(* & $3ff)/4
   3504  80f0		       a9 bd a1 0a	      DC.L	178372009
   3505  80f4
   3506  80f4		       00 3d	   A5	      =	(* & $3ff)/4
   3507  80f4		       81 95 43 0b	      DC.L	188978561
   3508  80f8
   3509  80f8		       00 3e	   A5s	      =	(* & $3ff)/4
   3510  80f8		       03 0d ef 0b	      DC.L	200215811
   3511  80fc
   3512  80fc		       00 3f	   B5	      =	(* & $3ff)/4
   3513  80fc		       af b6 a4 0c	      DC.L	212121263
   3514  8100
   3515  8100		       00 40	   C6	      =	(* & $3ff)/4
   3516  8100		       b9 2d 65 0d	      DC.L	224734649
   3517  8104
   3518  8104		       00 41	   C6s	      =	(* & $3ff)/4
   3519  8104		       93 16 31 0e	      DC.L	238098067
   3520  8108
   3521  8108		       00 42	   D6	      =	(* & $3ff)/4
   3522  8108		       73 1f 09 0f	      DC.L	252256115
   3523  810c
   3524  810c		       00 43	   D6s	      =	(* & $3ff)/4
   3525  810c		       ec 00 ee 0f	      DC.L	267256044
   3526  8110
   3527  8110		       00 44	   E6	      =	(* & $3ff)/4
   3528  8110		       8b 7e e0 10	      DC.L	283147915
   3529  8114
   3530  8114		       00 45	   F6	      =	(* & $3ff)/4
   3531  8114		       7f 67 e1 11	      DC.L	299984767
   3532  8118
   3533  8118		       00 46	   F6s	      =	(* & $3ff)/4
   3534  8118		       45 97 f1 12	      DC.L	317822789
   3535  811c
   3536  811c		       00 47	   G6	      =	(* & $3ff)/4
   3537  811c		       6c f6 11 14	      DC.L	336721516
   3538  8120
   3539  8120		       00 48	   G6s	      =	(* & $3ff)/4
   3540  8120		       53 7b 43 15	      DC.L	356744019
   3541  8124
   3542  8124		       00 49	   A6	      =	(* & $3ff)/4
   3543  8124		       02 2b 87 16	      DC.L	377957122
   3544  8128
   3545  8128		       00 4a	   A6s	      =	(* & $3ff)/4
   3546  8128		       06 1a de 17	      DC.L	400431622
   3547  812c
   3548  812c		       00 4b	   B6	      =	(* & $3ff)/4
   3549  812c		       5d 6d 49 19	      DC.L	424242525
   3550  8130
   3551  8130		       00 4c	   C7	      =	(* & $3ff)/4
   3552  8130		       73 5b ca 1a	      DC.L	449469299
   3553  8134
   3554  8134		       00 4d	   C7s	      =	(* & $3ff)/4
   3555  8134		       26 2d 62 1c	      DC.L	476196134
   3556  8138
   3557  8138		       00 4e	   D7	      =	(* & $3ff)/4
   3558  8138		       e6 3e 12 1e	      DC.L	504512230
   3559  813c
   3560  813c		       00 4f	   D7s	      =	(* & $3ff)/4
   3561  813c		       d8 01 dc 1f	      DC.L	534512088
   3562  8140
   3563  8140		       00 50	   E7	      =	(* & $3ff)/4
   3564  8140		       17 fd c0 21	      DC.L	566295831
   3565  8144
   3566  8144		       00 51	   F7	      =	(* & $3ff)/4
   3567  8144		       fd ce c2 23	      DC.L	599969533
   3568  8148
   3569  8148		       00 52	   F7s	      =	(* & $3ff)/4
   3570  8148		       8a 2e e3 25	      DC.L	635645578
   3571  814c
   3572  814c		       00 53	   G7	      =	(* & $3ff)/4
   3573  814c		       d7 ec 23 28	      DC.L	673443031
   3574  8150
   3575  8150		       00 54	   G7s	      =	(* & $3ff)/4
   3576  8150		       a6 f6 86 2a	      DC.L	713488038
   3577  8154
   3578  8154		       00 55	   A7	      =	(* & $3ff)/4
   3579  8154		       04 56 0e 2d	      DC.L	755914244
   3580  8158
   3581  8158		       00 56	   A7s	      =	(* & $3ff)/4
   3582  8158		       0c 34 bc 2f	      DC.L	800863244
   3583  815c
   3584  815c		       00 57	   B7	      =	(* & $3ff)/4
   3585  815c		       bb da 92 32	      DC.L	848485051
   3586  8160
   3587  8160		       00 58	   C8	      =	(* & $3ff)/4
   3588  8160		       e5 b6 94 35	      DC.L	898938597
   3589  8164
   3590  8164							;values for 89-255 may go here 
   3591  8164
   3592  8164					      if	(* <= $1400)
   3593  8164		       00 00 00 00*	      ds	($1400-*)	; pad out remaining space in frequency table
   3594  8400				  -	      else
   3595  8400				  -	      echo	"FATAL ERROR - Frequency table exceeds 1K"
   3596  8400				  -	      err
   3597  8400					      endif
